head	1.24;
access;
symbols
	OPENBSD_6_1:1.23.0.4
	OPENBSD_6_1_BASE:1.23;
locks; strict;
comment	@ * @;


1.24
date	2017.05.02.03.59.44;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	Dm63V7JYy6WzetfM;

1.23
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.22;
commitid	kT0fLt3r4lroFJra;

1.22
date	2015.09.10.15.56.24;	author jsing;	state Exp;
branches;
next	1.21;
commitid	vHznCDK3idwNEFz4;

1.21
date	2015.01.28.04.14.31;	author beck;	state Exp;
branches;
next	1.20;
commitid	WM4kCdNQZ5icdTod;

1.20
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.19;
commitid	yQEL1wOWIearrW15;

1.19
date	2014.06.24.19.37.58;	author miod;	state Exp;
branches;
next	1.18;
commitid	gcdL3V6Yguyd7T4r;

1.18
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.04.19.13.29.11;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.15.20.19.57;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2013.02.14.15.11.43;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.07;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.40;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.28;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.47;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.31;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.02;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.34;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.04.13.15.16.32;	author miod;	state Exp;
branches;
next	;


desc
@@


1.24
log
@use freezero() instead of memset/explicit_bzero + free.  Substantially
reduces conditional logic (-218, +82).

MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH cache alignment calculation bn/bn_exp.c
wasn'tt quite right.  Two other tricky bits with ASN1_STRING_FLAG_NDEF and
BN_FLG_STATIC_DATA where the condition cannot be collapsed completely.

Passes regress.  ok beck
@
text
@/* $OpenBSD: a_verify.c,v 1.23 2017/01/29 17:49:22 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <sys/types.h>

#include <stdio.h>
#include <string.h>
#include <time.h>

#include <openssl/bn.h>
#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

#include "asn1_locl.h"

int
ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *a,
    ASN1_BIT_STRING *signature, void *asn, EVP_PKEY *pkey)
{
	EVP_MD_CTX ctx;
	unsigned char *buf_in = NULL;
	int ret = -1, inl;

	int mdnid, pknid;

	if (!pkey) {
		ASN1error(ERR_R_PASSED_NULL_PARAMETER);
		return -1;
	}

	if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)
	{
		ASN1error(ASN1_R_INVALID_BIT_STRING_BITS_LEFT);
		return -1;
	}

	EVP_MD_CTX_init(&ctx);

	/* Convert signature OID into digest and public key OIDs */
	if (!OBJ_find_sigid_algs(OBJ_obj2nid(a->algorithm), &mdnid, &pknid)) {
		ASN1error(ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);
		goto err;
	}
	if (mdnid == NID_undef) {
		if (!pkey->ameth || !pkey->ameth->item_verify) {
			ASN1error(ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);
			goto err;
		}
		ret = pkey->ameth->item_verify(&ctx, it, asn, a,
		    signature, pkey);
		/* Return value of 2 means carry on, anything else means we
		 * exit straight away: either a fatal error of the underlying
		 * verification routine handles all verification.
		 */
		if (ret != 2)
			goto err;
		ret = -1;
	} else {
		const EVP_MD *type;
		type = EVP_get_digestbynid(mdnid);
		if (type == NULL) {
			ASN1error(ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
			goto err;
		}

		/* Check public key OID matches public key type */
		if (EVP_PKEY_type(pknid) != pkey->ameth->pkey_id) {
			ASN1error(ASN1_R_WRONG_PUBLIC_KEY_TYPE);
			goto err;
		}

		if (!EVP_DigestVerifyInit(&ctx, NULL, type, NULL, pkey)) {
			ASN1error(ERR_R_EVP_LIB);
			ret = 0;
			goto err;
		}

	}

	inl = ASN1_item_i2d(asn, &buf_in, it);

	if (buf_in == NULL) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (!EVP_DigestVerifyUpdate(&ctx, buf_in, inl)) {
		ASN1error(ERR_R_EVP_LIB);
		ret = 0;
		goto err;
	}

	freezero(buf_in, (unsigned int)inl);

	if (EVP_DigestVerifyFinal(&ctx, signature->data,
	    (size_t)signature->length) <= 0) {
		ASN1error(ERR_R_EVP_LIB);
		ret = 0;
		goto err;
	}
	/* we don't need to zero the 'ctx' because we just checked
	 * public information */
	/* memset(&ctx,0,sizeof(ctx)); */
	ret = 1;

err:
	EVP_MD_CTX_cleanup(&ctx);
	return (ret);
}
@


1.23
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_verify.c,v 1.22 2015/09/10 15:56:24 jsing Exp $ */
d151 1
a151 2
	explicit_bzero(buf_in, (unsigned int)inl);
	free(buf_in);
@


1.22
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_verify.c,v 1.21 2015/01/28 04:14:31 beck Exp $ */
d85 1
a85 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_PASSED_NULL_PARAMETER);
d91 1
a91 2
		ASN1err(ASN1_F_ASN1_VERIFY,
		    ASN1_R_INVALID_BIT_STRING_BITS_LEFT);
d99 1
a99 2
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,
		    ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);
d104 1
a104 2
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,
			    ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);
d120 1
a120 2
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,
			    ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
d126 1
a126 2
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,
			    ASN1_R_WRONG_PUBLIC_KEY_TYPE);
d131 1
a131 1
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_EVP_LIB);
d141 1
a141 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_MALLOC_FAILURE);
d146 1
a146 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_EVP_LIB);
d156 1
a156 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_EVP_LIB);
@


1.21
log
@Fix a number of issues relating to algorithms in signatures, Mostly
from OpenSSL with a hint of boring and some things done here. Addresses
CVE-2014-8275 for OpenSSL fully
ok miod@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_verify.c,v 1.20 2014/07/11 08:44:47 jsing Exp $ */
d62 1
d156 1
a156 1
	OPENSSL_cleanse(buf_in, (unsigned int)inl);
@


1.20
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_verify.c,v 1.19 2014/06/24 19:37:58 miod Exp $ */
d85 7
@


1.19
log
@Unifdef -UNO_SYS_TYPES_H
@
text
@d1 1
a1 1
/* $OpenBSD: a_verify.c,v 1.18 2014/06/12 15:49:27 deraadt Exp $ */
d59 2
a63 5
#include "cryptlib.h"
#include "asn1_locl.h"

#include <sys/types.h>

a64 2
#include <openssl/x509.h>
#include <openssl/objects.h>
d66 1
d68 4
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d65 1
a65 3
#ifndef NO_SYS_TYPES_H
# include <sys/types.h>
#endif
@


1.17
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/asn1/a_verify.c */
@


1.16
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d75 3
a77 2
int ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *a,
		ASN1_BIT_STRING *signature, void *asn, EVP_PKEY *pkey)
d80 2
a81 2
	unsigned char *buf_in=NULL;
	int ret= -1,inl;
d94 2
a95 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);
d100 2
a101 1
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);
d105 1
a105 1
							signature, pkey);
d115 1
a115 1
		type=EVP_get_digestbynid(mdnid);
d117 2
a118 1
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
d124 2
a125 1
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_WRONG_PUBLIC_KEY_TYPE);
d130 2
a131 2
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_EVP_LIB);
			ret=0;
d138 1
a138 1
	
d140 1
a140 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_MALLOC_FAILURE);
d144 3
a146 3
	if (!EVP_DigestVerifyUpdate(&ctx,buf_in,inl)) {
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_EVP_LIB);
		ret=0;
d150 1
a150 1
	OPENSSL_cleanse(buf_in,(unsigned int)inl);
d153 4
a156 4
	if (EVP_DigestVerifyFinal(&ctx,signature->data,
			(size_t)signature->length) <= 0) {
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_EVP_LIB);
		ret=0;
d162 2
a163 1
	ret=1;
d166 1
a166 1
	return(ret);
a167 2


@


1.15
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d84 1
a84 2
	if (!pkey)
	{
d92 1
a92 2
	if (!OBJ_find_sigid_algs(OBJ_obj2nid(a->algorithm), &mdnid, &pknid))
	{
d96 2
a97 4
	if (mdnid == NID_undef)
	{
		if (!pkey->ameth || !pkey->ameth->item_verify)
		{
d110 1
a110 3
	}
	else
	{
d113 1
a113 2
		if (type == NULL)
		{
d119 1
a119 2
		if (EVP_PKEY_type(pknid) != pkey->ameth->pkey_id)
		{
d124 1
a124 2
		if (!EVP_DigestVerifyInit(&ctx, NULL, type, NULL, pkey))
		{
d134 1
a134 2
	if (buf_in == NULL)
	{
d139 1
a139 2
	if (!EVP_DigestVerifyUpdate(&ctx,buf_in,inl))
	{
d149 1
a149 2
			(size_t)signature->length) <= 0)
	{
@


1.14
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d77 1
a77 1
	{
d85 1
a85 1
		{
d88 1
a88 1
		}
d94 1
a94 1
		{
d97 1
a97 1
		}
d99 2
a101 2
		if (!pkey->ameth || !pkey->ameth->item_verify)
			{
d104 1
a104 1
			}
d114 1
a114 1
		}
d116 1
a116 1
		{
d120 1
a120 1
			{
d123 1
a123 1
			}
d127 1
a127 1
			{
d130 1
a130 1
			}
d133 1
a133 1
			{
d137 1
a137 1
			}
d139 1
a139 1
		}
d144 1
a144 1
		{
d147 1
a147 1
		}
d150 1
a150 1
		{
d154 1
a154 1
		}
d161 1
a161 1
		{
d165 1
a165 1
		}
d173 1
a173 1
	}
@


1.13
log
@The NO_ASN1_OLD define was introduced in 0.9.7, 8 years ago, to allow for
obsolete (and mostly internal) routines to be compiled out.

We don't expect any reasonable software to stick to these interfaces, so better
clean up the view and unifdef -DNO_ASN1_OLD.

The astute reader will notice the existence of NO_OLD_ASN1 which serves a
similar purpose, but is more entangled. Its time will come, soon.
@
text
@d157 1
a157 1
	OPENSSL_free(buf_in);
@


1.12
log
@cherry pick bugfixes for http://www.openssl.org/news/secadv_20130205.txt
from the openssl git (changes between openssl 1.0.1c and 1.0.1d).
ok djm@@
@
text
@a74 59
#ifndef NO_ASN1_OLD

int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *a, ASN1_BIT_STRING *signature,
		char *data, EVP_PKEY *pkey)
	{
	EVP_MD_CTX ctx;
	const EVP_MD *type;
	unsigned char *p,*buf_in=NULL;
	int ret= -1,i,inl;

	EVP_MD_CTX_init(&ctx);
	i=OBJ_obj2nid(a->algorithm);
	type=EVP_get_digestbyname(OBJ_nid2sn(i));
	if (type == NULL)
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
		goto err;
		}
	
	inl=i2d(data,NULL);
	buf_in=OPENSSL_malloc((unsigned int)inl);
	if (buf_in == NULL)
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_MALLOC_FAILURE);
		goto err;
		}
	p=buf_in;

	i2d(data,&p);
	if (!EVP_VerifyInit_ex(&ctx,type, NULL)
		|| !EVP_VerifyUpdate(&ctx,(unsigned char *)buf_in,inl))
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_EVP_LIB);
		ret=0;
		goto err;
		}

	OPENSSL_cleanse(buf_in,(unsigned int)inl);
	OPENSSL_free(buf_in);

	if (EVP_VerifyFinal(&ctx,(unsigned char *)signature->data,
			(unsigned int)signature->length,pkey) <= 0)
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_EVP_LIB);
		ret=0;
		goto err;
		}
	/* we don't need to zero the 'ctx' because we just checked
	 * public information */
	/* memset(&ctx,0,sizeof(ctx)); */
	ret=1;
err:
	EVP_MD_CTX_cleanup(&ctx);
	return(ret);
	}

#endif


@


1.11
log
@resolve conflicts
@
text
@d143 6
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d104 7
a110 2
	EVP_VerifyInit_ex(&ctx,type, NULL);
	EVP_VerifyUpdate(&ctx,(unsigned char *)buf_in,inl);
d134 2
a135 2
int ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *a, ASN1_BIT_STRING *signature,
	     void *asn, EVP_PKEY *pkey)
a137 1
	const EVP_MD *type = NULL;
d151 1
a151 2
	type=EVP_get_digestbynid(mdnid);
	if (type == NULL)
d153 39
a191 2
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
		goto err;
d194 3
a196 2
	/* Check public key OID matches public key type */
	if (EVP_PKEY_type(pknid) != pkey->ameth->pkey_id)
d198 1
a198 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_WRONG_PUBLIC_KEY_TYPE);
d202 1
a202 1
	if (!EVP_VerifyInit_ex(&ctx,type, NULL))
a208 10
	inl = ASN1_item_i2d(asn, &buf_in, it);
	
	if (buf_in == NULL)
		{
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_MALLOC_FAILURE);
		goto err;
		}

	EVP_VerifyUpdate(&ctx,(unsigned char *)buf_in,inl);

d212 2
a213 2
	if (EVP_VerifyFinal(&ctx,(unsigned char *)signature->data,
			(unsigned int)signature->length,pkey) <= 0)
@


1.9
log
@resolve conflicts
@
text
@d63 1
d104 1
a104 6
	if (!EVP_VerifyInit_ex(&ctx,type, NULL))
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_EVP_LIB);
		ret=0;
		goto err;
		}
d133 1
a133 1
	const EVP_MD *type;
d135 3
a137 1
	int ret= -1,i,inl;
d140 8
a147 2
	i=OBJ_obj2nid(a->algorithm);
	type=EVP_get_digestbyname(OBJ_nid2sn(i));
d151 7
@


1.8
log
@resolve conflicts
@
text
@d103 6
a108 1
	EVP_VerifyInit_ex(&ctx,type, NULL);
@


1.7
log
@resolve conflicts
@
text
@d76 2
a77 2
int ASN1_verify(int (*i2d)(), X509_ALGOR *a, ASN1_BIT_STRING *signature,
	     char *data, EVP_PKEY *pkey)
d141 1
a141 1
		ASN1err(ASN1_F_ASN1_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
d147 1
a147 1
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_EVP_LIB);
d156 1
a156 1
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_MALLOC_FAILURE);
d168 1
a168 1
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_EVP_LIB);
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d145 7
a159 1
	EVP_VerifyInit_ex(&ctx,type, NULL);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d106 1
a106 1
	memset(buf_in,0,(unsigned int)inl);
d156 1
a156 1
	memset(buf_in,0,(unsigned int)inl);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d74 2
d84 1
d103 1
a103 1
	EVP_VerifyInit(&ctx,type);
d121 1
d124 52
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d91 1
a91 1
	buf_in=Malloc((unsigned int)inl);
d104 1
a104 1
	Free(buf_in);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a60 2
#include <sys/types.h>
#include <sys/stat.h>
d63 5
d104 1
a104 1
	Free((char *)buf_in);
@


1.1
log
@Initial revision
@
text
@d65 5
a69 6
#include "bn.h"
#include "x509.h"
#include "objects.h"
#include "buffer.h"
#include "evp.h"
#include "pem.h"
d71 2
a72 6
int ASN1_verify(i2d,a,signature,data,pkey)
int (*i2d)();
X509_ALGOR *a;
ASN1_BIT_STRING *signature;
char *data;
EVP_PKEY *pkey;
d75 1
a75 1
	EVP_MD *type;
d88 1
a88 1
	buf_in=(unsigned char *)Malloc((unsigned int)inl);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
d65 13
a77 15

#ifndef NO_SYS_TYPES_H
# include <sys/types.h>
#endif

#include <openssl/bn.h>
#include <openssl/x509.h>
#include <openssl/objects.h>
#include <openssl/buffer.h>
#include <openssl/evp.h>

#ifndef NO_ASN1_OLD

int ASN1_verify(int (*i2d)(), X509_ALGOR *a, ASN1_BIT_STRING *signature,
	     char *data, EVP_PKEY *pkey)
d80 1
a80 1
	const EVP_MD *type;
a83 1
	EVP_MD_CTX_init(&ctx);
d93 1
a93 1
	buf_in=OPENSSL_malloc((unsigned int)inl);
d102 1
a102 1
	EVP_VerifyInit_ex(&ctx,type, NULL);
d106 1
a106 1
	OPENSSL_free(buf_in);
a119 1
	EVP_MD_CTX_cleanup(&ctx);
a121 52

#endif


int ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *a, ASN1_BIT_STRING *signature,
	     void *asn, EVP_PKEY *pkey)
	{
	EVP_MD_CTX ctx;
	const EVP_MD *type;
	unsigned char *buf_in=NULL;
	int ret= -1,i,inl;

	EVP_MD_CTX_init(&ctx);
	i=OBJ_obj2nid(a->algorithm);
	type=EVP_get_digestbyname(OBJ_nid2sn(i));
	if (type == NULL)
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
		goto err;
		}

	inl = ASN1_item_i2d(asn, &buf_in, it);
	
	if (buf_in == NULL)
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_MALLOC_FAILURE);
		goto err;
		}

	EVP_VerifyInit_ex(&ctx,type, NULL);
	EVP_VerifyUpdate(&ctx,(unsigned char *)buf_in,inl);

	memset(buf_in,0,(unsigned int)inl);
	OPENSSL_free(buf_in);

	if (EVP_VerifyFinal(&ctx,(unsigned char *)signature->data,
			(unsigned int)signature->length,pkey) <= 0)
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_EVP_LIB);
		ret=0;
		goto err;
		}
	/* we don't need to zero the 'ctx' because we just checked
	 * public information */
	/* memset(&ctx,0,sizeof(ctx)); */
	ret=1;
err:
	EVP_MD_CTX_cleanup(&ctx);
	return(ret);
	}


@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d106 1
a106 1
	OPENSSL_cleanse(buf_in,(unsigned int)inl);
d156 1
a156 1
	OPENSSL_cleanse(buf_in,(unsigned int)inl);
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a144 7
	if (!EVP_VerifyInit_ex(&ctx,type, NULL))
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_EVP_LIB);
		ret=0;
		goto err;
		}

d153 1
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d76 2
a77 2
int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *a, ASN1_BIT_STRING *signature,
		char *data, EVP_PKEY *pkey)
d141 1
a141 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
d147 1
a147 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_EVP_LIB);
d156 1
a156 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_MALLOC_FAILURE);
d168 1
a168 1
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_EVP_LIB);
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@d103 1
a103 6
	if (!EVP_VerifyInit_ex(&ctx,type, NULL))
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_EVP_LIB);
		ret=0;
		goto err;
		}
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@a62 1
#include "asn1_locl.h"
d103 6
a108 1
	EVP_VerifyInit_ex(&ctx,type, NULL);
d137 1
a137 1
	const EVP_MD *type = NULL;
d139 1
a139 3
	int ret= -1,inl;

	int mdnid, pknid;
d142 2
a143 8

	/* Convert signature OID into digest and public key OIDs */
	if (!OBJ_find_sigid_algs(OBJ_obj2nid(a->algorithm), &mdnid, &pknid))
		{
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);
		goto err;
		}
	type=EVP_get_digestbynid(mdnid);
a146 7
		goto err;
		}

	/* Check public key OID matches public key type */
	if (EVP_PKEY_type(pknid) != pkey->ameth->pkey_id)
		{
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_WRONG_PUBLIC_KEY_TYPE);
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@d104 2
a105 7
	if (!EVP_VerifyInit_ex(&ctx,type, NULL)
		|| !EVP_VerifyUpdate(&ctx,(unsigned char *)buf_in,inl))
		{
		ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_EVP_LIB);
		ret=0;
		goto err;
		}
d129 2
a130 2
int ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *a,
		ASN1_BIT_STRING *signature, void *asn, EVP_PKEY *pkey)
d133 1
d147 2
a148 1
	if (mdnid == NID_undef)
d150 10
a159 38
		if (!pkey->ameth || !pkey->ameth->item_verify)
			{
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);
			goto err;
			}
		ret = pkey->ameth->item_verify(&ctx, it, asn, a,
							signature, pkey);
		/* Return value of 2 means carry on, anything else means we
		 * exit straight away: either a fatal error of the underlying
		 * verification routine handles all verification.
		 */
		if (ret != 2)
			goto err;
		ret = -1;
		}
	else
		{
		const EVP_MD *type;
		type=EVP_get_digestbynid(mdnid);
		if (type == NULL)
			{
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
			goto err;
			}

		/* Check public key OID matches public key type */
		if (EVP_PKEY_type(pknid) != pkey->ameth->pkey_id)
			{
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_WRONG_PUBLIC_KEY_TYPE);
			goto err;
			}

		if (!EVP_DigestVerifyInit(&ctx, NULL, type, NULL, pkey))
			{
			ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_EVP_LIB);
			ret=0;
			goto err;
			}
d161 5
d176 1
a176 6
	if (!EVP_DigestVerifyUpdate(&ctx,buf_in,inl))
		{
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_EVP_LIB);
		ret=0;
		goto err;
		}
d181 2
a182 2
	if (EVP_DigestVerifyFinal(&ctx,signature->data,
			(size_t)signature->length) <= 0)
@


1.1.1.9
log
@Import OpenSSL 1.0.1g
@
text
@a142 6
	if (!pkey)
		{
		ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_PASSED_NULL_PARAMETER);
		return -1;
		}

@


