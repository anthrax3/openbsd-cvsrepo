head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13;
locks; strict;
comment	@ * @;


1.13
date	2015.02.14.14.56.45;	author jsing;	state Exp;
branches;
next	1.12;
commitid	U5dv1tigTurnaaTS;

1.12
date	2015.02.10.05.25.45;	author jsing;	state Exp;
branches;
next	1.11;
commitid	HQSAPkY0rIzvWYsC;

1.11
date	2015.02.10.04.21.50;	author jsing;	state Exp;
branches;
next	1.10;
commitid	lmzaeFtqKbLCKhxJ;

1.10
date	2015.02.09.15.05.59;	author jsing;	state Exp;
branches;
next	1.9;
commitid	X3hE8E9VwC2nOKbW;

1.9
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.04.18.11.20.32;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.13;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.50;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.34;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.50;	author markus;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Expand ASN1_CHOICE*, ASN1_SEQUENCE* and associated macros, making the
data structures visible and easier to review, without having to wade
through layers and layers of asn1t.h macros.

Change has been scripted and there is no change to the generated assembly.

Discussed with beck@@ miod@@ tedu@@
@
text
@/* $OpenBSD: x_attrib.c,v 1.12 2015/02/10 05:25:45 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1t.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

/* X509_ATTRIBUTE: this has the following form:
 *
 * typedef struct x509_attributes_st
 *	{
 *	ASN1_OBJECT *object;
 *	int single;
 *	union	{
 *		char		*ptr;
 * 		STACK_OF(ASN1_TYPE) *set;
 * 		ASN1_TYPE	*single;
 *		} value;
 *	} X509_ATTRIBUTE;
 *
 * this needs some extra thought because the CHOICE type is
 * merged with the main structure and because the value can
 * be anything at all we *must* try the SET OF first because
 * the ASN1_ANY type will swallow anything including the whole
 * SET OF structure.
 */

static const ASN1_TEMPLATE X509_ATTRIBUTE_SET_ch_tt[] = {
	{
		.flags = ASN1_TFLG_SET_OF,
		.tag = 0,
		.offset = offsetof(X509_ATTRIBUTE, value.set),
		.field_name = "value.set",
		.item = &ASN1_ANY_it,
	},
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(X509_ATTRIBUTE, value.single),
		.field_name = "value.single",
		.item = &ASN1_ANY_it,
	},
};

const ASN1_ITEM X509_ATTRIBUTE_SET_it = {
	.itype = ASN1_ITYPE_CHOICE,
	.utype = offsetof(X509_ATTRIBUTE, single),
	.templates = X509_ATTRIBUTE_SET_ch_tt,
	.tcount = sizeof(X509_ATTRIBUTE_SET_ch_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(X509_ATTRIBUTE),
	.sname = "X509_ATTRIBUTE",
};

static const ASN1_TEMPLATE X509_ATTRIBUTE_seq_tt[] = {
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(X509_ATTRIBUTE, object),
		.field_name = "object",
		.item = &ASN1_OBJECT_it,
	},
	/* CHOICE type merged with parent */
	{
		.flags = 0 | ASN1_TFLG_COMBINE,
		.tag = 0,
		.offset = 0,
		.field_name = NULL,
		.item = &X509_ATTRIBUTE_SET_it,
	},
};

const ASN1_ITEM X509_ATTRIBUTE_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = X509_ATTRIBUTE_seq_tt,
	.tcount = sizeof(X509_ATTRIBUTE_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(X509_ATTRIBUTE),
	.sname = "X509_ATTRIBUTE",
};


X509_ATTRIBUTE *
d2i_X509_ATTRIBUTE(X509_ATTRIBUTE **a, const unsigned char **in, long len)
{
	return (X509_ATTRIBUTE *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &X509_ATTRIBUTE_it);
}

int
i2d_X509_ATTRIBUTE(X509_ATTRIBUTE *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_ATTRIBUTE_it);
}

X509_ATTRIBUTE *
X509_ATTRIBUTE_new(void)
{
	return (X509_ATTRIBUTE *)ASN1_item_new(&X509_ATTRIBUTE_it);
}

void
X509_ATTRIBUTE_free(X509_ATTRIBUTE *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &X509_ATTRIBUTE_it);
}

X509_ATTRIBUTE *
X509_ATTRIBUTE_dup(X509_ATTRIBUTE *x)
{
	return ASN1_item_dup(&X509_ATTRIBUTE_it, x);
}

X509_ATTRIBUTE *
X509_ATTRIBUTE_create(int nid, int atrtype, void *value)
{
	X509_ATTRIBUTE *ret = NULL;
	ASN1_TYPE *val = NULL;

	if ((ret = X509_ATTRIBUTE_new()) == NULL)
		return (NULL);
	ret->object = OBJ_nid2obj(nid);
	ret->single = 0;
	if ((ret->value.set = sk_ASN1_TYPE_new_null()) == NULL)
		goto err;
	if ((val = ASN1_TYPE_new()) == NULL)
		goto err;
	if (!sk_ASN1_TYPE_push(ret->value.set, val))
		goto err;

	ASN1_TYPE_set(val, atrtype, value);
	return (ret);

err:
	if (ret != NULL)
		X509_ATTRIBUTE_free(ret);
	if (val != NULL)
		ASN1_TYPE_free(val);
	return (NULL);
}
@


1.12
log
@Manually expand ASN1_ITEM_rptr macros that should have been expanded with
the IMPLEMENT_ASN1_DUP_FUNCTION macro.
@
text
@d1 1
a1 1
/* $OpenBSD: x_attrib.c,v 1.11 2015/02/10 04:21:50 jsing Exp $ */
d85 16
a100 4
ASN1_CHOICE(X509_ATTRIBUTE_SET) = {
	ASN1_SET_OF(X509_ATTRIBUTE, value.set, ASN1_ANY),
	ASN1_SIMPLE(X509_ATTRIBUTE, value.single, ASN1_ANY)
} ASN1_CHOICE_END_selector(X509_ATTRIBUTE, X509_ATTRIBUTE_SET, single)
d102 18
a119 2
ASN1_SEQUENCE(X509_ATTRIBUTE) = {
	ASN1_SIMPLE(X509_ATTRIBUTE, object, ASN1_OBJECT),
d121 18
a138 2
	ASN1_EX_COMBINE(0, 0, X509_ATTRIBUTE_SET)
} ASN1_SEQUENCE_END(X509_ATTRIBUTE)
@


1.11
log
@Expand the IMPLEMENT_ASN1_DUP_FUNCTION macro so that the code is visible
and functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_attrib.c,v 1.10 2015/02/09 15:05:59 jsing Exp $ */
d125 1
a125 1
	return ASN1_item_dup(ASN1_ITEM_rptr(X509_ATTRIBUTE), x);
@


1.10
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_attrib.c,v 1.9 2014/07/11 08:44:47 jsing Exp $ */
d121 6
a126 1
IMPLEMENT_ASN1_DUP_FUNCTION(X509_ATTRIBUTE)
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_attrib.c,v 1.8 2014/06/12 15:49:27 deraadt Exp $ */
d96 25
a120 1
IMPLEMENT_ASN1_FUNCTIONS(X509_ATTRIBUTE)
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
a61 1
#include "cryptlib.h"
a62 1
#include <openssl/asn1t.h>
@


1.7
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/asn1/x_attrib.c */
@


1.6
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d99 2
a100 1
X509_ATTRIBUTE *X509_ATTRIBUTE_create(int nid, int atrtype, void *value)
d102 13
a114 2
	X509_ATTRIBUTE *ret=NULL;
	ASN1_TYPE *val=NULL;
d116 2
a117 7
	if ((ret=X509_ATTRIBUTE_new()) == NULL)
		return(NULL);
	ret->object=OBJ_nid2obj(nid);
	ret->single=0;
	if ((ret->value.set=sk_ASN1_TYPE_new_null()) == NULL) goto err;
	if ((val=ASN1_TYPE_new()) == NULL) goto err;
	if (!sk_ASN1_TYPE_push(ret->value.set,val)) goto err;
a118 2
	ASN1_TYPE_set(val,atrtype,value);
	return(ret);
d120 5
a124 3
	if (ret != NULL) X509_ATTRIBUTE_free(ret);
	if (val != NULL) ASN1_TYPE_free(val);
	return(NULL);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d100 1
a100 1
	{
d118 1
a118 1
	}
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d62 1
a62 1
#include <openssl/asn1_mac.h>
d65 30
a94 35
/* sequence */
int i2d_X509_ATTRIBUTE(X509_ATTRIBUTE *a, unsigned char **pp)
	{
	int k=0;
	int r=0,ret=0;
	unsigned char **p=NULL;

	if (a == NULL) return(0);

	p=NULL;
	for (;;)
		{
		if (k)
			{
			r=ASN1_object_size(1,ret,V_ASN1_SEQUENCE);
			if (pp == NULL) return(r);
			p=pp;
			ASN1_put_object(p,1,ret,V_ASN1_SEQUENCE,
				V_ASN1_UNIVERSAL);
			}

		ret+=i2d_ASN1_OBJECT(a->object,p);
		if (a->set)
			ret+=i2d_ASN1_SET_OF_ASN1_TYPE(a->value.set,p,i2d_ASN1_TYPE,
				V_ASN1_SET,V_ASN1_UNIVERSAL,IS_SET);
		else
			ret+=i2d_ASN1_TYPE(a->value.single,p);
		if (k++) return(r);
		}
	}

X509_ATTRIBUTE *d2i_X509_ATTRIBUTE(X509_ATTRIBUTE **a, unsigned char **pp,
	     long length)
	{
	M_ASN1_D2I_vars(a,X509_ATTRIBUTE *,X509_ATTRIBUTE_new);
d96 2
a97 19
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->object,d2i_ASN1_OBJECT);

	if ((c.slen != 0) &&
		(M_ASN1_next == (V_ASN1_CONSTRUCTED|V_ASN1_UNIVERSAL|V_ASN1_SET)))
		{
		ret->set=1;
		M_ASN1_D2I_get_set_type(ASN1_TYPE,ret->value.set,d2i_ASN1_TYPE,
					ASN1_TYPE_free);
		}
	else
		{
		ret->set=0;
		M_ASN1_D2I_get(ret->value.single,d2i_ASN1_TYPE);
		}

	M_ASN1_D2I_Finish(a,X509_ATTRIBUTE_free,ASN1_F_D2I_X509_ATTRIBUTE);
	}
d107 1
a107 1
	ret->set=1;
a118 25

X509_ATTRIBUTE *X509_ATTRIBUTE_new(void)
	{
	X509_ATTRIBUTE *ret=NULL;
	ASN1_CTX c;

	M_ASN1_New_Malloc(ret,X509_ATTRIBUTE);
	ret->object=OBJ_nid2obj(NID_undef);
	ret->set=0;
	ret->value.ptr=NULL;
	return(ret);
	M_ASN1_New_Error(ASN1_F_X509_ATTRIBUTE_NEW);
	}
	
void X509_ATTRIBUTE_free(X509_ATTRIBUTE *a)
	{
	if (a == NULL) return;
	ASN1_OBJECT_free(a->object);
	if (a->set)
		sk_ASN1_TYPE_pop_free(a->value.set,ASN1_TYPE_free);
	else
		ASN1_TYPE_free(a->value.single);
	OPENSSL_free(a);
	}

@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d163 1
a163 1
	Free(a);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d163 1
a163 1
	Free((char *)a);
@


1.1
log
@Initial revision
@
text
@d61 3
a63 8
#include "objects.h"
#include "asn1_mac.h"

/*
 * ASN1err(ASN1_F_D2I_X509_ATTRIBUTE,ASN1_R_LENGTH_MISMATCH);
 * ASN1err(ASN1_F_X509_ATTRIBUTE_NEW,ASN1_R_UNKNOWN_ATTRIBUTE_TYPE);
 * ASN1err(ASN1_F_I2D_X509_ATTRIBUTE,ASN1_R_UNKNOWN_ATTRIBUTE_TYPE);
 */
d66 1
a66 3
int i2d_X509_ATTRIBUTE(a,pp)
X509_ATTRIBUTE *a;
unsigned char **pp;
d88 2
a89 2
			ret+=i2d_ASN1_SET(a->value.set,p,i2d_ASN1_TYPE,
				V_ASN1_SET,V_ASN1_UNIVERSAL);
d96 2
a97 4
X509_ATTRIBUTE *d2i_X509_ATTRIBUTE(a,pp,length)
X509_ATTRIBUTE **a;
unsigned char **pp;
long length;
d109 2
a110 1
		M_ASN1_D2I_get_set(ret->value.set,d2i_ASN1_TYPE);
d121 22
a142 1
X509_ATTRIBUTE *X509_ATTRIBUTE_new()
d145 1
d148 1
a148 1
	M_ASN1_New(ret->object,ASN1_OBJECT_new);
d155 1
a155 2
void X509_ATTRIBUTE_free(a)
X509_ATTRIBUTE *a;
d160 1
a160 1
		sk_pop_free(a->value.set,ASN1_TYPE_free);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 7
a67 22
#include <openssl/objects.h>
#include <openssl/asn1t.h>
#include <openssl/x509.h>

/* X509_ATTRIBUTE: this has the following form:
 *
 * typedef struct x509_attributes_st
 *	{
 *	ASN1_OBJECT *object;
 *	int single;
 *	union	{
 *		char		*ptr;
 * 		STACK_OF(ASN1_TYPE) *set;
 * 		ASN1_TYPE	*single;
 *		} value;
 *	} X509_ATTRIBUTE;
 *
 * this needs some extra thought because the CHOICE type is
 * merged with the main structure and because the value can
 * be anything at all we *must* try the SET OF first because
 * the ASN1_ANY type will swallow anything including the whole
 * SET OF structure.
d70 39
a108 10
ASN1_CHOICE(X509_ATTRIBUTE_SET) = {
	ASN1_SET_OF(X509_ATTRIBUTE, value.set, ASN1_ANY),
	ASN1_SIMPLE(X509_ATTRIBUTE, value.single, ASN1_ANY)
} ASN1_CHOICE_END_selector(X509_ATTRIBUTE, X509_ATTRIBUTE_SET, single)

ASN1_SEQUENCE(X509_ATTRIBUTE) = {
	ASN1_SIMPLE(X509_ATTRIBUTE, object, ASN1_OBJECT),
	/* CHOICE type merged with parent */
	ASN1_EX_COMBINE(0, 0, X509_ATTRIBUTE_SET)
} ASN1_SEQUENCE_END(X509_ATTRIBUTE)
d110 15
a124 2
IMPLEMENT_ASN1_FUNCTIONS(X509_ATTRIBUTE)
IMPLEMENT_ASN1_DUP_FUNCTION(X509_ATTRIBUTE)
d126 4
a129 1
X509_ATTRIBUTE *X509_ATTRIBUTE_create(int nid, int atrtype, void *value)
a131 9
	ASN1_TYPE *val=NULL;

	if ((ret=X509_ATTRIBUTE_new()) == NULL)
		return(NULL);
	ret->object=OBJ_nid2obj(nid);
	ret->single=0;
	if ((ret->value.set=sk_ASN1_TYPE_new_null()) == NULL) goto err;
	if ((val=ASN1_TYPE_new()) == NULL) goto err;
	if (!sk_ASN1_TYPE_push(ret->value.set,val)) goto err;
d133 4
a136 1
	ASN1_TYPE_set(val,atrtype,value);
d138 1
a138 4
err:
	if (ret != NULL) X509_ATTRIBUTE_free(ret);
	if (val != NULL) ASN1_TYPE_free(val);
	return(NULL);
d140 13
@

