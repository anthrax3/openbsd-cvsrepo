head	1.22;
access;
symbols;
locks; strict;
comment	@ * @;


1.22
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.21;
commitid	kT0fLt3r4lroFJra;

1.21
date	2016.12.30.16.04.34;	author jsing;	state Exp;
branches;
next	1.20;
commitid	Gs5oxnpdEYq1UpKL;

1.20
date	2015.02.11.04.00.39;	author jsing;	state Exp;
branches;
next	1.19;
commitid	QCjRtjn2xv9owjIW;

1.19
date	2015.02.11.03.39.51;	author jsing;	state Exp;
branches;
next	1.18;
commitid	PWeA1V6nbEryguKH;

1.18
date	2015.02.09.15.05.59;	author jsing;	state Exp;
branches;
next	1.17;
commitid	X3hE8E9VwC2nOKbW;

1.17
date	2014.10.22.13.02.03;	author jsing;	state Exp;
branches;
next	1.16;
commitid	PjnBgKe6Buhbf937;

1.16
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.15;
commitid	yQEL1wOWIearrW15;

1.15
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.14;
commitid	id8dTrTMtnTn4fqt;

1.14
date	2014.07.09.22.55.17;	author tedu;	state Exp;
branches;
next	1.13;
commitid	5JdGfnLK1lLuGWd1;

1.13
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.04.19.06.15.56;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.09;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.15.06.18.32;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.08.45;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.32;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.49;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.02;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: p5_pbe.c,v 1.21 2016/12/30 16:04:34 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/asn1t.h>
#include <openssl/err.h>
#include <openssl/x509.h>

/* PKCS#5 password based encryption structure */

static const ASN1_TEMPLATE PBEPARAM_seq_tt[] = {
	{
		.offset = offsetof(PBEPARAM, salt),
		.field_name = "salt",
		.item = &ASN1_OCTET_STRING_it,
	},
	{
		.offset = offsetof(PBEPARAM, iter),
		.field_name = "iter",
		.item = &ASN1_INTEGER_it,
	},
};

const ASN1_ITEM PBEPARAM_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = PBEPARAM_seq_tt,
	.tcount = sizeof(PBEPARAM_seq_tt) / sizeof(ASN1_TEMPLATE),
	.size = sizeof(PBEPARAM),
	.sname = "PBEPARAM",
};


PBEPARAM *
d2i_PBEPARAM(PBEPARAM **a, const unsigned char **in, long len)
{
	return (PBEPARAM *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &PBEPARAM_it);
}

int
i2d_PBEPARAM(PBEPARAM *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &PBEPARAM_it);
}

PBEPARAM *
PBEPARAM_new(void)
{
	return (PBEPARAM *)ASN1_item_new(&PBEPARAM_it);
}

void
PBEPARAM_free(PBEPARAM *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &PBEPARAM_it);
}


/* Set an algorithm identifier for a PKCS#5 PBE algorithm */

int
PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,
    const unsigned char *salt, int saltlen)
{
	PBEPARAM *pbe = NULL;
	ASN1_STRING *pbe_str = NULL;
	unsigned char *sstr;

	pbe = PBEPARAM_new();
	if (!pbe) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		goto err;
	}
	if (iter <= 0)
		iter = PKCS5_DEFAULT_ITER;
	if (!ASN1_INTEGER_set(pbe->iter, iter)) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		goto err;
	}
	if (!saltlen)
		saltlen = PKCS5_SALT_LEN;
	if (!ASN1_STRING_set(pbe->salt, NULL, saltlen)) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		goto err;
	}
	sstr = ASN1_STRING_data(pbe->salt);
	if (salt)
		memcpy(sstr, salt, saltlen);
	else
		arc4random_buf(sstr, saltlen);

	if (!ASN1_item_pack(pbe, &PBEPARAM_it, &pbe_str)) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		goto err;
	}

	PBEPARAM_free(pbe);
	pbe = NULL;

	if (X509_ALGOR_set0(algor, OBJ_nid2obj(alg), V_ASN1_SEQUENCE, pbe_str))
		return 1;

err:
	if (pbe != NULL)
		PBEPARAM_free(pbe);
	ASN1_STRING_free(pbe_str);
	return 0;
}

/* Return an algorithm identifier for a PKCS#5 PBE algorithm */

X509_ALGOR *
PKCS5_pbe_set(int alg, int iter, const unsigned char *salt, int saltlen)
{
	X509_ALGOR *ret;
	ret = X509_ALGOR_new();
	if (!ret) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}

	if (PKCS5_pbe_set0_algor(ret, alg, iter, salt, saltlen))
		return ret;

	X509_ALGOR_free(ret);
	return NULL;
}
@


1.21
log
@Expand ASN1_ITEM_rptr and ASN1_ITEM_ptr macros - no change in generated
assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbe.c,v 1.20 2015/02/11 04:00:39 jsing Exp $ */
d130 1
a130 1
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR, ERR_R_MALLOC_FAILURE);
d136 1
a136 1
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR, ERR_R_MALLOC_FAILURE);
d142 1
a142 1
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR, ERR_R_MALLOC_FAILURE);
d152 1
a152 1
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR, ERR_R_MALLOC_FAILURE);
d177 1
a177 1
		ASN1err(ASN1_F_PKCS5_PBE_SET, ERR_R_MALLOC_FAILURE);
@


1.20
log
@Remove initialisers with default values from the ASN1 data structures.

Minor changes in generated assembly due to the compiler swapping from
.quad 0/.long 0 to .zero, along with changes due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbe.c,v 1.19 2015/02/11 03:39:51 jsing Exp $ */
d151 1
a151 1
	if (!ASN1_item_pack(pbe, ASN1_ITEM_rptr(PBEPARAM), &pbe_str)) {
@


1.19
log
@Expand most of the ASN1_SEQUENCE* and associated macros, making the data
structures visible and easier to review, without having to wade through
layers and layers of asn1t.h macros.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbe.c,v 1.18 2015/02/09 15:05:59 jsing Exp $ */
a70 2
		.flags = 0,
		.tag = 0,
a75 2
		.flags = 0,
		.tag = 0,
a86 1
	.funcs = NULL,
@


1.18
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbe.c,v 1.17 2014/10/22 13:02:03 jsing Exp $ */
d69 26
a94 4
ASN1_SEQUENCE(PBEPARAM) = {
	ASN1_SIMPLE(PBEPARAM, salt, ASN1_OCTET_STRING),
	ASN1_SIMPLE(PBEPARAM, iter, ASN1_INTEGER)
} ASN1_SEQUENCE_END(PBEPARAM)
@


1.17
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbe.c,v 1.16 2014/07/11 08:44:47 jsing Exp $ */
d74 25
a98 1
IMPLEMENT_ASN1_FUNCTIONS(PBEPARAM)
@


1.16
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbe.c,v 1.15 2014/07/10 13:58:22 jsing Exp $ */
d60 1
a64 1
#include <openssl/rand.h>
d107 2
a108 2
	else if (RAND_pseudo_bytes(sstr, saltlen) < 0)
		goto err;
@


1.15
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbe.c,v 1.14 2014/07/09 22:55:17 tedu Exp $ */
a61 1
#include "cryptlib.h"
d63 2
a65 1
#include <openssl/rand.h>
@


1.14
log
@ASN1_STRING_free can handle NULL, so callers don't need to check. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbe.c,v 1.13 2014/06/12 15:49:27 deraadt Exp $ */
d60 2
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d122 1
a122 2
	if (pbe_str != NULL)
		ASN1_STRING_free(pbe_str);
@


1.12
log
@More KNF.
@
text
@d1 1
a1 1
/* p5_pbe.c */
@


1.11
log
@lob a few more knf grenades in here to soften things up.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d77 3
a79 2
int PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,
				const unsigned char *salt, int saltlen)
d81 2
a82 2
	PBEPARAM *pbe=NULL;
	ASN1_STRING *pbe_str=NULL;
d87 1
a87 1
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
d90 1
a90 1
	if(iter <= 0)
d93 1
a93 1
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
d99 1
a99 1
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
d108 2
a109 2
	if(!ASN1_item_pack(pbe, ASN1_ITEM_rptr(PBEPARAM), &pbe_str)) {
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
d129 2
a130 2
X509_ALGOR *PKCS5_pbe_set(int alg, int iter,
				const unsigned char *salt, int saltlen)
d135 1
a135 1
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
d139 1
a139 1
	if (PKCS5_pbe_set0_algor(ret, alg, iter, salt, saltlen)) 
@


1.10
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d85 1
a85 2
	if (!pbe)
	{
d91 1
a91 2
	if (!ASN1_INTEGER_set(pbe->iter, iter))
	{
d97 1
a97 2
	if (!ASN1_STRING_set(pbe->salt, NULL, saltlen))
	{
d107 1
a107 2
	if(!ASN1_item_pack(pbe, ASN1_ITEM_rptr(PBEPARAM), &pbe_str))
	{
d133 1
a133 2
	if (!ret)
	{
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d79 1
a79 1
	{
d86 1
a86 1
		{
d89 1
a89 1
		}
d93 1
a93 1
		{
d96 1
a96 1
		}
d100 1
a100 1
		{
d103 1
a103 1
		}
d111 1
a111 1
		{
d114 1
a114 1
		}
d128 1
a128 1
	}
d134 1
a134 1
	{
d138 1
a138 1
		{
d141 1
a141 1
		}
d148 1
a148 1
	}
@


1.8
log
@resolve conflicts
@
text
@a73 1
/* Return an algorithm identifier for a PKCS#5 PBE algorithm */
d75 5
a79 3
X509_ALGOR *PKCS5_pbe_set(int alg, int iter, unsigned char *salt,
	     int saltlen)
{
d81 2
a82 3
	ASN1_OBJECT *al;
	X509_ALGOR *algor;
	ASN1_TYPE *astype=NULL;
d84 24
a107 2
	if (!(pbe = PBEPARAM_new ())) {
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
d109 4
a112 4
	}
	if(iter <= 0) iter = PKCS5_DEFAULT_ITER;
	if (!ASN1_INTEGER_set(pbe->iter, iter)) {
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
d114 14
a128 9
	if (!saltlen) saltlen = PKCS5_SALT_LEN;
	if (!(pbe->salt->data = OPENSSL_malloc (saltlen))) {
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
		goto err;
	}
	pbe->salt->length = saltlen;
	if (salt) memcpy (pbe->salt->data, salt, saltlen);
	else if (RAND_pseudo_bytes (pbe->salt->data, saltlen) < 0)
		goto err;
d130 9
a138 1
	if (!(astype = ASN1_TYPE_new())) {
d140 2
a141 2
		goto err;
	}
d143 2
a144 17
	astype->type = V_ASN1_SEQUENCE;
	if(!ASN1_pack_string_of(PBEPARAM, pbe, i2d_PBEPARAM,
				&astype->value.sequence)) {
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
		goto err;
	}
	PBEPARAM_free (pbe);
	pbe = NULL;
	
	al = OBJ_nid2obj(alg); /* never need to free al */
	if (!(algor = X509_ALGOR_new())) {
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
		goto err;
	}
	ASN1_OBJECT_free(algor->algorithm);
	algor->algorithm = al;
	algor->parameter = astype;
d146 1
a146 4
	return (algor);
err:
	if (pbe != NULL) PBEPARAM_free(pbe);
	if (astype != NULL) ASN1_TYPE_free(astype);
d148 1
a148 1
}
@


1.7
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.6
log
@resolve conflicts
@
text
@d85 1
a85 1
		ASN1err(ASN1_F_ASN1_PBE_SET,ERR_R_MALLOC_FAILURE);
d90 1
a90 1
		ASN1err(ASN1_F_ASN1_PBE_SET,ERR_R_MALLOC_FAILURE);
d95 1
a95 1
		ASN1err(ASN1_F_ASN1_PBE_SET,ERR_R_MALLOC_FAILURE);
d104 1
a104 1
		ASN1err(ASN1_F_ASN1_PBE_SET,ERR_R_MALLOC_FAILURE);
d109 3
a111 2
	if(!ASN1_pack_string(pbe, i2d_PBEPARAM, &astype->value.sequence)) {
		ASN1err(ASN1_F_ASN1_PBE_SET,ERR_R_MALLOC_FAILURE);
d119 1
a119 1
		ASN1err(ASN1_F_ASN1_PBE_SET,ERR_R_MALLOC_FAILURE);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d79 1
a79 1
	PBEPARAM *pbe;
d82 1
a82 1
	ASN1_TYPE *astype;
d86 1
a86 1
		return NULL;
d89 4
a92 1
	ASN1_INTEGER_set (pbe->iter, iter);
d96 1
a96 1
		return NULL;
d101 1
a101 1
		return NULL;
d105 1
a105 1
		return NULL;
d111 1
a111 1
		return NULL;
d114 1
d119 1
a119 1
		return NULL;
d126 4
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d61 1
a61 1
#include <openssl/asn1_mac.h>
d67 4
a70 5
int i2d_PBEPARAM(PBEPARAM *a, unsigned char **pp)
{
	M_ASN1_I2D_vars(a);
	M_ASN1_I2D_len (a->salt, i2d_ASN1_OCTET_STRING);
	M_ASN1_I2D_len (a->iter, i2d_ASN1_INTEGER);
d72 1
a72 35
	M_ASN1_I2D_seq_total ();

	M_ASN1_I2D_put (a->salt, i2d_ASN1_OCTET_STRING);
	M_ASN1_I2D_put (a->iter, i2d_ASN1_INTEGER);
	M_ASN1_I2D_finish();
}

PBEPARAM *PBEPARAM_new(void)
{
	PBEPARAM *ret=NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, PBEPARAM);
	M_ASN1_New(ret->iter,M_ASN1_INTEGER_new);
	M_ASN1_New(ret->salt,M_ASN1_OCTET_STRING_new);
	return (ret);
	M_ASN1_New_Error(ASN1_F_PBEPARAM_NEW);
}

PBEPARAM *d2i_PBEPARAM(PBEPARAM **a, unsigned char **pp, long length)
{
	M_ASN1_D2I_vars(a,PBEPARAM *,PBEPARAM_new);
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get (ret->salt, d2i_ASN1_OCTET_STRING);
	M_ASN1_D2I_get (ret->iter, d2i_ASN1_INTEGER);
	M_ASN1_D2I_Finish(a, PBEPARAM_free, ASN1_F_D2I_PBEPARAM);
}

void PBEPARAM_free (PBEPARAM *a)
{
	if(a==NULL) return;
	M_ASN1_OCTET_STRING_free(a->salt);
	M_ASN1_INTEGER_free (a->iter);
	OPENSSL_free (a);
}
@


1.3
log
@OpenSSL 0.9.5a merge
@
text
@d106 1
a106 1
	Free (a);
d126 1
a126 1
	if (!(pbe->salt->data = Malloc (saltlen))) {
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d132 1
a132 1
	else if (RAND_bytes (pbe->salt->data, saltlen) <= 0)
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d85 2
a86 2
	M_ASN1_New(ret->iter,ASN1_INTEGER_new);
	M_ASN1_New(ret->salt,ASN1_OCTET_STRING_new);
d104 3
a106 3
	ASN1_OCTET_STRING_free(a->salt);
	ASN1_INTEGER_free (a->iter);
	Free ((char *)a);
d132 2
a133 1
	else RAND_bytes (pbe->salt->data, saltlen);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/asn1t.h>
d67 23
a89 4
ASN1_SEQUENCE(PBEPARAM) = {
	ASN1_SIMPLE(PBEPARAM, salt, ASN1_OCTET_STRING),
	ASN1_SIMPLE(PBEPARAM, iter, ASN1_INTEGER)
} ASN1_SEQUENCE_END(PBEPARAM)
d91 17
a107 1
IMPLEMENT_ASN1_FUNCTIONS(PBEPARAM)
d126 1
a126 1
	if (!(pbe->salt->data = OPENSSL_malloc (saltlen))) {
d132 1
a132 2
	else if (RAND_pseudo_bytes (pbe->salt->data, saltlen) < 0)
		return NULL;
@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d79 1
a79 1
	PBEPARAM *pbe=NULL;
d82 1
a82 1
	ASN1_TYPE *astype=NULL;
d86 1
a86 1
		goto err;
d89 1
a89 4
	if (!ASN1_INTEGER_set(pbe->iter, iter)) {
		ASN1err(ASN1_F_ASN1_PBE_SET,ERR_R_MALLOC_FAILURE);
		goto err;
	}
d93 1
a93 1
		goto err;
d98 1
a98 1
		goto err;
d102 1
a102 1
		goto err;
d108 1
a108 1
		goto err;
a110 1
	pbe = NULL;
d115 1
a115 1
		goto err;
a121 4
err:
	if (pbe != NULL) PBEPARAM_free(pbe);
	if (astype != NULL) ASN1_TYPE_free(astype);
	return NULL;
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d85 1
a85 1
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
d90 1
a90 1
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
d95 1
a95 1
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
d104 1
a104 1
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
d109 2
a110 3
	if(!ASN1_pack_string_of(PBEPARAM, pbe, i2d_PBEPARAM,
				&astype->value.sequence)) {
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
d118 1
a118 1
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d74 1
d76 3
a78 5
/* Set an algorithm identifier for a PKCS#5 PBE algorithm */

int PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,
				const unsigned char *salt, int saltlen)
	{
d80 3
a82 2
	ASN1_STRING *pbe_str=NULL;
	unsigned char *sstr;
d84 17
a100 24
	pbe = PBEPARAM_new();
	if (!pbe)
		{
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
		goto err;
		}
	if(iter <= 0)
		iter = PKCS5_DEFAULT_ITER;
	if (!ASN1_INTEGER_set(pbe->iter, iter))
		{
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
		goto err;
		}
	if (!saltlen)
		saltlen = PKCS5_SALT_LEN;
	if (!ASN1_STRING_set(pbe->salt, NULL, saltlen))
		{
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
		goto err;
		}
	sstr = ASN1_STRING_data(pbe->salt);
	if (salt)
		memcpy(sstr, salt, saltlen);
	else if (RAND_pseudo_bytes(sstr, saltlen) < 0)
d103 2
a104 3
	if(!ASN1_item_pack(pbe, ASN1_ITEM_rptr(PBEPARAM), &pbe_str))
		{
		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
d106 1
a106 1
		}
d108 7
a114 1
	PBEPARAM_free(pbe);
d116 9
d126 1
a126 3
	if (X509_ALGOR_set0(algor, OBJ_nid2obj(alg), V_ASN1_SEQUENCE, pbe_str))
		return 1;

d128 2
a129 24
	if (pbe != NULL)
		PBEPARAM_free(pbe);
	if (pbe_str != NULL)
		ASN1_STRING_free(pbe_str);
	return 0;
	}

/* Return an algorithm identifier for a PKCS#5 PBE algorithm */

X509_ALGOR *PKCS5_pbe_set(int alg, int iter,
				const unsigned char *salt, int saltlen)
	{
	X509_ALGOR *ret;
	ret = X509_ALGOR_new();
	if (!ret)
		{
		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
		return NULL;
		}

	if (PKCS5_pbe_set0_algor(ret, alg, iter, salt, saltlen)) 
		return ret;

	X509_ALGOR_free(ret);
d131 1
a131 1
	}
@


