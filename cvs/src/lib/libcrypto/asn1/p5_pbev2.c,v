head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.2
	OPENBSD_6_1_BASE:1.25;
locks; strict;
comment	@ * @;


1.25
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.24;
commitid	kT0fLt3r4lroFJra;

1.24
date	2016.12.30.16.04.34;	author jsing;	state Exp;
branches;
next	1.23;
commitid	Gs5oxnpdEYq1UpKL;

1.23
date	2015.09.30.18.41.06;	author jsing;	state Exp;
branches;
next	1.22;
commitid	8UbnRNonXjerilzx;

1.22
date	2015.09.30.17.30.15;	author jsing;	state Exp;
branches;
next	1.21;
commitid	f3YLBhwPPENmVqqA;

1.21
date	2015.02.11.04.00.39;	author jsing;	state Exp;
branches;
next	1.20;
commitid	QCjRtjn2xv9owjIW;

1.20
date	2015.02.11.03.39.51;	author jsing;	state Exp;
branches;
next	1.19;
commitid	PWeA1V6nbEryguKH;

1.19
date	2015.02.09.15.05.59;	author jsing;	state Exp;
branches;
next	1.18;
commitid	X3hE8E9VwC2nOKbW;

1.18
date	2014.10.22.13.02.03;	author jsing;	state Exp;
branches;
next	1.17;
commitid	PjnBgKe6Buhbf937;

1.17
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.15;
commitid	id8dTrTMtnTn4fqt;

1.15
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.04.19.06.15.56;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.21.01.49.11;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.15.06.18.32;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.08.45;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.32;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.49;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.02;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.34;	author djm;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: p5_pbev2.c,v 1.24 2016/12/30 16:04:34 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999-2004.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/asn1t.h>
#include <openssl/err.h>
#include <openssl/x509.h>

/* PKCS#5 v2.0 password based encryption structures */

static const ASN1_TEMPLATE PBE2PARAM_seq_tt[] = {
	{
		.offset = offsetof(PBE2PARAM, keyfunc),
		.field_name = "keyfunc",
		.item = &X509_ALGOR_it,
	},
	{
		.offset = offsetof(PBE2PARAM, encryption),
		.field_name = "encryption",
		.item = &X509_ALGOR_it,
	},
};

const ASN1_ITEM PBE2PARAM_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = PBE2PARAM_seq_tt,
	.tcount = sizeof(PBE2PARAM_seq_tt) / sizeof(ASN1_TEMPLATE),
	.size = sizeof(PBE2PARAM),
	.sname = "PBE2PARAM",
};


PBE2PARAM *
d2i_PBE2PARAM(PBE2PARAM **a, const unsigned char **in, long len)
{
	return (PBE2PARAM *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &PBE2PARAM_it);
}

int
i2d_PBE2PARAM(PBE2PARAM *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &PBE2PARAM_it);
}

PBE2PARAM *
PBE2PARAM_new(void)
{
	return (PBE2PARAM *)ASN1_item_new(&PBE2PARAM_it);
}

void
PBE2PARAM_free(PBE2PARAM *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &PBE2PARAM_it);
}

static const ASN1_TEMPLATE PBKDF2PARAM_seq_tt[] = {
	{
		.offset = offsetof(PBKDF2PARAM, salt),
		.field_name = "salt",
		.item = &ASN1_ANY_it,
	},
	{
		.offset = offsetof(PBKDF2PARAM, iter),
		.field_name = "iter",
		.item = &ASN1_INTEGER_it,
	},
	{
		.flags = ASN1_TFLG_OPTIONAL,
		.offset = offsetof(PBKDF2PARAM, keylength),
		.field_name = "keylength",
		.item = &ASN1_INTEGER_it,
	},
	{
		.flags = ASN1_TFLG_OPTIONAL,
		.offset = offsetof(PBKDF2PARAM, prf),
		.field_name = "prf",
		.item = &X509_ALGOR_it,
	},
};

const ASN1_ITEM PBKDF2PARAM_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = PBKDF2PARAM_seq_tt,
	.tcount = sizeof(PBKDF2PARAM_seq_tt) / sizeof(ASN1_TEMPLATE),
	.size = sizeof(PBKDF2PARAM),
	.sname = "PBKDF2PARAM",
};


PBKDF2PARAM *
d2i_PBKDF2PARAM(PBKDF2PARAM **a, const unsigned char **in, long len)
{
	return (PBKDF2PARAM *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &PBKDF2PARAM_it);
}

int
i2d_PBKDF2PARAM(PBKDF2PARAM *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &PBKDF2PARAM_it);
}

PBKDF2PARAM *
PBKDF2PARAM_new(void)
{
	return (PBKDF2PARAM *)ASN1_item_new(&PBKDF2PARAM_it);
}

void
PBKDF2PARAM_free(PBKDF2PARAM *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &PBKDF2PARAM_it);
}

/* Return an algorithm identifier for a PKCS#5 v2.0 PBE algorithm:
 * yes I know this is horrible!
 *
 * Extended version to allow application supplied PRF NID and IV.
 */

X509_ALGOR *
PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter, unsigned char *salt,
    int saltlen, unsigned char *aiv, int prf_nid)
{
	X509_ALGOR *scheme = NULL, *kalg = NULL, *ret = NULL;
	int alg_nid, keylen;
	EVP_CIPHER_CTX ctx;
	unsigned char iv[EVP_MAX_IV_LENGTH];
	PBE2PARAM *pbe2 = NULL;
	ASN1_OBJECT *obj;

	alg_nid = EVP_CIPHER_type(cipher);
	if (alg_nid == NID_undef) {
		ASN1error(ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER);
		goto err;
	}
	obj = OBJ_nid2obj(alg_nid);

	if (!(pbe2 = PBE2PARAM_new()))
		goto merr;

	/* Setup the AlgorithmIdentifier for the encryption scheme */
	scheme = pbe2->encryption;

	scheme->algorithm = obj;
	if (!(scheme->parameter = ASN1_TYPE_new()))
		goto merr;

	/* Create random IV */
	if (EVP_CIPHER_iv_length(cipher)) {
		if (aiv)
			memcpy(iv, aiv, EVP_CIPHER_iv_length(cipher));
		else
			arc4random_buf(iv, EVP_CIPHER_iv_length(cipher));
	}

	EVP_CIPHER_CTX_init(&ctx);

	/* Dummy cipherinit to just setup the IV, and PRF */
	if (!EVP_CipherInit_ex(&ctx, cipher, NULL, NULL, iv, 0))
		goto err;
	if (EVP_CIPHER_param_to_asn1(&ctx, scheme->parameter) < 0) {
		ASN1error(ASN1_R_ERROR_SETTING_CIPHER_PARAMS);
		EVP_CIPHER_CTX_cleanup(&ctx);
		goto err;
	}
	/* If prf NID unspecified see if cipher has a preference.
	 * An error is OK here: just means use default PRF.
	 */
	if ((prf_nid == -1) &&
	    EVP_CIPHER_CTX_ctrl(&ctx, EVP_CTRL_PBE_PRF_NID, 0, &prf_nid) <= 0) {
		ERR_clear_error();
		prf_nid = NID_hmacWithSHA1;
	}
	EVP_CIPHER_CTX_cleanup(&ctx);

	/* If its RC2 then we'd better setup the key length */

	if (alg_nid == NID_rc2_cbc)
		keylen = EVP_CIPHER_key_length(cipher);
	else
		keylen = -1;

	/* Setup keyfunc */

	X509_ALGOR_free(pbe2->keyfunc);

	pbe2->keyfunc = PKCS5_pbkdf2_set(iter, salt, saltlen, prf_nid, keylen);

	if (!pbe2->keyfunc)
		goto merr;

	/* Now set up top level AlgorithmIdentifier */

	if (!(ret = X509_ALGOR_new()))
		goto merr;
	if (!(ret->parameter = ASN1_TYPE_new()))
		goto merr;

	ret->algorithm = OBJ_nid2obj(NID_pbes2);

	/* Encode PBE2PARAM into parameter */

	if (!ASN1_item_pack(pbe2, &PBE2PARAM_it,
		&ret->parameter->value.sequence)) goto merr;
	ret->parameter->type = V_ASN1_SEQUENCE;

	PBE2PARAM_free(pbe2);
	pbe2 = NULL;

	return ret;

merr:
	ASN1error(ERR_R_MALLOC_FAILURE);

err:
	PBE2PARAM_free(pbe2);
	/* Note 'scheme' is freed as part of pbe2 */
	X509_ALGOR_free(kalg);
	X509_ALGOR_free(ret);

	return NULL;
}

X509_ALGOR *
PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter, unsigned char *salt,
    int saltlen)
{
	return PKCS5_pbe2_set_iv(cipher, iter, salt, saltlen, NULL, -1);
}

X509_ALGOR *
PKCS5_pbkdf2_set(int iter, unsigned char *salt, int saltlen, int prf_nid,
    int keylen)
{
	X509_ALGOR *keyfunc = NULL;
	PBKDF2PARAM *kdf = NULL;
	ASN1_OCTET_STRING *osalt = NULL;

	if (!(kdf = PBKDF2PARAM_new()))
		goto merr;
	if (!(osalt = ASN1_OCTET_STRING_new()))
		goto merr;

	kdf->salt->value.octet_string = osalt;
	kdf->salt->type = V_ASN1_OCTET_STRING;

	if (!saltlen)
		saltlen = PKCS5_SALT_LEN;
	if (!(osalt->data = malloc (saltlen)))
		goto merr;

	osalt->length = saltlen;

	if (salt)
		memcpy (osalt->data, salt, saltlen);
	else
		arc4random_buf(osalt->data, saltlen);

	if (iter <= 0)
		iter = PKCS5_DEFAULT_ITER;

	if (!ASN1_INTEGER_set(kdf->iter, iter))
		goto merr;

	/* If have a key len set it up */

	if (keylen > 0) {
		if (!(kdf->keylength = ASN1_INTEGER_new()))
			goto merr;
		if (!ASN1_INTEGER_set(kdf->keylength, keylen))
			goto merr;
	}

	/* prf can stay NULL if we are using hmacWithSHA1 */
	if (prf_nid > 0 && prf_nid != NID_hmacWithSHA1) {
		kdf->prf = X509_ALGOR_new();
		if (!kdf->prf)
			goto merr;
		X509_ALGOR_set0(kdf->prf, OBJ_nid2obj(prf_nid),
		V_ASN1_NULL, NULL);
	}

	/* Finally setup the keyfunc structure */

	keyfunc = X509_ALGOR_new();
	if (!keyfunc)
		goto merr;

	keyfunc->algorithm = OBJ_nid2obj(NID_id_pbkdf2);

	/* Encode PBKDF2PARAM into parameter of pbe2 */

	if (!(keyfunc->parameter = ASN1_TYPE_new()))
		goto merr;

	if (!ASN1_item_pack(kdf, &PBKDF2PARAM_it,
		&keyfunc->parameter->value.sequence))
		goto merr;
	keyfunc->parameter->type = V_ASN1_SEQUENCE;

	PBKDF2PARAM_free(kdf);
	return keyfunc;

merr:
	ASN1error(ERR_R_MALLOC_FAILURE);
	PBKDF2PARAM_free(kdf);
	X509_ALGOR_free(keyfunc);
	return NULL;
}
@


1.24
log
@Expand ASN1_ITEM_rptr and ASN1_ITEM_ptr macros - no change in generated
assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbev2.c,v 1.23 2015/09/30 18:41:06 jsing Exp $ */
d196 1
a196 2
		ASN1err(ASN1_F_PKCS5_PBE2_SET_IV,
		ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER);
d225 1
a225 2
		ASN1err(ASN1_F_PKCS5_PBE2_SET_IV,
		ASN1_R_ERROR_SETTING_CIPHER_PARAMS);
d276 1
a276 1
	ASN1err(ASN1_F_PKCS5_PBE2_SET_IV, ERR_R_MALLOC_FAILURE);
d368 1
a368 1
	ASN1err(ASN1_F_PKCS5_PBKDF2_SET, ERR_R_MALLOC_FAILURE);
@


1.23
log
@Replace M_ASN1_OCTET_STRING_(free|new) with ASN1_OCTET_STRING_(free|new).
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbev2.c,v 1.22 2015/09/30 17:30:15 jsing Exp $ */
d268 1
a268 1
	if (!ASN1_item_pack(pbe2, ASN1_ITEM_rptr(PBE2PARAM),
d361 1
a361 1
	if (!ASN1_item_pack(kdf, ASN1_ITEM_rptr(PBKDF2PARAM),
@


1.22
log
@Replace M_ASN1_INTEGER_(new|free) with ASN1_INTEGER_(new|free) - this is
different from the macro expansion, but the result is the same. Also
replace some ASN1_STRING_dup() with ASN1_INTEGER_dup().

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbev2.c,v 1.21 2015/02/11 04:00:39 jsing Exp $ */
d306 1
a306 1
	if (!(osalt = M_ASN1_OCTET_STRING_new()))
@


1.21
log
@Remove initialisers with default values from the ASN1 data structures.

Minor changes in generated assembly due to the compiler swapping from
.quad 0/.long 0 to .zero, along with changes due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbev2.c,v 1.20 2015/02/11 03:39:51 jsing Exp $ */
d333 1
a333 1
		if (!(kdf->keylength = M_ASN1_INTEGER_new()))
d335 1
a335 1
		if (!ASN1_INTEGER_set (kdf->keylength, keylen))
@


1.20
log
@Expand most of the ASN1_SEQUENCE* and associated macros, making the data
structures visible and easier to review, without having to wade through
layers and layers of asn1t.h macros.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbev2.c,v 1.19 2015/02/09 15:05:59 jsing Exp $ */
a70 2
		.flags = 0,
		.tag = 0,
a75 2
		.flags = 0,
		.tag = 0,
a86 1
	.funcs = NULL,
a118 2
		.flags = 0,
		.tag = 0,
a123 2
		.flags = 0,
		.tag = 0,
a129 1
		.tag = 0,
a135 1
		.tag = 0,
a146 1
	.funcs = NULL,
@


1.19
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbev2.c,v 1.18 2014/10/22 13:02:03 jsing Exp $ */
d69 26
a94 4
ASN1_SEQUENCE(PBE2PARAM) = {
	ASN1_SIMPLE(PBE2PARAM, keyfunc, X509_ALGOR),
	ASN1_SIMPLE(PBE2PARAM, encryption, X509_ALGOR)
} ASN1_SEQUENCE_END(PBE2PARAM)
d122 40
a161 6
ASN1_SEQUENCE(PBKDF2PARAM) = {
	ASN1_SIMPLE(PBKDF2PARAM, salt, ASN1_ANY),
	ASN1_SIMPLE(PBKDF2PARAM, iter, ASN1_INTEGER),
	ASN1_OPT(PBKDF2PARAM, keylength, ASN1_INTEGER),
	ASN1_OPT(PBKDF2PARAM, prf, X509_ALGOR)
} ASN1_SEQUENCE_END(PBKDF2PARAM)
@


1.18
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbev2.c,v 1.17 2014/07/11 08:44:47 jsing Exp $ */
d74 25
a98 1
IMPLEMENT_ASN1_FUNCTIONS(PBE2PARAM)
d107 25
a131 1
IMPLEMENT_ASN1_FUNCTIONS(PBKDF2PARAM)
@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbev2.c,v 1.16 2014/07/10 13:58:22 jsing Exp $ */
d60 1
a64 1
#include <openssl/rand.h>
d124 2
a125 3
		else if (RAND_pseudo_bytes(iv,
		    EVP_CIPHER_iv_length(cipher)) < 0)
			goto err;
d229 2
a230 2
	else if (RAND_pseudo_bytes (osalt->data, saltlen) < 0)
		goto merr;
@


1.16
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_pbev2.c,v 1.15 2014/06/12 15:49:27 deraadt Exp $ */
a61 1
#include "cryptlib.h"
d63 2
a65 1
#include <openssl/rand.h>
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.14
log
@More KNF.
@
text
@d1 1
a1 1
/* p5_pbev2.c */
@


1.13
log
@lob a few more knf grenades in here to soften things up.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d89 3
a91 3
X509_ALGOR *PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter,
				 unsigned char *salt, int saltlen,
				 unsigned char *aiv, int prf_nid)
d101 1
a101 1
	if(alg_nid == NID_undef) {
d103 1
a103 1
				ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER);
d108 2
a109 1
	if(!(pbe2 = PBE2PARAM_new())) goto merr;
d115 2
a116 1
	if(!(scheme->parameter = ASN1_TYPE_new())) goto merr;
d122 3
a124 2
		else if (RAND_pseudo_bytes(iv, EVP_CIPHER_iv_length(cipher)) < 0)
  			goto err;
d132 1
a132 1
	if(EVP_CIPHER_param_to_asn1(&ctx, scheme->parameter) < 0) {
d134 1
a134 1
					ASN1_R_ERROR_SETTING_CIPHER_PARAMS);
d141 1
a141 1
	if ((prf_nid == -1) && 
d150 1
a150 1
	if(alg_nid == NID_rc2_cbc)
d166 4
a169 2
	if(!(ret = X509_ALGOR_new())) goto merr;
	if(!(ret->parameter = ASN1_TYPE_new())) goto merr;
d175 2
a176 2
	if(!ASN1_item_pack(pbe2, ASN1_ITEM_rptr(PBE2PARAM),
				 &ret->parameter->value.sequence)) goto merr;
d185 1
a185 1
	ASN1err(ASN1_F_PKCS5_PBE2_SET_IV,ERR_R_MALLOC_FAILURE);
d187 1
a187 1
	err:
a193 1

d196 3
a198 2
X509_ALGOR *PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,
				 unsigned char *salt, int saltlen)
d203 3
a205 2
X509_ALGOR *PKCS5_pbkdf2_set(int iter, unsigned char *salt, int saltlen,
				int prf_nid, int keylen)
d211 1
a211 1
	if(!(kdf = PBKDF2PARAM_new()))
d213 1
a213 1
	if(!(osalt = M_ASN1_OCTET_STRING_new()))
d231 1
a231 1
	if(iter <= 0)
d234 1
a234 1
	if(!ASN1_INTEGER_set(kdf->iter, iter))
d239 2
a240 2
	if(keylen > 0) {
		if(!(kdf->keylength = M_ASN1_INTEGER_new()))
d242 1
a242 1
		if(!ASN1_INTEGER_set (kdf->keylength, keylen))
d244 1
a244 1
		}
d252 1
a252 1
					V_ASN1_NULL, NULL);
d265 1
a265 1
	if(!(keyfunc->parameter = ASN1_TYPE_new()))
d268 2
a269 2
	if(!ASN1_item_pack(kdf, ASN1_ITEM_rptr(PBKDF2PARAM),
			 &keyfunc->parameter->value.sequence))
d277 1
a277 1
	ASN1err(ASN1_F_PKCS5_PBKDF2_SET,ERR_R_MALLOC_FAILURE);
a281 1

@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d117 1
a117 2
	if (EVP_CIPHER_iv_length(cipher))
		{
d122 1
a122 1
		}
d139 1
a139 2
	EVP_CIPHER_CTX_ctrl(&ctx, EVP_CTRL_PBE_PRF_NID, 0, &prf_nid) <= 0)
		{
d142 1
a142 1
		}
d179 1
a179 1
	merr:
d194 1
a194 1
	{
d196 1
a196 1
	}
d200 1
a200 1
	{
d233 1
a233 2
	if(keylen > 0) 
		{
d241 1
a241 2
	if (prf_nid > 0 && prf_nid != NID_hmacWithSHA1)
		{
d247 1
a247 1
		}
d270 1
a270 1
	merr:
d275 1
a275 1
	}
@


1.11
log
@resolve conflicts
@
text
@d217 1
a217 1
	if (!(osalt->data = OPENSSL_malloc (saltlen)))
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d94 1
a94 1
	int alg_nid;
a96 1
	PBKDF2PARAM *kdf = NULL;
a97 1
	ASN1_OCTET_STRING *osalt = NULL;
d128 2
a129 1
	EVP_CipherInit_ex(&ctx, cipher, NULL, NULL, iv, 0);
a146 17
	if(!(kdf = PBKDF2PARAM_new())) goto merr;
	if(!(osalt = M_ASN1_OCTET_STRING_new())) goto merr;

	if (!saltlen) saltlen = PKCS5_SALT_LEN;
	if (!(osalt->data = OPENSSL_malloc (saltlen))) goto merr;
	osalt->length = saltlen;
	if (salt) memcpy (osalt->data, salt, saltlen);
	else if (RAND_pseudo_bytes (osalt->data, saltlen) < 0) goto merr;

	if(iter <= 0) iter = PKCS5_DEFAULT_ITER;
	if(!ASN1_INTEGER_set(kdf->iter, iter)) goto merr;

	/* Now include salt in kdf structure */
	kdf->salt->value.octet_string = osalt;
	kdf->salt->type = V_ASN1_OCTET_STRING;
	osalt = NULL;

d149 4
a152 17
	if(alg_nid == NID_rc2_cbc) {
		if(!(kdf->keylength = M_ASN1_INTEGER_new())) goto merr;
		if(!ASN1_INTEGER_set (kdf->keylength,
				 EVP_CIPHER_key_length(cipher))) goto merr;
	}

	/* prf can stay NULL if we are using hmacWithSHA1 */
	if (prf_nid != NID_hmacWithSHA1)
		{
		kdf->prf = X509_ALGOR_new();
		if (!kdf->prf)
			goto merr;
		X509_ALGOR_set0(kdf->prf, OBJ_nid2obj(prf_nid),
					V_ASN1_NULL, NULL);
		}

	/* Now setup the PBE2PARAM keyfunc structure */
d154 1
a154 1
	pbe2->keyfunc->algorithm = OBJ_nid2obj(NID_id_pbkdf2);
d156 1
a156 1
	/* Encode PBKDF2PARAM into parameter of pbe2 */
d158 1
a158 1
	if(!(pbe2->keyfunc->parameter = ASN1_TYPE_new())) goto merr;
d160 2
a161 6
	if(!ASN1_item_pack(kdf, ASN1_ITEM_rptr(PBKDF2PARAM),
			 &pbe2->keyfunc->parameter->value.sequence)) goto merr;
	pbe2->keyfunc->parameter->type = V_ASN1_SEQUENCE;

	PBKDF2PARAM_free(kdf);
	kdf = NULL;
a186 2
	M_ASN1_OCTET_STRING_free(osalt);
	PBKDF2PARAM_free(kdf);
d199 82
@


1.9
log
@resolve conflicts
@
text
@d85 2
d89 3
a91 2
X509_ALGOR *PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,
				 unsigned char *salt, int saltlen)
d104 1
a104 1
		ASN1err(ASN1_F_PKCS5_PBE2_SET,
d119 7
a125 3
	if (EVP_CIPHER_iv_length(cipher) &&
		RAND_pseudo_bytes(iv, EVP_CIPHER_iv_length(cipher)) < 0)
  		goto err;
d129 1
a129 1
	/* Dummy cipherinit to just setup the IV */
d132 1
a132 1
		ASN1err(ASN1_F_PKCS5_PBE2_SET,
d137 9
d173 9
a181 1
	/* prf can stay NULL because we are using hmacWithSHA1 */
d191 1
a191 1
	if(!ASN1_pack_string_of(PBKDF2PARAM, kdf, i2d_PBKDF2PARAM,
d207 1
a207 1
	if(!ASN1_pack_string_of(PBE2PARAM, pbe2, i2d_PBE2PARAM,
d217 1
a217 1
	ASN1err(ASN1_F_PKCS5_PBE2_SET,ERR_R_MALLOC_FAILURE);
d230 6
@


1.8
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.7
log
@resolve conflicts
@
text
@d118 1
a118 1
		goto err;
d167 1
a167 1
	if(!ASN1_pack_string(kdf, i2d_PBKDF2PARAM,
d183 1
a183 1
	if(!ASN1_pack_string(pbe2, i2d_PBE2PARAM,
@


1.6
log
@Merge openssl-0.9.7-stable-SNAP-20020519
@
text
@d3 1
a3 1
 * project 1999.
d116 2
a117 1
	if (RAND_pseudo_bytes(iv, EVP_CIPHER_iv_length(cipher)) < 0)
d127 1
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d119 2
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d61 1
a61 1
#include <openssl/asn1_mac.h>
d67 13
a79 57
int i2d_PBE2PARAM(PBE2PARAM *a, unsigned char **pp)
{
	M_ASN1_I2D_vars(a);
	M_ASN1_I2D_len (a->keyfunc, i2d_X509_ALGOR);
	M_ASN1_I2D_len (a->encryption, i2d_X509_ALGOR);

	M_ASN1_I2D_seq_total ();

	M_ASN1_I2D_put (a->keyfunc, i2d_X509_ALGOR);
	M_ASN1_I2D_put (a->encryption, i2d_X509_ALGOR);

	M_ASN1_I2D_finish();
}

PBE2PARAM *PBE2PARAM_new(void)
{
	PBE2PARAM *ret=NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, PBE2PARAM);
	M_ASN1_New(ret->keyfunc,X509_ALGOR_new);
	M_ASN1_New(ret->encryption,X509_ALGOR_new);
	return (ret);
	M_ASN1_New_Error(ASN1_F_PBE2PARAM_NEW);
}

PBE2PARAM *d2i_PBE2PARAM(PBE2PARAM **a, unsigned char **pp, long length)
{
	M_ASN1_D2I_vars(a,PBE2PARAM *,PBE2PARAM_new);
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get (ret->keyfunc, d2i_X509_ALGOR);
	M_ASN1_D2I_get (ret->encryption, d2i_X509_ALGOR);
	M_ASN1_D2I_Finish(a, PBE2PARAM_free, ASN1_F_D2I_PBE2PARAM);
}

void PBE2PARAM_free (PBE2PARAM *a)
{
	if(a==NULL) return;
	X509_ALGOR_free(a->keyfunc);
	X509_ALGOR_free(a->encryption);
	OPENSSL_free (a);
}

int i2d_PBKDF2PARAM(PBKDF2PARAM *a, unsigned char **pp)
{
	M_ASN1_I2D_vars(a);
	M_ASN1_I2D_len (a->salt, i2d_ASN1_TYPE);
	M_ASN1_I2D_len (a->iter, i2d_ASN1_INTEGER);
	M_ASN1_I2D_len (a->keylength, i2d_ASN1_INTEGER);
	M_ASN1_I2D_len (a->prf, i2d_X509_ALGOR);

	M_ASN1_I2D_seq_total ();

	M_ASN1_I2D_put (a->salt, i2d_ASN1_TYPE);
	M_ASN1_I2D_put (a->iter, i2d_ASN1_INTEGER);
	M_ASN1_I2D_put (a->keylength, i2d_ASN1_INTEGER);
	M_ASN1_I2D_put (a->prf, i2d_X509_ALGOR);
d81 1
a81 38
	M_ASN1_I2D_finish();
}

PBKDF2PARAM *PBKDF2PARAM_new(void)
{
	PBKDF2PARAM *ret=NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, PBKDF2PARAM);
	M_ASN1_New(ret->salt, ASN1_TYPE_new);
	M_ASN1_New(ret->iter, M_ASN1_INTEGER_new);
	ret->keylength = NULL;
	ret->prf = NULL;
	return (ret);
	M_ASN1_New_Error(ASN1_F_PBKDF2PARAM_NEW);
}

PBKDF2PARAM *d2i_PBKDF2PARAM(PBKDF2PARAM **a, unsigned char **pp,
	     long length)
{
	M_ASN1_D2I_vars(a,PBKDF2PARAM *,PBKDF2PARAM_new);
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get (ret->salt, d2i_ASN1_TYPE);
	M_ASN1_D2I_get (ret->iter, d2i_ASN1_INTEGER);
	M_ASN1_D2I_get_opt (ret->keylength, d2i_ASN1_INTEGER, V_ASN1_INTEGER);
	M_ASN1_D2I_get_opt (ret->prf, d2i_X509_ALGOR, V_ASN1_SEQUENCE);
	M_ASN1_D2I_Finish(a, PBKDF2PARAM_free, ASN1_F_D2I_PBKDF2PARAM);
}

void PBKDF2PARAM_free (PBKDF2PARAM *a)
{
	if(a==NULL) return;
	ASN1_TYPE_free(a->salt);
	M_ASN1_INTEGER_free(a->iter);
	M_ASN1_INTEGER_free(a->keylength);
	X509_ALGOR_free(a->prf);
	OPENSSL_free (a);
}
d120 1
a120 1
	EVP_CipherInit(&ctx, cipher, NULL, iv, 0);
@


1.3
log
@OpenSSL 0.9.5a merge
@
text
@d107 1
a107 1
	Free (a);
d161 1
a161 1
	Free (a);
d213 1
a213 1
	if (!(osalt->data = Malloc (saltlen))) goto merr;
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d197 2
a198 1
	RAND_pseudo_bytes(iv, EVP_CIPHER_iv_length(cipher));
d216 1
a216 1
	else if (RAND_bytes (osalt->data, saltlen) <= 0) goto merr;
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d107 1
a107 1
	Free ((char *)a);
d134 1
a134 1
	M_ASN1_New(ret->iter, ASN1_INTEGER_new);
d158 2
a159 2
	ASN1_INTEGER_free(a->iter);
	ASN1_INTEGER_free(a->keylength);
d161 1
a161 1
	Free ((char *)a);
d178 9
d193 1
a193 3
	alg_nid = EVP_CIPHER_type(cipher);

	scheme->algorithm = OBJ_nid2obj(alg_nid);
d197 1
a197 1
	RAND_bytes(iv, EVP_CIPHER_iv_length(cipher));
d209 1
a209 1
	if(!(osalt = ASN1_OCTET_STRING_new())) goto merr;
d215 1
a215 1
	else RAND_bytes (osalt->data, saltlen);
d228 1
a228 1
		if(!(kdf->keylength = ASN1_INTEGER_new())) goto merr;
d274 1
a274 1
	ASN1_OCTET_STRING_free(osalt);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/asn1t.h>
d67 42
a108 13
ASN1_SEQUENCE(PBE2PARAM) = {
	ASN1_SIMPLE(PBE2PARAM, keyfunc, X509_ALGOR),
	ASN1_SIMPLE(PBE2PARAM, encryption, X509_ALGOR)
} ASN1_SEQUENCE_END(PBE2PARAM)

IMPLEMENT_ASN1_FUNCTIONS(PBE2PARAM)

ASN1_SEQUENCE(PBKDF2PARAM) = {
	ASN1_SIMPLE(PBKDF2PARAM, salt, ASN1_ANY),
	ASN1_SIMPLE(PBKDF2PARAM, iter, ASN1_INTEGER),
	ASN1_OPT(PBKDF2PARAM, keylength, ASN1_INTEGER),
	ASN1_OPT(PBKDF2PARAM, prf, X509_ALGOR)
} ASN1_SEQUENCE_END(PBKDF2PARAM)
d110 53
a162 1
IMPLEMENT_ASN1_FUNCTIONS(PBKDF2PARAM)
a177 9
	ASN1_OBJECT *obj;

	alg_nid = EVP_CIPHER_type(cipher);
	if(alg_nid == NID_undef) {
		ASN1err(ASN1_F_PKCS5_PBE2_SET,
				ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER);
		goto err;
	}
	obj = OBJ_nid2obj(alg_nid);
d184 3
a186 1
	scheme->algorithm = obj;
d190 1
a190 4
	if (RAND_pseudo_bytes(iv, EVP_CIPHER_iv_length(cipher)) < 0)
		goto err;

	EVP_CIPHER_CTX_init(&ctx);
d193 1
a193 1
	EVP_CipherInit_ex(&ctx, cipher, NULL, NULL, iv, 0);
d202 1
a202 1
	if(!(osalt = M_ASN1_OCTET_STRING_new())) goto merr;
d205 1
a205 1
	if (!(osalt->data = OPENSSL_malloc (saltlen))) goto merr;
d208 1
a208 1
	else if (RAND_pseudo_bytes (osalt->data, saltlen) < 0) goto merr;
d221 1
a221 1
		if(!(kdf->keylength = M_ASN1_INTEGER_new())) goto merr;
d267 1
a267 1
	M_ASN1_OCTET_STRING_free(osalt);
@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d3 1
a3 1
 * project 1999-2004.
d116 1
a116 2
	if (EVP_CIPHER_iv_length(cipher) &&
		RAND_pseudo_bytes(iv, EVP_CIPHER_iv_length(cipher)) < 0)
a125 1
		EVP_CIPHER_CTX_cleanup(&ctx);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d118 1
a118 1
  		goto err;
d167 1
a167 1
	if(!ASN1_pack_string_of(PBKDF2PARAM, kdf, i2d_PBKDF2PARAM,
d183 1
a183 1
	if(!ASN1_pack_string_of(PBE2PARAM, pbe2, i2d_PBE2PARAM,
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a84 2
 *
 * Extended version to allow application supplied PRF NID and IV.
d87 2
a88 3
X509_ALGOR *PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter,
				 unsigned char *salt, int saltlen,
				 unsigned char *aiv, int prf_nid)
d101 1
a101 1
		ASN1err(ASN1_F_PKCS5_PBE2_SET_IV,
d116 3
a118 7
	if (EVP_CIPHER_iv_length(cipher))
		{
		if (aiv)
			memcpy(iv, aiv, EVP_CIPHER_iv_length(cipher));
		else if (RAND_pseudo_bytes(iv, EVP_CIPHER_iv_length(cipher)) < 0)
  			goto err;
		}
d122 1
a122 1
	/* Dummy cipherinit to just setup the IV, and PRF */
d125 1
a125 1
		ASN1err(ASN1_F_PKCS5_PBE2_SET_IV,
a129 9
	/* If prf NID unspecified see if cipher has a preference.
	 * An error is OK here: just means use default PRF.
	 */
	if ((prf_nid == -1) && 
	EVP_CIPHER_CTX_ctrl(&ctx, EVP_CTRL_PBE_PRF_NID, 0, &prf_nid) <= 0)
		{
		ERR_clear_error();
		prf_nid = NID_hmacWithSHA1;
		}
d157 1
a157 9
	/* prf can stay NULL if we are using hmacWithSHA1 */
	if (prf_nid != NID_hmacWithSHA1)
		{
		kdf->prf = X509_ALGOR_new();
		if (!kdf->prf)
			goto merr;
		X509_ALGOR_set0(kdf->prf, OBJ_nid2obj(prf_nid),
					V_ASN1_NULL, NULL);
		}
d167 1
a167 1
	if(!ASN1_item_pack(kdf, ASN1_ITEM_rptr(PBKDF2PARAM),
d183 1
a183 1
	if(!ASN1_item_pack(pbe2, ASN1_ITEM_rptr(PBE2PARAM),
d193 1
a193 1
	ASN1err(ASN1_F_PKCS5_PBE2_SET_IV,ERR_R_MALLOC_FAILURE);
a205 6

X509_ALGOR *PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,
				 unsigned char *salt, int saltlen)
	{
	return PKCS5_pbe2_set_iv(cipher, iter, salt, saltlen, NULL, -1);
	}
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@d94 1
a94 1
	int alg_nid, keylen;
d97 1
d99 1
d130 1
a130 2
	if (!EVP_CipherInit_ex(&ctx, cipher, NULL, NULL, iv, 0))
		goto err;
d148 17
d167 17
a183 4
	if(alg_nid == NID_rc2_cbc)
		keylen = EVP_CIPHER_key_length(cipher);
	else
		keylen = -1;
d185 1
a185 1
	/* Setup keyfunc */
d187 1
a187 1
	X509_ALGOR_free(pbe2->keyfunc);
d189 1
a189 1
	pbe2->keyfunc = PKCS5_pbkdf2_set(iter, salt, saltlen, prf_nid, keylen);
d191 6
a196 2
	if (!pbe2->keyfunc)
		goto merr;
d222 2
a235 82

X509_ALGOR *PKCS5_pbkdf2_set(int iter, unsigned char *salt, int saltlen,
				int prf_nid, int keylen)
	{
	X509_ALGOR *keyfunc = NULL;
	PBKDF2PARAM *kdf = NULL;
	ASN1_OCTET_STRING *osalt = NULL;

	if(!(kdf = PBKDF2PARAM_new()))
		goto merr;
	if(!(osalt = M_ASN1_OCTET_STRING_new()))
		goto merr;

	kdf->salt->value.octet_string = osalt;
	kdf->salt->type = V_ASN1_OCTET_STRING;

	if (!saltlen)
		saltlen = PKCS5_SALT_LEN;
	if (!(osalt->data = OPENSSL_malloc (saltlen)))
		goto merr;

	osalt->length = saltlen;

	if (salt)
		memcpy (osalt->data, salt, saltlen);
	else if (RAND_pseudo_bytes (osalt->data, saltlen) < 0)
		goto merr;

	if(iter <= 0)
		iter = PKCS5_DEFAULT_ITER;

	if(!ASN1_INTEGER_set(kdf->iter, iter))
		goto merr;

	/* If have a key len set it up */

	if(keylen > 0) 
		{
		if(!(kdf->keylength = M_ASN1_INTEGER_new()))
			goto merr;
		if(!ASN1_INTEGER_set (kdf->keylength, keylen))
			goto merr;
		}

	/* prf can stay NULL if we are using hmacWithSHA1 */
	if (prf_nid > 0 && prf_nid != NID_hmacWithSHA1)
		{
		kdf->prf = X509_ALGOR_new();
		if (!kdf->prf)
			goto merr;
		X509_ALGOR_set0(kdf->prf, OBJ_nid2obj(prf_nid),
					V_ASN1_NULL, NULL);
		}

	/* Finally setup the keyfunc structure */

	keyfunc = X509_ALGOR_new();
	if (!keyfunc)
		goto merr;

	keyfunc->algorithm = OBJ_nid2obj(NID_id_pbkdf2);

	/* Encode PBKDF2PARAM into parameter of pbe2 */

	if(!(keyfunc->parameter = ASN1_TYPE_new()))
		goto merr;

	if(!ASN1_item_pack(kdf, ASN1_ITEM_rptr(PBKDF2PARAM),
			 &keyfunc->parameter->value.sequence))
		goto merr;
	keyfunc->parameter->type = V_ASN1_SEQUENCE;

	PBKDF2PARAM_free(kdf);
	return keyfunc;

	merr:
	ASN1err(ASN1_F_PKCS5_PBKDF2_SET,ERR_R_MALLOC_FAILURE);
	PBKDF2PARAM_free(kdf);
	X509_ALGOR_free(keyfunc);
	return NULL;
	}

@


