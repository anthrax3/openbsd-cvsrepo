head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.6
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9;
locks; strict;
comment	@ * @;


1.9
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.06.11.01.53.02;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	4evB2EbwDYaBfe0g;

1.7
date	2014.04.15.14.38.10;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.11.22.15.18;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.43;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.34.28;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.11.21.11.36;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.01;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.02;	author djm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@tags as requested by miod and tedu
@
text
@/* $OpenBSD$ */
/* ====================================================================
 * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 */

#include <openssl/aes.h>
#include <openssl/modes.h>

void
AES_ctr128_encrypt(const unsigned char *in, unsigned char *out,
    size_t length, const AES_KEY *key, unsigned char ivec[AES_BLOCK_SIZE],
    unsigned char ecount_buf[AES_BLOCK_SIZE], unsigned int *num)
{
	CRYPTO_ctr128_encrypt(in, out, length, key, ivec, ecount_buf, num,
	    (block128_f)AES_encrypt);
}
@


1.8
log
@c-file-style hints, begone; ok beck
@
text
@d1 1
a1 1
/* crypto/aes/aes_ctr.c */
@


1.7
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d1 1
a1 1
/* crypto/aes/aes_ctr.c -*- mode:C; c-file-style: "eay" -*- */
@


1.6
log
@resolve conflicts, fix local changes
@
text
@d55 7
a61 6
void AES_ctr128_encrypt(const unsigned char *in, unsigned char *out,
			size_t length, const AES_KEY *key,
			unsigned char ivec[AES_BLOCK_SIZE],
			unsigned char ecount_buf[AES_BLOCK_SIZE],
			unsigned int *num) {
	CRYPTO_ctr128_encrypt(in,out,length,key,ivec,ecount_buf,num,(block128_f)AES_encrypt);
@


1.5
log
@resolve conflicts
@
text
@a51 7
#ifndef AES_DEBUG
# ifndef NDEBUG
#  define NDEBUG
# endif
#endif
#include <assert.h>

d53 1
a53 31
#include "aes_locl.h"

/* NOTE: the IV/counter CTR mode is big-endian.  The rest of the AES code
 * is endian-neutral. */

/* increment counter (128-bit int) by 1 */
static void AES_ctr128_inc(unsigned char *counter) {
	unsigned long c;

	/* Grab bottom dword of counter and increment */
	c = GETU32(counter + 12);
	c++;	c &= 0xFFFFFFFF;
	PUTU32(counter + 12, c);

	/* if no overflow, we're done */
	if (c)
		return;

	/* Grab 1st dword of counter and increment */
	c = GETU32(counter +  8);
	c++;	c &= 0xFFFFFFFF;
	PUTU32(counter +  8, c);

	/* if no overflow, we're done */
	if (c)
		return;

	/* Grab 2nd dword of counter and increment */
	c = GETU32(counter +  4);
	c++;	c &= 0xFFFFFFFF;
	PUTU32(counter +  4, c);
a54 23
	/* if no overflow, we're done */
	if (c)
		return;

	/* Grab top dword of counter and increment */
	c = GETU32(counter +  0);
	c++;	c &= 0xFFFFFFFF;
	PUTU32(counter +  0, c);
}

/* The input encrypted as though 128bit counter mode is being
 * used.  The extra state information to record how much of the
 * 128bit block we have used is contained in *num, and the
 * encrypted counter is kept in ecount_buf.  Both *num and
 * ecount_buf must be initialised with zeros before the first
 * call to AES_ctr128_encrypt().
 *
 * This algorithm assumes that the counter is in the x lower bits
 * of the IV (ivec), and that the application has full control over
 * overflow and the rest of the IV.  This implementation takes NO
 * responsability for checking that the counter doesn't overflow
 * into the rest of the IV when incremented.
 */
d56 5
a60 23
	const unsigned long length, const AES_KEY *key,
	unsigned char ivec[AES_BLOCK_SIZE],
	unsigned char ecount_buf[AES_BLOCK_SIZE],
	unsigned int *num) {

	unsigned int n;
	unsigned long l=length;

	assert(in && out && key && counter && num);
	assert(*num < AES_BLOCK_SIZE);

	n = *num;

	while (l--) {
		if (n == 0) {
			AES_encrypt(ivec, ecount_buf, key);
 			AES_ctr128_inc(ivec);
		}
		*(out++) = *(in++) ^ ecount_buf[n];
		n = (n+1) % AES_BLOCK_SIZE;
	}

	*num=n;
@


1.4
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d62 1
a62 1
/* NOTE: CTR mode is big-endian.  The rest of the AES code
a69 5
#ifdef L_ENDIAN
	c = GETU32(counter +  0);
	c++;
	PUTU32(counter +  0, c);
#else
d71 1
a71 1
	c++;
a72 1
#endif
a78 5
#ifdef L_ENDIAN
	c = GETU32(counter +  4);
	c++;
	PUTU32(counter +  4, c);
#else
d80 1
a80 1
	c++;
a81 1
#endif
a87 5
#ifdef L_ENDIAN
	c = GETU32(counter +  8);
	c++;
	PUTU32(counter +  8, c);
#else
d89 1
a89 1
	c++;
a90 1
#endif
a96 5
#ifdef L_ENDIAN
	c = GETU32(counter + 12);
	c++;
	PUTU32(counter + 12, c);
#else
d98 1
a98 1
	c++;
a99 2
#endif

@


1.3
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d65 1
a65 1
/* increment counter (128-bit int) by 2^64 */
d69 1
a69 1
	/* Grab 3rd dword of counter and increment */
d71 31
a101 1
	c = GETU32(counter + 8);
d103 1
a103 1
	PUTU32(counter + 8, c);
d105 1
a105 1
	c = GETU32(counter + 4);
d107 1
a107 1
	PUTU32(counter + 4, c);
d133 6
d142 1
a142 1
	unsigned char counter[AES_BLOCK_SIZE],
d156 2
a157 2
			AES_encrypt(counter, ecount_buf, key);
			AES_ctr128_inc(counter);
@


1.2
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d52 5
d58 1
d99 4
a102 1
 * 128bit block we have used is contained in *num;
d106 3
a108 1
	unsigned char *counter, unsigned int *num) {
a111 1
	unsigned char tmp[AES_BLOCK_SIZE];
d114 1
d120 1
a120 1
			AES_encrypt(counter, tmp, key);
d123 1
a123 1
		*(out++) = *(in++) ^ tmp[n];
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d109 1
a110 1
			AES_encrypt(counter, tmp, key);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d109 1
a110 1
			AES_ctr128_inc(counter);
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@a51 5
#ifndef AES_DEBUG
# ifndef NDEBUG
#  define NDEBUG
# endif
#endif
a52 1

d93 1
a93 4
 * 128bit block we have used is contained in *num, and the
 * encrypted counter is kept in ecount_buf.  Both *num and
 * ecount_buf must be initialised with zeros before the first
 * call to AES_ctr128_encrypt().
d97 1
a97 3
	unsigned char counter[AES_BLOCK_SIZE],
	unsigned char ecount_buf[AES_BLOCK_SIZE],
	unsigned int *num) {
d101 1
a103 1
	assert(*num < AES_BLOCK_SIZE);
d109 1
a109 1
			AES_encrypt(counter, ecount_buf, key);
d112 1
a112 1
		*(out++) = *(in++) ^ ecount_buf[n];
@


1.1.1.3
log
@import 0.9.7c
@
text
@d65 1
a65 1
/* increment counter (128-bit int) by 1 */
d69 1
a69 1
	/* Grab bottom dword of counter and increment */
d71 1
a71 31
	c = GETU32(counter +  0);
	c++;
	PUTU32(counter +  0, c);
#else
	c = GETU32(counter + 12);
	c++;
	PUTU32(counter + 12, c);
#endif

	/* if no overflow, we're done */
	if (c)
		return;

	/* Grab 1st dword of counter and increment */
#ifdef L_ENDIAN
	c = GETU32(counter +  4);
	c++;
	PUTU32(counter +  4, c);
#else
	c = GETU32(counter +  8);
	c++;
	PUTU32(counter +  8, c);
#endif

	/* if no overflow, we're done */
	if (c)
		return;

	/* Grab 2nd dword of counter and increment */
#ifdef L_ENDIAN
	c = GETU32(counter +  8);
d73 1
a73 1
	PUTU32(counter +  8, c);
d75 1
a75 1
	c = GETU32(counter +  4);
d77 1
a77 1
	PUTU32(counter +  4, c);
a102 6
 *
 * This algorithm assumes that the counter is in the x lower bits
 * of the IV (ivec), and that the application has full control over
 * overflow and the rest of the IV.  This implementation takes NO
 * responsability for checking that the counter doesn't overflow
 * into the rest of the IV when incremented.
d106 1
a106 1
	unsigned char ivec[AES_BLOCK_SIZE],
d120 2
a121 2
			AES_encrypt(ivec, ecount_buf, key);
 			AES_ctr128_inc(ivec);
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d62 1
a62 1
/* NOTE: the IV/counter CTR mode is big-endian.  The rest of the AES code
d70 5
d76 1
a76 1
	c++;	c &= 0xFFFFFFFF;
d78 1
d85 5
d91 1
a91 1
	c++;	c &= 0xFFFFFFFF;
d93 1
d100 5
d106 1
a106 1
	c++;	c &= 0xFFFFFFFF;
d108 1
d115 5
d121 1
a121 1
	c++;	c &= 0xFFFFFFFF;
d123 2
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d52 7
d60 31
a90 1
#include <openssl/modes.h>
d92 23
d116 23
a138 5
			size_t length, const AES_KEY *key,
			unsigned char ivec[AES_BLOCK_SIZE],
			unsigned char ecount_buf[AES_BLOCK_SIZE],
			unsigned int *num) {
	CRYPTO_ctr128_encrypt(in,out,length,key,ivec,ecount_buf,num,(block128_f)AES_encrypt);
@


