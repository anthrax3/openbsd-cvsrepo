head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.2
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2015.09.10.15.56.24;	author jsing;	state Exp;
branches;
next	1.9;
commitid	vHznCDK3idwNEFz4;

1.9
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.07.10.13.58.21;	author jsing;	state Exp;
branches;
next	1.7;
commitid	id8dTrTMtnTn4fqt;

1.7
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.05.30.15.17.43;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2014.05.22.21.12.15;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.22.21.27.11;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.15.14.38.10;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.11.03.02.32.07;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@/* $OpenBSD: aes_wrap.c,v 1.9 2014/07/11 08:44:47 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 2008 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <string.h>

#include <openssl/aes.h>
#include <openssl/bio.h>

static const unsigned char default_iv[] = {
	0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6,
};

int
AES_wrap_key(AES_KEY *key, const unsigned char *iv, unsigned char *out,
    const unsigned char *in, unsigned int inlen)
{
	unsigned char *A, B[16], *R;
	unsigned int i, j, t;
	if ((inlen & 0x7) || (inlen < 8))
		return -1;
	A = B;
	t = 1;
	memcpy(out + 8, in, inlen);
	if (!iv)
		iv = default_iv;

	memcpy(A, iv, 8);

	for (j = 0; j < 6; j++) {
		R = out + 8;
		for (i = 0; i < inlen; i += 8, t++, R += 8) {
			memcpy(B + 8, R, 8);
			AES_encrypt(B, B, key);
			A[7] ^= (unsigned char)(t & 0xff);
			if (t > 0xff) {
				A[6] ^= (unsigned char)((t >> 8) & 0xff);
				A[5] ^= (unsigned char)((t >> 16) & 0xff);
				A[4] ^= (unsigned char)((t >> 24) & 0xff);
			}
			memcpy(R, B + 8, 8);
		}
	}
	memcpy(out, A, 8);
	return inlen + 8;
}

int
AES_unwrap_key(AES_KEY *key, const unsigned char *iv, unsigned char *out,
    const unsigned char *in, unsigned int inlen)
{
	unsigned char *A, B[16], *R;
	unsigned int i, j, t;
	inlen -= 8;
	if (inlen & 0x7)
		return -1;
	if (inlen < 8)
		return -1;
	A = B;
	t = 6 * (inlen >> 3);
	memcpy(A, in, 8);
	memcpy(out, in + 8, inlen);
	for (j = 0; j < 6; j++) {
		R = out + inlen - 8;
		for (i = 0; i < inlen; i += 8, t--, R -= 8) {
			A[7] ^= (unsigned char)(t & 0xff);
			if (t > 0xff) {
				A[6] ^= (unsigned char)((t >> 8) & 0xff);
				A[5] ^= (unsigned char)((t >> 16) & 0xff);
				A[4] ^= (unsigned char)((t >> 24) & 0xff);
			}
			memcpy(B + 8, R, 8);
			AES_decrypt(B, B, key);
			memcpy(R, B + 8, 8);
		}
	}
	if (!iv)
		iv = default_iv;
	if (memcmp(A, iv, 8)) {
		explicit_bzero(out, inlen);
		return 0;
	}
	return inlen;
}
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: aes_wrap.c,v 1.8 2014/07/10 13:58:21 jsing Exp $ */
d129 1
a129 1
		OPENSSL_cleanse(out, inlen);
@


1.8
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: aes_wrap.c,v 1.7 2014/06/12 15:49:27 deraadt Exp $ */
a55 1
#include "cryptlib.h"
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d53 2
@


1.6
log
@Move the AES wrap test code into regress.
@
text
@d1 1
a1 1
/* crypto/aes/aes_wrap.c */
@


1.5
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@a132 129

#ifdef AES_WRAP_TEST

int
AES_wrap_unwrap_test(const unsigned char *kek, int keybits,
    const unsigned char *iv, const unsigned char *eout,
    const unsigned char *key, int keylen)
{
	unsigned char *otmp = NULL, *ptmp = NULL;
	int r, ret = 0;
	AES_KEY wctx;
	otmp = malloc(keylen + 8);
	ptmp = malloc(keylen);
	if (!otmp || !ptmp)
		return 0;
	if (AES_set_encrypt_key(kek, keybits, &wctx))
		goto err;
	r = AES_wrap_key(&wctx, iv, otmp, key, keylen);
	if (r <= 0)
		goto err;

	if (eout && memcmp(eout, otmp, keylen))
		goto err;

	if (AES_set_decrypt_key(kek, keybits, &wctx))
		goto err;
	r = AES_unwrap_key(&wctx, iv, ptmp, otmp, r);

	if (memcmp(key, ptmp, keylen))
		goto err;

	ret = 1;

err:
	free(otmp);
	free(ptmp);

	return ret;
}


int
main(int argc, char **argv)
{
	static const unsigned char kek[] = {
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
	};

	static const unsigned char key[] = {
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};

	static const unsigned char e1[] = {
		0x1f, 0xa6, 0x8b, 0x0a, 0x81, 0x12, 0xb4, 0x47,
		0xae, 0xf3, 0x4b, 0xd8, 0xfb, 0x5a, 0x7b, 0x82,
		0x9d, 0x3e, 0x86, 0x23, 0x71, 0xd2, 0xcf, 0xe5
	};

	static const unsigned char e2[] = {
		0x96, 0x77, 0x8b, 0x25, 0xae, 0x6c, 0xa4, 0x35,
		0xf9, 0x2b, 0x5b, 0x97, 0xc0, 0x50, 0xae, 0xd2,
		0x46, 0x8a, 0xb8, 0xa1, 0x7a, 0xd8, 0x4e, 0x5d
	};

	static const unsigned char e3[] = {
		0x64, 0xe8, 0xc3, 0xf9, 0xce, 0x0f, 0x5b, 0xa2,
		0x63, 0xe9, 0x77, 0x79, 0x05, 0x81, 0x8a, 0x2a,
		0x93, 0xc8, 0x19, 0x1e, 0x7d, 0x6e, 0x8a, 0xe7
	};

	static const unsigned char e4[] = {
		0x03, 0x1d, 0x33, 0x26, 0x4e, 0x15, 0xd3, 0x32,
		0x68, 0xf2, 0x4e, 0xc2, 0x60, 0x74, 0x3e, 0xdc,
		0xe1, 0xc6, 0xc7, 0xdd, 0xee, 0x72, 0x5a, 0x93,
		0x6b, 0xa8, 0x14, 0x91, 0x5c, 0x67, 0x62, 0xd2
	};

	static const unsigned char e5[] = {
		0xa8, 0xf9, 0xbc, 0x16, 0x12, 0xc6, 0x8b, 0x3f,
		0xf6, 0xe6, 0xf4, 0xfb, 0xe3, 0x0e, 0x71, 0xe4,
		0x76, 0x9c, 0x8b, 0x80, 0xa3, 0x2c, 0xb8, 0x95,
		0x8c, 0xd5, 0xd1, 0x7d, 0x6b, 0x25, 0x4d, 0xa1
	};

	static const unsigned char e6[] = {
		0x28, 0xc9, 0xf4, 0x04, 0xc4, 0xb8, 0x10, 0xf4,
		0xcb, 0xcc, 0xb3, 0x5c, 0xfb, 0x87, 0xf8, 0x26,
		0x3f, 0x57, 0x86, 0xe2, 0xd8, 0x0e, 0xd3, 0x26,
		0xcb, 0xc7, 0xf0, 0xe7, 0x1a, 0x99, 0xf4, 0x3b,
		0xfb, 0x98, 0x8b, 0x9b, 0x7a, 0x02, 0xdd, 0x21
	};

	AES_KEY wctx, xctx;
	int ret, nfailures = 0;
	ret = AES_wrap_unwrap_test(kek, 128, NULL, e1, key, 16);
	if (ret == 0)
		nfailures++;
	fprintf(stderr, "Key test result %d\n", ret);
	ret = AES_wrap_unwrap_test(kek, 192, NULL, e2, key, 16);
	if (ret == 0)
		nfailures++;
	fprintf(stderr, "Key test result %d\n", ret);
	ret = AES_wrap_unwrap_test(kek, 256, NULL, e3, key, 16);
	if (ret == 0)
		nfailures++;
	fprintf(stderr, "Key test result %d\n", ret);
	ret = AES_wrap_unwrap_test(kek, 192, NULL, e4, key, 24);
	if (ret == 0)
		nfailures++;
	fprintf(stderr, "Key test result %d\n", ret);
	ret = AES_wrap_unwrap_test(kek, 256, NULL, e5, key, 24);
	if (ret == 0)
		nfailures++;
	fprintf(stderr, "Key test result %d\n", ret);
	ret = AES_wrap_unwrap_test(kek, 256, NULL, e6, key, 32);
	if (ret == 0)
		nfailures++;
	fprintf(stderr, "Key test result %d\n", ret);

	return nfailures;
}

#endif
@


1.4
log
@When compiling with AES_WRAP_TEST, make main() return a meaningful value
instead of garbage, and add this to the libcrypto regress. Note these tests
are incomplete, as they always use the default IV.
@
text
@d167 2
a168 4
	if (otmp)
		free(otmp);
	if (ptmp)
		free(ptmp);
@


1.3
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d234 1
a234 1
	int ret;
d236 2
d240 2
d244 2
d248 2
d252 2
d256 2
d259 2
@


1.2
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d144 2
a145 2
	otmp = OPENSSL_malloc(keylen + 8);
	ptmp = OPENSSL_malloc(keylen);
d168 1
a168 1
		OPENSSL_free(otmp);
d170 1
a170 1
		OPENSSL_free(ptmp);
@


1.1
log
@Initial revision
@
text
@d59 1
a59 1
  0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6,
d62 4
a65 4
int AES_wrap_key(AES_KEY *key, const unsigned char *iv,
		unsigned char *out,
		const unsigned char *in, unsigned int inlen)
	{
d78 1
a78 2
	for (j = 0; j < 6; j++)
		{
d80 1
a80 2
		for (i = 0; i < inlen; i += 8, t++, R += 8)
			{
d84 5
a88 6
			if (t > 0xff)	
				{
				A[6] ^= (unsigned char)((t & 0xff) >> 8);
				A[5] ^= (unsigned char)((t & 0xff) >> 16);
				A[4] ^= (unsigned char)((t & 0xff) >> 24);
				}
a89 1
			}
d91 1
d94 1
a94 1
	}
d96 4
a99 4
int AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
		unsigned char *out,
		const unsigned char *in, unsigned int inlen)
	{
d108 1
a108 1
	t =  6 * (inlen >> 3);
d111 1
a111 2
	for (j = 0; j < 6; j++)
		{
d113 1
a113 2
		for (i = 0; i < inlen; i += 8, t--, R -= 8)
			{
d115 5
a119 6
			if (t > 0xff)	
				{
				A[6] ^= (unsigned char)((t & 0xff) >> 8);
				A[5] ^= (unsigned char)((t & 0xff) >> 16);
				A[4] ^= (unsigned char)((t & 0xff) >> 24);
				}
a122 1
			}
d124 1
d127 1
a127 2
	if (memcmp(A, iv, 8))
		{
d130 1
a130 1
		}
d132 1
a132 1
	}
d136 5
a140 5
int AES_wrap_unwrap_test(const unsigned char *kek, int keybits,
			 const unsigned char *iv,
			 const unsigned char *eout,
			 const unsigned char *key, int keylen)
	{
d156 1
a156 1
		
d166 1
a166 1
	err:
d173 1
a173 2

	}
d176 2
a177 2

int main(int argc, char **argv)
d179 53
a231 54

static const unsigned char kek[] = {
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
};

static const unsigned char key[] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
  0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
};

static const unsigned char e1[] = {
  0x1f, 0xa6, 0x8b, 0x0a, 0x81, 0x12, 0xb4, 0x47,
  0xae, 0xf3, 0x4b, 0xd8, 0xfb, 0x5a, 0x7b, 0x82,
  0x9d, 0x3e, 0x86, 0x23, 0x71, 0xd2, 0xcf, 0xe5
};

static const unsigned char e2[] = {
  0x96, 0x77, 0x8b, 0x25, 0xae, 0x6c, 0xa4, 0x35,
  0xf9, 0x2b, 0x5b, 0x97, 0xc0, 0x50, 0xae, 0xd2,
  0x46, 0x8a, 0xb8, 0xa1, 0x7a, 0xd8, 0x4e, 0x5d
};

static const unsigned char e3[] = {
  0x64, 0xe8, 0xc3, 0xf9, 0xce, 0x0f, 0x5b, 0xa2,
  0x63, 0xe9, 0x77, 0x79, 0x05, 0x81, 0x8a, 0x2a,
  0x93, 0xc8, 0x19, 0x1e, 0x7d, 0x6e, 0x8a, 0xe7
};

static const unsigned char e4[] = {
  0x03, 0x1d, 0x33, 0x26, 0x4e, 0x15, 0xd3, 0x32,
  0x68, 0xf2, 0x4e, 0xc2, 0x60, 0x74, 0x3e, 0xdc,
  0xe1, 0xc6, 0xc7, 0xdd, 0xee, 0x72, 0x5a, 0x93,
  0x6b, 0xa8, 0x14, 0x91, 0x5c, 0x67, 0x62, 0xd2
};

static const unsigned char e5[] = {
  0xa8, 0xf9, 0xbc, 0x16, 0x12, 0xc6, 0x8b, 0x3f,
  0xf6, 0xe6, 0xf4, 0xfb, 0xe3, 0x0e, 0x71, 0xe4,
  0x76, 0x9c, 0x8b, 0x80, 0xa3, 0x2c, 0xb8, 0x95,
  0x8c, 0xd5, 0xd1, 0x7d, 0x6b, 0x25, 0x4d, 0xa1
};

static const unsigned char e6[] = {
  0x28, 0xc9, 0xf4, 0x04, 0xc4, 0xb8, 0x10, 0xf4,
  0xcb, 0xcc, 0xb3, 0x5c, 0xfb, 0x87, 0xf8, 0x26,
  0x3f, 0x57, 0x86, 0xe2, 0xd8, 0x0e, 0xd3, 0x26,
  0xcb, 0xc7, 0xf0, 0xe7, 0x1a, 0x99, 0xf4, 0x3b,
  0xfb, 0x98, 0x8b, 0x9b, 0x7a, 0x02, 0xdd, 0x21
};
d248 1
a248 2
	
	
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import OpenSSL 1.0.0e
@
text
@d88 3
a90 3
				A[6] ^= (unsigned char)((t >> 8) & 0xff);
				A[5] ^= (unsigned char)((t >> 16) & 0xff);
				A[4] ^= (unsigned char)((t >> 24) & 0xff);
d122 3
a124 3
				A[6] ^= (unsigned char)((t >> 8) & 0xff);
				A[5] ^= (unsigned char)((t >> 16) & 0xff);
				A[4] ^= (unsigned char)((t >> 24) & 0xff);
@

