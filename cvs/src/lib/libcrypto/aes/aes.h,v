head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2014.07.09.09.10.07;	author miod;	state Exp;
branches;
next	1.13;
commitid	gOPGEz6FKs8tMUHs;

1.13
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.06.11.01.53.02;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	4evB2EbwDYaBfe0g;

1.11
date	2014.05.12.19.19.55;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.22.22.21.32;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.15.14.38.10;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.23;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.11.22.15.18;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.44;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.34.28;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.11.21.11.37;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.01;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.50;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.02;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.33;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Kill more FIPS tentacles by removing the private_AES_set_{enc,dec}rypt_key()
internal interfaces, and promoting them to being the public
AES_set_{enc,dec}rypt_key() interfaces. In non-FIPS mode, these public
interfaces were directly calling the private ones.

ok guenther@@ jsing@@
@
text
@/* $OpenBSD: aes.h,v 1.13 2014/06/12 15:49:27 deraadt Exp $ */
/* ====================================================================
 * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 */

#ifndef HEADER_AES_H
#define HEADER_AES_H

#include <openssl/opensslconf.h>

#ifdef OPENSSL_NO_AES
#error AES is disabled.
#endif

#include <stddef.h>

#define AES_ENCRYPT	1
#define AES_DECRYPT	0

/* Because array size can't be a const in C, the following two are macros.
   Both sizes are in bytes. */
#define AES_MAXNR 14
#define AES_BLOCK_SIZE 16

#ifdef  __cplusplus
extern "C" {
#endif

/* This should be a hidden type, but EVP requires that the size be known */
struct aes_key_st {
	unsigned int rd_key[4 *(AES_MAXNR + 1)];
	int rounds;
};
typedef struct aes_key_st AES_KEY;

const char *AES_options(void);

int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
    AES_KEY *key);
int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
    AES_KEY *key);

void AES_encrypt(const unsigned char *in, unsigned char *out,
    const AES_KEY *key);
void AES_decrypt(const unsigned char *in, unsigned char *out,
    const AES_KEY *key);

void AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
    const AES_KEY *key, const int enc);
void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
    size_t length, const AES_KEY *key, unsigned char *ivec, const int enc);
void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
    size_t length, const AES_KEY *key, unsigned char *ivec, int *num,
    const int enc);
void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
    size_t length, const AES_KEY *key, unsigned char *ivec, int *num,
    const int enc);
void AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
    size_t length, const AES_KEY *key, unsigned char *ivec, int *num,
    const int enc);
void AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
    size_t length, const AES_KEY *key, unsigned char *ivec, int *num);
void AES_ctr128_encrypt(const unsigned char *in, unsigned char *out,
    size_t length, const AES_KEY *key, unsigned char ivec[AES_BLOCK_SIZE],
    unsigned char ecount_buf[AES_BLOCK_SIZE], unsigned int *num);
/* NB: the IV is _two_ blocks long */
void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
    size_t length, const AES_KEY *key, unsigned char *ivec, const int enc);

int AES_wrap_key(AES_KEY *key, const unsigned char *iv, unsigned char *out,
    const unsigned char *in, unsigned int inlen);
int AES_unwrap_key(AES_KEY *key, const unsigned char *iv, unsigned char *out,
    const unsigned char *in, unsigned int inlen);


#ifdef  __cplusplus
}
#endif

#endif /* !HEADER_AES_H */
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a86 5
    AES_KEY *key);

int private_AES_set_encrypt_key(const unsigned char *userKey, const int bits,
    AES_KEY *key);
int private_AES_set_decrypt_key(const unsigned char *userKey, const int bits,
@


1.12
log
@c-file-style hints, begone; ok beck
@
text
@d1 1
a1 1
/* crypto/aes/aes.h */
@


1.11
log
@Remove AES_bi_ige_encrypt() from libcrypto. This routine is supposed to use
two keys and four IVs to do much magic, is specified as such with test vectors,
but the implementation actually always uses the first key, and the test vectors
were computed with it, so they are wrong.

Fixing the code to match the intended specification would break
interoperability with existing code (assuming such code would exist), so it is
better to remove this interface, which is obviously too complex for mere
mortals if even its author can not implement it correctly.

Riding on the libcrypto major bump.
@
text
@d1 1
a1 1
/* crypto/aes/aes.h -*- mode:C; c-file-style: "eay" -*- */
@


1.10
log
@unifdef -UAES_LONG for we do not intend to run on platforms where int is smaller
than 32 bits.
@
text
@a119 4
/* NB: the IV is _four_ blocks long */
void AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
    size_t length, const AES_KEY *key, const AES_KEY *key2,
    const unsigned char *ivec, const int enc);
@


1.9
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a76 3
#ifdef AES_LONG
	unsigned long rd_key[4 *(AES_MAXNR + 1)];
#else
a77 1
#endif
@


1.8
log
@resolve conflicts
@
text
@d78 1
a78 1
    unsigned long rd_key[4 *(AES_MAXNR + 1)];
d80 1
a80 1
    unsigned int rd_key[4 *(AES_MAXNR + 1)];
d82 1
a82 1
    int rounds;
d89 1
a89 1
	AES_KEY *key);
d91 1
a91 1
	AES_KEY *key);
d94 1
a94 1
	AES_KEY *key);
d96 1
a96 1
	AES_KEY *key);
d99 1
a99 1
	const AES_KEY *key);
d101 1
a101 1
	const AES_KEY *key);
d104 1
a104 1
	const AES_KEY *key, const int enc);
d106 1
a106 2
	size_t length, const AES_KEY *key,
	unsigned char *ivec, const int enc);
d108 2
a109 2
	size_t length, const AES_KEY *key,
	unsigned char *ivec, int *num, const int enc);
d111 2
a112 2
	size_t length, const AES_KEY *key,
	unsigned char *ivec, int *num, const int enc);
d114 2
a115 2
	size_t length, const AES_KEY *key,
	unsigned char *ivec, int *num, const int enc);
d117 1
a117 2
	size_t length, const AES_KEY *key,
	unsigned char *ivec, int *num);
d119 2
a120 4
	size_t length, const AES_KEY *key,
	unsigned char ivec[AES_BLOCK_SIZE],
	unsigned char ecount_buf[AES_BLOCK_SIZE],
	unsigned int *num);
d123 1
a123 2
		     size_t length, const AES_KEY *key,
		     unsigned char *ivec, const int enc);
d126 7
a132 10
			size_t length, const AES_KEY *key,
			const AES_KEY *key2, const unsigned char *ivec,
			const int enc);

int AES_wrap_key(AES_KEY *key, const unsigned char *iv,
		unsigned char *out,
		const unsigned char *in, unsigned int inlen);
int AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
		unsigned char *out,
		const unsigned char *in, unsigned int inlen);
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d93 5
@


1.6
log
@resolve conflicts
@
text
@d61 2
a70 4
#ifdef OPENSSL_FIPS
#define FIPS_AES_SIZE_T	int
#endif

d101 1
a101 1
	const unsigned long length, const AES_KEY *key,
d104 1
a104 1
	const unsigned long length, const AES_KEY *key,
d107 1
a107 1
	const unsigned long length, const AES_KEY *key,
d110 1
a110 1
	const unsigned long length, const AES_KEY *key,
a111 3
void AES_cfbr_encrypt_block(const unsigned char *in,unsigned char *out,
			    const int nbits,const AES_KEY *key,
			    unsigned char *ivec,const int enc);
d113 1
a113 1
	const unsigned long length, const AES_KEY *key,
d116 1
a116 1
	const unsigned long length, const AES_KEY *key,
a119 2

/* For IGE, see also http://www.links.org/files/openssl-ige.pdf */
d122 1
a122 1
		     const unsigned long length, const AES_KEY *key,
d126 1
a126 1
			const unsigned long length, const AES_KEY *key,
d136 1
@


1.5
log
@resolve conflicts
@
text
@d69 4
@


1.4
log
@resolve conflicts
@
text
@d55 1
a55 1
#include <openssl/e_os2.h>
a68 4
#if defined(OPENSSL_FIPS)
#define FIPS_AES_SIZE_T	int
#endif

d75 1
d77 3
d122 17
@


1.3
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d55 2
d69 4
d104 9
@


1.2
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d103 1
a103 1
	unsigned char counter[AES_BLOCK_SIZE],
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d59 3
a61 2
static const int AES_DECRYPT = 0;
static const int AES_ENCRYPT = 1;
d103 3
a105 1
	unsigned char *counter, unsigned int *num);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d59 2
a60 3
#define AES_ENCRYPT	1
#define AES_DECRYPT	0

d102 1
a102 3
	unsigned char counter[AES_BLOCK_SIZE],
	unsigned char ecount_buf[AES_BLOCK_SIZE],
	unsigned int *num);
@


1.1.1.3
log
@import 0.9.7c
@
text
@d103 1
a103 1
	unsigned char ivec[AES_BLOCK_SIZE],
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a54 2
#include <openssl/e_os2.h>

a66 4
#if defined(OPENSSL_FIPS)
#define FIPS_AES_SIZE_T	int
#endif

a97 9
void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
	const unsigned long length, const AES_KEY *key,
	unsigned char *ivec, int *num, const int enc);
void AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
	const unsigned long length, const AES_KEY *key,
	unsigned char *ivec, int *num, const int enc);
void AES_cfbr_encrypt_block(const unsigned char *in,unsigned char *out,
			    const int nbits,const AES_KEY *key,
			    unsigned char *ivec,const int enc);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d55 1
a55 1
#include <openssl/opensslconf.h>
d69 4
a78 1
#ifdef AES_LONG
a79 3
#else
    unsigned int rd_key[4 *(AES_MAXNR + 1)];
#endif
a121 17
/* For IGE, see also http://www.links.org/files/openssl-ige.pdf */
/* NB: the IV is _two_ blocks long */
void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
		     const unsigned long length, const AES_KEY *key,
		     unsigned char *ivec, const int enc);
/* NB: the IV is _four_ blocks long */
void AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
			const unsigned long length, const AES_KEY *key,
			const AES_KEY *key2, const unsigned char *ivec,
			const int enc);

int AES_wrap_key(AES_KEY *key, const unsigned char *iv,
		unsigned char *out,
		const unsigned char *in, unsigned int inlen);
int AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
		unsigned char *out,
		const unsigned char *in, unsigned int inlen);
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a68 4
#ifdef OPENSSL_FIPS
#define FIPS_AES_SIZE_T	int
#endif

@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@a60 2
#include <stddef.h>

d69 4
d103 1
a103 1
	size_t length, const AES_KEY *key,
d106 1
a106 1
	size_t length, const AES_KEY *key,
d109 1
a109 1
	size_t length, const AES_KEY *key,
d112 1
a112 1
	size_t length, const AES_KEY *key,
d114 3
d118 1
a118 1
	size_t length, const AES_KEY *key,
d121 1
a121 1
	size_t length, const AES_KEY *key,
d125 2
d129 1
a129 1
		     size_t length, const AES_KEY *key,
d133 1
a133 1
			size_t length, const AES_KEY *key,
a142 1

@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a92 5
int private_AES_set_encrypt_key(const unsigned char *userKey, const int bits,
	AES_KEY *key);
int private_AES_set_decrypt_key(const unsigned char *userKey, const int bits,
	AES_KEY *key);

@


