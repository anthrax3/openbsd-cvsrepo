head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.68
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.66
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.64
	OPENBSD_5_6_BASE:1.2
	butholakala:1.2
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.2.0.62
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.58
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.56
	OPENBSD_5_3_BASE:1.2
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.2.0.52
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.54
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.2.0.50
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.48
	OPENBSD_4_9_BASE:1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.2.0.46
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.42
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.44
	OPENBSD_4_6_BASE:1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.2.0.40
	OPENBSD_4_5_BASE:1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.38
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.36
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.34
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.32
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.30
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.28
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.26
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.2.0.24
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.22
	OPENBSD_3_6_BASE:1.2
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.2.0.20
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.2.0.18
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.2.0.16
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.14
	OPENBSD_3_2_BASE:1.2
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.12
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.10
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.09.12.09.01.45;	author miod;	state dead;
branches;
next	1.2;
commitid	2UdIQroN1afnyyMG;

1.2
date	99.09.29.04.35.38;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.54;	author markus;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove horribly old and outdated `documentation' for the assembly code.
@
text
@#!/usr/local/bin/perl

push(@@INC,"perlasm","../../perlasm");
require "x86asm.pl";
require "cbc.pl";

&asm_init($ARGV[0],"bf-686.pl");

$BF_ROUNDS=16;
$BF_OFF=($BF_ROUNDS+2)*4;
$L="ecx";
$R="edx";
$P="edi";
$tot="esi";
$tmp1="eax";
$tmp2="ebx";
$tmp3="ebp";

&des_encrypt("BF_encrypt",1);
&des_encrypt("BF_decrypt",0);
&cbc("BF_cbc_encrypt","BF_encrypt","BF_decrypt",1,4,5,3,-1,-1);

&asm_finish();

&file_end();

sub des_encrypt
	{
	local($name,$enc)=@@_;

	&function_begin($name,"");

	&comment("");
	&comment("Load the 2 words");
	&mov("eax",&wparam(0));
	&mov($L,&DWP(0,"eax","",0));
	&mov($R,&DWP(4,"eax","",0));

	&comment("");
	&comment("P pointer, s and enc flag");
	&mov($P,&wparam(1));

	&xor(	$tmp1,	$tmp1);
	&xor(	$tmp2,	$tmp2);

	# encrypting part

	if ($enc)
		{
		&xor($L,&DWP(0,$P,"",0));
		for ($i=0; $i<$BF_ROUNDS; $i+=2)
			{
			&comment("");
			&comment("Round $i");
			&BF_ENCRYPT($i+1,$R,$L,$P,$tot,$tmp1,$tmp2,$tmp3);

			&comment("");
			&comment("Round ".sprintf("%d",$i+1));
			&BF_ENCRYPT($i+2,$L,$R,$P,$tot,$tmp1,$tmp2,$tmp3);
			}
		&xor($R,&DWP(($BF_ROUNDS+1)*4,$P,"",0));

		&mov("eax",&wparam(0));
		&mov(&DWP(0,"eax","",0),$R);
		&mov(&DWP(4,"eax","",0),$L);
		&function_end_A($name);
		}
	else
		{
		&xor($L,&DWP(($BF_ROUNDS+1)*4,$P,"",0));
		for ($i=$BF_ROUNDS; $i>0; $i-=2)
			{
			&comment("");
			&comment("Round $i");
			&BF_ENCRYPT($i,$R,$L,$P,$tot,$tmp1,$tmp2,$tmp3);
			&comment("");
			&comment("Round ".sprintf("%d",$i-1));
			&BF_ENCRYPT($i-1,$L,$R,$P,$tot,$tmp1,$tmp2,$tmp3);
			}
		&xor($R,&DWP(0,$P,"",0));

		&mov("eax",&wparam(0));
		&mov(&DWP(0,"eax","",0),$R);
		&mov(&DWP(4,"eax","",0),$L);
		&function_end_A($name);
		}

	&function_end_B($name);
	}

sub BF_ENCRYPT
	{
	local($i,$L,$R,$P,$tot,$tmp1,$tmp2,$tmp3)=@@_;

	&rotr(	$R,		16);
	&mov(	$tot,		&DWP(&n2a($i*4),$P,"",0));

	&movb(	&LB($tmp1),	&HB($R));
	&movb(	&LB($tmp2),	&LB($R));

	&rotr(	$R,		16);
	&xor(	$L,		$tot);

	&mov(	$tot,		&DWP(&n2a($BF_OFF+0x0000),$P,$tmp1,4));
	&mov(	$tmp3,		&DWP(&n2a($BF_OFF+0x0400),$P,$tmp2,4));

	&movb(	&LB($tmp1),	&HB($R));
	&movb(	&LB($tmp2),	&LB($R));

	&add(	$tot,		$tmp3);
	&mov(	$tmp1,		&DWP(&n2a($BF_OFF+0x0800),$P,$tmp1,4)); # delay

	&xor(	$tot,		$tmp1);
	&mov(	$tmp3,		&DWP(&n2a($BF_OFF+0x0C00),$P,$tmp2,4));

	&add(	$tot,		$tmp3);
	&xor(	$tmp1,		$tmp1);

	&xor(	$L,		$tot);					
	# delay
	}

sub n2a
	{
	sprintf("%d",$_[0]);
	}

@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@@


1.1
log
@Initial revision
@
text
@a0 1
#!/usr/bin/perl
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d1 1
@

