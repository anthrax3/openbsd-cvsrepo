head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.14;
commitid	kT0fLt3r4lroFJra;

1.14
date	2016.08.05.17.25.51;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	MbMbApB688F1wTPP;

1.13
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.12;
commitid	gtwLkRyWx0K1HbzX;

1.12
date	2014.07.09.11.10.50;	author bcook;	state Exp;
branches;
next	1.11;
commitid	lHJTcoC4c5BhEOGj;

1.11
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.20.09.04.56;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.22.09.37;	author giovanni;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.10.16.31.54;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.22.00.03.01;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.28;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.09;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.37.32;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: conf_lib.c,v 1.14 2016/08/05 17:25:51 deraadt Exp $ */
/* Written by Richard Levitte (richard@@levitte.org) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/conf.h>
#include <openssl/conf_api.h>
#include <openssl/lhash.h>

static CONF_METHOD *default_CONF_method = NULL;

/* Init a 'CONF' structure from an old LHASH */

void
CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash)
{
	if (default_CONF_method == NULL)
		default_CONF_method = NCONF_default();
	default_CONF_method->init(conf);
	conf->data = hash;
}

/* The following section contains the "CONF classic" functions,
   rewritten in terms of the new CONF interface. */

int
CONF_set_default_method(CONF_METHOD *meth)
{
	default_CONF_method = meth;
	return 1;
}

LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
    long *eline)
{
	LHASH_OF(CONF_VALUE) *ltmp;
	BIO *in = NULL;

	in = BIO_new_file(file, "rb");
	if (in == NULL) {
		CONFerror(ERR_R_SYS_LIB);
		return NULL;
	}

	ltmp = CONF_load_bio(conf, in, eline);
	BIO_free(in);

	return ltmp;
}

LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
    long *eline)
{
	BIO *btmp;
	LHASH_OF(CONF_VALUE) *ltmp;

	if (!(btmp = BIO_new_fp(fp, BIO_NOCLOSE))) {
		CONFerror(ERR_R_BUF_LIB);
		return NULL;
	}
	ltmp = CONF_load_bio(conf, btmp, eline);
	BIO_free(btmp);
	return ltmp;
}

LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
    long *eline)
{
	CONF ctmp;
	int ret;

	CONF_set_nconf(&ctmp, conf);

	ret = NCONF_load_bio(&ctmp, bp, eline);
	if (ret)
		return ctmp.data;
	return NULL;
}

STACK_OF(CONF_VALUE) *CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
    const char *section)
{
	if (conf == NULL) {
		return NULL;
	} else {
		CONF ctmp;
		CONF_set_nconf(&ctmp, conf);
		return NCONF_get_section(&ctmp, section);
	}
}

char *
CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
    const char *name)
{
	if (conf == NULL) {
		return NCONF_get_string(NULL, group, name);
	} else {
		CONF ctmp;
		CONF_set_nconf(&ctmp, conf);
		return NCONF_get_string(&ctmp, group, name);
	}
}

long
CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
    const char *name)
{
	int status;
	long result = 0;

	if (conf == NULL) {
		status = NCONF_get_number_e(NULL, group, name, &result);
	} else {
		CONF ctmp;
		CONF_set_nconf(&ctmp, conf);
		status = NCONF_get_number_e(&ctmp, group, name, &result);
	}

	if (status == 0) {
		/* This function does not believe in errors... */
		ERR_clear_error();
	}
	return result;
}

void
CONF_free(LHASH_OF(CONF_VALUE) *conf)
{
	CONF ctmp;

	CONF_set_nconf(&ctmp, conf);
	NCONF_free_data(&ctmp);
}

int
CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out)
{
	BIO *btmp;
	int ret;

	if (!(btmp = BIO_new_fp(out, BIO_NOCLOSE))) {
		CONFerror(ERR_R_BUF_LIB);
		return 0;
	}
	ret = CONF_dump_bio(conf, btmp);
	BIO_free(btmp);
	return ret;
}

int
CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out)
{
	CONF ctmp;

	CONF_set_nconf(&ctmp, conf);
	return NCONF_dump_bio(&ctmp, out);
}

/* The following section contains the "New CONF" functions.  They are
   completely centralised around a new CONF structure that may contain
   basically anything, but at least a method pointer and a table of data.
   These functions are also written in terms of the bridge functions used
   by the "CONF classic" functions, for consistency.  */

CONF *
NCONF_new(CONF_METHOD *meth)
{
	CONF *ret;

	if (meth == NULL)
		meth = NCONF_default();

	ret = meth->create(meth);
	if (ret == NULL) {
		CONFerror(ERR_R_MALLOC_FAILURE);
		return (NULL);
	}

	return ret;
}

void
NCONF_free(CONF *conf)
{
	if (conf == NULL)
		return;
	conf->meth->destroy(conf);
}

void
NCONF_free_data(CONF *conf)
{
	if (conf == NULL)
		return;
	conf->meth->destroy_data(conf);
}

int
NCONF_load(CONF *conf, const char *file, long *eline)
{
	if (conf == NULL) {
		CONFerror(CONF_R_NO_CONF);
		return 0;
	}

	return conf->meth->load(conf, file, eline);
}

int
NCONF_load_fp(CONF *conf, FILE *fp, long *eline)
{
	BIO *btmp;
	int ret;

	if (!(btmp = BIO_new_fp(fp, BIO_NOCLOSE))) {
		CONFerror(ERR_R_BUF_LIB);
		return 0;
	}
	ret = NCONF_load_bio(conf, btmp, eline);
	BIO_free(btmp);
	return ret;
}

int
NCONF_load_bio(CONF *conf, BIO *bp, long *eline)
{
	if (conf == NULL) {
		CONFerror(CONF_R_NO_CONF);
		return 0;
	}

	return conf->meth->load_bio(conf, bp, eline);
}

STACK_OF(CONF_VALUE) *
NCONF_get_section(const CONF *conf, const char *section)
{
	if (conf == NULL) {
		CONFerror(CONF_R_NO_CONF);
		return NULL;
	}

	if (section == NULL) {
		CONFerror(CONF_R_NO_SECTION);
		return NULL;
	}

	return _CONF_get_section_values(conf, section);
}

char *
NCONF_get_string(const CONF *conf, const char *group, const char *name)
{
	char *s = _CONF_get_string(conf, group, name);

        /* Since we may get a value from an environment variable even
           if conf is NULL, let's check the value first */
	if (s)
		return s;

	if (conf == NULL) {
		CONFerror(CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE);
		return NULL;
	}
	CONFerror(CONF_R_NO_VALUE);
	ERR_asprintf_error_data("group=%s name=%s",
	    group ? group : "", name);
	return NULL;
}

int
NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
    long *result)
{
	char *str;

	if (result == NULL) {
		CONFerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}

	str = NCONF_get_string(conf, group, name);

	if (str == NULL)
		return 0;

	for (*result = 0; conf->meth->is_number(conf, *str); ) {
		*result = (*result) * 10 + conf->meth->to_int(conf, *str);
		str++;
	}

	return 1;
}

int
NCONF_dump_fp(const CONF *conf, FILE *out)
{
	BIO *btmp;
	int ret;
	if (!(btmp = BIO_new_fp(out, BIO_NOCLOSE))) {
		CONFerror(ERR_R_BUF_LIB);
		return 0;
	}
	ret = NCONF_dump_bio(conf, btmp);
	BIO_free(btmp);
	return ret;
}

int
NCONF_dump_bio(const CONF *conf, BIO *out)
{
	if (conf == NULL) {
		CONFerror(CONF_R_NO_CONF);
		return 0;
	}

	return conf->meth->dump(conf, out);
}
@


1.14
log
@Do not *printf %s NULL
ok bcook
@
text
@d1 1
a1 1
/* $OpenBSD: conf_lib.c,v 1.13 2015/02/07 13:19:15 doug Exp $ */
d97 1
a97 1
		CONFerr(CONF_F_CONF_LOAD, ERR_R_SYS_LIB);
d114 1
a114 1
		CONFerr(CONF_F_CONF_LOAD_FP, ERR_R_BUF_LIB);
d199 1
a199 1
		CONFerr(CONF_F_CONF_DUMP_FP, ERR_R_BUF_LIB);
d232 1
a232 1
		CONFerr(CONF_F_NCONF_NEW, ERR_R_MALLOC_FAILURE);
d259 1
a259 1
		CONFerr(CONF_F_NCONF_LOAD, CONF_R_NO_CONF);
d273 1
a273 1
		CONFerr(CONF_F_NCONF_LOAD_FP, ERR_R_BUF_LIB);
d285 1
a285 1
		CONFerr(CONF_F_NCONF_LOAD_BIO, CONF_R_NO_CONF);
d296 1
a296 1
		CONFerr(CONF_F_NCONF_GET_SECTION, CONF_R_NO_CONF);
d301 1
a301 1
		CONFerr(CONF_F_NCONF_GET_SECTION, CONF_R_NO_SECTION);
d319 1
a319 2
		CONFerr(CONF_F_NCONF_GET_STRING,
		    CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE);
d322 1
a322 1
	CONFerr(CONF_F_NCONF_GET_STRING, CONF_R_NO_VALUE);
d335 1
a335 1
		CONFerr(CONF_F_NCONF_GET_NUMBER_E, ERR_R_PASSED_NULL_PARAMETER);
d358 1
a358 1
		CONFerr(CONF_F_NCONF_DUMP_FP, ERR_R_BUF_LIB);
d370 1
a370 1
		CONFerr(CONF_F_NCONF_DUMP_BIO, CONF_R_NO_CONF);
@


1.13
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: conf_lib.c,v 1.12 2014/07/09 11:10:50 bcook Exp $ */
d324 2
a325 1
	ERR_asprintf_error_data("group=%s name=%s", group, name);
@


1.12
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: conf_lib.c,v 1.11 2014/06/12 15:49:28 deraadt Exp $ */
a375 18


/* This function should be avoided */
#if 0
long
NCONF_get_number(CONF *conf, char *group, char *name)
{
	int status;
	long ret = 0;

	status = NCONF_get_number_e(conf, group, name, &ret);
	if (status == 0) {
		/* This function does not believe in errors... */
		ERR_get_error();
	}
	return ret;
}
#endif
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a64 2

const char CONF_version[]="CONF" OPENSSL_VERSION_PTEXT;
@


1.10
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d1 1
a1 1
/* conf_lib.c */
@


1.9
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@a108 1
#ifndef OPENSSL_NO_FP_API
a122 1
#endif
a193 1
#ifndef OPENSSL_NO_FP_API
a207 1
#endif
a267 1
#ifndef OPENSSL_NO_FP_API
a281 1
#endif
a353 1
#ifndef OPENSSL_NO_FP_API
a366 1
#endif
@


1.8
log
@KNF.
@
text
@d332 1
a332 1
	ERR_add_error_data(4, "group=", group, " name=", name);
@


1.7
log
@
more spring VMS cleanup
ok miod@@ lteo@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d68 1
a68 1
static CONF_METHOD *default_CONF_method=NULL;
d72 3
a74 2
void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash)
	{
a76 1

d79 1
a79 1
	}
d84 3
a86 2
int CONF_set_default_method(CONF_METHOD *meth)
	{
d89 1
a89 1
	}
d92 2
a93 2
				long *eline)
	{
d95 1
a95 1
	BIO *in=NULL;
d97 3
a99 4
	in=BIO_new_file(file, "rb");
	if (in == NULL)
		{
		CONFerr(CONF_F_CONF_LOAD,ERR_R_SYS_LIB);
d101 1
a101 1
		}
d107 1
a107 1
	}
d111 2
a112 2
				   long *eline)
	{
d115 3
a117 2
	if(!(btmp = BIO_new_fp(fp, BIO_NOCLOSE))) {
		CONFerr(CONF_F_CONF_LOAD_FP,ERR_R_BUF_LIB);
d123 1
a123 1
	}
d127 2
a128 2
				    long *eline)
	{
d138 1
a138 1
	}
d141 3
a143 4
				       const char *section)
	{
	if (conf == NULL)
		{
d145 1
a145 3
		}
	else
		{
a148 1
		}
d150 1
d152 5
a156 5
char *CONF_get_string(LHASH_OF(CONF_VALUE) *conf,const char *group,
		      const char *name)
	{
	if (conf == NULL)
		{
d158 1
a158 3
		}
	else
		{
a161 1
		}
d163 1
d165 4
a168 3
long CONF_get_number(LHASH_OF(CONF_VALUE) *conf,const char *group,
		     const char *name)
	{
d172 1
a172 2
	if (conf == NULL)
		{
d174 1
a174 3
		}
	else
		{
d178 1
a178 1
		}
d180 1
a180 2
	if (status == 0)
		{
d183 1
a183 1
		}
d185 1
a185 1
	}
d187 3
a189 2
void CONF_free(LHASH_OF(CONF_VALUE) *conf)
	{
d191 1
d194 1
a194 1
	}
d197 3
a199 2
int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out)
	{
d203 2
a204 2
	if(!(btmp = BIO_new_fp(out, BIO_NOCLOSE))) {
		CONFerr(CONF_F_CONF_DUMP_FP,ERR_R_BUF_LIB);
d210 1
a210 1
	}
d213 3
a215 2
int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out)
	{
d217 1
d220 1
a220 1
	}
d228 3
a230 2
CONF *NCONF_new(CONF_METHOD *meth)
	{
d237 4
a240 5
	if (ret == NULL)
		{
		CONFerr(CONF_F_NCONF_NEW,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
d243 1
a243 1
	}
d245 3
a247 2
void NCONF_free(CONF *conf)
	{
d251 1
a251 1
	}
d253 3
a255 2
void NCONF_free_data(CONF *conf)
	{
d259 1
a259 1
	}
d261 5
a265 5
int NCONF_load(CONF *conf, const char *file, long *eline)
	{
	if (conf == NULL)
		{
		CONFerr(CONF_F_NCONF_LOAD,CONF_R_NO_CONF);
d267 1
a267 1
		}
d270 1
a270 1
	}
d273 3
a275 2
int NCONF_load_fp(CONF *conf, FILE *fp,long *eline)
	{
d278 3
a280 3
	if(!(btmp = BIO_new_fp(fp, BIO_NOCLOSE)))
		{
		CONFerr(CONF_F_NCONF_LOAD_FP,ERR_R_BUF_LIB);
d282 1
a282 1
		}
d286 1
a286 1
	}
d289 5
a293 5
int NCONF_load_bio(CONF *conf, BIO *bp,long *eline)
	{
	if (conf == NULL)
		{
		CONFerr(CONF_F_NCONF_LOAD_BIO,CONF_R_NO_CONF);
d295 1
a295 1
		}
d298 1
a298 1
	}
d300 5
a304 5
STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf,const char *section)
	{
	if (conf == NULL)
		{
		CONFerr(CONF_F_NCONF_GET_SECTION,CONF_R_NO_CONF);
d306 1
a306 1
		}
d308 2
a309 3
	if (section == NULL)
		{
		CONFerr(CONF_F_NCONF_GET_SECTION,CONF_R_NO_SECTION);
d311 1
a311 1
		}
d314 1
a314 1
	}
d316 3
a318 2
char *NCONF_get_string(const CONF *conf,const char *group,const char *name)
	{
d323 2
a324 1
        if (s) return s;
d326 1
a326 2
	if (conf == NULL)
		{
d328 1
a328 1
                        CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE);
d330 3
a332 4
		}
	CONFerr(CONF_F_NCONF_GET_STRING,
		CONF_R_NO_VALUE);
	ERR_add_error_data(4,"group=",group," name=",name);
d334 1
a334 1
	}
d336 4
a339 3
int NCONF_get_number_e(const CONF *conf,const char *group,const char *name,
		       long *result)
	{
d342 2
a343 3
	if (result == NULL)
		{
		CONFerr(CONF_F_NCONF_GET_NUMBER_E,ERR_R_PASSED_NULL_PARAMETER);
d345 1
a345 1
		}
d347 1
a347 1
	str = NCONF_get_string(conf,group,name);
d352 2
a353 3
	for (*result = 0;conf->meth->is_number(conf, *str);)
		{
		*result = (*result)*10 + conf->meth->to_int(conf, *str);
d355 1
a355 1
		}
d358 1
a358 1
	}
d361 3
a363 2
int NCONF_dump_fp(const CONF *conf, FILE *out)
	{
d366 2
a367 2
	if(!(btmp = BIO_new_fp(out, BIO_NOCLOSE))) {
		CONFerr(CONF_F_NCONF_DUMP_FP,ERR_R_BUF_LIB);
d373 1
a373 1
	}
d376 5
a380 5
int NCONF_dump_bio(const CONF *conf, BIO *out)
	{
	if (conf == NULL)
		{
		CONFerr(CONF_F_NCONF_DUMP_BIO,CONF_R_NO_CONF);
d382 1
a382 1
		}
d385 1
a385 1
	}
d390 3
a392 2
long NCONF_get_number(CONF *conf,char *group,char *name)
	{
d394 1
a394 1
	long ret=0;
d397 1
a397 2
	if (status == 0)
		{
d400 1
a400 1
		}
d402 1
a402 1
	}
@


1.6
log
@resolve conflicts, fix local changes
@
text
@a95 3
#ifdef OPENSSL_SYS_VMS
	in=BIO_new_file(file, "r");
#else
a96 1
#endif
@


1.5
log
@resolve conflicts
@
text
@d72 1
a72 1
void CONF_set_nconf(CONF *conf, LHASH *hash)
d90 2
a91 1
LHASH *CONF_load(LHASH *conf, const char *file, long *eline)
d93 1
a93 1
	LHASH *ltmp;
d114 2
a115 1
LHASH *CONF_load_fp(LHASH *conf, FILE *fp,long *eline)
d118 1
a118 1
	LHASH *ltmp;
d129 2
a130 1
LHASH *CONF_load_bio(LHASH *conf, BIO *bp,long *eline)
d143 2
a144 1
STACK_OF(CONF_VALUE) *CONF_get_section(LHASH *conf,const char *section)
d158 2
a159 1
char *CONF_get_string(LHASH *conf,const char *group,const char *name)
d173 2
a174 1
long CONF_get_number(LHASH *conf,const char *group,const char *name)
d198 1
a198 1
void CONF_free(LHASH *conf)
d206 1
a206 1
int CONF_dump_fp(LHASH *conf, FILE *out)
d221 1
a221 1
int CONF_dump_bio(LHASH *conf, BIO *out)
@


1.4
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d66 1
a66 1
const char *CONF_version="CONF" OPENSSL_VERSION_PTEXT;
d187 1
a187 1
		ERR_get_error();
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d385 1
d387 1
a387 1
#undef NCONF_get_number
d401 1
a401 1

@


1.2
log
@openssl-engine-0.9.6a merge
@
text
@d70 11
d95 1
a95 1
#ifdef VMS
d112 1
a112 1
#ifndef NO_FP_API
d132 1
a132 2
	if (default_CONF_method == NULL)
		default_CONF_method = NCONF_default();
a133 2
	default_CONF_method->init(&ctmp);
	ctmp.data = conf;
d140 1
a140 1
STACK_OF(CONF_VALUE) *CONF_get_section(LHASH *conf,char *section)
d149 1
a149 6

		if (default_CONF_method == NULL)
			default_CONF_method = NCONF_default();

		default_CONF_method->init(&ctmp);
		ctmp.data = conf;
d154 1
a154 1
char *CONF_get_string(LHASH *conf,char *group,char *name)
d163 1
a163 6

		if (default_CONF_method == NULL)
			default_CONF_method = NCONF_default();

		default_CONF_method->init(&ctmp);
		ctmp.data = conf;
d168 1
a168 1
long CONF_get_number(LHASH *conf,char *group,char *name)
d170 3
d175 1
a175 1
		return NCONF_get_number(NULL, group, name);
d180 3
d184 4
a187 6
		if (default_CONF_method == NULL)
			default_CONF_method = NCONF_default();

		default_CONF_method->init(&ctmp);
		ctmp.data = conf;
		return NCONF_get_number(&ctmp, group, name);
d189 1
d195 1
a195 6

	if (default_CONF_method == NULL)
		default_CONF_method = NCONF_default();

	default_CONF_method->init(&ctmp);
	ctmp.data = conf;
d199 1
a199 1
#ifndef NO_FP_API
d218 1
a218 6

	if (default_CONF_method == NULL)
		default_CONF_method = NCONF_default();

	default_CONF_method->init(&ctmp);
	ctmp.data = conf;
d261 1
a261 9
	int ret;
	BIO *in=NULL;

#ifdef VMS
	in=BIO_new_file(file, "r");
#else
	in=BIO_new_file(file, "rb");
#endif
	if (in == NULL)
d263 1
a263 1
		CONFerr(CONF_F_CONF_LOAD,ERR_R_SYS_LIB);
d267 1
a267 4
	ret = NCONF_load_bio(conf, in, eline);
	BIO_free(in);

	return ret;
d270 1
a270 1
#ifndef NO_FP_API
d277 1
a277 1
		CONFerr(CONF_F_CONF_LOAD_FP,ERR_R_BUF_LIB);
d294 1
a294 1
	return conf->meth->load(conf, bp, eline);
d297 1
a297 1
STACK_OF(CONF_VALUE) *NCONF_get_section(CONF *conf,char *section)
d314 1
a314 1
char *NCONF_get_string(CONF *conf,char *group,char *name)
d328 3
d334 2
a335 1
long NCONF_get_number(CONF *conf,char *group,char *name)
d337 3
a339 6
#if 0 /* As with _CONF_get_string(), we rely on the possibility of finding
         an environment variable with a suitable name.  Unfortunately, there's
         no way with the current API to see if we found one or not...
         The meaning of this is that if a number is not found anywhere, it
         will always default to 0. */
	if (conf == NULL)
d341 7
a347 2
		CONFerr(CONF_F_NCONF_GET_NUMBER,
                        CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE);
d349 5
d355 2
a356 3
#endif
	
	return _CONF_get_number(conf, group, name);
d359 2
a360 2
#ifndef NO_FP_API
int NCONF_dump_fp(CONF *conf, FILE *out)
d374 1
a374 1
int NCONF_dump_bio(CONF *conf, BIO *out)
d383 16
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d134 7
a140 1
	CONF ctmp;
d142 2
a143 2
	if (default_CONF_method == NULL)
		default_CONF_method = NCONF_default();
d145 4
a148 3
	default_CONF_method->init(&ctmp);
	ctmp.data = conf;
	return NCONF_get_section(&ctmp, section);
d153 7
a159 1
	CONF ctmp;
d161 2
a162 2
	if (default_CONF_method == NULL)
		default_CONF_method = NCONF_default();
d164 4
a167 3
	default_CONF_method->init(&ctmp);
	ctmp.data = conf;
	return NCONF_get_string(&ctmp, group, name);
d172 7
a178 1
	CONF ctmp;
d180 2
a181 2
	if (default_CONF_method == NULL)
		default_CONF_method = NCONF_default();
d183 4
a186 3
	default_CONF_method->init(&ctmp);
	ctmp.data = conf;
	return NCONF_get_number(&ctmp, group, name);
d323 6
d334 6
d342 2
a343 1
		CONFerr(CONF_F_NCONF_GET_STRING,CONF_R_NO_CONF);
d346 1
a346 2

	return _CONF_get_string(conf, group, name);
d351 5
d358 2
a359 1
		CONFerr(CONF_F_NCONF_GET_NUMBER,CONF_R_NO_CONF);
d362 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a69 11
/* Init a 'CONF' structure from an old LHASH */

void CONF_set_nconf(CONF *conf, LHASH *hash)
	{
	if (default_CONF_method == NULL)
		default_CONF_method = NCONF_default();

	default_CONF_method->init(conf);
	conf->data = hash;
	}

d84 1
a84 1
#ifdef OPENSSL_SYS_VMS
d101 1
a101 1
#ifndef OPENSSL_NO_FP_API
d121 2
a122 1
	CONF_set_nconf(&ctmp, conf);
d124 2
d132 1
a132 1
STACK_OF(CONF_VALUE) *CONF_get_section(LHASH *conf,const char *section)
d134 8
a141 10
	if (conf == NULL)
		{
		return NULL;
		}
	else
		{
		CONF ctmp;
		CONF_set_nconf(&ctmp, conf);
		return NCONF_get_section(&ctmp, section);
		}
d144 1
a144 1
char *CONF_get_string(LHASH *conf,const char *group,const char *name)
d146 8
a153 10
	if (conf == NULL)
		{
		return NCONF_get_string(NULL, group, name);
		}
	else
		{
		CONF ctmp;
		CONF_set_nconf(&ctmp, conf);
		return NCONF_get_string(&ctmp, group, name);
		}
d156 1
a156 1
long CONF_get_number(LHASH *conf,const char *group,const char *name)
d158 1
a158 2
	int status;
	long result = 0;
d160 2
a161 10
	if (conf == NULL)
		{
		status = NCONF_get_number_e(NULL, group, name, &result);
		}
	else
		{
		CONF ctmp;
		CONF_set_nconf(&ctmp, conf);
		status = NCONF_get_number_e(&ctmp, group, name, &result);
		}
d163 3
a165 6
	if (status == 0)
		{
		/* This function does not believe in errors... */
		ERR_get_error();
		}
	return result;
d171 6
a176 1
	CONF_set_nconf(&ctmp, conf);
d180 1
a180 1
#ifndef OPENSSL_NO_FP_API
d199 6
a204 1
	CONF_set_nconf(&ctmp, conf);
d247 9
a255 1
	if (conf == NULL)
d257 1
a257 1
		CONFerr(CONF_F_NCONF_LOAD,CONF_R_NO_CONF);
d261 4
a264 1
	return conf->meth->load(conf, file, eline);
d267 1
a267 1
#ifndef OPENSSL_NO_FP_API
d274 1
a274 1
		CONFerr(CONF_F_NCONF_LOAD_FP,ERR_R_BUF_LIB);
d291 1
a291 1
	return conf->meth->load_bio(conf, bp, eline);
d294 1
a294 1
STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf,const char *section)
a301 6
	if (section == NULL)
		{
		CONFerr(CONF_F_NCONF_GET_SECTION,CONF_R_NO_SECTION);
		return NULL;
		}

d305 1
a305 1
char *NCONF_get_string(const CONF *conf,const char *group,const char *name)
a306 6
	char *s = _CONF_get_string(conf, group, name);

        /* Since we may get a value from an environment variable even
           if conf is NULL, let's check the value first */
        if (s) return s;

d309 1
a309 2
		CONFerr(CONF_F_NCONF_GET_STRING,
                        CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE);
d312 2
a313 4
	CONFerr(CONF_F_NCONF_GET_STRING,
		CONF_R_NO_VALUE);
	ERR_add_error_data(4,"group=",group," name=",name);
	return NULL;
d316 1
a316 2
int NCONF_get_number_e(const CONF *conf,const char *group,const char *name,
		       long *result)
d318 1
a318 3
	char *str;

	if (result == NULL)
d320 1
a320 1
		CONFerr(CONF_F_NCONF_GET_NUMBER_E,ERR_R_PASSED_NULL_PARAMETER);
d323 2
a324 13

	str = NCONF_get_string(conf,group,name);

	if (str == NULL)
		return 0;

	for (*result = 0;conf->meth->is_number(conf, *str);)
		{
		*result = (*result)*10 + conf->meth->to_int(conf, *str);
		str++;
		}

	return 1;
d327 2
a328 2
#ifndef OPENSSL_NO_FP_API
int NCONF_dump_fp(const CONF *conf, FILE *out)
d342 1
a342 1
int NCONF_dump_bio(const CONF *conf, BIO *out)
a350 16
	}

/* This function should be avoided */
#undef NCONF_get_number
long NCONF_get_number(CONF *conf,char *group,char *name)
	{
	int status;
	long ret=0;

	status = NCONF_get_number_e(conf, group, name, &ret);
	if (status == 0)
		{
		/* This function does not believe in errors... */
		ERR_get_error();
		}
	return ret;
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@a384 1

d386 1
a386 1
#if 0
d400 1
a400 1
#endif
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d66 1
a66 1
const char CONF_version[]="CONF" OPENSSL_VERSION_PTEXT;
d187 1
a187 1
		ERR_clear_error();
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d72 1
a72 1
void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash)
d90 1
a90 2
LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
				long *eline)
d92 1
a92 1
	LHASH_OF(CONF_VALUE) *ltmp;
d113 1
a113 2
LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
				   long *eline)
d116 1
a116 1
	LHASH_OF(CONF_VALUE) *ltmp;
d127 1
a127 2
LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
				    long *eline)
d140 1
a140 2
STACK_OF(CONF_VALUE) *CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
				       const char *section)
d154 1
a154 2
char *CONF_get_string(LHASH_OF(CONF_VALUE) *conf,const char *group,
		      const char *name)
d168 1
a168 2
long CONF_get_number(LHASH_OF(CONF_VALUE) *conf,const char *group,
		     const char *name)
d192 1
a192 1
void CONF_free(LHASH_OF(CONF_VALUE) *conf)
d200 1
a200 1
int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out)
d215 1
a215 1
int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out)
@


