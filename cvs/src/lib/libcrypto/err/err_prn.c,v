head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18;
locks; strict;
comment	@ * @;


1.18
date	2017.02.07.15.52.33;	author jsing;	state Exp;
branches;
next	1.17;
commitid	Yw6dp0Z2KqqnLyqh;

1.17
date	2017.02.07.03.11.11;	author beck;	state Exp;
branches;
next	1.16;
commitid	twSEBbTwmyQtWfUO;

1.16
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.15;
commitid	yQEL1wOWIearrW15;

1.15
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.14;
commitid	id8dTrTMtnTn4fqt;

1.14
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.21.14.50.59;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.20.17.01.35;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.38;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.07;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.47;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.47;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.26;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.18;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Revert previous; the implementation is incorrect since it assumes that the
provided error code matches the error that is currently on the top of the
error stack.
@
text
@/* $OpenBSD: err_prn.c,v 1.16 2014/07/11 08:44:48 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/buffer.h>
#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/lhash.h>

void
ERR_print_errors_cb(int (*cb)(const char *str, size_t len, void *u), void *u)
{
	unsigned long l;
	char buf[256];
	char buf2[4096];
	const char *file, *data;
	int line, flags;
	unsigned long es;
	CRYPTO_THREADID cur;

	CRYPTO_THREADID_current(&cur);
	es = CRYPTO_THREADID_hash(&cur);
	while ((l = ERR_get_error_line_data(&file, &line, &data,
	    &flags)) != 0) {
		ERR_error_string_n(l, buf, sizeof buf);
		(void) snprintf(buf2, sizeof(buf2), "%lu:%s:%s:%d:%s\n", es,
		    buf, file, line, (flags & ERR_TXT_STRING) ? data : "");
		if (cb(buf2, strlen(buf2), u) <= 0)
			break; /* abort outputting the error report */
	}
}

static int
print_fp(const char *str, size_t len, void *fp)
{
	BIO bio;

	BIO_set(&bio, BIO_s_file());
	BIO_set_fp(&bio, fp, BIO_NOCLOSE);

	return BIO_printf(&bio, "%s", str);
}

void
ERR_print_errors_fp(FILE *fp)
{
	ERR_print_errors_cb(print_fp, fp);
}

static int
print_bio(const char *str, size_t len, void *bp)
{
	return BIO_write((BIO *)bp, str, len);
}

void
ERR_print_errors(BIO *bp)
{
	ERR_print_errors_cb(print_bio, bp);
}
@


1.17
log
@Add file and line to the LibreSSL error strings sine we are no longer in
1989, VMS, or MS/DOS and we all run Brobdingnagian C compilers that have
can now be counted on to achieve this level of sophistication nearly
everywhere.
ok jsing@@
@
text
@d83 2
a84 2
		(void) snprintf(buf2, sizeof(buf2), "%lu:%s:%s\n", es,
		    buf, (flags & ERR_TXT_STRING) ? data : "");
@


1.16
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: err_prn.c,v 1.15 2014/07/10 13:58:22 jsing Exp $ */
d83 2
a84 2
		(void) snprintf(buf2, sizeof(buf2), "%lu:%s:%s:%d:%s\n", es,
		    buf, file, line, (flags & ERR_TXT_STRING) ? data : "");
@


1.15
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: err_prn.c,v 1.14 2014/06/12 15:49:29 deraadt Exp $ */
d62 1
a62 2
#include "cryptlib.h"
#include <openssl/lhash.h>
a63 1
#include <openssl/buffer.h>
d65 1
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.13
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d1 1
a1 1
/* crypto/err/err_prn.c */
@


1.12
log
@KNF.
@
text
@a88 1
#ifndef OPENSSL_NO_FP_API
a104 1
#endif
@


1.11
log
@Restore beck's rev 1.9: snprintf() was reviewed
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 3
a68 3
void ERR_print_errors_cb(int (*cb)(const char *str, size_t len, void *u),
			 void *u)
	{
d72 2
a73 2
	const char *file,*data;
	int line,flags;
d78 3
a80 3
	es=CRYPTO_THREADID_hash(&cur);
	while ((l=ERR_get_error_line_data(&file,&line,&data,&flags)) != 0)
		{
d82 2
a83 2
		(void) snprintf(buf2, sizeof(buf2), "%lu:%s:%s:%d:%s\n", es, buf,
			file, line, (flags & ERR_TXT_STRING) ? data : "");
a85 1
		}
d87 1
d90 3
a92 2
static int print_fp(const char *str, size_t len, void *fp)
	{
d95 2
a96 2
	BIO_set(&bio,BIO_s_file());
	BIO_set_fp(&bio,fp,BIO_NOCLOSE);
d99 5
a103 3
	}
void ERR_print_errors_fp(FILE *fp)
	{
d105 1
a105 1
	}
d108 3
a110 2
static int print_bio(const char *str, size_t len, void *bp)
	{
d112 5
a116 3
	}
void ERR_print_errors(BIO *bp)
	{
d118 1
a118 3
	}

	
@


1.10
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d82 1
a82 1
		snprintf(buf2, sizeof(buf2), "%lu:%s:%s:%d:%s\n", es, buf,
@


1.9
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d82 1
a82 1
		(void) snprintf(buf2, sizeof(buf2), "%lu:%s:%s:%d:%s\n", es, buf,
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d82 1
a82 1
		BIO_snprintf(buf2, sizeof(buf2), "%lu:%s:%s:%d:%s\n", es, buf,
@


1.7
log
@resolve conflicts
@
text
@d75 1
d77 2
a78 1
	es=CRYPTO_thread_id();
d84 2
a85 1
		cb(buf2, strlen(buf2), u);
d92 6
a97 1
	return fwrite(str, 1, len, fp);
d105 1
a105 1
void ERR_error_string_n(unsigned long e, char *buf, size_t len)
d107 1
a107 45
	char lsbuf[64], fsbuf[64], rsbuf[64];
	const char *ls,*fs,*rs;
	unsigned long l,f,r;

	l=ERR_GET_LIB(e);
	f=ERR_GET_FUNC(e);
	r=ERR_GET_REASON(e);

	ls=ERR_lib_error_string(e);
	fs=ERR_func_error_string(e);
	rs=ERR_reason_error_string(e);

	if (ls == NULL) 
		BIO_snprintf(lsbuf, sizeof(lsbuf), "lib(%lu)", l);
	if (fs == NULL)
		BIO_snprintf(fsbuf, sizeof(fsbuf), "func(%lu)", f);
	if (rs == NULL)
		BIO_snprintf(rsbuf, sizeof(rsbuf), "reason(%lu)", r);

	BIO_snprintf(buf, len,"error:%08lX:%s:%s:%s", e, ls?ls:lsbuf, 
		fs?fs:fsbuf, rs?rs:rsbuf);
	if (strlen(buf) == len-1)
		{
		/* output may be truncated; make sure we always have 5 
		 * colon-separated fields, i.e. 4 colons ... */
#define NUM_COLONS 4
		if (len > NUM_COLONS) /* ... if possible */
			{
			int i;
			char *s = buf;
			
			for (i = 0; i < NUM_COLONS; i++)
				{
				char *colon = strchr(s, ':');
				if (colon == NULL || colon > &buf[len-1] - NUM_COLONS + i)
					{
					/* set colon no. i at last possible position
					 * (buf[len-1] is the terminating 0)*/
					colon = &buf[len-1] - NUM_COLONS + i;
					*colon = ':';
					}
				s = colon + 1;
				}
			}
		}
d109 1
a109 5

/* BAD for multi-threading: uses a local buffer if ret == NULL */
/* ERR_error_string_n should be used instead for ret != NULL
 * as ERR_error_string cannot know how large the buffer is */
char *ERR_error_string(unsigned long e, char *ret)
d111 2
a112 1
	static char buf[256];
d114 1
a114 5
	if (ret == NULL) ret=buf;
	ERR_error_string_n(e, ret, 256);

	return ret;
	}
@


1.6
log
@resolve conflicts
@
text
@d89 1
a89 6
	BIO bio;

	BIO_set(&bio,BIO_s_file());
	BIO_set_fp(&bio,fp,BIO_NOCLOSE);

	return BIO_printf(&bio, "%s", str);
d97 1
a97 1
static int print_bio(const char *str, size_t len, void *bp)
d99 45
a143 1
	return BIO_write((BIO *)bp, str, len);
d145 5
a149 1
void ERR_print_errors(BIO *bp)
d151 6
a156 1
	ERR_print_errors_cb(print_bio, bp);
a157 2

	
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d60 1
a62 1
#include "cryptlib.h"
d89 6
a94 1
	return fprintf((FILE *)fp, "%s", str);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a64 1
#include <openssl/crypto.h>
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d67 2
a68 2
#ifndef NO_FP_API
void ERR_print_errors_fp(FILE *fp)
d71 2
a72 1
	char buf[200];
d81 3
a83 2
		fprintf(fp,"%lu:%s:%s:%d:%s\n",es,buf,
			file,line,(flags&ERR_TXT_STRING)?data:"");
d86 10
d98 4
d104 1
a104 18
	unsigned long l;
	char buf[256];
	char buf2[256];
	const char *file,*data;
	int line,flags;
	unsigned long es;

	es=CRYPTO_thread_id();
	while ((l=ERR_get_error_line_data(&file,&line,&data,&flags)) != 0)
		{
		ERR_error_string_n(l, buf, sizeof buf);
		sprintf(buf2,"%lu:%s:%s:%d:",es,buf,
			file,line);
		BIO_write(bp,buf2,strlen(buf2));
		if (flags & ERR_TXT_STRING)
			BIO_write(bp,data,strlen(data));
		BIO_write(bp,"\n",1);
		}
d107 1
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d79 2
a80 1
		fprintf(fp,"%lu:%s:%s:%d:%s\n",es,ERR_error_string(l,buf),
d98 2
a99 1
		sprintf(buf2,"%lu:%s:%s:%d:",es,ERR_error_string(l,buf),
@


1.1
log
@Initial revision
@
text
@d60 2
a61 2
#include "lhash.h"
#include "crypto.h"
d63 3
a65 3
#include "buffer.h"
#include "err.h"
#include "crypto.h"
d68 1
a68 2
void ERR_print_errors_fp(fp)
FILE *fp;
d72 1
a72 1
	char *file,*data;
d85 1
a85 2
void ERR_print_errors(bp)
BIO *bp;
d90 1
a90 1
	char *file,*data;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d60 2
a61 2
#include <openssl/lhash.h>
#include <openssl/crypto.h>
d63 3
a65 3
#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/crypto.h>
d67 3
a69 2
void ERR_print_errors_cb(int (*cb)(const char *str, size_t len, void *u),
			 void *u)
d72 2
a73 3
	char buf[256];
	char buf2[4096];
	const char *file,*data;
d80 2
a81 4
		ERR_error_string_n(l, buf, sizeof buf);
		BIO_snprintf(buf2, sizeof(buf2), "%lu:%s:%s:%d:%s\n", es, buf,
			file, line, (flags & ERR_TXT_STRING) ? data : "");
		cb(buf2, strlen(buf2), u);
d84 1
d86 2
a87 2
#ifndef OPENSSL_NO_FP_API
static int print_fp(const char *str, size_t len, void *fp)
d89 6
a94 7
	return fprintf((FILE *)fp, "%s", str);
	}
void ERR_print_errors_fp(FILE *fp)
	{
	ERR_print_errors_cb(print_fp, fp);
	}
#endif
d96 10
a105 7
static int print_bio(const char *str, size_t len, void *bp)
	{
	return BIO_write((BIO *)bp, str, len);
	}
void ERR_print_errors(BIO *bp)
	{
	ERR_print_errors_cb(print_bio, bp);
a107 1
	
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d65 1
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a59 1
#include "cryptlib.h"
d62 1
d89 1
a89 6
	BIO bio;

	BIO_set(&bio,BIO_s_file());
	BIO_set_fp(&bio,fp,BIO_NOCLOSE);

	return BIO_printf(&bio, "%s", str);
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d89 6
a94 1
	return fwrite(str, 1, len, fp);
d102 1
a102 1
void ERR_error_string_n(unsigned long e, char *buf, size_t len)
d104 1
a104 45
	char lsbuf[64], fsbuf[64], rsbuf[64];
	const char *ls,*fs,*rs;
	unsigned long l,f,r;

	l=ERR_GET_LIB(e);
	f=ERR_GET_FUNC(e);
	r=ERR_GET_REASON(e);

	ls=ERR_lib_error_string(e);
	fs=ERR_func_error_string(e);
	rs=ERR_reason_error_string(e);

	if (ls == NULL) 
		BIO_snprintf(lsbuf, sizeof(lsbuf), "lib(%lu)", l);
	if (fs == NULL)
		BIO_snprintf(fsbuf, sizeof(fsbuf), "func(%lu)", f);
	if (rs == NULL)
		BIO_snprintf(rsbuf, sizeof(rsbuf), "reason(%lu)", r);

	BIO_snprintf(buf, len,"error:%08lX:%s:%s:%s", e, ls?ls:lsbuf, 
		fs?fs:fsbuf, rs?rs:rsbuf);
	if (strlen(buf) == len-1)
		{
		/* output may be truncated; make sure we always have 5 
		 * colon-separated fields, i.e. 4 colons ... */
#define NUM_COLONS 4
		if (len > NUM_COLONS) /* ... if possible */
			{
			int i;
			char *s = buf;
			
			for (i = 0; i < NUM_COLONS; i++)
				{
				char *colon = strchr(s, ':');
				if (colon == NULL || colon > &buf[len-1] - NUM_COLONS + i)
					{
					/* set colon no. i at last possible position
					 * (buf[len-1] is the terminating 0)*/
					colon = &buf[len-1] - NUM_COLONS + i;
					*colon = ':';
					}
				s = colon + 1;
				}
			}
		}
d106 1
a106 5

/* BAD for multi-threading: uses a local buffer if ret == NULL */
/* ERR_error_string_n should be used instead for ret != NULL
 * as ERR_error_string cannot know how large the buffer is */
char *ERR_error_string(unsigned long e, char *ret)
d108 2
a109 1
	static char buf[256];
d111 1
a111 5
	if (ret == NULL) ret=buf;
	ERR_error_string_n(e, ret, 256);

	return ret;
	}
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@a74 1
	CRYPTO_THREADID cur;
d76 1
a76 2
	CRYPTO_THREADID_current(&cur);
	es=CRYPTO_THREADID_hash(&cur);
d82 1
a82 2
		if (cb(buf2, strlen(buf2), u) <= 0)
			break; /* abort outputting the error report */
d89 1
a89 6
	BIO bio;

	BIO_set(&bio,BIO_s_file());
	BIO_set_fp(&bio,fp,BIO_NOCLOSE);

	return BIO_printf(&bio, "%s", str);
d97 1
a97 1
static int print_bio(const char *str, size_t len, void *bp)
d99 45
a143 1
	return BIO_write((BIO *)bp, str, len);
d145 5
a149 1
void ERR_print_errors(BIO *bp)
d151 6
a156 1
	ERR_print_errors_cb(print_bio, bp);
a157 2

	
@


