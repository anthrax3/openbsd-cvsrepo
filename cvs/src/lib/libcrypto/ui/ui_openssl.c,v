head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.2
	OPENBSD_6_1_BASE:1.25;
locks; strict;
comment	@ * @;


1.25
date	2015.09.10.15.56.26;	author jsing;	state Exp;
branches;
next	1.24;
commitid	vHznCDK3idwNEFz4;

1.24
date	2015.07.16.02.46.49;	author guenther;	state Exp;
branches;
next	1.23;
commitid	lOHw9ZBzGTxy3tLp;

1.23
date	2014.07.13.00.10.47;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	AJGFMQVb38vO6CCn;

1.22
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.21;
commitid	yQEL1wOWIearrW15;

1.21
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	mJUVYpkFBZ0Zv2bG;

1.20
date	2014.06.11.01.53.02;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	4evB2EbwDYaBfe0g;

1.19
date	2014.05.24.09.16.08;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.27.20.26.49;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.25.13.22.38;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.24.14.03.38;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.24.13.12.18;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.05.37.44;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.22.37.59;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.16.17.55.34;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.06.18.35.16;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.10.16.31.56;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.03.11.36.56;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.21.01.49.11;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.58;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.41.31;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.50;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.14.00;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.44;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.04.13.15.16.35;	author miod;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@/* $OpenBSD: ui_openssl.c,v 1.24 2015/07/16 02:46:49 guenther Exp $ */
/* Written by Richard Levitte (richard@@levitte.org) and others
 * for the OpenSSL project 2001.
 */
/* ====================================================================
 * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

/* The lowest level part of this file was previously in crypto/des/read_pwd.c,
 * Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <sys/ioctl.h>

#include <openssl/opensslconf.h>

#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>

#include "ui_locl.h"

#ifndef NX509_SIG
#define NX509_SIG 32
#endif

/* Define globals.  They are protected by a lock */
static struct sigaction savsig[NX509_SIG];

static struct termios tty_orig;
static FILE *tty_in, *tty_out;
static int is_a_tty;

/* Declare static functions */
static int read_till_nl(FILE *);
static void recsig(int);
static void pushsig(void);
static void popsig(void);
static int read_string_inner(UI *ui, UI_STRING *uis, int echo, int strip_nl);

static int read_string(UI *ui, UI_STRING *uis);
static int write_string(UI *ui, UI_STRING *uis);

static int open_console(UI *ui);
static int echo_console(UI *ui);
static int noecho_console(UI *ui);
static int close_console(UI *ui);

static UI_METHOD ui_openssl = {
	.name = "OpenSSL default user interface",
	.ui_open_session = open_console,
	.ui_write_string = write_string,
	.ui_read_string = read_string,
	.ui_close_session = close_console,
};

/* The method with all the built-in thingies */
UI_METHOD *
UI_OpenSSL(void)
{
	return &ui_openssl;
}

/* The following function makes sure that info and error strings are printed
   before any prompt. */
static int
write_string(UI *ui, UI_STRING *uis)
{
	switch (UI_get_string_type(uis)) {
	case UIT_ERROR:
	case UIT_INFO:
		fputs(UI_get0_output_string(uis), tty_out);
		fflush(tty_out);
		break;
	default:
		break;
	}
	return 1;
}

static int
read_string(UI *ui, UI_STRING *uis)
{
	int ok = 0;

	switch (UI_get_string_type(uis)) {
	case UIT_BOOLEAN:
		fputs(UI_get0_output_string(uis), tty_out);
		fputs(UI_get0_action_string(uis), tty_out);
		fflush(tty_out);
		return read_string_inner(ui, uis,
		    UI_get_input_flags(uis) & UI_INPUT_FLAG_ECHO, 0);
	case UIT_PROMPT:
		fputs(UI_get0_output_string(uis), tty_out);
		fflush(tty_out);
		return read_string_inner(ui, uis,
		    UI_get_input_flags(uis) & UI_INPUT_FLAG_ECHO, 1);
	case UIT_VERIFY:
		fprintf(tty_out, "Verifying - %s",
		    UI_get0_output_string(uis));
		fflush(tty_out);
		if ((ok = read_string_inner(ui, uis, UI_get_input_flags(uis) &
		    UI_INPUT_FLAG_ECHO, 1)) <= 0)
			return ok;
		if (strcmp(UI_get0_result_string(uis),
		    UI_get0_test_string(uis)) != 0) {
			fprintf(tty_out, "Verify failure\n");
			fflush(tty_out);
			return 0;
		}
		break;
	default:
		break;
	}
	return 1;
}


/* Internal functions to read a string without echoing */
static int
read_till_nl(FILE *in)
{
#define SIZE 4
	char buf[SIZE + 1];

	do {
		if (!fgets(buf, SIZE, in))
			return 0;
	} while (strchr(buf, '\n') == NULL);
	return 1;
}

static volatile sig_atomic_t intr_signal;

static int
read_string_inner(UI *ui, UI_STRING *uis, int echo, int strip_nl)
{
	static int ps;
	int ok;
	char result[BUFSIZ];
	int maxsize = BUFSIZ - 1;
	char *p;

	intr_signal = 0;
	ok = 0;
	ps = 0;

	pushsig();
	ps = 1;

	if (!echo && !noecho_console(ui))
		goto error;
	ps = 2;

	result[0] = '\0';
	p = fgets(result, maxsize, tty_in);
	if (!p)
		goto error;
	if (feof(tty_in))
		goto error;
	if (ferror(tty_in))
		goto error;
	if ((p = strchr(result, '\n')) != NULL) {
		if (strip_nl)
			*p = '\0';
	} else if (!read_till_nl(tty_in))
		goto error;
	if (UI_set_result(ui, uis, result) >= 0)
		ok = 1;

error:
	if (intr_signal == SIGINT)
		ok = -1;
	if (!echo)
		fprintf(tty_out, "\n");
	if (ps >= 2 && !echo && !echo_console(ui))
		ok = 0;

	if (ps >= 1)
		popsig();

	explicit_bzero(result, BUFSIZ);
	return ok;
}


/* Internal functions to open, handle and close a channel to the console.  */
static int
open_console(UI *ui)
{
	CRYPTO_w_lock(CRYPTO_LOCK_UI);
	is_a_tty = 1;

#define DEV_TTY "/dev/tty"
	if ((tty_in = fopen(DEV_TTY, "r")) == NULL)
		tty_in = stdin;
	if ((tty_out = fopen(DEV_TTY, "w")) == NULL)
		tty_out = stderr;

	if (tcgetattr(fileno(tty_in), &tty_orig) == -1) {
		if (errno == ENOTTY)
			is_a_tty = 0;
		else
			/*
			 * Ariel Glenn ariel@@columbia.edu reports that
			 * solaris can return EINVAL instead.  This should be
			 * ok
			 */
			if (errno == EINVAL)
				is_a_tty = 0;
		else
			return 0;
	}

	return 1;
}

static int
noecho_console(UI *ui)
{
	struct termios tty_new = tty_orig;

	tty_new.c_lflag &= ~ECHO;
	if (is_a_tty && (tcsetattr(fileno(tty_in), TCSANOW, &tty_new) == -1))
		return 0;
	return 1;
}

static int
echo_console(UI *ui)
{
	if (is_a_tty && (tcsetattr(fileno(tty_in), TCSANOW, &tty_orig) == -1))
		return 0;
	return 1;
}

static int
close_console(UI *ui)
{
	if (tty_in != stdin)
		fclose(tty_in);
	if (tty_out != stderr)
		fclose(tty_out);
	CRYPTO_w_unlock(CRYPTO_LOCK_UI);

	return 1;
}


/* Internal functions to handle signals and act on them */
static void
pushsig(void)
{
	int i;
	struct sigaction sa;

	memset(&sa, 0, sizeof sa);
	sa.sa_handler = recsig;

	for (i = 1; i < NX509_SIG; i++) {
		if (i == SIGUSR1)
			continue;
		if (i == SIGUSR2)
			continue;
		if (i == SIGKILL)	/* We can't make any action on that. */
			continue;
		sigaction(i, &sa, &savsig[i]);
	}

	signal(SIGWINCH, SIG_DFL);
}

static void
popsig(void)
{
	int i;
	for (i = 1; i < NX509_SIG; i++) {
		if (i == SIGUSR1)
			continue;
		if (i == SIGUSR2)
			continue;
		sigaction(i, &savsig[i], NULL);
	}
}

static void
recsig(int i)
{
	intr_signal = i;
}
@


1.24
log
@After reading a password with terminal echo off, restore the terminal to
its original state instead of blindly turning echo on.

problem reported on the openssl-dev list by William Freeman
ok miod@@ beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: ui_openssl.c,v 1.23 2014/07/13 00:10:47 deraadt Exp $ */
d289 1
a289 1
	OPENSSL_cleanse(result, BUFSIZ);
@


1.23
log
@remove silly cast
@
text
@d1 1
a1 1
/* $OpenBSD: ui_openssl.c,v 1.22 2014/07/11 08:44:49 jsing Exp $ */
d137 1
a137 1
static struct termios tty_orig, tty_new;
d328 2
a329 1
	memcpy(&(tty_new), &(tty_orig), sizeof(tty_orig));
d339 1
a339 3
	memcpy(&(tty_new), &(tty_orig), sizeof(tty_orig));
	tty_new.c_lflag |= ECHO;
	if (is_a_tty && (tcsetattr(fileno(tty_in), TCSANOW, &tty_new) == -1))
@


1.22
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ui_openssl.c,v 1.21 2014/06/12 15:49:31 deraadt Exp $ */
d270 1
a270 1
	if ((p = (char *) strchr(result, '\n')) != NULL) {
@


1.21
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d117 2
d121 1
d125 1
a125 2
#include <errno.h>

a126 1
#include <termios.h>
a128 3
#include "cryptlib.h"

#include <sys/ioctl.h>
a132 1

@


1.20
log
@c-file-style hints, begone; ok beck
@
text
@d1 1
a1 1
/* crypto/ui/ui_openssl.c */
@


1.19
log
@Almost nothing actually needs to include <openssl/e_os2.h>, however by
including it they get <openssl/opensslconf.h>. So instead of pulling in
<openssl/e_os2.h>, just pull in <openssl/opensslconf.h>.

"go ahead" miod@@
@
text
@d1 1
a1 1
/* crypto/ui/ui_openssl.c -*- mode:C; c-file-style: "eay" -*- */
@


1.18
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d117 1
a117 1
#include <openssl/e_os2.h>
@


1.17
log
@Clean up the remaining TTY related remnants.

ok miod@@
@
text
@d160 5
a164 7
	"OpenSSL default user interface",
	open_console,
	write_string,
	NULL,			/* No flusher is needed for command lines */
	read_string,
	close_console,
	NULL
@


1.16
log
@You want signals?!? I'll give you signals!!! Oh, and we have termios as
well...

ok beck@@
@
text
@d125 1
a125 10
/* If unistd.h defines _POSIX_VERSION, we conclude that we
 * are on a POSIX system and have sigaction and termios. */
#if defined(_POSIX_VERSION)

#define SIGACTION
#if !defined(TERMIOS) && !defined(TERMIO) && !defined(SGTTY)
#define TERMIOS
#endif

#endif
a129 13

/* There are 5 types of terminal interface supported,
 * TERMIO, TERMIOS, VMS, MSDOS and SGTTY
 */


#include <termios.h>
#define TTY_STRUCT		struct termios
#define TTY_FLAGS		c_lflag
#define TTY_get(tty,data)	tcgetattr(tty,data)
#define TTY_set(tty,data)	tcsetattr(tty,TCSANOW,data)


d140 1
a140 1
static TTY_STRUCT tty_orig, tty_new;
d312 1
a312 2
#if defined(TTY_get)
	if (TTY_get(fileno(tty_in), &tty_orig) == -1) {
d326 1
a326 1
#endif
a332 1
#ifdef TTY_FLAGS
d334 2
a335 5
	tty_new.TTY_FLAGS &= ~ECHO;
#endif

#if defined(TTY_set)
	if (is_a_tty && (TTY_set(fileno(tty_in), &tty_new) == -1))
a336 1
#endif
a342 1
#if defined(TTY_set)
d344 2
a345 5
	tty_new.TTY_FLAGS |= ECHO;
#endif

#if defined(TTY_set)
	if (is_a_tty && (TTY_set(fileno(tty_in), &tty_new) == -1))
a346 1
#endif
@


1.15
log
@More KNF.
@
text
@a143 5
#ifdef _LIBC
#undef  TERMIOS
#define TERMIO
#undef  SGTTY
#endif
a144 1
#ifdef TERMIOS
a149 1
#endif
a150 7
#ifdef TERMIO
#include <termio.h>
#define TTY_STRUCT		struct termio
#define TTY_FLAGS		c_lflag
#define TTY_get(tty,data)	ioctl(tty,TCGETA,data)
#define TTY_set(tty,data)	ioctl(tty,TCSETA,data)
#endif
a159 1
#ifdef SIGACTION
a160 3
#else
static void (*savsig[NX509_SIG]) (int);
#endif
a400 1
#ifdef SIGACTION
a404 1
#endif
a406 1
#ifdef SIGUSR1
a408 2
#endif
#ifdef SIGUSR2
a410 2
#endif
#ifdef SIGKILL
a412 2
#endif
#ifdef SIGACTION
a413 3
#else
		savsig[i] = signal(i, recsig);
#endif
a415 1
#ifdef SIGWINCH
a416 1
#endif
a427 1
#ifdef SIGACTION
a428 3
#else
		signal(i, savsig[i]);
#endif
@


1.14
log
@More KNF.
@
text
@d254 2
a255 2
		if ((ok = read_string_inner(ui, uis,
			    UI_get_input_flags(uis) & UI_INPUT_FLAG_ECHO, 1)) <= 0)
@


1.13
log
@stab at indentation
@
text
@a116 1

d189 1
a189 1
static int read_string_inner(UI * ui, UI_STRING * uis, int echo, int strip_nl);
d191 2
a192 2
static int read_string(UI * ui, UI_STRING * uis);
static int write_string(UI * ui, UI_STRING * uis);
d194 4
a197 4
static int open_console(UI * ui);
static int echo_console(UI * ui);
static int noecho_console(UI * ui);
static int close_console(UI * ui);
d199 1
a199 2
static UI_METHOD ui_openssl =
{
d218 2
a219 2
static int 
write_string(UI * ui, UI_STRING * uis)
d222 2
a223 2
		case UIT_ERROR:
		case UIT_INFO:
d233 2
a234 2
static int 
read_string(UI * ui, UI_STRING * uis)
d258 1
a258 1
			UI_get0_test_string(uis)) != 0) {
d272 2
a273 2
static int 
read_till_nl(FILE * in)
d287 2
a288 2
static int 
read_string_inner(UI * ui, UI_STRING * uis, int echo, int strip_nl)
d340 2
a341 2
static int 
open_console(UI * ui)
d362 2
a363 2
		if (errno == EINVAL)
			is_a_tty = 0;
d371 2
a372 2
static int 
noecho_console(UI * ui)
d386 2
a387 2
static int 
echo_console(UI * ui)
d401 2
a402 2
static int 
close_console(UI * ui)
d415 1
a415 1
static void 
d451 1
a451 1
static void 
d468 1
a468 1
static void 
@


1.12
log
@whack the ifdef pinata:
OPENSSL_SYSNAME_VXWORKS
OPENSSL_SYS_VMS
OPENSSL_SYS_MSDOS
OPENSSL_UNISTD
OPENSSL_SYS_WIN16
WIN_CONSOLE_BUG
OPENSSL_SYS_WINCE
SGTTY
OPENSSL_SYS_MACINTOSH_CLASSIC
MAC_OS_GUSI_SOURCE
OPENSSL_SYS_NETWARE
OPENSSL_SYS_SUNOS
__DJGPP__
OPENSSL_SYS_BEOS
OPENSSL_SYS_WIN32
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d66 1
a66 1
 * 
d73 1
a73 1
 * 
d80 1
a80 1
 * 
d95 1
a95 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d98 1
a98 1
 * 
d110 1
a110 1
 * 
d128 1
a128 1
# if defined(_POSIX_VERSION)
d130 4
a133 4
#  define SIGACTION
#  if !defined(TERMIOS) && !defined(TERMIO) && !defined(SGTTY)
#   define TERMIOS
#  endif
d135 1
a135 1
# endif
d146 3
a148 3
# undef  TERMIOS
# define TERMIO
# undef  SGTTY
d152 5
a156 5
# include <termios.h>
# define TTY_STRUCT		struct termios
# define TTY_FLAGS		c_lflag
# define TTY_get(tty,data)	tcgetattr(tty,data)
# define TTY_set(tty,data)	tcsetattr(tty,TCSANOW,data)
d160 5
a164 5
# include <termio.h>
# define TTY_STRUCT		struct termio
# define TTY_FLAGS		c_lflag
# define TTY_get(tty,data)	ioctl(tty,TCGETA,data)
# define TTY_set(tty,data)	ioctl(tty,TCSETA,data)
d167 1
a167 1
# include <sys/ioctl.h>
d170 1
a170 1
# define NX509_SIG 32
d178 1
a178 1
static void (*savsig[NX509_SIG])(int );
d181 1
a181 1
static TTY_STRUCT tty_orig,tty_new;
d190 1
a190 1
static int read_string_inner(UI *ui, UI_STRING *uis, int echo, int strip_nl);
d192 2
a193 2
static int read_string(UI *ui, UI_STRING *uis);
static int write_string(UI *ui, UI_STRING *uis);
d195 4
a198 4
static int open_console(UI *ui);
static int echo_console(UI *ui);
static int noecho_console(UI *ui);
static int close_console(UI *ui);
d201 1
a201 1
	{
d209 1
a209 1
	};
d212 3
a214 2
UI_METHOD *UI_OpenSSL(void)
	{
d216 1
a216 1
	}
d220 6
a225 6
static int write_string(UI *ui, UI_STRING *uis)
	{
	switch (UI_get_string_type(uis))
		{
	case UIT_ERROR:
	case UIT_INFO:
d231 1
a231 1
		}
d233 1
a233 1
	}
d235 3
a237 2
static int read_string(UI *ui, UI_STRING *uis)
	{
d240 1
a240 2
	switch (UI_get_string_type(uis))
		{
d246 1
a246 1
			UI_get_input_flags(uis) & UI_INPUT_FLAG_ECHO, 0);
d251 1
a251 1
			UI_get_input_flags(uis) & UI_INPUT_FLAG_ECHO, 1);
d253 2
a254 2
		fprintf(tty_out,"Verifying - %s",
			UI_get0_output_string(uis));
d257 1
a257 1
			UI_get_input_flags(uis) & UI_INPUT_FLAG_ECHO, 1)) <= 0)
d260 2
a261 3
			UI_get0_test_string(uis)) != 0)
			{
			fprintf(tty_out,"Verify failure\n");
d264 1
a264 1
			}
d268 1
a268 1
		}
d270 1
a270 1
	}
d274 3
a276 2
static int read_till_nl(FILE *in)
	{
d278 1
a278 1
	char buf[SIZE+1];
d280 2
a281 2
	do	{
		if (!fgets(buf,SIZE,in))
d283 1
a283 1
		} while (strchr(buf,'\n') == NULL);
d285 1
a285 1
	}
d289 3
a291 2
static int read_string_inner(UI *ui, UI_STRING *uis, int echo, int strip_nl)
	{
d295 1
a295 1
	int maxsize = BUFSIZ-1;
d298 3
a300 3
	intr_signal=0;
	ok=0;
	ps=0;
d303 1
a303 1
	ps=1;
d307 1
a307 1
	ps=2;
d309 3
a311 3
	result[0]='\0';
	p=fgets(result,maxsize,tty_in);
	if(!p)
d313 5
a317 4
	if (feof(tty_in)) goto error;
	if (ferror(tty_in)) goto error;
	if ((p=(char *)strchr(result,'\n')) != NULL)
		{
d319 3
a321 5
			*p='\0';
		}
	else
		if (!read_till_nl(tty_in))
			goto error;
d323 1
a323 1
		ok=1;
d327 3
a329 2
		ok=-1;
	if (!echo) fprintf(tty_out,"\n");
d331 1
a331 1
		ok=0;
d336 1
a336 1
	OPENSSL_cleanse(result,BUFSIZ);
d338 1
a338 1
	}
d342 3
a344 2
static int open_console(UI *ui)
	{
d348 5
a352 5
#    define DEV_TTY "/dev/tty"
	if ((tty_in=fopen(DEV_TTY,"r")) == NULL)
		tty_in=stdin;
	if ((tty_out=fopen(DEV_TTY,"w")) == NULL)
		tty_out=stderr;
d355 1
a355 2
 	if (TTY_get(fileno(tty_in),&tty_orig) == -1)
		{
d357 1
a357 1
			is_a_tty=0;
d359 5
a363 2
		/* Ariel Glenn ariel@@columbia.edu reports that solaris
		 * can return EINVAL instead.  This should be ok */
d365 1
a365 1
			is_a_tty=0;
d368 1
a368 1
		}
d371 1
a371 1
	}
d373 3
a375 2
static int noecho_console(UI *ui)
	{
d377 1
a377 1
	memcpy(&(tty_new),&(tty_orig),sizeof(tty_orig));
d382 1
a382 1
	if (is_a_tty && (TTY_set(fileno(tty_in),&tty_new) == -1))
d386 1
a386 1
	}
d388 3
a390 2
static int echo_console(UI *ui)
	{
d392 1
a392 1
	memcpy(&(tty_new),&(tty_orig),sizeof(tty_orig));
d397 1
a397 1
	if (is_a_tty && (TTY_set(fileno(tty_in),&tty_new) == -1))
d401 1
a401 1
	}
d403 7
a409 4
static int close_console(UI *ui)
	{
	if (tty_in != stdin) fclose(tty_in);
	if (tty_out != stderr) fclose(tty_out);
d413 1
a413 1
	}
d417 3
a419 2
static void pushsig(void)
	{
d424 2
a425 2
	memset(&sa,0,sizeof sa);
	sa.sa_handler=recsig;
d428 1
a428 2
	for (i=1; i<NX509_SIG; i++)
		{
d438 1
a438 1
		if (i == SIGKILL) /* We can't make any action on that. */
d442 1
a442 1
		sigaction(i,&sa,&savsig[i]);
d444 1
a444 1
		savsig[i]=signal(i,recsig);
d446 1
a446 1
		}
d449 1
a449 1
	signal(SIGWINCH,SIG_DFL);
d451 1
a451 1
	}
d453 3
a455 2
static void popsig(void)
	{
d457 1
a457 2
	for (i=1; i<NX509_SIG; i++)
		{
d463 1
a463 1
		sigaction(i,&savsig[i],NULL);
d465 1
a465 1
		signal(i,savsig[i]);
a466 1
		}
d468 1
d470 5
a474 4
static void recsig(int i)
	{
	intr_signal=i;
	}
@


1.11
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@a119 14
/* need for #define _POSIX_C_SOURCE arises whenever you pass -ansi to gcc
 * [maybe others?], because it masks interfaces not discussed in standard,
 * sigaction and fileno included. -pedantic would be more appropriate for
 * the intended purposes, but we can't prevent users from adding -ansi.
 */
#if defined(OPENSSL_SYSNAME_VXWORKS)
#include <sys/types.h>
#endif

#if !defined(_POSIX_C_SOURCE) && defined(OPENSSL_SYS_VMS)
#ifndef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 2
#endif
#endif
d125 1
a125 6
#if !defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_VMS)
# ifdef OPENSSL_UNISTD
#  include OPENSSL_UNISTD
# else
#  include <unistd.h>
# endif
a135 1
#endif
a136 8
#ifdef WIN16TTY
# undef OPENSSL_SYS_WIN16
# undef WIN16
# undef _WINDOWS
# include <graph.h>
#endif

/* 06-Apr-92 Luke Brennan    Support for VMS */
a139 14
#ifdef OPENSSL_SYS_VMS		/* prototypes for sys$whatever */
# include <starlet.h>
# ifdef __DECC
#  pragma message disable DOLLARID
# endif
#endif

#ifdef WIN_CONSOLE_BUG
# include <windows.h>
#ifndef OPENSSL_SYS_WINCE
# include <wincon.h>
#endif
#endif

a144 12
#if defined(__sgi) && !defined(TERMIOS)
# define TERMIOS
# undef  TERMIO
# undef  SGTTY
#endif

#if defined(linux) && !defined(TERMIO)
# undef  TERMIOS
# define TERMIO
# undef  SGTTY
#endif

a150 18
#if !defined(TERMIO) && !defined(TERMIOS) && !defined(OPENSSL_SYS_VMS) && !defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_MACINTOSH_CLASSIC) && !defined(MAC_OS_GUSI_SOURCE)
# undef  TERMIOS
# undef  TERMIO
# define SGTTY
#endif

#if defined(OPENSSL_SYS_VXWORKS)
#undef TERMIOS
#undef TERMIO
#undef SGTTY
#endif

#if defined(OPENSSL_SYS_NETWARE)
#undef TERMIOS
#undef TERMIO
#undef SGTTY
#endif

a166 9
#ifdef SGTTY
# include <sgtty.h>
# define TTY_STRUCT		struct sgttyb
# define TTY_FLAGS		sg_flags
# define TTY_get(tty,data)	ioctl(tty,TIOCGETP,data)
# define TTY_set(tty,data)	ioctl(tty,TIOCSETP,data)
#endif

#if !defined(_LIBC) && !defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_VMS) && !defined(OPENSSL_SYS_MACINTOSH_CLASSIC) && !defined(OPENSSL_SYS_SUNOS)
a167 30
#endif

#ifdef OPENSSL_SYS_MSDOS
# include <conio.h>
#endif

#ifdef OPENSSL_SYS_VMS
# include <ssdef.h>
# include <iodef.h>
# include <ttdef.h>
# include <descrip.h>
struct IOSB {
	short iosb$w_value;
	short iosb$w_count;
	long  iosb$l_info;
	};
#endif

#ifdef OPENSSL_SYS_SUNOS
	typedef int sig_atomic_t;
#endif

#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(MAC_OS_GUSI_SOURCE) || defined(OPENSSL_SYS_NETWARE)
/*
 * This one needs work. As a matter of fact the code is unoperational
 * and this is only a trick to get it compiled.
 *					<appro@@fy.chalmers.se>
 */
# define TTY_STRUCT int
#endif
a180 8
#ifdef OPENSSL_SYS_VMS
static struct IOSB iosb;
static $DESCRIPTOR(terminal,"TT");
static long tty_orig[3], tty_new[3]; /* XXX   Is there any guarantee that this will always suffice for the actual structures? */
static long status;
static unsigned short channel = 0;
#else
#if !defined(OPENSSL_SYS_MSDOS) || defined(__DJGPP__)
a181 2
#endif
#endif
a185 1
#if !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
a189 4
#endif
#if defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_WIN16)
static int noecho_fgets(char *buf, int size, FILE *tty);
#endif
a272 1
#if !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
a286 1
#endif
a293 1
#if !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
a307 9
#ifdef OPENSSL_SYS_MSDOS
	if (!echo)
		{
		noecho_fgets(result,maxsize,tty_in);
		p=result; /* FIXME: noecho_fgets doesn't return errors */
		}
	else
		p=fgets(result,maxsize,tty_in);
#else
a308 1
#endif
a332 3
#else
	ok=1;
#endif
a344 7
#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_NETWARE) || defined(OPENSSL_SYS_BEOS)
	tty_in=stdin;
	tty_out=stderr;
#else
#  ifdef OPENSSL_SYS_MSDOS
#    define DEV_TTY "con"
#  else
a345 1
#  endif
a349 1
#endif
d351 1
a351 1
#if defined(TTY_get) && !defined(OPENSSL_SYS_VMS)
a353 1
#ifdef ENOTTY
a356 2
#endif
#ifdef EINVAL
a361 1
#endif
a364 8
#ifdef OPENSSL_SYS_VMS
	status = sys$assign(&terminal,&channel,0,0);
	if (status != SS$_NORMAL)
		return 0;
	status=sys$qiow(0,channel,IO$_SENSEMODE,&iosb,0,0,tty_orig,12,0,0,0,0);
	if ((status != SS$_NORMAL) || (iosb.iosb$w_value != SS$_NORMAL))
		return 0;
#endif
d375 1
a375 1
#if defined(TTY_set) && !defined(OPENSSL_SYS_VMS)
a378 8
#ifdef OPENSSL_SYS_VMS
	tty_new[0] = tty_orig[0];
	tty_new[1] = tty_orig[1] | TT$M_NOECHO;
	tty_new[2] = tty_orig[2];
	status = sys$qiow(0,channel,IO$_SETMODE,&iosb,0,0,tty_new,12,0,0,0,0);
	if ((status != SS$_NORMAL) || (iosb.iosb$w_value != SS$_NORMAL))
		return 0;
#endif
d384 1
a384 1
#if defined(TTY_set) && !defined(OPENSSL_SYS_VMS)
d389 1
a389 1
#if defined(TTY_set) && !defined(OPENSSL_SYS_VMS)
a392 8
#ifdef OPENSSL_SYS_VMS
	tty_new[0] = tty_orig[0];
	tty_new[1] = tty_orig[1] & ~TT$M_NOECHO;
	tty_new[2] = tty_orig[2];
	status = sys$qiow(0,channel,IO$_SETMODE,&iosb,0,0,tty_new,12,0,0,0,0);
	if ((status != SS$_NORMAL) || (iosb.iosb$w_value != SS$_NORMAL))
		return 0;
#endif
a399 3
#ifdef OPENSSL_SYS_VMS
	status = sys$dassgn(channel);
#endif
a405 1
#if !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
a408 1
#ifndef OPENSSL_SYS_WIN32
a409 1
#endif
a416 8
#ifdef OPENSSL_SYS_WIN32
	savsig[SIGABRT]=signal(SIGABRT,recsig);
	savsig[SIGFPE]=signal(SIGFPE,recsig);
	savsig[SIGILL]=signal(SIGILL,recsig);
	savsig[SIGINT]=signal(SIGINT,recsig);
	savsig[SIGSEGV]=signal(SIGSEGV,recsig);
	savsig[SIGTERM]=signal(SIGTERM,recsig);
#else
a436 1
#endif
a444 8
#ifdef OPENSSL_SYS_WIN32
	signal(SIGABRT,savsig[SIGABRT]);
	signal(SIGFPE,savsig[SIGFPE]);
	signal(SIGILL,savsig[SIGILL]);
	signal(SIGINT,savsig[SIGINT]);
	signal(SIGSEGV,savsig[SIGSEGV]);
	signal(SIGTERM,savsig[SIGTERM]);
#else
a447 1
#ifdef SIGUSR1
a449 2
#endif
#ifdef SIGUSR2
a451 1
#endif
a457 1
#endif
a463 48
#endif

/* Internal functions specific for Windows */
#if defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
static int noecho_fgets(char *buf, int size, FILE *tty)
	{
	int i;
	char *p;

	p=buf;
	for (;;)
		{
		if (size == 0)
			{
			*p='\0';
			break;
			}
		size--;
#ifdef WIN16TTY
		i=_inchar();
#elif defined(_WIN32)
		i=_getch();
#else
		i=getch();
#endif
		if (i == '\r') i='\n';
		*(p++)=i;
		if (i == '\n')
			{
			*p='\0';
			break;
			}
		}
#ifdef WIN_CONSOLE_BUG
/* Win95 has several evil console bugs: one of these is that the
 * last character read using getch() is passed to the next read: this is
 * usually a CR so this can be trouble. No STDIO fix seems to work but
 * flushing the console appears to do the trick.
 */
		{
			HANDLE inh;
			inh = GetStdHandle(STD_INPUT_HANDLE);
			FlushConsoleInputBuffer(inh);
		}
#endif
	return(strlen(buf));
	}
#endif
@


1.10
log
@resolve conflicts
@
text
@d125 4
d130 1
d133 1
d407 2
a408 2
		if (fgets(buf,sizeof(buf),in) == NULL)
			break;
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d125 1
a125 1
#ifndef _POSIX_C_SOURCE
@


1.8
log
@resolve conflicts
@
text
@d125 3
a127 1
#define _POSIX_C_SOURCE 1
d302 1
a302 1
static void read_till_nl(FILE *);
d395 1
a395 1
static void read_till_nl(FILE *in)
d404 1
d452 2
a453 1
		read_till_nl(tty_in);
d481 1
a481 1
#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_NETWARE)
@


1.7
log
@resolve conflicts
@
text
@d681 2
@


1.6
log
@Add proper checks against fgets failure.  From Charles Longeau.

OK moritz@@, millert@@, and jaredy@@.
@
text
@d120 11
a158 4
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
d209 6
d263 1
a263 1
#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(MAC_OS_GUSI_SOURCE)
d477 1
a477 1
#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(OPENSSL_SYS_VXWORKS)
d493 1
a493 1
	if (TTY_get(fileno(tty_in),&tty_orig) == -1)
d582 1
d584 1
d592 8
d620 1
d629 8
a637 1

d654 1
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d386 2
a387 1
		fgets(buf,SIZE,in);
@


1.4
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d162 1
d165 1
d196 1
a196 1
#if defined(OPENSSL_SYS_VSWORKS)
d226 1
a226 1
#if !defined(_LIBC) && !defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_VMS) && !defined(OPENSSL_SYS_MACINTOSH_CLASSIC)
d246 4
d286 1
d291 1
d378 1
d391 1
d399 1
a401 1
#ifndef OPENSSL_SYS_WIN16
d452 1
a452 1
	memset(result,0,BUFSIZ);
d463 1
a463 1
#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(OPENSSL_SYS_VSWORKS)
d553 1
a553 1
	if (tty_in != stderr) fclose(tty_in);
d564 1
d628 1
d631 1
a631 1
#if defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_WIN16)
@


1.3
log
@sig_atomic_t type must also be volatile
@
text
@d272 1
a272 1
#ifndef OPENSSL_SYS_MSDOS
@


1.2
log
@Merge openssl-0.9.7-stable-SNAP-20020519
@
text
@d381 1
a381 1
static sig_atomic_t intr_signal;
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d468 1
a468 1
#if defined(TTY_get) && !defined(VMS)
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d468 1
a468 1
#if defined(TTY_get) && !defined(OPENSSL_SYS_VMS)
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d272 1
a272 1
#if !defined(OPENSSL_SYS_MSDOS) || defined(__DJGPP__)
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a161 1
#ifndef OPENSSL_SYS_WINCE
a163 1
#endif
d194 1
a194 1
#if defined(OPENSSL_SYS_VXWORKS)
d224 1
a224 1
#if !defined(_LIBC) && !defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_VMS) && !defined(OPENSSL_SYS_MACINTOSH_CLASSIC) && !defined(OPENSSL_SYS_SUNOS)
a243 4
#ifdef OPENSSL_SYS_SUNOS
	typedef int sig_atomic_t;
#endif

a279 1
#if !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
a283 1
#endif
a369 1
#if !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
d381 1
a381 2
static volatile sig_atomic_t intr_signal;
#endif
a388 1
#if !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
d391 1
d442 1
a442 1
	OPENSSL_cleanse(result,BUFSIZ);
d453 1
a453 1
#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(OPENSSL_SYS_VXWORKS)
d543 1
a543 1
	if (tty_in != stdin) fclose(tty_in);
a553 1
#if !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
a616 1
#endif
d619 1
a619 1
#if defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_WIN16) && !defined(OPENSSL_SYS_WINCE)
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a119 11
/* need for #define _POSIX_C_SOURCE arises whenever you pass -ansi to gcc
 * [maybe others?], because it masks interfaces not discussed in standard,
 * sigaction and fileno included. -pedantic would be more appropriate for
 * the intended purposes, but we can't prevent users from adding -ansi.
 */
#define _POSIX_C_SOURCE 1
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>

d148 4
a201 6
#if defined(OPENSSL_SYS_NETWARE)
#undef TERMIOS
#undef TERMIO
#undef SGTTY
#endif

d250 1
a250 1
#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(MAC_OS_GUSI_SOURCE) || defined(OPENSSL_SYS_NETWARE)
d463 1
a463 1
#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_NETWARE)
d479 1
a479 1
 	if (TTY_get(fileno(tty_in),&tty_orig) == -1)
a567 1
#ifndef OPENSSL_SYS_WIN32
a568 1
#endif
a575 8
#ifdef OPENSSL_SYS_WIN32
	savsig[SIGABRT]=signal(SIGABRT,recsig);
	savsig[SIGFPE]=signal(SIGFPE,recsig);
	savsig[SIGILL]=signal(SIGILL,recsig);
	savsig[SIGINT]=signal(SIGINT,recsig);
	savsig[SIGSEGV]=signal(SIGSEGV,recsig);
	savsig[SIGTERM]=signal(SIGTERM,recsig);
#else
a595 1
#endif
a603 8
#ifdef OPENSSL_SYS_WIN32
	signal(SIGABRT,savsig[SIGABRT]);
	signal(SIGFPE,savsig[SIGFPE]);
	signal(SIGILL,savsig[SIGILL]);
	signal(SIGINT,savsig[SIGINT]);
	signal(SIGSEGV,savsig[SIGSEGV]);
	signal(SIGTERM,savsig[SIGTERM]);
#else
d605 1
a621 1
#endif
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@a679 2
#elif defined(_WIN32)
		i=_getch();
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d125 1
a125 3
#ifndef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 2
#endif
d300 1
a300 1
static int read_till_nl(FILE *);
d393 1
a393 1
static int read_till_nl(FILE *in)
d399 1
a399 2
		if (!fgets(buf,SIZE,in))
			return 0;
a400 1
	return 1;
d448 1
a448 2
		if (!read_till_nl(tty_in))
			goto error;
d476 1
a476 1
#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_NETWARE) || defined(OPENSSL_SYS_BEOS)
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d125 1
a125 1
#if !defined(_POSIX_C_SOURCE) && defined(OPENSSL_SYS_VMS)
@


1.1.1.8
log
@Import OpenSSL 1.0.1g
@
text
@a124 4
#if defined(OPENSSL_SYSNAME_VXWORKS)
#include <sys/types.h>
#endif

a125 1
#ifndef _POSIX_C_SOURCE
a126 1
#endif
@


