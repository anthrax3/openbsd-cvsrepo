head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2014.06.20.21.00.46;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	cPW6VxreIaECmYIA;

1.5
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.03.19.36.47;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.17.18.49.35;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.15.13.41.53;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.33;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.33;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.04.13.15.16.32;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove the OPENSSL_*cap getenv's.  A program should not be able to
change the behaviour of the library in such a complicated fashion.
ok miod
@
text
@/* $OpenBSD: armcap.c,v 1.5 2014/06/12 15:49:27 deraadt Exp $ */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <setjmp.h>
#include <signal.h>
#include <crypto.h>

#include "arm_arch.h"

unsigned int OPENSSL_armcap_P;

#if __ARM_ARCH__ >= 7
static sigset_t all_masked;

static sigjmp_buf ill_jmp;
	static void ill_handler (int sig) { siglongjmp(ill_jmp, sig);
}

/*
 * Following subroutines could have been inlined, but it's not all
 * ARM compilers support inline assembler...
 */
void _armv7_neon_probe(void);
#endif

#if defined(__GNUC__) && __GNUC__>=2
void OPENSSL_cpuid_setup(void) __attribute__((constructor));
#endif

void
OPENSSL_cpuid_setup(void)
{
#ifndef __OpenBSD__
	char *e;
#endif
#if __ARM_ARCH__ >= 7
	struct sigaction	ill_oact, ill_act;
	sigset_t		oset;
#endif
	static int trigger = 0;

	if (trigger)
		return;
	trigger = 1;

	OPENSSL_armcap_P = 0;

#if __ARM_ARCH__ >= 7
	sigfillset(&all_masked);
	sigdelset(&all_masked, SIGILL);
	sigdelset(&all_masked, SIGTRAP);
	sigdelset(&all_masked, SIGFPE);
	sigdelset(&all_masked, SIGBUS);
	sigdelset(&all_masked, SIGSEGV);

	memset(&ill_act, 0, sizeof(ill_act));
	ill_act.sa_handler = ill_handler;
	ill_act.sa_mask = all_masked;

	sigprocmask(SIG_SETMASK, &ill_act.sa_mask, &oset);
	sigaction(SIGILL, &ill_act, &ill_oact);

	if (sigsetjmp(ill_jmp, 1) == 0) {
		_armv7_neon_probe();
		OPENSSL_armcap_P |= ARMV7_NEON;
	}

	sigaction (SIGILL, &ill_oact, NULL);
	sigprocmask(SIG_SETMASK, &oset, NULL);
#endif
}
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a45 7

#ifndef __OpenBSD__
	if ((e = getenv("OPENSSL_armcap"))) {
		OPENSSL_armcap_P = strtoul(e, NULL, 0);
		return;
	}
#endif
@


1.4
log
@Do not compile the neon probe code until __ARM_ARCH__ >= 7. Neon-specific code
will not get referenced if this condition is not met.
@
text
@d1 1
@


1.3
log
@Remove oh-so-important-from-a-security-pov OpenSSL_rtdsc() function.
@
text
@d12 1
d24 1
d33 1
d35 2
d39 1
d46 1
d51 1
d53 3
a62 2
	OPENSSL_armcap_P = 0;

d77 1
@


1.2
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a22 10
unsigned int _armv7_tick(void);

unsigned int
OPENSSL_rdtsc(void)
{
	if (OPENSSL_armcap_P & ARMV7_TICK)
		return _armv7_tick();
	else
		return 0;
}
a63 4
	}
	if (sigsetjmp(ill_jmp, 1) == 0) {
		_armv7_tick();
		OPENSSL_armcap_P |= ARMV7_TICK;
@


1.1
log
@Initial revision
@
text
@d15 2
a16 1
static void ill_handler (int sig) { siglongjmp(ill_jmp,sig); }
d25 4
a28 3
unsigned int OPENSSL_rdtsc(void)
	{
	if (OPENSSL_armcap_P|ARMV7_TICK)
d32 1
a32 1
	}
d37 4
a40 2
void OPENSSL_cpuid_setup(void)
	{
d42 1
a42 1
	struct sigaction	ill_oact,ill_act;
d44 5
a48 1
	static int trigger=0;
d50 2
a51 6
	if (trigger) return;
	trigger=1;
 
	if ((e=getenv("OPENSSL_armcap")))
		{
		OPENSSL_armcap_P=strtoul(e,NULL,0);
d53 1
a53 1
		}
d56 5
a60 5
	sigdelset(&all_masked,SIGILL);
	sigdelset(&all_masked,SIGTRAP);
	sigdelset(&all_masked,SIGFPE);
	sigdelset(&all_masked,SIGBUS);
	sigdelset(&all_masked,SIGSEGV);
d64 1
a64 1
	memset(&ill_act,0,sizeof(ill_act));
d66 1
a66 1
	ill_act.sa_mask    = all_masked;
d68 2
a69 2
	sigprocmask(SIG_SETMASK,&ill_act.sa_mask,&oset);
	sigaction(SIGILL,&ill_act,&ill_oact);
d71 1
a71 2
	if (sigsetjmp(ill_jmp,1) == 0)
		{
d74 2
a75 3
		}
	if (sigsetjmp(ill_jmp,1) == 0)
		{
d78 1
a78 1
		}
d80 3
a82 3
	sigaction (SIGILL,&ill_oact,NULL);
	sigprocmask(SIG_SETMASK,&oset,NULL);
	}
@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@


1.1.1.2
log
@Import OpenSSL 1.0.1g
@
text
@d26 1
a26 1
	if (OPENSSL_armcap_P & ARMV7_TICK)
@

