head	1.18;
access;
symbols
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18;
locks; strict;
comment	@ * @;


1.18
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.17;
commitid	kT0fLt3r4lroFJra;

1.17
date	2017.01.21.11.00.47;	author beck;	state Exp;
branches;
next	1.16;
commitid	gA67INk6WgIKVogS;

1.16
date	2016.07.07.11.53.12;	author bcook;	state Exp;
branches;
next	1.15;
commitid	eavwKDwtZUNQRWCp;

1.15
date	2016.06.30.02.02.06;	author bcook;	state Exp;
branches;
next	1.14;
commitid	NoRqiDVUjRmOOT9v;

1.14
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.13;
commitid	5KSZBoxiLebzObKt;

1.13
date	2015.02.09.15.49.22;	author jsing;	state Exp;
branches;
next	1.12;
commitid	69Tc75PIK8JcRRsC;

1.12
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.11;
commitid	8tb4v3IC8S2vzfHj;

1.11
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.9;
commitid	nzndm3zqPmFurSaK;

1.9
date	2014.07.10.12.36.58;	author miod;	state Exp;
branches;
next	1.8;
commitid	ODc6hsW8Fl7nwHnx;

1.8
date	2014.07.10.11.35.31;	author jsing;	state Exp;
branches;
next	1.7;
commitid	bYeqwLGUZZ97c5TD;

1.7
date	2014.07.10.07.43.11;	author jsing;	state Exp;
branches;
next	1.6;
commitid	Kf1g3OOqy6sn8Ouy;

1.6
date	2014.07.09.19.51.38;	author jsing;	state Exp;
branches;
next	1.5;
commitid	1XPBWlejiS4drgFK;

1.5
date	2014.07.09.08.20.08;	author miod;	state Exp;
branches;
next	1.4;
commitid	JPwi7kYvSgWTaIWo;

1.4
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2014.04.17.12.14.26;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.15.20.06.10;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.43;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.43;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: rsa_crpt.c,v 1.17 2017/01/21 11:00:47 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/bn.h>
#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/lhash.h>
#include <openssl/rsa.h>

#include "bn_lcl.h"

#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif

int
RSA_size(const RSA *r)
{
	return BN_num_bytes(r->n);
}

int
RSA_public_encrypt(int flen, const unsigned char *from, unsigned char *to,
    RSA *rsa, int padding)
{
	return rsa->meth->rsa_pub_enc(flen, from, to, rsa, padding);
}

int
RSA_private_encrypt(int flen, const unsigned char *from, unsigned char *to,
    RSA *rsa, int padding)
{
	return rsa->meth->rsa_priv_enc(flen, from, to, rsa, padding);
}

int
RSA_private_decrypt(int flen, const unsigned char *from, unsigned char *to,
    RSA *rsa, int padding)
{
	return rsa->meth->rsa_priv_dec(flen, from, to, rsa, padding);
}

int
RSA_public_decrypt(int flen, const unsigned char *from, unsigned char *to,
    RSA *rsa, int padding)
{
	return rsa->meth->rsa_pub_dec(flen, from, to, rsa, padding);
}

int
RSA_flags(const RSA *r)
{
	return r == NULL ? 0 : r->meth->flags;
}

void
RSA_blinding_off(RSA *rsa)
{
	BN_BLINDING_free(rsa->blinding);
	rsa->blinding = NULL;
	rsa->flags |= RSA_FLAG_NO_BLINDING;
}

int
RSA_blinding_on(RSA *rsa, BN_CTX *ctx)
{
	int ret = 0;

	if (rsa->blinding != NULL)
		RSA_blinding_off(rsa);

	rsa->blinding = RSA_setup_blinding(rsa, ctx);
	if (rsa->blinding == NULL)
		goto err;

	rsa->flags &= ~RSA_FLAG_NO_BLINDING;
	ret = 1;
err:
	return (ret);
}

static BIGNUM *
rsa_get_public_exp(const BIGNUM *d, const BIGNUM *p, const BIGNUM *q,
    BN_CTX *ctx)
{
	BIGNUM *ret = NULL, *r0, *r1, *r2;

	if (d == NULL || p == NULL || q == NULL)
		return NULL;

	BN_CTX_start(ctx);
	if ((r0 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((r1 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((r2 = BN_CTX_get(ctx)) == NULL)
		goto err;

	if (!BN_sub(r1, p, BN_value_one()))
		goto err;
	if (!BN_sub(r2, q, BN_value_one()))
		goto err;
	if (!BN_mul(r0, r1, r2, ctx))
		goto err;

	ret = BN_mod_inverse_ct(NULL, d, r0, ctx);
err:
	BN_CTX_end(ctx);
	return ret;
}

BN_BLINDING *
RSA_setup_blinding(RSA *rsa, BN_CTX *in_ctx)
{
	BIGNUM *e;
	BIGNUM n;
	BN_CTX *ctx;
	BN_BLINDING *ret = NULL;

	if (in_ctx == NULL) {
		if ((ctx = BN_CTX_new()) == NULL)
			return 0;
	} else
		ctx = in_ctx;

	BN_CTX_start(ctx);

	if (rsa->e == NULL) {
		e = rsa_get_public_exp(rsa->d, rsa->p, rsa->q, ctx);
		if (e == NULL) {
			RSAerror(RSA_R_NO_PUBLIC_EXPONENT);
			goto err;
		}
	} else
		e = rsa->e;

	BN_init(&n);
	BN_with_flags(&n, rsa->n, BN_FLG_CONSTTIME);

	ret = BN_BLINDING_create_param(NULL, e, &n, ctx, rsa->meth->bn_mod_exp,
	    rsa->_method_mod_n);

	if (ret == NULL) {
		RSAerror(ERR_R_BN_LIB);
		goto err;
	}
	CRYPTO_THREADID_current(BN_BLINDING_thread_id(ret));
err:
	BN_CTX_end(ctx);
	if (in_ctx == NULL)
		BN_CTX_free(ctx);
	if (rsa->e == NULL)
		BN_free(e);

	return ret;
}
@


1.17
log
@Add ct and nonct versions of BN_mod_inverse for internal use
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.16 2016/07/07 11:53:12 bcook Exp $ */
d190 1
a190 2
			RSAerr(RSA_F_RSA_SETUP_BLINDING,
			    RSA_R_NO_PUBLIC_EXPONENT);
d203 1
a203 1
		RSAerr(RSA_F_RSA_SETUP_BLINDING, ERR_R_BN_LIB);
@


1.16
log
@call BN_init on temporaries to avoid use-before-set warnings

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.15 2016/06/30 02:02:06 bcook Exp $ */
d69 2
d165 1
a165 1
	ret = BN_mod_inverse(NULL, d, r0, ctx);
@


1.15
log
@Remove flags for disabling constant-time operations.

This removes support for DSA_FLAG_NO_EXP_CONSTTIME, DH_FLAG_NO_EXP_CONSTTIME,
and RSA_FLAG_NO_CONSTTIME flags, making all of these operations unconditionally
constant-time.

Based on the original patch by CÃ©sar Pereid.  ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.14 2015/02/11 03:19:37 doug Exp $ */
d195 1
@


1.14
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.13 2015/02/09 15:49:22 jsing Exp $ */
d172 2
a173 2
	BIGNUM local_n;
	BIGNUM *e, *n;
d195 1
a195 6
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {
		/* Set BN_FLG_CONSTTIME flag */
		n = &local_n;
		BN_with_flags(n, rsa->n, BN_FLG_CONSTTIME);
	} else
		n = rsa->n;
d197 1
a197 1
	ret = BN_BLINDING_create_param(NULL, e, n, ctx, rsa->meth->bn_mod_exp,
d199 1
@


1.13
log
@BN_CTX_get() can fail - consistently check its return value.

There are currently cases where the return from each call is checked,
the return from only the last call is checked and cases where it is not
checked at all (including code in bn, ec and engine).

Checking the last return value is valid as once the function fails it will
continue to return NULL. However, in order to be consistent check each
call with the same idiom. This makes it easy to verify.

Note there are still a handful of cases that do not follow the idiom -
these will be handled separately.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.12 2014/10/18 17:20:40 jsing Exp $ */
d65 1
@


1.12
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.11 2014/07/11 08:44:49 jsing Exp $ */
d148 5
a152 4
	r0 = BN_CTX_get(ctx);
	r1 = BN_CTX_get(ctx);
	r2 = BN_CTX_get(ctx);
	if (r2 == NULL)
@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.10 2014/07/10 22:45:57 jsing Exp $ */
a65 1
#include <openssl/rand.h>
@


1.10
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.9 2014/07/10 12:36:58 miod Exp $ */
d63 1
a64 1
#include "cryptlib.h"
d66 1
a66 1
#include <openssl/bn.h>
d68 1
a68 1
#include <openssl/rand.h>
@


1.9
log
@RSA_setup_blinding() gets a BN with BN_CTX_get(), returns `out of memory'
if it fails, then never uses it anymore, and may invoke a function which
needs more than one BN from the BN_CTX anyway, so this is pointless - remove
the BN_CTX_get() call and the test.

ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.8 2014/07/10 11:35:31 jsing Exp $ */
d60 3
@


1.8
log
@Stop playing with the RSA_FLAG_BLINDING flag. It does nothing.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.7 2014/07/10 07:43:11 jsing Exp $ */
a179 5
	e = BN_CTX_get(ctx);
	if (e == NULL) {
		RSAerr(RSA_F_RSA_SETUP_BLINDING, ERR_R_MALLOC_FAILURE);
		goto err;
	}
@


1.7
log
@BN_free, BN_clear_free, BN_CTX_free, BN_BLINDING_free and BN_MONT_CTX_free
all have implicit NULL checks, so we do not need them here.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.6 2014/07/09 19:51:38 jsing Exp $ */
a114 1
	rsa->flags &= ~RSA_FLAG_BLINDING;
a129 1
	rsa->flags |= RSA_FLAG_BLINDING;
@


1.6
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.5 2014/07/09 08:20:08 miod Exp $ */
d113 2
a114 4
	if (rsa->blinding != NULL) {
		BN_BLINDING_free(rsa->blinding);
		rsa->blinding = NULL;
	}
@


1.5
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_crpt.c,v 1.4 2014/06/12 15:49:30 deraadt Exp $ */
d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d137 1
a137 1
	return(ret);
d184 1
a184 1
	e  = BN_CTX_get(ctx);
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d70 5
a74 4
int RSA_size(const RSA *r)
	{
	return(BN_num_bytes(r->n));
	}
d76 6
a81 5
int RSA_public_encrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
	{
	return(rsa->meth->rsa_pub_enc(flen, from, to, rsa, padding));
	}
d83 6
a88 5
int RSA_private_encrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
	{
	return(rsa->meth->rsa_priv_enc(flen, from, to, rsa, padding));
	}
d90 6
a95 5
int RSA_private_decrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
	{
	return(rsa->meth->rsa_priv_dec(flen, from, to, rsa, padding));
	}
d97 6
a102 5
int RSA_public_decrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
	{
	return(rsa->meth->rsa_pub_dec(flen, from, to, rsa, padding));
	}
d104 5
a108 4
int RSA_flags(const RSA *r)
	{
	return((r == NULL)?0:r->meth->flags);
	}
d110 4
a113 4
void RSA_blinding_off(RSA *rsa)
	{
	if (rsa->blinding != NULL)
		{
d115 2
a116 2
		rsa->blinding=NULL;
		}
d119 1
a119 1
	}
d121 4
a124 3
int RSA_blinding_on(RSA *rsa, BN_CTX *ctx)
	{
	int ret=0;
d135 1
a135 1
	ret=1;
d138 1
a138 1
	}
d140 3
a142 2
static BIGNUM *rsa_get_public_exp(const BIGNUM *d, const BIGNUM *p,
	const BIGNUM *q, BN_CTX *ctx)
d156 6
a161 3
	if (!BN_sub(r1, p, BN_value_one())) goto err;
	if (!BN_sub(r2, q, BN_value_one())) goto err;
	if (!BN_mul(r0, r1, r2, ctx)) goto err;
d169 2
a170 1
BN_BLINDING *RSA_setup_blinding(RSA *rsa, BN_CTX *in_ctx)
d173 1
a173 1
	BIGNUM *e,*n;
d177 4
a180 5
	if (in_ctx == NULL)
		{
		if ((ctx = BN_CTX_new()) == NULL) return 0;
		}
	else
d185 1
a185 2
	if (e == NULL)
		{
d188 1
a188 1
		}
d190 1
a190 2
	if (rsa->e == NULL)
		{
d192 3
a194 3
		if (e == NULL)
			{
			RSAerr(RSA_F_RSA_SETUP_BLINDING, RSA_R_NO_PUBLIC_EXPONENT);
a195 1
			}
d197 1
a197 1
	else
d200 1
a200 2
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME))
		{
d204 1
a204 2
		}
	else
d207 3
a209 4
	ret = BN_BLINDING_create_param(NULL, e, n, ctx,
			rsa->meth->bn_mod_exp, rsa->_method_mod_n);
	if (ret == NULL)
		{
d212 1
a212 1
		}
d218 1
a218 1
	if(rsa->e == NULL)
@


1.3
log
@Do not feed RSA private key information to the random subsystem as
entropy.  It might be fed to a pluggable random subsystem....

What were they thinking?!

ok guenther
@
text
@d1 1
a1 1
/* crypto/rsa/rsa_lib.c */
@


1.2
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@a191 8
	
	if ((RAND_status() == 0) && rsa->d != NULL && rsa->d->d != NULL)
		{
		/* if PRNG is not properly seeded, resort to secret
		 * exponent as unpredictable seed */
		RAND_add(rsa->d->d, rsa->d->dmax * sizeof rsa->d->d[0], 0.0);
		}

@


1.1
log
@Initial revision
@
text
@a77 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(rsa->meth->flags & RSA_FLAG_FIPS_METHOD)
			&& !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_PUBLIC_ENCRYPT, RSA_R_NON_FIPS_RSA_METHOD);
		return -1;
		}
#endif
a83 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(rsa->meth->flags & RSA_FLAG_FIPS_METHOD)
			&& !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_PRIVATE_ENCRYPT, RSA_R_NON_FIPS_RSA_METHOD);
		return -1;
		}
#endif
a89 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(rsa->meth->flags & RSA_FLAG_FIPS_METHOD)
			&& !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_PRIVATE_DECRYPT, RSA_R_NON_FIPS_RSA_METHOD);
		return -1;
		}
#endif
a95 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(rsa->meth->flags & RSA_FLAG_FIPS_METHOD)
			&& !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_PUBLIC_DECRYPT, RSA_R_NON_FIPS_RSA_METHOD);
		return -1;
		}
#endif
@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@
