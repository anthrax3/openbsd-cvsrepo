head	1.22;
access;
symbols
	OPENBSD_6_1_BASE:1.22;
locks; strict;
comment	@ * @;


1.22
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.21;
commitid	kT0fLt3r4lroFJra;

1.21
date	2017.01.25.06.15.44;	author beck;	state Exp;
branches;
next	1.20;
commitid	99v9zjkNcFwnZcJG;

1.20
date	2017.01.21.11.00.47;	author beck;	state Exp;
branches;
next	1.19;
commitid	gA67INk6WgIKVogS;

1.19
date	2017.01.21.10.38.29;	author beck;	state Exp;
branches;
next	1.18;
commitid	hKAfCRL9IRQ9ENaK;

1.18
date	2016.06.30.02.02.06;	author bcook;	state Exp;
branches;
next	1.17;
commitid	NoRqiDVUjRmOOT9v;

1.17
date	2015.02.09.15.49.22;	author jsing;	state Exp;
branches;
next	1.16;
commitid	69Tc75PIK8JcRRsC;

1.16
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.15;
commitid	yQEL1wOWIearrW15;

1.15
date	2014.07.09.19.51.38;	author jsing;	state Exp;
branches;
next	1.14;
commitid	1XPBWlejiS4drgFK;

1.14
date	2014.07.09.08.20.08;	author miod;	state Exp;
branches;
next	1.13;
commitid	JPwi7kYvSgWTaIWo;

1.13
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.04.15.20.06.10;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.27.05.07.02;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.26;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.58.09;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.15.17.16.32;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.11.39;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.42;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.53;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.16;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.35;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.59;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.10;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.43;	author djm;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: rsa_gen.c,v 1.21 2017/01/25 06:15:44 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */


/* NB: these functions have been "upgraded", the deprecated versions (which are
 * compatibility wrappers using these functions) are in rsa_depr.c.
 * - Geoff
 */

#include <stdio.h>
#include <time.h>

#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/rsa.h>

#include "bn_lcl.h"

static int rsa_builtin_keygen(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb);

/*
 * NB: this wrapper would normally be placed in rsa_lib.c and the static
 * implementation would probably be in rsa_eay.c. Nonetheless, is kept here so
 * that we don't introduce a new linker dependency. Eg. any application that
 * wasn't previously linking object code related to key-generation won't have to
 * now just because key-generation is part of RSA_METHOD.
 */
int
RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
{
	if (rsa->meth->rsa_keygen)
		return rsa->meth->rsa_keygen(rsa, bits, e_value, cb);
	return rsa_builtin_keygen(rsa, bits, e_value, cb);
}

static int
rsa_builtin_keygen(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
{
	BIGNUM *r0 = NULL, *r1 = NULL, *r2 = NULL, *r3 = NULL, *tmp;
	BIGNUM pr0, d, p;
	int bitsp, bitsq, ok = -1, n = 0;
	BN_CTX *ctx = NULL;

	ctx = BN_CTX_new();
	if (ctx == NULL)
		goto err;
	BN_CTX_start(ctx);
	if ((r0 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((r1 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((r2 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((r3 = BN_CTX_get(ctx)) == NULL)
		goto err;

	bitsp = (bits + 1) / 2;
	bitsq = bits - bitsp;

	/* We need the RSA components non-NULL */
	if (!rsa->n && ((rsa->n = BN_new()) == NULL))
		goto err;
	if (!rsa->d && ((rsa->d = BN_new()) == NULL))
		goto err;
	if (!rsa->e && ((rsa->e = BN_new()) == NULL))
		goto err;
	if (!rsa->p && ((rsa->p = BN_new()) == NULL))
		goto err;
	if (!rsa->q && ((rsa->q = BN_new()) == NULL))
		goto err;
	if (!rsa->dmp1 && ((rsa->dmp1 = BN_new()) == NULL))
		goto err;
	if (!rsa->dmq1 && ((rsa->dmq1 = BN_new()) == NULL))
		goto err;
	if (!rsa->iqmp && ((rsa->iqmp = BN_new()) == NULL))
		goto err;

	BN_copy(rsa->e, e_value);

	/* generate p and q */
	for (;;) {
		if (!BN_generate_prime_ex(rsa->p, bitsp, 0, NULL, NULL, cb))
			goto err;
		if (!BN_sub(r2, rsa->p, BN_value_one()))
			goto err;
		if (!BN_gcd_ct(r1, r2, rsa->e, ctx))
			goto err;
		if (BN_is_one(r1))
			break;
		if (!BN_GENCB_call(cb, 2, n++))
			goto err;
	}
	if (!BN_GENCB_call(cb, 3, 0))
		goto err;
	for (;;) {
		/*
		 * When generating ridiculously small keys, we can get stuck
		 * continually regenerating the same prime values. Check for
		 * this and bail if it happens 3 times.
		 */
		unsigned int degenerate = 0;
		do {
			if (!BN_generate_prime_ex(rsa->q, bitsq, 0, NULL, NULL,
			    cb))
				goto err;
		} while (BN_cmp(rsa->p, rsa->q) == 0 &&
		    ++degenerate < 3);
		if (degenerate == 3) {
			ok = 0; /* we set our own err */
			RSAerror(RSA_R_KEY_SIZE_TOO_SMALL);
			goto err;
		}
		if (!BN_sub(r2, rsa->q, BN_value_one()))
			goto err;
		if (!BN_gcd_ct(r1, r2, rsa->e, ctx))
			goto err;
		if (BN_is_one(r1))
			break;
		if (!BN_GENCB_call(cb, 2, n++))
			goto err;
	}
	if (!BN_GENCB_call(cb, 3, 1))
		goto err;
	if (BN_cmp(rsa->p, rsa->q) < 0) {
		tmp = rsa->p;
		rsa->p = rsa->q;
		rsa->q = tmp;
	}

	/* calculate n */
	if (!BN_mul(rsa->n, rsa->p, rsa->q, ctx))
		goto err;

	/* calculate d */
	if (!BN_sub(r1, rsa->p, BN_value_one()))	/* p-1 */
		goto err;
	if (!BN_sub(r2, rsa->q, BN_value_one()))	/* q-1 */
		goto err;
	if (!BN_mul(r0, r1, r2, ctx))			/* (p-1)(q-1) */
		goto err;

	BN_with_flags(&pr0, r0, BN_FLG_CONSTTIME);

	if (!BN_mod_inverse_ct(rsa->d, rsa->e, &pr0, ctx)) /* d */
		goto err;

	/* set up d for correct BN_FLG_CONSTTIME flag */
	BN_with_flags(&d, rsa->d, BN_FLG_CONSTTIME);

	/* calculate d mod (p-1) */
	if (!BN_mod_ct(rsa->dmp1, &d, r1, ctx))
		goto err;

	/* calculate d mod (q-1) */
	if (!BN_mod_ct(rsa->dmq1, &d, r2, ctx))
		goto err;

	/* calculate inverse of q mod p */
	BN_with_flags(&p, rsa->p, BN_FLG_CONSTTIME);
	if (!BN_mod_inverse_ct(rsa->iqmp, rsa->q, &p, ctx))
		goto err;

	ok = 1;
err:
	if (ok == -1) {
		RSAerror(ERR_LIB_BN);
		ok = 0;
	}
	if (ctx != NULL) {
		BN_CTX_end(ctx);
		BN_CTX_free(ctx);
	}

	return ok;
}
@


1.21
log
@Construct a BN_gcd_nonct, based on BN_mod_inverse_no_branch, as suggested
by Alejandro Cabrera <aldaya@@gmail.com> to avoid the possibility of a
sidechannel timing attack during RSA private key generation.

Modify BN_gcd to become not visible under LIBRESSL_INTERNAL and force
the use of the _ct or _nonct versions of the function only within
the library.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_gen.c,v 1.20 2017/01/21 11:00:47 beck Exp $ */
d165 1
a165 2
			RSAerr(RSA_F_RSA_BUILTIN_KEYGEN,
			    RSA_R_KEY_SIZE_TOO_SMALL);
d221 1
a221 1
		RSAerr(RSA_F_RSA_BUILTIN_KEYGEN, ERR_LIB_BN);
@


1.20
log
@Add ct and nonct versions of BN_mod_inverse for internal use
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_gen.c,v 1.19 2017/01/21 10:38:29 beck Exp $ */
d141 1
a141 1
		if (!BN_gcd(r1, r2, rsa->e, ctx))
d171 1
a171 1
		if (!BN_gcd(r1, r2, rsa->e, ctx))
@


1.19
log
@Split out BN_div and BN_mod into ct and nonct versions for Internal use.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_gen.c,v 1.18 2016/06/30 02:02:06 bcook Exp $ */
d200 1
a200 1
	if (!BN_mod_inverse(rsa->d, rsa->e, &pr0, ctx)) /* d */
d216 1
a216 1
	if (!BN_mod_inverse(rsa->iqmp, rsa->q, &p, ctx))
@


1.18
log
@Remove flags for disabling constant-time operations.

This removes support for DSA_FLAG_NO_EXP_CONSTTIME, DH_FLAG_NO_EXP_CONSTTIME,
and RSA_FLAG_NO_CONSTTIME flags, making all of these operations unconditionally
constant-time.

Based on the original patch by César Pereid.  ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_gen.c,v 1.17 2015/02/09 15:49:22 jsing Exp $ */
d72 2
d207 1
a207 1
	if (!BN_mod(rsa->dmp1, &d, r1, ctx))
d211 1
a211 1
	if (!BN_mod(rsa->dmq1, &d, r2, ctx))
@


1.17
log
@BN_CTX_get() can fail - consistently check its return value.

There are currently cases where the return from each call is checked,
the return from only the last call is checked and cases where it is not
checked at all (including code in bn, ec and engine).

Checking the last return value is valid as once the function fails it will
continue to return NULL. However, in order to be consistent check each
call with the same idiom. This makes it easy to verify.

Note there are still a handful of cases that do not follow the idiom -
these will be handled separately.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_gen.c,v 1.16 2014/07/11 08:44:49 jsing Exp $ */
d93 1
a93 2
	BIGNUM local_r0, local_d, local_p;
	BIGNUM *pr0, *d, *p;
d195 4
a198 6
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {
		pr0 = &local_r0;
		BN_with_flags(pr0, r0, BN_FLG_CONSTTIME);
	} else
		pr0 = r0;
	if (!BN_mod_inverse(rsa->d, rsa->e, pr0, ctx))	/* d */
d202 1
a202 5
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {
		d = &local_d;
		BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);
	} else
		d = rsa->d;
d205 1
a205 1
	if (!BN_mod(rsa->dmp1, d, r1, ctx))
d209 1
a209 1
	if (!BN_mod(rsa->dmq1, d, r2, ctx))
d213 2
a214 6
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {
		p = &local_p;
		BN_with_flags(p, rsa->p, BN_FLG_CONSTTIME);
	} else
		p = rsa->p;
	if (!BN_mod_inverse(rsa->iqmp, rsa->q, p, ctx))
@


1.16
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_gen.c,v 1.15 2014/07/09 19:51:38 jsing Exp $ */
d102 7
a108 5
	r0 = BN_CTX_get(ctx);
	r1 = BN_CTX_get(ctx);
	r2 = BN_CTX_get(ctx);
	r3 = BN_CTX_get(ctx);
	if (r3 == NULL)
@


1.15
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_gen.c,v 1.14 2014/07/09 08:20:08 miod Exp $ */
d67 1
a67 1
#include "cryptlib.h"
d69 1
@


1.14
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_gen.c,v 1.13 2014/06/12 15:49:30 deraadt Exp $ */
d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d157 2
a158 2
			} while (BN_cmp(rsa->p, rsa->q) == 0 &&
			    ++degenerate < 3);
d176 1
a176 1
	if (BN_cmp(rsa->p,rsa->q) < 0) {
d194 2
a195 2
		  pr0 = &local_r0;
		  BN_with_flags(pr0, r0, BN_FLG_CONSTTIME);
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d73 2
a74 1
/* NB: this wrapper would normally be placed in rsa_lib.c and the static
d78 6
a83 4
 * now just because key-generation is part of RSA_METHOD. */
int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
	{
	if(rsa->meth->rsa_keygen)
d86 1
a86 1
	}
d88 8
a95 7
static int rsa_builtin_keygen(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
	{
	BIGNUM *r0=NULL,*r1=NULL,*r2=NULL,*r3=NULL,*tmp;
	BIGNUM local_r0,local_d,local_p;
	BIGNUM *pr0,*d,*p;
	int bitsp,bitsq,ok= -1,n=0;
	BN_CTX *ctx=NULL;
d97 3
a99 2
	ctx=BN_CTX_new();
	if (ctx == NULL) goto err;
d105 2
a106 1
	if (r3 == NULL) goto err;
d108 2
a109 2
	bitsp=(bits+1)/2;
	bitsq=bits-bitsp;
d112 16
a127 8
	if(!rsa->n && ((rsa->n=BN_new()) == NULL)) goto err;
	if(!rsa->d && ((rsa->d=BN_new()) == NULL)) goto err;
	if(!rsa->e && ((rsa->e=BN_new()) == NULL)) goto err;
	if(!rsa->p && ((rsa->p=BN_new()) == NULL)) goto err;
	if(!rsa->q && ((rsa->q=BN_new()) == NULL)) goto err;
	if(!rsa->dmp1 && ((rsa->dmp1=BN_new()) == NULL)) goto err;
	if(!rsa->dmq1 && ((rsa->dmq1=BN_new()) == NULL)) goto err;
	if(!rsa->iqmp && ((rsa->iqmp=BN_new()) == NULL)) goto err;
d132 10
a141 8
	for (;;)
		{
		if(!BN_generate_prime_ex(rsa->p, bitsp, 0, NULL, NULL, cb))
			goto err;
		if (!BN_sub(r2,rsa->p,BN_value_one())) goto err;
		if (!BN_gcd(r1,r2,rsa->e,ctx)) goto err;
		if (BN_is_one(r1)) break;
		if(!BN_GENCB_call(cb, 2, n++))
d143 2
a144 2
		}
	if(!BN_GENCB_call(cb, 3, 0))
d146 3
a148 3
	for (;;)
		{
		/* When generating ridiculously small keys, we can get stuck
d150 2
a151 1
		 * this and bail if it happens 3 times. */
d153 3
a155 3
		do
			{
			if(!BN_generate_prime_ex(rsa->q, bitsq, 0, NULL, NULL, cb))
d157 3
a159 3
			} while((BN_cmp(rsa->p, rsa->q) == 0) && (++degenerate < 3));
		if(degenerate == 3)
			{
d161 7
a167 1
			RSAerr(RSA_F_RSA_BUILTIN_KEYGEN,RSA_R_KEY_SIZE_TOO_SMALL);
a168 3
			}
		if (!BN_sub(r2,rsa->q,BN_value_one())) goto err;
		if (!BN_gcd(r1,r2,rsa->e,ctx)) goto err;
d171 1
a171 1
		if(!BN_GENCB_call(cb, 2, n++))
d173 2
a174 2
		}
	if(!BN_GENCB_call(cb, 3, 1))
d176 5
a180 6
	if (BN_cmp(rsa->p,rsa->q) < 0)
		{
		tmp=rsa->p;
		rsa->p=rsa->q;
		rsa->q=tmp;
		}
d183 2
a184 1
	if (!BN_mul(rsa->n,rsa->p,rsa->q,ctx)) goto err;
d187 7
a193 5
	if (!BN_sub(r1,rsa->p,BN_value_one())) goto err;	/* p-1 */
	if (!BN_sub(r2,rsa->q,BN_value_one())) goto err;	/* q-1 */
	if (!BN_mul(r0,r1,r2,ctx)) goto err;	/* (p-1)(q-1) */
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME))
		{
d196 4
a199 4
		}
	else
	  pr0 = r0;
	if (!BN_mod_inverse(rsa->d,rsa->e,pr0,ctx)) goto err;	/* d */
d202 1
a202 2
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME))
		{
d205 1
a205 2
		}
	else
d209 2
a210 1
	if (!BN_mod(rsa->dmp1,d,r1,ctx)) goto err;
d213 2
a214 1
	if (!BN_mod(rsa->dmq1,d,r2,ctx)) goto err;
d217 1
a217 2
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME))
		{
d220 1
a220 2
		}
	else
d222 2
a223 1
	if (!BN_mod_inverse(rsa->iqmp,rsa->q,p,ctx)) goto err;
d225 1
a225 1
	ok=1;
d227 5
a231 7
	if (ok == -1)
		{
		RSAerr(RSA_F_RSA_BUILTIN_KEYGEN,ERR_LIB_BN);
		ok=0;
		}
	if (ctx != NULL)
		{
d234 1
a234 1
		}
d237 1
a237 2
	}

@


1.12
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d1 1
a1 1
/* crypto/rsa/rsa_gen.c */
@


1.11
log
@resolve conflicts
@
text
@a69 3
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif
a79 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(rsa->meth->flags & RSA_FLAG_FIPS_METHOD)
			&& !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_GENERATE_KEY_EX, RSA_R_NON_FIPS_RSA_METHOD);
		return 0;
		}
#endif
a81 4
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		return FIPS_rsa_generate_key_ex(rsa, bits, e_value, cb);
#endif
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d70 3
d83 8
d93 4
@


1.9
log
@resolve conflicts
@
text
@a70 2
#ifndef OPENSSL_FIPS

a219 1
#endif
@


1.8
log
@resolve conflicts
@
text
@d71 2
d222 1
@


1.7
log
@resolve conflicts
@
text
@d59 6
d71 1
a71 1
#ifndef OPENSSL_FIPS
d73 13
a85 2
RSA *RSA_generate_key(int bits, unsigned long e_value,
	     void (*callback)(int,int,void *), void *cb_arg)
a86 1
	RSA *rsa=NULL;
d88 4
a91 2
	int bitsp,bitsq,ok= -1,n=0,i;
	BN_CTX *ctx=NULL,*ctx2=NULL;
a94 2
	ctx2=BN_CTX_new();
	if (ctx2 == NULL) goto err;
a103 2
	rsa=RSA_new();
	if (rsa == NULL) goto err;
d105 11
a115 15
	/* set e */ 
	rsa->e=BN_new();
	if (rsa->e == NULL) goto err;

#if 1
	/* The problem is when building with 8, 16, or 32 BN_ULONG,
	 * unsigned long can be larger */
	for (i=0; i<sizeof(unsigned long)*8; i++)
		{
		if (e_value & (1UL<<i))
			BN_set_bit(rsa->e,i);
		}
#else
	if (!BN_set_word(rsa->e,e_value)) goto err;
#endif
d120 2
a121 2
		rsa->p=BN_generate_prime(NULL,bitsp,0,NULL,NULL,callback,cb_arg);
		if (rsa->p == NULL) goto err;
d125 2
a126 2
		if (callback != NULL) callback(2,n++,cb_arg);
		BN_free(rsa->p);
d128 2
a129 1
	if (callback != NULL) callback(3,0,cb_arg);
d132 15
a146 2
		rsa->q=BN_generate_prime(NULL,bitsq,0,NULL,NULL,callback,cb_arg);
		if (rsa->q == NULL) goto err;
d149 1
a149 1
		if (BN_is_one(r1) && (BN_cmp(rsa->p,rsa->q) != 0))
d151 2
a152 2
		if (callback != NULL) callback(2,n++,cb_arg);
		BN_free(rsa->q);
d154 2
a155 1
	if (callback != NULL) callback(3,1,cb_arg);
a163 2
	rsa->n=BN_new();
	if (rsa->n == NULL) goto err;
d170 8
d179 2
a180 2
/* should not be needed, since gcd(p-1,e) == 1 and gcd(q-1,e) == 1 */
/*	for (;;)
d182 2
a183 10
		if (!BN_gcd(r3,r0,rsa->e,ctx)) goto err;
		if (BN_is_one(r3)) break;

		if (1)
			{
			if (!BN_add_word(rsa->e,2L)) goto err;
			continue;
			}
		RSAerr(RSA_F_RSA_GENERATE_KEY,RSA_R_BAD_E_VALUE);
		goto err;
d185 2
a186 3
*/
	rsa->d=BN_mod_inverse(NULL,rsa->e,r0,ctx2);	/* d */
	if (rsa->d == NULL) goto err;
d189 1
a189 3
	rsa->dmp1=BN_new();
	if (rsa->dmp1 == NULL) goto err;
	if (!BN_mod(rsa->dmp1,rsa->d,r1,ctx)) goto err;
d192 1
a192 3
	rsa->dmq1=BN_new();
	if (rsa->dmq1 == NULL) goto err;
	if (!BN_mod(rsa->dmq1,rsa->d,r2,ctx)) goto err;
d195 8
a202 2
	rsa->iqmp=BN_mod_inverse(NULL,rsa->q,rsa->p,ctx2);
	if (rsa->iqmp == NULL) goto err;
d208 1
a208 1
		RSAerr(RSA_F_RSA_GENERATE_KEY,ERR_LIB_BN);
d212 1
d214 1
a214 7
	BN_CTX_free(ctx);
	BN_CTX_free(ctx2);
	
	if (!ok)
		{
		if (rsa != NULL) RSA_free(rsa);
		return(NULL);
d216 2
a217 2
	else
		return(rsa);
a219 1
#endif
@


1.6
log
@resolve conflicts
@
text
@d187 2
a188 1
	BN_CTX_end(ctx);
@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@d65 2
d200 1
@


1.4
log
@RSA goes in tree for next our next release, as it will be after
Sept 21.  Note: This means you shouldn't really be running -current
for anything in the United States. Either wait for Sept 21, or for the
next release, or move to the free world :)
@
text
@d98 1
a98 1
		if (e_value & (1<<i))
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d77 6
d84 4
a87 3
	/* Body of this routine removed for OpenBSD - will return
	 * when the RSA patent expires
	 */
d89 90
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d88 1
@


1.1
log
@Initial revision
@
text
@d62 2
a63 2
#include "bn.h"
#include "rsa.h"
d65 2
a66 5
RSA *RSA_generate_key(bits, e_value, callback,cb_arg)
int bits;
unsigned long e_value;
void (*callback)(P_I_I_P);
char *cb_arg;
d70 1
a70 1
	int bitsp,bitsq,ok= -1,n=0;
d81 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 2
a63 2
#include <openssl/bn.h>
#include <openssl/rsa.h>
d65 5
a69 2
RSA *RSA_generate_key(int bits, unsigned long e_value,
	     void (*callback)(int,int,void *), void *cb_arg)
d73 1
a73 1
	int bitsp,bitsq,ok= -1,n=0,i;
a79 6
	BN_CTX_start(ctx);
	r0 = BN_CTX_get(ctx);
	r1 = BN_CTX_get(ctx);
	r2 = BN_CTX_get(ctx);
	r3 = BN_CTX_get(ctx);
	if (r3 == NULL) goto err;
d81 3
a83 95
	bitsp=(bits+1)/2;
	bitsq=bits-bitsp;
	rsa=RSA_new();
	if (rsa == NULL) goto err;

	/* set e */ 
	rsa->e=BN_new();
	if (rsa->e == NULL) goto err;

#if 1
	/* The problem is when building with 8, 16, or 32 BN_ULONG,
	 * unsigned long can be larger */
	for (i=0; i<sizeof(unsigned long)*8; i++)
		{
		if (e_value & (1UL<<i))
			BN_set_bit(rsa->e,i);
		}
#else
	if (!BN_set_word(rsa->e,e_value)) goto err;
#endif

	/* generate p and q */
	for (;;)
		{
		rsa->p=BN_generate_prime(NULL,bitsp,0,NULL,NULL,callback,cb_arg);
		if (rsa->p == NULL) goto err;
		if (!BN_sub(r2,rsa->p,BN_value_one())) goto err;
		if (!BN_gcd(r1,r2,rsa->e,ctx)) goto err;
		if (BN_is_one(r1)) break;
		if (callback != NULL) callback(2,n++,cb_arg);
		BN_free(rsa->p);
		}
	if (callback != NULL) callback(3,0,cb_arg);
	for (;;)
		{
		rsa->q=BN_generate_prime(NULL,bitsq,0,NULL,NULL,callback,cb_arg);
		if (rsa->q == NULL) goto err;
		if (!BN_sub(r2,rsa->q,BN_value_one())) goto err;
		if (!BN_gcd(r1,r2,rsa->e,ctx)) goto err;
		if (BN_is_one(r1) && (BN_cmp(rsa->p,rsa->q) != 0))
			break;
		if (callback != NULL) callback(2,n++,cb_arg);
		BN_free(rsa->q);
		}
	if (callback != NULL) callback(3,1,cb_arg);
	if (BN_cmp(rsa->p,rsa->q) < 0)
		{
		tmp=rsa->p;
		rsa->p=rsa->q;
		rsa->q=tmp;
		}

	/* calculate n */
	rsa->n=BN_new();
	if (rsa->n == NULL) goto err;
	if (!BN_mul(rsa->n,rsa->p,rsa->q,ctx)) goto err;

	/* calculate d */
	if (!BN_sub(r1,rsa->p,BN_value_one())) goto err;	/* p-1 */
	if (!BN_sub(r2,rsa->q,BN_value_one())) goto err;	/* q-1 */
	if (!BN_mul(r0,r1,r2,ctx)) goto err;	/* (p-1)(q-1) */

/* should not be needed, since gcd(p-1,e) == 1 and gcd(q-1,e) == 1 */
/*	for (;;)
		{
		if (!BN_gcd(r3,r0,rsa->e,ctx)) goto err;
		if (BN_is_one(r3)) break;

		if (1)
			{
			if (!BN_add_word(rsa->e,2L)) goto err;
			continue;
			}
		RSAerr(RSA_F_RSA_GENERATE_KEY,RSA_R_BAD_E_VALUE);
		goto err;
		}
*/
	rsa->d=BN_mod_inverse(NULL,rsa->e,r0,ctx2);	/* d */
	if (rsa->d == NULL) goto err;

	/* calculate d mod (p-1) */
	rsa->dmp1=BN_new();
	if (rsa->dmp1 == NULL) goto err;
	if (!BN_mod(rsa->dmp1,rsa->d,r1,ctx)) goto err;

	/* calculate d mod (q-1) */
	rsa->dmq1=BN_new();
	if (rsa->dmq1 == NULL) goto err;
	if (!BN_mod(rsa->dmq1,rsa->d,r2,ctx)) goto err;

	/* calculate inverse of q mod p */
	rsa->iqmp=BN_mod_inverse(NULL,rsa->q,rsa->p,ctx2);
	if (rsa->iqmp == NULL) goto err;

	ok=1;
a89 1
	BN_CTX_end(ctx);
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a64 2
#ifndef OPENSSL_FIPS

a197 1
#endif
@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@d187 1
a187 2
	if (ctx != NULL)
		BN_CTX_end(ctx);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@a58 6

/* NB: these functions have been "upgraded", the deprecated versions (which are
 * compatibility wrappers using these functions) are in rsa_depr.c.
 * - Geoff
 */

d65 1
a65 1
static int rsa_builtin_keygen(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb);
d67 2
a68 13
/* NB: this wrapper would normally be placed in rsa_lib.c and the static
 * implementation would probably be in rsa_eay.c. Nonetheless, is kept here so
 * that we don't introduce a new linker dependency. Eg. any application that
 * wasn't previously linking object code related to key-generation won't have to
 * now just because key-generation is part of RSA_METHOD. */
int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
	{
	if(rsa->meth->rsa_keygen)
		return rsa->meth->rsa_keygen(rsa, bits, e_value, cb);
	return rsa_builtin_keygen(rsa, bits, e_value, cb);
	}

static int rsa_builtin_keygen(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
d70 1
d72 2
a73 4
	BIGNUM local_r0,local_d,local_p;
	BIGNUM *pr0,*d,*p;
	int bitsp,bitsq,ok= -1,n=0;
	BN_CTX *ctx=NULL;
d77 2
d88 2
d91 15
a105 11
	/* We need the RSA components non-NULL */
	if(!rsa->n && ((rsa->n=BN_new()) == NULL)) goto err;
	if(!rsa->d && ((rsa->d=BN_new()) == NULL)) goto err;
	if(!rsa->e && ((rsa->e=BN_new()) == NULL)) goto err;
	if(!rsa->p && ((rsa->p=BN_new()) == NULL)) goto err;
	if(!rsa->q && ((rsa->q=BN_new()) == NULL)) goto err;
	if(!rsa->dmp1 && ((rsa->dmp1=BN_new()) == NULL)) goto err;
	if(!rsa->dmq1 && ((rsa->dmq1=BN_new()) == NULL)) goto err;
	if(!rsa->iqmp && ((rsa->iqmp=BN_new()) == NULL)) goto err;

	BN_copy(rsa->e, e_value);
d110 2
a111 2
		if(!BN_generate_prime_ex(rsa->p, bitsp, 0, NULL, NULL, cb))
			goto err;
d115 2
a116 2
		if(!BN_GENCB_call(cb, 2, n++))
			goto err;
d118 1
a118 2
	if(!BN_GENCB_call(cb, 3, 0))
		goto err;
d121 2
a122 15
		/* When generating ridiculously small keys, we can get stuck
		 * continually regenerating the same prime values. Check for
		 * this and bail if it happens 3 times. */
		unsigned int degenerate = 0;
		do
			{
			if(!BN_generate_prime_ex(rsa->q, bitsq, 0, NULL, NULL, cb))
				goto err;
			} while((BN_cmp(rsa->p, rsa->q) == 0) && (++degenerate < 3));
		if(degenerate == 3)
			{
			ok = 0; /* we set our own err */
			RSAerr(RSA_F_RSA_BUILTIN_KEYGEN,RSA_R_KEY_SIZE_TOO_SMALL);
			goto err;
			}
d125 1
a125 1
		if (BN_is_one(r1))
d127 2
a128 2
		if(!BN_GENCB_call(cb, 2, n++))
			goto err;
d130 1
a130 2
	if(!BN_GENCB_call(cb, 3, 1))
		goto err;
d139 2
d147 3
a149 1
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME))
d151 2
a152 6
		  pr0 = &local_r0;
		  BN_with_flags(pr0, r0, BN_FLG_CONSTTIME);
		}
	else
	  pr0 = r0;
	if (!BN_mod_inverse(rsa->d,rsa->e,pr0,ctx)) goto err;	/* d */
d154 7
a160 5
	/* set up d for correct BN_FLG_CONSTTIME flag */
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME))
		{
		d = &local_d;
		BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);
d162 3
a164 2
	else
		d = rsa->d;
d167 3
a169 1
	if (!BN_mod(rsa->dmp1,d,r1,ctx)) goto err;
d172 3
a174 1
	if (!BN_mod(rsa->dmq1,d,r2,ctx)) goto err;
d177 2
a178 8
	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME))
		{
		p = &local_p;
		BN_with_flags(p, rsa->p, BN_FLG_CONSTTIME);
		}
	else
		p = rsa->p;
	if (!BN_mod_inverse(rsa->iqmp,rsa->q,p,ctx)) goto err;
d184 1
a184 1
		RSAerr(RSA_F_RSA_BUILTIN_KEYGEN,ERR_LIB_BN);
d188 5
d194 2
a195 2
		BN_CTX_end(ctx);
		BN_CTX_free(ctx);
d197 2
a198 2

	return ok;
d201 1
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a70 2
#ifndef OPENSSL_FIPS

a219 1
#endif
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d71 2
d222 1
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a69 3
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif
a79 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(rsa->meth->flags & RSA_FLAG_FIPS_METHOD)
			&& !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_GENERATE_KEY_EX, RSA_R_NON_FIPS_RSA_METHOD);
		return 0;
		}
#endif
a81 4
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		return FIPS_rsa_generate_key_ex(rsa, bits, e_value, cb);
#endif
@


