head	1.8;
access;
symbols
	butholakala:1.4
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.4.0.24
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.20
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.18
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.16
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.4.0.12
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.26
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.24
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.22
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.20
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.18
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.09.08.44.53;	author miod;	state dead;
branches;
next	1.7;
commitid	KbL8PrMGlaveisds;

1.7
date	2014.07.09.08.20.08;	author miod;	state Exp;
branches;
next	1.6;
commitid	JPwi7kYvSgWTaIWo;

1.6
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.04.27.20.26.49;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.16;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.11.39;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.53;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.59;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@RSA_NULL used to be a compile option allowing the RSA interfaces to be
compiled-in, with nonfunctional code, to be able to cope with the RSA
patent.

However, we don't use this option, and the RSA patent has expired more than 10
years ago, so just drop this piece.
@
text
@/* $OpenBSD: rsa_null.c,v 1.7 2014/07/09 08:20:08 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include "cryptlib.h"
#include <openssl/bn.h>
#include <openssl/rsa.h>
#include <openssl/rand.h>

/*
 * This is a dummy RSA implementation that just returns errors when called.
 * It is designed to allow some RSA functions to work while stopping those
 * covered by the RSA patent. That is RSA, encryption, decryption, signing
 * and verify is not allowed but RSA key generation, key checking and other
 * operations (like storing RSA keys) are permitted.
 */

static int RSA_null_public_encrypt(int flen, const unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_null_private_encrypt(int flen, const unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_null_public_decrypt(int flen, const unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_null_private_decrypt(int flen, const unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
#if 0 /* not currently used */
static int RSA_null_mod_exp(const BIGNUM *r0, const BIGNUM *i, RSA *rsa);
#endif
static int RSA_null_init(RSA *rsa);
static int RSA_null_finish(RSA *rsa);
static RSA_METHOD rsa_null_meth = {
	.name = "Null RSA",
	.rsa_pub_enc = RSA_null_public_encrypt,
	.rsa_pub_dec = RSA_null_public_decrypt,
	.rsa_priv_enc = RSA_null_private_encrypt,
	.rsa_priv_dec = RSA_null_private_decrypt,
	.init = RSA_null_init,
	.finish = RSA_null_finish,
};

const RSA_METHOD *
RSA_null_method(void)
{
	return &rsa_null_meth;
}

static int
RSA_null_public_encrypt(int flen, const unsigned char *from, unsigned char *to,
    RSA *rsa, int padding)
{
	RSAerr(RSA_F_RSA_NULL_PUBLIC_ENCRYPT,
	    RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
	return -1;
}

static int
RSA_null_private_encrypt(int flen, const unsigned char *from, unsigned char *to,
    RSA *rsa, int padding)
{
	RSAerr(RSA_F_RSA_NULL_PRIVATE_ENCRYPT,
	    RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
	return -1;
}

static int
RSA_null_private_decrypt(int flen, const unsigned char *from, unsigned char *to,
    RSA *rsa, int padding)
{
	RSAerr(RSA_F_RSA_NULL_PRIVATE_DECRYPT,
	    RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
	return -1;
}

static int
RSA_null_public_decrypt(int flen, const unsigned char *from, unsigned char *to,
    RSA *rsa, int padding)
{
	RSAerr(RSA_F_RSA_NULL_PUBLIC_DECRYPT,
	    RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
	return -1;
}

#if 0 /* not currently used */
static int
RSA_null_mod_exp(BIGNUM *r0, BIGNUM *I, RSA *rsa)
{
	...err(RSA_F_RSA_NULL_MOD_EXP, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
	return -1;
}
#endif

static int
RSA_null_init(RSA *rsa)
{
	return 1;
}

static int
RSA_null_finish(RSA *rsa)
{
	return 1;
}
@


1.7
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_null.c,v 1.6 2014/06/12 15:49:30 deraadt Exp $ */
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d65 2
a66 1
/* This is a dummy RSA implementation that just returns errors when called.
d96 12
a107 9
const RSA_METHOD *RSA_null_method(void)
	{
	return(&rsa_null_meth);
	}

static int RSA_null_public_encrypt(int flen, const unsigned char *from,
	     unsigned char *to, RSA *rsa, int padding)
	{
	RSAerr(RSA_F_RSA_NULL_PUBLIC_ENCRYPT, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d109 1
a109 1
	}
d111 6
a116 4
static int RSA_null_private_encrypt(int flen, const unsigned char *from,
	     unsigned char *to, RSA *rsa, int padding)
	{
	RSAerr(RSA_F_RSA_NULL_PRIVATE_ENCRYPT, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d118 1
a118 1
	}
d120 6
a125 4
static int RSA_null_private_decrypt(int flen, const unsigned char *from,
	     unsigned char *to, RSA *rsa, int padding)
	{
	RSAerr(RSA_F_RSA_NULL_PRIVATE_DECRYPT, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d127 1
a127 1
	}
d129 6
a134 4
static int RSA_null_public_decrypt(int flen, const unsigned char *from,
	     unsigned char *to, RSA *rsa, int padding)
	{
	RSAerr(RSA_F_RSA_NULL_PUBLIC_DECRYPT, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d136 1
a136 1
	}
d139 3
a141 2
static int RSA_null_mod_exp(BIGNUM *r0, BIGNUM *I, RSA *rsa)
	{
d144 1
a144 1
	}
d147 11
a157 9
static int RSA_null_init(RSA *rsa)
	{
	return(1);
	}

static int RSA_null_finish(RSA *rsa)
	{
	return(1);
	}
@


1.5
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/* rsa_null.c */
@


1.4
log
@resolve conflicts
@
text
@d85 9
a93 16
static RSA_METHOD rsa_null_meth={
	"Null RSA",
	RSA_null_public_encrypt,
	RSA_null_public_decrypt,
	RSA_null_private_encrypt,
	RSA_null_private_decrypt,
	NULL,
	NULL,
	RSA_null_init,
	RSA_null_finish,
	0,
	NULL,
	NULL,
	NULL,
	NULL
	};
@


1.3
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d97 3
d110 1
a110 1
	RSAerr(RSA_F_RSA_NULL, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d117 1
a117 1
	RSAerr(RSA_F_RSA_NULL, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d124 1
a124 1
	RSAerr(RSA_F_RSA_NULL, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d131 1
a131 1
	RSAerr(RSA_F_RSA_NULL, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d138 1
a138 1
	RSAerr(RSA_F_RSA_NULL, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
a151 2


@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d72 1
a72 1
static int RSA_null_public_encrypt(int flen, unsigned char *from,
d74 1
a74 1
static int RSA_null_private_encrypt(int flen, unsigned char *from,
d76 1
a76 1
static int RSA_null_public_decrypt(int flen, unsigned char *from,
d78 1
a78 1
static int RSA_null_private_decrypt(int flen, unsigned char *from,
d81 1
a81 1
static int RSA_null_mod_exp(BIGNUM *r0, BIGNUM *i, RSA *rsa);
d91 2
a92 1
	NULL, NULL,
d99 1
a99 1
RSA_METHOD *RSA_null_method(void)
d104 1
a104 1
static int RSA_null_public_encrypt(int flen, unsigned char *from,
d111 1
a111 1
static int RSA_null_private_encrypt(int flen, unsigned char *from,
d118 1
a118 1
static int RSA_null_private_decrypt(int flen, unsigned char *from,
d125 1
a125 1
static int RSA_null_public_decrypt(int flen, unsigned char *from,
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d72 1
a72 1
static int RSA_null_public_encrypt(int flen, const unsigned char *from,
d74 1
a74 1
static int RSA_null_private_encrypt(int flen, const unsigned char *from,
d76 1
a76 1
static int RSA_null_public_decrypt(int flen, const unsigned char *from,
d78 1
a78 1
static int RSA_null_private_decrypt(int flen, const unsigned char *from,
d81 1
a81 1
static int RSA_null_mod_exp(const BIGNUM *r0, const BIGNUM *i, RSA *rsa);
d91 1
a91 2
	NULL,
	NULL,
d98 1
a98 1
const RSA_METHOD *RSA_null_method(void)
d103 1
a103 1
static int RSA_null_public_encrypt(int flen, const unsigned char *from,
d110 1
a110 1
static int RSA_null_private_encrypt(int flen, const unsigned char *from,
d117 1
a117 1
static int RSA_null_private_decrypt(int flen, const unsigned char *from,
d124 1
a124 1
static int RSA_null_public_decrypt(int flen, const unsigned char *from,
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@a96 3
	NULL,
	NULL,
	NULL
d107 1
a107 1
	RSAerr(RSA_F_RSA_NULL_PUBLIC_ENCRYPT, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d114 1
a114 1
	RSAerr(RSA_F_RSA_NULL_PRIVATE_ENCRYPT, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d121 1
a121 1
	RSAerr(RSA_F_RSA_NULL_PRIVATE_DECRYPT, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d128 1
a128 1
	RSAerr(RSA_F_RSA_NULL_PUBLIC_DECRYPT, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d135 1
a135 1
	...err(RSA_F_RSA_NULL_MOD_EXP, RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
d149 2
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


