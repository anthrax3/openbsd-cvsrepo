head	1.31;
access;
symbols;
locks; strict;
comment	@ * @;


1.31
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.30;
commitid	kT0fLt3r4lroFJra;

1.30
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.29;
commitid	5KSZBoxiLebzObKt;

1.29
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.28;
commitid	8tb4v3IC8S2vzfHj;

1.28
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.27;
commitid	yQEL1wOWIearrW15;

1.27
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.26;
commitid	nzndm3zqPmFurSaK;

1.26
date	2014.07.10.07.43.11;	author jsing;	state Exp;
branches;
next	1.25;
commitid	Kf1g3OOqy6sn8Ouy;

1.25
date	2014.07.09.19.51.38;	author jsing;	state Exp;
branches;
next	1.24;
commitid	1XPBWlejiS4drgFK;

1.24
date	2014.07.09.11.10.51;	author bcook;	state Exp;
branches;
next	1.23;
commitid	lHJTcoC4c5BhEOGj;

1.23
date	2014.07.09.08.55.32;	author miod;	state Exp;
branches;
next	1.22;
commitid	kK6vkkSmKSSgbFDw;

1.22
date	2014.07.09.08.44.53;	author miod;	state Exp;
branches;
next	1.21;
commitid	KbL8PrMGlaveisds;

1.21
date	2014.07.09.08.20.08;	author miod;	state Exp;
branches;
next	1.20;
commitid	JPwi7kYvSgWTaIWo;

1.20
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	mJUVYpkFBZ0Zv2bG;

1.19
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	2nvnQBrv22dLtvTt;

1.18
date	2014.05.22.21.56.02;	author beck;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.17.21.32.37;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.15.20.06.10;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.11.22.15.19;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.12.02.18.38;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.17.19.57.16;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.15.16.35.53;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.16;	author beck;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.06.22.00.03.19;	author beck;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2000.12.15.02.58.09;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.11.39;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.42;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.53;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.46;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.11.11.21.17.24;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.59;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.10;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.43;	author djm;	state Exp;
branches;
next	;

1.5.4.1
date	2003.03.19.01.05.20;	author miod;	state Exp;
branches;
next	;

1.6.2.1
date	2003.03.19.01.18.19;	author margarida;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: rsa_lib.c,v 1.30 2015/02/11 03:19:37 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/bn.h>
#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/lhash.h>
#include <openssl/rsa.h>

#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif

static const RSA_METHOD *default_RSA_meth = NULL;

RSA *
RSA_new(void)
{
	RSA *r = RSA_new_method(NULL);

	return r;
}

void
RSA_set_default_method(const RSA_METHOD *meth)
{
	default_RSA_meth = meth;
}

const RSA_METHOD *
RSA_get_default_method(void)
{
	if (default_RSA_meth == NULL)
		default_RSA_meth = RSA_PKCS1_SSLeay();

	return default_RSA_meth;
}

const RSA_METHOD *
RSA_get_method(const RSA *rsa)
{
	return rsa->meth;
}

int
RSA_set_method(RSA *rsa, const RSA_METHOD *meth)
{
	/*
	 * NB: The caller is specifically setting a method, so it's not up to us
	 * to deal with which ENGINE it comes from.
	 */
	const RSA_METHOD *mtmp;

	mtmp = rsa->meth;
	if (mtmp->finish)
		mtmp->finish(rsa);
#ifndef OPENSSL_NO_ENGINE
	if (rsa->engine) {
		ENGINE_finish(rsa->engine);
		rsa->engine = NULL;
	}
#endif
	rsa->meth = meth;
	if (meth->init)
		meth->init(rsa);
	return 1;
}

RSA *
RSA_new_method(ENGINE *engine)
{
	RSA *ret;

	ret = malloc(sizeof(RSA));
	if (ret == NULL) {
		RSAerror(ERR_R_MALLOC_FAILURE);
		return NULL;
	}

	ret->meth = RSA_get_default_method();
#ifndef OPENSSL_NO_ENGINE
	if (engine) {
		if (!ENGINE_init(engine)) {
			RSAerror(ERR_R_ENGINE_LIB);
			free(ret);
			return NULL;
		}
		ret->engine = engine;
	} else
		ret->engine = ENGINE_get_default_RSA();
	if (ret->engine) {
		ret->meth = ENGINE_get_RSA(ret->engine);
		if (!ret->meth) {
			RSAerror(ERR_R_ENGINE_LIB);
			ENGINE_finish(ret->engine);
			free(ret);
			return NULL;
		}
	}
#endif

	ret->pad = 0;
	ret->version = 0;
	ret->n = NULL;
	ret->e = NULL;
	ret->d = NULL;
	ret->p = NULL;
	ret->q = NULL;
	ret->dmp1 = NULL;
	ret->dmq1 = NULL;
	ret->iqmp = NULL;
	ret->references = 1;
	ret->_method_mod_n = NULL;
	ret->_method_mod_p = NULL;
	ret->_method_mod_q = NULL;
	ret->blinding = NULL;
	ret->mt_blinding = NULL;
	ret->flags = ret->meth->flags & ~RSA_FLAG_NON_FIPS_ALLOW;
	if (!CRYPTO_new_ex_data(CRYPTO_EX_INDEX_RSA, ret, &ret->ex_data)) {
#ifndef OPENSSL_NO_ENGINE
		if (ret->engine)
			ENGINE_finish(ret->engine);
#endif
		free(ret);
		return NULL;
	}

	if (ret->meth->init != NULL && !ret->meth->init(ret)) {
#ifndef OPENSSL_NO_ENGINE
		if (ret->engine)
			ENGINE_finish(ret->engine);
#endif
		CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RSA, ret, &ret->ex_data);
		free(ret);
		ret = NULL;
	}
	return ret;
}

void
RSA_free(RSA *r)
{
	int i;

	if (r == NULL)
		return;

	i = CRYPTO_add(&r->references, -1, CRYPTO_LOCK_RSA);
	if (i > 0)
		return;

	if (r->meth->finish)
		r->meth->finish(r);
#ifndef OPENSSL_NO_ENGINE
	if (r->engine)
		ENGINE_finish(r->engine);
#endif

	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RSA, r, &r->ex_data);

	BN_clear_free(r->n);
	BN_clear_free(r->e);
	BN_clear_free(r->d);
	BN_clear_free(r->p);
	BN_clear_free(r->q);
	BN_clear_free(r->dmp1);
	BN_clear_free(r->dmq1);
	BN_clear_free(r->iqmp);
	BN_BLINDING_free(r->blinding);
	BN_BLINDING_free(r->mt_blinding);
	free(r);
}

int
RSA_up_ref(RSA *r)
{
	int i = CRYPTO_add(&r->references, 1, CRYPTO_LOCK_RSA);
	return i > 1 ? 1 : 0;
}

int
RSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
    CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
{
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_RSA, argl, argp,
	    new_func, dup_func, free_func);
}

int
RSA_set_ex_data(RSA *r, int idx, void *arg)
{
	return CRYPTO_set_ex_data(&r->ex_data, idx, arg);
}

void *
RSA_get_ex_data(const RSA *r, int idx)
{
	return CRYPTO_get_ex_data(&r->ex_data, idx);
}
@


1.30
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_lib.c,v 1.29 2014/10/18 17:20:40 jsing Exp $ */
d135 1
a135 1
		RSAerr(RSA_F_RSA_NEW_METHOD, ERR_R_MALLOC_FAILURE);
d143 1
a143 1
			RSAerr(RSA_F_RSA_NEW_METHOD, ERR_R_ENGINE_LIB);
d153 1
a153 1
			RSAerr(RSA_F_RSA_NEW_METHOD, ERR_R_ENGINE_LIB);
@


1.29
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_lib.c,v 1.28 2014/07/11 08:44:49 jsing Exp $ */
d65 1
@


1.28
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_lib.c,v 1.27 2014/07/10 22:45:57 jsing Exp $ */
a65 1
#include <openssl/rand.h>
@


1.27
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_lib.c,v 1.26 2014/07/10 07:43:11 jsing Exp $ */
d63 1
a64 1
#include "cryptlib.h"
d66 1
a66 1
#include <openssl/bn.h>
d68 1
a68 1
#include <openssl/rand.h>
@


1.26
log
@BN_free, BN_clear_free, BN_CTX_free, BN_BLINDING_free and BN_MONT_CTX_free
all have implicit NULL checks, so we do not need them here.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_lib.c,v 1.25 2014/07/09 19:51:38 jsing Exp $ */
d60 3
@


1.25
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_lib.c,v 1.24 2014/07/09 11:10:51 bcook Exp $ */
d217 10
a226 20
	if (r->n != NULL)
		BN_clear_free(r->n);
	if (r->e != NULL)
		BN_clear_free(r->e);
	if (r->d != NULL)
		BN_clear_free(r->d);
	if (r->p != NULL)
		BN_clear_free(r->p);
	if (r->q != NULL)
		BN_clear_free(r->q);
	if (r->dmp1 != NULL)
		BN_clear_free(r->dmp1);
	if (r->dmq1 != NULL)
		BN_clear_free(r->dmq1);
	if (r->iqmp != NULL)
		BN_clear_free(r->iqmp);
	if (r->blinding != NULL)
		BN_BLINDING_free(r->blinding);
	if (r->mt_blinding != NULL)
		BN_BLINDING_free(r->mt_blinding);
@


1.24
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_lib.c,v 1.23 2014/07/09 08:55:32 miod Exp $ */
d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d147 1
a147 1
	if(ret->engine) {
@


1.23
log
@Remove RSA_memory_lock(). This undocumented function sort-of serializes your
RSA components to memory and clears them, but there is no unserializing
function, so its usefulness is close to zero.

A grep through the ports tree sources show that it is only present in ports
embedding their own openssl copy, and never used otherwise.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_lib.c,v 1.22 2014/07/09 08:44:53 miod Exp $ */
a68 2

const char RSA_version[] = "RSA" OPENSSL_VERSION_PTEXT;
@


1.22
log
@RSA_NULL used to be a compile option allowing the RSA interfaces to be
compiled-in, with nonfunctional code, to be able to cope with the RSA
patent.

However, we don't use this option, and the RSA patent has expired more than 10
years ago, so just drop this piece.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_lib.c,v 1.21 2014/07/09 08:20:08 miod Exp $ */
a267 45

int RSA_memory_lock(RSA *r)
	{
	int i,j,k,off;
	char *p;
	BIGNUM *bn,**t[6],*b;
	BN_ULONG *ul;

	if (r->d == NULL) return(1);
	t[0]= &r->d;
	t[1]= &r->p;
	t[2]= &r->q;
	t[3]= &r->dmp1;
	t[4]= &r->dmq1;
	t[5]= &r->iqmp;
	k=sizeof(BIGNUM)*6;
	off=k/sizeof(BN_ULONG)+1;
	j=1;
	for (i=0; i<6; i++)
		j+= (*t[i])->top;
	if ((p=reallocarray(NULL, (off+j), sizeof(BN_ULONG))) == NULL)
		{
		RSAerr(RSA_F_RSA_MEMORY_LOCK,ERR_R_MALLOC_FAILURE);
		return(0);
		}
	bn=(BIGNUM *)p;
	ul=(BN_ULONG *)&(p[off]);
	for (i=0; i<6; i++)
		{
		b= *(t[i]);
		*(t[i])= &(bn[i]);
		memcpy((char *)&(bn[i]),(char *)b,sizeof(BIGNUM));
		bn[i].flags=BN_FLG_STATIC_DATA;
		bn[i].d=ul;
		memcpy((char *)ul,b->d,sizeof(BN_ULONG)*b->top);
		ul+=b->top;
		BN_clear_free(b);
		}
	
	/* I should fix this so it can still be done */
	r->flags&= ~(RSA_FLAG_CACHE_PRIVATE|RSA_FLAG_CACHE_PUBLIC);

	r->bignum_data=p;
	return(1);
	}
@


1.21
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_lib.c,v 1.20 2014/06/12 15:49:30 deraadt Exp $ */
d91 1
a91 4
	if (default_RSA_meth == NULL) {
#ifdef RSA_NULL
		default_RSA_meth = RSA_null_method();
#else
a92 2
#endif
	}
@


1.20
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d70 1
a70 1
const char RSA_version[]="RSA" OPENSSL_VERSION_PTEXT;
d72 1
a72 1
static const RSA_METHOD *default_RSA_meth=NULL;
d74 4
a77 3
RSA *RSA_new(void)
	{
	RSA *r=RSA_new_method(NULL);
d80 1
a80 1
	}
d82 3
a84 2
void RSA_set_default_method(const RSA_METHOD *meth)
	{
d86 1
a86 1
	}
d88 4
a91 4
const RSA_METHOD *RSA_get_default_method(void)
	{
	if (default_RSA_meth == NULL)
		{
d93 1
a93 1
		default_RSA_meth=RSA_null_method();
d95 1
a95 1
		default_RSA_meth=RSA_PKCS1_SSLeay();
d97 1
a97 1
		}
d100 1
a100 1
	}
d102 3
a104 2
const RSA_METHOD *RSA_get_method(const RSA *rsa)
	{
d106 1
a106 1
	}
d108 7
a114 4
int RSA_set_method(RSA *rsa, const RSA_METHOD *meth)
	{
	/* NB: The caller is specifically setting a method, so it's not up to us
	 * to deal with which ENGINE it comes from. */
d116 1
d118 2
a119 1
	if (mtmp->finish) mtmp->finish(rsa);
d121 1
a121 2
	if (rsa->engine)
		{
d124 1
a124 1
		}
d127 2
a128 1
	if (meth->init) meth->init(rsa);
d130 1
a130 1
	}
d132 3
a134 2
RSA *RSA_new_method(ENGINE *engine)
	{
d138 2
a139 3
	if (ret == NULL)
		{
		RSAerr(RSA_F_RSA_NEW_METHOD,ERR_R_MALLOC_FAILURE);
d141 1
a141 1
		}
d145 2
a146 4
	if (engine)
		{
		if (!ENGINE_init(engine))
			{
d150 1
a150 1
			}
d152 1
a152 2
		}
	else
d154 1
a154 2
	if(ret->engine)
		{
d156 2
a157 4
		if(!ret->meth)
			{
			RSAerr(RSA_F_RSA_NEW_METHOD,
				ERR_R_ENGINE_LIB);
a160 1
			}
d162 1
d165 18
a182 20
	ret->pad=0;
	ret->version=0;
	ret->n=NULL;
	ret->e=NULL;
	ret->d=NULL;
	ret->p=NULL;
	ret->q=NULL;
	ret->dmp1=NULL;
	ret->dmq1=NULL;
	ret->iqmp=NULL;
	ret->references=1;
	ret->_method_mod_n=NULL;
	ret->_method_mod_p=NULL;
	ret->_method_mod_q=NULL;
	ret->blinding=NULL;
	ret->mt_blinding=NULL;
	ret->bignum_data=NULL;
	ret->flags=ret->meth->flags & ~RSA_FLAG_NON_FIPS_ALLOW;
	if (!CRYPTO_new_ex_data(CRYPTO_EX_INDEX_RSA, ret, &ret->ex_data))
		{
d184 2
a185 2
	if (ret->engine)
		ENGINE_finish(ret->engine);
d188 2
a189 2
		return(NULL);
		}
d191 1
a191 2
	if ((ret->meth->init != NULL) && !ret->meth->init(ret))
		{
d198 1
a198 3
		ret=NULL;
		}
	return(ret);
d200 2
d203 3
a205 2
void RSA_free(RSA *r)
	{
d208 2
a209 1
	if (r == NULL) return;
d211 3
a213 2
	i=CRYPTO_add(&r->references,-1,CRYPTO_LOCK_RSA);
	if (i > 0) return;
d224 20
a243 11
	if (r->n != NULL) BN_clear_free(r->n);
	if (r->e != NULL) BN_clear_free(r->e);
	if (r->d != NULL) BN_clear_free(r->d);
	if (r->p != NULL) BN_clear_free(r->p);
	if (r->q != NULL) BN_clear_free(r->q);
	if (r->dmp1 != NULL) BN_clear_free(r->dmp1);
	if (r->dmq1 != NULL) BN_clear_free(r->dmq1);
	if (r->iqmp != NULL) BN_clear_free(r->iqmp);
	if (r->blinding != NULL) BN_BLINDING_free(r->blinding);
	if (r->mt_blinding != NULL) BN_BLINDING_free(r->mt_blinding);
	free(r->bignum_data);
d245 1
a245 1
	}
d247 3
a249 2
int RSA_up_ref(RSA *r)
	{
d251 2
a252 2
	return ((i > 1) ? 1 : 0);
	}
d254 4
a257 3
int RSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
        {
d259 2
a260 2
				new_func, dup_func, free_func);
        }
d262 11
a272 9
int RSA_set_ex_data(RSA *r, int idx, void *arg)
	{
	return(CRYPTO_set_ex_data(&r->ex_data,idx,arg));
	}

void *RSA_get_ex_data(const RSA *r, int idx)
	{
	return(CRYPTO_get_ex_data(&r->ex_data,idx));
	}
@


1.19
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/rsa/rsa_lib.c */
@


1.18
log
@Convert OPENSSL_malloc stuff back to intrinsics, a few were missed
as new stuff was brought in.
ok miod@@
@
text
@d128 1
a128 1
	ret=(RSA *)malloc(sizeof(RSA));
@


1.17
log
@kill REF_PRINT/REF_CHECK debugging framework noone would use
ok miod
@
text
@d232 1
a232 1
	if (r->bignum_data != NULL) OPENSSL_free_locked(r->bignum_data);
d278 1
a278 1
	if ((p=OPENSSL_malloc_locked((off+j)*sizeof(BN_ULONG))) == NULL)
@


1.16
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a210 3
#ifdef REF_PRINT
	REF_PRINT("RSA",r);
#endif
a211 7
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"RSA_free, bad reference count\n");
		abort();
		}
#endif
a238 10
#ifdef REF_PRINT
	REF_PRINT("RSA",r);
#endif
#ifdef REF_CHECK
	if (i < 2)
		{
		fprintf(stderr, "RSA_up_ref, bad reference count\n");
		abort();
		}
#endif
@


1.15
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d128 1
a128 1
	ret=(RSA *)OPENSSL_malloc(sizeof(RSA));
d142 1
a142 1
			OPENSSL_free(ret);
d157 1
a157 1
			OPENSSL_free(ret);
d187 1
a187 1
		OPENSSL_free(ret);
d198 1
a198 1
		OPENSSL_free(ret);
d243 1
a243 1
	OPENSSL_free(r);
@


1.14
log
@resolve conflicts
@
text
@a69 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a89 6
#ifdef OPENSSL_FIPS
		if (FIPS_mode())
			return FIPS_rsa_pkcs1_ssleay();
		else
			return RSA_PKCS1_SSLeay();
#else
a93 1
#endif
@


1.13
log
@resolve conflicts, fix local changes
@
text
@d70 4
d94 6
a102 3
#if 0 /* was: #ifdef RSAref */
		default_RSA_meth=RSA_PKCS1_RSAref();
#else
d191 1
a191 1
	ret->flags=ret->meth->flags;
a288 157

int RSA_size(const RSA *r)
	{
	return(BN_num_bytes(r->n));
	}

int RSA_public_encrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
	{
	return(rsa->meth->rsa_pub_enc(flen, from, to, rsa, padding));
	}

int RSA_private_encrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
	{
	return(rsa->meth->rsa_priv_enc(flen, from, to, rsa, padding));
	}

int RSA_private_decrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
	{
	return(rsa->meth->rsa_priv_dec(flen, from, to, rsa, padding));
	}

int RSA_public_decrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
	{
	return(rsa->meth->rsa_pub_dec(flen, from, to, rsa, padding));
	}

int RSA_flags(const RSA *r)
	{
	return((r == NULL)?0:r->meth->flags);
	}

void RSA_blinding_off(RSA *rsa)
	{
	if (rsa->blinding != NULL)
		{
		BN_BLINDING_free(rsa->blinding);
		rsa->blinding=NULL;
		}
	rsa->flags &= ~RSA_FLAG_BLINDING;
	rsa->flags |= RSA_FLAG_NO_BLINDING;
	}

int RSA_blinding_on(RSA *rsa, BN_CTX *ctx)
	{
	int ret=0;

	if (rsa->blinding != NULL)
		RSA_blinding_off(rsa);

	rsa->blinding = RSA_setup_blinding(rsa, ctx);
	if (rsa->blinding == NULL)
		goto err;

	rsa->flags |= RSA_FLAG_BLINDING;
	rsa->flags &= ~RSA_FLAG_NO_BLINDING;
	ret=1;
err:
	return(ret);
	}

static BIGNUM *rsa_get_public_exp(const BIGNUM *d, const BIGNUM *p,
	const BIGNUM *q, BN_CTX *ctx)
{
	BIGNUM *ret = NULL, *r0, *r1, *r2;

	if (d == NULL || p == NULL || q == NULL)
		return NULL;

	BN_CTX_start(ctx);
	r0 = BN_CTX_get(ctx);
	r1 = BN_CTX_get(ctx);
	r2 = BN_CTX_get(ctx);
	if (r2 == NULL)
		goto err;

	if (!BN_sub(r1, p, BN_value_one())) goto err;
	if (!BN_sub(r2, q, BN_value_one())) goto err;
	if (!BN_mul(r0, r1, r2, ctx)) goto err;

	ret = BN_mod_inverse(NULL, d, r0, ctx);
err:
	BN_CTX_end(ctx);
	return ret;
}

BN_BLINDING *RSA_setup_blinding(RSA *rsa, BN_CTX *in_ctx)
{
	BIGNUM local_n;
	BIGNUM *e,*n;
	BN_CTX *ctx;
	BN_BLINDING *ret = NULL;

	if (in_ctx == NULL)
		{
		if ((ctx = BN_CTX_new()) == NULL) return 0;
		}
	else
		ctx = in_ctx;

	BN_CTX_start(ctx);
	e  = BN_CTX_get(ctx);
	if (e == NULL)
		{
		RSAerr(RSA_F_RSA_SETUP_BLINDING, ERR_R_MALLOC_FAILURE);
		goto err;
		}

	if (rsa->e == NULL)
		{
		e = rsa_get_public_exp(rsa->d, rsa->p, rsa->q, ctx);
		if (e == NULL)
			{
			RSAerr(RSA_F_RSA_SETUP_BLINDING, RSA_R_NO_PUBLIC_EXPONENT);
			goto err;
			}
		}
	else
		e = rsa->e;

	
	if ((RAND_status() == 0) && rsa->d != NULL && rsa->d->d != NULL)
		{
		/* if PRNG is not properly seeded, resort to secret
		 * exponent as unpredictable seed */
		RAND_add(rsa->d->d, rsa->d->dmax * sizeof rsa->d->d[0], 0.0);
		}

	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME))
		{
		/* Set BN_FLG_CONSTTIME flag */
		n = &local_n;
		BN_with_flags(n, rsa->n, BN_FLG_CONSTTIME);
		}
	else
		n = rsa->n;

	ret = BN_BLINDING_create_param(NULL, e, n, ctx,
			rsa->meth->bn_mod_exp, rsa->_method_mod_n);
	if (ret == NULL)
		{
		RSAerr(RSA_F_RSA_SETUP_BLINDING, ERR_R_BN_LIB);
		goto err;
		}
	CRYPTO_THREADID_current(BN_BLINDING_thread_id(ret));
err:
	BN_CTX_end(ctx);
	if (in_ctx == NULL)
		BN_CTX_free(ctx);
	if(rsa->e == NULL)
		BN_free(e);

	return ret;
}
@


1.12
log
@resolve conflicts
@
text
@d70 218
a296 7
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_PRIVATE_ENCRYPT, RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return 0;
		}
#endif
a308 7
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_PUBLIC_DECRYPT, RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return 0;
		}
#endif
d312 1
a312 1
int RSA_size(const RSA *r)
d314 1
a314 1
	return(BN_num_bytes(r->n));
d429 1
a429 1
	BN_BLINDING_set_thread_id(ret, CRYPTO_thread_id());
d439 45
@


1.11
log
@resolve conflicts
@
text
@a69 209
const char RSA_version[]="RSA" OPENSSL_VERSION_PTEXT;

static const RSA_METHOD *default_RSA_meth=NULL;

RSA *RSA_new(void)
	{
	RSA *r=RSA_new_method(NULL);

	return r;
	}

void RSA_set_default_method(const RSA_METHOD *meth)
	{
	default_RSA_meth = meth;
	}

const RSA_METHOD *RSA_get_default_method(void)
	{
	if (default_RSA_meth == NULL)
		{
#ifdef RSA_NULL
		default_RSA_meth=RSA_null_method();
#else
#if 0 /* was: #ifdef RSAref */
		default_RSA_meth=RSA_PKCS1_RSAref();
#else
		default_RSA_meth=RSA_PKCS1_SSLeay();
#endif
#endif
		}

	return default_RSA_meth;
	}

const RSA_METHOD *RSA_get_method(const RSA *rsa)
	{
	return rsa->meth;
	}

int RSA_set_method(RSA *rsa, const RSA_METHOD *meth)
	{
	/* NB: The caller is specifically setting a method, so it's not up to us
	 * to deal with which ENGINE it comes from. */
	const RSA_METHOD *mtmp;
	mtmp = rsa->meth;
	if (mtmp->finish) mtmp->finish(rsa);
#ifndef OPENSSL_NO_ENGINE
	if (rsa->engine)
		{
		ENGINE_finish(rsa->engine);
		rsa->engine = NULL;
		}
#endif
	rsa->meth = meth;
	if (meth->init) meth->init(rsa);
	return 1;
	}

RSA *RSA_new_method(ENGINE *engine)
	{
	RSA *ret;

	ret=(RSA *)OPENSSL_malloc(sizeof(RSA));
	if (ret == NULL)
		{
		RSAerr(RSA_F_RSA_NEW_METHOD,ERR_R_MALLOC_FAILURE);
		return NULL;
		}

	ret->meth = RSA_get_default_method();
#ifndef OPENSSL_NO_ENGINE
	if (engine)
		{
		if (!ENGINE_init(engine))
			{
			RSAerr(RSA_F_RSA_NEW_METHOD, ERR_R_ENGINE_LIB);
			OPENSSL_free(ret);
			return NULL;
			}
		ret->engine = engine;
		}
	else
		ret->engine = ENGINE_get_default_RSA();
	if(ret->engine)
		{
		ret->meth = ENGINE_get_RSA(ret->engine);
		if(!ret->meth)
			{
			RSAerr(RSA_F_RSA_NEW_METHOD,
				ERR_R_ENGINE_LIB);
			ENGINE_finish(ret->engine);
			OPENSSL_free(ret);
			return NULL;
			}
		}
#endif

	ret->pad=0;
	ret->version=0;
	ret->n=NULL;
	ret->e=NULL;
	ret->d=NULL;
	ret->p=NULL;
	ret->q=NULL;
	ret->dmp1=NULL;
	ret->dmq1=NULL;
	ret->iqmp=NULL;
	ret->references=1;
	ret->_method_mod_n=NULL;
	ret->_method_mod_p=NULL;
	ret->_method_mod_q=NULL;
	ret->blinding=NULL;
	ret->mt_blinding=NULL;
	ret->bignum_data=NULL;
	ret->flags=ret->meth->flags;
	CRYPTO_new_ex_data(CRYPTO_EX_INDEX_RSA, ret, &ret->ex_data);
	if ((ret->meth->init != NULL) && !ret->meth->init(ret))
		{
#ifndef OPENSSL_NO_ENGINE
		if (ret->engine)
			ENGINE_finish(ret->engine);
#endif
		CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RSA, ret, &ret->ex_data);
		OPENSSL_free(ret);
		ret=NULL;
		}
	return(ret);
	}

void RSA_free(RSA *r)
	{
	int i;

	if (r == NULL) return;

	i=CRYPTO_add(&r->references,-1,CRYPTO_LOCK_RSA);
#ifdef REF_PRINT
	REF_PRINT("RSA",r);
#endif
	if (i > 0) return;
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"RSA_free, bad reference count\n");
		abort();
		}
#endif

	if (r->meth->finish)
		r->meth->finish(r);
#ifndef OPENSSL_NO_ENGINE
	if (r->engine)
		ENGINE_finish(r->engine);
#endif

	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RSA, r, &r->ex_data);

	if (r->n != NULL) BN_clear_free(r->n);
	if (r->e != NULL) BN_clear_free(r->e);
	if (r->d != NULL) BN_clear_free(r->d);
	if (r->p != NULL) BN_clear_free(r->p);
	if (r->q != NULL) BN_clear_free(r->q);
	if (r->dmp1 != NULL) BN_clear_free(r->dmp1);
	if (r->dmq1 != NULL) BN_clear_free(r->dmq1);
	if (r->iqmp != NULL) BN_clear_free(r->iqmp);
	if (r->blinding != NULL) BN_BLINDING_free(r->blinding);
	if (r->mt_blinding != NULL) BN_BLINDING_free(r->mt_blinding);
	if (r->bignum_data != NULL) OPENSSL_free_locked(r->bignum_data);
	OPENSSL_free(r);
	}

int RSA_up_ref(RSA *r)
	{
	int i = CRYPTO_add(&r->references, 1, CRYPTO_LOCK_RSA);
#ifdef REF_PRINT
	REF_PRINT("RSA",r);
#endif
#ifdef REF_CHECK
	if (i < 2)
		{
		fprintf(stderr, "RSA_up_ref, bad reference count\n");
		abort();
		}
#endif
	return ((i > 1) ? 1 : 0);
	}

int RSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
        {
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_RSA, argl, argp,
				new_func, dup_func, free_func);
        }

int RSA_set_ex_data(RSA *r, int idx, void *arg)
	{
	return(CRYPTO_set_ex_data(&r->ex_data,idx,arg));
	}

void *RSA_get_ex_data(const RSA *r, int idx)
	{
	return(CRYPTO_get_ex_data(&r->ex_data,idx));
	}

int RSA_size(const RSA *r)
	{
	return(BN_num_bytes(r->n));
	}

d79 7
d98 7
d108 1
a108 1
int RSA_flags(const RSA *r)
d110 1
a110 1
	return((r == NULL)?0:r->meth->flags);
a234 45

int RSA_memory_lock(RSA *r)
	{
	int i,j,k,off;
	char *p;
	BIGNUM *bn,**t[6],*b;
	BN_ULONG *ul;

	if (r->d == NULL) return(1);
	t[0]= &r->d;
	t[1]= &r->p;
	t[2]= &r->q;
	t[3]= &r->dmp1;
	t[4]= &r->dmq1;
	t[5]= &r->iqmp;
	k=sizeof(BIGNUM)*6;
	off=k/sizeof(BN_ULONG)+1;
	j=1;
	for (i=0; i<6; i++)
		j+= (*t[i])->top;
	if ((p=OPENSSL_malloc_locked((off+j)*sizeof(BN_ULONG))) == NULL)
		{
		RSAerr(RSA_F_RSA_MEMORY_LOCK,ERR_R_MALLOC_FAILURE);
		return(0);
		}
	bn=(BIGNUM *)p;
	ul=(BN_ULONG *)&(p[off]);
	for (i=0; i<6; i++)
		{
		b= *(t[i]);
		*(t[i])= &(bn[i]);
		memcpy((char *)&(bn[i]),(char *)b,sizeof(BIGNUM));
		bn[i].flags=BN_FLG_STATIC_DATA;
		bn[i].d=ul;
		memcpy((char *)ul,b->d,sizeof(BN_ULONG)*b->top);
		ul+=b->top;
		BN_clear_free(b);
		}
	
	/* I should fix this so it can still be done */
	r->flags&= ~(RSA_FLAG_CACHE_PRIVATE|RSA_FLAG_CACHE_PUBLIC);

	r->bignum_data=p;
	return(1);
	}
@


1.10
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d70 1
a70 1
const char *RSA_version="RSA" OPENSSL_VERSION_PTEXT;
d182 1
d236 1
d319 1
a319 1
int RSA_blinding_on(RSA *rsa, BN_CTX *p_ctx)
d321 45
a365 1
	BIGNUM *A,*Ai = NULL;
d367 1
a367 1
	int ret=0;
d369 1
a369 1
	if (p_ctx == NULL)
d371 1
a371 1
		if ((ctx=BN_CTX_new()) == NULL) goto err;
d374 1
a374 1
		ctx=p_ctx;
d376 3
a378 2
	/* XXXXX: Shouldn't this be RSA_blinding_off(rsa)? */
	if (rsa->blinding != NULL)
d380 2
a381 2
		BN_BLINDING_free(rsa->blinding);
		rsa->blinding = NULL;
d384 11
a394 3
	/* NB: similar code appears in setup_blinding (rsa_eay.c);
	 * this should be placed in a new function of its own, but for reasons
	 * of binary compatibility can't */
d396 1
a396 2
	BN_CTX_start(ctx);
	A = BN_CTX_get(ctx);
d399 3
a401 3
		/* if PRNG is not properly seeded, resort to secret exponent as unpredictable seed */
		RAND_add(rsa->d->d, rsa->d->dmax * sizeof rsa->d->d[0], 0);
		if (!BN_pseudo_rand_range(A,rsa->n)) goto err;
d403 2
a404 1
	else
d406 3
a408 1
		if (!BN_rand_range(A,rsa->n)) goto err;
d410 2
a411 1
	if ((Ai=BN_mod_inverse(NULL,A,rsa->n,ctx)) == NULL) goto err;
d413 5
a417 1
	if (!rsa->meth->bn_mod_exp(A,A,rsa->e,rsa->n,ctx,rsa->_method_mod_n))
d419 2
a420 7
	if ((rsa->blinding=BN_BLINDING_new(A,Ai,rsa->n)) == NULL) goto err;
	/* to make things thread-safe without excessive locking,
	 * rsa->blinding will be used just by the current thread: */
	rsa->blinding->thread_id = CRYPTO_thread_id();
	rsa->flags |= RSA_FLAG_BLINDING;
	rsa->flags &= ~RSA_FLAG_NO_BLINDING;
	ret=1;
a421 1
	if (Ai != NULL) BN_free(Ai);
d423 7
a429 3
	if (ctx != p_ctx) BN_CTX_free(ctx);
	return(ret);
	}
d452 1
a452 1
		RSAerr(RSA_F_MEMORY_LOCK,ERR_R_MALLOC_FAILURE);
@


1.9
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d319 1
a319 1
	BIGNUM *A,*Ai;
d330 1
d332 1
d334 2
a362 1
	BN_free(Ai);
d365 1
@


1.8
log
@update to official patch from openssl.org; ok deraadt@@, millert@@
@
text
@d65 2
d68 1
a77 4
#ifndef OPENSSL_NO_FORCE_RSA_BLINDING
	r->flags|=RSA_FLAG_BLINDING;
#endif

d116 1
d122 1
d140 1
d165 1
d187 1
d190 1
d219 1
d222 1
d313 2
a314 1
	rsa->flags&= ~RSA_FLAG_BLINDING;
d333 4
d339 10
a348 1
	if (!BN_rand_range(A,rsa->n)) goto err;
d352 7
a358 3
	    goto err;
	rsa->blinding=BN_BLINDING_new(A,Ai,rsa->n);
	rsa->flags|=RSA_FLAG_BLINDING;
@


1.7
log
@Enforce blinding on RSA operations involving private keys.
From http://www.openssl.org/~geoff, modified to be enabled at all times.
@
text
@d73 7
a79 1
	return(RSA_new_method(NULL));
a189 4

	/* Enforce blinding. */
	ret->flags |= RSA_FLAG_BLINDING;

@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d184 4
@


1.6.2.1
log
@Errata #11 (markus):
Enforce blinding on RSA operations involving private keys.

millert@@ markus@@ ok
@
text
@d73 1
a73 7
	RSA *r=RSA_new_method(NULL);

#ifndef OPENSSL_NO_FORCE_RSA_BLINDING
	r->flags|=RSA_FLAG_BLINDING;
#endif

	return r;
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d69 1
a69 3
static RSA_METHOD *default_RSA_meth=NULL;
static int rsa_meth_num=0;
static STACK_OF(CRYPTO_EX_DATA_FUNCS) *rsa_meth=NULL;
d76 1
a76 1
void RSA_set_default_openssl_method(RSA_METHOD *meth)
d78 1
a78 15
	ENGINE *e;
	/* We'll need to notify the "openssl" ENGINE of this
	 * change too. We won't bother locking things down at
	 * our end as there was never any locking in these
	 * functions! */
	if(default_RSA_meth != meth)
		{
		default_RSA_meth = meth;
		e = ENGINE_by_id("openssl");
		if(e)
			{
			ENGINE_set_RSA(e, meth);
			ENGINE_free(e);
			}
		}
d81 2
a82 2
RSA_METHOD *RSA_get_default_openssl_method(void)
{
d88 1
a88 1
#ifdef RSAref
d97 1
a97 1
}
d99 10
a108 9
RSA_METHOD *RSA_get_method(RSA *rsa)
{
	return ENGINE_get_RSA(rsa->engine);
}

#if 0
RSA_METHOD *RSA_set_method(RSA *rsa, RSA_METHOD *meth)
{
	RSA_METHOD *mtmp;
d111 5
a117 17
	return mtmp;
}
#else
int RSA_set_method(RSA *rsa, ENGINE *engine)
{
	ENGINE *mtmp;
	RSA_METHOD *meth;
	mtmp = rsa->engine;
	meth = ENGINE_get_RSA(mtmp);
	if (!ENGINE_init(engine))
		return 0;
	if (meth->finish) meth->finish(rsa);
	rsa->engine = engine;
	meth = ENGINE_get_RSA(engine);
	if (meth->init) meth->init(rsa);
	/* SHOULD ERROR CHECK THIS!!! */
	ENGINE_finish(mtmp);
d119 1
a119 2
}
#endif
a120 3
#if 0
RSA *RSA_new_method(RSA_METHOD *meth)
#else
a121 1
#endif
a122 1
	RSA_METHOD *meth;
d129 1
a129 1
		return(NULL);
d132 2
a133 1
	if (engine == NULL)
d135 1
a135 1
		if((ret->engine=ENGINE_get_default_RSA()) == NULL)
d137 1
d141 1
d144 13
a156 2
		ret->engine=engine;
	meth = ENGINE_get_RSA(ret->engine);
d174 3
a176 3
	ret->flags=meth->flags;
	CRYPTO_new_ex_data(rsa_meth,ret,&ret->ex_data);
	if ((meth->init != NULL) && !meth->init(ret))
d178 3
a180 1
		CRYPTO_free_ex_data(rsa_meth,ret,&ret->ex_data);
a188 1
	RSA_METHOD *meth;
d206 4
a209 4
	meth = ENGINE_get_RSA(r->engine);
	if (meth->finish != NULL)
		meth->finish(r);
	ENGINE_finish(r->engine);
d211 1
a211 1
	CRYPTO_free_ex_data(rsa_meth,r,&r->ex_data);
d226 16
d245 2
a246 3
	rsa_meth_num++;
	return(CRYPTO_get_ex_new_index(rsa_meth_num-1,
		&rsa_meth,argl,argp,new_func,dup_func,free_func));
d254 1
a254 1
void *RSA_get_ex_data(RSA *r, int idx)
d259 1
a259 1
int RSA_size(RSA *r)
d264 1
a264 1
int RSA_public_encrypt(int flen, unsigned char *from, unsigned char *to,
d267 1
a267 2
	return(ENGINE_get_RSA(rsa->engine)->rsa_pub_enc(flen,
		from, to, rsa, padding));
d270 1
a270 1
int RSA_private_encrypt(int flen, unsigned char *from, unsigned char *to,
d273 1
a273 2
	return(ENGINE_get_RSA(rsa->engine)->rsa_priv_enc(flen,
		from, to, rsa, padding));
d276 1
a276 1
int RSA_private_decrypt(int flen, unsigned char *from, unsigned char *to,
d279 1
a279 2
	return(ENGINE_get_RSA(rsa->engine)->rsa_priv_dec(flen,
		from, to, rsa, padding));
d282 1
a282 1
int RSA_public_decrypt(int flen, unsigned char *from, unsigned char *to,
d285 1
a285 2
	return(ENGINE_get_RSA(rsa->engine)->rsa_pub_dec(flen,
		from, to, rsa, padding));
d288 1
a288 1
int RSA_flags(RSA *r)
d290 1
a290 1
	return((r == NULL)?0:ENGINE_get_RSA(r->engine)->flags);
d324 1
a324 2
	if (!ENGINE_get_RSA(rsa->engine)->bn_mod_exp(A,A,
		rsa->e,rsa->n,ctx,rsa->_method_mod_n))
a379 1

@


1.5.4.1
log
@Errata #024 (markus):
Enforce blinding on RSA operations involving private keys.
@
text
@d75 1
a75 7
	RSA *r=RSA_new_method(NULL);

#ifndef OPENSSL_NO_FORCE_RSA_BLINDING
	r->flags|=RSA_FLAG_BLINDING;
#endif

	return r;
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d194 1
d197 1
a200 2
	else
		CRYPTO_new_ex_data(rsa_meth,ret,&ret->ex_data);
a223 2
	CRYPTO_free_ex_data(rsa_meth,r,&r->ex_data);

d229 2
d328 1
a328 1
	if (!BN_rand(A,BN_num_bits(rsa->n)-1,1,0)) goto err;
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d65 1
d78 1
a78 1
void RSA_set_default_method(RSA_METHOD *meth)
d80 15
a94 1
	default_RSA_meth=meth;
d97 1
a97 1
RSA_METHOD *RSA_get_default_method(void)
d99 13
d117 1
a117 1
	return rsa->meth;
d120 1
d130 18
d149 1
d151 3
d155 1
d158 1
a158 13
	if (default_RSA_meth == NULL)
		{
#ifdef RSA_NULL
		default_RSA_meth=RSA_null_method();
#else
#ifdef RSAref
		default_RSA_meth=RSA_PKCS1_RSAref();
#else
		default_RSA_meth=RSA_PKCS1_SSLeay();
#endif
#endif
		}
	ret=(RSA *)Malloc(sizeof(RSA));
d165 8
a172 2
	if (meth == NULL)
		ret->meth=default_RSA_meth;
d174 2
a175 1
		ret->meth=meth;
d193 2
a194 2
	ret->flags=ret->meth->flags;
	if ((ret->meth->init != NULL) && !ret->meth->init(ret))
d196 1
a196 1
		Free(ret);
d206 1
d226 4
a229 2
	if (r->meth->finish != NULL)
		r->meth->finish(r);
d240 2
a241 2
	if (r->bignum_data != NULL) Free_locked(r->bignum_data);
	Free(r);
d270 2
a271 1
	return(rsa->meth->rsa_pub_enc(flen, from, to, rsa, padding));
d277 2
a278 1
	return(rsa->meth->rsa_priv_enc(flen, from, to, rsa, padding));
d284 2
a285 1
	return(rsa->meth->rsa_priv_dec(flen, from, to, rsa, padding));
d291 2
a292 1
	return(rsa->meth->rsa_pub_dec(flen, from, to, rsa, padding));
d297 1
a297 1
	return((r == NULL)?0:r->meth->flags);
d331 2
a332 1
	if (!rsa->meth->bn_mod_exp(A,A,rsa->e,rsa->n,ctx,rsa->_method_mod_n))
d363 1
a363 1
	if ((p=Malloc_locked((off+j)*sizeof(BN_ULONG))) == NULL)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d70 1
a70 1
static STACK *rsa_meth=NULL;
d108 3
d116 1
d153 1
a153 1
		CRYPTO_new_ex_data(rsa_meth,(char *)ret,&ret->ex_data);
d176 1
a176 1
	CRYPTO_free_ex_data(rsa_meth,(char *)r,&r->ex_data);
d194 2
a195 2
int RSA_get_ex_new_index(long argl, char *argp, int (*new_func)(),
	     int (*dup_func)(), void (*free_func)())
d202 1
a202 1
int RSA_set_ex_data(RSA *r, int idx, char *arg)
d207 1
a207 1
char *RSA_get_ex_data(RSA *r, int idx)
d272 2
a273 2
	A= &(ctx->bn[0]);
	ctx->tos++;
a279 1
	ctx->tos--;
d284 1
@


1.1
log
@Initial revision
@
text
@d60 1
a60 1
#include "crypto.h"
d62 3
a64 3
#include "lhash.h"
#include "bn.h"
#include "rsa.h"
d66 1
a66 1
char *RSA_version="RSA part of SSLeay 0.9.0b 29-Jun-1998";
d72 1
a72 1
RSA *RSA_new()
d77 1
a77 2
void RSA_set_default_method(meth)
RSA_METHOD *meth;
d82 21
a102 2
RSA *RSA_new_method(meth)
RSA_METHOD *meth;
d137 3
a139 3
	ret->method_mod_n=NULL;
	ret->method_mod_p=NULL;
	ret->method_mod_q=NULL;
d141 1
d148 2
a149 1
	CRYPTO_new_ex_data(rsa_meth,(char *)ret,&ret->ex_data);
d153 1
a153 2
void RSA_free(r)
RSA *r;
d186 1
d190 2
a191 6
int RSA_get_ex_new_index(argl,argp,new_func,dup_func,free_func)
long argl;
char *argp;
int (*new_func)();
int (*dup_func)();
void (*free_func)();
d198 1
a198 4
int RSA_set_ex_data(r,idx,arg)
RSA *r;
int idx;
char *arg;
d203 1
a203 3
char *RSA_get_ex_data(r,idx)
RSA *r;
int idx;
d208 1
a208 2
int RSA_size(r)
RSA *r;
d213 2
a214 6
int RSA_public_encrypt(flen, from, to, rsa, padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
d219 2
a220 6
int RSA_private_encrypt(flen, from, to, rsa, padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
d225 2
a226 6
int RSA_private_decrypt(flen, from, to, rsa, padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
d231 2
a232 6
int RSA_public_decrypt(flen, from, to, rsa, padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
d237 1
a237 2
int RSA_flags(r)
RSA *r;
d242 1
a242 2
void RSA_blinding_off(rsa)
RSA *rsa;
d252 1
a252 3
int RSA_blinding_on(rsa,p_ctx)
RSA *rsa;
BN_CTX *p_ctx;
d268 1
a268 1
	A=ctx->bn[0];
d271 1
a271 1
	if ((Ai=BN_mod_inverse(A,rsa->n,ctx)) == NULL) goto err;
d273 2
a274 2
	if (!rsa->meth->bn_mod_exp(A,A,rsa->e,rsa->n,ctx,
		(char *)rsa->method_mod_n)) goto err;
d283 45
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d60 1
a60 1
#include <openssl/crypto.h>
d62 3
a64 4
#include <openssl/lhash.h>
#include <openssl/bn.h>
#include <openssl/rsa.h>
#include <openssl/engine.h>
d66 1
a66 1
const char *RSA_version="RSA" OPENSSL_VERSION_PTEXT;
d68 3
a70 1
static const RSA_METHOD *default_RSA_meth=NULL;
d72 1
a72 1
RSA *RSA_new(void)
d77 2
a78 1
void RSA_set_default_method(const RSA_METHOD *meth)
d80 1
a80 1
	default_RSA_meth = meth;
d83 2
a84 1
const RSA_METHOD *RSA_get_default_method(void)
d86 2
d90 1
a90 4
#ifdef RSA_NULL
		default_RSA_meth=RSA_null_method();
#else
#if 0 /* was: #ifdef RSAref */
a94 1
#endif
d96 1
a96 31

	return default_RSA_meth;
	}

const RSA_METHOD *RSA_get_method(const RSA *rsa)
	{
	return rsa->meth;
	}

int RSA_set_method(RSA *rsa, const RSA_METHOD *meth)
	{
	/* NB: The caller is specifically setting a method, so it's not up to us
	 * to deal with which ENGINE it comes from. */
	const RSA_METHOD *mtmp;
	mtmp = rsa->meth;
	if (mtmp->finish) mtmp->finish(rsa);
	if (rsa->engine)
		{
		ENGINE_finish(rsa->engine);
		rsa->engine = NULL;
		}
	rsa->meth = meth;
	if (meth->init) meth->init(rsa);
	return 1;
	}

RSA *RSA_new_method(ENGINE *engine)
	{
	RSA *ret;

	ret=(RSA *)OPENSSL_malloc(sizeof(RSA));
d100 1
a100 1
		return NULL;
d103 2
a104 11
	ret->meth = RSA_get_default_method();
	if (engine)
		{
		if (!ENGINE_init(engine))
			{
			RSAerr(RSA_F_RSA_NEW_METHOD, ERR_R_ENGINE_LIB);
			OPENSSL_free(ret);
			return NULL;
			}
		ret->engine = engine;
		}
d106 1
a106 13
		ret->engine = ENGINE_get_default_RSA();
	if(ret->engine)
		{
		ret->meth = ENGINE_get_RSA(ret->engine);
		if(!ret->meth)
			{
			RSAerr(RSA_F_RSA_NEW_METHOD,
				ERR_R_ENGINE_LIB);
			ENGINE_finish(ret->engine);
			OPENSSL_free(ret);
			return NULL;
			}
		}
d119 3
a121 3
	ret->_method_mod_n=NULL;
	ret->_method_mod_p=NULL;
	ret->_method_mod_q=NULL;
a122 1
	ret->bignum_data=NULL;
a123 1
	CRYPTO_new_ex_data(CRYPTO_EX_INDEX_RSA, ret, &ret->ex_data);
d126 1
a126 4
		if (ret->engine)
			ENGINE_finish(ret->engine);
		CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RSA, ret, &ret->ex_data);
		OPENSSL_free(ret);
d129 1
d133 2
a134 1
void RSA_free(RSA *r)
d153 3
a155 1
	if (r->meth->finish)
a156 4
	if (r->engine)
		ENGINE_finish(r->engine);

	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RSA, r, &r->ex_data);
d167 1
a167 2
	if (r->bignum_data != NULL) OPENSSL_free_locked(r->bignum_data);
	OPENSSL_free(r);
d170 6
a175 18
int RSA_up_ref(RSA *r)
	{
	int i = CRYPTO_add(&r->references, 1, CRYPTO_LOCK_RSA);
#ifdef REF_PRINT
	REF_PRINT("RSA",r);
#endif
#ifdef REF_CHECK
	if (i < 2)
		{
		fprintf(stderr, "RSA_up_ref, bad reference count\n");
		abort();
		}
#endif
	return ((i > 1) ? 1 : 0);
	}

int RSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
d177 3
a179 2
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_RSA, argl, argp,
				new_func, dup_func, free_func);
d182 4
a185 1
int RSA_set_ex_data(RSA *r, int idx, void *arg)
d190 3
a192 1
void *RSA_get_ex_data(const RSA *r, int idx)
d197 2
a198 1
int RSA_size(const RSA *r)
d203 6
a208 2
int RSA_public_encrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
d213 6
a218 2
int RSA_private_encrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
d223 6
a228 2
int RSA_private_decrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
d233 6
a238 2
int RSA_public_decrypt(int flen, const unsigned char *from, unsigned char *to,
	     RSA *rsa, int padding)
d243 2
a244 1
int RSA_flags(const RSA *r)
d249 2
a250 1
void RSA_blinding_off(RSA *rsa)
d260 3
a262 1
int RSA_blinding_on(RSA *rsa, BN_CTX *p_ctx)
d278 4
a281 4
	BN_CTX_start(ctx);
	A = BN_CTX_get(ctx);
	if (!BN_rand_range(A,rsa->n)) goto err;
	if ((Ai=BN_mod_inverse(NULL,A,rsa->n,ctx)) == NULL) goto err;
d283 2
a284 2
	if (!rsa->meth->bn_mod_exp(A,A,rsa->e,rsa->n,ctx,rsa->_method_mod_n))
	    goto err;
d286 1
a290 1
	BN_CTX_end(ctx);
a294 44
int RSA_memory_lock(RSA *r)
	{
	int i,j,k,off;
	char *p;
	BIGNUM *bn,**t[6],*b;
	BN_ULONG *ul;

	if (r->d == NULL) return(1);
	t[0]= &r->d;
	t[1]= &r->p;
	t[2]= &r->q;
	t[3]= &r->dmp1;
	t[4]= &r->dmq1;
	t[5]= &r->iqmp;
	k=sizeof(BIGNUM)*6;
	off=k/sizeof(BN_ULONG)+1;
	j=1;
	for (i=0; i<6; i++)
		j+= (*t[i])->top;
	if ((p=OPENSSL_malloc_locked((off+j)*sizeof(BN_ULONG))) == NULL)
		{
		RSAerr(RSA_F_MEMORY_LOCK,ERR_R_MALLOC_FAILURE);
		return(0);
		}
	bn=(BIGNUM *)p;
	ul=(BN_ULONG *)&(p[off]);
	for (i=0; i<6; i++)
		{
		b= *(t[i]);
		*(t[i])= &(bn[i]);
		memcpy((char *)&(bn[i]),(char *)b,sizeof(BIGNUM));
		bn[i].flags=BN_FLG_STATIC_DATA;
		bn[i].d=ul;
		memcpy((char *)ul,b->d,sizeof(BN_ULONG)*b->top);
		ul+=b->top;
		BN_clear_free(b);
		}
	
	/* I should fix this so it can still be done */
	r->flags&= ~(RSA_FLAG_CACHE_PRIVATE|RSA_FLAG_CACHE_PUBLIC);

	r->bignum_data=p;
	return(1);
	}
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a64 2
#include <openssl/rand.h>
#ifndef OPENSSL_NO_ENGINE
a65 1
#endif
d73 1
a73 3
	RSA *r=RSA_new_method(NULL);

	return r;
a110 1
#ifndef OPENSSL_NO_ENGINE
a115 1
#endif
a132 1
#ifndef OPENSSL_NO_ENGINE
a156 1
#endif
a177 1
#ifndef OPENSSL_NO_ENGINE
a179 1
#endif
a207 1
#ifndef OPENSSL_NO_ENGINE
a209 1
#endif
d300 1
a300 2
	rsa->flags &= ~RSA_FLAG_BLINDING;
	rsa->flags |= RSA_FLAG_NO_BLINDING;
a318 4
	/* NB: similar code appears in setup_blinding (rsa_eay.c);
	 * this should be placed in a new function of its own, but for reasons
	 * of binary compatibility can't */

d321 1
a321 10
	if ((RAND_status() == 0) && rsa->d != NULL && rsa->d->d != NULL)
		{
		/* if PRNG is not properly seeded, resort to secret exponent as unpredictable seed */
		RAND_add(rsa->d->d, rsa->d->dmax * sizeof rsa->d->d[0], 0);
		if (!BN_pseudo_rand_range(A,rsa->n)) goto err;
		}
	else
		{
		if (!BN_rand_range(A,rsa->n)) goto err;
		}
d325 3
a327 7
		goto err;
	if ((rsa->blinding=BN_BLINDING_new(A,Ai,rsa->n)) == NULL) goto err;
	/* to make things thread-safe without excessive locking,
	 * rsa->blinding will be used just by the current thread: */
	rsa->blinding->thread_id = CRYPTO_thread_id();
	rsa->flags |= RSA_FLAG_BLINDING;
	rsa->flags &= ~RSA_FLAG_NO_BLINDING;
@


1.1.1.4
log
@import 0.9.7c
@
text
@d319 1
a319 1
	BIGNUM *A,*Ai = NULL;
a329 1
	/* XXXXX: Shouldn't this be RSA_blinding_off(rsa)? */
a330 1
		{
a331 2
		rsa->blinding = NULL;
		}
d359 1
a361 1
	if (Ai != NULL) BN_free(Ai);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d70 1
a70 1
const char RSA_version[]="RSA" OPENSSL_VERSION_PTEXT;
a181 1
	ret->mt_blinding=NULL;
a234 1
	if (r->mt_blinding != NULL) BN_BLINDING_free(r->mt_blinding);
d317 1
a317 1
int RSA_blinding_on(RSA *rsa, BN_CTX *ctx)
d319 2
d323 1
a323 47
	if (rsa->blinding != NULL)
		RSA_blinding_off(rsa);

	rsa->blinding = RSA_setup_blinding(rsa, ctx);
	if (rsa->blinding == NULL)
		goto err;

	rsa->flags |= RSA_FLAG_BLINDING;
	rsa->flags &= ~RSA_FLAG_NO_BLINDING;
	ret=1;
err:
	return(ret);
	}

static BIGNUM *rsa_get_public_exp(const BIGNUM *d, const BIGNUM *p,
	const BIGNUM *q, BN_CTX *ctx)
{
	BIGNUM *ret = NULL, *r0, *r1, *r2;

	if (d == NULL || p == NULL || q == NULL)
		return NULL;

	BN_CTX_start(ctx);
	r0 = BN_CTX_get(ctx);
	r1 = BN_CTX_get(ctx);
	r2 = BN_CTX_get(ctx);
	if (r2 == NULL)
		goto err;

	if (!BN_sub(r1, p, BN_value_one())) goto err;
	if (!BN_sub(r2, q, BN_value_one())) goto err;
	if (!BN_mul(r0, r1, r2, ctx)) goto err;

	ret = BN_mod_inverse(NULL, d, r0, ctx);
err:
	BN_CTX_end(ctx);
	return ret;
}

BN_BLINDING *RSA_setup_blinding(RSA *rsa, BN_CTX *in_ctx)
{
	BIGNUM local_n;
	BIGNUM *e,*n;
	BN_CTX *ctx;
	BN_BLINDING *ret = NULL;

	if (in_ctx == NULL)
d325 1
a325 1
		if ((ctx = BN_CTX_new()) == NULL) return 0;
d328 1
a328 1
		ctx = in_ctx;
d330 2
a331 3
	BN_CTX_start(ctx);
	e  = BN_CTX_get(ctx);
	if (e == NULL)
d333 2
a334 2
		RSAerr(RSA_F_RSA_SETUP_BLINDING, ERR_R_MALLOC_FAILURE);
		goto err;
d337 3
a339 11
	if (rsa->e == NULL)
		{
		e = rsa_get_public_exp(rsa->d, rsa->p, rsa->q, ctx);
		if (e == NULL)
			{
			RSAerr(RSA_F_RSA_SETUP_BLINDING, RSA_R_NO_PUBLIC_EXPONENT);
			goto err;
			}
		}
	else
		e = rsa->e;
d341 2
a342 1
	
d345 3
a347 3
		/* if PRNG is not properly seeded, resort to secret
		 * exponent as unpredictable seed */
		RAND_add(rsa->d->d, rsa->d->dmax * sizeof rsa->d->d[0], 0.0);
d349 1
a349 2

	if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME))
d351 1
a351 3
		/* Set BN_FLG_CONSTTIME flag */
		n = &local_n;
		BN_with_flags(n, rsa->n, BN_FLG_CONSTTIME);
d353 1
a353 2
	else
		n = rsa->n;
d355 1
a355 5
	ret = BN_BLINDING_create_param(NULL, e, n, ctx,
			rsa->meth->bn_mod_exp, rsa->_method_mod_n);
	if (ret == NULL)
		{
		RSAerr(RSA_F_RSA_SETUP_BLINDING, ERR_R_BN_LIB);
d357 7
a363 2
		}
	BN_BLINDING_set_thread_id(ret, CRYPTO_thread_id());
d365 1
d367 3
a369 7
	if (in_ctx == NULL)
		BN_CTX_free(ctx);
	if(rsa->e == NULL)
		BN_free(e);

	return ret;
}
d392 1
a392 1
		RSAerr(RSA_F_RSA_MEMORY_LOCK,ERR_R_MALLOC_FAILURE);
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@d70 209
a287 7
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_PRIVATE_ENCRYPT, RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return 0;
		}
#endif
a299 7
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_PUBLIC_DECRYPT, RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return 0;
		}
#endif
d303 1
a303 1
int RSA_size(const RSA *r)
d305 1
a305 1
	return(BN_num_bytes(r->n));
d430 45
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@a69 218
const char RSA_version[]="RSA" OPENSSL_VERSION_PTEXT;

static const RSA_METHOD *default_RSA_meth=NULL;

RSA *RSA_new(void)
	{
	RSA *r=RSA_new_method(NULL);

	return r;
	}

void RSA_set_default_method(const RSA_METHOD *meth)
	{
	default_RSA_meth = meth;
	}

const RSA_METHOD *RSA_get_default_method(void)
	{
	if (default_RSA_meth == NULL)
		{
#ifdef RSA_NULL
		default_RSA_meth=RSA_null_method();
#else
#if 0 /* was: #ifdef RSAref */
		default_RSA_meth=RSA_PKCS1_RSAref();
#else
		default_RSA_meth=RSA_PKCS1_SSLeay();
#endif
#endif
		}

	return default_RSA_meth;
	}

const RSA_METHOD *RSA_get_method(const RSA *rsa)
	{
	return rsa->meth;
	}

int RSA_set_method(RSA *rsa, const RSA_METHOD *meth)
	{
	/* NB: The caller is specifically setting a method, so it's not up to us
	 * to deal with which ENGINE it comes from. */
	const RSA_METHOD *mtmp;
	mtmp = rsa->meth;
	if (mtmp->finish) mtmp->finish(rsa);
#ifndef OPENSSL_NO_ENGINE
	if (rsa->engine)
		{
		ENGINE_finish(rsa->engine);
		rsa->engine = NULL;
		}
#endif
	rsa->meth = meth;
	if (meth->init) meth->init(rsa);
	return 1;
	}

RSA *RSA_new_method(ENGINE *engine)
	{
	RSA *ret;

	ret=(RSA *)OPENSSL_malloc(sizeof(RSA));
	if (ret == NULL)
		{
		RSAerr(RSA_F_RSA_NEW_METHOD,ERR_R_MALLOC_FAILURE);
		return NULL;
		}

	ret->meth = RSA_get_default_method();
#ifndef OPENSSL_NO_ENGINE
	if (engine)
		{
		if (!ENGINE_init(engine))
			{
			RSAerr(RSA_F_RSA_NEW_METHOD, ERR_R_ENGINE_LIB);
			OPENSSL_free(ret);
			return NULL;
			}
		ret->engine = engine;
		}
	else
		ret->engine = ENGINE_get_default_RSA();
	if(ret->engine)
		{
		ret->meth = ENGINE_get_RSA(ret->engine);
		if(!ret->meth)
			{
			RSAerr(RSA_F_RSA_NEW_METHOD,
				ERR_R_ENGINE_LIB);
			ENGINE_finish(ret->engine);
			OPENSSL_free(ret);
			return NULL;
			}
		}
#endif

	ret->pad=0;
	ret->version=0;
	ret->n=NULL;
	ret->e=NULL;
	ret->d=NULL;
	ret->p=NULL;
	ret->q=NULL;
	ret->dmp1=NULL;
	ret->dmq1=NULL;
	ret->iqmp=NULL;
	ret->references=1;
	ret->_method_mod_n=NULL;
	ret->_method_mod_p=NULL;
	ret->_method_mod_q=NULL;
	ret->blinding=NULL;
	ret->mt_blinding=NULL;
	ret->bignum_data=NULL;
	ret->flags=ret->meth->flags;
	if (!CRYPTO_new_ex_data(CRYPTO_EX_INDEX_RSA, ret, &ret->ex_data))
		{
#ifndef OPENSSL_NO_ENGINE
	if (ret->engine)
		ENGINE_finish(ret->engine);
#endif
		OPENSSL_free(ret);
		return(NULL);
		}

	if ((ret->meth->init != NULL) && !ret->meth->init(ret))
		{
#ifndef OPENSSL_NO_ENGINE
		if (ret->engine)
			ENGINE_finish(ret->engine);
#endif
		CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RSA, ret, &ret->ex_data);
		OPENSSL_free(ret);
		ret=NULL;
		}
	return(ret);
	}

void RSA_free(RSA *r)
	{
	int i;

	if (r == NULL) return;

	i=CRYPTO_add(&r->references,-1,CRYPTO_LOCK_RSA);
#ifdef REF_PRINT
	REF_PRINT("RSA",r);
#endif
	if (i > 0) return;
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"RSA_free, bad reference count\n");
		abort();
		}
#endif

	if (r->meth->finish)
		r->meth->finish(r);
#ifndef OPENSSL_NO_ENGINE
	if (r->engine)
		ENGINE_finish(r->engine);
#endif

	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RSA, r, &r->ex_data);

	if (r->n != NULL) BN_clear_free(r->n);
	if (r->e != NULL) BN_clear_free(r->e);
	if (r->d != NULL) BN_clear_free(r->d);
	if (r->p != NULL) BN_clear_free(r->p);
	if (r->q != NULL) BN_clear_free(r->q);
	if (r->dmp1 != NULL) BN_clear_free(r->dmp1);
	if (r->dmq1 != NULL) BN_clear_free(r->dmq1);
	if (r->iqmp != NULL) BN_clear_free(r->iqmp);
	if (r->blinding != NULL) BN_BLINDING_free(r->blinding);
	if (r->mt_blinding != NULL) BN_BLINDING_free(r->mt_blinding);
	if (r->bignum_data != NULL) OPENSSL_free_locked(r->bignum_data);
	OPENSSL_free(r);
	}

int RSA_up_ref(RSA *r)
	{
	int i = CRYPTO_add(&r->references, 1, CRYPTO_LOCK_RSA);
#ifdef REF_PRINT
	REF_PRINT("RSA",r);
#endif
#ifdef REF_CHECK
	if (i < 2)
		{
		fprintf(stderr, "RSA_up_ref, bad reference count\n");
		abort();
		}
#endif
	return ((i > 1) ? 1 : 0);
	}

int RSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
        {
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_RSA, argl, argp,
				new_func, dup_func, free_func);
        }

int RSA_set_ex_data(RSA *r, int idx, void *arg)
	{
	return(CRYPTO_set_ex_data(&r->ex_data,idx,arg));
	}

void *RSA_get_ex_data(const RSA *r, int idx)
	{
	return(CRYPTO_get_ex_data(&r->ex_data,idx));
	}

int RSA_size(const RSA *r)
	{
	return(BN_num_bytes(r->n));
	}

d79 7
d98 7
d108 1
a108 1
int RSA_flags(const RSA *r)
d110 1
a110 1
	return((r == NULL)?0:r->meth->flags);
d225 1
a225 1
	CRYPTO_THREADID_current(BN_BLINDING_thread_id(ret));
a234 45

int RSA_memory_lock(RSA *r)
	{
	int i,j,k,off;
	char *p;
	BIGNUM *bn,**t[6],*b;
	BN_ULONG *ul;

	if (r->d == NULL) return(1);
	t[0]= &r->d;
	t[1]= &r->p;
	t[2]= &r->q;
	t[3]= &r->dmp1;
	t[4]= &r->dmq1;
	t[5]= &r->iqmp;
	k=sizeof(BIGNUM)*6;
	off=k/sizeof(BN_ULONG)+1;
	j=1;
	for (i=0; i<6; i++)
		j+= (*t[i])->top;
	if ((p=OPENSSL_malloc_locked((off+j)*sizeof(BN_ULONG))) == NULL)
		{
		RSAerr(RSA_F_RSA_MEMORY_LOCK,ERR_R_MALLOC_FAILURE);
		return(0);
		}
	bn=(BIGNUM *)p;
	ul=(BN_ULONG *)&(p[off]);
	for (i=0; i<6; i++)
		{
		b= *(t[i]);
		*(t[i])= &(bn[i]);
		memcpy((char *)&(bn[i]),(char *)b,sizeof(BIGNUM));
		bn[i].flags=BN_FLG_STATIC_DATA;
		bn[i].d=ul;
		memcpy((char *)ul,b->d,sizeof(BN_ULONG)*b->top);
		ul+=b->top;
		BN_clear_free(b);
		}
	
	/* I should fix this so it can still be done */
	r->flags&= ~(RSA_FLAG_CACHE_PRIVATE|RSA_FLAG_CACHE_PUBLIC);

	r->bignum_data=p;
	return(1);
	}
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a69 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a89 6
#ifdef OPENSSL_FIPS
		if (FIPS_mode())
			return FIPS_rsa_pkcs1_ssleay();
		else
			return RSA_PKCS1_SSLeay();
#else
d93 3
d184 1
a184 1
	ret->flags=ret->meth->flags & ~RSA_FLAG_NON_FIPS_ALLOW;
d282 157
@


