head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.6
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.9;
commitid	kT0fLt3r4lroFJra;

1.9
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.8;
commitid	8tb4v3IC8S2vzfHj;

1.8
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.7;
commitid	yQEL1wOWIearrW15;

1.7
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.6;
commitid	id8dTrTMtnTn4fqt;

1.6
date	2014.07.10.11.25.13;	author tedu;	state Exp;
branches;
next	1.5;
commitid	Pv7aSK7aYL3NQSpP;

1.5
date	2014.07.09.19.51.38;	author jsing;	state Exp;
branches;
next	1.4;
commitid	1XPBWlejiS4drgFK;

1.4
date	2014.07.09.09.07.00;	author miod;	state Exp;
branches;
next	1.3;
commitid	Mfajpnf7IC2r4wWe;

1.3
date	2014.07.09.08.20.08;	author miod;	state Exp;
branches;
next	1.2;
commitid	JPwi7kYvSgWTaIWo;

1.2
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	mJUVYpkFBZ0Zv2bG;

1.1
date	2006.06.27.05.05.35;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.06.27.05.05.35;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.59;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: rsa_x931.c,v 1.9 2014/10/18 17:20:40 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2005.
 */
/* ====================================================================
 * Copyright (c) 2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/rsa.h>

int
RSA_padding_add_X931(unsigned char *to, int tlen, const unsigned char *from,
    int flen)
{
	int j;
	unsigned char *p;

	/*
	 * Absolute minimum amount of padding is 1 header nibble, 1 padding
	 * nibble and 2 trailer bytes: but 1 hash if is already in 'from'.
	 */
	j = tlen - flen - 2;

	if (j < 0) {
		RSAerror(RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
		return -1;
	}

	p = (unsigned char *)to;

	/* If no padding start and end nibbles are in one byte */
	if (j == 0)
		*p++ = 0x6A;
	else {
		*p++ = 0x6B;
		if (j > 1) {
			memset(p, 0xBB, j - 1);
			p += j - 1;
		}
		*p++ = 0xBA;
	}
	memcpy(p, from, flen);
	p += flen;
	*p = 0xCC;
	return 1;
}

int
RSA_padding_check_X931(unsigned char *to, int tlen, const unsigned char *from,
    int flen, int num)
{
	int i = 0, j;
	const unsigned char *p = from;

	if (num != flen || (*p != 0x6A && *p != 0x6B)) {
		RSAerror(RSA_R_INVALID_HEADER);
		return -1;
	}

	if (*p++ == 0x6B) {
		j = flen - 3;
		for (i = 0; i < j; i++) {
			unsigned char c = *p++;
			if (c == 0xBA)
				break;
			if (c != 0xBB) {
				RSAerror(RSA_R_INVALID_PADDING);
				return -1;
			}
		}

		if (i == 0) {
			RSAerror(RSA_R_INVALID_PADDING);
			return -1;
		}

		j -= i;
	} else
		j = flen - 2;

	if (j < 0 || p[j] != 0xCC) {
		RSAerror(RSA_R_INVALID_TRAILER);
		return -1;
	}

	memcpy(to, p, j);

	return j;
}

/* Translate between X931 hash ids and NIDs */

int
RSA_X931_hash_id(int nid)
{
	switch (nid) {
	case NID_sha1:
		return 0x33;
	case NID_sha256:
		return 0x34;
	case NID_sha384:
		return 0x36;
	case NID_sha512:
		return 0x35;
	}

	return -1;
}
@


1.9
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_x931.c,v 1.8 2014/07/11 08:44:49 jsing Exp $ */
d81 1
a81 2
		RSAerr(RSA_F_RSA_PADDING_ADD_X931,
		    RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
d112 1
a112 1
		RSAerr(RSA_F_RSA_PADDING_CHECK_X931, RSA_R_INVALID_HEADER);
d123 1
a123 2
				RSAerr(RSA_F_RSA_PADDING_CHECK_X931,
				    RSA_R_INVALID_PADDING);
d129 1
a129 2
			RSAerr(RSA_F_RSA_PADDING_CHECK_X931,
			    RSA_R_INVALID_PADDING);
d138 1
a138 1
		RSAerr(RSA_F_RSA_PADDING_CHECK_X931, RSA_R_INVALID_TRAILER);
@


1.8
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_x931.c,v 1.7 2014/07/10 13:58:23 jsing Exp $ */
a64 1
#include <openssl/rand.h>
@


1.7
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_x931.c,v 1.6 2014/07/10 11:25:13 tedu Exp $ */
a61 1
#include "cryptlib.h"
d63 3
a66 2
#include <openssl/rand.h>
#include <openssl/objects.h>
@


1.6
log
@delete some casts. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_x931.c,v 1.5 2014/07/09 19:51:38 jsing Exp $ */
d60 2
@


1.5
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_x931.c,v 1.4 2014/07/09 09:07:00 miod Exp $ */
d98 1
a98 1
	memcpy(p, from, (unsigned int)flen);
d144 1
a144 1
	memcpy(to, p, (unsigned int)j);
@


1.4
log
@Be more strict in RSA_padding_check_X931(), and thus avoid a possible
memcpy() with a negative size.
ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_x931.c,v 1.3 2014/07/09 08:20:08 miod Exp $ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d84 1
a84 1
	
d106 1
a106 1
   int flen, int num)
d124 1
a124 1
					RSA_R_INVALID_PADDING);
d130 2
a131 1
			RSAerr(RSA_F_RSA_PADDING_CHECK_X931, RSA_R_INVALID_PADDING);
@


1.3
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_x931.c,v 1.2 2014/06/12 15:49:30 deraadt Exp $ */
d138 1
a138 1
	if (p[j] != 0xCC) {
@


1.2
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d66 4
a69 3
int RSA_padding_add_X931(unsigned char *to, int tlen,
	     const unsigned char *from, int flen)
	{
d73 2
a74 1
	/* Absolute minimum amount of padding is 1 header nibble, 1 padding
a76 1

d79 3
a81 3
	if (j < 0)
		{
		RSAerr(RSA_F_RSA_PADDING_ADD_X931,RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
d83 1
a83 1
		}
d85 1
a85 1
	p=(unsigned char *)to;
d90 1
a90 2
	else
		{
d92 1
a92 2
		if (j > 1)
			{
d95 1
a95 1
			}
d97 2
a98 2
		}
	memcpy(p,from,(unsigned int)flen);
d101 9
a109 2
	return(1);
	}
d111 2
a112 10
int RSA_padding_check_X931(unsigned char *to, int tlen,
	     const unsigned char *from, int flen, int num)
	{
	int i = 0,j;
	const unsigned char *p;

	p=from;
	if ((num != flen) || ((*p != 0x6A) && (*p != 0x6B)))
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_X931,RSA_R_INVALID_HEADER);
d114 1
a114 1
		}
d116 3
a118 5
	if (*p++ == 0x6B)
		{
		j=flen-3;
		for (i = 0; i < j; i++)
			{
d122 1
a122 2
			if (c != 0xBB)
				{
a125 1
				}
d127 1
d129 1
a129 4
		j -= i;

		if (i == 0)
			{
d132 1
a132 1
			}
d134 3
a136 2
		}
	else j = flen - 2;
d138 1
a138 2
	if (p[j] != 0xCC)
		{
d141 1
a141 1
		}
d143 1
a143 1
	memcpy(to,p,(unsigned int)j);
d145 2
a146 2
	return(j);
	}
d150 5
a154 5
int RSA_X931_hash_id(int nid)
	{
	switch (nid)
		{
		case NID_sha1:
d156 1
a156 2

		case NID_sha256:
d158 1
a158 2

		case NID_sha384:
d160 1
a160 2

		case NID_sha512:
d162 1
a163 1
		}
d165 1
a165 2
	}

@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/* rsa_x931.c */
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
d108 1
a108 1
	int i,j;
@


1.1.1.1
log
@import of openssl-0.9.7j
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d108 1
a108 1
	int i = 0,j;
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


