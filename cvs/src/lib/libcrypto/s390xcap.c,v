head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.04.15.13.41.53;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.02;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.02;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.33;	author djm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@tags as requested by miod and tedu
@
text
@/* $OpenBSD$ */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <setjmp.h>
#include <signal.h>

extern unsigned long OPENSSL_s390xcap_P[];

static sigjmp_buf ill_jmp;
static void ill_handler (int sig)
{
	siglongjmp(ill_jmp, sig);
}

unsigned long OPENSSL_s390x_facilities(void);

void
OPENSSL_cpuid_setup(void)
{
	sigset_t oset;
	struct sigaction ill_act, oact;

	if (OPENSSL_s390xcap_P[0])
		return;

	OPENSSL_s390xcap_P[0] = 1UL << (8*sizeof(unsigned long) - 1);

	memset(&ill_act, 0, sizeof(ill_act));
	ill_act.sa_handler = ill_handler;
	sigfillset(&ill_act.sa_mask);
	sigdelset(&ill_act.sa_mask, SIGILL);
	sigdelset(&ill_act.sa_mask, SIGTRAP);
	sigprocmask(SIG_SETMASK, &ill_act.sa_mask, &oset);
	sigaction (SIGILL, &ill_act, &oact);

	/* protection against missing store-facility-list-extended */
	if (sigsetjmp(ill_jmp, 1) == 0)
		OPENSSL_s390x_facilities();

	sigaction (SIGILL, &oact, NULL);
	sigprocmask(SIG_SETMASK, &oset, NULL);
}
@


1.2
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
extern unsigned long OPENSSL_s390xcap_P;
d10 4
a13 1
static void ill_handler (int sig) { siglongjmp(ill_jmp,sig); }
d17 3
a19 2
void OPENSSL_cpuid_setup(void)
	{
d21 1
a21 1
	struct sigaction ill_act,oact;
d23 2
a24 1
	if (OPENSSL_s390xcap_P) return;
d26 3
a28 1
	memset(&ill_act,0,sizeof(ill_act));
d31 4
a34 4
	sigdelset(&ill_act.sa_mask,SIGILL);
	sigdelset(&ill_act.sa_mask,SIGTRAP);
	sigprocmask(SIG_SETMASK,&ill_act.sa_mask,&oset);
	sigaction (SIGILL,&ill_act,&oact);
d37 6
a42 8
	if (sigsetjmp(ill_jmp,0) == 0)
		OPENSSL_s390xcap_P = OPENSSL_s390x_facilities();
	else
		OPENSSL_s390xcap_P = 1UL<<63;

	sigaction (SIGILL,&oact,NULL);
	sigprocmask(SIG_SETMASK,&oset,NULL);
	}
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@d7 1
a7 1
extern unsigned long OPENSSL_s390xcap_P[];
d19 1
a19 3
	if (OPENSSL_s390xcap_P[0]) return;

	OPENSSL_s390xcap_P[0] = 1UL<<(8*sizeof(unsigned long)-1);
d30 4
a33 2
	if (sigsetjmp(ill_jmp,1) == 0)
		OPENSSL_s390x_facilities();
@

