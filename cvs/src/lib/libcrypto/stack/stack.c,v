head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.2
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19;
locks; strict;
comment	@ * @;


1.19
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.18;
commitid	gtwLkRyWx0K1HbzX;

1.18
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.16;
commitid	id8dTrTMtnTn4fqt;

1.16
date	2014.07.09.11.10.51;	author bcook;	state Exp;
branches;
next	1.15;
commitid	lHJTcoC4c5BhEOGj;

1.15
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.05.22.21.12.16;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2014.05.17.20.15.50;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.05.17.17.35.04;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.20.13.54.10;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.27;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.11.51;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.47;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.48;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.48;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.56;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.17;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.10;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@/* $OpenBSD: stack.c,v 1.18 2014/07/11 08:44:49 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/objects.h>
#include <openssl/stack.h>

#undef MIN_NODES
#define MIN_NODES	4

#include <errno.h>

int
(*sk_set_cmp_func(_STACK *sk, int (*c)(const void *, const void *)))(
    const void *, const void *)
{
	int (*old)(const void *, const void *) = sk->comp;

	if (sk->comp != c)
		sk->sorted = 0;
	sk->comp = c;

	return old;
}

_STACK *
sk_dup(_STACK *sk)
{
	_STACK *ret;
	char **s;

	if ((ret = sk_new(sk->comp)) == NULL)
		goto err;
	s = reallocarray(ret->data, sk->num_alloc, sizeof(char *));
	if (s == NULL)
		goto err;
	ret->data = s;

	ret->num = sk->num;
	memcpy(ret->data, sk->data, sizeof(char *) * sk->num);
	ret->sorted = sk->sorted;
	ret->num_alloc = sk->num_alloc;
	ret->comp = sk->comp;
	return (ret);

err:
	if (ret)
		sk_free(ret);
	return (NULL);
}

_STACK *
sk_new_null(void)
{
	return sk_new((int (*)(const void *, const void *))0);
}

_STACK *
sk_new(int (*c)(const void *, const void *))
{
	_STACK *ret;
	int i;

	if ((ret = malloc(sizeof(_STACK))) == NULL)
		goto err;
	if ((ret->data = reallocarray(NULL, MIN_NODES, sizeof(char *))) == NULL)
		goto err;
	for (i = 0; i < MIN_NODES; i++)
		ret->data[i] = NULL;
	ret->comp = c;
	ret->num_alloc = MIN_NODES;
	ret->num = 0;
	ret->sorted = 0;
	return (ret);

err:
	free(ret);
	return (NULL);
}

int
sk_insert(_STACK *st, void *data, int loc)
{
	char **s;

	if (st == NULL)
		return 0;
	if (st->num_alloc <= st->num + 1) {
		s = reallocarray(st->data, st->num_alloc, 2 * sizeof(char *));
		if (s == NULL)
			return (0);
		st->data = s;
		st->num_alloc *= 2;
	}
	if ((loc >= (int)st->num) || (loc < 0))
		st->data[st->num] = data;
	else {
		memmove(&(st->data[loc + 1]), &(st->data[loc]),
		    sizeof(char *)*(st->num - loc));
		st->data[loc] = data;
	}
	st->num++;
	st->sorted = 0;
	return (st->num);
}

void *
sk_delete_ptr(_STACK *st, void *p)
{
	int i;

	for (i = 0; i < st->num; i++)
		if (st->data[i] == p)
			return (sk_delete(st, i));
	return (NULL);
}

void *
sk_delete(_STACK *st, int loc)
{
	char *ret;

	if (!st || (loc < 0) || (loc >= st->num))
		return NULL;

	ret = st->data[loc];
	if (loc != st->num - 1) {
		memmove(&(st->data[loc]), &(st->data[loc + 1]),
		    sizeof(char *)*(st->num - 1 - loc));
	}
	st->num--;
	return (ret);
}

static int
internal_find(_STACK *st, void *data, int ret_val_options)
{
	const void * const *r;
	int i;

	if (st == NULL)
		return -1;

	if (st->comp == NULL) {
		for (i = 0; i < st->num; i++)
			if (st->data[i] == data)
				return (i);
		return (-1);
	}
	sk_sort(st);
	if (data == NULL)
		return (-1);
	r = OBJ_bsearch_ex_(&data, st->data, st->num, sizeof(void *), st->comp,
	    ret_val_options);
	if (r == NULL)
		return (-1);
	return (int)((char **)r - st->data);
}

int
sk_find(_STACK *st, void *data)
{
	return internal_find(st, data, OBJ_BSEARCH_FIRST_VALUE_ON_MATCH);
}

int
sk_find_ex(_STACK *st, void *data)
{
	return internal_find(st, data, OBJ_BSEARCH_VALUE_ON_NOMATCH);
}

int
sk_push(_STACK *st, void *data)
{
	return (sk_insert(st, data, st->num));
}

int
sk_unshift(_STACK *st, void *data)
{
	return (sk_insert(st, data, 0));
}

void *
sk_shift(_STACK *st)
{
	if (st == NULL)
		return (NULL);
	if (st->num <= 0)
		return (NULL);
	return (sk_delete(st, 0));
}

void *
sk_pop(_STACK *st)
{
	if (st == NULL)
		return (NULL);
	if (st->num <= 0)
		return (NULL);
	return (sk_delete(st, st->num - 1));
}

void
sk_zero(_STACK *st)
{
	if (st == NULL)
		return;
	if (st->num <= 0)
		return;
	memset(st->data, 0, sizeof(st->data)*st->num);
	st->num = 0;
}

void
sk_pop_free(_STACK *st, void (*func)(void *))
{
	int i;

	if (st == NULL)
		return;
	for (i = 0; i < st->num; i++)
		if (st->data[i] != NULL)
			func(st->data[i]);
	sk_free(st);
}

void
sk_free(_STACK *st)
{
	if (st == NULL)
		return;
	free(st->data);
	free(st);
}

int
sk_num(const _STACK *st)
{
	if (st == NULL)
		return -1;
	return st->num;
}

void *
sk_value(const _STACK *st, int i)
{
	if (!st || (i < 0) || (i >= st->num))
		return NULL;
	return st->data[i];
}

void *
sk_set(_STACK *st, int i, void *value)
{
	if (!st || (i < 0) || (i >= st->num))
		return NULL;
	return (st->data[i] = value);
}

void
sk_sort(_STACK *st)
{
	if (st && !st->sorted) {
		int (*comp_func)(const void *, const void *);

		/* same comment as in sk_find ... previously st->comp was declared
		 * as a (void*,void*) callback type, but this made the population
		 * of the callback pointer illogical - our callbacks compare
		 * type** with type**, so we leave the casting until absolutely
		 * necessary (ie. "now"). */
		comp_func = (int (*)(const void *, const void *))(st->comp);
		qsort(st->data, st->num, sizeof(char *), comp_func);
		st->sorted = 1;
	}
}

int
sk_is_sorted(const _STACK *st)
{
	if (!st)
		return 1;
	return st->sorted;
}
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: stack.c,v 1.17 2014/07/10 13:58:23 jsing Exp $ */
a56 10
 */

/* Code for stacks
 * Author - Eric Young v 1.0
 * 1.2 eay 12-Mar-97 -	Modified sk_find so that it _DOES_ return the
 *			lowest index for the searched item.
 *
 * 1.1 eay - Take from netdb and added to SSLeay
 *
 * 1.0 eay - First version 29/07/92
@


1.17
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: stack.c,v 1.16 2014/07/09 11:10:51 bcook Exp $ */
d72 1
a72 1
#include "cryptlib.h"
a73 1
#include <openssl/objects.h>
@


1.16
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: stack.c,v 1.15 2014/06/12 15:49:30 deraadt Exp $ */
d68 1
d70 2
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a74 2

const char STACK_version[]="Stack" OPENSSL_VERSION_PTEXT;
@


1.14
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/stack/stack.c */
@


1.13
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@d300 1
a300 2
	if (st->data != NULL)
		free(st->data);
@


1.12
log
@does sunos not have memmove? sorry, i guess sunos will not have libressl.
ok guenther miod
@
text
@d144 1
a144 2
	if (ret)
		free(ret);
@


1.11
log
@simple reallocarray to check multiplies. ok guenther
@
text
@d166 1
a166 11
		int i;
		char **f, **t;

		f = st->data;
		t = &(st->data[1]);
		for (i = st->num; i >= loc; i--)
			t[i] = f[i];

#ifdef undef /* no memmove on sunos :-( */
		memmove(&(st->data[loc + 1]),
		    &(st->data[loc]),
a167 1
#endif
a189 1
	int i, j;
d196 2
a197 8
		j = st->num - 1;
		for (i = loc; i < j; i++)
			st->data[i] = st->data[i + 1];
		/* In theory memcpy is not safe for this
		 * memcpy( &(st->data[loc]),
		 *	&(st->data[loc+1]),
		 *	sizeof(char *)*(st->num-loc-1));
		 */
@


1.10
log
@KNF.
@
text
@d101 1
a101 2
	s = (char **)realloc((char *)ret->data,
	    (unsigned int)sizeof(char *) * sk->num_alloc);
d133 1
a133 1
	if ((ret->data = malloc(sizeof(char *) * MIN_NODES)) == NULL)
d157 1
a157 2
		s = realloc((char *)st->data,
		    (unsigned int)sizeof(char *) * st->num_alloc * 2);
d297 1
a297 1
	memset((char *)st->data, 0, sizeof(st->data)*st->num);
@


1.9
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d80 5
a84 4
int (*sk_set_cmp_func(_STACK *sk, int (*c)(const void *, const void *)))
		(const void *, const void *)
	{
	int (*old)(const void *,const void *)=sk->comp;
d87 2
a88 2
		sk->sorted=0;
	sk->comp=c;
d91 1
a91 1
	}
d93 3
a95 2
_STACK *sk_dup(_STACK *sk)
	{
d99 15
a113 12
	if ((ret=sk_new(sk->comp)) == NULL) goto err;
	s=(char **)realloc((char *)ret->data,
		(unsigned int)sizeof(char *)*sk->num_alloc);
	if (s == NULL) goto err;
	ret->data=s;

	ret->num=sk->num;
	memcpy(ret->data,sk->data,sizeof(char *)*sk->num);
	ret->sorted=sk->sorted;
	ret->num_alloc=sk->num_alloc;
	ret->comp=sk->comp;
	return(ret);
d115 1
a115 1
	if(ret)
d117 2
a118 2
	return(NULL);
	}
d120 3
a122 2
_STACK *sk_new_null(void)
	{
d124 1
a124 1
	}
d126 3
a128 2
_STACK *sk_new(int (*c)(const void *, const void *))
	{
d132 1
a132 1
	if ((ret=malloc(sizeof(_STACK))) == NULL)
d134 1
a134 1
	if ((ret->data=malloc(sizeof(char *)*MIN_NODES)) == NULL)
d136 8
a143 7
	for (i=0; i<MIN_NODES; i++)
		ret->data[i]=NULL;
	ret->comp=c;
	ret->num_alloc=MIN_NODES;
	ret->num=0;
	ret->sorted=0;
	return(ret);
d145 1
a145 1
	if(ret)
d147 2
a148 2
	return(NULL);
	}
d150 3
a152 2
int sk_insert(_STACK *st, void *data, int loc)
	{
d155 5
a159 5
	if(st == NULL) return 0;
	if (st->num_alloc <= st->num+1)
		{
		s=realloc((char *)st->data,
			(unsigned int)sizeof(char *)*st->num_alloc*2);
d161 4
a164 4
			return(0);
		st->data=s;
		st->num_alloc*=2;
		}
d166 2
a167 3
		st->data[st->num]=data;
	else
		{
d169 6
a174 1
		char **f,**t;
a175 5
		f=st->data;
		t=&(st->data[1]);
		for (i=st->num; i>=loc; i--)
			t[i]=f[i];
			
d177 3
a179 3
		memmove(&(st->data[loc+1]),
			&(st->data[loc]),
			sizeof(char *)*(st->num-loc));
d181 2
a182 2
		st->data[loc]=data;
		}
d184 3
a186 3
	st->sorted=0;
	return(st->num);
	}
d188 3
a190 2
void *sk_delete_ptr(_STACK *st, void *p)
	{
d193 1
a193 1
	for (i=0; i<st->num; i++)
d195 3
a197 3
			return(sk_delete(st,i));
	return(NULL);
	}
d199 3
a201 2
void *sk_delete(_STACK *st, int loc)
	{
d203 1
a203 1
	int i,j;
d205 2
a206 1
	if(!st || (loc < 0) || (loc >= st->num)) return NULL;
d208 5
a212 6
	ret=st->data[loc];
	if (loc != st->num-1)
		{
		j=st->num-1;
		for (i=loc; i<j; i++)
			st->data[i]=st->data[i+1];
d218 1
a218 1
		}
d220 2
a221 2
	return(ret);
	}
d223 3
a225 2
static int internal_find(_STACK *st, void *data, int ret_val_options)
	{
d229 2
a230 1
	if(st == NULL) return -1;
d232 2
a233 3
	if (st->comp == NULL)
		{
		for (i=0; i<st->num; i++)
d235 3
a237 3
				return(i);
		return(-1);
		}
d239 8
a246 6
	if (data == NULL) return(-1);
	r=OBJ_bsearch_ex_(&data,st->data,st->num,sizeof(void *),st->comp,
			  ret_val_options);
	if (r == NULL) return(-1);
	return (int)((char **)r-st->data);
	}
d248 3
a250 2
int sk_find(_STACK *st, void *data)
	{
d252 5
a256 3
	}
int sk_find_ex(_STACK *st, void *data)
	{
d258 1
a258 1
	}
d260 5
a264 4
int sk_push(_STACK *st, void *data)
	{
	return(sk_insert(st,data,st->num));
	}
d266 5
a270 4
int sk_unshift(_STACK *st, void *data)
	{
	return(sk_insert(st,data,0));
	}
d272 9
a280 6
void *sk_shift(_STACK *st)
	{
	if (st == NULL) return(NULL);
	if (st->num <= 0) return(NULL);
	return(sk_delete(st,0));
	}
d282 9
a290 6
void *sk_pop(_STACK *st)
	{
	if (st == NULL) return(NULL);
	if (st->num <= 0) return(NULL);
	return(sk_delete(st,st->num-1));
	}
d292 10
a301 7
void sk_zero(_STACK *st)
	{
	if (st == NULL) return;
	if (st->num <= 0) return;
	memset((char *)st->data,0,sizeof(st->data)*st->num);
	st->num=0;
	}
d303 3
a305 2
void sk_pop_free(_STACK *st, void (*func)(void *))
	{
d308 3
a310 2
	if (st == NULL) return;
	for (i=0; i<st->num; i++)
d314 1
a314 1
	}
d316 7
a322 4
void sk_free(_STACK *st)
	{
	if (st == NULL) return;
	if (st->data != NULL) free(st->data);
d324 1
a324 1
	}
d326 2
a327 1
int sk_num(const _STACK *st)
d329 2
a330 1
	if(st == NULL) return -1;
d334 2
a335 1
void *sk_value(const _STACK *st, int i)
d337 2
a338 1
	if(!st || (i < 0) || (i >= st->num)) return NULL;
d342 2
a343 1
void *sk_set(_STACK *st, int i, void *value)
d345 2
a346 1
	if(!st || (i < 0) || (i >= st->num)) return NULL;
d350 5
a354 5
void sk_sort(_STACK *st)
	{
	if (st && !st->sorted)
		{
		int (*comp_func)(const void *,const void *);
d361 3
a363 4
		comp_func=(int (*)(const void *,const void *))(st->comp);
		qsort(st->data,st->num,sizeof(char *), comp_func);
		st->sorted=1;
		}
d365 1
d367 3
a369 2
int sk_is_sorted(const _STACK *st)
	{
d373 1
a373 1
	}
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d98 1
a98 1
	s=(char **)OPENSSL_realloc((char *)ret->data,
d125 1
a125 1
	if ((ret=OPENSSL_malloc(sizeof(_STACK))) == NULL)
d127 1
a127 1
	if ((ret->data=OPENSSL_malloc(sizeof(char *)*MIN_NODES)) == NULL)
d138 1
a138 1
		OPENSSL_free(ret);
d149 1
a149 1
		s=OPENSSL_realloc((char *)st->data,
d290 2
a291 2
	if (st->data != NULL) OPENSSL_free(st->data);
	OPENSSL_free(st);
@


1.7
log
@resolve conflicts
@
text
@d80 2
a81 2
int (*sk_set_cmp_func(STACK *sk, int (*c)(const char * const *,const char * const *)))
		(const char * const *, const char * const *)
d83 1
a83 1
	int (*old)(const char * const *,const char * const *)=sk->comp;
d92 1
a92 1
STACK *sk_dup(STACK *sk)
d94 1
a94 1
	STACK *ret;
d115 1
a115 1
STACK *sk_new_null(void)
d117 1
a117 1
	return sk_new((int (*)(const char * const *, const char * const *))0);
d120 1
a120 1
STACK *sk_new(int (*c)(const char * const *, const char * const *))
d122 1
a122 1
	STACK *ret;
d125 1
a125 1
	if ((ret=(STACK *)OPENSSL_malloc(sizeof(STACK))) == NULL)
d127 1
a127 1
	if ((ret->data=(char **)OPENSSL_malloc(sizeof(char *)*MIN_NODES)) == NULL)
d142 1
a142 1
int sk_insert(STACK *st, char *data, int loc)
d149 1
a149 1
		s=(char **)OPENSSL_realloc((char *)st->data,
d163 2
a164 2
		f=(char **)st->data;
		t=(char **)&(st->data[1]);
d169 2
a170 2
		memmove( (char *)&(st->data[loc+1]),
			(char *)&(st->data[loc]),
d180 1
a180 1
char *sk_delete_ptr(STACK *st, char *p)
d190 1
a190 1
char *sk_delete(STACK *st, int loc)
d213 1
a213 1
static int internal_find(STACK *st, char *data, int ret_val_options)
d215 1
a215 1
	char **r;
d217 1
a217 1
	int (*comp_func)(const void *,const void *);
d229 2
a230 9
	/* This (and the "qsort" below) are the two places in OpenSSL
	 * where we need to convert from our standard (type **,type **)
	 * compare callback type to the (void *,void *) type required by
	 * bsearch. However, the "data" it is being called(back) with are
	 * not (type *) pointers, but the *pointers* to (type *) pointers,
	 * so we get our extra level of pointer dereferencing that way. */
	comp_func=(int (*)(const void *,const void *))(st->comp);
	r=(char **)OBJ_bsearch_ex((char *)&data,(char *)st->data,
		st->num,sizeof(char *),comp_func,ret_val_options);
d232 1
a232 1
	return((int)(r-st->data));
d235 1
a235 1
int sk_find(STACK *st, char *data)
d239 1
a239 1
int sk_find_ex(STACK *st, char *data)
d244 1
a244 1
int sk_push(STACK *st, char *data)
d249 1
a249 1
int sk_unshift(STACK *st, char *data)
d254 1
a254 1
char *sk_shift(STACK *st)
d261 1
a261 1
char *sk_pop(STACK *st)
d268 1
a268 1
void sk_zero(STACK *st)
d276 1
a276 1
void sk_pop_free(STACK *st, void (*func)(void *))
d287 1
a287 1
void sk_free(STACK *st)
d294 1
a294 1
int sk_num(const STACK *st)
d300 1
a300 1
char *sk_value(const STACK *st, int i)
d306 1
a306 1
char *sk_set(STACK *st, int i, char *value)
d312 1
a312 1
void sk_sort(STACK *st)
d329 1
a329 1
int sk_is_sorted(const STACK *st)
@


1.6
log
@resolve conflicts
@
text
@d71 1
d76 1
a76 1
const char *STACK_version="Stack" OPENSSL_VERSION_PTEXT;
d213 1
a213 1
int sk_find(STACK *st, char *data)
d236 2
a237 2
	r=(char **)bsearch(&data,(char *)st->data,
		st->num,sizeof(char *), comp_func);
d239 10
a248 10
	i=(int)(r-st->data);
	for ( ; i>0; i--)
		/* This needs a cast because the type being pointed to from
		 * the "&" expressions are (char *) rather than (const char *).
		 * For an explanation, read:
		 * http://www.eskimo.com/~scs/C-faq/q11.10.html :-) */
		if ((*st->comp)((const char * const *)&(st->data[i-1]),
				(const char * const *)&data) < 0)
			break;
	return(i);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d194 1
a194 2
	if ((st == NULL) || (st->num == 0) || (loc < 0)
					 || (loc >= st->num)) return(NULL);
d308 1
a308 1
	if(st == NULL) return NULL;
d314 1
a314 1
	if(st == NULL) return NULL;
d333 7
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d109 2
d125 1
a125 1
		goto err0;
d127 1
a127 1
		goto err1;
d135 3
a137 3
err1:
	OPENSSL_free(ret);
err0:
d321 1
a321 1
	if (!st->sorted)
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@a76 1
#define	FP_ICC	(int (*)(const void *,const void *))
d79 2
a80 1
int (*sk_set_cmp_func(STACK *sk, int (*c)()))(void)
d82 1
a82 1
	int (*old)()=sk->comp;
d97 1
a97 1
	s=(char **)Realloc((char *)ret->data,
d112 6
a117 1
STACK *sk_new(int (*c)())
d122 1
a122 1
	if ((ret=(STACK *)Malloc(sizeof(STACK))) == NULL)
d124 1
a124 1
	if ((ret->data=(char **)Malloc(sizeof(char *)*MIN_NODES)) == NULL)
d134 1
a134 1
	Free(ret);
d146 1
a146 1
		s=(char **)Realloc((char *)st->data,
d215 1
a215 1
	int (*comp_func)();
d227 7
a233 1
	comp_func=(int (*)())st->comp;
d235 1
a235 1
		st->num,sizeof(char *),FP_ICC comp_func);
d239 6
a244 1
		if ((*st->comp)(&(st->data[i-1]),&data) < 0)
d281 1
a281 1
void sk_pop_free(STACK *st, void (*func)())
d295 2
a296 2
	if (st->data != NULL) Free(st->data);
	Free(st);
d299 1
a299 1
int sk_num(STACK *st)
d305 1
a305 1
char *sk_value(STACK *st, int i)
a317 2
    {
    if (!st->sorted)
d319 3
a321 1
	int (*comp_func)();
d323 9
a331 3
	comp_func=(int (*)())st->comp;
	qsort(st->data,st->num,sizeof(char *),FP_ICC comp_func);
	st->sorted=1;
a332 1
    }
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d62 1
a62 1
 *			lowest index for the seached item.
d129 1
a129 1
	Free((char *)ret);
d279 2
a280 2
	if (st->data != NULL) Free((char *)st->data);
	Free((char *)st);
@


1.1
log
@Initial revision
@
text
@d70 1
a70 1
#include "stack.h"
d75 1
a75 1
char *STACK_version="STACK part of SSLeay 0.9.0b 29-Jun-1998";
a76 1
#ifndef NOPROTO
a77 4
#else
#define FP_ICC
#endif

d80 1
a80 3
void sk_set_cmp_func(sk,c)
STACK *sk;
int (*c)();
d82 2
d87 2
d91 1
a91 2
STACK *sk_dup(sk)
STACK *sk;
d112 1
a112 2
STACK *sk_new(c)
int (*c)();
d134 1
a134 4
int sk_insert(st,data,loc)
STACK *st;
char *data;
int loc;
d138 1
d157 1
a157 1
		for (i=st->num; i>loc; i--)
d172 1
a172 3
char *sk_delete_ptr(st,p)
STACK *st;
char *p;
d182 1
a182 3
char *sk_delete(st,loc)
STACK *st;
int loc;
d187 2
a188 1
	if ((st->num == 0) || (loc < 0) || (loc >= st->num)) return(NULL);
d206 1
a206 3
int sk_find(st,data)
STACK *st;
char *data;
d211 1
d220 2
a222 6
	if (!st->sorted)
		{
		qsort((char *)st->data,st->num,sizeof(char *),FP_ICC comp_func);
		st->sorted=1;
		}
	if (data == NULL) return(-1);
d233 1
a233 3
int sk_push(st,data)
STACK *st;
char *data;
d238 1
a238 3
int sk_unshift(st,data)
STACK *st;
char *data;
d243 1
a243 2
char *sk_shift(st)
STACK *st;
d250 1
a250 2
char *sk_pop(st)
STACK *st;
d257 1
a257 2
void sk_zero(st)
STACK *st;
d265 1
a265 3
void sk_pop_free(st,func)
STACK *st;
void (*func)();
d276 1
a276 2
void sk_free(st)
STACK *st;
d283 29
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 1
a62 1
 *			lowest index for the searched item.
d70 1
a70 1
#include <openssl/stack.h>
d75 7
a81 1
const char *STACK_version="Stack" OPENSSL_VERSION_PTEXT;
d85 3
a87 2
int (*sk_set_cmp_func(STACK *sk, int (*c)(const char * const *,const char * const *)))
		(const char * const *, const char * const *)
a88 2
	int (*old)(const char * const *,const char * const *)=sk->comp;

a91 2

	return old;
d94 2
a95 1
STACK *sk_dup(STACK *sk)
d101 1
a101 1
	s=(char **)OPENSSL_realloc((char *)ret->data,
a112 2
	if(ret)
		sk_free(ret);
d116 2
a117 6
STACK *sk_new_null(void)
	{
	return sk_new((int (*)(const char * const *, const char * const *))0);
	}

STACK *sk_new(int (*c)(const char * const *, const char * const *))
d122 4
a125 4
	if ((ret=(STACK *)OPENSSL_malloc(sizeof(STACK))) == NULL)
		goto err;
	if ((ret->data=(char **)OPENSSL_malloc(sizeof(char *)*MIN_NODES)) == NULL)
		goto err;
d133 3
a135 3
err:
	if(ret)
		OPENSSL_free(ret);
d139 4
a142 1
int sk_insert(STACK *st, char *data, int loc)
a145 1
	if(st == NULL) return 0;
d148 1
a148 1
		s=(char **)OPENSSL_realloc((char *)st->data,
d164 1
a164 1
		for (i=st->num; i>=loc; i--)
d179 3
a181 1
char *sk_delete_ptr(STACK *st, char *p)
d191 3
a193 1
char *sk_delete(STACK *st, int loc)
d198 1
a198 2
	if ((st == NULL) || (st->num == 0) || (loc < 0)
					 || (loc >= st->num)) return(NULL);
d216 3
a218 1
int sk_find(STACK *st, char *data)
d222 1
a222 2
	int (*comp_func)(const void *,const void *);
	if(st == NULL) return -1;
d231 6
a236 1
	sk_sort(st);
a237 7
	/* This (and the "qsort" below) are the two places in OpenSSL
	 * where we need to convert from our standard (type **,type **)
	 * compare callback type to the (void *,void *) type required by
	 * bsearch. However, the "data" it is being called(back) with are
	 * not (type *) pointers, but the *pointers* to (type *) pointers,
	 * so we get our extra level of pointer dereferencing that way. */
	comp_func=(int (*)(const void *,const void *))(st->comp);
d239 1
a239 1
		st->num,sizeof(char *), comp_func);
d243 1
a243 6
		/* This needs a cast because the type being pointed to from
		 * the "&" expressions are (char *) rather than (const char *).
		 * For an explanation, read:
		 * http://www.eskimo.com/~scs/C-faq/q11.10.html :-) */
		if ((*st->comp)((const char * const *)&(st->data[i-1]),
				(const char * const *)&data) < 0)
d248 3
a250 1
int sk_push(STACK *st, char *data)
d255 3
a257 1
int sk_unshift(STACK *st, char *data)
d262 2
a263 1
char *sk_shift(STACK *st)
d270 2
a271 1
char *sk_pop(STACK *st)
d278 2
a279 1
void sk_zero(STACK *st)
d287 3
a289 1
void sk_pop_free(STACK *st, void (*func)(void *))
d300 2
a301 1
void sk_free(STACK *st)
d304 2
a305 2
	if (st->data != NULL) OPENSSL_free(st->data);
	OPENSSL_free(st);
a307 34
int sk_num(const STACK *st)
{
	if(st == NULL) return -1;
	return st->num;
}

char *sk_value(const STACK *st, int i)
{
	if(st == NULL) return NULL;
	return st->data[i];
}

char *sk_set(STACK *st, int i, char *value)
{
	if(st == NULL) return NULL;
	return (st->data[i] = value);
}

void sk_sort(STACK *st)
	{
	if (st && !st->sorted)
		{
		int (*comp_func)(const void *,const void *);

		/* same comment as in sk_find ... previously st->comp was declared
		 * as a (void*,void*) callback type, but this made the population
		 * of the callback pointer illogical - our callbacks compare
		 * type** with type**, so we leave the casting until absolutely
		 * necessary (ie. "now"). */
		comp_func=(int (*)(const void *,const void *))(st->comp);
		qsort(st->data,st->num,sizeof(char *), comp_func);
		st->sorted=1;
		}
	}
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d194 2
a195 1
	if(!st || (loc < 0) || (loc >= st->num)) return NULL;
d309 1
a309 1
	if(!st || (i < 0) || (i >= st->num)) return NULL;
d315 1
a315 1
	if(!st || (i < 0) || (i >= st->num)) return NULL;
a333 7
	}

int sk_is_sorted(const STACK *st)
	{
	if (!st)
		return 1;
	return st->sorted;
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a70 1
#include <openssl/objects.h>
d75 1
a75 1
const char STACK_version[]="Stack" OPENSSL_VERSION_PTEXT;
d212 1
a212 1
static int internal_find(STACK *st, char *data, int ret_val_options)
d235 2
a236 2
	r=(char **)OBJ_bsearch_ex((char *)&data,(char *)st->data,
		st->num,sizeof(char *),comp_func,ret_val_options);
d238 10
a247 10
	return((int)(r-st->data));
	}

int sk_find(STACK *st, char *data)
	{
	return internal_find(st, data, OBJ_BSEARCH_FIRST_VALUE_ON_MATCH);
	}
int sk_find_ex(STACK *st, char *data)
	{
	return internal_find(st, data, OBJ_BSEARCH_VALUE_ON_NOMATCH);
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d80 2
a81 2
int (*sk_set_cmp_func(_STACK *sk, int (*c)(const void *, const void *)))
		(const void *, const void *)
d83 1
a83 1
	int (*old)(const void *,const void *)=sk->comp;
d92 1
a92 1
_STACK *sk_dup(_STACK *sk)
d94 1
a94 1
	_STACK *ret;
d115 1
a115 1
_STACK *sk_new_null(void)
d117 1
a117 1
	return sk_new((int (*)(const void *, const void *))0);
d120 1
a120 1
_STACK *sk_new(int (*c)(const void *, const void *))
d122 1
a122 1
	_STACK *ret;
d125 1
a125 1
	if ((ret=OPENSSL_malloc(sizeof(_STACK))) == NULL)
d127 1
a127 1
	if ((ret->data=OPENSSL_malloc(sizeof(char *)*MIN_NODES)) == NULL)
d142 1
a142 1
int sk_insert(_STACK *st, void *data, int loc)
d149 1
a149 1
		s=OPENSSL_realloc((char *)st->data,
d163 2
a164 2
		f=st->data;
		t=&(st->data[1]);
d169 2
a170 2
		memmove(&(st->data[loc+1]),
			&(st->data[loc]),
d180 1
a180 1
void *sk_delete_ptr(_STACK *st, void *p)
d190 1
a190 1
void *sk_delete(_STACK *st, int loc)
d213 1
a213 1
static int internal_find(_STACK *st, void *data, int ret_val_options)
d215 1
a215 1
	const void * const *r;
d217 1
a217 1

d229 9
a237 2
	r=OBJ_bsearch_ex_(&data,st->data,st->num,sizeof(void *),st->comp,
			  ret_val_options);
d239 1
a239 1
	return (int)((char **)r-st->data);
d242 1
a242 1
int sk_find(_STACK *st, void *data)
d246 1
a246 1
int sk_find_ex(_STACK *st, void *data)
d251 1
a251 1
int sk_push(_STACK *st, void *data)
d256 1
a256 1
int sk_unshift(_STACK *st, void *data)
d261 1
a261 1
void *sk_shift(_STACK *st)
d268 1
a268 1
void *sk_pop(_STACK *st)
d275 1
a275 1
void sk_zero(_STACK *st)
d283 1
a283 1
void sk_pop_free(_STACK *st, void (*func)(void *))
d294 1
a294 1
void sk_free(_STACK *st)
d301 1
a301 1
int sk_num(const _STACK *st)
d307 1
a307 1
void *sk_value(const _STACK *st, int i)
d313 1
a313 1
void *sk_set(_STACK *st, int i, void *value)
d319 1
a319 1
void sk_sort(_STACK *st)
d336 1
a336 1
int sk_is_sorted(const _STACK *st)
@


