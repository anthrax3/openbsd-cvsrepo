head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2016.09.04.14.31.29;	author jsing;	state dead;
branches;
next	1.3;
commitid	Jv5Ac6XTUqjrS5wz;

1.3
date	2014.04.17.18.49.35;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.18.16.45;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.02;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.10.13.21.23.33;	author djm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Less S390.

ok deraadt@@
@
text
@.text

.globl	OPENSSL_s390x_facilities
.type	OPENSSL_s390x_facilities,@@function
.align	16
OPENSSL_s390x_facilities:
	lghi	%r0,0
	larl	%r2,OPENSSL_s390xcap_P
	stg	%r0,8(%r2)
	.long	0xb2b02000	# stfle	0(%r2)
	brc	8,.Ldone
	lghi	%r0,1
	.long	0xb2b02000	# stfle 0(%r2)
.Ldone:
	lg	%r2,0(%r2)
	br	%r14
.size	OPENSSL_s390x_facilities,.-OPENSSL_s390x_facilities

.globl	OPENSSL_atomic_add
.type	OPENSSL_atomic_add,@@function
.align	16
OPENSSL_atomic_add:
	l	%r1,0(%r2)
.Lspin:	lr	%r0,%r1
	ar	%r0,%r3
	cs	%r1,%r0,0(%r2)
	brc	4,.Lspin
	lgfr	%r2,%r0		# OpenSSL expects the new value
	br	%r14
.size	OPENSSL_atomic_add,.-OPENSSL_atomic_add

.globl	OPENSSL_wipe_cpu
.type	OPENSSL_wipe_cpu,@@function
.align	16
OPENSSL_wipe_cpu:
	xgr	%r0,%r0
	xgr	%r1,%r1
	lgr	%r2,%r15
	xgr	%r3,%r3
	xgr	%r4,%r4
	lzdr	%f0
	lzdr	%f1
	lzdr	%f2
	lzdr	%f3
	lzdr	%f4
	lzdr	%f5
	lzdr	%f6
	lzdr	%f7
	br	%r14
.size	OPENSSL_wipe_cpu,.-OPENSSL_wipe_cpu

.section	.init
	brasl	%r14,OPENSSL_cpuid_setup

.comm	OPENSSL_s390xcap_P,16,8
@


1.3
log
@Remove oh-so-important-from-a-security-pov OpenSSL_rtdsc() function.
@
text
@@


1.2
log
@Ok, there was a need for OPENSSL_cleanse() instead of bzero() to prevent
supposedly smart compilers from optimizing memory cleanups away. Understood.

Ok, in case of an hypothetically super smart compiler, OPENSSL_cleanse() had
to be convoluted enough for the compiler not to recognize that this was
actually bzero() in disguise. Understood.

But then why there had been optimized assembler versions of OPENSSL_cleanse()
is beyond me. Did someone not trust the C obfuscation?
@
text
@a18 9
.globl	OPENSSL_rdtsc
.type	OPENSSL_rdtsc,@@function
.align	16
OPENSSL_rdtsc:
	stck	16(%r15)
	lg	%r2,16(%r15)
	br	%r14
.size	OPENSSL_rdtsc,.-OPENSSL_rdtsc

@


1.1
log
@Initial revision
@
text
@a2 7
.globl	OPENSSL_cpuid_setup
.type	OPENSSL_cpuid_setup,@@function
.align	16
OPENSSL_cpuid_setup:
	br	%r14		# reserved for future
.size	OPENSSL_cpuid_setup,.-OPENSSL_cpuid_setup

d8 8
a15 2
	.long	0xb2b0f010	# stfle	16(%r15)
	lg	%r2,16(%r15)
d61 4
a64 29
.globl	OPENSSL_cleanse
.type	OPENSSL_cleanse,@@function
.align	16
OPENSSL_cleanse:
	lghi	%r4,15
	lghi	%r0,0
	clgr	%r3,%r4
	jh	.Lot
.Little:
	stc	%r0,0(%r2)
	la	%r2,1(%r2)
	brctg	%r3,.Little
	br	%r14
.align	4
.Lot:	tmll	%r2,7
	jz	.Laligned
	stc	%r0,0(%r2)
	la	%r2,1(%r2)
	brctg	%r3,.Lot
.Laligned:
	srlg	%r4,%r3,3
.Loop:	stg	%r0,0(%r2)
	la	%r2,8(%r2)
	brctg	%r4,.Loop
	lghi	%r4,7
	ngr	%r3,%r4
	jnz	.Little
	br	%r14
.size	OPENSSL_cleanse,.-OPENSSL_cleanse
@


1.1.1.1
log
@import of OpenSSL 0.9.8k
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@d3 7
a16 2
	larl	%r1,OPENSSL_s390xcap_P
	stg	%r2,0(%r1)
a69 2
	clgr	%r3,%r0
	bcr	8,%r14
a90 5

.section	.init
	brasl	%r14,OPENSSL_cpuid_setup

.comm	OPENSSL_s390xcap_P,8,8
@


1.1.1.3
log
@import OpenSSL-1.0.1c
@
text
@d8 4
a11 8
	larl	%r2,OPENSSL_s390xcap_P
	stg	%r0,8(%r2)
	.long	0xb2b02000	# stfle	0(%r2)
	brc	8,.Ldone
	lghi	%r0,1
	.long	0xb2b02000	# stfle 0(%r2)
.Ldone:
	lg	%r2,0(%r2)
a60 3
#if !defined(__s390x__) && !defined(__s390x)
	llgfr	%r3,%r3
#endif
d92 1
a92 1
.comm	OPENSSL_s390xcap_P,16,8
@


