head	1.8;
access;
symbols
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	butholakala:1.1.1.1
	openssl_1_0_1_g:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.24
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.20
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.18
	OPENBSD_5_3_BASE:1.1.1.1
	openssl_1_0_1_c:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.16
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	openssh_1_0_0_a:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.02.10.11.16.33;	author jsing;	state dead;
branches;
next	1.7;
commitid	u8KgFcebA5Hs8Hgb;

1.7
date	2014.07.22.02.21.20;	author beck;	state Exp;
branches;
next	1.6;
commitid	iBnKYMaAFvJMFyL2;

1.6
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.06.11.01.53.02;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	4evB2EbwDYaBfe0g;

1.4
date	2014.05.26.11.24.48;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.25.20.28.50;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove crypto/store - part of which is "currently highly experimental".
This code is not compiled in and OPENSSL_NO_STORE is already defined in
opensslfeatures.h. No symbol removal for libcrypto.

ok beck@@
@
text
@/* $OpenBSD: str_meth.c,v 1.7 2014/07/22 02:21:20 beck Exp $ */
/* Written by Richard Levitte (richard@@levitte.org) for the OpenSSL
 * project 2003.
 */
/* ====================================================================
 * Copyright (c) 2003 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <string.h>
#include <openssl/buffer.h>
#include "str_locl.h"

STORE_METHOD *
STORE_create_method(char *name)
{
	STORE_METHOD *store_method = calloc(1, sizeof(STORE_METHOD));

	if (store_method && name)
		store_method->name = strdup(name);

	return store_method;
}

/* BIG FSCKING WARNING!!!!  If you use this on a statically allocated method
   (that is, it hasn't been allocated using STORE_create_method(), you deserve
   anything Murphy can throw at you and more!  You have been warned. */
void
STORE_destroy_method(STORE_METHOD *store_method)
{
	if (!store_method)
		return;
	free(store_method->name);
	store_method->name = NULL;
	free(store_method);
}

int
STORE_method_set_initialise_function(STORE_METHOD *sm,
    STORE_INITIALISE_FUNC_PTR init_f)
{
	sm->init = init_f;
	return 1;
}

int
STORE_method_set_cleanup_function(STORE_METHOD *sm,
    STORE_CLEANUP_FUNC_PTR clean_f)
{
	sm->clean = clean_f;
	return 1;
}

int
STORE_method_set_generate_function(STORE_METHOD *sm,
    STORE_GENERATE_OBJECT_FUNC_PTR generate_f)
{
	sm->generate_object = generate_f;
	return 1;
}

int
STORE_method_set_get_function(STORE_METHOD *sm,
    STORE_GET_OBJECT_FUNC_PTR get_f)
{
	sm->get_object = get_f;
	return 1;
}

int
STORE_method_set_store_function(STORE_METHOD *sm,
    STORE_STORE_OBJECT_FUNC_PTR store_f)
{
	sm->store_object = store_f;
	return 1;
}

int
STORE_method_set_modify_function(STORE_METHOD *sm,
    STORE_MODIFY_OBJECT_FUNC_PTR modify_f)
{
	sm->modify_object = modify_f;
	return 1;
}

int
STORE_method_set_revoke_function(STORE_METHOD *sm,
    STORE_HANDLE_OBJECT_FUNC_PTR revoke_f)
{
	sm->revoke_object = revoke_f;
	return 1;
}

int
STORE_method_set_delete_function(STORE_METHOD *sm,
    STORE_HANDLE_OBJECT_FUNC_PTR delete_f)
{
	sm->delete_object = delete_f;
	return 1;
}

int
STORE_method_set_list_start_function(STORE_METHOD *sm,
    STORE_START_OBJECT_FUNC_PTR list_start_f)
{
	sm->list_object_start = list_start_f;
	return 1;
}

int
STORE_method_set_list_next_function(STORE_METHOD *sm,
    STORE_NEXT_OBJECT_FUNC_PTR list_next_f)
{
	sm->list_object_next = list_next_f;
	return 1;
}

int
STORE_method_set_list_end_function(STORE_METHOD *sm,
    STORE_END_OBJECT_FUNC_PTR list_end_f)
{
	sm->list_object_end = list_end_f;
	return 1;
}

int
STORE_method_set_update_store_function(STORE_METHOD *sm,
    STORE_GENERIC_FUNC_PTR update_f)
{
	sm->update_store = update_f;
	return 1;
}

int
STORE_method_set_lock_store_function(STORE_METHOD *sm,
    STORE_GENERIC_FUNC_PTR lock_f)
{
	sm->lock_store = lock_f;
	return 1;
}

int
STORE_method_set_unlock_store_function(STORE_METHOD *sm,
    STORE_GENERIC_FUNC_PTR unlock_f)
{
	sm->unlock_store = unlock_f;
	return 1;
}

int
STORE_method_set_ctrl_function(STORE_METHOD *sm, STORE_CTRL_FUNC_PTR ctrl_f)
{
	sm->ctrl = ctrl_f;
	return 1;
}

STORE_INITIALISE_FUNC_PTR
STORE_method_get_initialise_function(STORE_METHOD *sm)
{
	return sm->init;
}

STORE_CLEANUP_FUNC_PTR
STORE_method_get_cleanup_function(STORE_METHOD *sm)
{
	return sm->clean;
}

STORE_GENERATE_OBJECT_FUNC_PTR
STORE_method_get_generate_function(STORE_METHOD *sm)
{
	return sm->generate_object;
}

STORE_GET_OBJECT_FUNC_PTR
STORE_method_get_get_function(STORE_METHOD *sm)
{
	return sm->get_object;
}

STORE_STORE_OBJECT_FUNC_PTR
STORE_method_get_store_function(STORE_METHOD *sm)
{
	return sm->store_object;
}

STORE_MODIFY_OBJECT_FUNC_PTR
STORE_method_get_modify_function(STORE_METHOD *sm)
{
	return sm->modify_object;
}

STORE_HANDLE_OBJECT_FUNC_PTR
STORE_method_get_revoke_function(STORE_METHOD *sm)
{
	return sm->revoke_object;
}

STORE_HANDLE_OBJECT_FUNC_PTR
STORE_method_get_delete_function(STORE_METHOD *sm)
{
	return sm->delete_object;
}

STORE_START_OBJECT_FUNC_PTR
STORE_method_get_list_start_function(STORE_METHOD *sm)
{
	return sm->list_object_start;
}

STORE_NEXT_OBJECT_FUNC_PTR
STORE_method_get_list_next_function(STORE_METHOD *sm)
{
	return sm->list_object_next;
}

STORE_END_OBJECT_FUNC_PTR
STORE_method_get_list_end_function(STORE_METHOD *sm)
{
	return sm->list_object_end;
}

STORE_GENERIC_FUNC_PTR
STORE_method_get_update_store_function(STORE_METHOD *sm)
{
	return sm->update_store;
}

STORE_GENERIC_FUNC_PTR
STORE_method_get_lock_store_function(STORE_METHOD *sm)
{
	return sm->lock_store;
}

STORE_GENERIC_FUNC_PTR
STORE_method_get_unlock_store_function(STORE_METHOD *sm)
{
	return sm->unlock_store;
}

STORE_CTRL_FUNC_PTR
STORE_method_get_ctrl_function(STORE_METHOD *sm)
{
	return sm->ctrl;
}

@


1.7
log
@Kill a bunch more BUF_strdup's - these are converted to have a check for
NULL before an intrinsic strdup.
ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: str_meth.c,v 1.6 2014/06/12 15:49:30 deraadt Exp $ */
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d68 2
a69 2
	if (store_method)
		store_method->name = BUF_strdup(name);
@


1.5
log
@c-file-style hints, begone; ok beck
@
text
@d1 1
a1 1
/* crypto/store/str_meth.c */
@


1.4
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/store/str_meth.c -*- mode:C; c-file-style: "eay" -*- */
@


1.3
log
@calloc instead of malloc/memset. from Benjamin Baier
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d63 3
a65 2
STORE_METHOD *STORE_create_method(char *name)
	{
d72 1
a72 1
	}
d77 5
a81 3
void STORE_destroy_method(STORE_METHOD *store_method)
	{
	if (!store_method) return;
d85 1
a85 1
	}
d87 4
a90 2
int STORE_method_set_initialise_function(STORE_METHOD *sm, STORE_INITIALISE_FUNC_PTR init_f)
	{
d93 1
a93 1
	}
d95 4
a98 2
int STORE_method_set_cleanup_function(STORE_METHOD *sm, STORE_CLEANUP_FUNC_PTR clean_f)
	{
d101 1
a101 1
	}
d103 4
a106 2
int STORE_method_set_generate_function(STORE_METHOD *sm, STORE_GENERATE_OBJECT_FUNC_PTR generate_f)
	{
d109 1
a109 1
	}
d111 4
a114 2
int STORE_method_set_get_function(STORE_METHOD *sm, STORE_GET_OBJECT_FUNC_PTR get_f)
	{
d117 1
a117 1
	}
d119 4
a122 2
int STORE_method_set_store_function(STORE_METHOD *sm, STORE_STORE_OBJECT_FUNC_PTR store_f)
	{
d125 1
a125 1
	}
d127 4
a130 2
int STORE_method_set_modify_function(STORE_METHOD *sm, STORE_MODIFY_OBJECT_FUNC_PTR modify_f)
	{
d133 1
a133 1
	}
d135 4
a138 2
int STORE_method_set_revoke_function(STORE_METHOD *sm, STORE_HANDLE_OBJECT_FUNC_PTR revoke_f)
	{
d141 1
a141 1
	}
d143 4
a146 2
int STORE_method_set_delete_function(STORE_METHOD *sm, STORE_HANDLE_OBJECT_FUNC_PTR delete_f)
	{
d149 1
a149 1
	}
d151 4
a154 2
int STORE_method_set_list_start_function(STORE_METHOD *sm, STORE_START_OBJECT_FUNC_PTR list_start_f)
	{
d157 1
a157 1
	}
d159 4
a162 2
int STORE_method_set_list_next_function(STORE_METHOD *sm, STORE_NEXT_OBJECT_FUNC_PTR list_next_f)
	{
d165 1
a165 1
	}
d167 4
a170 2
int STORE_method_set_list_end_function(STORE_METHOD *sm, STORE_END_OBJECT_FUNC_PTR list_end_f)
	{
d173 1
a173 1
	}
d175 4
a178 2
int STORE_method_set_update_store_function(STORE_METHOD *sm, STORE_GENERIC_FUNC_PTR update_f)
	{
d181 1
a181 1
	}
d183 4
a186 2
int STORE_method_set_lock_store_function(STORE_METHOD *sm, STORE_GENERIC_FUNC_PTR lock_f)
	{
d189 1
a189 1
	}
d191 4
a194 2
int STORE_method_set_unlock_store_function(STORE_METHOD *sm, STORE_GENERIC_FUNC_PTR unlock_f)
	{
d197 1
a197 1
	}
d199 3
a201 2
int STORE_method_set_ctrl_function(STORE_METHOD *sm, STORE_CTRL_FUNC_PTR ctrl_f)
	{
d204 1
a204 1
	}
d206 3
a208 2
STORE_INITIALISE_FUNC_PTR STORE_method_get_initialise_function(STORE_METHOD *sm)
	{
d210 1
a210 1
	}
d212 3
a214 2
STORE_CLEANUP_FUNC_PTR STORE_method_get_cleanup_function(STORE_METHOD *sm)
	{
d216 1
a216 1
	}
d218 3
a220 2
STORE_GENERATE_OBJECT_FUNC_PTR STORE_method_get_generate_function(STORE_METHOD *sm)
	{
d222 1
a222 1
	}
d224 3
a226 2
STORE_GET_OBJECT_FUNC_PTR STORE_method_get_get_function(STORE_METHOD *sm)
	{
d228 1
a228 1
	}
d230 3
a232 2
STORE_STORE_OBJECT_FUNC_PTR STORE_method_get_store_function(STORE_METHOD *sm)
	{
d234 1
a234 1
	}
d236 3
a238 2
STORE_MODIFY_OBJECT_FUNC_PTR STORE_method_get_modify_function(STORE_METHOD *sm)
	{
d240 1
a240 1
	}
d242 3
a244 2
STORE_HANDLE_OBJECT_FUNC_PTR STORE_method_get_revoke_function(STORE_METHOD *sm)
	{
d246 1
a246 1
	}
d248 3
a250 2
STORE_HANDLE_OBJECT_FUNC_PTR STORE_method_get_delete_function(STORE_METHOD *sm)
	{
d252 1
a252 1
	}
d254 3
a256 2
STORE_START_OBJECT_FUNC_PTR STORE_method_get_list_start_function(STORE_METHOD *sm)
	{
d258 1
a258 1
	}
d260 3
a262 2
STORE_NEXT_OBJECT_FUNC_PTR STORE_method_get_list_next_function(STORE_METHOD *sm)
	{
d264 1
a264 1
	}
d266 3
a268 2
STORE_END_OBJECT_FUNC_PTR STORE_method_get_list_end_function(STORE_METHOD *sm)
	{
d270 1
a270 1
	}
d272 3
a274 2
STORE_GENERIC_FUNC_PTR STORE_method_get_update_store_function(STORE_METHOD *sm)
	{
d276 1
a276 1
	}
d278 3
a280 2
STORE_GENERIC_FUNC_PTR STORE_method_get_lock_store_function(STORE_METHOD *sm)
	{
d282 1
a282 1
	}
d284 3
a286 2
STORE_GENERIC_FUNC_PTR STORE_method_get_unlock_store_function(STORE_METHOD *sm)
	{
d288 1
a288 1
	}
d290 3
a292 2
STORE_CTRL_FUNC_PTR STORE_method_get_ctrl_function(STORE_METHOD *sm)
	{
d294 1
a294 1
	}
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d65 1
a65 1
	STORE_METHOD *store_method = (STORE_METHOD *)malloc(sizeof(STORE_METHOD));
a67 2
		{
		memset(store_method, 0, sizeof(*store_method));
d69 1
a69 1
		}
@


1.1
log
@Initial revision
@
text
@d65 1
a65 1
	STORE_METHOD *store_method = (STORE_METHOD *)OPENSSL_malloc(sizeof(STORE_METHOD));
d81 1
a81 1
	OPENSSL_free(store_method->name);
d83 1
a83 1
	OPENSSL_free(store_method);
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@
