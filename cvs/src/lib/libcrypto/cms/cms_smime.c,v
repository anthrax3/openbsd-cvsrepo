head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2015.06.11.16.02.05;	author jsing;	state Exp;
branches;
next	1.12;
commitid	ys6UozZ8uXuZCpv9;

1.12
date	2014.07.11.12.12.39;	author miod;	state Exp;
branches
	1.12.4.1
	1.12.6.1;
next	1.11;
commitid	p5t5ZTzq9UXbvsDD;

1.11
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.05.24.15.55.21;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.24.07.11.39;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.26.18.56.37;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.06.06.33.20;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.09.12.15.36;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.05.21.36.38;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.13.53;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.04.06.06.30.02;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.10.13.21.23.38;	author djm;	state Exp;
branches;
next	;

1.12.4.1
date	2015.06.11.16.11.00;	author jsing;	state Exp;
branches;
next	;
commitid	jrR1mmYpHDQoSJAs;

1.12.6.1
date	2015.06.11.16.09.20;	author jsing;	state Exp;
branches;
next	;
commitid	B0KrBXUvDclRlbxZ;


desc
@@


1.13
log
@Avoid an infinite loop that can occur when verifying a message with an
unknown hash function OID.

Diff based on OpenSSL.

Fixes CVE-2015-1792 (however, this code is not enabled/built in LibreSSL).

ok doug@@ miod@@
@
text
@/* $OpenBSD: cms_smime.c,v 1.12 2014/07/11 12:12:39 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 2008 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <openssl/asn1t.h>
#include <openssl/cms.h>
#include <openssl/err.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

#include "cms_lcl.h"

static int
cms_copy_content(BIO *out, BIO *in, unsigned int flags)
{
	unsigned char buf[4096];
	int r = 0, i;
	BIO *tmpout = NULL;

	if (out == NULL)
		tmpout = BIO_new(BIO_s_null());
	else if (flags & CMS_TEXT) {
		tmpout = BIO_new(BIO_s_mem());
		BIO_set_mem_eof_return(tmpout, 0);
	} else
		tmpout = out;

	if (!tmpout) {
		CMSerr(CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	/* Read all content through chain to process digest, decrypt etc */
	for (;;) {
		i = BIO_read(in, buf, sizeof(buf));
		if (i <= 0) {
			if (BIO_method_type(in) == BIO_TYPE_CIPHER) {
				if (!BIO_get_cipher_status(in))
					goto err;
			}
			if (i < 0)
				goto err;
			break;
		}

		if (tmpout && (BIO_write(tmpout, buf, i) != i))
			goto err;
	}

	if (flags & CMS_TEXT) {
		if (!SMIME_text(tmpout, out)) {
			CMSerr(CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR);
			goto err;
		}
	}

	r = 1;

err:
	if (tmpout && (tmpout != out))
		BIO_free(tmpout);
	return r;
}

static int
check_content(CMS_ContentInfo *cms)
{
	ASN1_OCTET_STRING **pos = CMS_get0_content(cms);

	if (!pos || !*pos) {
		CMSerr(CMS_F_CHECK_CONTENT, CMS_R_NO_CONTENT);
		return 0;
	}
	return 1;
}

static void
do_free_upto(BIO *f, BIO *upto)
{
	if (upto) {
		BIO *tbio;
		do {
			tbio = BIO_pop(f);
			BIO_free(f);
			f = tbio;
		} while (f != NULL && f != upto);
	} else
		BIO_free_all(f);
}

int
CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags)
{
	BIO *cont;
	int r;

	if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_data) {
		CMSerr(CMS_F_CMS_DATA, CMS_R_TYPE_NOT_DATA);
		return 0;
	}
	cont = CMS_dataInit(cms, NULL);
	if (!cont)
		return 0;
	r = cms_copy_content(out, cont, flags);
	BIO_free_all(cont);
	return r;
}

CMS_ContentInfo *
CMS_data_create(BIO *in, unsigned int flags)
{
	CMS_ContentInfo *cms;

	cms = cms_Data_create();
	if (!cms)
		return NULL;

	if ((flags & CMS_STREAM) || CMS_final(cms, in, NULL, flags))
		return cms;

	CMS_ContentInfo_free(cms);

	return NULL;
}

int
CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
    unsigned int flags)
{
	BIO *cont;
	int r;

	if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_digest) {
		CMSerr(CMS_F_CMS_DIGEST_VERIFY, CMS_R_TYPE_NOT_DIGESTED_DATA);
		return 0;
	}

	if (!dcont && !check_content(cms))
		return 0;

	cont = CMS_dataInit(cms, dcont);
	if (!cont)
		return 0;
	r = cms_copy_content(out, cont, flags);
	if (r)
		r = cms_DigestedData_do_final(cms, cont, 1);
	do_free_upto(cont, dcont);
	return r;
}

CMS_ContentInfo *
CMS_digest_create(BIO *in, const EVP_MD *md, unsigned int flags)
{
	CMS_ContentInfo *cms;

	if (!md)
		md = EVP_sha1();
	cms = cms_DigestedData_create(md);
	if (!cms)
		return NULL;

	if (!(flags & CMS_DETACHED))
		CMS_set_detached(cms, 0);

	if ((flags & CMS_STREAM) || CMS_final(cms, in, NULL, flags))
		return cms;

	CMS_ContentInfo_free(cms);
	return NULL;
}

int
CMS_EncryptedData_decrypt(CMS_ContentInfo *cms, const unsigned char *key,
    size_t keylen, BIO *dcont, BIO *out, unsigned int flags)
{
	BIO *cont;
	int r;

	if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_encrypted) {
		CMSerr(CMS_F_CMS_ENCRYPTEDDATA_DECRYPT,
		    CMS_R_TYPE_NOT_ENCRYPTED_DATA);
		return 0;
	}

	if (!dcont && !check_content(cms))
		return 0;

	if (CMS_EncryptedData_set1_key(cms, NULL, key, keylen) <= 0)
		return 0;
	cont = CMS_dataInit(cms, dcont);
	if (!cont)
		return 0;
	r = cms_copy_content(out, cont, flags);
	do_free_upto(cont, dcont);
	return r;
}

CMS_ContentInfo *
CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
    const unsigned char *key, size_t keylen, unsigned int flags)
{
	CMS_ContentInfo *cms;

	if (!cipher) {
		CMSerr(CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT, CMS_R_NO_CIPHER);
		return NULL;
	}
	cms = CMS_ContentInfo_new();
	if (!cms)
		return NULL;
	if (!CMS_EncryptedData_set1_key(cms, cipher, key, keylen))
		return NULL;

	if (!(flags & CMS_DETACHED))
		CMS_set_detached(cms, 0);

	if ((flags & (CMS_STREAM|CMS_PARTIAL)) ||
	    CMS_final(cms, in, NULL, flags))
		return cms;

	CMS_ContentInfo_free(cms);
	return NULL;
}

static int
cms_signerinfo_verify_cert(CMS_SignerInfo *si, X509_STORE *store,
    STACK_OF(X509) *certs, STACK_OF(X509_CRL) *crls, unsigned int flags)
{
	X509_STORE_CTX ctx;
	X509 *signer;
	int i, j, r = 0;

	CMS_SignerInfo_get0_algs(si, NULL, &signer, NULL, NULL);
	if (!X509_STORE_CTX_init(&ctx, store, signer, certs)) {
		CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY_CERT,
		    CMS_R_STORE_INIT_ERROR);
		goto err;
	}
	X509_STORE_CTX_set_default(&ctx, "smime_sign");
	if (crls)
		X509_STORE_CTX_set0_crls(&ctx, crls);

	i = X509_verify_cert(&ctx);
	if (i <= 0) {
		j = X509_STORE_CTX_get_error(&ctx);
		CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY_CERT,
		    CMS_R_CERTIFICATE_VERIFY_ERROR);
		ERR_asprintf_error_data("Verify error:%s",
		    X509_verify_cert_error_string(j));
		goto err;
	}
	r = 1;

err:
	X509_STORE_CTX_cleanup(&ctx);
	return r;
}

int
CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs, X509_STORE *store,
    BIO *dcont, BIO *out, unsigned int flags)
{
	CMS_SignerInfo *si;
	STACK_OF(CMS_SignerInfo) *sinfos;
	STACK_OF(X509) *cms_certs = NULL;
	STACK_OF(X509_CRL) *crls = NULL;
	X509 *signer;
	int i, scount = 0, ret = 0;
	BIO *cmsbio = NULL, *tmpin = NULL;

	if (!dcont && !check_content(cms))
		return 0;

	/* Attempt to find all signer certificates */

	sinfos = CMS_get0_SignerInfos(cms);

	if (sk_CMS_SignerInfo_num(sinfos) <= 0) {
		CMSerr(CMS_F_CMS_VERIFY, CMS_R_NO_SIGNERS);
		goto err;
	}

	for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++) {
		si = sk_CMS_SignerInfo_value(sinfos, i);
		CMS_SignerInfo_get0_algs(si, NULL, &signer, NULL, NULL);
		if (signer)
			scount++;
	}

	if (scount != sk_CMS_SignerInfo_num(sinfos))
		scount += CMS_set1_signers_certs(cms, certs, flags);

	if (scount != sk_CMS_SignerInfo_num(sinfos)) {
		CMSerr(CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND);
		goto err;
	}

	/* Attempt to verify all signers certs */

	if (!(flags & CMS_NO_SIGNER_CERT_VERIFY)) {
		cms_certs = CMS_get1_certs(cms);
		if (!(flags & CMS_NOCRL))
			crls = CMS_get1_crls(cms);
		for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++) {
			si = sk_CMS_SignerInfo_value(sinfos, i);
			if (!cms_signerinfo_verify_cert(si, store,
			    cms_certs, crls, flags))
				goto err;
		}
	}

	/* Attempt to verify all SignerInfo signed attribute signatures */

	if (!(flags & CMS_NO_ATTR_VERIFY)) {
		for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++) {
			si = sk_CMS_SignerInfo_value(sinfos, i);
			if (CMS_signed_get_attr_count(si) < 0)
				continue;
			if (CMS_SignerInfo_verify(si) <= 0)
				goto err;
		}
	}

	/* Performance optimization: if the content is a memory BIO then
	 * store its contents in a temporary read only memory BIO. This
	 * avoids potentially large numbers of slow copies of data which will
	 * occur when reading from a read write memory BIO when signatures
	 * are calculated.
	 */

	if (dcont && (BIO_method_type(dcont) == BIO_TYPE_MEM)) {
		char *ptr;
		long len;
		len = BIO_get_mem_data(dcont, &ptr);
		tmpin = BIO_new_mem_buf(ptr, len);
		if (tmpin == NULL) {
			CMSerr(CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE);
			return 0;
		}
	} else
		tmpin = dcont;


	cmsbio = CMS_dataInit(cms, tmpin);
	if (!cmsbio)
		goto err;

	if (!cms_copy_content(out, cmsbio, flags))
		goto err;

	if (!(flags & CMS_NO_CONTENT_VERIFY)) {
		for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++) {
			si = sk_CMS_SignerInfo_value(sinfos, i);
			if (CMS_SignerInfo_verify_content(si, cmsbio) <= 0) {
				CMSerr(CMS_F_CMS_VERIFY,
				    CMS_R_CONTENT_VERIFY_ERROR);
				goto err;
			}
		}
	}

	ret = 1;

err:
	if (dcont && (tmpin == dcont))
		do_free_upto(cmsbio, dcont);
	else
		BIO_free_all(cmsbio);

	if (cms_certs)
		sk_X509_pop_free(cms_certs, X509_free);
	if (crls)
		sk_X509_CRL_pop_free(crls, X509_CRL_free);

	return ret;
}

int
CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
    STACK_OF(X509) *certs, X509_STORE *store, unsigned int flags)
{
	int r;

	flags &= ~(CMS_DETACHED|CMS_TEXT);
	r = CMS_verify(rcms, certs, store, NULL, NULL, flags);
	if (r <= 0)
		return r;
	return cms_Receipt_verify(rcms, ocms);
}

CMS_ContentInfo *
CMS_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs, BIO *data,
    unsigned int flags)
{
	CMS_ContentInfo *cms;
	int i;

	cms = CMS_ContentInfo_new();
	if (!cms || !CMS_SignedData_init(cms))
		goto merr;

	if (pkey && !CMS_add1_signer(cms, signcert, pkey, NULL, flags)) {
		CMSerr(CMS_F_CMS_SIGN, CMS_R_ADD_SIGNER_ERROR);
		goto err;
	}

	for (i = 0; i < sk_X509_num(certs); i++) {
		X509 *x = sk_X509_value(certs, i);
		if (!CMS_add1_cert(cms, x))
			goto merr;
	}

	if (!(flags & CMS_DETACHED))
		CMS_set_detached(cms, 0);

	if ((flags & (CMS_STREAM|CMS_PARTIAL)) ||
	    CMS_final(cms, data, NULL, flags))
		return cms;
	else
		goto err;

merr:
	CMSerr(CMS_F_CMS_SIGN, ERR_R_MALLOC_FAILURE);
err:
	if (cms)
		CMS_ContentInfo_free(cms);
	return NULL;
}

CMS_ContentInfo *
CMS_sign_receipt(CMS_SignerInfo *si, X509 *signcert, EVP_PKEY *pkey,
    STACK_OF(X509) *certs, unsigned int flags)
{
	CMS_SignerInfo *rct_si;
	CMS_ContentInfo *cms = NULL;
	ASN1_OCTET_STRING **pos, *os;
	BIO *rct_cont = NULL;
	int r = 0;

	flags &= ~(CMS_STREAM|CMS_TEXT);
	/* Not really detached but avoids content being allocated */
	flags |= CMS_PARTIAL|CMS_BINARY|CMS_DETACHED;
	if (!pkey || !signcert) {
		CMSerr(CMS_F_CMS_SIGN_RECEIPT, CMS_R_NO_KEY_OR_CERT);
		return NULL;
	}

	/* Initialize signed data */

	cms = CMS_sign(NULL, NULL, certs, NULL, flags);
	if (!cms)
		goto err;

	/* Set inner content type to signed receipt */
	if (!CMS_set1_eContentType(cms, OBJ_nid2obj(NID_id_smime_ct_receipt)))
		goto err;

	rct_si = CMS_add1_signer(cms, signcert, pkey, NULL, flags);
	if (!rct_si) {
		CMSerr(CMS_F_CMS_SIGN_RECEIPT, CMS_R_ADD_SIGNER_ERROR);
		goto err;
	}

	os = cms_encode_Receipt(si);

	if (!os)
		goto err;

	/* Set content to digest */
	rct_cont = BIO_new_mem_buf(os->data, os->length);
	if (!rct_cont)
		goto err;

	/* Add msgSigDigest attribute */

	if (!cms_msgSigDigest_add1(rct_si, si))
		goto err;

	/* Finalize structure */
	if (!CMS_final(cms, rct_cont, NULL, flags))
		goto err;

	/* Set embedded content */
	pos = CMS_get0_content(cms);
	*pos = os;

	r = 1;

err:
	if (rct_cont)
		BIO_free(rct_cont);
	if (r)
		return cms;
	CMS_ContentInfo_free(cms);
	return NULL;
}

CMS_ContentInfo *
CMS_encrypt(STACK_OF(X509) *certs, BIO *data, const EVP_CIPHER *cipher,
    unsigned int flags)
{
	CMS_ContentInfo *cms;
	int i;
	X509 *recip;

	cms = CMS_EnvelopedData_create(cipher);
	if (!cms)
		goto merr;
	for (i = 0; i < sk_X509_num(certs); i++) {
		recip = sk_X509_value(certs, i);
		if (!CMS_add1_recipient_cert(cms, recip, flags)) {
			CMSerr(CMS_F_CMS_ENCRYPT, CMS_R_RECIPIENT_ERROR);
			goto err;
		}
	}

	if (!(flags & CMS_DETACHED))
		CMS_set_detached(cms, 0);

	if ((flags & (CMS_STREAM|CMS_PARTIAL)) ||
	    CMS_final(cms, data, NULL, flags))
		return cms;
	else
		goto err;

merr:
	CMSerr(CMS_F_CMS_ENCRYPT, ERR_R_MALLOC_FAILURE);
err:
	if (cms)
		CMS_ContentInfo_free(cms);
	return NULL;
}

int
CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert)
{
	STACK_OF(CMS_RecipientInfo) *ris;
	CMS_RecipientInfo *ri;
	int i, r;
	int debug = 0, match_ri = 0;

	ris = CMS_get0_RecipientInfos(cms);
	if (ris)
		debug = cms->d.envelopedData->encryptedContentInfo->debug;
	for (i = 0; i < sk_CMS_RecipientInfo_num(ris); i++) {
		ri = sk_CMS_RecipientInfo_value(ris, i);
		if (CMS_RecipientInfo_type(ri) != CMS_RECIPINFO_TRANS)
			continue;
		match_ri = 1;
		/* If we have a cert try matching RecipientInfo
		 * otherwise try them all.
		 */
		if (!cert || (CMS_RecipientInfo_ktri_cert_cmp(ri, cert) == 0)) {
			CMS_RecipientInfo_set0_pkey(ri, pk);
			r = CMS_RecipientInfo_decrypt(cms, ri);
			CMS_RecipientInfo_set0_pkey(ri, NULL);
			if (cert) {
				/* If not debugging clear any error and
				 * return success to avoid leaking of
				 * information useful to MMA
				 */
				if (!debug) {
					ERR_clear_error();
					return 1;
				}
				if (r > 0)
					return 1;
				CMSerr(CMS_F_CMS_DECRYPT_SET1_PKEY,
				    CMS_R_DECRYPT_ERROR);
				return 0;
			}
			/* If no cert and not debugging don't leave loop
			 * after first successful decrypt. Always attempt
			 * to decrypt all recipients to avoid leaking timing
			 * of a successful decrypt.
			 */
			else if (r > 0 && debug)
				return 1;
		}
	}
	/* If no cert and not debugging always return success */
	if (match_ri && !cert && !debug) {
		ERR_clear_error();
		return 1;
	}

	CMSerr(CMS_F_CMS_DECRYPT_SET1_PKEY, CMS_R_NO_MATCHING_RECIPIENT);
	return 0;
}

int
CMS_decrypt_set1_key(CMS_ContentInfo *cms, unsigned char *key, size_t keylen,
    unsigned char *id, size_t idlen)
{
	STACK_OF(CMS_RecipientInfo) *ris;
	CMS_RecipientInfo *ri;
	int i, r;

	ris = CMS_get0_RecipientInfos(cms);
	for (i = 0; i < sk_CMS_RecipientInfo_num(ris); i++) {
		ri = sk_CMS_RecipientInfo_value(ris, i);
		if (CMS_RecipientInfo_type(ri) != CMS_RECIPINFO_KEK)
			continue;

		/* If we have an id try matching RecipientInfo
		 * otherwise try them all.
		 */
		if (!id ||
		    (CMS_RecipientInfo_kekri_id_cmp(ri, id, idlen) == 0)) {
			CMS_RecipientInfo_set0_key(ri, key, keylen);
			r = CMS_RecipientInfo_decrypt(cms, ri);
			CMS_RecipientInfo_set0_key(ri, NULL, 0);
			if (r > 0)
				return 1;
			if (id) {
				CMSerr(CMS_F_CMS_DECRYPT_SET1_KEY,
				    CMS_R_DECRYPT_ERROR);
				return 0;
			}
			ERR_clear_error();
		}
	}

	CMSerr(CMS_F_CMS_DECRYPT_SET1_KEY, CMS_R_NO_MATCHING_RECIPIENT);
	return 0;
}

int
CMS_decrypt_set1_password(CMS_ContentInfo *cms, unsigned char *pass,
    ssize_t passlen)
{
	STACK_OF(CMS_RecipientInfo) *ris;
	CMS_RecipientInfo *ri;
	int i, r;

	ris = CMS_get0_RecipientInfos(cms);
	for (i = 0; i < sk_CMS_RecipientInfo_num(ris); i++) {
		ri = sk_CMS_RecipientInfo_value(ris, i);
		if (CMS_RecipientInfo_type(ri) != CMS_RECIPINFO_PASS)
			continue;
		CMS_RecipientInfo_set0_password(ri, pass, passlen);
		r = CMS_RecipientInfo_decrypt(cms, ri);
		CMS_RecipientInfo_set0_password(ri, NULL, 0);
		if (r > 0)
			return 1;
	}

	CMSerr(CMS_F_CMS_DECRYPT_SET1_PASSWORD, CMS_R_NO_MATCHING_RECIPIENT);
	return 0;
}

int
CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert, BIO *dcont,
    BIO *out, unsigned int flags)
{
	int r;
	BIO *cont;

	if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_enveloped) {
		CMSerr(CMS_F_CMS_DECRYPT, CMS_R_TYPE_NOT_ENVELOPED_DATA);
		return 0;
	}
	if (!dcont && !check_content(cms))
		return 0;
	if (flags & CMS_DEBUG_DECRYPT)
		cms->d.envelopedData->encryptedContentInfo->debug = 1;
	else
		cms->d.envelopedData->encryptedContentInfo->debug = 0;
	if (!pk && !cert && !dcont && !out)
		return 1;
	if (pk && !CMS_decrypt_set1_pkey(cms, pk, cert))
		return 0;
	cont = CMS_dataInit(cms, dcont);
	if (!cont)
		return 0;
	r = cms_copy_content(out, cont, flags);
	do_free_upto(cont, dcont);
	return r;
}

int
CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont, unsigned int flags)
{
	BIO *cmsbio;
	int ret = 0;

	if (!(cmsbio = CMS_dataInit(cms, dcont))) {
		CMSerr(CMS_F_CMS_FINAL, ERR_R_MALLOC_FAILURE);
		return 0;
	}

	SMIME_crlf_copy(data, cmsbio, flags);

	(void)BIO_flush(cmsbio);


	if (!CMS_dataFinal(cms, cmsbio)) {
		CMSerr(CMS_F_CMS_FINAL, CMS_R_CMS_DATAFINAL_ERROR);
		goto err;
	}

	ret = 1;

err:
	do_free_upto(cmsbio, dcont);

	return ret;
}

#ifdef ZLIB

int
CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out, unsigned int flags)
{
	BIO *cont;
	int r;

	if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_id_smime_ct_compressedData) {
		CMSerr(CMS_F_CMS_UNCOMPRESS,
		    CMS_R_TYPE_NOT_COMPRESSED_DATA);
		return 0;
	}

	if (!dcont && !check_content(cms))
		return 0;

	cont = CMS_dataInit(cms, dcont);
	if (!cont)
		return 0;
	r = cms_copy_content(out, cont, flags);
	do_free_upto(cont, dcont);
	return r;
}

CMS_ContentInfo *
CMS_compress(BIO *in, int comp_nid, unsigned int flags)
{
	CMS_ContentInfo *cms;

	if (comp_nid <= 0)
		comp_nid = NID_zlib_compression;
	cms = cms_CompressedData_create(comp_nid);
	if (!cms)
		return NULL;

	if (!(flags & CMS_DETACHED))
		CMS_set_detached(cms, 0);

	if ((flags & CMS_STREAM) || CMS_final(cms, in, NULL, flags))
		return cms;

	CMS_ContentInfo_free(cms);
	return NULL;
}

#else

int
CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out, unsigned int flags)
{
	CMSerr(CMS_F_CMS_UNCOMPRESS, CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
	return 0;
}

CMS_ContentInfo *
CMS_compress(BIO *in, int comp_nid, unsigned int flags)
{
	CMSerr(CMS_F_CMS_COMPRESS, CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
	return NULL;
}

#endif
@


1.12
log
@Make CMS_decrypt_set1_pkey() return an error if no recipient type matches,
instead of returning a random key; OpenSSL PR #3348 via OpenSSL trunk
@
text
@d1 1
a1 1
/* $OpenBSD: cms_smime.c,v 1.11 2014/07/11 08:44:48 jsing Exp $ */
d135 1
a135 1
		} while (f != upto);
@


1.12.4.1
log
@MFC: Fix several defects from OpenSSL.

These include:

CVE-2015-1788 - Malformed ECParameters causes infinite loop
CVE-2015-1789 - Exploitable out-of-bounds read in X509_cmp_time
CVE-2015-1792 - CMS verify infinite loop with unknown hash function
@
text
@d1 1
a1 1
/* $OpenBSD: cms_smime.c,v 1.12 2014/07/11 12:12:39 miod Exp $ */
d135 1
a135 1
		} while (f != NULL && f != upto);
@


1.12.6.1
log
@MFC: Fix several defects from OpenSSL.

These include:

CVE-2015-1788 - Malformed ECParameters causes infinite loop
CVE-2015-1789 - Exploitable out-of-bounds read in X509_cmp_time
CVE-2015-1792 - CMS verify infinite loop with unknown hash function
@
text
@d1 1
a1 1
/* $OpenBSD: cms_smime.c,v 1.12 2014/07/11 12:12:39 miod Exp $ */
d135 1
a135 1
		} while (f != NULL && f != upto);
@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_smime.c,v 1.10 2014/06/12 15:49:28 deraadt Exp $ */
d589 1
a589 1
	int debug = 0;
d598 1
d631 1
a631 1
	if (!cert && !debug) {
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a53 1
#include "cryptlib.h"
d55 2
d59 1
a59 2
#include <openssl/err.h>
#include <openssl/cms.h>
@


1.9
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/cms/cms_smime.c */
@


1.8
log
@Spell ssize_t correctly (the incorrect spelling is ossl_ssize_t).

ok miod@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d62 3
a64 2
static int cms_copy_content(BIO *out, BIO *in, unsigned int flags)
	{
d71 1
a71 2
	else if (flags & CMS_TEXT)
		{
d74 1
a74 2
		}
	else
d77 2
a78 3
	if(!tmpout)
		{
		CMSerr(CMS_F_CMS_COPY_CONTENT,ERR_R_MALLOC_FAILURE);
d80 1
a80 1
		}
d83 4
a86 7
	for (;;)
	{
		i=BIO_read(in,buf,sizeof(buf));
		if (i <= 0)
			{
			if (BIO_method_type(in) == BIO_TYPE_CIPHER)
				{
d89 1
a89 1
				}
d93 2
a94 2
			}
				
d99 3
a101 5
	if(flags & CMS_TEXT)
		{
		if(!SMIME_text(tmpout, out))
			{
			CMSerr(CMS_F_CMS_COPY_CONTENT,CMS_R_SMIME_TEXT_ERROR);
a102 1
			}
d104 1
d108 1
a108 1
	err:
d112 1
d114 4
a117 1
	}
d119 1
a119 5
static int check_content(CMS_ContentInfo *cms)
	{
	ASN1_OCTET_STRING **pos = CMS_get0_content(cms);
	if (!pos || !*pos)
		{
d122 1
a122 1
		}
d124 1
a124 1
	}
d126 4
a129 4
static void do_free_upto(BIO *f, BIO *upto)
	{
	if (upto)
		{
d131 1
a131 2
		do 
			{
d135 2
a136 4
			}
		while (f != upto);
		}
	else
d138 1
a138 1
	}
d140 3
a142 2
int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags)
	{
d145 2
a146 2
	if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_data)
		{
d149 1
a149 1
		}
d156 1
a156 1
	}
d158 3
a160 2
CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags)
	{
d162 1
d173 1
a173 1
	}
d175 4
a178 3
int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
							unsigned int flags)
	{
d181 2
a182 2
	if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_digest)
		{
d185 1
a185 1
		}
d198 1
a198 1
	}
d200 3
a202 3
CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,
					unsigned int flags)
	{
d204 1
d211 1
a211 1
	if(!(flags & CMS_DETACHED))
d219 1
a219 1
	}
d221 4
a224 4
int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
				const unsigned char *key, size_t keylen,
				BIO *dcont, BIO *out, unsigned int flags)
	{
d227 2
a228 2
	if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_encrypted)
		{
d230 1
a230 1
					CMS_R_TYPE_NOT_ENCRYPTED_DATA);
d232 1
a232 1
		}
d245 1
a245 1
	}
d247 4
a250 4
CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
					const unsigned char *key, size_t keylen,
					unsigned int flags)
	{
d252 2
a253 2
	if (!cipher)
		{
d256 1
a256 1
		}
d263 1
a263 1
	if(!(flags & CMS_DETACHED))
d266 2
a267 2
	if ((flags & (CMS_STREAM|CMS_PARTIAL))
		|| CMS_final(cms, in, NULL, flags))
d272 1
a272 1
	}
d274 4
a277 6
static int cms_signerinfo_verify_cert(CMS_SignerInfo *si,
					X509_STORE *store,
					STACK_OF(X509) *certs,
					STACK_OF(X509_CRL) *crls,
					unsigned int flags)
	{
d281 1
d283 1
a283 2
	if (!X509_STORE_CTX_init(&ctx, store, signer, certs))
		{
d285 1
a285 1
						CMS_R_STORE_INIT_ERROR);
d287 1
a287 1
		}
d293 1
a293 2
	if (i <= 0)
		{
d296 1
a296 1
						CMS_R_CERTIFICATE_VERIFY_ERROR);
d298 1
a298 1
					 X509_verify_cert_error_string(j));
d300 1
a300 1
		}
d302 2
a303 1
	err:
d306 1
d308 4
a311 5
	}

int CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
		 X509_STORE *store, BIO *dcont, BIO *out, unsigned int flags)
	{
d327 1
a327 2
	if (sk_CMS_SignerInfo_num(sinfos) <= 0)
		{
d330 1
a330 1
		}
d332 1
a332 2
	for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++)
		{
d337 1
a337 1
		}
d342 1
a342 2
	if (scount != sk_CMS_SignerInfo_num(sinfos))
		{
d345 1
a345 1
		}
d349 1
a349 2
	if (!(flags & CMS_NO_SIGNER_CERT_VERIFY))
		{
d353 1
a353 2
		for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++)
			{
d356 1
a356 1
							cms_certs, crls, flags))
a357 1
			}
d359 1
d363 2
a364 4
	if (!(flags & CMS_NO_ATTR_VERIFY))
		{
		for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++)
			{
a369 1
			}
d371 1
d380 1
a380 2
	if (dcont && (BIO_method_type(dcont) == BIO_TYPE_MEM))
		{
d385 2
a386 3
		if (tmpin == NULL)
			{
			CMSerr(CMS_F_CMS_VERIFY,ERR_R_MALLOC_FAILURE);
a387 1
			}
d389 1
a389 1
	else
a390 1
		
d392 2
a393 1
	cmsbio=CMS_dataInit(cms, tmpin);
d400 2
a401 4
	if (!(flags & CMS_NO_CONTENT_VERIFY))
		{
		for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++)
			{
d403 1
a403 2
			if (CMS_SignerInfo_verify_content(si, cmsbio) <= 0)
				{
d405 1
a405 1
					CMS_R_CONTENT_VERIFY_ERROR);
a406 1
				}
d409 1
d413 1
a413 2
	err:
	
d425 1
a425 1
	}
d427 4
a430 4
int CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
			STACK_OF(X509) *certs,
			X509_STORE *store, unsigned int flags)
	{
d432 1
d438 1
a438 1
	}
d440 4
a443 3
CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,
						BIO *data, unsigned int flags)
	{
d451 1
a451 2
	if (pkey && !CMS_add1_signer(cms, signcert, pkey, NULL, flags))
		{
d454 1
a454 1
		}
d456 1
a456 2
	for (i = 0; i < sk_X509_num(certs); i++)
		{
d460 1
a460 1
		}
d462 1
a462 1
	if(!(flags & CMS_DETACHED))
d465 2
a466 2
	if ((flags & (CMS_STREAM|CMS_PARTIAL))
		|| CMS_final(cms, data, NULL, flags))
d471 1
a471 1
	merr:
d473 1
a473 2

	err:
d477 1
a477 1
	}
d479 4
a482 5
CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,
					X509 *signcert, EVP_PKEY *pkey,
					STACK_OF(X509) *certs,
					unsigned int flags)
	{
d492 1
a492 2
	if (!pkey || !signcert)
		{
d495 1
a495 1
		}
d508 1
a508 2
	if (!rct_si)
		{
d511 1
a511 1
		}
d538 1
a538 1
	err:
d545 1
d547 4
a550 5
	}

CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *data,
				const EVP_CIPHER *cipher, unsigned int flags)
	{
d554 1
d558 1
a558 2
	for (i = 0; i < sk_X509_num(certs); i++)
		{
d560 1
a560 2
		if (!CMS_add1_recipient_cert(cms, recip, flags))
			{
a562 1
			}
d564 1
d566 1
a566 1
	if(!(flags & CMS_DETACHED))
d569 2
a570 2
	if ((flags & (CMS_STREAM|CMS_PARTIAL))
		|| CMS_final(cms, data, NULL, flags))
d575 1
a575 1
	merr:
d577 1
a577 1
	err:
d581 1
a581 1
	}
d583 3
a585 2
int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert)
	{
d590 1
d594 1
a594 2
	for (i = 0; i < sk_CMS_RecipientInfo_num(ris); i++)
		{
d597 1
a597 1
				continue;
d601 1
a601 2
		if (!cert || (CMS_RecipientInfo_ktri_cert_cmp(ri, cert) == 0))
			{
d605 1
a605 2
			if (cert)
				{
d610 1
a610 2
				if (!debug)
					{
d613 1
a613 1
					}
d617 1
a617 1
						CMS_R_DECRYPT_ERROR);
d619 1
a619 1
				}
a626 1
			}
d628 1
d630 1
a630 2
	if (!cert && !debug)
		{
d633 1
a633 1
		}
d637 1
d639 4
a642 6
	}

int CMS_decrypt_set1_key(CMS_ContentInfo *cms, 
				unsigned char *key, size_t keylen,
				unsigned char *id, size_t idlen)
	{
d646 1
d648 1
a648 2
	for (i = 0; i < sk_CMS_RecipientInfo_num(ris); i++)
		{
d651 1
a651 1
				continue;
d656 2
a657 2
		if (!id || (CMS_RecipientInfo_kekri_id_cmp(ri, id, idlen) == 0))
			{
d663 1
a663 2
			if (id)
				{
d665 1
a665 1
						CMS_R_DECRYPT_ERROR);
d667 1
a667 1
				}
a668 1
			}
d670 1
d674 1
d676 4
a679 5
	}

int CMS_decrypt_set1_password(CMS_ContentInfo *cms, 
				unsigned char *pass, ssize_t passlen)
	{
d683 1
d685 1
a685 2
	for (i = 0; i < sk_CMS_RecipientInfo_num(ris); i++)
		{
d688 1
a688 1
				continue;
d694 1
a694 1
		}
d698 1
d700 4
a703 6
	}
	
int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert,
				BIO *dcont, BIO *out,
				unsigned int flags)
	{
d706 2
a707 2
	if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_enveloped)
		{
d710 1
a710 1
		}
d727 1
a727 1
	}
d729 3
a731 2
int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont, unsigned int flags)
	{
d734 3
a736 3
	if (!(cmsbio = CMS_dataInit(cms, dcont)))
		{
		CMSerr(CMS_F_CMS_FINAL,ERR_R_MALLOC_FAILURE);
d738 1
a738 1
		}
d745 2
a746 3
        if (!CMS_dataFinal(cms, cmsbio))
		{
		CMSerr(CMS_F_CMS_FINAL,CMS_R_CMS_DATAFINAL_ERROR);
d748 1
a748 1
		}
d752 1
a752 1
	err:
d756 1
a756 2

	}
d760 3
a762 3
int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
							unsigned int flags)
	{
d765 2
a766 2
	if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_id_smime_ct_compressedData)
		{
d768 1
a768 1
					CMS_R_TYPE_NOT_COMPRESSED_DATA);
d770 1
a770 1
		}
d781 1
a781 1
	}
d783 3
a785 2
CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags)
	{
d787 1
d794 1
a794 1
	if(!(flags & CMS_DETACHED))
d802 1
a802 1
	}
d806 3
a808 3
int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
							unsigned int flags)
	{
d811 1
a811 1
	}
d813 3
a815 2
CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags)
	{
d818 1
a818 1
	}
@


1.7
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d709 1
a709 1
				unsigned char *pass, ossl_ssize_t passlen)
@


1.6
log
@resolve conflicts
@
text
@d305 1
a305 1
		ERR_add_error_data(2, "Verify error:",
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d614 1
d616 2
a630 2
			if (r > 0)
				return 1;
d633 11
d648 7
a654 1
			ERR_clear_error();
d657 6
d707 24
d745 6
a752 1

@


1.4
log
@resolve conflicts
@
text
@d174 1
a174 1
	if (CMS_final(cms, in, NULL, flags))
a216 2
		{
		flags &= ~CMS_STREAM;
a217 1
		}
a268 2
		{
		flags &= ~CMS_STREAM;
a269 1
		}
d453 1
a483 2
		{
		flags &= ~CMS_STREAM;
a484 1
		}
d512 1
a512 1
	flags &= ~CMS_STREAM;
a592 2
		{
		flags &= ~CMS_STREAM;
a593 1
		}
a772 2
		{
		flags &= ~CMS_STREAM;
a773 1
		}
d775 1
a775 1
	if (CMS_final(cms, in, NULL, flags))
@


1.3
log
@resolve conflicts
@
text
@d301 1
a301 1
	X509_STORE_CTX_set_purpose(&ctx, X509_PURPOSE_SMIME_SIGN);
d428 1
a428 1
			if (!CMS_SignerInfo_verify_content(si, cmsbio))
@


1.2
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@d71 1
d73 2
@


1.1
log
@Initial revision
@
text
@d92 2
d97 2
a98 2
		if (tmpout)
			BIO_write(tmpout, buf, i);
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@a70 1
		{
a71 2
		BIO_set_mem_eof_return(tmpout, 0);
		}
a91 2
			if (i < 0)
				goto err;
d95 2
a96 2
		if (tmpout && (BIO_write(tmpout, buf, i) != i))
			goto err;
@


1.1.1.3
log
@import of OpenSSL 0.9.8k
@
text
@d301 1
a301 1
	X509_STORE_CTX_set_default(&ctx, "smime_sign");
d428 1
a428 1
			if (CMS_SignerInfo_verify_content(si, cmsbio) <= 0)
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d174 1
a174 1
	if ((flags & CMS_STREAM) || CMS_final(cms, in, NULL, flags))
d217 2
d220 1
d272 2
d275 1
a458 1
	flags &= ~(CMS_DETACHED|CMS_TEXT);
d489 2
d492 1
d520 1
a520 1
	flags &= ~(CMS_STREAM|CMS_TEXT);
d601 2
d604 1
d784 2
d787 1
d789 1
a789 1
	if ((flags & CMS_STREAM) || CMS_final(cms, in, NULL, flags))
@


1.1.1.5
log
@import OpenSSL-1.0.1c
@
text
@a613 1
	int debug = 0;
a614 2
	if (ris)
		debug = cms->d.envelopedData->encryptedContentInfo->debug;
d628 2
a631 11
				/* If not debugging clear any error and
				 * return success to avoid leaking of
				 * information useful to MMA
				 */
				if (!debug)
					{
					ERR_clear_error();
					return 1;
					}
				if (r > 0)
					return 1;
d636 1
a636 7
			/* If no cert and not debugging don't leave loop
			 * after first successful decrypt. Always attempt
			 * to decrypt all recipients to avoid leaking timing
			 * of a successful decrypt.
			 */
			else if (r > 0 && debug)
				return 1;
a638 6
	/* If no cert and not debugging always return success */
	if (!cert && !debug)
		{
		ERR_clear_error();
		return 1;
		}
a682 24

int CMS_decrypt_set1_password(CMS_ContentInfo *cms, 
				unsigned char *pass, ossl_ssize_t passlen)
	{
	STACK_OF(CMS_RecipientInfo) *ris;
	CMS_RecipientInfo *ri;
	int i, r;
	ris = CMS_get0_RecipientInfos(cms);
	for (i = 0; i < sk_CMS_RecipientInfo_num(ris); i++)
		{
		ri = sk_CMS_RecipientInfo_value(ris, i);
		if (CMS_RecipientInfo_type(ri) != CMS_RECIPINFO_PASS)
				continue;
		CMS_RecipientInfo_set0_password(ri, pass, passlen);
		r = CMS_RecipientInfo_decrypt(cms, ri);
		CMS_RecipientInfo_set0_password(ri, NULL, 0);
		if (r > 0)
			return 1;
		}

	CMSerr(CMS_F_CMS_DECRYPT_SET1_PASSWORD, CMS_R_NO_MATCHING_RECIPIENT);
	return 0;

	}
a696 6
	if (flags & CMS_DEBUG_DECRYPT)
		cms->d.envelopedData->encryptedContentInfo->debug = 1;
	else
		cms->d.envelopedData->encryptedContentInfo->debug = 0;
	if (!pk && !cert && !dcont && !out)
		return 1;
d699 1
@


