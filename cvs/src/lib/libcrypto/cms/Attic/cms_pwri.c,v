head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2016.09.04.17.55.28;	author jsing;	state dead;
branches;
next	1.10;
commitid	6cKjjSNzZGsdvU20;

1.10
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.9;
commitid	vHznCDK3idwNEFz4;

1.9
date	2015.05.15.11.00.14;	author jsg;	state Exp;
branches;
next	1.8;
commitid	DVhfXEEmSZcth64F;

1.8
date	2014.10.22.13.02.04;	author jsing;	state Exp;
branches;
next	1.7;
commitid	PjnBgKe6Buhbf937;

1.7
date	2014.07.11.15.42.34;	author miod;	state Exp;
branches;
next	1.6;
commitid	4gEE13QyZ5iRh93i;

1.6
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.5;
commitid	yQEL1wOWIearrW15;

1.5
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.24.15.55.21;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.24.07.11.39;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.38;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.38;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove cms.

ok beck@@, guenther@@, tedu@@
@
text
@/* $OpenBSD: cms_pwri.c,v 1.10 2015/09/10 15:56:25 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 2009 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <stdlib.h>

#include <openssl/aes.h>
#include <openssl/asn1t.h>
#include <openssl/cms.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/x509v3.h>

#include "asn1_locl.h"
#include "cms_lcl.h"

int
CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri, unsigned char *pass,
    ssize_t passlen)
{
	CMS_PasswordRecipientInfo *pwri;

	if (ri->type != CMS_RECIPINFO_PASS) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD, CMS_R_NOT_PWRI);
		return 0;
	}

	pwri = ri->d.pwri;
	pwri->pass = pass;
	if (pass && passlen < 0)
		passlen = strlen((char *)pass);
	pwri->passlen = passlen;
	return 1;
}

CMS_RecipientInfo *
CMS_add0_recipient_password(CMS_ContentInfo *cms, int iter, int wrap_nid,
    int pbe_nid, unsigned char *pass, ssize_t passlen,
    const EVP_CIPHER *kekciph)
{
	CMS_RecipientInfo *ri = NULL;
	CMS_EnvelopedData *env;
	CMS_PasswordRecipientInfo *pwri;
	EVP_CIPHER_CTX ctx;
	X509_ALGOR *encalg = NULL;
	unsigned char iv[EVP_MAX_IV_LENGTH];
	int ivlen;

	env = cms_get0_enveloped(cms);
	if (!env)
		return NULL;

	if (wrap_nid <= 0)
		wrap_nid = NID_id_alg_PWRI_KEK;

	if (pbe_nid <= 0)
		pbe_nid = NID_id_pbkdf2;

	/* Get from enveloped data */
	if (kekciph == NULL)
		kekciph = env->encryptedContentInfo->cipher;

	if (kekciph == NULL) {
		CMSerr(CMS_F_CMS_ADD0_RECIPIENT_PASSWORD, CMS_R_NO_CIPHER);
		return NULL;
	}
	if (wrap_nid != NID_id_alg_PWRI_KEK) {
		CMSerr(CMS_F_CMS_ADD0_RECIPIENT_PASSWORD,
		    CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM);
		return NULL;
	}

	/* Setup algorithm identifier for cipher */
	encalg = X509_ALGOR_new();
	EVP_CIPHER_CTX_init(&ctx);

	if (EVP_EncryptInit_ex(&ctx, kekciph, NULL, NULL, NULL) <= 0) {
		CMSerr(CMS_F_CMS_ADD0_RECIPIENT_PASSWORD, ERR_R_EVP_LIB);
		goto err;
	}

	ivlen = EVP_CIPHER_CTX_iv_length(&ctx);

	if (ivlen > 0) {
		arc4random_buf(iv, ivlen);
		if (EVP_EncryptInit_ex(&ctx, NULL, NULL, NULL, iv) <= 0) {
			CMSerr(CMS_F_CMS_ADD0_RECIPIENT_PASSWORD,
			    ERR_R_EVP_LIB);
			goto err;
		}
		encalg->parameter = ASN1_TYPE_new();
		if (!encalg->parameter) {
			CMSerr(CMS_F_CMS_ADD0_RECIPIENT_PASSWORD,
			    ERR_R_MALLOC_FAILURE);
			goto err;
		}
		if (EVP_CIPHER_param_to_asn1(&ctx, encalg->parameter) <= 0) {
			CMSerr(CMS_F_CMS_ADD0_RECIPIENT_PASSWORD,
			    CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR);
			goto err;
		}
	}


	encalg->algorithm = OBJ_nid2obj(EVP_CIPHER_CTX_type(&ctx));

	EVP_CIPHER_CTX_cleanup(&ctx);

	/* Initialize recipient info */
	ri = M_ASN1_new_of(CMS_RecipientInfo);
	if (!ri)
		goto merr;

	ri->d.pwri = M_ASN1_new_of(CMS_PasswordRecipientInfo);
	if (!ri->d.pwri)
		goto merr;
	ri->type = CMS_RECIPINFO_PASS;

	pwri = ri->d.pwri;
	/* Since this is overwritten, free up empty structure already there */
	X509_ALGOR_free(pwri->keyEncryptionAlgorithm);
	pwri->keyEncryptionAlgorithm = X509_ALGOR_new();
	if (!pwri->keyEncryptionAlgorithm)
		goto merr;
	pwri->keyEncryptionAlgorithm->algorithm = OBJ_nid2obj(wrap_nid);
	pwri->keyEncryptionAlgorithm->parameter = ASN1_TYPE_new();
	if (!pwri->keyEncryptionAlgorithm->parameter)
		goto merr;

	if (!ASN1_item_pack(encalg, ASN1_ITEM_rptr(X509_ALGOR),
	    &pwri->keyEncryptionAlgorithm->parameter->value.sequence))
		goto merr;
	pwri->keyEncryptionAlgorithm->parameter->type = V_ASN1_SEQUENCE;

	X509_ALGOR_free(encalg);
	encalg = NULL;

	/* Setup PBE algorithm */

	pwri->keyDerivationAlgorithm = PKCS5_pbkdf2_set(iter, NULL, 0, -1, -1);

	if (!pwri->keyDerivationAlgorithm)
		goto err;

	CMS_RecipientInfo_set0_password(ri, pass, passlen);
	pwri->version = 0;

	if (!sk_CMS_RecipientInfo_push(env->recipientInfos, ri))
		goto merr;

	return ri;

merr:
	CMSerr(CMS_F_CMS_ADD0_RECIPIENT_PASSWORD, ERR_R_MALLOC_FAILURE);
err:
	EVP_CIPHER_CTX_cleanup(&ctx);
	if (ri)
		M_ASN1_free_of(ri, CMS_RecipientInfo);
	if (encalg)
		X509_ALGOR_free(encalg);
	return NULL;
}

/* This is an implementation of the key wrapping mechanism in RFC3211,
 * at some point this should go into EVP.
 */

static int
kek_unwrap_key(unsigned char *out, size_t *outlen, const unsigned char *in,
    size_t inlen, EVP_CIPHER_CTX *ctx)
{
	size_t blocklen = EVP_CIPHER_CTX_block_size(ctx);
	unsigned char *tmp;
	int outl, rv = 0;

	if (inlen < 2 * blocklen) {
		/* too small */
		return 0;
	}
	if (inlen % blocklen) {
		/* Invalid size */
		return 0;
	}
	tmp = malloc(inlen);
	/* setup IV by decrypting last two blocks */
	EVP_DecryptUpdate(ctx, tmp + inlen - 2 * blocklen, &outl,
	    in  + inlen - 2 * blocklen, blocklen * 2);
	/* Do a decrypt of last decrypted block to set IV to correct value
	 * output it to start of buffer so we don't corrupt decrypted block
	 * this works because buffer is at least two block lengths long.
	 */
	EVP_DecryptUpdate(ctx, tmp, &outl,
	    tmp  + inlen - blocklen, blocklen);
	/* Can now decrypt first n - 1 blocks */
	EVP_DecryptUpdate(ctx, tmp, &outl, in, inlen - blocklen);

	/* Reset IV to original value */
	EVP_DecryptInit_ex(ctx, NULL, NULL, NULL, NULL);
	/* Decrypt again */
	EVP_DecryptUpdate(ctx, tmp, &outl, tmp, inlen);
	/* Check check bytes */
	if (((tmp[1] ^ tmp[4]) & (tmp[2] ^ tmp[5]) &
	    (tmp[3] ^ tmp[6])) != 0xff) {
		/* Check byte failure */
		goto err;
	}
	if (inlen < (size_t)(tmp[0] - 4 )) {
		/* Invalid length value */
		goto err;
	}
	*outlen = (size_t)tmp[0];
	memcpy(out, tmp + 4, *outlen);
	rv = 1;

err:
	explicit_bzero(tmp, inlen);
	free(tmp);
	return rv;
}

static int
kek_wrap_key(unsigned char *out, size_t *outlen, const unsigned char *in,
    size_t inlen, EVP_CIPHER_CTX *ctx)
{
	size_t blocklen = EVP_CIPHER_CTX_block_size(ctx);
	size_t olen;
	int dummy;

	/* First decide length of output buffer: need header and round up to
	 * multiple of block length.
	 */
	olen = (inlen + 4 + blocklen - 1)/blocklen;
	olen *= blocklen;
	if (olen < 2 * blocklen) {
		/* Key too small */
		return 0;
	}
	if (inlen > 0xFF) {
		/* Key too large */
		return 0;
	}
	if (out) {
		/* Set header */
		out[0] = (unsigned char)inlen;
		out[1] = in[0] ^ 0xFF;
		out[2] = in[1] ^ 0xFF;
		out[3] = in[2] ^ 0xFF;
		memcpy(out + 4, in, inlen);
		/* Add random padding to end */
		if (olen > inlen + 4)
			arc4random_buf(out + 4 + inlen, olen - 4 - inlen);
		/* Encrypt twice */
		EVP_EncryptUpdate(ctx, out, &dummy, out, olen);
		EVP_EncryptUpdate(ctx, out, &dummy, out, olen);
	}

	*outlen = olen;

	return 1;
}

/* Encrypt/Decrypt content key in PWRI recipient info */

int
cms_RecipientInfo_pwri_crypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri,
    int en_de)
{
	CMS_EncryptedContentInfo *ec;
	CMS_PasswordRecipientInfo *pwri;
	const unsigned char *p = NULL;
	int plen;
	int r = 0;
	X509_ALGOR *algtmp, *kekalg = NULL;
	EVP_CIPHER_CTX kekctx;
	const EVP_CIPHER *kekcipher;
	unsigned char *key = NULL;
	size_t keylen;

	ec = cms->d.envelopedData->encryptedContentInfo;

	pwri = ri->d.pwri;
	EVP_CIPHER_CTX_init(&kekctx);

	if (!pwri->pass) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT, CMS_R_NO_PASSWORD);
		goto err;
	}
	algtmp = pwri->keyEncryptionAlgorithm;

	if (!algtmp || OBJ_obj2nid(algtmp->algorithm) != NID_id_alg_PWRI_KEK) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT,
		    CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM);
		goto err;
	}

	if (algtmp->parameter->type == V_ASN1_SEQUENCE) {
		p = algtmp->parameter->value.sequence->data;
		plen = algtmp->parameter->value.sequence->length;
		kekalg = d2i_X509_ALGOR(NULL, &p, plen);
	}
	if (kekalg == NULL) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT,
		    CMS_R_INVALID_KEY_ENCRYPTION_PARAMETER);
		goto err;
	}

	kekcipher = EVP_get_cipherbyobj(kekalg->algorithm);

	if (!kekcipher) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT,
		    CMS_R_UNKNOWN_CIPHER);
		goto err;
	}

	/* Fixup cipher based on AlgorithmIdentifier to set IV etc */
	if (!EVP_CipherInit_ex(&kekctx, kekcipher, NULL, NULL, NULL, en_de))
		goto err;
	EVP_CIPHER_CTX_set_padding(&kekctx, 0);
	if (EVP_CIPHER_asn1_to_param(&kekctx, kekalg->parameter) < 0) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT,
		    CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR);
		goto err;
	}

	algtmp = pwri->keyDerivationAlgorithm;

	/* Finish password based key derivation to setup key in "ctx" */

	if (EVP_PBE_CipherInit(algtmp->algorithm,
	    (char *)pwri->pass, pwri->passlen,
	    algtmp->parameter, &kekctx, en_de) < 0) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT, ERR_R_EVP_LIB);
		goto err;
	}

	/* Finally wrap/unwrap the key */

	if (en_de) {

		if (!kek_wrap_key(NULL, &keylen, ec->key, ec->keylen, &kekctx))
			goto err;

		key = malloc(keylen);

		if (!key)
			goto err;

		if (!kek_wrap_key(key, &keylen, ec->key, ec->keylen, &kekctx))
			goto err;
		pwri->encryptedKey->data = key;
		pwri->encryptedKey->length = keylen;
	} else {
		key = malloc(pwri->encryptedKey->length);

		if (!key) {
			CMSerr(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT,
			    ERR_R_MALLOC_FAILURE);
			goto err;
		}
		if (!kek_unwrap_key(key, &keylen,
		    pwri->encryptedKey->data,
		    pwri->encryptedKey->length, &kekctx)) {
			CMSerr(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT,
			    CMS_R_UNWRAP_FAILURE);
			goto err;
		}

		ec->key = key;
		ec->keylen = keylen;

	}

	r = 1;

err:
	EVP_CIPHER_CTX_cleanup(&kekctx);
	if (!r && key)
		free(key);
	X509_ALGOR_free(kekalg);

	return r;
}
@


1.10
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_pwri.c,v 1.9 2015/05/15 11:00:14 jsg Exp $ */
@


1.9
log
@Fix return paths with missing EVP_CIPHER_CTX_cleanup() calls.
ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_pwri.c,v 1.8 2014/10/22 13:02:04 jsing Exp $ */
d265 1
a265 1
	OPENSSL_cleanse(tmp, inlen);
@


1.8
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_pwri.c,v 1.7 2014/07/11 15:42:34 miod Exp $ */
d335 1
a335 1
		return 0;
d342 1
a342 1
		return 0;
d353 1
a353 1
		return 0;
@


1.7
log
@Avoid invoking EVP_CIPHER_CTX_cleanup() on uninitialized memory; from
Coverity via OpenSSL trunk
@
text
@d1 1
a1 1
/* $OpenBSD: cms_pwri.c,v 1.6 2014/07/11 08:44:48 jsing Exp $ */
d54 2
a60 1
#include <openssl/rand.h>
d134 1
a134 2
		if (RAND_pseudo_bytes(iv, ivlen) <= 0)
			goto err;
d300 1
a300 1
			RAND_pseudo_bytes(out + 4 + inlen, olen - 4 - inlen);
@


1.6
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_pwri.c,v 1.5 2014/06/12 15:49:28 deraadt Exp $ */
d99 1
a99 1
		goto err;
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d54 1
a54 1
#include "cryptlib.h"
d56 2
d59 1
d61 2
a62 4
#include <openssl/err.h>
#include <openssl/cms.h>
#include <openssl/rand.h>
#include <openssl/aes.h>
a63 1
#include "asn1_locl.h"
@


1.4
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/cms/cms_pwri.c */
@


1.3
log
@Spell ssize_t correctly (the incorrect spelling is ossl_ssize_t).

ok miod@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d65 4
a68 3
int CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri, 
				unsigned char *pass, ssize_t passlen)
	{
d70 2
a71 2
	if (ri->type != CMS_RECIPINFO_PASS)
		{
d74 1
a74 1
		}
d82 1
a82 1
	}
d84 5
a88 6
CMS_RecipientInfo *CMS_add0_recipient_password(CMS_ContentInfo *cms,
					int iter, int wrap_nid, int pbe_nid,
					unsigned char *pass,
					ssize_t passlen,
					const EVP_CIPHER *kekciph)
	{
d96 1
d111 1
a111 2
	if (kekciph == NULL)
		{
d114 2
a115 3
		}
	if (wrap_nid != NID_id_alg_PWRI_KEK)
		{
d117 1
a117 1
				CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM);
d119 1
a119 1
		}
d125 1
a125 2
	if (EVP_EncryptInit_ex(&ctx, kekciph, NULL, NULL, NULL) <= 0)
		{
d128 1
a128 1
		}
d132 1
a132 2
	if (ivlen > 0)
		{
d135 1
a135 2
		if (EVP_EncryptInit_ex(&ctx, NULL, NULL, NULL, iv) <= 0)
			{
d137 1
a137 1
							ERR_R_EVP_LIB);
d139 1
a139 1
			}
d141 1
a141 2
		if (!encalg->parameter)
			{
d143 1
a143 1
							ERR_R_MALLOC_FAILURE);
d145 2
a146 3
			}
		if (EVP_CIPHER_param_to_asn1(&ctx, encalg->parameter) <= 0)
			{
d148 1
a148 1
				CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR);
a149 1
			}
d151 1
d179 1
a179 1
        if(!ASN1_item_pack(encalg, ASN1_ITEM_rptr(X509_ALGOR),
d182 1
a182 1
        pwri->keyEncryptionAlgorithm->parameter->type = V_ASN1_SEQUENCE;
d202 1
a202 1
	merr:
d204 1
a204 1
	err:
d211 1
a211 2

	}
d217 4
a220 3
static int kek_unwrap_key(unsigned char *out, size_t *outlen,
		const unsigned char *in, size_t inlen, EVP_CIPHER_CTX *ctx)
	{
d224 2
a225 2
	if (inlen < 2 * blocklen)
		{
d228 2
a229 3
		}
	if (inlen % blocklen)
		{
d232 1
a232 1
		}
d236 1
a236 1
				in  + inlen - 2 * blocklen, blocklen * 2);
d242 1
a242 1
				tmp  + inlen - blocklen, blocklen);
d251 2
a252 2
	if (((tmp[1] ^ tmp[4]) & (tmp[2] ^ tmp[5]) & (tmp[3] ^ tmp[6])) != 0xff)
		{
d255 2
a256 3
		}
	if (inlen < (size_t)(tmp[0] - 4 ))
		{
d259 1
a259 1
		}
d263 2
a264 1
	err:
d268 1
d270 4
a273 5
	}

static int kek_wrap_key(unsigned char *out, size_t *outlen,
		const unsigned char *in, size_t inlen, EVP_CIPHER_CTX *ctx)
	{
d277 1
d283 1
a283 2
	if (olen < 2 * blocklen)
		{
d286 2
a287 3
		}
	if (inlen > 0xFF)
		{
d290 2
a291 3
		}
	if (out)
		{
d304 1
a304 1
		}
d309 1
a309 1
	}
d313 4
a316 3
int cms_RecipientInfo_pwri_crypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri,
							int en_de)
	{
d333 1
a333 2
	if (!pwri->pass)
		{
d336 1
a336 1
		}
d339 1
a339 2
	if (!algtmp || OBJ_obj2nid(algtmp->algorithm) != NID_id_alg_PWRI_KEK)
		{
d341 1
a341 1
				CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM);
d343 1
a343 1
		}
d345 1
a345 2
	if (algtmp->parameter->type == V_ASN1_SEQUENCE)
		{
d349 2
a350 3
		}
	if (kekalg == NULL)
		{
d352 1
a352 1
				CMS_R_INVALID_KEY_ENCRYPTION_PARAMETER);
d354 1
a354 1
		}
d357 2
a358 3
		
	if(!kekcipher)
		{
d360 1
a360 1
				CMS_R_UNKNOWN_CIPHER);
d362 1
a362 1
		}
d368 1
a368 2
	if(EVP_CIPHER_asn1_to_param(&kekctx, kekalg->parameter) < 0)
		{
d370 1
a370 1
				CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR);
d372 1
a372 1
		}
d379 2
a380 3
				(char *)pwri->pass, pwri->passlen,
				algtmp->parameter, &kekctx, en_de) < 0)
		{
d383 1
a383 1
		}
d387 1
a387 2
	if (en_de)
		{
d401 1
a401 3
		}
	else
		{
d404 1
a404 2
		if (!key)
			{
d406 1
a406 1
							ERR_R_MALLOC_FAILURE);
d408 1
a408 1
			}
d410 2
a411 3
					pwri->encryptedKey->data,
					pwri->encryptedKey->length, &kekctx))
			{
d413 1
a413 1
							CMS_R_UNWRAP_FAILURE);
d415 1
a415 1
			}
d420 1
a420 1
		}
d424 1
a424 2
	err:

a425 1

d431 1
a431 2

	}
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d66 1
a66 1
				unsigned char *pass, ossl_ssize_t passlen)
d86 1
a86 1
					ossl_ssize_t passlen,
@


1.1
log
@Initial revision
@
text
@d240 1
a240 1
	tmp = OPENSSL_malloc(inlen);
d273 1
a273 1
	OPENSSL_free(tmp);
d408 1
a408 1
		key = OPENSSL_malloc(keylen);
d420 1
a420 1
		key = OPENSSL_malloc(pwri->encryptedKey->length);
d449 1
a449 1
		OPENSSL_free(key);
@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@
