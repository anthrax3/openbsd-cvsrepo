head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2016.09.04.17.55.28;	author jsing;	state dead;
branches;
next	1.9;
commitid	6cKjjSNzZGsdvU20;

1.9
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.8;
commitid	vHznCDK3idwNEFz4;

1.8
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.7;
commitid	8tb4v3IC8S2vzfHj;

1.7
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.6;
commitid	G74O1dmRukKsW7IJ;

1.6
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.5;
commitid	yQEL1wOWIearrW15;

1.5
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.24.15.55.21;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.22.21.12.15;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.10.13.21.23.38;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove cms.

ok beck@@, guenther@@, tedu@@
@
text
@/* $OpenBSD: cms_env.c,v 1.9 2015/09/10 15:56:25 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 2008 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <openssl/aes.h>
#include <openssl/asn1t.h>
#include <openssl/cms.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/x509v3.h>

#include "cms_lcl.h"
#include "asn1_locl.h"

/* CMS EnvelopedData Utilities */

DECLARE_ASN1_ITEM(CMS_EnvelopedData)
DECLARE_ASN1_ITEM(CMS_KeyTransRecipientInfo)
DECLARE_ASN1_ITEM(CMS_KEKRecipientInfo)
DECLARE_ASN1_ITEM(CMS_OtherKeyAttribute)

DECLARE_STACK_OF(CMS_RecipientInfo)

CMS_EnvelopedData *
cms_get0_enveloped(CMS_ContentInfo *cms)
{
	if (OBJ_obj2nid(cms->contentType) != NID_pkcs7_enveloped) {
		CMSerr(CMS_F_CMS_GET0_ENVELOPED,
		    CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA);
		return NULL;
	}
	return cms->d.envelopedData;
}

static CMS_EnvelopedData *
cms_enveloped_data_init(CMS_ContentInfo *cms)
{
	if (cms->d.other == NULL) {
		cms->d.envelopedData = M_ASN1_new_of(CMS_EnvelopedData);
		if (!cms->d.envelopedData) {
			CMSerr(CMS_F_CMS_ENVELOPED_DATA_INIT,
			    ERR_R_MALLOC_FAILURE);
			return NULL;
		}
		cms->d.envelopedData->version = 0;
		cms->d.envelopedData->encryptedContentInfo->contentType =
		    OBJ_nid2obj(NID_pkcs7_data);
		ASN1_OBJECT_free(cms->contentType);
		cms->contentType = OBJ_nid2obj(NID_pkcs7_enveloped);
		return cms->d.envelopedData;
	}
	return cms_get0_enveloped(cms);
}

STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms)
{
	CMS_EnvelopedData *env;

	env = cms_get0_enveloped(cms);
	if (!env)
		return NULL;
	return env->recipientInfos;
}

int
CMS_RecipientInfo_type(CMS_RecipientInfo *ri)
{
	return ri->type;
}

CMS_ContentInfo *
CMS_EnvelopedData_create(const EVP_CIPHER *cipher)
{
	CMS_ContentInfo *cms;
	CMS_EnvelopedData *env;

	cms = CMS_ContentInfo_new();
	if (!cms)
		goto merr;
	env = cms_enveloped_data_init(cms);
	if (!env)
		goto merr;
	if (!cms_EncryptedContent_init(env->encryptedContentInfo,
	    cipher, NULL, 0))
		goto merr;
	return cms;

merr:
	if (cms)
		CMS_ContentInfo_free(cms);
	CMSerr(CMS_F_CMS_ENVELOPEDDATA_CREATE, ERR_R_MALLOC_FAILURE);
	return NULL;
}

/* Key Transport Recipient Info (KTRI) routines */

/* Add a recipient certificate. For now only handle key transport.
 * If we ever handle key agreement will need updating.
 */

CMS_RecipientInfo *
CMS_add1_recipient_cert(CMS_ContentInfo *cms, X509 *recip, unsigned int flags)
{
	CMS_RecipientInfo *ri = NULL;
	CMS_KeyTransRecipientInfo *ktri;
	CMS_EnvelopedData *env;
	EVP_PKEY *pk = NULL;
	int i, type;

	env = cms_get0_enveloped(cms);
	if (!env)
		goto err;

	/* Initialize recipient info */
	ri = M_ASN1_new_of(CMS_RecipientInfo);
	if (!ri)
		goto merr;

	/* Initialize and add key transport recipient info */

	ri->d.ktri = M_ASN1_new_of(CMS_KeyTransRecipientInfo);
	if (!ri->d.ktri)
		goto merr;
	ri->type = CMS_RECIPINFO_TRANS;

	ktri = ri->d.ktri;

	X509_check_purpose(recip, -1, -1);
	pk = X509_get_pubkey(recip);
	if (!pk) {
		CMSerr(CMS_F_CMS_ADD1_RECIPIENT_CERT,
		    CMS_R_ERROR_GETTING_PUBLIC_KEY);
		goto err;
	}
	CRYPTO_add(&recip->references, 1, CRYPTO_LOCK_X509);
	ktri->pkey = pk;
	ktri->recip = recip;

	if (flags & CMS_USE_KEYID) {
		ktri->version = 2;
		type = CMS_RECIPINFO_KEYIDENTIFIER;
	} else {
		ktri->version = 0;
		type = CMS_RECIPINFO_ISSUER_SERIAL;
	}

	/* Not a typo: RecipientIdentifier and SignerIdentifier are the
	 * same structure.
	 */

	if (!cms_set1_SignerIdentifier(ktri->rid, recip, type))
		goto err;

	if (pk->ameth && pk->ameth->pkey_ctrl) {
		i = pk->ameth->pkey_ctrl(pk, ASN1_PKEY_CTRL_CMS_ENVELOPE,
		    0, ri);
		if (i == -2) {
			CMSerr(CMS_F_CMS_ADD1_RECIPIENT_CERT,
			    CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE);
			goto err;
		}
		if (i <= 0) {
			CMSerr(CMS_F_CMS_ADD1_RECIPIENT_CERT,
			    CMS_R_CTRL_FAILURE);
			goto err;
		}
	}

	if (!sk_CMS_RecipientInfo_push(env->recipientInfos, ri))
		goto merr;

	return ri;

merr:
	CMSerr(CMS_F_CMS_ADD1_RECIPIENT_CERT, ERR_R_MALLOC_FAILURE);
err:
	if (ri)
		M_ASN1_free_of(ri, CMS_RecipientInfo);
	return NULL;
}

int
CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri, EVP_PKEY **pk,
    X509 **recip, X509_ALGOR **palg)
{
	CMS_KeyTransRecipientInfo *ktri;

	if (ri->type != CMS_RECIPINFO_TRANS) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS,
		    CMS_R_NOT_KEY_TRANSPORT);
		return 0;
	}

	ktri = ri->d.ktri;

	if (pk)
		*pk = ktri->pkey;
	if (recip)
		*recip = ktri->recip;
	if (palg)
		*palg = ktri->keyEncryptionAlgorithm;
	return 1;
}

int
CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
    ASN1_OCTET_STRING **keyid, X509_NAME **issuer, ASN1_INTEGER **sno)
{
	CMS_KeyTransRecipientInfo *ktri;

	if (ri->type != CMS_RECIPINFO_TRANS) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID,
		    CMS_R_NOT_KEY_TRANSPORT);
		return 0;
	}
	ktri = ri->d.ktri;

	return cms_SignerIdentifier_get0_signer_id(ktri->rid, keyid,
	    issuer, sno);
}

int
CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert)
{
	if (ri->type != CMS_RECIPINFO_TRANS) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP,
		    CMS_R_NOT_KEY_TRANSPORT);
		return -2;
	}
	return cms_SignerIdentifier_cert_cmp(ri->d.ktri->rid, cert);
}

int
CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey)
{
	if (ri->type != CMS_RECIPINFO_TRANS) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_SET0_PKEY,
		    CMS_R_NOT_KEY_TRANSPORT);
		return 0;
	}
	ri->d.ktri->pkey = pkey;
	return 1;
}

/* Encrypt content key in key transport recipient info */

static int
cms_RecipientInfo_ktri_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
{
	CMS_KeyTransRecipientInfo *ktri;
	CMS_EncryptedContentInfo *ec;
	EVP_PKEY_CTX *pctx = NULL;
	unsigned char *ek = NULL;
	size_t eklen;

	int ret = 0;

	if (ri->type != CMS_RECIPINFO_TRANS) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT,
		    CMS_R_NOT_KEY_TRANSPORT);
		return 0;
	}
	ktri = ri->d.ktri;
	ec = cms->d.envelopedData->encryptedContentInfo;

	pctx = EVP_PKEY_CTX_new(ktri->pkey, NULL);
	if (!pctx)
		return 0;

	if (EVP_PKEY_encrypt_init(pctx) <= 0)
		goto err;

	if (EVP_PKEY_CTX_ctrl(pctx, -1, EVP_PKEY_OP_ENCRYPT,
	    EVP_PKEY_CTRL_CMS_ENCRYPT, 0, ri) <= 0) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT, CMS_R_CTRL_ERROR);
		goto err;
	}

	if (EVP_PKEY_encrypt(pctx, NULL, &eklen, ec->key, ec->keylen) <= 0)
		goto err;

	ek = malloc(eklen);

	if (ek == NULL) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT,
		    ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (EVP_PKEY_encrypt(pctx, ek, &eklen, ec->key, ec->keylen) <= 0)
		goto err;

	ASN1_STRING_set0(ktri->encryptedKey, ek, eklen);
	ek = NULL;

	ret = 1;

err:
	EVP_PKEY_CTX_free(pctx);
	free(ek);
	return ret;
}

/* Decrypt content key from KTRI */

static int
cms_RecipientInfo_ktri_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
{
	CMS_KeyTransRecipientInfo *ktri = ri->d.ktri;
	EVP_PKEY_CTX *pctx = NULL;
	unsigned char *ek = NULL;
	size_t eklen;
	int ret = 0;
	CMS_EncryptedContentInfo *ec;

	ec = cms->d.envelopedData->encryptedContentInfo;

	if (ktri->pkey == NULL) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT,
		    CMS_R_NO_PRIVATE_KEY);
		return 0;
	}

	pctx = EVP_PKEY_CTX_new(ktri->pkey, NULL);
	if (!pctx)
		return 0;

	if (EVP_PKEY_decrypt_init(pctx) <= 0)
		goto err;

	if (EVP_PKEY_CTX_ctrl(pctx, -1, EVP_PKEY_OP_DECRYPT,
	    EVP_PKEY_CTRL_CMS_DECRYPT, 0, ri) <= 0) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_CTRL_ERROR);
		goto err;
	}

	if (EVP_PKEY_decrypt(pctx, NULL, &eklen,
	    ktri->encryptedKey->data,
	    ktri->encryptedKey->length) <= 0)
		goto err;

	ek = malloc(eklen);

	if (ek == NULL) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT,
		    ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (EVP_PKEY_decrypt(pctx, ek, &eklen,
	    ktri->encryptedKey->data,
	    ktri->encryptedKey->length) <= 0) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_CMS_LIB);
		goto err;
	}

	ret = 1;

	if (ec->key) {
		explicit_bzero(ec->key, ec->keylen);
		free(ec->key);
	}

	ec->key = ek;
	ec->keylen = eklen;

err:
	EVP_PKEY_CTX_free(pctx);
	if (!ret && ek)
		free(ek);

	return ret;
}

/* Key Encrypted Key (KEK) RecipientInfo routines */

int
CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri, const unsigned char *id,
    size_t idlen)
{
	ASN1_OCTET_STRING tmp_os;
	CMS_KEKRecipientInfo *kekri;

	if (ri->type != CMS_RECIPINFO_KEK) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP, CMS_R_NOT_KEK);
		return -2;
	}
	kekri = ri->d.kekri;
	tmp_os.type = V_ASN1_OCTET_STRING;
	tmp_os.flags = 0;
	tmp_os.data = (unsigned char *)id;
	tmp_os.length = (int)idlen;
	return ASN1_OCTET_STRING_cmp(&tmp_os, kekri->kekid->keyIdentifier);
}

/* For now hard code AES key wrap info */

static size_t
aes_wrap_keylen(int nid)
{
	switch (nid) {
	case NID_id_aes128_wrap:
		return 16;
	case NID_id_aes192_wrap:
		return 24;
	case NID_id_aes256_wrap:
		return 32;
	default:
		return 0;
	}
}

CMS_RecipientInfo *
CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid, unsigned char *key,
    size_t keylen, unsigned char *id, size_t idlen, ASN1_GENERALIZEDTIME *date,
    ASN1_OBJECT *otherTypeId, ASN1_TYPE *otherType)
{
	CMS_RecipientInfo *ri = NULL;
	CMS_EnvelopedData *env;
	CMS_KEKRecipientInfo *kekri;

	env = cms_get0_enveloped(cms);
	if (!env)
		goto err;

	if (nid == NID_undef) {
		switch (keylen) {
		case 16:
			nid = NID_id_aes128_wrap;
			break;
		case  24:
			nid = NID_id_aes192_wrap;
			break;
		case  32:
			nid = NID_id_aes256_wrap;
			break;
		default:
			CMSerr(CMS_F_CMS_ADD0_RECIPIENT_KEY,
			    CMS_R_INVALID_KEY_LENGTH);
			goto err;
		}
	} else {
		size_t exp_keylen = aes_wrap_keylen(nid);

		if (!exp_keylen) {
			CMSerr(CMS_F_CMS_ADD0_RECIPIENT_KEY,
			    CMS_R_UNSUPPORTED_KEK_ALGORITHM);
			goto err;
		}

		if (keylen != exp_keylen) {
			CMSerr(CMS_F_CMS_ADD0_RECIPIENT_KEY,
			    CMS_R_INVALID_KEY_LENGTH);
			goto err;
		}

	}

	/* Initialize recipient info */
	ri = M_ASN1_new_of(CMS_RecipientInfo);
	if (!ri)
		goto merr;

	ri->d.kekri = M_ASN1_new_of(CMS_KEKRecipientInfo);
	if (!ri->d.kekri)
		goto merr;
	ri->type = CMS_RECIPINFO_KEK;

	kekri = ri->d.kekri;

	if (otherTypeId) {
		kekri->kekid->other = M_ASN1_new_of(CMS_OtherKeyAttribute);
		if (kekri->kekid->other == NULL)
			goto merr;
	}

	if (!sk_CMS_RecipientInfo_push(env->recipientInfos, ri))
		goto merr;

	/* After this point no calls can fail */

	kekri->version = 4;

	kekri->key = key;
	kekri->keylen = keylen;

	ASN1_STRING_set0(kekri->kekid->keyIdentifier, id, idlen);

	kekri->kekid->date = date;

	if (kekri->kekid->other) {
		kekri->kekid->other->keyAttrId = otherTypeId;
		kekri->kekid->other->keyAttr = otherType;
	}

	X509_ALGOR_set0(kekri->keyEncryptionAlgorithm,
	    OBJ_nid2obj(nid), V_ASN1_UNDEF, NULL);

	return ri;

merr:
	CMSerr(CMS_F_CMS_ADD0_RECIPIENT_KEY, ERR_R_MALLOC_FAILURE);
err:
	if (ri)
		M_ASN1_free_of(ri, CMS_RecipientInfo);
	return NULL;
}

int
CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri, X509_ALGOR **palg,
    ASN1_OCTET_STRING **pid, ASN1_GENERALIZEDTIME **pdate,
    ASN1_OBJECT **potherid, ASN1_TYPE **pothertype)
{
	CMS_KEKIdentifier *rkid;

	if (ri->type != CMS_RECIPINFO_KEK) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID, CMS_R_NOT_KEK);
		return 0;
	}
	rkid = ri->d.kekri->kekid;
	if (palg)
		*palg = ri->d.kekri->keyEncryptionAlgorithm;
	if (pid)
		*pid = rkid->keyIdentifier;
	if (pdate)
		*pdate = rkid->date;
	if (potherid) {
		if (rkid->other)
			*potherid = rkid->other->keyAttrId;
		else
			*potherid = NULL;
	}
	if (pothertype) {
		if (rkid->other)
			*pothertype = rkid->other->keyAttr;
		else
			*pothertype = NULL;
	}
	return 1;
}

int
CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri, unsigned char *key,
    size_t keylen)
{
	CMS_KEKRecipientInfo *kekri;

	if (ri->type != CMS_RECIPINFO_KEK) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_SET0_KEY, CMS_R_NOT_KEK);
		return 0;
	}

	kekri = ri->d.kekri;
	kekri->key = key;
	kekri->keylen = keylen;
	return 1;
}

/* Encrypt content key in KEK recipient info */

static int
cms_RecipientInfo_kekri_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
{
	CMS_EncryptedContentInfo *ec;
	CMS_KEKRecipientInfo *kekri;
	AES_KEY actx;
	unsigned char *wkey = NULL;
	int wkeylen;
	int r = 0;

	ec = cms->d.envelopedData->encryptedContentInfo;

	kekri = ri->d.kekri;

	if (!kekri->key) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT, CMS_R_NO_KEY);
		return 0;
	}

	if (AES_set_encrypt_key(kekri->key, kekri->keylen << 3, &actx)) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT,
		    CMS_R_ERROR_SETTING_KEY);
		goto err;
	}

	wkey = malloc(ec->keylen + 8);

	if (!wkey) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT,
		    ERR_R_MALLOC_FAILURE);
		goto err;
	}

	wkeylen = AES_wrap_key(&actx, NULL, wkey, ec->key, ec->keylen);

	if (wkeylen <= 0) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT, CMS_R_WRAP_ERROR);
		goto err;
	}

	ASN1_STRING_set0(kekri->encryptedKey, wkey, wkeylen);

	r = 1;

err:
	if (!r && wkey)
		free(wkey);
	explicit_bzero(&actx, sizeof(actx));

	return r;
}

/* Decrypt content key in KEK recipient info */

static int
cms_RecipientInfo_kekri_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
{
	CMS_EncryptedContentInfo *ec;
	CMS_KEKRecipientInfo *kekri;
	AES_KEY actx;
	unsigned char *ukey = NULL;
	int ukeylen;
	int r = 0, wrap_nid;

	ec = cms->d.envelopedData->encryptedContentInfo;

	kekri = ri->d.kekri;

	if (!kekri->key) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT, CMS_R_NO_KEY);
		return 0;
	}

	wrap_nid = OBJ_obj2nid(kekri->keyEncryptionAlgorithm->algorithm);
	if (aes_wrap_keylen(wrap_nid) != kekri->keylen) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT,
		    CMS_R_INVALID_KEY_LENGTH);
		return 0;
	}

	/* If encrypted key length is invalid don't bother */

	if (kekri->encryptedKey->length < 16) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT,
		    CMS_R_INVALID_ENCRYPTED_KEY_LENGTH);
		goto err;
	}

	if (AES_set_decrypt_key(kekri->key, kekri->keylen << 3, &actx)) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT,
		    CMS_R_ERROR_SETTING_KEY);
		goto err;
	}

	ukey = malloc(kekri->encryptedKey->length - 8);

	if (!ukey) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT,
		    ERR_R_MALLOC_FAILURE);
		goto err;
	}

	ukeylen = AES_unwrap_key(&actx, NULL, ukey,
	    kekri->encryptedKey->data,
	    kekri->encryptedKey->length);

	if (ukeylen <= 0) {
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT,
		    CMS_R_UNWRAP_ERROR);
		goto err;
	}

	ec->key = ukey;
	ec->keylen = ukeylen;

	r = 1;

err:
	if (!r && ukey)
		free(ukey);
	explicit_bzero(&actx, sizeof(actx));

	return r;
}

int
CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
{
	switch (ri->type) {
	case CMS_RECIPINFO_TRANS:
		return cms_RecipientInfo_ktri_decrypt(cms, ri);
	case CMS_RECIPINFO_KEK:
		return cms_RecipientInfo_kekri_decrypt(cms, ri);
	case CMS_RECIPINFO_PASS:
		return cms_RecipientInfo_pwri_crypt(cms, ri, 0);
	default:
		CMSerr(CMS_F_CMS_RECIPIENTINFO_DECRYPT,
		    CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE);
		return 0;
	}
}

BIO *
cms_EnvelopedData_init_bio(CMS_ContentInfo *cms)
{
	CMS_EncryptedContentInfo *ec;
	STACK_OF(CMS_RecipientInfo) *rinfos;
	CMS_RecipientInfo *ri;
	int i, r, ok = 0;
	BIO *ret;

	/* Get BIO first to set up key */

	ec = cms->d.envelopedData->encryptedContentInfo;
	ret = cms_EncryptedContent_init_bio(ec);

	/* If error or no cipher end of processing */

	if (!ret || !ec->cipher)
		return ret;

	/* Now encrypt content key according to each RecipientInfo type */

	rinfos = cms->d.envelopedData->recipientInfos;

	for (i = 0; i < sk_CMS_RecipientInfo_num(rinfos); i++) {
		ri = sk_CMS_RecipientInfo_value(rinfos, i);

		switch (ri->type) {
		case CMS_RECIPINFO_TRANS:
			r = cms_RecipientInfo_ktri_encrypt(cms, ri);
			break;

		case CMS_RECIPINFO_KEK:
			r = cms_RecipientInfo_kekri_encrypt(cms, ri);
			break;

		case CMS_RECIPINFO_PASS:
			r = cms_RecipientInfo_pwri_crypt(cms, ri, 1);
			break;

		default:
			CMSerr(CMS_F_CMS_ENVELOPEDDATA_INIT_BIO,
			    CMS_R_UNSUPPORTED_RECIPIENT_TYPE);
			goto err;
		}

		if (r <= 0) {
			CMSerr(CMS_F_CMS_ENVELOPEDDATA_INIT_BIO,
			    CMS_R_ERROR_SETTING_RECIPIENTINFO);
			goto err;
		}
	}

	ok = 1;

err:
	ec->cipher = NULL;
	if (ec->key) {
		explicit_bzero(ec->key, ec->keylen);
		free(ec->key);
		ec->key = NULL;
		ec->keylen = 0;
	}
	if (ok)
		return ret;
	BIO_free(ret);
	return NULL;
}
@


1.9
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_env.c,v 1.8 2014/10/18 17:20:40 jsing Exp $ */
@


1.8
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: cms_env.c,v 1.7 2014/07/12 16:03:37 miod Exp $ */
d409 1
a409 1
		OPENSSL_cleanse(ec->key, ec->keylen);
d657 1
a657 1
	OPENSSL_cleanse(&actx, sizeof(actx));
d730 1
a730 1
	OPENSSL_cleanse(&actx, sizeof(actx));
d809 1
a809 1
		OPENSSL_cleanse(ec->key, ec->keylen);
@


1.7
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_env.c,v 1.6 2014/07/11 08:44:48 jsing Exp $ */
a58 1
#include <openssl/rand.h>
@


1.6
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_env.c,v 1.5 2014/06/12 15:49:28 deraadt Exp $ */
d349 1
a349 2
	if (pctx)
		EVP_PKEY_CTX_free(pctx);
d418 1
a418 2
	if (pctx)
		EVP_PKEY_CTX_free(pctx);
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d54 1
a54 1
#include "cryptlib.h"
d56 2
d59 1
d61 1
a61 4
#include <openssl/err.h>
#include <openssl/cms.h>
#include <openssl/rand.h>
#include <openssl/aes.h>
@


1.4
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/cms/cms_env.c */
@


1.3
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d74 4
a77 4
CMS_EnvelopedData *cms_get0_enveloped(CMS_ContentInfo *cms)
	{
	if (OBJ_obj2nid(cms->contentType) != NID_pkcs7_enveloped)
		{
d79 1
a79 1
				CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA);
d81 1
a81 1
		}
d83 1
a83 1
	}
d85 4
a88 4
static CMS_EnvelopedData *cms_enveloped_data_init(CMS_ContentInfo *cms)
	{
	if (cms->d.other == NULL)
		{
d90 1
a90 2
		if (!cms->d.envelopedData)
			{
d92 1
a92 1
							ERR_R_MALLOC_FAILURE);
d94 1
a94 1
			}
d97 1
a97 1
						OBJ_nid2obj(NID_pkcs7_data);
d101 1
a101 1
		}
d103 1
a103 1
	}
d106 1
a106 1
	{
d108 1
d113 1
a113 1
	}
d115 3
a117 2
int CMS_RecipientInfo_type(CMS_RecipientInfo *ri)
	{
d119 1
a119 1
	}
d121 3
a123 2
CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher)
	{
d126 1
d134 1
a134 1
					cipher, NULL, 0))
d137 2
a138 1
	merr:
d143 1
a143 1
	}
d151 3
a153 3
CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,
					X509 *recip, unsigned int flags)
	{
d159 1
d180 1
a180 2
	if (!pk)
		{
d182 1
a182 1
				CMS_R_ERROR_GETTING_PUBLIC_KEY);
d184 1
a184 1
		}
d189 1
a189 2
	if (flags & CMS_USE_KEYID)
		{
d192 1
a192 3
		}
	else
		{
d195 1
a195 1
		}
d204 1
a204 2
	if (pk->ameth && pk->ameth->pkey_ctrl)
		{
d206 2
a207 3
						0, ri);
		if (i == -2)
			{
d209 1
a209 1
				CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE);
d211 2
a212 3
			}
		if (i <= 0)
			{
d214 1
a214 1
				CMS_R_CTRL_FAILURE);
a215 1
			}
d217 1
d224 1
a224 1
	merr:
d226 1
a226 1
	err:
d230 1
d232 5
a236 1
	}
d238 1
a238 7
int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
					EVP_PKEY **pk, X509 **recip,
					X509_ALGOR **palg)
	{
	CMS_KeyTransRecipientInfo *ktri;
	if (ri->type != CMS_RECIPINFO_TRANS)
		{
d240 1
a240 1
			CMS_R_NOT_KEY_TRANSPORT);
d242 1
a242 1
		}
d253 1
a253 1
	}
d255 4
a258 4
int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
					ASN1_OCTET_STRING **keyid,
					X509_NAME **issuer, ASN1_INTEGER **sno)
	{
d260 2
a261 2
	if (ri->type != CMS_RECIPINFO_TRANS)
		{
d263 1
a263 1
			CMS_R_NOT_KEY_TRANSPORT);
d265 1
a265 1
		}
d268 8
a275 8
	return cms_SignerIdentifier_get0_signer_id(ktri->rid,
							keyid, issuer, sno);
	}

int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert)
	{
	if (ri->type != CMS_RECIPINFO_TRANS)
		{
d277 1
a277 1
			CMS_R_NOT_KEY_TRANSPORT);
d279 1
a279 1
		}
d281 1
a281 1
	}
d283 4
a286 4
int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey)
	{
	if (ri->type != CMS_RECIPINFO_TRANS)
		{
d288 1
a288 1
			CMS_R_NOT_KEY_TRANSPORT);
d290 1
a290 1
		}
d293 1
a293 1
	}
d297 3
a299 3
static int cms_RecipientInfo_ktri_encrypt(CMS_ContentInfo *cms,
					CMS_RecipientInfo *ri)
	{
d308 1
a308 2
	if (ri->type != CMS_RECIPINFO_TRANS)
		{
d310 1
a310 1
			CMS_R_NOT_KEY_TRANSPORT);
d312 1
a312 1
		}
d324 1
a324 2
				EVP_PKEY_CTRL_CMS_ENCRYPT, 0, ri) <= 0)
		{
d327 1
a327 1
		}
d334 1
a334 2
	if (ek == NULL)
		{
d336 1
a336 1
							ERR_R_MALLOC_FAILURE);
d338 1
a338 1
		}
d348 1
a348 1
	err:
d353 1
a353 2

	}
d357 3
a359 3
static int cms_RecipientInfo_ktri_decrypt(CMS_ContentInfo *cms,
							CMS_RecipientInfo *ri)
	{
d366 1
d369 1
a369 2
	if (ktri->pkey == NULL)
		{
d371 1
a371 1
			CMS_R_NO_PRIVATE_KEY);
d373 1
a373 1
		}
d383 1
a383 2
				EVP_PKEY_CTRL_CMS_DECRYPT, 0, ri) <= 0)
		{
d386 1
a386 1
		}
d389 2
a390 2
				ktri->encryptedKey->data,
				ktri->encryptedKey->length) <= 0)
d395 1
a395 2
	if (ek == NULL)
		{
d397 1
a397 1
							ERR_R_MALLOC_FAILURE);
d399 1
a399 1
		}
d402 2
a403 3
				ktri->encryptedKey->data,
				ktri->encryptedKey->length) <= 0)
		{
d406 1
a406 1
		}
d410 1
a410 2
	if (ec->key)
		{
d413 1
a413 1
		}
d418 1
a418 1
	err:
d425 1
a425 1
	}
d429 4
a432 3
int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri, 
					const unsigned char *id, size_t idlen)
	{
d435 2
a436 2
	if (ri->type != CMS_RECIPINFO_KEK)
		{
d439 1
a439 1
		}
d446 1
a446 1
	}
d450 5
a454 5
static size_t aes_wrap_keylen(int nid)
	{
	switch (nid)
		{
		case NID_id_aes128_wrap:
d456 5
a460 8

		case NID_id_aes192_wrap:
		return  24;

		case NID_id_aes256_wrap:
		return  32;

		default:
a461 1
		}
d463 7
a469 8

CMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
					unsigned char *key, size_t keylen,
					unsigned char *id, size_t idlen,
					ASN1_GENERALIZEDTIME *date,
					ASN1_OBJECT *otherTypeId,
					ASN1_TYPE *otherType)
	{
d473 1
d478 3
a480 5
	if (nid == NID_undef)
		{
		switch (keylen)
			{
			case 16:
d483 1
a483 2

			case  24:
d486 1
a486 2

			case  32:
d489 1
a489 2

			default:
d491 1
a491 1
						CMS_R_INVALID_KEY_LENGTH);
a492 2
			}

d494 1
a494 3
	else
		{

d497 1
a497 2
		if (!exp_keylen)
			{
d499 1
a499 1
					CMS_R_UNSUPPORTED_KEK_ALGORITHM);
d501 1
a501 1
			}
d503 1
a503 2
		if (keylen != exp_keylen)
			{
d505 1
a505 1
					CMS_R_INVALID_KEY_LENGTH);
d507 1
a507 1
			}
d509 1
a509 1
		}
d523 1
a523 2
	if (otherTypeId)
		{
d527 1
a527 1
		}
a531 1

d543 1
a543 2
	if (kekri->kekid->other)
		{
d546 1
a546 1
		}
d549 1
a549 1
				OBJ_nid2obj(nid), V_ASN1_UNDEF, NULL);
d553 1
a553 1
	merr:
d555 1
a555 1
	err:
d559 1
d561 6
a566 1
	}
d568 1
a568 10
int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
					X509_ALGOR **palg,
					ASN1_OCTET_STRING **pid,
					ASN1_GENERALIZEDTIME **pdate,
					ASN1_OBJECT **potherid,
					ASN1_TYPE **pothertype)
	{
	CMS_KEKIdentifier *rkid;
	if (ri->type != CMS_RECIPINFO_KEK)
		{
d571 2
a572 2
		}
	rkid =  ri->d.kekri->kekid;
d579 1
a579 2
	if (potherid)
		{
d584 2
a585 3
		}
	if (pothertype)
		{
d590 1
a590 1
		}
d592 1
a592 1
	}
d594 4
a597 3
int CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri, 
				unsigned char *key, size_t keylen)
	{
d599 2
a600 2
	if (ri->type != CMS_RECIPINFO_KEK)
		{
d603 1
a603 1
		}
d609 1
a609 2
	}

d613 3
a615 3
static int cms_RecipientInfo_kekri_encrypt(CMS_ContentInfo *cms,
					CMS_RecipientInfo *ri)
	{
d627 1
a627 2
	if (!kekri->key)
		{
d630 1
a630 1
		}
d632 1
a632 2
	if (AES_set_encrypt_key(kekri->key, kekri->keylen << 3, &actx))
		{ 
d634 1
a634 1
						CMS_R_ERROR_SETTING_KEY);
d636 1
a636 1
		}
d640 1
a640 2
	if (!wkey)
		{ 
d642 1
a642 1
						ERR_R_MALLOC_FAILURE);
d644 1
a644 1
		}
d648 1
a648 2
	if (wkeylen <= 0)
		{
d651 1
a651 1
		}
d657 1
a657 2
	err:

d663 1
a663 2

	}
d667 3
a669 3
static int cms_RecipientInfo_kekri_decrypt(CMS_ContentInfo *cms,
					CMS_RecipientInfo *ri)
	{
d681 1
a681 2
	if (!kekri->key)
		{
d684 1
a684 1
		}
d687 1
a687 2
	if (aes_wrap_keylen(wrap_nid) != kekri->keylen)
		{
d689 1
a689 1
			CMS_R_INVALID_KEY_LENGTH);
d691 1
a691 1
		}
d695 1
a695 2
	if (kekri->encryptedKey->length < 16)
		{ 
d697 1
a697 1
					CMS_R_INVALID_ENCRYPTED_KEY_LENGTH);
d699 1
a699 1
		}
d701 1
a701 2
	if (AES_set_decrypt_key(kekri->key, kekri->keylen << 3, &actx))
		{ 
d703 1
a703 1
						CMS_R_ERROR_SETTING_KEY);
d705 1
a705 1
		}
d709 1
a709 2
	if (!ukey)
		{ 
d711 1
a711 1
						ERR_R_MALLOC_FAILURE);
d713 1
a713 1
		}
d716 2
a717 2
					kekri->encryptedKey->data,
					kekri->encryptedKey->length);
d719 1
a719 2
	if (ukeylen <= 0)
		{
d721 1
a721 1
							CMS_R_UNWRAP_ERROR);
d723 1
a723 1
		}
d730 1
a730 2
	err:

d736 1
d738 5
a742 7
	}

int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
	{
	switch(ri->type)
		{
		case CMS_RECIPINFO_TRANS:
d744 1
a744 2

		case CMS_RECIPINFO_KEK:
d746 1
a746 2

		case CMS_RECIPINFO_PASS:
d748 1
a748 2

		default:
d750 1
a750 1
			CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE);
a751 1
		}
d753 1
d755 3
a757 2
BIO *cms_EnvelopedData_init_bio(CMS_ContentInfo *cms)
	{
d778 1
a778 2
	for (i = 0; i < sk_CMS_RecipientInfo_num(rinfos); i++)
		{
d781 2
a782 3
		switch (ri->type)
			{
			case CMS_RECIPINFO_TRANS:
d786 1
a786 1
			case CMS_RECIPINFO_KEK:
d790 1
a790 1
			case CMS_RECIPINFO_PASS:
d794 1
a794 1
			default:
d796 1
a796 1
				CMS_R_UNSUPPORTED_RECIPIENT_TYPE);
d798 1
a798 1
			}
d800 1
a800 2
		if (r <= 0)
			{
d802 1
a802 1
				CMS_R_ERROR_SETTING_RECIPIENTINFO);
a803 1
			}
d805 1
d809 1
a809 1
	err:
d811 1
a811 2
	if (ec->key)
		{
d816 1
a816 1
		}
d821 1
a821 2

	}
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d357 1
a357 2
	if (ek)
		free(ek);
@


1.1
log
@Initial revision
@
text
@d63 1
a67 1
DECLARE_ASN1_ITEM(CMS_RecipientInfo)
d74 1
a74 1
static CMS_EnvelopedData *cms_get0_enveloped(CMS_ContentInfo *cms)
d154 1
a154 1
	int type;
d203 1
a203 5
	/* Since we have no EVP_PKEY_ASN1_METHOD in OpenSSL 0.9.8,
	 * hard code algorithm parameters.
	 */

	if (pk->type == EVP_PKEY_RSA)
d205 5
a209 7
		X509_ALGOR_set0(ktri->keyEncryptionAlgorithm,
					OBJ_nid2obj(NID_rsaEncryption), 
					V_ASN1_NULL, 0);
		}
	else
		{
		CMSerr(CMS_F_CMS_ADD1_RECIPIENT_CERT,
d211 8
a218 1
		goto err;
d305 1
d307 1
a307 1
	int eklen;
d320 16
a335 1
	eklen = EVP_PKEY_size(ktri->pkey);
d337 1
a337 1
	ek = OPENSSL_malloc(eklen);
d346 1
a346 3
	eklen = EVP_PKEY_encrypt(ek, ec->key, ec->keylen, ktri->pkey);

	if (eklen <= 0)
d355 2
d358 1
a358 1
		OPENSSL_free(ek);
d369 1
d371 1
a371 1
	int eklen;
d373 2
d383 3
a385 1
	eklen = EVP_PKEY_size(ktri->pkey);
d387 16
a402 1
	ek = OPENSSL_malloc(eklen);
d411 1
a411 1
	eklen = EVP_PKEY_decrypt(ek, 
d413 1
a413 2
				ktri->encryptedKey->length, ktri->pkey);
	if (eklen <= 0)
d421 8
a428 2
	cms->d.envelopedData->encryptedContentInfo->key = ek;
	cms->d.envelopedData->encryptedContentInfo->keylen = eklen;
d431 2
d434 1
a434 1
		OPENSSL_free(ek);
d674 1
a674 1
	wkey = OPENSSL_malloc(ec->keylen + 8);
d698 1
a698 1
		OPENSSL_free(wkey);
d751 1
a751 1
	ukey = OPENSSL_malloc(kekri->encryptedKey->length - 8);
d779 1
a779 1
		OPENSSL_free(ukey);
d796 3
d842 4
d867 1
a867 1
		OPENSSL_free(ec->key);
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@a62 1
#include "asn1_locl.h"
d154 1
a154 1
	int i, type;
d203 11
a213 1
	if (pk->ameth && pk->ameth->pkey_ctrl)
d215 1
a215 5
		i = pk->ameth->pkey_ctrl(pk, ASN1_PKEY_CTRL_CMS_ENVELOPE,
						0, ri);
		if (i == -2)
			{
			CMSerr(CMS_F_CMS_ADD1_RECIPIENT_CERT,
d217 1
a217 8
			goto err;
			}
		if (i <= 0)
			{
			CMSerr(CMS_F_CMS_ADD1_RECIPIENT_CERT,
				CMS_R_CTRL_FAILURE);
			goto err;
			}
a303 1
	EVP_PKEY_CTX *pctx = NULL;
d305 1
a305 1
	size_t eklen;
d318 1
a318 16
	pctx = EVP_PKEY_CTX_new(ktri->pkey, NULL);
	if (!pctx)
		return 0;

	if (EVP_PKEY_encrypt_init(pctx) <= 0)
		goto err;

	if (EVP_PKEY_CTX_ctrl(pctx, -1, EVP_PKEY_OP_ENCRYPT,
				EVP_PKEY_CTRL_CMS_ENCRYPT, 0, ri) <= 0)
		{
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT, CMS_R_CTRL_ERROR);
		goto err;
		}

	if (EVP_PKEY_encrypt(pctx, NULL, &eklen, ec->key, ec->keylen) <= 0)
		goto err;
d329 3
a331 1
	if (EVP_PKEY_encrypt(pctx, ek, &eklen, ec->key, ec->keylen) <= 0)
a339 2
	if (pctx)
		EVP_PKEY_CTX_free(pctx);
a351 1
	EVP_PKEY_CTX *pctx = NULL;
d353 1
a353 1
	size_t eklen;
d363 1
a363 18
	pctx = EVP_PKEY_CTX_new(ktri->pkey, NULL);
	if (!pctx)
		return 0;

	if (EVP_PKEY_decrypt_init(pctx) <= 0)
		goto err;

	if (EVP_PKEY_CTX_ctrl(pctx, -1, EVP_PKEY_OP_DECRYPT,
				EVP_PKEY_CTRL_CMS_DECRYPT, 0, ri) <= 0)
		{
		CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_CTRL_ERROR);
		goto err;
		}

	if (EVP_PKEY_decrypt(pctx, NULL, &eklen,
				ktri->encryptedKey->data,
				ktri->encryptedKey->length) <= 0)
		goto err;
d374 1
a374 1
	if (EVP_PKEY_decrypt(pctx, ek, &eklen,
d376 2
a377 1
				ktri->encryptedKey->length) <= 0)
a388 2
	if (pctx)
		EVP_PKEY_CTX_free(pctx);
@


1.1.1.3
log
@import OpenSSL-1.0.1c
@
text
@d68 1
d75 1
a75 1
CMS_EnvelopedData *cms_get0_enveloped(CMS_ContentInfo *cms)
a373 2
	CMS_EncryptedContentInfo *ec;
	ec = cms->d.envelopedData->encryptedContentInfo;
d420 2
a421 8
	if (ec->key)
		{
		OPENSSL_cleanse(ec->key, ec->keylen);
		OPENSSL_free(ec->key);
		}

	ec->key = ek;
	ec->keylen = eklen;
a788 3
		case CMS_RECIPINFO_PASS:
		return cms_RecipientInfo_pwri_crypt(cms, ri, 0);

a829 4
			break;

			case CMS_RECIPINFO_PASS:
			r = cms_RecipientInfo_pwri_crypt(cms, ri, 1);
@


