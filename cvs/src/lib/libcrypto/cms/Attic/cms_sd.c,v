head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2016.09.04.17.55.28;	author jsing;	state dead;
branches;
next	1.10;
commitid	6cKjjSNzZGsdvU20;

1.10
date	2016.03.11.07.08.44;	author mmcc;	state Exp;
branches;
next	1.9;
commitid	MTdM7aVFdRMAzAYE;

1.9
date	2014.11.09.19.17.13;	author miod;	state Exp;
branches;
next	1.8;
commitid	QrgOG8zcUIADOfFd;

1.8
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.7;
commitid	G74O1dmRukKsW7IJ;

1.7
date	2014.07.11.13.02.10;	author miod;	state Exp;
branches;
next	1.6;
commitid	clNvy0sSgsAhBaE3;

1.6
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.5;
commitid	yQEL1wOWIearrW15;

1.5
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.24.15.55.21;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.22.21.12.15;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.13.53;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2012.10.13.21.23.38;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove cms.

ok beck@@, guenther@@, tedu@@
@
text
@/* $OpenBSD: cms_sd.c,v 1.10 2016/03/11 07:08:44 mmcc Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 2008 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <openssl/asn1t.h>
#include <openssl/cms.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/x509v3.h>

#include "asn1_locl.h"
#include "cms_lcl.h"

/* CMS SignedData Utilities */

DECLARE_ASN1_ITEM(CMS_SignedData)

static CMS_SignedData *
cms_get0_signed(CMS_ContentInfo *cms)
{
	if (OBJ_obj2nid(cms->contentType) != NID_pkcs7_signed) {
		CMSerr(CMS_F_CMS_GET0_SIGNED,
		    CMS_R_CONTENT_TYPE_NOT_SIGNED_DATA);
		return NULL;
	}
	return cms->d.signedData;
}

static CMS_SignedData *
cms_signed_data_init(CMS_ContentInfo *cms)
{
	if (cms->d.other == NULL) {
		cms->d.signedData = M_ASN1_new_of(CMS_SignedData);
		if (!cms->d.signedData) {
			CMSerr(CMS_F_CMS_SIGNED_DATA_INIT,
			    ERR_R_MALLOC_FAILURE);
			return NULL;
		}
		cms->d.signedData->version = 1;
		cms->d.signedData->encapContentInfo->eContentType =
		    OBJ_nid2obj(NID_pkcs7_data);
		cms->d.signedData->encapContentInfo->partial = 1;
		ASN1_OBJECT_free(cms->contentType);
		cms->contentType = OBJ_nid2obj(NID_pkcs7_signed);
		return cms->d.signedData;
	}
	return cms_get0_signed(cms);
}

/* Just initialize SignedData e.g. for certs only structure */

int
CMS_SignedData_init(CMS_ContentInfo *cms)
{
	if (cms_signed_data_init(cms))
		return 1;
	else
		return 0;
}

/* Check structures and fixup version numbers (if necessary) */

static void
cms_sd_set_version(CMS_SignedData *sd)
{
	int i;
	CMS_CertificateChoices *cch;
	CMS_RevocationInfoChoice *rch;
	CMS_SignerInfo *si;

	for (i = 0; i < sk_CMS_CertificateChoices_num(sd->certificates); i++) {
		cch = sk_CMS_CertificateChoices_value(sd->certificates, i);
		if (cch->type == CMS_CERTCHOICE_OTHER) {
			if (sd->version < 5)
				sd->version = 5;
		} else if (cch->type == CMS_CERTCHOICE_V2ACERT) {
			if (sd->version < 4)
				sd->version = 4;
		} else if (cch->type == CMS_CERTCHOICE_V1ACERT) {
			if (sd->version < 3)
				sd->version = 3;
		}
	}

	for (i = 0; i < sk_CMS_RevocationInfoChoice_num(sd->crls); i++) {
		rch = sk_CMS_RevocationInfoChoice_value(sd->crls, i);
		if (rch->type == CMS_REVCHOICE_OTHER) {
			if (sd->version < 5)
				sd->version = 5;
		}
	}

	if ((OBJ_obj2nid(sd->encapContentInfo->eContentType) !=
	    NID_pkcs7_data) && (sd->version < 3))
		sd->version = 3;

	for (i = 0; i < sk_CMS_SignerInfo_num(sd->signerInfos); i++) {
		si = sk_CMS_SignerInfo_value(sd->signerInfos, i);
		if (si->sid->type == CMS_SIGNERINFO_KEYIDENTIFIER) {
			if (si->version < 3)
				si->version = 3;
			if (sd->version < 3)
				sd->version = 3;
		} else if (si->version < 1)
			si->version = 1;
	}

	if (sd->version < 1)
		sd->version = 1;
}

/* Copy an existing messageDigest value */

static int
cms_copy_messageDigest(CMS_ContentInfo *cms, CMS_SignerInfo *si)
{
	STACK_OF(CMS_SignerInfo) *sinfos;
	CMS_SignerInfo *sitmp;
	int i;

	sinfos = CMS_get0_SignerInfos(cms);
	for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++) {
		ASN1_OCTET_STRING *messageDigest;
		sitmp = sk_CMS_SignerInfo_value(sinfos, i);
		if (sitmp == si)
			continue;
		if (CMS_signed_get_attr_count(sitmp) < 0)
			continue;
		if (OBJ_cmp(si->digestAlgorithm->algorithm,
		    sitmp->digestAlgorithm->algorithm))
			continue;
		messageDigest = CMS_signed_get0_data_by_OBJ(sitmp,
		    OBJ_nid2obj(NID_pkcs9_messageDigest),
		    -3, V_ASN1_OCTET_STRING);
		if (!messageDigest) {
			CMSerr(CMS_F_CMS_COPY_MESSAGEDIGEST,
			    CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE);
			return 0;
		}

		if (CMS_signed_add1_attr_by_NID(si, NID_pkcs9_messageDigest,
		    V_ASN1_OCTET_STRING,
		    messageDigest, -1))
			return 1;
		else
			return 0;
	}
	CMSerr(CMS_F_CMS_COPY_MESSAGEDIGEST, CMS_R_NO_MATCHING_DIGEST);
	return 0;
}

int
cms_set1_SignerIdentifier(CMS_SignerIdentifier *sid, X509 *cert, int type)
{
	switch (type) {
	case CMS_SIGNERINFO_ISSUER_SERIAL:
		sid->d.issuerAndSerialNumber =
		    M_ASN1_new_of(CMS_IssuerAndSerialNumber);
		if (!sid->d.issuerAndSerialNumber)
			goto merr;
		if (!X509_NAME_set(&sid->d.issuerAndSerialNumber->issuer,
		    X509_get_issuer_name(cert)))
			goto merr;
		if (!ASN1_STRING_copy(
		    sid->d.issuerAndSerialNumber->serialNumber,
		    X509_get_serialNumber(cert)))
			goto merr;
		break;

	case CMS_SIGNERINFO_KEYIDENTIFIER:
		if (!cert->skid) {
			CMSerr(CMS_F_CMS_SET1_SIGNERIDENTIFIER,
			    CMS_R_CERTIFICATE_HAS_NO_KEYID);
			return 0;
		}
		sid->d.subjectKeyIdentifier = ASN1_STRING_dup(cert->skid);
		if (!sid->d.subjectKeyIdentifier)
			goto merr;
		break;

	default:
		CMSerr(CMS_F_CMS_SET1_SIGNERIDENTIFIER, CMS_R_UNKNOWN_ID);
		return 0;
	}

	sid->type = type;

	return 1;

merr:
	CMSerr(CMS_F_CMS_SET1_SIGNERIDENTIFIER, ERR_R_MALLOC_FAILURE);
	return 0;
}

int
cms_SignerIdentifier_get0_signer_id(CMS_SignerIdentifier *sid,
    ASN1_OCTET_STRING **keyid, X509_NAME **issuer, ASN1_INTEGER **sno)
{
	if (sid->type == CMS_SIGNERINFO_ISSUER_SERIAL) {
		if (issuer)
			*issuer = sid->d.issuerAndSerialNumber->issuer;
		if (sno)
			*sno = sid->d.issuerAndSerialNumber->serialNumber;
	} else if (sid->type == CMS_SIGNERINFO_KEYIDENTIFIER) {
		if (keyid)
			*keyid = sid->d.subjectKeyIdentifier;
	} else
		return 0;
	return 1;
}

int
cms_SignerIdentifier_cert_cmp(CMS_SignerIdentifier *sid, X509 *cert)
{
	int ret;

	if (sid->type == CMS_SIGNERINFO_ISSUER_SERIAL) {
		ret = X509_NAME_cmp(sid->d.issuerAndSerialNumber->issuer,
		    X509_get_issuer_name(cert));
		if (ret)
			return ret;
		return ASN1_INTEGER_cmp(sid->d.issuerAndSerialNumber->serialNumber,
		    X509_get_serialNumber(cert));
	} else if (sid->type == CMS_SIGNERINFO_KEYIDENTIFIER) {
		X509_check_purpose(cert, -1, -1);
		if (!cert->skid)
			return -1;
		return ASN1_OCTET_STRING_cmp(sid->d.subjectKeyIdentifier,
		    cert->skid);
	} else
		return -1;
}

CMS_SignerInfo *
CMS_add1_signer(CMS_ContentInfo *cms, X509 *signer, EVP_PKEY *pk,
    const EVP_MD *md, unsigned int flags)
{
	CMS_SignedData *sd;
	CMS_SignerInfo *si = NULL;
	X509_ALGOR *alg;
	int i, type;

	if (!X509_check_private_key(signer, pk)) {
		CMSerr(CMS_F_CMS_ADD1_SIGNER,
		    CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
		return NULL;
	}
	sd = cms_signed_data_init(cms);
	if (!sd)
		goto err;
	si = M_ASN1_new_of(CMS_SignerInfo);
	if (!si)
		goto merr;
	X509_check_purpose(signer, -1, -1);

	CRYPTO_add(&pk->references, 1, CRYPTO_LOCK_EVP_PKEY);
	CRYPTO_add(&signer->references, 1, CRYPTO_LOCK_X509);

	si->pkey = pk;
	si->signer = signer;

	if (flags & CMS_USE_KEYID) {
		si->version = 3;
		if (sd->version < 3)
			sd->version = 3;
		type = CMS_SIGNERINFO_KEYIDENTIFIER;
	} else {
		type = CMS_SIGNERINFO_ISSUER_SERIAL;
		si->version = 1;
	}

	if (!cms_set1_SignerIdentifier(si->sid, signer, type))
		goto err;

	if (md == NULL) {
		int def_nid;
		if (EVP_PKEY_get_default_digest_nid(pk, &def_nid) <= 0)
			goto err;
		md = EVP_get_digestbynid(def_nid);
		if (md == NULL) {
			CMSerr(CMS_F_CMS_ADD1_SIGNER, CMS_R_NO_DEFAULT_DIGEST);
			goto err;
		}
	}

	if (!md) {
		CMSerr(CMS_F_CMS_ADD1_SIGNER, CMS_R_NO_DIGEST_SET);
		goto err;
	}

	cms_DigestAlgorithm_set(si->digestAlgorithm, md);

	/* See if digest is present in digestAlgorithms */
	for (i = 0; i < sk_X509_ALGOR_num(sd->digestAlgorithms); i++) {
		ASN1_OBJECT *aoid;
		alg = sk_X509_ALGOR_value(sd->digestAlgorithms, i);
		X509_ALGOR_get0(&aoid, NULL, NULL, alg);
		if (OBJ_obj2nid(aoid) == EVP_MD_type(md))
			break;
	}

	if (i == sk_X509_ALGOR_num(sd->digestAlgorithms)) {
		alg = X509_ALGOR_new();
		if (!alg)
			goto merr;
		cms_DigestAlgorithm_set(alg, md);
		if (!sk_X509_ALGOR_push(sd->digestAlgorithms, alg)) {
			X509_ALGOR_free(alg);
			goto merr;
		}
	}

	if (pk->ameth && pk->ameth->pkey_ctrl) {
		i = pk->ameth->pkey_ctrl(pk, ASN1_PKEY_CTRL_CMS_SIGN,
		    0, si);
		if (i == -2) {
			CMSerr(CMS_F_CMS_ADD1_SIGNER,
			    CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE);
			goto err;
		}
		if (i <= 0) {
			CMSerr(CMS_F_CMS_ADD1_SIGNER, CMS_R_CTRL_FAILURE);
			goto err;
		}
	}

	if (!(flags & CMS_NOATTR)) {
		/* Initialialize signed attributes strutucture so other
		 * attributes such as signing time etc are added later
		 * even if we add none here.
		 */
		if (!si->signedAttrs) {
			si->signedAttrs = sk_X509_ATTRIBUTE_new_null();
			if (!si->signedAttrs)
				goto merr;
		}

		if (!(flags & CMS_NOSMIMECAP)) {
			STACK_OF(X509_ALGOR) *smcap = NULL;
			i = CMS_add_standard_smimecap(&smcap);
			if (i)
				i = CMS_add_smimecap(si, smcap);
			sk_X509_ALGOR_pop_free(smcap, X509_ALGOR_free);
			if (!i)
				goto merr;
		}
		if (flags & CMS_REUSE_DIGEST) {
			if (!cms_copy_messageDigest(cms, si))
				goto err;
			if (!(flags & CMS_PARTIAL) &&
			    !CMS_SignerInfo_sign(si))
				goto err;
		}
	}

	if (!(flags & CMS_NOCERTS)) {
		/* NB ignore -1 return for duplicate cert */
		if (!CMS_add1_cert(cms, signer))
			goto merr;
	}

	if (!sd->signerInfos)
		sd->signerInfos = sk_CMS_SignerInfo_new_null();
	if (!sd->signerInfos ||
	    !sk_CMS_SignerInfo_push(sd->signerInfos, si))
		goto merr;

	return si;

merr:
	CMSerr(CMS_F_CMS_ADD1_SIGNER, ERR_R_MALLOC_FAILURE);
err:
	if (si)
		M_ASN1_free_of(si, CMS_SignerInfo);
	return NULL;
}

static int
cms_add1_signingTime(CMS_SignerInfo *si, ASN1_TIME *t)
{
	ASN1_TIME *tt;
	int r = 0;

	if (t)
		tt = t;
	else
		tt = X509_gmtime_adj(NULL, 0);

	if (!tt)
		goto merr;

	if (CMS_signed_add1_attr_by_NID(si, NID_pkcs9_signingTime,
	    tt->type, tt, -1) <= 0)
		goto merr;

	r = 1;

merr:
	if (!t)
		ASN1_TIME_free(tt);
	if (!r)
		CMSerr(CMS_F_CMS_ADD1_SIGNINGTIME, ERR_R_MALLOC_FAILURE);

	return r;
}

STACK_OF(CMS_SignerInfo) *
CMS_get0_SignerInfos(CMS_ContentInfo *cms)
{
	CMS_SignedData *sd;

	sd = cms_get0_signed(cms);
	if (!sd)
		return NULL;
	return sd->signerInfos;
}

STACK_OF(X509) *
CMS_get0_signers(CMS_ContentInfo *cms)
{
	STACK_OF(X509) *signers = NULL;
	STACK_OF(CMS_SignerInfo) *sinfos;
	CMS_SignerInfo *si;
	int i;

	sinfos = CMS_get0_SignerInfos(cms);
	for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++) {
		si = sk_CMS_SignerInfo_value(sinfos, i);
		if (si->signer) {
			if (!signers) {
				signers = sk_X509_new_null();
				if (!signers)
					return NULL;
			}
			if (!sk_X509_push(signers, si->signer)) {
				sk_X509_free(signers);
				return NULL;
			}
		}
	}
	return signers;
}

void
CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)
{
	if (signer) {
		CRYPTO_add(&signer->references, 1, CRYPTO_LOCK_X509);
		EVP_PKEY_free(si->pkey);
		si->pkey = X509_get_pubkey(signer);
	}
	X509_free(si->signer);
	si->signer = signer;
}

int
CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si, ASN1_OCTET_STRING **keyid,
    X509_NAME **issuer, ASN1_INTEGER **sno)
{
	return cms_SignerIdentifier_get0_signer_id(si->sid, keyid, issuer, sno);
}

int
CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert)
{
	return cms_SignerIdentifier_cert_cmp(si->sid, cert);
}

int
CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *scerts,
    unsigned int flags)
{
	CMS_SignedData *sd;
	CMS_SignerInfo *si;
	CMS_CertificateChoices *cch;
	STACK_OF(CMS_CertificateChoices) *certs;
	X509 *x;
	int i, j;
	int ret = 0;

	sd = cms_get0_signed(cms);
	if (!sd)
		return -1;
	certs = sd->certificates;
	for (i = 0; i < sk_CMS_SignerInfo_num(sd->signerInfos); i++) {
		si = sk_CMS_SignerInfo_value(sd->signerInfos, i);
		if (si->signer)
			continue;

		for (j = 0; j < sk_X509_num(scerts); j++) {
			x = sk_X509_value(scerts, j);
			if (CMS_SignerInfo_cert_cmp(si, x) == 0) {
				CMS_SignerInfo_set1_signer_cert(si, x);
				ret++;
				break;
			}
		}

		if (si->signer || (flags & CMS_NOINTERN))
			continue;

		for (j = 0; j < sk_CMS_CertificateChoices_num(certs); j++) {
			cch = sk_CMS_CertificateChoices_value(certs, j);
			if (cch->type != 0)
				continue;
			x = cch->d.certificate;
			if (CMS_SignerInfo_cert_cmp(si, x) == 0) {
				CMS_SignerInfo_set1_signer_cert(si, x);
				ret++;
				break;
			}
		}
	}
	return ret;
}

void
CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk, X509 **signer,
    X509_ALGOR **pdig, X509_ALGOR **psig)
{
	if (pk)
		*pk = si->pkey;
	if (signer)
		*signer = si->signer;
	if (pdig)
		*pdig = si->digestAlgorithm;
	if (psig)
		*psig = si->signatureAlgorithm;
}

static int
cms_SignerInfo_content_sign(CMS_ContentInfo *cms, CMS_SignerInfo *si,
    BIO *chain)
{
	EVP_MD_CTX mctx;
	int r = 0;
	EVP_MD_CTX_init(&mctx);

	if (!si->pkey) {
		CMSerr(CMS_F_CMS_SIGNERINFO_CONTENT_SIGN, CMS_R_NO_PRIVATE_KEY);
		return 0;
	}

	if (!cms_DigestAlgorithm_find_ctx(&mctx, chain, si->digestAlgorithm))
		goto err;

	/* If any signed attributes calculate and add messageDigest attribute */

	if (CMS_signed_get_attr_count(si) >= 0) {
		ASN1_OBJECT *ctype =
		    cms->d.signedData->encapContentInfo->eContentType;
		unsigned char md[EVP_MAX_MD_SIZE];
		unsigned int mdlen;
		if (!EVP_DigestFinal_ex(&mctx, md, &mdlen))
			goto err;
		if (!CMS_signed_add1_attr_by_NID(si, NID_pkcs9_messageDigest,
		    V_ASN1_OCTET_STRING,
		    md, mdlen))
			goto err;
		/* Copy content type across */
		if (CMS_signed_add1_attr_by_NID(si, NID_pkcs9_contentType,
		    V_ASN1_OBJECT, ctype, -1) <= 0)
			goto err;
		if (!CMS_SignerInfo_sign(si))
			goto err;
	} else {
		unsigned char *sig;
		unsigned int siglen;
		sig = malloc(EVP_PKEY_size(si->pkey));
		if (!sig) {
			CMSerr(CMS_F_CMS_SIGNERINFO_CONTENT_SIGN,
			    ERR_R_MALLOC_FAILURE);
			goto err;
		}
		if (!EVP_SignFinal(&mctx, sig, &siglen, si->pkey)) {
			CMSerr(CMS_F_CMS_SIGNERINFO_CONTENT_SIGN,
			    CMS_R_SIGNFINAL_ERROR);
			free(sig);
			goto err;
		}
		ASN1_STRING_set0(si->signature, sig, siglen);
	}

	r = 1;

err:
	EVP_MD_CTX_cleanup(&mctx);
	return r;
}

int
cms_SignedData_final(CMS_ContentInfo *cms, BIO *chain)
{
	STACK_OF(CMS_SignerInfo) *sinfos;
	CMS_SignerInfo *si;
	int i;

	sinfos = CMS_get0_SignerInfos(cms);
	for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++) {
		si = sk_CMS_SignerInfo_value(sinfos, i);
		if (!cms_SignerInfo_content_sign(cms, si, chain))
			return 0;
	}
	cms->d.signedData->encapContentInfo->partial = 0;
	return 1;
}

int
CMS_SignerInfo_sign(CMS_SignerInfo *si)
{
	EVP_MD_CTX mctx;
	EVP_PKEY_CTX *pctx;
	unsigned char *abuf = NULL;
	int alen;
	size_t siglen;
	const EVP_MD *md = NULL;

	md = EVP_get_digestbyobj(si->digestAlgorithm->algorithm);
	if (md == NULL)
		return 0;

	EVP_MD_CTX_init(&mctx);

	if (CMS_signed_get_attr_by_NID(si, NID_pkcs9_signingTime, -1) < 0) {
		if (!cms_add1_signingTime(si, NULL))
			goto err;
	}

	if (EVP_DigestSignInit(&mctx, &pctx, md, NULL, si->pkey) <= 0)
		goto err;

	if (EVP_PKEY_CTX_ctrl(pctx, -1, EVP_PKEY_OP_SIGN,
	    EVP_PKEY_CTRL_CMS_SIGN, 0, si) <= 0) {
		CMSerr(CMS_F_CMS_SIGNERINFO_SIGN, CMS_R_CTRL_ERROR);
		goto err;
	}

	alen = ASN1_item_i2d((ASN1_VALUE *)si->signedAttrs, &abuf,
	    ASN1_ITEM_rptr(CMS_Attributes_Sign));
	if (!abuf)
		goto err;
	if (EVP_DigestSignUpdate(&mctx, abuf, alen) <= 0)
		goto err;
	if (EVP_DigestSignFinal(&mctx, NULL, &siglen) <= 0)
		goto err;
	free(abuf);
	abuf = malloc(siglen);
	if (!abuf)
		goto err;
	if (EVP_DigestSignFinal(&mctx, abuf, &siglen) <= 0)
		goto err;

	if (EVP_PKEY_CTX_ctrl(pctx, -1, EVP_PKEY_OP_SIGN,
	    EVP_PKEY_CTRL_CMS_SIGN, 1, si) <= 0) {
		CMSerr(CMS_F_CMS_SIGNERINFO_SIGN, CMS_R_CTRL_ERROR);
		goto err;
	}

	EVP_MD_CTX_cleanup(&mctx);

	ASN1_STRING_set0(si->signature, abuf, siglen);

	return 1;

err:
	free(abuf);
	EVP_MD_CTX_cleanup(&mctx);
	return 0;
}

int
CMS_SignerInfo_verify(CMS_SignerInfo *si)
{
	EVP_MD_CTX mctx;
	EVP_PKEY_CTX *pctx;
	unsigned char *abuf = NULL;
	int alen, r = -1;
	const EVP_MD *md = NULL;

	if (!si->pkey) {
		CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY, CMS_R_NO_PUBLIC_KEY);
		return -1;
	}

	md = EVP_get_digestbyobj(si->digestAlgorithm->algorithm);
	if (md == NULL)
		return -1;
	EVP_MD_CTX_init(&mctx);
	if (EVP_DigestVerifyInit(&mctx, &pctx, md, NULL, si->pkey) <= 0)
		goto err;

	alen = ASN1_item_i2d((ASN1_VALUE *)si->signedAttrs, &abuf,
	    ASN1_ITEM_rptr(CMS_Attributes_Verify));
	if (!abuf)
		goto err;
	r = EVP_DigestVerifyUpdate(&mctx, abuf, alen);
	free(abuf);
	if (r <= 0) {
		r = -1;
		goto err;
	}
	r = EVP_DigestVerifyFinal(&mctx,
	    si->signature->data, si->signature->length);
	if (r <= 0)
		CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY, CMS_R_VERIFICATION_FAILURE);

err:
	EVP_MD_CTX_cleanup(&mctx);
	return r;
}

/* Create a chain of digest BIOs from a CMS ContentInfo */

BIO *
cms_SignedData_init_bio(CMS_ContentInfo *cms)
{
	int i;
	CMS_SignedData *sd;
	BIO *chain = NULL;

	sd = cms_get0_signed(cms);
	if (!sd)
		return NULL;
	if (cms->d.signedData->encapContentInfo->partial)
		cms_sd_set_version(sd);
	for (i = 0; i < sk_X509_ALGOR_num(sd->digestAlgorithms); i++) {
		X509_ALGOR *digestAlgorithm;
		BIO *mdbio;
		digestAlgorithm = sk_X509_ALGOR_value(sd->digestAlgorithms, i);
		mdbio = cms_DigestAlgorithm_init_bio(digestAlgorithm);
		if (!mdbio)
			goto err;
		if (chain)
			BIO_push(chain, mdbio);
		else
			chain = mdbio;
	}
	return chain;

err:
	if (chain)
		BIO_free_all(chain);
	return NULL;
}

int
CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain)
{
	ASN1_OCTET_STRING *os = NULL;
	EVP_MD_CTX mctx;
	int r = -1;

	EVP_MD_CTX_init(&mctx);
	/* If we have any signed attributes look for messageDigest value */
	if (CMS_signed_get_attr_count(si) >= 0) {
		os = CMS_signed_get0_data_by_OBJ(si,
		    OBJ_nid2obj(NID_pkcs9_messageDigest),
		    -3, V_ASN1_OCTET_STRING);
		if (!os) {
			CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT,
			    CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE);
			goto err;
		}
	}

	if (!cms_DigestAlgorithm_find_ctx(&mctx, chain, si->digestAlgorithm))
		goto err;

	/* If messageDigest found compare it */

	if (os) {
		unsigned char mval[EVP_MAX_MD_SIZE];
		unsigned int mlen;
		if (EVP_DigestFinal_ex(&mctx, mval, &mlen) <= 0) {
			CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT,
			    CMS_R_UNABLE_TO_FINALIZE_CONTEXT);
			goto err;
		}
		if (mlen != (unsigned int)os->length) {
			CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT,
			    CMS_R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH);
			goto err;
		}

		if (memcmp(mval, os->data, mlen)) {
			CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT,
			    CMS_R_VERIFICATION_FAILURE);
			r = 0;
		} else
			r = 1;
	} else {
		r = EVP_VerifyFinal(&mctx, si->signature->data,
		    si->signature->length, si->pkey);
		if (r <= 0) {
			CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT,
			    CMS_R_VERIFICATION_FAILURE);
			r = 0;
		}
	}

err:
	EVP_MD_CTX_cleanup(&mctx);
	return r;
}

int
CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs)
{
	unsigned char *smder = NULL;
	int smderlen, r;

	smderlen = i2d_X509_ALGORS(algs, &smder);
	if (smderlen <= 0)
		return 0;
	r = CMS_signed_add1_attr_by_NID(si, NID_SMIMECapabilities,
	    V_ASN1_SEQUENCE, smder, smderlen);
	free(smder);
	return r;
}

int
CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs, int algnid, int keysize)
{
	X509_ALGOR *alg;
	ASN1_INTEGER *key = NULL;

	if (keysize > 0) {
		key = ASN1_INTEGER_new();
		if (!key || !ASN1_INTEGER_set(key, keysize))
			return 0;
	}
	alg = X509_ALGOR_new();
	if (!alg) {
		if (key)
			ASN1_INTEGER_free(key);
		return 0;
	}

	X509_ALGOR_set0(alg, OBJ_nid2obj(algnid),
	    key ? V_ASN1_INTEGER : V_ASN1_UNDEF, key);
	if (!*algs)
		*algs = sk_X509_ALGOR_new_null();
	if (!*algs || !sk_X509_ALGOR_push(*algs, alg)) {
		X509_ALGOR_free(alg);
		return 0;
	}
	return 1;
}

/* Check to see if a cipher exists and if so add S/MIME capabilities */

static int
cms_add_cipher_smcap(STACK_OF(X509_ALGOR) **sk, int nid, int arg)
{
	if (EVP_get_cipherbynid(nid))
		return CMS_add_simple_smimecap(sk, nid, arg);
	return 1;
}

static int
cms_add_digest_smcap(STACK_OF(X509_ALGOR) **sk, int nid, int arg)
{
	if (EVP_get_digestbynid(nid))
		return CMS_add_simple_smimecap(sk, nid, arg);
	return 1;
}

int
CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap)
{
	if (!cms_add_cipher_smcap(smcap, NID_aes_256_cbc, -1) ||
	    !cms_add_digest_smcap(smcap, NID_id_GostR3411_94, -1) ||
	    !cms_add_digest_smcap(smcap, NID_id_tc26_gost3411_2012_256, -1) ||
	    !cms_add_digest_smcap(smcap, NID_id_tc26_gost3411_2012_512, -1) ||
	    !cms_add_cipher_smcap(smcap, NID_id_Gost28147_89, -1) ||
	    !cms_add_cipher_smcap(smcap, NID_aes_192_cbc, -1) ||
	    !cms_add_cipher_smcap(smcap, NID_aes_128_cbc, -1) ||
	    !cms_add_cipher_smcap(smcap, NID_des_ede3_cbc, -1) ||
	    !cms_add_cipher_smcap(smcap, NID_rc2_cbc, 128) ||
	    !cms_add_cipher_smcap(smcap, NID_rc2_cbc, 64) ||
	    !cms_add_cipher_smcap(smcap, NID_des_cbc, -1) ||
	    !cms_add_cipher_smcap(smcap, NID_rc2_cbc, 40))
		return 0;
	return 1;
}
@


1.10
log
@X509_free(3) is NULL-safe, so remove NULL checks before its calls.

ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_sd.c,v 1.9 2014/11/09 19:17:13 miod Exp $ */
@


1.9
log
@GOST crypto algorithms (well, most of them), ported from the removed GOST
engine to regular EVP citizens, contributed by Dmitry Eremin-Solenikov;
libcrypto bits only for now.

This is a verbatim import of Dmitry's work, and does not compile in this
state; the forthcoming commits will address these issues.

None of the GOST code is enabled in libcrypto yet, for it still gets
compiled with OPENSSL_NO_GOST defined. However, the public header gost.h
will be installed.
@
text
@d1 1
a1 1
/* $OpenBSD: cms_sd.c,v 1.8 2014/07/12 16:03:37 miod Exp $ */
d501 1
a501 2
	if (si->signer)
		X509_free(si->signer);
@


1.8
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_sd.c,v 1.7 2014/07/11 13:02:10 miod Exp $ */
d923 2
@


1.7
log
@Fix version number processing in cms_sd_set_version(); OpenSSL PR #3249 via
OpenSSL trunk.
@
text
@d1 1
a1 1
/* $OpenBSD: cms_sd.c,v 1.6 2014/07/11 08:44:48 jsing Exp $ */
d498 1
a498 2
		if (si->pkey)
			EVP_PKEY_free(si->pkey);
@


1.6
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_sd.c,v 1.5 2014/06/12 15:49:28 deraadt Exp $ */
d153 2
a154 2
		} else
			sd->version = 1;
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a53 1
#include "cryptlib.h"
d55 2
d59 2
a60 2
#include <openssl/err.h>
#include <openssl/cms.h>
a61 1
#include "asn1_locl.h"
@


1.4
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/cms/cms_sd.c */
@


1.3
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d67 6
a72 5
static CMS_SignedData *cms_get0_signed(CMS_ContentInfo *cms)
	{
	if (OBJ_obj2nid(cms->contentType) != NID_pkcs7_signed)
		{
		CMSerr(CMS_F_CMS_GET0_SIGNED, CMS_R_CONTENT_TYPE_NOT_SIGNED_DATA);
d74 1
a74 1
		}
d76 1
a76 1
	}
d78 4
a81 4
static CMS_SignedData *cms_signed_data_init(CMS_ContentInfo *cms)
	{
	if (cms->d.other == NULL)
		{
d83 3
a85 3
		if (!cms->d.signedData)
			{
			CMSerr(CMS_F_CMS_SIGNED_DATA_INIT, ERR_R_MALLOC_FAILURE);
d87 1
a87 1
			}
d90 1
a90 1
						OBJ_nid2obj(NID_pkcs7_data);
d95 1
a95 1
		}
d97 1
a97 1
	}
d101 3
a103 2
int CMS_SignedData_init(CMS_ContentInfo *cms)
	{
d108 1
a108 1
	}
d112 3
a114 2
static void cms_sd_set_version(CMS_SignedData *sd)
	{
d120 1
a120 2
	for (i = 0; i < sk_CMS_CertificateChoices_num(sd->certificates); i++)
		{
d122 1
a122 2
		if (cch->type == CMS_CERTCHOICE_OTHER)
			{
d125 1
a125 3
			}
		else if (cch->type == CMS_CERTCHOICE_V2ACERT)
			{
d128 1
a128 3
			}
		else if (cch->type == CMS_CERTCHOICE_V1ACERT)
			{
a130 1
			}
d132 1
d134 1
a134 2
	for (i = 0; i < sk_CMS_RevocationInfoChoice_num(sd->crls); i++)
		{
d136 1
a136 2
		if (rch->type == CMS_REVCHOICE_OTHER)
			{
a138 1
			}
d140 1
d142 2
a143 2
	if ((OBJ_obj2nid(sd->encapContentInfo->eContentType) != NID_pkcs7_data)
			&& (sd->version < 3))
d146 1
a146 2
	for (i = 0; i < sk_CMS_SignerInfo_num(sd->signerInfos); i++)
		{
d148 1
a148 2
		if (si->sid->type == CMS_SIGNERINFO_KEYIDENTIFIER)
			{
d153 1
a153 2
			}
		else
d155 1
a155 1
		}
d159 1
a160 2
	}
	
d163 3
a165 2
static int cms_copy_messageDigest(CMS_ContentInfo *cms, CMS_SignerInfo *si)
	{
d169 1
d171 1
a171 2
	for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++)
		{
d179 1
a179 1
				sitmp->digestAlgorithm->algorithm))
d182 3
a184 4
					OBJ_nid2obj(NID_pkcs9_messageDigest),
					-3, V_ASN1_OCTET_STRING);
		if (!messageDigest)
			{
d186 1
a186 1
				CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE);
d188 1
a188 1
			}
d191 2
a192 2
						V_ASN1_OCTET_STRING,
						messageDigest, -1))
a195 3
		}
		CMSerr(CMS_F_CMS_COPY_MESSAGEDIGEST, CMS_R_NO_MATCHING_DIGEST);
		return 0;
d197 3
d201 5
a205 5
int cms_set1_SignerIdentifier(CMS_SignerIdentifier *sid, X509 *cert, int type)
	{
	switch(type)
		{
		case CMS_SIGNERINFO_ISSUER_SERIAL:
d207 1
a207 1
			M_ASN1_new_of(CMS_IssuerAndSerialNumber);
d211 1
a211 1
					X509_get_issuer_name(cert)))
d214 2
a215 2
			sid->d.issuerAndSerialNumber->serialNumber,
				X509_get_serialNumber(cert)))
d219 2
a220 3
		case CMS_SIGNERINFO_KEYIDENTIFIER:
		if (!cert->skid)
			{
d222 1
a222 1
					CMS_R_CERTIFICATE_HAS_NO_KEYID);
d224 1
a224 1
			}
d230 1
a230 1
		default:
d233 1
a233 1
		}
d239 1
a239 1
	merr:
d242 1
d244 5
a248 8
	}

int cms_SignerIdentifier_get0_signer_id(CMS_SignerIdentifier *sid,
					ASN1_OCTET_STRING **keyid,
					X509_NAME **issuer, ASN1_INTEGER **sno)
	{
	if (sid->type == CMS_SIGNERINFO_ISSUER_SERIAL)
		{
d253 1
a253 3
		}
	else if (sid->type == CMS_SIGNERINFO_KEYIDENTIFIER)
		{
d256 1
a256 2
		}
	else
d259 1
a259 1
	}
d261 3
a263 2
int cms_SignerIdentifier_cert_cmp(CMS_SignerIdentifier *sid, X509 *cert)
	{
d265 2
a266 2
	if (sid->type == CMS_SIGNERINFO_ISSUER_SERIAL)
		{
d268 1
a268 1
					X509_get_issuer_name(cert));
d272 2
a273 4
					X509_get_serialNumber(cert));
		}
	else if (sid->type == CMS_SIGNERINFO_KEYIDENTIFIER)
		{
d278 2
a279 3
							cert->skid);
		}
	else
d281 1
a281 1
	}
d283 4
a286 4
CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
			X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
			unsigned int flags)
	{
d291 2
a292 2
	if(!X509_check_private_key(signer, pk))
		{
d294 3
a296 3
			CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
                return NULL;
		}
d311 1
a311 2
	if (flags & CMS_USE_KEYID)
		{
d316 1
a316 3
		}
	else
		{
d319 1
a319 1
		}
d324 1
a324 2
	if (md == NULL)
		{
d329 1
a329 2
		if (md == NULL)
			{
a331 1
			}
d333 1
d335 1
a335 2
	if (!md)
		{
d338 1
a338 1
		}
d343 1
a343 2
	for (i = 0; i < sk_X509_ALGOR_num(sd->digestAlgorithms); i++)
		{
d349 1
a349 1
		}
d351 1
a351 2
	if (i == sk_X509_ALGOR_num(sd->digestAlgorithms))
		{
d356 1
a356 2
		if (!sk_X509_ALGOR_push(sd->digestAlgorithms, alg))
			{
a358 1
			}
d360 1
d362 1
a362 2
	if (pk->ameth && pk->ameth->pkey_ctrl)
		{
d364 2
a365 3
						0, si);
		if (i == -2)
			{
d367 1
a367 1
				CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE);
d369 2
a370 3
			}
		if (i <= 0)
			{
a372 1
			}
d374 1
d376 1
a376 2
	if (!(flags & CMS_NOATTR))
		{
d381 1
a381 2
		if (!si->signedAttrs)
			{
d385 1
a385 1
			}
d387 1
a387 2
		if (!(flags & CMS_NOSMIMECAP))
			{
d395 2
a396 3
			}
		if (flags & CMS_REUSE_DIGEST)
			{
d400 1
a400 1
					!CMS_SignerInfo_sign(si))
a401 1
			}
d403 1
d405 1
a405 2
	if (!(flags & CMS_NOCERTS))
		{
d409 1
a409 1
		}
d414 1
a414 1
		!sk_CMS_SignerInfo_push(sd->signerInfos, si))
d419 1
a419 1
	merr:
d421 1
a421 1
	err:
d425 1
d427 3
a429 4
	}

static int cms_add1_signingTime(CMS_SignerInfo *si, ASN1_TIME *t)
	{
d432 1
d442 1
a442 1
						tt->type, tt, -1) <= 0)
d447 1
a447 2
	merr:

a449 1

d454 1
d456 4
a459 1
	}
a460 3
STACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms)
	{
	CMS_SignedData *sd;
d465 1
a465 1
	}
d467 3
a469 2
STACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms)
	{
d474 1
d476 1
a476 2
	for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++)
		{
d478 2
a479 4
		if (si->signer)
			{
			if (!signers)
				{
d483 2
a484 3
				}
			if (!sk_X509_push(signers, si->signer))
				{
a486 1
				}
d489 1
d491 1
a491 1
	}
d493 4
a496 4
void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)
	{
	if (signer)
		{
d501 1
a501 1
		}
d505 1
a505 1
	}
d507 4
a510 4
int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
					ASN1_OCTET_STRING **keyid,
					X509_NAME **issuer, ASN1_INTEGER **sno)
	{
d512 1
a512 1
	}
d514 3
a516 2
int CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert)
	{
d518 1
a518 1
	}
d520 4
a523 3
int CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *scerts,
				unsigned int flags)
	{
d531 1
d536 1
a536 2
	for (i = 0; i < sk_CMS_SignerInfo_num(sd->signerInfos); i++)
		{
d541 1
a541 2
		for (j = 0; j < sk_X509_num(scerts); j++)
			{
d543 1
a543 2
			if (CMS_SignerInfo_cert_cmp(si, x) == 0)
				{
a546 1
				}
d548 1
d553 1
a553 2
		for (j = 0; j < sk_CMS_CertificateChoices_num(certs); j++)
			{
d558 1
a558 2
			if (CMS_SignerInfo_cert_cmp(si, x) == 0)
				{
a561 1
				}
d564 1
d566 1
a566 1
	}
d568 4
a571 3
void CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk, X509 **signer,
					X509_ALGOR **pdig, X509_ALGOR **psig)
	{
d580 1
a580 1
	}
d582 4
a585 3
static int cms_SignerInfo_content_sign(CMS_ContentInfo *cms,
					CMS_SignerInfo *si, BIO *chain)
	{
d590 1
a590 3

	if (!si->pkey)
		{
d593 1
a593 1
		}
d600 1
a600 2
	if (CMS_signed_get_attr_count(si) >= 0)
		{
d602 1
a602 1
			cms->d.signedData->encapContentInfo->eContentType; 
d608 2
a609 2
						V_ASN1_OCTET_STRING,
						md, mdlen))
d613 1
a613 1
					V_ASN1_OBJECT, ctype, -1) <= 0)
d617 1
a617 3
		}
	else
		{
d621 1
a621 2
		if (!sig)
			{
d623 1
a623 1
					ERR_R_MALLOC_FAILURE);
d625 2
a626 3
			}
		if (!EVP_SignFinal(&mctx, sig, &siglen, si->pkey))
			{
d628 1
a628 1
					CMS_R_SIGNFINAL_ERROR);
d631 1
a631 1
			}
d633 1
a633 1
		}
d637 1
a637 1
	err:
d640 1
d642 3
a644 4
	}

int cms_SignedData_final(CMS_ContentInfo *cms, BIO *chain)
	{
d648 1
d650 1
a650 2
	for (i = 0; i < sk_CMS_SignerInfo_num(sinfos); i++)
		{
d654 1
a654 1
		}
d657 1
a657 1
	}
d659 3
a661 2
int CMS_SignerInfo_sign(CMS_SignerInfo *si)
	{
d675 1
a675 2
	if (CMS_signed_get_attr_by_NID(si, NID_pkcs9_signingTime, -1) < 0)
		{
d678 1
a678 1
		}
d684 1
a684 2
				EVP_PKEY_CTRL_CMS_SIGN, 0, si) <= 0)
		{
d687 1
a687 1
		}
d689 3
a691 3
	alen = ASN1_item_i2d((ASN1_VALUE *)si->signedAttrs,&abuf,
				ASN1_ITEM_rptr(CMS_Attributes_Sign));
	if(!abuf)
d699 1
a699 1
	if(!abuf)
d705 1
a705 2
				EVP_PKEY_CTRL_CMS_SIGN, 1, si) <= 0)
		{
d708 1
a708 1
		}
d716 1
a716 1
	err:
d720 1
d722 3
a724 4
	}

int CMS_SignerInfo_verify(CMS_SignerInfo *si)
	{
d731 1
a731 2
	if (!si->pkey)
		{
d734 1
a734 1
		}
d743 3
a745 3
	alen = ASN1_item_i2d((ASN1_VALUE *)si->signedAttrs,&abuf,
				ASN1_ITEM_rptr(CMS_Attributes_Verify));
	if(!abuf)
d749 1
a749 2
	if (r <= 0)
		{
d752 1
a752 1
		}
d754 1
a754 1
			si->signature->data, si->signature->length);
d757 2
a758 1
	err:
d761 1
a761 1
	}
d765 3
a767 2
BIO *cms_SignedData_init_bio(CMS_ContentInfo *cms)
	{
d771 1
d777 1
a777 2
	for (i = 0; i < sk_X509_ALGOR_num(sd->digestAlgorithms); i++)
		{
d783 1
a783 1
			goto err;	
d785 1
a785 1
			 BIO_push(chain, mdbio);
d788 1
a788 1
		}
d790 2
a791 1
	err:
d795 1
a795 1
	}
d797 3
a799 2
int CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain)
	{
d803 1
d806 1
a806 2
	if (CMS_signed_get_attr_count(si) >= 0)
		{
d808 3
a810 4
					OBJ_nid2obj(NID_pkcs9_messageDigest),
					-3, V_ASN1_OCTET_STRING);
		if (!os)
			{
d812 1
a812 1
				CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE);
a813 1
			}
d815 1
d822 1
a822 2
	if (os)
		{
d825 1
a825 2
		if (EVP_DigestFinal_ex(&mctx, mval, &mlen) <= 0)
			{
d827 1
a827 1
				CMS_R_UNABLE_TO_FINALIZE_CONTEXT);
d829 2
a830 3
			}
		if (mlen != (unsigned int)os->length)
			{
d832 1
a832 1
				CMS_R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH);
d834 1
a834 1
			}
d836 1
a836 2
		if (memcmp(mval, os->data, mlen))
			{
d838 1
a838 1
				CMS_R_VERIFICATION_FAILURE);
d840 1
a840 2
			}
		else
d842 1
a842 3
		}
	else
		{
d844 2
a845 3
					si->signature->length, si->pkey);
		if (r <= 0)
			{
d847 1
a847 1
				CMS_R_VERIFICATION_FAILURE);
a848 1
			}
d850 1
d852 1
a852 1
	err:
d855 1
d857 3
a859 4
	}

int CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs)
	{
d862 1
d867 1
a867 1
					V_ASN1_SEQUENCE, smder, smderlen);
d870 1
a870 1
	}
d872 3
a874 3
int CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
				int algnid, int keysize)
	{
d877 2
a878 2
	if (keysize > 0)
		{
d882 1
a882 1
		}
d884 1
a884 2
	if (!alg)
		{
d888 2
a889 2
		}
		
d891 1
a891 1
				key ? V_ASN1_INTEGER : V_ASN1_UNDEF, key);
d894 1
a894 2
	if (!*algs || !sk_X509_ALGOR_push(*algs, alg))
		{
d897 1
a897 1
		}
d899 1
a899 1
	}
d903 3
a905 2
static int cms_add_cipher_smcap(STACK_OF(X509_ALGOR) **sk, int nid, int arg)
	{
d909 1
a909 1
	}
d911 3
a913 2
static int cms_add_digest_smcap(STACK_OF(X509_ALGOR) **sk, int nid, int arg)
	{
d917 1
a917 1
	}
d919 13
a931 12
int CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap)
	{
	if (!cms_add_cipher_smcap(smcap, NID_aes_256_cbc, -1)
		|| !cms_add_digest_smcap(smcap, NID_id_GostR3411_94, -1)
		|| !cms_add_cipher_smcap(smcap, NID_id_Gost28147_89, -1)
		|| !cms_add_cipher_smcap(smcap, NID_aes_192_cbc, -1)
		|| !cms_add_cipher_smcap(smcap, NID_aes_128_cbc, -1)
		|| !cms_add_cipher_smcap(smcap, NID_des_ede3_cbc, -1)
		|| !cms_add_cipher_smcap(smcap, NID_rc2_cbc, 128)
		|| !cms_add_cipher_smcap(smcap, NID_rc2_cbc, 64)
		|| !cms_add_cipher_smcap(smcap, NID_des_cbc, -1)
		|| !cms_add_cipher_smcap(smcap, NID_rc2_cbc, 40))
d934 1
a934 1
	}
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d762 1
a762 2
	if (abuf)
		free(abuf);
@


1.1
log
@Initial revision
@
text
@d61 1
d222 3
a224 4
		ASN1_STRING_free(sid->d.issuerAndSerialNumber->serialNumber);
		sid->d.issuerAndSerialNumber->serialNumber =
				ASN1_STRING_dup(X509_get_serialNumber(cert));
		if(!sid->d.issuerAndSerialNumber->serialNumber)
a343 1
	/* Since no EVP_PKEY_METHOD in 0.9.8 hard code SHA1 as default */
d345 11
a355 3
		md = EVP_sha1();

	/* OpenSSL 0.9.8 only supports SHA1 with non-RSA keys */
d357 1
a357 1
	if ((pk->type != EVP_PKEY_RSA) && (EVP_MD_type(md) != NID_sha1))
d359 1
a359 2
		CMSerr(CMS_F_CMS_ADD1_SIGNER,
				CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE);
d388 1
a388 5
	/* Since we have no EVP_PKEY_ASN1_METHOD in OpenSSL 0.9.8,
	 * hard code algorithm parameters.
	 */

	switch (pk->type)
d390 5
a394 22

		case EVP_PKEY_RSA:
		X509_ALGOR_set0(si->signatureAlgorithm,
					OBJ_nid2obj(NID_rsaEncryption),
					V_ASN1_NULL, 0);
		break;

		case EVP_PKEY_DSA:
		X509_ALGOR_set0(si->signatureAlgorithm,
					OBJ_nid2obj(NID_dsaWithSHA1),
					V_ASN1_UNDEF, 0);
		break;


		case EVP_PKEY_EC:
		X509_ALGOR_set0(si->signatureAlgorithm,
					OBJ_nid2obj(NID_ecdsa_with_SHA1),
					V_ASN1_UNDEF, 0);
		break;

		default:
		CMSerr(CMS_F_CMS_ADD1_SIGNER,
d396 7
a402 2
		goto err;

a618 19
/* In OpenSSL 0.9.8 we have the link between digest types and public
 * key types so we need to fixup the digest type if the public key
 * type is not appropriate.
 */

static void cms_fixup_mctx(EVP_MD_CTX *mctx, EVP_PKEY *pkey)
	{
	if (EVP_MD_CTX_type(mctx) != NID_sha1)
		return;
#ifndef OPENSSL_NO_DSA
	if (pkey->type == EVP_PKEY_DSA)
		mctx->digest = EVP_dss1();	
#endif
#ifndef OPENSSL_NO_ECDSA
	if (pkey->type == EVP_PKEY_EC)
		mctx->digest = EVP_ecdsa();	
#endif
	}

d644 2
a645 1
		EVP_DigestFinal_ex(&mctx, md, &mdlen);
d661 1
a661 1
		sig = OPENSSL_malloc(EVP_PKEY_size(si->pkey));
a667 1
		cms_fixup_mctx(&mctx, si->pkey);
d672 1
a672 1
			OPENSSL_free(sig);
d705 1
d708 1
a708 1
	unsigned int siglen;
d723 1
a723 1
	if (EVP_SignInit_ex(&mctx, md, NULL) <= 0)
a725 1
#if 0
a731 1
#endif
d737 3
a739 1
	if (EVP_SignUpdate(&mctx, abuf, alen) <= 0)
d741 2
a742 3
	siglen = EVP_PKEY_size(si->pkey);
	OPENSSL_free(abuf);
	abuf = OPENSSL_malloc(siglen);
d745 1
a745 2
	cms_fixup_mctx(&mctx, si->pkey);
	if (EVP_SignFinal(&mctx, abuf, &siglen, si->pkey) <= 0)
d747 1
a747 1
#if 0
d754 1
a754 1
#endif
d763 1
a763 1
		OPENSSL_free(abuf);
d772 1
d787 1
a787 1
	if (EVP_VerifyInit_ex(&mctx, md, NULL) <= 0)
d794 2
a795 2
	r = EVP_VerifyUpdate(&mctx, abuf, alen);
	OPENSSL_free(abuf);
d801 3
a803 4
	cms_fixup_mctx(&mctx, si->pkey);
	r = EVP_VerifyFinal(&mctx,
			si->signature->data, si->signature->length, si->pkey);
	if (!r)
a894 1
		cms_fixup_mctx(&mctx, si->pkey);
d920 1
a920 1
	OPENSSL_free(smder);
d963 1
a963 1
#if 0
d970 1
a970 1
#endif
d974 2
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d833 1
a833 1
	if (r <= 0)
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@a60 1
#include "asn1_locl.h"
d221 4
a224 3
		if (!ASN1_STRING_copy(
			sid->d.issuerAndSerialNumber->serialNumber,
				X509_get_serialNumber(cert)))
d344 1
d346 3
a348 11
		{
		int def_nid;
		if (EVP_PKEY_get_default_digest_nid(pk, &def_nid) <= 0)
			goto err;
		md = EVP_get_digestbynid(def_nid);
		if (md == NULL)
			{
			CMSerr(CMS_F_CMS_ADD1_SIGNER, CMS_R_NO_DEFAULT_DIGEST);
			goto err;
			}
		}
d350 1
a350 1
	if (!md)
d352 2
a353 1
		CMSerr(CMS_F_CMS_ADD1_SIGNER, CMS_R_NO_DIGEST_SET);
d382 5
a386 1
	if (pk->ameth && pk->ameth->pkey_ctrl)
d388 22
a409 5
		i = pk->ameth->pkey_ctrl(pk, ASN1_PKEY_CTRL_CMS_SIGN,
						0, si);
		if (i == -2)
			{
			CMSerr(CMS_F_CMS_ADD1_SIGNER,
d411 2
a412 7
			goto err;
			}
		if (i <= 0)
			{
			CMSerr(CMS_F_CMS_ADD1_SIGNER, CMS_R_CTRL_FAILURE);
			goto err;
			}
d629 19
d696 1
a733 1
	EVP_PKEY_CTX *pctx;
d736 1
a736 1
	size_t siglen;
d751 1
a751 1
	if (EVP_DigestSignInit(&mctx, &pctx, md, NULL, si->pkey) <= 0)
d754 1
d761 1
d767 1
a767 3
	if (EVP_DigestSignUpdate(&mctx, abuf, alen) <= 0)
		goto err;
	if (EVP_DigestSignFinal(&mctx, NULL, &siglen) <= 0)
d769 1
d774 2
a775 1
	if (EVP_DigestSignFinal(&mctx, abuf, &siglen) <= 0)
d777 1
a777 1

d784 1
a784 1

a801 1
	EVP_PKEY_CTX *pctx;
d816 1
a816 1
	if (EVP_DigestVerifyInit(&mctx, &pctx, md, NULL, si->pkey) <= 0)
d823 1
a823 1
	r = EVP_DigestVerifyUpdate(&mctx, abuf, alen);
d830 3
a832 2
	r = EVP_DigestVerifyFinal(&mctx,
			si->signature->data, si->signature->length);
d925 1
d994 1
a994 1

d1001 1
a1001 1

a1004 2
		|| !cms_add_digest_smcap(smcap, NID_id_GostR3411_94, -1)
		|| !cms_add_cipher_smcap(smcap, NID_id_Gost28147_89, -1)
@


1.1.1.4
log
@import OpenSSL-1.0.1c
@
text
@d644 1
a644 2
		if (!EVP_DigestFinal_ex(&mctx, md, &mdlen))
			goto err;
@


