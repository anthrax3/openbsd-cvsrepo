head	1.7;
access;
symbols
	butholakala:1.6
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.6.0.24
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.20
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.18
	OPENBSD_5_3_BASE:1.6
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.6.0.14
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.16
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.26
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.24
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.22
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.20
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.18
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.16
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.04.15.16.45.42;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.11;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.11.57;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.47;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.41;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.41;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.57;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove a test directory.  If anyone wants something this again, this is
the wrong place and it will need heavy lifting.  Love the .bat files
and the reference to pre-draft pthreads code at MIT.
ok beck
@
text
@/* crypto/threads/th-lock.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#ifdef LINUX
#include <typedefs.h>
#endif
#ifdef OPENSSL_SYS_WIN32
#include <windows.h>
#endif
#ifdef SOLARIS
#include <synch.h>
#include <thread.h>
#endif
#ifdef IRIX
#include <ulocks.h>
#include <sys/prctl.h>
#endif
#ifdef PTHREADS
#include <pthread.h>
#endif
#include <openssl/lhash.h>
#include <openssl/crypto.h>
#include <openssl/buffer.h>
#include "../../e_os.h"
#include <openssl/x509.h>
#include <openssl/ssl.h>
#include <openssl/err.h>

void CRYPTO_thread_setup(void);
void CRYPTO_thread_cleanup(void);

static void irix_locking_callback(int mode,int type,char *file,int line);
static void solaris_locking_callback(int mode,int type,char *file,int line);
static void win32_locking_callback(int mode,int type,char *file,int line);
static void pthreads_locking_callback(int mode,int type,char *file,int line);

static unsigned long irix_thread_id(void );
static unsigned long solaris_thread_id(void );
static unsigned long pthreads_thread_id(void );

/* usage:
 * CRYPTO_thread_setup();
 * application code
 * CRYPTO_thread_cleanup();
 */

#define THREAD_STACK_SIZE (16*1024)

#ifdef OPENSSL_SYS_WIN32

static HANDLE *lock_cs;

void CRYPTO_thread_setup(void)
	{
	int i;

	lock_cs=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(HANDLE));
	for (i=0; i<CRYPTO_num_locks(); i++)
		{
		lock_cs[i]=CreateMutex(NULL,FALSE,NULL);
		}

	CRYPTO_set_locking_callback((void (*)(int,int,char *,int))win32_locking_callback);
	/* id callback defined */
	return(1);
	}

static void CRYPTO_thread_cleanup(void)
	{
	int i;

	CRYPTO_set_locking_callback(NULL);
	for (i=0; i<CRYPTO_num_locks(); i++)
		CloseHandle(lock_cs[i]);
	OPENSSL_free(lock_cs);
	}

void win32_locking_callback(int mode, int type, char *file, int line)
	{
	if (mode & CRYPTO_LOCK)
		{
		WaitForSingleObject(lock_cs[type],INFINITE);
		}
	else
		{
		ReleaseMutex(lock_cs[type]);
		}
	}

#endif /* OPENSSL_SYS_WIN32 */

#ifdef SOLARIS

#define USE_MUTEX

#ifdef USE_MUTEX
static mutex_t *lock_cs;
#else
static rwlock_t *lock_cs;
#endif
static long *lock_count;

void CRYPTO_thread_setup(void)
	{
	int i;

#ifdef USE_MUTEX
	lock_cs=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(mutex_t));
#else
	lock_cs=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(rwlock_t));
#endif
	lock_count=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(long));
	for (i=0; i<CRYPTO_num_locks(); i++)
		{
		lock_count[i]=0;
#ifdef USE_MUTEX
		mutex_init(&(lock_cs[i]),USYNC_THREAD,NULL);
#else
		rwlock_init(&(lock_cs[i]),USYNC_THREAD,NULL);
#endif
		}

	CRYPTO_set_id_callback((unsigned long (*)())solaris_thread_id);
	CRYPTO_set_locking_callback((void (*)())solaris_locking_callback);
	}

void CRYPTO_thread_cleanup(void)
	{
	int i;

	CRYPTO_set_locking_callback(NULL);
	for (i=0; i<CRYPTO_num_locks(); i++)
		{
#ifdef USE_MUTEX
		mutex_destroy(&(lock_cs[i]));
#else
		rwlock_destroy(&(lock_cs[i]));
#endif
		}
	OPENSSL_free(lock_cs);
	OPENSSL_free(lock_count);
	}

void solaris_locking_callback(int mode, int type, char *file, int line)
	{
#if 0
	fprintf(stderr,"thread=%4d mode=%s lock=%s %s:%d\n",
		CRYPTO_thread_id(),
		(mode&CRYPTO_LOCK)?"l":"u",
		(type&CRYPTO_READ)?"r":"w",file,line);
#endif

#if 0
	if (CRYPTO_LOCK_SSL_CERT == type)
		fprintf(stderr,"(t,m,f,l) %ld %d %s %d\n",
			CRYPTO_thread_id(),
			mode,file,line);
#endif
	if (mode & CRYPTO_LOCK)
		{
#ifdef USE_MUTEX
		mutex_lock(&(lock_cs[type]));
#else
		if (mode & CRYPTO_READ)
			rw_rdlock(&(lock_cs[type]));
		else
			rw_wrlock(&(lock_cs[type]));
#endif
		lock_count[type]++;
		}
	else
		{
#ifdef USE_MUTEX
		mutex_unlock(&(lock_cs[type]));
#else
		rw_unlock(&(lock_cs[type]));
#endif
		}
	}

unsigned long solaris_thread_id(void)
	{
	unsigned long ret;

	ret=(unsigned long)thr_self();
	return(ret);
	}
#endif /* SOLARIS */

#ifdef IRIX
/* I don't think this works..... */

static usptr_t *arena;
static usema_t **lock_cs;

void CRYPTO_thread_setup(void)
	{
	int i;
	char filename[20];

	strcpy(filename,"/tmp/mttest.XXXXXX");
	mktemp(filename);

	usconfig(CONF_STHREADIOOFF);
	usconfig(CONF_STHREADMALLOCOFF);
	usconfig(CONF_INITUSERS,100);
	usconfig(CONF_LOCKTYPE,US_DEBUGPLUS);
	arena=usinit(filename);
	unlink(filename);

	lock_cs=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(usema_t *));
	for (i=0; i<CRYPTO_num_locks(); i++)
		{
		lock_cs[i]=usnewsema(arena,1);
		}

	CRYPTO_set_id_callback((unsigned long (*)())irix_thread_id);
	CRYPTO_set_locking_callback((void (*)())irix_locking_callback);
	}

void CRYPTO_thread_cleanup(void)
	{
	int i;

	CRYPTO_set_locking_callback(NULL);
	for (i=0; i<CRYPTO_num_locks(); i++)
		{
		char buf[10];

		sprintf(buf,"%2d:",i);
		usdumpsema(lock_cs[i],stdout,buf);
		usfreesema(lock_cs[i],arena);
		}
	OPENSSL_free(lock_cs);
	}

void irix_locking_callback(int mode, int type, char *file, int line)
	{
	if (mode & CRYPTO_LOCK)
		{
		uspsema(lock_cs[type]);
		}
	else
		{
		usvsema(lock_cs[type]);
		}
	}

unsigned long irix_thread_id(void)
	{
	unsigned long ret;

	ret=(unsigned long)getpid();
	return(ret);
	}
#endif /* IRIX */

/* Linux and a few others */
#ifdef PTHREADS

static pthread_mutex_t *lock_cs;
static long *lock_count;

void CRYPTO_thread_setup(void)
	{
	int i;

	lock_cs=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(pthread_mutex_t));
	lock_count=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(long));
	for (i=0; i<CRYPTO_num_locks(); i++)
		{
		lock_count[i]=0;
		pthread_mutex_init(&(lock_cs[i]),NULL);
		}

	CRYPTO_set_id_callback((unsigned long (*)())pthreads_thread_id);
	CRYPTO_set_locking_callback((void (*)())pthreads_locking_callback);
	}

void thread_cleanup(void)
	{
	int i;

	CRYPTO_set_locking_callback(NULL);
	for (i=0; i<CRYPTO_num_locks(); i++)
		{
		pthread_mutex_destroy(&(lock_cs[i]));
		}
	OPENSSL_free(lock_cs);
	OPENSSL_free(lock_count);
	}

void pthreads_locking_callback(int mode, int type, char *file,
	     int line)
      {
#if 0
	fprintf(stderr,"thread=%4d mode=%s lock=%s %s:%d\n",
		CRYPTO_thread_id(),
		(mode&CRYPTO_LOCK)?"l":"u",
		(type&CRYPTO_READ)?"r":"w",file,line);
#endif
#if 0
	if (CRYPTO_LOCK_SSL_CERT == type)
		fprintf(stderr,"(t,m,f,l) %ld %d %s %d\n",
		CRYPTO_thread_id(),
		mode,file,line);
#endif
	if (mode & CRYPTO_LOCK)
		{
		pthread_mutex_lock(&(lock_cs[type]));
		lock_count[type]++;
		}
	else
		{
		pthread_mutex_unlock(&(lock_cs[type]));
		}
	}

unsigned long pthreads_thread_id(void)
	{
	unsigned long ret;

	ret=(unsigned long)pthread_self();
	return(ret);
	}

#endif /* PTHREADS */

@


1.6
log
@resolve conflicts
@
text
@@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d83 1
a83 1
#include <openssl/e_os.h>
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d66 1
a66 1
#ifdef WIN32
d108 1
a108 1
#ifdef WIN32
d149 1
a149 1
#endif /* WIN32 */
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d116 1
a116 1
	lock_cs=Malloc(CRYPTO_num_locks() * sizeof(HANDLE));
d134 1
a134 1
	Free(lock_cs);
d167 1
a167 1
	lock_cs=Malloc(CRYPTO_num_locks() * sizeof(mutex_t));
d169 1
a169 1
	lock_cs=Malloc(CRYPTO_num_locks() * sizeof(rwlock_t));
d171 1
a171 1
	lock_count=Malloc(CRYPTO_num_locks() * sizeof(long));
d199 2
a200 2
	Free(lock_cs);
	Free(lock_count);
d270 1
a270 1
	lock_cs=Malloc(CRYPTO_num_locks() * sizeof(usema_t *));
d293 1
a293 1
	Free(lock_cs);
d327 2
a328 2
	lock_cs=Malloc(CRYPTO_num_locks() * sizeof(pthread_mutex_t));
	lock_count=Malloc(CRYPTO_num_locks() * sizeof(long));
d348 2
a349 2
	Free(lock_cs);
	Free(lock_count);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d77 3
d88 1
a88 1
int CRYPTO_thread_setup(void);
d102 1
a102 1
 * applicaion code
d110 1
a110 1
static HANDLE lock_cs[CRYPTO_NUM_LOCKS];
d112 1
a112 1
int CRYPTO_thread_setup(void)
d116 2
a117 1
	for (i=0; i<CRYPTO_NUM_LOCKS; i++)
d132 1
a132 1
	for (i=0; i<CRYPTO_NUM_LOCKS; i++)
d134 1
a154 1
static mutex_t lock_cs[CRYPTO_NUM_LOCKS];
d156 1
a156 1
static long lock_count[CRYPTO_NUM_LOCKS];
d158 1
a158 1
static rwlock_t lock_cs[CRYPTO_NUM_LOCKS];
d160 1
d166 7
a172 1
	for (i=0; i<CRYPTO_NUM_LOCKS; i++)
d191 1
a191 1
	for (i=0; i<CRYPTO_NUM_LOCKS; i++)
d199 2
d253 1
a253 1
static usema_t *lock_cs[CRYPTO_NUM_LOCKS];
d270 2
a271 1
	for (i=0; i<CRYPTO_NUM_LOCKS; i++)
d285 1
a285 1
	for (i=0; i<CRYPTO_NUM_LOCKS; i++)
d293 1
d320 2
a321 2
static pthread_mutex_t lock_cs[CRYPTO_NUM_LOCKS];
static long lock_count[CRYPTO_NUM_LOCKS];
d327 3
a329 1
	for (i=0; i<CRYPTO_NUM_LOCKS; i++)
d344 1
a344 1
	for (i=0; i<CRYPTO_NUM_LOCKS; i++)
d348 2
@


1.1
log
@Initial revision
@
text
@d77 7
a83 7
#include "lhash.h"
#include "crypto.h"
#include "buffer.h"
#include "e_os.h"
#include "x509.h"
#include "ssl.h"
#include "err.h"
a84 1
#ifndef NOPROTO
a96 15
#else
int CRYPOTO_thread_setup();
void CRYPTO_cleanup();

static void irix_locking_callback();
static void solaris_locking_callback();
static void win32_locking_callback();
static void pthreads_locking_callback();

static unsigned long irix_thread_id();
static unsigned long solaris_thread_id();
static unsigned long pthreads_thread_id();

#endif

d109 1
a109 1
int CRYPTO_thread_setup()
d123 1
a123 1
static void CRYPTO_thread_cleanup()
d132 1
a132 5
void win32_locking_callback(mode,type,file,line)
int mode;
int type;
char *file;
int line;
d157 1
a157 1
void CRYPTO_thread_setup()
d175 1
a175 1
void CRYPTO_thread_cleanup()
d190 1
a190 5
void solaris_locking_callback(mode,type,file,line)
int mode;
int type;
char *file;
int line;
d227 1
a227 1
unsigned long solaris_thread_id()
d242 1
a242 1
void CRYPTO_thread_setup()
d266 1
a266 1
void CRYPTO_thread_cleanup()
d281 1
a281 5
void irix_locking_callback(mode,type,file,line)
int mode;
int type;
char *file;
int line;
d293 1
a293 1
unsigned long irix_thread_id()
d308 1
a308 1
void CRYPTO_thread_setup()
d322 1
a322 1
void thread_cleanup()
d333 2
a334 5
void pthreads_locking_callback(mode,type,file,line)
int mode;
int type;
char *file;
int line;
d359 1
a359 1
unsigned long pthreads_thread_id()
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d66 1
a66 1
#ifdef OPENSSL_SYS_WIN32
d77 7
a83 10
#ifdef PTHREADS
#include <pthread.h>
#endif
#include <openssl/lhash.h>
#include <openssl/crypto.h>
#include <openssl/buffer.h>
#include <openssl/e_os.h>
#include <openssl/x509.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
d85 2
a86 1
void CRYPTO_thread_setup(void);
d98 15
d115 1
a115 1
 * application code
d121 1
a121 1
#ifdef OPENSSL_SYS_WIN32
d123 1
a123 1
static HANDLE *lock_cs;
d125 1
a125 1
void CRYPTO_thread_setup(void)
d129 1
a129 2
	lock_cs=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(HANDLE));
	for (i=0; i<CRYPTO_num_locks(); i++)
d139 1
a139 1
static void CRYPTO_thread_cleanup(void)
d144 1
a144 1
	for (i=0; i<CRYPTO_num_locks(); i++)
a145 1
	OPENSSL_free(lock_cs);
d148 5
a152 1
void win32_locking_callback(int mode, int type, char *file, int line)
d164 1
a164 1
#endif /* OPENSSL_SYS_WIN32 */
d170 1
d172 1
a172 1
static mutex_t *lock_cs;
d174 1
a174 1
static rwlock_t *lock_cs;
a175 1
static long *lock_count;
d177 1
a177 1
void CRYPTO_thread_setup(void)
d181 1
a181 7
#ifdef USE_MUTEX
	lock_cs=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(mutex_t));
#else
	lock_cs=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(rwlock_t));
#endif
	lock_count=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(long));
	for (i=0; i<CRYPTO_num_locks(); i++)
d195 1
a195 1
void CRYPTO_thread_cleanup(void)
d200 1
a200 1
	for (i=0; i<CRYPTO_num_locks(); i++)
a207 2
	OPENSSL_free(lock_cs);
	OPENSSL_free(lock_count);
d210 5
a214 1
void solaris_locking_callback(int mode, int type, char *file, int line)
d251 1
a251 1
unsigned long solaris_thread_id(void)
d264 1
a264 1
static usema_t **lock_cs;
d266 1
a266 1
void CRYPTO_thread_setup(void)
d281 1
a281 2
	lock_cs=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(usema_t *));
	for (i=0; i<CRYPTO_num_locks(); i++)
d290 1
a290 1
void CRYPTO_thread_cleanup(void)
d295 1
a295 1
	for (i=0; i<CRYPTO_num_locks(); i++)
a302 1
	OPENSSL_free(lock_cs);
d305 5
a309 1
void irix_locking_callback(int mode, int type, char *file, int line)
d321 1
a321 1
unsigned long irix_thread_id(void)
d333 2
a334 2
static pthread_mutex_t *lock_cs;
static long *lock_count;
d336 1
a336 1
void CRYPTO_thread_setup(void)
d340 1
a340 3
	lock_cs=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(pthread_mutex_t));
	lock_count=OPENSSL_malloc(CRYPTO_num_locks() * sizeof(long));
	for (i=0; i<CRYPTO_num_locks(); i++)
d350 1
a350 1
void thread_cleanup(void)
d355 1
a355 1
	for (i=0; i<CRYPTO_num_locks(); i++)
a358 2
	OPENSSL_free(lock_cs);
	OPENSSL_free(lock_count);
d361 5
a365 2
void pthreads_locking_callback(int mode, int type, char *file,
	     int line)
d390 1
a390 1
unsigned long pthreads_thread_id(void)
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d83 1
a83 1
#include "../../e_os.h"
@


