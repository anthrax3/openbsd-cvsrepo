head	1.68;
access;
symbols
	OPENBSD_6_0:1.67.0.4
	OPENBSD_6_0_BASE:1.67
	OPENBSD_5_9:1.67.0.2
	OPENBSD_5_9_BASE:1.67
	OPENBSD_5_8:1.60.0.4
	OPENBSD_5_8_BASE:1.60
	OPENBSD_5_7:1.56.0.2
	OPENBSD_5_7_BASE:1.56
	OPENBSD_5_6:1.46.0.4
	OPENBSD_5_6_BASE:1.46;
locks; strict;
comment	@# @;


1.68
date	2016.09.03.11.33.43;	author beck;	state dead;
branches;
next	1.67;
commitid	ffO8NTZyyIhwt1Pt;

1.67
date	2015.10.19.16.32.37;	author beck;	state Exp;
branches;
next	1.66;
commitid	gN6dUlgzg63Qhn8s;

1.66
date	2015.10.02.15.04.45;	author beck;	state Exp;
branches;
next	1.65;
commitid	qCopm45l75mxQGLg;

1.65
date	2015.09.14.01.45.03;	author doug;	state Exp;
branches;
next	1.64;
commitid	WI3ltGMbnAaZXz3O;

1.64
date	2015.09.13.23.36.21;	author doug;	state Exp;
branches;
next	1.63;
commitid	4CxCgJZcnC9PKUvF;

1.63
date	2015.09.13.21.09.56;	author doug;	state Exp;
branches;
next	1.62;
commitid	e818W60lrMrFrzEk;

1.62
date	2015.09.13.12.27.14;	author jsing;	state Exp;
branches;
next	1.61;
commitid	EPSvmNMDmUZ8dAFA;

1.61
date	2015.09.13.12.13.02;	author jsing;	state Exp;
branches;
next	1.60;
commitid	h1X8xrCxExs9lxeR;

1.60
date	2015.07.19.22.34.27;	author doug;	state Exp;
branches;
next	1.59;
commitid	ayrDDFJT2T84Q0hD;

1.59
date	2015.06.27.22.42.02;	author doug;	state Exp;
branches;
next	1.58;
commitid	SCorSKxSjA70Bnvw;

1.58
date	2015.06.20.01.07.24;	author doug;	state Exp;
branches;
next	1.57;
commitid	odUD1eZ4N02tuzg5;

1.57
date	2015.04.11.16.16.15;	author deraadt;	state Exp;
branches;
next	1.56;
commitid	lnb130mvt8k6weCi;

1.56
date	2015.02.10.13.28.17;	author jsing;	state Exp;
branches;
next	1.55;
commitid	b6QwIkxyvUWeF5XG;

1.55
date	2015.02.10.11.37.58;	author jsing;	state Exp;
branches;
next	1.54;
commitid	rCmxXH1sH9WpoCzh;

1.54
date	2015.02.10.11.16.33;	author jsing;	state Exp;
branches;
next	1.53;
commitid	u8KgFcebA5Hs8Hgb;

1.53
date	2015.02.07.03.23.05;	author jsing;	state Exp;
branches;
next	1.52;
commitid	kdE25yNUvpBCs5RV;

1.52
date	2015.01.22.09.06.39;	author reyk;	state Exp;
branches;
next	1.51;
commitid	ifoh2yhyhj92FCSg;

1.51
date	2014.12.03.22.14.38;	author bcook;	state Exp;
branches;
next	1.50;
commitid	eyhmVH3WXomJUIFD;

1.50
date	2014.11.20.19.19.09;	author miod;	state Exp;
branches;
next	1.49;
commitid	O1PXuAwbFwZfmckf;

1.49
date	2014.11.18.05.31.47;	author miod;	state Exp;
branches;
next	1.48;
commitid	sTzQZgKpnCYes5bE;

1.48
date	2014.11.17.20.31.20;	author miod;	state Exp;
branches;
next	1.47;
commitid	ymruTYR6WPNRDFtT;

1.47
date	2014.11.09.19.17.11;	author miod;	state Exp;
branches;
next	1.46;
commitid	QrgOG8zcUIADOfFd;

1.46
date	2014.07.28.17.57.18;	author tedu;	state Exp;
branches;
next	1.45;
commitid	99MpI3E4JwwZj7Kn;

1.45
date	2014.07.12.20.11.45;	author miod;	state Exp;
branches;
next	1.44;
commitid	RVnt9Q0PYRvHzNbM;

1.44
date	2014.07.11.14.01.38;	author tedu;	state Exp;
branches;
next	1.43;
commitid	A0itYQ7rbGDw1qTV;

1.43
date	2014.07.09.08.44.53;	author miod;	state Exp;
branches;
next	1.42;
commitid	KbL8PrMGlaveisds;

1.42
date	2014.07.08.16.07.37;	author miod;	state Exp;
branches;
next	1.41;
commitid	3u6EdIzCgV6kbcq9;

1.41
date	2014.06.24.19.31.50;	author miod;	state Exp;
branches;
next	1.40;
commitid	OUHEvv0Yogw78Iii;

1.40
date	2014.06.11.15.08.41;	author deraadt;	state Exp;
branches;
next	1.39;
commitid	0qgtzi3un7XBy0V0;

1.39
date	2014.06.10.16.15.19;	author deraadt;	state Exp;
branches;
next	1.38;
commitid	i7ofdog6OmjCcKaT;

1.38
date	2014.06.02.15.08.38;	author deraadt;	state Exp;
branches;
next	1.37;
commitid	tWDKJg0nrCJLQhsu;

1.37
date	2014.05.25.17.29.51;	author tedu;	state Exp;
branches;
next	1.36;

1.36
date	2014.05.16.14.24.36;	author jsing;	state Exp;
branches;
next	1.35;

1.35
date	2014.05.15.15.09.01;	author jsing;	state Exp;
branches;
next	1.34;

1.34
date	2014.05.15.13.53.46;	author jsing;	state Exp;
branches;
next	1.33;

1.33
date	2014.05.14.14.46.35;	author jsing;	state Exp;
branches;
next	1.32;

1.32
date	2014.05.12.19.14.14;	author miod;	state Exp;
branches;
next	1.31;

1.31
date	2014.05.04.17.12.19;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2014.05.01.17.08.57;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2014.05.01.13.15.22;	author jsing;	state Exp;
branches;
next	1.28;

1.28
date	2014.04.27.16.19.04;	author jsing;	state Exp;
branches;
next	1.27;

1.27
date	2014.04.23.05.13.57;	author beck;	state Exp;
branches;
next	1.26;

1.26
date	2014.04.18.19.41.21;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2014.04.18.17.32.31;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2014.04.18.13.19.03;	author tedu;	state Exp;
branches;
next	1.23;

1.23
date	2014.04.18.13.13.50;	author tedu;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.17.22.06.19;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.17.20.43.42;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.17.18.16.45;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.17.18.11.46;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.17.16.17.41;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.16.19.13.01;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.16.18.47.51;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.16.04.31.32;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.16.03.24.53;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.15.22.44.15;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.15.20.49.00;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.15.20.19.55;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.15.20.13.07;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.15.17.46.16;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.15.17.20.09;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.15.16.52.50;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.14.04.27.50;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.13.23.50.03;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.13.16.03.30;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.13.15.49.47;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.11.22.51.53;	author miod;	state Exp;
branches;
next	;


desc
@@


1.68
log
@Remove the libcrypto/crypto directory
@
text
@# $OpenBSD: Makefile,v 1.67 2015/10/19 16:32:37 beck Exp $

LIB=	crypto

SSL_SRC=	${.CURDIR}/../../libssl/src
LCRYPTO_SRC=	${SSL_SRC}/crypto

CFLAGS+= -Wall -Wundef -Werror

.include <bsd.own.mk>		# for 'NOPIC' definition
.if !defined(NOPIC)
CFLAGS+= -DDSO_DLFCN -DHAVE_DLFCN_H -DHAVE_FUNOPEN
.endif

.if ${MACHINE_ARCH} == "sparc"
PICFLAG=-fPIC
.endif

CFLAGS+= -DLIBRESSL_INTERNAL
CFLAGS+= -DTERMIOS
# Hardware engines
CFLAGS+= -DOPENSSL_NO_HW_PADLOCK # XXX enable this?

CFLAGS+= -I${SSL_SRC}
CFLAGS+= -I${LCRYPTO_SRC}
CFLAGS+= -I${LCRYPTO_SRC}/modes -I${LCRYPTO_SRC}/asn1 -I${LCRYPTO_SRC}/evp

# crypto/
SRCS+= cryptlib.c malloc-wrapper.c mem_dbg.c cversion.c ex_data.c cpt_err.c
SRCS+= o_time.c o_str.c o_init.c
SRCS+= mem_clr.c

# aes/
SRCS+= aes_misc.c aes_ecb.c aes_cfb.c aes_ofb.c
SRCS+= aes_ctr.c aes_ige.c aes_wrap.c

# asn1/
SRCS+= a_object.c a_bitstr.c a_time.c a_int.c a_octet.c
SRCS+= a_print.c a_type.c a_dup.c a_d2i_fp.c a_i2d_fp.c
SRCS+= a_enum.c a_utf8.c a_sign.c a_digest.c a_verify.c a_mbstr.c a_strex.c
SRCS+= x_algor.c x_val.c x_pubkey.c x_sig.c x_req.c x_attrib.c x_bignum.c
SRCS+= x_long.c x_name.c x_x509.c x_x509a.c x_crl.c x_info.c x_spki.c nsseq.c
SRCS+= x_nx509.c d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c
SRCS+= t_req.c t_x509.c t_x509a.c t_crl.c t_pkey.c t_spki.c t_bitst.c
SRCS+= tasn_new.c tasn_fre.c tasn_enc.c tasn_dec.c tasn_utl.c tasn_typ.c
SRCS+= tasn_prn.c ameth_lib.c
SRCS+= f_int.c f_string.c n_pkey.c
SRCS+= f_enum.c x_pkey.c a_bool.c x_exten.c bio_asn1.c bio_ndef.c asn_mime.c
SRCS+= asn1_gen.c asn1_par.c asn1_lib.c asn1_err.c a_bytes.c a_strnid.c
SRCS+= evp_asn1.c asn_pack.c p5_pbe.c p5_pbev2.c p8_pkey.c asn_moid.c
SRCS+= a_set.c
SRCS+= a_time_tm.c

# bf/
SRCS+= bf_skey.c bf_ecb.c bf_cfb64.c bf_ofb64.c

# bio/
SRCS+= bio_lib.c bio_cb.c bio_err.c
SRCS+= bss_mem.c bss_null.c bss_fd.c
SRCS+= bss_file.c bss_sock.c bss_conn.c
SRCS+= bf_null.c bf_buff.c b_print.c b_dump.c
SRCS+= b_posix.c b_sock.c bss_acpt.c bf_nbio.c bss_log.c bss_bio.c
SRCS+= bss_dgram.c

# bn/
SRCS+= bn_add.c bn_div.c bn_exp.c bn_lib.c bn_ctx.c bn_mul.c bn_mod.c
SRCS+= bn_print.c bn_rand.c bn_shift.c bn_word.c bn_blind.c
SRCS+= bn_kron.c bn_sqrt.c bn_gcd.c bn_prime.c bn_err.c bn_sqr.c
SRCS+= bn_recp.c bn_mont.c bn_mpi.c bn_exp2.c bn_gf2m.c bn_nist.c
SRCS+= bn_depr.c bn_const.c bn_x931p.c

# buffer/
SRCS+= buffer.c buf_err.c buf_str.c

# camellia/
SRCS+= cmll_cfb.c cmll_ctr.c cmll_ecb.c cmll_ofb.c

# cast/
SRCS+= c_skey.c c_ecb.c c_enc.c c_cfb64.c c_ofb64.c

# chacha/
SRCS+= chacha.c

# cmac/
SRCS+= cmac.c cm_ameth.c cm_pmeth.c

# cms/
#SRCS+= cms_lib.c cms_asn1.c cms_att.c cms_io.c cms_smime.c cms_err.c
#SRCS+= cms_sd.c cms_dd.c cms_cd.c cms_env.c cms_enc.c cms_ess.c
#SRCS+= cms_pwri.c

# comp/
SRCS+= comp_lib.c comp_err.c c_rle.c c_zlib.c

# conf/
SRCS+= conf_err.c conf_lib.c conf_api.c conf_def.c conf_mod.c
SRCS+= conf_mall.c conf_sap.c

# des/
SRCS+= cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c
SRCS+= ecb3_enc.c ecb_enc.c  enc_read.c enc_writ.c
SRCS+= fcrypt.c ofb64enc.c ofb_enc.c  pcbc_enc.c
SRCS+= qud_cksm.c rand_key.c set_key.c xcbc_enc.c
SRCS+= str2key.c  cfb64ede.c ofb64ede.c ede_cbcm_enc.c

# dh/
SRCS+= dh_asn1.c dh_gen.c dh_key.c dh_lib.c dh_check.c dh_err.c dh_depr.c
SRCS+= dh_ameth.c dh_pmeth.c dh_prn.c

# dsa/
SRCS+= dsa_gen.c dsa_key.c dsa_lib.c dsa_asn1.c dsa_vrf.c dsa_sign.c
SRCS+= dsa_err.c dsa_ossl.c dsa_depr.c dsa_ameth.c dsa_pmeth.c dsa_prn.c

# dso/
SRCS+= dso_dlfcn.c dso_err.c dso_lib.c dso_null.c
SRCS+= dso_openssl.c

# ec/
SRCS+= ec_lib.c ecp_smpl.c ecp_mont.c ecp_nist.c ec_cvt.c ec_mult.c
SRCS+= ec_err.c ec_curve.c ec_check.c ec_print.c ec_asn1.c ec_key.c
SRCS+= ec2_smpl.c ec2_mult.c ec_ameth.c ec_pmeth.c eck_prn.c
SRCS+= ecp_nistp224.c ecp_nistp256.c ecp_nistp521.c ecp_nistputil.c
SRCS+= ecp_oct.c ec2_oct.c ec_oct.c

# ecdh/
SRCS+= ech_lib.c ech_key.c ech_err.c

# ecdsa/
SRCS+= ecs_lib.c ecs_asn1.c ecs_ossl.c ecs_sign.c ecs_vrf.c ecs_err.c

# engine/
SRCS+= eng_err.c eng_lib.c eng_list.c eng_init.c eng_ctrl.c
SRCS+= eng_table.c eng_pkey.c eng_fat.c eng_all.c
SRCS+= tb_rsa.c tb_dsa.c tb_ecdsa.c tb_dh.c tb_ecdh.c tb_rand.c tb_store.c
SRCS+= tb_cipher.c tb_digest.c tb_pkmeth.c tb_asnmth.c
SRCS+= eng_openssl.c eng_cnf.c eng_dyn.c
# XXX unnecessary? handled in EVP now...
# SRCS+= eng_aesni.c # local addition

# err/
SRCS+= err.c err_all.c err_prn.c

# evp/
SRCS+= encode.c digest.c evp_enc.c evp_key.c
SRCS+= e_des.c e_bf.c e_idea.c e_des3.c e_camellia.c
SRCS+= e_rc4.c e_aes.c names.c
SRCS+= e_xcbc_d.c e_rc2.c e_cast.c
SRCS+= m_null.c m_md4.c m_md5.c m_sha1.c m_wp.c
SRCS+= m_dss.c m_dss1.c m_ripemd.c m_ecdsa.c
SRCS+= p_open.c p_seal.c p_sign.c p_verify.c p_lib.c p_enc.c p_dec.c
SRCS+= bio_md.c bio_b64.c bio_enc.c evp_err.c e_null.c
SRCS+= c_all.c evp_lib.c
SRCS+= evp_pkey.c evp_pbe.c p5_crpt.c p5_crpt2.c
SRCS+= e_old.c pmeth_lib.c pmeth_fn.c pmeth_gn.c m_sigver.c
SRCS+= e_aes_cbc_hmac_sha1.c e_rc4_hmac_md5.c
SRCS+= e_chacha.c evp_aead.c e_chacha20poly1305.c
SRCS+= e_gost2814789.c m_gost2814789.c m_gostr341194.c m_streebog.c

# gost/
SRCS+= gost2814789.c gost89_keywrap.c gost89_params.c gost89imit_ameth.c
SRCS+= gost89imit_pmeth.c gost_asn1.c gost_err.c gostr341001.c
SRCS+= gostr341001_ameth.c gostr341001_key.c gostr341001_params.c
SRCS+= gostr341001_pmeth.c gostr341194.c streebog.c

# hmac/
SRCS+= hmac.c hm_ameth.c hm_pmeth.c

# idea/
SRCS+= i_cbc.c i_cfb64.c i_ofb64.c i_ecb.c i_skey.c

# krb5/
SRCS+= krb5_asn.c

# lhash/
SRCS+= lhash.c lh_stats.c

# md4/
SRCS+= md4_dgst.c md4_one.c

# md5/
SRCS+= md5_dgst.c md5_one.c

# modes/
SRCS+= cbc128.c ctr128.c cts128.c cfb128.c ofb128.c gcm128.c ccm128.c xts128.c

# objects/
SRCS+= o_names.c obj_dat.c obj_lib.c obj_err.c obj_xref.c

# ocsp/
SRCS+= ocsp_asn.c ocsp_ext.c ocsp_ht.c ocsp_lib.c ocsp_cl.c
SRCS+= ocsp_srv.c ocsp_prn.c ocsp_vfy.c ocsp_err.c

# pem/
SRCS+= pem_sign.c pem_seal.c pem_info.c pem_lib.c pem_all.c pem_err.c
SRCS+= pem_x509.c pem_xaux.c pem_oth.c pem_pk8.c pem_pkey.c pvkfmt.c

# pkcs12/
SRCS+= p12_add.c p12_asn.c p12_attr.c p12_crpt.c p12_crt.c p12_decr.c
SRCS+= p12_init.c p12_key.c p12_kiss.c p12_mutl.c
SRCS+= p12_utl.c p12_npas.c pk12err.c p12_p8d.c p12_p8e.c

# pkcs7/
SRCS+= pk7_asn1.c pk7_lib.c pkcs7err.c pk7_doit.c pk7_smime.c pk7_attr.c
SRCS+= pk7_mime.c bio_pk7.c

# poly1305/
SRCS+= poly1305.c

# rand/
SRCS+= randfile.c rand_lib.c rand_err.c

# rc2/
SRCS+= rc2_ecb.c rc2_skey.c rc2_cbc.c rc2cfb64.c rc2ofb64.c

# ripemd/
SRCS+= rmd_dgst.c rmd_one.c

# rsa/
SRCS+= rsa_eay.c rsa_gen.c rsa_lib.c rsa_sign.c rsa_saos.c rsa_err.c
SRCS+= rsa_pk1.c rsa_ssl.c rsa_none.c rsa_oaep.c rsa_chk.c
SRCS+= rsa_pss.c rsa_x931.c rsa_asn1.c rsa_depr.c rsa_ameth.c rsa_prn.c
SRCS+= rsa_pmeth.c rsa_crpt.c

# sha/
SRCS+= sha1dgst.c sha1_one.c sha256.c sha512.c

# stack/
SRCS+= stack.c

# ts/
SRCS+= ts_err.c ts_req_utils.c ts_req_print.c ts_rsp_utils.c ts_rsp_print.c
SRCS+= ts_rsp_sign.c ts_rsp_verify.c ts_verify_ctx.c ts_lib.c ts_conf.c
SRCS+= ts_asn1.c

# txt_db/
SRCS+=txt_db.c

# ui/
SRCS+= ui_err.c ui_lib.c ui_openssl.c ui_util.c

# whrlpool/
SRCS+= wp_dgst.c

# x509/
SRCS+= x509_def.c x509_d2.c x509_r2x.c x509_cmp.c
SRCS+= x509_obj.c x509_req.c x509spki.c x509_vfy.c
SRCS+= x509_set.c x509cset.c x509rset.c x509_err.c
SRCS+= x509name.c x509_v3.c x509_ext.c x509_att.c
SRCS+= x509type.c x509_lu.c x_all.c x509_txt.c
SRCS+= x509_trs.c by_file.c by_dir.c by_mem.c x509_vpm.c

# x509v3/
SRCS+= v3_bcons.c v3_bitst.c v3_conf.c v3_extku.c v3_ia5.c v3_lib.c
SRCS+= v3_prn.c v3_utl.c v3err.c v3_genn.c v3_alt.c v3_skey.c v3_akey.c v3_pku.c
SRCS+= v3_int.c v3_enum.c v3_sxnet.c v3_cpols.c v3_crld.c v3_purp.c v3_info.c
SRCS+= v3_ocsp.c v3_akeya.c v3_pmaps.c v3_pcons.c v3_ncons.c v3_pcia.c v3_pci.c
SRCS+= pcy_cache.c pcy_node.c pcy_data.c pcy_map.c pcy_tree.c pcy_lib.c

.PATH:	${.CURDIR}/arch/${MACHINE_CPU} \
	${LCRYPTO_SRC} \
	${LCRYPTO_SRC}/aes \
	${LCRYPTO_SRC}/asn1 \
	${LCRYPTO_SRC}/bf \
	${LCRYPTO_SRC}/bio \
	${LCRYPTO_SRC}/bn \
	${LCRYPTO_SRC}/bn/asm \
	${LCRYPTO_SRC}/buffer \
	${LCRYPTO_SRC}/camellia \
	${LCRYPTO_SRC}/cast \
	${LCRYPTO_SRC}/chacha \
	${LCRYPTO_SRC}/cmac \
	${LCRYPTO_SRC}/cms \
	${LCRYPTO_SRC}/comp \
	${LCRYPTO_SRC}/conf \
	${LCRYPTO_SRC}/des \
	${LCRYPTO_SRC}/dh \
	${LCRYPTO_SRC}/dsa \
	${LCRYPTO_SRC}/dso \
	${LCRYPTO_SRC}/ec \
	${LCRYPTO_SRC}/ecdh \
	${LCRYPTO_SRC}/ecdsa \
	${LCRYPTO_SRC}/engine \
	${LCRYPTO_SRC}/err \
	${LCRYPTO_SRC}/evp \
	${LCRYPTO_SRC}/gost \
	${LCRYPTO_SRC}/hmac \
	${LCRYPTO_SRC}/idea \
	${LCRYPTO_SRC}/krb5 \
	${LCRYPTO_SRC}/lhash \
	${LCRYPTO_SRC}/md4 \
	${LCRYPTO_SRC}/md5 \
	${LCRYPTO_SRC}/modes \
	${LCRYPTO_SRC}/objects \
	${LCRYPTO_SRC}/ocsp \
	${LCRYPTO_SRC}/pem \
	${LCRYPTO_SRC}/perlasm \
	${LCRYPTO_SRC}/pkcs12 \
	${LCRYPTO_SRC}/pkcs7 \
	${LCRYPTO_SRC}/poly1305 \
	${LCRYPTO_SRC}/rand \
	${LCRYPTO_SRC}/rc2 \
	${LCRYPTO_SRC}/rc4 \
	${LCRYPTO_SRC}/ripemd \
	${LCRYPTO_SRC}/rsa \
	${LCRYPTO_SRC}/sha \
	${LCRYPTO_SRC}/stack \
	${LCRYPTO_SRC}/threads \
	${LCRYPTO_SRC}/ts \
	${LCRYPTO_SRC}/txt_db \
	${LCRYPTO_SRC}/ui \
	${LCRYPTO_SRC}/whrlpool \
	${LCRYPTO_SRC}/x509 \
	${LCRYPTO_SRC}/x509v3

HDRS=\
	crypto/aes/aes.h \
	crypto/asn1/asn1.h \
	crypto/asn1/asn1_mac.h \
	crypto/asn1/asn1t.h \
	crypto/bf/blowfish.h \
	crypto/bio/bio.h \
	crypto/bn/bn.h \
	crypto/buffer/buffer.h \
	crypto/camellia/camellia.h \
	crypto/cast/cast.h \
	crypto/chacha/chacha.h \
	crypto/cmac/cmac.h \
	crypto/cms/cms.h \
	crypto/comp/comp.h \
	crypto/conf/conf.h \
	crypto/conf/conf_api.h \
	crypto/crypto.h \
	crypto/des/des.h \
	crypto/dh/dh.h \
	crypto/dsa/dsa.h \
	crypto/dso/dso.h \
	crypto/ec/ec.h \
	crypto/ecdh/ecdh.h \
	crypto/ecdsa/ecdsa.h \
	crypto/engine/engine.h \
	crypto/err/err.h \
	crypto/evp/evp.h \
	crypto/gost/gost.h \
	crypto/hmac/hmac.h \
	crypto/idea/idea.h \
	crypto/krb5/krb5_asn.h \
	crypto/lhash/lhash.h \
	crypto/md4/md4.h \
	crypto/md5/md5.h \
	crypto/modes/modes.h \
	crypto/objects/objects.h \
	crypto/ocsp/ocsp.h \
	crypto/opensslfeatures.h \
	crypto/opensslv.h \
	crypto/ossl_typ.h \
	crypto/pem/pem.h \
	crypto/pem/pem2.h \
	crypto/pkcs12/pkcs12.h \
	crypto/pkcs7/pkcs7.h \
	crypto/poly1305/poly1305.h \
	crypto/rand/rand.h \
	crypto/rc2/rc2.h \
	crypto/rc4/rc4.h \
	crypto/ripemd/ripemd.h \
	crypto/rsa/rsa.h \
	crypto/sha/sha.h \
	crypto/stack/safestack.h \
	crypto/stack/stack.h \
	crypto/ts/ts.h \
	crypto/txt_db/txt_db.h \
	crypto/ui/ui.h \
	crypto/ui/ui_compat.h \
	crypto/whrlpool/whrlpool.h \
	crypto/x509/x509.h \
	crypto/x509/x509_vfy.h \
	crypto/x509v3/x509v3.h

HDRS_GEN=\
	${.CURDIR}/arch/${MACHINE_CPU}/opensslconf.h \
	${.OBJDIR}/obj_mac.h

includes: obj_mac.h
	@@test -d ${DESTDIR}/usr/include/openssl || \
	    mkdir ${DESTDIR}/usr/include/openssl
	@@cd ${SSL_SRC}; \
	for i in $(HDRS); do \
	    j="cmp -s $$i ${DESTDIR}/usr/include/openssl/`basename $$i` || \
	    ${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m 444 $$i\
		${DESTDIR}/usr/include/openssl"; \
	    echo $$j; \
	    eval "$$j"; \
	done; \
	for i in $(HDRS_GEN); do \
	    j="cmp -s $$i ${DESTDIR}/usr/include/openssl/`basename $$i` || \
	    ${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m 444 $$i\
		${DESTDIR}/usr/include/openssl"; \
	    echo $$j; \
	    eval "$$j"; \
	done;

# generated
CFLAGS+= -I${.OBJDIR}

GENERATED=obj_mac.h obj_dat.h
CLEANFILES=${GENERATED} obj_mac.num.tmp
SSL_OBJECTS=${SSL_SRC}/crypto/objects

obj_mac.h: ${SSL_OBJECTS}/objects.h ${SSL_OBJECTS}/obj_mac.num ${SSL_OBJECTS}/objects.txt
	cat ${SSL_OBJECTS}/obj_mac.num > obj_mac.num.tmp
	/usr/bin/perl ${SSL_OBJECTS}/objects.pl ${SSL_OBJECTS}/objects.txt obj_mac.num.tmp obj_mac.h

obj_dat.h: obj_mac.h
	/usr/bin/perl ${SSL_OBJECTS}/obj_dat.pl obj_mac.h obj_dat.h

.if exists (${.CURDIR}/arch/${MACHINE_CPU}/Makefile.inc)
.include "${.CURDIR}/arch/${MACHINE_CPU}/Makefile.inc"
.else
CFLAGS+=-DOPENSSL_NO_ASM
SRCS+= aes_core.c aes_cbc.c
SRCS+= bf_enc.c
SRCS+= bn_asm.c
SRCS+= camellia.c cmll_cbc.c cmll_misc.c
SRCS+= des_enc.c fcrypt_b.c
SRCS+= rc4_enc.c rc4_skey.c
SRCS+= wp_block.c
.endif

all beforedepend: ${GENERATED}

.include <bsd.lib.mk>
@


1.67
log
@Stop supporing "legcay" time formats that OpenSSL supports. Rewrite the
utctime and gentime wrappers accordingly. Along with some other cleanup.
this also removes the need for timegm.
ok bcook@@ sthen@@ jsing@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.66 2015/10/02 15:04:45 beck Exp $
@


1.66
log
@Flense the greasy black guts of unreadble string parsing code out of three areas
in asn1 and x509 code, all dealing with an ASN1_TIME. This brings the parsing
together in one function that converts into a struct tm. While we are at it this
also brings us into conformance with RFC 5280 for times allowed in an X509 cert,
as OpenSSL is very liberal with what it allows.
input and fixes from deraadt@@ jsing@@ guethther@@ and others.
ok krw@@, guenther@@, jsing@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.65 2015/09/14 01:45:03 doug Exp $
d38 1
a38 1
SRCS+= a_object.c a_bitstr.c a_utctm.c a_gentm.c a_time.c a_int.c a_octet.c
@


1.65
log
@Temporarily revive MD4 for MS CHAP support.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.64 2015/09/13 23:36:21 doug Exp $
d52 1
@


1.64
log
@Remove MD4 support from LibreSSL.

MD4 should have been removed a long time ago.  Also, RFC 6150 moved it to
historic in 2011.  Rides the major crank from removing SHA-0.

Discussed with many including beck@@, millert@@, djm@@, sthen@@
ok jsing@@, input + ok bcook@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.63 2015/09/13 21:09:56 doug Exp $
d147 1
a147 1
SRCS+= m_null.c m_md5.c m_sha1.c m_wp.c
d176 3
d289 1
d347 1
@


1.63
log
@Remove SHA-0 support.

SHA-0 was withdrawn shortly after publication 20 years ago and replaced
with SHA-1.  This will require a major crank.

ok bcook@@, jsing@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.62 2015/09/13 12:27:14 jsing Exp $
d147 1
a147 1
SRCS+= m_null.c m_md4.c m_md5.c m_sha1.c m_wp.c
a175 3
# md4/
SRCS+= md4_dgst.c md4_one.c

a285 1
	${LCRYPTO_SRC}/md4 \
a342 1
	crypto/md4/md4.h \
@


1.62
log
@Merge ech_ossl.c into ech_key.c - not much point having one file with a
four line function and a tonne of license text.

ok beck@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.61 2015/09/13 12:13:02 jsing Exp $
d147 1
a147 1
SRCS+= m_null.c m_md4.c m_md5.c m_sha.c m_sha1.c m_wp.c
d224 1
a224 1
SRCS+= sha_dgst.c sha1dgst.c sha_one.c sha1_one.c sha256.c sha512.c
@


1.61
log
@Nuke openssl/e_os2.h, since nothing should be using it.

ok deraadt@@ "hurray!  finally!" miod@@ "Yay!" sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.60 2015/07/19 22:34:27 doug Exp $
d125 1
a125 1
SRCS+= ech_lib.c ech_ossl.c ech_key.c ech_err.c
@


1.60
log
@Remove OpenSSL engine RSAX.

OpenSSL stopped building it last year and removed it this year.
Based on OpenSSL commit c436e05bdc7f49985a750df64122c960240b3ae1.

Also cranked major version in libcrypto, libssl and libtls.

"fine with me" bcook@@ miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.59 2015/06/27 22:42:02 doug Exp $
a314 1
	e_os2.h \
@


1.59
log
@Fix pointer to unsigned long conversion.

bcook@@ notes that this check really only impacted 64-bit Windows.  Also,
changed the check to be unsigned for consistency.

ok bcook@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.58 2015/06/20 01:07:24 doug Exp $
a135 1
SRCS+= eng_rsax.c
@


1.58
log
@Remove obsolete MDC-2DES from libcrypto.

ok deraadt@@ jsing@@ miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.57 2015/04/11 16:16:15 deraadt Exp $
d8 1
a8 1
CFLAGS+= -Wall -Werror
@


1.57
log
@Send OPENSSL_issetugid() straight to hell, no final cigarette.

The issetugid() API is supposed to make a strong promise where "0
means it is safe to look at the environment".  Way back in the past
someone on the OpenSSL team responded to the environment access danger
by creating a wrapper called OPENSSL_issetugid, and went to use it a
number of places.  However, by default on systems lacking true
issetugid(), OPENSSL_issetugid returns 0.  0 indicating safely.  False
safety.  Which means OPENSSL_issetugid() fails to make any sort of
promise about safety, in fact it is just the opposite.

Can you believe the OpenSSL team?

This nastiness was noticed over the years, however noone could gain traction
and get it fixed in OpenSSL.  Also see a paragraph about this in
http://www.tedunangst.com/flak/post/worst-common-denominator-programming

ok jsing
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.56 2015/02/10 13:28:17 jsing Exp $
d149 1
a149 1
SRCS+= m_dss.c m_dss1.c m_mdc2.c m_ripemd.c m_ecdsa.c
a182 3
# mdc2/
SRCS+= mdc2dgst.c mdc2_one.c

a291 1
	${LCRYPTO_SRC}/mdc2 \
a350 1
	crypto/mdc2/mdc2.h \
@


1.56
log
@unifdef OPENSSL_NO_RFC3779 - this is currently disabled and unlikely to
be enabled, mostly since people use SANs instead.

ok beck@@ guenther@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.55 2015/02/10 11:37:58 jsing Exp $
d30 1
a30 1
SRCS+= uid.c o_time.c o_str.c o_init.c
@


1.55
log
@Remove RC5 code - this is not currently enabled and is not likely to ever
be enabled.

Removes one symbol from libcrypto, however there is no ABI change.

ok beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.54 2015/02/10 11:16:33 jsing Exp $
a260 1
SRCS+= v3_asid.c v3_addr.c
@


1.54
log
@Remove crypto/store - part of which is "currently highly experimental".
This code is not compiled in and OPENSSL_NO_STORE is already defined in
opensslfeatures.h. No symbol removal for libcrypto.

ok beck@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.53 2015/02/07 03:23:05 jsing Exp $
d147 1
a147 1
SRCS+= e_xcbc_d.c e_rc2.c e_cast.c e_rc5.c
a217 3
# rc5/
#SRCS+= rc5_skey.c rc5_ecb.c rc5cfb64.c rc5ofb64.c

a307 1
	${LCRYPTO_SRC}/rc5 \
a370 1
	crypto/rc5/rc5.h \
a431 1
#SRCS+= rc5_enc.c
@


1.53
log
@Combine c_allc.c and c_alld.c into c_all.c - there is not much point having
this split across files, especially when two of them have less code than
license text.

ok bcook@@ beck@@ doug@@ miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.52 2015/01/22 09:06:39 reyk Exp $
a235 3
# store/
#SRCS+= str_err.c str_lib.c str_meth.c str_mem.c

a315 1
	${LCRYPTO_SRC}/store \
a380 1
	crypto/store/store.h \
@


1.52
log
@Add X509_STORE_load_mem() to load certificates from a memory buffer
instead of disk.  OpenSSL didn't provide a built-in API from loading
certificates in a chroot'ed process that doesn't have direct access to
the files.  X509_STORE_load_mem() provides a new backend that will be
used by libssl and libtls to implement such privsep-friendly
functionality.

Adopted for LibreSSL based on older code from relayd (by pyr@@ and myself)
With feedback and OK bluhm@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.51 2014/12/03 22:14:38 bcook Exp $
d152 1
a152 1
SRCS+= c_all.c c_allc.c c_alld.c evp_lib.c
@


1.51
log
@Move Windows OS-specific functions to make porting easier.

Several functions that need to be redefined for a Windows port are right
in the middle of other code that is relatively portable. This patch
isolates the functions that need Windows-specific implementations so
they can be built conditionally in the portable tree.

ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.50 2014/11/20 19:19:09 miod Exp $
d259 1
a259 1
SRCS+= x509_trs.c by_file.c by_dir.c x509_vpm.c
@


1.50
log
@Oops, make sure camellia is compiled on platforms without an arch-specific
Makefile.inc (i.e. landisk and m88k)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.49 2014/11/18 05:31:47 miod Exp $
d61 1
a61 1
SRCS+= b_sock.c bss_acpt.c bf_nbio.c bss_log.c bss_bio.c
d99 1
a99 1
SRCS+= cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c 
d436 1
a436 1
SRCS+= aes_core.c aes_cbc.c 
d442 1
a442 1
#SRCS+= rc5_enc.c 
@


1.49
log
@Enable the build of GOST routines in libcrypto. Riding upon the Cammelia
libcrypto minor bump.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.48 2014/11/17 20:31:20 miod Exp $
d439 1
@


1.48
log
@Add the Cammelia cipher to libcrypto.

There used to be a strong reluctance to provide this cipher in LibreSSL in the
past, because the licence terms under which Cammelia was released by NTT were
free-but-not-in-the-corners, by restricting the right to modify the source
code, as well retaining the right to enforce their patents against anyone
in the future.

However, as stated in http://www.ntt.co.jp/news/news06e/0604/060413a.html ,
NTT changed its mind and made this code truly free. We only wish there had
been more visibility of this, for we could have had enabled Cammelia
earlier (-:

Licence change noticed by deraadt@@. General agreement from the usual LibreSSL
suspects.

Crank libcrypto.so minor version due to the added symbols.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.47 2014/11/09 19:17:11 miod Exp $
d157 1
a157 1
#SRCS+= e_gost2814789.c m_gost2814789.c m_gostr341194.c m_streebog.c
d160 4
a163 4
#SRCS+= gost2814789.c gost89_keywrap.c gost89_params.c gost89imit_ameth.c
#SRCS+= gost89imit_pmeth.c gost_asn1.c gost_err.c gostr341001.c
#SRCS+= gostr341001_ameth.c gostr341001_key.c gostr341001_params.c
#SRCS+= gostr341001_pmeth.c gostr341194.c streebog.c
@


1.47
log
@GOST crypto algorithms (well, most of them), ported from the removed GOST
engine to regular EVP citizens, contributed by Dmitry Eremin-Solenikov;
libcrypto bits only for now.

This is a verbatim import of Dmitry's work, and does not compile in this
state; the forthcoming commits will address these issues.

None of the GOST code is enabled in libcrypto yet, for it still gets
compiled with OPENSSL_NO_GOST defined. However, the public header gost.h
will be installed.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.46 2014/07/28 17:57:18 tedu Exp $
d75 1
a75 1
#SRCS+= cmll_ecb.c cmll_ofb.c cmll_cfb.c cmll_ctr.c cmll_utl.c
@


1.46
log
@Remove SRP code. It contains a bug (this should not surprise anyone), but
the details are under embargo. The original plan was to wait for the
embargo to lift, but we've been waiting for quite some time, and there's no
indication of when or even if it will end. No sense in dragging this out
any longer.

The SRP code has never been enabled in OpenBSD, though I understand it is
in use by some other people. However, in light of this and other issues,
we're officially saying SRP is outside the scope of libressl. (For now.)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.45 2014/07/12 20:11:45 miod Exp $
d157 7
d295 1
d357 1
@


1.45
log
@Remove private_{Camellia,RC4}_set_key FIPS indirection tentacles, as has been
done for other symmetric algorithms recently.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.44 2014/07/11 14:01:38 tedu Exp $
a225 3
# srp/
#SRCS+= srp_lib.c srp_vfy.c

a373 1
	crypto/srp/srp.h \
@


1.44
log
@move all the feature settings to a common header.
probably ok beck jsing miod
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.43 2014/07/09 08:44:53 miod Exp $
a209 3

# rc4/
SRCS+= rc4_utl.c
@


1.43
log
@RSA_NULL used to be a compile option allowing the RSA interfaces to be
compiled-in, with nonfunctional code, to be able to cope with the RSA
patent.

However, we don't use this option, and the RSA patent has expired more than 10
years ago, so just drop this piece.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.42 2014/07/08 16:07:37 miod Exp $
d365 1
@


1.42
log
@Remove undocumented _des_crypt() interface and its companion header file,
which had never been installed, so it's unlikely something ever used this
in the last 15~20 years.

ok deraadt@@ jsing@@ beck@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.41 2014/06/24 19:31:50 miod Exp $
d222 1
a222 1
SRCS+= rsa_pk1.c rsa_ssl.c rsa_none.c rsa_oaep.c rsa_chk.c rsa_null.c
@


1.41
log
@Remove BIO_f_reliable(), guilty of playing with EVP_MD_CTX internals it
should not know anything about. Verified not to be used in ports; riding upon
the recent libcrypto major bump.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.40 2014/06/11 15:08:41 deraadt Exp $
d102 1
a102 1
SRCS+= qud_cksm.c rand_key.c rpc_enc.c  set_key.c xcbc_enc.c
@


1.40
log
@Provide support for non-funopen systems.
ok beck
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.39 2014/06/10 16:15:19 deraadt Exp $
d152 1
a152 1
SRCS+= c_all.c c_allc.c c_alld.c evp_lib.c bio_ok.c
@


1.39
log
@Abandon the auto-ENGINE /dev/crypto interface.  VIA 3des cbc receives
collateral damage.

The syncronous nature of this mechanism has hampered performance for
symmetric crypto relative to brute-force cpu. The assymetric crypto
support never really materialized in drivers.

So abandon the complexity.
ok tedu beck mikeb
some disagrement from djm but if he wants to test /dev/crypto ciphers
he should do it without this this gigantic API in the way
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.38 2014/06/02 15:08:38 deraadt Exp $
d12 1
a12 1
CFLAGS+= -DDSO_DLFCN -DHAVE_DLFCN_H
@


1.38
log
@A few months back there was a big community fuss regarding direct-use
of the intel RDRAND instruction.  Consensus was RDRAND should probably
only be used as an additional source of entropy in a mixer.

Guess which library bends over backwards to provide easy access to
RDRAND?  Yep.  Guess which applications are using this support?  Not
even one... but still, this is being placed as a trap for someone.

Send this support straight to the abyss.
ok kettenis
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.37 2014/05/25 17:29:51 tedu Exp $
d135 1
a135 1
SRCS+= eng_openssl.c eng_cnf.c eng_dyn.c hw_cryptodev.c
@


1.37
log
@define LIBRESSL_INTERNAL, and use it to hide the bad stuff from ourselves
ok beck
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.36 2014/05/16 14:24:36 jsing Exp $
d136 1
a136 1
SRCS+= eng_rsax.c eng_rdrand.c
@


1.36
log
@When OPENSSL_LOAD_CONF was added it ended up with more #if 0 code,
more #ifdefs and a new source file that contains a single function.

Nuke the #if 0 code that is now a macro and move the single function in
evp_acnf.c to c_all.c, which is where the other code lives. While here,
tidy evp.h slightly, remove an unnecessary #ifdef __OpenBSD__ and nuke
a comment that is now a lie.

ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.35 2014/05/15 15:09:01 jsing Exp $
d19 1
@


1.35
log
@Add a ChaCha20-Poly1305 AEAD EVP implementation to libcrypto, from Adam
Langley's Chromium OpenSSL patches.

ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.34 2014/05/15 13:53:46 jsing Exp $
d143 1
a143 1
SRCS+= encode.c digest.c evp_enc.c evp_key.c evp_acnf.c
@


1.34
log
@Add an AEAD EVP interface to libcrypto, along with AES-GCM AEAD
implementations. This largely pulls in Adam Langley's AEAD patches from
Chromium's OpenSSL.

ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.33 2014/05/14 14:46:35 jsing Exp $
d155 1
a155 1
SRCS+= e_chacha.c evp_aead.c
@


1.33
log
@Add poly1305 to libcrypto utilising Andrew Moon's public domain
implementation.

ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.32 2014/05/12 19:14:14 miod Exp $
d155 1
a155 1
SRCS+= e_chacha.c
@


1.32
log
@Move the `pqueue' part of libcrypto, which is a glorified sorted linked list
of 64-bit data, and only used by DTLS, to libssl where it belongs.

Remove pqueue_print() which is a debugging interface and serves no useful
purpose, except for the regress test, which grows its own pqueue_print()
routine.

Bump libcrypto major and libssl minor.

WARNING: do not update your tree right now, more changes are coming, which
will ride the libcrypto major bump.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.31 2014/05/04 17:12:19 miod Exp $
d201 3
d307 1
d370 1
@


1.31
log
@Remove the !SSLASM conditional. Either there is an arch-specific Makefile.inc,
or the !SSLASM list of files applies. This allows for an arch-specific
Makefile.inc to not specify SSLASM.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.30 2014/05/01 17:08:57 miod Exp $
a200 3
# pqueue/
SRCS+= pqueue.c

a303 1
	${LCRYPTO_SRC}/pqueue \
a365 1
	crypto/pqueue/pqueue.h \
@


1.30
log
@+ e_chacha.c, and bump minor
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.29 2014/05/01 13:15:22 jsing Exp $
d430 1
a430 3
.endif

.if !defined(SSLASM)
@


1.29
log
@Add ChaCha to libcrypto, based on djb's public domain implementation.

ok deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.28 2014/04/27 16:19:04 jsing Exp $
d155 1
@


1.28
log
@We do not need a separate file for two compatibility wrapper functions.

ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.27 2014/04/23 05:13:57 beck Exp $
d79 3
d277 1
d336 1
@


1.27
log
@Make libssl and libcrypto compile with -Werror
ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.26 2014/04/18 19:41:21 miod Exp $
d242 1
a242 1
SRCS+= ui_err.c ui_lib.c ui_openssl.c ui_util.c ui_compat.c
@


1.26
log
@Do not ask the user to pass either -DB_ENDIAN or -DL_ENDIAN to the compiler,
but rather figure out the endianness from <machine/endian.h> automagically;
help from guenther@@

ok jca@@ guenther@@ beck@@ and the rest of the `Buena SSL rampage club'
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.25 2014/04/18 17:32:31 miod Exp $
d8 1
a8 1
CFLAGS+= -Wall
@


1.25
log
@Put back i2d_ASN1_SET() and d2i_ASN1_SET() from the NO_ASN1_OLD prune, as there
are still some 3rd-party code using it, and fixing them is not trivial.

As an excuse gift, the memory leaks on failure in resurrected a_set.c have
been fixed.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.24 2014/04/18 13:19:03 tedu Exp $
a8 10

# arm and sh default to little endian, mips defaults to big endian
.if ${MACHINE_ARCH} == "alpha" || ${MACHINE_ARCH} == "amd64" || \
    ${MACHINE_ARCH} == "arm" || ${MACHINE_ARCH} == "i386" || \
    ${MACHINE_ARCH} == "mips64el" || ${MACHINE_ARCH} == "sh" || \
    ${MACHINE_ARCH} == "vax"
CFLAGS+= -DL_ENDIAN
.else
CFLAGS+= -DB_ENDIAN
.endif 
@


1.24
log
@another round of chemo for the RAND code to provide clarity.
ok deraadt
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.23 2014/04/18 13:13:50 tedu Exp $
d60 1
@


1.23
log
@egd support is too dangerous to leave where somebody might find it.
ok deraadt.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.22 2014/04/17 22:06:19 miod Exp $
d210 1
a210 2
SRCS+= rc4_rand.c randfile.c rand_lib.c rand_err.c
SRCS+= rand_unix.c
@


1.22
log
@Use !defined() rather than empty().
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.21 2014/04/17 20:43:42 tedu Exp $
d210 1
a210 1
SRCS+= rc4_rand.c randfile.c rand_lib.c rand_err.c rand_egd.c
@


1.21
log
@-Wall
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.20 2014/04/17 18:16:45 miod Exp $
d436 1
a436 1
.if empty (SSLASM)
@


1.20
log
@Ok, there was a need for OPENSSL_cleanse() instead of bzero() to prevent
supposedly smart compilers from optimizing memory cleanups away. Understood.

Ok, in case of an hypothetically super smart compiler, OPENSSL_cleanse() had
to be convoluted enough for the compiler not to recognize that this was
actually bzero() in disguise. Understood.

But then why there had been optimized assembler versions of OPENSSL_cleanse()
is beyond me. Did someone not trust the C obfuscation?
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2014/04/17 18:11:46 miod Exp $
d7 2
@


1.19
log
@Move the machine-specific parts of the libcrypto Makefile to per-arch makefile
fragments, to ease maintainance, and see through the fog of bugs.

"looks good" deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2014/04/17 16:17:41 tedu Exp $
d38 1
a435 1
SRCS+= mem_clr.c
@


1.18
log
@Fully kill FIPS API. Forcible certification conflicts with the goals of a
free software project. ok beck deraadt

Ports calling FIPS_mode_set(1): mongodb
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2014/04/16 19:13:01 miod Exp $
d429 5
a433 103
.if (${MACHINE_ARCH} == "i386")
SRCS+= wp_block.c
SRCS+= bf_cbc.c	
CFLAGS+= -DOPENSSL_BN_ASM_PART_WORDS
CFLAGS+= -DOPENSSL_IA32_SSE2
CFLAGS+= -DOPENSSL_BN_ASM_MONT
CFLAGS+= -DOPENSSL_BN_ASM_GF2m
CFLAGS+= -DSHA1_ASM
CFLAGS+= -DSHA256_ASM
CFLAGS+= -DSHA512_ASM
CFLAGS+= -DMD5_ASM
CFLAGS+= -DRMD160_ASM
CFLAGS+= -DAES_ASM
CFLAGS+= -DVPAES_ASM
CFLAGS+= -DWHIRLPOOL_ASM
CFLAGS+= -DGHASH_ASM
CFLAGS+= -DOPENSSL_CPUID_OBJ
SSLASM=\
	aes aes-586 \
	aes vpaes-x86 \
	aes aesni-x86 \
	bf bf-586 \
	bn bn-586 \
	bn co-586 \
	bn x86-mont \
	bn x86-gf2m \
	des crypt586 \
	des des-586 \
	md5 md5-586 \
	modes ghash-x86 \
	rc4 rc4-586 \
	ripemd rmd-586 \
	sha sha1-586 \
	sha sha256-586 \
	sha sha512-586 \
	whrlpool wp-mmx
.for dir f in ${SSLASM}
SRCS+=	${f}.S
GENERATED+=${f}.S
${f}.S: ${LCRYPTO_SRC}/${dir}/asm/${f}.pl ${LCRYPTO_SRC}/perlasm/x86gas.pl
	/usr/bin/perl -I${LCRYPTO_SRC}/perlasm -I${LCRYPTO_SRC}/${dir}/asm \
		${LCRYPTO_SRC}/${dir}/asm/${f}.pl \
		    openbsd-elf ${CFLAGS} 386 ${PICFLAG} > ${.TARGET}
.endfor
SRCS+=	x86cpuid.S
GENERATED+=x86cpuid.S
x86cpuid.S: ${LCRYPTO_SRC}/x86cpuid.pl ${LCRYPTO_SRC}/perlasm/x86gas.pl
	/usr/bin/perl -I${LCRYPTO_SRC}/perlasm ${LCRYPTO_SRC}/x86cpuid.pl \
		openbsd-elf ${CFLAGS} 386 ${PICFLAG} > ${.TARGET}
.elif (${MACHINE_ARCH} == "amd64")
SRCS+= bf_enc.c des_enc.c fcrypt_b.c
SRCS+= x86_64-gcc.c
CFLAGS+= -DOPENSSL_CPUID_OBJ
CFLAGS+= -DOPENSSL_IA32_SSE2
CFLAGS+= -DOPENSSL_BN_ASM_MONT
CFLAGS+= -DOPENSSL_BN_ASM_MONT5
CFLAGS+= -DOPENSSL_BN_ASM_GF2m
CFLAGS+= -DSHA1_ASM
CFLAGS+= -DSHA256_ASM
CFLAGS+= -DSHA512_ASM
CFLAGS+= -DMD5_ASM
CFLAGS+= -DAES_ASM
CFLAGS+= -DVPAES_ASM
CFLAGS+= -DBSAES_ASM
CFLAGS+= -DWHIRLPOOL_ASM
CFLAGS+= -DGHASH_ASM
SSLASM=\
	aes aes-x86_64 \
	aes aesni-x86_64 \
	aes aesni-sha1-x86_64 \
	aes bsaes-x86_64 \
	aes vpaes-x86_64 \
	bn x86_64-mont \
	bn x86_64-mont5 \
	bn x86_64-gf2m \
	bn modexp512-x86_64 \
	md5 md5-x86_64 \
	modes ghash-x86_64 \
	rc4 rc4-x86_64 \
	rc4 rc4-md5-x86_64 \
	sha sha1-x86_64 \
	whrlpool wp-x86_64
.for dir f in ${SSLASM}
SRCS+=	${f}.S
GENERATED+=${f}.S
${f}.S: ${LCRYPTO_SRC}/${dir}/asm/${f}.pl
	(cd ${LCRYPTO_SRC}/${dir} ; \
		/usr/bin/perl ./asm/${f}.pl openbsd-elf) > ${.TARGET}
.endfor
SRCS+=	x86_64cpuid.S sha256-x86_64.S sha512-x86_64.S
GENERATED+=x86_64cpuid.S sha256-x86_64.S sha512-x86_64.S
x86_64cpuid.S: ${LCRYPTO_SRC}/x86_64cpuid.pl
	(cd ${LCRYPTO_SRC}/${dir} ; \
		/usr/bin/perl ./x86_64cpuid.pl) > ${.TARGET}
sha256-x86_64.S: ${LCRYPTO_SRC}/sha/asm/sha512-x86_64.pl
	cd ${LCRYPTO_SRC}/sha/asm ; \
		/usr/bin/perl ./sha512-x86_64.pl ${.OBJDIR}/${.TARGET}
sha512-x86_64.S: ${LCRYPTO_SRC}/sha/asm/sha512-x86_64.pl
	cd ${LCRYPTO_SRC}/sha/asm ; \
		/usr/bin/perl ./sha512-x86_64.pl ${.OBJDIR}/${.TARGET}
.else
# XXX lots more asm we can turn on for other platforms. Shouldn't require
# major cranks.
@


1.17
log
@No need to define ANSI_SOURCE and NO_ERR. TERMIOS kept until ui/ui_openssl.c
gets a second trim.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2014/04/16 18:47:51 miod Exp $
d37 1
a37 1
SRCS+= uid.c o_time.c o_str.c o_fips.c o_init.c
@


1.16
log
@No need to build with -DOPENSSL_NO_CAPIENG and -DOPENSSL_NO_HW_xxx for all
now removed engines.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2014/04/16 04:31:32 miod Exp $
d27 1
a27 1
CFLAGS+= -DTERMIOS -DANSI_SOURCE -DNO_ERR
@


1.15
log
@Remove DES_read_password and DES_read_2passwords which are `modern' flavours
of des_old.h routines, acting as wrappers about the OpenSSL UI API.
Nothing should use these functions directly.
Riding the recent libcrypto major bump (in a `des' car).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2014/04/16 03:24:53 beck Exp $
a28 7
CFLAGS+= -DOPENSSL_NO_HW_4758_CCA
CFLAGS+= -DOPENSSL_NO_HW_AEP
CFLAGS+= -DOPENSSL_NO_HW_ATALLA
CFLAGS+= -DOPENSSL_NO_CAPIENG
CFLAGS+= -DOPENSSL_NO_HW_CSWIFT
CFLAGS+= -DOPENSSL_NO_HW_NCIPHER
CFLAGS+= -DOPENSSL_NO_HW_NURON
a29 2
CFLAGS+= -DOPENSSL_NO_HW_SUREWARE
CFLAGS+= -DOPENSSL_NO_HW_UBSEC
@


1.14
log
@Your operating system memory allocation functions are your friend. If they
are not please fix your operating system. Replace mem.c with an API-compatible
wrapper that just calls the system functions and does not allow a one word
modification of a variable in a running shared library to turn on memory
debug functions that expose things that should not be seen.
ok tedu@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2014/04/15 22:44:15 tedu Exp $
a114 1
SRCS+= read2pwd.c
@


1.13
log
@don't even pretend to build md2, seed, or jpake
ok beck deraadt
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2014/04/15 20:49:00 tedu Exp $
d45 1
a45 1
SRCS+= cryptlib.c mem.c mem_dbg.c cversion.c ex_data.c cpt_err.c
@


1.12
log
@12 years ago, old_des.h was used to provide compatibility with libdes.
The man page says "Compatibility des_ functions are provided for a short
while" and indeed even the original commit message says "The compatibility
functions will be removed in some future release, at the latest in
version 1.0." So here we are, a short while later.

Now I've only been an OpenBSD developer for 11 years, one year less than
this header has existed, but in that brief time, I've learned a thing or
two about deleting obsolete code. It doesn't delete itself. And worse,
people will continue using it until you force them onto a better path.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2014/04/15 20:19:55 miod Exp $
d158 1
a158 1
SRCS+= e_rc4.c e_aes.c names.c e_seed.c
d160 1
a160 1
SRCS+= m_null.c m_md2.c m_md4.c m_md5.c m_sha.c m_sha1.c m_wp.c
a174 3
# jpake/
#SRCS+= jpake.c jpake_err.c

a180 3
# md2
##SRCS+= md2_dgst.c md2_one.c

a237 3
# seed/
#SRCS+= seed.c seed_ecb.c seed_cbc.c seed_cfb.c seed_ofb.c

a304 1
	${LCRYPTO_SRC}/md2 \
a306 1
	${LCRYPTO_SRC}/jpake \
a325 1
	${LCRYPTO_SRC}/seed \
a368 1
	crypto/md2/md2.h \
a387 1
	crypto/seed/seed.h \
@


1.11
log
@The NO_ASN1_OLD define was introduced in 0.9.7, 8 years ago, to allow for
obsolete (and mostly internal) routines to be compiled out.

We don't expect any reasonable software to stick to these interfaces, so better
clean up the view and unifdef -DNO_ASN1_OLD.

The astute reader will notice the existence of NO_OLD_ASN1 which serves a
similar purpose, but is more entangled. Its time will come, soon.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2014/04/15 20:13:07 miod Exp $
d114 1
a114 1
SRCS+= str2key.c  cfb64ede.c ofb64ede.c ede_cbcm_enc.c des_old.c des_old2.c
a367 1
	crypto/des/des_old.h \
@


1.10
log
@Just like every web browser expands until it can read mail, every modular
library expands until it has its own dlfcn wrapper, and libcrypto is no
exception.

Remove the non-dlfcn DSO methods.

This causes public DSO_METHOD_{beos,dl,vms,win32} to disappear (major bump
coming soon). Note that portable software ought to use DSO_METHOD_openssl
instead of picking the backend directly (which makes one wonder why the
backends are exposed, as it is unlikely that more than one can work on
your system).

ok beck@@ deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2014/04/15 20:06:09 tedu Exp $
d54 1
a54 1
SRCS+= a_print.c a_type.c a_set.c a_dup.c a_d2i_fp.c a_i2d_fp.c
@


1.9
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2014/04/15 17:46:16 beck Exp $
d126 2
a127 2
SRCS+= dso_dl.c dso_dlfcn.c dso_err.c dso_lib.c dso_null.c
SRCS+= dso_openssl.c dso_win32.c dso_vms.c dso_beos.c
@


1.8
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2014/04/15 17:20:09 beck Exp $
d46 1
a46 1
SRCS+= uid.c o_time.c o_str.c o_fips.c o_init.c fips_ers.c
d166 1
a166 1
SRCS+= e_old.c pmeth_lib.c pmeth_fn.c pmeth_gn.c m_sigver.c evp_fips.c
@


1.7
log
@As we now remove it permanently, we no longer need NO_WINDOWS_BRAINDEATH
as a build time option...
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2014/04/15 16:52:50 miod Exp $
d46 1
a46 1
SRCS+= ebcdic.c uid.c o_time.c o_str.c o_fips.c o_init.c fips_ers.c
a371 1
	crypto/ebcdic.h \
@


1.6
log
@Replace the old OpenSSL PRNG by direct use of arc4random_buf(), keeping the
existing RAND interfaces unchanged.

All interfaces allowing external feed or seed of the RNG (either from a file
or a local entropy gathering daemon) are kept for ABI compatibility, but are
no longer do anything.

While the OpenSSL PRNG was required 15+ years ago when many systems lacked
proper entropy collection, things have evolved and one can reasonably assume
it is better to use the kernel (system global) entropy pool rather than trying
to build one's own and having to compensate for thread scheduling...

<RANT>
Whoever thought that RAND_screen(), feeding the PRNG with the contents of the
local workstation's display, under Win32, was a smart idea, ought to be banned
from security programming.
</RANT>

ok beck@@ deraadt@@ tedu@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2014/04/14 04:27:50 miod Exp $
d27 1
a27 1
CFLAGS+= -DTERMIOS -DANSI_SOURCE -DNO_ERR -DNO_WINDOWS_BRAINDEATH
@


1.5
log
@Don't bother compiling files which end up containing
  #if OPENSSL_SYS_NOTYOURS
  <whole file>
  #endif
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2014/04/13 23:50:03 deraadt Exp $
d223 1
a223 1
SRCS+= md_rand.c randfile.c rand_lib.c rand_err.c rand_egd.c
@


1.4
log
@Cope with the removal of openssl/symhacks.h
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2014/04/13 16:03:30 miod Exp $
d224 1
a224 1
SRCS+= rand_win.c rand_unix.c rand_os2.c rand_nw.c
@


1.3
log
@Do not install e_os.h, it is not an external header and should not be used
by anything in userland.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2014/04/13 15:49:47 miod Exp $
a408 1
	crypto/symhacks.h \
@


1.2
log
@Move undocumented internal OPENSSL_DIR interface from libcrypto to libssl,
so that libssl no longer need to access the non-external headers of libcrypto
to build.
No library bump, riding upon the recent update.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1 2014/04/11 22:51:53 miod Exp $
a349 1
	e_os.h \
@


1.1
log
@Move build machinery for libcrypto from libssl/crypto to libcrypto, as well
as configuration files; split manpages and .pc files between libcrypto and
libssl.
No functional change, only there to make engineering easier, and libcrypto
sources are still found in libssl/src/crypto at the moment.

ok reyk@@, also discussed with deraadt@@ beck@@ and the usual crypto suspects.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.64 2013/07/13 16:34:43 miod Exp $
d46 1
a46 1
SRCS+= ebcdic.c uid.c o_time.c o_str.c o_dir.c o_fips.c o_init.c fips_ers.c
@

