head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2016.09.03.11.33.43;	author beck;	state dead;
branches;
next	1.5;
commitid	ffO8NTZyyIhwt1Pt;

1.5
date	2015.09.11.14.48.06;	author miod;	state Exp;
branches;
next	1.4;
commitid	ahY38TRM6KpTUmZR;

1.4
date	2014.11.17.20.31.21;	author miod;	state Exp;
branches;
next	1.3;
commitid	ymruTYR6WPNRDFtT;

1.3
date	2014.08.11.13.29.43;	author bcook;	state Exp;
branches;
next	1.2;
commitid	h9IiVTb1czdk2VRe;

1.2
date	2014.05.06.19.55.06;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.17.18.11.47;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove the libcrypto/crypto directory
@
text
@# $OpenBSD: Makefile.inc,v 1.5 2015/09/11 14:48:06 miod Exp $

# amd64-specific libcrypto build rules

# aes
CFLAGS+= -DAES_ASM
SSLASM+= aes aes-x86_64
CFLAGS+= -DBSAES_ASM
SSLASM+= aes bsaes-x86_64
CFLAGS+= -DVPAES_ASM
SSLASM+= aes vpaes-x86_64
SSLASM+= aes aesni-x86_64
SSLASM+= aes aesni-sha1-x86_64
# bf
SRCS+= bf_enc.c
# bn
CFLAGS+= -DOPENSSL_IA32_SSE2
CFLAGS+= -DRSA_ASM
SSLASM+= bn modexp512-x86_64
CFLAGS+= -DOPENSSL_BN_ASM_MONT
SSLASM+= bn x86_64-mont
CFLAGS+= -DOPENSSL_BN_ASM_MONT5
SSLASM+= bn x86_64-mont5
CFLAGS+= -DOPENSSL_BN_ASM_GF2m
SSLASM+= bn x86_64-gf2m
# camellia
SRCS+=	cmll_misc.c
SSLASM+= camellia cmll-x86_64
# des
SRCS+= des_enc.c fcrypt_b.c
# md5
CFLAGS+= -DMD5_ASM
SSLASM+= md5 md5-x86_64
# modes
CFLAGS+= -DGHASH_ASM
SSLASM+= modes ghash-x86_64
# rc4
CFLAGS+= -DRC4_MD5_ASM
SSLASM+= rc4 rc4-x86_64
SSLASM+= rc4 rc4-md5-x86_64
# ripemd
# sha
CFLAGS+= -DSHA1_ASM
SSLASM+= sha sha1-x86_64
CFLAGS+= -DSHA256_ASM
SRCS+= sha256-x86_64.S
GENERATED+= sha256-x86_64.S
sha256-x86_64.S: ${LCRYPTO_SRC}/sha/asm/sha512-x86_64.pl
	cd ${LCRYPTO_SRC}/sha/asm ; \
		/usr/bin/perl ./sha512-x86_64.pl ${.OBJDIR}/${.TARGET}
CFLAGS+= -DSHA512_ASM
SRCS+= sha512-x86_64.S
GENERATED+= sha512-x86_64.S
sha512-x86_64.S: ${LCRYPTO_SRC}/sha/asm/sha512-x86_64.pl
	cd ${LCRYPTO_SRC}/sha/asm ; \
		/usr/bin/perl ./sha512-x86_64.pl ${.OBJDIR}/${.TARGET}
# whrlpool
CFLAGS+= -DWHIRLPOOL_ASM
SSLASM+= whrlpool wp-x86_64

.for dir f in ${SSLASM}
SRCS+=	${f}.S
GENERATED+=${f}.S
${f}.S: ${LCRYPTO_SRC}/${dir}/asm/${f}.pl
	(cd ${LCRYPTO_SRC}/${dir} ; \
		/usr/bin/perl ./asm/${f}.pl openbsd) > ${.TARGET}
.endfor

CFLAGS+= -DOPENSSL_CPUID_OBJ
SRCS+=	x86_64cpuid.S x86_64-gcc.c
GENERATED+=x86_64cpuid.S

x86_64cpuid.S: ${LCRYPTO_SRC}/x86_64cpuid.pl
	(cd ${LCRYPTO_SRC}/${dir} ; \
		/usr/bin/perl ./x86_64cpuid.pl) > ${.TARGET}
@


1.5
log
@Pass "openbsd" instead of "openbsd-elf" as the "flavour" to the perl assembler
machinery. OpenBSD has never been not ELF on amd64, and changing this will
actually make -portable life slightly easier in the near future.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.4 2014/11/17 20:31:21 miod Exp $
@


1.4
log
@Add the Cammelia cipher to libcrypto.

There used to be a strong reluctance to provide this cipher in LibreSSL in the
past, because the licence terms under which Cammelia was released by NTT were
free-but-not-in-the-corners, by restricting the right to modify the source
code, as well retaining the right to enforce their patents against anyone
in the future.

However, as stated in http://www.ntt.co.jp/news/news06e/0604/060413a.html ,
NTT changed its mind and made this code truly free. We only wish there had
been more visibility of this, for we could have had enabled Cammelia
earlier (-:

Licence change noticed by deraadt@@. General agreement from the usual LibreSSL
suspects.

Crank libcrypto.so minor version due to the added symbols.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.3 2014/08/11 13:29:43 bcook Exp $
d66 1
a66 1
		/usr/bin/perl ./asm/${f}.pl openbsd-elf) > ${.TARGET}
@


1.3
log
@Guard RSA / RC4-5 ASM when NO_ASM is not defined

Most assembly blocks remain inactive if OPENSSL_NO_ASM is not defined,
only enabling inline assembly, but the RSA / RC4-5 blocks (used only in
amd64 systems) turn on implicitly. Guard these two as well.

This simplifies enabling just inline ASM in portable, no effective
change in OpenBSD.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.2 2014/05/06 19:55:06 miod Exp $
d26 3
@


1.2
log
@Sort CFLAGS, SRC and SSLASM stanzas by the directories they apply to, to make
these files similar in layout to the other md Makefile.inc; no functional
change.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.1 2014/04/17 18:11:47 miod Exp $
d18 1
d35 1
@


1.1
log
@Move the machine-specific parts of the libcrypto Makefile to per-arch makefile
fragments, to ease maintainance, and see through the fog of bugs.

"looks good" deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD$
d5 14
a18 4
SRCS+= bf_enc.c des_enc.c fcrypt_b.c
SRCS+= x86_64-gcc.c

CFLAGS+= -DOPENSSL_BN_ASM_GF2m
d20 1
d22 9
a30 5
CFLAGS+= -DOPENSSL_CPUID_OBJ
CFLAGS+= -DOPENSSL_IA32_SSE2

CFLAGS+= -DAES_ASM
CFLAGS+= -DBSAES_ASM
d32 6
a37 1
CFLAGS+= -DMD5_ASM
d39 1
d41 5
d47 6
a52 1
CFLAGS+= -DVPAES_ASM
d54 1
a54 17

SSLASM=\
	aes aes-x86_64 \
	aes aesni-x86_64 \
	aes aesni-sha1-x86_64 \
	aes bsaes-x86_64 \
	aes vpaes-x86_64 \
	bn x86_64-mont \
	bn x86_64-mont5 \
	bn x86_64-gf2m \
	bn modexp512-x86_64 \
	md5 md5-x86_64 \
	modes ghash-x86_64 \
	rc4 rc4-x86_64 \
	rc4 rc4-md5-x86_64 \
	sha sha1-x86_64 \
	whrlpool wp-x86_64
d64 3
a66 2
SRCS+=	x86_64cpuid.S sha256-x86_64.S sha512-x86_64.S
GENERATED+=x86_64cpuid.S sha256-x86_64.S sha512-x86_64.S
a70 6
sha256-x86_64.S: ${LCRYPTO_SRC}/sha/asm/sha512-x86_64.pl
	cd ${LCRYPTO_SRC}/sha/asm ; \
		/usr/bin/perl ./sha512-x86_64.pl ${.OBJDIR}/${.TARGET}
sha512-x86_64.S: ${LCRYPTO_SRC}/sha/asm/sha512-x86_64.pl
	cd ${LCRYPTO_SRC}/sha/asm ; \
		/usr/bin/perl ./sha512-x86_64.pl ${.OBJDIR}/${.TARGET}
@

