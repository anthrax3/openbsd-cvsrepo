head	1.10;
access;
symbols
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4;
locks; strict;
comment	@# @;


1.10
date	2016.09.03.11.33.43;	author beck;	state dead;
branches;
next	1.9;
commitid	ffO8NTZyyIhwt1Pt;

1.9
date	2015.03.18.05.26.10;	author miod;	state Exp;
branches;
next	1.8;
commitid	HDbsGqFBA9FgOqpV;

1.8
date	2015.03.05.20.35.28;	author miod;	state Exp;
branches;
next	1.7;
commitid	7XrIfASvt9kEYGYi;

1.7
date	2014.11.17.20.31.21;	author miod;	state Exp;
branches;
next	1.6;
commitid	ymruTYR6WPNRDFtT;

1.6
date	2014.09.27.20.42.38;	author miod;	state Exp;
branches;
next	1.5;
commitid	RvwdDxf13waPRWEo;

1.5
date	2014.09.27.12.29.31;	author miod;	state Exp;
branches;
next	1.4;
commitid	zJyeQ8nfLebyZsfy;

1.4
date	2014.05.02.22.23.00;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.02.20.08.10;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.02.18.21.39;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.01.22.27.59;	author miod;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove the libcrypto/crypto directory
@
text
@# $OpenBSD: Makefile.inc,v 1.9 2015/03/18 05:26:10 miod Exp $

# hppa-specific libcrypto build rules

# aes
SRCS+= aes_core.c aes_cbc.c 
CFLAGS+= -DAES_ASM
SSLASM+= aes aes-parisc aes-parisc
# bf
SRCS+= bf_enc.c
# bn
SRCS+= bn_asm.c
SSLASM+= bn parisc-mont parisc-mont
CFLAGS+= -DOPENSSL_BN_ASM_MONT -DBN_DIV2W
# camellia
SRCS+= camellia.c cmll_cbc.c cmll_misc.c
# des
SRCS+= des_enc.c fcrypt_b.c
# modes
CFLAGS+= -DGHASH_ASM
SSLASM+= modes ghash-parisc ghash-parisc
# rc4
.if 0	# about 35% slower than C code
SSLASM+= rc4 rc4-parisc rc4-parisc
.else
SRCS+= rc4_enc.c rc4_skey.c
.endif
## rc5
#SRCS+= rc5_enc.c 
# sha
CFLAGS+= -DSHA1_ASM
SSLASM+= sha sha1-parisc sha1-parisc
CFLAGS+= -DSHA256_ASM
SSLASM+= sha sha512-parisc sha256-parisc
# whrlpool
SRCS+= wp_block.c

.for dir src dst in ${SSLASM}
SRCS+=	${dst}.S
GENERATED+=${dst}.S
${dst}.S: ${LCRYPTO_SRC}/${dir}/asm/${src}.pl
	/usr/bin/perl \
		${LCRYPTO_SRC}/${dir}/asm/${src}.pl 32 ${.TARGET} > ${.TARGET}
.endfor

CFLAGS+= -DOPENSSL_CPUID_OBJ
SRCS+=	pariscid.S
GENERATED+=pariscid.S
pariscid.S: ${LCRYPTO_SRC}/pariscid.pl
	/usr/bin/perl \
		${LCRYPTO_SRC}/pariscid.pl 32 > ${.TARGET}
@


1.9
log
@In the neverending saga of enabling and disabling assembler code for sha
routines on hppa, the cause for sha512-parisc subtly misbehaving has been
found: despite having fallback pa1.1 code when running on a 32-bit cpu, the
shift constants used in the sigma computations in sha512 are >= 32 and are
silently truncated to 5 bits by the assembler, so there is no chance of
getting this code to work on a non-pa2.0 processor.

However, the pa1.1 fallback code for sha256 is safe, as it never attempts to
shift by more than 31, so reenable it again.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.8 2015/03/05 20:35:28 miod Exp $
@


1.8
log
@Do not use sha512-parisc for now, as it is subtly bugged - passes the sha
regress tests but causes tls ciphersuite using sha386 to fail; found the
hard way by henning@@.

I can't see anything wrong in the generated assembly code yet, but building
a libcrypto with no assembler code but sha512_block_data_order() is enough
to trigger Henning's issue, so the bug lies there.

No ABI change; ok deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.7 2014/11/17 20:31:21 miod Exp $
a32 1
.if 0	# sha512 subtly broken, sha256 probably as well
a34 3
CFLAGS+= -DSHA512_ASM
SSLASM+= sha sha512-parisc sha512-parisc
.endif
@


1.7
log
@Add the Cammelia cipher to libcrypto.

There used to be a strong reluctance to provide this cipher in LibreSSL in the
past, because the licence terms under which Cammelia was released by NTT were
free-but-not-in-the-corners, by restricting the right to modify the source
code, as well retaining the right to enforce their patents against anyone
in the future.

However, as stated in http://www.ntt.co.jp/news/news06e/0604/060413a.html ,
NTT changed its mind and made this code truly free. We only wish there had
been more visibility of this, for we could have had enabled Cammelia
earlier (-:

Licence change noticed by deraadt@@. General agreement from the usual LibreSSL
suspects.

Crank libcrypto.so minor version due to the added symbols.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.6 2014/09/27 20:42:38 miod Exp $
d33 1
d38 1
@


1.6
log
@Revert r1.5 and reenable assembler version of ghash now that it has been
fixed.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.5 2014/09/27 12:29:31 miod Exp $
d15 2
@


1.5
log
@Disable assembler code for ghash on hppa, causes wrong computations in some
cases and breaks TLS 1.2; crank libcrypto.so minor version out of safety and
to be able to tell broken versions apart easily.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.4 2014/05/02 22:23:00 miod Exp $
d18 2
a19 2
#CFLAGS+= -DGHASH_ASM
#SSLASM+= modes ghash-parisc ghash-parisc
@


1.4
log
@Correctly enable assembler Montgomery routine.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.3 2014/05/02 20:08:10 miod Exp $
d18 2
a19 2
CFLAGS+= -DGHASH_ASM
SSLASM+= modes ghash-parisc ghash-parisc
@


1.3
log
@Reenable assembler code for SHA384 and SHA512 now that it no longer miscomputes
things. Worth doing as it's twice faster than the C code.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.2 2014/05/02 18:21:39 miod Exp $
d14 1
@


1.2
log
@Disable assembler version of SHA512 for now, it produces wrong results.
@
text
@d1 1
a1 1
# $OpenBSD$
d32 2
a33 2
#CFLAGS+= -DSHA512_ASM
#SSLASM+= sha sha512-parisc sha512-parisc
@


1.1
log
@Enable use of assembly code for AES, BN (Montgomery), SHA1, SHA256 and SHA512.
RC4 assembler code is not used, as it runs about 35% slower than the C code.
@
text
@d32 2
a33 2
CFLAGS+= -DSHA512_ASM
SSLASM+= sha sha512-parisc sha512-parisc
@

