head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12;
locks; strict;
comment	@ * @;


1.12
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.11;
commitid	nzndm3zqPmFurSaK;

1.11
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.34;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.19;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.25;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.52;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.38;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.38;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.07;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.06;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.53;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.37;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@/* $OpenBSD: cast.h,v 1.11 2014/06/12 15:49:28 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#ifndef HEADER_CAST_H
#define HEADER_CAST_H

#include <openssl/opensslconf.h>

#ifdef  __cplusplus
extern "C" {
#endif

#ifdef OPENSSL_NO_CAST
#error CAST is disabled.
#endif

#define CAST_ENCRYPT	1
#define CAST_DECRYPT	0

#define CAST_LONG unsigned int

#define CAST_BLOCK	8
#define CAST_KEY_LENGTH	16

typedef struct cast_key_st
	{
	CAST_LONG data[32];
	int short_key;	/* Use reduced rounds for short key */
	} CAST_KEY;

void CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
void CAST_ecb_encrypt(const unsigned char *in, unsigned char *out, const CAST_KEY *key,
		      int enc);
void CAST_encrypt(CAST_LONG *data, const CAST_KEY *key);
void CAST_decrypt(CAST_LONG *data, const CAST_KEY *key);
void CAST_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
		      const CAST_KEY *ks, unsigned char *iv, int enc);
void CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,
			long length, const CAST_KEY *schedule, unsigned char *ivec,
			int *num, int enc);
void CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out, 
			long length, const CAST_KEY *schedule, unsigned char *ivec,
			int *num);

#ifdef  __cplusplus
}
#endif

#endif
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d62 2
a66 2

#include <openssl/opensslconf.h>
@


1.10
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d1 1
a1 1
/* crypto/cast/cast.h */
@


1.9
log
@resolve conflicts
@
text
@a85 3
#ifdef OPENSSL_FIPS 
void private_CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
#endif
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d86 3
a88 1
 
@


1.7
log
@resolve conflicts
@
text
@d75 1
a75 1
#define CAST_LONG unsigned long
d86 1
a86 3
#ifdef OPENSSL_FIPS 
void private_CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
#endif
d88 1
a88 1
void CAST_ecb_encrypt(const unsigned char *in,unsigned char *out,CAST_KEY *key,
d90 2
a91 2
void CAST_encrypt(CAST_LONG *data,CAST_KEY *key);
void CAST_decrypt(CAST_LONG *data,CAST_KEY *key);
d93 1
a93 1
		      CAST_KEY *ks, unsigned char *iv, int enc);
d95 1
a95 1
			long length, CAST_KEY *schedule, unsigned char *ivec,
d98 1
a98 1
			long length, CAST_KEY *schedule, unsigned char *ivec,
@


1.6
log
@resolve conflicts
@
text
@d86 3
a88 1
 
@


1.5
log
@resolve conflicts
@
text
@d66 2
d86 1
a86 4

#ifdef OPENSSL_FIPS 
void private_CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
#endif
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d84 4
a87 1
 
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d66 1
a66 1
#ifdef NO_CAST
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d85 1
a85 1
void CAST_set_key(CAST_KEY *key, int len, unsigned char *data);
@


1.1
log
@Initial revision
@
text
@d66 4
d81 1
a83 1
#ifndef NOPROTO
d86 2
a87 2
void CAST_ecb_encrypt(unsigned char *in,unsigned char *out,CAST_KEY *key,
	int enc);
d90 8
a97 18
void CAST_cbc_encrypt(unsigned char *in, unsigned char *out, long length,
	CAST_KEY *ks, unsigned char *iv, int enc);
void CAST_cfb64_encrypt(unsigned char *in, unsigned char *out, long length,
	CAST_KEY *schedule, unsigned char *ivec, int *num, int enc);
void CAST_ofb64_encrypt(unsigned char *in, unsigned char *out, long length,
	CAST_KEY *schedule, unsigned char *ivec, int *num);

#else

void CAST_set_key();
void CAST_ecb_encrypt();
void CAST_encrypt();
void CAST_decrypt();
void CAST_cbc_encrypt();
void CAST_cfb64_encrypt();
void CAST_ofb64_encrypt();

#endif
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a65 4
#ifdef OPENSSL_NO_CAST
#error CAST is disabled.
#endif

a76 1
	int short_key;	/* Use reduced rounds for short key */
d79 1
d81 3
a83 3
void CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
void CAST_ecb_encrypt(const unsigned char *in,unsigned char *out,CAST_KEY *key,
		      int enc);
d86 18
a103 8
void CAST_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
		      CAST_KEY *ks, unsigned char *iv, int enc);
void CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,
			long length, CAST_KEY *schedule, unsigned char *ivec,
			int *num, int enc);
void CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out, 
			long length, CAST_KEY *schedule, unsigned char *ivec,
			int *num);
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d84 1
a84 4

#ifdef OPENSSL_FIPS 
void private_CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
#endif
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a65 2
#include <openssl/opensslconf.h>

d84 4
a87 1
 
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d86 1
a86 3
#ifdef OPENSSL_FIPS 
void private_CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
#endif
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d75 1
a75 1
#define CAST_LONG unsigned int
d86 3
a88 1
 
d90 1
a90 1
void CAST_ecb_encrypt(const unsigned char *in, unsigned char *out, const CAST_KEY *key,
d92 2
a93 2
void CAST_encrypt(CAST_LONG *data, const CAST_KEY *key);
void CAST_decrypt(CAST_LONG *data, const CAST_KEY *key);
d95 1
a95 1
		      const CAST_KEY *ks, unsigned char *iv, int enc);
d97 1
a97 1
			long length, const CAST_KEY *schedule, unsigned char *ivec,
d100 1
a100 1
			long length, const CAST_KEY *schedule, unsigned char *ivec,
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d86 1
a86 3
#ifdef OPENSSL_FIPS 
void private_CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
#endif
@


