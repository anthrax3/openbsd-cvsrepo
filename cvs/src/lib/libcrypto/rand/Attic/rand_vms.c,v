head	1.4;
access;
symbols
	butholakala:1.3
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.3.0.12
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.2.0.26
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.24
	OPENBSD_4_9_BASE:1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.2.0.22
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.18
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.20
	OPENBSD_4_6_BASE:1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.1.0.12
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.10
	OPENBSD_3_6_BASE:1.1
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.04.14.04.27.50;	author miod;	state dead;
branches;
next	1.3;

1.3
date	2011.11.03.02.34.33;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.29.05.39.25;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.16;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.48;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.15;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.11.03.02.32.13;	author djm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Don't bother compiling files which end up containing
  #if OPENSSL_SYS_NOTYOURS
  <whole file>
  #endif
@
text
@/* crypto/rand/rand_vms.c -*- mode:C; c-file-style: "eay" -*- */
/* Written by Richard Levitte <richard@@levitte.org> for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/rand.h>
#include "rand_lcl.h"

#if defined(OPENSSL_SYS_VMS)

#include <descrip.h>
#include <jpidef.h>
#include <ssdef.h>
#include <starlet.h>
#ifdef __DECC
# pragma message disable DOLLARID
#endif

/* Use 32-bit pointers almost everywhere.  Define the type to which to
 * cast a pointer passed to an external function.
 */
#if __INITIAL_POINTER_SIZE == 64
# define PTR_T __void_ptr64
# pragma pointer_size save
# pragma pointer_size 32
#else /* __INITIAL_POINTER_SIZE == 64 */
# define PTR_T void *
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

static struct items_data_st
	{
	short length, code;	/* length is amount of bytes */
	} items_data[] =
		{ { 4, JPI$_BUFIO },
		  { 4, JPI$_CPUTIM },
		  { 4, JPI$_DIRIO },
		  { 8, JPI$_LOGINTIM },
		  { 4, JPI$_PAGEFLTS },
		  { 4, JPI$_PID },
		  { 4, JPI$_WSSIZE },
		  { 0, 0 }
		};
		  
int RAND_poll(void)
	{
	long pid, iosb[2];
	int status = 0;
	struct
		{
		short length, code;
		long *buffer;
		int *retlen;
		} item[32], *pitem;
	unsigned char data_buffer[256];
	short total_length = 0;
	struct items_data_st *pitems_data;

	pitems_data = items_data;
	pitem = item;

	/* Setup */
	while (pitems_data->length
		&& (total_length + pitems_data->length <= 256))
		{
		pitem->length = pitems_data->length;
		pitem->code = pitems_data->code;
		pitem->buffer = (long *)&data_buffer[total_length];
		pitem->retlen = 0;
		total_length += pitems_data->length;
		pitems_data++;
		pitem++;
		}
	pitem->length = pitem->code = 0;

	/*
	 * Scan through all the processes in the system and add entropy with
	 * results from the processes that were possible to look at.
	 * However, view the information as only half trustable.
	 */
	pid = -1;			/* search context */
	while ((status = sys$getjpiw(0, &pid,  0, item, iosb, 0, 0))
		!= SS$_NOMOREPROC)
		{
		if (status == SS$_NORMAL)
			{
			RAND_add( (PTR_T)data_buffer, total_length,
			 total_length/2);
			}
		}
	sys$gettim(iosb);
	RAND_add( (PTR_T)iosb, sizeof(iosb), sizeof(iosb)/2);
	return 1;
}

#endif
@


1.3
log
@openssl-1.0.0e: resolve conflicts
@
text
@@


1.2
log
@resolve conflicts
@
text
@d72 11
d139 2
a140 1
			RAND_add(data_buffer, total_length, total_length/2);
d144 1
a144 1
	RAND_add((unsigned char *)iosb, sizeof(iosb), sizeof(iosb)/2);
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d104 2
a105 1
	while (pitems_data->length)
d109 1
a109 1
		pitem->buffer = (long *)data_buffer[total_length];
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d104 1
a104 2
	while (pitems_data->length
		&& (total_length + pitems_data->length <= 256))
d108 1
a108 1
		pitem->buffer = (long *)&data_buffer[total_length];
@


1.1.1.3
log
@import OpenSSL 1.0.0e
@
text
@a71 11
/* Use 32-bit pointers almost everywhere.  Define the type to which to
 * cast a pointer passed to an external function.
 */
#if __INITIAL_POINTER_SIZE == 64
# define PTR_T __void_ptr64
# pragma pointer_size save
# pragma pointer_size 32
#else /* __INITIAL_POINTER_SIZE == 64 */
# define PTR_T void *
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

d128 1
a128 2
			RAND_add( (PTR_T)data_buffer, total_length,
			 total_length/2);
d132 1
a132 1
	RAND_add( (PTR_T)iosb, sizeof(iosb), sizeof(iosb)/2);
@


