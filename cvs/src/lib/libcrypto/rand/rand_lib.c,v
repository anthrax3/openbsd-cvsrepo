head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2014.10.22.13.02.04;	author jsing;	state Exp;
branches;
next	1.19;
commitid	PjnBgKe6Buhbf937;

1.19
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.18;
commitid	yQEL1wOWIearrW15;

1.18
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.17;
commitid	nzndm3zqPmFurSaK;

1.17
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	mJUVYpkFBZ0Zv2bG;

1.16
date	2014.05.24.15.25.23;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.13.19.03;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.15.16.52.50;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.27.05.07.02;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.25;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.38;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.16;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.03;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.15.06.18.42;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.11.15;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.33;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.48;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.43;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.15;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.35;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.59;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.42;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.04.13.15.16.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@/* $OpenBSD: rand_lib.c,v 1.19 2014/07/11 08:44:49 jsing Exp $ */
/*
 * Copyright (c) 2014 Ted Unangst <tedu@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdlib.h>

#include <openssl/opensslconf.h>

#include <openssl/rand.h>

/*
 * The useful functions in this file are at the bottom.
 */
int
RAND_set_rand_method(const RAND_METHOD *meth)
{
	return 1;
}

const RAND_METHOD *
RAND_get_rand_method(void)
{
	return NULL;
}

RAND_METHOD *
RAND_SSLeay(void)
{
	return NULL;
}

#ifndef OPENSSL_NO_ENGINE
int
RAND_set_rand_engine(ENGINE *engine)
{
	return 1;
}
#endif

void
RAND_cleanup(void)
{

}

void
RAND_seed(const void *buf, int num)
{

}

void
RAND_add(const void *buf, int num, double entropy)
{

}

int
RAND_status(void)
{
	return 1;
}

int
RAND_poll(void)
{
	return 1;
}

/*
 * Hurray. You've made it to the good parts.
 */
int
RAND_bytes(unsigned char *buf, int num)
{
	if (num > 0)
		arc4random_buf(buf, num);
	return 1;
}

int
RAND_pseudo_bytes(unsigned char *buf, int num)
{
	if (num > 0)
		arc4random_buf(buf, num);
	return 1;
}
@


1.19
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rand_lib.c,v 1.18 2014/07/10 22:45:57 jsing Exp $ */
d18 2
a22 2

#include <stdlib.h>
@


1.18
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: rand_lib.c,v 1.17 2014/06/12 15:49:30 deraadt Exp $ */
a19 1
#include "cryptlib.h"
@


1.17
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d17 3
@


1.16
log
@KNF.
@
text
@d1 1
@


1.15
log
@another round of chemo for the RAND code to provide clarity.
ok deraadt
@
text
@d77 1
a77 1
       return 1;
@


1.14
log
@Replace the old OpenSSL PRNG by direct use of arc4random_buf(), keeping the
existing RAND interfaces unchanged.

All interfaces allowing external feed or seed of the RNG (either from a file
or a local entropy gathering daemon) are kept for ABI compatibility, but are
no longer do anything.

While the OpenSSL PRNG was required 15+ years ago when many systems lacked
proper entropy collection, things have evolved and one can reasonably assume
it is better to use the kernel (system global) entropy pool rather than trying
to build one's own and having to compensate for thread scheduling...

<RANT>
Whoever thought that RAND_screen(), feeding the PRNG with the contents of the
local workstation's display, under Win32, was a smart idea, ought to be banned
from security programming.
</RANT>

ok beck@@ deraadt@@ tedu@@
@
text
@d1 2
a2 3
/* crypto/rand/rand_lib.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
d4 11
a14 52
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
a15 3

#include <stdio.h>
#include <time.h>
d19 23
d43 5
a47 1
#include <openssl/engine.h>
d50 17
a66 5
#ifndef OPENSSL_NO_ENGINE
/* non-NULL if default_RAND_meth is ENGINE-provided */
static ENGINE *funct_ref =NULL;
#endif
static const RAND_METHOD *default_RAND_meth = NULL;
d68 3
a70 10
int RAND_set_rand_method(const RAND_METHOD *meth)
	{
#ifndef OPENSSL_NO_ENGINE
	if(funct_ref)
		{
		ENGINE_finish(funct_ref);
		funct_ref = NULL;
		}
#endif
	default_RAND_meth = meth;
d72 1
a72 1
	}
d74 5
a78 23
const RAND_METHOD *RAND_get_rand_method(void)
	{
	if (!default_RAND_meth)
		{
#ifndef OPENSSL_NO_ENGINE
		ENGINE *e = ENGINE_get_default_RAND();
		if(e)
			{
			default_RAND_meth = ENGINE_get_RAND(e);
			if(!default_RAND_meth)
				{
				ENGINE_finish(e);
				e = NULL;
				}
			}
		if(e)
			funct_ref = e;
		else
#endif
			default_RAND_meth = RAND_SSLeay();
		}
	return default_RAND_meth;
	}
d80 8
a87 18
#ifndef OPENSSL_NO_ENGINE
int RAND_set_rand_engine(ENGINE *engine)
	{
	const RAND_METHOD *tmp_meth = NULL;
	if(engine)
		{
		if(!ENGINE_init(engine))
			return 0;
		tmp_meth = ENGINE_get_RAND(engine);
		if(!tmp_meth)
			{
			ENGINE_finish(engine);
			return 0;
			}
		}
	/* This function releases any prior ENGINE so call it first */
	RAND_set_rand_method(tmp_meth);
	funct_ref = engine;
d89 1
a89 2
	}
#endif
d91 7
a97 45
void RAND_cleanup(void)
	{
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->cleanup)
		meth->cleanup();
	RAND_set_rand_method(NULL);
	}

void RAND_seed(const void *buf, int num)
	{
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->seed)
		meth->seed(buf,num);
	}

void RAND_add(const void *buf, int num, double entropy)
	{
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->add)
		meth->add(buf,num,entropy);
	}

int RAND_bytes(unsigned char *buf, int num)
	{
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->bytes)
		return meth->bytes(buf,num);
	return(-1);
	}

int RAND_pseudo_bytes(unsigned char *buf, int num)
	{
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->pseudorand)
		return meth->pseudorand(buf,num);
	return(-1);
	}

int RAND_status(void)
	{
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->status)
		return meth->status();
	return 0;
	}
@


1.13
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@a67 5
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#include <openssl/fips_rand.h>
#endif

a177 124

#ifdef OPENSSL_FIPS

/* FIPS DRBG initialisation code. This sets up the DRBG for use by the
 * rest of OpenSSL. 
 */

/* Entropy gatherer: use standard OpenSSL PRNG to seed (this will gather
 * entropy internally through RAND_poll().
 */

static size_t drbg_get_entropy(DRBG_CTX *ctx, unsigned char **pout,
                                int entropy, size_t min_len, size_t max_len)
        {
	/* Round up request to multiple of block size */
	min_len = ((min_len + 19) / 20) * 20;
	*pout = OPENSSL_malloc(min_len);
	if (!*pout)
		return 0;
	if (RAND_SSLeay()->bytes(*pout, min_len) <= 0)
		{
		OPENSSL_free(*pout);
		*pout = NULL;
		return 0;
		}
        return min_len;
        }

static void drbg_free_entropy(DRBG_CTX *ctx, unsigned char *out, size_t olen)
	{
	if (out)
		{
		OPENSSL_cleanse(out, olen);
		OPENSSL_free(out);
		}
	}

/* Set "additional input" when generating random data. This uses the
 * current PID, a time value and a counter.
 */

static size_t drbg_get_adin(DRBG_CTX *ctx, unsigned char **pout)
    	{
	/* Use of static variables is OK as this happens under a lock */
	static unsigned char buf[16];
	static unsigned long counter;
	FIPS_get_timevec(buf, &counter);
	*pout = buf;
	return sizeof(buf);
	}

/* RAND_add() and RAND_seed() pass through to OpenSSL PRNG so it is 
 * correctly seeded by RAND_poll().
 */

static int drbg_rand_add(DRBG_CTX *ctx, const void *in, int inlen,
				double entropy)
	{
	RAND_SSLeay()->add(in, inlen, entropy);
	return 1;
	}

static int drbg_rand_seed(DRBG_CTX *ctx, const void *in, int inlen)
	{
	RAND_SSLeay()->seed(in, inlen);
	return 1;
	}

#ifndef OPENSSL_DRBG_DEFAULT_TYPE
#define OPENSSL_DRBG_DEFAULT_TYPE	NID_aes_256_ctr
#endif
#ifndef OPENSSL_DRBG_DEFAULT_FLAGS
#define OPENSSL_DRBG_DEFAULT_FLAGS	DRBG_FLAG_CTR_USE_DF
#endif 

static int fips_drbg_type = OPENSSL_DRBG_DEFAULT_TYPE;
static int fips_drbg_flags = OPENSSL_DRBG_DEFAULT_FLAGS;

void RAND_set_fips_drbg_type(int type, int flags)
	{
	fips_drbg_type = type;
	fips_drbg_flags = flags;
	}

int RAND_init_fips(void)
	{
	DRBG_CTX *dctx;
	size_t plen;
	unsigned char pers[32], *p;
#ifndef OPENSSL_ALLOW_DUAL_EC_DRBG
	if (fips_drbg_type >> 16)
		{
		RANDerr(RAND_F_RAND_INIT_FIPS, RAND_R_DUAL_EC_DRBG_DISABLED);
		return 0;
		}
#endif
		
	dctx = FIPS_get_default_drbg();
        if (FIPS_drbg_init(dctx, fips_drbg_type, fips_drbg_flags) <= 0)
		{
		RANDerr(RAND_F_RAND_INIT_FIPS, RAND_R_ERROR_INITIALISING_DRBG);
		return 0;
		}
		
        FIPS_drbg_set_callbacks(dctx,
				drbg_get_entropy, drbg_free_entropy, 20,
				drbg_get_entropy, drbg_free_entropy);
	FIPS_drbg_set_rand_callbacks(dctx, drbg_get_adin, 0,
					drbg_rand_seed, drbg_rand_add);
	/* Personalisation string: a string followed by date time vector */
	strcpy((char *)pers, "OpenSSL DRBG2.0");
	plen = drbg_get_adin(dctx, &p);
	memcpy(pers + 16, p, plen);

        if (FIPS_drbg_instantiate(dctx, pers, sizeof(pers)) <= 0)
		{
		RANDerr(RAND_F_RAND_INIT_FIPS, RAND_R_ERROR_INSTANTIATING_DRBG);
		return 0;
		}
        FIPS_rand_set_method(FIPS_drbg_method());
	return 1;
	}

#endif
@


1.12
log
@resolve conflicts
@
text
@d213 5
a217 2
	OPENSSL_cleanse(out, olen);
	OPENSSL_free(out);
d272 8
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d63 1
d68 5
d183 113
@


1.10
log
@resolve conflicts
@
text
@a62 6
#include "rand_lcl.h"
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#include <openssl/fips_rand.h>
#endif

a66 62
static const RAND_METHOD *default_RAND_meth = NULL;

#ifdef OPENSSL_FIPS

static int fips_RAND_set_rand_method(const RAND_METHOD *meth,
					const RAND_METHOD **pmeth)
	{
	*pmeth = meth;
	return 1;
	}

static const RAND_METHOD *fips_RAND_get_rand_method(const RAND_METHOD **pmeth)
	{
	if (!*pmeth)
		{
		if(FIPS_mode())
			*pmeth=FIPS_rand_method();
		else
			*pmeth = RAND_SSLeay();
		}

	if(FIPS_mode()
		&& *pmeth != FIPS_rand_check())
	    {
	    RANDerr(RAND_F_FIPS_RAND_GET_RAND_METHOD,RAND_R_NON_FIPS_METHOD);
	    return 0;
	    }

	return *pmeth;
	}

static int (*RAND_set_rand_method_func)(const RAND_METHOD *meth,
						const RAND_METHOD **pmeth)
	= fips_RAND_set_rand_method;
static const RAND_METHOD *(*RAND_get_rand_method_func)
						(const RAND_METHOD **pmeth)
	= fips_RAND_get_rand_method;

#ifndef OPENSSL_NO_ENGINE
void int_RAND_set_callbacks(
	int (*set_rand_func)(const RAND_METHOD *meth,
						const RAND_METHOD **pmeth),
	const RAND_METHOD *(*get_rand_func)
						(const RAND_METHOD **pmeth))
	{
	RAND_set_rand_method_func = set_rand_func;
	RAND_get_rand_method_func = get_rand_func;
	}
#endif

int RAND_set_rand_method(const RAND_METHOD *meth)
	{
	return RAND_set_rand_method_func(meth, &default_RAND_meth);
	}

const RAND_METHOD *RAND_get_rand_method(void)
	{
	return RAND_get_rand_method_func(&default_RAND_meth);
	}

#else

d71 1
a129 2
#endif

@


1.9
log
@resolve conflicts
@
text
@d63 6
d73 62
a138 1
static const RAND_METHOD *default_RAND_meth = NULL;
d197 2
@


1.8
log
@resolve conflicts
@
text
@a65 2
#include <openssl/fips.h>
#include <openssl/fips_rand.h>
d105 1
a105 6
#ifdef OPENSSL_FIPS
			if(FIPS_mode())
				default_RAND_meth=FIPS_rand_method();
			else
#endif
				default_RAND_meth = RAND_SSLeay();
a106 9

#ifdef OPENSSL_FIPS
	if(FIPS_mode()
		&& default_RAND_meth != FIPS_rand_check())
	    {
	    RANDerr(RAND_F_RAND_GET_RAND_METHOD,RAND_R_NON_FIPS_METHOD);
	    return 0;
	    }
#endif
@


1.7
log
@resolve conflicts
@
text
@a89 10
#ifdef OPENSSL_FIPS
	if(FIPS_mode()
		&& default_RAND_meth != FIPS_rand_check())
	    {
	    RANDerr(RAND_F_RAND_GET_RAND_METHOD,RAND_R_NON_FIPS_METHOD);
	    return 0;
	    }
#endif


d107 6
a112 1
			default_RAND_meth = RAND_SSLeay();
d114 9
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d66 2
d90 10
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d63 1
d65 1
d67 1
d70 1
d75 1
d81 1
d90 1
d104 1
d110 1
d130 1
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d61 1
d65 12
a76 17
static ENGINE *rand_engine=NULL;

#if 0
void RAND_set_rand_method(RAND_METHOD *meth)
	{
	rand_meth=meth;
	}
#else
int RAND_set_rand_method(ENGINE *engine)
	{
	ENGINE *mtmp;
	mtmp = rand_engine;
	if (!ENGINE_init(engine))
		return 0;
	rand_engine = engine;
	/* SHOULD ERROR CHECK THIS!!! */
	ENGINE_finish(mtmp);
a78 1
#endif
d80 1
a80 1
RAND_METHOD *RAND_get_rand_method(void)
d82 38
a119 4
	if (rand_engine == NULL
		&& (rand_engine = ENGINE_get_default_RAND()) == NULL)
		return NULL;
	return ENGINE_get_RAND(rand_engine);
d124 1
a124 1
	RAND_METHOD *meth = RAND_get_rand_method();
d127 1
d132 1
a132 1
	RAND_METHOD *meth = RAND_get_rand_method();
d139 1
a139 1
	RAND_METHOD *meth = RAND_get_rand_method();
d146 1
a146 1
	RAND_METHOD *meth = RAND_get_rand_method();
d154 1
a154 1
	RAND_METHOD *meth = RAND_get_rand_method();
d162 1
a162 1
	RAND_METHOD *meth = RAND_get_rand_method();
@


1.3
log
@OpenSSL 0.9.5a merge
@
text
@d62 1
d64 1
a64 6
#ifdef NO_RAND
static RAND_METHOD *rand_meth=NULL;
#else
extern RAND_METHOD rand_ssleay_meth;
static RAND_METHOD *rand_meth= &rand_ssleay_meth;
#endif
d66 1
d71 13
d87 4
a90 1
	return(rand_meth);
d95 3
a97 2
	if (rand_meth != NULL)
		rand_meth->cleanup();
d102 3
a104 2
	if (rand_meth != NULL)
		rand_meth->seed(buf,num);
d109 3
a111 2
	if (rand_meth != NULL)
		rand_meth->add(buf,num,entropy);
d116 3
a118 2
	if (rand_meth != NULL)
		return rand_meth->bytes(buf,num);
d124 3
a126 2
	if (rand_meth != NULL)
		return rand_meth->pseudorand(buf,num);
d132 3
a134 2
	if (rand_meth != NULL)
		return rand_meth->status();
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d111 7
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@a59 1
#include <sys/types.h>
d92 1
a92 1
void RAND_bytes(unsigned char *buf, int num)
d95 1
a95 1
		rand_meth->bytes(buf,num);
d98 13
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d60 1
a61 1
#include "cryptlib.h"
a62 1
#include <openssl/engine.h>
d64 6
a69 3
/* non-NULL if default_RAND_meth is ENGINE-provided */
static ENGINE *funct_ref =NULL;
static const RAND_METHOD *default_RAND_meth = NULL;
d71 1
a71 1
int RAND_set_rand_method(const RAND_METHOD *meth)
d73 1
a73 7
	if(funct_ref)
		{
		ENGINE_finish(funct_ref);
		funct_ref = NULL;
		}
	default_RAND_meth = meth;
	return 1;
d76 1
a76 1
const RAND_METHOD *RAND_get_rand_method(void)
d78 1
a78 38
	if (!default_RAND_meth)
		{
		ENGINE *e = ENGINE_get_default_RAND();
		if(e)
			{
			default_RAND_meth = ENGINE_get_RAND(e);
			if(!default_RAND_meth)
				{
				ENGINE_finish(e);
				e = NULL;
				}
			}
		if(e)
			funct_ref = e;
		else
			default_RAND_meth = RAND_SSLeay();
		}
	return default_RAND_meth;
	}

int RAND_set_rand_engine(ENGINE *engine)
	{
	const RAND_METHOD *tmp_meth = NULL;
	if(engine)
		{
		if(!ENGINE_init(engine))
			return 0;
		tmp_meth = ENGINE_get_RAND(engine);
		if(!tmp_meth)
			{
			ENGINE_finish(engine);
			return 0;
			}
		}
	/* This function releases any prior ENGINE so call it first */
	RAND_set_rand_method(tmp_meth);
	funct_ref = engine;
	return 1;
d83 2
a84 4
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->cleanup)
		meth->cleanup();
	RAND_set_rand_method(NULL);
d89 2
a90 10
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->seed)
		meth->seed(buf,num);
	}

void RAND_add(const void *buf, int num, double entropy)
	{
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->add)
		meth->add(buf,num,entropy);
d93 1
a93 1
int RAND_bytes(unsigned char *buf, int num)
d95 2
a96 4
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->bytes)
		return meth->bytes(buf,num);
	return(-1);
a98 15
int RAND_pseudo_bytes(unsigned char *buf, int num)
	{
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->pseudorand)
		return meth->pseudorand(buf,num);
	return(-1);
	}

int RAND_status(void)
	{
	const RAND_METHOD *meth = RAND_get_rand_method();
	if (meth && meth->status)
		return meth->status();
	return 0;
	}
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@a62 1
#ifndef OPENSSL_NO_ENGINE
a63 1
#endif
a64 1
#ifndef OPENSSL_NO_ENGINE
a66 1
#endif
a70 1
#ifndef OPENSSL_NO_ENGINE
a75 1
#endif
a83 1
#ifndef OPENSSL_NO_ENGINE
a96 1
#endif
a101 1
#ifndef OPENSSL_NO_ENGINE
a120 1
#endif
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a65 2
#include <openssl/fips.h>
#include <openssl/fips_rand.h>
a87 10
#ifdef OPENSSL_FIPS
	if(FIPS_mode()
		&& default_RAND_meth != FIPS_rand_check())
	    {
	    RANDerr(RAND_F_RAND_GET_RAND_METHOD,RAND_R_NON_FIPS_METHOD);
	    return 0;
	    }
#endif


@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@d90 10
d117 1
a117 6
#ifdef OPENSSL_FIPS
			if(FIPS_mode())
				default_RAND_meth=FIPS_rand_method();
			else
#endif
				default_RAND_meth = RAND_SSLeay();
a118 9

#ifdef OPENSSL_FIPS
	if(FIPS_mode()
		&& default_RAND_meth != FIPS_rand_check())
	    {
	    RANDerr(RAND_F_RAND_GET_RAND_METHOD,RAND_R_NON_FIPS_METHOD);
	    return 0;
	    }
#endif
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d66 2
d107 6
a112 1
			default_RAND_meth = RAND_SSLeay();
d114 9
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a62 6
#include "rand_lcl.h"
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#include <openssl/fips_rand.h>
#endif

a66 62
static const RAND_METHOD *default_RAND_meth = NULL;

#ifdef OPENSSL_FIPS

static int fips_RAND_set_rand_method(const RAND_METHOD *meth,
					const RAND_METHOD **pmeth)
	{
	*pmeth = meth;
	return 1;
	}

static const RAND_METHOD *fips_RAND_get_rand_method(const RAND_METHOD **pmeth)
	{
	if (!*pmeth)
		{
		if(FIPS_mode())
			*pmeth=FIPS_rand_method();
		else
			*pmeth = RAND_SSLeay();
		}

	if(FIPS_mode()
		&& *pmeth != FIPS_rand_check())
	    {
	    RANDerr(RAND_F_FIPS_RAND_GET_RAND_METHOD,RAND_R_NON_FIPS_METHOD);
	    return 0;
	    }

	return *pmeth;
	}

static int (*RAND_set_rand_method_func)(const RAND_METHOD *meth,
						const RAND_METHOD **pmeth)
	= fips_RAND_set_rand_method;
static const RAND_METHOD *(*RAND_get_rand_method_func)
						(const RAND_METHOD **pmeth)
	= fips_RAND_get_rand_method;

#ifndef OPENSSL_NO_ENGINE
void int_RAND_set_callbacks(
	int (*set_rand_func)(const RAND_METHOD *meth,
						const RAND_METHOD **pmeth),
	const RAND_METHOD *(*get_rand_func)
						(const RAND_METHOD **pmeth))
	{
	RAND_set_rand_method_func = set_rand_func;
	RAND_get_rand_method_func = get_rand_func;
	}
#endif

int RAND_set_rand_method(const RAND_METHOD *meth)
	{
	return RAND_set_rand_method_func(meth, &default_RAND_meth);
	}

const RAND_METHOD *RAND_get_rand_method(void)
	{
	return RAND_get_rand_method_func(&default_RAND_meth);
	}

#else

d71 1
a129 2
#endif

@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d63 6
d73 62
a138 1
static const RAND_METHOD *default_RAND_meth = NULL;
d197 2
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a62 1

a66 5
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#include <openssl/fips_rand.h>
#endif

a176 113

#ifdef OPENSSL_FIPS

/* FIPS DRBG initialisation code. This sets up the DRBG for use by the
 * rest of OpenSSL. 
 */

/* Entropy gatherer: use standard OpenSSL PRNG to seed (this will gather
 * entropy internally through RAND_poll().
 */

static size_t drbg_get_entropy(DRBG_CTX *ctx, unsigned char **pout,
                                int entropy, size_t min_len, size_t max_len)
        {
	/* Round up request to multiple of block size */
	min_len = ((min_len + 19) / 20) * 20;
	*pout = OPENSSL_malloc(min_len);
	if (!*pout)
		return 0;
	if (RAND_SSLeay()->bytes(*pout, min_len) <= 0)
		{
		OPENSSL_free(*pout);
		*pout = NULL;
		return 0;
		}
        return min_len;
        }

static void drbg_free_entropy(DRBG_CTX *ctx, unsigned char *out, size_t olen)
	{
	OPENSSL_cleanse(out, olen);
	OPENSSL_free(out);
	}

/* Set "additional input" when generating random data. This uses the
 * current PID, a time value and a counter.
 */

static size_t drbg_get_adin(DRBG_CTX *ctx, unsigned char **pout)
    	{
	/* Use of static variables is OK as this happens under a lock */
	static unsigned char buf[16];
	static unsigned long counter;
	FIPS_get_timevec(buf, &counter);
	*pout = buf;
	return sizeof(buf);
	}

/* RAND_add() and RAND_seed() pass through to OpenSSL PRNG so it is 
 * correctly seeded by RAND_poll().
 */

static int drbg_rand_add(DRBG_CTX *ctx, const void *in, int inlen,
				double entropy)
	{
	RAND_SSLeay()->add(in, inlen, entropy);
	return 1;
	}

static int drbg_rand_seed(DRBG_CTX *ctx, const void *in, int inlen)
	{
	RAND_SSLeay()->seed(in, inlen);
	return 1;
	}

#ifndef OPENSSL_DRBG_DEFAULT_TYPE
#define OPENSSL_DRBG_DEFAULT_TYPE	NID_aes_256_ctr
#endif
#ifndef OPENSSL_DRBG_DEFAULT_FLAGS
#define OPENSSL_DRBG_DEFAULT_FLAGS	DRBG_FLAG_CTR_USE_DF
#endif 

static int fips_drbg_type = OPENSSL_DRBG_DEFAULT_TYPE;
static int fips_drbg_flags = OPENSSL_DRBG_DEFAULT_FLAGS;

void RAND_set_fips_drbg_type(int type, int flags)
	{
	fips_drbg_type = type;
	fips_drbg_flags = flags;
	}

int RAND_init_fips(void)
	{
	DRBG_CTX *dctx;
	size_t plen;
	unsigned char pers[32], *p;
	dctx = FIPS_get_default_drbg();
        if (FIPS_drbg_init(dctx, fips_drbg_type, fips_drbg_flags) <= 0)
		{
		RANDerr(RAND_F_RAND_INIT_FIPS, RAND_R_ERROR_INITIALISING_DRBG);
		return 0;
		}
		
        FIPS_drbg_set_callbacks(dctx,
				drbg_get_entropy, drbg_free_entropy, 20,
				drbg_get_entropy, drbg_free_entropy);
	FIPS_drbg_set_rand_callbacks(dctx, drbg_get_adin, 0,
					drbg_rand_seed, drbg_rand_add);
	/* Personalisation string: a string followed by date time vector */
	strcpy((char *)pers, "OpenSSL DRBG2.0");
	plen = drbg_get_adin(dctx, &p);
	memcpy(pers + 16, p, plen);

        if (FIPS_drbg_instantiate(dctx, pers, sizeof(pers)) <= 0)
		{
		RANDerr(RAND_F_RAND_INIT_FIPS, RAND_R_ERROR_INSTANTIATING_DRBG);
		return 0;
		}
        FIPS_rand_set_method(FIPS_drbg_method());
	return 1;
	}

#endif
@


1.1.1.9
log
@Import OpenSSL 1.0.1g
@
text
@d213 2
a214 5
	if (out)
		{
		OPENSSL_cleanse(out, olen);
		OPENSSL_free(out);
		}
a268 8
#ifndef OPENSSL_ALLOW_DUAL_EC_DRBG
	if (fips_drbg_type >> 16)
		{
		RANDerr(RAND_F_RAND_INIT_FIPS, RAND_R_DUAL_EC_DRBG_DISABLED);
		return 0;
		}
#endif
		
@


