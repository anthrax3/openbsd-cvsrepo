head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7;
locks; strict;
comment	@ * @;


1.7
date	2015.12.09.14.07.55;	author bcook;	state Exp;
branches;
next	1.6;
commitid	8BK3YVb1wtX2zPly;

1.6
date	2014.07.08.14.30.23;	author bcook;	state Exp;
branches;
next	1.5;
commitid	t7zz4IhNSGmN4SeI;

1.5
date	2014.06.24.18.12.09;	author jsing;	state Exp;
branches;
next	1.4;
commitid	isQIlSsqeyPjhRvK;

1.4
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2014.05.31.23.33.33;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	IkBbAEUFVs8n6C69;

1.2
date	2014.05.01.16.06.24;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.01.13.15.22;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Change the counter argument for CRYPTO_chacha_20 to be 64-bits on all platforms.

The recently-added EVP_aead_chacha20_poly1305_ietf() function, which implements
informational RFC 7539, "ChaCha20 and Poly1305 for IETF Protocols", needs a
64-bit counter to avoid truncation on 32-bit platforms.

The existing TLS ChaCha20-Poly1305 ciphersuite is not impacted by this, but
making this change requires an ABI bump.

ok jsing@@, "Looks sane" beck@@
@
text
@/* $OpenBSD: chacha.c,v 1.6 2014/07/08 14:30:23 bcook Exp $ */
/*
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdint.h>

#include <openssl/chacha.h>

#include "chacha-merged.c"

void
ChaCha_set_key(ChaCha_ctx *ctx, const unsigned char *key, uint32_t keybits)
{
	chacha_keysetup((chacha_ctx *)ctx, key, keybits);
	ctx->unused = 0;
}

void
ChaCha_set_iv(ChaCha_ctx *ctx, const unsigned char *iv,
    const unsigned char *counter)
{
	chacha_ivsetup((chacha_ctx *)ctx, iv, counter);
	ctx->unused = 0;
}

void
ChaCha(ChaCha_ctx *ctx, unsigned char *out, const unsigned char *in, size_t len)
{
	unsigned char *k;
	int i, l;

	/* Consume remaining keystream, if any exists. */
	if (ctx->unused > 0) {
		k = ctx->ks + 64 - ctx->unused;
		l = (len > ctx->unused) ? ctx->unused : len;
		for (i = 0; i < l; i++)
			*(out++) = *(in++) ^ *(k++);
		ctx->unused -= l;
		len -= l;
	}

	chacha_encrypt_bytes((chacha_ctx *)ctx, in, out, (uint32_t)len);
}

void
CRYPTO_chacha_20(unsigned char *out, const unsigned char *in, size_t len,
    const unsigned char key[32], const unsigned char iv[8], uint64_t counter)
{
	struct chacha_ctx ctx;

	/*
	 * chacha_ivsetup expects the counter to be in u8. Rather than
	 * converting size_t to u8 and then back again, pass a counter of
	 * NULL and manually assign it afterwards.
	 */
	chacha_keysetup(&ctx, key, 256);
	chacha_ivsetup(&ctx, iv, NULL);
	if (counter != 0) {
		ctx.input[12] = (uint32_t)counter;
		ctx.input[13] = (uint32_t)(counter >> 32);
	}

	chacha_encrypt_bytes(&ctx, in, out, (uint32_t)len);
}
@


1.6
log
@add missing stdint. include for uint32_t, etc.

ok beck@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: chacha.c,v 1.5 2014/06/24 18:12:09 jsing Exp $ */
d60 1
a60 1
    const unsigned char key[32], const unsigned char iv[8], size_t counter)
d73 1
a73 1
		ctx.input[13] = (uint32_t)(((uint64_t)counter) >> 32);
@


1.5
log
@If a chacha operation does not consume all of the generated key stream,
ensure that we save it and consume it on subsequent writes. Otherwise we
end up discarding part of the key stream and instead generate a new block
at the start of the next write.

This was only an issue for callers that did multiple writes that are not
multiples of 64 bytes - in particular, the ChaCha20Poly1305 usage does not
hit this problem since it performs encryption in a single-shot. For the
same reason, this is also a non-issue when openssl(1) is used to encrypt
with ChaCha.

Issue identified by insane coder; reported to bugs@@ by Joseph M. Schwartz.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: chacha.c,v 1.4 2014/06/12 15:49:28 deraadt Exp $ */
d18 2
d21 1
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d25 1
d33 1
d39 13
@


1.3
log
@Get the public headers from the official place with <openssl/ >
from Brent Cook
@
text
@d1 1
@


1.2
log
@Provide an EVP implementation for ChaCha.

ok miod@@
@
text
@d17 1
a17 1
#include "chacha.h"
@


1.1
log
@Add ChaCha to libcrypto, based on djb's public domain implementation.

ok deraadt@@
@
text
@d17 1
d19 19
@

