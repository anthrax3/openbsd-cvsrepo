head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.2
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.9;
commitid	kT0fLt3r4lroFJra;

1.9
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.8;
commitid	5KSZBoxiLebzObKt;

1.8
date	2014.10.28.05.46.56;	author miod;	state Exp;
branches;
next	1.7;
commitid	hDZmp09ZEY5wcTE1;

1.7
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.6;
commitid	yQEL1wOWIearrW15;

1.6
date	2014.07.10.22.45.58;	author jsing;	state Exp;
branches;
next	1.5;
commitid	nzndm3zqPmFurSaK;

1.5
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.21.16.32.06;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.14.09.36.26;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: ts_conf.c,v 1.9 2015/02/11 03:19:37 doug Exp $ */
/* Written by Zoltan Glozik (zglozik@@stones.com) for the OpenSSL
 * project 2002.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/ts.h>

#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif

/* Macro definitions for the configuration file. */

#define	BASE_SECTION			"tsa"
#define	ENV_DEFAULT_TSA			"default_tsa"
#define	ENV_SERIAL			"serial"
#define ENV_CRYPTO_DEVICE		"crypto_device"
#define	ENV_SIGNER_CERT			"signer_cert"
#define	ENV_CERTS			"certs"
#define	ENV_SIGNER_KEY			"signer_key"
#define	ENV_DEFAULT_POLICY		"default_policy"
#define	ENV_OTHER_POLICIES		"other_policies"
#define	ENV_DIGESTS			"digests"
#define	ENV_ACCURACY			"accuracy"
#define	ENV_ORDERING			"ordering"
#define	ENV_TSA_NAME			"tsa_name"
#define	ENV_ESS_CERT_ID_CHAIN		"ess_cert_id_chain"
#define	ENV_VALUE_SECS			"secs"
#define	ENV_VALUE_MILLISECS		"millisecs"
#define	ENV_VALUE_MICROSECS		"microsecs"
#define	ENV_CLOCK_PRECISION_DIGITS	"clock_precision_digits"
#define	ENV_VALUE_YES			"yes"
#define	ENV_VALUE_NO			"no"

/* Function definitions for certificate and key loading. */

X509 *
TS_CONF_load_cert(const char *file)
{
	BIO *cert = NULL;
	X509 *x = NULL;

	if ((cert = BIO_new_file(file, "r")) == NULL)
		goto end;
	x = PEM_read_bio_X509_AUX(cert, NULL, NULL, NULL);

end:
	if (x == NULL)
		fprintf(stderr, "unable to load certificate: %s\n", file);
	BIO_free(cert);
	return x;
}

STACK_OF(X509) *
TS_CONF_load_certs(const char *file)
{
	BIO *certs = NULL;
	STACK_OF(X509) *othercerts = NULL;
	STACK_OF(X509_INFO) *allcerts = NULL;
	int i;

	if (!(certs = BIO_new_file(file, "r")))
		goto end;

	if (!(othercerts = sk_X509_new_null()))
		goto end;
	allcerts = PEM_X509_INFO_read_bio(certs, NULL, NULL, NULL);
	for (i = 0; i < sk_X509_INFO_num(allcerts); i++) {
		X509_INFO *xi = sk_X509_INFO_value(allcerts, i);
		if (xi->x509) {
			if (sk_X509_push(othercerts, xi->x509) == 0) {
				sk_X509_pop_free(othercerts, X509_free);
				othercerts = NULL;
				goto end;
			}
			xi->x509 = NULL;
		}
	}

end:
	if (othercerts == NULL)
		fprintf(stderr, "unable to load certificates: %s\n", file);
	sk_X509_INFO_pop_free(allcerts, X509_INFO_free);
	BIO_free(certs);
	return othercerts;
}

EVP_PKEY *
TS_CONF_load_key(const char *file, const char *pass)
{
	BIO *key = NULL;
	EVP_PKEY *pkey = NULL;

	if (!(key = BIO_new_file(file, "r")))
		goto end;
	pkey = PEM_read_bio_PrivateKey(key, NULL, NULL, (char *) pass);

end:
	if (pkey == NULL)
		fprintf(stderr, "unable to load private key: %s\n", file);
	BIO_free(key);
	return pkey;
}

/* Function definitions for handling configuration options. */

static void
TS_CONF_lookup_fail(const char *name, const char *tag)
{
	fprintf(stderr, "variable lookup failed for %s::%s\n", name, tag);
}

static void
TS_CONF_invalid(const char *name, const char *tag)
{
	fprintf(stderr, "invalid variable value for %s::%s\n", name, tag);
}

const char *
TS_CONF_get_tsa_section(CONF *conf, const char *section)
{
	if (!section) {
		section = NCONF_get_string(conf, BASE_SECTION, ENV_DEFAULT_TSA);
		if (!section)
			TS_CONF_lookup_fail(BASE_SECTION, ENV_DEFAULT_TSA);
	}
	return section;
}

int
TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
    TS_RESP_CTX *ctx)
{
	int ret = 0;
	char *serial = NCONF_get_string(conf, section, ENV_SERIAL);

	if (!serial) {
		TS_CONF_lookup_fail(section, ENV_SERIAL);
		goto err;
	}
	TS_RESP_CTX_set_serial_cb(ctx, cb, serial);

	ret = 1;

err:
	return ret;
}

#ifndef OPENSSL_NO_ENGINE

int
TS_CONF_set_crypto_device(CONF *conf, const char *section, const char *device)
{
	int ret = 0;

	if (!device)
		device = NCONF_get_string(conf, section, ENV_CRYPTO_DEVICE);

	if (device && !TS_CONF_set_default_engine(device)) {
		TS_CONF_invalid(section, ENV_CRYPTO_DEVICE);
		goto err;
	}
	ret = 1;

err:
	return ret;
}

int
TS_CONF_set_default_engine(const char *name)
{
	ENGINE *e = NULL;
	int ret = 0;

	/* Leave the default if builtin specified. */
	if (strcmp(name, "builtin") == 0)
		return 1;

	if (!(e = ENGINE_by_id(name)))
		goto err;
	/* All the operations are going to be carried out by the engine. */
	if (!ENGINE_set_default(e, ENGINE_METHOD_ALL))
		goto err;
	ret = 1;

err:
	if (!ret) {
		TSerror(TS_R_COULD_NOT_SET_ENGINE);
		ERR_asprintf_error_data("engine:%s", name);
	}
	if (e)
		ENGINE_free(e);
	return ret;
}

#endif

int
TS_CONF_set_signer_cert(CONF *conf, const char *section, const char *cert,
    TS_RESP_CTX *ctx)
{
	int ret = 0;
	X509 *cert_obj = NULL;

	if (!cert)
		cert = NCONF_get_string(conf, section, ENV_SIGNER_CERT);
	if (!cert) {
		TS_CONF_lookup_fail(section, ENV_SIGNER_CERT);
		goto err;
	}
	if (!(cert_obj = TS_CONF_load_cert(cert)))
		goto err;
	if (!TS_RESP_CTX_set_signer_cert(ctx, cert_obj))
		goto err;

	ret = 1;

err:
	X509_free(cert_obj);
	return ret;
}

int
TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
    TS_RESP_CTX *ctx)
{
	int ret = 0;
	STACK_OF(X509) *certs_obj = NULL;

	if (!certs)
		certs = NCONF_get_string(conf, section, ENV_CERTS);
	/* Certificate chain is optional. */
	if (!certs)
		goto end;
	if (!(certs_obj = TS_CONF_load_certs(certs)))
		goto err;
	if (!TS_RESP_CTX_set_certs(ctx, certs_obj))
		goto err;

end:
	ret = 1;
err:
	sk_X509_pop_free(certs_obj, X509_free);
	return ret;
}

int
TS_CONF_set_signer_key(CONF *conf, const char *section, const char *key,
    const char *pass, TS_RESP_CTX *ctx)
{
	int ret = 0;
	EVP_PKEY *key_obj = NULL;

	if (!key)
		key = NCONF_get_string(conf, section, ENV_SIGNER_KEY);
	if (!key) {
		TS_CONF_lookup_fail(section, ENV_SIGNER_KEY);
		goto err;
	}
	if (!(key_obj = TS_CONF_load_key(key, pass)))
		goto err;
	if (!TS_RESP_CTX_set_signer_key(ctx, key_obj))
		goto err;

	ret = 1;

err:
	EVP_PKEY_free(key_obj);
	return ret;
}

int
TS_CONF_set_def_policy(CONF *conf, const char *section, const char *policy,
    TS_RESP_CTX *ctx)
{
	int ret = 0;
	ASN1_OBJECT *policy_obj = NULL;

    	if (!policy)
		policy = NCONF_get_string(conf, section, ENV_DEFAULT_POLICY);
	if (!policy) {
		TS_CONF_lookup_fail(section, ENV_DEFAULT_POLICY);
		goto err;
	}
	if (!(policy_obj = OBJ_txt2obj(policy, 0))) {
		TS_CONF_invalid(section, ENV_DEFAULT_POLICY);
		goto err;
	}
	if (!TS_RESP_CTX_set_def_policy(ctx, policy_obj))
		goto err;

	ret = 1;

err:
	ASN1_OBJECT_free(policy_obj);
	return ret;
}

int
TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx)
{
	int ret = 0;
	int i;
	STACK_OF(CONF_VALUE) *list = NULL;
	char *policies = NCONF_get_string(conf, section, ENV_OTHER_POLICIES);

	/* If no other policy is specified, that's fine. */
	if (policies && !(list = X509V3_parse_list(policies))) {
		TS_CONF_invalid(section, ENV_OTHER_POLICIES);
		goto err;
	}
	for (i = 0; i < sk_CONF_VALUE_num(list); ++i) {
		CONF_VALUE *val = sk_CONF_VALUE_value(list, i);
		const char *extval = val->value ? val->value : val->name;
		ASN1_OBJECT *objtmp;
		if (!(objtmp = OBJ_txt2obj(extval, 0))) {
			TS_CONF_invalid(section, ENV_OTHER_POLICIES);
			goto err;
		}
		if (!TS_RESP_CTX_add_policy(ctx, objtmp))
			goto err;
		ASN1_OBJECT_free(objtmp);
	}

	ret = 1;

err:
	sk_CONF_VALUE_pop_free(list, X509V3_conf_free);
	return ret;
}

int
TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx)
{
	int ret = 0;
	int i;
	STACK_OF(CONF_VALUE) *list = NULL;
	char *digests = NCONF_get_string(conf, section, ENV_DIGESTS);

	if (!digests) {
		TS_CONF_lookup_fail(section, ENV_DIGESTS);
		goto err;
	}
	if (!(list = X509V3_parse_list(digests))) {
		TS_CONF_invalid(section, ENV_DIGESTS);
		goto err;
	}
	if (sk_CONF_VALUE_num(list) == 0) {
		TS_CONF_invalid(section, ENV_DIGESTS);
		goto err;
	}
	for (i = 0; i < sk_CONF_VALUE_num(list); ++i) {
		CONF_VALUE *val = sk_CONF_VALUE_value(list, i);
		const char *extval = val->value ? val->value : val->name;
		const EVP_MD *md;
		if (!(md = EVP_get_digestbyname(extval))) {
			TS_CONF_invalid(section, ENV_DIGESTS);
			goto err;
		}
		if (!TS_RESP_CTX_add_md(ctx, md))
			goto err;
	}

	ret = 1;

err:
	sk_CONF_VALUE_pop_free(list, X509V3_conf_free);
	return ret;
}

int
TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx)
{
	int ret = 0;
	int i;
	int secs = 0, millis = 0, micros = 0;
	STACK_OF(CONF_VALUE) *list = NULL;
	char *accuracy = NCONF_get_string(conf, section, ENV_ACCURACY);

	if (accuracy && !(list = X509V3_parse_list(accuracy))) {
		TS_CONF_invalid(section, ENV_ACCURACY);
		goto err;
	}
	for (i = 0; i < sk_CONF_VALUE_num(list); ++i) {
		CONF_VALUE *val = sk_CONF_VALUE_value(list, i);
		if (strcmp(val->name, ENV_VALUE_SECS) == 0) {
			if (val->value)
				secs = atoi(val->value);
		} else if (strcmp(val->name, ENV_VALUE_MILLISECS) == 0) {
			if (val->value)
				millis = atoi(val->value);
		} else if (strcmp(val->name, ENV_VALUE_MICROSECS) == 0) {
			if (val->value)
				micros = atoi(val->value);
		} else {
			TS_CONF_invalid(section, ENV_ACCURACY);
			goto err;
		}
	}
	if (!TS_RESP_CTX_set_accuracy(ctx, secs, millis, micros))
		goto err;

	ret = 1;

err:
	sk_CONF_VALUE_pop_free(list, X509V3_conf_free);
	return ret;
}

int
TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,
    TS_RESP_CTX *ctx)
{
	int ret = 0;
	long digits = 0;

	/* If not specified, set the default value to 0, i.e. sec  precision */
	if (!NCONF_get_number_e(conf, section, ENV_CLOCK_PRECISION_DIGITS,
	    &digits))
		digits = 0;
	if (digits < 0 || digits > TS_MAX_CLOCK_PRECISION_DIGITS) {
		TS_CONF_invalid(section, ENV_CLOCK_PRECISION_DIGITS);
		goto err;
	}

	if (!TS_RESP_CTX_set_clock_precision_digits(ctx, digits))
		goto err;

	return 1;

err:
	return ret;
}

static int
TS_CONF_add_flag(CONF *conf, const char *section, const char *field, int flag,
    TS_RESP_CTX *ctx)
{
	/* Default is false. */
	const char *value = NCONF_get_string(conf, section, field);

	if (value) {
		if (strcmp(value, ENV_VALUE_YES) == 0)
			TS_RESP_CTX_add_flags(ctx, flag);
		else if (strcmp(value, ENV_VALUE_NO) != 0) {
			TS_CONF_invalid(section, field);
			return 0;
		}
	}

	return 1;
}

int
TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx)
{
	return TS_CONF_add_flag(conf, section, ENV_ORDERING, TS_ORDERING, ctx);
}

int
TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx)
{
	return TS_CONF_add_flag(conf, section, ENV_TSA_NAME, TS_TSA_NAME, ctx);
}

int
TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section, TS_RESP_CTX *ctx)
{
	return TS_CONF_add_flag(conf, section, ENV_ESS_CERT_ID_CHAIN,
	    TS_ESS_CERT_ID_CHAIN, ctx);
}
@


1.9
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_conf.c,v 1.8 2014/10/28 05:46:56 miod Exp $ */
d248 1
a248 2
		TSerr(TS_F_TS_CONF_SET_DEFAULT_ENGINE,
		    TS_R_COULD_NOT_SET_ENGINE);
@


1.8
log
@Check the result of sk_*_push() operations for failure.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_conf.c,v 1.7 2014/07/11 08:44:49 jsing Exp $ */
d64 1
@


1.7
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_conf.c,v 1.6 2014/07/10 22:45:58 jsing Exp $ */
d113 2
a114 1
STACK_OF(X509) *TS_CONF_load_certs(const char *file)
d130 5
a134 1
			sk_X509_push(othercerts, xi->x509);
@


1.6
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: ts_conf.c,v 1.5 2014/06/12 15:49:31 deraadt Exp $ */
a63 1
#include "cryptlib.h"
d65 2
a69 1
#include <openssl/ts.h>
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.4
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d1 1
a1 1
/* crypto/ts/ts_conf.c */
@


1.3
log
@KNF.
@
text
@d242 1
a242 1
		ERR_add_error_data(2, "engine:", name);
@


1.2
log
@Remove the nCipher CHIL engine.  It is not standalone and depends on
external libraries that aren't covered by the same license.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d88 1
a88 1
#define	ENV_CLOCK_PRECISION_DIGITS	"clock_precision_digits" 
d94 3
a96 2
X509 *TS_CONF_load_cert(const char *file)
	{
d100 2
a101 1
	if ((cert = BIO_new_file(file, "r")) == NULL) goto end;
d103 1
d109 1
a109 1
	}
d112 1
a112 1
	{
d118 2
a119 1
	if (!(certs = BIO_new_file(file, "r"))) goto end;
d121 2
a122 1
	if (!(othercerts = sk_X509_new_null())) goto end;
d124 1
a124 2
	for(i = 0; i < sk_X509_INFO_num(allcerts); i++)
		{
d126 1
a126 2
		if (xi->x509)
			{
a128 1
			}
d130 2
d138 1
a138 1
	}
d140 3
a142 2
EVP_PKEY *TS_CONF_load_key(const char *file, const char *pass)
	{
d146 2
a147 1
	if (!(key = BIO_new_file(file, "r"))) goto end;
d149 2
a150 1
 end:
d155 1
a155 1
	}
d159 3
a161 2
static void TS_CONF_lookup_fail(const char *name, const char *tag)
	{
d163 1
a163 1
	}
d165 3
a167 2
static void TS_CONF_invalid(const char *name, const char *tag)
	{
d169 1
a169 1
	}
d171 4
a174 4
const char *TS_CONF_get_tsa_section(CONF *conf, const char *section)
	{
	if (!section)
		{
d178 1
a178 1
		}
d180 1
a180 1
	}
d182 4
a185 3
int TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
		       TS_RESP_CTX *ctx)
	{
d188 2
a189 2
	if (!serial)
		{
d192 1
a192 1
		}
d196 2
a197 1
 err:
d199 1
a199 1
	}
d203 3
a205 3
int TS_CONF_set_crypto_device(CONF *conf, const char *section,
			      const char *device)
	{
d207 1
a207 1
	
d209 1
a209 2
		device = NCONF_get_string(conf, section,
					  ENV_CRYPTO_DEVICE);
d211 1
a211 2
	if (device && !TS_CONF_set_default_engine(device))
		{
d214 1
a214 1
		}
d216 2
a217 1
 err:
d219 1
a219 1
	}
d221 3
a223 2
int TS_CONF_set_default_engine(const char *name)
	{
d228 2
a229 1
	if (strcmp(name, "builtin") == 0) return 1;
d231 2
a232 1
	if (!(e = ENGINE_by_id(name))) goto err;
d234 2
a235 1
	if (!ENGINE_set_default(e, ENGINE_METHOD_ALL)) goto err;
d237 5
a241 5
 err:
	if (!ret)
		{
		TSerr(TS_F_TS_CONF_SET_DEFAULT_ENGINE, 
		      TS_R_COULD_NOT_SET_ENGINE);
d243 3
a245 2
		}
	if (e) ENGINE_free(e);
d247 1
a247 1
	}
d251 4
a254 3
int TS_CONF_set_signer_cert(CONF *conf, const char *section,
			    const char *cert, TS_RESP_CTX *ctx)
	{
d257 2
a258 1
	if (!cert) 
d260 1
a260 2
	if (!cert)
		{
d263 1
a263 1
		}
d270 2
a271 1
 err:
d274 1
a274 1
	}
d276 4
a279 3
int TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
		      TS_RESP_CTX *ctx)
	{
d282 2
a283 1
	if (!certs) 
d286 8
a293 4
	if (!certs) goto end;
	if (!(certs_obj = TS_CONF_load_certs(certs))) goto err;
	if (!TS_RESP_CTX_set_certs(ctx, certs_obj)) goto err;
 end:
d295 1
a295 1
 err:
d298 1
a298 1
	}
d300 4
a303 4
int TS_CONF_set_signer_key(CONF *conf, const char *section,
			   const char *key, const char *pass,
			   TS_RESP_CTX *ctx)
	{
d306 2
a307 1
	if (!key) 
d309 1
a309 2
	if (!key)
		{
d312 5
a316 3
		}
	if (!(key_obj = TS_CONF_load_key(key, pass))) goto err;
	if (!TS_RESP_CTX_set_signer_key(ctx, key_obj)) goto err;
d319 2
a320 1
 err:
d323 1
a323 1
	}
d325 4
a328 3
int TS_CONF_set_def_policy(CONF *conf, const char *section,
			   const char *policy, TS_RESP_CTX *ctx)
	{
d331 4
a334 5
	if (!policy) 
		policy = NCONF_get_string(conf, section, 
					  ENV_DEFAULT_POLICY);
	if (!policy)
		{
d337 2
a338 3
		}
	if (!(policy_obj = OBJ_txt2obj(policy, 0)))
		{
d341 1
a341 1
		}
d346 2
a347 1
 err:
d350 1
a350 1
	}
d352 3
a354 3
int TS_CONF_set_policies(CONF *conf, const char *section,
			 TS_RESP_CTX *ctx)
	{
d358 2
a359 2
	char *policies = NCONF_get_string(conf, section, 
					  ENV_OTHER_POLICIES);
d361 1
a361 2
	if (policies && !(list = X509V3_parse_list(policies)))
		{
d364 2
a365 3
		}
	for (i = 0; i < sk_CONF_VALUE_num(list); ++i)
		{
d369 1
a369 2
		if (!(objtmp = OBJ_txt2obj(extval, 0)))
			{
d372 1
a372 1
			}
d376 1
a376 1
		}
d379 2
a380 1
 err:
d383 1
a383 1
	}
d385 3
a387 3
int TS_CONF_set_digests(CONF *conf, const char *section,
			TS_RESP_CTX *ctx)
	{
d392 2
a393 2
	if (!digests)
		{
d396 2
a397 3
		}
	if (!(list = X509V3_parse_list(digests)))
		{
d400 2
a401 3
		}
	if (sk_CONF_VALUE_num(list) == 0)
		{
d404 2
a405 3
		}
	for (i = 0; i < sk_CONF_VALUE_num(list); ++i)
		{
d409 1
a409 2
		if (!(md = EVP_get_digestbyname(extval)))
			{
d412 1
a412 1
			}
d415 1
a415 1
		}
d418 2
a419 1
 err:
d422 1
a422 1
	}
d424 3
a426 2
int TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx)
	{
d433 1
a433 2
	if (accuracy && !(list = X509V3_parse_list(accuracy)))
		{
d436 2
a437 3
		}
	for (i = 0; i < sk_CONF_VALUE_num(list); ++i)
		{
d439 10
a448 14
		if (strcmp(val->name, ENV_VALUE_SECS) == 0) 
			{
			if (val->value) secs = atoi(val->value);
			}
		else if (strcmp(val->name, ENV_VALUE_MILLISECS) == 0)
			{
			if (val->value) millis = atoi(val->value);
			}
		else if (strcmp(val->name, ENV_VALUE_MICROSECS) == 0)
			{
			if (val->value) micros = atoi(val->value);
			}
		else
			{
a450 1
			}
d452 1
d457 2
a458 1
 err:
d461 1
a461 1
	}
d463 4
a466 3
int TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,
				       TS_RESP_CTX *ctx)
	{
d469 1
a469 1
	
d472 1
a472 1
				&digits))
d474 1
a474 2
	if (digits < 0 || digits > TS_MAX_CLOCK_PRECISION_DIGITS)
		{
d477 1
a477 1
		}
d483 2
a484 1
 err:
d486 1
a486 1
	}
d488 4
a491 3
static int TS_CONF_add_flag(CONF *conf, const char *section, const char *field,
			    int flag, TS_RESP_CTX *ctx)
	{
d494 2
a495 2
	if (value)
		{
d498 1
a498 2
		else if (strcmp(value, ENV_VALUE_NO) != 0)
			{
a500 1
			}
d502 1
d505 1
a505 1
	}
d507 3
a509 2
int TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx)
	{
d511 1
a511 1
	}
d513 3
a515 2
int TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx)
	{
d517 1
a517 1
	}
d519 6
a524 6
int TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section,
				  TS_RESP_CTX *ctx)
	{
	return TS_CONF_add_flag(conf, section, ENV_ESS_CERT_ID_CHAIN, 
				TS_ESS_CERT_ID_CHAIN, ctx);
	}
@


1.1
log
@Initial revision
@
text
@a219 3
	/* Enable the use of the NCipher HSM for forked children. */
	if (strcmp(name, "chil") == 0) 
		ENGINE_ctrl(e, ENGINE_CTRL_CHIL_SET_FORKCHECK, 1, 0, 0);
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@
