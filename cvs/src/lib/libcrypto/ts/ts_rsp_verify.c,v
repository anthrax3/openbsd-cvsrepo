head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.17;
commitid	kT0fLt3r4lroFJra;

1.17
date	2016.11.05.15.19.07;	author miod;	state Exp;
branches;
next	1.16;
commitid	Ms5B6ylP8je6xQgm;

1.16
date	2015.07.19.18.25.59;	author miod;	state Exp;
branches;
next	1.15;
commitid	tbT3Kkk6NqiyzKgo;

1.15
date	2015.07.19.05.42.55;	author miod;	state Exp;
branches;
next	1.14;
commitid	EpLO0eUSciwiSZcQ;

1.14
date	2015.07.19.02.43.24;	author miod;	state Exp;
branches;
next	1.13;
commitid	4lC3RtFiuOkoHmb5;

1.13
date	2015.07.15.16.45.24;	author miod;	state Exp;
branches;
next	1.12;
commitid	WVsWcONdkMZI7KRi;

1.12
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.10;
commitid	id8dTrTMtnTn4fqt;

1.10
date	2014.07.09.11.12.13;	author bcook;	state Exp;
branches;
next	1.9;
commitid	5dQ3XgOT5Rn0htRv;

1.9
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.21.16.32.06;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.20.04.45.09;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.16.20.36.35;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.44;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: ts_rsp_verify.c,v 1.17 2016/11/05 15:19:07 miod Exp $ */
/* Written by Zoltan Glozik (zglozik@@stones.com) for the OpenSSL
 * project 2002.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/pkcs7.h>
#include <openssl/ts.h>

/* Private function declarations. */

static int TS_verify_cert(X509_STORE *store, STACK_OF(X509) *untrusted,
    X509 *signer, STACK_OF(X509) **chain);
static int TS_check_signing_certs(PKCS7_SIGNER_INFO *si, STACK_OF(X509) *chain);
static ESS_SIGNING_CERT *ESS_get_signing_cert(PKCS7_SIGNER_INFO *si);
static int TS_find_cert(STACK_OF(ESS_CERT_ID) *cert_ids, X509 *cert);
static int TS_issuer_serial_cmp(ESS_ISSUER_SERIAL *is, X509_CINF *cinfo);
static int int_TS_RESP_verify_token(TS_VERIFY_CTX *ctx,
    PKCS7 *token, TS_TST_INFO *tst_info);
static int TS_check_status_info(TS_RESP *response);
static char *TS_get_status_text(STACK_OF(ASN1_UTF8STRING) *text);
static int TS_check_policy(ASN1_OBJECT *req_oid, TS_TST_INFO *tst_info);
static int TS_compute_imprint(BIO *data, TS_TST_INFO *tst_info,
    X509_ALGOR **md_alg,
    unsigned char **imprint, unsigned *imprint_len);
static int TS_check_imprints(X509_ALGOR *algor_a,
    unsigned char *imprint_a, unsigned len_a,
    TS_TST_INFO *tst_info);
static int TS_check_nonces(const ASN1_INTEGER *a, TS_TST_INFO *tst_info);
static int TS_check_signer_name(GENERAL_NAME *tsa_name, X509 *signer);
static int TS_find_name(STACK_OF(GENERAL_NAME) *gen_names, GENERAL_NAME *name);

/*
 * Local mapping between response codes and descriptions.
 * Don't forget to change TS_STATUS_BUF_SIZE when modifying
 * the elements of this array.
 */
static const char *TS_status_text[] = {
	"granted",
	"grantedWithMods",
	"rejection",
	"waiting",
	"revocationWarning",
	"revocationNotification"
};

#define TS_STATUS_TEXT_SIZE	(sizeof(TS_status_text)/sizeof(*TS_status_text))

/*
 * This must be greater or equal to the sum of the strings in TS_status_text
 * plus the number of its elements.
 */
#define TS_STATUS_BUF_SIZE	256

static struct {
	int code;
	const char *text;
} TS_failure_info[] = {
	{ TS_INFO_BAD_ALG, "badAlg" },
	{ TS_INFO_BAD_REQUEST, "badRequest" },
	{ TS_INFO_BAD_DATA_FORMAT, "badDataFormat" },
	{ TS_INFO_TIME_NOT_AVAILABLE, "timeNotAvailable" },
	{ TS_INFO_UNACCEPTED_POLICY, "unacceptedPolicy" },
	{ TS_INFO_UNACCEPTED_EXTENSION, "unacceptedExtension" },
	{ TS_INFO_ADD_INFO_NOT_AVAILABLE, "addInfoNotAvailable" },
	{ TS_INFO_SYSTEM_FAILURE, "systemFailure" }
};

#define TS_FAILURE_INFO_SIZE	(sizeof(TS_failure_info) / \
				sizeof(*TS_failure_info))

/* Functions for verifying a signed TS_TST_INFO structure. */

/*
 * This function carries out the following tasks:
 *	- Checks if there is one and only one signer.
 *	- Search for the signing certificate in 'certs' and in the response.
 *	- Check the extended key usage and key usage fields of the signer
 *	certificate (done by the path validation).
 *	- Build and validate the certificate path.
 *	- Check if the certificate path meets the requirements of the
 *	SigningCertificate ESS signed attribute.
 *	- Verify the signature value.
 *	- Returns the signer certificate in 'signer', if 'signer' is not NULL.
 */
int
TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
    X509_STORE *store, X509 **signer_out)
{
	STACK_OF(PKCS7_SIGNER_INFO) *sinfos = NULL;
	PKCS7_SIGNER_INFO *si;
	STACK_OF(X509) *signers = NULL;
	X509	*signer;
	STACK_OF(X509) *chain = NULL;
	char	buf[4096];
	int	i, j = 0, ret = 0;
	BIO	*p7bio = NULL;

	/* Some sanity checks first. */
	if (!token) {
		TSerror(TS_R_INVALID_NULL_POINTER);
		goto err;
	}

	/* Check for the correct content type */
	if (!PKCS7_type_is_signed(token)) {
		TSerror(TS_R_WRONG_CONTENT_TYPE);
		goto err;
	}

	/* Check if there is one and only one signer. */
	sinfos = PKCS7_get_signer_info(token);
	if (!sinfos || sk_PKCS7_SIGNER_INFO_num(sinfos) != 1) {
		TSerror(TS_R_THERE_MUST_BE_ONE_SIGNER);
		goto err;
	}
	si = sk_PKCS7_SIGNER_INFO_value(sinfos, 0);

	/* Check for no content: no data to verify signature. */
	if (PKCS7_get_detached(token)) {
		TSerror(TS_R_NO_CONTENT);
		goto err;
	}

	/* Get hold of the signer certificate, search only internal
	   certificates if it was requested. */
	signers = PKCS7_get0_signers(token, certs, 0);
	if (!signers || sk_X509_num(signers) != 1)
		goto err;
	signer = sk_X509_value(signers, 0);

	/* Now verify the certificate. */
	if (!TS_verify_cert(store, certs, signer, &chain))
		goto err;

	/* Check if the signer certificate is consistent with the
	   ESS extension. */
	if (!TS_check_signing_certs(si, chain))
		goto err;

	/* Creating the message digest. */
	p7bio = PKCS7_dataInit(token, NULL);

	/* We now have to 'read' from p7bio to calculate digests etc. */
	while ((i = BIO_read(p7bio, buf, sizeof(buf))) > 0)
		;

	/* Verifying the signature. */
	j = PKCS7_signatureVerify(p7bio, token, si, signer);
	if (j <= 0) {
		TSerror(TS_R_SIGNATURE_FAILURE);
		goto err;
	}

	/* Return the signer certificate if needed. */
	if (signer_out) {
		*signer_out = signer;
		CRYPTO_add(&signer->references, 1, CRYPTO_LOCK_X509);
	}

	ret = 1;

err:
	BIO_free_all(p7bio);
	sk_X509_pop_free(chain, X509_free);
	sk_X509_free(signers);

	return ret;
}

/*
 * The certificate chain is returned in chain. Caller is responsible for
 * freeing the vector.
 */
static int
TS_verify_cert(X509_STORE *store, STACK_OF(X509) *untrusted, X509 *signer,
    STACK_OF(X509) **chain)
{
	X509_STORE_CTX cert_ctx;
	int i;
	int ret = 0;

	/* chain is an out argument. */
	*chain = NULL;
	if (X509_STORE_CTX_init(&cert_ctx, store, signer, untrusted) == 0) {
		TSerror(ERR_R_X509_LIB);
		goto err;
	}
	if (X509_STORE_CTX_set_purpose(&cert_ctx,
	    X509_PURPOSE_TIMESTAMP_SIGN) == 0)
		goto err;
	i = X509_verify_cert(&cert_ctx);
	if (i <= 0) {
		int j = X509_STORE_CTX_get_error(&cert_ctx);

		TSerror(TS_R_CERTIFICATE_VERIFY_ERROR);
		ERR_asprintf_error_data("Verify error:%s",
		    X509_verify_cert_error_string(j));
		goto err;
	} else {
		/* Get a copy of the certificate chain. */
		*chain = X509_STORE_CTX_get1_chain(&cert_ctx);
		ret = 1;
	}

err:
	X509_STORE_CTX_cleanup(&cert_ctx);

	return ret;
}

static int
TS_check_signing_certs(PKCS7_SIGNER_INFO *si, STACK_OF(X509) *chain)
{
	ESS_SIGNING_CERT *ss = ESS_get_signing_cert(si);
	STACK_OF(ESS_CERT_ID) *cert_ids = NULL;
	X509 *cert;
	int i = 0;
	int ret = 0;

	if (!ss)
		goto err;
	cert_ids = ss->cert_ids;
	/* The signer certificate must be the first in cert_ids. */
	cert = sk_X509_value(chain, 0);
	if (TS_find_cert(cert_ids, cert) != 0)
		goto err;

	/* Check the other certificates of the chain if there are more
	   than one certificate ids in cert_ids. */
	if (sk_ESS_CERT_ID_num(cert_ids) > 1) {
		/* All the certificates of the chain must be in cert_ids. */
		for (i = 1; i < sk_X509_num(chain); ++i) {
			cert = sk_X509_value(chain, i);
			if (TS_find_cert(cert_ids, cert) < 0)
				goto err;
		}
	}
	ret = 1;

err:
	if (!ret)
		TSerror(TS_R_ESS_SIGNING_CERTIFICATE_ERROR);
	ESS_SIGNING_CERT_free(ss);
	return ret;
}

static ESS_SIGNING_CERT *
ESS_get_signing_cert(PKCS7_SIGNER_INFO *si)
{
	ASN1_TYPE *attr;
	const unsigned char *p;

	attr = PKCS7_get_signed_attribute(si,
	    NID_id_smime_aa_signingCertificate);
	if (!attr)
		return NULL;
	if (attr->type != V_ASN1_SEQUENCE)
		return NULL;
	p = attr->value.sequence->data;
	return d2i_ESS_SIGNING_CERT(NULL, &p, attr->value.sequence->length);
}

/* Returns < 0 if certificate is not found, certificate index otherwise. */
static int
TS_find_cert(STACK_OF(ESS_CERT_ID) *cert_ids, X509 *cert)
{
	int i;

	if (!cert_ids || !cert)
		return -1;

	/* Recompute SHA1 hash of certificate if necessary (side effect). */
	X509_check_purpose(cert, -1, 0);

	/* Look for cert in the cert_ids vector. */
	for (i = 0; i < sk_ESS_CERT_ID_num(cert_ids); ++i) {
		ESS_CERT_ID *cid = sk_ESS_CERT_ID_value(cert_ids, i);

		/* Check the SHA-1 hash first. */
		if (cid->hash->length == sizeof(cert->sha1_hash) &&
		    !memcmp(cid->hash->data, cert->sha1_hash,
			sizeof(cert->sha1_hash))) {
			/* Check the issuer/serial as well if specified. */
			ESS_ISSUER_SERIAL *is = cid->issuer_serial;
			if (!is || !TS_issuer_serial_cmp(is, cert->cert_info))
				return i;
		}
	}

	return -1;
}

static int
TS_issuer_serial_cmp(ESS_ISSUER_SERIAL *is, X509_CINF *cinfo)
{
	GENERAL_NAME *issuer;

	if (!is || !cinfo || sk_GENERAL_NAME_num(is->issuer) != 1)
		return -1;

	/* Check the issuer first. It must be a directory name. */
	issuer = sk_GENERAL_NAME_value(is->issuer, 0);
	if (issuer->type != GEN_DIRNAME ||
	    X509_NAME_cmp(issuer->d.dirn, cinfo->issuer))
		return -1;

	/* Check the serial number, too. */
	if (ASN1_INTEGER_cmp(is->serial, cinfo->serialNumber))
		return -1;

	return 0;
}

/*
 * Verifies whether 'response' contains a valid response with regards
 * to the settings of the context:
 *	- Gives an error message if the TS_TST_INFO is not present.
 *	- Calls _TS_RESP_verify_token to verify the token content.
 */
int
TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response)
{
	PKCS7 *token = TS_RESP_get_token(response);
	TS_TST_INFO *tst_info = TS_RESP_get_tst_info(response);
	int ret = 0;

	/* Check if we have a successful TS_TST_INFO object in place. */
	if (!TS_check_status_info(response))
		goto err;

	/* Check the contents of the time stamp token. */
	if (!int_TS_RESP_verify_token(ctx, token, tst_info))
		goto err;

	ret = 1;

err:
	return ret;
}

/*
 * Tries to extract a TS_TST_INFO structure from the PKCS7 token and
 * calls the internal int_TS_RESP_verify_token function for verifying it.
 */
int
TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token)
{
	TS_TST_INFO *tst_info = PKCS7_to_TS_TST_INFO(token);
	int ret = 0;

	if (tst_info) {
		ret = int_TS_RESP_verify_token(ctx, token, tst_info);
		TS_TST_INFO_free(tst_info);
	}
	return ret;
}

/*
 * Verifies whether the 'token' contains a valid time stamp token
 * with regards to the settings of the context. Only those checks are
 * carried out that are specified in the context:
 *	- Verifies the signature of the TS_TST_INFO.
 *	- Checks the version number of the response.
 *	- Check if the requested and returned policies math.
 *	- Check if the message imprints are the same.
 *	- Check if the nonces are the same.
 *	- Check if the TSA name matches the signer.
 *	- Check if the TSA name is the expected TSA.
 */
static int
int_TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token,
    TS_TST_INFO *tst_info)
{
	X509 *signer = NULL;
	GENERAL_NAME *tsa_name = TS_TST_INFO_get_tsa(tst_info);
	X509_ALGOR *md_alg = NULL;
	unsigned char *imprint = NULL;
	unsigned imprint_len = 0;
	int ret = 0;

	/* Verify the signature. */
	if ((ctx->flags & TS_VFY_SIGNATURE) &&
	    !TS_RESP_verify_signature(token, ctx->certs, ctx->store, &signer))
		goto err;

	/* Check version number of response. */
	if ((ctx->flags & TS_VFY_VERSION) &&
	    TS_TST_INFO_get_version(tst_info) != 1) {
		TSerror(TS_R_UNSUPPORTED_VERSION);
		goto err;
	}

	/* Check policies. */
	if ((ctx->flags & TS_VFY_POLICY) &&
	    !TS_check_policy(ctx->policy, tst_info))
		goto err;

	/* Check message imprints. */
	if ((ctx->flags & TS_VFY_IMPRINT) &&
	    !TS_check_imprints(ctx->md_alg, ctx->imprint, ctx->imprint_len,
		tst_info))
		goto err;

	/* Compute and check message imprints. */
	if ((ctx->flags & TS_VFY_DATA) &&
	    (!TS_compute_imprint(ctx->data, tst_info,
	    &md_alg, &imprint, &imprint_len) ||
	    !TS_check_imprints(md_alg, imprint, imprint_len, tst_info)))
		goto err;

	/* Check nonces. */
	if ((ctx->flags & TS_VFY_NONCE) &&
	    !TS_check_nonces(ctx->nonce, tst_info))
		goto err;

	/* Check whether TSA name and signer certificate match. */
	if ((ctx->flags & TS_VFY_SIGNER) &&
	    tsa_name && !TS_check_signer_name(tsa_name, signer)) {
		TSerror(TS_R_TSA_NAME_MISMATCH);
		goto err;
	}

	/* Check whether the TSA is the expected one. */
	if ((ctx->flags & TS_VFY_TSA_NAME) &&
	    !TS_check_signer_name(ctx->tsa_name, signer)) {
		TSerror(TS_R_TSA_UNTRUSTED);
		goto err;
	}

	ret = 1;

err:
	X509_free(signer);
	X509_ALGOR_free(md_alg);
	free(imprint);
	return ret;
}

static int
TS_check_status_info(TS_RESP *response)
{
	TS_STATUS_INFO *info = TS_RESP_get_status_info(response);
	long status = ASN1_INTEGER_get(info->status);
	const char *status_text = NULL;
	char *embedded_status_text = NULL;
	char failure_text[TS_STATUS_BUF_SIZE] = "";

	/* Check if everything went fine. */
	if (status == 0 || status == 1)
		return 1;

	/* There was an error, get the description in status_text. */
	if (0 <= status && status < (long)TS_STATUS_TEXT_SIZE)
		status_text = TS_status_text[status];
	else
		status_text = "unknown code";

	/* Set the embedded_status_text to the returned description. */
	if (sk_ASN1_UTF8STRING_num(info->text) > 0 &&
	    !(embedded_status_text = TS_get_status_text(info->text)))
		return 0;

	/* Filling in failure_text with the failure information. */
	if (info->failure_info) {
		int i;
		int first = 1;
		for (i = 0; i < (int)TS_FAILURE_INFO_SIZE; ++i) {
			if (ASN1_BIT_STRING_get_bit(info->failure_info,
			    TS_failure_info[i].code)) {
				if (!first)
					strlcat(failure_text, ",",
					    TS_STATUS_BUF_SIZE);
				else
					first = 0;
				strlcat(failure_text, TS_failure_info[i].text,
				    TS_STATUS_BUF_SIZE);
			}
		}
	}
	if (failure_text[0] == '\0')
		strlcpy(failure_text, "unspecified", TS_STATUS_BUF_SIZE);

	/* Making up the error string. */
	TSerror(TS_R_NO_TIME_STAMP_TOKEN);
	ERR_asprintf_error_data
	    ("status code: %s, status text: %s, failure codes: %s",
	    status_text,
	    embedded_status_text ? embedded_status_text : "unspecified",
	    failure_text);
	free(embedded_status_text);

	return 0;
}

static char *
TS_get_status_text(STACK_OF(ASN1_UTF8STRING) *text)
{
	int i;
	unsigned int length = 0;
	char *result = NULL;

	/* Determine length first. */
	for (i = 0; i < sk_ASN1_UTF8STRING_num(text); ++i) {
		ASN1_UTF8STRING *current = sk_ASN1_UTF8STRING_value(text, i);
		length += ASN1_STRING_length(current);
		length += 1;	/* separator character */
	}
	/* Allocate memory (closing '\0' included). */
	if (!(result = malloc(length))) {
		TSerror(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	/* Concatenate the descriptions. */
	result[0] = '\0';
	for (i = 0; i < sk_ASN1_UTF8STRING_num(text); ++i) {
		ASN1_UTF8STRING *current = sk_ASN1_UTF8STRING_value(text, i);
		if (i > 0)
			strlcat(result, "/", length);
		strlcat(result, (const char *)ASN1_STRING_data(current), length);
	}
	return result;
}

static int
TS_check_policy(ASN1_OBJECT *req_oid, TS_TST_INFO *tst_info)
{
	ASN1_OBJECT *resp_oid = TS_TST_INFO_get_policy_id(tst_info);

	if (OBJ_cmp(req_oid, resp_oid) != 0) {
		TSerror(TS_R_POLICY_MISMATCH);
		return 0;
	}

	return 1;
}

static int
TS_compute_imprint(BIO *data, TS_TST_INFO *tst_info, X509_ALGOR **md_alg,
    unsigned char **imprint, unsigned *imprint_len)
{
	TS_MSG_IMPRINT *msg_imprint = TS_TST_INFO_get_msg_imprint(tst_info);
	X509_ALGOR *md_alg_resp = TS_MSG_IMPRINT_get_algo(msg_imprint);
	const EVP_MD *md;
	EVP_MD_CTX md_ctx;
	unsigned char buffer[4096];
	int length;

	*md_alg = NULL;
	*imprint = NULL;

	/* Return the MD algorithm of the response. */
	if (!(*md_alg = X509_ALGOR_dup(md_alg_resp)))
		goto err;

	/* Getting the MD object. */
	if (!(md = EVP_get_digestbyobj((*md_alg)->algorithm))) {
		TSerror(TS_R_UNSUPPORTED_MD_ALGORITHM);
		goto err;
	}

	/* Compute message digest. */
	length = EVP_MD_size(md);
	if (length < 0)
		goto err;
	*imprint_len = length;
	if (!(*imprint = malloc(*imprint_len))) {
		TSerror(ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (!EVP_DigestInit(&md_ctx, md))
		goto err;
	while ((length = BIO_read(data, buffer, sizeof(buffer))) > 0) {
		if (!EVP_DigestUpdate(&md_ctx, buffer, length))
			goto err;
	}
	if (!EVP_DigestFinal(&md_ctx, *imprint, NULL))
		goto err;

	return 1;

err:
	X509_ALGOR_free(*md_alg);
	free(*imprint);
	*imprint = NULL;
	*imprint_len = 0;
	return 0;
}

static int
TS_check_imprints(X509_ALGOR *algor_a, unsigned char *imprint_a, unsigned len_a,
    TS_TST_INFO *tst_info)
{
	TS_MSG_IMPRINT *b = TS_TST_INFO_get_msg_imprint(tst_info);
	X509_ALGOR *algor_b = TS_MSG_IMPRINT_get_algo(b);
	int ret = 0;

	/* algor_a is optional. */
	if (algor_a) {
		/* Compare algorithm OIDs. */
		if (OBJ_cmp(algor_a->algorithm, algor_b->algorithm))
			goto err;

		/* The parameter must be NULL in both. */
		if ((algor_a->parameter &&
		    ASN1_TYPE_get(algor_a->parameter) != V_ASN1_NULL) ||
		    (algor_b->parameter &&
		    ASN1_TYPE_get(algor_b->parameter) != V_ASN1_NULL))
			goto err;
	}

	/* Compare octet strings. */
	ret = len_a == (unsigned) ASN1_STRING_length(b->hashed_msg) &&
	    memcmp(imprint_a, ASN1_STRING_data(b->hashed_msg), len_a) == 0;

err:
	if (!ret)
		TSerror(TS_R_MESSAGE_IMPRINT_MISMATCH);
	return ret;
}

static int
TS_check_nonces(const ASN1_INTEGER *a, TS_TST_INFO *tst_info)
{
	const ASN1_INTEGER *b = TS_TST_INFO_get_nonce(tst_info);

	/* Error if nonce is missing. */
	if (!b) {
		TSerror(TS_R_NONCE_NOT_RETURNED);
		return 0;
	}

	/* No error if a nonce is returned without being requested. */
	if (ASN1_INTEGER_cmp(a, b) != 0) {
		TSerror(TS_R_NONCE_MISMATCH);
		return 0;
	}

	return 1;
}

/* Check if the specified TSA name matches either the subject
   or one of the subject alternative names of the TSA certificate. */
static int
TS_check_signer_name(GENERAL_NAME *tsa_name, X509 *signer)
{
	STACK_OF(GENERAL_NAME) *gen_names = NULL;
	int idx = -1;
	int found = 0;

	if (signer == NULL)
		return 0;

	/* Check the subject name first. */
	if (tsa_name->type == GEN_DIRNAME &&
	    X509_name_cmp(tsa_name->d.dirn, signer->cert_info->subject) == 0)
		return 1;

	/* Check all the alternative names. */
	gen_names = X509_get_ext_d2i(signer, NID_subject_alt_name,
	    NULL, &idx);
	while (gen_names != NULL &&
	    !(found = (TS_find_name(gen_names, tsa_name) >= 0))) {
		/* Get the next subject alternative name,
		   although there should be no more than one. */
		GENERAL_NAMES_free(gen_names);
		gen_names = X509_get_ext_d2i(signer, NID_subject_alt_name,
		    NULL, &idx);
	}
	if (gen_names)
		GENERAL_NAMES_free(gen_names);

	return found;
}

/* Returns 1 if name is in gen_names, 0 otherwise. */
static int
TS_find_name(STACK_OF(GENERAL_NAME) *gen_names, GENERAL_NAME *name)
{
	int i, found;
	for (i = 0, found = 0; !found && i < sk_GENERAL_NAME_num(gen_names);
	    ++i) {
		GENERAL_NAME *current = sk_GENERAL_NAME_value(gen_names, i);
		found = GENERAL_NAME_cmp(current, name) == 0;
	}
	return found ? i - 1 : -1;
}
@


1.17
log
@More X509_STORE_CTX_set_*() return value checks.

ok beck@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_rsp_verify.c,v 1.16 2015/07/19 18:25:59 miod Exp $ */
d158 1
a158 1
		TSerr(TS_F_TS_RESP_VERIFY_SIGNATURE, TS_R_INVALID_NULL_POINTER);
d164 1
a164 1
		TSerr(TS_F_TS_RESP_VERIFY_SIGNATURE, TS_R_WRONG_CONTENT_TYPE);
d171 1
a171 2
		TSerr(TS_F_TS_RESP_VERIFY_SIGNATURE,
		    TS_R_THERE_MUST_BE_ONE_SIGNER);
d178 1
a178 1
		TSerr(TS_F_TS_RESP_VERIFY_SIGNATURE, TS_R_NO_CONTENT);
d208 1
a208 1
		TSerr(TS_F_TS_RESP_VERIFY_SIGNATURE, TS_R_SIGNATURE_FAILURE);
d243 1
a243 1
		TSerr(TS_F_TS_VERIFY_CERT, ERR_R_X509_LIB);
d253 1
a253 1
		TSerr(TS_F_TS_VERIFY_CERT, TS_R_CERTIFICATE_VERIFY_ERROR);
d300 1
a300 2
		TSerr(TS_F_TS_CHECK_SIGNING_CERTS,
		    TS_R_ESS_SIGNING_CERTIFICATE_ERROR);
d447 1
a447 1
		TSerr(TS_F_INT_TS_RESP_VERIFY_TOKEN, TS_R_UNSUPPORTED_VERSION);
d477 1
a477 1
		TSerr(TS_F_INT_TS_RESP_VERIFY_TOKEN, TS_R_TSA_NAME_MISMATCH);
d484 1
a484 1
		TSerr(TS_F_INT_TS_RESP_VERIFY_TOKEN, TS_R_TSA_UNTRUSTED);
d542 1
a542 1
	TSerr(TS_F_TS_CHECK_STATUS_INFO, TS_R_NO_TIME_STAMP_TOKEN);
d568 1
a568 1
		TSerr(TS_F_TS_GET_STATUS_TEXT, ERR_R_MALLOC_FAILURE);
d588 1
a588 1
		TSerr(TS_F_TS_CHECK_POLICY, TS_R_POLICY_MISMATCH);
d615 1
a615 1
		TSerr(TS_F_TS_COMPUTE_IMPRINT, TS_R_UNSUPPORTED_MD_ALGORITHM);
d625 1
a625 1
		TSerr(TS_F_TS_COMPUTE_IMPRINT, ERR_R_MALLOC_FAILURE);
d676 1
a676 1
		TSerr(TS_F_TS_CHECK_IMPRINTS, TS_R_MESSAGE_IMPRINT_MISMATCH);
d687 1
a687 1
		TSerr(TS_F_TS_CHECK_NONCES, TS_R_NONCE_NOT_RETURNED);
d693 1
a693 1
		TSerr(TS_F_TS_CHECK_NONCES, TS_R_NONCE_MISMATCH);
@


1.16
log
@Verify ASN1 objects types before attempting to access them as a particular
type.
ok guenther@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_rsp_verify.c,v 1.15 2015/07/19 05:42:55 miod Exp $ */
d247 3
a249 1
	X509_STORE_CTX_set_purpose(&cert_ctx, X509_PURPOSE_TIMESTAMP_SIGN);
@


1.15
log
@Now that it is safe to invoke X509_STORE_CTX_cleanup() if X509_STORE_CTX_init()
fails, check its return value and correctly mop up after ourselves.
ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_rsp_verify.c,v 1.14 2015/07/19 02:43:24 miod Exp $ */
d314 2
@


1.14
log
@Put explicit braces around assignment used in a conditional.
ok bcook@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_rsp_verify.c,v 1.13 2015/07/15 16:45:24 miod Exp $ */
d237 1
a237 1
	X509_STORE_CTX	cert_ctx;
d239 1
a239 1
	int ret = 1;
d243 4
a246 1
	X509_STORE_CTX_init(&cert_ctx, store, signer, untrusted);
d251 1
d255 1
a255 1
		ret = 0;
d259 1
d262 1
@


1.13
log
@Do not allow TS_check_signer_name() with signer == NULL from
int_TS_RESP_verify_token(). Coverity CID 21710.

Looking further, int_TS_RESP_verify_token() will only initialize signer to
something non-NULL if TS_VFY_SIGNATURE is set in ctx->flags. But guess what?
TS_REQ_to_TS_VERIFY_CTX() in ts/ts_verify_ctx.c, which is the TS_VERIFY_CTX
constructor, explicitely clears this bit, with:
        ret->flags = TS_VFY_ALL_IMPRINT & ~(TS_VFY_TSA_NAME | TS_VFY_SIGNATURE);
followed by more conditional flag clears.

Of course, nothing prevents the user to fiddle with ctx->flags afterwards. This
is exactly what ts.c in usr.bin/openssl does. This is gross, mistakes will
happen.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_rsp_verify.c,v 1.12 2014/07/11 08:44:49 jsing Exp $ */
d713 1
a713 1
	    !(found = TS_find_name(gen_names, tsa_name) >= 0)) {
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_rsp_verify.c,v 1.11 2014/07/10 13:58:23 jsing Exp $ */
d700 3
@


1.11
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_rsp_verify.c,v 1.10 2014/07/09 11:12:13 bcook Exp $ */
d62 1
a62 1
#include "cryptlib.h"
d64 1
a65 1
#include <openssl/pkcs7.h>
@


1.10
log
@cast ASN1_STRING (unsigned char *) to match strlcat's argument (char *)

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_rsp_verify.c,v 1.9 2014/06/12 15:49:31 deraadt Exp $ */
d60 2
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d567 1
a567 1
		strlcat(result, ASN1_STRING_data(current), length);
@


1.8
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d1 1
a1 1
/* crypto/ts/ts_resp_verify.c */
@


1.7
log
@KNF.
@
text
@d247 1
a247 1
		ERR_add_error_data(2, "Verify error:",
d533 5
a537 5
	ERR_add_error_data(6,
	    "status code: ", status_text,
	    ", status text: ", embedded_status_text ?
	    embedded_status_text : "unspecified",
	    ", failure codes: ", failure_text);
@


1.6
log
@reset imprint to NULL to avoid double free. from mancha1 at zoho
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d68 1
a68 1
			  X509 *signer, STACK_OF(X509) **chain);
d73 2
a74 2
static int int_TS_RESP_verify_token(TS_VERIFY_CTX *ctx, 
				 PKCS7 *token, TS_TST_INFO *tst_info);
d79 5
a83 5
			      X509_ALGOR **md_alg, 
			      unsigned char **imprint, unsigned *imprint_len);
static int TS_check_imprints(X509_ALGOR *algor_a, 
			     unsigned char *imprint_a, unsigned len_a,
			     TS_TST_INFO *tst_info);
d90 1
a90 1
 * Don't forget to change TS_STATUS_BUF_SIZE when modifying 
d93 8
a100 7
static const char *TS_status_text[] =
	{ "granted",
	  "grantedWithMods",
	  "rejection",
	  "waiting",
	  "revocationWarning",
	  "revocationNotification" };
d110 1
a110 2
static struct
	{
d113 10
a122 9
	} TS_failure_info[] =
		{ { TS_INFO_BAD_ALG, "badAlg" },
		  { TS_INFO_BAD_REQUEST, "badRequest" },
		  { TS_INFO_BAD_DATA_FORMAT, "badDataFormat" },
		  { TS_INFO_TIME_NOT_AVAILABLE, "timeNotAvailable" },
		  { TS_INFO_UNACCEPTED_POLICY, "unacceptedPolicy" },
		  { TS_INFO_UNACCEPTED_EXTENSION, "unacceptedExtension" },
		  { TS_INFO_ADD_INFO_NOT_AVAILABLE, "addInfoNotAvailable" },
		  { TS_INFO_SYSTEM_FAILURE, "systemFailure" } };
d141 4
a144 3
int TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
			     X509_STORE *store, X509 **signer_out)
	{
d155 1
a155 2
	if (!token)
		{
d158 1
a158 1
		}
d161 1
a161 2
	if(!PKCS7_type_is_signed(token))
		{
d164 1
a164 1
		}
d168 1
a168 2
	if (!sinfos || sk_PKCS7_SIGNER_INFO_num(sinfos) != 1)
		{
d170 1
a170 1
		      TS_R_THERE_MUST_BE_ONE_SIGNER);
d172 1
a172 1
		}
d176 1
a176 2
	if (PKCS7_get_detached(token))
		{
d179 2
a180 2
		}
	
d184 2
a185 1
	if (!signers || sk_X509_num(signers) != 1) goto err;
d189 2
a190 1
	if (!TS_verify_cert(store, certs, signer, &chain)) goto err;
d194 2
a195 1
	if (!TS_check_signing_certs(si, chain)) goto err;
d201 2
a202 1
	while ((i = BIO_read(p7bio,buf,sizeof(buf))) > 0);
d206 1
a206 2
	if (j <= 0)
		{
d209 1
a209 1
		}
d212 1
a212 2
	if (signer_out)
		{
d215 1
a215 1
		}
d219 1
a219 1
 err:
d225 1
a225 1
	}
d231 4
a234 3
static int TS_verify_cert(X509_STORE *store, STACK_OF(X509) *untrusted,
			  X509 *signer, STACK_OF(X509) **chain)
	{
d244 1
a244 2
	if (i <= 0)
		{
d248 1
a248 1
				   X509_verify_cert_error_string(j));
d250 1
a250 3
		}
	else
		{
d253 1
a253 1
		}
d258 1
a258 1
	}
d260 3
a262 2
static int TS_check_signing_certs(PKCS7_SIGNER_INFO *si, STACK_OF(X509) *chain)
	{
d269 2
a270 1
	if (!ss) goto err;
d274 3
a276 2
	if (TS_find_cert(cert_ids, cert) != 0) goto err;
	
d279 1
a279 2
	if (sk_ESS_CERT_ID_num(cert_ids) > 1)
		{
d281 1
a281 2
		for (i = 1; i < sk_X509_num(chain); ++i)
			{
d283 2
a284 2
			if (TS_find_cert(cert_ids, cert) < 0) goto err;
			}
d286 1
d288 2
a289 1
 err:
d291 2
a292 2
		TSerr(TS_F_TS_CHECK_SIGNING_CERTS, 
		      TS_R_ESS_SIGNING_CERTIFICATE_ERROR);
d295 1
a295 1
	}
d297 3
a299 2
static ESS_SIGNING_CERT *ESS_get_signing_cert(PKCS7_SIGNER_INFO *si)
	{
d302 5
a306 3
	attr = PKCS7_get_signed_attribute(si, 
					  NID_id_smime_aa_signingCertificate);
	if (!attr) return NULL;
d309 1
a309 1
	}
d312 3
a314 2
static int TS_find_cert(STACK_OF(ESS_CERT_ID) *cert_ids, X509 *cert)
	{
d317 2
a318 1
	if (!cert_ids || !cert) return -1;
d324 1
a324 2
	for (i = 0; i < sk_ESS_CERT_ID_num(cert_ids); ++i)
		{
d328 3
a330 4
		if (cid->hash->length == sizeof(cert->sha1_hash)
		    && !memcmp(cid->hash->data, cert->sha1_hash,
			       sizeof(cert->sha1_hash)))
			{
a334 1
			}
d336 2
a337 1
	
d339 1
a339 1
	}
d341 3
a343 2
static int TS_issuer_serial_cmp(ESS_ISSUER_SERIAL *is, X509_CINF *cinfo)
	{
d346 2
a347 1
	if (!is || !cinfo || sk_GENERAL_NAME_num(is->issuer) != 1) return -1;
d351 2
a352 2
	if (issuer->type != GEN_DIRNAME 
	    || X509_NAME_cmp(issuer->d.dirn, cinfo->issuer))
d360 1
a360 1
	}
d363 1
a363 1
 * Verifies whether 'response' contains a valid response with regards 
d368 3
a370 2
int TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response)
	{
d376 2
a377 1
	if (!TS_check_status_info(response)) goto err;
d384 2
a385 1
 err:
d387 1
a387 1
	}
d393 3
a395 2
int TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token)
	{
d398 2
a399 2
	if (tst_info)
		{
d402 1
a402 1
		}
d404 1
a404 1
	}
d407 1
a407 1
 * Verifies whether the 'token' contains a valid time stamp token 
d418 4
a421 3
static int int_TS_RESP_verify_token(TS_VERIFY_CTX *ctx, 
				 PKCS7 *token, TS_TST_INFO *tst_info)
	{
d430 2
a431 3
	if ((ctx->flags & TS_VFY_SIGNATURE)
	    && !TS_RESP_verify_signature(token, ctx->certs, ctx->store,
					 &signer))
d433 1
a433 1
	
d435 2
a436 3
	if ((ctx->flags & TS_VFY_VERSION)
	    && TS_TST_INFO_get_version(tst_info) != 1)
		{
d439 1
a439 1
		}
d442 2
a443 2
	if ((ctx->flags & TS_VFY_POLICY)
	    && !TS_check_policy(ctx->policy, tst_info))
d445 1
a445 1
	
d447 3
a449 3
	if ((ctx->flags & TS_VFY_IMPRINT)
	    && !TS_check_imprints(ctx->md_alg, ctx->imprint, ctx->imprint_len,
				  tst_info)) 
d453 4
a456 4
	if ((ctx->flags & TS_VFY_DATA)
	    && (!TS_compute_imprint(ctx->data, tst_info,
				    &md_alg, &imprint, &imprint_len)
	    || !TS_check_imprints(md_alg, imprint, imprint_len, tst_info)))
d460 2
a461 2
	if ((ctx->flags & TS_VFY_NONCE)
	    && !TS_check_nonces(ctx->nonce, tst_info))
d465 2
a466 3
	if ((ctx->flags & TS_VFY_SIGNER)
	    && tsa_name && !TS_check_signer_name(tsa_name, signer))
		{
d469 1
a469 1
		}
d472 2
a473 3
	if ((ctx->flags & TS_VFY_TSA_NAME)
	    && !TS_check_signer_name(ctx->tsa_name, signer))
		{
d476 1
a476 1
		}
d479 2
a480 1
 err:
d485 1
a485 1
	}
d487 3
a489 2
static int TS_check_status_info(TS_RESP *response)
	{
d497 2
a498 1
	if (status == 0 || status == 1) return 1;
d507 2
a508 2
	if (sk_ASN1_UTF8STRING_num(info->text) > 0
	    && !(embedded_status_text = TS_get_status_text(info->text)))
d510 1
a510 1
	
d512 1
a512 2
	if (info->failure_info)
		{
d515 1
a515 2
		for (i = 0; i < (int)TS_FAILURE_INFO_SIZE; ++i)
			{
d517 1
a517 2
						    TS_failure_info[i].code))
				{
d520 1
a520 1
						TS_STATUS_BUF_SIZE);
d524 1
a524 2
					TS_STATUS_BUF_SIZE);
				}
d527 1
d534 4
a537 4
			   "status code: ", status_text,
			   ", status text: ", embedded_status_text ? 
			   embedded_status_text : "unspecified",
			   ", failure codes: ", failure_text);
d541 1
a541 1
	}
d543 3
a545 2
static char *TS_get_status_text(STACK_OF(ASN1_UTF8STRING) *text)
	{
d551 1
a551 2
	for (i = 0; i < sk_ASN1_UTF8STRING_num(text); ++i)
		{
d555 1
a555 1
		}
d557 1
a557 2
	if (!(result = malloc(length)))
		{
d560 1
a560 1
		}
d563 1
a563 2
	for (i = 0; i < sk_ASN1_UTF8STRING_num(text); ++i)
		{
d568 1
a568 1
		}
d570 1
a570 1
	}
d572 3
a574 2
static int TS_check_policy(ASN1_OBJECT *req_oid, TS_TST_INFO *tst_info)
	{
d577 1
a577 2
	if (OBJ_cmp(req_oid, resp_oid) != 0)
		{
d580 1
a580 1
		}
d583 1
a583 1
	}
d585 4
a588 4
static int TS_compute_imprint(BIO *data, TS_TST_INFO *tst_info,
			      X509_ALGOR **md_alg, 
			      unsigned char **imprint, unsigned *imprint_len)
	{
d600 2
a601 1
	if (!(*md_alg = X509_ALGOR_dup(md_alg_resp))) goto err;
d604 1
a604 2
	if (!(md = EVP_get_digestbyobj((*md_alg)->algorithm)))
		{
d607 1
a607 1
		}
d612 1
a612 1
	    goto err;
d614 1
a614 2
	if (!(*imprint = malloc(*imprint_len))) 
		{
d617 1
a617 1
		}
d621 1
a621 2
	while ((length = BIO_read(data, buffer, sizeof(buffer))) > 0)
		{
d624 1
a624 1
		}
d629 2
a630 1
 err:
d636 1
a636 1
	}
d638 4
a641 4
static int TS_check_imprints(X509_ALGOR *algor_a, 
			     unsigned char *imprint_a, unsigned len_a,
			     TS_TST_INFO *tst_info)
	{
d647 1
a647 2
	if (algor_a)
		{
d649 2
a650 1
		if (OBJ_cmp(algor_a->algorithm, algor_b->algorithm)) goto err;
d653 4
a656 4
		if ((algor_a->parameter 
		     && ASN1_TYPE_get(algor_a->parameter) != V_ASN1_NULL)
		    || (algor_b->parameter
			&& ASN1_TYPE_get(algor_b->parameter) != V_ASN1_NULL))
d658 1
a658 1
		}
d662 3
a664 2
		memcmp(imprint_a, ASN1_STRING_data(b->hashed_msg), len_a) == 0;
 err:
d668 1
a668 1
	}
d670 3
a672 2
static int TS_check_nonces(const ASN1_INTEGER *a, TS_TST_INFO *tst_info)
	{
d676 1
a676 2
	if (!b)
		{
d679 1
a679 1
		}
d682 1
a682 2
	if (ASN1_INTEGER_cmp(a, b) != 0)
		{
d685 1
a685 1
		}
d688 1
a688 1
	}
d692 3
a694 2
static int TS_check_signer_name(GENERAL_NAME *tsa_name, X509 *signer)
	{
d700 2
a701 2
	if (tsa_name->type == GEN_DIRNAME 
	    && X509_name_cmp(tsa_name->d.dirn, signer->cert_info->subject) == 0)
d706 3
a708 4
				     NULL, &idx);
	while (gen_names != NULL
	       && !(found = TS_find_name(gen_names, tsa_name) >= 0))
		{
d713 5
a717 4
					     NULL, &idx);
		}
	if (gen_names) GENERAL_NAMES_free(gen_names);
	
d719 1
a719 1
	}
d722 3
a724 2
static int TS_find_name(STACK_OF(GENERAL_NAME) *gen_names, GENERAL_NAME *name)
	{
d727 1
a727 2
	     ++i)
		{
d730 1
a730 1
		}
d732 1
a732 1
	}
@


1.5
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d629 1
@


1.4
log
@Clean up dangerous strncpy use. This included a use where the resulting
string was potentially not nul terminated and a place where malloc return
was unchecked.
while we're at it remove dummytest.c
ok miod@@
@
text
@d475 1
a475 1
	OPENSSL_free(imprint);
d531 1
a531 1
	OPENSSL_free(embedded_status_text);
d550 1
a550 1
	if (!(result = OPENSSL_malloc(length)))
d609 1
a609 1
	if (!(*imprint = OPENSSL_malloc(*imprint_len))) 
d628 1
a628 1
	OPENSSL_free(*imprint);
@


1.3
log
@resolve conflicts
@
text
@a540 1
	char *p;
d556 2
a557 1
	for (i = 0, p = result; i < sk_ASN1_UTF8STRING_num(text); ++i)
d560 3
a562 4
		length = ASN1_STRING_length(current);
		if (i > 0) *p++ = '/';
		strncpy(p, (const char *)ASN1_STRING_data(current), length);
		p += length;
a563 3
	/* We do have space for this, too. */
	*p = '\0';
	
@


1.2
log
@resolve conflicts, fix local changes
@
text
@d619 2
a620 1
	EVP_DigestInit(&md_ctx, md);
d623 2
a624 1
		EVP_DigestUpdate(&md_ctx, buffer, length);
d626 2
a627 1
	EVP_DigestFinal(&md_ctx, *imprint, NULL);
@


1.1
log
@Initial revision
@
text
@d512 2
a513 1
					strcpy(failure_text, ",");
d516 2
a517 1
				strcat(failure_text, TS_failure_info[i].text);
d522 1
a522 1
		strcpy(failure_text, "unspecified");
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@d617 1
a617 2
	if (!EVP_DigestInit(&md_ctx, md))
		goto err;
d620 1
a620 2
		if (!EVP_DigestUpdate(&md_ctx, buffer, length))
			goto err;
d622 1
a622 2
	if (!EVP_DigestFinal(&md_ctx, *imprint, NULL))
		goto err;
@

