head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.5;
commitid	kT0fLt3r4lroFJra;

1.5
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.4;
commitid	rYgS8cWcS59JYkBV;

1.4
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.3;
commitid	yQEL1wOWIearrW15;

1.3
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.04.21.16.32.06;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: ts_rsp_utils.c,v 1.5 2015/07/29 14:58:34 jsing Exp $ */
/* Written by Zoltan Glozik (zglozik@@stones.com) for the OpenSSL
 * project 2002.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/pkcs7.h>
#include <openssl/ts.h>

/* Function definitions. */

int
TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *status_info)
{
	TS_STATUS_INFO *new_status_info;

	if (a->status_info == status_info)
		return 1;
	new_status_info = TS_STATUS_INFO_dup(status_info);
	if (new_status_info == NULL) {
		TSerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	TS_STATUS_INFO_free(a->status_info);
	a->status_info = new_status_info;

	return 1;
}

TS_STATUS_INFO *
TS_RESP_get_status_info(TS_RESP *a)
{
	return a->status_info;
}

/* Caller loses ownership of PKCS7 and TS_TST_INFO objects. */
void
TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info)
{
	/* Set new PKCS7 and TST_INFO objects. */
	PKCS7_free(a->token);
	a->token = p7;
	TS_TST_INFO_free(a->tst_info);
	a->tst_info = tst_info;
}

PKCS7 *
TS_RESP_get_token(TS_RESP *a)
{
	return a->token;
}

TS_TST_INFO *
TS_RESP_get_tst_info(TS_RESP *a)
{
	return a->tst_info;
}

int
TS_TST_INFO_set_version(TS_TST_INFO *a, long version)
{
	return ASN1_INTEGER_set(a->version, version);
}

long
TS_TST_INFO_get_version(const TS_TST_INFO *a)
{
	return ASN1_INTEGER_get(a->version);
}

int
TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy)
{
	ASN1_OBJECT *new_policy;

	if (a->policy_id == policy)
		return 1;
	new_policy = OBJ_dup(policy);
	if (new_policy == NULL) {
		TSerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	ASN1_OBJECT_free(a->policy_id);
	a->policy_id = new_policy;
	return 1;
}

ASN1_OBJECT *
TS_TST_INFO_get_policy_id(TS_TST_INFO *a)
{
	return a->policy_id;
}

int
TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint)
{
	TS_MSG_IMPRINT *new_msg_imprint;

	if (a->msg_imprint == msg_imprint)
		return 1;
	new_msg_imprint = TS_MSG_IMPRINT_dup(msg_imprint);
	if (new_msg_imprint == NULL) {
		TSerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	TS_MSG_IMPRINT_free(a->msg_imprint);
	a->msg_imprint = new_msg_imprint;
	return 1;
}

TS_MSG_IMPRINT *
TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a)
{
	return a->msg_imprint;
}

int
TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial)
{
	ASN1_INTEGER *new_serial;

	if (a->serial == serial)
		return 1;
	new_serial = ASN1_INTEGER_dup(serial);
	if (new_serial == NULL) {
		TSerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	ASN1_INTEGER_free(a->serial);
	a->serial = new_serial;
	return 1;
}

const ASN1_INTEGER *
TS_TST_INFO_get_serial(const TS_TST_INFO *a)
{
	return a->serial;
}

int
TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime)
{
	ASN1_GENERALIZEDTIME *new_time;

	if (a->time == gtime)
		return 1;
	new_time = ASN1_STRING_dup(gtime);
	if (new_time == NULL) {
		TSerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	ASN1_GENERALIZEDTIME_free(a->time);
	a->time = new_time;
	return 1;
}

const ASN1_GENERALIZEDTIME *
TS_TST_INFO_get_time(const TS_TST_INFO *a)
{
	return a->time;
}

int
TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy)
{
	TS_ACCURACY *new_accuracy;

	if (a->accuracy == accuracy)
		return 1;
	new_accuracy = TS_ACCURACY_dup(accuracy);
	if (new_accuracy == NULL) {
		TSerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	TS_ACCURACY_free(a->accuracy);
	a->accuracy = new_accuracy;
	return 1;
}

TS_ACCURACY *
TS_TST_INFO_get_accuracy(TS_TST_INFO *a)
{
	return a->accuracy;
}

int
TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds)
{
	ASN1_INTEGER *new_seconds;

	if (a->seconds == seconds)
		return 1;
	new_seconds = ASN1_INTEGER_dup(seconds);
	if (new_seconds == NULL) {
		TSerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	ASN1_INTEGER_free(a->seconds);
	a->seconds = new_seconds;
	return 1;
}

const ASN1_INTEGER *
TS_ACCURACY_get_seconds(const TS_ACCURACY *a)
{
	return a->seconds;
}

int
TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis)
{
	ASN1_INTEGER *new_millis = NULL;

	if (a->millis == millis)
		return 1;
	if (millis != NULL) {
		new_millis = ASN1_INTEGER_dup(millis);
		if (new_millis == NULL) {
			TSerror(ERR_R_MALLOC_FAILURE);
			return 0;
		}
	}
	ASN1_INTEGER_free(a->millis);
	a->millis = new_millis;
	return 1;
}

const ASN1_INTEGER *
TS_ACCURACY_get_millis(const TS_ACCURACY *a)
{
	return a->millis;
}

int
TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros)
{
	ASN1_INTEGER *new_micros = NULL;

	if (a->micros == micros)
		return 1;
	if (micros != NULL) {
		new_micros = ASN1_INTEGER_dup(micros);
		if (new_micros == NULL) {
			TSerror(ERR_R_MALLOC_FAILURE);
			return 0;
		}
	}
	ASN1_INTEGER_free(a->micros);
	a->micros = new_micros;
	return 1;
}

const ASN1_INTEGER *
TS_ACCURACY_get_micros(const TS_ACCURACY *a)
{
	return a->micros;
}

int
TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering)
{
	a->ordering = ordering ? 0xFF : 0x00;
	return 1;
}

int
TS_TST_INFO_get_ordering(const TS_TST_INFO *a)
{
	return a->ordering ? 1 : 0;
}

int
TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce)
{
	ASN1_INTEGER *new_nonce;

	if (a->nonce == nonce)
		return 1;
	new_nonce = ASN1_INTEGER_dup(nonce);
	if (new_nonce == NULL) {
		TSerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	ASN1_INTEGER_free(a->nonce);
	a->nonce = new_nonce;
	return 1;
}

const ASN1_INTEGER *
TS_TST_INFO_get_nonce(const TS_TST_INFO *a)
{
	return a->nonce;
}

int
TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa)
{
	GENERAL_NAME *new_tsa;

	if (a->tsa == tsa)
		return 1;
	new_tsa = GENERAL_NAME_dup(tsa);
	if (new_tsa == NULL) {
		TSerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	GENERAL_NAME_free(a->tsa);
	a->tsa = new_tsa;
	return 1;
}

GENERAL_NAME *
TS_TST_INFO_get_tsa(TS_TST_INFO *a)
{
	return a->tsa;
}

STACK_OF(X509_EXTENSION) *TS_TST_INFO_get_exts(TS_TST_INFO *a)
{
	return a->extensions;
}

void
TS_TST_INFO_ext_free(TS_TST_INFO *a)
{
	if (!a)
		return;
	sk_X509_EXTENSION_pop_free(a->extensions, X509_EXTENSION_free);
	a->extensions = NULL;
}

int
TS_TST_INFO_get_ext_count(TS_TST_INFO *a)
{
	return X509v3_get_ext_count(a->extensions);
}

int
TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos)
{
	return X509v3_get_ext_by_NID(a->extensions, nid, lastpos);
}

int
TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, ASN1_OBJECT *obj, int lastpos)
{
	return X509v3_get_ext_by_OBJ(a->extensions, obj, lastpos);
}

int
TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos)
{
	return X509v3_get_ext_by_critical(a->extensions, crit, lastpos);
}

X509_EXTENSION *
TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc)
{
	return X509v3_get_ext(a->extensions, loc);
}

X509_EXTENSION *
TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc)
{
	return X509v3_delete_ext(a->extensions, loc);
}

int
TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc)
{
	return X509v3_add_ext(&a->extensions, ex, loc) != NULL;
}

void *
TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx)
{
	return X509V3_get_d2i(a->extensions, nid, crit, idx);
}
@


1.5
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_rsp_utils.c,v 1.4 2014/07/11 08:44:49 jsing Exp $ */
d77 1
a77 1
		TSerr(TS_F_TS_RESP_SET_STATUS_INFO, ERR_R_MALLOC_FAILURE);
d136 1
a136 1
		TSerr(TS_F_TS_TST_INFO_SET_POLICY_ID, ERR_R_MALLOC_FAILURE);
d159 1
a159 1
		TSerr(TS_F_TS_TST_INFO_SET_MSG_IMPRINT, ERR_R_MALLOC_FAILURE);
d182 1
a182 1
		TSerr(TS_F_TS_TST_INFO_SET_SERIAL, ERR_R_MALLOC_FAILURE);
d205 1
a205 1
		TSerr(TS_F_TS_TST_INFO_SET_TIME, ERR_R_MALLOC_FAILURE);
d228 1
a228 1
		TSerr(TS_F_TS_TST_INFO_SET_ACCURACY, ERR_R_MALLOC_FAILURE);
d251 1
a251 1
		TSerr(TS_F_TS_ACCURACY_SET_SECONDS, ERR_R_MALLOC_FAILURE);
d275 1
a275 2
			TSerr(TS_F_TS_ACCURACY_SET_MILLIS,
			    ERR_R_MALLOC_FAILURE);
d300 1
a300 2
			TSerr(TS_F_TS_ACCURACY_SET_MICROS,
			    ERR_R_MALLOC_FAILURE);
d337 1
a337 1
		TSerr(TS_F_TS_TST_INFO_SET_NONCE, ERR_R_MALLOC_FAILURE);
d360 1
a360 1
		TSerr(TS_F_TS_TST_INFO_SET_TSA, ERR_R_MALLOC_FAILURE);
@


1.4
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_rsp_utils.c,v 1.3 2014/06/12 15:49:31 deraadt Exp $ */
d203 1
a203 1
	new_time = M_ASN1_GENERALIZEDTIME_dup(gtime);
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
a61 1
#include "cryptlib.h"
d63 1
a64 1
#include <openssl/pkcs7.h>
@


1.2
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/ts/ts_resp_utils.c */
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d67 3
a69 2
int TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *status_info)
	{
d75 1
a75 2
	if (new_status_info == NULL)
		{
d78 1
a78 1
		}
d83 1
a83 1
	}
d85 3
a87 2
TS_STATUS_INFO *TS_RESP_get_status_info(TS_RESP *a)
	{
d89 1
a89 1
	}
d92 3
a94 2
void TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info)
	{
d100 1
a100 1
	}
d102 3
a104 2
PKCS7 *TS_RESP_get_token(TS_RESP *a)
	{
d106 1
a106 1
	}
d108 3
a110 2
TS_TST_INFO *TS_RESP_get_tst_info(TS_RESP *a)
	{
d112 1
a112 1
	}
d114 3
a116 2
int TS_TST_INFO_set_version(TS_TST_INFO *a, long version)
	{
d118 1
a118 1
	}
d120 3
a122 2
long TS_TST_INFO_get_version(const TS_TST_INFO *a)
	{
d124 1
a124 1
	}
d126 3
a128 2
int TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy)
	{
d134 1
a134 2
	if (new_policy == NULL)
		{
d137 1
a137 1
		}
d141 1
a141 1
	}
d143 3
a145 2
ASN1_OBJECT *TS_TST_INFO_get_policy_id(TS_TST_INFO *a)
	{
d147 1
a147 1
	}
d149 3
a151 2
int TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint)
	{
d157 1
a157 2
	if (new_msg_imprint == NULL)
		{
d160 1
a160 1
		}
d164 1
a164 1
	}
d166 3
a168 2
TS_MSG_IMPRINT *TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a)
	{
d170 1
a170 1
	}
d172 3
a174 2
int TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial)
	{
d180 1
a180 2
	if (new_serial == NULL)
		{
d183 1
a183 1
		}
d187 1
a187 1
	}
d189 3
a191 2
const ASN1_INTEGER *TS_TST_INFO_get_serial(const TS_TST_INFO *a)
	{
d193 1
a193 1
	}
d195 3
a197 2
int TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime)
	{
d203 1
a203 2
	if (new_time == NULL)
		{
d206 1
a206 1
		}
d210 1
a210 1
	}
d212 3
a214 2
const ASN1_GENERALIZEDTIME *TS_TST_INFO_get_time(const TS_TST_INFO *a)
	{
d216 1
a216 1
	}
d218 3
a220 2
int TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy)
	{
d226 1
a226 2
	if (new_accuracy == NULL)
		{
d229 1
a229 1
		}
d233 1
a233 1
	}
d235 3
a237 2
TS_ACCURACY *TS_TST_INFO_get_accuracy(TS_TST_INFO *a)
	{
d239 1
a239 1
	}
d241 3
a243 2
int TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds)
	{
d249 1
a249 2
	if (new_seconds == NULL)
		{
d252 1
a252 1
		}
d256 1
a256 1
	}
d258 3
a260 2
const ASN1_INTEGER *TS_ACCURACY_get_seconds(const TS_ACCURACY *a)
	{
d262 1
a262 1
	}
d264 3
a266 2
int TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis)
	{
d271 1
a271 2
	if (millis != NULL)
		{
d273 3
a275 4
		if (new_millis == NULL)
			{
			TSerr(TS_F_TS_ACCURACY_SET_MILLIS, 
			      ERR_R_MALLOC_FAILURE);
a276 1
			}
d278 1
d282 1
a282 1
	}
d284 3
a286 2
const ASN1_INTEGER *TS_ACCURACY_get_millis(const TS_ACCURACY *a)
	{
d288 1
a288 1
	}
d290 3
a292 2
int TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros)
	{
d297 1
a297 2
	if (micros != NULL)
		{
d299 3
a301 4
		if (new_micros == NULL)
			{
			TSerr(TS_F_TS_ACCURACY_SET_MICROS, 
			      ERR_R_MALLOC_FAILURE);
a302 1
			}
d304 1
d308 1
a308 1
	}
d310 3
a312 2
const ASN1_INTEGER *TS_ACCURACY_get_micros(const TS_ACCURACY *a)
	{
d314 1
a314 1
	}
d316 3
a318 2
int TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering)
	{
d321 1
a321 1
	}
d323 3
a325 2
int TS_TST_INFO_get_ordering(const TS_TST_INFO *a)
	{
d327 1
a327 1
	}
d329 3
a331 2
int TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce)
	{
d337 1
a337 2
	if (new_nonce == NULL)
		{
d340 1
a340 1
		}
d344 1
a344 1
	}
d346 3
a348 2
const ASN1_INTEGER *TS_TST_INFO_get_nonce(const TS_TST_INFO *a)
	{
d350 1
a350 1
	}
d352 3
a354 2
int TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa)
	{
d360 1
a360 2
	if (new_tsa == NULL)
		{
d363 1
a363 1
		}
d367 1
a367 1
	}
d369 3
a371 2
GENERAL_NAME *TS_TST_INFO_get_tsa(TS_TST_INFO *a)
	{
d373 1
a373 1
	}
d376 1
a376 1
	{
d378 1
a378 1
	}
d380 5
a384 3
void TS_TST_INFO_ext_free(TS_TST_INFO *a)
	{
	if (!a) return;
d387 1
a387 1
	}
d389 3
a391 2
int TS_TST_INFO_get_ext_count(TS_TST_INFO *a)
	{
d393 1
a393 1
	}
d395 3
a397 2
int TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos)
	{
d399 1
a399 1
	}
d401 3
a403 2
int TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, ASN1_OBJECT *obj, int lastpos)
	{
d405 1
a405 1
	}
d407 3
a409 2
int TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos)
	{
d411 1
a411 1
	}
d413 21
a433 17
X509_EXTENSION *TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc)
	{
	return X509v3_get_ext(a->extensions,loc);
	}

X509_EXTENSION *TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc)
	{
	return X509v3_delete_ext(a->extensions,loc);
	}

int TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc)
	{
	return X509v3_add_ext(&a->extensions,ex,loc) != NULL;
	}

void *TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx)
	{
d435 1
a435 1
	}
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@
