head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.6
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2015.09.10.14.29.22;	author jsing;	state Exp;
branches;
next	1.9;
commitid	cSgOurQTPleE0uzG;

1.9
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.8;
commitid	rYgS8cWcS59JYkBV;

1.8
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.7;
commitid	yQEL1wOWIearrW15;

1.7
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.6;
commitid	id8dTrTMtnTn4fqt;

1.6
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.05.31.23.33.33;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	IkBbAEUFVs8n6C69;

1.4
date	2014.05.30.02.50.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.21.16.32.06;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Replace remaining M_ASN1_STRING_* macros with calls to ASN1_STRING_*.
This is not the same as the macro expansion, however the ASN1_STRING_*
functions do match the macro expansions.

ok doug@@ miod@@
@
text
@/* $OpenBSD: ts_lib.c,v 1.9 2015/07/29 14:58:34 jsing Exp $ */
/* Written by Zoltan Glozik (zglozik@@stones.com) for the OpenSSL
 * project 2002.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/bn.h>
#include <openssl/objects.h>
#include <openssl/ts.h>
#include <openssl/x509v3.h>

/* Local function declarations. */

/* Function definitions. */

int
TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num)
{
	BIGNUM num_bn;
	int result = 0;
	char *hex;

	BN_init(&num_bn);
	ASN1_INTEGER_to_BN(num, &num_bn);
	if ((hex = BN_bn2hex(&num_bn))) {
		result = BIO_write(bio, "0x", 2) > 0;
		result = result && BIO_write(bio, hex, strlen(hex)) > 0;
		free(hex);
	}
	BN_free(&num_bn);

	return result;
}

int
TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj)
{
	char obj_txt[128];

	int len = OBJ_obj2txt(obj_txt, sizeof(obj_txt), obj, 0);
	if (len >= sizeof(obj_txt))
		len = sizeof(obj_txt) - 1;
	BIO_write(bio, obj_txt, len);
	BIO_write(bio, "\n", 1);
	return 1;
}

int
TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions)
{
	int i, critical, n;
	X509_EXTENSION *ex;
	ASN1_OBJECT *obj;

	BIO_printf(bio, "Extensions:\n");
	n = X509v3_get_ext_count(extensions);
	for (i = 0; i < n; i++) {
		ex = X509v3_get_ext(extensions, i);
		obj = X509_EXTENSION_get_object(ex);
		i2a_ASN1_OBJECT(bio, obj);
		critical = X509_EXTENSION_get_critical(ex);
		BIO_printf(bio, ": %s\n", critical ? "critical" : "");
		if (!X509V3_EXT_print(bio, ex, 0, 4)) {
			BIO_printf(bio, "%4s", "");
			ASN1_STRING_print(bio, ex->value);
		}
		BIO_write(bio, "\n", 1);
	}

	return 1;
}

int
TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg)
{
	int i = OBJ_obj2nid(alg->algorithm);

	return BIO_printf(bio, "Hash Algorithm: %s\n",
	    (i == NID_undef) ? "UNKNOWN" : OBJ_nid2ln(i));
}

int
TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *a)
{
	ASN1_OCTET_STRING *msg;

	TS_X509_ALGOR_print_bio(bio, TS_MSG_IMPRINT_get_algo(a));

	BIO_printf(bio, "Message data:\n");
	msg = TS_MSG_IMPRINT_get_msg(a);
	BIO_dump_indent(bio, (const char *)ASN1_STRING_data(msg),
	    ASN1_STRING_length(msg), 4);

	return 1;
}
@


1.9
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_lib.c,v 1.8 2014/07/11 08:44:49 jsing Exp $ */
d140 1
a140 1
	const ASN1_OCTET_STRING *msg;
d146 2
a147 2
	BIO_dump_indent(bio, (const char *)M_ASN1_STRING_data(msg),
	    M_ASN1_STRING_length(msg), 4);
@


1.8
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_lib.c,v 1.7 2014/07/10 13:58:23 jsing Exp $ */
d120 1
a120 1
			M_ASN1_OCTET_STRING_print(bio, ex->value);
@


1.7
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_lib.c,v 1.6 2014/06/12 15:49:31 deraadt Exp $ */
d62 1
a62 1
#include "cryptlib.h"
d64 1
a64 1
#include <openssl/bn.h>
a65 1
#include <openssl/ts.h>
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.5
log
@Get the public headers from the official place with <openssl/ >
from Brent Cook
@
text
@d1 1
a1 1
/* crypto/ts/ts_lib.c */
@


1.4
log
@Don't write out more than we have allocated in obj_txt, as the glory
that is OBJ_obj2txt() can return a larger value..
ok tedu@@
@
text
@d64 1
a64 1
#include "ts.h"
@


1.3
log
@KNF.
@
text
@d95 2
a98 1

@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d70 3
a72 2
int TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num)
	{
d79 1
a79 2
	if ((hex = BN_bn2hex(&num_bn))) 
		{
d83 1
a83 1
		}
d87 1
a87 1
	}
d89 3
a91 2
int TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj)
	{
d99 1
a99 1
	}
d101 3
a103 2
int TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions)
	{
d110 1
a110 2
	for (i = 0; i < n; i++)
		{
d116 1
a116 2
		if (!X509V3_EXT_print(bio, ex, 0, 4))
			{
d119 1
a119 1
			}
d121 1
a121 1
		}
d124 1
a124 1
	}
d126 3
a128 2
int TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg)
	{
d130 1
d132 2
a133 2
		(i == NID_undef) ? "UNKNOWN" : OBJ_nid2ln(i));
	}
d135 3
a137 2
int TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *a)
	{
d144 2
a145 2
	BIO_dump_indent(bio, (const char *)M_ASN1_STRING_data(msg), 
			M_ASN1_STRING_length(msg), 4);
d148 1
a148 1
	}
@


1.1
log
@Initial revision
@
text
@d82 1
a82 1
		OPENSSL_free(hex);
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@
