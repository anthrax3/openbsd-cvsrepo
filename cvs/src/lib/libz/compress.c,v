head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.48
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.50
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.46
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.42
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.44
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.36
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.40
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.38
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.34
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.32
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.30
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.28
	OPENBSD_5_0:1.6.0.26
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.24
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.22
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.18
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.20
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.16
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2005.07.20.15.56.41;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.16.22.33.02;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.12.00.25.57;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.02.00.29.51;	author todd;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	98.08.08.20.57.09;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.07.27.02.39.43;	author tholo;	state Exp;
branches;
next	;

1.3.8.1
date	2002.03.13.16.07.26;	author jason;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to zlib 1.2.3; OK deraadt@@
@
text
@/*	$OpenBSD: compress.c,v 1.5 2003/12/16 22:33:02 henning Exp $	*/
/* compress.c -- compress a memory buffer
 * Copyright (C) 1995-2003 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */


#define ZLIB_INTERNAL
#include "zlib.h"

/* ===========================================================================
     Compresses the source buffer into the destination buffer. The level
   parameter has the same meaning as in deflateInit.  sourceLen is the byte
   length of the source buffer. Upon entry, destLen is the total size of the
   destination buffer, which must be at least 0.1% larger than sourceLen plus
   12 bytes. Upon exit, destLen is the actual size of the compressed buffer.

     compress2 returns Z_OK if success, Z_MEM_ERROR if there was not enough
   memory, Z_BUF_ERROR if there was not enough room in the output buffer,
   Z_STREAM_ERROR if the level parameter is invalid.
*/
int ZEXPORT compress2 (dest, destLen, source, sourceLen, level)
    Bytef *dest;
    uLongf *destLen;
    const Bytef *source;
    uLong sourceLen;
    int level;
{
    z_stream stream;
    int err;

    stream.next_in = (Bytef*)source;
    stream.avail_in = (uInt)sourceLen;
#ifdef MAXSEG_64K
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
#endif
    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;

    stream.zalloc = (alloc_func)0;
    stream.zfree = (free_func)0;
    stream.opaque = (voidpf)0;

    err = deflateInit(&stream, level);
    if (err != Z_OK) return err;

    err = deflate(&stream, Z_FINISH);
    if (err != Z_STREAM_END) {
        deflateEnd(&stream);
        return err == Z_OK ? Z_BUF_ERROR : err;
    }
    *destLen = stream.total_out;

    err = deflateEnd(&stream);
    return err;
}

/* ===========================================================================
 */
int ZEXPORT compress (dest, destLen, source, sourceLen)
    Bytef *dest;
    uLongf *destLen;
    const Bytef *source;
    uLong sourceLen;
{
    return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);
}

/* ===========================================================================
     If the default memLevel or windowBits for deflateInit() is changed, then
   this function needs to be updated.
 */
uLong ZEXPORT compressBound (sourceLen)
    uLong sourceLen;
{
    return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) + 11;
}
@


1.5
log
@update to zlib 1.2.1

ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: compress.c,v 1.4 2002/03/12 00:25:57 millert Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-2002 Jean-loup Gailly.
@


1.4
log
@Update to zlib-1.1.4
@
text
@d1 1
a1 1
/*	$OpenBSD: compress.c,v 1.3 2000/03/02 00:29:51 todd Exp $	*/
d4 1
a4 1
 * For conditions of distribution and use, see copyright notice in zlib.h 
d8 1
d69 10
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: compress.c,v 1.2 1998/08/08 20:57:09 millert Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-1998 Jean-loup Gailly.
@


1.3.8.1
log
@Pull in patch from current:
Fix (millert):
Update to zlib-1.1.4
@
text
@d1 1
a1 1
/*	$OpenBSD: compress.c,v 1.4 2002/03/12 00:25:57 millert Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-2002 Jean-loup Gailly.
@


1.2
log
@zlib 1.1.3
@
text
@d1 1
a6 1
/* @@(#) $Id$ */
@


1.1
log
@Integrate zlib v1.0.3
@
text
@d2 1
a2 1
 * Copyright (C) 1995-1996 Jean-loup Gailly.
d6 1
a6 1
/* $Id: compress.c,v 1.10 1996/05/23 16:51:12 me Exp $ */
d11 9
a19 10
     Compresses the source buffer into the destination buffer.  sourceLen is
   the byte length of the source buffer. Upon entry, destLen is the total
   size of the destination buffer, which must be at least 0.1% larger than
   sourceLen plus 8 bytes. Upon exit, destLen is the actual size of the
   compressed buffer.
     This function can be used to compress a whole file at once if the
   input file is mmap'ed.
     compress returns Z_OK if success, Z_MEM_ERROR if there was not
   enough memory, Z_BUF_ERROR if there was not enough room in the output
   buffer.
d21 1
a21 1
int compress (dest, destLen, source, sourceLen)
d26 1
d45 1
a45 1
    err = deflateInit(&stream, Z_DEFAULT_COMPRESSION);
d57 11
@

