head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.12
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.8
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2013.09.21.17.39.28;	author jturner;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.27.11.19.38;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.04.09.21.22;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Bump major to 26, regen .pc and header with new version info.
@
text
@#! /usr/bin/perl
# Written by Marc Espie 2012, Public Domain
use strict;
use warnings;

@@ARGV == 5 or
	die "Usage: $0 version src dest\n";

my ($vfname, $src, $dest, $pcin, $pcdest) = @@ARGV;
open(my $fh, '<', $vfname)
	or die "Can't read $vfname: $!\n";
my $version = <$fh>;
chomp $version;
my @@l = split(/\./, $version);
my $v2 = sprintf("%d%03d%03d", @@l);

open(my $in, '<', $src)
	or die "Can't read $src: $!\n";
open(my $out, '>', $dest)
	or die "Can't write to $dest: $!\n";

select($out);

while (<$in>) {
	s/\-\-VERS\-\-/$version/;
	s/\-\-VERSION\-NUMBER\-\-/$v2/;
	s/\-\-SOURCE\-ID\-\-/OpenBSD/;

	if (m/^\#ifdef\s+SQLITE_INT64_TYPE/) {
		while(<$in>) {
			last if m/^\#endif/;
		}
		print "typedef int64_t sqlite_int64;\n";
		print "typedef uint64_t sqlite_uint64;\n";
	} else {
		print $_;
	}
	if (m/^\#\s*include\s*\<stdarg\.h\>/) {
		print "#include <stdint.h>\n";
	}
}

my $h = { prefix => '/usr',
	exec_prefix => '${prefix}',
	libdir => '${exec_prefix}/lib',
	includedir => '${prefix}/include',
	PACKAGE_VERSION => $version,
	LIBS => '' };

open(my $in2, '<', $pcin)
	or die "Can't read $pcin: $!\n";

open(my $out2, '>', $pcdest)
	or die "Can't write to $pcdest: $!\n";
select($out2);
while(<$in2>) {
	while (s/\@@(.*?)\@@/$h->{$1}/g) {}
	print;
}
@


1.2
log
@let regen_headers also take care of sqlite3.pc.in => sqlite3.pc

"moui" landry@@
@
text
@d47 1
a47 1
	RELEASE => $version,
@


1.1
log
@stop editing header by hand, expose script I'm going to use for next versions
@
text
@d6 1
a6 1
@@ARGV == 3 or
d9 1
a9 1
my ($vfname, $src, $dest) = @@ARGV;
d41 18
@

