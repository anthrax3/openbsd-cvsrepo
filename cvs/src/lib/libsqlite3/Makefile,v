head	1.16;
access;
symbols
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8;
locks; strict;
comment	@# @;


1.16
date	2016.09.11.14.53.00;	author natano;	state Exp;
branches;
next	1.15;
commitid	z88Fqbvq3E1CGF24;

1.15
date	2015.09.12.02.08.34;	author jturner;	state Exp;
branches;
next	1.14;
commitid	1p2nIN8G7Ftfeiww;

1.14
date	2015.03.16.00.15.03;	author jturner;	state Exp;
branches;
next	1.13;
commitid	E0sIyEcdQsZGLZX8;

1.13
date	2015.03.16.00.12.37;	author jturner;	state Exp;
branches;
next	1.12;
commitid	yVx9VsDMPnRAXqJi;

1.12
date	2014.03.24.01.47.26;	author jturner;	state Exp;
branches;
next	1.11;

1.11
date	2013.09.11.15.00.18;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.09.14.48.53;	author landry;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.27.11.19.38;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.22.17.52.34;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.04.09.21.22;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.04.09.09.38;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2012.04.22.23.22.52;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2012.04.22.23.21.34;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.14.14.03.34;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.14.13.44.36;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.14.13.20.28;	author espie;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Install sqlite3 header files with correct ownership. "Morituri te
salutant."

ok deraadt
@
text
@# $OpenBSD: Makefile,v 1.15 2015/09/12 02:08:34 jturner Exp $

.include <bsd.own.mk>

.if defined(NOPIC)
CPPFLAGS +=	-DSQLITE_OMIT_LOAD_EXTENSION=1
.endif

CPPFLAGS +=	-I${.OBJDIR} -I${.CURDIR}/tsrc -I${.CURDIR}/src \
		-I${.CURDIR}/ext/rtree -I${.CURDIR}/ext/fts3
LIB = sqlite3

.PATH: ${.CURDIR}/tsrc ${.CURDIR}/src ${.CURDIR}/ext/fts3 ${.CURDIR}/ext/rtree

SRCS =	alter.c analyze.c attach.c auth.c \
	backup.c bitvec.c btmutex.c btree.c build.c \
	callback.c complete.c ctime.c date.c dbstat.c delete.c \
	expr.c fault.c fkey.c \
	fts3.c fts3_aux.c fts3_expr.c fts3_hash.c fts3_icu.c fts3_porter.c \
	fts3_snippet.c fts3_tokenize_vtab.c fts3_tokenizer.c fts3_tokenizer1.c \
	fts3_unicode.c fts3_unicode2.c fts3_write.c \
	func.c global.c hash.c \
	insert.c journal.c legacy.c loadext.c \
	main.c malloc.c mem1.c \
	memjournal.c \
	mutex.c mutex_noop.c mutex_unix.c \
	notify.c opcodes.c os.c os_unix.c \
	pager.c parse.c pcache.c pcache1.c pragma.c prepare.c printf.c \
	random.c resolve.c rowset.c rtree.c select.c status.c \
	table.c threads.c tokenize.c treeview.c trigger.c \
	update.c util.c vacuum.c \
	vdbe.c vdbeapi.c vdbeaux.c vdbeblob.c vdbemem.c vdbesort.c \
	vdbetrace.c wal.c walker.c where.c wherecode.c whereexpr.c utf.c vtab.c

# so that it works with NO THREADS
SRCS +=	pthread_stub.c

#	mem3.c mem5.c

FEATURE_FLAGS =	-DSQLITE_ENABLE_COLUMN_METADATA \
		-DSQLITE_ENABLE_RTREE \
		-DSQLITE_ENABLE_UNLOCK_NOTIFY \
		-DSQLITE_ENABLE_FTS3 \
		-DSQLITE_ENABLE_FTS3_PARENTHESIS \
		-DSQLITE_ENABLE_DBSTAT_VTAB \
		-DSQLITE_OMIT_BUILTIN_TEST

CPPFLAGS += 	$(FEATURE_FLAGS) -DSQLITE_THREADSAFE=1 \
		-DHAVE_STDINT_H=1 -DHAVE_INTTYPES_H=1 \
		-DHAVE_GMTIME_R=1 \
		-DHAVE_LOCALTIME_R=1 \
		-DHAVE_USLEEP=1 \
		-DHAVE_ARC4RANDOM_BUF=1 \
		-DHAVE_STRERROR_R=1 \
		-DSQLITE_TEMP_STORE=1 \
		-DSQLITE_SOUNDEX=1 \
		-DSQLITE_HAVE_ISNAN=1 \
		-DSQLITE_OS_UNIX=1 \
		-DSQLITE_CORE \
		-DHAVE_UINT32_T=1 -DHAVE_UINT16_T=1 -DHAVE_INT16_T=1 \
		-DHAVE_UINT8_T=1 -DHAVE_INT8_T=1

FILES = sqlite3.h sqlite3ext.h

opcodes.c: opcodes.h ${.CURDIR}/mkopcodec.awk
	sort -n -b -k 3 opcodes.h | awk -f ${.CURDIR}/mkopcodec.awk >opcodes.c


opcodes.h: parse.h ${.CURDIR}/src/vdbe.c \
    ${.CURDIR}/mkopcodeh.awk
	cat parse.h ${.CURDIR}/src/vdbe.c | \
	    awk -f ${.CURDIR}/mkopcodeh.awk >$@@

beforedepend: opcodes.h keywordhash.h

keywordhash.h: mkkeywordhash
	${.OBJDIR}/mkkeywordhash >$@@

mkkeywordhash: tool/mkkeywordhash.c
	${HOSTCC} ${LDSTATIC} -o $@@ $< ${LDADD}

lemon: tool/lemon.c
	${HOSTCC} ${LDSTATIC} -o $@@ $< ${LDADD}

parse.c: parse.y lemon
	ln -sf ${.CURDIR}/src/parse.y
	ln -sf ${.CURDIR}/src/lempar.c # XXX tweaked parser
	${.OBJDIR}/lemon ${FEATURE_FLAGS} parse.y
	mv parse.h parse.h.temp
	awk -f ${.CURDIR}/addopcodes.awk parse.h.temp >parse.h
	rm parse.h.temp

parse.h: parse.c

tokenize.o tokenize.po tokenize.so: keywordhash.h

CLEANFILES += mkkeywordhash opcodes.c opcodes.h keywordhash.h \
	parse.* lemon lempar.c
	
beforeinstall:
	${INSTALL} ${INSTALL_COPY} -o root -g ${SHAREGRP} \
	    -m ${SHAREMODE} ${.CURDIR}/sqlite3.pc ${DESTDIR}/usr/lib/pkgconfig/

includes:
	@@for i in ${FILES}; do \
	    cmp -s ${.CURDIR}/src/$$i ${DESTDIR}/usr/include/$$i || \
		${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m 444 \
		${.CURDIR}/src/$$i ${DESTDIR}/usr/include/$$i; \
	done

.PHONY: header
header:
	cd ${.CURDIR} && perl tsrc/header_regen VERSION src/sqlite.h.in src/sqlite3.h sqlite3.pc.in sqlite3.pc

.include <bsd.lib.mk>

${OBJS} ${GOBJS} ${POBJS} ${SOBJS}: opcodes.h parse.h
@


1.15
log
@Update sqlite3 to 3.8.11.1. Bump major, regen .pc and header. Changes
available here: http://sqlite.org/changes.html

Tested in bulk by aja@@. ok landry@@ "Please crank sqlite when you get
this mail." deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2015/03/16 00:15:03 jturner Exp $
d107 2
a108 1
		${INSTALL} ${INSTALL_COPY} -m 444 ${.CURDIR}/src/$$i ${DESTDIR}/usr/include/$$i; \
@


1.14
log
@Fix typoe
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2015/03/16 00:12:37 jturner Exp $
d17 1
a17 1
	callback.c complete.c ctime.c date.c delete.c \
d30 1
a30 1
	table.c threads.c tokenize.c trigger.c \
d33 1
a33 1
	vdbetrace.c wal.c walker.c where.c utf.c vtab.c
d45 1
@


1.13
log
@Bump major to 29, regen .pc and header with new version info
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2014/03/24 01:47:26 jturner Exp $
d30 1
a30 1
	table.c threads.c okenize.c trigger.c \
@


1.12
log
@Enable SQLITE_ENABLE_FTS3_PARENTHESIS

ok landry@@ okan@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2013/09/11 15:00:18 espie Exp $
d30 1
a30 1
	table.c tokenize.c trigger.c \
@


1.11
log
@switch to using arc4random, as prompted by deraadt@@.
also, OMIT_BUILTIN_TEST, since we're just a production library (duh)
bump shlib_version accordingly
okay reyk@@, thanks for looking at this!
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2013/06/09 14:48:53 landry Exp $
d44 1
@


1.10
log
@Add fts3_tokenize_vtab.c to SRCS, regen .pc and header with the correct
version info.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2012/08/27 11:19:38 espie Exp $
d43 2
a44 1
		-DSQLITE_ENABLE_FTS3
d51 1
@


1.9
log
@let regen_headers also take care of sqlite3.pc.in => sqlite3.pc

"moui" landry@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2012/06/22 17:52:34 espie Exp $
d20 1
a20 1
	fts3_snippet.c fts3_tokenizer.c fts3_tokenizer1.c \
@


1.8
log
@synch build after import
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2012/06/04 09:21:22 espie Exp $
d108 1
a108 1
	cd ${.CURDIR} && perl tsrc/header_regen VERSION src/sqlite.h.in src/sqlite3.h
@


1.7
log
@stop editing header by hand, expose script I'm going to use for next versions
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2012/06/04 09:09:38 espie Exp $
d16 18
a33 17
        backup.c bitvec.c btmutex.c btree.c build.c \
        callback.c complete.c ctime.c date.c delete.c \
        expr.c fault.c fkey.c \
        fts3.c fts3_aux.c fts3_expr.c fts3_hash.c fts3_icu.c fts3_porter.c \
        fts3_snippet.c fts3_tokenizer.c fts3_tokenizer1.c fts3_write.c \
        func.c global.c hash.c \
        insert.c journal.c legacy.c loadext.c \
        main.c malloc.c mem1.c \
        memjournal.c \
        mutex.c mutex_noop.c mutex_unix.c \
        notify.c opcodes.c os.c os_unix.c \
        pager.c parse.c pcache.c pcache1.c pragma.c prepare.c printf.c \
        random.c resolve.c rowset.c rtree.c select.c status.c \
        table.c tokenize.c trigger.c \
        update.c util.c vacuum.c \
        vdbe.c vdbeapi.c vdbeaux.c vdbeblob.c vdbemem.c vdbesort.c \
        vdbetrace.c wal.c walker.c where.c utf.c vtab.c
@


1.6
log
@fix autodetection, somehow I managed to lose that commit earlier ?
(brad reminded me we have strerror_r too).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2012/04/22 23:22:52 espie Exp $
d104 4
@


1.5
log
@add missing defines, crucial: -DSQLITE_CORE
used while compiling extensions which are actually a part of the core,
prevents segfaults because extensions have not been loaded...
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2012/04/14 14:03:34 espie Exp $
d46 4
a49 1
		-DHAVE_LOCALTIME_R \
@


1.4
log
@regen all files we can, prepare stuff to make sure it works even without
depend
@
text
@d49 3
@


1.3
log
@clean-out ALL generated files
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2012/04/14 13:44:36 espie Exp $
d39 4
d44 1
a44 1
CPPFLAGS += 	-DSQLITE_THREADSAFE=1 \
a46 4
		-DSQLITE_ENABLE_FTS3 \
		-DSQLITE_ENABLE_RTREE \
		-DSQLITE_ENABLE_COLUMN_METADATA \
		-DSQLITE_ENABLE_UNLOCK_NOTIFY \
d58 1
a58 1
opcodes.h: ${.CURDIR}/tsrc/parse.h ${.CURDIR}/src/vdbe.c \
d60 1
a60 1
	cat ${.CURDIR}/tsrc/parse.h ${.CURDIR}/src/vdbe.c | \
d71 17
a87 1
CLEANFILES += mkkeywordhash opcodes.c opcodes.h keywordhash.h
d100 2
@


1.2
log
@crapola-generated, no need to do it each time.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1 2012/04/14 13:20:28 espie Exp $
d71 1
a71 1
CLEANFILES += mkkeywordhash
@


1.1
log
@OpenBSD compile goo
@
text
@d1 1
a1 1
# $OpenBSD$
d73 4
d82 1
@

