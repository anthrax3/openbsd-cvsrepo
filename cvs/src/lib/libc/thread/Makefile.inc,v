head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.30
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.26
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.24
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.22
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.20
	OPENBSD_5_0:1.7.0.18
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.16
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.14
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@# @;


1.10
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.9;
commitid	d9R7VGw9CHTkwXE1;

1.9
date	2015.04.07.01.27.07;	author guenther;	state Exp;
branches;
next	1.8;
commitid	oQvh7XA3Kql35r0J;

1.8
date	2014.07.16.20.02.17;	author okan;	state Exp;
branches;
next	1.7;
commitid	Fyv0hIvHU3jMAgMT;

1.7
date	2007.06.05.18.11.48;	author kurt;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.07.21.11.23;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.05.22.19.55;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.03.23.58.39;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.03.20.36.43;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.06.15.07.06;	author d;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.06.07.27.33;	author d;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@#	$OpenBSD: Makefile.inc,v 1.9 2015/04/07 01:27:07 guenther Exp $

.PATH: ${LIBCSRCDIR}/thread

SRCS+=	callbacks.c atfork.c
@


1.9
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2014/07/16 20:02:17 okan Exp $
d5 1
a5 1
SRCS+=	unithread_malloc_lock.c unithread_mutex.c unithread_tag.c atfork.c
@


1.8
log
@zap trailing newlines; "go for it" deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2007/06/05 18:11:48 kurt Exp $
d5 1
a5 1
SRCS+=	unithread_malloc_lock.c unithread_mutex.c unithread_tag.c
@


1.7
log
@_FD_LOCK/UNLOCK() is libpthread specific and not needed for librthread, so
isolate its usage to libpthread only and replace with generic non-static
mutex support in the one place it is needed:
 - remove _FD_LOCK/UNLOCK from lseek and ftruncate in libc and make the
   functions weak so that libpthread can override with its own new
   versions that do the locking.
 - remove _thread_fd_lock/unlock() weak functions from libc and adjust
   libpthread for the change.
 - add generic _thread_mutex_lock/unlock/destroy() weak functions in libc
   to support non-static mutexes in libc and add libpthread and librthread
   implementations for them. libc can utilize non-static mutexes via the
   new _MUTEX_LOCK/UNLOCK/DESTROY() macros. Actually these new macros can
   support both static and non-static mutexes but currently only using
   them for non-static.
 - make opendir/closedir/readdir/readdir_r/seekdir/telldir() thread-safe
   for both thread libraries by using a non-static mutex in the struct
   _dirdesc (typedef DIR), utilizing it in the *dir functions and remove
   remaining and incorrect _FD_LOCK/UNLOCK() use in libc.
 - add comments to both thread libraries to indicate libc depends on the
   current implementation of static mutex initialization. suggested by
   marc@@
 - major bump libc and libpthread due to function removal, structure
   change and weak symbol conversions.
okay marc@@, tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2004/06/07 21:11:23 marc Exp $
a5 1

@


1.6
log
@
major bump to libc and libpthread to break the dependency of a
particular implementation of libpthread for libc.  libc no longer
needs pthread.h to compile.
OK millert@@, brad@@, tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2002/11/05 22:19:55 marc Exp $
d5 1
a5 1
SRCS+=	thread_fd.c unithread_malloc_lock.c unithread_tag.c
@


1.5
log
@
thread safe libc -- 2nd try.   OK miod@@, millert@@
Thanks to miod@@ for m68k and vax fixes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2002/11/03 23:58:39 marc Exp $
d5 1
a5 1
SRCS+=	thread_fd.c unithread_storage.c unithread_malloc_lock.c
@


1.4
log
@back out previous patch.. there are still some vax/m68k issues
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2002/11/03 20:36:43 marc Exp $
d5 1
a5 1
SRCS+=	thread_fd.c unithread_storage.c
@


1.3
log
@
libc changes for thread safety.  Tested on:
alpha (millert@@), i386 (marc@@), m68k (millert@@ and miod@@),
powerpc (drahn@@ and dhartmei@@), sparc (millert@@ and marc@@),
sparc64 (marc@@), and vax (millert@@ and miod@@).
Thanks to millert@@, miod@@, and mickey@@ for fixes along the way.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2000/01/06 15:07:06 d Exp $
d5 1
a5 1
SRCS+=	thread_fd.c unithread_storage.c unithread_malloc_lock.c
@


1.2
log
@rename thread_storage to unithread_storage to avoid object name conflict
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 2000/01/06 07:27:33 d Exp $
d5 1
a5 1
SRCS+=	thread_fd.c unithread_storage.c
@


1.1
log
@thread specific storage and fd locking for single-threaded libc (ie, no-ops)
@
text
@d1 1
a1 1
#	$OpenBSD$
d5 1
a5 1
SRCS+=	thread_fd.c thread_storage.c
@

