head	1.10;
access;
symbols
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.24
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.28
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.26
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.22
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.20
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.18
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.16
	OPENBSD_5_0:1.8.0.14
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.12
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.1.0.12
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.05.07.19.05.22;	author guenther;	state dead;
branches;
next	1.9;
commitid	d9R7VGw9CHTkwXE1;

1.9
date	2015.04.07.01.27.07;	author guenther;	state Exp;
branches;
next	1.8;
commitid	oQvh7XA3Kql35r0J;

1.8
date	2008.06.13.21.18.43;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2008.01.01.00.43.39;	author kurt;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.22.07.16.32;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.07.21.11.23;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.05.22.19.55;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.03.23.58.39;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.03.20.36.43;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.14.06.16.37;	author d;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@/*	$OpenBSD: unithread_malloc_lock.c,v 1.9 2015/04/07 01:27:07 guenther Exp $	*/

#include <sys/time.h>
#include "thread_private.h"

WEAK_PROTOTYPE(_thread_malloc_lock);
WEAK_PROTOTYPE(_thread_malloc_unlock);

WEAK_ALIAS(_thread_malloc_lock);
WEAK_ALIAS(_thread_malloc_unlock);

WEAK_PROTOTYPE(_thread_atexit_lock);
WEAK_PROTOTYPE(_thread_atexit_unlock);

WEAK_ALIAS(_thread_atexit_lock);
WEAK_ALIAS(_thread_atexit_unlock);

WEAK_PROTOTYPE(_thread_atfork_lock);
WEAK_PROTOTYPE(_thread_atfork_unlock);

WEAK_ALIAS(_thread_atfork_lock);
WEAK_ALIAS(_thread_atfork_unlock);

WEAK_PROTOTYPE(_thread_arc4_lock);
WEAK_PROTOTYPE(_thread_arc4_unlock);

WEAK_ALIAS(_thread_arc4_lock);
WEAK_ALIAS(_thread_arc4_unlock);

void
WEAK_NAME(_thread_malloc_lock)(void)
{
	return;
}

void
WEAK_NAME(_thread_malloc_unlock)(void)
{
	return;
}

void
WEAK_NAME(_thread_atexit_lock)(void)
{
	return;
}

void
WEAK_NAME(_thread_atexit_unlock)(void)
{
	return;
}

void
WEAK_NAME(_thread_atfork_lock)(void)
{
	return;
}

void
WEAK_NAME(_thread_atfork_unlock)(void)
{
	return;
}

void
WEAK_NAME(_thread_arc4_lock)(void)
{
	return;
}

void
WEAK_NAME(_thread_arc4_unlock)(void)
{
	return;
}
@


1.9
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unithread_malloc_lock.c,v 1.8 2008/06/13 21:18:43 otto Exp $	*/
@


1.8
log
@remove _MALLOC_LOCK_INIT; major bump; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unithread_malloc_lock.c,v 1.7 2008/01/01 00:43:39 kurt Exp $	*/
d18 6
d50 12
@


1.7
log
@- make arc4random*() functions thread safe. Use a custom spinlock function
instead of the generic pthread macros since free(3) uses __arc4_getbyte()
when freeing small sized allocations and the generic pthread macros call
malloc(3).
- eliminate passing pointers to a static variable with global scope (rs)
for additional code clarity and reduction.
- shlib minor bumps for libc and libpthread due to new functions.
From andreas@@ with some bits from me. okay tedu@@ marc@@ w/some spot
checking from millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unithread_malloc_lock.c,v 1.6 2006/02/22 07:16:32 otto Exp $	*/
a7 1
WEAK_PROTOTYPE(_thread_malloc_init);
a10 1
WEAK_ALIAS(_thread_malloc_init);
a31 6
{
	return;
}

void
WEAK_NAME(_thread_malloc_init)(void)
@


1.6
log
@Avouid a race in atexit() handling by introducing a lock. Problem
originally reported by Gergely Kovacs; help from dhartmei@@;
ok tedu@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unithread_malloc_lock.c,v 1.5 2004/06/07 21:11:23 marc Exp $	*/
d20 6
d52 12
@


1.5
log
@
major bump to libc and libpthread to break the dependency of a
particular implementation of libpthread for libc.  libc no longer
needs pthread.h to compile.
OK millert@@, brad@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unithread_malloc_lock.c,v 1.4 2002/11/05 22:19:55 marc Exp $	*/
d14 6
d34 12
@


1.4
log
@
thread safe libc -- 2nd try.   OK miod@@, millert@@
Thanks to miod@@ for m68k and vax fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: unithread_malloc_lock.c,v 1.3 2002/11/03 23:58:39 marc Exp $	*/
d3 1
a3 2
#include <sys/cdefs.h>
#include <pthread.h>
@


1.3
log
@back out previous patch.. there are still some vax/m68k issues
@
text
@d1 1
a1 1
/*	$OpenBSD: unithread_malloc_lock.c,v 1.2 2002/11/03 20:36:43 marc Exp $	*/
d9 1
d13 1
d16 1
a16 1
WEAK_NAME(_thread_malloc_lock)()
d18 1
d22 1
a22 1
WEAK_NAME(_thread_malloc_unlock)()
d24 7
@


1.2
log
@
libc changes for thread safety.  Tested on:
alpha (millert@@), i386 (marc@@), m68k (millert@@ and miod@@),
powerpc (drahn@@ and dhartmei@@), sparc (millert@@ and marc@@),
sparc64 (marc@@), and vax (millert@@ and miod@@).
Thanks to millert@@, miod@@, and mickey@@ for fixes along the way.
@
text
@d1 1
a1 1
/*	$OpenBSD: unithread_malloc_lock.c,v 1.1 2000/01/14 06:16:37 d Exp $	*/
a8 1
WEAK_PROTOTYPE(_thread_malloc_init);
a11 1
WEAK_ALIAS(_thread_malloc_init);
d14 1
a14 1
WEAK_NAME(_thread_malloc_lock)(void)
a15 1
	return;
d19 1
a19 1
WEAK_NAME(_thread_malloc_unlock)(void)
a20 7
	return;
}

void
WEAK_NAME(_thread_malloc_init)(void)
{
	return;
@


1.1
log
@malloc lock helpers
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d9 1
d13 1
d16 1
a16 1
WEAK_NAME(_thread_malloc_lock)()
d18 1
d22 1
a22 1
WEAK_NAME(_thread_malloc_unlock)()
d24 7
@

