head	1.16;
access;
symbols
	OPENBSD_3_5:1.15.0.6
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.4
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.8
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.6
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.4
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.11.0.10
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.8
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.6
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.4
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.11.0.2
	OPENBSD_2_2_BASE:1.11
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.16
date	2004.04.28.16.57.10;	author millert;	state dead;
branches;
next	1.15;

1.15
date	2002.12.23.21.10.22;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2002.12.23.04.33.31;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.16.21.27.23;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2000.03.28.17.35.09;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	97.07.23.21.17.56;	author kstailey;	state Exp;
branches;
next	1.10;

1.10
date	97.07.03.23.30.21;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	97.04.30.05.56.06;	author tholo;	state Exp;
branches;
next	1.8;

1.8
date	97.01.07.10.09.00;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	97.01.06.00.18.23;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.12.04.02.31.57;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.11.24.02.25.58;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.10.02.03.50.26;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.29.14.55.25;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.28.29;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	96.06.03.22.20.43;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Remove old md[45]
@
text
@/* MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm */

/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
rights reserved.

License to copy and use this software is granted provided that it
is identified as the "RSA Data Security, Inc. MD5 Message-Digest
Algorithm" in all material mentioning or referencing this software
or this function.

License is also granted to make and use derivative works provided
that such works are identified as "derived from the RSA Data
Security, Inc. MD5 Message-Digest Algorithm" in all material
mentioning or referencing the derived work.

RSA Data Security, Inc. makes no representations concerning either
the merchantability of this software or the suitability of this
software for any particular purpose. It is provided "as is"
without express or implied warranty of any kind.

These notices must be retained in any copies of any part of this
documentation and/or software.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: md5c.c,v 1.15 2002/12/23 21:10:22 drahn Exp $";
#endif /* LIBC_SCCS and not lint */

#include <string.h>
#include <sys/types.h>
#include <md5.h>

/* POINTER defines a generic pointer type */
typedef unsigned char *POINTER;

/* Constants for MD5Transform routine.
 */
#define S11 7
#define S12 12
#define S13 17
#define S14 22
#define S21 5
#define S22 9
#define S23 14
#define S24 20
#define S31 4
#define S32 11
#define S33 16
#define S34 23
#define S41 6
#define S42 10
#define S43 15
#define S44 21

#if BYTE_ORDER == LITTLE_ENDIAN
#define Encode memcpy
#define Decode memcpy
#else /* BIG_ENDIAN */
static void Encode(void *, const void *, size_t);
static void Decode(void *, const void *, size_t);
#endif /* LITTLE_ENDIAN */

static unsigned char PADDING[64] = {
  0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

/* F, G, H and I are basic MD5 functions.
 */
#define F(x, y, z) (((x) & (y)) | ((~x) & (z)))
#define G(x, y, z) (((x) & (z)) | ((y) & (~z)))
#define H(x, y, z) ((x) ^ (y) ^ (z))
#define I(x, y, z) ((y) ^ ((x) | (~z)))

/* ROTATE_LEFT rotates x left n bits.
 */
#define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32-(n))))

/* FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
Rotation is separate from addition to prevent recomputation.
 */
#define FF(a, b, c, d, x, s, ac) do {                                   \
        (a) += F ((b), (c), (d)) + (x) + (u_int32_t)(ac);               \
        (a) = ROTATE_LEFT((a), (s));                                    \
        (a) += (b);                                                     \
} while (0)

#define GG(a, b, c, d, x, s, ac) do {                                   \
        (a) += G ((b), (c), (d)) + (x) + (u_int32_t)(ac);               \
        (a) = ROTATE_LEFT((a), (s));                                    \
        (a) += (b);                                                     \
} while (0)

#define HH(a, b, c, d, x, s, ac) do {                                   \
        (a) += H ((b), (c), (d)) + (x) + (u_int32_t)(ac);               \
        (a) = ROTATE_LEFT((a), (s));                                    \
        (a) += (b);                                                     \
} while (0)

#define II(a, b, c, d, x, s, ac) do {                                   \
        (a) += I ((b), (c), (d)) + (x) + (u_int32_t)(ac);               \
        (a) = ROTATE_LEFT((a), (s));                                    \
        (a) += (b);                                                     \
} while (0)

#if BYTE_ORDER != LITTLE_ENDIAN
/* Encodes input (u_int32_t) into output (unsigned char). Assumes len is
  a multiple of 4.
 */
static void
Encode(void *out, const void *in, size_t len)
{
  unsigned char *output = out;
  const u_int32_t *input = in;
  size_t i, j;

  for (i = 0, j = 0; j < len; i++, j += 4) {
    output[j] = (unsigned char)(input[i] & 0xff);
    output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);
    output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);
    output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);
  }
}

/* Decodes input (unsigned char) into output (u_int32_t). Assumes len is
  a multiple of 4.
 */
static void
Decode(void *out, const void *in, size_t len)
{
  u_int32_t *output = out;
  const unsigned char *input = in;
  size_t i, j;

  for (i = 0, j = 0; j < len; i++, j += 4)
    output[i] = ((u_int32_t)input[j]) | (((u_int32_t)input[j+1]) << 8) |
    (((u_int32_t)input[j+2]) << 16) | (((u_int32_t)input[j+3]) << 24);
}
#endif /* !LITTLE_ENDIAN */

/* MD5 initialization. Begins an MD5 operation, writing a new context.
 */
void
MD5Init(MD5_CTX *context)
{
  context->count = 0;
  /* Load magic initialization constants. */
  context->state[0] = 0x67452301;
  context->state[1] = 0xefcdab89;
  context->state[2] = 0x98badcfe;
  context->state[3] = 0x10325476;
}

/* MD5 block update operation. Continues an MD5 message-digest
  operation, processing another message block, and updating the
  context.
 */
void
MD5Update(MD5_CTX *context, const u_char *input, size_t inputLen)
{
  unsigned int i, index, partLen;

  /* Compute number of bytes mod 64 */
  index = (unsigned int)((context->count >> 3) & 0x3F);

  /* Update number of bits */
  context->count += ((u_int64_t)inputLen << 3);

  partLen = 64 - index;

  /* Transform as many times as possible. */
  if (inputLen >= partLen) {
    memcpy((POINTER)&context->buffer[index], (POINTER)input, partLen);
    MD5Transform(context->state, context->buffer);

    for (i = partLen; i + 63 < inputLen; i += 64)
      MD5Transform(context->state, &input[i]);

    index = 0;
  }
  else
    i = 0;

  /* Buffer remaining input */
  memcpy((POINTER)&context->buffer[index], (POINTER)&input[i], inputLen-i);
}

/* MD5 finalization. Ends an MD5 message-digest operation, writing the
  the message digest and zeroizing the context.
 */
void
MD5Final(u_char digest[16], MD5_CTX *context)
{
  unsigned char bits[8];
  unsigned int index;
  size_t padLen;
  u_int32_t hi, lo;

  /* Save number of bits */
  hi = context->count >> 32;
  lo = (u_int32_t)context->count & 0xffffffff;
  Encode(bits, &lo, 4);
  Encode(bits + 4, &hi, 4);

  /* Pad out to 56 mod 64. */
  index = (unsigned int)((context->count >> 3) & 0x3f);
  padLen = (index < 56) ? (56 - index) : (120 - index);
  MD5Update(context, PADDING, padLen);

  /* Append length (before padding) */
  MD5Update(context, bits, 8);

  if (digest != NULL) {
    /* Store state in digest */
    Encode(digest, context->state, 16);

    /* Zeroize sensitive information.  */
    memset((POINTER)context, 0, sizeof (*context));
  }
}

/* MD5 basic transformation. Transforms state based on block.
 */
void
MD5Transform(u_int32_t state[4], const u_char block[64])
{
  u_int32_t a = state[0], b = state[1], c = state[2], d = state[3], x[16];

  Decode(x, block, 64);

  /* Round 1 */
  FF(a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */
  FF(d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */
  FF(c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */
  FF(b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */
  FF(a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */
  FF(d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */
  FF(c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */
  FF(b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */
  FF(a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */
  FF(d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */
  FF(c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */
  FF(b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */
  FF(a, b, c, d, x[12], S11, 0x6b901122); /* 13 */
  FF(d, a, b, c, x[13], S12, 0xfd987193); /* 14 */
  FF(c, d, a, b, x[14], S13, 0xa679438e); /* 15 */
  FF(b, c, d, a, x[15], S14, 0x49b40821); /* 16 */

 /* Round 2 */
  GG(a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */
  GG(d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */
  GG(c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */
  GG(b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */
  GG(a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */
  GG(d, a, b, c, x[10], S22,  0x2441453); /* 22 */
  GG(c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */
  GG(b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */
  GG(a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */
  GG(d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */
  GG(c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */
  GG(b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */
  GG(a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */
  GG(d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */
  GG(c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */
  GG(b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */

  /* Round 3 */
  HH(a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */
  HH(d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */
  HH(c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */
  HH(b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */
  HH(a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */
  HH(d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */
  HH(c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */
  HH(b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */
  HH(a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
  HH(d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */
  HH(c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */
  HH(b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */
  HH(a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */
  HH(d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */
  HH(c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */
  HH(b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */

  /* Round 4 */
  II(a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */
  II(d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */
  II(c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */
  II(b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */
  II(a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */
  II(d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */
  II(c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */
  II(b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */
  II(a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */
  II(d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */
  II(c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */
  II(b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */
  II(a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */
  II(d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
  II(c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */
  II(b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */

  state[0] += a;
  state[1] += b;
  state[2] += c;
  state[3] += d;

  /* Zeroize sensitive information. */
  memset((POINTER)x, 0, sizeof (x));
}

@


1.15
log
@Unbreak for bigendian, identical diff as Theo's.
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.14 2002/12/23 04:33:31 millert Exp $";
@


1.14
log
@o Ansi function headers
o Add __BEGIN_DECLS/__END_DECLS to include files
o Safe macros
o Remove useless variable assignment in the End function of *hl.c
o Some minor KNF, needs more
From Dan Weeks
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.13 2002/02/16 21:27:23 millert Exp $";
d130 1
a130 1
Decode(u_int32_t *output, const u_char *input, size_t len)
d134 1
@


1.13
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.12 2000/03/28 17:35:09 millert Exp $";
d83 23
a105 20
#define FF(a, b, c, d, x, s, ac) { \
 (a) += F ((b), (c), (d)) + (x) + (u_int32_t)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }
#define GG(a, b, c, d, x, s, ac) { \
 (a) += G ((b), (c), (d)) + (x) + (u_int32_t)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }
#define HH(a, b, c, d, x, s, ac) { \
 (a) += H ((b), (c), (d)) + (x) + (u_int32_t)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }
#define II(a, b, c, d, x, s, ac) { \
 (a) += I ((b), (c), (d)) + (x) + (u_int32_t)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }
d111 2
a112 4
static void Encode (out, in, len)
void *out;
const void *in;
size_t len;
d115 1
a116 1
  const u_int32_t *input = in;
d129 2
a130 4
static void Decode (out, in, len)
void *out;
const void *in;
size_t len;
a133 1
  size_t i, j;
d143 2
a144 2
void MD5Init (context)
MD5_CTX *context;					 /* context */
d158 2
a159 4
void MD5Update (context, input, inputLen)
MD5_CTX *context;					/* context */
const unsigned char *input;				/* input block */
size_t inputLen;		     /* length of input block */
d173 2
a174 2
    memcpy ((POINTER)&context->buffer[index], (POINTER)input, partLen);
    MD5Transform (context->state, context->buffer);
d177 1
a177 1
      MD5Transform (context->state, &input[i]);
d185 1
a185 1
  memcpy ((POINTER)&context->buffer[index], (POINTER)&input[i], inputLen-i);
d191 2
a192 3
void MD5Final (digest, context)
unsigned char digest[16];			  /* message digest */
MD5_CTX *context;					/* context */
d202 2
a203 2
  Encode (bits, &lo, 4);
  Encode (bits + 4, &hi, 4);
d208 1
a208 1
  MD5Update (context, PADDING, padLen);
d211 1
a211 1
  MD5Update (context, bits, 8);
d215 1
a215 1
    Encode (digest, context->state, 16);
d218 1
a218 1
    memset ((POINTER)context, 0, sizeof (*context));
d224 2
a225 3
void MD5Transform (state, block)
u_int32_t state[4];
const unsigned char block[64];
d229 1
a229 1
  Decode (x, block, 64);
d232 16
a247 16
  FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */
  FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */
  FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */
  FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */
  FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */
  FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */
  FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */
  FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */
  FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */
  FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */
  FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */
  FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */
  FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */
  FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */
  FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */
  FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */
d250 16
a265 16
  GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */
  GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */
  GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */
  GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */
  GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */
  GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */
  GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */
  GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */
  GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */
  GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */
  GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */
  GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */
  GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */
  GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */
  GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */
  GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */
d268 16
a283 16
  HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */
  HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */
  HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */
  HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */
  HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */
  HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */
  HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */
  HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */
  HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
  HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */
  HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */
  HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */
  HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */
  HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */
  HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */
  HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */
d286 16
a301 16
  II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */
  II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */
  II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */
  II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */
  II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */
  II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */
  II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */
  II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */
  II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */
  II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */
  II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */
  II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */
  II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */
  II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
  II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */
  II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */
d309 1
a309 1
  memset ((POINTER)x, 0, sizeof (x));
@


1.12
log
@Expose MDXTransform functions to be consistent with sha1 and rmd160.
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.11 1997/07/23 21:17:56 kstailey Exp $";
d59 2
a60 2
static void Encode __P((void *, const void *, size_t));
static void Decode __P((void *, const void *, size_t));
@


1.11
log
@tabify + trailing blanks
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.10 1997/07/03 23:30:21 provos Exp $";
a54 2
static void MD5Transform __P ((u_int32_t [4], const unsigned char [64]));

d229 1
a229 1
static void MD5Transform (state, block)
@


1.10
log
@MD[45]Final(NULL,&ctx) applies padding to context and can still be used with M[45]Update afterwards.
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.9 1997/04/30 05:56:06 tholo Exp $";
d106 1
a106 1
#if BYTE_ORDER != LITTLE_ENDIAN        
d148 1
a148 1
MD5_CTX *context;                                        /* context */
d163 3
a165 3
MD5_CTX *context;                                        /* context */
const unsigned char *input;                                /* input block */
size_t inputLen;                     /* length of input block */
d198 2
a199 2
unsigned char digest[16];                         /* message digest */
MD5_CTX *context;                                       /* context */
@


1.9
log
@Make possible truncation of long value more explicit
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.8 1997/01/07 10:09:00 niklas Exp $";
a218 2
  /* Store state in digest */
  Encode (digest, context->state, 16);
d220 7
a226 2
  /* Zeroize sensitive information.  */
  memset ((POINTER)context, 0, sizeof (*context));
@


1.8
log
@DOH! Fixing big endian broke little..
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.7 1997/01/06 00:18:23 niklas Exp $";
d208 1
a208 1
  lo = context->count & 0xffffffff;
@


1.7
log
@Fix these for big endian systems
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.6 1996/12/04 02:31:57 deraadt Exp $";
d204 1
d207 4
a210 2
  Encode (bits, ((void *)&context->count) + 4, 4);
  Encode (bits + 4, &context->count, 4);
@


1.6
log
@fix big endian; Encode/Decode
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.5 1996/11/24 02:25:58 niklas Exp $";
d61 1
a61 1
static void Encode __P((void *, void *, size_t));
d110 1
a110 1
static void Encode (in, out, len)
d112 1
a112 1
void *in;
d117 1
a117 1
  u_int32_t *input = in;
d173 1
a173 1
  context->count += (inputLen << 3);
d206 2
a207 1
  Encode (bits, &context->count, 8);
@


1.5
log
@64-bit cleanup + pedantic -W flags
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.4 1996/10/02 03:50:26 millert Exp $";
d61 2
a62 2
static void Encode __P((unsigned char *, u_int32_t *, size_t));
static void Decode __P((u_int32_t *, const unsigned char *, size_t));
d110 3
a112 3
static void Encode (output, input, len)
unsigned char *output;
u_int32_t *input;
d115 3
a117 1
  unsigned size_t i, j;
d130 3
a132 3
static void Decode (output, input, len)
u_int32_t *output;
const unsigned char *input;
d135 3
a137 1
  size_t int i, j;
@


1.4
log
@All the world is not a pc, BYTE_ORDER define.
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.3 1996/09/29 14:55:25 millert Exp $";
d61 2
a62 4
static void Encode __P
    ((unsigned char *, u_int32_t *, unsigned int));
static void Decode __P
    ((u_int32_t *, const unsigned char *, unsigned int));
d113 1
a113 1
unsigned int len;
d115 1
a115 1
  unsigned int i, j;
d131 1
a131 1
unsigned int len;
d133 1
a133 1
  unsigned int i, j;
d146 2
a147 3
  context->count[0] = context->count[1] = 0;
  /* Load magic initialization constants.
*/
d161 1
a161 1
unsigned int inputLen;                     /* length of input block */
d166 1
a166 1
  index = (unsigned int)((context->count[0] >> 3) & 0x3F);
d169 1
a169 4
  if ((context->count[0] += ((u_int32_t)inputLen << 3))
   < ((u_int32_t)inputLen << 3))
 context->count[1]++;
  context->count[1] += ((u_int32_t)inputLen >> 29);
d173 1
a173 2
  /* Transform as many times as possible.
*/
d175 2
a176 3
 memcpy
   ((POINTER)&context->buffer[index], (POINTER)input, partLen);
 MD5Transform (context->state, context->buffer);
d178 2
a179 2
 for (i = partLen; i + 63 < inputLen; i += 64)
   MD5Transform (context->state, &input[i]);
d181 1
a181 1
 index = 0;
d184 1
a184 1
 i = 0;
d187 1
a187 3
  memcpy
 ((POINTER)&context->buffer[index], (POINTER)&input[i],
  inputLen-i);
d198 2
a199 1
  unsigned int index, padLen;
d202 1
a202 1
  Encode (bits, context->count, 8);
d204 2
a205 3
  /* Pad out to 56 mod 64.
*/
  index = (unsigned int)((context->count[0] >> 3) & 0x3f);
d214 1
a214 2
  /* Zeroize sensitive information.
*/
d305 1
a305 2
  /* Zeroize sensitive information.
*/
@


1.3
log
@Now use bittypes wo we work on 64-bit machines
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD: md5c.c,v 1.2 1996/08/19 08:28:29 tholo Exp $";
d57 1
a57 1
#ifdef i386
d60 6
a65 34
#else /* i386 */
/* Encodes input (u_int32_t) into output (unsigned char). Assumes len is
  a multiple of 4.
 */
static void Encode (output, input, len)
unsigned char *output;
u_int32_t *input;
unsigned int len;
{
  unsigned int i, j;

  for (i = 0, j = 0; j < len; i++, j += 4) {
    output[j] = (unsigned char)(input[i] & 0xff);
    output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);
    output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);
    output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);
  }
}

/* Decodes input (unsigned char) into output (u_int32_t). Assumes len is
  a multiple of 4.
 */
static void Decode (output, input, len)
u_int32_t *output;
const unsigned char *input;
unsigned int len;
{
  unsigned int i, j;

  for (i = 0, j = 0; j < len; i++, j += 4)
    output[i] = ((u_int32_t)input[j]) | (((u_int32_t)input[j+1]) << 8) |
    (((u_int32_t)input[j+2]) << 16) | (((u_int32_t)input[j+3]) << 24);
}
#endif /* i386 */
d107 35
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d26 1
a26 1
static char rcsid[] = "$OpenBSD$";
d29 2
a31 1
#include <string.h>
d33 1
a34 4
typedef unsigned short int UINT2;
typedef unsigned long int UINT4;

#define PROTO_LIST(list) list
d55 1
a55 1
static void MD5Transform PROTO_LIST ((UINT4 [4], const unsigned char [64]));
d61 1
a61 1
/* Encodes input (UINT4) into output (unsigned char). Assumes len is
d66 1
a66 1
UINT4 *input;
d79 1
a79 1
/* Decodes input (unsigned char) into output (UINT4). Assumes len is
d83 1
a83 1
UINT4 *output;
d90 2
a91 2
    output[i] = ((UINT4)input[j]) | (((UINT4)input[j+1]) << 8) |
    (((UINT4)input[j+2]) << 16) | (((UINT4)input[j+3]) << 24);
d116 1
a116 1
 (a) += F ((b), (c), (d)) + (x) + (UINT4)(ac); \
d121 1
a121 1
 (a) += G ((b), (c), (d)) + (x) + (UINT4)(ac); \
d126 1
a126 1
 (a) += H ((b), (c), (d)) + (x) + (UINT4)(ac); \
d131 1
a131 1
 (a) += I ((b), (c), (d)) + (x) + (UINT4)(ac); \
d165 2
a166 2
  if ((context->count[0] += ((UINT4)inputLen << 3))
   < ((UINT4)inputLen << 3))
d168 1
a168 1
  context->count[1] += ((UINT4)inputLen >> 29);
d225 1
a225 1
UINT4 state[4];
d228 1
a228 1
  UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];
@


1.1
log
@Add md[245] routines in libc/md, remove md5 from libc/crypt.  Add $OpenBSD$
@
text
@d1 1
a1 3
/* MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm
 * $OpenBSD$
 */
d24 4
@
