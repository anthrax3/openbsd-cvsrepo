head	1.20;
access;
symbols
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.17.0.8
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.6
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.4
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9:1.16.0.6
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_8:1.16.0.4
	OPENBSD_2_8_BASE:1.16
	OPENBSD_2_7:1.16.0.2
	OPENBSD_2_7_BASE:1.16
	OPENBSD_2_6:1.14.0.2
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.9.0.4
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@# @;


1.20
date	2004.04.28.16.57.10;	author millert;	state dead;
branches;
next	1.19;

1.19
date	2003.06.25.19.33.34;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.30.21.01.02;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.18.03.01.30;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2000.03.28.17.35.09;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	99.10.08.10.55.27;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	99.10.06.14.55.29;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	99.07.09.13.35.14;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.05.10.17.56.29;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.02.12.20.04.05;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	98.03.10.04.50.33;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.07.15.01.54.22;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.07.03.23.30.22;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.06.05.21.12.47;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	97.03.07.11.25.37;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	96.10.15.22.00.12;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.10.08.01.20.08;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.08.04.21.31.34;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.03.22.20.43;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Remove old md[45]
@
text
@.\"
.\" ----------------------------------------------------------------------------
.\" "THE BEER-WARE LICENSE" (Revision 42):
.\" <phk@@login.dkuug.dk> wrote this file.  As long as you retain this notice you
.\" can do whatever you want with this stuff. If we meet some day, and you think
.\" this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
.\" ----------------------------------------------------------------------------
.\"
.\" 	$OpenBSD: mdX.3,v 1.19 2003/06/25 19:33:34 deraadt Exp $
.\"
.Dd October 9, 1996
.Dt MDX 3
.Os
.Sh NAME
.Nm MDXInit ,
.Nm MDXUpdate ,
.Nm MDXFinal ,
.Nm MDXTransform ,
.Nm MDXEnd ,
.Nm MDXFile ,
.Nm MDXData
.Nd calculate the RSA Data Security, Inc., ``MDX'' message digest
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <mdX.h>
.Ft void
.Fn MDXInit "MDX_CTX *context"
.Ft void
.Fn MDXUpdate "MDX_CTX *context" "const unsigned char *data" "unsigned int len"
.Ft void
.Fn MDXFinal "unsigned char digest[16]" "MDX_CTX *context"
.Ft void
.Fn MDXTransform "u_int32_t state[4]" "unsigned char block[64]"
.Ft "char *"
.Fn MDXEnd "MDX_CTX *context" "char *buf"
.Ft "char *"
.Fn MDXFile "char *filename" "char *buf"
.Ft "char *"
.Fn MDXData "const unsigned char *data" "unsigned int len" "char *buf"
.Sh DESCRIPTION
The MDX functions calculate a 128-bit cryptographic checksum (digest)
for any number of input bytes.
A cryptographic checksum is a one-way
hash-function, that is, you cannot find (except by exhaustive search)
the input corresponding to a particular output.
This net result is a
.Dq fingerprint
of the input-data, which doesn't disclose the actual input.
.Pp
MD2 is the slowest, MD4 is the fastest and MD5 is somewhere in the middle.
MD2 can only be used for Privacy-Enhanced Mail.
MD4 has been shown to have severe vulnerabilities; it should only be
used where necessary for backward compatibility.
MD5 has not yet (1999-02-11) been broken, but recent attacks have cast
some doubt on its security properties.
The attacks on both MD4 and MD5
are both in the nature of finding
.Dq collisions
\- that is, multiple
inputs which hash to the same value; it is still unlikely for an attacker
to be able to determine the exact original input given a hash value.
.Pp
The
.Fn MDXInit ,
.Fn MDXUpdate ,
and
.Fn MDXFinal
functions are the core functions.
Allocate an MDX_CTX, initialize it with
.Fn MDXInit ,
run over the data with
.Fn MDXUpdate ,
and finally extract the result using
.Fn MDXFinal .
When a null pointer is passed to
.Fn MDXFinal
as first argument only the final padding will be applied and the
current context can still be used with
.Fn MDXUpdate .
.Pp
The
.Fn MDXTransform
function is used by
.Fn MDXUpdate
to hash 512-bit blocks and forms the core of the algorithm.
Most programs should use the interface provided by
.Fn MDXInit ,
.Fn MDXUpdate
and
.Fn MDXFinal
instead of calling
.Fn MDXTransform
directly.
.Pp
.Fn MDXEnd
is a wrapper for
.Fn MDXFinal
which converts the return value to a 33-character
(including the terminating '\e0')
.Tn ASCII
string which represents the 128 bits in hexadecimal.
.Pp
.Fn MDXFile
calculates the digest of a file, and uses
.Fn MDXEnd
to return the result.
If the file cannot be opened, a null pointer is returned.
.Fn MDXData
calculates the digest of a chunk of data in memory, and uses
.Fn MDXEnd
to return the result.
.Pp
When using
.Fn MDXEnd ,
.Fn MDXFile ,
or
.Fn MDXData ,
the
.Ar buf
argument can be a null pointer, in which case the returned string
is allocated with
.Xr malloc 3
and subsequently must be explicitly deallocated using
.Xr free 3
after use.
If the
.Ar buf
argument is non-null it must point to at least 33 characters of buffer space.
.Sh SEE ALSO
.Xr mdY 3 ,
.Xr rmd160 3 ,
.Xr sha1 3
.Rs
.%A B. Kaliski
.%T The MD2 Message-Digest Algorithm
.%O RFC 1319
.Re
.Rs
.%A R. Rivest
.%T The MD4 Message-Digest Algorithm
.%O RFC 1186
.Re
.Rs
.%A R. Rivest
.%T The MD5 Message-Digest Algorithm
.%O RFC 1321
.Re
.Rs
.%A RSA Laboratories
.%T Frequently Asked Questions About today's Cryptography
.%O \&<http://www.rsa.com/rsalabs/faq/>
.Re
.Rs
.%A H. Dobbertin
.%T Alf Swindles Ann
.%J CryptoBytes
.%N 1(3):5
.%D 1995
.Re
.Rs
.%A MJ. B. Robshaw
.%T On Recent Results for MD2, MD4 and MD5
.%J RSA Laboratories Bulletin
.%N 4
.%D November 12, 1996
.Re
.Rs
.%A Hans Dobbertin
.%T Cryptanalysis of MD5 Compress
.Re
.Sh HISTORY
These functions appeared in
.Ox 2.0 .
.Sh AUTHORS
The original MDX routines were developed by
.Tn RSA
Data Security, Inc., and published in the above references.
This code is derived directly from these implementations by Poul-Henning Kamp
.Aq Li phk@@login.dkuug.dk
.Pp
Phk ristede runen.
.Sh BUGS
Hans Dobbertin has shown collisions for the full version of MD4 and
found a collision in the compress function of MD5.
The use of SHA or RIPEMD-160 is recommended instead.
.Pp
MD2 has only been licensed for use in Privacy Enhanced Mail.
Use MD4 or MD5 if that isn't what you're doing.
.Sh COPYRIGHT
@


1.19
log
@missing const; millert ok
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.18 2003/05/30 21:01:02 jmc Exp $
@


1.18
log
@section reorder;
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.17 2001/08/06 10:42:26 mpech Exp $
d39 1
a39 1
.Fn MDXData "unsigned char *data" "unsigned int len" "char *buf"
@


1.17
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.16 2000/04/18 03:01:30 aaron Exp $
d171 3
a181 3
.Sh HISTORY
These functions appeared in
.Ox 2.0 .
@


1.16
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.15 2000/03/28 17:35:09 millert Exp $
d171 1
a171 1
.Sh AUTHOR
@


1.15
log
@Expose MDXTransform functions to be consistent with sha1 and rmd160.
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.14 1999/10/08 10:55:27 espie Exp $
d42 2
a43 1
for any number of input bytes.  A cryptographic checksum is a one-way
d45 4
a48 3
the input corresponding to a particular output.  This net result is
a ``fingerprint'' of the input-data, which doesn't disclose the actual
input.
d55 5
a59 2
some doubt on its security properties.  The attacks on both MD4 and MD5
are both in the nature of finding ``collisions'' \- that is, multiple
d68 2
a69 1
functions are the core functions.  Allocate an MDX_CTX, initialize it with
d184 2
a185 2
found a collision in the compress function of MD5. The use of SHA or
RIPEMD-160 is recommended instead.
@


1.14
log
@SYNOPSIS needs #include <sys/types.h>
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.13 1999/10/06 14:55:29 espie Exp $
d18 1
d32 2
d74 14
@


1.13
log
@- let cryptographic checksums refer to each other
- avoid .Xref to one's own manpage
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.12 1999/07/09 13:35:14 aaron Exp $
d23 1
@


1.12
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.11 1999/05/10 17:56:29 aaron Exp $
d106 3
a108 2
.Xr md4 3 ,
.Xr md5 3
@


1.11
log
@correct some Xr's which referred to the wrong man page sections
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.10 1999/02/12 20:04:05 angelos Exp $
d40 1
a40 1
the input corresponding to a particular output.  This net result is 
d67 1
a67 1
as first argument only the final padding will be applied and the 
d80 1
a80 1
calculates the digest of a file, and uses 
d94 1
a94 1
the 
d102 1
a102 1
If the 
d124 1
a124 1
.%A RSA Laboratories 
d159 1
a159 1
found a collision in the compress function of MD5. The use of SHA or 
@


1.10
log
@Mention that MD4 is pretty much broken, and MD5 may follow. A couple
more references to the attacks. From FreeBSD.
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.9 1998/03/10 04:50:33 millert Exp $
a105 1
.Xr md2 3 ,
@


1.9
log
@use .Ox
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.8 1997/07/15 01:54:22 millert Exp $
d46 7
a52 2
MD4 has been criticized for being too weak, so MD5 was developed in
response as ``MD4 with safety-belts''.  When in doubt, use MD5.
d127 15
@


1.8
log
@Add a missing const
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.7 1997/07/03 23:30:22 provos Exp $
d137 1
a137 1
.Em OpenBSD-2.0 .
@


1.7
log
@MD[45]Final(NULL,&ctx) applies padding to context and can still be used with M[45]Update afterwards.
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.6 1997/06/05 21:12:47 provos Exp $
d27 1
a27 1
.Fn MDXUpdate "MDX_CTX *context" "unsigned char *data" "unsigned int len"
@


1.6
log
@collision also for md4
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.5 1997/03/07 11:25:37 provos Exp $
d60 5
@


1.5
log
@mention collision found by Dobbertin
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.4 1996/10/15 22:00:12 millert Exp $
d132 1
a132 1
.Em FreeBSD-2.0 .
d134 3
a136 2
Hans Dobbertin has found a collision in the compress function of MD5 and
recommends using SHA or RIPEMD-160 instead.
@


1.4
log
@Minor doc fixups from FreeBSD.
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.3 1996/10/08 01:20:08 michaels Exp $
d118 4
d134 2
a135 3
No method is known to exist which finds two files having the same hash value,
nor to find a file with a specific hash value.
There is on the other hand no guarantee that such a method doesn't exist.
@


1.3
log
@Attempt at cleanup.
@
text
@d9 1
a9 1
.\" $OpenBSD: mdX.3,v 1.1 1996/06/03 22:20:43 niklas Exp $
d11 1
a11 1
.Dd July 14, 1994
d21 1
a21 1
.Nd calculate ``MDX'' cryptographic checksum
d43 1
a43 1

d46 3
a48 3
MD4 has been critizised for being too weak, and MD5 was developed as a 
response to this as ``MD4 with safety-belts''.  If in doubt, use MD5.

d51 1
a51 1
.Fn MDXUpdate
d54 2
a55 2
functions are the core functions.  Allocate a MDX_CTX, initialize it with
.Fn MDXInit
d57 1
a57 1
.Fn MDXUpdate
d60 1
a60 1

d63 6
a68 4
.Fn MDXFinal ,
which converts the return value to a 33 character (incl terminating NULL)
ascii string which represents the 128 bits in hexadecimal.

d73 1
a73 2
In case the file cannot be opened, NULL is returned.

d78 1
a78 1

d81 1
a81 1
.Fn MDXFile
d86 2
a87 1
argument can be NULL, in which case the returned string is allocated with
d94 1
a94 1
argument isn't NULL it must point to at least 33 characters of buffer space.
d99 19
a117 10
.Pp
ISOC
Internet Request For Comments
.%T RFC1319 ,
.%T RFC1320
and
.%T RFC1321 .
.Pp
RSA Laboratories 
.%T Frequently Asked Questions About today's Cryptography . 
d119 3
a121 3
The MD2, MD4 and MD5 is designed and written by Ron Rivest and published in
the above RFC's, including a reference implementation of each algorithm.

d123 2
a124 2
<phk@@login.dkuug.dk>

d128 1
a128 1
.Em FreeBSD-2.0
d133 2
a134 2

MD2 has only been released for use in Privacy Enhanced eMail.
@


1.2
log
@typo
@
text
@d13 1
a13 1
.Os FreeBSD 2
@


1.1
log
@Add md[245] routines in libc/md, remove md5 from libc/crypt.  Add $OpenBSD$
@
text
@d9 1
a9 1
.\" $OpenBSD$
d46 1
a46 1
MD4 has been critizised for being to weak, and MD5 was developed as a 
@

