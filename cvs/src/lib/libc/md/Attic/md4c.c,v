head	1.15;
access;
symbols
	OPENBSD_3_5:1.14.0.6
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.4
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.8
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.6
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.4
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.11.0.10
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.8
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.6
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.4
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.11.0.2
	OPENBSD_2_2_BASE:1.11
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.15
date	2004.04.28.16.57.10;	author millert;	state dead;
branches;
next	1.14;

1.14
date	2002.12.23.04.33.31;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.16.21.27.23;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2000.03.28.17.35.09;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	97.07.23.21.17.55;	author kstailey;	state Exp;
branches;
next	1.10;

1.10
date	97.07.03.23.30.20;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	97.04.30.05.56.05;	author tholo;	state Exp;
branches;
next	1.8;

1.8
date	97.01.07.10.09.00;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	97.01.06.00.18.22;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.12.04.02.31.56;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.11.24.02.25.58;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.10.02.03.50.25;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.29.14.55.25;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.28.26;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	96.06.03.22.20.41;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove old md[45]
@
text
@/* MD4C.C - RSA Data Security, Inc., MD4 message-digest algorithm */

/* Copyright (C) 1990-2, RSA Data Security, Inc. All rights reserved.

   License to copy and use this software is granted provided that it
   is identified as the "RSA Data Security, Inc. MD4 Message-Digest
   Algorithm" in all material mentioning or referencing this software
   or this function.

   License is also granted to make and use derivative works provided
   that such works are identified as "derived from the RSA Data
   Security, Inc. MD4 Message-Digest Algorithm" in all material
   mentioning or referencing the derived work.

   RSA Data Security, Inc. makes no representations concerning either
   the merchantability of this software or the suitability of this
   software for any particular purpose. It is provided "as is"
   without express or implied warranty of any kind.

   These notices must be retained in any copies of any part of this
   documentation and/or software.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: md4c.c,v 1.14 2002/12/23 04:33:31 millert Exp $";
#endif /* LIBC_SCCS and not lint */

#include <string.h>
#include <sys/types.h>
#include <md4.h>

/* POINTER defines a generic pointer type */
typedef unsigned char *POINTER;

/* Constants for MD4Transform routine.
 */
#define S11 3
#define S12 7
#define S13 11
#define S14 19
#define S21 3
#define S22 5
#define S23 9
#define S24 13
#define S31 3
#define S32 9
#define S33 11
#define S34 15

#if BYTE_ORDER == LITTLE_ENDIAN
#define Encode memcpy
#define Decode memcpy
#else /* BIG_ENDIAN */
static void Encode(void *, const void *, size_t);
static void Decode(void *, const void *, size_t);
#endif /* LITTLE_ENDIAN */

static unsigned char PADDING[64] = {
  0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

/* F, G and H are basic MD4 functions.
 */
#define F(x, y, z) (((x) & (y)) | ((~x) & (z)))
#define G(x, y, z) (((x) & (y)) | ((x) & (z)) | ((y) & (z)))
#define H(x, y, z) ((x) ^ (y) ^ (z))

/* ROTATE_LEFT rotates x left n bits.
 */
#define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32-(n))))

/* FF, GG and HH are transformations for rounds 1, 2 and 3 */
/* Rotation is separate from addition to prevent recomputation */
#define FF(a, b, c, d, x, s) do {                                       \
        (a) += F ((b), (c), (d)) + (x);                                 \
        (a) = ROTATE_LEFT((a), (s));                                    \
} while (0)

#define GG(a, b, c, d, x, s) do {                                       \
        (a) += G ((b), (c), (d)) + (x) + (u_int32_t)0x5a827999;         \
        (a) = ROTATE_LEFT((a), (s));                                    \
} while (0)

#define HH(a, b, c, d, x, s) do {                                       \
        (a) += H ((b), (c), (d)) + (x) + (u_int32_t)0x6ed9eba1;         \
        (a) = ROTATE_LEFT((a), (s));                                    \
} while (0)

#if BYTE_ORDER != LITTLE_ENDIAN
/* Encodes input (u_int32_t) into output (unsigned char). Assumes len is
     a multiple of 4.
 */
static void
Encode(void *out, const void *in, size_t len)
{
  const u_int32_t *input = in;
  unsigned char *output = out;
  size_t i, j;

  for (i = 0, j = 0; j < len; i++, j += 4) {
    output[j] = (unsigned char)(input[i] & 0xff);
    output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);
    output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);
    output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);
  }
}

/* Decodes input (unsigned char) into output (u_int32_t). Assumes len is
     a multiple of 4.
 */
static void
Decode(void *out, const void *in, size_t len)
{
  u_int32_t *output = out;
  const unsigned char *input = in;
  size_t i, j;

  for (i = 0, j = 0; j < len; i++, j += 4)
    output[i] = ((u_int32_t)input[j]) | (((u_int32_t)input[j+1]) << 8) |
      (((u_int32_t)input[j+2]) << 16) | (((u_int32_t)input[j+3]) << 24);
}
#endif /* !LITTLE_ENDIAN */

/* MD4 initialization. Begins an MD4 operation, writing a new context.
 */
void
MD4Init(MD4_CTX *context)
{
  context->count = 0;

  /* Load magic initialization constants.
   */
  context->state[0] = 0x67452301;
  context->state[1] = 0xefcdab89;
  context->state[2] = 0x98badcfe;
  context->state[3] = 0x10325476;
}

/* MD4 block update operation. Continues an MD4 message-digest
     operation, processing another message block, and updating the
     context.
 */
void
MD4Update(MD4_CTX *context, const unsigned char *input, size_t inputLen)
{
  unsigned int i, index, partLen;

  /* Compute number of bytes mod 64 */
  index = (unsigned int)((context->count >> 3) & 0x3F);

  /* Update number of bits */
  context->count += ((u_int64_t)inputLen << 3);

  partLen = 64 - index;
  /* Transform as many times as possible.  */
  if (inputLen >= partLen) {
    memcpy((POINTER)&context->buffer[index], (POINTER)input, partLen);
    MD4Transform(context->state, context->buffer);

    for (i = partLen; i + 63 < inputLen; i += 64)
      MD4Transform(context->state, &input[i]);

    index = 0;
  }
  else
    i = 0;

  /* Buffer remaining input */
  memcpy((POINTER)&context->buffer[index], (POINTER)&input[i], inputLen-i);
}

/* MD4 finalization. Ends an MD4 message-digest operation, writing the
     the message digest and zeroizing the context.
 */
void
MD4Final(unsigned char digest[16], MD4_CTX *context)
{
  unsigned char bits[8];
  unsigned int index, padLen;
  u_int32_t hi, lo;

  /* Save number of bits */
  hi = context->count >> 32;
  lo = (u_int32_t)context->count & 0xffffffff;
  Encode(bits, &lo, 4);
  Encode(bits + 4, &hi, 4);

  /* Pad out to 56 mod 64.
   */
  index = (unsigned int)((context->count >> 3) & 0x3f);
  padLen = (index < 56) ? (56 - index) : (120 - index);
  MD4Update(context, PADDING, padLen);

  /* Append length (before padding) */
  MD4Update(context, bits, 8);

  if (digest != NULL) {
    /* Store state in digest */
    Encode(digest, context->state, 16);

    /* Zeroize sensitive information.
     */
    memset((POINTER)context, 0, sizeof (*context));
  }
}

/* MD4 basic transformation. Transforms state based on block.
 */
void
MD4Transform(u_int32_t state[4], const unsigned char block[64])
{
  u_int32_t a = state[0], b = state[1], c = state[2], d = state[3], x[16];

  Decode(x, block, 64);

  /* Round 1 */
  FF(a, b, c, d, x[ 0], S11); /* 1 */
  FF(d, a, b, c, x[ 1], S12); /* 2 */
  FF(c, d, a, b, x[ 2], S13); /* 3 */
  FF(b, c, d, a, x[ 3], S14); /* 4 */
  FF(a, b, c, d, x[ 4], S11); /* 5 */
  FF(d, a, b, c, x[ 5], S12); /* 6 */
  FF(c, d, a, b, x[ 6], S13); /* 7 */
  FF(b, c, d, a, x[ 7], S14); /* 8 */
  FF(a, b, c, d, x[ 8], S11); /* 9 */
  FF(d, a, b, c, x[ 9], S12); /* 10 */
  FF(c, d, a, b, x[10], S13); /* 11 */
  FF(b, c, d, a, x[11], S14); /* 12 */
  FF(a, b, c, d, x[12], S11); /* 13 */
  FF(d, a, b, c, x[13], S12); /* 14 */
  FF(c, d, a, b, x[14], S13); /* 15 */
  FF(b, c, d, a, x[15], S14); /* 16 */

  /* Round 2 */
  GG(a, b, c, d, x[ 0], S21); /* 17 */
  GG(d, a, b, c, x[ 4], S22); /* 18 */
  GG(c, d, a, b, x[ 8], S23); /* 19 */
  GG(b, c, d, a, x[12], S24); /* 20 */
  GG(a, b, c, d, x[ 1], S21); /* 21 */
  GG(d, a, b, c, x[ 5], S22); /* 22 */
  GG(c, d, a, b, x[ 9], S23); /* 23 */
  GG(b, c, d, a, x[13], S24); /* 24 */
  GG(a, b, c, d, x[ 2], S21); /* 25 */
  GG(d, a, b, c, x[ 6], S22); /* 26 */
  GG(c, d, a, b, x[10], S23); /* 27 */
  GG(b, c, d, a, x[14], S24); /* 28 */
  GG(a, b, c, d, x[ 3], S21); /* 29 */
  GG(d, a, b, c, x[ 7], S22); /* 30 */
  GG(c, d, a, b, x[11], S23); /* 31 */
  GG(b, c, d, a, x[15], S24); /* 32 */

  /* Round 3 */
  HH(a, b, c, d, x[ 0], S31); /* 33 */
  HH(d, a, b, c, x[ 8], S32); /* 34 */
  HH(c, d, a, b, x[ 4], S33); /* 35 */
  HH(b, c, d, a, x[12], S34); /* 36 */
  HH(a, b, c, d, x[ 2], S31); /* 37 */
  HH(d, a, b, c, x[10], S32); /* 38 */
  HH(c, d, a, b, x[ 6], S33); /* 39 */
  HH(b, c, d, a, x[14], S34); /* 40 */
  HH(a, b, c, d, x[ 1], S31); /* 41 */
  HH(d, a, b, c, x[ 9], S32); /* 42 */
  HH(c, d, a, b, x[ 5], S33); /* 43 */
  HH(b, c, d, a, x[13], S34); /* 44 */
  HH(a, b, c, d, x[ 3], S31); /* 45 */
  HH(d, a, b, c, x[11], S32); /* 46 */
  HH(c, d, a, b, x[ 7], S33); /* 47 */
  HH(b, c, d, a, x[15], S34); /* 48 */
  state[0] += a;
  state[1] += b;
  state[2] += c;
  state[3] += d;

  /* Zeroize sensitive information.
   */
  memset((POINTER)x, 0, sizeof (x));
}
@


1.14
log
@o Ansi function headers
o Add __BEGIN_DECLS/__END_DECLS to include files
o Safe macros
o Remove useless variable assignment in the End function of *hl.c
o Some minor KNF, needs more
From Dan Weeks
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.13 2002/02/16 21:27:23 millert Exp $";
@


1.13
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.12 2000/03/28 17:35:09 millert Exp $";
d76 14
a89 12
#define FF(a, b, c, d, x, s) { \
    (a) += F ((b), (c), (d)) + (x); \
    (a) = ROTATE_LEFT ((a), (s)); \
  }
#define GG(a, b, c, d, x, s) { \
    (a) += G ((b), (c), (d)) + (x) + (u_int32_t)0x5a827999; \
    (a) = ROTATE_LEFT ((a), (s)); \
  }
#define HH(a, b, c, d, x, s) { \
    (a) += H ((b), (c), (d)) + (x) + (u_int32_t)0x6ed9eba1; \
    (a) = ROTATE_LEFT ((a), (s)); \
  }
d95 2
a96 4
static void Encode (out, in, len)
void *out;
const void *in;
size_t len;
d113 2
a114 4
static void Decode (out, in, len)
void *out;
const void *in;
size_t len;
d128 2
a129 2
void MD4Init (context)
MD4_CTX *context;					 /* context */
d145 2
a146 4
void MD4Update (context, input, inputLen)
MD4_CTX *context;				/* context */
const unsigned char *input;			/* input block */
size_t inputLen;				/* length of input block */
d159 2
a160 3
    memcpy
      ((POINTER)&context->buffer[index], (POINTER)input, partLen);
    MD4Transform (context->state, context->buffer);
d163 1
a163 1
      MD4Transform (context->state, &input[i]);
d171 1
a171 3
  memcpy
    ((POINTER)&context->buffer[index], (POINTER)&input[i],
     inputLen-i);
d177 2
a178 3
void MD4Final (digest, context)
unsigned char digest[16];			  /* message digest */
MD4_CTX *context;					 /* context */
d187 2
a188 2
  Encode (bits, &lo, 4);
  Encode (bits + 4, &hi, 4);
d194 1
a194 1
  MD4Update (context, PADDING, padLen);
d197 1
a197 1
  MD4Update (context, bits, 8);
d201 1
a201 1
    Encode (digest, context->state, 16);
d205 1
a205 1
    memset ((POINTER)context, 0, sizeof (*context));
d211 2
a212 3
void MD4Transform (state, block)
u_int32_t state[4];
const unsigned char block[64];
d216 1
a216 1
  Decode (x, block, 64);
d219 16
a234 16
  FF (a, b, c, d, x[ 0], S11); /* 1 */
  FF (d, a, b, c, x[ 1], S12); /* 2 */
  FF (c, d, a, b, x[ 2], S13); /* 3 */
  FF (b, c, d, a, x[ 3], S14); /* 4 */
  FF (a, b, c, d, x[ 4], S11); /* 5 */
  FF (d, a, b, c, x[ 5], S12); /* 6 */
  FF (c, d, a, b, x[ 6], S13); /* 7 */
  FF (b, c, d, a, x[ 7], S14); /* 8 */
  FF (a, b, c, d, x[ 8], S11); /* 9 */
  FF (d, a, b, c, x[ 9], S12); /* 10 */
  FF (c, d, a, b, x[10], S13); /* 11 */
  FF (b, c, d, a, x[11], S14); /* 12 */
  FF (a, b, c, d, x[12], S11); /* 13 */
  FF (d, a, b, c, x[13], S12); /* 14 */
  FF (c, d, a, b, x[14], S13); /* 15 */
  FF (b, c, d, a, x[15], S14); /* 16 */
d237 16
a252 16
  GG (a, b, c, d, x[ 0], S21); /* 17 */
  GG (d, a, b, c, x[ 4], S22); /* 18 */
  GG (c, d, a, b, x[ 8], S23); /* 19 */
  GG (b, c, d, a, x[12], S24); /* 20 */
  GG (a, b, c, d, x[ 1], S21); /* 21 */
  GG (d, a, b, c, x[ 5], S22); /* 22 */
  GG (c, d, a, b, x[ 9], S23); /* 23 */
  GG (b, c, d, a, x[13], S24); /* 24 */
  GG (a, b, c, d, x[ 2], S21); /* 25 */
  GG (d, a, b, c, x[ 6], S22); /* 26 */
  GG (c, d, a, b, x[10], S23); /* 27 */
  GG (b, c, d, a, x[14], S24); /* 28 */
  GG (a, b, c, d, x[ 3], S21); /* 29 */
  GG (d, a, b, c, x[ 7], S22); /* 30 */
  GG (c, d, a, b, x[11], S23); /* 31 */
  GG (b, c, d, a, x[15], S24); /* 32 */
d255 16
a270 17
  HH (a, b, c, d, x[ 0], S31); /* 33 */
  HH (d, a, b, c, x[ 8], S32); /* 34 */
  HH (c, d, a, b, x[ 4], S33); /* 35 */
  HH (b, c, d, a, x[12], S34); /* 36 */
  HH (a, b, c, d, x[ 2], S31); /* 37 */
  HH (d, a, b, c, x[10], S32); /* 38 */
  HH (c, d, a, b, x[ 6], S33); /* 39 */
  HH (b, c, d, a, x[14], S34); /* 40 */
  HH (a, b, c, d, x[ 1], S31); /* 41 */
  HH (d, a, b, c, x[ 9], S32); /* 42 */
  HH (c, d, a, b, x[ 5], S33); /* 43 */
  HH (b, c, d, a, x[13], S34); /* 44 */
  HH (a, b, c, d, x[ 3], S31); /* 45 */
  HH (d, a, b, c, x[11], S32); /* 46 */
  HH (c, d, a, b, x[ 7], S33); /* 47 */
  HH (b, c, d, a, x[15], S34); /* 48 */

d278 1
a278 1
  memset ((POINTER)x, 0, sizeof (x));
@


1.12
log
@Expose MDXTransform functions to be consistent with sha1 and rmd160.
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.11 1997/07/23 21:17:55 kstailey Exp $";
d54 2
a55 2
static void Encode __P ((void *, const void *, size_t));
static void Decode __P ((void *, const void *, size_t));
@


1.11
log
@tabify + trailing blanks
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.10 1997/07/03 23:30:20 provos Exp $";
a49 2
static void MD4Transform __P ((u_int32_t [4], const unsigned char [64]));

d219 1
a219 1
static void MD4Transform (state, block)
@


1.10
log
@MD[45]Final(NULL,&ctx) applies padding to context and can still be used with M[45]Update afterwards.
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.9 1997/04/30 05:56:05 tholo Exp $";
d54 1
a54 1
#define Decode memcpy                       
d133 1
a133 1
MD4_CTX *context;                                        /* context */
d150 3
a152 3
MD4_CTX *context;                                        /* context */
const unsigned char *input;                                /* input block */
size_t inputLen;                     /* length of input block */
d187 2
a188 2
unsigned char digest[16];                         /* message digest */
MD4_CTX *context;                                        /* context */
@


1.9
log
@Make possible truncation of long value more explicit
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.8 1997/01/07 10:09:00 niklas Exp $";
a207 2
  /* Store state in digest */
  Encode (digest, context->state, 16);
d209 8
a216 3
  /* Zeroize sensitive information.
   */
  memset ((POINTER)context, 0, sizeof (*context));
@


1.8
log
@DOH! Fixing big endian broke little..
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.7 1997/01/06 00:18:22 niklas Exp $";
d196 1
a196 1
  lo = context->count & 0xffffffff;
@


1.7
log
@Fix these for big endian systems
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.6 1996/12/04 02:31:56 deraadt Exp $";
d192 1
d195 4
a198 2
  Encode (bits, ((void *)&context->count) + 4, 4);
  Encode (bits + 4, &context->count, 4);
@


1.6
log
@fix big endian; Encode/Decode
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.5 1996/11/24 02:25:58 niklas Exp $";
d56 1
a56 1
static void Encode __P ((void *, void *, size_t));
d97 1
a97 1
void *in;
d100 1
a100 1
  u_int32_t *input = in;
d160 1
a160 1
  context->count += (inputLen << 3);
d194 2
a195 1
  Encode (bits, &context->count, 8);
@


1.5
log
@64-bit cleanup + pedantic -W flags
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.4 1996/10/02 03:50:25 millert Exp $";
d56 2
a57 4
static void Encode __P
  ((unsigned char *, u_int32_t *, size_t));
static void Decode __P
  ((u_int32_t *, const unsigned char *, size_t));
d95 3
a97 3
static void Encode (output, input, len)
unsigned char *output;
u_int32_t *input;
d100 2
d115 3
a117 3
static void Decode (output, input, len)
u_int32_t *output;
const unsigned char *input;
d120 2
@


1.4
log
@All the world is not a pc, BYTE_ORDER define.
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.3 1996/09/29 14:55:25 millert Exp $";
d57 1
a57 1
  ((unsigned char *, u_int32_t *, unsigned int));
d59 1
a59 1
  ((u_int32_t *, const unsigned char *, unsigned int));
d100 1
a100 1
unsigned int len;
d102 1
a102 1
  unsigned int i, j;
d118 1
a118 1
unsigned int len;
d120 1
a120 1
  unsigned int i, j;
d133 1
a133 1
  context->count[0] = context->count[1] = 0;
d150 1
a150 1
unsigned int inputLen;                     /* length of input block */
d155 2
a156 1
  index = (unsigned int)((context->count[0] >> 3) & 0x3F);
d158 1
a158 4
  if ((context->count[0] += ((u_int32_t)inputLen << 3))
      < ((u_int32_t)inputLen << 3))
    context->count[1]++;
  context->count[1] += ((u_int32_t)inputLen >> 29);
d161 1
a161 2
  /* Transform as many times as possible.
   */
d192 1
a192 1
  Encode (bits, context->count, 8);
d196 1
a196 1
  index = (unsigned int)((context->count[0] >> 3) & 0x3f);
@


1.3
log
@Now use bittypes wo we work on 64-bit machines
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD: md4c.c,v 1.2 1996/08/19 08:28:26 tholo Exp $";
d51 5
d60 1
d93 35
a284 34
}

/* Encodes input (u_int32_t) into output (unsigned char). Assumes len is
     a multiple of 4.
 */
static void Encode (output, input, len)
unsigned char *output;
u_int32_t *input;
unsigned int len;
{
  unsigned int i, j;

  for (i = 0, j = 0; j < len; i++, j += 4) {
    output[j] = (unsigned char)(input[i] & 0xff);
    output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);
    output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);
    output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);
  }
}

/* Decodes input (unsigned char) into output (u_int32_t). Assumes len is
     a multiple of 4.
 */
static void Decode (output, input, len)

u_int32_t *output;
const unsigned char *input;
unsigned int len;
{
  unsigned int i, j;

  for (i = 0, j = 0; j < len; i++, j += 4)
    output[i] = ((u_int32_t)input[j]) | (((u_int32_t)input[j+1]) << 8) |
      (((u_int32_t)input[j+2]) << 16) | (((u_int32_t)input[j+3]) << 24);
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d25 1
a25 1
static char rcsid[] = "$OpenBSD$";
d28 2
a30 1
#include <string.h>
d32 1
a33 4
typedef unsigned short int UINT2;
typedef unsigned long int UINT4;

#define PROTO_LIST(list) list
d50 5
a54 5
static void MD4Transform PROTO_LIST ((UINT4 [4], const unsigned char [64]));
static void Encode PROTO_LIST
  ((unsigned char *, UINT4 *, unsigned int));
static void Decode PROTO_LIST
  ((UINT4 *, const unsigned char *, unsigned int));
d79 1
a79 1
    (a) += G ((b), (c), (d)) + (x) + (UINT4)0x5a827999; \
d83 1
a83 1
    (a) += H ((b), (c), (d)) + (x) + (UINT4)0x6ed9eba1; \
d116 2
a117 2
  if ((context->count[0] += ((UINT4)inputLen << 3))
      < ((UINT4)inputLen << 3))
d119 1
a119 1
  context->count[1] += ((UINT4)inputLen >> 29);
d175 1
a175 1
UINT4 state[4];
d178 1
a178 1
  UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];
d246 1
a246 1
/* Encodes input (UINT4) into output (unsigned char). Assumes len is
d251 1
a251 1
UINT4 *input;
d264 1
a264 1
/* Decodes input (unsigned char) into output (UINT4). Assumes len is
d269 1
a269 1
UINT4 *output;
d276 2
a277 2
    output[i] = ((UINT4)input[j]) | (((UINT4)input[j+1]) << 8) |
      (((UINT4)input[j+2]) << 16) | (((UINT4)input[j+3]) << 24);
@


1.1
log
@Add md[245] routines in libc/md, remove md5 from libc/crypt.  Add $OpenBSD$
@
text
@d1 1
a1 3
/* MD4C.C - RSA Data Security, Inc., MD4 message-digest algorithm
 * $OpenBSD$
 */
d23 4
@
