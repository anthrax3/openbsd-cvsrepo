head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.6
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.10.0.30
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.28
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.24
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.22
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.20
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.18
	OPENBSD_5_0:1.10.0.16
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.14
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.12
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.8
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.10
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.6
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.16
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.14
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.12
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.09.14.07.38.38;	author guenther;	state Exp;
branches;
next	1.12;
commitid	sc13azJRI5HI5bbC;

1.12
date	2014.10.11.03.12.13;	author doug;	state Exp;
branches;
next	1.11;
commitid	V8LoWpZSfAQN5M1m;

1.11
date	2014.09.15.06.15.48;	author guenther;	state Exp;
branches;
next	1.10;
commitid	ztgYHm1nk3mtTyS3;

1.10
date	2007.09.02.15.19.17;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.17.15.41.52;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.06.20.30.03;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.25.03.09.01;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.17.20.24.23;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.09.03.16.23.18;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.03.16.05.06.59;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.28.52;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Finish wrapping <netdb.h> so that calls go direct and the symbols are all weak
@
text
@/*	$OpenBSD: getprotoent.c,v 1.12 2014/10/11 03:12:13 doug Exp $ */
/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <errno.h>
#include <limits.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void
setprotoent_r(int f, struct protoent_data *pd)
{
	if (pd->fp == NULL)
		pd->fp = fopen(_PATH_PROTOCOLS, "re" );
	else
		rewind(pd->fp);
	pd->stayopen |= f;
}
DEF_WEAK(setprotoent_r);

void
endprotoent_r(struct protoent_data *pd)
{
	if (pd->fp) {
		fclose(pd->fp);
		pd->fp = NULL;
	}
	free(pd->aliases);
	pd->aliases = NULL;
	pd->maxaliases = 0;
	free(pd->line);
	pd->line = NULL;
	pd->stayopen = 0;
}
DEF_WEAK(endprotoent_r);

int
getprotoent_r(struct protoent *pe, struct protoent_data *pd)
{
	char *p, *cp, **q, *endp;
	size_t len;
	long l;
	int serrno;

	if (pd->fp == NULL && (pd->fp = fopen(_PATH_PROTOCOLS, "re" )) == NULL)
		return (-1);
again:
	if ((p = fgetln(pd->fp, &len)) == NULL)
		return (-1);
	if (len == 0 || *p == '#' || *p == '\n')
		goto again;
	if (p[len-1] == '\n')
		len--;
	if ((cp = memchr(p, '#', len)) != NULL)
		len = cp - p;
	cp = realloc(pd->line, len + 1);
	if (cp == NULL)
		return (-1);
	pd->line = pe->p_name = memcpy(cp, p, len);
	cp[len] = '\0';
	cp = strpbrk(cp, " \t");
	if (cp == NULL)
		goto again;
	*cp++ = '\0';
	while (*cp == ' ' || *cp == '\t')
		cp++;
	p = strpbrk(cp, " \t");
	if (p != NULL)
		*p++ = '\0';
	l = strtol(cp, &endp, 10);
	if (endp == cp || *endp != '\0' || l < 0 || l >= INT_MAX)
		goto again;
	pe->p_proto = l;
	if (pd->aliases == NULL) {
		pd->maxaliases = 5;
		pd->aliases = calloc(pd->maxaliases, sizeof(char *));
		if (pd->aliases == NULL) {
			serrno = errno;
			endprotoent_r(pd);
			errno = serrno;
			return (-1);
		}
	}
	q = pe->p_aliases = pd->aliases;
	if (p != NULL) {
		cp = p;
		while (cp && *cp) {
			if (*cp == ' ' || *cp == '\t') {
				cp++;
				continue;
			}
			if (q == &pe->p_aliases[pd->maxaliases - 1]) {
				p = reallocarray(pe->p_aliases,
				    pd->maxaliases, 2 * sizeof(char *));
				if (p == NULL) {
					serrno = errno;
					endprotoent_r(pd);
					errno = serrno;
					return (-1);
				}
				pd->maxaliases *= 2;
				q = (char **)p + (q - pe->p_aliases);
				pe->p_aliases = pd->aliases = (char **)p;
			}
			*q++ = cp;
			cp = strpbrk(cp, " \t");
			if (cp != NULL)
				*cp++ = '\0';
		}
	}
	*q = NULL;
	return (0);
}
DEF_WEAK(getprotoent_r);

struct protoent_data _protoent_data;	/* shared with getproto{,name}.c */

void
setprotoent(int f)
{
	setprotoent_r(f, &_protoent_data);
}

void
endprotoent(void)
{
	endprotoent_r(&_protoent_data);
}

struct protoent *
getprotoent(void)
{
	static struct protoent proto;

	if (getprotoent_r(&proto, &_protoent_data) != 0)
		return (NULL);
	return (&proto);
}
@


1.12
log
@Userland reallocarray() audit.

Avoid potential integer overflow in the size argument of malloc() and
realloc() by using reallocarray() to avoid unchecked multiplication.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getprotoent.c,v 1.11 2014/09/15 06:15:48 guenther Exp $ */
d50 1
d66 1
d145 1
@


1.11
log
@When fopen()ing internal to libc (the API doesn't support the use
of the resulting FILE *), then pass fopen() the 'e' mode letter to
mark it close-on-exec.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getprotoent.c,v 1.10 2007/09/02 15:19:17 deraadt Exp $ */
d122 2
a123 2
				p = realloc(pe->p_aliases,
				    2 * pd->maxaliases * sizeof(char *));
@


1.10
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: getprotoent.c,v 1.9 2006/01/17 15:41:52 millert Exp $ */
d45 1
a45 1
		pd->fp = fopen(_PATH_PROTOCOLS, "r" );
d74 1
a74 1
	if (pd->fp == NULL && (pd->fp = fopen(_PATH_PROTOCOLS, "r" )) == NULL)
@


1.9
log
@Include limits.h directly instead of depending on another header
to include it for us.
@
text
@d1 1
a1 1
/*	$OpenBSD: getprotoent.c,v 1.8 2005/08/06 20:30:03 espie Exp $ */
d105 1
a105 1
		pd->aliases = malloc(pd->maxaliases * sizeof(char *));
@


1.8
log
@zap rcsid.
split functions off res_debug.c so that getnetnamadr.c does not pull it
all when it's used.

okay deraadt@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d35 1
@


1.7
log
@Change return value of reentrant getproto* and getserv* to match the
IBM/Digital API.
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: getprotoent.c,v 1.6 2004/10/17 20:24:23 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.6
log
@Reentrant versions of getprotoent(3) and getservent(3).  Adapted from
changes in NetBSD by Christos.  OK otto@@
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: getprotoent.c,v 1.5 2003/06/02 20:18:35 millert Exp $";
d68 1
a68 1
struct protoent *
d77 1
a77 1
		return (NULL);
d80 1
a80 1
		return (NULL);
d89 1
a89 1
		return (NULL);
d112 1
a112 1
			return (NULL);
d130 1
a130 1
					return (NULL);
d143 1
a143 1
	return (pe);
d165 3
a167 1
	return getprotoent_r(&proto, &_protoent_data);
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: getprotoent.c,v 1.4 1999/09/03 16:23:18 millert Exp $";
d36 2
a42 8
#define	MAXALIASES	35

static FILE *protof = NULL;
static char line[BUFSIZ+1];
static struct protoent proto;
static char *proto_aliases[MAXALIASES];
int _proto_stayopen;

d44 1
a44 2
setprotoent(f)
	int f;
d46 2
a47 2
	if (protof == NULL)
		protof = fopen(_PATH_PROTOCOLS, "r" );
d49 2
a50 2
		rewind(protof);
	_proto_stayopen |= f;
d54 1
a54 1
endprotoent()
d56 3
a58 3
	if (protof) {
		fclose(protof);
		protof = NULL;
d60 6
a65 1
	_proto_stayopen = 0;
d69 1
a69 1
getprotoent()
d72 1
d74 1
a74 1
	size_t len;
d76 1
a76 1
	if (protof == NULL && (protof = fopen(_PATH_PROTOCOLS, "r" )) == NULL)
d79 1
a79 1
	if ((p = fgetln(protof, &len)) == NULL)
d81 2
d85 8
a92 10
	if (len >= sizeof(line) || len == 0)
		goto again;
	p = memcpy(line, p, len);
	line[len] = '\0';
	if (*p == '#')
		goto again;
	if ((cp = strchr(p, '#')) != NULL)
		*cp = '\0';
	proto.p_name = p;
	cp = strpbrk(p, " \t");
d104 12
a115 2
	proto.p_proto = l;
	q = proto.p_aliases = proto_aliases;
d123 14
a136 2
			if (q < &proto_aliases[MAXALIASES - 1])
				*q++ = cp;
d143 23
a165 1
	return (&proto);
@


1.4
log
@Use strtol() and strtoul() instead of atoi().  This allows us to catch
errors reasonably and deal correctly with unsigned quantities.
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char rcsid[] = "$OpenBSD: getprotoent.c,v 1.3 1998/03/16 05:06:59 millert Exp $";
@


1.3
log
@Use fgetln(3) instead of fgets(3) so we can easily recognize lines
that are too long and ignore them instead of corrupting later entries.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: getprotoent.c,v 1.2 1996/08/19 08:28:52 tholo Exp $";
d77 2
a78 1
	char *p, *cp, **q;
d106 4
a109 1
	proto.p_proto = atoi(cp);
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: getprotoent.c,v 1.4 1995/02/25 06:20:35 cgd Exp $";
d77 2
a78 2
	char *p;
	register char *cp, **q;
d83 1
a83 1
	if ((p = fgets(line, BUFSIZ, protof)) == NULL)
d85 6
d93 2
a94 4
	cp = strpbrk(p, "#\n");
	if (cp == NULL)
		goto again;
	*cp = '\0';
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: getprotoent.c,v 1.4 1995/02/25 06:20:35 cgd Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)getprotoent.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$NetBSD: getprotoent.c,v 1.4 1995/02/25 06:20:35 cgd Exp $";
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

