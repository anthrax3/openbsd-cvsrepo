head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.2
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.34
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.32
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.30
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.28
	OPENBSD_5_0:1.20.0.26
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.24
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.22
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.18
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.20
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.16
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.14
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.12
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.10
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.8
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.6
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.4
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.2
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.17.0.6
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.4
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.11.0.4
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.10.0.6
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.10.0.4
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2016.09.21.04.38.56;	author guenther;	state Exp;
branches;
next	1.24;
commitid	pqjnYVtACzQ9ctai;

1.24
date	2015.09.14.11.01.47;	author guenther;	state Exp;
branches;
next	1.23;
commitid	0UySDzUm2zFk2635;

1.23
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	0DYulI8hhujBHMcR;

1.22
date	2014.09.15.06.15.48;	author guenther;	state Exp;
branches;
next	1.21;
commitid	ztgYHm1nk3mtTyS3;

1.21
date	2013.11.24.23.51.28;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2005.08.06.20.30.03;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.28.06.19.58;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.25.13.24.11;	author otto;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.16.19.41.12;	author otto;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.17.21.56.24;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.03.01.52.40;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.24.21.22.37;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.16.21.27.23;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.27.00.58.54;	author lebel;	state Exp;
branches;
next	1.11;

1.11
date	2000.08.22.19.04.41;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.11.18.23.28.54;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.06.21.22.13.44;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.03.18.00.15.25;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.03.17.06.22.00;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.03.17.06.20.25;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.03.17.06.16.55;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.03.16.05.06.53;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.28.36;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.03.08.08.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.01;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Delete casts to off_t and size_t that are implied by assignments
or prototypes.  Ditto for some of the char* and void* casts too.

verified no change to instructions on ILP32 (i386) and LP64 (amd64)
ok natano@@ abluhm@@ deraadt@@ millert@@
@
text
@/*	$OpenBSD: ethers.c,v 1.24 2015/09/14 11:01:47 guenther Exp $	*/

/*
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* 
 * ethers(3) a la Sun.
 * Originally Written by Roland McGrath <roland@@frob.com> 10/14/93.
 * Substantially modified by Todd C. Miller <Todd.Miller@@courtesan.com>
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <paths.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <limits.h>
#ifdef YP
#include <rpcsvc/ypclnt.h>
#endif

#ifndef _PATH_ETHERS
#define _PATH_ETHERS	"/etc/ethers"
#endif

static char * _ether_aton(const char *, struct ether_addr *);

char *
ether_ntoa(struct ether_addr *e)
{
	static char a[] = "xx:xx:xx:xx:xx:xx";

	(void)snprintf(a, sizeof a, "%02x:%02x:%02x:%02x:%02x:%02x",
	    e->ether_addr_octet[0], e->ether_addr_octet[1],
	    e->ether_addr_octet[2], e->ether_addr_octet[3],
	    e->ether_addr_octet[4], e->ether_addr_octet[5]);

	return (a);
}

static char *
_ether_aton(const char *s, struct ether_addr *e)
{
	int i;
	long l;
	char *pp;

	while (isspace((unsigned char)*s))
		s++;

	/* expect 6 hex octets separated by ':' or space/NUL if last octet */
	for (i = 0; i < 6; i++) {
		l = strtol(s, &pp, 16);
		if (pp == s || l > 0xFF || l < 0)
			return (NULL);
		if (!(*pp == ':' ||
		    (i == 5 && (isspace((unsigned char)*pp) ||
		    *pp == '\0'))))
			return (NULL);
		e->ether_addr_octet[i] = (u_char)l;
		s = pp + 1;
	}

	/* return character after the octets ala strtol(3) */
	return (pp);
}

struct ether_addr *
ether_aton(const char *s)
{
	static struct ether_addr n;

	return (_ether_aton(s, &n) ? &n : NULL);
}

int
ether_ntohost(char *hostname, struct ether_addr *e)
{
	FILE *f; 
	char buf[BUFSIZ+1], *p;
	size_t len;
	struct ether_addr try;
#ifdef YP
	char trybuf[sizeof("xx:xx:xx:xx:xx:xx")];
	int trylen;
#endif

#ifdef YP
	snprintf(trybuf, sizeof trybuf, "%x:%x:%x:%x:%x:%x", 
	    e->ether_addr_octet[0], e->ether_addr_octet[1],
	    e->ether_addr_octet[2], e->ether_addr_octet[3],
	    e->ether_addr_octet[4], e->ether_addr_octet[5]);
	trylen = strlen(trybuf);
#endif

	f = fopen(_PATH_ETHERS, "re");
	if (f == NULL)
		return (-1);
	while ((p = fgetln(f, &len)) != NULL) {
		if (p[len-1] == '\n')
			len--;
		if (len > sizeof(buf) - 2)
			continue;
		(void)memcpy(buf, p, len);
		buf[len] = '\n';	/* code assumes newlines later on */
		buf[len+1] = '\0';
#ifdef YP
		/* A + in the file means try YP now.  */
		if (!strncmp(buf, "+\n", sizeof(buf))) {
			char *ypbuf, *ypdom;
			int ypbuflen;

			if (yp_get_default_domain(&ypdom))
				continue;
			if (yp_match(ypdom, "ethers.byaddr", trybuf,
			    trylen, &ypbuf, &ypbuflen))
				continue;
			if (ether_line(ypbuf, &try, hostname) == 0) {
				free(ypbuf);
				(void)fclose(f);
				return (0);
			}
			free(ypbuf);
			continue;
		}
#endif
		if (ether_line(buf, &try, hostname) == 0 &&
		    memcmp(&try, e, sizeof(try)) == 0) {
			(void)fclose(f);
			return (0);
		}     
	}
	(void)fclose(f);
	errno = ENOENT;
	return (-1);
}

int
ether_hostton(const char *hostname, struct ether_addr *e)
{
	FILE *f;
	char buf[BUFSIZ+1], *p;
	char try[HOST_NAME_MAX+1];
	size_t len;
#ifdef YP
	int hostlen = strlen(hostname);
#endif

	f = fopen(_PATH_ETHERS, "re");
	if (f==NULL)
		return (-1);

	while ((p = fgetln(f, &len)) != NULL) {
		if (p[len-1] == '\n')
			len--;
		if (len > sizeof(buf) - 2)
			continue;
		memcpy(buf, p, len);
		buf[len] = '\n';	/* code assumes newlines later on */
		buf[len+1] = '\0';
#ifdef YP
		/* A + in the file means try YP now.  */
		if (!strncmp(buf, "+\n", sizeof(buf))) {
			char *ypbuf, *ypdom;
			int ypbuflen;

			if (yp_get_default_domain(&ypdom))
				continue;
			if (yp_match(ypdom, "ethers.byname", hostname, hostlen,
			    &ypbuf, &ypbuflen))
				continue;
			if (ether_line(ypbuf, e, try) == 0) {
				free(ypbuf);
				(void)fclose(f);
				return (0);
			}
			free(ypbuf);
			continue;
		}
#endif
		if (ether_line(buf, e, try) == 0 && strcmp(hostname, try) == 0) {
			(void)fclose(f);
			return (0);
		}
	}
	(void)fclose(f);
	errno = ENOENT;
	return (-1);
}

int
ether_line(const char *line, struct ether_addr *e, char *hostname)
{
	char *p;
	size_t n;

	/* Parse "xx:xx:xx:xx:xx:xx" */
	if ((p = _ether_aton(line, e)) == NULL || (*p != ' ' && *p != '\t'))
		goto bad;

	/* Now get the hostname */
	while (isspace((unsigned char)*p))
		p++;
	if (*p == '\0')
		goto bad;
	n = strcspn(p, " \t\n");
	if (n >= HOST_NAME_MAX+1)
		goto bad;
	strlcpy(hostname, p, n + 1);
	return (0);

bad:
	errno = EINVAL;
	return (-1);
}
DEF_WEAK(ether_line);
@


1.24
log
@Wrap <ifaddrs.h>, <netinet/in.h>, and <netinet/if_ether.h> so internal
calls go direct and all the symbols are weak
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.23 2015/01/16 16:48:51 deraadt Exp $	*/
d147 1
a147 1
		    memcmp((void *)&try, (void *)e, sizeof(try)) == 0) {
@


1.23
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.22 2014/09/15 06:15:48 guenther Exp $	*/
d235 1
@


1.22
log
@When fopen()ing internal to libc (the API doesn't support the use
of the resulting FILE *), then pass fopen() the 'e' mode letter to
mark it close-on-exec.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.21 2013/11/24 23:51:28 deraadt Exp $	*/
a29 1
#include <sys/param.h>
d36 1
d162 1
a162 1
	char try[MAXHOSTNAMELEN];
d226 1
a226 1
	if (n >= MAXHOSTNAMELEN)
@


1.21
log
@most obvious unsigned char casts for ctype
ok jca krw ingo
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.20 2005/08/06 20:30:03 espie Exp $	*/
d115 1
a115 1
	f = fopen(_PATH_ETHERS, "r");
d168 1
a168 1
	f = fopen(_PATH_ETHERS, "r");
@


1.20
log
@zap rcsid.
split functions off res_debug.c so that getnetnamadr.c does not pull it
all when it's used.

okay deraadt@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.19 2005/03/28 06:19:58 tedu Exp $	*/
d67 1
a67 1
	while (isspace(*s))
d75 3
a77 1
		if (!(*pp == ':' || (i == 5 && (isspace(*pp) || *pp == '\0'))))
d221 1
a221 1
	while (isspace(*p))
@


1.19
log
@add some const to ether_*.  remove bonus prototypes this brought out.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.18 2005/03/25 13:24:11 otto Exp $	*/
a23 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: ethers.c,v 1.18 2005/03/25 13:24:11 otto Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.18
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.17 2004/02/16 19:41:12 otto Exp $	*/
d26 1
a26 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.17 2004/02/16 19:41:12 otto Exp $";
d49 1
a49 1
static char * _ether_aton(char *, struct ether_addr *);
d65 1
a65 1
_ether_aton(char *s, struct ether_addr *e)
d90 1
a90 1
ether_aton(char *s)
d160 1
a160 1
ether_hostton(char *hostname, struct ether_addr *e)
d213 1
a213 1
ether_line(char *line, struct ether_addr *e, char *hostname)
@


1.17
log
@remove redundant code, u_int8_t cannot be > 0xff
ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.16 2003/06/17 21:56:24 millert Exp $	*/
d26 1
a26 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.16 2003/06/17 21:56:24 millert Exp $";
d52 1
a52 2
ether_ntoa(e)
	struct ether_addr *e;
d65 1
a65 3
_ether_aton(s, e)
	char *s;
	struct ether_addr *e;
d90 1
a90 2
ether_aton(s)
	char *s;
d98 1
a98 3
ether_ntohost(hostname, e)
	char *hostname;
	struct ether_addr *e;
d160 1
a160 3
ether_hostton(hostname, e)
	char *hostname;
	struct ether_addr *e;
d213 1
a213 4
ether_line(line, e, hostname)
	char *line;
	struct ether_addr *e;
	char *hostname;
@


1.16
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.15 2003/06/03 01:52:40 millert Exp $	*/
d26 1
a26 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.15 2003/06/03 01:52:40 millert Exp $";
a56 7
	if (e->ether_addr_octet[0] > 0xFF || e->ether_addr_octet[1] > 0xFF ||
	    e->ether_addr_octet[2] > 0xFF || e->ether_addr_octet[3] > 0xFF ||
	    e->ether_addr_octet[4] > 0xFF || e->ether_addr_octet[5] > 0xFF) {
		errno = EINVAL;
		return (NULL);
	}

a113 7

	if (e->ether_addr_octet[0] > 0xFF || e->ether_addr_octet[1] > 0xFF ||
	    e->ether_addr_octet[2] > 0xFF || e->ether_addr_octet[3] > 0xFF ||
	    e->ether_addr_octet[4] > 0xFF || e->ether_addr_octet[5] > 0xFF) {
		errno = EINVAL;
		return (-1);
	}
@


1.15
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.14 2002/05/24 21:22:37 deraadt Exp $	*/
d10 7
a16 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
 * FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d26 1
a26 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.14 2002/05/24 21:22:37 deraadt Exp $";
@


1.14
log
@try to use strlcpy and snprintf more; ok various
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.13 2002/02/16 21:27:23 millert Exp $	*/
a4 1
 * All rights reserved.
d6 3
a8 10
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d10 7
a16 10
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d26 1
a26 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.13 2002/02/16 21:27:23 millert Exp $";
@


1.13
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.12 2001/06/27 00:58:54 lebel Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.12 2001/06/27 00:58:54 lebel Exp $";
d75 1
a75 1
	(void)sprintf(a, "%02x:%02x:%02x:%02x:%02x:%02x",
d141 1
a141 1
	sprintf(trybuf, "%x:%x:%x:%x:%x:%x", 
@


1.12
log
@use strlcpy vs strncpy+a[len-1]='\0'.  millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.11 2000/08/22 19:04:41 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.11 2000/08/22 19:04:41 deraadt Exp $";
d60 1
a60 1
static char * _ether_aton __P((char *, struct ether_addr *));
@


1.11
log
@Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.10 1998/11/18 23:28:54 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.10 1998/11/18 23:28:54 deraadt Exp $";
d266 1
a266 2
	(void)strncpy(hostname, p, n);
	hostname[n] = '\0';
@


1.10
log
@check for negative numbers from strtol()
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.9 1998/06/21 22:13:44 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.9 1998/06/21 22:13:44 millert Exp $";
d52 3
@


1.9
log
@Remove the advertising clause in my old license, it impedes free use
of the code as a large number of similar clauses makes it impossible
to write an ad for a product using the code...
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.8 1998/03/18 00:15:25 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.8 1998/03/18 00:15:25 deraadt Exp $";
d95 1
a95 1
		if (pp == s || l > 0xFF)
@


1.8
log
@Todd does not test YP code; felix@@mamba.pond.sub.org
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.7 1998/03/17 06:22:00 millert Exp $	*/
d15 1
a15 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Todd C. Miller.
 * 4. The name of the author may not be used to endorse or promote products
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.7 1998/03/17 06:22:00 millert Exp $";
@


1.7
log
@Set errno to EINVAL if ether_ntoa() is passed bogus data.
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.6 1998/03/17 06:20:25 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.6 1998/03/17 06:20:25 millert Exp $";
d128 4
a140 3
	char trybuf[sizeof("xx:xx:xx:xx:xx:xx")];
	int trylen;

@


1.6
log
@Whoops, fix a last minute change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.5 1998/03/17 06:16:55 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.5 1998/03/17 06:16:55 millert Exp $";
d70 2
a71 1
	    e->ether_addr_octet[4] > 0xFF || e->ether_addr_octet[5] > 0xFF)
d73 1
@


1.5
log
@Fix some improbable overflows:
 o don't read in a hostname >= MAXHOSTNAMELEN
 o get rid of sscanf
 o check that octets passed in are <= 0xFF
Also make the style consistent and add my copyright.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.4 1998/03/16 05:06:53 millert Exp $";
d129 4
a132 2
	    e->ether_addr_octet[4] > 0xFF || e->ether_addr_octet[5] > 0xFF)
		return (NULL);
@


1.4
log
@Use fgetln(3) instead of fgets(3) so we can easily recognize lines
that are too long and ignore them instead of corrupting later entries.
@
text
@d1 32
d34 3
a36 4
 * ethers(3N) a la Sun.
 *
 * Written by Roland McGrath <roland@@frob.com> 10/14/93.
 * Public domain.
d40 1
a40 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.3 1996/08/19 08:28:36 tholo Exp $";
d54 1
d57 1
a57 1
#define _PATH_ETHERS "/etc/ethers"
d60 2
d68 6
a73 1
	sprintf(a, "%02x:%02x:%02x:%02x:%02x:%02x",
d77 29
a105 1
	return a;
a112 1
	u_int i[6];
d114 1
a114 11
	if (sscanf(s, " %x:%x:%x:%x:%x:%x ", &i[0], &i[1],
	    &i[2], &i[3], &i[4], &i[5]) == 6) {
		n.ether_addr_octet[0] = (u_char)i[0];
		n.ether_addr_octet[1] = (u_char)i[1];
		n.ether_addr_octet[2] = (u_char)i[2];
		n.ether_addr_octet[3] = (u_char)i[3];
		n.ether_addr_octet[4] = (u_char)i[4];
		n.ether_addr_octet[5] = (u_char)i[5];
		return &n;
	}
	return NULL;
d127 5
d133 1
a133 1
	char trybuf[sizeof "xx:xx:xx:xx:xx:xx"];
d145 1
a145 1
		return -1;
d151 1
a151 1
		memcpy(buf, p, len);
d156 1
a156 1
		if (!strncmp(buf, "+\n", sizeof buf)) {
d168 1
a168 1
				return 0;
d175 1
a175 1
		    memcmp((char *)&try, (char *)e, sizeof try) == 0) {
d177 1
a177 1
			return 0;
d182 1
a182 1
	return -1;
d200 1
a200 1
		return -1;
d212 1
a212 1
		if (!strncmp(buf, "+\n", sizeof buf)) {
d224 1
a224 1
				return 0;
d232 1
a232 1
			return 0;
d237 1
a237 1
	return -1;
d241 2
a242 2
ether_line(l, e, hostname)
	char *l;
d246 2
a247 1
	u_int i[6];
d249 17
a265 10
	if (sscanf(l, " %x:%x:%x:%x:%x:%x %s\n", &i[0], &i[1],
	    &i[2], &i[3], &i[4], &i[5], hostname) == 7) {
		e->ether_addr_octet[0] = (u_char)i[0];
		e->ether_addr_octet[1] = (u_char)i[1];
		e->ether_addr_octet[2] = (u_char)i[2];
		e->ether_addr_octet[3] = (u_char)i[3];
		e->ether_addr_octet[4] = (u_char)i[4];
		e->ether_addr_octet[5] = (u_char)i[5];
		return 0;
	}
d267 1
a267 1
	return -1;
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d9 1
a9 1
static char rcsid[] = "$OpenBSD$";
d67 2
a68 1
	char buf[BUFSIZ];
d83 1
a83 1
	if (f==NULL)
d85 8
a92 1
	while (fgets(buf, sizeof buf, f)) {
d114 1
a114 1
		    bcmp((char *)&try, (char *)e, sizeof try) == 0) {
d130 1
a130 1
	char buf[BUFSIZ];
d132 1
d141 8
a148 1
	while (fgets(buf, sizeof buf, f)) {
@


1.2
log
@prototype ethers(3) functions (inside !_KERNEL), pointed out in
netbsd pr#2471, jhawk@@mit.edu
@
text
@a0 2
/*	$NetBSD: ethers.c,v 1.5 1995/02/25 06:20:28 cgd Exp $	*/

d7 4
@


1.1
log
@Initial revision
@
text
@d59 1
d114 1
d161 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

