head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.58
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.50
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.54
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.52
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.48
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.46
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.44
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.42
	OPENBSD_5_0:1.8.0.40
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.38
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.36
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.32
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.34
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.30
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.28
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.26
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.24
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.22
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.20
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.18
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.16
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.14
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.12
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.10
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.10
date	2015.10.23.13.09.19;	author claudio;	state Exp;
branches;
next	1.9;
commitid	mGDeHxFI9a2xgY6t;

1.9
date	2015.09.14.10.47.01;	author guenther;	state Exp;
branches;
next	1.8;
commitid	WOeDgoKYmySSyUqQ;

1.8
date	2002.03.07.22.40.23;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.05.02.31.35;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.22.19.04.42;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.07.08.22.29.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.07.01.15.35.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.06.23.22.50.49;	author cmetz;	state Exp;
branches;
next	1.2;

1.2
date	99.06.23.22.26.03;	author cmetz;	state Exp;
branches;
next	1.1;

1.1
date	99.06.23.21.55.29;	author cmetz;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Switch if_nameindex(3) to use the new NET_RT_IFNAMES sysctl to get the
list of interface names. At the same time switch if_nametoindex(3) and
if_indextoname(3) to use if_nameindex(3) instead of getifaddrs(3).
if_nameindex(3) exposes much less then getifaddrs(3) and is allowed by
pledge(2).
With and OK deraadt@@
@
text
@/*	$OpenBSD: if_nametoindex.c,v 1.9 2015/09/14 10:47:01 guenther Exp $	*/
/*	$KAME: if_nametoindex.c,v 1.5 2000/11/24 08:04:40 itojun Exp $	*/

/*-
 * Copyright (c) 2015 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 1997, 2000
 *	Berkeley Software Design, Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY Berkeley Software Design, Inc. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Berkeley Software Design, Inc. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI Id: if_nametoindex.c,v 2.3 2000/04/17 22:38:05 dab Exp
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <net/if.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

/*
 * From RFC 2553:
 *
 * 4.1 Name-to-Index
 *
 *
 *    The first function maps an interface name into its corresponding
 *    index.
 *
 *       #include <net/if.h>
 *
 *       unsigned int  if_nametoindex(const char *ifname);
 *
 *    If the specified interface name does not exist, the return value is
 *    0, and errno is set to ENXIO.  If there was a system error (such as
 *    running out of memory), the return value is 0 and errno is set to the
 *    proper value (e.g., ENOMEM).
 */

unsigned int
if_nametoindex(const char *ifname)
{
	struct if_nameindex *ifni, *ifni2;
	unsigned int index;

	if ((ifni = if_nameindex()) == NULL)
		return(0);

	for (ifni2 = ifni; ifni2->if_index != 0; ifni2++) {
		if (strcmp(ifni2->if_name, ifname) == 0) {
			index = ifni2->if_index;
			if_freenameindex(ifni);
			return index;
		}
	}

	if_freenameindex(ifni);
	errno = ENXIO;
	return 0;
}
DEF_WEAK(if_nametoindex);
@


1.9
log
@Wrap <net/if.h> and <net/if_dl.h> so internal calls go direct and all the
symbols are weak
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nametoindex.c,v 1.8 2002/03/07 22:40:23 millert Exp $	*/
d5 1
a32 2
#include <net/if_dl.h>
#include <ifaddrs.h>
d59 2
a60 2
	struct ifaddrs *ifaddrs, *ifa;
	unsigned int ni;
d62 1
a62 1
	if (getifaddrs(&ifaddrs) < 0)
d65 5
a69 8
	ni = 0;

	for (ifa = ifaddrs; ifa != NULL; ifa = ifa->ifa_next) {
		if (ifa->ifa_addr &&
		    ifa->ifa_addr->sa_family == AF_LINK &&
		    strcmp(ifa->ifa_name, ifname) == 0) {
			ni = ((struct sockaddr_dl*)ifa->ifa_addr)->sdl_index;
			break;
d73 3
a75 4
	freeifaddrs(ifaddrs);
	if (!ni)
		errno = ENXIO;
	return(ni);
@


1.8
log
@Replace SIOCGIFCONF-using NRL versions with KAME versions that use
getifaddrs(3).  Fixes problems on LP64 platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d82 1
@


1.7
log
@repair copyright notices for NRL & cmetz; cmetz
@
text
@d1 6
a6 2
/*
 * Copyright (c) 1998-1999, Craig Metz, All rights reserved.
a12 10
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Craig Metz and
 *      by other contributors.
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d14 1
a14 1
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
d17 1
a17 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d25 2
a29 1
#include <stdlib.h>
a30 1
#include <sys/ioctl.h>
d33 2
a35 1
#include <unistd.h>
d38 21
a58 2
unsigned int 
if_nametoindex(const char *name)
d60 2
a61 39
	int     i, fd = -1, extra, len = 0;
	struct ifconf ifconf;
	char    lastname[IFNAMSIZ], *thisname, *inbuf;
	unsigned int index = 0;
	struct sockaddr *sa;
	void	*p;

	ifconf.ifc_buf = 0;

	if ((fd = socket(PF_INET, SOCK_DGRAM, 0)) < 0)
		goto ret;

	/*
	 * Try ifc_len == 0 hack first, to get the actual length.
	 * If that fails, revert to a loop which grows the ifc_buf
	 * until it is sufficiently large.
	 */
	extra = sizeof(struct ifreq);
	while (1) {
		ifconf.ifc_len = len;
		if (ioctl(fd, SIOCGIFCONF, (void *) &ifconf) == -1 &&
		    ifconf.ifc_buf)
			goto ret;
		if (ifconf.ifc_buf &&
		    ifconf.ifc_len + extra < len)
			break;
		if (ifconf.ifc_buf) {
			if (len == 0)
				len = 4096;
			ifconf.ifc_len = len *= 2;
		} else {
			len = ifconf.ifc_len;
			extra = 0;
		}
		inbuf = realloc(ifconf.ifc_buf, ifconf.ifc_len);
		if (inbuf == NULL)
			goto ret;
		ifconf.ifc_buf = inbuf;
	}
d63 2
a64 19
	i = 0;
	p = ifconf.ifc_buf;
	len = ifconf.ifc_len;
	lastname[0] = 0;
	lastname[sizeof(lastname)-1] = 0;

	while (len > 0) {
		if (len < IFNAMSIZ + sizeof(struct sockaddr))
			goto ret;

		thisname = p;
		if (strncmp(lastname, p, IFNAMSIZ)) {
			if (!strcmp(lastname, name)) {
				index = i;
				goto ret;
			}
			memcpy(lastname, thisname, IFNAMSIZ);
			i++;
		}
d66 1
a66 7
		len -= IFNAMSIZ;
		p += IFNAMSIZ;
		sa = (struct sockaddr *)p;

		if (!strncmp(thisname, name, IFNAMSIZ) &&
		    sa->sa_family == AF_LINK) {
			struct sockaddr_dl *sd = p;
d68 6
a73 2
			index = sd->sdl_index;
			goto ret;
a74 5

		if (len < sa->sa_len)
			goto ret;
		len -= sa->sa_len;
		p += sa->sa_len;
d77 4
a80 9
	if (!strcmp(lastname, name))
		index = i;

ret:
	if (fd != -1)
		close(fd);
	if (ifconf.ifc_buf)
		free(ifconf.ifc_buf);
	return index;
@


1.6
log
@Wall
@
text
@a1 1
 * %%% copyright-cmetz-98-bsd
@


1.5
log
@use SIOCGIFCONF much more carefully
@
text
@d41 1
@


1.4
log
@indent and audit
@
text
@d46 1
a46 1
	int     i, fd, len;
d48 1
a48 1
	char    lastname[IFNAMSIZ], *thisname;
d53 2
d56 1
a56 1
		return 0;
d58 27
a84 10
	ifconf.ifc_len = 0;
	ifconf.ifc_buf = 0;
	if (ioctl(fd, SIOCGIFCONF, (void *) &ifconf))
		goto ret;
	if (ifconf.ifc_len < IFNAMSIZ)
		goto ret;
	if (!(ifconf.ifc_buf = malloc(ifconf.ifc_len)))
		goto ret;
	if (ioctl(fd, SIOCGIFCONF, (void *) &ifconf))
		goto ret;
d128 2
a129 1
	close(fd);
@


1.3
log
@Compilation fixes.
@
text
@d4 1
a4 1
 * 
d20 1
a20 1
 * 
a31 1
 *
d40 1
d43 2
a44 1
unsigned int if_nametoindex(const char *name)
d46 58
a103 53
  int i, fd;
  struct ifconf ifconf;
  void *p;
  int len;
  char lastname[IFNAMSIZ + 1], *thisname;
  unsigned int index = 0;

  if ((fd = socket(PF_INET, SOCK_DGRAM, 0)) < 0)
    return 0;

  ifconf.ifc_len = 0;
  ifconf.ifc_buf = 0;
  if (ioctl(fd, SIOCGIFCONF, (void *)&ifconf))
    goto ret;
  if (ifconf.ifc_len < IFNAMSIZ)
    goto ret;
  if (!(ifconf.ifc_buf = malloc(ifconf.ifc_len)))
    goto ret;
  if (ioctl(fd, SIOCGIFCONF, (void *)&ifconf))
    goto ret;

  i = 0;
  p = ifconf.ifc_buf;
  len = ifconf.ifc_len;
  lastname[0] = 0;
  lastname[IFNAMSIZ] = 0;

  while(len > 0) {
    if (len < (IFNAMSIZ + sizeof(struct sockaddr)))
      goto ret;

    if (strncmp(lastname, thisname = p, IFNAMSIZ)) {
      if (!strcmp(lastname, name)) {
	index = i;
	goto ret;
      };
      memcpy(lastname, thisname, IFNAMSIZ);
      i++;
    };

    len -= IFNAMSIZ;
    p += IFNAMSIZ;

    if (!strncmp(thisname, name, IFNAMSIZ) && (((struct sockaddr *)p)->sa_family == AF_LINK)) {
      index = ((struct sockaddr_dl *)p)->sdl_index;
      goto ret;
    };

    if (len < SA_LEN((struct sockaddr *)p))
      goto ret;
    len -= SA_LEN((struct sockaddr *)p);
    p += SA_LEN((struct sockaddr *)p);
  };
d105 2
a106 2
  if (!strcmp(lastname, name))
    index = i;
d109 5
a113 4
  close(fd);
  free(ifconf.ifc_buf);
  return index;
};
@


1.2
log
@Removed portability ifdefs and calls to nonstandard back-end.
@
text
@d59 1
a59 1
  if (ifconf->ifc_len < IFNAMSIZ)
d61 1
a61 1
  if (!(ifconf->ifc_buf = malloc(ifconf->ifc_len)))
@


1.1
log
@Added some protocol independent interfaces (supposedly IPv6 support APIs, but
ones that are useful for all protocols, not just IPv6).
@
text
@a32 55
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Craig Metz and
 *      by other contributors.
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Craig Metz and
 *      by other contributors.
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
a39 1
#ifdef AF_LINK
a40 1
#endif /* AF_LINK */
a45 3
#ifdef SIOCGIFINDEX
  struct ifreq ifreq;
#else /* SIOCGIFINDEX */
a50 1
#endif /* SIOCGIFINDEX */
d55 10
a64 13
#ifdef SIOCGIFINDEX
  strcpy(ifreq.ifr_name, name);
  i = ioctl(fd, SIOCGIFINDEX, &ifreq);
  close(fd);
  if (i)
    return 0;

  return ifreq.ifr_ifindex;
#else /* SIOCGIFINDEX */
  if (__siocgifconf(fd, &ifconf)) {
    close(fd);
    return 0;
  };
a87 1
#ifdef AF_LINK
a91 1
#endif /* AF_LINK */
a105 1
#endif /* SIOCGIFINDEX */
@

