head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.10
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.8
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.18
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.16
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.14
	OPENBSD_5_0:1.10.0.12
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.26
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.24
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.22
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.20
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.18
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.16
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.14
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.12
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.10
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.8
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.6
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2015.09.14.11.01.47;	author guenther;	state Exp;
branches;
next	1.12;
commitid	0UySDzUm2zFk2635;

1.12
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	0DYulI8hhujBHMcR;

1.11
date	2013.03.20.14.15.56;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.24.20.08.49;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.09.06.12.25;	author itojun;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.09.06.11.53;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.02.23.00.10;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.20.02.27.10;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.04.19.43.16;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.27.00.58.55;	author lebel;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.24.08.26.47;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.23.15.39.53;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.06.55.58;	author itojun;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Wrap <ifaddrs.h>, <netinet/in.h>, and <netinet/if_ether.h> so internal
calls go direct and all the symbols are weak
@
text
@/*	$OpenBSD: getifaddrs.c,v 1.12 2015/01/16 16:48:51 deraadt Exp $	*/

/*
 * Copyright (c) 1995, 1999
 *	Berkeley Software Design, Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY Berkeley Software Design, Inc. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Berkeley Software Design, Inc. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI getifaddrs.c,v 2.12 2000/02/23 14:51:59 dab Exp
 */

#include <sys/param.h>	/* ALIGN */
#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <net/if.h>
#include <net/route.h>
#include <sys/sysctl.h>
#include <net/if_dl.h>

#include <errno.h>
#include <ifaddrs.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define	SALIGN	(sizeof(long) - 1)
#define	SA_RLEN(sa)	((sa)->sa_len ? (((sa)->sa_len + SALIGN) & ~SALIGN) : (SALIGN + 1))

int
getifaddrs(struct ifaddrs **pif)
{
	int icnt = 1;
	int dcnt = 0;
	int ncnt = 0;
	int mib[6];
	size_t needed;
	char *buf = NULL, *bufp;
	char *next;
	struct ifaddrs *cif = 0;
	char *p, *p0;
	struct rt_msghdr *rtm;
	struct if_msghdr *ifm;
	struct ifa_msghdr *ifam;
	struct sockaddr_dl *dl;
	struct sockaddr *sa;
	u_short index = 0;
	size_t len, alen, dlen;
	struct ifaddrs *ifa, *ift;
	int i;
	char *data;
	char *names;

	mib[0] = CTL_NET;
	mib[1] = PF_ROUTE;
	mib[2] = 0;             /* protocol */
	mib[3] = 0;             /* wildcard address family */
	mib[4] = NET_RT_IFLIST;
	mib[5] = 0;             /* no flags */
	while (1) {
		if (sysctl(mib, 6, NULL, &needed, NULL, 0) == -1) {
			free(buf);
			return (-1);
		}
		if (needed == 0)
			break;
		if ((bufp = realloc(buf, needed)) == NULL) {
			free(buf);
			return (-1);
		}
		buf = bufp;
		if (sysctl(mib, 6, buf, &needed, NULL, 0) == -1) {
			if (errno == ENOMEM)
				continue;
			free(buf);
			return (-1);
		}
		break;
	}

	for (next = buf; next < buf + needed; next += rtm->rtm_msglen) {
		rtm = (struct rt_msghdr *)next;
		if (rtm->rtm_version != RTM_VERSION)
			continue;
		switch (rtm->rtm_type) {
		case RTM_IFINFO:
			ifm = (struct if_msghdr *)rtm;
			if (ifm->ifm_addrs & RTA_IFP) {
				index = ifm->ifm_index;
				++icnt;
				dl = (struct sockaddr_dl *)(next +
				    rtm->rtm_hdrlen);
				dcnt += SA_RLEN((struct sockaddr *)dl) +
					ALIGNBYTES;
				dcnt += sizeof(ifm->ifm_data);
				ncnt += dl->sdl_nlen + 1;
			} else
				index = 0;
			break;

		case RTM_NEWADDR:
			ifam = (struct ifa_msghdr *)rtm;
			if (index && ifam->ifam_index != index)
				abort();	/* XXX abort illegal in library */

#define	RTA_MASKS	(RTA_NETMASK | RTA_IFA | RTA_BRD)
			if (index == 0 || (ifam->ifam_addrs & RTA_MASKS) == 0)
				break;
			p = next + rtm->rtm_hdrlen;
			++icnt;
			/* Scan to look for length of address */
			alen = 0;
			for (p0 = p, i = 0; i < RTAX_MAX; i++) {
				if ((RTA_MASKS & ifam->ifam_addrs & (1 << i))
				    == 0)
					continue;
				sa = (struct sockaddr *)p;
				len = SA_RLEN(sa);
				if (i == RTAX_IFA) {
					alen = len;
					break;
				}
				p += len;
			}
			for (p = p0, i = 0; i < RTAX_MAX; i++) {
				if ((RTA_MASKS & ifam->ifam_addrs & (1 << i))
				    == 0)
					continue;
				sa = (struct sockaddr *)p;
				len = SA_RLEN(sa);
				if (i == RTAX_NETMASK && sa->sa_len == 0)
					dcnt += alen;
				else
					dcnt += len;
				p += len;
			}
			break;
		}
	}

	if (icnt + dcnt + ncnt == 1) {
		*pif = NULL;
		free(buf);
		return (0);
	}
	data = malloc(sizeof(struct ifaddrs) * icnt + dcnt + ncnt);
	if (data == NULL) {
		free(buf);
		return(-1);
	}

	ifa = (struct ifaddrs *)data;
	data += sizeof(struct ifaddrs) * icnt;
	names = data + dcnt;

	memset(ifa, 0, sizeof(struct ifaddrs) * icnt);
	ift = ifa;

	index = 0;
	for (next = buf; next < buf + needed; next += rtm->rtm_msglen) {
		rtm = (struct rt_msghdr *)next;
		if (rtm->rtm_version != RTM_VERSION)
			continue;
		switch (rtm->rtm_type) {
		case RTM_IFINFO:
			ifm = (struct if_msghdr *)rtm;
			if (ifm->ifm_addrs & RTA_IFP) {
				index = ifm->ifm_index;
				dl = (struct sockaddr_dl *)(next +
				    rtm->rtm_hdrlen);

				cif = ift;
				ift->ifa_name = names;
				ift->ifa_flags = (int)ifm->ifm_flags;
				memcpy(names, dl->sdl_data, dl->sdl_nlen);
				names[dl->sdl_nlen] = 0;
				names += dl->sdl_nlen + 1;

				ift->ifa_addr = (struct sockaddr *)data;
				memcpy(data, dl,
				    ((struct sockaddr *)dl)->sa_len);
				data += SA_RLEN((struct sockaddr *)dl);

				/* ifm_data needs to be aligned */
				ift->ifa_data = data = (void *)ALIGN(data);
				dlen = rtm->rtm_hdrlen -
				    offsetof(struct if_msghdr, ifm_data);
				if (dlen > sizeof(ifm->ifm_data))
					dlen = sizeof(ifm->ifm_data);
				memcpy(data, &ifm->ifm_data, dlen);
 				data += sizeof(ifm->ifm_data);

				ift = (ift->ifa_next = ift + 1);
			} else
				index = 0;
			break;

		case RTM_NEWADDR:
			ifam = (struct ifa_msghdr *)rtm;
			if (index && ifam->ifam_index != index)
				abort();	/* XXX abort illegal in library */

			if (index == 0 || (ifam->ifam_addrs & RTA_MASKS) == 0)
				break;
			ift->ifa_name = cif->ifa_name;
			ift->ifa_flags = cif->ifa_flags;
			ift->ifa_data = NULL;
			p = next + rtm->rtm_hdrlen;
			/* Scan to look for length of address */
			alen = 0;
			for (p0 = p, i = 0; i < RTAX_MAX; i++) {
				if ((RTA_MASKS & ifam->ifam_addrs & (1 << i))
				    == 0)
					continue;
				sa = (struct sockaddr *)p;
				len = SA_RLEN(sa);
				if (i == RTAX_IFA) {
					alen = len;
					break;
				}
				p += len;
			}
			for (p = p0, i = 0; i < RTAX_MAX; i++) {
				if ((RTA_MASKS & ifam->ifam_addrs & (1 << i))
				    == 0)
					continue;
				sa = (struct sockaddr *)p;
				len = SA_RLEN(sa);
				switch (i) {
				case RTAX_IFA:
					ift->ifa_addr = (struct sockaddr *)data;
					memcpy(data, p, len);
					data += len;
					break;

				case RTAX_NETMASK:
					ift->ifa_netmask =
					    (struct sockaddr *)data;
					if (sa->sa_len == 0) {
						memset(data, 0, alen);
						data += alen;
						break;
					}
					memcpy(data, p, len);
					data += len;
					break;

				case RTAX_BRD:
					ift->ifa_broadaddr =
					    (struct sockaddr *)data;
					memcpy(data, p, len);
					data += len;
					break;
				}
				p += len;
			}


			ift = (ift->ifa_next = ift + 1);
			break;
		}
	}

	free(buf);
	if (--ift >= ifa) {
		ift->ifa_next = NULL;
		*pif = ifa;
	} else {
		*pif = NULL;
		free(ifa);
	}
	return (0);
}
DEF_WEAK(getifaddrs);

void
freeifaddrs(struct ifaddrs *ifp)
{
	free(ifp);
}
DEF_WEAK(freeifaddrs);
@


1.12
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.11 2013/03/20 14:15:56 deraadt Exp $	*/
d291 1
d298 1
@


1.11
log
@Use a realloc() loop around the sysctl() for NET_RT_IFLIST, in case an
interface is added at just the right... wrong moment.
ok millert dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.10 2008/11/24 20:08:49 claudio Exp $	*/
d28 1
a32 1
#include <sys/param.h>
@


1.10
log
@Correctly jump over routing headers and calculate the size of the if_data
struct in the if_msghdr instead of using sizeof() blindly. This allows us
to grow if_data without causing issues for the getifaddrs() users.
OK deraadt@@ (who needs this for some cool upcomming stuff)
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.9 2002/08/09 06:12:25 itojun Exp $	*/
d55 1
a55 1
	char *buf;
d77 19
a95 7
	if (sysctl(mib, 6, NULL, &needed, NULL, 0) < 0)
		return (-1);
	if ((buf = malloc(needed)) == NULL)
		return (-1);
	if (sysctl(mib, 6, buf, &needed, NULL, 0) < 0) {
		free(buf);
		return (-1);
@


1.9
log
@remove obsolete comment, no SIOCGIFCONF path any more
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.8 2002/08/09 06:11:53 itojun Exp $	*/
d39 1
d65 1
a65 1
	size_t len, alen;
d96 2
a97 1
				dl = (struct sockaddr_dl *)(ifm + 1);
d114 1
a114 1
			p = (char *)(ifam + 1);
d174 2
a175 1
				dl = (struct sockaddr_dl *)(ifm + 1);
d191 5
a195 1
				memcpy(data, &ifm->ifm_data, sizeof(ifm->ifm_data));
d213 1
a213 1
			p = (char *)(ifam + 1);
@


1.8
log
@unifdef for auditability.
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.7 2002/01/02 23:00:10 deraadt Exp $	*/
d27 1
a27 4
/*
 * NOTE: SIOCGIFCONF case is not LP64 friendly.  it also does not perform
 * try-and-error for region size.
 */
@


1.7
log
@label abort() from inside library as ILLEGAL
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.6 2001/08/20 02:27:10 itojun Exp $	*/
a34 1
#ifdef	NET_RT_IFLIST
a38 1
#endif
a45 8
#if !defined(AF_LINK)
#define	SA_LEN(sa)	sizeof(struct sockaddr)
#endif

#if !defined(SA_LEN)
#define	SA_LEN(sa)	(sa)->sa_len
#endif

a48 24
#ifndef	ALIGNBYTES
/*
 * On systems with a routing socket, ALIGNBYTES should match the value
 * that the kernel uses when building the messages.
 */
#define	ALIGNBYTES	XXX
#endif
#ifndef	ALIGN
#define	ALIGN(p)	(((u_long)(p) + ALIGNBYTES) &~ ALIGNBYTES)
#endif

#if	_BSDI_VERSION >= 199701
#define	HAVE_IFM_DATA
#endif

#if	_BSDI_VERSION >= 199802
/* ifam_data is very specific to recent versions of bsdi */
#define	HAVE_IFAM_DATA
#endif

#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(__FreeBSD__)
#define	HAVE_IFM_DATA
#endif

a54 1
#ifdef	NET_RT_IFLIST
a67 7
#else	/* NET_RT_IFLIST */
	char buf[1024];
	int sock;
	struct ifconf ifc;
	struct ifreq *ifr;
	struct ifreq *lifr;
#endif	/* NET_RT_IFLIST */
a72 1
#ifdef	NET_RT_IFLIST
a100 1
#ifdef	HAVE_IFM_DATA
a101 1
#endif	/* HAVE_IFM_DATA */
a116 3
#ifdef	HAVE_IFAM_DATA
			dcnt += sizeof(ifam->ifam_data) + ALIGNBYTES;
#endif	/* HAVE_IFAM_DATA */
d137 1
a137 1
				if (i == RTAX_NETMASK && SA_LEN(sa) == 0)
a145 28
#else	/* NET_RT_IFLIST */
	ifc.ifc_buf = buf;
	ifc.ifc_len = sizeof(buf);

	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		return (-1);
	i =  ioctl(sock, SIOCGIFCONF, (char *)&ifc);
	close(sock);
	if (i < 0)
		return (-1);

	ifr = ifc.ifc_req;
	lifr = (struct ifreq *)&ifc.ifc_buf[ifc.ifc_len];

	while (ifr < lifr) {
		struct sockaddr *sa;

		sa = &ifr->ifr_addr;
		++icnt;
		dcnt += SA_RLEN(sa);
		ncnt += sizeof(ifr->ifr_name) + 1;
		
		if (SA_LEN(sa) < sizeof(*sa))
			ifr = (struct ifreq *)(((char *)sa) + sizeof(*sa));
		else
			ifr = (struct ifreq *)(((char *)sa) + SA_LEN(sa));
	}
#endif	/* NET_RT_IFLIST */
a164 1
#ifdef	NET_RT_IFLIST
d185 2
a186 1
				memcpy(data, dl, SA_LEN((struct sockaddr *)dl));
a188 1
#ifdef	HAVE_IFM_DATA
a192 3
#else	/* HAVE_IFM_DATA */
				ift->ifa_data = NULL;
#endif	/* HAVE_IFM_DATA */
d240 1
a240 1
					if (SA_LEN(sa) == 0) {
a258 6
#ifdef	HAVE_IFAM_DATA
			/* ifam_data needs to be aligned */
			ift->ifa_data = data = (void *)ALIGN(data);
			memcpy(data, &ifam->ifam_data, sizeof(ifam->ifam_data));
			data += sizeof(ifam->ifam_data);
#endif	/* HAVE_IFAM_DATA */
a265 21
#else	/* NET_RT_IFLIST */
	ifr = ifc.ifc_req;
	lifr = (struct ifreq *)&ifc.ifc_buf[ifc.ifc_len];

	while (ifr < lifr) {
		struct sockaddr *sa;

		ift->ifa_name = names;
		strlcpy(names, ifr->ifr_name, sizeof(ifr->ifr_name));
		while (*names++)
			;

		ift->ifa_addr = (struct sockaddr *)data;
		sa = &ifr->ifr_addr;
		memcpy(data, sa, SA_LEN(sa));
		data += SA_RLEN(sa);
		
		ifr = (struct ifreq *)(((char *)sa) + SA_LEN(sa));
		ift = (ift->ifa_next = ift + 1);
	}
#endif	/* NET_RT_IFLIST */
@


1.6
log
@cope with sa_len < sizeof(struct sockaddr).
From: Patrik Lindergren <patrik@@datacom.nu>
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.5 2001/07/04 19:43:16 deraadt Exp $	*/
d155 1
a155 1
				abort();	/* this cannot happen */
d282 1
a282 1
				abort();	/* this cannot happen */
@


1.5
log
@fix unused code path; karls@@inet.no
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.4 2001/06/27 00:58:55 lebel Exp $	*/
d216 4
a219 1
		ifr = (struct ifreq *)(((char *)sa) + SA_LEN(sa));
@


1.4
log
@use strlcpy vs strncpy+a[len-1]='\0'.  millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.3 2000/11/24 08:26:47 itojun Exp $	*/
d46 1
a100 1
	struct ifaddrs *ifa, *ift;
d102 1
d105 1
a105 1
	int m, sock;
d110 1
a111 1
	size_t len, alen;
@


1.3
log
@ifm_data is avilable on {net,open,free}bsd.  sync with kame.
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.2 2000/02/23 15:39:53 itojun Exp $	*/
d356 1
a356 2
		names[sizeof(ifr->ifr_name)] = 0;
		strncpy(names, ifr->ifr_name, sizeof(ifr->ifr_name));
@


1.2
log
@add freeifaddrs(3), which reclaims region allocated by getifaddrs(3).
in sync with kame and bsdi.
@
text
@d1 1
a1 1
/*	$OpenBSD: getifaddrs.c,v 1.1 2000/02/23 06:55:58 itojun Exp $	*/
d74 1
d76 4
@


1.1
log
@add getifaddrs(3), from bsdi4.
this will help future apps from complexity of SIOCGIFCONF.
NOTE: getifaddrs(3) uses sysctl interface, not SIOCGIFCONF.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 1
a25 1
 *	BSDI getifaddrs.c,v 2.11 1999/03/15 20:57:20 jch Exp
d373 6
@

