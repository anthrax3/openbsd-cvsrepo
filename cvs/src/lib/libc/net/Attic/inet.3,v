head	1.27;
access;
symbols
	OPENBSD_5_5:1.26.0.6
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.2
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.25.0.2
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.23.0.2
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.14
	OPENBSD_5_0:1.22.0.12
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.10
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.8
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.4
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.6
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.2
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.21.0.6
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.19.0.8
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.6
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.4
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.2
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.18.0.8
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.6
	OPENBSD_3_6_BASE:1.18
	OPENBSD_3_5:1.18.0.4
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.8
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.6
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.4
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.27
date	2014.04.19.11.18.01;	author guenther;	state dead;
branches;
next	1.26;

1.26
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.25;

1.25
date	2012.09.27.11.31.58;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2012.08.20.19.38.55;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2012.04.20.07.00.21;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2008.12.09.19.38.38;	author otto;	state Exp;
branches;
next	1.21;

1.21
date	2007.06.12.16.50.06;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.31.19.19.30;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2005.07.22.04.50.51;	author jaredy;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.09.12.00.39;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.08.09.26.02;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.01.19.17.37;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.04.17.19.36;	author henning;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.17.23.13.26;	author pjanzen;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.22.20.09.31;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.18.20.28.00;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.21.15.38.17;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.18.03.01.32;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.07.05.04.40.59;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.05.19.29.43;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.05.25.13.06.45;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.05.23.14.11.01;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	97.06.23.04.01.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.04.05.21.13.10;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.29.06;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.03;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Split inet(3) into three pages by decade: 1980s -> inet_lnaof(3),
1990s -> inet_addr(3), 2000s and beyond -> inet_ntop(3).

ok tedu@@ (who also noted the timeline) deraadt@@ jmc@@
@
text
@.\"	$OpenBSD: inet.3,v 1.26 2013/06/05 03:39:23 tedu Exp $
.\"	$NetBSD: inet.3,v 1.7 1997/06/18 02:25:24 lukem Exp $
.\"
.\" Copyright (c) 1983, 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)inet.3	8.1 (Berkeley) 6/4/93
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt INET 3
.Os
.Sh NAME
.Nm inet_aton ,
.Nm inet_addr ,
.Nm inet_network ,
.Nm inet_pton ,
.Nm inet_ntop ,
.Nm inet_ntoa ,
.Nm inet_makeaddr ,
.Nm inet_netof ,
.Nm inet_lnaof
.Nd Internet address manipulation routines
.Sh SYNOPSIS
.In sys/types.h
.In sys/socket.h
.In netinet/in.h
.In arpa/inet.h
.Ft int
.Fn inet_aton "const char *cp" "struct in_addr *addr"
.Ft in_addr_t
.Fn inet_addr "const char *cp"
.Ft in_addr_t
.Fn inet_network "const char *cp"
.Ft int
.Fn inet_pton "int af" "const char *src" "void *dst"
.Ft const char *
.Fn inet_ntop "int af" "const void *src" "char *dst" "socklen_t size"
.Ft char *
.Fn inet_ntoa "struct in_addr in"
.Ft struct in_addr
.Fn inet_makeaddr "in_addr_t net" "in_addr_t lna"
.Ft in_addr_t
.Fn inet_netof "struct in_addr in"
.Ft in_addr_t
.Fn inet_lnaof "struct in_addr in"
.Sh DESCRIPTION
The routines
.Fn inet_aton ,
.Fn inet_addr ,
and
.Fn inet_network
interpret character strings representing
numbers expressed in the Internet standard
.Dq dot
notation.
.Pp
The
.Fn inet_aton
routine interprets the specified character string as an Internet address,
placing the address into the structure provided.
It returns 1 if the string was successfully interpreted,
or 0 if the string was invalid.
.Pp
The
.Fn inet_addr
and
.Fn inet_network
functions return numbers suitable for use
as Internet addresses and Internet network
numbers, respectively.
Both functions return the constant
.Dv INADDR_NONE
if the specified character string is malformed.
.Pp
The
.Fn inet_pton
function converts a presentation format address (that is, printable form
as held in a character string) to network format (usually a
.Li struct in_addr
or some other internal binary representation, in network byte order).
It returns 1 if the address was valid for the specified address family;
0 if the address wasn't parseable in the specified address family; or \-1
if some system error occurred (in which case
.Va errno
will have been set).
This function is presently valid for
.Dv AF_INET
and
.Dv AF_INET6 .
.Pp
The function
.Fn inet_ntop
converts an address from network format (usually a
.Li struct in_addr
or some other binary form, in network byte order) to presentation format
(suitable for external display purposes).
It returns
.Dv NULL
if a system
error occurs (in which case,
.Va errno
will have been set), or it returns a pointer to the destination string.
.Pp
The routine
.Fn inet_ntoa
takes an Internet address and returns an
ASCII string representing the address in dot notation.
.Pp
The routine
.Fn inet_makeaddr
takes an Internet network number and a local
network address and constructs an Internet address
from it.
.Pp
The routines
.Fn inet_netof
and
.Fn inet_lnaof
break apart Internet host addresses, returning
the network number and local network address part,
respectively.
.Pp
All Internet addresses are returned in network
order (bytes ordered from left to right).
All network numbers and local address parts are
returned as machine format integer values.
.Sh INTERNET ADDRESSES (IP VERSION 4)
Values specified using dot notation take one of the following forms:
.Bd -literal -offset indent
a.b.c.d
a.b.c
a.b
a
.Ed
.Pp
When four parts are specified, each is interpreted
as a byte of data and assigned, from left to right,
to the four bytes of an Internet address.
Note that when an Internet address is viewed as a 32-bit
integer quantity on a system that uses little-endian
byte order
(such as the Intel 386, 486 and Pentium processors)
the bytes referred to above appear as
.Dq Li d.c.b.a .
That is, little-endian bytes are ordered from right to left.
.Pp
When a three part address is specified, the last
part is interpreted as a 16-bit quantity and placed
in the rightmost two bytes of the network address.
This makes the three part address format convenient
for specifying Class B network addresses as
.Dq Li 128.net.host .
.Pp
When a two part address is supplied, the last part
is interpreted as a 24-bit quantity and placed in
the rightmost three bytes of the network address.
This makes the two part address format convenient
for specifying Class A network addresses as
.Dq Li net.host .
.Pp
When only one part is given, the value is stored
directly in the network address without any byte
rearrangement.
.Pp
All numbers supplied as
.Dq parts
in a dot notation
may be decimal, octal, or hexadecimal, as specified
in the C language (i.e., a leading 0x or 0X implies
hexadecimal; a leading 0 implies octal;
otherwise, the number is interpreted as decimal).
.Sh INTERNET ADDRESSES (IP VERSION 6)
In order to support scoped IPv6 addresses,
.Xr getaddrinfo 3
and
.Xr getnameinfo 3
are recommended rather than the functions presented here.
.Pp
The presentation format of an IPv6 address is given in RFC 4291:
.Pp
There are three conventional forms for representing IPv6 addresses as
text strings:
.Bl -enum
.It
The preferred form is x:x:x:x:x:x:x:x, where the 'x's are the
hexadecimal values of the eight 16-bit pieces of the address.
Examples:
.Bd -literal -offset indent
FEDC:BA98:7654:3210:FEDC:BA98:7654:3210
1080:0:0:0:8:800:200C:417A
.Ed
.Pp
Note that it is not necessary to write the leading zeros in an
individual field, but there must be at least one numeral in
every field (except for the case described in 2.).
.It
Due to the method of allocating certain styles of IPv6
addresses, it will be common for addresses to contain long
strings of zero bits.
In order to make writing addresses
containing zero bits easier, a special syntax is available to
compress the zeros.
The use of
.Dq \&:\&:
indicates multiple groups
of 16 bits of zeros.
The
.Dq \&:\&:
can only appear once in an
address.
The
.Dq \&:\&:
can also be used to compress the leading and/or trailing zeros in an address.
.Pp
For example the following addresses:
.Bd -literal -offset indent
1080:0:0:0:8:800:200C:417A  a unicast address
FF01:0:0:0:0:0:0:43         a multicast address
0:0:0:0:0:0:0:1             the loopback address
0:0:0:0:0:0:0:0             the unspecified addresses
.Ed
.Pp
may be represented as:
.Bd -literal -offset indent
1080::8:800:200C:417A       a unicast address
FF01::43                    a multicast address
::1                         the loopback address
::                          the unspecified addresses
.Ed
.It
An alternative form that is sometimes more convenient when
dealing with a mixed environment of IPv4 and IPv6 nodes is
x:x:x:x:x:x:d.d.d.d, where the 'x's are the hexadecimal values
of the six high-order 16-bit pieces of the address, and the 'd's
are the decimal values of the four low-order 8-bit pieces of the
address (standard IPv4 representation).
Examples:
.Bd -literal -offset indent
0:0:0:0:0:0:13.1.68.3
0:0:0:0:0:FFFF:129.144.52.38
.Ed
.Pp
or in compressed form:
.Bd -literal -offset indent
::13.1.68.3
::FFFF:129.144.52.38
.Ed
.El
.Sh SEE ALSO
.Xr byteorder 3 ,
.Xr gethostbyname 3 ,
.Xr getnetent 3 ,
.Xr inet_net 3 ,
.Xr hosts 5 ,
.Xr networks 5
.Sh STANDARDS
The
.Nm inet_ntop
and
.Nm inet_pton
functions conform to the IETF IPv6 BSD API and address formatting
specifications.
Note that
.Nm inet_pton
does not accept 1-, 2-, or 3-part dotted addresses; all four parts
must be specified.
This is a narrower input set than that accepted by
.Nm inet_aton .
.Pp
.Rs
.%A R. Gilligan
.%A S. Thomson
.%A J. Bound
.%A J. McCann
.%A W. Stevens
.%D February 2003
.%R RFC 3493
.%T Basic Socket Interface Extensions for IPv6
.Re
.Pp
.Rs
.%A R. Hinden
.%A S. Deering
.%D February 2006
.%R RFC 4291
.%T IP Version 6 Addressing Architecture
.Re
.Sh HISTORY
The
.Nm inet_addr ,
.Nm inet_network ,
.Nm inet_makeaddr ,
.Nm inet_lnaof ,
and
.Nm inet_netof
functions appeared in
.Bx 4.2 .
The
.Nm inet_aton
and
.Nm inet_ntoa
functions appeared in
.Bx 4.3 .
The
.Nm inet_pton
and
.Nm inet_ntop
functions appeared in BIND 4.9.4.
.Sh BUGS
The value
.Dv INADDR_NONE
(0xffffffff) is a valid broadcast address, but
.Fn inet_addr
cannot return that value without indicating failure.
Also,
.Fn inet_addr
should have been designed to return a
.Li struct in_addr .
The newer
.Fn inet_aton
function does not share these problems, and almost all existing code
should be modified to use
.Fn inet_aton
instead.
.Pp
The problem of host byte ordering versus network byte ordering is
confusing.
.Pp
The string returned by
.Fn inet_ntoa
resides in a static memory area.
@


1.26
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.25 2012/09/27 11:31:58 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: September 27 2012 $
@


1.25
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.24 2012/08/20 19:38:55 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: August 20 2012 $
d48 4
a51 4
.Fd #include <sys/types.h>
.Fd #include <sys/socket.h>
.Fd #include <netinet/in.h>
.Fd #include <arpa/inet.h>
@


1.24
log
@rfc 4291 replaces rfcs 2373 and 3513;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.23 2012/04/20 07:00:21 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: April 20 2012 $
d280 14
d304 1
a311 13
.Sh STANDARDS
The
.Nm inet_ntop
and
.Nm inet_pton
functions conform to the IETF IPv6 BSD API and address formatting
specifications.
Note that
.Nm inet_pton
does not accept 1-, 2-, or 3-part dotted addresses; all four parts
must be specified.
This is a narrower input set than that accepted by
.Nm inet_aton .
@


1.23
log
@rearrange DESCRIPTION somewhat to make this page more readable;
from Lawrence Teo
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.22 2008/12/09 19:38:38 otto Exp $
d33 1
a33 1
.Dd $Mdocdate: December 9 2008 $
d203 1
a203 1
The presentation format of an IPv6 address is given in RFC 2373:
d281 8
a288 3
.%R RFC 2373
.%D July 1998
.%T "IP Version 6 Addressing Architecture"
d291 5
a295 3
.%R RFC 3493
.%D February 2003
.%T "Basic Socket Interface Extensions for IPv6"
@


1.22
log
@fix inet_ntop(3) prototype; ok millert@@ libc to be bumbed very soon
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.21 2007/06/12 16:50:06 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 12 2007 $
d37 1
d39 4
a42 2
.Nm inet_aton ,
.Nm inet_lnaof ,
d45 1
a45 4
.Nm inet_network ,
.Nm inet_ntoa ,
.Nm inet_ntop ,
.Nm inet_pton
d52 2
d56 2
d59 5
a63 3
.Fn inet_aton "const char *cp" "struct in_addr *addr"
.Ft in_addr_t
.Fn inet_lnaof "struct in_addr in"
d69 1
a69 7
.Fn inet_network "const char *cp"
.Ft char *
.Fn inet_ntoa "struct in_addr in"
.Ft const char *
.Fn inet_ntop "int af" "const void *src" "char *dst" "socklen_t size"
.Ft int
.Fn inet_pton "int af" "const char *src" "void *dst"
d80 19
a113 13
The
.Fn inet_aton
routine interprets the specified character string as an Internet address,
placing the address into the structure provided.
It returns 1 if the string was successfully interpreted,
or 0 if the string was invalid.
The
.Fn inet_addr
and
.Fn inet_network
functions return numbers suitable for use
as Internet addresses and Internet network
numbers, respectively.
d127 1
d132 1
d138 1
a272 8
.Sh DIAGNOSTICS
The constant
.Dv INADDR_NONE
is returned by
.Fn inet_addr
and
.Fn inet_network
for malformed requests.
@


1.21
log
@``dot'' notation
is more readable than
`.' notation

zap some silly .Tn whilst here;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.20 2007/05/31 19:19:30 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d67 1
a67 1
.Fn inet_ntop "int af" "const void *src" "char *dst" "size_t size"
@


1.20
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.19 2005/07/22 04:50:51 jaredy Exp $
d78 1
a78 1
.Ql \&.
d124 1
a124 4
.Tn ASCII
string representing the address in
.Ql \&.
notation.
d143 1
a143 4
Values specified using the
.Ql \&.
notation take one
of the following forms:
d156 3
a158 5
byte order (such as the
.Tn Intel 386, 486
and
.Tn Pentium
processors) the bytes referred to above appear as
d182 1
a182 3
in a
.Ql \&.
notation
@


1.19
log
@- sync prototypes and header file excerpts
- typos/spelling, punctuation, rewording, macro, and layout fixes.

help & ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.18 2003/09/09 12:00:39 jmc Exp $
d33 1
a33 1
.Dd June 18, 1997
@


1.18
log
@update RFCs (from NetBSD);
inet_makeaddr() uses in_addr_t types, not unsigned long.

ok itojun@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.17 2003/08/08 09:26:02 jmc Exp $
d73 1
a73 1
.Fn inet_addr
d86 2
a87 2
It returns 1 if the address was valid for the specified address family, or
0 if the address wasn't parseable in the specified address family, or \-1
d195 1
a195 1
hexadecimal; otherwise, a leading 0 implies octal;
d317 1
a317 1
.Nm inet_lnaof
@


1.17
log
@refer to RFCs consistently (RFC XXXX);
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.16 2003/06/02 20:18:35 millert Exp $
d59 1
a59 1
.Fn inet_makeaddr "unsigned long net" "unsigned long lna"
d204 1
a204 1
The presentation format of an IPv6 address is given in [RFC 1884 2.2]:
d289 10
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.15 2003/05/01 19:17:37 jmc Exp $
d204 1
a204 1
The presentation format of an IPv6 address is given in [RFC1884 2.2]:
@


1.15
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.14 2003/03/04 17:19:36 henning Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@missing #include in SYNOPSIS, found by Daniel Lucq

ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.13 2001/02/17 23:13:26 pjanzen Exp $
d230 1
a230 2
.Pp
containing zero bits easier a special syntax is available to
d298 1
a298 1
functions conforms to the IETF IPv6 BSD API and address formatting
@


1.13
log
@spelling and grammar
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.12 2000/09/22 20:09:31 aaron Exp $
d52 1
@


1.12
log
@IPng -> IPv6
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.11 2000/06/18 20:28:00 itojun Exp $
d103 1
a103 1
or 0 if the string is invalid.
d205 1
a205 1
are recommeded than functions presented here.
@


1.11
log
@note get{addr,name}info are recommended than inet_xx.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.10 2000/04/21 15:38:17 aaron Exp $
d298 1
a298 1
functions conforms to the IETF IPng BSD API and address formatting
@


1.10
log
@Don't hyphenate the words {left|right}most.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.9 2000/04/18 03:01:32 aaron Exp $
d201 6
@


1.9
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.8 1999/07/05 04:40:59 aaron Exp $
d175 1
a175 1
in the right-most two bytes of the network address.
d182 1
a182 1
the right most three bytes of the network address.
@


1.8
log
@repairs; better English, formatting, etc.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.7 1999/06/05 19:29:43 deraadt Exp $
d88 2
a89 2
or some other internal binary representation, in network byte order).  It
returns 1 if the address was valid for the specified address family, or
d93 2
a94 1
will have been set).  This function is presently valid for
d117 2
a118 1
(suitable for external display purposes).  It returns
d130 2
a131 1
notation.  The routine
d135 2
a136 1
from it.  The routines
d162 2
a163 2
to the four bytes of an Internet address.  Note
that when an Internet address is viewed as a 32-bit
d221 2
a222 1
strings of zero bits.  In order to make writing addresses
d225 2
a226 1
compress the zeros.  The use of
d229 2
a230 1
of 16 bits of zeros.  The
d233 2
a234 1
address.  The
d259 2
a260 1
address (standard IPv4 representation).  Examples:
d293 2
a294 1
specifications.  Note that
d296 3
a298 2
does not accept 1-, 2-, or 3-part  dotted addresses; all four parts
must be specified.  This is a narrower input set than that accepted by
@


1.7
log
@stronger suggest
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.6 1999/05/25 13:06:45 aaron Exp $
d87 1
a87 1
.Ft struct in_addr
d90 1
a90 1
0 if the address wasn't parseable in the specified address family, or -1
d93 5
a97 2
will have been set).  This function is presently valid for AF_INET and
AF_INET6.  The
d114 1
a114 1
.Ft struct in_addr
d116 3
a118 1
(suitable for external display purposes).  It returns NULL if a system
d161 1
a161 1
byte order (such as the 
d220 9
a228 4
compress the zeros.  The use of ``::'' indicates multiple groups
of 16-bits of zeros.  The ``::'' can only appear once in an
address.  The ``::'' can also be used to compress the leading
and/or trailing zeros in an address.
d290 1
a290 1
The 
d319 1
a319 1
.Fa "struct in_addr" .
@


1.6
log
@punctuation
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.5 1999/05/23 14:11:01 aaron Exp $
d306 4
d312 4
a315 1
function does not share this problem.
a322 4
.Pp
.Fn inet_addr
should return a
.Fa "struct in_addr" .
@


1.5
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.4 1997/06/23 04:01:11 millert Exp $
d185 1
a185 1
.Ql  \&.
@


1.4
log
@Add inet_ntop(3) and inet_pton(3) and the IPv6 address format.
From BSD/OS 3.0, with permission from Jeffrey Finkelstein <finkels@@bsdi.com>
by way of NetBSD (lukem).  Also add xfer for inet_net(3).
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d39 1
a39 1
.Os BSD 4.2
@


1.3
log
@Use in_addr_t not u_long and use in_port_t in some cases instead
of u_short or u_int16_t.
@
text
@d1 2
a2 1
.\"	$OpenBSD: inet.3,v 1.2 1996/08/19 08:29:06 tholo Exp $
d35 3
a37 1
.Dd June 4, 1993
d41 1
d43 3
a45 1
.Nm inet_addr ,
d48 2
a49 3
.Nm inet_makeaddr ,
.Nm inet_lnaof ,
.Nm inet_netof
d55 1
a55 3
.Ft int 
.Fn inet_aton "const char *cp" "struct in_addr *pin"
.Ft in_addr_t 
d57 9
a65 1
.Ft in_addr_t 
d69 4
a72 6
.Ft struct in_addr 
.Fn inet_makeaddr "int net" "int lna"
.Ft in_addr_t 
.Fn inet_lnaof "struct in_addr in"
.Ft in_addr_t 
.Fn inet_netof "struct in_addr in"
d84 11
d107 10
d139 1
a139 1
.Sh INTERNET ADDRESSES
d155 6
a160 4
integer quantity on the
.Tn VAX
the bytes referred to
above appear as
d162 1
a162 4
That is,
.Tn VAX
bytes are
ordered from right to left.
d191 62
d262 1
d265 1
d267 12
a278 1
.Xr networks 5 ,
d280 8
a287 2
These
functions appeared in 
d289 11
d309 1
d312 1
d317 3
a319 2
Inet_addr should return a
.Fa struct in_addr .
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet.3,v 1.4 1995/02/27 09:45:26 chopps Exp $
d52 1
a52 1
.Ft unsigned long 
d54 1
a54 1
.Ft unsigned long 
d60 1
a60 1
.Ft unsigned long 
d62 1
a62 1
.Ft unsigned long 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: inet.3,v 1.4 1995/02/27 09:45:26 chopps Exp $
a32 2
.\"
.\"     @@(#)inet.3	8.1 (Berkeley) 6/4/93
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
