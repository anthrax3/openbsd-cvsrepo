head	1.25;
access;
symbols
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.22.0.4
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.2
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.20.0.22
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.20
	OPENBSD_5_0:1.20.0.18
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.16
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.14
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.10
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.12
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.8
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.6
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.4
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.19.0.2
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.17.0.8
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.6
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.4
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.2
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5;
locks; strict;
comment	@.\" @;


1.25
date	2014.06.11.19.54.36;	author chrisz;	state dead;
branches;
next	1.24;
commitid	xZpr0gBWl7iTINUS;

1.24
date	2014.06.11.16.59.47;	author chrisz;	state Exp;
branches;
next	1.23;
commitid	eCVZBBFwEoAYGCDT;

1.23
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2012.09.27.11.31.58;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2012.08.21.16.35.16;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.31.19.19.30;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2006.12.09.14.40.15;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2006.12.09.01.12.28;	author itojun;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.11.17.45.41;	author jaredy;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.06.11.08.47;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.06.03.50.46;	author itojun;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.20.03.26.43;	author itojun;	state dead;
branches;
next	1.13;

1.13
date	2003.08.08.09.26.02;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.30.21.37.59;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.01.19.17.37;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.18.23.53.49;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.23.05.57.04;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.23.02.33.18;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.17.14.36.40;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.18.03.01.32;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.18.21.49.01;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.12.12.14.59.40;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	99.12.12.14.57.20;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	99.12.11.08.09.11;	author itojun;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Really remove the obsolete manpages left by earlier commit
which just emptied the file but didn't remove it.
@
text
@@


1.24
log
@Remove manpages about deprecated RFC2292 ancillary data convenience functions.
They are obsoleted by the RFC3542 api.

ok mpi@@
@
text
@@


1.23
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@a0 310
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.22 2012/09/27 11:31:58 jmc Exp $
.\"	$KAME: inet6_rthdr_space.3,v 1.11 2005/01/05 03:00:44 itojun Exp $
.\"
.\" Copyright (C) 2004 WIDE Project.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the project nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: September 27 2012 $
.Dt INET6_RTHDR_SPACE 3
.Os
.\"
.Sh NAME
.Nm inet6_rthdr_space ,
.Nm inet6_rthdr_init ,
.Nm inet6_rthdr_add ,
.Nm inet6_rthdr_lasthop ,
.Nm inet6_rthdr_reverse ,
.Nm inet6_rthdr_segments ,
.Nm inet6_rthdr_getaddr ,
.Nm inet6_rthdr_getflags
.Nd IPv6 Routing Header Options Manipulation
.\"
.Sh SYNOPSIS
.In sys/types.h
.In netinet/in.h
.Ft size_t
.Fn inet6_rthdr_space "int type" "int segments"
.Ft "struct cmsghdr *"
.Fn inet6_rthdr_init "void *bp" "int type"
.Ft int
.Fn inet6_rthdr_add "struct cmsghdr *cmsg" "const struct in6_addr *addr" "unsigned int flags"
.Ft int
.Fn inet6_rthdr_lasthop "struct cmsghdr *cmsg" "unsigned int flags"
.Ft int
.Fn inet6_rthdr_reverse "const struct cmsghdr *in" "struct cmsghdr *out"
.Ft int
.Fn inet6_rthdr_segments "const struct cmsghdr *cmsg"
.Ft "struct in6_addr *"
.Fn inet6_rthdr_getaddr "struct cmsghdr *cmsg" "int index"
.Ft int
.Fn inet6_rthdr_getflags "const struct cmsghdr *cmsg" "int index"
.\"
.Sh DESCRIPTION
Note:
RFC 2292 has been superseded by RFC 3542.
The use of functions described in this page is deprecated.
See
.Xr inet6_rth_space 3 .
.Pp
The RFC 2292 IPv6 Advanced API defined eight functions for
applications to use for building and parsing routing headers.
The
eight functions are split into two groups, the first of which builds
the header and the second of which can parse it.
The function prototypes for these functions are all in the
.In netinet/in.h
header.
Although direct manipulation of a routing header is possible,
this set of APIs make it unnecessary and such direct manipulation
should be avoided so that changes to the underlying structures do not
break applications.
.Pp
Please note that RFC 2292 uses the term
.Dq segments
instead of the term
.Dq addresses
but they are considered equivalent for this manual page.
.\"
.Ss inet6_rthdr_space
The
.Fn inet6_rthdr_space
function returns the number of bytes required to hold a routing header
of the specified
.Fa type
and containing the specified number of
.Fa segments .
Only one
.Fa type
is supported,
.Dv IPV6_RTHDR_TYPE_0 ,
and it can hold from 1 to 23 segments.
The return value includes the
size of the
.Vt cmsghdr
structure that precedes the routing header and
any required padding.
.Pp
A return value of 0 indicates an error.
Either the type was specified
incorrectly, or the number of segments was less than one or greater
than 23.
.Pp
Note: The
.Fn inet6_rthdr_space
function only returns the size required by the routing header and does
not allocate memory for the caller.
.\"
.Ss inet6_rthdr_init
The
.Fn inet6_rthdr_init
function initializes a buffer, pointed to by
.Fa bp
with an appropriate
.Li cmsghdr
structure followed by a routing header of the specified
.Fa type .
.Pp
The caller must use the
.Fn inet6_rthdr_space
function to determine the size of the buffer, and then allocate that
buffer before calling
.Fn inet6_rthdr_init .
.Pp
The return value is a pointer to a
.Li cmsghdr
structure, which is used as the first argument to the
.Fn inet6_rthdr_add
and
.Fn inet6_rthdr_lasthop
functions in order to construct the routing header.
When an error occurs the return value is
.Dv NULL .
.\"
.Ss inet6_rthdr_add
The
.Fn inet6_rthdr_add
function adds the IPv6 address pointed to by
.Fa addr
to the end of the
routing header being constructed and sets the type of this address to the
value of
.Fa flags .
The
.Fa flags
must be either
.Dv IPV6_RTHDR_LOOSE
or
.Dv IPV6_RTHDR_STRICT
indicating whether loose or strict source routing is required.
.Pp
When the function succeeds it returns 0, otherwise \-1 is returned.
.\"
.Ss inet6_rthdr_lasthop
The
.Fn inet6_rthdr_lasthop
function specifies the strict or loose flag for the final hop of a
routing header.
The
.Fa flags
argument must be either
.Dv IPV6_RTHDR_LOOSE
or
.Dv IPV6_RTHDR_STRICT .
.Pp
The return value of the function is 0 upon success, and \-1 when an
error has occurred.
.Pp
Please note that a routing header specifying
.Li N
intermediate nodes requires
.Li N+1
strict or loose flags meaning that
.Fn inet6_rthdr_add
must be called
.Li N
times and then
.Fn inet6_rthdr_lasthop
must be called once.
.\"
.Ss inet6_rthdr_reverse
This function was never implemented.
.Pp
The following three functions provide an API for parsing a received
routing header:
.\"
.Ss inet6_rthdr_segments
The
.Fn inet6_rthdr_segments
function returns the number of segments contained in the routing
header pointed to by the
.Fa cmsg
argument.
On success the return value is from 1 to 23.
When an error occurs, \-1 is returned.
.\"
.Ss inet6_rthdr_getaddr
The
.Fn inet6_rthdr_getaddr
function returns a pointer to the IPv6 address specified by the
.Fa index
argument from the routing header pointed to by
.Fa cmsg .
The index must be between 1 and the number returned by
.Fn inet6_rthdr_segments ,
described above.
An application must call
.Fn inet6_rthdr_segments
to obtain the number of segments in the routing header.
.Pp
If an error occurs,
.Dv NULL
is returned.
.\"
.Ss inet6_rthdr_getflags
The
.Fn inet6_rthdr_getflags
function returns the flags value of the segment specified by
.Fa index
of the routing header pointed to by
.Fa cmsg .
The
.Fa index
argument must be between 0 and the value returned by
.Fn inet6_rthdr_segments .
The return value will be either
.Dv IPV6_RTHDR_LOOSE
or
.Dv IPV6_RTHDR_STRICT
indicating whether loose or strict source routing was requested for
that segment.
.Pp
When an error occurs, \-1 is returned.
.Pp
Note: Flags begin at index 0 while segments begin at index 1, to
maintain consistency with the terminology and figures in RFC 2460.
.\"
.Sh EXAMPLES
RFC 2292 gives comprehensive examples in chapter 8.
.\"
.Sh DIAGNOSTICS
The
.Fn inet6_rthdr_space
function returns 0 when an error occurs.
.Pp
The
.Fn inet6_rthdr_add
and
.Fn inet6_rthdr_lasthop
functions return 0 on success, and \-1 on error.
.Pp
The
.Fn inet6_rthdr_init
and
.Fn inet6_rthdr_getaddr
functions
return
.Dv NULL
on error.
.Pp
The
.Fn inet6_rthdr_segments
and
.Fn inet6_rthdr_getflags
functions return \-1 on error.
.\"
.Sh SEE ALSO
.Xr inet6 4 ,
.Xr ip6 4
.Sh STANDARDS
.Rs
.%A W. Stevens
.%A M. Thomas
.%D February 1998
.%R RFC 2292
.%T Advanced Sockets API for IPv6
.Re
.Pp
.Rs
.%A S. Deering
.%A R. Hinden
.%D December 1998
.%R RFC 2460
.%T Internet Protocol, Version 6 (IPv6) Specification
.Re
.\"
.Sh HISTORY
This implementation first appeared in the KAME advanced networking kit.
.\"
.Sh BUGS
The
.Fn inet6_rthdr_reverse
function was never implemented.
.\".Pp
.\"This API is deprecated in favor of
.\".Xr inet6_rth_space 3
.\".Sh SEE ALSO
.\".Xr inet6_rth_space 3
@


1.22
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.21 2012/08/21 16:35:16 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: August 21 2012 $
d79 1
a79 1
.Aq Pa netinet/in.h
@


1.21
log
@- remove inconsistent/obsolete comments
- update rfc references
- make the Rs/Re blocks more consistent
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.20 2007/05/31 19:19:30 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
d282 1
d290 1
@


1.20
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.19 2006/12/09 14:40:15 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate$
a66 6
.\"The RFC 2292 IPv6 Advanced API has been deprecated in favor of the
.\"newer, RFC 3542 APIs.
.\"On platforms that support it, currently only
.\"FreeBSD, please use the newer API to manipulate routing header
.\"options.
.\".Pp
a284 2
.%T "Advanced Sockets API for IPv6"
.%N RFC 2292
d286 2
a291 2
.%T "Internet Protocol, Version 6 (IPv6) Specification"
.%N RFC 2460
d293 2
@


1.19
log
@tweak the text on deprecated functions, after some help from tom;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.18 2006/12/09 01:12:28 itojun Exp $
d31 1
a31 1
.Dd December 27, 2004
@


1.18
log
@switch IPv6 advanced API from RFC2292 to RFC3542 (2292 is superseded by 3542).
the kernel still handles RFC2292 set/getsockopts, so that compiled binary
has no trouble running.  userland sees RFC3542 symbols only on header file
so new code has to use RFC3542 API.

bump libc shlib minor for function additions.

tested on i386/amd64 by jmc, i386 by brad. checked by deraadt.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.17 2005/01/11 17:45:41 jaredy Exp $
d73 6
a96 5
.Pp
RFC 2292 was superseded by RFC 3542.
Functions described in this document were deprecated.
See
.Xr inet6_rth_space 3 .
@


1.17
log
@more minor tweaks, ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.16 2005/01/06 11:08:47 jmc Exp $
d91 5
@


1.16
log
@tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.15 2005/01/06 03:50:46 itojun Exp $
d106 3
a108 1
size of the cmsghdr structure that precedes the routing header, and
d173 1
a173 1
must be either
d217 1
a217 1
.Fn inet6_rthdr_segments
d259 2
a260 1
.Fn inet6_rthdr_add ,
d280 2
d298 1
a298 1
The implementation first appeared in KAME advanced networking kit.
@


1.15
log
@IPv6 manpage, wrote from scratch.  deraadt ok
@
text
@d1 1
a1 1
.\"	$OpenBSD$
a45 2
.Sh LIBRARY
.Lb libc
d79 1
a79 1
.In netinet/in.h
d81 1
a81 1
Although direct manipulation of a routing header is possible
d194 2
a195 2
The following four functions provide an API for parsing a received
routing header.
d200 1
a200 1
function returns the number of segments contained in the Routing
d205 1
a205 1
When an error occurs \-1 is returned.
d221 1
a221 1
If an error occurs the
d243 1
a243 1
When an error occurs \-1 is returned.
d246 4
a249 1
maintain consistency with the terminology and figures in RFC2460.
d274 1
a274 4
functions return -1 on error.
.\"
.Sh EXAMPLES
RFC2292 gives comprehensive examples in chapter 8.
d281 1
a281 1
.%N RFC2292
d288 1
a288 1
.%N RFC2460
@


1.14
log
@remove manpages based on RFC.  requested by deraadt
@
text
@d1 2
a2 2
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.13 2003/08/08 09:26:02 jmc Exp $
.\"	$KAME: inet6_rthdr_space.3,v 1.8 2000/05/17 14:30:15 itojun Exp $
d4 2
a5 2
.\" Copyright (c) 1983, 1987, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
d15 1
a15 1
.\" 3. Neither the name of the University nor the names of its contributors
d19 1
a19 1
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
d22 1
a22 1
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d31 1
a31 1
.Dd December 10, 1999
d44 1
a44 1
.Nd IPv6 Routing Header Options manipulation
d46 2
d49 2
a50 1
.Fd #include <netinet/in.h>
d69 11
a79 27
RFC 2292 IPv6 advanced API defines eight
functions that the application calls to build and examine a Routing
header.
Four functions build a Routing header:
.Bl -hang
.It Fn inet6_rthdr_space
return #bytes required for ancillary data
.It Fn inet6_rthdr_init
initialize ancillary data for Routing header
.It Fn inet6_rthdr_add
add IPv6 address & flags to Routing header
.It Fn inet6_rthdr_lasthop
specify the flags for the final hop
.El
.Pp
Four functions deal with a returned Routing header:
.Bl -hang
.It Fn inet6_rthdr_reverse
reverse a Routing header
.It Fn inet6_rthdr_segments
return #segments in a Routing header
.It Fn inet6_rthdr_getaddr
fetch one address from a Routing header
.It Fn inet6_rthdr_getflags
fetch one flag from a Routing header
.El
.Pp
d81 1
a81 1
.Aq Pa netinet/in.h
d83 10
d95 8
a102 2
This function returns the number of bytes required to hold a Routing
header of the specified
d104 16
a119 22
containing the specified number of
.Fa segments
.Pq addresses .
For an IPv6 Type 0 Routing header, the number
of segments must be between 1 and 23, inclusive.
The return value
includes the size of the cmsghdr structure that precedes the Routing
header, and any required padding.
.Pp
If the return value is 0, then either the type of the Routing header
is not supported by this implementation or the number of segments is
invalid for this type of Routing header.
.Pp
Note: This function returns the size but does not allocate the space
required for the ancillary data.
This allows an application to
allocate a larger buffer, if other ancillary data objects are
desired, since all the ancillary data objects must be specified to
.Xr sendmsg 2
as a single
.Li msg_control
buffer.
d122 3
a124 1
This function initializes the buffer pointed to by
d126 1
a126 1
to contain a
d128 1
a128 1
structure followed by a Routing header of the specified
a129 12
The
.Li cmsg_len
member of the
.Li cmsghdr
structure is initialized to the
size of the structure plus the amount of space required by the
Routing header.
The
.Li cmsg_level
and
.Li cmsg_type
members are also initialized as required.
d131 5
a135 3
The caller must allocate the buffer and its size can be determined by
calling
.Fn inet6_rthdr_space .
d137 1
a137 1
Upon success the return value is the pointer to the
d139 6
a144 3
structure, and this is then used as the first argument to the next
two functions.
Upon an error the return value is
d148 3
a150 1
This function adds the address pointed to by
d153 1
a153 1
Routing header being constructed and sets the type of this hop to the
d156 1
a156 1
For an IPv6 Type 0 Routing header,
d158 1
a158 2
must be
either
d161 2
a162 1
.Dv IPV6_RTHDR_STRICT .
d164 1
a164 9
If successful, the
.Li cmsg_len
member of the
.Li cmsghdr
structure is
updated to account for the new address in the Routing header and the
return value of the function is 0.
Upon an error the return value of
the function is -1.
d167 5
a171 3
This function specifies the Strict/Loose flag for the final hop of a
Routing header.
For an IPv6 Type 0 Routing header,
d178 2
a179 1
The return value of the function is 0 upon success, or -1 upon an error.
d181 1
a181 1
Notice that a Routing header specifying
d185 3
a187 2
Strict/Loose flags.
This requires
d189 3
a191 4
calls to
.Fn inet6_rthdr_add
followed by one call to
.Fn inet6_rthdr_lasthop .
d194 1
a194 11
This function takes a Routing header that was received as ancillary
data
.Po
pointed to by the first argument,
.Fa in
.Pc
and writes a new Routing
header that sends datagrams along the reverse of that route.
Both
arguments are allowed to point to the same buffer
.Pq that is, the reversal can occur in place .
d196 2
a197 2
The return value of the function is 0 on success, or -1 upon an
error.
d200 8
a207 8
This function returns the number of segments
.Pq addresses
contained in
the Routing header described by
.Fa cmsg .
On success the return value is
between 1 and 23, inclusive.
The return value of the function is -1 upon an error.
d210 3
a212 1
This function returns a pointer to the IPv6 address specified by
d214 1
a214 3
(which must have a value between 1 and the value returned by
.Fn inet6_rthdr_segments )
in the Routing header described by
d216 1
a216 2
An
application should first call
d218 4
a221 1
to obtain the number of segments in the Routing header.
d223 3
a225 2
Upon an error the return value of the function is
.Dv NULL .
d228 3
a230 1
This function returns the flags value specified by
d232 1
a232 4
(which must
have a value between 0 and the value returned by
.Fn inet6_rthdr_segments )
in the Routing header described by
d234 5
a238 1
For an IPv6 Type 0 Routing header the return value will be either
d241 3
a243 1
.Dv IPV6_RTHDR_STRICT .
d245 1
a245 1
Upon an error the return value of the function is -1.
d247 2
a248 5
Note: Addresses are indexed starting at 1, and flags starting at 0,
to maintain consistency with the terminology and figures in RFC 2460.
.\"
.Sh EXAMPLES
RFC 2292 gives comprehensive examples in chapter 8.
d251 1
d253 1
a253 1
returns 0 on errors.
d255 1
d258 1
a258 3
and
.Fn inet6_rthdr_reverse
return 0 on success, and returns -1 on error.
d260 1
d264 1
d269 1
d273 4
a276 1
return -1 on error.
d283 1
a283 1
.%N RFC 2292
d290 1
a290 1
.%N RFC 2460
a293 6
.Sh STANDARDS
The functions
are documented in
.Dq Advanced Sockets API for IPv6
.Pq RFC 2292 .
.\"
d298 1
a298 2
The text was shamelessly copied from RFC 2292.
.Pp
d300 6
a305 1
is not implemented yet.
@


1.13
log
@refer to RFCs consistently (RFC XXXX);
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.12 2003/06/02 20:18:35 millert Exp $
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.11 2003/05/30 21:37:59 jmc Exp $
d66 1
a66 1
RFC2292 IPv6 advanced API defines eight
d261 1
a261 1
to maintain consistency with the terminology and figures in RFC2460.
d264 1
a264 1
RFC2292 gives comprehensive examples in chapter 8.
d293 1
a293 1
.%N RFC2292
d300 1
a300 1
.%N RFC2460
d308 1
a308 1
.Pq RFC2292 .
d314 1
a314 1
The text was shamelessly copied from RFC2292.
@


1.11
log
@- section reorder
- macro cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.10 2003/05/01 19:17:37 jmc Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.9 2003/01/18 23:53:49 deraadt Exp $
d267 3
a291 3
.Sh EXAMPLES
RFC2292 gives comprehensive examples in chapter 8.
.\"
a307 3
.Sh HISTORY
The implementation first appeared in KAME advanced networking kit.
.\"
d313 3
@


1.9
log
@inet6 fixes from jmc@@prioris.mini.pw.edu.pl
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.8 2001/06/23 05:57:04 deraadt Exp $
d98 1
a98 1
.Aq Li netinet/in.h
@


1.8
log
@ok, tmac is now fixed
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.7 2001/06/23 02:33:18 deraadt Exp $
d237 2
a238 4
.Po
which must have a value between 1 and the value returned by
.Fn inet6_rthdr_segments
.Pc
d252 1
a252 2
.Po
which must
d254 1
a254 2
.Fn inet6_rthdr_segments
.Pc
@


1.7
log
@join .%A entries; most by bk@@rt.fm
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.6 2000/05/17 14:36:40 itojun Exp $
d298 2
a299 1
.%A W. Stevens and M. Thomas
d305 2
a306 1
.%A S. Deering and R. Hinden
@


1.6
log
@nroff fixes (correct Dt, linebreak).
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.5 2000/04/18 03:01:32 aaron Exp $
d298 1
a298 2
.%A W. Stevens
.%A M. Thomas
d304 1
a304 2
.%A S. Deering
.%A R. Hinden
@


1.5
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 2
a2 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.4 2000/01/18 21:49:01 aaron Exp $
a34 3
.\"     From: @@(#)gethostbyname.3	8.4 (Berkeley) 5/25/95
.\"     KAME Id: inet6_rthdr_space.3,v 1.3 1999/12/12 14:58:04 itojun Exp
.\"
d36 1
a36 1
.Dt INET6_OPTION_SPACE 3
d64 1
a64 1
.Ft "struct in6_addr"
d71 2
a72 1
functions that the application calls to build and examine a Routing header
@


1.4
log
@Repair duplicate word occurences; (as found by a Perl script sent to us from
Tom Christiansen <tchrist@@perl.com>).
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.3 1999/12/12 14:59:40 itojun Exp $
d73 2
a74 2
functions that the application calls to build and examine a Routing
header.  Four functions build a Routing header:
d110 2
a111 1
of segments must be between 1 and 23, inclusive.  The return value
@


1.3
log
@sync KAME rcsid.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.2 1999/12/12 14:57:20 itojun Exp $
d316 1
a316 1
The functions are
@


1.2
log
@inet6_rthdr_reverse() is not available yet.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_rthdr_space.3,v 1.1 1999/12/11 08:09:11 itojun Exp $
d35 1
a35 1
.\"     KAME Id: inet6_rthdr_space.3,v 1.1 1999/12/10 04:48:55 itojun Exp
@


1.1
log
@add inet6_option_* and inet6_rthdr_*.
increase shlib minor.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d323 3
@

