head	1.26;
access;
symbols
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.4
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.2
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.21.0.22
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.20
	OPENBSD_5_0:1.21.0.18
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.16
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.14
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.10
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.12
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.8
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.6
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.18.0.8
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.6
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.4
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5;
locks; strict;
comment	@.\" @;


1.26
date	2014.06.11.19.54.36;	author chrisz;	state dead;
branches;
next	1.25;
commitid	xZpr0gBWl7iTINUS;

1.25
date	2014.06.11.16.59.47;	author chrisz;	state Exp;
branches;
next	1.24;
commitid	eCVZBBFwEoAYGCDT;

1.24
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.23;

1.23
date	2012.09.27.11.31.58;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2012.08.21.16.35.16;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.31.19.19.30;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2006.12.09.14.40.15;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2006.12.09.01.12.28;	author itojun;	state Exp;
branches;
next	1.18;

1.18
date	2005.01.11.17.45.41;	author jaredy;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.07.10.00.20;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.06.10.50.40;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.06.03.50.46;	author itojun;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.20.03.26.43;	author itojun;	state dead;
branches;
next	1.13;

1.13
date	2003.08.08.09.26.02;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.30.21.37.59;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.01.19.17.37;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.18.23.53.49;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.23.05.57.04;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.23.02.33.18;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.17.14.36.40;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.15.02.15.23;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.12.21.48.01;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.28.22.44.26;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.18.21.49.01;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	99.12.11.08.09.11;	author itojun;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Really remove the obsolete manpages left by earlier commit
which just emptied the file but didn't remove it.
@
text
@@


1.25
log
@Remove manpages about deprecated RFC2292 ancillary data convenience functions.
They are obsoleted by the RFC3542 api.

ok mpi@@
@
text
@@


1.24
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@a0 442
.\"	$OpenBSD: inet6_option_space.3,v 1.23 2012/09/27 11:31:58 jmc Exp $
.\"	$KAME: inet6_option_space.3,v 1.11 2005/01/05 03:00:44 itojun Exp $
.\"
.\" Copyright (C) 2004 WIDE Project.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the project nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: September 27 2012 $
.Dt INET6_OPTION_SPACE 3
.Os
.\"
.Sh NAME
.Nm inet6_option_space ,
.Nm inet6_option_init ,
.Nm inet6_option_append ,
.Nm inet6_option_alloc ,
.Nm inet6_option_next ,
.Nm inet6_option_find
.Nd IPv6 Hop-by-Hop and Destination Option Manipulation
.\"
.Sh SYNOPSIS
.In sys/types.h
.In netinet/in.h
.Ft "int"
.Fn inet6_option_space "int nbytes"
.Ft "int"
.Fn inet6_option_init "void *bp" "struct cmsghdr **cmsgp" "int type"
.Ft "int"
.Fn inet6_option_append "struct cmsghdr *cmsg" "const u_int8_t *typep" "int multx" "int plusy"
.Ft "u_int8_t *"
.Fn inet6_option_alloc "struct cmsghdr *cmsg" "int datalen" "int multx" "int plusy"
.Ft "int"
.Fn inet6_option_next "const struct cmsghdr *cmsg" "u_int8_t **tptrp"
.Ft "int"
.Fn inet6_option_find "const struct cmsghdr *cmsg" "u_int8_t **tptrp" "int type"
.\"
.Sh DESCRIPTION
.\"
Note:
RFC 2292 has been superseded by RFC 3542.
The use of functions described in this page is deprecated.
See
.Xr inet6_opt_init 3 .
.Pp
Manipulating and parsing IPv6's Hop-by-Hop and Destination options is
complicated by the need to properly align and pad data as well as the
need to manipulate ancillary information that is not part of the data
stream.
RFC 2292 defines a set of functions, which are implemented as
part of the Kame libraries, to help developers create, change,
and parse Hop-by-Hop and Destination options.
All of the prototypes
for the option functions are defined in the
.In netinet/in.h
header file.
.\"
.Ss inet6_option_space
In order to determine the amount of space necessary to hold any option
the
.Fn inet6_option_space
function is called.
It returns the number of bytes required to hold
an option when it is stored as ancillary data, including the
.Li cmsghdr
structure at the beginning, and any necessary padding at the end.
The
.Fa nbytes
argument indicates the size of the structure defining the option,
and must include any pad bytes at the beginning (the value
.Li y
in the alignment term
.Dq Li "xn + y" ) ,
the type byte, the length byte, and the option data.
.Pp
Note: If multiple options are stored in a single ancillary data
object, which is the recommended technique, the
.Fn inet6_option_space
function overestimates the amount of space required by the size of
.Li N-1
.Li cmsghdr
structures, where
.Li N
is the number of options to be stored in the object.
Usually this has
no impact because it is assumed that most Hop-by-Hop and Destination
option headers carry only one option as indicated in appendix B of RFC 2460.
.\"
.Ss inet6_option_init
The
.Fn inet6_option_init
function is called to initialize any ancillary data object that will contain
a Hop-by-Hop or Destination option.
It returns
.Li 0
on success and
.Li \-1
when an error occurs.
.Pp
The
.Fa bp
argument points to a previously allocated area of memory which must be
large enough to contain all the arguments that the application intends
to add later via the
.Fn inet6_option_append
and
.Fn inet6_option_alloc
routines.
.Pp
The
.Fa cmsgp
argument is a pointer to a pointer to a
.Li cmsghdr
structure.
The
.Fa *cmsgp
argument
points to a
.Li cmsghdr
structure which is constructed by this function and stored in the
area of memory pointed to by
.Fa bp .
.Pp
The
.Fa type
is either
.Dv IPV6_HOPOPTS
or
.Dv IPV6_DSTOPTS
and is stored in the
.Li cmsg_type
member of the
.Li cmsghdr
structure mentioned above.
.\"
.Ss inet6_option_append
This function appends a Hop-by-Hop option or a Destination option into
an ancillary data object previously initialized by a call to
.Fn inet6_option_init .
The
.Fn inet6_option_append
function returns
.Li 0
if it succeeds or
.Li \-1
when an error occurs.
.Pp
The
.Fa cmsg
argument is a pointer to the
.Li cmsghdr
structure that was initialized by a call to
.Fn inet6_option_init .
.Pp
The
.Fa typep
argument is a pointer to the 8-bit option type.
All options are
encoded as type-length-value tuples and it is assumed that
the
.Fa typep
field is immediately followed by the 8-bit option data length field,
which is then followed by the option data.
.Pp
The option types of
.Li 0
and
.Li 1
are reserved for the
.Li Pad1
and
.Li PadN
options respectively.
All other values from
.Li 2
through
.Li 255
are available for applications to use.
.Pp
The option data length, since it is stored in 8 bites, must have a
value between
.Li 0
and
.Li 255 ,
inclusive.
.Pp
The
.Fa multx
argument
is the value
.Li x
in the alignment term
.Dq Li xn + y
and indicates the byte alignment necessary for the data.
Alignments may be specified as
.Li 1 ,
.Li 2 ,
.Li 4 ,
or
.Li 8
bytes, which is no alignment, 16-bit, 32-bit and 64-bit alignments
respectively.
.Pp
The
.Fa plusy
argument
is the value
.Li y
in the alignment term
.Dq Li xn + y
and must have a value between
.Li 0
and
.Li 7 ,
inclusive, indicating the amount of padding that is necessary for an
option.
.\"
.Ss inet6_option_alloc
The
.Fn inet6_option_alloc
function appends a Hop-by-Hop option or a Destination option into an
ancillary data object that has previously been initialized by a call to
.Fn inet6_option_init .
A successful call to the
.Fn inet6_option_alloc
function returns a pointer to the 8-bit option type field,
which is at the beginning of the allocated region.
.Fn inet6_option_alloc
returns
.Dv NULL
when an error has occurred.
.Pp
The difference between the
.Fn inet6_option_alloc
and
.Fn inet6_option_append
functions is that the latter copies the contents of a previously built
option into the ancillary data object while the former returns a
pointer to the place in the data object where the option's TLV must
then be built by the application.
.Pp
The
.Fa cmsg
argument is a pointer to a
.Li cmsghdr
structure that was initialized by
.Fn inet6_option_init .
.Pp
The
.Fa datalen
argument is the value of the option data length byte for this option.
This value is required as an argument to allow the function to
determine if padding must be appended at the end of the option.
(The
.Fn inet6_option_append
function does not need a data length argument
since the option data length must already be stored by the caller.)
.Pp
The
.Fa multx
and
.Fa plusy
arguments
are identical to the arguments of the same name described in the
.Fn inet6_option_init
function above.
.\"
.Ss inet6_option_next
The
.Fn inet6_option_next
function is used to process Hop-by-Hop and Destination options that
are present in an ancillary data object.
When an option remains to
be processed, the return value of the
.Fn inet6_option_next
function is
.Li 0
and the
.Fa *tptrp
argument points to the 8-bit option type field, which is followed by
the 8-bit option data length, and then the option data.
When no more
options remain to be processed, the return value is
.Li \-1
and
.Fa *tptrp
is
.Dv NULL .
When an error occurs, the return value is
.Li \-1 ,
but the
.Fa *tptrp
argument is not
.Dv NULL .
This set of return values allows a program to easily loop through all
the options in an ancillary data object, checking for the error and
end of stream conditions along the way.
.Pp
When a valid option is returned, the
.Fa cmsg
argument points to a
.Li cmsghdr
where the
.Li cmsg_level
element equals
.Dv IPPROTO_IPV6
and the
.Li cmsg_type
element is either
.Dv IPV6_HOPOPTS
or
.Dv IPV6_DSTOPTS .
.Pp
The
.Fa tptrp
argument is a pointer to a pointer to an 8-bit byte and
.Fa *tptrp
is used by the function to remember its place in the ancillary data
object each time the function is called.
When the
.Fn inet6_option_next
function is called for the first time on a given ancillary data object,
.Fa *tptrp
must be set to
.Dv NULL .
.Pp
Each time the function returns success,
the
.Fa *tptrp
argument points to the 8-bit option type field for the next option to
be processed.
.\"
.Ss inet6_option_find
The
.Fn inet6_option_find
function allows an application to search for a particular option type
in an ancillary data object.
The
.Fa cmsg
argument is a pointer to a
.Li cmsghdr
structure in which the
.Li cmsg_level
element equals
.Dv IPPROTO_IPV6
and the
.Li cmsg_type
element is either
.Dv IPV6_HOPOPTS
or
.Dv IPV6_DSTOPTS .
.Pp
The
.Fa tptrp
argument is handled exactly as in the
.Fn inet6_option_next
function described above.
.Pp
The
.Fn inet6_option_find
function starts searching for an option of the specified type
beginning after the value of
.Fa *tptrp .
.\"
.Sh EXAMPLES
RFC 2292 gives comprehensive examples in chapter 6.
.\"
.Sh DIAGNOSTICS
The
.Fn inet6_option_init
and
.Fn inet6_option_append
functions return
.Li 0
on success or
.Li \-1
on an error.
.Pp
The
.Fn inet6_option_alloc
function returns
.Dv NULL
on an error.
.Pp
When
.Fn inet6_option_next
or
.Fn inet6_option_find
detect an error they return
.Li \-1 ,
setting
.Fa *tptrp
to a non
.Dv NULL
value.
.\"
.Sh SEE ALSO
.Xr inet6 4 ,
.Xr ip6 4
.\"
.Sh STANDARDS
.Rs
.%A W. Stevens
.%A M. Thomas
.%D February 1998
.%R RFC 2292
.%T Advanced Sockets API for IPv6
.Re
.Pp
.Rs
.%A S. Deering
.%A R. Hinden
.%D December 1998
.%R RFC 2460
.%T Internet Protocol, Version 6 (IPv6) Specification
.Re
.\"
.Sh HISTORY
This implementation first appeared in the KAME advanced networking kit.
.\"
@


1.23
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.22 2012/08/21 16:35:16 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: August 21 2012 $
d77 1
a77 1
.Aq Pa netinet/in.h
@


1.22
log
@- remove inconsistent/obsolete comments
- update rfc references
- make the Rs/Re blocks more consistent
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.21 2007/05/31 19:19:30 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
d422 2
d431 1
a438 5
.\"
.Sh STANDARDS
The functions are documented in
.Dq Advanced Sockets API for IPv6
(RFC 2292).
@


1.21
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.20 2006/12/09 14:40:15 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate$
a424 2
.%T "Advanced Sockets API for IPv6"
.%N RFC 2292
d426 2
a431 2
.%T "Internet Protocol, Version 6 (IPv6) Specification"
.%N RFC 2460
d433 2
@


1.20
log
@tweak the text on deprecated functions, after some help from tom;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.19 2006/12/09 01:12:28 itojun Exp $
d31 1
a31 1
.Dd December 23, 2004
@


1.19
log
@switch IPv6 advanced API from RFC2292 to RFC3542 (2292 is superseded by 3542).
the kernel still handles RFC2292 set/getsockopts, so that compiled binary
has no trouble running.  userland sees RFC3542 symbols only on header file
so new code has to use RFC3542 API.

bump libc shlib minor for function additions.

tested on i386/amd64 by jmc, i386 by brad. checked by deraadt.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.18 2005/01/11 17:45:41 jaredy Exp $
d62 6
a78 5
.Pp
RFC 2292 was superseded by RFC 3542.
Functions described in this document were deprecated.
See
.Xr inet6_opt_init 3 .
@


1.18
log
@more minor tweaks, ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.17 2005/01/07 10:00:20 jmc Exp $
d73 5
@


1.17
log
@clarify a sentence;
from george v. neville-neil, via itojun@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.16 2005/01/06 10:50:40 jmc Exp $
d84 1
a84 1
.Li nbytes
d120 1
a120 1
to add later via
d184 2
a185 1
.Li 1 are reserved for the
d304 3
a306 3
.Dv NULL
and when an error occurs, the return value is
.Li \-1
d321 1
a321 1
equals
d323 1
a323 1
and
d325 1
a325 1
is either
d406 1
a406 1
.Li \-1
d414 2
d437 1
a437 1
The implementation first appeared in KAME advanced networking kit.
@


1.16
log
@tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.15 2005/01/06 03:50:46 itojun Exp $
d239 4
a242 1
The
d244 1
a244 2
function returns a pointer to the 8-bit option type field that at the
beginning of the allocated the option on success, or
d246 1
a246 1
on an error.
@


1.15
log
@IPv6 manpage, wrote from scratch.  deraadt ok
@
text
@d1 1
a1 1
.\"	$OpenBSD$
a43 2
.Sh LIBRARY
.Lb libc
d66 3
a68 3
RFC2292 defines a set of functions, which are implemented as
part of the Kame libraries, to support help developers create, change,
and parse Hop-by-Hope and Destination options.
d71 1
a71 1
.In netinet/in.h
d103 1
a103 1
option headers carry only one option as indicated in appendix B of RFC2460.
d113 1
a113 1
.Li -1
d119 1
a119 1
large enough to contain all the arguments that the application indents
d157 2
a158 1
.Fn inet6_option_append function returns
d161 1
a161 1
.Li -1
d216 1
a216 1
bytes, which is no alignment, 16 bit, 32 bit and 64 bit alignments
d270 1
a270 1
since the option data length must already be stored by the caller)
d297 1
a297 1
.Li -1
d303 1
a303 1
.Li -1
d312 1
a312 1
When a valid option is returned the
d353 1
a353 1
argument is a pointer to
d371 1
a371 1
.Pa
d373 1
a373 1
.fn inet6_option_find
d378 3
d389 1
a389 1
.Li -1
d403 1
a403 1
.Li -1
d406 1
a406 1
to non
a409 3
.Sh EXAMPLES
RFC2292 gives comprehensive examples in chapter 6.
.\"
d415 1
a415 1
.%N RFC2292
d422 1
a422 1
.%N RFC2460
a425 3
.Sh HISTORY
The implementation first appeared in KAME advanced networking kit.
.\"
d429 4
a432 1
(RFC2292).
@


1.14
log
@remove manpages based on RFC.  requested by deraadt
@
text
@d1 2
a2 2
.\"	$OpenBSD: inet6_option_space.3,v 1.13 2003/08/08 09:26:02 jmc Exp $
.\"	$KAME: inet6_option_space.3,v 1.7 2000/05/17 14:32:13 itojun Exp $
d4 2
a5 2
.\" Copyright (c) 1983, 1987, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
d15 1
a15 1
.\" 3. Neither the name of the University nor the names of its contributors
d19 1
a19 1
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
d22 1
a22 1
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d31 1
a31 1
.Dd December 10, 1999
d42 1
a42 1
.Nd IPv6 Hop-by-Hop and Destination Options manipulation
d44 2
d47 2
a48 1
.Fd #include <netinet/in.h>
d64 11
a74 8
Building and parsing the Hop-by-Hop and Destination options is
complicated due to alignment constraints, padding and
ancillary data manipulation.
RFC 2292 defines a set of functions to help the application.
The function prototypes for
these functions are all in the
.Aq Pa netinet/in.h
header.
d77 2
d80 3
a82 2
returns the number of bytes required to hold an option when it is stored as
ancillary data, including the
d84 5
a88 9
structure at the beginning,
and any padding at the end
.Po
to make its size a multiple of 8 bytes
.Pc .
The argument is the size of the structure defining the option,
which must include any pad bytes at the beginning
.Po
the value
d91 1
a91 2
.Dq Li xn + y
.Pc ,
d95 3
a97 2
object, which is the recommended technique, this function
overestimates the amount of space required by the size of
d100 1
a100 2
structures,
where
d103 3
a105 4
This is of little consequence, since it is assumed that most
Hop-by-Hop option headers and Destination option headers carry only
one option
.Pq appendix B of [RFC 2460] .
d108 1
d110 2
a111 2
is called once per ancillary data object that will
contain either Hop-by-Hop or Destination options.
d114 1
a114 1
on success or
d116 1
a116 1
on an error.
d118 1
d120 3
a122 4
is a pointer to previously allocated space that will contain the
ancillary data object.
It must be large enough to contain all the
individual options to be added by later calls to
d125 2
a126 1
.Fn inet6_option_alloc .
d128 1
d130 1
a130 1
is a pointer to a pointer to a
d133 1
d135 2
a136 1
is initialized by this function to point to the
d138 2
a139 1
structure constructed by this function in the buffer pointed to by
d142 1
d147 2
a148 4
.Dv IPV6_DSTOPTS .
This
.Fa type
is stored in the
d152 1
a152 2
structure pointed to by
.Fa *cmsgp .
d155 2
a156 2
This function appends a Hop-by-Hop option or a Destination option
into an ancillary data object that has been initialized by
d158 2
a159 1
This function returns
d163 1
a163 1
on an error.
d165 1
d167 1
a167 1
is a pointer to the
d169 1
a169 2
structure that must have been
initialized by
d172 6
a178 2
is a pointer to the 8-bit option type.
It is assumed that this
d180 1
a180 5
which is then followed immediately by the option data.
The caller
initializes these three fields
.Pq the type-length-value, or TLV
before calling this function.
d182 1
a182 6
The option type must have a value from
.Li 2
to
.Li 255 ,
inclusive.
.Po
d185 1
a185 2
.Li 1
are reserved for the
d189 6
a194 2
options, respectively.
.Pc
d196 2
a197 1
The option data length must have a value between
d201 1
a201 1
inclusive, and is the length of the option data that follows.
d203 1
d205 1
d209 3
a211 2
.Dq Li xn + y .
It must have a value of
d216 3
a218 1
.Li 8 .
d220 1
d222 1
d226 2
a227 2
.Dq Li xn + y .
It must have a value between
d231 2
a232 1
inclusive.
d235 4
a238 2
This function appends a Hop-by-Hop option or a Destination option
into an ancillary data object that has been initialized by
d240 4
a243 2
This function returns a pointer to the 8-bit
option type field that starts the option on success, or
d247 3
a249 1
The difference between this function and
d251 4
a254 4
is that the latter copies the contents of a previously built option into
the ancillary data object while the current function returns a
pointer to the space in the data object where the option's TLV must
then be built by the caller.
d256 1
d258 1
a258 1
is a pointer to the
d260 1
a260 2
structure that must have been
initialized by
d263 1
d265 1
a265 1
is the value of the option data length byte for this option.
d271 1
a271 1
since the option data length must already be stored by the caller.)
d273 1
d275 1
a275 11
is the value
.Li x
in the alignment term
.Dq Li xn + y .
It must have a value of
.Li 1 ,
.Li 2 ,
.Li 4 ,
or
.Li 8 .
.Pp
d277 4
a280 9
is the value
.Li y
in the alignment term
.Dq Li xn + y .
It must have a value between
.Li 0
and
.Li 7 ,
inclusive.
d283 8
a290 4
This function processes the next Hop-by-Hop option or Destination
option in an ancillary data object.
If another option remains to be
processed, the return value of the function is
d292 1
a292 1
and
d294 4
a297 6
points to
the 8-bit option type field
(which is followed by the 8-bit option
data length, followed by the option data).
If no more options remain
to be processed, the return value is
d302 2
a303 2
.Dv NULL .
If an error occurs, the return value is
d305 1
a305 1
and
d307 1
a307 1
is not
d309 3
d313 1
d315 1
a315 1
is a pointer to
d317 1
a317 1
structure of which
d323 1
a323 1
equals either
d328 1
d330 1
a330 1
is a pointer to a pointer to an 8-bit byte and
d332 5
a336 5
is used
by the function to remember its place in the ancillary data object
each time the function is called.
The first time this function is
called for a given ancillary data object,
d341 2
a342 1
Each time this function returns success,
d344 2
a345 2
points to the 8-bit
option type field for the next option to be processed.
d348 5
a352 5
This function is similar to the previously described
.Fn inet6_option_next
function, except this function lets the caller
specify the option type to be searched for, instead of always
returning the next option in the ancillary data object.
d354 1
a354 2
is a
pointer to
d356 1
a356 1
structure of which
d358 1
a358 1
equals
d360 1
a360 1
and
d362 1
a362 1
equals either
d367 1
d369 7
a375 12
is a pointer to a pointer to an 8-bit byte and
.Fa *tptrp
is used
by the function to remember its place in the ancillary data object
each time the function is called.
The first time this function is
called for a given ancillary data object,
.Fa *tptrp
must be set to
.Dv NULL .
.Pp
This function starts searching for an option of the specified type
a377 23
If an option of the specified
type is located, this function returns
.Li 0
and
.Fa *tptrp
points to the 8-
bit option type field for the option of the specified type.
If an
option of the specified type is not located, the return value is
.Li -1
and
.Fa *tptrp
is
.Dv NULL .
If an error occurs, the return value is
.Li -1
and
.Fa *tptrp
is not
.Dv NULL .
.\"
.Sh EXAMPLES
RFC 2292 gives comprehensive examples in chapter 6.
d380 1
d384 1
a384 1
return
d390 1
d392 1
a392 1
returns
d396 1
a396 1
On errors,
d398 1
a398 1
and
d400 1
a400 1
return
d408 3
d416 1
a416 1
.%N RFC 2292
d423 1
a423 1
.%N RFC 2460
d427 3
d431 1
a431 2
The functions
are documented in
d433 1
a433 4
.Pq RFC 2292 .
.\"
.Sh HISTORY
The implementation first appeared in KAME advanced networking kit.
a434 2
.Sh BUGS
The text was shamelessly copied from RFC 2292.
@


1.13
log
@refer to RFCs consistently (RFC XXXX);
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.12 2003/06/02 20:18:35 millert Exp $
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.11 2003/05/30 21:37:59 jmc Exp $
d64 1
a64 1
RFC2292 defines a set of functions to help the application.
d102 1
a102 1
.Pq appendix B of [RFC-2460] .
d389 1
a389 1
RFC2292 gives comprehensive examples in chapter 6.
d423 1
a423 1
.%N RFC2292
d430 1
a430 1
.%N RFC2460
d438 1
a438 1
.Pq RFC2292 .
d444 1
a444 1
The text was shamelessly copied from RFC2292.
@


1.11
log
@- section reorder
- macro cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.10 2003/05/01 19:17:37 jmc Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.9 2003/01/18 23:53:49 deraadt Exp $
d57 1
a57 1
.Fn inet6_option_alloc "struct cmsghdr *cmsg" "int datalen" "int multx" "int plusy";
d392 3
a421 3
.Sh EXAMPLES
RFC2292 gives comprehensive examples in chapter 6.
.\"
a437 3
.Sh HISTORY
The implementation first appeared in KAME advanced networking kit.
.\"
d443 3
@


1.9
log
@inet6 fixes from jmc@@prioris.mini.pw.edu.pl
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.8 2001/06/23 05:57:04 deraadt Exp $
d71 1
a71 1
.Aq Li netinet/in.h
d251 1
a251 1
.Fn inet6_option_append 
@


1.8
log
@ok, tmac is now fixed
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.7 2001/06/23 02:33:18 deraadt Exp $
d66 1
a66 1
complicated due to alignment constranints, padding and
d250 2
a251 3
.Po
The
.Fn inet6_option_append
d253 1
a253 2
since the option data length must already be stored by the caller.
.Pc
d288 2
a289 4
.Po
which is followed by the 8-bit option
data length, followed by the option data
.Pc .
d367 1
a367 1
.Pa
@


1.7
log
@join .%A entries; most by bk@@rt.fm
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.6 2000/05/17 14:36:40 itojun Exp $
d428 2
a429 1
.%A W. Stevens and M. Thomas
d435 2
a436 1
.%A S. Deering and R. Hinden
@


1.6
log
@nroff fixes (correct Dt, linebreak).
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.5 2000/04/15 02:15:23 aaron Exp $
d428 1
a428 2
.%A W. Stevens
.%A M. Thomas
d434 1
a434 2
.%A S. Deering
.%A R. Hinden
@


1.5
log
@Mostly punctuation fixes.
@
text
@d1 2
a2 1
.\"	$OpenBSD: inet6_option_space.3,v 1.4 2000/04/12 21:48:01 aaron Exp $
a33 3
.\"
.\"     From: @@(#)gethostbyname.3	8.4 (Berkeley) 5/25/95
.\"     KAME Id: inet6_option_space.3,v 1.2 1999/12/10 04:46:16 itojun Exp
@


1.4
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.3 2000/03/28 22:44:26 deraadt Exp $
d183 2
a184 1
.Li 255 , inclusive.
d410 2
a411 1
.Dv NULL on an error.
@


1.3
log
@typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.2 2000/01/18 21:49:01 aaron Exp $
d334 1
a334 1
.Pp 
d419 1
a419 1
to non 
@


1.2
log
@Repair duplicate word occurences; (as found by a Perl script sent to us from
Tom Christiansen <tchrist@@perl.com>).
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6_option_space.3,v 1.1 1999/12/11 08:09:11 itojun Exp $
d53 1
a53 1
.Fn inet6_options_space "int nbytes"
@


1.1
log
@add inet6_option_* and inet6_rthdr_*.
increase shlib minor.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d446 1
a446 1
The functions are
@

