head	1.18;
access;
symbols
	OPENBSD_5_4:1.17.0.34
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.32
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.30
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.28
	OPENBSD_5_0:1.17.0.26
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.24
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.22
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.18
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.20
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.16
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.14
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.12
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.10
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.8
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.6
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.4
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.14.0.8
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.10.0.4
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.8.0.18
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.16
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.14
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.12
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.10
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.8
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.6
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.4
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2013.11.12.20.37.16;	author eric;	state dead;
branches;
next	1.17;

1.17
date	2005.08.06.20.30.04;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.30.02.58.28;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.25.13.24.12;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.02.20.18.36;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.28.04.58.00;	author marc;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.28.03.19.38;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.26.06.01.16;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.31.22.02.18;	author jakob;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.11.10.06.00;	author itojun;	state Exp;
branches;
next	1.8;

1.8
date	97.04.13.22.37.21;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	97.04.13.21.30.46;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.03.13.19.07.39;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	96.12.14.06.49.39;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.09.15.09.31.20;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.29.47;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.02.19.19.53.27;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.04;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@remove dead files

ok deraadt@@
@
text
@/*	$OpenBSD: res_mkquery.c,v 1.17 2005/08/06 20:30:04 espie Exp $	*/

/*
 * ++Copyright++ 1985, 1993
 * -
 * Copyright (c) 1985, 1993
 *    The Regents of the University of California.  All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * -
 * Portions Copyright (c) 1993 by Digital Equipment Corporation.
 * 
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies, and that
 * the name of Digital Equipment Corporation not be used in advertising or
 * publicity pertaining to distribution of the document or software without
 * specific, written prior permission.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL EQUIPMENT
 * CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 * -
 * --Copyright--
 */

#include <sys/types.h>
#include <sys/param.h>
#include <netinet/in.h>
#include <arpa/nameser.h>

#include <stdio.h>
#include <netdb.h>
#include <resolv.h>
#include <string.h>

#include "thread_private.h"

/*
 * Form all types of queries.
 * Returns the size of the result or -1.
 */
/* ARGSUSED */
int
res_mkquery(int op,
    const char *dname,		/* opcode of query */
    int class,			/* domain name */
    int type,			/* class and type of query */
    const u_char *data,		/* resource record data */
    int datalen,		/* length of data */
    const u_char *newrr_in,	/* new rr for modify or append */
    u_char *buf,		/* buffer to put query */
    int buflen)			/* size of buffer */
{
	struct __res_state *_resp = _THREAD_PRIVATE(_res, _res, &_res);
	HEADER *hp;
	u_char *cp, *ep;
	int n;
	u_char *dnptrs[20], **dpp, **lastdnptr;

	if (_res_init(0) == -1) {
		h_errno = NETDB_INTERNAL;
		return (-1);
	}
#ifdef DEBUG
	if (_resp->options & RES_DEBUG)
		printf(";; res_mkquery(%d, %s, %d, %d)\n",
		       op, dname, class, type);
#endif
	/*
	 * Initialize header fields.
	 *
	 * A special random number generator is used to create non predictable
	 * and non repeating ids over a long period. It also avoids reuse
	 * by switching between two distinct number cycles.
	 */

	if ((buf == NULL) || (buflen < HFIXEDSZ))
		return (-1);
	bzero(buf, HFIXEDSZ);
	hp = (HEADER *) buf;
	_resp->id = res_randomid();
	hp->id = htons(_resp->id);
	hp->opcode = op;
	hp->rd = (_resp->options & RES_RECURSE) != 0;
	hp->rcode = NOERROR;
	cp = buf + HFIXEDSZ;
	ep = buf + buflen;
	dpp = dnptrs;
	*dpp++ = buf;
	*dpp++ = NULL;
	lastdnptr = dnptrs + sizeof dnptrs / sizeof dnptrs[0];
	/*
	 * perform opcode specific processing
	 */
	switch (op) {
	case QUERY:	/*FALLTHROUGH*/
	case NS_NOTIFY_OP:
		if (ep - cp < QFIXEDSZ)
			return (-1);
		if ((n = dn_comp(dname, cp, ep - cp - QFIXEDSZ, dnptrs,
		    lastdnptr)) < 0)
			return (-1);
		cp += n;
		__putshort(type, cp);
		cp += INT16SZ;
		__putshort(class, cp);
		cp += INT16SZ;
		hp->qdcount = htons(1);
		if (op == QUERY || data == NULL)
			break;
		/*
		 * Make an additional record for completion domain.
		 */
		if (ep - cp < RRFIXEDSZ)
			return (-1);
		n = dn_comp((char *)data, cp, ep - cp - RRFIXEDSZ, dnptrs,
		    lastdnptr);
		if (n < 0)
			return (-1);
		cp += n;
		__putshort(T_NULL, cp);
		cp += INT16SZ;
		__putshort(class, cp);
		cp += INT16SZ;
		__putlong(0, cp);
		cp += INT32SZ;
		__putshort(0, cp);
		cp += INT16SZ;
		hp->arcount = htons(1);
		break;

	case IQUERY:
		/*
		 * Initialize answer section
		 */
		if (ep - cp < 1 + RRFIXEDSZ + datalen)
			return (-1);
		*cp++ = '\0';	/* no domain name */
		__putshort(type, cp);
		cp += INT16SZ;
		__putshort(class, cp);
		cp += INT16SZ;
		__putlong(0, cp);
		cp += INT32SZ;
		__putshort(datalen, cp);
		cp += INT16SZ;
		if (datalen) {
			bcopy(data, cp, datalen);
			cp += datalen;
		}
		hp->ancount = htons(1);
		break;

	default:
		return (-1);
	}
	return (cp - buf);
}

/* attach OPT pseudo-RR, as documented in RFC2671 (EDNS0). */
int
res_opt(int n0,
	u_char *buf,		/* buffer to put query */
	int buflen,		/* size of buffer */
	int anslen)		/* answer buffer length */
{
	struct __res_state *_resp = _THREAD_PRIVATE(_res, _res, &_res);
	HEADER *hp;
	u_char *cp, *ep;

	hp = (HEADER *) buf;
	cp = buf + n0;
	ep = buf + buflen;

	if (ep - cp < 1 + RRFIXEDSZ)
		return -1;

	*cp++ = 0;	/* "." */

	__putshort(T_OPT, cp);	/* TYPE */
	cp += INT16SZ;
	if (anslen > 0xffff)
		anslen = 0xffff;		/* limit to 16bit value */
	__putshort(anslen & 0xffff, cp);	/* CLASS = UDP payload size */
	cp += INT16SZ;
	*cp++ = NOERROR;	/* extended RCODE */
	*cp++ = 0;		/* EDNS version */
	if (_resp->options & RES_USE_DNSSEC) {
#ifdef DEBUG
		if (_resp->options & RES_DEBUG)
			printf(";; res_opt()... ENDS0 DNSSEC OK\n");
#endif /* DEBUG */
		__putshort(DNS_MESSAGEEXTFLAG_DO, cp);	/* EDNS Z field */
		cp += INT16SZ;
	} else {
		__putshort(0, cp);	/* EDNS Z field */
		cp += INT16SZ;
	}
	__putshort(0, cp);	/* RDLEN */
	cp += INT16SZ;
	hp->arcount = htons(ntohs(hp->arcount) + 1);

	return cp - buf;
}
@


1.17
log
@zap rcsid.
split functions off res_debug.c so that getnetnamadr.c does not pull it
all when it's used.

okay deraadt@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.16 2005/03/30 02:58:28 tedu Exp $	*/
@


1.16
log
@make the resolver stat resolv.conf and update if it changes.
useful feedback and ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.15 2005/03/25 13:24:12 otto Exp $	*/
a52 9

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)res_mkquery.c	8.1 (Berkeley) 6/4/93";
static char rcsid[] = "$From: res_mkquery.c,v 8.5 1996/08/27 08:33:28 vixie Exp $";
#else
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.15 2005/03/25 13:24:12 otto Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.15
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.14 2003/06/02 20:18:36 millert Exp $	*/
d59 1
a59 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.14 2003/06/02 20:18:36 millert Exp $";
d97 1
a97 1
	if ((_resp->options & RES_INIT) == 0 && res_init() == -1) {
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.13 2003/01/28 04:58:00 marc Exp $	*/
d59 1
a59 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.13 2003/01/28 04:58:00 marc Exp $";
d81 9
a89 9
res_mkquery(op, dname, class, type, data, datalen, newrr_in, buf, buflen)
	int op;			/* opcode of query */
	const char *dname;	/* domain name */
	int class, type;	/* class and type of query */
	const u_char *data;	/* resource record data */
	int datalen;		/* length of data */
	const u_char *newrr_in;	/* new rr for modify or append */
	u_char *buf;		/* buffer to put query */
	int buflen;		/* size of buffer */
d92 3
a94 3
	register HEADER *hp;
	register u_char *cp, *ep;
	register int n;
d199 4
a202 5
res_opt(n0, buf, buflen, anslen)
	int n0;
	u_char *buf;		/* buffer to put query */
	int buflen;		/* size of buffer */
	int anslen;		/* answer buffer length */
d205 2
a206 2
	register HEADER *hp;
	register u_char *cp, *ep;
@


1.13
log
@
thread safer libc (note: safer, not safe)
Access to the global _res structure replaced by pointers to a
per thread instance.  If unthreaded the pointer is to the
global structure.

Also replaced a 64k stack array with malloc-ed memory so
threaded aps (with a default 64k stack) have a chance at working.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.12 2002/08/28 03:19:38 itojun Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 * 	This product includes software developed by the University of
 * 	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d59 1
a59 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.12 2002/08/28 03:19:38 itojun Exp $";
@


1.12
log
@Limit UDP payload size for EDNS0 to 0xffff, not use lower 16bit value.
from onoe@@sm.sony.co.jp
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.11 2002/06/26 06:01:16 itojun Exp $	*/
d63 1
a63 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.11 2002/06/26 06:01:16 itojun Exp $";
d77 2
d95 1
d101 1
a101 1
	if ((_res.options & RES_INIT) == 0 && res_init() == -1) {
d106 1
a106 1
	if (_res.options & RES_DEBUG)
d122 2
a123 2
	_res.id = res_randomid();
	hp->id = htons(_res.id);
d125 1
a125 1
	hp->rd = (_res.options & RES_RECURSE) != 0;
d209 1
d230 1
a230 1
	if (_res.options & RES_USE_DNSSEC) {
d232 1
a232 1
		if (_res.options & RES_DEBUG)
@


1.11
log
@correct bad practice in the code - it uses two changing variables
to manage buffer (buf and buflen).  we eliminate buflen and use
fixed point (ep) as the ending pointer.

this fix is NOT critical.
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.10 2001/07/31 22:02:18 jakob Exp $	*/
d63 1
a63 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.10 2001/07/31 22:02:18 jakob Exp $";
d220 2
@


1.10
log
@add support for EDNS0 extended flag DNSSEC OK (aka DO). ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.9 2001/06/11 10:06:00 itojun Exp $	*/
d63 1
a63 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.9 2001/06/11 10:06:00 itojun Exp $";
d94 1
a94 1
	register u_char *cp;
d125 1
a125 1
	buflen -= HFIXEDSZ;
d136 1
a136 1
		if ((buflen -= QFIXEDSZ) < 0)
d138 2
a139 1
		if ((n = dn_comp(dname, cp, buflen, dnptrs, lastdnptr)) < 0)
a141 1
		buflen -= n;
d152 4
a155 2
		buflen -= RRFIXEDSZ;
		n = dn_comp((char *)data, cp, buflen, dnptrs, lastdnptr);
a158 1
		buflen -= n;
d174 1
a174 1
		if (buflen < 1 + RRFIXEDSZ + datalen)
d207 1
a207 1
	register u_char *cp;
d211 1
a211 1
	buflen -= n0;
d213 1
a213 1
	if (buflen < 1 + RRFIXEDSZ)
a216 1
	buflen--;
a237 1
	buflen -= RRFIXEDSZ;
@


1.9
log
@support EDNS0 (RFC2671) buffer size notification on DNS queries.
"options edns0" in /etc/resolv.conf will enable the behavior.  no behavior
change if you don't have the line.  see resolv.conf(5) for more details.

EDNS0 is useful for avoiding TCP DNS queries/replies on larger DNS responses.
also, draft-ietf-dnsext-message-size-* plans to mandate EDNS0 support for DNS
clients that support IPv6 transport.
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.8 1997/04/13 22:37:21 provos Exp $	*/
d63 1
a63 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.8 1997/04/13 22:37:21 provos Exp $";
d224 11
a234 2
	__putshort(0, cp);	/* MBZ */
	cp += INT16SZ;
@


1.8
log
@fouled up a tiny bit
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.7 1997/04/13 21:30:46 provos Exp $	*/
d63 1
a63 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.7 1997/04/13 21:30:46 provos Exp $";
d195 37
@


1.7
log
@the before mentioned random number generator.
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.6 1997/03/13 19:07:39 downsj Exp $	*/
d63 1
a63 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.6 1997/03/13 19:07:39 downsj Exp $";
d119 2
a120 1
	hp->id = htons(_res.id=res_randomid());
@


1.6
log
@Integrate BIND 4.9.5 resolver and associated routines.

Includes the DNS aware getnetby*() routines and IPv6 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: res_mkquery.c,v 1.1 1997/03/12 10:42:10 downsj Exp $	*/
d63 1
a63 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.1 1997/03/12 10:42:10 downsj Exp $";
d109 4
d114 1
d119 1
a119 1
	hp->id = htons(++_res.id);
@


1.5
log
@Clean up lint and compile warnings
@
text
@d1 5
a5 1
/*-
d7 2
a8 2
 *	The Regents of the University of California.  All rights reserved.
 *
d19 2
a20 2
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
d24 1
a24 1
 *
d59 6
a64 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.4 1996/09/15 09:31:20 tholo Exp $";
d67 1
d71 3
a74 1
#include <stdio.h>
d85 1
a85 1
	const char *dname;		/* domain name */
d87 1
a87 1
	const u_char *data;		/* resource record data */
d96 1
a96 4
#ifdef ALLOW_UPDATES
	struct rrec *newrr = (struct rrec *) newrr_in;
#endif /* ALLOW_UPDATES */
	u_char *dnptrs[10], **dpp, **lastdnptr;
d98 4
d110 3
a112 3
	if ((buf == NULL) || (buflen < sizeof(HEADER)))
		return(-1);
	bzero(buf, sizeof(HEADER));
a115 1
	hp->pr = (_res.options & RES_PRIMARY) != 0;
d118 2
a119 2
	cp = buf + sizeof(HEADER);
	buflen -= sizeof(HEADER);
d123 1
a123 1
	lastdnptr = dnptrs + sizeof(dnptrs)/sizeof(dnptrs[0]);
d128 1
a128 1
	case QUERY:
d131 1
a131 1
			return(-1);
d137 1
a137 1
		cp += sizeof(u_int16_t);
d139 1
a139 1
		cp += sizeof(u_int16_t);
d147 2
a148 1
		if ((n = dn_comp((const char *)data, cp, buflen, dnptrs, lastdnptr)) < 0)
d153 1
a153 1
		cp += sizeof(u_int16_t);
d155 1
a155 1
		cp += sizeof(u_int16_t);
d157 1
a157 1
		cp += sizeof(u_int32_t);
d159 1
a159 1
		cp += sizeof(u_int16_t);
d171 1
a171 1
		cp += sizeof(u_int16_t);
d173 1
a173 1
		cp += sizeof(u_int16_t);
d175 1
a175 1
		cp += sizeof(u_int32_t);
d177 1
a177 1
		cp += sizeof(u_int16_t);
a184 58
#ifdef ALLOW_UPDATES
	/*
	 * For UPDATEM/UPDATEMA, do UPDATED/UPDATEDA followed by UPDATEA
	 * (Record to be modified is followed by its replacement in msg.)
	 */
	case UPDATEM:
	case UPDATEMA:

	case UPDATED:
		/*
		 * The res code for UPDATED and UPDATEDA is the same; user
		 * calls them differently: specifies data for UPDATED; server
		 * ignores data if specified for UPDATEDA.
		 */
	case UPDATEDA:
		buflen -= RRFIXEDSZ + datalen;
		if ((n = dn_comp(dname, cp, buflen, dnptrs, lastdnptr)) < 0)
			return (-1);
		cp += n;
		__putshort(type, cp);
                cp += sizeof(u_int16_t);
                __putshort(class, cp);
                cp += sizeof(u_int16_t);
		__putlong(0, cp);
		cp += sizeof(u_int32_t);
		__putshort(datalen, cp);
                cp += sizeof(u_int16_t);
		if (datalen) {
			bcopy(data, cp, datalen);
			cp += datalen;
		}
		if ( (op == UPDATED) || (op == UPDATEDA) ) {
			hp->ancount = htons(0);
			break;
		}
		/* Else UPDATEM/UPDATEMA, so drop into code for UPDATEA */

	case UPDATEA:	/* Add new resource record */
		buflen -= RRFIXEDSZ + datalen;
		if ((n = dn_comp(dname, cp, buflen, dnptrs, lastdnptr)) < 0)
			return (-1);
		cp += n;
		__putshort(newrr->r_type, cp);
                cp += sizeof(u_int16_t);
                __putshort(newrr->r_class, cp);
                cp += sizeof(u_int16_t);
		__putlong(0, cp);
		cp += sizeof(u_int32_t);
		__putshort(newrr->r_size, cp);
                cp += sizeof(u_int16_t);
		if (newrr->r_size) {
			bcopy(newrr->r_data, cp, newrr->r_size);
			cp += newrr->r_size;
		}
		hp->ancount = htons(0);
		break;

#endif /* ALLOW_UPDATES */
@


1.4
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d55 1
a55 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.3 1996/08/19 08:29:47 tholo Exp $";
d135 1
a135 1
		if ((n = dn_comp(data, cp, buflen, dnptrs, lastdnptr)) < 0)
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d55 1
a55 1
static char rcsid[] = "$OpenBSD: res_mkquery.c,v 1.6 1996/02/02 15:22:32 mrg Exp $";
d69 1
d84 1
d86 1
@


1.2
log
@netbsd: bind 4.9.3
@
text
@a0 2
/*	$NetBSD: res_mkquery.c,v 1.6 1996/02/02 15:22:32 mrg Exp $	*/

d55 1
a55 6
#if 0
static char sccsid[] = "@@(#)res_mkquery.c	8.1 (Berkeley) 6/4/93";
static char rcsid[] = "$Id: res_mkquery.c,v 8.3 1995/06/29 09:26:28 vixie Exp ";
#else
static char rcsid[] = "$NetBSD: res_mkquery.c,v 1.6 1996/02/02 15:22:32 mrg Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: res_mkquery.c,v 1.5 1995/02/25 06:20:58 cgd Exp $	*/
d59 1
a59 1
static char rcsid[] = "$Id: res_mkquery.c,v 4.9.1.2 1993/05/17 10:00:01 vixie Exp ";
d61 1
a61 1
static char rcsid[] = "$NetBSD: res_mkquery.c,v 1.5 1995/02/25 06:20:58 cgd Exp $";
d76 1
d81 1
a81 1
	const char *data;		/* resource record data */
d83 2
a84 2
	const char *newrr_in;	/* new rr for modify or append */
	char *buf;		/* buffer to put query */
d88 1
a88 1
	register char *cp;
d91 1
a91 1
	char *dnptrs[10], **dpp, **lastdnptr;
d121 1
d124 1
a124 2
		if ((n = dn_comp((u_char *)dname, (u_char *)cp, buflen,
		    (u_char **)dnptrs, (u_char **)lastdnptr)) < 0)
d128 1
a128 1
		__putshort(type, (u_char *)cp);
d130 1
a130 1
		__putshort(class, (u_char *)cp);
d139 1
a139 2
		if ((n = dn_comp((u_char *)data, (u_char *)cp, buflen,
		    (u_char **)dnptrs, (u_char **)lastdnptr)) < 0)
d143 1
a143 1
		__putshort(T_NULL, (u_char *)cp);
d145 1
a145 1
		__putshort(class, (u_char *)cp);
d147 1
a147 1
		__putlong(0, (u_char *)cp);
d149 1
a149 1
		__putshort(0, (u_char *)cp);
d161 1
a161 1
		__putshort(type, (u_char *)cp);
d163 1
a163 1
		__putshort(class, (u_char *)cp);
d165 1
a165 1
		__putlong(0, (u_char *)cp);
d167 1
a167 1
		__putshort(datalen, (u_char *)cp);
d234 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
