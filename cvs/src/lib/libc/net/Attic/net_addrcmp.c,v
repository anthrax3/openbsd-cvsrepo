head	1.11;
access;
symbols
	OPENBSD_5_0:1.10.0.26
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.24
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.22
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.18
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.14
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.12
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.10
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.8
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2012.01.17.02.33.20;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2005.06.17.20.36.16;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.25.13.24.12;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2004.10.01.04.08.45;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.07.06.53.27;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.07.00.53.36;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.07.00.52.06;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.07.00.51.23;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.07.00.40.50;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	99.06.25.05.22.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.06.23.22.17.32;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@net_addrcmp() dies. found out to be a horrific function by eric
ok guenther
@
text
@/*	$OpenBSD: net_addrcmp.c,v 1.10 2005/06/17 20:36:16 henning Exp $	*/

/*
 * Copyright (c) 1999 Theo de Raadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <netinet/in.h>
#include <string.h>

int
net_addrcmp(struct sockaddr *sa1, struct sockaddr *sa2)
{

	if (sa1->sa_len != sa2->sa_len)
		return (sa1->sa_len < sa2->sa_len) ? -1 : 1;
	if (sa1->sa_family != sa2->sa_family)
		return (sa1->sa_family < sa2->sa_family) ? -1 : 1;

	switch(sa1->sa_family) {
	case AF_INET:
		return (memcmp(&((struct sockaddr_in *)sa1)->sin_addr,
		    &((struct sockaddr_in *)sa2)->sin_addr,
		    sizeof(struct in_addr)));
	case AF_INET6:
		if (((struct sockaddr_in6 *)sa1)->sin6_scope_id !=
		    ((struct sockaddr_in6 *)sa2)->sin6_scope_id)
			return (((struct sockaddr_in6 *)sa1)->sin6_scope_id < 
			    ((struct sockaddr_in6 *)sa2)->sin6_scope_id)
			    ? -1 : 1;
		return memcmp(&((struct sockaddr_in6 *)sa1)->sin6_addr,
		    &((struct sockaddr_in6 *)sa2)->sin6_addr,
		    sizeof(struct in6_addr));
	case AF_LOCAL:
		return (strcmp(((struct sockaddr_un *)sa1)->sun_path,
		    ((struct sockaddr_un *)sa1)->sun_path));
	default:
		return -1;
	}
}
@


1.10
log
@remove netns stuff, ok millert
libc major bump by espie in a few
@
text
@d1 1
a1 1
/*	$OpenBSD: net_addrcmp.c,v 1.9 2005/03/25 13:24:12 otto Exp $	*/
@


1.9
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net_addrcmp.c,v 1.8 2004/10/01 04:08:45 jsg Exp $	*/
a31 1
#include <netns/ns.h>
a56 4
	case AF_NS:
		return (memcmp(&((struct sockaddr_ns *)sa1)->sns_addr,
		    &((struct sockaddr_ns *)sa2)->sns_addr,
		    sizeof(struct ns_addr)));
@


1.8
log
@add some missing $, ok djm@@ 'That looks fine to me' millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 3
net_addrcmp(sa1, sa2)
	struct sockaddr *sa1;
	struct sockaddr *sa2;
@


1.7
log
@add copyright notices; noted as missing by itojun
@
text
@d1 2
@


1.6
log
@typo
@
text
@d1 25
@


1.5
log
@-Wunused
@
text
@d26 1
a26 1
		    ((struct sockaddr_in6 *)sa2)->sin6_scpoe_id)
d28 1
a28 1
			    ((struct sockaddr_in6 *)sa2)->sin6_scpoe_id)
@


1.4
log
@sorry, correct the polarity of return value on AF_INET6.
@
text
@a12 1
	int r;
@


1.3
log
@for AF_INET6, must compare sin6_scope_id.
@
text
@d13 2
d26 6
a31 1
		return (memcmp(&((struct sockaddr_in6 *)sa1)->sin6_addr,
d33 1
a33 3
		    sizeof(struct in6_addr)) == 0 &&
		    ((struct sockaddr_in6 *)sa1)->sin6_scope_id ==
		    ((struct sockaddr_in6 *)sa2)->sin6_scpoe_id);
@


1.2
log
@use AF_LOCAL instead of AF_UNIX
@
text
@d26 3
a28 1
		    sizeof(struct in6_addr)));
@


1.1
log
@net_addrcmp(); needs man page
@
text
@d31 1
a31 1
	case AF_UNIX:
@

