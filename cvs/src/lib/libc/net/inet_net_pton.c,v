head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.8.0.12
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.8
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.10
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.14
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.12
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2017.03.06.18.16.27;	author millert;	state Exp;
branches;
next	1.9;
commitid	qVxIiARa5IjeU5YS;

1.9
date	2017.03.06.18.14.41;	author millert;	state Exp;
branches;
next	1.8;
commitid	Hvr93NabGuGtO5iR;

1.8
date	2013.11.25.18.23.51;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.22.19.13.37;	author gilles;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.01.09.40.43;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.06.20.30.03;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.25.13.24.12;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.25.19.40.25;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.17.19.42.23;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.03.13.19.07.30;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.10
log
@size is unsigned so using ==0 not <=0 when checking for buffer exhaustion
@
text
@/*	$OpenBSD: inet_net_pton.c,v 1.9 2017/03/06 18:14:41 millert Exp $	*/

/*
 * Copyright (c) 2012 by Gilles Chehade <gilles@@openbsd.org>
 * Copyright (c) 1996,1999 by Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE
 * CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <assert.h>
#include <ctype.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

static int	inet_net_pton_ipv4(const char *, u_char *, size_t);
static int	inet_net_pton_ipv6(const char *, u_char *, size_t);

/*
 * static int
 * inet_net_pton(af, src, dst, size)
 *	convert network number from presentation to network format.
 *	accepts hex octets, hex strings, decimal octets, and /CIDR.
 *	"size" is in bytes and describes "dst".
 * return:
 *	number of bits, either imputed classfully or specified with /CIDR,
 *	or -1 if some failure occurred (check errno).  ENOENT means it was
 *	not a valid network specification.
 * author:
 *	Paul Vixie (ISC), June 1996
 */
int
inet_net_pton(int af, const char *src, void *dst, size_t size)
{
	switch (af) {
	case AF_INET:
		return (inet_net_pton_ipv4(src, dst, size));
	case AF_INET6:
		return (inet_net_pton_ipv6(src, dst, size));
	default:
		errno = EAFNOSUPPORT;
		return (-1);
	}
}

/*
 * static int
 * inet_net_pton_ipv4(src, dst, size)
 *	convert IPv4 network number from presentation to network format.
 *	accepts hex octets, hex strings, decimal octets, and /CIDR.
 *	"size" is in bytes and describes "dst".
 * return:
 *	number of bits, either imputed classfully or specified with /CIDR,
 *	or -1 if some failure occurred (check errno).  ENOENT means it was
 *	not an IPv4 network specification.
 * note:
 *	network byte order assumed.  this means 192.5.5.240/28 has
 *	0x11110000 in its fourth octet.
 * author:
 *	Paul Vixie (ISC), June 1996
 */
static int
inet_net_pton_ipv4(const char *src, u_char *dst, size_t size)
{
	static const char
		xdigits[] = "0123456789abcdef",
		digits[] = "0123456789";
	int n, ch, tmp, dirty, bits;
	const u_char *odst = dst;

	ch = (unsigned char)*src++;
	if (ch == '0' && (src[0] == 'x' || src[0] == 'X')
	    && isascii((unsigned char)src[1]) && isxdigit((unsigned char)src[1])) {
		/* Hexadecimal: Eat nybble string. */
		if (size == 0)
			goto emsgsize;
		tmp = 0, dirty = 0;
		src++;	/* skip x or X. */
		while ((ch = (unsigned char)*src++) != '\0' &&
		    isascii(ch) && isxdigit(ch)) {
			if (isupper(ch))
				ch = tolower(ch);
			n = strchr(xdigits, ch) - xdigits;
			assert(n >= 0 && n <= 15);
			if (dirty == 0)
				tmp = n;
			else
				tmp = (tmp << 4) | n;
			if (++dirty == 2) {
				if (size-- == 0)
					goto emsgsize;
				*dst++ = (u_char) tmp;
				dirty = 0;
			}
		}
		if (dirty) {  /* Odd trailing nybble? */
			if (size-- == 0)
				goto emsgsize;
			*dst++ = (u_char) (tmp << 4);
		}
	} else if (isascii(ch) && isdigit(ch)) {
		/* Decimal: eat dotted digit string. */
		for (;;) {
			tmp = 0;
			do {
				n = strchr(digits, ch) - digits;
				assert(n >= 0 && n <= 9);
				tmp *= 10;
				tmp += n;
				if (tmp > 255)
					goto enoent;
			} while ((ch = (unsigned char)*src++) != '\0' &&
				 isascii(ch) && isdigit(ch));
			if (size-- == 0)
				goto emsgsize;
			*dst++ = (u_char) tmp;
			if (ch == '\0' || ch == '/')
				break;
			if (ch != '.')
				goto enoent;
			ch = (unsigned char)*src++;
			if (!isascii(ch) || !isdigit(ch))
				goto enoent;
		}
	} else
		goto enoent;

	bits = -1;
	if (ch == '/' && isascii((unsigned char)src[0]) &&
	    isdigit((unsigned char)src[0]) && dst > odst) {
		/* CIDR width specifier.  Nothing can follow it. */
		ch = (unsigned char)*src++;	/* Skip over the /. */
		bits = 0;
		do {
			n = strchr(digits, ch) - digits;
			assert(n >= 0 && n <= 9);
			bits *= 10;
			bits += n;
			if (bits > 32)
				goto emsgsize;
		} while ((ch = (unsigned char)*src++) != '\0' &&
			 isascii(ch) && isdigit(ch));
		if (ch != '\0')
			goto enoent;
	}

	/* Firey death and destruction unless we prefetched EOS. */
	if (ch != '\0')
		goto enoent;

	/* If nothing was written to the destination, we found no address. */
	if (dst == odst)
		goto enoent;
	/* If no CIDR spec was given, infer width from net class. */
	if (bits == -1) {
		if (*odst >= 240)	/* Class E */
			bits = 32;
		else if (*odst >= 224)	/* Class D */
			bits = 4;
		else if (*odst >= 192)	/* Class C */
			bits = 24;
		else if (*odst >= 128)	/* Class B */
			bits = 16;
		else			/* Class A */
			bits = 8;
		/* If imputed mask is narrower than specified octets, widen. */
		if (bits < ((dst - odst) * 8))
			bits = (dst - odst) * 8;
	}
	/* Extend network to cover the actual mask. */
	while (bits > ((dst - odst) * 8)) {
		if (size-- == 0)
			goto emsgsize;
		*dst++ = '\0';
	}
	return (bits);

 enoent:
	errno = ENOENT;
	return (-1);

 emsgsize:
	errno = EMSGSIZE;
	return (-1);
}


static int
inet_net_pton_ipv6(const char *src, u_char *dst, size_t size)
{
	int	ret;
	int	bits;
	char	buf[sizeof("xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:255:255:255:255/128")];
	char		*sep;
	const char	*errstr;

	if (strlcpy(buf, src, sizeof buf) >= sizeof buf) {
		errno = EMSGSIZE;
		return (-1);
	}

	sep = strchr(buf, '/');
	if (sep != NULL)
		*sep++ = '\0';

	ret = inet_pton(AF_INET6, buf, dst);
	if (ret != 1)
		return (-1);

	if (sep == NULL)
		return 128;

	bits = strtonum(sep, 0, 128, &errstr);
	if (errstr) {
		errno = EINVAL;
		return (-1);
	}

	return bits;
}
@


1.9
log
@Pull in a change from the bind 8 resolver that fixes a potential
crash when given a large hex number as part of the dotted quad.
OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_pton.c,v 1.8 2013/11/25 18:23:51 deraadt Exp $	*/
d92 1
a92 1
		if (size <= 0)
d131 1
a131 1
			if (size-- <= 0)
d189 1
a189 1
		if (size-- <= 0)
@


1.8
log
@unsigned char changes for ctype
re-re-reviewed by krw
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_pton.c,v 1.7 2012/06/22 19:13:37 gilles Exp $	*/
d5 1
a5 1
 * Copyright (c) 1996 by Internet Software Consortium.
d94 1
a94 1
		*dst = 0, dirty = 0;
d102 2
a103 5
			*dst |= n;
			if (!dirty++)
				*dst <<= 4;
			else if (size-- > 0)
				*++dst = 0, dirty = 0;
d105 10
d116 1
a117 2
		if (dirty)
			size--;
@


1.7
log
@add support for AF_INET6 to inet_net_pton() and inet_net_ntop()
using inet_pton() and inet_ntop() as suggested by claudio

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_pton.c,v 1.6 2008/09/01 09:40:43 markus Exp $	*/
d88 1
a88 1
	ch = *src++;
d90 1
a90 1
	    && isascii(src[1]) && isxdigit(src[1])) {
d96 2
a97 2
		while ((ch = *src++) != '\0' &&
		       isascii(ch) && isxdigit(ch)) {
d123 1
a123 1
			} while ((ch = *src++) != '\0' &&
d132 1
a132 1
			ch = *src++;
d140 2
a141 1
	if (ch == '/' && isascii(src[0]) && isdigit(src[0]) && dst > odst) {
d143 1
a143 1
		ch = *src++;	/* Skip over the /. */
d152 1
a152 1
		} while ((ch = *src++) != '\0' &&
@


1.6
log
@do not overflow for large prefix len (e.g. 2147483649)
report Maksymilian Arciemowicz; ok djm, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_pton.c,v 1.5 2005/08/06 20:30:03 espie Exp $	*/
d4 1
d34 1
d55 2
d195 35
@


1.5
log
@zap rcsid.
split functions off res_debug.c so that getnetnamadr.c does not pull it
all when it's used.

okay deraadt@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_pton.c,v 1.4 2005/03/25 13:24:12 otto Exp $	*/
d145 2
a150 2
		if (bits > 32)
			goto emsgsize;
@


1.4
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_pton.c,v 1.3 2003/04/25 19:40:25 henning Exp $	*/
a18 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static const char rcsid[] = "$From: inet_net_pton.c,v 8.3 1996/11/11 06:36:52 vixie Exp $";
#else
static const char rcsid[] = "$OpenBSD: inet_net_pton.c,v 1.3 2003/04/25 19:40:25 henning Exp $";
#endif
#endif
@


1.3
log
@always widen the imputed netmask if it is narrower than the specified octets.
fixes a strange behaviour where inet_net_pton would always return 4 (bits)
for multicast addresses no matter how many octets were specified.

negotiated with Paul Vixie, original author of this function.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_pton.c,v 1.2 2002/02/17 19:42:23 millert Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: inet_net_pton.c,v 1.2 2002/02/17 19:42:23 millert Exp $";
d56 1
a56 5
inet_net_pton(af, src, dst, size)
	int af;
	const char *src;
	void *dst;
	size_t size;
d84 1
a84 4
inet_net_pton_ipv4(src, dst, size)
	const char *src;
	u_char *dst;
	size_t size;
@


1.2
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_pton.c,v 1.1 1997/03/13 19:07:30 downsj Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: inet_net_pton.c,v 1.1 1997/03/13 19:07:30 downsj Exp $";
d188 1
a188 1
		if (bits >= 8 && bits < ((dst - odst) * 8))
@


1.1
log
@Integrate BIND 4.9.5 resolver and associated routines.

Includes the DNS aware getnetby*() routines and IPv6 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_pton.c,v 1.1 1997/03/12 10:42:05 downsj Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: inet_net_pton.c,v 1.1 1997/03/12 10:42:05 downsj Exp $";
d40 1
a40 2
static int	inet_net_pton_ipv4 __P((const char *src, u_char *dst,
					size_t size));
@

