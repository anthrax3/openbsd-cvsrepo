head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.6
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.32
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.28
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.26
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.24
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.22
	OPENBSD_5_0:1.8.0.20
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.18
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.16
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.12
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.14
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.10
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.8
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.6
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.4
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2016.09.21.04.38.56;	author guenther;	state Exp;
branches;
next	1.11;
commitid	pqjnYVtACzQ9ctai;

1.11
date	2015.09.14.11.01.47;	author guenther;	state Exp;
branches;
next	1.10;
commitid	0UySDzUm2zFk2635;

1.10
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	0DYulI8hhujBHMcR;

1.9
date	2014.06.13.15.41.06;	author chrisz;	state Exp;
branches;
next	1.8;
commitid	2pcnaP7uM5ZWrvRB;

1.8
date	2006.12.09.01.12.28;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.25.13.24.12;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.11.02.54.02;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.06.07.27.52;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.06.07.02.58;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.27.10.14.02;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.29.18.25.52;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	99.12.11.08.09.11;	author itojun;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Delete casts to off_t and size_t that are implied by assignments
or prototypes.  Ditto for some of the char* and void* casts too.

verified no change to instructions on ILP32 (i386) and LP64 (amd64)
ok natano@@ abluhm@@ deraadt@@ millert@@
@
text
@/*	$OpenBSD: rthdr.c,v 1.11 2015/09/14 11:01:47 guenther Exp $	*/
/*	$KAME: rthdr.c,v 1.22 2006/02/09 08:18:58 keiichi Exp $	*/

/*
 * Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <netinet/ip6.h>

#include <string.h>
#include <stdio.h>

/*
 * RFC3542 (2292bis) API
 */

socklen_t
inet6_rth_space(int type, int segments)
{
	switch (type) {
	case IPV6_RTHDR_TYPE_0:
		return (((segments * 2) + 1) << 3);
	default:
		return (0);	/* type not suppported */
	}
}
DEF_WEAK(inet6_rth_space);

void *
inet6_rth_init(void *bp, socklen_t bp_len, int type, int segments)
{
	struct ip6_rthdr *rth = (struct ip6_rthdr *)bp;
	struct ip6_rthdr0 *rth0;

	switch (type) {
	case IPV6_RTHDR_TYPE_0:
		/* length validation */
		if (bp_len < inet6_rth_space(IPV6_RTHDR_TYPE_0, segments))
			return (NULL);

		memset(bp, 0, bp_len);
		rth0 = (struct ip6_rthdr0 *)rth;
		rth0->ip6r0_len = segments * 2;
		rth0->ip6r0_type = IPV6_RTHDR_TYPE_0;
		rth0->ip6r0_segleft = 0;
		rth0->ip6r0_reserved = 0;
		break;
	default:
		return (NULL);	/* type not supported */
	}

	return (bp);
}

int
inet6_rth_add(void *bp, const struct in6_addr *addr)
{
	struct ip6_rthdr *rth = (struct ip6_rthdr *)bp;
	struct ip6_rthdr0 *rth0;
	struct in6_addr *nextaddr;

	switch (rth->ip6r_type) {
	case IPV6_RTHDR_TYPE_0:
		rth0 = (struct ip6_rthdr0 *)rth;
		nextaddr = (struct in6_addr *)(rth0 + 1) + rth0->ip6r0_segleft;
		*nextaddr = *addr;
		rth0->ip6r0_segleft++;
		break;
	default:
		return (-1);	/* type not supported */
	}

	return (0);
}

int
inet6_rth_reverse(const void *in, void *out)
{
	struct ip6_rthdr *rth_in = (struct ip6_rthdr *)in;
	struct ip6_rthdr0 *rth0_in, *rth0_out;
	int i, segments;

	switch (rth_in->ip6r_type) {
	case IPV6_RTHDR_TYPE_0:
		rth0_in = (struct ip6_rthdr0 *)in;
		rth0_out = (struct ip6_rthdr0 *)out;

		/* parameter validation XXX too paranoid? */
		if (rth0_in->ip6r0_len % 2)
			return (-1);
		segments = rth0_in->ip6r0_len / 2;

		/* we can't use memcpy here, since in and out may overlap */
		memmove(rth0_out, rth0_in, ((rth0_in->ip6r0_len) + 1) << 3);
		rth0_out->ip6r0_segleft = segments;

		/* reverse the addresses */
		for (i = 0; i < segments / 2; i++) {
			struct in6_addr addr_tmp, *addr1, *addr2;

			addr1 = (struct in6_addr *)(rth0_out + 1) + i;
			addr2 = (struct in6_addr *)(rth0_out + 1) +
			    (segments - i - 1);
			addr_tmp = *addr1;
			*addr1 = *addr2;
			*addr2 = addr_tmp;
		}
		
		break;
	default:
		return (-1);	/* type not supported */
	}

	return (0);
}

int
inet6_rth_segments(const void *bp)
{
	struct ip6_rthdr *rh = (struct ip6_rthdr *)bp;
	struct ip6_rthdr0 *rh0;
	int addrs;

	switch (rh->ip6r_type) {
	case IPV6_RTHDR_TYPE_0:
		rh0 = (struct ip6_rthdr0 *)bp;

		/*
		 * Validation for a type-0 routing header.
		 * Is this too strict?
		 */
		if ((rh0->ip6r0_len % 2) != 0 ||
		    (addrs = (rh0->ip6r0_len >> 1)) < rh0->ip6r0_segleft)
			return (-1);

		return (addrs);
	default:
		return (-1);	/* unknown type */
	}
}

struct in6_addr *
inet6_rth_getaddr(const void *bp, int idx)
{
	struct ip6_rthdr *rh = (struct ip6_rthdr *)bp;
	struct ip6_rthdr0 *rh0;
	int addrs;

	switch (rh->ip6r_type) {
	case IPV6_RTHDR_TYPE_0:
		 rh0 = (struct ip6_rthdr0 *)bp;
		 
		/*
		 * Validation for a type-0 routing header.
		 * Is this too strict?
		 */
		if ((rh0->ip6r0_len % 2) != 0 ||
		    (addrs = (rh0->ip6r0_len >> 1)) < rh0->ip6r0_segleft)
			return (NULL);

		if (idx < 0 || addrs <= idx)
			return (NULL);

		return (((struct in6_addr *)(rh0 + 1)) + idx);
	default:
		return (NULL);	/* unknown type */
		break;
	}
}
@


1.11
log
@Wrap <ifaddrs.h>, <netinet/in.h>, and <netinet/if_ether.h> so internal
calls go direct and all the symbols are weak
@
text
@d1 1
a1 1
/*	$OpenBSD: rthdr.c,v 1.10 2015/01/16 16:48:51 deraadt Exp $	*/
d123 1
a123 2
		memmove((void *)rth0_out, (void *)rth0_in,
			((rth0_in->ip6r0_len) + 1) << 3);
@


1.10
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: rthdr.c,v 1.9 2014/06/13 15:41:06 chrisz Exp $	*/
d56 1
@


1.9
log
@Remove deprecated RFC2292 ancillary data convenience functions.
They are obsoleted by the RFC3542 api.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthdr.c,v 1.8 2006/12/09 01:12:28 itojun Exp $	*/
a32 1
#include <sys/param.h>
@


1.8
log
@switch IPv6 advanced API from RFC2292 to RFC3542 (2292 is superseded by 3542).
the kernel still handles RFC2292 set/getsockopts, so that compiled binary
has no trouble running.  userland sees RFC3542 symbols only on header file
so new code has to use RFC3542 API.

bump libc shlib minor for function additions.

tested on i386/amd64 by jmc, i386 by brad. checked by deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthdr.c,v 1.7 2005/03/25 13:24:12 otto Exp $	*/
a41 179

/*
 * RFC2292 API
 */

size_t
inet6_rthdr_space(int type, int seg)
{
	switch (type) {
	case IPV6_RTHDR_TYPE_0:
		if (seg < 1 || seg > 23)
			return (0);
		return (CMSG_SPACE(sizeof(struct in6_addr) * seg +
		    sizeof(struct ip6_rthdr0)));
	default:
		return (0);
	}
}

struct cmsghdr *
inet6_rthdr_init(void *bp, int type)
{
	struct cmsghdr *ch = (struct cmsghdr *)bp;
	struct ip6_rthdr *rthdr;

	rthdr = (struct ip6_rthdr *)CMSG_DATA(ch);

	ch->cmsg_level = IPPROTO_IPV6;
	ch->cmsg_type = IPV6_RTHDR;

	switch (type) {
	case IPV6_RTHDR_TYPE_0:
		ch->cmsg_len = CMSG_LEN(sizeof(struct ip6_rthdr0));
		bzero(rthdr, sizeof(struct ip6_rthdr0));
		rthdr->ip6r_type = IPV6_RTHDR_TYPE_0;
		return (ch);
	default:
		return (NULL);
	}
}

int
inet6_rthdr_add(struct cmsghdr *cmsg, const struct in6_addr *addr, u_int flags)
{
	struct ip6_rthdr *rthdr;

	rthdr = (struct ip6_rthdr *)CMSG_DATA(cmsg);

	switch (rthdr->ip6r_type) {
	case IPV6_RTHDR_TYPE_0:
	{
		struct ip6_rthdr0 *rt0 = (struct ip6_rthdr0 *)rthdr;
		if (flags != IPV6_RTHDR_LOOSE)
			return (-1);
		if (rt0->ip6r0_segleft == 23)
			return (-1);
		rt0->ip6r0_segleft++;
		bcopy(addr, (caddr_t)rt0 + ((rt0->ip6r0_len + 1) << 3),
		    sizeof(struct in6_addr));
		rt0->ip6r0_len += sizeof(struct in6_addr) >> 3;
		cmsg->cmsg_len = CMSG_LEN((rt0->ip6r0_len + 1) << 3);
		break;
	}
	default:
		return (-1);
	}

	return (0);
}

int
inet6_rthdr_lasthop(struct cmsghdr *cmsg, unsigned int flags)
{
	struct ip6_rthdr *rthdr;

	rthdr = (struct ip6_rthdr *)CMSG_DATA(cmsg);

	switch (rthdr->ip6r_type) {
	case IPV6_RTHDR_TYPE_0:
	{
		struct ip6_rthdr0 *rt0 = (struct ip6_rthdr0 *)rthdr;
		if (flags != IPV6_RTHDR_LOOSE)
			return (-1);
		if (rt0->ip6r0_segleft > 23)
			return (-1);
		break;
	}
	default:
		return (-1);
	}

	return (0);
}

#if 0
int
inet6_rthdr_reverse(in, out)
	const struct cmsghdr *in;
	struct cmsghdr *out;
{

	return (-1);
}
#endif

int
inet6_rthdr_segments(const struct cmsghdr *cmsg)
{
	struct ip6_rthdr *rthdr;

	rthdr = (struct ip6_rthdr *)CMSG_DATA(cmsg);

	switch (rthdr->ip6r_type) {
	case IPV6_RTHDR_TYPE_0:
	{
		struct ip6_rthdr0 *rt0 = (struct ip6_rthdr0 *)rthdr;

		if (rt0->ip6r0_len % 2 || 46 < rt0->ip6r0_len)
			return (-1);

		return (rt0->ip6r0_len * 8) / sizeof(struct in6_addr);
	}

	default:
		return (-1);
	}
}

struct in6_addr *
inet6_rthdr_getaddr(struct cmsghdr *cmsg, int index)
{
	struct ip6_rthdr *rthdr;

	rthdr = (struct ip6_rthdr *)CMSG_DATA(cmsg);

	switch (rthdr->ip6r_type) {
	case IPV6_RTHDR_TYPE_0:
	{
		struct ip6_rthdr0 *rt0 = (struct ip6_rthdr0 *)rthdr;
		int naddr;

		if (rt0->ip6r0_len % 2 || 46 < rt0->ip6r0_len)
			return NULL;
		naddr = (rt0->ip6r0_len * 8) / sizeof(struct in6_addr);
		if (index <= 0 || naddr < index)
			return NULL;
		return ((struct in6_addr *)(rt0 + 1)) + index;
	}

	default:
		return NULL;
	}
}

int
inet6_rthdr_getflags(const struct cmsghdr *cmsg, int index)
{
	struct ip6_rthdr *rthdr;

	rthdr = (struct ip6_rthdr *)CMSG_DATA(cmsg);

	switch (rthdr->ip6r_type) {
	case IPV6_RTHDR_TYPE_0:
	{
		struct ip6_rthdr0 *rt0 = (struct ip6_rthdr0 *)rthdr;
		int naddr;

		if (rt0->ip6r0_len % 2 || 46 < rt0->ip6r0_len)
			return (-1);
		naddr = (rt0->ip6r0_len * 8) / sizeof(struct in6_addr);
		if (index < 0 || naddr < index)
			return (-1);
		return IPV6_RTHDR_LOOSE;
	}

	default:
		return (-1);
	}
}
@


1.7
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 2
a2 1
/*	$OpenBSD: rthdr.c,v 1.6 2003/06/11 02:54:02 itojun Exp $	*/
d43 4
d219 158
@


1.6
log
@- sync up MLD declaration with RFC3542 (s/MLD6/MLD/)
- routing header declaration with RFC3542
  (note: sizeof(ip6_rthdr0) has changed!)
  also, sync up with RFC2460 routing header definition (no "strict" source
  routing mode any more)

part of advanced API update (RFC2292 -> 3542).

markus, todd, millert, henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rthdr.c,v 1.5 2003/06/06 07:27:52 itojun Exp $	*/
d43 1
a43 2
inet6_rthdr_space(type, seg)
	int type, seg;
d57 1
a57 3
inet6_rthdr_init(bp, type)
	void *bp;
	int type;
d79 1
a79 4
inet6_rthdr_add(cmsg, addr, flags)
	struct cmsghdr *cmsg;
	const struct in6_addr *addr;
	u_int flags;
d108 1
a108 3
inet6_rthdr_lasthop(cmsg, flags)
	struct cmsghdr *cmsg;
	unsigned int flags;
d143 1
a143 2
inet6_rthdr_segments(cmsg)
	const struct cmsghdr *cmsg;
d166 1
a166 3
inet6_rthdr_getaddr(cmsg, index)
	struct cmsghdr *cmsg;
	int index;
d192 1
a192 3
inet6_rthdr_getflags(cmsg, index)
	const struct cmsghdr *cmsg;
	int index;
@


1.5
log
@KNF fix
@
text
@d1 1
a1 1
/*	$OpenBSD: rthdr.c,v 1.4 2003/06/06 07:02:58 itojun Exp $	*/
d50 1
a50 1
		return (CMSG_SPACE(sizeof(struct in6_addr) * (seg - 1) +
d72 1
a72 2
		ch->cmsg_len = CMSG_LEN(sizeof(struct ip6_rthdr0) -
		    sizeof(struct in6_addr));
d95 1
a95 1
		if (flags != IPV6_RTHDR_LOOSE && flags != IPV6_RTHDR_STRICT)
a98 6
		if (flags == IPV6_RTHDR_STRICT) {
			int c, b;
			c = rt0->ip6r0_segleft / 8;
			b = rt0->ip6r0_segleft % 8;
			rt0->ip6r0_slmap[c] |= (1 << (7 - b));
		}
d126 1
a126 1
		if (flags != IPV6_RTHDR_LOOSE && flags != IPV6_RTHDR_STRICT)
a129 6
		if (flags == IPV6_RTHDR_STRICT) {
			int c, b;
			c = rt0->ip6r0_segleft / 8;
			b = rt0->ip6r0_segleft % 8;
			rt0->ip6r0_slmap[c] |= (1 << (7 - b));
		}
d194 1
a194 1
		return &rt0->ip6r0_addr[index - 1];
d222 1
a222 4
		if (rt0->ip6r0_slmap[index / 8] & (0x80 >> (index % 8)))
			return IPV6_RTHDR_STRICT;
		else
			return IPV6_RTHDR_LOOSE;
@


1.4
log
@KNF, de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: rthdr.c,v 1.3 2002/06/27 10:14:02 itojun Exp $	*/
d183 1
a183 1
	return (-1);
d242 1
a242 1
	return (-1);
@


1.3
log
@%d -> %u.  mostly in #ifdef DEBUG.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthdr.c,v 1.2 2000/02/29 18:25:52 itojun Exp $	*/
d44 1
a44 1
    int type, seg;
d46 9
a54 12
    switch(type) {
     case IPV6_RTHDR_TYPE_0:
	 if (seg < 1 || seg > 23)
	     return(0);
	 return(CMSG_SPACE(sizeof(struct in6_addr) * (seg - 1)
			   + sizeof(struct ip6_rthdr0)));
     default:
#ifdef DEBUG
	 fprintf(stderr, "inet6_rthdr_space: unknown type(%d)\n", type);
#endif 
	 return(0);
    }
d59 2
a60 2
    void *bp;
    int type;
d62 2
a63 2
    register struct cmsghdr *ch = (struct cmsghdr *)bp;
    register struct ip6_rthdr *rthdr;
d65 1
a65 1
    rthdr = (struct ip6_rthdr *)CMSG_DATA(ch);
d67 13
a79 15
    ch->cmsg_level = IPPROTO_IPV6;
    ch->cmsg_type = IPV6_RTHDR;

    switch(type) {
     case IPV6_RTHDR_TYPE_0:
	 ch->cmsg_len = CMSG_LEN(sizeof(struct ip6_rthdr0) - sizeof(struct in6_addr));
	 bzero(rthdr, sizeof(struct ip6_rthdr0));
	 rthdr->ip6r_type = IPV6_RTHDR_TYPE_0;
	 return(ch);
     default:
#ifdef DEBUG
	 fprintf(stderr, "inet6_rthdr_init: unknown type(%d)\n", type);
#endif 
	 return(NULL);
    }
d84 32
a115 5
    struct cmsghdr *cmsg;
    const struct in6_addr *addr;
    u_int flags;
{
    register struct ip6_rthdr *rthdr;
d117 1
a117 40
    rthdr = (struct ip6_rthdr *)CMSG_DATA(cmsg);

    switch(rthdr->ip6r_type) {
     case IPV6_RTHDR_TYPE_0:
     {
	 struct ip6_rthdr0 *rt0 = (struct ip6_rthdr0 *)rthdr;
	 if (flags != IPV6_RTHDR_LOOSE && flags != IPV6_RTHDR_STRICT) {
#ifdef DEBUG
	     fprintf(stderr, "inet6_rthdr_add: unsupported flag(%u)\n", flags);
#endif 
	     return(-1);
	 }
	 if (rt0->ip6r0_segleft == 23) {
#ifdef DEBUG
	     fprintf(stderr, "inet6_rthdr_add: segment overflow\n");
#endif 
	     return(-1);
	 }
	 if (flags == IPV6_RTHDR_STRICT) {
	     int c, b;
	     c = rt0->ip6r0_segleft / 8;
	     b = rt0->ip6r0_segleft % 8;
	     rt0->ip6r0_slmap[c] |= (1 << (7 - b));
	 }
	 rt0->ip6r0_segleft++;
	 bcopy(addr, (caddr_t)rt0 + ((rt0->ip6r0_len + 1) << 3),
	       sizeof(struct in6_addr));
	 rt0->ip6r0_len += sizeof(struct in6_addr) >> 3;
	 cmsg->cmsg_len = CMSG_LEN((rt0->ip6r0_len + 1) << 3);
	 break;
     }
     default:
#ifdef DEBUG
	 fprintf(stderr, "inet6_rthdr_add: unknown type(%u)\n",
		 rthdr->ip6r_type);
#endif 
	 return(-1);
    }

    return(0);
d122 2
a123 2
    struct cmsghdr *cmsg;
    unsigned int flags;
d125 1
a125 1
    register struct ip6_rthdr *rthdr;
d127 1
a127 1
    rthdr = (struct ip6_rthdr *)CMSG_DATA(cmsg);
d129 19
a147 31
    switch(rthdr->ip6r_type) {
     case IPV6_RTHDR_TYPE_0:
     {
	 struct ip6_rthdr0 *rt0 = (struct ip6_rthdr0 *)rthdr;
	 if (flags != IPV6_RTHDR_LOOSE && flags != IPV6_RTHDR_STRICT) {
#ifdef DEBUG
	     fprintf(stderr, "inet6_rthdr_lasthop: unsupported flag(%u)\n", flags);
#endif 
	     return(-1);
	 }
	 if (rt0->ip6r0_segleft > 23) {
#ifdef DEBUG
	     fprintf(stderr, "inet6_rthdr_add: segment overflow\n");
#endif 
	     return(-1);
	 }
	 if (flags == IPV6_RTHDR_STRICT) {
	     int c, b;
	     c = rt0->ip6r0_segleft / 8;
	     b = rt0->ip6r0_segleft % 8;
	     rt0->ip6r0_slmap[c] |= (1 << (7 - b));
	 }
	 break;
     }
     default:
#ifdef DEBUG
	 fprintf(stderr, "inet6_rthdr_lasthop: unknown type(%u)\n",
		 rthdr->ip6r_type);
#endif 
	 return(-1);
    }
d149 1
a149 1
    return(0);
d155 2
a156 2
    const struct cmsghdr *in;
    struct cmsghdr *out;
d158 2
a159 4
#ifdef DEBUG
    fprintf(stderr, "inet6_rthdr_reverse: not implemented yet\n");
#endif 
    return -1;
d165 1
a165 1
    const struct cmsghdr *cmsg;
d167 1
a167 1
    register struct ip6_rthdr *rthdr;
d169 1
a169 1
    rthdr = (struct ip6_rthdr *)CMSG_DATA(cmsg);
d171 14
a184 23
    switch(rthdr->ip6r_type) {
    case IPV6_RTHDR_TYPE_0:
      {
	struct ip6_rthdr0 *rt0 = (struct ip6_rthdr0 *)rthdr;

	if (rt0->ip6r0_len % 2 || 46 < rt0->ip6r0_len) {
#ifdef DEBUG
	    fprintf(stderr, "inet6_rthdr_segments: invalid size(%u)\n",
		rt0->ip6r0_len);
#endif 
	    return -1;
	}

	return (rt0->ip6r0_len * 8) / sizeof(struct in6_addr);
      }

    default:
#ifdef DEBUG
	fprintf(stderr, "inet6_rthdr_segments: unknown type(%u)\n",
	    rthdr->ip6r_type);
#endif 
	return -1;
    }
d189 2
a190 2
    struct cmsghdr *cmsg;
    int index;
d192 1
a192 1
    register struct ip6_rthdr *rthdr;
d194 1
a194 1
    rthdr = (struct ip6_rthdr *)CMSG_DATA(cmsg);
d196 17
a212 30
    switch(rthdr->ip6r_type) {
    case IPV6_RTHDR_TYPE_0:
      {
	struct ip6_rthdr0 *rt0 = (struct ip6_rthdr0 *)rthdr;
	int naddr;

	if (rt0->ip6r0_len % 2 || 46 < rt0->ip6r0_len) {
#ifdef DEBUG
	    fprintf(stderr, "inet6_rthdr_getaddr: invalid size(%u)\n",
		rt0->ip6r0_len);
#endif 
	    return NULL;
	}
	naddr = (rt0->ip6r0_len * 8) / sizeof(struct in6_addr);
	if (index <= 0 || naddr < index) {
#ifdef DEBUG
	    fprintf(stderr, "inet6_rthdr_getaddr: invalid index(%d)\n", index);
#endif 
	    return NULL;
	}
	return &rt0->ip6r0_addr[index - 1];
      }

    default:
#ifdef DEBUG
	fprintf(stderr, "inet6_rthdr_getaddr: unknown type(%u)\n",
	    rthdr->ip6r_type);
#endif 
	return NULL;
    }
d217 2
a218 2
    const struct cmsghdr *cmsg;
    int index;
d220 1
a220 1
    register struct ip6_rthdr *rthdr;
d222 1
a222 1
    rthdr = (struct ip6_rthdr *)CMSG_DATA(cmsg);
d224 20
a243 33
    switch(rthdr->ip6r_type) {
    case IPV6_RTHDR_TYPE_0:
      {
	struct ip6_rthdr0 *rt0 = (struct ip6_rthdr0 *)rthdr;
	int naddr;

	if (rt0->ip6r0_len % 2 || 46 < rt0->ip6r0_len) {
#ifdef DEBUG
	    fprintf(stderr, "inet6_rthdr_getflags: invalid size(%u)\n",
		rt0->ip6r0_len);
#endif 
	    return -1;
	}
	naddr = (rt0->ip6r0_len * 8) / sizeof(struct in6_addr);
	if (index < 0 || naddr < index) {
#ifdef DEBUG
	    fprintf(stderr, "inet6_rthdr_getflags: invalid index(%d)\n", index);
#endif 
	    return -1;
	}
	if (rt0->ip6r0_slmap[index / 8] & (0x80 >> (index % 8)))
	    return IPV6_RTHDR_STRICT;
	else
	    return IPV6_RTHDR_LOOSE;
      }

    default:
#ifdef DEBUG
	fprintf(stderr, "inet6_rthdr_getflags: unknown type(%u)\n",
	    rthdr->ip6r_type);
#endif 
	return -1;
    }
@


1.2
log
@fix alignment constraint in IPv6 routing header manipulation (ancillary data).
documented in RFC2292.
from: shin@@kame.net
@
text
@d1 1
a1 1
/*	$OpenBSD: rthdr.c,v 1.1 1999/12/11 08:09:11 itojun Exp $	*/
d103 1
a103 1
	     fprintf(stderr, "inet6_rthdr_add: unsupported flag(%d)\n", flags);
d128 1
a128 1
	 fprintf(stderr, "inet6_rthdr_add: unknown type(%d)\n",
d152 1
a152 1
	     fprintf(stderr, "inet6_rthdr_lasthop: unsupported flag(%d)\n", flags);
d172 1
a172 1
	 fprintf(stderr, "inet6_rthdr_lasthop: unknown type(%d)\n",
d209 1
a209 1
	    fprintf(stderr, "inet6_rthdr_segments: invalid size(%d)\n",
d220 1
a220 1
	fprintf(stderr, "inet6_rthdr_segments: unknown type(%d)\n",
d244 1
a244 1
	    fprintf(stderr, "inet6_rthdr_getaddr: invalid size(%d)\n",
d261 1
a261 1
	fprintf(stderr, "inet6_rthdr_getaddr: unknown type(%d)\n",
d285 1
a285 1
	    fprintf(stderr, "inet6_rthdr_getflags: invalid size(%d)\n",
d305 1
a305 1
	fprintf(stderr, "inet6_rthdr_getflags: unknown type(%d)\n",
@


1.1
log
@add inet6_option_* and inet6_rthdr_*.
increase shlib minor.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 3
a68 1
    register struct ip6_rthdr *rthdr = (struct ip6_rthdr *)(ch + 1);
d93 3
a95 1
    register struct ip6_rthdr *rthdr = (struct ip6_rthdr *)(cmsg + 1);
d142 3
a144 1
    register struct ip6_rthdr *rthdr = (struct ip6_rthdr *)(cmsg + 1);
d198 3
a200 1
    register struct ip6_rthdr *rthdr = (struct ip6_rthdr *)(cmsg + 1);
d232 3
a234 1
    register struct ip6_rthdr *rthdr = (struct ip6_rthdr *)(cmsg + 1);
d273 3
a275 1
    register struct ip6_rthdr *rthdr = (struct ip6_rthdr *)(cmsg + 1);
@

