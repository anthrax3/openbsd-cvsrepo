head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.6
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.8.0.20
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.18
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.16
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.14
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.12
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.09.21.04.38.56;	author guenther;	state Exp;
branches;
next	1.12;
commitid	pqjnYVtACzQ9ctai;

1.12
date	2015.09.13.21.36.08;	author guenther;	state Exp;
branches;
next	1.11;
commitid	3UeBMlmq9gGNKZCC;

1.11
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	0DYulI8hhujBHMcR;

1.10
date	2014.05.17.18.16.14;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2014.02.05.14.20.43;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.09.19.38.38;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.06.20.30.03;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.25.13.24.12;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.23.16.27.31;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.19.03.01.54;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.24.21.22.37;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.16.21.27.23;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.03.13.19.07.32;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Delete casts to off_t and size_t that are implied by assignments
or prototypes.  Ditto for some of the char* and void* casts too.

verified no change to instructions on ILP32 (i386) and LP64 (amd64)
ok natano@@ abluhm@@ deraadt@@ millert@@
@
text
@/*	$OpenBSD: inet_ntop.c,v 1.12 2015/09/13 21:36:08 guenther Exp $	*/

/* Copyright (c) 1996 by Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE
 * CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <arpa/nameser.h>
#include <string.h>
#include <errno.h>
#include <stdio.h>

/*
 * WARNING: Don't even consider trying to compile this on a system where
 * sizeof(int) < 4.  sizeof(int) > 4 is fine; all the world's not a VAX.
 */

static const char *inet_ntop4(const u_char *src, char *dst, size_t size);
static const char *inet_ntop6(const u_char *src, char *dst, size_t size);

/* const char *
 * inet_ntop(af, src, dst, size)
 *	convert a network format address to presentation format.
 * return:
 *	pointer to presentation format address (`dst'), or NULL (see errno).
 * author:
 *	Paul Vixie, 1996.
 */
const char *
inet_ntop(int af, const void *src, char *dst, socklen_t size)
{
	switch (af) {
	case AF_INET:
		return (inet_ntop4(src, dst, size));
	case AF_INET6:
		return (inet_ntop6(src, dst, size));
	default:
		errno = EAFNOSUPPORT;
		return (NULL);
	}
	/* NOTREACHED */
}
DEF_WEAK(inet_ntop);

/* const char *
 * inet_ntop4(src, dst, size)
 *	format an IPv4 address, more or less like inet_ntoa()
 * return:
 *	`dst' (as a const)
 * notes:
 *	(1) uses no statics
 *	(2) takes a u_char* not an in_addr as input
 * author:
 *	Paul Vixie, 1996.
 */
static const char *
inet_ntop4(const u_char *src, char *dst, size_t size)
{
	char tmp[sizeof "255.255.255.255"];
	int l;

	l = snprintf(tmp, sizeof(tmp), "%u.%u.%u.%u",
	    src[0], src[1], src[2], src[3]);
	if (l <= 0 || l >= size) {
		errno = ENOSPC;
		return (NULL);
	}
	strlcpy(dst, tmp, size);
	return (dst);
}

/* const char *
 * inet_ntop6(src, dst, size)
 *	convert IPv6 binary address into presentation (printable) format
 * author:
 *	Paul Vixie, 1996.
 */
static const char *
inet_ntop6(const u_char *src, char *dst, size_t size)
{
	/*
	 * Note that int32_t and int16_t need only be "at least" large enough
	 * to contain a value of the specified size.  On some systems, like
	 * Crays, there is no such thing as an integer variable with 16 bits.
	 * Keep this in mind if you think this function should have been coded
	 * to use pointer overlays.  All the world's not a VAX.
	 */
	char tmp[sizeof "ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"];
	char *tp, *ep;
	struct { int base, len; } best, cur;
	u_int words[IN6ADDRSZ / INT16SZ];
	int i;
	int advance;

	/*
	 * Preprocess:
	 *	Copy the input (bytewise) array into a wordwise array.
	 *	Find the longest run of 0x00's in src[] for :: shorthanding.
	 */
	memset(words, '\0', sizeof words);
	for (i = 0; i < IN6ADDRSZ; i++)
		words[i / 2] |= (src[i] << ((1 - (i % 2)) << 3));
	best.base = -1;
	cur.base = -1;
	for (i = 0; i < (IN6ADDRSZ / INT16SZ); i++) {
		if (words[i] == 0) {
			if (cur.base == -1)
				cur.base = i, cur.len = 1;
			else
				cur.len++;
		} else {
			if (cur.base != -1) {
				if (best.base == -1 || cur.len > best.len)
					best = cur;
				cur.base = -1;
			}
		}
	}
	if (cur.base != -1) {
		if (best.base == -1 || cur.len > best.len)
			best = cur;
	}
	if (best.base != -1 && best.len < 2)
		best.base = -1;

	/*
	 * Format the result.
	 */
	tp = tmp;
	ep = tmp + sizeof(tmp);
	for (i = 0; i < (IN6ADDRSZ / INT16SZ) && tp < ep; i++) {
		/* Are we inside the best run of 0x00's? */
		if (best.base != -1 && i >= best.base &&
		    i < (best.base + best.len)) {
			if (i == best.base) {
				if (tp + 1 >= ep) {
					errno = ENOSPC;
					return (NULL);
				}
				*tp++ = ':';
			}
			continue;
		}
		/* Are we following an initial run of 0x00s or any real hex? */
		if (i != 0) {
			if (tp + 1 >= ep) {
				errno = ENOSPC;
				return (NULL);
			}
			*tp++ = ':';
		}
		/* Is this address an encapsulated IPv4? */
		if (i == 6 && best.base == 0 &&
		    (best.len == 6 || (best.len == 5 && words[5] == 0xffff))) {
			if (!inet_ntop4(src+12, tp, ep - tp))
				return (NULL);
			tp += strlen(tp);
			break;
		}
		advance = snprintf(tp, ep - tp, "%x", words[i]);
		if (advance <= 0 || advance >= ep - tp) {
			errno = ENOSPC;
			return (NULL);
		}
		tp += advance;
	}
	/* Was it a trailing run of 0x00's? */
	if (best.base != -1 && (best.base + best.len) == (IN6ADDRSZ / INT16SZ)) {
		if (tp + 1 >= ep) {
			errno = ENOSPC;
			return (NULL);
		}
		*tp++ = ':';
	}
	if (tp + 1 >= ep) {
		errno = ENOSPC;
		return (NULL);
	}
	*tp++ = '\0';

	/*
	 * Check for overflow, copy, and we're done.
	 */
	if ((size_t)(tp - tmp) > size) {
		errno = ENOSPC;
		return (NULL);
	}
	strlcpy(dst, tmp, size);
	return (dst);
}
@


1.12
log
@Wrap <arpa/inet.h> and <arpa/nameser.h> so that calls go direct and the
symbols without underbar prefix are all weak
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.11 2015/01/16 16:48:51 deraadt Exp $	*/
d49 1
a49 1
		return (inet_ntop4(src, dst, (size_t)size));
d51 1
a51 1
		return (inet_ntop6(src, dst, (size_t)size));
d170 1
a170 1
			if (!inet_ntop4(src+12, tp, (size_t)(ep - tp)))
@


1.11
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.10 2014/05/17 18:16:14 tedu Exp $	*/
d58 1
@


1.10
log
@correctly match size and buffer. from enh at google
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.9 2014/02/05 14:20:43 millert Exp $	*/
a18 1
#include <sys/param.h>
@


1.9
log
@Always set errno when returning NULL.  OK kettenis@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.8 2008/12/09 19:38:38 otto Exp $	*/
a73 1
	static const char fmt[] = "%u.%u.%u.%u";
d77 2
a78 1
	l = snprintf(tmp, size, fmt, src[0], src[1], src[2], src[3]);
@


1.8
log
@fix inet_ntop(3) prototype; ok millert@@ libc to be bumbed very soon
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.7 2005/08/06 20:30:03 espie Exp $	*/
d37 1
a37 1
/* char *
d151 2
a152 1
				if (tp + 1 >= ep)
d154 1
d161 2
a162 1
			if (tp + 1 >= ep)
d164 1
d176 2
a177 1
		if (advance <= 0 || advance >= ep - tp)
d179 1
d184 2
a185 1
		if (tp + 1 >= ep)
d187 1
d190 2
a191 1
	if (tp + 1 >= ep)
d193 1
@


1.7
log
@zap rcsid.
split functions off res_debug.c so that getnetnamadr.c does not pull it
all when it's used.

okay deraadt@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.6 2005/03/25 13:24:12 otto Exp $	*/
d46 1
a46 1
inet_ntop(int af, const void *src, char *dst, size_t size)
d50 1
a50 1
		return (inet_ntop4(src, dst, size));
d52 1
a52 1
		return (inet_ntop6(src, dst, size));
@


1.6
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.5 2002/08/23 16:27:31 itojun Exp $	*/
a17 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char rcsid[] = "$From: inet_ntop.c,v 8.7 1996/08/05 08:41:18 vixie Exp $";
#else
static char rcsid[] = "$OpenBSD: inet_ntop.c,v 1.5 2002/08/23 16:27:31 itojun Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.5
log
@deal with negative return value from snprintf.
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.4 2002/08/19 03:01:54 itojun Exp $	*/
d23 1
a23 1
static char rcsid[] = "$OpenBSD: inet_ntop.c,v 1.4 2002/08/19 03:01:54 itojun Exp $";
d54 1
a54 5
inet_ntop(af, src, dst, size)
	int af;
	const void *src;
	char *dst;
	size_t size;
d80 1
a80 4
inet_ntop4(src, dst, size)
	const u_char *src;
	char *dst;
	size_t size;
d102 1
a102 4
inet_ntop6(src, dst, size)
	const u_char *src;
	char *dst;
	size_t size;
@


1.4
log
@snprintf audit.  debug inet_neta() on non-continuous masks (like 0.255.0.255),
more pickier string manipulation.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.3 2002/05/24 21:22:37 deraadt Exp $	*/
d23 1
a23 1
static char rcsid[] = "$OpenBSD: inet_ntop.c,v 1.3 2002/05/24 21:22:37 deraadt Exp $";
d91 1
d93 2
a94 1
	if (snprintf(tmp, size, fmt, src[0], src[1], src[2], src[3]) >= size) {
@


1.3
log
@try to use strlcpy and snprintf more; ok various
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.2 2002/02/16 21:27:23 millert Exp $	*/
d23 1
a23 1
static char rcsid[] = "$OpenBSD: inet_ntop.c,v 1.2 2002/02/16 21:27:23 millert Exp $";
d119 2
a120 1
	char tmp[sizeof "ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"], *tp;
d124 1
d161 2
a162 1
	for (i = 0; i < (IN6ADDRSZ / INT16SZ); i++) {
d166 3
a168 1
			if (i == best.base)
d170 1
d174 3
a176 1
		if (i != 0)
d178 1
d182 1
a182 1
			if (!inet_ntop4(src+12, tp, sizeof tmp - (tp - tmp)))
d187 4
a190 1
		tp += sprintf(tp, "%x", words[i]);
d193 3
a195 1
	if (best.base != -1 && (best.base + best.len) == (IN6ADDRSZ / INT16SZ))
d197 3
@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.1 1997/03/13 19:07:32 downsj Exp $	*/
d23 1
a23 1
static char rcsid[] = "$OpenBSD: inet_ntop.c,v 1.1 1997/03/13 19:07:32 downsj Exp $";
d92 1
a92 1
	if (sprintf(tmp, fmt, src[0], src[1], src[2], src[3]) > size) {
d96 1
a96 1
	strcpy(dst, tmp);
d192 1
a192 1
	strcpy(dst, tmp);
@


1.1
log
@Integrate BIND 4.9.5 resolver and associated routines.

Includes the DNS aware getnetby*() routines and IPv6 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_ntop.c,v 1.1 1997/03/12 10:42:06 downsj Exp $	*/
d23 1
a23 1
static char rcsid[] = "$OpenBSD: inet_ntop.c,v 1.1 1997/03/12 10:42:06 downsj Exp $";
d42 2
a43 2
static const char *inet_ntop4 __P((const u_char *src, char *dst, size_t size));
static const char *inet_ntop6 __P((const u_char *src, char *dst, size_t size));
@

