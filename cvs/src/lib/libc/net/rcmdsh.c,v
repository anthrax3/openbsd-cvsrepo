head	1.19;
access;
symbols
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.6
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.28
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.24
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.22
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.20
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.18
	OPENBSD_5_0:1.12.0.16
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.14
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.12
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.8
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.10
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.6
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.5.0.14
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.12
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.10
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.19
date	2016.05.28.15.46.00;	author millert;	state Exp;
branches;
next	1.18;
commitid	4Jetf8hIoYV5yDlz;

1.18
date	2015.11.24.22.03.33;	author millert;	state Exp;
branches;
next	1.17;
commitid	LVVvCb2EklWn8nFM;

1.17
date	2015.11.01.03.45.29;	author guenther;	state Exp;
branches;
next	1.16;
commitid	CfNWDWdDpm7mVO8i;

1.16
date	2015.10.23.04.45.32;	author guenther;	state Exp;
branches;
next	1.15;
commitid	z6PpALvKtov2uMkS;

1.15
date	2015.09.12.14.56.50;	author guenther;	state Exp;
branches;
next	1.14;
commitid	BXATo6E2rFBuIXKr;

1.14
date	2015.03.23.22.29.32;	author halex;	state Exp;
branches;
next	1.13;
commitid	Gu7ZLHEzDGVTpwP4;

1.13
date	2014.04.24.18.56.24;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.02.15.19.17;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.06.20.30.03;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.25.13.24.12;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.01.04.14.29;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.05.22.13.03;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.12.00.05.44;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.02.20.18.32;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.04.25.16.23.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.23.16.59.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.15.09.31.17;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.09.01.20.28.22;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.22.20.11.20;	author millert;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Use getaddrinfo() instead of the non-standard gethostbyname2().
OK deraadt@@ jca@@ jung@@ florian@@
@
text
@/*	$OpenBSD: rcmdsh.c,v 1.18 2015/11/24 22:03:33 millert Exp $	*/ 

/*
 * Copyright (c) 2001, MagniComp
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in 
 *    the documentation and/or other materials provided with the distribution. 
 * 3. Neither the name of the MagniComp nor the names of its contributors may
 *    be used to endorse or promote products derived from this software
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This is an rcmd() replacement originally by 
 * Chris Siebenmann <cks@@utcc.utoronto.ca>.
 */

#include      <sys/types.h>
#include      <sys/socket.h>
#include      <sys/wait.h>
#include      <signal.h>
#include      <errno.h>
#include      <limits.h>
#include      <netdb.h>
#include      <stdio.h>
#include      <stdlib.h>
#include      <string.h>
#include      <pwd.h>
#include      <paths.h>
#include      <unistd.h>

/*
 * This is a replacement rcmd() function that uses the ssh(1)
 * program in place of a direct rcmd(3) function call so as to
 * avoid having to be root.  Note that rport is ignored.
 */
int
rcmdsh(char **ahost, int rport, const char *locuser, const char *remuser,
    const char *cmd, char *rshprog)
{
	static char hbuf[HOST_NAME_MAX+1];
	struct addrinfo hint, *res;
	int sp[2];
	pid_t cpid;
	char *p, pwbuf[_PW_BUF_LEN];
	struct passwd pwstore, *pw = NULL;

	/* What rsh/shell to use. */
	if (rshprog == NULL)
		rshprog = _PATH_RSH;

	/* locuser must exist on this host. */
	getpwnam_r(locuser, &pwstore, pwbuf, sizeof(pwbuf), &pw);
	if (pw == NULL) {
		(void) fprintf(stderr, "rcmdsh: unknown user: %s\n", locuser);
		return(-1);
	}

	/* Validate remote hostname. */
	if (strcmp(*ahost, "localhost") != 0) {
		memset(&hint, 0, sizeof(hint));
		hint.ai_family = PF_UNSPEC;
		hint.ai_flags = AI_CANONNAME;
		if (getaddrinfo(*ahost, NULL, &hint, &res) == 0) {
			if (res->ai_canonname) {
				strlcpy(hbuf, res->ai_canonname, sizeof(hbuf));
				*ahost = hbuf;
			}
			freeaddrinfo(res);
		}
	}

	/* Get a socketpair we'll use for stdin and stdout. */
	if (socketpair(AF_UNIX, SOCK_STREAM, PF_UNSPEC, sp) < 0) {
		perror("rcmdsh: socketpair");
		return(-1);
	}

	cpid = fork();
	if (cpid < 0) {
		perror("rcmdsh: fork failed");
		return(-1);
	} else if (cpid == 0) {
		/*
		 * Child.  We use sp[1] to be stdin/stdout, and close sp[0].
		 */
		(void) close(sp[0]);
		if (dup2(sp[1], 0) < 0 || dup2(0, 1) < 0) {
			perror("rcmdsh: dup2 failed");
			_exit(255);
		}
		/* Fork again to lose parent. */
		cpid = fork();
		if (cpid < 0) {
			perror("rcmdsh: fork to lose parent failed");
			_exit(255);
		}
		if (cpid > 0)
			_exit(0);

		/* In grandchild here.  Become local user for rshprog. */
		if (setuid(pw->pw_uid)) {
			(void) fprintf(stderr, "rcmdsh: setuid(%u): %s\n",
				       pw->pw_uid, strerror(errno));
			_exit(255);
		}

		/*
		 * If remote host is "localhost" and local and remote user
		 * are the same, avoid running remote shell for efficiency.
		 */
		if (!strcmp(*ahost, "localhost") && !strcmp(locuser, remuser)) {
			char *argv[4];
			if (pw->pw_shell[0] == '\0')
				rshprog = _PATH_BSHELL;
			else
				rshprog = pw->pw_shell;
			p = strrchr(rshprog, '/');
			argv[0] = p ? p + 1 : rshprog;
			argv[1] = "-c";
			argv[2] = (char *)cmd;
			argv[3] = NULL;
			execvp(rshprog, argv);
		} else if ((p = strchr(rshprog, ' ')) == NULL) {
			/* simple case */
			char *argv[6];
			p = strrchr(rshprog, '/');
			argv[0] = p ? p + 1 : rshprog;
			argv[1] = "-l";
			argv[2] = (char *)remuser;
			argv[3] = *ahost;
			argv[4] = (char *)cmd;
			argv[5] = NULL;
			execvp(rshprog, argv);
		} else {
			/* must pull args out of rshprog and dyn alloc argv */
			char **argv, **ap;
			int n;
			for (n = 7; (p = strchr(++p, ' ')) != NULL; n++)
				continue;
			rshprog = strdup(rshprog);
			ap = argv = calloc(sizeof(char *), n);
			if (rshprog == NULL || argv == NULL) {
				perror("rcmdsh");
				_exit(255);
			}
			while ((p = strsep(&rshprog, " ")) != NULL) {
				if (*p == '\0')
					continue;
				*ap++ = p;
			}
			if (ap != argv)		/* all spaces?!? */
				rshprog = argv[0];
			if ((p = strrchr(argv[0], '/')) != NULL)
				argv[0] = p + 1;
			*ap++ = "-l";
			*ap++ = (char *)remuser;
			*ap++ = *ahost;
			*ap++ = (char *)cmd;
			*ap++ = NULL;
			execvp(rshprog, argv);
		}
		(void) fprintf(stderr, "rcmdsh: execvp %s failed: %s\n",
			       rshprog, strerror(errno));
		_exit(255);
	} else {
		/* Parent. close sp[1], return sp[0]. */
		(void) close(sp[1]);
		/* Reap child. */
		while (waitpid(cpid, NULL, 0) == -1 && errno == EINTR)
			;
		return(sp[0]);
	}
	/* NOTREACHED */
}
DEF_WEAK(rcmdsh);
@


1.18
log
@Use reentrant versions of getpw{nam,uid} and getgr{nam,gid} within
libc to avoid reusing the static buffers returned by the non-reentrant
versions.  Since this is inside libc we can use constants for the
buffer sizes instead of having to call sysconf().
OK guenther@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.17 2015/11/01 03:45:29 guenther Exp $	*/ 
d41 1
d59 2
a60 1
	struct hostent *hp;
d79 10
a88 3
		if ((hp = gethostbyname2(*ahost, AF_INET)) ||
		    (hp = gethostbyname2(*ahost, AF_INET6)))
			*ahost = hp->h_name;
@


1.17
log
@delete old lint ARGSUSED comments
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.16 2015/10/23 04:45:32 guenther Exp $	*/ 
d61 2
a62 2
	char *p;
	struct passwd *pw;
d69 2
a70 1
	if ((pw = getpwnam(locuser)) == NULL) {
@


1.16
log
@Use waitpid() instead of wait() to avoid returning early from another child
exiting, and loop the waitpid() on EINTR

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.15 2015/09/12 14:56:50 guenther Exp $	*/ 
a53 1
/* ARGSUSED */
@


1.15
log
@Wrap <unistd.h> so that internal calls go direct and they're all weak symbols
Delete unused 'fd' argument from internal function oldttyname()
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.14 2015/03/23 22:29:32 halex Exp $	*/ 
d179 2
a180 1
		(void) wait(NULL);
@


1.14
log
@Make rcmdsh(3) not fail if it is passed a non resolvable hostname.
Instead, silently ignore the fact and instead let the underlying
ssh (or $RSH) command handle it.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.13 2014/04/24 18:56:24 jmc Exp $	*/ 
d184 1
@


1.13
log
@uses ssh these days, not rsh; ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.12 2007/09/02 15:19:17 deraadt Exp $	*/ 
d77 3
a79 6
		if (((hp = gethostbyname2(*ahost, AF_INET)) == NULL) &&
		    ((hp = gethostbyname2(*ahost, AF_INET6)) == NULL)) {
			herror(*ahost);
			return(-1);
		}
		*ahost = hp->h_name;
@


1.12
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.11 2005/08/06 20:30:03 espie Exp $	*/ 
d50 1
a50 1
 * This is a replacement rcmd() function that uses the rsh(1)
@


1.11
log
@zap rcsid.
split functions off res_debug.c so that getnetnamadr.c does not pull it
all when it's used.

okay deraadt@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.10 2005/03/25 13:24:12 otto Exp $	*/ 
d154 1
a154 1
			ap = argv = malloc(sizeof(char *) * n);
@


1.10
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.9 2004/04/01 04:14:29 marc Exp $	*/ 
a34 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: rcmdsh.c,v 1.9 2004/04/01 04:14:29 marc Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.9
log
@
let rcmdsh work on hosts that don't have an ipv4 address.
If it works it is fine with me -- millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.8 2003/05/05 22:13:03 millert Exp $	*/ 
d37 1
a37 1
static char *rcsid = "$OpenBSD: rcmdsh.c,v 1.8 2003/05/05 22:13:03 millert Exp $";
d60 2
a61 5
rcmdsh(ahost, rport, locuser, remuser, cmd, rshprog)
	char **ahost;
	int rport;
	const char *locuser, *remuser, *cmd;
	char *rshprog;
@


1.8
log
@Add support for command line args in rshprog, e.g. "ssh -C".
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.7 2002/03/12 00:05:44 millert Exp $	*/ 
d37 1
a37 1
static char *rcsid = "$OpenBSD: rcmdsh.c,v 1.7 2002/03/12 00:05:44 millert Exp $";
d84 2
a85 1
		if ((hp = gethostbyname(*ahost)) == NULL) {
@


1.7
log
@Tack on MagniComp (BSD) license since this originally came from rdist.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.6 2002/01/02 20:18:32 deraadt Exp $	*/ 
d37 1
a37 1
static char *rcsid = "$OpenBSD: rcmdsh.c,v 1.6 2002/01/02 20:18:32 deraadt Exp $";
d47 1
d131 1
d137 16
a152 2
			execlp(rshprog, p ? p+1 : rshprog, "-c", cmd,
			       (char *) NULL);
d154 26
a179 3
			p = strrchr(rshprog, '/');
			execlp(rshprog, p ? p+1 : rshprog, *ahost, "-l",
			       remuser, cmd, (char *) NULL);
d181 1
a181 1
		(void) fprintf(stderr, "rcmdsh: execlp %s failed: %s\n",
@


1.6
log
@more pid_t use
@
text
@d1 29
a29 1
/*	$OpenBSD: rcmdsh.c,v 1.5 1998/04/25 16:23:58 millert Exp $	*/ 
d37 1
a37 1
static char *rcsid = "$OpenBSD: rcmdsh.c,v 1.5 1998/04/25 16:23:58 millert Exp $";
@


1.5
log
@Use PF_UNSPEC as proto in socketpair() instead of just 0 for clarity.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.4 1997/07/23 16:59:37 millert Exp $	*/ 
d9 1
a9 1
static char *rcsid = "$OpenBSD: rcmdsh.c,v 1.4 1997/07/23 16:59:37 millert Exp $";
d38 2
a39 1
	int cpid, sp[2];
@


1.4
log
@Don't do a gethostbyname() on "localhost" since we need it to
be unmolested when we test whether or not to use a local shell
instead of rsh.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.3 1996/09/15 09:31:17 tholo Exp $	*/ 
d9 1
a9 1
static char *rcsid = "$OpenBSD: rcmdsh.c,v 1.3 1996/09/15 09:31:17 tholo Exp $";
d62 1
a62 1
	if (socketpair(AF_UNIX, SOCK_STREAM, 0, sp) < 0) {
@


1.3
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.2 1996/09/01 20:28:22 millert Exp $	*/ 
d9 1
a9 1
static char *rcsid = "$OpenBSD: rcmdsh.c,v 1.2 1996/09/01 20:28:22 millert Exp $";
d53 6
a58 3
	if ((hp = gethostbyname(*ahost)) == NULL) {
		herror(*ahost);
		return(-1);
a59 1
	*ahost = hp->h_name;
@


1.2
log
@Don't dup stderr, you lose error messages and rsh does it for us anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcmdsh.c,v 1.1 1996/08/22 20:11:20 millert Exp $	*/ 
d9 1
a9 1
static char *rcsid = "$OpenBSD: rcmdsh.c,v 1.1 1996/08/22 20:11:20 millert Exp $";
d22 1
d29 1
d33 2
a34 2
	u_short	rport;
	char *locuser, *remuser, *cmd;
d114 1
a114 1
	} else if (cpid > 0) {
d121 1
a121 1
	/*NOTREACHED*/
@


1.1
log
@Adds rcmdsh() -- rcmd-alike using rsh (or specified shell).
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/ 
d9 1
a9 1
static char *rcsid = "$OpenBSD: rcmdsh.c,v 1.1 1996/07/19 21:47:15 millert Exp $";
d72 1
a72 1
		if (dup2(sp[1], 0) < 0 || dup2(0, 1) < 0 || dup2(0, 2) < 0) {
@
