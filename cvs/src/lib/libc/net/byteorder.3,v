head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.6
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.8
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.18.0.6
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.17.0.4
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.2
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.12
	OPENBSD_5_0:1.16.0.10
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.8
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.6
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.4
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.8
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.6
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.4
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.14
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.12
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.10
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.8
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.22
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.21;
commitid	QU70QaxjyBAtj4Rv;

1.21
date	2014.07.13.20.40.34;	author jmc;	state Exp;
branches;
next	1.20;
commitid	ZaxurGqQAqunPjMk;

1.20
date	2014.07.13.15.06.02;	author miod;	state Exp;
branches;
next	1.19;
commitid	ZM5Evn95FdsI1K0L;

1.19
date	2014.07.13.13.17.16;	author guenther;	state Exp;
branches;
next	1.18;
commitid	7TxkKYXjwJHLBmlJ;

1.18
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2012.03.20.06.06.03;	author dlg;	state Exp;
branches;
next	1.16;

1.16
date	2009.03.17.21.33.04;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.31.19.19.30;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2005.07.22.04.50.51;	author jaredy;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.26.17.06.50;	author fgsch;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.26.16.50.14;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.21.18.11.27;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.21.10.50.15;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.18.03.01.30;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.07.05.04.40.59;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.23.14.11.01;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	97.11.19.23.30.17;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.04.05.21.13.05;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.11.25.13.11.12;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.28.34;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.01;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@.\"	$OpenBSD: byteorder.3,v 1.21 2014/07/13 20:40:34 jmc Exp $
.\"
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: July 13 2014 $
.Dt HTOBE64 3
.Os
.Sh NAME
.Nm htobe64 ,
.Nm htobe32 ,
.Nm htobe16 ,
.Nm be64toh ,
.Nm be32toh ,
.Nm be16toh ,
.Nm betoh64 ,
.Nm betoh32 ,
.Nm betoh16 ,
.Nm htole64 ,
.Nm htole32 ,
.Nm htole16 ,
.Nm le64toh ,
.Nm le32toh ,
.Nm le16toh ,
.Nm letoh64 ,
.Nm letoh32 ,
.Nm letoh16 ,
.Nm swap64 ,
.Nm swap32 ,
.Nm swap16
.Nd convert values between different byte orderings
.Sh SYNOPSIS
.In endian.h
.Ft uint64_t
.Fn htobe64 "uint64_t host64"
.Ft uint32_t
.Fn htobe32 "uint32_t host32"
.Ft uint16_t
.Fn htobe16 "uint16_t host16"
.Ft uint64_t
.Fn be64toh "uint64_t big64"
.Ft uint32_t
.Fn be32toh "uint32_t big32"
.Ft uint16_t
.Fn be16toh "uint16_t big16"
.Ft uint64_t
.Fn betoh64 "uint64_t big64"
.Ft uint32_t
.Fn betoh32 "uint32_t big32"
.Ft uint16_t
.Fn betoh16 "uint16_t big16"
.Ft uint64_t
.Fn htole64 "uint64_t host64"
.Ft uint32_t
.Fn htole32 "uint32_t host32"
.Ft uint16_t
.Fn htole16 "uint16_t host16"
.Ft uint64_t
.Fn letoh64 "uint64_t little64"
.Ft uint64_t
.Fn le64toh "uint64_t little64"
.Ft uint32_t
.Fn le32toh "uint32_t little32"
.Ft uint16_t
.Fn le16toh "uint16_t little16"
.Ft uint32_t
.Fn letoh32 "uint32_t little32"
.Ft uint16_t
.Fn letoh16 "uint16_t little16"
.Ft uint64_t
.Fn swap64 "uint64_t val64"
.Ft uint32_t
.Fn swap32 "uint32_t val32"
.Ft uint16_t
.Fn swap16 "uint16_t val16"
.Sh DESCRIPTION
These routines convert 16, 32 and 64-bit quantities between different
byte orderings.
The
.Dq swap
functions reverse the byte ordering of
the given quantity; the others convert either from/to the native
byte order used by the host to/from either little- or big-endian (a.k.a
network) order.
.Pp
Apart from the swap functions,
the names containing
.Dq be
convert between host and big-endian (most significant byte first) order
of the given quantity, while the names containing
.Dq le
convert between host and little-endian (least significant byte first) order
of the given quantity.
.Pp
All these functions use the numbers
16, 32, or 64 for specifying the bitwidth of the quantities they operate on.
Currently all supported architectures are either big- or little-endian
so either the
.Dq be
or
.Dq le
variants are implemented as null macros.
.Sh SEE ALSO
.Xr htonl 3
.Sh STANDARDS
The
.Fn htobe64 ,
.Fn htobe32 ,
.Fn htobe16 ,
.Fn be64toh ,
.Fn be32toh ,
.Fn be16toh ,
.Fn htole64 ,
.Fn htole32 ,
.Fn htole16 ,
.Fn le64toh ,
.Fn le32toh ,
and
.Fn le16toh
functions are expected to conform to a future version of
.St -p1003.1 .
The other functions are extensions that should not be used
when portability is required.
.Sh HISTORY
The
.Nm swap{size}
and
.Nm {src-order}to{dst-order}{size}
functions appeared in
.Bx 4.2 .
The
.Nm {src-order}{size}to{dst-order}
functions appeared in
.Ox 5.6 .
A subset of them was submitted for standardization after
.St -p1003.1-2008 .
.Sh BUGS
The perceived antagonism between
.Sq host
and
.Sq network
byte order does not allow PDP-11 users to sleep soundly at night.
@


1.21
log
@missing bracket in previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.20 2014/07/13 15:06:02 miod Exp $
d31 1
a31 1
.Dt BYTEORDER 3
@


1.20
log
@Update BUGS section.
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.19 2014/07/13 13:17:16 guenther Exp $
d116 1
a116 1
convert between host and little-endian least significant byte first) order
@


1.19
log
@Split out ntoh[ls] and hton[ls] into their own manpage.
Update byteorder(3) to cover the new functions in <endian.h>

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.18 2013/06/05 03:39:22 tedu Exp $
d30 1
a30 1
.Dd $Mdocdate: June 5 2013 $
d162 5
a166 3
On the vax, alpha, amd64, i386, and some mips and arm architectures,
bytes are handled backwards from most everyone else in the world.
This is not expected to be fixed in the near future.
@


1.18
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.17 2012/03/20 06:06:03 dlg Exp $
d30 1
a30 1
.Dd $Mdocdate: March 20 2012 $
a33 4
.Nm htonl ,
.Nm htons ,
.Nm ntohl ,
.Nm ntohs ,
d37 3
d46 3
d57 43
a99 39
.In sys/types.h
.Ft u_int32_t
.Fn htonl "u_int32_t host32"
.Ft u_int16_t
.Fn htons "u_int16_t host16"
.Ft u_int32_t
.Fn ntohl "u_int32_t net32"
.Ft u_int16_t
.Fn ntohs "u_int16_t net16"
.Ft u_int64_t
.Fn htobe64 "u_int64_t host64"
.Ft u_int32_t
.Fn htobe32 "u_int32_t host32"
.Ft u_int16_t
.Fn htobe16 "u_int16_t host16"
.Ft u_int64_t
.Fn betoh64 "u_int64_t big64"
.Ft u_int32_t
.Fn betoh32 "u_int32_t big32"
.Ft u_int16_t
.Fn betoh16 "u_int16_t big16"
.Ft u_int64_t
.Fn htole64 "u_int64_t host64"
.Ft u_int32_t
.Fn htole32 "u_int32_t host32"
.Ft u_int16_t
.Fn htole16 "u_int16_t host16"
.Ft u_int64_t
.Fn letoh64 "u_int64_t little64"
.Ft u_int32_t
.Fn letoh32 "u_int32_t little32"
.Ft u_int16_t
.Fn letoh16 "u_int16_t little16"
.Ft u_int64_t
.Fn swap64 "u_int64_t val64"
.Ft u_int32_t
.Fn swap32 "u_int32_t val32"
.Ft u_int16_t
.Fn swap16 "u_int16_t val16"
d110 8
a117 33
Apart from the swap functions, the names can be described by this form:
{src-order}to{dst-order}{size}.
Both {src-order} and {dst-order} can take the following forms:
.Pp
.Bl -tag -width "be " -offset indent -compact
.It h
Host order.
.It n
Network order (big-endian).
.It be
Big-endian (most significant byte first).
.It le
Little-endian (least significant byte first).
.El
.Pp
One of the specified orderings must be
.Sq h .
{size} will take these forms:
.Pp
.Bl -tag -width "32 " -offset indent -compact
.It l
Long (32-bit, used in conjunction with forms involving
.Sq n ) .
.It s
Short (16-bit, used in conjunction with forms involving
.Sq n ) .
.It 16
16-bit.
.It 32
32-bit.
.It 64
64-bit.
.El
d119 1
a119 30
The swap functions are of the form: swap{size}.
.Pp
Names involving
.Sq n
convert quantities between network
byte order and host byte order.
The last letter
.Pf ( Sq s
or
.Sq l )
is a mnemonic
for the traditional names for such quantities,
.Li short
and
.Li long ,
respectively.
Today, the C concept of
.Li short
and
.Li long
integers need not coincide with this traditional misunderstanding.
On machines which have a byte order which is the same as the network
order, routines are defined as null macros.
.Pp
The functions involving either
.Dq be ,
.Dq le ,
or
.Dq swap
use the numbers
a126 9
.Pp
The routines mentioned above which have either {src-order} or {dst-order}
set to
.Sq n
are most often used in
conjunction with Internet addresses and ports as returned by
.Xr gethostbyname 3
and
.Xr getservent 3 .
d128 1
a128 2
.Xr gethostbyname 3 ,
.Xr getservent 3
d131 11
a141 3
.Fn htonl ,
.Fn htons ,
.Fn ntohl ,
d143 2
a144 2
.Fn ntohs
functions conform to
d146 2
a147 2
The other functions are extensions that should not be used when portability
is required.
d150 3
a152 1
.Nm byteorder
d155 6
@


1.17
log
@the disease is spreading
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.16 2009/03/17 21:33:04 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: March 17 2009 $
d55 1
a55 1
.Fd #include <sys/types.h>
@


1.16
log
@correct argument type for swap64(); from Thomas Pfaff
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.15 2007/05/31 19:19:30 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 31 2007 $
d204 1
a204 1
On the vax, alpha, i386, and some mips architectures,
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.14 2005/07/22 04:50:51 jaredy Exp $
d30 1
a30 1
.Dd $Mdocdate$
d89 1
a89 1
.Fn swap64 "u_int32_t val64"
@


1.14
log
@- sync prototypes and header file excerpts
- typos/spelling, punctuation, rewording, macro, and layout fixes.

help & ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.13 2003/09/26 17:06:50 fgsch Exp $
d30 1
a30 1
.Dd June 4, 1993
@


1.13
log
@put 64bit macros/functions documentation back.
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.10 2003/09/21 10:50:15 fgsch Exp $
d100 1
a100 1
the given quantity, the others converts either from/to the native
d168 1
a168 1
16, 32 and 64 for specifying the bitwidth of the quantities they operate on.
@


1.12
log
@No need to include non-standard machine/endian.h header since
sys/types does that for us.  Add a STANDARDS section that says
what is and is not standard.  OK fgsch@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.11 2003/09/21 18:11:27 fgsch Exp $
d38 1
d41 1
d44 1
d47 1
d50 1
d64 2
d70 2
d76 2
d82 2
d88 2
d95 1
a95 1
These routines convert 16- and 32-bit quantities between different
d134 2
d168 1
a168 1
16 and 32 for specifying the bitwidth of the quantities they operate on.
@


1.11
log
@revert for now.
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.10 2003/09/21 10:50:15 fgsch Exp $
a50 1
.Fd #include <machine/endian.h>
d170 11
d187 1
a187 1
On the vax, alpha, i386, and so far mips,
@


1.10
log
@document and declare 64-bit function/macros. ok millert@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.8 2000/04/18 03:01:30 aaron Exp $
a37 1
.Nm htobe64 ,
a39 1
.Nm betoh64 ,
a41 1
.Nm htole64 ,
a43 1
.Nm letoh64 ,
a45 1
.Nm swap64 ,
a59 2
.Ft u_int64_t
.Fn htobe64 "u_int64_t host64"
a63 2
.Ft u_int64_t
.Fn betoh64 "u_int64_t big64"
a67 2
.Ft u_int64_t
.Fn htole64 "u_int64_t host64"
a71 2
.Ft u_int64_t
.Fn letoh64 "u_int64_t little64"
a75 2
.Ft u_int64_t
.Fn swap64 "u_int32_t val64"
d81 1
a81 1
These routines convert 16, 32 and 64-bit quantities between different
a119 2
.It 64
64-bit.
d152 1
a152 1
16, 32 and 64 for specifying the bitwidth of the quantities they operate on.
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d38 1
d41 1
d44 1
d47 1
d50 1
d65 2
d71 2
d77 2
d83 2
d89 2
d96 1
a96 1
These routines convert 16- and 32-bit quantities between different
d135 2
d169 1
a169 1
16 and 32 for specifying the bitwidth of the quantities they operate on.
@


1.8
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.7 1999/07/05 04:40:59 aaron Exp $
d14 1
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@repairs; better English, formatting, etc.
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.6 1999/05/23 14:11:01 aaron Exp $
d86 2
a87 1
byte orderings.  The
d131 2
a132 1
byte order and host byte order.  The last letter
d141 2
a142 1
respectively.  Today, the C concept of
d182 2
a183 2
bytes are handled backwards from most everyone else in
the world.  This is not expected to be fixed in the near future.
@


1.6
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.5 1997/11/19 23:30:17 niklas Exp $
d85 4
a88 2
These routines convert 16 and 32 bit quantities between different
byte orderings.  The "swap" functions reverse the byte ordering of
d93 1
a93 1
Apart from the "swap" functions, the names can be described by this form:
d96 10
a105 9
.Bl -tag -width "be "
.It Em h
host order
.It Em n
network order (big-endian)
.It Em be
big-endian (Most significant byte first)
.It Em le
little-endian (Least significant byte first)
d108 15
a122 11
One of the specified orderings must be "h".
{Size} will take these forms:
.Bl -tag -width "32 "
.It Em l
long (32-bit, used in conjunction with forms involving "n")
.It Em s
short (16-bit, used in conjunction with forms involving "n")
.It Em 16
16-bit
.It Em 32
32-bit
d125 1
a125 1
The "swap" functions are of the form: swap{size}.
d127 17
a143 5
Names involving "n" convert quantities between network
byte order and host byte order.  The last letter (s/l) is a mnemonic
for the traditional names for such quantities, short and long,
respectively.  Today, the C concept of "short"/"long" integers
need not coincide with this traditional misunderstanding.
d147 7
a153 2
The functions involving either "be", "le" or "swap" use the numbers
(16/32) for specifying the bitwidth of the quantities they operate on.
d155 5
a159 1
so either the "be" or the "le" variants are implemented as null macros.
d162 3
a164 1
set to "n" are most often used in
d175 1
a175 1
functions appeared in 
d178 1
a178 6
On the
.Tn vax ,
.Tn alpha ,
.Tn i386 ,
and so far
.Tn mips
@


1.5
log
@Document new functions
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.4 1997/04/05 21:13:05 millert Exp $
d36 1
a36 1
.Os BSD 4.2
@


1.4
log
@Use in_addr_t not u_long and use in_port_t in some cases instead
of u_short or u_int16_t.
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.3 1996/11/25 13:11:12 niklas Exp $
d41 12
a52 2
.Nm ntohs
.Nd convert values between host and network byte order
d64 20
d85 36
a120 1
These routines convert 16 and 32 bit quantities between network
d128 8
a135 2
These routines are most often used in conjunction with Internet
addresses and ports as returned by
d149 5
a153 4
.Tn VAX ,
.Tn ALPHA ,
and
.Tn iX86
@


1.3
log
@htons et al. works on explicit 16- and 32-bit quantities and not the
machine dependent "short" and "long" integer.  Correct and enhance manpage.
Change all short and longs to u_int16_t and u_int32_t, respectively.
OpenBSD RCSIds
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.2 1996/08/19 08:28:34 tholo Exp $
d78 4
a81 1
.Tn VAX
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
.\"	$OpenBSD: byteorder.3,v 1.3 1995/02/25 06:20:27 cgd Exp $
d44 10
a53 9
.Fd #include <sys/param.h>
.Ft u_long
.Fn htonl "u_long hostlong"
.Ft u_short
.Fn htons "u_short hostshort"
.Ft u_long
.Fn ntohl "u_long netlong"
.Ft u_short
.Fn ntohs "u_short netshort"
d56 4
a59 1
byte order and host byte order.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: byteorder.3,v 1.3 1995/02/25 06:20:27 cgd Exp $
a32 2
.\"
.\"     @@(#)byteorder.3	8.1 (Berkeley) 6/4/93
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
