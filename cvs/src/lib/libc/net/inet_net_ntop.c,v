head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.6
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.8
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.12
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.10
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.28
	OPENBSD_5_0:1.6.0.26
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.24
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.22
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.18
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.20
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.16
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.12
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.05.14.11.52.43;	author jsg;	state Exp;
branches;
next	1.7;
commitid	kgPebtXuXKnHrpve;

1.7
date	2012.06.22.19.13.37;	author gilles;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.06.20.30.03;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.25.13.24.12;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.15.19.01.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.19.03.01.54;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.17.19.42.23;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.03.13.19.07.30;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.8
log
@rev 1.3 introduced a check to an if statement without adding braces.
Claudio points out the size is checked by an earlier test so just
remove it to restore the original handling of the partial octet case.

Discussed with claudio and gilles.
@
text
@/*	$OpenBSD: inet_net_ntop.c,v 1.7 2012/06/22 19:13:37 gilles Exp $	*/

/*
 * Copyright (c) 2012 by Gilles Chehade <gilles@@openbsd.org>
 * Copyright (c) 1996 by Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE
 * CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

static char *inet_net_ntop_ipv4(const u_char *, int, char *, size_t);
static char *inet_net_ntop_ipv6(const u_char *, int, char *, size_t);

/*
 * char *
 * inet_net_ntop(af, src, bits, dst, size)
 *	convert network number from network to presentation format.
 *	generates CIDR style result always.
 * return:
 *	pointer to dst, or NULL if an error occurred (check errno).
 * author:
 *	Paul Vixie (ISC), July 1996
 */
char *
inet_net_ntop(int af, const void *src, int bits, char *dst, size_t size)
{
	switch (af) {
	case AF_INET:
		return (inet_net_ntop_ipv4(src, bits, dst, size));
	case AF_INET6:
		return (inet_net_ntop_ipv6(src, bits, dst, size));
	default:
		errno = EAFNOSUPPORT;
		return (NULL);
	}
}

/*
 * static char *
 * inet_net_ntop_ipv4(src, bits, dst, size)
 *	convert IPv4 network number from network to presentation format.
 *	generates CIDR style result always.
 * return:
 *	pointer to dst, or NULL if an error occurred (check errno).
 * note:
 *	network byte order assumed.  this means 192.5.5.240/28 has
 *	0x11110000 in its fourth octet.
 * author:
 *	Paul Vixie (ISC), July 1996
 */
static char *
inet_net_ntop_ipv4(const u_char *src, int bits, char *dst, size_t size)
{
	char *odst = dst;
	u_int m;
	int b;
	char *ep;
	int advance;

	ep = dst + size;
	if (ep <= dst)
		goto emsgsize;

	if (bits < 0 || bits > 32) {
		errno = EINVAL;
		return (NULL);
	}
	if (bits == 0) {
		if (ep - dst < sizeof "0")
			goto emsgsize;
		*dst++ = '0';
		*dst = '\0';
	}

	/* Format whole octets. */
	for (b = bits / 8; b > 0; b--) {
		if (ep - dst < sizeof "255.")
			goto emsgsize;
		advance = snprintf(dst, ep - dst, "%u", *src++);
		if (advance <= 0 || advance >= ep - dst)
			goto emsgsize;
		dst += advance;
		if (b > 1) {
			if (dst + 1 >= ep)
				goto emsgsize;
			*dst++ = '.';
			*dst = '\0';
		}
	}

	/* Format partial octet. */
	b = bits % 8;
	if (b > 0) {
		if (ep - dst < sizeof ".255")
			goto emsgsize;
		if (dst != odst)
			*dst++ = '.';
		m = ((1 << b) - 1) << (8 - b);
		advance = snprintf(dst, ep - dst, "%u", *src & m);
		if (advance <= 0 || advance >= ep - dst)
			goto emsgsize;
		dst += advance;
	}

	/* Format CIDR /width. */
	if (ep - dst < sizeof "/32")
		goto emsgsize;
	advance = snprintf(dst, ep - dst, "/%u", bits);
	if (advance <= 0 || advance >= ep - dst)
		goto emsgsize;
	dst += advance;
	return (odst);

 emsgsize:
	errno = EMSGSIZE;
	return (NULL);
}

static char *
inet_net_ntop_ipv6(const u_char *src, int bits, char *dst, size_t size)
{
	int	ret;
	char	buf[sizeof("xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:255:255:255:255/128")];

	if (bits < 0 || bits > 128) {
		errno = EINVAL;
		return (NULL);
	}

	if (inet_ntop(AF_INET6, src, buf, size) == NULL)
		return (NULL);

	ret = snprintf(dst, size, "%s/%d", buf, bits);
	if (ret == -1 || ret >= size) {
		errno = EMSGSIZE;
		return (NULL); 
	}

	return (dst);
}
@


1.7
log
@add support for AF_INET6 to inet_net_pton() and inet_net_ntop()
using inet_pton() and inet_ntop() as suggested by claudio

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_ntop.c,v 1.6 2005/08/06 20:30:03 espie Exp $	*/
a116 2
			if (dst + 1 >= ep)
				goto emsgsize;
@


1.6
log
@zap rcsid.
split functions off res_debug.c so that getnetnamadr.c does not pull it
all when it's used.

okay deraadt@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_ntop.c,v 1.5 2005/03/25 13:24:12 otto Exp $	*/
d4 1
d32 1
d50 2
d139 23
@


1.5
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_ntop.c,v 1.4 2004/09/15 19:01:28 deraadt Exp $	*/
a18 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static const char rcsid[] = "$From: inet_net_ntop.c,v 8.2 1996/08/08 06:54:44 vixie Exp $";
#else
static const char rcsid[] = "$OpenBSD: inet_net_ntop.c,v 1.4 2004/09/15 19:01:28 deraadt Exp $";
#endif
#endif
@


1.4
log
@unused variables
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_ntop.c,v 1.3 2002/08/19 03:01:54 itojun Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: inet_net_ntop.c,v 1.3 2002/08/19 03:01:54 itojun Exp $";
d51 1
a51 6
inet_net_ntop(af, src, bits, dst, size)
	int af;
	const void *src;
	int bits;
	char *dst;
	size_t size;
d76 1
a76 5
inet_net_ntop_ipv4(src, bits, dst, size)
	const u_char *src;
	int bits;
	char *dst;
	size_t size;
@


1.3
log
@snprintf audit.  debug inet_neta() on non-continuous masks (like 0.255.0.255),
more pickier string manipulation.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_ntop.c,v 1.2 2002/02/17 19:42:23 millert Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: inet_net_ntop.c,v 1.2 2002/02/17 19:42:23 millert Exp $";
a87 1
	char *t;
@


1.2
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_ntop.c,v 1.1 1997/03/13 19:07:30 downsj Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: inet_net_ntop.c,v 1.1 1997/03/13 19:07:30 downsj Exp $";
d91 6
d103 1
a103 1
		if (size < sizeof "0")
d111 4
a114 1
		if (size < sizeof "255.")
d116 1
a116 2
		t = dst;
		dst += sprintf(dst, "%u", *src++);
d118 2
a122 1
		size -= (size_t)(dst - t);
d128 1
a128 1
		if (size < sizeof ".255")
a129 1
		t = dst;
d131 2
d135 4
a138 2
		dst += sprintf(dst, "%u", *src & m);
		size -= (size_t)(dst - t);
d142 4
a145 1
	if (size < sizeof "/32")
d147 1
a147 1
	dst += sprintf(dst, "/%u", bits);
@


1.1
log
@Integrate BIND 4.9.5 resolver and associated routines.

Includes the DNS aware getnetby*() routines and IPv6 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_ntop.c,v 1.1 1997/03/12 10:42:05 downsj Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: inet_net_ntop.c,v 1.1 1997/03/12 10:42:05 downsj Exp $";
d38 1
a38 2
static char *	inet_net_ntop_ipv4 __P((const u_char *src, int bits,
					char *dst, size_t size));
@

