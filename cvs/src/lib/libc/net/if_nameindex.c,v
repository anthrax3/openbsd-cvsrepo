head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.6
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.22
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.14
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.36
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.32
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.34
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.30
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.28
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.26
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.24
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.22
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.20
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.18
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.16
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.14
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.12
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.13
date	2016.12.16.17.44.59;	author krw;	state Exp;
branches;
next	1.12;
commitid	q7MaMOobu9Z5raUb;

1.12
date	2016.12.15.20.50.36;	author krw;	state Exp;
branches;
next	1.11;
commitid	Ot5jbnKuO9SfAKhp;

1.11
date	2015.10.23.13.09.19;	author claudio;	state Exp;
branches;
next	1.10;
commitid	mGDeHxFI9a2xgY6t;

1.10
date	2010.09.24.13.29.29;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.07.22.40.23;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.25.03.06.10;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.05.02.31.35;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.22.19.04.42;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.07.08.22.29.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.07.01.15.35.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.06.23.22.50.49;	author cmetz;	state Exp;
branches;
next	1.2;

1.2
date	99.06.23.22.26.03;	author cmetz;	state Exp;
branches;
next	1.1;

1.1
date	99.06.23.21.55.29;	author cmetz;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Eliminate some gcc warnings about 'unused variables', mostly by
adding appropriate #ifdef's around declarations.

ok millert@@ (with a tweak I will commit separately)
@
text
@/*	$OpenBSD: if_nameindex.c,v 1.12 2016/12/15 20:50:36 krw Exp $	*/
/*	$KAME: if_nameindex.c,v 1.7 2000/11/24 08:17:20 itojun Exp $	*/

/*-
 * Copyright (c) 2015 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 1997, 2000
 *	Berkeley Software Design, Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY Berkeley Software Design, Inc. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Berkeley Software Design, Inc. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI Id: if_nameindex.c,v 2.3 2000/04/17 22:38:05 dab Exp
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/sysctl.h>
#include <net/if.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

/*
 * From RFC 2553:
 *
 * 4.3 Return All Interface Names and Indexes
 *
 *    The if_nameindex structure holds the information about a single
 *    interface and is defined as a result of including the <net/if.h>
 *    header.
 *
 *       struct if_nameindex {
 *         unsigned int   if_index;
 *         char          *if_name;
 *       };
 *
 *    The final function returns an array of if_nameindex structures, one
 *    structure per interface.
 *
 *       struct if_nameindex  *if_nameindex(void);
 *
 *    The end of the array of structures is indicated by a structure with
 *    an if_index of 0 and an if_name of NULL.  The function returns a NULL
 *    pointer upon an error, and would set errno to the appropriate value.
 *
 *    The memory used for this array of structures along with the interface
 *    names pointed to by the if_name members is obtained dynamically.
 *    This memory is freed by the next function.
 *
 * 4.4.  Free Memory
 *
 *    The following function frees the dynamic memory that was allocated by
 *    if_nameindex().
 *
 *        #include <net/if.h>
 *
 *        void  if_freenameindex(struct if_nameindex *ptr);
 *
 *    The argument to this function must be a pointer that was returned by
 *    if_nameindex().
 */

struct if_nameindex *
if_nameindex(void)
{
	struct if_nameindex_msg *ifnm = NULL;
	struct if_nameindex *ifni = NULL, *ifni2;
	char *cp;
	size_t needed;
	unsigned int ni, i;
	int mib[6];

	mib[0] = CTL_NET;
	mib[1] = PF_ROUTE;
	mib[2] = 0;		/* protocol */
	mib[3] = 0;		/* not used */
	mib[4] = NET_RT_IFNAMES;
	mib[5] = 0;		/* no flags */
	while (1) {
		struct if_nameindex_msg *buf = NULL;

		if (sysctl(mib, 6, NULL, &needed, NULL, 0) == -1)
			goto out;
		if (needed == 0)
			break;
		if ((buf = realloc(ifnm, needed)) == NULL)
			goto out;
		ifnm = buf;
		if (sysctl(mib, 6, ifnm, &needed, NULL, 0) == -1) {
			if (errno == ENOMEM)
				continue;
			goto out;
		}
		break;
	}

	/*
	 * Allocate a chunk of memory, use the first part for the array of
	 * structures, and the last part for the strings.
	 */
	ni = needed / sizeof(*ifnm);
	ifni = calloc(ni + 1, sizeof(struct if_nameindex) + IF_NAMESIZE);
	if (ifni == NULL)
		goto out;
	cp = (char *)(ifni + (ni + 1));

	ifni2 = ifni;
	for (i = 0; i < ni; i++) {
		ifni2->if_index = ifnm[i].if_index;
		/* don't care about truncation */
		strlcpy(cp, ifnm[i].if_name, IF_NAMESIZE);
		ifni2->if_name = cp;
		ifni2++;
		cp += IF_NAMESIZE;
	}
	/* Finally, terminate the array. */
	ifni2->if_index = 0;
	ifni2->if_name = NULL;
out:
	free(ifnm);
	return ifni;
}

void
if_freenameindex(struct if_nameindex *ptr)
{
	free(ptr);
}
DEF_WEAK(if_nameindex);
DEF_WEAK(if_freenameindex);
@


1.12
log
@Nuke some trailing tabs.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nameindex.c,v 1.11 2015/10/23 13:09:19 claudio Exp $	*/
d84 1
a84 1
	size_t nbytes, needed;
@


1.11
log
@Switch if_nameindex(3) to use the new NET_RT_IFNAMES sysctl to get the
list of interface names. At the same time switch if_nametoindex(3) and
if_indextoname(3) to use if_nameindex(3) instead of getifaddrs(3).
if_nameindex(3) exposes much less then getifaddrs(3) and is allowed by
pledge(2).
With and OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nameindex.c,v 1.10 2010/09/24 13:29:29 claudio Exp $	*/
d81 1
a81 1
	struct if_nameindex_msg *ifnm = NULL;	
d95 1
a95 1
		struct if_nameindex_msg *buf = NULL;	
@


1.10
log
@Implement if_freenameindex() as a real function as required by posix.
OK deraadt@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nameindex.c,v 1.9 2002/03/07 22:40:23 millert Exp $	*/
d5 1
d32 1
a32 1
#include <net/if_dl.h>
a33 1
#include <ifaddrs.h>
d36 1
d81 2
a82 4
	struct ifaddrs *ifaddrs, *ifa;
	unsigned int ni;
	size_t nbytes;
	struct if_nameindex *ifni, *ifni2;
d84 24
a107 15

	if (getifaddrs(&ifaddrs) < 0)
		return(NULL);

	/*
	 * First, find out how many interfaces there are, and how
	 * much space we need for the string names.
	 */
	ni = 0;
	nbytes = 0;
	for (ifa = ifaddrs; ifa != NULL; ifa = ifa->ifa_next) {
		if (ifa->ifa_addr &&
		    ifa->ifa_addr->sa_family == AF_LINK) {
			nbytes += strlen(ifa->ifa_name) + 1;
			ni++;
d109 1
d113 2
a114 3
	 * Next, allocate a chunk of memory, use the first part
	 * for the array of structures, and the last part for
	 * the strings.
d116 2
a117 2
	cp = malloc((ni + 1) * sizeof(struct if_nameindex) + nbytes);
	ifni = (struct if_nameindex *)cp;
d120 1
a120 1
	cp += (ni + 1) * sizeof(struct if_nameindex);
a121 5
	/*
	 * Now just loop through the list of interfaces again,
	 * filling in the if_nameindex array and making copies
	 * of all the strings.
	 */
d123 7
a129 11
	for (ifa = ifaddrs; ifa != NULL; ifa = ifa->ifa_next) {
		if (ifa->ifa_addr &&
		    ifa->ifa_addr->sa_family == AF_LINK) {
			ifni2->if_index =
			    ((struct sockaddr_dl*)ifa->ifa_addr)->sdl_index;
			ifni2->if_name = cp;
			nbytes = strlen(ifa->ifa_name) + 1;
			memcpy(cp, ifa->ifa_name, nbytes);
			ifni2++;
			cp += nbytes;
		}
d131 1
a131 3
	/*
	 * Finally, don't forget to terminate the array.
	 */
d135 2
a136 2
	freeifaddrs(ifaddrs);
	return(ifni);
d144 2
@


1.9
log
@Replace SIOCGIFCONF-using NRL versions with KAME versions that use
getifaddrs(3).  Fixes problems on LP64 platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d140 6
@


1.8
log
@skip sockaddr correctly if sa_len < sockaddr.  from niklas
@
text
@d1 6
a6 2
/*
 * Copyright (c) 1998-1999, Craig Metz, All rights reserved.
a12 10
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Craig Metz and
 *      by other contributors.
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d14 1
a14 1
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
d17 1
a17 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d25 2
a28 1
#include <stdlib.h>
d31 1
a31 1
#include <sys/ioctl.h>
d33 2
a34 3
#include <net/if_dl.h>
#include <errno.h>
#include <unistd.h>
d37 40
d80 5
a84 9
	int     i, j, fd = -1, extra, len = 0;
	struct if_nameindex *nameindex = NULL;
	struct ifconf ifconf;
	char    lastname[IFNAMSIZ], *c, *inbuf;
	struct if_nameindex *n;
	struct sockaddr *sa;
	void   *p;

	ifconf.ifc_buf = NULL;
d86 2
a87 2
	if ((fd = socket(PF_INET, SOCK_DGRAM, 0)) < 0)
		goto ret;
d90 2
a91 3
	 * Try ifc_len == 0 hack first, to get the actual length.
	 * If that fails, revert to a loop which grows the ifc_buf
	 * until it is sufficiently large.
d93 7
a99 16
	extra = sizeof(struct ifreq);
	while (1) {
		ifconf.ifc_len = len;
		if (ioctl(fd, SIOCGIFCONF, (void *) &ifconf) == -1 &&
		    ifconf.ifc_buf)
			goto ret;
		if (ifconf.ifc_buf &&
		    ifconf.ifc_len + extra < len)
			break;
		if (ifconf.ifc_buf) {
			if (len == 0)
				len = 4096;
			ifconf.ifc_len = len *= 2;
		} else {
			len = ifconf.ifc_len;
			extra = 0;
a100 4
		inbuf = realloc(ifconf.ifc_buf, ifconf.ifc_len);
		if (inbuf == NULL)
			goto ret;
		ifconf.ifc_buf = inbuf;
d103 10
a112 27
	i = sizeof(struct if_nameindex);
	j = 0;
	p = ifconf.ifc_buf;
	len = ifconf.ifc_len;
	lastname[0] = 0;
	lastname[sizeof(lastname)-1] = 0;

	while (len > 0) {
		if (len < (IFNAMSIZ + sizeof(struct sockaddr)))
			goto ret;
		if (strncmp(lastname, p, IFNAMSIZ)) {
			strlcpy(lastname, p, sizeof(lastname));
			i += sizeof(struct if_nameindex);
			j += strlen(lastname) + 1;
		}
		len -= IFNAMSIZ;
		p += IFNAMSIZ;
		sa = p;

		if (sa->sa_len < sizeof(struct sockaddr))
			sa->sa_len = sizeof(struct sockaddr);

		if (len < sa->sa_len)
			goto ret;
		len -= sa->sa_len;
		p += sa->sa_len;
	}
d114 16
a129 38
	nameindex = malloc(i + j);
	if (nameindex == NULL) {
		errno = ENOMEM;
		goto ret;
	}
	memset(nameindex, 0, i + j);

	n = nameindex;
	p = ifconf.ifc_buf;
	c = (void *) nameindex + i;
	i = 0;
	len = ifconf.ifc_len;
	lastname[0] = 0;

	while (len > 0) {
		if (len < IFNAMSIZ + sizeof(struct sockaddr))
			goto ret;
		if (strncmp(lastname, p, IFNAMSIZ)) {
			if (i) {
				if (!n->if_index)
					n->if_index = i;
				n++;
			}
			i++;
			memcpy(lastname, p, sizeof(lastname));
			strlcpy(c, lastname, sizeof(lastname));
			n->if_name = c;
			c += strlen(c) + 1;
		}
		len -= IFNAMSIZ;
		p += IFNAMSIZ;
		sa = p;

		if (len < sa->sa_len)
			goto ret;
		if (sa->sa_family == AF_LINK) {
			struct sockaddr_dl *sd = (struct sockaddr_dl *)sa;
			n->if_index = sd->sdl_index;
a130 2
		len -= sa->sa_len;
		p += sa->sa_len;
d132 8
a139 10

	if (n->if_index == 0)
		n->if_index = i;

ret:
	if (fd != -1)
		close(fd);
	if (ifconf.ifc_buf)
		free(ifconf.ifc_buf);
	return (nameindex);
@


1.7
log
@repair copyright notices for NRL & cmetz; cmetz
@
text
@d106 3
@


1.6
log
@Wall
@
text
@a1 1
 * %%% copyright-cmetz-98-bsd
@


1.5
log
@use SIOCGIFCONF much more carefully
@
text
@d41 1
a51 1
	struct sockaddr_dl *sd;
@


1.4
log
@indent and audit
@
text
@d46 1
a46 1
	int     i, j, fd, len;
d49 1
a49 1
	char    lastname[IFNAMSIZ], *c;
d55 2
d58 1
a58 1
		return NULL;
d60 27
a86 10
	ifconf.ifc_len = 0;
	ifconf.ifc_buf = 0;
	if (ioctl(fd, SIOCGIFCONF, (void *) &ifconf))
		goto ret;
	if (ifconf.ifc_len < IFNAMSIZ)
		goto ret;
	if (!(ifconf.ifc_buf = malloc(ifconf.ifc_len)))
		goto ret;
	if (ioctl(fd, SIOCGIFCONF, (void *) &ifconf))
		goto ret;
d160 2
a161 1
	close(fd);
@


1.3
log
@Compilation fixes.
@
text
@d4 1
a4 1
 * 
a19 12
 * 
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
a20 16
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Craig Metz and
 *      by other contributors.
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
a31 1
 *
d41 1
d43 2
a44 1
struct if_nameindex *if_nameindex(void)
d46 93
a138 90
  int i, j, fd;
  struct if_nameindex *nameindex = NULL;
  struct ifconf ifconf;
  void *p;
  int len;
  char lastname[IFNAMSIZ + 1];

  if ((fd = socket(PF_INET, SOCK_DGRAM, 0)) < 0)
    return NULL;

  ifconf.ifc_len = 0;
  ifconf.ifc_buf = 0;
  if (ioctl(fd, SIOCGIFCONF, (void *)&ifconf))
    goto ret;
  if (ifconf.ifc_len < IFNAMSIZ)
    goto ret;
  if (!(ifconf.ifc_buf = malloc(ifconf.ifc_len)))
    goto ret;
  if (ioctl(fd, SIOCGIFCONF, (void *)&ifconf))
    goto ret;

  i = sizeof(struct if_nameindex);
  j = 0;
  p = ifconf.ifc_buf;
  len = ifconf.ifc_len;
  lastname[0] = 0;
  lastname[IFNAMSIZ] = 0;

  while(len > 0) {
    if (len < (IFNAMSIZ + sizeof(struct sockaddr)))
      goto ret;
    if (strncmp(lastname, p, IFNAMSIZ)) {
      memcpy(lastname, p, IFNAMSIZ);
      i += sizeof(struct if_nameindex);
      j += strlen(lastname) + 1; 
    };
    len -= IFNAMSIZ;
    p += IFNAMSIZ;

    if (len < SA_LEN((struct sockaddr *)p))
      goto ret;
    len -= SA_LEN((struct sockaddr *)p);
    p += SA_LEN((struct sockaddr *)p);
  };

  if (!(nameindex = malloc(i + j))) {
    errno = ENOMEM;
    goto ret;
  };
  memset(nameindex, 0, i + j);

  {
  struct if_nameindex *n;
  char *c;

  n = nameindex;
  p = ifconf.ifc_buf;
  c = (void *)nameindex + i;
  i = 0;
  len = ifconf.ifc_len;
  lastname[0] = 0;

  while(len > 0) {
    if (len < (IFNAMSIZ + sizeof(struct sockaddr)))
      goto ret;
    if (strncmp(lastname, p, IFNAMSIZ)) {
      if (i) {
	if (!n->if_index)
	  n->if_index = i;
	n++;
      };
      i++;
      memcpy(lastname, p, IFNAMSIZ);
      strcpy(n->if_name = c, lastname);
      c += strlen(c) + 1;
    };
    len -= IFNAMSIZ;
    p += IFNAMSIZ;

    if (len < SA_LEN((struct sockaddr *)p))
      goto ret;
    if (((struct sockaddr *)p)->sa_family == AF_LINK)
      n->if_index = ((struct sockaddr_dl *)p)->sdl_index;
    len -= SA_LEN((struct sockaddr *)p);
    p += SA_LEN((struct sockaddr *)p);
  };

  if (!n->if_index)
    n->if_index = i;
  };
d141 5
a145 4
  close(fd);
  free(ifconf.ifc_buf);
  return nameindex;
};
@


1.2
log
@Removed portability ifdefs and calls to nonstandard back-end.
@
text
@d87 1
a87 1
  if (ifconf->ifc_len < IFNAMSIZ)
d89 1
a89 1
  if (!(ifconf->ifc_buf = malloc(ifconf->ifc_len)))
@


1.1
log
@Added some protocol independent interfaces (supposedly IPv6 support APIs, but
ones that are useful for all protocols, not just IPv6).
@
text
@a60 27
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Craig Metz and
 *      by other contributors.
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
a67 1
#ifdef AF_LINK
a68 1
#endif /* AF_LINK */
d83 10
a92 4
  if (__siocgifconf(fd, &ifconf)) {
    close(fd);
    return NULL;
  };
a124 3
#ifdef SIOCGIFINDEX
  struct ifreq ifreq;
#endif /* SIOCGIFINDEX */
d140 2
a141 10
	if (!n->if_index) {
#ifdef SIOCGIFINDEX
	strcpy(ifreq.ifr_name, lastname);
	if (ioctl(fd, SIOCGIFINDEX, &ifreq))
	  goto ret;
	n->if_index = ifreq.ifr_ifindex;
#else /* SIOCGIFINDEX */
	n->if_index = i;
#endif /* SIOCGIFINDEX */
	};
a153 1
#ifdef AF_LINK
a155 1
#endif /* AF_LINK */
d160 1
a160 7
  if (!n->if_index) {
#ifdef SIOCGIFINDEX
    strcpy(ifreq.ifr_name, lastname);
    if (ioctl(fd, SIOCGIFINDEX, &ifreq))
      goto ret;
    n->if_index = ifreq.ifr_ifindex;
#else /* SIOCGIFINDEX */
a161 2
#endif /* SIOCGIFINDEX */
  };
@

