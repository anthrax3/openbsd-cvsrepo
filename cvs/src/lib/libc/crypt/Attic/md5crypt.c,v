head	1.18;
access;
symbols
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.20
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.16
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.14
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.12
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.10
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.8
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.6
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.4
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.18
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.16
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.14
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.12
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.10
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.8
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.6
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.18
date	2014.05.12.19.13.14;	author tedu;	state dead;
branches;
next	1.17;

1.17
date	2014.04.03.15.55.29;	author beck;	state Exp;
branches;
next	1.16;

1.16
date	2013.04.21.18.31.56;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.31.13.29.07;	author sobrado;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.08.08.05.33;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.07.00.30.21;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.25.21.16.47;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.02.20.35.29;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.22;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.07.23.20.58.27;	author kstailey;	state Exp;
branches;
next	1.8;

1.8
date	97.06.29.05.48.02;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.12.14.06.49.36;	author tholo;	state Exp;
branches;
next	1.6;

1.6
date	96.10.15.09.25.32;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.09.15.09.30.46;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.08.19.08.19.50;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.07.02.23.05.38;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.03.22.20.37;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.05.30.02.36.33;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@remove md5crypt.
while changing things, add a crypt_checkpass wrapper that handles most of
the edge cases. (not quite ready for production, though.)
ok deraadt
@
text
@/*	$OpenBSD: md5crypt.c,v 1.17 2014/04/03 15:55:29 beck Exp $	*/

/*
 * Copyright (c) 2000 Poul-Henning Kamp <phk@@FreeBSD.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * If we meet some day, and you think this stuff is worth it, you
 * can buy me a beer in return. Poul-Henning Kamp
 */

#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <md5.h>
#include <string.h>

static unsigned char itoa64[] =		/* 0 ... 63 => ascii - 64 */
	"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

static void to64(char *, u_int32_t, int);

static void
to64(char *s, u_int32_t v, int n)
{
	while (--n >= 0) {
		*s++ = itoa64[v&0x3f];
		v >>= 6;
	}
}

/*
 * UNIX password
 *
 * Use MD5 for what it is best at...
 */

char *md5crypt(const char *pw, const char *salt);

char *
md5crypt(const char *pw, const char *salt)
{
	/*
	 * This string is the magic for this algorithm.
	 * Having it this way, we can get better later on.
	 */
	static unsigned char	*magic = (unsigned char *)"$1$";

	static char     passwd[120], *p;
	static const unsigned char *sp,*ep;
	unsigned char	final[16];
	int sl,pl,i;
	MD5_CTX	ctx,ctx1;
	u_int32_t l;

	/* Refine the salt first */
	sp = (const unsigned char *)salt;

	/* If it starts with the magic string, then skip that */
	if(!strncmp((const char *)sp,(const char *)magic,strlen((const char *)magic)))
		sp += strlen((const char *)magic);

	/* It stops at the first '$', max 8 chars */
	for(ep=sp;*ep && *ep != '$' && ep < (sp+8);ep++)
		continue;

	/* get the length of the true salt */
	sl = ep - sp;

	MD5Init(&ctx);

	/* The password first, since that is what is most unknown */
	MD5Update(&ctx,(const unsigned char *)pw,strlen(pw));

	/* Then our magic string */
	MD5Update(&ctx,magic,strlen((const char *)magic));

	/* Then the raw salt */
	MD5Update(&ctx,sp,sl);

	/* Then just as many characters of the MD5(pw,salt,pw) */
	MD5Init(&ctx1);
	MD5Update(&ctx1,(const unsigned char *)pw,strlen(pw));
	MD5Update(&ctx1,sp,sl);
	MD5Update(&ctx1,(const unsigned char *)pw,strlen(pw));
	MD5Final(final,&ctx1);
	for(pl = strlen(pw); pl > 0; pl -= 16)
		MD5Update(&ctx,final,pl>16 ? 16 : pl);

	/* Don't leave anything around in vm they could use. */
	memset(final,0,sizeof final);

	/* Then something really weird... */
	for (i = strlen(pw); i ; i >>= 1)
		if(i&1)
		    MD5Update(&ctx, final, 1);
		else
		    MD5Update(&ctx, (const unsigned char *)pw, 1);

	/* Now make the output string */
	snprintf(passwd, sizeof(passwd), "%s%.*s$", (char *)magic,
	    sl, (const char *)sp);

	MD5Final(final,&ctx);

	/*
	 * And now, just to make sure things don't run too fast
	 * On a 60 MHz Pentium this takes 34 msec, so you would
	 * need 30 seconds to build a 1000 entry dictionary...
	 * On a modern machine, with possible GPU optimization,
	 * this will run a lot faster than that.
	 */
	for(i=0;i<1000;i++) {
		MD5Init(&ctx1);
		if(i & 1)
			MD5Update(&ctx1,(const unsigned char *)pw,strlen(pw));
		else
			MD5Update(&ctx1,final,16);

		if(i % 3)
			MD5Update(&ctx1,sp,sl);

		if(i % 7)
			MD5Update(&ctx1,(const unsigned char *)pw,strlen(pw));

		if(i & 1)
			MD5Update(&ctx1,final,16);
		else
			MD5Update(&ctx1,(const unsigned char *)pw,strlen(pw));
		MD5Final(final,&ctx1);
	}

	p = passwd + strlen(passwd);

	l = (final[ 0]<<16) | (final[ 6]<<8) | final[12]; to64(p,l,4); p += 4;
	l = (final[ 1]<<16) | (final[ 7]<<8) | final[13]; to64(p,l,4); p += 4;
	l = (final[ 2]<<16) | (final[ 8]<<8) | final[14]; to64(p,l,4); p += 4;
	l = (final[ 3]<<16) | (final[ 9]<<8) | final[15]; to64(p,l,4); p += 4;
	l = (final[ 4]<<16) | (final[10]<<8) | final[ 5]; to64(p,l,4); p += 4;
	l =		       final[11]		; to64(p,l,2); p += 2;
	*p = '\0';

	/* Don't leave anything around in vm they could use. */
	memset(final, 0, sizeof final);

	return passwd;
}

@


1.17
log
@I have discussed these licenses with Poul-Henning Kamp and he has agreed to
this license change. We will remember that we all still like beer.
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.16 2013/04/21 18:31:56 tedu Exp $	*/
@


1.16
log
@tweak a few comments
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.15 2009/10/31 13:29:07 sobrado Exp $	*/
d4 1
a4 6
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <phk@@login.dknet.dk> wrote this file.  As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 * ----------------------------------------------------------------------------
d6 3
a8 1
 * $FreeBSD: crypt.c,v 1.5 1996/10/14 08:34:02 phk Exp $
d10 12
@


1.15
log
@s/Mhz/MHz/, MHz is a multiple of the SI unit hertz (whose symbol is Hz).
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.14 2005/08/08 08:05:33 espie Exp $	*/
d47 2
a48 2
	 * This string is magic for this algorithm.  Having
	 * it this way, we can get get better later on
d59 1
a59 1
	/* Refine the Salt first */
d110 1
a110 1
	 * and now, just to make sure things don't run too fast
d113 2
@


1.14
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.13 2003/08/07 00:30:21 deraadt Exp $	*/
d111 1
a111 1
	 * On a 60 Mhz Pentium this takes 34 msec, so you would
@


1.13
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.12 2003/06/25 21:16:47 deraadt Exp $	*/
a13 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.12 2003/06/25 21:16:47 deraadt Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.12
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.11 2003/04/02 20:35:29 millert Exp $	*/
d16 1
a16 1
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.11 2003/04/02 20:35:29 millert Exp $";
d31 1
a31 4
to64(s, v, n)
	char *s;
	u_int32_t v;
	int n;
d48 1
a48 3
md5crypt(pw, salt)
	register const char *pw;
	register const char *salt;
d149 1
a149 1
	memset(final,0,sizeof final);
@


1.11
log
@Use snprintf instead of a strcpy(), strncat() and strcat() sequence
deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.10 2002/02/16 21:27:22 millert Exp $	*/
d16 1
a16 1
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.10 2002/02/16 21:27:22 millert Exp $";
d47 2
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.9 1997/07/23 20:58:27 kstailey Exp $	*/
d16 1
a16 1
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.9 1997/07/23 20:58:27 kstailey Exp $";
d111 2
a112 3
	strcpy(passwd,(const char *)magic);
	strncat(passwd,(const char *)sp,sl);
	strcat(passwd,"$");
@


1.9
log
@tabify
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.8 1997/06/29 05:48:02 deraadt Exp $	*/
d16 1
a16 1
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.8 1997/06/29 05:48:02 deraadt Exp $";
d28 1
a28 1
static void to64 __P((char *, u_int32_t, int));
@


1.8
log
@surely not long!
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.7 1996/12/14 06:49:36 tholo Exp $	*/
d16 1
a16 1
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.7 1996/12/14 06:49:36 tholo Exp $";
d149 1
a149 1
	l =                    final[11]                ; to64(p,l,2); p += 2;
@


1.7
log
@Clean up lint and compile warnings
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.6 1996/10/15 09:25:32 deraadt Exp $	*/
d16 1
a16 1
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.6 1996/10/15 09:25:32 deraadt Exp $";
d28 1
a28 1
static void to64 __P((char *, unsigned long, int));
d33 1
a33 1
	unsigned long v;
d64 1
a64 1
	unsigned long l;
@


1.6
log
@unused variable noticed by asriel(right?), proto from mccanne; fed to freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d16 1
a16 1
static char rcsid[] = "$OpenBSD$";
d57 1
a57 1
	static char	*magic = "$1$";
d60 1
a60 1
	static const char *sp,*ep;
d62 1
a62 1
	int sl,pl,i,j;
d67 1
a67 1
	sp = salt;
d70 2
a71 2
	if(!strncmp(sp,magic,strlen(magic)))
		sp += strlen(magic);
d83 1
a83 1
	MD5Update(&ctx,pw,strlen(pw));
d86 1
a86 1
	MD5Update(&ctx,magic,strlen(magic));
d93 1
a93 1
	MD5Update(&ctx1,pw,strlen(pw));
d95 1
a95 1
	MD5Update(&ctx1,pw,strlen(pw));
d108 1
a108 1
		    MD5Update(&ctx, pw, 1);
d111 2
a112 2
	strcpy(passwd,magic);
	strncat(passwd,sp,sl);
d125 1
a125 1
			MD5Update(&ctx1,pw,strlen(pw));
d133 1
a133 1
			MD5Update(&ctx1,pw,strlen(pw));
d138 1
a138 1
			MD5Update(&ctx1,pw,strlen(pw));
@


1.5
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d1 2
d11 2
d16 1
a16 1
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.4 1996/08/19 08:19:50 tholo Exp $";
d23 1
d28 2
d57 1
a57 1
	static char	*magic = "$1$";	
d104 1
a104 1
	for (j=0,i = strlen(pw); i ; i >>= 1)
d106 1
a106 1
		    MD5Update(&ctx, final+j, 1);
d108 1
a108 1
		    MD5Update(&ctx, pw+j, 1);
@


1.4
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d12 1
a12 1
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.3 1996/07/02 23:05:38 deraadt Exp $";
d17 1
@


1.3
log
@pretty the comment
@
text
@a0 2
/*	$OpenBSD: md5crypt.c,v 1.2 1996/06/03 22:20:37 niklas Exp $ */

d12 1
a12 1
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.2 1996/06/03 22:20:37 niklas Exp $";
@


1.2
log
@Add md[245] routines in libc/md, remove md5 from libc/crypt.  Add $OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: md5crypt.c,v 1.1 1996/05/30 02:36:33 deraadt Exp $ */
d14 1
a14 1
static char rcsid[] = "$OpenBSD: md5crypt.c,v 1.1 1996/05/30 02:36:33 deraadt Exp $";
d47 6
a52 6
	static char	*magic = "$1$";	/*
						 * This string is magic for
						 * this algorithm.  Having
						 * it this way, we can get
						 * get better later on
						 */
@


1.1
log
@add md5crypt()
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d14 1
a14 1
static char rcsid[] = "$OpenBSD$";
d19 1
a19 1
#include "md5.h"
@
