head	1.31;
access;
symbols
	OPENBSD_6_1:1.31.0.8
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.31.0.4
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.30.0.4
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.20.0.38
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.34
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.32
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.30
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.28
	OPENBSD_5_0:1.20.0.26
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.24
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.22
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.18
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.20
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.16
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.14
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.12
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.10
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.8
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.6
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.4
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.2
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.19.0.2
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.18.0.6
	OPENBSD_3_6_BASE:1.18
	OPENBSD_3_5:1.18.0.4
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.16.0.4
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.13.0.14
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_8:1.13.0.12
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.10
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.13.0.8
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.13.0.6
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.13.0.4
	OPENBSD_2_4_BASE:1.13
	OPENBSD_2_3:1.13.0.2
	OPENBSD_2_3_BASE:1.13
	OPENBSD_2_2:1.12.0.2
	OPENBSD_2_2_BASE:1.12
	OPENBSD_2_1:1.10.0.2
	OPENBSD_2_1_BASE:1.10
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.31
date	2015.09.12.14.56.50;	author guenther;	state Exp;
branches;
next	1.30;
commitid	BXATo6E2rFBuIXKr;

1.30
date	2015.07.18.01.18.50;	author jeremy;	state Exp;
branches;
next	1.29;
commitid	qJScHBL8zMFYlR3i;

1.29
date	2015.07.18.00.58.19;	author tedu;	state Exp;
branches;
next	1.28;
commitid	oVtARLOFRGZjxGM9;

1.28
date	2015.05.13.21.01.54;	author bluhm;	state Exp;
branches;
next	1.27;
commitid	faIz42sjKC9SdiPL;

1.27
date	2015.04.06.20.49.41;	author tedu;	state Exp;
branches;
next	1.26;
commitid	0zZNKsx9TarD0Vu5;

1.26
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	0DYulI8hhujBHMcR;

1.25
date	2014.12.08.20.36.18;	author tedu;	state Exp;
branches;
next	1.24;
commitid	uwfz8fEq8CcGyq06;

1.24
date	2014.11.25.03.23.22;	author tedu;	state Exp;
branches;
next	1.23;
commitid	SRdnYLI0jhQs3FO6;

1.23
date	2014.11.25.03.04.22;	author tedu;	state Exp;
branches;
next	1.22;
commitid	iDTVXG6cfMbBBbPv;

1.22
date	2014.05.17.13.27.55;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2014.05.12.19.13.14;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2005.08.08.08.05.33;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2004.09.14.22.56.57;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.12.01.22.17;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.07.00.32.12;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.04.29.06.26.50;	author pvalchev;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.16.21.27.21;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.27.00.58.53;	author lebel;	state Exp;
branches;
next	1.13;

1.13
date	98.03.22.19.01.18;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	97.09.10.23.15.43;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.07.09.01.08.14;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	97.03.30.20.24.46;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.03.27.23.36.53;	author downsj;	state Exp;
branches;
next	1.8;

1.8
date	97.03.27.23.26.28;	author downsj;	state Exp;
branches;
next	1.7;

1.7
date	97.02.13.16.58.44;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	96.08.19.08.19.49;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	96.07.02.23.05.55;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.06.03.22.20.35;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.03.25.22.31.45;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.18.17.59.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.16.12.55.30;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Wrap <unistd.h> so that internal calls go direct and they're all weak symbols
Delete unused 'fd' argument from internal function oldttyname()
@
text
@/*	$OpenBSD: crypt.c,v 1.30 2015/07/18 01:18:50 jeremy Exp $	*/

#include <errno.h>
#include <pwd.h>
#include <unistd.h>

char *
crypt(const char *key, const char *setting)
{
	if (setting[0] == '$') {
		switch (setting[1]) {
		case '2':
			return bcrypt(key, setting);
		default:
			errno = EINVAL;
			return (NULL);
		}
	}
	errno = EINVAL;
	return (NULL);
}
DEF_WEAK(crypt);
@


1.30
log
@Unbreak, add errno header

OK tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.29 2015/07/18 00:58:19 tedu Exp $	*/
d5 1
d22 1
@


1.29
log
@set errno in null cases, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.28 2015/05/13 21:01:54 bluhm Exp $	*/
d3 1
@


1.28
log
@If crypt(3) is called with an unknown setting, return NULL instead
of some undefined value.
OK tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.27 2015/04/06 20:49:41 tedu Exp $	*/
d13 1
d17 1
a17 1

@


1.27
log
@bludgeon DES support out of crypt. long live the bcrypt.
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.26 2015/01/16 16:48:51 deraadt Exp $	*/
d16 2
@


1.26
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.25 2014/12/08 20:36:18 tedu Exp $	*/
a2 47
/*
 * FreeSec: libcrypt
 *
 * Copyright (c) 1994 David Burren
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the author nor the names of other contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *
 * This is an original implementation of the DES and the crypt(3) interfaces
 * by David Burren <davidb@@werj.com.au>.
 *
 * An excellent reference on the underlying algorithm (and related
 * algorithms) is:
 *
 *	B. Schneier, Applied Cryptography: protocols, algorithms,
 *	and source code in C, John Wiley & Sons, 1994.
 *
 * Note that in that book's description of DES the lookups for the initial,
 * pbox, and final permutations are inverted (this has been brought to the
 * attention of the author).  A list of errata for this book has been
 * posted to the sci.crypt newsgroup by the author and is available for FTP.
 */

#include <sys/types.h>
a3 626
#include <unistd.h>
#include <string.h>

#ifdef DEBUG
# include <stdio.h>
#endif

static const u_char	IP[64] = {
	58, 50, 42, 34, 26, 18, 10,  2, 60, 52, 44, 36, 28, 20, 12,  4,
	62, 54, 46, 38, 30, 22, 14,  6, 64, 56, 48, 40, 32, 24, 16,  8,
	57, 49, 41, 33, 25, 17,  9,  1, 59, 51, 43, 35, 27, 19, 11,  3,
	61, 53, 45, 37, 29, 21, 13,  5, 63, 55, 47, 39, 31, 23, 15,  7
};

static u_char	inv_key_perm[64];
static u_char	u_key_perm[56];
static u_char	const key_perm[56] = {
	57, 49, 41, 33, 25, 17,  9,  1, 58, 50, 42, 34, 26, 18,
	10,  2, 59, 51, 43, 35, 27, 19, 11,  3, 60, 52, 44, 36,
	63, 55, 47, 39, 31, 23, 15,  7, 62, 54, 46, 38, 30, 22,
	14,  6, 61, 53, 45, 37, 29, 21, 13,  5, 28, 20, 12,  4
};

static const u_char	key_shifts[16] = {
	1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1
};

static u_char	inv_comp_perm[56];
static const u_char	comp_perm[48] = {
	14, 17, 11, 24,  1,  5,  3, 28, 15,  6, 21, 10,
	23, 19, 12,  4, 26,  8, 16,  7, 27, 20, 13,  2,
	41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48,
	44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32
};

/*
 *	No E box is used, as it's replaced by some ANDs, shifts, and ORs.
 */

static u_char	u_sbox[8][64];
static const u_char	sbox[8][64] = {
	{
		14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,
		 0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
		 4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
		15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13
	},
	{
		15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,
		 3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
		 0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
		13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9
	},
	{
		10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,
		13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
		13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
		 1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12
	},
	{
		 7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15,
		13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
		10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
		 3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14
	},
	{
		 2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9,
		14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
		 4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
		11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3
	},
	{
		12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,
		10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
		 9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
		 4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13
	},
	{
		 4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,
		13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
		 1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
		 6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12
	},
	{
		13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,
		 1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
		 7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
		 2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11
	}
};

static u_char	un_pbox[32];
static const u_char	pbox[32] = {
	16,  7, 20, 21, 29, 12, 28, 17,  1, 15, 23, 26,  5, 18, 31, 10,
	 2,  8, 24, 14, 32, 27,  3,  9, 19, 13, 30,  6, 22, 11,  4, 25
};

const u_int32_t _des_bits32[32] =
{
	0x80000000, 0x40000000, 0x20000000, 0x10000000,
	0x08000000, 0x04000000, 0x02000000, 0x01000000,
	0x00800000, 0x00400000, 0x00200000, 0x00100000,
	0x00080000, 0x00040000, 0x00020000, 0x00010000,
	0x00008000, 0x00004000, 0x00002000, 0x00001000,
	0x00000800, 0x00000400, 0x00000200, 0x00000100,
	0x00000080, 0x00000040, 0x00000020, 0x00000010,
	0x00000008, 0x00000004, 0x00000002, 0x00000001
};

static const u_char	_des_bits8[8] = { 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01 };

static const u_int32_t *bits28, *bits24;
static u_char	init_perm[64], final_perm[64];
static u_int32_t en_keysl[16], en_keysr[16];
static u_int32_t de_keysl[16], de_keysr[16];
int	_des_initialised = 0;
static u_char	m_sbox[4][4096];
static u_int32_t psbox[4][256];
static u_int32_t ip_maskl[8][256], ip_maskr[8][256];
static u_int32_t fp_maskl[8][256], fp_maskr[8][256];
static u_int32_t key_perm_maskl[8][128], key_perm_maskr[8][128];
static u_int32_t comp_maskl[8][128], comp_maskr[8][128];
static u_int32_t old_rawkey0, old_rawkey1;

static u_char	ascii64[] =
	 "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
/*	  0000000000111111111122222222223333333333444444444455555555556666 */
/*	  0123456789012345678901234567890123456789012345678901234567890123 */

static __inline int
ascii_to_bin(char ch)
{
	if (ch > 'z')
		return(0);
	if (ch >= 'a')
		return(ch - 'a' + 38);
	if (ch > 'Z')
		return(0);
	if (ch >= 'A')
		return(ch - 'A' + 12);
	if (ch > '9')
		return(0);
	if (ch >= '.')
		return(ch - '.');
	return(0);
}

static void
_des_init(void)
{
	int	i, j, b, k, inbit, obit;
	u_int32_t	*p, *il, *ir, *fl, *fr;

	old_rawkey0 = old_rawkey1 = 0;
	bits24 = (bits28 = _des_bits32 + 4) + 4;

	/*
	 * Invert the S-boxes, reordering the input bits.
	 */
	for (i = 0; i < 8; i++)
		for (j = 0; j < 64; j++) {
			b = (j & 0x20) | ((j & 1) << 4) | ((j >> 1) & 0xf);
			u_sbox[i][j] = sbox[i][b];
		}

	/*
	 * Convert the inverted S-boxes into 4 arrays of 8 bits.
	 * Each will handle 12 bits of the S-box input.
	 */
	for (b = 0; b < 4; b++)
		for (i = 0; i < 64; i++)
			for (j = 0; j < 64; j++)
				m_sbox[b][(i << 6) | j] =
					(u_sbox[(b << 1)][i] << 4) |
					u_sbox[(b << 1) + 1][j];

	/*
	 * Set up the initial & final permutations into a useful form, and
	 * initialise the inverted key permutation.
	 */
	for (i = 0; i < 64; i++) {
		init_perm[final_perm[i] = IP[i] - 1] = i;
		inv_key_perm[i] = 255;
	}

	/*
	 * Invert the key permutation and initialise the inverted key
	 * compression permutation.
	 */
	for (i = 0; i < 56; i++) {
		u_key_perm[i] = key_perm[i] - 1;
		inv_key_perm[key_perm[i] - 1] = i;
		inv_comp_perm[i] = 255;
	}

	/*
	 * Invert the key compression permutation.
	 */
	for (i = 0; i < 48; i++) {
		inv_comp_perm[comp_perm[i] - 1] = i;
	}

	/*
	 * Set up the OR-mask arrays for the initial and final permutations,
	 * and for the key initial and compression permutations.
	 */
	for (k = 0; k < 8; k++) {
		for (i = 0; i < 256; i++) {
			*(il = &ip_maskl[k][i]) = 0;
			*(ir = &ip_maskr[k][i]) = 0;
			*(fl = &fp_maskl[k][i]) = 0;
			*(fr = &fp_maskr[k][i]) = 0;
			for (j = 0; j < 8; j++) {
				inbit = 8 * k + j;
				if (i & _des_bits8[j]) {
					if ((obit = init_perm[inbit]) < 32)
						*il |= _des_bits32[obit];
					else
						*ir |= _des_bits32[obit-32];
					if ((obit = final_perm[inbit]) < 32)
						*fl |= _des_bits32[obit];
					else
						*fr |= _des_bits32[obit - 32];
				}
			}
		}
		for (i = 0; i < 128; i++) {
			*(il = &key_perm_maskl[k][i]) = 0;
			*(ir = &key_perm_maskr[k][i]) = 0;
			for (j = 0; j < 7; j++) {
				inbit = 8 * k + j;
				if (i & _des_bits8[j + 1]) {
					if ((obit = inv_key_perm[inbit]) == 255)
						continue;
					if (obit < 28)
						*il |= bits28[obit];
					else
						*ir |= bits28[obit - 28];
				}
			}
			*(il = &comp_maskl[k][i]) = 0;
			*(ir = &comp_maskr[k][i]) = 0;
			for (j = 0; j < 7; j++) {
				inbit = 7 * k + j;
				if (i & _des_bits8[j + 1]) {
					if ((obit=inv_comp_perm[inbit]) == 255)
						continue;
					if (obit < 24)
						*il |= bits24[obit];
					else
						*ir |= bits24[obit - 24];
				}
			}
		}
	}

	/*
	 * Invert the P-box permutation, and convert into OR-masks for
	 * handling the output of the S-box arrays setup above.
	 */
	for (i = 0; i < 32; i++)
		un_pbox[pbox[i] - 1] = i;

	for (b = 0; b < 4; b++)
		for (i = 0; i < 256; i++) {
			*(p = &psbox[b][i]) = 0;
			for (j = 0; j < 8; j++) {
				if (i & _des_bits8[j])
					*p |= _des_bits32[un_pbox[8 * b + j]];
			}
		}

	_des_initialised = 1;
}

static u_int32_t
_des_setup_salt(int32_t salt)
{
	u_int32_t	obit, saltbit, saltbits;
	int	i;

	saltbits = 0;
	saltbit = 1;
	obit = 0x800000;
	for (i = 0; i < 24; i++) {
		if (salt & saltbit)
			saltbits |= obit;
		saltbit <<= 1;
		obit >>= 1;
	}
	return saltbits;
}

static int
des_setkey(const char *key)
{
	u_int32_t k0, k1, rawkey0, rawkey1;
	int	shifts, round;

	if (!_des_initialised)
		_des_init();

	rawkey0 = ntohl(*(u_int32_t *) key);
	rawkey1 = ntohl(*(u_int32_t *) (key + 4));

	if ((rawkey0 | rawkey1)
	    && rawkey0 == old_rawkey0
	    && rawkey1 == old_rawkey1) {
		/*
		 * Already setup for this key.
		 * This optimisation fails on a zero key (which is weak and
		 * has bad parity anyway) in order to simplify the starting
		 * conditions.
		 */
		return(0);
	}
	old_rawkey0 = rawkey0;
	old_rawkey1 = rawkey1;

	/*
	 *	Do key permutation and split into two 28-bit subkeys.
	 */
	k0 = key_perm_maskl[0][rawkey0 >> 25]
	   | key_perm_maskl[1][(rawkey0 >> 17) & 0x7f]
	   | key_perm_maskl[2][(rawkey0 >> 9) & 0x7f]
	   | key_perm_maskl[3][(rawkey0 >> 1) & 0x7f]
	   | key_perm_maskl[4][rawkey1 >> 25]
	   | key_perm_maskl[5][(rawkey1 >> 17) & 0x7f]
	   | key_perm_maskl[6][(rawkey1 >> 9) & 0x7f]
	   | key_perm_maskl[7][(rawkey1 >> 1) & 0x7f];
	k1 = key_perm_maskr[0][rawkey0 >> 25]
	   | key_perm_maskr[1][(rawkey0 >> 17) & 0x7f]
	   | key_perm_maskr[2][(rawkey0 >> 9) & 0x7f]
	   | key_perm_maskr[3][(rawkey0 >> 1) & 0x7f]
	   | key_perm_maskr[4][rawkey1 >> 25]
	   | key_perm_maskr[5][(rawkey1 >> 17) & 0x7f]
	   | key_perm_maskr[6][(rawkey1 >> 9) & 0x7f]
	   | key_perm_maskr[7][(rawkey1 >> 1) & 0x7f];
	/*
	 *	Rotate subkeys and do compression permutation.
	 */
	shifts = 0;
	for (round = 0; round < 16; round++) {
		u_int32_t	t0, t1;

		shifts += key_shifts[round];

		t0 = (k0 << shifts) | (k0 >> (28 - shifts));
		t1 = (k1 << shifts) | (k1 >> (28 - shifts));

		de_keysl[15 - round] =
		en_keysl[round] = comp_maskl[0][(t0 >> 21) & 0x7f]
				| comp_maskl[1][(t0 >> 14) & 0x7f]
				| comp_maskl[2][(t0 >> 7) & 0x7f]
				| comp_maskl[3][t0 & 0x7f]
				| comp_maskl[4][(t1 >> 21) & 0x7f]
				| comp_maskl[5][(t1 >> 14) & 0x7f]
				| comp_maskl[6][(t1 >> 7) & 0x7f]
				| comp_maskl[7][t1 & 0x7f];

		de_keysr[15 - round] =
		en_keysr[round] = comp_maskr[0][(t0 >> 21) & 0x7f]
				| comp_maskr[1][(t0 >> 14) & 0x7f]
				| comp_maskr[2][(t0 >> 7) & 0x7f]
				| comp_maskr[3][t0 & 0x7f]
				| comp_maskr[4][(t1 >> 21) & 0x7f]
				| comp_maskr[5][(t1 >> 14) & 0x7f]
				| comp_maskr[6][(t1 >> 7) & 0x7f]
				| comp_maskr[7][t1 & 0x7f];
	}
	return(0);
}

static int
_des_do_des(u_int32_t l_in, u_int32_t r_in, u_int32_t *l_out, u_int32_t *r_out,
    int count, u_int32_t saltbits)
{
	/*
	 *	l_in, r_in, l_out, and r_out are in pseudo-"big-endian" format.
	 */
	u_int32_t	l, r, *kl, *kr, *kl1, *kr1;
	u_int32_t	f, r48l, r48r;
	int		round;

	if (count == 0) {
		return(1);
	} else if (count > 0) {
		/*
		 * Encrypting
		 */
		kl1 = en_keysl;
		kr1 = en_keysr;
	} else {
		/*
		 * Decrypting
		 */
		count = -count;
		kl1 = de_keysl;
		kr1 = de_keysr;
	}

	/*
	 *	Do initial permutation (IP).
	 */
	l = ip_maskl[0][l_in >> 24]
	  | ip_maskl[1][(l_in >> 16) & 0xff]
	  | ip_maskl[2][(l_in >> 8) & 0xff]
	  | ip_maskl[3][l_in & 0xff]
	  | ip_maskl[4][r_in >> 24]
	  | ip_maskl[5][(r_in >> 16) & 0xff]
	  | ip_maskl[6][(r_in >> 8) & 0xff]
	  | ip_maskl[7][r_in & 0xff];
	r = ip_maskr[0][l_in >> 24]
	  | ip_maskr[1][(l_in >> 16) & 0xff]
	  | ip_maskr[2][(l_in >> 8) & 0xff]
	  | ip_maskr[3][l_in & 0xff]
	  | ip_maskr[4][r_in >> 24]
	  | ip_maskr[5][(r_in >> 16) & 0xff]
	  | ip_maskr[6][(r_in >> 8) & 0xff]
	  | ip_maskr[7][r_in & 0xff];

	while (count--) {
		/*
		 * Do each round.
		 */
		kl = kl1;
		kr = kr1;
		round = 16;
		while (round--) {
			/*
			 * Expand R to 48 bits (simulate the E-box).
			 */
			r48l	= ((r & 0x00000001) << 23)
				| ((r & 0xf8000000) >> 9)
				| ((r & 0x1f800000) >> 11)
				| ((r & 0x01f80000) >> 13)
				| ((r & 0x001f8000) >> 15);

			r48r	= ((r & 0x0001f800) << 7)
				| ((r & 0x00001f80) << 5)
				| ((r & 0x000001f8) << 3)
				| ((r & 0x0000001f) << 1)
				| ((r & 0x80000000) >> 31);
			/*
			 * Do salting for crypt() and friends, and
			 * XOR with the permuted key.
			 */
			f = (r48l ^ r48r) & saltbits;
			r48l ^= f ^ *kl++;
			r48r ^= f ^ *kr++;
			/*
			 * Do sbox lookups (which shrink it back to 32 bits)
			 * and do the pbox permutation at the same time.
			 */
			f = psbox[0][m_sbox[0][r48l >> 12]]
			  | psbox[1][m_sbox[1][r48l & 0xfff]]
			  | psbox[2][m_sbox[2][r48r >> 12]]
			  | psbox[3][m_sbox[3][r48r & 0xfff]];
			/*
			 * Now that we've permuted things, complete f().
			 */
			f ^= l;
			l = r;
			r = f;
		}
		r = l;
		l = f;
	}
	/*
	 * Do final permutation (inverse of IP).
	 */
	*l_out	= fp_maskl[0][l >> 24]
		| fp_maskl[1][(l >> 16) & 0xff]
		| fp_maskl[2][(l >> 8) & 0xff]
		| fp_maskl[3][l & 0xff]
		| fp_maskl[4][r >> 24]
		| fp_maskl[5][(r >> 16) & 0xff]
		| fp_maskl[6][(r >> 8) & 0xff]
		| fp_maskl[7][r & 0xff];
	*r_out	= fp_maskr[0][l >> 24]
		| fp_maskr[1][(l >> 16) & 0xff]
		| fp_maskr[2][(l >> 8) & 0xff]
		| fp_maskr[3][l & 0xff]
		| fp_maskr[4][r >> 24]
		| fp_maskr[5][(r >> 16) & 0xff]
		| fp_maskr[6][(r >> 8) & 0xff]
		| fp_maskr[7][r & 0xff];
	return(0);
}

static int
des_cipher(const char *in, char *out, int32_t salt, int count)
{
	u_int32_t l_out, r_out, rawl, rawr, saltbits;
	u_int32_t x[2];
	int	retval;

	if (!_des_initialised)
		_des_init();

	saltbits = _des_setup_salt(salt);

	memcpy(x, in, sizeof x);
	rawl = ntohl(x[0]);
	rawr = ntohl(x[1]);
	retval = _des_do_des(rawl, rawr, &l_out, &r_out, count, saltbits);

	x[0] = htonl(l_out);
	x[1] = htonl(r_out);
	memcpy(out, x, sizeof x);
	return(retval);
}

static int
crypt_hashpass(const char *key, const char *setting, char *output)
{
	int		i;
	u_int32_t	count, salt, l, r0, r1, saltbits, keybuf[2];
	u_char		*p, *q;

	if (!_des_initialised)
		_des_init();

	/*
	 * Copy the key, shifting each character up by one bit
	 * and padding with zeros.
	 */
	q = (u_char *) keybuf;
	while ((q - (u_char *) keybuf) < sizeof(keybuf)) {
		if ((*q++ = *key << 1))
			key++;
	}
	if (des_setkey((char *) keybuf))
		return(-1);

	if (*setting == _PASSWORD_EFMT1) {
		/*
		 * "new"-style:
		 *	setting - underscore, 4 bytes of count, 4 bytes of salt
		 *	key - unlimited characters
		 */
		for (i = 1, count = 0; i < 5; i++)
			count |= ascii_to_bin(setting[i]) << (i - 1) * 6;

		for (i = 5, salt = 0; i < 9; i++)
			salt |= ascii_to_bin(setting[i]) << (i - 5) * 6;

		while (*key) {
			/*
			 * Encrypt the key with itself.
			 */
			if (des_cipher((char *)keybuf, (char *)keybuf, 0, 1))
				return(-1);
			/*
			 * And XOR with the next 8 characters of the key.
			 */
			q = (u_char *) keybuf;
			while (((q - (u_char *) keybuf) < sizeof(keybuf)) &&
					*key)
				*q++ ^= *key++ << 1;

			if (des_setkey((char *) keybuf))
				return(-1);
		}
		strlcpy((char *)output, setting, 10);

		/*
		 * Double check that we weren't given a short setting.
		 * If we were, the above code will probably have created
		 * weird values for count and salt, but we don't really care.
		 * Just make sure the output string doesn't have an extra
		 * NUL in it.
		 */
		p = output + strlen((const char *)output);
	} else {
		/*
		 * "old"-style:
		 *	setting - 2 bytes of salt
		 *	key - up to 8 characters
		 */
		count = 25;

		salt = (ascii_to_bin(setting[1]) << 6)
		     |  ascii_to_bin(setting[0]);

		output[0] = setting[0];
		/*
		 * If the encrypted password that the salt was extracted from
		 * is only 1 character long, the salt will be corrupted.  We
		 * need to ensure that the output string doesn't have an extra
		 * NUL in it!
		 */
		output[1] = setting[1] ? setting[1] : output[0];

		p = output + 2;
	}
	saltbits = _des_setup_salt(salt);

	/*
	 * Do it.
	 */
	if (_des_do_des(0, 0, &r0, &r1, count, saltbits))
		return(-1);
	/*
	 * Now encode the result...
	 */
	l = (r0 >> 8);
	*p++ = ascii64[(l >> 18) & 0x3f];
	*p++ = ascii64[(l >> 12) & 0x3f];
	*p++ = ascii64[(l >> 6) & 0x3f];
	*p++ = ascii64[l & 0x3f];

	l = (r0 << 16) | ((r1 >> 16) & 0xffff);
	*p++ = ascii64[(l >> 18) & 0x3f];
	*p++ = ascii64[(l >> 12) & 0x3f];
	*p++ = ascii64[(l >> 6) & 0x3f];
	*p++ = ascii64[l & 0x3f];

	l = r1 << 2;
	*p++ = ascii64[(l >> 12) & 0x3f];
	*p++ = ascii64[(l >> 6) & 0x3f];
	*p++ = ascii64[l & 0x3f];
	*p = 0;

	return(0);
}
a7 3
	static u_char	goutput[21];
	extern char	*bcrypt(const char *, const char *);

a15 5

	memset(goutput, 0, sizeof(goutput));
	if (crypt_hashpass(key, setting, goutput) != 0)
		return (NULL);
	return goutput;
@


1.25
log
@remove setkey and encrypt interfaces. they are useless and dangerous.
ok deraadt naddy
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.24 2014/11/25 03:23:22 tedu Exp $	*/
a49 1
#include <sys/param.h>
@


1.24
log
@revert the bludgeoning of DES. if we need a thread safe crypt, maybe it's
better to find one instead of continuing to mangle this mess.
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.23 2014/11/25 03:04:22 tedu Exp $	*/
d161 1
a161 1
const u_char	_des_bits8[8] = { 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01 };
d199 1
a199 1
void
d327 1
a327 1
u_int32_t
d345 1
a345 1
int
d425 1
a425 1
int
d542 1
a542 1
int
@


1.23
log
@push some global data down into functions to make this threadlier.
only doing what's needed for crypt_hashpass. sigh.
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.22 2014/05/17 13:27:55 tedu Exp $	*/
d165 2
a166 2
static u_int32_t g_en_keysl[16], g_en_keysr[16];
static u_int32_t g_de_keysl[16], g_de_keysr[16];
d174 1
d205 1
d345 2
a346 2
static int
_des_do_setkey(const char *key, u_int32_t *en_keysl, u_int32_t *en_keysr)
d357 14
d402 1
a402 1
		g_de_keysl[15 - round] = /* XXX global */
d412 1
a412 1
		g_de_keysr[15 - round] = /* XXX global */
a425 6
des_setkey(const char *key)
{
	return _des_do_setkey(key, g_en_keysl, g_en_keysr);
}

int
d427 1
a427 1
    int count, u_int32_t saltbits, u_int32_t *en_keysl, u_int32_t *en_keysr)
d446 1
a446 1
		 * Decrypting XXX global
d449 2
a450 2
		kl1 = g_de_keysl;
		kr1 = g_de_keysr;
d543 1
a543 2
_des_do_cipher(const char *in, char *out, int32_t salt, int count,
    u_int32_t *en_keysl, u_int32_t *en_keysr)
d557 1
a557 1
	retval = _des_do_des(rawl, rawr, &l_out, &r_out, count, saltbits, en_keysl, en_keysr);
a564 6
int
des_cipher(const char *in, char *out, int32_t salt, int count)
{
	return _des_do_cipher(in, out, salt, count, g_en_keysl, g_en_keysr);
}

a567 1
	u_int32_t	en_keysl[16], en_keysr[16];
d584 1
a584 1
	if (_des_do_setkey((char *)keybuf, en_keysl, en_keysr))
d603 1
a603 1
			if (_des_do_cipher((char *)keybuf, (char *)keybuf, 0, 1, en_keysl, en_keysr))
d613 1
a613 1
			if (_des_do_setkey((char *)keybuf, en_keysl, en_keysr))
d653 1
a653 1
	if (_des_do_des(0, 0, &r0, &r1, count, saltbits, en_keysl, en_keysr))
@


1.22
log
@refactor some of the des crypt code to use fewer globals.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.21 2014/05/12 19:13:14 tedu Exp $	*/
d165 2
a166 2
static u_int32_t en_keysl[16], en_keysr[16];
static u_int32_t de_keysl[16], de_keysr[16];
a173 1
static u_int32_t old_rawkey0, old_rawkey1;
a203 1
	old_rawkey0 = old_rawkey1 = 0;
d343 2
a344 2
int
des_setkey(const char *key)
a354 14
	if ((rawkey0 | rawkey1)
	    && rawkey0 == old_rawkey0
	    && rawkey1 == old_rawkey1) {
		/*
		 * Already setup for this key.
		 * This optimisation fails on a zero key (which is weak and
		 * has bad parity anyway) in order to simplify the starting
		 * conditions.
		 */
		return(0);
	}
	old_rawkey0 = rawkey0;
	old_rawkey1 = rawkey1;

d386 1
a386 1
		de_keysl[15 - round] =
d396 1
a396 1
		de_keysr[15 - round] =
d410 6
d417 1
a417 1
    int count, u_int32_t saltbits)
d436 1
a436 1
		 * Decrypting
d439 2
a440 2
		kl1 = de_keysl;
		kr1 = de_keysr;
d533 2
a534 1
des_cipher(const char *in, char *out, int32_t salt, int count)
d548 1
a548 1
	retval = _des_do_des(rawl, rawr, &l_out, &r_out, count, saltbits);
d556 6
d565 1
d582 1
a582 1
	if (des_setkey((char *) keybuf))
d601 1
a601 1
			if (des_cipher((char *)keybuf, (char *)keybuf, 0, 1))
d611 1
a611 1
			if (des_setkey((char *) keybuf))
d651 1
a651 1
	if (_des_do_des(0, 0, &r0, &r1, count, saltbits))
@


1.21
log
@remove md5crypt.
while changing things, add a crypt_checkpass wrapper that handles most of
the edge cases. (not quite ready for production, though.)
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.20 2005/08/08 08:05:33 espie Exp $	*/
a162 2
static u_int32_t saltbits;
static int32_t	old_salt;
a205 2
	saltbits = 0;
	old_salt = 0;
d327 1
a327 1
void
d330 1
a330 1
	u_int32_t	obit, saltbit;
a332 4
	if (salt == old_salt)
		return;
	old_salt = salt;

d342 1
d427 1
a427 1
    int count)
d545 1
a545 1
	u_int32_t l_out, r_out, rawl, rawr;
d552 1
a552 1
	_des_setup_salt(salt);
d557 1
a557 1
	retval = _des_do_des(rawl, rawr, &l_out, &r_out, count);
d565 2
a566 2
char *
crypt(const char *key, const char *setting)
d569 1
a569 1
	u_int32_t	count, salt, l, r0, r1, keybuf[2];
a570 11
	static u_char	output[21];
	extern char	*bcrypt(const char *, const char *);

	if (setting[0] == '$') {
		switch (setting[1]) {
		case '2':
			return bcrypt(key, setting);
		default:
			return (NULL);
		}
	}
d585 1
a585 1
		return(NULL);
d604 1
a604 1
				return(NULL);
d614 1
a614 1
				return(NULL);
d648 1
a648 1
	_des_setup_salt(salt);
d653 2
a654 2
	if (_des_do_des(0, 0, &r0, &r1, count))
		return(NULL);
d676 22
a697 1
	return((char *)output);
@


1.20
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.19 2004/09/14 22:56:57 deraadt Exp $	*/
a578 1
	extern char	*md5crypt(const char *, const char *);
d583 2
a584 2
		case '1':
			return (md5crypt(key, setting));
d586 1
a586 1
			return bcrypt(key, setting);
@


1.19
log
@do the char * to u_char * song and dance back and forth explicitly as
we match API's against each other, fun eh; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.18 2003/08/12 01:22:17 deraadt Exp $	*/
a47 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: crypt.c,v 1.18 2003/08/12 01:22:17 deraadt Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.18
log
@Split crypto routine sup again, but differently.  This should make the
mail floppy parts a fair bit smaller.
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.17 2003/08/07 00:32:12 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.17 2003/08/07 00:32:12 deraadt Exp $";
d607 1
a607 1
	if (des_setkey((u_char *) keybuf))
d626 1
a626 1
			if (des_cipher((u_char*)keybuf, (u_char*)keybuf, 0, 1))
d636 1
a636 1
			if (des_setkey((u_char *) keybuf))
@


1.17
log
@unsplice crypt.c and morecrypt.c; start to document some bcrypt and md5crypt
things in crypt.3, and create MLINKS
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.16 2002/04/29 06:26:50 pvalchev Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.16 2002/04/29 06:26:50 pvalchev Exp $";
d63 1
a63 1
static u_char	IP[64] = {
d72 1
a72 1
static u_char	key_perm[56] = {
d79 1
a79 1
static u_char	key_shifts[16] = {
d84 1
a84 1
static u_char	comp_perm[48] = {
d96 1
a96 1
static u_char	sbox[8][64] = {
d148 1
a148 1
static u_char	pbox[32] = {
d153 1
a153 1
static u_int32_t bits32[32] =
d165 1
a165 1
static u_char	bits8[8] = { 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01 };
d169 1
a169 1
static u_int32_t *bits28, *bits24;
d173 1
a173 1
static int	des_initialised = 0;
d205 2
a206 2
static void
des_init(void)
d214 1
a214 1
	bits24 = (bits28 = bits32 + 4) + 4;
d274 1
a274 1
				if (i & bits8[j]) {
d276 1
a276 1
						*il |= bits32[obit];
d278 1
a278 1
						*ir |= bits32[obit-32];
d280 1
a280 1
						*fl |= bits32[obit];
d282 1
a282 1
						*fr |= bits32[obit - 32];
d291 1
a291 1
				if (i & bits8[j + 1]) {
d304 1
a304 1
				if (i & bits8[j + 1]) {
d327 2
a328 2
				if (i & bits8[j])
					*p |= bits32[un_pbox[8 * b + j]];
d332 1
a332 1
	des_initialised = 1;
d335 2
a336 2
static void
setup_salt(int32_t salt)
d362 2
a363 2
	if (!des_initialised)
		des_init();
d436 2
a437 2
static int
do_des(u_int32_t l_in, u_int32_t r_in, u_int32_t *l_out, u_int32_t *r_out,
d560 2
a561 2
	if (!des_initialised)
		des_init();
d563 1
a563 1
	setup_salt(salt);
d568 1
a568 1
	retval = do_des(rawl, rawr, &l_out, &r_out, count);
d595 2
a596 2
	if (!des_initialised)
		des_init();
d671 1
a671 1
	setup_salt(salt);
d676 1
a676 1
	if (do_des(0, 0, &r0, &r1, count))
a699 43
}

int
setkey(const char *key)
{
	int	i, j;
	u_int32_t packed_keys[2];
	u_char	*p;

	p = (u_char *) packed_keys;

	for (i = 0; i < 8; i++) {
		p[i] = 0;
		for (j = 0; j < 8; j++)
			if (*key++ & 1)
				p[i] |= bits8[j];
	}
	return(des_setkey(p));
}

int
encrypt(char *block, int flag)
{
	u_int32_t io[2];
	u_char	*p;
	int	i, j, retval;

	if (!des_initialised)
		des_init();

	setup_salt(0);
	p = (u_char *)block;
	for (i = 0; i < 2; i++) {
		io[i] = 0L;
		for (j = 0; j < 32; j++)
			if (*p++ & 1)
				io[i] |= bits32[j];
	}
	retval = do_des(io[0], io[1], io, io + 1, flag ? -1 : 1);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 32; j++)
			block[(i << 5) | j] = (io[i] & bits32[j]) ? 1 : 0;
	return(retval);
@


1.16
log
@wierd -> weird
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.15 2002/02/16 21:27:21 millert Exp $	*/
a46 5
 *
 * NOTE:
 * This file has a static version of des_setkey() so that crypt.o exports
 * only the crypt() interface. This is required to make binaries linked
 * against crypt.o exportable or re-exportable from the USA.
d50 1
a50 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.15 2002/02/16 21:27:21 millert Exp $";
d56 1
d188 1
a188 2
ascii_to_bin(ch)
	char ch;
d206 1
a206 1
des_init()
d336 1
a336 2
setup_salt(salt)
	int32_t salt;
d356 2
a357 3
static int
des_setkey(key)
	const char *key;
d437 2
a438 3
do_des(l_in, r_in, l_out, r_out, count)
	u_int32_t l_in, r_in, *l_out, *r_out;
	int count;
d553 2
a554 6
static int
des_cipher(in, out, salt, count)
	const char *in;
	char *out;
	int32_t salt;
	int count;
d577 1
a577 3
crypt(key, setting)
	const char *key;
	const char *setting;
d672 1
d700 43
@


1.15
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.14 2001/06/27 00:58:53 lebel Exp $	*/
d55 1
a55 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.14 2001/06/27 00:58:53 lebel Exp $";
d658 1
a658 1
		 * wierd values for count and salt, but we don't really care.
@


1.14
log
@use strlcpy vs strncpy+a[len-1]='\0'.  millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: crypt.c,v 1.13 1998/03/22 19:01:18 niklas Exp $	*/
d55 1
a55 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.13 1998/03/22 19:01:18 niklas Exp $";
d597 2
a598 2
	extern char	*md5crypt __P((const char *, const char *));
	extern char	*bcrypt __P((const char *, const char *));
@


1.13
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 1
a55 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.12 1997/09/10 23:15:43 deraadt Exp $";
d653 1
a653 1
		strncpy((char *)output, setting, 9);
a661 1
		output[9] = '\0';
@


1.12
log
@indentation cleanup
@
text
@d1 2
d55 1
a55 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.11 1997/07/09 01:08:14 millert Exp $";
@


1.11
log
@Clean up some -Wall flowers.
@
text
@d53 1
a53 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.10 1997/03/30 20:24:46 deraadt Exp $";
d598 6
a603 6
	if( setting[0] == '$' )
		switch(setting[1]) {
			case '1':
				return (md5crypt(key, setting));
			default:
				return bcrypt(key, setting);
d605 1
@


1.10
log
@delete the unaligned code
@
text
@d53 1
a53 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.9 1997/03/27 23:36:53 downsj Exp $";
d615 1
a615 1
		if (*q++ = *key << 1)
@


1.9
log
@Err, umm.
@
text
@d53 1
a53 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.8 1997/03/27 23:26:28 downsj Exp $";
a574 4
#if 0
	rawl = ntohl(*((u_int32_t *) in)++);
	rawr = ntohl(*((u_int32_t *) in));
#else
a577 1
#endif
a579 4
#if 0
	*((u_int32_t *) out)++ = htonl(l_out);
	*((u_int32_t *) out) = htonl(r_out);
#else
a582 1
#endif
@


1.8
log
@Make this code sane.
@
text
@d53 1
a53 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.7 1997/02/13 16:58:44 provos Exp $";
d624 1
a624 1
	while ((q - (u_char *) keybuf) <= sizeof(keybuf)) {
d653 1
a653 1
			while (((q - (u_char *) keybuf) <= sizeof(keybuf)) &&
@


1.7
log
@added hook for bcrypt
@
text
@d53 1
a53 1
static char rcsid[] = "$OpenBSD: crypt.c,v 1.6 1996/08/19 08:19:49 tholo Exp $";
d624 1
a624 1
	while (q - (u_char *) keybuf - 8) {
d653 2
a654 1
			while (q - (u_char *) keybuf - 8 && *key)
@


1.6
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d53 1
a53 1
static char rcsid[] = "$OpenBSD$";
d606 1
d608 7
a614 2
	if (strncmp(setting, "$1$", sizeof("$1")) == 0)
		return (md5crypt(key, setting));
@


1.5
log
@for magic MD5 salt, call md5crypt()
@
text
@a0 2
/*	$OpenBSD: crypt.c,v 1.4 1996/06/03 22:20:35 niklas Exp $	*/

d51 5
@


1.4
log
@Add md[245] routines in libc/md, remove md5 from libc/crypt.  Add $OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d599 1
a599 1
	u_int32_t		count, salt, l, r0, r1, keybuf[2];
d602 4
a608 1

@


1.3
log
@Update prototypes to match declarations
Remove unused variables
Install all man-page links
@
text
@d1 1
a1 1
/*	$Id: crypt.c,v 1.2 1995/12/18 17:59:55 deraadt Exp $ */
@


1.2
log
@i believe i took care of the 32bit and alignment issues, so the comment can go away
@
text
@d1 1
a1 1
/*	$Id: crypt.c,v 1.1 1995/12/16 12:55:30 deraadt Exp $ */
d56 1
d186 1
a186 1
static inline int
d362 1
a362 1
	int	shifts, i, b, round;
a408 1
		int	bit;
d446 1
a446 1
	u_int32_t	mask, rawl, rawr, l, r, *kl, *kr, *kl1, *kr1;
d448 1
a448 1
	int	i, j, b, round;
d595 2
a596 2
	char *key;
	char *setting;
d647 1
a647 1
		strncpy(output, setting, 9);
d657 1
a657 1
		p = output + strlen(output);
d707 1
a707 1
	return(output);
@


1.1
log
@non-USA crypto code by davidb@@werj.com.au.  The source has been split
& copied into two pieces so that use of crypt() pulls in a crypt.o
that contains only that one programmer interface -- this permits USA
export of binaries that use crypt() for authentication purposes.
morecrypt.c contains the other DES programmer interfaces commonly
used.
@
text
@d1 1
a1 1
/*	$Id$ */
a47 7
 * ARCHITECTURE ASSUMPTIONS:
 *	This code assumes that u_longs are 32 bits.  It will probably not
 *	operate on 64-bit machines without modifications.
 *	It is assumed that the 8-byte arrays passed by reference can be
 *	addressed as arrays of u_longs (ie. the CPU is not picky about
 *	alignment).
 * 
@
