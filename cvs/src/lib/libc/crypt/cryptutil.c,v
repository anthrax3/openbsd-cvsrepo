head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.09.13.15.33.48;	author guenther;	state Exp;
branches;
next	1.11;
commitid	zxB6o2cNPYznqLwP;

1.11
date	2015.09.12.14.56.50;	author guenther;	state Exp;
branches;
next	1.10;
commitid	BXATo6E2rFBuIXKr;

1.10
date	2015.07.23.22.19.03;	author tedu;	state Exp;
branches;
next	1.9;
commitid	MxhYAKIoL1MG044Y;

1.9
date	2015.02.24.19.19.32;	author tedu;	state Exp;
branches;
next	1.8;
commitid	VfBRShhvBHGyacLP;

1.8
date	2015.01.15.17.32.43;	author chl;	state Exp;
branches;
next	1.7;
commitid	vgeAIyqk9RRMt2zW;

1.7
date	2014.12.30.10.27.24;	author tedu;	state Exp;
branches;
next	1.6;
commitid	4gbIoNOMzvJiT9mX;

1.6
date	2014.12.24.22.10.34;	author tedu;	state Exp;
branches;
next	1.5;
commitid	b9sK5yoMN4fZZuws;

1.5
date	2014.11.24.21.36.35;	author tedu;	state Exp;
branches;
next	1.4;
commitid	VrmEWC4ph72oOqm4;

1.4
date	2014.11.21.12.32.38;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	e4n5qTL4R1D5z52E;

1.3
date	2014.11.21.05.13.44;	author tedu;	state Exp;
branches;
next	1.2;
commitid	H7AJhZvkXj2g8HJk;

1.2
date	2014.11.17.16.47.28;	author tedu;	state Exp;
branches;
next	1.1;
commitid	EUMNv19NEhGnJ74N;

1.1
date	2014.05.12.19.13.14;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Wrap <pwd.h> so that calls go direct and the symbols are all weak.
Hide bcrypt_autorounds(), prefixing with an underbar for static builds.
@
text
@/* $OpenBSD: cryptutil.c,v 1.11 2015/09/12 14:56:50 guenther Exp $ */
/*
 * Copyright (c) 2014 Ted Unangst <tedu@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <pwd.h>
#include <login_cap.h>
#include <errno.h>

int
crypt_checkpass(const char *pass, const char *goodhash)
{
	char dummy[_PASSWORD_LEN];

	if (goodhash == NULL) {
		/* fake it */
		goto fake;
	}

	/* empty password */
	if (strlen(goodhash) == 0 && strlen(pass) == 0)
		return 0;

	if (goodhash[0] == '$' && goodhash[1] == '2') {
		if (bcrypt_checkpass(pass, goodhash))
			goto fail;
		return 0;
	}

	/* unsupported. fake it. */
fake:
	bcrypt_newhash(pass, 8, dummy, sizeof(dummy));
fail:
	errno = EACCES;
	return -1;
}
DEF_WEAK(crypt_checkpass);

int
crypt_newhash(const char *pass, const char *pref, char *hash, size_t hashlen)
{
	int rv = -1;
	const char *defaultpref = "blowfish,8";
	const char *errstr;
	const char *choices[] = { "blowfish", "bcrypt" };
	size_t maxchoice = sizeof(choices) / sizeof(choices[0]);
	int i;
	int rounds;

	if (pref == NULL)
		pref = defaultpref;

	for (i = 0; i < maxchoice; i++) {
		const char *choice = choices[i];
		size_t len = strlen(choice);
		if (strcmp(pref, choice) == 0) {
			rounds = _bcrypt_autorounds();
			break;
		} else if (strncmp(pref, choice, len) == 0 &&
		    pref[len] == ',') {
			if (strcmp(pref + len + 1, "a") == 0) {
				rounds = _bcrypt_autorounds();
			} else {
				rounds = strtonum(pref + len + 1, 4, 31, &errstr);
				if (errstr) {
					errno = EINVAL;
					goto err;
				}
			}
			break;
		}
	}
	if (i == maxchoice) {
		errno = EINVAL;
		goto err;
	}

	rv = bcrypt_newhash(pass, rounds, hash, hashlen);

err:
	return rv;
}
DEF_WEAK(crypt_newhash);
@


1.11
log
@Wrap <unistd.h> so that internal calls go direct and they're all weak symbols
Delete unused 'fd' argument from internal function oldttyname()
@
text
@d1 1
a1 1
/* $OpenBSD: cryptutil.c,v 1.10 2015/07/23 22:19:03 tedu Exp $ */
a23 2
int bcrypt_autorounds(void);

d71 1
a71 1
			rounds = bcrypt_autorounds();
d76 1
a76 1
				rounds = bcrypt_autorounds();
@


1.10
log
@permit "bcrypt" as an alias for "blowfish". this is, after all, what
99% of the world calls it.
allow just "bcrypt" without params to mean auto-tune ("bcrypt,a").
default remains 8 rounds (for now)
ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: cryptutil.c,v 1.9 2015/02/24 19:19:32 tedu Exp $ */
d53 1
d99 1
@


1.9
log
@Set errno to EINVAL, instead of letting ERANGE escape out.
Printing strerror() in that case will say result too large, even if rounds is
actually too small. invalid is less specific, but less incorrect.
ok millert
@
text
@d1 1
a1 1
/* $OpenBSD: cryptutil.c,v 1.8 2015/01/15 17:32:43 chl Exp $ */
d60 3
d67 22
a88 1
	if (strncmp(pref, "blowfish,", 9) != 0) {
d92 1
a92 9
	if (strcmp(pref + 9, "a") == 0) {
		rounds = bcrypt_autorounds();
	} else {
		rounds = strtonum(pref + 9, 4, 31, &errstr);
		if (errstr) {
			errno = EINVAL;
			goto err;
		}
	}
@


1.8
log
@remove unused variable

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: cryptutil.c,v 1.7 2014/12/30 10:27:24 tedu Exp $ */
d72 2
a73 1
		if (errstr)
d75 1
@


1.7
log
@copy bcrypt autotune from encrypt(1) and expose via crypt_newhash
ok deraadt miod
@
text
@d1 1
a1 1
/* $OpenBSD: cryptutil.c,v 1.6 2014/12/24 22:10:34 tedu Exp $ */
a29 1
	char *res;
@


1.6
log
@simplify crypt_checkpass. The API promise is that this function doesn't
use global data. The simplest fix is to only check blowfish passwords,
and implicitly lock out DES passwords.
crypt_checkpass is currently only used in one place, passwd, to verify
the local user's password, so this is probably acceptable.
Gives people a little more time to migrate away from DES before introduing
checkpass into more places.
@
text
@d1 1
a1 1
/* $OpenBSD: cryptutil.c,v 1.5 2014/11/24 21:36:35 tedu Exp $ */
d24 2
d69 7
a75 3
	rounds = strtonum(pref + 9, 4, 31, &errstr);
	if (errstr)
		goto err;
@


1.5
log
@check crypt() for null. noticed by Jonas Termansen
@
text
@d1 1
a1 1
/* $OpenBSD: cryptutil.c,v 1.4 2014/11/21 12:32:38 schwarze Exp $ */
d32 1
a32 2
		bcrypt_newhash(pass, 8, dummy, sizeof(dummy));
		goto fail;
d45 3
a47 8
	/* have to do it the hard way */
	res = crypt(pass, goodhash);
	if (res == NULL || strlen(res) != strlen(goodhash) ||
	    timingsafe_bcmp(res, goodhash, strlen(goodhash)) != 0) {
		goto fail;
	}

	return 0;
@


1.4
log
@Let crypt_checkpass() set EACCES after bcrypt_checkpass() failure;
ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: cryptutil.c,v 1.3 2014/11/21 05:13:44 tedu Exp $ */
d48 1
a48 1
	if (strlen(res) != strlen(goodhash) ||
@


1.3
log
@change prototype for crypt_newhash. the login_cap_t is a holdover from its
pwd_gensalt origins, but a string argument works equally work and is more
friendly to consumers beyond local user accounts.
ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: cryptutil.c,v 1.2 2014/11/17 16:47:28 tedu Exp $ */
d41 3
a43 1
		return bcrypt_checkpass(pass, goodhash);
@


1.2
log
@add new function crypt_newhash to simplify creating new hashes.
does most of the work pwd_gensalt did, but also creates the hash.
(unused yet)
@
text
@d1 1
a1 1
/* $OpenBSD: cryptutil.c,v 1.1 2014/05/12 19:13:14 tedu Exp $ */
d58 1
a58 1
crypt_newhash(const char *pass, login_cap_t *lc, char *hash, size_t hashlen)
d61 1
a61 2
	char *pref;
	char *defaultpref = "blowfish,8";
d65 1
a65 2
	if (lc == NULL ||
	    (pref = login_getcapstr(lc, "localcipher", NULL, NULL)) == NULL)
a76 2
	if (pref != defaultpref)
		free(pref);
@


1.1
log
@remove md5crypt.
while changing things, add a crypt_checkpass wrapper that handles most of
the edge cases. (not quite ready for production, though.)
ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d21 1
d55 27
@

