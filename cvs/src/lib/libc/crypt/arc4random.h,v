head	1.4;
access;
symbols
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.12
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2015.01.15.06.57.18;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	tyVERtGyihL3aYUT;

1.3
date	2014.07.20.20.51.13;	author bcook;	state Exp;
branches;
next	1.2;
commitid	99nqJdTNZvoMsFK8;

1.2
date	2014.07.19.00.08.41;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	FxTsJE4zngOJloti;

1.1
date	2014.07.18.02.05.55;	author deraadt;	state Exp;
branches;
next	;
commitid	Po6pVMKYRqxYo64p;


desc
@@


1.4
log
@back in september I did the large abstraction refactoring to allow these
other systems to fit into the same mold, so add copyright
@
text
@/*	$OpenBSD: arc4random.h,v 1.3 2014/07/20 20:51:13 bcook Exp $	*/

/*
 * Copyright (c) 1996, David Mazieres <dm@@uun.org>
 * Copyright (c) 2008, Damien Miller <djm@@openbsd.org>
 * Copyright (c) 2013, Markus Friedl <markus@@openbsd.org>
 * Copyright (c) 2014, Theo de Raadt <deraadt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Stub functions for portability.
 */
#include <sys/mman.h>

#include <signal.h>

#include "thread_private.h"

static inline void
_getentropy_fail(void)
{
	raise(SIGKILL);
}

static inline int
_rs_allocate(struct _rs **rsp, struct _rsx **rsxp)
{
	struct {
		struct _rs rs;
		struct _rsx rsx;
	} *p;

	if ((p = mmap(NULL, sizeof(*p), PROT_READ|PROT_WRITE,
	    MAP_ANON|MAP_PRIVATE, -1, 0)) == MAP_FAILED)
		return (-1);
	if (minherit(p, sizeof(*p), MAP_INHERIT_ZERO) == -1) {
		munmap(p, sizeof(*p));
		return (-1);
	}

	*rsp = &p->rs;
	*rsxp = &p->rsx;
	return (0);
}

static inline void
_rs_forkdetect(void)
{
}
@


1.3
log
@Move more OS-specific functionality to arc4random.h headers.

Move <sys/mman.h> and raise(SIGKILL) calls to OS-specific headers.
On OpenBSD, move thread_private.h as well to arc4random.h.
On Windows, use TerminateProcess on getentropy failure.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.h,v 1.2 2014/07/19 00:08:41 deraadt Exp $	*/
d7 1
@


1.2
log
@Change _rs_allocate so it can combine the two regions (rs and rsx)
into one if a system has an awesome getentropy().  In that case it
is valid to totally throw away the rsx state in the child.  If the
getentropy() is not very good and has a lazy reseed operation, this
combining is a bad idea, and the reseed should probably continue to
use the "something old, something new" mix.  _rs_allocate() can
accomodate either method, but not on the fly.
ok matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.h,v 1.1 2014/07/18 02:05:55 deraadt Exp $	*/
d24 11
@


1.1
log
@Seperate arc4random's os-dependent parts into static inline functions,
making it much easier for libressl -portable to fill in the gaps.
ok bcook beck
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.46 2014/07/17 14:30:41 deraadt Exp $	*/
d25 2
a26 2
static inline void *
_rs_allocate(size_t len)
d28 4
a31 1
	void *p;
d33 1
a33 1
	if ((p = mmap(NULL, sizeof(*rs), PROT_READ|PROT_WRITE,
d35 9
a43 2
		return (NULL);
	return (p);
a48 7
}

static inline void
_rs_forkdetectsetup(struct _rs *rs, size_t len)
{
	if (minherit(rs, len, MAP_INHERIT_ZERO) == -1)
		abort();
@

