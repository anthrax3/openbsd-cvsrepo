head	1.35;
access;
symbols
	OPENBSD_6_2_BASE:1.35
	OPENBSD_6_1:1.35.0.12
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.8
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.4
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.35.0.6
	OPENBSD_5_8_BASE:1.35
	OPENBSD_5_7:1.35.0.2
	OPENBSD_5_7_BASE:1.35
	OPENBSD_5_6:1.34.0.4
	OPENBSD_5_6_BASE:1.34
	OPENBSD_5_5:1.32.0.4
	OPENBSD_5_5_BASE:1.32
	OPENBSD_5_4:1.29.0.2
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.28.0.2
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.27.0.16
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.14
	OPENBSD_5_0:1.27.0.12
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.10
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.8
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.4
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.6
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.2
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.26.0.2
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.22.0.4
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.2
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.19.0.8
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.6
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.4
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.2
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.17.0.18
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.16
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.14
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.12
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.17.0.10
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.8
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.6
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.17.0.4
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9:1.17.0.2
	OPENBSD_2_9_BASE:1.17
	OPENBSD_2_8:1.16.0.4
	OPENBSD_2_8_BASE:1.16
	OPENBSD_2_7:1.16.0.2
	OPENBSD_2_7_BASE:1.16
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@# @;


1.35
date	2014.11.25.16.45.24;	author millert;	state Exp;
branches;
next	1.34;
commitid	wKisx32WlkU8vb1E;

1.34
date	2014.07.19.16.11.16;	author naddy;	state Exp;
branches;
next	1.33;
commitid	8qkTkWaNZJWzAgpK;

1.33
date	2014.07.09.16.57.49;	author beck;	state Exp;
branches;
next	1.32;
commitid	bJbwGTsjF8lDlyhs;

1.32
date	2013.10.22.06.51.41;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2013.10.22.06.40.36;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2013.10.21.20.35.09;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.28;

1.28
date	2012.07.26.18.39.48;	author naddy;	state Exp;
branches;
next	1.27;

1.27
date	2008.12.23.18.31.02;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2008.06.09.06.04.02;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2008.06.08.18.37.09;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2008.03.16.22.18.24;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2008.03.16.19.47.43;	author otto;	state Exp;
branches;
next	1.22;

1.22
date	2007.05.31.19.19.27;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.02.16.48.54;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.02.09.20.59;	author pyr;	state Exp;
branches;
next	1.19;

1.19
date	2005.07.17.08.50.55;	author jaredy;	state Exp;
branches;
next	1.18;

1.18
date	2005.06.07.19.04.58;	author kjell;	state Exp;
branches;
next	1.17;

1.17
date	2000.12.21.14.07.41;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.28.21.16.25;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.28.21.02.55;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.18.02.31.34;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.15.02.15.22;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2000.04.02.17.59.04;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	99.07.09.13.35.15;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.07.04.18.59.42;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.06.30.01.40.18;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	99.05.25.13.06.44;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.05.23.14.10.58;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.17.18.14.36;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.05.16.19.54.46;	author alex;	state Exp;
branches;
next	1.4;

1.4
date	98.09.07.16.44.34;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	98.07.05.19.54.19;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.04.27.22.40.25;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	97.04.15.13.06.54;	author provos;	state Exp;
branches;
next	;


desc
@@


1.35
log
@rand48(3) not drand48(3) to align with the actual man page and Xr
entries.
@
text
@.\" $OpenBSD: arc4random.3,v 1.34 2014/07/19 16:11:16 naddy Exp $
.\"
.\" Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Niels Provos.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" Manual page, using -mandoc macros
.\"
.Dd $Mdocdate: July 19 2014 $
.Dt ARC4RANDOM 3
.Os
.Sh NAME
.Nm arc4random ,
.Nm arc4random_buf ,
.Nm arc4random_uniform
.Nd random number generator
.Sh SYNOPSIS
.In stdlib.h
.Ft uint32_t
.Fn arc4random "void"
.Ft void
.Fn arc4random_buf "void *buf" "size_t nbytes"
.Ft uint32_t
.Fn arc4random_uniform "uint32_t upper_bound"
.Sh DESCRIPTION
This family of functions provides higher quality data than those
described in
.Xr rand 3 ,
.Xr random 3 ,
and
.Xr rand48 3 .
.Pp
Use of these functions is encouraged for almost all random number
consumption because the other interfaces are deficient in either
quality, portability, standardization, or availability.
These functions can be called in almost all coding environments,
including
.Xr pthreads 3
and
.Xr chroot 2 .
.Pp
High quality 32-bit pseudo-random numbers are generated very quickly.
On each call, a cryptographic pseudo-random number generator is used
to generate a new result.
One data pool is used for all consumers in a process, so that consumption
under program flow can act as additional stirring.
The subsystem is re-seeded from the kernel random number subsystem using
.Xr getentropy 2
on a regular basis, and also upon
.Xr fork 2 .
.Pp
The
.Fn arc4random
function returns a single 32-bit value.
.Pp
.Fn arc4random_buf
fills the region
.Fa buf
of length
.Fa nbytes
with random data.
.Pp
.Fn arc4random_uniform
will return a single 32-bit value, uniformly distributed but less than
.Fa upper_bound .
This is recommended over constructions like
.Dq Li arc4random() % upper_bound
as it avoids "modulo bias" when the upper bound is not a power of two.
In the worst case, this function may consume multiple iterations
to ensure uniformity; see the source code to understand the problem
and solution.
.Sh RETURN VALUES
These functions are always successful, and no return value is
reserved to indicate an error.
.Sh SEE ALSO
.Xr rand 3 ,
.Xr rand48 3 ,
.Xr random 3
.Sh HISTORY
These functions first appeared in
.Ox 2.1 .
.Pp
The original version of this random number generator used the
RC4 (also known as ARC4) algorithm.
In
.Ox 5.5
it was replaced with the ChaCha20 cipher, and it may be replaced
again in the future as cryptographic techniques advance.
A good mnemonic is
.Dq A Replacement Call for Random .
@


1.34
log
@arc4random re-seeds with getentropy() now; ok deraadt@@ jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.33 2014/07/09 16:57:49 beck Exp $
d33 1
a33 1
.Dd $Mdocdate: July 9 2014 $
d55 1
a55 1
.Xr drand48 3 .
@


1.33
log
@Clean up after arc4random u_int32_t uint32_t change
ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.32 2013/10/22 06:51:41 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: October 22 2013 $
d72 1
a72 1
.Xr sysctl 3
@


1.32
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.31 2013/10/22 06:40:36 deraadt Exp $
d43 1
a43 1
.Ft u_int32_t
d47 2
a48 2
.Ft u_int32_t
.Fn arc4random_uniform "u_int32_t upper_bound"
@


1.31
log
@delete extra words; Henri Kemppainen
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.30 2013/10/21 20:35:09 deraadt Exp $
d33 1
a33 1
.Dd $Mdocdate: October 21 2013 $
a95 1
.Pp
a103 1
.Pp
d110 1
a110 1
.Ox 5.5 ,
@


1.30
log
@update documentation for these functions.  They now state the case regarding
pthreads and chroot, and safe initialization without /dev/random and such
junk.  If you are in control of an arc4random in another library, please look
at these pages and get caught up.
ok various
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.29 2013/06/05 03:39:22 tedu Exp $
d33 1
a33 1
.Dd $Mdocdate: June 5 2013 $
a114 1
techniques advance.
@


1.29
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.28 2012/07/26 18:39:48 naddy Exp $
d33 1
a33 1
.Dd $Mdocdate: July 26 2012 $
d39 2
a40 4
.Nm arc4random_uniform ,
.Nm arc4random_stir ,
.Nm arc4random_addrandom
.Nd arc4 random number generator
a48 4
.Ft void
.Fn arc4random_stir "void"
.Ft void
.Fn arc4random_addrandom "u_char *dat" "int datlen"
d50 2
a51 18
The
.Fn arc4random
function provides a high quality 32-bit pseudo-random
number very quickly.
.Fn arc4random
seeds itself on a regular basis from the kernel strong random number
subsystem described in
.Xr random 4 .
On each call, an ARC4 generator is used to generate a new result.
The
.Fn arc4random
function uses the ARC4 cipher key stream generator,
which uses 8*8 8-bit S-Boxes.
The S-Boxes can be in about (2**1700) states.
.Pp
.Fn arc4random
provides a cryptographically secure pseudo-random number generator,
as opposed to the fast but poor quality interfaces described in
d57 23
d85 1
a85 1
with ARC4-derived random data.
d88 1
a88 1
will return a uniformly distributed random number less than
d90 1
a90 2
.Fn arc4random_uniform
is recommended over constructions like
d93 3
a96 16
The
.Fn arc4random_stir
function reads data using
.Xr sysctl 3
from
.Va kern.arandom
and uses it to permute the S-Boxes via
.Fn arc4random_addrandom .
.Pp
There is no need to call
.Fn arc4random_stir
before using
.Fn arc4random ,
since
.Fn arc4random
automatically initializes itself.
a104 15
An algorithm called
.Pa RC4
was designed by RSA Data Security, Inc.
It was considered a trade secret.
Because it was a trade secret, it obviously could not be patented.
A clone of this was posted anonymously to USENET and confirmed to
be equivalent by several sources who had access to the original cipher.
Because of the trade secret situation, RSA Data Security, Inc. could
do nothing about the release of the
.Ql Alleged RC4
algorithm.
Since
.Pa RC4
was trademarked, the cipher is now referred to as
.Pa ARC4 .
d108 10
@


1.28
log
@remove reference to no longer existing description of nonexistent devices;
ok deraadt@@ tedu@@, wording tweaks jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.27 2008/12/23 18:31:02 deraadt Exp $
d33 1
a33 1
.Dd $Mdocdate: December 23 2008 $
d44 1
a44 1
.Fd #include <stdlib.h>
@


1.27
log
@repair the ARC4 story; ok jmc djm millert
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.26 2008/06/09 06:04:02 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 9 2008 $
d72 2
a73 5
fits into a middle ground not covered by other subsystems such as
the strong, slow, and resource expensive random
devices described in
.Xr random 4
versus the fast but poor quality interfaces described in
@


1.26
log
@fix an Xr, and use a more appropriate macro;
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.25 2008/06/08 18:37:09 deraadt Exp $
d33 1
a33 1
.Dd $Mdocdate: June 8 2008 $
d128 4
a131 2
Because of the trade secret situation, RSA Data Security, Inc. can do
nothing about the release of the ARC4 algorithm.
d134 1
a134 1
used to be a trade secret, the cipher is now referred to as
@


1.25
log
@arc4random_stir() does not use /dev/arandom anymore, but sysctl kern.arandom
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.24 2008/03/16 22:18:24 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: March 16 2008 $
d100 1
a100 1
.Xr sysctl 2
d102 1
a102 1
.Pa kern.arandom
@


1.24
log
@- add NAME entries for arc4random_buf and arc4random_uniform
- simplify a macro call (Do/Dc -> Dq)
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.23 2008/03/16 19:47:43 otto Exp $
d99 4
a102 2
function reads data from
.Pa /dev/arandom
@


1.23
log
@diff from djm@@ committed at his request:

introduce two new APIs for requesting strong random numbers:

arc4random_buf() - fill an arbitrary memory range with random numbers

arc4random_uniform() - return a uniformly distributed random number
below
a specified upper bound, avoiding the bias that comes from a naive
"arc4random() % upper_bound" construction.

these mirror similarly-named functions in the kernel;
lots of discussion deraadt@@ mcbride@@
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.22 2007/05/31 19:19:27 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d38 2
d94 1
a94 1
.Do Li arc4random() % upper_bound Dc
@


1.22
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.21 2007/05/02 16:48:54 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d46 4
d79 15
@


1.21
log
@macros at start of line require a `.';
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.20 2007/05/02 09:20:59 pyr Exp $
d33 1
a33 1
.Dd April 15, 1997
@


1.20
log
@Document the lack of error return value in arc4random.
Sync the documentation in getpid with arc4random's format.
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.19 2005/07/17 08:50:55 jaredy Exp $
d90 1
a90 1
Sh RETURN VALUES
@


1.19
log
@punctuation and minor rewording, ok jmc
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.18 2005/06/07 19:04:58 kjell Exp $
d90 3
@


1.18
log
@RC4 is a trademark. Rest of text left intact.
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.17 2000/12/21 14:07:41 aaron Exp $
d62 1
a62 1
which uses 8*8 8 bit S-Boxes.
@


1.17
log
@typo; ciper -> cipher
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.16 2000/04/28 21:16:25 deraadt Exp $
d98 1
a98 1
It was considered a trade secret, but not trademarked.
@


1.16
log
@flesh
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.15 2000/04/28 21:02:55 deraadt Exp $
d61 1
a61 1
function uses the ARC4 ciper key stream generator,
@


1.15
log
@improve the english
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.14 2000/04/18 02:31:34 aaron Exp $
d52 11
a62 2
function uses the key stream generator employed by the
arc4 cipher, which uses 8*8 8 bit S-Boxes.
d64 11
@


1.14
log
@Repairs.
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.13 2000/04/15 02:15:22 aaron Exp $
d75 1
a75 1
An algorithm call
d79 2
a80 1
A clone of this was posted anonymously to the USENET and was confirmed to
d83 1
a83 1
nothing about the situation.
@


1.13
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.12 2000/04/02 17:59:04 millert Exp $
d53 2
a54 2
arc4 cipher, which uses 8*8 8 bit S-Boxes. The S-Boxes
can be in about (2**1700) states.
d77 2
a78 2
was designed by RSA Data Security, Inc.  It was considered a trade secret,
but not trademarked.
@


1.12
log
@First appeared in OpenBSD 2.1
@
text
@d1 2
a2 1
.\" $OpenBSD: arc4random.3,v 1.11 1999/07/09 13:35:15 aaron Exp $
d37 2
a38 2
.Nm arc4random,
.Nm arc4random_stir,
@


1.11
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.10 1999/07/04 18:59:42 aaron Exp $
d86 3
@


1.10
log
@trash some old leftover macros and replace them with -mdoc macros
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.9 1999/06/30 01:40:18 deraadt Exp $
d50 1
a50 1
.Fn arc4random 
d57 1
a57 1
function reads data from 
d62 1
a62 1
There is no need to call 
d75 1
a75 1
.Pa RC4 
d84 1
a84 1
used to be a trade secret, the cipher is now referred to as 
@


1.9
log
@clarify trade secret issue
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.8 1999/05/25 13:06:44 aaron Exp $
d53 1
a53 4
can be in about 
.if t 2\u\s71700\s10\d
.if n (2**1700)
states.
@


1.8
log
@punctuation
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.7 1999/05/23 14:10:58 aaron Exp $
d77 1
d79 7
a85 3
has been designed by RSA Data Security, Inc. It was posted anonymously
to the USENET and was confirmed to be equivalent by several sources who
had access to the original cipher. Since 
@


1.7
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.6 1999/05/17 18:14:36 deraadt Exp $
d39 1
a39 1
.Nd arc4 random number generator.
@


1.6
log
@spelling
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.5 1999/05/16 19:54:46 alex Exp $
d34 1
a34 1
.Os "OpenBSD 2.0"
@


1.5
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.4 1998/09/07 16:44:34 aaron Exp $
d62 1
a62 1
and uses it to permutate the S-Boxes via
d71 1
a71 1
automatically initalizes itself.
@


1.4
log
@More man page fixes. Particularly fix uses of it's/its, affect/effect,
then/than and such. Other miscellaneous problems fixed across these source
files.
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.3 1998/07/05 19:54:19 millert Exp $
d73 1
a74 1
.Xr rand 3 ,
@


1.3
log
@add .Xr's for all the random functions in libc
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.2 1997/04/27 22:40:25 angelos Exp $
d82 1
a82 1
used to be a trade secret, the cipher is now refered to as 
@


1.2
log
@Typo and return value for arc4random().
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.1 1997/04/15 13:06:54 provos Exp $
d73 1
@


1.1
log
@documentation for arc4random. this is out of memory, might need
some corrections.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d42 1
a42 1
.Ft void
d81 1
a81 1
used to by a trade secret, the cipher is now refered to as 
@
