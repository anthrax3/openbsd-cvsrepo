head	1.45;
access;
symbols
	OPENBSD_6_1_BASE:1.45
	OPENBSD_6_0:1.45.0.6
	OPENBSD_6_0_BASE:1.45
	OPENBSD_5_9:1.45.0.2
	OPENBSD_5_9_BASE:1.45
	OPENBSD_5_8:1.45.0.4
	OPENBSD_5_8_BASE:1.45
	OPENBSD_5_7:1.44.0.2
	OPENBSD_5_7_BASE:1.44
	OPENBSD_5_6:1.38.0.4
	OPENBSD_5_6_BASE:1.38
	OPENBSD_5_5:1.33.0.6
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.33.0.2
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.29.0.2
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.28.0.2
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.18
	OPENBSD_5_0:1.27.0.16
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.14
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.12
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.8
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.10
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.6
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.4
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.2
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.26.0.2
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.25.0.6
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.25.0.4
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.2
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.24.0.2
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.23.0.2
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.21.0.4
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	OPENBSD_3_3:1.19.0.6
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.19.0.4
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.17.0.6
	OPENBSD_2_9_BASE:1.17
	OPENBSD_2_8:1.17.0.4
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.17.0.2
	OPENBSD_2_7_BASE:1.17
	OPENBSD_2_6:1.13.0.2
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.12.0.2
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.11.0.4
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@# @;


1.45
date	2015.04.06.20.49.41;	author tedu;	state Exp;
branches;
next	1.44;
commitid	0zZNKsx9TarD0Vu5;

1.44
date	2014.12.08.20.46.04;	author tedu;	state Exp;
branches;
next	1.43;
commitid	jyPn8wRChCdNuuDz;

1.43
date	2014.12.02.07.39.58;	author schwarze;	state Exp;
branches;
next	1.42;
commitid	FRRNhJVDlLmRqp6w;

1.42
date	2014.11.25.03.36.34;	author tedu;	state Exp;
branches;
next	1.41;
commitid	dHjUmsAQ9Nv1QGGy;

1.41
date	2014.11.20.19.18.25;	author tedu;	state Exp;
branches;
next	1.40;
commitid	pSPKVvpW84eVdee6;

1.40
date	2014.11.18.22.17.50;	author jmc;	state Exp;
branches;
next	1.39;
commitid	d0REcHhUxt13IEl7;

1.39
date	2014.11.17.16.47.28;	author tedu;	state Exp;
branches;
next	1.38;
commitid	EUMNv19NEhGnJ74N;

1.38
date	2014.05.16.22.11.00;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2014.05.16.21.34.48;	author tedu;	state Exp;
branches;
next	1.36;

1.36
date	2014.05.16.14.12.19;	author sthen;	state Exp;
branches;
next	1.35;

1.35
date	2014.05.12.19.13.14;	author tedu;	state Exp;
branches;
next	1.34;

1.34
date	2014.03.19.02.34.45;	author tedu;	state Exp;
branches;
next	1.33;

1.33
date	2013.07.16.15.21.11;	author schwarze;	state Exp;
branches;
next	1.32;

1.32
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.31;

1.31
date	2013.04.21.18.07.32;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2013.04.20.19.02.52;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2012.11.30.13.51.11;	author stsp;	state Exp;
branches;
next	1.28;

1.28
date	2012.06.02.00.14.16;	author guenther;	state Exp;
branches;
next	1.27;

1.27
date	2007.10.08.11.55.27;	author pyr;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.31.19.19.27;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.02.08.06.52;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2005.05.26.22.10.54;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2005.02.25.03.12.43;	author cloder;	state Exp;
branches;
next	1.22;

1.22
date	2004.04.06.11.00.32;	author djm;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.07.00.32.12;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2003.05.30.13.06.02;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2002.01.24.20.33.45;	author mickey;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.06.10.42.25;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2000.04.28.07.00.19;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.18.02.31.34;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.15.02.15.22;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2000.01.22.02.17.55;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.07.09.13.35.15;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.03.18.11.08.33;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	98.02.27.12.17.45;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.02.25.11.25.13;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	97.11.30.23.16.30;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	97.11.30.22.06.02;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.11.05.11.44.49;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.03.31.02.38.44;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.12.10.09.06.09;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.11.01.03.45.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.07.18.40.26;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.06.03.22.20.34;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.16.12.55.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.45
log
@bludgeon DES support out of crypt. long live the bcrypt.
@
text
@.\" $OpenBSD: crypt.3,v 1.44 2014/12/08 20:46:04 tedu Exp $
.\"
.\" FreeSec: libcrypt
.\"
.\" Copyright (c) 1994 David Burren
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the author nor the names of other contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" Manual page, using -mandoc macros
.\"
.Dd $Mdocdate: December 8 2014 $
.Dt CRYPT 3
.Os
.Sh NAME
.Nm crypt ,
.Nm bcrypt_gensalt ,
.Nm bcrypt
.Nd password hashing
.Sh SYNOPSIS
.In stdlib.h
.Pp
.In unistd.h
.Ft char *
.Fn crypt "const char *key" "const char *setting"
.In pwd.h
.Ft char *
.Fn bcrypt_gensalt "u_int8_t log_rounds"
.Ft char *
.Fn bcrypt "const char *key" "const char *salt"
.Sh DESCRIPTION
These functions are deprecated in favor of
.Xr crypt_checkpass 3
and
.Xr crypt_newhash 3 .
.Pp
The
.Fn crypt
function performs password hashing.
Additional code has been added to deter key search attempts and to use
stronger hashing algorithms.
.Pp
The first argument to
.Fn crypt
is a NUL-terminated
string
.Fa key ,
typically a user's typed password.
The second,
.Fa setting ,
currently supports a single form.
If it begins
with a string character
.Pq Ql $
and a number then a different algorithm is used depending on the number.
At the moment
.Ql $2
chooses Blowfish hashing; see below for more information.
.Ss Blowfish crypt
The Blowfish version of crypt has 128 bits of
.Fa salt
in order to make building dictionaries of common passwords space consuming.
The initial state of the
Blowfish cipher is expanded using the
.Fa salt
and the
.Fa password
repeating the process a variable number of rounds, which is encoded in
the password string.
The maximum password length is 72.
The final Blowfish password entry is created by encrypting the string
.Pp
.Dq OrpheanBeholderScryDoubt
.Pp
with the Blowfish state 64 times.
.Pp
The version number, the logarithm of the number of rounds and
the concatenation of salt and hashed password are separated by the
.Ql $
character.
An encoded
.Sq 8
would specify 256 rounds.
A valid Blowfish password looks like this:
.Pp
.Dq $2b$12$FPWWO2RJ3CK4FINTw0Hi8OiPKJcX653gzSS.jqltHFMxyDmmQ0Hqq .
.Pp
The whole Blowfish password string is passed as
.Fa setting
for interpretation.
.Sh RETURN VALUES
The function
.Fn crypt
returns a pointer to the encrypted value on success, and
.Dv NULL
on failure.
.Sh SEE ALSO
.Xr encrypt 1 ,
.Xr login 1 ,
.Xr passwd 1 ,
.Xr blowfish 3 ,
.Xr crypt_checkpass 3 ,
.Xr getpass 3 ,
.Xr passwd 5
.Sh HISTORY
A rotor-based
.Fn crypt
function appeared in
.At v3 .
A DES-based
.Fn crypt
first appeared in
.At v7 .
.Fn bcrypt
first appeared in
.Ox 2.1 .
.Sh BUGS
The
.Fn crypt
function returns a pointer to static data, and subsequent calls to
.Fn crypt
will modify the same object.
@


1.44
log
@delete documentation for deleted DES interfaces
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.43 2014/12/02 07:39:58 schwarze Exp $
d34 1
a34 1
.Dd $Mdocdate: December 2 2014 $
d61 1
a61 2
function performs password hashing based on the
NBS Data Encryption Standard (DES).
d73 1
a73 9
is in one of three forms:
if it begins with an underscore
.Pq Ql _
then an extended format is used
in interpreting both the
.Fa key
and the
.Fa setting ,
as outlined below.
a80 22
.Ss Extended crypt
The
.Fa key
is divided into groups of 8 characters (the last group is null-padded)
and the low-order 7 bits of each character (56 bits per group) are
used to form the DES key as follows:
the first group of 56 bits becomes the initial DES key.
For each additional group, the XOR of the encryption of the current DES
key with itself and the group bits becomes the next DES key.
.Pp
The
.Fa setting
is a 9-character array consisting of an underscore followed
by 4 bytes of iteration count and 4 bytes of salt.
These are encoded as printable characters, 6 bits per character,
least significant character first.
The values 0 to 63 are encoded as
.Dq \&./0-9A-Za-z .
This allows 24 bits for both
.Fa count
and
.Fa salt .
a112 36
.Ss Traditional crypt
The first 8 bytes of the
.Fa key
are null-padded, and the low-order 7 bits of
each character is used to form the 56-bit DES key.
.Pp
The
.Fa setting
is a 2-character array of the ASCII-encoded salt.
Thus only 12 bits of
.Fa salt
are used.
.Fa count
is set to 25.
.Ss DES Algorithm
The
.Fa salt
introduces disorder in the DES
algorithm in one of 16777216 or 4096 possible ways
(i.e., with 24 or 12 bits: if bit
.Em i
of the
.Fa salt
is set, then bits
.Em i
and
.Em i+24
are swapped in the DES E-box output).
.Pp
The DES key is used to encrypt a 64-bit constant using
.Fa count
iterations of DES.
The value returned is a NUL-terminated
string, 20 or 13 bytes (plus NUL) in length, consisting of the
.Fa setting
followed by the encoded 64-bit encryption.
d132 1
a132 1
The current style
d136 3
a138 3
.Sh AUTHORS
.An David Burren Aq Mt davidb@@werj.com.au
wrote the original DES functions.
a144 4
.Pp
With DES hashing, passwords containing the byte 0x80 use less key entropy
than other passwords.
This is an implementation bug, not a bug in the DES cipher.
@


1.43
log
@macro cleanup; kaspars at bankovskis dot net
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.42 2014/11/25 03:36:34 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: November 25 2014 $
a38 4
.Nm setkey ,
.Nm encrypt ,
.Nm des_setkey ,
.Nm des_cipher ,
a43 2
.Ft int
.Fn setkey "const char *key"
a47 6
.Ft int
.Fn encrypt "char *block" "int flag"
.Ft int
.Fn des_setkey "const char *key"
.Ft int
.Fn des_cipher "const char *in" "char *out" "int32_t salt" "int count"
a179 63
.Pp
The functions
.Fn encrypt ,
.Fn setkey ,
.Fn des_setkey ,
and
.Fn des_cipher
provide access to the
DES algorithm itself.
.Fn setkey
is passed a 64-byte array of binary values (numeric 0 or 1).
A 56-bit key is extracted from this array by dividing the
array into groups of 8, and ignoring the last bit in each group.
That bit is reserved for a byte parity check by DES, but is ignored
by these functions.
.Pp
The
.Fa block
argument to
.Fn encrypt
is also a 64-byte array of binary values.
If the value of
.Fa flag
is 0,
.Fa block
is encrypted otherwise it is decrypted.
The result is returned in the original array
.Fa block
after using the key specified by
.Fn setkey
to process it.
.Pp
The argument to
.Fn des_setkey
is a character array of length 8.
The least significant bit (the parity bit) in each character is ignored,
and the remaining bits are concatenated to form a 56-bit key.
The function
.Fn des_cipher
encrypts (or decrypts if
.Fa count
is negative) the 64-bits stored in the 8 characters at
.Fa in
using
.Xr abs 3
of
.Fa count
iterations of DES
and stores the 64-bit result in the 8 characters at
.Fa out
(which may be the same as
.Fa in ) .
The
.Fa salt
specifies perturbations to the DES
E-box output as described above.
.Pp
The
.Fn crypt ,
.Fn setkey ,
and
.Fn des_setkey
functions all manipulate the same key space.
a185 7
The functions
.Fn setkey ,
.Fn encrypt ,
.Fn des_setkey ,
and
.Fn des_cipher
return 0 on success and 1 on failure.
@


1.42
log
@no need for md5 xr
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.41 2014/11/20 19:18:25 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: November 20 2014 $
d74 1
a74 2
.Tn NBS
Data Encryption Standard (DES).
d80 7
a86 4
is a
.Dv NUL Ns -terminated
string, typically a user's typed password.
The second is in one of three forms:
d90 5
a94 1
in interpreting both the key and the setting, as outlined below.
d104 1
a104 1
.Ar key
d112 3
a114 1
The setting is a 9-character array consisting of an underscore followed
d124 2
a125 4
.Ss "Blowfish" crypt
The
.Tn Blowfish
version of crypt has 128 bits of
d129 1
a129 2
.Tn Blowfish
cipher is expanded using the
d140 1
a140 3
with the
.Tn Blowfish
state 64 times.
d156 5
a160 5
.Ss "Traditional" crypt
The first 8 bytes of the key are null-padded, and the low-order 7 bits of
each character is used to form the 56-bit
.Tn DES
key.
d162 3
a164 1
The setting is a 2-character array of the ASCII-encoded salt.
d173 1
a173 2
introduces disorder in the
.Tn DES
d178 1
a178 1
.Ar salt
d183 1
a183 3
are swapped in the
.Tn DES
E-box output).
d186 3
a188 5
.Ar count
iterations of
.Tn DES .
The value returned is a
.Dv NUL Ns -terminated
d190 1
a190 1
.Ar setting
d200 1
a200 2
.Tn DES
algorithm itself.
d239 1
a239 2
iterations of
.Tn DES
d246 1
a246 2
specifies perturbations to the
.Tn DES
@


1.41
log
@split crypt_checkpass off into a new file
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.40 2014/11/18 22:17:50 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: November 18 2014 $
a277 1
.Xr md5 3 ,
@


1.40
log
@add crypt_newhash to NAME and add an MLINK;
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.39 2014/11/17 16:47:28 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: November 17 2014 $
a38 2
.Nm crypt_checkpass ,
.Nm crypt_newhash ,
a54 4
.Fn crypt_checkpass "const char *password" "const char *hash"
.Ft int
.Fn crypt_newhash "const char *password" "login_cap_t *lc" "char *hash" "size_t hashsize"
.Ft int
d66 5
a95 24
.Pp
The
.Fn crypt_checkpass
function is provided to simplify checking a user's password.
If both the hash and the password are the empty string, authentication
is a success.
Otherwise, the password is hashed and compared to the provided hash.
If the hash is NULL, authentication will always fail, but a default
amount of work is performed to simulate the hashing operation.
A successful match will return 0.
A failure will return \-1 and set errno.
.Pp
The
.Fn crypt_newhash
function is provided to simplify the creation of new password hashes.
The provided
.Fa password
is randomly salted and hashed and stored in
.Fa hash .
The login class argument
.Fa lc
is used to identify the preferred hashing algorithm and parameters.
Refer to
.Xr login.conf 5 .
d276 1
@


1.39
log
@add new function crypt_newhash to simplify creating new hashes.
does most of the work pwd_gensalt did, but also creates the hash.
(unused yet)
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.38 2014/05/16 22:11:00 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: May 16 2014 $
d40 1
@


1.38
log
@update NAME and MLINKS for previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.37 2014/05/16 21:34:48 tedu Exp $
d58 2
d107 13
@


1.37
log
@document crypt_checkpass
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.36 2014/05/16 14:12:19 sthen Exp $
d39 1
d104 1
a104 1
A failure will return -1 and set errno.
@


1.36
log
@use $2b in the bcrypt example, ok tedu
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.35 2014/05/12 19:13:14 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: May 12 2014 $
d55 2
d93 11
@


1.35
log
@remove md5crypt.
while changing things, add a crypt_checkpass wrapper that handles most of
the edge cases. (not quite ready for production, though.)
ok deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.34 2014/03/19 02:34:45 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: March 19 2014 $
d143 1
a143 1
.Dq $2a$12$eIAq8PR8sIUnJ1HaohxX2O9x9Qlm2vK97LJ5dsXdmB.eXF42qjchC .
@


1.34
log
@right or wrong, bcrypt() is declared in pwd.h, not unistd.h
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.33 2013/07/16 15:21:11 schwarze Exp $
d34 1
a34 1
.Dd $Mdocdate: July 16 2013 $
d44 1
a44 2
.Nm bcrypt ,
.Nm md5crypt
a64 2
.Ft char *
.Fn md5crypt "const char *key" "const char *salt"
d88 1
a88 3
At the moment a
.Ql $1
chooses MD5 hashing and a
a110 18
.Ss "MD5" crypt
For
.Tn MD5
crypt the version number,
.Fa salt
and the hashed password are separated by the
.Ql $
character.
The maximum length of a password is limited by
the length counter of the MD5 context, which is about
2**64.
A valid MD5 password entry looks like this:
.Pp
.Dq $1$caeiHQwX$hsKqOjrFRRN6K32OWkCBf1 .
.Pp
The whole MD5 password string is passed as
.Fa setting
for interpretation.
@


1.33
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.32 2013/06/05 03:39:22 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: June 5 2013 $
d61 1
@


1.32
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.31 2013/04/21 18:07:32 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: April 21 2013 $
d306 1
a306 1
.An David Burren Aq davidb@@werj.com.au
@


1.31
log
@this man page is mostly about password hashing now (you really don't
want to be using DES) and some of the notes about the export controls
are no longer so relevant. ok deraadt jmc
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.30 2013/04/20 19:02:52 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: April 20 2013 $
d48 1
a48 1
.Fd #include <stdlib.h>
d52 1
a52 1
.Fd #include <unistd.h>
@


1.30
log
@Xr encrypt(1) to give people a hint if they just want a password string
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.29 2012/11/30 13:51:11 stsp Exp $
d34 1
a34 1
.Dd $Mdocdate: November 30 2012 $
d46 1
a46 1
.Nd DES encryption
d70 1
a70 1
function performs password encryption based on the
a304 14
.Pp
This library (FreeSec 1.0) was developed outside the United States of America
as an unencumbered replacement for the U.S.-only libcrypt encryption
library.
Programs linked against the
.Fn crypt
interface may be exported from the U.S.A. only if they use
.Fn crypt
solely for authentication purposes and avoid use of
the other programmer interfaces listed above.
Special care has been taken
in the library so that programs which only use the
.Fn crypt
interface do not pull in the other components.
d307 1
@


1.29
log
@Document a known bug in the DES crypt cipher implementation which we're
not going to fix in order to stay compatible with legacy password data.
Nobody should use DES crypt anyway these days.
See http://www.freebsd.org/security/advisories/FreeBSD-SA-12:02.crypt.asc
for details about this bug.

Discussed with deraadt and beck about half a year ago (I'm pruning Ms
from my tree).
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.28 2012/06/02 00:14:16 guenther Exp $
d34 1
a34 1
.Dd $Mdocdate: June 2 2012 $
d289 1
@


1.28
log
@Update STANDARDS section for a few <stdlib.h> functions
Update SYNOPSIS for setkey() to show it's in <stdlib.h>

ok jmc@@, millert@@
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.27 2007/10/08 11:55:27 pyr Exp $
d34 1
a34 1
.Dd $Mdocdate: October 8 2007 $
d326 4
@


1.27
log
@add a RETURN VALUES section.
ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.26 2007/05/31 19:19:27 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate$
d48 4
a51 1
.Fd #include <pwd.h>
a54 2
.Ft int
.Fn setkey "const char *key"
@


1.26
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.25 2005/10/02 08:06:52 jmc Exp $
d268 7
a286 7
.Pp
The
.Fn crypt ,
.Fn setkey ,
and
.Fn des_setkey
functions all manipulate the same key space.
@


1.25
log
@add bcrypt_gensalt, bcrypt, and md5crypt, to the .Nm list;
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.24 2005/05/26 22:10:54 millert Exp $
d34 1
a34 1
.Dd March 9, 1994
@


1.24
log
@sync setkey prototype with reality
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.23 2005/02/25 03:12:43 cloder Exp $
d42 4
a45 1
.Nm des_cipher
@


1.23
log
@Be correct in our man pages when talking about NUL termination (that is,
termination with '\0') vs. null termination.
Input from krw@@, jaredy@@, jmc@@.  OK deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.22 2004/04/06 11:00:32 djm Exp $
d50 1
a50 1
.Fn setkey "char *key"
@


1.22
log
@some of these functions are prototyped in pwd.h; ok deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.21 2003/08/07 00:32:12 deraadt Exp $
d75 1
a75 1
.Dv null Ns -terminated
d201 2
a202 2
.Dv null Ns -terminated
string, 20 or 13 bytes (plus null) in length, consisting of the
@


1.21
log
@unsplice crypt.c and morecrypt.c; start to document some bcrypt and md5crypt
things in crypt.3, and create MLINKS
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.20 2003/05/30 13:06:02 jmc Exp $
d45 1
@


1.20
log
@- section reorder in crypt(3)
- use .An/.Aq for authors
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.19 2002/01/24 20:33:45 mickey Exp $
d56 6
@


1.19
log
@fix the history refs
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.18 2001/08/06 10:42:25 mpech Exp $
a283 2
.Sh AUTHORS
David Burren <davidb@@werj.com.au>
d307 2
@


1.18
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.17 2000/04/28 07:00:19 deraadt Exp $
d290 1
a290 1
.At v6 .
@


1.17
log
@type decl error
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.16 2000/04/18 02:31:34 aaron Exp $
d284 1
a284 1
.Sh AUTHOR
@


1.16
log
@Repairs.
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.15 2000/04/15 02:15:22 aaron Exp $
d46 2
a47 2
.Ft char
.Fn *crypt "const char *key" "const char *setting"
@


1.15
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.14 2000/01/22 02:17:55 aaron Exp $
d59 1
a59 1
function performs password encryption, based on the
d64 1
d71 14
a84 7
if it begins with an underscore (``_'') then an extended format is used
in interpreting both the key and the setting, as outlined below. If it begins
with an string character (``$'') and a number then a different algorithm
is used depending on the number. At the moment a ``$1'' chooses MD5 hashing
and a ``$2'' chooses Blowfish hashing, see below for more information.
.Ss Extended crypt:
.Pp
d98 2
a99 1
The values 0 to 63 are encoded as ``./0-9A-Za-z''.
d104 1
a104 2
.Ss "MD5" crypt:
.Pp
d109 4
a112 2
and the hashed password are separated
by the ``$'' character. The maximum length of a password is limited by
d114 2
a115 1
2**64. A valid MD5 password entry looks like this:
d117 1
a117 1
``$1$caeiHQwX$hsKqOjrFRRN6K32OWkCBf1''.
d122 1
a122 2
.Ss "Blowfish" crypt:
.Pp
d127 2
a128 3
in order to make building
dictionaries of common passwords space consuming. The initial state
of the
d135 7
a141 3
the password string. The maximum password length is 72. The final Blowfish
password entry is created by encrypting
the string ``OrpheanBeholderScryDoubt'' with the
d146 5
a150 2
the concatenation of salt and
hashed password are separated by the ``$'' character. An encoded ``8''
d154 1
a154 1
``$2a$12$eIAq8PR8sIUnJ1HaohxX2O9x9Qlm2vK97LJ5dsXdmB.eXF42qjchC''.
d159 1
a159 2
.Ss "Traditional" crypt:
.Pp
d171 1
a171 2
.Ss DES Algorithm:
.Pp
d199 1
a199 1
The functions,
d202 1
a202 1
.Fn des_setkey
d260 3
a262 1
returns a pointer to the encrypted value on success, and NULL on failure.
d273 1
a273 1
.Fn setkey
d284 2
a285 6
.Sh BUGS
The
.Fn crypt
function returns a pointer to static data, and subsequent calls to
.Fn crypt
will modify the same object.
d304 2
a305 1
the other programmer interfaces listed above. Special care has been taken
d309 6
a314 2
.Sh AUTHOR
David Burren <davidb@@werj.com.au>
@


1.14
log
@ie. -> i.e.,
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.13 1999/07/09 13:35:15 aaron Exp $
d237 1
a237 2
.Fa in
).
@


1.13
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.12 1999/03/18 11:08:33 aaron Exp $
d163 1
a163 1
(ie. with 24 or 12 bits: if bit
@


1.12
log
@typo; nash@@mcs.net
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.11 1998/02/27 12:17:45 deraadt Exp $
d97 4
a100 4
For 
.Tn MD5 
crypt the version number, 
.Fa salt 
d104 1
a104 1
2**64. A valid MD5 password entry looks like this: 
d108 1
a108 1
The whole MD5 password string is passed as 
d113 4
a116 4
The 
.Tn Blowfish 
version of crypt has 128 bits of 
.Fa salt 
d119 3
a121 3
of the 
.Tn Blowfish 
cipher is expanded using the 
d124 1
a124 1
.Fa password 
d128 2
a129 2
the string ``OrpheanBeholderScryDoubt'' with the 
.Tn Blowfish 
d132 1
a132 1
The version number, the logarithm of the number of rounds and 
d140 1
a140 1
The whole Blowfish password string is passed as 
d288 1
a288 1
Programs linked against the 
d290 1
a290 1
interface may be exported from the U.S.A. only if they use 
d294 1
a294 1
in the library so that programs which only use the 
@


1.11
log
@extra commas go foom foom foom
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.10 1998/02/25 11:25:13 provos Exp $
d80 1
a80 1
and the low-order 7 bits of each each character (56 bits per group) are
@


1.10
log
@clarify about possible password lengths.
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.9 1997/11/30 23:16:30 provos Exp $
d42 1
a42 1
.Nm des_cipher ,
@


1.9
log
@2**8 is normally 256 and not 64, I should resign from applied math it seems.
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.8 1997/11/30 22:06:02 deraadt Exp $
d102 3
a104 1
by the ``$'' character. A valid password looks like this: 
d108 1
a108 1
The whole password string is passed as 
d126 2
a127 1
the password string. The final password entry is created by encrypting
d136 1
a136 1
A valid password looks like this:
d140 1
a140 1
The whole password string is passed as 
@


1.8
log
@kill bad .Os line
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.7 1997/11/05 11:44:49 provos Exp $
d132 1
a132 1
would specify 64 rounds.
@


1.7
log
@explain about MD5 and Blowfish passwords.
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.6 1997/03/31 02:38:44 deraadt Exp $
d36 1
a36 1
.Os "FreeSec 1.0"
@


1.6
log
@salt is an int32_t
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.5 1996/12/10 09:06:09 deraadt Exp $
d62 2
a63 1
Additional code has been added to deter key search attempts.
d69 1
a69 1
The second is in one of two forms:
d71 4
a74 1
in interpreting both the key and the setting, as outlined below.
d95 45
d153 1
a153 1
.Ss Algorithm:
d262 1
d264 1
@


1.5
log
@"the the" purge
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.4 1996/11/01 03:45:28 deraadt Exp $
d55 1
a55 1
.Fn des_cipher "const char *in" "char *out" "long salt" "int count"
@


1.4
log
@explain better how to make exportable bins
@
text
@d1 1
a1 1
.\" $OpenBSD: crypt.3,v 1.3 1996/08/07 18:40:26 downsj Exp $
d70 1
a70 1
in interpreting both the the key and the setting, as outlined below.
@


1.3
log
@Document where the prototypes are.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d64 1
a64 1
.Nm crypt
d234 9
a242 3
Programs linked against the crypt() interface may be exported from the U.S.A.
only if they use crypt() solely for authentication purposes and avoid use of
the other programmer interfaces listed above.
@


1.2
log
@Add md[245] routines in libc/md, remove md5 from libc/crypt.  Add $OpenBSD$
@
text
@d45 1
@


1.1
log
@non-USA crypto code by davidb@@werj.com.au.  The source has been split
& copied into two pieces so that use of crypt() pulls in a crypt.o
that contains only that one programmer interface -- this permits USA
export of binaries that use crypt() for authentication purposes.
morecrypt.c contains the other DES programmer interfaces commonly
used.
@
text
@d1 2
a30 2
.\"
.\"	$Id: crypt.3,v 1.4 1995/07/25 14:04:04 mark Exp $
@

