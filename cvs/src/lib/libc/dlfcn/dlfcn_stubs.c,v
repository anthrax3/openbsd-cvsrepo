head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.12
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.4
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.8
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.16
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.14
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.12
	OPENBSD_5_0:1.11.0.10
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.8
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.6
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.10.0.14
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.12
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.10
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.8
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.14
date	2016.09.06.18.49.34;	author guenther;	state Exp;
branches;
next	1.13;
commitid	tvwA62F4gbJ8QCJh;

1.13
date	2015.11.01.03.00.01;	author guenther;	state Exp;
branches;
next	1.12;
commitid	OP6bE2tMkj1UIK8q;

1.12
date	2013.03.24.01.37.23;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.22.07.15.15;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.28.16.54.18;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.17.20.24.06;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.11.19.14.56;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.15.02.56.14;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.11.21.03.10;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.09.16.10.04;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.29.21.30.16;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.26.02.27.13;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.20.01.53.21;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.20.01.09.38;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Implement dl_iterate_phdr() for static PIE executables using info extracted
from the aux vector.

ok patrick@@ kettenis@@
@
text
@/*	$OpenBSD: dlfcn_stubs.c,v 1.13 2015/11/01 03:00:01 guenther Exp $	*/

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/types.h>
#include <stddef.h>
#include <link.h>

#include "init.h"

/*
 *	All functions here are just stubs that will be overridden
 *	by the real functions in ld.so when dynamic loading is
 *	performed at exec. The symbols here are provided as a link
 *	helper so we can link a program using the dl functions
 *	without getting any unresolved references.
 */

void	*dlopen(const char *libname, int how) __attribute__((weak));
int	 dlclose(void *handle) __attribute__((weak));
void	*dlsym(void *handle, const char *name) __attribute__((weak));
int	 dlctl(void *handle, int command, void *data) __attribute__((weak));
char 	*dlerror(void) __attribute__((weak));

struct dl_info;
int	dladdr(const void *addr, struct dl_info *info) __attribute__((weak));

int	 dl_iterate_phdr(int (*callback)(struct dl_phdr_info *, size_t, void *),	    void *date) __attribute__((weak));

#include <stdio.h>

void *
dlopen(const char *libname, int how)
{
	printf("Wrong dl symbols!\n");
	return NULL;
}

int
dlclose(void *handle)
{
	printf("Wrong dl symbols!\n");
	return 0;
}

void *
dlsym(void *handle, const char *name)
{
	printf("Wrong dl symbols!\n");
	return NULL;
}

int
dlctl(void *handle, int command, void *data)
{
	return -1;
}

char *
dlerror(void)
{
	return "Wrong dl symbols!\n";
}

int
dl_iterate_phdr(int (*callback)(struct dl_phdr_info *, size_t, void *),
	void *data)
{
#ifndef PIC
	if (_static_phdr_info.dlpi_phdr != NULL)
		return callback(&_static_phdr_info, sizeof(_static_phdr_info),
		    data);
#endif /* !PIC */
	return -1;
}

int
dladdr(const void *addr, struct dl_info *info)
{
	printf("Wrong dl symbols!\n");
	return -1;
}

/* Thread Local Storage argument structure */
typedef struct {
	unsigned long int ti_module;
	unsigned long int ti_offset;
} tls_index;

void	*__tls_get_addr(tls_index *) __attribute__((weak));
#ifdef __i386
void	*___tls_get_addr(tls_index *) __attribute__((weak, __regparm__(1)));
#endif

#if defined(__amd64) || defined(__i386) || defined(__sparc64)
void *
__tls_get_addr(tls_index *ti)
{
	return NULL;
}

#ifdef __i386
__attribute__((__regparm__(1))) void *
___tls_get_addr(tls_index *ti)
{
	return NULL;
}
#endif /* __i386 */
#endif /* arch with TLS support enabled */
@


1.13
log
@delete old lint ARGSUSED comments
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.12 2013/03/24 01:37:23 deraadt Exp $	*/
d29 1
d31 3
a51 1
struct dl_phdr_info;
d93 5
d107 27
@


1.12
log
@dlerror() should not return const char *, as noted by landry
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.11 2009/04/22 07:15:15 guenther Exp $	*/
a52 1
/*ARGSUSED*/
a59 1
/*ARGSUSED*/
a66 1
/*ARGSUSED*/
a73 1
/*ARGSUSED*/
a79 1
/*ARGSUSED*/
a85 1
/*ARGSUSED*/
a92 1
/*ARGSUSED*/
@


1.11
log
@Correct the declaration of the dladdr() stub so that it has the correct
lint information

originally ok'ed deraadt@@ right before the 4.5 tree lock
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.10 2005/11/28 16:54:18 deraadt Exp $	*/
d43 1
a43 1
const char *	dlerror(void) __attribute__((weak));
d85 1
a85 1
const char *
@


1.10
log
@ARGSUSED stubs
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.9 2004/10/17 20:24:06 kettenis Exp $	*/
d44 3
a46 1
int	dladdr(const void *addr, void *info) __attribute__((weak));
d101 1
a101 1
dladdr(const void *addr, void *info)
@


1.9
log
@Expose dl_iterate_phdr.
ok drahn@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.8 2004/08/11 19:14:56 drahn Exp $	*/
d51 1
d59 1
d67 1
d75 1
d82 1
d89 1
d97 1
@


1.8
log
@add dladdr() support and add some 'standard' dlsym() support.
ok millert miod pval, grumble deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.7 2003/07/15 02:56:14 deraadt Exp $	*/
d29 2
d46 3
d82 7
@


1.7
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.6 2003/06/11 21:03:10 deraadt Exp $	*/
d42 1
d77 7
@


1.6
log
@ansification; checked by pval
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.5 2003/06/09 16:10:04 deraadt Exp $	*/
d41 1
a41 1
const char *	dlerror() __attribute__((weak));
@


1.5
log
@pefo 3/4 licence cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.4 2003/04/29 21:30:16 marc Exp $	*/
d73 1
a73 1
dlerror()
@


1.4
log
@
remove printf from static dlctl and dlerror stubs.  Return -1 if
dlctl called from a static prog.   dlerror will display the proper
error in if also called.   -1 return suggested by drahn@@  general
ok from several others
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.3 2001/12/26 02:27:13 pvalchev Exp $	*/
a13 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.3
log
@no way for this to be 'shared only', duh
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.2 2001/11/20 01:53:21 pvalchev Exp $	*/
d75 1
a75 2
	printf("Wrong dl symbols!\n");
	return 0;
a80 1
	printf("Wrong dl symbols!\n");
@


1.2
log
@shared only
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn_stubs.c,v 1.1 2001/11/20 01:09:38 pvalchev Exp $	*/
a42 1
#ifdef PIC
a84 1
#endif
@


1.1
log
@Put dl* function definitions in libc on ELF, removing the need for libdl.
These are just stubs, the real functions are resolved by ld.so when linking
is performed.  ok art
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
d86 1
@

