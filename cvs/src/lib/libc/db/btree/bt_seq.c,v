head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.46
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.42
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.44
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.36
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.40
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.38
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.34
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.32
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.30
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.28
	OPENBSD_5_0:1.11.0.26
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.24
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.22
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.18
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.20
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.16
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.10
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2005.08.05.13.03.00;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.23.19.34.58;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.03.22.30.28;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.33;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.01.20.23.40;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.22;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.16.13.08.55;	author art;	state Exp;
branches;
next	1.4;

1.4
date	99.02.15.05.11.23;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.20.14;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.09.00.58;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.48;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@zap rcsid
@
text
@/*	$OpenBSD: bt_seq.c,v 1.10 2005/03/23 19:34:58 otto Exp $	*/

/*-
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Mike Olson.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <errno.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>

#include <db.h>
#include "btree.h"

static int __bt_first(BTREE *, const DBT *, EPG *, int *);
static int __bt_seqadv(BTREE *, EPG *, int);
static int __bt_seqset(BTREE *, EPG *, DBT *, int);

/*
 * Sequential scan support.
 *
 * The tree can be scanned sequentially, starting from either end of the
 * tree or from any specific key.  A scan request before any scanning is
 * done is initialized as starting from the least node.
 */

/*
 * __bt_seq --
 *	Btree sequential scan interface.
 *
 * Parameters:
 *	dbp:	pointer to access method
 *	key:	key for positioning and return value
 *	data:	data return value
 *	flags:	R_CURSOR, R_FIRST, R_LAST, R_NEXT, R_PREV.
 *
 * Returns:
 *	RET_ERROR, RET_SUCCESS or RET_SPECIAL if there's no next key.
 */
int
__bt_seq(const DB *dbp, DBT *key, DBT *data, u_int flags)
{
	BTREE *t;
	EPG e;
	int status;

	t = dbp->internal;

	/* Toss any page pinned across calls. */
	if (t->bt_pinned != NULL) {
		mpool_put(t->bt_mp, t->bt_pinned, 0);
		t->bt_pinned = NULL;
	}

	/*
	 * If scan unitialized as yet, or starting at a specific record, set
	 * the scan to a specific key.  Both __bt_seqset and __bt_seqadv pin
	 * the page the cursor references if they're successful.
	 */
	switch (flags) {
	case R_NEXT:
	case R_PREV:
		if (F_ISSET(&t->bt_cursor, CURS_INIT)) {
			status = __bt_seqadv(t, &e, flags);
			break;
		}
		/* FALLTHROUGH */
	case R_FIRST:
	case R_LAST:
	case R_CURSOR:
		status = __bt_seqset(t, &e, key, flags);
		break;
	default:
		errno = EINVAL;
		return (RET_ERROR);
	}

	if (status == RET_SUCCESS) {
		__bt_setcur(t, e.page->pgno, e.index);

		status =
		    __bt_ret(t, &e, key, &t->bt_rkey, data, &t->bt_rdata, 0);

		/*
		 * If the user is doing concurrent access, we copied the
		 * key/data, toss the page.
		 */
		if (F_ISSET(t, B_DB_LOCK))
			mpool_put(t->bt_mp, e.page, 0);
		else
			t->bt_pinned = e.page;
	}
	return (status);
}

/*
 * __bt_seqset --
 *	Set the sequential scan to a specific key.
 *
 * Parameters:
 *	t:	tree
 *	ep:	storage for returned key
 *	key:	key for initial scan position
 *	flags:	R_CURSOR, R_FIRST, R_LAST, R_NEXT, R_PREV
 *
 * Side effects:
 *	Pins the page the cursor references.
 *
 * Returns:
 *	RET_ERROR, RET_SUCCESS or RET_SPECIAL if there's no next key.
 */
static int
__bt_seqset(BTREE *t, EPG *ep, DBT *key, int flags)
{
	PAGE *h;
	pgno_t pg;
	int exact;

	/*
	 * Find the first, last or specific key in the tree and point the
	 * cursor at it.  The cursor may not be moved until a new key has
	 * been found.
	 */
	switch (flags) {
	case R_CURSOR:				/* Keyed scan. */
		/*
		 * Find the first instance of the key or the smallest key
		 * which is greater than or equal to the specified key.
		 */
		if (key->data == NULL || key->size == 0) {
			errno = EINVAL;
			return (RET_ERROR);
		}
		return (__bt_first(t, key, ep, &exact));
	case R_FIRST:				/* First record. */
	case R_NEXT:
		/* Walk down the left-hand side of the tree. */
		for (pg = P_ROOT;;) {
			if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
				return (RET_ERROR);

			/* Check for an empty tree. */
			if (NEXTINDEX(h) == 0) {
				mpool_put(t->bt_mp, h, 0);
				return (RET_SPECIAL);
			}

			if (h->flags & (P_BLEAF | P_RLEAF))
				break;
			pg = GETBINTERNAL(h, 0)->pgno;
			mpool_put(t->bt_mp, h, 0);
		}
		ep->page = h;
		ep->index = 0;
		break;
	case R_LAST:				/* Last record. */
	case R_PREV:
		/* Walk down the right-hand side of the tree. */
		for (pg = P_ROOT;;) {
			if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
				return (RET_ERROR);

			/* Check for an empty tree. */
			if (NEXTINDEX(h) == 0) {
				mpool_put(t->bt_mp, h, 0);
				return (RET_SPECIAL);
			}

			if (h->flags & (P_BLEAF | P_RLEAF))
				break;
			pg = GETBINTERNAL(h, NEXTINDEX(h) - 1)->pgno;
			mpool_put(t->bt_mp, h, 0);
		}

		ep->page = h;
		ep->index = NEXTINDEX(h) - 1;
		break;
	}
	return (RET_SUCCESS);
}

/*
 * __bt_seqadvance --
 *	Advance the sequential scan.
 *
 * Parameters:
 *	t:	tree
 *	flags:	R_NEXT, R_PREV
 *
 * Side effects:
 *	Pins the page the new key/data record is on.
 *
 * Returns:
 *	RET_ERROR, RET_SUCCESS or RET_SPECIAL if there's no next key.
 */
static int
__bt_seqadv(BTREE *t, EPG *ep, int flags)
{
	CURSOR *c;
	PAGE *h;
	indx_t idx;
	pgno_t pg;
	int exact;

	/*
	 * There are a couple of states that we can be in.  The cursor has
	 * been initialized by the time we get here, but that's all we know.
	 */
	c = &t->bt_cursor;

	/*
	 * The cursor was deleted where there weren't any duplicate records,
	 * so the key was saved.  Find out where that key would go in the
	 * current tree.  It doesn't matter if the returned key is an exact
	 * match or not -- if it's an exact match, the record was added after
	 * the delete so we can just return it.  If not, as long as there's
	 * a record there, return it.
	 */
	if (F_ISSET(c, CURS_ACQUIRE))
		return (__bt_first(t, &c->key, ep, &exact));

	/* Get the page referenced by the cursor. */
	if ((h = mpool_get(t->bt_mp, c->pg.pgno, 0)) == NULL)
		return (RET_ERROR);

	/*
 	 * Find the next/previous record in the tree and point the cursor at
	 * it.  The cursor may not be moved until a new key has been found.
	 */
	switch (flags) {
	case R_NEXT:			/* Next record. */
		/*
		 * The cursor was deleted in duplicate records, and moved
		 * forward to a record that has yet to be returned.  Clear
		 * that flag, and return the record.
		 */
		if (F_ISSET(c, CURS_AFTER))
			goto usecurrent;
		idx = c->pg.index;
		if (++idx == NEXTINDEX(h)) {
			pg = h->nextpg;
			mpool_put(t->bt_mp, h, 0);
			if (pg == P_INVALID)
				return (RET_SPECIAL);
			if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
				return (RET_ERROR);
			idx = 0;
		}
		break;
	case R_PREV:			/* Previous record. */
		/*
		 * The cursor was deleted in duplicate records, and moved
		 * backward to a record that has yet to be returned.  Clear
		 * that flag, and return the record.
		 */
		if (F_ISSET(c, CURS_BEFORE)) {
usecurrent:		F_CLR(c, CURS_AFTER | CURS_BEFORE);
			ep->page = h;
			ep->index = c->pg.index;
			return (RET_SUCCESS);
		}
		idx = c->pg.index;
		if (idx == 0) {
			pg = h->prevpg;
			mpool_put(t->bt_mp, h, 0);
			if (pg == P_INVALID)
				return (RET_SPECIAL);
			if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
				return (RET_ERROR);
			idx = NEXTINDEX(h) - 1;
		} else
			--idx;
		break;
	}

	ep->page = h;
	ep->index = idx;
	return (RET_SUCCESS);
}

/*
 * __bt_first --
 *	Find the first entry.
 *
 * Parameters:
 *	t:	the tree
 *    key:	the key
 *  erval:	return EPG
 * exactp:	pointer to exact match flag
 *
 * Returns:
 *	The first entry in the tree greater than or equal to key,
 *	or RET_SPECIAL if no such key exists.
 */
static int
__bt_first(BTREE *t, const DBT *key, EPG *erval, int *exactp)
{
	PAGE *h;
	EPG *ep, save;
	pgno_t pg;

	/*
	 * Find any matching record; __bt_search pins the page.
	 *
	 * If it's an exact match and duplicates are possible, walk backwards
	 * in the tree until we find the first one.  Otherwise, make sure it's
	 * a valid key (__bt_search may return an index just past the end of a
	 * page) and return it.
	 */
	if ((ep = __bt_search(t, key, exactp)) == NULL)
		return (0);
	if (*exactp) {
		if (F_ISSET(t, B_NODUPS)) {
			*erval = *ep;
			return (RET_SUCCESS);
		}
			
		/*
		 * Walk backwards, as long as the entry matches and there are
		 * keys left in the tree.  Save a copy of each match in case
		 * we go too far.
		 */
		save = *ep;
		h = ep->page;
		do {
			if (save.page->pgno != ep->page->pgno) {
				mpool_put(t->bt_mp, save.page, 0);
				save = *ep;
			} else
				save.index = ep->index;

			/*
			 * Don't unpin the page the last (or original) match
			 * was on, but make sure it's unpinned if an error
			 * occurs.
			 */
			if (ep->index == 0) {
				if (h->prevpg == P_INVALID)
					break;
				if (h->pgno != save.page->pgno)
					mpool_put(t->bt_mp, h, 0);
				if ((h = mpool_get(t->bt_mp,
				    h->prevpg, 0)) == NULL) {
					if (h->pgno == save.page->pgno)
						mpool_put(t->bt_mp,
						    save.page, 0);
					return (RET_ERROR);
				}
				ep->page = h;
				ep->index = NEXTINDEX(h);
			}
			--ep->index;
		} while (__bt_cmp(t, key, ep) == 0);

		/*
		 * Reach here with the last page that was looked at pinned,
		 * which may or may not be the same as the last (or original)
		 * match page.  If it's not useful, release it.
		 */
		if (h->pgno != save.page->pgno)
			mpool_put(t->bt_mp, h, 0);

		*erval = save;
		return (RET_SUCCESS);
	}

	/* If at the end of a page, find the next entry. */
	if (ep->index == NEXTINDEX(ep->page)) {
		h = ep->page;
		pg = h->nextpg;
		mpool_put(t->bt_mp, h, 0);
		if (pg == P_INVALID)
			return (RET_SPECIAL);
		if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
			return (RET_ERROR);
		ep->index = 0;
		ep->page = h;
	}
	*erval = *ep;
	return (RET_SUCCESS);
}

/*
 * __bt_setcur --
 *	Set the cursor to an entry in the tree.
 *
 * Parameters:
 *	t:	the tree
 *   pgno:	page number
 *    idx:	page index
 */
void
__bt_setcur(BTREE *t, pgno_t pgno, u_int idx)
{
	/* Lose any already deleted key. */
	if (t->bt_cursor.key.data != NULL) {
		free(t->bt_cursor.key.data);
		t->bt_cursor.key.size = 0;
		t->bt_cursor.key.data = NULL;
	}
	F_CLR(&t->bt_cursor, CURS_ACQUIRE | CURS_AFTER | CURS_BEFORE);

	/* Update the cursor. */
	t->bt_cursor.pg.pgno = pgno;
	t->bt_cursor.pg.index = idx;
	F_SET(&t->bt_cursor, CURS_INIT);
}
@


1.10
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_seq.c,v 1.9 2005/01/03 22:30:28 millert Exp $	*/
a33 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)bt_seq.c	8.7 (Berkeley) 7/20/94";
#else
static const char rcsid[] = "$OpenBSD: bt_seq.c,v 1.9 2005/01/03 22:30:28 millert Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.9
log
@Avoid namespace pollution by renaming index variables -> idx.
Idea from NetBSD; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_seq.c,v 1.8 2003/06/02 20:18:33 millert Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: bt_seq.c,v 1.8 2003/06/02 20:18:33 millert Exp $";
d79 1
a79 4
__bt_seq(dbp, key, data, flags)
	const DB *dbp;
	DBT *key, *data;
	u_int flags;
d151 1
a151 5
__bt_seqset(t, ep, key, flags)
	BTREE *t;
	EPG *ep;
	DBT *key;
	int flags;
d235 1
a235 4
__bt_seqadv(t, ep, flags)
	BTREE *t;
	EPG *ep;
	int flags;
d334 1
a334 5
__bt_first(t, key, erval, exactp)
	BTREE *t;
	const DBT *key;
	EPG *erval;
	int *exactp;
d431 1
a431 4
__bt_setcur(t, pgno, idx)
	BTREE *t;
	pgno_t pgno;
	u_int idx;
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_seq.c,v 1.7 2003/05/01 20:23:40 avsm Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: bt_seq.c,v 1.7 2003/05/01 20:23:40 avsm Exp $";
d249 1
a249 1
	indx_t index;
d287 2
a288 2
		index = c->pg.index;
		if (++index == NEXTINDEX(h)) {
d295 1
a295 1
			index = 0;
d310 2
a311 2
		index = c->pg.index;
		if (index == 0) {
d318 1
a318 1
			index = NEXTINDEX(h) - 1;
d320 1
a320 1
			--index;
d325 1
a325 1
	ep->index = index;
d442 1
a442 1
 *  index:	page index
d445 1
a445 1
__bt_setcur(t, pgno, index)
d448 1
a448 1
	u_int index;
d460 1
a460 1
	t->bt_cursor.pg.index = index;
@


1.7
log
@-Wall cleanup, make rcsid variables const
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_seq.c,v 1.6 2002/02/16 21:27:22 millert Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: bt_seq.c,v 1.6 2002/02/16 21:27:22 millert Exp $";
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_seq.c,v 1.5 2001/09/16 13:08:55 art Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: bt_seq.c,v 1.5 2001/09/16 13:08:55 art Exp $";
@


1.5
log
@return 0, not NULL, the function returns an int
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_seq.c,v 1.4 1999/02/15 05:11:23 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: bt_seq.c,v 1.4 1999/02/15 05:11:23 millert Exp $";
d57 3
a59 3
static int __bt_first __P((BTREE *, const DBT *, EPG *, int *));
static int __bt_seqadv __P((BTREE *, EPG *, int));
static int __bt_seqset __P((BTREE *, EPG *, DBT *, int));
@


1.4
log
@ o Minor changes from db.1.86 (sleepycat).  Does not include the new hash
   routines since they cannot read a hashed .db file from the old code.
   Most of these files just have their RCS/SCCS tags standardized.
   Note that mpool.3 has not been updated to reflect the new mpool interface.
 o Add a real dbm(3) manpage
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: bt_seq.c,v 1.3 1996/08/19 08:20:14 tholo Exp $";
d367 1
a367 1
		return (NULL);
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 2
d40 5
a44 1
static char rcsid[] = "$OpenBSD: bt_seq.c,v 1.7 1996/05/03 21:50:54 cgd Exp $";
@


1.2
log
@db release 1.85
@
text
@a0 2
/*	$NetBSD: bt_seq.c,v 1.7 1996/05/03 21:50:54 cgd Exp $	*/

d38 1
a38 5
#if 0
static char sccsid[] = "@@(#)bt_seq.c	8.7 (Berkeley) 7/20/94";
#else
static char rcsid[] = "$NetBSD: bt_seq.c,v 1.7 1996/05/03 21:50:54 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: bt_seq.c,v 1.6 1995/02/27 13:20:51 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1990, 1993
d41 1
a41 1
static char sccsid[] = "@@(#)bt_seq.c	8.2 (Berkeley) 9/7/93";
d43 1
a43 1
static char rcsid[] = "$NetBSD: bt_seq.c,v 1.6 1995/02/27 13:20:51 cgd Exp $";
d57 3
a59 2
static int	 bt_seqadv __P((BTREE *, EPG *, int));
static int	 bt_seqset __P((BTREE *, EPG *, DBT *, int));
d64 3
a66 8
 * The tree can be scanned sequentially, starting from either end of the tree
 * or from any specific key.  A scan request before any scanning is done is
 * initialized as starting from the least node.
 *
 * Each tree has an EPGNO which has the current position of the cursor.  The
 * cursor has to survive deletions/insertions in the tree without losing its
 * position.  This is done by noting deletions without doing them, and then
 * doing them when the cursor moves (or the tree is closed).
d70 2
a71 1
 * __BT_SEQ -- Btree sequential scan interface.
d102 2
a103 2
	 * the scan to a specific key.  Both bt_seqset and bt_seqadv pin the
	 * page the cursor references if they're successful.
d105 1
a105 1
	switch(flags) {
d108 2
a109 2
		if (ISSET(t, B_SEQINIT)) {
			status = bt_seqadv(t, &e, flags);
a112 1
	case R_CURSOR:
d115 2
a116 1
		status = bt_seqset(t, &e, key, flags);
d124 1
a124 1
		status = __bt_ret(t, &e, key, data);
d126 2
a127 3
		/* Update the actual cursor. */
		t->bt_bcursor.pgno = e.page->pgno;
		t->bt_bcursor.index = e.index;
d133 1
a133 1
		if (ISSET(t, B_DB_LOCK))
a136 1
		SET(t, B_SEQINIT);
d142 2
a143 1
 * BT_SEQSET -- Set the sequential scan to a specific key.
d158 1
a158 1
bt_seqset(t, ep, key, flags)
a163 1
	EPG *e;
d169 3
a171 3
	 * Delete any already deleted record that we've been saving because
	 * the cursor pointed to it.  Since going to a specific key, should
	 * delete any logically deleted records so they aren't found.
d173 1
a173 8
	if (ISSET(t, B_DELCRSR) && __bt_crsrdel(t, &t->bt_bcursor))
		return (RET_ERROR);

	/*
	 * Find the first, last or specific key in the tree and point the cursor
	 * at it.  The cursor may not be moved until a new key has been found.
	 */
	switch(flags) {
d176 2
a177 3
		 * Find the first instance of the key or the smallest key which
		 * is greater than or equal to the specified key.  If run out
		 * of keys, return RET_SPECIAL.
d183 1
a183 22
		e = __bt_first(t, key, &exact);	/* Returns pinned page. */
		if (e == NULL)
			return (RET_ERROR);
		/*
		 * If at the end of a page, skip any empty pages and find the
		 * next entry.
		 */
		if (e->index == NEXTINDEX(e->page)) {
			h = e->page;
			do {
				pg = h->nextpg;
				mpool_put(t->bt_mp, h, 0);
				if (pg == P_INVALID)
					return (RET_SPECIAL);
				if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
					return (RET_ERROR);
			} while (NEXTINDEX(h) == 0);
			e->index = 0;
			e->page = h;
		}
		*ep = *e;
		break;
d190 7
a201 14

		/* Skip any empty pages. */
		while (NEXTINDEX(h) == 0 && h->nextpg != P_INVALID) {
			pg = h->nextpg;
			mpool_put(t->bt_mp, h, 0);
			if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
				return (RET_ERROR);
		}

		if (NEXTINDEX(h) == 0) {
			mpool_put(t->bt_mp, h, 0);
			return (RET_SPECIAL);
		}

d211 7
a223 13
		/* Skip any empty pages. */
		while (NEXTINDEX(h) == 0 && h->prevpg != P_INVALID) {
			pg = h->prevpg;
			mpool_put(t->bt_mp, h, 0);
			if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
				return (RET_ERROR);
		}

		if (NEXTINDEX(h) == 0) {
			mpool_put(t->bt_mp, h, 0);
			return (RET_SPECIAL);
		}

d232 2
a233 1
 * BT_SEQADVANCE -- Advance the sequential scan.
d246 1
a246 1
bt_seqadv(t, e, flags)
d248 1
a248 1
	EPG *e;
d251 1
a251 1
	EPGNO *c, delc;
d255 7
d263 10
a272 4
	/* Save the current cursor if going to delete it. */
	c = &t->bt_bcursor;
	if (ISSET(t, B_DELCRSR))
		delc = *c;
d274 2
a275 1
	if ((h = mpool_get(t->bt_mp, c->pgno, 0)) == NULL)
d279 2
a280 2
 	 * Find the next/previous record in the tree and point the cursor at it.
	 * The cursor may not be moved until a new key has been found.
d282 1
a282 2
	index = c->index;
	switch(flags) {
d284 8
d293 6
a298 8
			do {
				pg = h->nextpg;
				mpool_put(t->bt_mp, h, 0);
				if (pg == P_INVALID)
					return (RET_SPECIAL);
				if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
					return (RET_ERROR);
			} while (NEXTINDEX(h) == 0);
d303 19
a321 9
		if (index-- == 0) {
			do {
				pg = h->prevpg;
				mpool_put(t->bt_mp, h, 0);
				if (pg == P_INVALID)
					return (RET_SPECIAL);
				if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
					return (RET_ERROR);
			} while (NEXTINDEX(h) == 0);
d323 2
a324 1
		}
d328 29
a356 2
	e->page = h;
	e->index = index;
d359 6
a364 4
	 * Delete any already deleted record that we've been saving because the
	 * cursor pointed to it.  This could cause the new index to be shifted
	 * down by one if the record we're deleting is on the same page and has
	 * a larger index.
d366 65
a430 5
	if (ISSET(t, B_DELCRSR)) {
		CLR(t, B_DELCRSR);			/* Don't try twice. */
		if (c->pgno == delc.pgno && c->index > delc.index)
			--c->index;
		if (__bt_crsrdel(t, &delc))
d432 2
d435 1
d440 2
a441 1
 * __BT_CRSRDEL -- Delete the record referenced by the cursor.
d444 3
a446 4
 *	t:	tree
 *
 * Returns:
 *	RET_ERROR, RET_SUCCESS
d448 2
a449 2
int
__bt_crsrdel(t, c)
d451 2
a452 1
	EPGNO *c;
d454 7
a460 2
	PAGE *h;
	int status;
d462 4
a465 6
	CLR(t, B_DELCRSR);			/* Don't try twice. */
	if ((h = mpool_get(t->bt_mp, c->pgno, 0)) == NULL)
		return (RET_ERROR);
	status = __bt_dleaf(t, h, c->index);
	mpool_put(t->bt_mp, h, MPOOL_DIRTY);
	return (status);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
