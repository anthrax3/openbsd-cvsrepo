head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.46
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.42
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.44
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.36
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.40
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.38
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.34
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.32
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.30
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.28
	OPENBSD_5_0:1.13.0.26
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.24
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.22
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.18
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.20
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.16
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.14
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.12
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.10
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.8
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.12
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2005.08.05.13.02.59;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2005.03.23.19.34.58;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2005.01.03.22.30.28;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.03.22.19.38;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.20.18.33;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.01.20.23.40;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.22;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.02.15.05.11.23;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.03.19.00.29.53;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.23.21.00.26;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.20.11;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.09.00.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.48;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@zap rcsid
@
text
@/*	$OpenBSD: bt_put.c,v 1.12 2005/03/23 19:34:58 otto Exp $	*/

/*-
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Mike Olson.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <db.h>
#include "btree.h"

static EPG *bt_fast(BTREE *, const DBT *, const DBT *, int *);

/*
 * __BT_PUT -- Add a btree item to the tree.
 *
 * Parameters:
 *	dbp:	pointer to access method
 *	key:	key
 *	data:	data
 *	flag:	R_NOOVERWRITE
 *
 * Returns:
 *	RET_ERROR, RET_SUCCESS and RET_SPECIAL if the key is already in the
 *	tree and R_NOOVERWRITE specified.
 */
int
__bt_put(const DB *dbp, DBT *key, const DBT *data, u_int flags)
{
	BTREE *t;
	DBT tkey, tdata;
	EPG *e;
	PAGE *h;
	indx_t idx, nxtindex;
	pgno_t pg;
	u_int32_t nbytes, size32;
	int dflags, exact, status;
	char *dest, db[NOVFLSIZE], kb[NOVFLSIZE];

	t = dbp->internal;

	/* Toss any page pinned across calls. */
	if (t->bt_pinned != NULL) {
		mpool_put(t->bt_mp, t->bt_pinned, 0);
		t->bt_pinned = NULL;
	}

	/* Check for change to a read-only tree. */
	if (F_ISSET(t, B_RDONLY)) {
		errno = EPERM;
		return (RET_ERROR);
	}

	switch (flags) {
	case 0:
	case R_NOOVERWRITE:
		break;
	case R_CURSOR:
		/*
		 * If flags is R_CURSOR, put the cursor.  Must already
		 * have started a scan and not have already deleted it.
		 */
		if (F_ISSET(&t->bt_cursor, CURS_INIT) &&
		    !F_ISSET(&t->bt_cursor,
			CURS_ACQUIRE | CURS_AFTER | CURS_BEFORE))
			break;
		/* FALLTHROUGH */
	default:
		errno = EINVAL;
		return (RET_ERROR);
	}

	/*
	 * If the key/data pair won't fit on a page, store it on overflow
	 * pages.  Only put the key on the overflow page if the pair are
	 * still too big after moving the data to an overflow page.
	 *
	 * XXX
	 * If the insert fails later on, the overflow pages aren't recovered.
	 */
	dflags = 0;
	if (key->size + data->size > t->bt_ovflsize) {
		if (key->size > t->bt_ovflsize) {
storekey:		if (__ovfl_put(t, key, &pg) == RET_ERROR)
				return (RET_ERROR);
			tkey.data = kb;
			tkey.size = NOVFLSIZE;
			memmove(kb, &pg, sizeof(pgno_t));
			size32 = key->size;
			memmove(kb + sizeof(pgno_t),
			    &size32, sizeof(u_int32_t));
			dflags |= P_BIGKEY;
			key = &tkey;
		}
		if (key->size + data->size > t->bt_ovflsize) {
			if (__ovfl_put(t, data, &pg) == RET_ERROR)
				return (RET_ERROR);
			tdata.data = db;
			tdata.size = NOVFLSIZE;
			memmove(db, &pg, sizeof(pgno_t));
			size32 = data->size;
			memmove(db + sizeof(pgno_t),
			    &size32, sizeof(u_int32_t));
			dflags |= P_BIGDATA;
			data = &tdata;
		}
		if (key->size + data->size > t->bt_ovflsize)
			goto storekey;
	}

	/* Replace the cursor. */
	if (flags == R_CURSOR) {
		if ((h = mpool_get(t->bt_mp, t->bt_cursor.pg.pgno, 0)) == NULL)
			return (RET_ERROR);
		idx = t->bt_cursor.pg.index;
		goto delete;
	}

	/*
	 * Find the key to delete, or, the location at which to insert.
	 * Bt_fast and __bt_search both pin the returned page.
	 */
	if (t->bt_order == NOT || (e = bt_fast(t, key, data, &exact)) == NULL)
		if ((e = __bt_search(t, key, &exact)) == NULL)
			return (RET_ERROR);
	h = e->page;
	idx = e->index;

	/*
	 * Add the key/data pair to the tree.  If an identical key is already
	 * in the tree, and R_NOOVERWRITE is set, an error is returned.  If
	 * R_NOOVERWRITE is not set, the key is either added (if duplicates are
	 * permitted) or an error is returned.
	 */
	switch (flags) {
	case R_NOOVERWRITE:
		if (!exact)
			break;
		mpool_put(t->bt_mp, h, 0);
		return (RET_SPECIAL);
	default:
		if (!exact || !F_ISSET(t, B_NODUPS))
			break;
		/*
		 * !!!
		 * Note, the delete may empty the page, so we need to put a
		 * new entry into the page immediately.
		 */
delete:		if (__bt_dleaf(t, key, h, idx) == RET_ERROR) {
			mpool_put(t->bt_mp, h, 0);
			return (RET_ERROR);
		}
		break;
	}

	/*
	 * If not enough room, or the user has put a ceiling on the number of
	 * keys permitted in the page, split the page.  The split code will
	 * insert the key and data and unpin the current page.  If inserting
	 * into the offset array, shift the pointers up.
	 */
	nbytes = NBLEAFDBT(key->size, data->size);
	if (h->upper - h->lower < nbytes + sizeof(indx_t)) {
		if ((status = __bt_split(t, h, key,
		    data, dflags, nbytes, idx)) != RET_SUCCESS)
			return (status);
		goto success;
	}

	if (idx < (nxtindex = NEXTINDEX(h)))
		memmove(h->linp + idx + 1, h->linp + idx,
		    (nxtindex - idx) * sizeof(indx_t));
	h->lower += sizeof(indx_t);

	h->linp[idx] = h->upper -= nbytes;
	dest = (char *)h + h->upper;
	WR_BLEAF(dest, key, data, dflags);

	/* If the cursor is on this page, adjust it as necessary. */
	if (F_ISSET(&t->bt_cursor, CURS_INIT) &&
	    !F_ISSET(&t->bt_cursor, CURS_ACQUIRE) &&
	    t->bt_cursor.pg.pgno == h->pgno && t->bt_cursor.pg.index >= idx)
		++t->bt_cursor.pg.index;

	if (t->bt_order == NOT) {
		if (h->nextpg == P_INVALID) {
			if (idx == NEXTINDEX(h) - 1) {
				t->bt_order = FORWARD;
				t->bt_last.index = idx;
				t->bt_last.pgno = h->pgno;
			}
		} else if (h->prevpg == P_INVALID) {
			if (idx == 0) {
				t->bt_order = BACK;
				t->bt_last.index = 0;
				t->bt_last.pgno = h->pgno;
			}
		}
	}

	mpool_put(t->bt_mp, h, MPOOL_DIRTY);

success:
	if (flags == R_SETCURSOR)
		__bt_setcur(t, e->page->pgno, e->index);

	F_SET(t, B_MODIFIED);
	return (RET_SUCCESS);
}

#ifdef STATISTICS
u_long bt_cache_hit, bt_cache_miss;
#endif

/*
 * BT_FAST -- Do a quick check for sorted data.
 *
 * Parameters:
 *	t:	tree
 *	key:	key to insert
 *
 * Returns:
 * 	EPG for new record or NULL if not found.
 */
static EPG *
bt_fast(BTREE *t, const DBT *key, const DBT *data, int *exactp)
{
	PAGE *h;
	u_int32_t nbytes;
	int cmp;

	if ((h = mpool_get(t->bt_mp, t->bt_last.pgno, 0)) == NULL) {
		t->bt_order = NOT;
		return (NULL);
	}
	t->bt_cur.page = h;
	t->bt_cur.index = t->bt_last.index;

	/*
	 * If won't fit in this page or have too many keys in this page,
	 * have to search to get split stack.
	 */
	nbytes = NBLEAFDBT(key->size, data->size);
	if (h->upper - h->lower < nbytes + sizeof(indx_t))
		goto miss;

	if (t->bt_order == FORWARD) {
		if (t->bt_cur.page->nextpg != P_INVALID)
			goto miss;
		if (t->bt_cur.index != NEXTINDEX(h) - 1)
			goto miss;
		if ((cmp = __bt_cmp(t, key, &t->bt_cur)) < 0)
			goto miss;
		t->bt_last.index = cmp ? ++t->bt_cur.index : t->bt_cur.index;
	} else {
		if (t->bt_cur.page->prevpg != P_INVALID)
			goto miss;
		if (t->bt_cur.index != 0)
			goto miss;
		if ((cmp = __bt_cmp(t, key, &t->bt_cur)) > 0)
			goto miss;
		t->bt_last.index = 0;
	}
	*exactp = cmp == 0;
#ifdef STATISTICS
	++bt_cache_hit;
#endif
	return (&t->bt_cur);

miss:
#ifdef STATISTICS
	++bt_cache_miss;
#endif
	t->bt_order = NOT;
	mpool_put(t->bt_mp, h, 0);
	return (NULL);
}
@


1.12
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_put.c,v 1.11 2005/01/03 22:30:28 millert Exp $	*/
a33 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)bt_put.c   8.8 (Berkeley) 7/26/94";
#else
static const char rcsid[] = "$OpenBSD: bt_put.c,v 1.11 2005/01/03 22:30:28 millert Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.11
log
@Avoid namespace pollution by renaming index variables -> idx.
Idea from NetBSD; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_put.c,v 1.10 2005/01/03 22:19:38 millert Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: bt_put.c,v 1.10 2005/01/03 22:19:38 millert Exp $";
d69 1
a69 5
__bt_put(dbp, key, data, flags)
	const DB *dbp;
	DBT *key;
	const DBT *data;
	u_int flags;
d267 1
a267 4
bt_fast(t, key, data, exactp)
	BTREE *t;
	const DBT *key, *data;
	int *exactp;
@


1.10
log
@Make a u_int32_t-sized copy of data->size and key->size (which are size_t)
so when we memmove() it we get the correct 32 bits copied on sparc64.
Adapted from FreeBSD.  OK otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_put.c,v 1.9 2003/06/02 20:18:33 millert Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: bt_put.c,v 1.9 2003/06/02 20:18:33 millert Exp $";
d79 1
a79 1
	indx_t index, nxtindex;
d160 1
a160 1
		index = t->bt_cursor.pg.index;
d172 1
a172 1
	index = e->index;
d194 1
a194 1
delete:		if (__bt_dleaf(t, key, h, index) == RET_ERROR) {
d210 1
a210 1
		    data, dflags, nbytes, index)) != RET_SUCCESS)
d215 3
a217 3
	if (index < (nxtindex = NEXTINDEX(h)))
		memmove(h->linp + index + 1, h->linp + index,
		    (nxtindex - index) * sizeof(indx_t));
d220 1
a220 1
	h->linp[index] = h->upper -= nbytes;
d227 1
a227 1
	    t->bt_cursor.pg.pgno == h->pgno && t->bt_cursor.pg.index >= index)
d232 1
a232 1
			if (index == NEXTINDEX(h) - 1) {
d234 1
a234 1
				t->bt_last.index = index;
d238 1
a238 1
			if (index == 0) {
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_put.c,v 1.8 2003/05/01 20:23:40 avsm Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: bt_put.c,v 1.8 2003/05/01 20:23:40 avsm Exp $";
d81 1
a81 1
	u_int32_t nbytes;
d134 1
d136 1
a136 1
			    &key->size, sizeof(u_int32_t));
d146 1
d148 1
a148 1
			    &data->size, sizeof(u_int32_t));
@


1.8
log
@-Wall cleanup, make rcsid variables const
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_put.c,v 1.7 2002/02/16 21:27:22 millert Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: bt_put.c,v 1.7 2002/02/16 21:27:22 millert Exp $";
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_put.c,v 1.6 1999/02/15 05:11:23 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: bt_put.c,v 1.6 1999/02/15 05:11:23 millert Exp $";
@


1.6
log
@ o Minor changes from db.1.86 (sleepycat).  Does not include the new hash
   routines since they cannot read a hashed .db file from the old code.
   Most of these files just have their RCS/SCCS tags standardized.
   Note that mpool.3 has not been updated to reflect the new mpool interface.
 o Add a real dbm(3) manpage
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: bt_put.c,v 1.5 1998/03/19 00:29:53 millert Exp $";
d57 1
a57 1
static EPG *bt_fast __P((BTREE *, const DBT *, const DBT *, int *));
@


1.5
log
@some -Wall
@
text
@d1 2
d40 5
a44 1
static char rcsid[] = "$OpenBSD: bt_put.c,v 1.4 1997/07/23 21:00:26 kstailey Exp $";
@


1.4
log
@tabify
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: bt_put.c,v 1.3 1996/08/19 08:20:11 tholo Exp $";
d226 1
a226 1
	if (t->bt_order == NOT)
d240 1
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: bt_put.c,v 1.8 1996/05/03 21:50:51 cgd Exp $";
d108 1
a108 1
		        CURS_ACQUIRE | CURS_AFTER | CURS_BEFORE))
@


1.2
log
@db release 1.85
@
text
@a0 2
/*	$NetBSD: bt_put.c,v 1.8 1996/05/03 21:50:51 cgd Exp $	*/

d38 1
a38 5
#if 0
static char sccsid[] = "@@(#)bt_put.c	8.8 (Berkeley) 7/26/94";
#else
static char rcsid[] = "$NetBSD: bt_put.c,v 1.8 1996/05/03 21:50:51 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: bt_put.c,v 1.7 1995/02/27 13:20:40 cgd Exp $	*/
d41 1
a41 1
static char sccsid[] = "@@(#)bt_put.c	8.4 (Berkeley) 5/31/94";
d43 1
a43 1
static char rcsid[] = "$NetBSD: bt_put.c,v 1.7 1995/02/27 13:20:40 cgd Exp $";
d97 6
a103 6
	case R_CURSOR:
		if (!ISSET(t, B_SEQINIT))
			goto einval;
		if (ISSET(t, B_DELCRSR))
			goto einval;
		break;
d107 10
d118 1
a118 6
einval:		errno = EINVAL;
		return (RET_ERROR);
	}

	if (ISSET(t, B_RDONLY)) {
		errno = EPERM;
d123 3
a125 3
	 * If the key/data won't fit on a page, store it on indirect pages.
	 * Only store the key on the overflow page if it's too big after the
	 * data is on an overflow page.
d128 1
a128 1
	 * If the insert fails later on, these pages aren't recovered.
d160 1
a160 1
		if ((h = mpool_get(t->bt_mp, t->bt_bcursor.pgno, 0)) == NULL)
d162 1
a162 1
		index = t->bt_bcursor.index;
d167 2
a168 2
	 * Find the key to delete, or, the location at which to insert.  Bt_fast
	 * and __bt_search pin the returned page.
d177 4
a180 6
	 * Add the specified key/data pair to the tree.  If an identical key
	 * is already in the tree, and R_NOOVERWRITE is set, an error is
	 * returned.  If R_NOOVERWRITE is not set, the key is either added (if
	 * duplicates are permitted) or an error is returned.
	 *
	 * Pages are split as required.
a185 11
		/*
		 * One special case is if the cursor references the record and
		 * it's been flagged for deletion.  Then, we delete the record,
		 * leaving the cursor there -- this means that the inserted
		 * record will not be seen in a cursor scan.
		 */
		if (ISSET(t, B_DELCRSR) && t->bt_bcursor.pgno == h->pgno &&
		    t->bt_bcursor.index == index) {
			CLR(t, B_DELCRSR);
			goto delete;
		}
d189 1
a189 1
		if (!exact || !ISSET(t, B_NODUPS))
d191 6
a196 1
delete:		if (__bt_dleaf(t, h, index) == RET_ERROR) {
d226 6
d250 4
a253 5
	if (flags == R_SETCURSOR) {
		t->bt_bcursor.pgno = e->page->pgno;
		t->bt_bcursor.index = e->index;
	}
	SET(t, B_MODIFIED);
d289 2
a290 2
	 * If won't fit in this page or have too many keys in this page, have
	 * to search to get split stack.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

