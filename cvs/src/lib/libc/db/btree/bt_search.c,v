head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.50
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.46
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.42
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.44
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.36
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.40
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.38
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.34
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.32
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.30
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.28
	OPENBSD_5_0:1.10.0.26
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.24
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.22
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.18
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.12
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.10
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2005.08.05.13.02.59;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.23.19.34.58;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.03.22.30.28;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.20.18.33;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.01.20.23.40;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.22;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.02.15.05.11.23;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.20.13;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.09.00.56;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.48;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@zap rcsid
@
text
@/*	$OpenBSD: bt_search.c,v 1.9 2005/03/23 19:34:58 otto Exp $	*/

/*-
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Mike Olson.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <stdio.h>

#include <db.h>
#include "btree.h"

static int __bt_snext(BTREE *, PAGE *, const DBT *, int *);
static int __bt_sprev(BTREE *, PAGE *, const DBT *, int *);

/*
 * __bt_search --
 *	Search a btree for a key.
 *
 * Parameters:
 *	t:	tree to search
 *	key:	key to find
 *	exactp:	pointer to exact match flag
 *
 * Returns:
 *	The EPG for matching record, if any, or the EPG for the location
 *	of the key, if it were inserted into the tree, is entered into
 *	the bt_cur field of the tree.  A pointer to the field is returned.
 */
EPG *
__bt_search(BTREE *t, const DBT *key, int *exactp)
{
	PAGE *h;
	indx_t base, idx, lim;
	pgno_t pg;
	int cmp;

	BT_CLR(t);
	for (pg = P_ROOT;;) {
		if ((h = mpool_get(t->bt_mp, pg, 0)) == NULL)
			return (NULL);

		/* Do a binary search on the current page. */
		t->bt_cur.page = h;
		for (base = 0, lim = NEXTINDEX(h); lim; lim >>= 1) {
			t->bt_cur.index = idx = base + (lim >> 1);
			if ((cmp = __bt_cmp(t, key, &t->bt_cur)) == 0) {
				if (h->flags & P_BLEAF) {
					*exactp = 1;
					return (&t->bt_cur);
				}
				goto next;
			}
			if (cmp > 0) {
				base = idx + 1;
				--lim;
			}
		}

		/*
		 * If it's a leaf page, we're almost done.  If no duplicates
		 * are allowed, or we have an exact match, we're done.  Else,
		 * it's possible that there were matching keys on this page,
		 * which later deleted, and we're on a page with no matches
		 * while there are matches on other pages.  If at the start or
		 * end of a page, check the adjacent page.
		 */
		if (h->flags & P_BLEAF) {
			if (!F_ISSET(t, B_NODUPS)) {
				if (base == 0 &&
				    h->prevpg != P_INVALID &&
				    __bt_sprev(t, h, key, exactp))
					return (&t->bt_cur);
				if (base == NEXTINDEX(h) &&
				    h->nextpg != P_INVALID &&
				    __bt_snext(t, h, key, exactp))
					return (&t->bt_cur);
			}
			*exactp = 0;
			t->bt_cur.index = base;
			return (&t->bt_cur);
		}

		/*
		 * No match found.  Base is the smallest index greater than
		 * key and may be zero or a last + 1 index.  If it's non-zero,
		 * decrement by one, and record the internal page which should
		 * be a parent page for the key.  If a split later occurs, the
		 * inserted page will be to the right of the saved page.
		 */
		idx = base ? base - 1 : base;

next:		BT_PUSH(t, h->pgno, idx);
		pg = GETBINTERNAL(h, idx)->pgno;
		mpool_put(t->bt_mp, h, 0);
	}
}

/*
 * __bt_snext --
 *	Check for an exact match after the key.
 *
 * Parameters:
 *	t:	tree
 *	h:	current page
 *	key:	key
 *	exactp:	pointer to exact match flag
 *
 * Returns:
 *	If an exact match found.
 */
static int
__bt_snext(BTREE *t, PAGE *h, const DBT *key, int *exactp)
{
	EPG e;

	/*
	 * Get the next page.  The key is either an exact
	 * match, or not as good as the one we already have.
	 */
	if ((e.page = mpool_get(t->bt_mp, h->nextpg, 0)) == NULL)
		return (0);
	e.index = 0;
	if (__bt_cmp(t, key, &e) == 0) {
		mpool_put(t->bt_mp, h, 0);
		t->bt_cur = e;
		*exactp = 1;
		return (1);
	}
	mpool_put(t->bt_mp, e.page, 0);
	return (0);
}

/*
 * __bt_sprev --
 *	Check for an exact match before the key.
 *
 * Parameters:
 *	t:	tree
 *	h:	current page
 *	key:	key
 *	exactp:	pointer to exact match flag
 *
 * Returns:
 *	If an exact match found.
 */
static int
__bt_sprev(BTREE *t, PAGE *h, const DBT *key, int *exactp)
{
	EPG e;

	/*
	 * Get the previous page.  The key is either an exact
	 * match, or not as good as the one we already have.
	 */
	if ((e.page = mpool_get(t->bt_mp, h->prevpg, 0)) == NULL)
		return (0);
	e.index = NEXTINDEX(e.page) - 1;
	if (__bt_cmp(t, key, &e) == 0) {
		mpool_put(t->bt_mp, h, 0);
		t->bt_cur = e;
		*exactp = 1;
		return (1);
	}
	mpool_put(t->bt_mp, e.page, 0);
	return (0);
}
@


1.9
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_search.c,v 1.8 2005/01/03 22:30:28 millert Exp $	*/
a33 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)bt_search.c	8.8 (Berkeley) 7/31/94";
#else
static const char rcsid[] = "$OpenBSD: bt_search.c,v 1.8 2005/01/03 22:30:28 millert Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.8
log
@Avoid namespace pollution by renaming index variables -> idx.
Idea from NetBSD; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_search.c,v 1.7 2003/06/02 20:18:33 millert Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: bt_search.c,v 1.7 2003/06/02 20:18:33 millert Exp $";
d68 1
a68 4
__bt_search(t, key, exactp)
	BTREE *t;
	const DBT *key;
	int *exactp;
d150 1
a150 5
__bt_snext(t, h, key, exactp)
	BTREE *t;
	PAGE *h;
	const DBT *key;
	int *exactp;
d185 1
a185 5
__bt_sprev(t, h, key, exactp)
	BTREE *t;
	PAGE *h;
	const DBT *key;
	int *exactp;
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_search.c,v 1.6 2003/05/01 20:23:40 avsm Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: bt_search.c,v 1.6 2003/05/01 20:23:40 avsm Exp $";
d74 1
a74 1
	indx_t base, index, lim;
d86 1
a86 1
			t->bt_cur.index = index = base + (lim >> 1);
d95 1
a95 1
				base = index + 1;
d131 1
a131 1
		index = base ? base - 1 : base;
d133 2
a134 2
next:		BT_PUSH(t, h->pgno, index);
		pg = GETBINTERNAL(h, index)->pgno;
@


1.6
log
@-Wall cleanup, make rcsid variables const
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_search.c,v 1.5 2002/02/16 21:27:22 millert Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: bt_search.c,v 1.5 2002/02/16 21:27:22 millert Exp $";
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: bt_search.c,v 1.4 1999/02/15 05:11:23 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: bt_search.c,v 1.4 1999/02/15 05:11:23 millert Exp $";
@


1.4
log
@ o Minor changes from db.1.86 (sleepycat).  Does not include the new hash
   routines since they cannot read a hashed .db file from the old code.
   Most of these files just have their RCS/SCCS tags standardized.
   Note that mpool.3 has not been updated to reflect the new mpool interface.
 o Add a real dbm(3) manpage
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: bt_search.c,v 1.3 1996/08/19 08:20:13 tholo Exp $";
d54 2
a55 2
static int __bt_snext __P((BTREE *, PAGE *, const DBT *, int *));
static int __bt_sprev __P((BTREE *, PAGE *, const DBT *, int *));
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 2
d40 5
a44 1
static char rcsid[] = "$OpenBSD: bt_search.c,v 1.8 1996/05/03 21:50:52 cgd Exp $";
@


1.2
log
@db release 1.85
@
text
@a0 2
/*	$NetBSD: bt_search.c,v 1.8 1996/05/03 21:50:52 cgd Exp $	*/

d38 1
a38 5
#if 0
static char sccsid[] = "@@(#)bt_search.c	8.8 (Berkeley) 7/31/94";
#else
static char rcsid[] = "$NetBSD: bt_search.c,v 1.8 1996/05/03 21:50:52 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: bt_search.c,v 1.7 1995/02/27 13:20:44 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1990, 1993
d41 1
a41 1
static char sccsid[] = "@@(#)bt_search.c	8.6 (Berkeley) 3/15/94";
d43 1
a43 1
static char rcsid[] = "$NetBSD: bt_search.c,v 1.7 1995/02/27 13:20:44 cgd Exp $";
d54 2
a55 2
static int bt_snext __P((BTREE *, PAGE *, const DBT *, int *));
static int bt_sprev __P((BTREE *, PAGE *, const DBT *, int *));
d58 2
a59 1
 * __BT_SEARCH -- Search a btree for a key.
d105 6
a110 6
		 * If it's a leaf page, and duplicates aren't allowed, we're
		 * done.  If duplicates are allowed, it's possible that there
		 * were duplicate keys on duplicate pages, and they were later
		 * deleted, so we could be on a page with no matches while
		 * there are matches on other pages.  If we're at the start or
		 * end of a page, check on both sides.
d113 1
a113 3
			t->bt_cur.index = base;
			*exactp = 0;
			if (!ISSET(t, B_NODUPS)) {
d115 2
a116 1
				    bt_sprev(t, h, key, exactp))
d119 2
a120 1
				    bt_snext(t, h, key, exactp))
d123 2
d137 1
a137 2
next:		if (__bt_push(t, h->pgno, index) == RET_ERROR)
			return (NULL);
d144 2
a145 1
 * BT_SNEXT -- Check for an exact match after the key.
d148 3
a150 3
 *	t:	tree to search
 *	h:	current page.
 *	key:	key to find
d157 1
a157 1
bt_snext(t, h, key, exactp)
a163 2
	PAGE *tp;
	pgno_t pg;
a164 11
	/* Skip until reach the end of the tree or a key. */
	for (pg = h->nextpg; pg != P_INVALID;) {
		if ((tp = mpool_get(t->bt_mp, pg, 0)) == NULL) {
			mpool_put(t->bt_mp, h, 0);
			return (NULL);
		}
		if (NEXTINDEX(tp) != 0)
			break;
		pg = tp->prevpg;
		mpool_put(t->bt_mp, tp, 0);
	}
d166 2
a167 2
	 * The key is either an exact match, or not as good as
	 * the one we already have.
d169 8
a176 9
	if (pg != P_INVALID) {
		e.page = tp;
		e.index = NEXTINDEX(tp) - 1;
		if (__bt_cmp(t, key, &e) == 0) {
			mpool_put(t->bt_mp, h, 0);
			t->bt_cur = e;
			*exactp = 1;
			return (1);
		}
d178 1
d183 2
a184 1
 * BT_SPREV -- Check for an exact match before the key.
d187 3
a189 3
 *	t:	tree to search
 *	h:	current page.
 *	key:	key to find
d196 1
a196 1
bt_sprev(t, h, key, exactp)
a202 2
	PAGE *tp;
	pgno_t pg;
a203 11
	/* Skip until reach the beginning of the tree or a key. */
	for (pg = h->prevpg; pg != P_INVALID;) {
		if ((tp = mpool_get(t->bt_mp, pg, 0)) == NULL) {
			mpool_put(t->bt_mp, h, 0);
			return (NULL);
		}
		if (NEXTINDEX(tp) != 0)
			break;
		pg = tp->prevpg;
		mpool_put(t->bt_mp, tp, 0);
	}
d205 2
a206 2
	 * The key is either an exact match, or not as good as
	 * the one we already have.
d208 8
a215 9
	if (pg != P_INVALID) {
		e.page = tp;
		e.index = NEXTINDEX(tp) - 1;
		if (__bt_cmp(t, key, &e) == 0) {
			mpool_put(t->bt_mp, h, 0);
			t->bt_cur = e;
			*exactp = 1;
			return (1);
		}
d217 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
