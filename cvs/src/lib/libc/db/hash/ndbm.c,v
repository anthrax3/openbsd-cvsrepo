head	1.26;
access;
symbols
	OPENBSD_6_1:1.26.0.4
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.2
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.23.0.10
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.6
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.22.0.24
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.22
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.20
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.18
	OPENBSD_5_0:1.22.0.16
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.14
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.12
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.8
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.10
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.6
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.4
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.2
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.21.0.10
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.8
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.6
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.4
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.2
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.19.0.2
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.6
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.4
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.11.0.4
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2016.05.07.21.58.06;	author tedu;	state Exp;
branches;
next	1.25;
commitid	OMuRQlskknJ9fp2M;

1.25
date	2015.11.01.03.45.28;	author guenther;	state Exp;
branches;
next	1.24;
commitid	CfNWDWdDpm7mVO8i;

1.24
date	2015.09.12.15.20.52;	author guenther;	state Exp;
branches;
next	1.23;
commitid	0XiYAJPhgpiS54eu;

1.23
date	2013.09.30.12.02.31;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2007.09.17.07.07.23;	author moritz;	state Exp;
branches;
next	1.21;

1.21
date	2005.08.08.08.05.33;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2004.09.15.00.26.07;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2004.06.21.23.13.22;	author marc;	state Exp;
branches;
next	1.18;

1.18
date	2004.05.03.17.27.50;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.25.21.15.05;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.01.20.23.40;	author avsm;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.05.17.21.36;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.16.21.27.22;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.01.21.26.10;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	99.04.18.17.08.07;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	99.02.16.21.57.53;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	99.02.16.21.21.04;	author imp;	state Exp;
branches;
next	1.8;

1.8
date	99.02.15.05.11.24;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.02.12.04.57.51;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.02.12.04.46.28;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.02.16.11.08.16;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.02.15.23.44.31;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.20.42;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.09.01.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.50;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.50;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@remove ancient dbm functions (ndbm remains). nothing uses them in forever.
@
text
@/*	$OpenBSD: ndbm.c,v 1.25 2015/11/01 03:45:28 guenther Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Margo Seltzer.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <string.h>

#include <ndbm.h>
#include "hash.h"

/*
 *
 * This package provides dbm and ndbm compatible interfaces to DB.
 * First are the DBM routines, which call the NDBM routines, and
 * the NDBM routines, which call the DB routines.
 */
static DBM *__cur_db;

static DBM *_dbm_open(const char *, const char *, int, mode_t);

/*
 * Returns:
 * 	*DBM on success
 *	 NULL on failure
 */
static DBM *
_dbm_open(file, suff, flags, mode)
	const char *file;
	const char *suff;
	int flags;
	mode_t mode;
{
	HASHINFO info;
	char path[PATH_MAX];
	int len;

	len = snprintf(path, sizeof path, "%s%s", file, suff);
	if (len < 0 || len >= sizeof path) {
		errno = ENAMETOOLONG;
		return (NULL);
	}
	/* O_WRONLY not supported by db(3) but traditional ndbm allowed it. */
	if ((flags & O_ACCMODE) == O_WRONLY) {
		flags &= ~O_WRONLY;
		flags |= O_RDWR;
	}
	info.bsize = 4096;
	info.ffactor = 40;
	info.nelem = 1;
	info.cachesize = 0;
	info.hash = NULL;
	info.lorder = 0;
	return ((DBM *)__hash_open(path, flags, mode, &info, 0));
}

/*
 * Returns:
 * 	*DBM on success
 *	 NULL on failure
 */
DBM *
dbm_open(file, flags, mode)
	const char *file;
	int flags;
	mode_t mode;
{

	return(_dbm_open(file, DBM_SUFFIX, flags, mode));
}

/*
 * Returns:
 *	Nothing.
 */
void
dbm_close(db)
	DBM *db;
{

	(void)(db->close)(db);
}
DEF_WEAK(dbm_close);

/*
 * Returns:
 *	DATUM on success
 *	NULL on failure
 */
datum
dbm_fetch(db, key)
	DBM *db;
	datum key;
{
	datum retdata;
	int status;
	DBT dbtkey, dbtretdata;

	dbtkey.data = key.dptr;
	dbtkey.size = key.dsize;
	status = (db->get)(db, &dbtkey, &dbtretdata, 0);
	if (status) {
		dbtretdata.data = NULL;
		dbtretdata.size = 0;
	}
	retdata.dptr = dbtretdata.data;
	retdata.dsize = dbtretdata.size;
	return (retdata);
}
DEF_WEAK(dbm_fetch);

/*
 * Returns:
 *	DATUM on success
 *	NULL on failure
 */
datum
dbm_firstkey(db)
	DBM *db;
{
	int status;
	datum retkey;
	DBT dbtretkey, dbtretdata;

	status = (db->seq)(db, &dbtretkey, &dbtretdata, R_FIRST);
	if (status)
		dbtretkey.data = NULL;
	retkey.dptr = dbtretkey.data;
	retkey.dsize = dbtretkey.size;
	return (retkey);
}
DEF_WEAK(dbm_firstkey);

/*
 * Returns:
 *	DATUM on success
 *	NULL on failure
 */
datum
dbm_nextkey(db)
	DBM *db;
{
	int status;
	datum retkey;
	DBT dbtretkey, dbtretdata;

	status = (db->seq)(db, &dbtretkey, &dbtretdata, R_NEXT);
	if (status)
		dbtretkey.data = NULL;
	retkey.dptr = dbtretkey.data;
	retkey.dsize = dbtretkey.size;
	return (retkey);
}
DEF_WEAK(dbm_nextkey);

/*
 * Returns:
 *	 0 on success
 *	<0 on failure
 */
int
dbm_delete(db, key)
	DBM *db;
	datum key;
{
	int status;
	DBT dbtkey;

	dbtkey.data = key.dptr;
	dbtkey.size = key.dsize;
	status = (db->del)(db, &dbtkey, 0);
	if (status)
		return (-1);
	else
		return (0);
}
DEF_WEAK(dbm_delete);

/*
 * Returns:
 *	 0 on success
 *	<0 on failure
 *	 1 if DBM_INSERT and entry exists
 */
int
dbm_store(db, key, data, flags)
	DBM *db;
	datum key, data;
	int flags;
{
	DBT dbtkey, dbtdata;

	dbtkey.data = key.dptr;
	dbtkey.size = key.dsize;
	dbtdata.data = data.dptr;
	dbtdata.size = data.dsize;
	return ((db->put)(db, &dbtkey, &dbtdata,
	    (flags == DBM_INSERT) ? R_NOOVERWRITE : 0));
}
DEF_WEAK(dbm_store);

int
dbm_error(db)
	DBM *db;
{
	HTAB *hp;

	hp = (HTAB *)db->internal;
	return (hp->err);
}

int
dbm_clearerr(db)
	DBM *db;
{
	HTAB *hp;

	hp = (HTAB *)db->internal;
	hp->err = 0;
	return (0);
}

int
dbm_dirfno(db)
	DBM *db;
{

	return(((HTAB *)db->internal)->fp);
}

int
dbm_rdonly(dbp)
	DBM *dbp;
{
	HTAB *hashp = (HTAB *)dbp->internal;

	/* Could use DBM_RDONLY instead if we wanted... */
	return ((hashp->flags & O_ACCMODE) == O_RDONLY);
}
DEF_WEAK(dbm_rdonly);
@


1.25
log
@delete old lint ARGSUSED comments
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.24 2015/09/12 15:20:52 guenther Exp $	*/
a41 1
#include <dbm.h>
a52 121

/*
 * Returns:
 * 	 0 on success
 *	<0 on failure
 */
int
dbminit(file)
	const char *file;
{

	if (__cur_db != NULL)
		(void)dbm_close(__cur_db);
	if ((__cur_db = _dbm_open(file, ".pag", O_RDWR, 0)) != NULL)
		return (0);
	if ((__cur_db = _dbm_open(file, ".pag", O_RDONLY, 0)) != NULL)
		return (0);
	return (-1);
}

/*
 * Returns:
 * 	 0 on success
 *	<0 on failure
 */
int
dbmclose()
{
	int rval;

	if (__cur_db == NULL)
		return (-1);
	rval = (__cur_db->close)(__cur_db);
	__cur_db = NULL;
	return (rval);
}

/*
 * Returns:
 *	DATUM on success
 *	NULL on failure
 */
datum
fetch(key)
	datum key;
{
	datum item;

	if (__cur_db == NULL) {
		item.dptr = NULL;
		item.dsize = 0;
		return (item);
	}
	return (dbm_fetch(__cur_db, key));
}

/*
 * Returns:
 *	DATUM on success
 *	NULL on failure
 */
datum
firstkey()
{
	datum item;

	if (__cur_db == NULL) {
		item.dptr = NULL;
		item.dsize = 0;
		return (item);
	}
	return (dbm_firstkey(__cur_db));
}

/*
 * Returns:
 *	DATUM on success
 *	NULL on failure
 */
datum
nextkey(datum key)
{
	datum item;

	if (__cur_db == NULL) {
		item.dptr = NULL;
		item.dsize = 0;
		return (item);
	}
	return (dbm_nextkey(__cur_db));
}

/*
 * Returns:
 * 	 0 on success
 *	<0 on failure
 */
int
delete(key)
	datum key;
{

	if (__cur_db == NULL || dbm_rdonly(__cur_db))
		return (-1);
	return (dbm_delete(__cur_db, key));
}

/*
 * Returns:
 * 	 0 on success
 *	<0 on failure
 */
int
store(key, dat)
	datum key, dat;
{

	if (__cur_db == NULL || dbm_rdonly(__cur_db))
		return (-1);
	return (dbm_store(__cur_db, key, dat, DBM_REPLACE));
}
@


1.24
log
@Wrap <dbm.h> and <ndbm.h> so that calls go direct and the symbols are all weak
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.23 2013/09/30 12:02:31 millert Exp $	*/
a132 1
/* ARGSUSED */
@


1.23
log
@Use PATH_MAX, NAME_MAX and LOGIN_NAME_MAX not MAXPATHNAMELEN,
MAXNAMLEN or MAXLOGNAME where possible.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.22 2007/09/17 07:07:23 moritz Exp $	*/
d238 1
d265 1
d287 1
d309 1
d332 1
d355 1
d395 1
@


1.22
log
@Check snprintf(3) return value for error or truncation.
Mostly path construction, where truncation could be bad.

ok and input from deraadt@@ millert@@ ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.21 2005/08/08 08:05:33 espie Exp $	*/
a34 2
#include <sys/param.h>

d37 1
d190 1
a190 1
	char path[MAXPATHLEN];
@


1.21
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.20 2004/09/15 00:26:07 deraadt Exp $	*/
d192 1
d194 2
a195 1
	if (strlen(file) + strlen(suff) > sizeof(path) - 1) {
a209 1
	snprintf(path, sizeof path, "%s%s", file, suff);
@


1.20
log
@ansi and ARSUSED
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.19 2004/06/21 23:13:22 marc Exp $	*/
a33 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)dbm.c	8.6 (Berkeley) 11/7/95";
#else
static const char rcsid[] = "$OpenBSD: ndbm.c,v 1.19 2004/06/21 23:13:22 marc Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.19
log
@another errno -> err in a structure.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.18 2004/05/03 17:27:50 millert Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: ndbm.c,v 1.18 2004/05/03 17:27:50 millert Exp $";
d142 1
d144 1
a144 2
nextkey(key)
	datum key;
@


1.18
log
@Make ndbm match POSIX.  A datum consists of a void *dptr and a size_t dsize.
Also make the open functions take a mode_t, not int.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.17 2003/06/25 21:15:05 deraadt Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: ndbm.c,v 1.17 2003/06/25 21:15:05 deraadt Exp $";
d366 1
a366 1
	return (hp->errno);
d376 1
a376 1
	hp->errno = 0;
@


1.17
log
@pull in headers
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.16 2003/06/02 20:18:34 millert Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: ndbm.c,v 1.16 2003/06/02 20:18:34 millert Exp $";
d62 1
a62 1
static DBM *_dbm_open(const char *, const char *, int, int);
d195 2
a196 1
	int flags, mode;
d228 2
a229 1
	int flags, mode;
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.15 2003/05/01 20:23:40 avsm Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: ndbm.c,v 1.15 2003/05/01 20:23:40 avsm Exp $";
d51 1
@


1.15
log
@-Wall cleanup, make rcsid variables const
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.14 2002/06/05 17:21:36 deraadt Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: ndbm.c,v 1.14 2002/06/05 17:21:36 deraadt Exp $";
@


1.14
log
@snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.13 2002/02/16 21:27:22 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.13 2002/02/16 21:27:22 millert Exp $";
@


1.13
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.12 2000/08/01 21:26:10 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.12 2000/08/01 21:26:10 millert Exp $";
d218 1
a218 2
	(void)strcpy(path, file);
	(void)strcat(path, suff);
@


1.12
log
@Traditional NDBM supports dbm_open(foo, O_WRONLY) but dbopen() does
not allow O_WRONLY (it returns EINVAL).  If the users passes O_WRONLY
to dbm_open, strip it and use O_RDWR instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.11 1999/04/18 17:08:07 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.11 1999/04/18 17:08:07 millert Exp $";
d65 1
a65 1
static DBM *_dbm_open __P((const char *, const char *, int, int));
@


1.11
log
@o Opening a zero-length hash file should not be an error
o Correct odbm support
o Add man links for ndbm and odbm
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.10 1999/02/16 21:57:53 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.10 1999/02/16 21:57:53 millert Exp $";
d206 5
@


1.10
log
@real dbm_rdonly
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.9 1999/02/16 21:21:04 imp Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.9 1999/02/16 21:21:04 imp Exp $";
d65 1
a65 1
static void no_open_db __P((void));
d67 5
d76 1
d79 1
a79 1
	if ((__cur_db = dbm_open(file, O_RDWR, 0)) != NULL)
d81 1
a81 1
	if ((__cur_db = dbm_open(file, O_RDONLY, 0)) != NULL)
d86 5
d94 1
d96 5
a100 3
	if (__cur_db != NULL)
		return ((__cur_db->close)(__cur_db));
	return (-1);
d103 5
d115 2
a116 2
		no_open_db();
		item.dptr = 0;
d122 5
d133 2
a134 2
		no_open_db();
		item.dptr = 0;
d140 5
d152 2
a153 2
		no_open_db();
		item.dptr = 0;
d159 5
d168 2
a169 5
	if (__cur_db == NULL) {
		no_open_db();
		return (-1);
	}
	if (dbm_rdonly(__cur_db))
d174 5
d183 2
a184 5
	if (__cur_db == NULL) {
		no_open_db();
		return (-1);
	}
	if (dbm_rdonly(__cur_db))
a188 6
static void
no_open_db()
{
	(void)fprintf(stderr, "dbm: no open database.\n");
}

d194 2
a195 2
DBM *
dbm_open(file, flags, mode)
d197 1
d203 1
a203 1
	if (strlen(file) + strlen(DBM_SUFFIX) > sizeof(path) - 1) {
d214 1
a214 1
	(void)strcat(path, DBM_SUFFIX);
d220 14
d315 1
a315 1
 *	<0 failure
d337 1
a337 1
 *	<0 failure
@


1.9
log
@kludge to get rid of dbm_rdonly not being defined
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.8 1999/02/15 05:11:24 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.8 1999/02/15 05:11:24 millert Exp $";
a56 3
/* KLUDGE */
#define dbm_rdonly(a) (0)

d339 1
d341 10
@


1.8
log
@ o Minor changes from db.1.86 (sleepycat).  Does not include the new hash
   routines since they cannot read a hashed .db file from the old code.
   Most of these files just have their RCS/SCCS tags standardized.
   Note that mpool.3 has not been updated to reflect the new mpool interface.
 o Add a real dbm(3) manpage
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.7 1999/02/12 04:57:51 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.7 1999/02/12 04:57:51 millert Exp $";
d56 3
@


1.7
log
@It's always a good idea to test those last minute changes to make sure they compile...
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.6 1999/02/12 04:46:28 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.6 1999/02/12 04:46:28 millert Exp $";
d69 1
a69 1
	char *file;
@


1.6
log
@add old dbm-compatible interface from db-1.86 with minor changes by me (needs a man page)
@
text
@d1 1
a1 1
/*	$OpenBSD: ndbm.c,v 1.5 1997/02/16 11:08:16 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.5 1997/02/16 11:08:16 deraadt Exp $";
d85 1
a85 1
		return (dbm_close(__cur_db));
@


1.5
log
@need errno.h
@
text
@d1 2
d40 5
a44 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.4 1997/02/15 23:44:31 deraadt Exp $";
a46 5
/*
 * This package provides a dbm compatible interface to the new hashing
 * package described in db(3).
 */

d49 2
a52 1
#include <errno.h>
d58 105
d167 1
a167 1
extern DBM *
d175 1
a175 1
	if (strlen(file) + strlen(DBM_SUFFIX) > sizeof(path)-1) {
d190 5
a194 1
extern void
d198 1
d207 1
a207 1
extern datum
d233 1
a233 1
extern datum
d254 1
a254 1
extern datum
d275 1
a275 1
extern int
d298 1
a298 1
extern int
d314 1
a314 1
extern int
d324 1
a324 1
extern int
d335 1
a335 1
extern int
@


1.4
log
@buf oflow, danny@@freebsd.org
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.3 1996/08/19 08:20:42 tholo Exp $";
d50 1
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: ndbm.c,v 1.9 1996/05/04 00:38:58 cgd Exp $";
d67 4
@


1.2
log
@db release 1.85
@
text
@a0 2
/*	$NetBSD: ndbm.c,v 1.9 1996/05/04 00:38:58 cgd Exp $	*/

d38 1
a38 5
#if 0
static char sccsid[] = "@@(#)ndbm.c	8.4 (Berkeley) 7/21/94";
#else
static char rcsid[] = "$NetBSD: ndbm.c,v 1.9 1996/05/04 00:38:58 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: ndbm.c,v 1.7 1995/02/27 13:22:44 cgd Exp $	*/
d41 1
a41 1
static char sccsid[] = "@@(#)ndbm.c	8.3 (Berkeley) 5/30/94";
d43 1
a43 1
static char rcsid[] = "$NetBSD: ndbm.c,v 1.7 1995/02/27 13:22:44 cgd Exp $";
d76 1
a76 1
	info.cachesize = NULL;
d101 1
a101 1
	datum retval;
d103 1
d105 3
a107 1
	status = (db->get)(db, (DBT *)&key, (DBT *)&retval, 0);
d109 2
a110 2
		retval.dptr = NULL;
		retval.dsize = 0;
d112 3
a114 1
	return (retval);
d127 2
a128 1
	datum retdata, retkey;
d130 1
a130 1
	status = (db->seq)(db, (DBT *)&retkey, (DBT *)&retdata, R_FIRST);
d132 3
a134 1
		retkey.dptr = NULL;
d148 2
a149 1
	datum retdata, retkey;
d151 1
a151 1
	status = (db->seq)(db, (DBT *)&retkey, (DBT *)&retdata, R_NEXT);
d153 3
a155 1
		retkey.dptr = NULL;
d158 1
d170 1
d172 3
a174 1
	status = (db->del)(db, (DBT *)&key, 0);
d188 1
a188 1
dbm_store(db, key, content, flags)
d190 1
a190 1
	datum key, content;
d193 7
a199 1
	return ((db->put)(db, (DBT *)&key, (DBT *)&content,
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
