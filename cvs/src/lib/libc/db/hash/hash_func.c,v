head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.42
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.44
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.36
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.40
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.38
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.34
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.32
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.30
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.28
	OPENBSD_5_0:1.10.0.26
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.24
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.22
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.18
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.12
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.29.20.47.49;	author guenther;	state Exp;
branches;
next	1.10;
commitid	t2Ly4rpRnfcdyxYT;

1.10
date	2005.08.05.13.03.00;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.23.19.34.59;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.33;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.01.20.23.40;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.22;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.02.15.05.11.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.09.15.09.30.49;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.20.37;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.09.01.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.49;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.49;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove dead support for changing BDB hash algorithm and cache of alternatives

ok natano@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: hash_func.c,v 1.10 2005/08/05 13:03:00 espie Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Margo Seltzer.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <db.h>

/* Chris Torek's hash function. */
u_int32_t
__default_hash(const void *key, size_t len)
{
	u_int32_t h, loop;
	u_int8_t *k;

#define HASH4a   h = (h << 5) - h + *k++;
#define HASH4b   h = (h << 5) + h + *k++;
#define HASH4 HASH4b

	h = 0;
	k = (u_int8_t *)key;
	if (len > 0) {
		loop = (len + 8 - 1) >> 3;

		switch (len & (8 - 1)) {
		case 0:
			do {	/* All fall throughs */
				HASH4;
		case 7:
				HASH4;
		case 6:
				HASH4;
		case 5:
				HASH4;
		case 4:
				HASH4;
		case 3:
				HASH4;
		case 2:
				HASH4;
		case 1:
				HASH4;
			} while (--loop);
		}

	}
	return (h);
}
@


1.10
log
@zap rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: hash_func.c,v 1.9 2005/03/23 19:34:59 otto Exp $	*/
a37 108
#include "hash.h"
#include "page.h"
#include "extern.h"

#ifdef notdef
static u_int32_t hash1(const void *, size_t);
static u_int32_t hash2(const void *, size_t);
static u_int32_t hash3(const void *, size_t);
#endif
static u_int32_t hash4(const void *, size_t);

/* Default hash function. */
u_int32_t (*__default_hash)(const void *, size_t) = hash4;

#ifdef notdef
/*
 * Assume that we've already split the bucket to which this key hashes,
 * calculate that bucket, and check that in fact we did already split it.
 *
 * EJB's original hsearch hash.
 */
#define PRIME1		37
#define PRIME2		1048583

u_int32_t
hash1(const void *key, size_t len)
{
	u_int32_t h;
	u_int8_t *k;

	h = 0;
	k = (u_int8_t *)key;
	/* Convert string to integer */
	while (len--)
		h = h * PRIME1 ^ (*k++ - ' ');
	h %= PRIME2;
	return (h);
}

/*
 * Phong Vo's linear congruential hash
 */
#define dcharhash(h, c)	((h) = 0x63c63cd9*(h) + 0x9c39c33d + (c))

u_int32_t
hash2(const void *key, size_t len)
{
	u_int32_t h;
	u_int8_t *e, c, *k;

	k = (u_int8_t *)key;
	e = k + len;
	for (h = 0; k != e;) {
		c = *k++;
		if (!c && k > e)
			break;
		dcharhash(h, c);
	}
	return (h);
}

/*
 * This is INCREDIBLY ugly, but fast.  We break the string up into 8 byte
 * units.  On the first time through the loop we get the "leftover bytes"
 * (strlen % 8).  On every other iteration, we perform 8 HASHC's so we handle
 * all 8 bytes.  Essentially, this saves us 7 cmp & branch instructions.  If
 * this routine is heavily used enough, it's worth the ugly coding.
 *
 * Ozan Yigit's original sdbm hash.
 */
u_int32_t
hash3(const void *key, size_t len)
{
	u_int32_t n, loop;
	u_int8_t *k;

#define HASHC   n = *k++ + 65599 * n

	n = 0;
	k = (u_int8_t *)key;
	if (len > 0) {
		loop = (len + 8 - 1) >> 3;

		switch (len & (8 - 1)) {
		case 0:
			do {	/* All fall throughs */
				HASHC;
		case 7:
				HASHC;
		case 6:
				HASHC;
		case 5:
				HASHC;
		case 4:
				HASHC;
		case 3:
				HASHC;
		case 2:
				HASHC;
		case 1:
				HASHC;
			} while (--loop);
		}

	}
	return (n);
}
#endif /* notdef */
d41 1
a41 1
hash4(const void *key, size_t len)
@


1.9
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hash_func.c,v 1.8 2003/06/02 20:18:33 millert Exp $	*/
a33 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)hash_func.c	8.4 (Berkeley) 11/7/95";
#else
static const char rcsid[] = "$OpenBSD: hash_func.c,v 1.8 2003/06/02 20:18:33 millert Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash_func.c,v 1.7 2003/05/01 20:23:40 avsm Exp $	*/
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: hash_func.c,v 1.7 2003/05/01 20:23:40 avsm Exp $";
d71 1
a71 3
hash1(key, len)
	const void *key;
	size_t len;
d91 1
a91 3
hash2(key, len)
	const void *key;
	size_t len;
d117 1
a117 3
hash3(key, len)
	const void *key;
	size_t len;
d157 1
a157 3
hash4(key, len)
	const void *key;
	size_t len;
@


1.7
log
@-Wall cleanup, make rcsid variables const
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: hash_func.c,v 1.6 2002/02/16 21:27:22 millert Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: hash_func.c,v 1.6 2002/02/16 21:27:22 millert Exp $";
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash_func.c,v 1.5 1999/02/15 05:11:24 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: hash_func.c,v 1.5 1999/02/15 05:11:24 millert Exp $";
@


1.5
log
@ o Minor changes from db.1.86 (sleepycat).  Does not include the new hash
   routines since they cannot read a hashed .db file from the old code.
   Most of these files just have their RCS/SCCS tags standardized.
   Note that mpool.3 has not been updated to reflect the new mpool interface.
 o Add a real dbm(3) manpage
@
text
@d1 1
a1 1
/*	$OpenBSD: hash_func.c,v 1.4 1996/09/15 09:30:49 tholo Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: hash_func.c,v 1.4 1996/09/15 09:30:49 tholo Exp $";
d55 3
a57 3
static u_int32_t hash1 __P((const void *, size_t));
static u_int32_t hash2 __P((const void *, size_t));
static u_int32_t hash3 __P((const void *, size_t));
d59 1
a59 1
static u_int32_t hash4 __P((const void *, size_t));
d62 1
a62 1
u_int32_t (*__default_hash) __P((const void *, size_t)) = hash4;
@


1.4
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d1 2
d40 5
a44 1
static char rcsid[] = "$OpenBSD: hash_func.c,v 1.3 1996/08/19 08:20:37 tholo Exp $";
d61 1
a61 1
/* Global default hash function */
d64 1
a65 2
 * HASH FUNCTIONS
 *
d69 1
a69 1
 * This came from ejb's hsearch.
a70 4

#ifdef notdef


d74 4
a77 4
static u_int32_t
hash1(keyarg, len)
	const void *keyarg;
	register size_t len;
d79 2
a80 2
	register const u_char *key;
	register u_int32_t h;
d82 2
d85 2
a86 2
	for (key = keyarg, h = 0; len--;)
		h = h * PRIME1 ^ (*key++ - ' ');
d92 1
a92 1
 * Phong's linear congruential hash
d96 3
a98 3
static u_int32_t
hash2(keyarg, len)
	const void *keyarg;
d101 8
a108 9
	register const u_char *e, *key;
	register u_int32_t h;
	register u_char c;

	key = keyarg;
	e = key + len;
	for (h = 0; key != e;) {
		c = *key++;
		if (!c && key > e)
d122 1
a122 1
 * OZ's original sdbm hash
d124 4
a127 4
static u_int32_t
hash3(keyarg, len)
	const void *keyarg;
	register size_t len;
d129 2
a130 3
	register const u_char *key;
	register size_t loop;
	register u_int32_t h;
d132 1
a132 1
#define HASHC   h = *key++ + 65599 * h
d134 2
a135 2
	h = 0;
	key = keyarg;
d141 1
a141 1
			do {
a142 1
				/* FALLTHROUGH */
a144 1
				/* FALLTHROUGH */
a146 1
				/* FALLTHROUGH */
a148 1
				/* FALLTHROUGH */
a150 1
				/* FALLTHROUGH */
a152 1
				/* FALLTHROUGH */
a154 1
				/* FALLTHROUGH */
d159 1
d161 1
a161 1
	return (h);
d163 1
a163 1
#endif
d165 5
a169 5
/* Hash function from Chris Torek. */
static u_int32_t
hash4(keyarg, len)
	const void *keyarg;
	register size_t len;
d171 2
a172 3
	register const u_char *key;
	register size_t loop;
	register u_int32_t h;
d174 2
a175 2
#define HASH4a   h = (h << 5) - h + *key++;
#define HASH4b   h = (h << 5) + h + *key++;
d179 1
a179 1
	key = keyarg;
d185 1
a185 1
			do {
a186 1
				/* FALLTHROUGH */
a188 1
				/* FALLTHROUGH */
a190 1
				/* FALLTHROUGH */
a192 1
				/* FALLTHROUGH */
a194 1
				/* FALLTHROUGH */
a196 1
				/* FALLTHROUGH */
a198 1
				/* FALLTHROUGH */
d203 1
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: hash_func.c,v 1.6 1996/05/03 21:43:52 cgd Exp $";
d48 1
d52 1
d67 3
d168 1
@


1.2
log
@db release 1.85
@
text
@a0 2
/*	$NetBSD: hash_func.c,v 1.6 1996/05/03 21:43:52 cgd Exp $	*/

d38 1
a38 5
#if 0
static char sccsid[] = "@@(#)hash_func.c	8.2 (Berkeley) 2/21/94";
#else
static char rcsid[] = "$NetBSD: hash_func.c,v 1.6 1996/05/03 21:43:52 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: hash_func.c,v 1.5 1995/02/27 13:22:27 cgd Exp $	*/
d43 1
a43 1
static char rcsid[] = "$NetBSD: hash_func.c,v 1.5 1995/02/27 13:22:27 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
