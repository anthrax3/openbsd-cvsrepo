head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.10
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.32
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.30
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.26
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.24
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.22
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.20
	OPENBSD_5_0:1.8.0.18
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.16
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.14
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.10
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.12
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.8
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.6
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.28
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.26
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.24
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.22
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	0DYulI8hhujBHMcR;

1.8
date	2007.08.07.05.40.34;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.05.13.03.00;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.23.19.34.59;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.01.20.23.40;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.21.12;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.09.02.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.51;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@/*	$OpenBSD: rec_utils.c,v 1.8 2007/08/07 05:40:34 ray Exp $ */
/*-
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <db.h>
#include "recno.h"

/*
 * __rec_ret --
 *	Build return data.
 *
 * Parameters:
 *	t:	tree
 *	e:	key/data pair to be returned
 *   nrec:	record number
 *    key:	user's key structure
 *   data:	user's data structure
 *
 * Returns:
 *	RET_SUCCESS, RET_ERROR.
 */
int
__rec_ret(BTREE *t, EPG *e, recno_t nrec, DBT *key, DBT *data)
{
	RLEAF *rl;
	void *p;

	if (key == NULL)
		goto dataonly;

	/* We have to copy the key, it's not on the page. */
	if (sizeof(recno_t) > t->bt_rkey.size) {
		p = realloc(t->bt_rkey.data, sizeof(recno_t));
		if (p == NULL)
			return (RET_ERROR);
		t->bt_rkey.data = p;
		t->bt_rkey.size = sizeof(recno_t);
	}
	memmove(t->bt_rkey.data, &nrec, sizeof(recno_t));
	key->size = sizeof(recno_t);
	key->data = t->bt_rkey.data;

dataonly:
	if (data == NULL)
		return (RET_SUCCESS);

	/*
	 * We must copy big keys/data to make them contigous.  Otherwise,
	 * leave the page pinned and don't copy unless the user specified
	 * concurrent access.
	 */
	rl = GETRLEAF(e->page, e->index);
	if (rl->flags & P_BIGDATA) {
		if (__ovfl_get(t, rl->bytes,
		    &data->size, &t->bt_rdata.data, &t->bt_rdata.size))
			return (RET_ERROR);
		data->data = t->bt_rdata.data;
	} else if (F_ISSET(t, B_DB_LOCK)) {
		/* Use +1 in case the first record retrieved is 0 length. */
		if (rl->dsize + 1 > t->bt_rdata.size) {
			p = realloc(t->bt_rdata.data, rl->dsize + 1);
			if (p == NULL)
				return (RET_ERROR);
			t->bt_rdata.data = p;
			t->bt_rdata.size = rl->dsize + 1;
		}
		memmove(t->bt_rdata.data, rl->bytes, rl->dsize);
		data->size = rl->dsize;
		data->data = t->bt_rdata.data;
	} else {
		data->size = rl->dsize;
		data->data = rl->bytes;
	}
	return (RET_SUCCESS);
}
@


1.8
log
@Let realloc handle NULL pointers, plus a spacing fix.

OK millert and moritz.
@
text
@d1 1
a1 1
/*	$OpenBSD: rec_utils.c,v 1.7 2005/08/05 13:03:00 espie Exp $ */
a29 2

#include <sys/param.h>
@


1.7
log
@zap rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d49 1
a49 1
 *	data:	user's data structure
d65 1
a65 3
		p = (void *)(t->bt_rkey.data == NULL ?
		    malloc(sizeof(recno_t)) :
		    realloc(t->bt_rkey.data, sizeof(recno_t)));
d93 1
a93 3
			p = (void *)(t->bt_rdata.data == NULL ?
			    malloc(rl->dsize + 1) :
			    realloc(t->bt_rdata.data, rl->dsize + 1));
@


1.6
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static const char rcsid[] = "$OpenBSD: rec_utils.c,v 1.5 2003/06/02 20:18:34 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static const char rcsid[] = "$OpenBSD: rec_utils.c,v 1.4 2003/05/01 20:23:40 avsm Exp $";
d58 1
a58 5
__rec_ret(t, e, nrec, key, data)
	BTREE *t;
	EPG *e;
	recno_t nrec;
	DBT *key, *data;
@


1.4
log
@-Wall cleanup, make rcsid variables const
millert@@ ok
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static const char rcsid[] = "$OpenBSD: rec_utils.c,v 1.3 1996/08/19 08:21:12 tholo Exp $";
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: rec_utils.c,v 1.7 1996/05/03 21:38:54 cgd Exp $";
@


1.2
log
@db release 1.85
@
text
@a0 2
/*	$NetBSD: rec_utils.c,v 1.7 1996/05/03 21:38:54 cgd Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)rec_utils.c	8.6 (Berkeley) 7/16/94";
#else
static char rcsid[] = "$NetBSD: rec_utils.c,v 1.7 1996/05/03 21:38:54 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: rec_utils.c,v 1.6 1995/02/27 13:25:29 cgd Exp $	*/
d38 1
a38 1
static char sccsid[] = "@@(#)rec_utils.c	8.4 (Berkeley) 6/20/94";
d40 1
a40 1
static char rcsid[] = "$NetBSD: rec_utils.c,v 1.6 1995/02/27 13:25:29 cgd Exp $";
d54 2
a55 1
 * __REC_RET -- Build return data as a result of search or scan.
d59 3
a61 1
 *	d:	LEAF to be returned to the user.
d74 2
a75 2
	register RLEAF *rl;
	register void *p;
d77 18
d96 1
a96 3
		goto retkey;

	rl = GETRLEAF(e->page, e->index);
d99 1
a99 1
	 * We always copy big data to make it contigous.  Otherwise, we
d103 1
d106 1
a106 1
		    &data->size, &t->bt_dbuf, &t->bt_dbufsz))
d108 2
a109 2
		data->data = t->bt_dbuf;
	} else if (ISSET(t, B_DB_LOCK)) {
d111 2
a112 2
		if (rl->dsize + 1 > t->bt_dbufsz) {
			p = (void *)(t->bt_dbuf == NULL ?
d114 1
a114 1
			    realloc(t->bt_dbuf, rl->dsize + 1));
d117 2
a118 2
			t->bt_dbuf = p;
			t->bt_dbufsz = rl->dsize + 1;
d120 1
a120 1
		memmove(t->bt_dbuf, rl->bytes, rl->dsize);
d122 1
a122 1
		data->data = t->bt_dbuf;
a126 17

retkey:	if (key == NULL)
		return (RET_SUCCESS);

	/* We have to copy the key, it's not on the page. */
	if (sizeof(recno_t) > t->bt_kbufsz) {
		p = (void *)(t->bt_kbuf == NULL ?
		    malloc(sizeof(recno_t)) :
		    realloc(t->bt_kbuf, sizeof(recno_t)));
		if (p == NULL)
			return (RET_ERROR);
		t->bt_kbuf = p;
		t->bt_kbufsz = sizeof(recno_t);
	}
	memmove(t->bt_kbuf, &nrec, sizeof(recno_t));
	key->size = sizeof(recno_t);
	key->data = t->bt_kbuf;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
