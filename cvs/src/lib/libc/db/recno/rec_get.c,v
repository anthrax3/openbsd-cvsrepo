head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.38
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.34
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.36
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.28
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.32
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.30
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.26
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.24
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.22
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.20
	OPENBSD_5_0:1.11.0.18
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.16
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.14
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.10
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.10
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.8
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.6
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2007.08.08.07.16.50;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.05.13.03.00;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.23.19.34.59;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.01.20.23.40;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.21.02.11.02;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.02.15.05.11.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.14.21.39.20;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.21.03;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.09.02.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.51;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@realloc can handle NULL values.  From Charles Longeau.

OK jaredy.
@
text
@/*	$OpenBSD: rec_get.c,v 1.10 2005/08/05 13:03:00 espie Exp $	*/

/*-
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <errno.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <db.h>
#include "recno.h"

/*
 * __REC_GET -- Get a record from the btree.
 *
 * Parameters:
 *	dbp:	pointer to access method
 *	key:	key to find
 *	data:	data to return
 *	flag:	currently unused
 *
 * Returns:
 *	RET_ERROR, RET_SUCCESS and RET_SPECIAL if the key not found.
 */
int
__rec_get(const DB *dbp, const DBT *key, DBT *data, u_int flags)
{
	BTREE *t;
	EPG *e;
	recno_t nrec;
	int status;

	t = dbp->internal;

	/* Toss any page pinned across calls. */
	if (t->bt_pinned != NULL) {
		mpool_put(t->bt_mp, t->bt_pinned, 0);
		t->bt_pinned = NULL;
	}

	/* Get currently doesn't take any flags, and keys of 0 are illegal. */
	if (flags || (nrec = *(recno_t *)key->data) == 0) {
		errno = EINVAL;
		return (RET_ERROR);
	}

	/*
	 * If we haven't seen this record yet, try to find it in the
	 * original file.
	 */
	if (nrec > t->bt_nrecs) {
		if (F_ISSET(t, R_EOF | R_INMEM))
			return (RET_SPECIAL);
		if ((status = t->bt_irec(t, nrec)) != RET_SUCCESS)
			return (status);
	}

	--nrec;
	if ((e = __rec_search(t, nrec, SEARCH)) == NULL)
		return (RET_ERROR);

	status = __rec_ret(t, e, 0, NULL, data);
	if (F_ISSET(t, B_DB_LOCK))
		mpool_put(t->bt_mp, e->page, 0);
	else
		t->bt_pinned = e->page;
	return (status);
}

/*
 * __REC_FPIPE -- Get fixed length records from a pipe.
 *
 * Parameters:
 *	t:	tree
 *	cnt:	records to read
 *
 * Returns:
 *	RET_ERROR, RET_SUCCESS
 */
int
__rec_fpipe(BTREE *t, recno_t top)
{
	DBT data;
	recno_t nrec;
	size_t len;
	int ch;
	u_char *p;
	void *tp;

	if (t->bt_rdata.size < t->bt_reclen) {
		tp = realloc(t->bt_rdata.data, t->bt_reclen);
		if (tp == NULL)
			return (RET_ERROR);
		t->bt_rdata.data = tp;
		t->bt_rdata.size = t->bt_reclen;
	}
	data.data = t->bt_rdata.data;
	data.size = t->bt_reclen;

	for (nrec = t->bt_nrecs; nrec < top;) {
		len = t->bt_reclen;
		for (p = t->bt_rdata.data;; *p++ = ch)
			if ((ch = getc(t->bt_rfp)) == EOF || !--len) {
				if (ch != EOF)
					*p = ch;
				if (len != 0)
					memset(p, t->bt_bval, len);
				if (__rec_iput(t,
				    nrec, &data, 0) != RET_SUCCESS)
					return (RET_ERROR);
				++nrec;
				break;
			}
		if (ch == EOF)
			break;
	}
	if (nrec < top) {
		F_SET(t, R_EOF);
		return (RET_SPECIAL);
	}
	return (RET_SUCCESS);
}

/*
 * __REC_VPIPE -- Get variable length records from a pipe.
 *
 * Parameters:
 *	t:	tree
 *	cnt:	records to read
 *
 * Returns:
 *	RET_ERROR, RET_SUCCESS
 */
int
__rec_vpipe(BTREE *t, recno_t top)
{
	DBT data;
	recno_t nrec;
	size_t len;
	size_t sz;
	int bval, ch;
	u_char *p;
	void *tp;

	bval = t->bt_bval;
	for (nrec = t->bt_nrecs; nrec < top; ++nrec) {
		for (p = t->bt_rdata.data,
		    sz = t->bt_rdata.size;; *p++ = ch, --sz) {
			if ((ch = getc(t->bt_rfp)) == EOF || ch == bval) {
				data.data = t->bt_rdata.data;
				data.size = p - (u_char *)t->bt_rdata.data;
				if (ch == EOF && data.size == 0)
					break;
				if (__rec_iput(t, nrec, &data, 0)
				    != RET_SUCCESS)
					return (RET_ERROR);
				break;
			}
			if (sz == 0) {
				len = p - (u_char *)t->bt_rdata.data;
				t->bt_rdata.size += (sz = 256);
				tp = realloc(t->bt_rdata.data, t->bt_rdata.size);
				if (tp == NULL)
					return (RET_ERROR);
				t->bt_rdata.data = tp;
				p = (u_char *)t->bt_rdata.data + len;
			}
		}
		if (ch == EOF)
			break;
	}
	if (nrec < top) {
		F_SET(t, R_EOF);
		return (RET_SPECIAL);
	}
	return (RET_SUCCESS);
}

/*
 * __REC_FMAP -- Get fixed length records from a file.
 *
 * Parameters:
 *	t:	tree
 *	cnt:	records to read
 *
 * Returns:
 *	RET_ERROR, RET_SUCCESS
 */
int
__rec_fmap(BTREE *t, recno_t top)
{
	DBT data;
	recno_t nrec;
	u_char *sp, *ep, *p;
	size_t len;
	void *tp;

	if (t->bt_rdata.size < t->bt_reclen) {
		tp = realloc(t->bt_rdata.data, t->bt_reclen);
		if (tp == NULL)
			return (RET_ERROR);
		t->bt_rdata.data = tp;
		t->bt_rdata.size = t->bt_reclen;
	}
	data.data = t->bt_rdata.data;
	data.size = t->bt_reclen;

	sp = (u_char *)t->bt_cmap;
	ep = (u_char *)t->bt_emap;
	for (nrec = t->bt_nrecs; nrec < top; ++nrec) {
		if (sp >= ep) {
			F_SET(t, R_EOF);
			return (RET_SPECIAL);
		}
		len = t->bt_reclen;
		for (p = t->bt_rdata.data;
		    sp < ep && len > 0; *p++ = *sp++, --len);
		if (len != 0)
			memset(p, t->bt_bval, len);
		if (__rec_iput(t, nrec, &data, 0) != RET_SUCCESS)
			return (RET_ERROR);
	}
	t->bt_cmap = (caddr_t)sp;
	return (RET_SUCCESS);
}

/*
 * __REC_VMAP -- Get variable length records from a file.
 *
 * Parameters:
 *	t:	tree
 *	cnt:	records to read
 *
 * Returns:
 *	RET_ERROR, RET_SUCCESS
 */
int
__rec_vmap(BTREE *t, recno_t top)
{
	DBT data;
	u_char *sp, *ep;
	recno_t nrec;
	int bval;

	sp = (u_char *)t->bt_cmap;
	ep = (u_char *)t->bt_emap;
	bval = t->bt_bval;

	for (nrec = t->bt_nrecs; nrec < top; ++nrec) {
		if (sp >= ep) {
			F_SET(t, R_EOF);
			return (RET_SPECIAL);
		}
		for (data.data = sp; sp < ep && *sp != bval; ++sp);
		data.size = sp - (u_char *)data.data;
		if (__rec_iput(t, nrec, &data, 0) != RET_SUCCESS)
			return (RET_ERROR);
		++sp;
	}
	t->bt_cmap = (caddr_t)sp;
	return (RET_SUCCESS);
}
@


1.10
log
@zap rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: rec_get.c,v 1.9 2005/03/23 19:34:59 otto Exp $	*/
d122 1
a122 3
		tp = t->bt_rdata.data == NULL ?
		    malloc(t->bt_reclen) :
		    realloc(t->bt_rdata.data, t->bt_reclen);
d193 1
a193 3
				tp = t->bt_rdata.data == NULL ?
				    malloc(t->bt_rdata.size) :
				    realloc(t->bt_rdata.data, t->bt_rdata.size);
d230 1
a230 3
		tp = t->bt_rdata.data == NULL ?
		    malloc(t->bt_reclen) :
		    realloc(t->bt_rdata.data, t->bt_reclen);
@


1.9
log
@ansify. ok deraadt@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rec_get.c,v 1.8 2003/06/02 20:18:34 millert Exp $	*/
a30 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)rec_get.c	8.9 (Berkeley) 8/18/94";
#else
static const char rcsid[] = "$OpenBSD: rec_get.c,v 1.8 2003/06/02 20:18:34 millert Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: rec_get.c,v 1.7 2003/05/01 20:23:40 avsm Exp $	*/
d36 1
a36 1
static const char rcsid[] = "$OpenBSD: rec_get.c,v 1.7 2003/05/01 20:23:40 avsm Exp $";
d65 1
a65 5
__rec_get(dbp, key, data, flags)
	const DB *dbp;
	const DBT *key;
	DBT *data;
	u_int flags;
d120 1
a120 3
__rec_fpipe(t, top)
	BTREE *t;
	recno_t top;
d176 1
a176 3
__rec_vpipe(t, top)
	BTREE *t;
	recno_t top;
d233 1
a233 3
__rec_fmap(t, top)
	BTREE *t;
	recno_t top;
d283 1
a283 3
__rec_vmap(t, top)
	BTREE *t;
	recno_t top;
@


1.7
log
@-Wall cleanup, make rcsid variables const
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rec_get.c,v 1.6 2000/11/21 02:11:02 deraadt Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d36 1
a36 1
static const char rcsid[] = "$OpenBSD: rec_get.c,v 1.6 2000/11/21 02:11:02 deraadt Exp $";
@


1.6
log
@prevent type overflow; dzerkel@@columbus.rr.com
@
text
@d1 1
a1 1
/*	$OpenBSD: rec_get.c,v 1.5 1999/02/15 05:11:25 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: rec_get.c,v 1.5 1999/02/15 05:11:25 millert Exp $";
@


1.5
log
@ o Minor changes from db.1.86 (sleepycat).  Does not include the new hash
   routines since they cannot read a hashed .db file from the old code.
   Most of these files just have their RCS/SCCS tags standardized.
   Note that mpool.3 has not been updated to reflect the new mpool interface.
 o Add a real dbm(3) manpage
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: rec_get.c,v 1.4 1998/08/14 21:39:20 deraadt Exp $";
d192 1
a192 1
	indx_t len;
@


1.4
log
@realloc repair
@
text
@d1 2
d37 5
a41 1
static char rcsid[] = "$OpenBSD: rec_get.c,v 1.3 1996/08/19 08:21:03 tholo Exp $";
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: rec_get.c,v 1.8 1996/05/03 21:38:48 cgd Exp $";
d131 1
d134 1
a134 1
		t->bt_rdata.data = t->bt_rdata.data == NULL ?
d137 1
a137 1
		if (t->bt_rdata.data == NULL)
d139 1
d190 1
d209 1
a209 1
				t->bt_rdata.data = t->bt_rdata.data == NULL ?
d212 1
a212 1
				if (t->bt_rdata.data == NULL)
d214 1
d247 1
d250 1
a250 1
		t->bt_rdata.data = t->bt_rdata.data == NULL ?
d253 1
a253 1
		if (t->bt_rdata.data == NULL)
d255 1
@


1.2
log
@db release 1.85
@
text
@a0 2
/*	$NetBSD: rec_get.c,v 1.8 1996/05/03 21:38:48 cgd Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)rec_get.c	8.9 (Berkeley) 8/18/94";
#else
static char rcsid[] = "$NetBSD: rec_get.c,v 1.8 1996/05/03 21:38:48 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: rec_get.c,v 1.7 1995/02/27 13:24:57 cgd Exp $	*/
d38 1
a38 1
static char sccsid[] = "@@(#)rec_get.c	8.5 (Berkeley) 6/20/94";
d40 1
a40 1
static char rcsid[] = "$NetBSD: rec_get.c,v 1.7 1995/02/27 13:24:57 cgd Exp $";
d99 1
a99 1
		if (ISSET(t, R_EOF | R_INMEM))
d110 1
a110 1
	if (ISSET(t, B_DB_LOCK))
d136 1
a136 1
	char *p;
d138 5
a142 4
	if (t->bt_dbufsz < t->bt_reclen) {
		t->bt_dbuf = (char *)(t->bt_dbuf == NULL ?
		    malloc(t->bt_reclen) : realloc(t->bt_dbuf, t->bt_reclen));
		if (t->bt_dbuf == NULL)
d144 1
a144 1
		t->bt_dbufsz = t->bt_reclen;
d146 1
a146 1
	data.data = t->bt_dbuf;
d149 1
a149 1
	for (nrec = t->bt_nrecs; nrec < top; ++nrec) {
d151 8
a158 4
		for (p = t->bt_dbuf;; *p++ = ch)
			if ((ch = getc(t->bt_rfp)) == EOF || !len--) {
				if (__rec_iput(t, nrec, &data, 0)
				    != RET_SUCCESS)
d160 1
d167 1
a167 1
		SET(t, R_EOF);
d193 1
a193 1
	char *p;
d197 2
a198 1
		for (p = t->bt_dbuf, sz = t->bt_dbufsz;; *p++ = ch, --sz) {
d200 2
a201 2
				data.data = t->bt_dbuf;
				data.size = p - t->bt_dbuf;
d210 6
a215 6
				len = p - t->bt_dbuf;
				t->bt_dbufsz += (sz = 256);
				t->bt_dbuf = (char *)(t->bt_dbuf == NULL ?
				    malloc(t->bt_dbufsz) :
				    realloc(t->bt_dbuf, t->bt_dbufsz));
				if (t->bt_dbuf == NULL)
d217 1
a217 1
				p = t->bt_dbuf + len;
d224 1
a224 1
		SET(t, R_EOF);
d247 1
a247 1
	caddr_t sp, ep;
a248 1
	char *p;
d250 5
a254 4
	if (t->bt_dbufsz < t->bt_reclen) {
		t->bt_dbuf = (char *)(t->bt_dbuf == NULL ?
		    malloc(t->bt_reclen) : realloc(t->bt_dbuf, t->bt_reclen));
		if (t->bt_dbuf == NULL)
d256 1
a256 1
		t->bt_dbufsz = t->bt_reclen;
d258 1
a258 1
	data.data = t->bt_dbuf;
d261 2
a262 2
	sp = t->bt_cmap;
	ep = t->bt_emap;
d265 1
a265 1
			SET(t, R_EOF);
d269 4
a272 2
		for (p = t->bt_dbuf; sp < ep && len--; *p++ = *sp++);
		memset(p, t->bt_bval, len);
d276 1
a276 1
	t->bt_cmap = sp;
d296 1
a296 1
	caddr_t sp, ep;
d300 2
a301 2
	sp = t->bt_cmap;
	ep = t->bt_emap;
d306 1
a306 1
			SET(t, R_EOF);
d310 1
a310 1
		data.size = sp - (caddr_t)data.data;
d315 1
a315 1
	t->bt_cmap = sp;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
