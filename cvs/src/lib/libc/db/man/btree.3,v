head	1.23;
access;
symbols
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.19.0.24
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.22
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.20
	OPENBSD_5_0:1.19.0.18
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.16
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.14
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.10
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.12
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.8
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.6
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.4
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.2
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.18.0.8
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.6
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.4
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.15.0.8
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.6
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.4
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.14.0.6
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.14.0.4
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.23
date	2015.09.10.10.20.55;	author jmc;	state Exp;
branches;
next	1.22;
commitid	hzFWP8Fp2ocosP6W;

1.22
date	2014.11.15.14.41.02;	author bentley;	state Exp;
branches;
next	1.21;
commitid	HuCemPIiOkto0SJD;

1.21
date	2014.01.21.03.15.44;	author schwarze;	state Exp;
branches;
next	1.20;

1.20
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.19;

1.19
date	2007.05.31.19.19.27;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2005.07.17.09.10.36;	author jaredy;	state Exp;
branches;
next	1.17;

1.17
date	2003.07.07.14.43.18;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.23.14.42.12;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.18.02.31.35;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.14.21.31.39;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.07.09.13.35.15;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.07.07.10.50.04;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.07.04.18.59.42;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.06.05.04.47.41;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.27.16.20.59;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.05.23.14.10.59;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.03.10.21.25.25;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	97.07.28.15.11.57;	author flipk;	state Exp;
branches;
next	1.4;

1.4
date	97.07.28.01.41.02;	author flipk;	state Exp;
branches;
next	1.3;

1.3
date	97.07.28.01.36.33;	author flipk;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.09.01.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.50;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.50;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.23
log
@no more mpool;
@
text
@.\"	$OpenBSD: btree.3,v 1.22 2014/11/15 14:41:02 bentley Exp $
.\"	$NetBSD: btree.3,v 1.6 1996/05/03 21:26:48 cgd Exp $
.\"
.\" Copyright (c) 1997, Phillip F Knaack. All rights reserved.
.\"
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)btree.3	8.4 (Berkeley) 8/18/94
.\"
.Dd $Mdocdate: November 15 2014 $
.Dt BTREE 3
.Os
.Sh NAME
.Nm btree
.Nd btree database access method
.Sh SYNOPSIS
.In sys/types.h
.In db.h
.Sh DESCRIPTION
The
.Fn dbopen
routine is the library interface to database files.
One of the supported file formats is btree files.
The general description of the database access methods is in
.Xr dbopen 3 .
This manual page describes only the btree specific information.
.Pp
The btree data structure is a sorted, balanced tree structure storing
associated key/data pairs.
.Pp
The btree access method specific data structure provided to
.Fn dbopen
is defined in the
.In db.h
include file as follows:
.Bd -literal -offset indent
typedef struct {
	unsigned long flags;
	unsigned int cachesize;
	int maxkeypage;
	int minkeypage;
	unsigned int psize;
	int (*compare)(const DBT *key1, const DBT *key2);
	size_t (*prefix)(const DBT *key1, const DBT *key2);
	int lorder;
} BTREEINFO;
.Ed
.Pp
The elements of this structure are as follows:
.Bl -tag -width "XXXXXX"
.It Fa flags
The flag value is specified by
.Tn OR Ns 'ing
any of the following values:
.Bl -tag -width XXXXX
.It Dv R_DUP
Permit duplicate keys in the tree, i.e., permit insertion if the key to be
inserted already exists in the tree.
The default behavior, as described in
.Xr dbopen 3 ,
is to overwrite a matching key when inserting a new key or to fail if
the
.Dv R_NOOVERWRITE
flag is specified.
The
.Dv R_DUP
flag is overridden by the
.Dv R_NOOVERWRITE
flag, and if the
.Dv R_NOOVERWRITE
flag is specified, attempts to insert duplicate keys into
the tree will fail.
.Pp
If the database contains duplicate keys, the order of retrieval of
key/data pairs is undefined if the
.Fn get
routine is used; however,
.Fn seq
routine calls with the
.Dv R_CURSOR
flag set will always return the logical
.Dq first
of any group of duplicate keys.
.El
.It Fa cachesize
A suggested maximum size (in bytes) of the memory cache.
This value is
.Em only
advisory, and the access method will allocate more memory rather than fail.
Since every search examines the root page of the tree, caching the most
recently used pages substantially improves access time.
In addition, physical writes are delayed as long as possible, so a moderate
cache can reduce the number of I/O operations significantly.
Obviously, using a cache increases (but only increases) the likelihood of
corruption or lost data if the system crashes while a tree is being modified.
If
.Fa cachesize
is 0 (no size is specified) a default cache is used.
.It Fa maxkeypage
The maximum number of keys which will be stored on any single page.
Not currently implemented.
.It Fa minkeypage
The minimum number of keys which will be stored on any single page.
This value is used to determine which keys will be stored on overflow
pages, i.e., if a key or data item is longer than the pagesize divided
by the minkeypage value, it will be stored on overflow pages instead
of in the page itself.
If
.Fa minkeypage
is 0 (no minimum number of keys is specified) a value of 2 is used.
.It Fa psize
Page size is the size (in bytes) of the pages used for nodes in the tree.
The minimum page size is 512 bytes and the maximum page size is 64K.
If
.Fa psize
is 0 (no page size is specified) a page size is chosen based on the
underlying file system I/O block size.
.It Fa compare
Compare is the key comparison function.
It must return an integer less than, equal to, or greater than zero if the
first key argument is considered to be respectively less than, equal to,
or greater than the second key argument.
The same comparison function must be used on a given tree every time it
is opened.
If
.Fa compare
is
.Dv NULL
(no comparison function is specified), the keys are compared
lexically, with shorter keys considered less than longer keys.
.It Fa prefix
Prefix is the prefix comparison function.
If specified, this routine must return the number of bytes of the second key
argument which are necessary to determine that it is greater than the first
key argument.
If the keys are equal, the key length should be returned.
Note, the usefulness of this routine is very data dependent, but in some
data sets it can produce significantly reduced tree sizes and search times.
If
.Fa prefix
is
.Dv NULL
(no prefix function is specified),
.Em and
no comparison function is specified, a default lexical comparison routine
is used.
If
.Fa prefix
is
.Dv NULL
and a comparison routine is specified, no prefix comparison is done.
.It Fa lorder
The byte order for integers in the stored database metadata.
The number should represent the order as an integer; for example,
big endian order would be the number 4,321.
If
.Fa lorder
is 0 (no order is specified) the current host order is used.
.El
.Pp
If the file already exists (and the
.Dv O_TRUNC
flag is not specified), the
values specified for the parameters
.Fa flags ,
.Fa lorder ,
and
.Fa psize
are ignored in favor of the values used when the tree was created.
.Pp
Forward sequential scans of a tree are from the least key to the greatest.
.Pp
Space freed up by deleting key/data pairs from the tree is never reclaimed,
although it is normally made available for reuse.
This means that the btree storage structure is grow-only.
The only solutions are to avoid excessive deletions, or to create a fresh
tree periodically from a scan of an existing one.
.Pp
Searches, insertions, and deletions in a btree will all complete in
O(lg\ base\ N) where base is the average fill factor.
Often, inserting ordered data into btrees results in a low fill factor.
This implementation has been modified to make ordered insertion the best
case, resulting in a much better than normal page fill factor.
.Sh ERRORS
The
.Nm
access method routines may fail and set
.Va errno
for any of the errors specified for the library routine
.Xr dbopen 3 .
.Sh SEE ALSO
.Xr dbopen 3 ,
.Xr hash 3 ,
.Xr recno 3
.Rs
.%T "The Ubiquitous B-tree"
.%A Douglas Comer
.%J ACM Comput. Surv. 11
.%D June 1979
.%P pp 121-138
.Re
.Rs
.%T "Prefix B-trees"
.%A Rudolf Bayer
.%A Karl Unterauer
.%J ACM Transactions on Database Systems
.%V Vol. 2 , 1
.%D March 1977
.%P pp 11-26
.Re
.Rs
.%B "The Art of Computer Programming Vol. 3: Sorting and Searching"
.%A D. E. Knuth
.%D 1968
.%P pp 471-480
.Re
.Sh BUGS
Only big and little endian byte order is supported.
@


1.22
log
@Reduce instances of `` '' in manuals.

troff displays these as typographic quotes, but nroff implementations
almost always print them literally, which rarely has the intended effect
with modern fonts, even in stock xterm.

These uses of `` '' can be replaced either with more semantic alternatives
or with Dq, which prints typographic quotes in a UTF-8 locale (but will
automatically fall back to `` '' in an ASCII locale).

improvements and ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.21 2014/01/21 03:15:44 schwarze Exp $
d35 1
a35 1
.Dd $Mdocdate: January 21 2014 $
a218 1
.Xr mpool 3 ,
@


1.21
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.20 2013/06/05 03:39:22 tedu Exp $
d35 1
a35 1
.Dd $Mdocdate: June 5 2013 $
d107 2
a108 1
``first'' of any group of duplicate keys.
@


1.20
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.19 2007/05/31 19:19:27 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: May 31 2007 $
d59 1
a59 1
.Aq Pa db.h
@


1.19
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.18 2005/07/17 09:10:36 jaredy Exp $
d35 1
a35 1
.Dd $Mdocdate$
d42 2
a43 2
.Fd #include <sys/types.h>
.Fd #include <db.h>
@


1.18
log
@- punctuation, macro, layout, wording improvements
- avoid first person
- document dbm_rdonly
- update some error return values in the mpool(3) routines
- sync header file excerpts

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.17 2003/07/07 14:43:18 jmc Exp $
d35 1
a35 1
.Dd August 18, 1994
@


1.17
log
@convert some complicated lists to displays;
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.16 2003/06/02 20:18:34 millert Exp $
d63 2
a64 2
	u_long flags;
	u_int cachesize;
d67 1
a67 1
	u_int psize;
d162 1
a162 1
data sets can produce significantly reduced tree sizes and search times.
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.15 2001/06/23 14:42:12 deraadt Exp $
d61 1
a61 2
.Pp
.Bl -item -compact
d63 8
a70 20
.It
.Bl -item -compact -inset -offset indent
.It
u_long flags;
.It
u_int cachesize;
.It
int maxkeypage;
.It
int minkeypage;
.It
u_int psize;
.It
int (*compare)(const DBT *key1, const DBT *key2);
.It
size_t (*prefix)(const DBT *key1, const DBT *key2);
.It
int lorder;
.El
.It
d72 1
a72 1
.El
@


1.15
log
@more .%A handling; bk@@rt.fm
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.14 2000/04/18 02:31:35 aaron Exp $
d17 1
a17 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@Repairs.
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.13 2000/03/14 21:31:39 aaron Exp $
d246 2
a247 1
.%A Bayer and Unterauer
@


1.13
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.12 1999/07/09 13:35:15 aaron Exp $
d49 1
a49 1
The routine
d51 1
a51 1
is the library interface to database files.
d63 1
a63 1
.Em <db.h>
d93 1
a93 1
.It flags
d126 1
a126 1
.It cachesize
d140 1
a140 1
.It maxkeypage
d143 1
a143 1
.It minkeypage
d148 2
a149 1
of in the page itself. If
d152 1
a152 1
.It psize
d159 1
a159 1
.It compare
d166 1
d172 1
a172 1
.It prefix
d178 3
a180 2
Note, the usefulness of this routine is very data dependent, but, in some
data sets can produce significantly reduced tree sizes and search times. If
d187 2
a188 1
is used. If
d193 1
a193 1
.It lorder
d205 6
a210 2
values specified for the parameters flags, lorder and psize are ignored
in favor of the values used when the tree was created.
@


1.12
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.11 1999/07/07 10:50:04 aaron Exp $
d99 1
a99 1
Permit duplicate keys in the tree, i.e. permit insertion if the key to be
d146 1
a146 1
pages, i.e. if a key or data item is longer than the pagesize divided
@


1.11
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.10 1999/07/04 18:59:42 aaron Exp $
d62 1
a62 1
is defined in the 
d191 1
a191 1
The number should represent the order as an integer; for example, 
@


1.10
log
@trash some old leftover macros and replace them with -mdoc macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.9 1999/06/05 04:47:41 aaron Exp $
d40 1
a41 1
.Dt BTREE 3
@


1.9
log
@use .Tn instead of .Em for logical/bitwise OR + AND
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.8 1999/05/27 16:20:59 aaron Exp $
d138 1
a138 1
.Em cachesize
d149 1
a149 1
.Em minkeypage
d155 1
a155 1
.Em psize
d165 4
a168 2
.Em compare
is NULL (no comparison function is specified), the keys are compared
d178 5
a182 3
.Em prefix
is NULL (no prefix function is specified),
.B and
d185 4
a188 3
.I prefix
is NULL and a comparison routine is specified, no prefix comparison is
done.
d194 1
a194 1
.Em lorder
@


1.8
log
@or'ing -> OR'ing
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.7 1999/05/23 14:10:59 aaron Exp $
d95 1
a95 1
.Em OR Ns 'ing
@


1.7
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.6 1999/03/10 21:25:25 pjanzen Exp $
d95 1
a95 1
.Em or Ns 'ing
@


1.6
log
@fix comma splices involving 'however'
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.5 1997/07/28 15:11:57 flipk Exp $
d40 1
a40 1
.Os OpenBSD
@


1.5
log
@mandoc. tag. copyright.
@
text
@d1 1
a1 1
.\"	$OpenBSD: btree.3,v 1.4 1997/07/28 01:41:02 flipk Exp $
d119 1
a119 1
routine is used, however,
@


1.4
log
@dollar OpenBSD dollar tag
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d4 2
d92 1
a92 1
.Bl -tag -width "XXXXXX" -offset indent
d97 1
a97 1
.Bl -tag -width XXXXX -offset indent
d216 1
a216 1
.Em errno
@


1.3
log
@convert to mandoc. pretty
@
text
@d1 1
@


1.2
log
@db release 1.85
@
text
@d36 10
a45 12
.TH BTREE 3 "August 18, 1994"
.\".UC 7
.SH NAME
btree \- btree database access method
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <db.h>
.ft R
.fi
.SH DESCRIPTION
d47 1
a47 1
.IR dbopen
d51 3
a53 3
.IR dbopen (3),
this manual page describes only the btree specific information.
.PP
d56 1
a56 1
.PP
d58 6
a63 3
.I dbopen
is defined in the <db.h> include file as follows:
.PP
d65 3
a67 1
.RS
d69 1
a69 1
.br
d71 1
a71 1
.br
d73 1
a73 1
.br
d75 1
a75 1
.br
d77 1
a77 1
.br
d79 1
a79 1
.br
d81 1
a81 1
.br
d83 2
a84 1
.RE
d86 2
a87 1
.PP
d89 2
a90 2
.TP
flags
d92 1
a92 1
.IR or 'ing
d94 2
a95 3
.RS
.TP
R_DUP
d99 1
a99 1
.IR dbopen (3),
d101 10
a110 3
the R_NOOVERWRITE flag is specified.
The R_DUP flag is overridden by the R_NOOVERWRITE flag, and if the
R_NOOVERWRITE flag is specified, attempts to insert duplicate keys into
d112 1
a112 1
.IP
d115 1
a115 1
.I get
d117 4
a120 2
.I seq
routine calls with the R_CURSOR flag set will always return the logical
d122 2
a123 3
.RE
.TP
cachesize
d126 1
a126 1
.B only
d135 1
a135 1
.I cachesize
d137 1
a137 2
.TP
maxkeypage
d140 1
a140 10
.\" The maximum number of keys which will be stored on any single page.
.\" Because of the way the btree data structure works,
.\" .I maxkeypage
.\" must always be greater than or equal to 2.
.\" If
.\" .I maxkeypage
.\" is 0 (no maximum number of keys is specified) the page fill factor is
.\" made as large as possible (which is almost invariably what is wanted).
.TP
minkeypage
d145 2
a146 3
of in the page itself.
If
.I minkeypage
d148 1
a148 2
.TP
psize
d152 1
a152 1
.I psize
d155 1
a155 2
.TP
compare
d162 1
a162 2
If
.I compare
d165 1
a165 2
.TP
prefix
d172 2
a173 3
data sets can produce significantly reduced tree sizes and search times.
If
.I prefix
d177 1
a177 2
is used.
If
d181 1
a181 2
.TP
lorder
d186 1
a186 1
.I lorder
d188 5
a192 2
.PP
If the file already exists (and the O_TRUNC flag is not specified), the
d195 1
a195 1
.PP
d197 1
a197 1
.PP
d203 1
a203 1
.PP
d205 1
a205 1
O lg base N where base is the average fill factor.
d209 1
a209 1
.SH ERRORS
d211 1
a211 1
.I btree
d213 1
a213 1
.I errno
d215 28
a242 17
.IR dbopen (3).
.SH "SEE ALSO"
.IR dbopen (3),
.IR hash (3),
.IR mpool (3),
.IR recno (3)
.sp
.IR "The Ubiquitous B-tree" ,
Douglas Comer, ACM Comput. Surv. 11, 2 (June 1979), 121-138.
.sp
.IR "Prefix B-trees" ,
Bayer and Unterauer, ACM Transactions on Database Systems, Vol. 2, 1
(March 1977), 11-26.
.sp
.IR "The Art of Computer Programming Vol. 3: Sorting and Searching" , 
D.E. Knuth, 1968, pp 471-480.
.SH BUGS
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: btree.3,v 1.5 1995/02/27 13:23:18 cgd Exp $
d34 1
a34 1
.\"	@@(#)btree.3	8.3 (Berkeley) 2/21/94
d36 1
a36 1
.TH BTREE 3 "February 21, 1994"
d212 7
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
