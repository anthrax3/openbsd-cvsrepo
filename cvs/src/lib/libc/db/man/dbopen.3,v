head	1.28;
access;
symbols
	OPENBSD_6_2:1.28.0.10
	OPENBSD_6_2_BASE:1.28
	OPENBSD_6_1:1.28.0.8
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.4
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.27.0.10
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.27.0.6
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.27.0.4
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.26.0.2
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.25.0.22
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.20
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.18
	OPENBSD_5_0:1.25.0.16
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.14
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.12
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.8
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.10
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.6
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.4
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.2
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.24.0.2
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.23.0.8
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.6
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.4
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.2
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.22.0.4
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.21.0.4
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	OPENBSD_3_3:1.18.0.8
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.18.0.6
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.18.0.4
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.15.0.6
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.15.0.4
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.15.0.2
	OPENBSD_2_7_BASE:1.15
	OPENBSD_2_6:1.13.0.2
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.28
date	2015.09.10.10.20.55;	author jmc;	state Exp;
branches;
next	1.27;
commitid	hzFWP8Fp2ocosP6W;

1.27
date	2014.01.21.03.15.44;	author schwarze;	state Exp;
branches;
next	1.26;

1.26
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.25;

1.25
date	2007.09.16.19.40.56;	author otto;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.31.19.19.27;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2005.07.17.09.10.36;	author jaredy;	state Exp;
branches;
next	1.22;

1.22
date	2004.05.05.20.19.48;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2003.07.07.14.43.18;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2003.05.07.08.52.42;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.06.10.42.25;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.23.05.57.03;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.23.02.33.20;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.18.02.31.35;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2000.03.14.21.31.39;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.07.07.14.22.24;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.07.07.10.50.04;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.05.28.01.57.32;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.05.27.20.49.31;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.05.25.13.06.44;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.23.14.10.58;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.03.10.21.25.25;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	99.02.27.21.54.56;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.02.26.06.55.53;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.01.11.11.14.47;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.11.11.04.47.27;	author flipk;	state Exp;
branches;
next	1.2;

1.2
date	97.07.28.15.12.00;	author flipk;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.50;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.50;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.28
log
@no more mpool;
@
text
@.\"	$OpenBSD: dbopen.3,v 1.27 2014/01/21 03:15:44 schwarze Exp $
.\"	$NetBSD: dbopen.3,v 1.6 1995/02/27 13:23:25 cgd Exp $
.\"
.\" Copyright (c) 1997, Phillip F Knaack. All rights reserved.
.\"
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)dbopen.3	8.5 (Berkeley) 1/2/94
.\"
.Dd $Mdocdate: January 21 2014 $
.Dt DBOPEN 3
.Os
.Sh NAME
.Nm dbopen
.Nd database access methods
.Sh SYNOPSIS
.In sys/types.h
.In fcntl.h
.In limits.h
.In db.h
.Ft DB *
.Fn dbopen "const char *file" "int flags" "int mode" "DBTYPE type" "const void *openinfo"
.Sh DESCRIPTION
The
.Fn dbopen
function is the library interface to database files.
The supported file formats are btree, hashed, and UNIX file oriented.
The btree format is a representation of a sorted, balanced tree structure.
The hashed format is an extensible, dynamic hashing scheme.
The flat-file format is a byte stream file with fixed or variable length
records.
The formats and file format specific information are described in detail
in their respective manual pages
.Xr btree 3 ,
.Xr hash 3 ,
and
.Xr recno 3 .
.Pp
.Fn dbopen
opens
.Fa file
for reading and/or writing.
Files never intended to be preserved on disk may be created by setting
the file parameter to
.Dv NULL .
.Pp
The
.Fa flags
and
.Fa mode
arguments
are as specified to the
.Xr open 2
routine; however, only the
.Dv O_CREAT ,
.Dv O_EXCL ,
.Dv O_EXLOCK ,
.Dv O_NOFOLLOW ,
.Dv O_NONBLOCK ,
.Dv O_RDONLY ,
.Dv O_RDWR ,
.Dv O_SHLOCK ,
.Dv O_SYNC ,
and
.Dv O_TRUNC
flags are meaningful.
(Note, opening a database file
.Dv O_WRONLY
is not possible.)
.\"Three additional options may be specified by
.\".IR or 'ing
.\"them into the
.\".I flags
.\"argument.
.\".Bl -tag -width XXXXX
.\".It DB_LOCK
.\"Do the necessary locking in the database to support concurrent access.
.\"If concurrent access isn't needed or the database is read-only this
.\"flag should not be set, as it tends to have an associated performance
.\"penalty.
.\".It DB_SHMEM
.\"Place the underlying memory pool used by the database in shared
.\"memory.
.\"Necessary for concurrent access.
.\".It DB_TXN
.\"Support transactions in the database.
.\"The DB_LOCK and DB_SHMEM flags must be set as well.
.\".El
.Pp
The
.Fa type
argument is of type
.Fa DBTYPE
(as defined in the
.In db.h
include file) and may be set to
.Dv DB_BTREE ,
.Dv DB_HASH ,
or
.Dv DB_RECNO .
.Pp
The
.Fa openinfo
argument is a pointer to an access method specific structure described
in the access method's manual page.
If
.Fa openinfo
is
.Dv NULL ,
each access method will use defaults appropriate for the system
and the access method.
.Pp
.Fn dbopen
returns a pointer to a DB structure on success and
.Dv NULL
on error.
The DB structure is defined in the
.In db.h
include file, and contains at least the following fields:
.Bd -literal -offset indent
typedef struct {
	DBTYPE type;
	int (*close)(const DB *db);
	int (*del)(const DB *db, const DBT *key,
	    unsigned int flags);
	int (*fd)(const DB *db);
	int (*get)(const DB *db, DBT *key, DBT *data,
	    unsigned int flags);
	int (*put)(const DB *db, DBT *key, const DBT *data,
	    unsigned int flags);
	int (*sync)(const DB *db, u_int flags);
	int (*seq)(const DB *db, DBT *key, DBT *data,
	    unsigned int flags);
} DB;
.Ed
.Pp
These elements describe a database type and a set of functions performing
various actions.
These functions take a pointer to a structure as returned by
.Fn dbopen ,
and sometimes one or more pointers to key/data structures and a flag value.
.Bl -tag -width XXXXX -offset indent
.It Fa type
The type of the underlying access method (and file format).
.It Fa close
A pointer to a routine to flush any cached information to disk, free any
allocated resources, and close the underlying file(s).
Since key/data pairs may be cached in memory, failing to sync the file
with a
.Fa close
or
.Fa sync
function may result in inconsistent or lost information.
.Fa close
routines return \-1 on error (setting
.Va errno )
and 0 on success.
.It Fa del
A pointer to a routine to remove key/data pairs from the database.
.Pp
The parameter
.Fa flags
may be set to the following value:
.Bl -tag -width R_NOOVERWRITE
.It Dv R_CURSOR
Delete the record referenced by the cursor.
The cursor must have previously been initialized.
.El
.Pp
.Fa del
routines return \-1 on error (setting
.Va errno ) ,
0 on success, and 1 if the specified
.Fa key
was not in the file.
.It Fa fd
A pointer to a routine which returns a file descriptor representative
of the underlying database.
A file descriptor referencing the same file will be returned to all
processes which call
.Fn dbopen
with the same
.Fa file
name.
This file descriptor may be safely used as an argument to the
.Xr fcntl 2
and
.Xr flock 2
locking functions.
The file descriptor is not necessarily associated with any of the
underlying files used by the access method.
No file descriptor is available for in-memory databases.
.Fa fd
routines return \-1 on error (setting
.Va errno )
and the file descriptor on success.
.It Fa get
A pointer to a routine which is the interface for keyed retrieval from
the database.
The address and length of the data associated with the specified
.Fa key
are returned in the structure referenced by
.Fa data .
.Fa get
routines return \-1 on error (setting
.Va errno ) ,
0 on success, and 1 if the
.Fa key
was not in the file.
.Pp
.Fa flags
is currently unused.
Specifying anything but 0 will result in an error.
.It Fa put
A pointer to a routine to store key/data pairs in the database.
.Pp
The parameter
.Fa flags
may be set to one of the following values:
.Bl -tag -width R_NOOVERWRITE
.It Dv R_CURSOR
Replace the key/data pair referenced by the cursor.
The cursor must have previously been initialized.
.It Dv R_IAFTER
Append the data immediately after the data referenced by
.Fa key ,
creating a new key/data pair.
The record number of the appended key/data pair is returned in the
.Fa key
structure.
(Applicable only to the
.Dv DB_RECNO
access method.)
.It Dv R_IBEFORE
Insert the data immediately before the data referenced by
.Fa key ,
creating a new key/data pair.
The record number of the inserted key/data pair is returned in the
.Fa key
structure.
(Applicable only to the
.Dv DB_RECNO
access method.)
.It Dv R_NOOVERWRITE
Enter the new key/data pair only if the key does not previously exist.
.It Dv R_SETCURSOR
Store the key/data pair, setting or initializing the position of the
cursor to reference it.
(Applicable only to the
.Dv DB_BTREE
and
.Dv DB_RECNO
access methods.)
.El
.Pp
.Dv R_SETCURSOR
is available only for the
.Dv DB_BTREE
and
.Dv DB_RECNO
access methods because it implies that the keys have an inherent order
which does not change.
.Pp
.Dv R_IAFTER
and
.Dv R_IBEFORE
are available only for the
.Dv DB_RECNO
access method because they each imply that the access method is able to
create new keys.
This is only true if the keys are ordered and independent, record numbers
for example.
.Pp
The default behavior of the
.Fa put
routines is to enter the new key/data pair, replacing any previously
existing key.
.Pp
.Fa put
routines return \-1 on error (setting
.Va errno ) ,
0 on success, and 1 if the
.Dv R_NOOVERWRITE
flag was set and the key already exists in the file.
.It Fa seq
A pointer to a routine which is the interface for sequential
retrieval from the database.
The address and length of the key are returned in the structure
referenced by
.Fa key ,
and the address and length of the data are returned in the
structure referenced
by
.Fa data .
.Pp
Sequential key/data pair retrieval may begin at any time, and the
position of the
.Dq cursor
is not affected by calls to the
.Fa del ,
.Fa get ,
.Fa put ,
or
.Fa sync
routines.
Modifications to the database during a sequential scan will be reflected
in the scan, i.e., records inserted behind the cursor will not be returned
while records inserted in front of the cursor will be returned.
.Pp
The
.Fa flags
value
.Sy must
be set to one of the following values:
.Bl -tag -width R_NOOVERWRITE
.It Dv R_CURSOR
The data associated with the specified key is returned.
This differs from the
.Fa get
routines in that it sets or initializes the cursor to the location of
the key as well.
(Note, for the
.Dv DB_BTREE
access method, the returned key is not necessarily an
exact match for the specified key.
The returned key is the smallest key greater than or equal to the specified
key, permitting partial key matches and range searches.)
.It Dv R_FIRST
The first key/data pair of the database is returned, and the cursor
is set or initialized to reference it.
.It Dv R_LAST
The last key/data pair of the database is returned, and the cursor
is set or initialized to reference it.
(Applicable only to the
.Dv DB_BTREE
and
.Dv DB_RECNO
access methods.)
.It Dv R_NEXT
Retrieve the key/data pair immediately after the cursor.
If the cursor is not yet set, this is the same as the
.Dv R_FIRST
flag.
.It Dv R_PREV
Retrieve the key/data pair immediately before the cursor.
If the cursor is not yet set, this is the same as the
.Dv R_LAST
flag.
(Applicable only to the
.Dv DB_BTREE
and
.Dv DB_RECNO
access methods.)
.El
.Pp
.Dv R_LAST
and
.Dv R_PREV
are available only for the
.Dv DB_BTREE
and
.Dv DB_RECNO
access methods because they each imply that the keys have an inherent
order which does not change.
.Pp
.Fa seq
routines return \-1 on error (setting
.Va errno ) ,
0 on success, and 1 if there are no key/data pairs less than or greater
than the specified or current key.
If the
.Dv DB_RECNO
access method is being used, and if the database file
is a character special file and no complete key/data pairs are currently
available, the
.Fa seq
routines return 2.
.It Fa sync
A pointer to a routine to flush any cached information to disk.
If the database is in memory only, the
.Fa sync
routine has no effect and will always succeed.
.Pp
The
.Fa flags
value may be set to the following value:
.Bl -tag -width R_NOOVERWRITE
.It Dv R_RECNOSYNC
If the
.Dv DB_RECNO
access method is being used, this flag causes the
.Fa sync
routine to apply to the btree file which underlies the
recno file, not the recno file itself.
(See the
.Fa bfname
field of the
.Xr recno 3
manual page for more information.)
.El
.Pp
.Fa sync
routines return \-1 on error (setting
.Va errno )
and 0 on success.
.El
.Sh KEY/DATA PAIRS
Access to all file types is based on key/data pairs.
Both keys and data are represented by the following data structure:
.Bd -literal -offset indent
typedef struct {
	void *data;
	size_t size;
} DBT;
.Ed
.Pp
The elements of the DBT structure are defined as follows:
.Bl -tag -width Ds -offset indent
.It Fa data
A pointer to a byte string.
.It Fa size
The length of the byte string.
.El
.Pp
Key and data byte strings may reference strings of essentially unlimited
length although any two of them must fit into available memory at the same
time.
It should be noted that the access methods provide no guarantees about
byte string alignment.
.Sh ERRORS
The
.Fn dbopen
routine may fail and set
.Va errno
for any of the errors specified for the library routines
.Xr open 2
and
.Xr malloc 3
or the following:
.Bl -tag -width XEINVALX
.It Bq Er EFTYPE
A file is incorrectly formatted.
.It Bq Er EINVAL
A parameter has been specified (hash function, pad byte etc.) that is
incompatible with the current file specification or which is not
meaningful for the function (for example, use of the cursor without
prior initialization) or there is a mismatch between the version
number of the file and the software.
.El
.Pp
The
.Fa close
routines may fail and set
.Va errno
for any of the errors specified for the library routines
.Xr close 2 ,
.Xr read 2 ,
.Xr write 2 ,
.Xr free 3 ,
or
.Xr fsync 2 .
.Pp
The
.Fa del ,
.Fa get ,
.Fa put ,
and
.Fa seq
routines may fail and set
.Va errno
for any of the errors specified for the library routines
.Xr read 2 ,
.Xr write 2 ,
.Xr free 3 ,
or
.Xr malloc 3 .
.Pp
The
.Fa fd
routines will fail and set
.Va errno
to
.Er ENOENT
for in-memory databases.
.Pp
The
.Fa sync
routines may fail and set
.Va errno
for any of the errors specified for the library routine
.Xr fsync 2 .
.Sh SEE ALSO
.Xr btree 3 ,
.Xr hash 3 ,
.Xr recno 3
.Rs
.%T "LIBTP: Portable, Modular Transactions for UNIX"
.%A Margo Seltzer
.%A Michael Olson
.%J USENIX proceedings
.%D Winter 1992
.Re
.Sh BUGS
The typedef DBT is a mnemonic for
.Dq data base thang ,
and was used
because no one could think of a reasonable name that wasn't already used.
.Pp
The file descriptor interface is a kludge and will be deleted in a
future version of the interface.
.Pp
None of the access methods provide any form of concurrent access,
locking, or transactions.
@


1.27
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.26 2013/06/05 03:39:22 tedu Exp $
d35 1
a35 1
.Dd $Mdocdate: June 5 2013 $
a519 1
.Xr mpool 3 ,
@


1.26
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.25 2007/09/16 19:40:56 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: September 16 2007 $
d120 1
a120 1
.Aq Pa db.h
d143 1
a143 1
.Aq Pa db.h
@


1.25
log
@for get the flags arg must be 0; from Tamas TEVESZ; ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.24 2007/05/31 19:19:27 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate$
d42 4
a45 4
.Fd #include <sys/types.h>
.Fd #include <fcntl.h>
.Fd #include <limits.h>
.Fd #include <db.h>
@


1.24
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.23 2005/07/17 09:10:36 jaredy Exp $
d235 4
@


1.23
log
@- punctuation, macro, layout, wording improvements
- avoid first person
- document dbm_rdonly
- update some error return values in the mpool(3) routines
- sync header file excerpts

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.22 2004/05/05 20:19:48 millert Exp $
d35 1
a35 1
.Dd January 2, 1994
@


1.22
log
@O_NOFOLLOW and O_SYNC are also valid flags to dbopen(3)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.21 2003/07/07 14:43:18 jmc Exp $
d145 1
a145 1
.Bd -literal
d149 2
a150 1
	int (*del)(const DB *db, const DBT *key, u_int flags);
d152 4
a155 2
	int (*get)(const DB *db, DBT *key, DBT *data, u_int flags);
	int (*put)(const DB *db, DBT *key, const DBT *data, u_int flags);
d157 2
a158 1
	int (*seq)(const DB *db, DBT *key, DBT *data, u_int flags);
d165 1
a165 1
.Fn dbopen dbopen ,
d187 1
a187 1
.Fa flag
d189 1
a189 1
.Bl -tag -width XXXXX
d195 1
a195 1
.Fa delete
d217 1
a217 1
No file descriptor is available for in memory databases.
d220 1
a220 1
.Va errno ) ,
d239 1
a239 1
.Fa flag
d241 1
a241 1
.Bl -tag -width XXXXX
d305 1
a305 2
.Fa flag
was set and the key already exists in the file.
d331 3
a333 1
The flag value
d336 1
a336 1
.Bl -tag -width XXXXX
d390 1
a390 1
0 on success and 1 if there are no key/data pairs less than or greater
d405 4
a408 2
The flag value may be set to the following value:
.Bl -tag -width XXXXX
d412 3
a414 2
access method is being used, this flag causes
the sync routine to apply to the btree file which underlies the
d431 1
a431 3
.Pp
.Bl -item -compact
.It
d433 2
a434 8
.It
.Bl -item -compact -offset indent
.It
void *data;
.It
size_t size;
.El
.It
d436 1
a436 1
.El
d439 1
a439 1
.Bl -tag -width XXXXX
d469 1
a469 1
number of file and the software.
d505 1
a505 1
for in memory databases.
@


1.21
log
@convert some complicated lists to displays;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.20 2003/06/02 20:18:34 millert Exp $
d83 1
d88 1
@


1.20
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.19 2003/05/07 08:52:42 jmc Exp $
d143 1
a143 2
.Pp
.Bl -item -compact
d145 8
a152 20
.It
.Bl -item -compact -inset -offset indent
.It
DBTYPE type;
.It
int (*close)(const DB *db);
.It
int (*del)(const DB *db, const DBT *key, u_int flags);
.It
int (*fd)(const DB *db);
.It
int (*get)(const DB *db, DBT *key, DBT *data, u_int flags);
.It
int (*put)(const DB *db, DBT *key, const DBT *data, u_int flags);
.It
int (*sync)(const DB *db, u_int flags);
.It
int (*seq)(const DB *db, DBT *key, DBT *data, u_int flags);
.El
.It
d154 1
a154 1
.El
a160 1
.Pp
@


1.19
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.18 2001/08/06 10:42:25 mpech Exp $
d17 1
a17 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.18
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.17 2001/06/23 05:57:03 deraadt Exp $
d545 1
a545 1
because noone could think of a reasonable name that wasn't already used.
d547 1
a547 1
The file descriptor interface is a kluge and will be deleted in a
@


1.17
log
@ok, tmac is now fixed
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.16 2001/06/23 02:33:20 deraadt Exp $
a533 1
.Pp
@


1.16
log
@join .%A entries; most by bk@@rt.fm
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.15 2000/04/18 02:31:35 aaron Exp $
d537 2
a538 1
.%A Margo Seltzer and Michael Olson
@


1.15
log
@Repairs.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.14 2000/03/14 21:31:39 aaron Exp $
d537 1
a537 2
.%A Margo Seltzer
.%A Michael Olson
@


1.14
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.13 1999/07/07 14:22:24 aaron Exp $
d53 4
a56 3
.Nm
is the library interface to database files.
The supported file formats are btree, hashed and UNIX file oriented.
d68 1
a68 1
.Nm
d90 1
a90 1
.Dv O_SHLOCK
d121 3
a123 2
(as defined in the <db.h> include file) and
may be set to
d125 1
a125 1
.Dv DB_HASH
d140 1
a140 1
.Nm
d143 4
a146 2
on error.  The DB structure is defined in the <db.h> include file,
and contains at least the following fields:
d176 1
a176 1
.Nm dbopen ,
d180 1
a180 1
.It type
d182 1
a182 1
.It close
d195 1
a195 1
.It del
d202 1
a202 1
.It R_CURSOR
d213 1
a213 1
.It fd
d218 1
a218 1
.Nm
d234 1
a234 1
.It get
d247 1
a247 1
.It put
d254 1
a254 1
.It R_CURSOR
d257 1
a257 1
.It R_IAFTER
d264 4
a267 2
(Applicable only to the DB_RECNO access method.)
.It R_IBEFORE
d274 4
a277 2
(Applicable only to the DB_RECNO access method.)
.It R_NOOVERWRITE
d279 1
a279 1
.It R_SETCURSOR
d282 5
a286 1
(Applicable only to the DB_BTREE and DB_RECNO access methods.)
d289 6
a294 2
R_SETCURSOR is available only for the DB_BTREE and DB_RECNO access
methods because it implies that the keys have an inherent order
d297 5
a301 1
R_IAFTER and R_IBEFORE are available only for the DB_RECNO
d315 2
a316 1
0 on success, and 1 if the R_NOOVERWRITE
d319 1
a319 1
.It seq
d331 3
a333 1
position of the ``cursor'' is not affected by calls to the
d348 1
a348 1
.It R_CURSOR
d354 3
a356 1
(Note, for the DB_BTREE access method, the returned key is not necessarily an
d360 1
a360 1
.It R_FIRST
d363 1
a363 1
.It R_LAST
d366 6
a371 2
(Applicable only to the DB_BTREE and DB_RECNO access methods.)
.It R_NEXT
d373 4
a376 2
If the cursor is not yet set, this is the same as the R_FIRST flag.
.It R_PREV
d378 8
a385 2
If the cursor is not yet set, this is the same as the R_LAST flag.
(Applicable only to the DB_BTREE and DB_RECNO access methods.)
d388 7
a394 1
R_LAST and R_PREV are available only for the DB_BTREE and DB_RECNO
d403 3
a405 1
If the DB_RECNO access method is being used, and if the database file
d410 1
a410 1
.It sync
d418 4
a421 2
.It R_RECNOSYNC
If the DB_RECNO access method is being used, this flag causes
d456 1
a456 1
.It data
d458 1
a458 1
.It size
d469 1
a469 1
.Nm
d519 3
a521 1
to ENOENT for in memory databases.
d543 3
a545 1
The typedef DBT is a mnemonic for ``data base thang'', and was used
@


1.13
log
@when using `-' as a negative sign, escape it with a backslash so troff knows
it's not supposed to be a hyphen/dash
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.12 1999/07/07 10:50:04 aaron Exp $
d318 1
a318 1
in the scan, i.e. records inserted behind the cursor will not be returned
@


1.12
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.11 1999/05/28 01:57:32 aaron Exp $
d188 1
a188 1
routines return -1 on error (setting
d204 1
a204 1
routines return -1 on error (setting
d227 1
a227 1
routines return -1 on error (setting
d238 1
a238 1
routines return -1 on error (setting
d293 1
a293 1
routines return -1 on error (setting
d356 1
a356 1
routines return -1 on error (setting
d385 1
a385 1
routines return -1 on error (setting
@


1.11
log
@"SEE ALSO" -> SEE ALSO, missed these files before
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.10 1999/05/27 20:49:31 aaron Exp $
d40 1
a41 1
.Dt DBOPEN 3
@


1.10
log
@more missing .El macros filled in
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.9 1999/05/25 13:06:44 aaron Exp $
d480 1
a480 1
.Sh "SEE ALSO"
@


1.9
log
@punctuation
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.8 1999/05/23 14:10:58 aaron Exp $
d118 3
a120 1
argument is of type DBTYPE (as defined in the <db.h> include file) and
d172 1
a172 1
.Nm ,
d388 1
@


1.8
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.7 1999/03/10 21:25:25 pjanzen Exp $
d144 1
a144 1
.It.
@


1.7
log
@fix comma splices involving 'however'
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.6 1999/02/27 21:54:56 deraadt Exp $
d40 1
a40 1
.Os OpenBSD
@


1.6
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.5 1999/02/26 06:55:53 millert Exp $
d82 1
a82 1
routine, however, only the
@


1.5
log
@Use .Fn for dbopen() declaration and add from Dv for NULL
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.4 1999/01/11 11:14:47 deraadt Exp $
d185 1
a185 1
.Fa Close
d201 1
a201 1
.Fa Delete
d224 1
a224 1
.Fa Fd
d235 1
a235 1
.Fa Get
d290 1
a290 1
.Fa Put
d353 1
a353 1
.Fa Seq
d382 1
a382 1
.Fa Sync
@


1.4
log
@mention fcntl.h; jfw@@jfwhome.funhouse.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.3 1997/11/11 04:47:27 flipk Exp $
d50 2
a51 7
.Fo "DB * dbopen"
.Fa "const char *file"
.Fa "int flags"
.Fa "int mode"
.Fa "DBTYPE type"
.Fa "const void *openinfo"
.Fc
d73 1
a73 1
.Dv NULL.
d131 3
a133 1
is NULL, each access method will use defaults appropriate for the system
d137 4
a140 3
returns a pointer to a DB structure on success and NULL on error.
The DB structure is defined in the <db.h> include file, and contains at
least the following fields:
@


1.3
log
@oh my, i'm embarassed.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dbopen.3,v 1.2 1997/07/28 15:12:00 flipk Exp $
d47 1
@


1.2
log
@mandoc. tag. copyright.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d52 1
@


1.1
log
@Initial revision
@
text
@d1 1
d4 2
d39 18
a56 19
.TH DBOPEN 3 "January 2, 1994"
.UC 7
.SH NAME
dbopen \- database access methods
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <limits.h>
#include <db.h>

DB *
dbopen(const char *file, int flags, int mode, DBTYPE type,
.ti +5
const void *openinfo);
.ft R
.fi
.SH DESCRIPTION
.IR Dbopen
d65 2
a66 2
.IR btree (3),
.IR hash (3)
d68 5
a72 4
.IR recno (3).
.PP
Dbopen opens
.I file
d75 3
a77 2
the file parameter to NULL.
.PP
d79 1
a79 1
.I flags
d81 2
a82 1
.I mode arguments
d84 15
a98 4
.IR open (2)
routine, however, only the O_CREAT, O_EXCL, O_EXLOCK, O_NONBLOCK,
O_RDONLY, O_RDWR, O_SHLOCK and O_TRUNC flags are meaningful.
(Note, opening a database file O_WRONLY is not possible.)
d104 2
a105 2
.\".TP
.\"DB_LOCK
d110 1
a110 2
.\".TP
.\"DB_SHMEM
d114 1
a114 2
.\".TP
.\"DB_TXN
d117 2
a118 1
.PP
d120 1
a120 1
.I type
d122 6
a127 2
may be set to DB_BTREE, DB_HASH or DB_RECNO.
.PP
d129 1
a129 1
.I openinfo
d133 1
a133 1
.I openinfo
d136 2
a137 2
.PP
.I Dbopen
d141 2
a142 2
.sp
.nf
d144 3
a146 1
.RS
d148 1
d150 1
d152 1
d154 1
d156 3
a158 3
int (*put)(const DB *db, DBT *key, const DBT *data,
.ti +5
u_int flags);
d160 1
d162 2
a163 1
.RE
d165 2
a166 2
.fi
.PP
d170 1
a170 1
.IR dbopen ,
d172 3
a174 2
.TP
type
d176 1
a176 2
.TP
close
d181 1
a181 1
.I close
d183 1
a183 1
.I sync
d185 1
a185 1
.I Close
d187 1
a187 1
.IR errno )
d189 1
a189 2
.TP
del
d191 1
a191 1
.IP
d193 1
a193 1
.I flag
d195 2
a196 3
.RS
.TP
R_CURSOR
d199 3
a201 3
.RE
.IP
.I Delete
d203 1
a203 1
.IR errno ),
d205 1
a205 1
.I key
d207 1
a207 2
.TP
fd
d212 1
a212 1
.I dbopen
d214 1
a214 1
.I file
d217 1
a217 1
.IR fcntl (2)
d219 1
a219 1
.IR flock (2)
d224 1
a224 1
.I Fd
d226 1
a226 1
.IR errno ),
d228 1
a228 2
.TP
get
d232 1
a232 1
.I key
d234 2
a235 2
.IR data .
.I Get
d237 1
a237 1
.IR errno ),
d239 1
a239 1
.I key
d241 1
a241 2
.TP
put
d243 1
a243 1
.IP
d245 1
a245 1
.I flag
d247 2
a248 3
.RS
.TP
R_CURSOR
d251 1
a251 2
.TP
R_IAFTER
d253 1
a253 1
.IR key ,
d256 1
a256 1
.I key
d259 1
a259 2
.TP
R_IBEFORE
d261 1
a261 1
.IR key ,
d264 1
a264 1
.I key
d267 1
a267 2
.TP
R_NOOVERWRITE
d269 1
a269 2
.TP
R_SETCURSOR
d273 2
a274 2
.RE
.IP
d278 1
a278 1
.IP
d284 1
a284 1
.IP
d286 1
a286 1
.I put
d289 2
a290 2
.IP
.I Put
d292 1
a292 1
.IR errno ),
d294 1
a294 1
.I flag
d296 1
a296 2
.TP
seq
d301 1
a301 1
.IR key ,
d305 2
a306 2
.IR data .
.IP
d309 3
a311 3
.IR del ,
.IR get ,
.IR put ,
d313 1
a313 1
.I sync
d318 1
a318 1
.IP
d320 1
a320 1
.B must
d322 2
a323 3
.RS
.TP
R_CURSOR
d326 1
a326 1
.I get
d333 1
a333 2
.TP
R_FIRST
d336 1
a336 2
.TP
R_LAST
d340 1
a340 2
.TP
R_NEXT
d343 1
a343 2
.TP
R_PREV
d347 2
a348 2
.RE
.IP
d352 2
a353 2
.IP
.I Seq
d355 1
a355 1
.IR errno ),
d361 1
a361 1
.I seq
d363 1
a363 2
.TP
sync
d366 1
a366 1
.I sync
d368 1
a368 1
.IP
d370 2
a371 3
.RS
.TP
R_RECNOSYNC
d376 1
a376 1
.I bfname
d378 1
a378 1
.IR recno (3)
d380 3
a382 3
.RE
.IP
.I Sync
d384 1
a384 1
.IR errno )
d386 1
a386 1
.SH "KEY/DATA PAIRS"
d389 3
a391 1
.PP
d393 3
a395 1
.RS
d397 1
a397 1
.br
d399 2
a400 1
.RE
d402 2
a403 1
.PP
d405 2
a406 2
.TP
data
d408 1
a408 2
.TP
size
d410 2
a411 1
.PP
d417 1
a417 1
.SH ERRORS
d419 1
a419 1
.I dbopen
d421 1
a421 1
.I errno
d423 1
a423 1
.IR open (2)
d425 1
a425 1
.IR malloc (3)
d427 2
a428 2
.TP
[EFTYPE]
d430 1
a430 2
.TP
[EINVAL]
d436 2
a437 1
.PP
d439 1
a439 1
.I close
d441 1
a441 1
.I errno
d443 4
a446 4
.IR close (2),
.IR read (2),
.IR write (2),
.IR free (3),
d448 2
a449 2
.IR fsync (2).
.PP
d451 3
a453 3
.IR del ,
.IR get ,
.I put
d455 1
a455 1
.I seq
d457 1
a457 1
.I errno
d459 3
a461 3
.IR read (2),
.IR write (2),
.IR free (3)
d463 2
a464 2
.IR malloc (3).
.PP
d466 1
a466 1
.I fd
d468 1
a468 1
.I errno
d470 1
a470 1
.PP
d472 1
a472 1
.I sync
d474 1
a474 1
.I errno
d476 15
a490 10
.IR fsync (2).
.SH "SEE ALSO"
.IR btree (3),
.IR hash (3),
.IR mpool (3),
.IR recno (3)
.sp
.IR "LIBTP: Portable, Modular Transactions for UNIX" ,
Margo Seltzer, Michael Olson, USENIX proceedings, Winter 1992.
.SH BUGS
d493 1
a493 1
.PP
d496 1
a496 1
.PP
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
