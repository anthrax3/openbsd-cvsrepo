head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2017.03.17.14.53.08;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	bQ84PWVgZi7suGTT;

1.6
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.5;
commitid	lTMF8Y3C9fQGd6jQ;

1.5
date	2015.02.05.12.59.57;	author millert;	state Exp;
branches;
next	1.4;
commitid	DTQbfd4poqBW8iSJ;

1.4
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	0DYulI8hhujBHMcR;

1.3
date	2013.04.03.03.11.53;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.27.15.06.25;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.01.17.41.13;	author mpi;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Use recallocarray() to avoid leaving detritus in memory when resizing
buffers.  We don't bother doing this for objects containing pointers,
but focus on controllable data.
ok millert
@
text
@/*	$OpenBSD: open_memstream.c,v 1.6 2015/08/31 02:53:57 guenther Exp $	*/

/*
 * Copyright (c) 2011 Martin Pieuchot <mpi@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <errno.h>
#include <fcntl.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "local.h"

#define	MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

struct state {
	char		 *string;	/* actual stream */
	char		**pbuf;		/* point to the stream */
	size_t		 *psize;	/* point to min(pos, len) */
	size_t		  pos;		/* current position */
	size_t		  size;		/* number of allocated char */
	size_t		  len;		/* length of the data */
};

static int
memstream_write(void *v, const char *b, int l)
{
	struct state	*st = v;
	char		*p;
	size_t		 i, end;

	end = (st->pos + l);

	if (end >= st->size) {
		/* 1.6 is (very) close to the golden ratio. */
		size_t	sz = st->size * 8 / 5;

		if (sz < end + 1)
			sz = end + 1;
		p = recallocarray(st->string, st->size, sz, 1);
		if (!p)
			return (-1);
		bzero(p + st->size, sz - st->size);
		*st->pbuf = st->string = p;
		st->size = sz;
	}

	for (i = 0; i < l; i++)
		st->string[st->pos + i] = b[i];
	st->pos += l;

	if (st->pos > st->len) {
		st->len = st->pos;
		st->string[st->len] = '\0';
	}

	*st->psize = st->pos;

	return (i);
}

static fpos_t
memstream_seek(void *v, fpos_t off, int whence)
{
	struct state	*st = v;
	ssize_t		 base = 0;

	switch (whence) {
	case SEEK_SET:
		break;
	case SEEK_CUR:
		base = st->pos;
		break;
	case SEEK_END:
		base = st->len;
		break;
	}

	if (off > SIZE_MAX - base || off < -base) {
		errno = EOVERFLOW;
		return (-1);
	}

	st->pos = base + off;
	*st->psize = MINIMUM(st->pos, st->len);

	return (st->pos);
}

static int
memstream_close(void *v)
{
	struct state	*st = v;

	free(st);

	return (0);
}

FILE *
open_memstream(char **pbuf, size_t *psize)
{
	struct state	*st;
	FILE		*fp;

	if (pbuf == NULL || psize == NULL) {
		errno = EINVAL;
		return (NULL);
	}

	if ((st = malloc(sizeof(*st))) == NULL)
		return (NULL);

	if ((fp = __sfp()) == NULL) {
		free(st);
		return (NULL);
	}

	st->size = BUFSIZ;
	if ((st->string = calloc(1, st->size)) == NULL) {
		free(st);
		fp->_flags = 0;
		return (NULL);
	}

	*st->string = '\0';
	st->pos = 0;
	st->len = 0;
	st->pbuf = pbuf;
	st->psize = psize;

	*pbuf = st->string;
	*psize = st->len;

	fp->_flags = __SWR;
	fp->_file = -1;
	fp->_cookie = st;
	fp->_read = NULL;
	fp->_write = memstream_write;
	fp->_seek = memstream_seek;
	fp->_close = memstream_close;
	_SET_ORIENTATION(fp, -1);

	return (fp);
}
DEF_WEAK(open_memstream);
@


1.6
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: open_memstream.c,v 1.5 2015/02/05 12:59:57 millert Exp $	*/
d53 1
a53 1
		p = realloc(st->string, sz);
@


1.5
log
@Include stdint.h, not limits.h to get SIZE_MAX.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: open_memstream.c,v 1.4 2015/01/16 16:48:51 deraadt Exp $	*/
d159 1
@


1.4
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: open_memstream.c,v 1.3 2013/04/03 03:11:53 guenther Exp $	*/
d21 1
a21 1
#include <limits.h>
@


1.3
log
@Set the stream orientation in open_{,w}memstream().
Check it in the regress test

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: open_memstream.c,v 1.2 2013/03/27 15:06:25 mpi Exp $	*/
a18 2
#include <sys/param.h>

d27 2
d98 1
a98 1
	*st->psize = MIN(st->pos, st->len);
@


1.2
log
@Add an open_wmemstream(3) implementation and fix various issues for
fmemopen(3) and open_memstream(3).

With inputs from millert@@, stsp@@, guenther@@, tedu@@ and matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: open_memstream.c,v 1.1 2013/01/01 17:41:13 mpi Exp $	*/
d155 1
@


1.1
log
@Add an implementation based on tedu@@'s design of fmemopen(3) and
open_memstream(3) so they can be polished in-tree.

One of the manpages comes from NetBSD with some tweaks.

Prodded by espie@@, krw@@, guenther@@
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d19 2
d23 1
d34 1
a34 1
	size_t		  size;		/* allocated size */
a41 1
	int		 i;
d43 1
d45 3
a47 1
	if (st->pos + l >= st->size) {
d51 2
a52 2
		if (sz < st->pos + l + 1)
			sz = st->pos + l + 1;
d63 1
a63 1
	st->pos += i;
d76 1
a76 1
memstream_seek(void *v, fpos_t pos, int w)
d79 1
a79 1
	char		*p;
d81 1
a81 1
	switch (w) {
d85 1
a85 1
		pos += st->pos;
d88 1
a88 1
		pos += st->len;
a89 3
	default:
		errno = EINVAL;
		return (-1);
d92 2
a93 1
	if (pos < 0)
d95 1
d97 2
a98 6
	st->pos = pos;

	if (st->pos < st->len)
		*st->psize = st->pos;
	else
		*st->psize = st->len;
d100 1
a100 1
	return (pos);
a106 5
	char		*p;
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

	*st->psize = MIN(st->pos, st->len);
	*st->pbuf = st->string;
a110 1
#undef MIN
d132 1
a132 5
	if (*psize < 128)
		st->size = 128;
	else
		st->size = *psize;

@

