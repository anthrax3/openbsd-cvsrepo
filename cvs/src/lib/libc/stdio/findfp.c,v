head	1.19;
access;
symbols
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.6
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.9.0.20
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.04.05.04.29.21;	author guenther;	state Exp;
branches;
next	1.18;
commitid	INw7kjfUlnrMbBig;

1.18
date	2015.08.27.04.37.09;	author guenther;	state Exp;
branches;
next	1.17;
commitid	khkC09EAAnI0S1Zu;

1.17
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	0DYulI8hhujBHMcR;

1.16
date	2014.11.19.04.19.56;	author guenther;	state Exp;
branches;
next	1.15;
commitid	eHLAKtkr7c0Np1Sx;

1.15
date	2013.12.17.16.33.27;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2013.11.13.15.52.48;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2013.11.12.07.04.06;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.11.09.00.18.27;	author kurt;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.22.01.23.16;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.21.16.04.23;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.08.08.05.36;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.02.08.59.47;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.17.20.40.32;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.30.09.25.17;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.28.18.12.44;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.20.18.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.14.22.03.14;	author dhartmei;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.32.36;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Prefer _MUTEX_*LOCK over _THREAD_PRIVATE_MUTEX_*LOCK() when thread-specific
data isn't necessary.

ok mpi@@, ok&tweak natano@@
@
text
@/*	$OpenBSD: findfp.c,v 1.18 2015/08/27 04:37:09 guenther Exp $ */
/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* ALIGN */
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include "local.h"
#include "glue.h"
#include "thread_private.h"

int	__sdidinit;

#define	NDYNAMIC 10		/* add ten more whenever necessary */

#define	std(flags, file) \
	{0,0,0,flags,file,{0},0,__sF+file,__sclose,__sread,__sseek,__swrite, \
	 {(unsigned char *)(__sFext+file), 0}}
/*	 p r w flags file _bf z  cookie      close    read    seek    write 
	 ext */

				/* the usual - (stdin + stdout + stderr) */
static FILE usual[FOPEN_MAX - 3];
static struct __sfileext usualext[FOPEN_MAX - 3];
static struct glue uglue = { 0, FOPEN_MAX - 3, usual };
static struct glue *lastglue = &uglue;
static void *sfp_mutex;

static struct __sfileext __sFext[3];
FILE __sF[3] = {
	std(__SRD, STDIN_FILENO),		/* stdin */
	std(__SWR, STDOUT_FILENO),		/* stdout */
	std(__SWR|__SNBF, STDERR_FILENO)	/* stderr */
};
struct glue __sglue = { &uglue, 3, __sF };

static struct glue *
moreglue(int n)
{
	struct glue *g;
	FILE *p;
	struct __sfileext *pext;
	static FILE empty;
	char *data;

	data = malloc(sizeof(*g) + ALIGNBYTES + n * sizeof(FILE)
	    + n * sizeof(struct __sfileext));
	if (data == NULL)
		return (NULL);
	g = (struct glue *)data;
	p = (FILE *)ALIGN(data + sizeof(*g));
	pext = (struct __sfileext *)
	    (ALIGN(data + sizeof(*g)) + n * sizeof(FILE));
	g->next = NULL;
	g->niobs = n;
	g->iobs = p;
	while (--n >= 0) {
		*p = empty;
		_FILEEXT_SETUP(p, pext);
		p++;
		pext++;
	}
	return (g);
}

/*
 * Find a free FILE for fopen et al.
 */
FILE *
__sfp(void)
{
	FILE *fp;
	int n;
	struct glue *g;

	if (!__sdidinit)
		__sinit();

	_MUTEX_LOCK(&sfp_mutex);
	for (g = &__sglue; g != NULL; g = g->next) {
		for (fp = g->iobs, n = g->niobs; --n >= 0; fp++)
			if (fp->_flags == 0)
				goto found;
	}

	/* release lock while mallocing */
	_MUTEX_UNLOCK(&sfp_mutex);
	if ((g = moreglue(NDYNAMIC)) == NULL)
		return (NULL);
	_MUTEX_LOCK(&sfp_mutex);
	lastglue->next = g;
	lastglue = g;
	fp = g->iobs;
found:
	fp->_flags = 1;		/* reserve this slot; caller sets real flags */
	_MUTEX_UNLOCK(&sfp_mutex);
	fp->_p = NULL;		/* no current pointer */
	fp->_w = 0;		/* nothing to read or write */
	fp->_r = 0;
	fp->_bf._base = NULL;	/* no buffer */
	fp->_bf._size = 0;
	fp->_lbfsize = 0;	/* not line buffered */
	fp->_file = -1;		/* no file */
/*	fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
	fp->_lb._base = NULL;	/* no line buffer */
	fp->_lb._size = 0;
	_FILEEXT_INIT(fp);
	return (fp);
}

/*
 * exit() calls _cleanup() through the callback registered
 * with __atexit_register_cleanup(), set whenever we open or buffer a
 * file. This chicanery is done so that programs that do not use stdio
 * need not link it all in.
 *
 * The name `_cleanup' is, alas, fairly well known outside stdio.
 */
void
_cleanup(void)
{
	/* (void) _fwalk(fclose); */
	(void) _fwalk(__sflush);		/* `cheating' */
}

/*
 * __sinit() is called whenever stdio's internal variables must be set up.
 */
void
__sinit(void)
{
	static void *sinit_mutex;
	int i;

	_MUTEX_LOCK(&sinit_mutex);
	if (__sdidinit)
		goto out;	/* bail out if caller lost the race */
	for (i = 0; i < FOPEN_MAX - 3; i++) {
		_FILEEXT_SETUP(usual+i, usualext+i);
	}
	/* make sure we clean up on exit */
	__atexit_register_cleanup(_cleanup); /* conservative */
	__sdidinit = 1;
out: 
	_MUTEX_UNLOCK(&sinit_mutex);
}
@


1.18
log
@Use static and __{BEGIN,ENV}_HIDDEN_DECLS to hide a bunch of internal
symbols that are not longer exported.  (This improves the generated code.)

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: findfp.c,v 1.17 2015/01/16 16:48:51 deraadt Exp $ */
d59 1
a59 1
_THREAD_PRIVATE_MUTEX(__sfp_mutex);
d111 1
a111 1
	_THREAD_PRIVATE_MUTEX_LOCK(__sfp_mutex);
d119 1
a119 1
	_THREAD_PRIVATE_MUTEX_UNLOCK(__sfp_mutex);
d122 1
a122 1
	_THREAD_PRIVATE_MUTEX_LOCK(__sfp_mutex);
d128 1
a128 1
	_THREAD_PRIVATE_MUTEX_UNLOCK(__sfp_mutex);
d164 1
a164 1
	_THREAD_PRIVATE_MUTEX(__sinit_mutex);
d167 1
a167 1
	_THREAD_PRIVATE_MUTEX_LOCK(__sinit_mutex);
d177 1
a177 1
	_THREAD_PRIVATE_MUTEX_UNLOCK(__sinit_mutex);
@


1.17
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: findfp.c,v 1.16 2014/11/19 04:19:56 guenther Exp $ */
d61 1
a61 1
struct __sfileext __sFext[3];
@


1.16
log
@abort() doesn't call atexit handlers any more
@
text
@d1 1
a1 1
/*	$OpenBSD: findfp.c,v 1.15 2013/12/17 16:33:27 deraadt Exp $ */
d34 1
a34 1
#include <sys/param.h>
@


1.15
log
@f_prealloc() goes away.  Comment from the original source file:
* XXX.  Force immediate allocation of internal memory.  Not used by stdio,
* but documented historically for certain applications.  Bad applications.
@
text
@d1 1
a1 1
/*	$OpenBSD: findfp.c,v 1.14 2013/11/13 15:52:48 deraadt Exp $ */
d144 1
a144 1
 * exit() and abort() call _cleanup() through the callback registered
@


1.14
log
@oops should not be static
@
text
@d1 1
a1 1
/*	$OpenBSD: findfp.c,v 1.13 2013/11/12 07:04:06 deraadt Exp $ */
a140 23
}

#define getdtablesize()	sysconf(_SC_OPEN_MAX)

/*
 * XXX.  Force immediate allocation of internal memory.  Not used by stdio,
 * but documented historically for certain applications.  Bad applications.
 */
void
f_prealloc(void)
{
	struct glue *g;
	int n;

	n = getdtablesize() - FOPEN_MAX + 20;		/* 20 for slop. */
	for (g = &__sglue; (n -= g->niobs) > 0 && g->next; g = g->next)
		/* void */;
	if (n > 0 && ((g = moreglue(n)) != NULL)) {
		_THREAD_PRIVATE_MUTEX_LOCK(__sfp_mutex);
		lastglue->next = g;
		lastglue = g;
		_THREAD_PRIVATE_MUTEX_UNLOCK(__sfp_mutex);
	}
@


1.13
log
@both files contain a function which should only be static.
not cranking libc over this (unless an issue is found in ports)
@
text
@d1 1
a1 1
/*	$OpenBSD: findfp.c,v 1.12 2009/11/09 00:18:27 kurt Exp $ */
d149 1
a149 1
static void
@


1.12
log
@Fix the handle locking in stdio to use flockfile/funlockfile
internally when and where required.  Macros in <stdio.h> are updated
to automatically call the underlying functions when the process is
threaded to obtain the necessary locking.  A private mutex is added
to protect __sglue, the internal list of FILE handles, and another
to protect the one-time initialization.  Some routines in libc that
use getc() change to use getc_unlocked() as they're either protected
by their own lock or aren't thread-safe routines anyway.

committing on behalf of and okay guenther@@ now that we have install
media space available.
@
text
@d1 1
a1 1
/*	$OpenBSD: findfp.c,v 1.11 2009/10/22 01:23:16 guenther Exp $ */
d149 1
a149 1
void
@


1.11
log
@Back out previous commit, as it caused too much growth for the install
media to fit
@
text
@d1 1
a1 1
/*	$OpenBSD: findfp.c,v 1.10 2009/10/21 16:04:23 guenther Exp $ */
d42 1
d58 2
d110 3
a112 1
	for (g = &__sglue;; g = g->next) {
a115 2
		if (g->next == NULL && (g->next = moreglue(NDYNAMIC)) == NULL)
			break;
d117 9
a125 1
	return (NULL);
d128 1
d158 6
a163 2
	if (n > 0)
		g->next = moreglue(n);
d187 1
d190 3
d199 2
@


1.10
log
@Fix the handle locking in stdio to use flockfile/funlockfile
internally when and where required.  Macros in <stdio.h> are updated
to automatically call the underlying functions when the process is
threaded to obtain the necessary locking.  A private mutex is added
to protect __sglue, the internal list of FILE handles, and another
to protect the one-time initialization.  Some routines in libc that
use getc() change to use getc_unlocked() as they're either protected
by their own lock or aren't thread-safe routines anyway.

ok kurt@@, earlier version tested by sthen@@ and jj@@
@
text
@d1 1
a1 1
/*	$OpenBSD: findfp.c,v 1.9 2005/08/08 08:05:36 espie Exp $ */
a41 1
#include "thread_private.h"
a56 2
static struct glue *lastglue = &uglue;
_THREAD_PRIVATE_MUTEX(__sfp_mutex);
d107 1
a107 3

	_THREAD_PRIVATE_MUTEX_LOCK(__sfp_mutex);
	for (g = &__sglue; g != NULL; g = g->next) {
d111 2
d114 1
a114 9

	/* release lock while mallocing */
	_THREAD_PRIVATE_MUTEX_UNLOCK(__sfp_mutex);
	if ((g = moreglue(NDYNAMIC)) == NULL)
		return (NULL);
	_THREAD_PRIVATE_MUTEX_LOCK(__sfp_mutex);
	lastglue->next = g;
	lastglue = g;
	fp = g->iobs;
a116 1
	_THREAD_PRIVATE_MUTEX_UNLOCK(__sfp_mutex);
d146 2
a147 6
	if (n > 0 && ((g = moreglue(n)) != NULL)) {
		_THREAD_PRIVATE_MUTEX_LOCK(__sfp_mutex);
		lastglue->next = g;
		lastglue = g;
		_THREAD_PRIVATE_MUTEX_UNLOCK(__sfp_mutex);
	}
a170 1
	_THREAD_PRIVATE_MUTEX(__sinit_mutex);
a172 3
	_THREAD_PRIVATE_MUTEX_LOCK(__sinit_mutex);
	if (__sdidinit)
		goto out;	/* bail out if caller lost the race */
a178 2
out: 
	_THREAD_PRIVATE_MUTEX_UNLOCK(__sinit_mutex);
@


1.9
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d42 1
d58 2
d110 3
a112 1
	for (g = &__sglue;; g = g->next) {
a115 2
		if (g->next == NULL && (g->next = moreglue(NDYNAMIC)) == NULL)
			break;
d117 9
a125 1
	return (NULL);
d128 1
d158 6
a163 2
	if (n > 0)
		g->next = moreglue(n);
d187 1
d190 3
d199 2
@


1.8
log
@zap getdtablesize() external ref (removes a bit of compat from instbin).
okay millert@@
@
text
@d1 1
a32 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: findfp.c,v 1.7 2005/06/17 20:40:32 espie Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.7
log
@
next citrus step.

reviewed by millert, otto, kevlo, naddy, kettenis...
libc+libstdc++ bump
@
text
@d34 1
a34 1
static char rcsid[] = "$OpenBSD: findfp.c,v 1.6 2005/04/30 09:25:17 espie Exp $";
d133 2
@


1.6
log
@Change internals of FILE: reuse the unget buffer field to access an
extended attribute data structure (pimpl idiom). Idea taken from citrus.
Much discussion with deraadt@@, otto@@, millert@@...

This is the least disruptive way to extend FILE, since its size can't really
change without this being a flag day. So the size doesn't change.

Actual additions to the structure will come in separate steps, since this
change is nasty enough on its own.

Tests by otto@@ and others, careful reading of code by otto@@ and millert@@.

This is definitely a major bump, and has been checked to not impact a
full ports build.
@
text
@d34 1
a34 1
static char rcsid[] = "$OpenBSD: findfp.c,v 1.5 2004/09/28 18:12:44 otto Exp $";
a127 2
	_UB(fp)._base = NULL;	/* no ungetc buffer */
	_UB(fp)._size = 0;
d130 1
d174 1
a174 1
	for (i = 0; i < FOPEN_MAX - 3; i++)
d176 1
@


1.5
log
@deregister + ansify, no change in object code. ok deraadt@@ millert@@
@
text
@d34 1
a34 1
static char rcsid[] = "$OpenBSD: findfp.c,v 1.4 2003/06/02 20:18:37 millert Exp $";
d51 4
a54 2
	{0,0,0,flags,file,{0},0,__sF+file,__sclose,__sread,__sseek,__swrite}
/*	 p r w flags file _bf z  cookie      close    read    seek    write */
d58 1
d61 1
d74 1
d76 1
d78 3
a80 2
	g = (struct glue *)malloc(sizeof(*g) + ALIGNBYTES + n * sizeof(FILE));
	if (g == NULL)
d82 4
a85 1
	p = (FILE *)ALIGN(g + 1);
d89 6
a94 2
	while (--n >= 0)
		*p++ = empty;
d128 2
a129 2
	fp->_ub._base = NULL;	/* no ungetc buffer */
	fp->_ub._size = 0;
d173 4
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d34 1
a34 1
static char rcsid[] = "$OpenBSD: findfp.c,v 1.3 2002/09/14 22:03:14 dhartmei Exp $";
d66 1
a66 2
moreglue(n)
	register int n;
d68 2
a69 2
	register struct glue *g;
	register FILE *p;
d88 1
a88 1
__sfp()
d90 3
a92 3
	register FILE *fp;
	register int n;
	register struct glue *g;
d126 1
a126 1
f_prealloc()
d128 1
a128 1
	register struct glue *g;
d147 1
a147 1
_cleanup()
d157 1
a157 1
__sinit()
@


1.3
log
@Move __cleanup into mprotect'ed page to prevent unintentional modifications
similar to the atexit handlers. Idea and help deraadt@@, ok deraadt@@
@
text
@d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d34 1
a34 1
static char rcsid[] = "$OpenBSD: findfp.c,v 1.2 1996/08/19 08:32:36 tholo Exp $";
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: findfp.c,v 1.6 1995/02/02 02:09:17 jtc Exp $";
d144 4
a147 3
 * exit() calls _cleanup() through *__cleanup, set whenever we
 * open or buffer a file.  This chicanery is done so that programs
 * that do not use stdio need not link it all in.
d165 1
a165 1
	__cleanup = _cleanup;		/* conservative */
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: findfp.c,v 1.6 1995/02/02 02:09:17 jtc Exp $	*/

d38 1
a38 4
#if 0
static char sccsid[] = "@@(#)findfp.c	8.2 (Berkeley) 1/4/94";
#endif
static char rcsid[] = "$NetBSD: findfp.c,v 1.6 1995/02/02 02:09:17 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
