head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.12
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.14
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.10
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.32
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.30
	OPENBSD_5_0:1.7.0.28
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.26
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.24
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.20
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.12
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.10
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.8
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.8;
commitid	d9R7VGw9CHTkwXE1;

1.8
date	2012.09.01.01.08.16;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.28.18.12.44;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.07.21.11.23;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.04.22.17.45;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.30.17.47.57;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.30.07.38.27;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.06.08.26.04;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.11.20.11.18.48;	author d;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@/*	$OpenBSD: flockfile.c,v 1.8 2012/09/01 01:08:16 fgsch Exp $	*/

#include <stdio.h>
#include "local.h"

void
flockfile(FILE *fp)
{
	FLOCKFILE(fp);
}
DEF_WEAK(flockfile);


int
ftrylockfile(FILE *fp)
{
	if (_thread_cb.tc_ftrylockfile != NULL)
		return (_thread_cb.tc_ftrylockfile(fp));

	return 0;
}
DEF_WEAK(ftrylockfile);

void
funlockfile(FILE *fp)
{
	FUNLOCKFILE(fp);
}
DEF_WEAK(funlockfile);
@


1.8
log
@sync comment with reality.
@
text
@d1 1
a1 1
/*	$OpenBSD: flockfile.c,v 1.7 2004/09/28 18:12:44 otto Exp $	*/
a2 1
#include <sys/time.h>
d4 1
a4 19
#include "thread_private.h"

/*
 * Subroutine versions of the macros in <stdio.h>
 * Note that these are all no-ops because libc does not do threads.
 * Strong implementation of file locking in librthread/rthread_file.c
 */

#undef flockfile
#undef ftrylockfile
#undef funlockfile

WEAK_PROTOTYPE(flockfile);
WEAK_PROTOTYPE(ftrylockfile);
WEAK_PROTOTYPE(funlockfile);

WEAK_ALIAS(flockfile);
WEAK_ALIAS(ftrylockfile);
WEAK_ALIAS(funlockfile);
d7 1
a7 1
WEAK_NAME(flockfile)(FILE * fp)
d9 1
d11 1
d15 1
a15 1
WEAK_NAME(ftrylockfile)(FILE *fp)
d17 2
d22 1
d25 1
a25 1
WEAK_NAME(funlockfile)(FILE * fp)
d27 1
d29 1
@


1.7
log
@deregister + ansify, no change in object code. ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: flockfile.c,v 1.6 2004/06/07 21:11:23 marc Exp $	*/
d10 1
a10 1
 * Strong implementation of file locking in libc_r/uthread/uthread_file.c
@


1.6
log
@
major bump to libc and libpthread to break the dependency of a
particular implementation of libpthread for libc.  libc no longer
needs pthread.h to compile.
OK millert@@, brad@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: flockfile.c,v 1.5 2001/09/04 22:17:45 fgsch Exp $	*/
d26 1
a26 2
WEAK_NAME(flockfile)(fp)
	FILE * fp;
d32 1
a32 2
WEAK_NAME(ftrylockfile)(fp)
	FILE * fp;
d39 1
a39 2
WEAK_NAME(funlockfile)(fp)
	FILE * fp;
@


1.5
log
@put changes back, this time ALL the files.
@
text
@d1 1
a1 1
/*	$OpenBSD: flockfile.c,v 1.4 2001/08/30 17:47:57 todd Exp $	*/
d3 1
a15 1
#undef _flockfile_debug
a19 1
WEAK_PROTOTYPE(_flockfile_debug);
a23 1
WEAK_ALIAS(_flockfile_debug);
a44 9

void
WEAK_NAME(_flockfile_debug)(fp, fname, lineno)
	FILE * fp;
	char * fname;
	int lineno;
{
}

@


1.4
log
@Back out fgsch@@'s tree breaking commits.
Test next time, ok?
@
text
@d1 1
a1 1
/*	$OpenBSD: flockfile.c,v 1.3 2001/08/30 07:38:27 fgsch Exp $	*/
d51 1
a51 1
	const char * fname;
@


1.3
log
@fix some const warnings
@
text
@d1 1
a1 1
/*	$OpenBSD: flockfile.c,v 1.2 2000/01/06 08:26:04 d Exp $	*/
d51 1
a51 1
	char * fname;
@


1.2
log
@use WEAK_* macros
@
text
@d1 1
a1 1
/*	$OpenBSD: flockfile.c,v 1.1 1998/11/20 11:18:48 d Exp $	*/
d51 1
a51 1
	const char * fname;
@


1.1
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a5 2
#ifndef _THREAD_SAFE

d9 1
d17 10
d28 1
a28 1
flockfile(fp)
d33 1
d35 1
a35 1
ftrylockfile(fp)
d38 1
d43 1
a43 1
funlockfile(fp)
d49 1
a49 1
_flockfile_debug(fp, fname, lineno)
a55 5
#else /* _THREAD_SAFE */

/* Actual implementation of file locking in libc_r/uthread/uthread_file.c */

#endif /* _THREAD_SAFE */
@

