head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.6
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.10
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.2.0.20
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.7;
commitid	lTMF8Y3C9fQGd6jQ;

1.7
date	2013.11.12.07.04.35;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2013.04.17.17.40.35;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.09.00.18.27;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.22.01.23.16;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.21.16.04.23;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.08.08.05.36;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.20.40.32;	author espie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@/*	$OpenBSD: fputws.c,v 1.7 2013/11/12 07:04:35 deraadt Exp $	*/
/* $NetBSD: fputws.c,v 1.1 2003/03/07 07:11:37 tshiozak Exp $ */

/*-
 * Copyright (c) 2002 Tim J. Robbins.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * Original version ID:
 * FreeBSD: src/lib/libc/stdio/fputws.c,v 1.4 2002/09/20 13:25:40 tjr Exp
 */

#include <errno.h>
#include <stdio.h>
#include <wchar.h>
#include "local.h"
#include "fvwrite.h"

int
fputws(ws, fp)
	const wchar_t * __restrict ws;
	FILE * __restrict fp;
{
	FLOCKFILE(fp);
	_SET_ORIENTATION(fp, 1);

	while (*ws != '\0') {
		if (__fputwc_unlock(*ws++, fp) == WEOF) {
			FUNLOCKFILE(fp);
			return (-1);
		}
	}

	FUNLOCKFILE(fp);

	return (0);
}
DEF_STRONG(fputws);
@


1.7
log
@a __fputwc_unlock() prototype was available in fvwrite.h, so use that
@
text
@d1 1
a1 1
/*	$OpenBSD: fputws.c,v 1.6 2013/04/17 17:40:35 tedu Exp $	*/
d58 1
@


1.6
log
@add some prototypes, casts, includes, parenthesis, and whatnot to
silence some warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: fputws.c,v 1.5 2009/11/09 00:18:27 kurt Exp $	*/
d37 1
a37 2

wint_t __fputwc_unlock(wchar_t wc, FILE *fp);
@


1.5
log
@Fix the handle locking in stdio to use flockfile/funlockfile
internally when and where required.  Macros in <stdio.h> are updated
to automatically call the underlying functions when the process is
threaded to obtain the necessary locking.  A private mutex is added
to protect __sglue, the internal list of FILE handles, and another
to protect the one-time initialization.  Some routines in libc that
use getc() change to use getc_unlocked() as they're either protected
by their own lock or aren't thread-safe routines anyway.

committing on behalf of and okay guenther@@ now that we have install
media space available.
@
text
@d1 1
a1 1
/*	$OpenBSD: fputws.c,v 1.4 2009/10/22 01:23:16 guenther Exp $	*/
d37 2
@


1.4
log
@Back out previous commit, as it caused too much growth for the install
media to fit
@
text
@d1 1
a1 1
/*	$OpenBSD: fputws.c,v 1.3 2009/10/21 16:04:23 guenther Exp $	*/
d43 1
a43 1
	flockfile(fp);
d48 1
a48 1
			funlockfile(fp);
d53 1
a53 1
	funlockfile(fp);
@


1.3
log
@Fix the handle locking in stdio to use flockfile/funlockfile
internally when and where required.  Macros in <stdio.h> are updated
to automatically call the underlying functions when the process is
threaded to obtain the necessary locking.  A private mutex is added
to protect __sglue, the internal list of FILE handles, and another
to protect the one-time initialization.  Some routines in libc that
use getc() change to use getc_unlocked() as they're either protected
by their own lock or aren't thread-safe routines anyway.

ok kurt@@, earlier version tested by sthen@@ and jj@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fputws.c,v 1.2 2005/08/08 08:05:36 espie Exp $	*/
d43 1
a43 1
	FLOCKFILE(fp);
d48 1
a48 1
			FUNLOCKFILE(fp);
d53 1
a53 1
	FUNLOCKFILE(fp);
@


1.2
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: fputws.c,v 1.1 2005/06/17 20:40:32 espie Exp $	*/
d43 1
a43 1
	flockfile(fp);
d48 1
a48 1
			funlockfile(fp);
d53 1
a53 1
	funlockfile(fp);
@


1.1
log
@
next citrus step.

reviewed by millert, otto, kevlo, naddy, kettenis...
libc+libstdc++ bump
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a31 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD$";
#endif /* LIBC_SCCS and not lint */
@

