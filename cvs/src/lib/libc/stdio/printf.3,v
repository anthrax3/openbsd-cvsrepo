head	1.75;
access;
symbols
	OPENBSD_6_0:1.75.0.2
	OPENBSD_6_0_BASE:1.75
	OPENBSD_5_9:1.74.0.2
	OPENBSD_5_9_BASE:1.74
	OPENBSD_5_8:1.73.0.4
	OPENBSD_5_8_BASE:1.73
	OPENBSD_5_7:1.72.0.2
	OPENBSD_5_7_BASE:1.72
	OPENBSD_5_6:1.69.0.4
	OPENBSD_5_6_BASE:1.69
	OPENBSD_5_5:1.64.0.6
	OPENBSD_5_5_BASE:1.64
	OPENBSD_5_4:1.64.0.2
	OPENBSD_5_4_BASE:1.64
	OPENBSD_5_3:1.60.0.2
	OPENBSD_5_3_BASE:1.60
	OPENBSD_5_2:1.59.0.4
	OPENBSD_5_2_BASE:1.59
	OPENBSD_5_1_BASE:1.59
	OPENBSD_5_1:1.59.0.2
	OPENBSD_5_0:1.58.0.6
	OPENBSD_5_0_BASE:1.58
	OPENBSD_4_9:1.58.0.4
	OPENBSD_4_9_BASE:1.58
	OPENBSD_4_8:1.58.0.2
	OPENBSD_4_8_BASE:1.58
	OPENBSD_4_7:1.57.0.4
	OPENBSD_4_7_BASE:1.57
	OPENBSD_4_6:1.57.0.6
	OPENBSD_4_6_BASE:1.57
	OPENBSD_4_5:1.57.0.2
	OPENBSD_4_5_BASE:1.57
	OPENBSD_4_4:1.54.0.6
	OPENBSD_4_4_BASE:1.54
	OPENBSD_4_3:1.54.0.4
	OPENBSD_4_3_BASE:1.54
	OPENBSD_4_2:1.54.0.2
	OPENBSD_4_2_BASE:1.54
	OPENBSD_4_1:1.52.0.6
	OPENBSD_4_1_BASE:1.52
	OPENBSD_4_0:1.52.0.4
	OPENBSD_4_0_BASE:1.52
	OPENBSD_3_9:1.52.0.2
	OPENBSD_3_9_BASE:1.52
	OPENBSD_3_8:1.49.0.2
	OPENBSD_3_8_BASE:1.49
	OPENBSD_3_7:1.45.0.2
	OPENBSD_3_7_BASE:1.45
	OPENBSD_3_6:1.43.0.6
	OPENBSD_3_6_BASE:1.43
	OPENBSD_3_5:1.43.0.4
	OPENBSD_3_5_BASE:1.43
	OPENBSD_3_4:1.43.0.2
	OPENBSD_3_4_BASE:1.43
	OPENBSD_3_3:1.38.0.4
	OPENBSD_3_3_BASE:1.38
	OPENBSD_3_2:1.38.0.2
	OPENBSD_3_2_BASE:1.38
	OPENBSD_3_1:1.36.0.4
	OPENBSD_3_1_BASE:1.36
	OPENBSD_3_0:1.36.0.2
	OPENBSD_3_0_BASE:1.36
	OPENBSD_2_9:1.33.0.2
	OPENBSD_2_9_BASE:1.33
	OPENBSD_2_8:1.31.0.2
	OPENBSD_2_8_BASE:1.31
	OPENBSD_2_7:1.27.0.2
	OPENBSD_2_7_BASE:1.27
	OPENBSD_2_6:1.21.0.2
	OPENBSD_2_6_BASE:1.21
	OPENBSD_2_5:1.15.0.2
	OPENBSD_2_5_BASE:1.15
	OPENBSD_2_4:1.13.0.2
	OPENBSD_2_4_BASE:1.13
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.75
date	2016.06.06.17.23.28;	author millert;	state Exp;
branches;
next	1.74;
commitid	h4oTMUFCSpQFy3S0;

1.74
date	2015.10.13.12.25.04;	author millert;	state Exp;
branches;
next	1.73;
commitid	tdEwrjZbw8adKUdl;

1.73
date	2015.06.03.16.26.04;	author millert;	state Exp;
branches;
next	1.72;
commitid	dsnkDL3am2kJH35x;

1.72
date	2015.02.28.21.51.57;	author bentley;	state Exp;
branches;
next	1.71;
commitid	NNu2UZnsd5zmNVYD;

1.71
date	2015.01.13.14.02.30;	author schwarze;	state Exp;
branches;
next	1.70;
commitid	vuDIxCTQQireD6ui;

1.70
date	2014.11.15.14.41.02;	author bentley;	state Exp;
branches;
next	1.69;
commitid	HuCemPIiOkto0SJD;

1.69
date	2014.05.13.20.51.00;	author jmc;	state Exp;
branches;
next	1.68;

1.68
date	2014.05.09.05.14.17;	author deraadt;	state Exp;
branches;
next	1.67;

1.67
date	2014.04.22.15.22.04;	author sobrado;	state Exp;
branches;
next	1.66;

1.66
date	2014.04.19.16.48.41;	author jmc;	state Exp;
branches;
next	1.65;

1.65
date	2014.04.19.11.21.15;	author deraadt;	state Exp;
branches;
next	1.64;

1.64
date	2013.07.17.05.42.11;	author schwarze;	state Exp;
branches;
next	1.63;

1.63
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.62;

1.62
date	2013.04.01.20.16.31;	author guenther;	state Exp;
branches;
next	1.61;

1.61
date	2013.03.04.01.50.01;	author brad;	state Exp;
branches;
next	1.60;

1.60
date	2013.01.30.00.08.13;	author brad;	state Exp;
branches;
next	1.59;

1.59
date	2011.09.03.22.59.07;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2010.03.26.19.30.41;	author jmc;	state Exp;
branches;
next	1.57;

1.57
date	2008.09.15.19.22.32;	author martynas;	state Exp;
branches;
next	1.56;

1.56
date	2008.09.14.11.44.54;	author martynas;	state Exp;
branches;
next	1.55;

1.55
date	2008.08.26.18.29.12;	author martynas;	state Exp;
branches;
next	1.54;

1.54
date	2007.05.31.19.19.31;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2007.04.01.18.45.16;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2006.01.13.17.56.18;	author millert;	state Exp;
branches;
next	1.51;

1.51
date	2006.01.07.16.49.59;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2005.09.23.02.33.34;	author tedu;	state Exp;
branches;
next	1.49;

1.49
date	2005.07.26.03.30.25;	author jaredy;	state Exp;
branches;
next	1.48;

1.48
date	2005.07.26.03.23.14;	author jaredy;	state Exp;
branches;
next	1.47;

1.47
date	2005.04.14.18.20.51;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2005.04.14.18.19.24;	author otto;	state Exp;
branches;
next	1.45;

1.45
date	2005.02.25.03.12.44;	author cloder;	state Exp;
branches;
next	1.44;

1.44
date	2004.09.18.19.28.06;	author otto;	state Exp;
branches;
next	1.43;

1.43
date	2003.08.17.17.08.09;	author grange;	state Exp;
branches;
next	1.42;

1.42
date	2003.07.15.10.05.36;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2003.06.02.20.18.37;	author millert;	state Exp;
branches;
next	1.40;

1.40
date	2003.05.03.19.08.21;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2003.04.16.23.17.10;	author millert;	state Exp;
branches;
next	1.38;

1.38
date	2002.07.24.22.58.39;	author millert;	state Exp;
branches;
next	1.37;

1.37
date	2002.05.01.08.03.29;	author mpech;	state Exp;
branches;
next	1.36;

1.36
date	2001.09.06.04.40.55;	author millert;	state Exp;
branches;
next	1.35;

1.35
date	2001.06.23.15.00.25;	author provos;	state Exp;
branches;
next	1.34;

1.34
date	2001.06.05.21.18.56;	author pjanzen;	state Exp;
branches;
next	1.33;

1.33
date	2001.02.17.17.15.27;	author pjanzen;	state Exp;
branches;
next	1.32;

1.32
date	2000.12.24.00.30.59;	author aaron;	state Exp;
branches;
next	1.31;

1.31
date	2000.08.25.17.43.15;	author aaron;	state Exp;
branches;
next	1.30;

1.30
date	2000.07.16.22.44.57;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	2000.07.07.00.09.10;	author aaron;	state Exp;
branches;
next	1.28;

1.28
date	2000.06.25.13.52.30;	author pjanzen;	state Exp;
branches;
next	1.27;

1.27
date	2000.04.25.15.15.10;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2000.04.20.01.39.32;	author aaron;	state Exp;
branches;
next	1.25;

1.25
date	2000.04.18.03.01.35;	author aaron;	state Exp;
branches;
next	1.24;

1.24
date	2000.04.15.02.15.24;	author aaron;	state Exp;
branches;
next	1.23;

1.23
date	2000.04.12.08.00.17;	author hugh;	state Exp;
branches;
next	1.22;

1.22
date	2000.01.12.00.42.46;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	99.09.22.10.05.25;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	99.08.08.14.46.56;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	99.07.07.14.22.25;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	99.07.02.20.58.00;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.05.25.21.16.26;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	99.05.12.13.26.48;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.03.01.20.41.56;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	99.02.27.21.55.46;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	98.09.27.20.53.24;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	98.08.30.22.19.37;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.08.29.21.11.52;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.07.14.21.18.07;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.06.15.17.54.48;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	98.03.07.21.53.30;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.01.12.06.17.26;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.01.12.06.14.30;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.11.29.19.54.49;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.06.30.03.22.08;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.29.01.26.17;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.32.57;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.75
log
@Add ERRORS section, from FreeBSD.  OK tedu@@
@
text
@.\"	$OpenBSD: printf.3,v 1.74 2015/10/13 12:25:04 millert Exp $
.\"
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)printf.3	8.1 (Berkeley) 6/4/93
.\"
.Dd $Mdocdate: October 13 2015 $
.Dt PRINTF 3
.Os
.Sh NAME
.Nm printf ,
.Nm fprintf ,
.Nm sprintf ,
.Nm snprintf ,
.Nm asprintf ,
.Nm dprintf ,
.Nm vprintf ,
.Nm vfprintf ,
.Nm vsprintf ,
.Nm vsnprintf ,
.Nm vasprintf ,
.Nm vdprintf
.Nd formatted output conversion
.Sh SYNOPSIS
.In stdio.h
.Ft int
.Fn printf "const char *format" ...
.Ft int
.Fn fprintf "FILE *stream" "const char *format" ...
.Ft int
.Fn sprintf "char *str" "const char *format" ...
.Ft int
.Fn snprintf "char *str" "size_t size" "const char *format" ...
.Ft int
.Fn asprintf "char **ret" "const char *format" ...
.Ft int
.Fn dprintf "int fd" "const char * restrict format" ...
.In stdarg.h
.In stdio.h
.Ft int
.Fn vprintf "const char *format" "va_list ap"
.Ft int
.Fn vfprintf "FILE *stream" "const char *format" "va_list ap"
.Ft int
.Fn vsprintf "char *str" "const char *format" "va_list ap"
.Ft int
.Fn vsnprintf "char *str" "size_t size" "const char *format" "va_list ap"
.Ft int
.Fn vasprintf "char **ret" "const char *format" "va_list ap"
.Ft int
.Fn vdprintf "int fd" "const char * restrict format" "va_list ap"
.Sh DESCRIPTION
The
.Fn printf
family of functions produce output according to the given
.Fa format
as described below.
This format may contain
.Dq conversion specifiers ;
the results of such conversions, if any, depend on the arguments
following the
.Fa format
string.
.Pp
The
.Fn printf
and
.Fn vprintf
functions write output to the standard output stream,
.Em stdout ;
.Fn fprintf
and
.Fn vfprintf
write output to the supplied stream pointer
.Fa stream ;
.Fn dprintf
and
.Fn vdprintf
write output to the given file descriptor;
.Fn sprintf ,
.Fn snprintf ,
.Fn vsprintf ,
and
.Fn vsnprintf
write to the character string
.Fa str ;
.Fn asprintf
and
.Fn vasprintf
write to a dynamically allocated string that is stored in
.Fa ret .
.Pp
These functions write the output under the control of a
.Fa format
string that specifies how subsequent arguments
(or arguments accessed via the variable-length argument facilities of
.Xr stdarg 3 )
are converted for output.
.Pp
.Fn snprintf
and
.Fn vsnprintf
will write at most
.Fa size Ns \-1
of the characters printed into the output string
(the
.Fa size Ns 'th
character then gets the terminating
.Ql \e0 ) ;
if the return value is greater than or equal to the
.Fa size
argument, the string was too short
and some of the printed characters were discarded.
If
.Fa size
is zero,
.Fa str
may be a null pointer and no characters will be written;
the number of bytes that would have been written excluding the terminating
.Ql \e0
byte, or \-1 on error, will be returned.
.Pp
.Fn sprintf
and
.Fn vsprintf
effectively assume an infinite
.Fa size .
.Pp
The format string is composed of zero or more directives:
ordinary
.\" multibyte
characters (not
.Cm % ) ,
which are copied unchanged to the output stream,
and conversion specifications, each of which results
in fetching zero or more subsequent arguments.
Each conversion specification is introduced by the character
.Cm % .
The arguments must correspond properly (after type promotion)
with the conversion specifier.
After the
.Cm % ,
the following appear in sequence:
.Bl -bullet
.It
An optional field, consisting of a decimal digit string followed by a
.Cm $
specifying the next argument to access.
If this field is not provided, the argument following the last
argument accessed will be used.
Arguments are numbered starting at
.Cm 1 .
.It
Zero or more of the following flags:
.Bl -hyphen
.It
A hash
.Sq Cm #
character
specifying that the value should be converted to an
.Dq alternate form .
For
.Cm o
conversions, the precision of the number is increased to force the first
character of the output string to a zero (except if a zero value is printed
with an explicit precision of zero).
For
.Cm x
and
.Cm X
conversions, a non-zero result has the string
.Ql 0x
(or
.Ql 0X
for
.Cm X
conversions) prepended to it.
For
.Cm a ,
.Cm A ,
.Cm e ,
.Cm E ,
.Cm f ,
.Cm F ,
.Cm g ,
and
.Cm G
conversions, the result will always contain a decimal point, even if no
digits follow it (normally, a decimal point appears in the results of
those conversions only if a digit follows).
For
.Cm g
and
.Cm G
conversions, trailing zeros are not removed from the result as they
would otherwise be.
For all other formats, behaviour is undefined.
.It
A zero
.Sq Cm \&0
character specifying zero padding.
For all conversions except
.Cm n ,
the converted value is padded on the left with zeros rather than blanks.
If a precision is given with a numeric conversion
.Pf ( Cm d ,
.Cm i ,
.Cm o ,
.Cm u ,
.Cm x ,
and
.Cm X ) ,
the
.Sq Cm \&0
flag is ignored.
.It
A negative field width flag
.Sq Cm \-
indicates the converted value is to be left adjusted on the field boundary.
Except for
.Cm n
conversions, the converted value is padded on the right with blanks,
rather than on the left with blanks or zeros.
A
.Sq Cm \-
overrides a
.Sq Cm \&0
if both are given.
.It
A space, specifying that a blank should be left before a positive number
produced by a signed conversion
.Pf ( Cm d ,
.Cm a ,
.Cm A ,
.Cm e ,
.Cm E ,
.Cm f ,
.Cm F ,
.Cm g ,
.Cm G ,
or
.Cm i ) .
.It
A
.Sq Cm +
character specifying that a sign always be placed before a
number produced by a signed conversion.
A
.Sq Cm +
overrides a space if both are used.
.El
.It
An optional decimal digit string specifying a minimum field width.
If the converted value has fewer characters than the field width, it will
be padded with spaces on the left (or right, if the left-adjustment
flag has been given) to fill out
the field width.
.It
An optional precision, in the form of a period
.Sq Cm \&.
followed by an
optional digit string.
If the digit string is omitted, the precision is taken as zero.
This gives the minimum number of digits to appear for
.Cm d ,
.Cm i ,
.Cm o ,
.Cm u ,
.Cm x ,
and
.Cm X
conversions, the number of digits to appear after the decimal-point for
.Cm a ,
.Cm A ,
.Cm e ,
.Cm E ,
.Cm f ,
and
.Cm F
conversions, the maximum number of significant digits for
.Cm g
and
.Cm G
conversions, or the maximum number of characters to be printed from a
string for
.Cm s
conversions.
.It
An optional length modifier, that specifies the size of the argument.
The following length modifiers are valid for the
.Cm d , i , n ,
.Cm o , u , x ,
or
.Cm X
conversion:
.Bl -column "(deprecated)" "signed char" "unsigned long long" "long long *"
.It Sy Modifier Ta Sy "d, i" Ta Sy "o, u, x, X" Ta Sy n
.It hh Ta "signed char" Ta "unsigned char" Ta "signed char *"
.It h Ta short Ta "unsigned short" Ta "short *"
.It "l (ell)" Ta long Ta "unsigned long" Ta "long *"
.It "ll (ell ell)" Ta "long long" Ta "unsigned long long" Ta "long long *"
.It j Ta intmax_t Ta uintmax_t Ta "intmax_t *"
.It t Ta ptrdiff_t Ta (see note) Ta "ptrdiff_t *"
.It z Ta "(see note)" Ta size_t Ta "(see note)"
.It "q (deprecated)" Ta quad_t Ta u_quad_t Ta "quad_t *"
.El
.Pp
Note:
the
.Cm t
modifier, when applied to an
.Cm o , u , x ,
or
.Cm X
conversion, indicates that the argument is of an unsigned type
equivalent in size to a
.Vt ptrdiff_t .
The
.Cm z
modifier, when applied to a
.Cm d
or
.Cm i
conversion, indicates that the argument is of a signed type equivalent in
size to a
.Vt size_t .
Similarly, when applied to an
.Cm n
conversion, it indicates that the argument is a pointer to a signed type
equivalent in size to a
.Vt size_t .
.Pp
The following length modifier is valid for the
.Cm a ,
.Cm A ,
.Cm e ,
.Cm E ,
.Cm f ,
.Cm F ,
.Cm g ,
or
.Cm G
conversion:
.Bl -column "Modifier" "e, E, f, F, g, G"
.It Sy Modifier Ta Sy "e, E, f, F, g, G"
.It "l (ell)" Ta double (ignored: same behavior as without it)
.It L Ta "long double"
.El
.Pp
The following length modifier is valid for the
.Cm c
or
.Cm s
conversion:
.Bl -column "Modifier" "wint_t" "wchar_t *"
.It Sy Modifier Ta Sy c Ta Sy s
.It "l (ell)" Ta wint_t Ta "wchar_t *"
.El
.It
A character that specifies the type of conversion to be applied.
.El
.Pp
A field width or precision, or both, may be indicated by
an asterisk
.Ql *
or an asterisk followed by one or more decimal digits and a
.Ql $
instead of a
digit string.
In this case, an
.Li int
argument supplies the field width or precision.
A negative field width is treated as a left adjustment flag followed by a
positive field width; a negative precision is treated as though it were
missing.
If a single format directive mixes positional (nn$) and
non-positional arguments, the results are undefined.
.Pp
The conversion specifiers and their meanings are:
.Bl -tag -width "diouxX"
.It Cm diouxX
The
.Li int
(or appropriate variant) argument is converted to signed decimal
.Pf ( Cm d
and
.Cm i ) ,
unsigned octal
.Pq Cm o ,
unsigned decimal
.Pq Cm u ,
or unsigned hexadecimal
.Pf ( Cm x
and
.Cm X )
notation.
The letters
.Cm abcdef
are used for
.Cm x
conversions; the letters
.Cm ABCDEF
are used for
.Cm X
conversions.
The precision, if any, gives the minimum number of digits that must
appear; if the converted value requires fewer digits, it is padded on
the left with zeros.
.It Cm DOU
The
.Li long int
argument is converted to signed decimal, unsigned octal, or unsigned
decimal, as if the format had been
.Cm ld ,
.Cm lo ,
or
.Cm lu
respectively.
These conversion characters are deprecated, and will eventually disappear.
.It Cm eE
The
.Li double
argument is rounded and converted in the style
.Sm off
.Pf [\-]d Cm \&. No ddd Cm e No \(+-dd
.Sm on
where there is one digit before the
decimal-point character
and the number of digits after it is equal to the precision;
if the precision is missing,
it is taken as 6; if the precision is
zero, no decimal-point character appears.
An
.Cm E
conversion uses the letter
.Cm E
(rather than
.Cm e )
to introduce the exponent.
The exponent always contains at least two digits; if the value is zero,
the exponent is 00.
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm e
or [-]INF
.Pq Cm E ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm e
or [-]NAN
.Pq Cm E ,
respectively.
.It Cm fF
The
.Li double
argument is rounded and converted to decimal notation in the style
.Sm off
.Pf [-]ddd Cm \&. No ddd ,
.Sm on
where the number of digits after the decimal-point character
is equal to the precision specification.
If the precision is missing, it is taken as 6; if the precision is
explicitly zero, no decimal-point character appears.
If a decimal point appears, at least one digit appears before it.
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm f
or [-]INF
.Pq Cm F ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm f
or [-]NAN
.Pq Cm F ,
respectively.
.It Cm gG
The
.Li double
argument is converted in style
.Cm f
or
.Cm e
(or
.Cm E
for
.Cm G
conversions).
The precision specifies the number of significant digits.
If the precision is missing, 6 digits are given; if the precision is zero,
it is treated as 1.
Style
.Cm e
is used if the exponent from its conversion is less than -4 or greater than
or equal to the precision.
Trailing zeros are removed from the fractional part of the result; a
decimal point appears only if it is followed by at least one digit.
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm g
or [-]INF
.Pq Cm G ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm g
or [-]NAN
.Pq Cm G ,
respectively.
.It Cm aA
The
.Li double
argument is rounded and converted to hexadecimal notation in the style
.Sm off
.Pf [\-]0xh Cm \&. No hhh Cm p No [\(+-]d
.Sm on
where the number of digits after the hexadecimal-point character
is equal to the precision specification.
If the precision is missing, it is taken as enough to represent
the floating-point number exactly, and no rounding occurs.
If the precision is zero, no hexadecimal-point character appears.
The
.Cm p
is a literal character
.Ql p ,
and the exponent consists of a positive or negative sign
followed by a decimal number representing an exponent of 2.
The
.Cm A
conversion uses the prefix
.Dq Li 0X
(rather than
.Dq Li 0x ) ,
the letters
.Dq Li ABCDEF
(rather than
.Dq Li abcdef )
to represent the hex digits, and the letter
.Ql P
(rather than
.Ql p )
to separate the mantissa and exponent.
.Pp
Note that there may be multiple valid ways to represent floating-point
numbers in this hexadecimal format.
For example,
.Li 0x3.24p+0 , 0x6.48p-1
and
.Li 0xc.9p-2
are all equivalent.
The format chosen depends on the internal representation of the
number, but the implementation guarantees that the length of the
mantissa will be minimized.
Zeroes are always represented with a mantissa of 0 (preceded by a
.Ql -
if appropriate) and an exponent of
.Li +0 .
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm a
or [-]INF
.Pq Cm A ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm a
or [-]NAN
.Pq Cm A ,
respectively.
.It Cm c
The
.Li int
argument is converted to an
.Li unsigned char ,
and the resulting character is written.
.It Cm s
The
.Li char *
argument is expected to be a pointer to an array of character type (pointer
to a string).
Characters from the array are written up to (but not including)
a terminating NUL character;
if a precision is specified, no more than the number specified are
written.
If a precision is given, no NUL character need be present;
if the precision is not specified, or is greater than the size
of the array, the array must contain a terminating NUL character.
.It Cm p
The
.Li void *
pointer argument is printed in hexadecimal (as if by
.Ql %#x
or
.Ql %#lx ) .
.It Cm n
The number of characters written so far is stored into the
integer indicated by the
.Li int *
(or variant) pointer argument.
No argument is converted.
.It Cm %
A
.Ql %
is written.
No argument is converted.
The complete conversion specification is
.Ql %% .
.El
.Pp
In no case does a non-existent or small field width cause truncation of
a field; if the result of a conversion is wider than the field width, the
field is expanded to contain the conversion result.
.Sh RETURN VALUES
For all these functions if an output or encoding error occurs, a value
less than 0 is returned.
.Pp
The
.Fn printf ,
.Fn fprintf ,
.Fn sprintf ,
.Fn vprintf ,
.Fn vfprintf ,
.Fn vsprintf ,
.Fn asprintf ,
and
.Fn vasprintf
functions
return the number of characters printed
(not including the trailing
.Ql \e0
used to end output to strings).
.Pp
The
.Fn snprintf
and
.Fn vsnprintf
functions return the number of characters that would have
been output if the
.Fa size
were unlimited
.Po
again, not including the final
.Ql \e0 .
.Pc .
.Pp
The
.Fn asprintf
and
.Fn vasprintf
functions return the number of characters that were output
to the newly allocated string
(excluding the final
.Ql \e0 ) .
A pointer to the newly allocated string is returned in
.Fa ret ;
it should be passed to
.Xr free 3
to release the allocated storage
when it is no longer needed.
If sufficient space cannot be allocated, these functions
will return \-1.
The value of
.Fa ret
in this situation is implementation-dependent
(on
.Ox ,
.Fa ret
will be set to the null pointer, but this behavior should not be relied upon).
.Sh EXAMPLES
To print a date and time in the form `Sunday, July 3, 10:02',
where
.Va weekday
and
.Va month
are pointers to strings:
.Bd -literal -offset indent
#include <stdio.h>

fprintf(stdout, "%s, %s %d, %.2d:%.2d\en",
    weekday, month, day, hour, min);
.Ed
.Pp
To print \*(Pi
to five decimal places:
.Bd -literal -offset indent
#include <math.h>
#include <stdio.h>

fprintf(stdout, "pi = %.5f\en", 4 * atan(1.0));
.Ed
.Pp
To allocate a 128-byte string and print into it:
.Bd -literal -offset indent
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

char *
newfmt(const char *fmt, ...)
{
	char *p;
	va_list ap;

	if ((p = malloc(128)) == NULL)
		return (NULL);
	va_start(ap, fmt);
	(void) vsnprintf(p, 128, fmt, ap);
	va_end(ap);
	return (p);
}
.Ed
.Sh ERRORS
In addition to the errors documented for the
.Xr write 2
system call, the
.Fn printf
family of functions may fail if:
.Bl -tag -width Er
.It Bq Er EILSEQ
An invalid wide character code was encountered.
.It Bq Er ENOMEM
Insufficient storage space is available.
.It Bq Er EOVERFLOW
The return value would be too large to be represented by an
.Vt int .
.El
.Sh SEE ALSO
.Xr printf 1 ,
.Xr scanf 3
.Sh STANDARDS
The
.Fn fprintf ,
.Fn printf ,
.Fn snprintf ,
.Fn sprintf ,
.Fn vfprintf ,
.Fn vprintf ,
.Fn vsnprintf ,
and
.Fn vsprintf
functions conform to
.St -isoC-99 .
The
.Fn dprintf
and
.Fn vdprintf
functions conform to
.St -p1003.1-2008 .
.Sh HISTORY
The predecessors
.Fn ftoa
and
.Fn itoa
first appeared in
.At v1 .
The function
.Fn printf
first appeared in
.At v2 ,
and
.Fn fprintf
and
.Fn sprintf
in
.At v7 .
.Pp
The functions
.Fn snprintf
and
.Fn vsnprintf
first appeared in
.Bx 4.4 .
.Pp
The functions
.Fn asprintf
and
.Fn vasprintf
first appeared in the GNU C library.
This implementation first appeared in
.Ox 2.3 .
.Pp
The functions
.Fn dprintf
and
.Fn vdprintf
first appeared in
.Ox 5.3 .
.Sh CAVEATS
The conversion formats
.Cm \&%D ,
.Cm \&%O ,
and
.Cm \&%U
are not standard and
are provided only for backward compatibility.
The effect of padding the
.Cm %p
format with zeros (either by the
.Sq Cm 0
flag or by specifying a precision), and the benign effect (i.e., none)
of the
.Sq Cm #
flag on
.Cm %n
and
.Cm %p
conversions, as well as other
nonsensical combinations such as
.Cm %Ld ,
are not standard; such combinations
should be avoided.
.Pp
Because
.Fn sprintf
and
.Fn vsprintf
assume an infinitely long string,
callers must be careful not to overflow the actual space;
this is often impossible to assure.
For safety, programmers should use the
.Fn snprintf
and
.Fn asprintf
family of interfaces instead.
Unfortunately, the
.Fn asprintf
interface is not available on all systems as it is not part of
.St -isoC-99 .
.Pp
It is important never to pass a string with user-supplied data as a
format without using
.Ql %s .
An attacker can put format specifiers in the string to mangle the stack,
leading to a possible security hole.
This holds true even if the string has been built
.Dq by hand
using a function like
.Fn snprintf ,
as the resulting string may still contain user-supplied conversion specifiers
for later interpolation by
.Fn printf .
.Pp
Be sure to use the proper secure idiom:
.Bd -literal -offset indent
int ret = snprintf(buffer, sizeof(buffer), "%s", string);
if (ret == -1 || ret >= sizeof(buffer))
	goto toolong;
.Ed
.Pp
There is no way for
.Fn printf
to know the size of each argument passed.
If positional arguments are used, care must be taken to ensure that all
parameters, up to the
last positionally specified parameter, are used in the format string.
This allows for the format string to be parsed for this information.
Failure to do this will mean the code is non-portable and liable to fail.
@


1.74
log
@Sync printf family return value with ISO C which specifies that
these functions return a negative value on failure.
OK doug@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.73 2015/06/03 16:26:04 millert Exp $
d36 1
a36 1
.Dd $Mdocdate: June 3 2015 $
d742 15
@


1.73
log
@snprintf(3) is available on all modern systems and asprintf(3) is
available on more systems these days.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.72 2015/02/28 21:51:57 bentley Exp $
d36 1
a36 1
.Dd $Mdocdate: February 28 2015 $
d645 1
a645 1
of \-1 is returned.
@


1.72
log
@Reduce usage of predefined strings in manpages.

Predefined strings are not very portable across troff implementations,
and they make the source much harder to read. Usually the intended
character can be written directly.

No output changes, except for two instances where the incorrect escape
was used in the first place.

tweaks + ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.71 2015/01/13 14:02:30 schwarze Exp $
d36 1
a36 1
.Dd $Mdocdate: January 13 2015 $
a840 3
.Fn snprintf
interface is not available on older
systems and the
d842 2
a843 1
interface is not portable.
@


1.71
log
@remove .Tn from stdio manuals; Kaspars Bankovskis found one of these
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.70 2014/11/15 14:41:02 bentley Exp $
d36 1
a36 1
.Dd $Mdocdate: November 15 2014 $
d454 1
a454 1
.Pf [\-]d Cm \&. No ddd Cm e No \*(Pmdd
d545 1
a545 1
.Pf [\-]0xh Cm \&. No hhh Cm p No [\*(Pm]d
@


1.70
log
@Reduce instances of `` '' in manuals.

troff displays these as typographic quotes, but nroff implementations
almost always print them literally, which rarely has the intended effect
with modern fonts, even in stock xterm.

These uses of `` '' can be replaced either with more semantic alternatives
or with Dq, which prints typographic quotes in a UTF-8 locale (but will
automatically fall back to `` '' in an ASCII locale).

improvements and ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.69 2014/05/13 20:51:00 jmc Exp $
d36 1
a36 1
.Dd $Mdocdate: May 13 2014 $
d612 1
a612 3
a terminating
.Tn NUL
character;
d615 3
a617 5
If a precision is given, no NUL character
need be present; if the precision is not specified, or is greater than
the size of the array, the array must contain a terminating
.Tn NUL
character.
@


1.69
log
@for non-valid combinations with `#', instead of trying to list them all,
simply say all other combinations are behaviour undefined;

ok guenther, who reminded me to change these too;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.68 2014/05/09 05:14:17 deraadt Exp $
d36 1
a36 1
.Dd $Mdocdate: May 9 2014 $
d189 2
a190 1
specifying that the value should be converted to an ``alternate form''.
@


1.68
log
@when demonstrating the correct "double-check" idiom, provide a
reminder that the return value is int...
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.67 2014/04/22 15:22:04 sobrado Exp $
d36 1
a36 1
.Dd $Mdocdate: April 22 2014 $
a190 10
.Cm c ,
.Cm d ,
.Cm i ,
.Cm n ,
.Cm p ,
.Cm s ,
and
.Cm u
conversions, this option has no effect.
For
d225 1
@


1.67
log
@add closing parenthesis.

ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.66 2014/04/19 16:48:41 jmc Exp $
d36 1
a36 1
.Dd $Mdocdate: April 19 2014 $
d874 1
a874 1
ret = snprintf(buffer, sizeof(buffer), "%s", string);
@


1.66
log
@need to escape %U, since it is used in Re/Rs blocks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.65 2014/04/19 11:21:15 deraadt Exp $
d875 1
a875 1
if (ret == -1 || ret >= sizeof(buffer)
@


1.65
log
@Demonstrate correct usage of snprintf (regarding overflow detection)
ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.64 2013/07/17 05:42:11 schwarze Exp $
d36 1
a36 1
.Dd $Mdocdate: July 17 2013 $
d820 1
a820 1
.Cm %U
@


1.64
log
@more library history
facts checked by sobrado@@
style tweaks and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.63 2013/06/05 03:39:23 tedu Exp $
d36 1
a36 1
.Dd $Mdocdate: June 5 2013 $
d874 3
a876 1
snprintf(buffer, sizeof(buffer), "%s", string);
@


1.63
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.62 2013/04/01 20:16:31 guenther Exp $
d36 1
a36 1
.Dd $Mdocdate: April 1 2013 $
d777 17
@


1.62
log
@When there are multiple groups of functions with their own #includes
listed, the #includes in each group are independent, so that users
don't need to guess at possible carry-over.

general idea ok otto@@ millert@@
actual diff ok jmc@@ schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.61 2013/03/04 01:50:01 brad Exp $
d36 1
a36 1
.Dd $Mdocdate: March 4 2013 $
d54 1
a54 1
.Fd #include <stdio.h>
d67 2
a68 2
.Fd #include <stdarg.h>
.Fd #include <stdio.h>
@


1.61
log
@Update STANDARDS section as appropriate for C99.

ok guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.60 2013/01/30 00:08:13 brad Exp $
d36 1
a36 1
.Dd $Mdocdate: January 30 2013 $
d68 1
@


1.60
log
@Add support for POSIX.1-2008 functions dprintf(3) and vdprintf(3).

Feedback from millert@@ guenther@@
OK guenther@@ man page bits OK jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.59 2011/09/03 22:59:07 jmc Exp $
d36 1
a36 1
.Dd $Mdocdate: September 3 2011 $
d760 1
d762 1
d764 1
a764 1
.Fn vfprintf ,
d768 1
a768 1
.St -ansiC .
@


1.59
log
@make -column lists pretty again;

specifically, rewrite them to permit some markup in the column headers,
and use "Ta" instead of literal tabs; mandoc does not currently match groff
100%, but a mandoc fix may be some time off, and we've gone enough releases
with poorly formatting column lists.

in some cases i have rewritten the lists as -tag, where -column made
little sense.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.58 2010/03/26 19:30:41 jmc Exp $
d36 1
a36 1
.Dd $Mdocdate: March 26 2010 $
d45 1
d50 2
a51 1
.Nm vasprintf
d65 2
d78 2
d104 4
d767 6
d788 7
@


1.58
log
@dispense with some wacky escape sequences;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.57 2008/09/15 19:22:32 martynas Exp $
d36 1
a36 1
.Dd $Mdocdate: September 15 2008 $
d323 1
a323 1
.It Sy Modifier Ta "d, i" Ta "o, u, x, X" Ta n
d371 1
a371 1
.It Sy Modifier Ta "e, E, f, F, g, G"
d382 1
a382 1
.It Sy Modifier Ta c Ta s
@


1.57
log
@- describe how printf(1) and printf(3) %e, %E, %g, %G, %a, %A behave
when the argument is infinity/not-a-number
ok millert@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.56 2008/09/14 11:44:54 martynas Exp $
d36 1
a36 1
.Dd $Mdocdate: September 14 2008 $
d451 1
a451 1
.Pf [\-]d Cm \&. No ddd Cm e No \\*(Pmdd
d542 1
a542 1
.Pf [\-]0xh Cm \&. No hhh Cm p No [\\*(Pm]d
@


1.56
log
@describe %a/%A.  from freebsd
tweaks/ok millert@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.55 2008/08/26 18:29:12 martynas Exp $
d36 1
a36 1
.Dd $Mdocdate: August 26 2008 $
d468 12
d525 12
d585 12
@


1.55
log
@- add F
- make inf INF nan NAN comply to standards (eEfFgG)
- extend man page bits
ok millert@@.  w/ a man page tweak and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.54 2007/05/31 19:19:31 jmc Exp $
d36 1
a36 1
.Dd $Mdocdate: May 31 2007 $
d206 2
d259 2
d299 2
d360 2
d513 48
@


1.54
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.53 2007/04/01 18:45:16 deraadt Exp $
d36 1
a36 1
.Dd $Mdocdate$
d209 1
d460 1
a460 1
.It Cm f
d472 12
@


1.53
log
@clarify return values, prompted by moritz; ok moritz jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.52 2006/01/13 17:56:18 millert Exp $
d36 1
a36 1
.Dd December 27, 2005
@


1.52
log
@Use long long and intmax_t instead of quad_t throughout.  Adapted in
part from FreeBSD.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.51 2006/01/07 16:49:59 jmc Exp $
d540 3
d549 2
d552 1
a552 1
.Fn vsprintf
d569 1
a569 1
.Ql \e0
a570 1
If an output or encoding error occurs, a value of \-1 is returned instead.
@


1.51
log
@improve the RETURN VALUES section;
for such a small diff, this one was hard work...

based on a diff from ray lai;
blood, sweat, and tears (and ok) kettenis
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.50 2005/09/23 02:33:34 tedu Exp $
d36 1
a36 1
.Dd June 4, 1993
d259 1
d296 1
d298 1
a298 1
.Cm f
d308 4
a311 8
The optional character
.Cm j ,
specifying that a following
.Cm d ,
.Cm i ,
.Cm o ,
.Cm u ,
.Cm x ,
d314 18
a331 13
conversion corresponds to an
.Li intmax_t
or
.Li uintmax_t
argument.
The optional character
.Cm h ,
specifying that a following
.Cm d ,
.Cm i ,
.Cm o ,
.Cm u ,
.Cm x ,
d334 13
a346 5
conversion corresponds to a
.Li short int
or
.Li unsigned short int
argument, or that a following
d348 5
a352 91
conversion corresponds to a pointer to a
.Li short int
argument.
.It
The optional character
.Cm l
(ell) specifying that a following
.Cm d ,
.Cm i ,
.Cm o ,
.Cm u ,
.Cm x ,
or
.Cm X
conversion corresponds to a
.Li long int
or
.Li unsigned long int
argument, or that a following
.Cm n
conversion corresponds to a pointer to a
.Li long int
argument.
.It
The optional character sequence
.Cm \&ll ,
specifying that a following
.Cm d ,
.Cm i ,
.Cm o ,
.Cm u ,
.Cm x ,
or
.Cm X
conversion corresponds to a
.Li quad int
or
.Li unsigned quad int
argument, or that a following
.Cm n
conversion corresponds to a pointer to a
.Li quad int
argument.
The use of
.Cm q
has been deprecated as conversion character.
.It
The optional character
.Cm t ,
specifying that a following
.Cm d ,
.Cm i ,
.Cm o ,
.Cm u ,
.Cm x ,
or
.Cm X
conversion corresponds to a
.Em ptrdiff_t
or
the corresponding unsigned integer type
argument, or that a following
.Cm n
conversion corresponds to a pointer to a
.Em ptrdiff_t
argument.
.It
The optional character
.Cm z ,
specifying that a following
.Cm d ,
.Cm i ,
.Cm o ,
.Cm u ,
.Cm x ,
or
.Cm X
conversion corresponds to a
.Em size_t
or
the corresponding signed integer type
argument, or that a following
.Cm n
conversion corresponds to a pointer to a
signed integer type corresponding to
.Em size_t
argument.
.It
The character
.Cm L
specifying that a following
d356 1
d360 16
a375 3
conversion corresponds to a
.Li long double
argument.
@


1.50
log
@support %jd from c99, although intmax_t may not be available.
ok deraadt espie kettenis
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.49 2005/07/26 03:30:25 jaredy Exp $
a606 1
.Fn vsprintf ,
d608 1
a608 1
.Fn vasprintf
d629 1
d633 7
a639 4
return a pointer to a buffer sufficiently large to hold the string in the
.Fa ret
argument.
This pointer should be passed to
d641 2
a642 1
to release the allocated storage when it is no longer needed.
@


1.49
log
@- typos, punctuation, spacing, macro, layout, etc. fixes
- avoid first person

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.48 2005/07/26 03:23:14 jaredy Exp $
d306 15
@


1.48
log
@remove note about long double not being supported by vax.
this should have been in CAVEATS anyway.

ok millert, jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.47 2005/04/14 18:20:51 deraadt Exp $
d656 1
a656 1
To allocate a 128 byte string and print into it:
d752 1
a752 1
An attacker can put format specifiers in the string to mangle your stack,
d754 1
a754 1
This holds true even if you have built the string
d767 5
a771 2
There is no way for printf to know the size of each argument passed.
If you use positional arguments you must ensure that all parameters, up to the
d774 1
a774 1
Failure to do this will mean your code is non-portable and liable to fail.
@


1.47
log
@move return values to a seperate section, and split them out so that it
is more clear which variants return which values; ok jmc otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.46 2005/04/14 18:19:24 otto Exp $
d421 1
a421 4
argument (but note that long double values are not currently supported
by the
.Tn VAX
compiler).
@


1.46
log
@Explain what happens when len equals 0 for snprintf().
ok jmc@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.45 2005/02/25 03:12:44 cloder Exp $
a117 36
These functions return the number of characters printed
(not including the trailing
.Ql \e0
used to end output to strings),
except for
.Fn snprintf
and
.Fn vsnprintf ,
which return the number of characters that would have been printed if the
.Fa size
were unlimited
.Po
again, not including the final
.Ql \e0
.Pc .
If an output or encoding error occurs, a value of \-1 is returned instead.
.Pp
.Fn asprintf
and
.Fn vasprintf
return a pointer to a buffer sufficiently large to hold the string in the
.Fa ret
argument.
This pointer should be passed to
.Xr free 3
to release the allocated storage when it is no longer needed.
If sufficient space cannot be allocated, these functions
will return \-1.
The value of
.Fa ret
in this situation is implementation-dependent
(on
.Ox ,
.Fa ret
will be set to the null pointer, but this behavior should not be relied upon).
.Pp
d588 48
@


1.45
log
@Be correct in our man pages when talking about NUL termination (that is,
termination with '\0') vs. null termination.
Input from krw@@, jaredy@@, jmc@@.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.44 2004/09/18 19:28:06 otto Exp $
d168 8
@


1.44
log
@Add 'z' and 't' modifiers for printing size_t and ptrdiff_t.
ok millert@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.43 2003/08/17 17:08:09 grange Exp $
d586 1
a586 1
If a precision is given, no null character
@


1.43
log
@Sort headers in example
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.42 2003/07/15 10:05:36 jmc Exp $
d396 41
@


1.42
log
@.Ql Cm -> .Sq Cm  where literal makes no sense;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.41 2003/06/02 20:18:37 millert Exp $
d600 1
a602 1
#include <stdarg.h>
@


1.41
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.40 2003/05/03 19:08:21 jmc Exp $
d204 1
a204 1
.Ql Cm #
@


1.40
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.39 2003/04/16 23:17:10 millert Exp $
d18 1
a18 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.39
log
@Warn people that the value of the pointer passed in to asprinf()
is implementation-specific when we get ENOMEM but mention that
*we* set it to NULL.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.38 2002/07/24 22:58:39 millert Exp $
d219 1
a219 1
.Cm u ,
d243 1
a243 1
.Cm G ,
d399 1
a399 1
has been depreciated as conversion character.
@


1.38
log
@Document that *printf can return -1 on error.  This includes snprintf(),
though our implementation never does this.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.37 2002/05/01 08:03:29 mpech Exp $
d149 2
a150 1
will return \-1 and set
d152 5
a156 1
to be a null pointer.
@


1.37
log
@o) start new sentence on a new line;
o) always close .Bl tags;
o) fix usage of .Xr;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.36 2001/09/06 04:40:55 millert Exp $
d137 1
@


1.36
log
@It is silly to reference the Tahoe architecture.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.35 2001/06/23 15:00:25 provos Exp $
d390 2
a391 1
argument.  The use of
@


1.35
log
@document ll, depreciate q
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.34 2001/06/05 21:18:56 pjanzen Exp $
d408 1
a408 3
and
.Tn Tahoe
compilers).
@


1.34
log
@Fix pasto; kleink@@netbsd.org
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.33 2001/02/17 17:15:27 pjanzen Exp $
d372 2
a373 2
The optional character
.Cm q ,
d390 3
a392 1
argument.
@


1.33
log
@It's not that I mind split infinitives.  I just like to save'em for when
they're really needed.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.32 2000/12/24 00:30:59 aaron Exp $
d362 1
a362 1
conversion applies to a pointer to a
@


1.32
log
@Various repairs, mostly to get rid of short lines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.31 2000/08/25 17:43:15 aaron Exp $
d688 1
a688 1
It is important to never pass a string with user-supplied data as a
@


1.31
log
@In the format string bug description under CAVEATS, clarify what we mean by
building the string ``by hand'' using a function like snprintf(); deraadt@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.30 2000/07/16 22:44:57 millert Exp $
d627 1
a627 2
functions
conform to
@


1.30
log
@Stronger caveat wrt stack smashing via % escapes.  Each man page
carries the same caveat...
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.29 2000/07/07 00:09:10 aaron Exp $
d690 2
a691 1
format without using %s.
d698 1
a698 2
as the attacker can escape the percent sign
.Pq Sq %
@


1.29
log
@Insert missing semi-colon.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.28 2000/06/25 13:52:30 pjanzen Exp $
d689 13
a701 4
Never print a user-supplied string directly as a format without using
.Cm %s ,
as an attacker can put format specifiers in that string to mangle
your stack.
@


1.28
log
@correct return values
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.27 2000/04/25 15:15:10 espie Exp $
d695 1
a695 1
snprintf(buffer, sizeof(buffer), "%s", string)
@


1.27
log
@C deals with complex functions, but not imaginary ones yet.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.26 2000/04/20 01:39:32 aaron Exp $
d125 12
a136 1
used to end output to strings).
a148 10
.Fa ret
to be a null pointer.
.Pp
If
.Fn asprintf
or
.Fn vasprintf
are given a
.Fa size
of 0, they set
@


1.26
log
@Flesh out all of the stdio man pages.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.25 2000/04/18 03:01:35 aaron Exp $
d53 1
a53 2
.Nm vasprintf ,
.Nm vansprintf
@


1.25
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.24 2000/04/15 02:15:24 aaron Exp $
d82 1
a82 1
family of functions produces output according to a
d85 8
d96 2
a97 3
write output to
.Em stdout ,
the standard output stream;
d101 1
a101 1
write output to the given output
d105 1
a105 1
.Fn vsprintf
d123 1
a123 2
These functions return
the number of characters printed
d131 1
a131 2
return a pointer to a buffer sufficiently large to hold the
string in the
d140 1
a140 1
to be a NULL pointer.
d150 1
a150 1
to be a NULL pointer.
d178 1
a178 1
which are copied unchanged to the output stream;
d181 1
a181 2
Each conversion specification is introduced by
the character
d191 1
a191 1
.Cm $ ,
d201 2
a202 2
A
.Cm #
d343 1
a343 1
.Em short int
d345 1
a345 1
.Em unsigned short int
d349 1
a349 1
.Em short int
d363 1
a363 1
.Em long int
d365 1
a365 1
.Em unsigned long int
d369 1
a369 1
.Em long int
d383 1
a383 1
.Em quad int
d385 1
a385 1
.Em unsigned quad int
d389 1
a389 1
.Em quad int
d402 1
a402 1
.Em long double
d421 1
a421 1
.Em int
d433 1
a433 1
.Em int
d461 1
a461 1
.Em long int
d472 1
a472 1
.Em double
d494 1
a494 1
.Em double
d506 1
a506 1
.Em double
d527 1
a527 1
.Em int
d529 1
a529 1
.Em unsigned char ,
d533 1
a533 1
.Dq Em char *
d538 1
a538 1
.Dv NUL
d545 1
a545 1
.Dv NUL
d549 1
a549 1
.Dq Em void *
d557 1
a557 1
.Dq Em int *
d575 1
a575 1
.Em weekday
d577 1
a577 1
.Em month
@


1.24
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.23 2000/04/12 08:00:17 hugh Exp $
d304 3
a306 2
optional digit string.  If the digit string is omitted, the precision
is taken as zero.  This gives the minimum number of digits to appear for
d442 2
a443 1
notation.  The letters
d559 3
a561 2
is written. No argument is converted. The complete conversion specification
is
d638 2
a639 1
first appeared in the GNU C library.  This implementation first appeared in
d688 2
a689 1
your stack. Be sure to use the proper secure idiom:
d694 5
a698 5
There is no way for printf to know the size of each argument passed. If
you use positional arguments you must ensure that all parameters, up to the
last positionally specified parameter, are used in the format string.  This
allows for the format string to be parsed for this information. Failure
to do this will mean your code is non-portable and liable to fail.
@


1.23
log
@list 'i' only once
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.22 2000/01/12 00:42:46 deraadt Exp $
d89 1
a89 1
.Em stdout,
@


1.22
log
@indent the source right
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.21 1999/09/22 10:05:25 espie Exp $
a254 1
.Cm i ,
@


1.21
log
@BUGS->CAVEATS
Warn against brain-dead ProFTPd hole.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.20 1999/08/08 14:46:56 deraadt Exp $
d577 1
a577 1
	weekday, month, day, hour, min);
d595 2
a596 1
char *newfmt(const char *fmt, ...)
d598 2
a599 2
		char *p;
		va_list ap;
d601 6
a606 6
		if ((p = malloc(128)) == NULL)
			return (NULL);
		va_start(ap, fmt);
		(void) vsnprintf(p, 128, fmt, ap);
		va_end(ap);
		return (p);
@


1.20
log
@missing G in item list; bde
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.19 1999/07/07 14:22:25 aaron Exp $
d637 1
a637 1
.Sh BUGS
d680 8
@


1.19
log
@when using `-' as a negative sign, escape it with a backslash so troff knows
it's not supposed to be a hyphen/dash
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.18 1999/07/02 20:58:00 aaron Exp $
d499 1
a499 1
.It Cm g
@


1.18
log
@remove redundant .Pp macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.17 1999/05/25 21:16:26 aaron Exp $
d133 1
a133 1
will return -1 and set
@


1.17
log
@kill some old macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.16 1999/05/12 13:26:48 aaron Exp $
a565 1
.Pp
@


1.16
log
@grammar police: do not hyphenate compound words that act as adjectives if the
first word ends in -ly

i.e., fully-qualified, newly-created, globally-visible, etc. are wrong
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.15 1999/03/01 20:41:56 deraadt Exp $
a567 1
.br
@


1.15
log
@talk about positional arguments and sizes; james@@oaktree.co.uk
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.14 1999/02/27 21:55:46 deraadt Exp $
d685 1
a685 1
last positionally-specified parameter, are used in the format string.  This
@


1.14
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.13 1998/09/27 20:53:24 millert Exp $
a192 2
If unaccessed arguments in the format string are interspersed with
ones that are accessed the results will be indeterminate.
d682 6
@


1.13
log
@Add a missing note about asprintf
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.12 1998/08/30 22:19:37 millert Exp $
d85 1
a85 1
.Fn Printf
d122 1
a122 1
.Fn Asprintf
d147 1
a147 1
.Fn Snprintf
d162 1
a162 1
.Fn Sprintf
@


1.12
log
@v?asnprintf was never ocmmitted because it make stdio guts too gross.  Remove references...
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.11 1998/08/29 21:11:52 deraadt Exp $
d138 2
@


1.11
log
@man page repairs; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.10 1998/07/14 21:18:07 deraadt Exp $
a48 1
.Nm asnprintf ,
a67 2
.Ft int
.Fn asnprintf "char **ret" "size_t size" "const char *format" ...
a78 2
.Ft int
.Fn vasnprintf "char **ret" "size_t size" "const char *format" "va_list ap"
d98 1
a98 1
.Fn vsprintf ,
d103 2
a104 2
.Fn asprintf ,
.Fn asnprintf ,
a105 2
and
.Fn vasnprintf
d122 2
a123 2
.Fn Asprintf ,
.Fn asnprintf ,
a124 2
and
.Fn vasnprintf
a137 2
.Fn asnprintf
or
d145 1
a145 3
.Fn Snprintf ,
.Fn vsnprintf ,
.Fn asnprintf
d147 1
a147 1
.Fn vasnprintf
@


1.10
log
@formatting flaws
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.9 1998/06/15 17:54:48 mickey Exp $
d51 1
a51 1
.Nm vfprintf,
d54 1
a54 1
.Nm vasprintf
@


1.9
log
@use Bx macro for BSD versions
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.8 1998/03/07 21:53:30 millert Exp $
d590 1
d600 1
d609 1
d614 1
@


1.8
log
@Use .Ox
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.7 1998/01/12 06:17:26 millert Exp $
d639 2
a640 1
are new to this release.
@


1.7
log
@typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.6 1998/01/12 06:14:30 millert Exp $
d49 1
d55 1
d69 2
d82 2
d108 3
a110 1
.Fn asprintf
d112 1
a112 1
.Fn vasprintf
d129 3
a131 1
.Fn Asprintf
d133 1
a133 1
.Fn vasprintf
d146 13
a158 1
.Fn Snprintf
d160 1
a160 1
.Fn vsnprintf
d646 1
a646 2
.Bx Open
2.3.
@


1.6
log
@Based on some FreeBSD changes:
    For *s*printf, set f._file to -1 like the comments in stdio.h say.
    Use '\0', not 0, where appropriate.
    Don't error out on size of '0' for v?snprintf().
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.5 1997/11/29 19:54:49 millert Exp $
d667 1
a667 1
.Fn vasprintf
@


1.5
log
@Implement asprintf(3) and vasprintf(3) functions similar to the
ones in the glibc.  Some man pages changes from FreeBSD
(asprintf.c/vasprintf.c are not based on GNU or FreeBSD code).
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.4 1997/06/30 03:22:08 millert Exp $
a119 6
.Fn Snprintf
and
.Fn vsnprintf
will return -1 if the
.Fa size
parameter is 0.
d127 1
a127 1
argument;
d131 1
a131 4
If sufficient space cannot be allocated,
.Fn asprintf
and
.Fn vasprintf
d661 1
a661 1
.Fn vasprintf
@


1.4
log
@snprintf(3) is not non-portable (it is part of XPG4) it is just
not availalble on older systems.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.3 1996/09/29 01:26:17 michaels Exp $
d38 2
d48 1
d52 2
a53 1
.Nm vsnprintf
d65 2
a66 2
.\" .Ft int
.\" .Fn smprintf "const char *format" ...
d73 1
a73 1
.Fn vsprintf "char *str" "char *format" "va_list ap"
d76 2
a77 2
.\" .Ft int
.\" .Fn vsmprintf "const char *format" "va_list ap"
d101 7
a107 8
.Fa str .
.\" .IR str ;
.\" and
.\" .I smprintf
.\" and
.\" .I vsmprintf
.\" dynamically allocate a new string with
.\" .IR malloc .
d114 1
a114 5
.\" Except for
.\" .I smprintf
.\" and
.\" .IR vsmprintf ,
.\" all of these functions return
d120 25
a144 15
.\" .I Smprintf
.\" and
.\" .I vsmprintf
.\" return a pointer to a string of an appropriate length;
.\" this pointer should be passed to
.\" .I free
.\" to release the associated storage
.\" when it is no longer needed.
.\" If sufficient space is not avaliable,
.\" .I smprintf
.\" and
.\" .I vsmprintf
.\" will return
.\" .SM
.\" .BR
d159 1
a192 1

d201 1
a201 1
For 
d211 1
a211 1
For 
d251 1
a251 1
.Pf ( Mc d ,
d627 8
d669 9
a677 3
interface instead.
Unfortunately, this interface is not available on older
systems.
@


1.3
log
@Document printf addition.  From Mark Diekhans (markd@@grizzly.com).
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.3,v 1.5 1995/02/02 01:15:49 jtc Exp $
d653 2
a654 1
Unfortunately, this interface is not portable.
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d174 11
d403 2
d413 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: printf.3,v 1.5 1995/02/02 01:15:49 jtc Exp $
a36 2
.\"
.\"     @@(#)printf.3	8.1 (Berkeley) 6/4/93
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

