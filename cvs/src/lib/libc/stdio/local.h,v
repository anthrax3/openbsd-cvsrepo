head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.4
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.20.0.18
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.10
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.20.0.14
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.12
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.8
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.6
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.4
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.2
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.12.0.18
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.14
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.12
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.10
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.8
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.6
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2016.05.23.00.21.48;	author guenther;	state Exp;
branches;
next	1.24;
commitid	4Z9QbS513txeEOh7;

1.24
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.23;
commitid	d9R7VGw9CHTkwXE1;

1.23
date	2015.10.25.18.01.24;	author guenther;	state Exp;
branches;
next	1.22;
commitid	psI2iCtxmQHDheCH;

1.22
date	2015.10.04.07.33.46;	author guenther;	state Exp;
branches;
next	1.21;
commitid	0mTIiQix4uB7MqVg;

1.21
date	2015.08.27.04.37.09;	author guenther;	state Exp;
branches;
next	1.20;
commitid	khkC09EAAnI0S1Zu;

1.20
date	2011.11.08.18.30.42;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2011.10.16.13.20.51;	author stsp;	state Exp;
branches;
next	1.18;

1.18
date	2011.04.28.17.38.46;	author stsp;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.24.08.54.06;	author stsp;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.24.07.46.58;	author stsp;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.09.00.18.27;	author kurt;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.22.01.23.16;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.21.16.04.23;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.10.17.37.44;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.17.20.40.32;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.30.09.25.17;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.31.18.36.29;	author pat;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.30.18.51.49;	author pat;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.08.15.43.31;	author moritz;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.18.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.14.22.03.14;	author dhartmei;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.17.19.42.23;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.27.24;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.32.54;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.13;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Make _fwalk and _cleanup completely internal to libc

ok deraadt@@
@
text
@/*	$OpenBSD: local.h,v 1.24 2016/05/07 19:05:22 guenther Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Information local to this implementation of stdio,
 * in particular, macros and private variables.
 */

#include <wchar.h> 
#include "wcio.h"
#include "fileext.h"
#include "thread_private.h"

__BEGIN_HIDDEN_DECLS
void	_cleanup(void);
int	_fwalk(int (*)(FILE *));
int	__sflush(FILE *);
int	__sflush_locked(FILE *);
FILE	*__sfp(void);
int	__srefill(FILE *);
int	__sread(void *, char *, int);
int	__swrite(void *, const char *, int);
fpos_t	__sseek(void *, fpos_t, int);
int	__sclose(void *);
void	__sinit(void);
void	__smakebuf(FILE *);
int	__swhatbuf(FILE *, size_t *, int *);
int	__swsetup(FILE *);
int	__sflags(const char *, int *);
wint_t __fgetwc_unlock(FILE *);
wint_t	__ungetwc(wint_t, FILE *);
int	__vfprintf(FILE *, const char *, __va_list);
int	__svfscanf(FILE * __restrict, const char * __restrict, __va_list);
int	__vfwprintf(FILE * __restrict, const wchar_t * __restrict, __va_list);
int	__vfwscanf(FILE * __restrict, const wchar_t * __restrict, __va_list);

extern int __sdidinit;
__END_HIDDEN_DECLS

/*
 * Return true if the given FILE cannot be written now.
 */
#define	cantwrite(fp) \
	((((fp)->_flags & __SWR) == 0 || (fp)->_bf._base == NULL) && \
	 __swsetup(fp))

/*
 * Test whether the given stdio file has an active ungetc buffer;
 * release such a buffer, without restoring ordinary unread data.
 */
#define	HASUB(fp) (_UB(fp)._base != NULL)
#define	FREEUB(fp) { \
	if (_UB(fp)._base != (fp)->_ubuf) \
		free(_UB(fp)._base); \
	_UB(fp)._base = NULL; \
}

/*
 * test for an fgetln() buffer.
 */
#define	HASLB(fp) ((fp)->_lb._base != NULL)
#define	FREELB(fp) { \
	free((char *)(fp)->_lb._base); \
	(fp)->_lb._base = NULL; \
}

#define FLOCKFILE(fp)							\
	do {								\
		if (_thread_cb.tc_flockfile != NULL)			\
			_thread_cb.tc_flockfile(fp);			\
	} while (0)
#define FUNLOCKFILE(fp)							\
	do {								\
		if (_thread_cb.tc_funlockfile != NULL)			\
			_thread_cb.tc_funlockfile(fp);			\
	} while (0)
@


1.24
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.23 2015/10/25 18:01:24 guenther Exp $	*/
d45 1
a47 3
PROTO_NORMAL(_fwalk);

__BEGIN_HIDDEN_DECLS
@


1.23
log
@Hide __atexit and __atexit_register_cleanup()
Wrap __cxa_{atexit,finalize}() so the call from exit() goes direct
Switch regress/lib/libc/atexit/ to be built with -static so that it can
  still access __atexit*

ok millert@@ jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.22 2015/10/04 07:33:46 guenther Exp $	*/
d43 1
d100 10
a109 2
#define FLOCKFILE(fp)	do { if (__isthreaded) flockfile(fp); } while (0)
#define FUNLOCKFILE(fp)	do { if (__isthreaded) funlockfile(fp); } while (0)
@


1.22
log
@wrap _fwalk() so internal calls are direct (at least until we stop
exporting it)
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.21 2015/08/27 04:37:09 guenther Exp $	*/
a46 2

extern void __atexit_register_cleanup(void (*)(void));
@


1.21
log
@Use static and __{BEGIN,ENV}_HIDDEN_DECLS to hide a bunch of internal
symbols that are not longer exported.  (This improves the generated code.)

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.20 2011/11/08 18:30:42 guenther Exp $	*/
d46 1
@


1.20
log
@Make __svfscanf() the unlocked, core of vfscanf() and use it in
sscanf()/vsscanf() where locking is unnecessary.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.19 2011/10/16 13:20:51 stsp Exp $	*/
d44 6
a58 1
void	_cleanup(void);
a60 1
int	_fwalk(int (*)(FILE *));
a69 1
extern void __atexit_register_cleanup(void (*)(void));
d71 1
@


1.19
log
@Add wscanf(3) and friends. Based on our scanf(3) implementation, with wide
character support changes based on code from FreeBSD.
ok espie guenther; man page help from schwarze
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.18 2011/04/28 17:38:46 stsp Exp $	*/
d62 1
@


1.18
log
@Bring back wprintf. We've sorted out what to do for gcc2 and gcc3.
"Yes, go ahead then" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.16 2011/04/24 07:46:58 stsp Exp $	*/
d60 1
d63 1
@


1.17
log
@Back out wprintf until we've determined what to do for gcc2 and gcc3 arches.
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.15 2009/11/09 00:18:27 kurt Exp $	*/
d61 1
@


1.16
log
@Add fwprintf, swprintf, vfwprintf, vswprintf, vwprintf, and wprintf to libc.
Based on our vfprintf etc. implementations. Wide character parts based on
NetBSD but with lots of macros expanded. Minor bump for libc.
ok kettenis espie
@
text
@a60 1
int	__vfwprintf(FILE * __restrict, const wchar_t * __restrict, __va_list);
@


1.15
log
@Fix the handle locking in stdio to use flockfile/funlockfile
internally when and where required.  Macros in <stdio.h> are updated
to automatically call the underlying functions when the process is
threaded to obtain the necessary locking.  A private mutex is added
to protect __sglue, the internal list of FILE handles, and another
to protect the one-time initialization.  Some routines in libc that
use getc() change to use getc_unlocked() as they're either protected
by their own lock or aren't thread-safe routines anyway.

committing on behalf of and okay guenther@@ now that we have install
media space available.
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.14 2009/10/22 01:23:16 guenther Exp $	*/
d61 1
@


1.14
log
@Back out previous commit, as it caused too much growth for the install
media to fit
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.13 2009/10/21 16:04:23 guenther Exp $	*/
d45 1
d60 1
d91 3
@


1.13
log
@Fix the handle locking in stdio to use flockfile/funlockfile
internally when and where required.  Macros in <stdio.h> are updated
to automatically call the underlying functions when the process is
threaded to obtain the necessary locking.  A private mutex is added
to protect __sglue, the internal list of FILE handles, and another
to protect the one-time initialization.  Some routines in libc that
use getc() change to use getc_unlocked() as they're either protected
by their own lock or aren't thread-safe routines anyway.

ok kurt@@, earlier version tested by sthen@@ and jj@@
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.12 2005/10/10 17:37:44 espie Exp $	*/
a44 1
int	__sflush_locked(FILE *);
a58 1
int	__vfprintf(FILE *, const char *, __va_list);
a88 3

#define FLOCKFILE(fp)	do { if (__isthreaded) flockfile(fp); } while (0)
#define FUNLOCKFILE(fp)	do { if (__isthreaded) funlockfile(fp); } while (0)
@


1.12
log
@fix a few warnings, keep the crypt stuff for later.
okay otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.11 2005/06/17 20:40:32 espie Exp $	*/
d45 1
d60 1
d91 3
@


1.11
log
@
next citrus step.

reviewed by millert, otto, kevlo, naddy, kettenis...
libc+libstdc++ bump
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.10 2005/04/30 09:25:17 espie Exp $	*/
d58 1
@


1.10
log
@Change internals of FILE: reuse the unget buffer field to access an
extended attribute data structure (pimpl idiom). Idea taken from citrus.
Much discussion with deraadt@@, otto@@, millert@@...

This is the least disruptive way to extend FILE, since its size can't really
change without this being a flag day. So the size doesn't change.

Actual additions to the structure will come in separate steps, since this
change is nasty enough on its own.

Tests by otto@@ and others, careful reading of code by otto@@ and millert@@.

This is definitely a major bump, and has been checked to not impact a
full ports build.
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.9 2005/03/31 18:36:29 pat Exp $	*/
d40 2
@


1.9
log
@make sure the implementation matches the prototype..
char const * -> const char *

ok otto@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.8 2005/03/30 18:51:49 pat Exp $	*/
d40 2
d71 1
a71 1
#define	HASUB(fp) ((fp)->_ub._base != NULL)
d73 3
a75 3
	if ((fp)->_ub._base != (fp)->_ubuf) \
		free((char *)(fp)->_ub._base); \
	(fp)->_ub._base = NULL; \
@


1.8
log
@ansi + de-register

ok otto deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.7 2005/03/08 15:43:31 moritz Exp $	*/
d44 1
a44 1
int	__swrite(void *, char const *, int);
@


1.7
log
@fix typo in comment.
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.6 2003/06/02 20:18:37 millert Exp $	*/
d55 1
a55 1
extern void __atexit_register_cleanup(void (*)());
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.5 2002/09/14 22:03:14 dhartmei Exp $	*/
d59 1
a59 1
 * Return true iff the given FILE cannot be written now.
@


1.5
log
@Move __cleanup into mprotect'ed page to prevent unintentional modifications
similar to the atexit handlers. Idea and help deraadt@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.4 2002/02/17 19:42:23 millert Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.3 2002/02/16 21:27:24 millert Exp $	*/
a52 1
void	(*__cleanup)(void);
d59 1
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.2 1996/08/19 08:32:54 tholo Exp $	*/
d56 1
a56 1
int	_fwalk __P((int (*)(FILE *)));
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
/*	$OpenBSD: local.h,v 1.5 1995/02/02 02:10:05 jtc Exp $	*/
d44 12
a55 12
int	__sflush __P((FILE *));
FILE	*__sfp __P((void));
int	__srefill __P((FILE *));
int	__sread __P((void *, char *, int));
int	__swrite __P((void *, char const *, int));
fpos_t	__sseek __P((void *, fpos_t, int));
int	__sclose __P((void *));
void	__sinit __P((void));
void	_cleanup __P((void));
void	(*__cleanup) __P((void));
void	__smakebuf __P((FILE *));
int	__swhatbuf __P((FILE *, size_t *, int *));
d57 2
a58 2
int	__swsetup __P((FILE *));
int	__sflags __P((const char *, int *));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: local.h,v 1.5 1995/02/02 02:10:05 jtc Exp $	*/
a36 2
 *
 *	@@(#)local.h	8.2 (Berkeley) 1/2/94
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
