head	1.34;
access;
symbols
	OPENBSD_6_0:1.33.0.8
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.33.0.4
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.33.0.6
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.33.0.2
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.32.0.4
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.31.0.6
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.31.0.2
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.29.0.16
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.14
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.12
	OPENBSD_5_0:1.29.0.10
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.8
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.6
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.2
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.29.0.4
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.28.0.6
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.28.0.4
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.28.0.2
	OPENBSD_4_3_BASE:1.28
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.25.0.2
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.21.0.6
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.4
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.2
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.19.0.6
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.34
date	2016.08.27.16.39.42;	author schwarze;	state Exp;
branches;
next	1.33;
commitid	GbfI3QpaSxwylTLP;

1.33
date	2014.11.04.20.06.29;	author tedu;	state Exp;
branches;
next	1.32;
commitid	e6gvSv6Zw0bNAZZL;

1.32
date	2014.03.23.23.15.58;	author tedu;	state Exp;
branches;
next	1.31;

1.31
date	2013.07.17.05.42.11;	author schwarze;	state Exp;
branches;
next	1.30;

1.30
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2009.06.02.22.28.18;	author ray;	state Exp;
branches;
next	1.28;

1.28
date	2007.09.07.05.17.59;	author cloder;	state Exp;
branches;
next	1.27;

1.27
date	2007.08.08.07.20.45;	author ray;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.31.19.19.31;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2006.10.30.15.58.59;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2006.10.15.06.39.23;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.14.23.57.39;	author cloder;	state Exp;
branches;
next	1.22;

1.22
date	2006.10.14.18.50.32;	author cloder;	state Exp;
branches;
next	1.21;

1.21
date	2005.07.26.03.30.25;	author jaredy;	state Exp;
branches;
next	1.20;

1.20
date	2005.02.25.03.12.44;	author cloder;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.02.20.18.37;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.01.18.56.04;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2003.05.17.10.30.10;	author pjanzen;	state Exp;
branches;
next	1.16;

1.16
date	2003.05.17.10.28.33;	author pjanzen;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.06.20.48.35;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.20.18.30.23;	author pvalchev;	state Exp;
branches;
next	1.13;

1.13
date	2002.04.05.01.44.38;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.05.16.53.59;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.24.00.30.58;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.18.03.01.34;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.19.22.23.48;	author ericj;	state Exp;
branches;
next	1.8;

1.8
date	99.11.15.07.45.57;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	99.09.15.21.26.58;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.07.09.13.35.23;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.05.25.13.06.46;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.04.02.16.21.35;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.32.31;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.31.01.31.02;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Stop recommending the non-standard and slightly dangerous fgetln(3).
Recommend POSIX getline(3) instead.
@
text
@.\"	$OpenBSD: fgets.3,v 1.33 2014/11/04 20:06:29 tedu Exp $
.\"
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: November 4 2014 $
.Dt FGETS 3
.Os
.Sh NAME
.Nm fgets
.Nd get a line from a stream
.Sh SYNOPSIS
.In stdio.h
.Ft char *
.Fn fgets "char *str" "int size" "FILE *stream"
.Sh DESCRIPTION
The
.Fn fgets
function reads at most
.Ar size Ns \-1
characters from the given
.Fa stream
and stores them in the string
.Fa str .
Reading stops when a newline character is found,
at end-of-file, on error, or after
.Ar size Ns \-1
bytes are read.
The newline, if any, is retained.
The string will be NUL-terminated if
.Fn fgets
succeeds; otherwise the contents of
.Fa str
are undefined.
.Sh RETURN VALUES
Upon successful completion,
.Fn fgets
returns a pointer to the string.
If end-of-file or an error occurs before any characters are read,
it returns
.Dv NULL .
The
.Fn fgets
function does not distinguish between end-of-file and error,
and callers must use
.Xr feof 3
and
.Xr ferror 3
to determine which occurred.
Whether
.Fn fgets
can possibly fail with a
.Ar size
argument of 1 is implementation-dependent.
On
.Ox ,
.Fn fgets
will never return
.Dv NULL
when
.Ar size
is 1.
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er EBADF
The given
.Fa stream
is not a readable stream.
.It Bq Er EINVAL
The given
.Fa size
is less than or equal to 0.
.El
.Pp
The function
.Fn fgets
may also fail and set
.Va errno
for any of the errors specified for the routines
.Xr fflush 3 ,
.Xr fstat 2 ,
.Xr read 2 ,
or
.Xr malloc 3 .
.Sh SEE ALSO
.Xr feof 3 ,
.Xr ferror 3 ,
.Xr getline 3
.Sh STANDARDS
The function
.Fn fgets
conforms to
.St -ansiC .
.Sh HISTORY
The function
.Fn fgets
first appeared in
.At v7 .
.Sh CAVEATS
The following bit of code illustrates a case where the programmer assumes a
string is too long if it does not contain a newline:
.Bd -literal -offset indent
char buf[1024], *p;

while (fgets(buf, sizeof(buf), fp) != NULL) {
	if ((p = strchr(buf, '\en')) == NULL) {
		fprintf(stderr, "input line too long.\en");
		exit(1);
	}
	*p = '\e0';
	printf("%s\en", buf);
}
.Ed
.Pp
While the error would be true if a line \*(Gt 1023 characters were read,
it would be false in two other cases:
.Bl -enum -offset indent
.It
If the last line in a file does not contain a newline, the string returned by
.Fn fgets
will not contain a newline either.
Thus
.Fn strchr
will return
.Dv NULL
and the program will terminate, even if the line was valid.
.It
All C string functions, including
.Fn strchr ,
correctly assume the end of the string is represented by a NUL
.Pq Sq \e0
character.
If the first character of a line returned by
.Fn fgets
were NUL,
.Fn strchr
would immediately return without considering the rest of the returned text
which may indeed include a newline.
.El
.Pp
Consider using
.Xr getline 3
instead when dealing with untrusted input.
.Pp
It is erroneous to assume that
.Fn fgets
never returns an empty string when successful.
If a line starts with the NUL character, fgets will store the NUL and
continue reading until it encounters a newline or end-of-file.
This will result in an empty string being returned.
The following bit of code illustrates a case where the programmer assumes
the string cannot be zero length.
.Bd -literal -offset indent
char buf[1024];

if (fgets(buf, sizeof(buf), fp) != NULL) {
	/* WRONG */
	if (buf[strlen(buf) - 1] == '\en')
		buf[strlen(buf) - 1] = '\e0';
}
.Ed
.Pp
If
.Fn strlen
returns 0, the index into the buffer becomes \-1.
One way to concisely and correctly trim a newline is shown below.
.Bd -literal -offset indent
char buf[1024];

if (fgets(buf, sizeof(buf), fp) != NULL)
	buf[strcspn(buf, "\en")] = '\e0';
.Ed
@


1.33
log
@explicitly clarify that reading also stops after size-1 bytes
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.32 2014/03/23 23:15:58 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: March 23 2014 $
d116 1
a116 1
.Xr fgetln 3
d170 1
a170 1
.Xr fgetln 3
@


1.32
log
@c11 compliance: remove gets()
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.31 2013/07/17 05:42:11 schwarze Exp $
d34 1
a34 1
.Dd $Mdocdate: July 17 2013 $
d54 3
a56 1
at end-of-file, or on error.
@


1.31
log
@more library history
facts checked by sobrado@@
style tweaks and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.30 2013/06/05 03:39:23 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: June 5 2013 $
d38 1
a38 2
.Nm fgets ,
.Nm gets
a43 2
.Ft char *
.Fn gets "char *str"
a60 14
.Pp
The
.Fn gets
function is equivalent to
.Fn fgets
with an infinite
.Ar size
and a
.Fa stream
of
.Em stdin ,
except that the newline character (if any) is not stored in the string.
It is the caller's responsibility to ensure that the input line,
if any, is sufficiently short to fit in the string.
d64 1
a64 4
and
.Fn gets
return
a pointer to the string.
d66 1
a66 1
they return
d70 2
a71 4
and
.Fn gets
functions
do not distinguish between end-of-file and error, and callers must use
a110 7
.Pp
The function
.Fn gets
may also fail and set
.Va errno
for any of the errors specified for the routine
.Xr getchar 3 .
d116 1
a116 1
The functions
d118 1
a118 3
and
.Fn gets
conform to
d121 1
a121 1
The functions
a122 2
and
.Fn gets
a198 12
.Sh BUGS
Since it is usually impossible to ensure that the next input line
is less than some arbitrary length, and because overflowing the
input buffer is almost invariably a security violation, programs
should
.Em NEVER
use
.Fn gets .
The
.Fn gets
function exists purely to conform to
.St -ansiC .
@


1.30
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.29 2009/06/02 22:28:18 ray Exp $
d34 1
a34 1
.Dd $Mdocdate: June 2 2009 $
d151 7
@


1.29
log
@Set errno to EINVAL when fgets is given a non-positive size.

OK millert otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.28 2007/09/07 05:17:59 cloder Exp $
d34 1
a34 1
.Dd $Mdocdate: September 7 2007 $
d42 1
a42 1
.Fd #include <stdio.h>
@


1.28
log
@Say NUL when referring to \0
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.27 2007/08/08 07:20:45 ray Exp $
d34 1
a34 1
.Dd $Mdocdate: August 8 2007 $
d117 4
@


1.27
log
@Show how to use strcspn(3) to trim newlines.

OK jmc and millert.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.26 2007/05/31 19:19:31 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: May 31 2007 $
d183 1
a183 1
were null,
@


1.26
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.25 2006/10/30 15:58:59 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate$
d214 1
a214 1
The correct way to trim a newline is shown below.
d218 2
a219 4
if (fgets(buf, sizeof(buf), fp) != NULL) {
	if (buf[0] != '\e0' && buf[strlen(buf) - 1] == '\en')
		buf[strlen(buf) - 1] = '\e0';
}
@


1.25
log
@suceed -> succeed; from chad dougherty
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.24 2006/10/15 06:39:23 jmc Exp $
d34 1
a34 1
.Dd June 4, 1993
@


1.24
log
@mark up `>';
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.23 2006/10/14 23:57:39 cloder Exp $
d61 1
a61 1
suceeds; otherwise the contents of
@


1.23
log
@Add a CAVEAT section that describes how to properly trim a newline from
a string, being careful to deal with 0-length strings. Help and input
from jmc, ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.22 2006/10/14 18:50:32 cloder Exp $
d163 2
a164 2
While the error would be true if a line > 1023 characters were read, it would
be false in two other cases:
@


1.22
log
@Make fgets description much clearer with respect to its exact behavior.
OK and input from deraadt, jmc, millert.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.21 2005/07/26 03:30:25 jaredy Exp $
d150 2
a151 2
.Bd -literal
	char buf[1024], *p;
d153 4
a156 7
	while (fgets(buf, sizeof(buf), fp) != NULL) {
		if ((p = strchr(buf, '\en')) == NULL) {
			fprintf(stderr, "input line too long.\en");
			exit(1);
		}
		*p = '\e0';
		printf("%s\en", buf);
d158 3
d192 31
@


1.21
log
@- typos, punctuation, spacing, macro, layout, etc. fixes
- avoid first person

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.20 2005/02/25 03:12:44 cloder Exp $
d50 3
a52 3
function reads at most one less than the number of characters specified by
.Ar size
from the given
d59 5
a63 3
In any case, a
.Ql \e0
character is appended to end the string.
@


1.20
log
@Be correct in our man pages when talking about NUL termination (that is,
termination with '\0') vs. null termination.
Input from krw@@, jaredy@@, jmc@@.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.19 2003/06/02 20:18:37 millert Exp $
d88 1
a88 1
and functions
d90 1
@


1.19
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.18 2003/06/01 18:56:04 jmc Exp $
d175 1
a175 1
correctly assume the end of the string is represented by a null
@


1.18
log
@- section reorder
- kill unnecessary .Ns macros
- add some man page section numbers to .Xr's
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.17 2003/05/17 10:30:10 pjanzen Exp $
d18 1
a18 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.17
log
@Better English.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.16 2003/05/17 10:28:33 pjanzen Exp $
d137 11
a192 11
.Sh SEE ALSO
.Xr feof 3 ,
.Xr ferror 3 ,
.Xr fgetln 3
.Sh STANDARDS
The functions
.Fn fgets
and
.Fn gets
conform to
.St -ansiC .
@


1.16
log
@Document behaviour when size = 1.  ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.15 2003/03/06 20:48:35 jmc Exp $
d61 1
a61 1
at end-of-file or error.
d63 1
a63 1
In any case a
@


1.15
log
@.Xr typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.14 2002/07/20 18:30:23 pvalchev Exp $
d99 13
@


1.14
log
@correct check for strchr() failure in EXAMPLE; from pinskia@@physics.uc.edu
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.13 2002/04/05 01:44:38 aaron Exp $
d55 1
a55 1
.Xr size
d72 1
a72 1
.Xr size
@


1.13
log
@Use the more likely pointer in a sample code fragment; miod@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.12 2002/03/05 16:53:59 millert Exp $
d131 1
a131 1
		if ((p = strchr(buf, '\en')) != NULL) {
@


1.12
log
@style(9) for the example; Alexander Yurchenko
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.11 2000/12/24 00:30:58 aaron Exp $
d136 1
a136 1
		printf("%s\en", p);
@


1.11
log
@Various repairs, mostly to get rid of short lines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.10 2000/04/18 03:01:34 aaron Exp $
d130 2
a131 2
	while (fgets(buf, sizeof(buf), fp)) {
		if (!(p = strchr(buf, '\en'))) {
@


1.10
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.9 2000/02/19 22:23:48 ericj Exp $
d54 1
a54 2
function
reads at most one less than the number of characters specified by
d69 1
a69 2
function
is equivalent to
d92 1
a92 2
and
functions
d190 1
a190 2
function
exists purely to conform to
@


1.9
log
@fix example. ok aaron@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.8 1999/11/15 07:45:57 deraadt Exp $
d149 2
a150 1
will not contain a newline either. Thus
@


1.8
log
@typos
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.7 1999/09/15 21:26:58 aaron Exp $
d134 1
a134 1
		if (!(p = strchr(buf, '\en')) {
@


1.7
log
@Add CAVEATS sections.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.6 1999/07/09 13:35:23 aaron Exp $
d135 1
a135 1
			fprintf(stderr, "input line too long.\n");
@


1.6
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.5 1999/05/25 13:06:46 aaron Exp $
d127 44
@


1.5
log
@punctuation
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.4 1999/04/02 16:21:35 aaron Exp $
d85 1
a85 1
and 
d89 1
a89 1
If end-of-file or an error occurs before any characters are read, 
@


1.4
log
@.Pp macros do not belong immiedately after .Sh section header lines
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.3 1996/08/19 08:32:31 tholo Exp $
d91 1
a91 1
.Dv NULL.
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
.\"	$OpenBSD: fgets.3,v 1.5 1995/02/02 01:15:38 jtc Exp $
a82 1
.Pp
@


1.2
log
@int not size_t, checked against K&R pg247; netbsd pr#2664, msaitoh@@spa.is.uec.ac.jp
@
text
@d1 1
a1 1
.\"	$NetBSD: fgets.3,v 1.5 1995/02/02 01:15:38 jtc Exp $
a36 2
.\"
.\"     @@(#)fgets.3	8.1 (Berkeley) 6/4/93
@


1.1
log
@Initial revision
@
text
@d50 1
a50 1
.Fn fgets "char *str" "size_t size" "FILE *stream"
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
