head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2015.09.12.16.23.14;	author guenther;	state Exp;
branches;
next	1.7;
commitid	crCjb99r4AuxzOpl;

1.7
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.6;
commitid	lTMF8Y3C9fQGd6jQ;

1.6
date	2015.02.05.12.59.57;	author millert;	state Exp;
branches;
next	1.5;
commitid	DTQbfd4poqBW8iSJ;

1.5
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	0DYulI8hhujBHMcR;

1.4
date	2014.10.08.05.28.19;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	6DQLK8Lhk4I63keS;

1.3
date	2014.03.06.07.28.21;	author gerhard;	state Exp;
branches;
next	1.2;

1.2
date	2013.04.03.03.11.53;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.27.15.06.25;	author mpi;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Wrap <inttypes.h> and finish wrapping of <wchar.h> so that calls go direct
and the symbols not in the C standard are weak
@
text
@/*	$OpenBSD: open_wmemstream.c,v 1.7 2015/08/31 02:53:57 guenther Exp $	*/

/*
 * Copyright (c) 2011 Martin Pieuchot <mpi@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <wchar.h>
#include "local.h"

#define	MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

struct state {
	wchar_t		 *string;	/* actual stream */
	wchar_t		**pbuf;		/* point to the stream */
	size_t		 *psize;	/* point to min(pos, len) */
	size_t		  pos;		/* current position */
	size_t		  size;		/* number of allocated wchar_t */
	size_t		  len;		/* length of the data */
	mbstate_t	  mbs;		/* conversion state of the stream */
};

static int
wmemstream_write(void *v, const char *b, int l)
{
	struct state	*st = v;
	wchar_t		*p;
	size_t		 nmc, len, end;

	end = (st->pos + l);

	if (end >= st->size) {
		/* 1.6 is (very) close to the golden ratio. */
		size_t	sz = st->size * 8 / 5;

		if (sz < end + 1)
			sz = end + 1;
		p = reallocarray(st->string, sz, sizeof(wchar_t));
		if (!p)
			return (-1);
		bzero(p + st->size, (sz - st->size) * sizeof(wchar_t));
		*st->pbuf = st->string = p;
		st->size = sz;
	}

	nmc = (st->size - st->pos) * sizeof(wchar_t);
	len = mbsnrtowcs(st->string + st->pos, &b, nmc, l, &st->mbs);
	if (len == (size_t)-1)
		return (-1);
	st->pos += len;

	if (st->pos > st->len) {
		st->len = st->pos;
		st->string[st->len] = L'\0';
	}

	*st->psize = st->pos;

	return (len);
}

static fpos_t
wmemstream_seek(void *v, fpos_t off, int whence)
{
	struct state	*st = v;
	ssize_t		 base = 0;

	switch (whence) {
	case SEEK_SET:
		break;
	case SEEK_CUR:
		base = st->pos;
		break;
	case SEEK_END:
		base = st->len;
		break;
	}

	if (off > (SIZE_MAX / sizeof(wchar_t)) - base || off < -base) {
		errno = EOVERFLOW;
		return (-1);
	}

	/*
	 * XXX Clearing mbs here invalidates shift state for state-
	 * dependent encodings, but they are not (yet) supported.
	 */
	bzero(&st->mbs, sizeof(st->mbs));

	st->pos = base + off;
	*st->psize = MINIMUM(st->pos, st->len);

	return (st->pos);
}

static int
wmemstream_close(void *v)
{
	struct state	*st = v;

	free(st);

	return (0);
}

FILE *
open_wmemstream(wchar_t **pbuf, size_t *psize)
{
	struct state	*st;
	FILE		*fp;

	if (pbuf == NULL || psize == NULL) {
		errno = EINVAL;
		return (NULL);
	}

	if ((st = malloc(sizeof(*st))) == NULL)
		return (NULL);

	if ((fp = __sfp()) == NULL) {
		free(st);
		return (NULL);
	}

	st->size = BUFSIZ * sizeof(wchar_t);
	if ((st->string = calloc(1, st->size)) == NULL) {
		free(st);
		fp->_flags = 0;
		return (NULL);
	}

	*st->string = L'\0';
	st->pos = 0;
	st->len = 0;
	st->pbuf = pbuf;
	st->psize = psize;
	bzero(&st->mbs, sizeof(st->mbs));

	*pbuf = st->string;
	*psize = st->len;

	fp->_flags = __SWR;
	fp->_file = -1;
	fp->_cookie = st;
	fp->_read = NULL;
	fp->_write = wmemstream_write;
	fp->_seek = wmemstream_seek;
	fp->_close = wmemstream_close;
	_SET_ORIENTATION(fp, 1);

	return (fp);
}
@


1.7
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: open_wmemstream.c,v 1.6 2015/02/05 12:59:57 millert Exp $	*/
a169 1
DEF_WEAK(open_wmemstream);
@


1.6
log
@Include stdint.h, not limits.h to get SIZE_MAX.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: open_wmemstream.c,v 1.5 2015/01/16 16:48:51 deraadt Exp $	*/
d170 1
@


1.5
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: open_wmemstream.c,v 1.4 2014/10/08 05:28:19 deraadt Exp $	*/
a20 1
#include <limits.h>
d22 1
@


1.4
log
@obvious reallocarray(); ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: open_wmemstream.c,v 1.3 2014/03/06 07:28:21 gerhard Exp $	*/
a18 2
#include <sys/param.h>

d28 2
d108 1
a108 1
	*st->psize = MIN(st->pos, st->len);
@


1.3
log
@Fix unsigned comparision.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: open_wmemstream.c,v 1.2 2013/04/03 03:11:53 guenther Exp $	*/
d55 1
a55 1
		p = realloc(st->string, sz * sizeof(wchar_t));
@


1.2
log
@Set the stream orientation in open_{,w}memstream().
Check it in the regress test

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: open_wmemstream.c,v 1.1 2013/03/27 15:06:25 mpi Exp $	*/
d65 2
a66 2
	if (len < 0)
		return (len);
@


1.1
log
@Add an open_wmemstream(3) implementation and fix various issues for
fmemopen(3) and open_memstream(3).

With inputs from millert@@, stsp@@, guenther@@, tedu@@ and matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: open_memstream.c,v 1.1 2013/01/01 17:41:13 mpi Exp $	*/
d166 1
@

