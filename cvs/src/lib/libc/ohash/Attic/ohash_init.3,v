head	1.19;
access;
symbols
	OPENBSD_5_5:1.17.0.6
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.4
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.16
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.14
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.10
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.12
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.8
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.6
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.13.0.6
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.4
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3;
locks; strict;
comment	@.\" @;


1.19
date	2014.05.12.19.27.24;	author espie;	state dead;
branches;
next	1.18;

1.18
date	2014.05.12.19.07.37;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2012.06.01.02.49.07;	author lteo;	state Exp;
branches;
next	1.15;

1.15
date	2011.06.03.22.51.16;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.31.19.19.30;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.16.15.52.25;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.29.08.51.13;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2005.07.22.03.23.37;	author jaredy;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.25.03.12.43;	author cloder;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.22.20.00.16;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.16.10.48.39;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.23.23.08.45;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.07.08.52.43;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.01.07.48.28;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.24.12.19.24;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.11.07.52.28;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.14.54.45;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.02.13.27.07;	author espie;	state Exp;
branches;
next	;


desc
@@


1.19
log
@these files have moved to libutil
@
text
@.\"	$OpenBSD: ohash_init.3,v 1.18 2014/05/12 19:07:37 espie Exp $
.\" Copyright (c) 1999 Marc Espie <espie@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: May 12 2014 $
.Dt OHASH_INIT 3
.Os
.Sh NAME
.Nm ohash_init ,
.Nm ohash_delete ,
.Nm ohash_lookup_interval ,
.Nm ohash_lookup_memory ,
.Nm ohash_find ,
.Nm ohash_remove ,
.Nm ohash_insert ,
.Nm ohash_first ,
.Nm ohash_next ,
.Nm ohash_entries
.Nd light-weight open hashing
.Sh SYNOPSIS
.In stdint.h
.In stddef.h
.In ohash.h
.Ft void
.Fn ohash_init "struct ohash *h" "unsigned int size" "struct ohash_info *info"
.Ft void
.Fn ohash_delete "struct ohash *h"
.Ft "unsigned int"
.Fn ohash_lookup_interval "struct ohash *h" "const char *start" "const char *end" "uint32_t hv"
.Ft "unsigned int"
.Fn ohash_lookup_memory "struct ohash *h" "const char *k" "size_t s" "uint32_t hv"
.Ft void *
.Fn ohash_find "struct ohash *h" "unsigned int i"
.Ft void *
.Fn ohash_remove "struct ohash *h" "unsigned int i"
.Ft void *
.Fn ohash_insert "struct ohash *h" "unsigned int i" "void *p"
.Ft void *
.Fn ohash_first "struct ohash *h" "unsigned int *i"
.Ft void *
.Fn ohash_next "struct ohash *h" "unsigned int *i"
.Ft "unsigned int"
.Fn ohash_entries "struct ohash *h"
.Sh DESCRIPTION
These functions have been designed as a fast, extensible alternative to
the usual hash table functions.
They provide storage and retrieval of records indexed by keys,
where a key is a contiguous sequence of bytes at a fixed position in
each record.
Keys can either be NUL-terminated strings or fixed-size memory areas.
All functions take a pointer to an ohash structure as the
.Fa h
function argument.
Storage for this structure should be provided by user code.
.Pp
.Fn ohash_init
initializes the table to store roughly 2 to the power
.Fa size
elements.
.Fa info
is a pointer to a
.Fa struct ohash_info .
.Bd -literal -offset indent
struct ohash_info {
	ptrdiff_t key_offset;
	void *data;	/* user data */
	void *(*calloc)(size_t, size_t, void *);
	void (*free)(void *, void *);
	void *(*alloc)(size_t, void *);
};
.Ed
.Pp
The
.Va offset
field holds the position of the key in each record;
the
.Va calloc
and
.Va free
fields are pointers to 
.Xr calloc 3
and
.Xr free 3 Ns -like
functions, used for managing the table internal storage;
the
.Va alloc
field is only used by the utility function
.Xr ohash_create_entry 3 .
.Pp
Each of these functions are called similarly to their standard counterpart,
but with an extra 
.Ft void *
parameter corresponding to the content of the field
.Fa data ,
which can be used to communicate specific information to the functions.
.Pp
.Fn ohash_init
stores a copy of those fields internally, so
.Fa info
can be reclaimed after initialization.
.Pp
.Fn ohash_delete
frees storage internal to
.Fa h .
Elements themselves should be freed by the user first, using for instance
.Fn ohash_first
and
.Fn ohash_next .
.Pp
.Fn ohash_lookup_interval
and
.Fn ohash_lookup_memory
are the basic look-up element functions.
The hashing function result is provided by the user as
.Fa hv .
These return a
.Qq slot
in the ohash table
.Fa h ,
to be used with
.Fn ohash_find ,
.Fn ohash_insert ,
or
.Fn ohash_remove .
This slot is only valid up to the next call to
.Fn ohash_insert
or
.Fn ohash_remove .
.Pp
.Fn ohash_lookup_interval
handles string-like keys.
.Fn ohash_lookup_interval
assumes the key is the interval between
.Fa start
and
.Fa end ,
exclusive,
though the actual elements stored in the table should only contain
NUL-terminated keys.
.Pp
.Fn ohash_lookup_memory
assumes the key is the memory area starting at
.Fa k
of size
.Fa s .
All bytes are significant in key comparison.
.Pp
.Fn ohash_find
retrieves an element from a slot
.Fa i
returned by the
.Fn ohash_lookup*
functions.
It returns
.Dv NULL
if the slot is empty.
.Pp
.Fn ohash_insert
inserts a new element
.Fa p
at slot
.Fa i .
Slot
.Fa i
must be empty and element
.Fa p
must have a key corresponding to the
.Fn ohash_lookup*
call.
.Pp
.Fn ohash_remove
removes the element at slot
.Fa i .
It returns the removed element, for user code to dispose of, or
.Dv NULL
if the slot was empty.
.Pp
.Fn ohash_first
and
.Fn ohash_next
can be used to access all elements in an ohash table, like this:
.Bd -literal -offset indent
for (n = ohash_first(h, &i); n != NULL; n = ohash_next(h, &i))
	do_something_with(n);
.Ed
.Pp
.Fa i
points to an auxiliary unsigned integer used to record the current position
in the ohash table.
Those functions are safe to use even while entries are added to/removed
from the table, but in such a case they don't guarantee that new entries
will be returned.
As a special case, they can safely be used to free elements in the table.
.Pp
.Fn ohash_entries
returns the number of elements in the hash table.
.Sh STORAGE HANDLING
Only
.Fn ohash_init ,
.Fn ohash_insert ,
.Fn ohash_remove
and
.Fn ohash_delete
may call the user-supplied memory functions:
.Bd -literal -offset indent
p = (*info->calloc)(n, sizeof_record, info->data);
/* copy data from old to p */
(*info->free)(old, info->data);
.Ed
.Pp
It is the responsibility of the user memory allocation code to verify
that those calls did not fail.
.Pp
If memory allocation fails,
.Fn ohash_init
returns a useless hash table.
.Fn ohash_insert
and
.Fn ohash_remove
still perform the requested operation, but the returned table should be
considered read-only.
It can still be accessed by
.Fn ohash_lookup* ,
.Fn ohash_find ,
.Fn ohash_first
and
.Fn ohash_next
to dump relevant information to disk before aborting.
.Sh THREAD SAFETY
The open hashing functions are not thread-safe by design.
In particular, in a threaded environment, there is no guarantee that a
.Qq slot
will not move between a
.Fn ohash_lookup*
and a
.Fn ohash_find ,
.Fn ohash_insert
or
.Fn ohash_remove
call.
.Pp
Multi-threaded applications should explicitly protect ohash table access.
.Sh SEE ALSO
.Xr hcreate 3 ,
.Xr ohash_interval 3
.Rs
.%A Donald E. Knuth
.%B The Art of Computer Programming
.%V Vol. 3
.%P pp 506-550
.%D 1973
.Re
.Sh STANDARDS
Those functions are completely non-standard and should be avoided in
portable programs.
.Sh HISTORY
Those functions were designed and written for
.Ox
.Xr make 1
by Marc Espie in 1999.
@


1.18
log
@tweak interface to do the right thing, after useful comments from millert@@
(mostly use a calloc function to avoid potential integer overflow)
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.17 2013/06/05 03:39:23 tedu Exp $
d16 1
a16 1
.Dd $Mdocdate: June 5 2013 $
@


1.17
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.16 2012/06/01 02:49:07 lteo Exp $
d16 1
a16 1
.Dd $Mdocdate: June 1 2012 $
d72 20
a91 1
holds the position of the key in each record, and two pointers to
d95 17
a111 1
functions, to use for managing the table internal storage.
d215 7
a221 1
may call the user-supplied memory functions.
@


1.16
log
@Fix document titles.

ok haesbaert jmc henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.15 2011/06/03 22:51:16 jmc Exp $
d16 1
a16 1
.Dd $Mdocdate: June 3 2011 $
d32 3
a34 3
.Fd #include <stdint.h>
.Fd #include <stddef.h>
.Fd #include <ohash.h>
@


1.15
log
@+.Xr hcreate 3 ,

requested by Daniel Dickman
ok espie
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.14 2007/05/31 19:19:30 jmc Exp $
d16 2
a17 2
.Dd $Mdocdate: May 31 2007 $
.Dt OPEN_HASH 3
@


1.14
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.13 2006/01/16 15:52:25 espie Exp $
d16 1
a16 1
.Dd $Mdocdate$
d214 1
@


1.13
log
@use standard type uint32_t, instead of BSD-specific u_int32_t

tell user to get it through stdint.h (note old sys/types.h still works,
for now).

okay millert@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.12 2005/07/29 08:51:13 jmc Exp $
d16 1
a16 1
.Dd November 3, 1999
@


1.12
log
@tidy up SEE ALSO;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.11 2005/07/22 03:23:37 jaredy Exp $
d32 1
a32 1
.Fd #include <sys/types.h>
d40 1
a40 1
.Fn ohash_lookup_interval "struct ohash *h" "const char *start" "const char *end" "u_int32_t hv"
d42 1
a42 1
.Fn ohash_lookup_memory "struct ohash *h" "const char *k" "size_t s" "u_int32_t hv"
@


1.11
log
@- sync prototypes and header excerpts to reality
- punctuation, rewording, typos/spelling, macro, and layout fixes
- add crossrefs where relevant

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.10 2005/02/25 03:12:43 cloder Exp $
d214 1
a221 1
.Xr ohash_interval 3
@


1.10
log
@Be correct in our man pages when talking about NUL termination (that is,
termination with '\0') vs. null termination.
Input from krw@@, jaredy@@, jmc@@.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.9 2004/06/22 20:00:16 espie Exp $
d56 1
a56 1
Those functions have been designed as a fast, extensible alternative to
@


1.9
log
@Cosmetic clean-up.
Simpler licence, update copyright years, trim empty lines, ISO declarations.
okay miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.8 2004/04/16 10:48:39 jmc Exp $
d61 1
a61 1
Keys can either be null-terminated strings or fixed-size memory areas.
d115 1
a115 1
null-terminated keys.
@


1.8
log
@more display/list fixes, and a little whitespace;
@
text
@d1 2
a2 1
.\"	$OpenBSD: ohash_init.3,v 1.7 2004/01/23 23:08:45 jmc Exp $
d4 3
a6 1
.\" Copyright (c) 1999 Marc Espie.
d8 7
a14 22
.\" Code written for the OpenBSD project.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
.\" PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.7
log
@`Ns' implies `No', so `Ns No' -> `Ns'; (even simpler in adduser(8))
discussed with todd@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.6 2003/05/07 08:52:43 jmc Exp $
d170 3
a172 4
.Pp
.Bd -literal
	for (n = ohash_first(h, &i); n != NULL; n = ohash_next(h, &i))
		do_something_with(n);
@


1.6
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.5 2002/07/01 07:48:28 espie Exp $
d87 1
a87 1
.Xr free 3 Ns No -like
@


1.5
log
@typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.4 2001/09/24 12:19:24 espie Exp $
d74 1
a74 1
All functions take a pointer to a ohash structure as the
d169 1
a169 1
can be used to access all elements in a ohash table, like this:
d194 1
a194 1
It is the responsability of the user memory allocation code to verify
@


1.4
log
@Better wording
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.3 2001/03/11 07:52:28 aaron Exp $
d214 1
a214 1
In particular, in a threaded envirnonment, there is no guarantee that a
@


1.3
log
@mdoc police.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.2 2001/03/09 14:54:45 art Exp $
d70 1
a70 1
These provide storing and retrieval of records indexed by keys,
d126 1
a126 1
though the actual elements stored in the ohash should contain
d160 1
a160 1
removes element of ohash table at slot
d185 1
a185 1
returns the number of elements in the ohash table.
d197 1
a197 1
In case memory allocation fails,
d199 1
a199 1
returns a useless ohash table.
d213 2
a214 2
The open ohashing functions are not thread-safe by design.
In particular, it cannot be guaranteed that a
d216 1
a216 1
will not move in a threaded environment between a
@


1.2
log
@typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash_init.3,v 1.1 2001/03/02 13:27:07 espie Exp $
d73 1
a73 1
Keys can either be  null-terminated strings, or fixed-size memory areas.
d87 2
a88 2
.Xr free 3
-like functions, to use for managing the table internal storage.
d93 1
a93 1
Elements themselves should be freed by the user first, using  for instance
d143 1
a143 1
.Va NULL
d163 1
a163 1
.Va NULL
d241 1
a241 1
make
@


1.1
log
@Add ohash_* functions to libc.
Ok'd deraadt@@, millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ohash.3,v 1.2 2001/01/28 15:45:44 espie Exp $
d50 1
a50 1
.Fn ohash_delete "struct oohash *h"
@

