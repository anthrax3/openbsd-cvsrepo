head	1.38;
access;
symbols
	OPENBSD_6_1:1.38.0.4
	OPENBSD_6_1_BASE:1.38
	OPENBSD_6_0:1.38.0.2
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.37.0.4
	OPENBSD_5_9_BASE:1.37
	OPENBSD_5_8:1.37.0.6
	OPENBSD_5_8_BASE:1.37
	OPENBSD_5_7:1.37.0.2
	OPENBSD_5_7_BASE:1.37
	OPENBSD_5_6:1.35.0.4
	OPENBSD_5_6_BASE:1.35
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.30.0.2
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.29.0.2
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.28.0.4
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.2
	OPENBSD_5_0:1.27.0.2
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.22.0.2
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.20.0.10
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.6
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.4
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.18.0.8
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.6
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.4
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.6
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.4
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.10.0.6
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.4
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.38
date	2016.03.30.06.38.41;	author jmc;	state Exp;
branches;
next	1.37;
commitid	LN9ijdk9SEnzWAbM;

1.37
date	2014.12.09.07.28.46;	author deraadt;	state Exp;
branches;
next	1.36;
commitid	UWVKyytEKROuOgNx;

1.36
date	2014.11.30.19.43.56;	author deraadt;	state Exp;
branches;
next	1.35;
commitid	1sP0uXsb2s1HOugs;

1.35
date	2014.06.13.02.12.17;	author matthew;	state Exp;
branches;
next	1.34;
commitid	vlLoJ3raVIYl3l4x;

1.34
date	2014.03.23.23.16.48;	author tedu;	state Exp;
branches;
next	1.33;

1.33
date	2014.01.22.21.06.45;	author tedu;	state Exp;
branches;
next	1.32;

1.32
date	2013.12.19.20.52.37;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2013.10.14.06.55.28;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2013.05.13.10.37.02;	author ajacoutot;	state Exp;
branches;
next	1.29;

1.29
date	2012.08.02.13.38.38;	author okan;	state Exp;
branches;
next	1.28;

1.28
date	2012.01.17.02.48.01;	author guenther;	state Exp;
branches;
next	1.27;

1.27
date	2011.07.09.16.32.11;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2011.07.04.04.37.34;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2011.05.28.15.16.46;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2011.04.04.18.16.24;	author stsp;	state Exp;
branches;
next	1.23;

1.23
date	2010.09.24.13.33.00;	author matthew;	state Exp;
branches;
next	1.22;

1.22
date	2010.05.18.22.24.55;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2010.02.03.20.49.00;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2007.10.25.22.41.02;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2007.09.03.14.36.40;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.29.10.05.11;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2005.05.26.12.56.01;	author otto;	state Exp;
branches;
next	1.16;

1.16
date	2005.04.16.12.26.12;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.14.20.59.10;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2005.03.30.03.04.19;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.03.19.56.08;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.20.03.20.09;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.21.20.45.05;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.05.16.27.01;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	99.11.09.11.20.41;	author art;	state Exp;
branches;
next	1.8;

1.8
date	99.09.21.16.44.01;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.04.25.00.10.07;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.11.20.11.18.51;	author d;	state Exp;
branches;
next	1.5;

1.5
date	98.07.01.01.29.44;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.02.07.20.50.25;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.33.54;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.23.31.46;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.38
log
@for some time now mandoc has not required MLINKS to function
correctly - logically complete that now by removing MLINKS from base;

authors need only to ensure there is an entry in NAME for any function/
util being added. MLINKS will still work, and remain for perl to ease
upgrades;

ok nicm (curses) bcook (ssl)
ok schwarze, who provided a lot of feedback and assistance
ok tb natano jung
@
text
@#	$OpenBSD: Makefile.inc,v 1.37 2014/12/09 07:28:46 deraadt Exp $

# string sources
.PATH: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/string ${LIBCSRCDIR}/string

SRCS+=	explicit_bzero.c memccpy.c memmem.c memrchr.c stpcpy.c stpncpy.c \
	strcasecmp.c strcasestr.c strcoll.c strdup.c \
	strerror.c strerror_r.c strmode.c strndup.c strnlen.c \
	strsignal.c strtok.c strxfrm.c \
	timingsafe_bcmp.c timingsafe_memcmp.c \
	wcscat.c wcschr.c wcscmp.c wcscpy.c wcscspn.c wcslcat.c wcslcpy.c \
	wcslen.c wcsncat.c wcsncmp.c wcsncpy.c wcspbrk.c wcsrchr.c wcsspn.c \
	wcsstr.c wcstok.c wcswcs.c wcswidth.c wmemchr.c wmemcmp.c wmemcpy.c \
	wmemmove.c wmemset.c wcsdup.c wcscasecmp.c

# machine-dependent net sources
# ../arch/ARCH/Makefile.inc must include sources for:
#	bcmp() bcopy() bzero() ffs() index() memchr() memcmp() memset()
#	memcpy() memmove() memset() rindex() strcat() strchr()
#	strcmp() strcpy() strcspn() strlen() strlcat() strlcpy()
#	strncat() strncmp() strncpy() strpbrk() strrchr() strsep()
#	strspn() strstr() swab()

.include "${LIBCSRCDIR}/arch/${MACHINE_CPU}/string/Makefile.inc"

MAN+=	bcmp.3 bcopy.3 bzero.3 ffs.3 memccpy.3 memchr.3 \
	memcmp.3 memcpy.3 memmem.3 memmove.3 memset.3 stpcpy.3 strcasecmp.3 \
	strcat.3 strchr.3 strcmp.3 strcoll.3 strcpy.3 strcspn.3 strdup.3 \
	strerror.3 strlen.3 strmode.3 strncat.3 strncpy.3 strpbrk.3 \
	strrchr.3 strsep.3 strsignal.3 strspn.3 strstr.3 strtok.3 strxfrm.3 \
	swab.3 strlcpy.3 timingsafe_bcmp.3 \
	wcscasecmp.3 wcscat.3 wcschr.3 wcscmp.3 wcscpy.3 \
	wcscspn.3 wcsdup.3 wcslcpy.3 wcslen.3 wcspbrk.3 wcsrchr.3 wcsspn.3 \
	wcsstr.3 wcstok.3 wcswidth.3 wmemchr.3 wmemcmp.3 wmemcpy.3 wmemmove.3 \
	wmemset.3
@


1.37
log
@In ingo's new world order, we do not want multiple manual pages describing
the same thingies.  Therefore these "lists of functions" man pages can go
away.
Hurray!  I've wanted these pages to die for around 10 years!
ok ingo (and i think jmc)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.36 2014/11/30 19:43:56 deraadt Exp $
a35 20

MLINKS+=bzero.3 explicit_bzero.3
MLINKS+=memchr.3 memrchr.3
MLINKS+=stpcpy.3 stpncpy.3
MLINKS+=strchr.3 index.3
MLINKS+=strrchr.3 rindex.3
MLINKS+=strcasecmp.3 strncasecmp.3
MLINKS+=strcmp.3 strncmp.3
MLINKS+=strdup.3 strndup.3
MLINKS+=strlcpy.3 strlcat.3
MLINKS+=strlen.3 strnlen.3
MLINKS+=strstr.3 strcasestr.3
MLINKS+=strtok.3 strtok_r.3
MLINKS+=strerror.3 strerror_r.3
MLINKS+=timingsafe_bcmp.3 timingsafe_memcmp.3
MLINKS+=wcscasecmp.3 wcsncasecmp.3
MLINKS+=wcscat.3 wcsncat.3
MLINKS+=wcscmp.3 wcsncmp.3
MLINKS+=wcscpy.3 wcsncpy.3
MLINKS+=wcslcpy.3 wcslcat.3
@


1.36
log
@restructure libc/string + libc/arch/*/string coperation regarding
(potentially) MD versions (function dependent, not filename dependent)
split out memcpy/memmove/bcopy and strchr/index/strrchr/rindex
Bring back amd64 .S versions

And the final touch: switch all architectures temporarily to MI
memcpy.c, which contains syslog + abort for overlapping copies.  A nice
harsh undefined behaviour.  We will clean the entire userland of the
remaining issues in this catagory, then switch to the optimised memcpy
which skips the memmove check.

I tried to cut this change into pieces, but testing each sub-step on
every architecture is too time consuming and mindnumbing.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.35 2014/06/13 02:12:17 matthew Exp $
d26 1
a26 1
MAN+=	bcmp.3 bcopy.3 bstring.3 bzero.3 ffs.3 memccpy.3 memchr.3 \
d29 1
a29 1
	strerror.3 string.3 strlen.3 strmode.3 strncat.3 strncpy.3 strpbrk.3 \
@


1.35
log
@Add timingsafe_memcmp().

ok deraadt, jmc, tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.34 2014/03/23 23:16:48 tedu Exp $
d8 1
a8 1
	strerror.c strerror_r.c strlcat.c strmode.c strndup.c strnlen.c \
d17 1
a17 1
# m-d Makefile.inc must include sources for:
d19 4
a22 5
#	rindex() strcat() strcmp() strcpy() strcspn() strlen() strlcpy()
#	strncat() strncmp() strncpy() strpbrk() strsep()
#	strspn() strstr() swav()
# m-d Makefile.inc may include sources for:
#	memcpy() memmove() strchr() strrchr()
a24 120

# if no machine specific memmove(3), build one out of bcopy(3).
.if empty(SRCS:Mmemmove.S)
OBJS+=	memmove.o
memmove.o: bcopy.c
	${CC} -DMEMMOVE ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

memmove.go: bcopy.c
	${CC} -g -DMEMMOVE ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

memmove.po: bcopy.c
	${CC} -DMEMMOVE ${CFLAGS} ${CPPFLAGS} -c -p ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -X -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

memmove.so: bcopy.c
	${CC} ${PICFLAG} -DPIC -DMEMMOVE ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} \
		-o ${.TARGET}

memmove.do: bcopy.c
	${CC} -DMEMMOVE ${CFLAGS} ${CPPFLAGS} ${DIST_CFLAGS} -c ${.ALLSRC} \
	    -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}
.endif

# if no machine specific memcpy(3), build one out of bcopy(3).
# if there is a machine specific memmove(3), we'll assume it aliases
# memcpy(3).
.if empty(SRCS:Mmemcpy.S)
.if empty(SRCS:Mmemmove.S)
OBJS+=	memcpy.o
memcpy.o: bcopy.c
	${CC} -DMEMCOPY ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

memcpy.go: bcopy.c
	${CC} -g -DMEMCOPY ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

memcpy.po: bcopy.c
	${CC} -DMEMCOPY ${CFLAGS} ${CPPFLAGS} -c -p ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -X -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

memcpy.so: bcopy.c
	${CC} ${PICFLAG} -DPIC -DMEMCOPY ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} \
		-o ${.TARGET}

memcpy.do: bcopy.c
	${CC} -DMEMCOPY ${CFLAGS} ${CPPFLAGS} ${DIST_CFLAGS} -c ${.ALLSRC} \
	    -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}
.endif
.endif

# if no machine specific strchr(3), build one out of index(3).
.if empty(SRCS:Mstrchr.S)
OBJS+=	strchr.o
strchr.o: index.c
	${CC} -DSTRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

strchr.go: index.c
	${CC} -g -DSTRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

strchr.po: index.c
	${CC} -DSTRCHR ${CFLAGS} ${CPPFLAGS} -c -p ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -X -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

strchr.so: index.c
	${CC} ${PICFLAG} -DPIC -DSTRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} \
	    -o ${.TARGET}

strchr.do: index.c
	${CC} -DSTRCHR ${CFLAGS} ${CPPFLAGS} ${DIST_CFLAGS} -c ${.ALLSRC} \
	    -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}
.endif

# if no machine specific strrchr(3), build one out of rindex(3).
.if empty(SRCS:Mstrrchr.S)
OBJS+=	strrchr.o
strrchr.o: rindex.c
	${CC} -DSTRRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

strrchr.go: rindex.c
	${CC} -g -DSTRRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

strrchr.po: rindex.c
	${CC} -DSTRRCHR ${CFLAGS} ${CPPFLAGS} -c -p ${.ALLSRC} -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -X -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}

strrchr.so: rindex.c
	${CC} ${PICFLAG} -DPIC -DSTRRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} \
	    -o ${.TARGET}

strrchr.do: rindex.c
	${CC} -DSTRRCHR ${CFLAGS} ${CPPFLAGS} ${DIST_CFLAGS} -c ${.ALLSRC} \
	    -o ${.TARGET}
	@@${LD} -o ${.TARGET}.tmp -x -r ${.TARGET}
	@@mv ${.TARGET}.tmp ${.TARGET}
.endif
@


1.34
log
@remove the never used bm string functions
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.33 2014/01/22 21:06:45 tedu Exp $
d10 1
d14 1
a14 2
	wmemmove.c wmemset.c wcsdup.c \
	timingsafe_bcmp.c wcscasecmp.c
d152 2
a153 1
	swab.3 strlcpy.3 wcscasecmp.3 wcscat.3 wcschr.3 wcscmp.3 wcscpy.3 \
d171 1
a176 1
MLINKS+=bcmp.3 timingsafe_bcmp.3
@


1.33
log
@add explicit_bzero to libc. implementation subject to change, but start
the ball rolling. ok deraadt.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.32 2013/12/19 20:52:37 millert Exp $
d6 1
a6 1
SRCS+=	bm.c explicit_bzero.c memccpy.c memmem.c memrchr.c stpcpy.c stpncpy.c \
d147 1
a147 1
MAN+=	bm.3 bcmp.3 bcopy.3 bstring.3 bzero.3 ffs.3 memccpy.3 memchr.3 \
a156 1
MLINKS+=bm.3 bm_comp.3 bm.3 bm_exec.3 bm.3 bm_free.3
@


1.32
log
@Split out strncpy and strncat from strcpy and strcat manuals.
Requested by deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.31 2013/10/14 06:55:28 guenther Exp $
d6 1
a6 1
SRCS+=	bm.c memccpy.c memmem.c memrchr.c stpcpy.c stpncpy.c \
d158 1
@


1.31
log
@Missed the file renames for the string functions when committing the
DIST_LIB/DIST_OBJ/*.do changes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.30 2013/05/13 10:37:02 ajacoutot Exp $
d149 7
a155 6
	strcat.3 strchr.3 strcmp.3 strcoll.3 strcpy.3 strcspn.3 strerror.3 \
	string.3 strlen.3 strmode.3 strdup.3 strpbrk.3 strrchr.3 strsep.3 \
	strsignal.3 strspn.3 strstr.3 strtok.3 strxfrm.3 swab.3 strlcpy.3 \
	wcscasecmp.3 wcscat.3 wcschr.3 wcscmp.3 wcscpy.3 wcscspn.3 wcsdup.3 \
	wcslcpy.3 wcslen.3 wcspbrk.3 wcsrchr.3 wcsspn.3 wcsstr.3 wcstok.3 \
	wcswidth.3 wmemchr.3 wmemcmp.3 wmemcpy.3 wmemmove.3 wmemset.3
a162 1
MLINKS+=strcat.3 strncat.3
a163 1
MLINKS+=strcpy.3 strncpy.3
@


1.30
log
@Add an implementation of memmem() -- from FreeBSD with some tweaks.
Requires a libc minor bump, committing now so that we have up-to-date
snapshots for the upcoming hackathon.

joint work with millert@@
man page bits ok jmc@@
input and ok millert@@, guenther@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.29 2012/08/02 13:38:38 okan Exp $
d48 6
d80 6
d110 6
d139 6
@


1.29
log
@remove leftover NOLINT, WANTLINT, LINTFLAGS, LOBJ vars and lint targets.

ok guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.28 2012/01/17 02:48:01 guenther Exp $
d6 1
a6 1
SRCS+=	bm.c memccpy.c memrchr.c stpcpy.c stpncpy.c \
d124 2
a125 2
	memcmp.3 memcpy.3 memmove.3 memset.3 stpcpy.3 strcasecmp.3 strcat.3 \
	strchr.3 strcmp.3 strcoll.3 strcpy.3 strcspn.3 strerror.3 \
@


1.28
log
@Add stpcpy() and stpncpy(), pointless crap that made it into POSIX.
Includes friendly linker warning to wake up those dumb enough to use it.

Committing for kettenis@@, who ran away to the hills after writing it
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.27 2011/07/09 16:32:11 nicm Exp $
a121 20

# build .ln files for memmove, memcpy, strchr and strrchr always from
# bcopy, index, and rindex
LOBJS+=	memmove.ln memcpy.ln strchr.ln strrchr.ln

memmove.ln: bcopy.c
	lint ${LINTFLAGS} -DMEMMOVE ${CFLAGS:M-[IDU]*} -i -o ${.TARGET} \
		${LIBCSRCDIR}/string/bcopy.c

memcpy.ln: bcopy.c
	lint ${LINTFLAGS} -DMEMCOPY ${CFLAGS:M-[IDU]*} -i -o ${.TARGET} \
		${LIBCSRCDIR}/string/bcopy.c

strchr.ln: index.c
	lint ${LINTFLAGS} -DSTRCHR ${CFLAGS:M-[IDU]*} -i -o ${.TARGET} \
		${LIBCSRCDIR}/string/index.c

strrchr.ln: rindex.c
	lint ${LINTFLAGS} -DSTRRCHR ${CFLAGS:M-[IDU]*} -i -o ${.TARGET} \
		${LIBCSRCDIR}/string/rindex.c
@


1.27
log
@Instead of documenting all the wide string functions in wmemchr(3), add
individual pages (based on the existing string man pages). By Tim van
der Molen (tbvdm at xs4all dot nl) after a suggestion by millert@@.

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.26 2011/07/04 04:37:34 nicm Exp $
d6 2
a7 1
SRCS+=	bm.c memccpy.c memrchr.c strcasecmp.c strcasestr.c strcoll.c strdup.c \
d144 1
a144 1
	memcmp.3 memcpy.3 memmove.3 memset.3 strcasecmp.3 strcat.3 \
d154 1
@


1.26
log
@Add wcsdup(), from NetBSD.

ok deraadt matthew
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.25 2011/05/28 15:16:46 espie Exp $
d147 3
a149 1
	wcstok.3 wmemchr.3 wcswidth.3 wcsdup.3
d165 5
a169 21
MLINKS+=wmemchr.3 wmemcmp.3
MLINKS+=wmemchr.3 wmemcpy.3
MLINKS+=wmemchr.3 wmemmove.3
MLINKS+=wmemchr.3 wmemset.3
MLINKS+=wmemchr.3 wcscat.3
MLINKS+=wmemchr.3 wcschr.3
MLINKS+=wmemchr.3 wcscmp.3
MLINKS+=wmemchr.3 wcscasecmp.3
MLINKS+=wmemchr.3 wcscpy.3
MLINKS+=wmemchr.3 wcscspn.3
MLINKS+=wmemchr.3 wcslcat.3
MLINKS+=wmemchr.3 wcslcpy.3
MLINKS+=wmemchr.3 wcslen.3
MLINKS+=wmemchr.3 wcsncat.3
MLINKS+=wmemchr.3 wcsncmp.3
MLINKS+=wmemchr.3 wcsncasecmp.3
MLINKS+=wmemchr.3 wcsncpy.3
MLINKS+=wmemchr.3 wcspbrk.3
MLINKS+=wmemchr.3 wcsrchr.3
MLINKS+=wmemchr.3 wcsspn.3
MLINKS+=wmemchr.3 wcsstr.3
@


1.25
log
@wcs(n)casecmp support, manpage comments from jmc@@, okay deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.24 2011/04/04 18:16:24 stsp Exp $
d12 1
a12 1
	wmemmove.c wmemset.c \
d147 1
a147 1
	wcstok.3 wmemchr.3 wcswidth.3
@


1.24
log
@Add a wcswidth man page (based on FreeBSD), and fix the implementation
to return -1 in case of an unprintable character.
ok nicm jmc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.23 2010/09/24 13:33:00 matthew Exp $
d13 1
a13 1
	timingsafe_bcmp.c
d170 1
d178 1
@


1.23
log
@Add timingsafe_bcmp(3) to libc, mention that it's already in the
kernel in kern(9), and remove it from OpenSSH.

ok deraadt@@, djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.22 2010/05/18 22:24:55 tedu Exp $
d147 1
a147 1
	wcstok.3 wmemchr.3
@


1.22
log
@add posix_madvise, posix_memalign, strndup, and strnlen.  mostly from
brad and millert, with hints from guenther, jmc, and otto I think.
ok previous.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.21 2010/02/03 20:49:00 miod Exp $
d12 2
a13 1
	wmemmove.c wmemset.c
d182 1
@


1.21
log
@Use MACHINE_CPU instead of MACHINE_ARCH to pick the correct machine dependent
files or directories when applicable.
The inspiration and name of MACHINE_CPU come from NetBSD, although the way to
provide it to Makefiles is completely different.
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.20 2007/10/25 22:41:02 miod Exp $
d7 2
a8 2
	strerror.c strerror_r.c strlcat.c strmode.c strsignal.c strtok.c \
	strxfrm.c \
d156 1
d158 1
@


1.20
log
@Make sure to use unique target names so that make -j does not break;
feedback and ok espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.19 2007/09/03 14:36:40 millert Exp $
d4 1
a4 1
.PATH: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/string ${LIBCSRCDIR}/string
d23 1
a23 1
.include "${LIBCSRCDIR}/arch/${MACHINE_ARCH}/string/Makefile.inc"
@


1.19
log
@add memrchr(3)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.18 2005/10/29 10:05:11 espie Exp $
d30 2
a31 2
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}
d35 2
a36 2
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}
d40 2
a41 2
	@@${LD} -X -r ${.TARGET}
	@@mv a.out ${.TARGET}
d56 2
a57 2
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}
d61 2
a62 2
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}
d66 2
a67 2
	@@${LD} -X -r ${.TARGET}
	@@mv a.out ${.TARGET}
d80 2
a81 2
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}
d85 2
a86 2
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}
d90 2
a91 2
	@@${LD} -X -r ${.TARGET}
	@@mv a.out ${.TARGET}
d103 2
a104 2
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}
d108 2
a109 2
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}
d113 2
a114 2
	@@${LD} -X -r ${.TARGET}
	@@mv a.out ${.TARGET}
@


1.18
log
@Activate missing wcswidth, as noted by Alexander Bluhm.
okay deraadt@@, otto@@
Minor bump (nobody stepped forward with other changes, so let's do this one)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.17 2005/05/26 12:56:01 otto Exp $
d6 1
a6 1
SRCS+=	bm.c memccpy.c strcasecmp.c strcasestr.c strcoll.c strdup.c \
d149 1
@


1.17
log
@Merge common functionality of __strsignal and strerror_r.
ok jaredy@@ miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.16 2005/04/16 12:26:12 jmc Exp $
d11 1
a11 1
	wcsstr.c wcstok.c wcswcs.c wmemchr.c wmemcmp.c wmemcpy.c \
@


1.16
log
@fix wmemchr.3 MLINKS;
ok espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.15 2005/04/14 20:59:10 espie Exp $
d8 1
a8 1
	strxfrm.c __strsignal.c \
@


1.15
log
@introduce some wchar functions (from citrus and an itojun@@ diff)
okay deraadt@@, cloder@@, pvalchev@@
thanks to everyone who commented on that.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.14 2005/03/30 03:04:19 deraadt Exp $
d170 1
d175 1
a175 1
MLINKS+=wmemchr.3 wcspbrk.3
@


1.14
log
@strcasestr(3), a case-insensitive version of strstr(3).  already in netbsd
and freebsd, apparently written by torek, the man we never see anymore;
submitted by jcs, but he is not around right now for the libc major crank
so i sneak it in for him
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.13 2004/05/03 19:56:08 millert Exp $
d8 5
a12 1
	strxfrm.c __strsignal.c
d145 2
a146 1
	strsignal.3 strspn.3 strstr.3 strtok.3 strxfrm.3 swab.3 strlcpy.3
d159 18
@


1.13
log
@Missed this in the __strerror() removal.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.12 2003/02/20 03:20:09 deraadt Exp $
d6 3
a8 3
SRCS+=	bm.c memccpy.c strcasecmp.c strcoll.c strdup.c strerror.c \
	strerror_r.c strlcat.c strmode.c strsignal.c strtok.c strxfrm.c \
	__strsignal.c
d151 1
@


1.12
log
@fix a variety of missing or wrong MLINKS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2002/11/21 20:45:05 marc Exp $
d8 1
a8 1
	__strerror.c __strsignal.c
@


1.11
log
@
Add strerror_r and functions versions of getchar_unlocked and
putchar_unlocked.   Crank the minor on related libs.  OK fgs@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2001/09/05 16:27:01 mickey Exp $
d152 1
@


1.10
log
@make debug libs build again
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 1999/11/09 11:20:41 art Exp $
d7 1
a7 1
	strlcat.c strmode.c strsignal.c strtok.c strxfrm.c \
@


1.9
log
@Install man-page links for strtok_r.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 1999/09/21 16:44:01 espie Exp $
d29 5
d55 5
d79 5
d99 5
@


1.8
log
@index/rindex as deprecated synonyms to strchr/strrchr.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 1999/04/25 00:10:07 millert Exp $
d131 1
@


1.7
log
@m68k assembler version of strlcpy(3)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 1998/11/20 11:18:51 d Exp $
d117 2
a118 2
MAN+=	bm.3 bcmp.3 bcopy.3 bstring.3 bzero.3 ffs.3 index.3 memccpy.3 memchr.3 \
	memcmp.3 memcpy.3 memmove.3 memset.3 rindex.3 strcasecmp.3 strcat.3 \
d124 2
@


1.6
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 1998/07/01 01:29:44 millert Exp $
d7 1
a7 1
	strlcat.c strlcpy.c strmode.c strsignal.c strtok.c strxfrm.c \
d13 1
a13 1
#	rindex() strcat() strcmp() strcpy() strcspn() strlen()
@


1.5
log
@add strlcpy/strlcat, safe and sensible string copy/append
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 1998/02/07 20:50:25 tholo Exp $
d4 1
a4 1
.PATH: ${.CURDIR}/arch/${MACHINE_ARCH}/string ${.CURDIR}/string
d19 1
a19 1
.include "${.CURDIR}/arch/${MACHINE_ARCH}/string/Makefile.inc"
d103 1
a103 1
		${.CURDIR}/string/bcopy.c
d107 1
a107 1
		${.CURDIR}/string/bcopy.c
d111 1
a111 1
		${.CURDIR}/string/index.c
d115 1
a115 1
		${.CURDIR}/string/rindex.c
@


1.4
log
@strftime is no longer in this directory
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 1996/08/19 08:33:54 tholo Exp $
d7 1
a7 1
	strmode.c strsignal.c strtok.c strxfrm.c \
d121 1
a121 1
	strsignal.3 strspn.3 strstr.3 strtok.3 strxfrm.3 swab.3
d128 1
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 1996/03/25 23:31:46 tholo Exp $
d7 1
a7 1
	strftime.c strmode.c strsignal.c strtok.c strxfrm.c \
d119 1
a119 1
	strchr.3 strcmp.3 strcoll.3 strcpy.3 strcspn.3 strerror.3 strftime.3 \
@


1.2
log
@Add support for building lint(1) library
@
text
@d1 1
a1 2
#	from: @@(#)Makefile.inc	5.6 (Berkeley) 3/5/91
#	$Id: Makefile.inc,v 1.1.1.1 1995/10/18 08:42:20 deraadt Exp $
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
#	$Id: Makefile.inc,v 1.35 1995/03/20 14:47:39 mycroft Exp $
d97 20
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
