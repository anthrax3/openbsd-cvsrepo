head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.6
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.8
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.3;
commitid	lTMF8Y3C9fQGd6jQ;

1.3
date	2014.06.21.02.34.26;	author matthew;	state Exp;
branches;
next	1.2;
commitid	8bSzKuB5PlXjIw16;

1.2
date	2014.06.10.04.17.37;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	nyZqTtc9feHCYvvX;

1.1
date	2014.01.22.21.06.45;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@/*	$OpenBSD: explicit_bzero.c,v 1.3 2014/06/21 02:34:26 matthew Exp $ */
/*
 * Public domain.
 * Written by Matthew Dempsky.
 */

#include <string.h>

__attribute__((weak)) void
__explicit_bzero_hook(void *buf, size_t len)
{
}

void
explicit_bzero(void *buf, size_t len)
{
	memset(buf, 0, len);
	__explicit_bzero_hook(buf, len);
}
DEF_WEAK(explicit_bzero);
@


1.3
log
@Protect explicit_bzero() from link-time optimization

Modern compiler toolchains are capable of optimizing even across
translation unit boundaries, so simply moving the memory clearing into
a separate function is not guaranteed to clear memory.

To avoid this, we take advantage of ELF weak symbol semantics, and
insert a call to an empty, weakly named function.  The semantics of
calling this function aren't determinable until load time, so the
compiler and linker need to keep the memset() call.

There are still ways a toolchain might defeat this trick (e.g.,
optimistically expecting the weak symbol to not be overloaded, and
only calling memset() if it is; promoting weak symbols to strong
symbols at link-time when emitting a static binary because they won't
be interposed; implementing load-time optimizations).  But at least
for the foreseeable future, these seem unlikely.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: explicit_bzero.c,v 1.2 2014/06/10 04:17:37 deraadt Exp $ */
d20 1
@


1.2
log
@mop up ifndef KERNEL goo; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: explicit_bzero.c,v 1.1 2014/01/22 21:06:45 tedu Exp $ */
d4 1
a4 1
 * Written by Ted Unangst
d9 5
a13 3
/*
 * explicit_bzero - don't let the compiler optimize away bzero
 */
d15 1
a15 1
explicit_bzero(void *p, size_t n)
d17 2
a18 1
	bzero(p, n);
@


1.1
log
@add explicit_bzero to libc. implementation subject to change, but start
the ball rolling. ok deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: explicit_bzero.c,v 1.1 2011/01/10 23:23:56 tedu Exp $ */
a6 1
#if !defined(_KERNEL) && !defined(_STANDALONE)
a7 3
#else
#include <lib/libkern/libkern.h>
#endif
@

