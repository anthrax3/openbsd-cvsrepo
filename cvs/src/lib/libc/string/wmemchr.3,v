head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.20
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.18
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.14
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.10
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.12
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.14
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.10
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@.\" @;


1.10
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.25.00.38.53;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.09.16.46.58;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.09.16.32.11;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.28.17.12.43;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.28.15.16.46;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.10.18.38.20;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.31.19.19.32;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.13.20.42.48;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.13.16.35.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@.\"	$OpenBSD: wmemchr.3,v 1.9 2011/07/25 00:38:53 schwarze Exp $
.\"
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: July 25 2011 $
.Dt WMEMCHR 3
.Os
.Sh NAME
.Nm wmemchr
.Nd locate wide character in wide string
.Sh SYNOPSIS
.In wchar.h
.Ft wchar_t *
.Fn wmemchr "const wchar_t *b" "wchar_t c" "size_t len"
.Sh DESCRIPTION
The
.Fn wmemchr
function locates the first occurrence of
.Fa c
in wide string
.Fa b .
.Sh RETURN VALUES
The
.Fn wmemchr
function returns a pointer to the wide character located, or
.Dv NULL
if no such wide character exists within
.Fa len
wide characters.
.Sh SEE ALSO
.Xr memchr 3 ,
.Xr wcschr 3 ,
.Xr wcscspn 3 ,
.Xr wcspbrk 3 ,
.Xr wcsrchr 3 ,
.Xr wcsspn 3 ,
.Xr wcsstr 3 ,
.Xr wcstok 3
.Sh STANDARDS
The
.Fn wmemchr
function conforms to
.St -isoC-99
and was first introduced in
.St -isoC-amd1 .
.Sh HISTORY
The
.Fn wmemchr
function was ported from
.Nx
and first appeared in
.Ox 3.8 .
@


1.9
log
@update HISTORY and SEE ALSO for all of string(3), together with various
smaller improvements; jmc@@ and nicm@@ both ask me to get this in because
further tweaking will be easier in-tree
@
text
@d1 1
a1 1
.\"	$OpenBSD: wmemchr.3,v 1.8 2011/07/09 16:46:58 nicm Exp $
d34 1
a34 1
.Dd $Mdocdate: July 9 2011 $
d41 1
a41 1
.Fd #include <wchar.h>
@


1.8
log
@Minor function name tweaks.
@
text
@d1 2
a33 2
.\"	$OpenBSD: wmemchr.3,v 1.7 2011/07/09 16:32:11 nicm Exp $
.\"
d60 1
d75 7
@


1.7
log
@Instead of documenting all the wide string functions in wmemchr(3), add
individual pages (based on the existing string man pages). By Tim van
der Molen (tbvdm at xs4all dot nl) after a suggestion by millert@@.

ok deraadt
@
text
@d32 1
a32 1
.\"	$OpenBSD: memchr.3,v 1.9 2007/09/03 16:50:14 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate$
d43 1
a43 1
.Fn memchr "const wchar_t *b" "wchar_t c" "size_t len"
d69 1
a69 1
.Fn memchr
@


1.6
log
@tweak previous (my fault);
@
text
@d1 2
a2 6
.\"	$OpenBSD: wmemchr.3,v 1.5 2011/05/28 15:16:46 espie Exp $
.\"
.\"	$NetBSD: wmemchr.3,v 1.9 2003/09/08 17:54:33 wiz Exp $
.\"
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
d32 1
a32 1
.\"     from: @@(#)strcpy.3	8.1 (Berkeley) 6/4/93
d34 1
a34 1
.Dd $Mdocdate: May 28 2011 $
d38 2
a39 23
.Nm wmemchr ,
.Nm wmemcmp ,
.Nm wmemcpy ,
.Nm wmemmove ,
.Nm wmemset ,
.Nm wcscat ,
.Nm wcschr ,
.Nm wcscmp ,
.Nm wcscasecmp ,
.Nm wcscpy ,
.Nm wcscspn ,
.Nm wcslcat ,
.Nm wcslcpy ,
.Nm wcslen ,
.Nm wcsncat ,
.Nm wcsncmp ,
.Nm wcsncasecmp ,
.Nm wcsncpy ,
.Nm wcspbrk ,
.Nm wcsrchr ,
.Nm wcsspn ,
.Nm wcsstr
.Nd wide-character string manipulation operations
d41 1
a41 43
.In wchar.h
.Ft wchar_t *
.Fn wmemchr "const wchar_t *s" "wchar_t c" "size_t n"
.Ft int
.Fn wmemcmp "const wchar_t *s1" "const wchar_t *s2" "size_t n"
.Ft wchar_t *
.Fn wmemcpy "wchar_t * restrict s1" "const wchar_t * restrict s2" "size_t n"
.Ft wchar_t *
.Fn wmemmove "wchar_t *s1" "const wchar_t *s2" "size_t n"
.Ft wchar_t *
.Fn wmemset "wchar_t *s" "wchar_t c" "size_t n"
.Ft wchar_t *
.Fn wcscat "wchar_t * restrict s1" "const wchar_t * restrict s2"
.Ft wchar_t *
.Fn wcschr "const wchar_t *s" "wchar_t c"
.Ft int
.Fn wcscmp "const wchar_t *s1" "const wchar_t *s2"
.Ft int
.Fn wcscasecmp "const wchar_t *s1" "const wchar_t *s2"
.Ft wchar_t *
.Fn wcscpy "wchar_t * restrict s1" "const wchar_t * restrict s2"
.Ft size_t
.Fn wcscspn "const wchar_t *s1" "const wchar_t *s2"
.Ft size_t
.Fn wcslcat "wchar_t *s1" "const wchar_t *s2" "size_t n"
.Ft size_t
.Fn wcslcpy "wchar_t *s1" "const wchar_t *s2" "size_t n"
.Ft size_t
.Fn wcslen "const wchar_t *s"
.Ft wchar_t *
.Fn wcsncat "wchar_t * restrict s1" "const wchar_t * restrict s2" "size_t n"
.Ft int
.Fn wcsncmp "const wchar_t *s1" "const wchar_t * s2" "size_t n"
.Ft int
.Fn wcsncasecmp "const wchar_t *s1" "const wchar_t * s2" "size_t n"
.Ft wchar_t *
.Fn wcsncpy "wchar_t * restrict s1" "const wchar_t * restrict s2" "size_t n"
.Ft wchar_t *
.Fn wcspbrk "const wchar_t *s1" "const wchar_t *s2"
.Ft wchar_t *
.Fn wcsrchr "const wchar_t *s" "wchar_t c"
.Ft size_t
.Fn wcsspn "const wchar_t *s1" "const wchar_t *s2"
d43 1
a43 1
.Fn wcsstr "const wchar_t *s1" "const wchar_t *s2"
d45 14
a58 5
These functions implement string manipulation operations over wide-character
strings.
For a detailed description, refer to documents for the respective single-byte
counterpart, such as
.Xr memchr 3 .
d60 7
a66 22
.Xr memchr 3 ,
.Xr memcmp 3 ,
.Xr memcpy 3 ,
.Xr memmove 3 ,
.Xr memset 3 ,
.Xr strcasecmp 3 ,
.Xr strcat 3 ,
.Xr strchr 3 ,
.Xr strcmp 3 ,
.Xr strcpy 3 ,
.Xr strcspn 3 ,
.Xr strlcat 3 ,
.Xr strlcpy 3 ,
.Xr strlen 3 ,
.Xr strncasecmp 3 ,
.Xr strncat 3 ,
.Xr strncmp 3 ,
.Xr strncpy 3 ,
.Xr strpbrk 3 ,
.Xr strrchr 3 ,
.Xr strspn 3 ,
.Xr strstr 3
d68 3
a70 1
These functions conform to
d72 2
a73 13
and were first introduced in
.St -isoC-amd1 ,
except for
.Fn wcscasecmp
and
.Fn wcsncasecmp ,
which conform to
.St -p1003.1-2008 ,
and
.Fn wcslcat
and
.Fn wcslcpy ,
which are extensions.
@


1.5
log
@wcs(n)casecmp support, manpage comments from jmc@@, okay deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: wmemchr.3,v 1.4 2010/09/10 18:38:20 jmc Exp $
d38 1
a38 1
.Dd $Mdocdate: September 10 2010 $
d123 1
a126 1
.Xr strcasecmp 3 ,
d132 1
a134 1
.Xr strncasecmp 3 ,
d151 1
a151 1
and for
@


1.4
log
@observe the following spelling:
- wide character (noun)
- wide-character (adjective)

this is the "fix of least resistance", and appears to be in line with
posix style; a tiny fix still needed for curses, but i'll mail that
upstream;
@
text
@d1 1
a1 1
.\"	$OpenBSD: wmemchr.3,v 1.3 2007/05/31 19:19:32 jmc Exp $
d38 1
a38 1
.Dd $Mdocdate: May 31 2007 $
d50 1
d58 1
d83 2
d99 2
d126 1
d134 1
d145 7
a151 1
with the exception of
@


1.3
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: wmemchr.3,v 1.2 2005/04/13 20:42:48 jmc Exp $
d38 1
a38 1
.Dd $Mdocdate$
d62 1
a62 1
.Nd wide character string manipulation operations
d106 1
a106 1
These functions implement string manipulation operations over wide character
@


1.2
log
@- our pages do not have a LIBRARY section;
- attach rcs id
- wording tweak
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d38 1
a38 1
.Dd December 22, 2000
@


1.1
log
@Import w* functions so that I can send smaller diffs around.

(Nothing activated yet, of course)

okay deraadt@@
@
text
@d1 2
a62 2
.Sh LIBRARY
.Lb libc
d106 1
a106 1
The functions implement string manipulation operations over wide character
@

