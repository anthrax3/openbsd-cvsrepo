head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.14
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2;
locks; strict;
comment	@.\" @;


1.4
date	2014.04.19.16.50.46;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.19.11.30.40;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2013.12.19.22.00.58;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2013.12.19.20.52.37;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@tweak previous;
@
text
@.\"	$OpenBSD: strncat.3,v 1.3 2014/04/19 11:30:40 deraadt Exp $
.\"
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: April 19 2014 $
.Dt STRNCAT 3
.Os
.Sh NAME
.Nm strncat
.Nd concatenate a string with part of another
.Sh SYNOPSIS
.In string.h
.Ft char *
.Fn strncat "char *dst" "const char *append" "size_t count"
.Sh DESCRIPTION
The
.Fn strncat
function appends not more than
.Fa count
characters of the string
.Fa append
to the end of the string found in the buffer
.Fa dst .
Space for the terminating
.Ql \e0
should not be included in
.Fa count .
.Pp
Bounds checking must be performed manually with great care.
If the buffer
.Fa dst
is not large enough to hold the result,
subsequent memory will be damaged.
.Sh RETURN VALUES
The
.Fn strncat
function returns the pointer
.Fa dst .
.Sh EXAMPLES
The following example shows how to use
.Fn strncat
in conjunction with
.Xr strncpy 3 :
.Bd -literal -offset indent
char buf[BUFSIZ];
char *base, *suffix;

(void)strncpy(buf, base, sizeof(buf) - 1);
buf[sizeof(buf) - 1] = '\e0';
(void)strncat(buf, suffix, sizeof(buf) - 1 - strlen(buf));
.Ed
.Pp
The above will copy as many characters from
.Va base
to
.Va buf
as will fit.
It then appends as many characters from
.Va suffix
as will fit.
If either
.Va base
or
.Va suffix
are too large, truncation will occur without detection.
.Pp
The above example shows dangerous coding patterns, including an
inability to detect truncation.
.Fn strncat
and
.Fn strncpy
are dangerously easy to misuse.
The
.Xr strlcpy 3
and
.Xr strlcat 3
functions are safer for this kind of operation:
.Bd -literal -offset indent
if (strlcpy(buf, base, sizeof(buf)) >= sizeof(buf) ||
    strlcat(buf, suffix, sizeof(buf)) >= sizeof(buf))
        goto toolong;

.Ed
or for greatest portability,
.Bd -literal -offset indent
if (snprintf(buf, sizeof(buf), "%s%s",
    base, suffix) >= sizeof(buf))
        goto toolong;
.Ed
.Sh SEE ALSO
.Xr strlcpy 3 ,
.Xr wcscat 3 ,
.Xr wcslcpy 3
.Sh STANDARDS
The
.Fn strncat
function conforms to
.St -ansiC .
.Sh HISTORY
The
.Fn strncat
function first appeared in
.At v7 .
@


1.3
log
@Use somewhat harsher language and better examples; demonstrate that
non-dangerous use functions is difficult.
ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: strncat.3,v 1.2 2013/12/19 22:00:58 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: December 19 2013 $
a118 1

d126 1
a126 1
function conform to
@


1.2
log
@fix double word error;
@
text
@d1 1
a1 1
.\"	$OpenBSD: strncat.3,v 1.1 2013/12/19 20:52:37 millert Exp $
d43 1
a43 1
.Fn strncat "char *s" "const char *append" "size_t count"
d49 1
a49 1
characters of the NUL-terminated string
d51 2
a52 2
to the end of the NUL-terminated string
.Fa s .
d57 6
a62 3
The string
.Fa s
must have sufficient space to hold the result.
d67 1
a67 1
.Fa s .
a68 10
The following appends
.Dq Li abc
to
.Va chararray :
.Bd -literal -offset indent
char *letters = "abcdefghi";

(void)strncat(chararray, letters, 3);
.Ed
.Pp
d71 2
a72 2
safely in conjunction with
.Xr strncpy 3 .
d75 1
a75 1
char *input, *suffix;
d77 1
a77 1
(void)strncpy(buf, input, sizeof(buf) - 1);
d83 1
a83 1
.Va input
d89 14
a102 3
as will fit (or none
if there is no space).
For operations like this, the
d106 8
a113 1
functions are a better choice, as shown below.
d115 3
a117 2
(void)strlcpy(buf, input, sizeof(buf));
(void)strlcat(buf, suffix, sizeof(buf));
d119 1
a120 6
.Xr bcopy 3 ,
.Xr memccpy 3 ,
.Xr memcpy 3 ,
.Xr memmove 3 ,
.Xr strcat 3 ,
.Xr strcpy 3 ,
a125 2
.Fn strcat
and
d127 1
a127 1
functions conform to
@


1.1
log
@Split out strncpy and strncat from strcpy and strcat manuals.
Requested by deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d34 1
a34 1
.Dd $Mdocdate$
d127 1
a127 1
function first first appeared in
@

