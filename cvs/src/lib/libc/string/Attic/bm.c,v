head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.28
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.24
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.22
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.20
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.18
	OPENBSD_5_0:1.7.0.16
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.14
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.12
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.8
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.28
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.26
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.24
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.22
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.03.23.23.16.48;	author tedu;	state dead;
branches;
next	1.7;

1.7
date	2007.09.02.15.19.18;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.08.08.05.37;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.30.20.13.52;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.20.18.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.33.59;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.03.09.02.42.55;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove the never used bm string functions
@
text
@/*	$OpenBSD: bm.c,v 1.7 2007/09/02 15:19:18 deraadt Exp $ */
/*-
 * Copyright (c) 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Andrew Hume of AT&T Bell Laboratories.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <bm.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>

/* 
 * XXX
 * The default frequency table starts at 99 and counts down.  The default
 * table should probably be oriented toward text, and will necessarily be
 * locale specific.  This one is for English.  It was derived from the
 * OSF/1 and 4.4BSD formatted and unformatted manual pages, and about 100Mb
 * of email and random text.  Change it if you can find something better.
 */
static u_char const freq_def[256] = {
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0, 77, 90,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	99, 28, 42, 27, 16, 14, 20, 51,
	66, 65, 59, 24, 75, 76, 84, 56,
	72, 74, 64, 55, 54, 47, 41, 37,
	44, 61, 70, 43, 23, 53, 49, 22,
	33, 58, 40, 46, 45, 57, 60, 26,
	30, 63, 21, 12, 32, 50, 38, 39,
	34, 11, 48, 67, 62, 35, 15, 29,
	71, 18,  9, 17, 25, 13, 10, 52,
	36, 95, 78, 86, 87, 98, 82, 80,
	88, 94, 19, 68, 89, 83, 93, 96,
	81,  7, 91, 92, 97, 85, 69, 73,
	31, 79,  8,  5,  4,  6,  3,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,
};

bm_pat *
bm_comp(u_char const *pb, size_t len, u_char const *freq)
{
	u_char const *pe, *p;
	size_t *d, r;
	int j;
	int sv_errno;
	bm_pat *pat;

	if (len == 0) {
		errno = EINVAL;
		return (NULL);
	}
	if ((pat = malloc(sizeof(*pat))) == NULL)
		return (NULL);
	pat->pat = NULL;
	pat->delta = NULL;

	pat->patlen = len;			/* copy pattern */
	if ((pat->pat = malloc(pat->patlen)) == NULL)
		goto mem;
	memcpy(pat->pat, pb, pat->patlen);
						/* get skip delta */
	if ((pat->delta = calloc(256, sizeof(*d))) == NULL)
		goto mem;
	for (j = 0, d = pat->delta; j < 256; j++)
		d[j] = pat->patlen;
	for (pe = pb + pat->patlen - 1; pb <= pe; pb++)
		d[*pb] = pe - pb;

	if (freq == NULL)			/* default freq table */
		freq = freq_def;
	r = 0;					/* get guard */
	for (pb = pat->pat, pe = pb + pat->patlen - 1; pb < pe; pb++)
		if (freq[*pb] < freq[pat->pat[r]])
			r = pb - pat->pat;
	pat->rarec = pat->pat[r];
	pat->rareoff = r - (pat->patlen - 1);

						/* get md2 shift */
	for (pe = pat->pat + pat->patlen - 1, p = pe - 1; p >= pat->pat; p--)
		if (*p == *pe)
			break;

	/* *p is first leftward reoccurrence of *pe */
	pat->md2 = pe - p;
	return (pat);

mem:	sv_errno = errno;
	bm_free(pat);
	errno = sv_errno;
	return (NULL);
}

void
bm_free(bm_pat *pat)
{
	if (pat->pat != NULL)
		free(pat->pat);
	if (pat->delta != NULL)
		free(pat->delta);
	free(pat);
}

u_char *
bm_exec(bm_pat *pat, u_char *base, size_t n)
{
	u_char *e, *ep, *p, *q, *s;
	size_t *d0, k, md2, n1, ro;
	int rc;

	if (n == 0)
		return (NULL);

	d0 = pat->delta;
	n1 = pat->patlen - 1;
	md2 = pat->md2;
	ro = pat->rareoff;
	rc = pat->rarec;
	ep = pat->pat + pat->patlen - 1;
	s = base + (pat->patlen - 1);

	/* fast loop up to n - 3 * patlen */
	e = base + n - 3 * pat->patlen;
	while (s < e) {
		k = d0[*s];		/* ufast skip loop */
		while (k) {
			k = d0[*(s += k)];
			k = d0[*(s += k)];
		}
		if (s >= e)
			break;
		if (s[ro] != rc)	/* guard test */
			goto mismatch1;
					/* fwd match */
		for (p = pat->pat, q = s - n1; p < ep;)
			if (*q++ != *p++)
				goto mismatch1;
		return (s - n1);

mismatch1:	s += md2;		/* md2 shift */
	}

	/* slow loop up to end */
	e = base + n;
	while (s < e) {
		s += d0[*s];		/* step */
		if (s >= e)
			break;
		if (s[ro] != rc)	/* guard test */
			goto mismatch2;
					/* fwd match */
		for (p = pat->pat, q = s - n1; p <= ep;)
			if (*q++ != *p++)
				goto mismatch2;
		return (s - n1);

mismatch2:	s += md2;		/* md2 shift */
	}

	return (NULL);
}
@


1.7
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: bm.c,v 1.6 2005/08/08 08:05:37 espie Exp $ */
@


1.6
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d107 1
a107 1
	if ((pat->delta = malloc(256 * sizeof(*d))) == NULL)
@


1.5
log
@ansify + deregister. no binary change on i386. ok deraadt@@ pat@@ moritz@@
@
text
@d1 1
a32 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: bm.c,v 1.4 2003/06/02 20:18:38 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d34 1
a34 1
static char *rcsid = "$OpenBSD: bm.c,v 1.3 1996/08/19 08:33:59 tholo Exp $";
d88 1
a88 4
bm_comp(pb, len, freq)
	u_char const *pb;
	size_t len;
	u_char const *freq;
d90 3
a92 3
	register u_char const *pe, *p;
	register size_t *d, r;
	register int j;
d142 1
a142 2
bm_free(pat)
	bm_pat *pat;
d152 1
a152 4
bm_exec(pat, base, n)
	bm_pat *pat;
	u_char *base;
	size_t n;
d154 3
a156 3
	register u_char *e, *ep, *p, *q, *s;
	register size_t *d0, k, md2, n1, ro;
	register int rc;
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d34 1
a34 1
static char *rcsid = "$OpenBSD: bm.c,v 1.2 1996/03/09 02:42:55 niklas Exp $";
@


1.2
log
@From NetBSD: 960217 merge
@
text
@a0 2
/*	$OpenBSD$	*/

d38 2
a39 3
/* from: static char sccsid[] = "@@(#)bm.c     8.7 (Berkeley) 6/21/94"; */
static char *rcsid = "$Id: bm.c,v 1.1.1.2 1996/02/17 17:04:03 niklas Exp $";
#endif /* LIBC_SCCS && not lint */
@


1.1
log
@Initial revision
@
text
@d1 2
d39 4
a42 4
#ifndef lint
/* from: static char sccsid[] = "@@(#)bm.c	8.7 (Berkeley) 6/21/94"; */
static char *rcsid = "$Id: bm.c,v 1.3 1994/12/14 07:24:12 cgd Exp $";
#endif /* not lint */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
