head	1.9;
access;
symbols
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1
	netbsd_1_1:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	98.01.19.00.07.32;	author millert;	state dead;
branches;
next	1.8;

1.8
date	97.07.25.20.30.14;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	96.10.28.16.53.28;	author tholo;	state Exp;
branches;
next	1.6;

1.6
date	96.08.19.08.34.18;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	96.06.10.06.19.33;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.03.25.21.17.36;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.03.09.02.42.58;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.30.08.16.41;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.22;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.22;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@use tzcode strftime(3) as it is kept up to date.
@
text
@/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: strftime.c,v 1.8 1997/07/25 20:30:14 mickey Exp $";
#endif /* LIBC_SCCS and not lint */

#include <sys/localedef.h>
#include <locale.h>
#include <string.h>
#include <tzfile.h>
#include <time.h>

static size_t gsize;
static char *pt;
static int _add __P((const char *));
static int _secs __P((const struct tm *));
static int _conv __P((int, int, char));
static size_t _fmt __P((const char *, const struct tm *));

size_t
strftime(s, maxsize, format, t)
	char *s;
	size_t maxsize;
	const char *format;
	const struct tm *t;
{
	tzset();

	pt = s;
	if ((gsize = maxsize) < 1)
		return(0);
	if (_fmt(format, t)) {
		*pt = '\0';
		return(maxsize - gsize);
	}
	return(0);
}

#define SUN_WEEK(t)	(((t)->tm_yday + 7 - \
				((t)->tm_wday)) / 7)
#define MON_WEEK(t)	(((t)->tm_yday + 7 - \
				((t)->tm_wday ? (t)->tm_wday - 1 : 6)) / 7)
static size_t
_fmt(format, t)
	register const char *format;
	const struct tm *t;
{
	for (; *format; ++format) {
		if (*format == '%') {
			++format;
			if (*format == 'E') {
				/* Alternate Era */
				++format;
			} else if (*format == 'O') {
				/* Alternate numeric symbols */
				++format;
			}
			switch(*format) {
			case '\0':
				--format;
				break;
			case 'A':
				if (t->tm_wday < 0 || t->tm_wday > 6)
					return(0);
				if (!_add(_CurrentTimeLocale->day[t->tm_wday]))
					return(0);
				continue;
			case 'a':
				if (t->tm_wday < 0 || t->tm_wday > 6)
					return(0);
				if (!_add(_CurrentTimeLocale->abday[t->tm_wday]))
					return(0);
				continue;
			case 'B':
				if (t->tm_mon < 0 || t->tm_mon > 11)
					return(0);
				if (!_add(_CurrentTimeLocale->mon[t->tm_mon]))
					return(0);
				continue;
			case 'b':
			case 'h':
				if (t->tm_mon < 0 || t->tm_mon > 11)
					return(0);
				if (!_add(_CurrentTimeLocale->abmon[t->tm_mon]))
					return(0);
				continue;
			case 'C':
				if (!_conv((t->tm_year + TM_YEAR_BASE) / 100,
				    2, '0'))
					return(0);
				continue;
			case 'c':
				if (!_fmt(_CurrentTimeLocale->d_t_fmt, t))
					return(0);
				continue;
			case 'D':
				if (!_fmt("%m/%d/%y", t))
					return(0);
				continue;
			case 'd':
				if (!_conv(t->tm_mday, 2, '0'))
					return(0);
				continue;
			case 'e':
				if (!_conv(t->tm_mday, 2, ' '))
					return(0);
				continue;
			case 'H':
				if (!_conv(t->tm_hour, 2, '0'))
					return(0);
				continue;
			case 'I':
				if (!_conv(t->tm_hour % 12 ?
				    t->tm_hour % 12 : 12, 2, '0'))
					return(0);
				continue;
			case 'j':
				if (!_conv(t->tm_yday + 1, 3, '0'))
					return(0);
				continue;
			case 'k':
				if (!_conv(t->tm_hour, 2, ' '))
					return(0);
				continue;
			case 'l':
				if (!_conv(t->tm_hour % 12 ?
				    t->tm_hour % 12: 12, 2, ' '))
					return(0);
				continue;
			case 'M':
				if (!_conv(t->tm_min, 2, '0'))
					return(0);
				continue;
			case 'm':
				if (!_conv(t->tm_mon + 1, 2, '0'))
					return(0);
				continue;
			case 'n':
				if (!_add("\n"))
					return(0);
				continue;
			case 'p':
				if (!_add(_CurrentTimeLocale->am_pm[t->tm_hour >= 12]))
					return(0);
				continue;
			case 'R':
				if (!_fmt("%H:%M", t))
					return(0);
				continue;
			case 'r':
				if (!_fmt(_CurrentTimeLocale->t_fmt_ampm, t))
					return(0);
				continue;
			case 'S':
				if (!_conv(t->tm_sec, 2, '0'))
					return(0);
				continue;
			case 's':
				if (!_secs(t))
					return(0);
				continue;
			case 'T':
				if (!_fmt("%H:%M:%S", t))
					return(0);
				continue;
			case 't':
				if (!_add("\t"))
					return(0);
				continue;
			case 'U':
				if (!_conv(SUN_WEEK(t), 2, '0'))
					return(0);
				continue;
			case 'u':
				if (!_conv(t->tm_wday ? t->tm_wday : 7, 1, '0'))
					return(0);
				continue;
			case 'V':
				{
				/* ISO 8601 Week Of Year:
				   If the week (Monday - Sunday) containing
				   January 1 has four or more days in the new 
				   year, then it is week 1; otherwise it is 
				   week 53 of the previous year and the next
				   week is week one. */
				 
				int week = MON_WEEK(t);

				int days = (((t)->tm_yday + 7 - \
                                ((t)->tm_wday ? (t)->tm_wday - 1 : 6)) % 7);


				if (days >= 4) {
					week++;
				} else if (week == 0) {
					week = 53;
				}

				if (!_conv(week, 2, '0'))
					return(0);
				continue;
				}
			case 'W':
				if (!_conv(MON_WEEK(t), 2, '0'))
					return(0);
				continue;
			case 'w':
				if (!_conv(t->tm_wday, 1, '0'))
					return(0);
				continue;
			case 'x':
				if (!_fmt(_CurrentTimeLocale->d_fmt, t))
					return(0);
				continue;
			case 'X':
				if (!_fmt(_CurrentTimeLocale->t_fmt, t))
					return(0);
				continue;
			case 'y':
				if (!_conv((t->tm_year + TM_YEAR_BASE) % 100,
				    2, '0'))
					return(0);
				continue;
			case 'Y':
				if (!_conv((t->tm_year + TM_YEAR_BASE), 4, '0'))
					return(0);
				continue;
			case 'Z':
				if (tzname[t->tm_isdst ? 1 : 0] &&
				    !_add(tzname[t->tm_isdst ? 1 : 0]))
					return(0);
				continue;
			case '%':
			/*
			 * X311J/88-090 (4.12.3.5): if conversion char is
			 * undefined, behavior is undefined.  Print out the
			 * character itself as printf(3) does.
			 */
			default:
				break;
			}
		}
		if (!gsize--)
			return(0);
		*pt++ = *format;
	}
	return(gsize);
}

static int
_secs(t)
	const struct tm *t;
{
	static char buf[15];
	register time_t s;
	register char *p;
	struct tm tmp;

	/* Make a copy, mktime(3) modifies the tm struct. */
	tmp = *t;
	s = mktime(&tmp);
	for (p = buf + sizeof(buf) - 2; s > 0 && p > buf; s /= 10)
		*p-- = s % 10 + '0';
	return(_add(++p));
}

static int
#ifdef __STDC__
_conv(int n, int digits, char pad)
#else
_conv(n, digits, pad)
	int n, digits;
	char pad;
#endif
{
	static char buf[10];
	register char *p;

	for (p = buf + sizeof(buf) - 2; n > 0 && p > buf; n /= 10, --digits)
		*p-- = n % 10 + '0';
	while (p > buf && digits-- > 0)
		*p-- = pad;
	return(_add(++p));
}

static int
_add(str)
	register const char *str;
{
	for (;; ++pt, --gsize) {
		if (!gsize)
			return(0);
		if (!(*pt = *str++))
			return(1);
	}
}
@


1.8
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.7 1996/10/28 16:53:28 tholo Exp $";
@


1.7
log
@Deal correctly with time zones
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.6 1996/08/19 08:34:18 tholo Exp $";
d299 1
a299 1
#if __STDC__
@


1.6
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.5 1996/06/10 06:19:33 deraadt Exp $";
d260 2
a261 1
				if (t->tm_zone && !_add(t->tm_zone))
@


1.5
log
@fix %V
@
text
@a0 2
/*	$OpenBSD: strftime.c,v 1.3 1996/03/09 02:42:58 niklas Exp $	*/

d35 1
a35 2
/*static char *sccsid = "from: @@(#)strftime.c	5.11 (Berkeley) 2/24/91";*/
static char *rcsid = "$Id: strftime.c,v 1.4 1996/03/25 21:17:36 tholo Exp $";
@


1.4
log
@Add prototypes for local functions, add const qualifiers where needed
@
text
@d38 1
a38 1
static char *rcsid = "$Id: strftime.c,v 1.3 1996/03/09 02:42:58 niklas Exp $";
d223 5
a227 1
				if (((t->tm_yday + 7 - (t->tm_wday + 1)) % 7) >= 4) {
@


1.3
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
static char *rcsid = "$Id: strftime.c,v 1.2 1995/12/30 08:16:41 deraadt Exp $";
d49 4
a52 2
static int _add(), _conv(), _secs();
static size_t _fmt();
d79 2
a80 2
	register char *format;
	struct tm *t;
d281 1
a281 1
	struct tm *t;
d297 3
d303 1
d317 1
a317 1
	register char *str;
@


1.2
log
@from netbsd: Fixed %u to expand to a single digit
@
text
@d1 2
d38 1
a38 1
static char *rcsid = "$Id: strftime.c,v 1.9 1995/12/28 23:02:42 jtc Exp $";
d277 1
a277 1
static
d294 1
a294 1
static
d309 1
a309 1
static
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
static char *rcsid = "$Id: strftime.c,v 1.8 1994/09/29 04:57:04 jtc Exp $";
d205 1
a205 1
				if (!_conv(t->tm_wday ? t->tm_wday : 7, 2, '0'))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
