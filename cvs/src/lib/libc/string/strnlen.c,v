head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.2
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.8
date	2016.10.16.17.37.39;	author dtucker;	state Exp;
branches;
next	1.7;
commitid	kJsJHw9RVPn8qSrV;

1.7
date	2016.10.14.18.19.04;	author dtucker;	state Exp;
branches;
next	1.6;
commitid	bSnHI7WXBcGpa9XK;

1.6
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.5;
commitid	lTMF8Y3C9fQGd6jQ;

1.5
date	2014.06.10.04.17.37;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	nyZqTtc9feHCYvvX;

1.4
date	2012.04.26.01.22.31;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.02.12.58.12;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.21.06.57.45;	author chl;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.18.22.24.55;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Roll back uintptr_t cast changes after discussions with tedu, otto and
others.

C11 6.5.6.9 says:
When two pointers are subtracted, both shall point to elements of the
same array object, or one past the last element of the array object; the
result is the difference of the subscripts of the two array elements.

In these cases the objects are arrays of char so the result is defined,
and we believe that the report is based on a compiler incorrectly trapping
on defined behaviour.
@
text
@/*	$OpenBSD: strnlen.c,v 1.6 2015/08/31 02:53:57 guenther Exp $	*/

/*
 * Copyright (c) 2010 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <string.h>

size_t
strnlen(const char *str, size_t maxlen)
{
	const char *cp;

	for (cp = str; maxlen != 0 && *cp != '\0'; cp++, maxlen--)
		;

	return (size_t)(cp - str);
}
DEF_WEAK(strnlen);
@


1.7
log
@Cast pointers to uintptr_t to avoid potential signedness errors.
Based on patch from yuanjie.huang at windriver.com via OpenSSH bz#2608,
with & ok millert, ok deraadt.
@
text
@a21 1
#include <stdint.h>
d31 1
a31 5
	/*
	 * Cast pointers to unsigned type before calculation, to avoid signed
	 * overflow when the string ends where the MSB has changed.
	 */
	return (size_t)((uintptr_t)cp - (uintptr_t)str);
@


1.6
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strnlen.c,v 1.5 2014/06/10 04:17:37 deraadt Exp $	*/
d22 1
d32 5
a36 1
	return (size_t)(cp - str);
@


1.5
log
@mop up ifndef KERNEL goo; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: strnlen.c,v 1.4 2012/04/26 01:22:31 matthew Exp $	*/
d33 1
@


1.4
log
@Add strnlen() to libkern.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: strnlen.c,v 1.3 2010/06/02 12:58:12 millert Exp $	*/
a20 1
#if !defined(_KERNEL) && !defined(_STANDALONE)
a21 3
#else
#include <lib/libkern/libkern.h>
#endif
@


1.3
log
@Avoid using and end pointer since strnlen(string, -1) is legal
and would otherwise result in overflowing the end pointer and
cause strnlen() to return 0.  OK sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strnlen.c,v 1.2 2010/05/21 06:57:45 chl Exp $	*/
d21 1
d23 3
@


1.2
log
@remove unused variable.

ok millert@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strnlen.c,v 1.1 2010/05/18 22:24:55 tedu Exp $	*/
d26 1
a26 1
	const char *cp, *ep;
d28 1
a28 2
	ep = str + maxlen;
	for (cp = str; cp < ep && *cp != '\0'; cp++)
@


1.1
log
@add posix_madvise, posix_memalign, strndup, and strnlen.  mostly from
brad and millert, with hints from guenther, jmc, and otto I think.
ok previous.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a26 1
	size_t len;
@

