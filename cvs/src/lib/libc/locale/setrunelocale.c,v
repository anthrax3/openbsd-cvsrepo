head	1.15;
access;
symbols
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.09.05.09.47.03;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	pwnoqOj4YLQyPERN;

1.14
date	2016.09.02.15.00.14;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	CCIL7ajgelIJkkGr;

1.13
date	2015.08.23.10.14.40;	author semarie;	state Exp;
branches;
next	1.12;
commitid	yYPsHxgjII8uiBrL;

1.12
date	2015.08.14.14.29.45;	author stsp;	state Exp;
branches;
next	1.11;
commitid	zuc59OLKqGdynskq;

1.11
date	2014.09.15.06.15.48;	author guenther;	state Exp;
branches;
next	1.10;
commitid	ztgYHm1nk3mtTyS3;

1.10
date	2013.06.01.20.02.53;	author stsp;	state Exp;
branches;
next	1.9;

1.9
date	2013.05.30.18.35.55;	author stsp;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.03.13.53.49;	author stsp;	state Exp;
branches;
next	1.7;

1.7
date	2012.12.05.23.20.00;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.15.22.27.48;	author stsp;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.27.16.59.04;	author stsp;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.05.42.05;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.17.07.07.23;	author moritz;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.20.09.09.49;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.07.10.16.24;	author espie;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Delete some abstraction that we don't and won't need.
Declare functions rather than generating declarations with macros.
Just call functions rather than mainting function pointer tables.
Purge unused arguments.  Simplify mbstate_t casting.
Garbage collect one empty and one unused function.

As a bonus, make mbsinit(3) work at all, it returned garbage
in the past due to a missing cast when passing mbstate_t.
Apart from that, no functional change.

No libc bump needed; only private functions are removed and
change prototype and only private structs change size.

OK stsp@@ mpi@@; deraadt@@ likes the general direction.
@
text
@/*	$OpenBSD: setrunelocale.c,v 1.14 2016/09/02 15:00:14 schwarze Exp $ */
/*	$NetBSD: setrunelocale.c,v 1.14 2003/08/07 16:43:07 agc Exp $	*/

/*-
 * Copyright (c)1999 Citrus Project,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Paul Borman at Krystal Technologies.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <errno.h>
#include <limits.h>
#include <paths.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wchar.h>

#include "citrus_ctype.h"
#include "rune.h"
#include "rune_local.h"

static _RuneLocale *_Utf8RuneLocale;


int
_newrunelocale(const char *path)
{
	FILE *fp;

	if (_Utf8RuneLocale != NULL)
		return 0;

	if ((fp = fopen(path, "re")) == NULL)
		return ENOENT;

	if ((_Utf8RuneLocale = _Read_RuneMagi(fp)) == NULL) {
		fclose(fp);
		return EFTYPE;
	}
	fclose(fp);
	return 0;
}

int
_xpg4_setrunelocale(const char *locname)
{
	char path[PATH_MAX];
	int error, len;
	const char *dot, *encoding;

	if (!strcmp(locname, "C") || !strcmp(locname, "POSIX")) {
		_CurrentRuneLocale = &_DefaultRuneLocale;
		__mb_cur_max = 1;
		return 0;
	}

	/* Assumes "language[_territory][.codeset]" locale name. */
	dot = strrchr(locname, '.');
	if (dot == NULL) {
		/* No encoding specified. Fall back to ASCII. */
		_CurrentRuneLocale = &_DefaultRuneLocale;
		__mb_cur_max = 1;
		return 0;
	}

	encoding = dot + 1;
	if (strcmp(encoding, "UTF-8") != 0)
		return ENOTSUP;

	len = snprintf(path, sizeof(path),
	    "%s/UTF-8/LC_CTYPE", _PATH_LOCALE);
	if (len < 0 || len >= sizeof(path))
		return ENAMETOOLONG;

	error = _newrunelocale(path);
	if (error)
		return error;
	if (_Utf8RuneLocale == NULL)
		return ENOENT;
	_CurrentRuneLocale = _Utf8RuneLocale;
	__mb_cur_max = _CITRUS_UTF8_MB_CUR_MAX;
	return 0;
}
@


1.14
log
@Since we support only one non-ASCII LC_CTYPE locale, we don't need
a linked list to store it.  No functional change.
OK mpi@@ guenther@@,
and stsp@@ agrees too that the time is ripe to start such cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.13 2015/08/23 10:14:40 semarie Exp $ */
a109 1
	_RuneLocale *rl;
d117 1
a117 1
	if ((rl = _Read_RuneMagi(fp)) == NULL) {
a121 9

	rl->rl_citrus_ctype = NULL;

	if (_citrus_ctype_open(&rl->rl_citrus_ctype, rl->rl_encoding)) {
		_NukeRune(rl);
		return EINVAL;
	}
	_Utf8RuneLocale = rl;

d134 2
a135 1
		goto found;
d143 2
a144 1
		goto found;
d162 1
a162 4

found:
	__mb_cur_max = _CurrentRuneLocale->rl_citrus_ctype->cc_mb_cur_max;

@


1.13
log
@restore codeset checking: we shouldn't silency fallback to ASCII codeset.

there is a test for "only UTF-8" after, that will return ENOTSUP. So the caller
will known the wanted codeset isn't supported.

problem spotted by guenther@@

OK stsp@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.12 2015/08/14 14:29:45 stsp Exp $ */
a90 1
#include <assert.h>
a92 1
#include <locale.h>
a95 1
#include <stddef.h>
d97 1
a97 1
#include <unistd.h>
d103 1
a103 11
struct localetable {
	char path[PATH_MAX];
	_RuneLocale *runelocale;
	struct localetable *next;
};
static struct localetable *localetable_head;

_RuneLocale *
_findrunelocale(const char *path)
{
	struct localetable *lt;
a104 7
	/* ones which we have seen already */
	for (lt = localetable_head; lt; lt = lt->next)
		if (strcmp(path, lt->path) == 0)
			return lt->runelocale;

	return NULL;
}
a108 1
	struct localetable *lt;
d112 1
a112 5
	if (strlen(path) + 1 > sizeof(lt->path))
		return EINVAL;

	rl = _findrunelocale(path);
	if (rl)
d118 4
a121 7
	if ((rl = _Read_RuneMagi(fp)) != NULL)
		goto found;

	fclose(fp);
	return EFTYPE;

found:
d130 1
a130 11

	/* register it */
	lt = malloc(sizeof(struct localetable));
	if (lt == NULL) {
		_NukeRune(rl);
		return ENOMEM;
	}
	strlcpy(lt->path, path, sizeof(lt->path));
	lt->runelocale = rl;
	lt->next = localetable_head;
	localetable_head = lt;
a138 1
	_RuneLocale *rl;
d143 1
a143 1
		rl = &_DefaultRuneLocale;
d151 1
a151 1
		rl = &_DefaultRuneLocale;
d160 1
a160 1
	    "%s/%s/LC_CTYPE", _PATH_LOCALE, encoding);
d167 1
a167 2
	rl = _findrunelocale(path);
	if (!rl)
d169 1
d172 1
a172 2
	_CurrentRuneLocale = rl;
	__mb_cur_max = rl->rl_citrus_ctype->cc_mb_cur_max;
@


1.12
log
@Disable support for loading LC_CTYPE locales other than UTF-8.
ok mpi tedu phessler zhuk, and discussed with many at c2k15
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.11 2014/09/15 06:15:48 guenther Exp $ */
d187 1
a187 1
	dot = strstr(locname, ".UTF-8");
@


1.11
log
@When fopen()ing internal to libc (the API doesn't support the use
of the resulting FILE *), then pass fopen() the 'e' mode letter to
mark it close-on-exec.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.10 2013/06/01 20:02:53 stsp Exp $ */
d187 1
a187 1
	dot = strrchr(locname, '.');
d195 3
@


1.10
log
@Change the naming scheme used for directories in /usr/share/locale to
eliminate redundant copies of LC_CTYPE files.

Instead of names using "language_territory.codeset" permutations, use just
the codeset component to name directories storing LC_CTYPE files. Suggested
by bluhm@@ while discussing the idea of using symlinks in /usr/share/locale
like FreeBSD does.

Future locale features which store language and/or territory specific data
can name directories after language or territory names.
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.9 2013/05/30 18:35:55 stsp Exp $ */
d140 1
a140 1
	if ((fp = fopen(path, "r")) == NULL)
@


1.9
log
@Sort includes. From Vladimir Tamara Patino <vtamara@@pasosdeJesus.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.8 2013/05/03 13:53:49 stsp Exp $ */
d174 1
a174 1
_xpg4_setrunelocale(const char *encoding)
d179 1
d181 1
a181 1
	if (!strcmp(encoding, "C") || !strcmp(encoding, "POSIX")) {
d186 9
@


1.8
log
@Fix resetting MB_CUR_MAX when switching locales away from a UTF-8 locale.
Patch by Vladimir Támara Patiño <vtamara@@pasosdeJesus.org>
ok mpi millert
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.7 2012/12/05 23:20:00 deraadt Exp $ */
a90 1
#include "rune.h"
d94 1
a95 1
#include <string.h>
d99 1
d101 3
a103 2
#include <locale.h>
#include <citrus/citrus_ctype.h>
@


1.7
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.6 2011/03/15 22:27:48 stsp Exp $ */
d198 1
@


1.6
log
@Remove evaluation of PATH_LOCALE environment variable because it can be
abused to cause an integer overflow and serves no real purpose.
Found by Alexander Schrijver.
ok millert deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.5 2010/07/27 16:59:04 stsp Exp $ */
a89 2

#include <sys/cdefs.h>
@


1.5
log
@Replace the single-byte placeholders for the multi-byte/wide-character
conversion interfaces of libc (mbrtowc(3) and friends) with new
implementations that internally call an API based on NetBSD's citrus.
This allows us to support locales with multi-byte character encodings.

Provide two implementations of the citrus-based API: one based on the old
single-byte placeholders for use with our existing single-byte character
locales (C, ISO8859-*, KOI8, CP1251, etc.), and one that provides support
for UTF-8 encoded characters (code based on FreeBSD's implementation).

Install the en_US.UTF-8 ctype locale support file, and allow the UTF-8
ctype locale to be enabled via setlocale(3) (export LC_CTYPE='en_US.UTF-8').

A lot of programs, especially from ports, will now start using UTF-8 if the
UTF-8 locale is enabled. Use at your own risk, and please report any breakage.
Note that ncurses-based programs cannot display UTF-8 right now, this is being
worked on.

To prevent install media growth, add vfprintf(3) and mbrtowc(3) to libstubs.
The mbrtowc stub was copied unchanged from its old single-byte placeholder.
vfprintf.c doesn't need to be copied, just put in .PATH (hint by fgsch@@).

Testing by myself, naddy, sthen, nicm, espie, armani, Dmitrij D. Czarkoff.

ok matthieu espie millert sthen nicm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.4 2008/06/26 05:42:05 ray Exp $ */
d97 1
d187 1
a187 1
	    "%s/%s/LC_CTYPE", _PathLocale, encoding);
@


1.4
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.3 2007/09/17 07:07:23 moritz Exp $ */
d154 1
a154 1
	if (strcmp(rl->rl_encoding, _CITRUS_DEFAULT_CTYPE_NAME) != 0) {
d158 1
@


1.3
log
@Check snprintf(3) return value for error or truncation.
Mostly path construction, where truncation could be bad.

ok and input from deraadt@@ millert@@ ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.2 2005/10/20 09:09:49 otto Exp $ */
a44 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.2
log
@A library should not return EFAULT. Just segfault if a bogus or
NULL pointer is passed in.
ok espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setrunelocale.c,v 1.1 2005/08/07 10:16:24 espie Exp $ */
d184 1
a184 1
	int error;
d191 4
a194 1
	snprintf(path, sizeof(path), "%s/%s/LC_CTYPE", _PathLocale, encoding);
@


1.1
log
@commit LC_CTYPE files from NetBSD/citrus, not yet linked in.
okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d140 2
a141 4
	/* path may be NULL (actually, it's checked below) */

	if (!path || strlen(path) + 1 > sizeof(lt->path))
		return EFAULT;
@

