head	1.8;
access;
symbols
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.09.05.03.16.13;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	ngpX0SPDX30tzjDf;

1.7
date	2016.09.05.09.47.03;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	pwnoqOj4YLQyPERN;

1.6
date	2015.09.12.16.23.14;	author guenther;	state Exp;
branches;
next	1.5;
commitid	crCjb99r4AuxzOpl;

1.5
date	2015.02.05.12.59.57;	author millert;	state Exp;
branches;
next	1.4;
commitid	DTQbfd4poqBW8iSJ;

1.4
date	2012.12.05.23.20.00;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.14.08.47.58;	author chl;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.06.16.58.02;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.16.59.04;	author stsp;	state Exp;
branches;
next	;


desc
@@


1.8
log
@New POSIX xlocale implementation written from scratch.
Complete in the sense that all POSIX *locale(3) and *_l(3) functions
are included, but in OpenBSD, we of course only really care about
LC_CTYPE and we only support ASCII and UTF-8.

With important help from kettenis@@, guenther@@, and jca@@.
Repeated testing in ports bulk builds by naddy@@.
Additional testing by jca@@, sebastia@@, dcoppa@@, and others.
OK kettenis@@ dcoppa@@, and guenther@@ on an earlier version.
Riding guenther@@'s libc/librthread major bump.
@
text
@/*	$OpenBSD: multibyte_citrus.c,v 1.7 2016/09/05 09:47:03 schwarze Exp $ */
/*	$NetBSD: multibyte_amd1.c,v 1.7 2009/01/11 02:46:28 christos Exp $ */

/*-
 * Copyright (c)2002, 2008 Citrus Project,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdint.h>
#include <stdlib.h>
#include <wchar.h>

#include "citrus_ctype.h"

int
mbsinit(const mbstate_t *ps)
{
	if (ps == NULL || __mb_cur_max() == 1)
		return 1;
	return _citrus_utf8_ctype_mbsinit(ps);
}
DEF_STRONG(mbsinit);

size_t
mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
{
	static mbstate_t mbs;

	if (ps == NULL)
		ps = &mbs;
	if (__mb_cur_max() == 1)
		return _citrus_none_ctype_mbrtowc(pwc, s, n);
	return _citrus_utf8_ctype_mbrtowc(pwc, s, n, ps);
}
DEF_STRONG(mbrtowc);

size_t
mbsrtowcs(wchar_t *dst, const char **src, size_t len, mbstate_t *ps)
{
	static mbstate_t mbs;

	if (ps == NULL)
		ps = &mbs;
	return (mbsnrtowcs(dst, src, SIZE_MAX, len, ps));
}
DEF_STRONG(mbsrtowcs);

size_t
mbsnrtowcs(wchar_t *dst, const char **src, size_t nmc, size_t len,
    mbstate_t *ps)
{
	static mbstate_t mbs;

	if (ps == NULL)
		ps = &mbs;
	if (__mb_cur_max() == 1)
		return _citrus_none_ctype_mbsnrtowcs(dst, src, nmc, len);
	return _citrus_utf8_ctype_mbsnrtowcs(dst, src, nmc, len, ps);
}
DEF_WEAK(mbsnrtowcs);

size_t
wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
{
	static mbstate_t mbs;

	if (ps == NULL)
		ps = &mbs;
	if (__mb_cur_max() == 1)
		return _citrus_none_ctype_wcrtomb(s, wc);
	return _citrus_utf8_ctype_wcrtomb(s, wc, ps);
}
DEF_STRONG(wcrtomb);

size_t
wcsrtombs(char *dst, const wchar_t **src, size_t len, mbstate_t *ps)
{
	static mbstate_t mbs;

	if (ps == NULL)
		ps = &mbs;
	return (wcsnrtombs(dst, src, SIZE_MAX, len, ps));
}
DEF_STRONG(wcsrtombs);

size_t
wcsnrtombs(char *dst, const wchar_t **src, size_t nwc, size_t len,
    mbstate_t *ps)
{
	static mbstate_t mbs;

	if (ps == NULL)
		ps = &mbs;
	if (__mb_cur_max() == 1)
		return _citrus_none_ctype_wcsnrtombs(dst, src, nwc, len);
	return _citrus_utf8_ctype_wcsnrtombs(dst, src, nwc, len, ps);
}
DEF_WEAK(wcsnrtombs);
@


1.7
log
@Delete some abstraction that we don't and won't need.
Declare functions rather than generating declarations with macros.
Just call functions rather than mainting function pointer tables.
Purge unused arguments.  Simplify mbstate_t casting.
Garbage collect one empty and one unused function.

As a bonus, make mbsinit(3) work at all, it returned garbage
in the past due to a missing cast when passing mbstate_t.
Apart from that, no functional change.

No libc bump needed; only private functions are removed and
change prototype and only private structs change size.

OK stsp@@ mpi@@; deraadt@@ likes the general direction.
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_citrus.c,v 1.6 2015/09/12 16:23:14 guenther Exp $ */
d40 1
a40 1
	if (ps == NULL || __mb_cur_max == 1)
d53 1
a53 1
	if (__mb_cur_max == 1)
d78 1
a78 1
	if (__mb_cur_max == 1)
d91 1
a91 1
	if (__mb_cur_max == 1)
d116 1
a116 1
	if (__mb_cur_max == 1)
@


1.6
log
@Wrap <inttypes.h> and finish wrapping of <wchar.h> so that calls go direct
and the symbols not in the C standard are weak
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_citrus.c,v 1.5 2015/02/05 12:59:57 millert Exp $ */
a30 1
#include <errno.h>
d32 1
a35 2
#include "rune.h"
#include "multibyte.h"
d40 1
a40 4
	struct _citrus_ctype_rec *cc;
	_RuneLocale *rl;

	if (ps == NULL)
d42 1
a42 6

	rl = _ps_to_runelocale(ps);
	if (rl == NULL)
		rl = _CurrentRuneLocale;
	cc = rl->rl_citrus_ctype;
	return (*cc->cc_ops->co_mbsinit)(ps);
a49 1
	struct _citrus_ctype_rec *cc;
d53 3
a55 2
	cc = _CurrentRuneLocale->rl_citrus_ctype;
	return (*cc->cc_ops->co_mbrtowc)(pwc, s, n, _ps_to_private(ps));
a74 1
	struct _citrus_ctype_rec *cc;
d78 3
a80 3
	cc = _CurrentRuneLocale->rl_citrus_ctype;
	return (*cc->cc_ops->co_mbsnrtowcs)(dst, src, nmc, len,
	    _ps_to_private(ps));
a87 1
	struct _citrus_ctype_rec *cc;
d91 3
a93 2
	cc = _CurrentRuneLocale->rl_citrus_ctype;
	return (*cc->cc_ops->co_wcrtomb)(s, wc, _ps_to_private(ps));
a112 1
	struct _citrus_ctype_rec *cc;
d116 3
a118 3
	cc = _CurrentRuneLocale->rl_citrus_ctype;
	return (*cc->cc_ops->co_wcsnrtombs)(dst, src, nwc, len,
	    _ps_to_private(ps));
@


1.5
log
@Include stdint.h, not limits.h to get SIZE_MAX.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_citrus.c,v 1.4 2012/12/05 23:20:00 deraadt Exp $ */
d54 1
d67 1
d78 1
d93 1
d106 1
d117 1
d132 1
@


1.4
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_citrus.c,v 1.3 2012/08/14 08:47:58 chl Exp $ */
d32 1
a32 1
#include <limits.h>
@


1.3
log
@remove unused variable

ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_citrus.c,v 1.2 2012/06/06 16:58:02 matthew Exp $ */
a29 1
#include <sys/cdefs.h>
@


1.2
log
@Add support for mbsnrtowcs() and wcsnrtombs() to libc.

Bulk build test by naddy.
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_citrus.c,v 1.1 2010/07/27 16:59:04 stsp Exp $ */
a71 1
	struct _citrus_ctype_rec *cc;
@


1.1
log
@Replace the single-byte placeholders for the multi-byte/wide-character
conversion interfaces of libc (mbrtowc(3) and friends) with new
implementations that internally call an API based on NetBSD's citrus.
This allows us to support locales with multi-byte character encodings.

Provide two implementations of the citrus-based API: one based on the old
single-byte placeholders for use with our existing single-byte character
locales (C, ISO8859-*, KOI8, CP1251, etc.), and one that provides support
for UTF-8 encoded characters (code based on FreeBSD's implementation).

Install the en_US.UTF-8 ctype locale support file, and allow the UTF-8
ctype locale to be enabled via setlocale(3) (export LC_CTYPE='en_US.UTF-8').

A lot of programs, especially from ports, will now start using UTF-8 if the
UTF-8 locale is enabled. Use at your own risk, and please report any breakage.
Note that ncurses-based programs cannot display UTF-8 right now, this is being
worked on.

To prevent install media growth, add vfprintf(3) and mbrtowc(3) to libstubs.
The mbrtowc stub was copied unchanged from its old single-byte placeholder.
vfprintf.c doesn't need to be copied, just put in .PATH (hint by fgsch@@).

Testing by myself, naddy, sthen, nicm, espie, armani, Dmitrij D. Czarkoff.

ok matthieu espie millert sthen nicm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d33 1
d69 13
a81 1
mbsrtowcs(wchar_t *pwcs, const char **s, size_t n, mbstate_t *ps)
d89 2
a90 1
	return (*cc->cc_ops->co_mbsrtowcs)(pwcs, s, n, _ps_to_private(ps));
d106 12
a117 1
wcsrtombs(char *s, const wchar_t **ppwcs, size_t n, mbstate_t *ps)
d125 2
a126 1
	return (*cc->cc_ops->co_wcsrtombs)(s, ppwcs, n, _ps_to_private(ps));
@

