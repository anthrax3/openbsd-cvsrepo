head	1.8;
access;
symbols
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5;
locks; strict;
comment	@ * @;


1.8
date	2010.07.27.16.59.04;	author stsp;	state dead;
branches;
next	1.7;

1.7
date	2008.08.23.07.51.35;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.10.02.01.51;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.11.20.51.56;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2005.08.08.08.05.35;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.24.09.50.49;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.17.20.40.32;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.11.18.44.12;	author espie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Replace the single-byte placeholders for the multi-byte/wide-character
conversion interfaces of libc (mbrtowc(3) and friends) with new
implementations that internally call an API based on NetBSD's citrus.
This allows us to support locales with multi-byte character encodings.

Provide two implementations of the citrus-based API: one based on the old
single-byte placeholders for use with our existing single-byte character
locales (C, ISO8859-*, KOI8, CP1251, etc.), and one that provides support
for UTF-8 encoded characters (code based on FreeBSD's implementation).

Install the en_US.UTF-8 ctype locale support file, and allow the UTF-8
ctype locale to be enabled via setlocale(3) (export LC_CTYPE='en_US.UTF-8').

A lot of programs, especially from ports, will now start using UTF-8 if the
UTF-8 locale is enabled. Use at your own risk, and please report any breakage.
Note that ncurses-based programs cannot display UTF-8 right now, this is being
worked on.

To prevent install media growth, add vfprintf(3) and mbrtowc(3) to libstubs.
The mbrtowc stub was copied unchanged from its old single-byte placeholder.
vfprintf.c doesn't need to be copied, just put in .PATH (hint by fgsch@@).

Testing by myself, naddy, sthen, nicm, espie, armani, Dmitrij D. Czarkoff.

ok matthieu espie millert sthen nicm deraadt
@
text
@/*	$OpenBSD: multibyte_sb.c,v 1.7 2008/08/23 07:51:35 djm Exp $	*/
/*	$NetBSD: multibyte_sb.c,v 1.4 2003/08/07 16:43:04 agc Exp $	*/

/*
 * Copyright (c) 1991 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <errno.h>
#include <stdlib.h>
#include <wchar.h>

/*
 * Stub multibyte character functions.
 * This cheezy implementation is fixed to the native single-byte
 * character set.
 */

/*ARGSUSED*/
int
mbsinit(const mbstate_t *ps)
{

	return 1;
}

/*ARGSUSED*/
size_t
mbrlen(const char *s, size_t n, mbstate_t *ps)
{

	/* ps appears to be unused */

	if (s == NULL || *s == '\0')
		return 0;
	if (n == 0)
		return (size_t)-1;
	return 1;
}

int
mblen(const char *s, size_t n)
{

	/* s may be NULL */

	return mbrlen(s, n, NULL);
}

/*ARGSUSED*/
size_t
wcrtomb(char *s, wchar_t wchar, mbstate_t *ps)
{

	/* s may be NULL */
	/* ps appears to be unused */

	if (s == NULL)
		return 0;

	*s = (char) wchar;
	return 1;
}

int
wctomb(char *s, wchar_t wchar)
{

	/* s may be NULL */

	return wcrtomb(s, wchar, NULL);
}

/*ARGSUSED*/
size_t
mbsrtowcs(wchar_t *pwcs, const char **s, size_t n, mbstate_t *ps)
{
	int count = 0;

	/* pwcs may be NULL */
	/* s may be NULL */
	/* ps appears to be unused */

	if (!s || !*s)
		return 0;

	if (n != 0) {
		if (pwcs != NULL) {
			do {
				if ((*pwcs++ = (wchar_t)(unsigned char)*(*s)++) == 0)
					break;
				count++;
			} while (--n != 0);
		} else {
			do {
				if (((wchar_t)*(*s)++) == 0)
					break;
				count++;
			} while (--n != 0);
		}
	}
	
	return count;
}

size_t
mbstowcs(wchar_t *pwcs, const char *s, size_t n)
{

	/* pwcs may be NULL */
	if (pwcs == NULL)
		return strlen(s);

	return mbsrtowcs(pwcs, &s, n, NULL);
}

/*ARGSUSED*/
size_t
wcsrtombs(char *s, const wchar_t **pwcs, size_t n, mbstate_t *ps)
{
	int count = 0;

	/* s may be NULL */
	/* pwcs may be NULL */
	/* ps appears to be unused */

	if (pwcs == NULL || *pwcs == NULL)
		return (0);

	if (s == NULL) {
		while (*(*pwcs)++ != 0)
			count++;
		return(count);
	}

	if (n != 0) {
		do {
			if ((*s++ = (char) *(*pwcs)++) == 0)
				break;
			count++;
		} while (--n != 0);
	}

	return count;
}

size_t
wcstombs(char *s, const wchar_t *pwcs, size_t n)
{

	/* s may be NULL */
	/* pwcs may be NULL */

	return wcsrtombs(s, &pwcs, n, NULL);
}

wint_t
btowc(int c)
{
	if (c == EOF || c & ~0xFF)
		return WEOF;
	return (wint_t)c;
}

int
wctob(wint_t c)
{
	if (c == WEOF || c & ~0xFF)
		return EOF;
	return (int)c;
}

int
wcscoll(const wchar_t *s1, const wchar_t *s2)
{
	while (*s1 == *s2++)
		if (*s1++ == 0)
			return (0);
	return ((unsigned char)(*s1) - (unsigned char)(*--s2));
}

size_t 
wcsxfrm(wchar_t *dest, const wchar_t *src, size_t n)
{
	if (n == 0)
		return wcslen(src);
	return wcslcpy(dest, src, n);
}
@


1.7
log
@make mbstowcs(NULL, string, 0) correctly return the length of the
wchar_t string needed to represent "string", which in our case
is just strlen(string); feedback & "looks right" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_sb.c,v 1.6 2005/12/10 02:01:51 deraadt Exp $	*/
@


1.6
log
@because lint says so; ok espie
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_sb.c,v 1.5 2005/08/11 20:51:56 espie Exp $	*/
d135 2
a136 1
	/* s may be NULL */
@


1.5
log
@fix conversion to match iswctype.

`why didn't you just commit' deraadt@@
okay millert@@, otto@@...
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_sb.c,v 1.4 2005/08/08 08:05:35 espie Exp $	*/
d61 1
a61 1
		return -1;
@


1.4
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_sb.c,v 1.3 2005/07/24 09:50:49 espie Exp $	*/
d114 1
a114 1
				if ((*pwcs++ = (wchar_t) *(*s)++) == 0)
@


1.3
log
@split off mbrtowc functions, so that vfprintf won't pull the whole
multibyte_sb.c contents.

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: multibyte_sb.c,v 1.2 2005/06/17 20:40:32 espie Exp $	*/
a31 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: multibyte_sb.c,v 1.2 2005/06/17 20:40:32 espie Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.2
log
@
next citrus step.

reviewed by millert, otto, kevlo, naddy, kettenis...
libc+libstdc++ bump
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 1
a34 1
static char rcsid[] = "$OpenBSD$";
a75 28
}

/*ARGSUSED*/
size_t
mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
{

	/* pwc may be NULL */
	/* s may be NULL */
	/* ps appears to be unused */

	if (s == NULL)
		return 0;
	if (n == 0)
		return -1;
	if (pwc)
		*pwc = (wchar_t) *s;
	return (*s != '\0');
}

int
mbtowc(wchar_t *pwc, const char *s, size_t n)
{

	/* pwc may be NULL */
	/* s may be NULL */

	return mbrtowc(pwc, s, n, NULL);
@


1.1
log
@major abi changes:

* introduce the mbstate_t typedef.
impacts gnu libiconv, which has already been taken care of.

* Prepare for mb stuff to really exist, replace macro MB_CUR_MAX with
an external variable __mb_cur_max (impacts libX11 and various ports).

* use mbstate in all the mb <-> wchar functions with state.
* add a stub iswctype function allowing some ports to compile.

bash and gdiff are missing wcscoll, and need to be told there's no i18n
until this is fixed.

Discussed and matthieu, otto, millert, kettenis, deraadt.

Major libc bump
@
text
@d227 17
@

