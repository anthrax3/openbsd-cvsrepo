head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.14
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.10
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.12
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.8
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@.\" @;


1.5
date	2016.02.08.09.56.16;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	JR61TBSXs0sRYeEO;

1.4
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.14.59.49;	author stsp;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.31.19.19.29;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.11.18.44.12;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Align with reality, and with POSIX:  For this particular function,
incomplete characters are not an error, do not throw EILSEQ, and
are not supposed to.
OK millert@@
@
text
@.\" $OpenBSD: mbrtowc.3,v 1.4 2013/06/05 03:39:22 tedu Exp $
.\" $NetBSD: mbrtowc.3,v 1.5 2003/09/08 17:54:31 wiz Exp $
.\"
.\" Copyright (c)2002 Citrus Project,
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt MBRTOWC 3
.Os
.Sh NAME
.Nm mbrtowc
.Nd converts a multibyte character to a wide character (restartable)
.Sh SYNOPSIS
.In wchar.h
.Ft size_t
.Fn mbrtowc "wchar_t * restrict wc" "const char * restrict s" "size_t n" \
"mbstate_t * restrict mbs"
.Sh DESCRIPTION
The
.Fn mbrtowc
function examines at most
.Fa n
bytes of the multibyte character byte string pointed to by
.Fa s ,
converts those bytes to a wide character, and stores the wide character
in the wchar_t object pointed to by
.Fa wc
if
.Fa wc
is not
.Dv NULL
and
.Fa s
points to a valid character.
.Pp
Conversion happens in accordance with the conversion state described
by the mbstate_t object pointed to by
.Fa mbs .
The mbstate_t object must be initialized to zero before the application's
first call to
.Fn mbrtowc .
If the previous call to
.Fn mbrtowc
did not return (size_t)-1, the mbstate_t object can safely be reused
without reinitialization.
.Pp
The behaviour of
.Fn mbrtowc
is affected by the
.Dv LC_CTYPE
category of the current locale.
If the locale is changed without reinitialization of the mbstate_t object
pointed to by
.Fa mbs ,
the behaviour of
.Fn mbrtowc
is undefined.
.Pp
Unlike
.Xr mbtowc 3 ,
.Fn mbrtowc
will accept an incomplete byte sequence pointed to by
.Fa s
which does not form a complete character but is potentially part of
a valid character.
In this case,
.Fn mbrtowc
consumes all such bytes.
The conversion state saved in the mbstate_t object pointed to by
.Fa mbs
will be used to restart the suspended conversion during the next
call to
.Fn mbrtowc .
.Pp
In state-dependent encodings,
.Fa s
may point to a special sequence of bytes called a
.Dq shift sequence .
Shift sequences switch between character code sets available within an
encoding scheme.
One encoding scheme using shift sequences is ISO/IEC 2022-JP, which
can switch e.g. from ASCII (which uses one byte per character) to
JIS X 0208 (which uses two bytes per character).
Shift sequence bytes correspond to no individual wide character, so
.Fn mbrtowc
treats them as if they were part of the subsequent multibyte character.
Therefore they do contribute to the number of bytes in the multibyte character.
.Pp
Special cases in interpretation of arguments are as follows:
.Bl -tag -width 012345678901
.It "wc == NULL "
The conversion from a multibyte character to a wide character is performed
and the conversion state may be affected, but the resulting wide character
is discarded.
.Pp
This can be used to find out how many bytes are contained in the
multibyte character pointed to by
.Fa s .
.It "s == NULL "
.Fn mbrtowc
ignores
.Fa wc
and
.Fa n ,
and behaves equivalent to
.Bd -literal -offset indent
mbrtowc(NULL, "", 1, mbs);
.Ed
.Pp
which attempts to use the mbstate_t object pointed to by
.Fa mbs
to start or continue conversion using the empty string as input,
and discards the conversion result.
.Pp
If conversion succeeds, this call always returns zero.
Unlike
.Xr mbtowc 3 ,
the value returned does not indicate whether the current encoding of
the locale is state-dependent, i.e. uses shift sequences.
.It "mbs == NULL "
.Fn mbrtowc
uses its own internal state object to keep the conversion state,
instead of an mbstate_t object pointed to by
.Fa mbs .
This internal conversion state is initialized once at program startup.
It is not safe to call
.Fn mbrtowc
again with a
.Dv NULL
.Fa mbs
argument if
.Fn mbrtowc
returned (size_t)-1 because at this point the internal conversion state
is undefined.
.Pp
Calling any other functions in
.Em libc
never changes the internal
conversion state object of
.Fn mbrtowc .
.El
.Sh RETURN VALUES
.Bl -tag -width 012345678901
.It 0
The bytes pointed to by
.Fa s
form a terminating NUL character.
If
.Fa wc
is not
.Dv NULL ,
a NUL wide character has been stored in the wchar_t object pointed to by
.Fa wc .
.It positive
.Fa s
points to a valid character, and the value returned is the number of
bytes completing the character.
If
.Fa wc
is not
.Dv NULL ,
the corresponding wide character has been stored in the wchar_t object
pointed to by
.Fa wc .
.It (size_t)-1
.Fa s
points to an illegal byte sequence which does not form a valid multibyte
character in the current locale.
.Fn mbrtowc
sets
.Va errno
to EILSEQ.
The conversion state object pointed to by
.Fa mbs
is left in an undefined state and must be reinitialized before being
used again.
.Pp
Because applications using
.Fn mbrtowc
are shielded from the specifics of the multibyte character encoding scheme,
it is impossible to repair byte sequences containing encoding errors.
Such byte sequences must be treated as invalid and potentially malicious input.
Applications must stop processing the byte string pointed to by
.Fa s
and either discard any wide characters already converted, or cope with
truncated input.
.It (size_t)-2
.Fa s
points to an incomplete byte sequence of length
.Fa n
which has been consumed and contains part of a valid multibyte character.
The character may be completed by calling
.Fn mbrtowc
again with
.Fa s
pointing to one or more subsequent bytes of the multibyte character and
.Fa mbs
pointing to the conversion state object used during conversion of the
incomplete byte sequence.
.El
.Sh ERRORS
The
.Fn mbrtowc
function may cause an error in the following cases:
.Bl -tag -width Er
.It Bq Er EILSEQ
.Fa s
points to an invalid multibyte character.
.It Bq Er EINVAL
.Fa mbs
points to an invalid or uninitialized mbstate_t object.
.El
.Sh SEE ALSO
.Xr mbrlen 3 ,
.Xr mbtowc 3 ,
.Xr setlocale 3
.Sh STANDARDS
The
.Fn mbrtowc
function conforms to
.\" .St -isoC-amd1 .
ISO/IEC 9899/AMD1:1995
.Pq Dq ISO C90, Amendment 1 .
The restrict qualifier is added at
.\" .St -isoC99 .
ISO/IEC 9899:1999
.Pq Dq ISO C99 .
.Sh CAVEATS
.Fn mbrtowc
is not suitable for programs that care about internals of the character
encoding scheme used by the byte string pointed to by
.Fa s .
.Pp
It is possible that
.Fn mbrtowc
fails because of locale configuration errors.
An
.Dq invalid
character sequence may simply be encoded in a different encoding than that
of the current locale.
.Pp
The special cases for
.Fa s
== NULL and
.Fa mbs
== NULL do not make any sense.
Instead of passing
.Dv NULL
for
.Fa mbs ,
.Xr mbtowc 3
can be used.
.Pp
Earlier versions of this man page implied that calling
.Fn mbrtowc
with a
.Dv NULL
.Fa s
argument would always set
.Fa mbs
to the initial conversion state.
But this is true only if the previous call to
.Fn mbrtowc
using
.Fa mbs
did not return (size_t)-1 or (size_t)-2.
It is recommended to zero the mbstate_t object instead.
@


1.4
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\" $OpenBSD: mbrtowc.3,v 1.3 2010/12/05 14:59:49 stsp Exp $
d28 1
a28 1
.Dd $Mdocdate: December 5 2010 $
a212 4
.Fn mbrtowc
sets
.Va errno
to EILSEQ.
d229 1
a229 1
points to an invalid or incomplete multibyte character.
@


1.3
log
@Rewrite the mbrtowc(3) man page so we can make sense of this function.
tweaks from jmc, help from uwe, "We are going to have to trust you :-)" deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: mbrtowc.3,v 1.2 2007/05/31 19:19:29 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 31 2007 $
d35 1
a35 1
.Fd #include <wchar.h>
@


1.2
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: mbrtowc.3,v 1.1 2005/05/11 18:44:12 espie Exp $
d28 1
a28 1
.Dd $Mdocdate$
a30 1
.\" ----------------------------------------------------------------------
a33 1
.\" ----------------------------------------------------------------------
d37 2
a38 3
.Fn mbrtowc "wchar_t * restrict pwc" "const char * restrict s" "size_t n" \
"mbstate_t * restrict ps"
.\" ----------------------------------------------------------------------
d42 5
a46 3
usually converts the multibyte character pointed to by
.Fa s
to a wide character, and stores the wide character
d48 1
a48 1
.Fa pwc
d50 4
a53 2
.Fa pwc
is non-null and
a55 7
The conversion happens in accordance with the conversion state
described in the mbstate_t object pointed to by
.Fa ps .
This function may examine at most
.Fa n
bytes of the array beginning from
.Fa s .
d57 20
a76 4
If
.Fa s
points to a valid character and the character corresponds to a null wide
character, then the
d78 1
a78 3
places the mbstate_t object pointed to by
.Fa ps
to an initial conversion state.
a81 1
the
d83 1
a83 1
may accept the byte sequence pointed to by
d85 10
a94 7
not forming a complete multibyte character
but which may be part of a valid character.
In this case, this function will accept all such bytes
and save them into the conversion state object pointed to by
.Fa ps .
They will be used at subsequent calls of this function to restart
the conversion suspended.
d96 10
a105 1
The behaviour of the
d107 2
a108 3
is affected by the
.Dv LC_CTYPE
category of the current locale.
d110 1
a110 1
These are the special cases:
d112 4
a115 9
.It "s == NULL"
.Fn mbrtowc
sets the conversion state object pointed to by
.Fa ps
to an initial state and always returns 0.
Unlike
.Xr mbtowc 3 ,
the value returned does not indicate whether the current encoding of
the locale is state-dependent.
d117 4
a120 1
In this case,
d123 1
a123 1
.Fa pwc
d126 1
a126 1
and is equivalent to the following call:
d128 1
a128 1
mbrtowc(NULL, "", 1, ps);
d130 12
a141 5
.It "pwc == NULL"
The conversion from a multibyte character to a wide character has
taken place and the conversion state may be affected, but the resultant
wide character is discarded.
.It "ps == NULL"
d144 12
a155 3
instead of
.Fa ps
mentioned in this manual page.
d159 3
a161 4
never change the internal
state of
.Fn mbrtowc ,
which is initialized at startup time of the program.
a162 1
.\" ----------------------------------------------------------------------
a163 3
In the usual cases,
.Fn mbrtowc
returns:
d166 1
a166 1
The next bytes pointed to by
d168 7
a174 1
form a null character.
d176 3
d180 7
d188 2
a189 1
points to a valid character,
d191 17
a207 1
returns the number of bytes in the character.
d210 1
a210 3
points to the byte sequence which possibly contains part of a valid
multibyte character, but which is incomplete.
When
d212 1
a212 10
is at least
.Dv MB_CUR_MAX
only occurs if the array pointed to by
.Fa s
contains a redundant shift sequence.
.It (size_t)-1
.Fa s
points to an illegal byte sequence which does not form a valid multibyte
character.
In this case,
d216 9
a224 1
to indicate the error.
a225 1
.\" ----------------------------------------------------------------------
d229 1
a229 1
may causes an error in the following case:
d235 1
a235 1
.Fa ps
a237 1
.\" ----------------------------------------------------------------------
a241 1
.\" ----------------------------------------------------------------------
d253 40
@


1.1
log
@major abi changes:

* introduce the mbstate_t typedef.
impacts gnu libiconv, which has already been taken care of.

* Prepare for mb stuff to really exist, replace macro MB_CUR_MAX with
an external variable __mb_cur_max (impacts libX11 and various ports).

* use mbstate in all the mb <-> wchar functions with state.
* add a stub iswctype function allowing some ports to compile.

bash and gdiff are missing wcscoll, and need to be told there's no i18n
until this is fixed.

Discussed and matthieu, otto, millert, kettenis, deraadt.

Major libc bump
@
text
@d1 1
a1 1
.\" $OpenBSD$
d28 1
a28 1
.Dd February 4, 2002
@

