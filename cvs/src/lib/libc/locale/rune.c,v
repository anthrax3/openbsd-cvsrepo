head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.26
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.24
	OPENBSD_5_0:1.2.0.22
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.20
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.18
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.14
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.16
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.12
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.09.05.09.47.03;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	pwnoqOj4YLQyPERN;

1.6
date	2016.02.05.04.10.48;	author jsg;	state Exp;
branches;
next	1.5;
commitid	585eeVTPpXwgvAHE;

1.5
date	2015.12.06.11.54.59;	author tobias;	state Exp;
branches;
next	1.4;
commitid	8lqx69AAFSQWUEcR;

1.4
date	2014.05.25.17.47.04;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.05.23.20.00;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.02.21.38.57;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.07.10.16.23;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Delete some abstraction that we don't and won't need.
Declare functions rather than generating declarations with macros.
Just call functions rather than mainting function pointer tables.
Purge unused arguments.  Simplify mbstate_t casting.
Garbage collect one empty and one unused function.

As a bonus, make mbsinit(3) work at all, it returned garbage
in the past due to a missing cast when passing mbstate_t.
Apart from that, no functional change.

No libc bump needed; only private functions are removed and
change prototype and only private structs change size.

OK stsp@@ mpi@@; deraadt@@ likes the general direction.
@
text
@/*	$OpenBSD: rune.c,v 1.6 2016/02/05 04:10:48 jsg Exp $ */
/*	$NetBSD: rune.c,v 1.26 2004/05/09 11:26:33 kleink Exp $	*/

/*-
 * Copyright (c)1999 Citrus Project,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Paul Borman at Krystal Technologies.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <assert.h>
#include <errno.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wchar.h>
#include "rune.h"
#include "rune_local.h"

#define SAFE_ADD(x, y)			\
do {					\
	if ((x) > SIZE_MAX - (y))	\
		return NULL;		\
	(x) += (y);			\
} while (0);

static int readrange(_RuneLocale *, _RuneRange *, uint32_t, void *, FILE *);
static void _freeentry(_RuneRange *);
static void _wctype_init(_RuneLocale *rl);

static int
readrange(_RuneLocale *rl, _RuneRange *rr, uint32_t nranges, void *lastp,
	FILE *fp)
{
	uint32_t i;
	_RuneEntry *re;
	_FileRuneEntry fre;

	re = (_RuneEntry *)rl->rl_variable;

	rr->rr_nranges = nranges;
	if (rr->rr_nranges == 0) {
		rr->rr_rune_ranges = NULL;
		return 0;
	}

	rr->rr_rune_ranges = re;
	for (i = 0; i < rr->rr_nranges; i++) {
		if ((void *)re >= lastp)
			return -1;

		if (fread(&fre, sizeof(fre), 1, fp) != 1)
			return -1;

		re->re_min = ntohl((uint32_t)fre.fre_min);
		re->re_max = ntohl((uint32_t)fre.fre_max);
		re->re_map = ntohl((uint32_t)fre.fre_map);
		re++;
	}
	rl->rl_variable = re;
	return 0;
}

static int
readentry(_RuneRange *rr, FILE *fp)
{
	_RuneEntry *re;
	size_t l, i, j;
	int error;

	re = rr->rr_rune_ranges;
	for (i = 0; i < rr->rr_nranges; i++) {
		if (re[i].re_map != 0) {
			re[i].re_rune_types = NULL;
			continue;
		}

		if (re[i].re_max < re[i].re_min) {
			error = EINVAL;
			goto fail;
		}

		l = re[i].re_max - re[i].re_min + 1;
		re[i].re_rune_types = calloc(l, sizeof(_RuneType));
		if (!re[i].re_rune_types) {
			error = ENOMEM;
			goto fail;
		}

		if (fread(re[i].re_rune_types, sizeof(_RuneType), l, fp) != l)
			goto fail2;

		for (j = 0; j < l; j++)
			re[i].re_rune_types[j] = ntohl(re[i].re_rune_types[j]);
	}
	return 0;

fail:
	for (j = 0; j < i; j++) {
		free(re[j].re_rune_types);
		re[j].re_rune_types = NULL;
	}
	return error;
fail2:
	for (j = 0; j <= i; j++) {
		free(re[j].re_rune_types);
		re[j].re_rune_types = NULL;
	}
	return errno;
}

/* XXX: temporary implementation */
static int
find_codeset(_RuneLocale *rl)
{
	char *top, *codeset, *tail, *ep;

	if (rl->rl_variable == NULL)
		return 0;

	/* end of rl_variable region */
	ep = (char *)rl->rl_variable;
	ep += rl->rl_variable_len;
	rl->rl_codeset = NULL;
	if (!(top = strstr(rl->rl_variable, _RUNE_CODESET)))
		return 0;
	tail = strpbrk(top, " \t");
	codeset = top + sizeof(_RUNE_CODESET) - 1;
	if (tail) {
		*top = *tail;
		*tail = '\0';
		rl->rl_codeset = strdup(codeset);
		strlcpy(top + 1, tail + 1, (unsigned)(ep - (top + 1)));
	} else {
		*top = '\0';
		rl->rl_codeset = strdup(codeset);
	}
	return (rl->rl_codeset == NULL);
}

void
_freeentry(_RuneRange *rr)
{
	_RuneEntry *re;
	uint32_t i;

	re = rr->rr_rune_ranges;
	for (i = 0; i < rr->rr_nranges; i++) {
		free(re[i].re_rune_types);
		re[i].re_rune_types = NULL;
	}
}

void
_wctype_init(_RuneLocale *rl)
{
	memcpy(&rl->rl_wctype, &_DefaultRuneLocale.rl_wctype,
	       sizeof(rl->rl_wctype));
}


_RuneLocale *
_Read_RuneMagi(FILE *fp)
{
	/* file */
	_FileRuneLocale frl;
	/* host data */
	char *hostdata;
	size_t hostdatalen;
	void *lastp;
	_RuneLocale *rl;
	struct stat sb;
	int x;
	uint32_t runetype_nranges, maplower_nranges, mapupper_nranges, var_len;

	if (fstat(fileno(fp), &sb) < 0)
		return NULL;

	if (sb.st_size < sizeof(_FileRuneLocale))
		return NULL;
	/* XXX more validation? */

	/* Someone might have read the magic number once already */
	rewind(fp);

	if (fread(&frl, sizeof(frl), 1, fp) != 1)
		return NULL;
	if (memcmp(frl.frl_magic, _RUNE_MAGIC_1, sizeof(frl.frl_magic)))
		return NULL;

	runetype_nranges = ntohl(frl.frl_runetype_ext.frr_nranges);
	maplower_nranges = ntohl(frl.frl_maplower_ext.frr_nranges);
	mapupper_nranges = ntohl(frl.frl_mapupper_ext.frr_nranges);
	var_len = ntohl((uint32_t)frl.frl_variable_len);

#if SIZE_MAX <= UINT32_MAX
	if (runetype_nranges > SIZE_MAX / sizeof(_RuneEntry) ||
	    maplower_nranges > SIZE_MAX / sizeof(_RuneEntry) ||
	    mapupper_nranges > SIZE_MAX / sizeof(_RuneEntry))
		return NULL;
#endif

	if (var_len > INT32_MAX)
		return NULL;

	hostdatalen = sizeof(*rl);
	SAFE_ADD(hostdatalen, var_len);
	SAFE_ADD(hostdatalen, runetype_nranges * sizeof(_RuneEntry));
	SAFE_ADD(hostdatalen, maplower_nranges * sizeof(_RuneEntry));
	SAFE_ADD(hostdatalen, mapupper_nranges * sizeof(_RuneEntry));

	if ((hostdata = calloc(hostdatalen, 1)) == NULL)
		return NULL;
	lastp = hostdata + hostdatalen;

	rl = (_RuneLocale *)hostdata;
	rl->rl_variable = rl + 1;

	memcpy(rl->rl_magic, frl.frl_magic, sizeof(rl->rl_magic));
	memcpy(rl->rl_encoding, frl.frl_encoding, sizeof(rl->rl_encoding));

	/* XXX assumes rune_t = uint32_t */
	rl->rl_invalid_rune = ntohl((uint32_t)frl.frl_invalid_rune);
	rl->rl_variable_len = ntohl((uint32_t)frl.frl_variable_len);

	for (x = 0; x < _CACHED_RUNES; ++x) {
		rl->rl_runetype[x] = ntohl(frl.frl_runetype[x]);

		/* XXX assumes rune_t = uint32_t */
		rl->rl_maplower[x] = ntohl((uint32_t)frl.frl_maplower[x]);
		rl->rl_mapupper[x] = ntohl((uint32_t)frl.frl_mapupper[x]);
	}

	if (readrange(rl, &rl->rl_runetype_ext, runetype_nranges, lastp, fp) ||
	    readrange(rl, &rl->rl_maplower_ext, maplower_nranges, lastp, fp) ||
	    readrange(rl, &rl->rl_mapupper_ext, mapupper_nranges, lastp, fp))
		goto err;

	if (readentry(&rl->rl_runetype_ext, fp) != 0)
		goto err;

	if ((uint8_t *)rl->rl_variable + rl->rl_variable_len >
	    (uint8_t *)lastp)
		goto rune_err;

	if (rl->rl_variable_len == 0)
		rl->rl_variable = NULL;
	else if (fread(rl->rl_variable, rl->rl_variable_len, 1, fp) != 1)
		goto rune_err;
	if (find_codeset(rl))
		goto rune_err;
	_wctype_init(rl);

	/*
	 * error if we have junk at the tail, 
	 * or if we can't allocate memory.
	 */
	if (ftello(fp) != sb.st_size || __make_ctype_tabs(rl) == -1)
		goto rune_err;

	return(rl);
rune_err:
	_freeentry(&rl->rl_runetype_ext);
err:
	free(hostdata);
	return NULL;
}
@


1.6
log
@avoid an uninitialised value in a return path added in rev 1.5
ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rune.c,v 1.5 2015/12/06 11:54:59 tobias Exp $ */
a321 13

void
_NukeRune(_RuneLocale *rl)
{

	if (rl != &_DefaultRuneLocale) {
		_freeentry(&rl->rl_runetype_ext);
		free(rl->rl_tabs);
		free(rl->rl_codeset);
		free(rl);
	}
}

@


1.5
log
@Validate input files to prevent out of boundary accesses.

with input by and ok schwarze@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rune.c,v 1.4 2014/05/25 17:47:04 tedu Exp $ */
d132 2
a133 1
		if (re[i].re_max < re[i].re_min)
d135 1
@


1.4
log
@use calloc, from Benjamin Baier
@
text
@d1 1
a1 1
/*	$OpenBSD: rune.c,v 1.3 2012/12/05 23:20:00 deraadt Exp $ */
d62 2
d65 2
d68 1
a69 2
#include <stdlib.h>
#include <errno.h>
a70 2
#include <sys/types.h>
#include <sys/stat.h>
d74 8
a81 1
static int readrange(_RuneLocale *, _RuneRange *, _FileRuneRange *, void *, FILE *);
d86 1
a86 1
readrange(_RuneLocale *rl, _RuneRange *rr, _FileRuneRange *frr, void *lastp,
d95 1
a95 1
	rr->rr_nranges = ntohl(frr->frr_nranges);
d103 3
d109 3
a111 3
		re->re_min = ntohl((u_int32_t)fre.fre_min);
		re->re_max = ntohl((u_int32_t)fre.fre_max);
		re->re_map = ntohl((u_int32_t)fre.fre_map);
a112 3

		if ((void *)re > lastp)
			return -1;
d132 3
d165 1
a165 1
static void
d170 3
d178 1
a178 1
		return;
d190 1
d201 1
a201 2
		if (re[i].re_rune_types)
			free(re[i].re_rune_types);
d226 1
d243 20
a262 4
	hostdatalen = sizeof(*rl) + ntohl((u_int32_t)frl.frl_variable_len) +
	    ntohl(frl.frl_runetype_ext.frr_nranges) * sizeof(_RuneEntry) +
	    ntohl(frl.frl_maplower_ext.frr_nranges) * sizeof(_RuneEntry) +
	    ntohl(frl.frl_mapupper_ext.frr_nranges) * sizeof(_RuneEntry);
d274 3
a276 2
	rl->rl_invalid_rune = ntohl((u_int32_t)frl.frl_invalid_rune);
	rl->rl_variable_len = ntohl((u_int32_t)frl.frl_variable_len);
d281 16
a296 25
		/* XXX assumes rune_t = u_int32_t */
		rl->rl_maplower[x] = ntohl((u_int32_t)frl.frl_maplower[x]);
		rl->rl_mapupper[x] = ntohl((u_int32_t)frl.frl_mapupper[x]);
	}

	if (readrange(rl, &rl->rl_runetype_ext, &frl.frl_runetype_ext, lastp, fp))
	{
		free(hostdata);
		return NULL;
	}
	if (readrange(rl, &rl->rl_maplower_ext, &frl.frl_maplower_ext, lastp, fp))
	{
		free(hostdata);
		return NULL;
	}
	if (readrange(rl, &rl->rl_mapupper_ext, &frl.frl_mapupper_ext, lastp, fp))
	{
		free(hostdata);
		return NULL;
	}

	if (readentry(&rl->rl_runetype_ext, fp) != 0) {
		free(hostdata);
		return NULL;
	}
a297 6
	if ((u_int8_t *)rl->rl_variable + rl->rl_variable_len >
	    (u_int8_t *)lastp) {
		_freeentry(&rl->rl_runetype_ext);
		free(hostdata);
		return NULL;
	}
d300 4
a303 6
	else if (fread(rl->rl_variable, rl->rl_variable_len, 1, fp) != 1) {
		_freeentry(&rl->rl_runetype_ext);
		free(hostdata);
		return NULL;
	}
	find_codeset(rl);
d310 2
a311 5
	if (ftell(fp) != sb.st_size || __make_ctype_tabs(rl) == -1) {
		_freeentry(&rl->rl_runetype_ext);
		free(hostdata);
		return NULL;
	}
d314 5
@


1.3
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: rune.c,v 1.2 2006/04/02 21:38:57 djm Exp $ */
d233 1
a233 1
	if ((hostdata = malloc(hostdatalen)) == NULL)
a234 1
	memset(hostdata, 0, hostdatalen);
@


1.2
log
@malloc(x * y) -> calloc(x, y) from adobriyan AT gmail.com, with tweaks
suggested by kjell@@; ok otto@@ pat@@ millert@@ jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rune.c,v 1.1 2005/08/07 10:16:23 espie Exp $ */
a60 2

#include <sys/cdefs.h>
@


1.1
log
@commit LC_CTYPE files from NetBSD/citrus, not yet linked in.
okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d127 1
a127 1
		re[i].re_rune_types = malloc(l * sizeof(_RuneType));
a131 1
		memset(re[i].re_rune_types, 0, l * sizeof(_RuneType));
@

