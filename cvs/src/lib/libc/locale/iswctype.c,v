head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.4
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.6.0.8
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.24
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.22
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.18
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.20
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.16
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2017.09.05.03.16.13;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	ngpX0SPDX30tzjDf;

1.6
date	2015.09.13.11.38.08;	author guenther;	state Exp;
branches;
next	1.5;
commitid	81YcJcMlfY0FkVFC;

1.5
date	2015.09.12.16.23.14;	author guenther;	state Exp;
branches;
next	1.4;
commitid	crCjb99r4AuxzOpl;

1.4
date	2014.03.16.18.38.30;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.05.23.20.00;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.15.16.11.23;	author stsp;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.07.10.16.23;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@New POSIX xlocale implementation written from scratch.
Complete in the sense that all POSIX *locale(3) and *_l(3) functions
are included, but in OpenBSD, we of course only really care about
LC_CTYPE and we only support ASCII and UTF-8.

With important help from kettenis@@, guenther@@, and jca@@.
Repeated testing in ports bulk builds by naddy@@.
Additional testing by jca@@, sebastia@@, dcoppa@@, and others.
OK kettenis@@ dcoppa@@, and guenther@@ on an earlier version.
Riding guenther@@'s libc/librthread major bump.
@
text
@/*	$OpenBSD: iswctype.c,v 1.6 2015/09/13 11:38:08 guenther Exp $ */
/*	$NetBSD: iswctype.c,v 1.15 2005/02/09 21:35:46 kleink Exp $	*/

/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <wchar.h>
#include <wctype.h>
#include <ctype.h>
#include <errno.h>
#include <string.h>
#include "rune.h"
#include "runetype.h"
#include "rune_local.h"
#include "_wctrans_local.h"

static inline _RuneType __runetype_w(wint_t);
static inline int __isctype_w(wint_t, _RuneType);
static inline wint_t __toupper_w(wint_t);
static inline wint_t __tolower_w(wint_t);

static inline _RuneType
__runetype_w(wint_t c)
{
	_RuneLocale *rl = _CurrentRuneLocale();

	return (_RUNE_ISCACHED(c) ?
		rl->rl_runetype[c] : ___runetype_mb(c, rl));
}

static inline int
__isctype_w(wint_t c, _RuneType f)
{
	return (!!(__runetype_w(c) & f));
}

static inline wint_t
__toupper_w(wint_t c)
{
	return (_towctrans(c, _wctrans_upper(_CurrentRuneLocale())));
}

static inline wint_t
__tolower_w(wint_t c)
{
	return (_towctrans(c, _wctrans_lower(_CurrentRuneLocale())));
}

int
iswalnum(wint_t c)
{
	return (__isctype_w((c), _CTYPE_A|_CTYPE_D));
}

int
iswalpha(wint_t c)
{
	return (__isctype_w((c), _CTYPE_A));
}

int
iswblank(wint_t c)
{
	return (__isctype_w((c), _CTYPE_B));
}

int
iswcntrl(wint_t c)
{
	return (__isctype_w((c), _CTYPE_C));
}

int
iswdigit(wint_t c)
{
	return (__isctype_w((c), _CTYPE_D));
}

int
iswgraph(wint_t c)
{
	return (__isctype_w((c), _CTYPE_G));
}

int
iswlower(wint_t c)
{
	return (__isctype_w((c), _CTYPE_L));
}

int
iswprint(wint_t c)
{
	return (__isctype_w((c), _CTYPE_R));
}

int
iswpunct(wint_t c)
{
	return (__isctype_w((c), _CTYPE_P));
}

int
iswspace(wint_t c)
{
	return (__isctype_w((c), _CTYPE_S));
}
DEF_STRONG(iswspace);

int
iswupper(wint_t c)
{
	return (__isctype_w((c), _CTYPE_U));
}
DEF_STRONG(iswupper);

int
iswxdigit(wint_t c)
{
	return (__isctype_w((c), _CTYPE_X));
}

wint_t
towupper(wint_t c)
{
	return (__toupper_w(c));
}

wint_t
towlower(wint_t c)
{
	return (__tolower_w(c));
}
DEF_STRONG(towlower);

int
wcwidth(wchar_t c)
{
	if (__isctype_w((c), _CTYPE_R))
		return (((unsigned)__runetype_w(c) & _CTYPE_SWM) >> _CTYPE_SWS);
	return -1;
}
DEF_WEAK(wcwidth);

wctrans_t
wctrans(const char *charclass)
{
	int i;
	_RuneLocale *rl = _CurrentRuneLocale();

	if (rl->rl_wctrans[_WCTRANS_INDEX_LOWER].te_name==NULL)
		_wctrans_init(rl);

	for (i=0; i<_WCTRANS_NINDEXES; i++)
		if (!strcmp(rl->rl_wctrans[i].te_name, charclass))
			return ((wctrans_t)&rl->rl_wctrans[i]);

	return ((wctrans_t)NULL);
}

wint_t
towctrans(wint_t c, wctrans_t desc)
{
	if (desc==NULL) {
		errno = EINVAL;
		return (c);
	}
	return (_towctrans(c, (_WCTransEntry *)desc));
}
DEF_STRONG(towctrans);

wctype_t
wctype(const char *property)
{
	int i;
	_RuneLocale *rl = _CurrentRuneLocale();

	for (i=0; i<_WCTYPE_NINDEXES; i++)
		if (!strcmp(rl->rl_wctype[i].te_name, property))
			return ((wctype_t)&rl->rl_wctype[i]);
	return ((wctype_t)NULL);
}

int
iswctype(wint_t c, wctype_t charclass)
{

	/*
	 * SUSv3: If charclass is 0, iswctype() shall return 0.
	 */
	if (charclass == (wctype_t)0) {
		return 0;
	}

	return (__isctype_w(c, ((_WCTypeEntry *)charclass)->te_mask));
}
@


1.6
log
@Wrap <ctype.h> and <wctype.h> so that calls go direct and the symbols not
in standard C are all weak.
Hide several symbols internal to the implementation
@
text
@d1 1
a1 1
/*	$OpenBSD: iswctype.c,v 1.5 2015/09/12 16:23:14 guenther Exp $ */
d56 1
a56 1
	_RuneLocale *rl = _CurrentRuneLocale;
d59 1
a59 1
		rl->rl_runetype[c] : ___runetype_mb(c));
d71 1
a71 1
	return (_towctrans(c, _wctrans_upper(_CurrentRuneLocale)));
d77 1
a77 1
	return (_towctrans(c, _wctrans_lower(_CurrentRuneLocale)));
d180 1
a180 1
	_RuneLocale *rl = _CurrentRuneLocale;
d201 1
d207 1
a207 1
	_RuneLocale *rl = _CurrentRuneLocale;
@


1.5
log
@Wrap <inttypes.h> and finish wrapping of <wchar.h> so that calls go direct
and the symbols not in the C standard are weak
@
text
@d1 1
a1 1
/*	$OpenBSD: iswctype.c,v 1.4 2014/03/16 18:38:30 guenther Exp $ */
d48 4
a51 4
static __inline _RuneType __runetype_w(wint_t);
static __inline int __isctype_w(wint_t, _RuneType);
static __inline wint_t __toupper_w(wint_t);
static __inline wint_t __tolower_w(wint_t);
d53 1
a53 1
static __inline _RuneType
d62 1
a62 1
static __inline int
d68 1
a68 1
static __inline wint_t
d74 1
a74 1
static __inline wint_t
d139 1
d146 1
d165 1
@


1.4
log
@lint is dead (long live the lint!), so stop using it as a cpp conditional
(namespace pollution!) or talking about its opinion on code.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iswctype.c,v 1.3 2012/12/05 23:20:00 deraadt Exp $ */
d171 1
@


1.3
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: iswctype.c,v 1.2 2011/04/15 16:11:23 stsp Exp $ */
a46 4

#ifdef lint
#define __inline
#endif
@


1.2
log
@wcwidth() must return -1 if the character is not printable.
Diff from Alexander Polakov.
OK phessler@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iswctype.c,v 1.1 2005/08/07 10:16:23 espie Exp $ */
a36 2

#include <sys/cdefs.h>
@


1.1
log
@commit LC_CTYPE files from NetBSD/citrus, not yet linked in.
okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d173 3
a175 1
        return (((unsigned)__runetype_w(c) & _CTYPE_SWM) >> _CTYPE_SWS);
@

