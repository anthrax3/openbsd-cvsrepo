head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.6
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.18
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.16
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.14
	OPENBSD_5_0:1.1.0.12
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.10
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.8
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.10.01.02.32.07;	author guenther;	state Exp;
branches;
next	1.3;
commitid	DA03ltgCTpoknko0;

1.3
date	2015.09.12.16.23.14;	author guenther;	state Exp;
branches;
next	1.2;
commitid	crCjb99r4AuxzOpl;

1.2
date	2013.06.02.15.22.20;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.13.18.18.31;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Eliminate the last of the LINTEDn and PRINTFLIKEn comments.  In one
case, by deleting some useless '& of an array' we also eliminate the need
for the casts which prompted the original lint warnings

ok deraadt@@
@
text
@/*	$OpenBSD: _wcstod.h,v 1.3 2015/09/12 16:23:14 guenther Exp $	*/
/* $NetBSD: wcstod.c,v 1.4 2001/10/28 12:08:43 yamt Exp $ */

/*-
 * Copyright (c)1999, 2000, 2001 Citrus Project,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$Citrus: xpg4dl/FreeBSD/lib/libc/locale/wcstod.c,v 1.2 2001/09/27 16:23:57 yamt Exp $
 */

/*
 * function template for wcstof, wcstod and wcstold.
 *
 * parameters:
 *	FUNCNAME : function name
 *      float_type : return type
 *      STRTOD_FUNC : conversion function
 */

float_type
FUNCNAME(const wchar_t *nptr, wchar_t **endptr)
{
	const wchar_t *src;
	size_t size;
	const wchar_t *start;
	const wchar_t *aftersign;

	/*
	 * check length of string and call strtod
	 */
	src = nptr;

	/* skip space first */
	while (iswspace(*src)) {
		src++;
	}

	/* get length of string */
	start = src;
	if (*src && wcschr(L"+-", *src))
		src++;
	aftersign = src;
	if (wcsncasecmp(src, L"inf", 3) == 0) {
		src += 3;
		if (wcsncasecmp(src, L"inity", 5) == 0)
			src += 5;
		goto match;
	}
	if (wcsncasecmp(src, L"nan", 3) == 0) {
		src += 3;
		if (*src == L'(') {
			size = 1;
			while (src[size] != L'\0' && src[size] != L')')
				size++;
			if (src[size] == L')')
				src += size + 1;
		}
		goto match;
	}
	size = wcsspn(src, L"0123456789");
	src += size;
	if (*src == L'.') {/* XXX use localeconv */
		src++;
		size = wcsspn(src, L"0123456789");
		src += size;
	}
	if (*src && wcschr(L"Ee", *src)) {
		src++;
		if (*src && wcschr(L"+-", *src))
			src++;
		size = wcsspn(src, L"0123456789");
		src += size;
	}
match:
	size = src - start;

	/*
	 * convert to a char-string and pass it to strtod.
	 */
	if (src > aftersign) {
		mbstate_t st;
		char *buf;
		char *end;
		const wchar_t *s;
		size_t size_converted;
		float_type result;
		size_t bufsize;

		s = start;
		memset(&st, 0, sizeof(st));
		bufsize = wcsnrtombs(NULL, &s, size, 0, &st);

		buf = malloc(bufsize + 1);
		if (!buf) {
			errno = ENOMEM; /* XXX */
			goto fail;
		}

		s = start;
		memset(&st, 0, sizeof(st));
		size_converted = wcsnrtombs(buf, &s, size, bufsize, &st);
		if (size_converted != bufsize) {
			/* XXX should not happen */
			free(buf);
			errno = EILSEQ;
			goto fail;
		}

		buf[bufsize] = 0;
		result = STRTOD_FUNC(buf, &end);

		if (endptr) {
			const char *s = buf;
			memset(&st, 0, sizeof(st));
			size = mbsnrtowcs(NULL, &s, end - buf, 0, &st);
			*endptr = (wchar_t*)start + size;
		}

		free(buf);

		return result;
	}

fail:
	if (endptr)
		*endptr = (wchar_t*)nptr;

	return 0;
}
DEF_STRONG(FUNCNAME);
@


1.3
log
@Wrap <inttypes.h> and finish wrapping of <wchar.h> so that calls go direct
and the symbols not in the C standard are weak
@
text
@d1 1
a1 1
/*	$OpenBSD: _wcstod.h,v 1.2 2013/06/02 15:22:20 matthew Exp $	*/
a136 2

			/* LINTED bad interface */
a146 1
		/* LINTED bad interface */
@


1.2
log
@Fix wcsto{f,d,ld}() C99 compliance to now correctly

  1. handle "inf", "infinity", "nan", and "nan(whatever)",

  2. reject bare minus and plus signs,

  3. handle multi-byte characters, and

  4. set *endptr = nptr for all failure cases.

Fixes libc++'s test cases for std::sto{f,d,ld}().

ok stsp
@
text
@d1 1
a1 1
/*	$OpenBSD: _wcstod.h,v 1.1 2009/01/13 18:18:31 kettenis Exp $	*/
d154 1
@


1.1
log
@Add wcstof(3) and wcstold(3).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wcstod.c,v 1.2 2008/10/05 19:52:34 kettenis Exp $	*/
d47 1
d63 18
d95 1
a99 4
	 *
	 * since all mb chars used to represent a double-constant
	 * are in the portable character set, we can assume
	 * that they are 1-byte chars.
d101 1
a101 2
	if (size)
	{
d108 7
a114 2
		
		buf = malloc(size + 1);
a115 1
			/* error */
d117 1
a117 1
			return 0;
d119 1
a119 1
			
d122 2
a123 2
		size_converted = wcsrtombs(buf, &s, size, &st);
		if (size != size_converted) {
d127 1
a127 1
			return 0;
d130 1
a130 1
		buf[size] = 0;
d133 4
a136 1
		free(buf);
a137 1
		if (endptr)
d139 4
a142 1
			*endptr = (wchar_t*)start + (end - buf);
d147 1
d150 1
a150 1
		*endptr = (wchar_t*)start;
@

