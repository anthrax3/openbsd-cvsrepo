head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.32
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.28
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.30
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.22
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.26
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.24
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.20
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.18
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.16
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.14
	OPENBSD_5_0:1.3.0.12
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.10
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2009.01.13.18.18.31;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.05.19.52.34;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.01.08.59.27;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Add wcstof(3) and wcstold(3).

ok miod@@
@
text
@/*	$OpenBSD$	*/

#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <wchar.h>
#include <wctype.h>

#define FUNCNAME	wcstod
typedef double		float_type;
#define STRTOD_FUNC	strtod

#include "_wcstod.h"
@


1.2
log
@Fix conversion of numbers without an exponent.

ok martynas@@
@
text
@d1 1
a1 2
/*	$OpenBSD: wcstod.c,v 1.1 2005/07/01 08:59:27 espie Exp $	*/
/* $NetBSD: wcstod.c,v 1.4 2001/10/28 12:08:43 yamt Exp $ */
a2 29
/*-
 * Copyright (c)1999, 2000, 2001 Citrus Project,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$Citrus: xpg4dl/FreeBSD/lib/libc/locale/wcstod.c,v 1.2 2001/09/27 16:23:57 yamt Exp $
 */

#include <sys/cdefs.h>
d9 3
a11 85
double
wcstod(const wchar_t *nptr, wchar_t **endptr)
{
	const wchar_t *src;
	size_t size;
	const wchar_t *start;

	/*
	 * check length of string and call strtod
	 */
	src = nptr;

	/* skip space first */
	while (iswspace(*src)) {
		src++;
	}

	/* get length of string */
	start = src;	
	if (*src && wcschr(L"+-", *src))
		src++;
	size = wcsspn(src, L"0123456789");
	src += size;
	if (*src == L'.') {/* XXX use localeconv */
		src++;
		size = wcsspn(src, L"0123456789");
		src += size;
	}
	if (*src && wcschr(L"Ee", *src)) {
		src++;
		if (*src && wcschr(L"+-", *src))
			src++;
		size = wcsspn(src, L"0123456789");
		src += size;
	}
	size = src - start;

	/*
	 * convert to a char-string and pass it to strtod.
	 *
	 * since all mb chars used to represent a double-constant
	 * are in the portable character set, we can assume
	 * that they are 1-byte chars.
	 */
	if (size)
	{
		mbstate_t st;
		char *buf;
		char *end;
		const wchar_t *s;
		size_t size_converted;
		double result;
		
		buf = malloc(size + 1);
		if (!buf) {
			/* error */
			errno = ENOMEM; /* XXX */
			return 0;
		}
			
		s = start;
		memset(&st, 0, sizeof(st));
		size_converted = wcsrtombs(buf, &s, size, &st);
		if (size != size_converted) {
			/* XXX should not happen */
			free(buf);
			errno = EILSEQ;
			return 0;
		}

		buf[size] = 0;
		result = strtod(buf, &end);

		free(buf);

		if (endptr)
			/* LINTED bad interface */
			*endptr = (wchar_t*)start + (end - buf);

		return result;
	}

	if (endptr)
		/* LINTED bad interface */
		*endptr = (wchar_t*)start;
d13 1
a13 2
	return 0;
}
@


1.1
log
@Add a few missing functions so that wctype.h/wchar.h are more or less
uptodate, namely, wcsto(u)l(l) family, wcstod, stubs from wctrans/towctrans

crank minor.

okay millert@@, jmc@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 1
a58 1
	if (wcschr(L"+-", *src))
d67 1
a67 1
	if (wcschr(L"Ee", *src)) {
d69 1
a69 1
		if (wcschr(L"+-", *src))
@

