head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.20
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.18
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.14
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.12
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.10
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	OPENBSD_5_0:1.10.0.6
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.4
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.18
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.20
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.20
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.18
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.13
date	2015.09.28.14.51.04;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	swLxQABk5vZR2XVK;

1.12
date	2015.09.11.12.42.47;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	R15ZM6KThMwzpozr;

1.11
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	0DYulI8hhujBHMcR;

1.10
date	2010.04.02.17.35.03;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.05.13.02.16;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.03.48.42;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.20.01.35.34;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.02.20.58.37;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.12.14.06.49.46;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.08.19.08.35.07;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.07.01.07.09.09;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.02.08.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.04.24.12.56.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@xdr_ypresp_all_seq() does not need to be exported by libc, we can make it
local static.  (Does not need to be exported by librpcsvc either, since it
is pre-rpcgen and simply %-commented).  A few callers use this via
yp_all() -- that interface remains untouched.
ports trawl by sthen
guenther watched me gnash my teeth in croatia
@
text
@/*	$OpenBSD: yp_all.c,v 1.12 2015/09/11 12:42:47 deraadt Exp $ */
/*
 * Copyright (c) 1992, 1993 Theo de Raadt <deraadt@@theos.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <rpc/rpc.h>
#include <rpc/xdr.h>
#include <rpcsvc/yp.h>
#include <rpcsvc/ypclnt.h>
#include "ypinternal.h"

static int (*ypresp_allfn)(u_long, char *, int, char *, int, void *);
static void *ypresp_data;

static bool_t
_xdr_ypresp_all_seq(XDR *xdrs, u_long *objp)
{
	struct ypresp_all out;
	u_long status;
	char *key, *val;
	int size;
	int done = 0;  /* set to 1 when the user does not want more data */
	bool_t rc = TRUE;  /* FALSE at the end of loop signals failure */

	memset(&out, 0, sizeof out);
	while (rc && !done) {
		rc = FALSE;
		if (!xdr_ypresp_all(xdrs, &out)) {
			*objp = (u_long)YP_YPERR;
			goto fail;
		}
		if (out.more == 0)
			goto fail;
		status = out.ypresp_all_u.val.stat;
		if (status == YP_TRUE) {
			size = out.ypresp_all_u.val.key.keydat_len;
			if ((key = malloc(size + 1)) == NULL) {
				*objp = (u_long)YP_YPERR;
				goto fail;
			}
			(void)memcpy(key, out.ypresp_all_u.val.key.keydat_val,
			    size);
			key[size] = '\0';

			size = out.ypresp_all_u.val.val.valdat_len;
			if ((val = malloc(size + 1)) == NULL) {
				free(key);
				*objp = (u_long)YP_YPERR;
				goto fail;
			}
			(void)memcpy(val, out.ypresp_all_u.val.val.valdat_val,
			    size);
			val[size] = '\0';

			done = (*ypresp_allfn)(status, key,
			    out.ypresp_all_u.val.key.keydat_len, val,
			    out.ypresp_all_u.val.val.valdat_len, ypresp_data);
			free(key);
			free(val);
		} else
			done = 1;
		if (status != YP_NOMORE)
			*objp = status;
		rc = TRUE;
fail:
		xdr_free(xdr_ypresp_all, (char *)&out);
	}
	return rc;
}

int
yp_all(const char *indomain, const char *inmap, struct ypall_callback *incallback)
{
	struct ypreq_nokey yprnk;
	struct dom_binding *ysd;
	struct timeval  tv;
	struct sockaddr_in clnt_sin;
	CLIENT         *clnt;
	u_long		status;
	int             clnt_sock;
	int		r = 0;

	if (indomain == NULL || *indomain == '\0' ||
	    strlen(indomain) > YPMAXDOMAIN || inmap == NULL ||
	    *inmap == '\0' || strlen(inmap) > YPMAXMAP || incallback == NULL)
		return YPERR_BADARGS;

	if (_yp_dobind(indomain, &ysd) != 0)
		return YPERR_DOMAIN;

	tv.tv_sec = _yplib_timeout;
	tv.tv_usec = 0;
	clnt_sock = RPC_ANYSOCK;
	clnt_sin = ysd->dom_server_addr;
	clnt_sin.sin_port = 0;
	clnt = clnttcp_create(&clnt_sin, YPPROG, YPVERS, &clnt_sock, 0, 0);
	if (clnt == NULL) {
		printf("clnttcp_create failed\n");
		r = YPERR_PMAP;
		goto out;
	}
	yprnk.domain = (char *)indomain;
	yprnk.map = (char *)inmap;
	ypresp_allfn = incallback->foreach;
	ypresp_data = (void *) incallback->data;

	(void) clnt_call(clnt, YPPROC_ALL,
	    xdr_ypreq_nokey, &yprnk, _xdr_ypresp_all_seq, &status, tv);
	clnt_destroy(clnt);
	if (status != YP_FALSE)
		r = ypprot_err(status);
out:
	_yp_unbind(ysd);
	return r;
}
@


1.12
log
@Put a private copy of the ypresp_allfn/ypresp_data interface into ypserv
(which uses it in a strange way..) thereby making it possible to static
the interface in libc.
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_all.c,v 1.11 2015/01/16 16:48:51 deraadt Exp $ */
d42 2
a43 2
bool_t
xdr_ypresp_all_seq(XDR *xdrs, u_long *objp)
d135 1
a135 1
	    xdr_ypreq_nokey, &yprnk, xdr_ypresp_all_seq, &status, tv);
@


1.11
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_all.c,v 1.10 2010/04/02 17:35:03 schwarze Exp $ */
d38 3
@


1.10
log
@fix a potential memory leak found by zinovik@@
while here, make sure each error path sets YP_YPERR
and make the function shorter and easier to read
by using the idiom "if (error) goto fail" everywhere in the loop
and by putting xdr_free in exactly one place near the end

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_all.c,v 1.9 2005/08/05 13:02:16 espie Exp $ */
a27 1
#include <sys/param.h>
d32 1
@


1.9
log
@- remove rcsid
- put all the YPMATCHCACHE code into a #ifdef, proper
- remove all extra header files that are not needed

okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d46 2
a47 1
	int r;
d50 2
a51 1
	while (1) {
a52 1
			xdr_free(xdr_ypresp_all, (char *)&out);
d54 1
a54 5
			return FALSE;
		}
		if (out.more == 0) {
			xdr_free(xdr_ypresp_all, (char *)&out);
			return FALSE;
d56 2
d59 1
a59 2
		switch (status) {
		case YP_TRUE:
d61 3
a63 5
			if ((key = malloc(size + 1)) != NULL) {
				(void)memcpy(key,
				    out.ypresp_all_u.val.key.keydat_val,
				    size);
				key[size] = '\0';
d65 4
d70 1
a70 6
			if ((val = malloc(size + 1)) != NULL) {
				(void)memcpy(val,
				    out.ypresp_all_u.val.val.valdat_val,
				    size);
				val[size] = '\0';
			} else {
d72 2
a73 1
				key = NULL;
d75 3
a77 4
			xdr_free(xdr_ypresp_all, (char *)&out);

			if (key == NULL || val == NULL)
				return FALSE;
d79 1
a79 1
			r = (*ypresp_allfn)(status, key,
a81 1
			*objp = status;
d84 3
a86 8
			if (r)
				return TRUE;
			break;
		case YP_NOMORE:
			xdr_free(xdr_ypresp_all, (char *)&out);
			return TRUE;
		default:
			xdr_free(xdr_ypresp_all, (char *)&out);
d88 3
a90 2
			return TRUE;
		}
d92 1
@


1.8
log
@remove terms 3 & 4 on my own software
@
text
@d1 1
a27 4
#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: yp_all.c,v 1.7 2002/07/20 01:35:34 deraadt Exp $";
#endif /* LIBC_SCCS and not lint */

a29 4
#include <sys/socket.h>
#include <sys/file.h>
#include <sys/uio.h>
#include <errno.h>
a32 1
#include <unistd.h>
@


1.7
log
@ansi
@
text
@a12 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Theo de Raadt.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d28 1
a28 1
static char *rcsid = "$OpenBSD: yp_all.c,v 1.6 2002/01/02 20:58:37 deraadt Exp $";
@


1.6
log
@KNF
@
text
@d33 1
a33 1
static char *rcsid = "$OpenBSD: yp_all.c,v 1.5 1996/12/14 06:49:46 tholo Exp $";
d53 1
a53 3
xdr_ypresp_all_seq(xdrs, objp)
XDR *xdrs;
u_long *objp;
d118 1
a118 4
yp_all(indomain, inmap, incallback)
	const char     *indomain;
	const char     *inmap;
	struct ypall_callback *incallback;
@


1.5
log
@Clean up lint and compile warnings
@
text
@d33 1
a33 1
static char *rcsid = "$OpenBSD: yp_all.c,v 1.4 1996/08/19 08:35:07 tholo Exp $";
d64 2
a65 2
	while(1) {
		if( !xdr_ypresp_all(xdrs, &out)) {
d70 1
a70 1
		if(out.more == 0) {
d75 1
a75 1
		switch(status) {
d90 1
a90 2
			}
			else {
d105 1
a105 1
			if(r)
d161 1
a161 1
	if(status != YP_FALSE)
@


1.4
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d33 1
a33 1
static char *rcsid = "$OpenBSD: yp_all.c,v 1.3 1996/07/01 07:09:09 deraadt Exp $";
d67 1
a67 1
			*objp = YP_YPERR;
@


1.3
log
@update rcsid
@
text
@a0 2
/*	$OpenBSD: yp_all.c,v 1.2 1996/05/22 02:08:35 deraadt Exp $	 */

d33 2
a34 2
static char *rcsid = "$OpenBSD$";
#endif
@


1.2
log
@repair return values, more checking
@
text
@d1 1
a1 2
/*	$OpenBSD: yplib.c,v 1.4 1996/03/09 02:43:01 niklas Exp $	 */
/*	$NetBSD: yplib.c,v 1.17 1996/02/04 23:26:26 jtc Exp $	 */
d35 1
a35 1
static char rcsid[] = "$NetBSD: yplib.c,v 1.17 1996/02/04 23:26:26 jtc Exp $";
@


1.1
log
@yp_prot.h lies -> use yp.h (from yp.x) instead, change lots of structure
accesses to match. change xdr_domainname() and some other functions to
take "char **" instead of "char *", as rpcgen intended -- helps programs
linking against rpcgen output of yp.x.  yp_all() should not free it's
return value. split xdryp.c and yplib.c into ~20 files so binaries like
"csh" need not link in functions like yp_maplist(). NIS+'s YP emulation
code lacks YPPROC_ORDER... attempt to deal nicely.
@
text
@d83 2
a84 2
					     out.ypresp_all_u.val.key.keydat_val,
					     size);
d90 2
a91 2
					     out.ypresp_all_u.val.val.valdat_val,
					     size);
d103 3
a105 4
			r = (*ypresp_allfn)(status,
				key, out.ypresp_all_u.val.key.keydat_len,
				val, out.ypresp_all_u.val.val.valdat_len,
				ypresp_data);
d138 5
d163 1
a163 1
		  xdr_ypreq_nokey, &yprnk, xdr_ypresp_all_seq, &status, tv);
@
