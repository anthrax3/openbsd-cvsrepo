head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.22
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.20
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.16
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.12.0.16
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.14
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.12
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.10
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.8
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.18
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.16
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.14
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.12
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.10
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.8
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.6
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.4
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.17
date	2015.09.13.20.57.28;	author guenther;	state Exp;
branches;
next	1.16;
commitid	xpGEzBDorlPKpzSI;

1.16
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	0DYulI8hhujBHMcR;

1.15
date	2009.11.01.00.08.54;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.06.18.28.09;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.05.17.20.31;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.05.13.02.16;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.25.21.51.56;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.03.48.42;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.31.22.28.32;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.20.01.35.35;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.01.20.18.40.27;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.12.03.08.20.06;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.09.15.09.32.01;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.08.19.08.35.12;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.07.01.07.09.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.02.08.38;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.04.24.12.56.31;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Wrap <rpcsvc/ypclnt.h> so that calls go direct and the symbols are all weak
@
text
@/*	$OpenBSD: ypmatch_cache.c,v 1.16 2015/01/16 16:48:51 deraadt Exp $ */
/*
 * Copyright (c) 1992, 1993 Theo de Raadt <deraadt@@theos.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <rpc/rpc.h>
#include <rpc/xdr.h>
#include <rpcsvc/yp.h>
#include <rpcsvc/ypclnt.h>
#include "ypinternal.h"

#ifdef YPMATCHCACHE
static bool_t ypmatch_add(const char *, const char *, u_int, char *, u_int);
static bool_t ypmatch_find(const char *, const char *, u_int, char **, u_int *);

static struct ypmatch_ent {
	struct ypmatch_ent	*next;
	char			*map, *key;
	char			*val;
	int			 keylen, vallen;
	time_t			 expire_t;
} *ypmc;

int _yplib_cache = 5;

static bool_t
ypmatch_add(const char *map, const char *key, u_int keylen, char *val,
    u_int vallen)
{
	struct ypmatch_ent *ep;
	char *newmap = NULL, *newkey = NULL, *newval = NULL;
	time_t t;

	if (keylen == 0 || vallen == 0)
		return (0);

	(void)time(&t);

	/* Allocate all required memory first. */
	if ((newmap = strdup(map)) == NULL ||
	    (newkey = malloc(keylen)) == NULL ||
	    (newval = malloc(vallen)) == NULL) {
		free(newkey);
		free(newmap);
		return 0;
	}

	for (ep = ypmc; ep; ep = ep->next)
		if (ep->expire_t < t)
			break;

	if (ep == NULL) {
		/* No expired node, create a new one. */
		if ((ep = malloc(sizeof *ep)) == NULL) {
			free(newval);
			free(newkey);
			free(newmap);
			return 0;
		}
		ep->next = ypmc;
		ypmc = ep;
	} else {
		/* Reuse the first expired node from the list. */
		free(ep->val);
		free(ep->key);
		free(ep->map);
	}

	/* Now we have all the memory we need, copy the data in. */
	(void)memcpy(newkey, key, keylen);
	(void)memcpy(newval, val, vallen);
	ep->map = newmap;
	ep->key = newkey;
	ep->val = newval;
	ep->keylen = keylen;
	ep->vallen = vallen;
	ep->expire_t = t + _yplib_cache;
	return 1;
}

static bool_t
ypmatch_find(const char *map, const char *key, u_int keylen, char **val,
    u_int *vallen)
{
	struct ypmatch_ent *ep;
	time_t          t;

	if (ypmc == NULL)
		return 0;

	(void) time(&t);

	for (ep = ypmc; ep; ep = ep->next) {
		if (ep->keylen != keylen)
			continue;
		if (strcmp(ep->map, map))
			continue;
		if (memcmp(ep->key, key, keylen))
			continue;
		if (t > ep->expire_t)
			continue;

		*val = ep->val;
		*vallen = ep->vallen;
		return 1;
	}
	return 0;
}
#endif

int
yp_match(const char *indomain, const char *inmap, const char *inkey,
    int inkeylen, char **outval, int *outvallen)
{
	struct dom_binding *ysd;
	struct ypresp_val yprv;
	struct timeval  tv;
	struct ypreq_key yprk;
	int tries = 0, r;

	if (indomain == NULL || *indomain == '\0' ||
	    strlen(indomain) > YPMAXDOMAIN || inmap == NULL ||
	    *inmap == '\0' || strlen(inmap) > YPMAXMAP ||
	    inkey == NULL || inkeylen == 0 || inkeylen >= YPMAXRECORD)
		return YPERR_BADARGS;

	*outval = NULL;
	*outvallen = 0;

again:
	if (_yp_dobind(indomain, &ysd) != 0)
		return YPERR_DOMAIN;

#ifdef YPMATCHCACHE
	if (!strcmp(_yp_domain, indomain) && ypmatch_find(inmap, inkey,
	    inkeylen, &yprv.val.valdat_val, &yprv.val.valdat_len)) {
		*outvallen = yprv.val.valdat_len;
		if ((*outval = malloc(*outvallen + 1)) == NULL) {
			_yp_unbind(ysd);
			return YPERR_RESRC;
		}
		(void)memcpy(*outval, yprv.val.valdat_val, *outvallen);
		(*outval)[*outvallen] = '\0';
		_yp_unbind(ysd);
		return 0;
	}
#endif

	tv.tv_sec = _yplib_timeout;
	tv.tv_usec = 0;

	yprk.domain = (char *)indomain;
	yprk.map = (char *)inmap;
	yprk.key.keydat_val = (char *) inkey;
	yprk.key.keydat_len = inkeylen;

	memset(&yprv, 0, sizeof yprv);

	r = clnt_call(ysd->dom_client, YPPROC_MATCH,
	    xdr_ypreq_key, &yprk, xdr_ypresp_val, &yprv, tv);
	if (r != RPC_SUCCESS) {
		if (tries++)
			clnt_perror(ysd->dom_client, "yp_match: clnt_call");
		ysd->dom_vers = -1;
		goto again;
	}
	if (!(r = ypprot_err(yprv.stat))) {
		*outvallen = yprv.val.valdat_len;
		if ((*outval = malloc(*outvallen + 1)) == NULL) {
			r = YPERR_RESRC;
			goto out;
		}
		(void)memcpy(*outval, yprv.val.valdat_val, *outvallen);
		(*outval)[*outvallen] = '\0';
#ifdef YPMATCHCACHE
		if (strcmp(_yp_domain, indomain) == 0)
			(void)ypmatch_add(inmap, inkey, inkeylen,
			    *outval, *outvallen);
#endif
	}
out:
	xdr_free(xdr_ypresp_val, (char *) &yprv);
	_yp_unbind(ysd);
	return r;
}
DEF_WEAK(yp_match);

int
yp_next(const char *indomain, const char *inmap, const char *inkey,
    int inkeylen, char **outkey, int *outkeylen, char **outval, int *outvallen)
{
	struct ypresp_key_val yprkv;
	struct ypreq_key yprk;
	struct dom_binding *ysd;
	struct timeval  tv;
	int tries = 0, r;

	if (indomain == NULL || *indomain == '\0' ||
	    strlen(indomain) > YPMAXDOMAIN || inmap == NULL ||
	    *inmap == '\0' || strlen(inmap) > YPMAXMAP ||
	    inkeylen == 0 || inkeylen >= YPMAXRECORD)
		return YPERR_BADARGS;

	*outkey = *outval = NULL;
	*outkeylen = *outvallen = 0;

again:
	if (_yp_dobind(indomain, &ysd) != 0)
		return YPERR_DOMAIN;

	tv.tv_sec = _yplib_timeout;
	tv.tv_usec = 0;

	yprk.domain = (char *)indomain;
	yprk.map = (char *)inmap;
	yprk.key.keydat_val = (char *)inkey;
	yprk.key.keydat_len = inkeylen;
	(void)memset(&yprkv, 0, sizeof yprkv);

	r = clnt_call(ysd->dom_client, YPPROC_NEXT,
	    xdr_ypreq_key, &yprk, xdr_ypresp_key_val, &yprkv, tv);
	if (r != RPC_SUCCESS) {
		if (tries++)
			clnt_perror(ysd->dom_client, "yp_next: clnt_call");
		ysd->dom_vers = -1;
		goto again;
	}
	if (!(r = ypprot_err(yprkv.stat))) {
		*outkeylen = yprkv.key.keydat_len;
		*outvallen = yprkv.val.valdat_len;
		if ((*outkey = malloc(*outkeylen + 1)) == NULL ||
		    (*outval = malloc(*outvallen + 1)) == NULL) {
			free(*outkey);
			r = YPERR_RESRC;
		} else {
			(void)memcpy(*outkey, yprkv.key.keydat_val, *outkeylen);
			(*outkey)[*outkeylen] = '\0';
			(void)memcpy(*outval, yprkv.val.valdat_val, *outvallen);
			(*outval)[*outvallen] = '\0';
		}
	}
	xdr_free(xdr_ypresp_key_val, (char *) &yprkv);
	_yp_unbind(ysd);
	return r;
}
DEF_WEAK(yp_next);
@


1.16
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ypmatch_cache.c,v 1.15 2009/11/01 00:08:54 schwarze Exp $ */
d212 1
d272 1
@


1.15
log
@Two minor bug fixes rotting in my tree:
(1) When the second malloc in yp_next fails, do not leak the memory
allocated by the first one.  Same fix as yp_first.c rev. 1.9.
(2) When compiled with YPMATCHCACHE, do not fail the lookup when
reserving memory for the cache fails.  Instead, just return the
correct result without caching it.
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypmatch_cache.c,v 1.14 2009/06/06 18:28:09 schwarze Exp $ */
a27 1
#include <sys/param.h>
d31 1
@


1.14
log
@In case of memory exhaustion, ypmatch_add may both leak memory and leave
invalid data on the list, inviting later NULL pointer access.
noticed by deraadt@@, algorithm proposed by millert, implemented by me;
feedback and ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypmatch_cache.c,v 1.13 2009/06/05 17:20:31 schwarze Exp $ */
d203 2
a204 3
			if (!ypmatch_add(inmap, inkey, inkeylen,
			    *outval, *outvallen))
				r = YPERR_RESRC;
d255 4
a258 1
		if ((*outkey = malloc(*outkeylen + 1)) == NULL)
d260 1
a260 1
		else {
a262 5
		}
		*outvallen = yprkv.val.valdat_len;
		if ((*outval = malloc(*outvallen + 1)) == NULL)
			r = YPERR_RESRC;
		else {
@


1.13
log
@malloc(3) failure should raise YPERR_RESRC, not YPERR_YPERR;
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypmatch_cache.c,v 1.12 2005/08/05 13:02:16 espie Exp $ */
d57 1
d65 9
d77 1
d79 5
a83 1
		if ((ep = malloc(sizeof *ep)) == NULL)
d85 2
a86 3
		(void)memset(ep, 0, sizeof *ep);
		if (ypmc)
			ep->next = ypmc;
d88 2
a89 7
	}

	if (ep->key) {
		free(ep->key);
		ep->key = NULL;
	}
	if (ep->val) {
a90 7
		ep->val = NULL;
	}

	if ((ep->key = malloc(keylen)) == NULL)
		return 0;

	if ((ep->val = malloc(vallen)) == NULL) {
d92 1
a92 2
		ep->key = NULL;
		return 0;
d95 6
a102 15

	(void)memcpy(ep->key, key, ep->keylen);
	(void)memcpy(ep->val, val, ep->vallen);

	if (ep->map) {
		if (strcmp(ep->map, map)) {
			free(ep->map);
			if ((ep->map = strdup(map)) == NULL)
				return 0;
		}
	} else {
		if ((ep->map = strdup(map)) == NULL)
			return 0;
	}

@


1.12
log
@- remove rcsid
- put all the YPMATCHCACHE code into a #ifdef, proper
- remove all extra header files that are not needed

okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d174 1
a174 1
			return YPERR_YPERR;
d204 1
a204 1
			r = YPERR_YPERR;
@


1.11
log
@
Move static funcion and variable declarations from header to the
.c file where they are used.   Gets rid of YPMATCHCACHE define.
Sure deraadt@@
@
text
@d1 1
a27 4
#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: ypmatch_cache.c,v 1.10 2003/06/02 03:48:42 deraadt Exp $";
#endif /* LIBC_SCCS and not lint */

a29 5
#include <sys/socket.h>
#include <sys/file.h>
#include <sys/uio.h>
#include <errno.h>
#include <stdio.h>
a31 1
#include <unistd.h>
d38 1
d143 1
@


1.10
log
@remove terms 3 & 4 on my own software
@
text
@d28 1
a28 1
static char *rcsid = "$OpenBSD: ypmatch_cache.c,v 1.9 2002/07/31 22:28:32 deraadt Exp $";
a44 1
#define YPMATCHCACHE
d46 11
@


1.9
log
@if ypmatch_add sees short keys or values, abort early
@
text
@a12 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Theo de Raadt.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d28 1
a28 1
static char *rcsid = "$OpenBSD: ypmatch_cache.c,v 1.8 2002/07/20 01:35:35 deraadt Exp $";
@


1.8
log
@ansi
@
text
@d33 1
a33 1
static char *rcsid = "$OpenBSD: ypmatch_cache.c,v 1.7 1998/01/20 18:40:27 deraadt Exp $";
d61 3
@


1.7
log
@for yp_match() and yp_next(), do not permit keys longer than YPMAXRECORD
@
text
@d33 1
a33 1
static char *rcsid = "$OpenBSD: ypmatch_cache.c,v 1.6 1996/12/03 08:20:06 deraadt Exp $";
d56 2
a57 6
ypmatch_add(map, key, keylen, val, vallen)
	const char     *map;
	const char     *key;
	u_int           keylen;
	char           *val;
	u_int           vallen;
d116 2
a117 6
ypmatch_find(map, key, keylen, val, vallen)
	const char     *map;
	const char     *key;
	u_int           keylen;
	char          **val;
	u_int          *vallen;
d145 2
a146 7
yp_match(indomain, inmap, inkey, inkeylen, outval, outvallen)
	const char     *indomain;
	const char     *inmap;
	const char     *inkey;
	int             inkeylen;
	char          **outval;
	int            *outvallen;
d154 1
a154 1
	if (indomain == NULL || *indomain == '\0' || 
d222 2
a223 9
yp_next(indomain, inmap, inkey, inkeylen, outkey, outkeylen, outval, outvallen)
	const char     *indomain;
	const char     *inmap;
	const char     *inkey;
	int             inkeylen;
	char          **outkey;
	int            *outkeylen;
	char          **outval;
	int            *outvallen;
@


1.6
log
@never bitch about first failure
@
text
@d33 1
a33 1
static char *rcsid = "$OpenBSD: ypmatch_cache.c,v 1.5 1996/09/15 09:32:01 tholo Exp $";
d170 1
a170 1
	    inkey == NULL || inkeylen == 0)
d253 2
a254 1
	    *inmap == '\0' || strlen(inmap) > YPMAXMAP)
@


1.5
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d33 1
a33 1
static char *rcsid = "$OpenBSD: ypmatch_cache.c,v 1.4 1996/08/19 08:35:12 tholo Exp $";
d165 1
a165 1
	int             r;
d208 2
a209 1
		clnt_perror(ysd->dom_client, "yp_match: clnt_call");
d249 1
a249 1
	int             r;
d275 2
a276 1
		clnt_perror(ysd->dom_client, "yp_next: clnt_call");
@


1.4
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d33 1
a33 1
static char *rcsid = "$OpenBSD: ypmatch_cache.c,v 1.3 1996/07/01 07:09:17 deraadt Exp $";
d50 1
@


1.3
log
@update rcsid
@
text
@a0 2
/*	$OpenBSD: ypmatch_cache.c,v 1.2 1996/05/22 02:08:38 deraadt Exp $	 */

d33 2
a34 2
static char *rcsid = "$OpenBSD$";
#endif
@


1.2
log
@repair return values, more checking
@
text
@d1 1
a1 2
/*	$OpenBSD: yplib.c,v 1.4 1996/03/09 02:43:01 niklas Exp $	 */
/*	$NetBSD: yplib.c,v 1.17 1996/02/04 23:26:26 jtc Exp $	 */
d35 1
a35 1
static char rcsid[] = "$NetBSD: yplib.c,v 1.17 1996/02/04 23:26:26 jtc Exp $";
@


1.1
log
@yp_prot.h lies -> use yp.h (from yp.x) instead, change lots of structure
accesses to match. change xdr_domainname() and some other functions to
take "char **" instead of "char *", as rpcgen intended -- helps programs
linking against rpcgen output of yp.x.  yp_all() should not free it's
return value. split xdryp.c and yplib.c into ~20 files so binaries like
"csh" need not link in functions like yp_maplist(). NIS+'s YP emulation
code lacks YPPROC_ORDER... attempt to deal nicely.
@
text
@d169 6
d184 1
a184 1
			 inkeylen, &yprv.val.valdat_val, &yprv.val.valdat_len)) {
d208 1
a208 1
		      xdr_ypreq_key, &yprk, xdr_ypresp_val, &yprv, tv);
d225 2
a226 2
					 *outval, *outvallen))
				r = RPC_SYSTEMERROR;
d252 5
d274 1
a274 1
		      xdr_ypreq_key, &yprk, xdr_ypresp_key_val, &yprkv, tv);
d283 1
a283 1
			r = RPC_SYSTEMERROR;
d290 1
a290 1
			r = RPC_SYSTEMERROR;
@
