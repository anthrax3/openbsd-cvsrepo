head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2017.02.23.17.04.02;	author eric;	state Exp;
branches;
next	1.12;
commitid	A5SxxxFpG2Lk4uBi;

1.12
date	2015.09.20.14.19.21;	author eric;	state Exp;
branches;
next	1.11;
commitid	QoXCnUzVxYUpwKcZ;

1.11
date	2015.09.14.11.52.49;	author guenther;	state Exp;
branches;
next	1.10;
commitid	KzuByhRo5iAIKcqw;

1.10
date	2015.09.09.15.49.34;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	ZDWhDXAAMFWxMzBj;

1.9
date	2014.03.26.18.13.15;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2014.03.25.19.48.11;	author eric;	state Exp;
branches;
next	1.7;

1.7
date	2013.07.12.14.36.22;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.29.21.20.50;	author eric;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.24.15.12.48;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.19.16.17.40;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.18.11.19.51;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.25.20.28.25;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.14.09.24.18;	author eric;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Put a common subq pointer in the query struct, rather than one in each
element of the union.

ok gilles@@ millert@@ krw@@
@
text
@/*	$OpenBSD: getnameinfo_async.c,v 1.12 2015/09/20 14:19:21 eric Exp $	*/
/*
 * Copyright (c) 2012 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <arpa/nameser.h>
#include <netdb.h>

#include <asr.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "asr_private.h"

static int getnameinfo_async_run(struct asr_query *, struct asr_result *);
static int _servname(struct asr_query *);
static int _numerichost(struct asr_query *);

struct asr_query *
getnameinfo_async(const struct sockaddr *sa, socklen_t slen, char *host,
    size_t hostlen, char *serv, size_t servlen, int flags, void *asr)
{
	struct asr_ctx	 *ac;
	struct asr_query *as;

	ac = _asr_use_resolver(asr);
	if ((as = _asr_async_new(ac, ASR_GETNAMEINFO)) == NULL)
		goto abort; /* errno set */
	as->as_run = getnameinfo_async_run;

	if (sa->sa_family == AF_INET)
		memmove(&as->as.ni.sa.sa, sa, sizeof (as->as.ni.sa.sain));
	else if (sa->sa_family == AF_INET6)
		memmove(&as->as.ni.sa.sa, sa, sizeof (as->as.ni.sa.sain6));

	as->as.ni.sa.sa.sa_len = slen;
	as->as.ni.hostname = host;
	as->as.ni.hostnamelen = hostlen;
	as->as.ni.servname = serv;
	as->as.ni.servnamelen = servlen;
	as->as.ni.flags = flags;

	_asr_ctx_unref(ac);
	return (as);

    abort:
	if (as)
		_asr_async_free(as);
	_asr_ctx_unref(ac);
	return (NULL);
}
DEF_WEAK(getnameinfo_async);

static int
getnameinfo_async_run(struct asr_query *as, struct asr_result *ar)
{
	void		*addr;
	socklen_t	 addrlen;
	int		 r;

    next:
	switch (as->as_state) {

	case ASR_STATE_INIT:

		/* Make sure the parameters are all valid. */

		if (as->as.ni.sa.sa.sa_family != AF_INET &&
		    as->as.ni.sa.sa.sa_family != AF_INET6) {
			ar->ar_gai_errno = EAI_FAMILY;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		if ((as->as.ni.sa.sa.sa_family == AF_INET &&
		    (as->as.ni.sa.sa.sa_len != sizeof (as->as.ni.sa.sain))) ||
		    (as->as.ni.sa.sa.sa_family == AF_INET6 &&
		    (as->as.ni.sa.sa.sa_len != sizeof (as->as.ni.sa.sain6)))) {
			ar->ar_gai_errno = EAI_FAIL;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		/* Set the service name first, if needed. */
		if (_servname(as) == -1) {
			ar->ar_gai_errno = EAI_OVERFLOW;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		if (as->as.ni.hostname == NULL || as->as.ni.hostnamelen == 0) {
			ar->ar_gai_errno = 0;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		if (as->as.ni.flags & NI_NUMERICHOST) {
			if (_numerichost(as) == -1) {
				if (errno == ENOMEM)
					ar->ar_gai_errno = EAI_MEMORY;
				else if (errno == ENOSPC)
					ar->ar_gai_errno = EAI_OVERFLOW;
				else {
					ar->ar_errno = errno;
					ar->ar_gai_errno = EAI_SYSTEM;
				}
			} else
				ar->ar_gai_errno = 0;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		if (as->as.ni.sa.sa.sa_family == AF_INET) {
			addrlen = sizeof(as->as.ni.sa.sain.sin_addr);
			addr = &as->as.ni.sa.sain.sin_addr;
		} else {
			addrlen = sizeof(as->as.ni.sa.sain6.sin6_addr);
			addr = &as->as.ni.sa.sain6.sin6_addr;
		}

		/*
		 * Create a subquery to lookup the address.
		 */
		as->as_subq = _gethostbyaddr_async_ctx(addr, addrlen,
		    as->as.ni.sa.sa.sa_family,
		    as->as_ctx);
		if (as->as_subq == NULL) {
			ar->ar_gai_errno = EAI_MEMORY;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		async_set_state(as, ASR_STATE_SUBQUERY);
		break;

	case ASR_STATE_SUBQUERY:

		if ((r = asr_run(as->as_subq, ar)) == ASYNC_COND)
			return (ASYNC_COND);

		/*
		 * Request done.
		 */
		as->as_subq = NULL;

		if (ar->ar_hostent == NULL) {
			if (as->as.ni.flags & NI_NAMEREQD) {
				ar->ar_gai_errno = EAI_NONAME;
			} else if (_numerichost(as) == -1) {
				if (errno == ENOMEM)
					ar->ar_gai_errno = EAI_MEMORY;
				else if (errno == ENOSPC)
					ar->ar_gai_errno = EAI_OVERFLOW;
				else {
					ar->ar_errno = errno;
					ar->ar_gai_errno = EAI_SYSTEM;
				}
			} else
				ar->ar_gai_errno = 0;
		} else {
			if (strlcpy(as->as.ni.hostname,
			    ar->ar_hostent->h_name,
			    as->as.ni.hostnamelen) >= as->as.ni.hostnamelen)
				ar->ar_gai_errno = EAI_OVERFLOW;
			else
				ar->ar_gai_errno = 0;
			free(ar->ar_hostent);
		}

		async_set_state(as, ASR_STATE_HALT);
		break;

	case ASR_STATE_HALT:
		return (ASYNC_DONE);

	default:
		ar->ar_errno = EOPNOTSUPP;
		ar->ar_gai_errno = EAI_SYSTEM;
		async_set_state(as, ASR_STATE_HALT);
		break;
	}
	goto next;
}


/*
 * Set the service name on the result buffer is not NULL.
 * return (-1) if the buffer is too small.
 */
static int
_servname(struct asr_query *as)
{
	struct servent		 s;
	struct servent_data	 sd;
	int			 port, r;
	char			*buf = as->as.ni.servname;
	size_t			 buflen = as->as.ni.servnamelen;

	if (as->as.ni.servname == NULL || as->as.ni.servnamelen == 0)
		return (0);

	if (as->as.ni.sa.sa.sa_family == AF_INET)
		port = as->as.ni.sa.sain.sin_port;
	else
		port = as->as.ni.sa.sain6.sin6_port;

	if (!(as->as.ni.flags & NI_NUMERICSERV)) {
		memset(&sd, 0, sizeof (sd));
		if (getservbyport_r(port,
		    (as->as.ni.flags & NI_DGRAM) ? "udp" : "tcp",
		    &s, &sd) != -1) {
			r = strlcpy(buf, s.s_name, buflen) >= buflen;
			endservent_r(&sd);
			return (r ? -1 : 0);
		}
	}

	r = snprintf(buf, buflen, "%u", ntohs(port));
	if (r == -1 || r >= (int)buflen)
		return (-1);

	return (0);
}

/*
 * Write the numeric address
 */
static int
_numerichost(struct asr_query *as)
{
	unsigned int	ifidx;
	char		scope[IF_NAMESIZE + 1], *ifname;
	void		*addr;
	char		*buf = as->as.ni.hostname;
	size_t		 buflen = as->as.ni.hostnamelen;

	if (as->as.ni.sa.sa.sa_family == AF_INET)
		addr = &as->as.ni.sa.sain.sin_addr;
	else
		addr = &as->as.ni.sa.sain6.sin6_addr;

	if (inet_ntop(as->as.ni.sa.sa.sa_family, addr, buf, buflen) == NULL)
		return (-1); /* errno set */

	if (as->as.ni.sa.sa.sa_family == AF_INET6 &&
	    as->as.ni.sa.sain6.sin6_scope_id) {

		scope[0] = SCOPE_DELIMITER;
		scope[1] = '\0';

		ifidx = as->as.ni.sa.sain6.sin6_scope_id;
		ifname = NULL;

		if (IN6_IS_ADDR_LINKLOCAL(&as->as.ni.sa.sain6.sin6_addr) ||
		    IN6_IS_ADDR_MC_LINKLOCAL(&as->as.ni.sa.sain6.sin6_addr) ||
		    IN6_IS_ADDR_MC_INTFACELOCAL(&as->as.ni.sa.sain6.sin6_addr))
			ifname = if_indextoname(ifidx, scope + 1);

		if (ifname == NULL)
			snprintf(scope + 1, sizeof(scope) - 1, "%u", ifidx);

		strlcat(buf, scope, buflen);
	}

	return (0);
}
@


1.12
log
@remove bogus includes of err.h
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.11 2015/09/14 11:52:49 guenther Exp $	*/
d143 1
a143 1
		as->as.ni.subq = _gethostbyaddr_async_ctx(addr, addrlen,
d146 1
a146 1
		if (as->as.ni.subq == NULL) {
d157 1
a157 1
		if ((r = asr_run(as->as.ni.subq, ar)) == ASYNC_COND)
d163 1
a163 1
		as->as.ni.subq = NULL;
@


1.11
log
@Wrap <asr.h> so internal calls go direct and all the symbols are weak
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.10 2015/09/09 15:49:34 deraadt Exp $	*/
a26 1
#include <err.h>
@


1.10
log
@Hide all unnecessary asr / resolver related API with _ prefixes.
direction & ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.9 2014/03/26 18:13:15 eric Exp $	*/
d72 1
@


1.9
log
@Make the asr API public.  Install asr.h to /usr/include.h and manpages.
Include tweaks suggested by mpi@@

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.8 2014/03/25 19:48:11 eric Exp $	*/
d46 2
a47 2
	ac = asr_use_resolver(asr);
	if ((as = asr_async_new(ac, ASR_GETNAMEINFO)) == NULL)
d63 1
a63 1
	asr_ctx_unref(ac);
d68 2
a69 2
		asr_async_free(as);
	asr_ctx_unref(ac);
d143 1
a143 1
		as->as.ni.subq = gethostbyaddr_async_ctx(addr, addrlen,
@


1.8
log
@Cleanup and simplify the API to be exposed.  Use better names for
structures, functions and defines.

discussed with and ok deraadt@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.7 2013/07/12 14:36:22 eric Exp $	*/
d24 1
d26 1
a32 1
#include "asr.h"
@


1.7
log
@Make some symbols static and prefix all visible symbols with asr_
to prevent collisions with third-party programs.

suggested by sthen@@, ok theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.6 2013/03/29 21:20:50 eric Exp $	*/
d34 3
a36 3
static int getnameinfo_async_run(struct async *, struct async_res *);
static int _servname(struct async *);
static int _numerichost(struct async *);
d38 1
a38 1
struct async *
d40 1
a40 1
    size_t hostlen, char *serv, size_t servlen, int flags, struct asr *asr)
d42 2
a43 2
	struct asr_ctx	*ac;
	struct async	*as;
d73 1
a73 1
getnameinfo_async_run(struct async *as, struct async_res *ar)
d156 1
a156 1
		if ((r = asr_async_run(as->as.ni.subq, ar)) == ASYNC_COND)
d209 1
a209 1
_servname(struct async *as)
d247 1
a247 1
_numerichost(struct async *as)
@


1.6
log
@correctly show the scope for IPv6 addresses in getnameinfo()
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.5 2012/11/24 15:12:48 eric Exp $	*/
d46 1
a46 1
	if ((as = async_new(ac, ASR_GETNAMEINFO)) == NULL)
d67 1
a67 1
		async_free(as);
d156 1
a156 1
		if ((r = async_run(as->as.ni.subq, ar)) == ASYNC_COND)
@


1.5
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.4 2012/08/19 16:17:40 eric Exp $	*/
d20 1
d249 5
a253 3
	void	*addr;
	char	*buf = as->as.ni.hostname;
	size_t	 buflen = as->as.ni.hostnamelen;
d262 20
@


1.4
log
@When building dynamic hostent and netent, allocate a single linear buffer to
hold both the structure and the data. The freehostent() and freenetent() API
functions are not needed anymore.  While there, ensure that the constructed
addr and alias lists are really NULL terminated.
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.3 2012/08/18 11:19:51 eric Exp $	*/
d17 1
d79 1
a79 1
	switch(as->as_state) {
d197 1
a197 1
                break;
d256 1
a256 1
	
d258 1
a258 2
		/* errno set */
		return (-1);
@


1.3
log
@Improve error reporting in getnameinfo_async() and getaddrinfo_async().
They do not have to deal with h_errno at all.  Also, errno is only kept
for EAI_SYSTEM.  Small code cleanup while there.

Adapt getnameinfo() and getaddrinfo() wrappers to correctly save errno
and overwrite it in the EAI_SYSTEM case.

General errno handling issue reported by mikeb@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.2 2012/04/25 20:28:25 eric Exp $	*/
d183 1
a183 1
			freehostent(ar->ar_hostent);
@


1.2
log
@fix a few warnings
@
text
@d1 1
a1 1
/*	$OpenBSD: getnameinfo_async.c,v 1.1 2012/04/14 09:24:18 eric Exp $	*/
d115 1
a115 2
				ar->ar_errno = errno;
				if (ar->ar_errno == ENOMEM)
d117 1
a117 1
				else if (ar->ar_errno == ENOSPC)
d119 2
a120 1
				else
d122 1
a143 1
			ar->ar_errno = errno;
d166 1
a166 2
				ar->ar_errno = errno;
				if (ar->ar_errno == ENOMEM)
d168 1
a168 1
				else if (ar->ar_errno == ENOSPC)
d170 2
a171 1
				else
d173 1
a193 1
		ar->ar_h_errno = NETDB_INTERNAL;
@


1.1
log
@Import asr, an experimental async resolver implementation.
The idea is to eventually replace the existing resolver with
something better. Time to start working on it in tree.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asr.c,v 1.10 2011/07/13 16:14:43 eric Exp $	*/
d235 1
a235 1
	if (r == -1 || r >= buflen)
@

