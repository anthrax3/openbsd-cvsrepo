head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.6
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.10.05.02.57.16;	author guenther;	state Exp;
branches;
next	1.8;
commitid	hN3BtB3F33HLhHuv;

1.8
date	2014.03.26.18.13.15;	author eric;	state Exp;
branches;
next	1.7;

1.7
date	2014.03.25.19.48.11;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.12.06.09.50;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2013.07.12.14.36.22;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2013.05.27.17.31.01;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.04.30.12.02.39;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2013.04.08.20.03.15;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.08.11.08.21;	author eric;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Wrap <resolv.h> so that internal calls go direct

ok millert@@
@
text
@/*	$OpenBSD: res_query.c,v 1.8 2014/03/26 18:13:15 eric Exp $	*/
/*
 * Copyright (c) 2012 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

#include <asr.h>
#include <errno.h>
#include <resolv.h>
#include <string.h>
#include <stdlib.h>

int
res_query(const char *name, int class, int type, u_char *ans, int anslen)
{
	struct asr_query *as;
	struct asr_result ar;
	size_t		 len;

	res_init();

	if (ans == NULL || anslen <= 0) {
		h_errno = NO_RECOVERY;
		errno = EINVAL;
		return (-1);
	}

	as = res_query_async(name, class, type, NULL);
	if (as == NULL) {
		if (errno == EINVAL)
			h_errno = NO_RECOVERY;
		else
			h_errno = NETDB_INTERNAL;
		return (-1); /* errno set */
	}

	asr_run_sync(as, &ar);

	if (ar.ar_errno)
		errno = ar.ar_errno;
	h_errno = ar.ar_h_errno;

	if (ar.ar_h_errno != NETDB_SUCCESS)
		return (-1);

	len = anslen;
	if (ar.ar_datalen < len)
		len = ar.ar_datalen;
	memmove(ans, ar.ar_data, len);
	free(ar.ar_data);

	return (ar.ar_datalen);
}
DEF_WEAK(res_query);

int
res_search(const char *name, int class, int type, u_char *ans, int anslen)
{
	struct asr_query *as;
	struct asr_result ar;
	size_t		 len;

	res_init();

	if (ans == NULL || anslen <= 0) {
		h_errno = NO_RECOVERY;
		errno = EINVAL;
		return (-1);
	}

	as = res_search_async(name, class, type, NULL);
	if (as == NULL) {
		if (errno == EINVAL)
			h_errno = NO_RECOVERY;
		else
			h_errno = NETDB_INTERNAL;
		return (-1); /* errno set */
	}

	asr_run_sync(as, &ar);

	if (ar.ar_errno)
		errno = ar.ar_errno;
	h_errno = ar.ar_h_errno;

	if (ar.ar_h_errno != NETDB_SUCCESS)
		return (-1);

	len = anslen;
	if (ar.ar_datalen < len)
		len = ar.ar_datalen;
	memmove(ans, ar.ar_data, len);
	free(ar.ar_data);

	return (ar.ar_datalen);
}
@


1.8
log
@Make the asr API public.  Install asr.h to /usr/include.h and manpages.
Include tweaks suggested by mpi@@

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_query.c,v 1.7 2014/03/25 19:48:11 eric Exp $	*/
d70 1
@


1.7
log
@Cleanup and simplify the API to be exposed.  Use better names for
structures, functions and defines.

discussed with and ok deraadt@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_query.c,v 1.6 2013/11/12 06:09:50 deraadt Exp $	*/
d19 1
d21 1
d23 1
a27 2

#include "asr.h"
@


1.6
log
@pull in missing includes (math.h, unistd.h, stdlib.h) needed for
prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: res_query.c,v 1.5 2013/07/12 14:36:22 eric Exp $	*/
d31 2
a32 2
	struct async	*as;
	struct async_res ar;
d52 1
a52 1
	asr_async_run_sync(as, &ar);
d73 2
a74 2
	struct async	*as;
	struct async_res ar;
d94 1
a94 1
	asr_async_run_sync(as, &ar);
@


1.5
log
@Make some symbols static and prefix all visible symbols with asr_
to prevent collisions with third-party programs.

suggested by sthen@@, ok theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_query.c,v 1.4 2013/05/27 17:31:01 eric Exp $	*/
d24 1
@


1.4
log
@Add minimal support for _res setup and update.

Change res_init() to initialize the _res structure on first call, and
udpate the global async context if changes were made by the user. All
resolver functions now call res_init() internally.

fixes issue spotted by otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_query.c,v 1.3 2013/04/30 12:02:39 eric Exp $	*/
d51 1
a51 1
	async_run_sync(as, &ar);
d93 1
a93 1
	async_run_sync(as, &ar);
@


1.3
log
@Do not take external buffers for storing DNS responses in the internal
async API.  That is actually useless and it makes the code more
complicated.  The required buffers are always allocated when needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: res_query.c,v 1.2 2013/04/08 20:03:15 eric Exp $	*/
d34 2
d75 2
@


1.2
log
@Do not fail if the user buffer is too short to hold the packet: fill it up
to the given size and return the packet length.

issue spotted by weerd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_query.c,v 1.1 2012/09/08 11:08:21 eric Exp $	*/
d40 1
a40 1
	as = res_query_async(name, class, type, NULL, 0, NULL);
d80 1
a80 1
	as = res_search_async(name, class, type, NULL, 0, NULL);
@


1.1
log
@split asr_resolver.c into different files to overlay the libc/net
resolver implementation.
@
text
@d1 1
a1 1
/*	$OpenBSD: asr_resolver.c,v 1.10 2012/08/19 17:59:15 eric Exp $	*/
d32 1
d40 1
a40 1
	as = res_query_async(name, class, type, ans, anslen, NULL);
d58 6
d72 1
d80 1
a80 1
	as = res_search_async(name, class, type, ans, anslen, NULL);
d97 6
@

