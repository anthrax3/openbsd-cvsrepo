head	1.21;
access;
symbols
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.11.0.2
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2017.02.27.10.44.46;	author jca;	state Exp;
branches;
next	1.20;
commitid	MlNq0zVlbx0f2ABQ;

1.20
date	2017.02.23.17.04.02;	author eric;	state Exp;
branches;
next	1.19;
commitid	A5SxxxFpG2Lk4uBi;

1.19
date	2015.12.16.16.32.30;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	oPoFLo6QaSW21nLc;

1.18
date	2015.09.20.14.19.21;	author eric;	state Exp;
branches;
next	1.17;
commitid	QoXCnUzVxYUpwKcZ;

1.17
date	2015.09.14.11.52.49;	author guenther;	state Exp;
branches;
next	1.16;
commitid	KzuByhRo5iAIKcqw;

1.16
date	2015.09.09.15.49.34;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	ZDWhDXAAMFWxMzBj;

1.15
date	2015.05.25.19.30.25;	author eric;	state Exp;
branches;
next	1.14;
commitid	mgohVjAkJ8FHohVc;

1.14
date	2014.07.23.21.26.25;	author eric;	state Exp;
branches;
next	1.13;
commitid	WIq5DvzhMZ99bkXf;

1.13
date	2014.03.26.18.13.15;	author eric;	state Exp;
branches;
next	1.12;

1.12
date	2014.03.25.19.48.11;	author eric;	state Exp;
branches;
next	1.11;

1.11
date	2014.02.24.20.23.27;	author eric;	state Exp;
branches;
next	1.10;

1.10
date	2013.07.12.14.36.22;	author eric;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.01.15.02.01;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.01.14.34.34;	author eric;	state Exp;
branches;
next	1.7;

1.7
date	2013.04.30.12.02.39;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.04.01.20.22.27;	author eric;	state Exp;
branches;
next	1.5;

1.5
date	2013.04.01.15.49.54;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.27.07.40.41;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.24.15.12.48;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.09.09.42.06;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.14.09.24.18;	author eric;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Put a common flags field in the query struct, rather than in some
elements of the union.

This field is for internal asr flags.  The flags in "struct rrset" and
"struct ni" are different kinds of flags.

ok eric@@
@
text
@/*	$OpenBSD: res_search_async.c,v 1.20 2017/02/23 17:04:02 eric Exp $	*/
/*
 * Copyright (c) 2012 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>
#include <arpa/nameser.h>
#include <netdb.h>

#include <asr.h>
#include <errno.h>
#include <resolv.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "asr_private.h"

static int res_search_async_run(struct asr_query *, struct asr_result *);
static size_t domcat(const char *, const char *, char *, size_t);

/*
 * Unlike res_query_async(), this function returns a valid packet only if
 * h_errno is NETDB_SUCCESS.
 */
struct asr_query *
res_search_async(const char *name, int class, int type, void *asr)
{
	struct asr_ctx	 *ac;
	struct asr_query *as;

	DPRINT("asr: res_search_async(\"%s\", %i, %i)\n", name, class, type);

	ac = _asr_use_resolver(asr);
	as = _res_search_async_ctx(name, class, type, ac);
	_asr_ctx_unref(ac);

	return (as);
}
DEF_WEAK(res_search_async);

struct asr_query *
_res_search_async_ctx(const char *name, int class, int type, struct asr_ctx *ac)
{
	struct asr_query	*as;

	DPRINT("asr: res_search_async_ctx(\"%s\", %i, %i)\n", name, class,
	    type);

	if ((as = _asr_async_new(ac, ASR_SEARCH)) == NULL)
		goto err; /* errno set */
	as->as_run  = res_search_async_run;
	if ((as->as.search.name = strdup(name)) == NULL)
		goto err; /* errno set */

	as->as.search.class = class;
	as->as.search.type = type;

	return (as);
    err:
	if (as)
		_asr_async_free(as);
	return (NULL);
}

#define HERRNO_UNSET	-2

static int
res_search_async_run(struct asr_query *as, struct asr_result *ar)
{
	int	r;
	char	fqdn[MAXDNAME];

    next:
	switch (as->as_state) {

	case ASR_STATE_INIT:

		if (as->as.search.name[0] == '\0') {
			ar->ar_h_errno = NO_DATA;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		as->as.search.saved_h_errno = HERRNO_UNSET;
		async_set_state(as, ASR_STATE_NEXT_DOMAIN);
		break;

	case ASR_STATE_NEXT_DOMAIN:
		/*
		 * Reset flags to be able to identify the case in
		 * STATE_SUBQUERY.
		 */
		as->as_dom_flags = 0;

		r = _asr_iter_domain(as, as->as.search.name, fqdn, sizeof(fqdn));
		if (r == -1) {
			async_set_state(as, ASR_STATE_NOT_FOUND);
			break;
		}
		if (r == 0) {
			ar->ar_errno = EINVAL;
			ar->ar_h_errno = NO_RECOVERY;
			ar->ar_datalen = -1;
			ar->ar_data = NULL;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}
		as->as_subq = _res_query_async_ctx(fqdn,
		    as->as.search.class, as->as.search.type, as->as_ctx);
		if (as->as_subq == NULL) {
			ar->ar_errno = errno;
			if (errno == EINVAL)
				ar->ar_h_errno = NO_RECOVERY;
			else
				ar->ar_h_errno = NETDB_INTERNAL;
			ar->ar_datalen = -1;
			ar->ar_data = NULL;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}
		async_set_state(as, ASR_STATE_SUBQUERY);
		break;

	case ASR_STATE_SUBQUERY:

		if ((r = asr_run(as->as_subq, ar)) == ASYNC_COND)
			return (ASYNC_COND);
		as->as_subq = NULL;

		if (ar->ar_h_errno == NETDB_SUCCESS) {
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		/*
		 * The original res_search() does this in the domain search
		 * loop, but only for ECONNREFUSED. I think we can do better
		 * because technically if we get an errno, it means
		 * we couldn't reach any nameserver, so there is no point
		 * in trying further.
		 */
		if (ar->ar_errno) {
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		free(ar->ar_data);

		/*
		 * The original resolver does something like this.
		 */
		if (as->as_dom_flags & ASYNC_DOM_NDOTS)
			as->as.search.saved_h_errno = ar->ar_h_errno;

		if (as->as_dom_flags & ASYNC_DOM_DOMAIN) {
			if (ar->ar_h_errno == NO_DATA)
				as->as_flags |= ASYNC_NODATA;
			else if (ar->ar_h_errno == TRY_AGAIN)
				as->as_flags |= ASYNC_AGAIN;
		}

		async_set_state(as, ASR_STATE_NEXT_DOMAIN);
		break;

	case ASR_STATE_NOT_FOUND:

		if (as->as.search.saved_h_errno != HERRNO_UNSET)
			ar->ar_h_errno = as->as.search.saved_h_errno;
		else if (as->as_flags & ASYNC_NODATA)
			ar->ar_h_errno = NO_DATA;
		else if (as->as_flags & ASYNC_AGAIN)
			ar->ar_h_errno = TRY_AGAIN;
		/*
		 * Else, we got the ar_h_errno value set by res_query_async()
		 * for the last domain.
		 */
		ar->ar_datalen = -1;
		ar->ar_data = NULL;
		async_set_state(as, ASR_STATE_HALT);
		break;

	case ASR_STATE_HALT:

		return (ASYNC_DONE);

	default:
		ar->ar_errno = EOPNOTSUPP;
		ar->ar_h_errno = NETDB_INTERNAL;
		async_set_state(as, ASR_STATE_HALT);
		break;
	}
	goto next;
}

/*
 * Concatenate a name and a domain name. The result has no trailing dot.
 * Return the resulting string length, or 0 in case of error.
 */
static size_t
domcat(const char *name, const char *domain, char *buf, size_t buflen)
{
	size_t	r;

	r = _asr_make_fqdn(name, domain, buf, buflen);
	if (r == 0)
		return (0);
	buf[r - 1] = '\0';

	return (r - 1);
}

enum {
	DOM_INIT,
	DOM_DOMAIN,
	DOM_DONE
};

/*
 * Implement the search domain strategy.
 *
 * This function works as a generator that constructs complete domains in
 * buffer "buf" of size "len" for the given host name "name", according to the
 * search rules defined by the resolving context.  It is supposed to be called
 * multiple times (with the same name) to generate the next possible domain
 * name, if any.
 *
 * It returns -1 if all possibilities have been exhausted, 0 if there was an
 * error generating the next name, or the resulting name length.
 */
int
_asr_iter_domain(struct asr_query *as, const char *name, char * buf, size_t len)
{
	const char	*c;
	int		 dots;

	switch (as->as_dom_step) {

	case DOM_INIT:
		/* First call */

		/*
		 * If "name" is an FQDN, that's the only result and we
		 * don't try anything else.
		 */
		if (strlen(name) && name[strlen(name) - 1] ==  '.') {
			DPRINT("asr: iter_domain(\"%s\") fqdn\n", name);
			as->as_dom_flags |= ASYNC_DOM_FQDN;
			as->as_dom_step = DOM_DONE;
			return (domcat(name, NULL, buf, len));
		}

		/*
		 * Otherwise, we iterate through the specified search domains.
		 */
		as->as_dom_step = DOM_DOMAIN;
		as->as_dom_idx = 0;

		/*
		 * If "name" as enough dots, use it as-is first, as indicated
		 * in resolv.conf(5).
		 */
		dots = 0;
		for (c = name; *c; c++)
			dots += (*c == '.');
		if (dots >= as->as_ctx->ac_ndots) {
			DPRINT("asr: iter_domain(\"%s\") ndots\n", name);
			as->as_dom_flags |= ASYNC_DOM_NDOTS;
			if (strlcpy(buf, name, len) >= len)
				return (0);
			return (strlen(buf));
		}
		/* Otherwise, starts using the search domains */
		/* FALLTHROUGH */

	case DOM_DOMAIN:
		if (as->as_dom_idx < as->as_ctx->ac_domcount &&
		    (as->as_ctx->ac_options & RES_DNSRCH || (
			as->as_ctx->ac_options & RES_DEFNAMES &&
			as->as_dom_idx == 0 &&
			strchr(name, '.') == NULL))) {
			DPRINT("asr: iter_domain(\"%s\") domain \"%s\"\n",
			    name, as->as_ctx->ac_dom[as->as_dom_idx]);
			as->as_dom_flags |= ASYNC_DOM_DOMAIN;
			return (domcat(name,
			    as->as_ctx->ac_dom[as->as_dom_idx++], buf, len));
		}

		/* No more domain to try. */

		as->as_dom_step = DOM_DONE;

		/*
		 * If the name was not tried as an absolute name before,
		 * do it now.
		 */
		if (!(as->as_dom_flags & ASYNC_DOM_NDOTS)) {
			DPRINT("asr: iter_domain(\"%s\") as is\n", name);
			as->as_dom_flags |= ASYNC_DOM_ASIS;
			if (strlcpy(buf, name, len) >= len)
				return (0);
			return (strlen(buf));
		}
		/* Otherwise, we are done. */

	case DOM_DONE:
	default:
		DPRINT("asr: iter_domain(\"%s\") done\n", name);
		return (-1);
	}
}
@


1.20
log
@Put a common subq pointer in the query struct, rather than one in each
element of the union.

ok gilles@@ millert@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.19 2015/12/16 16:32:30 deraadt Exp $	*/
d172 1
a172 1
				as->as.search.flags |= ASYNC_NODATA;
d174 1
a174 1
				as->as.search.flags |= ASYNC_AGAIN;
d184 1
a184 1
		else if (as->as.search.flags & ASYNC_NODATA)
d186 1
a186 1
		else if (as->as.search.flags & ASYNC_AGAIN)
@


1.19
log
@Remove support for HOSTALIASES from the resolver.  This "open and parse
any file indicated by an environment variable" feature inside the
resolver is incompatible with what pledge "dns" is trying to be.  It is
a misguided "feature" added way back in history which almost noone uses,
but everyone has to assume the risk from.
ok eric florian kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.18 2015/09/20 14:19:21 eric Exp $	*/
d123 1
a123 1
		as->as.search.subq = _res_query_async_ctx(fqdn,
d125 1
a125 1
		if (as->as.search.subq == NULL) {
d141 1
a141 1
		if ((r = asr_run(as->as.search.subq, ar)) == ASYNC_COND)
d143 1
a143 1
		as->as.search.subq = NULL;
@


1.18
log
@remove bogus includes of err.h
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.17 2015/09/14 11:52:49 guenther Exp $	*/
a59 1
	char			 alias[MAXDNAME];
a62 3

	if (_asr_hostalias(ac, name, alias, sizeof(alias)))
		return _res_query_async_ctx(alias, class, type, ac);
@


1.17
log
@Wrap <asr.h> so internal calls go direct and all the symbols are weak
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.16 2015/09/09 15:49:34 deraadt Exp $	*/
a24 1
#include <err.h>
@


1.16
log
@Hide all unnecessary asr / resolver related API with _ prefixes.
direction & ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.15 2015/05/25 19:30:25 eric Exp $	*/
d55 1
@


1.15
log
@Skip search domains iteration if RES_DNSRCH and/or RES_DEFNAMES is unset.

prodded by Brad
ok jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.14 2014/07/23 21:26:25 eric Exp $	*/
a35 1
static int iter_domain(struct asr_query *, const char *, char *, size_t);
d49 3
a51 3
	ac = asr_use_resolver(asr);
	as = res_search_async_ctx(name, class, type, ac);
	asr_ctx_unref(ac);
d57 1
a57 1
res_search_async_ctx(const char *name, int class, int type, struct asr_ctx *ac)
d65 2
a66 2
	if (asr_hostalias(ac, name, alias, sizeof(alias)))
		return res_query_async_ctx(alias, class, type, ac);
d68 1
a68 1
	if ((as = asr_async_new(ac, ASR_SEARCH)) == NULL)
d80 1
a80 1
		asr_async_free(as);
d114 1
a114 1
		r = iter_domain(as, as->as.search.name, fqdn, sizeof(fqdn));
d127 1
a127 1
		as->as.search.subq = res_query_async_ctx(fqdn,
d223 1
a223 1
	r = asr_make_fqdn(name, domain, buf, buflen);
d250 1
a250 1
iter_domain(struct asr_query *as, const char *name, char * buf, size_t len)
@


1.14
log
@Make queries using the search list for hostname lookups fail with
NO_DATA/EAI_NODATA when the hostname param is an empty string.
So far, they were using the entries in the search list with no
additional component, which is not really expected.

reported by jsing@@ and a few others

ok deraadt@@, "makes sense" jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.13 2014/03/26 18:13:15 eric Exp $	*/
d27 1
d296 5
a300 1
		if (as->as_dom_idx < as->as_ctx->ac_domcount) {
@


1.13
log
@Make the asr API public.  Install asr.h to /usr/include.h and manpages.
Include tweaks suggested by mpi@@

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.12 2014/03/25 19:48:11 eric Exp $	*/
d96 6
@


1.12
log
@Cleanup and simplify the API to be exposed.  Use better names for
structures, functions and defines.

discussed with and ok deraadt@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.11 2014/02/24 20:23:27 eric Exp $	*/
d19 1
d22 1
d24 1
a30 1
#include "asr.h"
@


1.11
log
@make res_search() report NO_DATA instead of HOST_NOT_FOUND in some cases.
issue reported by matthieu@@

ok matthieu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.10 2013/07/12 14:36:22 eric Exp $	*/
d31 1
a31 1
static int res_search_async_run(struct async *, struct async_res *);
d33 1
a33 1
static int iter_domain(struct async *, const char *, char *, size_t);
d39 2
a40 2
struct async *
res_search_async(const char *name, int class, int type, struct asr *asr)
d42 2
a43 2
	struct asr_ctx	*ac;
	struct async	*as;
d54 1
a54 1
struct async *
d57 2
a58 2
	struct async	*as;
	char		 alias[MAXDNAME];
d85 1
a85 1
res_search_async_run(struct async *as, struct async_res *ar)
d137 1
a137 1
		if ((r = asr_async_run(as->as.search.subq, ar)) == ASYNC_COND)
d242 1
a242 1
iter_domain(struct async *as, const char *name, char * buf, size_t len)
@


1.10
log
@Make some symbols static and prefix all visible symbols with asr_
to prevent collisions with third-party programs.

suggested by sthen@@, ok theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.9 2013/06/01 15:02:01 eric Exp $	*/
d163 1
a163 1
		if (as->as_dom_flags & (ASYNC_DOM_NDOTS | ASYNC_DOM_ASIS))
@


1.9
log
@Move search domain iteration code in res_search_async.c where it belongs.
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.8 2013/06/01 14:34:34 eric Exp $	*/
d32 2
a33 2
size_t asr_domcat(const char *, const char *, char *, size_t);
int asr_iter_domain(struct async *, const char *, char *, size_t);
d66 1
a66 1
	if ((as = async_new(ac, ASR_SEARCH)) == NULL)
d78 1
a78 1
		async_free(as);
d106 1
a106 1
		r = asr_iter_domain(as, as->as.search.name, fqdn, sizeof(fqdn));
d137 1
a137 1
		if ((r = async_run(as->as.search.subq, ar)) == ASYNC_COND)
d210 2
a211 2
size_t
asr_domcat(const char *name, const char *domain, char *buf, size_t buflen)
d242 1
a242 1
asr_iter_domain(struct async *as, const char *name, char * buf, size_t len)
d257 1
a257 1
			DPRINT("asr: asr_iter_domain(\"%s\") fqdn\n", name);
d260 1
a260 1
			return (asr_domcat(name, NULL, buf, len));
d277 1
a277 1
			DPRINT("asr: asr_iter_domain(\"%s\") ndots\n", name);
d288 1
a288 1
			DPRINT("asr: asr_iter_domain(\"%s\") domain \"%s\"\n",
d291 1
a291 1
			return (asr_domcat(name,
d304 1
a304 1
			DPRINT("asr: asr_iter_domain(\"%s\") as is\n", name);
d314 1
a314 1
		DPRINT("asr: asr_iter_domain(\"%s\") done\n", name);
@


1.8
log
@Make hostaliases work for gethostbyname() and getaddrinfo() when
looking into /etc/hosts.  Remove the alias check from the search
domain iteration. Instead, take a shortcut to res_query_async_ctx() in
res_search_async_ctx().
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.7 2013/04/30 12:02:39 eric Exp $	*/
d32 2
d204 113
@


1.7
log
@Do not take external buffers for storing DNS responses in the internal
async API.  That is actually useless and it makes the code more
complicated.  The required buffers are always allocated when needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.6 2013/04/01 20:22:27 eric Exp $	*/
d56 1
d60 3
@


1.6
log
@properly check for domain name truncation at various places and fail
if that happens.

prodded by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.5 2013/04/01 15:49:54 deraadt Exp $	*/
a27 7
/*
 * TODO:
 *
 * - make it possible to reuse ibuf if it was NULL when first called,
 *   to avoid reallocating buffers everytime.
 */

d38 1
a38 2
res_search_async(const char *name, int class, int type, unsigned char *ans,
	int anslen, struct asr *asr)
d46 1
a46 1
	as = res_search_async_ctx(name, class, type, ans, anslen, ac);
d53 1
a53 2
res_search_async_ctx(const char *name, int class, int type, unsigned char *ans,
	int anslen, struct asr_ctx *ac)
a65 10
	if (ans) {
		as->as.search.flags |= ASYNC_EXTIBUF;
		as->as.search.ibuf = ans;
		as->as.search.ibufsize = anslen;
	} else {
		as->as.search.ibuf = NULL;
		as->as.search.ibufsize = 0;
	}
	as->as.search.ibuflen = 0;

d114 1
a114 2
		    as->as.search.class, as->as.search.type,
		    as->as.search.ibuf, as->as.search.ibufsize, as->as_ctx);
d152 1
a152 6
		/*
		 * If we don't use an external buffer, the packet was allocated
		 * by the subquery and it must be freed now.
		 */
		if ((as->as.search.flags & ASYNC_EXTIBUF) == 0)
			free(ar->ar_data);
@


1.5
log
@space cleanup; ok eric
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.4 2013/03/27 07:40:41 eric Exp $	*/
d124 1
a124 1
		if (r > sizeof(fqdn)) {
@


1.4
log
@Only use the search domains for DNS lookups, as the current resolver does.
Better not diverge too much in behavior at this point.
Typo fix and doc update while there.
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.3 2012/11/24 15:12:48 eric Exp $	*/
d28 1
a28 1
/* 
d203 1
a203 1
		/* 
@


1.3
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.2 2012/09/09 09:42:06 eric Exp $	*/
d180 1
a180 1
		 * The original resolver does something like this, to 
@


1.2
log
@use proper macros for debug traces.
@
text
@d1 1
a1 1
/*	$OpenBSD: res_search_async.c,v 1.1 2012/04/14 09:24:18 eric Exp $	*/
d20 1
a21 2
#include <arpa/nameser.h>
        
d66 2
a67 1
	DPRINT("asr: res_search_async_ctx(\"%s\", %i, %i)\n", name, class, type);
d104 1
a104 1
	switch(as->as_state) {
d113 4
a116 2

		/* Reset flags to be able to identify the case in STATE_SUBQUERY. */
d133 1
a133 1
		    as->as.search.class, as->as.search.type, 
d220 1
a220 1
                break;
@


1.1
log
@Import asr, an experimental async resolver implementation.
The idea is to eventually replace the existing resolver with
something better. Time to start working on it in tree.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asr.c,v 1.10 2011/07/13 16:14:43 eric Exp $	*/
d51 3
a53 3
#ifdef DEBUG
	asr_printf("asr: res_search_async(\"%s\", %i, %i)\n", name, class, type);
#endif
d67 1
a67 4
#ifdef DEBUG
	asr_printf("asr: res_search_async_ctx(\"%s\", %i, %i)\n",
	    name, class, type);
#endif
@

