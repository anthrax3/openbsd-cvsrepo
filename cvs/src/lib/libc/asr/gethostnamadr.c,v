head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2015.09.14.07.38.37;	author guenther;	state Exp;
branches;
next	1.12;
commitid	sc13azJRI5HI5bbC;

1.12
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	0DYulI8hhujBHMcR;

1.11
date	2014.03.26.18.13.15;	author eric;	state Exp;
branches;
next	1.10;

1.10
date	2014.03.25.19.48.11;	author eric;	state Exp;
branches;
next	1.9;

1.9
date	2013.07.12.14.36.21;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.29.06.43.49;	author eric;	state Exp;
branches;
next	1.7;

1.7
date	2013.05.27.17.31.01;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.04.14.22.23.08;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2013.04.04.17.49.33;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2013.04.01.15.49.54;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2013.04.01.07.47.26;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.24.15.12.48;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.08.11.08.21;	author eric;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Finish wrapping <netdb.h> so that calls go direct and the symbols are all weak
@
text
@/*	$OpenBSD: gethostnamadr.c,v 1.12 2015/01/16 16:48:51 deraadt Exp $	*/
/*
 * Copyright (c) 2012,2013 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>	/* ALIGN */
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

#include <asr.h>
#include <errno.h>
#include <resolv.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

static int _gethostbyname(const char *, int, struct hostent *, char *, size_t,
    int *);
static int _fillhostent(const struct hostent *, struct hostent *, char *,
    size_t);

static struct hostent	 _hostent;
static char		 _entbuf[4096];

static char *_empty[] = { NULL, };

static int
_fillhostent(const struct hostent *h, struct hostent *r, char *buf, size_t len)
{
	char	**ptr, *end, *pos;
	size_t	n, i;
	int	naliases, naddrs;

	bzero(buf, len);
	bzero(r, sizeof(*r));
	r->h_aliases = _empty;
	r->h_addr_list = _empty;

	end = buf + len;
	ptr = (char **)ALIGN(buf);

	if ((char *)ptr >= end)
		return (ERANGE);

	for (naliases = 0; h->h_aliases[naliases]; naliases++)
		;
	for (naddrs = 0; h->h_addr_list[naddrs]; naddrs++)
		;

	pos = (char *)(ptr + (naliases + 1) + (naddrs + 1));
	if (pos >= end)
		return (ERANGE);

	r->h_name = NULL;
	r->h_addrtype = h->h_addrtype;
	r->h_length = h->h_length;
	r->h_aliases = ptr;
	r->h_addr_list = ptr + naliases + 1;

	n = strlcpy(pos, h->h_name, end - pos);
	if (n >= end - pos)
		return (ERANGE);
	r->h_name = pos;
	pos += n + 1;

	for (i = 0; i < naliases; i++) {
		n = strlcpy(pos, h->h_aliases[i], end - pos);
		if (n >= end - pos)
			return (ERANGE);
		r->h_aliases[i] = pos;
		pos += n + 1;
	}

	pos = (char *)ALIGN(pos);
	if (pos >= end)
		return (ERANGE);

	for (i = 0; i < naddrs; i++) {
		if (r->h_length > end - pos)
			return (ERANGE);
		memmove(pos, h->h_addr_list[i], r->h_length);
		r->h_addr_list[i] = pos;
		pos += r->h_length;
	}

	return (0);
}

static int
_gethostbyname(const char *name, int af, struct hostent *ret, char *buf,
    size_t buflen, int *h_errnop)
{
	struct asr_query *as;
	struct asr_result ar;
	int r;

	if (af == -1)
		as = gethostbyname_async(name, NULL);
	else
		as = gethostbyname2_async(name, af, NULL);

	if (as == NULL)
		return (errno);

	asr_run_sync(as, &ar);

	errno = ar.ar_errno;
	*h_errnop = ar.ar_h_errno;
	if (ar.ar_hostent == NULL)
		return (0);

	r = _fillhostent(ar.ar_hostent, ret, buf, buflen);
	free(ar.ar_hostent);

	return (r);
}

struct hostent *
gethostbyname(const char *name)
{
	struct hostent	*h;

	res_init();

	if (_res.options & RES_USE_INET6 &&
	    (h = gethostbyname2(name, AF_INET6)))
		return (h);

	return gethostbyname2(name, AF_INET);
}
DEF_WEAK(gethostbyname);

struct hostent *
gethostbyname2(const char *name, int af)
{
	int	r;

	res_init();

	r = _gethostbyname(name, af, &_hostent, _entbuf, sizeof(_entbuf),
	    &h_errno);
	if (r) {
		h_errno = NETDB_INTERNAL;
		errno = r;
	}

	if (h_errno)
		return (NULL);

	return (&_hostent);
}
DEF_WEAK(gethostbyname2);

struct hostent *
gethostbyaddr(const void *addr, socklen_t len, int af)
{
	struct asr_query *as;
	struct asr_result ar;
	int r;

	res_init();

	as = gethostbyaddr_async(addr, len, af, NULL);
	if (as == NULL) {
		h_errno = NETDB_INTERNAL;
		return (NULL);
	}

	asr_run_sync(as, &ar);

	errno = ar.ar_errno;
	h_errno = ar.ar_h_errno;
	if (ar.ar_hostent == NULL)
		return (NULL);

	r = _fillhostent(ar.ar_hostent, &_hostent, _entbuf, sizeof(_entbuf));
	free(ar.ar_hostent);

	if (r) {
		h_errno = NETDB_INTERNAL;
		errno = r;
		return (NULL);
	}

	return (&_hostent);
}
@


1.12
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.11 2014/03/26 18:13:15 eric Exp $	*/
d145 1
d166 1
@


1.11
log
@Make the asr API public.  Install asr.h to /usr/include.h and manpages.
Include tweaks suggested by mpi@@

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.10 2014/03/25 19:48:11 eric Exp $	*/
d18 1
@


1.10
log
@Cleanup and simplify the API to be exposed.  Use better names for
structures, functions and defines.

discussed with and ok deraadt@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.9 2013/07/12 14:36:21 eric Exp $	*/
d19 1
d21 1
d23 1
a28 2

#include "asr.h"
@


1.9
log
@Make some symbols static and prefix all visible symbols with asr_
to prevent collisions with third-party programs.

suggested by sthen@@, ok theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.8 2013/05/29 06:43:49 eric Exp $	*/
d105 3
a107 3
	struct async		*as;
	struct async_res	 ar;
	int			 r;
d117 1
a117 1
	asr_async_run_sync(as, &ar);
d167 3
a169 3
	struct async	*as;
	struct async_res ar;
	int		 r;
d179 1
a179 1
	asr_async_run_sync(as, &ar);
@


1.8
log
@use paramaters instead of static storage in _gethostbyname()
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.7 2013/05/27 17:31:01 eric Exp $	*/
d117 1
a117 1
	async_run_sync(as, &ar);
d179 1
a179 1
	async_run_sync(as, &ar);
@


1.7
log
@Add minimal support for _res setup and update.

Change res_init() to initialize the _res structure on first call, and
udpate the global async context if changes were made by the user. All
resolver functions now call res_init() internally.

fixes issue spotted by otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.6 2013/04/14 22:23:08 deraadt Exp $	*/
d3 1
a3 1
 * Copyright (c) 2012 Eric Faurot <eric@@openbsd.org>
d29 3
a31 2
static struct hostent *_gethostbyname(const char *, int);
static void _fillhostent(const struct hostent *, struct hostent *, char *buf,
d39 1
a39 1
static void
d55 1
a55 1
		return;
d64 1
a64 1
		return;
d74 1
a74 1
		return;
d81 1
a81 1
			return;
d88 1
a88 1
		return;
d92 1
a92 1
			return;
d97 2
d101 3
a103 2
static struct hostent *
_gethostbyname(const char *name, int af)
d107 1
d114 2
a115 4
	if (as == NULL) {
		h_errno = NETDB_INTERNAL;
		return (NULL);
	}
d120 1
a120 1
	h_errno = ar.ar_h_errno;
d122 1
a122 1
		return (NULL);
d124 1
a124 1
	_fillhostent(ar.ar_hostent, &_hostent, _entbuf, sizeof(_entbuf));
d127 1
a127 1
	return (&_hostent);
d138 2
a139 2
	    (h = _gethostbyname(name, AF_INET6)))
			return (h);
d141 1
a141 1
	return _gethostbyname(name, AF_INET);
d147 2
d151 11
a161 1
	return _gethostbyname(name, af);
d169 1
d186 1
a186 1
	_fillhostent(ar.ar_hostent, &_hostent, _entbuf, sizeof(_entbuf));
d188 6
@


1.6
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.5 2013/04/04 17:49:33 eric Exp $	*/
d130 9
a138 1
	return _gethostbyname(name, -1);
d144 2
d154 2
@


1.5
log
@use the provided ALIGN() macro instead of re-inventing a square wheel.

prodded by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.4 2013/04/01 15:49:54 deraadt Exp $	*/
d85 1
a85 1
	pos = (char*)ALIGN(pos);
@


1.4
log
@space cleanup; ok eric
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.3 2013/04/01 07:47:26 eric Exp $	*/
a28 4
#define PALIGN(p, l) \
	((char *)(p) + (((uintptr_t)(p) % (l)) ? \
                (l) - (uintptr_t)(p) % (l) : 0))

d51 1
a51 1
	ptr = (char **)PALIGN(buf, sizeof(char *));
d85 1
a85 1
	pos = PALIGN(pos, r->h_length);
@


1.3
log
@fix alignment issue in the structure filled by gethostby{name,addr}()

spotted by naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.2 2012/11/24 15:12:48 eric Exp $	*/
d30 1
a30 1
	((char*)(p) + (((uintptr_t)(p) % (l)) ? \
d55 1
a55 1
	ptr = (char**)PALIGN(buf, sizeof(char*));
d57 1
a57 1
	if ((char*)ptr >= end)
d65 1
a65 1
	pos = (char*)(ptr + (naliases + 1) + (naddrs + 1));
@


1.2
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: gethostnamadr.c,v 1.1 2012/09/08 11:08:21 eric Exp $	*/
d23 1
d29 4
d49 5
d55 4
a58 1
	ptr = (char**)buf; /* XXX align */
d65 4
a74 8
	pos = (char*)(ptr + (naliases + 1) + (naddrs + 1));
	if (pos > end) {
		r->h_aliases = _empty;
		r->h_addr_list = _empty;
		return;
	}
	bzero(ptr, pos - (char*)ptr);

d88 4
@


1.1
log
@split asr_resolver.c into different files to overlay the libc/net
resolver implementation.
@
text
@d1 1
a1 1
/*	$OpenBSD: asr_resolver.c,v 1.10 2012/08/19 17:59:15 eric Exp $	*/
d72 1
a72 1
	for(i = 0; i < naliases; i++) {
d80 1
a80 1
	for(i = 0; i < naddrs; i++) {
@

