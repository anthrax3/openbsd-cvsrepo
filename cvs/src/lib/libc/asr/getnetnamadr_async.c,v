head	1.25;
access;
symbols
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.11.0.2
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.25
date	2017.02.23.17.04.02;	author eric;	state Exp;
branches;
next	1.24;
commitid	A5SxxxFpG2Lk4uBi;

1.24
date	2017.02.21.22.32.28;	author eric;	state Exp;
branches;
next	1.23;
commitid	abM8yTeGRIos5TNQ;

1.23
date	2015.09.20.14.19.21;	author eric;	state Exp;
branches;
next	1.22;
commitid	QoXCnUzVxYUpwKcZ;

1.22
date	2015.09.14.11.52.49;	author guenther;	state Exp;
branches;
next	1.21;
commitid	KzuByhRo5iAIKcqw;

1.21
date	2015.09.09.15.49.34;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	ZDWhDXAAMFWxMzBj;

1.20
date	2015.05.29.08.49.37;	author eric;	state Exp;
branches;
next	1.19;
commitid	Tf6Q1D724C96QEJe;

1.19
date	2014.11.02.13.59.16;	author eric;	state Exp;
branches;
next	1.18;
commitid	F8FfJ1XxPFjXnH17;

1.18
date	2014.09.15.06.15.48;	author guenther;	state Exp;
branches;
next	1.17;
commitid	ztgYHm1nk3mtTyS3;

1.17
date	2014.09.15.06.03.39;	author guenther;	state Exp;
branches;
next	1.16;
commitid	woqSFWYB98fBB25I;

1.16
date	2014.07.23.21.26.25;	author eric;	state Exp;
branches
	1.16.4.1;
next	1.15;
commitid	WIq5DvzhMZ99bkXf;

1.15
date	2014.05.13.11.57.35;	author eric;	state Exp;
branches;
next	1.14;

1.14
date	2014.03.26.18.13.15;	author eric;	state Exp;
branches;
next	1.13;

1.13
date	2014.03.25.19.48.11;	author eric;	state Exp;
branches;
next	1.12;

1.12
date	2014.03.14.11.07.33;	author eric;	state Exp;
branches;
next	1.11;

1.11
date	2014.02.26.20.00.08;	author eric;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2013.07.12.14.36.22;	author eric;	state Exp;
branches;
next	1.9;

1.9
date	2013.04.30.12.02.39;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2013.04.01.15.49.54;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2012.11.24.18.58.49;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2012.11.24.15.12.48;	author eric;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.24.13.59.53;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.07.13.21.34;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.19.16.17.40;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.10.17.30.38;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.14.09.24.18;	author eric;	state Exp;
branches;
next	;

1.11.2.1
date	2014.11.17.16.56.36;	author tedu;	state Exp;
branches;
next	;
commitid	fzNMQ4OWu9Jh6KoD;

1.16.4.1
date	2014.11.17.16.56.01;	author tedu;	state Exp;
branches;
next	;
commitid	3OamWCftt9o7tziz;


desc
@@


1.25
log
@Put a common subq pointer in the query struct, rather than one in each
element of the union.

ok gilles@@ millert@@ krw@@
@
text
@/*	$OpenBSD: getnetnamadr_async.c,v 1.24 2017/02/21 22:32:28 eric Exp $	*/
/*
 * Copyright (c) 2012 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <arpa/nameser.h>
#include <netdb.h>

#include <asr.h>
#include <errno.h>
#include <resolv.h> /* for res_hnok */
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "asr_private.h"

#define MAXALIASES	16

struct netent_ext {
	struct netent	 n;
	char		*aliases[MAXALIASES + 1];
	char		*end;
	char		*pos;
};

static int getnetnamadr_async_run(struct asr_query *, struct asr_result *);
static struct netent_ext *netent_alloc(int);
static int netent_set_cname(struct netent_ext *, const char *, int);
static int netent_add_alias(struct netent_ext *, const char *, int);
static struct netent_ext *netent_file_match(FILE *, int, const char *);
static struct netent_ext *netent_from_packet(int, char *, size_t);

struct asr_query *
getnetbyname_async(const char *name, void *asr)
{
	struct asr_ctx	 *ac;
	struct asr_query *as;

	/* The current resolver segfaults. */
	if (name == NULL) {
		errno = EINVAL;
		return (NULL);
	}

	ac = _asr_use_resolver(asr);
	if ((as = _asr_async_new(ac, ASR_GETNETBYNAME)) == NULL)
		goto abort; /* errno set */
	as->as_run = getnetnamadr_async_run;

	as->as.netnamadr.family = AF_INET;
	as->as.netnamadr.name = strdup(name);
	if (as->as.netnamadr.name == NULL)
		goto abort; /* errno set */

	_asr_ctx_unref(ac);
	return (as);

    abort:
	if (as)
		_asr_async_free(as);
	_asr_ctx_unref(ac);
	return (NULL);
}
DEF_WEAK(getnetbyname_async);

struct asr_query *
getnetbyaddr_async(in_addr_t net, int family, void *asr)
{
	struct asr_ctx	 *ac;
	struct asr_query *as;

	ac = _asr_use_resolver(asr);
	if ((as = _asr_async_new(ac, ASR_GETNETBYADDR)) == NULL)
		goto abort; /* errno set */
	as->as_run = getnetnamadr_async_run;

	as->as.netnamadr.family = family;
	as->as.netnamadr.addr = net;

	_asr_ctx_unref(ac);
	return (as);

    abort:
	if (as)
		_asr_async_free(as);
	_asr_ctx_unref(ac);
	return (NULL);
}
DEF_WEAK(getnetbyaddr_async);

static int
getnetnamadr_async_run(struct asr_query *as, struct asr_result *ar)
{
	struct netent_ext	*n;
	int			 r, type, saved_errno;
	FILE			*f;
	char			 dname[MAXDNAME], *name, *data;
	in_addr_t		 in;

    next:
	switch (as->as_state) {

	case ASR_STATE_INIT:

		if (as->as.netnamadr.family != AF_INET) {
			ar->ar_h_errno = NETDB_INTERNAL;
			ar->ar_errno = EAFNOSUPPORT;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		if (as->as_type == ASR_GETNETBYNAME &&
		    as->as.netnamadr.name[0] == '\0') {
			ar->ar_h_errno = NO_DATA;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		async_set_state(as, ASR_STATE_NEXT_DB);
		break;

	case ASR_STATE_NEXT_DB:

		if (_asr_iter_db(as) == -1) {
			async_set_state(as, ASR_STATE_NOT_FOUND);
			break;
		}

		switch (AS_DB(as)) {
		case ASR_DB_DNS:

			if (as->as_type == ASR_GETNETBYNAME) {
				type = T_A;
				/*
				 * I think we want to do the former, but our
				 * resolver is doing the following, so let's
				 * preserve bugward-compatibility there.
				 */
				type = T_PTR;
				name = as->as.netnamadr.name;
				as->as_subq = _res_search_async_ctx(
				    name, C_IN, type, as->as_ctx);
			} else {
				type = T_PTR;
				name = dname;

				in = htonl(as->as.netnamadr.addr);
				_asr_addr_as_fqdn((char *)&in,
				    as->as.netnamadr.family,
				    dname, sizeof(dname));
				as->as_subq = _res_query_async_ctx(
				    name, C_IN, type, as->as_ctx);
			}

			if (as->as_subq == NULL) {
				ar->ar_errno = errno;
				ar->ar_h_errno = NETDB_INTERNAL;
				async_set_state(as, ASR_STATE_HALT);
				break;
			}
			async_set_state(as, ASR_STATE_SUBQUERY);
			break;

		case ASR_DB_FILE:

			if ((f = fopen(_PATH_NETWORKS, "re")) == NULL)
				break;

			if (as->as_type == ASR_GETNETBYNAME)
				data = as->as.netnamadr.name;
			else
				data = (void *)&as->as.netnamadr.addr;

			n = netent_file_match(f, as->as_type, data);
			saved_errno = errno;
			fclose(f);
			errno = saved_errno;
			if (n == NULL) {
				if (errno) {
					ar->ar_errno = errno;
					ar->ar_h_errno = NETDB_INTERNAL;
					async_set_state(as, ASR_STATE_HALT);
				}
				/* otherwise not found */
				break;
			}

			ar->ar_netent = &n->n;
			ar->ar_h_errno = NETDB_SUCCESS;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}
		break;

	case ASR_STATE_SUBQUERY:

		if ((r = asr_run(as->as_subq, ar)) == ASYNC_COND)
			return (ASYNC_COND);
		as->as_subq = NULL;

		if (ar->ar_datalen == -1) {
			async_set_state(as, ASR_STATE_NEXT_DB);
			break;
		}

		/* Got packet, but no answer */
		if (ar->ar_count == 0) {
			free(ar->ar_data);
			async_set_state(as, ASR_STATE_NEXT_DB);
			break;
		}

		n = netent_from_packet(as->as_type, ar->ar_data,
		    ar->ar_datalen);
		free(ar->ar_data);
		if (n == NULL) {
			ar->ar_errno = errno;
			ar->ar_h_errno = NETDB_INTERNAL;
			async_set_state(as, ASR_STATE_HALT);
			break;
		}

		if (as->as_type == ASR_GETNETBYADDR)
			n->n.n_net = as->as.netnamadr.addr;

		/*
		 * No valid hostname or address found in the dns packet.
		 * Ignore it.
		 */
		if ((as->as_type == ASR_GETNETBYNAME && n->n.n_net == 0) ||
		    n->n.n_name == NULL) {
			free(n);
			async_set_state(as, ASR_STATE_NEXT_DB);
			break;
		}

		ar->ar_netent = &n->n;
		ar->ar_h_errno = NETDB_SUCCESS;
		async_set_state(as, ASR_STATE_HALT);
		break;

	case ASR_STATE_NOT_FOUND:

		ar->ar_errno = 0;
		ar->ar_h_errno = HOST_NOT_FOUND;
		async_set_state(as, ASR_STATE_HALT);
		break;

	case ASR_STATE_HALT:

		if (ar->ar_h_errno)
			ar->ar_netent = NULL;
		else
			ar->ar_errno = 0;
		return (ASYNC_DONE);

	default:
		ar->ar_errno = EOPNOTSUPP;
		ar->ar_h_errno = NETDB_INTERNAL;
		ar->ar_gai_errno = EAI_SYSTEM;
		async_set_state(as, ASR_STATE_HALT);
		break;
	}
	goto next;
}

static struct netent_ext *
netent_file_match(FILE *f, int reqtype, const char *data)
{
	struct netent_ext	*e;
	char			*tokens[MAXTOKEN], buf[BUFSIZ + 1];
	int			 n, i;
	in_addr_t		 net;

	for (;;) {
		n = _asr_parse_namedb_line(f, tokens, MAXTOKEN, buf, sizeof(buf));
		if (n == -1) {
			errno = 0; /* ignore errors reading the file */
			return (NULL);
		}

		/* there must be an address and at least one name */
		if (n < 2)
			continue;

		if (reqtype == ASR_GETNETBYADDR) {
			net = inet_network(tokens[1]);
			if (memcmp(&net, data, sizeof net) == 0)
				goto found;
		} else {
			for (i = 0; i < n; i++) {
				if (i == 1)
					continue;
				if (strcasecmp(data, tokens[i]))
					continue;
				goto found;
			}
		}
	}

found:
	if ((e = netent_alloc(AF_INET)) == NULL)
		return (NULL);
	if (netent_set_cname(e, tokens[0], 0) == -1)
		goto fail;
	for (i = 2; i < n; i ++)
		if (netent_add_alias(e, tokens[i], 0) == -1)
			goto fail;
	e->n.n_net = inet_network(tokens[1]);
	return (e);
fail:
	free(e);
	return (NULL);
}

static struct netent_ext *
netent_from_packet(int reqtype, char *pkt, size_t pktlen)
{
	struct netent_ext	*n;
	struct asr_unpack	 p;
	struct asr_dns_header	 hdr;
	struct asr_dns_query	 q;
	struct asr_dns_rr	 rr;

	if ((n = netent_alloc(AF_INET)) == NULL)
		return (NULL);

	_asr_unpack_init(&p, pkt, pktlen);
	_asr_unpack_header(&p, &hdr);
	for (; hdr.qdcount; hdr.qdcount--)
		_asr_unpack_query(&p, &q);
	for (; hdr.ancount; hdr.ancount--) {
		_asr_unpack_rr(&p, &rr);
		if (rr.rr_class != C_IN)
			continue;
		switch (rr.rr_type) {
		case T_CNAME:
			if (reqtype == ASR_GETNETBYNAME) {
				if (netent_add_alias(n, rr.rr_dname, 1) == -1)
					goto fail;
			} else {
				if (netent_set_cname(n, rr.rr_dname, 1) == -1)
					goto fail;
			}
			break;

		case T_PTR:
			if (reqtype != ASR_GETNETBYADDR)
				continue;
			if (netent_set_cname(n, rr.rr.ptr.ptrname, 1) == -1)
				goto fail;
			/* XXX See if we need to have MULTI_PTRS_ARE_ALIASES */
			break;

		case T_A:
			if (n->n.n_addrtype != AF_INET)
				break;
			if (netent_set_cname(n, rr.rr_dname, 1) ==  -1)
				goto fail;
			n->n.n_net = ntohl(rr.rr.in_a.addr.s_addr);
			break;
		}
	}

	return (n);
fail:
	free(n);
	return (NULL);
}

static struct netent_ext *
netent_alloc(int family)
{
	struct netent_ext	*n;
	size_t			 alloc;

	alloc = sizeof(*n) + 1024;
	if ((n = calloc(1, alloc)) == NULL)
		return (NULL);

	n->n.n_addrtype = family;
	n->n.n_aliases = n->aliases;
	n->pos = (char *)(n) + sizeof(*n);
	n->end = n->pos + 1024;

	return (n);
}

static int
netent_set_cname(struct netent_ext *n, const char *name, int isdname)
{
	char	buf[MAXDNAME];
	size_t	l;

	if (n->n.n_name)
		return (-1);

	if (isdname) {
		_asr_strdname(name, buf, sizeof buf);
		buf[strlen(buf) - 1] = '\0';
		if (!res_hnok(buf))
			return (-1);
		name = buf;
	}

	l = strlen(name) + 1;
	if (n->pos + l >= n->end)
		return (-1);

	n->n.n_name = n->pos;
	memmove(n->pos, name, l);
	n->pos += l;

	return (0);
}

static int
netent_add_alias(struct netent_ext *n, const char *name, int isdname)
{
	char	buf[MAXDNAME];
	size_t	i, l;

	for (i = 0; i < MAXALIASES; i++)
		if (n->aliases[i] == NULL)
			break;
	if (i == MAXALIASES)
		return (-1);

	if (isdname) {
		_asr_strdname(name, buf, sizeof buf);
		buf[strlen(buf)-1] = '\0';
		if (!res_hnok(buf))
			return (-1);
		name = buf;
	}

	l = strlen(name) + 1;
	if (n->pos + l >= n->end)
		return (-1);

	n->aliases[i] = n->pos;
	memmove(n->pos, name, l);
	n->pos += l;
	return (0);
}
@


1.24
log
@missing breaks

ok jca@@ krw@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.23 2015/09/20 14:19:21 eric Exp $	*/
d158 1
a158 1
				as->as.netnamadr.subq = _res_search_async_ctx(
d168 1
a168 1
				as->as.netnamadr.subq = _res_query_async_ctx(
d172 1
a172 1
			if (as->as.netnamadr.subq == NULL) {
d214 1
a214 1
		if ((r = asr_run(as->as.netnamadr.subq, ar)) == ASYNC_COND)
d216 1
a216 1
		as->as.netnamadr.subq = NULL;
@


1.23
log
@remove bogus includes of err.h
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.22 2015/09/14 11:52:49 guenther Exp $	*/
d176 1
@


1.22
log
@Wrap <asr.h> so internal calls go direct and all the symbols are weak
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.21 2015/09/09 15:49:34 deraadt Exp $	*/
a25 1
#include <err.h>
@


1.21
log
@Hide all unnecessary asr / resolver related API with _ prefixes.
direction & ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.20 2015/05/29 08:49:37 eric Exp $	*/
d82 1
d107 1
@


1.20
log
@fix a possible off-by-one when reading /etc/hosts if it doesn't end
with a newline.

ok jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.19 2014/11/02 13:59:16 eric Exp $	*/
d63 2
a64 2
	ac = asr_use_resolver(asr);
	if ((as = asr_async_new(ac, ASR_GETNETBYNAME)) == NULL)
d73 1
a73 1
	asr_ctx_unref(ac);
d78 2
a79 2
		asr_async_free(as);
	asr_ctx_unref(ac);
d89 2
a90 2
	ac = asr_use_resolver(asr);
	if ((as = asr_async_new(ac, ASR_GETNETBYADDR)) == NULL)
d97 1
a97 1
	asr_ctx_unref(ac);
d102 2
a103 2
		asr_async_free(as);
	asr_ctx_unref(ac);
d140 1
a140 1
		if (asr_iter_db(as) == -1) {
d157 1
a157 1
				as->as.netnamadr.subq = res_search_async_ctx(
d164 1
a164 1
				asr_addr_as_fqdn((char *)&in,
d167 1
a167 1
				as->as.netnamadr.subq = res_query_async_ctx(
d291 1
a291 1
		n = asr_parse_namedb_line(f, tokens, MAXTOKEN, buf, sizeof(buf));
d343 2
a344 2
	asr_unpack_init(&p, pkt, pktlen);
	asr_unpack_header(&p, &hdr);
d346 1
a346 1
		asr_unpack_query(&p, &q);
d348 1
a348 1
		asr_unpack_rr(&p, &rr);
d414 1
a414 1
		asr_strdname(name, buf, sizeof buf);
d445 1
a445 1
		asr_strdname(name, buf, sizeof buf);
@


1.19
log
@Fix a NULL deref when getting an actual result for an invalid hostname
in gethostbyname().  Similar fix for getnetbyname().

ok deraadt@@ daniel@@ jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.18 2014/09/15 06:15:48 guenther Exp $	*/
d286 1
a286 1
	char			*tokens[MAXTOKEN];
d291 1
a291 1
		n = asr_parse_namedb_line(f, tokens, MAXTOKEN);
@


1.18
log
@When fopen()ing internal to libc (the API doesn't support the use
of the resulting FILE *), then pass fopen() the 'e' mode letter to
mark it close-on-exec.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.17 2014/09/15 06:03:39 guenther Exp $	*/
d242 2
a243 2
		 * No address found in the dns packet. The blocking version
		 * reports this as an error.
d245 2
a246 2
		if (as->as_type == ASR_GETNETBYNAME && n->n.n_net == 0) {
			 /* XXX wrong */
@


1.17
log
@Use _PATH_NETWORKS for "/etc/networks"

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.16 2014/07/23 21:26:25 eric Exp $	*/
d181 1
a181 1
			if ((f = fopen(_PATH_NETWORKS, "r")) == NULL)
@


1.16
log
@Make queries using the search list for hostname lookups fail with
NO_DATA/EAI_NODATA when the hostname param is an empty string.
So far, they were using the entries in the search list with no
additional component, which is not really expected.

reported by jsing@@ and a few others

ok deraadt@@, "makes sense" jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.15 2014/05/13 11:57:35 eric Exp $	*/
d181 1
a181 1
			if ((f = fopen("/etc/networks", "r")) == NULL)
@


1.16.4.1
log
@backport fix to avoid null deref with invalid hostnames
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.16 2014/07/23 21:26:25 eric Exp $	*/
d242 2
a243 2
		 * No valid hostname or address found in the dns packet.
		 * Ignore it.
d245 2
a246 2
		if ((as->as_type == ASR_GETNETBYNAME && n->n.n_net == 0) ||
		    n->n.n_name == NULL) {
@


1.15
log
@skip incomplete entries in /etc/hosts and /etc/networks
fix null deref spotted by Seth Hanford, pinpointed by dtucker@@

ok florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.14 2014/03/26 18:13:15 eric Exp $	*/
d124 7
@


1.14
log
@Make the asr API public.  Install asr.h to /usr/include.h and manpages.
Include tweaks suggested by mpi@@

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.13 2014/03/25 19:48:11 eric Exp $	*/
d289 4
@


1.13
log
@Cleanup and simplify the API to be exposed.  Use better names for
structures, functions and defines.

discussed with and ok deraadt@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.12 2014/03/14 11:07:33 eric Exp $	*/
d23 1
d25 1
a32 1
#include "asr.h"
@


1.12
log
@prefix structure names to avoid ambiguity and possible collisions when
the API gets public.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.11 2014/02/26 20:00:08 eric Exp $	*/
d43 1
a43 1
static int getnetnamadr_async_run(struct async *, struct async_res *);
d50 2
a51 2
struct async *
getnetbyname_async(const char *name, struct asr *asr)
d53 2
a54 2
	struct asr_ctx	*ac;
	struct async	*as;
d82 2
a83 2
struct async *
getnetbyaddr_async(in_addr_t net, int family, struct asr *asr)
d85 2
a86 2
	struct asr_ctx	*ac;
	struct async	*as;
d107 1
a107 1
getnetnamadr_async_run(struct async *as, struct async_res *ar)
d204 1
a204 1
		if ((r = asr_async_run(as->as.netnamadr.subq, ar)) == ASYNC_COND)
@


1.11
log
@Do not restrict chars in dname during label expansion, but validate resulting
hostnames before returning them to the caller.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.10 2013/07/12 14:36:22 eric Exp $	*/
d323 4
a326 4
	struct unpack		 p;
	struct header		 hdr;
	struct query		 q;
	struct rr		 rr;
@


1.11.2.1
log
@backport fix to avoid null deref with invalid hostnames
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.11 2014/02/26 20:00:08 eric Exp $	*/
d234 2
a235 2
		 * No valid hostname or address found in the dns packet.
		 * Ignore it.
d237 2
a238 2
		if ((as->as_type == ASR_GETNETBYNAME && n->n.n_net == 0) ||
		    n->n.n_name == NULL) {
@


1.10
log
@Make some symbols static and prefix all visible symbols with asr_
to prevent collisions with third-party programs.

suggested by sthen@@, ok theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.9 2013/04/30 12:02:39 eric Exp $	*/
d26 1
d404 2
d435 2
@


1.9
log
@Do not take external buffers for storing DNS responses in the internal
async API.  That is actually useless and it makes the code more
complicated.  The required buffers are always allocated when needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.8 2013/04/01 15:49:54 deraadt Exp $	*/
a41 2
ssize_t addr_as_fqdn(const char *, int, char *, size_t);

d62 1
a62 1
	if ((as = async_new(ac, ASR_GETNETBYNAME)) == NULL)
d76 1
a76 1
		async_free(as);
d88 1
a88 1
	if ((as = async_new(ac, ASR_GETNETBYADDR)) == NULL)
d100 1
a100 1
		async_free(as);
d155 1
a155 1
				addr_as_fqdn((char *)&in,
d203 1
a203 1
		if ((r = async_run(as->as.netnamadr.subq, ar)) == ASYNC_COND)
d330 2
a331 2
	unpack_init(&p, pkt, pktlen);
	unpack_header(&p, &hdr);
d333 1
a333 1
		unpack_query(&p, &q);
d335 1
a335 1
		unpack_rr(&p, &rr);
@


1.8
log
@space cleanup; ok eric
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.7 2012/11/24 18:58:49 eric Exp $	*/
d151 1
a151 1
				    name, C_IN, type, NULL, 0, as->as_ctx);
d161 1
a161 1
				    name, C_IN, type, NULL, 0, as->as_ctx);
@


1.7
log
@Saner implementation for self-contained hostent and netent, and also
a couple of fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.6 2012/11/24 15:12:48 eric Exp $	*/
d157 1
a157 1
				addr_as_fqdn((char*)&in,
d180 1
a180 1
				data = (void*)&as->as.netnamadr.addr;
d387 1
a387 1
	n->pos = (char*)(n) + sizeof(*n);
@


1.6
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.5 2012/11/24 13:59:53 eric Exp $	*/
d35 6
a40 4
#define NETENT_PTR(n) ((char**)(((char*)n) + sizeof (*n)))
#define NETENT_POS(n)  NETENT_PTR(n)[0]
#define NETENT_STOP(n)	NETENT_PTR(n)[1]
#define NETENT_LEFT(n) (NETENT_STOP(n) - NETENT_POS(n))
d45 5
a49 5
static struct netent *netent_alloc(int);
static int netent_set_cname(struct netent *, const char *, int);
static int netent_add_alias(struct netent *, const char *, int);
static struct netent *netent_file_match(FILE *, int, const char *);
static struct netent *netent_from_packet(int, char *, size_t);
d110 5
a114 4
	int		 r, type;
	FILE		*f;
	char		 dname[MAXDNAME], *name, *data;
	in_addr_t	 in;
d182 2
a183 1
			ar->ar_netent = netent_file_match(f, as->as_type, data);
d185 2
a186 2

			if (ar->ar_netent == NULL) {
d196 1
d221 1
a221 1
		ar->ar_netent = netent_from_packet(as->as_type, ar->ar_data,
d224 1
a224 2

		if (ar->ar_netent == NULL) {
d232 1
a232 1
			ar->ar_netent->n_net = as->as.netnamadr.addr;
d238 1
a238 2
		if (as->as_type == ASR_GETNETBYNAME &&
		    ar->ar_netent->n_net == 0) {
d240 1
a240 1
			free(ar->ar_netent);
d242 1
a242 3
		} else {
			ar->ar_h_errno = NETDB_SUCCESS;
			async_set_state(as, ASR_STATE_HALT);
d244 4
d275 1
a275 1
static struct netent *
d278 4
a281 4
	struct netent	*e;
	char		*tokens[MAXTOKEN];
	int		 n, i;
	in_addr_t	 net;
d313 1
a313 1
	e->n_net = inet_network(tokens[1]);
d320 1
a320 1
static struct netent *
d323 5
a327 5
	struct netent	*n;
	struct unpack	 p;
	struct header	 hdr;
	struct query	 q;
	struct rr	 rr;
d360 1
a360 1
			if (n->n_addrtype != AF_INET)
d364 1
a364 1
			n->n_net = ntohl(rr.rr.in_a.addr.s_addr);
d375 1
a375 1
static struct netent *
d378 2
a379 2
	struct netent	*n;
	size_t		 alloc;
d381 1
a381 1
	alloc = sizeof(*n) + (2 + MAXALIASES) * sizeof(char*) + 1024;
d385 4
a388 5
	n->n_addrtype = family;
	n->n_aliases = NETENT_PTR(n) + 2;

	NETENT_STOP(n) = (char*)(n) + alloc;
	NETENT_POS(n) = (char *)(n->n_aliases + MAXALIASES);
d394 1
a394 1
netent_set_cname(struct netent *n, const char *name, int isdname)
d397 1
d399 2
a400 2
	if (n->n_name)
		return (0);
a406 2
	if (strlen(name) + 1 >= NETENT_LEFT(n))
		return (1);
d408 7
a414 3
	strlcpy(NETENT_POS(n), name, NETENT_LEFT(n));
	n->n_name = NETENT_POS(n);
	NETENT_POS(n) += strlen(name) + 1;
d420 1
a420 1
netent_add_alias(struct netent *n, const char *name, int isdname)
d423 1
a423 1
	size_t	i;
d425 2
a426 2
	for (i = 0; i < MAXALIASES - 1; i++)
		if (n->n_aliases[i] == NULL)
d428 2
a429 2
	if (i == MAXALIASES - 1)
		return (0);
a435 6
	if (strlen(name) + 1 >= NETENT_LEFT(n))
		return (1);

	strlcpy(NETENT_POS(n), name, NETENT_LEFT(n));
	n->n_aliases[i] = NETENT_POS(n);
	NETENT_POS(n) += strlen(name) + 1;
d437 7
@


1.5
log
@make separate structures for pack and unpack
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.4 2012/09/07 13:21:34 eric Exp $	*/
d17 1
a19 1

d23 1
a23 1
        
d114 1
a114 1
	switch(as->as_state) {
d135 1
a135 1
		switch(AS_DB(as)) {
d160 1
a160 1
			
d265 1
a265 1
                break;
d278 1
a278 1
	for(;;) {
d329 1
a329 1
	for(; hdr.qdcount; hdr.qdcount--)
d331 1
a331 1
	for(; hdr.ancount; hdr.ancount--) {
@


1.4
log
@unused variables
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.3 2012/08/19 16:17:40 eric Exp $	*/
d319 1
a319 1
	struct packed	 p;
d327 1
a327 1
	packed_init(&p, pkt, pktlen);
@


1.3
log
@When building dynamic hostent and netent, allocate a single linear buffer to
hold both the structure and the data. The freehostent() and freenetent() API
functions are not needed anymore.  While there, ensure that the constructed
addr and alias lists are really NULL terminated.
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.2 2012/07/10 17:30:38 eric Exp $	*/
d108 1
a108 1
	int		 i, n, r, type;
@


1.2
log
@same code update and fix as for gethostnamadr_async
@
text
@d1 1
a1 1
/*	$OpenBSD: getnetnamadr_async.c,v 1.1 2012/04/14 09:24:18 eric Exp $	*/
d35 5
d237 1
a237 1
			freenetent(ar->ar_netent);
d311 1
a311 1
	freenetent(e);
d366 1
a366 1
	freenetent(n);
d374 1
d376 2
a377 2
	n = calloc(1, sizeof *n);
	if (n == NULL)
a379 5
	n->n_aliases = calloc(MAXALIASES, sizeof *n->n_aliases);
	if (n->n_aliases == NULL) {
		freenetent(n);
		return (NULL);
	}
d381 4
d400 1
a400 3
		n->n_name = strdup(buf);
	} else {
		n->n_name = strdup(name);
d402 6
a407 2
	if (n->n_name == NULL)
		return (-1);
d418 1
a418 1
	for (i = 0; i < MAXALIASES; i++)
d421 1
a421 1
	if (i == MAXALIASES)
d427 1
a427 3
		n->n_aliases[i] = strdup(buf);
	} else {
		n->n_aliases[i] = strdup(name);
d429 6
a434 2
	if (n->n_aliases[i] == NULL)
		return (-1);
a436 12
}

void
freenetent(struct netent *n)
{
	char **c;

	free(n->n_name);
	for (c = n->n_aliases; *c; c++)
		free(*c);
	free(n->n_aliases);
	free(n);
@


1.1
log
@Import asr, an experimental async resolver implementation.
The idea is to eventually replace the existing resolver with
something better. Time to start working on it in tree.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asr.c,v 1.10 2011/07/13 16:14:43 eric Exp $	*/
d41 2
a42 2
static int netent_file_match(FILE *, int, const char *, char **, int);
static int netent_from_packet(struct netent *, int, char *, size_t);
d103 3
a105 4
	struct netent	*e;
	int	i, n, r, type;
	FILE	*f;
	char	*toks[MAXTOKEN], dname[MAXDNAME], *name, *data;
d173 11
a183 11
			n = netent_file_match(f, as->as_type, data, toks,
			    MAXTOKEN);
			if (n == -1) {
				fclose(f);
				break;
			}
			e = netent_alloc(as->as.netnamadr.family);
			if (e == NULL) {
				ar->ar_errno = errno;
				ar->ar_h_errno = NETDB_INTERNAL;
				async_set_state(as, ASR_STATE_HALT);
a185 5
			netent_set_cname(e, toks[0], 0);
			for (i = 2; i < n; i ++)
				netent_add_alias(e, toks[i], 0);
			e->n_net = inet_network(toks[1]);
			fclose(f);
a187 1
			ar->ar_netent = e;
d211 5
a215 1
		if ((e = netent_alloc(as->as.netnamadr.family)) == NULL) {
a217 1
			free(ar->ar_data);
d223 1
a223 4
			e->n_net = as->as.netnamadr.addr;

		netent_from_packet(e, as->as_type, ar->ar_data, ar->ar_datalen);
		free(ar->ar_data);
d229 2
a230 1
		if (as->as_type == ASR_GETNETBYNAME && e->n_net == 0) {
d232 1
a232 1
			freenetent(e);
a235 1
			ar->ar_netent = e;
d265 2
a266 3
static int
netent_file_match(FILE *f, int type, const char *data, char **tokens,
    int ntokens)
d268 4
a271 2
	int		n, i;
	in_addr_t	net;
d275 4
a278 2
		if (n == -1)
			return (-1);
d280 1
a280 1
		if (type == ASR_GETNETBYADDR) {
d283 1
a283 1
				return (n);
d290 1
a290 1
				return (n);
d294 14
d310 2
a311 2
static int
netent_from_packet(struct netent *n, int action, char *pkt, size_t pktlen)
d313 1
d318 3
a320 1
	int		 r;
a325 1

d332 7
a338 4
			if (action == ASR_GETNETBYNAME)
				r = netent_add_alias(n, rr.rr_dname, 1);
			else
				r = netent_set_cname(n, rr.rr_dname, 1);
d340 1
d342 1
a342 1
			if (action != ASR_GETNETBYADDR)
d344 2
a345 1
			r = netent_set_cname(n, rr.rr.ptr.ptrname, 1);
d348 1
d352 2
a353 1
			r = netent_set_cname(n, rr.rr_dname, 1);
d359 4
a362 1
	return (0);
@

