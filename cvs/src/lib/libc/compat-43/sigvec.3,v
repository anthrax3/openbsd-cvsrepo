head	1.33;
access;
symbols
	OPENBSD_6_1:1.33.0.10
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.33.0.8
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.33.0.4
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.33.0.6
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.33.0.2
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.32.0.8
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.32.0.6
	OPENBSD_5_5_BASE:1.32
	OPENBSD_5_4:1.32.0.2
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.30.0.6
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.30.0.4
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.30
	OPENBSD_5_1:1.30.0.2
	OPENBSD_5_0:1.27.0.8
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.6
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.4
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.2
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.26.0.12
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.26.0.8
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.26.0.6
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.26.0.4
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.26.0.2
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.25.0.16
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.25.0.14
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.12
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.10
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.25.0.8
	OPENBSD_3_7_BASE:1.25
	OPENBSD_3_6:1.25.0.6
	OPENBSD_3_6_BASE:1.25
	OPENBSD_3_5:1.25.0.4
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	OPENBSD_3_3:1.21.0.2
	OPENBSD_3_3_BASE:1.21
	OPENBSD_3_2:1.20.0.2
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.18.0.6
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.18.0.4
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.18.0.2
	OPENBSD_2_9_BASE:1.18
	OPENBSD_2_8:1.17.0.4
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.17.0.2
	OPENBSD_2_7_BASE:1.17
	OPENBSD_2_6:1.15.0.2
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.33
date	2015.01.15.19.26.27;	author schwarze;	state Exp;
branches;
next	1.32;
commitid	rrjYdXukaa8jU0N3;

1.32
date	2013.07.17.05.42.10;	author schwarze;	state Exp;
branches;
next	1.31;

1.31
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2011.11.22.21.13.30;	author guenther;	state Exp;
branches;
next	1.29;

1.29
date	2011.09.03.23.40.15;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2011.09.03.22.59.07;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2010.02.25.17.10.34;	author schwarze;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.31.19.19.27;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.02.20.18.33;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2003.05.30.11.56.45;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2003.05.12.14.34.13;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2003.05.07.08.52.43;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2002.11.10.03.21.48;	author fgsch;	state Exp;
branches;
next	1.20;

1.20
date	2002.09.18.07.33.47;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.18;

1.18
date	2000.12.15.14.31.19;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2000.04.18.02.31.32;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	2000.01.22.12.05.48;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.09.23.04.11.59;	author alex;	state Exp;
branches;
next	1.14;

1.14
date	99.07.09.13.35.15;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.05.23.14.10.58;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.05.16.19.54.45;	author alex;	state Exp;
branches;
next	1.11;

1.11
date	99.05.10.17.56.27;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.02.27.21.54.54;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.07.24.00.43.43;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	98.04.28.07.36.25;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.11.15.23.46.16;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.11.05.19.25.43;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.11.05.19.23.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.11.04.08.37.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.20.58.26;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.19.44;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.46;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.46;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.33
log
@use .In where appropriate; from Kaspars at Bankovskis dot net
@
text
@.\" Copyright (c) 1980, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: sigvec.3,v 1.32 2013/07/17 05:42:10 schwarze Exp $
.\"
.Dd $Mdocdate: July 17 2013 $
.Dt SIGVEC 3
.Os
.Sh NAME
.Nm sigvec
.Nd software signal facilities
.Sh SYNOPSIS
.In signal.h
.Bd -literal
struct sigvec {
	void	 (*sv_handler)();
	int	 sv_mask;
	int      sv_flags;
};
.Ed
.Ft int
.Fn sigvec "int sig" "struct sigvec *vec" "struct sigvec *ovec"
.Sh DESCRIPTION
.Bf -symbolic
This interface is made obsolete by
.Xr sigaction 2 .
.Ef
.Pp
The system defines a set of signals that may be delivered to a process.
Signal delivery resembles the occurrence of a hardware interrupt:
the signal is blocked from further occurrence, the current process
context is saved, and a new one is built.
A process may specify a
.Em handler
to which a signal is delivered, or specify that a signal is to be
.Em blocked
or
.Em ignored .
A process may also specify that a default action is to be taken
by the system when a signal occurs.
A signal may also be
.Em blocked ,
in which case its delivery is postponed until it is
.Em unblocked .
The action to be taken on delivery is determined at the time
of delivery.
Normally, signal handlers execute on the current stack
of the process.
This may be changed, on a per-handler basis,
so that signals are taken on a special
.Em "signal stack" .
.Pp
All signals have the same
.Em priority .
Signal routines execute with the signal that caused their
invocation
.Em blocked ,
but other signals may yet occur.
A global
.Em "signal mask"
defines the set of signals currently blocked from delivery
to a process.
The signal mask for a process is initialized
from that of its parent (normally 0).
It may be changed with a
.Xr sigblock 3
or
.Xr sigsetmask 3
call, or when a signal is delivered to the process.
.Pp
When a signal
condition arises for a process, the signal is added to a set of
signals pending for the process.
If the signal is not currently
.Em blocked
by the process then it is delivered to the process.
When a caught signal
is delivered, the current state of the process is saved,
a new signal mask is calculated (as described below),
and the signal handler is invoked.
The call to the handler
is arranged so that if the signal handling routine returns
normally the process will resume execution in the context
from before the signal's delivery.
If the process wishes to resume in a different context, then it
must arrange to restore the previous context itself.
.Pp
When a signal is delivered to a process a new signal mask is
installed for the duration of the process' signal handler
(or until a
.Xr sigblock 3
or
.Xr sigsetmask 3
call is made).
This mask is formed by taking the union of the current signal mask,
the signal to be delivered, and
the signal mask associated with the handler to be invoked.
.Pp
.Fn sigvec
assigns a handler for a specific signal.
If
.Fa vec
is non-zero, it
specifies an action
.Pf ( Dv SIG_DFL ,
.Dv SIG_IGN ,
or a handler routine) and mask
to be used when delivering the specified signal.
If
.Fa ovec
is non-zero, the previous handling information for the signal
is returned to the user.
.Pp
Once a signal handler is installed, it remains installed
until another
.Fn sigvec
call is made, or an
.Xr execve 2
is performed.
A signal-specific default action may be reset by
setting
.Fa sv_handler
to
.Dv SIG_DFL .
The defaults are process termination, possibly with core dump;
no action; stopping the process; or continuing the process.
See the signal list below for each signal's default action.
If
.Fa sv_handler
is set to
.Dv SIG_IGN ,
the default action for the signal is to discard the signal,
and if a signal is pending,
the pending signal is discarded even if the signal is masked.
If
.Fa sv_handler
is set to
.Dv SIG_IGN ,
current and pending instances
of the signal are ignored and discarded.
.Pp
Options may be specified by setting
.Em sv_flags .
If the
.Dv SV_ONSTACK
bit is set in
.Fa sv_flags ,
the system will deliver the signal to the process on a
.Em "signal stack" ,
specified with
.Xr sigaltstack 2 .
.Pp
If a signal is caught during the system calls listed below,
the call may be restarted,
the call may return with a data transfer shorter than requested,
or the call may be forced to terminate
with the error
.Er EINTR .
Interrupting of pending calls is requested
by setting the
.Dv SV_INTERRUPT
bit in
.Ar sv_flags .
The affected system calls include
.Xr open 2 ,
.Xr read 2 ,
.Xr write 2 ,
.Xr sendto 2 ,
.Xr recvfrom 2 ,
.Xr sendmsg 2
and
.Xr recvmsg 2
on a communications channel or a slow device (such as a terminal,
but not a regular file)
and during a
.Xr wait 2
or
.Xr ioctl 2 .
However, calls that have already committed are not restarted,
but instead return a partial success (for example, a short read count).
.Pp
After a
.Xr fork 2
or
.Xr vfork 2
all signals, the signal mask, the signal stack,
and the interrupt/restart flags are inherited by the child.
.Pp
.Xr execve 2
reinstates the default
action for all signals which were caught and
resets all signals to be caught on the user stack.
Ignored signals remain ignored;
the signal mask remains the same;
signals that interrupt pending system calls continue to do so.
.Pp
The following is a list of all signals
with names as in the include file
.In signal.h :
.Bl -column "SIGVTALRM" "create core image" "terminal line hangup"
.It Sy "Name" Ta Sy "Default Action" Ta Sy "Description"
.It Dv SIGHUP Ta "terminate process" Ta "terminal line hangup"
.It Dv SIGINT Ta "terminate process" Ta "interrupt program"
.It Dv SIGQUIT Ta "create core image" Ta "quit program"
.It Dv SIGILL Ta "create core image" Ta "illegal instruction"
.It Dv SIGTRAP Ta "create core image" Ta "trace trap"
.It Dv SIGABRT Ta "create core image" Ta "abort(3) call (formerly SIGIOT)"
.It Dv SIGEMT Ta "create core image" Ta "emulate instruction executed"
.It Dv SIGFPE Ta "create core image" Ta "floating-point exception"
.It Dv SIGKILL Ta "terminate process" Ta "kill program (cannot be caught or ignored)"
.It Dv SIGBUS Ta "create core image" Ta "bus error"
.It Dv SIGSEGV Ta "create core image" Ta "segmentation violation"
.It Dv SIGSYS Ta "create core image" Ta "system call given invalid argument"
.It Dv SIGPIPE Ta "terminate process" Ta "write on a pipe with no reader"
.It Dv SIGALRM Ta "terminate process" Ta "real-time timer expired"
.It Dv SIGTERM Ta "terminate process" Ta "software termination signal"
.It Dv SIGURG Ta "discard signal" Ta "urgent condition present on socket"
.It Dv SIGSTOP Ta "stop process" Ta "stop (cannot be caught or ignored)"
.It Dv SIGTSTP Ta "stop process" Ta "stop signal generated from keyboard"
.It Dv SIGCONT Ta "discard signal" Ta "continue after stop"
.It Dv SIGCHLD Ta "discard signal" Ta "child status has changed"
.It Dv SIGTTIN Ta "stop process" Ta "background read attempted from control terminal"
.It Dv SIGTTOU Ta "stop process" Ta "background write attempted to control terminal"
.It Dv SIGIO Ta "discard signal" Ta "I/O is possible on a descriptor (see"
.Xr fcntl 2 )
.It Dv SIGXCPU Ta "terminate process" Ta "CPU time limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGXFSZ Ta "terminate process" Ta "file size limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGVTALRM Ta "terminate process" Ta "virtual time alarm (see"
.Xr setitimer 2 )
.It Dv SIGPROF Ta "terminate process" Ta "profiling timer alarm (see"
.Xr setitimer 2 )
.It Dv SIGWINCH Ta "discard signal" Ta "window size change"
.It Dv SIGINFO Ta "discard signal" Ta "status request from keyboard"
.It Dv SIGUSR1 Ta "terminate process" Ta "user-defined signal 1"
.It Dv SIGUSR2 Ta "terminate process" Ta "user-defined signal 2"
.El
.Sh NOTES
The mask specified in
.Fa vec
is not allowed to block
.Dv SIGKILL
or
.Dv SIGSTOP .
This is enforced silently by the system.
.Pp
The
.Dv SV_INTERRUPT
flag is not available in
.Bx 4.2 ,
hence it should not be used if backward compatibility is needed.
.Sh RETURN VALUES
A 0 value indicated that the call succeeded.
A \-1 return value indicates an error occurred and
.Va errno
is set to indicated the reason.
.Sh EXAMPLES
For an example of signal handler declarations, see
.Xr sigaction 2 .
.Sh ERRORS
.Fn sigvec
will fail and no new signal handler will be installed if one
of the following occurs:
.Bl -tag -width Er
.It Bq Er EFAULT
Either
.Fa vec
or
.Fa ovec
points to memory that is not a valid part of the process
address space.
.It Bq Er EINVAL
.Fa sig
is not a valid signal number.
.It Bq Er EINVAL
An attempt is made to ignore or supply a handler for
.Dv SIGKILL
or
.Dv SIGSTOP .
.El
.Sh SEE ALSO
.Xr kill 1 ,
.Xr kill 2 ,
.Xr ptrace 2 ,
.Xr sigaction 2 ,
.Xr sigaltstack 2 ,
.Xr sigprocmask 2 ,
.Xr sigsuspend 2 ,
.Xr setjmp 3 ,
.Xr sigblock 3 ,
.Xr siginterrupt 3 ,
.Xr sigpause 3 ,
.Xr sigsetmask 3 ,
.Xr sigsetops 3 ,
.Xr tty 4
.Sh HISTORY
A
.Fn sigvec
system call first appeared in
.Bx 4.2 .
It was reimplemented as a wrapper around
.Xr sigaction 2
in
.Bx 4.3 Reno .
The old system call was kept for compatibility until
.Ox 4.9 .
@


1.32
log
@more library history
facts checked by sobrado@@
style tweaks and ok jmc@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: sigvec.3,v 1.31 2013/06/05 03:39:22 tedu Exp $
d30 1
a30 1
.Dd $Mdocdate: June 5 2013 $
d223 1
a223 1
.Aq Pa signal.h :
@


1.31
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d28 1
a28 1
.\"	$OpenBSD: sigvec.3,v 1.30 2011/11/22 21:13:30 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: November 22 2011 $
d321 11
@


1.30
log
@sigstack() is long dead, and the compat sigaltstack syscall is gone too.
Correct the namespace protections for sigreturn(), sigwait(), and psignal()

ok millert@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: sigvec.3,v 1.29 2011/09/03 23:40:15 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: September 3 2011 $
d37 1
a37 1
.Fd #include <signal.h>
@


1.29
log
@knock out some useless Pp;
@
text
@d28 1
a28 1
.\"	$OpenBSD: sigvec.3,v 1.28 2011/09/03 22:59:07 jmc Exp $
d175 1
a175 1
.Xr sigstack 2 .
a312 1
.Xr sigstack 2 ,
@


1.28
log
@make -column lists pretty again;

specifically, rewrite them to permit some markup in the column headers,
and use "Ta" instead of literal tabs; mandoc does not currently match groff
100%, but a mandoc fix may be some time off, and we've gone enough releases
with poorly formatting column lists.

in some cases i have rewritten the lists as -tag, where -column made
little sense.
@
text
@d28 1
a28 1
.\"	$OpenBSD: sigvec.3,v 1.27 2010/02/25 17:10:34 schwarze Exp $
d30 1
a30 1
.Dd $Mdocdate: February 25 2010 $
a37 1
.Pp
@


1.27
log
@Do not attempt to silently continue text for the last column of tables
generated by .Bl -column .It <tab> on following lines.  This is a
workaround; fixing it properly in a way compatible with our old groff
would require .Xo support for .Bl -column phrases in mandoc(1), which
is too much work right now just to fix exactly this one place in our tree.

ok jmc@@

This commit fixes the last issue i'm aware of which prevented building
our whole tree with mandoc.  Not all pages format nicely yet, but
none kill the build any more.
@
text
@d28 1
a28 1
.\"	$OpenBSD: sigvec.3,v 1.26 2007/05/31 19:19:27 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 31 2007 $
d225 25
a249 26
.Bl -column SIGVTALARMXX "create core imagexxx"
.It Sy "  NAME  " "	Default Action  " "	Description"
.It Dv SIGHUP No "	terminate process" "	terminal line hangup"
.It Dv SIGINT No "	terminate process" "	interrupt program"
.It Dv SIGQUIT No "	create core image" "	quit program"
.It Dv SIGILL No "	create core image" "	illegal instruction"
.It Dv SIGTRAP No "	create core image" "	trace trap"
.It Dv SIGABRT No "	create core image" "	abort(3) call (formerly SIGIOT)"
.It Dv SIGEMT No "	create core image" "	emulate instruction executed"
.It Dv SIGFPE No "	create core image" "	floating-point exception"
.It Dv SIGKILL No "	terminate process" "	kill program (cannot be caught or ignored)"
.It Dv SIGBUS No "	create core image" "	bus error"
.It Dv SIGSEGV No "	create core image" "	segmentation violation"
.It Dv SIGSYS No "	create core image" "	system call given invalid argument"
.It Dv SIGPIPE No "	terminate process" "	write on a pipe with no reader"
.It Dv SIGALRM No "	terminate process" "	real-time timer expired"
.It Dv SIGTERM No "	terminate process" "	software termination signal"
.It Dv SIGURG No "	discard signal" "	urgent condition present on socket"
.It Dv SIGSTOP No "	stop process" "	stop (cannot be caught or ignored)"
.It Dv SIGTSTP No "	stop process" "	stop signal generated from keyboard"
.It Dv SIGCONT No "	discard signal" "	continue after stop"
.It Dv SIGCHLD No "	discard signal" "	child status has changed"
.It Dv SIGTTIN No "	stop process" "	background read attempted from control terminal"
.It Dv SIGTTOU No "	stop process" "	background write attempted to control terminal"
.It Dv SIGIO No "	discard signal" Tn "	I/O"
is possible on a descriptor (see
d251 1
a251 1
.It Dv SIGXCPU No "	terminate process" "	CPU time limit exceeded (see"
d253 1
a253 1
.It Dv SIGXFSZ No "	terminate process" "	file size limit exceeded (see"
d255 1
a255 1
.It Dv SIGVTALRM No "	terminate process" "	virtual time alarm (see"
d257 1
a257 1
.It Dv SIGPROF No "	terminate process" "	profiling timer alarm (see"
d259 4
a262 4
.It Dv SIGWINCH No "	discard signal" "	window size change"
.It Dv SIGINFO No "	discard signal" "	status request from keyboard"
.It Dv SIGUSR1 No "	terminate process" "	user-defined signal 1"
.It Dv SIGUSR2 No "	terminate process" "	user-defined signal 2"
@


1.26
log
@convert to new .Dd format;
@
text
@d28 1
a28 1
.\"	$OpenBSD: sigvec.3,v 1.25 2003/06/02 20:18:33 millert Exp $
d30 1
a30 1
.Dd $Mdocdate$
d232 1
a232 3
.It Dv SIGABRT No "	create core image" Xr 	abort 3
call (formerly
.Dv SIGIOT )
@


1.25
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d28 1
a28 1
.\"	$OpenBSD: sigvec.3,v 1.24 2003/05/30 11:56:45 jmc Exp $
d30 1
a30 1
.Dd April 29, 1991
@


1.24
log
@- section reorder
- in sigvec(3) removed .Xr to itself, added section numbers to two
other .Xr's
@
text
@d12 1
a12 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
d28 1
a28 1
.\"	$OpenBSD: sigvec.3,v 1.23 2003/05/12 14:34:13 jmc Exp $
@


1.23
log
@cpu -> CPU
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.22 2003/05/07 08:52:43 jmc Exp $
d120 1
a120 1
.Xr sigblock
d122 1
a122 1
.Xr sigsetmask
d290 3
a313 3
.Sh EXAMPLES
For an example of signal handler declarations, see
.Xr sigaction 2 .
a328 1
.Xr sigvec 3 ,
@


1.22
log
@typos;
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.21 2002/11/10 03:21:48 fgsch Exp $
d258 1
a258 1
.It Dv SIGXCPU No "	terminate process" "	cpu time limit exceeded (see"
@


1.21
log
@SEE ALSO corrections. millert ok.
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.19 2002/04/30 16:31:42 mpech Exp $
d185 1
a185 1
or the call may forced to terminate
@


1.20
log
@fix Xr refs; frisco@@blackant.net
@
text
@a319 1
.Xr sigpause 3 ,
d326 1
@


1.19
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.18 2000/12/15 14:31:19 aaron Exp $
d320 1
a320 1
.Xr sigpause 2 ,
@


1.18
log
@.Sh EXAMPLE -> .Sh EXAMPLES. Even if there's only one example, at least
this is consistent.
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.17 2000/04/18 02:31:32 aaron Exp $
d42 1
a42 1

@


1.17
log
@Repairs.
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.16 2000/01/22 12:05:48 aaron Exp $
d311 1
a311 1
.Sh EXAMPLE
@


1.16
log
@Use .Er macro when referring to errno error names.
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.15 1999/09/23 04:11:59 alex Exp $
d61 2
a62 1
context is saved, and a new one is built.  A process may specify a
d77 2
a78 1
of the process.  This may be changed, on a per-handler basis,
d91 4
a94 3
to a process.  The signal mask for a process is initialized
from that of its parent (normally 0).  It
may be changed with a
d102 2
a103 1
signals pending for the process.  If the signal is not currently
d109 2
a110 1
and the signal handler is invoked.  The call to the handler
d129 2
a130 1
assigns a handler for a specific signal.  If
d286 2
a287 2
A 0 value indicated that the call succeeded.  A \-1 return value
indicates an error occurred and
@


1.15
log
@Typo fixes.
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.14 1999/07/09 13:35:15 aaron Exp $
d181 1
a181 1
.Dv EINTR .
@


1.14
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.13 1999/05/23 14:10:58 aaron Exp $
d306 1
a306 1
For an example of signal handler declerations, see
@


1.13
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.12 1999/05/16 19:54:45 alex Exp $
d120 1
a120 1
the signal to be delivered, and 
@


1.12
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.11 1999/05/10 17:56:27 aaron Exp $
d36 1
a36 1
.Os BSD 4
@


1.11
log
@correct some Xr's which referred to the wrong man page sections
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.10 1999/02/27 21:54:54 deraadt Exp $
a311 1
.Xr setjmp 3 ,
d314 5
a320 2
.Xr sigpause 2 ,
.Xr sigprocmask 2 ,
a322 2
.Xr sigstack 2 ,
.Xr sigsuspend 2 ,
@


1.10
log
@make function names the correct case
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.9 1998/07/24 00:43:43 espie Exp $
d230 1
a230 1
.It Dv SIGABRT No "	create core image" Xr 	abort 2
@


1.9
log
@
Man pages Xrefs.
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.8 1998/04/28 07:36:25 deraadt Exp $
d123 1
a123 1
.Fn Sigvec
d212 1
a212 1
.Xr Execve 2
d285 1
a285 1
.Fn Sigvec
d297 1
a297 1
.Fa Sig
@


1.8
log
@use Xr more often
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.7 1997/11/15 23:46:16 deraadt Exp $
d92 1
a92 1
.Xr sigblock 2
d94 1
a94 1
.Xr sigsetmask 2
d315 1
a315 1
.Xr sigblock 2 ,
d319 1
a319 1
.Xr sigsetmask 2 ,
d323 1
a323 1
.Xr sigvec 2 ,
@


1.7
log
@cleanups from various sources
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.6 1997/11/05 19:25:43 deraadt Exp $
d54 2
a55 1
This interface is made obsolete by sigaction(2).
@


1.6
log
@sv_mask is an int; mycroft
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.5 1997/11/05 19:23:47 deraadt Exp $
d59 1
a59 1
the signal is blocked from further occurrence, the current process 
d62 1
a62 1
to which a signal is delivered, or specify that a signal is to be 
d68 6
d85 1
a85 1
A global 
d100 2
a101 1
by the process then it is delivered to the process.  When a signal
d103 1
a103 1
a new signal mask is calculated (as described below), 
d118 3
a120 4
This mask is formed by taking the current signal mask,
adding the signal to be delivered, and 
.Em or Ns 'ing
in the signal mask associated with the handler to be invoked.
d126 4
a129 1
specifies a handler routine and mask
d131 1
a131 9
Further, if the
.Dv SV_ONSTACK
bit is set in
.Fa sv_flags ,
the system will deliver the signal to the process on a
.Em "signal stack" ,
specified with
.Xr sigstack 2 .
If 
a135 46
The following is a list of all signals
with names as in the include file
.Aq Pa signal.h :
.Bl -column SIGVTALARMXX "create core imagexxx"
.It Sy "  NAME	" "	  Default Action  " "		      Description"
.It Dv SIGHUP No "	terminate process" "	terminal line hangup"
.It Dv SIGINT No "	terminate process" "	interrupt program"
.It Dv SIGQUIT No "	create core image" "	quit program"
.It Dv SIGILL No "	create core image" "	illegal instruction"
.It Dv SIGTRAP No "	create core image" "	trace trap"
.It Dv SIGABRT No "	create core image" Xr 	abort 2
call (formerly
.Dv SIGIOT )
.It Dv SIGEMT No "	create core image" "	emulate instruction executed"
.It Dv SIGFPE No "	create core image" "	floating-point exception"
.It Dv SIGKILL No "	terminate process" "	kill program"
.It Dv SIGBUS No "	create core image" "	bus error"
.It Dv SIGSEGV No "	create core image" "	segmentation violation"
.It Dv SIGSYS No "	create core image" "	system call given invalid argument"
.It Dv SIGPIPE No "	terminate process" "	write on a pipe with no reader"
.It Dv SIGALRM No "	terminate process" "	real-time timer expired"
.It Dv SIGTERM No "	terminate process" "	software termination signal"
.It Dv SIGURG No "	discard signal" "	urgent condition present on socket"
.It Dv SIGSTOP No "	stop process" "	stop (cannot be caught or ignored)"
.It Dv SIGTSTP No "	stop process" "	stop signal generated from keyboard"
.It Dv SIGCONT No "	discard signal" "	continue after stop"
.It Dv SIGCHLD No "	discard signal" "	child status has changed"
.It Dv SIGTTIN No "	stop process" "	background read attempted from control terminal"
.It Dv SIGTTOU No "	stop process" "	background write attempted to control terminal"
.It Dv SIGIO No "	discard signal" Tn "	I/O"
is possible on a descriptor (see
.Xr fcntl 2 )
.It Dv SIGXCPU No "	terminate process" "	cpu time limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGXFSZ No "	terminate process" "	file size limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGVTALRM No "	terminate process" "	virtual time alarm (see"
.Xr setitimer 2 )
.It Dv SIGPROF No "	terminate process" "	profiling timer alarm (see"
.Xr setitimer 2 )
.It Dv SIGWINCH No "	discard signal" "	Window size change"
.It Dv SIGINFO No "	discard signal" "	status request from keyboard"
.It Dv SIGUSR1 No "	terminate process" "	User defined signal 1"
.It Dv SIGUSR2 No "	terminate process" "	User defined signal 2"
.El
.Pp
d149 1
a149 1
See the above signal list for each signal's default action.
d152 9
a160 2
is
.Dv SIG_IGN
d164 11
d176 7
a182 4
the call is normally restarted.
The call can be forced to terminate prematurely with an
.Dv EINTR
error return by setting the
d185 1
a185 1
.Fa sv_flags .
d187 1
d209 1
a209 1
and the restart/interrupt flags are inherited by the child.
d217 47
a263 1
signals that interrupt system calls continue to do so.
d265 1
a265 1
The mask specified in 
d271 1
a271 1
This is done silently by the system.
d291 1
a291 1
or 
d304 3
a307 1
.Xr sigaction 2 ,
d309 1
d311 6
a316 1
.Xr kill 2 ,
a317 2
.Xr sigsuspend 2 ,
.Xr sigblock 2 ,
d319 1
a319 1
.Xr sigpause 2 ,
d321 1
a322 3
.Xr sigsetops 3 ,
.Xr setjmp 3 ,
.Xr siginterrupt 3 ,
a323 31
.Sh EXAMPLE
On the
.Tn VAX\-11
The handler routine can be declared:
.Bd -literal -offset indent
void handler(sig, code, scp)
int sig, code;
struct sigcontext *scp;
.Ed
.Pp
Here
.Fa sig
is the signal number, into which the hardware faults and traps are
mapped as defined below. 
.Fa Code
is a parameter that is either a constant
as given below or, for compatibility mode faults, the code provided by
the hardware (Compatibility mode faults are distinguished from the
other
.Dv SIGILL
traps by having
.Dv PSL_CM
set in the psl).
.Fa Scp
is a pointer to the
.Fa sigcontext
structure (defined in
.Aq Pa signal.h ) ,
used to restore the context from before the signal.
.Sh BUGS
This manual page is still confusing.
@


1.5
log
@blank line seperator
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.4 1997/11/04 08:37:21 deraadt Exp $
d46 1
a46 1
	sigset_t sv_mask;
@


1.4
log
@decl type
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.3 1997/07/23 20:58:26 kstailey Exp $
d42 1
@


1.3
log
@tabify
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.2 1996/08/19 08:19:44 tholo Exp $
d49 1
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d32 1
a32 1
.\"	$OpenBSD: sigvec.3,v 1.1.1.1 1995/10/18 08:41:46 deraadt Exp $
d44 1
a44 1
        void     (*sv_handler)();
d137 1
a137 1
.It Sy "  NAME  " "	  Default Action  " "	              Description"
@


1.1
log
@Initial revision
@
text
@d32 1
a32 2
.\"     from: @@(#)sigvec.2	6.7 (Berkeley) 4/29/91
.\"	$Id: sigvec.3,v 1.5 1994/06/13 18:50:17 cgd Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
