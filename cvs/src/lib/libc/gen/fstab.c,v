head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.6
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.8
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.6
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.18.0.16
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.14
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.12
	OPENBSD_5_0:1.18.0.10
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.8
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.6
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.4
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.10
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.8
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.6
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.4
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.8.0.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2016.03.17.23.48.42;	author mmcc;	state Exp;
branches;
next	1.21;
commitid	wIE8ze40bqKYMfCM;

1.21
date	2015.09.13.21.02.26;	author guenther;	state Exp;
branches;
next	1.20;
commitid	ffiCc5bESJqdAsfr;

1.20
date	2014.09.15.06.15.48;	author guenther;	state Exp;
branches;
next	1.19;
commitid	ztgYHm1nk3mtTyS3;

1.19
date	2013.06.01.01.42.55;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2009.06.03.18.18.23;	author jsg;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.29.19.06.07;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.09.27.14.07.23;	author blambert;	state Exp;
branches;
next	1.15;

1.15
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2005.03.25.15.38.47;	author otto;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.22.02.13.08;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.22;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.27.00.58.54;	author lebel;	state Exp;
branches;
next	1.8;

1.8
date	99.09.03.16.23.18;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.08.03.09.18.30;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	97.07.09.00.28.19;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.06.14.01.42.09;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.06.13.13.01.29;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.22.51;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.39.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.53;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.53;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@remove NOTREACHED
@
text
@/*	$OpenBSD: fstab.c,v 1.21 2015/09/13 21:02:26 guenther Exp $ */
/*
 * Copyright (c) 1980, 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/uio.h>
#include <sys/stat.h>

#include <errno.h>
#include <limits.h>
#include <fstab.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

static FILE *_fs_fp;
static struct fstab _fs_fstab;

static int fstabscan(void);

static int
fstabscan(void)
{
	char *cp;
#define	MAXLINELENGTH	1024
	static char line[MAXLINELENGTH];
	char subline[MAXLINELENGTH];
	const char *errstr;
	char *last;
	int typexx;

	for (;;) {
		if (!(cp = fgets(line, sizeof(line), _fs_fp)))
			return(0);
/* OLD_STYLE_FSTAB */
		if (!strpbrk(cp, " \t")) {
			_fs_fstab.fs_spec = strtok_r(cp, ":\n", &last);
			if (!_fs_fstab.fs_spec || *_fs_fstab.fs_spec == '#')
				continue;
			_fs_fstab.fs_file = strtok_r(NULL, ":\n", &last);
			_fs_fstab.fs_type = strtok_r(NULL, ":\n", &last);
			if (_fs_fstab.fs_type) {
				if (!strcmp(_fs_fstab.fs_type, FSTAB_XX))
					continue;
				_fs_fstab.fs_mntops = _fs_fstab.fs_type;
				_fs_fstab.fs_vfstype =
				    strcmp(_fs_fstab.fs_type, FSTAB_SW) ?
				    "ufs" : "swap";
				if ((cp = strtok_r(NULL, ":\n", &last))) {
					_fs_fstab.fs_freq = strtonum(cp, 0,
					    INT_MAX, &errstr);
					if (errstr)
						goto bad;
					if ((cp = strtok_r(NULL,
					    ":\n", &last))) {
						_fs_fstab.fs_passno =
						    strtonum(cp, 0, INT_MAX,
						    &errstr);
						if (errstr)
							goto bad;
						return(1);
					}
				}
			}
			goto bad;
		}
/* OLD_STYLE_FSTAB */
		_fs_fstab.fs_spec = strtok_r(cp, " \t\n", &last);
		if (!_fs_fstab.fs_spec || *_fs_fstab.fs_spec == '#')
			continue;
		_fs_fstab.fs_file = strtok_r(NULL, " \t\n", &last);
		_fs_fstab.fs_vfstype = strtok_r(NULL, " \t\n", &last);
		_fs_fstab.fs_mntops = strtok_r(NULL, " \t\n", &last);
		if (_fs_fstab.fs_mntops == NULL)
			goto bad;
		_fs_fstab.fs_freq = 0;
		_fs_fstab.fs_passno = 0;
		if ((cp = strtok_r(NULL, " \t\n", &last)) != NULL) {
			_fs_fstab.fs_freq = strtonum(cp, 0, INT_MAX, &errstr);
			if (errstr)
				goto bad;
			if ((cp = strtok_r(NULL, " \t\n", &last)) != NULL) {
				_fs_fstab.fs_passno = strtonum(cp, 0, INT_MAX,
				    &errstr);
				if (errstr)
					goto bad;
			}
		}
		strlcpy(subline, _fs_fstab.fs_mntops, sizeof subline);
		for (typexx = 0, cp = strtok_r(subline, ",", &last); cp;
		     cp = strtok_r(NULL, ",", &last)) {
			if (strlen(cp) != 2)
				continue;
			if (!strcmp(cp, FSTAB_RW)) {
				_fs_fstab.fs_type = FSTAB_RW;
				break;
			}
			if (!strcmp(cp, FSTAB_RQ)) {
				_fs_fstab.fs_type = FSTAB_RQ;
				break;
			}
			if (!strcmp(cp, FSTAB_RO)) {
				_fs_fstab.fs_type = FSTAB_RO;
				break;
			}
			if (!strcmp(cp, FSTAB_SW)) {
				_fs_fstab.fs_type = FSTAB_SW;
				break;
			}
			if (!strcmp(cp, FSTAB_XX)) {
				_fs_fstab.fs_type = FSTAB_XX;
				typexx++;
				break;
			}
		}
		if (typexx)
			continue;
		if (cp != NULL)
			return(1);

bad:		/* We silently ignore all bogus lines */
		;
	}
}

struct fstab *
getfsent(void)
{
	if ((!_fs_fp && !setfsent()) || !fstabscan())
		return(NULL);
	return(&_fs_fstab);
}

struct fstab *
getfsspec(const char *name)
{
	if (setfsent())
		while (fstabscan())
			if (!strcmp(_fs_fstab.fs_spec, name))
				return(&_fs_fstab);
	return(NULL);
}

struct fstab *
getfsfile(const char *name)
{
	if (setfsent())
		while (fstabscan())
			if (!strcmp(_fs_fstab.fs_file, name))
				return(&_fs_fstab);
	return(NULL);
}

int
setfsent(void)
{
	struct stat sbuf;

	if (_fs_fp) {
		rewind(_fs_fp);
		return(1);
	}

	if (stat(_PATH_FSTAB, &sbuf) != 0)
		goto fail;
	if ((sbuf.st_size == 0) || ((sbuf.st_mode & S_IFMT) != S_IFREG)) {
		errno = EFTYPE;
		goto fail;
	}

	if ((_fs_fp = fopen(_PATH_FSTAB, "re")))
		return(1);

fail:
	return(0);
}
DEF_WEAK(setfsent);

void
endfsent(void)
{
	if (_fs_fp) {
		(void)fclose(_fs_fp);
		_fs_fp = NULL;
	}
}
@


1.21
log
@Wrap <fstab.h> so that calls go direct and the symbols are all weak
(Do you sense a theme?)
@
text
@d1 1
a1 1
/*	$OpenBSD: fstab.c,v 1.20 2014/09/15 06:15:48 guenther Exp $ */
a150 1
	/* NOTREACHED */
@


1.20
log
@When fopen()ing internal to libc (the API doesn't support the use
of the resulting FILE *), then pass fopen() the 'e' mode letter to
mark it close-on-exec.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fstab.c,v 1.19 2013/06/01 01:42:55 tedu Exp $ */
d205 1
@


1.19
log
@no need to cast null
@
text
@d1 1
a1 1
/*	$OpenBSD: fstab.c,v 1.18 2009/06/03 18:18:23 jsg Exp $ */
d199 1
a199 1
	if ((_fs_fp = fopen(_PATH_FSTAB, "r")))
@


1.18
log
@Ensure there is a statement after a label.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fstab.c,v 1.17 2009/04/29 19:06:07 deraadt Exp $ */
d67 2
a68 2
			_fs_fstab.fs_file = strtok_r((char *)NULL, ":\n", &last);
			_fs_fstab.fs_type = strtok_r((char *)NULL, ":\n", &last);
d76 1
a76 1
				if ((cp = strtok_r((char *)NULL, ":\n", &last))) {
d81 1
a81 1
					if ((cp = strtok_r((char *)NULL,
d98 3
a100 3
		_fs_fstab.fs_file = strtok_r((char *)NULL, " \t\n", &last);
		_fs_fstab.fs_vfstype = strtok_r((char *)NULL, " \t\n", &last);
		_fs_fstab.fs_mntops = strtok_r((char *)NULL, " \t\n", &last);
d105 1
a105 1
		if ((cp = strtok_r((char *)NULL, " \t\n", &last)) != NULL) {
d109 1
a109 1
			if ((cp = strtok_r((char *)NULL, " \t\n", &last)) != NULL) {
d118 1
a118 1
		     cp = strtok_r((char *)NULL, ",", &last)) {
d169 1
a169 1
	return((struct fstab *)NULL);
d179 1
a179 1
	return((struct fstab *)NULL);
@


1.17
log
@Remove the stderr spray balony.  Library functions should indicate failure
(and libc and some others can use errno to indicate more detailed results).
They should not print trash to stderr, let alone assume that stderr is open
to the place they think it is.
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: fstab.c,v 1.16 2007/09/27 14:07:23 blambert Exp $ */
d149 1
@


1.16
log
@strtol -> strtonum
assign values to struct members directly
remove now-unused variable

ok otto@@
ok & input millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fstab.c,v 1.15 2005/08/08 08:05:34 espie Exp $ */
a45 1
static void error(int);
d148 1
a148 2
bad:		/* no way to distinguish between EOF and syntax error */
		error(EFTYPE);
a201 1
	error(errno);
a211 18
}

static void
error(int err)
{
	struct iovec iov[5];

	iov[0].iov_base = "fstab: ";
	iov[0].iov_len = 7;
	iov[1].iov_base = _PATH_FSTAB;
	iov[1].iov_len = sizeof(_PATH_FSTAB) - 1;
	iov[2].iov_base =  ": ";
	iov[2].iov_len = 2;
	iov[3].iov_base = strerror(err);
	iov[3].iov_len = strlen(iov[3].iov_base);
	iov[4].iov_base = "\n";
	iov[4].iov_len = 1;
	(void)writev(STDERR_FILENO, iov, 5);
@


1.15
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d56 2
a57 1
	char *endp, *last;
a58 1
	long l;
d78 3
a80 3
					l = strtol(cp, &endp, 10);
					if (endp == cp || *endp != '\0' ||
					    l < 0 || l >= INT_MAX)
a81 1
					_fs_fstab.fs_freq = l;
d84 4
a87 3
						l = strtol(cp, &endp, 10);
						if (endp == cp || *endp != '\0'
						    || l < 0 || l >= INT_MAX)
a88 1
						_fs_fstab.fs_passno = l;
d107 2
a108 3
			l = strtol(cp, &endp, 10);
			if (endp == cp || *endp != '\0' || l < 0 ||
			    l >= INT_MAX)
a109 1
			_fs_fstab.fs_freq = l;
d111 3
a113 3
				l = strtol(cp, &endp, 10);
				if (endp == cp || *endp != '\0' || l < 0 ||
				    l >= INT_MAX)
a114 1
				_fs_fstab.fs_passno = l;
@


1.14
log
@deregister (and deauto!). ok millert@@ marco@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: fstab.c,v 1.13 2004/05/18 02:05:52 jfb Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.13
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.12 2003/06/02 20:18:34 millert Exp $";
d55 1
a55 1
	register char *cp;
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.11 2002/06/22 02:13:08 deraadt Exp $";
d53 1
a53 1
fstabscan()
d163 1
a163 1
getfsent()
d171 1
a171 2
getfsspec(name)
	register const char *name;
d181 1
a181 2
getfsfile(name)
	register const char *name;
d191 1
a191 1
setfsent()
d216 1
a216 1
endfsent()
d225 1
a225 2
error(err)
	int err;
@


1.11
log
@use strtok_r() instead of strtok(); millert ok
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.10 2002/02/16 21:27:22 millert Exp $";
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.9 2001/06/27 00:58:54 lebel Exp $";
d63 1
a63 1
	char *endp;
d72 1
a72 1
			_fs_fstab.fs_spec = strtok(cp, ":\n");
d75 2
a76 2
			_fs_fstab.fs_file = strtok((char *)NULL, ":\n");
			_fs_fstab.fs_type = strtok((char *)NULL, ":\n");
d84 1
a84 1
				if ((cp = strtok((char *)NULL, ":\n"))) {
d90 2
a91 1
					if ((cp = strtok((char *)NULL, ":\n"))) {
d104 1
a104 1
		_fs_fstab.fs_spec = strtok(cp, " \t\n");
d107 3
a109 3
		_fs_fstab.fs_file = strtok((char *)NULL, " \t\n");
		_fs_fstab.fs_vfstype = strtok((char *)NULL, " \t\n");
		_fs_fstab.fs_mntops = strtok((char *)NULL, " \t\n");
d114 1
a114 1
		if ((cp = strtok((char *)NULL, " \t\n")) != NULL) {
d120 1
a120 1
			if ((cp = strtok((char *)NULL, " \t\n")) != NULL) {
d129 2
a130 2
		for (typexx = 0, cp = strtok(subline, ","); cp;
		     cp = strtok((char *)NULL, ",")) {
@


1.9
log
@use strlcpy vs strncpy+a[len-1]='\0'.  millert@@ ok.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.8 1999/09/03 16:23:18 millert Exp $";
d53 2
a54 2
static void error __P((int));
static int fstabscan __P((void));
@


1.8
log
@Use strtol() and strtoul() instead of atoi().  This allows us to catch
errors reasonably and deal correctly with unsigned quantities.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.7 1999/08/03 09:18:30 downsj Exp $";
d127 1
a127 2
		strncpy(subline, _fs_fstab.fs_mntops, sizeof subline-1);
		subline[sizeof subline-1] = '\0';
@


1.7
log
@Return an open failure if the fstab is zero length or not a regular file.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.6 1997/07/09 00:28:19 millert Exp $";
d41 1
d43 1
d63 1
d65 1
d85 5
a89 1
					_fs_fstab.fs_freq = atoi(cp);
d91 5
a95 1
						_fs_fstab.fs_passno = atoi(cp);
d114 12
a125 3
			_fs_fstab.fs_freq = atoi(cp);
			if ((cp = strtok((char *)NULL, " \t\n")) != NULL)
				_fs_fstab.fs_passno = atoi(cp);
@


1.6
log
@Clean up some -Wall complaints.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.5 1997/06/14 01:42:09 deraadt Exp $";
d40 1
d178 2
d184 8
d194 2
@


1.5
log
@oops
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.4 1997/06/13 13:01:29 deraadt Exp $";
d79 1
a79 1
				if (cp = strtok((char *)NULL, ":\n")) {
d81 1
a81 1
					if (cp = strtok((char *)NULL, ":\n")) {
d147 2
a148 2
	if (!_fs_fp && !setfsent() || !fstabscan())
		return((struct fstab *)NULL);
d181 1
a181 1
	if (_fs_fp = fopen(_PATH_FSTAB, "r"))
@


1.4
log
@strncpy
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.3 1996/08/19 08:22:51 tholo Exp $";
d105 1
a105 1
		stnrcpy(subline, _fs_fstab.fs_mntops, sizeof subline-1);
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: fstab.c,v 1.8 1996/04/03 19:48:56 jtc Exp $";
d105 2
a106 1
		strcpy(subline, _fs_fstab.fs_mntops);
@


1.2
log
@sync to netbsd 960418
@
text
@a0 3
/*	$OpenBSD$	*/
/*	$NetBSD: fstab.c,v 1.8 1996/04/03 19:48:56 jtc Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)fstab.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$NetBSD: fstab.c,v 1.8 1996/04/03 19:48:56 jtc Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: fstab.c,v 1.7 1995/02/27 04:34:44 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$NetBSD: fstab.c,v 1.7 1995/02/27 04:34:44 cgd Exp $";
d57 2
a58 2
static error __P((int));
static fstabscan __P((void));
d60 1
a60 1
static
d180 1
d202 1
a202 1
static
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
