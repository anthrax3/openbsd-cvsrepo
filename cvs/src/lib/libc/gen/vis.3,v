head	1.35;
access;
symbols
	OPENBSD_6_1:1.35.0.10
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.6
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.35.0.4
	OPENBSD_5_8_BASE:1.35
	OPENBSD_5_7:1.34.0.2
	OPENBSD_5_7_BASE:1.34
	OPENBSD_5_6:1.30.0.8
	OPENBSD_5_6_BASE:1.30
	OPENBSD_5_5:1.30.0.6
	OPENBSD_5_5_BASE:1.30
	OPENBSD_5_4:1.30.0.2
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.29.0.6
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.4
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.2
	OPENBSD_5_0:1.28.0.2
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.24.0.14
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.10
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.12
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.8
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.6
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.4
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.2
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.23.0.8
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.6
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.4
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.2
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.19.0.6
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.17.0.2
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.14.0.4
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.35
date	2015.07.20.01.52.28;	author millert;	state Exp;
branches;
next	1.34;
commitid	1K7DsYjDc1gtQpBp;

1.34
date	2015.02.07.08.44.49;	author doug;	state Exp;
branches;
next	1.33;
commitid	jyBcGssxtS18KFHH;

1.33
date	2015.02.06.05.51.06;	author doug;	state Exp;
branches;
next	1.32;
commitid	5HCxaXdHjJ33H8Nd;

1.32
date	2015.01.30.00.01.59;	author doug;	state Exp;
branches;
next	1.31;
commitid	23C6lXTrE5MTUXJY;

1.31
date	2014.11.30.15.54.18;	author schwarze;	state Exp;
branches;
next	1.30;
commitid	nZxMuJzTkYXZD3To;

1.30
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2012.01.16.04.10.36;	author guenther;	state Exp;
branches;
next	1.28;

1.28
date	2011.05.02.11.14.11;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2011.03.14.15.56.48;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2010.08.24.23.49.06;	author djm;	state Exp;
branches;
next	1.25;

1.25
date	2010.08.21.18.59.15;	author djm;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.31.19.19.29;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2005.08.28.19.51.27;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2005.08.10.08.55.25;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2005.08.09.19.38.31;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2005.02.25.03.12.43;	author cloder;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.11.15.19.12;	author pjanzen;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.24.01.27.09;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.01.07.48.50;	author pjanzen;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.09.19.34.46;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.24.00.30.53;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.11.21.00.47.28;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.14.17.47.09;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.08.09.12.57.53;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.18.03.01.28;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.07.09.13.35.20;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.06.05.03.44.54;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.04.01.30.12;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.29.22.38.37;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.05.16.19.55.03;	author alex;	state Exp;
branches;
next	1.4;

1.4
date	98.06.15.17.55.04;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.27.34;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.01.12.55.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.00;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.00;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Add VIS_DQ to escape double quotes.  OK deraadt@@ semarie@@ reyk@@
@
text
@.\"	$OpenBSD: vis.3,v 1.34 2015/02/07 08:44:49 doug Exp $
.\"
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: February 7 2015 $
.Dt VIS 3
.Os
.Sh NAME
.Nm vis ,
.Nm strvis ,
.Nm strnvis ,
.Nm strvisx ,
.Nm stravis
.Nd visually encode characters
.Sh SYNOPSIS
.In stdlib.h
.In vis.h
.Ft char *
.Fn vis "char *dst" "int c" "int flag" "int nextc"
.Ft int
.Fn strvis "char *dst" "const char *src" "int flag"
.Ft int
.Fn strnvis "char *dst" "const char *src" "size_t dstsize" "int flag"
.Ft int
.Fn strvisx "char *dst" "const char *src" "size_t srclen" "int flag"
.Ft int
.Fn stravis "char **outp" "const char *src" "int flag"
.Sh DESCRIPTION
The
.Fn vis
function copies into
.Fa dst
a string which represents the character
.Fa c .
If
.Fa c
needs no encoding, it is copied in unaltered.
.Fa dst
will be NUL-terminated and must be at least 5 bytes long
(maximum encoding requires 4 bytes plus the NUL).
The additional character,
.Fa nextc ,
is only used when selecting the
.Dv VIS_CSTYLE
encoding format (explained below).
.Pp
The
.Fn strvis ,
.Fn strnvis
and
.Fn strvisx
functions copy into
.Fa dst
a visual representation of
the string
.Fa src .
.Pp
The
.Fn strvis
function encodes characters from
.Fa src
up to the first NUL, into a buffer
.Fa dst
(which must be at least 4 * strlen(src) + 1 long).
.Pp
The
.Fn strnvis
function encodes characters from
.Fa src
up to the first NUL or the end of the buffer
.Fa dst ,
as indicated by
.Fa dstsize .
.Pp
The
.Fn strvisx
function encodes exactly
.Fa srclen
characters from
.Fa src
into a buffer
.Fa dst
(which must be at least 4 * srclen + 1 long).
This
is useful for encoding a block of data that may contain NULs.
.Pp
The
.Fn stravis
function writes a visual representation of the string
.Fa src
into a newly allocated string
.Fa outp ;
it does not attempt to
.Xr realloc 3
.Fa outp .
.Fa outp
should be passed to
.Xr free 3
to release the allocated storage when it is no longer needed.
.Fn stravis
checks for integer overflow when allocating memory.
.Pp
All forms NUL-terminate
.Fa dst ,
except for
.Fn strnvis
when
.Fa dstsize
is zero, in which case
.Fa dst
is not touched.
.Pp
The
.Fa flag
parameter is used for altering the default range of
characters considered for encoding and for altering the visual
representation.
.Ss Encodings
The encoding is a unique, invertible representation composed entirely of
graphic characters; it can be decoded back into the original form using
the
.Xr unvis 3
or
.Xr strunvis 3
functions.
.Pp
There are two parameters that can be controlled: the range of
characters that are encoded, and the type
of representation used.
By default, all non-graphic characters
except space, tab, and newline are encoded
(see
.Xr isgraph 3 ) .
The following flags
alter this:
.Bl -tag -width VIS_WHITEX
.It Dv VIS_ALL
Encode all characters, whether visible or not.
.It Dv VIS_DQ
Also encode double quote characters
.Pf ( Ql \&" ) .
.It Dv VIS_GLOB
Also encode magic characters recognized by
.Xr glob 3
.Pf ( Ql * ,
.Ql \&? ,
.Ql \&[ )
and
.Ql # .
.It Dv VIS_SP
Also encode space.
.It Dv VIS_TAB
Also encode tab.
.It Dv VIS_NL
Also encode newline.
.It Dv VIS_WHITE
Synonym for
.Dv VIS_SP | VIS_TAB | VIS_NL .
.It Dv VIS_SAFE
Only encode
.Dq unsafe
characters.
These are control characters which may cause common terminals to perform
unexpected functions.
Currently this form allows space,
tab, newline, backspace, bell, and return -- in addition
to all graphic characters -- unencoded.
.El
.Pp
There are three forms of encoding.
All forms use the backslash
.Ql \e
character to introduce a special
sequence; two backslashes are used to represent a real backslash.
These are the visual formats:
.Bl -tag -width VIS_CSTYLE
.It (default)
Use an
.Ql M
to represent meta characters (characters with the 8th
bit set), and use a caret
.Ql ^
to represent control characters (see
.Xr iscntrl 3 ) .
The following formats are used:
.Bl -tag -width xxxxx
.It Dv \e^C
Represents the control character
.Ql C .
Spans characters
.Ql \e000
through
.Ql \e037 ,
and
.Ql \e177
(as
.Ql \e^? ) .
.It Dv \eM-C
Represents character
.Ql C
with the 8th bit set.
Spans characters
.Ql \e241
through
.Ql \e376 .
.It Dv \eM^C
Represents control character
.Ql C
with the 8th bit set.
Spans characters
.Ql \e200
through
.Ql \e237 ,
and
.Ql \e377
(as
.Ql \eM^? ) .
.It Dv \e040
Represents
.Tn ASCII
space.
.It Dv \e240
Represents Meta-space.
.It Dv \e-C
Represents character
.Ql C .
Only used with
.Dv VIS_ALL .
.El
.It Dv VIS_CSTYLE
Use C-style backslash sequences to represent standard non-printable
characters.
The following sequences are used to represent the indicated characters:
.Bd -unfilled -offset indent
.Li \ea Tn  - BEL No (007)
.Li \eb Tn  - BS No (010)
.Li \ef Tn  - NP No (014)
.Li \en Tn  - NL No (012)
.Li \er Tn  - CR No (015)
.Li \es Tn  - SP No (040)
.Li \et Tn  - HT No (011)
.Li \ev Tn  - VT No (013)
.Li \e0 Tn  - NUL No (000)
.Ed
.Pp
When using this format, the
.Fa nextc
parameter is looked at to determine
if a NUL character can be encoded as
.Ql \e0
instead of
.Ql \e000 .
If
.Fa nextc
is an octal digit, the latter representation is used to
avoid ambiguity.
.It Dv VIS_OCTAL
Use a three digit octal sequence.
The form is
.Ql \eddd
where
.Ar d
represents an octal digit.
.El
.Pp
There is one additional flag,
.Dv VIS_NOSLASH ,
which inhibits the
doubling of backslashes and the backslash before the default
format (that is, control characters are represented by
.Ql ^C
and
meta characters as
.Ql M-C ) .
With this flag set, the encoding is
ambiguous and non-invertible.
.Sh RETURN VALUES
.Fn vis
returns a pointer to the terminating NUL character of the string
.Fa dst .
.Pp
.Fn strvis
and
.Fn strvisx
return the number of characters in
.Fa dst
(not including the trailing NUL).
.Pp
.Fn strnvis
returns the length that
.Fa dst
would become if it were of unlimited size (similar to
.Xr snprintf 3
or
.Xr strlcpy 3 ) .
This can be used to detect truncation, but it also means that
the return value of
.Fn strnvis
must not be used without checking it against
.Fa dstsize .
.Pp
Upon successful completion,
.Fn stravis
returns the number of characters in
.Pf * Fa outp
(not including the trailing NUL).
Otherwise,
.Fn stravis
returns -1 and sets
.Va errno
to
.Er ENOMEM .
.Sh EXAMPLES
.Fn strvis
has unusual storage requirements that can lead to stack or heap corruption
if the destination is not carefully constructed.
A common mistake is to use the same size for the source and destination
when the destination actually needs up to 4 * strlen(source) + 1 bytes.
.Pp
If the length of a string to be encoded is not known at compile time, use
.Fn stravis :
.Bd -literal -offset indent
char *src, *dst;

\&...
if (stravis(&dst, src, VIS_OCTAL) == -1)
	err(1, "stravis");

\&...
free(dst);
.Ed
.Pp
To encode a fixed size buffer,
.Fn strnvis
can be used with a fixed size target buffer:
.Bd -literal -offset indent
char src[MAXPATHLEN];
char dst[4 * MAXPATHLEN + 1];

\&...
if (strnvis(dst, src, sizeof(dst), VIS_OCTAL) >= sizeof(dst))
	err(1, "strnvis");
.Ed
.Sh SEE ALSO
.Xr unvis 1 ,
.Xr vis 1 ,
.Xr free 3 ,
.Xr snprintf 3 ,
.Xr strlcpy 3 ,
.Xr unvis 3
.Sh HISTORY
The
.Fn vis ,
.Fn strvis
and
.Fn strvisx
functions first appeared in
.Bx 4.4 ,
.Fn strnvis
in
.Ox 2.9
and
.Fn stravis
in
.Ox 5.7 .
.Pp
The
.Dv VIS_ALL
flag first appeared in
.Ox 4.9 .
@


1.34
log
@Add examples for stravis() and strnvis() to vis.3.

Show the best ways to encode a dynamic and static buffer.

input + ok schwarze@@, ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.33 2015/02/06 05:51:06 doug Exp $
d30 1
a30 1
.Dd $Mdocdate: February 6 2015 $
d164 3
@


1.33
log
@Add support for stravis() to vis.3 and Makefile.inc.

stravis(3) is an OpenBSD extension that was added recently.

input + ok schwarze@@, jmc@@, deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.32 2015/01/30 00:01:59 doug Exp $
d30 1
a30 1
.Dd $Mdocdate: January 30 2015 $
d335 31
@


1.32
log
@Rework vis.3 so it has standard sections.

Moved the return values from the description to a proper return values
section.  Broke up the description into function description followed
by a subsection for the range and encoding.  Replaced srclen with
strlen(src) when srclen isn't an argument.  Moved the common flag argument
to its own paragraph.

input schwarze@@, input + ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.31 2014/11/30 15:54:18 schwarze Exp $
d30 1
a30 1
.Dd $Mdocdate: November 30 2014 $
d37 2
a38 1
.Nm strvisx
d51 2
d112 16
d323 12
d338 1
d349 4
a352 1
.Bx 4.4
d354 1
a354 1
.Fn strnvis
d356 1
a356 1
.Ox 2.9 .
@


1.31
log
@mandoc -Tlint fixes from <kaspars at bankovskis dot net>
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.30 2013/06/05 03:39:22 tedu Exp $
d30 1
a30 1
.Dd $Mdocdate: June 5 2013 $
d60 3
a62 13
The string is NUL-terminated and a pointer to the end of the string is
returned.
The maximum length of any encoding is four
characters (not including the trailing NUL);
thus, when
encoding a set of characters into a buffer, the size of the buffer should
be four times the number of characters encoded, plus one for the trailing
NUL.
The
.Fa flag
parameter is used for altering the default range of
characters considered for encoding and for altering the visual
representation.
d86 1
a86 1
(which must be at least 4 * srclen + 1 long).
d109 1
a109 1
All three forms NUL-terminate
a117 18
.Fn strvis
and
.Fn strvisx
return the number of characters in
.Fa dst
(not including the trailing NUL).
.Fn strnvis
returns the length that
.Fa dst
would become if it were of unlimited size (similar to
.Xr snprintf 3
or
.Xr strlcpy 3 ) .
This can be used to detect truncation but it also means that
the return value of
.Fn strnvis
must not be used without checking it against
.Fa dstsize .
d119 6
d280 24
d317 2
a318 2
.Bx 4.4 .
The
d320 1
a320 1
function first appeared in
d322 1
@


1.30
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.29 2012/01/16 04:10:36 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: January 16 2012 $
a254 1
.Pp
@


1.29
log
@Document the \-C output format generated by VIS_ALL

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.28 2011/05/02 11:14:11 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 2 2011 $
d40 2
a41 2
.Fd #include <stdlib.h>
.Fd #include <vis.h>
@


1.28
log
@no need to escape `|'; as discussed with schwartze
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.27 2011/03/14 15:56:48 deraadt Exp $
d30 1
a30 1
.Dd $Mdocdate: March 14 2011 $
d249 5
d321 4
@


1.27
log
@try to document these functions better
discussed with millert and guenther
ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.26 2010/08/24 23:49:06 djm Exp $
d30 1
a30 1
.Dd $Mdocdate: August 24 2010 $
d183 1
a183 5
.Dv VIS_SP
\&|
.Dv VIS_TAB
\&|
.Dv VIS_NL .
@


1.26
log
@backout VIS_HEX. guenther@@ points out that the C89 \xff encoding
idiotically accepts more then two hex digits following the \x, even
on platforms where a char has 8 bits. It is therefore dangerous to have
an almost-bit-not-quite compatible format in vis(3).

The VIS_ALL (encode all characters) option introduced in the same commit
remains.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.25 2010/08/21 18:59:15 djm Exp $
d30 1
a30 1
.Dd $Mdocdate: August 21 2010 $
d47 1
a47 1
.Fn strnvis "char *dst" "const char *src" "size_t size" "int flag"
d49 1
a49 1
.Fn strvisx "char *dst" "const char *src" "size_t len" "int flag"
d60 1
a60 1
The string is NUL terminated and a pointer to the end of the string is
d89 1
d94 4
a97 1
up to the first NUL.
d102 1
a102 1
up to the first NUL or the end of
d105 2
a106 1
.Fa size .
d110 1
a110 1
.Fa len
d113 7
a119 3
(this
is useful for encoding a block of data that may contain NULs).
All three forms NUL terminate
d124 1
a124 1
.Fa size
a127 10
For
.Fn strvis
and
.Fn strvisx ,
the size of
.Fa dst
must be four times the number
of characters encoded from
.Fa src
(plus one for the NUL).
d145 1
a145 1
.Fa size .
@


1.25
log
@Two new flags: VIS_ALL - encode all characters, not just invisible ones
and VIS_HEX - use C89 \xff style hexadecimal encoding.

Teach unvis(3) how to deal with the hex encoding.

feedback and ok millert@@ chl@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.24 2007/05/31 19:19:29 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 31 2007 $
a282 7
.It Dv VIS_HEX
Use a two digit hexadecimal sequence.
The form is
.Ql \exdd
where
.Ar d
represents a hexadecimal digit.
@


1.24
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.23 2005/08/28 19:51:27 millert Exp $
d30 1
a30 1
.Dd $Mdocdate$
d166 2
d283 7
@


1.23
log
@fix vis prototype
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.22 2005/08/10 08:55:25 jmc Exp $
d30 1
a30 1
.Dd August 8, 2005
@


1.22
log
@although groff understands `.Ar bob )', it does not understand `.Ar ( bob',
so mark up the opening bracket with .Pf;

remove non- -mdoc .br;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.21 2005/08/09 19:38:31 millert Exp $
d43 1
a43 1
.Fn vis "char *dst" "char c" "int flag" "char nextc"
@


1.21
log
@Add VIS_GLOB to escape special characters used by shell-style globbing.
From Solar Designer based on changes in FreeBSD.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.20 2005/02/25 03:12:43 cloder Exp $
d169 1
a169 1
.Ql ( * ,
a314 1
.br
@


1.20
log
@Be correct in our man pages when talking about NUL termination (that is,
termination with '\0') vs. null termination.
Input from krw@@, jaredy@@, jmc@@.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.19 2003/06/02 20:18:35 millert Exp $
d30 1
a30 1
.Dd June 9, 1993
d166 8
@


1.19
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.18 2003/05/11 15:19:12 pjanzen Exp $
d60 1
a60 1
The string is null terminated and a pointer to the end of the string is
@


1.18
log
@Document \s
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.17 2003/02/24 01:27:09 deraadt Exp $
d14 1
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.17
log
@need stdlib.h too
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.16 2002/07/01 07:48:50 pjanzen Exp $
d260 1
@


1.16
log
@Fix strnvis():  don't truncate unnecessarily, set the return value correctly
if we had to truncate, and don't NUL-terminate if size == 0.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.15 2001/11/09 19:34:46 aaron Exp $
d44 1
@


1.15
log
@Typos, siz -> size.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.14 2000/12/24 00:30:53 aaron Exp $
d48 1
a48 1
.Fn strvis "char *dst" "char *src" "int flag"
d50 1
a50 1
.Fn strnvis "char *dst" "char *src" "size_t size" "int flag"
d52 1
a52 1
.Fn strvisx "char *dst" "char *src" "size_t len" "int flag"
d114 8
a121 1
.Fa dst .
@


1.14
log
@Various repairs, mostly to get rid of short lines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.13 2000/11/21 00:47:28 millert Exp $
d104 1
a104 1
.Fa siz .
d142 1
a142 1
.Fa siz .
@


1.13
log
@Add strnvis(3) -- a length-bounded version of strvis(3) with a return
value similar to snprintf(3) and strlcpy(3).
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.12 2000/09/14 17:47:09 aaron Exp $
d56 1
a56 2
function
copies into
@


1.12
log
@Remove spurious period.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.11 2000/08/09 12:57:53 aaron Exp $
d40 1
d50 3
a52 1
.Fn strvisx "char *dst" "char *src" "int len" "int flag"
d84 2
a85 1
.Fn strvis
d99 8
d114 1
a114 1
Both forms null terminate
d116 5
a120 1
The size of
d126 4
a129 2
Both
forms return the number of characters in
d132 12
d292 2
d296 6
a301 1
These functions first appeared in
d303 5
@


1.11
log
@Remove trailing blank lines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.10 2000/04/18 03:01:28 aaron Exp $
d126 1
a126 1
By default, all non-graphic characters.
@


1.10
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.9 1999/07/09 13:35:20 aaron Exp $
a265 1

@


1.9
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.8 1999/06/05 03:44:54 aaron Exp $
d60 4
a63 3
needs no encoding, it is copied in unaltered.  The string is
null terminated and a pointer to the end of the string is
returned.  The maximum length of any encoding is four
d149 4
a152 3
characters.  These are control
characters which may cause common terminals to perform
unexpected functions.  Currently this form allows space,
d240 2
a241 1
Use a three digit octal sequence.  The form is
@


1.8
log
@change some .Em/.Va to .Li, looks nicer
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.7 1999/06/04 01:30:12 aaron Exp $
d46 1
a46 1
.Ft int 
d48 1
a48 1
.Ft int 
d115 1
a115 1
graphic characters; it can be decoded back into the original form using 
d124 1
a124 1
of representation used.  
d134 1
a134 1
.It Dv VIS_TAB		
d138 1
a138 1
.It Dv VIS_WHITE	
d145 1
a145 1
.It Dv VIS_SAFE	
d152 1
a152 1
to all graphic characters -- unencoded. 
@


1.7
log
@After some constructive criticism from pjanzen@@ and some e-mail tag:

   - only use the .Dv NULL form when referring explicitly to a function
     argument or return value
   - otherwise, use these forms:
        o non-null
        o null-terminated (hyphenated form for predicate adjective)
        o else, null terminated, or null terminate, whichever the case
        o null pointer, null byte, null string, etc.
   - may use NUL to refer to an ASCII NUL, but it doesn't need a .Tn macro

In general, capitalizing the word "null" everywhere is unnecessary and makes
the man pages harder to read. The above is consistent with popular programming
texts (i.e., K&R, Stevens).
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.6 1999/05/29 22:38:37 aaron Exp $
d241 1
a241 1
.Em d
@


1.6
log
@repairs; go back over some old files, because we should properly distinguish
between NUL and NULL, i.e., don't use the .Dv (defined variable) macro when
referring to an ASCII NUL
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.5 1999/05/16 19:55:03 alex Exp $
d61 1
a61 1
NUL-terminated and a pointer to the end of the string is
d68 3
a70 1
The flag parameter is used for altering the default range of
d100 2
a101 2
is useful for encoding a block of data that may contain NUls).
Both forms NUL-terminate
d110 3
a112 2
forms return the number of characters in dst (not including
the trailing NUL.
d226 3
a228 1
When using this format, the nextc parameter is looked at to determine
@


1.5
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.4 1998/06/15 17:55:04 mickey Exp $
d38 3
a40 1
.Nm vis
d61 1
a61 1
null terminated, and a pointer to the end of the string is
d63 1
a63 2
characters (not including the trailing
.Dv NUL ) ; 
d67 1
a67 1
.Dv NUL . 
d90 1
a90 3
up to the
first
.Dv NUL . 
d98 2
a99 5
is useful for encoding a block of data that may contain
.Dv NUL Ns 's).
Both forms
.Dv NUL
terminate
d106 1
a106 2
(plus one for the
.Dv NUL ) . 
d109 1
a109 2
the trailing
.Dv NUL ) . 
d123 3
a125 3
except space, tab, and newline are encoded.
(See
.Xr isgraph 3 . )
d143 3
a145 1
Only encode "unsafe" characters.  Unsafe means control
d148 2
a149 2
tab, newline, backspace, bell, and return - in addition
to all graphic characters - unencoded. 
d153 1
a153 1
All forms use the backslash character
d155 1
a155 1
to introduce a special
d163 1
a163 1
bit set), and use caret
d165 2
a166 2
to represent control characters see
.Pf ( Xr iscntrl 3 ) .
d224 1
a224 3
if a
.Dv NUL
character can be encoded as
@


1.4
log
@use Bx macro for BSD versions
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.3 1996/08/19 08:27:34 tholo Exp $
d258 1
a259 1
.Xr unvis 1 ,
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
.\"	$OpenBSD: vis.3,v 1.7 1996/04/23 05:18:06 scottr Exp $
d262 2
a263 1
These functions first appeared in 4.4BSD.
@


1.2
log
@vis.3 man page misuses the word comprise; netbsd pr#2345; from seebs@@taniemarie.solon.com
@
text
@d1 1
a1 1
.\"	$NetBSD: vis.3,v 1.7 1996/04/23 05:18:06 scottr Exp $
a32 2
.\"
.\"     @@(#)vis.3	8.1 (Berkeley) 6/9/93
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: vis.3,v 1.6 1995/02/25 15:40:07 cgd Exp $
d119 1
a119 1
The encoding is a unique, invertible representation comprised entirely of
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
