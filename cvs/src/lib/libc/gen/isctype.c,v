head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.44
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.36
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.40
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.38
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.34
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.32
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.30
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.28
	OPENBSD_5_0:1.11.0.26
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.24
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.22
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.18
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.20
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.16
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.3.0.6
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.09.13.11.38.08;	author guenther;	state Exp;
branches;
next	1.11;
commitid	81YcJcMlfY0FkVFC;

1.11
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.10.22.00.31;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.15.13.53.39;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.14.02.34.39;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.13.23.16.38;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.13.22.39.27;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.27.07.17.07;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.24.38;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.56;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.56;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Wrap <ctype.h> and <wctype.h> so that calls go direct and the symbols not
in standard C are all weak.
Hide several symbols internal to the implementation
@
text
@/*	$OpenBSD: isctype.c,v 1.11 2005/08/08 08:05:34 espie Exp $ */
/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#define _ANSI_LIBRARY
#include <ctype.h>
#include <stdio.h>

#undef isalnum
int
isalnum(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (_U|_L|_N)));
}
DEF_STRONG(isalnum);

#undef isalpha
int
isalpha(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (_U|_L)));
}
DEF_STRONG(isalpha);

#undef isblank
int
isblank(int c)
{
	return (c == ' ' || c == '\t');
}
DEF_STRONG(isblank);

#undef iscntrl
int
iscntrl(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _C));
}
DEF_STRONG(iscntrl);

#undef isdigit
int
isdigit(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _N));
}
DEF_STRONG(isdigit);

#undef isgraph
int
isgraph(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (_P|_U|_L|_N)));
}
DEF_STRONG(isgraph);

#undef islower
int
islower(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _L));
}
DEF_STRONG(islower);

#undef isprint
int
isprint(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (_P|_U|_L|_N|_B)));
}
DEF_STRONG(isprint);

#undef ispunct
int
ispunct(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _P));
}
DEF_STRONG(ispunct);

#undef isspace
int
isspace(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _S));
}
DEF_STRONG(isspace);

#undef isupper
int
isupper(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _U));
}
DEF_STRONG(isupper);

#undef isxdigit
int
isxdigit(int c)
{
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (_N|_X)));
}
DEF_STRONG(isxdigit);

#undef isascii
int
isascii(int c)
{
	return ((unsigned int)c <= 0177);
}
DEF_WEAK(isascii);

#undef toascii
int
toascii(int c)
{
	return (c & 0177);
}

#undef _toupper
int
_toupper(int c)
{
	return (c - 'a' + 'A');
}

#undef _tolower
int
_tolower(int c)
{
	return (c - 'A' + 'a');
}
@


1.11
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d46 1
d54 1
d62 1
d70 1
d78 1
d86 1
d94 1
d102 1
d110 1
d118 1
d126 1
d134 1
d142 1
@


1.10
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d1 1
a34 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: isctype.c,v 1.9 2003/06/10 22:00:31 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.9
log
@Remove an extraneous "& 0xff" (the cast to unsigned char is sufficient).

Use "extern __inline" instead of "static __inline" since the extern
flavor behaves more like a macro (which is what we want).

OK deraadt@@ and tested on all platforms by various folks.
@
text
@d36 1
a36 1
static char rcsid[] = "$OpenBSD: isctype.c,v 1.8 2003/06/02 20:18:34 millert Exp $";
d45 1
a45 2
isalnum(c)
	int c;
d52 1
a52 2
isalpha(c)
	int c;
d59 1
a59 2
isblank(c)
	int c;
d66 1
a66 2
iscntrl(c)
	int c;
d73 1
a73 2
isdigit(c)
	int c;
d80 1
a80 2
isgraph(c)
	int c;
d87 1
a87 2
islower(c)
	int c;
d94 1
a94 2
isprint(c)
	int c;
d101 1
a101 2
ispunct(c)
	int c;
d108 1
a108 2
isspace(c)
	int c;
d115 1
a115 2
isupper(c)
	int c;
d122 1
a122 2
isxdigit(c)
	int c;
d129 1
a129 2
isascii(c)
	int c;
d136 1
a136 2
toascii(c)
	int c;
d143 1
a143 2
_toupper(c)
	int c;
d150 1
a150 2
_tolower(c)
	int c;
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d36 1
a36 1
static char rcsid[] = "$OpenBSD: isctype.c,v 1.7 2002/12/15 13:53:39 millert Exp $";
d48 1
a48 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_U|_L|_N)));
d56 1
a56 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_U|_L)));
d72 1
a72 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _C));
d80 1
a80 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _N));
d88 1
a88 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_P|_U|_L|_N)));
d96 1
a96 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _L));
d104 1
a104 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_P|_U|_L|_N|_B)));
d112 1
a112 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _P));
d120 1
a120 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _S));
d128 1
a128 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _U));
d136 1
a136 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_N|_X)));
@


1.7
log
@Casting to unsigned int in isfoo() causes problems on alpha and
sparc64.  Change cast back to unsigned char but do a bitwise AND
with 0xff to avoid any sign extension weirdness and to make it
impossible for us to overflow _C_ctype_.  The bitwise AND is probably
not needed and may be removed later if this does not trigger compiler bugs.
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d36 1
a36 1
static char rcsid[] = "$OpenBSD: isctype.c,v 1.6 2002/12/14 02:34:39 millert Exp $";
@


1.6
log
@Instead of doing "if (c == EOF) return 0;" use the hook ('?') operator
instead to make these one-liners.  Works around a compiler bug on vax
that affects both the libc and inline versions identically.
@
text
@d40 1
a40 1
static char rcsid[] = "$OpenBSD: isctype.c,v 1.5 2002/12/13 23:16:38 millert Exp $";
d52 1
a52 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & (_U|_L|_N));
d60 1
a60 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & (_U|_L));
d76 1
a76 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _C);
d84 1
a84 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _N);
d92 1
a92 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & (_P|_U|_L|_N));
d100 1
a100 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _L);
d108 1
a108 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & (_P|_U|_L|_N|_B));
d116 1
a116 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _P);
d124 1
a124 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _S);
d132 1
a132 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _U);
d140 1
a140 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & (_N|_X));
@


1.5
log
@Less stupid check for 7-bit ascii in toupper/tolower
Remove useless check for EOF in isascii
@
text
@d40 1
a40 1
static char rcsid[] = "$OpenBSD: isctype.c,v 1.4 2002/12/13 22:39:27 millert Exp $";
d52 1
a52 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & (_U|_L|_N));
d60 1
a60 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & (_U|_L));
d68 1
a68 1
	return(c == ' ' || c == '\t');
d76 1
a76 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & _C);
d84 1
a84 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & _N);
d92 1
a92 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & (_P|_U|_L|_N));
d100 1
a100 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & _L);
d108 1
a108 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & (_P|_U|_L|_N|_B));
d116 1
a116 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & _P);
d124 1
a124 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & _S);
d132 1
a132 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & _U);
d140 1
a140 3
	if (c == EOF)
		return(0);
	return((_ctype_ + 1)[(unsigned int)c] & (_N|_X));
@


1.4
log
@Cast to unsigned int, not unsigned char, since what is being cast is an
int, not a char.
@
text
@d40 1
a40 1
static char rcsid[] = "$OpenBSD: isctype.c,v 1.3 2001/06/27 07:17:07 pjanzen Exp $";
d170 1
a170 3
	if (c == EOF)
		return(0);
	return ((unsigned int)(c) <= 0177);
d178 1
a178 1
	return ((c) & 0177);
@


1.3
log
@Make the functions (which get linked in if <ctype.h> isn't #included) behave
correctly.  Also, don't let them segfault.
@
text
@d40 1
a40 1
static char rcsid[] = "$OpenBSD: isctype.c,v 1.2 1996/08/19 08:24:38 tholo Exp $";
d54 1
a54 1
	return((_ctype_ + 1)[(unsigned char)c] & (_U|_L|_N));
d64 1
a64 1
	return((_ctype_ + 1)[(unsigned char)c] & (_U|_L));
d82 1
a82 1
	return((_ctype_ + 1)[(unsigned char)c] & _C);
d92 1
a92 1
	return((_ctype_ + 1)[(unsigned char)c] & _N);
d102 1
a102 1
	return((_ctype_ + 1)[(unsigned char)c] & (_P|_U|_L|_N));
d112 1
a112 1
	return((_ctype_ + 1)[(unsigned char)c] & _L);
d122 1
a122 1
	return((_ctype_ + 1)[(unsigned char)c] & (_P|_U|_L|_N|_B));
d132 1
a132 1
	return((_ctype_ + 1)[(unsigned char)c] & _P);
d142 1
a142 1
	return((_ctype_ + 1)[(unsigned char)c] & _S);
d152 1
a152 1
	return((_ctype_ + 1)[(unsigned char)c] & _U);
d162 1
a162 1
	return((_ctype_ + 1)[(unsigned char)c] & (_N|_X));
d172 1
a172 1
	return ((unsigned)(c) <= 0177);
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d40 1
a40 1
static char rcsid[] = "$OpenBSD: isctype.c,v 1.13 1995/02/27 04:34:43 cgd Exp $";
d45 1
d52 3
a54 1
	return((_ctype_ + 1)[c] & (_U|_L|_N));
d62 3
a64 1
	return((_ctype_ + 1)[c] & (_U|_L));
d80 3
a82 1
	return((_ctype_ + 1)[c] & _C);
d90 3
a92 1
	return((_ctype_ + 1)[c] & _N);
d100 3
a102 1
	return((_ctype_ + 1)[c] & (_P|_U|_L|_N));
d110 3
a112 1
	return((_ctype_ + 1)[c] & _L);
d120 3
a122 1
	return((_ctype_ + 1)[c] & (_P|_U|_L|_N|_B));
d130 3
a132 1
	return((_ctype_ + 1)[c] & _P);
d140 3
a142 1
	return((_ctype_ + 1)[c] & _S);
d150 3
a152 1
	return((_ctype_ + 1)[c] & _U);
d160 3
a162 1
	return((_ctype_ + 1)[c] & (_N|_X));
d170 2
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: isctype.c,v 1.13 1995/02/27 04:34:43 cgd Exp $	*/

d40 1
a40 5
#if 0
static char sccsid[] = "@@(#)isctype.c	5.2 (Berkeley) 6/1/90";
#else
static char rcsid[] = "$NetBSD: isctype.c,v 1.13 1995/02/27 04:34:43 cgd Exp $";
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
