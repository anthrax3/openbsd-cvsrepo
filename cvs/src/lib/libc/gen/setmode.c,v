head	1.22;
access;
symbols
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.12
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.8
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.4
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.24
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.22
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.20
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.18
	OPENBSD_5_0:1.20.0.16
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.14
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.12
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.8
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.10
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.6
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.4
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.19.0.6
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.4
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.16.0.2
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.9.0.12
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.8
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.6
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.4
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2014.10.11.04.14.35;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	hLHV8uubNTt9y20A;

1.21
date	2013.11.24.23.51.29;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2007.09.02.15.19.16;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.12.18.36.46;	author otto;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.26.20.37.13;	author otto;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.01.13.51.47;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.02.13.58.06;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.01.07.28.01;	author otto;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.23;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.11.18.23.28.34;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.08.14.21.39.33;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.07.25.20.30.04;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.07.23.21.04.07;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.03.07.02.15.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.08.19.08.25.55;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.23.39.25;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.21.39.14;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.58;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@obvious reallocarray() use
ok doug
@
text
@/*	$OpenBSD: setmode.c,v 1.21 2013/11/24 23:51:29 deraadt Exp $	*/
/*	$NetBSD: setmode.c,v 1.15 1997/02/07 22:21:06 christos Exp $	*/

/*
 * Copyright (c) 1989, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Dave Borman at Cray Research, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <ctype.h>
#include <errno.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>

#ifdef SETMODE_DEBUG
#include <stdio.h>
#endif

#define	SET_LEN	6		/* initial # of bitcmd struct to malloc */
#define	SET_LEN_INCR 4		/* # of bitcmd structs to add as needed */

typedef struct bitcmd {
	char	cmd;
	char	cmd2;
	mode_t	bits;
} BITCMD;

#define	CMD2_CLR	0x01
#define	CMD2_SET	0x02
#define	CMD2_GBITS	0x04
#define	CMD2_OBITS	0x08
#define	CMD2_UBITS	0x10

static BITCMD	*addcmd(BITCMD *, int, int, int, u_int);
static void	 compress_mode(BITCMD *);
#ifdef SETMODE_DEBUG
static void	 dumpmode(BITCMD *);
#endif

/*
 * Given the old mode and an array of bitcmd structures, apply the operations
 * described in the bitcmd structures to the old mode, and return the new mode.
 * Note that there is no '=' command; a strict assignment is just a '-' (clear
 * bits) followed by a '+' (set bits).
 */
mode_t
getmode(const void *bbox, mode_t omode)
{
	const BITCMD *set;
	mode_t clrval, newmode, value;

	set = (const BITCMD *)bbox;
	newmode = omode;
	for (value = 0;; set++)
		switch(set->cmd) {
		/*
		 * When copying the user, group or other bits around, we "know"
		 * where the bits are in the mode so that we can do shifts to
		 * copy them around.  If we don't use shifts, it gets real
		 * grundgy with lots of single bit checks and bit sets.
		 */
		case 'u':
			value = (newmode & S_IRWXU) >> 6;
			goto common;

		case 'g':
			value = (newmode & S_IRWXG) >> 3;
			goto common;

		case 'o':
			value = newmode & S_IRWXO;
common:			if (set->cmd2 & CMD2_CLR) {
				clrval =
				    (set->cmd2 & CMD2_SET) ?  S_IRWXO : value;
				if (set->cmd2 & CMD2_UBITS)
					newmode &= ~((clrval<<6) & set->bits);
				if (set->cmd2 & CMD2_GBITS)
					newmode &= ~((clrval<<3) & set->bits);
				if (set->cmd2 & CMD2_OBITS)
					newmode &= ~(clrval & set->bits);
			}
			if (set->cmd2 & CMD2_SET) {
				if (set->cmd2 & CMD2_UBITS)
					newmode |= (value<<6) & set->bits;
				if (set->cmd2 & CMD2_GBITS)
					newmode |= (value<<3) & set->bits;
				if (set->cmd2 & CMD2_OBITS)
					newmode |= value & set->bits;
			}
			break;

		case '+':
			newmode |= set->bits;
			break;

		case '-':
			newmode &= ~set->bits;
			break;

		case 'X':
			if (omode & (S_IFDIR|S_IXUSR|S_IXGRP|S_IXOTH))
				newmode |= set->bits;
			break;

		case '\0':
		default:
#ifdef SETMODE_DEBUG
			(void)printf("getmode:%04o -> %04o\n", omode, newmode);
#endif
			return (newmode);
		}
}

#define	ADDCMD(a, b, c, d)						\
	if (set >= endset) {						\
		BITCMD *newset;						\
		setlen += SET_LEN_INCR;					\
		newset = reallocarray(saveset, setlen, sizeof(BITCMD));	\
		if (newset == NULL) {					\
			free(saveset);					\
			return (NULL);					\
		}							\
		set = newset + (set - saveset);				\
		saveset = newset;					\
		endset = newset + (setlen - 2);				\
	}								\
	set = addcmd(set, (a), (b), (c), (d))

#define	STANDARD_BITS	(S_ISUID|S_ISGID|S_IRWXU|S_IRWXG|S_IRWXO)

void *
setmode(const char *p)
{
	char op, *ep;
	BITCMD *set, *saveset, *endset;
	sigset_t sigset, sigoset;
	mode_t mask, perm, permXbits, who;
	int equalopdone, setlen;
	u_long perml;

	if (!*p) {
		errno = EINVAL;
		return (NULL);
	}

	/*
	 * Get a copy of the mask for the permissions that are mask relative.
	 * Flip the bits, we want what's not set.  Since it's possible that
	 * the caller is opening files inside a signal handler, protect them
	 * as best we can.
	 */
	sigfillset(&sigset);
	(void)sigprocmask(SIG_BLOCK, &sigset, &sigoset);
	(void)umask(mask = umask(0));
	mask = ~mask;
	(void)sigprocmask(SIG_SETMASK, &sigoset, NULL);

	setlen = SET_LEN + 2;
	
	if ((set = calloc((u_int)sizeof(BITCMD), setlen)) == NULL)
		return (NULL);
	saveset = set;
	endset = set + (setlen - 2);

	/*
	 * If an absolute number, get it and return; disallow non-octal digits
	 * or illegal bits.
	 */
	if (isdigit((unsigned char)*p)) {
		perml = strtoul(p, &ep, 8);
		/* The test on perml will also catch overflow. */
		if (*ep != '\0' || (perml & ~(STANDARD_BITS|S_ISTXT))) {
			free(saveset);
			errno = ERANGE;
			return (NULL);
		}
		perm = (mode_t)perml;
		ADDCMD('=', (STANDARD_BITS|S_ISTXT), perm, mask);
		set->cmd = 0;
		return (saveset);
	}

	/*
	 * Build list of structures to set/clear/copy bits as described by
	 * each clause of the symbolic mode.
	 */
	for (;;) {
		/* First, find out which bits might be modified. */
		for (who = 0;; ++p) {
			switch (*p) {
			case 'a':
				who |= STANDARD_BITS;
				break;
			case 'u':
				who |= S_ISUID|S_IRWXU;
				break;
			case 'g':
				who |= S_ISGID|S_IRWXG;
				break;
			case 'o':
				who |= S_IRWXO;
				break;
			default:
				goto getop;
			}
		}

getop:		if ((op = *p++) != '+' && op != '-' && op != '=') {
			free(saveset);
			errno = EINVAL;
			return (NULL);
		}
		if (op == '=')
			equalopdone = 0;

		who &= ~S_ISTXT;
		for (perm = 0, permXbits = 0;; ++p) {
			switch (*p) {
			case 'r':
				perm |= S_IRUSR|S_IRGRP|S_IROTH;
				break;
			case 's':
				/*
				 * If specific bits where requested and
				 * only "other" bits ignore set-id.
				 */
				if (who == 0 || (who & ~S_IRWXO))
					perm |= S_ISUID|S_ISGID;
				break;
			case 't':
				/*
				 * If specific bits where requested and
				 * only "other" bits ignore sticky.
				 */
				if (who == 0 || (who & ~S_IRWXO)) {
					who |= S_ISTXT;
					perm |= S_ISTXT;
				}
				break;
			case 'w':
				perm |= S_IWUSR|S_IWGRP|S_IWOTH;
				break;
			case 'X':
				permXbits = S_IXUSR|S_IXGRP|S_IXOTH;
				break;
			case 'x':
				perm |= S_IXUSR|S_IXGRP|S_IXOTH;
				break;
			case 'u':
			case 'g':
			case 'o':
				/*
				 * When ever we hit 'u', 'g', or 'o', we have
				 * to flush out any partial mode that we have,
				 * and then do the copying of the mode bits.
				 */
				if (perm) {
					ADDCMD(op, who, perm, mask);
					perm = 0;
				}
				if (op == '=')
					equalopdone = 1;
				if (op == '+' && permXbits) {
					ADDCMD('X', who, permXbits, mask);
					permXbits = 0;
				}
				ADDCMD(*p, who, op, mask);
				break;

			default:
				/*
				 * Add any permissions that we haven't already
				 * done.
				 */
				if (perm || (op == '=' && !equalopdone)) {
					if (op == '=')
						equalopdone = 1;
					ADDCMD(op, who, perm, mask);
					perm = 0;
				}
				if (permXbits) {
					ADDCMD('X', who, permXbits, mask);
					permXbits = 0;
				}
				goto apply;
			}
		}

apply:		if (!*p)
			break;
		if (*p != ',')
			goto getop;
		++p;
	}
	set->cmd = 0;
#ifdef SETMODE_DEBUG
	(void)printf("Before compress_mode()\n");
	dumpmode(saveset);
#endif
	compress_mode(saveset);
#ifdef SETMODE_DEBUG
	(void)printf("After compress_mode()\n");
	dumpmode(saveset);
#endif
	return (saveset);
}

static BITCMD *
addcmd(BITCMD *set, int op, int who, int oparg, u_int mask)
{
	switch (op) {
	case '=':
		set->cmd = '-';
		set->bits = who ? who : STANDARD_BITS;
		set++;

		op = '+';
		/* FALLTHROUGH */
	case '+':
	case '-':
	case 'X':
		set->cmd = op;
		set->bits = (who ? who : mask) & oparg;
		break;

	case 'u':
	case 'g':
	case 'o':
		set->cmd = op;
		if (who) {
			set->cmd2 = ((who & S_IRUSR) ? CMD2_UBITS : 0) |
				    ((who & S_IRGRP) ? CMD2_GBITS : 0) |
				    ((who & S_IROTH) ? CMD2_OBITS : 0);
			set->bits = (mode_t)~0;
		} else {
			set->cmd2 = CMD2_UBITS | CMD2_GBITS | CMD2_OBITS;
			set->bits = mask;
		}
	
		if (oparg == '+')
			set->cmd2 |= CMD2_SET;
		else if (oparg == '-')
			set->cmd2 |= CMD2_CLR;
		else if (oparg == '=')
			set->cmd2 |= CMD2_SET|CMD2_CLR;
		break;
	}
	return (set + 1);
}

#ifdef SETMODE_DEBUG
static void
dumpmode(BITCMD *set)
{
	for (; set->cmd; ++set)
		(void)printf("cmd: '%c' bits %04o%s%s%s%s%s%s\n",
		    set->cmd, set->bits, set->cmd2 ? " cmd2:" : "",
		    set->cmd2 & CMD2_CLR ? " CLR" : "",
		    set->cmd2 & CMD2_SET ? " SET" : "",
		    set->cmd2 & CMD2_UBITS ? " UBITS" : "",
		    set->cmd2 & CMD2_GBITS ? " GBITS" : "",
		    set->cmd2 & CMD2_OBITS ? " OBITS" : "");
}
#endif

/*
 * Given an array of bitcmd structures, compress by compacting consecutive
 * '+', '-' and 'X' commands into at most 3 commands, one of each.  The 'u',
 * 'g' and 'o' commands continue to be separate.  They could probably be
 * compacted, but it's not worth the effort.
 */
static void
compress_mode(BITCMD *set)
{
	BITCMD *nset;
	int setbits, clrbits, Xbits, op;

	for (nset = set;;) {
		/* Copy over any 'u', 'g' and 'o' commands. */
		while ((op = nset->cmd) != '+' && op != '-' && op != 'X') {
			*set++ = *nset++;
			if (!op)
				return;
		}

		for (setbits = clrbits = Xbits = 0;; nset++) {
			if ((op = nset->cmd) == '-') {
				clrbits |= nset->bits;
				setbits &= ~nset->bits;
				Xbits &= ~nset->bits;
			} else if (op == '+') {
				setbits |= nset->bits;
				clrbits &= ~nset->bits;
				Xbits &= ~nset->bits;
			} else if (op == 'X')
				Xbits |= nset->bits & ~setbits;
			else
				break;
		}
		if (clrbits) {
			set->cmd = '-';
			set->cmd2 = 0;
			set->bits = clrbits;
			set++;
		}
		if (setbits) {
			set->cmd = '+';
			set->cmd2 = 0;
			set->bits = setbits;
			set++;
		}
		if (Xbits) {
			set->cmd = 'X';
			set->cmd2 = 0;
			set->bits = Xbits;
			set++;
		}
	}
}
@


1.21
log
@most obvious unsigned char casts for ctype
ok jca krw ingo
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.20 2007/09/02 15:19:16 deraadt Exp $	*/
d148 1
a148 1
		newset = realloc(saveset, sizeof(BITCMD) * setlen);	\
@


1.20
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.19 2006/03/12 18:36:46 otto Exp $	*/
d199 1
a199 1
	if (isdigit(*p)) {
@


1.19
log
@Cleanup to avoid a save errno dance; from Andrey Matveev; ok pat@@
jaredy@@ ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.18 2005/10/26 20:37:13 otto Exp $	*/
d190 1
a190 1
	if ((set = malloc((u_int)(sizeof(BITCMD) * setlen))) == NULL)
@


1.18
log
@Always set errno on error. Based on NetBSD. ok jaredy@@ pat@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.17 2005/08/08 08:05:34 espie Exp $	*/
d165 1
a165 1
	BITCMD *set, *saveset = NULL, *endset;
d168 1
a168 1
	int equalopdone, setlen, serrno;
d173 1
a173 1
		goto out;
d191 1
a191 1
		goto out;
d203 1
d205 1
a205 1
			goto out;
d239 1
d241 1
a241 1
			goto out;
a335 5
out:
	serrno = errno;
	free(saveset);
	errno = serrno;
	return (NULL);
@


1.17
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.16 2005/03/01 13:51:47 miod Exp $	*/
a163 1
	int perm, who;
d165 1
a165 1
	BITCMD *set, *saveset, *endset;
d167 2
a168 2
	mode_t mask;
	int equalopdone, permXbits, setlen;
d171 4
a174 2
	if (!*p)
		return (NULL);
d191 1
a191 1
		return (NULL);
a202 1
			free(saveset);
d204 1
a204 1
			return (NULL);
d238 2
a239 2
			free(saveset);
			return (NULL);
d334 5
@


1.16
log
@Set errno right before return(), so that it does not risk being reset
by any other functions we will invoke in-between.

Fix from Andrey Matveev <andrushock@@korovino.net>
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.15 2004/07/02 13:58:06 otto Exp $	*/
a34 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)setmode.c	8.2 (Berkeley) 3/25/94";
#else
static char rcsid[] = "$OpenBSD: setmode.c,v 1.15 2004/07/02 13:58:06 otto Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.15
log
@deregister, better use of strtoul and always set ERANGE on invalid octal
permission. ok millert@@; man page ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.14 2004/07/01 07:28:01 otto Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.14 2004/07/01 07:28:01 otto Exp $";
d210 1
a211 1
			free(saveset);
@


1.14
log
@Initialize cmd when processing octal only. Failing to do that results
in rare cases of bogus permissions; noted when using mtree(8) with
mmap malloc.

ok tdeval@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.13 2004/05/18 02:05:52 jfb Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.13 2004/05/18 02:05:52 jfb Exp $";
d87 2
a88 2
	register const BITCMD *set;
	register mode_t clrval, newmode, value;
d154 1
a154 1
		register BITCMD *newset;				\
d157 2
a158 4
		if (!newset) {						\
			if (saveset)					\
				free(saveset);				\
			saveset = NULL;					\
d172 2
a173 2
	register int perm, who;
	register char op;
d178 1
a178 1
	long perml;
d207 4
a210 2
		perml = strtol(p, NULL, 8);
		if (perml < 0 || (perml & ~(STANDARD_BITS|S_ISTXT))) {
a214 5
		while (*++p)
			if (*p < '0' || *p > '7') {
				free(saveset);
				return (NULL);
			}
d411 2
a412 2
	register BITCMD *nset;
	register int setbits, clrbits, Xbits, op;
@


1.13
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.12 2003/06/02 20:18:34 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.12 2003/06/02 20:18:34 millert Exp $";
d221 1
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.11 2002/02/19 19:39:36 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.11 2002/02/19 19:39:36 millert Exp $";
d172 1
a172 2
setmode(p)
	register const char *p;
d349 1
a349 5
addcmd(set, op, who, oparg, mask)
	BITCMD *set;
	register int oparg, who;
	register int op;
	u_int mask;
d393 1
a393 2
dumpmode(set)
	register BITCMD *set;
d413 1
a413 2
compress_mode(set)
	register BITCMD *set;
@


1.11
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.10 2002/02/16 21:27:23 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.10 2002/02/16 21:27:23 millert Exp $";
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.9 1998/11/18 23:28:34 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.9 1998/11/18 23:28:34 deraadt Exp $";
a88 1
#ifdef __STDC__
a89 5
#else
getmode(bbox, omode)
	const void *bbox;
	mode_t omode;
#endif
@


1.9
log
@negative change strtol()
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.8 1998/08/14 21:39:33 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.8 1998/08/14 21:39:33 deraadt Exp $";
d76 2
a77 2
static BITCMD	*addcmd __P((BITCMD *, int, int, int, u_int));
static void	 compress_mode __P((BITCMD *));
d79 1
a79 1
static void	 dumpmode __P((BITCMD *));
@


1.8
log
@realloc repair
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.7 1997/07/25 20:30:04 mickey Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.7 1997/07/25 20:30:04 mickey Exp $";
d191 1
d220 2
a221 2
		perm = (mode_t)strtol(p, NULL, 8);
		if (perm & ~(STANDARD_BITS|S_ISTXT)) {
d225 1
@


1.7
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.6 1997/07/23 21:04:07 kstailey Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.6 1997/07/23 21:04:07 kstailey Exp $";
d167 4
a170 1
		if (!saveset)						\
d172 1
@


1.6
log
@tabify
@
text
@d1 1
a1 1
/*	$OpenBSD: setmode.c,v 1.5 1997/03/07 02:15:18 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.5 1997/03/07 02:15:18 millert Exp $";
d89 1
a89 1
#if __STDC__
@


1.5
log
@From NetBSD (christos) [fixed typo introduced in comment]:
    If ``who'' was not specified, set the appropriate bits as the manual
    page states.  ``chmod +s foo''  and ``chmod +t dir'' now work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.4 1996/08/19 08:25:55 tholo Exp $";
d198 1
a198 1
        (void)sigprocmask(SIG_BLOCK, &sigset, &sigoset);
d201 1
a201 1
        (void)sigprocmask(SIG_SETMASK, &sigoset, NULL);
@


1.4
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 3
d41 5
a45 1
static char rcsid[] = "$OpenBSD: setmode.c,v 1.13 1996/04/03 19:49:01 jtc Exp $";
d97 1
a97 1
	register BITCMD *set;
d100 1
a100 1
	set = (BITCMD *)bbox;
d268 5
a272 2
				/* If only "other" bits ignore set-id. */
				if (who & ~S_IRWXO)
d276 5
a280 2
				/* If only "other" bits ignore sticky. */
				if (who & ~S_IRWXO) {
d419 1
a419 1
 * 'g' and 'o' commands continue to be separate.  They could probably be 
@


1.3
log
@sync to netbsd 960418
@
text
@a0 3
/*	$OpenBSD$	*/
/*	$NetBSD: setmode.c,v 1.13 1996/04/03 19:49:01 jtc Exp $	*/

d38 1
a38 5
#if 0
static char sccsid[] = "@@(#)setmode.c	8.2 (Berkeley) 3/25/94";
#else
static char rcsid[] = "$NetBSD: setmode.c,v 1.13 1996/04/03 19:49:01 jtc Exp $";
#endif
@


1.2
log
@Prototype internal functions
Do the right thing in presense of __STDC__
@
text
@d1 2
a2 1
/*	$NetBSD: setmode.c,v 1.12 1995/03/23 19:51:13 jtc Exp $	*/
d44 1
a44 1
static char rcsid[] = "$NetBSD: setmode.c,v 1.12 1995/03/23 19:51:13 jtc Exp $";
@


1.1
log
@Initial revision
@
text
@d54 1
d76 1
a76 1
static int	 compress_mode __P((BITCMD *));
d88 3
d92 1
a92 1
	void *bbox;
d94 1
d178 1
a178 1
	register char *p;
d376 1
a376 1
			set->bits = ~0;
d415 1
a415 1
static int
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
