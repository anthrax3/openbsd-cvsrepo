head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.44
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.36
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.40
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.38
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.34
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.32
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.30
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.28
	OPENBSD_5_0:1.10.0.26
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.24
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.22
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.18
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.3.0.6
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.09.19.04.02.21;	author guenther;	state Exp;
branches;
next	1.11;
commitid	xONsWdI5wUyoKz4N;

1.11
date	2015.09.13.11.38.08;	author guenther;	state Exp;
branches;
next	1.10;
commitid	81YcJcMlfY0FkVFC;

1.10
date	2005.08.09.08.36.48;	author kevlo;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.08.05.53.00;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.13.23.16.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.13.22.39.27;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.11.23.01.40;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.27.07.17.09;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.26.56;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Don't wrap initialized variables: binutils appears to be mishandling them
on arm and m88k

problems with optind observed by jsg@@
@
text
@/*	$OpenBSD: toupper_.c,v 1.11 2015/09/13 11:38:08 guenther Exp $ */
/*
 * Written by J.T. Conklin <jtc@@netbsd.org>.
 * Public domain.
 */

#define _ANSI_LIBRARY
#include <ctype.h>
#include <stdio.h>

#include "ctype_private.h"

const short _C_toupper_[1 + CTYPE_NUM_CHARS] = {
	EOF,
	0x00,	0x01,	0x02,	0x03,	0x04,	0x05,	0x06,	0x07,
	0x08,	0x09,	0x0a,	0x0b,	0x0c,	0x0d,	0x0e,	0x0f,
	0x10,	0x11,	0x12,	0x13,	0x14,	0x15,	0x16,	0x17,
	0x18,	0x19,	0x1a,	0x1b,	0x1c,	0x1d,	0x1e,	0x1f,
	0x20,	0x21,	0x22,	0x23,	0x24,	0x25,	0x26,	0x27,
	0x28,	0x29,	0x2a,	0x2b,	0x2c,	0x2d,	0x2e,	0x2f,
	0x30,	0x31,	0x32,	0x33,	0x34,	0x35,	0x36,	0x37,
	0x38,	0x39,	0x3a,	0x3b,	0x3c,	0x3d,	0x3e,	0x3f,
	0x40,	0x41,	0x42,	0x43,	0x44,	0x45,	0x46,	0x47,
	0x48,	0x49,	0x4a,	0x4b,	0x4c,	0x4d,	0x4e,	0x4f,
	0x50,	0x51,	0x52,	0x53,	0x54,	0x55,	0x56,	0x57,
	0x58,	0x59,	0x5a,	0x5b,	0x5c,	0x5d,	0x5e,	0x5f,
	0x60,	'A',	'B',	'C',	'D',	'E',	'F',	'G',
	'H',	'I',	'J',	'K',	'L',	'M',	'N',	'O',
	'P',	'Q',	'R',	'S',	'T',	'U',	'V',	'W',
	'X',	'Y',	'Z',	0x7b,	0x7c,	0x7d,	0x7e,	0x7f,
	0x80,	0x81,	0x82,	0x83,	0x84,	0x85,	0x86,	0x87,
	0x88,	0x89,	0x8a,	0x8b,	0x8c,	0x8d,	0x8e,	0x8f,
	0x90,	0x91,	0x92,	0x93,	0x94,	0x95,	0x96,	0x97,
	0x98,	0x99,	0x9a,	0x9b,	0x9c,	0x9d,	0x9e,	0x9f,
	0xa0,	0xa1,	0xa2,	0xa3,	0xa4,	0xa5,	0xa6,	0xa7,
	0xa8,	0xa9,	0xaa,	0xab,	0xac,	0xad,	0xae,	0xaf,
	0xb0,	0xb1,	0xb2,	0xb3,	0xb4,	0xb5,	0xb6,	0xb7,
	0xb8,	0xb9,	0xba,	0xbb,	0xbc,	0xbd,	0xbe,	0xbf,
	0xc0,	0xc1,	0xc2,	0xc3,	0xc4,	0xc5,	0xc6,	0xc7,
	0xc8,	0xc9,	0xca,	0xcb,	0xcc,	0xcd,	0xce,	0xcf,
	0xd0,	0xd1,	0xd2,	0xd3,	0xd4,	0xd5,	0xd6,	0xd7,
	0xd8,	0xd9,	0xda,	0xdb,	0xdc,	0xdd,	0xde,	0xdf,
	0xe0,	0xe1,	0xe2,	0xe3,	0xe4,	0xe5,	0xe6,	0xe7,
	0xe8,	0xe9,	0xea,	0xeb,	0xec,	0xed,	0xee,	0xef,
	0xf0,	0xf1,	0xf2,	0xf3,	0xf4,	0xf5,	0xf6,	0xf7,
	0xf8,	0xf9,	0xfa,	0xfb,	0xfc,	0xfd,	0xfe,	0xff
};

const short *_toupper_tab_ = _C_toupper_;
#if 0
DEF_STRONG(_toupper_tab_);
#endif

#undef toupper
int
toupper(int c)
{
	if ((unsigned int)c > 255)
		return(c);
	return((_toupper_tab_ + 1)[c]);
}
DEF_STRONG(toupper);
@


1.11
log
@Wrap <ctype.h> and <wctype.h> so that calls go direct and the symbols not
in standard C are all weak.
Hide several symbols internal to the implementation
@
text
@d1 1
a1 1
/*	$OpenBSD: toupper_.c,v 1.10 2005/08/09 08:36:48 kevlo Exp $ */
d50 1
d52 1
@


1.10
log
@use CTYPE_NUM_CHARS instead of harding code the value. ok espie
@
text
@d1 1
a1 1
/*	$OpenBSD: toupper_.c,v 1.9 2005/08/08 08:05:34 espie Exp $ */
d50 1
d60 1
@


1.9
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d13 1
a13 1
const short _C_toupper_[1 + 256] = {
@


1.8
log
@activate LC_CTYPE for 8 bits locale.
Make sure tolower/toupper use the whole 8 bits.

okay deraadt@@
thanks to everyone who tested
@
text
@d1 1
a5 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: toupper_.c,v 1.7 2004/05/18 02:05:52 jfb Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.7
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d7 1
a7 1
static char rcsid[] = "$OpenBSD: toupper_.c,v 1.6 2002/12/13 23:16:38 millert Exp $";
d14 2
d58 1
a58 1
	if ((unsigned int)c > 0177)
@


1.6
log
@Less stupid check for 7-bit ascii in toupper/tolower
Remove useless check for EOF in isascii
@
text
@d7 1
a7 1
static char rcsid[] = "$OpenBSD: toupper_.c,v 1.5 2002/12/13 22:39:27 millert Exp $";
d54 1
a54 2
toupper(c)
	int c;
@


1.5
log
@Cast to unsigned int, not unsigned char, since what is being cast is an
int, not a char.
@
text
@d7 1
a7 1
static char rcsid[] = "$OpenBSD: toupper_.c,v 1.4 2002/12/11 23:01:40 millert Exp $";
d57 1
a57 1
	if (c != (c & 0177))
@


1.4
log
@Convert ctype.h macros into inline functions.  This fixes the issues we
currently have with the macro versions and makes the ctype.h versions
100% identical to what is in libc.
Discussed with pjanzen@@ and OK'd by deraadt@@.
@
text
@d7 1
a7 1
static char rcsid[] = "$OpenBSD: toupper_.c,v 1.3 2001/06/27 07:17:09 pjanzen Exp $";
d57 1
a57 1
	if (c != (unsigned char) c)
@


1.3
log
@Make the functions (which get linked in if <ctype.h> isn't #included) behave
correctly.  Also, don't let them segfault.
@
text
@d7 1
a7 1
static char rcsid[] = "$OpenBSD: toupper_.c,v 1.2 1996/08/19 08:26:56 tholo Exp $";
d10 2
a12 1
#include <ctype.h>
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d7 1
a7 1
static char rcsid[] = "$OpenBSD: toupper_.c,v 1.7 1995/05/11 23:04:09 jtc Exp $";
a12 4
#if EOF != -1
#error "EOF != -1"
#endif

d56 2
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: toupper_.c,v 1.7 1995/05/11 23:04:09 jtc Exp $	*/

d6 3
a8 3
#if defined(LIBC_RCS) && !defined(lint)
static char rcsid[] = "$NetBSD: toupper_.c,v 1.7 1995/05/11 23:04:09 jtc Exp $";
#endif /* LIBC_RCS and not lint */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
