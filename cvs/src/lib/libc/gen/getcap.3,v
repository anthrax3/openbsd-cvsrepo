head	1.38;
access;
symbols
	OPENBSD_6_1_BASE:1.38
	OPENBSD_6_0:1.38.0.4
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.38.0.2
	OPENBSD_5_9_BASE:1.38
	OPENBSD_5_8:1.37.0.8
	OPENBSD_5_8_BASE:1.37
	OPENBSD_5_7:1.37.0.2
	OPENBSD_5_7_BASE:1.37
	OPENBSD_5_6:1.37.0.4
	OPENBSD_5_6_BASE:1.37
	OPENBSD_5_5:1.36.0.4
	OPENBSD_5_5_BASE:1.36
	OPENBSD_5_4:1.35.0.2
	OPENBSD_5_4_BASE:1.35
	OPENBSD_5_3:1.34.0.6
	OPENBSD_5_3_BASE:1.34
	OPENBSD_5_2:1.34.0.4
	OPENBSD_5_2_BASE:1.34
	OPENBSD_5_1_BASE:1.34
	OPENBSD_5_1:1.34.0.2
	OPENBSD_5_0:1.33.0.6
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.33.0.4
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.33.0.2
	OPENBSD_4_8_BASE:1.33
	OPENBSD_4_7:1.32.0.2
	OPENBSD_4_7_BASE:1.32
	OPENBSD_4_6:1.31.0.12
	OPENBSD_4_6_BASE:1.31
	OPENBSD_4_5:1.31.0.8
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.31.0.6
	OPENBSD_4_4_BASE:1.31
	OPENBSD_4_3:1.31.0.4
	OPENBSD_4_3_BASE:1.31
	OPENBSD_4_2:1.31.0.2
	OPENBSD_4_2_BASE:1.31
	OPENBSD_4_1:1.30.0.4
	OPENBSD_4_1_BASE:1.30
	OPENBSD_4_0:1.30.0.2
	OPENBSD_4_0_BASE:1.30
	OPENBSD_3_9:1.29.0.4
	OPENBSD_3_9_BASE:1.29
	OPENBSD_3_8:1.29.0.2
	OPENBSD_3_8_BASE:1.29
	OPENBSD_3_7:1.28.0.2
	OPENBSD_3_7_BASE:1.28
	OPENBSD_3_6:1.27.0.2
	OPENBSD_3_6_BASE:1.27
	OPENBSD_3_5:1.26.0.4
	OPENBSD_3_5_BASE:1.26
	OPENBSD_3_4:1.26.0.2
	OPENBSD_3_4_BASE:1.26
	OPENBSD_3_3:1.23.0.4
	OPENBSD_3_3_BASE:1.23
	OPENBSD_3_2:1.23.0.2
	OPENBSD_3_2_BASE:1.23
	OPENBSD_3_1:1.21.0.4
	OPENBSD_3_1_BASE:1.21
	OPENBSD_3_0:1.21.0.2
	OPENBSD_3_0_BASE:1.21
	OPENBSD_2_9:1.20.0.2
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_8:1.19.0.4
	OPENBSD_2_8_BASE:1.19
	OPENBSD_2_7:1.19.0.2
	OPENBSD_2_7_BASE:1.19
	OPENBSD_2_6:1.16.0.2
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.38
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.37;
commitid	QU70QaxjyBAtj4Rv;

1.37
date	2014.07.12.14.43.32;	author yasuoka;	state Exp;
branches;
next	1.36;
commitid	LFpaUeRuu0UMEt9O;

1.36
date	2014.01.20.05.07.48;	author schwarze;	state Exp;
branches;
next	1.35;

1.35
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.34;

1.34
date	2011.09.14.15.29.15;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2010.07.27.07.04.04;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2010.02.18.13.13.39;	author schwarze;	state Exp;
branches;
next	1.31;

1.31
date	2007.05.31.19.19.28;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.09.19.08.09;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2005.07.22.03.16.58;	author jaredy;	state Exp;
branches;
next	1.28;

1.28
date	2005.02.25.03.12.43;	author cloder;	state Exp;
branches;
next	1.27;

1.27
date	2004.04.16.10.48.39;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2003.05.30.14.00.32;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2003.05.03.19.04.40;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2002.06.28.01.10.48;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.21;

1.21
date	2001.06.18.18.11.14;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2000.12.24.00.30.47;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	2000.04.18.03.01.26;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	2000.03.06.21.46.56;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2000.03.04.22.19.30;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	99.07.09.13.35.16;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.07.02.16.57.48;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.06.05.03.44.53;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.06.04.01.30.10;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.06.03.10.03.20;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.05.29.22.38.34;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.05.29.16.08.55;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.05.27.14.12.54;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.10.17.56.28;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.02.27.21.55.04;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.02.25.21.40.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.08.29.21.11.25;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.06.08.17.17.04;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.05.30.07.48.24;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.23.07;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.54;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.54;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.38
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@.\"	$OpenBSD: getcap.3,v 1.37 2014/07/12 14:43:32 yasuoka Exp $
.\"
.\" Copyright (c) 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Casey Leedom of Lawrence Livermore National Laboratory.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: July 12 2014 $
.Dt CGETENT 3
.Os
.Sh NAME
.Nm cgetent ,
.Nm cgetset ,
.Nm cgetmatch ,
.Nm cgetcap ,
.Nm cgetnum ,
.Nm cgetstr ,
.Nm cgetustr ,
.Nm cgetfirst ,
.Nm cgetnext ,
.Nm cgetclose ,
.Nm cgetusedb
.Nd capability database access routines
.Sh SYNOPSIS
.In stdlib.h
.Ft int
.Fn cgetent "char **buf" "char **db_array" "const char *name"
.Ft int
.Fn cgetset "const char *ent"
.Ft int
.Fn cgetmatch "char *buf" "const char *name"
.Ft char *
.Fn cgetcap "char *buf" "const char *cap" "int type"
.Ft int
.Fn cgetnum "char *buf" "const char *cap" "long *num"
.Ft int
.Fn cgetstr "char *buf" "const char *cap" "char **str"
.Ft int
.Fn cgetustr "char *buf" "const char *cap" "char **str"
.Ft int
.Fn cgetfirst "char **buf" "char **db_array"
.Ft int
.Fn cgetnext "char **buf" "char **db_array"
.Ft int
.Fn cgetclose "void"
.Ft int
.Fn cgetusedb "int usedb"
.Sh DESCRIPTION
The
.Fn cgetent
function extracts the capability record
.Fa name
from the database specified by the null-terminated
file array
.Fa db_array
and returns a pointer to a
copy of it in
.Fa buf .
.Fn cgetent
will first look for files ending in
.Dq .db
(see
.Xr cap_mkdb 1 )
before accessing the
.Tn ASCII
version of the capability database.
.Fa buf
must be retained through all subsequent calls to
.Fn cgetmatch ,
.Fn cgetcap ,
.Fn cgetnum ,
.Fn cgetstr ,
and
.Fn cgetustr ,
but may then be
.Xr free 3 Ns \&'d.
On success 0 is returned, 1 if the returned
record contains an unresolved
.Ic tc
expansion,
\-1 if the requested record couldn't be found,
\-2 if a system error occurred (couldn't open or read a file,
for example) also
setting
.Va errno ,
and \-3 if a potential reference loop is detected (see
.Ic tc=
comments below).
.Pp
.Fn cgetset
enables the addition of a character buffer containing a single capability
record entry
to the capability database.
Conceptually, the entry is added as the first
.Dq file
in the database, and
is therefore searched first on the call to
.Fn cgetent .
The entry is passed in
.Fa ent .
If
.Fa ent
is
.Dv NULL ,
the current entry is removed from the database.
.Fn cgetset
must precede the database traversal.
It must be called before
.Fn cgetent .
If a sequential access is being performed (see below), it must be called
before the first sequential access call
.Pf ( Fn cgetfirst
or
.Fn cgetnext ) ,
or be directly preceded by a
.Fn cgetclose
call.
On success 0 is returned and \-1 on failure.
.Pp
.Fn cgetmatch
will return 0 if
.Fa name
is one of the names of the capability record
.Fa buf ,
\-1 if
not.
.Pp
.Fn cgetcap
searches the capability record
.Fa buf
for the capability
.Fa cap
with type
.Fa type .
A
.Fa type
is specified using any single character.
If a colon
.Pq Sq \&:
is used, an
untyped capability will be searched for (see below for explanation of
types).
A pointer to the value of
.Fa cap
in
.Fa buf
is returned on success or
.Dv NULL
if the requested capability couldn't be
found.
The end of the capability value is signaled by a
.Sq \&:
or
.Tn ASCII
NUL
(see below for capability database syntax).
.Pp
.Fn cgetnum
retrieves the value of the numeric capability
.Fa cap
from the capability record pointed to by
.Fa buf .
The numeric value is returned in the
.Ft long
pointed to by
.Fa num .
On success 0 is returned, \-1 if the requested numeric capability couldn't
be found.
.Pp
.Fn cgetstr
retrieves the value of the string capability
.Fa cap
from the capability record pointed to by
.Fa buf .
A pointer to a decoded, NUL-terminated,
.Xr malloc 3 Ns \&'d
copy of the string is returned in the
.Ft char *
pointed to by
.Fa str .
The number of characters in the decoded string (not including the trailing
NUL) is returned on success, \-1 if the requested string capability couldn't
be found, or \-2 if a system error was encountered (storage allocation
failure).
.Pp
.Fn cgetustr
is identical to
.Fn cgetstr
except that it does not expand special characters, but rather returns each
character of the capability string literally.
.Pp
.Fn cgetfirst
and
.Fn cgetnext
comprise a function group that provides for sequential
access of the null-terminated array of file names,
.Fa db_array .
.Fn cgetfirst
returns the first record in the database and resets the access
to the first record.
.Fn cgetnext
returns the next record in the database with respect to the
record returned by the previous
.Fn cgetfirst
or
.Fn cgetnext
call.
If there is no such previous call, the first record in the database is
returned.
Each record is returned in a
.Xr malloc 3 Ns \&'d
copy pointed to by
.Fa buf .
.Ic tc
expansion is done (see
.Ic tc=
comments below).
Upon completion of the database 0 is returned; 1 is returned upon successful
return of a record with possibly more remaining (the end of the database has
not been reached yet); 2 is returned if the record contains an unresolved
.Ic tc
expansion; \-1 is returned if an system error occurred; and \-2
is returned if a potential reference loop is detected (see
.Ic tc=
comments below).
Upon completion of database (0 return), the database is closed.
.Pp
.Fn cgetclose
closes the file descriptor and resets state used for sequential access.
If neither the
.Fn cgetfirst
nor the
.Fn cgetnext
functions have been called,
.Fn cgetclose
has no effect.
Note that it does not erase the buffer pushed by a call to
.Fn cgetset ,
nor does it free the buffer allocated by
.Fn cgetent .
.Pp
.Fn cgetusedb
allows the user to specify whether to use or ignore database files ending in
.Dq .db .
If
.Ar usedb
is zero, files ending in
.Dq .db
will be ignored.
If
.Ar usedb
is non-zero, files ending in
.Dq .db
will be used in preference to the text version.
The default is to process
.Dq .db
files.
.Fn cgetusedb
returns the previous setting.
.Ss Capability database syntax
Capability databases are normally
.Tn ASCII
and may be edited with standard
text editors.
Blank lines and lines beginning with a
.Sq \&#
are comments and are ignored.
Lines ending with a
.Sq \|\e
indicate that the next line is a continuation of the current line; the
.Sq \|\e
and following newline are ignored.
Long lines are usually continued onto several physical
lines by ending each line except the last with a
.Sq \|\e .
.Pp
Capability databases consist of a series of records, one per logical
line.
Each record contains a variable number of colon-separated fields
(capabilities).
Empty fields consisting entirely of whitespace
characters (spaces and tabs) are ignored.
.Pp
The first capability of each record specifies its names, separated by
.Sq \&|
characters.
These names are used to reference records in the database.
By convention, the last name is usually a comment and is not intended as
a lookup tag.
For example, the
.Dq vt220
record from the
.Nm termcap
database begins with
.Pp
.Dl "vt220\||\|vt200\||\|dec vt220:"
.Pp
giving two names that can be used to access this record.
.Pp
The remaining non-empty capabilities describe a set of (name, value)
bindings, consisting of a name optionally followed by a typed value:
.Bl -column "nameTvalue" -offset indent
.It name Ta "typeless [boolean] capability"
.Em name No "is present [true]"
.It name Ns Em \&T Ns value Ta capability
.Pq Em name , \&T
has value
.Em value
.It name@@ Ta "no capability" Em name No exists
.It name Ns Em T Ns \&@@ Ta capability
.Pq Em name , T
does not exist
.El
.Pp
Names consist of one or more characters.
Names may contain any character except
.Sq \&: ,
but it's usually best to restrict them to the printable
characters and avoid use of graphics like
.Sq \&# ,
.Sq \&= ,
.Sq \&% ,
.Sq \&@@ ,
etc.
Types are single characters used to separate capability names from their
associated typed values.
Types may be any character except a
.Sq \&: .
Typically, graphics like
.Sq \&# ,
.Sq \&= ,
.Sq \&% ,
etc. are used.
Values may be any number of characters and may contain any character except
.Sq \&: .
.Ss Capability database semantics
Capability records describe a set of (name, value) bindings.
Names may have multiple values bound to them.
Different values for a name are distinguished by their
.Fa types .
.Fn cgetcap
will return a pointer to a value of a name given the capability name and
the type of the value.
.Pp
The types
.Sq \&#
and
.Sq \&=
are conventionally used to denote numeric and
string typed values, but no restriction on those types is enforced.
The functions
.Fn cgetnum
and
.Fn cgetstr
can be used to implement the traditional syntax and semantics of
.Sq \&#
and
.Sq \&= .
Typeless capabilities are typically used to denote boolean objects with
presence or absence indicating truth and false values respectively.
This interpretation is conveniently represented by:
.Pp
.Dl "(cgetcap(buf, name, ':') != NULL)"
.Pp
A special capability,
.Ic tc= name ,
is used to indicate that the record specified by
.Fa name
should be substituted for the
.Ic tc
capability.
.Ic tc
capabilities may interpolate records which also contain
.Ic tc
capabilities and more than one
.Ic tc
capability may be used in a record.
A
.Ic tc
expansion scope (i.e., where the argument is searched for) contains the
file in which the
.Ic tc
is declared and all subsequent files in the file array.
.Pp
When a database is searched for a capability record, the first matching
record in the search is returned.
When a record is scanned for a
capability, the first matching capability is returned; the capability
.Ic :nameT@@:
will hide any following definition of a value of type
.Em T
for
.Fa name ;
and the capability
.Ic :name@@:
will prevent any following values of
.Fa name
from being seen.
.Pp
These features combined with
.Ic tc
capabilities can be used to generate variations of other databases and
records by either adding new capabilities, overriding definitions with new
definitions, or hiding following definitions via
.Sq \&@@
capabilities.
.Ss cgetnum() and cgetstr() syntax and semantics
Two types are predefined by
.Fn cgetnum
and
.Fn cgetstr :
.Bl -column "nameXnumber" -offset indent
.It Em name Ns \&# Ns Em number Ta numeric
capability
.Em name
has value
.Em number
.It Em name Ns = Ns Em string Ta "string capability"
.Em name
has value
.Em string
.It Em name Ns \&#@@ Ta "the numeric capability"
.Em name
does not exist
.It Em name Ns \&=@@ Ta "the string capability"
.Em name
does not exist
.El
.Pp
Numeric capability values may be given in one of three numeric bases.
If the number starts with either
.Ql 0x
or
.Ql 0X
it is interpreted as a hexadecimal number (both upper and lower case a-f
may be used to denote the extended hexadecimal digits).
Otherwise, if the number starts with a
.Ql 0
it is interpreted as an octal number.
Otherwise the number is interpreted as a decimal number.
.Pp
String capability values may contain any character.
Non-printable
.Dv ASCII
codes, new lines, and colons may be conveniently represented by the use
of escape sequences:
.Bl -column "\e\|X,X\e\|X" "(ASCII octal nnn)" -offset indent
.It ^X	('\fIX\fP'\~&\~037)	control-\fIX\fP
.It \e\|b,\~\e\|B	(ASCII\~010)	backspace
.It \e\|t,\~\e\|T	(ASCII\~011)	tab
.It \e\|n,\~\e\|N	(ASCII\~012)	line\~feed\~(newline)
.It \e\|f,\~\e\|F	(ASCII\~014)	form\~feed
.It \e\|r,\~\e\|R	(ASCII\~015)	carriage\~return
.It \e\|e,\~\e\|E	(ASCII\~027)	escape
.It \e\|c,\~\e\|C	(:)	colon
.It \e\|\e	(\e\|)	backslash
.It \e\|^	(^)	caret
.It \e\|\fInnn\fP	(ASCII\~octal\~\fInnn\fP)
.El
.Pp
A
.Sq \|\e
followed by up to three octal digits directly specifies
the numeric code for a character.
The use of
.Tn ASCII
NULs, while easily
encoded, causes all sorts of problems and must be used with care since
NULs are typically used to denote the end of strings; many applications
use
.Sq \e\|200
to represent a NUL.
.Sh EXAMPLES
.Bd -unfilled -offset indent
example\||\|an example of binding multiple values to names:\e
	:foo%bar:foo^blah:foo@@:\e
	:abc%xyz:abc^frap:abc$@@:\e
	:tc=more:
.Ed
.Pp
The capability foo has two values bound to it (bar of type
.Sq \&%
and blah of
type
.Sq \&^ )
and any other value bindings are hidden.
The capability abc also has two values bound but only a value of type
.Sq \&$
is prevented from
being defined in the capability record more.
.Bd -unfilled -offset indent
file1:
 	new\||\|new_record\||\|a modification of "old":\e
		:fript=bar:who-cares@@:tc=old:blah:tc=extensions:
file2:
	old\||\|old_record\||\|an old database record:\e
		:fript=foo:who-cares:glork#200:
.Ed
.Pp
The records are extracted by calling
.Fn cgetent
with file1 preceding file2.
In the capability record new in file1, fript=bar overrides the definition
of fript=foo interpolated from the capability record old in file2,
who-cares@@ prevents the definition of any who-cares definitions in old
from being seen, glork#200 is inherited from old, and blah and anything
defined by the record extensions is added to those definitions in old.
Note that the position of the fript=bar and who-cares@@ definitions before
tc=old is important here.
If they were after, the definitions in old would take precedence.
.Sh DIAGNOSTICS
.Fn cgetent ,
.Fn cgetset ,
.Fn cgetmatch ,
.Fn cgetnum ,
.Fn cgetstr ,
.Fn cgetustr ,
.Fn cgetfirst ,
and
.Fn cgetnext
return a value greater than or equal to 0 on success and a value less
than 0 on failure.
.Fn cgetcap
returns a character pointer on success and a
.Dv NULL
on failure.
.Pp
.Fn cgetent
and
.Fn cgetset
may fail and set
.Va errno
for any of the errors specified for the library functions
.Xr fopen 3 ,
.Xr fclose 3 ,
.Xr open 2 ,
and
.Xr close 2 .
.Pp
.Fn cgetent ,
.Fn cgetset ,
.Fn cgetstr ,
and
.Fn cgetustr
may fail and set
.Va errno
as follows:
.Bl -tag -width Er
.It Bq Er ENOMEM
No memory to allocate.
.El
.Sh SEE ALSO
.Xr cap_mkdb 1 ,
.Xr malloc 3
.Sh BUGS
Colon
.Pq Sq \&:
characters
or vertical bar
.Pq Sq |
characters cannot be used in names.
.Pp
There are no checks for
.Ic tc= name
loops in
.Fn cgetent .
.Pp
The buffer added to the database by a call to
.Fn cgetset
is not unique to the database but is rather prepended to any database used.
@


1.37
log
@Correct the sentence in the BUGS section.  Colon chars are usable as a
string value and usage of it in type is documented in the other section.

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.36 2014/01/20 05:07:48 schwarze Exp $
d33 2
a34 2
.Dd $Mdocdate: January 20 2014 $
.Dt GETCAP 3
@


1.36
log
@Obvious .Xr fixes, found while testing mandocdb(8).
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.35 2013/06/05 03:39:22 tedu Exp $
d33 1
a33 1
.Dd $Mdocdate: June 5 2013 $
d583 4
a586 1
characters cannot be used in names, types, or values.
@


1.35
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.34 2011/09/14 15:29:15 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: September 14 2011 $
d101 1
a101 1
.Xr free Ns \&'d.
d201 1
a201 1
.Xr malloc Ns \&'d
d236 1
a236 1
.Xr malloc Ns \&'d
@


1.34
log
@update vt100 example to vt200, as vt100 apparently is no longer in the
termcap database;

from Nils Anspach
ok nicm
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.33 2010/07/27 07:04:04 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: July 27 2010 $
d50 1
a50 1
.Fd #include <stdlib.h>
@


1.33
log
@fix some spacing issues; noted by kristaps
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.32 2010/02/18 13:13:39 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: February 18 2010 $
d316 1
a316 1
.Dq vt100
d319 1
a319 1
database begins:
d321 1
a321 1
.Dl "d0\||\|vt100\||\|vt100-am\||\|vt100am\||\|dec vt100:"
d323 1
a323 1
giving four names that can be used to access the record.
@


1.32
log
@Every .Bl requires .It, even when using -column.
Found by and unbreaking the build with mandoc(1).
While here, properly escape blanks inside columns
and use "backslash" instead of "back slash".
OK jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.31 2007/05/31 19:19:28 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d438 1
a438 2
.Sm off
.It Em name No \&# Em number Ta numeric
d443 1
a443 1
.It Em name No = Em string Ta "string capability"
d447 1
a447 1
.It Em name No \&#@@ Ta "the numeric capability"
d450 1
a450 1
.It Em name No \&=@@ Ta "the string capability"
@


1.31
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.30 2006/05/09 19:08:09 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d474 11
a484 11
^X	('\fIX\fP' & 037)	control-\fIX\fP
\e\|b, \e\|B	(ASCII 010)	backspace
\e\|t, \e\|T	(ASCII 011)	tab
\e\|n, \e\|N	(ASCII 012)	line feed (newline)
\e\|f, \e\|F	(ASCII 014)	form feed
\e\|r, \e\|R	(ASCII 015)	carriage return
\e\|e, \e\|E	(ASCII 027)	escape
\e\|c, \e\|C	(:)	colon
\e\|\e	(\e\|)	back slash
\e\|^	(^)	caret
\e\|\fInnn\fP	(ASCII octal \fInnn\fP)
@


1.30
log
@typo from jan niemann; ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.29 2005/07/22 03:16:58 jaredy Exp $
d33 1
a33 1
.Dd April 19, 1994
@


1.29
log
@- sync prototypes and header file excerpts to reality
- many grammar, punctuation, macro, layout, spelling/typos,
  rewording, etc. fixes
- avoid first person
- sprinkle crossrefs where relevant

help & ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.28 2005/02/25 03:12:43 cloder Exp $
d388 1
a388 1
.Dl "(getcap(buf, name, ':') != NULL)"
@


1.28
log
@Be correct in our man pages when talking about NUL termination (that is,
termination with '\0') vs. null termination.
Input from krw@@, jaredy@@, jmc@@.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.27 2004/04/16 10:48:39 jmc Exp $
d243 3
a245 3
Upon completion of the database 0 is returned, 1 is returned upon successful
return of record with possibly more remaining (we haven't reached the end of
the database yet), 2 is returned if the record contains an unresolved
d247 1
a247 1
expansion, \-1 is returned if an system error occurred, and \-2
d251 1
a251 1
Upon completion of database (0 return) the database is closed.
d327 1
a327 1
.Bl -column "nameTvalue"
d437 1
a437 1
.Bl -column "nameXnumber"
d473 1
a473 1
.Bl -column "\e\|X,X\e\|X" "(ASCII octal nnn)"
@


1.27
log
@more display/list fixes, and a little whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.26 2003/06/02 20:18:34 millert Exp $
d200 1
a200 1
A pointer to a decoded, null-terminated,
@


1.26
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.25 2003/05/30 14:00:32 jmc Exp $
a516 1
.Pp
@


1.25
log
@- clean up macro abuse
- section reorder
- merge COMPATIBILITY
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.24 2003/05/03 19:04:40 jmc Exp $
d17 1
a17 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.24
log
@typos;
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.23 2002/06/28 01:10:48 millert Exp $
d269 1
a269 1
.Fn cgetent.
@


1.23
log
@Lies, damn lies and getcap(3).  The description for cgetclose() was
completely wrong and has apparently caused people to believe that
cgetclose() frees memory allocated by cgetent() which is *not* the
case.
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.22 2002/04/30 16:31:42 mpech Exp $
d272 1
a272 1
allows the user to specify whether use or ignore database files ending in
d330 1
a330 1
bindings, consisting of a names optionally followed by a typed values:
d493 1
a493 1
may be followed by up to three octal digits directly specifies
@


1.22
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.21 2001/06/18 18:11:14 millert Exp $
d258 8
a265 2
closes the sequential access and frees any memory and file descriptors
being used.
d267 3
a269 1
.Fn cgetset .
@


1.21
log
@Add new cgetusedb() function to toggle reading of .db files in getcap(3).
Needed for cap_mkdb to really DRT when given several input files or
an output file with a different name from the input file.
cvs: ----------------------------------------------------------------------
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.20 2000/12/24 00:30:47 aaron Exp $
d263 1
a263 1
.Fn cgetusedb 
@


1.20
log
@Various repairs, mostly to get rid of short lines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.19 2000/04/18 03:01:26 aaron Exp $
d50 2
a51 1
.Nm cgetclose
d75 2
d262 19
@


1.19
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.18 2000/03/06 21:46:56 aaron Exp $
d77 1
a77 2
function
extracts the capability record
d222 1
a222 2
access of the null-terminated
array of file names,
d266 1
a266 2
are comments
and ignored.
d269 1
a269 2
indicate that the next line
is a continuation of the current line; the
d271 1
a271 2
and following newline
are ignored.
@


1.18
log
@Do not leave `(' characters dangling at the end of lines; instead, use the
appropriate mdoc macros to handle these cases.
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.17 2000/03/04 22:19:30 aaron Exp $
d134 2
a135 1
must precede the database traversal.  It must be called before
d164 2
a165 1
is specified using any single character.  If a colon
d169 2
a170 1
types).  A pointer to the value of
d177 2
a178 1
found.  The end of the capability value is signaled by a
d235 2
a236 1
call.  If there is no such previous call, the first record in the database is
d246 1
a246 1
Upon completion of the database 0 is returned,  1 is returned upon successful
d258 2
a259 1
being used.  Note that it does not erase the buffer pushed by a call to
d265 2
a266 1
text editors.  Blank lines and lines beginning with a
d269 2
a270 1
and ignored.  Lines ending with a
d276 2
a277 1
are ignored.  Long lines are usually continued onto several physical
d282 4
a285 3
line.  Each record contains a variable number of
colon-separated fields
(capabilities).  Empty fields consisting entirely of whitespace
d290 2
a291 1
characters.  These names are used to reference records in the database.
d293 2
a294 1
a lookup tag.  For example, the
d319 2
a320 2
Names consist of one or more characters.  Names may contain any character
except
d328 4
a331 3
etc.  Types
are single characters used to separate capability names from their
associated typed values.  Types may be any character except a
d337 2
a338 2
etc. are used.  Values may be any
number of characters and may contain any character except
d341 3
a343 3
Capability records describe a set of (name, value) bindings.  Names may
have multiple values bound to them.  Different values for a name are
distinguished by their
d354 2
a355 2
string typed values, but no restriction on those types is enforced.  The
functions
d381 2
a382 1
capability may be used in a record.  A
d390 2
a391 1
record in the search is returned.  When a record is scanned for a
d447 2
a448 1
String capability values may contain any character.  Non-printable
d469 2
a470 1
the numeric code for a character.  The use of
d491 2
a492 2
and any other value bindings are hidden.  The capability abc
also has two values bound but only a value of type
d515 2
a516 2
tc=old is important here.  If they were after, the definitions in old
would take precedence.
@


1.17
log
@In Unix land we prefer "whitespace" to "white space" or "white-space". At
least, this is the impression I get from looking at a lot of Perl docs.
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.16 1999/07/09 13:35:16 aaron Exp $
d137 2
a138 2
before the first sequential access call (
.Fn cgetfirst
d140 2
a141 2
.Fn cgetnext
), or be directly preceded by a
@


1.16
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.15 1999/07/02 16:57:48 aaron Exp $
d275 1
a275 1
(capabilities).  Empty fields consisting entirely of white space
@


1.15
log
@remove extra comma from .Dd arguments: "Month ##, ####" is the correct format,
not "Month, ##, ####"
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.14 1999/06/05 03:44:53 aaron Exp $
d38 1
a38 1
.Dt GETCAP 3 
d85 1
a85 1
.Fa buf .  
d87 2
a88 2
will first look for files ending in 
.Dq .db 
d105 2
a106 2
record contains an unresolved 
.Ic tc 
d112 1
a112 1
.Va errno , 
d117 1
a117 1
.Fn cgetset 
d120 1
a120 1
to the capability database.  
d124 1
a124 1
is therefore searched first on the call to 
d126 1
a126 1
The entry is passed in 
d128 2
a129 2
If 
.Fa ent 
d132 2
a133 2
the current entry is removed from the database.  
.Fn cgetset 
d141 1
a141 1
), or be directly preceded by a 
d210 2
a211 2
is identical to 
.Fn cgetstr 
d222 1
a222 1
.Fn cgetfirst 
d225 1
a225 1
.Fn cgetnext 
d230 1
a230 1
.Fn cgetnext 
d234 3
a236 3
.Xr malloc Ns \&'d 
copy pointed to by 
.Fa buf .  
d239 1
a239 1
.Ic tc= 
d242 1
a242 1
return of record with possibly more remaining (we haven't reached the end of 
d244 1
a244 1
.Ic tc 
d246 1
a246 1
is returned if a potential reference loop is detected (see 
d251 3
a253 3
.Fn cgetclose 
closes the sequential access and frees any memory and file descriptors 
being used.  Note that it does not erase the buffer pushed by a call to 
d410 1
a410 1
has value 
d518 1
a518 1
and 
d520 1
a520 1
may fail and set 
d523 1
a523 1
.Xr fopen 3 , 
d526 1
a526 1
and 
d533 3
a535 3
.Fn cgetustr 
may fail and set 
.Va errno 
d554 2
a555 2
The buffer added to the database by a call to 
.Fn cgetset 
@


1.14
log
@change some .Em/.Va to .Li, looks nicer
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.13 1999/06/04 01:30:10 aaron Exp $
d37 1
a37 1
.Dd April, 19, 1994
@


1.13
log
@After some constructive criticism from pjanzen@@ and some e-mail tag:

   - only use the .Dv NULL form when referring explicitly to a function
     argument or return value
   - otherwise, use these forms:
        o non-null
        o null-terminated (hyphenated form for predicate adjective)
        o else, null terminated, or null terminate, whichever the case
        o null pointer, null byte, null string, etc.
   - may use NUL to refer to an ASCII NUL, but it doesn't need a .Tn macro

In general, capitalizing the word "null" everywhere is unnecessary and makes
the man pages harder to read. The above is consistent with popular programming
texts (i.e., K&R, Stevens).
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.12 1999/06/03 10:03:20 aaron Exp $
d283 1
a283 1
.Em vt100
@


1.12
log
@use \-1, not -1, to change the meaning of `-' to minus sign from hyphen;
pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.11 1999/05/29 22:38:34 aaron Exp $
d80 1
a80 2
from the database specified by the
.Dv NULL Ns -terminated
d178 1
a178 1
.Dv NUL
d198 1
a198 1
A pointer to a decoded, NUL-terminated,
d204 3
a206 4
The number of characters in the decoded string not including the trailing
.Dv NUL
is returned on success, \-1 if the requested string capability couldn't
be found, \-2 if a system error was encountered (storage allocation
d219 1
a219 2
access of the
.Dv NULL Ns -terminated
d455 1
a455 2
.Dv NUL Ns s ,
while easily
d457 1
a457 2
.Dv NUL Ns s
are typically used to denote the end of strings; many applications
d460 1
a460 2
to represent a
.Dv NUL .
@


1.11
log
@repairs; go back over some old files, because we should properly distinguish
between NUL and NULL, i.e., don't use the .Dv (defined variable) macro when
referring to an ASCII NUL
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.10 1999/05/29 16:08:55 aaron Exp $
d145 1
a145 1
On success 0 is returned and -1 on failure.
d191 1
a191 1
On success 0 is returned, -1 if the requested numeric capability couldn't
d207 1
a207 1
is returned on success, -1 if the requested string capability couldn't
d248 1
a248 1
expansion, -1 is returned if an system error occurred, and \-2
@


1.10
log
@repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.9 1999/05/27 14:12:54 aaron Exp $
d199 1
a199 2
A pointer to a decoded,
.Dv NULL Ns -terminated ,
@


1.9
log
@sync cgetset() Fn definition with prototype from stdlib.h
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.8 1999/05/10 17:56:28 aaron Exp $
d75 1
d77 2
a78 1
extracts the capability rec
d81 2
a82 2
.Dv NULL
terminated file array
a84 1
.Xr malloc Ns \&'d
d87 1
a87 1
.Nm cgetent
d89 1
a89 1
.Nm .db 
d92 3
a94 1
before accessing the ASCII file.
d107 1
a107 1
.Nm tc 
d110 2
a111 1
\-2 if a system error was encountered (couldn't open/read a file, etc.) also
d118 1
a118 1
.Nm cgetset 
d122 3
a124 1
Conceptually, the entry is added as the first ``file'' in the database, and
d126 1
a126 1
.Nm cgetent .
d134 4
a137 4
.Nm cgetset 
must precede the database traversal.  It must be called before the 
.Nm cgetent 
call. If a sequential access is being performed (see below), it must be called
d139 1
a139 1
.Nm cgetfirst
d141 1
a141 1
.Nm cgetnext
d143 1
a143 1
.Nm cgetclose
d145 1
a145 1
On success 0 is returned and \-1 on failure.
d147 1
a147 1
.Nm cgetmatch
d155 1
a155 1
.Nm cgetcap
d164 3
a166 1
is specified using any single character.  If a colon (`:') is used, an
d172 1
a172 1
is returned on success,
d175 3
a177 1
found.  The end of the capability value is signaled by a `:' or
d182 1
a182 1
.Nm cgetnum
d191 1
a191 1
0 is returned on success, \-1 if the requested numeric capability couldn't
d194 1
a194 1
.Nm cgetstr
d200 1
a200 2
.Dv NUL
terminated,
d208 1
a208 1
is returned on success, \-1 if the requested string capability couldn't
d212 1
a212 1
.Nm cgetustr
d214 1
a214 1
.Nm cgetstr 
d218 3
a220 2
.Nm cgetfirst ,
.Nm cgetnext , 
d223 2
a224 2
.Dv NULL
pointer terminated array of file names,
d226 1
a226 1
.Nm cgetfirst 
d229 1
a229 1
.Nm cgetnext 
d232 1
a232 1
.Nm cgetfirst
d234 1
a234 1
.Nm cgetnext 
d241 1
a241 1
.Ic Tc
d248 2
a249 2
.Nm tc 
expansion, \-1 is returned if an system error occurred, and \-2
d255 1
a255 1
.Nm cgetclose 
d258 2
a259 2
.Nm cgetset .
.Sh CAPABILITY DATABASE SYNTAX
d263 9
a271 3
text editors.  Blank lines and lines beginning with a `#' are comments
and are ignored.  Lines ending with a `\|\e' indicate that the next line
is a continuation of the current line; the `\|\e' and following newline
d273 2
a274 1
lines by ending each line except the last with a `\|\e'.
d277 2
a278 1
line.  Each record contains a variable number of `:'-separated fields
d282 2
a283 1
The first capability of each record specifies its names, separated by `|'
d312 9
a320 2
except `:', but it's usually best to restrict them to the printable
characters and avoid use of graphics like `#', `=', `%', `@@', etc.  Types
d322 10
a331 4
associated typed values.  Types may be any character except a `:'.
Typically, graphics like `#', `=', `%', etc. are used.  Values may be any
number of characters and may contain any character except `:'.
.Sh CAPABILITY DATABASE SEMANTICS
d336 1
a336 1
.Nm cgetcap
d340 5
a344 1
The types `#' and `=' are conventionally used to denote numeric and
d347 1
a347 1
.Nm cgetnum
d349 5
a353 3
.Nm cgetstr
can be used to implement the traditional syntax and semantics of `#'
and `='.
d367 1
a367 1
.Ic Tc
d397 4
a400 35
definitions, or hiding following definitions via `@@' capabilities.
.Sh EXAMPLES
.Bd -unfilled -offset indent
example\||\|an example of binding multiple values to names:\e
	:foo%bar:foo^blah:foo@@:\e
	:abc%xyz:abc^frap:abc$@@:\e
	:tc=more:
.Ed
.Pp
The capability foo has two values bound to it (bar of type `%' and blah of
type `^') and any other value bindings are hidden.  The capability abc
also has two values bound but only a value of type `$' is prevented from
being defined in the capability record more.
.Pp
.Bd -unfilled -offset indent
file1:
 	new\||\|new_record\||\|a modification of "old":\e
		:fript=bar:who-cares@@:tc=old:blah:tc=extensions:
file2:
	old\||\|old_record\||\|an old database record:\e
		:fript=foo:who-cares:glork#200:
.Ed
.Pp
The records are extracted by calling
.Nm cgetent
with file1 preceding file2.
In the capability record new in file1, fript=bar overrides the definition
of fript=foo interpolated from the capability record old in file2,
who-cares@@ prevents the definition of any who-cares definitions in old
from being seen, glork#200 is inherited from old, and blah and anything
defined by the record extensions is added to those definitions in old.
Note that the position of the fript=bar and who-cares@@ definitions before
tc=old is important here.  If they were after, the definitions in old
would take precedence.
.Sh CGETNUM AND CGETSTR SYNTAX AND SEMANTICS
d402 1
a402 1
.Nm cgetnum
d404 1
a404 1
.Nm cgetstr :
d454 3
a456 1
A `\|\e' may be followed by up to three octal digits directly specifies
d464 3
a466 1
use `\e\|200' to represent a
d468 39
d508 7
a514 7
.Nm cgetent ,
.Nm cgetset ,
.Nm cgetmatch ,
.Nm cgetnum ,
.Nm cgetstr ,
.Nm cgetustr ,
.Nm cgetfirst ,
d516 1
a516 1
.Nm cgetnext
d519 1
a519 1
.Nm cgetcap
d524 1
a524 1
.Nm cgetent ,
d526 1
a526 1
.Nm cgetset
d529 1
a529 1
for any of the errors specified for the library functions:
d536 3
a538 3
.Nm cgetent ,
.Nm cgetset ,
.Nm cgetstr ,
d540 1
a540 1
.Nm cgetustr 
d552 3
a554 1
Colons (`:') can't be used in names, types, or values.
d559 1
a559 1
.Nm cgetent .
d562 1
a562 1
.Nm cgetset 
@


1.8
log
@correct some Xr's which referred to the wrong man page sections
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.7 1999/02/27 21:55:04 deraadt Exp $
d57 1
a57 1
.Fn cgetset "char *ent"
@


1.7
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.6 1999/02/25 21:40:16 millert Exp $
d90 1
a90 1
.Xr cap_mkdb 1) 
d480 2
a481 2
.Xr fopen 2 , 
.Xr fclose 2 ,
@


1.6
log
@constify getcap(3).  This fixes a warning in libcurses and doesn't
really change the API since those parameters that was been constified
really are not modified by getcap(3) routines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.5 1998/08/29 21:11:25 deraadt Exp $
d92 1
a92 1
.Fa Buf
@


1.5
log
@man page repairs; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.4 1998/06/08 17:17:04 deraadt Exp $
d55 1
a55 1
.Fn cgetent "char **buf" "char **db_array" "char *name"
d59 1
a59 1
.Fn cgetmatch "char *buf" "char *name"
d61 1
a61 1
.Fn cgetcap "char *buf" "char *cap" "char type"
d63 1
a63 1
.Fn cgetnum "char *buf" "char *cap" "long *num"
d65 1
a65 1
.Fn cgetstr "char *buf" "char *cap" "char **str"
d67 1
a67 1
.Fn cgetustr "char *buf" "char *cap" "char **str"
@


1.4
log
@do not needlessly uppercase function names
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.3 1997/05/30 07:48:24 deraadt Exp $
d476 1
a476 1
.Nm cgetseq
@


1.3
log
@for i in `find . -name \*.[123456789] -exec grep '^.Dd ' {} /dev/null \; | \
	grep '"' | cut -d':' -f1`; do
sed -e '/^.Dd /s/"//g' -e '/^.Dd /s/\(^.Dd [A-Za-z]*\) \(.*\)$/\1, \2/' <$i >x
cat x > $i
done
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.2 1996/08/19 08:23:07 tholo Exp $
d75 1
a75 1
.Fn Cgetent
d86 1
a86 1
.Nm Cgetent
d114 1
a114 1
.Nm Cgetset 
d128 1
a128 1
.Nm Cgetset 
d141 1
a141 1
.Nm Cgetmatch
d149 1
a149 1
.Nm Cgetcap
d172 1
a172 1
.Nm Cgetnum
d184 1
a184 1
.Nm Cgetstr
d203 1
a203 1
.Nm Cgetustr
d209 1
a209 1
.Nm Cgetfirst ,
d216 1
a216 1
.Nm Cgetfirst 
d219 1
a219 1
.Nm Cgetnext 
d245 1
a245 1
.Nm Cgetclose 
d304 1
a304 1
.Nm Cgetcap
d458 1
a458 1
.Nm Cgetent ,
d469 1
a469 1
.Nm Cgetcap
d474 1
a474 1
.Nm Cgetent ,
d486 1
a486 1
.Nm Cgetent ,
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
.\"	$OpenBSD: getcap.3,v 1.4 1995/02/25 13:41:21 cgd Exp $
d37 1
a37 1
.Dd "April 19, 1994"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: getcap.3,v 1.4 1995/02/25 13:41:21 cgd Exp $
a35 2
.\"
.\"	@@(#)getcap.3	8.3 (Berkeley) 4/19/94
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
