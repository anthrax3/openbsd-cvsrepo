head	1.23;
access;
symbols
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.23.0.8
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.21.0.10
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.19.0.14
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.12
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.10
	OPENBSD_5_0:1.19.0.8
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.8
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.4
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.16.0.8
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.6
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.4
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3;
locks; strict;
comment	@.\" @;


1.23
date	2015.11.24.22.03.33;	author millert;	state Exp;
branches;
next	1.22;
commitid	LVVvCb2EklWn8nFM;

1.22
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.21;
commitid	QU70QaxjyBAtj4Rv;

1.21
date	2013.08.14.08.39.24;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.19;

1.19
date	2009.07.15.07.53.56;	author schwarze;	state Exp;
branches;
next	1.18;

1.18
date	2008.04.04.17.42.39;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.31.19.19.28;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2005.07.22.03.16.58;	author jaredy;	state Exp;
branches;
next	1.15;

1.15
date	2004.08.03.19.43.31;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.10.23.31.32;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.07.14.58.17;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.30.14.00.32;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.03.19.04.40;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.24.03.09.05;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.15.17.53.18;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.08.16.31.05;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.16.19.20.05;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.16.05.49.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.23.14.25.29;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.01.20.16.34;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.24.00.30.46;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.21.00.51.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Use reentrant versions of getpw{nam,uid} and getgr{nam,gid} within
libc to avoid reusing the static buffers returned by the non-reentrant
versions.  Since this is inside libc we can use constants for the
buffer sizes instead of having to call sysconf().
OK guenther@@ deraadt@@
@
text
@.\"	$OpenBSD: auth_subr.3,v 1.22 2015/11/10 23:48:18 jmc Exp $
.\"
.\" Copyright (c) 1997 Berkeley Software Design, Inc. All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by Berkeley Software Design,
.\"	Inc.
.\" 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
.\"    or promote products derived from this software without specific prior
.\"    written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	BSDI $From: auth_subr.3,v 2.5 2000/03/30 19:11:27 polk Exp $
.Dd $Mdocdate: November 10 2015 $
.Dt AUTH_OPEN 3
.Os
.Sh NAME
.Nm auth_open ,
.Nm auth_call ,
.Nm auth_challenge ,
.Nm auth_check_change ,
.Nm auth_check_expire ,
.Nm auth_clean ,
.Nm auth_close ,
.Nm auth_clrenv ,
.Nm auth_clroption ,
.Nm auth_clroptions ,
.Nm auth_getitem ,
.Nm auth_getpwd ,
.Nm auth_getstate ,
.Nm auth_getvalue ,
.Nm auth_set_va_list ,
.Nm auth_setdata ,
.Nm auth_setenv ,
.Nm auth_setitem ,
.Nm auth_setoption ,
.Nm auth_setpwd ,
.Nm auth_setstate
.Nd interface to the BSD Authentication system
.Sh SYNOPSIS
.In sys/types.h
.In login_cap.h
.In bsd_auth.h
.Ft auth_session_t *
.Fn auth_open "void"
.Ft int
.Fn auth_close "auth_session_t *as"
.Ft int
.Fn auth_call "auth_session_t *as" "char *path" "..."
.Ft char *
.Fn auth_challenge "auth_session_t *as"
.Ft quad_t
.Fn auth_check_change "auth_session_t *as"
.Ft quad_t
.Fn auth_check_expire "auth_session_t *as"
.Ft void
.Fn auth_clean "auth_session_t *as"
.Ft void
.Fn auth_clrenv "auth_session_t *as"
.Ft void
.Fn auth_clroption "auth_session_t * as" "char *name"
.Ft void
.Fn auth_clroptions "auth_session_t *as"
.Ft char *
.Fn auth_getitem "auth_session_t *as" "auth_item_t item"
.Ft struct passwd *
.Fn auth_getpwd "auth_session_t *as"
.Ft int
.Fn auth_getstate "auth_session_t *as"
.Ft char *
.Fn auth_getvalue "auth_session_t *as" "char *what"
.Ft void
.Fn auth_set_va_list "auth_session_t *as" "va_list ap"
.Ft int
.Fn auth_setdata "auth_session_t *as" "void *ptr" "size_t len"
.Ft void
.Fn auth_setenv "auth_session_t *as"
.Ft int
.Fn auth_setitem "auth_session_t *as" "auth_item_t item" "char *value"
.Ft int
.Fn auth_setoption "auth_session_t *as" "char *name" "char *value"
.Ft int
.Fn auth_setpwd "auth_session_t *as" "struct passwd *pwd"
.Ft void
.Fn auth_setstate "auth_session_t *as" "int state"
.Sh DESCRIPTION
These functions provide the lower level interface to the
.Bx
Authentication system.
They all operate on a
.Bx
Authentication session pointer,
.Fa as ,
which is returned by
.Fn auth_open .
The session pointer
must be passed to all other
.Bx
Authentication functions called.
The
.Fn auth_open
function returns
.Dv NULL
if it was unable to allocate memory for the session.
The session is terminated by the
.Fn auth_close
function,
which also sets any environment variables requested by the login script
(assuming the user was not rejected) or removes files created by the
login script if the authentication was not successful.
It returns the final state of the authentication request.
A return value of 0 implies the user was not authenticated.
A non-zero return value is made up of 1 or more of the following values
ORed together:
.Bl -tag -width AUTH_ROOTOKAYXX
.It Dv AUTH_OKAY
The user was authenticated.
.It Dv AUTH_ROOTOKAY
The user was authenticated with a root instance.
.It Dv AUTH_SECURE
The user was authenticated via a mechanism which is not subject to
eavesdropping attacks (such as provided by token cards).
.El
.Pp
The full state of the session is returned by the
.Fn auth_getstate
function.
In addition to the values above, it also may contain the bits:
.Bl -tag -width AUTH_ROOTOKAYXX
.It Dv AUTH_SILENT
Do not report an error, the user was not authenticated for access and
was not expected to be.
This is returned by login scripts that allow changing of the user's password,
for instance.
This value is stripped off for normal returns.
.It Dv AUTH_CHALLENGE
The user was not authenticated for access and a challenge was issued.
The challenge should be displayed to the user, a response retrieved,
and the result verified.
This value is stripped off for normal returns.
.It Dv AUTH_EXPIRED
The user's account has expired.
.It Dv AUTH_PWEXPIRED
The user's password has expired and needs to be changed.
.El
.Pp
A session may be cleaned
by calling
.Fn auth_clean .
This function removes any files created by a login script in this
session and clears all state associated with this session, with the
exception of the option settings.
It is not necessary to call
.Fn auth_clean
if
.Fn auth_close
is called.
.Pp
The remaining functions are described in alphabetical order.
.Pp
The fundamental function for doing
.Bx
Authentication is
.Fn auth_call .
In addition to the pointer to the
.Bx
Authentication session, it takes
the following parameters:
.Bl -tag -width indent
.It Ar path
The full path name of the login script to run.
The call will fail if
.Ar path
does not pass the requirements of the
.Xr secure_path 3
function.
.It Ar ...
The remaining arguments, which should be of type
.Vt char *
and terminated with a
.Dv NULL ,
are passed to the login script at the end of the command line.
.El
.Pp
The
.Fn auth_call
function, after verifying the
.Ar path ,
creates a bi-directional pipe (socketpair) which is located on
file descriptor 3 for the child (the login script).
This is known as the
.Dq back channel .
The actual command line passed to the child is made up of
3 parts.
The parameters passed to
.Fn auth_call
following
.Ar path
have appended to them any arguments specified by the
.Fn auth_set_va_list
function.
These are typically the variable arguments passed to the function
that calls
.Fn auth_call .
Any option values set by the
.Fn auth_setoption
function are inserted between the first argument (the command
name) and the second argument with a preceding
.Fl v
flag.
The name and value are separated by an
.Sq = :
.Pp
.D1 Fl v Ar name=value
.Pp
Once the login script has been spawned, any data specified by the
.Fn auth_setdata
is written to the back channel.
Multiple blocks of data may have been specified and they will be sent
in the same order they were specified.
As the data is sent, the storage for the data is zeroed out and then freed
(the data is zeroed out since it may contain sensitive information,
such as a password).
Once any data is written out,
.Fn auth_call
reads up to 8192 bytes of data from the back channel.
The state of the session is determined from this data (see
.Xr login.conf 5
for details).
If the login script exits with a 0 and does not specify any return state
on the back channel, the state prior to the call to
.Fn auth_call
is retained.
.Pp
Note that while
.Fn auth_call
will zero out the copies it makes of sensitive information, such as plain text
passwords, after it is sent, it is the responsibility of the
caller to zero out the original copies of this sensitive information.
Due to the mechanics of the
.Fn auth_call
function, this data must be zeroed
.Em before
.Fn auth_call
is called.
The safest place to zero out sensitive information is immediately
after it has been passed to
.Fn auth_setdata .
.Pp
The back channel data may also contain a file descriptor passed back
from the login script.
If this is the case, the login script will first send back the string
.Dq fd
to indicate that a file descriptor will be the next data item.
The file descriptor will be passed back to the next invocation of
the login script with a number specified by the
.Fl v Ar fd
option.
This is used to implement stateful challenge/response schemes that require
a persistent connection during the challenge and response.
The copy of the descriptor in the parent process is closed when the
child is running to prevent deadlock when file locking is used.
The descriptor is also closed by a call to
.Fn auth_close
or
.Fn auth_clean .
.Pp
The data read from the back channel is also used by the
.Fn auth_getvalue
and
.Fn auth_close
functions.
Subsequent calls to
.Fn auth_call
will cause this data to be lost and overwritten with the new data read
from the new call.
.Pp
The environment passed to the login script by
.Fn auth_call
only contains two values:
.Ev PATH
and
.Ev SHELL .
The
.Ev PATH
is set to the default path
.Pa ( /bin
and
.Pa /usr/bin )
while the
.Ev SHELL
is set to the default system shell
.Pq Pa /bin/sh .
.Pp
The
.Fn auth_challenge
function queries the login script defined by the current
.Ar style
for a challenge for the user specified by
.Ar name .
(See below for the setting of the
.Ar style
and
.Ar name ) .
It internally uses the
.Fn auth_call
function.
The generated challenge is returned.
.Dv NULL
is returned on error or if no challenge was generated.
The challenge can also be extracted by the
.Fn auth_getchallenge
function, which simply returns the last challenge generated
for this session.
.Pp
The
.Fn auth_check_change
and
.Fn auth_check_expire
functions check the password expiration (change) and account expiration
times.
They return 0 if no change or expiration time is set for the account.
They return a negative value of how many seconds have passed since
the password or account expired.
In this case the state of the session is marked with either
.Li AUTH_PWEXPIRED
or
.Li AUTH_EXPIRED
as well as clearing any bits which would indicate the authentication was
successful.
If the password or account has not expired, they return the number of
seconds left until the account does expire.
The return value of -1 can either indicate the password or account
just expired or that no password entry was set for the current session.
.Pp
The
.Fn auth_clrenv
function clears any requests set by a login script for
environment variables to be set.
.Pp
The
.Fn auth_clroption
function clears the previously set option
.Fa name .
.Pp
The
.Fn auth_clroptions
function clears all previously set options.
.Pp
The
.Fn auth_getitem
function returns the value of
.Fa item .
The
.Fa item
may be one of:
.Bl -tag -width AUTH_INTERACTIVE
.It Dv AUTH_CHALLENGE
The latest challenge, if any, set for the session.
.It Dv AUTH_CLASS
The class of the user, as defined by the
.Pa /etc/login.conf
file.
This value is not directly used by
.Bx
Authentication, rather, it is
passed to the login scripts for their possible use.
.It Dv AUTH_INTERACTIVE
If set to any value, then the session is tagged as interactive.
If not set, the session is not interactive.
When the value is requested it is always either
.Dv NULL
or
.Dq True .
The auth subroutines may choose to provide additional information to
standard output or standard error when the session is interactive.
There is no functional change in the operation of the subroutines.
.It Dv AUTH_NAME
The name of the user being authenticated.
The name should include the instance, if any, that is being requested.
.It Dv AUTH_SERVICE
The service requesting the authentication.
Initially it is set to the default service which provides the traditional
interactive service.
.It Dv AUTH_STYLE
The style of authentication being performed, as defined by the
.Pa /etc/login.conf
file.
The style determines which login script should actually be used.
.El
.Pp
The value returned points to private memory and should not be
freed by the caller.
.Pp
The
.Fn auth_getvalue
function returns the value, if any, associated with the specified internal
variable
.Ar what .
These variables are set by login scripts.
When a new login script is run
(by the
.Fn auth_call
function)
the values from the previous login script are lost.
(See
.Xr login.conf 5
for details on internal variables.)
.Pp
The
.Fn auth_set_va_list
function establishes a variable argument list to be used by the
.Fn auth_call
function.
It is intended to be used by functions which need to call
.Fn auth_call
but take a variable number of arguments themselves.
Since the arguments are not copied, the call to
.Fn auth_call
must be placed within the scope of
.Fa ap .
The
.Fn auth_call
function will call
.Xr va_end 3
on
.Fa ap .
.Pp
The
.Fn auth_setdata
function makes a copy of
.Fa len
bytes of data pointed to by
.Fa ptr
for use by
.Fn auth_call .
The data will be passed on the back channel to the next login script called.
.Pp
The
.Fn auth_setenv
function adds/deletes any environment variables requested by the
login script to the current environment.
.Pp
The
.Fn auth_setitem
function assigns
.Fa value
to the specified
.Fa item .
The items are described above with the
.Fn auth_getitem
function.
In addition, if
.Fa value
is
.Dv NULL ,
the
.Fa item
is cleared.
If
.Fa value
is
.Dv NULL
and
.Fa item
is
.Li AUTH_ALL
then all items are cleared.
.Pp
The
.Fn auth_setoption
function requests that the option
.Fa name
be set with the value of
.Fa value
when a script is executed by
.Fn auth_call .
The actual arguments to the script will be placed at the beginning
of the argument vector.
For each option two arguments will be issued:
.Li -v name=value .
.Pp
The function
.Fn auth_setpwd
establishes the password file entry for the authentication session.
If the name has already been set by
.Fn auth_setitem
then the
.Fa pwd
argument may be
.Dv NULL ,
else it must be the password entry to use.
.Pp
The function
.Fn auth_getpwd
retrieves the saved password file entry for the authentication session.
If no entry has been saved (either explicitly via
.Fn auth_setpwd
or implicitly via
.Fn auth_check_expire
or
.Fn auth_check_change )
it returns
.Dv NULL .
Note that the memory containing the password file entry is freed by
a call to
.Fn auth_close
or
.Fn auth_clean .
.Pp
The function
.Fn auth_setstate
sets the sessions state to
.Fa state .
Typically this is either
.Li AUTH_OKAY
or 0.
.Sh SEE ALSO
.Xr authenticate 3 ,
.Xr login_cap 3 ,
.Xr pw_dup 3 ,
.Xr login.conf 5
@


1.22
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.21 2013/08/14 08:39:24 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: August 14 2013 $
a542 19
.Sh CAVEATS
The
.Fn auth_check_change
and
.Fn auth_check_expire
functions call
.Fn getpwnam
or
.Fn getpwuid ,
overwriting the static storage used by the
.Xr getpwent 3
family of routines.
The calling program must either make a local copy of the passwd struct
pointer via the
.Xr pw_dup 3
function or use the
.Xr auth_setpwd 3
function to copy the passwd struct into
.Fa as .
@


1.21
log
@some Bx/Ox conversion;
From: Jan Stary
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.20 2013/06/05 03:39:22 tedu Exp $
d34 2
a35 2
.Dd $Mdocdate: June 5 2013 $
.Dt BSD_AUTH 3
@


1.20
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.19 2009/07/15 07:53:56 schwarze Exp $
d34 1
a34 1
.Dd $Mdocdate: July 15 2009 $
d107 2
a108 1
These functions provide the lower level interface to the BSD
d110 3
a112 1
They all operate on a BSD Authentication session pointer,
d117 3
a119 1
must be passed to all other BSD Authentication functions called.
d181 3
a183 1
The fundamental function for doing BSD Authentication is
d185 3
a187 1
In addition to the pointer to the BSD Authentication session, it takes
d384 3
a386 1
This value is not directly used by BSD Authentication, rather, it is
@


1.19
log
@must include <sys/types.h> before including <login_cap.h> or <bsd_auth.h>;
noticed by joao <salvatti at gmail dot com> on tech@@;
feedback and ok kettenis@@ deraadt@@ and reminded by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.18 2008/04/04 17:42:39 millert Exp $
d34 1
a34 1
.Dd $Mdocdate: April 4 2008 $
d61 3
a63 3
.Fd #include <sys/types.h>
.Fd #include <login_cap.h>
.Fd #include <bsd_auth.h>
@


1.18
log
@Zero out the password/response argument in the simplified BSD auth
interafces.  Otherwise, we end up with an extra copy in memory when
auth_call() forks that is not possible to clear.
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.17 2007/05/31 19:19:28 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: May 31 2007 $
d61 1
@


1.17
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.16 2005/07/22 03:16:58 jaredy Exp $
d34 1
a34 1
.Dd $Mdocdate$
d244 15
@


1.16
log
@- sync prototypes and header file excerpts to reality
- many grammar, punctuation, macro, layout, spelling/typos,
  rewording, etc. fixes
- avoid first person
- sprinkle crossrefs where relevant

help & ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.15 2004/08/03 19:43:31 millert Exp $
d34 1
a34 1
.Dd March 20, 1997
@


1.15
log
@Add support for passing a file descriptor back and forth between
the parent program and the login script.  This will be used by login
scripts that need to maintain state, for instance keeping a record
locked during authentication while using separate challenge and
response authentication with S/Key.  OK deraadt@@ marius@@ henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.14 2004/01/10 23:31:32 millert Exp $
d64 1
a64 1
.Fn auth_open
d103 1
a103 1
.Ft int
d130 1
a130 1
.It Li AUTH_OKAY
d132 1
a132 1
.It Li AUTH_ROOTOKAY
d134 1
a134 1
.It Li AUTH_SECURE
d144 1
a144 1
.It Li AUTH_SILENT
d147 1
a147 1
This is returned by login scripts that allow changing of the users password,
d150 1
a150 1
.It Li AUTH_CHALLENGE
d155 1
a155 1
.It Li AUTH_EXPIRED
d157 1
a157 1
.It Li AUTH_PWEXPIRED
d189 1
a189 1
.Ft char *
d191 1
a191 1
.Dv NULL
d249 1
a249 1
to indidate that a file descriptor will be the next data item.
d281 2
a282 2
is set to the default path (
.Pa /bin
d287 2
a288 2
is set to the default system shell (
.Pa /bin/sh ) .
d326 1
a326 1
If the password or account has not expired they return the number of
d352 2
a353 2
.Bl -tag -width AUTH_ROOTOKAYXX
.It Li AUTH_CHALLENGE
d355 1
a355 1
.It Li AUTH_CLASS
d361 3
a363 3
.It Li AUTH_INTERACTIVE
If set to any value then the session is tagged as interactive.
If not set the session is not interactive.
d371 1
a371 1
.It Li AUTH_NAME
d374 1
a374 1
.It Li AUTH_SERVICE
d378 1
a378 1
.It Li AUTH_STYLE
@


1.14
log
@auth_clean does not clear the options settings
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.13 2003/07/07 14:58:17 jmc Exp $
d244 18
@


1.13
log
@- .Li Ta -> .D1
- .Li Dq -> .Dq Li
- remove .br
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.12 2003/05/30 14:00:32 jmc Exp $
d165 2
a166 1
session and clears all state associated with this session.
@


1.12
log
@- clean up macro abuse
- section reorder
- merge COMPATIBILITY
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.11 2003/05/03 19:04:40 jmc Exp $
d223 1
a223 1
.Li Ta Fl v Ar name=value
a320 1
.br
d365 1
a466 1
.br
@


1.11
log
@typos;
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.10 2003/02/24 03:09:05 deraadt Exp $
a224 1
.Pp
d377 2
a378 1
.Fn auth_call function)
d493 5
a516 5
.Sh SEE ALSO
.Xr authenticate 3 ,
.Xr login_cap 3 ,
.Xr pw_dup 3 ,
.Xr login.conf 5
@


1.10
log
@of of
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.9 2002/10/15 17:53:18 millert Exp $
d164 1
a164 1
This function causes any files created by a login script in this
d363 2
a364 1
.Pa /etc/login.conf file.
d374 1
a374 1
.Ar what.
d489 1
a489 1
.Fa state.
@


1.9
log
@Document the fact that calling auth_setitem() with a NULL value
clears (frees) the corresponding value in the auth session.
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.8 2002/05/08 16:31:05 millert Exp $
d330 1
a330 1
function returns the value of of
@


1.8
log
@Fix typo; Peter Werner
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.7 2002/04/30 16:31:42 mpech Exp $
d366 2
d427 4
d432 3
d436 1
a436 1
.Li AUTH_ALL
d438 1
a438 1
.Fa value
d440 1
a440 1
.Dv NULL
@


1.7
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.6 2002/03/16 19:20:05 millert Exp $
d127 1
a127 1
A non-zero return value is made up the 1 or more of the following values
@


1.6
log
@Add CAVEATS section similar to authenticate.3
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.5 2002/03/16 05:49:26 millert Exp $
d224 1
a224 1

@


1.5
log
@o Document auth_getpwd()
o Use .Pp, not .sp
o Work around two mdoc bugs by using .br
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.4 2001/08/23 14:25:29 millert Exp $
d483 19
d505 1
@


1.4
log
@Add missing commas after auth_getitem and auth_setitem in NAME section.
Problem found by makewhatis -p / espie.
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.3 2001/03/01 20:16:34 aaron Exp $
d49 1
d85 2
d138 1
a138 1
.sp
d160 1
a160 1
.sp
d171 1
a171 1
.sp
d173 1
a173 1
.sp
d222 1
a222 1
.sp
d225 1
a225 1
.sp
d244 1
a244 1
.sp
d254 1
a254 1
.sp
d271 1
a271 1
.sp
d292 1
a292 1
.sp
d312 1
a312 1
.sp
d317 1
a317 1
.sp
d322 2
a323 1
.sp
d327 1
a327 1
.sp
d366 1
a366 1
.sp
d380 1
a380 1
.sp
d399 1
a399 1
.sp
d409 1
a409 1
.sp
d414 1
a414 1
.sp
d433 1
a433 1
.sp
d446 1
a446 1
.sp
d457 19
a475 1
.sp
@


1.3
log
@Spelling: preceeding -> preceding
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.2 2000/12/24 00:30:46 aaron Exp $
d48 1
a48 1
.Nm auth_getitem
d54 1
a54 1
.Nm auth_setitem
@


1.2
log
@Various repairs, mostly to get rid of short lines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: auth_subr.3,v 1.1 2000/11/21 00:51:16 millert Exp $
d214 1
a214 1
name) and the second argument with a preceeding
@


1.1
log
@BSD authentication routines from BSDI.  Presently this is not used but
the login_* helper programs and other support will be committed in the
near future.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d104 2
a105 2
Authentication system.  They all operate on a BSD Authentication
session pointer,
d114 1
a114 1
.Nm NULL
d122 4
a125 3
It returns the final state of the authentication request.  A return
value of 0 implies the user was not authenticated.  A non-zero return
value is made up the 1 or more of the following values ORed together:
d143 3
a145 2
was not expected to be.  This is returned by login scripts that allow
changing of the users password, for instance.
d177 2
a178 1
The full path name of the login script to run.  The call will fail if
d187 1
a187 1
.Ev NULL
d193 1
a193 2
function,
after verifying the
d196 2
a197 2
file descriptor 3 for the child (the login script).  This is
known as the
d201 1
a201 1
The parameters passed to 
d225 6
a230 5
is written to the back channel.  Multiple blocks of data may have
been specified and they will be sent in the same order they were
specified.  As the data is sent, the storage for the data is
zeroed out and then freed (the data is zeroed out since it may
contain sensitive information, such as a password).
d233 2
a234 3
reads up to 8192 bytes of data from the back channel.  The
state of the session is determined from this data
(see
d283 1
a283 1
.Nm NULL
d298 2
a299 2
the password or account expired.  In this case the state of the
session is marked with either
d341 4
a344 4
If set to any value then the session is tagged as interactive.  If
not set the session is not interactive.  When the value is requested
it is always either
.Nm NULL
d398 1
a398 2
function
makes a copy of
d427 1
a427 1
.Li NULL
d439 2
a440 2
of the argument vector.  For each option two arguments will be
issued:
d450 3
a452 1
argument may be NULL, else it must be the password entry to use.
@

