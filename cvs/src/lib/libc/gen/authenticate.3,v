head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.15.0.10
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.13.0.10
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3;
locks; strict;
comment	@.\" @;


1.18
date	2016.03.30.06.58.06;	author jmc;	state Exp;
branches;
next	1.17;
commitid	nFeMLhYWGqPPjE4B;

1.17
date	2015.11.24.22.03.33;	author millert;	state Exp;
branches;
next	1.16;
commitid	LVVvCb2EklWn8nFM;

1.16
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.15;
commitid	QU70QaxjyBAtj4Rv;

1.15
date	2013.08.14.08.39.24;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2011.01.24.01.50.25;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2009.07.15.07.53.56;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2008.04.04.17.42.39;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.31.19.19.28;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2005.07.22.03.16.58;	author jaredy;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.25.03.12.43;	author cloder;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.30.14.00.32;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.30.06.28.10;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.15.17.27.44;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.16.18.30.35;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.24.00.30.46;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.23.16.03.06;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.21.00.51.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.18
log
@some Xr adjustment to catch up with MLINKS removal;
@
text
@.\"	$OpenBSD: authenticate.3,v 1.17 2015/11/24 22:03:33 millert Exp $
.\"
.\" Copyright (c) 1997 Berkeley Software Design, Inc. All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by Berkeley Software Design,
.\"	Inc.
.\" 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
.\"    or promote products derived from this software without specific prior
.\"    written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	BSDI $From: authenticate.3,v 2.7 1998/09/03 20:27:20 prb Exp $
.Dd $Mdocdate: November 24 2015 $
.Dt AUTH_APPROVAL 3
.Os
.Sh NAME
.Nm auth_approval ,
.Nm auth_cat ,
.Nm auth_checknologin ,
.Nm auth_mkvalue ,
.Nm auth_userchallenge ,
.Nm auth_usercheck ,
.Nm auth_userokay ,
.Nm auth_userresponse ,
.Nm auth_verify
.Nd simplified interface to the BSD Authentication system
.Sh SYNOPSIS
.In sys/types.h
.In login_cap.h
.In bsd_auth.h
.Ft int
.Fn auth_userokay "char *name" "char *style" "char *type" "char *password"
.Ft auth_session_t *
.Fn auth_userchallenge "char *name" "char *style" "char *type" "char **challengep"
.Ft auth_session_t *
.Fn auth_usercheck "char *name" "char *style" "char *type" "char *password"
.Ft int
.Fn auth_userresponse "auth_session_t *as" "char *response" "int more"
.Ft int
.Fn auth_approval "auth_session_t *as" "struct login_cap *lc" "char *name" "char *type"
.Ft int
.Fn auth_cat "char *file"
.Ft void
.Fn auth_checknologin "struct login_cap *lc"
.Ft char *
.Fn auth_mkvalue "char *value"
.Ft auth_session_t *
.Fn auth_verify "auth_session_t *as" "char *style" "char *name" "..."
.Sh DESCRIPTION
These functions provide a simplified interface to the
.Bx
Authentication system
.Pq see Xr auth_subr 3 .
The
.Fn auth_userokay
function provides a single function call interface.
Provided with a user's name in
.Ar name ,
and an optional
.Ar style ,
.Ar type ,
and
.Ar password ,
the
.Fn auth_userokay
function returns a simple yes/no response.
A return value of 0 implies failure; a non-zero return value implies success.
If
.Ar style
is not
.Dv NULL ,
it specifies the desired style of authentication to be used.
If it is
.Dv NULL
then the default style for the user is used.
In this case,
.Ar name
may include the desired style by appending it to the user's name with a
single colon
.Pq Sq \&:
as a separator.
If
.Ar type
is not
.Dv NULL
then it is used as the authentication type (such as
.Dq auth-myservice ) .
If
.Ar password
is
.Dv NULL
then
.Fn auth_userokay
operates in an interactive mode with the user on standard input, output,
and error.
If
.Ar password
is specified,
.Fn auth_userokay
operates in a non-interactive mode and only tests the specified passwords.
This non-interactive method does not work with challenge-response
authentication styles.
For security reasons, when a
.Ar password
is specified,
.Fn auth_userokay
will zero out its value before it returns.
.Pp
The
.Fn auth_usercheck
function operates the same as the
.Fn auth_userokay
function except that it does not close the
.Bx
Authentication session created.
Rather than returning the status of the session, it returns
a pointer to the newly created
.Bx
Authentication session.
.Pp
The
.Fn auth_userchallenge
function takes the same
.Ar name , style ,
and
.Ar type
arguments as does
.Fn auth_userokay .
However, rather than authenticating the user, it returns a possible
challenge in the pointer pointed to by
.Ar challengep .
The return value of the function is a pointer to a newly created
.Bx
Authentication session.
This challenge, if not
.Dv NULL ,
should be displayed to the user.
In any case, the user should provide a password which is
the
.Ar response
in a call to
.Fn auth_userresponse .
In addition to the password, the pointer returned by
.Fn auth_userchallenge
should be passed in as
.Ar as
and the value of
.Va more
should be non-zero if the program wishes to allow more attempts.
If
.Va more
is zero then the session will be closed.
The
.Fn auth_userresponse
function closes the
.Bx
Authentication session and has the same
return value as
.Fn auth_userokay .
For security reasons, when a
.Ar response
is specified,
.Fn auth_userresponse
will zero out its value before it returns.
.Pp
The
.Fn auth_approval
function calls the approval script for the user of the specified
.Ar type .
The string
.Dq approve-
will be prepended to
.Ar type
if missing.
The resulting type is used to look up an entry in
.Pa /etc/login.conf
for the user's class.
If the entry is missing, the generic entry for
.Dq approve
will be used.
The
.Ar name
argument will be passed to the approval program as the name of the user.
The
.Ar lc
argument points to a login class structure.
If it is
.Dv NULL
then a login class structure will be looked up for the class of
user
.Ar name .
The
.Fn auth_approval
function returns a value of 0 on failure to approve the user.
.Pp
Prior to actually calling the approval script, the account's
expiration time, the associated nologin file, and existence
of the account's home directory
.Po
if
.Li requirehome
is set for this class
.Pc
are checked.
Failure on any of these points causes the
.Fn auth_approval
function to return a value of 0 and not actually call the approval script.
.Pp
The
.Fn auth_cat
function opens
.Ar file
for reading and copies its contents to standard output.
It returns 0 if it was unable to open
.Ar file
and 1 otherwise.
.Pp
The
.Fn auth_checknologin
function must be provided with a pointer to a login class.
If the class has a
.Dq nologin
entry defined and it points to a file that can be opened,
the contents of the file will be copied to standard output and
.Xr exit 3
will be called with a value of 1.
If the class does not have the field
.Dq ignorenologin
and the file
.Pa /etc/nologin
exists its contents will be copied to standard output and
.Xr exit 3
will be called with a value of 1.
.Pp
The
.Fn auth_verify
function is a front end to the
.Xr auth_call 3
function.
It will open a
.Bx
Authentication session, if needed, and will set
the style and user name based on the
.Ar style
and
.Ar name
arguments, if not
.Dv NULL .
Values for the style and user name in an existing
.Bx
Authentication
session will be replaced and the old values freed (if the calling program
has obtained pointers to the style or user name via
.Xr auth_getitem 3 ,
those pointers will become invalid).
The variable arguments are passed to
.Fn auth_call
via the
.Xr auth_set_va_list 3
function.
The, possibly created,
.Bx
Authentication session is returned.
The
.Xr auth_getstate 3
or
.Xr auth_close 3
function
should be used to determine the outcome of the authentication request.
.Pp
The
.Fn auth_mkvalue
function takes a NUL-terminated string pointed to by
.Ar value
and returns a NUL-terminated string suitable for passing
back to a calling program on the back channel.
This function is for use by the login scripts themselves.
The string returned should be freed by
.Xr free 3
when it is no longer needed.
A value of
.Dv NULL
is returned if no memory was available for the new copy of the string.
.Sh SEE ALSO
.Xr auth_subr 3 ,
.Xr getpwent 3 ,
.Xr pw_dup 3
@


1.17
log
@Use reentrant versions of getpw{nam,uid} and getgr{nam,gid} within
libc to avoid reusing the static buffers returned by the non-reentrant
versions.  Since this is inside libc we can use constants for the
buffer sizes instead of having to call sysconf().
OK guenther@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.16 2015/11/10 23:48:18 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: November 10 2015 $
d74 1
a74 1
.Pq see Xr bsd_auth 3 .
@


1.16
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.15 2013/08/14 08:39:24 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: August 14 2013 $
a308 30
.Sh CAVEATS
The
.Fn auth_approval ,
.Fn auth_usercheck ,
.Fn auth_userokay ,
and
.Fn auth_userchallenge
functions call
.Xr getpwnam 3
or
.Xr getpwuid 3 ,
overwriting the static storage used by the
.Xr getpwent 3
family of routines.
The calling program must either make a local copy of the passwd struct
pointer via the
.Xr pw_dup 3
function or, for
.Fn auth_approval
and
.Fn auth_usercheck
only, use the
.Xr auth_setpwd 3
function to copy the passwd struct into a
.Bx
Authentication session structure
which can then be passed to
.Fn auth_approval
or
.Fn auth_usercheck .
@


1.15
log
@some Bx/Ox conversion;
From: Jan Stary
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.14 2013/06/05 03:39:22 tedu Exp $
d34 2
a35 2
.Dd $Mdocdate: June 5 2013 $
.Dt AUTHENTICATE 3
@


1.14
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.13 2011/01/24 01:50:25 schwarze Exp $
d34 1
a34 1
.Dd $Mdocdate: January 24 2011 $
d71 3
a73 2
These functions provide a simplified interface to the BSD Authentication
system
d134 3
a136 1
function except that it does not close the BSD Authentication session created.
d138 3
a140 1
a pointer to the newly created BSD Authentication session.
d154 2
a155 1
BSD Authentication session.
d176 3
a178 1
function closes the BSD Authentication session and has the same
d261 3
a263 1
It will open a BSD Authentication session, if needed, and will set
d270 3
a272 1
Values for the style and user name in an existing BSD Authentication
d282 3
a284 1
The, possibly created, BSD Authentication session is returned.
d332 3
a334 1
function to copy the passwd struct into a BSD Authentication session structure
@


1.13
log
@Correctly escape a literal colon in an enclosure;
the \: roff escape is an optional line break.
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.12 2009/07/15 07:53:56 schwarze Exp $
d34 1
a34 1
.Dd $Mdocdate: July 15 2009 $
d49 3
a51 3
.Fd #include <sys/types.h>
.Fd #include <login_cap.h>
.Fd #include <bsd_auth.h>
@


1.12
log
@must include <sys/types.h> before including <login_cap.h> or <bsd_auth.h>;
noticed by joao <salvatti at gmail dot com> on tech@@;
feedback and ok kettenis@@ deraadt@@ and reminded by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.11 2008/04/04 17:42:39 millert Exp $
d34 1
a34 1
.Dd $Mdocdate: April 4 2008 $
d100 1
a100 1
.Pq Sq \:
@


1.11
log
@Zero out the password/response argument in the simplified BSD auth
interafces.  Otherwise, we end up with an extra copy in memory when
auth_call() forks that is not possible to clear.
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.10 2007/05/31 19:19:28 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: May 31 2007 $
d49 1
@


1.10
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.9 2005/07/22 03:16:58 jaredy Exp $
d34 1
a34 1
.Dd $Mdocdate$
d122 5
d172 5
@


1.9
log
@- sync prototypes and header file excerpts to reality
- many grammar, punctuation, macro, layout, spelling/typos,
  rewording, etc. fixes
- avoid first person
- sprinkle crossrefs where relevant

help & ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.8 2005/02/25 03:12:43 cloder Exp $
d34 1
a34 1
.Dd March 26, 1997
@


1.8
log
@Be correct in our man pages when talking about NUL termination (that is,
termination with '\0') vs. null termination.
Input from krw@@, jaredy@@, jmc@@.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.7 2003/05/30 14:00:32 jmc Exp $
d60 1
a60 1
.Fn auth_approval "auth_session_t *as" "login_cap_t *lc" "char *name" "char *type"
d64 1
a64 1
.Fn auth_checknologin "login_cap_t *lc"
d86 1
a86 1
A return value of 0 implies failure, a non-zero return value implies success.
d90 1
a90 1
.Dv NULL
d95 1
a95 1
In this case
d128 1
a128 1
Rather than returning the status of the session it returns
d177 1
a177 1
The resulting type is used to look up an entry in the
d180 1
a180 1
If the entry is missing the generic entry for
d240 2
a241 3
.Fn auth_call
function
.Pq see Xr auth_subr 3 .
d257 2
a258 3
.Fn auth_set_va_list
function
.Pq see Xr auth_subr 3 .
d261 1
a261 1
.Fn auth_getstate
d263 1
a263 1
.Fn auth_close
a264 1
.Pq see Xr auth_subr 3
d292 1
a292 1
.Fn getpwnam
d294 1
a294 1
.Fn getpwuid ,
@


1.7
log
@- clean up macro abuse
- section reorder
- merge COMPATIBILITY
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.6 2003/04/30 06:28:10 jmc Exp $
d272 1
a272 1
function takes a null terminated string pointed to by
d274 1
a274 1
and returns a null terminated string suitable for passing
@


1.6
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.5 2002/10/15 17:27:44 millert Exp $
d72 1
a72 1
.Pq see Xr bsd_auth 3 Ns .
d242 1
a242 1
.Pq see Xr auth_subr 3 Ns .
d260 1
a260 1
.Pq see Xr auth_subr 3 Ns .
d283 4
a314 4
.Sh SEE ALSO
.Xr auth_subr 3 ,
.Xr getpwent 3 ,
.Xr pw_dup 3
@


1.5
log
@Note that when calling auth_verify() with a style and/or username,
the old values in the auth session will get freed and the new values
added.
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.4 2002/03/16 18:30:35 millert Exp $
d76 2
a77 2
Provided a user's name in
.Ar name
d82 1
a82 1
.Ar password
d151 1
a151 1
.Fn auth_userresponse.
d177 1
a177 1
The resulting type is used to lookup an entry in the
@


1.4
log
@Add CAVEATS section that details which functions call getpw* so
the programmer knows when to make a local copy of the struct passwd
and how to avoid multiple passwd file lookups.
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.3 2000/12/24 00:30:46 aaron Exp $
d250 5
@


1.3
log
@Various repairs, mostly to get rid of short lines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.2 2000/12/23 16:03:06 markus Exp $
d278 28
d307 3
a309 1
.Xr auth_subr 3
@


1.2
log
@type is not a .Fn
@
text
@d1 1
a1 1
.\"	$OpenBSD: authenticate.3,v 1.1 2000/11/21 00:51:16 millert Exp $
d71 1
a71 1
system 
d75 1
a75 1
function provides a single function call interface.  
d91 2
a92 1
it specifies the desired style of authentication to be used.  If it is
d94 2
a95 1
then the default style for the user is used.  In this case
d114 2
a115 1
and error.  If
d127 2
a128 2
function except that it does not close the BSD Authentication session
created.  Rather than returning the status of the session it returns
d176 1
a176 1
if missing. 
d179 2
a180 2
for the user's class.  If the entry is missing the generic
entry for
d188 2
a189 1
argument points to a login class structure.  If it is
d200 1
a200 1
of the account's home directory 
d205 1
a205 1
.Pc 
d241 1
a241 1
function 
d248 1
a248 1
arguments, if not 
d254 1
a254 1
function 
d261 1
a261 1
function 
d270 2
a271 2
back to a calling program on the back channel.  This function
is for use by the login scripts themselves.
d275 1
a275 1
A value of 
@


1.1
log
@BSD authentication routines from BSDI.  Presently this is not used but
the login_* helper programs and other support will be committed in the
near future.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d168 1
a168 1
.Fn type .
@

