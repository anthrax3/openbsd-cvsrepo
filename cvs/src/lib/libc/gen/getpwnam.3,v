head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.2.0.16
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.8
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@.\" @;


1.11
date	2016.08.14.14.57.16;	author tb;	state Exp;
branches;
next	1.10;
commitid	OxxZUs1rAQG7HgKY;

1.10
date	2015.11.18.19.32.23;	author tedu;	state Exp;
branches;
next	1.9;
commitid	HoQivNBO063L0ZIB;

1.9
date	2015.10.30.03.12.33;	author guenther;	state Exp;
branches;
next	1.8;
commitid	MrKC7Lv5XAKEU8fC;

1.8
date	2015.10.27.04.41.18;	author guenther;	state Exp;
branches;
next	1.7;
commitid	WO8KZh0g90cGqq5o;

1.7
date	2015.01.15.03.19.43;	author millert;	state Exp;
branches;
next	1.6;
commitid	03UbFv1UIycIAMP6;

1.6
date	2014.03.12.11.36.06;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2013.07.17.05.42.11;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.02.05.09.16;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.21.52.03;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Refer to /etc/passwd consistently as the "legacy password file" and
remove some references to differences between versions 6 and 7.

ok jmc, millert, tedu
@
text
@.\"	$OpenBSD: getpwnam.3,v 1.10 2015/11/18 19:32:23 tedu Exp $
.\"
.\" Copyright (c) 1988, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: November 18 2015 $
.Dt GETPWNAM 3
.Os
.Sh NAME
.Nm getpwnam ,
.Nm getpwuid ,
.Nm getpwnam_r ,
.Nm getpwuid_r ,
.Nm getpwnam_shadow ,
.Nm getpwuid_shadow ,
.Nm setpassent
.Nd password database operations
.Sh SYNOPSIS
.In pwd.h
.Ft struct passwd *
.Fn getpwnam "const char *login"
.Ft struct passwd *
.Fn getpwuid "uid_t uid"
.Ft int
.Fn getpwnam_r "const char *login" "struct passwd *pwstore" "char *buf" "size_t bufsize" "struct passwd **result"
.Ft int
.Fn getpwuid_r "uid_t uid" "struct passwd *pwstore" "char *buf" "size_t bufsize" "struct passwd **result"
.Ft struct passwd *
.Fn getpwnam_shadow "const char *login"
.Ft struct passwd *
.Fn getpwuid_shadow "uid_t uid"
.Ft int
.Fn setpassent "int stayopen"
.Sh DESCRIPTION
These functions operate on the password database file which is described in
.Xr passwd 5 .
Each entry in the database is defined by the structure
.Li struct passwd
found in the include file
.In pwd.h :
.Bd -literal -offset indent
struct passwd {
	char	*pw_name;	/* user name */
	char	*pw_passwd;	/* encrypted password */
	uid_t	pw_uid;		/* user uid */
	gid_t	pw_gid;		/* user gid */
	time_t	pw_change;	/* password change time */
	char	*pw_class;	/* user access class */
	char	*pw_gecos;	/* Honeywell login info */
	char	*pw_dir;	/* home directory */
	char	*pw_shell;	/* default shell */
	time_t	pw_expire;	/* account expiration */
};
.Ed
.Pp
The functions
.Fn getpwnam
and
.Fn getpwuid
search the password database for the given login name or user ID,
respectively, always returning the first one encountered.
.Pp
The
.Fn getpwnam_r
and
.Fn getpwuid_r
functions both update the passwd structure pointed to by
.Fa pwstore
and store a pointer to that structure at the location pointed to by
.Fa result .
The structure is filled with an entry from the password database with a
matching
.Fa name
or
.Fa uid .
Storage referenced by the passwd structure will be allocated from
the memory provided with the
.Fa buf
parameter, which is
.Fa bufsiz
characters in size.
The maximum size needed for this buffer can be determined with
.Fn sysconf _SC_GETPW_R_SIZE_MAX .
.Pp
.Fn setpassent
accomplishes two purposes.
First, it causes
.Xr getpwent 3
to
.Dq rewind
to the beginning of the database.
Additionally, if
.Fa stayopen
is non-zero, file descriptors are left open, significantly speeding
up subsequent accesses for the lookup routines.
These file descriptors can be closed by a call to
.Xr endpwent 3 .
.Pp
It is dangerous for long-running programs to keep the file descriptors
open as the database will become out of date if it is updated while the
program is running.
However the file descriptors are automatically closed when
.Xr execve 2
is called.
.Pp
These routines have been written to
.Dq shadow
the password file, that is,
allow only certain programs to have access to the encrypted password.
The default functions will not return the true encrypted password, but
instead only the string
.Ql * .
If the process which calls them has an effective UID of 0 or has the
.Dq _shadow
group in its group vector, and wishes to access the encrypted password,
it should use the
.Fn getpwnam_shadow
and
.Fn getpwuid_shadow
functions.
.Ss YP support
If YP is active, the functions
.Fn getpwnam
and
.Fn getpwnam_r
also use the
.Pa master.passwd.byname
YP map (if available) or the
.Pa passwd.byname
YP map; and the functions
.Fn getpwuid
and
.Fn getpwuid_r
also use the
.Pa master.passwd.byuid
YP map (if available) or the
.Pa passwd.byuid
YP map.
This is in addition to the passwd file,
and respects the order of both normal and YP
entries in the passwd file.
.Sh RETURN VALUES
The functions
.Fn getpwnam
and
.Fn getpwuid
return a pointer to a passwd structure if a match is found or a
.Dv NULL
pointer if no match is found or an error occurs.
.Pp
The functions
.Fn getpwnam_r
and
.Fn getpwuid_r
update
.Fa result
to point to
.Fa pwstore
if a match is found or set it to
.Dv NULL
if no match is found or an error occurs.
They return 0 on success, even if no match is found,
or an error number if an error occurs; see
.Sx ERRORS .
.Pp
The
.Fn setpassent
function returns 0 on failure or 1 on success.
.Sh FILES
.Bl -tag -width /etc/master.passwd -compact
.It Pa /etc/pwd.db
insecure password database file
.It Pa /etc/spwd.db
secure password database file
.It Pa /etc/master.passwd
current password file
.It Pa /etc/passwd
legacy password file
.El
.Sh ERRORS
The
.Fn getpwnam_r
and
.Fn getpwuid_r
functions may fail if:
.Bl -tag -width Er
.It Bq Er ERANGE
The storage supplied via
.Fa buf
and
.Fa bufsize
is too small and cannot contain all the strings to be returned in
.Fa pwstore .
.El
.Pp
The
.Fn getpwnam ,
.Fn getpwnam_r ,
.Fn getpwuid ,
and
.Fn getpwuid_r
functions may also fail for any of the errors specified for
.Xr dbopen 3
and its
.Fn get
routine.
.Pp
If YP is active, they may also fail due to errors caused by the YP
subsystem.
.Sh SEE ALSO
.Xr getlogin 2 ,
.Xr getgrent 3 ,
.Xr getgrouplist 3 ,
.Xr getpwent 3 ,
.Xr pw_dup 3 ,
.Xr sysconf 3 ,
.Xr passwd 5 ,
.Xr Makefile.yp 8 ,
.Xr pwd_mkdb 8 ,
.Xr vipw 8 ,
.Xr yp 8
.Sh STANDARDS
The
.Fn getpwnam ,
.Fn getpwnam_r ,
.Fn getpwuid ,
and
.Fn getpwuid_r
functions are compliant with the
.St -p1003.1-2008
specification.
.Pp
.Sx YP support
and the
.Fn setpassent
function are extensions to that specification.
.Sh HISTORY
A predecessor to
.Fn getpwuid ,
.Fn getpw ,
first appeared in
.At v4 .
The
.Fn getpwnam
and
.Fn getpwuid
functions appeared in
.At v7 .
The
.Fn setpassent
function appeared in
.Bx 4.3 Reno .
.Sh BUGS
The
.Fn getpwnam
and
.Fn getpwuid
functions store their results in an internal static buffer and return
a pointer to that buffer.
Subsequent calls to
.Fn getpwent ,
.Fn getpwnam ,
or
.Fn getpwuid
will overwrite the same buffer.
@


1.10
log
@document the _shadow functions
@
text
@d1 1
a1 1
.\"	$OpenBSD: getpwnam.3,v 1.9 2015/10/30 03:12:33 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: October 30 2015 $
d202 1
a202 1
a Version 7 format password file
@


1.9
log
@For getgrent.3:
  - delete the commented out setgrfile bits, as well as the MLINK
  - rename getgr{nam,gid}_r()'s 'buffer' parameters to 'buf' to be
    consistent with getpwnam(3) and practically all other section 3 manpages
  - we have sysconf(_SC_GETGR_R_SIZE_MAX) now, so uncomment and revise the text
For getpwnam.3:
 - rename buflen to bufsize for consistency
 - rewrite the description of the getpw{nam,uid}_r functions to
   match the better getgr{nam,gid}_r() description, adding sysconf() bits
Add sysconf(3) to SEE ALSO for both

encouraged by schwarze@@
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: getpwnam.3,v 1.8 2015/10/27 04:41:18 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: October 27 2015 $
d38 2
d52 4
d134 3
d139 6
a144 3
group in its group vector, the encrypted password will be returned, otherwise,
the password field of the returned structure will point to the string
.Ql * .
@


1.8
log
@The fd of the passwd database is marked close-on-exec now

Incorrect text pointed out by tedu@@
ok deraadt@@ millert@@ tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: getpwnam.3,v 1.7 2015/01/15 03:19:43 millert Exp $
d30 1
a30 1
.Dd $Mdocdate: January 15 2015 $
d47 1
a47 1
.Fn getpwnam_r "const char *login" "struct passwd *pwstore" "char *buf" "size_t buflen" "struct passwd **result"
d49 1
a49 1
.Fn getpwuid_r "uid_t uid" "struct passwd *pwstore" "char *buf" "size_t buflen" "struct passwd **result"
d81 1
a81 1
The re-entrant versions,
d84 2
a85 5
.Fn getpwuid_r ,
behave similarly but the various strings associated with the result
are stored in
.Fa buf ,
and
d87 15
a101 1
is updated to reference those strings.
d203 1
a203 1
.Fa buflen
d228 1
@


1.7
log
@POSIX does not require an explicit inclusion of sys/types.h to get
uid_t or gid_t (and neither do we).  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: getpwnam.3,v 1.6 2014/03/12 11:36:06 schwarze Exp $
d30 1
a30 1
.Dd $Mdocdate: March 12 2014 $
d109 1
a109 3
Furthermore, programs that run child processes should be careful to call
.Xr endpwent 3
to close these descriptors before calling
d111 1
a111 2
or
.Xr system 3 .
@


1.6
log
@Add ERRORS and STANDARDS, thanks to brad@@ for the reminder.
Fix the description of the RETURN VALUES of get*_r().
Minor polishing while here.
Feedback and ok jmc@@, ok millert@@ jca@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: getpwnam.3,v 1.5 2014/01/21 03:15:45 schwarze Exp $
d30 1
a30 1
.Dd $Mdocdate: January 21 2014 $
a40 1
.In sys/types.h
@


1.5
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: getpwnam.3,v 1.4 2013/07/17 05:42:11 schwarze Exp $
d30 1
a30 1
.Dd $Mdocdate: July 17 2013 $
d88 1
a88 1
.Va buf ,
d90 1
a90 1
.Va pwstore
d126 1
a126 1
.Sh YP SUPPORT
d152 3
a154 2
return a valid pointer to a passwd structure on success
or a null pointer if end-of-file is reached or an error occurs.
d161 1
a161 1
.Va result
d163 7
a169 2
.Va pwstore
and then return 0 on success.
d185 30
d226 15
@


1.4
log
@more library history
facts checked by sobrado@@
style tweaks and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: getpwnam.3,v 1.3 2013/06/05 03:39:22 tedu Exp $
d30 1
a30 1
.Dd $Mdocdate: June 5 2013 $
d59 1
a59 1
.Aq Pa pwd.h :
@


1.3
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: getpwnam.3,v 1.2 2009/06/02 05:09:16 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: June 2 2009 $
d191 5
@


1.2
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: getpwnam.3,v 1.1 2009/06/01 21:52:03 millert Exp $
d30 1
a30 1
.Dd $Mdocdate: June 1 2009 $
d41 2
a42 2
.Fd #include <sys/types.h>
.Fd #include <pwd.h>
@


1.1
log
@Split getpw{nam,uid} off into their own man page.  Hopefully, this
will help people understand that endpwent() is not normally needed.
OK deraadt@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: getpwent.3,v 1.23 2008/10/22 20:31:20 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: October 22 2008 $
d96 1
a96 1
.Fn getpwent
d105 1
a105 1
.Fn endpwent .
d111 1
a111 1
.Fn endpwent
@

