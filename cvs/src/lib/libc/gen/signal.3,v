head	1.55;
access;
symbols
	OPENBSD_6_1:1.55.0.6
	OPENBSD_6_1_BASE:1.55
	OPENBSD_6_0:1.55.0.2
	OPENBSD_6_0_BASE:1.55
	OPENBSD_5_9:1.54.0.2
	OPENBSD_5_9_BASE:1.54
	OPENBSD_5_8:1.53.0.4
	OPENBSD_5_8_BASE:1.53
	OPENBSD_5_7:1.52.0.2
	OPENBSD_5_7_BASE:1.52
	OPENBSD_5_6:1.48.0.4
	OPENBSD_5_6_BASE:1.48
	OPENBSD_5_5:1.43.0.4
	OPENBSD_5_5_BASE:1.43
	OPENBSD_5_4:1.42.0.2
	OPENBSD_5_4_BASE:1.42
	OPENBSD_5_3:1.39.0.4
	OPENBSD_5_3_BASE:1.39
	OPENBSD_5_2:1.39.0.2
	OPENBSD_5_2_BASE:1.39
	OPENBSD_5_1_BASE:1.38
	OPENBSD_5_1:1.38.0.2
	OPENBSD_5_0:1.36.0.8
	OPENBSD_5_0_BASE:1.36
	OPENBSD_4_9:1.36.0.6
	OPENBSD_4_9_BASE:1.36
	OPENBSD_4_8:1.36.0.4
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.36.0.2
	OPENBSD_4_7_BASE:1.36
	OPENBSD_4_6:1.34.0.12
	OPENBSD_4_6_BASE:1.34
	OPENBSD_4_5:1.34.0.8
	OPENBSD_4_5_BASE:1.34
	OPENBSD_4_4:1.34.0.6
	OPENBSD_4_4_BASE:1.34
	OPENBSD_4_3:1.34.0.4
	OPENBSD_4_3_BASE:1.34
	OPENBSD_4_2:1.34.0.2
	OPENBSD_4_2_BASE:1.34
	OPENBSD_4_1:1.32.0.4
	OPENBSD_4_1_BASE:1.32
	OPENBSD_4_0:1.32.0.2
	OPENBSD_4_0_BASE:1.32
	OPENBSD_3_9:1.31.0.4
	OPENBSD_3_9_BASE:1.31
	OPENBSD_3_8:1.31.0.2
	OPENBSD_3_8_BASE:1.31
	OPENBSD_3_7:1.30.0.2
	OPENBSD_3_7_BASE:1.30
	OPENBSD_3_6:1.29.0.2
	OPENBSD_3_6_BASE:1.29
	OPENBSD_3_5:1.27.0.2
	OPENBSD_3_5_BASE:1.27
	OPENBSD_3_4:1.26.0.2
	OPENBSD_3_4_BASE:1.26
	OPENBSD_3_3:1.19.0.2
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.18.0.2
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.15.0.4
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.13.0.4
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.55
date	2016.05.28.18.56.37;	author tb;	state Exp;
branches;
next	1.54;
commitid	1KO8B48bnHl6Fokl;

1.54
date	2015.10.11.09.51.26;	author guenther;	state Exp;
branches;
next	1.53;
commitid	0izyLHkBROuZkWoO;

1.53
date	2015.05.12.02.44.06;	author guenther;	state Exp;
branches;
next	1.52;
commitid	2jg9IjkXCv2pgiQ5;

1.52
date	2014.11.17.00.11.05;	author guenther;	state Exp;
branches;
next	1.51;
commitid	0isMIfUHmTZ9wu3m;

1.51
date	2014.09.15.06.18.36;	author guenther;	state Exp;
branches;
next	1.50;
commitid	jF3OuNSjqMElSBXE;

1.50
date	2014.09.10.07.04.23;	author guenther;	state Exp;
branches;
next	1.49;
commitid	eB00qtTROvakT6om;

1.49
date	2014.08.31.01.42.36;	author guenther;	state Exp;
branches;
next	1.48;
commitid	zF5A8BuuSSyqaDyM;

1.48
date	2014.07.21.23.05.12;	author matthew;	state Exp;
branches;
next	1.47;
commitid	xgzk3NDDRWlpQ9DV;

1.47
date	2014.07.21.17.40.06;	author matthew;	state Exp;
branches;
next	1.46;
commitid	a3cEAjZWlfTPHeHd;

1.46
date	2014.07.19.08.55.22;	author matthew;	state Exp;
branches;
next	1.45;
commitid	celshWyKUo40Hq2E;

1.45
date	2014.07.18.19.24.42;	author matthew;	state Exp;
branches;
next	1.44;
commitid	e8H71sTbqvW0KDjO;

1.44
date	2014.05.23.15.37.23;	author millert;	state Exp;
branches;
next	1.43;

1.43
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.42;

1.42
date	2013.07.17.05.42.11;	author schwarze;	state Exp;
branches;
next	1.41;

1.41
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.40;

1.40
date	2013.04.22.21.33.16;	author tobias;	state Exp;
branches;
next	1.39;

1.39
date	2012.04.03.23.06.11;	author matthew;	state Exp;
branches;
next	1.38;

1.38
date	2012.01.19.17.35.42;	author espie;	state Exp;
branches;
next	1.37;

1.37
date	2011.09.03.22.59.07;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2010.02.25.17.10.34;	author schwarze;	state Exp;
branches;
next	1.35;

1.35
date	2009.12.16.07.36.56;	author guenther;	state Exp;
branches;
next	1.34;

1.34
date	2007.05.31.19.19.28;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2007.05.31.01.51.54;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2006.04.11.05.31.27;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2005.07.22.03.16.58;	author jaredy;	state Exp;
branches;
next	1.30;

1.30
date	2004.12.30.00.57.07;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2004.05.03.17.25.00;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2004.04.30.22.01.10;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2003.12.02.23.41.15;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2003.07.14.21.23.57;	author dhartmei;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.22.02.01.57;	author fgsch;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.22.01.36.38;	author fgsch;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2003.05.30.17.21.06;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2003.05.12.14.36.44;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2003.04.30.06.28.10;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2003.02.03.21.20.47;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2002.01.07.16.16.32;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.07.18.46.58;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2001.03.11.05.02.29;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.17.19.20.02;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.18.03.01.27;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.07.09.13.35.19;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.05.29.21.24.20;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.05.27.20.49.33;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.05.23.14.11.00;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.16.19.55.00;	author alex;	state Exp;
branches;
next	1.7;

1.7
date	99.05.10.17.56.28;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.02.27.21.55.17;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.07.23.21.04.07;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.12.13.21.24.12;	author michaels;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.26.07;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.39.28;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.58;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.55
log
@The synopsis rendered very poorly because of a "Quite Ugly but
syntactically correct" roff mess. Follow the mdoc style guide on
function pointers to improve this a little. Neglect and remove a
comment that advises against trying to fix this.

guidance and ok schwarze@@
@
text
@.\"	$OpenBSD: signal.3,v 1.54 2015/10/11 09:51:26 guenther Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: October 11 2015 $
.Dt SIGNAL 3
.Os
.Sh NAME
.Nm signal
.Nd simplified software signal facilities
.Sh SYNOPSIS
.In signal.h
.Ft void
.Fo "(*signal(int sigcatch, void (*func)(int sigraised)))"
.Fa int
.Fc
.Ft void
.Fo "(*bsd_signal(int sigcatch, void (*func)(int sigraised)))"
.Fa int
.Fc
.Sh DESCRIPTION
The
.Fn signal
and
.Fn bsd_signal
facilities are simplified interfaces to the more general
.Xr sigaction 2
facility.
The
.Fn bsd_signal
interface is provided for source compatibility only.
It is mainly used on systems where the standard
.Fn signal
does not have
.Bx
semantics.
On
.Ox
the two interfaces are identical.
.Pp
Signals allow the manipulation of a process from outside its
domain as well as allowing the process to manipulate itself or
copies of itself (children).
There are two general types of signals:
those that cause termination of a process and those that do not.
Signals which cause termination of a program might result from
an irrecoverable error or might be the result of a user at a terminal
typing the
.Dq interrupt
character.
.Pp
Signals are used when a process is stopped because it wishes to access
its control terminal while in the background (see
.Xr tty 4 ) .
Signals are optionally generated
when a process resumes after being stopped,
when the status of child processes changes,
or when input is ready at the control terminal.
Most signals result in the termination of the process receiving them
if no action
is taken; some signals instead cause the process receiving them
to be stopped, or are simply discarded if the process has not
requested otherwise.
.Pp
Except for the
.Dv SIGKILL
and
.Dv SIGSTOP
signals, the
.Fn signal
function allows for any signal to be caught, to be ignored, or to generate
an interrupt.
These signals are defined in the file
.In signal.h :
.Bl -column "SIGVTALRM" "create core image" "terminal line hangup"
.It Sy "Name" Ta Sy "Default Action" Ta Sy "Description"
.It Dv SIGHUP Ta "terminate process" Ta "terminal line hangup"
.It Dv SIGINT Ta "terminate process" Ta "interrupt program"
.It Dv SIGQUIT Ta "create core image" Ta "quit program"
.It Dv SIGILL Ta "create core image" Ta "illegal instruction"
.It Dv SIGTRAP Ta "create core image" Ta "trace trap"
.It Dv SIGABRT Ta "create core image" Ta "abort(3) call (formerly SIGIOT)"
.It Dv SIGEMT Ta "create core image" Ta "emulate instruction executed"
.It Dv SIGFPE Ta "create core image" Ta "floating-point exception"
.It Dv SIGKILL Ta "terminate process" Ta "kill program (cannot be caught or ignored)"
.It Dv SIGBUS Ta "create core image" Ta "bus error"
.It Dv SIGSEGV Ta "create core image" Ta "segmentation violation"
.It Dv SIGSYS Ta "create core image" Ta "system call given invalid argument"
.It Dv SIGPIPE Ta "terminate process" Ta "write on a pipe with no reader"
.It Dv SIGALRM Ta "terminate process" Ta "real-time timer expired"
.It Dv SIGTERM Ta "terminate process" Ta "software termination signal"
.It Dv SIGURG Ta "discard signal" Ta "urgent condition present on socket"
.It Dv SIGSTOP Ta "stop process" Ta "stop (cannot be caught or ignored)"
.It Dv SIGTSTP Ta "stop process" Ta "stop signal generated from keyboard"
.It Dv SIGCONT Ta "discard signal" Ta "continue after stop"
.It Dv SIGCHLD Ta "discard signal" Ta "child status has changed"
.It Dv SIGTTIN Ta "stop process" Ta "background read attempted from control terminal"
.It Dv SIGTTOU Ta "stop process" Ta "background write attempted to control terminal"
.It Dv SIGIO Ta "discard signal" Ta "I/O is possible on a descriptor (see"
.Xr fcntl 2 )
.It Dv SIGXCPU Ta "terminate process" Ta "CPU time limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGXFSZ Ta "terminate process" Ta "file size limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGVTALRM Ta "terminate process" Ta "virtual time alarm (see"
.Xr setitimer 2 )
.It Dv SIGPROF Ta "terminate process" Ta "profiling timer alarm (see"
.Xr setitimer 2 )
.It Dv SIGWINCH Ta "discard signal" Ta "window size change"
.It Dv SIGINFO Ta "discard signal" Ta "status request from keyboard"
.It Dv SIGUSR1 Ta "terminate process" Ta "user-defined signal 1"
.It Dv SIGUSR2 Ta "terminate process" Ta "user-defined signal 2"
.It Dv SIGTHR Ta "discard signal" Ta "thread AST"
.El
.Pp
The
.Fa func
argument is a function to be called as the action upon receipt of the signal
.Fa sigcatch .
The function will be called with one argument,
.Fa sigraised ,
which is the signal raised (thus the same function,
.Fa func ,
can be used by more than one signal).
To set the default action of the signal to occur as listed above,
.Fa func
should be
.Dv SIG_DFL .
A
.Dv SIG_DFL
resets the default action.
To ignore the signal,
.Fa func
should be
.Dv SIG_IGN .
This will cause subsequent instances of the signal to be ignored
and pending instances to be discarded.
If
.Dv SIG_IGN
is not used,
further occurrences of the signal are
automatically blocked and
.Fa func
is called.
.Pp
If the
.Fa func
is set to
.Dv SIG_IGN
for the
.Dv SIGCHLD
signal, the system will not create zombie processes when children of
the calling process exit.
If the calling process subsequently issues a
.Xr wait 2
(or equivalent), it blocks until all of the calling process's child
processes terminate, and then returns a value of \-1 with
.Va errno
set to
.Dv ECHILD .
.Bf -symbolic
This differs from historical
.Bx
behavior but is consistent with
.At V
as well as the
.St -xpg4.2 .
.Ef
.Pp
The handled signal is unblocked when
.Fa func
returns and
the process continues from where it left off when the signal occurred.
.Bf -symbolic
Unlike previous signal facilities, the handler
func() remains installed after a signal has been delivered.
.Ef
.Pp
For some system calls, if a signal is caught while the call is
executing and the call is prematurely terminated,
the call is automatically restarted.
(The handler is installed using the
.Dv SA_RESTART
flag with
.Xr sigaction 2 . )
The affected system calls include
.Xr read 2 ,
.Xr write 2 ,
.Xr sendto 2 ,
.Xr recvfrom 2 ,
.Xr sendmsg 2 ,
and
.Xr recvmsg 2
on a communications channel or a low-speed device
and during a
.Xr ioctl 2
or
.Xr wait 2 .
However, calls that have already committed are not restarted,
but instead return a partial success (for example, a short read count).
The
.Xr siginterrupt 3
function can be used to change the system call restart behavior for
a specific signal.
.Pp
When a process which has installed signal handlers forks,
the child process inherits the signals.
All caught signals, as well as
.Dv SIGCHLD ,
are reset to their default action by a call
to the
.Xr execve 2
function;
other
ignored signals remain ignored.
.Pp
The following functions are either reentrant or not interruptible
by signals and are async-signal-safe.
Therefore applications may
invoke them, without restriction, from signal-catching functions:
.Pp
Standard Interfaces:
.Pp
.Fn _exit ,
.Fn _Exit ,
.Fn abort ,
.Fn accept ,
.Fn access ,
.Fn alarm ,
.Fn bind ,
.Fn cfgetispeed ,
.Fn cfgetospeed ,
.Fn cfsetispeed ,
.Fn cfsetospeed ,
.Fn chdir ,
.Fn chmod ,
.Fn chown ,
.Fn clock_gettime ,
.Fn close ,
.Fn connect ,
.Fn creat ,
.Fn dup ,
.Fn dup2 ,
.Fn execl ,
.Fn execle ,
.Fn execv ,
.Fn execve ,
.Fn faccessat ,
.Fn fchdir ,
.Fn fchmod ,
.Fn fchmodat ,
.Fn fchown ,
.Fn fchownat ,
.Fn fcntl ,
.Fn fdatasync ,
.Fn fork ,
.Fn fpathconf ,
.Fn fstat ,
.Fn fstatat ,
.Fn fsync ,
.Fn ftruncate ,
.Fn futimens ,
.Fn futimes ,
.Fn getegid ,
.Fn geteuid ,
.Fn getgid ,
.Fn getgroups ,
.Fn getpeername ,
.Fn getpgrp ,
.Fn getpid ,
.Fn getppid ,
.Fn getsockname ,
.Fn getsockopt ,
.Fn getuid ,
.Fn kill ,
.Fn link ,
.Fn linkat ,
.Fn listen ,
.Fn lseek ,
.Fn lstat ,
.Fn mkdir ,
.Fn mkdirat ,
.Fn mkfifo ,
.Fn mkfifoat ,
.Fn mknod ,
.Fn mknodat ,
.Fn open ,
.Fn openat ,
.Fn pathconf ,
.Fn pause ,
.Fn pipe ,
.Fn poll ,
.Fn pselect ,
.Fn pthread_sigmask ,
.Fn raise ,
.Fn read ,
.Fn readlink ,
.Fn readlinkat ,
.Fn recv ,
.Fn recvfrom ,
.Fn recvmsg ,
.Fn rename ,
.Fn renameat ,
.Fn rmdir ,
.Fn select ,
.Fn send ,
.Fn sendmsg ,
.Fn sendto ,
.Fn setgid ,
.Fn setpgid ,
.Fn setsid ,
.Fn setsockopt ,
.Fn setuid ,
.Fn shutdown ,
.Fn sigaction ,
.Fn sigaddset ,
.Fn sigdelset ,
.Fn sigemptyset ,
.Fn sigfillset  ,
.Fn sigismember ,
.Fn signal ,
.Fn sigpause ,
.Fn sigpending ,
.Fn sigprocmask ,
.Fn sigsuspend ,
.Fn sleep ,
.Fn sockatmark ,
.Fn socket ,
.Fn socketpair ,
.Fn stat ,
.Fn strcat ,
.Fn strcpy ,
.Fn strncat ,
.Fn strncpy ,
.Fn symlink ,
.Fn symlinkat ,
.Fn sysconf ,
.Fn tcdrain ,
.Fn tcflow ,
.Fn tcflush ,
.Fn tcgetattr ,
.Fn tcgetpgrp ,
.Fn tcsendbreak ,
.Fn tcsetattr ,
.Fn tcsetpgrp ,
.Fn time ,
.Fn times ,
.Fn umask ,
.Fn uname ,
.Fn unlink ,
.Fn unlinkat ,
.Fn utime ,
.Fn utimensat ,
.Fn utimes ,
.Fn wait ,
.Fn waitpid ,
.Fn write ,
and perhaps some others.
.\" unimplemented functions that should be async-sig-safe, if we had them
.\" POSIX Issue 7 additions
.\" .Pp
.\" .Fn fexecve .
.\"
.\" Realtime Interfaces:
.\" .Pp
.\" .Fn aio_error ,
.\" .Fn aio_return ,
.\" .Fn aio_suspend ,
.\" .Fn sem_post ,
.\" .Fn sigqueue ,
.\" .Fn timer_getoverrun ,
.\" .Fn timer_gettime ,
.\" .Fn timer_settime .
.Pp
Extension Interfaces:
.Pp
.Fn accept4 ,
.Fn chflags ,
.Fn chflagsat ,
.Fn dup3 ,
.Fn fchflags ,
.Fn getentropy ,
.Fn getresgid ,
.Fn getresuid ,
.Fn pipe2 ,
.Fn ppoll ,
.Fn sendsyslog ,
.Fn setresgid ,
.Fn setresuid ,
.Fn strlcat ,
.Fn strlcpy ,
.Fn wait3 ,
.Fn wait4 .
.Pp
In addition, access and updates to
.Va errno
are guaranteed to be safe.
Most functions not in the above lists are considered to be unsafe
with respect to signals.
That is to say, the behaviour of such functions when called from
a signal handler is undefined.
In general though, signal handlers should do little more than set a
flag, ideally of type volatile sig_atomic_t; most other actions are not safe.
.Pp
Additionally, it is advised that signal handlers guard against
modification of the external symbol
.Va errno
by the above functions, saving it at entry and restoring
it on return, thus:
.Bd -literal -offset indent
void
handler(int sig)
{
	int save_errno = errno;

	...
	errno = save_errno;
}
.Ed
.Pp
The functions below are async-signal-safe in
.Ox
except when used with floating-point arguments or directives,
but are probably unsafe on other systems:
.Pp
.Bl -tag -offset indent -compact -width foofoofoofoo
.It Fn dprintf
Safe.
.It Fn vdprintf
Safe.
.It Fn snprintf
Safe.
.It Fn vsnprintf
Safe.
.It Fn syslog_r
Safe if the
.Va syslog_data
struct is initialized as a local variable.
.El
.Sh RETURN VALUES
The previous action is returned on a successful call.
Otherwise,
.Dv SIG_ERR
is returned and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn signal
will fail and no action will take place if one of the
following occurs:
.Bl -tag -width Er
.It Bq Er EINVAL
A specified signal
is not a valid signal number.
.It Bq Er EINVAL
An attempt is made to ignore or supply a handler for
.Dv SIGKILL
or
.Dv SIGSTOP .
.El
.Sh SEE ALSO
.Xr kill 1 ,
.Xr kill 2 ,
.Xr ptrace 2 ,
.Xr sigaction 2 ,
.Xr sigaltstack 2 ,
.Xr sigprocmask 2 ,
.Xr sigsuspend 2 ,
.Xr setjmp 3 ,
.Xr siginterrupt 3 ,
.Xr tty 4
.Sh HISTORY
A
.Fn signal
system call first appeared in
.At v4 .
In
.Bx 4.2 ,
it was reimplemented as a wrapper around the former
.Fn sigvec
system call, and for
.Bx 4.3 Reno ,
it was rewritten to use
.Xr sigaction 2
instead.
@


1.54
log
@Document that execve(2) resets SIGCHLD to SIG_DFL

wordsmithing and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.53 2015/05/12 02:44:06 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: May 12 2015 $
a37 2
.\" The following is Quite Ugly, but syntactically correct.
.\" Don't try to fix it.
d39 3
a41 1
.Fn \*(lp*signal "int sigcatch" "void \*(lp*func\*(rp\*(lpint sigraised\*(rp\*(rp\*(rp\*(lpint"
d43 3
a45 1
.Fn \*(lp*bsd_signal "int sigcatch" "void \*(lp*func\*(rp\*(lpint sigraised\*(rp\*(rp\*(rp\*(lpint"
@


1.53
log
@chflagsat() is also async-signal-safe
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.52 2014/11/17 00:11:05 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: November 17 2014 $
d231 3
a233 1
All caught signals may be reset to their default action by a call
d237 1
@


1.52
log
@When listing the async-signal-safe functions, don't split out "ANSI C"
functions; the concept comes from POSIX anyway.

With tweaks from schwarze@@
ok deraadt@@, jmc@@, millert@@, schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.51 2014/09/15 06:18:36 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: September 15 2014 $
d399 1
@


1.51
log
@We missed a hyphen in 'async-signal-safe'

Noted by Jean-Philippe Ouellet (jean-philippe (at) ouellet.biz)
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.50 2014/09/10 07:04:23 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: September 10 2014 $
d242 1
a242 1
Base Interfaces:
d245 1
d275 1
d351 4
d377 2
a378 2
.Fn write .
.Pp
a388 1
.\" .Fn fdatasync ,
a393 9
ANSI C Interfaces:
.Pp
.Fn _Exit ,
.Fn raise ,
.Fn strcat ,
.Fn strcpy ,
.Fn strncat ,
.Fn strncpy ,
and perhaps some others.
@


1.50
log
@sockatmark(3) has been implemented; add it to the async-signal-safe lists
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.49 2014/08/31 01:42:36 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: August 31 2014 $
d238 1
a238 1
by signals and are async-signal safe.
@


1.49
log
@Add additional kernel interfaces for setting close-on-exec on fds
when creating them: pipe2(), dup3(), accept4(), MSG_CMSG_CLOEXEC,
SOCK_CLOEXEC.  Includes SOCK_NONBLOCK support.

ok matthew@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.48 2014/07/21 23:05:12 matthew Exp $
d30 1
a30 1
.Dd $Mdocdate: July 21 2014 $
d345 1
a373 3
.\" POSIX Issue 6 additions
.\" .Fn sockatmark .
.\"
@


1.48
log
@Add pthread_sigmask() and raise() to the list of async signal safe
functions, per POSIX Issue 7

ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.47 2014/07/21 17:40:06 matthew Exp $
d403 1
d405 1
d410 1
d412 1
@


1.47
log
@Fix typo: s/lstate/lstat/
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.46 2014/07/19 08:55:22 matthew Exp $
d30 1
a30 1
.Dd $Mdocdate: July 19 2014 $
d312 2
@


1.46
log
@Document that abort() is async signal safe now that it doesn't flush
stdio buffers

While here replace "SUSv[67]" with "POSIX Issue [67]" and update
signal(3) to mention that pselect() and ppoll() are async signal safe
like sigaction(2) already does.

ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.45 2014/07/18 19:24:42 matthew Exp $
d30 1
a30 1
.Dd $Mdocdate: July 18 2014 $
d298 1
a298 1
.Fn lstate ,
@


1.45
log
@Oops, getentropy() is an "extension interface", not a "base interface"

Also, update the async signal safe list in signal(3) too (reminded by
deraadt)
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.44 2014/05/23 15:37:23 millert Exp $
d30 1
a30 1
.Dd $Mdocdate: May 23 2014 $
d245 1
a245 2
.\" SUSv7 says abort() is safe, but since it flushes stdio buffers,
.\" that's not practical
d311 1
d371 1
a371 2
.\" SUSv[56] additions
.\" .Fn pselect ,
d374 1
a374 1
.\" SUSv7 additions
d406 1
@


1.44
log
@Document that v?dprintf() is just as safe as v?snprintf().  OK espie@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.43 2014/01/21 03:15:45 schwarze Exp $
d30 1
a30 1
.Dd $Mdocdate: January 21 2014 $
d404 1
@


1.43
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.42 2013/07/17 05:42:11 schwarze Exp $
d30 1
a30 1
.Dd $Mdocdate: July 17 2013 $
d445 4
@


1.42
log
@more library history
facts checked by sobrado@@
style tweaks and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.41 2013/06/05 03:39:22 tedu Exp $
d30 1
a30 1
.Dd $Mdocdate: June 5 2013 $
d97 1
a97 1
.Aq Pa signal.h :
@


1.41
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.40 2013/04/22 21:33:16 tobias Exp $
d30 1
a30 1
.Dd $Mdocdate: April 22 2013 $
d487 1
a487 1
This
d489 11
a499 2
facility appeared in
.Bx 4.0 .
@


1.40
log
@Fixed typo.

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.39 2012/04/03 23:06:11 matthew Exp $
d30 1
a30 1
.Dd $Mdocdate: April 3 2012 $
d37 1
a37 1
.Fd #include <signal.h>
@


1.39
log
@Document that openat(), etc are safe to call from a signal handler.
While here, recognize that _Exit() and raise() are C functions.

ok deraadt@@, guenther@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.38 2012/01/19 17:35:42 espie Exp $
d30 1
a30 1
.Dd $Mdocdate: January 19 2012 $
d364 1
a364 1
.Fn utimensat .
@


1.38
log
@symetry
ok jmc@@, millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.37 2011/09/03 22:59:07 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: September 3 2011 $
a243 1
.Fn _Exit ,
d268 1
d271 1
d273 1
d278 1
d281 1
d296 1
d301 1
d303 1
d305 1
d307 1
a311 1
.Fn raise ,
d314 1
d319 1
d347 1
d362 1
d364 1
d377 1
a377 16
.\" .Fn faccessat ,
.\" .Fn fchmodat ,
.\" .Fn fchownat ,
.\" .Fn fexecve ,
.\" .Fn fstatat ,
.\" .Fn futimens ,
.\" .Fn linkat ,
.\" .Fn mkdirat ,
.\" .Fn mkfifoat ,
.\" .Fn mknodat ,
.\" .Fn openat ,
.\" .Fn readlinkat ,
.\" .Fn renameat ,
.\" .Fn symlinkat ,
.\" .Fn unlinkat ,
.\" .Fn utimensat .
d392 2
@


1.37
log
@make -column lists pretty again;

specifically, rewrite them to permit some markup in the column headers,
and use "Ta" instead of literal tabs; mandoc does not currently match groff
100%, but a mandoc fix may be some time off, and we've gone enough releases
with poorly formatting column lists.

in some cases i have rewritten the lists as -tag, where -column made
little sense.
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.36 2010/02/25 17:10:34 schwarze Exp $
d30 1
a30 1
.Dd $Mdocdate: February 25 2010 $
d108 1
a108 1
.It Dv SIGKILL Ta "terminate process" Ta "kill program"
@


1.36
log
@Do not attempt to silently continue text for the last column of tables
generated by .Bl -column .It <tab> on following lines.  This is a
workaround; fixing it properly in a way compatible with our old groff
would require .Xo support for .Bl -column phrases in mandoc(1), which
is too much work right now just to fix exactly this one place in our tree.

ok jmc@@

This commit fixes the last issue i'm aware of which prevented building
our whole tree with mandoc.  Not all pages format nicely yet, but
none kill the build any more.
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.35 2009/12/16 07:36:56 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: December 16 2009 $
d98 25
a122 26
.Bl -column SIGVTALA "create core imag"
.It Sy "Name	Default Action	Description"
.It Dv SIGHUP No "	terminate process" "	terminal line hangup"
.It Dv SIGINT No "	terminate process" "	interrupt program"
.It Dv SIGQUIT No "	create core image" "	quit program"
.It Dv SIGILL No "	create core image" "	illegal instruction"
.It Dv SIGTRAP No "	create core image" "	trace trap"
.It Dv SIGABRT No "	create core image" "	abort(3) call (formerly SIGIOT)"
.It Dv SIGEMT No "	create core image" "	emulate instruction executed"
.It Dv SIGFPE No "	create core image" "	floating-point exception"
.It Dv SIGKILL No "	terminate process" "	kill program"
.It Dv SIGBUS No "	create core image" "	bus error"
.It Dv SIGSEGV No "	create core image" "	segmentation violation"
.It Dv SIGSYS No "	create core image" "	system call given invalid argument"
.It Dv SIGPIPE No "	terminate process" "	write on a pipe with no reader"
.It Dv SIGALRM No "	terminate process" "	real-time timer expired"
.It Dv SIGTERM No "	terminate process" "	software termination signal"
.It Dv SIGURG No "	discard signal" "	urgent condition present on socket"
.It Dv SIGSTOP No "	stop process" "	stop (cannot be caught or ignored)"
.It Dv SIGTSTP No "	stop process" "	stop signal generated from keyboard"
.It Dv SIGCONT No "	discard signal" "	continue after stop"
.It Dv SIGCHLD No "	discard signal" "	child status has changed"
.It Dv SIGTTIN No "	stop process" "	background read attempted from control terminal"
.It Dv SIGTTOU No "	stop process" "	background write attempted to control terminal"
.It Dv SIGIO No "	discard signal" Tn "	I/O"
is possible on a descriptor (see
d124 1
a124 1
.It Dv SIGXCPU No "	terminate process" "	CPU time limit exceeded (see"
d126 1
a126 1
.It Dv SIGXFSZ No "	terminate process" "	file size limit exceeded (see"
d128 1
a128 1
.It Dv SIGVTALRM No "	terminate process" "	virtual time alarm (see"
d130 1
a130 1
.It Dv SIGPROF No "	terminate process" "	profiling timer alarm (see"
d132 5
a136 5
.It Dv SIGWINCH No "	discard signal" "	window size change"
.It Dv SIGINFO No "	discard signal" "	status request from keyboard"
.It Dv SIGUSR1 No "	terminate process" "	user-defined signal 1"
.It Dv SIGUSR2 No "	terminate process" "	user-defined signal 2"
.It Dv SIGTHR No "	discard signal" "	thread AST"
@


1.35
log
@Update the list of async-signal-safe functions
Document that snprintf/vsnprintf/syslog_r() aren't async-signal-safe
	for floating-point
Provide cursory documentation of SIGTHR
Eliminate the NOTE section of the sigaction(2) manpage by merging the
	good bits into the STANDARDS section

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.34 2007/05/31 19:19:28 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 31 2007 $
d105 1
a105 3
.It Dv SIGABRT No "	create core image" Xr 	abort 3
call (formerly
.Dv SIGIOT )
@


1.34
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.33 2007/05/31 01:51:54 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate$
d139 1
d241 1
a241 1
by signals and are asynchronous-signal safe.
d247 1
d249 3
d254 1
d262 1
d264 1
d268 1
d270 1
d272 3
d280 2
d286 1
d290 2
d295 1
d297 1
d300 1
d305 1
d308 4
d314 4
d321 1
d323 1
d328 1
a328 1
.Fn sigfillset ,
d331 1
d336 2
d339 1
d355 1
d360 35
a394 15
Realtime Interfaces:
.Pp
.Fn aio_error ,
.Fn clock_gettime ,
.Fn sigpause ,
.Fn timer_getoverrun ,
.Fn aio_return ,
.Fn fdatasync ,
.Fn sigqueue ,
.Fn timer_gettime ,
.Fn aio_suspend ,
.Fn sem_post ,
.Fn sigset ,
.Fn timer_settime .
.Pp
d397 1
d399 1
a399 1
.Fn strcat ,
a400 1
.Fn strncat ,
d405 7
d413 2
a414 1
.Fn strlcat .
d416 3
d421 2
a422 2
That is to say, the behaviour of such functions when called from a
signal handler is undefined.
d424 1
a424 1
flag; most other actions are not safe.
d426 2
a427 2
Additionally, inside the signal handler it is also considered more safe to
make a copy of the global variable
d429 12
a440 1
and restore it before returning from the signal handler.
d442 1
a442 1
A few other functions are signal race safe in
d444 2
a445 1
but probably not on other systems:
@


1.33
log
@asyncronous -> asynchronous;
from Chad Dougherty, documentation/5493
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.32 2006/04/11 05:31:27 deraadt Exp $
d30 1
a30 1
.Dd April 19, 1994
@


1.32
log
@duplicate in the safe list
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.31 2005/07/22 03:16:58 jaredy Exp $
d240 1
a240 1
by signals and are asyncronous-signal safe.
@


1.31
log
@- sync prototypes and header file excerpts to reality
- many grammar, punctuation, macro, layout, spelling/typos,
  rewording, etc. fixes
- avoid first person
- sprinkle crossrefs where relevant

help & ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.30 2004/12/30 00:57:07 jmc Exp $
d349 1
a349 2
.Fn strlcat ,
.Fn syslog_r .
@


1.30
log
@SIGSTOP needs .Dv, not .Ev;
from freebsd pr docs/75615;
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.29 2004/05/03 17:25:00 millert Exp $
d41 1
a41 1
.Fn \*(lp*signal "int sigcatch" "void \*(lp*func\*(rp\*(lpint sigraised\*(rp\*(rp\*(rp \*(lpint"
d43 1
a43 1
.Fn \*(lp*bsd_signal "int sigcatch" "void \*(lp*func\*(rp\*(lpint sigraised\*(rp\*(rp\*(rp \*(lpint"
d98 1
a98 1
.Bl -column SIGVTALARMXX "create core imagexxx"
d240 1
a240 1
by signals and are async-signal safe.
d381 1
a381 1
.Fa SIG_ERR
d388 1
a388 1
following occur:
@


1.29
log
@XPG specifies bsd_signal(3) so make it an alias for signal(3); OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.28 2004/04/30 22:01:10 millert Exp $
d397 1
a397 1
.Ev SIGSTOP .
@


1.28
log
@Mention siginterrupt; OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.27 2003/12/02 23:41:15 deraadt Exp $
d38 2
d41 3
a43 5
.\" can not do this with just .Fn yet
.\" .br
.\" .Po
.Fn (*signal "int sigcatch" "void (*func)(int sigraised))) (int"
.\" .Pc Ns \*(lp\*(rp
d47 3
a49 2
facility
is a simplified interface to the more general
d52 11
@


1.27
log
@actually snprintf/vsnprintf are now signal race safe
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.26 2003/07/14 21:23:57 dhartmei Exp $
d214 4
d396 1
@


1.26
log
@-make a copy the global variable
+make a copy of the global variable
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.25 2003/06/22 02:01:57 fgsch Exp $
d354 3
a356 1
Safe as long as $n positional arguments are not used.
@


1.25
log
@whatever happened, i cannot explain it. rollback my stupid
good-for-nothing commit. my apologies.
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.23 2003/06/02 20:18:35 millert Exp $
d344 1
a344 1
make a copy the global variable
@


1.24
log
@fix prototype; from Pedro Bastos.
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.22 2003/05/30 17:21:06 jmc Exp $
d42 1
a42 1
.Fn (*signal "int sigcatch" "void (*func)(int sigraised)))(int
@


1.23
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d42 1
a42 1
.Fn (*signal "int sigcatch" "void (*func)(int sigraised))) (int"
@


1.22
log
@- correct macro usage
- section reorder
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.21 2003/05/12 14:36:44 jmc Exp $
d14 1
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.21
log
@cpu -> CPU
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.20 2003/04/30 06:28:10 jmc Exp $
a363 1
.Pp
@


1.20
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.19 2003/02/03 21:20:47 deraadt Exp $
d119 1
a119 1
.It Dv SIGXCPU No "	terminate process" "	cpu time limit exceeded (see"
@


1.19
log
@some more functions that are (only on OpenBSD) safe in signal handlers.
not having access to these makes things really painful
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.18 2002/04/30 16:31:42 mpech Exp $
d284 1
a284 1
.Fn sigfillset  ,
d347 1
a347 1
As well, inside the signal handler it is also considered more safe to
@


1.18
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.17 2002/01/07 16:16:32 millert Exp $
d340 1
a340 1
All functions not in the above lists are considered to be unsafe
d351 14
@


1.17
log
@If the handler for SIGCHLD is set to SIG_IGN, act as if the
SA_NOCLDWAIT (don't create zombies) flag has been specified.  This
is consistent with most other operating systems and is what XPG4.2
specifies.
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.16 2001/11/07 18:46:58 deraadt Exp $
d349 1
a349 1
.Va errno 
@


1.16
log
@list syslog_r as safe in signal handlers
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.15 2001/03/11 05:02:29 aaron Exp $
d162 24
@


1.15
log
@mdoc police.
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.14 2001/01/17 19:20:02 deraadt Exp $
d313 2
a314 1
.Fn strlcat .
@


1.14
log
@first cut at "what is allowed in a signal handler, based on but extended from FreeBSD list
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.13 2000/04/18 03:01:27 aaron Exp $
d316 3
a318 2
with respect to signals.  That is to say, the behaviour of such
functions when called from a signal handler is undefined.
d320 1
a320 1
flag; most other actions are not safe.  
@


1.13
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.12 1999/07/09 13:35:19 aaron Exp $
d202 123
@


1.12
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.11 1999/05/29 21:24:20 aaron Exp $
d58 2
a59 1
copies of itself (children). There are two general types of signals:
d154 2
a155 1
and pending instances to be discarded. If
@


1.11
log
@repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.10 1999/05/27 20:49:33 aaron Exp $
d161 1
a161 1
The handled signal is unblocked when 
d202 1
a202 1
Otherwise, 
d234 1
a234 1
facility appeared in 
@


1.10
log
@more missing .El macros filled in
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.9 1999/05/23 14:11:00 aaron Exp $
d62 4
a65 1
typing the `interrupt' character.
d78 1
d90 1
a90 1
.It Sy "  Name	" "	  Default Action  " "		      Description"
d126 1
a126 1
.It Dv SIGWINCH No "	discard signal" "	Window size change"
d128 2
a129 2
.It Dv SIGUSR1 No "	terminate process" "	User defined signal 1"
.It Dv SIGUSR2 No "	terminate process" "	User defined signal 2"
d134 1
a134 1
function allows a user to choose the action upon receipt of the signal,
d138 1
a138 1
which is the signal raised.  (thus the same function,
d140 1
a140 1
can be used by more than one signal.)
d182 1
a182 1
.Xr sendmsg 2
d185 1
a185 1
on a communications channel or a low speed device
d213 1
a213 1
.Em Sig
d233 1
a233 1
.Nm signal
@


1.9
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.8 1999/05/16 19:55:00 alex Exp $
d216 1
@


1.8
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.7 1999/05/10 17:56:28 aaron Exp $
d36 1
a36 1
.Os BSD 4
@


1.7
log
@correct some Xr's which referred to the wrong man page sections
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.6 1999/02/27 21:55:17 deraadt Exp $
d218 1
a219 1
.Xr kill 2 ,
@


1.6
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.5 1997/07/23 21:04:07 kstailey Exp $
d92 1
a92 1
.It Dv SIGABRT No "	create core image" Xr 	abort 2
@


1.5
log
@tabify
@
text
@d1 1
a1 1
.\"	$OpenBSD: signal.3,v 1.4 1996/12/13 21:24:12 michaels Exp $
d204 1
a204 1
.Xr Signal
@


1.4
log
@correct function declaration and return
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d86 1
a86 1
.It Sy "  Name  " "	  Default Action  " "	              Description"
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d44 4
a47 4
.br
.Po
.Fn *signal "int sig" "void (*func)()"
.Pc Ns \*(lp\*(rp
d49 1
a49 1
This
d81 1
a81 1
function allows for a signal to be caught, to be ignored, or to generate
d130 7
a136 1
procedure allows a user to choose the action upon receipt of a signal.
d144 1
a144 1
To ignore the signal
d157 3
a159 2
The handled signal is unblocked with the
function returns and
d198 3
a200 1
Otherwise, \-1 is returned and  the global variable
@


1.2
log
@sync to netbsd 960418
@
text
@a1 1
.\"	$NetBSD: signal.3,v 1.6 1996/03/26 02:05:55 jtc Exp $
a32 2
.\"
.\"     @@(#)signal.3	8.3 (Berkeley) 4/19/94
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
.\"	$NetBSD: signal.3,v 1.5 1995/02/27 05:51:12 cgd Exp $
d46 1
a46 3
.Fn *signal sig func\*(lp\*(rp
.Ft void
.\" can not do this with .Fn yet
d48 3
a50 1
\*(lp\|\*(fN*func\*(rp\*(lp\|\*(rp\fR
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
