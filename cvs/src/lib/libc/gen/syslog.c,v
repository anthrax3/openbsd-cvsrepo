head	1.33;
access;
symbols
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.33.0.4
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.33.0.2
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.31.0.20
	OPENBSD_5_8_BASE:1.31
	OPENBSD_5_7:1.31.0.12
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.31.0.16
	OPENBSD_5_6_BASE:1.31
	OPENBSD_5_5:1.31.0.14
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.31.0.10
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.31.0.8
	OPENBSD_5_3_BASE:1.31
	OPENBSD_5_2:1.31.0.6
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.4
	OPENBSD_5_0:1.31.0.2
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.30.0.6
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.30.0.4
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.30.0.2
	OPENBSD_4_7_BASE:1.30
	OPENBSD_4_6:1.29.0.10
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.29.0.6
	OPENBSD_4_5_BASE:1.29
	OPENBSD_4_4:1.29.0.4
	OPENBSD_4_4_BASE:1.29
	OPENBSD_4_3:1.29.0.2
	OPENBSD_4_3_BASE:1.29
	OPENBSD_4_2:1.28.0.10
	OPENBSD_4_2_BASE:1.28
	OPENBSD_4_1:1.28.0.8
	OPENBSD_4_1_BASE:1.28
	OPENBSD_4_0:1.28.0.6
	OPENBSD_4_0_BASE:1.28
	OPENBSD_3_9:1.28.0.4
	OPENBSD_3_9_BASE:1.28
	OPENBSD_3_8:1.28.0.2
	OPENBSD_3_8_BASE:1.28
	OPENBSD_3_7:1.27.0.2
	OPENBSD_3_7_BASE:1.27
	OPENBSD_3_6:1.26.0.2
	OPENBSD_3_6_BASE:1.26
	OPENBSD_3_5:1.25.0.4
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	OPENBSD_3_3:1.24.0.2
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.8.0.8
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.33
date	2015.10.31.02.57.16;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	CLE0f1mZCJgLFjHQ;

1.32
date	2015.09.12.14.30.31;	author guenther;	state Exp;
branches;
next	1.31;
commitid	bIIajb0CCbQhTK6C;

1.31
date	2011.05.30.18.48.33;	author martynas;	state Exp;
branches;
next	1.30;

1.30
date	2009.11.18.07.43.22;	author guenther;	state Exp;
branches;
next	1.29;

1.29
date	2007.11.09.18.40.19;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2005.03.08.15.41.03;	author moritz;	state Exp;
branches;
next	1.26;

1.26
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2003.02.27.17.26.10;	author danh;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.07.21.47.14;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2003.01.20.20.10.26;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2003.01.02.19.39.07;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2002.11.24.01.49.37;	author cloder;	state Exp;
branches;
next	1.19;

1.19
date	2002.06.20.23.01.10;	author jjbg;	state Exp;
branches
	1.19.2.1;
next	1.18;

1.18
date	2002.06.05.17.13.49;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.05.26.09.29.02;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.18.00.07.56;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.02.16.21.27.23;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.31.14.24.11;	author fgsch;	state Exp;
branches;
next	1.12;

1.12
date	2001.10.24.08.16.42;	author jjbg;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.18.22.56.22;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.27.00.58.54;	author lebel;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.02.23.35.58;	author hugh;	state Exp;
branches;
next	1.8;

1.8
date	98.03.19.00.30.03;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.03.06.02.01.38;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	98.03.06.01.53.23;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	98.03.05.22.13.10;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	97.07.25.20.30.04;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.07.09.00.28.24;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.26.33;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.58;	author deraadt;	state Exp;
branches;
next	;

1.19.2.1
date	2003.03.12.02.05.13;	author margarida;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Do not include a timestamp in the syslog message.  There is no need --
syslogd will fill it in immediately upon reception on the other side of
sendsyslog(2).  Our libc only talks to our syslogd, which will fix the
timestamp before forwarding.  syslog_r has done this for a long time
already.
ok tedu bluhm
@
text
@/*	$OpenBSD: syslog.c,v 1.32 2015/09/12 14:30:31 guenther Exp $ */
/*
 * Copyright (c) 1983, 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdarg.h>
#include <syslog.h>
#include <time.h>

static struct syslog_data sdata = SYSLOG_DATA_INIT;

/*
 * syslog, vsyslog --
 *	print message on log file; output is intended for syslogd(8).
 */
void
syslog(int pri, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vsyslog(pri, fmt, ap);
	va_end(ap);
}
DEF_WEAK(syslog);

void
vsyslog(int pri, const char *fmt, va_list ap)
{
	__vsyslog_r(pri, &sdata, 0, fmt, ap);
}
DEF_WEAK(vsyslog);

void
openlog(const char *ident, int logstat, int logfac)
{
	openlog_r(ident, logstat, logfac, &sdata);
}

void
closelog(void)
{
	closelog_r(&sdata);
}

/* setlogmask -- set the log mask level */
int
setlogmask(int pmask)
{
	return (setlogmask_r(pmask, &sdata));
}

/* setlogmask -- set the log mask level */
int
setlogmask_r(int pmask, struct syslog_data *data)
{
	int omask;

	omask = data->log_mask;
	if (pmask != 0)
		data->log_mask = pmask;
	return (omask);
}
DEF_WEAK(setlogmask_r);
@


1.32
log
@Wrap <syslog.h> so that internal calls go direct and they're all weak symbols
Delete code that's a no-op now that we don't use sockets
Eliminate unnecessary #includes
@
text
@d1 1
a1 1
/*	$OpenBSD: syslog.c,v 1.31 2011/05/30 18:48:33 martynas Exp $ */
a37 10
static size_t
gettime(char *buf, size_t maxsize)
{
	time_t	now;

	(void)time(&now);
	return (strftime(buf, maxsize, "%h %e %T ", localtime(&now)));
}


d56 1
a56 1
	__vsyslog_r(pri, &sdata, &gettime, fmt, ap);
@


1.31
log
@Make printf-like and scanf-like functions marked as such in llib-lc.ln
and llib-lwrap.ln databases;  so that the lint features doing format
strings checks are enabled by default.

Looks good to millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: syslog.c,v 1.30 2009/11/18 07:43:22 guenther Exp $ */
d32 2
a33 11
#include <sys/socket.h>
#include <sys/syslog.h>
#include <sys/uio.h>
#include <sys/un.h>
#include <netdb.h>

#include <errno.h>
#include <fcntl.h>
#include <paths.h>
#include <stdio.h>
#include <string.h>
a34 2
#include <unistd.h>
#include <stdarg.h>
a37 3
void	__vsyslog_r(int pri, struct syslog_data *, size_t (*)(char *, size_t),
    const char *, va_list);

a51 1
/* PRINTFLIKE2 */
d61 1
d68 1
d86 1
a86 1
	return setlogmask_r(pmask, &sdata);
d100 1
@


1.30
log
@More shrinkage, a bit for ramdisks but mostly for static binaries:
- wrap with #ifndef NO_LOG_BAD_DNS_RESPONSES libc code that uses
  p_class() and p_type() for diagnostics, then add that define to
  libstub to avoid pulling in res_debug_syms.o
- split rcmd() and ruserok() into separate files, as nothing uses both
- split readdir_r() to its own file
- split syslog_r() from syslog(), as the latter needs localtime(); many
  binaries no longer need to pull in all the time code after this; switch
  from usleep() to nanosleep() while we're at it

(The profit of analysis of -Wl,-M,--cref output)

Chops 888kB from /bin and /sbin on i386

ok deraadt@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslog.c,v 1.29 2007/11/09 18:40:19 millert Exp $ */
d66 1
@


1.29
log
@Stash value of log_tag before calling closelog_r() and restore it after.
When closelog() was modified to clear log_tag it inadvertantly made
syslog_r() (which calls closelog_r at the end) clear log_tag as well.
OK miod@@ dhartmei@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslog.c,v 1.28 2005/08/08 08:05:34 espie Exp $ */
d49 11
a59 1
extern char	*__progname;		/* Program name, from crt0. */
a60 2
static void	disconnectlog_r(struct syslog_data *);	/* disconnect from syslogd */
static void	connectlog_r(struct syslog_data *);	/* (re)connect to syslogd */
d79 1
a79 1
	vsyslog_r(pri, &sdata, fmt, ap);
a98 261
}

/* Reentrant version of syslog, i.e. syslog_r() */

void
syslog_r(int pri, struct syslog_data *data, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vsyslog_r(pri, data, fmt, ap);
	va_end(ap);
}

void
vsyslog_r(int pri, struct syslog_data *data, const char *fmt, va_list ap)
{
	int cnt;
	char ch, *p, *t;
	time_t now;
	int fd, saved_errno, error;
#define	TBUF_LEN	2048
#define	FMT_LEN		1024
	char *stdp, tbuf[TBUF_LEN], fmt_cpy[FMT_LEN];
	int tbuf_left, fmt_left, prlen;

#define	INTERNALLOG	LOG_ERR|LOG_CONS|LOG_PERROR|LOG_PID
	/* Check for invalid bits. */
	if (pri & ~(LOG_PRIMASK|LOG_FACMASK)) {
		if (data == &sdata) {
			syslog(INTERNALLOG,
			    "syslog: unknown facility/priority: %x", pri);
		} else {
			syslog_r(INTERNALLOG, data,
			    "syslog_r: unknown facility/priority: %x", pri);
		}
		pri &= LOG_PRIMASK|LOG_FACMASK;
	}

	/* Check priority against setlogmask values. */
	if (!(LOG_MASK(LOG_PRI(pri)) & data->log_mask))
		return;

	saved_errno = errno;

	/* Set default facility if none specified. */
	if ((pri & LOG_FACMASK) == 0)
		pri |= data->log_fac;

	/* If we have been called through syslog(), no need for reentrancy. */
	if (data == &sdata)
		(void)time(&now);

	p = tbuf;
	tbuf_left = TBUF_LEN;

#define	DEC()	\
	do {					\
		if (prlen < 0)			\
			prlen = 0;		\
		if (prlen >= tbuf_left)		\
			prlen = tbuf_left - 1;	\
		p += prlen;			\
		tbuf_left -= prlen;		\
	} while (0)

	prlen = snprintf(p, tbuf_left, "<%d>", pri);
	DEC();

	/* 
	 * syslogd will expand time automagically for reentrant case, and
	 * for normal case, just do like before
	 */
	if (data == &sdata) {
		prlen = strftime(p, tbuf_left, "%h %e %T ", localtime(&now));
		DEC();
	}

	if (data->log_stat & LOG_PERROR)
		stdp = p;
	if (data->log_tag == NULL)
		data->log_tag = __progname;
	if (data->log_tag != NULL) {
		prlen = snprintf(p, tbuf_left, "%s", data->log_tag);
		DEC();
	}
	if (data->log_stat & LOG_PID) {
		prlen = snprintf(p, tbuf_left, "[%ld]", (long)getpid());
		DEC();
	}
	if (data->log_tag != NULL) {
		if (tbuf_left > 1) {
			*p++ = ':';
			tbuf_left--;
		}
		if (tbuf_left > 1) {
			*p++ = ' ';
			tbuf_left--;
		}
	}

	/* strerror() is not reentrant */

	for (t = fmt_cpy, fmt_left = FMT_LEN; (ch = *fmt); ++fmt) {
		if (ch == '%' && fmt[1] == 'm') {
			++fmt;
			if (data == &sdata) {
				prlen = snprintf(t, fmt_left, "%s",
				    strerror(saved_errno)); 
			} else {
				prlen = snprintf(t, fmt_left, "Error %d",
				    saved_errno); 
			}
			if (prlen < 0)
				prlen = 0;
			if (prlen >= fmt_left)
				prlen = fmt_left - 1;
			t += prlen;
			fmt_left -= prlen;
		} else if (ch == '%' && fmt[1] == '%' && fmt_left > 2) {
			*t++ = '%';
			*t++ = '%';
			fmt++;
			fmt_left -= 2;
		} else {
			if (fmt_left > 1) {
				*t++ = ch;
				fmt_left--;
			}
		}
	}
	*t = '\0';

	prlen = vsnprintf(p, tbuf_left, fmt_cpy, ap);
	DEC();
	cnt = p - tbuf;

	/* Output to stderr if requested. */
	if (data->log_stat & LOG_PERROR) {
		struct iovec iov[2];

		iov[0].iov_base = stdp;
		iov[0].iov_len = cnt - (stdp - tbuf);
		iov[1].iov_base = "\n";
		iov[1].iov_len = 1;
		(void)writev(STDERR_FILENO, iov, 2);
	}

	/* Get connected, output the message to the local logger. */
	if (!data->opened)
		openlog_r(data->log_tag, data->log_stat, 0, data);
	connectlog_r(data);

	/*
	 * If the send() failed, there are two likely scenarios:
	 *  1) syslogd was restarted
	 *  2) /dev/log is out of socket buffer space
	 * We attempt to reconnect to /dev/log to take care of
	 * case #1 and keep send()ing data to cover case #2
	 * to give syslogd a chance to empty its socket buffer.
	 */
	if ((error = send(data->log_file, tbuf, cnt, 0)) < 0) {
		if (errno != ENOBUFS) {
			disconnectlog_r(data);
			connectlog_r(data);
		}
		do {
			usleep(1);
			if ((error = send(data->log_file, tbuf, cnt, 0)) >= 0)
				break;
		} while (errno == ENOBUFS);
	}

	/*
	 * Output the message to the console; try not to block
	 * as a blocking console should not stop other processes.
	 * Make sure the error reported is the one from the syslogd failure.
	 */
	if (error == -1 && (data->log_stat & LOG_CONS) &&
	    (fd = open(_PATH_CONSOLE, O_WRONLY|O_NONBLOCK, 0)) >= 0) {
		struct iovec iov[2];
		
		p = strchr(tbuf, '>') + 1;
		iov[0].iov_base = p;
		iov[0].iov_len = cnt - (p - tbuf);
		iov[1].iov_base = "\r\n";
		iov[1].iov_len = 2;
		(void)writev(fd, iov, 2);
		(void)close(fd);
	}

	if (data != &sdata) {
		/* preserve log_tag from being cleared by closelog_r() */
		const char *ident = data->log_tag;
		closelog_r(data);
		data->log_tag = ident;
	}
}

static void
disconnectlog_r(struct syslog_data *data)
{
	/*
	 * If the user closed the FD and opened another in the same slot,
	 * that's their problem.  They should close it before calling on
	 * system services.
	 */
	if (data->log_file != -1) {
		close(data->log_file);
		data->log_file = -1;
	}
	data->connected = 0;		/* retry connect */
}

static void
connectlog_r(struct syslog_data *data)
{
	struct sockaddr_un SyslogAddr;	/* AF_UNIX address of local logger */

	if (data->log_file == -1) {
		if ((data->log_file = socket(AF_UNIX, SOCK_DGRAM, 0)) == -1)
			return;
		(void)fcntl(data->log_file, F_SETFD, 1);
	}
	if (data->log_file != -1 && !data->connected) {
		memset(&SyslogAddr, '\0', sizeof(SyslogAddr));
		SyslogAddr.sun_len = sizeof(SyslogAddr);
		SyslogAddr.sun_family = AF_UNIX;
		strlcpy(SyslogAddr.sun_path, _PATH_LOG,
		    sizeof(SyslogAddr.sun_path));
		if (connect(data->log_file, (struct sockaddr *)&SyslogAddr,
		    sizeof(SyslogAddr)) == -1) {
			(void)close(data->log_file);
			data->log_file = -1;
		} else
			data->connected = 1;
	}
}

void
openlog_r(const char *ident, int logstat, int logfac, struct syslog_data *data)
{
	if (ident != NULL)
		data->log_tag = ident;
	data->log_stat = logstat;
	if (logfac != 0 && (logfac &~ LOG_FACMASK) == 0)
		data->log_fac = logfac;

	if (data->log_stat & LOG_NDELAY)	/* open immediately */
		connectlog_r(data);

	data->opened = 1;	/* ident and facility has been set */
}

void
closelog_r(struct syslog_data *data)
{
	(void)close(data->log_file);
	data->log_file = -1;
	data->connected = 0;
	data->log_tag = NULL;
@


1.28
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d282 3
a284 1
	if (data != &sdata)
d286 2
@


1.27
log
@handle snprintf() returning -1.

ok cloder@@ henning@@ hshoexer@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: syslog.c,v 1.26 2004/05/18 02:05:52 jfb Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.26
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.25 2003/06/02 20:18:35 millert Exp $";
d207 2
@


1.25
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.24 2003/02/27 17:26:10 danh Exp $";
d72 1
a72 4
vsyslog(pri, fmt, ap)
	int pri;
	register const char *fmt;
	va_list ap;
d78 1
a78 3
openlog(ident, logstat, logfac)
	const char *ident;
	int logstat, logfac;
d84 1
a84 1
closelog()
d91 1
a91 2
setlogmask(pmask)
	int pmask;
d109 1
a109 5
vsyslog_r(pri, data, fmt, ap)
	int pri;
	struct syslog_data *data;
	const char *fmt;
	va_list ap;
d288 1
a288 2
disconnectlog_r(data)
	struct syslog_data *data;
d303 1
a303 2
connectlog_r(data)
	struct syslog_data *data;
d328 1
a328 4
openlog_r(ident, logstat, logfac, data)
	const char *ident;
	int logstat, logfac;
	struct syslog_data *data;
d343 1
a343 2
closelog_r(data)
	struct syslog_data *data;
d353 1
a353 3
setlogmask_r(pmask, data)
	int pmask;
	struct syslog_data *data;
@


1.24
log
@correctly check the return value of send().  fixes LOG_CONS from always
logging to the console.

ok millert@@
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.23 2003/02/07 21:47:14 millert Exp $";
@


1.23
log
@Don't write log message to console unless we are unable to connect to
syslogd.  Noticed by marc@@; OK by marc@@ and deraadt@@
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.22 2003/01/20 20:10:26 millert Exp $";
d284 1
a284 1
	if (error != 0 && (data->log_stat & LOG_CONS) &&
@


1.22
log
@Don't reconnect to logging socket if send() returns an error and errno
== ENOBUFS, there is no point and it hurts chroot'ed processes.

Don't return immediately from syslog_r() when the send(), we may
have more work to do.

deraadt@@ OK
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.21 2003/01/02 19:39:07 millert Exp $";
d58 2
a59 4
static void	disconnectlog(void);	/* disconnect from syslogd */
static void	connectlog(void);	/* (re)connect to syslogd */
static void	disconnectlog_r(struct syslog_data *); 
static void	connectlog_r(struct syslog_data *); 
a83 12
static void
disconnectlog()
{
	disconnectlog_r(&sdata);
}

static void
connectlog()
{
	connectlog_r(&sdata);
}

d128 1
a128 1
	int fd, saved_errno;
d267 1
a267 1
	if (send(data->log_file, tbuf, cnt, 0) < 0) {
d274 1
a274 1
			if (send(data->log_file, tbuf, cnt, 0) >= 0)
d284 1
a284 1
	if (data->log_stat & LOG_CONS &&
@


1.21
log
@Handle things like "%%m" correctly; closes PR 3057
OK miod@@
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.20 2002/11/24 01:49:37 cloder Exp $";
a271 2
	if (send(data->log_file, tbuf, cnt, 0) >= 0)
		return;
d281 11
a291 7
	disconnectlog_r(data);
	connectlog_r(data);
	do {
		usleep(1);
		if (send(data->log_file, tbuf, cnt, 0) >= 0)
			return;
	} while (errno == ENOBUFS);
d311 1
a311 1
	if (data != &sdata) {
a312 1
	}
@


1.20
log
@Fix instance where syslog(3) after closelog(3) could access freed log
tag name.

OK millert@@, deraadt@@
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.19 2002/06/20 23:01:10 jjbg Exp $";
d239 5
@


1.19
log
@Close log file when leaving syslog_r(). deraadt@@ ok
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.18 2002/06/05 17:13:49 millert Exp $";
d376 1
@


1.19.2.1
log
@Pull patches from current.
Fixes by millert and cloder.
Don't reconnect to logging socket if send() returns an error
and errno == ENOBUFS, there is no point and it hurts chroot'ed
processes.
Don't return immediately from syslog_r() when the send(), we may
have more work to do.
Handle things like "%%m" correctly; closed PR 3057.
Fix instance where syslog(3) after closelog(3) could access freed
log tag name.

ok millert@@
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.19 2002/06/20 23:01:10 jjbg Exp $";
d142 1
a142 1
	int fd, saved_errno, error;
a238 5
		} else if (ch == '%' && fmt[1] == '%' && fmt_left > 2) {
			*t++ = '%';
			*t++ = '%';
			fmt++;
			fmt_left -= 2;
d267 2
d278 7
a284 11
	if ((error = send(data->log_file, tbuf, cnt, 0)) < 0) {
		if (errno != ENOBUFS) {
			disconnectlog_r(data);
			connectlog_r(data);
		}
		do {
			usleep(1);
			if ((error = send(data->log_file, tbuf, cnt, 0)) >= 0)
				break;
		} while (errno == ENOBUFS);
	}
d291 1
a291 1
	if (error == -1 && (data->log_stat & LOG_CONS) &&
a375 1
	data->log_tag = NULL;
@


1.18
log
@If send() returns ENOBUFS, sleep for one microsecond and retry.
deraadt@@ OK
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.17 2002/05/26 09:29:02 deraadt Exp $";
d302 4
@


1.17
log
@pid_t cleanup
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.16 2002/02/19 19:39:36 millert Exp $";
d271 6
a276 2
	 * If the send() failed, the odds are syslogd was restarted.
	 * Make one (only) attempt to reconnect to /dev/log.
d280 5
a284 2
	if (send(data->log_file, tbuf, cnt, 0) >= 0)
		return;
@


1.16
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.15 2002/02/18 00:07:56 millert Exp $";
d209 1
a209 1
		prlen = snprintf(p, tbuf_left, "[%d]", getpid());
@


1.15
log
@Open console with O_NONBLOCK to avoid blocking on a locked console.
From David Malone
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.14 2002/02/16 21:27:23 millert Exp $";
a51 2

#ifdef __STDC__
a52 3
#else
#include <varargs.h>
#endif
a67 1
#ifdef __STDC__
a68 6
#else
syslog(pri, fmt, va_alist)
	int pri;
	char *fmt;
	va_dcl
#endif
a71 1
#ifdef __STDC__
a72 3
#else
	va_start(ap);
#endif
a122 1
#ifdef __STDC__
a123 7
#else
syslog_r(pri, data, fmt, va_alist)
	int pri;
	struct syslog_data *data;
	char *fmt;
	va_dcl
#endif
a126 1
#ifdef __STDC__
a127 3
#else
	va_start(ap);
#endif
@


1.14
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.13 2001/10/31 14:24:11 fgsch Exp $";
d308 3
a310 3
	 * Output the message to the console; don't worry about blocking,
	 * if console blocks everything will.  Make sure the error reported
	 * is the one from the syslogd failure.
d313 1
a313 1
	    (fd = open(_PATH_CONSOLE, O_WRONLY, 0)) >= 0) {
@


1.13
log
@Set default facility is noone is specified at syslog(3) time; millert@@ jj@@ ok.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.12 2001/10/24 08:16:42 jjbg Exp $";
d63 4
a66 4
static void	disconnectlog __P((void)); /* disconnect from syslogd */
static void	connectlog __P((void));	/* (re)connect to syslogd */
static void	disconnectlog_r __P((struct syslog_data *)); 
static void	connectlog_r __P((struct syslog_data *)); 
@


1.12
log
@syslog_r() implementation. deraadt@@ ok.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.11 2001/08/18 22:56:22 deraadt Exp $";
d195 4
d203 12
a214 12
        p = tbuf;  
        tbuf_left = TBUF_LEN;
        
#define	DEC()   \
        do {                                    \
                if (prlen < 0)			\
                        prlen = 0;		\
                if (prlen >= tbuf_left)         \
                        prlen = tbuf_left - 1;  \
                p += prlen;                     \
                tbuf_left -= prlen;             \
        } while (0)
d216 2
a217 2
        prlen = snprintf(p, tbuf_left, "<%d>", pri);
        DEC();
@


1.11
log
@deal with -1 from snprintf, if it ever happens
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.10 2001/06/27 00:58:54 lebel Exp $";
d59 2
a60 7
static int	LogFile = -1;		/* fd for log */
static int	connected;		/* have done connect */
static int	opened;			/* have done openlog() */
static int	LogStat = 0;		/* status bits, set by openlog() */
static const char *LogTag = NULL;	/* string to tag the entry with */
static int	LogFacility = LOG_USER;	/* default facility code */
static int	LogMask = 0xff;		/* mask of priorities to be logged */
d65 3
d99 70
a168 2
	register int cnt;
	register char ch, *p, *t;
d179 7
a185 2
		syslog(INTERNALLOG,
		    "syslog: unknown facility/priority: %x", pri);
d190 1
a190 1
	if (!(LOG_MASK(LOG_PRI(pri)) & LogMask))
d195 16
a210 3
	/* Set default facility if none specified. */
	if ((pri & LOG_FACMASK) == 0)
		pri |= LogFacility;
d212 6
a217 9
	/* Build the message. */
	
	/*
 	 * Although it's tempting, we can't ignore the possibility of
	 * overflowing the buffer when assembling the "fixed" portion
	 * of the message.  Strftime's "%h" directive expands to the
	 * locale's abbreviated month name, but if the user has the
	 * ability to construct to his own locale files, it may be
	 * arbitrarily long.
d219 4
a222 20
	(void)time(&now);

	p = tbuf;  
	tbuf_left = TBUF_LEN;
	
#define	DEC()	\
	do {					\
		if (prlen < 0)			\
			prlen = 0;		\
		else if (prlen >= tbuf_left)	\
			prlen = tbuf_left - 1;	\
		p += prlen;			\
		tbuf_left -= prlen;		\
	} while (0)

	prlen = snprintf(p, tbuf_left, "<%d>", pri);
	DEC();

	prlen = strftime(p, tbuf_left, "%h %e %T ", localtime(&now));
	DEC();
d224 1
a224 1
	if (LogStat & LOG_PERROR)
d226 4
a229 4
	if (LogTag == NULL)
		LogTag = __progname;
	if (LogTag != NULL) {
		prlen = snprintf(p, tbuf_left, "%s", LogTag);
d232 1
a232 1
	if (LogStat & LOG_PID) {
d236 1
a236 1
	if (LogTag != NULL) {
d247 2
a248 4
	/* 
	 * We wouldn't need this mess if printf handled %m, or if 
	 * strerror() had been invented before syslog().
	 */
d252 7
a258 2
			prlen = snprintf(t, fmt_left, "%s",
			    strerror(saved_errno));
d277 1
a277 1
	if (LogStat & LOG_PERROR) {
d288 4
a291 4
	if (!opened)
		openlog(LogTag, LogStat, 0);
	connectlog();
	if (send(LogFile, tbuf, cnt, 0) >= 0)
d298 3
a300 3
	disconnectlog();
	connectlog();
	if (send(LogFile, tbuf, cnt, 0) >= 0)
d308 1
a308 1
	if (LogStat & LOG_CONS &&
d323 2
a324 1
disconnectlog()
d331 3
a333 3
	if (LogFile != -1) {
		close(LogFile);
		LogFile = -1;
d335 1
a335 1
	connected = 0;		/* retry connect */
d339 2
a340 1
connectlog()
d344 2
a345 2
	if (LogFile == -1) {
		if ((LogFile = socket(AF_UNIX, SOCK_DGRAM, 0)) == -1)
d347 1
a347 1
		(void)fcntl(LogFile, F_SETFD, 1);
d349 1
a349 1
	if (LogFile != -1 && !connected) {
d355 1
a355 1
		if (connect(LogFile, (struct sockaddr *)&SyslogAddr,
d357 2
a358 2
			(void)close(LogFile);
			LogFile = -1;
d360 1
a360 1
			connected = 1;
d365 1
a365 1
openlog(ident, logstat, logfac)
d368 1
d371 2
a372 2
		LogTag = ident;
	LogStat = logstat;
d374 1
a374 1
		LogFacility = logfac;
d376 2
a377 2
	if (LogStat & LOG_NDELAY)	/* open immediately */
		connectlog();
d379 1
a379 1
	opened = 1;	/* ident and facility has been set */
d383 2
a384 1
closelog()
d386 3
a388 3
	(void)close(LogFile);
	LogFile = -1;
	connected = 0;
d393 1
a393 1
setlogmask(pmask)
d395 1
d399 1
a399 1
	omask = LogMask;
d401 1
a401 1
		LogMask = pmask;
@


1.10
log
@use strlcpy vs strncpy+a[len-1]='\0'.  millert@@ ok.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.9 2000/01/02 23:35:58 hugh Exp $";
d145 3
a147 1
		if (prlen >= tbuf_left)		\
@


1.9
log
@Try to reopen socket if send fails. (perhaps syslogd restarted)
Adapted from FreeBSD (N.B. NetBSD); millert@@ OK.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.8 1998/03/19 00:30:03 millert Exp $";
d281 2
a282 3
		(void)strncpy(SyslogAddr.sun_path, _PATH_LOG,
		    sizeof(SyslogAddr.sun_path) - 1);
		SyslogAddr.sun_path[sizeof(SyslogAddr.sun_path) - 1] = '\0';
@


1.8
log
@some -Wall
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.7 1998/03/06 02:01:38 brian Exp $";
d61 1
d68 2
d218 12
a229 2
	if (!connected)
		openlog(LogTag, LogStat | LOG_NDELAY, 0);
d252 14
a265 1
static struct sockaddr_un SyslogAddr;	/* AF_UNIX address of local logger */
d267 2
a268 4
void
openlog(ident, logstat, logfac)
	const char *ident;
	int logstat, logfac;
d270 1
a270 5
	if (ident != NULL)
		LogTag = ident;
	LogStat = logstat;
	if (logfac != 0 && (logfac &~ LOG_FACMASK) == 0)
		LogFacility = logfac;
d273 5
a283 7
		if (LogStat & LOG_NDELAY) {
			if ((LogFile = socket(AF_UNIX, SOCK_DGRAM, 0)) == -1)
				return;
			(void)fcntl(LogFile, F_SETFD, 1);
		}
	}
	if (LogFile != -1 && !connected) {
d285 1
a285 1
			sizeof(SyslogAddr)) == -1) {
d291 17
@


1.7
log
@And terminate SyslogAddr.sun_path (duh!)
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.6 1998/03/06 01:53:23 brian Exp $";
d265 1
a265 1
	if (LogFile != -1 && !connected)
d272 1
@


1.6
log
@sizeof(SyslogAddr.sun_path) -> sizeof(SyslogAddr.sun_path) - 1
pointed out by: theo
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.5 1998/03/05 22:13:10 brian Exp $";
d258 1
@


1.5
log
@Initialise sockaddr::sa_len (stopping a pretty nasty
stack scribble).  Also, SyslogAddr is a sockaddr_un,
not a sockaddr.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.4 1997/07/25 20:30:04 mickey Exp $";
d257 1
a257 1
		    sizeof(SyslogAddr.sun_path));
@


1.4
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.3 1997/07/09 00:28:24 millert Exp $";
d42 1
d239 1
a239 1
static struct sockaddr SyslogAddr;	/* AF_UNIX address of local logger */
d253 5
a257 3
		SyslogAddr.sa_family = AF_UNIX;
		(void)strncpy(SyslogAddr.sa_data, _PATH_LOG,
		    sizeof(SyslogAddr.sa_data));
d265 2
a266 1
		if (connect(LogFile, &SyslogAddr, sizeof(SyslogAddr)) == -1) {
@


1.3
log
@Clean up some -Wall complaints.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.2 1996/08/19 08:26:33 tholo Exp $";
d52 1
a52 1
#if __STDC__
d71 1
a71 1
#if __STDC__
d82 1
a82 1
#if __STDC__
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: syslog.c,v 1.10 1995/08/31 16:28:01 mycroft Exp $";
d180 1
a180 1
	for (t = fmt_cpy, fmt_left = FMT_LEN; ch = *fmt; ++fmt) {
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: syslog.c,v 1.10 1995/08/31 16:28:01 mycroft Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)syslog.c	8.4 (Berkeley) 3/18/94";
#else
static char rcsid[] = "$NetBSD: syslog.c,v 1.10 1995/08/31 16:28:01 mycroft Exp $";
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

