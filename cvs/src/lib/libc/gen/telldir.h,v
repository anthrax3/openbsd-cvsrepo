head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.6
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.8
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2015.08.27.04.37.09;	author guenther;	state Exp;
branches;
next	1.9;
commitid	khkC09EAAnI0S1Zu;

1.9
date	2014.03.10.07.54.14;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2013.11.12.20.19.23;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.05.20.36.51;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.13.05.52.13;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2012.03.22.04.11.53;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.28.15.02.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.12.22.41.42;	author chl;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.10.12.04.20;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.01.18.06.59;	author otto;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Use static and __{BEGIN,ENV}_HIDDEN_DECLS to hide a bunch of internal
symbols that are not longer exported.  (This improves the generated code.)

ok deraadt@@
@
text
@/*	$OpenBSD: telldir.h,v 1.9 2014/03/10 07:54:14 schwarze Exp $	*/
/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Copyright (c) 2000
 * 	Daniel Eischen.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: src/lib/libc/gen/telldir.h,v 1.2 2001/01/24 12:59:24 deischen Exp $
 */

#ifndef _TELLDIR_H_
#define	_TELLDIR_H_

/* structure describing an open directory. */
struct _dirdesc {
	int	dd_fd;		/* file descriptor associated with directory */
	long	dd_loc;		/* offset in current buffer */
	long	dd_size;	/* amount of data returned by getdents() */
	char	*dd_buf;	/* data buffer */
	int	dd_len;		/* size of data buffer */
	off_t	dd_curpos;	/* current cookie */
	off_t	dd_bufpos;	/* cookie of the first entry in dd_buf */
	void	*dd_lock;	/* mutex to protect struct */
};

__BEGIN_HIDDEN_DECLS
int _readdir_unlocked(DIR *, struct dirent **);
__END_HIDDEN_DECLS

#endif
@


1.9
log
@Optimization, no functional change:
Save a cookie pointing to the very first entry in the DIR.dd_buf
cache buffer and use that to speed up seekdir(3) when rewinding
to that first entry.
No libc bump because DIR is an opaque struct.

When the optimization applies, which in particular it always does
for rewinddir(3) after reading less than about 500 entries,
seekdir(3) execution time drops from 100 to 0.05 milliseconds
on my i386 notebook.  Other cases are not slowed down.

Based on an idea from and ok by guenther@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.h,v 1.8 2013/11/12 20:19:23 deraadt Exp $	*/
d51 1
d53 1
@


1.8
log
@put the _readdir_unlocked() prototype in an obvious place
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.h,v 1.7 2013/11/05 20:36:51 schwarze Exp $	*/
d47 1
@


1.7
log
@Cleanup, no functional change:
1. avoid code duplication in rewinddir() by calling seekdir() directly
2. move __seekdir() into seekdir() and _telldir_unlocked() into telldir()
Both functions were called from nowhere else.
3. remove some unused #include directives and one unused function prototype
ok otto@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.h,v 1.6 2013/08/13 05:52:13 guenther Exp $	*/
d49 2
@


1.6
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.h,v 1.5 2012/03/22 04:11:53 matthew Exp $	*/
a48 3

long		_telldir_unlocked(DIR *);
void		__seekdir(DIR *, long);
@


1.5
log
@Make DIR a private type within libc, give it the same underlying
typedef regardless of __BSD_VISIBLE, and eliminate the dirfd() macro.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.h,v 1.4 2010/10/28 15:02:41 millert Exp $	*/
a38 22
/*
 * One of these structures is malloced to describe the current directory
 * position each time telldir is called. It records the current magic
 * cookie returned by getdirentries and the offset within the buffer
 * associated with that return value.
 */
struct ddloc {
	off_t	loc_seek;	/* magic cookie returned by getdirentries */
	long	loc_loc;	/* offset of entry in buffer */
};

/*
 * One of these structures is malloced for each DIR to record telldir
 * positions.
 */
struct _telldir {
	struct ddloc *td_locs;	/* locations */
	size_t	td_sz;		/* size of locations */
	long	td_loccnt;	/* index of entry for sequential readdir's */
	long	td_last;	/* last tell/seekdir */
};

d43 1
a43 1
	long	dd_size;	/* amount of data returned by getdirentries */
d46 1
a46 4
	off_t	dd_seek;	/* magic cookie returned by getdirentries */
	off_t	dd_rewind;	/* magic cookie for rewinding */
	int	dd_unused;	/* was flags for readdir */
	struct _telldir *dd_td; /* telldir position recording */
@


1.4
log
@Change basep parameter of getdirentries() to be off_t *, not long *
so it works correctly with large offsets (and matches other systems).
This requires adding a new getdirentries syscall, with the old one
renamed to ogetdirentries.  All in-tree consumers of getdirentries()
have been updated.  Bump libc and libpthread major numbers.
OK and with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.h,v 1.3 2007/10/12 22:41:42 chl Exp $	*/
d59 14
@


1.3
log
@fix typo in _telldir_unlocked function prototype, to avoid warning.
while there, put all function prototypes in header file.

ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.h,v 1.2 2006/04/10 12:04:20 otto Exp $	*/
d46 1
a46 1
	long	loc_seek;	/* magic cookie returned by getdirentries */
@


1.2
log
@telldir/seekdir optimization, avoid scanning the complete list,
while still returning the correct index for seekdir(); telldir()
Tested by Fred Crowson and others; "put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.h,v 1.1 2006/04/01 18:06:59 otto Exp $	*/
d61 2
a62 1
void 		__seekdir(DIR *, long);
@


1.1
log
@- Plug huge mem leak; mostly samba was suffering.
- Fix semantics: seekdir(pos); telldir() shoud return pos. The code
that implements this will be made faster in a later commit.
- We loose documented behaviour (after closedir() the telldir()
positions are not valid anymore). This was never in Posix, and most
other systems have nothing like it.

Diff originally from Paul Thorn, rewritten by me using some FreeBSD
code.  "slap it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 1
@

