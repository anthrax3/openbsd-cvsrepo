head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.10
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.44
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.36
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.40
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.38
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.34
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.32
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.30
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.28
	OPENBSD_5_0:1.7.0.26
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.24
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.22
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.6
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.09.13.15.33.48;	author guenther;	state Exp;
branches;
next	1.7;
commitid	zxB6o2cNPYznqLwP;

1.7
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.27.22.13.10;	author pat;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.17.21.56.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.03.01.52.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.17.18.26.56;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.29.18.43.08;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.21.00.49.58;	author millert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Wrap <pwd.h> so that calls go direct and the symbols are all weak.
Hide bcrypt_autorounds(), prefixing with an underbar for static builds.
@
text
@/*	$OpenBSD: pw_dup.c,v 1.7 2005/08/08 08:05:34 espie Exp $	*/

/*
 * Copyright (c) 2000, 2002 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 */

#include <sys/types.h>

#include <pwd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define PW_SIZE(name, size)				\
do {							\
	if (pw->name) {					\
		size = strlen(pw->name) + 1;		\
		total += size;				\
	}						\
} while (0)

#define PW_COPY(name, size)				\
do {							\
	if (pw->name) {					\
		(void)memcpy(cp, pw->name, size);	\
		newpw->name = cp;			\
		cp += size;				\
	}						\
} while (0)

struct passwd *
pw_dup(const struct passwd *pw)
{
	char		*cp;
	size_t		 nsize, psize, csize, gsize, dsize, ssize, total;
	struct passwd	*newpw;

	/* Allocate in one big chunk for easy freeing */
	total = sizeof(struct passwd);
	PW_SIZE(pw_name, nsize);
	PW_SIZE(pw_passwd, psize);
	PW_SIZE(pw_class, csize);
	PW_SIZE(pw_gecos, gsize);
	PW_SIZE(pw_dir, dsize);
	PW_SIZE(pw_shell, ssize);

	if ((cp = malloc(total)) == NULL)
		return (NULL);
	newpw = (struct passwd *)cp;

	/*
	 * Copy in passwd contents and make strings relative to space
	 * at the end of the buffer.
	 */
	(void)memcpy(newpw, pw, sizeof(struct passwd));
	cp += sizeof(struct passwd);

	PW_COPY(pw_name, nsize);
	PW_COPY(pw_passwd, psize);
	PW_COPY(pw_class, csize);
	PW_COPY(pw_gecos, gsize);
	PW_COPY(pw_dir, dsize);
	PW_COPY(pw_shell, ssize);

	return (newpw);
}
DEF_WEAK(pw_dup);
@


1.7
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: pw_dup.c,v 1.6 2005/02/27 22:13:10 pat Exp $	*/
d83 1
@


1.6
log
@use PW_SIZE and PW_COPY macros for simplified reading.

ok otto millert
@
text
@d1 1
a1 1
/*	$OpenBSD: pw_dup.c,v 1.5 2003/06/17 21:56:23 millert Exp $	*/
a21 4

#if defined(LIBC_SCCS) && !defined(lint)
static const char rcsid[] = "$OpenBSD: pw_dup.c,v 1.5 2003/06/17 21:56:23 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.5
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
/*	$OpenBSD: pw_dup.c,v 1.4 2003/06/03 01:52:39 millert Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: pw_dup.c,v 1.4 2003/06/03 01:52:39 millert Exp $";
d34 17
d60 7
a66 24
	if (pw->pw_name) {
		nsize = strlen(pw->pw_name) + 1;
		total += nsize;
	}
	if (pw->pw_passwd) {
		psize = strlen(pw->pw_passwd) + 1;
		total += psize;
	}
	if (pw->pw_class) {
		csize = strlen(pw->pw_class) + 1;
		total += csize;
	}
	if (pw->pw_gecos) {
		gsize = strlen(pw->pw_gecos) + 1;
		total += gsize;
	}
	if (pw->pw_dir) {
		dsize = strlen(pw->pw_dir) + 1;
		total += dsize;
	}
	if (pw->pw_shell) {
		ssize = strlen(pw->pw_shell) + 1;
		total += ssize;
	}
d77 7
a83 30
	if (pw->pw_name) {
		(void)memcpy(cp, pw->pw_name, nsize);
		newpw->pw_name = cp;
		cp += nsize;
	}
	if (pw->pw_passwd) {
		(void)memcpy(cp, pw->pw_passwd, psize);
		newpw->pw_passwd = cp;
		cp += psize;
	}
	if (pw->pw_class) {
		(void)memcpy(cp, pw->pw_class, csize);
		newpw->pw_class = cp;
		cp += csize;
	}
	if (pw->pw_gecos) {
		(void)memcpy(cp, pw->pw_gecos, gsize);
		newpw->pw_gecos = cp;
		cp += gsize;
	}
	if (pw->pw_dir) {
		(void)memcpy(cp, pw->pw_dir, dsize);
		newpw->pw_dir = cp;
		cp += dsize;
	}
	if (pw->pw_shell) {
		(void)memcpy(cp, pw->pw_shell, ssize);
		newpw->pw_shell = cp;
		cp += ssize;
	}
@


1.4
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
a1 1
/*	$OpenBSD: pw_dup.c,v 1.3 2003/02/17 18:26:56 millert Exp $	*/
d10 11
a20 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
 * FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: pw_dup.c,v 1.3 2003/02/17 18:26:56 millert Exp $";
@


1.3
log
@minor KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: pw_dup.c,v 1.2 2002/04/29 18:43:08 millert Exp $	*/
d4 1
a4 2
 * Copyright (c) 2000,2002 Todd C. Miller <Todd.Miller@@courtesan.com>
 * All rights reserved.
d6 3
a8 10
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d10 7
a16 10
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: pw_dup.c,v 1.2 2002/04/29 18:43:08 millert Exp $";
@


1.2
log
@Stash string lengths in variables instead of computing multiple times.
Based on a patch from Lars J. Buitinck
@
text
@d1 1
a1 1
/*	$OpenBSD: pw_dup.c,v 1.1 2000/11/21 00:49:58 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: pw_dup.c,v 1.1 2000/11/21 00:49:58 millert Exp $";
d75 1
a75 1
		return(NULL);
d115 1
a115 1
	return(newpw);
@


1.1
log
@Add pw_dup(3), a function to copy 'struct passwd'.  It is allocated as
a single chunk with the strings pointing elsewhere in the buffer so
a simple free() of the struct passwd * is all that is needed to decallocate.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 2000 Todd C. Miller <Todd.Miller@@courtesan.com>
d31 1
a31 1
static char rcsid[] = "$OpenBSD$";
d36 1
a39 1
#include <pwd.h>
d42 1
a42 2
pw_dup(pw)
	const struct passwd *pw;
d44 3
a46 3
	struct passwd *newpw;
	char *cp;
	size_t siz;
d49 26
a74 14
	siz = sizeof(struct passwd);
	if (pw->pw_name)
		siz += strlen(pw->pw_name) + 1;
	if (pw->pw_passwd)
		siz += strlen(pw->pw_passwd) + 1;
	if (pw->pw_class)
		siz += strlen(pw->pw_class) + 1;
	if (pw->pw_gecos)
		siz += strlen(pw->pw_gecos) + 1;
	if (pw->pw_dir)
		siz += strlen(pw->pw_dir) + 1;
	if (pw->pw_shell)
		siz += strlen(pw->pw_shell) + 1;
	if ((cp = malloc(siz)) == NULL)
d82 1
a82 1
	memcpy(newpw, pw, sizeof(struct passwd));
d85 1
a85 2
		siz = strlen(pw->pw_name) + 1;
		memcpy(cp, pw->pw_name, siz);
d87 1
a87 1
		cp += siz;
d90 1
a90 2
		siz = strlen(pw->pw_passwd) + 1;
		memcpy(cp, pw->pw_passwd, siz);
d92 1
a92 1
		cp += siz;
d95 1
a95 2
		siz = strlen(pw->pw_class) + 1;
		memcpy(cp, pw->pw_class, siz);
d97 1
a97 1
		cp += siz;
d100 1
a100 2
		siz = strlen(pw->pw_gecos) + 1;
		memcpy(cp, pw->pw_gecos, siz);
d102 1
a102 1
		cp += siz;
d105 1
a105 2
		siz = strlen(pw->pw_dir) + 1;
		memcpy(cp, pw->pw_dir, siz);
d107 1
a107 1
		cp += siz;
d110 1
a110 2
		siz = strlen(pw->pw_shell) + 1;
		memcpy(cp, pw->pw_shell, siz);
d112 1
a112 1
		cp += siz;
@

