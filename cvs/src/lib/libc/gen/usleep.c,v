head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.50
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.46
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.42
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.44
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.36
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.40
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.38
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.34
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.32
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.30
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.28
	OPENBSD_5_0:1.10.0.26
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.24
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.22
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.18
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.22
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.20
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.18
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.16
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.14
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.12
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.10
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.8
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.6
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.4
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.02.08.22.44.09;	author tholo;	state Exp;
branches;
next	1.6;

1.6
date	97.11.06.01.25.48;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.04.25.04.20.42;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.09.15.09.31.11;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.27.19;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.10.28.00.54.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@/*	$OpenBSD$ */
/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <unistd.h>

int
usleep(useconds_t useconds)
{
	struct timespec rqt;

	if (useconds == 0)
		return(0);

	rqt.tv_sec = useconds / 1000000;
	rqt.tv_nsec = (useconds % 1000000) * 1000;

	return(nanosleep(&rqt, NULL));
}
@


1.9
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: usleep.c,v 1.8 2003/06/02 20:18:35 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: usleep.c,v 1.7 1998/02/08 22:44:09 tholo Exp $";
d39 1
a39 2
usleep(useconds)
	useconds_t useconds;
@


1.7
log
@Pull in prototype
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char rcsid[] = "$OpenBSD: usleep.c,v 1.6 1997/11/06 01:25:48 millert Exp $";
@


1.6
log
@XPG4.2 compat:
    1) usleep() and ualarm() use useconds_t not u_int
    2) usleep() returns an int
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: usleep.c,v 1.5 1997/04/25 04:20:42 tholo Exp $";
d40 1
@


1.5
log
@Use nanosleep(2)
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: usleep.c,v 1.4 1996/09/15 09:31:11 tholo Exp $";
d38 1
d41 1
a41 1
void
d43 1
a43 1
	unsigned int useconds;
d48 1
a48 1
		return;
d53 1
a53 1
	nanosleep(&rqt, NULL);
@


1.4
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: usleep.c,v 1.3 1996/08/19 08:27:19 tholo Exp $";
a38 7
#include <signal.h>
#include <unistd.h>

#define	TICK	10000		/* system clock resolution in microseconds */

static void sleephandler __P((int));
static volatile int ringring;
d44 1
a44 3
	struct itimerval itv, oitv;
	struct sigaction act, oact;
	sigset_t set, oset;
d46 1
a46 1
	if (!useconds)
d49 2
a50 27
	sigemptyset(&set);
	sigaddset(&set, SIGALRM);
	sigprocmask(SIG_BLOCK, &set, &oset);

	act.sa_handler = sleephandler;
	act.sa_flags = 0;
	sigemptyset(&act.sa_mask);
	sigaction(SIGALRM, &act, &oact);

	timerclear(&itv.it_interval);
	itv.it_value.tv_sec = useconds / 1000000;
	itv.it_value.tv_usec = useconds % 1000000;
	setitimer(ITIMER_REAL, &itv, &oitv);

	if (timerisset(&oitv.it_value)) {
		if (timercmp(&oitv.it_value, &itv.it_value, >)) {
			timersub(&oitv.it_value, &itv.it_value, &oitv.it_value);
		} else {
			itv.it_value = oitv.it_value;
			/*
			 * This is a hack, but we must have time to return
			 * from the setitimer after the alarm or else it'll
			 * be restarted.  And, anyway, sleep never did
			 * anything more than this before.
			 */
			oitv.it_value.tv_sec = 0;
			oitv.it_value.tv_usec = 2 * TICK;
d52 1
a52 31
			setitimer(ITIMER_REAL, &itv, NULL);
		}
	}

	set = oset;
	sigdelset(&set, SIGALRM);
	ringring = 0;
 	(void) sigsuspend(&set);

	if (!ringring) {
		struct itimerval nulltv;
		/*
		 * Interrupted by other signal; allow for pending 
		 * SIGALRM to be processed before resetting handler,
		 * after first turning off the timer.
		 */
		timerclear(&nulltv.it_interval);
		timerclear(&nulltv.it_value);
		(void) setitimer(ITIMER_REAL, &nulltv, NULL);
	}
	sigprocmask(SIG_SETMASK, &oset, NULL);
	sigaction(SIGALRM, &oact, NULL);
	(void) setitimer(ITIMER_REAL, &oitv, NULL);
}

/* ARGSUSED */
static void
sleephandler(sig)
	int sig;
{
	ringring = 1;
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: usleep.c,v 1.7.2.2 1995/10/26 22:05:52 pk Exp $";
d44 1
a53 1
	static void sleephandler();
d111 1
d113 2
a114 1
sleephandler()
@


1.2
log
@Eliminate race by stopping timer before restarting it with remaining time
(one more system call).
@
text
@a0 2
/*	$NetBSD: usleep.c,v 1.7.2.2 1995/10/26 22:05:52 pk Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)usleep.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$NetBSD: usleep.c,v 1.7.2.2 1995/10/26 22:05:52 pk Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: usleep.c,v 1.7 1995/05/03 12:52:44 mycroft Exp $	*/
d40 1
a40 1
static char rcsid[] = "$NetBSD: usleep.c,v 1.7 1995/05/03 12:52:44 mycroft Exp $";
d50 2
d98 1
d101 12
d114 1
a114 3
	sigprocmask(SIG_SETMASK, &oset, NULL);

	(void) setitimer(ITIMER_REAL, &oitv, &itv);
d120 1
a120 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
