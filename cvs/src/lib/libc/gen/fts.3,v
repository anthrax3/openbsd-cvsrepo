head	1.36;
access;
symbols
	OPENBSD_6_0:1.36.0.2
	OPENBSD_6_0_BASE:1.36
	OPENBSD_5_9:1.34.0.2
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.33.0.4
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.32.0.2
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.31.0.6
	OPENBSD_5_6_BASE:1.31
	OPENBSD_5_5:1.31.0.4
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.30.0.2
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.29.0.6
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.4
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.2
	OPENBSD_5_0:1.28.0.4
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.28.0.2
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.27.0.4
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.2
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.25.0.4
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.24.0.2
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.23.0.6
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.23.0.4
	OPENBSD_4_3_BASE:1.23
	OPENBSD_4_2:1.23.0.2
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.22.0.8
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.6
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.4
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.2
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.21.0.2
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.19.0.6
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.18.0.8
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.18.0.6
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.18.0.4
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.17.0.2
	OPENBSD_2_9_BASE:1.17
	OPENBSD_2_8:1.16.0.4
	OPENBSD_2_8_BASE:1.16
	OPENBSD_2_7:1.16.0.2
	OPENBSD_2_7_BASE:1.16
	OPENBSD_2_6:1.15.0.2
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.36
date	2016.06.28.17.25.08;	author millert;	state Exp;
branches;
next	1.35;
commitid	ZNH4mGggLdSAvDQG;

1.35
date	2016.06.28.17.21.48;	author millert;	state Exp;
branches;
next	1.34;
commitid	C8bhIjOA1blQo5Xq;

1.34
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.33;
commitid	QU70QaxjyBAtj4Rv;

1.33
date	2015.03.13.19.58.40;	author jmc;	state Exp;
branches;
next	1.32;
commitid	OcwhWBKGs3Yn7EeA;

1.32
date	2015.02.05.02.33.09;	author schwarze;	state Exp;
branches;
next	1.31;
commitid	3DjwIM9vrpCmLhTQ;

1.31
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.30;

1.30
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2012.01.01.13.32.25;	author schwarze;	state Exp;
branches;
next	1.28;

1.28
date	2010.09.24.13.56.32;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2009.11.27.20.12.34;	author otto;	state Exp;
branches;
next	1.26;

1.26
date	2009.08.27.16.19.27;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2009.03.23.22.57.36;	author sobrado;	state Exp;
branches;
next	1.24;

1.24
date	2008.10.19.13.23.16;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2007.05.31.19.19.28;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2005.07.22.03.16.58;	author jaredy;	state Exp;
branches;
next	1.21;

1.21
date	2005.03.01.15.38.39;	author mpf;	state Exp;
branches;
next	1.20;

1.20
date	2005.02.25.03.12.43;	author cloder;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2001.05.15.21.14.38;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2000.12.24.00.30.47;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.18.03.01.26;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.10.03.19.22.22;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	99.08.27.19.00.48;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	99.07.09.13.35.20;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.06.05.03.44.53;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.06.04.01.30.10;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.06.03.10.03.20;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.05.29.22.38.34;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.29.19.11.10;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.05.29.16.08.55;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.27.16.20.59;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.03.01.00.02.23;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.09.01.02.48.46;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.21.21.36.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.22.57;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.54;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.54;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.36
log
@For the EINVAL case there can be more than a single option.
@
text
@.\"	$OpenBSD: fts.3,v 1.35 2016/06/28 17:21:48 millert Exp $
.\"
.\" Copyright (c) 1989, 1991, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)fts.3	8.5 (Berkeley) 4/16/94
.\"
.Dd $Mdocdate: June 28 2016 $
.Dt FTS_OPEN 3
.Os
.Sh NAME
.Nm fts_open ,
.Nm fts_read ,
.Nm fts_children ,
.Nm fts_set ,
.Nm fts_close
.Nd traverse a file hierarchy
.Sh SYNOPSIS
.In sys/types.h
.In sys/stat.h
.In fts.h
.Ft FTS *
.Fn fts_open "char * const *path_argv" "int options" "int (*compar)(const FTSENT **, const FTSENT **)"
.Ft FTSENT *
.Fn fts_read "FTS *ftsp"
.Ft FTSENT *
.Fn fts_children "FTS *ftsp" "int options"
.Ft int
.Fn fts_set "FTS *ftsp" "FTSENT *f" "int option"
.Ft int
.Fn fts_close "FTS *ftsp"
.Sh DESCRIPTION
The
.Nm fts
functions are provided for traversing
.Ux
file hierarchies.
The
.Fn fts_open
function returns a
.Dq handle
on a file hierarchy, which is then supplied to
the other
.Nm fts
functions.
The function
.Fn fts_read
returns a pointer to a structure describing one of the files in the file
hierarchy.
The function
.Fn fts_children
returns a pointer to a linked list of structures, each of which describes
one of the files contained in a directory within the hierarchy.
.Pp
In general, directories are visited two distinguishable times; in pre-order
(before any of their descendants are visited) and in post-order (after all
of their descendants have been visited).
Files are visited once.
It is possible to walk the hierarchy
.Dq logically
(following symbolic links)
or
.Dq physically
(not following symbolic links),
order the walk of the hierarchy, or
prune and/or re-visit portions of the hierarchy.
.Pp
Two structures are defined (and typedef'd) in the include file
.In fts.h .
The first is
.Dv FTS ,
the structure that represents the file hierarchy itself.
The second is
.Li FTSENT ,
the structure that represents a file in the file
hierarchy.
Normally, an
.Li FTSENT
structure is returned for every file in the file
hierarchy.
In this manual page,
.Dq file
and
.Dq Li FTSENT No structure
are generally
interchangeable.
.Pp
The
.Li FTSENT
structure contains at least the following fields, which are
described in greater detail below:
.Bd -literal
typedef struct _ftsent {
	unsigned short fts_info;	/* flags for FTSENT structure */
	char *fts_accpath;		/* access path */
	char *fts_path;			/* root path */
	size_t fts_pathlen;		/* strlen(fts_path) */
	char *fts_name;			/* file name */
	size_t fts_namelen;		/* strlen(fts_name) */
	int fts_level;			/* depth (-1 to N) */
	int fts_errno;			/* file errno */
	long fts_number;		/* local numeric value */
	void *fts_pointer;		/* local address value */
	struct _ftsent *fts_parent;	/* parent directory */
	struct _ftsent *fts_link;	/* next file structure */
	struct _ftsent *fts_cycle;	/* cycle structure */
	struct stat *fts_statp;		/* stat(2) information */
} FTSENT;
.Ed
.Pp
These fields are defined as follows:
.Bl -tag -width "fts_namelen"
.It Fa fts_info
One of the following flags describing the returned
.Li FTSENT
structure and
the file it represents.
With the exception of directories without errors
.Pq Dv FTS_D ,
all of these
entries are terminal, that is, they will not be revisited, nor will any
of their descendants be visited.
.Bl -tag -width FTS_DEFAULT
.It Dv FTS_D
A directory being visited in pre-order.
.It Dv FTS_DC
A directory that causes a cycle in the tree.
(The
.Fa fts_cycle
field of the
.Li FTSENT
structure will be filled in as well.)
.It Dv FTS_DEFAULT
Any
.Li FTSENT
structure that represents a file type not explicitly described
by one of the other
.Fa fts_info
values.
.It Dv FTS_DNR
A directory which cannot be read.
This is an error return, and the
.Fa fts_errno
field will be set to indicate what caused the error.
.It Dv FTS_DOT
A file named
.Dq \&.
or
.Dq ..
which was not specified as a file name to
.Fn fts_open
(see
.Dv FTS_SEEDOT ) .
.It Dv FTS_DP
A directory being visited in post-order.
The contents of the
.Li FTSENT
structure will be unchanged from when
it was returned in pre-order, i.e., with the
.Fa fts_info
field set to
.Dv FTS_D .
.It Dv FTS_ERR
This is an error return, and the
.Fa fts_errno
field will be set to indicate what caused the error.
.It Dv FTS_F
A regular file.
.It Dv FTS_NS
A file for which no
.Xr stat 2
information was available.
The contents of the
.Fa fts_statp
field are undefined.
This is an error return, and the
.Fa fts_errno
field will be set to indicate what caused the error.
.It Dv FTS_NSOK
A file for which no
.Xr stat 2
information was requested.
The contents of the
.Fa fts_statp
field are undefined.
.It Dv FTS_SL
A symbolic link.
.It Dv FTS_SLNONE
A symbolic link with a non-existent target.
The contents of the
.Fa fts_statp
field reference the file characteristic information for the symbolic link
itself.
.El
.It Fa fts_accpath
A path for accessing the file from the current directory.
.It Fa fts_path
The path for the file relative to the root of the traversal.
This path contains the path specified to
.Fn fts_open
as a prefix.
.It Fa fts_pathlen
The length of the string referenced by
.Fa fts_path .
.It Fa fts_name
The name of the file.
.It Fa fts_namelen
The length of the string referenced by
.Fa fts_name .
.It Fa fts_level
The depth of the traversal, numbered from \-1 to N, where this file
was found.
The
.Li FTSENT
structure representing the parent of the starting point (or root)
of the traversal is numbered
.Dv FTS_ROOTPARENTLEVEL
(\-1), and the
.Li FTSENT
structure for the root
itself is numbered
.Dv FTS_ROOTLEVEL
(0).
Note that while
.Fa fts_level
cannot hold a number of levels greater than
.Dv FTS_MAXLEVEL ,
the
.Nm fts
functions themselves are not limited to a fixed number
of levels.
Application code that inspects
.Fa fts_level
should be written with this in mind.
.It Fa fts_errno
Upon return of an
.Li FTSENT
structure from the
.Fn fts_children
or
.Fn fts_read
functions, with its
.Fa fts_info
field set to
.Dv FTS_DNR ,
.Dv FTS_ERR
or
.Dv FTS_NS ,
the
.Fa fts_errno
field contains the value of the external variable
.Va errno
specifying the cause of the error.
Otherwise, the contents of the
.Fa fts_errno
field are undefined.
.It Fa fts_number
This field is provided for the use of the application program and is
not modified by the
.Nm fts
functions.
It is initialized to 0.
.It Fa fts_pointer
This field is provided for the use of the application program and is
not modified by the
.Nm fts
functions.
It is initialized to
.Dv NULL .
.It Fa fts_parent
A pointer to the
.Li FTSENT
structure referencing the file in the hierarchy
immediately above the current file, i.e., the directory of which this
file is a member.
A parent structure for the initial entry point is provided as well,
however, only the
.Fa fts_level ,
.Fa fts_number
and
.Fa fts_pointer
fields are guaranteed to be initialized.
.It Fa fts_link
Upon return from the
.Fn fts_children
function, the
.Fa fts_link
field points to the next structure in the null-terminated
linked list of directory members.
Otherwise, the contents of the
.Fa fts_link
field are undefined.
.It Fa fts_cycle
If a directory causes a cycle in the hierarchy (see
.Dv FTS_DC ) ,
either because
of a hard link between two directories, or a symbolic link pointing to a
directory, the
.Fa fts_cycle
field of the structure will point to the
.Li FTSENT
structure in the hierarchy that references the same file as the current
.Li FTSENT
structure.
Otherwise, the contents of the
.Fa fts_cycle
field are undefined.
.It Fa fts_statp
A pointer to
.Xr stat 2
information for the file.
.El
.Pp
A single buffer is used for all of the paths of all of the files in the
file hierarchy.
Therefore, the
.Fa fts_path
and
.Fa fts_accpath
fields are guaranteed to be NUL terminated
.Em only
for the file most recently returned by
.Fn fts_read .
To use these fields to reference any files represented by other
.Li FTSENT
structures will require that the path buffer be modified using the
information contained in that
.Li FTSENT
structure's
.Fa fts_pathlen
field.
Any such modifications should be undone before further calls to
.Fn fts_read
are attempted.
The
.Fa fts_name
field is always NUL terminated.
.Ss FTS_OPEN
The
.Fn fts_open
function takes a pointer to an array of character pointers naming one
or more paths which make up a logical file hierarchy to be traversed.
The array must be terminated by a null pointer.
.Pp
There are
a number of options, at least one of which (either
.Dv FTS_LOGICAL
or
.Dv FTS_PHYSICAL )
must be specified.
The
.Fa options
are selected by
.Tn OR Ns 'ing
the following values:
.Bl -tag -width "FTS_PHYSICAL"
.It Dv FTS_COMFOLLOW
This option causes any symbolic link specified as a root path to be
followed immediately whether or not
.Dv FTS_LOGICAL
is also specified.
.It Dv FTS_LOGICAL
This option causes the
.Nm fts
routines to return
.Li FTSENT
structures for the targets of symbolic links
instead of the symbolic links themselves.
If this option is set, the only symbolic links for which
.Li FTSENT
structures
are returned to the application are those referencing non-existent files.
Either
.Dv FTS_LOGICAL
or
.Dv FTS_PHYSICAL
.Em must
be provided to the
.Fn fts_open
function.
.It Dv FTS_NOCHDIR
As a performance optimization, the
.Nm fts
functions change directories as they walk the file hierarchy.
This has the side-effect that an application cannot rely on being
in any particular directory during the traversal.
The
.Dv FTS_NOCHDIR
option turns off this optimization, and the
.Nm fts
functions will not change the current directory.
Note that applications should not themselves change their current directory
and try to access files unless
.Dv FTS_NOCHDIR
is specified and absolute
pathnames were provided as arguments to
.Fn fts_open .
.It Dv FTS_NOSTAT
By default, returned
.Li FTSENT
structures reference file characteristic information (the
.Fa statp
field) for each file visited.
This option relaxes that requirement as a performance optimization,
allowing the
.Nm fts
functions to set the
.Fa fts_info
field to
.Dv FTS_NSOK
and leave the contents of the
.Fa statp
field undefined.
.It Dv FTS_PHYSICAL
This option causes the
.Nm fts
routines to return
.Li FTSENT
structures for symbolic links themselves instead
of the target files they point to.
If this option is set,
.Li FTSENT
structures for all symbolic links in the
hierarchy are returned to the application.
Either
.Dv FTS_LOGICAL
or
.Dv FTS_PHYSICAL
.Em must
be provided to the
.Fn fts_open
function.
.It Dv FTS_SEEDOT
By default, unless they are specified as path arguments to
.Fn fts_open ,
any files named
.Dq \&.
or
.Dq ..
encountered in the file hierarchy are ignored.
This option causes the
.Nm fts
routines to return
.Li FTSENT
structures for them.
.It Dv FTS_XDEV
This option prevents
.Nm fts
from descending into directories that have a different device number
than the file from which the descent began.
.El
.Pp
The
.Fa compar
argument
specifies a user-defined function which may be used to order the traversal
of the hierarchy.
It
takes two pointers to pointers to
.Li FTSENT
structures as arguments and
should return a negative value, zero, or a positive value to indicate
if the file referenced by its first argument comes before, in any order
with respect to, or after, the file referenced by its second argument.
The
.Fa fts_accpath ,
.Fa fts_path
and
.Fa fts_pathlen
fields of the
.Li FTSENT
structures may
.Em never
be used in this comparison.
If the
.Fa fts_info
field is set to
.Dv FTS_NS
or
.Dv FTS_NSOK ,
the
.Fa fts_statp
field may not either.
If the
.Fa compar
argument is
.Dv NULL ,
the directory traversal order is in the order listed in
.Fa path_argv
for the root paths, and in the order listed in the directory for
everything else.
.Pp
If an error occurs,
.Fn fts_open
returns
.Dv NULL
and sets
.Va errno
appropriately.
.Ss FTS_READ
The
.Fn fts_read
function returns a pointer to an
.Li FTSENT
structure describing a file in
the hierarchy.
Directories (that are readable and do not cause cycles) are visited at
least twice, once in pre-order and once in post-order.
All other files are visited at least once.
(Hard links between directories that do not cause cycles or symbolic
links to symbolic links may cause files to be visited more than once,
or directories more than twice.)
.Pp
If all the members of the hierarchy have been returned,
.Fn fts_read
returns
.Dv NULL
and sets the external variable
.Va errno
to 0.
If an error unrelated to a file in the hierarchy occurs,
.Fn fts_read
returns
.Dv NULL
and sets
.Va errno
appropriately.
If an error related to a returned file occurs, a pointer to an
.Li FTSENT
structure is returned, and
.Va errno
may or may not have been set (see
.Fa fts_info ) .
.Pp
The
.Li FTSENT
structures returned by
.Fn fts_read
may be overwritten after a call to
.Fn fts_close
on the same file hierarchy stream or, after a call to
.Fn fts_read ,
on the same file hierarchy stream unless they represent a file of type
directory, in which case they will not be overwritten until after a call to
.Fn fts_read
after the
.Li FTSENT
structure has been returned by the function
.Fn fts_read
in post-order.
.Ss FTS_CHILDREN
The
.Fn fts_children
function returns a pointer to an
.Li FTSENT
structure describing the first entry in a null-terminated
linked list of
the files in the directory represented by the
.Li FTSENT
structure most recently returned by
.Fn fts_read .
The list is linked through the
.Fa fts_link
field of the
.Li FTSENT
structure, and is ordered by the user-specified comparison function, if any.
Repeated calls to
.Fn fts_children
will recreate this linked list.
.Pp
As a special case, if
.Fn fts_read
has not yet been called for a hierarchy,
.Fn fts_children
will return a pointer to the files in the logical directory specified to
.Fn fts_open ,
i.e., the arguments specified to
.Fn fts_open .
Otherwise, if the
.Li FTSENT
structure most recently returned by
.Fn fts_read
is not a directory being visited in pre-order,
or the directory does not contain any files,
.Fn fts_children
returns
.Dv NULL
and sets
.Va errno
to 0.
If an error occurs,
.Fn fts_children
returns
.Dv NULL
and sets
.Va errno
appropriately.
.Pp
The
.Li FTSENT
structures returned by
.Fn fts_children
may be overwritten after a call to
.Fn fts_children ,
.Fn fts_close
or
.Fn fts_read
on the same file hierarchy stream.
.Pp
.Fa options
may be set to the following value:
.Bl -tag -width FTS_NAMEONLY
.It Dv FTS_NAMEONLY
Only the names of the files are needed.
The contents of all the fields in the returned linked list of structures
are undefined with the exception of the
.Fa fts_name
and
.Fa fts_namelen
fields.
.El
.Ss FTS_SET
The function
.Fn fts_set
allows the user application to determine further processing for the file
.Fa f
of the stream
.Fa ftsp .
The
.Fn fts_set
function returns 0 on success or \-1 if an error occurred.
.Fa option
must be set to one of the following values:
.Bl -tag -width FTS_PHYSICAL
.It Dv FTS_AGAIN
Re-visit the file; any file type may be re-visited.
The next call to
.Fn fts_read
will return the referenced file.
The
.Fa fts_stat
and
.Fa fts_info
fields of the structure will be reinitialized at that time,
but no other fields will have been changed.
This option is meaningful only for the most recently returned
file from
.Fn fts_read .
Normal use is for post-order directory visits, where it causes the
directory to be re-visited (in both pre and post-order) as well as all
of its descendants.
.It Dv FTS_FOLLOW
The referenced file must be a symbolic link.
If the referenced file is the one most recently returned by
.Fn fts_read ,
the next call to
.Fn fts_read
returns the file with the
.Fa fts_info
and
.Fa fts_statp
fields reinitialized to reflect the target of the symbolic link instead
of the symbolic link itself.
If the file is one of those most recently returned by
.Fn fts_children ,
the
.Fa fts_info
and
.Fa fts_statp
fields of the structure, when returned by
.Fn fts_read ,
will reflect the target of the symbolic link instead of the symbolic link
itself.
In either case if the target of the symbolic link does not exist, the
fields of the returned structure will be unchanged and the
.Fa fts_info
field will be set to
.Dv FTS_SLNONE .
.Pp
If the target of the link is a directory, the pre-order return, followed
by the return of all of its descendants, followed by a post-order return,
is done.
.It Dv FTS_SKIP
No descendants of this file are visited.
The file may be one of those most recently returned by either
.Fn fts_children
or
.Fn fts_read .
.El
.Ss FTS_CLOSE
The
.Fn fts_close
function closes a file hierarchy stream
.Fa ftsp
and restores the current directory to the directory from which
.Fn fts_open
was called to open
.Fa ftsp .
.Rv -std fts_close
.Sh ERRORS
The function
.Fn fts_open
may fail and set
.Va errno
for any of the errors specified for the library functions
.Xr open 2
and
.Xr malloc 3 .
.Pp
The function
.Fn fts_close
may fail and set
.Va errno
for any of the errors specified for the library function
.Xr fchdir 2 .
.Pp
The functions
.Fn fts_read
and
.Fn fts_children
may fail and set
.Va errno
for any of the errors specified for the library functions
.Xr chdir 2 ,
.Xr malloc 3 ,
.Xr opendir 3 ,
.Xr readdir 3
and
.Xr stat 2 .
.Pp
In addition,
.Fn fts_children ,
.Fn fts_open
and
.Fn fts_set
may fail and set
.Va errno
as follows:
.Bl -tag -width Er
.It Bq Er EINVAL
A specified option is invalid or
.Fa path_argv
is empty.
.El
.Sh SEE ALSO
.Xr find 1 ,
.Xr chdir 2 ,
.Xr stat 2 ,
.Xr qsort 3
.Sh HISTORY
The
.Nm fts
functions first appeared in
.Bx 4.3 Reno .
The interface was revised in
.Bx 4.4 .
@


1.35
log
@fts_open() requires that the list passed as argument to contain at least
one path.  When the list is empty (contain only a NULL pointer), return
EINVAL instead of pretending to succeed, which will cause a NULL pointer
deference in a later fts_read() call.  From FreeBSD.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.34 2015/11/10 23:48:18 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: November 10 2015 $
d765 1
a765 1
The specified option is invalid or
@


1.34
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.33 2015/03/13 19:58:40 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: March 13 2015 $
d765 3
a767 1
The specified option is invalid.
@


1.33
log
@remove the first comma from constructs like ", and," and ", or,": you can use
"and" and "or" to join sentence clauses, and you can use commas, but both hinders
reading;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.32 2015/02/05 02:33:09 schwarze Exp $
d32 2
a33 2
.Dd $Mdocdate: February 5 2015 $
.Dt FTS 3
d36 5
a40 1
.Nm fts
d58 1
a58 1
.Nm
d68 1
a68 1
.Nm
d253 1
a253 1
.Nm
d284 1
a284 1
.Nm
d290 1
a290 1
.Nm
d388 1
a388 1
.Nm
d407 1
a407 1
.Nm
d414 1
a414 1
.Nm
d430 1
a430 1
.Nm
d440 1
a440 1
.Nm
d466 1
a466 1
.Nm
d472 1
a472 1
.Nm
d774 1
a774 1
.Nm
@


1.32
log
@macro fixes from Kaspars at Bankovskis dot net;
also fixing one typo in fts(3) while here
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.31 2014/01/21 03:15:45 schwarze Exp $
d32 1
a32 1
.Dd $Mdocdate: January 21 2014 $
d561 2
a562 2
on the same file hierarchy stream, or, after a call to
.Fn fts_read
@


1.31
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.30 2013/06/05 03:39:22 tedu Exp $
d32 1
a32 1
.Dd $Mdocdate: June 5 2013 $
d237 1
a237 1
.Ev FTS_PARENTLEVEL
d242 1
a242 1
.Ev FTS_ROOTLEVEL
d247 1
a247 1
.Ev FTS_MAXLEVEL ,
@


1.30
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.29 2012/01/01 13:32:25 schwarze Exp $
d32 1
a32 1
.Dd $Mdocdate: January 1 2012 $
d89 1
a89 1
.Aq Pa fts.h .
@


1.29
log
@Updates regarding fts_close(3):
1) The close(2) return value and errno are ignored.
2) The errno is set by fchdir(2), not by chdir(2),
which has much less potential for errors.
3) Use .Rv -std.
While here, remove STANDARDS.  Keith Bostic added that hope in 1990
and tweaked the wording in 1993, but it didn't come true since then.
ok kettenis@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.28 2010/09/24 13:56:32 millert Exp $
d32 1
a32 1
.Dd $Mdocdate: September 24 2010 $
d39 3
a41 3
.Fd #include <sys/types.h>
.Fd #include <sys/stat.h>
.Fd #include <fts.h>
@


1.28
log
@Bump fts_level from short to int and add a spare short so things
line up nicely.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.27 2009/11/27 20:12:34 otto Exp $
d32 1
a32 1
.Dd $Mdocdate: November 27 2009 $
d719 1
a719 3
The
.Fn fts_close
function returns 0 on success or \-1 if an error occurred.
d734 2
a735 4
for any of the errors specified for the library functions
.Xr chdir 2
and
.Xr close 2 .
a767 6
.Sh STANDARDS
The
.Nm
API is expected to be included in a future
.St -p1003.1-88
revision.
@


1.27
log
@Correct description of physically vs logically; spotted by Nick
Guenther; ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.26 2009/08/27 16:19:27 millert Exp $
d32 1
a32 1
.Dd $Mdocdate: August 27 2009 $
d120 1
a120 1
	short fts_level;		/* depth (-1 to N) */
@


1.26
log
@Don't stop traversing a directory hierarchy if we reach SHRT_MAX,
just stop updating fts_level so we don't overflow it.  This allows
rm, find, etc to operate on very deep hierarchies.  Consumers of
fts(3) do need to be aware that the actual level may be larger
than fts_level.  During the next libc major bump we will make
fts_level an int instead of a short.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.25 2009/03/23 22:57:36 sobrado Exp $
d32 1
a32 1
.Dd $Mdocdate: March 23 2009 $
d81 5
a85 2
(ignoring symbolic links)
or physically (visiting symbolic links), order the walk of the hierarchy, or
@


1.25
log
@add a HISTORY section to fts(3).

diff proposed by an anonymous user on bugs@@; tweaked by jmc@@;
verified using the superb 4BSD collection at pdp-11.org.ru (thanks form@@).

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.24 2008/10/19 13:23:16 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: October 19 2008 $
d233 3
a235 1
of the traversal is numbered \-1, and the
d238 14
a251 1
itself is numbered 0.
@


1.24
log
@document fts_open error handling; from Tim van der Molen
ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.23 2007/05/31 19:19:28 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: May 31 2007 $
d760 7
@


1.23
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.22 2005/07/22 03:16:58 jaredy Exp $
d32 1
a32 1
.Dd $Mdocdate$
d494 8
@


1.22
log
@- sync prototypes and header file excerpts to reality
- many grammar, punctuation, macro, layout, spelling/typos,
  rewording, etc. fixes
- avoid first person
- sprinkle crossrefs where relevant

help & ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.21 2005/03/01 15:38:39 mpf Exp $
d32 1
a32 1
.Dd April 16, 1994
@


1.21
log
@Update struct _ftsent to match with fts.h.
Input from jaredy@@; ok deraadt@@, miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.20 2005/02/25 03:12:43 cloder Exp $
d604 1
a604 1
.Fa option
d668 1
a668 1
In either case, if the target of the symbolic link does not exist the
d749 1
a749 1
utility is expected to be included in a future
@


1.20
log
@Be correct in our man pages when talking about NUL termination (that is,
termination with '\0') vs. null termination.
Input from krw@@, jaredy@@, jmc@@.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.19 2003/06/02 20:18:34 millert Exp $
d111 1
a111 1
	u_short fts_info;		/* flags for FTSENT structure */
d121 3
a123 3
	struct ftsent *fts_parent;	/* parent directory */
	struct ftsent *fts_link;	/* next file structure */
	struct ftsent *fts_cycle;	/* cycle structure */
@


1.19
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.18 2001/05/15 21:14:38 millert Exp $
d322 1
a322 1
fields are guaranteed to be null terminated
d339 1
a339 1
field is always null terminated.
@


1.18
log
@Make path length variables size_t.  This fixes the problem where
things like rm can't remove files with ridiculously long path names
that were created by some script kiddie trying in vain to exploit
something.  Previously, the length was effectively constrained to
USHRT_MAX due to one of the internal structs.  Also, nuke FTS_CHDIRROOT
since it never worked correctly and hasn't been documented for a
long time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.17 2000/12/24 00:30:47 aaron Exp $
d14 1
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.17
log
@Various repairs, mostly to get rid of short lines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.16 2000/04/18 03:01:26 aaron Exp $
d118 1
a118 1
	u_short fts_pathlen;		/* strlen(fts_path) */
d120 1
a120 1
	u_short fts_namelen;		/* strlen(fts_name) */
@


1.16
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.15 1999/10/03 19:22:22 millert Exp $
d623 1
a623 2
allows the user application to determine further processing for the
file
d629 1
a629 2
function
returns 0 on success or \-1 if an error occurred.
d699 1
a699 2
function
returns 0 on success or \-1 if an error occurred.
@


1.15
log
@kill FTS_CHDIRROOT flag, it is broken beyond repair and no longer used
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.14 1999/08/27 19:00:48 millert Exp $
d144 1
a144 1
.Bl  -tag -width FTS_DEFAULT
@


1.14
log
@fts_pathlen and fts_namelen are u_short, not short
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.13 1999/07/09 13:35:20 aaron Exp $
a456 6
.It Dv FTS_CHDIRROOT
This option causes
.Fn fts_read
to change the current directory to the root of the hierarchy when
starting a new one.  The default is to change to the original
starting directory.
@


1.13
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.12 1999/06/05 03:44:53 aaron Exp $
d118 1
a118 1
	short fts_pathlen;		/* strlen(fts_path) */
d120 1
a120 1
	short fts_namelen;		/* strlen(fts_name) */
@


1.12
log
@change some .Em/.Va to .Li, looks nicer
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.11 1999/06/04 01:30:10 aaron Exp $
d250 1
a250 1
field set to 
d487 1
a487 1
If the 
@


1.11
log
@After some constructive criticism from pjanzen@@ and some e-mail tag:

   - only use the .Dv NULL form when referring explicitly to a function
     argument or return value
   - otherwise, use these forms:
        o non-null
        o null-terminated (hyphenated form for predicate adjective)
        o else, null terminated, or null terminate, whichever the case
        o null pointer, null byte, null string, etc.
   - may use NUL to refer to an ASCII NUL, but it doesn't need a .Tn macro

In general, capitalizing the word "null" everywhere is unnecessary and makes
the man pages harder to read. The above is consistent with popular programming
texts (i.e., K&R, Stevens).
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.10 1999/06/03 10:03:20 aaron Exp $
d95 1
a95 1
.Em FTSENT ,
d99 1
a99 1
.Em FTSENT
d105 1
a105 1
.Dq Em FTSENT No structure
d110 1
a110 1
.Em FTSENT
d136 1
a136 1
.Em FTSENT
d152 1
a152 1
.Em FTSENT
d156 1
a156 1
.Em FTSENT
d178 1
a178 1
.Em FTSENT
d235 1
a235 1
.Em FTSENT
d238 1
a238 1
.Em FTSENT
d243 1
a243 1
.Em FTSENT
d278 1
a278 1
.Em FTSENT
d307 1
a307 1
.Em FTSENT
d309 1
a309 1
.Em FTSENT
d331 1
a331 1
.Em FTSENT
d334 1
a334 1
.Em FTSENT
d360 1
a360 1
.Em OR Ns 'ing
d372 1
a372 1
.Em FTSENT
d376 1
a376 1
.Em FTSENT
d406 1
a406 1
.Em FTSENT
d424 1
a424 1
.Em FTSENT
d428 1
a428 1
.Em FTSENT
d450 1
a450 1
.Em FTSENT
d472 1
a472 1
.Em FTSENT
d483 1
a483 1
.Em FTSENT
d508 1
a508 1
.Em FTSENT
d533 1
a533 1
.Em FTSENT
d540 1
a540 1
.Em FTSENT
d551 1
a551 1
.Em FTSENT
d559 1
a559 1
.Em FTSENT
d563 1
a563 1
.Em FTSENT
d569 1
a569 1
.Em FTSENT
d584 1
a584 1
.Em FTSENT
d604 1
a604 1
.Em FTSENT
@


1.10
log
@use \-1, not -1, to change the meaning of `-' to minus sign from hyphen;
pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.9 1999/05/29 22:38:34 aaron Exp $
d294 1
a294 2
field points to the next structure in the
.Dv NULL Ns -terminated
d326 1
a326 1
fields are guaranteed to be NUL-terminated
d343 1
a343 1
field is always NUL-terminated.
d349 1
a349 3
The array must be terminated by a
.Dv NULL
pointer.
d560 1
a560 2
structure describing the first entry in a
.Dv NULL Ns -terminatedu
@


1.9
log
@repairs; go back over some old files, because we should properly distinguish
between NUL and NULL, i.e., don't use the .Dv (defined variable) macro when
referring to an ASCII NUL
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.8 1999/05/29 19:11:10 aaron Exp $
d232 1
a232 1
The depth of the traversal, numbered from -1 to N, where this file
d237 1
a237 1
of the traversal is numbered -1, and the
d641 1
a641 1
returns 0 on success or -1 if an error occurred.
d712 1
a712 1
returns 0 on success or -1 if an error occurred.
@


1.8
log
@repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.7 1999/05/29 16:08:55 aaron Exp $
d327 1
a327 2
fields are guaranteed to be
.Dv NULL Ns -terminated
d344 1
a344 2
field is always
.Dv NULL Ns -terminated.
d563 3
a565 1
structure describing the first entry in a NULL-terminated linked list of
@


1.7
log
@repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.6 1999/05/27 16:20:59 aaron Exp $
d95 1
a95 1
.Dv FTSENT ,
d99 1
a99 1
.Dv FTSENT
d105 1
a105 1
.Dq Dv FTSENT No structure
d110 1
a110 1
.Dv FTSENT
d136 1
a136 1
.Dv FTSENT
d152 1
a152 1
.Dv FTSENT
d156 1
a156 1
.Dv FTSENT
d178 1
a178 1
.Dv FTSENT
d235 1
a235 1
.Dv FTSENT
d238 1
a238 1
.Dv FTSENT
d243 1
a243 1
.Dv FTSENT
d278 1
a278 1
.Dv FTSENT
d308 1
a308 1
.Dv FTSENT
d310 1
a310 1
.Dv FTSENT
d333 1
a333 1
.Dv FTSENT
d336 1
a336 1
.Dv FTSENT
d377 1
a377 1
.Dv FTSENT
d381 1
a381 1
.Dv FTSENT
d411 1
a411 1
.Dv FTSENT
d429 1
a429 1
.Dv FTSENT
d433 1
a433 1
.Dv FTSENT
d455 1
a455 1
.Dv FTSENT
d477 1
a477 1
.Dv FTSENT
d488 1
a488 1
.Dv FTSENT
d513 1
a513 1
.Dv FTSENT
d538 1
a538 1
.Dv FTSENT
d545 1
a545 1
.Dv FTSENT
d556 1
a556 1
.Dv FTSENT
d564 1
a564 1
.Dv FTSENT
d567 1
a567 1
.Dv FTSENT
d573 1
a573 1
.Dv FTSENT
d588 1
a588 1
.Dv FTSENT
d608 1
a608 1
.Dv FTSENT
@


1.6
log
@or'ing -> OR'ing
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.5 1998/03/01 00:02:23 deraadt Exp $
d53 1
a53 1
.Fn fts_set "FTS *ftsp" "FTSENT *f" "int options"
d58 1
a58 1
.Nm fts
d60 1
a60 1
.Tn UNIX
d62 1
a62 1
A simple overview is that the
d64 3
a66 1
function returns a ``handle'' on a file hierarchy, which is then supplied to
d68 1
a68 1
.Nm fts
d77 2
a78 1
one of the files contained in a directory in the hierarchy.
d83 4
a86 2
It is possible to walk the hierarchy ``logically'' (ignoring symbolic links)
or physically (visiting symbolic links), order the walk of the hierarchy or
d92 1
a92 1
.Fa FTS ,
d95 1
a95 1
.Fa FTSENT ,
d99 1
a99 1
.Fa FTSENT
d102 4
a105 2
In this manual page, ``file'' and
.Dq Fa FTSENT No structure
d108 1
d110 1
a110 1
.Fa FTSENT
d121 1
a121 1
	short fts_level;		/* depth (\-1 to N) */
d136 1
a136 1
.Fa FTSENT
d152 1
a152 1
.Fa FTSENT
d156 1
a156 1
.Fa FTSENT
d168 1
a168 1
.Ql \&.
d170 1
a170 1
.Ql ..
d178 1
a178 1
.Fa FTSENT
d180 1
a180 1
it was returned in pre-order, i.e. with the
d232 1
a232 1
The depth of the traversal, numbered from \-1 to N, where this file
d235 1
a235 1
.Fa FTSENT
d237 2
a238 2
of the traversal is numbered \-1, and the
.Fa FTSENT
d242 2
a243 2
Upon return of a
.Fa FTSENT
d266 1
a266 1
.Nm fts
d272 1
a272 1
.Nm fts
d278 1
a278 1
.Fa FTSENT
d280 1
a280 1
immediately above the current file, i.e. the directory of which this
d294 3
a296 2
field points to the next structure in the NULL-terminated linked list of
directory members.
d308 1
a308 1
.Fa FTSENT
d310 1
a310 1
.Fa FTSENT
d328 1
a328 1
.Dv NUL Ns -terminated
d333 1
a333 1
.Fa FTSENT
d336 1
a336 1
.Fa FTSENT
d346 2
a347 2
.Dv NUL Ns -terminated.
.Sh FTS_OPEN
d362 3
a364 1
The options are selected by
d375 1
a375 1
.Nm fts
d377 1
a377 1
.Fa FTSENT
d381 1
a381 1
.Fa FTSENT
d394 1
a394 1
.Nm fts
d401 1
a401 1
.Nm fts
d411 1
a411 1
.Fa FTSENT
d417 1
a417 1
.Nm fts
d427 1
a427 1
.Nm fts
d429 1
a429 1
.Fa FTSENT
d433 1
a433 1
.Fa FTSENT
d448 1
a448 1
.Ql \&.
d450 1
a450 1
.Ql ..
d453 1
a453 1
.Nm fts
d455 1
a455 1
.Fa FTSENT
d459 1
a459 1
.Nm fts
d470 3
a472 2
The argument
.Fn compar
d477 1
a477 1
.Fa FTSENT
d488 1
a488 1
.Fa FTSENT
d502 1
a502 1
.Fn compar
d509 1
a509 1
.Sh FTS_READ
d513 1
a513 1
.Fa FTSENT
d538 1
a538 1
.Fa FTSENT
d545 1
a545 1
.Fa FTSENT
d556 1
a556 1
.Fa FTSENT
d560 1
a560 1
.Sh FTS_CHILDREN
d564 1
a564 1
.Fa FTSENT
d567 1
a567 1
.Fa FTSENT
d573 1
a573 1
.Fa FTSENT
d585 1
a585 1
i.e. the arguments specified to
d588 1
a588 1
.Fa FTSENT
d598 1
a598 1
to zero.
d608 1
a608 1
.Fa FTSENT
d618 1
a618 1
.Em Option
d630 1
a630 1
.Sh FTS_SET
d641 2
a642 2
returns 0 on success, and \-1 if an error occurs.
.Em Option
d700 1
a700 1
.Sh FTS_CLOSE
d712 1
a712 1
returns 0 on success, and \-1 if an error occurs.
d756 1
a756 1
The options were invalid.
d765 1
a765 1
.Nm fts
@


1.5
log
@s/NULL/NUL/ in the right places; jraynard
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.4 1997/09/01 02:48:46 millert Exp $
d354 1
a354 1
.Em or Ns 'ing
@


1.4
log
@Document FTS_CHDIRROOT somewhat.  Could be better.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.3 1997/03/21 21:36:36 millert Exp $
d319 1
a319 1
.Dv NULL Ns -terminated
d337 1
a337 1
.Dv NULL Ns -terminated.
@


1.3
log
@Fix two typos in fts(3).  NetBSD PR#3364 and NetBSD PR#3368
from Enami Tsugutomo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.2 1996/08/19 08:22:57 tholo Exp $
d451 6
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
.\"	$OpenBSD: fts.3,v 1.11 1995/02/27 03:43:23 cgd Exp $
d34 2
d47 1
a47 1
.Fn fts_open "char * const *path_argv" "int options" "int *compar(const FTSENT **, const FTSENT **)"
d53 1
a53 1
.Fn fts_set "FTS ftsp" "FTSENT *f" "int options"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: fts.3,v 1.11 1995/02/27 03:43:23 cgd Exp $
a32 2
.\"
.\"     @@(#)fts.3	8.5 (Berkeley) 4/16/94
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

