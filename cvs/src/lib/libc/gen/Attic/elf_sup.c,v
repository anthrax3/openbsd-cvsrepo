head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	96.05.29.03.05.12;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	96.05.28.14.11.21;	author etheisen;	state Exp;
branches;
next	1.1;

1.1
date	96.04.29.04.53.28;	author etheisen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@enable ELF/a.out/ECOFF in machine/exec.h
@
text
@/*	$OpenBSD: elf_sup.c,v 1.2 1996/05/28 14:11:21 etheisen Exp deraadt $	*/
/*
 * Copyright (c) 1995, 1996 Erik Theisen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include "exec_sup.h"

/*
 * __elf_is_okay__ - Determine if ehdr really
 * is ELF and valid for the target platform.
 *
 * WARNING:  This is NOT a ELF ABI function and
 * as such it's use should be restricted.
 */
int
__elf_is_okay__(ehdr)
        register Elf32_Ehdr *ehdr;
{
        register int retval = 0;
        
        /*
         * We need to check magic, class size, endianess,
         * and version before we look at the rest of the
         * Elf32_Ehdr structure.  These few elements are
         * represented in a machine independant fashion.
         */
        if(IS_ELF(*ehdr) &&
           ehdr->e_ident[EI_CLASS] == ELF_TARG_CLASS &&
           ehdr->e_ident[EI_DATA] == ELF_TARG_DATA &&
           ehdr->e_ident[EI_VERSION] == ELF_TARG_VER) {

                /* Now check the machine dependant header */
                if(ehdr->e_machine == ELF_TARG_MACH &&
                   ehdr->e_version == ELF_TARG_VER)
                        retval = 1;
        }
        return retval;
} /* end __elf_is_okay__() */
@


1.2
log
@All platforms get elf_nlist().  Hidden __elf_is_okay__() function is
now present for ELF platforms.  This function is not ABI compliant and
it's use should be restricted.  exec_sup.h now determines the target
OMF for various platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@Initial libc ELF support.  Currently only elf_hash() is implemented.
@
text
@d28 1
a28 1
#include <elf_abi.h>
d31 5
a35 3
 * Standard ELF ABI hash function.
 * DO NOT MODIFY THIS FUNCTION -- INVALID
 * HASH TABLES WILL BE GENERATED!
d37 3
a39 3
unsigned long
elf_hash(name)
        const unsigned char *name;
d41 12
a52 1
        register unsigned long h = 0, g;
d54 4
a57 6
        while(*name)
        {
                h = (h << 4) + *name++;
                if (g = h & 0xf0000000)
                        h ^= g >> 24;
                h &= ~g;
d59 2
a60 2
        return h;
} /* end elf_hash() */
@
