head	1.8;
access;
symbols
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2000.11.21.00.48.37;	author millert;	state dead;
branches;
next	1.7;

1.7
date	2000.01.13.19.36.21;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.12.08.04.26.13;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.09.00.28.22;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.12.04.23.02.13;	author chuck;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.23.57;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.08.33.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.55;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.55;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Add readpasasphrase(3), a more flexible getpass(3) replacement.
getpass(3) is now implemented in terms of readpasasphrase(3).
@
text
@/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: getpass.c,v 1.7 2000/01/13 19:36:21 millert Exp $";
#endif /* LIBC_SCCS and not lint */

#include <fcntl.h>
#include <paths.h>
#include <pwd.h>
#include <signal.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>

char *
getpass(prompt)
	const char *prompt;
{
	struct termios term;
	char ch, *p;
	int echo, input, output;
	static char buf[_PASSWORD_LEN + 1];
	sigset_t oset, nset;

	/*
	 * Read and write to /dev/tty if possible; else read from
	 * stdin and write to stderr.
	 */
	if ((input = output = open(_PATH_TTY, O_RDWR)) == -1) {
		input = STDIN_FILENO;
		output = STDERR_FILENO;
	}

	/*
	 * Note - blocking signals isn't necessarily the
	 * right thing, but we leave it for now.
	 */
	sigemptyset(&nset);
	sigaddset(&nset, SIGINT);
	sigaddset(&nset, SIGTSTP);
	(void)sigprocmask(SIG_BLOCK, &nset, &oset);

	/* Turn off echo if possible. */
	if (tcgetattr(input, &term) == 0 && (term.c_lflag & ECHO)) {
		echo = 1;
		term.c_lflag &= ~ECHO;
		(void)tcsetattr(input, TCSAFLUSH|TCSASOFT, &term);
	} else
		echo = 0;

	(void)write(output, prompt, strlen(prompt));
	for (p = buf; read(input, &ch, 1) == 1 && ch != '\n';)
		if (p < buf + _PASSWORD_LEN)
			*p++ = ch;
	*p = '\0';
	(void)write(output, "\n", 1);
	if (echo) {
		term.c_lflag |= ECHO;
		(void)tcsetattr(input, TCSAFLUSH|TCSASOFT, &term);
	}
	(void)sigprocmask(SIG_SETMASK, &oset, NULL);
	if (input != STDIN_FILENO)
		(void)close(input);
	return(buf);
}
@


1.7
log
@include string.h to get strlen() prototype
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: getpass.c,v 1.6 1999/12/08 04:26:13 millert Exp $";
@


1.6
log
@Don't use stdio since we don't want the password to end up in stdio
buffers that may not get zeroed.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: getpass.c,v 1.5 1997/07/09 00:28:22 millert Exp $";
d42 1
@


1.5
log
@Clean up some -Wall complaints.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: getpass.c,v 1.4 1996/12/04 23:02:13 chuck Exp $";
d38 1
a38 3
#include <termios.h>
#include <signal.h>

d41 2
a42 1
#include <stdio.h>
d50 2
a51 4
	register int ch;
	register char *p;
	FILE *fp, *outfp;
	int echo;
d56 1
a56 1
	 * read and write to /dev/tty if possible; else read from
d59 3
a61 3
	if ((outfp = fp = fopen(_PATH_TTY, "r+")) == NULL) {
		outfp = stderr;
		fp = stdin;
d65 1
a65 1
	 * note - blocking signals isn't necessarily the
d73 3
a75 2
	(void)tcgetattr(fileno(fp), &term);
	if ((echo = (term.c_lflag & ECHO))) {
d77 6
a82 5
		(void)tcsetattr(fileno(fp), TCSAFLUSH|TCSASOFT, &term);
	}
	(void)fputs(prompt, outfp);
	rewind(outfp);			/* implied flush */
	for (p = buf; (ch = getc(fp)) != EOF && ch != '\n';)
d86 1
a86 1
	(void)write(fileno(outfp), "\n", 1);
d89 1
a89 1
		(void)tcsetattr(fileno(fp), TCSAFLUSH|TCSASOFT, &term);
d92 2
a93 2
	if (fp != stdin)
		(void)fclose(fp);
@


1.4
log
@change open of /dev/tty to "r+" rather than "w+".   if /dev/tty is
missing there is no point creating a plain text file to replace it.
(related to a problem jkatz had)
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: getpass.c,v 1.3 1996/08/19 08:23:57 tholo Exp $";
d77 1
a77 1
	if (echo = (term.c_lflag & ECHO)) {
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: getpass.c,v 1.9 1996/05/20 06:13:07 jtc Exp $";
d62 1
a62 1
	if ((outfp = fp = fopen(_PATH_TTY, "w+")) == NULL) {
@


1.2
log
@signal mask repair, netbsd pr#2442
@
text
@a0 2
/*	$NetBSD: getpass.c,v 1.9 1996/05/20 06:13:07 jtc Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)getpass.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$NetBSD: getpass.c,v 1.9 1996/05/20 06:13:07 jtc Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: getpass.c,v 1.7 1995/06/16 07:20:35 jtc Exp $	*/
d40 1
a40 1
static char rcsid[] = "$NetBSD: getpass.c,v 1.7 1995/06/16 07:20:35 jtc Exp $";
a59 1
	long omask;
d62 1
d72 1
d77 5
a81 1
	omask = sigblock(sigmask(SIGINT)|sigmask(SIGTSTP));
d98 1
a98 1
	(void)sigsetmask(omask);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
