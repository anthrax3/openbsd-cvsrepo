head	1.9;
access;
symbols
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.22
	OPENBSD_5_0:1.8.0.20
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.18
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.16
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.12
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.14
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.10
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.8
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.6
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.4
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2012.04.12.15.45.35;	author deraadt;	state dead;
branches;
next	1.8;

1.8
date	2007.02.26.19.32.54;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.30.15.02.59;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.24.17.15.25;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.25.15.38.47;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.01.04.08.45;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.11.00.03.08;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.02.19.20.26;	author millert;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Since threads are becoming more common, this "work around the
compiler not doing alloca in C using malloc" is unworkable.  It
is not safe, and we can never use it.
ok guenther kurt
@
text
@/*	$OpenBSD: alloca.c,v 1.8 2007/02/26 19:32:54 miod Exp $	*/

/* alloca.c -- allocate automatically reclaimed memory
   (Mostly) portable public-domain implementation -- D A Gwyn

   This implementation of the PWB library alloca function,
   which is used to allocate space off the run-time stack so
   that it is automatically reclaimed upon procedure exit,
   was inspired by discussions with J. Q. Johnson of Cornell.

   There are some preprocessor constants that can
   be defined when compiling for your specific system, for
   improved efficiency; however, the defaults should be okay.

   The general concept of this implementation is to keep
   track of all alloca-allocated blocks, and reclaim any
   that are found to be deeper in the stack than the current
   invocation.  This heuristic does not reclaim storage as
   soon as it becomes invalid, but it will do so eventually.

   As a special case, alloca(0) reclaims storage without
   allocating any.  It is a good idea to use alloca(0) in
   your main control loop, etc. to force garbage collection.  */

/* If someone has defined alloca as a macro,
   there must be some other way alloca is supposed to work.  */
#ifndef alloca

#include <string.h>
#include <stdlib.h>

/* If your stack is a linked list of frames, you have to
   provide an "address metric" ADDRESS_FUNCTION macro.  */

#define ADDRESS_FUNCTION(arg) &(arg)

typedef void *pointer;

/* Define STACK_DIRECTION for your cpu:
   STACK_DIRECTION > 0 => grows toward higher addresses
   STACK_DIRECTION < 0 => grows toward lower addresses */

#if defined(__alpha__) || defined(__m68k__)    || defined(__i386__) || \
    defined(__m88k__)  || defined(__mips__)    || defined(__powerpc__) || \
    defined(__sparc__) || defined(__sparc64__) || defined(__vax__) || \
    defined(__amd64__) || defined(__mips64__) || defined(__arm__) || \
    defined(__sh__)
# define	STACK_DIRECTION	-1
#elif defined(__hppa__) || defined(__hppa64__)
# define	STACK_DIRECTION	1
#else
# error must specify stack direction
#endif

/* An "alloca header" is used to:
   (a) chain together all alloca'ed blocks;
   (b) keep track of stack depth.

   It is very important that sizeof(header) agree with malloc
   alignment chunk size.  The following default should work okay.  */

#ifndef	ALIGN_SIZE
#define	ALIGN_SIZE	sizeof(double)
#endif

typedef union hdr
{
  char align[ALIGN_SIZE];	/* To force sizeof(header).  */
  struct
    {
      union hdr *next;		/* For chaining headers.  */
      char *deep;		/* For stack depth measure.  */
    } h;
} header;

static header *last_alloca_header = NULL;	/* -> last alloca header.  */

/* Return a pointer to at least SIZE bytes of storage,
   which will be automatically reclaimed upon exit from
   the procedure that called alloca.  Originally, this space
   was supposed to be taken from the current stack frame of the
   caller, but that method cannot be made to work for some
   implementations of C, for example under Gould's UTX/32.  */

pointer
alloca (size_t size)
{
  char probe;		/* Probes stack depth: */
  char *depth = ADDRESS_FUNCTION (probe);

  /* Reclaim garbage, defined as all alloca'd storage that
     was allocated from deeper in the stack than currently.  */

  {
    header *hp;	/* Traverses linked list.  */

    for (hp = last_alloca_header; hp != NULL;)
      if ((STACK_DIRECTION > 0 && hp->h.deep > depth)
	  || (STACK_DIRECTION < 0 && hp->h.deep < depth))
	{
	  header *np = hp->h.next;

	  free ((pointer) hp);	/* Collect garbage.  */

	  hp = np;		/* -> next header.  */
	}
      else
	break;			/* Rest are not deeper.  */

    last_alloca_header = hp;	/* -> last valid storage.  */
  }

  if (size == 0)
    return NULL;		/* No allocation required.  */

  /* Allocate combined header + user data storage.  */

  {
    pointer new = malloc (sizeof (header) + size);
    /* Address of header.  */

    if (new == 0)
      abort();

    ((header *) new)->h.next = last_alloca_header;
    ((header *) new)->h.deep = depth;

    last_alloca_header = (header *) new;

    /* User storage begins just after header.  */

    return (pointer) ((char *) new + sizeof (header));
  }
}

#endif /* no alloca */
@


1.8
log
@Add SuperH to the architecture list which stack grow down, even though this
file is not used for them.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloca.c,v 1.7 2005/11/30 15:02:59 deraadt Exp $	*/
@


1.7
log
@know __arm__ too
@
text
@d1 1
a1 1
/*	$OpenBSD: alloca.c,v 1.6 2005/11/24 17:15:25 deraadt Exp $	*/
d46 2
a47 1
    defined(__amd64__) || defined(__mips64__) || defined(__arm__)
@


1.6
log
@include more architectures in the list (even though some do not compile
this, but do it entirely in the compiler); ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: alloca.c,v 1.5 2005/03/25 15:38:47 otto Exp $	*/
d46 1
a46 1
    defined(__amd64__) || defined(__mips64__)
@


1.5
log
@deregister (and deauto!). ok millert@@ marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: alloca.c,v 1.4 2004/10/01 04:08:45 jsg Exp $	*/
d46 1
a46 1
    defined(__x86_64__)
d48 1
a48 1
#elif defined(__hppa__)
@


1.4
log
@add some missing $, ok djm@@ 'That looks fine to me' millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d87 2
a88 2
  auto char probe;		/* Probes stack depth: */
  register char *depth = ADDRESS_FUNCTION (probe);
d94 1
a94 1
    register header *hp;	/* Traverses linked list.  */
d100 1
a100 1
	  register header *np = hp->h.next;
d118 1
a118 1
    register pointer new = malloc (sizeof (header) + size);
@


1.3
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d1 2
@


1.2
log
@amd64 would use negative stack direction, if it used this file; millert ok
@
text
@d83 1
a83 2
alloca (size)
     unsigned size;
@


1.1
log
@Add Doug Gwyn's portable alloca() for platforms w/o an assembler
version.  Normally, gcc provides its own alloca() (unless -fno-builtin
is specified).  The C version is decidedly suboptimal--we really
need proper assembler versions but this will work as a stop-gap
measure.
@
text
@d43 2
a44 1
    defined(__sparc__) || defined(__sparc64__) || defined(__vax__)
@

