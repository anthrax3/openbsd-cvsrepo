head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.15.0.12
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.16
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.14
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.10
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.12.0.22
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.18
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.20
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.16
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.14
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.12
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.10
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.8
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.18
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.16
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.14
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.12
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2015.09.13.11.32.51;	author guenther;	state Exp;
branches;
next	1.16;
commitid	iyy5LbsofWKe89dA;

1.16
date	2015.07.20.01.52.28;	author millert;	state Exp;
branches;
next	1.15;
commitid	1K7DsYjDc1gtQpBp;

1.15
date	2011.03.13.22.21.32;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2010.08.24.23.49.06;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2010.08.21.18.59.15;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2005.03.25.15.38.47;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2004.10.17.20.25.31;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.07.25.20.30.05;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.07.09.00.28.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.09.15.09.31.10;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.27.16;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.21.39.15;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Wrap <vis.h> so that calls go direct and the symbols are all weak
@
text
@/*	$OpenBSD: unvis.c,v 1.16 2015/07/20 01:52:28 millert Exp $ */
/*-
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <ctype.h>
#include <vis.h>

/*
 * decode driven by state machine
 */
#define	S_GROUND	0	/* haven't seen escape char */
#define	S_START		1	/* start decoding special sequence */
#define	S_META		2	/* metachar started (M) */
#define	S_META1		3	/* metachar more, regular char (-) */
#define	S_CTRL		4	/* control char started (^) */
#define	S_OCTAL2	5	/* octal digit 2 */
#define	S_OCTAL3	6	/* octal digit 3 */

#define	isoctal(c)	(((u_char)(c)) >= '0' && ((u_char)(c)) <= '7')

/*
 * unvis - decode characters previously encoded by vis
 */
int
unvis(char *cp, char c, int *astate, int flag)
{

	if (flag & UNVIS_END) {
		if (*astate == S_OCTAL2 || *astate == S_OCTAL3) {
			*astate = S_GROUND;
			return (UNVIS_VALID);
		} 
		return (*astate == S_GROUND ? UNVIS_NOCHAR : UNVIS_SYNBAD);
	}

	switch (*astate) {

	case S_GROUND:
		*cp = 0;
		if (c == '\\') {
			*astate = S_START;
			return (0);
		} 
		*cp = c;
		return (UNVIS_VALID);

	case S_START:
		switch(c) {
		case '-':
			*cp = 0;
			*astate = S_GROUND;
			return (0);
		case '\\':
		case '"':
			*cp = c;
			*astate = S_GROUND;
			return (UNVIS_VALID);
		case '0': case '1': case '2': case '3':
		case '4': case '5': case '6': case '7':
			*cp = (c - '0');
			*astate = S_OCTAL2;
			return (0);
		case 'M':
			*cp = (char) 0200;
			*astate = S_META;
			return (0);
		case '^':
			*astate = S_CTRL;
			return (0);
		case 'n':
			*cp = '\n';
			*astate = S_GROUND;
			return (UNVIS_VALID);
		case 'r':
			*cp = '\r';
			*astate = S_GROUND;
			return (UNVIS_VALID);
		case 'b':
			*cp = '\b';
			*astate = S_GROUND;
			return (UNVIS_VALID);
		case 'a':
			*cp = '\007';
			*astate = S_GROUND;
			return (UNVIS_VALID);
		case 'v':
			*cp = '\v';
			*astate = S_GROUND;
			return (UNVIS_VALID);
		case 't':
			*cp = '\t';
			*astate = S_GROUND;
			return (UNVIS_VALID);
		case 'f':
			*cp = '\f';
			*astate = S_GROUND;
			return (UNVIS_VALID);
		case 's':
			*cp = ' ';
			*astate = S_GROUND;
			return (UNVIS_VALID);
		case 'E':
			*cp = '\033';
			*astate = S_GROUND;
			return (UNVIS_VALID);
		case '\n':
			/*
			 * hidden newline
			 */
			*astate = S_GROUND;
			return (UNVIS_NOCHAR);
		case '$':
			/*
			 * hidden marker
			 */
			*astate = S_GROUND;
			return (UNVIS_NOCHAR);
		}
		*astate = S_GROUND;
		return (UNVIS_SYNBAD);
		 
	case S_META:
		if (c == '-')
			*astate = S_META1;
		else if (c == '^')
			*astate = S_CTRL;
		else {
			*astate = S_GROUND;
			return (UNVIS_SYNBAD);
		}
		return (0);
		 
	case S_META1:
		*astate = S_GROUND;
		*cp |= c;
		return (UNVIS_VALID);
		 
	case S_CTRL:
		if (c == '?')
			*cp |= 0177;
		else
			*cp |= c & 037;
		*astate = S_GROUND;
		return (UNVIS_VALID);

	case S_OCTAL2:	/* second possible octal digit */
		if (isoctal(c)) {
			/* 
			 * yes - and maybe a third 
			 */
			*cp = (*cp << 3) + (c - '0');
			*astate = S_OCTAL3;	
			return (0);
		} 
		/* 
		 * no - done with current sequence, push back passed char 
		 */
		*astate = S_GROUND;
		return (UNVIS_VALIDPUSH);

	case S_OCTAL3:	/* third possible octal digit */
		*astate = S_GROUND;
		if (isoctal(c)) {
			*cp = (*cp << 3) + (c - '0');
			return (UNVIS_VALID);
		}
		/*
		 * we were done, push back passed char
		 */
		return (UNVIS_VALIDPUSH);

	default:	
		/* 
		 * decoder in unknown state - (probably uninitialized) 
		 */
		*astate = S_GROUND;
		return (UNVIS_SYNBAD);
	}
}
DEF_WEAK(unvis);

/*
 * strunvis - decode src into dst 
 *
 *	Number of chars decoded into dst is returned, -1 on error.
 *	Dst is null terminated.
 */

int
strunvis(char *dst, const char *src)
{
	char c;
	char *start = dst;
	int state = 0;

	while ((c = *src++)) {
	again:
		switch (unvis(dst, c, &state, 0)) {
		case UNVIS_VALID:
			dst++;
			break;
		case UNVIS_VALIDPUSH:
			dst++;
			goto again;
		case 0:
		case UNVIS_NOCHAR:
			break;
		default:
			*dst = '\0';
			return (-1);
		}
	}
	if (unvis(dst, c, &state, UNVIS_END) == UNVIS_VALID)
		dst++;
	*dst = '\0';
	return (dst - start);
}

ssize_t
strnunvis(char *dst, const char *src, size_t sz)
{
	char c, p;
	char *start = dst, *end = dst + sz - 1;
	int state = 0;

	if (sz > 0)
		*end = '\0';
	while ((c = *src++)) {
	again:
		switch (unvis(&p, c, &state, 0)) {
		case UNVIS_VALID:
			if (dst < end)
				*dst = p;
			dst++;
			break;
		case UNVIS_VALIDPUSH:
			if (dst < end)
				*dst = p;
			dst++;
			goto again;
		case 0:
		case UNVIS_NOCHAR:
			break;
		default:
			if (dst <= end)
				*dst = '\0';
			return (-1);
		}
	}
	if (unvis(&p, c, &state, UNVIS_END) == UNVIS_VALID) {
		if (dst < end)
			*dst = p;
		dst++;
	}
	if (dst <= end)
		*dst = '\0';
	return (dst - start);
}

@


1.16
log
@Add VIS_DQ to escape double quotes.  OK deraadt@@ semarie@@ reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unvis.c,v 1.15 2011/03/13 22:21:32 guenther Exp $ */
d207 1
@


1.15
log
@Fix handling of VIS_ALL: in vis(), actually encode all characters
as requested and give a correct estimate when they don't all fit,
and in unvis() decode them instead of erroring

ok nicm@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unvis.c,v 1.14 2010/08/24 23:49:06 djm Exp $ */
d81 1
@


1.14
log
@backout VIS_HEX. guenther@@ points out that the C89 \xff encoding
idiotically accepts more then two hex digits following the \x, even
on platforms where a char has 8 bits. It is therefore dangerous to have
an almost-bit-not-quite compatible format in vis(3).

The VIS_ALL (encode all characters) option introduced in the same commit
remains.
@
text
@d1 1
a1 1
/*	$OpenBSD: unvis.c,v 1.13 2010/08/21 18:59:15 djm Exp $ */
d76 4
@


1.13
log
@Two new flags: VIS_ALL - encode all characters, not just invisible ones
and VIS_HEX - use C89 \xff style hexadecimal encoding.

Teach unvis(3) how to deal with the hex encoding.

feedback and ok millert@@ chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unvis.c,v 1.12 2005/08/08 08:05:34 espie Exp $ */
a44 2
#define	S_HEX1		7	/* hex digit 1 */
#define	S_HEX2		8	/* hex digit 2 */
a46 15
#define	ishex(c)	((((u_char)(c)) >= '0' && ((u_char)(c)) <= '9') || \
			 (((u_char)(c)) >= 'a' && ((u_char)(c)) <= 'f') || \
			 (((u_char)(c)) >= 'A' && ((u_char)(c)) <= 'F'))

static u_int
dehex(u_int c)
{
	if (c >= '0' && c <= '9')
		return c - '0';
	if (c >= 'a' && c <= 'f')
		return 10 + c - 'a';
	if (c >= 'A' && c <= 'F')
		return 10 + c - 'A';
	return 0;
}
d56 1
a56 2
		if (*astate == S_OCTAL2 || *astate == S_OCTAL3 ||
		    *astate == S_HEX1 || *astate == S_HEX2) {
a79 3
		case 'x':
			*astate = S_HEX1;
			return (0);
a186 26
			return (UNVIS_VALID);
		}
		/*
		 * we were done, push back passed char
		 */
		return (UNVIS_VALIDPUSH);

	case S_HEX1:	/* first possible hex digit */
		if (ishex(c)) {
			/* 
			 * yes - and maybe a second
			 */
			*cp = dehex(c);
			*astate = S_HEX2;	
			return (0);
		} 
		/* 
		 * no - done with current sequence, push back passed char 
		 */
		*astate = S_GROUND;
		return (UNVIS_VALIDPUSH);

	case S_HEX2:	/* second possible hex digit */
		*astate = S_GROUND;
		if (ishex(c)) {
			*cp = ((u_int)*cp << 4) + dehex(c);
@


1.12
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d45 2
d49 15
d73 2
a74 1
		if (*astate == S_OCTAL2 || *astate == S_OCTAL3) {
d98 3
d214 27
a240 1
			
@


1.11
log
@deregister (and deauto!). ok millert@@ marco@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: unvis.c,v 1.10 2004/10/17 20:25:31 otto Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.10
log
@implement strnunvis(3), a bounded version of strunvis(3). ok millert@@
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: unvis.c,v 1.9 2004/05/18 02:05:52 jfb Exp $";
d216 1
a216 1
	register char c;
@


1.9
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: unvis.c,v 1.8 2003/06/02 20:18:35 millert Exp $";
d233 1
d242 42
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: unvis.c,v 1.7 2002/02/19 19:39:36 millert Exp $";
d214 1
a214 3
strunvis(dst, src)
	register char *dst;
	register const char *src;
@


1.7
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char rcsid[] = "$OpenBSD: unvis.c,v 1.6 1997/07/25 20:30:05 mickey Exp $";
@


1.6
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: unvis.c,v 1.5 1997/07/09 00:28:26 millert Exp $";
a58 1
#ifdef __STDC__
a59 6
#else
unvis(cp, c, astate, flag)
	char *cp;
	char c;
	int *astate, flag;
#endif
@


1.5
log
@Clean up some -Wall complaints.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: unvis.c,v 1.4 1996/09/15 09:31:10 tholo Exp $";
d59 1
a59 1
#if __STDC__
@


1.4
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: unvis.c,v 1.3 1996/08/19 08:27:16 tholo Exp $";
d233 1
a233 1
	while (c = *src++) {
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: unvis.c,v 1.5 1995/02/25 17:18:31 cgd Exp $";
d100 1
a100 1
			*cp = 0200;
@


1.2
log
@Prototype internal functions
Do the right thing in presense of __STDC__
@
text
@a0 2
/*	$NetBSD: unvis.c,v 1.5 1995/02/25 17:18:31 cgd Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)unvis.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$NetBSD: unvis.c,v 1.5 1995/02/25 17:18:31 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d65 3
d72 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
