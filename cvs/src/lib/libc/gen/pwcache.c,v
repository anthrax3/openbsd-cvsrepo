head	1.13;
access;
symbols
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.9.0.44
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.36
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.40
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.38
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.34
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.32
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.30
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.28
	OPENBSD_5_0:1.9.0.26
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.24
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.22
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.18
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.20
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.8
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.14
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.11.25.23.16.01;	author jcs;	state Exp;
branches;
next	1.12;
commitid	RH6bYOXuiMOLXvuj;

1.12
date	2015.11.24.22.03.33;	author millert;	state Exp;
branches;
next	1.11;
commitid	LVVvCb2EklWn8nFM;

1.11
date	2015.11.17.17.49.09;	author tedu;	state Exp;
branches;
next	1.10;
commitid	zghJrUAQlbhSGWsN;

1.10
date	2015.10.26.15.04.51;	author tedu;	state Exp;
branches;
next	1.9;
commitid	HTsn8BLAwoTypiiV;

1.9
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.25.15.38.47;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.27.00.58.54;	author lebel;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.31.17.42.25;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.07.09.00.28.23;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.25.29;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.57;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@group_from_gid: use _GR_BUF_LEN instead of _PW_BUF_LEN
@
text
@/*	$OpenBSD: pwcache.c,v 1.12 2015/11/24 22:03:33 millert Exp $ */
/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <grp.h>
#include <pwd.h>
#include <stdio.h>
#include <string.h>

#define	NCACHE	16			/* power of 2 */
#define	NLINES	4			/* associativity */
#define	MASK	(NCACHE - 1)		/* bits to store with */
#define	IDX(x, i)	((x & MASK) + i * NCACHE)

char *
user_from_uid(uid_t uid, int nouser)
{
	static struct ncache {
		uid_t	uid;
		short	noname;
		char	name[_PW_NAME_LEN + 1];
	} c_uid[NLINES * NCACHE];
	char pwbuf[_PW_BUF_LEN];
	struct passwd pwstore, *pw;
	struct ncache *cp;
	unsigned int i;

	for (i = 0; i < NLINES; i++) {
		cp = &c_uid[IDX(uid, i)];
		if (!*cp->name) {
fillit:
			cp->uid = uid;
			pw = NULL;
			getpwuid_r(uid, &pwstore, pwbuf, sizeof(pwbuf), &pw);
			if (pw == NULL) {
				snprintf(cp->name, sizeof(cp->name), "%u", uid);
				cp->noname = 1;
			} else {
				strlcpy(cp->name, pw->pw_name, sizeof(cp->name));
			}
		}
		if (cp->uid == uid) {
			if (nouser && cp->noname)
				return NULL;
			return cp->name;
		}
	}
	/* move everybody down a slot */
	for (i = 0; i < NLINES - 1; i++) {
		struct ncache *next;

		cp = &c_uid[IDX(uid, i)];
		next = &c_uid[IDX(uid, i + 1)];
		memcpy(next, cp, sizeof(*cp));
	}
	cp = &c_uid[IDX(uid, 0)];
	goto fillit;
}

char *
group_from_gid(gid_t gid, int nogroup)
{
	static struct ncache {
		gid_t	gid;
		short 	noname;
		char	name[_PW_NAME_LEN + 1];
	} c_gid[NLINES * NCACHE];
	char grbuf[_GR_BUF_LEN];
	struct group grstore, *gr;
	struct ncache *cp;
	unsigned int i;

	for (i = 0; i < NLINES; i++) {
		cp = &c_gid[IDX(gid, i)];
		if (!*cp->name) {
fillit:
			cp->gid = gid;
			gr = NULL;
			getgrgid_r(gid, &grstore, grbuf, sizeof(grbuf), &gr);
			if (gr == NULL) {
				snprintf(cp->name, sizeof(cp->name), "%u", gid);
				cp->noname = 1;
			} else {
				strlcpy(cp->name, gr->gr_name, sizeof(cp->name));
			}
		}
		if (cp->gid == gid) {
			if (nogroup && cp->noname)
				return NULL;
			return cp->name;
		}
	}
	/* move everybody down a slot */
	for (i = 0; i < NLINES - 1; i++) {
		struct ncache *next;

		cp = &c_gid[IDX(gid, i)];
		next = &c_gid[IDX(gid, i + 1)];
		memcpy(next, cp, sizeof(*cp));
	}
	cp = &c_gid[IDX(gid, 0)];
	goto fillit;
}
@


1.12
log
@Use reentrant versions of getpw{nam,uid} and getgr{nam,gid} within
libc to avoid reusing the static buffers returned by the non-reentrant
versions.  Since this is inside libc we can use constants for the
buffer sizes instead of having to call sysconf().
OK guenther@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pwcache.c,v 1.11 2015/11/17 17:49:09 tedu Exp $ */
d96 1
a96 1
	char grbuf[_PW_BUF_LEN];
@


1.11
log
@change passwd caches to be 4-way "associative". still primitive, but a
little better than winner take all caching.
@
text
@d1 1
a1 1
/*	$OpenBSD: pwcache.c,v 1.10 2015/10/26 15:04:51 tedu Exp $ */
d51 2
a52 2
	static char nbuf[15];		/* 32 bits == 10 digits */
	struct passwd *pw;
d61 3
a63 1
			if ((pw = getpwuid(uid)) == NULL) {
d96 2
a97 2
	static char nbuf[15];		/* 32 bits == 10 digits */
	struct group *gr;
d106 3
a108 1
			if ((gr = getgrgid(gid)) == NULL) {
@


1.10
log
@don't keep the passwd database open; callers do not expect that they will
become responsible for calling endpwent.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: pwcache.c,v 1.9 2005/08/08 08:05:34 espie Exp $ */
d38 2
a39 1
#define	NCACHE	64			/* power of 2 */
d41 1
d48 1
d50 1
a50 1
	} c_uid[NCACHE];
d54 1
d56 11
a66 7
	cp = c_uid + (uid & MASK);
	if (cp->uid != uid || !*cp->name) {
		if ((pw = getpwuid(uid)) == NULL) {
			if (nouser)
				return (NULL);
			(void)snprintf(nbuf, sizeof(nbuf), "%u", uid);
			return (nbuf);
d68 13
a80 2
		cp->uid = uid;
		strlcpy(cp->name, pw->pw_name, sizeof(cp->name));
d82 2
a83 1
	return (cp->name);
d91 1
d93 1
a93 1
	} c_gid[NCACHE];
d97 1
d99 11
a109 7
	cp = c_gid + (gid & MASK);
	if (cp->gid != gid || !*cp->name) {
		if ((gr = getgrgid(gid)) == NULL) {
			if (nogroup)
				return (NULL);
			(void)snprintf(nbuf, sizeof(nbuf), "%u", gid);
			return (nbuf);
d111 13
a123 2
		cp->gid = gid;
		strlcpy(cp->name, gr->gr_name, sizeof(cp->name));
d125 2
a126 1
	return (cp->name);
@


1.9
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a47 1
	static int pwopen;
a53 4
		if (pwopen == 0) {
			setpassent(1);
			pwopen = 1;
		}
a72 1
	static int gropen;
a78 4
		if (gropen == 0) {
			setgroupent(1);
			gropen = 1;
		}
@


1.8
log
@deregister (and deauto!). ok millert@@ marco@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: pwcache.c,v 1.7 2004/05/18 02:05:52 jfb Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.7
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: pwcache.c,v 1.6 2003/06/02 20:18:34 millert Exp $";
d53 2
a54 2
	register struct passwd *pw;
	register struct ncache *cp;
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: pwcache.c,v 1.5 2001/06/27 00:58:54 lebel Exp $";
d45 1
a45 3
user_from_uid(uid, nouser)
	uid_t uid;
	int nouser;
d75 1
a75 3
group_from_gid(gid, nogroup)
	gid_t gid;
	int nogroup;
@


1.5
log
@use strlcpy vs strncpy+a[len-1]='\0'.  millert@@ ok.
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char rcsid[] = "$OpenBSD: pwcache.c,v 1.4 2001/01/31 17:42:25 deraadt Exp $";
@


1.4
log
@move utmp to large format, usernames to 32 chars; downsj
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: pwcache.c,v 1.3 1997/07/09 00:28:23 millert Exp $";
d75 1
a75 2
		(void)strncpy(cp->name, pw->pw_name, _PW_NAME_LEN);
		cp->name[_PW_NAME_LEN] = '\0';
d107 1
a107 2
		(void)strncpy(cp->name, gr->gr_name, _PW_NAME_LEN);
		cp->name[_PW_NAME_LEN] = '\0';
@


1.3
log
@Clean up some -Wall complaints.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: pwcache.c,v 1.2 1996/08/19 08:25:29 tholo Exp $";
a43 1
#include <utmp.h>
d55 1
a55 1
		char	name[UT_NAMESIZE + 1];
d75 2
a76 2
		(void)strncpy(cp->name, pw->pw_name, UT_NAMESIZE);
		cp->name[UT_NAMESIZE] = '\0';
d88 1
a88 1
		char	name[UT_NAMESIZE + 1];
d108 2
a109 2
		(void)strncpy(cp->name, gr->gr_name, UT_NAMESIZE);
		cp->name[UT_NAMESIZE] = '\0';
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: pwcache.c,v 1.5 1995/05/13 06:58:23 jtc Exp $";
d47 1
a47 1
#define	MASK	NCACHE - 1		/* bits to store with */
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: pwcache.c,v 1.5 1995/05/13 06:58:23 jtc Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)pwcache.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$NetBSD: pwcache.c,v 1.5 1995/05/13 06:58:23 jtc Exp $";
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
