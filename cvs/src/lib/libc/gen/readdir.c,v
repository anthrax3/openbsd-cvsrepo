head	1.22;
access;
symbols
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.8
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.8
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.17.0.6
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.4
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.2
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.2
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.8
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2015.09.12.13.34.22;	author guenther;	state Exp;
branches;
next	1.21;
commitid	TusJDQRjqkLPFiPJ;

1.21
date	2014.03.10.07.54.14;	author schwarze;	state Exp;
branches;
next	1.20;

1.20
date	2013.11.06.22.26.14;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2013.10.06.17.57.54;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2013.08.13.05.52.12;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2012.03.22.04.11.53;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	2012.02.04.23.02.40;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.18.07.43.22;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2008.05.01.19.49.18;	author otto;	state Exp;
branches;
next	1.13;

1.13
date	2008.04.04.21.26.07;	author okan;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.05.18.11.48;	author kurt;	state Exp;
branches
	1.12.2.1
	1.12.4.1;
next	1.11;

1.11
date	2007.02.08.16.34.39;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.16.03.01.25;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.25.15.38.47;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.17.20.20.36;	author rees;	state Exp;
branches;
next	1.4;

1.4
date	99.09.01.23.19.41;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.11.20.11.18.39;	author d;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.25.35;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.57;	author deraadt;	state Exp;
branches;
next	;

1.12.2.1
date	2008.05.09.13.03.20;	author henning;	state Exp;
branches;
next	;

1.12.4.1
date	2008.05.09.13.02.48;	author henning;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Wrap <dirent.h> so that internal calls go direct and they're all weak symbols
@
text
@/*	$OpenBSD: readdir.c,v 1.21 2014/03/10 07:54:14 schwarze Exp $ */
/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <dirent.h>
#include <errno.h>
#include "telldir.h"
#include "thread_private.h"

/*
 * get next entry in a directory.
 */
int
_readdir_unlocked(DIR *dirp, struct dirent **result)
{
	struct dirent *dp;

	*result = NULL;
	for (;;) {
		if (dirp->dd_loc >= dirp->dd_size) {
			dirp->dd_loc = 0;
			dirp->dd_size = getdents(dirp->dd_fd, dirp->dd_buf,
			    dirp->dd_len);
			if (dirp->dd_size == 0)
				return (0);
			if (dirp->dd_size < 0)
				return (-1);
		}
		dp = (struct dirent *)(dirp->dd_buf + dirp->dd_loc);
		if ((long)dp & 03 ||	/* bogus pointer check */
		    dp->d_reclen <= 0 ||
		    dp->d_reclen > dirp->dd_len + 1 - dirp->dd_loc) {
			errno = EINVAL;
			return (-1);
		}
		dirp->dd_loc += dp->d_reclen;
		if (dp->d_ino == 0)
			continue;
		dirp->dd_curpos = dp->d_off;
		*result = dp;
		return (0);
	}
}

struct dirent *
readdir(DIR *dirp)
{
	struct dirent *dp;

	_MUTEX_LOCK(&dirp->dd_lock);
	_readdir_unlocked(dirp, &dp);
	_MUTEX_UNLOCK(&dirp->dd_lock);

	return (dp);
}
DEF_WEAK(readdir);
@


1.21
log
@Optimization, no functional change:
Save a cookie pointing to the very first entry in the DIR.dd_buf
cache buffer and use that to speed up seekdir(3) when rewinding
to that first entry.
No libc bump because DIR is an opaque struct.

When the optimization applies, which in particular it always does
for rewinddir(3) after reading less than about 500 entries,
seekdir(3) execution time drops from 100 to 0.05 milliseconds
on my i386 notebook.  Other cases are not slowed down.

Based on an idea from and ok by guenther@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.20 2013/11/06 22:26:14 schwarze Exp $ */
d82 1
@


1.20
log
@Nowadays, seekdir(3) doesn't call _readdir_unlocked().
Consequently, the "skipdeleted" argument is always == 1.
Remove it, effectively reverting readdir.c rev. 1.14.
ok millert@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.19 2013/10/06 17:57:54 guenther Exp $ */
d46 1
a46 1
		if (dirp->dd_loc >= dirp->dd_size)
a47 1
		if (dirp->dd_loc == 0) {
@


1.19
log
@Remove an unnecessary (void *) cast
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.18 2013/08/13 05:52:12 guenther Exp $ */
d40 1
a40 1
_readdir_unlocked(DIR *dirp, struct dirent **result, int skipdeleted)
d64 1
a64 8

		/*
		 * When called from seekdir(), we let it decide on
		 * the end condition to avoid overshooting: the next
		 * readdir call should produce the next non-deleted entry,
		 * and we already advanced dd_loc.
		 */
		if (dp->d_ino == 0 && skipdeleted)
d78 1
a78 1
	_readdir_unlocked(dirp, &dp, 1);
@


1.18
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.17 2012/03/22 04:11:53 matthew Exp $ */
d49 2
a50 2
			dirp->dd_size = getdents(dirp->dd_fd,
			    (void *)dirp->dd_buf, dirp->dd_len);
@


1.17
log
@Make DIR a private type within libc, give it the same underlying
typedef regardless of __BSD_VISIBLE, and eliminate the dirfd() macro.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.16 2012/02/04 23:02:40 guenther Exp $ */
d49 2
a50 2
			dirp->dd_size = getdirentries(dirp->dd_fd,
			    dirp->dd_buf, dirp->dd_len, &dirp->dd_seek);
d73 1
@


1.16
log
@If the internal consistency check fails, set errno so that it doesn't
just look like end-of-directory.

ok krw@@ otto@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.15 2009/11/18 07:43:22 guenther Exp $ */
d33 1
@


1.15
log
@More shrinkage, a bit for ramdisks but mostly for static binaries:
- wrap with #ifndef NO_LOG_BAD_DNS_RESPONSES libc code that uses
  p_class() and p_type() for diagnostics, then add that define to
  libstub to avoid pulling in res_debug_syms.o
- split rcmd() and ruserok() into separate files, as nothing uses both
- split readdir_r() to its own file
- split syslog_r() from syslog(), as the latter needs localtime(); many
  binaries no longer need to pull in all the time code after this; switch
  from usleep() to nanosleep() while we're at it

(The profit of analysis of -Wl,-M,--cref output)

Chops 888kB from /bin and /sbin on i386

ok deraadt@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.14 2008/05/01 19:49:18 otto Exp $ */
d32 1
d56 4
a59 4
		if ((long)dp & 03)	/* bogus pointer check */
			return (-1);
		if (dp->d_reclen <= 0 ||
		    dp->d_reclen > dirp->dd_len + 1 - dirp->dd_loc)
d61 1
d63 1
@


1.14
log
@Be carefull not to read away the target entry when encountering
deleted files after a seekdir(); testcase produced by mbalmer@@; fix
with and ok mbalmer; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.13 2008/04/04 21:26:07 okan Exp $ */
a30 1
#include <sys/param.h>
a31 2
#include <string.h>
#include <errno.h>
a83 21
}

int
readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result)
{
	struct dirent *dp;

	_MUTEX_LOCK(&dirp->dd_lock);
	if (_readdir_unlocked(dirp, &dp, 1) != 0) {
		_MUTEX_UNLOCK(&dirp->dd_lock);
		return errno;
	}
	if (dp != NULL)
		memcpy(entry, dp,
		    sizeof (struct dirent) - MAXNAMLEN + dp->d_namlen);
	_MUTEX_UNLOCK(&dirp->dd_lock);
	if (dp != NULL)
		*result = entry;
	else
		*result = NULL;
	return 0;
@


1.13
log
@alter internal _readdir_unlocked() api to be less confusing, so that
callers may respond accordingly and correctly.

this fixes an issue where readdir_r() could not decipher the difference
between an error or no more entires.

feedback and ok kurt@@, ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.12 2007/06/05 18:11:48 kurt Exp $ */
d41 1
a41 1
_readdir_unlocked(DIR *dirp, struct dirent **result)
d64 7
a70 1
		if (dp->d_ino == 0)
d83 1
a83 1
	_readdir_unlocked(dirp, &dp);
d95 1
a95 1
	if (_readdir_unlocked(dirp, &dp) != 0) {
@


1.12
log
@_FD_LOCK/UNLOCK() is libpthread specific and not needed for librthread, so
isolate its usage to libpthread only and replace with generic non-static
mutex support in the one place it is needed:
 - remove _FD_LOCK/UNLOCK from lseek and ftruncate in libc and make the
   functions weak so that libpthread can override with its own new
   versions that do the locking.
 - remove _thread_fd_lock/unlock() weak functions from libc and adjust
   libpthread for the change.
 - add generic _thread_mutex_lock/unlock/destroy() weak functions in libc
   to support non-static mutexes in libc and add libpthread and librthread
   implementations for them. libc can utilize non-static mutexes via the
   new _MUTEX_LOCK/UNLOCK/DESTROY() macros. Actually these new macros can
   support both static and non-static mutexes but currently only using
   them for non-static.
 - make opendir/closedir/readdir/readdir_r/seekdir/telldir() thread-safe
   for both thread libraries by using a non-static mutex in the struct
   _dirdesc (typedef DIR), utilizing it in the *dir functions and remove
   remaining and incorrect _FD_LOCK/UNLOCK() use in libc.
 - add comments to both thread libraries to indicate libc depends on the
   current implementation of static mutex initialization. suggested by
   marc@@
 - major bump libc and libpthread due to function removal, structure
   change and weak symbol conversions.
okay marc@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.11 2007/02/08 16:34:39 millert Exp $ */
d40 2
a41 2
struct dirent *
_readdir_unlocked(DIR *dirp)
d45 1
d47 1
a47 1
		if (dirp->dd_loc >= dirp->dd_size) {
a48 1
		}
d52 4
a55 2
			if (dirp->dd_size <= 0)
				return (NULL);
d59 1
a59 1
			return (NULL);
d62 1
a62 1
			return (NULL);
d66 2
a67 1
		return (dp);
d77 1
a77 1
	dp = _readdir_unlocked(dirp);
d89 1
a89 2
	dp = _readdir_unlocked(dirp);
	if (dp == NULL && errno != 0) {
d93 3
a95 2
	if (dp != NULL) 
		memcpy(entry, dp, sizeof (struct dirent) - MAXNAMLEN + dp->d_namlen);
@


1.12.2.1
log
@MFC (otto)
Be carefull not to read away the target entry when encountering
deleted files after a seekdir(); testcase produced by mbalmer@@; fix
with and ok mbalmer; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.14 2008/05/01 19:49:18 otto Exp $ */
d40 2
a41 2
int
_readdir_unlocked(DIR *dirp, struct dirent **result, int skipdeleted)
a44 1
	*result = NULL;
d46 1
a46 1
		if (dirp->dd_loc >= dirp->dd_size)
d48 1
d52 2
a53 4
			if (dirp->dd_size == 0)
				return (0);
			if (dirp->dd_size < 0)
				return (-1);
d57 1
a57 1
			return (-1);
d60 1
a60 1
			return (-1);
d62 1
a62 7
		/*
		 * When called from seekdir(), we let it decide on
		 * the end condition to avoid overshooting: the next
		 * readdir call should produce the next non-deleted entry,
		 * and we already advanced dd_loc.
		 */
		if (dp->d_ino == 0 && skipdeleted)
d64 1
a64 2
		*result = dp;
		return (0);
d74 1
a74 1
	_readdir_unlocked(dirp, &dp, 1);
d86 2
a87 1
	if (_readdir_unlocked(dirp, &dp, 1) != 0) {
d91 2
a92 3
	if (dp != NULL)
		memcpy(entry, dp,
		    sizeof (struct dirent) - MAXNAMLEN + dp->d_namlen);
@


1.12.4.1
log
@MFC (otto)
Be carefull not to read away the target entry when encountering
deleted files after a seekdir(); testcase produced by mbalmer@@; fix
with and ok mbalmer; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.14 2008/05/01 19:49:18 otto Exp $ */
d40 2
a41 2
int
_readdir_unlocked(DIR *dirp, struct dirent **result, int skipdeleted)
a44 1
	*result = NULL;
d46 1
a46 1
		if (dirp->dd_loc >= dirp->dd_size)
d48 1
d52 2
a53 4
			if (dirp->dd_size == 0)
				return (0);
			if (dirp->dd_size < 0)
				return (-1);
d57 1
a57 1
			return (-1);
d60 1
a60 1
			return (-1);
d62 1
a62 7
		/*
		 * When called from seekdir(), we let it decide on
		 * the end condition to avoid overshooting: the next
		 * readdir call should produce the next non-deleted entry,
		 * and we already advanced dd_loc.
		 */
		if (dp->d_ino == 0 && skipdeleted)
d64 1
a64 2
		*result = dp;
		return (0);
d74 1
a74 1
	_readdir_unlocked(dirp, &dp, 1);
d86 2
a87 1
	if (_readdir_unlocked(dirp, &dp, 1) != 0) {
d91 2
a92 3
	if (dp != NULL)
		memcpy(entry, dp,
		    sizeof (struct dirent) - MAXNAMLEN + dp->d_namlen);
@


1.11
log
@g/c __DTF_READALL.  It was a flag to the internal __opendir2() but
is never set now that the unionfs support has been removed from
readdir().  OK pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readdir.c,v 1.10 2005/08/08 08:05:34 espie Exp $ */
d41 1
a41 1
readdir(DIR *dirp)
d68 12
a83 1
	int ret;
d85 2
a86 7
	if (dirp->dd_fd < 0) {
		return EBADF;
	}
	if ((ret = _FD_LOCK(dirp->dd_fd, FD_READ, NULL)) != 0)
		return ret;
	errno = 0;
	dp = readdir(dirp);
d88 1
a88 1
		_FD_UNLOCK(dirp->dd_fd, FD_READ);
d93 1
a93 1
	_FD_UNLOCK(dirp->dd_fd, FD_READ);
d95 1
a95 1
	*result = entry;
@


1.10
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a46 2
			if (dirp->dd_flags & __DTF_READALL)
				return (NULL);
d49 1
a49 1
		if (dirp->dd_loc == 0 && !(dirp->dd_flags & __DTF_READALL)) {
@


1.9
log
@bye bye whiteouts
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: readdir.c,v 1.8 2005/03/25 15:38:47 otto Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.8
log
@deregister (and deauto!). ok millert@@ marco@@
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: readdir.c,v 1.7 2004/05/18 02:05:52 jfb Exp $";
a67 2
			continue;
		if (dp->d_type == DT_WHT && (dirp->dd_flags & DTF_HIDEW))
@


1.7
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: readdir.c,v 1.6 2003/06/02 20:18:34 millert Exp $";
d46 1
a46 1
	register struct dirent *dp;
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: readdir.c,v 1.5 2001/05/17 20:20:36 rees Exp $";
d44 1
a44 2
readdir(dirp)
	register DIR *dirp;
d76 1
a76 4
readdir_r(dirp, entry, result)
	DIR *dirp;
	struct dirent *entry;
	struct dirent **result;
@


1.5
log
@don't copy past end of record in readdir_r (ok by art)
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char rcsid[] = "$OpenBSD: readdir.c,v 1.4 1999/09/01 23:19:41 deraadt Exp $";
@


1.4
log
@string.h for memcpy proto
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: readdir.c,v 1.3 1998/11/20 11:18:39 d Exp $";
d101 1
a101 1
		memcpy(entry, dp, sizeof *entry);
@


1.3
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: readdir.c,v 1.2 1996/08/19 08:25:35 tholo Exp $";
d40 1
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: readdir.c,v 1.5 1995/02/25 08:51:35 cgd Exp $";
d40 2
d77 30
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: readdir.c,v 1.5 1995/02/25 08:51:35 cgd Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)readdir.c	8.3 (Berkeley) 9/29/94";
#else
static char rcsid[] = "$NetBSD: readdir.c,v 1.5 1995/02/25 08:51:35 cgd Exp $";
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
