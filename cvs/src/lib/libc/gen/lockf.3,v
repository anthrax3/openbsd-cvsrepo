head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.16
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.18
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.14
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.10
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.12
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.8
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.20
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.18
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.16
	OPENBSD_5_0:1.12.0.14
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.12
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.10
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.22
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.20
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.18
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.16
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.14
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.12
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.10
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.8
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2;
locks; strict;
comment	@# @;


1.13
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.26.05.42.05;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.31.19.19.28;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.22.03.16.58;	author jaredy;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.18.03.01.27;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.06.05.03.44.54;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.03.10.03.22;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.29.21.24.18;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.05.29.20.07.13;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.05.27.20.49.33;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.05.23.14.11.00;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	97.12.29.22.59.36;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	97.12.22.10.13.56;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@.\"	$OpenBSD: lockf.3,v 1.12 2008/06/26 05:42:05 ray Exp $
.\"	$NetBSD: lockf.3,v 1.1 1997/12/20 20:23:17 kleink Exp $
.\"
.\" Copyright (c) 1997 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Klaus Klein and S.P. Zeidler.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 26 2008 $
.Dt LOCKF 3
.Os
.Sh NAME
.Nm lockf
.Nd record locking on files
.Sh SYNOPSIS
.In unistd.h
.Ft int
.Fn lockf "int filedes" "int function" "off_t size"
.Sh DESCRIPTION
The
.Fn lockf
function allows sections of a file to be locked with advisory-mode locks.
Calls to
.Fn lockf
from other processes which attempt to lock the locked file section will
either return an error value or block until the section becomes unlocked.
All the locks for a process are removed when the process terminates.
.Pp
The argument
.Fa filedes
is an open file descriptor.
The file descriptor must have been opened either for write-only
.Pq Dv O_WRONLY
or read/write
.Pq Dv O_RDWR
operation.
.Pp
The
.Fa function
argument is a control value which specifies the action to be taken.
The permissible values for
.Fa function
are as follows:
.Pp
.Bl -tag -width F_ULOCKXX -compact -offset indent
.It Sy Function
.Sy Description
.It Dv F_ULOCK
Unlock locked sections.
.It Dv F_LOCK
Lock a section for exclusive use.
.It Dv F_TLOCK
Test and lock a section for exclusive use.
.It Dv F_TEST
Test a section for locks by other processes.
.El
.Pp
The
.Dv F_ULOCK
function removes locks from a section of the file;
.Dv F_LOCK
and
.Dv F_TLOCK
both lock a section of a file if the section is available;
.Dv F_TEST
detects if a lock by another process is present on the specified section.
.Pp
The
.Fa size
argument is the number of contiguous bytes to be locked or unlocked.
The section to be locked or unlocked starts at the current
offset in the file and extends forward for a positive size or backward
for a negative size (the preceding bytes up to but not including the
current offset).
However, it is not permitted to lock a section that
starts or extends before the beginning of the file.
If
.Fa size
is 0, the section from the current offset through the largest possible
file offset is locked (that is, from the current offset through the
present or any future end-of-file).
.Pp
The sections locked with
.Dv F_LOCK
or
.Dv F_TLOCK
may, in whole or in part, contain or be contained by a previously
locked section for the same process.
When this occurs, or if adjacent
locked sections would occur, the sections are combined into a single
locked section.
If the request would cause the number of locks to
exceed a system-imposed limit, the request will fail.
.Pp
The
.Dv F_LOCK
and
.Dv F_TLOCK
requests differ only by the action taken if the section is not
available.
.Dv F_LOCK
blocks the calling process until the section is available.
.Dv F_TLOCK
makes the function fail if the section is already locked by another
process.
.Pp
File locks are released on first close by the locking process of any
file descriptor for the file.
.Pp
.Dv F_ULOCK
requests release (wholly or in part) of one or more locked sections
controlled by the process.
Locked sections will be unlocked starting
at the current file offset through
.Fa size
bytes or to the end of the file if
.Fa size
is 0.
When all of a locked section
is not released (that is, when the beginning or end of the area to be
unlocked falls within a locked section), the remaining portions of
that section are still locked by the process.
Releasing the center
portion of a locked section will cause the remaining locked beginning
and end portions to become two separate locked sections.
If the
request would cause the number of locks in the system to exceed a
system-imposed limit, the request will fail.
.Pp
An
.Dv F_ULOCK
request in which
.Fa size
is non-zero and the offset of the last byte of
the requested section is the maximum value for an object of type
.Li off_t ,
when the process has an existing lock in which size is 0 and
which includes the last byte of the requested section, will be treated
as a request to unlock from the start of the requested section with a
size equal to 0.
Otherwise an
.Dv F_ULOCK
request will attempt to unlock only the requested section.
.Pp
A potential for deadlock occurs if a process controlling a locked
region is put to sleep by attempting to lock the locked region of
another process.
This implementation detects that sleeping until a
locked region is unlocked would cause a deadlock and fails with an
.Er EDEADLK
error.
.Pp
.Fn lockf ,
.Xr fcntl 2 ,
and
.Xr flock 2
locks may be safely used concurrently.
.Pp
Blocking on a section is interrupted by any signal.
.Sh RETURN VALUES
If successful, the
.Fn lockf
function returns 0.
Otherwise, it returns \-1, sets the global variable
.Va errno
to indicate an error, and existing locks are not changed.
.Sh ERRORS
.Fn lockf
will fail if:
.Bl -tag -width Er
.It Bq Er EAGAIN
The argument
.Fa function
is
.Dv F_TLOCK
or
.Dv F_TEST
and the section is already locked by another process.
.It Bq Er EBADF
The argument
.Fa filedes
is not a valid open file descriptor.
.Pp
The argument
.Fa function
is
.Dv F_LOCK
or
.Dv F_TLOCK ,
and
.Fa filedes
is not a valid file descriptor open for writing.
.It Bq Er EDEADLK
The argument
.Fa function
is
.Dv F_LOCK
and a deadlock is detected.
.It Bq Er EINTR
The argument
.Fa function
is F_LOCK
and
.Fn lockf
was interrupted by the delivery of a signal.
.It Bq Er EINVAL
The argument
.Fa function
is not one of
.Dv F_ULOCK ,
.Dv F_LOCK ,
.Dv F_TLOCK ,
or
.Dv F_TEST .
.Pp
The argument
.Fa filedes
refers to a file that does not support locking.
.It Bq Er ENOLCK
The argument
.Fa function
is
.Dv F_ULOCK ,
.Dv F_LOCK ,
or
.Dv F_TLOCK ,
and satisfying the lock or unlock request would result in the number
of locked regions in the system exceeding a system-imposed limit.
.El
.Sh SEE ALSO
.Xr fcntl 2 ,
.Xr flock 2
.Sh STANDARDS
The
.Fn lockf
function conforms to
.St -xpg4.2 .
@


1.12
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: lockf.3,v 1.11 2007/05/31 19:19:28 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
d38 1
a38 1
.Fd #include <unistd.h>
@


1.11
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: lockf.3,v 1.10 2005/07/22 03:16:58 jaredy Exp $
a17 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d31 1
a31 1
.Dd $Mdocdate$
@


1.10
log
@- sync prototypes and header file excerpts to reality
- many grammar, punctuation, macro, layout, spelling/typos,
  rewording, etc. fixes
- avoid first person
- sprinkle crossrefs where relevant

help & ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: lockf.3,v 1.9 2000/04/18 03:01:27 aaron Exp $
d38 1
a38 1
.Dd December 19, 1997
@


1.9
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: lockf.3,v 1.8 1999/06/05 03:44:54 aaron Exp $
d145 3
a147 1
bytes or to the end of the file if size is 0.
d161 3
a163 1
request in which size is non-zero and the offset of the last byte of
d183 1
a183 1
.Xr fcntl 2
d241 1
a241 1
.Dv F_TLOCK
d253 1
a253 1
.Dv F_LOCK
@


1.8
log
@change some .Em/.Va to .Li, looks nicer
@
text
@d1 1
a1 1
.\"	$OpenBSD: lockf.3,v 1.7 1999/06/03 10:03:22 aaron Exp $
d99 2
a100 2
argument is the number of contiguous bytes to be locked or
unlocked. The section to be locked or unlocked starts at the current
d103 2
a104 1
current offset). However, it is not permitted to lock a section that
d117 2
a118 1
locked section for the same process. When this occurs, or if adjacent
d120 2
a121 1
locked section. If the request would cause the number of locks to
d141 2
a142 1
controlled by the process. Locked sections will be unlocked starting
d145 2
a146 1
bytes or to the end of the file if size is 0. When all of a locked section
d149 2
a150 1
that section are still locked by the process. Releasing the center
d152 2
a153 1
and end portions to become two separate locked sections. If the
d165 2
a166 1
size equal to 0. Otherwise an
d172 2
a173 1
another process.  This implementation detects that sleeping until a
@


1.7
log
@use \-1, not -1, to change the meaning of `-' to minus sign from hyphen;
pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: lockf.3,v 1.6 1999/05/29 21:24:18 aaron Exp $
d154 1
a154 1
.Em off_t ,
@


1.6
log
@repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d180 1
a180 1
Otherwise, it returns -1, sets the global variable
@


1.5
log
@repairs
@
text
@d1 2
a2 1
.\" $NetBSD: lockf.3,v 1.1 1997/12/20 20:23:17 kleink Exp $
@


1.4
log
@more missing .El macros filled in
@
text
@d61 1
a61 1
.Dv ( O_WRONLY )
d63 1
a63 1
.Dv ( O_RDWR )
d72 1
d77 1
a77 1
unlock locked sections
d79 1
a79 1
lock a section for exclusive use
d81 1
a81 1
test and lock a section for exclusive use
d83 1
a83 1
test a section for locks by other processes
d86 1
d88 1
a88 1
removes locks from a section of the file;
d120 1
d136 1
a136 1
requests release (wholly or in part) one or more locked sections
d140 1
a140 1
bytes or to the end of file if size is 0. When all of a locked section
d153 2
a154 1
off_t, when the process has an existing lock in which size is 0 and
d179 2
a180 2
Otherwise, it returns -1, sets
.Dv errno
@


1.3
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d240 1
@


1.2
log
@s/NetBSD/OpenBSD
@
text
@d39 1
a39 1
.Os OpenBSD 2.2
@


1.1
log
@add XPG4.2 lockf; kleink
@
text
@d39 1
a39 1
.Os NetBSD 1.4
@
