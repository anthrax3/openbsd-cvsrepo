head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.12
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.8
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.24
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.22
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.20
	OPENBSD_5_0:1.15.0.18
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.16
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.14
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.10
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.6
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.4
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3;
locks; strict;
comment	@.\" @;


1.17
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.16;
commitid	QU70QaxjyBAtj4Rv;

1.16
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.31.19.19.28;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.02.03.44.53;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2005.07.22.03.16.58;	author jaredy;	state Exp;
branches;
next	1.12;

1.12
date	2004.08.09.21.15.09;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.06.18.05.00;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.30.17.21.06;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.06.20.48.35;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.23.00.39.06;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.21.16.24.03;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.15.17.55.30;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.29.21.33.59;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.24.00.30.50;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.18.05.12.07;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.20.19.05.37;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.20.18.37.20;	author millert;	state Exp;
branches;
next	;


desc
@@


1.17
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@.\"
.\" Copyright (c) 1996,1997 Berkeley Software Design, Inc. All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by Berkeley Software Design,
.\"	Inc.
.\" 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
.\"    or promote products derived from this software without specific prior
.\"    written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $OpenBSD: login_cap.3,v 1.16 2013/06/05 03:39:22 tedu Exp $
.\" BSDI $From: login_cap.3,v 1.4 1997/11/07 16:22:27 jch Exp $
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt LOGIN_GETCLASS 3
.Os
.Sh NAME
.Nm login_getclass ,
.Nm login_getstyle ,
.Nm login_getcapbool ,
.Nm login_getcapnum ,
.Nm login_getcapsize ,
.Nm login_getcapstr ,
.Nm login_getcaptime ,
.Nm login_close ,
.Nm secure_path ,
.Nm setclasscontext ,
.Nm setusercontext
.Nd query login.conf database about a user class
.Sh SYNOPSIS
.In sys/types.h
.In login_cap.h
.Ft login_cap_t *
.Fn login_getclass "char *class"
.Ft char *
.Fn login_getstyle "login_cap_t *lc" "char *style" "char *type"
.Ft int
.Fn login_getcapbool "login_cap_t *lc" "char *cap" "unsigned int def"
.Ft quad_t
.Fn login_getcapnum "login_cap_t *lc" "char *cap" "quad_t def" "quad_t err"
.Ft quad_t
.Fn login_getcapsize "login_cap_t *lc" "char *cap" "quad_t def" "quad_t err"
.Ft char *
.Fn login_getcapstr "login_cap_t *lc" "char *cap" "char *def" "char *err"
.Ft quad_t
.Fn login_getcaptime "login_cap_t *lc" "char *cap" "quad_t def" "quad_t err"
.Ft void
.Fn login_close "login_cap_t *lc"
.Ft int
.Fn secure_path "char *path"
.Ft int
.Fn setclasscontext "char *class" "unsigned int flags"
.Ft int
.Fn setusercontext "login_cap_t *lc" "struct passwd *pwd" "uid_t uid" "unsigned int flags"
.Sh DESCRIPTION
The
.Fn login_getclass
function extracts the entry specified by
.Ar class
(or
.Li default
if
.Ar class
is
.Dv NULL
or the empty string) from
.Pa /etc/login.conf
(see
.Xr login.conf 5 ) .
If the entry is found, a
.Li login_cap_t
pointer is returned.
.Dv NULL
is returned if the user class is not found.
When the
.Li login_cap_t
structure is no longer needed, it should be freed by the
.Fn login_close
function.
.Pp
Once
.Ar lc
has been returned by
.Fn login_getclass ,
any of the other
.Fn login_*
functions may be called.
The
.Fn login_getstyle
function is used to obtain the style of authentication that should be used for
this user class.
The
.Ar style
argument may either be
.Dv NULL
or the desired style of authentication.
If
.Dv NULL ,
the first available authentication style will be used.
The
.Ar type
argument refers to the type of authentication being performed.
This is used to override the standard
.Li auth
entry in the database.
By convention this should be of the form "auth-type".
Future releases may remove the requirement for the "auth-" prefix and add
it if it is missing.
If
.Ar type
is
.Dv NULL
then only "auth" will be looked at
(see
.Xr login.conf 5 ) .
The
.Fn login_getstyle
function will return
.Dv NULL
if the desired style of authentication is not available,
or if no style is available.
.Pp
The
.Fn login_getcapnum ,
.Fn login_getcapsize ,
.Fn login_getcapstr ,
and
.Fn login_getcaptime
functions all query the database entry for a field named
.Ar cap .
If the field is found, its value is returned.
If the field is not found, the value specified by
.Ar def
is returned.
If an error is encountered while trying to find the field,
.Ar err
is returned.
See
.Xr login.conf 5
for a discussion of the various textual forms the value may take.
The
.Fn login_getcapbool
function is slightly different.
It returns
.Ar def
if no capabilities were found for this class (typically meaning that
the default class was used and the
.Pa /etc/login.conf
file is missing).
It returns a non-zero value if
.Ar cap ,
with no value, was found,
zero otherwise.
.Pp
The
.Fn secure_path
function takes a path name and returns 0 if the path name is secure, \-1
if not.
To be secure a path must exist, be a regular file (and not a directory),
owned by root, and only writable by the owner (root).
.Pp
The
.Fn setclasscontext
function takes
.Ar class ,
the name of a user class, and sets the resources defined by that
class according to
.Ar flags .
Only the
.Dv LOGIN_SETPATH ,
.Dv LOGIN_SETPRIORITY ,
.Dv LOGIN_SETRESOURCES ,
and
.Dv LOGIN_SETUMASK
bits are used
(see
.Fn setusercontext
below).
It returns 0 on success and \-1 on failure.
.Pp
The
.Fn setusercontext
function sets the resources according to
.Ar flags .
The
.Ar lc
argument, if not
.Dv NULL ,
contains the class information that should be used.
The
.Ar pwd
argument, if not
.Dv NULL ,
provides information about the user.
Both
.Ar lc
and
.Ar pwd
cannot be
.Dv NULL .
The
.Ar uid
argument is used in place of the user ID contained in the
.Ar pwd
structure when calling
.Xr setuid 2 .
The
.Fn setusercontext
function returns 0 on success and -1 on failure.
The various bits available to be or-ed together to make up
.Ar flags
are:
.Bl -tag -width LOGIN_SETRESOURCESXX
.It Dv LOGIN_SETENV
Sets environment variables specified by the setenv keyword.
.It Dv LOGIN_SETGROUP
Set the group ID and call
.Xr initgroups 3 .
Requires the
.Ar pwd
field be specified.
.It Dv LOGIN_SETLOGIN
Sets the login name by
.Xr setlogin 2 .
Requires the
.Ar pwd
field be specified.
.It Dv LOGIN_SETPATH
Sets the
.Ev PATH
environment variable.
.It Dv LOGIN_SETPRIORITY
Sets the priority by
.Xr setpriority 2 .
.It Dv LOGIN_SETRESOURCES
Sets the various system resources by
.Xr setrlimit 2 .
.It Dv LOGIN_SETUMASK
Sets the umask by
.Xr umask 2 .
.It Dv LOGIN_SETUSER
Sets the user ID to
.Ar uid
by
.Xr setuid 2 .
.It Dv LOGIN_SETALL
Sets all of the above.
.El
.Sh SEE ALSO
.Xr setlogin 2 ,
.Xr setpriority 2 ,
.Xr setrlimit 2 ,
.Xr setuid 2 ,
.Xr umask 2 ,
.Xr initgroups 3 ,
.Xr login.conf 5
.Sh HISTORY
The
.Nm
function first appeared in
.Ox 2.8 .
.Sh CAVEATS
The string returned by
.Fn login_getcapstr
is allocated via
.Xr malloc 3
when the specified capability is present and thus it is the responsibility
of the caller to
.Fn free
this space.
However, if the capability was not found or an error occurred and
.Fa def
or
.Fa err
(whichever is relevant) are non-NULL the returned value is simply what
was passed in to
.Fn login_getcapstr .
Therefore it is not possible to blindly
.Fn free
the return value without first checking it against
.Fa def
and
.Fa err .
.Pp
The same warnings set forth in
.Xr setlogin 2
apply to
.Fn setusercontext
when the
.Dv LOGIN_SETLOGIN
flag is used.
Specifically, changing the login name affects all processes in the current
session, not just the current process.
See
.Xr setlogin 2
for more information.
@


1.16
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.15 2007/05/31 19:19:28 jmc Exp $
d35 2
a36 2
.Dd $Mdocdate: May 31 2007 $
.Dt LOGIN_CAP 3
@


1.15
log
@convert to new .Dd format;
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.14 2005/12/02 03:44:53 deraadt Exp $
d35 1
a35 1
.Dd $Mdocdate$
d52 2
a53 2
.Fd #include <sys/types.h>
.Fd #include <login_cap.h>
@


1.14
log
@never say unsigned; say at least unsigned int
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.13 2005/07/22 03:16:58 jaredy Exp $
d35 1
a35 1
.Dd July 16, 1996
@


1.13
log
@- sync prototypes and header file excerpts to reality
- many grammar, punctuation, macro, layout, spelling/typos,
  rewording, etc. fixes
- avoid first person
- sprinkle crossrefs where relevant

help & ok jmc
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.12 2004/08/09 21:15:09 millert Exp $
d73 1
a73 1
.Fn setclasscontext "char *class" "unsigned flags"
d75 1
a75 1
.Fn setusercontext "login_cap_t *lc" "struct passwd *pwd" "uid_t uid" "unsigned flags"
@


1.12
log
@Support the "setenv" capability in login.conf ala FreeBSD.  Following
FreeBSD's example, a '~' in an environment variable is replaced
with the user's homedir.  A '$' is replaced by the user's login
name.  Both can be escaped with a backslash to get the literal char.
OK deraadt@@
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.11 2003/08/06 18:05:00 fgsch Exp $
d59 1
a59 1
.Fn login_getcapbool "login_cap_t *lc" "char *cap" "u_int def"
d73 1
a73 1
.Fn setclasscontext "char *class" "u_int flags"
d75 1
a75 1
.Fn setusercontext "login_cap_t *lc" "struct passwd *pwd" "uid_t uid" "u_int flags"
d134 2
a135 2
then only "auth" will be looked at.
(See
d169 1
a169 1
.Li /etc/login.conf
d196 2
a197 2
bits are used.
(See
d238 1
a238 1
Set the group id and call
@


1.11
log
@add missing header. millert ok.
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.10 2003/05/30 17:21:06 jmc Exp $
d235 2
@


1.10
log
@- correct macro usage
- section reorder
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.9 2003/03/06 20:48:35 jmc Exp $
d52 1
@


1.9
log
@.Xr typos;
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.8 2002/02/23 00:39:06 millert Exp $
d188 1
a188 1
.Ar flags.
@


1.8
log
@Add brief LOGIN_SETLOGIN caveat and point the user to setlogin(2)
for more info.
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.7 2001/09/21 16:24:03 aaron Exp $
d238 1
a238 1
.Xr pwd
@


1.7
log
@Typo; grange@@rt.mipt.ru
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.6 2001/08/15 17:55:30 aaron Exp $
d302 13
@


1.6
log
@Typo fixes; andrew.hoerter@@NeuStar.com
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.5 2001/05/29 21:33:59 millert Exp $
d179 1
a179 1
To be secure a path must exist, be a regular file (and not a direectory),
@


1.5
log
@mention setusercontext() return value
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.4 2000/12/24 00:30:50 aaron Exp $
d97 1
a97 1
structure is no longer needed, is should be freed by the
d289 1
a289 1
However, if the the capability was not found or an error occurred and
d293 1
a293 1
(whichever is relevant) are non-NUL the returned value is simply what
@


1.4
log
@Various repairs, mostly to get rid of short lines.
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.3 2000/10/18 05:12:07 aaron Exp $
d227 3
@


1.3
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.2 2000/08/20 19:05:37 millert Exp $
d36 1
a36 1
.Dt LOGIN_CAP 3 
d84 3
a86 2
is NULL or the empty string)
from
d93 2
a94 1
NULL is returned if the user class is not found.
d110 1
a110 2
function
is used to obtain the style of authentication that should be used for
d114 6
a119 2
argument may either be NULL or the desired style of authentication.
If NULL, the first available authentication style will be used.
d131 3
a133 1
is NULL then only "auth" will be looked at.
d137 5
a141 3
.Fn login_getstyle 
function will return NULL if the desired style of authentication
is not available, or if no style is available.
d170 1
a170 1
It returns a non-zero value if 
d177 1
a177 1
function takes a path name and returns 0 if the path name is secure, -1
d179 2
a180 5
To be secure a path must
exist,
be a regular file (and not a directory),
owned by root,
and only writable by the owner (root).
d186 2
a187 2
the name of a user class,
and sets the resources defined by that class according to
d190 3
a192 3
.Nm LOGIN_SETPATH ,
.Nm LOGIN_SETPRIORITY ,
.Nm LOGIN_SETRESOURCES ,
d194 1
a194 1
.Nm LOGIN_SETUMASK
d196 1
a196 1
(See 
d199 1
a199 1
It returns 0 on success and -1 on failure.
d203 1
a203 2
function
sets the resources according to
d207 3
a209 2
argument, if not NULL, contains the class information that should
be used.
d212 3
a214 1
argument, if not NULL, provides information about the user.
d219 2
a220 1
cannot be NULL.
d223 1
a223 1
argument is used in place of the user id contained in the
d231 1
a231 1
.It LOGIN_SETGROUP
d237 1
a237 1
.It LOGIN_SETLOGIN
d243 1
a243 1
.It LOGIN_SETPATH
d247 1
a247 1
.It LOGIN_SETPRIORITY
d250 1
a250 1
.It LOGIN_SETRESOURCES
d253 1
a253 1
.It LOGIN_SETUMASK
d256 2
a257 2
.It LOGIN_SETUSER
Sets the user id to
d261 1
a261 1
.It LOGIN_SETALL
@


1.2
log
@Fix history section.
@
text
@d32 1
a32 1
.\" $OpenBSD: login_cap.3,v 1.1 2000/08/20 18:37:20 millert Exp $
d120 2
a121 1
entry in the database.  By convention this should be of the form "auth-type".
d142 2
a143 2
If the field is found, its value is returned.  If the field is not
found, the value specified by
d154 2
a155 1
function is slightly different.  It returns
d189 2
a190 1
bits are used.  (See 
d276 2
a277 2
this space.  However, if the the capability was not found or an error
occurred and
@


1.1
log
@login.conf code from BSDi.  This does not include the bsd auth code
which will come later.  At this stage it is primarily used for setting
resource limits.
@
text
@d32 1
a32 1
.\" $OpenBSD$
d263 1
a263 1
utility appeared in
@

