head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.10
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.13.0.22
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.20
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.18
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.16
	OPENBSD_5_0:1.13.0.14
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.12
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.10
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.6
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.09.12.13.34.22;	author guenther;	state Exp;
branches;
next	1.17;
commitid	TusJDQRjqkLPFiPJ;

1.17
date	2013.11.05.20.36.51;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2013.11.05.09.36.05;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2013.08.16.05.27.39;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2013.08.13.05.52.12;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.01.19.49.18;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2008.04.04.21.26.07;	author okan;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.02.16.14.58;	author kurt;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2007.06.05.18.11.48;	author kurt;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2006.04.10.12.04.20;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.01.18.06.59;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.25.15.38.47;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.25.21.16.47;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.26.35;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.58;	author deraadt;	state Exp;
branches;
next	;

1.10.2.1
date	2008.05.09.13.03.20;	author henning;	state Exp;
branches;
next	;

1.11.2.1
date	2008.05.09.13.02.48;	author henning;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Wrap <dirent.h> so that internal calls go direct and they're all weak symbols
@
text
@/*	$OpenBSD: telldir.c,v 1.17 2013/11/05 20:36:51 schwarze Exp $ */
/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <dirent.h>
#include "thread_private.h"
#include "telldir.h"

/*
 * return a pointer into a directory
 */
long
telldir(DIR *dirp)
{
	long i;

	_MUTEX_LOCK(&dirp->dd_lock);
	i = dirp->dd_curpos;
	_MUTEX_UNLOCK(&dirp->dd_lock);

	return (i);
}
DEF_WEAK(telldir);
@


1.17
log
@Cleanup, no functional change:
1. avoid code duplication in rewinddir() by calling seekdir() directly
2. move __seekdir() into seekdir() and _telldir_unlocked() into telldir()
Both functions were called from nowhere else.
3. remove some unused #include directives and one unused function prototype
ok otto@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.16 2013/11/05 09:36:05 schwarze Exp $ */
d49 1
@


1.16
log
@Make sure seekdir(3) works even when dirp->dd_buf still contains some
pending entries: At the time of the lseek(2), also invalidate the
buffer in order to force getdents(2) during the next readdir(3).
Because this throws away buffered data that could still be used
in some cases, this is not particularly efficient, but at least
it works; i will suggest optimizations soon.

Bug found when investigating perl-5.18.1/t/op/threads-dirh.t
that was reported broken by Andrew Fresh <andrew at afresh1 dot com>.

ok guenther@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.15 2013/08/16 05:27:39 guenther Exp $ */
a30 2
#include <sys/param.h>
#include <sys/queue.h>
a31 3
#include <stdlib.h>
#include <unistd.h>

a34 2
int _readdir_unlocked(DIR *, struct dirent **, int);

a38 6
_telldir_unlocked(DIR *dirp)
{
	return (dirp->dd_curpos);
}

long
d44 1
a44 1
	i = _telldir_unlocked(dirp);
a47 11
}

/*
 * seek to an entry in a directory.
 * Only values returned by "telldir" should be passed to seekdir.
 */
void
__seekdir(DIR *dirp, long loc)
{
	dirp->dd_loc = 0;
	dirp->dd_curpos = lseek(dirp->dd_fd, loc, SEEK_SET);
@


1.15
log
@seekdir()/rewinddir() must update the position returned by telldir()
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.14 2013/08/13 05:52:12 guenther Exp $ */
d70 1
@


1.14
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.13 2008/05/01 19:49:18 otto Exp $ */
d70 1
a70 1
	lseek(dirp->dd_fd, loc, SEEK_SET);
@


1.13
log
@Be carefull not to read away the target entry when encountering
deleted files after a seekdir(); testcase produced by mbalmer@@; fix
with and ok mbalmer; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.12 2008/04/04 21:26:07 okan Exp $ */
d48 1
a48 30
	long i;
	struct ddloc *lp;

	i = dirp->dd_td->td_last;
	lp = &dirp->dd_td->td_locs[i];

	/* return previous telldir, if there */
	for (; i < dirp->dd_td->td_loccnt; i++, lp++) {
		if (lp->loc_seek == dirp->dd_seek && 
		    lp->loc_loc == dirp->dd_loc) {
			dirp->dd_td->td_last = i;
			return (i);
		}
	}

	if (dirp->dd_td->td_loccnt == dirp->dd_td->td_sz) {
		size_t newsz = dirp->dd_td->td_sz * 2 + 1;
		struct ddloc *p;
		p = realloc(dirp->dd_td->td_locs, newsz * sizeof(*p));
		if (p == NULL)
			return (-1);
		dirp->dd_td->td_sz = newsz;
		dirp->dd_td->td_locs = p;
		lp = &dirp->dd_td->td_locs[i];
	}
	dirp->dd_td->td_loccnt++;
	lp->loc_seek = dirp->dd_seek;
	lp->loc_loc = dirp->dd_loc;
	dirp->dd_td->td_last = i;
	return (i);
d70 1
a70 17
	struct ddloc *lp;
	struct dirent *dp;

	if (loc < 0 || loc >= dirp->dd_td->td_loccnt)
		return;
	lp = &dirp->dd_td->td_locs[loc];
	dirp->dd_td->td_last = loc;
	if (lp->loc_loc == dirp->dd_loc && lp->loc_seek == dirp->dd_seek)
		return;
	(void) lseek(dirp->dd_fd, (off_t)lp->loc_seek, SEEK_SET);
	dirp->dd_seek = lp->loc_seek;
	dirp->dd_loc = 0;
	while (dirp->dd_loc < lp->loc_loc) {
		_readdir_unlocked(dirp, &dp, 0);
		if (dp == NULL)
			break;
	}
@


1.12
log
@alter internal _readdir_unlocked() api to be less confusing, so that
callers may respond accordingly and correctly.

this fixes an issue where readdir_r() could not decipher the difference
between an error or no more entires.

feedback and ok kurt@@, ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.11 2007/10/02 16:14:58 kurt Exp $ */
d40 1
a40 1
int _readdir_unlocked(DIR *, struct dirent **);
d112 1
a112 1
		_readdir_unlocked(dirp, &dp);
@


1.11
log
@fix a libpthread PANIC in seekdir(3) caused by a recursive mutex lock.
remove the recursive lock in __seekdir() and ensure all callers properly
lock dd_lock prior to calling.  reported and tested by bernd@@
okay marc@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.10 2007/06/05 18:11:48 kurt Exp $ */
d40 1
a40 1
struct dirent *_readdir_unlocked(DIR *);
d112 1
a112 1
		dp = _readdir_unlocked(dirp);
@


1.11.2.1
log
@MFC (otto)
Be carefull not to read away the target entry when encountering
deleted files after a seekdir(); testcase produced by mbalmer@@; fix
with and ok mbalmer; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.13 2008/05/01 19:49:18 otto Exp $ */
d40 1
a40 1
int _readdir_unlocked(DIR *, struct dirent **, int);
d112 1
a112 1
		_readdir_unlocked(dirp, &dp, 0);
@


1.10
log
@_FD_LOCK/UNLOCK() is libpthread specific and not needed for librthread, so
isolate its usage to libpthread only and replace with generic non-static
mutex support in the one place it is needed:
 - remove _FD_LOCK/UNLOCK from lseek and ftruncate in libc and make the
   functions weak so that libpthread can override with its own new
   versions that do the locking.
 - remove _thread_fd_lock/unlock() weak functions from libc and adjust
   libpthread for the change.
 - add generic _thread_mutex_lock/unlock/destroy() weak functions in libc
   to support non-static mutexes in libc and add libpthread and librthread
   implementations for them. libc can utilize non-static mutexes via the
   new _MUTEX_LOCK/UNLOCK/DESTROY() macros. Actually these new macros can
   support both static and non-static mutexes but currently only using
   them for non-static.
 - make opendir/closedir/readdir/readdir_r/seekdir/telldir() thread-safe
   for both thread libraries by using a non-static mutex in the struct
   _dirdesc (typedef DIR), utilizing it in the *dir functions and remove
   remaining and incorrect _FD_LOCK/UNLOCK() use in libc.
 - add comments to both thread libraries to indicate libc depends on the
   current implementation of static mutex initialization. suggested by
   marc@@
 - major bump libc and libpthread due to function removal, structure
   change and weak symbol conversions.
okay marc@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.9 2006/04/10 12:04:20 otto Exp $ */
d40 2
d46 1
a46 1
telldir(DIR *dirp)
a50 1
	_MUTEX_LOCK(&dirp->dd_lock);
a58 1
			_MUTEX_UNLOCK(&dirp->dd_lock);
d67 1
a67 2
		if (p == NULL) {
			_MUTEX_UNLOCK(&dirp->dd_lock);
a68 1
		}
d77 10
d88 1
d112 1
a112 1
		dp = readdir(dirp);
@


1.10.2.1
log
@MFC (otto)
Be carefull not to read away the target entry when encountering
deleted files after a seekdir(); testcase produced by mbalmer@@; fix
with and ok mbalmer; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.13 2008/05/01 19:49:18 otto Exp $ */
@


1.9
log
@telldir/seekdir optimization, avoid scanning the complete list,
while still returning the correct index for seekdir(); telldir()
Tested by Fred Crowson and others; "put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.8 2006/04/01 18:06:59 otto Exp $ */
d37 1
d46 1
a46 1
	long i = dirp->dd_td->td_last;
d49 2
d58 1
d67 2
a68 1
		if (p == NULL)
d70 1
d79 1
@


1.8
log
@- Plug huge mem leak; mostly samba was suffering.
- Fix semantics: seekdir(pos); telldir() shoud return pos. The code
that implements this will be made faster in a later commit.
- We loose documented behaviour (after closedir() the telldir()
positions are not valid anymore). This was never in Posix, and most
other systems have nothing like it.

Diff originally from Paul Thorn, rewritten by me using some FreeBSD
code.  "slap it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: telldir.c,v 1.7 2005/08/08 08:05:34 espie Exp $ */
d45 4
a48 2
	long i = 0;
	struct ddloc *lp = dirp->dd_td->td_locs;
d53 2
a54 1
		    lp->loc_loc == dirp->dd_loc)
d56 1
d72 1
d89 1
@


1.7
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d32 1
d37 1
a37 27
/*
 * The option SINGLEUSE may be defined to say that a telldir
 * cookie may be used only once before it is freed. This option
 * is used to avoid having memory usage grow without bound.
 */
#define SINGLEUSE

/*
 * One of these structures is malloced to describe the current directory
 * position each time telldir is called. It records the current magic 
 * cookie returned by getdirentries and the offset within the buffer
 * associated with that return value.
 */
struct ddloc {
	struct	ddloc *loc_next;/* next structure in list */
	long	loc_index;	/* key associated with structure */
	long	loc_seek;	/* magic cookie returned by getdirentries */
	long	loc_loc;	/* offset of entry in buffer */
};

#define	NDIRHASH	32	/* Num of hash lists, must be a power of 2 */
#define	LOCHASH(i)	((i)&(NDIRHASH-1))

static long	dd_loccnt;	/* Index of entry for sequential readdir's */
static struct	ddloc *dd_hash[NDIRHASH];   /* Hash list heads for ddlocs */

void __seekdir(DIR *, long);
d43 1
a43 1
telldir(const DIR *dirp)
d45 9
a53 2
	int index;
	struct ddloc *lp;
d55 11
a65 4
	if ((lp = (struct ddloc *)malloc(sizeof(struct ddloc))) == NULL)
		return (-1);
	index = dd_loccnt++;
	lp->loc_index = index;
d68 1
a68 3
	lp->loc_next = dd_hash[LOCHASH(index)];
	dd_hash[LOCHASH(index)] = lp;
	return (index);
a78 1
	struct ddloc **prevlp;
d81 1
a81 9
	prevlp = &dd_hash[LOCHASH(loc)];
	lp = *prevlp;
	while (lp != NULL) {
		if (lp->loc_index == loc)
			break;
		prevlp = &lp->loc_next;
		lp = lp->loc_next;
	}
	if (lp == NULL)
d83 1
d85 1
a85 1
		goto found;
a93 5
found:
#ifdef SINGLEUSE
	*prevlp = lp->loc_next;
	free((caddr_t)lp);
#endif
@


1.6
log
@deregister (and deauto!). ok millert@@ marco@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: telldir.c,v 1.5 2004/05/18 02:05:52 jfb Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.5
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: telldir.c,v 1.4 2003/06/25 21:16:47 deraadt Exp $";
d73 2
a74 2
	register int index;
	register struct ddloc *lp;
d94 2
a95 2
	register struct ddloc *lp;
	register struct ddloc **prevlp;
@


1.4
log
@protos
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: telldir.c,v 1.3 2003/06/02 20:18:35 millert Exp $";
d71 1
a71 2
telldir(dirp)
	const DIR *dirp;
d92 1
a92 3
__seekdir(dirp, loc)
	register DIR *dirp;
	long loc;
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: telldir.c,v 1.2 1996/08/19 08:26:35 tholo Exp $";
d64 2
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char rcsid[] = "$OpenBSD: telldir.c,v 1.4 1995/02/25 08:51:51 cgd Exp $";
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: telldir.c,v 1.4 1995/02/25 08:51:51 cgd Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)telldir.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$NetBSD: telldir.c,v 1.4 1995/02/25 08:51:51 cgd Exp $";
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
