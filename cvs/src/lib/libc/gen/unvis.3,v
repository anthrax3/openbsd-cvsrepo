head	1.18;
access;
symbols
	OPENBSD_6_0:1.18.0.8
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.4
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.8
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.6
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.24
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.22
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.20
	OPENBSD_5_0:1.16.0.18
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.16
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.14
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.10
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.12
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.8
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.15.0.8
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.6
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.4
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.10
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.8
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.6
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.12.0.4
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.11.0.4
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.18
date	2014.11.09.04.34.20;	author guenther;	state Exp;
branches;
next	1.17;
commitid	9Ayr6J9yq8qLiFdu;

1.17
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.31.19.19.29;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2005.07.22.03.16.58;	author jaredy;	state Exp;
branches;
next	1.14;

1.14
date	2004.10.17.20.25.31;	author otto;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.20.18.35;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2000.12.24.00.30.53;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.18.03.01.28;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.08.11.03.06.06;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	99.07.09.13.35.19;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.07.02.20.58.00;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.03.10.03.24;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.29.22.38.36;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.05.16.19.55.02;	author alex;	state Exp;
branches;
next	1.4;

1.4
date	98.06.15.17.55.02;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.27.14;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.02.13.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Correct constness of str*unvis()'s second (source) argument
@
text
@.\"	$OpenBSD: unvis.3,v 1.17 2013/06/05 03:39:22 tedu Exp $
.\"
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt UNVIS 3
.Os
.Sh NAME
.Nm unvis ,
.Nm strunvis ,
.Nm strnunvis
.Nd decode a visual representation of characters
.Sh SYNOPSIS
.In vis.h
.Ft int
.Fn unvis "char *cp" "char c" "int *astate" "int flag"
.Ft int
.Fn strunvis "char *dst" "const char *src"
.Ft ssize_t
.Fn strnunvis "char *dst" "const char *src" "size_t size"
.Sh DESCRIPTION
The
.Fn unvis ,
.Fn strunvis
and
.Fn strnunvis
functions are used to decode a visual representation of characters,
as produced by the
.Xr vis 3
function, back into the original form.
.Fn unvis
is called with successive characters in
.Fa c
until a valid
sequence is recognized, at which time the decoded character is
available at the character pointed to by
.Fa cp .
.Pp
.Fn strunvis
decodes the characters pointed to by
.Fa src
into the buffer pointed to by
.Fa dst .
.Pp
.Fn strnunvis
decodes the characters pointed to by
.Fa src
into the buffer pointed to by
.Fa dst ,
writing a maximum of
.Fa size
bytes.
The
.Fn strunvis
function simply copies
.Fa src
to
.Fa dst ,
decoding any escape sequences along the way,
and returns the number of characters placed into
.Fa dst ,
or \-1 if an
invalid escape sequence was detected.
The size of
.Fa dst
should be
equal to the size of
.Fa src
(that is, no expansion takes place during decoding).
.Fn strunvis
terminates the destination string with a trailing NUL byte;
.Fn strnunvis
does so if
.Fa size
is larger than 0.
.Pp
The
.Fn unvis
function implements a state machine that can be used to decode an arbitrary
stream of bytes.
All state associated with the bytes being decoded is stored outside the
.Fn unvis
function (that is, a pointer to the state is passed in), so
calls decoding different streams can be freely intermixed.
To start decoding a stream of bytes, first initialize an integer
to zero.
Call
.Fn unvis
with each successive byte, along with a pointer
to this integer, and a pointer to a destination character.
.Sh RETURN VALUES
The
.Fn unvis
function has several return codes that must be handled properly.
They are:
.Bl -tag -width UNVIS_VALIDPUSH
.It Li \&0 (zero)
Another character is necessary; nothing has been recognized yet.
.It Dv UNVIS_VALID
A valid character has been recognized and is available at the location
pointed to by
.Fa cp .
.It Dv UNVIS_VALIDPUSH
A valid character has been recognized and is available at the location
pointed to by
.Fa cp ;
however, the character currently passed in should be passed in again.
.It Dv UNVIS_NOCHAR
A valid sequence was detected, but no character was produced.
This return code is necessary to indicate a logical break between characters.
.It Dv UNVIS_SYNBAD
An invalid escape sequence was detected, or the decoder is in an
unknown state.
The decoder is placed into the starting state.
.El
.Pp
When all bytes in the stream have been processed, call
.Fn unvis
one more time with
.Fa flag
set to
.Dv UNVIS_END
to extract any remaining character (the character passed in is ignored).
.Pp
The
.Fn strunvis
function returns the number of bytes written (not counting
the trailing NUL byte) or \-1 if an error occurred.
.Pp
The
.Fn strnunvis
function returns the number of bytes (not counting the trailing NUL byte)
that would be needed to fully convert the input string, or \-1 if an
error occurred.
.Sh EXAMPLES
The following code fragment illustrates a proper use of
.Fn unvis .
.Bd -literal -offset indent
int state = 0;
char out;

while ((ch = getchar()) != EOF) {
again:
	switch(unvis(&out, ch, &state, 0)) {
	case 0:
	case UNVIS_NOCHAR:
		break;
	case UNVIS_VALID:
		(void) putchar(out);
		break;
	case UNVIS_VALIDPUSH:
		(void) putchar(out);
		goto again;
	case UNVIS_SYNBAD:
		(void)fprintf(stderr, "bad sequence!\en");
		exit(1);
	}
}
if (unvis(&out, (char)0, &state, UNVIS_END) == UNVIS_VALID)
	(void) putchar(out);
.Ed
.Sh SEE ALSO
.Xr unvis 1 ,
.Xr vis 1 ,
.Xr vis 3
.Sh HISTORY
The
.Fn unvis
function first appeared in
.Bx 4.4 .
@


1.17
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.16 2007/05/31 19:19:29 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 31 2007 $
d43 1
a43 1
.Fn strunvis "char *dst" "char *src"
d45 1
a45 1
.Fn strnunvis "char *dst" "char *src" "size_t size"
@


1.16
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.15 2005/07/22 03:16:58 jaredy Exp $
d30 1
a30 1
.Dd $Mdocdate$
d39 1
a39 1
.Fd #include <vis.h>
@


1.15
log
@- sync prototypes and header file excerpts to reality
- many grammar, punctuation, macro, layout, spelling/typos,
  rewording, etc. fixes
- avoid first person
- sprinkle crossrefs where relevant

help & ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.14 2004/10/17 20:25:31 otto Exp $
d30 1
a30 1
.Dd December 11, 1993
@


1.14
log
@implement strnunvis(3), a bounded version of strunvis(3). ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.13 2003/06/02 20:18:35 millert Exp $
d144 3
a146 1
one more time with flag set to
d157 1
a157 1
function returns the number of bytes (not counting the trailing NUL byte),
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.12 2000/12/24 00:30:53 aaron Exp $
d35 2
a36 1
.Nm strunvis
d44 2
d48 2
a49 1
.Fn unvis
d51 1
a51 1
.Fn strunvis
d70 8
d95 6
d116 1
d147 11
@


1.12
log
@Various repairs, mostly to get rid of short lines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.11 2000/04/18 03:01:28 aaron Exp $
d14 1
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.10 1999/08/11 03:06:06 deraadt Exp $
d52 2
a53 3
functions
are used to decode a visual representation of characters, as produced
by the
d55 1
a55 2
function, back into
the original form.
d72 1
a72 2
function
simply copies
d90 1
a90 2
function
implements a state machine that can be used to decode an arbitrary
d104 1
a104 2
function
has several return codes that must be handled properly.
@


1.10
log
@more unescaped \n lines in nroff documents
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.9 1999/07/09 13:35:19 aaron Exp $
d83 2
a84 1
invalid escape sequence was detected.  The size of
d95 2
a96 2
stream of bytes.  All state associated with the bytes being decoded
is stored outside the
d99 4
a102 3
calls decoding different streams can be freely intermixed.  To
start decoding a stream of bytes, first initialize an integer
to zero.  Call
d109 2
a110 1
has several return codes that must be handled properly.  They are:
d124 2
a125 2
A valid sequence was detected, but no character was produced.  This
return code is necessary to indicate a logical break between characters.
d128 2
a129 1
unknown state.  The decoder is placed into the starting state.
@


1.9
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.8 1999/07/02 20:58:00 aaron Exp $
d153 2
a154 2
		(void)fprintf(stderr, "bad sequence!\n");
	exit(1);
@


1.8
log
@remove redundant .Pp macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.7 1999/06/03 10:03:24 aaron Exp $
d43 1
a43 1
.Ft int 
d45 1
a45 1
.Ft int 
d60 1
a60 1
.Fa c 
d111 1
a111 1
.It Dv UNVIS_VALID	
@


1.7
log
@use \-1, not -1, to change the meaning of `-' to minus sign from hyphen;
pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.6 1999/05/29 22:38:36 aaron Exp $
a132 1
.Pp
@


1.6
log
@repairs; go back over some old files, because we should properly distinguish
between NUL and NULL, i.e., don't use the .Dv (defined variable) macro when
referring to an ASCII NUL
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.5 1999/05/16 19:55:02 alex Exp $
d82 1
a82 1
or -1 if an
@


1.5
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.4 1998/06/15 17:55:02 mickey Exp $
d57 4
a60 2
the original form.  Unvis is called with successive characters in
.Ar c 
d64 5
a68 4
.Ar cp .
Strunvis decodes the
characters pointed to by
.Ar src
d70 1
a70 1
.Ar dst .
d76 1
a76 1
.Ar src
d78 1
a78 1
.Ar dst ,
d81 2
a82 2
.Ar dst ,
or \-1 if an
d84 1
a84 1
.Ar dst
d87 2
a88 3
.Ar src
(that is, no expansion takes place during
decoding).
d105 1
a105 1
.Xr unvis
d111 1
a111 1
.It Dv  UNVIS_VALID	
d113 3
a115 2
pointed to by cp.
.It Dv  UNVIS_VALIDPUSH
d117 4
a120 3
pointed to by cp; however, the character currently passed in should
be passed in again.
.It Dv  UNVIS_NOCHAR
d123 1
a123 1
.It Dv  UNVIS_SYNBAD
d134 1
d167 1
a167 1
.Nm unvis
@


1.4
log
@use Bx macro for BSD versions
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.3 1996/08/19 08:27:14 tholo Exp $
d157 1
a158 1
.Xr unvis 1 ,
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
.\"	$OpenBSD: unvis.3,v 1.6 1995/10/12 15:39:33 jtc Exp $
d163 2
a164 2
function
first appeared in 4.4BSD.
@


1.2
log
@unvis() works on plain char, not u_char
@
text
@d1 1
a1 1
.\"	$NetBSD: unvis.3,v 1.6 1995/10/12 15:39:33 jtc Exp $
a32 2
.\"
.\"     @@(#)unvis.3	8.2 (Berkeley) 12/11/93
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: unvis.3,v 1.5 1995/02/25 15:39:41 cgd Exp $
d46 1
a46 1
.Fn unvis "u_char *cp" "u_char c" "int *astate" "int flag"
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
