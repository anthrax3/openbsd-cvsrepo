head	1.20;
access;
symbols
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.8
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.16.0.8
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.18
	OPENBSD_5_0:1.12.0.16
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.14
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.12
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.8
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.10
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.6
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2015.08.20.21.49.29;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	jeIpGH0zlTW3huPH;

1.19
date	2015.02.05.12.59.57;	author millert;	state Exp;
branches;
next	1.18;
commitid	DTQbfd4poqBW8iSJ;

1.18
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	0DYulI8hhujBHMcR;

1.17
date	2014.10.08.05.34.59;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	fWcMSk6ieVtRj1Z7;

1.16
date	2013.04.17.17.40.35;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2012.11.29.02.15.44;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2012.03.22.04.11.53;	author matthew;	state Exp;
branches;
next	1.13;

1.13
date	2012.03.22.01.44.19;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.02.15.19.16;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.26.05.00.50;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.05.04.11.51;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.30.22.47.22;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.14.21.39.32;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.07.24.00.08.41;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.25.41;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.57;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@All these files include <stdlib.h>, so do not need to cast
malloc/calloc/realloc* returns.
@
text
@/*	$OpenBSD: scandir.c,v 1.19 2015/02/05 12:59:57 millert Exp $ */
/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Scan the directory dirname calling select to make a list of selected
 * directory entries then sort using qsort and compare routine dcomp.
 * Returns the number of entries and a pointer to a list of pointers to
 * struct dirent (through namelist). Returns -1 if there were any errors.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <errno.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include "telldir.h"

#define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))

/*
 * The DIRSIZ macro is the minimum record length which will hold the directory
 * entry.  This requires the amount of space in struct dirent without the
 * d_name field, plus enough space for the name and a terminating nul byte
 * (dp->d_namlen + 1), rounded up to a 4 byte boundary.
 */
#undef DIRSIZ
#define DIRSIZ(dp)							\
	((sizeof(struct dirent) - sizeof(dp)->d_name) +			\
	    (((dp)->d_namlen + 1 + 3) &~ 3))

int
scandir(const char *dirname, struct dirent ***namelist,
    int (*select)(const struct dirent *),
    int (*dcomp)(const struct dirent **, const struct dirent **))
{
	struct dirent *d, *p, **names = NULL;
	size_t nitems = 0;
	struct stat stb;
	long arraysz;
	DIR *dirp;

	if ((dirp = opendir(dirname)) == NULL)
		return (-1);
	if (fstat(dirp->dd_fd, &stb) < 0)
		goto fail;

	/*
	 * estimate the array size by taking the size of the directory file
	 * and dividing it by a multiple of the minimum size entry. 
	 */
	arraysz = MAXIMUM(stb.st_size / 24, 16);
	if (arraysz > SIZE_MAX / sizeof(struct dirent *)) {
		errno = ENOMEM;
		goto fail;
	}
	names = calloc(arraysz, sizeof(struct dirent *));
	if (names == NULL)
		goto fail;

	while ((d = readdir(dirp)) != NULL) {
		if (select != NULL && !(*select)(d))
			continue;	/* just selected names */

		/*
		 * Check to make sure the array has space left and
		 * realloc the maximum size.
		 */
		if (nitems >= arraysz) {
			struct dirent **nnames;
			
			if (fstat(dirp->dd_fd, &stb) < 0)
				goto fail;

			arraysz *= 2;
			if (SIZE_MAX / sizeof(struct dirent *) < arraysz)
				goto fail;
			nnames = reallocarray(names,
			    arraysz, sizeof(struct dirent *));
			if (nnames == NULL)
				goto fail;

			names = nnames;
		}

		/*
		 * Make a minimum size copy of the data
		 */
		p = malloc(DIRSIZ(d));
		if (p == NULL)
			goto fail;

		p->d_ino = d->d_ino;
		p->d_type = d->d_type;
		p->d_reclen = d->d_reclen;
		p->d_namlen = d->d_namlen;
		bcopy(d->d_name, p->d_name, p->d_namlen + 1);
		names[nitems++] = p;
	}
	closedir(dirp);
	if (nitems && dcomp != NULL)
		qsort(names, nitems, sizeof(struct dirent *),
		    (int(*)(const void *, const void *))dcomp);
	*namelist = names;
	return (nitems);

fail:
	while (nitems > 0)
		free(names[--nitems]);
	free(names);
	closedir(dirp);
	return (-1);
}

/*
 * Alphabetic order comparison routine for those who want it.
 */
int
alphasort(const struct dirent **d1, const struct dirent **d2)
{
	return(strcmp((*d1)->d_name, (*d2)->d_name));
}
@


1.19
log
@Include stdint.h, not limits.h to get SIZE_MAX.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scandir.c,v 1.18 2015/01/16 16:48:51 deraadt Exp $ */
d85 1
a85 1
	names = (struct dirent **)calloc(arraysz, sizeof(struct dirent *));
d117 1
a117 1
		p = (struct dirent *)malloc(DIRSIZ(d));
@


1.18
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: scandir.c,v 1.17 2014/10/08 05:34:59 deraadt Exp $ */
d42 1
a42 1
#include <limits.h>
@


1.17
log
@obvious reallocarray()
@
text
@d1 1
a1 1
/*	$OpenBSD: scandir.c,v 1.16 2013/04/17 17:40:35 tedu Exp $ */
d38 1
a38 1
#include <sys/param.h>
d47 2
d80 1
a80 1
	arraysz = MAX(stb.st_size / 24, 16);
@


1.16
log
@add some prototypes, casts, includes, parenthesis, and whatnot to
silence some warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: scandir.c,v 1.15 2012/11/29 02:15:44 guenther Exp $ */
d104 2
a105 2
			nnames = (struct dirent **)realloc((char *)names,
				arraysz * sizeof(struct dirent *));
@


1.15
log
@Change scandir()'s 'select' argument from
	int (*)(struct dirent *)
to
	int (*)(const struct dirent *)
to match POSIX.

ok millert@@, ports check by naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scandir.c,v 1.14 2012/03/22 04:11:53 matthew Exp $ */
d128 2
a129 1
		qsort(names, nitems, sizeof(struct dirent *), dcomp);
@


1.14
log
@Make DIR a private type within libc, give it the same underlying
typedef regardless of __BSD_VISIBLE, and eliminate the dirfd() macro.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scandir.c,v 1.13 2012/03/22 01:44:19 guenther Exp $ */
d60 1
a60 1
    int (*select)(struct dirent *),
@


1.13
log
@Update alphasort() and scandir()'s argument types to match POSIX:
use "const struct dirent **" instead of "const void *".  Also, add
__restrict to readdir_r().

ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scandir.c,v 1.12 2007/09/02 15:19:16 deraadt Exp $ */
d45 1
@


1.12
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: scandir.c,v 1.11 2007/06/26 05:00:50 ray Exp $ */
d59 2
a60 1
    int (*select)(struct dirent *), int (*dcomp)(const void *, const void *))
d143 1
a143 1
alphasort(const void *d1, const void *d2)
d145 1
a145 2
	return(strcmp((*(struct dirent **)d1)->d_name,
	    (*(struct dirent **)d2)->d_name));
@


1.11
log
@It seems st_size is not always a good estimator for the number of
directory entries.  ZFS, for instance, sets st_size to the number
of entries.

Use the same algorithm for the initial estimate but keep a minimum
to prevent a divide by zero.  When the buffer is filled, instead
of re-using the same flawed algorithm, double the buffer size.

Also add check for integer overflow.

Bug reported by Ed Ravin, ZFS testing environment provided by Bryan
Allen.

OK millert
@
text
@d1 1
a1 1
/*	$OpenBSD: scandir.c,v 1.10 2005/08/08 08:05:34 espie Exp $ */
d81 1
a81 1
	names = (struct dirent **)malloc(arraysz * sizeof(struct dirent *));
@


1.10
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d38 1
a38 1
#include <sys/types.h>
d76 2
a77 2
	arraysz = (stb.st_size / 24);
	if (arraysz > SIZE_T_MAX / sizeof(struct dirent *)) {
d99 3
a101 1
			arraysz = stb.st_size / 12;
@


1.9
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: scandir.c,v 1.8 2004/03/05 04:11:51 tedu Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.8
log
@don't leak memory.  free and netbsd via Patrick Latifi
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: scandir.c,v 1.7 2003/06/02 20:18:34 millert Exp $";
d61 2
a62 5
scandir(dirname, namelist, select, dcomp)
	const char *dirname;
	struct dirent ***namelist;
	int (*select)(struct dirent *);
	int (*dcomp)(const void *, const void *);
d143 1
a143 3
alphasort(d1, d2)
	const void *d1;
	const void *d2;
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: scandir.c,v 1.6 2002/07/30 22:47:22 millert Exp $";
d67 2
a68 2
	register struct dirent *d, *p, **names;
	register size_t nitems;
d74 1
a74 1
		return(-1);
d76 1
a76 1
		return(-1);
d85 1
a85 1
		return(-1);
d89 1
a89 1
		return(-1);
a90 1
	nitems = 0;
d94 1
a94 11
		/*
		 * Make a minimum size copy of the data
		 */
		p = (struct dirent *)malloc(DIRSIZ(d));
		if (p == NULL)
			return(-1);
		p->d_ino = d->d_ino;
		p->d_type = d->d_type;
		p->d_reclen = d->d_reclen;
		p->d_namlen = d->d_namlen;
		bcopy(d->d_name, p->d_name, p->d_namlen + 1);
d99 2
a100 2
		if (++nitems >= arraysz) {
			register struct dirent **nnames;
d103 2
a104 1
				return(-1);	/* just might have grown */
d108 3
a110 5
			if (nnames == NULL) {
				if (names)
					free(names);
				return(-1);
			}
d113 14
a126 1
		names[nitems-1] = p;
d132 8
a139 1
	return(nitems);
@


1.6
log
@malloc paranoia; it is unlikely that any filesystem will support
enough directory entries to cause a problem but it is good form anyway.
deraadt@@ OK.
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char rcsid[] = "$OpenBSD: scandir.c,v 1.5 2002/02/16 21:27:23 millert Exp $";
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: scandir.c,v 1.4 1998/08/14 21:39:32 deraadt Exp $";
d48 2
d87 4
@


1.4
log
@realloc repair
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: scandir.c,v 1.3 1997/07/24 00:08:41 deraadt Exp $";
d66 2
a67 2
	int (*select) __P((struct dirent *));
	int (*dcomp) __P((const void *, const void *));
@


1.3
log
@copy d_type; giles@@nemeton.com.au
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: scandir.c,v 1.2 1996/08/19 08:25:41 tholo Exp $";
d109 2
d114 1
a114 1
			names = (struct dirent **)realloc((char *)names,
d116 3
a118 1
			if (names == NULL)
d120 2
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: scandir.c,v 1.6 1995/02/25 08:51:42 cgd Exp $";
d100 1
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: scandir.c,v 1.6 1995/02/25 08:51:42 cgd Exp $	*/

d35 1
a35 5
#if 0
static char sccsid[] = "@@(#)scandir.c	8.3 (Berkeley) 1/2/94";
#else
static char rcsid[] = "$NetBSD: scandir.c,v 1.6 1995/02/25 08:51:42 cgd Exp $";
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
