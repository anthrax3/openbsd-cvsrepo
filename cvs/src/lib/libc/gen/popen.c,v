head	1.21;
access;
symbols
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.18.0.30
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.28
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.24
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.22
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.20
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.18
	OPENBSD_5_0:1.18.0.16
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.14
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.12
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.8
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.10
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.6
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.10
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.8
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.6
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.4
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.9.0.16
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.14
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.12
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.10
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.8
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.6
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.20;
commitid	lTMF8Y3C9fQGd6jQ;

1.20
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	0DYulI8hhujBHMcR;

1.19
date	2014.08.31.02.21.18;	author guenther;	state Exp;
branches;
next	1.18;
commitid	ByaPhxsk4NZYxbFu;

1.18
date	2007.11.26.19.26.46;	author kurt;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.08.08.05.34;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.25.15.38.47;	author otto;	state Exp;
branches;
next	1.15;

1.15
date	2004.08.06.18.31.11;	author pedro;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.18.02.05.52;	author jfb;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.20.18.34;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.16.01.28.54;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.02.20.18.31;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.09.07.04.39;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.09.11.18.51.04;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.08.24.21.25.46;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.07.09.00.28.23;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.06.22.23.18.55;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	97.06.22.20.01.48;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	97.04.16.21.59.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.25.20;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.27.14.34.46;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.57;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@/*	$OpenBSD: popen.c,v 1.20 2015/01/16 16:48:51 deraadt Exp $ */
/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software written by Ken Arnold and
 * published in UNIX Review, Vol. 6, No. 8.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/wait.h>

#include <signal.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <paths.h>
#include <wchar.h>
#include "thread_private.h"

static struct pid {
	struct pid *next;
	FILE *fp;
	pid_t pid;
} *pidlist;

static void *pidlist_lock = NULL;

FILE *
popen(const char *program, const char *type)
{
	struct pid * volatile cur;
	FILE *iop;
	int pdes[2];
	int target;
	pid_t pid;

	if ((*type != 'r' && *type != 'w') ||
	    (type[1] != '\0' && (type[1] != 'e' || type[2] != '\0'))) {
		errno = EINVAL;
		return (NULL);
	}

	if ((cur = malloc(sizeof(struct pid))) == NULL)
		return (NULL);

	if (pipe2(pdes, O_CLOEXEC) < 0) {
		free(cur);
		return (NULL);
	}

	_MUTEX_LOCK(&pidlist_lock);
	switch (pid = vfork()) {
	case -1:			/* Error. */
		_MUTEX_UNLOCK(&pidlist_lock);
		(void)close(pdes[0]);
		(void)close(pdes[1]);
		free(cur);
		return (NULL);
		/* NOTREACHED */
	case 0:				/* Child. */
	    {
		struct pid *pcur;

		/*
		 * because vfork() instead of fork(), must leak FILE *,
		 * but luckily we are terminally headed for an execl()
		 */
		for (pcur = pidlist; pcur; pcur = pcur->next)
			close(fileno(pcur->fp));

		target = *type == 'r';
		if (pdes[target] != target) {
			if (dup2(pdes[target], target) == -1)
				_exit(127);
		} else {
			int flags = fcntl(pdes[target], F_GETFD);
			if (flags == -1 || ((flags & FD_CLOEXEC) &&
			    fcntl(pdes[target], F_SETFD, flags & ~FD_CLOEXEC)
			    == -1))
				_exit(127);
		}

		execl(_PATH_BSHELL, "sh", "-c", program, (char *)NULL);
		_exit(127);
		/* NOTREACHED */
	    }
	}
	_MUTEX_UNLOCK(&pidlist_lock);

	/* Parent; assume fdopen can't fail. */
	target = *type == 'w';
	iop = fdopen(pdes[target], type);
	fwide(iop, -1);
	(void)close(pdes[!target]);

	/* Link into list of file descriptors. */
	cur->fp = iop;
	cur->pid =  pid;
	_MUTEX_LOCK(&pidlist_lock);
	cur->next = pidlist;
	pidlist = cur;
	_MUTEX_UNLOCK(&pidlist_lock);

	/* now that it's in the list, clear FD_CLOEXEC if unwanted */
	if (type[1] != 'e') {
		int flags = fcntl(pdes[target], F_GETFD);
		if (flags != -1)
			fcntl(pdes[target], F_SETFD, flags & ~FD_CLOEXEC);
	}

	return (iop);
}
DEF_WEAK(popen);

/*
 * pclose --
 *	Pclose returns -1 if stream is not associated with a `popened' command,
 *	if already `pclosed', or waitpid returns an error.
 */
int
pclose(FILE *iop)
{
	struct pid *cur, *last;
	int pstat;
	pid_t pid;

	/* Find the appropriate file pointer. */
	_MUTEX_LOCK(&pidlist_lock);
	for (last = NULL, cur = pidlist; cur; last = cur, cur = cur->next)
		if (cur->fp == iop)
			break;

	if (cur == NULL) {
		_MUTEX_UNLOCK(&pidlist_lock);
		return (-1);
	}

	/* Remove the entry from the linked list. */
	if (last == NULL)
		pidlist = cur->next;
	else
		last->next = cur->next;
	_MUTEX_UNLOCK(&pidlist_lock);

	(void)fclose(iop);

	do {
		pid = waitpid(cur->pid, &pstat, 0);
	} while (pid == -1 && errno == EINTR);

	free(cur);

	return (pid == -1 ? -1 : pstat);
}
DEF_WEAK(pclose);
@


1.20
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.19 2014/08/31 02:21:18 guenther Exp $ */
d140 1
d182 1
@


1.19
log
@Add additional userland interfaces for setting close-on-exec on fds
when creating them: mkostemp(), mkostemps(), the 'e' mode letter for
fopen(), freopen(), fdopen(), and popen().  The close-on-exec flag will
be cleared by the action created by posix_spawn_file_actions_adddup2().

Also, add support for the C11 'x' mode letter for fopen() and freopen(),
setting O_EXCL when possibly creating files.

Note: this requires kernel support for pipe2() and dup3()!

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.18 2007/11/26 19:26:46 kurt Exp $ */
a33 1
#include <sys/param.h>
@


1.18
log
@make popen/pclose thread safe. closes library/5634. from and okay andreas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.17 2005/08/08 08:05:34 espie Exp $ */
d39 1
d45 1
d62 1
d65 2
a66 1
	if ((*type != 'r' && *type != 'w') || type[1] != '\0') {
d74 1
a74 1
	if (pipe(pdes) < 0) {
d91 1
d99 4
a102 13
		if (*type == 'r') {
			int tpdes1 = pdes[1];

			(void) close(pdes[0]);
			/*
			 * We must NOT modify pdes, due to the
			 * semantics of vfork.
			 */
			if (tpdes1 != STDOUT_FILENO) {
				(void)dup2(tpdes1, STDOUT_FILENO);
				(void)close(tpdes1);
				tpdes1 = STDOUT_FILENO;
			}
d104 5
a108 5
			(void)close(pdes[1]);
			if (pdes[0] != STDIN_FILENO) {
				(void)dup2(pdes[0], STDIN_FILENO);
				(void)close(pdes[0]);
			}
d110 1
d119 4
a122 7
	if (*type == 'r') {
		iop = fdopen(pdes[0], type);
		(void)close(pdes[1]);
	} else {
		iop = fdopen(pdes[1], type);
		(void)close(pdes[0]);
	}
d131 7
@


1.17
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d44 1
d50 4
a53 2
} *pidlist; 
	
d75 1
d78 1
d119 1
d133 1
d136 1
d154 1
d159 2
a160 1
	if (cur == NULL)
d162 8
a176 5
	/* Remove the entry from the linked list. */
	if (last == NULL)
		pidlist = cur->next;
	else
		last->next = cur->next;
d178 1
a178 1
		
@


1.16
log
@deregister (and deauto!). ok millert@@ marco@@
@
text
@d1 1
a32 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: popen.c,v 1.15 2004/08/06 18:31:11 pedro Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.15
log
@in pclose(), only fclose() a stream if it has been opened by popen(), so
that applications doing: 'ok = (pclose(f) != -1) || (fclose(f) == 0)'
can work safely and avoid a double-close of a stream. ok millert@@
@
text
@d34 1
a34 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.14 2004/05/18 02:05:52 jfb Exp $";
d144 1
a144 1
	register struct pid *cur, *last;
@


1.14
log
@ansify function definitions and zap some `register'

ok millert@@
@
text
@d34 1
a34 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.13 2003/06/02 20:18:34 millert Exp $";
a147 2
	(void)fclose(iop);

d152 1
d155 2
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d34 1
a34 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.12 2002/01/16 01:28:54 millert Exp $";
d55 1
a55 3
popen(program, type)
	const char *program;
	const char *type;
d142 1
a142 2
pclose(iop)
	FILE *iop;
@


1.12
log
@Use the volatile specifier to fix warnings about variables being
clobbered by longjmp / vfork instead of the gcc "(void)&foo;" hack.
@
text
@d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d34 1
a34 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.11 2002/01/02 20:18:31 deraadt Exp $";
@


1.11
log
@more pid_t use
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.10 2001/07/09 07:04:39 deraadt Exp $";
d63 1
a63 1
	struct pid *cur;
a66 4

#ifdef __GNUC__
	(void)&cur;
#endif
@


1.10
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.9 1997/09/11 18:51:04 deraadt Exp $";
d65 2
a66 1
	int pdes[2], pid;
@


1.9
log
@make popen() safe for a real vfork()
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.8 1997/08/24 21:25:46 millert Exp $";
d121 1
a121 1
		execl(_PATH_BSHELL, "sh", "-c", program, NULL);
@


1.8
log
@Fix compiler warnings.
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.7 1997/07/09 00:28:23 millert Exp $";
d92 2
d98 2
a99 2
		for (cur = pidlist; cur; cur = cur->next)
			close(fileno(cur->fp));
d124 1
@


1.7
log
@Clean up some -Wall complaints.
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.6 1997/06/22 23:18:55 tholo Exp $";
d66 4
@


1.6
log
@Fix a bogon in last change
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.5 1997/06/22 20:01:48 tholo Exp $";
d67 1
a67 1
	if (*type != 'r' && *type != 'w' || type[1]) {
@


1.5
log
@Close pipes before dup'ing file descriptors in the child, not after.
From NetBSD PR #3673 by Dave Sainty <David.Sainty@@MCS.VUW.AC.NZ>
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.4 1997/04/16 21:59:04 millert Exp $";
d96 2
a102 1
			int tpdes1 = pdes[1];
@


1.4
log
@Don't modify variables in the child since we vfork()'d to
get there (address space is shared between parent in child
in traditional vfork(2)).  From FreeBSD (dyson).
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.3 1996/08/19 08:25:20 tholo Exp $";
d88 7
d96 1
a106 1
			(void) close(pdes[0]);
d108 1
a112 1
			(void)close(pdes[1]);
a113 6
		/*
		 * because vfork() instead of fork(), must leak FILE *,
		 * but luckily we are terminally headed for an execl()
		 */
		for (cur = pidlist; cur; cur = cur->next)
			close(fileno(cur->fp));
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d38 1
a38 1
static char rcsid[] = "$OpenBSD: popen.c,v 1.11 1995/06/16 07:05:33 jtc Exp $";
d89 9
a97 3
			if (pdes[1] != STDOUT_FILENO) {
				(void)dup2(pdes[1], STDOUT_FILENO);
				(void)close(pdes[1]);
@


1.2
log
@close all pipes in child; netbsd pr#2575
@
text
@a0 2
/*	$NetBSD: popen.c,v 1.11 1995/06/16 07:05:33 jtc Exp $	*/

d38 1
a38 5
#if 0
static char sccsid[] = "@@(#)popen.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$NetBSD: popen.c,v 1.11 1995/06/16 07:05:33 jtc Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d107 6
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
