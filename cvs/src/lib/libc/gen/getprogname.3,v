head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.10
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3;
locks; strict;
comment	@.\" @;


1.5
date	2015.05.05.14.37.20;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	K5MN4OYXtCNw8OFE;

1.4
date	2013.07.31.16.43.27;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.01.17.14.45;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.31.21.18.04;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2013.05.31.20.59.23;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Make argument name consistent and use .Fn rather than .Nm in section 3.
Patch from <Kaspars at Bankovskis dot net>.
@
text
@.\" $OpenBSD: getprogname.3,v 1.4 2013/07/31 16:43:27 deraadt Exp $
.\"
.\" Copyright (c) 2001 Christopher G. Demetriou
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"          This product includes software developed for the
.\"          NetBSD Project.  See http://www.NetBSD.org/ for
.\"          information about NetBSD.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: July 31 2013 $
.Dt GETPROGNAME 3
.Os
.Sh NAME
.Nm getprogname ,
.Nm setprogname
.Nd get/set the name of the current program
.Sh SYNOPSIS
.In stdlib.h
.Ft const char *
.Fn getprogname "void"
.Ft void
.Fn setprogname "const char *name"
.Sh DESCRIPTION
These utility functions get and set the current program's name
as used by various error-reporting functions.
.Pp
.Fn getprogname
returns the name of the current program.
This function is typically useful when generating error messages
or other diagnostic output.
.Pp
The
.Fn setprogname
function sets the name of the program to be the last path component of the
.Fa name
argument.
Internally, only the pointer to the given string is kept as the program name,
so it should not be modified and the storage for the string must remain valid
for the rest of the program's lifetime.
.Sh SEE ALSO
.Xr err 3 ,
.Xr setproctitle 3
.Sh HISTORY
The
.Fn getprogname
and
.Fn setprogname
functions first appeared in
.Ox 5.4
as function-based wrappers around the
.Bx 4.4
.Va __progname
interface.
.Sh CAVEATS
The string returned by
.Fn getprogname
is supplied by the invoking process and should not be trusted by
setuid or setgid programs.
@


1.4
log
@remove complete balony description of the setprogname() interface [as
imported from netbsd] -- like, if maximum portability requires you to
setprogname(), what NAME WOULD YOU PASS IT?  LIKE DUH!!!!!
also add some historical context so that people understand how this
fits into the scheme of things.
ok okan kettenis jmc
@
text
@d1 1
a1 1
.\" $OpenBSD: getprogname.3,v 1.3 2013/06/01 17:14:45 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 1 2013 $
d58 1
a58 1
.Fa progname
d68 1
a68 1
.Nm getprogname
d70 1
a70 1
.Nm setprogname
@


1.3
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: getprogname.3,v 1.2 2013/05/31 21:18:04 tedu Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2013 $
a53 4
If the program name has not been set,
.Fn getprogname
will return
.Dv NULL .
a62 16
.Pp
In
.Ox ,
the name of the program is set by the start-up code that is run before
.Fn main ;
thus,
running
.Fn setprogname
is not necessary.
Programs that desire maximum portability should still call it;
on other operating systems,
these functions may be implemented in a portability library.
Calling
.Fn setprogname
allows the aforementioned library to learn the program name without
modifications to the start-up code.
d72 5
a76 1
.Ox 5.4 .
@


1.2
log
@minor tweaks
@
text
@d1 1
a1 1
.\" $OpenBSD: getprogname.3,v 1.1 2013/05/31 20:59:23 ajacoutot Exp $
d77 1
a77 1
on another operating system,
d91 1
a91 1
function calls appeared in
d93 1
a93 1
.Sh CAVEAT
@


1.1
log
@Add getprogname() and setprogname() to ease slackers^porters' work.
Man page adapted from FreeBSD and NetBSD.

Bump libc minor now (there will be more upcoming changes).

input from tedu@@
get it in deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD$
d33 1
a33 1
.Dd $Mdocdate$
d61 1
a61 1
function sets the name of the program to be the last component of the
d64 3
a66 2
Since a pointer to the given string is kept as the program name,
it should not be modified for the rest of the program's lifetime.
@

