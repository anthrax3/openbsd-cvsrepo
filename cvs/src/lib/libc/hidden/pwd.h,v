head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.6
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.3
date	2015.11.24.22.03.33;	author millert;	state Exp;
branches;
next	1.2;
commitid	LVVvCb2EklWn8nFM;

1.2
date	2015.11.18.16.44.46;	author tedu;	state Exp;
branches;
next	1.1;
commitid	QVmzbQxv343IGoRu;

1.1
date	2015.09.13.15.34.22;	author guenther;	state Exp;
branches;
next	;
commitid	R5aQSXVPELWrYaBM;


desc
@@


1.3
log
@Use reentrant versions of getpw{nam,uid} and getgr{nam,gid} within
libc to avoid reusing the static buffers returned by the non-reentrant
versions.  Since this is inside libc we can use constants for the
buffer sizes instead of having to call sysconf().
OK guenther@@ deraadt@@
@
text
@/*	$OpenBSD: pwd.h,v 1.2 2015/11/18 16:44:46 tedu Exp $	*/
/*
 * Copyright (c) 2015 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _LIBC_PWD_H_
#define	_LIBC_PWD_H_

#include_next <pwd.h>

__BEGIN_HIDDEN_DECLS
int	_bcrypt_autorounds(void);
__END_HIDDEN_DECLS


PROTO_NORMAL(bcrypt);
PROTO_NORMAL(bcrypt_checkpass);
PROTO_DEPRECATED(bcrypt_gensalt);
PROTO_NORMAL(bcrypt_newhash);
PROTO_DEPRECATED(endpwent);
PROTO_DEPRECATED(getpwent);
PROTO_DEPRECATED(getpwnam);
PROTO_NORMAL(getpwnam_r);
PROTO_NORMAL(getpwnam_shadow);
PROTO_DEPRECATED(getpwuid);
PROTO_NORMAL(getpwuid_r);
PROTO_NORMAL(getpwuid_shadow);
PROTO_NORMAL(pw_dup);
PROTO_NORMAL(setpassent);
PROTO_DEPRECATED(setpwent);
PROTO_DEPRECATED(user_from_uid);

#endif /* !_LIBC_PWD_H_ */
@


1.2
log
@Add _shadow variants to the two popular getpw functions (uid and nam).
This version of the function will always open the secure/shadow/master
password files. Soon, the regular variants of these functions will not.
(Intermixing shadow and regular gets a little weird; don't do that.)
Not using struct spwd and getspwnam functions to reduce churn in callers.
Should just be a one line diff in most places.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd.h,v 1.1 2015/09/13 15:34:22 guenther Exp $	*/
d34 1
a34 1
PROTO_NORMAL(getpwnam);
d37 1
a37 1
PROTO_NORMAL(getpwuid);
@


1.1
log
@Wrap <pwd.h> so that calls go direct and the symbols are all weak.
Hide bcrypt_autorounds(), prefixing with an underbar for static builds.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
d39 1
@

