head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.0.4
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2016.09.03.16.25.03;	author tedu;	state Exp;
branches;
next	1.1;
commitid	KRhF60sCd55H0FTx;

1.1
date	2015.09.11.09.18.27;	author guenther;	state Exp;
branches;
next	;
commitid	Ug7ZHdkfaIoV0KLN;


desc
@@


1.2
log
@Add functions for SHA512/256. The standard says you're supposed to start
with different magic numbers, so we need to add some functions instead
of just asking the user to truncate as desired. Sigh.
SHA512 is quite a bit faster than SHA256 on 64 bit CPUs,
but 256 bit hashes are usually quite sufficient. Best of both.
ok deraadt tom
@
text
@/*	$OpenBSD: sha2.h,v 1.1 2015/09/11 09:18:27 guenther Exp $	*/
/*
 * Copyright (c) 2015 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*	$OpenBSD: sha2.h,v 1.1 2015/09/11 09:18:27 guenther Exp $	*/

#ifndef _LIBC_SHA2_H
#define _LIBC_SHA2_H

#include_next <sha2.h>

PROTO_NORMAL(SHA224Data);
PROTO_NORMAL(SHA224End);
PROTO_NORMAL(SHA224File);
PROTO_NORMAL(SHA224FileChunk);
PROTO_NORMAL(SHA224Final);
PROTO_NORMAL(SHA224Init);
PROTO_NORMAL(SHA224Pad);
PROTO_NORMAL(SHA224Transform);
PROTO_NORMAL(SHA224Update);
PROTO_NORMAL(SHA256Data);
PROTO_NORMAL(SHA256End);
PROTO_NORMAL(SHA256File);
PROTO_NORMAL(SHA256FileChunk);
PROTO_NORMAL(SHA256Final);
PROTO_NORMAL(SHA256Init);
PROTO_NORMAL(SHA256Pad);
PROTO_NORMAL(SHA256Transform);
PROTO_NORMAL(SHA256Update);
PROTO_NORMAL(SHA384Data);
PROTO_NORMAL(SHA384End);
PROTO_NORMAL(SHA384File);
PROTO_NORMAL(SHA384FileChunk);
PROTO_NORMAL(SHA384Final);
PROTO_NORMAL(SHA384Init);
PROTO_NORMAL(SHA384Pad);
PROTO_NORMAL(SHA384Transform);
PROTO_NORMAL(SHA384Update);
PROTO_NORMAL(SHA512Data);
PROTO_NORMAL(SHA512End);
PROTO_NORMAL(SHA512File);
PROTO_NORMAL(SHA512FileChunk);
PROTO_NORMAL(SHA512Final);
PROTO_NORMAL(SHA512Init);
PROTO_NORMAL(SHA512Pad);
PROTO_NORMAL(SHA512Transform);
PROTO_NORMAL(SHA512Update);
PROTO_NORMAL(SHA512_256Data);
PROTO_NORMAL(SHA512_256End);
PROTO_NORMAL(SHA512_256File);
PROTO_NORMAL(SHA512_256FileChunk);
PROTO_NORMAL(SHA512_256Final);
PROTO_NORMAL(SHA512_256Init);
PROTO_NORMAL(SHA512_256Pad);
PROTO_NORMAL(SHA512_256Transform);
PROTO_NORMAL(SHA512_256Update);

#endif /* _LIBC_SHA2_H */
@


1.1
log
@Wrap blowfish, sha*, md5, and rmd160 so that internal calls go direct

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d17 1
a17 1
/*	$OpenBSD: sha2.h,v 1.9 2013/04/15 15:54:17 millert Exp $	*/
d60 9
@

