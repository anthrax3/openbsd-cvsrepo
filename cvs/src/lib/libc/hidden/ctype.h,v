head	1.4;
access;
symbols
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2017.09.05.03.16.13;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	ngpX0SPDX30tzjDf;

1.3
date	2016.09.06.19.56.36;	author guenther;	state Exp;
branches;
next	1.2;
commitid	9RwtpEqb4OMZQeN7;

1.2
date	2015.09.19.04.02.21;	author guenther;	state Exp;
branches;
next	1.1;
commitid	xONsWdI5wUyoKz4N;

1.1
date	2015.09.13.11.38.08;	author guenther;	state Exp;
branches;
next	;
commitid	81YcJcMlfY0FkVFC;


desc
@@


1.4
log
@New POSIX xlocale implementation written from scratch.
Complete in the sense that all POSIX *locale(3) and *_l(3) functions
are included, but in OpenBSD, we of course only really care about
LC_CTYPE and we only support ASCII and UTF-8.

With important help from kettenis@@, guenther@@, and jca@@.
Repeated testing in ports bulk builds by naddy@@.
Additional testing by jca@@, sebastia@@, dcoppa@@, and others.
OK kettenis@@ dcoppa@@, and guenther@@ on an earlier version.
Riding guenther@@'s libc/librthread major bump.
@
text
@/*	$OpenBSD: ctype.h,v 1.3 2016/09/06 19:56:36 guenther Exp $	*/
/*
 * Copyright (c) 2015 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _LIBC_CTYPE_H_
#define _LIBC_CTYPE_H_

/* sigh: predeclare and rename the functions which we'll declare inline */
__only_inline int	isalnum(int _c);
__only_inline int	isalpha(int _c);
__only_inline int	iscntrl(int _c);
__only_inline int	isdigit(int _c);
__only_inline int	isgraph(int _c);
__only_inline int	islower(int _c);
__only_inline int	isprint(int _c);
__only_inline int	ispunct(int _c);
__only_inline int	isspace(int _c);
__only_inline int	isupper(int _c);
__only_inline int	isxdigit(int _c);
__only_inline int	tolower(int _c);
__only_inline int	toupper(int _c);
__only_inline int	isblank(int _c);
__only_inline int	isascii(int _c);
__only_inline int	toascii(int _c);
__only_inline int	_tolower(int _c);
__only_inline int	_toupper(int _c);

#ifndef	_LOCALE_T_DEFINED_
#define	_LOCALE_T_DEFINED_
typedef void	*locale_t;
#endif

__only_inline int	isalnum_l(int _c, locale_t _l);
__only_inline int	isalpha_l(int _c, locale_t _l);
__only_inline int	iscntrl_l(int _c, locale_t _l);
__only_inline int	isdigit_l(int _c, locale_t _l);
__only_inline int	isgraph_l(int _c, locale_t _l);
__only_inline int	islower_l(int _c, locale_t _l);
__only_inline int	isprint_l(int _c, locale_t _l);
__only_inline int	ispunct_l(int _c, locale_t _l);
__only_inline int	isspace_l(int _c, locale_t _l);
__only_inline int	isupper_l(int _c, locale_t _l);
__only_inline int	isxdigit_l(int _c, locale_t _l);
__only_inline int	tolower_l(int _c, locale_t _l);
__only_inline int	toupper_l(int _c, locale_t _l);
__only_inline int	isblank_l(int _c, locale_t _l);

PROTO_NORMAL(isalnum);
PROTO_DEPRECATED(isalnum_l);
PROTO_NORMAL(isalpha);
PROTO_DEPRECATED(isalpha_l);
PROTO_NORMAL(isascii);
PROTO_NORMAL(isblank);
PROTO_DEPRECATED(isblank_l);
PROTO_NORMAL(iscntrl);
PROTO_DEPRECATED(iscntrl_l);
PROTO_NORMAL(isdigit);
PROTO_DEPRECATED(isdigit_l);
PROTO_NORMAL(isgraph);
PROTO_DEPRECATED(isgraph_l);
PROTO_NORMAL(islower);
PROTO_DEPRECATED(islower_l);
PROTO_NORMAL(isprint);
PROTO_DEPRECATED(isprint_l);
PROTO_NORMAL(ispunct);
PROTO_DEPRECATED(ispunct_l);
PROTO_NORMAL(isspace);
PROTO_DEPRECATED(isspace_l);
PROTO_NORMAL(isupper);
PROTO_DEPRECATED(isupper_l);
PROTO_NORMAL(isxdigit);
PROTO_DEPRECATED(isxdigit_l);
PROTO_DEPRECATED(toascii);
PROTO_NORMAL(tolower);
PROTO_DEPRECATED(tolower_l);
PROTO_NORMAL(toupper);
PROTO_DEPRECATED(toupper_l);
PROTO_STD_DEPRECATED(_tolower);
PROTO_STD_DEPRECATED(_toupper);

#include_next <ctype.h>

#if 0
extern PROTO_NORMAL(_ctype_);
extern PROTO_NORMAL(_tolower_tab_);
extern PROTO_NORMAL(_toupper_tab_);
#endif

#endif /* !_LIBC_CTYPE_H_ */
@


1.3
log
@Make sure attributes are applied to function declarations before they're
used or defined, as clang isn't as forgiving as gcc.  Also, declare
__flt_rounds() so that libc can build it despire clang providing its own
<float.h>

ok stefan@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.2 2015/09/19 04:02:21 guenther Exp $	*/
d40 21
d62 1
d64 4
d69 1
d71 1
d73 1
d75 1
d77 1
d79 1
d81 1
d83 1
d85 2
d88 1
d90 1
a90 3
PROTO_NORMAL(isblank);
PROTO_NORMAL(isascii);
PROTO_DEPRECATED(toascii);
@


1.2
log
@Don't wrap initialized variables: binutils appears to be mishandling them
on arm and m88k

problems with optind observed by jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.1 2015/09/13 11:38:08 guenther Exp $	*/
d21 19
a39 8
#include_next <ctype.h>

#if 0
extern PROTO_NORMAL(_ctype_);
extern PROTO_NORMAL(_tolower_tab_);
extern PROTO_NORMAL(_toupper_tab_);
#endif

d58 8
@


1.1
log
@Wrap <ctype.h> and <wctype.h> so that calls go direct and the symbols not
in standard C are all weak.
Hide several symbols internal to the implementation
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d23 1
d27 1
@

