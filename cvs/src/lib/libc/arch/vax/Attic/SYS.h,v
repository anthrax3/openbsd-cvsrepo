head	1.21;
access;
symbols
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.20
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.18
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.16
	OPENBSD_5_0:1.14.0.14
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.12
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.10
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.6
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.13.0.20
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.18
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.16
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.14
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2016.03.09.16.28.46;	author deraadt;	state dead;
branches;
next	1.20;
commitid	OSDG2O3Cgeifnf1W;

1.20
date	2015.10.23.04.39.25;	author guenther;	state Exp;
branches;
next	1.19;
commitid	OrVNAJkzchWBNbO0;

1.19
date	2015.09.10.13.29.09;	author guenther;	state Exp;
branches;
next	1.18;
commitid	pYkLasgGFEsgLTME;

1.18
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.17;
commitid	lTMF8Y3C9fQGd6jQ;

1.17
date	2015.04.07.01.27.07;	author guenther;	state Exp;
branches;
next	1.16;
commitid	oQvh7XA3Kql35r0J;

1.16
date	2014.06.04.20.13.49;	author matthew;	state Exp;
branches;
next	1.15;
commitid	CQgbVinZLjc6cr0k;

1.15
date	2013.07.05.21.10.50;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2008.05.21.20.39.30;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.20.18.33;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.05.22.19.55;	author marc;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.05.00.37.05;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.03.23.58.39;	author marc;	state Exp;
branches;
next	1.9;

1.9
date	2002.11.03.20.36.43;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.19.22.12.37;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.20.20.52.10;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.23.21.58.37;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	98.05.14.23.06.56;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.18.18;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.15.02.33.45;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: SYS.h,v 1.20 2015/10/23 04:39:25 guenther Exp $ */
/*	$NetBSD: SYS.h,v 1.4 1997/05/02 18:15:32 kleink Exp $ */

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "DEFS.h"
#include <sys/syscall.h>

#define	_CAT(x,y)	x##y
#define	__ENTRY(p,x)	ENTRY(p##x,0)
#define	__DO_SYSCALL(x)	chmk $ SYS_ ## x

#define	__END(p,x)	END(p##x); _HIDDEN_FALIAS(x, p##x); END(_HIDDEN(x))

#define	__SYSCALL(p,x,y)						\
	99:	jmp _C_LABEL(__cerror);					\
	__ENTRY(p,x);							\
		__DO_SYSCALL(y);					\
		jcs 99b

#define	__PSEUDO(p,x,y)							\
	__ENTRY(p,x);							\
		__DO_SYSCALL(y);					\
		jcs 1f;						\
		ret;							\
	1:	jmp _C_LABEL(__cerror);					\
	__END(p,x)

#define	__PSEUDO_NOERROR(p,x,y)						\
	__ENTRY(p,x);							\
		__DO_SYSCALL(y);					\
		ret;							\
	__END(p,x)

#define	__ALIAS(prefix,name)						\
	WEAK_ALIAS(name,prefix##name);

/*
 * For the thread_safe versions, we prepend _thread_sys_ to the function
 * name so that the 'C' wrapper can go around the real name.
 */
#define	SYSCALL(x)		__ALIAS(_thread_sys_,x)		\
				__SYSCALL(_thread_sys_,x,x)
#define	SYSCALL_END_HIDDEN(x)	__END(_thread_sys_,x)
#define	SYSCALL_END(x)		SYSCALL_END_HIDDEN(x); END(x)
#define	RSYSCALL(x)		__ALIAS(_thread_sys_,x)		\
				__PSEUDO(_thread_sys_,x,x);	\
				END(x)
#define	RSYSCALL_HIDDEN(x)	__PSEUDO(_thread_sys_,x,x)
#define	PSEUDO(x,y)		__ALIAS(_thread_sys_,x)		\
				__PSEUDO(_thread_sys_,x,y);	\
				END(x)
#define	PSEUDO_NOERROR(x,y)	__ALIAS(_thread_sys_,x)		\
				__PSEUDO_NOERROR(_thread_sys_,x,y); \
				END(x)
#define	SYSENTRY_HIDDEN(x)	__ENTRY(_thread_sys_,x)
#define	SYSENTRY(x)		__ALIAS(_thread_sys_,x)		\
				SYSENTRY_HIDDEN(x)
#define	SYSNAME(x)		_CAT(__thread_sys_,x)

	.globl	_C_LABEL(__cerror)
@


1.20
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.19 2015/09/10 13:29:09 guenther Exp $ */
@


1.19
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

alpha, arm, m88k, sh, sparc, and vax assistance miod@@
hppa assistance kettenis@@
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.18 2015/08/31 02:53:57 guenther Exp $ */
d71 2
a72 1
#define	SYSCALL_END(x)		__END(_thread_sys_,x); END(x)
d83 1
d85 1
a85 1
				__ENTRY(_thread_sys_,x)
@


1.18
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.17 2015/04/07 01:27:07 guenther Exp $ */
d40 2
d43 1
a43 1
	err:	jmp _C_LABEL(__cerror);					\
d46 1
a46 1
		jcs err
a48 1
	err:	jmp _C_LABEL(__cerror);					\
d51 4
a54 2
		jcs err;						\
		ret
d59 2
a60 1
		ret
d71 1
d73 2
a74 1
				__PSEUDO(_thread_sys_,x,x)
d77 2
a78 1
				__PSEUDO(_thread_sys_,x,y)
d80 2
a81 1
				__PSEUDO_NOERROR(_thread_sys_,x,y)
@


1.17
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.16 2014/06/04 20:13:49 matthew Exp $ */
d33 1
a33 1
#include <machine/asm.h>
@


1.16
log
@Apply "unifdef -D__STDC__" to libc/arch/*/SYS.h

A while back, pascal@@ converted our system call stubs from using "cpp
| as" to "cc -x assembler-with-cpp", so there's no need to stay
compatible with ancient preprocessor semantics.

ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.15 2013/07/05 21:10:50 miod Exp $ */
d69 1
@


1.15
log
@VAX ELF userland bits. Consists mostly of register prefix additions.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.14 2008/05/21 20:39:30 miod Exp $ */
a35 1
#ifdef __STDC__
a38 5
#else
#define	_CAT(x,y)	x/**/y
#define	__ENTRY(p,x)	ENTRY(p/**/x,0)
#define	__DO_SYSCALL(x)	chmk $ SYS_/**/x
#endif
a57 1
#ifdef	__STDC__
a59 4
#else
#define	__ALIAS(prefix,name)						\
	WEAK_ALIAS(name,prefix/**/name);
#endif
@


1.14
log
@Use _C_LABEL when appropriate.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.13 2003/06/02 20:18:33 millert Exp $ */
d47 1
a47 1
	err:	jmp _C_LABEL(_cerror);					\
d53 1
a53 1
	err:	jmp _C_LABEL(_cerror);					\
d88 1
a88 1
	.globl	_C_LABEL(_cerror)
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.12 2002/11/05 22:19:55 marc Exp $ */
d47 1
a47 1
	err:	jmp __cerror;						\
d53 1
a53 1
	err:	jmp __cerror;						\
d88 1
a88 1
	.globl	__cerror
@


1.12
log
@
thread safe libc -- 2nd try.   OK miod@@, millert@@
Thanks to miod@@ for m68k and vax fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.11 2002/11/05 00:37:05 miod Exp $ */
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@Rename cerror to __cerror and curbrk to __curbrk, to avoid namespace
pollution. Conforming to art@@'s evil plans.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.10 2002/11/03 23:58:39 marc Exp $ */
d68 8
a75 1
#ifdef _THREAD_SAFE
d80 10
a89 5
#define	SYSCALL(x)		__SYSCALL(_thread_sys_,x,x)
#define	RSYSCALL(x)		__PSEUDO(_thread_sys_,x,x)
#define	PSEUDO(x,y)		__PSEUDO(_thread_sys_,x,y)
#define	PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
#define	SYSENTRY(x)		__ENTRY(_thread_sys_,x)
a90 12
#else _THREAD_SAFE
/*
 * The non-threaded library defaults to traditional syscalls where
 * the function name matches the syscall name.
 */
#define	SYSCALL(x)		__SYSCALL(,x,x)
#define	RSYSCALL(x)		__PSEUDO(,x,x)
#define	PSEUDO(x,y)		__PSEUDO(,x,y)
#define	PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(,x,y)
#define	SYSENTRY(x)		__ENTRY(,x)
#define	SYSNAME(x)		_CAT(_,x)
#endif _THREAD_SAFE
@


1.10
log
@back out previous patch.. there are still some vax/m68k issues
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.9 2002/11/03 20:36:43 marc Exp $ */
d51 1
a51 1
	err:	jmp cerror;						\
d57 1
a57 1
	err:	jmp cerror;						\
d92 1
a92 1
	.globl	cerror
@


1.9
log
@
libc changes for thread safety.  Tested on:
alpha (millert@@), i386 (marc@@), m68k (millert@@ and miod@@),
powerpc (drahn@@ and dhartmei@@), sparc (millert@@ and marc@@),
sparc64 (marc@@), and vax (millert@@ and miod@@).
Thanks to millert@@, miod@@, and mickey@@ for fixes along the way.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.8 2002/02/19 22:12:37 millert Exp $ */
d68 1
d79 12
@


1.8
log
@We need to keep K&R compat macros for some ports where the assemnbler is
still using -traditional-cpp.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.7 2002/02/19 19:39:36 millert Exp $ */
a67 1
#ifdef _THREAD_SAFE
a77 12
#else _THREAD_SAFE
/*
 * The non-threaded library defaults to traditional syscalls where
 * the function name matches the syscall name.
 */
#define	SYSCALL(x)		__SYSCALL(,x,x)
#define	RSYSCALL(x)		__PSEUDO(,x,x)
#define	PSEUDO(x,y)		__PSEUDO(,x,y)
#define	PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(,x,y)
#define	SYSENTRY(x)		__ENTRY(,x)
#define	SYSNAME(x)		_CAT(_,x)
#endif _THREAD_SAFE
@


1.7
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.6 2001/09/20 20:52:10 millert Exp $ */
d40 1
d44 5
@


1.6
log
@Add PSEUDO_NOERROR similar to that used by NetBSD.
Some ports were setting errno in PSEUDO and some were not.  Now errno
is set for all in PSEUDO and PSEUDO_NOERROR is provided for the
non-errno case (only used by _exit).

Needs testing on vax and m88k.
XXX - hppa and powerpc still lack a real PSEUDO_NOERROR implementation.
Currently PSEUDO_NOERROR and PSEUDO are the same (so builds don't
break on those platforms).
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.5 2001/08/23 21:58:37 miod Exp $ */
a39 1
#ifdef __STDC__
a42 5
#else
#define	_CAT(x,y)	x/**/y
#define	__ENTRY(p,x)	ENTRY(p/**/x,0)
#define	__DO_SYSCALL(x)	chmk $ SYS_/**/x
#endif
@


1.5
log
@Fix the syscall wrappers name generation in, so that libc_r gets the
correct entry points and programs can link to it.

I would have commited this later, but fgs@@ insisted.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.4 1998/05/14 23:06:56 niklas Exp $ */
d63 5
d73 6
a78 5
#define	SYSCALL(x)	__SYSCALL(_thread_sys_,x,x)
#define	RSYSCALL(x)	__PSEUDO(_thread_sys_,x,x)
#define	PSEUDO(x,y)	__PSEUDO(_thread_sys_,x,y)
#define	SYSENTRY(x)	__ENTRY(_thread_sys_,x)
#define	SYSNAME(x)	_CAT(__thread_sys_,x)
d84 6
a89 5
#define	SYSCALL(x)	__SYSCALL(,x,x)
#define	RSYSCALL(x)	__PSEUDO(,x,x)
#define	PSEUDO(x,y)	__PSEUDO(,x,y)
#define	SYSENTRY(x)	__ENTRY(,x)
#define	SYSNAME(x)	_CAT(_,x)
@


1.4
log
@NetBSD merge
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.3 1996/08/19 08:18:18 tholo Exp $ */
d41 3
a43 1
#define SYSTRAP(x)	chmk $ SYS_ ## x
d45 3
a47 1
#define SYSTRAP(x)	chmk $ SYS_/**/x
d50 12
a61 3
#define _SYSCALL_NOERROR(x,y)						\
	ENTRY(x,0);							\
	SYSTRAP(y)
d63 21
a83 26
#define _SYSCALL(x,y)							\
	err: jmp cerror;						\
	_SYSCALL_NOERROR(x,y);						\
	jcs err

#define SYSCALL_NOERROR(x)						\
	_SYSCALL_NOERROR(x,x)

#define SYSCALL(x)							\
	_SYSCALL(x,x)

#define PSEUDO_NOERROR(x,y)						\
	_SYSCALL_NOERROR(x,y);						\
	ret

#define PSEUDO(x,y)							\
	_SYSCALL(x,y);							\
	ret

#define RSYSCALL_NOERROR(x)						\
	PSEUDO_NOERROR(x,x)

#define RSYSCALL(x)							\
	PSEUDO(x,x)

#define	ASMSTR		.asciz
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 3
a3 1
/*	$OpenBSD: SYS.h,v 1.2 1995/12/12 15:21:31 ragge Exp $ */
d37 1
d40 2
a41 4
#ifndef __STDC__
#ifdef PROF
#define	ENTRY(x)	.globl _/**/x; .align 2; _/**/x/**/: .word 0; \
			.data; 1:; .long 0; .text; moval 1b,r0; jsb mcount
d43 17
a59 6
#define	ENTRY(x)	.globl _/**/x; .align 2; _/**/x/**/: .word 0
#endif PROF
#define	SYSCALL(x)	err: jmp cerror; ENTRY(x); chmk $ SYS_/**/x; jcs err
#define	RSYSCALL(x)	SYSCALL(x); ret
#define	PSEUDO(x,y)	ENTRY(x); chmk $ SYS_/**/y; ret
#define	CALL(x,y)	calls $/**/x, _/**/y
d61 10
a70 1
#else
d72 2
a73 11
#ifdef PROF
#define	ENTRY(x)	.globl _ ## x; .align 2; _ ## x ## : .word 0; \
			.data; 1:; .long 0; .text; moval 1b,r0; jsb mcount
#else
#define	ENTRY(x)	.globl _ ## x; .align 2; _ ## x ## : .word 0
#endif PROF
#define	SYSCALL(x)	err: jmp cerror; ENTRY(x); chmk $ SYS_ ## x; jcs err
#define	RSYSCALL(x)	SYSCALL(x); ret
#define	PSEUDO(x,y)	ENTRY(x); chmk $ SYS_ ## y; ret
#define	CALL(x,y)	calls $ ## x, _ ## y
#endif
@


1.2
log
@from ragge; Add defs to understand K&R cpp
@
text
@d1 1
a1 1
/*	$NetBSD: SYS.h,v 1.2 1995/12/12 15:21:31 ragge Exp $ */
a32 2
 *
 *	@@(#)SYS.h	8.1 (Berkeley) 6/4/93
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: SYS.h,v 1.1 1995/04/17 12:23:34 ragge Exp $ */
d39 14
d63 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
