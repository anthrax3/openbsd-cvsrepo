head	1.7;
access;
symbols
	OPENBSD_5_9:1.6.0.10
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.12
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.8
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.10
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.03.09.16.28.46;	author deraadt;	state dead;
branches;
next	1.6;
commitid	OSDG2O3Cgeifnf1W;

1.6
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2012.12.05.23.19.59;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.02.19.27.34;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.10.01.15.02;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.09.19.52.34;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.24.09.31.07;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: isnormal.c,v 1.6 2013/03/28 18:09:38 martynas Exp $	*/
/*
 * Copyright (c) 2008 Martynas Venckus <martynas@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <machine/vaxfp.h>
#include <math.h>

int
__isnormal(double d)
{
	struct vax_d_floating *p = (struct vax_d_floating *)&d;

	return (p->dflt_exp != 0);
}

int
__isnormalf(float f)
{
	struct vax_f_floating *p = (struct vax_f_floating *)&f;

	return (p->fflt_exp != 0);
}

__strong_alias(__isnormall, __isnormal);
@


1.6
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: isnormal.c,v 1.5 2012/12/05 23:19:59 deraadt Exp $	*/
@


1.5
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: isnormal.c,v 1.4 2011/07/02 19:27:34 martynas Exp $	*/
a17 2
/* LINTLIBRARY */

d38 1
a38 6
#ifdef	lint
/* PROTOLIB1 */
int __isnormall(long double);
#else	/* lint */
__weak_alias(__isnormall, __isnormal);
#endif	/* lint */
@


1.4
log
@Trick lint into recording the right prototypes in the llib-lc.ln
database on the vax, similarly like has been done in gen.
@
text
@d1 1
a1 1
/*	$OpenBSD: isnormal.c,v 1.3 2008/12/10 01:15:02 martynas Exp $	*/
d20 1
a20 1
#include <sys/cdefs.h>
@


1.3
log
@use sys/cdefs.h;  pointed out by theo
@
text
@d1 1
a1 1
/*	$OpenBSD: isnormal.c,v 1.2 2008/12/09 19:52:34 martynas Exp $	*/
d18 2
d40 4
a43 1
#ifdef __weak_alias
d45 1
a45 1
#endif /* __weak_alias */
@


1.2
log
@- add long double signbit
- make long double versions weak aliases to double versions,
on archs where long doubles are 64 bits
- no need to have two finites.  finite() and finitef() are
non-standard 3BSD obsolete versions of isfinite.  remove
from libm.  make them weak_alias in libc to __isfinite and
__isfinitef instead.  similarly make 3BSD obsolete versions
of isinf, isinff, isnan, isnanf weak_aliases to C99's
__isinf, __isinff, __isnan, __isnanf
- bump major
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: isnormal.c,v 1.1 2008/07/24 09:31:07 martynas Exp $	*/
d18 1
a18 1
#include <machine/cdefs.h>
@


1.1
log
@- move isinf, isnan dups to gen, since most is ieee 754
- is{inf,nan} should be macros for real-floating, so rename to
__is{inf,nan}, per C99
- implement C99 __fpclassify(), __fpclassifyf(), __isfinite(),
__isfinitef(), __isnormal(), __isnormalf(), __signbit(), __signbitf()
- long functions added, but not yet enabled, till ieee.h is fixed
- implement vax equivalents of the functions
- reimplement isinff, isnanf in a better way, and move to libc
- add qnan bytes for all archs
- bump major
man pages will follow
ok millert@@.  arm bits looked over by drahn@@
discussed w/ theo, who showed the right direction, to put these
functions in libc
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d18 1
d20 1
d37 4
@

