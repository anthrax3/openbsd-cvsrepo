head	1.11;
access;
symbols
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.12
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.8
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.26
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.24
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.22
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.11
date	2016.03.09.16.28.46;	author deraadt;	state dead;
branches;
next	1.10;
commitid	OSDG2O3Cgeifnf1W;

1.10
date	2015.09.13.07.36.58;	author guenther;	state Exp;
branches;
next	1.9;
commitid	lKiiBbVqMp5OO6rf;

1.9
date	2013.07.05.21.10.50;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.22.21.13.30;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.07.16.40.15;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.18.33;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.06.07.13.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.23.21.58.41;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.18.07.29.04;	author bjc;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.18.29;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/* $OpenBSD: setjmp.S,v 1.10 2015/09/13 07:36:58 guenther Exp $ */
/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * C library -- setjmp, longjmp
 *
 *	longjmp(a,v)
 * will generate a "return(v)" from
 * the last call to
 *	setjmp(a)
 * by restoring registers from the stack,
 * and a struct sigcontext, see <signal.h>
 */

#include "SYS.h"

ENTRY(setjmp, R6)
	movl	4(%ap),%r6		# construct sigcontext
	subl2	$12,%sp			# space for current struct sigaltstack
	pushl	%sp			# get current values
	pushl	$0			# no new values
	calls	$4,_C_LABEL(sigaltstack)# pop args plus signal stack value
	movl	(%sp)+,(%r6)+		# save onsigstack status of caller
	pushl	$0
	calls	$1,_C_LABEL(_libc_sigblock)	# get signal mask
	movl	%r0,(%r6)+		# save signal mask of caller
	movl	(%ap),%r0
	moval	4(%ap)[%r0],(%r6)+	# save sp of caller
	movl	12(%fp),(%r6)+		# save frame pointer of caller
	movl	8(%fp),(%r6)+		# save argument pointer of caller
	movl	16(%fp),(%r6)+		# save pc of caller
	movpsl	(%r6)			# save psl of caller
	movw	4(%fp),(%r6)
	clrl	%r0
	ret

ENTRY(longjmp, R2)
	movl	8(%ap),%r0		# return(v)
	movl	4(%ap),%r1		# fetch buffer
	tstl	12(%r1)
	beql	botch
loop:
	cmpl	12(%r1),%fp		# are we there yet?
	beql	done
	blssu	botch
	moval	20(%fp),%r2
	blbc	6(%fp),1f		# was r0 saved?
	movl	%r0,(%r2)+
1:
	bbc	$1,6(%fp),2f		# was r1 saved?
	movl	%r1,(%r2)
2:
	movl	$loop,16(%fp)
	ret				# pop another frame

done:
	pushl	%r1			# pointer to sigcontext
	calls	$1,_C_LABEL(sigreturn)	# restore previous context
					# we should never return
botch:
	calls	$0,_C_LABEL(longjmperror)
	halt
@


1.10
log
@Do provide hidden _libc_* aliases for sig{block,setmask} and use them in
the ASM *setjmp implementations.
Skip the PLT when calling them on amd64 (other archs to do this after testing)

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: setjmp.S,v 1.9 2013/07/05 21:10:50 miod Exp $ */
@


1.9
log
@VAX ELF userland bits. Consists mostly of register prefix additions.
@
text
@d1 1
a1 1
/* $OpenBSD: setjmp.S,v 1.8 2011/11/22 21:13:30 guenther Exp $ */
d52 1
a52 1
	calls	$1,_C_LABEL(sigblock)	# get signal mask
@


1.8
log
@sigstack() is long dead, and the compat sigaltstack syscall is gone too.
Correct the namespace protections for sigreturn(), sigwait(), and psignal()

ok millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: setjmp.S,v 1.7 2005/08/07 16:40:15 espie Exp $ */
d45 3
a47 3
	movl	4(ap),r6		# construct sigcontext
	subl2	$12,sp			# space for current struct sigaltstack
	pushl	sp			# get current values
d50 1
a50 1
	movl	(sp)+,(r6)+		# save onsigstack status of caller
d53 9
a61 9
	movl	r0,(r6)+		# save signal mask of caller
	movl	(ap),r0
	moval	4(ap)[r0],(r6)+		# save sp of caller
	movl	12(fp),(r6)+		# save frame pointer of caller
	movl	8(fp),(r6)+		# save argument pointer of caller
	movl	16(fp),(r6)+		# save pc of caller
	movpsl	(r6)			# save psl of caller
	movw	4(fp),(r6)
	clrl	r0
d65 3
a67 3
	movl	8(ap),r0		# return(v)
	movl	4(ap),r1		# fetch buffer
	tstl	12(r1)
d70 1
a70 1
	cmpl	12(r1),fp		# are we there yet?
d73 3
a75 3
	moval	20(fp),r2
	blbc	6(fp),1f		# was r0 saved?
	movl	r0,(r2)+
d77 2
a78 2
	bbc	$1,6(fp),2f		# was r1 saved?
	movl	r1,(r2)
d80 1
a80 1
	movl	$loop,16(fp)
d84 1
a84 1
	pushl	r1			# pointer to sigcontext
@


1.7
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d46 1
a46 1
	subl2	$12,sp			# space for current struct sigstack
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a29 5

#if defined(LIBC_SCCS)
	.text
	.asciz "$OpenBSD: setjmp.S,v 1.5 2002/11/06 07:13:58 millert Exp $"
#endif /* LIBC_SCCS */
@


1.5
log
@From NetBSD;  Use _C_LABEL, not SYSNAME to call sigaltstack, sigblock,
sigreturn.  sigblock has not been a syscall since 4.3BSD and using
SYSCALL directly seems like a bad idea in general.
Fixes a build problem on vax.  OK miod@@
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d32 1
a32 1
	.asciz "$OpenBSD: setjmp.S,v 1.4 2001/08/23 21:58:41 miod Exp $"
@


1.4
log
@Fix the syscall wrappers name generation in, so that libc_r gets the
correct entry points and programs can link to it.

I would have commited this later, but fgs@@ insisted.
@
text
@d36 1
a36 1
	.asciz "$OpenBSD: setjmp.S,v 1.3 2001/03/18 07:29:04 bjc Exp $"
d57 1
a57 1
	calls	$4,SYSNAME(sigaltstack)# pop args plus signal stack value
d60 1
a60 1
	calls	$1,SYSNAME(sigblock)	# get signal mask
d93 1
a93 1
	calls	$1,SYSNAME(sigreturn)	# restore previous context
d96 1
a96 1
	calls	$0,_longjmperror
@


1.3
log
@Fix lots of register masks.
@
text
@d36 1
a36 1
	.asciz "$OpenBSD: setjmp.S,v 1.2 1996/08/19 08:18:29 tholo Exp $"
d50 1
a50 1
#include "DEFS.h"
d57 1
a57 1
	calls	$4,_sigaltstack		# pop args plus signal stack value
d60 1
a60 1
	calls	$1,_sigblock		# get signal mask
d93 1
a93 1
	calls	$1,_sigreturn		# restore previous context
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d36 1
a36 1
	.asciz "$OpenBSD: setjmp.S,v 1.1 1995/04/17 12:23:46 ragge Exp $"
d72 1
a72 1
ENTRY(longjmp, 0)
@


1.1
log
@Initial revision
@
text
@d34 4
a37 4
#if defined(LIBC_SCCS) && !defined(lint)
	/* .asciz "@@(#)setjmp.s	8.1 (Berkeley) 6/4/93" */
	.asciz "$NetBSD: setjmp.S,v 1.1 1995/04/17 12:23:46 ragge Exp $"
#endif /* LIBC_SCCS and not lint */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
