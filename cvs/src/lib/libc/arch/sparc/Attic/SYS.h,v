head	1.22;
access;
symbols
	OPENBSD_6_0:1.21.0.2
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.8
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.4
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.13.0.38
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.36
	OPENBSD_5_0:1.13.0.34
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.32
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.30
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.26
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.28
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.24
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.22
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.20
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.18
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.16
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.14
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2016.09.01.09.26.04;	author tedu;	state dead;
branches;
next	1.21;
commitid	G8ZQXbpsm4TQ3H72;

1.21
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.20;
commitid	d9R7VGw9CHTkwXE1;

1.20
date	2015.10.23.04.39.25;	author guenther;	state Exp;
branches;
next	1.19;
commitid	OrVNAJkzchWBNbO0;

1.19
date	2015.09.10.13.29.09;	author guenther;	state Exp;
branches;
next	1.18;
commitid	pYkLasgGFEsgLTME;

1.18
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.17;
commitid	lTMF8Y3C9fQGd6jQ;

1.17
date	2015.04.07.01.27.07;	author guenther;	state Exp;
branches;
next	1.16;
commitid	oQvh7XA3Kql35r0J;

1.16
date	2014.06.04.20.13.49;	author matthew;	state Exp;
branches;
next	1.15;
commitid	CQgbVinZLjc6cr0k;

1.15
date	2012.09.04.19.08.13;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2012.08.22.17.19.35;	author pascal;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.20.18.32;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.11.23.01.30;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.19.22.12.37;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.20.20.52.10;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.12.12.03.01;	author heko;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.17.17.44.38;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.16.14.25.04;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.11.01.49.43;	author d;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.04.06.12.39;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.06.06.12.02;	author d;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.17.23;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@retire the sparc library code
@
text
@/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: SYS.h,v 1.21 2016/05/07 19:05:22 guenther Exp $
 */

#include "DEFS.h"
#include <sys/syscall.h>
#include <machine/trap.h>

/* offsetof(struct tib, tib_errno) - offsetof(struct tib, __tib_tcb) */
#define	TCB_OFFSET_ERRNO	12

#define _CAT(x,y) x##y

#define __ENTRY(p,x)		ENTRY(_CAT(p,x)) ; .weak x ; x = _CAT(p,x)
#define __ENTRY_HIDDEN(p,x)	ENTRY(_CAT(p,x))

#define __END_HIDDEN(p,x)	END(_CAT(p,x));				\
				_HIDDEN_FALIAS(x, _CAT(p,x));		\
				END(_HIDDEN(x))
#define __END(p,x)		__END_HIDDEN(p,x); END(x)

/*
 * ERROR sets the thread's errno and returns
 */
#define	ERROR()						\
	st	%o0, [%g7 + TCB_OFFSET_ERRNO];		\
	mov	-1, %o0;				\
	retl;						\
	 mov	-1, %o1

/*
 * SYSCALL is used when further action must be taken before returning.
 * Note that it adds a `nop' over what we could do, if we only knew what
 * came at label 1....
 */
#define	__SYSCALL(p,x) \
	__ENTRY(p,x); mov _CAT(SYS_,x),%g1; t ST_SYSCALL; bcc 1f; nop; ERROR(); 1:
#define	__SYSCALL_HIDDEN(p,x) \
	__ENTRY_HIDDEN(p,x); mov _CAT(SYS_,x),%g1; t ST_SYSCALL; bcc 1f; nop; ERROR(); 1:

/*
 * RSYSCALL is used when the system call should just return.  Here
 * we use the SYSCALL_G2RFLAG to put the `success' return address in %g2
 * and avoid a branch.
 */
#define	__RSYSCALL(p,x) \
	__ENTRY(p,x); mov (_CAT(SYS_,x))|SYSCALL_G2RFLAG,%g1; add %o7,8,%g2; \
	t ST_SYSCALL; ERROR(); __END(p,x)

/*
 * PSEUDO(x,y) is like RSYSCALL(y) except that the name is x.
 */
#define	__PSEUDO(p,x,y) \
	__ENTRY(p,x); mov (_CAT(SYS_,y))|SYSCALL_G2RFLAG,%g1; add %o7,8,%g2; \
	t ST_SYSCALL; ERROR(); __END(p,x)

/*
 * PSEUDO_NOERROR(x,y) is like PSEUDO(x,y) except that errno is not set.
 */
#define	__PSEUDO_NOERROR(p,x,y) \
	__ENTRY(p,x); mov (_CAT(SYS_,y))|SYSCALL_G2RFLAG,%g1; add %o7,8,%g2; \
	t ST_SYSCALL; __END(p,x)

# define SYSCALL(x)		__SYSCALL(_thread_sys_,x)
# define RSYSCALL(x)		__RSYSCALL(_thread_sys_,x)
# define RSYSCALL_HIDDEN(x)	__RSYSCALL(_thread_sys_,x)
# define PSEUDO(x,y)		__PSEUDO(_thread_sys_,x,y)
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
# define SYSENTRY(x)		__ENTRY(_thread_sys_,x)
# define SYSENTRY_HIDDEN(x)	__ENTRY_HIDDEN(_thread_sys_,x)
# define SYSCALL_END(x)		__END(_thread_sys_,x)
# define SYSCALL_END_HIDDEN(x)	__END_HIDDEN(_thread_sys_,x)
@


1.21
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.20 2015/10/23 04:39:25 guenther Exp $
@


1.20
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.19 2015/09/10 13:29:09 guenther Exp $
d40 3
d54 1
a54 1
 * ERROR branches to cerror.
d56 5
a60 19
#ifdef __PIC__
#if __PIC__ == 1
#define	ERROR() \
	PIC_PROLOGUE(%g1,%g2); \
	ld [%g1+_C_LABEL(__cerror)],%g2; jmp %g2; nop
#else /* __PIC__ == 2 */
#define	ERROR() \
	PIC_PROLOGUE(%g1,%g2); \
	sethi %hi(_C_LABEL(__cerror)),%g2; \
	or %g2,%lo(_C_LABEL(__cerror)),%g2; \
	ld [%g1+%g2],%g2; jmp %g2; nop
#endif
#else
#define	ERROR() \
	sethi %hi(_C_LABEL(__cerror)),%g1; \
	or %lo(_C_LABEL(__cerror)),%g1,%g1; \
	jmp %g1; \
	nop
#endif
a103 2

	.globl	_C_LABEL(__cerror)
@


1.19
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

alpha, arm, m88k, sh, sparc, and vax assistance miod@@
hppa assistance kettenis@@
ok deraadt@@ miod@@
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.18 2015/08/31 02:53:57 guenther Exp $
d112 1
d114 1
@


1.18
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.17 2015/04/07 01:27:07 guenther Exp $
d45 5
d90 1
a90 1
	t ST_SYSCALL; ERROR()
d97 1
a97 1
	t ST_SYSCALL; ERROR()
d104 1
a104 1
	t ST_SYSCALL
d112 1
@


1.17
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.16 2014/06/04 20:13:49 matthew Exp $
d36 1
a36 1
#include <machine/asm.h>
@


1.16
log
@Apply "unifdef -D__STDC__" to libc/arch/*/SYS.h

A while back, pascal@@ converted our system call stubs from using "cpp
| as" to "cc -x assembler-with-cpp", so there's no need to stay
compatible with ancient preprocessor semantics.

ok miod
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.15 2012/09/04 19:08:13 deraadt Exp $
d42 2
a43 1
#define __ENTRY(p,x) ENTRY(_CAT(p,x)) ; .weak x ; x = _CAT(p,x)
d75 2
d103 1
@


1.15
log
@Add support for -fPIC
ok kettenis
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.14 2012/08/22 17:19:35 pascal Exp $
a39 1
#ifdef __STDC__
a40 3
#else
#define _CAT(x,y) x/**/y
#endif
@


1.14
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.13 2003/06/02 20:18:32 millert Exp $
d52 1
d56 7
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.12 2002/08/11 23:01:30 art Exp $
d51 1
a51 1
#ifdef PIC
@


1.12
log
@Two touches to make this work with ELF.
 - use _C_LABEL(__cerror) and not cerror to avoid polluting the name space.
 - Use weak symbols for libc_r syscalls.
@
text
@d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.11 2002/02/19 22:12:37 millert Exp $
@


1.11
log
@We need to keep K&R compat macros for some ports where the assemnbler is
still using -traditional-cpp.
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.10 2002/02/19 19:39:36 millert Exp $
a45 1
#define __ENTRY(p,x) ENTRY(p##x)
a47 1
#define __ENTRY(p,x) ENTRY(p/**/x)
d50 2
d53 1
a53 2
 * ERROR branches to cerror.  This is done with a macro so that I can
 * change it to be position independent later, if need be.
d58 1
a58 1
	ld [%g1+cerror],%g2; jmp %g2; nop
d61 4
a64 1
	sethi %hi(cerror),%g1; or %lo(cerror),%g1,%g1; jmp %g1; nop
a97 5
#ifdef _THREAD_SAFE
/*
 * For the thread_safe versions, we prepend _thread_sys_ to the function
 * name so that the 'C' wrapper can go around the real name.
 */
d103 2
a104 12
#else /* _THREAD_SAFE */
/*
 * The non-threaded library defaults to traditional syscalls where
 * the function name matches the syscall name.
 */
# define SYSCALL(x)		__SYSCALL(,x)
# define RSYSCALL(x)		__RSYSCALL(,x)
# define PSEUDO(x,y)		__PSEUDO(,x,y)
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(,x,y)
# define SYSENTRY(x)		__ENTRY(,x)
#endif /* _THREAD_SAFE */
	.globl	cerror
@


1.10
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.9 2001/09/20 20:52:10 millert Exp $
d44 1
d47 4
@


1.9
log
@Add PSEUDO_NOERROR similar to that used by NetBSD.
Some ports were setting errno in PSEUDO and some were not.  Now errno
is set for all in PSEUDO and PSEUDO_NOERROR is provided for the
non-errno case (only used by _exit).

Needs testing on vax and m88k.
XXX - hppa and powerpc still lack a real PSEUDO_NOERROR implementation.
Currently PSEUDO_NOERROR and PSEUDO are the same (so builds don't
break on those platforms).
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.8 2001/08/12 12:03:01 heko Exp $
a43 1
#ifdef __STDC__
a45 4
#else
#define _CAT(x,y) x/**/y
#define __ENTRY(p,x) ENTRY(p/**/x)
#endif
@


1.8
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.7 2000/10/17 17:44:38 deraadt Exp $
d89 7
d101 5
a105 4
# define SYSCALL(x)	__SYSCALL(_thread_sys_,x)
# define RSYSCALL(x)	__RSYSCALL(_thread_sys_,x)
# define PSEUDO(x,y)	__PSEUDO(_thread_sys_,x,y)
# define SYSENTRY(x)	__ENTRY(_thread_sys_,x)
d111 5
a115 4
# define SYSCALL(x)	__SYSCALL(,x)
# define RSYSCALL(x)	__RSYSCALL(,x)
# define PSEUDO(x,y)	__PSEUDO(,x,y)
# define SYSENTRY(x)	__ENTRY(,x)
@


1.7
log
@damn it, i have had it with this untested weak shit
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.5 2000/10/11 01:49:43 d Exp $
d98 1
a98 1
#else _THREAD_SAFE
d107 1
a107 1
#endif _THREAD_SAFE
@


1.6
log
@re-add weak sparc support; d@@
@
text
@d46 1
a46 4
#define __ENTRY(p,x) \
		.weak _C_LABEL(x); \
		_C_LABEL(x) = _C_LABEL(p##x); \
		ENTRY(p##x)
d49 1
a49 4
#define __ENTRY(p,x) \
		.weak _C_LABEL(x); \
		_C_LABEL(x) = _C_LABEL(p/**/x); \
		ENTRY(p/**/x)
d89 1
d98 10
@


1.5
log
@back out weak symbols; deraadt@@
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.3 1999/01/06 06:12:02 d Exp $
d46 4
a49 1
#define __ENTRY(p,x) ENTRY(p##x)
d52 4
a55 1
#define __ENTRY(p,x) ENTRY(p/**/x)
a94 1
#ifdef _THREAD_SAFE
a102 10
#else _THREAD_SAFE
/*
 * The non-threaded library defaults to traditional syscalls where
 * the function name matches the syscall name.
 */
# define SYSCALL(x)	__SYSCALL(,x)
# define RSYSCALL(x)	__RSYSCALL(,x)
# define PSEUDO(x,y)	__PSEUDO(,x,y)
# define SYSENTRY(x)	__ENTRY(,x)
#endif _THREAD_SAFE
@


1.4
log
@use weak symbols in sparc's libc
@
text
@d45 2
a46 1
#define __CONCAT(x,y) x##y
d48 2
a49 1
#define __CONCAT(x,y) x/**/y
d57 6
a62 11
#define	ERROR()						\
	PIC_PROLOGUE(%g1,%g2);				\
	ld [%g1+cerror],%g2;				\
	jmp %g2;					\
	nop
#else /* !PIC */
#define	ERROR()						\
	sethi %hi(cerror),%g1;				\
	or %lo(cerror),%g1,%g1;				\
	jmp %g1;					\
	nop
a65 12
 * Syscall symbols are weakened for easy replacement by
 * the user thread library.
 */
#define _THREAD_SYS(x)		__CONCAT(_thread_sys_,x)
#define _THREAD_SYS_LABEL(x)	__CONCAT(_C_LABEL(_thread_sys_),x)
#define SYSENTRY(x)					\
	.weak _C_LABEL(x);				\
	_C_LABEL(x) = _THREAD_SYS_LABEL(x);		\
	 .type _C_LABEL(x),@@function;			\
	_ENTRY(_THREAD_SYS_LABEL(x))

/*
d70 2
a71 8
#define	SYSCALL(x)					\
    SYSENTRY(x);					\
	mov __CONCAT(SYS_,x),%g1;			\
	t ST_SYSCALL;					\
	bcc 1f;						\
	nop;						\
	ERROR();					\
    1:
d78 3
a80 6
#define	RSYSCALL(x)					\
    SYSENTRY(x);					\
	mov (__CONCAT(SYS_,x))|SYSCALL_G2RFLAG,%g1;	\
	add %o7,8,%g2;					\
	t ST_SYSCALL;					\
	ERROR()
d85 3
a87 6
#define	PSEUDO(x,y)					\
    SYSENTRY(x);					\
	mov (__CONCAT(SYS_,y))|SYSCALL_G2RFLAG,%g1;	\
	add %o7,8,%g2;					\
	t ST_SYSCALL;					\
	ERROR()
d89 19
@


1.3
log
@_THREAD_SAFE; nominal testing by fries
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.2 1996/08/19 08:17:23 tholo Exp $
d45 1
a45 2
#define _CAT(x,y) x##y
#define __ENTRY(p,x) ENTRY(p##x)
d47 1
a47 2
#define _CAT(x,y) x/**/y
#define __ENTRY(p,x) ENTRY(p/**/x)
d55 11
a65 6
#define	ERROR() \
	PIC_PROLOGUE(%g1,%g2); \
	ld [%g1+cerror],%g2; jmp %g2; nop
#else
#define	ERROR() \
	sethi %hi(cerror),%g1; or %lo(cerror),%g1,%g1; jmp %g1; nop
d69 12
d85 8
a92 2
#define	__SYSCALL(p,x) \
	__ENTRY(p,x); mov _CAT(SYS_,x),%g1; t ST_SYSCALL; bcc 1f; nop; ERROR(); 1:
d99 6
a104 3
#define	__RSYSCALL(p,x) \
	__ENTRY(p,x); mov (_CAT(SYS_,x))|SYSCALL_G2RFLAG,%g1; add %o7,8,%g2; \
	t ST_SYSCALL; ERROR()
d109 6
a114 3
#define	__PSEUDO(p,x,y) \
	__ENTRY(p,x); mov (_CAT(SYS_,y))|SYSCALL_G2RFLAG,%g1; add %o7,8,%g2; \
	t ST_SYSCALL; ERROR()
a115 19
#ifdef _THREAD_SAFE
/*
 * For the thread_safe versions, we prepend _thread_sys_ to the function
 * name so that the 'C' wrapper can go around the real name.
 */
# define SYSCALL(x)	__SYSCALL(_thread_sys_,x)
# define RSYSCALL(x)	__RSYSCALL(_thread_sys_,x)
# define PSEUDO(x,y)	__PSEUDO(_thread_sys_,x,y)
# define SYSENTRY(x)	__ENTRY(_thread_sys_,x)
#else _THREAD_SAFE
/*
 * The non-threaded library defaults to traditional syscalls where
 * the function name matches the syscall name.
 */
# define SYSCALL(x)	__SYSCALL(,x)
# define RSYSCALL(x)	__RSYSCALL(,x)
# define PSEUDO(x,y)	__PSEUDO(,x,y)
# define SYSENTRY(x)	__ENTRY(,x)
#endif _THREAD_SAFE
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.1.1.1 1995/10/18 08:41:39 deraadt Exp $
d46 1
d49 1
d70 2
a71 2
#define	SYSCALL(x) \
	ENTRY(x); mov _CAT(SYS_,x),%g1; t ST_SYSCALL; bcc 1f; nop; ERROR(); 1:
d78 2
a79 2
#define	RSYSCALL(x) \
	ENTRY(x); mov (_CAT(SYS_,x))|SYSCALL_G2RFLAG,%g1; add %o7,8,%g2; \
d85 2
a86 2
#define	PSEUDO(x,y) \
	ENTRY(x); mov (_CAT(SYS_,y))|SYSCALL_G2RFLAG,%g1; add %o7,8,%g2; \
d89 19
@


1.1
log
@Initial revision
@
text
@d37 1
a37 4
 *	@@(#)SYS.h	8.1 (Berkeley) 6/4/93
 *
 *	from: Header: SYS.h,v 1.2 92/07/03 18:57:00 torek Exp
 *	$Id: SYS.h,v 1.3 1994/02/10 20:15:31 pk Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
