head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.5.0.24
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.22
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.18
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.20
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.16
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.9
date	2014.06.07.01.41.26;	author tobiasu;	state Exp;
branches;
next	1.8;
commitid	4rZpv87UWM0lcwN3;

1.8
date	2012.08.22.17.19.35;	author pascal;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.08.22.28.33;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.08.19.21.42;	author martynas;	state dead;
branches;
next	1.5;

1.5
date	2005.08.07.16.40.15;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.20.18.32;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.22.19.57.57;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.17.41;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Fix modf() on sparc

For large integral values, modf returned uninitialized data in iptr since 1992.
Found while debugging python segfaults.

ok miod
@
text
@/* $OpenBSD: modf.S,v 1.8 2012/08/22 17:19:35 pascal Exp $ */
/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "DEFS.h"
#include <machine/fsr.h>

/*
 * double modf(double val, double *iptr)
 *
 * Returns the fractional part of `val', storing the integer part of
 * `val' in *iptr.  Both *iptr and the return value have the same sign
 * as `val'.
 *
 * Method:
 *
 * We use the fpu's normalization hardware to compute the integer portion
 * of the double precision argument.  Sun IEEE double precision numbers
 * have 52 bits of mantissa, 11 bits of exponent, and one bit of sign,
 * with the sign occupying bit 31 of word 0, and the exponent bits 30:20
 * of word 0.  Thus, values >= 2^52 are by definition integers.
 *
 * If we take a value that is in the range [+0..2^52) and add 2^52, all
 * of the fractional bits fall out and all of the integer bits are summed
 * with 2^52.  If we then subtract 2^52, we get those integer bits back.
 * This must be done with rounding set to `towards 0' or `towards -inf'.
 * `Toward -inf' fails when the value is 0 (we get -0 back)....
 *
 * Note that this method will work anywhere, but is machine dependent in
 * various aspects.
 *
 * Stack usage:
 *	4@@[%fp - 4]	saved %fsr
 *	4@@[%fp - 8]	new %fsr with rounding set to `towards 0'
 *	8@@[%fp - 16]	space for moving between %i and %f registers
 * Register usage:
 *	%i0%i1		double val;
 *	%l0		scratch
 *	%l1		sign bit (0x80000000)
 *	%i2		double *iptr;
 *	%f2:f3		`magic number' 2^52, in fpu registers
 *	%f4:f5		double v, in fpu registers
 */

	.align	8
Lmagic:
	.word	0x43300000	! sign = 0, exponent = 52 + 1023, mantissa = 0
	.word	0		! (i.e., .double 0r4503599627370496e+00)

L0:
	.word	0		! 0.0
	.word	0

ENTRY(modf)
	save	%sp, -64-16, %sp

	/*
	 * First, compute v = abs(val) by clearing sign bit,
	 * and then set up the fpu registers.  This would be
	 * much easier if we could do alu operations on fpu registers!
	 */
	sethi	%hi(0x80000000), %l1	! sign bit
	andn	%i0, %l1, %l0
	st	%l0, [%fp - 16]
#ifdef __PIC__
	PICCY_SET(Lmagic, %l0, %o7)
	ldd	[%l0], %f2
#else
	sethi	%hi(Lmagic), %l0
	ldd	[%l0 + %lo(Lmagic)], %f2
#endif
	st	%i1, [%fp - 12]
	ldd	[%fp - 16], %f4		! %f4:f5 = v

	/*
	 * Is %f4:f5 >= %f2:f3 ?  If so, it is all integer bits.
	 * It is probably less, though.
	 */
	fcmped	%f4, %f2
	nop				! fpop2 delay
	fbuge	Lbig			! if >= (or unordered), go out
	nop

	/*
	 * v < 2^52, so add 2^52, then subtract 2^52, but do it all
	 * with rounding set towards zero.  We leave any enabled
	 * traps enabled, but change the rounding mode.  This might
	 * not be so good.  Oh well....
	 */
	st	%fsr, [%fp - 4]		! %l5 = current FSR mode
	set	FSR_RD, %l3		! %l3 = rounding direction mask
	ld	[%fp - 4], %l5
	set	FSR_RD_RZ << FSR_RD_SHIFT, %l4
	andn	%l5, %l3, %l6
	or	%l6, %l4, %l6		! round towards zero, please
	and	%l5, %l3, %l5		! save original rounding mode
	st	%l6, [%fp - 8]
	ld	[%fp - 8], %fsr

	faddd	%f4, %f2, %f4		! %f4:f5 += 2^52
	fsubd	%f4, %f2, %f4		! %f4:f5 -= 2^52

	/*
	 * Restore %fsr, but leave exceptions accrued.
	 */
	st	%fsr, [%fp - 4]
	ld	[%fp - 4], %l6
	andn	%l6, %l3, %l6		! %l6 = %fsr & ~FSR_RD;
	or	%l5, %l6, %l5		! %l5 |= %l6;
	st	%l5, [%fp - 4]
	ld	[%fp - 4], %fsr		! restore %fsr, leaving accrued stuff

	/*
	 * Now insert the original sign in %f4:f5.
	 * This is a lot of work, so it is conditional here.
	 */
	btst	%l1, %i0
	be	1f
	nop
	st	%f4, [%fp - 16]
	ld	[%fp - 16], %g1
	or	%l1, %g1, %g1
	st	%g1, [%fp - 16]
	ld	[%fp - 16], %f4
1:

	/*
	 * The value in %f4:f5 is now the integer portion of the original
	 * argument.  We need to store this in *ival (%i2), subtract it
	 * from the original value argument (%i0:i1), and return the result.
	 */
	std	%f4, [%i2]		! *ival = %f4:f5;
	std	%i0, [%fp - 16]
	ldd	[%fp - 16], %f0		! %f0:f1 = val;
	fsubd	%f0, %f4, %f0		! %f0:f1 -= %f4:f5;
	ret
	 restore

Lbig:
	/*
	 * We get here if the original comparison of %f4:f5 (v) to
	 * %f2:f3 (2^52) came out `greater or unordered'.  In this
	 * case the integer part is the original value, and the
	 * fractional part is 0.
	 */
#ifdef __PIC__
	PICCY_SET(L0, %l0, %o7)
	std	%i0, [%i2]		! *ival = val;
	ldd	[%l0], %f0		! return 0.0;
#else
	sethi	%hi(L0), %l0
	std	%i0, [%i2]		! *ival = val;
	ldd	[%l0 + %lo(L0)], %f0	! return 0.0;
#endif
	ret
	 restore
@


1.8
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
/* $OpenBSD: modf.S,v 1.7 2011/07/08 22:28:33 martynas Exp $ */
d178 1
a178 1
	std	%f0, [%i2]		! *ival = val;
d182 1
a182 1
	std	%f0, [%i2]		! *ival = val;
@


1.7
log
@Revert (leaving the complex math part alone).  Some stuff is depending
on this historical behavior;  so we're stuck in this stupid situation.
No cookie for me.
@
text
@d1 1
a1 1
/* $OpenBSD: modf.S,v 1.5 2005/08/07 16:40:15 espie Exp $ */
d95 1
a95 1
#ifdef PIC
d176 1
a176 1
#ifdef PIC
@


1.6
log
@Move fabs(3), frexp(3), and modf(3) to libm--nothing has been using
them in libc for a very long time.  OK guenther@@.
@
text
@@


1.5
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a33 5

#if defined(LIBC_SCCS) 
	.text
	.asciz "$OpenBSD: modf.S,v 1.3 2003/04/22 19:57:57 jason Exp $"
#endif /* LIBC_SCCS */
@


1.3
log
@Indent delay slot insns
@
text
@d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d36 1
a36 1
	.asciz "$OpenBSD: modf.S,v 1.2 1996/08/19 08:17:41 tholo Exp $"
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d40 1
a40 1
	.asciz "$OpenBSD$"
d175 1
a175 1
	restore
d194 1
a194 1
	restore
@


1.1
log
@Initial revision
@
text
@a35 3
 *
 * from: Header: modf.s,v 1.3 92/06/20 00:00:54 torek Exp
 * $Id: modf.S,v 1.3 1994/02/10 20:15:47 pk Exp $
d38 4
a41 3
#if defined(LIBC_SCCS) && !defined(lint)
	.asciz "@@(#)modf.s	8.1 (Berkeley) 6/4/93"
#endif /* LIBC_SCCS and not lint */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
