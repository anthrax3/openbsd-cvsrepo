head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.8
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.64
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.60
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.58
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.56
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.54
	OPENBSD_5_0:1.5.0.52
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.50
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.48
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.44
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.46
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.42
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.40
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.38
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.36
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.34
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.32
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.30
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.28
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.26
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.24
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.22
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.20
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.18
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.16
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.14
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.12
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.8
date	2016.05.16.16.20.58;	author guenther;	state Exp;
branches;
next	1.7;
commitid	Z6i8KkMg0DsVXSel;

1.7
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.6;
commitid	d9R7VGw9CHTkwXE1;

1.6
date	2014.06.09.20.47.10;	author miod;	state Exp;
branches;
next	1.5;
commitid	iQ7uGgiNX7UaiPtF;

1.5
date	99.01.20.04.44.58;	author d;	state Exp;
branches;
next	1.4;

1.4
date	96.11.13.20.46.46;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.10.15;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.01.12.52.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Eliminate cerror: use PAL_rdunique to get the TCB address directly

ok deraadt@@ kettenis@@
@
text
@#	$OpenBSD: Makefile.inc,v 1.7 2016/05/07 19:05:21 guenther Exp $
#	$NetBSD: Makefile.inc,v 1.4 1996/10/17 02:58:18 cgd Exp $

# `source' files built from m4 source
SRCS+=	__divqu.S __divq.S __divlu.S __divl.S
SRCS+=	__remqu.S __remq.S __remlu.S __reml.S
CLEANFILES+=	__divqu.S __divq.S __divlu.S __divl.S
CLEANFILES+=	__remqu.S __remq.S __remlu.S __reml.S

__divqu.S: ${LIBCSRCDIR}/arch/alpha/gen/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__divqu')define(OP,\`div')define(S,\`false')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divq.S: ${LIBCSRCDIR}/arch/alpha/gen/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__divq')define(OP,\`div')define(S,\`true')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divlu.S: ${LIBCSRCDIR}/arch/alpha/gen/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__divlu')define(OP,\`div')define(S,\`false')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divl.S: ${LIBCSRCDIR}/arch/alpha/gen/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__divl')define(OP,\`div')define(S,\`true')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remqu.S: ${LIBCSRCDIR}/arch/alpha/gen/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__remqu')define(OP,\`rem')define(S,\`false')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remq.S: ${LIBCSRCDIR}/arch/alpha/gen/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__remq')define(OP,\`rem')define(S,\`true')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remlu.S: ${LIBCSRCDIR}/arch/alpha/gen/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__remlu')define(OP,\`rem')define(S,\`false')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__reml.S: ${LIBCSRCDIR}/arch/alpha/gen/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__reml')define(OP,\`rem')define(S,\`true')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}
@


1.7
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2014/06/09 20:47:10 miod Exp $
a2 2

CERROR=	cerror.S
@


1.6
log
@Nuke the machinery to sync libkern with libc, it's not been used in the
last 15 years and there is no point to use it in the future.

From Jean-Philippe Ouellet
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 1999/01/20 04:44:58 d Exp $
d3 2
@


1.5
log
@use LIBCSRCDIR
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 1996/11/13 20:46:46 niklas Exp $
a2 5

KMINCLUDES=
KMSRCS=	divrem.m4 bzero.S htonl.S htons.S ntohl.S ntohs.S \
	byte_swap_2.S byte_swap_4.S ffs.S
#KMSRCS=	bcmp.S strcat.S strcmp.S strcpy.S strlen.S
@


1.4
log
@Sync with kernel, from NetBSD
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 1996/08/19 08:10:15 tholo Exp $
d15 1
a15 1
__divqu.S: ${.CURDIR}/arch/alpha/gen/divrem.m4
d20 1
a20 1
__divq.S: ${.CURDIR}/arch/alpha/gen/divrem.m4
d25 1
a25 1
__divlu.S: ${.CURDIR}/arch/alpha/gen/divrem.m4
d30 1
a30 1
__divl.S: ${.CURDIR}/arch/alpha/gen/divrem.m4
d35 1
a35 1
__remqu.S: ${.CURDIR}/arch/alpha/gen/divrem.m4
d40 1
a40 1
__remq.S: ${.CURDIR}/arch/alpha/gen/divrem.m4
d45 1
a45 1
__remlu.S: ${.CURDIR}/arch/alpha/gen/divrem.m4
d50 1
a50 1
__reml.S: ${.CURDIR}/arch/alpha/gen/divrem.m4
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 2
a2 1
#	$OpenBSD: Makefile.inc,v 1.2 1996/04/17 22:36:30 cgd Exp $
d4 1
a4 1
KMINCLUDES= arch/alpha/SYS.h arch/alpha/DEFS.h
d6 2
a7 2
	byte_swap_2.S byte_swap_4.S
#KMSRCS=	bcmp.S ffs.S strcat.S strcmp.S strcpy.S strlen.S
@


1.2
log
@sync with netbsd
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.inc,v 1.2 1996/04/17 22:36:30 cgd Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.inc,v 1.1 1995/02/10 17:49:49 cgd Exp $
d4 3
a6 3
KMSRCS=	divrem.m4
#KMSRCS=	bcmp.S bzero.S ffs.S strcat.S strcmp.S strcpy.S strlen.S \
#	htonl.S htons.S ntohl.S ntohs.S
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
