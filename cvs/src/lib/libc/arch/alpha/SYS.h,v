head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.46
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.50
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.48
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.44
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.42
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.40
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.38
	OPENBSD_5_0:1.9.0.36
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.34
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.32
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.28
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.30
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.26
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.24
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.22
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.20
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.18
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.16
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.14
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.12
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.10
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.8
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.6
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.4
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.4.0.10
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.05.16.16.25.06;	author guenther;	state Exp;
branches;
next	1.14;
commitid	chkt3lQbIyHolLgG;

1.14
date	2016.05.16.16.20.58;	author guenther;	state Exp;
branches;
next	1.13;
commitid	Z6i8KkMg0DsVXSel;

1.13
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.12;
commitid	OrVNAJkzchWBNbO0;

1.12
date	2015.09.10.13.29.09;	author guenther;	state Exp;
branches;
next	1.11;
commitid	pYkLasgGFEsgLTME;

1.11
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.10;
commitid	lTMF8Y3C9fQGd6jQ;

1.10
date	2015.04.07.01.27.06;	author guenther;	state Exp;
branches;
next	1.9;
commitid	oQvh7XA3Kql35r0J;

1.9
date	2002.10.06.23.23.18;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.04.21.37.18;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.20.20.52.09;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.13.11.44.25;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.13.11.42.10;	author art;	state Exp;
branches;
next	1.4;

1.4
date	99.01.06.06.10.12;	author d;	state Exp;
branches;
next	1.3;

1.3
date	96.11.13.20.46.47;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.10.16;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@...and delete the GP setup.  Should have been in previous commit
@
text
@/*	$OpenBSD: SYS.h,v 1.14 2016/05/16 16:20:58 guenther Exp $	*/
/*	$NetBSD: SYS.h,v 1.4 1996/10/17 03:03:53 cgd Exp $	*/

/*
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <machine/asm.h>
#include <machine/pal.h>		/* for PAL_rdunique */
#include <sys/syscall.h>


/* offsetof(struct tib, tib_errno) - offsetof(struct tib, __tib_tcb) */
#define	TCB_OFFSET_ERRNO	(-12)

/*
 * We define a hidden alias with the prefix "_libc_" for each global symbol
 * that may be used internally.  By referencing _libc_x instead of x, other
 * parts of libc prevent overriding by the application and avoid unnecessary
 * relocations.
 */
#define _HIDDEN(x)		_libc_##x
#define _HIDDEN_ALIAS(x,y)			\
	STRONG_ALIAS(_HIDDEN(x),y);		\
	.hidden _HIDDEN(x)
#define _HIDDEN_FALIAS(x,y)			\
	_HIDDEN_ALIAS(x,y);			\
	.type _HIDDEN(x),@@function

/*
 * END() uses the alpha .end pseudo-op which requires a matching .ent,
 * so here's a short hand for just doing .size
 */
#define _END(x)		.size x, . - x

/*
 * For functions implemented in ASM that aren't syscalls.
 *   END_STRONG(x)	Like DEF_STRONG() in C; for standard/reserved C names
 *   END_WEAK(x)	Like DEF_WEAK() in C; for non-ISO C names
 */
#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x);		\
			_END(_HIDDEN(x))
#define	END_WEAK(x)	END_STRONG(x); .weak x


#define	CALLSYS_ERROR(name)					\
	CALLSYS_NOERROR(name);					\
	beq	a3, LLABEL(name,1);				\
	mov	v0, t0;						\
	call_pal PAL_rdunique;					\
	stl	t0, TCB_OFFSET_ERRNO(v0);			\
	ldiq	v0, -1;						\
	RET;							\
LLABEL(name,1):

#define __LEAF(p,n,e)						\
	LEAF(___CONCAT(p,n),e)
#define __END(p,n)						\
	END(___CONCAT(p,n));					\
	_HIDDEN_FALIAS(n,___CONCAT(p,n));			\
	_END(_HIDDEN(n))

#define	__SYSCALL(p,name)					\
__LEAF(p,name,0);			/* XXX # of args? */	\
	CALLSYS_ERROR(name)

#define	__SYSCALL_NOERROR(p,name)				\
__LEAF(p,name,0);			/* XXX # of args? */	\
	CALLSYS_NOERROR(name)


#define __RSYSCALL(p,name)					\
	__SYSCALL(p,name);					\
	RET;							\
__END(p,name)

#define __RSYSCALL_NOERROR(p,name)				\
	__SYSCALL_NOERROR(p,name);				\
	RET;							\
__END(p,name)


#define	__PSEUDO(p,label,name)					\
__LEAF(p,label,0);			/* XXX # of args? */	\
	CALLSYS_ERROR(name);					\
	RET;							\
__END(p,label);

#define	__PSEUDO_NOERROR(p,label,name)				\
__LEAF(p,label,0);			/* XXX # of args? */	\
	CALLSYS_NOERROR(name);					\
	RET;							\
__END(p,label);

#define ALIAS(prefix,name) WEAK_ALIAS(name, ___CONCAT(prefix,name));

/*
 * For the thread_safe versions, we prepend _thread_sys_ to the function
 * name so that the 'C' wrapper can go around the real name.
 */
# define SYSCALL(x)		ALIAS(_thread_sys_,x) \
				__SYSCALL(_thread_sys_,x)
# define SYSCALL_NOERROR(x)	ALIAS(_thread_sys_,x) \
				__SYSCALL_NOERROR(_thread_sys_,x)
# define RSYSCALL(x)		ALIAS(_thread_sys_,x) \
				__RSYSCALL(_thread_sys_,x); \
				_END(x)
# define RSYSCALL_HIDDEN(x)	__RSYSCALL(_thread_sys_,x)
# define RSYSCALL_NOERROR(x)	ALIAS(_thread_sys_,x) \
				__RSYSCALL_NOERROR(_thread_sys_,x); \
				_END(x)
# define PSEUDO(x,y)		ALIAS(_thread_sys_,x) \
				__PSEUDO(_thread_sys_,x,y); \
				_END(x)
# define PSEUDO_NOERROR(x,y)	ALIAS(_thread_sys_,x) \
				__PSEUDO_NOERROR(_thread_sys_,x,y); \
				_END(x)
# define SYSLEAF_HIDDEN(x,e)	__LEAF(_thread_sys_,x,e)
# define SYSLEAF(x,e)		ALIAS(_thread_sys_,x) \
				SYSLEAF_HIDDEN(x,e)
# define SYSCALL_END_HIDDEN(x)	__END(_thread_sys_,x)
# define SYSCALL_END(x)		SYSCALL_END_HIDDEN(x); \
				_END(x)
@


1.14
log
@Eliminate cerror: use PAL_rdunique to get the TCB address directly

ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.13 2015/10/23 04:39:24 guenther Exp $	*/
a70 3
	br	gp, LLABEL(name,0);				\
LLABEL(name,0):							\
	LDGP(gp);						\
@


1.13
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.12 2015/09/10 13:29:09 guenther Exp $	*/
d32 1
d35 4
d75 5
a79 1
	jmp	zero, __cerror;					\
@


1.12
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

alpha, arm, m88k, sh, sparc, and vax assistance miod@@
hppa assistance kettenis@@
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.11 2015/08/31 02:53:56 guenther Exp $	*/
d135 1
d137 3
a139 2
				__LEAF(_thread_sys_,x,e)
# define SYSEND(x)		__END(_thread_sys_,x); \
@


1.11
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.10 2015/04/07 01:27:06 guenther Exp $	*/
d49 6
d60 1
a60 1
			.size _HIDDEN(x), . - _HIDDEN(x)
d76 3
a78 1
	END(___CONCAT(p,n))
d123 2
a124 1
				__RSYSCALL(_thread_sys_,x)
d127 2
a128 1
				__RSYSCALL_NOERROR(_thread_sys_,x)
d130 2
a131 1
				__PSEUDO(_thread_sys_,x,y)
d133 2
a134 1
				__PSEUDO_NOERROR(_thread_sys_,x,y)
d137 2
a138 1
# define SYSEND(x)		__END(_thread_sys_,x)
@


1.10
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.9 2002/10/06 23:23:18 art Exp $	*/
d33 23
@


1.9
log
@Rename cerror to __cerror on alpha to avoid namespace pollution.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.8 2002/01/04 21:37:18 drahn Exp $	*/
d93 1
@


1.8
log
@system calls are made thru _thread_sys_* with weak symbols of the real name
pointing to the _thread_sys_ version.
ok pval, fgs
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.7 2001/09/20 20:52:09 millert Exp $	*/
d41 1
a41 1
	jmp	zero, cerror;					\
@


1.7
log
@Add PSEUDO_NOERROR similar to that used by NetBSD.
Some ports were setting errno in PSEUDO and some were not.  Now errno
is set for all in PSEUDO and PSEUDO_NOERROR is provided for the
non-errno case (only used by _exit).

Needs testing on vax and m88k.
XXX - hppa and powerpc still lack a real PSEUDO_NOERROR implementation.
Currently PSEUDO_NOERROR and PSEUDO are the same (so builds don't
break on those platforms).
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.6 2001/06/13 11:44:25 art Exp $	*/
d81 1
a82 1
#ifdef _THREAD_SAFE
d87 14
a100 7
# define SYSCALL(x)		__SYSCALL(_thread_sys_,x)
# define SYSCALL_NOERROR(x)	__SYSCALL_NOERROR(_thread_sys_,x)
# define RSYSCALL(x)		__RSYSCALL(_thread_sys_,x)
# define RSYSCALL_NOERROR(x)	__RSYSCALL_NOERROR(_thread_sys_,x)
# define PSEUDO(x,y)		__PSEUDO(_thread_sys_,x,y)
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
# define SYSLEAF(x,e)		__LEAF(_thread_sys_,x,e)
a101 14
#else /* _THREAD_SAFE */
/*
 * The non-threaded library defaults to traditional syscalls where
 * the function name matches the syscall name.
 */
# define SYSCALL(x)		__SYSCALL(,x)
# define SYSCALL_NOERROR(x)	__SYSCALL_NOERROR(,x)
# define RSYSCALL(x)		__RSYSCALL(,x)
# define RSYSCALL_NOERROR(x)	__RSYSCALL_NOERROR(,x)
# define PSEUDO(x,y)		__PSEUDO(,x,y)
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(,x,y)
# define SYSLEAF(x,e)		__LEAF(,x,e)
# define SYSEND(x)		__END(,x)
#endif /* _THREAD_SAFE */
@


1.6
log
@pretty
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.5 2001/06/13 11:42:10 art Exp $	*/
d71 6
d92 1
d105 1
@


1.5
log
@"#endif _THREAD_SAFE" is not legal
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.4 1999/01/06 06:10:12 d Exp $	*/
d59 1
a59 1
	__SYSCALL(p,name);						\
@


1.4
log
@_THREAD_SAFE; nominal testing by fries
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.3 1996/11/13 20:46:47 niklas Exp $	*/
d88 1
a88 1
#else _THREAD_SAFE
d100 1
a100 1
#endif _THREAD_SAFE
@


1.3
log
@Sync with kernel, from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.2 1996/08/19 08:10:16 tholo Exp $	*/
d44 4
d49 2
a50 2
#define	SYSCALL(name)						\
LEAF(name,0);				/* XXX # of args? */	\
d53 2
a54 2
#define	SYSCALL_NOERROR(name)					\
LEAF(name,0);				/* XXX # of args? */	\
d58 2
a59 2
#define RSYSCALL(name)						\
	SYSCALL(name);						\
d61 1
a61 1
END(name)
d63 2
a64 2
#define RSYSCALL_NOERROR(name)					\
	SYSCALL_NOERROR(name);					\
d66 1
a66 1
END(name)
d69 2
a70 2
#define	PSEUDO(label,name)					\
LEAF(label,0);				/* XXX # of args? */	\
d73 28
a100 1
END(label);
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 2
a2 1
/*	$OpenBSD: SYS.h,v 1.1 1995/02/10 17:49:50 cgd Exp $	*/
d34 34
a67 19
#define CALLSYS(num)						\
	CONST(num, v0);						\
	call_pal 0x83;			/* op_callsys */	
	
#define	SYSCALL_NOLABEL(x)					\
	CALLSYS(SYS_/**/x);					\
	beq	a3, 9f;						\
	br	gp, 8f;						\
8:	SETGP(gp);						\
	lda	at_reg, cerror;					\
	jmp	zero, (at_reg);					\
9:

#define	SYSCALL(x)	LEAF(x, 0 /* XXX */); SYSCALL_NOLABEL(x);
#define RSYSCALL(x)	SYSCALL(x); RET; END(x);

#define	PSEUDO(x,y)						\
LEAF(x,0);				/* unknown # of args */	\
	CALLSYS(SYS_/**/y);					\
d69 1
a69 1
END(x);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: SYS.h,v 1.1 1995/02/10 17:49:50 cgd Exp $	*/
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
