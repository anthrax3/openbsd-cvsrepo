head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.20
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.18
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.14
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.16
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.8
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.12
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.10
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.6
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.4
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.10.0.8
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.6
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.13
date	2012.04.12.16.14.09;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2011.07.08.22.28.32;	author martynas;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.08.19.21.41;	author martynas;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.21.09.34.50;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.19.16.42.05;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.24.09.31.06;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.29.21.38.06;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.01.15.12.28;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.02.19.20.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.10.22.38.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.11.13.21.20.07;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.10.18;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@alloca.c cannot be used
@
text
@#	$OpenBSD: Makefile.inc,v 1.12 2011/07/08 22:28:32 martynas Exp $
#	$NetBSD: Makefile.inc,v 1.3 1995/04/29 05:09:14 cgd Exp $

SRCS+=	_setjmp.S fabs.S infinity.c ldexp.c modf.c nan.c setjmp.S
SRCS+=	flt_rounds.c fpgetmask.c fpgetround.c fpgetsticky.c fpsetmask.c \
	fpsetround.c fpsetsticky.c
SRCS+=	sigsetjmp.S
@


1.12
log
@Revert (leaving the complex math part alone).  Some stuff is depending
on this historical behavior;  so we're stuck in this stupid situation.
No cookie for me.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2009/04/21 09:34:50 martynas Exp $
a7 2

SRCS+=	alloca.c
@


1.11
log
@Move fabs(3), frexp(3), and modf(3) to libm--nothing has been using
them in libc for a very long time.  OK guenther@@.
@
text
@d4 1
a4 1
SRCS+=	_setjmp.S infinity.c ldexp.c nan.c setjmp.S
@


1.10
log
@remove from gen so that lint doesn't check gen if assembly versions
are available.  spotted by theo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2009/04/19 16:42:05 martynas Exp $
d4 1
a4 1
SRCS+=	_setjmp.S fabs.S infinity.c ldexp.c modf.c nan.c setjmp.S
@


1.9
log
@- ldexp implementation has issues.  switch to the one from libm
- remove frexp in hppa64, cloned from hppa
- move generic ieee754 implementations of modf and ldexp to gen
ok kettenis@@, "looks good" millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2008/07/24 09:31:06 martynas Exp $
d4 1
a4 1
SRCS+=	_setjmp.S fabs.S infinity.c nan.c setjmp.S
@


1.8
log
@- move isinf, isnan dups to gen, since most is ieee 754
- is{inf,nan} should be macros for real-floating, so rename to
__is{inf,nan}, per C99
- implement C99 __fpclassify(), __fpclassifyf(), __isfinite(),
__isfinitef(), __isnormal(), __isnormalf(), __signbit(), __signbitf()
- long functions added, but not yet enabled, till ieee.h is fixed
- implement vax equivalents of the functions
- reimplement isinff, isnanf in a better way, and move to libc
- add qnan bytes for all archs
- bump major
man pages will follow
ok millert@@.  arm bits looked over by drahn@@
discussed w/ theo, who showed the right direction, to put these
functions in libc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2005/11/29 21:38:06 deraadt Exp $
d4 1
a4 1
SRCS+=	_setjmp.S fabs.S infinity.c ldexp.c modf.c nan.c setjmp.S
@


1.7
log
@if we pull in a .S file, we must fake out the lint with a .c file
for this first cut, we will do this for alloca() using alloca.c by
adding it to LSRCS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2005/02/01 15:12:28 millert Exp $
d4 1
a4 2
SRCS+=	_setjmp.S fabs.S infinity.c isinf.c isnan.c ldexp.c \
	modf.c setjmp.S
@


1.6
log
@Replace broken frexp() with a working one from FreeBSD.  There's
no need to have a copy for each platform with ieee floating point,
only vax needs a special version (which probably has similar bugs).
OK and with help from otto@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2003/05/02 19:20:26 millert Exp $
d4 1
a4 1
SRCS+=	_setjmp.S alloca.c fabs.S infinity.c isinf.c isnan.c ldexp.c \
d9 2
@


1.5
log
@Add Doug Gwyn's portable alloca() for platforms w/o an assembler
version.  Normally, gcc provides its own alloca() (unless -fno-builtin
is specified).  The C version is decidedly suboptimal--we really
need proper assembler versions but this will work as a stop-gap
measure.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2001/09/10 22:38:11 millert Exp $
d4 1
a4 1
SRCS+=	_setjmp.S alloca.c fabs.S frexp.c infinity.c isinf.c isnan.c ldexp.c \
@


1.4
log
@Use the LBL isnan() and isinf() on all platforms with ieee floating point.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 1996/11/13 21:20:07 niklas Exp $
d4 2
a5 2
SRCS+=	_setjmp.S fabs.S frexp.c infinity.c isinf.c isnan.c ldexp.c modf.c \
	setjmp.S
@


1.3
log
@Sync to NetBSD + fixup RCS IDs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 1996/08/19 08:10:18 tholo Exp $
d4 2
a5 1
SRCS+=	_setjmp.S fabs.S frexp.c infinity.c isinf.c ldexp.c modf.c setjmp.S
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 2
a2 1
#	$OpenBSD: Makefile.inc,v 1.3 1995/04/29 05:09:14 cgd Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.inc,v 1.3 1995/04/29 05:09:14 cgd Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
