head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.4
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.6
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.42
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.44
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.36
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.40
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.38
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.34
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.32
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.30
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.28
	OPENBSD_5_0:1.4.0.26
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.24
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.22
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.18
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.20
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.16
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.14
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.12
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.34
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.32
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.30
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.28
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.26
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.24
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.22
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.20
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.5
date	2016.05.09.16.33.48;	author guenther;	state Exp;
branches;
next	1.4;
commitid	RAZYJFaigqhQRWSO;

1.4
date	2005.08.07.16.40.13;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	96.11.13.21.20.23;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.10.47;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.21;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Stop using sigreturn for longjmp, just set the signal mask and return
registers ala _longjmp.  In setjmp, stop saving the onstack from sigaltstack
as it's been unused by longjmp for years.
In sig{set,long}jmp, use the internal, hidden names for setjmp/_setjmp/etc
to avoid creating PLT entries.

build testing deraadt@@
@
text
@/*	$OpenBSD: sigsetjmp.S,v 1.4 2005/08/07 16:40:13 espie Exp $	*/
/*	$NetBSD: sigsetjmp.S,v 1.2 1996/10/17 03:08:07 cgd Exp $	*/

/*
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include "SYS.h"

/*
 * C library -- sigsetjmp, siglongjmp
 *
 *	siglongjmp(a,v)
 * will generate a "return(v)" from
 * the last call to
 *	sigsetjmp(a, mask)
 * by restoring registers from the stack.
 * If `mask' is non-zero, the previous signal
 * state will be restored.
 */

	.set	noreorder

LEAF(sigsetjmp, 2)
	LDGP(pv)
	stq	a1, (81 * 8)(a0)		/* save the mask */
	bne	a1, Lsavesig			/* if !zero, save signals */
	jmp	zero, _HIDDEN(_setjmp)		/* else don't. */
Lsavesig:
	jmp	zero, _HIDDEN(setjmp)
END_WEAK(sigsetjmp)

LEAF(siglongjmp, 2)
	LDGP(pv)
	ldq	t0, (81 * 8)(a0)		/* get the mask */
	bne	t0, Lrestoresig			/* if !zero, restore signals */
	jmp	zero, _HIDDEN(_longjmp)
Lrestoresig:
	jmp	zero, _HIDDEN(longjmp)
END_WEAK(siglongjmp)
@


1.4
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsetjmp.S,v 1.3 1996/11/13 21:20:23 niklas Exp $	*/
d31 1
a31 1
#include <machine/asm.h>
d51 1
a51 1
	jmp	zero, _setjmp			/* else don't. */
d53 2
a54 2
	jmp	zero, setjmp
END(sigsetjmp)
d60 1
a60 1
	jmp	zero, _longjmp
d62 2
a63 2
	jmp	zero, longjmp
END(siglongjmp)
@


1.3
log
@Sync to NetBSD + fixup RCS IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsetjmp.S,v 1.2 1996/10/17 03:08:07 cgd Exp $	*/
a31 5

#if defined(LIBC_SCCS)
	.text
	.asciz "$OpenBSD: sigsetjmp.S,v 1.2 1996/08/19 08:10:47 tholo Exp $"
#endif
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 3
d31 1
a31 1
#include "DEFS.h"
d35 1
a35 1
	.asciz "$OpenBSD$"
d53 1
a53 1
	SETGP(pv)
d56 1
a56 1
	JMP(_setjmp)				/* else don't. */
d58 1
a58 1
	JMP(setjmp)
d62 1
a62 1
	SETGP(pv)
d65 1
a65 1
	JMP(_longjmp)
d67 1
a67 1
	JMP(longjmp)
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: sigsetjmp.S,v 1.1 1995/02/10 17:50:27 cgd Exp $	*/

d29 5
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
