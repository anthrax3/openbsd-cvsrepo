head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.42
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.44
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.36
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.40
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.38
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.34
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.32
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.30
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.28
	OPENBSD_5_0:1.5.0.26
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.24
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.22
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.18
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.20
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.16
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.20
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.6
date	2016.05.09.16.33.48;	author guenther;	state Exp;
branches;
next	1.5;
commitid	RAZYJFaigqhQRWSO;

1.5
date	2005.08.07.16.40.13;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.04.13.51.20;	author art;	state Exp;
branches;
next	1.3;

1.3
date	96.11.13.21.20.09;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.10.20;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Stop using sigreturn for longjmp, just set the signal mask and return
registers ala _longjmp.  In setjmp, stop saving the onstack from sigaltstack
as it's been unused by longjmp for years.
In sig{set,long}jmp, use the internal, hidden names for setjmp/_setjmp/etc
to avoid creating PLT entries.

build testing deraadt@@
@
text
@/*	$OpenBSD: _setjmp.S,v 1.5 2005/08/07 16:40:13 espie Exp $	*/
/*	$NetBSD: _setjmp.S,v 1.2 1996/10/17 03:08:03 cgd Exp $	*/

/*
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include "SYS.h"

/*
 * C library -- _setjmp, _longjmp
 *
 *	_longjmp(a,v)
 * will generate a "return(v)" from
 * the last call to
 *	_setjmp(a)
 * by restoring registers from the stack,
 * The previous signal state is NOT restored.
 */

	.set	noreorder

LEAF(_setjmp, 1)
	LDGP(pv)
	stq	ra, (2 * 8)(a0)			/* sc_pc = return address */
	stq	s0, (( 9 + 4) * 8)(a0)		/* saved bits of sc_regs */
	stq	s1, ((10 + 4) * 8)(a0)
	stq	s2, ((11 + 4) * 8)(a0)
	stq	s3, ((12 + 4) * 8)(a0)
	stq	s4, ((13 + 4) * 8)(a0)
	stq	s5, ((14 + 4) * 8)(a0)
	stq	s6, ((15 + 4) * 8)(a0)
	stq	ra, ((26 + 4) * 8)(a0)
	stq	sp, ((30 + 4) * 8)(a0)
	ldiq	t0, 0xacedbadd			/* sigcontext magic number */
	stq	t0, ((31 + 4) * 8)(a0)		/* magic in sc_regs[31] */
	/* Too bad we can't check if we actually used FP */
	ldiq	t0, 1
	stq	t0, (36 * 8)(a0)		/* say we've used FP.  */
	stt	fs0, ((2 + 37) * 8)(a0)		/* saved bits of sc_fpregs */
	stt	fs1, ((3 + 37) * 8)(a0)
	stt	fs2, ((4 + 37) * 8)(a0)
	stt	fs3, ((5 + 37) * 8)(a0)
	stt	fs4, ((6 + 37) * 8)(a0)
	stt	fs5, ((7 + 37) * 8)(a0)
	stt	fs6, ((8 + 37) * 8)(a0)
	stt	fs7, ((9 + 37) * 8)(a0)
	mf_fpcr ft0				/* get FP control reg */
	stt	ft0, (69 * 8)(a0)		/* and store it in sc_fpcr */
	stq	zero, (70 * 8)(a0)		/* FP software control XXX */
	stq	zero, (71 * 8)(a0)		/* sc_reserved[0] */
	stq	zero, (72 * 8)(a0)		/* sc_reserved[1] */
	stq	zero, (73 * 8)(a0)		/* sc_xxx[0] */
	stq	zero, (74 * 8)(a0)		/* sc_xxx[1] */
	stq	zero, (75 * 8)(a0)		/* sc_xxx[2] */
	stq	zero, (76 * 8)(a0)		/* sc_xxx[3] */
	stq	zero, (77 * 8)(a0)		/* sc_xxx[4] */
	stq	zero, (78 * 8)(a0)		/* sc_xxx[5] */
	stq	zero, (79 * 8)(a0)		/* sc_xxx[6] */
	stq	zero, (80 * 8)(a0)		/* sc_xxx[7] */

	mov	zero, v0			/* return zero */
	RET
END_STRONG(_setjmp)

LEAF(_longjmp, 2)
	LDGP(pv)
	ldq	t0, ((31 + 4) * 8)(a0)		/* magic in sc_regs[31] */
	ldiq	t1, 0xacedbadd
	cmpeq	t0, t1, t0
	beq	t0, botch			/* If the magic was bad, punt */

	ldq	ra, (2 * 8)(a0)			/* sc_pc = return address */
	ldq	s0, (( 9 + 4) * 8)(a0)		/* saved bits of sc_regs */
	ldq	s1, ((10 + 4) * 8)(a0)
	ldq	s2, ((11 + 4) * 8)(a0)
	ldq	s3, ((12 + 4) * 8)(a0)
	ldq	s4, ((13 + 4) * 8)(a0)
	ldq	s5, ((14 + 4) * 8)(a0)
	ldq	s6, ((15 + 4) * 8)(a0)
	/* ldq	ra, ((26 + 4) * 8)(a0)		set above */
	ldq	sp, ((30 + 4) * 8)(a0)
	ldt	fs0, ((2 + 37) * 8)(a0)		/* saved bits of sc_fpregs */
	ldt	fs1, ((3 + 37) * 8)(a0)
	ldt	fs2, ((4 + 37) * 8)(a0)
	ldt	fs3, ((5 + 37) * 8)(a0)
	ldt	fs4, ((6 + 37) * 8)(a0)
	ldt	fs5, ((7 + 37) * 8)(a0)
	ldt	fs6, ((8 + 37) * 8)(a0)
	ldt	fs7, ((9 + 37) * 8)(a0)
	ldt	ft0, (69 * 8)(a0)		/* get sc_fpcr */
	mt_fpcr	ft0				/* and restore it. */

	bne	a1, 1f
	addq	a1, 1, a1
1:
	mov	a1, v0				/* return second arg */
	RET

botch:
	CALL(_HIDDEN(abort))
	RET					/* "can't" get here... */
END_STRONG(_longjmp)
@


1.5
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/*	$OpenBSD: _setjmp.S,v 1.4 2002/01/04 13:51:20 art Exp $	*/
d31 1
a31 1
#include <machine/asm.h>
d87 1
a87 1
END(_setjmp)
d124 1
a124 2
	CALL(longjmperror)
	CALL(abort)
d126 1
a126 1
END(_longjmp)
@


1.4
log
@longjmp(..., 0) is not really legal, but all other archs I've looked
at make sure that setjmp doesn't return 0 if longjmp is passed a 0.
Avoid surprises.
@
text
@d1 1
a1 1
/*	$OpenBSD: _setjmp.S,v 1.3 1996/11/13 21:20:09 niklas Exp $	*/
a31 5

#if defined(LIBC_SCCS)
	.text
	.asciz "$OpenBSD: _setjmp.S,v 1.3 1996/11/13 21:20:09 niklas Exp $"
#endif
@


1.3
log
@Sync to NetBSD + fixup RCS IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: _setjmp.S,v 1.2 1996/10/17 03:08:03 cgd Exp $	*/
d35 1
a35 1
	.asciz "$OpenBSD: _setjmp.S,v 1.2 1996/08/19 08:10:20 tholo Exp $"
d122 3
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 3
d31 1
a31 1
#include "DEFS.h"
d35 1
a35 1
	.asciz "$OpenBSD$"
d52 1
a52 1
	SETGP(pv)
d63 1
a63 1
	CONST(0xACEDBADD, t0)			/* sigcontext magic number */
d66 1
a66 1
	CONST(1, t0)
d76 1
a76 1
	MF_FPCR(ft0)				/* get FP control reg */
d95 1
a95 1
	SETGP(pv)
d97 1
a97 1
	CONST(0xACEDBADD, t1)
d120 1
a120 1
	MT_FPCR(ft0)				/* and restore it. */
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: _setjmp.S,v 1.1 1995/02/10 17:50:19 cgd Exp $	*/

d29 5
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
