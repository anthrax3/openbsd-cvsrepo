head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.30
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.28
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.24
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.26
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.22
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.20
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.18
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.16
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@# @;


1.10
date	2016.10.04.03.15.51;	author guenther;	state Exp;
branches;
next	1.9;
commitid	iM8qXAGDGgyBgNXR;

1.9
date	2016.08.06.19.16.09;	author guenther;	state Exp;
branches;
next	1.8;
commitid	3wTWcmodIMVBuFUY;

1.8
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.7;
commitid	d9R7VGw9CHTkwXE1;

1.7
date	2015.09.10.13.29.09;	author guenther;	state Exp;
branches;
next	1.6;
commitid	pYkLasgGFEsgLTME;

1.6
date	2013.12.31.23.31.13;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.22.17.19.34;	author pascal;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.04.12.42.39;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.07.06.02.07;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.01.05.40.52;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.30.41;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Use the userspace-visible thread register directly in __cerror instead
of indirecting through __errno().

Register naming tweaks and clang testing by patrick@@ and jsg@@
ok kettenis@@
@
text
@/*	$OpenBSD: cerror.S,v 1.9 2016/08/06 19:16:09 guenther Exp $	*/
/*	$NetBSD: cerror.S,v 1.5 2003/08/07 16:42:04 agc Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)cerror.s	5.1 (Berkeley) 4/23/90
 */

#include "SYS.h"

/* offsetof(struct tib, tib_errno) - offsetof(struct tib, __tib_tcb) */
#define TCB_OFFSET_ERRNO	(-8)

_ENTRY(CERROR)
	mrc	p15, 0, r1, c13, c0, 3
	str	r0, [r1, #TCB_OFFSET_ERRNO]
	mvn	r0, #0x00000000
	mvn	r1, #0x00000000
	mov	pc, lr
END(CERROR)
@


1.9
log
@Use internal names for __errno, _memcpy, memset, and {,_}{set,long}jmp
Eliminate pointless use of PIC_SYM()
Split out DEFS.h from SYS.h like some other archs

ok kettenis@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cerror.S,v 1.8 2016/05/07 19:05:21 guenther Exp $	*/
d37 3
d41 2
a42 4
	stmfd	sp!, {r4, lr}
	mov	r4, r0
	bl	_HIDDEN(__errno)
	str	r4, [r0]
d45 2
a46 1
	ldmfd	sp!, {r4, pc}
@


1.8
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cerror.S,v 1.7 2015/09/10 13:29:09 guenther Exp $	*/
d40 1
a40 1
	bl	PIC_SYM(_C_LABEL(__errno), PLT)
@


1.7
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

alpha, arm, m88k, sh, sparc, and vax assistance miod@@
hppa assistance kettenis@@
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cerror.S,v 1.6 2013/12/31 23:31:13 kettenis Exp $	*/
d37 5
a41 14
WEAK_ALIAS(CERROR, _CERROR)

ASENTRY(_CERROR)
#ifdef __PIC__
	/* Setup the GOT */
	ldr	r3, .Lgot
	ldr	r1, .Lerrno
.L1:
	add	r3, pc, r3
	ldr	r1, [r3, r1]
#else
	ldr	r1, .Lerrno
#endif /* PIC */
	str	r0, [r1]
d44 1
a44 13
	mov	pc, lr

#ifdef __PIC__
	.align	0
.Lgot:
	.word	_C_LABEL(_GLOBAL_OFFSET_TABLE_) - (.L1+8)
#endif /* PIC */

	.globl	_C_LABEL(errno)

.Lerrno:
	.word	PIC_SYM(_C_LABEL(errno), GOT)
END(_CERROR)
@


1.6
log
@Remove #ifdef _REENTRANT code that isn't used here.  These days, the code
handling per-thread errno lives in librthread.

ok miod@@, espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cerror.S,v 1.5 2012/08/22 17:19:34 pascal Exp $	*/
d65 1
@


1.5
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cerror.S,v 1.4 2011/04/04 12:42:39 guenther Exp $	*/
a39 9
#ifdef _REENTRANT
	stmfd	sp!, {r4, lr}
	mov	r4, r0
	bl	PIC_SYM(_C_LABEL(__errno), PLT)
	str	r4, [r0]
	mvn	r0, #0x00000000
	mvn	r1, #0x00000000
	ldmfd	sp!, {r4, pc}
#else
a64 1
#endif /* _REENTRANT */
@


1.4
log
@Move __cerror to ___cerror with a weak alias so that rthreads can override it.
On mips64, also correct the name called from plain cerror to __cerror.

"looks correct" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cerror.S,v 1.3 2004/02/07 06:02:07 drahn Exp $	*/
d49 1
a49 1
#ifdef PIC
d64 1
a64 1
#ifdef PIC
@


1.3
log
@Do not generate text relocations in PIC code.
@
text
@d1 1
a1 1
/*	$OpenBSD: cerror.S,v 1.2 2004/02/01 05:40:52 drahn Exp $	*/
d37 3
a39 1
ASENTRY(CERROR)
@


1.2
log
@ARGH, forgot tags.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 2
a52 2
.L1:
	ldr	r1, .Lerrno
d65 1
a65 1
	.word	_C_LABEL(_GLOBAL_OFFSET_TABLE_) + (. - (.L1+4))
@


1.1
log
@arm libc support. From NetBSD. currently supports softfloat.
@
text
@d1 1
@

