head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.6
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.18
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.16
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.12
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.14
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.10
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.8
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.6
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.16
date	2016.08.06.19.16.09;	author guenther;	state Exp;
branches;
next	1.15;
commitid	3wTWcmodIMVBuFUY;

1.15
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.14;
commitid	d9R7VGw9CHTkwXE1;

1.14
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.13;
commitid	OrVNAJkzchWBNbO0;

1.13
date	2015.09.10.13.29.09;	author guenther;	state Exp;
branches;
next	1.12;
commitid	pYkLasgGFEsgLTME;

1.12
date	2015.08.31.06.48.24;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	jun4sTNpxg8dOOmP;

1.11
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.10;
commitid	lTMF8Y3C9fQGd6jQ;

1.10
date	2015.08.26.01.54.09;	author guenther;	state Exp;
branches;
next	1.9;
commitid	ZWoe9OaBBikaM1w5;

1.9
date	2015.04.07.01.27.06;	author guenther;	state Exp;
branches;
next	1.8;
commitid	oQvh7XA3Kql35r0J;

1.8
date	2015.03.31.12.31.19;	author jsing;	state Exp;
branches;
next	1.7;
commitid	Mi0eAOkpyLfKOwZr;

1.7
date	2014.06.04.20.13.49;	author matthew;	state Exp;
branches;
next	1.6;
commitid	CQgbVinZLjc6cr0k;

1.6
date	2013.12.24.05.31.13;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.04.12.42.39;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.07.21.30.36;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.01.13.41.23;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.01.05.40.52;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.30.40;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Use internal names for __errno, _memcpy, memset, and {,_}{set,long}jmp
Eliminate pointless use of PIC_SYM()
Split out DEFS.h from SYS.h like some other archs

ok kettenis@@ deraadt@@
@
text
@/*	$OpenBSD: SYS.h,v 1.15 2016/05/07 19:05:21 guenther Exp $	*/
/*	$NetBSD: SYS.h,v 1.8 2003/08/07 16:42:02 agc Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)SYS.h	5.5 (Berkeley) 5/7/91
 */

#include "DEFS.h"
#include <sys/syscall.h>


#define SYSENTRY(x)					\
	.weak _C_LABEL(x);				\
	_C_LABEL(x) = _C_LABEL(_thread_sys_ ## x);	\
	ENTRY(_thread_sys_ ## x)
#define SYSENTRY_HIDDEN(x)				\
	ENTRY(_thread_sys_ ## x)
#define __END_HIDDEN(x)					\
	END(_thread_sys_ ## x);				\
	_HIDDEN_FALIAS(x, _thread_sys_ ## x);		\
	END(_HIDDEN(x))
#define __END(x)					\
	__END_HIDDEN(x); END(x)

#define SYSTRAP(x) \
	ldr	r12, =SYS_ ## x;		\
	swi	0

#define	CERROR		_C_LABEL(__cerror)

#define _SYSCALL_NOERROR(x,y)						\
	SYSENTRY(x);							\
	SYSTRAP(y)
#define _SYSCALL_HIDDEN_NOERROR(x,y)					\
	SYSENTRY_HIDDEN(x);						\
	SYSTRAP(y)

#define _SYSCALL(x, y)							\
	_SYSCALL_NOERROR(x,y);						\
	bcs CERROR
#define _SYSCALL_HIDDEN(x, y)						\
	_SYSCALL_HIDDEN_NOERROR(x,y);					\
	bcs CERROR

#define SYSCALL_NOERROR(x)						\
	_SYSCALL_NOERROR(x,x)

#define SYSCALL(x)							\
	_SYSCALL(x,x)


#define PSEUDO_NOERROR(x,y)						\
	_SYSCALL_NOERROR(x,y);						\
	mov r15, r14;							\
	__END(x)

#define PSEUDO(x,y)							\
	_SYSCALL(x,y);							\
	mov r15, r14;							\
	__END(x)
#define PSEUDO_HIDDEN(x,y)						\
	_SYSCALL_HIDDEN(x,y);						\
	mov r15, r14;							\
	__END_HIDDEN(x)


#define RSYSCALL_NOERROR(x)						\
	PSEUDO_NOERROR(x,x)

#define RSYSCALL(x)							\
	PSEUDO(x,x)
#define RSYSCALL_HIDDEN(x)						\
	PSEUDO_HIDDEN(x,x)
#define SYSCALL_END(x)							\
	__END(x)
#define SYSCALL_END_HIDDEN(x)						\
	__END_HIDDEN(x)

	.globl	CERROR
@


1.15
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.14 2015/10/23 04:39:24 guenther Exp $	*/
d38 1
a38 1
#include <machine/asm.h>
a41 23
/*
 * We define a hidden alias with the prefix "_libc_" for each global symbol
 * that may be used internally.  By referencing _libc_x instead of x, other
 * parts of libc prevent overriding by the application and avoid unnecessary
 * relocations.
 */
#define _HIDDEN(x)		_libc_##x
#define _HIDDEN_ALIAS(x,y)			\
	STRONG_ALIAS(_HIDDEN(x),y);		\
	.hidden _HIDDEN(x)
#define _HIDDEN_FALIAS(x,y)			\
	_HIDDEN_ALIAS(x,y);			\
	.type _HIDDEN(x),#function

/*
 * For functions implemented in ASM that aren't syscalls.
 *   END_STRONG(x)	Like DEF_STRONG() in C; for standard/reserved C names
 *   END_WEAK(x)	Like DEF_WEAK() in C; for non-ISO C names
 */
#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
#define	END_WEAK(x)	END_STRONG(x); .weak x


d70 1
a70 1
	bcs PIC_SYM(CERROR, PLT)
d73 1
a73 1
	bcs PIC_SYM(CERROR, PLT)
@


1.14
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.13 2015/09/10 13:29:09 guenther Exp $	*/
a82 1
#define	_CERROR		_C_LABEL(___cerror)
@


1.13
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

alpha, arm, m88k, sh, sparc, and vax assistance miod@@
hppa assistance kettenis@@
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.12 2015/08/31 06:48:24 deraadt Exp $	*/
d130 2
@


1.12
log
@use #function rather than @@function on arm
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.11 2015/08/31 02:53:56 guenther Exp $	*/
d71 6
d108 2
a109 1
	mov r15, r14
d113 2
a114 1
	mov r15, r14
d117 2
a118 1
	mov r15, r14
d128 2
@


1.11
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.10 2015/08/26 01:54:09 guenther Exp $	*/
d54 1
a54 1
	.type _HIDDEN(x),@@function
@


1.10
log
@Hide many (194!) symbols that nothing should be using.
Delete exect(2); it wasn't portable across archs and nothing used it.

ports test build by naddy@@
ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.9 2015/04/07 01:27:06 guenther Exp $	*/
d40 24
@


1.9
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.8 2015/03/31 12:31:19 jsing Exp $	*/
a53 1
#define	CURBRK		_C_LABEL(__curbrk)
@


1.8
log
@Stop encoding the syscall number in the swi instruction - this has been
unused for around 8 years, when the kernel ABI was changed to use the
syscall number specified in r12.

ok miod@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.7 2014/06/04 20:13:49 matthew Exp $	*/
d45 2
d59 3
d66 3
d84 3
d94 2
@


1.7
log
@Apply "unifdef -D__STDC__" to libc/arch/*/SYS.h

A while back, pascal@@ converted our system call stubs from using "cpp
| as" to "cc -x assembler-with-cpp", so there's no need to stay
compatible with ancient preprocessor semantics.

ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.6 2013/12/24 05:31:13 deraadt Exp $	*/
a39 1
#include <arm/swi.h>
d47 2
a48 2
			ldr	r12, =SYS_ ## x;		\
			swi SWI_OS_NETBSD | SYS_ ## x
@


1.6
log
@yup, we do ELF
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.5 2011/04/04 12:42:39 guenther Exp $	*/
a41 1
#ifdef __STDC__
a45 6
#else /* ! __STDC__ */
#define SYSENTRY(x)					\
	.weak _C_LABEL(x);				\
	_C_LABEL(x) = _C_LABEL(_thread_sys_/**/x);	\
	ENTRY(_thread_sys_/**/x)
#endif /* ! __STDC__ */
a46 1
#ifdef __STDC__
a49 5
#else
#define SYSTRAP(x) \
			ldr	r12, =SYS_/**/x;		\
			swi SWI_OS_NETBSD | SYS_/**/x
#endif
@


1.5
log
@Move __cerror to ___cerror with a weak alias so that rthreads can override it.
On mips64, also correct the name called from plain cerror to __cerror.

"looks correct" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.4 2006/11/07 21:30:36 drahn Exp $	*/
a63 1
#ifdef __ELF__
a66 4
#else
#define	CERROR		_ASM_LABEL(cerror)
#define	CURBRK		_ASM_LABEL(curbrk)
#endif
@


1.4
log
@Load the syscall number into the scratch register (r12) so that we dont
need the copyin.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.3 2004/03/01 13:41:23 drahn Exp $	*/
d66 1
@


1.3
log
@fix weak aliases for _thread_sys functions, proper libpthead linking.
rewrittent to more closely model other archs. ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.2 2004/02/01 05:40:52 drahn Exp $	*/
d56 1
d60 1
@


1.2
log
@ARGH, forgot tags.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 14
a56 2
#define _CONCAT(x,y)	x##y
#define SYSTRAP(x)	swi SWI_OS_NETBSD | SYS_ ## x
d58 2
a59 2
#define _CONCAT(x,y)	x/**/y
#define SYSTRAP(x)	swi SWI_OS_NETBSD | SYS_/**/x
d71 1
a71 1
	ENTRY(x);							\
a73 16
#define ALIAS(x,y)              .weak y; .set y,_CONCAT(x,y);


#ifdef __STDC__
#define SYSENTRY(x)					\
	.weak _C_LABEL(x);				\
	_C_LABEL(x) = _C_LABEL(_thread_sys_ ## x);	\
	ENTRY(_thread_sys_ ## x)
#else /* ! __STDC__ */
#define SYSENTRY(x)					\
	.weak _C_LABEL(x);				\
	_C_LABEL(x) = _C_LABEL(_thread_sys_/**/x);	\
	ENTRY(_thread_sys_/**/x)
#endif /* ! __STDC__ */


a98 9

#ifdef WEAK_ALIAS
#define	WSYSCALL(weak,strong)						\
	WEAK_ALIAS(weak,strong);					\
	PSEUDO(strong,weak)
#else
#define	WSYSCALL(weak,strong)						\
	PSEUDO(weak,weak)
#endif
@


1.1
log
@arm libc support. From NetBSD. currently supports softfloat.
@
text
@d1 1
@

