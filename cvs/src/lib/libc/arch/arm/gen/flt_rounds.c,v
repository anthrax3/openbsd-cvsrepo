head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.3.0.42
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.34
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.38
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.36
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.32
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.30
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.28
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.26
	OPENBSD_5_0:1.3.0.24
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.22
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.20
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.16
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.18
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.14
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2015.10.27.05.54.49;	author guenther;	state Exp;
branches;
next	1.4;
commitid	GqevjOlUxm0Irj52;

1.4
date	2015.10.18.19.30.39;	author guenther;	state Exp;
branches;
next	1.3;
commitid	fgsLUCqFZ9Hu7Rx3;

1.3
date	2006.02.06.17.03.17;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.01.05.40.52;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.30.40;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Wrap the remaining math functions in libc: __fpclassify*(), __flt_rounds(),
and ldexp().

ok millert@@
@
text
@/*	$OpenBSD: flt_rounds.c,v 1.4 2015/10/18 19:30:39 guenther Exp $	*/
/*	$NetBSD: flt_rounds.c,v 1.1 2000/12/29 20:13:48 bjh21 Exp $	*/

/*
 * Copyright (c) 1996 Mark Brinicombe
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Mark Brinicombe
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <ieeefp.h>
#include <float.h>

static const int map[] = {
	1,	/* round to nearest */
	2,	/* round to positive infinity */
	3,	/* round to negative infinity */
	0	/* round to zero */
};

/*
 * Return the current FP rounding mode
 *
 * Returns:
 *	0 - round to zero
 *	1 - round to nearest
 *	2 - round to postive infinity
 *	3 - round to negative infinity
 *
 * ok all we need to do is get the current FP rounding mode
 * index our map table and return the appropriate value.
 *
 * HOWEVER:
 * The ARM FPA codes the rounding mode into the actual FP instructions
 * so there is no such thing as a global rounding mode.
 * The default is round to nearest if rounding is not explicitly specified.
 * FP instructions generated by GCC will not explicitly specify a rounding
 * mode.
 *
 * So the best we can do it to return the rounding mode FP instructions
 * use if rounding is not specified which is round to nearest.
 *
 * This could change in the future with new floating point emulators or
 * soft float FP libraries.
 */

int
__flt_rounds()
{
	return(map[fpgetround()]);
}
DEF_STRONG(__flt_rounds);
@


1.4
log
@Pull in <float.h> instead of declaring __flt_rounds() locally

ok miod@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: flt_rounds.c,v 1.3 2006/02/06 17:03:17 jmc Exp $	*/
d77 1
@


1.3
log
@typos from alexey dobriyan;
@
text
@d1 1
a1 1
/*	$OpenBSD: flt_rounds.c,v 1.2 2004/02/01 05:40:52 drahn Exp $	*/
d37 1
a70 2

int __flt_rounds(void);
@


1.2
log
@ARGH, forgot tags.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 1
a60 1
 * The default is round to nearest if rounding is not explictly specified.
@


1.1
log
@arm libc support. From NetBSD. currently supports softfloat.
@
text
@d1 1
@

