head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.48
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.50
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.42
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.46
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.44
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.40
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.38
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.36
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.34
	OPENBSD_5_0:1.2.0.32
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.30
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.28
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.24
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.26
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.22
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.20
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2016.08.07.02.02.57;	author guenther;	state Exp;
branches;
next	1.4;
commitid	D0iNybKFKftzzOaF;

1.4
date	2016.08.06.19.16.09;	author guenther;	state Exp;
branches;
next	1.3;
commitid	3wTWcmodIMVBuFUY;

1.3
date	2016.05.23.00.18.57;	author guenther;	state Exp;
branches;
next	1.2;
commitid	NDWaRB3omHTr2Q6W;

1.2
date	2004.02.01.05.40.52;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.30.40;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Add XOR cookies for lr and sp.  Stop saving/restoring r12 to/from the jmpbuf.
Switch from calling obsolete sig{block,setmask} to directly using the
sigprocmask syscall.

ok deraadt@@ kettenis@@
@
text
@/*	$OpenBSD: _setjmp.S,v 1.4 2016/08/06 19:16:09 guenther Exp $	*/
/*	$NetBSD: _setjmp.S,v 1.5 2003/04/05 23:08:51 bjh21 Exp $	*/

/*
 * Copyright (c) 1997 Mark Brinicombe
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mark Brinicombe
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "DEFS.h"
#include <machine/setjmp.h>

	.section	.openbsd.randomdata,"aw",%progbits
	.align 4
	.globl	__jmpxor
__jmpxor:
	.zero 4*2		/* (sp, lr) */
	END(__jmpxor)
	.type	__jmpxor,%object


/*
 * C library -- _setjmp, _longjmp
 *
 *	_longjmp(a,v)
 * will generate a "return(v)" from the last call to
 *	_setjmp(a)
 * by restoring registers from the stack.
 * The previous signal state is NOT restored.
 *
 * Note: r0 is the return value
 *       r1-r3 are scratch registers in functions
 */

ENTRY(_setjmp)
	ldr	r1, .L_setjmp_magic
	str	r1, [r0], #4
	ldr	r2, .L_jmpxor_setjmp
1:	add	r2, pc, r2			/* r2 = &__jmpxor */
	ldr	r3, [r2], #4			/* r3 = __jmpxor[1] */
	ldr	r2, [r2] 			/* r2 = __jmpxor[0] */
	eor	r2, r13, r2			/* r2 = sp ^ __jmpxor[0] */
	eor	r3, lr, r3			/* r3 = lr ^ __jmpxor[1] */

#ifdef SOFTFLOAT
	add	r0, r0, #52
#else
	/* Store fp registers */
	sfm	f4, 4, [r0], #48
	/* Store fpsr */
	rfs	r1
	str	r1, [r0], #0x0004
#endif	/* SOFTFLOAT */
	/* Store integer registers */
	stmia	r0, {r2-r11}

	mov	r0, #0x00000000
	mov	r2, r0				/* overwrite __jmpxor copies */
	mov	r3, r0
	mov	pc, lr

.L_setjmp_magic:
	.word	_JB_MAGIC__SETJMP
.L_jmpxor_setjmp:
	.word	__jmpxor - 1b
END_STRONG(_setjmp)

ENTRY(_longjmp)
	ldr	r2, .L_setjmp_magic
	ldr	r3, [r0], #4
	teq	r2, r3
	bne	botch

#ifdef SOFTFLOAT
	add	r0, r0, #52
#else
	/* Restore fp registers */
	lfm	f4, 4, [r0], #48
	/* Restore fpsr */
	ldr	r4, [r0], #0x0004
	wfs	r4
#endif	/* SOFTFLOAT */
	/* Restore integer registers */
	ldmia	r0, {r2-r11}

	ldr	r0, .L_jmpxor_longjmp
1:	add	r0, pc, r0			/* r0 = &__jmpxor */
	ldr	lr, [r0], #4			/* lr = __jmpxor[1] */
	eor	lr, r3, lr			/* lr ^= jmpbuf[LR] */
	ldr	r0, [r0] 			/* r0 = __jmpxor[0] */
	eor	r13, r0, r2		/* sp = __jmpxor[0] ^ jmpbuf[SP] */
	mov	r2, r1				/* overwrite __jmpxor copies */
	mov	r3, r1

	/* Validate sp and lr */
	teq	sp, #0
	teqne	lr, #0
	beq	botch

	/* Set return value */
	mov	r0, r1
	teq	r0, #0x00000000
	moveq	r0, #0x00000001
	mov	pc, lr

.L_jmpxor_longjmp:
	.word	__jmpxor - 1b

	/* validation failed, die die die. */
botch:
	bl	_HIDDEN(abort)
	b	. - 8		/* Cannot get here */
END_STRONG(_longjmp)
@


1.4
log
@Use internal names for __errno, _memcpy, memset, and {,_}{set,long}jmp
Eliminate pointless use of PIC_SYM()
Split out DEFS.h from SYS.h like some other archs

ok kettenis@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _setjmp.S,v 1.3 2016/05/23 00:18:57 guenther Exp $	*/
d39 9
d64 7
d81 1
a81 1
        stmia	r0, {r4-r14}
d83 4
a86 2
        mov	r0, #0x00000000
        mov	r15, r14
d90 2
d109 2
a110 2
       	/* Restore integer registers */
        ldmia	r0, {r4-r14}
d112 10
a121 1
	/* Validate sp and r14 */
d123 1
a123 1
	teqne	r14, #0
d130 4
a133 1
	mov	r15, r14
@


1.3
log
@Stop supporting longjmperror(); it's not used, not portable, and the checks
longjmp performs can't really be relied upon, even after we got rid of the
false positives...

ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _setjmp.S,v 1.2 2004/02/01 05:40:52 drahn Exp $	*/
d36 1
a36 1
#include <machine/asm.h>
d72 1
d105 1
a105 1
	bl	PIC_SYM(_libc_abort, PLT)
d107 1
@


1.2
log
@ARGH, forgot tags.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d104 1
a104 2
	bl	PIC_SYM(_C_LABEL(longjmperror), PLT)
	bl	PIC_SYM(_C_LABEL(abort), PLT)
@


1.1
log
@arm libc support. From NetBSD. currently supports softfloat.
@
text
@d1 1
@

