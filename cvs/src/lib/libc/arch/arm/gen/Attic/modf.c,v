head	1.3;
access;
symbols
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2009.04.19.16.42.05;	author martynas;	state dead;
branches;
next	1.2;

1.2
date	2005.08.07.16.40.14;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.03.16.45.35;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- ldexp implementation has issues.  switch to the one from libm
- remove frexp in hppa64, cloned from hppa
- move generic ieee754 implementations of modf and ldexp to gen
ok kettenis@@, "looks good" millert@@
@
text
@/*	$OpenBSD: modf.c,v 1.2 2005/08/07 16:40:14 espie Exp $	*/
/*	$NetBSD: modf.c,v 1.1 1995/02/10 17:50:25 cgd Exp $	*/

/*
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/types.h>
#include <machine/ieee.h>
#include <errno.h>
#include <math.h>

/*
 * double modf(double val, double *iptr)
 * returns: f and i such that |f| < 1.0, (f + i) = val, and
 *	sign(f) == sign(i) == sign(val).
 *
 * Beware signedness when doing subtraction, and also operand size!
 */
double
modf(val, iptr)
	double val, *iptr;
{
	union doub {
		double v;
		struct ieee_double s;
	} u, v;
	u_int64_t frac;

	/*
	 * If input is Inf or NaN, return it and leave i alone.
	 */
	u.v = val;
	if (u.s.dbl_exp == DBL_EXP_INFNAN)
		return (u.v);

	/*
	 * If input can't have a fractional part, return
	 * (appropriately signed) zero, and make i be the input.
	 */
	if ((int)u.s.dbl_exp - DBL_EXP_BIAS > DBL_FRACBITS - 1) {
		*iptr = u.v;
		v.v = 0.0;
		v.s.dbl_sign = u.s.dbl_sign;
		return (v.v);
	}

	/*
	 * If |input| < 1.0, return it, and set i to the appropriately
	 * signed zero.
	 */
	if (u.s.dbl_exp < DBL_EXP_BIAS) {
		v.v = 0.0;
		v.s.dbl_sign = u.s.dbl_sign;
		*iptr = v.v;
		return (u.v);
	}

	/*
	 * There can be a fractional part of the input.
	 * If you look at the math involved for a few seconds, it's
	 * plain to see that the integral part is the input, with the
	 * low (DBL_FRACBITS - (exponent - DBL_EXP_BIAS)) bits zeroed,
	 * the fractional part is the part with the rest of the
	 * bits zeroed.  Just zeroing the high bits to get the
	 * fractional part would yield a fraction in need of
	 * normalization.  Therefore, we take the easy way out, and
	 * just use subtraction to get the fractional part.
	 */
	v.v = u.v;
	/* Zero the low bits of the fraction, the sleazy way. */
	frac = ((u_int64_t)v.s.dbl_frach << 32) + v.s.dbl_fracl;
	frac >>= DBL_FRACBITS - (u.s.dbl_exp - DBL_EXP_BIAS);
	frac <<= DBL_FRACBITS - (u.s.dbl_exp - DBL_EXP_BIAS);
	v.s.dbl_fracl = frac & 0xffffffff;
	v.s.dbl_frach = frac >> 32;
	*iptr = v.v;

	u.v -= v.v;
	u.s.dbl_sign = v.s.dbl_sign;
	return (u.v);
}
@


1.2
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/*	$OpenBSD: modf.c,v 1.1 2004/02/03 16:45:35 drahn Exp $	*/
@


1.1
log
@Correct modf (from alpha) instead of one which doesnt compile from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: modf.c,v 1.4 2003/03/10 04:02:49 david Exp $	*/
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: modf.c,v 1.4 2003/03/10 04:02:49 david Exp $";
#endif /* LIBC_SCCS and not lint */
@

