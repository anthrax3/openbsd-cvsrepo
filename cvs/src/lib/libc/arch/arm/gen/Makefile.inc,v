head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.24
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.22
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.18
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.14
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.16
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.8
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.12
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.10
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.6
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.4
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.11.0.8
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.6
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.10
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.8
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6;
locks; strict;
comment	@# @;


1.15
date	2012.04.19.19.14.56;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2012.04.12.16.14.09;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2011.07.08.22.28.33;	author martynas;	state Exp;
branches;
next	1.12;

1.12
date	2011.07.08.19.21.41;	author martynas;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.21.09.34.50;	author martynas;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.19.16.42.05;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.24.09.31.06;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.29.21.38.08;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.01.15.12.29;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.03.16.45.35;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.02.16.09.45;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.02.16.05.53;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.02.16.01.49;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.01.05.40.52;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.30.40;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.15
log
@rely on the compiler giving us a built-in alloca.  any new architecture
or compiler we use will.
ok millert
@
text
@# $OpenBSD: Makefile.inc,v 1.14 2012/04/12 16:14:09 deraadt Exp $
# $NetBSD: Makefile.inc,v 1.6 2003/08/01 17:03:47 lukem Exp $

SRCS+=	byte_swap_2.S byte_swap_4.S divsi3.S fabs.c flt_rounds.c infinity.c
SRCS+=	ldexp.c modf.c nan.c
SRCS+=	setjmp.S _setjmp.S sigsetjmp.S
@


1.14
log
@alloca.c cannot be used
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.13 2011/07/08 22:28:33 martynas Exp $
a6 2

SRCS+=	alloca.S
@


1.13
log
@Revert (leaving the complex math part alone).  Some stuff is depending
on this historical behavior;  so we're stuck in this stupid situation.
No cookie for me.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.11 2009/04/21 09:34:50 martynas Exp $
a8 1
LSRCS+= alloca.c
@


1.12
log
@Move fabs(3), frexp(3), and modf(3) to libm--nothing has been using
them in libc for a very long time.  OK guenther@@.
@
text
@d4 2
a5 2
SRCS+=	byte_swap_2.S byte_swap_4.S divsi3.S flt_rounds.c infinity.c
SRCS+=	ldexp.c nan.c
@


1.11
log
@remove from gen so that lint doesn't check gen if assembly versions
are available.  spotted by theo
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.10 2009/04/19 16:42:05 martynas Exp $
d4 2
a5 2
SRCS+=	byte_swap_2.S byte_swap_4.S divsi3.S fabs.c flt_rounds.c infinity.c
SRCS+=	ldexp.c modf.c nan.c
@


1.10
log
@- ldexp implementation has issues.  switch to the one from libm
- remove frexp in hppa64, cloned from hppa
- move generic ieee754 implementations of modf and ldexp to gen
ok kettenis@@, "looks good" millert@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.9 2008/07/24 09:31:06 martynas Exp $
d4 2
a5 2
SRCS+=	byte_swap_2.S byte_swap_4.S divsi3.S fabs.c flt_rounds.c infinity.c \
	nan.c
@


1.9
log
@- move isinf, isnan dups to gen, since most is ieee 754
- is{inf,nan} should be macros for real-floating, so rename to
__is{inf,nan}, per C99
- implement C99 __fpclassify(), __fpclassifyf(), __isfinite(),
__isfinitef(), __isnormal(), __isnormalf(), __signbit(), __signbitf()
- long functions added, but not yet enabled, till ieee.h is fixed
- implement vax equivalents of the functions
- reimplement isinff, isnanf in a better way, and move to libc
- add qnan bytes for all archs
- bump major
man pages will follow
ok millert@@.  arm bits looked over by drahn@@
discussed w/ theo, who showed the right direction, to put these
functions in libc
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.8 2005/11/29 21:38:08 deraadt Exp $
d6 1
a6 1
SRCS+=	setjmp.S _setjmp.S sigsetjmp.S modf.c ldexp.c
@


1.8
log
@if we pull in a .S file, we must fake out the lint with a .c file
for this first cut, we will do this for alloca() using alloca.c by
adding it to LSRCS
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.7 2005/02/01 15:12:29 millert Exp $
d4 3
a6 2
SRCS+=	byte_swap_2.S byte_swap_4.S divsi3.S fabs.c flt_rounds.c infinity.c
SRCS+=	setjmp.S _setjmp.S sigsetjmp.S isinf.c isnan.c modf.c ldexp.c
@


1.7
log
@Replace broken frexp() with a working one from FreeBSD.  There's
no need to have a copy for each platform with ieee floating point,
only vax needs a special version (which probably has similar bugs).
OK and with help from otto@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.6 2004/02/03 16:45:35 drahn Exp $
d4 2
a5 3
SRCS+=	alloca.S byte_swap_2.S byte_swap_4.S divsi3.S \
	fabs.c flt_rounds.c \
	infinity.c
d7 2
a8 8
SRCS+=	setjmp.S
SRCS+=	_setjmp.S
SRCS+=	sigsetjmp.S

SRCS+= isinf.c isnan.c

SRCS+= modf.c
SRCS+= ldexp.c
@


1.6
log
@Correct modf (from alpha) instead of one which doesnt compile from NetBSD
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.5 2004/02/02 16:09:45 drahn Exp $
a15 1
SRCS+= frexp.c
@


1.5
log
@add missing frexp
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.4 2004/02/02 16:05:53 drahn Exp $
d14 1
a14 1
SRCS+= modf_ieee754.c
@


1.4
log
@cleanup
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.3 2004/02/02 16:01:49 drahn Exp $
d16 1
@


1.3
log
@Use the real fpgetround found in softfloat.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.2 2004/02/01 05:40:52 drahn Exp $
a7 5
# Common ieee754 constants and functions
#SRCS+=	nanf_ieee754.c	# infinity is ``different'' on arm, use local version
#SRCS+=	frexp_ieee754.c isinf_ieee754.c isinfl_ieee754.c isnan_ieee754.c
#SRCS+=	isnanl_ieee754.c ldexp_ieee754.c modf_ieee754.c

a8 1
#SRCS+=	__setjmp14.S
a10 10
#SRCS+=	__sigsetjmp14.S

#SRCS+=	makecontext.c resumecontext.c swapcontext.S

#SRCS+=	_lwp.c

SRCS.arm.gen=	Lint_bswap16.c Lint_bswap32.c Lint_swapcontext.c
LSRCS+=		${SRCS.arm.gen}
DPSRCS+=	${SRCS.arm.gen}
CLEANFILES+=	${SRCS.arm.gen}
@


1.2
log
@ARGH, forgot tags.
@
text
@d1 1
a1 1
# $OpenBSD$
a28 1
SRCS+= fpgetround.S
@


1.1
log
@arm libc support. From NetBSD. currently supports softfloat.
@
text
@d1 1
@

