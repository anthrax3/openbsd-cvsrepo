head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.10
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.26
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.18
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.22
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.20
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.20
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.16
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.14
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.12
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.4;
commitid	lTMF8Y3C9fQGd6jQ;

1.4
date	2009.12.11.05.10.17;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.07.16.40.15;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.09.16.14.02;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.17.30.59;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@/*	$OpenBSD: bcopy.S,v 1.4 2009/12/11 05:10:17 miod Exp $ */
/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "SYS.h"

/* bcopy(s1, s2, n) */


LEAF(bcopy, 0)
	.set	noreorder
	daddu	t0, a0, a2		# t0 = end of s1 region
	sltu	t1, a1, t0
	sltu	t2, a0, a1
	and	t1, t1, t2		# t1 = true if from < to < (from+len)
	beq	t1, zero, forward	# non overlapping, do forward copy
	slt	t2, a2, 12		# check for small copy

	ble	a2, zero, 2f
	daddu	t1, a1, a2		# t1 = end of to region
1:
	lb	v0, -1(t0)		# copy bytes backwards,
	dsubu	t0, t0, 1		#  does not happen often so do slow way
	dsubu	t1, t1, 1
	bne	t0, a0, 1b
	sb	v0, 0(t1)
2:
	j	ra
	nop
forward:
	bne	t2, zero, smallcpy	# do a small bcopy
	xor	v0, a0, a1		# compare low two bits of addresses
	and	v0, v0, 3
	dsubu	a3, zero, a1		# compute # bytes to word align address
	beq	v0, zero, aligned	# addresses can be word aligned
	and	a3, a3, 3

	beq	a3, zero, 1f
	dsubu	a2, a2, a3		# subtract from remaining count
	LWHI	v0, 0(a0)		# get next 4 bytes (unaligned)
	LWLO	v0, 3(a0)
	daddu	a0, a0, a3
	SWHI	v0, 0(a1)		# store 1, 2, or 3 bytes to align a1
	daddu	a1, a1, a3
1:
	and	v0, a2, 3		# compute number of words left
	dsubu	a3, a2, v0
	move	a2, v0
	daddu	a3, a3, a0		# compute ending address
2:
	LWHI	v0, 0(a0)		# copy words a0 unaligned, a1 aligned
	LWLO	v0, 3(a0)
	daddu	a0, a0, 4
	daddu	a1, a1, 4
	bne	a0, a3, 2b
	sw	v0, -4(a1)
	b	smallcpy
	nop
aligned:
	beq	a3, zero, 1f
	dsubu	a2, a2, a3		# subtract from remaining count
	LWHI	v0, 0(a0)		# copy 1, 2, or 3 bytes to align
	daddu	a0, a0, a3
	SWHI	v0, 0(a1)
	daddu	a1, a1, a3
1:
	and	v0, a2, 3		# compute number of whole words left
	dsubu	a3, a2, v0
	move	a2, v0
	daddu	a3, a3, a0		# compute ending address
2:
	lw	v0, 0(a0)		# copy words
	daddu	a0, a0, 4
	daddu	a1, a1, 4
	bne	a0, a3, 2b
	sw	v0, -4(a1)
smallcpy:
	ble	a2, zero, 2f
	daddu	a3, a2, a0		# compute ending address
1:
	lbu	v0, 0(a0)		# copy bytes
	daddu	a0, a0, 1
	daddu	a1, a1, 1
	bne	a0, a3, 1b
	sb	v0, -1(a1)
2:
	j	ra
	nop
	.set	reorder
END_WEAK(bcopy)
@


1.4
log
@More changes to avoid truncating 64 bit pointers to 32 bits and sign-extending
them; allows userland with stack beyond 2GB to run.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcopy.S,v 1.3 2005/08/07 16:40:15 espie Exp $ */
d34 1
a34 1
#include <machine/asm.h>
d119 1
a119 1
END(bcopy)
@


1.3
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d41 1
a41 1
	addu	t0, a0, a2		# t0 = end of s1 region
d49 1
a49 1
	addu	t1, a1, a2		# t1 = end of to region
d52 2
a53 2
	subu	t0, t0, 1		#  does not happen often so do slow way
	subu	t1, t1, 1
d63 1
a63 1
	subu	a3, zero, a1		# compute # bytes to word align address
d68 1
a68 1
	subu	a2, a2, a3		# subtract from remaining count
d71 1
a71 1
	addu	a0, a0, a3
d73 1
a73 1
	addu	a1, a1, a3
d76 1
a76 1
	subu	a3, a2, v0
d78 1
a78 1
	addu	a3, a3, a0		# compute ending address
d82 2
a83 2
	addu	a0, a0, 4
	addu	a1, a1, 4
d90 1
a90 1
	subu	a2, a2, a3		# subtract from remaining count
d92 1
a92 1
	addu	a0, a0, a3
d94 1
a94 1
	addu	a1, a1, a3
d97 1
a97 1
	subu	a3, a2, v0
d99 1
a99 1
	addu	a3, a3, a0		# compute ending address
d102 2
a103 2
	addu	a0, a0, 4
	addu	a1, a1, 4
d108 1
a108 1
	addu	a3, a2, a0		# compute ending address
d111 2
a112 2
	addu	a0, a0, 1
	addu	a1, a1, 1
@


1.2
log
@mips64 is now going ABI64 and shared library support!
String functions need some optimization/rewrite to take full advantage.
@
text
@d1 1
a34 5

#if defined(LIBC_SCCS)
	.text
	.asciz "$OpenBSD: bcopy.S,v 1.1 2004/08/11 17:30:59 pefo Exp $"
#endif /* LIBC_SCCS */
@


1.1
log
@Move mips to mips64
@
text
@d37 1
a37 1
	.asciz "$OpenBSD: bcopy.S,v 1.6 2003/06/02 20:18:32 millert Exp $"
d43 1
a43 1
LEAF(bcopy)
@

