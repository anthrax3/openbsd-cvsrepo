head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.4.0.42
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.44
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.36
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.40
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.38
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.34
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.32
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.30
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.28
	OPENBSD_5_0:1.4.0.26
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.24
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.22
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.18
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.20
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.16
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.14
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.12
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@# @;


1.7
date	2016.05.30.02.06.02;	author guenther;	state Exp;
branches;
next	1.6;
commitid	mWsLt72Wk0GespyS;

1.6
date	2016.05.23.00.18.57;	author guenther;	state Exp;
branches;
next	1.5;
commitid	NDWaRB3omHTr2Q6W;

1.5
date	2016.05.08.21.50.58;	author guenther;	state Exp;
branches;
next	1.4;
commitid	rz0miRqnsJbYww3f;

1.4
date	2005.08.07.16.40.15;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.10.12.45.35;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.09.16.14.02;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.17.30.59;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Do setjmp cookies for gp, sp, and ra

endian testing and ok deraadt@@
ok visa@@
@
text
@/*	$OpenBSD: _setjmp.S,v 1.6 2016/05/23 00:18:57 guenther Exp $ */

/*
 * Copyright (c) 2002 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of Opsycon AB nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include "SYS.h"
#include <machine/regnum.h>
#include <machine/signal.h>

	.globl	__jmpxor

/*
 * _setjmp, _longjmp (not restoring signal state)
 *
 * XXX FPSET should probably be taken from SR setting. hmmm...
 *  GPOFF and FRAMESIZE must be the same for both _setjmp and _longjmp!
 *
 */

FRAMESZ= MKFSIZ(0,4)
GPOFF= FRAMESZ-2*REGSZ

LEAF(_setjmp, FRAMESZ)
	PTR_SUBU sp, FRAMESZ
	SETUP_GP64(GPOFF, _setjmp)
	.set	noreorder
	LI	v0, 0xACEDBADE			# sigcontext magic number
	REG_S	v0, SC_REGS+ZERO*REGSZ(a0)
	REG_S	s0, SC_REGS+S0*REGSZ(a0)
	REG_S	s1, SC_REGS+S1*REGSZ(a0)
	REG_S	s2, SC_REGS+S2*REGSZ(a0)
	REG_S	s3, SC_REGS+S3*REGSZ(a0)
	REG_S	s4, SC_REGS+S4*REGSZ(a0)
	REG_S	s5, SC_REGS+S5*REGSZ(a0)
	REG_S	s6, SC_REGS+S6*REGSZ(a0)
	REG_S	s7, SC_REGS+S7*REGSZ(a0)
	REG_S	s8, SC_REGS+S8*REGSZ(a0)
	LA	t0, __jmpxor			# load cookie addr
	REG_L	v0, 0(t0)			# load gp cookie
	REG_L	v1, GPOFF(sp)
	xor	v0, v0, v1
	REG_S	v0, SC_REGS+GP*REGSZ(a0)
	REG_L	v0, REGSZ(t0)			# load sp cookie over gp cookie
	PTR_ADDU v1, sp, FRAMESZ
	xor	v0, v0, v1
	REG_S	v0, SC_REGS+SP*REGSZ(a0)
	REG_L	t0, 2*REGSZ(t0)			# load ra cookie over addr
	xor	t0, ra, t0
	REG_S	t0, SC_PC(a0)
	cfc1	t0, $31				# overwrite ra cookie
#if _MIPS_FPSET == 32
	sdc1	$f20, SC_FPREGS+((F20-F0)*REGSZ)(a0)
	sdc1	$f21, SC_FPREGS+((F21-F0)*REGSZ)(a0)
	sdc1	$f22, SC_FPREGS+((F22-F0)*REGSZ)(a0)
	sdc1	$f23, SC_FPREGS+((F23-F0)*REGSZ)(a0)
	sdc1	$f24, SC_FPREGS+((F24-F0)*REGSZ)(a0)
	sdc1	$f25, SC_FPREGS+((F25-F0)*REGSZ)(a0)
	sdc1	$f26, SC_FPREGS+((F26-F0)*REGSZ)(a0)
	sdc1	$f27, SC_FPREGS+((F27-F0)*REGSZ)(a0)
	sdc1	$f28, SC_FPREGS+((F28-F0)*REGSZ)(a0)
	sdc1	$f29, SC_FPREGS+((F29-F0)*REGSZ)(a0)
	sdc1	$f30, SC_FPREGS+((F30-F0)*REGSZ)(a0)
	sdc1	$f31, SC_FPREGS+((F31-F0)*REGSZ)(a0)
#else
	swc1	$f20, SC_FPREGS+((F20-F0)*REGSZ)(a0)
	swc1	$f21, SC_FPREGS+((F21-F0)*REGSZ)(a0)
	swc1	$f22, SC_FPREGS+((F22-F0)*REGSZ)(a0)
	swc1	$f23, SC_FPREGS+((F23-F0)*REGSZ)(a0)
	swc1	$f24, SC_FPREGS+((F24-F0)*REGSZ)(a0)
	swc1	$f25, SC_FPREGS+((F25-F0)*REGSZ)(a0)
	swc1	$f26, SC_FPREGS+((F26-F0)*REGSZ)(a0)
	swc1	$f27, SC_FPREGS+((F27-F0)*REGSZ)(a0)
	swc1	$f28, SC_FPREGS+((F28-F0)*REGSZ)(a0)
	swc1	$f29, SC_FPREGS+((F29-F0)*REGSZ)(a0)
	swc1	$f30, SC_FPREGS+((F30-F0)*REGSZ)(a0)
	swc1	$f31, SC_FPREGS+((F31-F0)*REGSZ)(a0)
#endif
	REG_S	t0, SC_FPREGS+((FSR-F0)*REGSZ)(a0)
	RESTORE_GP64
	PTR_ADDU sp, FRAMESZ
	j	ra
	move	v0, zero
END_STRONG(_setjmp)

LEAF(_longjmp, FRAMESZ)
	PTR_SUBU sp, FRAMESZ
	SETUP_GP64(GPOFF, _longjmp)
	.set    noreorder
	REG_L	v0, SC_REGS+ZERO*REGSZ(a0)
	bne	v0, 0xACEDBADE, botch		# jump if error
	LA	v0, __jmpxor			# load cookie addr
	REG_L	v1, 2*REGSZ(v0)			# load ra cookie
	REG_L	ra, SC_PC(a0)
	xor	ra, ra, v1
	REG_L	s0, SC_REGS+S0*REGSZ(a0)
	REG_L	s1, SC_REGS+S1*REGSZ(a0)
	REG_L	s2, SC_REGS+S2*REGSZ(a0)
	REG_L	s3, SC_REGS+S3*REGSZ(a0)
	REG_L	s4, SC_REGS+S4*REGSZ(a0)
	REG_L	s5, SC_REGS+S5*REGSZ(a0)
	REG_L	s6, SC_REGS+S6*REGSZ(a0)
	REG_L	s7, SC_REGS+S7*REGSZ(a0)
	REG_L	s8, SC_REGS+S8*REGSZ(a0)
	REG_L	v1, 0(v0)			# load gp cookie over ra cookie
	REG_L	gp, SC_REGS+GP*REGSZ(a0)
	xor	gp, gp, v1
	REG_L	v1, REGSZ(v0)			# load sp cookie over gp cookie
	REG_L	sp, SC_REGS+SP*REGSZ(a0)
	xor	sp, sp, v1
	REG_L	v1, SC_FPREGS+((FSR-F0)*REGSZ)(a0)	# overwrite sp cookie
	ctc1	v1, $31
#if _MIPS_FPSET == 32
	ldc1	$f20, SC_FPREGS+((F20-F0)*REGSZ)(a0)
	ldc1	$f21, SC_FPREGS+((F21-F0)*REGSZ)(a0)
	ldc1	$f22, SC_FPREGS+((F22-F0)*REGSZ)(a0)
	ldc1	$f23, SC_FPREGS+((F23-F0)*REGSZ)(a0)
	ldc1	$f24, SC_FPREGS+((F24-F0)*REGSZ)(a0)
	ldc1	$f25, SC_FPREGS+((F25-F0)*REGSZ)(a0)
	ldc1	$f26, SC_FPREGS+((F26-F0)*REGSZ)(a0)
	ldc1	$f27, SC_FPREGS+((F27-F0)*REGSZ)(a0)
	ldc1	$f28, SC_FPREGS+((F28-F0)*REGSZ)(a0)
	ldc1	$f29, SC_FPREGS+((F29-F0)*REGSZ)(a0)
	ldc1	$f30, SC_FPREGS+((F30-F0)*REGSZ)(a0)
	ldc1	$f31, SC_FPREGS+((F31-F0)*REGSZ)(a0)
#else
	lwc1	$f20, SC_FPREGS+((F20-F0)*REGSZ)(a0)
	lwc1	$f21, SC_FPREGS+((F21-F0)*REGSZ)(a0)
	lwc1	$f22, SC_FPREGS+((F22-F0)*REGSZ)(a0)
	lwc1	$f23, SC_FPREGS+((F23-F0)*REGSZ)(a0)
	lwc1	$f24, SC_FPREGS+((F24-F0)*REGSZ)(a0)
	lwc1	$f25, SC_FPREGS+((F25-F0)*REGSZ)(a0)
	lwc1	$f26, SC_FPREGS+((F26-F0)*REGSZ)(a0)
	lwc1	$f27, SC_FPREGS+((F27-F0)*REGSZ)(a0)
	lwc1	$f28, SC_FPREGS+((F28-F0)*REGSZ)(a0)
	lwc1	$f29, SC_FPREGS+((F29-F0)*REGSZ)(a0)
	lwc1	$f30, SC_FPREGS+((F30-F0)*REGSZ)(a0)
	lwc1	$f31, SC_FPREGS+((F31-F0)*REGSZ)(a0)
#endif
	beql	a1, zero, 1f
	li	a1, 1		# only executed if branch taken.
1:
	j	ra
	move	v0, a1

botch:
	jal	_libc_abort
	nop
	RESTORE_GP64
	PTR_ADDU sp, FRAMESZ
END_STRONG(_longjmp)

@


1.6
log
@Stop supporting longjmperror(); it's not used, not portable, and the checks
longjmp performs can't really be relied upon, even after we got rid of the
false positives...

ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _setjmp.S,v 1.5 2016/05/08 21:50:58 guenther Exp $ */
d36 2
d53 1
a53 5
#if defined(__mips64)
	dli	v0, 0xACEDBADE			# sigcontext magic number
#else
	li	v0, 0xACEDBADE			# sigcontext magic number
#endif
d64 4
a67 1
	REG_L	v0, GPOFF(sp)
d69 3
a71 1
	PTR_ADDU v0, sp, FRAMESZ
d73 4
a76 2
	REG_S	ra, SC_PC(a0)
	cfc1	v0, $31
d104 1
a104 1
	REG_S	v0, SC_FPREGS+((FSR-F0)*REGSZ)(a0)
d117 2
d120 1
a120 1
	REG_L	v0, SC_FPREGS+((FSR-F0)*REGSZ)(a0)
d130 1
d132 2
d135 3
a137 1
	ctc1	v0, $31
@


1.5
log
@Implement longjmp directly and not on top of sigreturn.
Use the hidden symbols for internal calls to abort, longjmp, etc

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _setjmp.S,v 1.4 2005/08/07 16:40:15 espie Exp $ */
a159 2
	jal	longjmperror
	nop
@


1.4
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/*	$OpenBSD: _setjmp.S,v 1.3 2004/09/10 12:45:35 pefo Exp $ */
d32 1
a32 1
#include <machine/asm.h>
d104 1
a104 1
END(_setjmp)
d162 1
a162 1
	jal	abort
d166 1
a166 1
END(_longjmp)
@


1.3
log
@setjmp now passes all regress tests.
@
text
@d1 1
a1 1
/*	$OpenBSD: _setjmp.S,v 1.2 2004/09/09 16:14:02 pefo Exp $ */
a34 5

#if defined(LIBC_SCCS)
	.text
	.asciz "$OpenBSD: _setjmp.S,v 1.2 2004/09/09 16:14:02 pefo Exp $"
#endif /* LIBC_SCCS */
@


1.2
log
@mips64 is now going ABI64 and shared library support!
String functions need some optimization/rewrite to take full advantage.
@
text
@d1 1
a1 1
/*	$OpenBSD: _setjmp.S,v 1.1 2004/08/11 17:30:59 pefo Exp $ */
d38 1
a38 1
	.asciz "$OpenBSD: _setjmp.S,v 1.1 2004/08/11 17:30:59 pefo Exp $"
d49 1
a49 1
FRAMESZ= MKFSIZ(1,1)
d71 2
a72 1
	REG_S	gp, SC_REGS+GP*REGSZ(a0)
d158 3
a160 2
	RESTORE_GP64
	PTR_ADDU sp, FRAMESZ
@


1.1
log
@Move mips to mips64
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d38 1
a38 1
	.asciz "$OpenBSD: _setjmp.S,v 1.7 2003/06/02 20:18:31 millert Exp $"
d45 1
d48 7
a54 1
LEAF(_setjmp)
d72 2
a73 1
	REG_S	sp, SC_REGS+SP*REGSZ(a0)
d104 2
d110 3
a112 5
LEAF(_longjmp)
#ifdef ABICALLS 
	subu	sp, sp, 32
	.cprestore 16
#endif  
d157 2
d167 2
@

