head	1.11;
access;
symbols
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.18
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.10
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.14
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.12
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.20
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.16
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@# @;


1.11
date	2016.05.30.02.06.02;	author guenther;	state Exp;
branches;
next	1.10;
commitid	mWsLt72Wk0GespyS;

1.10
date	2016.05.23.00.18.57;	author guenther;	state Exp;
branches;
next	1.9;
commitid	NDWaRB3omHTr2Q6W;

1.9
date	2016.05.08.21.50.58;	author guenther;	state Exp;
branches;
next	1.8;
commitid	rz0miRqnsJbYww3f;

1.8
date	2015.09.13.07.36.58;	author guenther;	state Exp;
branches;
next	1.7;
commitid	lKiiBbVqMp5OO6rf;

1.7
date	2011.11.22.21.13.30;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.11.05.10.15;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.07.16.40.15;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.10.12.45.35;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.09.16.14.02;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.07.13.48.26;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.17.30.59;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Do setjmp cookies for gp, sp, and ra

endian testing and ok deraadt@@
ok visa@@
@
text
@/*	$OpenBSD: setjmp.S,v 1.10 2016/05/23 00:18:57 guenther Exp $ */

/*
 * Copyright (c) 2001-2002 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of Opsycon AB nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include "SYS.h"
#include <machine/regnum.h>
#include <machine/signal.h>

	.section	.openbsd.randomdata,"aw",@@progbits
	.balign	8
	.globl	__jmpxor
	.hidden	__jmpxor
__jmpxor:
	.space	3*REGSZ			# (28/gp, 29/sp, 31/ra)
	.size	__jmpxor, . - __jmpxor
	.type	__jmpxor,@@object
	.text

/*
 * setjmp, longjmp implementation for libc. this code depends
 * on the layout of the struct sigcontext in machine/signal.h.
 */

FRAMESZ= MKFSIZ(0,4)
GPOFF= FRAMESZ-2*REGSZ

LEAF(setjmp, FRAMESZ)
	PTR_SUBU sp, FRAMESZ
	SETUP_GP64(GPOFF, setjmp)
	.set	noreorder

	move	a2, a0				# save jmpbuf
	li	a0, 1				# how = SIG_BLOCK
	move	a1, zero			# get current signal mask
	li	v0, SYS_sigprocmask
	syscall					# mask in v0
	bne	a3, zero, botch
	REG_S	v0, SC_MASK(a2)			# save sc_mask

	LI	v0, 0xACEDBADE			# sigcontext magic number
	REG_S	v0, SC_REGS+ZERO*REGSZ(a2)
	REG_S	s0, SC_REGS+S0*REGSZ(a2)
	REG_S	s1, SC_REGS+S1*REGSZ(a2)
	REG_S	s2, SC_REGS+S2*REGSZ(a2)
	REG_S	s3, SC_REGS+S3*REGSZ(a2)
	REG_S	s4, SC_REGS+S4*REGSZ(a2)
	REG_S	s5, SC_REGS+S5*REGSZ(a2)
	REG_S	s6, SC_REGS+S6*REGSZ(a2)
	REG_S	s7, SC_REGS+S7*REGSZ(a2)
	REG_S	s8, SC_REGS+S8*REGSZ(a2)
	LA	t0, __jmpxor			# load cookie addr
	REG_L	v0, 0(t0)			# load gp cookie
	REG_L	v1, GPOFF(sp)
	xor	v0, v0, v1
	REG_S	v0, SC_REGS+GP*REGSZ(a2)
	REG_L	v0, REGSZ(t0)			# load sp cookie over gp cookie
	PTR_ADDU v1, sp, FRAMESZ
	xor	v0, v0, v1
	REG_S	v0, SC_REGS+SP*REGSZ(a2)
	REG_L	t0, 2*REGSZ(t0)			# load ra cookie over addr
	xor	t0, ra, t0
	REG_S	t0, SC_PC(a2)
	cfc1	t0, $31				# overwrite ra cookie
#if _MIPS_FPSET == 32
	sdc1	$f20, SC_FPREGS+((F20-F0)*REGSZ)(a2)
	sdc1	$f21, SC_FPREGS+((F21-F0)*REGSZ)(a2)
	sdc1	$f22, SC_FPREGS+((F22-F0)*REGSZ)(a2)
	sdc1	$f23, SC_FPREGS+((F23-F0)*REGSZ)(a2)
	sdc1	$f24, SC_FPREGS+((F24-F0)*REGSZ)(a2)
	sdc1	$f25, SC_FPREGS+((F25-F0)*REGSZ)(a2)
	sdc1	$f26, SC_FPREGS+((F26-F0)*REGSZ)(a2)
	sdc1	$f27, SC_FPREGS+((F27-F0)*REGSZ)(a2)
	sdc1	$f28, SC_FPREGS+((F28-F0)*REGSZ)(a2)
	sdc1	$f29, SC_FPREGS+((F29-F0)*REGSZ)(a2)
	sdc1	$f30, SC_FPREGS+((F30-F0)*REGSZ)(a2)
	sdc1	$f31, SC_FPREGS+((F31-F0)*REGSZ)(a2)
#else
	swc1	$f20, SC_FPREGS+((F20-F0)*REGSZ)(a2)
	swc1	$f21, SC_FPREGS+((F21-F0)*REGSZ)(a2)
	swc1	$f22, SC_FPREGS+((F22-F0)*REGSZ)(a2)
	swc1	$f23, SC_FPREGS+((F23-F0)*REGSZ)(a2)
	swc1	$f24, SC_FPREGS+((F24-F0)*REGSZ)(a2)
	swc1	$f25, SC_FPREGS+((F25-F0)*REGSZ)(a2)
	swc1	$f26, SC_FPREGS+((F26-F0)*REGSZ)(a2)
	swc1	$f27, SC_FPREGS+((F27-F0)*REGSZ)(a2)
	swc1	$f28, SC_FPREGS+((F28-F0)*REGSZ)(a2)
	swc1	$f29, SC_FPREGS+((F29-F0)*REGSZ)(a2)
	swc1	$f30, SC_FPREGS+((F30-F0)*REGSZ)(a2)
	swc1	$f31, SC_FPREGS+((F31-F0)*REGSZ)(a2)
#endif
	REG_S	t0, SC_FPREGS+((FSR-F0)*REGSZ)(a2)
	RESTORE_GP64
	PTR_ADDU sp, FRAMESZ
	j	ra
	move	v0, zero
END_STRONG(setjmp)

LEAF(longjmp, FRAMESZ)
	PTR_SUBU sp, FRAMESZ
	SETUP_GP64(GPOFF, longjmp)
	.set    noreorder

	move	a2, a0				# save jmpbuf
	move	a4, a1				# save val
	REG_L	a1, SC_MASK(a2)			# load sc_mask
	li	a0, 3				# how = SIG_SETMASK
	li	v0, SYS_sigprocmask
	syscall
	bne	a3, zero, botch

	REG_L	v0, SC_REGS+ZERO*REGSZ(a2)
	bne	v0, 0xACEDBADE, botch		# jump if error
	LA	v0, __jmpxor			# load cookie addr
	REG_L	v1, 2*REGSZ(v0)			# load ra cookie
	REG_L	ra, SC_PC(a2)
	xor	ra, ra, v1
	REG_L	s0, SC_REGS+S0*REGSZ(a2)
	REG_L	s1, SC_REGS+S1*REGSZ(a2)
	REG_L	s2, SC_REGS+S2*REGSZ(a2)
	REG_L	s3, SC_REGS+S3*REGSZ(a2)
	REG_L	s4, SC_REGS+S4*REGSZ(a2)
	REG_L	s5, SC_REGS+S5*REGSZ(a2)
	REG_L	s6, SC_REGS+S6*REGSZ(a2)
	REG_L	s7, SC_REGS+S7*REGSZ(a2)
	REG_L	s8, SC_REGS+S8*REGSZ(a2)
	REG_L	v1, 0(v0)			# load gp cookie over ra cookie
	REG_L	gp, SC_REGS+GP*REGSZ(a2)
	xor	gp, gp, v1
	REG_L	v1, REGSZ(v0)			# load sp cookie over gp cookie
	REG_L	sp, SC_REGS+SP*REGSZ(a2)
	xor	sp, sp, v1
	REG_L	v1, SC_FPREGS+((FSR-F0)*REGSZ)(a2)	# overwrite sp cookie
	ctc1	v1, $31
#if _MIPS_FPSET == 32
	ldc1	$f20, SC_FPREGS+((F20-F0)*REGSZ)(a2)
	ldc1	$f21, SC_FPREGS+((F21-F0)*REGSZ)(a2)
	ldc1	$f22, SC_FPREGS+((F22-F0)*REGSZ)(a2)
	ldc1	$f23, SC_FPREGS+((F23-F0)*REGSZ)(a2)
	ldc1	$f24, SC_FPREGS+((F24-F0)*REGSZ)(a2)
	ldc1	$f25, SC_FPREGS+((F25-F0)*REGSZ)(a2)
	ldc1	$f26, SC_FPREGS+((F26-F0)*REGSZ)(a2)
	ldc1	$f27, SC_FPREGS+((F27-F0)*REGSZ)(a2)
	ldc1	$f28, SC_FPREGS+((F28-F0)*REGSZ)(a2)
	ldc1	$f29, SC_FPREGS+((F29-F0)*REGSZ)(a2)
	ldc1	$f30, SC_FPREGS+((F30-F0)*REGSZ)(a2)
	ldc1	$f31, SC_FPREGS+((F31-F0)*REGSZ)(a2)
#else
	lwc1	$f20, SC_FPREGS+((F20-F0)*REGSZ)(a2)
	lwc1	$f21, SC_FPREGS+((F21-F0)*REGSZ)(a2)
	lwc1	$f22, SC_FPREGS+((F22-F0)*REGSZ)(a2)
	lwc1	$f23, SC_FPREGS+((F23-F0)*REGSZ)(a2)
	lwc1	$f24, SC_FPREGS+((F24-F0)*REGSZ)(a2)
	lwc1	$f25, SC_FPREGS+((F25-F0)*REGSZ)(a2)
	lwc1	$f26, SC_FPREGS+((F26-F0)*REGSZ)(a2)
	lwc1	$f27, SC_FPREGS+((F27-F0)*REGSZ)(a2)
	lwc1	$f28, SC_FPREGS+((F28-F0)*REGSZ)(a2)
	lwc1	$f29, SC_FPREGS+((F29-F0)*REGSZ)(a2)
	lwc1	$f30, SC_FPREGS+((F30-F0)*REGSZ)(a2)
	lwc1	$f31, SC_FPREGS+((F31-F0)*REGSZ)(a2)
#endif
	beql	a4, zero, 1f
	li	a4, 1		# only executed if branch taken.
1:
	j	ra
	move	v0, a4

botch:
	jal	_libc_abort
	nop
	RESTORE_GP64
	PTR_ADDU sp, FRAMESZ
END_STRONG(longjmp)
@


1.10
log
@Stop supporting longjmperror(); it's not used, not portable, and the checks
longjmp performs can't really be relied upon, even after we got rid of the
false positives...

ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.9 2016/05/08 21:50:58 guenther Exp $ */
d36 10
d67 1
a67 5
#if defined(__mips64)
	dli	v0, 0xACEDBADE			# sigcontext magic number
#else
	li	v0, 0xACEDBADE			# sigcontext magic number
#endif
d78 4
a81 1
	REG_L	v0, GPOFF(sp)
d83 3
a85 1
	PTR_ADDU v0, sp, FRAMESZ
d87 4
a90 2
	REG_S	ra, SC_PC(a2)
	cfc1	v0, $31
d118 1
a118 1
	REG_S	v0, SC_FPREGS+((FSR-F0)*REGSZ)(a2)
d140 2
d143 1
a143 1
	REG_L	v0, SC_FPREGS+((FSR-F0)*REGSZ)(a2)
d153 1
d155 2
d158 3
a160 1
	ctc1	v0, $31
@


1.9
log
@Implement longjmp directly and not on top of sigreturn.
Use the hidden symbols for internal calls to abort, longjmp, etc

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.8 2015/09/13 07:36:58 guenther Exp $ */
a174 2
	jal	longjmperror
	nop
@


1.8
log
@Do provide hidden _libc_* aliases for sig{block,setmask} and use them in
the ASM *setjmp implementations.
Skip the PLT when calling them on amd64 (other archs to do this after testing)

ok miod@@
@
text
@d1 1
a1 1
/*      $OpenBSD: setjmp.S,v 1.7 2011/11/22 21:13:30 guenther Exp $ */
d32 1
a32 2
#include <sys/syscall.h>
#include <machine/asm.h>
a38 1
 *
d41 1
a41 2
FRAMESZ= MKFSIZ(2,6)
A0OFF= FRAMESZ-3*REGSZ
a42 1
RAOFF= FRAMESZ-1*REGSZ
d44 2
a45 3
NON_LEAF(setjmp, FRAMESZ, ra)
	.mask	0x80000000, RAOFF
	PTR_SUBU sp, FRAMESZ			# allocate stack frame
d47 10
a56 21
	.set	reorder
	REG_S	ra, RAOFF(sp)			# save state
	REG_S	a0, A0OFF(sp)

	move	a0, zero			# get current signal mask
	jal	_libc_sigblock

	REG_L	v1, A0OFF(sp)			# v1 = jmpbuf
	REG_S	v0, SC_MASK(v1)			# save sc_mask = sigblock(0)

	move	a0, zero
	PTR_ADD	a1, sp, 0			# pointer to struct sigaltstack
	jal	_thread_sys_sigaltstack

	REG_L	a0, A0OFF(sp)			# restore jmpbuf
	ld	v1, REGSZ(sp)			# get old ss_onstack
	and	v1, v1, 1			# extract onstack flag
	REG_S	v1, SC_ONSTACK(a0)		# save it in sc_onstack
	REG_L	ra, RAOFF(sp)
	blt	v0, zero, botch			# check for sigaltstack() error
	REG_S	ra, SC_PC(a0)			# sc_pc = return address
d62 10
a71 10
	REG_S	v0, SC_REGS+ZERO*REGSZ(a0)
	REG_S	s0, SC_REGS+S0*REGSZ(a0)
	REG_S	s1, SC_REGS+S1*REGSZ(a0)
	REG_S	s2, SC_REGS+S2*REGSZ(a0)
	REG_S	s3, SC_REGS+S3*REGSZ(a0)
	REG_S	s4, SC_REGS+S4*REGSZ(a0)
	REG_S	s5, SC_REGS+S5*REGSZ(a0)
	REG_S	s6, SC_REGS+S6*REGSZ(a0)
	REG_S	s7, SC_REGS+S7*REGSZ(a0)
	REG_S	s8, SC_REGS+S8*REGSZ(a0)
d73 1
a73 1
	REG_S	v0, SC_REGS+GP*REGSZ(a0)
d75 2
a76 3
	REG_S	v0, SC_REGS+SP*REGSZ(a0)
	li	v0, 1				# be nice if we could tell
	REG_S	v0, SC_FPUSED(a0)		# sc_fpused = 1
d79 12
a90 12
	sdc1	$f20, SC_FPREGS+((F20-F0)*REGSZ)(a0)
	sdc1	$f21, SC_FPREGS+((F21-F0)*REGSZ)(a0)
	sdc1	$f22, SC_FPREGS+((F22-F0)*REGSZ)(a0)
	sdc1	$f23, SC_FPREGS+((F23-F0)*REGSZ)(a0)
	sdc1	$f24, SC_FPREGS+((F24-F0)*REGSZ)(a0)
	sdc1	$f25, SC_FPREGS+((F25-F0)*REGSZ)(a0)
	sdc1	$f26, SC_FPREGS+((F26-F0)*REGSZ)(a0)
	sdc1	$f27, SC_FPREGS+((F27-F0)*REGSZ)(a0)
	sdc1	$f28, SC_FPREGS+((F28-F0)*REGSZ)(a0)
	sdc1	$f29, SC_FPREGS+((F29-F0)*REGSZ)(a0)
	sdc1	$f30, SC_FPREGS+((F30-F0)*REGSZ)(a0)
	sdc1	$f31, SC_FPREGS+((F31-F0)*REGSZ)(a0)
d92 12
a103 12
	swc1	$f20, SC_FPREGS+((F20-F0)*REGSZ)(a0)
	swc1	$f21, SC_FPREGS+((F21-F0)*REGSZ)(a0)
	swc1	$f22, SC_FPREGS+((F22-F0)*REGSZ)(a0)
	swc1	$f23, SC_FPREGS+((F23-F0)*REGSZ)(a0)
	swc1	$f24, SC_FPREGS+((F24-F0)*REGSZ)(a0)
	swc1	$f25, SC_FPREGS+((F25-F0)*REGSZ)(a0)
	swc1	$f26, SC_FPREGS+((F26-F0)*REGSZ)(a0)
	swc1	$f27, SC_FPREGS+((F27-F0)*REGSZ)(a0)
	swc1	$f28, SC_FPREGS+((F28-F0)*REGSZ)(a0)
	swc1	$f29, SC_FPREGS+((F29-F0)*REGSZ)(a0)
	swc1	$f30, SC_FPREGS+((F30-F0)*REGSZ)(a0)
	swc1	$f31, SC_FPREGS+((F31-F0)*REGSZ)(a0)
d105 1
a105 2
	REG_S	v0, SC_FPREGS+((FSR-F0)*REGSZ)(a0)
	move	v0, zero
d109 2
a110 11

botch:
	jal	longjmperror
	jal	abort
	RESTORE_GP64
	PTR_ADDU sp, FRAMESZ
END(setjmp)


FRAMESZ= MKFSIZ(1,1)
GPOFF= FRAMESZ-2*REGSZ
d115 55
a169 3
	.set	reorder
	bne	a1, zero, 1f
	li	a1, 1			# never return 0!
d171 2
a172 3
	REG_S	a1, SC_REGS+V0*REGSZ(a0)
	li	v0, SYS_sigreturn
	syscall
d174 1
d176 3
a178 1
	jal	abort
d181 1
a181 1
END(longjmp)
@


1.7
log
@sigstack() is long dead, and the compat sigaltstack syscall is gone too.
Correct the namespace protections for sigreturn(), sigwait(), and psignal()

ok millert@@
@
text
@d1 1
a1 1
/*      $OpenBSD: setjmp.S,v 1.6 2009/12/11 05:10:15 miod Exp $ */
d57 1
a57 1
	jal	sigblock
@


1.6
log
@More changes to avoid truncating 64 bit pointers to 32 bits and sign-extending
them; allows userland with stack beyond 2GB to run.
@
text
@d1 1
a1 1
/*      $OpenBSD: setjmp.S,v 1.5 2005/08/07 16:40:15 espie Exp $ */
d71 1
a71 1
	blt	v0, zero, botch			# check for sigstack() error
@


1.5
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/*      $OpenBSD: setjmp.S,v 1.4 2004/09/10 12:45:35 pefo Exp $ */
d67 1
a67 1
	lw	v1, REGSZ+4(sp)			# get old ss_onstack
@


1.4
log
@setjmp now passes all regress tests.
@
text
@d1 1
a1 1
/*      $OpenBSD: setjmp.S,v 1.3 2004/09/09 16:14:02 pefo Exp $ */
a35 5

#if defined(LIBC_SCCS) 
	.text
	.asciz "$OpenBSD: setjmp.S,v 1.3 2004/09/09 16:14:02 pefo Exp $"
#endif /* LIBC_SCCS */
@


1.3
log
@mips64 is now going ABI64 and shared library support!
String functions need some optimization/rewrite to take full advantage.
@
text
@d1 1
a1 1
/*      $OpenBSD: setjmp.S,v 1.2 2004/09/07 13:48:26 pefo Exp $ */
d39 1
a39 1
	.asciz "$OpenBSD: setjmp.S,v 1.2 2004/09/07 13:48:26 pefo Exp $"
d93 2
a94 1
	REG_S	gp, SC_REGS+GP*REGSZ(a0)
d148 3
@


1.2
log
@32 -> 64 bit cleanups but no optimizations yet
@
text
@d1 1
a1 1
/*      $OpenBSD: setjmp.S,v 1.1 2004/08/11 17:30:59 pefo Exp $ */
d39 1
a39 1
	.asciz "$OpenBSD: setjmp.S,v 1.1 2004/08/11 17:30:59 pefo Exp $"
d48 9
a56 8
#define SETJMP_FRAMESZ	(FRAMESZ(CF_SZ) + 6 * REGSZ)

NON_LEAF(setjmp, SETJMP_FRAMESZ, ra)
	.mask	0x80000000, (CF_RA_OFFS - FRAMESZ(CF_SZ))
	PTR_SUB	sp, sp, SETJMP_FRAMESZ		# allocate stack frame
#ifdef ABICALLS
	.cprestore 16
#endif
d58 2
a59 2
	REG_S	ra, CF_RA_OFFS(sp)		# save state
	REG_S	a0, SETJMP_FRAMESZ-REGSZ(sp)
d64 1
a64 1
	REG_L	v1, SETJMP_FRAMESZ-REGSZ(sp)	# v1 = jmpbuf
d68 1
a68 1
	PTR_ADD	a1, sp, FRAMESZ(CF_SZ)		# pointer to struct sigaltstack
d71 2
a72 2
	REG_L	a0, SETJMP_FRAMESZ-REGSZ(sp)		# restore jmpbuf
	lw	v1, FRAMESZ(CF_SZ)+REGSZ+4(sp)	# get old ss_onstack
d75 1
a75 2
	REG_L	ra, CF_RA_OFFS(sp)
	PTR_ADD	sp, sp, SETJMP_FRAMESZ
d94 2
a95 1
	REG_S	sp, SC_REGS+SP*REGSZ(a0)
d128 2
d131 6
d139 7
a145 5
LEAF(longjmp)
#ifdef ABICALLS
	PTR_SUB	sp, sp, CF_ARGSZ * 2
	.cprestore 16
#endif
d150 1
a150 1
botch:
d153 2
@


1.1
log
@Move mips to mips64
@
text
@d1 1
a1 1
/*      $OpenBSD$ */
d39 1
a39 1
	.asciz "$OpenBSD: setjmp.S,v 1.8 2003/06/02 20:18:31 millert Exp $"
d48 1
a48 1
#define SETJMP_FRAMESZ	(FRAMESZ(CF_SZ) + 4 * REGSZ)
d58 2
a59 1
	REG_S	a0, SETJMP_FRAMESZ(sp)
d62 2
a63 1
	REG_L	v1, SETJMP_FRAMESZ(sp)		# v1 = jmpbuf
d65 1
d69 2
a70 1
	REG_L	a0, SETJMP_FRAMESZ(sp)		# restore jmpbuf
@

