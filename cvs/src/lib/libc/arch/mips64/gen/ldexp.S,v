head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.44
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.36
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.40
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.38
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.34
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.32
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.30
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.28
	OPENBSD_5_0:1.6.0.26
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.24
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.22
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.18
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.20
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.16
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@# @;


1.7
date	2015.10.27.05.54.49;	author guenther;	state Exp;
branches;
next	1.6;
commitid	GqevjOlUxm0Irj52;

1.6
date	2005.08.07.16.40.15;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.18.18.41.06;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.02.15.30.33;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.15.16.11.26;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.09.16.14.02;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.17.30.59;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Wrap the remaining math functions in libc: __fpclassify*(), __flt_rounds(),
and ldexp().

ok millert@@
@
text
@/* $OpenBSD: ldexp.S,v 1.6 2005/08/07 16:40:15 espie Exp $ */
/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "SYS.h"

#define DEXP_INF	0x7ff
#define DEXP_BIAS	1023
#define DEXP_MIN	-1022
#define DEXP_MAX	1023
#define DFRAC_BITS	52
#define DIMPL_ONE	0x00100000
#define DLEAD_ZEROS	63 - 52
#define STICKYBIT	1
#define GUARDBIT	0x80000000
#define DSIGNAL_NAN	0x00040000
#define DQUIET_NAN0	0x0007ffff
#define DQUIET_NAN1	0xffffffff

/*
 * double ldexp(x, N)
 *	double x; int N;
 *
 * Return x * (2**N), for integer values N.
 */
LEAF(ldexp, 0)
	.set	reorder
	dmfc1	t3, $f12		# get x
	dsll	t1, t3, 1		# get x exponent
	dsrl	t1, t1, 64 - 11
	beq	t1, DEXP_INF, 9f	# is it a NAN or infinity?
	beq	t1, zero, 1f		# zero or denormalized number?
	daddu	t1, a1			# scale exponent
	dsll	v0, a1, 52		# position N for addition
	bge	t1, DEXP_INF, 8f	# overflow?
	daddu	v0, t3, v0		# multiply by (2**N)
	ble	t1, zero, 4f		# underflow?
	dmtc1	v0, $f0			# save result
	j	ra
1:
	dsll	t2, t3, 64 - 52		# get x fraction
	dsrl	t2, t2, 64 - 52
	dsrl	t0, t3, 63		# get x sign
	beq	t2, zero, 9f		# result is zero
/*
 * Find out how many leading zero bits are in t2 and put in t9.
 */
	move	v0, t2
	move	t9, zero
	dsrl	ta0, v0, 32
	bne	ta0, zero, 1f
	daddu	t9, 32
	dsll	v0, 32
1:
	dsrl	ta0, v0, 16
	bne	ta0, zero, 1f
	daddu	t9, 16
	dsll	v0, 16
1:
	dsrl	ta0, v0, 24
	bne	ta0, zero, 1f
	daddu	t9, 8
	dsll	v0, 8
1:
	dsrl	ta0, v0, 28
	bne	ta0, zero, 1f
	daddu	t9, 4
	dsll	v0, 4
1:
	dsrl	ta0, v0, 30
	bne	ta0, zero, 1f
	daddu	t9, 2
	dsll	v0, 2
1:
	dsrl	ta0, v0, 31
	bne	ta0, zero, 1f
	daddu	t9, 1
/*
 * Now shift t2 the correct number of bits.
 */
1:
	dsubu	t9, t9, DLEAD_ZEROS	# dont count normal leading zeros
	li	t1, DEXP_MIN + DEXP_BIAS
	subu	t1, t1, t9		# adjust exponent
	addu	t1, t1, a2		# scale exponent
	dsll	t2, t9

	bge	t1, DEXP_INF, 8f	# overflow?
	ble	t1, zero, 4f		# underflow?
	dsll	t2, t2, 64 - 52		# clear implied one bit
	dsrl	t2, t2, 64 - 52

	dsll	t1, t1, 63 - 11		# reposition exponent
	dsll	t0, t0, 63		# reposition sign
	or	t0, t0, t1		# put result back together
	or	t0, t0, t2
	dmtc1	t0, $f0			# save result
	j	ra
4:
	dli	v0, 0x8000000000000000
	ble	t1, -52, 7f		# is result too small for denorm?
	dsll	t2, t3, 63 - 52		# clear exponent, extract fraction
	or	t2, t2, v0		# set implied one bit
	dsrl	t2, t2, 63 - 52		# shift fraction back to normal position
	subu	t1, t1, 1
	dsrl	t8, t2, t1		# save bits shifted out
	negu	t1
	dsrl	t2, t2, t1
	bge	t8, zero, 1f		# does result need to be rounded?
	daddu	t2, t2, 1		# round result
	dsll	t8, t8, 1
	bne	t8, zero, 1f		# round result to nearest
	ori	t2, 1
	xori	t2, 1
1:
	dmtc1	t2, $f0			# save denormalized result (LSW)
	bge	v1, zero, 1f		# should result be negative?
	neg.d	$f0, $f0		# negate result
1:
	j	ra
7:
	dmtc1	zero, $f0		# result is zero
	beq	t0, zero, 1f		# is result positive?
	neg.d	$f0, $f0		# negate result
1:
	j	ra
8:
	dli	t1, 0x7ff0000000000000	# result is infinity (MSW)
	dmtc1	t1, $f0	
	bge	v1, zero, 1f		# should result be negative infinity?
	neg.d	$f0, $f0		# result is negative infinity
1:
	add.d	$f0, $f0		# cause overflow faults if enabled
	j	ra
9:
	mov.d	$f0, $f12		# yes, result is just x
	j	ra
END_STRONG(ldexp)
@


1.6
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 1
a34 1
#include <machine/asm.h>
d167 1
a167 1
END(ldexp)
@


1.5
log
@fix a couple of wrongly used li's instead of dli's. spotted by as@@gnu ;)
@
text
@d1 1
a34 5

#if defined(LIBC_SCCS) 
	.text
	.asciz "$OpenBSD: ldexp.S,v 1.4 2004/10/02 15:30:33 pefo Exp $"
#endif /* LIBC_SCCS */
@


1.4
log
@convert to 64 bit
@
text
@d37 1
a37 1
	.asciz "$OpenBSD: ldexp.S,v 1.3 2004/09/15 16:11:26 pefo Exp $"
d133 1
a133 1
	li	v0, 0x8000000000000000
d161 1
a161 1
	li	t1, 0x7ff0000000000000	# result is infinity (MSW)
@


1.3
log
@ABI compliant register names
@
text
@d37 1
a37 1
	.asciz "$OpenBSD: ldexp.S,v 1.2 2004/09/09 16:14:02 pefo Exp $"
d46 1
a46 1
#define DLEAD_ZEROS	31 - 20
d61 3
a63 4
	mfc1	v1, $f13		# get MSW of x
	mfc1	t3, $f12		# get LSW of x
	sll	t1, v1, 1		# get x exponent
	srl	t1, t1, 32 - 11
d66 2
a67 2
	addu	t1, t1, a2		# scale exponent
	sll	v0, a2, 20		# position N for addition
d69 1
a69 1
	addu	v0, v0, v1		# multiply by (2**N)
d71 1
a71 2
	mtc1	v0, $f1			# save MSW of result
	mtc1	t3, $f0			# save LSW of result
d74 4
a77 6
	sll	t2, v1, 32 - 20		# get x fraction
	srl	t2, t2, 32 - 20
	srl	t0, v1, 31		# get x sign
	bne	t2, zero, 1f
	beq	t3, zero, 9f		# result is zero
1:
d79 1
a79 1
 * Find out how many leading zero bits are in t2,t3 and put in t9.
d83 4
a86 3
	bne	t2, zero, 1f
	move	v0, t3
	addu	t9, 32
d88 1
a88 1
	srl	ta0, v0, 16
d90 2
a91 2
	addu	t9, 16
	sll	v0, 16
d93 1
a93 1
	srl	ta0, v0, 24
d95 2
a96 2
	addu	t9, 8
	sll	v0, 8
d98 1
a98 1
	srl	ta0, v0, 28
d100 2
a101 2
	addu	t9, 4
	sll	v0, 4
d103 1
a103 1
	srl	ta0, v0, 30
d105 2
a106 2
	addu	t9, 2
	sll	v0, 2
d108 1
a108 1
	srl	ta0, v0, 31
d110 1
a110 1
	addu	t9, 1
d112 1
a112 1
 * Now shift t2,t3 the correct number of bits.
d115 1
a115 1
	subu	t9, t9, DLEAD_ZEROS	# dont count normal leading zeros
d119 2
a120 13
	li	v0, 32
	blt	t9, v0, 1f
	subu	t9, t9, v0		# shift fraction left >= 32 bits
	sll	t2, t3, t9
	move	t3, zero
	b	2f
1:
	subu	v0, v0, t9		# shift fraction left < 32 bits
	sll	t2, t2, t9
	srl	ta0, t3, v0
	or	t2, t2, ta0
	sll	t3, t3, t9
2:
d123 5
a127 5
	sll	t2, t2, 32 - 20		# clear implied one bit
	srl	t2, t2, 32 - 20
3:
	sll	t1, t1, 31 - 11		# reposition exponent
	sll	t0, t0, 31		# reposition sign
d130 1
a130 2
	mtc1	t0, $f1			# save MSW of result
	mtc1	t3, $f0			# save LSW of result
d133 1
a133 1
	li	v0, 0x80000000
d135 1
a135 1
	sll	t2, v1, 31 - 20		# clear exponent, extract fraction
d137 1
a137 2
	blt	t1, -30, 2f		# will all bits in t3 be shifted out?
	srl	t2, t2, 31 - 20		# shift fraction back to normal position
d139 1
a139 2
	sll	ta0, t2, t1		# shift right t2,t3 based on exponent
	srl	t8, t3, t1		# save bits shifted out
d141 1
a141 3
	srl	t3, t3, t1
	or	t3, t3, ta0
	srl	t2, t2, t1
d143 2
a144 4
	addu	t3, t3, 1		# round result
	sltu	ta0, t3, 1
	sll	t8, t8, 1
	addu	t2, t2, ta0
d146 2
a147 1
	and	t3, t3, ~1
d149 1
a149 2
	mtc1	t3, $f0			# save denormalized result (LSW)
	mtc1	t2, $f1			# save denormalized result (MSW)
a153 19
2:
	mtc1	zero, $f1		# exponent and upper fraction
	addu	t1, t1, 20		# compute amount to shift right by
	sll	t8, t2, t1		# save bits shifted out
	negu	t1
	srl	t3, t2, t1
	bge	t8, zero, 1f		# does result need to be rounded?
	addu	t3, t3, 1		# round result
	sltu	ta0, t3, 1
	sll	t8, t8, 1
	mtc1	ta0, $f1			# exponent and upper fraction
	bne	t8, zero, 1f		# round result to nearest
	and	t3, t3, ~1
1:
	mtc1	t3, $f0
	bge	v1, zero, 1f		# is result negative?
	neg.d	$f0, $f0		# negate result
1:
	j	ra
d155 1
a155 2
	mtc1	zero, $f0		# result is zero
	mtc1	zero, $f1
d161 2
a162 3
	li	t1, 0x7ff00000		# result is infinity (MSW)
	mtc1	t1, $f1	
	mtc1	zero, $f0		# result is infinity (LSW)
@


1.2
log
@mips64 is now going ABI64 and shared library support!
String functions need some optimization/rewrite to take full advantage.
@
text
@d37 1
a37 1
	.asciz "$OpenBSD: ldexp.S,v 1.1 2004/08/11 17:30:59 pefo Exp $"
d91 2
a92 2
	srl	t4, v0, 16
	bne	t4, zero, 1f
d96 2
a97 2
	srl	t4, v0, 24
	bne	t4, zero, 1f
d101 2
a102 2
	srl	t4, v0, 28
	bne	t4, zero, 1f
d106 2
a107 2
	srl	t4, v0, 30
	bne	t4, zero, 1f
d111 2
a112 2
	srl	t4, v0, 31
	bne	t4, zero, 1f
d131 2
a132 2
	srl	t4, t3, v0
	or	t2, t2, t4
d155 1
a155 1
	sll	t4, t2, t1		# shift right t2,t3 based on exponent
d159 1
a159 1
	or	t3, t3, t4
d163 1
a163 1
	sltu	t4, t3, 1
d165 1
a165 1
	addu	t2, t2, t4
d183 1
a183 1
	sltu	t4, t3, 1
d185 1
a185 1
	mtc1	t4, $f1			# exponent and upper fraction
@


1.1
log
@Move mips to mips64
@
text
@d37 1
a37 1
	.asciz "$OpenBSD: ldexp.S,v 1.5 2003/06/02 20:18:31 millert Exp $"
d59 1
a59 1
LEAF(ldexp)
@

