head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.11;
commitid	d9R7VGw9CHTkwXE1;

1.11
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.10;
commitid	OrVNAJkzchWBNbO0;

1.10
date	2015.09.05.17.32.18;	author miod;	state Exp;
branches;
next	1.9;
commitid	oDQVKl495BtZtoRj;

1.9
date	2015.09.05.06.22.47;	author guenther;	state Exp;
branches;
next	1.8;
commitid	YcHx4KWjuOzN6Vj2;

1.8
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.7;
commitid	lTMF8Y3C9fQGd6jQ;

1.7
date	2015.04.07.01.27.06;	author guenther;	state Exp;
branches;
next	1.6;
commitid	oQvh7XA3Kql35r0J;

1.6
date	2014.06.04.20.13.49;	author matthew;	state Exp;
branches;
next	1.5;
commitid	CQgbVinZLjc6cr0k;

1.5
date	2011.04.04.12.42.39;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.01.05.02.19;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.09.16.14.02;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.07.13.48.26;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.17.30.59;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      $OpenBSD: SYS.h,v 1.11 2015/10/23 04:39:24 guenther Exp $ 
 */

#include <sys/syscall.h>
#include <machine/asm.h>

/*
 * We define a hidden alias with the prefix "_libc_" for each global symbol
 * that may be used internally.  By referencing _libc_x instead of x, other
 * parts of libc prevent overriding by the application and avoid unnecessary
 * relocations.
 */
#define _HIDDEN(x)		_libc_##x
#define _HIDDEN_ALIAS(x,y)			\
	STRONG_ALIAS(_HIDDEN(x),y);		\
	.hidden _HIDDEN(x)
#define _HIDDEN_FALIAS(x,y)			\
	_HIDDEN_ALIAS(x,y);			\
	.type _HIDDEN(x),@@function

/*
 * For functions implemented in ASM that aren't syscalls.
 *   END_STRONG(x)	Like DEF_STRONG() in C; for standard/reserved C names
 *   END_WEAK(x)	Like DEF_WEAK() in C; for non-ISO C names
 */
#define	END_STRONG(x)	END(x);					\
			_HIDDEN_FALIAS(x,x);			\
			.size _HIDDEN(x), . - _HIDDEN(x)
#define	END_WEAK(x)	END_STRONG(x); .weak x


#define CERROR		__cerror
	.hidden	CERROR

# define __ENTRY(p,x)		ENTRY(p ## x)

# define __DO_SYSCALL(x)				\
				li	v0,SYS_ ## x;	\
				syscall

# define __LEAF2(p,x,sz)	LEAF(p ## x, sz) \
				WEAK_ALIAS(x, p ## x);

# define __END2_HIDDEN(p,x)	END(p ## x); 		\
				_HIDDEN_FALIAS(x, p ## x); \
				.size _HIDDEN(x), . - _HIDDEN(x)
# define __END2(p,x)		__END2_HIDDEN(p,x);	\
				.size x, . - x

#define __PSEUDO_NOERROR(p,x,y)				\
		__LEAF2(p,x, 0);			\
			__DO_SYSCALL(y);		\
			j	ra;			\
		__END2(p,x)

#define __PSEUDO(p,x,y)   				\
		__LEAF2(p,x,32);			\
			PTR_SUBU sp,32;			\
			SETUP_GP64(16,_HIDDEN(x));	\
			__DO_SYSCALL(y);		\
			bne	a3,zero,1f;		\
			RESTORE_GP64;			\
			PTR_ADDU sp,32;			\
			j	ra;			\
		1:	LA	t9,CERROR;		\
			RESTORE_GP64;			\
			PTR_ADDU sp,32;			\
			jr	t9;			\
		__END2(p,x)
#define __PSEUDO_HIDDEN(p,x,y)   			\
		LEAF(p ## x,32);			\
			PTR_SUBU sp,32;			\
			SETUP_GP64(16,_HIDDEN(x));	\
			__DO_SYSCALL(y);		\
			bne	a3,zero,1f;		\
			RESTORE_GP64;			\
			PTR_ADDU sp,32;			\
			j	ra;			\
		1:	LA	t9,CERROR;		\
			RESTORE_GP64;			\
			PTR_ADDU sp,32;			\
			jr	t9;			\
		__END2_HIDDEN(p,x)


#define RSYSCALL(x)		__PSEUDO(_thread_sys_,x,x)
#define RSYSCALL_HIDDEN(x)	__PSEUDO_HIDDEN(_thread_sys_,x,x)
#define PSEUDO(x,y)		__PSEUDO(_thread_sys_,x,y)
#define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)

#define	SYSLEAF(x, sz)		__LEAF2(_thread_sys_,x, sz)
#define	SYSLEAF_HIDDEN(x, sz)	LEAF(_thread_sys_ ## x, sz)
#define	SYSCALL_END(x)		__END2(_thread_sys_,x)
#define	SYSCALL_END_HIDDEN(x)	__END2_HIDDEN(_thread_sys_,x)

@


1.11
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.10 2015/09/05 17:32:18 miod Exp $ 
d63 2
a64 2
#define CERROR		_C_LABEL(__cerror)
#define _CERROR		_C_LABEL(___cerror)
@


1.10
log
@This is probably what guenther@@ had in mind.
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.9 2015/09/05 06:22:47 guenther Exp $ 
a80 2
# define __CLABEL2(p,x)		_C_LABEL(p ## x)

d90 1
a90 1
			SETUP_GP64(16,__CLABEL2(p,x));	\
d104 1
a104 1
			SETUP_GP64(16,__CLABEL2(p,x));	\
d123 3
a125 1
#define	SYSEND(x)		__END2(_thread_sys_,x)
@


1.9
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

ok deraadt@@
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.8 2015/08/31 02:53:56 guenther Exp $ 
d76 1
a76 1
				_HIDDEN_FALIAS(x, p ## x)
@


1.8
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.7 2015/04/07 01:27:06 guenther Exp $ 
d75 5
a79 1
# define __END2(p,x)		END(p ## x)
d94 1
a94 1
			bne	a3,zero,err;		\
d98 1
a98 1
		err:	LA	t9,CERROR;		\
d108 1
a108 1
			bne	a3,zero,err;		\
d112 1
a112 1
		err:	LA	t9,CERROR;		\
d116 1
a116 1
		END(p ## x)
@


1.7
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.6 2014/06/04 20:13:49 matthew Exp $ 
d37 25
@


1.6
log
@Apply "unifdef -D__STDC__" to libc/arch/*/SYS.h

A while back, pascal@@ converted our system call stubs from using "cpp
| as" to "cc -x assembler-with-cpp", so there's no need to stay
compatible with ancient preprocessor semantics.

ok miod
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.5 2011/04/04 12:42:39 guenther Exp $ 
d74 14
d91 1
@


1.5
log
@Move __cerror to ___cerror with a weak alias so that rthreads can override it.
On mips64, also correct the name called from plain cerror to __cerror.

"looks correct" miod@@
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.4 2010/10/01 05:02:19 guenther Exp $ 
a40 1
#ifdef __STDC__
a52 14
#else
# define __ENTRY(p,x)		ENTRY(p/**/x)

# define __DO_SYSCALL(x)				\
				li	v0,SYS_/**/x;	\
				syscall

# define __LEAF2(p,x,sz)	LEAF(p/**/x, sz) \
				WEAK_ALIAS(x, p/**/x);

# define __END2(p,x)		END(p/**/x)

# define __CLABEL2(p,x)		_C_LABEL(p/**/x)
#endif
@


1.4
log
@Provide a WEAK_ALIAS macro in <machine/asm.h> for the few platforms
that didn't already have one, and then immediately use it in libc's
SYS.h

ok miod@@
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.3 2004/09/09 16:14:02 pefo Exp $ 
d38 3
d84 1
a84 1
		err:	LA	t9,_C_LABEL(cerror);	\
@


1.3
log
@mips64 is now going ABI64 and shared library support!
String functions need some optimization/rewrite to take full advantage.
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.2 2004/09/07 13:48:26 pefo Exp $ 
d46 1
a46 1
				.weak x; x = p ## x;
d59 1
a59 1
				.weak x; x = p/**/x;
@


1.2
log
@32 -> 64 bit cleanups but no optimizations yet
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.1 2004/08/11 17:30:59 pefo Exp $ 
d39 1
a39 1
# define __ENTRY(p,x)	ENTRY(p ## x)
d41 10
a50 8
# define __DO_SYSCALL(x)	\
			li	v0,SYS_ ## x;	\
			syscall

# define __LEAF2(p,x)	LEAF(p ## x) \
			.weak x; x = p ## x;
# define __END2(p,x)	END(p ## x)
# define __CLABEL2(p,x)	_C_LABEL(p ## x)
d52 10
a61 1
# define __ENTRY(p,x)	ENTRY(p/**/x)
d63 1
a63 8
# define __DO_SYSCALL(x)	\
			li	v0,SYS_/**/x;	\
			syscall

# define __LEAF2(p,x)	LEAF(p/**/x) \
			.weak x; x = p/**/x;
# define __END2(p,x)	END(p/**/x)
# define __CLABEL2(p,x)	_C_LABEL(p/**/x)
d67 1
a67 1
		__LEAF2(p,x);				\
d73 3
a75 1
		__LEAF2(p,x);				\
d78 2
d82 2
d92 1
a92 1
#define	SYSLEAF(x)		__LEAF2(_thread_sys_,x)
@


1.1
log
@Move mips to mips64
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.10 2003/06/02 20:18:31 millert Exp $ 
d73 1
a73 1
		err:	la	t9,_C_LABEL(cerror);	\
@

