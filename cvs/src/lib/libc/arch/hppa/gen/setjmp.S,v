head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.20
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.12
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.16
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.24
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.22
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3;
locks; strict;
comment	@# @;


1.11
date	2016.05.29.07.59.36;	author guenther;	state Exp;
branches;
next	1.10;
commitid	VzADRL3NAsNmATaD;

1.10
date	2016.05.23.00.24.50;	author guenther;	state Exp;
branches;
next	1.9;
commitid	DPGUgEgl75yQNy0h;

1.9
date	2015.09.13.07.36.58;	author guenther;	state Exp;
branches;
next	1.8;
commitid	lKiiBbVqMp5OO6rf;

1.8
date	2011.04.15.21.39.45;	author ariane;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.07.16.40.14;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.18.30;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.21.20.14.57;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.21.20.00.30;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.08.16.35.15;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.07.20.24.59;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.06.18.50.26;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Only require 4 byte alignment on ILP32 archs
@
text
@/*	$OpenBSD: setjmp.S,v 1.10 2016/05/23 00:24:50 guenther Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "SYS.h"

	.section	.openbsd.randomdata,"aw",@@progbits
	.align	4
.L__jmpxor
	.zero	4*2		; (r2/rp, r30/sp)

/*
 * C library -- setjmp, longjmp
 *
 *	longjmp(a,v)
 * will generate a "return(v)" from
 * the last call to
 *	setjmp(a)
 * by restoring registers from the stack,
 * and a struct sigcontext, see <signal.h>
 */

ENTRY(sigsetjmp, 64)
	sub,<>	%r0, %arg1, %r0
	b	.L_setjmp$dosaves
	 stw	%arg1, 44(%arg0)	; last of reserved words

ALTENTRY(setjmp)
	copy	%arg0, %arg2		; save jmpbuf in %arg2

	ldi	1, %arg0		; how = SIG_BLOCK
	copy	%r0, %arg1		; set = empty
	stw	%rp, HPPA_FRAME_ERP(%sr0,%sp)
	ldil	L%SYSCALLGATE, %r1
	ble	4(%sr7, %r1)
	 ldi	SYS_sigprocmask, %t1
	ldw	HPPA_FRAME_ERP(%sr0,%sp), %rp

	copy	%arg2, %arg0		; restore jmpbuf to %arg0
	stw	%ret0, 4(%arg0)		; mask

ALTENTRY(_setjmp)
.L_setjmp$dosaves
#ifdef __PIC__
	addil	LT%.L__jmpxor, %r19
	ldw	RT%.L__jmpxor(%r1), %t2
#else
	ldil	L%.L__jmpxor, %t1
	ldo	R%.L__jmpxor(%t1), %t2
#endif
	ldw	0(%t2), %t1		; xor for r2/rp
	ldw	4(%t2), %t2		; xor for r30/sp, overwrite address

	xor	%sp, %t2, %t2
	stw	%t2, 12(%arg0)		; sc.sc_sp = %sp
	xor	%rp, %t1, %t1
	stw	%t1, 20(%arg0)		; sc.sc_pcoqh = %rp
	copy	%r0, %t1
	copy	%r0, %t2

	/* We store all callee-saved registers after the sigcontext. */
	ldo	48(%arg0), %r1		; offset to after sc
	stwm	%r3, 4(%r1)
	stwm	%r4, 4(%r1)
	stwm	%r5, 4(%r1)
	stwm	%r6, 4(%r1)
	stwm	%r7, 4(%r1)
	stwm	%r8, 4(%r1)
	stwm	%r9, 4(%r1)
	stwm	%r10, 4(%r1)
	stwm	%r11, 4(%r1)
	stwm	%r12, 4(%r1)
	stwm	%r13, 4(%r1)
	stwm	%r14, 4(%r1)
	stwm	%r15, 4(%r1)
	stwm	%r16, 4(%r1)
	stwm	%r17, 4(%r1)
	stwm	%r18, 4(%r1)

	/* Return 0. */
	bv	%r0(%rp)
	 copy	%r0, %ret0
EXIT(sigsetjmp)
	.size _setjmp, . - _setjmp
	.size setjmp, . - setjmp

ENTRY(siglongjmp,64)
	ldw	44(%arg0), %arg2
	sub,<>	%r0, %arg2, %r0
	b	.L_longjmp$restores
	 nop

ALTENTRY(longjmp)
	copy	%arg1, %arg3		; save val in %arg3
	copy	%arg0, %arg2		; save jmpbuf in %arg2

	ldw	4(%arg0), %arg1		; set from jumpbuf
	ldi	3, %arg0		; how = SIG_SETMASK
	stw	%rp, HPPA_FRAME_ERP(%sr0,%sp)
	ldil	L%SYSCALLGATE, %r1
	ble	4(%sr7, %r1)
	 ldi	SYS_sigprocmask, %t1
	ldw	HPPA_FRAME_ERP(%sr0,%sp), %rp

	copy	%arg2, %arg0		; restore jmpbuf to %arg0
	copy	%arg3, %arg1		; restore val to %arg1

ALTENTRY(_longjmp)
.L_longjmp$restores
	/* restore callee-saved registers */
	ldo	48(%arg0), %r1
	ldwm	4(%r1), %r3
	ldwm	4(%r1), %r4
	ldwm	4(%r1), %r5
	ldwm	4(%r1), %r6
	ldwm	4(%r1), %r7
	ldwm	4(%r1), %r8
	ldwm	4(%r1), %r9
	ldwm	4(%r1), %r10
	ldwm	4(%r1), %r11
	ldwm	4(%r1), %r12
	ldwm	4(%r1), %r13
	ldwm	4(%r1), %r14
	ldwm	4(%r1), %r15
	ldwm	4(%r1), %r16
	ldwm	4(%r1), %r17
	ldwm	4(%r1), %r18

	/* restore the rest */
#ifdef __PIC__
	addil	LT%.L__jmpxor, %r19
	ldw	RT%.L__jmpxor(%r1), %t2
#else
	ldil	L%.L__jmpxor, t1
	ldo	R%.L__jmpxor(t1), t2
#endif
	ldw	0(t2), t1		; xor for r2/rp
	ldw	4(t2), t2		; xor for r30/sp, overwrite address

	ldw	12(%arg0), %r1
	xor	%r1, %t2, %sp
	ldw	20(%arg0), %r1
	xor	%r1, %t1, %rp
	copy	%r0, %t1		; overwrite the cookies
	copy	%r0, %t2
	sub,<>	%arg1, %r0, %r0
	ldo	1(%arg1), %arg1
	bv	%r0(%rp)
	 copy	%arg1, %ret0
EXIT(siglongjmp)
	.size _longjmp, . - _longjmp
	.size longjmp, . - longjmp

	.end
@


1.10
log
@Add XOR cookies for rp and sp.  Switch from calling obsolete
sig{block,setmask} to directly using the sigprocmask syscall.
Remove longjmperror()-if-passed-real-sigcontext checks and the
filling in of sigcontext fields that longjmp ignores.

in snaps; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.9 2015/09/13 07:36:58 guenther Exp $	*/
d39 1
a39 1
	.align	8
@


1.9
log
@Do provide hidden _libc_* aliases for sig{block,setmask} and use them in
the ASM *setjmp implementations.
Skip the PLT when calling them on amd64 (other archs to do this after testing)

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.8 2011/04/15 21:39:45 ariane Exp $	*/
d36 6
a41 4
#include <machine/asm.h>
#define _LOCORE
#include <machine/frame.h>
#undef _LOCORE
d56 2
a57 4
	b,n	_setjmp
	nop

	stw	%arg1, 44(%arg0)	; last of reserved words
d60 1
a60 2
	stw	%rp, HPPA_FRAME_CRP(%sp)
	stw	%arg0, HPPA_FRAME_ARG(0)(%sp)
d62 7
a68 11
	copy	%r3, %r1
	copy	%sp, %r3
	stw,ma	%r1, HPPA_FRAME_SIZE(%sp)

	bl	_libc_sigblock, %rp
	copy	%r0, %arg0

	ldo	HPPA_FRAME_SIZE(%r3), %sp
	ldw,mb	-HPPA_FRAME_SIZE(%sp),%r3
	ldw	HPPA_FRAME_CRP(%sp), %rp
	ldw	HPPA_FRAME_ARG(0)(%sp), %arg0
d70 1
a70 2
	stw	%r0, 0(%arg0)		; no onstack
	b	_setjmp$dosaves
d74 17
a90 10
	/* A sigcontext is at the beginning of our jmp_buf. */
	stw	%r0, 0(%arg0)		; no onstack
	stw	%r0, 4(%arg0)		; mask
_setjmp$dosaves
	stw	%r0, 8(%arg0)		; set sc.sc_ps
	stw	%sp, 12(%arg0)		; sc.sc_sp = %sp
	stw	%r0, 16(%arg0)		; sc.sc_fp
	ldo	4(%rp), %r1
	stw	%rp, 20(%arg0)		; sc.sc_pcoqh = %rp
	stw	%r1, 24(%arg0)		; sc.sc_pcoqt = %rp + 4
d113 4
a116 2
	copy	%r0, %ret0
EXIT(_setjmp)
a118 6
	/* XXX have to dup this from below */
	ldw	16(%arg0), %r1		/* botch if it's a real signal frame */
	add,=	%r0, %r1, %r0
	bl,n	longjmperror, %rp
	nop

d121 2
a122 2
	b	_longjmp
	nop
d125 13
a137 23
	/* XXX have to dup this from below */
	ldw	16(%arg0), %r1		/* botch if it's a real signal frame */
	add,=	%r0, %r1, %r0
	bl,n	longjmperror, %rp
	nop

	stw	%rp, HPPA_FRAME_CRP(%sp)
	stw	%arg0, HPPA_FRAME_ARG(0)(%sp)
	stw	%arg1, HPPA_FRAME_ARG(1)(%sp)

	copy	%r3, %r1
	copy	%sp, %r3
	stw,ma	%r1, HPPA_FRAME_SIZE(%sp)

	bl	_libc_sigsetmask, %rp
	ldw	4(%arg0), %arg0

	ldo	HPPA_FRAME_SIZE(%r3), %sp
	ldw,mb	-HPPA_FRAME_SIZE(%sp),%r3
	ldw	HPPA_FRAME_CRP(%sp), %rp
	ldw	HPPA_FRAME_ARG(0)(%sp), %arg0
	b	_longjmp$restores
	ldw	HPPA_FRAME_ARG(1)(%sp), %arg1
d140 1
a140 6
	ldw	16(%arg0), %r1		/* botch if it's a real signal frame */
	add,=	%r0, %r1, %r0
	bl,n	longjmperror, %rp
	nop

_longjmp$restores
d161 16
a176 2
	ldw	12(%arg0), %sp
	ldw	20(%arg0), %rp		/* check the priv level */
d180 4
a183 2
	copy	%arg1, %ret0
EXIT(_longjmp)
@


1.8
log
@Remove wrong check.

HPPA longjmp tests that the env parameter < the current stack pointer.
The test relies on the stack being at the end of the memory space.

This test is wrong for a couple of reasons:
- the main stack is at 0x78000000-0x80000000, but allocations between
  0x80000000-0xc0000000 are available to the program,
- pthread stacks may be at any place in the address space, allowing a
  heap-allocated env parameter to fail the check.

ok deraadt@@, kettenis@@, guenther@@ at least
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.7 2005/08/07 16:40:14 espie Exp $	*/
d67 1
a67 1
	bl	sigblock, %rp
d142 1
a142 1
	bl	sigsetmask, %rp
@


1.7
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.6 2003/06/02 20:18:30 millert Exp $	*/
a116 3
	sub,>>	%sp, %arg0, %r0		/* botch if jbuf was on stack */
	bl,n	longjmperror, %rp
	nop
a128 3
	sub,>>	%sp, %arg0, %r0		/* botch if jbuf was on stack */
	bl,n	longjmperror, %rp
	nop
a152 3
	sub,>>	%sp, %arg0, %r0		/* botch if jbuf was on stack */
	bl,n	longjmperror, %rp
	nop
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.5 2002/10/21 20:14:57 mickey Exp $	*/
a39 6

#if defined(LIBC_SCCS) && !defined(lint)
	.text
	.asciz	"$OpenBSD: setjmp.S,v 1.5 2002/10/21 20:14:57 mickey Exp $"
	.align	4
#endif /* LIBC_SCCS and not lint */
@


1.5
log
@reversed condition checking for sig*jmp(, savemask)
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.4 2002/10/21 20:00:30 mickey Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
	.asciz	"$OpenBSD: setjmp.S,v 1.4 2002/10/21 20:00:30 mickey Exp $"
@


1.4
log
@deal w/ longjmp(, 0)
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.3 2002/02/08 16:35:15 mickey Exp $	*/
d47 1
a47 1
	.asciz	"$OpenBSD: setjmp.S,v 1.3 2002/02/08 16:35:15 mickey Exp $"
d63 1
a63 1
	sub,=	%r0, %arg1, %r0
d136 1
a136 1
	sub,=	%r0, %arg2, %r0
@


1.3
log
@fix typo, and put back stack frame ops
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.2 2002/02/07 20:24:59 mickey Exp $	*/
d47 1
a47 1
	.asciz	"$OpenBSD: setjmp.S,v 1.2 2002/02/07 20:24:59 mickey Exp $"
d200 2
@


1.2
log
@reverse condition in the sp botchness check, we need to nullify
if we are ok not if we are bad. fix a pasto in branch w/in longjmps.
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.1 2002/02/06 18:50:26 mickey Exp $	*/
d47 1
a47 1
	.asciz	"$OpenBSD: setjmp.S,v 1.1 2002/02/06 18:50:26 mickey Exp $"
d64 2
a65 1
	b	_setjmp
d75 1
a75 1
	stwm	%r1, HPPA_FRAME_SIZE(%sp)
d80 2
a81 1
	ldwm	-HPPA_FRAME_SIZE(%sp),%r3
d156 1
a156 1
	stwm	%r1, HPPA_FRAME_SIZE(%sp)
d161 2
a162 1
	ldwm	-HPPA_FRAME_SIZE(%sp),%r3
d198 1
a198 1
	ldw	8(%arg0), %sp
@


1.1
log
@implement the setjmp/longjmp family, based on fredette@@'s work
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
	.asciz	"$OpenBSD$"
a78 1
	ldo	HPPA_FRAME_SIZE(%r3),%sp
d92 2
a93 2
	stw	%sp, 8(%arg0)		; sc.sc_sp = %sp
	stw	%r0, 12(%arg0)		; set sc.sc_ps
d125 1
a125 1
	sub,<<=	%sp, %arg0, %r0		/* botch if jbuf was on stack */
d135 2
a136 1
	b	_setjmp
d140 1
a140 1
	sub,<<=	%sp, %arg0, %r0		/* botch if jbuf was on stack */
a158 1
	ldo	HPPA_FRAME_SIZE(%r3),%sp
d166 1
a166 1
	sub,<<=	%sp, %arg0, %r0		/* botch if jbuf was on stack */
@

