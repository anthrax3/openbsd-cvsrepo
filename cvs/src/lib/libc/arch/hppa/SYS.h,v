head	1.22;
access;
symbols
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.14
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.18
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.16
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.12
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.10
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.20
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.16
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.18
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.14
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.12
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.10
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.8
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.6
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.4
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.22
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.21;
commitid	d9R7VGw9CHTkwXE1;

1.21
date	2015.09.10.13.29.09;	author guenther;	state Exp;
branches;
next	1.20;
commitid	pYkLasgGFEsgLTME;

1.20
date	2015.08.31.04.58.47;	author guenther;	state Exp;
branches;
next	1.19;
commitid	wAAQKCHWEsltU8Ou;

1.19
date	2015.08.31.04.53.36;	author guenther;	state Exp;
branches;
next	1.18;
commitid	UExCqAMIoN3NjYzV;

1.18
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.17;
commitid	lTMF8Y3C9fQGd6jQ;

1.17
date	2015.04.07.01.27.06;	author guenther;	state Exp;
branches;
next	1.16;
commitid	oQvh7XA3Kql35r0J;

1.16
date	2010.10.01.05.02.19;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2006.01.05.22.13.55;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.25.20.44.50;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.20.28.04;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.31.23.07.37;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.31.20.06.46;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2001.10.24.03.17.05;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.20.20.52.09;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.12.12.03.01;	author heko;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.04.23.14.01;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.29.01.43.51;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	99.11.14.00.59.07;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	99.09.16.19.19.46;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	99.02.01.07.56.14;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.23.16.26.26;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.08.28.20.59.41;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@/*	$OpenBSD: SYS.h,v 1.21 2015/09/10 13:29:09 guenther Exp $	*/

/*
 * Copyright (c) 1998-2002 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF MIND
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/syscall.h>
#include <machine/asm.h>
#undef _LOCORE
#define _LOCORE
#include <machine/frame.h>
#include <machine/vmparam.h>
#undef _LOCORE

/* offsetof(struct tib, tib_errno) - offsetof(struct tib, __tib_tcb) */
#define TCB_OFFSET_ERRNO	-8

/*
 * We define a hidden alias with the prefix "_libc_" for each global symbol
 * that may be used internally.  By referencing _libc_x instead of x, other
 * parts of libc prevent overriding by the application and avoid unnecessary
 * relocations.
 */
#define _HIDDEN(x)		_libc_##x
#define _HIDDEN_ALIAS(x,y)			\
	STRONG_ALIAS(_HIDDEN(x),y)		!\
	.hidden _HIDDEN(x)
#define _HIDDEN_FALIAS(x,y)			\
	_HIDDEN_ALIAS(x,y)			!\
	.type _HIDDEN(x),@@function

/*
 * For functions implemented in ASM that aren't syscalls.
 *   EXIT_STRONG(x)	Like DEF_STRONG() in C; for standard/reserved C names
 *   EXIT_WEAK(x)	Like DEF_WEAK() in C; for non-ISO C names
 *   ALTEXIT_STRONG(x) and ALTEXIT_WEAK()
 *			Matching macros for ALTENTRY functions
 */
#define	ALTEXIT_STRONG(x)					\
			_HIDDEN_FALIAS(x,x)			!\
			.size _HIDDEN(x), . - _HIDDEN(x)
#define	ALTEXIT_WEAK(x)	ALTEXIT_STRONG(x)			!\
			.weak x
#define	EXIT_STRONG(x)	EXIT(x)					!\
			ALTEXIT_STRONG(x)
#define	EXIT_WEAK(x)	EXIT_STRONG(x)				!\
			.weak x
 

#define SYSENTRY(x)				!\
LEAF_ENTRY(__CONCAT(_thread_sys_,x))		!\
	WEAK_ALIAS(x,__CONCAT(_thread_sys_,x))
#define SYSENTRY_HIDDEN(x)			!\
LEAF_ENTRY(__CONCAT(_thread_sys_,x))
#define	SYSEXIT(x)				!\
	SYSEXIT_HIDDEN(x)			!\
	.size x, . - x
#define	SYSEXIT_HIDDEN(x)			!\
	EXIT(__CONCAT(_thread_sys_,x))		!\
	_HIDDEN_FALIAS(x,_thread_sys_##x)	!\
	.size _HIDDEN(x), . - _HIDDEN(x)

#define	SYSCALL(x)				!\
	stw	rp, HPPA_FRAME_ERP(sr0,sp)	!\
	ldil	L%SYSCALLGATE, r1		!\
	ble	4(sr7, r1)			!\
	ldi	__CONCAT(SYS_,x), t1		!\
	comb,=	0, t1, 1f			!\
	ldw	HPPA_FRAME_ERP(sr0,sp), rp	!\
	/* set errno */				\
	mfctl	cr27, r1			!\
	stw	t1, TCB_OFFSET_ERRNO(r1)	!\
	ldi	-1, ret0			!\
	bv	r0(rp)				!\
	 ldi	-1, ret1			!\
1:

#define	PSEUDO(x,y)				!\
SYSENTRY(x)					!\
	SYSCALL(y)				!\
	bv	r0(rp)				!\
	nop					!\
SYSEXIT(x)
#define	PSEUDO_HIDDEN(x,y)			!\
SYSENTRY_HIDDEN(x)				!\
	SYSCALL(y)				!\
	bv	r0(rp)				!\
	nop					!\
SYSEXIT_HIDDEN(x)

#define	PSEUDO_NOERROR(x,y)			!\
SYSENTRY(x)					!\
	stw	rp, HPPA_FRAME_ERP(sr0,sp)	!\
	ldil	L%SYSCALLGATE, r1		!\
	ble	4(sr7, r1)			!\
	ldi	__CONCAT(SYS_,y), t1		!\
	ldw	HPPA_FRAME_ERP(sr0,sp), rp	!\
	bv	r0(rp)				!\
	nop					!\
SYSEXIT(x)

#define	RSYSCALL(x)		PSEUDO(x,x)
#define	RSYSCALL_HIDDEN(x)	PSEUDO_HIDDEN(x,x)

@


1.21
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

alpha, arm, m88k, sh, sparc, and vax assistance miod@@
hppa assistance kettenis@@
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.20 2015/08/31 04:58:47 guenther Exp $	*/
d36 3
d89 9
a97 3
	.import	__cerror, code			!\
	comb,<>	r0, t1, __cerror		!\
	ldw	HPPA_FRAME_ERP(sr0,sp), rp
@


1.20
log
@Also add ALTEXIT_{STRONG,WEAK} to hppa64, copied from hppa.  Document'em too

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.19 2015/08/31 04:53:36 guenther Exp $	*/
d74 6
a79 1
EXIT(__CONCAT(_thread_sys_,x))
d101 1
a101 1
SYSEXIT(x)
@


1.19
log
@Add ALTEXIT_{STRONG,WEAK} to support wrapping of functions using ALTENTRY.
Fix memmove with that

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.18 2015/08/31 02:53:56 guenther Exp $	*/
d54 2
@


1.18
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.17 2015/04/07 01:27:06 guenther Exp $	*/
d55 1
a55 1
#define	EXIT_STRONG(x)	EXIT(x)					!\
d58 4
@


1.17
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.16 2010/10/01 05:02:19 guenther Exp $	*/
d35 26
@


1.16
log
@Provide a WEAK_ALIAS macro in <machine/asm.h> for the few platforms
that didn't already have one, and then immediately use it in libc's
SYS.h

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.15 2006/01/05 22:13:55 kettenis Exp $	*/
d39 2
d59 6
d77 2
a78 1
#define	RSYSCALL(x)	PSEUDO(x,x)
@


1.15
log
@System call stubs don't have a frame of their own, so use EMTRY_LEAF instead
of ENTRY.  This avoids emitting bogus unwind entries, which makes gdb a lot
happier.
ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.14 2004/05/25 20:44:50 mickey Exp $	*/
d38 1
a38 1
	.weak x ! .set x, __CONCAT(_thread_sys_,x)
@


1.14
log
@PICy stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.13 2003/06/02 20:28:04 mickey Exp $	*/
d36 2
a37 2
#define SYSENTRY(x,n)				!\
ENTRY(__CONCAT(_thread_sys_,x),n)		!\
d52 1
a52 1
SYSENTRY(x,0)					!\
d59 1
a59 1
SYSENTRY(x,0)					!\
@


1.13
log
@three four kill ...
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.12 2002/10/31 23:07:37 mickey Exp $	*/
d47 3
a49 9
	ldw	HPPA_FRAME_ERP(sr0,sp), rp	!\
	comb,=,n r0, t1, __CONCAT(x,$noerr)	!\
	.import	errno, data			!\
	ldil	L%errno, r1			!\
	stw	t1, R%errno(r1)			!\
	ldi	-1, ret0			!\
	bv	r0(rp)				!\
	ldi	-1, ret1			!\
	.label	__CONCAT(x,$noerr)
@


1.12
log
@gotta define SYSEXIT() and make all the rest of sys/*S be thread-safe now, missed this fuct in the previous take on thread-safe libc
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.11 2002/10/31 20:06:46 mickey Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.11
log
@marc@@ said we should be always thread-safe, accomodate for that, also defining the weak symbols which we did not before in either case
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.10 2001/10/24 03:17:05 mickey Exp $	*/
d41 2
a42 2
#define SYSENTRY(x)				!\
ENTRY(__CONCAT(_thread_sys_,x),0)		!\
d44 2
d63 1
a63 1
SYSENTRY(x)					!\
d67 1
a67 1
EXIT(__CONCAT(_thread_sys_,x))
d70 1
a70 1
SYSENTRY(x)					!\
d78 1
a78 1
EXIT(__CONCAT(_thread_sys_,x))
@


1.10
log
@fix __PSEUDO_NOERROR, two ways
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.9 2001/09/20 20:52:09 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998-2001 Michael Shalayeff
d39 1
d41 3
a43 3
#define	__ENTRY(p,x)	ENTRY(__CONCAT(p,x),0)
#define	__EXIT(p,x)	EXIT(__CONCAT(p,x))

d45 1
a45 2
#define	__SYSCALL(p,x)				!\
	.import	errno, data			!\
d52 1
d60 3
a62 3
#define	__RSYSCALL(p,x)				!\
__ENTRY(p,x)					!\
	__SYSCALL(p,x)				!\
d65 1
a65 1
__EXIT(p,x)
d67 2
a68 9
#define	__PSEUDO(p,x,y)				!\
__ENTRY(p,x)					!\
	__SYSCALL(p,y)				!\
	bv	r0(rp)				!\
	nop					!\
__EXIT(p,x)

#define	__PSEUDO_NOERROR(p,x,y)			!\
__ENTRY(p,x)					!\
d76 3
a78 1
__EXIT(p,x)
a79 29
/*
 * Design note:
 *
 * When the syscalls need to be renamed so they can be handled
 * specially by the threaded library, these macros insert `_thread_sys_'
 * in front of their name. This avoids the need to #ifdef _THREAD_SAFE 
 * everywhere that the renamed function needs to be called.
 */
#ifdef _THREAD_SAFE
/*
 * For the thread_safe versions, we prepend _thread_sys_ to the function
 * name so that the 'C' wrapper can go around the real name.
 */
# define SYSCALL(x)		__SYSCALL(_thread_sys_,x)
# define RSYSCALL(x)		__RSYSCALL(_thread_sys_,x)
# define PSEUDO(x,y)		__PSEUDO(_thread_sys_,x,y)
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
/*# define SYSENTRY(x)		__ENTRY(_thread_sys_,x)*/
#else /* _THREAD_SAFE */
/*
 * The non-threaded library defaults to traditional syscalls where
 * the function name matches the syscall name.
 */
# define SYSCALL(x)		__SYSCALL(,x)
# define RSYSCALL(x)		__RSYSCALL(,x)
# define PSEUDO(x,y)		__PSEUDO(,x,y)
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(,x,y)
/*# define SYSENTRY(x)		__ENTRY(,x)*/
#endif /* _THREAD_SAFE */
@


1.9
log
@Add PSEUDO_NOERROR similar to that used by NetBSD.
Some ports were setting errno in PSEUDO and some were not.  Now errno
is set for all in PSEUDO and PSEUDO_NOERROR is provided for the
non-errno case (only used by _exit).

Needs testing on vax and m88k.
XXX - hppa and powerpc still lack a real PSEUDO_NOERROR implementation.
Currently PSEUDO_NOERROR and PSEUDO are the same (so builds don't
break on those platforms).
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.8 2001/08/12 12:03:01 heko Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998-1999 Michael Shalayeff
a34 1
#include <machine/vmparam.h>
d38 1
d59 5
a63 5
#define	__RSYSCALL(p,x)			!\
__ENTRY(p,x)				!\
	__SYSCALL(p,x)			!\
	bv	r0(rp)			!\
	nop				!\
d66 5
a70 5
#define	__PSEUDO(p,x,y)			!\
__ENTRY(p,x)				!\
	__SYSCALL(p,y)			!\
	bv	r0(rp)			!\
	nop				!\
d73 9
a81 6
/* XXX - actually sets errnor */
#define	__PSEUDO_NOERROR(p,x,y)		!\
__ENTRY(p,x)				!\
	__SYSCALL(p,y)			!\
	bv	r0(rp)			!\
	nop				!\
d110 1
a110 1
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
@


1.8
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.7 2001/06/04 23:14:01 mickey Exp $	*/
d73 8
d94 5
a98 4
# define SYSCALL(x)	__SYSCALL(_thread_sys_,x)
# define RSYSCALL(x)	__RSYSCALL(_thread_sys_,x)
# define PSEUDO(x,y)	__PSEUDO(_thread_sys_,x,y)
/*# define SYSENTRY(x)	__ENTRY(_thread_sys_,x)*/
d104 5
a108 4
# define SYSCALL(x)	__SYSCALL(,x)
# define RSYSCALL(x)	__RSYSCALL(,x)
# define PSEUDO(x,y)	__PSEUDO(,x,y)
/*# define SYSENTRY(x)	__ENTRY(,x)*/
a109 1

@


1.7
log
@entrieness cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.6 2001/03/29 01:43:51 mickey Exp $	*/
d90 1
a90 1
#else _THREAD_SAFE
d99 1
a99 1
#endif _THREAD_SAFE
@


1.6
log
@fix fork, brk/sbrk; rcsid embedding
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.5 1999/11/14 00:59:07 mickey Exp $	*/
d40 1
a40 1
#define	__ENTRY(p,x)	ENTRY(__CONCAT(p,x))
@


1.5
log
@this seem proper now
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.4 1999/09/16 19:19:46 mickey Exp $	*/
d50 1
d55 1
d57 1
a57 2
	.label	__CONCAT(x,$noerr)		!\
	ldw HPPA_FRAME_ERP(sr0,sp), rp
@


1.4
log
@adopt to the new frame framework
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.3 1999/02/01 07:56:14 d Exp $	*/
d44 14
d60 3
a62 6
	stw rp, HPPA_FRAME_ERP(sr0,sp)	!\
	ldil L%SYSCALLGATE, r1		!\
	ble 4(sr7, r1)			!\
	ldi __CONCAT(SYS_,x),r22	!\
	or,<> r0,r22,r0			!\
	ldw HPPA_FRAME_ERP(sr0,sp),rp	!\
d67 3
a69 6
	stw rp, HPPA_FRAME_ERP(sr0,sp)	!\
	ldil L%SYSCALLGATE, r1		!\
	ble 4(sr7, r1)			!\
	ldi __CONCAT(SYS_,y),r22	!\
	or,<> r0,r22,r0			!\
	ldw HPPA_FRAME_ERP(sr0,sp),rp	!\
d99 1
a99 1
	.import	cerror, code
@


1.3
log
@remove PASSTHRU
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.2 1998/12/23 16:26:26 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Michael Shalayeff
d26 2
a27 2
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
d36 3
d44 8
a51 8
#define	__RSYSCALL(p,x)		!\
__ENTRY(p,x)			!\
	stw rp, FM_ERP(sr0,sp)	!\
	ldil L%SYSCALLGATE, r1	!\
	ble 4(sr7, r1)		!\
	ldi __CONCAT(SYS_,x),r22!\
	or,<> r0,r22,r0		!\
	ldw FM_ERP(sr0,sp),rp	!\
d54 8
a61 8
#define	__PSEUDO(p,x,y)		!\
__ENTRY(p,x)			!\
	stw rp, FM_ERP(sr0,sp)	!\
	ldil L%SYSCALLGATE, r1	!\
	ble 4(sr7, r1)		!\
	ldi __CONCAT(SYS_,y),r22!\
	or,<> r0,r22,r0		!\
	ldw FM_ERP(sr0,sp),rp	!\
d91 1
a91 1
	.globl	cerror
@


1.2
log
@libc_r support
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.1 1998/08/28 20:59:41 mickey Exp $	*/
a67 2
 * The PASSTHRU macro is later used for system calls that don't need
 * wrapping. (XXX its a shame the loader can't do this aliasing)
a77 1
/*# define PASSTHRU(x)	__PASSTHRU(_thread_sys_,x)*/
@


1.1
log
@some libc parts; memmove.S to written
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 6
a42 2
#define	RSYSCALL(x)		!\
ENTRY(x)			!\
d49 1
a49 1
EXIT(x)
d51 2
a52 2
#define	PSEUDO(x,y)		!\
ENTRY(x)			!\
d59 1
a59 1
EXIT(x)
d61 31
@

