head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2014.03.18.22.36.29;	author miod;	state dead;
branches;
next	1.3;

1.3
date	2013.02.02.13.29.14;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.21.00.56.59;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.22.00.44.55;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: tfork_thread.S,v 1.3 2013/02/02 13:29:14 miod Exp $	*/

/*
 * Copyright (c) 2005, Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SYS.h"

/*
 * int __tfork_thread(const struct __tfork *param, size_t psize, void (*func)(void *), void *arg);
 */
ENTRY(__tfork_thread)
	/*
	 * Move info for the new thread into registers.
	 */
	movl	%sp@@(16), %a0	/* arg */
	movl	%sp@@(12), %a1	/* func */

	/*
	 * We did not create a frame, so the stack is ready for an immediate
	 * system call invocation.
	 */
	__DO_SYSCALL(__tfork)
	jcs	9f

	tstl	%d0
	jeq	1f

	/*
	 * parent process: just return.
	 */
	rts

1:
	/*
	 * child process: invoke function, then exit.
	 */
	movl	%a0, %sp@@-	/* stack with arg pushed on it */
	jsr	%a1@@		/* func */
	addq	#4, %sp

	__DO_SYSCALL(__threxit)

9:
	/*
	 * system call failure.
	 */
	jra	PIC_PLT(__cerror)
@


1.3
log
@Userland bits for m68k/ELF. Mostly addition of register prefixes to the
assembler instructions, and cope with the few changes in return values
location.
@
text
@d1 1
a1 1
/*	$OpenBSD: tfork_thread.S,v 1.2 2012/06/21 00:56:59 guenther Exp $	*/
@


1.2
log
@__tfork() needs to set the stack address of the new thread in the kernel,
so that it can't get a signal while still running on the parent thread's
stack.  Also, pass in sizeof(struct __tfork) to provide forward compat
when more members are added.  This is an ABI change, so switch syscall
numbers and bump lib majors this time.

ok deraadt@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tfork_thread.S,v 1.1 2012/03/22 00:44:55 guenther Exp $	*/
d37 2
a38 2
	movl	sp@@(16), a0	/* arg */
	movl	sp@@(12), a1	/* func */
d47 1
a47 1
	tstl	d0
d59 3
a61 3
	movl	a0, sp@@-	/* stack with arg pushed on it */
	jsr	a1@@		/* func */
	addq	#4, sp
d69 1
a69 1
	jra	__cerror
@


1.1
log
@Move __tfork_thread() from rthreads (libpthread) to libc so that
it can be used for not-strictly-threading purposes

ok matthew@@ kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.3 2012/01/17 02:34:18 guenther Exp $	*/
d31 1
a31 1
 * int __tfork_thread(const struct __tfork *param, void *stack, void (*func)(void *), void *arg);
d35 1
a35 1
	 * Set up the new thread's stack.
d37 1
a37 2
	movl	sp@@(8), a0	/* stack */
	movl	sp@@(16), a0@@-	/* arg */
d57 1
a57 1
	 * child process: switch stacks, invoke function, then exit.
d59 1
a59 1
	movl	a0, sp		/* stack with arg pushed on it */
@

