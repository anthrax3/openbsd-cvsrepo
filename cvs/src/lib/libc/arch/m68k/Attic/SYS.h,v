head	1.18;
access;
symbols
	OPENBSD_5_5:1.17.0.8
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.38
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.36
	OPENBSD_5_0:1.16.0.34
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.32
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.30
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.26
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.28
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.24
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.22
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.20
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.18
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.16
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.14
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.4.0.10
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2014.03.18.22.36.29;	author miod;	state dead;
branches;
next	1.17;

1.17
date	2013.02.02.13.29.14;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.20.18.30;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.11.18.19.14.54;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.06.20.47.45;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.11.05.22.19.55;	author marc;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.05.00.02.17;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.03.23.58.38;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.03.20.36.43;	author marc;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.19.22.12.36;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.21.14.23.05;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.20.20.52.09;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.12.12.03.01;	author heko;	state Exp;
branches;
next	1.4;

1.4
date	99.01.06.23.14.17;	author d;	state Exp;
branches;
next	1.3;

1.3
date	97.04.17.14.57.31;	author gvf;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.13.51;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: SYS.h,v 1.17 2013/02/02 13:29:14 miod Exp $
 */

#include <sys/syscall.h>
#include <machine/asm.h>

#define _IMMEDIATE_	#

#ifdef __STDC__
# define	__ENTRY(p,x)	ENTRY(p##x)
# define	__DO_SYSCALL(x)					\
				movl _IMMEDIATE_ SYS_##x, %d0;	\
				trap _IMMEDIATE_ 0
# define	__LABEL2(p,x)	_C_LABEL(p##x)
#else
# define	__ENTRY(p,x)	ENTRY(p/**/x)
# define	__DO_SYSCALL(x)					\
				movl _IMMEDIATE_ SYS_/**/x, %d0;\
				trap _IMMEDIATE_ 0
# define	__LABEL2(p,x)	_C_LABEL(p/**/x)
#endif

/* perform a syscall */

#define		__SYSCALL_NOERROR(p,x,y)			\
			__ENTRY(p,x);				\
			__ALIAS(p,x);				\
				__DO_SYSCALL(y)

/* perform a syscall, set errno */

#define		__SYSCALL(p,x,y)				\
			.even;					\
		err:	jra	PIC_PLT(__cerror);		\
			__SYSCALL_NOERROR(p,x,y);		\
			jcs err

/* perform a syscall, return */

#define		__PSEUDO_NOERROR(p,x,y)				\
			__SYSCALL_NOERROR(p,x,y);		\
			rts

/* perform a syscall, set errno, return */

#define		__PSEUDO(p,x,y)					\
			__SYSCALL(p,x,y);			\
			rts


#ifdef	__STDC__
#define		__ALIAS(prefix,name)				\
			WEAK_ALIAS(name,prefix##name);
#else
#define		__ALIAS(prefix,name)				\
			WEAK_ALIAS(name,prefix/**/name);
#endif

/*
 * System calls entry points are really named _thread_sys_{syscall},
 * and weakly aliased to the name {syscall}. This allows the thread
 * library to replace system calls at link time.
 */
# define SYSCALL(x)     	__SYSCALL(_thread_sys_,x,x)
# define RSYSCALL(x)    	__PSEUDO(_thread_sys_,x,x)
# define PSEUDO(x,y)    	__PSEUDO(_thread_sys_,x,y)
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
# define SYSENTRY(x)    	__ENTRY(_thread_sys_,x);	\
				__ALIAS(_thread_sys_,x)

#define	ASMSTR		.asciz

	.globl	__cerror
@


1.17
log
@Userland bits for m68k/ELF. Mostly addition of register prefixes to the
assembler instructions, and cope with the few changes in return values
location.
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.16 2003/06/02 20:18:30 millert Exp $
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.15 2002/11/18 19:14:54 miod Exp $
d44 1
a44 1
				movl _IMMEDIATE_ SYS_##x, d0;	\
d50 1
a50 1
				movl _IMMEDIATE_ SYS_/**/x, d0;	\
d65 2
a66 2
				.even;				\
			err:	jra	__cerror;		\
d68 1
a68 1
				jcs err
d74 1
a74 1
				rts
d80 1
a80 1
				rts
@


1.15
log
@Oops, unbrek libc_p
@
text
@d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d33 1
a33 1
 *	$OpenBSD: SYS.h,v 1.14 2002/11/06 20:47:45 millert Exp $
@


1.14
log
@Move the weak definition from before the syscall's entry point to
after.  This avoids a bunch of reloc warnings by working around a
deficiency in the a.out loader.  miod@@ OK
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.12 2002/11/05 00:02:17 miod Exp $
d104 1
a104 1
# define SYSENTRY(x)    	__ENTRY(_thread_sys_,x)			\
@


1.13
log
@
thread safe libc -- 2nd try.   OK miod@@, millert@@
Thanks to miod@@ for m68k and vax fixes
@
text
@d63 1
d96 3
a98 2
 * For the thread_safe versions, we prepend _thread_sys_ to the function
 * name so that the 'C' wrapper can go around the real name.
d100 6
a105 10
# define SYSCALL(x)     	__ALIAS(_thread_sys_,x)		\
				__SYSCALL(_thread_sys_,x,x)
# define RSYSCALL(x)    	__ALIAS(_thread_sys_,x)		\
				__PSEUDO(_thread_sys_,x,x)
# define PSEUDO(x,y)    	__ALIAS(_thread_sys_,x)		\
				__PSEUDO(_thread_sys_,x,y)
# define PSEUDO_NOERROR(x,y)	__ALIAS(_thread_sys_,x)		\
				__PSEUDO_NOERROR(_thread_sys_,x,y)
# define SYSENTRY(x)    	__ALIAS(_thread_sys_,x)		\
				__ENTRY(_thread_sys_,x)
@


1.12
log
@Rename cerror to __cerror and curbrk to __curbrk, to avoid namespace
pollution. Conforming to art@@'s evil plans.
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.11 2002/11/03 23:58:38 marc Exp $
d86 8
a93 1
#ifdef _THREAD_SAFE
d98 10
a107 16
# define SYSCALL(x)     	__SYSCALL(_thread_sys_,x,x)
# define RSYSCALL(x)    	__PSEUDO(_thread_sys_,x,x)
# define PSEUDO(x,y)    	__PSEUDO(_thread_sys_,x,y)
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
# define SYSENTRY(x)    	__ENTRY(_thread_sys_,x)
#else /* _THREAD_SAFE */
/*
 * The non-threaded library defaults to traditional syscalls where
 * the function name matches the syscall name.
 */
# define SYSCALL(x)     	__SYSCALL(,x,x)
# define RSYSCALL(x)    	__PSEUDO(,x,x)
# define PSEUDO(x,y)    	__PSEUDO(,x,y)
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(,x,y)
# define SYSENTRY(x)    	__ENTRY(,x)
#endif /* _THREAD_SAFE */
@


1.11
log
@back out previous patch.. there are still some vax/m68k issues
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.10 2002/11/03 20:36:43 marc Exp $
d69 1
a69 1
			err:	jra	cerror;			\
d110 1
a110 1
	.globl	cerror
@


1.10
log
@
libc changes for thread safety.  Tested on:
alpha (millert@@), i386 (marc@@), m68k (millert@@ and miod@@),
powerpc (drahn@@ and dhartmei@@), sparc (millert@@ and marc@@),
sparc64 (marc@@), and vax (millert@@ and miod@@).
Thanks to millert@@, miod@@, and mickey@@ for fixes along the way.
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.9 2002/02/19 22:12:36 millert Exp $
d86 1
d96 11
@


1.9
log
@We need to keep K&R compat macros for some ports where the assemnbler is
still using -traditional-cpp.
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.8 2002/02/19 19:39:36 millert Exp $
a85 1
#ifdef _THREAD_SAFE
a94 11
#else /* _THREAD_SAFE */
/*
 * The non-threaded library defaults to traditional syscalls where
 * the function name matches the syscall name.
 */
# define SYSCALL(x)     	__SYSCALL(,x,x)
# define RSYSCALL(x)    	__PSEUDO(,x,x)
# define PSEUDO(x,y)    	__PSEUDO(,x,y)
# define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(,x,y)
# define SYSENTRY(x)    	__ENTRY(,x)
#endif /* _THREAD_SAFE */
@


1.8
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.7 2001/09/21 14:23:05 millert Exp $
d45 3
a47 2
#define		__ENTRY(p,x)	ENTRY(p##x)
#define		__DO_SYSCALL(x)					\
d50 8
a57 1
#define		__LABEL2(p,x)	_C_LABEL(p##x)
@


1.7
log
@Fix incorrect number of args to __SYSCALL.  Somehow this managed to
work in my test on static libs -- I've no idea how though.
While I'm here, remove __RSYSCALL since it is the same as __PSEUDO.
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.6 2001/09/20 20:52:09 millert Exp $
d45 2
a46 3
#ifdef __STDC__
# define	__ENTRY(p,x)	ENTRY(p##x)
# define	__DO_SYSCALL(x)					\
d49 1
a49 8
# define	__LABEL2(p,x)	_C_LABEL(p##x)
#else
# define	__ENTRY(p,x)	ENTRY(p/**/x)
# define	__DO_SYSCALL(x)					\
				movl _IMMEDIATE_ SYS_/**/x, d0;	\
				trap _IMMEDIATE_ 0
# define	__LABEL2(p,x)	_C_LABEL(p/**/x)
#endif
@


1.6
log
@Add PSEUDO_NOERROR similar to that used by NetBSD.
Some ports were setting errno in PSEUDO and some were not.  Now errno
is set for all in PSEUDO and PSEUDO_NOERROR is provided for the
non-errno case (only used by _exit).

Needs testing on vax and m88k.
XXX - hppa and powerpc still lack a real PSEUDO_NOERROR implementation.
Currently PSEUDO_NOERROR and PSEUDO are the same (so builds don't
break on those platforms).
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.5 2001/08/12 12:03:01 heko Exp $
a84 4
/* perform a syscall, set errno, return */

#define		__RSYSCALL(p,x)	__PSEUDO(p,x,x)

d91 2
a92 2
# define SYSCALL(x)     	__SYSCALL(_thread_sys_,x)
# define RSYSCALL(x)    	__RSYSCALL(_thread_sys_,x)
d101 2
a102 2
# define SYSCALL(x)     	__SYSCALL(,x)
# define RSYSCALL(x)    	__RSYSCALL(,x)
@


1.5
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.4 1999/01/06 23:14:17 d Exp $
d59 6
d67 1
a67 1
#define		__SYSCALL(p,x)					\
d70 1
a70 2
			__ENTRY(p,x);				\
				__DO_SYSCALL(x);		\
d73 1
a73 1
/* perform a syscall, set errno, return */
d75 3
a77 1
#define		__RSYSCALL(p,x)	__SYSCALL(p,x); rts
d79 1
a79 1
/* perform a syscall, return */
d82 1
a82 2
			__ENTRY(p,x);				\
				__DO_SYSCALL(y);		\
d85 5
d95 5
a99 4
# define SYSCALL(x)     __SYSCALL(_thread_sys_,x)
# define RSYSCALL(x)    __RSYSCALL(_thread_sys_,x)
# define PSEUDO(x,y)    __PSEUDO(_thread_sys_,x,y)
# define SYSENTRY(x)    __ENTRY(_thread_sys_,x)
d105 5
a109 4
# define SYSCALL(x)     __SYSCALL(,x)
# define RSYSCALL(x)    __RSYSCALL(,x)
# define PSEUDO(x,y)    __PSEUDO(,x,y)
# define SYSENTRY(x)    __ENTRY(,x)
@


1.4
log
@_THREAD_SAFE
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.3 1997/04/17 14:57:31 gvf Exp $
d88 1
a88 1
#else _THREAD_SAFE
d97 1
a97 1
#endif _THREAD_SAFE
@


1.3
log
@Fix __STDC__ macro handling of #, only hurt for mkdep not cpp due
to cpp's use of -traditional. NetBSD PR port-m68k/3222. Fix from
<horimoto@@cs-aoi.cs.sist.ac.jp>.
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.2 1996/08/19 08:13:51 tholo Exp $
a42 2
#ifdef __STDC__

d45 53
a97 14
#define	SYSCALL(x)	.even; err: jra cerror; ENTRY(x); \
			movl _IMMEDIATE_ SYS_ ## x,d0; trap _IMMEDIATE_ 0; jcs err
#define	RSYSCALL(x)	SYSCALL(x); rts
#define	PSEUDO(x,y)	ENTRY(x); movl _IMMEDIATE_ SYS_ ## y,d0; trap _IMMEDIATE_ 0; rts

#undef _IMMEDIATE_
#else /* !__STDC__ */

#define	SYSCALL(x)	.even; err: jra cerror; ENTRY(x); \
			movl #SYS_/**/x,d0; trap #0; jcs err
#define	RSYSCALL(x)	SYSCALL(x); rts
#define	PSEUDO(x,y)	ENTRY(x); movl #SYS_/**/y,d0; trap #0; rts

#endif /* !__STDC__ */
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d37 1
a37 1
 *	$OpenBSD: SYS.h,v 1.1.1.1 1995/10/18 08:41:27 deraadt Exp $
d45 2
d48 1
a48 1
			movl \#SYS_ ## x,d0; trap \#0; jcs err
d50 1
a50 1
#define	PSEUDO(x,y)	ENTRY(x); movl \#SYS_ ## y,d0; trap \#0; rts
d52 1
@


1.1
log
@Initial revision
@
text
@d37 1
a37 2
 *	from: @@(#)SYS.h	5.5 (Berkeley) 5/7/91
 *	$Id: SYS.h,v 1.4 1994/08/04 05:02:31 chopps Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
