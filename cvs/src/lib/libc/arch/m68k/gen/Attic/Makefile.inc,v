head	1.13;
access;
symbols
	OPENBSD_5_5:1.12.0.10
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.14
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.12
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.10
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.8
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.6
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.13
date	2014.03.18.22.36.29;	author miod;	state dead;
branches;
next	1.12;

1.12
date	2012.04.19.19.14.56;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2012.04.12.16.14.09;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.08.22.28.33;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.08.19.21.41;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.09.19.52.33;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.07.20.36.07;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.24.09.31.06;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.29.21.38.09;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.01.15.12.29;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.10.22.38.11;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.13.53;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@#	$OpenBSD: Makefile.inc,v 1.12 2012/04/19 19:14:56 deraadt Exp $

SRCS+=	_setjmp.S fabs.S infinity.c ldexp.S \
	modf.S nan.c setjmp.S sigsetjmp.S
SRCS+=	flt_rounds.S fpgetmask.S fpgetround.S fpgetsticky.S fpsetmask.S \
	fpsetround.S fpsetsticky.S
SRCS+=	fpclassifyl.c isfinitel.c isinfl.c isnanl.c isnormall.c signbitl.c
SRCS+=	adddf3.S addsf3.S ashlsi3.S ashrsi3.S cmpdf2.S cmpsf2.S divdf3.S \
	divsf3.S divsi3.S extendsfdf2.S fixdfsi.S fixunsdfsi.S \
	floatsidf.S lshlsi3.S lshrsi3.S modsi3.S muldf3.S mulsf3.S mulsi3.S \
	negdf2.S negsf2.S saveregs.c subdf3.S subsf3.S truncdfsf2.S udivsi3.S \
	umodsi3.S umulsi3.S
@


1.12
log
@rely on the compiler giving us a built-in alloca.  any new architecture
or compiler we use will.
ok millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2012/04/12 16:14:09 deraadt Exp $
@


1.11
log
@alloca.c cannot be used
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2011/07/08 22:28:33 martynas Exp $
a12 2

SRCS+=	alloca.S
@


1.10
log
@Revert (leaving the complex math part alone).  Some stuff is depending
on this historical behavior;  so we're stuck in this stupid situation.
No cookie for me.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2008/12/09 19:52:33 martynas Exp $
a14 1
LSRCS+= alloca.c
@


1.9
log
@Move fabs(3), frexp(3), and modf(3) to libm--nothing has been using
them in libc for a very long time.  OK guenther@@.
@
text
@d3 2
a4 2
SRCS+=	_setjmp.S infinity.c ldexp.S \
	nan.c setjmp.S sigsetjmp.S
@


1.8
log
@- add long double signbit
- make long double versions weak aliases to double versions,
on archs where long doubles are 64 bits
- no need to have two finites.  finite() and finitef() are
non-standard 3BSD obsolete versions of isfinite.  remove
from libm.  make them weak_alias in libc to __isfinite and
__isfinitef instead.  similarly make 3BSD obsolete versions
of isinf, isinff, isnan, isnanf weak_aliases to C99's
__isinf, __isinff, __isnan, __isnanf
- bump major
ok millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2008/09/07 20:36:07 martynas Exp $
d3 2
a4 2
SRCS+=	_setjmp.S fabs.S infinity.c ldexp.S \
	modf.S nan.c setjmp.S sigsetjmp.S
@


1.7
log
@- replace dtoa w/ David's gdtoa, version 2008-03-15
- provide proper dtoa locks
- use the real strtof implementation
- add strtold, __hdtoa, __hldtoa
- add %a/%A support
- don't lose precision in printf, don't round to double anymore
- implement extended-precision versions of libc functions: fpclassify,
isnan, isinf, signbit, isnormal, isfinite, now that the ieee.h is
fixed
- separate vax versions of strtof, and __hdtoa
- add complex math support.  added functions: cacos, casin, catan,
ccos, csin, ctan, cacosh, casinh, catanh, ccosh, csinh, ctanh, cexp,
clog, cabs, cpow, csqrt, carg, cimag, conj, cproj, creal, cacosf,
casinf, catanf, ccosf, csinf, ctanf, cacoshf, casinhf, catanhf,
ccoshf, csinhf, ctanhf, cexpf, clogf, cabsf, cpowf, csqrtf, cargf,
cimagf, conjf, cprojf, crealf
- add fdim, fmax, fmin
- add log2. (adapted implementation e_log.c.  could be more acruate
& faster, but it's good enough for now)
- remove wrappers & cruft in libm, supposed to work-around mistakes
in SVID, etc.;  use ieee versions.  fixes issues in python 2.6 for
djm@@
- make _digittoint static
- proper definitions for i386, and amd64 in ieee.h
- sh, powerpc don't really have extended-precision
- add missing definitions for mips64 (quad), m{6,8}k (96-bit) float.h
for LDBL_*
- merge lead to frac for m{6,8}k, for gdtoa to work properly
- add FRAC*BITS & EXT_TO_ARRAY32 definitions in ieee.h, for hdtoa&ldtoa
to use
- add EXT_IMPLICIT_NBIT definition, which indicates implicit
normalization bit
- add regression tests for libc: fpclassify and printf
- arith.h & gd_qnan.h definitions
- update ieee.h: hppa doesn't have quad-precision, hppa64 does
- add missing prototypes to gdtoaimp
- on 64-bit platforms make sure gdtoa doesn't use a long when it
really wants an int
- etc., what i may have forgotten...
- bump libm major, due to removed&changed symbols
- no libc bump, since this is riding on djm's libc major crank from
a day ago

discussed with / requested by / testing theo, sthen@@, djm@@, jsg@@,
merdely@@, jsing@@, tedu@@, brad@@, jakemsr@@, and others.
looks good to millert@@
parts of the diff ok kettenis@@

this commit does not include:
- man page changes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2008/07/24 09:31:06 martynas Exp $
d7 1
a7 1
SRCS+=	fpclassifyl.c isfinitel.c isinfl.c isnanl.c isnormall.c
@


1.6
log
@- move isinf, isnan dups to gen, since most is ieee 754
- is{inf,nan} should be macros for real-floating, so rename to
__is{inf,nan}, per C99
- implement C99 __fpclassify(), __fpclassifyf(), __isfinite(),
__isfinitef(), __isnormal(), __isnormalf(), __signbit(), __signbitf()
- long functions added, but not yet enabled, till ieee.h is fixed
- implement vax equivalents of the functions
- reimplement isinff, isnanf in a better way, and move to libc
- add qnan bytes for all archs
- bump major
man pages will follow
ok millert@@.  arm bits looked over by drahn@@
discussed w/ theo, who showed the right direction, to put these
functions in libc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2005/11/29 21:38:09 deraadt Exp $
d7 1
@


1.5
log
@if we pull in a .S file, we must fake out the lint with a .c file
for this first cut, we will do this for alloca() using alloca.c by
adding it to LSRCS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2005/02/01 15:12:29 millert Exp $
d3 2
a4 2
SRCS+=	_setjmp.S fabs.S infinity.c isinf.c isnan.c ldexp.S \
	modf.S setjmp.S sigsetjmp.S
@


1.4
log
@Replace broken frexp() with a working one from FreeBSD.  There's
no need to have a copy for each platform with ieee floating point,
only vax needs a special version (which probably has similar bugs).
OK and with help from otto@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2001/09/10 22:38:11 millert Exp $
d3 1
a3 1
SRCS+=	_setjmp.S alloca.S fabs.S infinity.c isinf.c isnan.c ldexp.S \
d12 3
@


1.3
log
@Use the LBL isnan() and isinf() on all platforms with ieee floating point.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 1996/08/19 08:13:53 tholo Exp $
d3 1
a3 1
SRCS+=	_setjmp.S alloca.S fabs.S frexp.c infinity.c isinf.c isnan.c ldexp.S \
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 1995/05/03 03:43:05 briggs Exp $
d3 2
a4 2
SRCS+=	_setjmp.S alloca.S fabs.S frexp.c infinity.c isinf.c ldexp.S modf.S \
	setjmp.S sigsetjmp.S
a11 1

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.inc,v 1.4 1995/05/03 03:43:05 briggs Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
