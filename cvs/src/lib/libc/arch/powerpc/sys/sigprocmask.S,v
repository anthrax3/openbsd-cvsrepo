head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.7.0.54
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.46
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.50
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.48
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.44
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.42
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.40
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.38
	OPENBSD_5_0:1.7.0.36
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.34
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.32
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.28
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.30
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.26
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.24
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.22
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.20
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.18
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.16
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.14
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.12
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.10
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.8
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.6
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.12
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.10
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	powerpc_1:1.1.1.1;
locks; strict;
comment	@# @;


1.12
date	2016.05.15.00.15.10;	author guenther;	state Exp;
branches;
next	1.11;
commitid	q5ZHgo4XiUrTIUH8;

1.11
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.10;
commitid	d9R7VGw9CHTkwXE1;

1.10
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.9;
commitid	OrVNAJkzchWBNbO0;

1.9
date	2015.09.05.06.22.47;	author guenther;	state Exp;
branches;
next	1.8;
commitid	YcHx4KWjuOzN6Vj2;

1.8
date	2015.08.23.15.51.28;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	SYSxZ1Y24CowNLv4;

1.7
date	2002.10.07.04.47.12;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.07.04.16.34;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.10.15.23.48;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	99.03.12.04.37.20;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	99.01.28.05.09.12;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	97.09.27.16.05.24;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.42.23;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.42.23;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.12
log
@TIB conversion is complete, so set errno in the syscall stub and eliminate
__cerror

ok ketternis@@
@
text
@/* $OpenBSD: sigprocmask.S,v 1.11 2016/05/07 19:05:22 guenther Exp $ */

/*
 * Copyright (c) 1996 Dale Rahn
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* sigprocmask(int how, const sigset_t *set, sigset_t *oset); */

#include "SYS.h"

	.text
PREFIX_HIDDEN(sigprocmask)
	stwu	1, -16(1)
	stw	5, 12(1)
	
	/* check set (new mask value) for null, in which case
	   fiddle arguments */
	cmpwi	4, 0
	bne+	.L_load_set
	addi	3, 0, 1	/* how = SIG_BLOCK, new mask already 0 */
	b .L_do_call
.L_load_set:
	lwz	4, 0(4)	/* get new mask */
.L_do_call:
	
	sc
	
	/* didnt work? */
	cmpwi	0, 0
	beq+	.L_sigprocmask_ok
	stw	0, R2_OFFSET_ERRNO(2)
	li	3, -1
	blr

.L_sigprocmask_ok:
	lwz	5, 12(1)
	cmpwi	5, 0
	beq+	.L_sigprocmask_done
	stw	3, 0(5)
.L_sigprocmask_done:
	li	3, 0
	addi	1, 1, 16
	blr
SYSCALL_END_HIDDEN(sigprocmask)
@


1.11
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: sigprocmask.S,v 1.10 2015/10/23 04:39:24 guenther Exp $ */
d52 3
a54 1
	b	_ASM_LABEL(__cerror)
@


1.10
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: sigprocmask.S,v 1.9 2015/09/05 06:22:47 guenther Exp $ */
d52 1
a52 1
	b	_ASM_LABEL(___cerror)
@


1.9
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: sigprocmask.S,v 1.8 2015/08/23 15:51:28 kettenis Exp $ */
d33 1
a33 1
PREFIX(sigprocmask)
d63 1
a63 1
SYSCALL_END(sigprocmask)
@


1.8
log
@Make __cerror() use the per-thread errno location if r2 isn't zero.  This way
libpthread no longer has to override it which means that we can use a local
call and can avoid setting up r30 as a _GLOBAL_OFFSET_TABLE_ pointer, which
is hard the way the powerpc ABI works.

For now we continue to provide __cerror as a weak symbol, but ___cerror is
now protected and internal calls within libc now use ___cerror instead of
__cerror.

discussed with guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: sigprocmask.S,v 1.7 2002/10/07 04:47:12 drahn Exp $ */
d63 1
@


1.7
log
@kick, kick. Fix these files which did not come from NetBSD, but the
powerpc port by Dale Rahn.
@
text
@d1 1
a1 1
/* $OpenBSD:$ */
d52 1
a52 1
	b	PIC_PLT(_ASM_LABEL(__cerror))
@


1.6
log
@cerror -> __cerror as suggested by art, with a couple of missing _ASM_LABEL()
added as appropriate.
@
text
@d1 27
@


1.5
log
@sigprocmask should return 0 on success, fixes powerpc ntpdate problem.
@
text
@d25 1
a25 1
	b	PIC_PLT(_ASM_LABEL(cerror))
@


1.4
log
@Fixes to the currently unused PIC support in the powerpc asm files.
contact rahnds@@openbsd.org before attempting to use this funcationality.
@
text
@d33 1
@


1.3
log
@Preliminary version for PIC support. Builds and runs standard and profiled
just fine. pic version has been compiled, but without a ld.so has not been
tested. Needs binutils 2.9.1 or later to build pic version.
@
text
@d25 1
a25 1
	b	cerror
@


1.2
log
@Amazing how much confusion and how much tracing a simple 4 instead of a 3
can cause!! Returned sigmask value was taken from wrong register... So no
more zombies!!!
@
text
@d12 7
a18 7
	cmpwi 4, 0
	bne+ load_set
	addi 3, 0, 1	/* how = SIG_BLOCK, new mask already 0 */
	b do_call
load_set:
	lwz 4, 0(4)	/* get new mask */
do_call:
d23 3
a25 3
	cmpwi 0, 0
	beq+ sigprocmask_ok
	b cerror
d27 1
a27 1
sigprocmask_ok:
d29 4
a32 4
	cmpwi 5, 0
	beq+ sigprocmask_done
	stw 3, 0(5)
sigprocmask_done:
@


1.1
log
@Initial revision
@
text
@d7 2
d28 1
d31 1
a31 1
	stw 4, 0(5)
d33 1
@


1.1.1.1
log
@Check-in of powerpc library support.
NOTE: This will not work until the other pieces are checked in.
    This is primarily the NetBSD powerpc port, with modifications
	to support ELF.

@
text
@@
