head	1.22;
access;
symbols
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.6
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.16
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.12
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.10
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.8
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.13.0.32
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.28
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.30
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.26
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.24
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.22
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.20
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.18
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.16
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.14
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.12
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.10
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.8
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.6
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.4
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.6
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2016.05.15.00.15.10;	author guenther;	state Exp;
branches;
next	1.21;
commitid	q5ZHgo4XiUrTIUH8;

1.21
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.20;
commitid	d9R7VGw9CHTkwXE1;

1.20
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.19;
commitid	OrVNAJkzchWBNbO0;

1.19
date	2015.09.05.06.22.47;	author guenther;	state Exp;
branches;
next	1.18;
commitid	YcHx4KWjuOzN6Vj2;

1.18
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.17;
commitid	lTMF8Y3C9fQGd6jQ;

1.17
date	2015.08.23.15.51.28;	author kettenis;	state Exp;
branches;
next	1.16;
commitid	SYSxZ1Y24CowNLv4;

1.16
date	2015.04.07.01.27.06;	author guenther;	state Exp;
branches;
next	1.15;
commitid	oQvh7XA3Kql35r0J;

1.15
date	2014.06.04.20.13.49;	author matthew;	state Exp;
branches;
next	1.14;
commitid	CQgbVinZLjc6cr0k;

1.14
date	2010.10.01.05.02.19;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.07.04.16.33;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.19.22.12.36;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.20.21.13.27;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.20.20.52.10;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.06.23.29.15;	author d;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.01.17.31.22;	author todd;	state Exp;
branches;
next	1.6;

1.6
date	99.06.15.02.12.13;	author rahnds;	state Exp;
branches;
next	1.5;

1.5
date	99.03.12.04.37.20;	author rahnds;	state Exp;
branches;
next	1.4;

1.4
date	99.02.01.07.56.14;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.12.23.05.39.45;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	98.07.04.23.57.40;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.42.21;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.42.21;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.22
log
@TIB conversion is complete, so set errno in the syscall stub and eliminate
__cerror

ok ketternis@@
@
text
@/*	$OpenBSD: SYS.h,v 1.21 2016/05/07 19:05:22 guenther Exp $	*/
/*-
 * Copyright (c) 1994
 *	Andrew Cagney.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)SYS.h	8.1 (Berkeley) 6/4/93
 */

#include <sys/syscall.h>

/* r0 will be a non zero errno if there was an error, while r3/r4 will
   contain the return value */

#include "machine/asm.h"


/* offsetof(struct tib, tib_errno) - offsetof(struct tib, __tib_tcb) */
#define	TCB_OFFSET_ERRNO	(-8)
/* from <powerpc/tcb.h>: TCB address == %r2 - TCB_OFFSET */
#define	TCB_OFFSET		0x7000

/* offset of errno from %r2 */
#define	R2_OFFSET_ERRNO		(-TCB_OFFSET + TCB_OFFSET_ERRNO)

/*
 * We define a hidden alias with the prefix "_libc_" for each global symbol
 * that may be used internally.  By referencing _libc_x instead of x, other
 * parts of libc prevent overriding by the application and avoid unnecessary
 * relocations.
 */
#define _HIDDEN(x)		_libc_##x
#define _HIDDEN_ALIAS(x,y)			\
	STRONG_ALIAS(_HIDDEN(x),y);		\
	.hidden _HIDDEN(x)
#define _HIDDEN_FALIAS(x,y)			\
	_HIDDEN_ALIAS(x,y);			\
	.type _HIDDEN(x),@@function

/*
 * For functions implemented in ASM that aren't syscalls.
 *   END_STRONG(x)	Like DEF_STRONG() in C; for standard/reserved C names
 *   END_WEAK(x)	Like DEF_WEAK() in C; for non-ISO C names
 */
#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
#define	END_WEAK(x)	END_STRONG(x); .weak x


#define _CONCAT(x,y)	x##y
#define PSEUDO_PREFIX(p,x,y)	\
			ENTRY(p##x) \
				li 0, SYS_##y ; \
				/* sc */
#define PSEUDO_SUFFIX		cmpwi 0, 0 ; \
				beqlr+ ; \
				stw	0, R2_OFFSET_ERRNO(2); \
				li	3, -1; \
				li	4, -1; /* for __syscall(lseek) */ \
				blr

#define PSEUDO_NOERROR_SUFFIX	blr

#define __END_HIDDEN(p,x)	END(p##x);			\
				_HIDDEN_FALIAS(x,p##x);		\
				END(_HIDDEN(x))
#define __END(p,x)		__END_HIDDEN(p,x); END(x)


#define ALIAS(x,y)		WEAK_ALIAS(y,_CONCAT(x,y));
		
#define PREFIX_HIDDEN(x)	PSEUDO_PREFIX(_thread_sys_,x,x)
#define PREFIX(x)		ALIAS(_thread_sys_,x) \
				PREFIX_HIDDEN(x)
#define	PSEUDO_NOERROR(x,y)	ALIAS(_thread_sys_,x) \
				PSEUDO_PREFIX(_thread_sys_,x,y) ; \
				sc ; \
				PSEUDO_NOERROR_SUFFIX; \
				__END(_thread_sys_,x)

#define	PSEUDO_HIDDEN(x,y)	PSEUDO_PREFIX(_thread_sys_,x,y) ; \
				sc ; \
				PSEUDO_SUFFIX; \
				__END_HIDDEN(_thread_sys_,x)
#define	PSEUDO(x,y)		ALIAS(_thread_sys_,x) \
				PSEUDO_HIDDEN(x,y); \
				__END(_thread_sys_,x)

#define RSYSCALL(x)		PSEUDO(x,x)
#define RSYSCALL_HIDDEN(x)	PSEUDO_HIDDEN(x,x)
#define SYSCALL_END_HIDDEN(x)	__END_HIDDEN(_thread_sys_,x)
#define SYSCALL_END(x)		__END(_thread_sys_,x)

@


1.21
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.20 2015/10/23 04:39:24 guenther Exp $	*/
d47 9
d80 1
a80 1
#define PSEUDO_PREFIX(p,x,y)	.extern _ASM_LABEL(__cerror) ; \
d86 4
a89 1
				b _ASM_LABEL(__cerror)
@


1.20
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.19 2015/09/05 06:22:47 guenther Exp $	*/
d71 1
a71 1
#define PSEUDO_PREFIX(p,x,y)	.extern _ASM_LABEL(___cerror) ; \
d77 1
a77 1
				b _ASM_LABEL(___cerror)
@


1.19
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.18 2015/08/31 02:53:57 guenther Exp $	*/
d89 1
d91 1
a91 3
				PSEUDO_PREFIX(_thread_sys_,x,x)
#define PREFIX2(x,y)		ALIAS(_thread_sys_,x) \
				PSEUDO_PREFIX(_thread_sys_,x,y)
d108 1
@


1.18
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.17 2015/08/23 15:51:28 kettenis Exp $	*/
d81 5
a85 1
#define SUFFIX			PSEUDO_SUFFIX
d96 2
a97 1
				PSEUDO_NOERROR_SUFFIX
d101 2
a102 1
				PSEUDO_SUFFIX
d104 2
a105 1
				PSEUDO_HIDDEN(x,y)
d109 2
@


1.17
log
@Make __cerror() use the per-thread errno location if r2 isn't zero.  This way
libpthread no longer has to override it which means that we can use a local
call and can avoid setting up r30 as a _GLOBAL_OFFSET_TABLE_ pointer, which
is hard the way the powerpc ABI works.

For now we continue to provide __cerror as a weak symbol, but ___cerror is
now protected and internal calls within libc now use ___cerror instead of
__cerror.

discussed with guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.16 2015/04/07 01:27:06 guenther Exp $	*/
d46 23
@


1.16
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.15 2014/06/04 20:13:49 matthew Exp $	*/
d48 1
a48 1
#define PSEUDO_PREFIX(p,x,y)	.extern _ASM_LABEL(__cerror) ; \
d54 1
a54 1
				b PIC_PLT(_ASM_LABEL(__cerror))
@


1.15
log
@Apply "unifdef -D__STDC__" to libc/arch/*/SYS.h

A while back, pascal@@ converted our system call stubs from using "cpp
| as" to "cc -x assembler-with-cpp", so there's no need to stay
compatible with ancient preprocessor semantics.

ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.14 2010/10/01 05:02:19 guenther Exp $	*/
d71 1
a71 2
#define	PSEUDO(x,y)		ALIAS(_thread_sys_,x) \
				PSEUDO_PREFIX(_thread_sys_,x,y) ; \
d74 2
d78 1
@


1.14
log
@Provide a WEAK_ALIAS macro in <machine/asm.h> for the few platforms
that didn't already have one, and then immediately use it in libc's
SYS.h

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.13 2002/10/07 04:16:33 drahn Exp $	*/
a46 1
#ifdef __STDC__
a51 7
#else /* !__STDC__ */
#define _CONCAT(x,y)	x/**/y
#define PSEUDO_PREFIX(p,x,y)	.extern _ASM_LABEL(__cerror) ; \
			ENTRY(p/**/x) \
				li 0, SYS_/**/y ; \
				/* sc */
#endif /* !__STDC__ */
@


1.13
log
@cerror -> __cerror as suggested by art, with a couple of missing _ASM_LABEL()
added as appropriate.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.12 2002/02/19 22:12:36 millert Exp $	*/
d68 1
a68 1
#define ALIAS(x,y)		.weak y; .set y,_CONCAT(x,y);
@


1.12
log
@We need to keep K&R compat macros for some ports where the assemnbler is
still using -traditional-cpp.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.11 2002/02/19 19:39:36 millert Exp $	*/
d49 1
a49 1
#define PSEUDO_PREFIX(p,x,y)	.extern cerror ; \
d55 1
a55 1
#define PSEUDO_PREFIX(p,x,y)	.extern cerror ; \
d62 1
a62 1
				b PIC_PLT(_ASM_LABEL(cerror))
@


1.11
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.10 2001/09/20 21:13:27 drahn Exp $	*/
d47 1
d53 7
a59 1

@


1.10
log
@change PSEUDO_NOERROR so it is indeed does not set errno.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.9 2001/09/20 20:52:10 millert Exp $	*/
a46 1
#ifdef __STDC__
d52 1
a52 7
#else /* !__STDC__ */
#define _CONCAT(x,y)	x/**/y
#define PSEUDO_PREFIX(p,x,y)	.extern cerror ; \
			ENTRY(p/**/x) \
				li 0, SYS_/**/y ; \
				/* sc */
#endif /* !__STDC__ */
@


1.9
log
@Add PSEUDO_NOERROR similar to that used by NetBSD.
Some ports were setting errno in PSEUDO and some were not.  Now errno
is set for all in PSEUDO and PSEUDO_NOERROR is provided for the
non-errno case (only used by _exit).

Needs testing on vax and m88k.
XXX - hppa and powerpc still lack a real PSEUDO_NOERROR implementation.
Currently PSEUDO_NOERROR and PSEUDO are the same (so builds don't
break on those platforms).
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.8 2000/10/06 23:29:15 d Exp $	*/
d64 1
a73 1
/* XXX - actually sets errno */
d77 1
a77 1
				PSEUDO_SUFFIX
@


1.8
log
@weaken syscall symbols in libc by default
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.7 2000/03/01 17:31:22 todd Exp $	*/
d73 6
a84 1

@


1.7
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.6 1999/06/15 02:12:13 rahnds Exp $	*/
a66 9
#ifndef _THREAD_SAFE
#define PREFIX(x)		PSEUDO_PREFIX(,x,x)
#define PREFIX2(x,y)		PSEUDO_PREFIX(,x,y)
#define	PSEUDO(x,y)		PSEUDO_PREFIX(,x,y) ; \
				sc ; \
				PSEUDO_SUFFIX

#define RSYSCALL(x)		PSEUDO(x,x)
#else /* _THREAD_SAFE */
a79 1
#endif /* _THREAD_SAFE */
@


1.6
log
@changes required for powerpc libc_r support.
@
text
@d1 1
a37 1
 *      $Id: SYS.h,v 1.5 1999/03/12 04:37:20 rahnds Exp $ 
@


1.5
log
@Fixes to the currently unused PIC support in the powerpc asm files.
contact rahnds@@openbsd.org before attempting to use this funcationality.
@
text
@d37 1
a37 1
 *      $Id: SYS.h,v 1.4 1999/02/01 07:56:14 d Exp $ 
d76 8
a83 3
#define PREFIX(x)		PSEUDO_PREFIX(_thread_sys_,x,x)
#define PREFIX2(x,y)		PSEUDO_PREFIX(_thread_sys_,x,y)
#define	PSEUDO(x,y)		PSEUDO_PREFIX(_thread_sys_,x,y) ; \
@


1.4
log
@remove PASSTHRU
@
text
@d37 1
a37 1
 *      $Id: SYS.h,v 1.3 1998/12/23 05:39:45 rahnds Exp $ 
d62 1
a62 1
				b cerror 
@


1.3
log
@_thread_sys changes for powerpc SYS.h, code mostly from d, fixed up
and completed for checkin.
@
text
@d37 1
a37 1
 *      $Id: SYS.h,v 1.2 1998/07/04 23:57:40 rahnds Exp $ 
a82 1
#define PASSTHRU(x)		ENTRY(x)	b _CONCAT(_thread_sys_,x)
@


1.2
log
@Changes to support profiling libraries for the powerpc port.
@
text
@d37 1
a37 1
 *      $Id: SYS.h,v 1.1.1.1 1996/12/21 20:42:21 rahnds Exp $ 
d48 3
a50 2
#define PSEUDO_PREFIX(x,y)	.extern cerror ; \
			ENTRY(x) \
d54 3
a56 2
#define PSEUDO_PREFIX(x,y)	.extern cerror ; \
			ENTRY(x) \
a63 1
#define PREFIX(x)		PSEUDO_PREFIX(x,x)
d67 4
a70 1
#define	PSEUDO(x,y)		PSEUDO_PREFIX(x,y) ; \
d75 11
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
 *      $Id: SYS.h,v 1.1.1.1 1996/09/30 05:09:55 drahn Exp $ 
d48 3
a50 4
#define PSEUDO_PREFIX(x,y)	.globl _C_LABEL(x) ; \
				.align 2; \
				.extern cerror ; \
			_C_LABEL(x):	li 0, SYS_##y ; \
d53 3
a55 4
#define PSEUDO_PREFIX(x,y)	.globl _C_LABEL(x) ; \
				.align 2; \
				.extern cerror ; \
			_C_LABEL(x):	li 0, SYS_/**/y ; \
d60 1
a60 1
				b cerror
@


1.1.1.1
log
@Check-in of powerpc library support.
NOTE: This will not work until the other pieces are checked in.
    This is primarily the NetBSD powerpc port, with modifications
	to support ELF.

@
text
@@
