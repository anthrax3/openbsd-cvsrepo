head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.8
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.14
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.10
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.8
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.6
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.4
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.2
	OPENBSD_4_1_BASE:1.1.1.1
	SH4_LIBC_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.18.20.21.13;	author guenther;	state Exp;
branches;
next	1.10;
commitid	vF64iVVN9U3wxSNG;

1.10
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.9;
commitid	d9R7VGw9CHTkwXE1;

1.9
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.8;
commitid	OrVNAJkzchWBNbO0;

1.8
date	2015.09.10.13.29.09;	author guenther;	state Exp;
branches;
next	1.7;
commitid	pYkLasgGFEsgLTME;

1.7
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.6;
commitid	lTMF8Y3C9fQGd6jQ;

1.6
date	2015.04.07.01.27.06;	author guenther;	state Exp;
branches;
next	1.5;
commitid	oQvh7XA3Kql35r0J;

1.5
date	2014.06.04.20.13.49;	author matthew;	state Exp;
branches;
next	1.4;
commitid	CQgbVinZLjc6cr0k;

1.4
date	2012.08.22.17.19.35;	author pascal;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.04.12.42.39;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.01.05.02.19;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Save and restore 'gbr' register when enter/leaving the kernel, and use
it for the TCB pointer.  Eliminate __cerror.

"looks good" kettenis@@, testing and ok deraadt@@
@
text
@/*	$OpenBSD: SYS.h,v 1.10 2016/05/07 19:05:22 guenther Exp $	*/
/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)SYS.h	5.5 (Berkeley) 5/7/91
 *	$NetBSD: SYS.h,v 1.9 2006/01/06 06:19:20 uwe Exp $
 */

#include <machine/asm.h>
#include <sys/syscall.h>


/*
 * We need to offset the TCB pointer (in register gbr) by this much:
 *	offsetof(struct tib, tib_errno) - offsetof(struct tib, __tib_tcb)
 * That's negative on a variant I arch like sh, but you can't directly
 * load negative numbers or use them as displacements.  Ha!  So this is the
 * negative of the real value and we'll explicitly subtract it in the asm
 */
#define	TCB_OFFSET_ERRNO_NEG	8

/*
 * We define a hidden alias with the prefix "_libc_" for each global symbol
 * that may be used internally.  By referencing _libc_x instead of x, other
 * parts of libc prevent overriding by the application and avoid unnecessary
 * relocations.
 */
#define _HIDDEN(x)		_libc_##x
#define _HIDDEN_ALIAS(x,y)			\
	STRONG_ALIAS(_HIDDEN(x),y);		\
	.hidden _HIDDEN(x)
#define _HIDDEN_FALIAS(x,y)			\
	_HIDDEN_ALIAS(x,y);			\
	.type _HIDDEN(x),@@function

/*
 * For functions implemented in ASM that aren't syscalls.
 *   END_STRONG(x)	Like DEF_STRONG() in C; for standard/reserved C names
 *   END_WEAK(x)	Like DEF_WEAK() in C; for non-ISO C names
 */
#define	END_STRONG(x)	SET_ENTRY_SIZE(x);		\
			_HIDDEN_FALIAS(x,x);		\
			SET_ENTRY_SIZE(_HIDDEN(x))
#define	END_WEAK(x)	END_STRONG(x); .weak x


#define	SYSENTRY(x)					\
	WEAK_ALIAS(x,_thread_sys_ ## x);		\
	ENTRY(_thread_sys_ ## x)
#define	SYSENTRY_HIDDEN(x)				\
	ENTRY(_thread_sys_ ## x)

#define	__END_HIDDEN(x)					\
	SET_ENTRY_SIZE(_thread_sys_ ## x);		\
	_HIDDEN_FALIAS(x,_thread_sys_ ## x);		\
	SET_ENTRY_SIZE(_HIDDEN(x))
#define	__END(x)					\
	__END_HIDDEN(x); SET_ENTRY_SIZE(x)

#define SYSTRAP(x)					\
		mov.l	903f, r0;			\
		.word	0xc380;	/* trapa #0x80; */	\
		bra	904f;				\
		 nop;					\
		.align	2;				\
	903:	.long	(SYS_ ## x);			\
	904:

#define _SYSCALL_NOERROR(x,y)				\
		SYSENTRY(x);				\
		SYSTRAP(y)
#define _SYSCALL_HIDDEN_NOERROR(x,y)			\
		SYSENTRY_HIDDEN(x);			\
		SYSTRAP(y)

#define SET_ERRNO_AND_RETURN				\
		stc	gbr,r1;				\
		mov	#TCB_OFFSET_ERRNO_NEG,r2;	\
		sub	r2,r1;				\
		mov.l	r0,@@r1;				\
		mov	#-1, r1;			\
		rts;					\
		 mov	#-1, r0

#define _SYSCALL(x,y)					\
		.text;					\
	911:	SET_ERRNO_AND_RETURN;			\
		_SYSCALL_NOERROR(x,y);			\
		bf	911b
#define _SYSCALL_HIDDEN(x,y)				\
		.text;					\
	911:	SET_ERRNO_AND_RETURN;			\
		_SYSCALL_HIDDEN_NOERROR(x,y);		\
		bf	911b

#define SYSCALL_NOERROR(x)				\
		_SYSCALL_NOERROR(x,x)

#define SYSCALL(x)					\
		_SYSCALL(x,x)

#define PSEUDO_NOERROR(x,y)				\
		_SYSCALL_NOERROR(x,y);			\
		rts;					\
		 nop;					\
		__END(x)

#define PSEUDO(x,y)					\
		_SYSCALL(x,y);				\
		rts;					\
		 nop;					\
		__END(x)

#define PSEUDO_HIDDEN(x,y)				\
		_SYSCALL_HIDDEN(x,y);			\
		rts;					\
		 nop;					\
		__END_HIDDEN(x)

#define RSYSCALL_NOERROR(x)		PSEUDO_NOERROR(x,x)
#define RSYSCALL(x)			PSEUDO(x,x)
#define RSYSCALL_HIDDEN(x)		PSEUDO_HIDDEN(x,x)
#define SYSCALL_END(x)			__END(x)
#define SYSCALL_END_HIDDEN(x)		__END_HIDDEN(x)
@


1.10
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.9 2015/10/23 04:39:24 guenther Exp $	*/
d40 10
a96 2
#define	CERROR	_C_LABEL(__cerror)

d104 8
a111 25
#ifdef __PIC__

#define JUMP_CERROR					\
		mov	r0, r4;				\
		mov.l	912f, r1;			\
		mova	912f, r0;			\
		mov.l	913f, r2;			\
		add	r1, r0;				\
		mov.l	@@(r0, r2), r3;			\
		jmp	@@r3;				\
		 nop;					\
		.align	2;				\
	912:	.long	_GLOBAL_OFFSET_TABLE_;		\
	913:	.long	PIC_GOT(CERROR)

#else  /* !PIC */

#define JUMP_CERROR					\
		mov.l	912f, r3;			\
		jmp	@@r3;				\
		 mov	r0, r4;				\
		.align	2;				\
	912:	.long	CERROR

#endif /* !PIC */
d115 1
a115 1
	911:	JUMP_CERROR;				\
d120 1
a120 1
	911:	JUMP_CERROR;				\
a152 2

	.globl	CERROR
@


1.9
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.8 2015/09/10 13:29:09 guenther Exp $	*/
a87 1
#define	_CERROR	_C_LABEL(___cerror)
@


1.8
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

alpha, arm, m88k, sh, sparc, and vax assistance miod@@
hppa assistance kettenis@@
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.7 2015/08/31 02:53:57 guenther Exp $	*/
d162 1
@


1.7
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.6 2015/04/07 01:27:06 guenther Exp $	*/
d71 7
d143 2
a144 1
		 nop
d149 2
a150 1
		 nop
d155 2
a156 1
		 nop
d161 1
@


1.6
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.5 2014/06/04 20:13:49 matthew Exp $	*/
d39 25
@


1.5
log
@Apply "unifdef -D__STDC__" to libc/arch/*/SYS.h

A while back, pascal@@ converted our system call stubs from using "cpp
| as" to "cc -x assembler-with-cpp", so there's no need to stay
compatible with ancient preprocessor semantics.

ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.4 2012/08/22 17:19:35 pascal Exp $	*/
d43 2
d61 3
d96 5
d118 4
a121 2
#define RSYSCALL_NOERROR(x)				\
		PSEUDO_NOERROR(x,x)
d123 3
a125 2
#define RSYSCALL(x)					\
		PSEUDO(x,x)
@


1.4
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.3 2011/04/04 12:42:39 guenther Exp $	*/
a39 1
#ifdef __STDC__
a42 5
#else
#define	SYSENTRY(x)					\
	WEAK_ALIAS(x,_thread_sys_/**/x);		\
	ENTRY(_thread_sys_/**/x)
#endif
a43 1
#ifdef __STDC__
a51 10
#else
#define SYSTRAP(x)					\
		mov.l	903f, r0;			\
		trapa	#0x80;				\
		bra	904f;				\
		 nop;					\
		.align	2;				\
	903:	.long	(SYS_/**/x);			\
	904:
#endif
@


1.3
log
@Move __cerror to ___cerror with a weak alias so that rthreads can override it.
On mips64, also correct the name called from plain cerror to __cerror.

"looks correct" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.2 2010/10/01 05:02:19 guenther Exp $	*/
d77 1
a77 1
#ifdef PIC
@


1.2
log
@Provide a WEAK_ALIAS macro in <machine/asm.h> for the few platforms
that didn't already have one, and then immediately use it in libc's
SYS.h

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.1.1.1 2006/10/10 22:07:10 miod Exp $	*/
d71 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a42 2
	.weak	_C_LABEL(x);				\
	_C_LABEL(x) = _C_LABEL(_thread_sys_ ## x);	\
d46 1
a46 2
	.weak	_C_LABEL(x);				\
	_C_LABEL(x) = _C_LABEL(_thread_sys_/**/x);	\
@


1.1.1.1
log
@Preliminary userland bits for OpenBSD/landisk, many things coming from
NetBSD.
@
text
@@
