head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.10
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.34
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.32
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.28
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.26
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.24
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.22
	OPENBSD_5_0:1.1.1.1.0.20
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.18
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.14
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.10
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.8
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.6
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.4
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.2
	OPENBSD_4_1_BASE:1.1.1.1
	SH4_LIBC_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.2;
commitid	lTMF8Y3C9fQGd6jQ;

1.2
date	2014.11.30.19.43.56;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	1sP0uXsb2s1HOugs;

1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@/*	$OpenBSD: memmove.S,v 1.2 2014/11/30 19:43:56 deraadt Exp $	*/
/*	$NetBSD: memcpy.S,v 1.2 2006/04/22 23:53:47 uwe Exp $	*/

/*
 * Copyright (c) 2000 SHIMIZU Ryo <ryo@@misakimix.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "SYS.h"

#define	REG_DST0	r3
#define	REG_SRC		r5
#define	REG_DST		r4
#define	REG_LEN		r6

ENTRY(memmove)
	mov	REG_DST,REG_DST0
	cmp/eq	REG_DST,REG_SRC	/* if ( src == dst ) return; */
	bt/s	bcopy_return
	cmp/hi	REG_DST,REG_SRC
	bf/s	bcopy_overlap

	mov	REG_SRC,r0
	xor	REG_DST,r0
	and	#3,r0
	mov	r0,r1
	tst	r0,r0		/* (src ^ dst) & 3         */
	bf/s	word_align

longword_align:
	tst	REG_LEN,REG_LEN	/* if ( len==0 ) return;   */
	bt/s	bcopy_return


	mov	REG_SRC,r0
	tst	#1,r0		/* if ( src & 1 )          */
	bt	1f
	mov.b	@@REG_SRC+,r0	/*    *dst++ = *src++;     */
	add	#-1,REG_LEN
	mov.b	r0,@@REG_DST
	add	#1,REG_DST
1:


	mov	#1,r0
	cmp/hi	r0,REG_LEN	/* if ( (len > 1) &&       */
	bf/s	1f
	mov	REG_SRC,r0
	tst	#2,r0		/*      (src & 2) {        */
	bt	1f
	mov.w	@@REG_SRC+,r0	/*        *((unsigned short*)dst)++ = *((unsigned short*)src)++; */
	add	#-2,REG_LEN	/*        len -= 2;                                              */
	mov.w	r0,@@REG_DST
	add	#2,REG_DST	/* }                       */
1:


	mov	#3,r1
	cmp/hi	r1,REG_LEN	/* while ( len > 3 ) {     */
	bf/s	no_align_delay
	tst	REG_LEN,REG_LEN
2:
	mov.l	@@REG_SRC+,r0	/*   *((unsigned long*)dst)++ = *((unsigned long*)src)++;        */
	add	#-4,REG_LEN	/*   len -= 4;                                                   */
	mov.l	r0,@@REG_DST
	cmp/hi	r1,REG_LEN
	bt/s	2b
	add	#4,REG_DST	/* }                       */

	bra	no_align_delay
	tst	REG_LEN,REG_LEN


word_align:
	mov	r1,r0
	tst	#1,r0
	bf/s	no_align_delay
	tst	REG_LEN,REG_LEN	/* if ( len == 0 ) return; */
	bt	bcopy_return


	mov	REG_SRC,r0	/* if ( src & 1 )          */
	tst	#1,r0
	bt	1f
	mov.b	@@REG_SRC+,r0	/*    *dst++ = *src++;     */
	add	#-1,REG_LEN
	mov.b	r0,@@REG_DST
	add	#1,REG_DST
1:


	mov	#1,r1
	cmp/hi	r1,REG_LEN	/* while ( len > 1 ) {     */
	bf/s	no_align_delay
	tst	REG_LEN,REG_LEN
2:
	mov.w	@@REG_SRC+,r0	/*   *((unsigned short*)dst)++ = *((unsigned short*)src)++;      */
	add	#-2,REG_LEN	/*   len -= 2;                                                   */
	mov.w	r0,@@REG_DST
	cmp/hi	r1,REG_LEN
	bt/s	2b
	add	#2,REG_DST	/* }                       */


no_align:
	tst	REG_LEN,REG_LEN	/* while ( len!= ) {       */
no_align_delay:
	bt	bcopy_return
1:
	mov.b	@@REG_SRC+,r0	/*    *dst++ = *src++;     */
	add	#-1,REG_LEN	/*    len--;               */
	mov.b	r0,@@REG_DST
	tst	REG_LEN,REG_LEN
	bf/s	1b
	add	#1,REG_DST	/* }                       */
bcopy_return:
	rts
	mov	REG_DST0,r0

bcopy_overlap:
	add	REG_LEN,REG_SRC
	add	REG_LEN,REG_DST

	mov	REG_SRC,r0
	xor	REG_DST,r0
	and	#3,r0
	mov	r0,r1
	tst	r0,r0		/* (src ^ dst) & 3         */
	bf/s	ov_word_align

ov_longword_align:
	tst	REG_LEN,REG_LEN	/* if ( len==0 ) return;   */
	bt/s	bcopy_return


	mov	REG_SRC,r0
	tst	#1,r0		/* if ( src & 1 )          */
	bt	1f
	add	#-1,REG_SRC	/*    *--dst = *--src;     */
	mov.b	@@REG_SRC,r0
	mov.b	r0,@@-REG_DST
	add	#-1,REG_LEN
1:


	mov	#1,r0
	cmp/hi	r0,REG_LEN	/* if ( (len > 1) &&       */
	bf/s	1f
	mov	REG_SRC,r0
	tst	#2,r0		/*      (src & 2) {        */
	bt	1f
	add	#-2,REG_SRC	/*        *--((unsigned short*)dst) = *--((unsigned short*)src); */
	mov.w	@@REG_SRC,r0
	add	#-2,REG_LEN	/*        len -= 2;                                              */
	mov.w	r0,@@-REG_DST	/* }                       */
1:


	mov	#3,r1
	cmp/hi	r1,REG_LEN	/* while ( len > 3 ) {     */
	bf/s	ov_no_align_delay
	tst	REG_LEN,REG_LEN
2:
	add	#-4,REG_SRC
	mov.l	@@REG_SRC,r0	/*   *((unsigned long*)dst)++ = *((unsigned long*)src)++;        */
	add	#-4,REG_LEN	/*   len -= 4;                                                   */
	cmp/hi	r1,REG_LEN
	bt/s	2b
	mov.l	r0,@@-REG_DST	/* }                       */

	bra	ov_no_align_delay
	tst	REG_LEN,REG_LEN


ov_word_align:
	mov	r1,r0
	tst	#1,r0
	bf/s	ov_no_align_delay
	tst	REG_LEN,REG_LEN	/* if ( len == 0 ) return; */
	bt	bcopy_return


	mov	REG_SRC,r0	/* if ( src & 1 )          */
	tst	#1,r0
	bt	1f
	add	#-1,REG_SRC
	mov.b	@@REG_SRC,r0	/*    *--dst = *--src;     */
	add	#-1,REG_LEN
	mov.b	r0,@@-REG_DST
1:


	mov	#1,r1
	cmp/hi	r1,REG_LEN	/* while ( len > 1 ) {     */
	bf/s	ov_no_align_delay
	tst	REG_LEN,REG_LEN
2:
	add	#-2,REG_SRC
	mov.w	@@REG_SRC,r0	/*   *--((unsigned short*)dst) = *--((unsigned short*)src);      */
	add	#-2,REG_LEN	/*   len -= 2;                                                   */
	cmp/hi	r1,REG_LEN
	bt/s	2b
	mov.w	r0,@@-REG_DST	/* }                       */


ov_no_align:
	tst	REG_LEN,REG_LEN	/* while ( len!= ) {       */
ov_no_align_delay:
	bt	9f
1:
	add	#-1,REG_SRC
	mov.b	@@REG_SRC,r0	/*    *--dst = *--src;     */
	add	#-1,REG_LEN	/*    len--;               */
	tst	REG_LEN,REG_LEN
	bf/s	1b
	mov.b	r0,@@-REG_DST	/* }                       */
9:
	rts
	mov	REG_DST0,r0
END_STRONG(memmove)
@


1.2
log
@restructure libc/string + libc/arch/*/string coperation regarding
(potentially) MD versions (function dependent, not filename dependent)
split out memcpy/memmove/bcopy and strchr/index/strrchr/rindex
Bring back amd64 .S versions

And the final touch: switch all architectures temporarily to MI
memcpy.c, which contains syslog + abort for overlapping copies.  A nice
harsh undefined behaviour.  We will clean the entire userland of the
remaining issues in this catagory, then switch to the optimised memcpy
which skips the memmove check.

I tried to cut this change into pieces, but testing each sub-step on
every architecture is too time consuming and mindnumbing.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: memcpy.S,v 1.1.1.1 2006/10/10 22:07:10 miod Exp $	*/
d31 1
a31 1
#include <machine/asm.h>
d242 1
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: memmove.S,v 1.2 2006/04/22 23:53:47 uwe Exp $	*/
d4 238
a241 2
#define MEMMOVE
#include "memcpy.S"
@


1.1.1.1
log
@Preliminary userland bits for OpenBSD/landisk, many things coming from
NetBSD.
@
text
@@
