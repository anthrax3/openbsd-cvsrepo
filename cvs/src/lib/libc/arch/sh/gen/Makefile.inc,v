head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.22
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.18
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.20
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.12
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.16
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.8.0.8
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.6
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	SH4_LIBC_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2011.07.08.22.28.33;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.08.19.21.42;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.21.09.34.50;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2009.04.19.16.42.06;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.24.09.31.06;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.02.06.11.54;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.06.15.14.50;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.11.03.20.56;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.11.02.56.37;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Revert (leaving the complex math part alone).  Some stuff is depending
on this historical behavior;  so we're stuck in this stupid situation.
No cookie for me.
@
text
@#	$OpenBSD: Makefile.inc,v 1.8 2009/04/21 09:34:50 martynas Exp $

SRCS+= flt_rounds.c infinity.c ldexp.c modf.c nan.c setjmp.S _setjmp.S
SRCS+= sigsetjmp.S
SRCS+=	fabs.c fpgetmask.c fpgetround.c fpgetsticky.c \
	fpsetmask.c fpsetround.c fpsetsticky.c
@


1.9
log
@Move fabs(3), frexp(3), and modf(3) to libm--nothing has been using
them in libc for a very long time.  OK guenther@@.
@
text
@d3 1
a3 1
SRCS+= flt_rounds.c infinity.c ldexp.c nan.c setjmp.S _setjmp.S
d5 1
a5 1
SRCS+=	fpgetmask.c fpgetround.c fpgetsticky.c \
@


1.8
log
@remove from gen so that lint doesn't check gen if assembly versions
are available.  spotted by theo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2009/04/19 16:42:06 martynas Exp $
d3 1
a3 1
SRCS+= flt_rounds.c infinity.c ldexp.c modf.c nan.c setjmp.S _setjmp.S
d5 1
a5 1
SRCS+=	fabs.c fpgetmask.c fpgetround.c fpgetsticky.c \
@


1.7
log
@- ldexp implementation has issues.  switch to the one from libm
- remove frexp in hppa64, cloned from hppa
- move generic ieee754 implementations of modf and ldexp to gen
ok kettenis@@, "looks good" millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2008/07/24 09:31:06 martynas Exp $
d3 2
a4 1
SRCS+= flt_rounds.c infinity.c nan.c setjmp.S _setjmp.S sigsetjmp.S
@


1.6
log
@- move isinf, isnan dups to gen, since most is ieee 754
- is{inf,nan} should be macros for real-floating, so rename to
__is{inf,nan}, per C99
- implement C99 __fpclassify(), __fpclassifyf(), __isfinite(),
__isfinitef(), __isnormal(), __isnormalf(), __signbit(), __signbitf()
- long functions added, but not yet enabled, till ieee.h is fixed
- implement vax equivalents of the functions
- reimplement isinff, isnanf in a better way, and move to libc
- add qnan bytes for all archs
- bump major
man pages will follow
ok millert@@.  arm bits looked over by drahn@@
discussed w/ theo, who showed the right direction, to put these
functions in libc
@
text
@d1 1
a1 4
#	$OpenBSD: Makefile.inc,v 1.5 2007/03/02 06:11:54 miod Exp $

SRCS+= flt_rounds.c infinity.c nan.c setjmp.S _setjmp.S sigsetjmp.S \
	modf.c ldexp.c
d3 1
@


1.5
log
@Move landisk to hardware floating point. At the moment the FPU context is
always saved upon context switches, as FPU registers are heavily used for
long long computations (don't ask). Gcc default to -m4.

Credits to drahn@@ otto@@ and deraadt@@ for feedback and help testing.

Upgrade procedure if you don't want to use the damn snapshots:
- build and install new kernel, reboot off it
- build new gcc, do not install it yet
- make includes
- install new gcc
- build and install lib/csu and lib/libc
- make build
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2006/11/06 15:14:50 drahn Exp $
d3 1
a3 1
SRCS+= flt_rounds.c isinf.c isnan.c infinity.c setjmp.S _setjmp.S sigsetjmp.S \
@


1.4
log
@Move (back) to softfloat on sh for now.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2006/10/11 03:20:56 drahn Exp $
d6 2
a7 3
#hardfloat only pieces
#SRCS+=	fabs.c fpgetmask.c fpgetround.c fpgetsticky.c \
#	fpsetmask.c fpsetround.c fpsetsticky.c \
@


1.3
log
@and I forgot ldexp.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2006/10/11 02:56:37 drahn Exp $
d3 6
a8 3
SRCS+=	fabs.c flt_rounds.c fpgetmask.c fpgetround.c fpgetsticky.c \
	fpsetmask.c fpsetround.c fpsetsticky.c isinf.c isnan.c infinity.c \
	setjmp.S _setjmp.S sigsetjmp.S modf.c ldexp.c
@


1.2
log
@build modf.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1.1.1 2006/10/10 22:07:10 miod Exp $
d5 1
a5 1
	setjmp.S _setjmp.S sigsetjmp.S modf.c
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD$
d5 1
a5 1
	setjmp.S _setjmp.S sigsetjmp.S
@


1.1.1.1
log
@Preliminary userland bits for OpenBSD/landisk, many things coming from
NetBSD.
@
text
@@
