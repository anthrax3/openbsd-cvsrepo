head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.38
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.30
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.34
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.32
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.28
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.26
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.24
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.22
	OPENBSD_5_0:1.2.0.20
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.18
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.16
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.12
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.14
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.10
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.8
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.6
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	SH4_LIBC_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.10.31.11.39.35;	author miod;	state Exp;
branches;
next	1.2;
commitid	O6indMzHGWixW5h0;

1.2
date	2007.03.02.06.11.54;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Invoke the _HIDDEN() sigprocmask label rather than the public one.
@
text
@/*	$OpenBSD: sigsetjmp.S,v 1.2 2007/03/02 06:11:54 miod Exp $	*/
/*	$NetBSD: sigsetjmp.S,v 1.9 2006/01/05 19:21:37 uwe Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)setjmp.s	5.1 (Berkeley) 4/23/90
 */

#include "SYS.h"

#include <machine/setjmp.h>

ENTRY(sigsetjmp)
	tst	r5,	r5		/* if (savemask == 0) */
	bt	2f

	/* identical to setjmp */
	PIC_PROLOGUE(.L_got_1)
	sts.l	pr,	@@-sp
	mov.l	r4,	@@-sp
	mov.l	r5,	@@-sp

	mov.l	.L_sigprocmask_1, r0
	mov	r4,	r6
	mov	#1,	r4		/* how = SIG_BLOCK */
	mov	#0,	r5		/* new = NULL */
1:	CALL	r0
	 add	#4,	r6		/* old = &sigmask */

	mov.l	@@sp+,	r5
	mov.l	@@sp+,	r4
	lds.l	@@sp+,	pr
	PIC_EPILOGUE

2:	/* identical to _setjmp except that first word is in r5 */
#if defined(__SH4__) && !defined(__SH4_NOFPU__)
	add	#(_JBLEN * 4), r4
	sts	fpscr,	r1
	xor	r0,	r0
	mov.l	r1,	@@-r4
	lds	r0,	fpscr
	sts.l	fpul,	@@-r4
	fmov.s	fr15,	@@-r4
	fmov.s	fr14,	@@-r4
	fmov.s	fr13,	@@-r4
	fmov.s	fr12,	@@-r4
	frchg
	fmov.s	fr15,	@@-r4
	fmov.s	fr14,	@@-r4
	fmov.s	fr13,	@@-r4
	fmov.s	fr12,	@@-r4
	lds	r1,	fpscr
#else
	add	#((_JBLEN - 10) * 4), r4
#endif
	sts.l	mach,	@@-r4
	sts.l	macl,	@@-r4
	mov.l	r15,	@@-r4
	mov.l	r14,	@@-r4
	mov.l	r13,	@@-r4
	mov.l	r12,	@@-r4
	mov.l	r11,	@@-r4
	mov.l	r10,	@@-r4
	mov.l	r9,	@@-r4
	mov.l	r8,	@@-r4
	sts.l	pr,	@@-r4
	add	#-4,	r4		/* skip signal mask */
	mov.l	r5,	@@-r4		/* has signal mask? */
	rts
	 xor	r0,	r0

	.align	2
.L_got_1:		PIC_GOT_DATUM
.L_sigprocmask_1:	CALL_DATUM(_C_LABEL(_HIDDEN(sigprocmask)), 1b)
	SET_ENTRY_SIZE(sigsetjmp)

ENTRY(siglongjmp)
	mov.l	@@r4+,	r0
	tst	r0,	r0
	bt	2f			/* if no mask */

	/* identical to longjmp */
	/* we won't return here, so we don't need to save pr and r12 */
	PIC_PROLOGUE_NOSAVE(.L_got_2)
	mov.l	r5,	@@-sp
	mov.l	r4,	@@-sp

	mov.l	.L_sigprocmask_2, r0
	mov	r4,	r5		/* new = &sigmask */
	mov	#3,	r4		/* how = SIG_SETMASK */
1:	CALL	r0
	 mov	#0,	r6		/* old = NULL */

	mov.l	@@sp+,	r4
	mov.l	@@sp+,	r5

2:	/* identical to _longjmp */
	add	#4,	r4
	lds.l	@@r4+,	pr
	mov.l	@@r4+,	r8
	mov.l	@@r4+,	r9
	mov.l	@@r4+,	r10
	mov.l	@@r4+,	r11
	mov.l	@@r4+,	r12
	mov.l	@@r4+,	r13
	mov.l	@@r4+,	r14
	mov.l	@@r4+,	r15
	lds.l	@@r4+,	macl
	lds.l	@@r4+,	mach
#if defined(__SH4__) && !defined(__SH4_NOFPU__)
	xor	r0, 	r0
	lds	r0,	fpscr
	frchg
	fmov.s	@@r4+,	fr12
	fmov.s	@@r4+,	fr13
	fmov.s	@@r4+,	fr14
	fmov.s	@@r4+,	fr15
	frchg
	fmov.s	@@r4+,	fr12
	fmov.s	@@r4+,	fr13
	fmov.s	@@r4+,	fr14
	fmov.s	@@r4+,	fr15
	lds.l	@@r4+,	fpul
	lds.l	@@r4+,	fpscr
#endif

	mov	r5,	r0
	tst	r0,	r0	/* make sure return value is non-zero */
	bf	.L0
	add	#1,	r0
.L0:
	rts
	 nop

	.align	2
.L_got_2:		PIC_GOT_DATUM
.L_sigprocmask_2:	CALL_DATUM(_C_LABEL(_HIDDEN(sigprocmask)), 1b)
	SET_ENTRY_SIZE(siglongjmp)
@


1.2
log
@Move landisk to hardware floating point. At the moment the FPU context is
always saved upon context switches, as FPU registers are heavily used for
long long computations (don't ask). Gcc default to -m4.

Credits to drahn@@ otto@@ and deraadt@@ for feedback and help testing.

Upgrade procedure if you don't want to use the damn snapshots:
- build and install new kernel, reboot off it
- build new gcc, do not install it yet
- make includes
- install new gcc
- build and install lib/csu and lib/libc
- make build
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsetjmp.S,v 1.1.1.1 2006/10/10 22:07:10 miod Exp $	*/
d38 2
a39 1
#include <machine/asm.h>
d103 1
a103 1
.L_sigprocmask_1:	CALL_DATUM(_C_LABEL(sigprocmask), 1b)
d166 1
a166 1
.L_sigprocmask_2:	CALL_DATUM(_C_LABEL(sigprocmask), 1b)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 2
a43 2
	tst	r5, r5
	bt	2f			/* if (savemask == 0) */
d45 1
a45 1
	/* identical to longjmp except that _JB_HAS_MASK is in the argument */
d47 3
a49 3
	sts.l	pr, @@-sp
	mov.l	r4, @@-sp
	mov.l	r5, @@-sp
d52 3
a54 3
	mov	r4, r6
	mov	#1, r4			/* how = SIG_BLOCK */
	mov	#0, r5			/* new = NULL */
d56 1
a56 1
	 add	#(_JB_SIGMASK * 4), r6	/* old = &sigmask */
d58 3
a60 3
	mov.l	@@sp+, r5
	mov.l	@@sp+, r4
	lds.l	@@sp+, pr
d63 34
a96 12
2:	/* identical to _setjmp except that _JB_HAS_MASK is in the argument */
	add	#((_JB_HAS_MASK + 1) * 4), r4
	mov.l	r5, @@-r4		/* has signal mask? */
	mov.l	r15, @@-r4
	mov.l	r14, @@-r4
	mov.l	r13, @@-r4
	mov.l	r12, @@-r4
	mov.l	r11, @@-r4
	mov.l	r10, @@-r4
	mov.l	r9, @@-r4
	mov.l	r8, @@-r4
	sts.l	pr, @@-r4
d98 1
a98 1
	 xor	r0, r0
a104 1

d106 2
a107 2
	mov.l	@@(_JB_HAS_MASK * 4, r4), r0
	tst	r0, r0
d113 2
a114 2
	mov.l	r5, @@-sp
	mov.l	r4, @@-sp
d117 2
a118 3
	mov	r4, r5
	mov	#3, r4			/* how = SIG_SETMASK */
	add	#(_JB_SIGMASK * 4), r5	/* new = &sigmask */
d120 1
a120 1
	 mov	#0, r6			/* old = NULL */
d122 2
a123 2
	mov.l	@@sp+, r4
	mov.l	@@sp+, r5
d126 28
a153 9
	lds.l	@@r4+, pr
	mov.l	@@r4+, r8
	mov.l	@@r4+, r9
	mov.l	@@r4+, r10
	mov.l	@@r4+, r11
	mov.l	@@r4+, r12
	mov.l	@@r4+, r13
	mov.l	@@r4+, r14
	mov.l	@@r4+, r15
d155 2
a156 2
	mov	r5, r0
	tst	r0, r0	/* make sure return value is non-zero */
d158 1
a158 1
	add	#1, r0
@


1.1.1.1
log
@Preliminary userland bits for OpenBSD/landisk, many things coming from
NetBSD.
@
text
@@
