head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.12
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.14
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.7.0.8
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.6
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	SH4_LIBC_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.04.18.15.09.52;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.10;

1.10
date	2012.12.05.23.19.59;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.08.22.28.33;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.08.19.21.42;	author martynas;	state dead;
branches;
next	1.7;

1.7
date	2009.04.05.17.21.46;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.10.01.15.02;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.09.20.21.06;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2008.07.23.18.11.14;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.02.06.11.54;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.06.15.14.50;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches;
next	;


desc
@@


1.12
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@/*	$OpenBSD: fabs.c,v 1.11 2013/03/28 18:09:38 martynas Exp $	*/
/*
 * Copyright (c) 2006 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice, this permission notice, and the disclaimer below
 * appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#if !defined(__SH4__) || defined(__SH4_NOFPU__)
#include <sys/types.h>
#include <machine/ieee.h>
#endif /* !defined(__SH4__) || defined(__SH4_NOFPU__) */

#include <math.h>

double
fabs(double d)
{
#if defined(__SH4__) && !defined(__SH4_NOFPU__)
	__asm__ volatile("fabs %0" : "+f" (d));
#else
	struct ieee_double *p = (struct ieee_double *)&d;

	p->dbl_sign = 0;
#endif
	return (d);
}

__strong_alias(fabsl, fabs);
@


1.11
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.c,v 1.10 2012/12/05 23:19:59 deraadt Exp $	*/
d30 1
a30 1
	__asm__ __volatile__("fabs %0" : "+f" (d));
@


1.10
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.c,v 1.9 2011/07/08 22:28:33 martynas Exp $	*/
d39 1
a39 1
__weak_alias(fabsl, fabs);
@


1.9
log
@Revert (leaving the complex math part alone).  Some stuff is depending
on this historical behavior;  so we're stuck in this stupid situation.
No cookie for me.
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.c,v 1.7 2009/04/05 17:21:46 martynas Exp $	*/
a18 1
#include <sys/cdefs.h>
@


1.8
log
@Move fabs(3), frexp(3), and modf(3) to libm--nothing has been using
them in libc for a very long time.  OK guenther@@.
@
text
@@


1.7
log
@this is not a write-only register.  might have caused to optimize
it away.  ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.c,v 1.6 2008/12/10 01:15:02 martynas Exp $	*/
@


1.6
log
@use sys/cdefs.h;  pointed out by theo
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.c,v 1.5 2008/12/09 20:21:06 martynas Exp $	*/
d31 1
a31 1
	__asm__ __volatile__("fabs %0" : "=f"(d));
@


1.5
log
@alias fabsl to fabs on these archs
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.c,v 1.4 2008/07/23 18:11:14 martynas Exp $	*/
d19 1
a19 1
#include <machine/cdefs.h>
@


1.4
log
@clear sign bit, instead of comparing to zero and setting x=-x.
fixes special cases, such as neg. zero, and makes C99 conformant
ok miod@@, millert@@
since there's nothing else in arm's fabs.c, replace 4-clause license
w/ the one at /usr/share/misc/license.template
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.c,v 1.3 2007/03/02 06:11:54 miod Exp $	*/
d19 1
d39 2
@


1.3
log
@Move landisk to hardware floating point. At the moment the FPU context is
always saved upon context switches, as FPU registers are heavily used for
long long computations (don't ask). Gcc default to -m4.

Credits to drahn@@ otto@@ and deraadt@@ for feedback and help testing.

Upgrade procedure if you don't want to use the damn snapshots:
- build and install new kernel, reboot off it
- build new gcc, do not install it yet
- make includes
- install new gcc
- build and install lib/csu and lib/libc
- make build
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.c,v 1.2 2006/11/06 15:14:50 drahn Exp $	*/
d19 5
d27 1
a27 1
fabs(double x)
d30 1
a30 1
	__asm__ __volatile__("fabs %0" : "=f"(x));
d32 3
a34 2
	if (x < 0)
		x = -x;
d36 1
a36 1
	return (x);
@


1.2
log
@Move (back) to softfloat on sh for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.c,v 1.1.1.1 2006/10/10 22:07:10 miod Exp $	*/
d24 1
a24 1
#ifdef __SH4__
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 1
d26 4
@


1.1.1.1
log
@Preliminary userland bits for OpenBSD/landisk, many things coming from
NetBSD.
@
text
@@
