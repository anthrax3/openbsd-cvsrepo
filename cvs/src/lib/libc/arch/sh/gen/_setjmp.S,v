head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.40
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.36
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.38
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.30
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.34
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.32
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.28
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.26
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.24
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.22
	OPENBSD_5_0:1.2.0.20
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.18
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.16
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.12
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.14
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.10
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.8
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.6
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	SH4_LIBC_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2007.03.02.06.11.54;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Move landisk to hardware floating point. At the moment the FPU context is
always saved upon context switches, as FPU registers are heavily used for
long long computations (don't ask). Gcc default to -m4.

Credits to drahn@@ otto@@ and deraadt@@ for feedback and help testing.

Upgrade procedure if you don't want to use the damn snapshots:
- build and install new kernel, reboot off it
- build new gcc, do not install it yet
- make includes
- install new gcc
- build and install lib/csu and lib/libc
- make build
@
text
@/*	$OpenBSD: _setjmp.S,v 1.1.1.1 2006/10/10 22:07:10 miod Exp $	*/
/*	$NetBSD: _setjmp.S,v 1.7 2006/01/05 02:04:41 uwe Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)_setjmp.s	5.1 (Berkeley) 4/23/90
 */

#include <machine/asm.h>
#include <machine/setjmp.h>

/*
 * C library -- _setjmp, _longjmp
 *
 *	_longjmp(a,v)
 * will generate a "return(v)" from the last call to
 *	_setjmp(a)
 * by restoring registers from the stack.
 * The previous signal state is NOT restored.
 */

ENTRY(_setjmp)
	xor	r0,	r0
#if defined(__SH4__) && !defined(__SH4_NOFPU__)
	add	#(_JBLEN * 4), r4
	sts	fpscr,	r1
	mov.l	r1,	@@-r4
	lds	r0,	fpscr
	sts.l	fpul,	@@-r4
	fmov.s	fr15,	@@-r4
	fmov.s	fr14,	@@-r4
	fmov.s	fr13,	@@-r4
	fmov.s	fr12,	@@-r4
	frchg
	fmov.s	fr15,	@@-r4
	fmov.s	fr14,	@@-r4
	fmov.s	fr13,	@@-r4
	fmov.s	fr12,	@@-r4
	lds	r1,	fpscr
#else
	add	#((_JBLEN - 10) * 4), r4
#endif
	sts.l	mach,	@@-r4
	sts.l	macl,	@@-r4
	mov.l	r15,	@@-r4
	mov.l	r14,	@@-r4
	mov.l	r13,	@@-r4
	mov.l	r12,	@@-r4
	mov.l	r11,	@@-r4
	mov.l	r10,	@@-r4
	mov.l	r9,	@@-r4
	mov.l	r8,	@@-r4
	sts.l	pr,	@@-r4
	mov.l	r0,	@@-r4		/* dummy signal mask */
	rts
	 mov.l	r0,	@@-r4		/* no saved signal mask */
	SET_ENTRY_SIZE(_setjmp)

ENTRY(_longjmp)
	add	#8,	r4
	lds.l	@@r4+,	pr
	mov.l	@@r4+,	r8
	mov.l	@@r4+,	r9
	mov.l	@@r4+,	r10
	mov.l	@@r4+,	r11
	mov.l	@@r4+,	r12
	mov.l	@@r4+,	r13
	mov.l	@@r4+,	r14
	mov.l	@@r4+,	r15
	lds.l	@@r4+,	macl
	lds.l	@@r4+,	mach
#if defined(__SH4__) && !defined(__SH4_NOFPU__)
	xor	r0, 	r0
	lds	r0,	fpscr
	frchg
	fmov.s	@@r4+,	fr12
	fmov.s	@@r4+,	fr13
	fmov.s	@@r4+,	fr14
	fmov.s	@@r4+,	fr15
	frchg
	fmov.s	@@r4+,	fr12
	fmov.s	@@r4+,	fr13
	fmov.s	@@r4+,	fr14
	fmov.s	@@r4+,	fr15
	lds.l	@@r4+,	fpul
	lds.l	@@r4+,	fpscr
#endif

	mov	r5,	r0
	tst	r0,	r0
	bf	.L0
	add	#1,	r0
.L0:
	rts
	 nop
	SET_ENTRY_SIZE(_longjmp)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 32
a83 12
	add	#((_JB_HAS_MASK + 1) * 4), r4
	mov	#0, r0
	mov.l	r0, @@-r4		/* no saved signal mask */
	mov.l	r15, @@-r4
	mov.l	r14, @@-r4
	mov.l	r13, @@-r4
	mov.l	r12, @@-r4
	mov.l	r11, @@-r4
	mov.l	r10, @@-r4
	mov.l	r9, @@-r4
	mov.l	r8, @@-r4
	sts.l	pr, @@-r4
d85 1
a85 1
	 xor	r0, r0
d89 28
a116 9
	lds.l	@@r4+, pr
	mov.l	@@r4+, r8
	mov.l	@@r4+, r9
	mov.l	@@r4+, r10
	mov.l	@@r4+, r11
	mov.l	@@r4+, r12
	mov.l	@@r4+, r13
	mov.l	@@r4+, r14
	mov.l	@@r4+, r15
d118 2
a119 2
	mov	r5, r0
	tst	r0, r0
d121 1
a121 1
	add	#1, r0
@


1.1.1.1
log
@Preliminary userland bits for OpenBSD/landisk, many things coming from
NetBSD.
@
text
@@
