head	1.7;
access;
symbols
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.18
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.10
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.14
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.12
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.22
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.20
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.16
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.18
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.14
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@# @;


1.7
date	2016.05.11.21.52.49;	author deraadt;	state dead;
branches;
next	1.6;
commitid	VpgRpYXqYSJy4P7J;

1.6
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.5;
commitid	OrVNAJkzchWBNbO0;

1.5
date	2011.08.16.18.58.45;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.21.14.12.20;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.05.22.19.49;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.07.16.40.14;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.01.10.54.27;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@/*	$OpenBSD: sigprocmask.S,v 1.6 2015/10/23 04:39:24 guenther Exp $	*/

/*
 * Copyright (c) 1999 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "SYS.h"

SYSENTRY_HIDDEN(sigprocmask)
	std	%arg2, HPPA_FRAME_ARG(2)(%sp)

	comb,<>,n %r0, %arg1, sigprocmask$nblock

	b	sigprocmask$call
	ldi	1, %arg0

sigprocmask$nblock
	ldw	0(%arg1), %arg1

sigprocmask$call
	SYSCALL(sigprocmask)

	ldd	HPPA_FRAME_ARG(2)(%sp), %arg2
	add,=	%r0, %arg2, %r0
	stw	%ret0, 0(%arg2)
	bv	%r0(%rp)
	copy	%r0, %ret0
SYSEXIT_HIDDEN(sigprocmask)

	.end
@


1.6
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sigprocmask.S,v 1.5 2011/08/16 18:58:45 kettenis Exp $	*/
@


1.5
log
@64-bitification went a bit too far here; sigset_t is 32-bit so using 64-bit
loads and stores may trigger an alignment trap.  Also fix issues where the
code was assuming arguments were passed both in registers on the stack.  This
isn't ithe case for hppa64.
@
text
@d1 1
a1 1
/*	$OpenBSD: sigprocmask.S,v 1.4 2011/04/21 14:12:20 jsing Exp $	*/
d31 1
a31 1
SYSENTRY(sigprocmask)
d50 1
a50 1
SYSEXIT(sigprocmask)
@


1.4
log
@Make this code actually compile on hppa64.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sigprocmask.S,v 1.2 2005/08/07 16:40:14 espie Exp $	*/
a31 1
	/* just in case compiler forgot about this */
d40 1
a40 2
	ldd	0(%arg1), %arg1
	std	%arg1, HPPA_FRAME_ARG(1)(%sp)
d47 1
a47 1
	std	%ret0, 0(%arg2)
@


1.3
log
@System call stubs don't have a frame of their own, so use EMTRY_LEAF instead
of ENTRY.  This avoids emitting bogus unwind entries, which makes gdb a lot
happier.
ok mickey@@
@
text
@d33 1
a33 1
	std	arg2, HPPA_FRAME_ARG(2)(sp)
d35 1
a35 1
	comb,<>,n r0, arg1, sigprocmask$nblock
d38 1
a38 1
	ldi	1, arg0
d41 2
a42 2
	ldd	0(arg1), arg1
	std	arg1, HPPA_FRAME_ARG(1)(sp)
d47 5
a51 5
	ldd	HPPA_FRAME_ARG(2)(sp), arg2
	add,=	r0, arg2, r0
	std	ret0, 0(arg2)
	bv	r0(rp)
	copy	r0, ret0
@


1.2
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/*	$OpenBSD: sigprocmask.S,v 1.1 2005/04/01 10:54:27 mickey Exp $	*/
d31 1
a31 1
SYSENTRY(sigprocmask,0)
@


1.1
log
@hppa64 bits cloned form hppa
@
text
@d1 1
a1 1
/*	$OpenBSD: sigprocmask.S,v 1.11 2003/06/02 20:28:04 mickey Exp $	*/
a29 6

#ifdef SYSLIBC_SCCS
	.text
	.asciz "$OpenBSD: sigprocmask.S,v 1.11 2003/06/02 20:28:04 mickey Exp $"
	.align	4
#endif
@

