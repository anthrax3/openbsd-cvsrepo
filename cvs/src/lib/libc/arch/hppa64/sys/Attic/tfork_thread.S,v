head	1.3;
access;
symbols
	OPENBSD_5_9:1.2.0.14
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.8
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2016.05.11.21.52.49;	author deraadt;	state dead;
branches;
next	1.2;
commitid	VpgRpYXqYSJy4P7J;

1.2
date	2012.06.21.00.56.59;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.11.12.27.08;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@/*	$OpenBSD: tfork_thread.S,v 1.2 2012/06/21 00:56:59 guenther Exp $	*/
/*
 * Copyright (c) 2005, Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SYS.h"

/*
 * int __tfork_thread(param, size_t psize, void (*func)(void *), void *arg);
 */
ENTRY(__tfork_thread, 0)
	SYSCALL(__tfork)
	comb,<>	%r0, %ret0, 1f
	 nop

	/*
	 * In child process: invoke function, then exit.
	 */
	copy	%arg3, %arg0		/* arg */
	copy	%arg2, %t1
	b,l	$$dyncall, %r31
	copy	%r31, %rp

	copy	%r0, %arg0
	SYSCALL(__threxit)

1:
	bv	%r0(%rp)
	 nop

EXIT(__tfork_thread)
@


1.2
log
@__tfork() needs to set the stack address of the new thread in the kernel,
so that it can't get a signal while still running on the parent thread's
stack.  Also, pass in sizeof(struct __tfork) to provide forward compat
when more members are added.  This is an ABI change, so switch syscall
numbers and bump lib majors this time.

ok deraadt@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tfork_thread.S,v 1.1 2012/04/11 12:27:08 jsing Exp $	*/
@


1.1
log
@Provide __tfork_thread() for hppa64. This makes libc compile again.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 1
a30 1
 * int __tfork_thread(param, void *stack, void (*func)(void *), void *arg);
d38 1
a38 1
	 * In child process: switch stack, invoke function, then exit.
a39 5
	copy	%arg1, %sp
	ldo	0(%sp), %r3
	std,ma	%r0, HPPA_FRAME_SIZE(%sp)
	std	%r0, HPPA_FRAME_PSP(%sp)

@

