head	1.12;
access;
symbols
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.10
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.14
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.12
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.20
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.16
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.18
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.14
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.05.11.21.52.48;	author deraadt;	state dead;
branches;
next	1.11;
commitid	VpgRpYXqYSJy4P7J;

1.11
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.10;
commitid	d9R7VGw9CHTkwXE1;

1.10
date	2015.09.10.13.29.09;	author guenther;	state Exp;
branches;
next	1.9;
commitid	pYkLasgGFEsgLTME;

1.9
date	2015.08.31.04.58.48;	author guenther;	state Exp;
branches;
next	1.8;
commitid	wAAQKCHWEsltU8Ou;

1.8
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.7;
commitid	lTMF8Y3C9fQGd6jQ;

1.7
date	2015.04.07.01.27.06;	author guenther;	state Exp;
branches;
next	1.6;
commitid	oQvh7XA3Kql35r0J;

1.6
date	2011.09.19.13.01.28;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.19.08.10.13;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.21.13.29.58;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.01.05.02.19;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.22.19.49;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.01.10.54.27;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.12
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@/*	$OpenBSD: SYS.h,v 1.11 2016/05/07 19:05:21 guenther Exp $	*/

/*
 * Copyright (c) 1998-2002 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF MIND
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/syscall.h>
#include <machine/asm.h>
#undef _LOCORE
#define _LOCORE
#include <machine/frame.h>
#include <machine/vmparam.h>
#undef _LOCORE

/* offsetof(struct tib, tib_errno) - offsetof(struct tib, __tib_tcb) */
#define TCB_OFFSET_ERRNO	-12

/*
 * We define a hidden alias with the prefix "_libc_" for each global symbol
 * that may be used internally.  By referencing _libc_x instead of x, other
 * parts of libc prevent overriding by the application and avoid unnecessary
 * relocations.
 */
#define _HIDDEN(x)		_libc_##x
#define _HIDDEN_ALIAS(x,y)			\
	STRONG_ALIAS(_HIDDEN(x),y)		!\
	.hidden _HIDDEN(x)
#define _HIDDEN_FALIAS(x,y)			\
	_HIDDEN_ALIAS(x,y)			!\
	.type _HIDDEN(x),@@function

/*
 * For functions implemented in ASM that aren't syscalls.
 *   EXIT_STRONG(x)	Like DEF_STRONG() in C; for standard/reserved C names
 *   EXIT_WEAK(x)	Like DEF_WEAK() in C; for non-ISO C names
 *   ALTEXIT_STRONG(x) and ALTEXIT_WEAK()
 *			Matching macros for ALTENTRY functions
 */
#define	ALTEXIT_STRONG(x)					\
			_HIDDEN_FALIAS(x,x)			!\
			.size _HIDDEN(x), . - _HIDDEN(x)
#define	ALTEXIT_WEAK(x)	ALTEXIT_STRONG(x)			!\
			.weak x
#define	EXIT_STRONG(x)	EXIT(x)					!\
			ALTEXIT_STRONG(x)
#define	EXIT_WEAK(x)	EXIT_STRONG(x)				!\
			.weak x


#define SYSENTRY(x)				!\
LEAF_ENTRY(__CONCAT(_thread_sys_,x))		!\
	WEAK_ALIAS(x,__CONCAT(_thread_sys_,x))
#define SYSENTRY_HIDDEN(x)			!\
LEAF_ENTRY(__CONCAT(_thread_sys_,x))
#define	SYSEXIT(x)				!\
	SYSEXIT_HIDDEN(x)			!\
	.size x, . - x
#define	SYSEXIT_HIDDEN(x)			!\
	EXIT(__CONCAT(_thread_sys_,x))
	_HIDDEN_FALIAS(x,_thread_sys_##x)	!\
	.size _HIDDEN(x), . - _HIDDEN(x)

#define	SYSCALL(x)				!\
	std	%rp, HPPA_FRAME_RP(%sr0,%sp)	!\
	ldil	L%SYSCALLGATE, %r1		!\
	depd	%r0, 31, 32, %r1		!\
	ble	4(%sr7, %r1)			!\
	ldi	__CONCAT(SYS_,x), %r1		!\
	comb,==,tr %r0, %ret0, 1f		!\
	ldd	HPPA_FRAME_RP(%sr0,%sp), %rp	!\
	/* set errno */				\
	mfctl	%cr27, %r1			!\
	stw	%t1, TCB_OFFSET_ERRNO(%r1)	!\
	bv	%r0(%rp)			!\
	 ldi	-1, %ret0			!\
1:	


#define	PSEUDO(x,y)				!\
SYSENTRY(x)					!\
	SYSCALL(y)				!\
	bv	%r0(%rp)			!\
	nop					!\
SYSEXIT(x)
#define	PSEUDO_HIDDEN(x,y)			!\
SYSENTRY_HIDDEN(x)				!\
	SYSCALL(y)				!\
	bv	%r0(%rp)			!\
	nop					!\
SYSEXIT_HIDDEN(x)

#define	PSEUDO_NOERROR(x,y)			!\
SYSENTRY(x)					!\
	std	%rp, HPPA_FRAME_RP(%sr0,%sp)	!\
	ldil	L%SYSCALLGATE, %r1		!\
	depd	%r0, 31, 32, %r1		!\
	ble	4(%sr7, %r1)			!\
	ldi	__CONCAT(SYS_,y), %r1		!\
	ldd	HPPA_FRAME_RP(%sr0,%sp), %rp	!\
	bv	%r0(%rp)			!\
	nop					!\
SYSEXIT(x)

#define	RSYSCALL(x)		PSEUDO(x,x)
#define	RSYSCALL_HIDDEN(x)	PSEUDO_HIDDEN(x,x)

@


1.11
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.10 2015/09/10 13:29:09 guenther Exp $	*/
@


1.10
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

alpha, arm, m88k, sh, sparc, and vax assistance miod@@
hppa assistance kettenis@@
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.9 2015/08/31 04:58:48 guenther Exp $	*/
d36 3
d90 9
a98 4
	.import	__cerror, code			!\
	sub,*=	%r0, %r1, %r0			!\
	b,l	__cerror, %rp			!\
	ldd	HPPA_FRAME_RP(%sr0,%sp), %rp
@


1.9
log
@Also add ALTEXIT_{STRONG,WEAK} to hppa64, copied from hppa.  Document'em too

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.8 2015/08/31 02:53:56 guenther Exp $	*/
d74 6
a79 1
EXIT(__CONCAT(_thread_sys_,x))
d103 1
a103 1
SYSEXIT(x)
@


1.8
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.7 2015/04/07 01:27:06 guenther Exp $	*/
d54 2
d57 1
a57 1
#define	EXIT_STRONG(x)	EXIT(x)					!\
d60 4
@


1.7
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.6 2011/09/19 13:01:28 kettenis Exp $	*/
d35 26
@


1.6
log
@Use a long-displacement branch instruction to call __cerror, since the
linker doesn't generate stubs yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.5 2011/09/19 08:10:13 kettenis Exp $	*/
d39 2
d61 6
d80 2
a81 1
#define	RSYSCALL(x)	PSEUDO(x,x)
@


1.5
log
@Clear the upper 32-bits of the system call address we load using ldil, since
that instruction does sign extension.  Look at %r1 to determine whether a
system call was sucessful, since that is where the kernel puts the information.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.4 2011/04/21 13:29:58 jsing Exp $	*/
d49 2
a50 1
	comb,<>	%r0, %r1, __cerror		!\
@


1.4
log
@Make SYS.h actually compile on hppa64.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.2 2006/01/05 22:19:49 kettenis Exp $	*/
d45 1
d49 1
a49 1
	comb,<>	%r0, %t1, __cerror		!\
d63 1
@


1.3
log
@Provide a WEAK_ALIAS macro in <machine/asm.h> for the few platforms
that didn't already have one, and then immediately use it in libc's
SYS.h

ok miod@@
@
text
@d43 4
a46 4
	std	rp, HPPA_FRAME_ERP(sr0,sp)	!\
	ldil	L%SYSCALLGATE, r1		!\
	ble	4(sr7, r1)			!\
	ldi	__CONCAT(SYS_,x), r1		!\
d48 2
a49 2
	comb,<>	r0, t1, __cerror		!\
	ldd	HPPA_FRAME_ERP(sr0,sp), rp
d54 1
a54 1
	bv	r0(rp)				!\
d60 6
a65 6
	std	rp, HPPA_FRAME_ERP(sr0,sp)	!\
	ldil	L%SYSCALLGATE, r1		!\
	ble	4(sr7, r1)			!\
	ldi	__CONCAT(SYS_,y), r1		!\
	ldd	HPPA_FRAME_ERP(sr0,sp), rp	!\
	bv	r0(rp)				!\
@


1.2
log
@System call stubs don't have a frame of their own, so use EMTRY_LEAF instead
of ENTRY.  This avoids emitting bogus unwind entries, which makes gdb a lot
happier.
ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.1 2005/04/01 10:54:27 mickey Exp $	*/
d38 1
a38 1
	.weak x ! .set x, __CONCAT(_thread_sys_,x)
@


1.1
log
@hppa64 bits cloned form hppa
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.14 2004/05/25 20:44:50 mickey Exp $	*/
d36 2
a37 2
#define SYSENTRY(x,n)				!\
ENTRY(__CONCAT(_thread_sys_,x),n)		!\
d52 1
a52 1
SYSENTRY(x,0)					!\
d59 1
a59 1
SYSENTRY(x,0)					!\
@

