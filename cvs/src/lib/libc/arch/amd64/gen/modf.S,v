head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.12
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.10
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.16
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.14
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.2.0.30
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.28
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.24
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.26
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.22
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.20
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2015.05.29.08.50.12;	author uebayasi;	state Exp;
branches;
next	1.4;
commitid	DR72wSpBn4VlgnXh;

1.4
date	2011.07.08.22.28.32;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.08.19.21.41;	author martynas;	state dead;
branches;
next	1.2;

1.2
date	2004.02.08.17.29.39;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.44.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Put obvious END() macros that match ENTRY() entries.
@
text
@/*	$OpenBSD$	*/
/*	$NetBSD: modf.S,v 1.1 2001/06/19 00:25:03 fvdl Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Sean Eric Fagan.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)modf.s	5.5 (Berkeley) 3/18/91
 */

#include <machine/asm.h>

/*
 * modf(value, iptr): return fractional part of value, and stores the
 * integral part into iptr (a pointer to double).
 *
 * Written by Sean Eric Fagan (sef@@kithrup.COM)
 * Sun Mar 11 20:27:30 PST 1990
 */

/* With CHOP mode on, frndint behaves as TRUNC does.  Useful. */
ENTRY(modf)

	/*
	 * Set chop mode.
	 */
	fnstcw	-12(%rsp)
	movw	-12(%rsp),%dx
	orw	$3072,%dx
	movw	%dx,-16(%rsp)
	fldcw	-16(%rsp)

	/*
	 * Get integral part.
	 */
	movsd	%xmm0,-24(%rsp)
	fldl	-24(%rsp)
	frndint
	fstpl	-8(%rsp)

	/*
	 * Restore control word.
	 */
	fldcw	-12(%rsp)

	/*
	 * Store integral part.
	 */
	movsd	-8(%rsp),%xmm0
	movsd	%xmm0,(%rdi)

	/*
	 * Get fractional part and return it.
	 */
	fldl	-24(%rsp)
	fsubl	-8(%rsp)
	fstpl	-8(%rsp)
	movsd   -8(%rsp),%xmm0

	ret
END(modf)
@


1.4
log
@Revert (leaving the complex math part alone).  Some stuff is depending
on this historical behavior;  so we're stuck in this stupid situation.
No cookie for me.
@
text
@d1 1
a1 1
/*	$OpenBSD: modf.S,v 1.2 2004/02/08 17:29:39 deraadt Exp $	*/
d92 1
@


1.3
log
@Move fabs(3), frexp(3), and modf(3) to libm--nothing has been using
them in libc for a very long time.  OK guenther@@.
@
text
@@


1.2
log
@from freebsd (and appears to make our awk work better)
Tidy up modf.S and make it actually work.  It wasn't extracting
the value out of ST(0) before copying it to %xmm0.  Also remove bogus stack
frame and work in the red zone.
@
text
@d1 1
a1 1
/*	$OpenBSD: modf.S,v 1.1 2004/01/28 01:44:45 mickey Exp $	*/
@


1.1
log
@things for amd64; from art@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a53 3
	pushq	%rbp
	movq	%rsp,%rbp
	subq	$24,%rsp
d58 2
a59 2
	fnstcw	-12(%rbp)
	movw	-12(%rbp),%dx
d61 2
a62 2
	movw	%dx,-16(%rbp)
	fldcw	-16(%rbp)
d67 2
a68 2
	movsd	%xmm0,-24(%rbp)
	fldl	-24(%rbp)
d70 1
a70 1
	fstpl	-8(%rbp)
d75 1
a75 1
	fldcw	-12(%rbp)
d80 1
a80 1
	movsd	-8(%rbp),%xmm0
d86 4
a89 3
	fldl	-24(%rbp)
	fsubl	-8(%rbp)
	movsd   -8(%rbp),%xmm0
a90 1
	leave
@

