head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.12
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.16
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.2.0.20
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@# @;


1.7
date	2015.05.29.08.50.12;	author uebayasi;	state Exp;
branches;
next	1.6;
commitid	DR72wSpBn4VlgnXh;

1.6
date	2011.07.08.22.28.32;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.08.19.21.41;	author martynas;	state dead;
branches;
next	1.4;

1.4
date	2008.12.09.20.54.02;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.09.20.32.06;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.08.17.29.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.44.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Put obvious END() macros that match ENTRY() entries.
@
text
@/*	$OpenBSD$	*/
/*	$NetBSD: fabs.S,v 1.1 2001/06/19 00:25:02 fvdl Exp $	*/

#include <machine/asm.h>

/*
 * Ok, this sucks. Is there really no way to push an xmm register onto
 * the FP stack directly?
 */

ENTRY(fabs)
	movsd	%xmm0, -8(%rsp)
	fldl	-8(%rsp)
	fabs
	fstpl	-8(%rsp)
	movsd	-8(%rsp),%xmm0
	ret
END(fabs)
@


1.6
log
@Revert (leaving the complex math part alone).  Some stuff is depending
on this historical behavior;  so we're stuck in this stupid situation.
No cookie for me.
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.S,v 1.4 2008/12/09 20:54:02 martynas Exp $	*/
d18 1
@


1.5
log
@Move fabs(3), frexp(3), and modf(3) to libm--nothing has been using
them in libc for a very long time.  OK guenther@@.
@
text
@@


1.4
log
@these were not needed
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.S,v 1.3 2008/12/09 20:32:06 martynas Exp $	*/
@


1.3
log
@ditto frexpl and ldexpl
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.S,v 1.2 2004/02/08 17:29:57 deraadt Exp $	*/
a10 1
WEAK_ALIAS(fabsl, fabs)
@


1.2
log
@from freebsd, helps awk too:
Fix fabs().  This commit brought to you by the letter 'l'.
(fstp stores a mem32 value, fstpl stores a mem64 value)
@
text
@d1 1
a1 1
/*	$OpenBSD: fabs.S,v 1.1 2004/01/28 01:44:45 mickey Exp $	*/
d11 1
@


1.1
log
@things for amd64; from art@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d15 1
a15 1
	fstp	-8(%rsp)
@

