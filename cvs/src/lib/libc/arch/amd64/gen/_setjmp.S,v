head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.42
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.46
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.44
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.40
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.38
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.36
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.34
	OPENBSD_5_0:1.1.0.32
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.30
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.28
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.24
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.26
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.05.12.15.46.03;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	ckrEyiHQNAkdYgxK;

1.2
date	2015.05.29.08.50.12;	author uebayasi;	state Exp;
branches;
next	1.1;
commitid	DR72wSpBn4VlgnXh;

1.1
date	2004.01.28.01.44.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Using a 3-word buffer in the openbsd.randomdata segment, XOR swizzle
the PC/FP/SP registers in the jmpbuf.  An old idea (around 1999?) but
the random segment sure makes it easy.  Lots of help from kettenis
ok kettenis
@
text
@/*	$OpenBSD: _setjmp.S,v 1.2 2015/05/29 08:50:12 uebayasi Exp $	*/
/*	$NetBSD: _setjmp.S,v 1.1 2001/06/19 00:25:02 fvdl Exp $	*/

/*
 * Copyright (c) 2001 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Frank van der Linden for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed for the NetBSD Project by
 *      Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


#include <machine/asm.h>
#include <machine/setjmp.h>

	.hidden __jmpxor

/*
 * C library -- _setjmp, _longjmp
 *
 *	_longjmp(a,v)
 * will generate a "return(v)" from the last call to
 *	_setjmp(a)
 * by restoring registers from the stack.
 * The previous signal state is NOT restored.
 */

ENTRY(_setjmp)
	movq    (%rsp),%r11
	leaq	__jmpxor(%rip),%rcx
	movq    %rbx,(_JB_RBX * 8)(%rdi)
	movq	%rbp,%rax
	xorq	(0*8)(%rcx),%rax
	movq    %rax,(_JB_RBP * 8)(%rdi)
	movq    %r12,(_JB_R12 * 8)(%rdi)
	movq    %r13,(_JB_R13 * 8)(%rdi)
	movq    %r14,(_JB_R14 * 8)(%rdi)
	movq    %r15,(_JB_R15 * 8)(%rdi)
	movq	%rsp,%rax
	xorq	(1*8)(%rcx),%rax
	movq    %rax,(_JB_RSP * 8)(%rdi)
	movq	%r11,%rax
	xorq	(2*8)(%rcx),%rax
	movq    %rax,(_JB_PC  * 8)(%rdi)
	xorq	%rcx,%rcx

	xorq	%rax,%rax
	ret
END(_setjmp)

ENTRY(_longjmp)
	leaq	 __jmpxor(%rip),%rcx
	movq    (_JB_RBX * 8)(%rdi),%rbx
	movq    (_JB_RBP * 8)(%rdi),%r11
	xorq    (0*8)(%rcx),%r11
	movq	%r11,%rbp
	movq    (_JB_R12 * 8)(%rdi),%r12
	movq    (_JB_R13 * 8)(%rdi),%r13
	movq    (_JB_R14 * 8)(%rdi),%r14
	movq    (_JB_R15 * 8)(%rdi),%r15
	movq    (_JB_RSP * 8)(%rdi),%r11
	xorq	(1*8)(%rcx),%r11
	movq	%r11,%rsp
	movq    (_JB_PC  * 8)(%rdi),%r11
	xorq	(2*8)(%rcx),%r11
	xorq	%rcx,%rcx

	movl	%esi,%eax
	testl	%eax,%eax
	jnz	1f
	incl	%eax
1:	movq	%r11,0(%rsp)
	ret
END(_longjmp)
@


1.2
log
@Put obvious END() macros that match ENTRY() entries.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 2
d57 1
d59 3
a61 1
	movq    %rbp,(_JB_RBP * 8)(%rdi)
d66 7
a72 2
	movq    %rsp,(_JB_RSP * 8)(%rdi)
	movq    %r11,(_JB_PC  * 8)(%rdi)
d74 1
a74 1
	xorl	%eax,%eax
d79 1
d81 3
a83 1
	movq    (_JB_RBP * 8)(%rdi),%rbp
d88 3
a90 1
	movq    (_JB_RSP * 8)(%rdi),%rsp
d92 2
@


1.1
log
@things for amd64; from art@@
@
text
@d66 1
d84 1
@

