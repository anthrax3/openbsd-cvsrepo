head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.4
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.36
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.34
	OPENBSD_5_0:1.2.0.32
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.30
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.28
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.24
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.26
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.22
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.20
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@# @;


1.7
date	2016.05.29.22.39.21;	author guenther;	state Exp;
branches;
next	1.6;
commitid	OzRHGcsk7hCN39en;

1.6
date	2016.05.12.15.46.03;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	ckrEyiHQNAkdYgxK;

1.5
date	2015.09.13.07.36.58;	author guenther;	state Exp;
branches;
next	1.4;
commitid	lKiiBbVqMp5OO6rf;

1.4
date	2015.05.29.08.50.12;	author uebayasi;	state Exp;
branches;
next	1.3;
commitid	DR72wSpBn4VlgnXh;

1.3
date	2012.08.22.17.19.34;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.09.21.25.08;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.44.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Switch from calling obsolete sig{block,setmask} to directly using the
sigprocmask syscall

ok kettenis@@
@
text
@/*	$OpenBSD: sigsetjmp.S,v 1.6 2016/05/12 15:46:03 deraadt Exp $	*/
/*	$NetBSD: __setjmp14.S,v 1.1 2001/06/19 00:25:02 fvdl Exp $	*/

/*
 * Copyright (c) 2001 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Frank van der Linden for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed for the NetBSD Project by
 *      Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


#include "SYS.h"
#include <machine/setjmp.h>

	.hidden __jmpxor

/*
 * C library -- _setjmp, _longjmp
 *
 *	longjmp(a,v)
 * will generate a "return(v)" from the last call to
 *	setjmp(a)
 * by restoring registers from the stack.
 * The previous signal state is restored.
 */

ENTRY(sigsetjmp)
	movl    %esi,(_JB_SIGFLAG  * 8)(%rdi)
	testl   %esi,%esi
	jz      2f

	movq	%rdi,%r8		/* save jmpbuf addr */
	movl	$1,%edi			/* how = SIG_BLOCK */
	xorl	%esi,%esi		/* set = empty */
	movl	$SYS_sigprocmask,%eax
	syscall
	movq	%r8,%rdi		/* restore jmpbuf addr */
	movq	%rax,(_JB_SIGMASK * 8)(%rdi)

2:	movq	(%rsp),%r11
	leaq	__jmpxor(%rip),%rcx
	movq	%rbx,(_JB_RBX * 8)(%rdi)
	movq	%rbp,%rax
	xorq	(0*8)(%rcx),%rax
	movq	%rax,(_JB_RBP * 8)(%rdi)
	movq	%r12,(_JB_R12 * 8)(%rdi)
	movq	%r13,(_JB_R13 * 8)(%rdi)
	movq	%r14,(_JB_R14 * 8)(%rdi)
	movq	%r15,(_JB_R15 * 8)(%rdi)
	movq	%rsp,%rax
	xorq	(1*8)(%rcx),%rax
	movq	%rax,(_JB_RSP * 8)(%rdi)
	movq	%r11,%rax
	xorq	(2*8)(%rcx),%rax
	movq	%rax,(_JB_PC  * 8)(%rdi)
	xorq	%rcx,%rcx

	xorq	%rax,%rax
	ret
END(sigsetjmp)

ENTRY(siglongjmp)
	movq	%rdi,%r12
	movl	%esi,%r8d
	cmpl    $0, (_JB_SIGFLAG * 8)(%rdi)
	jz      2f

	movq	(_JB_SIGMASK * 8)(%rdi),%rsi	/* get set from sc_mask */
	movl	$3,%edi				/* how = SIG_SETMASK */
	movl	$SYS_sigprocmask,%eax
	syscall
2:	movl	%r8d,%eax

	leaq	 __jmpxor(%rip),%rcx
	movq	(_JB_RBX * 8)(%r12),%rbx
	movq	(_JB_RBP * 8)(%r12),%r11
	xorq	(0*8)(%rcx),%r11
	movq	%r11,%rbp
	movq	(_JB_R13 * 8)(%r12),%r13
	movq	(_JB_R14 * 8)(%r12),%r14
	movq	(_JB_R15 * 8)(%r12),%r15
	movq	(_JB_RSP * 8)(%r12),%r11
	xorq	(1*8)(%rcx),%r11
	movq	%r11,%rsp
	movq	(_JB_PC  * 8)(%r12),%r11
	xorq	(2*8)(%rcx),%r11
	movq	(_JB_R12 * 8)(%r12),%r12
	xorq	%rcx,%rcx

	testl	%eax,%eax
	jnz	1f
	incl	%eax
1:	movq	%r11,0(%rsp)
	ret
END(siglongjmp)
@


1.6
log
@Using a 3-word buffer in the openbsd.randomdata segment, XOR swizzle
the PC/FP/SP registers in the jmpbuf.  An old idea (around 1999?) but
the random segment sure makes it easy.  Lots of help from kettenis
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsetjmp.S,v 1.5 2015/09/13 07:36:58 guenther Exp $	*/
d40 1
a40 1
#include <machine/asm.h>
d60 6
a65 4
	pushq	%rdi
	xorq	%rdi,%rdi
	call	_C_LABEL(_libc_sigblock)
	popq	%rdi
d92 1
a92 1
	pushq   %rsi
d96 5
a100 3
	movq	(_JB_SIGMASK * 8)(%rdi),%rdi
	call	_C_LABEL(_libc_sigsetmask)
2:	popq	%rax
@


1.5
log
@Do provide hidden _libc_* aliases for sig{block,setmask} and use them in
the ASM *setjmp implementations.
Skip the PLT when calling them on amd64 (other archs to do this after testing)

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsetjmp.S,v 1.4 2015/05/29 08:50:12 uebayasi Exp $	*/
d43 2
d67 1
d69 3
a71 1
	movq	%rbp,(_JB_RBP * 8)(%rdi)
d76 7
a82 2
	movq	%rsp,(_JB_RSP * 8)(%rdi)
	movq	%r11,(_JB_PC  * 8)(%rdi)
d84 1
a84 1
2:	xorl	%eax,%eax
d97 2
d100 3
a102 1
	movq	(_JB_RBP * 8)(%r12),%rbp
d106 3
a108 1
	movq	(_JB_RSP * 8)(%r12),%rsp
d110 1
d112 1
@


1.4
log
@Put obvious END() macros that match ENTRY() entries.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 1
a60 5
#ifdef __PIC__
	call	PIC_PLT(_C_LABEL(sigblock))
#else
	call	_C_LABEL(sigblock)
#endif
d85 1
a85 5
#ifdef __PIC__
	call	PIC_PLT(_C_LABEL(sigsetmask))
#else
	call	_C_LABEL(sigsetmask)
#endif
@


1.3
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsetjmp.S,v 1.2 2004/02/09 21:25:08 deraadt Exp $	*/
d80 1
d109 1
@


1.2
log
@do signal blocking before saving registers
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsetjmp.S,v 1.1 2004/01/28 01:44:45 mickey Exp $	*/
d60 1
a60 1
#ifdef PIC
d88 1
a88 1
#ifdef PIC
@


1.1
log
@things for amd64; from art@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 1
a54 11
	movq	(%rsp),%r11
	movq	%rbx,(_JB_RBX * 8)(%rdi)
	movq	%rbp,(_JB_RBP * 8)(%rdi)
	movq	%r12,(_JB_R12 * 8)(%rdi)
	movq	%r13,(_JB_R13 * 8)(%rdi)
	movq	%r14,(_JB_R14 * 8)(%rdi)
	movq	%r15,(_JB_R15 * 8)(%rdi)
	movq	%rsp,(_JB_RSP * 8)(%rdi)
	movq	%r11,(_JB_PC  * 8)(%rdi)

	movq    %rsi,(_JB_SIGFLAG  * 8)(%rdi)
d67 10
@

