head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.22
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.18
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.14
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.16
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.8
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.12
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.10
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.8.0.8
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.6
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.12
date	2012.04.19.19.14.55;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2012.04.12.16.14.09;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.08.22.28.32;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.08.19.21.41;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.21.09.34.50;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2009.04.19.16.42.05;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.09.19.52.33;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.07.20.36.07;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2008.07.24.09.31.06;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.29.21.38.08;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.01.15.12.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.44.44;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.12
log
@rely on the compiler giving us a built-in alloca.  any new architecture
or compiler we use will.
ok millert
@
text
@#	$OpenBSD: Makefile.inc,v 1.11 2012/04/12 16:14:09 deraadt Exp $

SRCS+=	_setjmp.S fabs.S infinity.c ldexp.c modf.S nan.c setjmp.S \
	sigsetjmp.S
SRCS+=	fpclassifyl.c isfinitel.c isinfl.c isnanl.c isnormall.c signbitl.c
SRCS+=	flt_rounds.S fpgetmask.S fpgetround.S fpgetsticky.S fpsetmask.S \
	fpsetround.S fpsetsticky.S
@


1.11
log
@alloca.c cannot be used
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2011/07/08 22:28:32 martynas Exp $
a7 2

SRCS+=	alloca.S
@


1.10
log
@Revert (leaving the complex math part alone).  Some stuff is depending
on this historical behavior;  so we're stuck in this stupid situation.
No cookie for me.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2009/04/21 09:34:50 martynas Exp $
a9 1
LSRCS+= alloca.c
@


1.9
log
@Move fabs(3), frexp(3), and modf(3) to libm--nothing has been using
them in libc for a very long time.  OK guenther@@.
@
text
@d3 1
a3 1
SRCS+=	_setjmp.S infinity.c ldexp.c nan.c setjmp.S \
@


1.8
log
@remove from gen so that lint doesn't check gen if assembly versions
are available.  spotted by theo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2009/04/19 16:42:05 martynas Exp $
d3 1
a3 1
SRCS+=	_setjmp.S fabs.S infinity.c ldexp.c modf.S nan.c setjmp.S \
@


1.7
log
@- ldexp implementation has issues.  switch to the one from libm
- remove frexp in hppa64, cloned from hppa
- move generic ieee754 implementations of modf and ldexp to gen
ok kettenis@@, "looks good" millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2008/12/09 19:52:33 martynas Exp $
d3 1
a3 1
SRCS+=	_setjmp.S fabs.S infinity.c modf.S nan.c setjmp.S \
@


1.6
log
@- add long double signbit
- make long double versions weak aliases to double versions,
on archs where long doubles are 64 bits
- no need to have two finites.  finite() and finitef() are
non-standard 3BSD obsolete versions of isfinite.  remove
from libm.  make them weak_alias in libc to __isfinite and
__isfinitef instead.  similarly make 3BSD obsolete versions
of isinf, isinff, isnan, isnanf weak_aliases to C99's
__isinf, __isinff, __isnan, __isnanf
- bump major
ok millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2008/09/07 20:36:07 martynas Exp $
d3 1
a3 1
SRCS+=	_setjmp.S fabs.S infinity.c ldexp.c modf.S nan.c setjmp.S \
@


1.5
log
@- replace dtoa w/ David's gdtoa, version 2008-03-15
- provide proper dtoa locks
- use the real strtof implementation
- add strtold, __hdtoa, __hldtoa
- add %a/%A support
- don't lose precision in printf, don't round to double anymore
- implement extended-precision versions of libc functions: fpclassify,
isnan, isinf, signbit, isnormal, isfinite, now that the ieee.h is
fixed
- separate vax versions of strtof, and __hdtoa
- add complex math support.  added functions: cacos, casin, catan,
ccos, csin, ctan, cacosh, casinh, catanh, ccosh, csinh, ctanh, cexp,
clog, cabs, cpow, csqrt, carg, cimag, conj, cproj, creal, cacosf,
casinf, catanf, ccosf, csinf, ctanf, cacoshf, casinhf, catanhf,
ccoshf, csinhf, ctanhf, cexpf, clogf, cabsf, cpowf, csqrtf, cargf,
cimagf, conjf, cprojf, crealf
- add fdim, fmax, fmin
- add log2. (adapted implementation e_log.c.  could be more acruate
& faster, but it's good enough for now)
- remove wrappers & cruft in libm, supposed to work-around mistakes
in SVID, etc.;  use ieee versions.  fixes issues in python 2.6 for
djm@@
- make _digittoint static
- proper definitions for i386, and amd64 in ieee.h
- sh, powerpc don't really have extended-precision
- add missing definitions for mips64 (quad), m{6,8}k (96-bit) float.h
for LDBL_*
- merge lead to frac for m{6,8}k, for gdtoa to work properly
- add FRAC*BITS & EXT_TO_ARRAY32 definitions in ieee.h, for hdtoa&ldtoa
to use
- add EXT_IMPLICIT_NBIT definition, which indicates implicit
normalization bit
- add regression tests for libc: fpclassify and printf
- arith.h & gd_qnan.h definitions
- update ieee.h: hppa doesn't have quad-precision, hppa64 does
- add missing prototypes to gdtoaimp
- on 64-bit platforms make sure gdtoa doesn't use a long when it
really wants an int
- etc., what i may have forgotten...
- bump libm major, due to removed&changed symbols
- no libc bump, since this is riding on djm's libc major crank from
a day ago

discussed with / requested by / testing theo, sthen@@, djm@@, jsg@@,
merdely@@, jsing@@, tedu@@, brad@@, jakemsr@@, and others.
looks good to millert@@
parts of the diff ok kettenis@@

this commit does not include:
- man page changes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2008/07/24 09:31:06 martynas Exp $
d5 1
a5 1
SRCS+=	fpclassifyl.c isfinitel.c isinfl.c isnanl.c isnormall.c
@


1.4
log
@- move isinf, isnan dups to gen, since most is ieee 754
- is{inf,nan} should be macros for real-floating, so rename to
__is{inf,nan}, per C99
- implement C99 __fpclassify(), __fpclassifyf(), __isfinite(),
__isfinitef(), __isnormal(), __isnormalf(), __signbit(), __signbitf()
- long functions added, but not yet enabled, till ieee.h is fixed
- implement vax equivalents of the functions
- reimplement isinff, isnanf in a better way, and move to libc
- add qnan bytes for all archs
- bump major
man pages will follow
ok millert@@.  arm bits looked over by drahn@@
discussed w/ theo, who showed the right direction, to put these
functions in libc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2005/11/29 21:38:08 deraadt Exp $
d5 1
@


1.3
log
@if we pull in a .S file, we must fake out the lint with a .c file
for this first cut, we will do this for alloca() using alloca.c by
adding it to LSRCS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2005/02/01 15:12:29 millert Exp $
d3 2
a4 2
SRCS+=	_setjmp.S fabs.S infinity.c isinf.c isnan.c ldexp.c \
	modf.S setjmp.S sigsetjmp.S
@


1.2
log
@Replace broken frexp() with a working one from FreeBSD.  There's
no need to have a copy for each platform with ieee floating point,
only vax needs a special version (which probably has similar bugs).
OK and with help from otto@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 2004/01/28 01:44:44 mickey Exp $
d3 1
a3 1
SRCS+=	_setjmp.S alloca.S fabs.S infinity.c isinf.c isnan.c ldexp.c \
d8 2
@


1.1
log
@things for amd64; from art@@
@
text
@d1 1
a1 1
#	$OpenBSD$
d3 1
a3 1
SRCS+=	_setjmp.S alloca.S fabs.S frexp.c infinity.c isinf.c isnan.c ldexp.c \
@

