head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@# @;


1.8
date	2015.11.14.21.53.03;	author guenther;	state Exp;
branches;
next	1.7;
commitid	FaP6OlPRXoQ3iZYo;

1.7
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.6;
commitid	lTMF8Y3C9fQGd6jQ;

1.6
date	2015.05.29.07.21.09;	author uebayasi;	state Exp;
branches;
next	1.5;
commitid	17hzypZR1YJG5Hjn;

1.5
date	2015.05.15.22.29.37;	author millert;	state Exp;
branches;
next	1.4;
commitid	o1loCGVIygHmwtDK;

1.4
date	2014.12.09.15.10.39;	author reyk;	state Exp;
branches;
next	1.3;
commitid	OF0WjxvqrbANKgYq;

1.3
date	2014.11.30.19.43.56;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	1sP0uXsb2s1HOugs;

1.2
date	2014.11.20.21.51.02;	author deraadt;	state dead;
branches;
next	1.1;
commitid	WqDifXPHiY3WoZKX;

1.1
date	2014.11.20.14.33.00;	author reyk;	state Exp;
branches;
next	;
commitid	ektKQd6FW4Enn5pg;


desc
@@


1.8
log
@Split the non-syscall ASM bits from SYS.h into DEFS.h and use that in the
non-syscall .S source

ok millert@@ miod@@
@
text
@/*	$OpenBSD: strrchr.S,v 1.7 2015/08/31 02:53:56 guenther Exp $	*/
/*	$NetBSD: strrchr.S,v 1.3 2014/03/22 19:16:34 jakllsch Exp $	*/

/*
 * Written by J.T. Conklin <jtc@@acorntoolworks.com>
 * Public domain.
 */

#include "DEFS.h"

WEAK_ALIAS(rindex, strrchr)

ENTRY(strrchr)
	movzbq	%sil,%rcx

	/* zero return value */
	xorq	%rax,%rax

	/*
	 * Align to word boundary.
	 * Consider unrolling loop?
	 */
.Lalign:
	testb	$7,%dil
	je	.Lword_aligned
	movb	(%rdi),%dl
	cmpb	%cl,%dl
	cmoveq	%rdi,%rax
	incq	%rdi
	testb	%dl,%dl
	jne	.Lalign
	jmp	.Ldone

.Lword_aligned:
	/* copy char to all bytes in word */
	movb	%cl,%ch
	movq	%rcx,%rdx
	salq	$16,%rcx
	orq	%rdx,%rcx
	movq	%rcx,%rdx
	salq	$32,%rcx
	orq	%rdx,%rcx

	movabsq	$0x0101010101010101,%r8
	movabsq	$0x8080808080808080,%r9

	/* Check whether any byte in the word is equal to ch or 0. */
	_ALIGN_TEXT
.Lloop:
	movq	(%rdi),%rdx
	addq	$8,%rdi
	movq	%rdx,%rsi
	subq	%r8,%rdx
	xorq	%rcx,%rsi
	subq	%r8,%rsi
	orq	%rsi,%rdx
	testq	%r9,%rdx
	je	.Lloop

	/*
	 * In rare cases, the above loop may exit prematurely. We must
	 * return to the loop if none of the bytes in the word match
	 * ch or are equal to 0.
	 */

	movb	-8(%rdi),%dl
	cmpb	%cl,%dl		/* 1st byte == ch? */
	jne	1f
	leaq	-8(%rdi),%rax
1:	testb	%dl,%dl		/* 1st byte == 0? */
	je	.Ldone

	movb	-7(%rdi),%dl
	cmpb	%cl,%dl		/* 2nd byte == ch? */
	jne	1f
	leaq	-7(%rdi),%rax
1:	testb	%dl,%dl		/* 2nd byte == 0? */
	je	.Ldone

	movb	-6(%rdi),%dl
	cmpb	%cl,%dl		/* 3rd byte == ch? */
	jne	1f
	leaq	-6(%rdi),%rax
1:	testb	%dl,%dl		/* 3rd byte == 0? */
	je	.Ldone

	movb	-5(%rdi),%dl
	cmpb	%cl,%dl		/* 4th byte == ch? */
	jne	1f
	leaq	-5(%rdi),%rax
1:	testb	%dl,%dl		/* 4th byte == 0? */
	je	.Ldone

	movb	-4(%rdi),%dl
	cmpb	%cl,%dl		/* 5th byte == ch? */
	jne	1f
	leaq	-4(%rdi),%rax
1:	testb	%dl,%dl		/* 5th byte == 0? */
	je	.Ldone

	movb	-3(%rdi),%dl
	cmpb	%cl,%dl		/* 6th byte == ch? */
	jne	1f
	leaq	-3(%rdi),%rax
1:	testb	%dl,%dl		/* 6th byte == 0? */
	je	.Ldone

	movb	-2(%rdi),%dl
	cmpb	%cl,%dl		/* 7th byte == ch? */
	jne	1f
	leaq	-2(%rdi),%rax
1:	testb	%dl,%dl		/* 7th byte == 0? */
	je	.Ldone

	movb	-1(%rdi),%dl
	cmpb	%cl,%dl		/* 8th byte == ch? */
	jne	1f
	leaq	-1(%rdi),%rax
1:	testb	%dl,%dl		/* 8th byte == 0? */
	jne	.Lloop

.Ldone:
	ret
END_STRONG(strrchr)
@


1.7
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strrchr.S,v 1.6 2015/05/29 07:21:09 uebayasi Exp $	*/
d9 1
a9 1
#include "SYS.h"
@


1.6
log
@Sprinkle END() in some straightforward *.S files that have ENTRY().  The
resulting *.o have "FUNC" symbols with size set.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d9 1
a9 1
#include <machine/asm.h>
d124 1
a124 1
END(strrchr)
@


1.5
log
@Make index/rindex weak aliases of strchr/strrchr since they are not
part of the ISO C standard and have also been dropped from POSIX.
OK guenther@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strrchr.S,v 1.4 2014/12/09 15:10:39 reyk Exp $	*/
d124 1
@


1.4
log
@Import new amd64 assembly versions of strchr/index, strrchr/rindex,
and strlen that provide a significantly faster performance than our
previous .c or .S implementations.  Based on NetBSD's code.

Tested with different amd64 CPUs.

ok deraadt@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d11 1
a11 1
STRONG_ALIAS(rindex, strrchr)
@


1.3
log
@restructure libc/string + libc/arch/*/string coperation regarding
(potentially) MD versions (function dependent, not filename dependent)
split out memcpy/memmove/bcopy and strchr/index/strrchr/rindex
Bring back amd64 .S versions

And the final touch: switch all architectures temporarily to MI
memcpy.c, which contains syslog + abort for overlapping copies.  A nice
harsh undefined behaviour.  We will clean the entire userland of the
remaining issues in this catagory, then switch to the optimised memcpy
which skips the memmove check.

I tried to cut this change into pieces, but testing each sub-step on
every architecture is too time consuming and mindnumbing.
ok miod
@
text
@d1 3
d5 1
a5 1
 * Written by J.T. Conklin <jtc@@netbsd.org>.
a6 1
 * Adapted for NetBSD/x86_64 by Frank van der Linden <fvdl@@wasabisystems.com>
d12 1
d14 12
a25 3
	movb	%sil,%cl
	xorq	%rax,%rax		/* init pointer to null */
L1:
d27 2
a28 4
	cmpb	%dl,%cl
	jne	L2
	movq	%rdi,%rax
L2:
d30 93
a122 2
	testb	%dl,%dl			/* null terminator??? */
	jnz	L1
@


1.2
log
@One of these optimized stubs creates some incredibly subtle damage,
causing as(1) to create a wrong nop-sled for text segment aligns.
Revert, until it is found and fixed.
@
text
@d9 1
@


1.1
log
@Add amd64 assembler versions of some standard functions to libc.  The
code is already used in the kernel and the files are unmodified copies
from src/sys/lib/libkern/arch/amd64/.  Depending on the function, this
gives us some speedup in userland.

ok deraadt@@, no objections from miod@@
@
text
@@

