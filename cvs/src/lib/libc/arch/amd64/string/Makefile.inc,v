head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.10
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.18
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.16
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.14
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.10
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.12
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.8
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2014.12.09.15.10.39;	author reyk;	state Exp;
branches;
next	1.7;
commitid	OF0WjxvqrbANKgYq;

1.7
date	2014.11.30.19.43.56;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	1sP0uXsb2s1HOugs;

1.6
date	2014.11.20.21.51.02;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	WqDifXPHiY3WoZKX;

1.5
date	2014.11.20.14.33.00;	author reyk;	state Exp;
branches;
next	1.4;
commitid	ektKQd6FW4Enn5pg;

1.4
date	2012.09.04.03.10.42;	author okan;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.17.02.34.18;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.15.18.42.31;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.44.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Import new amd64 assembly versions of strchr/index, strrchr/rindex,
and strlen that provide a significantly faster performance than our
previous .c or .S implementations.  Based on NetBSD's code.

Tested with different amd64 CPUs.

ok deraadt@@ mikeb@@
@
text
@#	$OpenBSD: Makefile.inc,v 1.7 2014/11/30 19:43:56 deraadt Exp $

SRCS+=	memcpy.c memmove.S \
	strchr.S strrchr.S \
	bcmp.S bzero.S ffs.S memchr.S \
	memset.S strcat.c strcmp.S \
	memcmp.c strcpy.c strcspn.c strlen.S strlcat.c \
	strlcpy.c strncat.c strncmp.c strncpy.c strpbrk.c \
	strsep.c strspn.c strstr.c swab.c
@


1.7
log
@restructure libc/string + libc/arch/*/string coperation regarding
(potentially) MD versions (function dependent, not filename dependent)
split out memcpy/memmove/bcopy and strchr/index/strrchr/rindex
Bring back amd64 .S versions

And the final touch: switch all architectures temporarily to MI
memcpy.c, which contains syslog + abort for overlapping copies.  A nice
harsh undefined behaviour.  We will clean the entire userland of the
remaining issues in this catagory, then switch to the optimised memcpy
which skips the memmove check.

I tried to cut this change into pieces, but testing each sub-step on
every architecture is too time consuming and mindnumbing.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2014/11/20 21:51:02 deraadt Exp $
d7 1
a7 1
	memcmp.c strcpy.c strcspn.c strlen.c strlcat.c \
@


1.6
log
@One of these optimized stubs creates some incredibly subtle damage,
causing as(1) to create a wrong nop-sled for text segment aligns.
Revert, until it is found and fixed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2012/09/04 03:10:42 okan Exp $
d3 7
a9 4
SRCS+=  bcmp.c ffs.S index.c memchr.c memcmp.c bcopy.c bzero.c \
        rindex.c strcat.c strcmp.c strcpy.c strcspn.c strlen.c \
        strncat.c strncmp.c strncpy.c strpbrk.c strsep.c \
        strspn.c strstr.c swab.c memset.c strlcpy.c strlcat.c
@


1.5
log
@Add amd64 assembler versions of some standard functions to libc.  The
code is already used in the kernel and the files are unmodified copies
from src/sys/lib/libkern/arch/amd64/.  Depending on the function, this
gives us some speedup in userland.

ok deraadt@@, no objections from miod@@
@
text
@d3 2
a4 2
SRCS+=  bcmp.S ffs.S index.c memchr.S memcmp.S bcopy.S bzero.S \
        rindex.c strcat.c strcmp.S strcpy.c strcspn.c strlen.c \
d6 1
a6 2
        strspn.c strstr.c swab.c memset.S strlcpy.c strlcat.c
SRCS+=	memcpy.S memmove.S strchr.S strrchr.S
@


1.4
log
@remove lint leftovers; ok guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2012/01/17 02:34:18 guenther Exp $
d3 2
a4 2
SRCS+=  bcmp.c ffs.S index.c memchr.c memcmp.c bcopy.c bzero.c \
        rindex.c strcat.c strcmp.c strcpy.c strcspn.c strlen.c \
d6 2
a7 1
        strspn.c strstr.c swab.c memset.c strlcpy.c strlcat.c
@


1.3
log
@Reimplement mutexes, condvars, and rwlocks to eliminate bugs,
particularly the "consume the signal you just sent" hang, and putting
the wait queues in userspace.

Do cancellation handling in pthread_cond_*wait(), pthread_join(),
and sem_wait().

Add __ prefix to thr{sleep,wakeup,exit,sigdivert}() syscalls; add
'abort" argument to thrsleep to close cancellation race; make
thr{sleep,wakeup} return errno values via *retval to avoid touching
userspace errno.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2007/05/15 18:42:31 otto Exp $
a6 2

LSRCS+=	ffs.c
@


1.2
log
@fix some lint 'xxx used, but not defined' warnings by properly adding
stuff to LSRCS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 2004/01/28 01:44:45 mickey Exp $
d4 1
a4 1
        rindex.c strcat.c strcmp.c strcpy.c strcspn.c strlen.S \
d8 1
a8 1
LSRCS+=	ffs.c strlen.c
@


1.1
log
@things for amd64; from art@@
@
text
@d1 1
a1 1
#	$OpenBSD$
d7 2
@

