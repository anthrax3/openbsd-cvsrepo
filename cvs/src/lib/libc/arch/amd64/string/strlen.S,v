head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_0:1.1.0.32
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.30
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.28
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.24
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.26
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2015.12.11.00.05.46;	author mmcc;	state Exp;
branches;
next	1.6;
commitid	sKlD19F6fmDySy9z;

1.6
date	2015.11.14.21.53.03;	author guenther;	state Exp;
branches;
next	1.5;
commitid	FaP6OlPRXoQ3iZYo;

1.5
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.4;
commitid	lTMF8Y3C9fQGd6jQ;

1.4
date	2015.05.29.07.21.09;	author uebayasi;	state Exp;
branches;
next	1.3;
commitid	17hzypZR1YJG5Hjn;

1.3
date	2014.12.09.15.10.39;	author reyk;	state Exp;
branches;
next	1.2;
commitid	OF0WjxvqrbANKgYq;

1.2
date	2012.01.17.21.31.19;	author mikeb;	state dead;
branches;
next	1.1;

1.1
date	2004.01.28.01.44.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@"the the" -> "the" in comment
@
text
@/*	$OpenBSD: strlen.S,v 1.6 2015/11/14 21:53:03 guenther Exp $	*/
/*	$NetBSD: strlen.S,v 1.6 2014/03/22 19:16:34 jakllsch Exp $	*/

/*-
 * Copyright (c) 2009 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by David Laight.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Inspired by a version written by J.T. Conklin <jtc@@acorntoolworks.com>
 * (Only the long comment really remains his work!)
 */

#include "DEFS.h"

/*
 * There are many well known branch-free sequences which are used
 * for determining whether a zero-byte is contained within a word.
 * These sequences are generally much more efficent than loading
 * and comparing each byte individually.
 *
 * The expression [1,2]:
 *
 * (1)  ~(((x & 0x7f....7f) + 0x7f....7f) | (x | 0x7f....7f))
 *
 * evaluates to a non-zero value if any of the bytes in the
 * original word is zero.
 *
 * It also has the useful property that bytes in the result word
 * that correspond to non-zero bytes in the original word have
 * the value 0x00, while bytes corresponding to zero bytes have
 * the value 0x80. This allows calculation of the first (and
 * last) occurrence of a zero byte within the word (useful for C's
 * str* primitives) by counting the number of leading (or
 * trailing) zeros and dividing the result by 8.  On machines
 * without (or with slow) clz() / ctz() instructions, testing
 * each byte in the result word for zero is necessary.
 *
 * This typically takes 4 instructions (5 on machines without
 * "not-or") not including those needed to load the constant.
 *
 *
 * The expression:
 *
 * (2)  ((x - 0x01....01) & 0x80....80 & ~x)
 *
 * evaluates to a non-zero value if any of the bytes in the
 * original word is zero.
 *
 * On little endian machines, the first byte in the result word
 * that corresponds to a zero byte in the original byte is 0x80,
 * so clz() can be used as above.  On big endian machines, and
 * little endian machines without (or with a slow) clz() insn,
 * testing each byte in the original for zero is necessary.
 *
 * This typically takes 3 instructions (4 on machines without
 * "and with complement") not including those needed to load
 * constants.
 *
 *
 * The expression:
 *
 * (3)  ((x - 0x01....01) & 0x80....80)
 *
 * always evaluates to a non-zero value if any of the bytes in
 * the original word is zero or has the top bit set.
 * For strings that are likely to only contain 7-bit ascii these
 * false positives will be rare.
 *
 * To account for possible false positives, each byte of the
 * original word must be checked when the expression evaluates to
 * a non-zero value.  However, because it is simpler than those
 * presented above, code that uses it will be faster as long as
 * the rate of false positives is low.
 *
 * This is likely, because the false positive can only occur
 * if the most siginificant bit of a byte within the word is set.
 * The expression will never fail for typical 7-bit ASCII strings.
 *
 * This typically takes 2 instructions not including those needed
 * to load constants.
 *
 *
 * [1] Henry S. Warren Jr., "Hacker's Delight", Addison-Westley 2003
 *
 * [2] International Business Machines, "The PowerPC Compiler Writer's
 *     Guide", Warthman Associates, 1996
 */

ENTRY(strlen)
	movabsq	$0x0101010101010101,%r8

	test	$7,%dil
	movq	%rdi,%rax		/* Buffer, %rdi unchanged */
	movabsq	$0x8080808080808080,%r9
	jnz	10f			/* Jump if misaligned */

	_ALIGN_TEXT
1:
	movq	(%rax),%rdx		/* get bytes to check */
2:
	addq	$8,%rax
	mov	%rdx,%rcx		/* save for later check */
	subq	%r8,%rdx		/* alg (3) above first */
	not	%rcx			/* Invert of data */
	andq	%r9,%rdx
	je	1b			/* jump if all 0x01-0x80 */

	/* Do check from alg (2) above - loops for 0x81..0xff bytes */
	andq	%rcx,%rdx
	je	1b

	/* Since we are LE, use bit scan for first 0x80 byte */
	sub	%rdi,%rax		/* length to next word */
	bsf	%rdx,%rdx		/* 7, 15, 23 ... 63 */
	shr	$3,%rdx			/* 0, 1, 2 ... 7 */
	lea	-8(%rax,%rdx),%rax
	ret

/* Misaligned, read aligned word and make low bytes non-zero */
	_ALIGN_TEXT
10:
	mov	%al,%cl
	mov	$1,%rsi
	and	$7,%cl			/* offset into word 1..7 */
	and	$~7,%al			/* start of word with buffer */
	shl	$3,%cl			/* bit count 8, 16 .. 56 */
	movq	(%rax),%rdx		/* first data in high bytes */
	shl	%cl,%rsi
	dec	%rsi
	or	%rsi,%rdx		/* low bytes now non-zero */
	jmp	2b
END_STRONG(strlen)
@


1.6
log
@Split the non-syscall ASM bits from SYS.h into DEFS.h and use that in the
non-syscall .S source

ok millert@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strlen.S,v 1.5 2015/08/31 02:53:56 guenther Exp $	*/
d100 1
a100 1
 * This is likely, because the the false positive can only occur
@


1.5
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strlen.S,v 1.4 2015/05/29 07:21:09 uebayasi Exp $	*/
d38 1
a38 1
#include "SYS.h"
@


1.4
log
@Sprinkle END() in some straightforward *.S files that have ENTRY().  The
resulting *.o have "FUNC" symbols with size set.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
#include <machine/asm.h>
d157 1
a157 1
END(strlen)
@


1.3
log
@Import new amd64 assembly versions of strchr/index, strrchr/rindex,
and strlen that provide a significantly faster performance than our
previous .c or .S implementations.  Based on NetBSD's code.

Tested with different amd64 CPUs.

ok deraadt@@ mikeb@@
@
text
@d157 1
@


1.2
log
@Remove assembly version of strlen from i386 and amd64, where it's
up to 3 times slower than the C code most of the time.  This was
brought up by DragonflyBSD guys initially.

ok deraadt, guenther. miod will not miss it.
@
text
@d1 32
a32 1
/*	$OpenBSD: strlen.S,v 1.1 2004/01/28 01:44:45 mickey Exp $	*/
d34 2
a35 3
 * Written by J.T. Conklin <jtc@@netbsd.org>.
 * Public domain.
 * Adapted for NetBSD/x86_64 by Frank van der Linden <fvdl@@wasabisystems.com>
d40 74
d115 27
a141 7
	cld				/* set search forward */
	xorl	%eax,%eax		/* set search for null terminator */
	movq	$-1,%rcx		/* set search for lots of characters */
	repne				/* search! */
	scasb
	notq	%rcx			/* get length by taking	complement */
	leaq	-1(%rcx),%rax		/* and subtracting one */
d143 14
@


1.1
log
@things for amd64; from art@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

