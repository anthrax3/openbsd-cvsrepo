head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2015.11.14.21.53.03;	author guenther;	state Exp;
branches;
next	1.5;
commitid	FaP6OlPRXoQ3iZYo;

1.5
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.4;
commitid	lTMF8Y3C9fQGd6jQ;

1.4
date	2015.05.29.07.21.09;	author uebayasi;	state Exp;
branches;
next	1.3;
commitid	17hzypZR1YJG5Hjn;

1.3
date	2014.11.30.19.43.56;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	1sP0uXsb2s1HOugs;

1.2
date	2014.11.20.21.51.02;	author deraadt;	state dead;
branches;
next	1.1;
commitid	WqDifXPHiY3WoZKX;

1.1
date	2014.11.20.14.33.00;	author reyk;	state Exp;
branches;
next	;
commitid	ektKQd6FW4Enn5pg;


desc
@@


1.6
log
@Split the non-syscall ASM bits from SYS.h into DEFS.h and use that in the
non-syscall .S source

ok millert@@ miod@@
@
text
@#include "DEFS.h"

ENTRY(bcmp)
	xorl	%eax,%eax		/* clear return value */
	cld				/* set compare direction forward */

	movq	%rdx,%rcx		/* compare by words */
	shrq	$3,%rcx
	repe
	cmpsq
	jne	L1

	movq	%rdx,%rcx		/* compare remainder by bytes */
	andq	$7,%rcx
	repe
	cmpsb
	je	L2

L1:	incl	%eax
L2:	ret
END_WEAK(bcmp)
@


1.5
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
#include "SYS.h"
@


1.4
log
@Sprinkle END() in some straightforward *.S files that have ENTRY().  The
resulting *.o have "FUNC" symbols with size set.
@
text
@d1 1
a1 1
#include <machine/asm.h>
d21 1
a21 1
END(bcmp)
@


1.3
log
@restructure libc/string + libc/arch/*/string coperation regarding
(potentially) MD versions (function dependent, not filename dependent)
split out memcpy/memmove/bcopy and strchr/index/strrchr/rindex
Bring back amd64 .S versions

And the final touch: switch all architectures temporarily to MI
memcpy.c, which contains syslog + abort for overlapping copies.  A nice
harsh undefined behaviour.  We will clean the entire userland of the
remaining issues in this catagory, then switch to the optimised memcpy
which skips the memmove check.

I tried to cut this change into pieces, but testing each sub-step on
every architecture is too time consuming and mindnumbing.
ok miod
@
text
@d21 1
@


1.2
log
@One of these optimized stubs creates some incredibly subtle damage,
causing as(1) to create a wrong nop-sled for text segment aligns.
Revert, until it is found and fixed.
@
text
@@


1.1
log
@Add amd64 assembler versions of some standard functions to libc.  The
code is already used in the kernel and the files are unmodified copies
from src/sys/lib/libkern/arch/amd64/.  Depending on the function, this
gives us some speedup in userland.

ok deraadt@@, no objections from miod@@
@
text
@@

