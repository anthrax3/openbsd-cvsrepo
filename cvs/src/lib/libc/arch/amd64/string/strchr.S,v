head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@# @;


1.8
date	2015.11.14.21.53.03;	author guenther;	state Exp;
branches;
next	1.7;
commitid	FaP6OlPRXoQ3iZYo;

1.7
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.6;
commitid	lTMF8Y3C9fQGd6jQ;

1.6
date	2015.05.29.07.21.09;	author uebayasi;	state Exp;
branches;
next	1.5;
commitid	17hzypZR1YJG5Hjn;

1.5
date	2015.05.15.22.29.37;	author millert;	state Exp;
branches;
next	1.4;
commitid	o1loCGVIygHmwtDK;

1.4
date	2014.12.09.15.10.39;	author reyk;	state Exp;
branches;
next	1.3;
commitid	OF0WjxvqrbANKgYq;

1.3
date	2014.11.30.19.43.56;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	1sP0uXsb2s1HOugs;

1.2
date	2014.11.20.21.51.02;	author deraadt;	state dead;
branches;
next	1.1;
commitid	WqDifXPHiY3WoZKX;

1.1
date	2014.11.20.14.33.00;	author reyk;	state Exp;
branches;
next	;
commitid	ektKQd6FW4Enn5pg;


desc
@@


1.8
log
@Split the non-syscall ASM bits from SYS.h into DEFS.h and use that in the
non-syscall .S source

ok millert@@ miod@@
@
text
@/*	$OpenBSD: strchr.S,v 1.7 2015/08/31 02:53:56 guenther Exp $	*/
/*	$NetBSD: strchr.S,v 1.7 2014/03/22 19:16:34 jakllsch Exp $	*/

/*-
 * Copyright (c) 2009 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by David Laight.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/* See comments in strlen.S about checking words for byte values */

#include "DEFS.h"

WEAK_ALIAS(index, strchr)

/*
 * On entry %rdi is the buffer and the low byte of %rsi (%sil) the
 * character to search for.
 *
 * Registers %rdx, %rcx, %r8-%r11 and %rax are also usable
 */

ENTRY(strchr)
	movabsq	$0x0101010101010101,%r8

	movzbq	%sil,%rdx	/* value to search for (c) */
	/* These imul are 'directpath' on athlons, so are fast */
	imul	$0x80,%r8,%r9	/* 0x8080808080808080 */
	imul	%r8,%rdx	/* (c) copied to all bytes */
	test	$7,%dil
	jnz	20f		/* jump if misaligned */

	_ALIGN_TEXT		/* one byte nop */
1:
	movq	(%rdi),%rax	/* bytes to check (x) */
2:
	addq	$8,%rdi
	mov	%rax,%r10
	mov	%rax,%r11	/* for 'char' check */
	not	%r10		/* invert of data (~x) */

	xorq	%rdx,%r11	/* convert 'char' test to one for NUL */
	subq	%r8,%rax	/* x - 0x10 */
	movq	%r10,%rsi	/* ~x */
	subq	%r8,%r11	/* (x ^ c) - 0x10 */
/*
 * Here we could check ((x - 0x10) | ((x ^ c) - 0x10)) & 0x80
 * and short-circuit the case where no top bits are set, and
 * we continue the loop.
 * However it needs 3 more clocks that are difficult to interleave
 * in the existing dependency chain ...
 */
	andq	%r9,%rax	/* (x - 0x10) & 0x80 */
	xorq	%rdx,%rsi	/* c ^ ~x == ~(c ^ x) */
	andq	%r9,%r11	/* ((x ^ c) - 0x10) & 0x80 */
	andq	%r10,%rax	/* (x - 0x10) & 0x80 & ~x */
	jne	10f		/* jump if string ends */
	andq	%rsi,%r11	/* ((x ^ c) - 0x10) & 0x80 & ~(x ^ c) */
	je	1b		/* jump if no match */

	/* Found char, since LE can use bit scan */
	bsf	%r11,%r11	/* 7, 15, 23 ... 63 */
8:	shr	$3,%r11		/* 0, 1, 2 .. 7 */
	lea	-8(%r11,%rdi),%rax
	ret

/* End of string, check whether char is before NUL */
	_ALIGN_TEXT		/* adds three byte nop */
10:
	bsf	%rax,%rax	/* count to NUL */
	andq	%rsi,%r11	/* check for char in last 8 bytes */
	je	11f
	bsf	%r11,%r11	/* NUL and char - see which was first */
	cmp	%r11,%rax
	jae	8b		/* return 'found' if same - searching for NUL */
11:	xor	%eax,%eax	/* char not found */
	ret

/* Source misaligned: read aligned word and make low bytes invalid */
/* I (dsl) think a _ALIGN_TEXT here will slow things down! */
20:
	xor	%rcx,%rcx
	sub	%dil,%cl	/* Convert low address values 1..7 ... */
	sbb	%rsi,%rsi	/* carry was set, so %rsi now ~0u! */
	and	$7,%cl		/* ... to 7..1 */
	and	$~7,%dil	/* move address to start of word */
	shl	$3,%cl		/* now 56, 48 ... 16, 8 */
	movq	(%rdi),%rax	/* aligned word containing first data */
	xor	%rdx,%rsi	/* invert of search pattern (~c) */
	je	22f		/* searching for 0xff */
21:	shr	%cl,%rsi	/* ~c in low bytes */
	or	%rsi,%rax	/* set some bits making low bytes invalid */
	jmp	2b

/* We are searching for 0xff, so can't use ~pattern for invalid value */
22:
	mov	%r8,%r10	/* 0x01 pattern */
	lea	(%r8,%r8),%rsi	/* 0x02 - bits gets set (above) */
	not	%r10		/* now 0xfe */
	sar	%cl,%r10	/* top bytes 0xff */
	and	%r10,%rax	/* clear lsb from unwanted low bytes */
	jmp	21b
END_STRONG(strchr)
@


1.7
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strchr.S,v 1.6 2015/05/29 07:21:09 uebayasi Exp $	*/
d35 1
a35 1
#include "SYS.h"
@


1.6
log
@Sprinkle END() in some straightforward *.S files that have ENTRY().  The
resulting *.o have "FUNC" symbols with size set.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d35 1
a35 1
#include <machine/asm.h>
d126 1
a126 1
END(strchr)
@


1.5
log
@Make index/rindex weak aliases of strchr/strrchr since they are not
part of the ISO C standard and have also been dropped from POSIX.
OK guenther@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strchr.S,v 1.4 2014/12/09 15:10:39 reyk Exp $	*/
d126 1
@


1.4
log
@Import new amd64 assembly versions of strchr/index, strrchr/rindex,
and strlen that provide a significantly faster performance than our
previous .c or .S implementations.  Based on NetBSD's code.

Tested with different amd64 CPUs.

ok deraadt@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 1
a37 1
STRONG_ALIAS(index, strchr)
@


1.3
log
@restructure libc/string + libc/arch/*/string coperation regarding
(potentially) MD versions (function dependent, not filename dependent)
split out memcpy/memmove/bcopy and strchr/index/strrchr/rindex
Bring back amd64 .S versions

And the final touch: switch all architectures temporarily to MI
memcpy.c, which contains syslog + abort for overlapping copies.  A nice
harsh undefined behaviour.  We will clean the entire userland of the
remaining issues in this catagory, then switch to the optimised memcpy
which skips the memmove check.

I tried to cut this change into pieces, but testing each sub-step on
every architecture is too time consuming and mindnumbing.
ok miod
@
text
@d1 30
a30 4
/*
 * Written by J.T. Conklin <jtc@@netbsd.org>.
 * Public domain.
 * Adapted for NetBSD/x86_64 by Frank van der Linden <fvdl@@wasabisystems.com>
d33 2
d38 8
d47 41
a87 11
	movq	%rdi,%rax
	movb	%sil,%cl
L1:
	movb	(%rax),%dl
	cmpb	%dl,%cl			/* found char? */
	je 	L2
	incq	%rax
	testb	%dl,%dl			/* null terminator? */
	jnz	L1
	xorq	%rax,%rax
L2:
d89 37
@


1.2
log
@One of these optimized stubs creates some incredibly subtle damage,
causing as(1) to create a wrong nop-sled for text segment aligns.
Revert, until it is found and fixed.
@
text
@d9 1
@


1.1
log
@Add amd64 assembler versions of some standard functions to libc.  The
code is already used in the kernel and the files are unmodified copies
from src/sys/lib/libkern/arch/amd64/.  Depending on the function, this
gives us some speedup in userland.

ok deraadt@@, no objections from miod@@
@
text
@@

