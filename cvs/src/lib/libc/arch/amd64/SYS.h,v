head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.22
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.20
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.16
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.18
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.14
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.20
date	2016.09.06.18.33.35;	author kettenis;	state Exp;
branches;
next	1.19;
commitid	rkhIBDJ7Hx7MhesK;

1.19
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.18;
commitid	d9R7VGw9CHTkwXE1;

1.18
date	2015.11.14.21.53.03;	author guenther;	state Exp;
branches;
next	1.17;
commitid	FaP6OlPRXoQ3iZYo;

1.17
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.16;
commitid	OrVNAJkzchWBNbO0;

1.16
date	2015.10.17.22.40.54;	author guenther;	state Exp;
branches;
next	1.15;
commitid	9UaZOrYkg4X7Mqsg;

1.15
date	2015.09.05.06.22.46;	author guenther;	state Exp;
branches;
next	1.14;
commitid	YcHx4KWjuOzN6Vj2;

1.14
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.13;
commitid	lTMF8Y3C9fQGd6jQ;

1.13
date	2015.08.26.01.54.09;	author guenther;	state Exp;
branches;
next	1.12;
commitid	ZWoe9OaBBikaM1w5;

1.12
date	2015.06.17.03.04.50;	author uebayasi;	state Exp;
branches;
next	1.11;
commitid	NVVFCvU50aPumxhj;

1.11
date	2015.06.12.09.26.05;	author uebayasi;	state Exp;
branches;
next	1.10;
commitid	vR6HZYujc320iMFK;

1.10
date	2015.04.07.01.27.06;	author guenther;	state Exp;
branches;
next	1.9;
commitid	oQvh7XA3Kql35r0J;

1.9
date	2014.06.04.20.13.49;	author matthew;	state Exp;
branches;
next	1.8;
commitid	CQgbVinZLjc6cr0k;

1.8
date	2012.08.22.17.19.34;	author pascal;	state Exp;
branches;
next	1.7;

1.7
date	2011.10.11.01.54.41;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.05.02.56.44;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.04.12.42.39;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.13.00.10.48;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.22.21.28.21;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.06.18.19.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.44.44;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Remove branch prediction hints from conditional branch instructions.  These
hints are not recognized by clang's builtin assembler and the opcode prefixes
they generate have been no-ops for all CPUs after the Pentium 4.

ok guenther@@
@
text
@/*	$OpenBSD: SYS.h,v 1.19 2016/05/07 19:05:21 guenther Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)SYS.h	5.5 (Berkeley) 5/7/91
 *	$NetBSD: SYS.h,v 1.5 2002/06/03 18:30:32 fvdl Exp $
 */

#include "DEFS.h"
#include <sys/syscall.h>

/* offsetof(struct tib, tib_errno) - offsetof(struct tib, __tib_tcb) */
#define	TCB_OFFSET_ERRNO	32

#define SYSTRAP(x)	movl $(SYS_ ## x),%eax; movq %rcx, %r10; syscall

#define SYSENTRY(x)							\
	SYSENTRY_HIDDEN(x);						\
	WEAK_ALIAS(x, _thread_sys_##x)
#define SYSENTRY_HIDDEN(x)						\
	ENTRY(_thread_sys_ ## x)

#define	SYSCALL_END_HIDDEN(x)						\
	END(_thread_sys_ ## x);						\
	_HIDDEN_FALIAS(x,_thread_sys_##x);				\
	END(_HIDDEN(x))
#define	SYSCALL_END(x)		SYSCALL_END_HIDDEN(x); END(x)


#define SET_ERRNO							\
	movl	%eax,%fs:(TCB_OFFSET_ERRNO);				\
	movq	$-1, %rax
#define HANDLE_ERRNO							\
	jnc	99f;							\
	SET_ERRNO;							\
	99:

#define _SYSCALL_NOERROR(x,y)						\
	SYSENTRY(x);							\
	SYSTRAP(y)
#define _SYSCALL_HIDDEN_NOERROR(x,y)					\
	SYSENTRY_HIDDEN(x);						\
	SYSTRAP(y)

#define SYSCALL_NOERROR(x)						\
	_SYSCALL_NOERROR(x,x)

#define SYSCALL_HIDDEN(x)						\
	_SYSCALL_HIDDEN_NOERROR(x,x);					\
	HANDLE_ERRNO
#define SYSCALL(x)							\
	_SYSCALL_NOERROR(x,x);						\
	HANDLE_ERRNO


/* return, handling errno for failed calls */
#define _RSYSCALL_RET							\
	jc	99f;							\
	ret;								\
	99: SET_ERRNO;							\
	ret

#define PSEUDO_NOERROR(x,y)						\
	_SYSCALL_NOERROR(x,y);						\
	ret;								\
	SYSCALL_END(x)

#define PSEUDO(x,y)							\
	_SYSCALL_NOERROR(x,y);						\
	_RSYSCALL_RET;							\
	SYSCALL_END(x)
#define PSEUDO_HIDDEN(x,y)						\
	_SYSCALL_HIDDEN_NOERROR(x,y);					\
	_RSYSCALL_RET;							\
	SYSCALL_END_HIDDEN(x)

#define RSYSCALL_NOERROR(x)						\
	PSEUDO_NOERROR(x,x)

#define RSYSCALL(x)							\
	PSEUDO(x,x)
#define RSYSCALL_HIDDEN(x)						\
	PSEUDO_HIDDEN(x,x)
@


1.19
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.18 2015/11/14 21:53:03 guenther Exp $	*/
d63 1
a63 1
	jnc,pt	99f;							\
d87 1
a87 1
	jc,pn	99f;							\
@


1.18
log
@Split the non-syscall ASM bits from SYS.h into DEFS.h and use that in the
non-syscall .S source

ok millert@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.17 2015/10/23 04:39:24 guenther Exp $	*/
d41 2
d58 8
a65 2
#define CERROR		_C_LABEL(__cerror)
#define _CERROR		_C_LABEL(___cerror)
a73 26
#ifdef __PIC__
#define _SYSCALL(x,y)							\
	.text; _ALIGN_TEXT;						\
	2: mov PIC_GOT(CERROR), %rcx;					\
	jmp *%rcx;							\
	_SYSCALL_NOERROR(x,y);						\
	jc 2b
#define _SYSCALL_HIDDEN(x,y)						\
	.text; _ALIGN_TEXT;						\
	2: mov PIC_GOT(CERROR), %rcx;					\
	jmp *%rcx;							\
	_SYSCALL_HIDDEN_NOERROR(x,y);					\
	jc 2b
#else
#define _SYSCALL(x,y)							\
	.text; _ALIGN_TEXT;						\
	2: jmp CERROR;							\
	_SYSCALL_NOERROR(x,y);						\
	jc 2b
#define _SYSCALL_HIDDEN(x,y)						\
	.text; _ALIGN_TEXT;						\
	2: jmp CERROR;							\
	_SYSCALL_HIDDEN_NOERROR(x,y);					\
	jc 2b
#endif

d78 2
a79 1
	_SYSCALL_HIDDEN(x,x)
d81 10
a90 1
	_SYSCALL(x,x)
d98 2
a99 2
	_SYSCALL(x,y);							\
	ret;								\
d102 2
a103 2
	_SYSCALL_HIDDEN(x,y);						\
	ret;								\
a112 2

	.globl	CERROR
@


1.17
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.16 2015/10/17 22:40:54 guenther Exp $	*/
d38 1
a38 1
#include <machine/asm.h>
a39 22

/*
 * We define a hidden alias with the prefix "_libc_" for each global symbol
 * that may be used internally.  By referencing _libc_x instead of x, other
 * parts of libc prevent overriding by the application and avoid unnecessary
 * relocations.
 */
#define _HIDDEN(x)		_libc_##x
#define _HIDDEN_ALIAS(x,y)			\
	STRONG_ALIAS(_HIDDEN(x),y);		\
	.hidden _HIDDEN(x)
#define _HIDDEN_FALIAS(x,y)			\
	_HIDDEN_ALIAS(x,y);			\
	.type _HIDDEN(x),@@function

/*
 * For functions implemented in ASM that aren't syscalls.
 *   END_STRONG(x)	Like DEF_STRONG() in C; for standard/reserved C names
 *   END_WEAK(x)	Like DEF_WEAK() in C; for non-ISO C names
 */
#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
#define	END_WEAK(x)	END_STRONG(x); .weak x
@


1.16
log
@Rename SYSEXIT() to SYSCALL_END() for consistency with most other archs.
No change in resulting object files

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.15 2015/09/05 06:22:46 guenther Exp $	*/
d117 2
@


1.15
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.14 2015/08/31 02:53:56 guenther Exp $	*/
d72 1
a72 1
#define	SYSEXIT_HIDDEN(x)						\
d76 1
a76 1
#define	SYSEXIT(x)		SYSEXIT_HIDDEN(x); END(x)
a83 2
#define _SYSCALL_NOERROR_END(x,y)					\
	SYSEXIT(x)
a86 2
#define _SYSCALL_HIDDEN_NOERROR_END(x,y)				\
	SYSEXIT_HIDDEN(x)
a113 5
#define _SYSCALL_END(x,y)						\
	_SYSCALL_NOERROR_END(x,y)
#define _SYSCALL_HIDDEN_END(x,y)					\
	_SYSCALL_HIDDEN_NOERROR_END(x,y)

a118 2
#define SYSCALL_END(x)							\
	_SYSCALL_END(x,x)
d123 1
a123 1
	_SYSCALL_NOERROR_END(x,y)
d128 1
a128 1
	_SYSCALL_END(x,y)
d132 1
a132 1
	_SYSCALL_HIDDEN_END(x,y)
@


1.14
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.13 2015/08/26 01:54:09 guenther Exp $	*/
d70 1
a70 2
	ENTRY(_thread_sys_ ## x);					\
	_HIDDEN_FALIAS(x,_thread_sys_##x)
d72 4
a75 1
#define	SYSEXIT_HIDDEN(x)	END(_thread_sys_ ## x)
@


1.13
log
@Hide many (194!) symbols that nothing should be using.
Delete exect(2); it wasn't portable across archs and nothing used it.

ports test build by naddy@@
ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.12 2015/06/17 03:04:50 uebayasi Exp $	*/
d41 22
d68 1
a68 2
	.weak _C_LABEL(x);						\
	_C_LABEL(x) = _C_LABEL(_thread_sys_ ## x)
d70 2
a71 1
	ENTRY(_thread_sys_ ## x)					\
d74 1
a74 1
#define	SYSEXIT(x)		SYSEXIT_HIDDEN(x); END(x)    
@


1.12
log
@Set FUNC symbol sizes of auto-generated and hand-written syscall wrappers.

Original diff from guenther@@, adjusted by me.

OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a55 1
#define CURBRK		_C_LABEL(__curbrk)
@


1.11
log
@Reuse SYSENTRY_HIDDEN() in SYSENTRY(); no functional changes.
@
text
@d45 1
a45 1
	SYSENTRY_HIDDEN(x);					\
d51 3
d61 2
d66 2
d95 5
d105 2
d110 2
a111 1
	ret
d115 2
a116 1
	ret
d119 2
a120 1
	ret
@


1.10
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.9 2014/06/04 20:13:49 matthew Exp $	*/
d45 1
a45 1
	ENTRY(_thread_sys_ ## x);					\
@


1.9
log
@Apply "unifdef -D__STDC__" to libc/arch/*/SYS.h

A while back, pascal@@ converted our system call stubs from using "cpp
| as" to "cc -x assembler-with-cpp", so there's no need to stay
compatible with ancient preprocessor semantics.

ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.8 2012/08/22 17:19:34 pascal Exp $	*/
d43 1
d48 2
d58 3
d69 6
d81 5
d101 3
d110 2
a111 4

#define	WSYSCALL(weak,strong)						\
	WEAK_ALIAS(weak,strong);					\
	PSEUDO(strong,weak)
@


1.8
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.7 2011/10/11 01:54:41 guenther Exp $	*/
a40 1
#ifdef __STDC__
a46 9
#else

#define SYSTRAP(x)	movl $(SYS_/**/x),%eax; movq %rcx, %r10; syscall
#define SYSENTRY(x)							\
	ENTRY(_thread_sys_/**/x);					\
	.weak _C_LABEL(x);						\
	_C_LABEL(x) = _C_LABEL(_thread_sys_/**/x)

#endif
@


1.7
log
@Change to syscall is done, so delete an XXX comment
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.6 2011/09/05 02:56:44 guenther Exp $	*/
d66 1
a66 1
#ifdef PIC
@


1.6
log
@Switch sigreturn() to the normal syscall entry instead of int$80.
This was done for the sigreturn call in sigcode before 5.0.

ok deraadt@@ for post-5.0
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.5 2011/04/04 12:42:39 guenther Exp $	*/
a35 4
 */

/*
 * XXXfvdl change to use syscall/sysret.
@


1.5
log
@Move __cerror to ___cerror with a weak alias so that rthreads can override it.
On mips64, also correct the name called from plain cerror to __cerror.

"looks correct" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.4 2005/12/13 00:10:48 jsg Exp $	*/
a47 1
#define OSYSTRAP(x)	movl $(SYS_ ## x),%eax; int  $0x80
a54 1
#define OSYSTRAP(x)	movl $(SYS_/**/x),%eax; int  $0x80
a69 4
#define _OSYSCALL_NOERROR(x,y)						\
	SYSENTRY(x);							\
	OSYSTRAP(y)

a76 6
#define _OSYSCALL(x,y)							\
	.text; _ALIGN_TEXT;						\
	2: mov PIC_GOT(CERROR), %rcx;					\
	jmp *%rcx;							\
	_OSYSCALL_NOERROR(x,y);						\
	jc 2b
a82 5
#define _OSYSCALL(x,y)							\
	.text; _ALIGN_TEXT;						\
	2: jmp CERROR;							\
	_OSYSCALL_NOERROR(x,y);						\
	jc 2b
a87 3
#define OSYSCALL_NOERROR(x)						\
	_OSYSCALL_NOERROR(x,x)

a89 3

#define OSYSCALL(x)							\
	_OSYSCALL(x,x)
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.
Checked by ian@@ and deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.3 2004/02/22 21:28:21 miod Exp $	*/
d65 1
@


1.3
log
@Define OSYSCALL* macros, as their SYSCALL* counterparts, but using the
int 0x80 mechanism; and use OSYSCALL for sigreturn() as done in the
sigcode.

Naming borrowed from NetBSD.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.2 2004/02/06 18:19:19 deraadt Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@make old & new SYSENTRY macros
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.1 2004/01/28 01:44:44 mickey Exp $	*/
d52 1
d60 1
d75 4
d86 6
d98 5
d108 3
d113 3
@


1.1
log
@things for amd64; from art@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 1
d52 4
d57 1
d59 5
a67 6

#define SYSENTRY(x)							\
	ENTRY(_thread_sys_ ## x);					\
	.weak _C_LABEL(x);						\
	_C_LABEL(x) = _C_LABEL(_thread_sys_ ## x)

@

