head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.5;
commitid	d9R7VGw9CHTkwXE1;

1.5
date	2015.06.01.09.27.53;	author uebayasi;	state Exp;
branches;
next	1.4;
commitid	XvC0FeffSPhwCmHq;

1.4
date	2015.04.21.01.24.28;	author guenther;	state Exp;
branches;
next	1.3;
commitid	sISelrC1Nq7Y1tOy;

1.3
date	2012.08.22.17.19.34;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.21.00.56.59;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.22.00.44.55;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@/*	$OpenBSD: tfork_thread.S,v 1.5 2015/06/01 09:27:53 uebayasi Exp $ */
/*-
 * Copyright (c) 2000 Peter Wemm <peter@@FreeBSD.org>
 * Copyright (c) 2003 Alan L. Cox <alc@@cs.rice.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <machine/asm.h>
#if 0
__FBSDID("$FreeBSD: /repoman/r/ncvs/src/lib/libc/amd64/gen/rfork_thread.S,v 1.1 2003/10/13 20:32:33 alc Exp $");
#endif

/*
 * With thanks to John Dyson for the original version of this.
 */

#include "SYS.h"

/*
 *                %rdi   %rsi   %rdx       %rcx
 * __tfork_thread(param, psize, start_fnc, start_arg);
 *
 * param:		Argument to pass to the actual kernel call.
 * psize:		Other argument to pass to the actual kernel call.
 * start_fnc:		Address of thread function to call in child.
 * start_arg:		Argument to pass to the thread function in child.
 */

ENTRY(__tfork_thread)
	movq	%rdx, %r8
	movq	%rcx, %r9

	/*
	 * Prepare and execute the thread creation syscall
	 */
	movl	$SYS___tfork, %eax
	syscall
	jb 	2f

	/*
	 * Check to see if we are in the parent or child
	 */
	cmpl	$0, %eax
	jz	1f
	ret

	/*
	 * If we are in the child (new thread), then
	 * set-up the call to the internal subroutine.  If it
	 * returns, then call __threxit.
	 */
1:
	movq	%r9, %rdi
	call	*%r8

	/*
	 * Thread exit system call
	 */
	movl	$SYS___threxit, %eax
	xorl	%edi, %edi
	syscall

	/*
	 * Branch here if the thread creation fails:
	 */
2:
	SET_ERRNO
	ret
END(__tfork_thread)
@


1.5
log
@Put END() matching ENTRY().
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d88 2
a89 6
#ifdef __PIC__
	movq	PIC_GOT(CERROR), %rcx
	jmp	*%rcx
#else
	jmp	CERROR
#endif
@


1.4
log
@Eliminate the last uses of *fork's second syscall return register; the pid
is zero in the child

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tfork_thread.S,v 1.3 2012/08/22 17:19:34 pascal Exp $ */
d94 1
@


1.3
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tfork_thread.S,v 1.2 2012/06/21 00:56:59 guenther Exp $ */
d64 2
a65 2
	cmpl	$0, %edx
	jnz	1f
@


1.2
log
@__tfork() needs to set the stack address of the new thread in the kernel,
so that it can't get a signal while still running on the parent thread's
stack.  Also, pass in sizeof(struct __tfork) to provide forward compat
when more members are added.  This is an ABI change, so switch syscall
numbers and bump lib majors this time.

ok deraadt@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tfork_thread.S,v 1.1 2012/03/22 00:44:55 guenther Exp $ */
d88 1
a88 1
#ifdef PIC
@


1.1
log
@Move __tfork_thread() from rthreads (libpthread) to libc so that
it can be used for not-strictly-threading purposes

ok matthew@@ kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.6 2012/01/17 02:34:18 guenther Exp $ */
d41 2
a42 2
 *                %rdi   %rsi        %rdx       %rcx
 * __tfork_thread(param, stack_addr, start_fnc, start_arg);
d45 1
a45 1
 * stack_addr:		Top of stack for thread.
a73 1
	movq	%rsi, %rsp
@

