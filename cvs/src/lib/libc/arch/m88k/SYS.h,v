head	1.24;
access;
symbols
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.6
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.12.0.20
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.18
	OPENBSD_5_0:1.12.0.16
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.14
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.12
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.8
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.10
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.6
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.11.0.14
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.12
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.10
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.8
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.24
date	2016.09.22.18.19.59;	author guenther;	state Exp;
branches;
next	1.23;
commitid	aBQHgOaj5C7d9OJh;

1.23
date	2016.06.16.03.21.09;	author guenther;	state Exp;
branches;
next	1.22;
commitid	b4PxhlPN2nj466up;

1.22
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.21;
commitid	OrVNAJkzchWBNbO0;

1.21
date	2015.09.10.13.29.09;	author guenther;	state Exp;
branches;
next	1.20;
commitid	pYkLasgGFEsgLTME;

1.20
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.19;
commitid	lTMF8Y3C9fQGd6jQ;

1.19
date	2015.04.07.01.27.06;	author guenther;	state Exp;
branches;
next	1.18;
commitid	oQvh7XA3Kql35r0J;

1.18
date	2014.06.04.20.13.49;	author matthew;	state Exp;
branches;
next	1.17;
commitid	CQgbVinZLjc6cr0k;

1.17
date	2013.04.11.19.15.21;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.23.18.59.32;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2013.01.20.23.00.22;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2013.01.11.21.21.48;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2013.01.05.11.20.55;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2007.10.24.20.19.09;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.28.08.48.15;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.20.18.31;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.16.20.48.41;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.07.21.59.21;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.02.21.40.44;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.02.20.25.29;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.19.22.12.36;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.20.20.52.09;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.01.17.31.20;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	98.12.15.07.10.29;	author smurph;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Simplify __cerror now that %r27 is always the TCB pointer.
Don't need a PLT relocation for __cerror.
Move macros for doing internal aliases in ASM from SYS.h to DEFS.h

__cerror tweaks by Miod Vallat, testing by aoyama@@
@
text
@/*	$OpenBSD: SYS.h,v 1.23 2016/06/16 03:21:09 guenther Exp $*/
/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)SYS.h	5.5 (Berkeley) 5/7/91
 */

#include <sys/syscall.h>
#include "DEFS.h"


#define	__CONCAT(p,x)		p##x
#define	__ENTRY(p,x)		ENTRY(__CONCAT(p,x))
#define	__END(p,x)		END(__CONCAT(p,x)); \
				_HIDDEN_ALIAS(x,__CONCAT(p,x)); \
				END(_HIDDEN(x))
#define	__SYSCALLNAME(p,x)	__CONCAT(p,x)
#define	__ALIAS(prefix,name)	WEAK_ALIAS(name,__CONCAT(prefix,name))

#ifdef __PIC__
#define	PIC_SAVE(reg)		or reg, %r25, %r0
#define	PIC_RESTORE(reg)	or %r25, reg, %r0
#define	PIC_SETUP							\
	or	%r11, %r0,  %r1;					\
	or.u	%r25, %r0,  %hi16(.Lpic#abdiff);			\
	bsr.n	.Lpic;							\
	 or	%r25, %r25, %lo16(.Lpic#abdiff);			\
.Lpic:	add	%r25, %r25, %r1;					\
	or	%r1,  %r0,  %r11
#if __PIC__ > 1
#define	PIC_LOAD(reg,sym)						\
	or.u	%r11, %r0,  %hi16(__CONCAT(sym,#got_rel));		\
	or	%r11, %r11, %lo16(__CONCAT(sym,#got_rel));		\
	ld	reg,  %r25, %r11
#define	PIC_STORE(reg,sym)						\
	or.u	%r11, %r0,  %hi16(__CONCAT(sym,#got_rel));		\
	or	%r11, %r11, %lo16(__CONCAT(sym,#got_rel));		\
	st	reg,  %r25, %r11
#else		/* -fpic */
#define	PIC_LOAD(reg,sym)						\
	ld	%r11, %r25, __CONCAT(sym,#got_rel);			\
	ld	reg,  %r11, %r0
#define	PIC_STORE(reg,sym)						\
	ld	%r11, %r25, __CONCAT(sym,#got_rel);			\
	st	reg,  %r11, %r0
#endif
#endif
#define	CERROR	__cerror

#define	__DO_SYSCALL(x)							\
	or %r13, %r0, __SYSCALLNAME(SYS_,x);				\
	tb0 0, %r0, 450

#define	__SYSCALL__NOERROR(p,x,y)					\
	__ENTRY(p,x);							\
	__ALIAS(p,x);							\
	__DO_SYSCALL(y)
#define	__SYSCALL_HIDDEN__NOERROR(p,x,y)				\
	__ENTRY(p,x);							\
	__DO_SYSCALL(y)

#define	__SYSCALL(p,x,y)						\
	__SYSCALL__NOERROR(p,x,y);					\
	br CERROR
#define	__SYSCALL_HIDDEN(p,x,y)						\
	__SYSCALL_HIDDEN__NOERROR(p,x,y);				\
	br CERROR

#define	__PSEUDO_NOERROR(p,x,y)						\
	__SYSCALL__NOERROR(p,x,y);					\
	or %r0, %r0, %r0;						\
	jmp %r1;							\
	__END(p,x); END(x)

#define	__PSEUDO(p,x,y)							\
	__SYSCALL(p,x,y);						\
	jmp %r1;							\
	__END(p,x); END(x)
#define	__PSEUDO_HIDDEN(p,x,y)						\
	__SYSCALL_HIDDEN(p,x,y);					\
	jmp %r1;							\
	__END(p,x)

/*
 * System calls entry points are really named _thread_sys_{syscall},
 * and weakly aliased to the name {syscall}. This allows the thread
 * library to replace system calls at link time.
 */
#define	SYSCALL(x)		__SYSCALL(_thread_sys_,x,x)
#define	RSYSCALL(x)		__PSEUDO(_thread_sys_,x,x)
#define	RSYSCALL_HIDDEN(x)	__PSEUDO_HIDDEN(_thread_sys_,x,x)
#define	PSEUDO(x,y)		__PSEUDO(_thread_sys_,x,y)
#define	PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
#define	SYSENTRY_HIDDEN(x)	__ENTRY(_thread_sys_,x)
#define	SYSENTRY(x)		SYSENTRY_HIDDEN(x);		\
				__ALIAS(_thread_sys_,x)
#define	SYSCALL_END_HIDDEN(x)	__END(_thread_sys_,x)
#define	SYSCALL_END(x)		SYSCALL_END_HIDDEN(x); END(x)

#define	ASMSTR		.asciz

	.globl	__cerror
@


1.23
log
@PSEUDO_NOERROR() is used for syscalls that return now, so need to put
a nop in the slot skipped by the kernel on success
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.22 2015/10/23 04:39:24 guenther Exp $*/
d38 1
a38 23
#include <machine/asm.h>

/*
 * We define a hidden alias with the prefix "_libc_" for each global symbol
 * that may be used internally.  By referencing _libc_x instead of x, other
 * parts of libc prevent overriding by the application and avoid unnecessary
 * relocations.
 */
#define _HIDDEN(x)		_libc_##x
#define _HIDDEN_ALIAS(x,y)			\
	STRONG_ALIAS(_HIDDEN(x),y);		\
	.hidden _HIDDEN(x)
#define _HIDDEN_FALIAS(x,y)			\
	_HIDDEN_ALIAS(x,y);			\
	.type _HIDDEN(x),@@function

/*
 * For functions implemented in ASM that aren't syscalls.
 *   END_STRONG(x)	Like DEF_STRONG() in C; for standard/reserved C names
 *   END_WEAK(x)	Like DEF_WEAK() in C; for non-ISO C names
 */
#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
#define	END_WEAK(x)	END_STRONG(x); .weak x
a49 1
#define	CERROR	__cerror#plt
d76 1
a76 1
#else
a77 1
#endif
@


1.22
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.21 2015/09/10 13:29:09 guenther Exp $*/
d124 1
@


1.21
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

alpha, arm, m88k, sh, sparc, and vax assistance miod@@
hppa assistance kettenis@@
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.20 2015/08/31 02:53:56 guenther Exp $*/
d146 2
a147 1
#define	SYSENTRY(x)		__ENTRY(_thread_sys_,x);		\
d149 2
a150 1
#define	SYSCALL_END(x)		__END(_thread_sys_,x); END(x)
@


1.20
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.19 2015/04/07 01:27:06 guenther Exp $*/
d65 3
a67 1
#define	__END(p,x)		END(__CONCAT(p,x))
d125 1
a125 1
	__END(p,x)
d130 1
a130 1
	__END(p,x)
d148 1
@


1.19
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.18 2014/06/04 20:13:49 matthew Exp $*/
d39 23
@


1.18
log
@Apply "unifdef -D__STDC__" to libc/arch/*/SYS.h

A while back, pascal@@ converted our system call stubs from using "cpp
| as" to "cc -x assembler-with-cpp", so there's no need to stay
compatible with ancient preprocessor semantics.

ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.17 2013/04/11 19:15:21 miod Exp $*/
d86 3
d93 3
d106 4
d118 1
@


1.17
log
@Fix obviously stupid bug in the PIC_{LOAD,STORE} macros when compiling with
-fPIC. Harmless since we build libc -fpic so far.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.16 2013/01/23 18:59:32 miod Exp $*/
a39 1
#ifdef __STDC__
a40 3
#else
#define	__CONCAT(p,x)		p/**/x
#endif
@


1.16
log
@The kernel sources mention that the system call entry point is trap #450; the
fact that #128 and #129 may also be used for this purpose was never documented,
so there is no reason to have libc use #128. Switch to #450 for consistency.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.15 2013/01/20 23:00:22 miod Exp $*/
d64 1
a64 1
	ld	%r11, %r11, %lo16(__CONCAT(sym,#got_rel));		\
d68 1
a68 1
	ld	%r11, %r11, %lo16(__CONCAT(sym,#got_rel));		\
@


1.15
log
@Fix PIC_LOAD and PIC_STORE macros to really access the variable, instead of
the GOT pointer. Oops.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.14 2013/01/11 21:21:48 miod Exp $*/
d84 1
a84 1
	tb0 0, %r0, 128
@


1.14
log
@Add a bunch of macros to help writing PIC code for libc .S routines. Handles
both -fpic and -fPIC.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.13 2013/01/05 11:20:55 miod Exp $*/
d64 1
a64 1
	or	%r11, %r11, %lo16(__CONCAT(sym,#got_rel));		\
d68 1
a68 1
	or	%r11, %r11, %lo16(__CONCAT(sym,#got_rel));		\
d72 2
a73 1
	ld	reg,  %r25, __CONCAT(sym,#got_rel)
d75 2
a76 1
	st	reg,  %r25, __CONCAT(sym,#got_rel)
@


1.13
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.12 2007/10/24 20:19:09 miod Exp $*/
d41 1
a41 3
#define	__ENTRY(p,x)	ENTRY(p##x)
#define	__SYSCALLNAME(p,x)	p##x
#define	__ALIAS(prefix,name)	WEAK_ALIAS(name,prefix##name)
d43 35
a77 3
#define	__ENTRY(p,x)	ENTRY(p/**/x)
#define	__SYSCALLNAME(p,x)	p/**/x
#define	__ALIAS(prefix,name)	WEAK_ALIAS(name,prefix/**/name)
d91 1
a91 1
	br __cerror
d95 2
a96 1
	jmp %r1
d100 2
a101 1
	jmp %r1
@


1.12
log
@Change the syscall invocation sequences to no longer fetch the last few
arguments from the stack, since the kernel will now copyin() them when
necessary.

This makes all system calls (but mmap()) slightly faster.

WARNING! After this commit, your binaries must run against a kernel
featuring m88k/m88k/trap.c r1.34 or better - i.e. a 4.1 or later kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.11 2004/07/28 08:48:15 miod Exp $*/
d51 2
a52 2
	or r13,r0,__SYSCALLNAME(SYS_,x);				\
	tb0 0, r0, 128
d65 1
a65 1
	jmp r1
d69 1
a69 1
	jmp r1
@


1.11
log
@Update stack frame processing after ABI change.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.10 2003/06/02 20:18:31 millert Exp $*/
a50 3
	ld r10,r31,0;							\
	ld r11,r31,4;							\
	ld r12,r31,8;							\
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.9 2003/01/16 20:48:41 miod Exp $*/
d51 3
a53 3
	ld r10,r31,32;							\
	ld r11,r31,36;							\
	ld r12,r31,40;							\
@


1.9
log
@Alignment requirements are satisfied in ENTRY(), no need to add more here.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.8 2003/01/07 21:59:21 miod Exp $*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@One more pass to get thinks correct wrt weak symbols and syscalls.
@
text
@d1 1
a1 1
/*	$OpenBSD: SYS.h,v 1.7 2003/01/02 21:40:44 miod Exp $*/
a61 1
	align 8;							\
@


1.7
log
@Adapt to recent changes in libc/libc_r wrt weak symbols, so that programs
can link against libc without unresolved symbols again.

Anyone who correctly guessed that my m88k hard drive has been recovered,
wins a strawberry lollipop.
@
text
@d1 1
a1 1
/* *	$OpenBSD: SYS.h,v 1.6 2003/01/02 20:25:29 miod Exp $*/
d46 1
a46 1
#define	__DO_SYSCALL(x)	or r13,r0,SYS_##x
d50 1
a50 1
#define	__DO_SYSCALL(x)	or r13,r0,SYS_/**/x
d54 1
a54 3
#define	__SYSCALL(p,x,y)						\
	align 8;							\
	__ENTRY(p,x);							\
d58 11
a68 2
	__DO_SYSCALL(y);						\
	tb0 0, r0, 128;							\
d71 2
a72 2
#define	__PSEUDO(p,x,y)							\
	__SYSCALL(p,x,y);						\
d75 1
a75 2
#if 0
#define	__PSEUDO_NOERROR(p,x,y)						\
a77 10
#else
/* XXX is this correct??? */
#define	__PSEUDO_NOERROR(p,x,y)						\
	align 8;							\
	__ENTRY(p,x);							\
	__DO_SYSCALL(y);						\
	tb0 0, r0, 128;							\
	or r0, r0, r0;							\
	jmp r1
#endif
d80 3
a82 2
 * For the thread_safe versions, we prepend _thread_sys_ to the function
 * name so that the 'C' wrapper can go around the real name.
d84 6
a89 11

#define	SYSCALL(x)		__ALIAS(_thread_sys_,x);		\
				__SYSCALL(_thread_sys_,x,x)
#define	RSYSCALL(x)		__ALIAS(_thread_sys_,x);		\
				__PSEUDO(_thread_sys_,x,x)
#define	PSEUDO(x,y)		__ALIAS(_thread_sys_,x);		\
				__PSEUDO(_thread_sys_,x,y)
#define	PSEUDO_NOERROR(x,y)	__ALIAS(_thread_sys_,x);		\
				__PSEUDO_NOERROR(_thread_sys_,x,y)
#define	SYSENTRY(x)		__ALIAS(_thread_sys_,x);		\
				__ENTRY(_thread_sys_,x)
@


1.6
log
@Rename cerror to __cerror and curbrk to __curbrk, to avoid namespace
pollution. Conforming to art@@'s evil plans.
@
text
@d1 1
a1 1
/* *	$OpenBSD: SYS.h,v 1.5 2002/02/19 22:12:36 millert Exp $*/
d45 8
d54 44
a97 36
#define	_SYSCALL(x,y)	align 8; \
			ENTRY(x); \
			ld r10,r31,32; \
			ld r11,r31,36; \
			ld r12,r31,40; \
			or r13,r0, SYS_ ## y; \
			tb0 0, r0, 128; \
			br __cerror
#define	SYSCALL(x)	_SYSCALL(x,x)
#define	RSYSCALL(x)	SYSCALL(x) ;\
			jmp r1
#define	PSEUDO(x,y)	_SYSCALL(x,y); \
			jmp r1
#define	PSEUDO_NOERROR(x,y)	ENTRY(x); ;\
			or r13,r0, SYS_ ## y; \
			tb0 0,r0,128; or r0,r0,r0;jmp r1

#else /* !__STDC__ */

#define	_SYSCALL(x,y)	align 8; \
			ENTRY(x); \
			ld r10,r31,32; \
			ld r11,r31,36; \
			ld r12,r31,40; \
			or r13,r0, SYS_/**/y; \
			tb0 0, r0, 128; \
			br __cerror
#define	SYSCALL(x)	_SYSCALL(x,x)
#define	RSYSCALL(x)	SYSCALL(x); \
			jmp r1
#define	PSEUDO(x,y)	_SYSCALL(x,y); \
			jmp r1
#define	PSEUDO_NOERROR(x,y)	ENTRY(x); \
			or r13,r0, SYS_/**/y; \
			tb0 0,r0,128; or r0,r0,r0; jmp r1
#endif /* !__STDC__ */
@


1.5
log
@We need to keep K&R compat macros for some ports where the assemnbler is
still using -traditional-cpp.
@
text
@d1 1
a1 1
/* *	$OpenBSD: SYS.h,v 1.4 2002/02/19 19:39:36 millert Exp $*/
d53 1
a53 1
			br cerror
d72 1
a72 1
			br cerror
d85 1
a85 1
	.globl	cerror
@


1.4
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/* *	$OpenBSD: SYS.h,v 1.3 2001/09/20 20:52:09 millert Exp $*/
d44 2
d62 20
@


1.3
log
@Add PSEUDO_NOERROR similar to that used by NetBSD.
Some ports were setting errno in PSEUDO and some were not.  Now errno
is set for all in PSEUDO and PSEUDO_NOERROR is provided for the
non-errno case (only used by _exit).

Needs testing on vax and m88k.
XXX - hppa and powerpc still lack a real PSEUDO_NOERROR implementation.
Currently PSEUDO_NOERROR and PSEUDO are the same (so builds don't
break on those platforms).
@
text
@d1 1
a1 1
/* *	$OpenBSD: SYS.h,v 1.2 2000/03/01 17:31:20 todd Exp $*/
a43 2
#ifdef __STDC__

a59 20

#else /* !__STDC__ */

#define	_SYSCALL(x,y)	align 8; \
			ENTRY(x); \
			ld r10,r31,32; \
			ld r11,r31,36; \
			ld r12,r31,40; \
			or r13,r0, SYS_/**/y; \
			tb0 0, r0, 128; \
			br cerror
#define	SYSCALL(x)	_SYSCALL(x,x)
#define	RSYSCALL(x)	SYSCALL(x); \
			jmp r1
#define	PSEUDO(x,y)	_SYSCALL(x,y); \
			jmp r1
#define	PSEUDO_NOERROR(x,y)	ENTRY(x); \
			or r13,r0, SYS_/**/y; \
			tb0 0,r0,128; or r0,r0,r0; jmp r1
#endif /* !__STDC__ */
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/* *	$OpenBSD: SYS.h,v 1.1 1998/12/15 07:10:29 smurph Exp $*/
d46 1
a46 1
#define	SYSCALL(x)	align 8; \
d51 1
a51 1
			or r13,r0, SYS_ ## x; \
d54 1
d57 3
a59 1
#define	PSEUDO(x,y)	ENTRY(x); ;\
d65 1
a65 1
#define	SYSCALL(x)	align 8; \
d70 1
a70 1
			or r13,r0, SYS_/**/x; \
d73 1
d76 3
a78 1
#define	PSEUDO(x,y)	ENTRY(x); \
@


1.1
log
@correted sigsetjmp, setjump.  Fixed MACHINE_ARCH vs. MACHINE stuff.
@
text
@d1 1
a38 1
 *	$Id: SYS.h,v 1.1 1997/03/25 17:06:50 rahnds Exp $
@

