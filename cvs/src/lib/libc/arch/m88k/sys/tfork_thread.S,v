head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.22
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.20
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.16
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.12
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2013.01.23.18.59.32;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.11.21.23.24;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.05.11.20.55;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.21.00.56.59;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.22.00.44.55;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.5
log
@The kernel sources mention that the system call entry point is trap #450; the
fact that #128 and #129 may also be used for this purpose was never documented,
so there is no reason to have libc use #128. Switch to #450 for consistency.
@
text
@/*	$OpenBSD: tfork_thread.S,v 1.4 2013/01/11 21:23:24 miod Exp $	*/

/*
 * Copyright (c) 2005, Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SYS.h"

/*
 * int __tfork_thread(const struct __tfork *param, size_t psize, void (*func)(void *), void *arg);
 */
ENTRY(__tfork_thread)
	or	%r13, %r0,  __SYSCALLNAME(SYS_,__tfork)
	tb0	0,    %r0,  450	/* corrupts r2 and r3 in the child */
	br	CERROR

	bcnd	eq0,  %r2,  1f

	/*
	 * In parent process: just return.
	 */
	jmp	%r1

1:
	/*
	 * In child process: invoke function, then exit.
	 */
	jsr.n	%r4		/* func */
	 or	%r2,  %r5,  %r0	/* arg */

	or	%r13, %r0,  __SYSCALLNAME(SYS_,__threxit)
	tb0	0,    %r0,  450
END(__tfork_thread)
@


1.4
log
@Add END() directives to the various functions.
Make the code PIC-aware when necessary (i.e. invoke other functions through
the PLT, and access global data through the GOT). No change for non-PIC
compilation.
@
text
@d1 1
a1 1
/*	$OpenBSD: tfork_thread.S,v 1.3 2013/01/05 11:20:55 miod Exp $	*/
d35 1
a35 1
	tb0	0,    %r0,  128	/* corrupts r2 and r3 in the child */
d53 1
a53 1
	tb0	0,    %r0,  128
@


1.3
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: tfork_thread.S,v 1.2 2012/06/21 00:56:59 guenther Exp $	*/
d36 1
a36 1
	br	__cerror
d54 1
@


1.2
log
@__tfork() needs to set the stack address of the new thread in the kernel,
so that it can't get a signal while still running on the parent thread's
stack.  Also, pass in sizeof(struct __tfork) to provide forward compat
when more members are added.  This is an ABI change, so switch syscall
numbers and bump lib majors this time.

ok deraadt@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tfork_thread.S,v 1.1 2012/03/22 00:44:55 guenther Exp $	*/
d34 2
a35 2
	or	r13, r0,  __SYSCALLNAME(SYS_,__tfork)
	tb0	0,   r0,  128	/* corrupts r2 and r3 in the child */
d38 1
a38 1
	bcnd	eq0, r2,  1f
d43 1
a43 1
	jmp	r1
d49 2
a50 2
	jsr.n	r4		/* func */
	 or	r2,  r5,  r0	/* arg */
d52 2
a53 2
	or	r13, r0,  __SYSCALLNAME(SYS_,__threxit)
	tb0	0,   r0,  128
@


1.1
log
@Move __tfork_thread() from rthreads (libpthread) to libc so that
it can be used for not-strictly-threading purposes

ok matthew@@ kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.3 2012/01/17 02:34:18 guenther Exp $	*/
d31 1
a31 1
 * int __tfork_thread(const struct __tfork *param, void *stack, void (*func)(void *), void *arg);
a33 1
	or	r6,  r3,  r0	/* save stack */
d47 1
a47 1
	 * In child process: switch stack, invoke function, then exit.
a48 1
	or	r31, r6,  r0	/* stack */
@

