head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.2
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.12
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.14
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.6
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.10
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.8.0.30
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.28
	OPENBSD_5_0:1.8.0.26
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.24
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.22
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.18
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.20
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.16
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.14
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.12
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.8
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.14
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.12
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.10
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@# @;


1.14
date	2016.09.22.18.23.58;	author guenther;	state Exp;
branches;
next	1.13;
commitid	HiqwGW4WSejUMvWg;

1.13
date	2016.05.23.00.18.57;	author guenther;	state Exp;
branches;
next	1.12;
commitid	NDWaRB3omHTr2Q6W;

1.12
date	2013.01.20.17.59.52;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2013.01.11.21.23.24;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2013.01.05.11.20.55;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.12.17.14.39;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.07.16.40.14;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.28.08.49.03;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.01.07.41.35;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.07.22.01.29;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.04.00.13.11;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.02.15.14.07;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.18.05.03.54;	author smurph;	state Exp;
branches;
next	1.1;

1.1
date	98.12.15.07.10.29;	author smurph;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Switch from calling obsolete sig{block,setmask} to directly using the
sigprocmask syscall.
abort() can't return, so simplify the call, and use the internal name to
avoid the PLT.

no-return observation by Miod Vallat, testing by aoyama@@
@
text
@/* $OpenBSD: _setjmp.S,v 1.13 2016/05/23 00:18:57 guenther Exp $ */
/*-
 * Copyright (c) 2002 Steve Murphree, Jr.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Steve Murphree, Jr.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "SYS.h"

/*
 * C library -- _setjmp, _longjmp
 *
 *	_longjmp(a,v)
 * will generate a "return(v)" from the last call to
 *	_setjmp(a)
 * by restoring registers from the stack.  The previous signal state is
 * neither saved nor restored.
 *
 * For m88k, we define our jmp_buf length to be the size of 21 (_JBLEN) longs.
 * The buffer layout is as follows:
 *
 * jmp_buf[0]		return address
 * jmp_buf[1]		unused
 * jmp_buf[2 to 19]	r14 to r31
 * jmp_buf[20]		setjmp type
 */

#define	U_SETJMP_SIG	0x1764

/*
int _setjmp(jmp_buf env);
 */
ENTRY(_setjmp)
	st	%r1, %r2,0	/* save registers to the environment buffer */
	st	%r14,%r2,8
	st	%r15,%r2,12
	st	%r16,%r2,16
	st	%r17,%r2,20
	st	%r18,%r2,24
	st	%r19,%r2,28
	st	%r20,%r2,32
	st	%r21,%r2,36
	st	%r22,%r2,40
	st	%r23,%r2,44
	st	%r24,%r2,48
	st	%r25,%r2,52
	st	%r26,%r2,56
	st	%r27,%r2,60
	st	%r28,%r2,64
	st	%r29,%r2,68
	st	%r30,%r2,72
	st	%r31,%r2,76
	or	%r4,%r0,U_SETJMP_SIG	/* setjmp type to _setjmp */
	st	%r4,%r2,80
	jmp.n	%r1
	 or	%r2,%r0,0		/* return 0 */
END(_setjmp)

/*
void _longjmp(jmp_buf env, int val);
 */
ENTRY(_longjmp)
	bcnd	eq0,%r2,2f	/* check for bad environment buffer address. */
	ld	%r4,%r2,80	/* check setjmp type. */
	cmp	%r4,%r4,U_SETJMP_SIG	/* should be U_SETJMP_SIG */
	bb1	ne,%r4,2f	/* if != U_SETJMP_SIG, abort. */
	
	ld	%r14,%r2,8	/* restore registers from the environment buffer */
	ld	%r15,%r2,12
	ld	%r16,%r2,16
	ld	%r17,%r2,20
	ld	%r18,%r2,24
	ld	%r19,%r2,28
	ld	%r20,%r2,32
	ld	%r21,%r2,36
	ld	%r22,%r2,40
	ld	%r23,%r2,44
	ld	%r24,%r2,48
	ld	%r25,%r2,52
	ld	%r26,%r2,56
	ld	%r27,%r2,60
	ld	%r28,%r2,64
	ld	%r29,%r2,68
	ld	%r30,%r2,72
	ld	%r31,%r2,76
	ld	%r1,%r2,0		/* restore r1 */
	bcnd.n	ne0,%r3,1f
	 or	%r2,%r3,%r0
	or	%r2,%r0,1		/* never return zero! */
1:	jmp	%r1

2:	br	_HIDDEN(abort)		/* NO RETURN */
END(_longjmp)
@


1.13
log
@Stop supporting longjmperror(); it's not used, not portable, and the checks
longjmp performs can't really be relied upon, even after we got rid of the
false positives...

ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: _setjmp.S,v 1.12 2013/01/20 17:59:52 miod Exp $ */
d116 1
a116 10
2:	subu	%r31,%r31,16	/* get a temporary stack */
	st	%r1,%r31,0	/* save r1 on stack (return address) */
#ifdef __PIC__
	bsr	_libc_abort#plt	/* NO RETURN */
#else
	bsr	_libc_abort	/* NO RETURN */
#endif
	ld	%r1,%r31,0	/* restore r1 from stack */
	jmp.n	%r1	/* this should not happen but we are prepared */
	 addu	%r31,%r31,16	/* restore the stack */
@


1.12
log
@PIC-related code should follow the #ifdef __PIC__ line, not the #else line.
Doh!
@
text
@d1 1
a1 1
/* $OpenBSD: _setjmp.S,v 1.11 2013/01/11 21:23:24 miod Exp $ */
d119 1
a119 2
	bsr	_C_LABEL(longjmperror)#plt
	bsr	_C_LABEL(abort)#plt	/* NO RETURN */
d121 1
a121 2
	bsr	_C_LABEL(longjmperror)
	bsr	_C_LABEL(abort)	/* NO RETURN */
@


1.11
log
@Add END() directives to the various functions.
Make the code PIC-aware when necessary (i.e. invoke other functions through
the PLT, and access global data through the GOT). No change for non-PIC
compilation.
@
text
@d1 1
a1 1
/* $OpenBSD: _setjmp.S,v 1.10 2013/01/05 11:20:55 miod Exp $ */
d119 3
a123 3
#else
	bsr	_C_LABEL(longjmperror)#plt
	bsr	_C_LABEL(abort)#plt	/* NO RETURN */
@


1.10
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
/* $OpenBSD: _setjmp.S,v 1.9 2012/08/12 17:14:39 miod Exp $ */
d81 1
d118 1
d121 4
d128 1
a128 1

@


1.9
log
@Fix almost ten-years old bug in siglongjmp(), which would not restore a signal
mask of zero (because of flawed logic assuming finding zero in the sigjmp_buf
signal mask means sigsetjmp was invoked with a zero `savemask' argument).

While there, clean comments of all *{set,long}jmp routines, and shave a few
instructions by using bcnd insead of cmp + bb to test for zero values.

Passes the regress tests, and now devel/libsigsegv configure siglongjmp test
will not spin (this test is however flawed as it expects a signal handler
declared as running on the sigaltstack and `returning' through siglongjmp to
be invoked on the signal stack the next time the signal is raised).
@
text
@d1 1
a1 1
/* $OpenBSD: _setjmp.S,v 1.8 2005/08/07 16:40:14 espie Exp $ */
d58 23
a80 23
	st	r1, r2,0	/* save registers to the environment buffer */
	st	r14,r2,8
	st	r15,r2,12
	st	r16,r2,16
	st	r17,r2,20
	st	r18,r2,24
	st	r19,r2,28
	st	r20,r2,32
	st	r21,r2,36
	st	r22,r2,40
	st	r23,r2,44
	st	r24,r2,48
	st	r25,r2,52
	st	r26,r2,56
	st	r27,r2,60
	st	r28,r2,64
	st	r29,r2,68
	st	r30,r2,72
	st	r31,r2,76
	or	r4,r0,U_SETJMP_SIG	/* setjmp type to _setjmp */
	st	r4,r2,80
	jmp.n	r1
	 or	r2,r0,0		/* return 0 */
d86 4
a89 4
	bcnd	eq0,r2,2f	/* check for bad environment buffer address. */
	ld	r4,r2,80	/* check setjmp type. */
	cmp	r4,r4,U_SETJMP_SIG	/* should be U_SETJMP_SIG */
	bb1	ne,r4,2f	/* if != U_SETJMP_SIG, abort. */
d91 23
a113 23
	ld	r14,r2,8	/* restore registers from the environment buffer */
	ld	r15,r2,12
	ld	r16,r2,16
	ld	r17,r2,20
	ld	r18,r2,24
	ld	r19,r2,28
	ld	r20,r2,32
	ld	r21,r2,36
	ld	r22,r2,40
	ld	r23,r2,44
	ld	r24,r2,48
	ld	r25,r2,52
	ld	r26,r2,56
	ld	r27,r2,60
	ld	r28,r2,64
	ld	r29,r2,68
	ld	r30,r2,72
	ld	r31,r2,76
	ld	r1,r2,0		/* restore r1 */
	bcnd.n	ne0,r3,1f
	 or	r2,r3,r0
	or	r2,r0,1		/* never return zero! */
1:	jmp	r1
d115 2
a116 2
2:	subu	r31,r31,16	/* get a temporary stack */
	st	r1,r31,0	/* save r1 on stack (return address) */
d119 3
a121 3
	ld	r1,r31,0	/* restore r1 from stack */
	jmp.n	r1	/* this should not happen but we are prepared */
	 addu	r31,r31,16	/* restore the stack */
@


1.8
log
@zap rcsid.
okay deraadt@@ (tested them all)
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d38 1
a38 2
 * will generate a "return(v)" from
 * the last call to
d40 2
a41 3
 * by restoring registers from the stack,
 * The previous signal state is NOT saved
 * or restored.
d43 2
a44 3
 * For m88k, we define our jmp_buf length
 * to be the size of 21 longs.  <machine/setjmp.h>
 * The buffer's usage is as follows:
d47 1
a47 1
 * jmp_buf[1]		signal set (if used)
a49 1
 *
a51 2
#include <machine/setjmp.h>

a58 1
	st	r0, r2,4	/* no signal set */
d77 5
a81 6
	or	r4,r0,0		/* clear r4 */
	or	r4,r0,U_SETJMP_SIG	/* r4 now contains setjmp type */
	st	r4,r2,80	/* setjmp type to _setjmp */
	jmp.n	r1		/* return 0 */
	 or	r2,r0,0
		
d86 1
a86 2
	cmp	r4,r2,r0	/* check for bad environment buffer address. */
	bb1	eq,r4,2f	/* if == 0, abort. */
@


1.7
log
@Use less stack space for temporary storage and C code invocation, after
the ABI change.
@
text
@d1 1
a30 5

#if defined(LIBC_SCCS)
	.data
	.string "$OpenBSD: _setjmp.S,v 1.6 2003/08/01 07:41:35 miod Exp $"
#endif /* LIBC_SCCS */
@


1.6
log
@Fix the *longjmp() behaviour - it is legal to reuse a jmp_buf several times.
Gets us a working perl 5.8.
@
text
@d33 1
a33 1
	.string "$OpenBSD: _setjmp.S,v 1.5 2003/01/07 22:01:29 miod Exp $"
d128 2
a129 2
2:	subu	r31,r31,32	/* get a temporary stack */
	st	r1,r31,20	/* save r1 on stack (return address) */
d132 3
a134 3
	ld	r1,r31,20	/* restore r1 from stack */
	addu	r31,r31,32	/* restore the stack */
	jmp	r1	/* this should not happen but we are prepared */
@


1.5
log
@Get static rcsid correctly, better style for .S files, trim whitespace.
@
text
@d33 1
a33 1
	.string "$OpenBSD: _setjmp.S,v 1.4 2003/01/04 00:13:11 miod Exp $"
d50 1
a50 1
 * to be the size of 22 longs.  <machine/setjmp.h>
d56 1
a56 2
 * jmp_buf[20]		'used' flag
 * jmp_buf[21]		setjmp type
a87 1
	st	r0,r2,80	/* mark environment as NOT returned (0x0) */
d90 1
a90 1
	st	r4,r2,84	/* setjmp type to _setjmp */
d100 1
a100 4
	ld	r4,r2,80	/* check if environment buffer has */
	cmp	r4,r4,r0	/* already returned. */
	bb1	ne,r4,2f	/* if != 0, abort. */
	ld	r4,r2,84	/* check setjmp type. */
a121 2
	or	r4,r0,1
	st	r4,r2,80	/* mark environment buffer as returned */
@


1.4
log
@Fix *longjmp() return values.
@
text
@d32 2
a33 2
	.text
	.string "$OpenBSD: _setjmp.S,v 1.3 2003/01/02 15:14:07 miod Exp $\0"
d46 1
a46 1
 * The previous signal state is NOT saved 
d49 1
a49 1
 * For m88k, we define our jmp_buf length 
d52 1
a52 1
 * 
d57 1
a57 1
 * jmp_buf[21]		setjmp type 
@


1.3
log
@Typos
@
text
@d33 1
a33 1
	.string "$OpenBSD: _setjmp.S,v 1.2 2002/09/18 05:03:54 smurph Exp $\0"
d63 2
d91 1
a91 1
	or	r4,r0,SETJMP_TYPE2	/* r4 now contains setjmp type */
d93 2
a94 2
	jmp.n	r1		/* retrun 0 */
	or	r2,r0,0
d100 1
a100 1
	cmp	r4,r2,0x0	/* check for bad envnvironment buffer address. */
d103 1
a103 1
	cmp	r4,r4,0x0	/* already returned. */
d106 2
a107 2
	cmp	r4,r4,SETJMP_TYPE2	/* should be SETJMP_TYPE2 */
	bb1	ne,r4,2f	/* if != SETJMP_TYPE2, abort. */
d125 2
a126 2
	ld	r30,r2,72		
	ld	r31,r2,76		
d130 6
a135 8
	cmp	r2,r3,0		/* test retval for 0 */
	bb0	eq,r2,1f	/* if != 0, it's ok. */
	jmp.n	r1		/* and jump to it */
	or	r2,r0,r3	/* but first return r3 value */
1:	jmp.n	r1              
	or	r2,r0,1		/* return non-zero value. */
2:
	subu	r31,r31,32	/* get a temporary stack */
@


1.2
log
@Fix license and conformance with man page.
@
text
@d33 1
a33 1
	.string "$OpenBSD: _setjmp.S,v 1.1 2002/06/11 08:14:40 smurph Exp $\0"
d98 1
a98 1
	cpm	r4,r2,0x0	/* check for bad envnvironment buffer address. */
d101 1
a101 1
	cpm	r4,r4,0x0	/* already returned. */
d104 1
a104 1
	cpm	r4,r4,SETJMP_TYPE2	/* should be SETJMP_TYPE2 */
@


1.1
log
@correted sigsetjmp, setjump.  Fixed MACHINE_ARCH vs. MACHINE stuff.
@
text
@d1 35
d38 28
d67 2
a68 1
	st	r1, r2,0
d87 5
a91 1
	jmp.n	r1
d93 4
a96 1

d98 10
a107 1
	ld	r14,r2,8
d123 20
a142 8
	ld	r30,r2,72
	ld	r31,r2,76
	ld	r1,r2,0
	bcnd.n	ne0,r3,dsrlbl
	or	r2,r3,0
	or	r2,r0,1
     dsrlbl:
	jmp	r1
@

