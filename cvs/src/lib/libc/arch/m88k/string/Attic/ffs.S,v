head	1.2;
access;
symbols
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2004.04.01.20.39.55;	author miod;	state dead;
branches;
next	1.1;

1.1
date	2004.01.26.20.05.29;	author miod;	state Exp;
branches;
next	;


desc
@@


1.2
log
@It turns out that the so-called fast ffs(3) routines were wrong, as soon as
more than one bit is set, as the ff1 instruction counts from the highest
order.

However, gcc/m88k with optimization enabled would use a correct, short
sequence based upon ff1 and tweaks, to achieve the intended result, hence
i did not catch this flaw initially.

So revert to the C implementation - it is correct, still decently fast, and
will only be used when compiling at -O0.
@
text
@/*	$OpenBSD: ffs.S,v 1.1 2004/01/26 20:05:29 miod Exp $	*/

/*
 * Written by Miodrag Vallat, 2004 - Public Domain
 */

#include "DEFS.h"

ENTRY(ffs)
	bcnd	eq0, r2, 1f	/* ff1(0) = 32, treat differently */
	ff1	r3, r2
	jmp.n	r1
	 add	r2, r3, 1	/* ff1 returns 0-31, need to increment */
1:
	jmp.n	r1
	 or	r2, r0, r0
@


1.1
log
@Use libkern's fast ffs() in libc too.
@
text
@d1 1
a1 1
/*	$OpenBSD: ffs.S,v 1.2 2004/01/22 20:39:06 deraadt Exp $	*/
@

