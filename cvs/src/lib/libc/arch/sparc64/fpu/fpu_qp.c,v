head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.2.0.32
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.30
	OPENBSD_5_0:1.2.0.28
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.26
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.24
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.20
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.22
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.18
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.16
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.05.08.18.41.17;	author guenther;	state Exp;
branches;
next	1.5;
commitid	0VsVMYAU46CoNFtN;

1.5
date	2014.04.17.09.01.25;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.05.23.19.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.03.20.09.40;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.28.18.03.36;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.21.18.41.30;	author jason;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Hide __fpu_* and make internal _Qp_* calls go direct.

ok kettenis@@
@
text
@/*	$OpenBSD: fpu_qp.c,v 1.5 2014/04/17 09:01:25 guenther Exp $	*/

/*-
 * Copyright (c) 2002 Jake Burkholder.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if 0
__FBSDID("$FreeBSD: src/lib/libc/sparc64/fpu/fpu_qp.c,v 1.3 2002/09/02 02:30:20 jake Exp $");
#endif

#include <sys/types.h>
#include <machine/fsr.h>

#include "fpu_emu.h"
#include "fpu_extern.h"

#define	_QP_OP(op) \
__dso_hidden void _Qp_ ## op(u_int *c, u_int *a, u_int *b); \
PROTO_NORMAL(_Qp_ ## op); \
void \
_Qp_ ## op(u_int *c, u_int *a, u_int *b) \
{ \
	struct fpemu fe; \
	struct fpn *r; \
	__asm volatile("stx %%fsr, [%0]" : : "r" (&fe.fe_fsr)); \
	fe.fe_f1.fp_sign = a[0] >> 31; \
	fe.fe_f1.fp_sticky = 0; \
	fe.fe_f1.fp_class = __fpu_qtof(&fe.fe_f1, a[0], a[1], a[2], a[3]); \
	fe.fe_f2.fp_sign = b[0] >> 31; \
	fe.fe_f2.fp_sticky = 0; \
	fe.fe_f2.fp_class = __fpu_qtof(&fe.fe_f2, b[0], b[1], b[2], b[3]); \
	r = __fpu_ ## op(&fe); \
	c[0] = __fpu_ftoq(&fe, r, c); \
} \
DEF_STRONG(_Qp_ ## op);

#define	_QP_TTOQ(qname, fname, ntype, atype, signed, ...) \
void _Qp_ ## qname ## toq(u_int *c, ntype n); \
PROTO_NORMAL(_Qp_ ## qname ## toq); \
void \
_Qp_ ## qname ## toq(u_int *c, ntype n) \
{ \
	struct fpemu fe; \
	atype *a; \
	__asm volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :); \
	a = (atype *)&n; \
	fe.fe_f1.fp_sign = signed ? a[0] >> 31 : 0; \
	fe.fe_f1.fp_sticky = 0; \
	fe.fe_f1.fp_class = __fpu_ ## fname ## tof(&fe.fe_f1, __VA_ARGS__); \
	c[0] = __fpu_ftoq(&fe, &fe.fe_f1, c); \
} \
DEF_STRONG(_Qp_ ## qname ## toq);

#define	_QP_QTOT4(qname, fname, type, x)		\
type _Qp_qto ## qname(u_int *c); \
PROTO_NORMAL(_Qp_qto ## qname); \
type \
_Qp_qto ## qname(u_int *c) \
{ \
	struct fpemu fe; \
	u_int *a; \
	type n; \
	__asm volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :); \
	a = (u_int *)&n; \
	fe.fe_f1.fp_sign = c[0] >> 31; \
	fe.fe_f1.fp_sticky = 0; \
	fe.fe_f1.fp_class = __fpu_qtof(&fe.fe_f1, c[0], c[1], c[2], c[3]); \
	a[0] = __fpu_fto ## fname(&fe, &fe.fe_f1, x); \
	return (n); \
} \
DEF_STRONG(_Qp_qto ## qname);

#define	_QP_QTOT3(qname, fname, type)		\
type _Qp_qto ## qname(u_int *c); \
PROTO_NORMAL(_Qp_qto ## qname); \
type \
_Qp_qto ## qname(u_int *c) \
{ \
	struct fpemu fe; \
	u_int *a; \
	type n; \
	__asm volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :); \
	a = (u_int *)&n; \
	fe.fe_f1.fp_sign = c[0] >> 31; \
	fe.fe_f1.fp_sticky = 0; \
	fe.fe_f1.fp_class = __fpu_qtof(&fe.fe_f1, c[0], c[1], c[2], c[3]); \
	a[0] = __fpu_fto ## fname(&fe, &fe.fe_f1); \
	return (n); \
} \
DEF_STRONG(_Qp_qto ## qname);

#define	_QP_QTOT(qname, fname, type, ...) \
type _Qp_qto ## qname(u_int *c); \
PROTO_NORMAL(_Qp_qto ## qname); \
type \
_Qp_qto ## qname(u_int *c) \
{ \
	struct fpemu fe; \
	u_int *a; \
	type n; \
	__asm volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :); \
	a = (u_int *)&n; \
	fe.fe_f1.fp_sign = c[0] >> 31; \
	fe.fe_f1.fp_sticky = 0; \
	fe.fe_f1.fp_class = __fpu_qtof(&fe.fe_f1, c[0], c[1], c[2], c[3]); \
	a[0] = __fpu_fto ## fname(&fe, &fe.fe_f1, ## __VA_ARGS__); \
	return (n); \
} \
DEF_STRONG(_Qp_qto ## qname);

#define	FCC_EQ(fcc)	((fcc) == FSR_CC_EQ)
#define	FCC_GE(fcc)	((fcc) == FSR_CC_EQ || (fcc) == FSR_CC_GT)
#define	FCC_GT(fcc)	((fcc) == FSR_CC_GT)
#define	FCC_LE(fcc)	((fcc) == FSR_CC_EQ || (fcc) == FSR_CC_LT)
#define	FCC_LT(fcc)	((fcc) == FSR_CC_LT)
#define	FCC_NE(fcc)	((fcc) != FSR_CC_EQ)
#define	FCC_ID(fcc)	(fcc)

#define	FSR_GET_FCC0(fsr)	(((fsr) >> FSR_FCC_SHIFT) & FSR_FCC_MASK)

#define	_QP_CMP(name, cmpe, test) \
int _Qp_ ## name(u_int *a, u_int *b) ; \
PROTO_NORMAL(_Qp_ ## name); \
int \
_Qp_ ## name(u_int *a, u_int *b) \
{ \
	struct fpemu fe; \
	__asm volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :); \
	fe.fe_f1.fp_sign = a[0] >> 31; \
	fe.fe_f1.fp_sticky = 0; \
	fe.fe_f1.fp_class = __fpu_qtof(&fe.fe_f1, a[0], a[1], a[2], a[3]); \
	fe.fe_f2.fp_sign = b[0] >> 31; \
	fe.fe_f2.fp_sticky = 0; \
	fe.fe_f2.fp_class = __fpu_qtof(&fe.fe_f2, b[0], b[1], b[2], b[3]); \
	__fpu_compare(&fe, cmpe, 0); \
	return (test(FSR_GET_FCC0(fe.fe_fsr))); \
} \
DEF_STRONG(_Qp_ ## name);

void _Qp_sqrt(u_int *c, u_int *a);
PROTO_NORMAL(_Qp_sqrt);
void
_Qp_sqrt(u_int *c, u_int *a)
{
	struct fpemu fe;
	struct fpn *r;
	__asm volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :);
	fe.fe_f1.fp_sign = a[0] >> 31;
	fe.fe_f1.fp_sticky = 0;
	fe.fe_f1.fp_class = __fpu_qtof(&fe.fe_f1, a[0], a[1], a[2], a[3]);
	r = __fpu_sqrt(&fe);
	c[0] = __fpu_ftoq(&fe, r, c);
}
DEF_STRONG(_Qp_sqrt);

_QP_OP(add)
_QP_OP(div)
_QP_OP(mul)
_QP_OP(sub)

_QP_TTOQ(d,	d,	double,	u_int,	1, a[0], a[1])
_QP_TTOQ(i,	i,	int,	u_int,	1, a[0])
_QP_TTOQ(s,	s,	float,	u_int,	1, a[0])
_QP_TTOQ(x,	x,	long,	u_long,	1, a[0])
_QP_TTOQ(ui,	ui,	u_int,	u_int,	0, a[0])
_QP_TTOQ(ux,	ux,	u_long,	u_long,	0, a[0])

_QP_QTOT4(d,	d,	double,	a)
_QP_QTOT3(i,	i,	int)
_QP_QTOT3(s,	s,	float)
_QP_QTOT4(x,	x,	long,	a)
_QP_QTOT3(ui,	i,	u_int)
_QP_QTOT4(ux,	x,	u_long,	a)

_QP_CMP(feq,	0,	FCC_EQ)
_QP_CMP(fge,	0,	FCC_GE)
_QP_CMP(fgt,	0,	FCC_GT)
_QP_CMP(fle,	0,	FCC_LE)
_QP_CMP(flt,	0,	FCC_LT)
_QP_CMP(fne,	0, 	FCC_NE)
_QP_CMP(cmp,	0, 	FCC_ID)
_QP_CMP(cmpe,	1, 	FCC_ID)
@


1.5
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_qp.c,v 1.4 2012/12/05 23:19:59 deraadt Exp $	*/
d40 2
a41 1
void _Qp_ ## op(u_int *c, u_int *a, u_int *b); \
d56 2
a57 1
}
d61 1
d73 2
a74 1
}
d78 1
d92 2
a93 1
}
d97 1
d111 2
a112 1
}
d116 1
d130 2
a131 1
}
d145 1
d159 2
a160 1
}
d163 1
d176 1
@


1.4
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_qp.c,v 1.3 2012/12/03 20:09:40 kettenis Exp $	*/
d46 1
a46 1
	__asm __volatile("stx %%fsr, [%0]" : : "r" (&fe.fe_fsr)); \
d64 1
a64 1
	__asm __volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :); \
d80 1
a80 1
	__asm __volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :); \
d97 1
a97 1
	__asm __volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :); \
d114 1
a114 1
	__asm __volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :); \
d139 1
a139 1
	__asm __volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :); \
d156 1
a156 1
	__asm __volatile("stx %%fsr, %0" : "=m" (fe.fe_fsr) :);
@


1.3
log
@Add two missing quad-precision emulation functions: _Qp_cmp and _Qp_cmpe.  At
least the former is emitted by modern versions of GCC.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_qp.c,v 1.2 2004/09/28 18:03:36 otto Exp $	*/
a28 1
#include <sys/cdefs.h>
@


1.2
log
@Fix unsigned {int, long, long long} to long double conversions for
values  with the high bit set. ok kettenis@@ jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_qp.c,v 1.1 2003/07/21 18:41:30 jason Exp $	*/
d130 1
d135 1
a135 1
int _Qp_f ## name(u_int *a, u_int *b) ; \
d137 1
a137 1
_Qp_f ## name(u_int *a, u_int *b) \
d184 8
a191 6
_QP_CMP(eq,	0,	FCC_EQ)
_QP_CMP(ge,	0,	FCC_GE)
_QP_CMP(gt,	0,	FCC_GT)
_QP_CMP(le,	0,	FCC_LE)
_QP_CMP(lt,	0,	FCC_LT)
_QP_CMP(ne,	0, 	FCC_NE)
@


1.1
log
@quad float emulation stuff.  Mostly based on freebsd (which is based on
NetBSD's kernel emulation stuff).  Not enabled yet.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 1
a58 1
#define	_QP_TTOQ(qname, fname, ntype, atype, ...) \
d67 1
a67 1
	fe.fe_f1.fp_sign = a[0] >> 31; \
d169 6
a174 6
_QP_TTOQ(d,	d,	double,	u_int,	a[0], a[1])
_QP_TTOQ(i,	i,	int,	u_int,	a[0])
_QP_TTOQ(s,	s,	float,	u_int,	a[0])
_QP_TTOQ(x,	x,	long,	u_long,	a[0])
_QP_TTOQ(ui,	i,	u_int,	u_int,	a[0])
_QP_TTOQ(ux,	x,	u_long,	u_long,	a[0])
@

