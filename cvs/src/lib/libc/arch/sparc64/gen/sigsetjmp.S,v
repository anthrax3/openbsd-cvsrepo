head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.12
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.46
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.44
	OPENBSD_5_0:1.2.0.42
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.40
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.38
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.34
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.36
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.32
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.30
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.28
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.26
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.24
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.22
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.20
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.18
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.16
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.14
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.12
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.10
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2016.05.08.18.29.34;	author guenther;	state Exp;
branches;
next	1.3;
commitid	sCmcySkZpsp5E5LY;

1.3
date	2012.08.22.17.19.35;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.11.21.56.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.29.01.45.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Simplify sig{set,long}jmp(): just Do The Job instead of calling others

ok kettenis@@
@
text
@/*	$OpenBSD: sigsetjmp.S,v 1.3 2012/08/22 17:19:35 pascal Exp $	*/
/*	$NetBSD: sigsetjmp.S,v 1.5 2000/08/28 00:45:59 eeh Exp $	*/
/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "SYS.h"

ENTRY(sigsetjmp)
	mov	%o0, %o3		/* Save our jmp_buf in %o3 */
	brz,pt	%o1, 1f
	 st	%o1, [%o0 + 8*14]	! jmpbuf[JBLEN]

	mov	1, %o0			/* SIG_BLOCK */
	mov	SYS_sigprocmask, %g1	
	clr	%o1			/* sigprocmask(SIG_BLOCK, 0) */
	t	ST_SYSCALL
	stx	%o0, [%o3 + 0x10]

1:	stx	%sp, [%o3 + 0x00]	/* store caller's stack pointer */
	stx	%o7, [%o3 + 0x08]	/* ... and return pc */
	retl
	 clr	%o0			/* return 0 */
END_WEAK(sigsetjmp)

ENTRY(siglongjmp)
	save	%sp, -CC64FSZ, %sp
	flushw
	ld	[%i0 + 8*14], %g1

	brz,pt	%g1, 1f

	 mov	3, %o0			/* SIG_SETMASK */
	ldx	[%i0 + 0x10], %o1
	mov	SYS_sigprocmask, %g1	
	t	ST_SYSCALL

1:	ldx	[%i0 + 0x00], %fp
	ldx	[%i0 + 0x08], %i7
	mov	1, %i0
	movrnz	%i1, %i1, %i0		! compute v ? v : 1
	ret
	 restore
END_WEAK(siglongjmp)
@


1.3
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsetjmp.S,v 1.2 2001/10/11 21:56:53 millert Exp $	*/
d4 6
a9 2
 * Copyright (c) 1995 Paul Kranenburg
 * All rights reserved.
d19 3
a21 16
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d23 11
a37 25
#ifdef __PIC__

ENTRY(sigsetjmp)
	PIC_PROLOGUE(%g1,%o2)		! %g1 = _GLOBAL_OFFSET_TABLE
	set	_C_LABEL(setjmp), %o2	! if (%o1 != 0) goto _setjmp;
	set	_C_LABEL(_setjmp), %o3	! else goto __setjmp;
	movrnz	%o1, %o2, %o3
	ldx [%g1+%o3], %g1
	jmp %g1
	 st	%o1,[%o0 + 8*14]	! jmpbuf[JBLEN]


ENTRY(siglongjmp)
	PIC_PROLOGUE(%g1,%o2)		! %g1 = _GLOBAL_OFFSET_TABLE
	ld	[%o0 + 8*14],%o2	! jmpbuf[JBLEN]
	set	_C_LABEL(longjmp), %o3	! if (%o2 != 0) goto _longjmp;
	set	_C_LABEL(_longjmp), %o4	! else goto __longjmp;
	movrnz	%o2, %o3, %o4 
	ldx	[%g1 + %o4], %g1
	jmp %g1
	 nop
	unimp 0

#else /* PIC */

d39 15
a53 5
	brz,pt	%o1,_C_LABEL(_setjmp)
	 st	%o1,[%o0 + 8*14]	! jmpbuf[JBLEN]
	ba,a,pt	%icc,_C_LABEL(setjmp)
	 nop				! spitfire bug
	unimp 0
d56 18
a73 7
	ld	[%o0 + 8*14], %g1
	brz,pt	%g1, _C_LABEL(_longjmp)
	 nop
	ba,a,pt	%icc, _C_LABEL(longjmp)
	unimp 0

#endif /* PIC */
@


1.2
log
@Correct length of jmpbuf, it is sizeof(long) * _JBLEN == 8*14
This fixes sigsetjmp()/siglongjmp() on sparc64
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsetjmp.S,v 1.1 2001/08/29 01:45:24 art Exp $	*/
d36 1
a36 1
#ifdef PIC
@


1.1
log
@Bunch of necessary files from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
	 st	%o1,[%o0+0x48]		! jmpbuf[JBLEN]
d50 1
a50 1
	ld	[%o0 + 0x48],%o2	! jmpbuf[JBLEN]
d63 1
a63 1
	 st	%o1,[%o0+0x48]		! jmpbuf[JBLEN]
d69 1
a69 1
	ld	[%o0 + 0x48], %g1
@

