head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.48
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.50
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.42
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.46
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.44
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.40
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.38
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.36
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.34
	OPENBSD_5_0:1.5.0.32
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.30
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.28
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.24
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.26
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2016.04.28.12.53.47;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	2uncOPNWzwD8Jh0u;

1.5
date	2004.01.29.18.56.14;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.15.13.40.22;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.20.18.32;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.07.23.50.20;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.29.01.45.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Don't use sigreturn(2) in longjmp(3).  Instead use a similar approach as in
_longjmp(3) but also restore the signal mask.

ok deraadt@@
@
text
@/*	$OpenBSD: setjmp.S,v 1.5 2004/01/29 18:56:14 tedu Exp $	*/
/*	$NetBSD: setjmp.S,v 1.4 2000/08/28 00:45:59 eeh Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * C library -- setjmp, longjmp
 *
 *	longjmp(a,v)
 * will generate a "return(v)" from
 * the last call to
 *	setjmp(a)
 * by restoring the previous context.
 * The previous signal state is restored.
 */

#include "SYS.h"

ENTRY(setjmp)
	mov	%o0, %o3		/* Save our jmp_buf in %o3 */

	mov	1, %o0			/* SIG_BLOCK */
	mov	SYS_sigprocmask, %g1	
	clr	%o1			/* sigprocmask(SIG_BLOCK, 0) */
	t	ST_SYSCALL
	stx	%o0, [%o3 + 0x10]

	stx	%sp, [%o3 + 0x00]	/* store caller's stack pointer */
	stx	%o7, [%o3 + 0x08]	/* ... and return pc */
	retl
	 clr	%o0			/* return 0 */

ENTRY(longjmp)
	save	%sp, -CC64FSZ, %sp
	flushw
	
	mov	3, %o0			/* SIG_SETMASK */
	ldx	[%i0 + 0x10], %o1
	mov	SYS_sigprocmask, %g1	
	t	ST_SYSCALL
	
	ldx	[%i0 + 0x00], %fp
	ldx	[%i0 + 0x08], %i7
	mov	1, %i0
	movrnz	%i1, %i1, %i0		! compute v ? v : 1
	ret
	 restore
@


1.5
log
@fix to use sigaltstack again.  help miod ok miod deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.4 2004/01/15 13:40:22 deraadt Exp $	*/
a36 4
#define _LOCORE
#include <machine/asm.h>
#include <machine/frame.h>

d44 2
a45 2
 * by restoring registers from the stack,
 * and a struct sigcontext, see <signal.h>
a49 1
#define STACK_T_SZ
a50 5
	/*
	 * We use the part of the sigcontext structure, the sp, pc, and npc
	 * fields, for the sigaltstack call so we don't need to get our own
	 * stackframe. It won't be filled out till later anyway.
	 */
a52 9
	stx	%sp, [%o3 + 0x08]	/* sc.sc_sp = sp (both ours and caller's) */
	add	%o7, 8, %o0
	stx	%o0, [%o3 + 0x10]	/* sc.sc_pc = return_pc */
	add	%o7, 12, %o0
	stx	%o0, [%o3 + 0x18]	/* sc.sc_npc = return_pc + 4 */
	stx	%g0, [%o3 + 0x20]	/* sc.sc_psr = (clean psr) */
	stx	%fp, [%o3 + 0x28]	/* sc.sc_g1 = %fp (misuse, but what the heck) */
					/* sc.sc_o0 = random(), set in longjmp */

d54 1
a54 1
	mov	SYS_sigprocmask, %g1
d57 1
d59 4
a62 1
	st	%o0, [%o3 + 0x38]	/* sc.sc_mask = current mask; */
d64 7
a70 3
	mov	SYS_sigaltstack, %g1
	clr	%o0			/* sigaltstack(NULL, &foo) */
	add	%o3, 0x40, %o1		/* (foo being the sigcontext sc_mask) */
d73 6
a78 32
	lduw	[%o3 + 0x40+0x10], %o0	/* foo.ss_flags */
	and	%o0, 1, %o1		/* onstack = foo.ss_flags & 1; */
	st	%o1, [%o3 + 0x00]	/* sc.sc_onstack = current onstack; */

	retl				/* return 0 */
	 clr	%o0

/*
 * All we need to do here is force sigreturn to load a new stack pointer,
 * new <pc,npc>, and appropriate %o0 return value from the sigcontext built
 * in setjmp.  The %i and %l registers will be reloaded from the place to
 * which %sp points, due to sigreturn() semantics (sigreturn does not modify
 * the window pointer in the psr, hence it must force all windows to reload).
 */
ENTRY(longjmp)
	save	%sp, -CC64FSZ, %sp
	ldx	[%i0 + 0x08], %o2	/* make sure sc->sc_sp, sc->sc_fp nonzero */
	ldx	[%i0 + 0x28], %o3
	orcc	%o2, %o3, %g0
	bz,pn	%xcc, Lbotch
	 nop
	movrz	%i1, 1, %i1		/* if (v == 0) v = 1; */
	st	%i1, [%i0 + 0x34]	/* sc.sc_o0 = v; */
	mov	SYS_sigreturn, %g1
	mov	%i0, %o0
	t	ST_SYSCALL		/* sigreturn(scp); */

Lbotch:
	/* oops, caller botched it */
	call	_C_LABEL(longjmperror)
	 nop
	unimp	0
@


1.4
log
@ABI breakage happened with the sigaltstack replacement.  It is too late,
now we just have to cope.  Since setjmp uses it, the alpha and sparc64 are
unhappy with the structure change.  In a few days, we will make the second
hop here, for now, use the old system call until all binaries have the new
struct in them.
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.3 2003/06/02 20:18:32 millert Exp $	*/
d58 1
a58 1
	 * fields, for the osigaltstack call so we don't need to get our own
d79 2
a80 2
	mov	SYS_osigaltstack, %g1
	clr	%o0			/* osigaltstack(NULL, &foo) */
d84 1
a84 1
	lduw	[%o3 + 0x40+0xc], %o0	/* foo.ss_flags */
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.2 2001/09/07 23:50:20 art Exp $	*/
d58 1
a58 1
	 * fields, for the sigstack call so we don't need to get our own
d79 2
a80 2
	mov	SYS_sigaltstack, %g1
	clr	%o0			/* sigaltstack(NULL, &foo) */
@


1.2
log
@Adapt to our sigcontext and fix the obvious bugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: setjmp.S,v 1.1 2001/08/29 01:45:24 art Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1
log
@Bunch of necessary files from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 3
a63 3
	 * We use the part of the sigcontext structure, the sp, pc, and npc fields,
	 * for the sigstack call so we don't need to get our own stackframe.  It 
	 * won't be filled out till later anyway.
d66 1
a66 15
	mov	%o0, %o2		/* build sigcontext in [%o2] */
	mov	1, %o0			/* SIG_BLOCK */
	mov	SYS_sigprocmask, %g1
	clr	%o1			/* sigprocmask(SIG_BLOCK, (sigset_t *)NULL, (sigset_t *)a) */
	t	ST_SYSCALL
	
	st	%o0, [%o3 + 0x04]	/* sc.sc_mask = current mask; */
	mov	SYS_sigaltstack, %g1
	clr	%o0			/* sigstack(NULL, &foo) */
	add	%o3, 0x38, %o1		/* (foo being the sigcontext14 sc_mask) */
	t	ST_SYSCALL
	
	lduw	[%o3 + 0x38+0x10], %o0	/* foo.ss_flags */
	and	%o0, 1, %o1		/* onstack = foo.ss_flags & 1; */
	st	%o0, [%o3 + 0x00]	/* sc.sc_onstack = current onstack; */
d75 17
d108 3
a110 2
	 movrz	%i1, 1, %i1		/* if (v == 0) v = 1; */
	st	%i1, [%i0 + 0x30]	/* sc.sc_o0 = v; */
@

