head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.18
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.16
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.12
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.1.0.8
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.6
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.08.22.17.19.35;	author pascal;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.21.18.43.55;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.02.20.18.32;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.29.01.45.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@/*	$OpenBSD: fixunsdfsi.S,v 1.3 2003/07/21 18:43:55 jason Exp $	*/
/*	$NetBSD: fixunsdfsi.S,v 1.3 2000/07/25 04:26:12 mycroft Exp $	*/
/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <machine/asm.h>
#define _LOCORE
#include <machine/frame.h>

/*
 * Convert double to unsigned integer (for gcc).
 *
 * I have made the output for NaN agree with the Sun compiler, not
 * that it really matters, by using `fbul,a'.
 */

	.align	8
Lbigd:
	.word	0x43e00000		! .double 2^63
	.word	0			! (who me, not trust the assembler?)
Lbigf:
	.word	0x5f000000		! .float 2^63

/*
 *unsigned long __dtoul(double):
 *	double -> unsigned long
 */
ENTRY(__dtoul)
	sub	%sp, 16, %sp
	std	%f2, [%sp + 64 + BIAS + 8]
#ifdef __PIC__
	PICCY_SET(Lbigd, %g1, %o0)
	ldd	[%g1], %f2
#else
	sethi	%hi(Lbigd), %g1
	ldd	[%g1 + %lo(Lbigd)], %f2
#endif
	fcmped	%f0, %f2		! d < 2^63, or NaN, or -Inf?
	nop				! (fpop2 delay)
	fbul,a	1f			! if so, use fdtoi to convert to int
	 fdtox	%f0, %f0		!        (this includes negatives!)

	! d does not fit in an int, so subtract 2^63, convert,
	! and add 2^63 again (sigh).  Just hope the intermediate
	! fits (if not, the result is undefined anyway).

	fsubd	%f0, %f2, %f0		! d -= 2^63
	fdtox	%f0, %f0		! convert to int
	std	%f0, [%sp + 64 + BIAS]	! move into return reg
	ldx	[%sp + 64 + BIAS], %o0
	sethi	%hi(0x80000000), %o1
	sllx	%o1, 32, %o1
	add	%o0, %o1, %o0		! add 2^63
	ldd	[%sp + 64 + BIAS + 8], %f2
	retl
	 add	%sp, 16, %sp

1:
	std	%f0, [%sp + 64 + BIAS]	! return result
	ldx	[%sp + 64 + BIAS], %o0
	ldd	[%sp + 64 + BIAS + 8], %f2
	retl
	 add	%sp, 16, %sp

/*
 *unsigned long __ftoul(float):
 *	float -> unsigned long
 */
ENTRY(__ftoul)
	sub	%sp, 16, %sp
	st	%f1, [%sp + 64 + BIAS + 8]
	st	%f2, [%sp + 64 + BIAS + 12]
#ifdef __PIC__
	PICCY_SET(Lbigf, %g1, %o0)
	ld	[%g1], %f2
#else
	sethi	%hi(Lbigf), %g1
	ld	[%g1 + %lo(Lbigf)], %f2
#endif
	fcmpes	%f0, %f2		! d < 2^63, or NaN, or -Inf?
	nop				! (fpop2 delay)
	fbul,a	1f			! if so, use fdtoi to convert to int
	 fstox	%f0, %f0		!        (this includes negatives!)

	! d does not fit in an int, so subtract 2^63, convert,
	! and add 2^63 again (sigh).  Just hope the intermediate
	! fits (if not, the result is undefined anyway).

	fsubs	%f0, %f2, %f0		! d -= 2^63
	fstox	%f0, %f0		! convert to int
	std	%f0, [%sp + 64 + BIAS]	! move into return reg
	ldx	[%sp + 64 + BIAS], %o0
	sethi	%hi(0x80000000), %o1
	sllx	%o1, 32, %o1
	add	%o0, %o1, %o0		! add 2^63
	ld	[%sp + 64 + BIAS + 8], %f1
	ld	[%sp + 64 + BIAS + 12], %f2
	retl
	 add	%sp, 16, %sp

1:
	std	%f0, [%sp + 64 + BIAS]	! return result
	ldx	[%sp + 64 + BIAS], %o0
	ld	[%sp + 64 + BIAS + 8], %f1
	ld	[%sp + 64 + BIAS + 12], %f2
	retl
	 add	%sp, 16, %sp
@


1.3
log
@implementation of __ftoul (float -> unsigned long) (based on __dtoul above it)
@
text
@d1 1
a1 1
/*	$OpenBSD: fixunsdfsi.S,v 1.2 2003/06/02 20:18:32 millert Exp $	*/
d61 1
a61 1
#ifdef PIC
d103 1
a103 1
#ifdef PIC
@


1.2
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: fixunsdfsi.S,v 1.1 2001/08/29 01:45:24 art Exp $	*/
d48 1
a48 1
Lbig:
d51 2
d55 2
a56 1
 * Same as above but to unsigned long
d62 1
a62 1
	PICCY_SET(Lbig, %g1, %o0)
d65 2
a66 2
	sethi	%hi(Lbig), %g1
	ldd	[%g1 + %lo(Lbig)], %f2
d92 44
@


1.1
log
@Bunch of necessary files from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@

