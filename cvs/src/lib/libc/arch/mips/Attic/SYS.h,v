head	1.11;
access;
symbols
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2004.08.11.17.34.32;	author pefo;	state dead;
branches;
next	1.10;

1.10
date	2003.06.02.20.18.31;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.19.22.12.36;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.20.20.52.09;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.12.12.03.01;	author heko;	state Exp;
branches;
next	1.5;

1.5
date	99.01.19.01.38.54;	author d;	state Exp;
branches;
next	1.4;

1.4
date	96.08.19.08.15.49;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.07.30.20.27.48;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.16.11.15.57;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.33;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@bye
@
text
@/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      $OpenBSD: SYS.h,v 1.10 2003/06/02 20:18:31 millert Exp $ 
 */

#include <sys/syscall.h>
#include <machine/asm.h>

#ifdef __STDC__
# define __ENTRY(p,x)	ENTRY(p ## x)
# define __DO_SYSCALL(x)	\
			li	v0,SYS_ ## x;	\
			syscall
# define __LEAF2(p,x)	LEAF(p ## x)
# define __END2(p,x)	END(p ## x)
# define __CLABEL2(p,x)	_C_LABEL(p ## x)
#else
# define __ENTRY(p,x)	ENTRY(p/**/x)
# define __DO_SYSCALL(x)	\
			li	v0,SYS_/**/x;	\
			syscall
# define __LEAF2(p,x)	LEAF(p/**/x)
# define __END2(p,x)	END(p/**/x)
# define __CLABEL2(p,x)	_C_LABEL(p/**/x)
#endif

#define __PSEUDO_NOERROR(p,x,y)				\
		__LEAF2(p,x);				\
			__DO_SYSCALL(y);		\
			j	ra;			\
		__END2(p,x)

#define __PSEUDO(p,x,y)   				\
		__LEAF2(p,x);				\
			__DO_SYSCALL(y);		\
			bne	a3,zero,err;		\
			j	ra;			\
		err:	la	t9,_C_LABEL(cerror);	\
			jr	t9;			\
		__END2(p,x)

#define __RSYSCALL(p,x)   __PSEUDO(p,x,x)

#ifdef _THREAD_SAFE
# define RSYSCALL(x)	__RSYSCALL(_thread_sys_,x)
# define PSEUDO(x,y)	__PSEUDO(_thread_sys_,x,y)
# define SYSLEAF(x)	__LEAF2(_thread_sys_,x)
# define SYSEND(x)	__END2(_thread_sys_,x)
#else /* _THREAD_SAFE */
# define RSYSCALL(x)	__RSYSCALL(,x)
# define PSEUDO(x,y)	__PSEUDO(,x,y)
# define SYSLEAF(x)	__LEAF2(,x)
# define SYSEND(x)	__END2(,x)
#endif /* _THREAD_SAFE */

@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.9 2002/02/19 22:12:36 millert Exp $ 
@


1.9
log
@We need to keep K&R compat macros for some ports where the assemnbler is
still using -traditional-cpp.
@
text
@d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d32 1
a32 1
 *      $OpenBSD: SYS.h,v 1.8 2002/02/19 19:39:36 millert Exp $ 
@


1.8
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d36 1
a36 1
 *      $OpenBSD: SYS.h,v 1.7 2001/09/20 20:52:09 millert Exp $ 
d42 3
a44 2
#define __ENTRY(p,x)	ENTRY(p ## x)
#define __DO_SYSCALL(x)				\
d47 12
a58 3
#define __LEAF2(p,x)	LEAF(p ## x)
#define __END2(p,x)	END(p ## x)
#define __CLABEL2(p,x)	_C_LABEL(p ## x)
@


1.7
log
@Add PSEUDO_NOERROR similar to that used by NetBSD.
Some ports were setting errno in PSEUDO and some were not.  Now errno
is set for all in PSEUDO and PSEUDO_NOERROR is provided for the
non-errno case (only used by _exit).

Needs testing on vax and m88k.
XXX - hppa and powerpc still lack a real PSEUDO_NOERROR implementation.
Currently PSEUDO_NOERROR and PSEUDO are the same (so builds don't
break on those platforms).
@
text
@d36 1
a36 1
 *      $OpenBSD: SYS.h,v 1.6 2001/08/12 12:03:01 heko Exp $ 
d42 2
a43 3
#ifdef __STDC__
# define __ENTRY(p,x)	ENTRY(p ## x)
# define __DO_SYSCALL(x)	\
d46 3
a48 12
# define __LEAF2(p,x)	LEAF(p ## x)
# define __END2(p,x)	END(p ## x)
# define __CLABEL2(p,x)	_C_LABEL(p ## x)
#else
# define __ENTRY(p,x)	ENTRY(p/**/x)
# define __DO_SYSCALL(x)	\
			li	v0,SYS_/**/x;	\
			syscall
# define __LEAF2(p,x)	LEAF(p/**/x)
# define __END2(p,x)	END(p/**/x)
# define __CLABEL2(p,x)	_C_LABEL(p/**/x)
#endif
@


1.6
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d36 1
a36 1
 *      $OpenBSD: SYS.h,v 1.5 1999/01/19 01:38:54 d Exp $ 
d60 6
d69 2
a70 2
			bne	a3,zero,err;	\
			j	ra;		\
d72 1
a72 1
			jr	t9;		\
@


1.5
log
@thread support
@
text
@d36 1
a36 1
 *      $OpenBSD: SYS.h,v 1.4 1996/08/19 08:15:49 tholo Exp $ 
d76 1
a76 1
#else _THREAD_SAFE
d81 1
a81 1
#endif _THREAD_SAFE
@


1.4
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d36 1
a36 1
 *      $OpenBSD: SYS.h,v 1.3 1996/07/30 20:27:48 pefo Exp $ 
d43 2
a44 2
#define RSYSCALL(x)      \
			LEAF(x);		\
d46 4
a49 15
			syscall;		\
			bne	a3,zero,err;	\
			j	ra;		\
			err: la t9, cerror;	\
			jr t9;			\
			END(x);
#define PSEUDO(x,y)     \
			LEAF(x);		\
			li	v0,SYS_ ## y;	\
			syscall;		\
			bne	a3,zero,err;	\
			j	ra;		\
			err: la t9, cerror;	\
			jr t9;			\
			END(x);
d51 2
a52 2
#define RSYSCALL(x)     \
			LEAF(x);		\
d54 9
a62 1
			syscall;		\
d65 1
a65 1
			err: la t9, cerror;	\
d67 16
a82 11
			END(x);
#define PSEUDO(x,y)     \
			LEAF(x);		\
			li	v0,SYS_/**/y;	\
			syscall;		\
			bne	a3,zero,err;	\
			j	ra;		\
			err: la t9, cerror;	\
			jr t9;			\
			END(x);
#endif
@


1.3
log
@Cleanup of abi call and endian stuff. Also fixed some bugs. (AENT).
@
text
@a0 1
/*	$OpenBSD$	*/
d36 1
a36 2
 *	from: @@(#)SYS.h	8.1 (Berkeley) 6/4/93
 *      $Id: SYS.h,v 1.2 1996/05/16 11:15:57 pefo Exp $ 
@


1.2
log
@Changes to support elf shared librarys
@
text
@d1 1
d38 1
a38 1
 *      $Id: SYS.h,v 1.1.1.1 1995/10/18 08:41:33 deraadt Exp $ 
a41 1
#if MACHINE==pica
a42 3
#else
#include <machine/machAsmDefs.h>
#endif
d45 18
a62 29
#ifdef ABICALLS
#define RSYSCALL(x)     .abicalls; \
			LEAF(x); .set noreorder; .cpload t9; .set reorder; \
			li v0,SYS_ ## x; syscall; \
			bne a3,zero,err; j ra; \
			err: la t9, _C_LABEL(cerror); jr t9; END(x);
#define PSEUDO(x,y)     .abicalls; \
			LEAF(x); .set noreorder; .cpload t9; .set reorder; \
			li v0,SYS_ ## y; syscall; \
			bne a3,zero,err; j ra; \
			err: la t9, _C_LABEL(cerror); jr t9; END(x);
#else
#define RSYSCALL(x)     LEAF(x); li v0,SYS_ ## x; syscall; \
			bne a3,zero,err; j ra; err: j _C_LABEL(cerror); END(x);
#define PSEUDO(x,y)     LEAF(x); li v0,SYS_ ## y; syscall; \
			bne a3,zero,err; j ra; err: j _C_LABEL(cerror); END(x);
#endif
#else
#ifdef ABICALLS
#define RSYSCALL(x)     .abicalls; \
			LEAF(x); .set noreorder; .cpload t9; .set reorder; \
			li v0,SYS_/**/x; syscall; \
			bne a3,zero,err; j ra; \
			err: la t9, _C_LABEL(cerror); jr t9; END(x);
#define PSEUDO(x,y)     .abicalls; \
			LEAF(x); .set noreorder; .cpload t9; .set reorder; \
			li v0,SYS_/**/y; syscall; \
			bne a3,zero,err; j ra; \
			err: la t9, _C_LABEL(cerror); jr t9; END(x);
d64 18
a81 5
#define RSYSCALL(x)     LEAF(x); li v0,SYS_/**/x; syscall; \
			bne a3,zero,err; j ra; err: j _C_LABEL(cerror); END(x);
#define PSEUDO(x,y)     LEAF(x); li v0,SYS_/**/y; syscall; \
			bne a3,zero,err; j ra; err: j _C_LABEL(cerror); END(x);
#endif
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
 *      $Id: SYS.h,v 1.3 1994/12/15 17:24:44 mycroft Exp $ 
d41 3
d45 1
d48 12
d64 13
d82 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
