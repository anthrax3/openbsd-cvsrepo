head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.6
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.44
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.36
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.40
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.38
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.34
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.32
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.30
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.28
	OPENBSD_5_0:1.8.0.26
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.24
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.22
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.18
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.20
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.16
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.14
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.12
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.8
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.9
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.8;
commitid	lTMF8Y3C9fQGd6jQ;

1.8
date	2005.08.07.11.30.38;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.25.22.22.30;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.25.21.43.37;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.24.01.15.42;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.11.21.07.03;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.11.21.03.10;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.13.17;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.26;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.26;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@/*	$OpenBSD: strcpy.S,v 1.8 2005/08/07 11:30:38 espie Exp $ */
/*
 * Written by J.T. Conklin <jtc@@netbsd.org>.
 * Public domain.
 */

#include <machine/asm.h>

#if defined(APIWARN)
#APP
	.section .gnu.warning.strcpy
	.ascii "warning: strcpy() is almost always misused, please use strlcpy()"
#NO_APP
#endif

/*
 * NOTE: I've unrolled the loop eight times: large enough to make a
 * significant difference, and small enough not to totally trash the
 * cache.
 */

ENTRY(strcpy)
	movl	4(%esp),%ecx		/* dst address */
	movl	8(%esp),%edx		/* src address */
	pushl	%ecx			/* push dst address */

	.align 2,0x90
L1:	movb	(%edx),%al		/* unroll loop, but not too much */
	movb	%al,(%ecx)
	testb	%al,%al
	jz	L2
	movb	1(%edx),%al
	movb	%al,1(%ecx)
	testb	%al,%al
	jz	L2
	movb	2(%edx),%al
	movb	%al,2(%ecx)
	testb	%al,%al
	jz	L2
	movb	3(%edx),%al
	movb	%al,3(%ecx)
	testb	%al,%al
	jz	L2
	movb	4(%edx),%al
	movb	%al,4(%ecx)
	testb	%al,%al
	jz	L2
	movb	5(%edx),%al
	movb	%al,5(%ecx)
	testb	%al,%al
	jz	L2
	movb	6(%edx),%al
	movb	%al,6(%ecx)
	testb	%al,%al
	jz	L2
	movb	7(%edx),%al
	movb	%al,7(%ecx)
	addl	$8,%edx
	addl	$8,%ecx
	testb	%al,%al
	jnz	L1
L2:	popl	%eax			/* pop dst address */
	ret
END(strcpy)
@


1.8
log
@zap rcsid, tested there. okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d64 1
@


1.7
log
@Change wording of APIWARNs to match arch-independent code.
ok deraadt@@
@
text
@d1 1
a13 5
#endif

#if defined(LIBC_SCCS)
	.text
	.asciz "$OpenBSD: strcpy.S,v 1.6 2005/03/25 21:43:37 kettenis Exp $"
@


1.6
log
@Fix APIWARNs.
ok deraadt@@
@
text
@d11 1
a11 1
	.ascii "warning: strcpy() is almost always misused, consider using strlcpy()"
d17 1
a17 1
	.asciz "$OpenBSD: strcpy.S,v 1.5 2003/07/24 01:15:42 deraadt Exp $"
@


1.5
log
@warn about unsafe APIs at link time.  Conditional on libc/Makefile defining
APIWARN; disabled by default.  In use by many developers for quite some time,
now they have a common knob to enable/disable this
@
text
@d10 2
a11 2
	.stabs "warning: strcpy() is almost always misused, consider using strlcpy()",30,0,0,0
	.stabs "_strcpy",1,0,0,0
d17 1
a17 1
	.asciz "$OpenBSD: strcpy.S,v 1.4 2003/06/11 21:07:03 deraadt Exp $"
@


1.4
log
@oops
@
text
@d8 7
d17 1
a17 1
	.asciz "$OpenBSD: strcpy.S,v 1.2 1996/08/19 08:13:17 tholo Exp $"
@


1.3
log
@ansification; checked by pval
@
text
@a7 5
#APP
	.stabs "warning: strcpy() is almost always misused, consider using strlcpy()",30,0,0,0
	.stabs "_strcpy",1,0,0,0
#NO_APP

@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d8 5
d15 1
a15 1
	.asciz "$OpenBSD$"
@


1.1
log
@Initial revision
@
text
@d9 2
a10 1
	RCSID("$NetBSD: strcpy.S,v 1.8 1995/04/28 22:58:12 jtc Exp $")
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
