head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.6
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.18.0.8
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.4
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.2
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.20
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.18
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.14
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.16
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.12
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.10
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.8
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.6
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.12
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.10
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.24;
commitid	d9R7VGw9CHTkwXE1;

1.24
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.23;
commitid	OrVNAJkzchWBNbO0;

1.23
date	2015.09.05.06.22.47;	author guenther;	state Exp;
branches;
next	1.22;
commitid	YcHx4KWjuOzN6Vj2;

1.22
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.21;
commitid	lTMF8Y3C9fQGd6jQ;

1.21
date	2015.08.26.01.54.09;	author guenther;	state Exp;
branches;
next	1.20;
commitid	ZWoe9OaBBikaM1w5;

1.20
date	2015.04.07.01.27.06;	author guenther;	state Exp;
branches;
next	1.19;
commitid	oQvh7XA3Kql35r0J;

1.19
date	2014.06.04.20.13.49;	author matthew;	state Exp;
branches;
next	1.18;
commitid	CQgbVinZLjc6cr0k;

1.18
date	2012.08.22.17.19.34;	author pascal;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.04.12.42.39;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.24.14.28.34;	author drahn;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.20.18.30;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.17.03.47.38;	author drahn;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.06.23.24.13;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.10.17.44.38;	author fgsch;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.19.22.12.36;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.20.20.52.09;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.06.10.49.20;	author d;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.06.09.05.58;	author d;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.06.08.50.35;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.01.06.05.36.17;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.11.20.11.18.29;	author d;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.12.12;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.30.08.15.54;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: SYS.h,v 1.24 2015/10/23 04:39:24 guenther Exp $
 */

#include <machine/asm.h>
#include <sys/syscall.h>

#define TCB_OFFSET_ERRNO	16

/*
 * We define a hidden alias with the prefix "_libc_" for each global symbol
 * that may be used internally.  By referencing _libc_x instead of x, other
 * parts of libc prevent overriding by the application and avoid unnecessary
 * relocations.
 */
#define _HIDDEN(x)		_libc_##x
#define _HIDDEN_ALIAS(x,y)			\
	STRONG_ALIAS(_HIDDEN(x),y);		\
	.hidden _HIDDEN(x)
#define _HIDDEN_FALIAS(x,y)			\
	_HIDDEN_ALIAS(x,y);			\
	.type _HIDDEN(x),@@function

/*
 * For functions implemented in ASM that aren't syscalls.
 *   END_STRONG(x)	Like DEF_STRONG() in C; for standard/reserved C names
 *   END_WEAK(x)	Like DEF_WEAK() in C; for non-ISO C names
 */
#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
#define	END_WEAK(x)	END_STRONG(x); .weak x


/*
 * Design note:
 *
 * System calls entry points are really named _thread_sys_{syscall},
 * and weakly aliased to the name {syscall}. This allows the thread
 * library to replace system calls at link time.
 */

/* Use both _thread_sys_{syscall} and [weak] {syscall}. */

#define	SYSENTRY(x)					\
			ENTRY(_thread_sys_##x);		\
			WEAK_ALIAS(x, _thread_sys_##x)
#define	SYSENTRY_HIDDEN(x)				\
			ENTRY(_thread_sys_ ## x)
#define	__END_HIDDEN(x)	END(_thread_sys_ ## x);			\
			_HIDDEN_FALIAS(x,_thread_sys_ ## x);	\
			END(_HIDDEN(x))
#define	__END(x)	__END_HIDDEN(x); END(x)

#define	__DO_SYSCALL(x)					\
			movl $(SYS_ ## x),%eax;		\
			int $0x80

#define SET_ERRNO()					\
	movl	%eax,%gs:(TCB_OFFSET_ERRNO);		\
	movl	$-1, %eax;				\
	movl	$-1, %edx	/* for lseek */
#define HANDLE_ERRNO()					\
	jnc,pt	99f;					\
	SET_ERRNO();					\
	99:

/* perform a syscall */
#define	_SYSCALL_NOERROR(x,y)				\
		SYSENTRY(x);				\
			__DO_SYSCALL(y);
#define	_SYSCALL_HIDDEN_NOERROR(x,y)			\
		SYSENTRY_HIDDEN(x);			\
			__DO_SYSCALL(y);

#define	SYSCALL_NOERROR(x)				\
		_SYSCALL_NOERROR(x,x)

/* perform a syscall, set errno */
#define	_SYSCALL(x,y)					\
			.text;				\
			.align 2;			\
		_SYSCALL_NOERROR(x,y)			\
			HANDLE_ERRNO()
#define	_SYSCALL_HIDDEN(x,y)				\
			.text;				\
			.align 2;			\
		_SYSCALL_HIDDEN_NOERROR(x,y)		\
			HANDLE_ERRNO()

#define	SYSCALL(x)					\
		_SYSCALL(x,x)
#define	SYSCALL_HIDDEN(x)				\
		_SYSCALL_HIDDEN(x,y)

/* perform a syscall, return */
#define	PSEUDO_NOERROR(x,y)				\
		_SYSCALL_NOERROR(x,y);			\
			ret;				\
		__END(x)

/* perform a syscall, set errno, return */
#define	PSEUDO(x,y)					\
		_SYSCALL(x,y);				\
			ret;				\
		__END(x)
#define	PSEUDO_HIDDEN(x,y)				\
		_SYSCALL_HIDDEN(x,y);			\
			ret;				\
		__END_HIDDEN(x)

/* perform a syscall with the same name, set errno, return */
#define	RSYSCALL(x)					\
			PSEUDO(x,x);
#define	RSYSCALL_HIDDEN(x)				\
			PSEUDO_HIDDEN(x,x)
#define	SYSCALL_END(x)	__END(x)
#define	SYSCALL_END_HIDDEN(x)				\
			__END_HIDDEN(x)
@


1.24
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.23 2015/09/05 06:22:47 guenther Exp $
d38 1
d74 2
a75 3
			ENTRY(_thread_sys_ ## x);	\
			.weak _C_LABEL(x);		\
			_C_LABEL(x) = _C_LABEL(_thread_sys_ ## x)
d87 8
a94 2
#define CERROR		_C_LABEL(__cerror)
#define _CERROR		_C_LABEL(___cerror)
a107 1
#ifdef __PIC__
a110 4
		2:	PIC_PROLOGUE;			\
			movl PIC_GOT(CERROR), %ecx;	\
			PIC_EPILOGUE;			\
			jmp *%ecx;			\
d112 1
a112 1
			jc 2b
a115 4
		2:	PIC_PROLOGUE;			\
			movl PIC_GOT(CERROR), %ecx;	\
			PIC_EPILOGUE;			\
			jmp *%ecx;			\
d117 1
a117 17
			jc 2b
#else
#define	_SYSCALL(x,y)					\
			.text;				\
			.align 2;			\
		2:					\
			jmp PIC_PLT(CERROR);		\
		_SYSCALL_NOERROR(x,y)			\
			jc 2b
#define	_SYSCALL_HIDDEN(x,y)				\
			.text;				\
			.align 2;			\
		2:					\
			jmp PIC_PLT(CERROR);		\
		_SYSCALL_HIDDEN_NOERROR(x,y)		\
			jc 2b
#endif
d121 2
a147 2

	.globl	CERROR
@


1.23
log
@Adds hidden _libc_FOO aliases for the system call stubs.
Stop generating _brk and _sbrk symbols: they've already been hidden.
Set the ELF symbol size on the syscall stubs.
Give the __{min,cur}brk symbols a size and type, and hide more jump labels.

ok deraadt@@
@
text
@d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.22 2015/08/31 02:53:56 guenther Exp $
d163 2
@


1.22
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.21 2015/08/26 01:54:09 guenther Exp $
d78 4
d144 2
a145 1
			ret
d150 2
a151 1
			ret
d154 2
a155 1
			ret
d162 1
@


1.21
log
@Hide many (194!) symbols that nothing should be using.
Delete exect(2); it wasn't portable across archs and nothing used it.

ports test build by naddy@@
ok deraadt@@ kettenis@@
@
text
@d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.20 2015/04/07 01:27:06 guenther Exp $
d37 24
@


1.20
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.19 2014/06/04 20:13:49 matthew Exp $
a60 1
#define CURBRK		_C_LABEL(__curbrk)
@


1.19
log
@Apply "unifdef -D__STDC__" to libc/arch/*/SYS.h

A while back, pascal@@ converted our system call stubs from using "cpp
| as" to "cc -x assembler-with-cpp", so there's no need to stay
compatible with ancient preprocessor semantics.

ok miod
@
text
@d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.18 2012/08/22 17:19:34 pascal Exp $
d52 2
d67 3
d85 9
d102 7
d123 3
d130 2
@


1.18
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.17 2011/04/04 12:42:39 guenther Exp $
a47 1
#ifdef __STDC__
a51 6
#else /* ! __STDC__ */
#define	SYSENTRY(x)					\
			ENTRY(_thread_sys_/**/x);	\
			.weak _C_LABEL(x);		\
			_C_LABEL(x) = _C_LABEL(_thread_sys_/**/x)
#endif /* ! __STDC__ */
a52 1
#ifdef __STDC__
a55 5
#else /* ! __STDC__ */
#define	__DO_SYSCALL(x)					\
			movl $(SYS_/**/x),%eax;		\
			int $0x80
#endif /* ! __STDC__ */
@


1.17
log
@Move __cerror to ___cerror with a weak alias so that rthreads can override it.
On mips64, also correct the name called from plain cerror to __cerror.

"looks correct" miod@@
@
text
@d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.16 2006/04/24 14:28:34 drahn Exp $
d83 1
a83 1
#ifdef PIC
@


1.16
log
@Properly terminate ENTRY with a semicolon, required for asm profiling.
ok miod, espie
@
text
@d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.15 2003/06/02 20:18:30 millert Exp $
d70 3
a72 2
#define CERROR          _C_LABEL(__cerror)
#define CURBRK          _C_LABEL(__curbrk)
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.14 2003/04/17 03:47:38 drahn Exp $
d50 1
a50 1
			ENTRY(_thread_sys_ ## x)	\
d55 1
a55 1
			ENTRY(_thread_sys_/**/x)	\
@


1.14
log
@ELF fixups, ELF PIC syscall support, asm changes as requested by assembler.
@
text
@d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d32 1
a32 1
 *	$OpenBSD: SYS.h,v 1.13 2002/10/06 23:24:13 art Exp $
@


1.13
log
@Rename cerror to __cerror on i386 to avoid namespace pollution.
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.12 2002/06/10 17:44:38 fgsch Exp $
d74 3
d86 11
d101 1
a101 1
			jmp PIC_PLT(__cerror);		\
d104 1
d123 1
a123 1
	.globl	__cerror
@


1.12
log
@no more _NO_WEAK_ALIASES here.
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.11 2002/02/19 22:12:36 millert Exp $
d87 1
a87 1
			jmp PIC_PLT(cerror);		\
d108 1
a108 1
	.globl	cerror
@


1.11
log
@We need to keep K&R compat macros for some ports where the assemnbler is
still using -traditional-cpp.
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.10 2002/02/19 19:39:36 millert Exp $
a49 16
#ifdef _NO_WEAK_ALIASES

#ifdef _THREAD_SAFE
/* Use _thread_sys_{syscall} when compiled with -D_THREAD_SAFE */
#ifdef __STDC__
#define	SYSENTRY(x)	ENTRY(_thread_sys_ ## x)
#else /* ! __STDC__ */
#define	SYSENTRY(x)	ENTRY(_thread_sys_/**/x)
#endif /* ! __STDC__ */
#else /* ! _THREAD_SAFE */
/* Use {syscall} when compiling without -D_THREAD_SAFE */
#define SYSENTRY(x)	ENTRY(x)
#endif /* ! _THREAD_SAFE */

#else /* WEAK_ALIASES */

a62 1
#endif /* WEAK_ALIASES */
@


1.10
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.9 2001/09/20 20:52:09 millert Exp $
d54 1
d56 3
d68 1
d73 6
d81 1
d85 5
@


1.9
log
@Add PSEUDO_NOERROR similar to that used by NetBSD.
Some ports were setting errno in PSEUDO and some were not.  Now errno
is set for all in PSEUDO and PSEUDO_NOERROR is provided for the
non-errno case (only used by _exit).

Needs testing on vax and m88k.
XXX - hppa and powerpc still lack a real PSEUDO_NOERROR implementation.
Currently PSEUDO_NOERROR and PSEUDO are the same (so builds don't
break on those platforms).
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.8 2000/01/06 10:49:20 d Exp $
a53 1
#ifdef __STDC__
a54 3
#else /* ! __STDC__ */
#define	SYSENTRY(x)	ENTRY(_thread_sys_/**/x)
#endif /* ! __STDC__ */
a63 1
#ifdef __STDC__
a67 6
#else /* ! __STDC__ */
#define	SYSENTRY(x)					\
			ENTRY(_thread_sys_/**/x)	\
			.weak _C_LABEL(x);		\
			_C_LABEL(x) = _C_LABEL(_thread_sys_/**/x)
#endif /* ! __STDC__ */
a69 1
#ifdef __STDC__
a72 5
#else /* ! __STDC__ */
#define	__DO_SYSCALL(x)					\
			movl $(SYS_/**/x),%eax;		\
			int $0x80
#endif /* ! __STDC__ */
@


1.8
log
@ use 'x/**/y' as non-ansi concat, and not 'x /**/ y' - duh
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.7 2000/01/06 09:05:58 d Exp $
d91 8
d100 1
a100 1
#define	SYSCALL(x)					\
d105 1
a105 2
		SYSENTRY(x);				\
			__DO_SYSCALL(x);		\
d108 6
a113 3
/* perform a syscall, set errno, return */
#define	RSYSCALL(x)					\
			SYSCALL(x); 			\
d116 1
a116 1
/* perform a syscall, return */
d118 1
a118 2
		SYSENTRY(x);				\
			__DO_SYSCALL(y);		\
d120 4
@


1.7
log
@well. that wasnt tested very well.
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.6 2000/01/06 08:50:35 d Exp $
d57 1
a57 1
#define	SYSENTRY(x)	ENTRY(_thread_sys_ /**/ x)
@


1.6
log
@use weak symbols
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.5 1999/01/06 05:36:17 d Exp $
d81 1
d83 1
a83 1
			movl $(__CONCAT(SYS_,x)),%eax;	\
d85 5
@


1.5
log
@use indr_reference instead of PASSTHRU
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.4 1998/11/20 11:18:29 d Exp $
d42 26
d69 15
a83 12
# define    __ENTRY(p,x)	ENTRY(p##x)
# define    __DO_SYSCALL(x)				\
				movl $(SYS_##x),%eax;	\
				int $0x80
# define    __LABEL2(p,x)	_C_LABEL(p##x)
#else
# define    __ENTRY(p,x)	ENTRY(p/**/x)
# define    __DO_SYSCALL(x)				\
				movl $(SYS_/**/x),%eax;	\
				int $0x80
# define    __LABEL2(p,x)	_C_LABEL(p/**/x)
#endif
d86 1
a86 1
#define	    __SYSCALL(p,x)				\
d91 1
a91 1
		__ENTRY(p,x);				\
d96 3
a98 1
# define    __RSYSCALL(p,x)	__SYSCALL(p,x); ret
d101 2
a102 2
# define    __PSEUDO(p,x,y)				\
		__ENTRY(p,x);				\
a105 27
/*
 * Design note:
 *
 * When the syscalls need to be renamed so they can be handled
 * specially by the threaded library, these macros insert `_thread_sys_'
 * in front of their name. This avoids the need to #ifdef _THREAD_SAFE 
 * everywhere that the renamed function needs to be called.
 */
#ifdef _THREAD_SAFE
/*
 * For the thread_safe versions, we prepend _thread_sys_ to the function
 * name so that the 'C' wrapper can go around the real name.
 */
# define SYSCALL(x)	__SYSCALL(_thread_sys_,x)
# define RSYSCALL(x)	__RSYSCALL(_thread_sys_,x)
# define PSEUDO(x,y)	__PSEUDO(_thread_sys_,x,y)
# define SYSENTRY(x)	__ENTRY(_thread_sys_,x)
#else _THREAD_SAFE
/*
 * The non-threaded library defaults to traditional syscalls where
 * the function name matches the syscall name.
 */
# define SYSCALL(x)	__SYSCALL(,x)
# define RSYSCALL(x)	__RSYSCALL(,x)
# define PSEUDO(x,y)	__PSEUDO(,x,y)
# define SYSENTRY(x)	__ENTRY(,x)
#endif _THREAD_SAFE
@


1.4
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.3 1996/08/19 08:12:12 tholo Exp $
a74 7
/* jump to the real syscall */
/* XXX shouldn't be here */
# define    __PASSTHRU(p,x)				\
			.globl __LABEL2(p,x);		\
		ENTRY(x);				\
			jmp PIC_PLT(__LABEL2(p,x))

a81 2
 * The PASSTHRU macro is later used for system calls that don't need
 * wrapping. (XXX its a shame the loader can't do this aliasing)
a91 1
# define PASSTHRU(x)	__PASSTHRU(_thread_sys_,x)
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d36 1
a36 1
 *	$OpenBSD: SYS.h,v 1.2 1995/12/30 08:15:54 deraadt Exp $
d43 11
a53 11

#define	SYSCALL(x)	.text; .align 2; 2: jmp PIC_PLT(cerror); ENTRY(x); movl $(SYS_ ## x),%eax; int $0x80; jc 2b
#define	RSYSCALL(x)	SYSCALL(x); ret
#define	PSEUDO(x,y)	ENTRY(x); movl $(SYS_ ## y),%eax; int $0x80; ret

#else /* !__STDC__ */

#define	SYSCALL(x)	.text; .align 2; 2: jmp PIC_PLT(cerror); ENTRY(x); movl $(SYS_/**/x),%eax; int $0x80; jc 2b
#define	RSYSCALL(x)	SYSCALL(x); ret
#define	PSEUDO(x,y)	ENTRY(x); movl $(SYS_/**/y),%eax; int $0x80; ret

d56 56
@


1.2
log
@from netbsd: Removed unused CALL macro
@
text
@d36 1
a36 2
 *	from: @@(#)SYS.h	5.5 (Berkeley) 5/7/91
 *	$Id: SYS.h,v 1.9 1995/12/28 22:35:54 jtc Exp $
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
 *	$Id: SYS.h,v 1.7 1994/10/26 19:49:42 mycroft Exp $
d43 8
d54 2
a55 1
#define	CALL(x,y)	call PIC_PLT(_/**/y); addl $4*x,%esp
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
