head	1.27;
access;
symbols
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.27.0.6
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.2
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.25.0.10
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.6
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.21.0.24
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.22
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.20
	OPENBSD_5_0:1.21.0.18
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.16
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.14
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.10
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.12
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.8
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.6
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.10
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.8
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.6
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.4
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.19.0.4
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.16.0.2
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.15.0.10
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.8
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.15.0.6
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.15.0.4
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.15.0.2
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.27
date	2016.05.26.05.46.44;	author martijn;	state Exp;
branches;
next	1.26;
commitid	B6rfRcrBE1F6XXDC;

1.26
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.25;
commitid	QU70QaxjyBAtj4Rv;

1.25
date	2014.01.22.22.54.14;	author guenther;	state Exp;
branches;
next	1.24;

1.24
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.23;

1.23
date	2013.07.17.05.42.11;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.31.19.19.30;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2005.02.25.03.12.44;	author cloder;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.10.19.58.21;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.20.18.36;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.05.30.22.00.59;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2002.10.16.21.32.06;	author wcobb;	state Exp;
branches;
next	1.15;

1.15
date	2000.08.09.15.56.45;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.15.02.15.23;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.14.21.31.45;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2000.03.06.21.46.56;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.07.09.13.35.22;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.07.04.18.59.43;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.06.05.04.47.41;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.23.14.11.02;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.05.12.13.26.47;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.02.27.21.55.37;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.06.15.17.55.05;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.07.29.02.29.08;	author flipk;	state Exp;
branches;
next	1.3;

1.3
date	97.04.28.20.45.00;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.31.13;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.08;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Change the way regexec handles REG_STARTEND combined with REG_NOTBOL.
The new code sees this combination as a continuation of string at offset
pmatch[0].rm_so, instead of a new string which starts at that offset.
This change fixes a search quirk in vi and is needed for upcoming fixes in
ed/sed/vi.

This new behaviour is also used in gnu regex.

Lots of help from schwarze@@
Manpage bits by schwarze@@
OK schwarze@@ and millert@@
@
text
@.\"	$OpenBSD: regex.3,v 1.26 2015/11/10 23:48:18 jmc Exp $
.\"
.\" Copyright (c) 1997, Phillip F Knaack. All rights reserved.
.\"
.\" Copyright (c) 1992, 1993, 1994 Henry Spencer.
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Henry Spencer.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)regex.3	8.4 (Berkeley) 3/20/94
.\"
.Dd $Mdocdate: November 10 2015 $
.Dt REGEXEC 3
.Os
.Sh NAME
.Nm regcomp ,
.Nm regexec ,
.Nm regerror ,
.Nm regfree
.Nd regular expression routines
.Sh SYNOPSIS
.In sys/types.h
.In regex.h
.Ft int
.Fn regcomp "regex_t *preg" "const char *pattern" "int cflags"
.Pp
.Ft int
.Fn regexec "const regex_t *preg" "const char *string" "size_t nmatch" \
            "regmatch_t pmatch[]" "int eflags"
.Pp
.Ft size_t
.Fn regerror "int errcode" "const regex_t *preg" "char *errbuf" \
             "size_t errbuf_size"
.Pp
.Ft void
.Fn regfree "regex_t *preg"
.Sh DESCRIPTION
These routines implement
.St -p1003.2
regular expressions
.Pq Dq REs ;
see
.Xr re_format 7 .
.Fn regcomp
compiles an RE written as a string into an internal form,
.Fn regexec
matches that internal form against a string and reports results,
.Fn regerror
transforms error codes from either into human-readable messages, and
.Fn regfree
frees any dynamically allocated storage used by the internal form
of an RE.
.Pp
The header
.In regex.h
declares two structure types,
.Li regex_t
and
.Li regmatch_t ,
the former for compiled internal forms and the latter for match reporting.
It also declares the four functions,
a type
.Li regoff_t ,
and a number of constants with names starting with
.Dv REG_ .
.Pp
.Fn regcomp
compiles the regular expression contained in the
.Fa pattern
string,
subject to the flags in
.Fa cflags ,
and places the results in the
.Li regex_t
structure pointed to by
.Fa preg .
The
.Fa cflags
argument is the bitwise
.Tn OR
of zero or more of the following values:
.Bl -tag -width XREG_EXTENDEDX
.It Dv REG_EXTENDED
Compile modern
.Pq Dq extended
REs,
rather than the obsolete
.Pq Dq basic
REs that are the default.
.It Dv REG_BASIC
This is a synonym for 0,
provided as a counterpart to
.Dv REG_EXTENDED
to improve readability.
.It Dv REG_NOSPEC
Compile with recognition of all special characters turned off.
All characters are thus considered ordinary,
so the RE is a literal string.
This is an extension,
compatible with but not specified by
.St -p1003.2 ,
and should be used with
caution in software intended to be portable to other systems.
.Dv REG_EXTENDED
and
.Dv REG_NOSPEC
may not be used in the same call to
.Fn regcomp .
.It Dv REG_ICASE
Compile for matching that ignores upper/lower case distinctions.
See
.Xr re_format 7 .
.It Dv REG_NOSUB
Compile for matching that need only report success or failure,
not what was matched.
.It Dv REG_NEWLINE
Compile for newline-sensitive matching.
By default, newline is a completely ordinary character with no special
meaning in either REs or strings.
With this flag,
.Ql \&[^
bracket expressions and
.Ql \&.
never match newline,
a
.Ql ^
anchor matches the null string after any newline in the string
in addition to its normal function,
and the
.Ql $
anchor matches the null string before any newline in the
string in addition to its normal function.
.It Dv REG_PEND
The regular expression ends,
not at the first NUL,
but just before the character pointed to by the
.Fa re_endp
member of the structure pointed to by
.Fa preg .
The
.Fa re_endp
member is of type
.Fa const\ char\ * .
This flag permits inclusion of NULs in the RE;
they are considered ordinary characters.
This is an extension,
compatible with but not specified by
.St -p1003.2 ,
and should be used with
caution in software intended to be portable to other systems.
.El
.Pp
When successful,
.Fn regcomp
returns 0 and fills in the structure pointed to by
.Fa preg .
One member of that structure
(other than
.Fa re_endp )
is publicized:
.Fa re_nsub ,
of type
.Fa size_t ,
contains the number of parenthesized subexpressions within the RE
(except that the value of this member is undefined if the
.Dv REG_NOSUB
flag was used).
If
.Fn regcomp
fails, it returns a non-zero error code;
see DIAGNOSTICS.
.Pp
.Fn regexec
matches the compiled RE pointed to by
.Fa preg
against the
.Fa string ,
subject to the flags in
.Fa eflags ,
and reports results using
.Fa nmatch ,
.Fa pmatch ,
and the returned value.
The RE must have been compiled by a previous invocation of
.Fn regcomp .
The compiled form is not altered during execution of
.Fn regexec ,
so a single compiled RE can be used simultaneously by multiple threads.
.Pp
By default,
the NUL-terminated string pointed to by
.Fa string
is considered to be the text of an entire line, minus any terminating
newline.
The
.Fa eflags
argument is the bitwise
.Tn OR
of zero or more of the following values:
.Bl -tag -width XREG_STARTENDX
.It Dv REG_NOTBOL
The first character of the string is treated as the continuation
of a line.
This means that the anchors
.Ql ^ ,
.Ql [[:<:]] ,
and
.Ql \e<
do not match before it; but see
.Dv REG_STARTEND
below.
This does not affect the behavior of newlines under
.Dv REG_NEWLINE .
.It Dv REG_NOTEOL
The NUL terminating
the string
does not end a line, so the
.Ql $
anchor does not match before it.
This does not affect the behavior of newlines under
.Dv REG_NEWLINE .
.It Dv REG_STARTEND
The string is considered to start at
.Fa string No +
.Fa pmatch Ns [0]. Ns Fa rm_so
and to end before the byte located at
.Fa string No +
.Fa pmatch Ns [0]. Ns Fa rm_eo ,
regardless of the value of
.Fa nmatch .
See below for the definition of
.Fa pmatch
and
.Fa nmatch .
This is an extension,
compatible with but not specified by
.St -p1003.2 ,
and should be used with
caution in software intended to be portable to other systems.
.Pp
Without
.Dv REG_NOTBOL ,
the position
.Fa rm_so
is considered the beginning of a line, such that
.Ql ^
matches before it, and the beginning of a word if there is a word
character at this position, such that
.Ql [[:<:]]
and
.Ql \e<
match before it.
.Pp
With
.Dv REG_NOTBOL ,
the character at position
.Fa rm_so
is treated as the continuation of a line, and if
.Fa rm_so
is greater than 0, the preceding character is taken into consideration.
If the preceding character is a newline and the regular expression was compiled
with
.Dv REG_NEWLINE ,
.Ql ^
matches before the string; if the preceding character is not a word character
but the string starts with a word character,
.Ql [[:<:]]
and
.Ql \e<
match before the string.
.El
.Pp
See
.Xr re_format 7
for a discussion of what is matched in situations where an RE or a
portion thereof could match any of several substrings of
.Fa string .
.Pp
Normally,
.Fn regexec
returns 0 for success and the non-zero code
.Dv REG_NOMATCH
for failure.
Other non-zero error codes may be returned in exceptional situations;
see DIAGNOSTICS.
.Pp
If
.Dv REG_NOSUB
was specified in the compilation of the RE,
or if
.Fa nmatch
is 0,
.Fn regexec
ignores the
.Fa pmatch
argument (but see below for the case where
.Dv REG_STARTEND
is specified).
Otherwise,
.Fa pmatch
points to an array of
.Fa nmatch
structures of type
.Li regmatch_t .
Such a structure has at least the members
.Fa rm_so
and
.Fa rm_eo ,
both of type
.Fa regoff_t
(a signed arithmetic type at least as large as an
.Li off_t
and a
.Li ssize_t ) ,
containing respectively the offset of the first character of a substring
and the offset of the first character after the end of the substring.
Offsets are measured from the beginning of the
.Fa string
argument given to
.Fn regexec .
An empty substring is denoted by equal offsets,
both indicating the character following the empty substring.
.Pp
The 0th member of the
.Fa pmatch
array is filled in to indicate what substring of
.Fa string
was matched by the entire RE.
Remaining members report what substring was matched by parenthesized
subexpressions within the RE;
member
.Va i
reports subexpression
.Va i ,
with subexpressions counted (starting at 1) by the order of their opening
parentheses in the RE, left to right.
Unused entries in the array\(emcorresponding either to subexpressions that
did not participate in the match at all, or to subexpressions that do not
exist in the RE (that is, \fIi\fR\ > \fIpreg\fR\->\fIre_nsub\fR)\(emhave both
.Fa rm_so
and
.Fa rm_eo
set to \-1.
If a subexpression participated in the match several times,
the reported substring is the last one it matched.
(Note, as an example in particular, that when the RE
.Dq (b*)+
matches
.Dq bbb ,
the parenthesized subexpression matches each of the three
.Sq b Ns s
and then
an infinite number of empty strings following the last
.Sq b ,
so the reported substring is one of the empties.)
.Pp
If
.Dv REG_STARTEND
is specified,
.Fa pmatch
must point to at least one
.Li regmatch_t
(even if
.Fa nmatch
is 0 or
.Dv REG_NOSUB
was specified),
to hold the input offsets for
.Dv REG_STARTEND .
Use for output is still entirely controlled by
.Fa nmatch ;
if
.Fa nmatch
is 0 or
.Dv REG_NOSUB
was specified,
the value of
.Fa pmatch[0]
will not be changed by a successful
.Fn regexec .
.Pp
.Fn regerror
maps a non-zero
.Va errcode
from either
.Fn regcomp
or
.Fn regexec
to a human-readable, printable message.
If
.Fa preg
is non-NULL,
the error code should have arisen from use of
the
.Li regex_t
pointed to by
.Fa preg ,
and if the error code came from
.Fn regcomp ,
it should have been the result from the most recent
.Fn regcomp
using that
.Li regex_t .
.Pf ( Fn regerror
may be able to supply a more detailed message using information
from the
.Li regex_t . )
.Fn regerror
places the NUL-terminated message into the buffer pointed to by
.Fa errbuf ,
limiting the length (including the NUL) to at most
.Fa errbuf_size
bytes.
If the whole message won't fit,
as much of it as will fit before the terminating NUL is supplied.
In any case,
the returned value is the size of buffer needed to hold the whole
message (including the terminating NUL).
If
.Fa errbuf_size
is 0,
.Fa errbuf
is ignored but the return value is still correct.
.Pp
If the
.Fa errcode
given to
.Fn regerror
is first
.Tn OR Ns 'ed
with
.Dv REG_ITOA ,
the
.Dq message
that results is the printable name of the error code,
e.g.,
.Dq REG_NOMATCH ,
rather than an explanation thereof.
If
.Fa errcode
is
.Dv REG_ATOI ,
then
.Fa preg
shall be non-null and the
.Fa re_endp
member of the structure it points to
must point to the printable name of an error code;
in this case, the result in
.Fa errbuf
is the decimal digits of
the numeric value of the error code
(0 if the name is not recognized).
.Dv REG_ITOA
and
.Dv REG_ATOI
are intended primarily as debugging facilities;
they are extensions,
compatible with but not specified by
.St -p1003.2
and should be used with
caution in software intended to be portable to other systems.
Be warned also that they are considered experimental and changes are possible.
.Pp
.Fn regfree
frees any dynamically allocated storage associated with the compiled RE
pointed to by
.Fa preg .
The remaining
.Li regex_t
is no longer a valid compiled RE
and the effect of supplying it to
.Fn regexec
or
.Fn regerror
is undefined.
.Pp
None of these functions references global variables except for tables
of constants;
all are safe for use from multiple threads if the arguments are safe.
.Sh IMPLEMENTATION CHOICES
There are a number of decisions that
.St -p1003.2
leaves up to the implementor,
either by explicitly saying
.Dq undefined
or by virtue of them being
forbidden by the RE grammar.
This implementation treats them as follows.
.Pp
See
.Xr re_format 7
for a discussion of the definition of case-independent matching.
.Pp
There is no particular limit on the length of REs,
except insofar as memory is limited.
Memory usage is approximately linear in RE size, and largely insensitive
to RE complexity, except for bounded repetitions.
See
.Sx BUGS
for one short RE using them
that will run almost any system out of memory.
.Pp
A backslashed character other than one specifically given a magic meaning
by
.St -p1003.2
(such magic meanings occur only in obsolete REs)
is taken as an ordinary character.
.Pp
Any unmatched
.Ql \&[
is a
.Dv REG_EBRACK
error.
.Pp
Equivalence classes cannot begin or end bracket-expression ranges.
The endpoint of one range cannot begin another.
.Pp
RE_DUP_MAX, the limit on repetition counts in bounded repetitions, is 255.
.Pp
A repetition operator (?, *, +, or bounds) cannot follow another
repetition operator.
A repetition operator cannot begin an expression or subexpression
or follow
.Ql ^
or
.Ql | .
.Pp
A
.Ql |
cannot appear first or last in a (sub)expression, or after another
.Ql | ,
i.e., an operand of
.Ql |
cannot be an empty subexpression.
An empty parenthesized subexpression,
.Ql \&(\&) ,
is legal and matches an
empty (sub)string.
An empty string is not a legal RE.
.Pp
A
.Ql {
followed by a digit is considered the beginning of bounds for a
bounded repetition, which must then follow the syntax for bounds.
A
.Ql {
.Em not
followed by a digit is considered an ordinary character.
.Pp
.Ql ^
and
.Ql $
beginning and ending subexpressions in obsolete
.Pq Dq basic
REs are anchors, not ordinary characters.
.Sh DIAGNOSTICS
Non-zero error codes from
.Fn regcomp
and
.Fn regexec
include the following:
.Pp
.Bl -tag -compact -width XREG_ECOLLATEX
.It Er REG_NOMATCH
regexec() failed to match
.It Er REG_BADPAT
invalid regular expression
.It Er REG_ECOLLATE
invalid collating element
.It Er REG_ECTYPE
invalid character class
.It Er REG_EESCAPE
\e applied to unescapable character
.It Er REG_ESUBREG
invalid backreference number
.It Er REG_EBRACK
brackets [ ] not balanced
.It Er REG_EPAREN
parentheses ( ) not balanced
.It Er REG_EBRACE
braces { } not balanced
.It Er REG_BADBR
invalid repetition count(s) in { }
.It Er REG_ERANGE
invalid character range in [ ]
.It Er REG_ESPACE
ran out of memory
.It Er REG_BADRPT
?, *, or + operand invalid
.It Er REG_EMPTY
empty (sub)expression
.It Er REG_ASSERT
.Dq can't happen
\(emyou found a bug
.It Er REG_INVARG
invalid argument, e.g., negative-length string
.El
.Sh SEE ALSO
.Xr grep 1 ,
.Xr re_format 7
.Pp
.St -p1003.2 ,
sections 2.8 (Regular Expression Notation)
and
B.5 (C Binding for Regular Expression Matching).
.Sh HISTORY
Predecessors to
.Fn regcomp
and
.Fn regexec ,
.Fn regcmp
and
.Fn regex ,
first appeared in the Programmer's Workbench (PWB/UNIX).
.Pp
The present functions were originally written by Henry Spencer
and altered for inclusion in the
.Bx 4.4
distribution.
.Sh BUGS
This is an alpha release with known defects.
Please report problems.
.Pp
There is one known functionality bug.
The implementation of internationalization is incomplete:
the locale is always assumed to be the default one of
.St -p1003.2 ,
and only the collating elements etc. of that locale are available.
.Pp
The back-reference code is subtle and doubts linger about its correctness
in complex cases.
.Pp
.Fn regexec
performance is poor.
This will improve with later releases.
.Fa nmatch
exceeding 0 is expensive;
.Fa nmatch
exceeding 1 is worse.
.Fn regexec
is largely insensitive to RE complexity
.Em except
that back references are massively expensive.
RE length does matter; in particular, there is a strong speed bonus
for keeping RE length under about 30 characters,
with most special characters counting roughly double.
.Pp
.Fn regcomp
implements bounded repetitions by macro expansion,
which is costly in time and space if counts are large
or bounded repetitions are nested.
A RE like, say,
.Dq ((((a{1,100}){1,100}){1,100}){1,100}){1,100}
will (eventually) run almost any existing machine out of swap space.
.Pp
There are suspected problems with response to obscure error conditions.
Notably,
certain kinds of internal overflow,
produced only by truly enormous REs or by multiply nested bounded repetitions,
are probably not handled well.
.Pp
Due to a mistake in
.St -p1003.2 ,
things like
.Ql a)b
are legal REs because
.Ql \&)
is
a special character only in the presence of a previous unmatched
.Ql \&( .
This can't be fixed until the spec is fixed.
.Pp
The standard's definition of back references is vague.
For example, does
.Dq a\e(\e(b\e)*\e2\e)*d
match
.Dq abbbd ?
Until the standard is clarified,
behavior in such cases should not be relied on.
.Pp
The implementation of word-boundary matching is a bit of a kludge,
and bugs may lurk in combinations of word-boundary matching and anchoring.
@


1.26
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.25 2014/01/22 22:54:14 guenther Exp $
d38 1
a38 1
.Dd $Mdocdate: January 22 2014 $
d228 10
a237 5
The first character of
the string
is not the beginning of a line, so the
.Ql ^
anchor should not match before it.
d245 1
a245 1
anchor should not match before it.
d250 5
a254 4
\fIstring\fR\ + \fIpmatch\fR[0].\fIrm_so\fR
and to have a terminating NUL located at
\fIstring\fR\ + \fIpmatch\fR[0].\fIrm_eo\fR
(there need not actually be a NUL at that location),
d266 31
a296 5
Note that a non-zero \fIrm_so\fR does not imply
.Dv REG_NOTBOL ;
.Dv REG_STARTEND
affects only the location of the string,
not how it is matched.
@


1.25
log
@Use consistent phrasing for bitmask flags.

tweaking and ok millert@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.24 2014/01/21 03:15:45 schwarze Exp $
d38 2
a39 2
.Dd $Mdocdate: January 21 2014 $
.Dt REGEX 3
@


1.24
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.23 2013/07/17 05:42:11 schwarze Exp $
d38 1
a38 1
.Dd $Mdocdate: July 17 2013 $
d103 1
d105 1
a105 1
is the bitwise
d107 1
a107 1
of zero or more of the following flags:
d225 1
a225 1
of zero or more of the following flags:
@


1.23
log
@more library history
facts checked by sobrado@@
style tweaks and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.22 2013/06/05 03:39:23 tedu Exp $
d38 1
a38 1
.Dd $Mdocdate: June 5 2013 $
d81 1
a81 1
.Aq Pa regex.h
@


1.22
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.21 2007/05/31 19:19:30 jmc Exp $
d38 1
a38 1
.Dd $Mdocdate: May 31 2007 $
d601 11
a611 2
Originally written by Henry Spencer.
Altered for inclusion in the
@


1.21
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.20 2005/02/25 03:12:44 cloder Exp $
d38 1
a38 1
.Dd $Mdocdate$
d48 2
a49 2
.Fd #include <sys/types.h>
.Fd #include <regex.h>
@


1.20
log
@Be correct in our man pages when talking about NUL termination (that is,
termination with '\0') vs. null termination.
Input from krw@@, jaredy@@, jmc@@.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.19 2004/02/10 19:58:21 jmc Exp $
d38 1
a38 1
.Dd March 20, 1994
@


1.19
log
@improve Nd; from millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.18 2003/06/02 20:18:36 millert Exp $
d216 1
a216 1
the null-terminated string pointed to by
d402 1
a402 1
places the null-terminated message into the buffer pointed to by
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.17 2003/05/30 22:00:59 jmc Exp $
d46 1
a46 1
.Nd regular-expression library
@


1.17
log
@section reorder;
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.16 2002/10/16 21:32:06 wcobb Exp $
d20 1
a20 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.16
log
@- don't use the function enclosure macros.
- replace `POSIX 1003.2' instances with St -p1003.2.
ok mpech@@, millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.15 2000/08/09 15:56:45 aaron Exp $
a553 8
.Sh SEE ALSO
.Xr grep 1 ,
.Xr re_format 7
.Pp
.St -p1003.2 ,
sections 2.8 (Regular Expression Notation)
and
B.5 (C Binding for Regular Expression Matching).
d596 8
@


1.15
log
@More of the same.
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.14 2000/04/15 02:15:23 aaron Exp $
d54 13
a66 21
.Fo "int regcomp"
.Fa "regex_t *preg"
.Fa "const char *pattern"
.Fa "int cflags"
.Fc
.Fo "int regexec"
.Fa "const regex_t *preg"
.Fa "const char *string"
.Fa "size_t nmatch"
.Fa "regmatch_t pmatch[]"
.Fa "int eflags"
.Fc
.Fo "size_t regerror"
.Fa "int errcode"
.Fa "const regex_t *preg"
.Fa "char *errbuf"
.Fa "size_t errbuf_size"
.Fc
.Fo "void regfree"
.Fa "regex_t *preg"
.Fc
d68 3
a70 1
These routines implement POSIX 1003.2 regular expressions
d129 2
a130 1
compatible with but not specified by POSIX 1003.2,
d176 2
a177 1
compatible with but not specified by POSIX 1003.2,
d259 2
a260 1
compatible with but not specified by POSIX 1003.2,
d456 2
a457 1
compatible with but not specified by POSIX 1003.2,
d479 3
a481 1
There are a number of decisions that 1003.2 leaves up to the implementor,
d502 3
a504 1
by 1003.2 (such magic meanings occur only in obsolete REs)
d558 2
a559 1
POSIX 1003.2, sections 2.8 (Regular Expression Notation)
d615 2
a616 1
the locale is always assumed to be the default one of 1003.2,
d651 3
a653 1
Due to a mistake in 1003.2, things like
@


1.14
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.13 2000/03/14 21:31:45 aaron Exp $
d46 4
a49 1
.Nm regcomp, regexec, regerror, regfree
@


1.13
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.12 2000/03/06 21:46:56 aaron Exp $
d311 1
a311 1
.Li ssize_t ),
@


1.12
log
@Do not leave `(' characters dangling at the end of lines; instead, use the
appropriate mdoc macros to handle these cases.
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.11 1999/07/09 13:35:22 aaron Exp $
d596 1
a596 1
invalid argument, e.g. negative-length string
@


1.11
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.10 1999/07/04 18:59:43 aaron Exp $
d400 2
a401 2
.Li regex_t . (
.Fn regerror
@


1.10
log
@trash some old leftover macros and replace them with -mdoc macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.9 1999/06/05 04:47:41 aaron Exp $
d553 1
a553 1
POSIX 1003.2, sections 2.8 (Regular Expression Notation) 
d623 1
a623 1
is largely insensitive to RE complexity 
@


1.9
log
@use .Tn instead of .Em for logical/bitwise OR + AND
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.8 1999/05/23 14:11:02 aaron Exp $
d309 1
a309 1
.I off_t
d324 1
a324 1
.I string
@


1.8
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.7 1999/05/12 13:26:47 aaron Exp $
d73 2
a74 1
These routines implement POSIX 1003.2 regular expressions (``RE''s);
d88 1
a88 1
.Em <regex.h>
d90 1
a90 1
.Em regex_t
d92 1
a92 1
.Em regmatch_t ,
d96 3
a98 2
.Em regoff_t ,
and a number of constants with names starting with ``REG_''.
d107 1
a107 1
.Em regex_t
d111 3
a113 1
is the bitwise OR of zero or more of the following flags:
d115 8
a122 5
.It REG_EXTENDED
Compile modern (``extended'') REs,
rather than the obsolete (``basic'') REs that
are the default.
.It REG_BASIC
d124 4
a127 2
provided as a counterpart to REG_EXTENDED to improve readability.
.It REG_NOSPEC
d130 1
a130 1
so the ``RE'' is a literal string.
d135 4
a138 2
REG_EXTENDED and REG_NOSPEC may not be used
in the same call to
d140 1
a140 1
.It REG_ICASE
d144 1
a144 1
.It REG_NOSUB
d147 1
a147 1
.It REG_NEWLINE
d152 7
a158 2
`[^' bracket expressions and `.' never match newline,
a `^' anchor matches the null string after any newline in the string
d160 3
a162 1
and the `$' anchor matches the null string before any newline in the
d164 1
a164 1
.It REG_PEND
d196 2
a197 1
REG_NOSUB flag was used).
d221 1
a221 1
the NUL-terminated string pointed to by
d227 3
a229 1
argument is the bitwise OR of zero or more of the following flags:
d231 1
a231 1
.It REG_NOTBOL
d234 6
a239 3
is not the beginning of a line, so the `^' anchor should not match before it.
This does not affect the behavior of newlines under REG_NEWLINE.
.It REG_NOTEOL
d242 6
a247 3
does not end a line, so the `$' anchor should not match before it.
This does not affect the behavior of newlines under REG_NEWLINE.
.It REG_STARTEND
d263 4
a266 2
Note that a non-zero \fIrm_so\fR does not imply REG_NOTBOL;
REG_STARTEND affects only the location of the string,
d278 3
a280 1
returns 0 for success and the non-zero code REG_NOMATCH for failure.
d284 3
a286 1
If REG_NOSUB was specified in the compilation of the RE,
d293 3
a295 1
argument (but see below for the case where REG_STARTEND is specified).
d301 1
a301 1
.Em regmatch_t .
d311 1
a311 1
.Em ssize_t ),
d343 9
a351 3
(Note, as an example in particular, that when the RE `(b*)+' matches `bbb',
the parenthesized subexpression matches each of the three `b's and then
an infinite number of empty strings following the last `b',
d354 3
a356 1
If REG_STARTEND is specified,
d359 1
a359 1
.Em regmatch_t
d362 5
a366 2
is 0 or REG_NOSUB was specified),
to hold the input offsets for REG_STARTEND.
d371 3
a373 1
is 0 or REG_NOSUB was specified,
d392 1
a392 1
.Em regex_t
d400 1
a400 1
.Em regex_t . (
d404 1
a404 1
.Em regex_t . )
d406 1
a406 1
places the NUL-terminated message into the buffer pointed to by
d415 1
a415 1
message (including terminating NUL).
d426 9
a434 3
is first ORed with REG_ITOA,
the ``message'' that results is the printable name of the error code,
e.g. ``REG_NOMATCH'',
d438 2
a439 1
is REG_ATOI,
d442 1
a442 1
shall be non-NULL and the
d451 4
a454 1
REG_ITOA and REG_ATOI are intended primarily as debugging facilities;
d466 1
a466 1
.Em regex_t
d479 3
a481 1
either by explicitly saying ``undefined'' or by virtue of them being
d499 1
a499 1
by 1003.2 (such magic meanings occur only in obsolete [``basic''] REs)
d502 5
a506 1
Any unmatched `[' is a REG_EBRACK error.
d516 4
a519 1
or follow `^' or `|'.
d521 10
a530 3
`|' cannot appear first or last in a (sub)expression or after another `|',
i.e. an operand of `|' cannot be an empty subexpression.
An empty parenthesized subexpression, `()', is legal and matches an
d534 3
a536 1
A `{' followed by a digit is considered the beginning of bounds for a
d538 4
a541 1
A `{' \fInot\fR followed by a digit is considered an ordinary character.
d543 5
a547 1
`^' and `$' beginning and ending subexpressions in obsolete (``basic'')
d593 2
a594 1
``can't happen''\(emyou found a bug
d634 2
a635 2
An RE like, say,
`((((a{1,100}){1,100}){1,100}){1,100}){1,100}'
d644 7
a650 2
Due to a mistake in 1003.2, things like `a)b' are legal REs because `)' is
a special character only in the presence of a previous unmatched `('.
d655 3
a657 1
`a\e(\e(b\e)*\e2\e)*d' match `abbbd'?
@


1.7
log
@grammar police: do not hyphenate compound words that act as adjectives if the
first word ends in -ly

i.e., fully-qualified, newly-created, globally-visible, etc. are wrong
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.6 1999/02/27 21:55:37 deraadt Exp $
d44 1
a44 1
.Os OpenBSD
@


1.6
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.5 1998/06/15 17:55:05 mickey Exp $
d83 1
a83 1
frees any dynamically-allocated storage used by the internal form
d404 1
a404 1
frees any dynamically-allocated storage associated with the compiled RE
@


1.5
log
@use Bx macro for BSD versions
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.4 1997/07/29 02:29:08 flipk Exp $
d76 1
a76 1
.Fn Regcomp
d98 1
a98 1
.Fn Regcomp
d108 1
a108 1
.Fa Cflags
d184 1
a184 1
.Fn Regexec
d331 1
a331 1
.Fn Regerror
d353 1
a353 1
.Fn Regerror
d357 1
a357 1
.Fn Regerror
d403 1
a403 1
.Fn Regfree
d531 1
a531 1
.Fn Regexec
d534 1
a534 1
.Fa Nmatch
d538 1
a538 1
.Fn Regexec
d546 1
a546 1
.Fn Regcomp
@


1.4
log
@convert to mdoc format
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.3 1997/04/28 20:45:00 millert Exp $
d516 3
a518 1
Altered for inclusion in the 4.4BSD distribution.
@


1.3
log
@- cast usages of *printf() to void since we don't check return val
- move an assert to be *before* a strcpy() where it can do some good.
- integrate NetBSD fixes for 64-bit machines (NetBSD PR #3450, Ross Harvey)
- add lite2 tags
@
text
@d1 3
a3 1
.\"	$OpenBSD: regex.3,v 1.2 1996/08/19 08:31:13 tholo Exp $
d42 31
a72 26
.TH REGEX 3 "March 20, 1994"
.de ZR
.\" one other place knows this name:  the SEE ALSO section
.IR re_format (7) \\$1
..
.SH NAME
regcomp, regexec, regerror, regfree \- regular-expression library
.SH SYNOPSIS
.ft B
.\".na
#include <sys/types.h>
.br
#include <regex.h>
.HP 10
int regcomp(regex_t\ *preg, const\ char\ *pattern, int\ cflags);
.HP
int\ regexec(const\ regex_t\ *preg, const\ char\ *string,
size_t\ nmatch, regmatch_t\ pmatch[], int\ eflags);
.HP
size_t\ regerror(int\ errcode, const\ regex_t\ *preg,
char\ *errbuf, size_t\ errbuf_size);
.HP
void\ regfree(regex_t\ *preg);
.\".ad
.ft
.SH DESCRIPTION
d75 2
a76 2
.ZR .
.I Regcomp
d78 1
a78 1
.I regexec
d80 3
a82 4
.I regerror
transforms error codes from either into human-readable messages,
and
.I regfree
d85 1
a85 1
.PP
d87 1
a87 1
.I <regex.h>
d89 1
a89 1
.I regex_t
d91 1
a91 1
.IR regmatch_t ,
d95 1
a95 1
.IR regoff_t ,
d97 2
a98 2
.PP
.I Regcomp
d100 1
a100 1
.I pattern
d103 1
a103 1
.IR cflags ,
d105 1
a105 1
.I regex_t
d107 2
a108 2
.IR preg .
.I Cflags
d110 2
a111 1
.IP REG_EXTENDED \w'REG_EXTENDED'u+2n
d115 1
a115 1
.IP REG_BASIC
d118 1
a118 1
.IP REG_NOSPEC
d128 2
a129 2
.IR regcomp .
.IP REG_ICASE
d132 2
a133 2
.ZR .
.IP REG_NOSUB
d136 1
a136 1
.IP REG_NEWLINE
d146 1
a146 1
.IP REG_PEND
d150 1
a150 1
.I re_endp
d152 1
a152 1
.IR preg .
d154 1
a154 1
.I re_endp
d156 1
a156 1
.IR const\ char\ * .
d163 2
a164 1
.PP
d166 1
a166 1
.I regcomp
d168 1
a168 1
.IR preg .
d171 1
a171 1
.IR re_endp )
d173 1
a173 1
.IR re_nsub ,
d175 1
a175 1
.IR size_t ,
d180 1
a180 1
.I regcomp
d183 2
a184 2
.PP
.I Regexec
d186 1
a186 1
.I preg
d188 1
a188 1
.IR string ,
d190 1
a190 1
.IR eflags ,
d192 2
a193 2
.IR nmatch ,
.IR pmatch ,
d196 1
a196 1
.IR regcomp .
d198 1
a198 1
.IR regexec ,
d200 1
a200 1
.PP
d203 1
a203 1
.I string
d207 1
a207 1
.I eflags
d209 2
a210 1
.IP REG_NOTBOL \w'REG_STARTEND'u+2n
d215 1
a215 1
.IP REG_NOTEOL
d220 1
a220 1
.IP REG_STARTEND
d227 1
a227 1
.IR nmatch .
d229 1
a229 1
.IR pmatch
d231 1
a231 1
.IR nmatch .
d239 2
a240 1
.PP
d242 1
a242 1
.ZR
d245 2
a246 2
.IR string .
.PP
d248 1
a248 1
.I regexec
d252 1
a252 1
.PP
d255 1
a255 1
.I nmatch
d257 1
a257 1
.I regexec
d259 1
a259 1
.I pmatch
d262 1
a262 1
.I pmatch
d264 1
a264 1
.I nmatch
d266 1
a266 1
.IR regmatch_t .
d268 1
a268 1
.I rm_so
d270 1
a270 1
.IR rm_eo ,
d272 1
a272 1
.I regoff_t
d276 1
a276 1
.IR ssize_t ),
d280 1
a280 1
.I string
d282 1
a282 1
.IR regexec .
d285 1
a285 1
.PP
d287 1
a287 1
.I pmatch
d294 1
a294 1
.I i
d296 1
a296 1
.IR i ,
d302 1
a302 1
.I rm_so
d304 1
a304 1
.I rm_eo
d312 1
a312 1
.PP
d314 1
a314 1
.I pmatch
d316 1
a316 1
.I regmatch_t
d318 1
a318 1
.I nmatch
d322 1
a322 1
.IR nmatch ;
d324 1
a324 1
.I nmatch
d327 1
a327 1
.IR pmatch [0]
d329 3
a331 3
.IR regexec .
.PP
.I Regerror
d333 1
a333 1
.I errcode
d335 1
a335 1
.I regcomp
d337 1
a337 1
.I regexec
d340 1
a340 1
.I preg
d344 1
a344 1
.I regex_t
d346 1
a346 1
.IR preg ,
d348 1
a348 1
.IR regcomp ,
d350 1
a350 1
.I regcomp
d352 2
a353 2
.IR regex_t .
.RI ( Regerror
d356 2
a357 2
.IR regex_t .)
.I Regerror
d359 1
a359 1
.IR errbuf ,
d361 1
a361 1
.I errbuf_size
d369 1
a369 1
.I errbuf_size
d371 1
a371 1
.I errbuf
d373 1
a373 1
.PP
d375 1
a375 1
.I errcode
d377 1
a377 1
.I regerror
d383 1
a383 1
.I errcode
d386 1
a386 1
.I preg
d388 1
a388 1
.I re_endp
d392 1
a392 1
.I errbuf
d402 2
a403 2
.PP
.I Regfree
d406 1
a406 1
.IR preg .
d408 1
a408 1
.I regex_t
d411 1
a411 1
.I regexec
d413 1
a413 1
.I regerror
d415 1
a415 1
.PP
d419 1
a419 1
.SH IMPLEMENTATION CHOICES
d424 1
a424 1
.PP
d426 1
a426 1
.ZR
d428 1
a428 1
.PP
d433 3
a435 1
See BUGS for one short RE using them
d437 1
a437 1
.PP
d441 3
a443 3
.PP
Any unmatched [ is a REG_EBRACK error.
.PP
d446 1
a446 1
.PP
d448 1
a448 1
.PP
d453 1
a453 1
.PP
d459 1
a459 1
.PP
d463 1
a463 1
.PP
d466 5
a470 4
.SH SEE ALSO
grep(1), re_format(7)
.PP
POSIX 1003.2, sections 2.8 (Regular Expression Notation)
d473 1
a473 1
.SH DIAGNOSTICS
d475 1
a475 1
.I regcomp
d477 1
a477 1
.I regexec
d479 36
a514 21
.PP
.nf
.ta \w'REG_ECOLLATE'u+3n
REG_NOMATCH	regexec() failed to match
REG_BADPAT	invalid regular expression
REG_ECOLLATE	invalid collating element
REG_ECTYPE	invalid character class
REG_EESCAPE	\e applied to unescapable character
REG_ESUBREG	invalid backreference number
REG_EBRACK	brackets [ ] not balanced
REG_EPAREN	parentheses ( ) not balanced
REG_EBRACE	braces { } not balanced
REG_BADBR	invalid repetition count(s) in { }
REG_ERANGE	invalid character range in [ ]
REG_ESPACE	ran out of memory
REG_BADRPT	?, *, or + operand invalid
REG_EMPTY	empty (sub)expression
REG_ASSERT	``can't happen''\(emyou found a bug
REG_INVARG	invalid argument, e.g. negative-length string
.fi
.SH HISTORY
d517 1
a517 1
.SH BUGS
d520 1
a520 1
.PP
d525 1
a525 1
.PP
d528 2
a529 2
.PP
.I Regexec
d532 1
a532 1
.I Nmatch
d534 1
a534 1
.I nmatch
d536 4
a539 3
.I Regexec
is largely insensitive to RE complexity \fIexcept\fR that back
references are massively expensive.
d543 2
a544 2
.PP
.I Regcomp
d551 1
a551 1
.PP
d557 1
a557 1
.PP
d561 1
a561 1
.PP
d567 1
a567 1
.PP
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
.\"	$OpenBSD: regex.3,v 1.4 1995/02/27 13:29:31 cgd Exp $
d37 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: regex.3,v 1.4 1995/02/27 13:29:31 cgd Exp $
a36 2
.\"
.\"	@@(#)regex.3	8.4 (Berkeley) 3/20/94
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
