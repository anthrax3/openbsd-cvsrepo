head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.8
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.44
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.36
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.40
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.38
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.34
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.32
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.30
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.28
	OPENBSD_5_0:1.13.0.26
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.24
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.22
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.18
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.20
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.16
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.14
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.12
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.10
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.8
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.14
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.12
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.10
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.11.01.03.45.29;	author guenther;	state Exp;
branches;
next	1.13;
commitid	CfNWDWdDpm7mVO8i;

1.13
date	2005.08.05.13.03.00;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.30.17.04.23;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.17.17.58.54;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.20.18.36;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.25.09.11.02;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.24.21.22.37;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.24;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.27.00.58.55;	author lebel;	state Exp;
branches;
next	1.5;

1.5
date	98.03.19.00.30.10;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.04.28.20.44.59;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.15.09.31.26;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.31.11;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.08;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@delete old lint ARGSUSED comments
@
text
@/*	$OpenBSD: regerror.c,v 1.13 2005/08/05 13:03:00 espie Exp $ */
/*-
 * Copyright (c) 1992, 1993, 1994 Henry Spencer.
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Henry Spencer.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)regerror.c	8.4 (Berkeley) 3/20/94
 */

#include <sys/types.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <limits.h>
#include <stdlib.h>
#include <regex.h>

#include "utils.h"

static char *regatoi(const regex_t *, char *, int);

static struct rerr {
	int code;
	char *name;
	char *explain;
} rerrs[] = {
	{ REG_NOMATCH,	"REG_NOMATCH",	"regexec() failed to match" },
	{ REG_BADPAT,	"REG_BADPAT",	"invalid regular expression" },
	{ REG_ECOLLATE,	"REG_ECOLLATE",	"invalid collating element" },
	{ REG_ECTYPE,	"REG_ECTYPE",	"invalid character class" },
	{ REG_EESCAPE,	"REG_EESCAPE",	"trailing backslash (\\)" },
	{ REG_ESUBREG,	"REG_ESUBREG",	"invalid backreference number" },
	{ REG_EBRACK,	"REG_EBRACK",	"brackets ([ ]) not balanced" },
	{ REG_EPAREN,	"REG_EPAREN",	"parentheses not balanced" },
	{ REG_EBRACE,	"REG_EBRACE",	"braces not balanced" },
	{ REG_BADBR,	"REG_BADBR",	"invalid repetition count(s)" },
	{ REG_ERANGE,	"REG_ERANGE",	"invalid character range" },
	{ REG_ESPACE,	"REG_ESPACE",	"out of memory" },
	{ REG_BADRPT,	"REG_BADRPT",	"repetition-operator operand invalid" },
	{ REG_EMPTY,	"REG_EMPTY",	"empty (sub)expression" },
	{ REG_ASSERT,	"REG_ASSERT",	"\"can't happen\" -- you found a bug" },
	{ REG_INVARG,	"REG_INVARG",	"invalid argument to regex routine" },
	{ 0,		"",		"*** unknown regexp error code ***" }
};

/*
 - regerror - the interface to error numbers
 = extern size_t regerror(int, const regex_t *, char *, size_t);
 */
size_t
regerror(int errcode, const regex_t *preg, char *errbuf, size_t errbuf_size)
{
	struct rerr *r;
	size_t len;
	int target = errcode &~ REG_ITOA;
	char *s;
	char convbuf[50];

	if (errcode == REG_ATOI)
		s = regatoi(preg, convbuf, sizeof convbuf);
	else {
		for (r = rerrs; r->code != 0; r++)
			if (r->code == target)
				break;
	
		if (errcode&REG_ITOA) {
			if (r->code != 0) {
				assert(strlen(r->name) < sizeof(convbuf));
				(void) strlcpy(convbuf, r->name, sizeof convbuf);
			} else
				(void)snprintf(convbuf, sizeof convbuf,
				    "REG_0x%x", target);
			s = convbuf;
		} else
			s = r->explain;
	}

	len = strlen(s) + 1;
	if (errbuf_size > 0) {
		strlcpy(errbuf, s, errbuf_size);
	}

	return(len);
}

/*
 - regatoi - internal routine to implement REG_ATOI
 */
static char *
regatoi(const regex_t *preg, char *localbuf, int localbufsize)
{
	struct rerr *r;

	for (r = rerrs; r->code != 0; r++)
		if (strcmp(r->name, preg->re_endp) == 0)
			break;
	if (r->code == 0)
		return("0");

	(void)snprintf(localbuf, localbufsize, "%d", r->code);
	return(localbuf);
}
@


1.13
log
@zap rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a76 1
/* ARGSUSED */
@


1.12
log
@remove useless comments, once used for header file generation and delete
parameter names from prototypes. ok millert@@
@
text
@d1 1
a35 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)regerror.c	8.4 (Berkeley) 3/20/94";
#else
static char rcsid[] = "$OpenBSD: regerror.c,v 1.11 2004/10/17 17:58:54 otto Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.11
log
@ansify and deregister; no change in obj code. ok millert@@
@
text
@d40 1
a40 1
static char rcsid[] = "$OpenBSD: regerror.c,v 1.10 2003/06/02 20:18:36 millert Exp $";
d54 1
a54 7
/* ========= begin header generated by ./mkh ========= */
#ifdef __cplusplus
extern "C" {
#endif

/* === regerror.c === */
static char *regatoi(const regex_t *preg, char *localbuf, int localbufsize);
a55 24
#ifdef __cplusplus
}
#endif
/* ========= end header generated by ./mkh ========= */
/*
 = #define	REG_NOMATCH	 1
 = #define	REG_BADPAT	 2
 = #define	REG_ECOLLATE	 3
 = #define	REG_ECTYPE	 4
 = #define	REG_EESCAPE	 5
 = #define	REG_ESUBREG	 6
 = #define	REG_EBRACK	 7
 = #define	REG_EPAREN	 8
 = #define	REG_EBRACE	 9
 = #define	REG_BADBR	10
 = #define	REG_ERANGE	11
 = #define	REG_ESPACE	12
 = #define	REG_BADRPT	13
 = #define	REG_EMPTY	14
 = #define	REG_ASSERT	15
 = #define	REG_INVARG	16
 = #define	REG_ATOI	255	// convert name to number (!)
 = #define	REG_ITOA	0400	// convert number to name (!)
 */
a122 1
 == static char *regatoi(const regex_t *preg, char *localbuf);
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d40 1
a40 1
static char rcsid[] = "$OpenBSD: regerror.c,v 1.9 2002/05/25 09:11:02 deraadt Exp $";
d116 1
a116 5
regerror(errcode, preg, errbuf, errbuf_size)
int errcode;
const regex_t *preg;
char *errbuf;
size_t errbuf_size;
d118 4
a121 4
	register struct rerr *r;
	register size_t len;
	register int target = errcode &~ REG_ITOA;
	register char *s;
d156 1
a156 4
regatoi(preg, localbuf, localbufsize)
const regex_t *preg;
char *localbuf;
int localbufsize;
d158 1
a158 1
	register struct rerr *r;
@


1.9
log
@remaining easy snprintf conversions
@
text
@d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: regerror.c,v 1.8 2002/05/24 21:22:37 deraadt Exp $";
@


1.8
log
@try to use strlcpy and snprintf more; ok various
@
text
@d44 1
a44 1
static char rcsid[] = "$OpenBSD: regerror.c,v 1.7 2002/02/16 21:27:24 millert Exp $";
d64 1
a64 1
static char *regatoi(const regex_t *preg, char *localbuf);
d133 1
a133 1
		s = regatoi(preg, convbuf);
d144 2
a145 1
				(void)sprintf(convbuf, "REG_0x%x", target);
d164 1
a164 1
regatoi(preg, localbuf)
d167 1
d177 1
a177 1
	(void)sprintf(localbuf, "%d", r->code);
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d44 1
a44 1
static char rcsid[] = "$OpenBSD: regerror.c,v 1.6 2001/06/27 00:58:55 lebel Exp $";
d142 1
a142 1
				(void) strcpy(convbuf, r->name);
@


1.6
log
@use strlcpy vs strncpy+a[len-1]='\0'.  millert@@ ok.
@
text
@d44 1
a44 1
static char rcsid[] = "$OpenBSD: regerror.c,v 1.5 1998/03/19 00:30:10 millert Exp $";
d64 1
a64 1
static char *regatoi __P((const regex_t *preg, char *localbuf));
@


1.5
log
@some -Wall
@
text
@d44 1
a44 1
static char rcsid[] = "$OpenBSD: regerror.c,v 1.4 1997/04/28 20:44:59 millert Exp $";
d152 1
a152 2
		(void) strncpy(errbuf, s, errbuf_size-1);
		errbuf[errbuf_size-1] = '\0';
@


1.4
log
@- cast usages of *printf() to void since we don't check return val
- move an assert to be *before* a strcpy() where it can do some good.
- integrate NetBSD fixes for 64-bit machines (NetBSD PR #3450, Ross Harvey)
- add lite2 tags
@
text
@d44 1
a44 1
static char rcsid[] = "$OpenBSD: regerror.c,v 1.3 1996/09/15 09:31:26 tholo Exp $";
d95 17
a111 17
	REG_NOMATCH,	"REG_NOMATCH",	"regexec() failed to match",
	REG_BADPAT,	"REG_BADPAT",	"invalid regular expression",
	REG_ECOLLATE,	"REG_ECOLLATE",	"invalid collating element",
	REG_ECTYPE,	"REG_ECTYPE",	"invalid character class",
	REG_EESCAPE,	"REG_EESCAPE",	"trailing backslash (\\)",
	REG_ESUBREG,	"REG_ESUBREG",	"invalid backreference number",
	REG_EBRACK,	"REG_EBRACK",	"brackets ([ ]) not balanced",
	REG_EPAREN,	"REG_EPAREN",	"parentheses not balanced",
	REG_EBRACE,	"REG_EBRACE",	"braces not balanced",
	REG_BADBR,	"REG_BADBR",	"invalid repetition count(s)",
	REG_ERANGE,	"REG_ERANGE",	"invalid character range",
	REG_ESPACE,	"REG_ESPACE",	"out of memory",
	REG_BADRPT,	"REG_BADRPT",	"repetition-operator operand invalid",
	REG_EMPTY,	"REG_EMPTY",	"empty (sub)expression",
	REG_ASSERT,	"REG_ASSERT",	"\"can't happen\" -- you found a bug",
	REG_INVARG,	"REG_INVARG",	"invalid argument to regex routine",
	0,		"",		"*** unknown regexp error code ***",
@


1.3
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d36 2
d41 5
a45 1
static char rcsid[] = "$OpenBSD: regerror.c,v 1.2 1996/08/19 08:31:11 tholo Exp $";
d140 2
a141 1
			if (r->code != 0)
d143 2
a144 3
			else
				sprintf(convbuf, "REG_0x%x", target);
			assert(strlen(convbuf) < sizeof(convbuf));
d152 2
a153 6
		if (errbuf_size > len)
			(void) strcpy(errbuf, s);
		else {
			(void) strncpy(errbuf, s, errbuf_size-1);
			errbuf[errbuf_size-1] = '\0';
		}
d176 1
a176 1
	sprintf(localbuf, "%d", r->code);
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: regerror.c,v 1.4 1995/02/27 13:29:20 cgd Exp $";
a166 2
	register size_t siz;
	register char *p;
@


1.1
log
@Initial revision
@
text
@a0 2
/*	$NetBSD: regerror.c,v 1.4 1995/02/27 13:29:20 cgd Exp $	*/

a35 2
 *
 *	@@(#)regerror.c	8.4 (Berkeley) 3/20/94
d39 1
a39 5
#if 0
static char sccsid[] = "@@(#)regerror.c	8.4 (Berkeley) 3/20/94";
#else
static char rcsid[] = "$NetBSD: regerror.c,v 1.4 1995/02/27 13:29:20 cgd Exp $";
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

