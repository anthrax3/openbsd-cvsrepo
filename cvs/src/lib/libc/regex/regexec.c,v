head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.8
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.32
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.30
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.28
	OPENBSD_5_0:1.11.0.26
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.24
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.22
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.18
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.20
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.16
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.26
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.24
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.22
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.20
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.18
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.16
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.14
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.12
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.10
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.8
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2014.10.11.04.23.12;	author doug;	state Exp;
branches;
next	1.12;
commitid	a9Eu3YKd5iJF0qAj;

1.12
date	2013.04.17.17.39.29;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.05.13.03.00;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2004.11.30.17.04.23;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.17.17.58.54;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.36;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.04.30.05.51.10;	author tholo;	state Exp;
branches;
next	1.6;

1.6
date	97.04.28.20.45.01;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.04.12.18.22.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.09.15.09.31.27;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.31.15;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.23.12.10;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.08;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Userland reallocarray() audit.

Avoid potential integer overflow in the size argument of malloc() and
realloc() by using reallocarray() to avoid unchecked multiplication.

ok deraadt@@
@
text
@/*	$OpenBSD: regexec.c,v 1.12 2013/04/17 17:39:29 tedu Exp $ */
/*-
 * Copyright (c) 1992, 1993, 1994 Henry Spencer.
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Henry Spencer.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)regexec.c	8.3 (Berkeley) 3/20/94
 */

/*
 * the outer shell of regexec()
 *
 * This file includes engine.c *twice*, after muchos fiddling with the
 * macros that code uses.  This lets the same code operate on two different
 * representations for state sets.
 */
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <ctype.h>
#include <regex.h>

#include "utils.h"
#include "regex2.h"

/* macros for manipulating states, small version */
#define	states	long
#define	states1	states		/* for later use in regexec() decision */
#define	CLEAR(v)	((v) = 0)
#define	SET0(v, n)	((v) &= ~((unsigned long)1 << (n)))
#define	SET1(v, n)	((v) |= (unsigned long)1 << (n))
#define	ISSET(v, n)	(((v) & ((unsigned long)1 << (n))) != 0)
#define	ASSIGN(d, s)	((d) = (s))
#define	EQ(a, b)	((a) == (b))
#define	STATEVARS	long dummy	/* dummy version */
#define	STATESETUP(m, n)	/* nothing */
#define	STATETEARDOWN(m)	/* nothing */
#define	SETUP(v)	((v) = 0)
#define	onestate	long
#define	INIT(o, n)	((o) = (unsigned long)1 << (n))
#define	INC(o)		((o) <<= 1)
#define	ISSTATEIN(v, o)	(((v) & (o)) != 0)
/* some abbreviations; note that some of these know variable names! */
/* do "if I'm here, I can also be there" etc without branches */
#define	FWD(dst, src, n)	((dst) |= ((unsigned long)(src)&(here)) << (n))
#define	BACK(dst, src, n)	((dst) |= ((unsigned long)(src)&(here)) >> (n))
#define	ISSETBACK(v, n)		(((v) & ((unsigned long)here >> (n))) != 0)
/* function names */
#define SNAMES			/* engine.c looks after details */

#include "engine.c"

/* now undo things */
#undef	states
#undef	CLEAR
#undef	SET0
#undef	SET1
#undef	ISSET
#undef	ASSIGN
#undef	EQ
#undef	STATEVARS
#undef	STATESETUP
#undef	STATETEARDOWN
#undef	SETUP
#undef	onestate
#undef	INIT
#undef	INC
#undef	ISSTATEIN
#undef	FWD
#undef	BACK
#undef	ISSETBACK
#undef	SNAMES

/* macros for manipulating states, large version */
#define	states	char *
#define	CLEAR(v)	memset(v, 0, m->g->nstates)
#define	SET0(v, n)	((v)[n] = 0)
#define	SET1(v, n)	((v)[n] = 1)
#define	ISSET(v, n)	((v)[n])
#define	ASSIGN(d, s)	memcpy(d, s, m->g->nstates)
#define	EQ(a, b)	(memcmp(a, b, m->g->nstates) == 0)
#define	STATEVARS	long vn; char *space
#define	STATESETUP(m, nv)	{ (m)->space = reallocarray(NULL, 	    \
    				(m)->g->nstates, (nv));			    \
				if ((m)->space == NULL) return(REG_ESPACE); \
				(m)->vn = 0; }
#define	STATETEARDOWN(m)	{ free((m)->space); }
#define	SETUP(v)	((v) = &m->space[m->vn++ * m->g->nstates])
#define	onestate	long
#define	INIT(o, n)	((o) = (n))
#define	INC(o)	((o)++)
#define	ISSTATEIN(v, o)	((v)[o])
/* some abbreviations; note that some of these know variable names! */
/* do "if I'm here, I can also be there" etc without branches */
#define	FWD(dst, src, n)	((dst)[here+(n)] |= (src)[here])
#define	BACK(dst, src, n)	((dst)[here-(n)] |= (src)[here])
#define	ISSETBACK(v, n)	((v)[here - (n)])
/* function names */
#define	LNAMES			/* flag */

#include "engine.c"

/*
 - regexec - interface for matching
 *
 * We put this here so we can exploit knowledge of the state representation
 * when choosing which matcher to call.  Also, by this point the matchers
 * have been prototyped.
 */
int				/* 0 success, REG_NOMATCH failure */
regexec(const regex_t *preg, const char *string, size_t nmatch,
    regmatch_t pmatch[], int eflags)
{
	struct re_guts *g = preg->re_g;
	char *s = (char *)string; /* XXX fucking gcc XXX */

#ifdef REDEBUG
#	define	GOODFLAGS(f)	(f)
#else
#	define	GOODFLAGS(f)	((f)&(REG_NOTBOL|REG_NOTEOL|REG_STARTEND))
#endif

	if (preg->re_magic != MAGIC1 || g->magic != MAGIC2)
		return(REG_BADPAT);
	assert(!(g->iflags&BAD));
	if (g->iflags&BAD)		/* backstop for no-debug case */
		return(REG_BADPAT);
	eflags = GOODFLAGS(eflags);

	if (g->nstates <= CHAR_BIT*sizeof(states1) && !(eflags&REG_LARGE))
		return(smatcher(g, s, nmatch, pmatch, eflags));
	else
		return(lmatcher(g, s, nmatch, pmatch, eflags));
}
@


1.12
log
@silence some warnings by adding prototypes, casts, and headers as
appropriate. in regex, stop using the struct hack for a fixed size array
@
text
@d1 1
a1 1
/*	$OpenBSD: regexec.c,v 1.11 2005/08/05 13:03:00 espie Exp $ */
d112 2
a113 1
#define	STATESETUP(m, nv)	{ (m)->space = malloc((nv)*(m)->g->nstates); \
@


1.11
log
@zap rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d143 2
d159 1
a159 1
		return(smatcher(g, (char *)string, nmatch, pmatch, eflags));
d161 1
a161 1
		return(lmatcher(g, (char *)string, nmatch, pmatch, eflags));
@


1.10
log
@remove useless comments, once used for header file generation and delete
parameter names from prototypes. ok millert@@
@
text
@d1 1
a35 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)regexec.c	8.3 (Berkeley) 3/20/94";
#else
static char rcsid[] = "$OpenBSD: regexec.c,v 1.9 2004/10/17 17:58:54 otto Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.9
log
@ansify and deregister; no change in obj code. ok millert@@
@
text
@d40 1
a40 1
static char rcsid[] = "$OpenBSD: regexec.c,v 1.8 2003/06/02 20:18:36 millert Exp $";
a139 8
 = extern int regexec(const regex_t *, const char *, size_t, \
 =					regmatch_t [], int);
 = #define	REG_NOTBOL	00001
 = #define	REG_NOTEOL	00002
 = #define	REG_STARTEND	00004
 = #define	REG_TRACE	00400	// tracing of execution
 = #define	REG_LARGE	01000	// force large representation
 = #define	REG_BACKR	02000	// force use of backref code
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d40 1
a40 1
static char rcsid[] = "$OpenBSD: regexec.c,v 1.7 1997/04/30 05:51:10 tholo Exp $";
d154 2
a155 6
regexec(preg, string, nmatch, pmatch, eflags)
const regex_t *preg;
const char *string;
size_t nmatch;
regmatch_t pmatch[];
int eflags;
d157 1
a157 1
	register struct re_guts *g = preg->re_g;
@


1.7
log
@Remove dead code and variables
@
text
@d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: regexec.c,v 1.6 1997/04/28 20:45:01 millert Exp $";
@


1.6
log
@- cast usages of *printf() to void since we don't check return val
- move an assert to be *before* a strcpy() where it can do some good.
- integrate NetBSD fixes for 64-bit machines (NetBSD PR #3450, Ross Harvey)
- add lite2 tags
@
text
@d44 1
a44 1
static char rcsid[] = "$OpenBSD: regexec.c,v 1.4 1996/09/15 09:31:27 tholo Exp $";
a64 2

static int nope = 0;	/* for use in asserts; shuts lint up */
@


1.5
log
@long -> int to fix 64bit issues.  This breaks 16bit machines but since we don't have any 16bit ports...) The alternative is to use int32_t's but then this code will break when/if int > 32bits which is not so unlikely.  Fixes NetBSD PR #3450 from Ross Harvey (but in a different way)
@
text
@d36 2
d41 3
d45 1
d66 2
d69 1
a69 1
#define	states	int
d72 3
a74 3
#define	SET0(v, n)	((v) &= ~((unsigned)1 << (n)))
#define	SET1(v, n)	((v) |= (unsigned)1 << (n))
#define	ISSET(v, n)	(((v) & ((unsigned)1 << (n))) != 0)
d77 1
a77 1
#define	STATEVARS	int dummy	/* dummy version */
d81 3
a83 3
#define	onestate	int
#define	INIT(o, n)	((o) = (unsigned)1 << (n))
#define	INC(o)		((o) = (unsigned)(o) << 1)
d87 3
a89 3
#define	FWD(dst, src, n)	((dst) |= ((unsigned)(src)&(here)) << (n))
#define	BACK(dst, src, n)	((dst) |= ((unsigned)(src)&(here)) >> (n))
#define	ISSETBACK(v, n)	(((v) & ((unsigned)here >> (n))) != 0)
d124 1
a124 1
#define	STATEVARS	int vn; char *space
d130 1
a130 1
#define	onestate	int
@


1.4
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: regexec.c,v 1.3 1996/08/19 08:31:15 tholo Exp $";
d61 1
a61 1
#define	states	long
d64 3
a66 3
#define	SET0(v, n)	((v) &= ~((unsigned long)1 << (n)))
#define	SET1(v, n)	((v) |= (unsigned long)1 << (n))
#define	ISSET(v, n)	(((v) & ((unsigned long)1 << (n))) != 0)
d69 1
a69 1
#define	STATEVARS	long dummy	/* dummy version */
d73 3
a75 3
#define	onestate	long
#define	INIT(o, n)	((o) = (unsigned long)1 << (n))
#define	INC(o)		((o) = (unsigned long)(o) << 1)
d79 3
a81 3
#define	FWD(dst, src, n)	((dst) |= ((unsigned long)(src)&(here)) << (n))
#define	BACK(dst, src, n)	((dst) |= ((unsigned long)(src)&(here)) >> (n))
#define	ISSETBACK(v, n)	(((v) & ((unsigned long)here >> (n))) != 0)
d116 1
a116 1
#define	STATEVARS	long vn; char *space
d122 1
a122 1
#define	onestate	long
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: regexec.c,v 1.6 1995/02/27 13:29:48 cgd Exp $";
a58 2

static int nope = 0;		/* for use in asserts; shuts lint up */
@


1.2
log
@Make a proper lvalue in INC
@
text
@a0 2
/*	$NetBSD: regexec.c,v 1.6 1995/02/27 13:29:48 cgd Exp $	*/

a35 2
 *
 *	@@(#)regexec.c	8.3 (Berkeley) 3/20/94
d39 1
a39 5
#if 0
static char sccsid[] = "@@(#)regexec.c	8.3 (Berkeley) 3/20/94";
#else
static char rcsid[] = "$NetBSD: regexec.c,v 1.6 1995/02/27 13:29:48 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d85 1
a85 1
#define	INC(o)	((unsigned long)(o) <<= 1)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
