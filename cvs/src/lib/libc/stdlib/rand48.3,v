head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.6
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.20
	OPENBSD_5_0:1.11.0.18
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.16
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.14
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.10
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.8
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.20
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.19;
commitid	QU70QaxjyBAtj4Rv;

1.19
date	2015.09.10.13.44.19;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	Gvn6hpU1kYhFb5zx;

1.18
date	2014.12.09.21.55.39;	author jmc;	state Exp;
branches;
next	1.17;
commitid	go4TdFkYZaqGALfz;

1.17
date	2014.12.08.21.45.20;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	HpI1xDivwwEoN4ET;

1.16
date	2014.11.25.17.26.34;	author millert;	state Exp;
branches;
next	1.15;
commitid	lKWEwC5BoMD31zlQ;

1.15
date	2014.09.08.01.27.54;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	cPoapLAXYNe1fcgV;

1.14
date	2014.01.21.23.25.03;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2012.06.02.00.14.16;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.31.19.19.31;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.01.19.27.27;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.10.06.48.30;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.20.13.50.02;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.09.27.02.00.13;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.06.29.18.36.22;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.03.11.01.35.01;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.07.05.19.54.23;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.33.45;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@.\" Copyright (c) 1993 Martin Birgmeier
.\" All rights reserved.
.\"
.\" You may redistribute unmodified or modified versions of this source
.\" code provided that the above copyright notice and this and the
.\" following conditions are retained.
.\"
.\" This software is provided ``as is'', and comes with no warranties
.\" of any kind. I shall in no event be liable for anything that happens
.\" to anyone/anything when using this software.
.\"
.\"	$OpenBSD: rand48.3,v 1.19 2015/09/10 13:44:19 schwarze Exp $
.\"
.Dd $Mdocdate: September 10 2015 $
.Dt DRAND48 3
.Os
.Sh NAME
.Nm drand48 ,
.Nm erand48 ,
.Nm lrand48 ,
.Nm nrand48 ,
.Nm mrand48 ,
.Nm jrand48 ,
.Nm srand48 ,
.Nm srand48_deterministic ,
.Nm seed48 ,
.Nm seed48_deterministic ,
.Nm lcong48 ,
.Nm lcong48_deterministic
.Nd pseudo-random number generators and initialization routines
.Sh SYNOPSIS
.In stdlib.h
.Ft double
.Fn drand48 void
.Ft double
.Fn erand48 "unsigned short xseed[3]"
.Ft long
.Fn lrand48 void
.Ft long
.Fn nrand48 "unsigned short xseed[3]"
.Ft long
.Fn mrand48 void
.Ft long
.Fn jrand48 "unsigned short xseed[3]"
.Ft void
.Fn srand48 "long seed"
.Ft void
.Fn srand48_deterministic "long seed"
.Ft "unsigned short *"
.Fn seed48 "unsigned short xseed[3]"
.Ft "unsigned short *"
.Fn seed48_deterministic "unsigned short xseed[3]"
.Ft void
.Fn lcong48 "unsigned short p[7]"
.Ft void
.Fn lcong48_deterministic "unsigned short p[7]"
.Sh DESCRIPTION
.Bf -symbolic
Standards insist that this interface return deterministic results.
Unsafe usage is very common, so
.Ox
changed the subsystem to return non-deterministic results by default.
.Ef
.Pp
To satisfy portable code,
.Fn srand48 ,
.Fn seed48 ,
or
.Fn lcong48
should be called to initialize the subsystem.
In
.Ox
the
seeding parameters are ignored, and strong random number results will be
provided from
.Xr arc4random 3 .
In other systems, the
parameters prime a simplistic deterministic algorithm.
.Pp
If the standardized behavior is required then
.Fn srand48_deterministic ,
.Fn seed48_deterministic ,
and
.Fn lcong48_deterministic
can be substituted for
.Fn srand48 ,
.Fn seed48 ,
and
.Fn lcong48 .
That will cause subsequent
calls to
.Fn drand48 ,
.Fn lrand48 ,
and
.Fn jrand48
to return results using the deterministic algorithm.
.Pp
.Fn drand48
and
.Fn erand48
return values of type double.
The full 48 bits of r(n+1) are
loaded into the mantissa of the returned value, with the exponent set
such that the values produced lie in the interval [0.0, 1.0].
.Pp
.Fn lrand48
and
.Fn nrand48
return values of type long in the range
[0, 2**31-1].
The high-order (31) bits of
r(n+1) are loaded into the lower bits of the returned value, with
the topmost (sign) bit set to zero.
.Pp
.Fn mrand48
and
.Fn jrand48
return values of type long in the range
[-2**31, 2**31-1].
The high-order (32) bits of r(n+1) are loaded into the returned value.
.Pp
In the deterministic mode, the
.Fn rand48
family of functions generates numbers using a linear congruential
algorithm working on integers 48 bits in size.
The particular formula employed is
r(n+1) = (a * r(n) + c) mod m
where the default values are
for the multiplicand a = 0xfdeece66d = 25214903917 and
the addend c = 0xb = 11.
The modulus is always fixed at m = 2 ** 48.
r(n) is called the seed of the random number generator.
.Pp
For all the six generator routines described next, the first
computational step is to perform a single iteration of the algorithm.
.Pp
.Fn drand48 ,
.Fn lrand48 ,
and
.Fn mrand48
use an internal buffer to store r(n).
For these functions
the initial value of r(0) = 0x1234abcd330e = 20017429951246.
.Pp
On the other hand,
.Fn erand48 ,
.Fn nrand48 ,
and
.Fn jrand48
use a user-supplied buffer to store the seed r(n),
which consists of an array of 3 shorts, where the zeroth member
holds the least significant bits.
.Pp
All functions share the same multiplicand and addend.
.Pp
.Fn srand48_deterministic
is used to initialize the internal buffer r(n) of
.Fn drand48 ,
.Fn lrand48 ,
and
.Fn mrand48
such that the 32 bits of the seed value are copied into the upper 32 bits
of r(n), with the lower 16 bits of r(n) arbitrarily being set to 0x330e.
Additionally, the constant multiplicand and addend of the algorithm are
reset to the default values given above.
.Pp
.Fn seed48_deterministic
also initializes the internal buffer r(n) of
.Fn drand48 ,
.Fn lrand48 ,
and
.Fn mrand48 ,
but here all 48 bits of the seed can be specified in an array of 3 shorts,
where the zeroth member specifies the lowest bits.
Again, the constant multiplicand and addend of the algorithm are
reset to the default values given above.
.Fn seed48_deterministic
returns a pointer to an array of 3 shorts which contains the old seed.
This array is statically allocated, so its contents are lost after
each new call to
.Fn seed48_deterministic .
.Pp
Finally,
.Fn lcong48_deterministic
allows full control over the multiplicand and addend used in
.Fn drand48 ,
.Fn erand48 ,
.Fn lrand48 ,
.Fn nrand48 ,
.Fn mrand48 ,
and
.Fn jrand48 ,
and the seed used in
.Fn drand48 ,
.Fn lrand48 ,
and
.Fn mrand48 .
An array of 7 shorts is passed as parameter; the first three shorts are
used to initialize the seed; the second three are used to initialize the
multiplicand; and the last short is used to initialize the addend.
It is thus not possible to use values greater than 0xffff as the addend.
.Pp
Note that all three methods of seeding the random number generator
always also set the multiplicand and addend for any of the six
generator calls.
.Sh SEE ALSO
.Xr arc4random 3 ,
.Xr rand 3 ,
.Xr random 3
.Sh STANDARDS
The
.Fn drand48 ,
.Fn erand48 ,
.Fn jrand48 ,
.Fn lrand48 ,
.Fn mrand48 ,
and
.Fn nrand48 ,
functions conform to
.St -p1003.1-2008 .
.Pp
The
.Fn seed48 ,
.Fn srand48 ,
and
.Fn lcong48
function do not conform to
.St -ansiC ,
intentionally.
.Pp
The
.Fn seed48_deterministic ,
.Fn srand48_deterministic ,
and
.Fn lcong48_deterministic
functions are
.Ox
extensions.
.Sh AUTHORS
.An Martin Birgmeier
@


1.19
log
@missing commas at the end of .Nm lines in the NAME section
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.18 2014/12/09 21:55:39 jmc Exp $
d14 2
a15 2
.Dd $Mdocdate: December 9 2014 $
.Dt RAND48 3
@


1.18
log
@Xr and Ox fixes;
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.17 2014/12/08 21:45:20 deraadt Exp $
d14 1
a14 1
.Dd $Mdocdate: December 8 2014 $
d28 1
a28 1
.Nm lcong48
@


1.17
log
@Change rand(), random(), drand48(), lrand48(), mrand48(), and srand48()
to returning strong random by default, source from arc4random(3).
Parameters to the seeding functions are ignored, and the subsystems remain
in strong random mode.  If you wish the standardized deterministic mode,
call srand_deterministic(), srandom_determistic(), srand48_deterministic(),
seed48_deterministic() or lcong48_deterministic() instead.
The re-entrant functions rand_r(), erand48(), nrand48(), jrand48() are
unaffected by this change and remain in deterministic mode (for now).

Verified as a good roadmap forward by auditing 8800 pieces of software.
Roughly 60 pieces of software will need adaptation to request the
deterministic mode.

Violates POSIX and C89, which violate best practice in this century.
ok guenther tedu millert
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.16 2014/11/25 17:26:34 millert Exp $
d14 1
a14 1
.Dd $Mdocdate: November 25 2014 $
d76 1
a76 1
.Xr arc4random 3.
d236 3
a238 1
functions are OpenBSD extensions.
@


1.16
log
@Warn people to use arc4random() in DESCRIPTION so they see it using
the same text from random.3.
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.15 2014/09/08 01:27:54 schwarze Exp $
d14 1
a14 1
.Dd $Mdocdate: September 8 2014 $
d25 1
d27 1
d29 1
d47 2
d51 2
d55 2
d59 4
a62 3
This interface is not cryptographically secure, so consider using
.Xr arc4random 3
instead.
d65 32
a96 14
The
.Fn rand48
family of functions generates pseudo-random numbers using a linear
congruential algorithm working on integers 48 bits in size.
The particular formula employed is
r(n+1) = (a * r(n) + c) mod m
where the default values are
for the multiplicand a = 0xfdeece66d = 25214903917 and
the addend c = 0xb = 11.
The modulus is always fixed at m = 2 ** 48.
r(n) is called the seed of the random number generator.
.Pp
For all the six generator routines described next, the first
computational step is to perform a single iteration of the algorithm.
d122 15
d156 1
a156 1
.Fn srand48
d167 1
a167 1
.Fn seed48
d177 1
a177 1
.Fn seed48
d181 1
a181 1
.Fn seed48 .
d184 1
a184 1
.Fn lcong48
a214 1
.Fn lcong48 ,
d217 1
d219 4
d224 1
d226 11
a236 3
.Fn srand48
functions conform to
.St -p1003.1-2008 .
@


1.15
log
@obvious cases of missing .An;
found with the new mandoc(1) MANDOCERR_AN_MISSING warning;
no text changes
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.14 2014/01/21 23:25:03 deraadt Exp $
d14 1
a14 1
.Dd $Mdocdate: January 21 2014 $
d49 6
a162 3
.Pp
For a more powerful random number generator, see
.Xr arc4random 3 .
@


1.14
log
@Ouch... recommend arc4random, not random.
spotted by tedu
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.13 2013/06/05 03:39:23 tedu Exp $
d14 1
a14 1
.Dd $Mdocdate: June 5 2013 $
d179 1
a179 1
Martin Birgmeier
@


1.13
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.12 2012/06/02 00:14:16 guenther Exp $
d14 1
a14 1
.Dd $Mdocdate: June 2 2012 $
d159 1
a159 1
.Xr random 3 .
@


1.12
log
@Update STANDARDS section for a few <stdlib.h> functions
Update SYNOPSIS for setkey() to show it's in <stdlib.h>

ok jmc@@, millert@@
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.11 2007/05/31 19:19:31 jmc Exp $
d14 1
a14 1
.Dd $Mdocdate: May 31 2007 $
d29 1
a29 1
.Fd #include <stdlib.h>
@


1.11
log
@convert to new .Dd format;
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.10 2003/06/01 19:27:27 jmc Exp $
d14 1
a14 1
.Dd $Mdocdate$
d164 14
@


1.10
log
@- section reorder
- merge COMPATIBILITY
- kill whitespace at EOL
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.9 2003/05/10 06:48:30 jmc Exp $
d14 1
a14 1
.Dd October 8, 1993
@


1.9
log
@typos;
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.8 2001/08/06 10:42:26 mpech Exp $
a159 2
.Sh AUTHORS
Martin Birgmeier
d164 2
@


1.8
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
\" Copyright (c) 1993 Martin Birgmeier
d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.7 2000/04/20 13:50:02 aaron Exp $
d27 1
a27 1
.Nd pseudo random number generators and initialization routines
d70 1
a70 1
such that the values produced lie in the interval [0.0, 1.0).
d159 1
a159 1
.Xr random 3
@


1.7
log
@Flesh out stdlib function man pages.
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.6 1999/09/27 02:00:13 aaron Exp $
d160 1
a160 1
.Sh AUTHOR
@


1.6
log
@Formatting and grammar.
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.5 1999/06/29 18:36:22 aaron Exp $
d52 2
a53 2
congruential algorithm working on integers 48 bits in size. The
particular formula employed is
d57 2
a58 1
the addend c = 0xb = 11. The modulus is always fixed at m = 2 ** 48.
d67 2
a68 1
return values of type double. The full 48 bits of r(n+1) are
d76 2
a77 1
[0, 2**31-1]. The high-order (31) bits of
d85 2
a86 2
[-2**31, 2**31-1]. The high-order (32) bits of
r(n+1) are loaded into the returned value.
d92 2
a93 1
use an internal buffer to store r(n). For these functions
d125 2
a126 2
where the zeroth member specifies the lowest bits. Again,
the constant multiplicand and addend of the algorithm are
@


1.5
log
@first round of repairs on stdlib
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.4 1999/03/11 01:35:01 pjanzen Exp $
d161 1
a161 1
.Xr random 3 .
@


1.4
log
@fix more comma splices that involve misuse of conjunctive adverbs
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.3 1998/07/05 19:54:23 millert Exp $
d30 1
a30 1
.Ft double 
@


1.3
log
@add .Xr's for all the random functions in libc
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.2 1996/08/19 08:33:45 tholo Exp $
d126 1
a126 1
This array is statically allocated, thus its contents are lost after
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d12 1
a12 1
.\"	$OpenBSD: rand48.3,v 1.1.1.1 1995/10/18 08:42:19 deraadt Exp $
d159 1
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
.\"     $Id: rand48.3,v 1.2 1994/09/17 01:01:53 mycroft Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
