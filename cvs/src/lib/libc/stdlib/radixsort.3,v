head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.10
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.8
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.24
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.22
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.20
	OPENBSD_5_0:1.11.0.18
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.16
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.14
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.10
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.8
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.13
date	2015.01.29.01.46.31;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	LyCIkS84kwBpdwms;

1.12
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.31.19.19.31;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.26.04.20.23;	author jaredy;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.20.18.38;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.12.07.15.15;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.20.13.50.02;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.06.29.18.36.22;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	98.06.15.17.55.08;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.01.19.19.47.01;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.33.43;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.18;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Use .Rv where appropriate, and move it to RETURN VALUES;
remove .Tn, and a few minor macro adjustments.
Patch from Kaspars at Bankovskis dot net.
@
text
@.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: radixsort.3,v 1.12 2013/06/05 03:39:23 tedu Exp $
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt RADIXSORT 3
.Os
.Sh NAME
.Nm radixsort ,
.Nm sradixsort
.Nd radix sort
.Sh SYNOPSIS
.In limits.h
.In stdlib.h
.Ft int
.Fn radixsort "const u_char **base" "int nmemb" "const u_char *table" "u_int endbyte"
.Ft int
.Fn sradixsort "const u_char **base" "int nmemb" "const u_char *table" "u_int endbyte"
.Sh DESCRIPTION
The
.Fn radixsort
and
.Fn sradixsort
functions are implementations of radix sort.
.Pp
These functions sort an array of
.Fa nmemb
pointers to byte strings.
The initial member is referenced by
.Fa base .
The byte strings may contain any values; the end of each string
is denoted by the user-specified value
.Fa endbyte .
.Pp
Applications may specify a sort order by providing the
.Fa table
argument.
If non-null,
.Fa table
must reference an array of
.Dv UCHAR_MAX
+ 1 bytes which contains the sort weight of each possible byte value.
The end-of-string byte must have a sort weight of 0 or 255
(for sorting in reverse order).
More than one byte may have the same sort weight.
The
.Fa table
argument is useful for applications which wish to sort different characters
equally; for example, providing a table with the same weights
for A\-Z as for a\-z will result in a case-insensitive sort.
If
.Fa table
is
.Dv NULL ,
the contents of the array are sorted in ascending order according to the
ASCII order of the byte strings they reference and
.Fa endbyte
has a sorting weight of 0.
.Pp
The
.Fn sradixsort
function is stable; that is, if two elements compare as equal, their
order in the sorted array is unchanged.
The
.Fn sradixsort
function uses additional memory sufficient to hold
.Fa nmemb
pointers.
.Pp
The
.Fn radixsort
function is not stable, but uses no additional memory.
.Pp
These functions are variants of most-significant-byte radix sorting; in
particular, see D.E. Knuth's Algorithm R and section 5.2.5, exercise 10.
They take linear time relative to the number of bytes in the strings.
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er EINVAL
The value of the
.Fa endbyte
element of
.Fa table
is not 0 or 255.
.El
.Pp
Additionally, the
.Fn sradixsort
function may fail and set
.Va errno
for any of the errors specified for the library routine
.Xr malloc 3 .
.Sh SEE ALSO
.Xr sort 1 ,
.Xr qsort 3
.Rs
.%A Knuth, D.E.
.%D 1968
.%B "The Art of Computer Programming"
.%T "Sorting and Searching"
.%V Vol. 3
.%P pp. 170-178
.Re
.Rs
.%A Paige, R.
.%D 1987
.%T "Three Partition Refinement Algorithms"
.%J "SIAM J. Comput."
.%V Vol. 16
.%N No. 6
.Re
.Rs
.%A McIlroy, P.
.%D 1993
.%B "Engineering Radix Sort"
.%T "Computing Systems"
.%V Vol. 6:1
.%P pp. 5-27
.Re
.Sh HISTORY
The
.Fn radixsort
function first appeared in
.Bx 4.4 .
@


1.12
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d28 1
a28 1
.\"	$OpenBSD: radixsort.3,v 1.11 2007/05/31 19:19:31 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 31 2007 $
d81 1
a81 2
.Tn ASCII
order of the byte strings they reference and
d103 1
a103 4
Upon successful completion 0 is returned.
Otherwise, \-1 is returned and the global variable
.Va errno
is set to indicate the error.
@


1.11
log
@convert to new .Dd format;
@
text
@d28 1
a28 1
.\"	$OpenBSD: radixsort.3,v 1.10 2005/07/26 04:20:23 jaredy Exp $
d30 1
a30 1
.Dd $Mdocdate$
d38 2
a39 2
.Fd #include <limits.h>
.Fd #include <stdlib.h>
@


1.10
log
@- typos, punctuation, layout, macro tweaks
- break long lines

ok jmc
@
text
@d28 1
a28 1
.\"	$OpenBSD: radixsort.3,v 1.9 2003/06/02 20:18:38 millert Exp $
d30 1
a30 1
.Dd January 27, 1994
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d28 1
a28 1
.\"	$OpenBSD: radixsort.3,v 1.8 2003/05/12 07:15:15 pjanzen Exp $
d74 2
a75 2
equally, for example, providing a table with the same weights
for A-Z as for a-z will result in a case-insensitive sort.
@


1.8
log
@Ideas from NetBSD:  document nmemb and include sradixsort in the NAME section.
Also, stomp a comma splice.
@
text
@d12 1
a12 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
d28 1
a28 1
.\"	$OpenBSD: radixsort.3,v 1.7 2001/08/06 10:42:26 mpech Exp $
@


1.7
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d32 1
a32 1
.\"	$OpenBSD: radixsort.3,v 1.6 2000/04/20 13:50:02 aaron Exp $
d38 2
a39 1
.Nm radixsort
d55 4
a58 2
These functions sort an array of pointers to byte strings, the initial
member of which is referenced by
d92 1
a92 1
function is stable, that is, if two elements compare as equal, their
@


1.6
log
@Flesh out stdlib function man pages.
@
text
@d32 1
a32 1
.\"	$OpenBSD: radixsort.3,v 1.5 1999/06/29 18:36:22 aaron Exp $
a127 1
.Pp
@


1.5
log
@first round of repairs on stdlib
@
text
@d32 1
a32 1
.\"	$OpenBSD: radixsort.3,v 1.4 1998/06/15 17:55:08 mickey Exp $
d52 1
a52 2
functions
are implementations of radix sort.
d68 1
a68 2
+ 1 bytes which contains the sort
weight of each possible byte value.
d74 1
a74 2
argument
is useful for applications which wish to sort different characters
d81 1
a81 2
the contents of the array are sorted in ascending order
according to the
d121 1
a121 2
function
may fail and set
@


1.4
log
@use Bx macro for BSD versions
@
text
@d32 1
a32 1
.\"	$OpenBSD: radixsort.3,v 1.3 1997/01/19 19:47:01 millert Exp $
d65 1
a65 2
If
.Pf non- Dv NULL , 
d82 3
a84 1
is NULL, the contents of the array are sorted in ascending order
d110 1
a110 1
Otherwise, \-1 is returned and the global variable 
@


1.3
log
@Make function decl match prototype in stdlib.h
@
text
@d32 1
a32 1
.\"	$OpenBSD: radixsort.3,v 1.2 1996/08/19 08:33:43 tholo Exp $
d160 2
a161 1
function first appeared in 4.4BSD.
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d32 1
a32 1
.\"	$OpenBSD: radixsort.3,v 1.1.1.1 1995/10/18 08:42:18 deraadt Exp $
d44 1
a44 1
.Fn radixsort "u_char **base" "int nmemb" "u_char *table" "u_int endbyte"
d46 1
a46 1
.Fn sradixsort "u_char **base" "int nmemb" "u_char *table" "u_int endbyte"
@


1.1
log
@Initial revision
@
text
@d32 1
a32 2
.\"     from: @@(#)radixsort.3	8.2 (Berkeley) 1/27/94
.\"	$Id: radixsort.3,v 1.3 1994/06/16 05:26:40 mycroft Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
