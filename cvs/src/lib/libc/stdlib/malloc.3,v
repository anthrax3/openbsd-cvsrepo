head	1.109;
access;
symbols
	OPENBSD_6_1:1.108.0.4
	OPENBSD_6_1_BASE:1.108
	OPENBSD_6_0:1.95.0.2
	OPENBSD_6_0_BASE:1.95
	OPENBSD_5_9:1.93.0.2
	OPENBSD_5_9_BASE:1.93
	OPENBSD_5_8:1.90.0.4
	OPENBSD_5_8_BASE:1.90
	OPENBSD_5_7:1.89.0.2
	OPENBSD_5_7_BASE:1.89
	OPENBSD_5_6:1.78.0.4
	OPENBSD_5_6_BASE:1.78
	OPENBSD_5_5:1.73.0.6
	OPENBSD_5_5_BASE:1.73
	OPENBSD_5_4:1.73.0.2
	OPENBSD_5_4_BASE:1.73
	OPENBSD_5_3:1.71.0.2
	OPENBSD_5_3_BASE:1.71
	OPENBSD_5_2:1.70.0.6
	OPENBSD_5_2_BASE:1.70
	OPENBSD_5_1_BASE:1.70
	OPENBSD_5_1:1.70.0.4
	OPENBSD_5_0:1.70.0.2
	OPENBSD_5_0_BASE:1.70
	OPENBSD_4_9:1.68.0.4
	OPENBSD_4_9_BASE:1.68
	OPENBSD_4_8:1.68.0.2
	OPENBSD_4_8_BASE:1.68
	OPENBSD_4_7:1.65.0.2
	OPENBSD_4_7_BASE:1.65
	OPENBSD_4_6:1.62.0.6
	OPENBSD_4_6_BASE:1.62
	OPENBSD_4_5:1.62.0.2
	OPENBSD_4_5_BASE:1.62
	OPENBSD_4_4:1.53.0.2
	OPENBSD_4_4_BASE:1.53
	OPENBSD_4_3:1.50.0.2
	OPENBSD_4_3_BASE:1.50
	OPENBSD_4_2:1.47.0.2
	OPENBSD_4_2_BASE:1.47
	OPENBSD_4_1:1.45.0.4
	OPENBSD_4_1_BASE:1.45
	OPENBSD_4_0:1.45.0.2
	OPENBSD_4_0_BASE:1.45
	OPENBSD_3_9:1.42.0.2
	OPENBSD_3_9_BASE:1.42
	OPENBSD_3_8:1.41.0.2
	OPENBSD_3_8_BASE:1.41
	OPENBSD_3_7:1.37.0.4
	OPENBSD_3_7_BASE:1.37
	OPENBSD_3_6:1.37.0.2
	OPENBSD_3_6_BASE:1.37
	OPENBSD_3_5:1.36.0.2
	OPENBSD_3_5_BASE:1.36
	OPENBSD_3_4:1.28.0.2
	OPENBSD_3_4_BASE:1.28
	OPENBSD_3_3:1.25.0.2
	OPENBSD_3_3_BASE:1.25
	OPENBSD_3_2:1.24.0.4
	OPENBSD_3_2_BASE:1.24
	OPENBSD_3_1:1.24.0.2
	OPENBSD_3_1_BASE:1.24
	OPENBSD_3_0:1.20.0.6
	OPENBSD_3_0_BASE:1.20
	OPENBSD_2_9:1.20.0.4
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_8:1.20.0.2
	OPENBSD_2_8_BASE:1.20
	OPENBSD_2_7:1.19.0.2
	OPENBSD_2_7_BASE:1.19
	OPENBSD_2_6:1.15.0.2
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.109
date	2017.04.06.17.00.52;	author otto;	state Exp;
branches;
next	1.108;
commitid	9SsFHXkD3GzrKFaz;

1.108
date	2017.03.29.17.38.37;	author otto;	state Exp;
branches;
next	1.107;
commitid	D1jsYSH2h603X8MN;

1.107
date	2017.03.26.09.21.33;	author otto;	state Exp;
branches;
next	1.106;
commitid	zsibKQhy3iQ95J5n;

1.106
date	2017.03.24.16.17.50;	author otto;	state Exp;
branches;
next	1.105;
commitid	YWgR0vO51yPAVp3F;

1.105
date	2017.03.17.18.33.04;	author jmc;	state Exp;
branches;
next	1.104;
commitid	FQIfPsO50ti4xKoG;

1.104
date	2017.03.17.17.00.38;	author deraadt;	state Exp;
branches;
next	1.103;
commitid	3MobdlWNGJJtIVQZ;

1.103
date	2017.03.07.06.07.50;	author otto;	state Exp;
branches;
next	1.102;
commitid	T9iN1Bl0K73w4cpO;

1.102
date	2017.03.06.18.44.21;	author otto;	state Exp;
branches;
next	1.101;
commitid	XQxMPlK86q4Re2je;

1.101
date	2017.02.12.10.46.09;	author otto;	state Exp;
branches;
next	1.100;
commitid	i1SGH2ldQNXcKqYm;

1.100
date	2016.10.20.08.03.15;	author jmc;	state Exp;
branches;
next	1.99;
commitid	YijGb8tOHW7i6Z6e;

1.99
date	2016.10.20.05.49.59;	author otto;	state Exp;
branches;
next	1.98;
commitid	ENRK1TAGqNNYcM5W;

1.98
date	2016.10.08.12.56.18;	author otto;	state Exp;
branches;
next	1.97;
commitid	q3r1b1D6eML8OJEL;

1.97
date	2016.10.07.14.43.13;	author jmc;	state Exp;
branches;
next	1.96;
commitid	H4BVhOJE8fKW3WEN;

1.96
date	2016.10.07.12.59.04;	author otto;	state Exp;
branches;
next	1.95;
commitid	S5Z8MFKU8NUjZ6Av;

1.95
date	2016.04.03.09.31.45;	author otto;	state Exp;
branches;
next	1.94;
commitid	DfFq2nHQ66VDCV6V;

1.94
date	2016.03.12.21.31.22;	author mmcc;	state Exp;
branches;
next	1.93;
commitid	KhDV1S6CZAu8cbBc;

1.93
date	2016.02.05.15.09.09;	author schwarze;	state Exp;
branches;
next	1.92;
commitid	STF67wUHGCNVEM0U;

1.92
date	2016.01.06.17.57.22;	author tedu;	state Exp;
branches;
next	1.91;
commitid	6hdC6citgQ7pUGrN;

1.91
date	2015.09.14.13.08.01;	author schwarze;	state Exp;
branches;
next	1.90;
commitid	YV9Btzibn39kPFq6;

1.90
date	2015.03.14.08.07.17;	author tedu;	state Exp;
branches;
next	1.89;
commitid	D6HFJrPxBlg7YJVp;

1.89
date	2015.01.08.03.41.14;	author deraadt;	state Exp;
branches;
next	1.88;
commitid	UdgVkx6qLKWSgXCX;

1.88
date	2014.12.09.14.22.43;	author jmc;	state Exp;
branches;
next	1.87;
commitid	uK6PWOqhZLpLJLe8;

1.87
date	2014.12.08.20.42.23;	author tedu;	state Exp;
branches;
next	1.86;
commitid	s6fBA1485k8ngyVP;

1.86
date	2014.12.06.18.54.55;	author schwarze;	state Exp;
branches;
next	1.85;
commitid	hnyzhLLlbSmHuq4Z;

1.85
date	2014.10.30.21.47.47;	author deraadt;	state Exp;
branches;
next	1.84;
commitid	8EnzKrhnTo490SVI;

1.84
date	2014.10.30.20.43.35;	author millert;	state Exp;
branches;
next	1.83;
commitid	GEJVQrTUwGUQKy69;

1.83
date	2014.10.23.05.48.40;	author doug;	state Exp;
branches;
next	1.82;
commitid	KYigWbgINXOXyl9O;

1.82
date	2014.10.22.05.19.27;	author doug;	state Exp;
branches;
next	1.81;
commitid	hEFbj3pJ3s8R1ls9;

1.81
date	2014.10.20.19.35.23;	author schwarze;	state Exp;
branches;
next	1.80;
commitid	jla3cAVe7a3lniLO;

1.80
date	2014.10.19.21.05.53;	author schwarze;	state Exp;
branches;
next	1.79;
commitid	ltIAiMQTErdIlCl1;

1.79
date	2014.10.19.17.58.14;	author doug;	state Exp;
branches;
next	1.78;
commitid	A1srqQd2AwVFnzy6;

1.78
date	2014.05.01.18.41.59;	author jmc;	state Exp;
branches;
next	1.77;

1.77
date	2014.04.30.23.28.05;	author sthen;	state Exp;
branches;
next	1.76;

1.76
date	2014.04.22.15.02.16;	author jmc;	state Exp;
branches;
next	1.75;

1.75
date	2014.04.22.14.26.26;	author tedu;	state Exp;
branches;
next	1.74;

1.74
date	2014.04.21.13.17.32;	author deraadt;	state Exp;
branches;
next	1.73;

1.73
date	2013.07.18.10.14.49;	author schwarze;	state Exp;
branches;
next	1.72;

1.72
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.71;

1.71
date	2012.11.02.18.18.15;	author djm;	state Exp;
branches;
next	1.70;

1.70
date	2011.07.22.07.00.44;	author otto;	state Exp;
branches;
next	1.69;

1.69
date	2011.07.21.20.34.32;	author jasper;	state Exp;
branches;
next	1.68;

1.68
date	2010.05.26.08.22.11;	author jmc;	state Exp;
branches;
next	1.67;

1.67
date	2010.05.26.07.27.38;	author thib;	state Exp;
branches;
next	1.66;

1.66
date	2010.05.18.22.24.55;	author tedu;	state Exp;
branches;
next	1.65;

1.65
date	2010.01.25.20.14.11;	author jmc;	state Exp;
branches;
next	1.64;

1.64
date	2010.01.13.12.40.11;	author otto;	state Exp;
branches;
next	1.63;

1.63
date	2009.10.10.18.36.52;	author otto;	state Exp;
branches;
next	1.62;

1.62
date	2009.02.13.23.36.17;	author jmc;	state Exp;
branches;
next	1.61;

1.61
date	2009.02.13.18.49.14;	author otto;	state Exp;
branches;
next	1.60;

1.60
date	2008.12.30.07.44.51;	author djm;	state Exp;
branches;
next	1.59;

1.59
date	2008.12.29.22.25.50;	author djm;	state Exp;
branches;
next	1.58;

1.58
date	2008.11.26.12.06.54;	author pedro;	state Exp;
branches;
next	1.57;

1.57
date	2008.11.20.09.05.15;	author otto;	state Exp;
branches;
next	1.56;

1.56
date	2008.11.02.14.42.01;	author otto;	state Exp;
branches;
next	1.55;

1.55
date	2008.11.02.08.50.41;	author otto;	state Exp;
branches;
next	1.54;

1.54
date	2008.08.07.18.41.47;	author otto;	state Exp;
branches;
next	1.53;

1.53
date	2008.07.28.19.53.03;	author otto;	state Exp;
branches;
next	1.52;

1.52
date	2008.05.20.11.25.26;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2008.05.19.19.36.15;	author otto;	state Exp;
branches;
next	1.50;

1.50
date	2007.09.05.06.03.08;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2007.09.03.21.38.34;	author millert;	state Exp;
branches;
next	1.48;

1.48
date	2007.09.03.14.37.02;	author millert;	state Exp;
branches;
next	1.47;

1.47
date	2007.08.08.21.24.29;	author millert;	state Exp;
branches;
next	1.46;

1.46
date	2007.05.31.19.19.31;	author jmc;	state Exp;
branches;
next	1.45;

1.45
date	2006.06.06.14.49.26;	author pedro;	state Exp;
branches;
next	1.44;

1.44
date	2006.04.02.18.22.14;	author otto;	state Exp;
branches;
next	1.43;

1.43
date	2006.03.26.19.56.08;	author ray;	state Exp;
branches;
next	1.42;

1.42
date	2006.01.18.06.36.05;	author jakemsr;	state Exp;
branches;
next	1.41;

1.41
date	2005.07.26.04.20.23;	author jaredy;	state Exp;
branches;
next	1.40;

1.40
date	2005.06.07.09.04.42;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2005.06.07.04.42.42;	author tedu;	state Exp;
branches;
next	1.38;

1.38
date	2005.05.24.16.48.35;	author tedu;	state Exp;
branches;
next	1.37;

1.37
date	2004.07.02.10.42.55;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2004.02.09.13.07.42;	author espie;	state Exp;
branches;
next	1.35;

1.35
date	2004.02.04.08.59.00;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2004.02.02.18.15.52;	author tedu;	state Exp;
branches;
next	1.33;

1.33
date	2003.11.25.12.32.54;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2003.10.16.17.05.04;	author tedu;	state Exp;
branches;
next	1.31;

1.31
date	2003.09.26.05.57.02;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2003.09.25.11.10.56;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2003.09.18.22.49.13;	author tedu;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.02.20.18.37;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.01.19.27.27;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2003.05.14.04.48.06;	author krw;	state Exp;
branches;
next	1.25;

1.25
date	2003.01.21.19.59.09;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2001.12.05.09.49.39;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2001.11.05.21.31.21;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.30.21.17.44;	author tdeval;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.30.17.01.07;	author tdeval;	state Exp;
branches;
next	1.20;

1.20
date	2000.10.25.15.23.15;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	2000.04.20.02.14.26;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	2000.01.19.05.36.38;	author pjanzen;	state Exp;
branches;
next	1.17;

1.17
date	99.11.10.22.19.22;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	99.11.09.22.12.36;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.06.29.18.36.21;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.05.27.20.49.35;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.05.23.14.11.03;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.05.10.17.56.28;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.03.23.21.07.57;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	98.11.17.23.41.43;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	98.08.15.20.32.02;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.04.28.07.36.47;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.08.23.10.43.24;	author pefo;	state Exp;
branches;
next	1.6;

1.6
date	97.05.31.08.55.05;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	97.05.31.08.47.55;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.09.26.04.19.41;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.21.03.12.18;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.08.10.04.18.49;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.18;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.109
log
@Consistentcy between nmembers and size order. From Christopher Hettrick;
ok deraadt@@
@
text
@.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: malloc.3,v 1.108 2017/03/29 17:38:37 otto Exp $
.\"
.Dd $Mdocdate: March 29 2017 $
.Dt MALLOC 3
.Os
.Sh NAME
.Nm malloc ,
.Nm calloc ,
.Nm reallocarray ,
.Nm recallocarray ,
.Nm realloc ,
.Nm free
.Nd memory allocation and deallocation
.Sh SYNOPSIS
.In stdlib.h
.Ft void *
.Fn malloc "size_t size"
.Ft void *
.Fn calloc "size_t nmemb" "size_t size"
.Ft void *
.Fn reallocarray "void *ptr" "size_t nmemb" "size_t size"
.Ft void *
.Fn recallocarray "void *ptr" "size_t oldnmemb" "size_t nmemb" "size_t size"
.Ft void *
.Fn realloc "void *ptr" "size_t size"
.Ft void
.Fn free "void *ptr"
.Vt char *malloc_options ;
.Sh DESCRIPTION
The
.Fn malloc
function allocates uninitialized space for an object of
the specified
.Fa size .
.Fn malloc
maintains multiple lists of free blocks according to size, allocating
space from the appropriate list.
The allocated space is suitably aligned (after possible pointer coercion) for
storage of any type of object.
.Pp
The
.Fn calloc
function allocates space for an array of
.Fa nmemb
objects, each of the specified
.Fa size .
The space is initialized to zero.
.Pp
The
.Fn realloc
function changes the size of the object pointed to by
.Fa ptr
to
.Fa size
bytes and returns a pointer to the (possibly moved) object.
The contents of the object are unchanged up to the lesser
of the new and old sizes.
If the new size is larger, the value of the newly allocated portion
of the object is indeterminate and uninitialized.
If the space cannot be allocated, the object
pointed to by
.Fa ptr
is unchanged.
If
.Fa ptr
is
.Dv NULL ,
.Fn realloc
behaves like
.Fn malloc
and allocates a new object.
.Pp
The
.Fn reallocarray
function is similar to
.Fn realloc
except it operates on
.Fa nmemb
members of size
.Fa size
and checks for integer overflow in the calculation
.Fa nmemb
*
.Fa size .
.Pp
The
.Fn recallocarray
function is similar to
.Fn reallocarray
except it ensures newly allocated memory is cleared similar to
.Xr calloc 3 .
Memory that becomes unallocated while shrinking or moving existing
allocations is explicitly discarded (meaning, pages of memory
are disposed via
.Xr munmap 2 ,
and smaller allocations are cleared with
.Xr explicit_bzero 3 ) .
If
.Fa ptr
is a
.Dv NULL
pointer,
.Fa oldnmemb
is ignored and the call is equivalent to
.Fn calloc .
If
.Fa ptr
is not a
.Dv NULL
pointer,
.Fa oldnmemb
must be a value such that
.Fa oldnmemb
*
.Fa size
is the size of the earlier allocation that returned
.Fa ptr ,
otherwise the behaviour is undefined.
.Pp
The
.Fn free
function causes the space pointed to by
.Fa ptr
to be either placed on a list of free pages to make it available for future
allocation or, if required, to be returned to the kernel using
.Xr munmap 2 .
If
.Fa ptr
is a
.Dv NULL
pointer, no action occurs.
If
.Fa ptr
was previously freed by
.Fn free
or a reallocation function,
the behavior is undefined and the double free is a security concern.
.Sh RETURN VALUES
Upon successful completion, the allocation functions
return a pointer to the allocated space; otherwise, a
.Dv NULL
pointer is returned and
.Va errno
is set to
.Er ENOMEM .
.Pp
If
.Fa nmemb
or
.Fa size
is equal to 0, a unique pointer to an access protected,
zero sized object is returned.
Access via this pointer will generate a
.Dv SIGSEGV
exception.
.Pp
If multiplying
.Fa nmemb
and
.Fa size
results in integer overflow,
.Fn calloc ,
.Fn reallocarray
and
.Fn recallocarray
return
.Dv NULL
and set
.Va errno
to
.Er ENOMEM .
.Pp
If
.Fa ptr
is not NULL and multiplying
.Fa oldnmemb
and
.Fa size
results in integer overflow
.Fn recallocarray
returns
.Dv NULL
and sets
.Va errno
to
.Er EINVAL .
.Sh IDIOMS
Consider
.Fn calloc
or the extensions
.Fn reallocarray
and
.Fn recallocarray
when there is multiplication in the
.Fa size
argument of
.Fn malloc
or
.Fn realloc .
For example, avoid this common idiom as it may lead to integer overflow:
.Bd -literal -offset indent
if ((p = malloc(num * size)) == NULL)
	err(1, NULL);
.Ed
.Pp
A drop-in replacement is the
.Ox
extension
.Fn reallocarray :
.Bd -literal -offset indent
if ((p = reallocarray(NULL, num, size)) == NULL)
	err(1, NULL);
.Ed
.Pp
Alternatively,
.Fn calloc
may be used at the cost of initialization overhead.
.Pp
When using
.Fn realloc ,
be careful to avoid the following idiom:
.Bd -literal -offset indent
size += 50;
if ((p = realloc(p, size)) == NULL)
	return (NULL);
.Ed
.Pp
Do not adjust the variable describing how much memory has been allocated
until the allocation has been successful.
This can cause aberrant program behavior if the incorrect size value is used.
In most cases, the above sample will also result in a leak of memory.
As stated earlier, a return value of
.Dv NULL
indicates that the old object still remains allocated.
Better code looks like this:
.Bd -literal -offset indent
newsize = size + 50;
if ((newp = realloc(p, newsize)) == NULL) {
	free(p);
	p = NULL;
	size = 0;
	return (NULL);
}
p = newp;
size = newsize;
.Ed
.Pp
As with
.Fn malloc ,
it is important to ensure the new size value will not overflow;
i.e. avoid allocations like the following:
.Bd -literal -offset indent
if ((newp = realloc(p, num * size)) == NULL) {
	...
.Ed
.Pp
Instead, use
.Fn reallocarray :
.Bd -literal -offset indent
if ((newp = reallocarray(p, num, size)) == NULL) {
	...
.Ed
.Pp
Calling
.Fn realloc
with a
.Dv NULL
.Fa ptr
is equivalent to calling
.Fn malloc .
Instead of this idiom:
.Bd -literal -offset indent
if (p == NULL)
	newp = malloc(newsize);
else
	newp = realloc(p, newsize);
.Ed
.Pp
Use the following:
.Bd -literal -offset indent
newp = realloc(p, newsize);
.Ed
.Pp
The
.Fn recallocarray
function should be used for resizing objects containing sensitive data like
keys.
To avoid leaking information,
it guarantees memory is cleared before placing it on the internal free list.
A
.Fn free
call for such an object should still be preceded by a call to
.Xr explicit_bzero 3 .
.Sh ENVIRONMENT
.Bl -tag -width "/etc/malloc.conf"
.It Ev MALLOC_OPTIONS
String of flags documented in
.Xr malloc.conf 5 .
.El
.Sh FILES
.Bl -tag -width "/etc/malloc.conf"
.It Pa /etc/malloc.conf
Symbolic link to filename containing option flags.
.El
.Sh EXAMPLES
If
.Fn malloc
must be used with multiplication, be sure to test for overflow:
.Bd -literal -offset indent
size_t num, size;
\&...

/* Check for size_t overflow */
if (size && num > SIZE_MAX / size)
	errc(1, EOVERFLOW, "overflow");

if ((p = malloc(num * size)) == NULL)
	err(1, NULL);
.Ed
.Pp
The above test is not sufficient in all cases.
For example, multiplying ints requires a different set of checks:
.Bd -literal -offset indent
int num, size;
\&...

/* Avoid invalid requests */
if (size < 0 || num < 0)
	errc(1, EOVERFLOW, "overflow");

/* Check for signed int overflow */
if (size && num > INT_MAX / size)
	errc(1, EOVERFLOW, "overflow");

if ((p = malloc(num * size)) == NULL)
	err(1, NULL);
.Ed
.Pp
Assuming the implementation checks for integer overflow as
.Ox
does, it is much easier to use
.Fn calloc ,
.Fn reallocarray ,
or
.Fn recallocarray .
.Pp
The above examples could be simplified to:
.Bd -literal -offset indent
if ((p = reallocarray(NULL, num, size)) == NULL)
	err(1, NULL);
.Ed
.Pp
or at the cost of initialization:
.Bd -literal -offset indent
if ((p = calloc(num, size)) == NULL)
	err(1, NULL);
.Ed
.Sh DIAGNOSTICS
If any of the functions detect an error condition,
a message will be printed to file descriptor
2 (not using stdio).
Errors will result in the process being aborted.
.Pp
Here is a brief description of the error messages and what they mean:
.Bl -tag -width Ds
.It Dq out of memory
If the
.Cm X
option is specified it is an error for the allocation functions
to return
.Dv NULL .
.It Dq malloc init mmap failed
This is a rather weird condition that is most likely to indicate a
seriously overloaded system or a ulimit restriction.
.It Dq bogus pointer (double free?)
An attempt to
.Fn free
or
reallocate an unallocated pointer was made.
.It Dq chunk is already free
There was an attempt to free a chunk that had already been freed.
.It Dq use after free
A chunk has been modified after it was freed.
.It Dq modified chunk-pointer
The pointer passed to
.Fn free
or a reallocation function has been modified.
.It Dq chunk canary corrupted address offset@@length
A byte after the requested size has been overwritten,
indicating a heap overflow.
The offset at which corruption was detected is printed before the @@,
and the requested length of the allocation after the @@.
.It Dq recorded old size oldsize != size
.Fn recallocarray
has detected that the given old size does not equal the recorded size in its
meta data.
Enabling option
.Cm C
allows
.Fn recallocarray
to catch more of these cases.
.It Dq recursive call
An attempt was made to call recursively into these functions, i.e., from a
signal handler.
This behavior is not supported.
In particular, signal handlers should
.Em not
use any of the
.Fn malloc
functions nor utilize any other functions which may call
.Fn malloc
(e.g.,
.Xr stdio 3
routines).
.It Dq unknown char in MALLOC_OPTIONS
We found something we didn't understand.
.It any other error
.Fn malloc
detected an internal error;
consult sources and/or wizards.
.El
.Sh SEE ALSO
.Xr brk 2 ,
.Xr mmap 2 ,
.Xr munmap 2 ,
.Xr alloca 3 ,
.Xr getpagesize 3 ,
.Xr posix_memalign 3 ,
.Xr sysconf 3 ,
.Xr malloc.conf 5
.Sh STANDARDS
The
.Fn malloc ,
.Fn calloc ,
.Fn realloc ,
and
.Fn free
functions conform to
.St -ansiC .
.Pp
If
.Fa nmemb
or
.Fa size
are 0, the return value is implementation defined;
other conforming implementations may return
.Dv NULL
in this case.
.Pp
The
.Ev MALLOC_OPTIONS
environment variable, the file
.Pa /etc/malloc.conf ,
and the
.Sx DIAGNOSTICS
output are extensions to the standard.
.Sh HISTORY
A
.Fn free
internal kernel function and a predecessor to
.Fn malloc ,
.Fn alloc ,
first appeared in
.At v1 .
C library functions
.Fn alloc
and
.Fn free
appeared in
.At v6 .
The functions
.Fn malloc ,
.Fn calloc ,
and
.Fn realloc
first appeared in
.At v7 .
.Pp
A new implementation by Chris Kingsley was introduced in
.Bx 4.2 ,
followed by a complete rewrite by Poul-Henning Kamp which appeared in
.Fx 2.2
and was included in
.Ox 2.0 .
These implementations were all
.Xr sbrk 2
based.
In
.Ox 3.8 ,
Thierry Deval rewrote
.Nm
to use the
.Xr mmap 2
system call,
making the page addresses returned by
.Nm
random.
A rewrite by Otto Moerbeek introducing a new central data structure and more
randomization appeared in
.Ox 4.4 .
.Pp
The
.Fn reallocarray
function appeared in
.Ox 5.6 .
The
.Fn recallocarray
function appeared in
.Ox 6.1 .
.Sh CAVEATS
When using
.Fn malloc ,
be wary of signed integer and
.Vt size_t
overflow especially when there is multiplication in the
.Fa size
argument.
.Pp
Signed integer overflow will cause undefined behavior which compilers
typically handle by wrapping back around to negative numbers.
Depending on the input, this can result in allocating more or less
memory than intended.
.Pp
An unsigned overflow has defined behavior which will wrap back around and
return less memory than intended.
.Pp
A signed or unsigned integer overflow is a
.Em security
risk if less memory is returned than intended.
Subsequent code may corrupt the heap by writing beyond the memory that was
allocated.
An attacker may be able to leverage this heap corruption to execute arbitrary
code.
.Pp
Consider using
.Fn calloc ,
.Fn reallocarray
or
.Fn recallocarray
instead of using multiplication in
.Fn malloc
and
.Fn realloc
to avoid these problems on
.Ox .
@


1.108
log
@rephrase more enumerations of functions
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.107 2017/03/26 09:21:33 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: March 26 2017 $
d180 2
a182 2
or
.Fa nmemb
d349 1
a349 1
if ((p = malloc(size * num)) == NULL)
d367 1
a367 1
if ((p = malloc(size * num)) == NULL)
d474 2
a476 2
or
.Fa nmemb
@


1.107
log
@Stop enumeration all allocation functions, just say "allocation functions"
ok jmc@@ deraadt@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.106 2017/03/24 16:17:50 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: March 24 2017 $
d168 1
a168 1
or an allocation function,
d409 1
a409 2
.Fn free ,
.Fn realloc ,
d411 1
a411 2
.Fn reallocarray
an unallocated pointer was made.
d418 2
a419 5
.Fn free ,
.Fn realloc ,
or
.Fn reallocarray
has been modified.
d429 3
a431 1
Enabling option C allows
@


1.106
log
@document new recallocarray diagnostic; zap a few diagnostics that should
never occur
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.105 2017/03/17 18:33:04 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: March 17 2017 $
d167 2
a168 5
.Fn free ,
.Fn realloc ,
.Fn reallocarray
or
.Fn recallocarray ,
d171 1
a171 7
Upon successful completion, the functions
.Fn malloc ,
.Fn calloc ,
.Fn realloc ,
.Fn reallocarray
and
.Fn recallocarray
d374 2
a375 1
.Fn calloc
d377 1
a377 1
.Fn reallocarray .
d391 1
a391 8
If
.Fn malloc ,
.Fn calloc ,
.Fn realloc ,
.Fn reallocarray ,
or
.Fn free
detect an error condition,
d401 1
a401 6
option is specified it is an error for
.Fn malloc ,
.Fn calloc ,
.Fn realloc ,
or
.Fn reallocarray
d571 2
a572 1
.Fn calloc
d574 1
a574 1
.Fn reallocarray
@


1.105
log
@remove unneccessary macro;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.104 2017/03/17 17:00:38 deraadt Exp $
d450 7
a471 6
.It Dq malloc cache overflow/underflow
The internal malloc page cache has been corrupted.
.It Dq malloc free slot lost
The internal malloc page cache has been corrupted.
.It Dq guard size
An inconsistent guard size was detected.
@


1.104
log
@Strengthen description of recallocarray(3) behaviour, hoping that readers
make the behaviour -> use case connection.
help from jmc and jsing
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.103 2017/03/07 06:07:50 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: March 7 2017 $
d129 1
a129 1
.Xr explicit_bzero 3 Ns ).
@


1.103
log
@Some tweaks from jmc@@ and describe better what recallocarray does;
help and ok from tom@@ and deraadt@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.102 2017/03/06 18:44:21 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: March 6 2017 $
d122 8
a129 3
except that it takes care of clearing newly allocated memory.
Additionally, the memory that becomes unallocated while shrinking
or moving existing allocations is erased.
@


1.102
log
@Introducing recallocarray(3), a blend of calloc(3) and reallocarray(3)
with the added feature that released memory is cleared. Much input from various
developers. ok deraadt@@ tom@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.101 2017/02/12 10:46:09 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: February 12 2017 $
d42 1
d122 3
a124 1
except that it takes care of clearing newly allocated and freed memory.
d141 1
a141 1
* 
d143 1
a143 1
is the size of an earlier allocation that returned
d210 1
a210 1
.Fa ptr 
d226 1
a226 1
or the extension
d228 2
d555 4
@


1.101
log
@malloc does not *need* to return page-aligned objects for size >=
a page.  This is not required by any standard and other malloc
implementation do not document (or implement) this. ok deraadt@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.100 2016/10/20 08:03:15 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: October 20 2016 $
d54 2
d118 27
d161 1
d163 1
a163 1
.Fn reallocarray ,
d170 1
d172 1
a172 1
.Fn reallocarray
d195 2
a196 1
.Fn calloc
d198 1
a198 1
.Fn reallocarray
d205 15
d314 11
@


1.100
log
@avoid sentence splicing;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.99 2016/10/20 05:49:59 otto Exp $
a68 3
If the space is of
.Em pagesize
or larger, the memory returned will be page-aligned.
@


1.99
log
@canary corruption message changed a bit
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.98 2016/10/08 12:56:18 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: October 8 2016 $
d384 1
a384 1
the requested length of the allocation after the @@.
@


1.98
log
@make clear the length printed is the requested length
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.97 2016/10/07 14:43:13 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: October 7 2016 $
d380 1
a380 1
.It Dq chunk canary corrupted 0xhhhhllll
d383 2
a384 2
The high word is the requested length of the chunk;
the low word is the offset at which corruption was detected.
@


1.97
log
@grammar fix previous;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.96 2016/10/07 12:59:04 otto Exp $
d383 1
a383 1
The high word is the length of the chunk;
@


1.96
log
@document "chunk canary corrupted" error
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.95 2016/04/03 09:31:45 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: April 3 2016 $
d383 1
a383 1
The high word is the length of the chunk,
@


1.95
log
@Document ``use after free'' error message
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.94 2016/03/12 21:31:22 mmcc Exp $
d35 1
a35 1
.Dd $Mdocdate: March 12 2016 $
d380 5
@


1.94
log
@Remove sentences in RETURN VALUES sections saying that functions with
void return types 'return no value'. This is obvious and therefore
unneccessary to mention.

We spare rewind(3)'s sentence because espie@@ pointed out that it's a
warning - the function masks a potential error.

This commit also adds a sentence to X509_free clarifying that it's
NULL-safe. This bit was discussed with doug@@.

ok martijn@@, sentiment supported by schwarze@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.93 2016/02/05 15:09:09 schwarze Exp $
d35 1
a35 1
.Dd $Mdocdate: February 5 2016 $
d371 2
@


1.93
log
@Fix err(3) calls after allocation failures in examples.
There is long-standing consensus that err(1, NULL) is the best idiom
after failure of malloc(3) and friends.
Quirk in the manual noticed by tb@@.
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.92 2016/01/06 17:57:22 tedu Exp $
d35 1
a35 1
.Dd $Mdocdate: January 6 2016 $
a175 4
.Pp
The
.Fn free
function returns no value.
@


1.92
log
@Long ago, malloc internally had two kinds of failures, warnings and errors.
The 'A' option elevated warnings to errors, and has been the default for some
time. Then warnings were effectively eliminated in favor of everything
being an error, but then the 'a' flag turned real errors into warnings!
Remove the 'a' option entirely. You shouldn't have used it anyway.
ok tb tdeval
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.91 2015/09/14 13:08:01 schwarze Exp $
d35 1
a35 1
.Dd $Mdocdate: September 14 2015 $
d194 1
a194 1
	err(1, "malloc");
d203 1
a203 1
	err(1, "reallocarray");
d298 1
a298 1
	err(1, "malloc");
d316 1
a316 1
	err(1, "malloc");
d329 1
a329 1
	err(1, "reallocarray");
d335 1
a335 1
	err(1, "calloc");
@


1.91
log
@use .Va for global variables, and .Vt where the type is included
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.90 2015/03/14 08:07:17 tedu Exp $
d35 1
a35 1
.Dd $Mdocdate: March 14 2015 $
d348 1
a348 4
Errors will result in the process being aborted,
unless the
.Cm a
option has been specified.
@


1.90
log
@remove incorrect statement. the standard *does* require calloc to check
for overflow. stop talking about old broken systems, there's little use
for such info.
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.89 2015/01/08 03:41:14 deraadt Exp $
d35 1
a35 1
.Dd $Mdocdate: January 8 2015 $
d57 1
a57 2
.Ft char * Ns
.Va malloc_options ;
@


1.89
log
@missing , found by Dongsheng Song
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.88 2014/12/09 14:22:43 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: December 9 2014 $
a438 5
.Pp
The standard does not require
.Fn calloc
to check for integer overflow,
but most modern implementations provide this check.
@


1.88
log
@fix NAME;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.87 2014/12/08 20:42:23 tedu Exp $
d35 1
a35 1
.Dd $Mdocdate: December 8 2014 $
d134 1
a134 1
.Fn free
@


1.87
log
@remove cfree from documentation
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.86 2014/12/06 18:54:55 schwarze Exp $
d35 1
a35 1
.Dd $Mdocdate: December 6 2014 $
d43 1
a43 1
.Nm free ,
@


1.86
log
@malloc(3) is in the "comp" install set, malloc.conf(5) in "man",
breaking the hardlink between file system entries, confusing apropos(1).
Split malloc.conf(5) out of malloc(3) as suggested by deraadt@@.
Feedback and OK jmc@@, OK deraadt@@ tedu@@ jasper@@.
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.85 2014/10/30 21:47:47 deraadt Exp $
d35 1
a35 1
.Dd $Mdocdate: October 30 2014 $
a43 1
.Nm cfree
a56 2
.Ft void
.Fn cfree "void *ptr"
a138 7
.Pp
A
.Fn cfree
function is also provided for compatibility with old systems and other
.Nm malloc
libraries; it is simply an alias for
.Fn free .
d180 1
a180 3
and
.Fn cfree
functions return no value.
a500 4
.Pp
The
.Fn cfree
function appeared in SunOS 4.x.
@


1.85
log
@clean up verbiage around the calculations; ok ingo jmc otto
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.84 2014/10/30 20:43:35 millert Exp $
d288 1
a288 1
.Bl -tag -width Ev
d290 2
a291 1
See below.
d296 1
a296 1
symbolic link to filename containing option flags
a423 120
.Sh MALLOC_OPTIONS
Malloc will first look for a symbolic link called
.Pa /etc/malloc.conf
and next check the environment for a variable called
.Ev MALLOC_OPTIONS
and finally for the global variable
.Va malloc_options
and scan them for flags in that order.
Flags are single letters, uppercase means on, lowercase means off.
.Bl -tag -width indent
.It Cm A
.Dq Abort .
.Fn malloc
will coredump the process, rather than tolerate internal
inconsistencies or incorrect usage.
This is the default and a very handy debugging aid,
since the core file represents the time of failure,
rather than when the bogus pointer was used.
.It Cm D
.Dq Dump .
.Fn malloc
will dump statistics to the file
.Pa ./malloc.out ,
if it already exists,
at exit.
This option requires the library to have been compiled with -DMALLOC_STATS in
order to have any effect.
.It Cm F
.Dq Freeguard .
Enable use after free detection.
Unused pages on the freelist are read and write protected to
cause a segmentation fault upon access.
This will also switch off the delayed freeing of chunks,
reducing random behaviour but detecting double
.Fn free
calls as early as possible.
This option is intended for debugging rather than improved security
(use the
.Cm U
option for security).
.It Cm G
.Dq Guard .
Enable guard pages.
Each page size or larger allocation is followed by a guard page that will
cause a segmentation fault upon any access.
.It Cm H
.Dq Hint .
Pass a hint to the kernel about pages we don't use.
If the machine is paging a lot this may help a bit.
.It Cm J
.Dq Junk .
Fill some junk into the area allocated.
Currently junk is bytes of 0xd0 when allocating; this is pronounced
.Dq Duh .
\&:-)
Freed chunks are filled with 0xdf.
.It Cm j
.Dq Don't Junk .
By default, small chunks are always junked, and the first part of pages
is junked after free.
This option ensures that no junking is performed.
.It Cm P
.Dq Move allocations within a page.
Allocations larger than half a page but smaller than a page
are aligned to the end of a page to catch buffer overruns in more
cases.
This is the default.
.It Cm R
.Dq realloc .
Always reallocate when
.Fn realloc
is called, even if the initial allocation was big enough.
This can substantially aid in compacting memory.
.\".Pp
.\".It Cm U
.\".Dq utrace .
.\"Generate entries for
.\".Xr ktrace 1
.\"for all operations.
.\"Consult the source for this one.
.It Cm S
Enable all options suitable for security auditing.
.It Cm U
.Dq Free unmap .
Enable use after free protection for larger allocations.
Unused pages on the freelist are read and write protected to
cause a segmentation fault upon access.
.It Cm X
.Dq xmalloc .
Rather than return failure,
.Xr abort 3
the program with a diagnostic message on stderr.
It is the intention that this option be set at compile time by
including in the source:
.Bd -literal -offset indent
extern char *malloc_options;
malloc_options = "X";
.Ed
.Pp
Note that this will cause code that is supposed to handle
out-of-memory conditions gracefully to abort instead.
.It Cm <
.Dq Half the cache size .
Decrease the size of the free page cache by a factor of two.
.It Cm >
.Dq Double the cache size .
Increase the size of the free page cache by a factor of two.
.El
.Pp
So to set a systemwide reduction of the cache to a quarter of the
default size and use guard pages:
.Dl # ln -s 'G<<' /etc/malloc.conf
.Pp
The flags are mostly for testing and debugging.
If a program changes behavior if any of these options (except
.Cm X )
are used,
it is buggy.
.Pp
The default number of free pages cached is 64.
d431 2
a432 1
.Xr sysconf 3
@


1.84
log
@Don't mention old systems where realloc(NULL, n) didn't work as we
don't want to give people the idea that this is non-portable (it
has been present since C89).  OK deraadt@@ schwarze@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.83 2014/10/23 05:48:40 doug Exp $
d35 1
a35 1
.Dd $Mdocdate: October 23 2014 $
d65 2
a66 2
function allocates uninitialized space for an object whose
size is specified by
d81 1
a81 1
objects, each of whose size is
d117 1
a117 1
and checks for integer overflow in
@


1.83
log
@Save space in man page: err() -> errc() and combine vars.

Suggested by millert@@ and schwarze@@.

OK schwarze@@, millert@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.82 2014/10/22 05:19:27 doug Exp $
d35 1
a35 1
.Dd $Mdocdate: October 22 2014 $
d268 1
a268 1
Code designed for some ancient platforms avoided calling
d272 3
a274 2
.Fa ptr .
Such hacks are no longer necessary in modern code.
d283 1
a283 6
Use the following as calling
.Fn realloc
with
.Dv NULL
is equivalent to calling
.Fn malloc :
@


1.82
log
@Avoid writing in second person in malloc.3

ok deraadt@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.81 2014/10/20 19:35:23 schwarze Exp $
d35 1
a35 1
.Dd $Mdocdate: October 20 2014 $
d306 1
a306 2
size_t size;
size_t num;
d310 3
a312 4
if (size && num > SIZE_MAX / size) {
	errno = EOVERFLOW;
	err(1, "overflow");
}
d320 1
a320 2
int size;
int num;
d324 2
a325 4
if (size < 0 || num < 0) {
	errno = EOVERFLOW;
	err(1, "overflow");
}
d328 2
a329 4
if (size && num > INT_MAX / size) {
	errno = EOVERFLOW;
	err(1, "overflow");
}
@


1.81
log
@List extensions in the STANDARDS section, replacing some text below CAVEATS.
Remove excessive technicalities on zero-sized objects as suggested by deraadt@@.
contributions and ok deraadt@@, ok jmc@@ on an earlier version
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.80 2014/10/19 21:05:53 schwarze Exp $
d35 1
a35 1
.Dd $Mdocdate: October 19 2014 $
d198 1
a198 1
when you have multiplication in the
d651 1
a651 2
overflow especially when you
have multiplication in the
d658 1
a658 1
memory than you intended.
d660 2
a661 2
An unsigned overflow has defined behavior which will wrap back around and you
will receive less memory than you intended.
d665 5
a669 5
risk if you end up allocating less memory than you intended.
Your code may corrupt the heap by writing beyond the memory that you
were allocated.
An attacker may be able to leverage this heap corruption to convince your
program to execute arbitrary code.
@


1.80
log
@make RETURN VALUES more concise
and fix two instances of "new sentence, new line" while here
feedback and ok jmc@@, ok doug@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.79 2014/10/19 17:58:14 doug Exp $
d162 1
d167 5
a171 2
is equal to 0,
a pointer to an access protected, zero sized object is returned.
d571 22
a646 29
The
.Fn calloc
function checks for integer overflow in
.Ox
and most other modern platforms.
Software targeting ancient platforms should not rely on this behavior.
.Pp
The
.Fn malloc ,
.Fn calloc ,
and
.Fn realloc
functions have implementation defined behavior when
.Fa size
or
.Fa nmemb
are zero.
.Pp
Allocation of a zero size object returns a pointer to an access protected zero
size object.
Many zero-sized objects can be placed consecutively in shared
protected pages.
The minimum size of the protection on each object is suitably aligned and
sized as previously stated, but the protection may extend further depending
on where in a protected zone the object lands.
Attempting to access these objects will generate a
.Pq Dv SIGSEGV
exception.
.Pp
@


1.79
log
@Revamp malloc.3 by reordering the sections and rewriting parts.

The old man page had a lot of useful information, but it was all mixed
together which made it difficult to reference.  The main theme in this
commit is that the sections are more focused:

* DESCRIPTION describes the overall behavior
* RETURN VALUES describes what it may return (including implementation
  defined values)
* EXAMPLES shows why we recently started an audit on malloc and realloc
  usage in the tree.
* Added CAVEATS which describes what is implementation defined, gotchas
  and security implications of misusing these functions
* Added IDIOMS which describes how these functions should or
  should not be used

The MALLOC_OPTIONS section was left unchanged.  Function names were
added to DIAGNOSTICS and STANDARDS.  The MALLOC_OPTIONS and DIAGNOSTICS
sections were pushed down in the page so more pertinent information is
higher up.

This has gone through several revisions thanks to input from deraadt@@
and schwarze@@.  Ingo also helped with some of the mandoc formatting.

OK schwarze@@ (as far as it is a good starting point and the code
snippets look ok)
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.78 2014/05/01 18:41:59 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: May 1 2014 $
d100 8
d150 1
a150 1
If
d154 1
a154 1
or
d156 7
a162 1
is called with
d169 1
a169 22
If
.Fn malloc
is called with
.Fa size
greater than 0, it returns a pointer to the allocated space if successful;
otherwise, a
.Dv NULL
pointer is returned and
.Va errno
is set to
.Er ENOMEM .
.Pp
The
.Fn calloc
function checks for integer overflow and returns
.Dv NULL
if
.Fa nmemb
*
.Fa size
will result in integer overflow.
If
d173 1
a173 1
are greater than 0,
d175 1
a175 38
returns a pointer to the allocated space if successful; otherwise, a
.Dv NULL
pointer is returned and
.Va errno
is set to
.Er ENOMEM .
.Pp
The
.Fn realloc
function behaves like
.Fn malloc
for the specified
.Fa size
when
.Fa ptr
is
.Dv NULL .
If
.Fa size
is greater than 0,
.Fn realloc
returns a pointer to the allocated space if successful; otherwise, a
.Dv NULL
pointer is returned and
.Va errno
is set to
.Er ENOMEM .
.Pp
The
.Fn reallocarray
function checks for integer overflow and returns
.Dv NULL
if
.Fa nmemb
*
.Fa size
will result in integer overflow.
If
d177 1
a177 6
is called with
.Fa size
and
.Fa nmemb
greater than 0, it returns a pointer to the allocated space if successful;
otherwise, a
d179 1
a179 1
pointer is returned and
d181 1
a181 1
is set to
d269 2
a270 2
Such hacks are no longer necessary in modern code.  Instead of
this idiom:
d315 2
a316 2
The above test is not sufficient in all cases.  For example, multiplying
ints requires a different set of checks:
@


1.78
log
@tweak previous; ok sthen
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.77 2014/04/30 23:28:05 sthen Exp $
d35 1
a35 1
.Dd $Mdocdate: April 30 2014 $
a67 1
The
d69 1
a69 1
function maintains multiple lists of free blocks according to size, allocating
d71 2
a72 4
.Pp
The allocated space is
suitably aligned (after possible pointer
coercion) for storage of any type of object.
a76 40
Allocation of a zero size object returns a pointer to a zero size object.
This zero size object is access protected, so any access to it will
generate an exception (SIGSEGV).
Many zero-sized objects can be placed consecutively in shared
protected pages.
The minimum size of the protection on each object is suitably aligned and
sized as previously stated, but the protection may extend further depending
on where in a protected zone the object lands.
.Pp
When using
.Fn malloc
be careful to avoid the following idiom:
.Bd -literal -offset indent
if ((p = malloc(num * size)) == NULL)
	err(1, "malloc");
.Ed
.Pp
The multiplication may lead to an integer overflow, which can
be avoided using the extension
.Fn reallocarray ,
as follows:
.Bd -literal -offset indent
if ((p = reallocarray(NULL, num, size)) == NULL)
	err(1, "malloc");
.Ed
.Pp
Alternatively
.Fn calloc
is a more portable solution which comes with the cost of clearing memory.
.Pp
If
.Fn malloc
must be used, be sure to test for overflow:
.Bd -literal -offset indent
if (size && num > SIZE_MAX / size) {
	errno = ENOMEM;
	err(1, "overflow");
}
.Ed
.Pp
d84 18
a101 1
The use of
d103 10
a112 4
or
.Fn calloc
is strongly encouraged when allocating multiple sized objects
in order to avoid possible integer overflows.
d123 11
a133 1
is a null pointer, no action occurs.
d141 25
d168 6
a173 4
.Fn realloc
function changes the size of the object pointed to by
.Fa ptr
to
d175 1
a175 5
bytes and returns a pointer to the (possibly moved) object.
The contents of the object are unchanged up to the lesser
of the new and old sizes.
If the new size is larger, the value of the newly allocated portion
of the object is indeterminate and uninitialized.
d177 13
a189 2
.Fa ptr
is a null pointer, the
d191 1
a191 1
function behaves like the
d193 3
a195 3
function for the specified size.
If the space cannot be allocated, the object
pointed to by
d197 22
a218 1
is unchanged.
d220 24
d245 22
a266 4
is zero and
.Fa ptr
is not a null pointer, the object it points to is freed and a new zero size
object is returned.
d269 1
a269 1
.Fn realloc
d298 1
a298 1
.Fn malloc
d305 174
a598 105
.Sh RETURN VALUES
The
.Fn malloc ,
.Fn reallocarray ,
and
.Fn calloc
functions return a pointer to the allocated space if successful; otherwise,
a null pointer is returned and
.Va errno
is set to
.Er ENOMEM .
.Pp
The
.Fn free
and
.Fn cfree
functions return no value.
.Pp
The
.Fn realloc
function returns a pointer to the (possibly moved) allocated space
if successful; otherwise, a null pointer is returned and
.Va errno
is set to
.Er ENOMEM .
.Sh ENVIRONMENT
.Bl -tag -width Ev
.It Ev MALLOC_OPTIONS
See above.
.El
.Sh FILES
.Bl -tag -width "/etc/malloc.conf"
.It Pa /etc/malloc.conf
symbolic link to filename containing option flags
.El
.Sh DIAGNOSTICS
If
.Fn malloc ,
.Fn calloc ,
.Fn realloc ,
or
.Fn free
detect an error condition,
a message will be printed to file descriptor
2 (not using stdio).
Errors will result in the process being aborted,
unless the
.Cm a
option has been specified.
.Pp
Here is a brief description of the error messages and what they mean:
.Bl -tag -width Ds
.It Dq out of memory
If the
.Cm X
option is specified it is an error for
.Fn malloc ,
.Fn calloc ,
or
.Fn realloc
to return
.Dv NULL .
.It Dq malloc init mmap failed
This is a rather weird condition that is most likely to indicate a
seriously overloaded system or a ulimit restriction.
.It Dq bogus pointer (double free?)
An attempt to
.Fn free
or
.Fn realloc
an unallocated pointer was made.
.It Dq chunk is already free
There was an attempt to free a chunk that had already been freed.
.It Dq modified chunk-pointer
The pointer passed to
.Fn free
or
.Fn realloc
has been modified.
.It Dq recursive call
An attempt was made to call recursively into these functions, i.e., from a
signal handler.
This behavior is not supported.
In particular, signal handlers should
.Em not
use any of the
.Fn malloc
functions nor utilize any other functions which may call
.Fn malloc
(e.g.,
.Xr stdio 3
routines).
.It Dq unknown char in MALLOC_OPTIONS
We found something we didn't understand.
.It Dq malloc cache overflow/underflow
The internal malloc page cache has been corrupted.
.It Dq malloc free slot lost
The internal malloc page cache has been corrupted.
.It Dq guard size
An inconsistent guard size was detected.
.It any other error
.Fn malloc
detected an internal error;
consult sources and/or wizards.
.El
d605 2
a606 1
.Xr posix_memalign 3
d609 6
a614 2
.Fn malloc
function conforms to
d660 2
d663 1
a663 1
appeared in
d665 69
@


1.77
log
@first cut at documenting the change to malloc doing a partial 'junk' by
default and the new 'j' option to disable this; ok jmc@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.76 2014/04/22 15:02:16 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: April 22 2014 $
d278 1
a278 1
This flag disables the default so that no junking is performed.
@


1.76
log
@- one more mallocarray -> reallocarray
- use <>
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.75 2014/04/22 14:26:26 tedu Exp $
d274 5
@


1.75
log
@change mallocarray to reallocarray. useful in a few more situations.
malloc can, as always, be emulated via realloc(NULL).
ok deraadt
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.74 2014/04/21 13:17:32 deraadt Exp $
d35 1
a35 1
.Dd $Mdocdate: April 21 2014 $
d324 1
a324 1
.Dl # ln -s 'G\*(Lt\*(Lt' /etc/malloc.conf
d336 1
a336 1
.Fn mallocarray ,
@


1.74
log
@Introducing:      void *mallocarray(size_t nmemb, size_t size);
Like calloc(), except without the cleared-memory gaurantee
ok beck guenther, discussed for more than a year...
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.73 2013/07/18 10:14:49 schwarze Exp $
d35 1
a35 1
.Dd $Mdocdate: July 18 2013 $
d41 1
a41 1
.Nm mallocarray ,
d53 1
a53 1
.Fn mallocarray "size_t nmemb" "size_t size"
d99 1
a99 1
.Fn mallocarray ,
d102 1
a102 1
if ((p = mallocarray(num, size)) == NULL)
d128 2
a313 5
.It Cm Z
.Dq Zero .
Fill some junk into the area allocated (see
.Cm J ) ,
except for the exact length the user asked for, which is zeroed.
d494 1
a494 1
.Fn mallocarray
@


1.73
log
@HISTORY; tweaks and ok  sobrado@@ jmc@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.72 2013/06/05 03:39:23 tedu Exp $
d35 1
a35 1
.Dd $Mdocdate: June 5 2013 $
d41 1
d53 2
d60 1
a60 1
.Ft char *
d97 10
a106 2
The multiplication may lead to an integer overflow.
To avoid this,
d108 1
a108 1
is recommended.
d338 2
a339 1
.Fn malloc
d497 3
@


1.72
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.71 2012/11/02 18:18:15 djm Exp $
d35 1
a35 1
.Dd $Mdocdate: November 2 2012 $
d442 19
a460 3
The
.Nm
family of functions first appeared in
d462 1
@


1.71
log
@Add a new malloc option 'U' => "Free unmap" that does the guarding/
unmapping of freed allocations without disabling chunk randomisation
like the "Freeguard" ('F') option does. Make security 'S' option
use 'U' and not 'F'.

Rationale: guarding with no chunk randomisation is great for debugging
use-after-free, but chunk randomisation offers better defence against
"heap feng shui" style attacks that depend on carefully constructing a
particular heap layout so we should leave this enabled when requesting
security options.
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.70 2011/07/22 07:00:44 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: July 22 2011 $
d46 1
a46 1
.Fd #include <stdlib.h>
@


1.70
log
@Show (in the example) that < and > can be used multiple times; ok jmc@@
jasper@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.69 2011/07/21 20:34:32 jasper Exp $
d35 1
a35 1
.Dd $Mdocdate: July 21 2011 $
d234 1
a234 1
Enable use after free protection.
d241 4
d282 5
@


1.69
log
@- add a MALLOC_OPTIONS section header. the content is already there, but having
a section will help people looking for just the MALLOC_OPTIONS.

ok otto@@ jmc@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.68 2010/05/26 08:22:11 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: May 26 2010 $
d305 3
a307 2
So to set a systemwide reduction of cache size and use guard pages:
.Dl # ln -s 'G\*(Lt' /etc/malloc.conf
@


1.68
log
@oops - forgot to check for trailing whitespace;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.67 2010/05/26 07:27:38 thib Exp $
d205 1
a205 1
.Pp
@


1.67
log
@reword the 'D' dump bit to make it clear that the malloc.out file needs
to exist before exit for malloc to dump stats in it.

tweaks from jmc@@
ok otto@@,jmc@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.66 2010/05/18 22:24:55 tedu Exp $
d35 1
a35 1
.Dd $Mdocdate: May 18 2010 $
d226 1
a226 1
will dump statistics to the file 
@


1.66
log
@add posix_madvise, posix_memalign, strndup, and strnlen.  mostly from
brad and millert, with hints from guenther, jmc, and otto I think.
ok previous.
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.65 2010/01/25 20:14:11 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: January 25 2010 $
d226 3
a228 2
will dump statistics in a file called
.Pa malloc.out
@


1.65
log
@stucture -> structure;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.64 2010/01/13 12:40:11 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: January 13 2010 $
d423 2
a424 1
.Xr getpagesize 3
@


1.64
log
@New options 'S', as a shorthand for the options most suitable as an
extra safeguard (FGJ). Idea from deraadt@@; ok deraadt@@ dlg@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.63 2009/10/10 18:36:52 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: October 10 2009 $
d453 1
a453 1
A rewrite by Otto Moerbeek introducing a new central data stucture and more
@


1.63
log
@rewrite the history section, prompted by Paul Stoeber; ok deraadt@@ jmc@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.62 2009/02/13 23:36:17 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: February 13 2009 $
d275 2
@


1.62
log
@kill whitespace at eol;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.61 2009/02/13 18:49:14 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: Febuary 13 2009 $
d428 26
a453 23
The present implementation of
.Fn malloc
started out as a filesystem on a drum
attached to a 20-bit binary challenged computer built with discrete germanium
transistors, and it has since graduated to handle primary storage rather than
secondary.
.Pp
The main difference from other
.Fn malloc
implementations are believed to be that
the free pages are not accessed until allocated.
Most
.Fn malloc
implementations will store a data structure containing a,
possibly double-, linked list in the free chunks of memory, used to tie
all the free memory together.
That is a quite suboptimal thing to do.
Every time the free-list is traversed, all the otherwise unused, and very
likely paged out, pages get faulted into primary memory, just to see what
lies after them in the list.
.Pp
On systems which are paging, this can increase the page-faults
of a process by a factor of five.
@


1.61
log
@decribe 'F' better and mention flags are debugging aids; ok tedu@@ jmc@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.60 2008/12/30 07:44:51 djm Exp $
d35 1
a35 1
.Dd $Mdocdate: December 30 2008 $
d306 1
a306 1
If a program changes behavior if any of these options (except 
@


1.60
log
@Remove mprotecting of struct dir_info introduced in previous commit
(MALLOC_OPTIONS=L). It was too slow to turn on by default, and we
don't do optional security.

requested by deraadt@@ grumbling ok otto@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.59 2008/12/29 22:25:50 djm Exp $
d35 1
a35 1
.Dd $Mdocdate: December 29 2008 $
d236 4
d305 4
a308 6
The
.Cm J
and
.Cm Z
flags are mostly for testing and debugging.
If a program changes behavior if either of these options are used,
@


1.59
log
@extra paranoia for malloc(3):

Move all runtime options into a structure that is made read-only
(via mprotect) after initialisation to protect against attacks that
overwrite options to turn off malloc protections (e.g. use-after-free)

Allocate the main bookkeeping data (struct dir_info) using mmap(),
thereby giving it an unpredictable address. Place a PROT_NONE guard
page on either side to further frustrate attacks on it.

Add a new 'L' option that maps struct dir_info PROT_NONE except when
in the allocator code itself. Makes attacks on it basically impossible.

feedback tedu deraadt otto canacar
ok otto
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.58 2008/11/26 12:06:54 pedro Exp $
d35 1
a35 1
.Dd $Mdocdate: November 26 2008 $
a251 7
.It Cm L
.Dq Lock .
Lock critical data structures using
.Xr mprotect 2
to protect against modification except by
.Nm
and related routines.
@


1.58
log
@Fix typo, okay jmc@@.
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.57 2008/11/20 09:05:15 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: November 20 2008 $
d252 7
@


1.57
log
@move allocations between half a page and a page as close to the end of
the page as possible (i.e. make malloc option P a default).
ok art@@ millert@@ krw@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.56 2008/11/02 14:42:01 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: November 2 2008 $
d254 1
a254 1
Allocations larger than half a page but smaller that a page
@


1.56
log
@fix markup of example line and description of G flag; partly from and
ok jmc@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.55 2008/11/02 08:50:41 otto Exp $
d257 1
@


1.55
log
@remove distinction between warnings and errors, ok deraadt@@ djm@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.54 2008/08/07 18:41:47 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: August 7 2008 $
d238 1
a238 1
Enable guard pages and chunk randomization.
a240 1
Smaller than page size chunks are returned in a random order.
d297 2
a298 2
So to set a systemwide reduction of cache size and coredumps on problems:
.Li ln -s 'G<' /etc/malloc.conf
@


1.54
log
@small cleanup of error/warning strings
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.53 2008/07/28 19:53:03 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: July 28 2008 $
d218 5
a222 3
will coredump the process, rather than tolerate failure.
This is a very handy debugging aid, since the core file will represent the
time of failure, rather than when the null pointer was accessed.
a252 3
.It Cm N
Do not output warning messages when encountering possible corruption
or bad pointers.
d299 1
a299 1
.Li ln -s 'A<' /etc/malloc.conf
d351 1
a351 1
detect an error or warning condition,
d354 4
a357 7
Errors will always result in the process being
.Xr abort 3 'ed.
If the
.Cm A
option has been specified, warnings will also
.Xr abort 3
the process.
d363 1
a363 1
.Cm A
a373 8
.It any other error
.Fn malloc
detected an internal error;
consult sources and/or wizards.
.El
.Pp
Here is a brief description of the warning messages and what they mean:
.Bl -tag -width Ds
d409 4
@


1.53
log
@man page bits for new malloc; ok jmc@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.52 2008/05/20 11:25:26 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: May 20 2008 $
d394 1
a394 1
.It Dq modified (chunk-) pointer
@


1.52
log
@kill an Xr to a non-existent man page, ulimit(1);
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.51 2008/05/19 19:36:15 otto Exp $
d35 1
a35 1
.Dd $Mdocdate: May 19 2008 $
d247 1
a247 1
Currently junk is bytes of 0xd0; this is pronounced
d250 1
d255 4
a258 3
.Dq Pointer Protection .
Pointer sized allocations are aligned to the end of a page to catch
sizeof(ptr) errors where sizeof(*ptr) is meant.
d283 3
d310 1
a310 1
The default number of free pages cached is 16.
d365 1
a365 7
.It Dq (ES): mumble mumble mumble
.Fn malloc
has been compiled with
.Dv \&-DEXTRA_SANITY
and something looks fishy in there.
Consult sources and/or wizards.
.It Dq allocation failed
d375 1
a375 1
.It Dq mmap(2) failed, check limits.
d378 4
a381 3
.It Dq freelist is destroyed.
.Fn malloc Ns 's
internal freelist has been stomped on.
d386 7
a392 1
.It Dq chunk/page is already free.
d394 1
a394 18
.It Dq junk pointer, too high to make sense.
The pointer doesn't make sense.
It's above the area of memory that
.Fn malloc
knows something about.
This could be a pointer from some
.Xr mmap 2 'ed
memory.
.It Dq junk pointer, too low to make sense.
The pointer doesn't make sense.
It's below the area of memory that
.Fn malloc
knows something about.
This pointer probably came from your data or bss segments.
.It Dq malloc() has never been called.
Nothing has ever been allocated, yet something is being freed or
realloc'ed.
.It Dq modified (chunk-/page-) pointer.
d400 1
a400 6
.It Dq pointer to wrong page.
The pointer that
.Fn malloc
is trying to free is not pointing to
a sensible page.
.It Dq recursive call.
d415 6
@


1.51
log
@remove recalloc(3); it is buggy and impossible to repair without big
costs; ok jmc@@ for the man page bits; ok millert@@ deraadt@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.50 2007/09/05 06:03:08 deraadt Exp $
d35 1
a35 1
.Dd $Mdocdate: September 5 2007 $
d378 1
a378 3
seriously overloaded system or a
.Xr ulimit 1
restriction.
@


1.50
log
@no need to talk about bits; ok millert jmc
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.49 2007/09/03 21:38:34 millert Exp $
d35 1
a35 1
.Dd $Mdocdate: September 3 2007 $
a41 1
.Nm recalloc ,
a52 2
.Ft void *
.Fn recalloc "void *ptr" "size_t nmemb" "size_t size"
d206 1
a206 12
The
.Fn recalloc
function is similar to
.Fn realloc
except that it shares semantics with
.Fn calloc
rather than
.Fn malloc .
Newly allocated space is initialized to zero and the resulting size is
checked for integer overflow.
.Pp
These functions will first look for a symbolic link called
a260 2
or
.Fn recalloc
a444 6
.Pp
The
.Fn recalloc
function is an
.Ox
extension.
@


1.49
log
@Update free(3) section--we use mmap()/munmap(), not brk().
Based on a diff from Mike Belopuhov.  OK jmc@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.48 2007/09/03 14:37:02 millert Exp $
d118 1
a118 1
The space is initialized to all bits zero.
@


1.48
log
@add recaloc(3)
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.47 2007/08/08 21:24:29 millert Exp $
d35 1
a35 1
.Dd $Mdocdate: August 8 2007 $
d128 3
a130 3
to be deallocated, that is, at least made available for further allocation,
but if possible, it will be passed back to the kernel with
.Xr sbrk 2 .
d452 2
@


1.47
log
@Clarify the example about avoiding overflow.  OK ray@@ deraadt@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.46 2007/05/31 19:19:31 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate$
d42 1
d54 2
d209 12
a220 1
Malloc will first look for a symbolic link called
d275 2
d459 6
@


1.46
log
@convert to new .Dd format;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.45 2006/06/06 14:49:26 pedro Exp $
d103 1
a103 1
if (num && SIZE_MAX / num < size) {
@


1.45
log
@Fix 'double by a factor of two' and make cache options a bit more
descriptive while at it, input and okay jmc@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.44 2006/04/02 18:22:14 otto Exp $
d35 1
a35 1
.Dd August 27, 1996
@


1.44
log
@Use SIZE_MAX instead of SIZE_T_MAX, the latter is not POSIX and
remove redundant check on size. ok millert@@ deraadt@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.43 2006/03/26 19:56:08 ray Exp $
d288 1
a288 1
Reduce the size of the cache by a factor of two.
d291 1
a291 1
Double the size of the cache by a factor of two.
d305 1
a305 1
The default cache size is 16 pages.
@


1.43
log
@Add warning about malloc(num * size) and recommend calloc() instead,
or if malloc must be used suggest check.

Get rid of "one".

OK deraadt@@ and jmc@@, OK kjell@@ to earlier version with "one"s.
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.42 2006/01/18 06:36:05 jakemsr Exp $
d103 1
a103 1
if (num && size && SIZE_T_MAX / num < size) {
@


1.42
log
@missing auxillary verb

"yes, that is correct." jmc@@ (a while back)
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.41 2005/07/26 04:20:23 jaredy Exp $
d86 23
d116 4
d170 1
a170 1
one must be careful to avoid the following idiom:
d178 1
a178 1
until one knows the allocation has been successful.
d197 9
d294 1
a294 2
So to set a systemwide reduction of cache size and coredumps on problems
one would:
@


1.41
log
@- typos, punctuation, layout, macro tweaks
- break long lines

ok jmc
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.40 2005/06/07 09:04:42 jmc Exp $
d99 1
a99 1
but if possible, it will passed back to the kernel with
@


1.40
log
@no need to insert spacing between list members;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.39 2005/06/07 04:42:42 tedu Exp $
d296 2
d299 1
d324 1
a324 1
.Bl -tag -width Fl
d352 1
a352 1
.Bl -tag -width Fl
d373 5
a377 1
The pointer passed to free or realloc has been modified.
@


1.39
log
@adding pointer protection to 'G' was too heavyweight.  Since malloc guard
should be generally usable, split this out into option 'P'. ok deraadt
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.38 2005/05/24 16:48:35 tedu Exp $
a184 1
.Pp
a192 1
.Pp
a197 1
.Pp
a203 1
.Pp
a207 1
.Pp
a213 1
.Pp
a216 1
.Pp
a220 1
.Pp
a233 1
.Pp
a244 1
.Pp
a249 1
.Pp
a252 1
.Pp
@


1.38
log
@add a note describing latest guard feature
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.37 2004/07/02 10:42:55 jmc Exp $
a206 2
Pointer sized allocations are aligned to the end of a page to catch
sizeof(ptr) errors where sizeof(*ptr) is meant.
d223 5
@


1.37
log
@kill dead .Xr to memory(3);
from kjell@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.36 2004/02/09 13:07:42 espie Exp $
d207 2
@


1.36
log
@punctuate variable; okay jmc@@.
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.35 2004/02/04 08:59:00 jmc Exp $
d402 1
a402 2
.Xr getpagesize 3 ,
.Xr memory 3
@


1.35
log
@H comes before J;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.34 2004/02/02 18:15:52 tedu Exp $
d58 1
a58 1
.Va malloc_options
@


1.34
log
@'F'reeguard doc, as reported missing by brad.  nit free thanks to jmc
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.33 2003/11/25 12:32:54 jmc Exp $
d208 5
a218 5
.Pp
.It Cm H
.Dq Hint .
Pass a hint to the kernel about pages we don't use.
If the machine is paging a lot this may help a bit.
@


1.33
log
@wording improvements from Brian Poole;
kill a .Pp before a display;
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.32 2003/10/16 17:05:04 tedu Exp $
d195 6
d202 1
@


1.32
log
@by popular demand, malloc guard pages.  insert an unreadable/unwriteable
page after each page size allocation to detect overrun.  this is
somewhat electric fence like, while attempting to be mostly usable in
production.  also, use tdeval's chunk randomization code.
enabled with the G option.
ok deraadt and co.
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.31 2003/09/26 05:57:02 millert Exp $
a143 1
.Pp
d351 1
a351 1
A pointer to a free chunk is attempted freed again.
d424 2
a425 2
On systems which are paging, this can make a factor five in difference on the
page-faults of a process.
@


1.31
log
@It is safe to pass free() a NULL pointer since C89; update example to
this effect.  OK deraadt@@ pvalchev@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.30 2003/09/25 11:10:56 deraadt Exp $
d195 6
@


1.30
log
@improve example even more
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.29 2003/09/18 22:49:13 tedu Exp $
d162 1
a162 2
	if (p)
		free(p);
@


1.29
log
@expand on the realloc no-no section to include adjusting a length before
the allocation.  ok deraadt@@ markus@@
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.28 2003/06/02 20:18:37 millert Exp $
d161 1
a161 1
if ((p2 = realloc(p, newsize)) == NULL) {
d165 1
d168 1
a168 1
p = p2;
@


1.28
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.27 2003/06/01 19:27:27 jmc Exp $
d146 3
a148 2
if ((p = realloc(p, nsize)) == NULL)
	return NULL;
d151 4
a154 1
In most cases, this will result in a leak of memory.
d160 2
a161 1
if ((p2 = realloc(p, nsize)) == NULL) {
d165 1
a165 1
	return NULL;
d168 1
@


1.27
log
@- section reorder
- merge COMPATIBILITY
- kill whitespace at EOL
@
text
@d17 1
a17 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
d33 1
a33 1
.\"	$OpenBSD: malloc.3,v 1.26 2003/05/14 04:48:06 krw Exp $
@


1.26
log
@Delete reference to /usr/share/doc/papers/malloc.ascii.gz as we do not
have it. We don't even have the directory /usr/share/doc/papers.

ok millert@@.
@
text
@d37 1
a37 1
.\"	$OpenBSD: malloc.3,v 1.25 2003/01/21 19:59:09 jmc Exp $
a263 2
.Sh ENVIRONMENT
See above.
d288 7
a383 5
.El
.Sh FILES
.Bl -tag -width "/etc/malloc.conf"
.It Pa /etc/malloc.conf
symbolic link to filename containing option flags
@


1.25
log
@typos;
ok deraadt@@
@
text
@d37 1
a37 1
.\"	$OpenBSD: malloc.3,v 1.24 2001/12/05 09:49:39 deraadt Exp $
a389 1
.Pa /usr/share/doc/papers/malloc.ascii.gz
@


1.24
log
@document how malloc(0) blobbies are stored, and their character
@
text
@d37 1
a37 1
.\"	$OpenBSD: malloc.3,v 1.23 2001/11/05 21:31:21 millert Exp $
d226 1
a226 1
rather than return failure,
d259 1
a259 1
is mostly for testing and debugging.
@


1.23
log
@Comment out info on U (utrace) malloc option since we don't support it
on OpenBSD.
@
text
@d37 1
a37 1
.\"	$OpenBSD: malloc.3,v 1.22 2001/10/30 21:17:44 tdeval Exp $
d84 5
@


1.22
log
@
Grammar. Thanks markus@@
@
text
@d37 1
a37 1
.\"	$OpenBSD: malloc.3,v 1.21 2001/10/30 17:01:07 tdeval Exp $
d211 7
a217 7
.Pp
.It Cm U
.Dq utrace .
Generate entries for
.Xr ktrace 1
for all operations.
Consult the source for this one.
@


1.21
log
@mprotect allocations sized at 0 bytes.  This will cause a fault for access
to such, permitting them to be discovered, instead of exploited as the ssh
crc insertion detector was.  Idea by theo, written by tdeval.
@
text
@d37 1
a37 1
.\"	$OpenBSD: malloc.3,v 1.20 2000/10/25 15:23:15 aaron Exp $
d83 1
a83 1
generate an exception (SIGSEGV)
@


1.20
log
@Clarify; gluk@@ptci.ru
@
text
@d37 1
a37 1
.\"	$OpenBSD: malloc.3,v 1.19 2000/04/20 02:14:26 aaron Exp $
d82 2
@


1.19
log
@- Formatting repairs and standardizations.
- s/MESSAGES/DIAGNOSTICS/, and put message descriptions in a nice list.
- Talk more about how using malloc() in signal handlers is bad.
@
text
@d37 1
a37 1
.\"	$OpenBSD: malloc.3,v 1.18 2000/01/19 05:36:38 pjanzen Exp $
d376 1
a376 1
symbolic link to file containing option flags
@


1.18
log
@Clarify and mention that errno is set to ENOMEM on failure of malloc(),
calloc(), and realloc().  Idea from NetBSD.
@
text
@d1 1
d37 1
a37 1
.\"	$OpenBSD: malloc.3,v 1.17 1999/11/10 22:19:22 aaron Exp $
d76 2
a77 1
coercion) for storage of any type of object. If the space is of
d171 4
a174 2
.It A
``abort'' malloc will coredump the process, rather than tolerate failure.
d176 1
a176 2
time of failure,
rather than when the null pointer was accessed.
d178 6
a183 2
.It D
``dump'' malloc will dump statistics in a file called ``malloc.out'' at exit.
d187 11
a197 7
.It J
``junk'' fill some junk into the area allocated.
Currently junk is bytes of 0xd0, this is pronounced ``Duh'' :-)
.Pp
.It H
``hint'' pass a hint to the kernel about pages we don't use.  If the
machine is paging a lot this may help a bit.
d199 1
a199 1
.It N
d203 3
a205 2
.It R
``realloc'' always reallocate when
d210 3
a212 2
.It U
``utrace'' generate entries for
d217 2
a218 2
.It X
``xmalloc''
d229 4
a232 2
.It Z
``zero'' fill some junk into the area allocated (see ``J''),
d235 7
a241 5
.It <
``Half the cache size'' Reduce the size of the cache by a factor of two.
.Pp
.It >
``Double the cache size'' Double the size of the cache by a factor of two.
d248 6
a253 2
The ``J'' and ``Z'' is mostly for testing and debugging,
if a program changes behavior if either of these options are used,
d264 1
a264 2
functions return
a pointer to the allocated space if successful; otherwise,
d283 1
a283 1
.Sh MESSAGES
d287 1
a287 1
.Fn realloc
d295 3
a297 1
If the ``A'' option has been specified, warnings will also
d302 11
a312 7
.Pp
``(ES): mumble mumble mumble'':
malloc have been compiled with -DEXTRA_SANITY and something looks
fishy in there.  Consult sources and or wizards.
.Pp
``allocation failed''
if the ``A'' option is specified it is an error for
d314 1
a314 1
.Fn calloc
d319 9
a327 7
.Pp
``mmap(2) failed, check limits.''
This is a rather weird condition that is most likely to mean that
the system is seriously overloaded or that your ulimits are sick.
.Pp
``freelist is destroyed.''
mallocs internal freelist has been stomped on.
d330 2
a331 2
.Pp
``chunk/page is already free.''
d333 3
a335 3
.Pp
``junk pointer, too high to make sense.''
The pointer doesn't make sense.  It's above the area of memory that
d341 3
a343 3
.Pp
``junk pointer, too low to make sense.''
The pointer doesn't make sense.  It's below the area of memory that
d347 1
a347 2
.Pp
``malloc() has never been called.''
d350 1
a350 2
.Pp
``modified (chunk-/page-) pointer.''
d352 1
a352 2
.Pp
``pointer to wrong page.''
d357 16
a372 14
.Pp
``recursive call.''
You have tried to call recursively into these functions.
I can only imagine this as happening if you call one of these
functions from a signal handler, which happens to be called
while you're already in here.
Well, sorry to say: that's not supported.
If this is a problem for you I'd like to hear about it.  It
would be possible to add a sigblock() around this package,
but it would have a performance penalty that is not acceptable
as the default.
.Pp
``unknown char in MALLOC_OPTIONS''
we found something we didn't understand.
@


1.17
log
@Tweaks; millert@@
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.16 1999/11/09 22:12:36 aaron Exp $
d244 5
a248 2
a pointer to the allocated space if successful; otherwise
a null pointer is returned.
d258 5
a262 2
function a pointer to the possibly moved allocated space;
otherwise a null pointer is returned.
@


1.16
log
@Merge calloc(3) man page into malloc.3; as suggested by millert@@
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.15 1999/06/29 18:36:21 aaron Exp $
d260 3
d264 2
a265 4
or
.Fn realloc
detects an error or warning condition,
a message will be printed to filedescriptor
d281 2
a282 1
.Fn malloc
d330 1
a330 1
functions from a signal function, which happens to be called
a347 1
.Xr calloc 3 ,
@


1.15
log
@first round of repairs on stdlib
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.14 1999/05/27 20:49:35 aaron Exp $
d43 2
a44 2
.Nd general memory allocation function
.Pp
d47 1
a47 4
.Nd free up memory allocated with malloc, calloc or realloc
.Pp
.Nm realloc
.Nd reallocation of memory function
d52 4
a59 2
.Ft void *
.Fn realloc "void *ptr" "size_t size"
d82 8
d241 3
a243 1
function returns
d249 3
a251 1
function returns no value.
d300 2
a301 1
malloc knows something about.
d308 2
a309 1
malloc knows something about.
d320 3
a322 1
The pointer that malloc is trying to free is not pointing to
d356 4
a359 2
The present implementation of malloc started out as a filesystem on a drum
attached to a 20bit binary challenged computer built with discrete germanium
d363 3
a365 1
The main difference from other malloc implementations are believed to be that
d367 3
a369 1
Most malloc implementations will store a data structure containing a,
@


1.14
log
@more missing .El macros filled in
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.13 1999/05/23 14:11:03 aaron Exp $
d116 1
a116 1
.Fn malloc 
d118 1
a118 1
If the space cannot be allocated, the object 
d140 1
a140 1
.Fa NULL
d166 1
a166 1
rather than when the NULL pointer was accessed.
d198 1
a198 1
``xmalloc'' 
d247 1
a247 1
If 
d250 1
a250 1
or 
d255 1
a255 1
Errors will always result in the process being 
d270 1
a270 1
or 
d272 2
a273 1
to return NULL.
d291 1
a291 1
.Xr mmap 2 'ed 
d348 1
a348 1
Most malloc implementations will store a data structure containing a, 
@


1.13
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.12 1999/05/10 17:56:28 aaron Exp $
d167 1
a167 1

d172 1
a172 1

d176 1
a176 1

d180 1
a180 1

d184 1
a184 1

d190 1
a190 1

d196 1
a196 1

d208 1
a208 1

d212 1
a212 1

d215 1
a215 1

d326 1
@


1.12
log
@correct some Xr's which referred to the wrong man page sections
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.11 1999/03/23 21:07:57 millert Exp $
d40 1
a40 1
.Os OpenBSD
@


1.11
log
@Clarify realloc return value
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.10 1998/11/17 23:41:43 aaron Exp $
d256 3
a258 3
.Xr abort 2 'ed,
If the ``A'' option has been specified, also warnings will
.Xr abort 2 
@


1.10
log
@add MLINK for malloc.conf.5 man page, also add FILES section to malloc.3; fries@@
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.9 1998/08/15 20:32:02 deraadt Exp $
d104 3
a106 2
to the size specified by
.Fa size .
@


1.9
log
@document the common misuse of realloc
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.8 1998/04/28 07:36:47 deraadt Exp $
d321 4
@


1.8
log
@use Xr more often
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.7 1997/08/23 10:43:24 pefo Exp $
d109 1
a109 1
of the object is indeterminate.
d127 24
@


1.7
log
@Change realloc(foo,0) to behave like malloc(0). Both now return a pointer
to an object of size zero. This will allow testing on reallocs return value
to determine if the operation was successful or not.
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.6 1997/05/31 08:55:05 tholo Exp $
d167 3
a169 1
``utrace'' generate entries for ktrace(1) for all operations.
@


1.6
log
@Make it possible to not output warnings (errors causing aborts are always
output).
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.5 1997/05/31 08:47:55 tholo Exp $
d80 2
d125 2
a126 1
is not a null pointer, the object it points to is freed.
d217 2
a218 2
function returns either a null pointer or a pointer
to the possibly moved allocated space.
@


1.5
log
@Add x/X option to behave like X11 xmalloc; from FreeBSD
Reduce diffs wrt. FreeBSD some
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.4 1996/09/26 04:19:41 tholo Exp $
d152 4
@


1.4
log
@Latest changes from FreeBSD
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.3 1996/08/21 03:12:18 downsj Exp $
d162 12
@


1.3
log
@Document it.
@
text
@d36 1
a36 1
.\"	$OpenBSD: malloc.3,v 1.2 1996/08/10 04:18:49 tholo Exp $
d38 1
a38 1
.Dd June 4, 1993
d40 1
a40 1
.Os BSD 4
d61 2
d125 7
a131 5

.Sh ENVIRONMENT
This malloc will check the environment for a variable called
.Em MALLOC_OPTIONS
and scan it for flags.
d149 4
d159 4
d167 5
d174 4
d181 4
d200 76
d282 1
@


1.2
log
@Import malloc(3) manual page from FreeBSD
@
text
@d36 1
a36 1
.\"	$OpenBSD$
d45 2
a46 1
.Nm free
d57 2
d88 7
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
d36 1
a36 2
.\"     from: @@(#)malloc.3	6.7 (Berkeley) 6/29/91
.\"	$Id: malloc.3,v 1.4 1995/08/17 23:30:42 jtc Exp $
d38 1
a38 1
.Dd June 29, 1991
d42 1
a42 1
.Nm malloc
d44 6
d54 4
d74 76
d156 9
d167 1
a167 2
.Xr getpagesize 2 ,
.Xr free 3 ,
d169 1
a169 2
.Xr alloca 3 ,
.Xr realloc 3 ,
d176 18
a193 8
.Sh BUGS
The current implementation of
.Xr malloc
does not always fail gracefully when system
memory limits are approached.
It may fail to allocate memory when larger free blocks could be broken
up, or when limits are exceeded because the size is rounded up.
It is optimized for sizes that are powers of two.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
