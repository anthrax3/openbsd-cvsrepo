head	1.27;
access;
symbols
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.6
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.4
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.22.0.6
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.4
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.2
	OPENBSD_5_0:1.19.0.16
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.14
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.12
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.8
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.10
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.6
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.4
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.2
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.18.0.2
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.8
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.6
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.27
date	2015.04.14.22.16.03;	author nicm;	state Exp;
branches;
next	1.26;
commitid	S5epGQ6j3xpRgW4I;

1.26
date	2014.11.30.21.21.59;	author schwarze;	state Exp;
branches;
next	1.25;
commitid	LCBTyemv87X040O7;

1.25
date	2014.09.14.14.32.44;	author schwarze;	state Exp;
branches;
next	1.24;
commitid	KgpwdMReDHGsnjNo;

1.24
date	2013.08.14.06.32.28;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.22;

1.22
date	2011.09.03.23.24.51;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2011.09.03.22.59.07;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2011.08.30.12.25.09;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2007.11.13.18.30.04;	author tobias;	state Exp;
branches;
next	1.18;

1.18
date	2007.06.29.18.54.37;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.31.19.19.31;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2006.11.02.18.19.59;	author grunk;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.29.20.10.52;	author grunk;	state Exp;
branches;
next	1.14;

1.14
date	2006.01.13.17.58.09;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.20.18.38;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.10.06.48.30;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.21.20.54.09;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.29.00.20.11;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.09.15.51.21;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.20.13.50.03;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.04.22.19.31;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.09.14.03.59.55;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	99.07.20.10.18.22;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.06.29.18.36.23;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.33.51;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.02.16.48;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Another couple of commas in the wrong place, ok jmc
@
text
@.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: strtol.3,v 1.26 2014/11/30 21:21:59 schwarze Exp $
.\"
.Dd $Mdocdate: November 30 2014 $
.Dt STRTOL 3
.Os
.Sh NAME
.Nm strtol ,
.Nm strtoll ,
.Nm strtoimax ,
.Nm strtoq
.Nd convert string value to a long, long long or intmax_t integer
.Sh SYNOPSIS
.In limits.h
.In stdlib.h
.Ft long
.Fn strtol "const char *nptr" "char **endptr" "int base"
.Ft long long
.Fn strtoll "const char *nptr" "char **endptr" "int base"
.In inttypes.h
.Ft intmax_t
.Fn strtoimax "const char *nptr" "char **endptr" "int base"
.In sys/types.h
.In limits.h
.In stdlib.h
.Ft quad_t
.Fn strtoq "const char *nptr" "char **endptr" "int base"
.Sh DESCRIPTION
The
.Fn strtol
function converts the string in
.Fa nptr
to a
.Vt long
value.
The
.Fn strtoll
function converts the string in
.Fa nptr
to a
.Vt long long
value.
The
.Fn strtoimax
function converts the string in
.Fa nptr
to an
.Vt intmax_t
value.
The
.Fn strtoq
function is a deprecated equivalent of
.Fn strtoll
and is provided for backwards compatibility with legacy programs.
The conversion is done according to the given
.Fa base ,
which must be a number between 2 and 36 inclusive or the special value 0.
.Pp
The string may begin with an arbitrary amount of whitespace
(as determined by
.Xr isspace 3 )
followed by a single optional
.Ql +
or
.Ql -
sign.
If
.Fa base
is zero or 16, the string may then include a
.Ql 0x
prefix, and the number will be read in base 16; otherwise, a zero
.Fa base
is taken as 10 (decimal) unless the next character is
.Ql 0 ,
in which case it is taken as 8 (octal).
.Pp
The remainder of the string is converted to a
.Vt long ,
.Vt long long ,
or
.Vt intmax_t
value in the obvious manner,
stopping at the first character which is not a valid digit
in the given base.
(In bases above 10, the letter
.Ql A
in either upper or lower case represents 10,
.Ql B
represents 11, and so forth, with
.Ql Z
representing 35.)
.Pp
If
.Fa endptr
is non-null,
.Fn strtol
stores the address of the first invalid character in
.Fa *endptr .
If there were no digits at all, however,
.Fn strtol
stores the original value of
.Fa nptr
in
.Fa *endptr .
(Thus, if
.Fa *nptr
is not
.Ql \e0
but
.Fa **endptr
is
.Ql \e0
on return, the entire string was valid.)
.Sh RETURN VALUES
The
.Fn strtol ,
.Fn strtoll ,
.Fn strtoimax ,
and
.Fn strtoq
functions return the result of the conversion.
If overflow or underflow occurs,
.Va errno
is set to
.Er ERANGE
and the function return value is as follows:
.Bl -column "strtoimaxXX" "INTMAX_MIN" "INTMAX_MAX" -offset indent
.It Sy Function Ta Sy underflow Ta Sy overflow
.It Fn strtol Ta Dv LONG_MIN Ta Dv LONG_MAX
.It Fn strtoll Ta Dv LLONG_MIN Ta Dv LLONG_MAX
.It Fn strtoimax Ta Dv INTMAX_MIN Ta Dv INTMAX_MAX
.It Fn strtoq Ta Dv LLONG_MIN Ta Dv LLONG_MAX
.El
.Pp
If there is no valid digit, 0 is returned.
If
.Ar base
is invalid, 0 is returned and the global variable
.Va errno
is set to
.Er EINVAL .
.Sh EXAMPLES
Ensuring that a string is a valid number (i.e., in range and containing no
trailing characters) requires clearing
.Va errno
beforehand explicitly since
.Va errno
is not changed on a successful call to
.Fn strtol ,
and the return value of
.Fn strtol
cannot be used unambiguously to signal an error:
.Bd -literal -offset indent
char *ep;
long lval;

\&...

errno = 0;
lval = strtol(buf, &ep, 10);
if (buf[0] == '\e0' || *ep != '\e0')
	goto not_a_number;
if (errno == ERANGE && (lval == LONG_MAX || lval == LONG_MIN))
	goto out_of_range;
.Ed
.Pp
This example will accept
.Dq 12
but not
.Dq 12foo
or
.Dq 12\en .
If trailing whitespace is acceptable, further checks must be done on
.Va *ep ;
alternately, use
.Xr sscanf 3 .
.Pp
If
.Fn strtol
is being used instead of
.Xr atoi 3 ,
error checking is further complicated because the desired return value is an
.Vt int
rather than a
.Vt long ;
however, on some architectures integers and long integers are the same size.
Thus the following is necessary:
.Bd -literal -offset indent
char *ep;
int ival;
long lval;

\&...

errno = 0;
lval = strtol(buf, &ep, 10);
if (buf[0] == '\e0' || *ep != '\e0')
     goto not_a_number;
if ((errno == ERANGE && (lval == LONG_MAX || lval == LONG_MIN)) ||
    (lval > INT_MAX || lval < INT_MIN))
     goto out_of_range;
ival = lval;
.Ed
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er EINVAL
The value of
.Ar base
was neither between 2 and 36 inclusive nor the special value 0.
.It Bq Er ERANGE
The given string was out of range; the value converted has been clamped.
.El
.Sh SEE ALSO
.Xr atof 3 ,
.Xr atoi 3 ,
.Xr atol 3 ,
.Xr atoll 3 ,
.Xr sscanf 3 ,
.Xr strtod 3 ,
.Xr strtonum 3 ,
.Xr strtoul 3
.Sh STANDARDS
The
.Fn strtol ,
.Fn strtoll ,
and
.Fn strtoimax
functions conform to
.St -isoC-99 .
Setting
.Va errno
to
.Dv EINVAL
is an extension to that standard required by
.St -p1003.1-2008 .
.Pp
The
.Fn strtoq
function is a
.Bx
extension and is provided for backwards compatibility with legacy programs.
.Sh BUGS
Ignores the current locale.
@


1.26
log
@Replace all 14 instances of .St -ansiC-99 in our tree with .St -isoC-99.
The former is not used anywhere in NetBSD, FreeBSD, or DragonFly
and not supported by groff, so i'm going to delete it from mandoc(1).
We don't need two macros for the same thing.
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.25 2014/09/14 14:32:44 schwarze Exp $
d34 1
a34 1
.Dd $Mdocdate: September 14 2014 $
d41 1
a41 1
.Nm strtoq ,
@


1.25
log
@Do not claim that empty numbers set EINVAL, our implementation doesn't.
Mention that invalid bases do set EINVAL (as required by POSIX);
this part of the change uses part of an earlier patch by millert@@.
Minor mdoc(7) cleanup and sync between the two pages while here.
Feedback and ok jmc@@ and millert@@.
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.24 2013/08/14 06:32:28 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: August 14 2013 $
d259 1
a259 1
.St -ansiC-99 .
@


1.24
log
@no longer any need to quote macro lines with >9 args;
From: Jan Stary
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.23 2013/06/05 03:39:23 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: June 5 2013 $
a47 1
.Pp
a49 1
.Pp
a52 1
.Pp
d64 1
a64 1
.Li long
d71 1
a71 1
.Li long long
d78 1
a78 1
.Li intmax_t
d108 2
a109 2
.Li long ,
.Li long long ,
d111 1
a111 1
.Li intmax_t ,
d151 1
a151 8
functions return the result of the conversion,
unless the value would underflow or overflow.
If no conversion could be performed, 0 is returned;
the global variable
.Va errno
is also set to
.Er EINVAL ,
though this is not portable across all platforms.
d164 8
d213 1
a213 1
.Li int
d215 1
a215 1
.Li long ;
d236 4
d260 7
@


1.23
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.22 2011/09/03 23:24:51 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: September 3 2011 $
d42 1
a42 1
.Nd "convert string value to a long, long long or intmax_t integer"
@


1.22
log
@some minor tweaks;
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.21 2011/09/03 22:59:07 jmc Exp $
d44 2
a45 2
.Fd #include <limits.h>
.Fd #include <stdlib.h>
d52 1
a52 1
.Fd #include <inttypes.h>
d56 3
a58 3
.Fd #include <sys/types.h>
.Fd #include <limits.h>
.Fd #include <stdlib.h>
@


1.21
log
@make -column lists pretty again;

specifically, rewrite them to permit some markup in the column headers,
and use "Ta" instead of literal tabs; mandoc does not currently match groff
100%, but a mandoc fix may be some time off, and we've gone enough releases
with poorly formatting column lists.

in some cases i have rewritten the lists as -tag, where -column made
little sense.
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.20 2011/08/30 12:25:09 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: August 30 2011 $
d160 1
a160 1
.Er EINVAL,
@


1.20
log
@in column lists, enforce the following ordering:

	.Bl -column header1 header2 ... <Bl flags>

mixing things up confuses mandoc, and adding flags in can screw up the list.
this hopefully just makes things a bit safer (and more consistent).

(one more bit of work left and all column lists should format how we want)
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.19 2007/11/13 18:30:04 tobias Exp $
d34 1
a34 1
.Dd $Mdocdate: November 13 2007 $
d167 1
a167 1
.Bl -column "strtoimax" "overflow" "underflow" -offset indent
@


1.19
log
@Put limits.h in front of stdlib.h as style(9) recommends.

OK millert@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.18 2007/06/29 18:54:37 millert Exp $
d34 1
a34 1
.Dd $Mdocdate: June 29 2007 $
d167 1
a167 1
.Bl -column -offset indent "strtoimax" "overflow" "underflow"
@


1.18
log
@Document behavior when no conversion could be performed.  Adapted
from FreeBSD.  With help from jmc@@.
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.17 2007/05/31 19:19:31 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate$
d44 1
a45 1
.Fd #include <limits.h>
d57 1
a58 1
.Fd #include <limits.h>
@


1.17
log
@convert to new .Dd format;
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.16 2006/11/02 18:19:59 grunk Exp $
d154 1
a154 1
functions returns the result of the conversion,
d156 6
@


1.16
log
@columns for underflow and overflow were swapped, noticed by Mathieu Olivier
<molivier at users dot sourceforge dot net>

ok jmc@@ mickey@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.15 2006/03/29 20:10:52 grunk Exp $
d34 1
a34 1
.Dd January 3, 2006
@


1.15
log
@Xr to strtonum(3), because vice versa is already the case

ok jmc@@ otto@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.14 2006/01/13 17:58:09 millert Exp $
d162 1
a162 1
.It Sy Function Ta Sy overflow Ta Sy underflow
@


1.14
log
@Add lldiv(), imaxabs(), imaxdiv(), strtoimax() and strtoumax()
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.13 2003/06/02 20:18:38 millert Exp $
d242 1
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.12 2003/05/10 06:48:30 jmc Exp $
d34 1
a34 1
.Dd June 25, 1992
d40 3
a42 2
.Nm strtoq
.Nd "convert string value to a long or long long integer"
a48 2
.Fd #include <stdlib.h>
.Fd #include <limits.h>
d52 4
d77 7
d111 4
a114 1
.Li long
d149 6
a154 2
.Fn strtol
function returns the result of the conversion,
d156 1
a156 9
If an underflow occurs,
.Fn strtol
returns
.Dv LONG_MIN .
If an overflow occurs,
.Fn strtol
returns
.Dv LONG_MAX .
In both cases,
d159 9
a167 9
.Er ERANGE .
.Pp
The
.Fn strtoll
function has identical return values except that
.Dv LLONG_MIN
and
.Dv LLONG_MAX
are used to indicate underflow and overflow respectively.
d245 2
a246 1
.Fn strtol
d248 1
a248 1
.Fn strtoll
@


1.12
log
@typos;
@
text
@d16 1
a16 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
d32 1
a32 1
.\"	$OpenBSD: strtol.3,v 1.11 2002/11/21 20:54:09 millert Exp $
@


1.11
log
@.Xr atoll(3) and add missing .Xr of atol(3) in atoll(3) man page.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtol.3,v 1.10 2002/06/29 00:20:11 millert Exp $
d45 1
a45 1
.Nd convert string value to a long or long long integer
@


1.10
log
@Replace strtou?q() with the more standard strtou?ll(), using weak
aliases to fake up strtou?q().  espie@@ OK.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtol.3,v 1.9 2000/08/09 15:51:21 aaron Exp $
d234 1
d241 9
a249 2
function conforms to
.St -ansiC .
@


1.9
log
@For man pages that describe multiple functions, split the .Nm arguments
onto separate lines in the NAME section.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtol.3,v 1.8 2000/04/20 13:50:03 aaron Exp $
d43 1
d45 1
a45 1
.Nd convert string value to a long or quad_t integer
d52 5
d71 1
a71 1
.Fn strtoq
d75 1
a75 1
.Li quad_t
d77 5
d155 8
@


1.8
log
@Flesh out stdlib function man pages.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtol.3,v 1.7 2000/03/04 22:19:31 aaron Exp $
d42 2
a43 1
.Nm strtol, strtoq
@


1.7
log
@In Unix land we prefer "whitespace" to "white space" or "white-space". At
least, this is the impression I get from looking at a lot of Perl docs.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtol.3,v 1.6 1999/09/14 03:59:55 pjanzen Exp $
d49 1
a49 1

d58 1
a58 2
function
converts the string in
d65 1
a65 2
function
converts the string in
d72 1
a72 2
which must be a number between 2 and 36 inclusive
or the special value 0.
d84 1
a84 2
is zero or 16,
the string may then include a
d86 1
a86 2
prefix,
and the number will be read in base 16; otherwise, a zero
d99 1
a99 2
in either upper or lower case
represents 10,
d107 1
a107 1
is non nil,
d129 1
a129 2
function
returns the result of the conversion,
d187 2
a188 2
however, on some architectures integers and long integers are the same
size.  Thus the following is necessary:
d220 1
a220 2
function
conforms to
@


1.6
log
@Supply examples and discuss limitations.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtol.3,v 1.5 1999/07/20 10:18:22 aaron Exp $
d77 1
a77 1
The string may begin with an arbitrary amount of white space
@


1.5
log
@better english; deraadt@@/millert@@
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtol.3,v 1.4 1999/06/29 18:36:23 aaron Exp $
d150 62
d221 1
@


1.4
log
@first round of repairs on stdlib
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtol.3,v 1.3 1996/08/19 08:33:51 tholo Exp $
d74 2
a75 2
which must be between 2 and 36 inclusive,
or be the special value 0.
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtol.3,v 1.2 1995/12/14 02:16:48 deraadt Exp $
d62 1
a62 1
.Em long
d70 1
a70 1
.Em quad_t
d98 1
a98 1
.Em long
@


1.2
log
@make first arg of strtod/strtoq const
@
text
@d36 1
a36 2
.\"     from: @@(#)strtol.3	5.4 (Berkeley) 6/25/92
.\"	$Id: strtol.3,v 1.5 1995/10/12 15:40:27 jtc Exp $
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
.\"	$Id: strtol.3,v 1.4 1994/01/03 22:58:37 jtc Exp $
d49 1
a49 1
.Fn strtol "char *nptr" "char **endptr" "int base"
d55 1
a55 1
.Fn strtoq "char *nptr" "char **endptr" "int base"
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
