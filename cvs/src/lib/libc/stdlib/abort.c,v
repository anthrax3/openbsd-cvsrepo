head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.4
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.20.0.8
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.17.0.8
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.8
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.4
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.15.0.20
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.18
	OPENBSD_5_0:1.15.0.16
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.14
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.12
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.8
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.10
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.6
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.4
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.14.0.10
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.8
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.6
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.4
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2017.08.12.22.59.52;	author guenther;	state Exp;
branches;
next	1.20;
commitid	GWJutHC4vEmXRxDN;

1.20
date	2015.10.25.04.13.59;	author guenther;	state Exp;
branches;
next	1.19;
commitid	1HvmET9ZYKaNy8hJ;

1.19
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.18;
commitid	OrVNAJkzchWBNbO0;

1.18
date	2015.09.13.08.31.47;	author guenther;	state Exp;
branches;
next	1.17;
commitid	QZ177IcjQzeRxHAC;

1.17
date	2014.05.14.21.54.20;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2012.11.10.03.46.11;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.03.14.40.16;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.08.08.05.36;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.20.19.35.17;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.20.18.37;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.05.22.19.55;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.03.23.58.39;	author marc;	state Exp;
branches;
next	1.9;

1.9
date	2002.11.03.20.36.43;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.14.22.03.14;	author dhartmei;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.12.12.03.01;	author heko;	state Exp;
branches;
next	1.6;

1.6
date	98.11.20.11.18.49;	author d;	state Exp;
branches;
next	1.5;

1.5
date	97.06.22.20.21.25;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.10.25.07.06.37;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.10.25.03.09.15;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.33.20;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Minimize #includes, particularly to avoid thread_private.h

ok tedu@@
@
text
@/*	$OpenBSD: abort.c,v 1.20 2015/10/25 04:13:59 guenther Exp $ */
/*
 * Copyright (c) 1985 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>


void
abort(void)
{
	sigset_t mask;
	struct sigaction sa;

	sigfillset(&mask);
	/*
	 * don't block SIGABRT to give any handler a chance; we ignore
	 * any errors -- X311J doesn't allow abort to return anyway.
	 */
	sigdelset(&mask, SIGABRT);
	(void)sigprocmask(SIG_SETMASK, &mask, NULL);

	(void)raise(SIGABRT);

	/*
	 * if SIGABRT ignored, or caught and the handler returns, do
	 * it again, only harder.
	 */
	memset(&sa, 0, sizeof(sa));
	sa.sa_handler = SIG_DFL;
	(void)sigaction(SIGABRT, &sa, NULL);
	(void)sigprocmask(SIG_SETMASK, &mask, NULL);
	(void)raise(SIGABRT);
	_exit(1);
}
DEF_STRONG(abort);
@


1.20
log
@Use sigaction() instead of signal() to avoid pulling in unnecessary
wrappers.  To keep uses from crawling back in, mark signal() as
deprecated inside libc.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: abort.c,v 1.19 2015/10/23 04:39:24 guenther Exp $ */
d33 1
a34 2
#include "thread_private.h"
#include "atexit.h"
@


1.19
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: abort.c,v 1.18 2015/09/13 08:31:47 guenther Exp $ */
d42 1
a42 1

d58 3
a60 1
	(void)signal(SIGABRT, SIG_DFL);
@


1.18
log
@Wrap <stdlib.h> so that calls go direct and the symbols not in the
C standard are all weak.
Apply __{BEGIN,END}_HIDDEN_DECLS to gdtoa{,imp}.h, hiding the
arch-specific __strtorx, __ULtox_D2A, __strtorQ, __ULtoQ_D2A symbols.
@
text
@d1 1
a1 1
/*	$OpenBSD: abort.c,v 1.17 2014/05/14 21:54:20 tedu Exp $ */
a36 1
int	_thread_sys_sigprocmask(int, const sigset_t *, sigset_t *);
d50 1
a50 1
	(void)_thread_sys_sigprocmask(SIG_SETMASK, &mask, (sigset_t *)NULL);
d59 1
a59 1
	(void)_thread_sys_sigprocmask(SIG_SETMASK, &mask, (sigset_t *)NULL);
@


1.17
log
@stop flushing streams in abort(). it's hackish and unsafe, and no longer
required. try to document this fact and some of the history.
with feedback from deraadt guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: abort.c,v 1.16 2012/11/10 03:46:11 guenther Exp $ */
d64 1
@


1.16
log
@Per POSIX, fix raise() and abort() to send the signal to the current thread.
Should make coredumps from abort() easier to debug too.

ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: abort.c,v 1.15 2007/09/03 14:40:16 millert Exp $ */
a41 2
	struct atexit *p = __atexit;
	static int cleanup_called = 0;
a51 15

	/*
	 * POSIX requires we flush stdio buffers on abort
	 */
	if (cleanup_called == 0) {
		/* the cleanup routine lives in fns[0] on the last page */
		while (p != NULL && p->next != NULL)
			p = p->next;
		/* the check for fn_dso == NULL is mostly paranoia */
		if (p != NULL && p->fns[0].fn_dso == NULL &&
		    p->fns[0].fn_ptr.std_func != NULL) {
			cleanup_called = 1;
			(*p->fns[0].fn_ptr.std_func)();
		}
	}
@


1.15
log
@Add __cxa_atexit() support for gcc3.  This provides support for shared object destructors called at dlclose() time.  Inspired by similar changes in FreeBSD and NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: abort.c,v 1.14 2005/08/08 08:05:36 espie Exp $ */
d37 2
d70 1
a70 1
	(void)kill(getpid(), SIGABRT);
d78 1
a78 1
	(void)kill(getpid(), SIGABRT);
@


1.14
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d57 1
d60 3
a62 1
		if (p != NULL && p->fns[0] != NULL) {
d64 1
a64 1
			(*p->fns[0])();
@


1.13
log
@Call _exit() not exit() from abort() if we are unable to kill ourselves
to avoid flushing stdio twice.  This code path should never really
happen though.  Also make the function declaration ANSI.  OK deraadt@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: abort.c,v 1.12 2003/06/02 20:18:37 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: abort.c,v 1.11 2002/11/05 22:19:55 marc Exp $";
d41 1
a41 1
abort()
d77 1
a77 1
	exit(1);
@


1.11
log
@
thread safe libc -- 2nd try.   OK miod@@, millert@@
Thanks to miod@@ for m68k and vax fixes
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char *rcsid = "$OpenBSD: abort.c,v 1.10 2002/11/03 23:58:39 marc Exp $";
@


1.10
log
@back out previous patch.. there are still some vax/m68k issues
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: abort.c,v 1.9 2002/11/03 20:36:43 marc Exp $";
a57 1
#ifdef _THREAD_SAFE
a58 3
#else  /* _THREAD_SAFE */
	(void)sigprocmask(SIG_SETMASK, &mask, (sigset_t *)NULL);
#endif /* _THREAD_SAFE */
a78 1
#ifdef _THREAD_SAFE
a79 3
#else  /* _THREAD_SAFE */
	(void)sigprocmask(SIG_SETMASK, &mask, (sigset_t *)NULL);
#endif /* _THREAD_SAFE */
@


1.9
log
@
libc changes for thread safety.  Tested on:
alpha (millert@@), i386 (marc@@), m68k (millert@@ and miod@@),
powerpc (drahn@@ and dhartmei@@), sparc (millert@@ and marc@@),
sparc64 (marc@@), and vax (millert@@ and miod@@).
Thanks to millert@@, miod@@, and mickey@@ for fixes along the way.
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: abort.c,v 1.8 2002/09/14 22:03:14 dhartmei Exp $";
d58 1
d60 3
d83 1
d85 3
@


1.8
log
@Move __cleanup into mprotect'ed page to prevent unintentional modifications
similar to the atexit handlers. Idea and help deraadt@@, ok deraadt@@
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: abort.c,v 1.7 2001/08/12 12:03:01 heko Exp $";
a57 1
#ifdef _THREAD_SAFE
a58 3
#else  /* _THREAD_SAFE */
	(void)sigprocmask(SIG_SETMASK, &mask, (sigset_t *)NULL);
#endif /* _THREAD_SAFE */
a78 1
#ifdef _THREAD_SAFE
a79 3
#else  /* _THREAD_SAFE */
	(void)sigprocmask(SIG_SETMASK, &mask, (sigset_t *)NULL);
#endif /* _THREAD_SAFE */
@


1.7
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: abort.c,v 1.6 1998/11/20 11:18:49 d Exp $";
d42 1
a42 2

void (*__cleanup)();
d47 1
d67 7
a73 3
	if (cleanup_called == 0 && __cleanup != NULL) {
		cleanup_called = 1;
		(*__cleanup)();
@


1.6
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: abort.c,v 1.5 1997/06/22 20:21:25 tholo Exp $";
d60 1
a60 1
#else  _THREAD_SAFE
d62 1
a62 1
#endif _THREAD_SAFE
d81 1
a81 1
#else  _THREAD_SAFE
d83 1
a83 1
#endif _THREAD_SAFE
@


1.5
log
@Make sure we don't get stuck in a loop when trying to clean up stdio
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: abort.c,v 1.4 1996/10/25 07:06:37 downsj Exp $";
d41 1
d58 3
d62 1
d79 3
d83 1
@


1.4
log
@add decl
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: abort.c,v 1.3 1996/10/25 03:09:15 tholo Exp $";
d47 1
a49 5
	/*
	 * POSIX requires we flush stdio buffers on abort
	 */
	if (__cleanup)
		(*__cleanup)();
d58 9
@


1.3
log
@POSIX requires stdio buffers be flushed on abort
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: abort.c,v 1.2 1996/08/19 08:33:20 tholo Exp $";
d41 2
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: abort.c,v 1.1.1.1 1995/10/18 08:42:16 deraadt Exp $";
d46 6
@


1.1
log
@Initial revision
@
text
@d35 1
a35 2
/*static char *sccsid = "from: @@(#)abort.c	5.11 (Berkeley) 2/23/91";*/
static char *rcsid = "$Id: abort.c,v 1.5 1995/02/28 01:46:24 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
