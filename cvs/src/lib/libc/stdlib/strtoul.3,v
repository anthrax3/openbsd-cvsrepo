head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.12
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.8
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.4
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.6
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.22.0.6
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.20.0.12
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.10
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.8
	OPENBSD_5_0:1.20.0.6
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.4
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.2
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.19.0.8
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.10
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.6
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.4
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.2
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.18.0.2
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.16.0.6
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.4
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.2
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.15.0.10
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.8
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.6
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.24
date	2014.11.30.21.21.59;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	LCBTyemv87X040O7;

1.23
date	2014.09.14.14.32.44;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	KgpwdMReDHGsnjNo;

1.22
date	2013.08.14.06.32.28;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2010.04.07.18.32.53;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2007.11.13.18.30.04;	author tobias;	state Exp;
branches;
next	1.18;

1.18
date	2007.06.29.18.54.37;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.31.19.19.32;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2006.01.13.17.58.09;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.20.18.38;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.10.06.48.30;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.04.21.21.49.40;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.06.18.19.26;	author kjell;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.21.20.54.09;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.29.00.20.11;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.09.15.51.21;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.20.13.50.03;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.04.22.19.31;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.09.14.03.59.55;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	99.07.20.10.18.21;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.06.29.18.36.24;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.33.52;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Replace all 14 instances of .St -ansiC-99 in our tree with .St -isoC-99.
The former is not used anywhere in NetBSD, FreeBSD, or DragonFly
and not supported by groff, so i'm going to delete it from mandoc(1).
We don't need two macros for the same thing.
@
text
@.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: strtoul.3,v 1.23 2014/09/14 14:32:44 schwarze Exp $
.\"
.Dd $Mdocdate: September 14 2014 $
.Dt STRTOUL 3
.Os
.Sh NAME
.Nm strtoul ,
.Nm strtoull ,
.Nm strtoumax ,
.Nm strtouq
.Nd convert a string to an unsigned long, unsigned long long or uintmax_t integer
.Sh SYNOPSIS
.In limits.h
.In stdlib.h
.Ft unsigned long
.Fn strtoul "const char *nptr" "char **endptr" "int base"
.Ft unsigned long long
.Fn strtoull "const char *nptr" "char **endptr" "int base"
.In inttypes.h
.Ft uintmax_t
.Fn strtoumax "const char *nptr" "char **endptr" "int base"
.In sys/types.h
.In limits.h
.In stdlib.h
.Ft u_quad_t
.Fn strtouq "const char *nptr" "char **endptr" "int base"
.Sh DESCRIPTION
The
.Fn strtoul
function converts the string in
.Fa nptr
to an
.Vt unsigned long
value.
The
.Fn strtoull
function converts the string in
.Fa nptr
to an
.Vt unsigned long long
value.
The
.Fn strtoumax
function converts the string in
.Fa nptr
to a
.Vt umaxint_t
value.
The
.Fn strtouq
function is a deprecated equivalent of
.Fn strtoull
and is provided for backwards compatibility with legacy programs.
The conversion is done according to the given
.Fa base ,
which must be a number between 2 and 36 inclusive or the special value 0.
If the string in
.Fa nptr
represents a negative number, it will be converted to its unsigned equivalent.
This behavior is consistent with what happens when a signed integer type is
cast to its unsigned counterpart.
.Pp
The string may begin with an arbitrary amount of whitespace
(as determined by
.Xr isspace 3 )
followed by a single optional
.Ql +
or
.Ql -
sign.
If
.Fa base
is zero or 16, the string may then include a
.Ql 0x
prefix, and the number will be read in base 16; otherwise, a zero
.Fa base
is taken as 10 (decimal) unless the next character is
.Ql 0 ,
in which case it is taken as 8 (octal).
.Pp
The remainder of the string is converted to an
.Vt unsigned long ,
.Vt unsigned long long ,
or
.Vt uintmax_t
value in the obvious manner,
stopping at the first character which is not a valid digit
in the given base.
(In bases above 10, the letter
.Ql A
in either upper or lower case represents 10,
.Ql B
represents 11, and so forth, with
.Ql Z
representing 35.)
.Pp
If
.Fa endptr
is non-null,
.Fn strtoul
stores the address of the first invalid character in
.Fa *endptr .
If there were no digits at all, however,
.Fn strtoul
stores the original value of
.Fa nptr
in
.Fa *endptr .
(Thus, if
.Fa *nptr
is not
.Ql \e0
but
.Fa **endptr
is
.Ql \e0
on return, the entire string was valid.)
.Sh RETURN VALUES
The
.Fn strtoul ,
.Fn strtoull ,
.Fn strtoumax
and
.Fn strtouq
functions return either the result of the conversion or,
if there was a leading minus sign,
the negation of the result of the conversion,
unless the original (non-negated) value would overflow.
If overflow occurs,
.Fn strtoul
returns
.Dv ULONG_MAX ,
.Fn strtoull
returns
.Dv ULLONG_MAX ,
.Fn strtoumax
returns
.Dv UINTMAX_MAX ,
.Fn strtouq
returns
.Dv ULLONG_MAX
and the global variable
.Va errno
is set to
.Er ERANGE .
.Pp
There is no way to determine if
.Fn strtoul
has processed a negative number (and returned an unsigned value) short of
examining the string in
.Fa nptr
directly.
.Pp
If there is no valid digit, 0 is returned.
If
.Ar base
is invalid, 0 is returned and the global variable
.Va errno
is set to
.Er EINVAL .
.Sh EXAMPLES
Ensuring that a string is a valid number (i.e., in range and containing no
trailing characters) requires clearing
.Va errno
beforehand explicitly since
.Va errno
is not changed on a successful call to
.Fn strtoul ,
and the return value of
.Fn strtoul
cannot be used unambiguously to signal an error:
.Bd -literal -offset indent
char *ep;
unsigned long ulval;

\&...

errno = 0;
ulval = strtoul(buf, &ep, 10);
if (buf[0] == '\e0' || *ep != '\e0')
	goto not_a_number;
if (errno == ERANGE && ulval == ULONG_MAX)
	goto out_of_range;
.Ed
.Pp
This example will accept
.Dq 12
but not
.Dq 12foo
or
.Dq 12\en .
If trailing whitespace is acceptable, further checks must be done on
.Va *ep ;
alternately, use
.Xr sscanf 3 .
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er EINVAL
The value of
.Ar base
was neither between 2 and 36 inclusive nor the special value 0.
.It Bq Er ERANGE
The given string was out of range; the value converted has been clamped.
.El
.Sh SEE ALSO
.Xr sscanf 3 ,
.Xr strtol 3
.Sh STANDARDS
The
.Fn strtoul ,
.Fn strtoull ,
and
.Fn strtoumax
functions conform to
.St -isoC-99 .
Setting
.Va errno
to
.Dv EINVAL
is an extension to that standard required by
.St -p1003.1-2008 .
.Pp
The
.Fn strtouq
function is a
.Bx
extension and is provided for backwards compatibility with legacy programs.
.Sh BUGS
Ignores the current locale.
@


1.23
log
@Do not claim that empty numbers set EINVAL, our implementation doesn't.
Mention that invalid bases do set EINVAL (as required by POSIX);
this part of the change uses part of an earlier patch by millert@@.
Minor mdoc(7) cleanup and sync between the two pages while here.
Feedback and ok jmc@@ and millert@@.
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtoul.3,v 1.22 2013/08/14 06:32:28 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: August 14 2013 $
d246 1
a246 1
.St -ansiC-99 .
@


1.22
log
@no longer any need to quote macro lines with >9 args;
From: Jan Stary
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtoul.3,v 1.21 2013/06/05 03:39:23 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: June 5 2013 $
d64 1
a64 1
.Li unsigned long
d71 1
a71 1
.Li unsigned long long
d78 1
a78 1
.Li umaxint_t
d87 1
a87 2
which must be a number between 2 and 36 inclusive
or the special value 0.
d113 6
a118 3
.Li unsigned long
value in the obvious manner, stopping at the end of the string
or at the first character that does not produce a valid digit
a176 6
If no conversion could be performed, 0 is returned;
the global variable
.Va errno
is also set to
.Er EINVAL ,
though this is not portable across all platforms.
d184 8
d229 4
d247 7
@


1.21
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtoul.3,v 1.20 2010/04/07 18:32:53 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: April 7 2010 $
d42 1
a42 1
.Nd "convert a string to an unsigned long, unsigned long long or uintmax_t integer"
@


1.20
log
@- nuke some unneeded Pp; from kristaps
- small tweak while here
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtoul.3,v 1.19 2007/11/13 18:30:04 tobias Exp $
d34 1
a34 1
.Dd $Mdocdate: November 13 2007 $
d44 2
a45 2
.Fd #include <limits.h>
.Fd #include <stdlib.h>
d50 1
a50 1
.Fd #include <inttypes.h>
d53 3
a55 3
.Fd #include <sys/types.h>
.Fd #include <limits.h>
.Fd #include <stdlib.h>
@


1.19
log
@Put limits.h in front of stdlib.h as style(9) recommends.

OK millert@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtoul.3,v 1.18 2007/06/29 18:54:37 millert Exp $
d34 1
a34 1
.Dd $Mdocdate: June 29 2007 $
a47 1
.Pp
a49 1
.Pp
a52 1
.Pp
d179 1
a179 1
.Er EINVAL,
@


1.18
log
@Document behavior when no conversion could be performed.  Adapted
from FreeBSD.  With help from jmc@@.
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtoul.3,v 1.17 2007/05/31 19:19:32 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate$
d44 1
a45 1
.Fd #include <limits.h>
d57 1
a58 1
.Fd #include <limits.h>
@


1.17
log
@convert to new .Dd format;
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtoul.3,v 1.16 2006/01/13 17:58:09 millert Exp $
d178 6
@


1.16
log
@Add lldiv(), imaxabs(), imaxdiv(), strtoimax() and strtoumax()
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtoul.3,v 1.15 2003/06/02 20:18:38 millert Exp $
d34 1
a34 1
.Dd January 3, 2006
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d32 1
a32 1
.\"	$OpenBSD: strtoul.3,v 1.14 2003/05/10 06:48:30 jmc Exp $
d34 1
a34 1
.Dd June 25, 1992
d40 1
d42 1
a42 1
.Nd "convert a string to an unsigned long or unsigned long long integer"
a48 2
.Fd #include <stdlib.h>
.Fd #include <limits.h>
d52 4
d77 7
d152 10
d163 12
a174 4
function returns the result of the conversion,
unless the value would overflow, in which case
.Dv ULONG_MAX
is returned and
a177 18
If there was a leading minus sign,
.Fn strtoul
returns the (unsigned) negation of the absolute value of the number, unless
the absolute value would overflow.
In this case,
.Fn strtoul
returns
.Dv ULONG_MAX
and sets the global variable
.Va errno
to
.Er ERANGE .
.Pp
The
.Fn strtoull
function has identical return values except that
.Dv ULLONG_MAX
is used to indicate overflow.
d230 2
a231 1
.Fn strtoul
d233 1
a233 1
.Fn strtoull
@


1.14
log
@typos;
@
text
@d16 1
a16 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
d32 1
a32 1
.\"	$OpenBSD: strtoul.3,v 1.13 2003/04/21 21:49:40 millert Exp $
@


1.13
log
@Mention that stroul() et al *do* accept negative numbers, they
just (effectively) cast to unsigned.  ho@@ OK
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.12 2003/03/06 18:19:26 kjell Exp $
d45 1
a45 1
.Nd convert a string to an unsigned long or unsigned long long integer
@


1.12
log
@Fix a pasto. (There is no ULLONG_MIN, for hopefully obvious reasons)
ok millert
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.11 2002/11/21 20:54:09 millert Exp $
d86 5
@


1.11
log
@.Xr atoll(3) and add missing .Xr of atol(3) in atoll(3) man page.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.10 2002/06/29 00:20:11 millert Exp $
a164 2
.Dv ULLONG_MIN
and
d166 1
a166 1
are used to indicate underflow and overflow respectively.
@


1.10
log
@Replace strtou?q() with the more standard strtou?ll(), using weak
aliases to fake up strtou?q().  espie@@ OK.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.9 2002/04/30 16:31:42 mpech Exp $
d222 9
a230 2
function conforms to
.St -ansiC .
@


1.9
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.8 2000/08/09 15:51:21 aaron Exp $
d43 1
d45 1
a45 1
.Nd convert a string to an unsigned long or uquad_t integer
d52 5
d71 1
a71 1
.Fn strtouq
d74 2
a75 2
to a
.Li u_quad_t
d77 5
d161 8
@


1.8
log
@For man pages that describe multiple functions, split the .Nm arguments
onto separate lines in the NAME section.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.7 2000/04/20 13:50:03 aaron Exp $
d50 1
a50 1

@


1.7
log
@Flesh out stdlib function man pages.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.6 2000/03/04 22:19:31 aaron Exp $
d42 2
a43 1
.Nm strtoul, strtouq
@


1.6
log
@In Unix land we prefer "whitespace" to "white space" or "white-space". At
least, this is the impression I get from looking at a lot of Perl docs.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.5 1999/09/14 03:59:55 pjanzen Exp $
d58 1
a58 2
function
converts the string in
d65 1
a65 2
function
converts the string in
d85 1
a85 2
is zero or 16,
the string may then include a
d87 1
a87 2
prefix,
and the number will be read in base 16; otherwise, a zero
d95 1
a95 2
value in the obvious manner,
stopping at the end of the string
d100 1
a100 2
in either upper or lower case
represents 10,
d108 1
a108 1
is non nil,
d130 1
a130 2
function
returns the result of the conversion,
d202 1
a202 2
function
conforms to
@


1.5
log
@Supply examples and discuss limitations.
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.4 1999/07/20 10:18:21 aaron Exp $
d77 1
a77 1
The string may begin with an arbitrary amount of white space
@


1.4
log
@better english; deraadt@@/millert@@
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.3 1999/06/29 18:36:24 aaron Exp $
d137 12
a148 5
returns either the result of the conversion
or, if there was a leading minus sign,
the negation of the result of the conversion,
unless the original (non-negated) value would overflow;
in the latter case,
d156 42
d204 1
@


1.3
log
@first round of repairs on stdlib
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.2 1996/08/19 08:33:52 tholo Exp $
d74 2
a75 2
which must be between 2 and 36 inclusive,
or be the special value 0.
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d36 1
a36 1
.\"	$OpenBSD: strtoul.3,v 1.1.1.1 1995/10/18 08:42:20 deraadt Exp $
d62 1
a62 1
.Em unsigned long
d70 1
a70 1
.Em u_quad_t
d98 1
a98 1
.Em unsigned long
@


1.1
log
@Initial revision
@
text
@d36 1
a36 2
.\"     from: @@(#)strtoul.3	5.4 (Berkeley) 6/25/92
.\"	$Id: strtoul.3,v 1.5 1994/01/03 22:58:39 jtc Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
