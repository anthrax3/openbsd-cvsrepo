head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.2
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.10
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.8
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.4
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.14
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.12
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.10
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.09.21.04.38.56;	author guenther;	state Exp;
branches;
next	1.18;
commitid	pqjnYVtACzQ9ctai;

1.18
date	2016.04.25.21.36.04;	author millert;	state Exp;
branches;
next	1.17;
commitid	88faAEo0RiUNWpWB;

1.17
date	2016.03.13.18.34.21;	author guenther;	state Exp;
branches;
next	1.16;
commitid	AStIlKdF20sYXV6x;

1.16
date	2015.09.13.08.31.47;	author guenther;	state Exp;
branches;
next	1.15;
commitid	QZ177IcjQzeRxHAC;

1.15
date	2014.10.08.05.33.31;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	Lx5XuTR1W4cruZ5u;

1.14
date	2012.09.23.16.08.04;	author jeremy;	state Exp;
branches;
next	1.13;

1.13
date	2010.08.23.22.31.50;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.29.04.09.34;	author naddy;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.04.20.39.13;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.03.15.52.16;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.08.08.05.37;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.30.18.51.49;	author pat;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.16.21.20.22;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.18.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.10.22.44.13;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.09.06.57.45;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.02.02.22.44.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.33.48;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Delete casts to off_t and size_t that are implied by assignments
or prototypes.  Ditto for some of the char* and void* casts too.

verified no change to instructions on ILP32 (i386) and LP64 (amd64)
ok natano@@ abluhm@@ deraadt@@ millert@@
@
text
@/*	$OpenBSD: setenv.c,v 1.18 2016/04/25 21:36:04 millert Exp $ */
/*
 * Copyright (c) 1987 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <errno.h>
#include <stdlib.h>
#include <string.h>

static char **lastenv;				/* last value of environ */

/*
 * putenv --
 *	Add a name=value string directly to the environmental, replacing
 *	any current value.
 */
int
putenv(char *str)
{
	char **P, *cp;
	size_t cnt = 0;
	int offset = 0;

	for (cp = str; *cp && *cp != '='; ++cp)
		;
	if (*cp != '=') {
		errno = EINVAL;
		return (-1);			/* missing `=' in string */
	}

	if (__findenv(str, (int)(cp - str), &offset) != NULL) {
		environ[offset++] = str;
		/* could be set multiple times */
		while (__findenv(str, (int)(cp - str), &offset)) {
			for (P = &environ[offset];; ++P)
				if (!(*P = *(P + 1)))
					break;
		}
		return (0);
	}

	/* create new slot for string */
	if (environ != NULL) {
		for (P = environ; *P != NULL; P++)
			;
		cnt = P - environ;
	}
	P = reallocarray(lastenv, cnt + 2, sizeof(char *));
	if (!P)
		return (-1);
	if (lastenv != environ && environ != NULL)
		memcpy(P, environ, cnt * sizeof(char *));
	lastenv = environ = P;
	environ[cnt] = str;
	environ[cnt + 1] = NULL;
	return (0);
}
DEF_WEAK(putenv);

/*
 * setenv --
 *	Set the value of the environmental variable "name" to be
 *	"value".  If rewrite is set, replace any current value.
 */
int
setenv(const char *name, const char *value, int rewrite)
{
	char *C, **P;
	const char *np;
	int l_value, offset = 0;

	if (!name || !*name) {
		errno = EINVAL;
		return (-1);
	}
	for (np = name; *np && *np != '='; ++np)
		;
	if (*np) {
		errno = EINVAL;
		return (-1);			/* has `=' in name */
	}

	l_value = strlen(value);
	if ((C = __findenv(name, (int)(np - name), &offset)) != NULL) {
		int tmpoff = offset + 1;
		if (!rewrite)
			return (0);
#if 0 /* XXX - existing entry may not be writable */
		if (strlen(C) >= l_value) {	/* old larger; copy over */
			while ((*C++ = *value++))
				;
			return (0);
		}
#endif
		/* could be set multiple times */
		while (__findenv(name, (int)(np - name), &tmpoff)) {
			for (P = &environ[tmpoff];; ++P)
				if (!(*P = *(P + 1)))
					break;
		}
	} else {					/* create new slot */
		size_t cnt = 0;

		if (environ != NULL) {
			for (P = environ; *P != NULL; P++)
				;
			cnt = P - environ;
		}
		P = reallocarray(lastenv, cnt + 2, sizeof(char *));
		if (!P)
			return (-1);
		if (lastenv != environ && environ != NULL)
			memcpy(P, environ, cnt * sizeof(char *));
		lastenv = environ = P;
		offset = cnt;
		environ[cnt + 1] = NULL;
	}
	if (!(environ[offset] =			/* name + `=' + value */
	    malloc((int)(np - name) + l_value + 2)))
		return (-1);
	for (C = environ[offset]; (*C = *name++) && *C != '='; ++C)
		;
	for (*C++ = '='; (*C++ = *value++); )
		;
	return (0);
}
DEF_WEAK(setenv);

/*
 * unsetenv(name) --
 *	Delete environmental variable "name".
 */
int
unsetenv(const char *name)
{
	char **P;
	const char *np;
	int offset = 0;

	if (!name || !*name) {
		errno = EINVAL;
		return (-1);
	}
	for (np = name; *np && *np != '='; ++np)
		;
	if (*np) {
		errno = EINVAL;
		return (-1);			/* has `=' in name */
	}

	/* could be set multiple times */
	while (__findenv(name, (int)(np - name), &offset)) {
		for (P = &environ[offset];; ++P)
			if (!(*P = *(P + 1)))
				break;
	}
	return (0);
}
DEF_WEAK(unsetenv);
@


1.18
log
@Allow setenv(3) and putenv(3) to operate on a NULL environ pointer.
The getenv(3) and unsetenv(3) functions already support this.
This will make it easier to emulate the glibc clearenv() function in ports.
Based on a diff from and OK jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setenv.c,v 1.17 2016/03/13 18:34:21 guenther Exp $ */
d144 1
a144 1
	    malloc((size_t)((int)(np - name) + l_value + 2))))
@


1.17
log
@environ and __progname are not declared in a public header; declare them
in libc's hidden/stdlib.h instead of in each .c file that needs one

ok deraadt@@ gsoares@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setenv.c,v 1.16 2015/09/13 08:31:47 guenther Exp $ */
d46 1
a46 1
	size_t cnt;
d68 5
a72 3
	for (P = environ; *P != NULL; P++)
		;
	cnt = P - environ;
d76 1
a76 1
	if (lastenv != environ)
d127 1
a127 1
		size_t cnt;
d129 5
a133 3
		for (P = environ; *P != NULL; P++)
			;
		cnt = P - environ;
d137 1
a137 1
		if (lastenv != environ)
@


1.16
log
@Wrap <stdlib.h> so that calls go direct and the symbols not in the
C standard are all weak.
Apply __{BEGIN,END}_HIDDEN_DECLS to gdtoa{,imp}.h, hiding the
arch-specific __strtorx, __ULtox_D2A, __strtorQ, __ULtoQ_D2A symbols.
@
text
@d1 1
a1 1
/*	$OpenBSD: setenv.c,v 1.15 2014/10/08 05:33:31 deraadt Exp $ */
a34 1
extern char **environ;
@


1.15
log
@using reallocarray() gives us multiplicative integer overflow checking
in case something wants to create massive amounts of environment, like
a bit more than 1/4 of a 32-bit address space.  unrealistic -- but why
audit one code path, and not treat others the same?  then you have to
re-engage everytime you see the code.  read the news, that isn't what
developers do.  At least if the code paths look the same, there is hope,
because they are easier to verify for correctness.  developers need
to give other developers a chance to want to care.
@
text
@d1 1
a1 1
/*	$OpenBSD: setenv.c,v 1.14 2012/09/23 16:08:04 jeremy Exp $ */
a34 2
char *__findenv(const char *name, int len, int *offset);

d82 1
d149 1
d181 1
@


1.14
log
@Make setenv(3) consistent with unsetenv(3), giving EINVAL if passed
an empty name, NULL pointer, or a name containing an '=' character.

OK millert@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setenv.c,v 1.13 2010/08/23 22:31:50 millert Exp $ */
d74 1
a74 1
	P = (char **)realloc(lastenv, sizeof(char *) * (cnt + 2));
d132 1
a132 1
		P = (char **)realloc(lastenv, sizeof(char *) * (cnt + 2));
@


1.13
log
@Check for duplicate variables in the environment when setting a value
via setenv() or putenv().  OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setenv.c,v 1.12 2010/06/29 04:09:34 naddy Exp $ */
d97 4
a102 1
#ifdef notyet
a106 1
#endif
@


1.12
log
@Make unsetenv(NULL) and unsetenv("") give EINVAL, per POSIX.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: setenv.c,v 1.11 2009/06/04 20:39:13 millert Exp $ */
d50 1
a50 1
	int offset;
d60 7
a66 1
		environ[offset] = str;
d93 1
a93 1
	char *C;
d95 1
a95 1
	int l_value, offset;
d108 1
d118 6
a125 1
		char **P;
d158 1
a158 1
	int offset;
@


1.11
log
@Don't assume that we can overwrite strings in the environment.
Someone may have passed a read-only string to putenv() (I'm looking
at you cron!).
@
text
@d1 1
a1 1
/*	$OpenBSD: setenv.c,v 1.10 2009/06/03 15:52:16 millert Exp $ */
d148 4
@


1.10
log
@Make putenv(), setenv() and unsetenv() standards compliant.  The
standard explicitly disallows passing setenv a name with a '=' in
it but historic BSD behavior is to allow this but to ignore the '='
and anything after it.
@
text
@d1 1
a1 1
/*	$OpenBSD: setenv.c,v 1.9 2005/08/08 08:05:37 espie Exp $ */
d104 1
d110 1
@


1.9
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d31 1
d35 1
a35 1
char *__findenv(const char *name, int *offset);
d38 40
a86 1
	static char **lastenv;			/* last value of environ */
d88 1
d91 9
a99 2
	if (*value == '=')			/* no `=' in value */
		++value;
d101 1
a101 1
	if ((C = __findenv(name, &offset))) {	/* find if already exists */
a124 2
	for (C = (char *)name; *C && *C != '='; ++C)
		;				/* no `=' in name */
d126 1
a126 1
	    malloc((size_t)((int)(C - name) + l_value + 2))))
d139 1
a139 1
void
d143 1
d146 9
a154 1
	while (__findenv(name, &offset))	/* if set multiple times */
d158 2
@


1.8
log
@ansi + de-register

ok otto deraadt
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: setenv.c,v 1.7 2005/02/16 21:20:22 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.7
log
@Stash the environment pointer we get from realloc() instead of just
setting a flag.  That way when we are called again we can be sure
to realloc() the right thing, regardless of the current value of
environ.  When the stashed value != environ (or when we are called
for the first time), copy the existing entries from environ and set
environ to the new value.  OK deraadt@@, beck@@, djm@@
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: setenv.c,v 1.6 2003/06/02 20:18:38 millert Exp $";
d47 1
a47 4
setenv(name, value, rewrite)
	const char *name;
	const char *value;
	int rewrite;
d97 1
a97 2
unsetenv(name)
	const char *name;
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: setenv.c,v 1.5 2002/12/10 22:44:13 mickey Exp $";
d39 2
d48 2
a49 2
	register const char *name;
	register const char *value;
d52 2
a53 3
	extern char **environ;
	static int alloced;			/* if allocated space before */
	register char *C;
d68 2
a69 2
		register int	cnt;
		register char	**P;
d71 10
a80 17
		for (P = environ, cnt = 0; *P; ++P, ++cnt);
		if (alloced) {			/* just increase size */
			P = (char **)realloc((void *)environ,
			    (size_t)(sizeof(char *) * (cnt + 2)));
			if (!P)
				return (-1);
			environ = P;
		}
		else {				/* get new space */
			alloced = 1;		/* copy old entries into it */
			P = (char **)malloc((size_t)(sizeof(char *) *
			    (cnt + 2)));
			if (!P)
				return (-1);
			bcopy(environ, P, cnt * sizeof(char *));
			environ = P;
		}
a81 1
		offset = cnt;
d83 2
a84 1
	for (C = (char *)name; *C && *C != '='; ++C);	/* no `=' in name */
d101 1
a101 1
	const char	*name;
d103 1
a103 2
	extern char **environ;
	register char **P;
a104 1
	char *__findenv();
d106 1
a106 1
	while (__findenv(name, &offset))		/* if set multiple times */
@


1.5
log
@use proper __findenv() prototype; millert@@ ok
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char *rcsid = "$OpenBSD: setenv.c,v 1.4 2001/07/09 06:57:45 deraadt Exp $";
@


1.4
log
@a first pass at -Wall
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: setenv.c,v 1.3 1998/02/02 22:44:53 millert Exp $";
d41 2
a57 1
	char *__findenv();
@


1.3
log
@Don't override environ if realloc() fails.  Pointed out by
Dave Bodenstab <imdave@@mcs.net>
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: setenv.c,v 1.2 1996/08/19 08:33:48 tholo Exp $";
d65 2
a66 1
			while (*C++ = *value++);
d99 1
a99 1
	for (*C++ = '='; *C++ = *value++; )
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: setenv.c,v 1.1.1.1 1995/10/18 08:42:19 deraadt Exp $";
d74 1
a74 1
			environ = (char **)realloc((char *)environ,
d76 1
a76 1
			if (!environ)
d78 1
@


1.1
log
@Initial revision
@
text
@d35 1
a35 2
/*static char *sccsid = "from: @@(#)setenv.c	5.6 (Berkeley) 6/4/91";*/
static char *rcsid = "$Id: setenv.c,v 1.7 1995/06/14 05:19:57 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
