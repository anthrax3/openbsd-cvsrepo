head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.12
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.22
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.18
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.16
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.14
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.12
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2015.09.26.16.03.48;	author guenther;	state Exp;
branches;
next	1.9;
commitid	RnfhPZOnKwIM7hPZ;

1.9
date	2015.08.20.21.49.29;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	jeIpGH0zlTW3huPH;

1.8
date	2014.03.16.18.38.30;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2012.02.06.20.29.54;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.04.11.21.50;	author moritz;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.30.18.51.49;	author pat;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.01.04.08.45;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.27.24;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.07.01.05.54.42;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.06.13.23.41.37;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@lint is dead: delete useless LINTLIBRARY comments

ok millert@@
@
text
@/*	$OpenBSD: tsearch.c,v 1.9 2015/08/20 21:49:29 deraadt Exp $	*/

/*
 * Tree search generalized from Knuth (6.2.2) Algorithm T just like
 * the AT&T man page says.
 *
 * The node_t structure is for internal use only
 *
 * Written by reading the System V Interface Definition, not the code.
 *
 * Totally public domain.
 */

#include <search.h>
#include <stdlib.h>

typedef struct node_t {
    char	  *key;
    struct node_t *left, *right;
} node;

/* find or insert datum into search tree */
void *
tsearch(const void *vkey, void **vrootp,
    int (*compar)(const void *, const void *))
{
    node *q;
    char *key = (char *)vkey;
    node **rootp = (node **)vrootp;

    if (rootp == (struct node_t **)0)
	return ((void *)0);
    while (*rootp != (struct node_t *)0) {	/* Knuth's T1: */
	int r;

	if ((r = (*compar)(key, (*rootp)->key)) == 0)	/* T2: */
	    return ((void *)*rootp);		/* we found it! */
	rootp = (r < 0) ?
	    &(*rootp)->left :		/* T3: follow left branch */
	    &(*rootp)->right;		/* T4: follow right branch */
    }
    q = malloc(sizeof(node));	/* T5: key not found */
    if (q != (struct node_t *)0) {	/* make new node */
	*rootp = q;			/* link new node to old */
	q->key = key;			/* initialize new node */
	q->left = q->right = (struct node_t *)0;
    }
    return ((void *)q);
}

/* delete node with given key */
void *
tdelete(const void *vkey, void **vrootp,
    int (*compar)(const void *, const void *))
{
    node **rootp = (node **)vrootp;
    char *key = (char *)vkey;
    node *p = (node *)1;
    node *q;
    node *r;
    int cmp;

    if (rootp == (struct node_t **)0 || *rootp == (struct node_t *)0)
	return ((struct node_t *)0);
    while ((cmp = (*compar)(key, (*rootp)->key)) != 0) {
	p = *rootp;
	rootp = (cmp < 0) ?
	    &(*rootp)->left :		/* follow left branch */
	    &(*rootp)->right;		/* follow right branch */
	if (*rootp == (struct node_t *)0)
	    return ((void *)0);		/* key not found */
    }
    r = (*rootp)->right;			/* D1: */
    if ((q = (*rootp)->left) == (struct node_t *)0)	/* Left (struct node_t *)0? */
	q = r;
    else if (r != (struct node_t *)0) {		/* Right link is null? */
	if (r->left == (struct node_t *)0) {	/* D2: Find successor */
	    r->left = q;
	    q = r;
	} else {			/* D3: Find (struct node_t *)0 link */
	    for (q = r->left; q->left != (struct node_t *)0; q = r->left)
		r = q;
	    r->left = q->right;
	    q->left = (*rootp)->left;
	    q->right = (*rootp)->right;
	}
    }
    free((struct node_t *) *rootp);	/* D4: Free node */
    *rootp = q;				/* link parent to new node */
    return(p);
}

/* Walk the nodes of a tree */
static void
trecurse(node *root, void (*action)(const void *, VISIT, int), int level)
{
    if (root->left == (struct node_t *)0 && root->right == (struct node_t *)0)
	(*action)(root, leaf, level);
    else {
	(*action)(root, preorder, level);
	if (root->left != (struct node_t *)0)
	    trecurse(root->left, action, level + 1);
	(*action)(root, postorder, level);
	if (root->right != (struct node_t *)0)
	    trecurse(root->right, action, level + 1);
	(*action)(root, endorder, level);
    }
}

/* Walk the nodes of a tree */
void
twalk(const void *vroot, void (*action)(const void *, VISIT, int))
{
    node *root = (node *)vroot;

    if (root != (node *)0 && action != (void (*)(const void *, VISIT, int))0)
	trecurse(root, action, 0);
}
@


1.9
log
@All these files include <stdlib.h>, so do not need to cast
malloc/calloc/realloc* returns.
@
text
@d1 1
a1 1
/*	$OpenBSD: tsearch.c,v 1.8 2014/03/16 18:38:30 guenther Exp $	*/
a12 1
/*LINTLIBRARY*/
@


1.8
log
@lint is dead (long live the lint!), so stop using it as a cpp conditional
(namespace pollution!) or talking about its opinion on code.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tsearch.c,v 1.7 2012/02/06 20:29:54 guenther Exp $	*/
d43 1
a43 1
    q = (node *) malloc(sizeof(node));	/* T5: key not found */
@


1.7
log
@Revert previous diff as it resulted in the wrong return code when
the last node is deleted.  Instead, resolve the Coverity warning
by returning (node *)1 when you delete the root node.

based an idea from millert@@.  ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tsearch.c,v 1.6 2006/04/04 11:21:50 moritz Exp $	*/
d7 1
a7 1
 * The node_t structure is for internal use only, lint doesn't grok it.
@


1.6
log
@When tdelete() is used to delete the root node, don't return a
pointer to the freed root node, but return a pointer to the new
root node. POSIX does not define, what should be returned in
that case.

Fixes Coverity CID 2528.

ok millert@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tsearch.c,v 1.5 2005/03/30 18:51:49 pat Exp $	*/
d59 1
a59 1
    node *p;
d64 1
a64 1
    if (rootp == (struct node_t **)0 || (p = *rootp) == (struct node_t *)0)
a88 2
    if (p == *rootp)
        p = q;
@


1.5
log
@ansi + de-register

ok otto deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: tsearch.c,v 1.4 2004/10/01 04:08:45 jsg Exp $	*/
d89 2
@


1.4
log
@add some missing $, ok djm@@ 'That looks fine to me' millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 2
a26 4
tsearch(vkey, vrootp, compar)
	const void 	*vkey;		/* key to be located */
	void		**vrootp;	/* address of tree root */
	int		(*compar)(const void *, const void *);
d28 1
a28 1
    register node *q;
d54 2
a55 4
tdelete(vkey, vrootp, compar)
	const void	*vkey;		/* key to be deleted */
	void		**vrootp;	/* address of the root of tree */
	int		(*compar)(const void *, const void *);
d60 2
a61 2
    register node *q;
    register node *r;
d96 1
a96 4
trecurse(root, action, level)
	register node	*root;		/* Root of the tree to be walked */
	register void	(*action)();	/* Function to be called at each node */
	register int	level;
d113 1
a113 3
twalk(vroot, action)
	const void	*vroot;		/* Root of the tree to be walked */
	void		(*action)(const void *, VISIT, int);
d117 1
a117 1
    if (root != (node *)0 && action != (void(*)())0)
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 2
@


1.2
log
@Include <stdlib.h> for malloc() proto.
@
text
@d26 1
a26 1
	int		(*compar) __P((const void *, const void *));
d57 1
a57 1
	int		(*compar) __P((const void *, const void *));
d120 1
a120 1
	void		(*action) __P((const void *, VISIT, int));
@


1.1
log
@PD tsearch as reqd by xpg; by esr
@
text
@d14 1
@
