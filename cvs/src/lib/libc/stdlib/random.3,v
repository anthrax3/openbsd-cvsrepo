head	1.28;
access;
symbols
	OPENBSD_6_1:1.28.0.12
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.8
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.4
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.6
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.25.0.4
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.21.0.6
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.20.0.4
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.2
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.20
	OPENBSD_5_0:1.19.0.18
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.16
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.14
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.10
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.12
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.8
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.6
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.4
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.2
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.18.0.6
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.4
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.17.0.10
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.14.0.8
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.6
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.14.0.4
	OPENBSD_3_1_BASE:1.14
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.12.0.6
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.4
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.28
date	2014.12.09.21.55.39;	author jmc;	state Exp;
branches;
next	1.27;
commitid	go4TdFkYZaqGALfz;

1.27
date	2014.12.08.21.45.20;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	HpI1xDivwwEoN4ET;

1.26
date	2014.11.25.17.40.38;	author millert;	state Exp;
branches;
next	1.25;
commitid	KD4piIzOULbUOGwp;

1.25
date	2014.07.18.06.20.36;	author jmc;	state Exp;
branches;
next	1.24;
commitid	BRSCABhSQ5T5ZXWp;

1.24
date	2014.07.17.23.12.28;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	BMHVMIsKmkHiEHKs;

1.23
date	2014.07.13.14.25.00;	author tedu;	state Exp;
branches;
next	1.22;
commitid	3XAXGLxwXnDddKyb;

1.22
date	2014.07.13.14.24.23;	author tedu;	state Exp;
branches;
next	1.21;
commitid	jIKBEAWkRs6t6XtF;

1.21
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2012.06.01.01.01.57;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2007.05.31.19.19.31;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.30.07.51.02;	author otto;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.20.18.38;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.01.19.27.27;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.10.06.48.30;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2001.09.06.15.04.34;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.09.01.41.59;	author assar;	state Exp;
branches;
next	1.12;

1.12
date	2000.04.20.13.50.02;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.03.23.23.48;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.19.05.25.43;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	99.07.04.18.59.43;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.06.29.18.36.23;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.05.23.14.11.03;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.07.05.19.54.25;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.02.07.02.16.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.02.06.01.49.08;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.33.46;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.04.11.57.28;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Xr and Ox fixes;
@
text
@.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: random.3,v 1.27 2014/12/08 21:45:20 deraadt Exp $
.\"
.Dd $Mdocdate: December 8 2014 $
.Dt RANDOM 3
.Os
.Sh NAME
.Nm random ,
.Nm srandom ,
.Nm srandom_deterministic ,
.Nm srandomdev ,
.Nm initstate ,
.Nm setstate
.Nd pseudo-random number generator; routines for changing generators
.Sh SYNOPSIS
.In stdlib.h
.Ft long
.Fn random void
.Ft void
.Fn srandom "unsigned int seed"
.Ft void
.Fn srandom_deterministic "unsigned int seed"
.Ft void
.Fn srandomdev void
.Ft char *
.Fn initstate "unsigned int seed" "char *state" "size_t n"
.Ft char *
.Fn setstate "char *state"
.Sh DESCRIPTION
.Bf -symbolic
Standards insist that this interface return deterministic results.
Unsafe usage is very common, so
.Ox
changed the subsystem to return non-deterministic results by default.
.Ef
.Pp
To satisfy portable code,
.Fn srandom
or
.Fn srandomdev
may be called to initialize the subsystem.
In
.Ox
the
.Ar seed
variable is ignored, and strong random number results will be provided from
.Xr arc4random 3 .
In other systems, the
.Ar seed
variable primes a simplistic deterministic algorithm.
.Pp
If the standardized behavior is required
.Fn srandom_deterministic
can be substituted for
.Fn srandom ,
then subsequent
.Fn random
calls will return results using the deterministic algorithm.
.Pp
In non-deterministic (default) mode, the
.Fn random
function returns results from
.Xr arc4random 3
in the range from 0 to (2**31)\-1.
.Pp
In deterministic mode, the
.Fn random
function uses a non-linear additive feedback random number generator employing
a default table of size 31 long integers to return successive pseudo-random
numbers in the range from 0 to (2**31)\-1.
The period of this random number generator is very large, approximately
16*((2**31)\-1), but the results are a deterministic sequence from the seed.
.Pp
The
.Fn initstate
routine allows a state array, passed in as an argument, to be initialized
for future use.
The size of the state array (in bytes) is used by
.Fn initstate
to decide how sophisticated a random number generator it should use \(em the
more state, the better the random numbers will be.
(Current "optimal" values for the amount of state information are
8, 32, 64, 128, and 256 bytes; other amounts will be rounded down to
the nearest known amount.
Using less than 8 bytes will cause an error.)
The seed for the initialization (which specifies a starting point for
the random number sequence, and provides for restarting at the same
point) is also an argument.
The
.Fn initstate
function returns a pointer to the previous state information array.
.Pp
Once a state has been initialized, the
.Fn setstate
routine provides for rapid switching between states.
The
.Fn setstate
function returns a pointer to the previous state array; its
argument state array is used for further random number generation
until the next call to
.Fn initstate
or
.Fn setstate .
.Pp
Once a state array has been initialized, it may be restarted at a
different point either by calling
.Fn initstate
(with the desired seed, the state array, and its size) or by calling
both
.Fn setstate
(with the state array) and
.Fn srandom
(with the desired seed).
The advantage of calling both
.Fn setstate
and
.Fn srandom
is that the size of the state array does not have to be remembered after
it is initialized.
.Pp
Use of
.Fn srandom_deterministic ,
.Fn initstate ,
or
.Fn setstate
forces the subsystem into deterministic mode.
.Sh DIAGNOSTICS
If
.Fn initstate
is called with less than 8 bytes of state information, or if
.Fn setstate
detects that the state information has been garbled, error
messages are printed on the standard error output.
.Sh SEE ALSO
.Xr arc4random 3 ,
.Xr drand48 3 ,
.Xr rand 3 ,
.Xr random 4
.Sh STANDARDS
The
.Fn random ,
.Fn initstate ,
and
.Fn setstate
functions conform to
.St -xpg4.2 .
.Pp
The
.Fn srandom
function does not conform to
.St -xpg4.2 ,
intentionally.
.Pp
The
.Fn srandomdev
function is an extension.
.Pp
The
.Fn srandom_deterministic
function is an
.Ox
extension.
.Sh HISTORY
These
functions appeared in
.Bx 4.2 .
.Sh AUTHORS
.An Earl T. Cohen
@


1.27
log
@Change rand(), random(), drand48(), lrand48(), mrand48(), and srand48()
to returning strong random by default, source from arc4random(3).
Parameters to the seeding functions are ignored, and the subsystems remain
in strong random mode.  If you wish the standardized deterministic mode,
call srand_deterministic(), srandom_determistic(), srand48_deterministic(),
seed48_deterministic() or lcong48_deterministic() instead.
The re-entrant functions rand_r(), erand48(), nrand48(), jrand48() are
unaffected by this change and remain in deterministic mode (for now).

Verified as a good roadmap forward by auditing 8800 pieces of software.
Roughly 60 pieces of software will need adaptation to request the
deterministic mode.

Violates POSIX and C89, which violate best practice in this century.
ok guenther tedu millert
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.26 2014/11/25 17:40:38 millert Exp $
d30 1
a30 1
.Dd $Mdocdate: November 25 2014 $
d73 1
a73 1
.Xr arc4random 3.
d186 3
a188 1
function is an OpenBSD extension.
@


1.26
log
@Don't describe random() as "better".
Remove the bug about rand() being faster.
Add a bug about historical implementations seeding very poorly.
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.25 2014/07/18 06:20:36 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: July 18 2014 $
d36 1
d48 2
d57 32
a88 1
This interface is not cryptographically secure, so consider using
d90 1
a90 2
instead.
.Ef
d92 1
a92 1
The
d98 1
a98 41
16*((2**31)\-1).
.Pp
The
.Fn random
and
.Fn srandom
functions have (almost) the same calling sequence and initialization
properties as
.Xr rand 3 Ns / Ns Xr srand 3 .
The difference is that
.Xr rand
produces a much less random sequence \(em in fact, the low dozen bits
generated by rand go through a cyclic pattern.
All the bits generated by
.Fn random
are usable.
For example,
.Sq Li random()&01
will produce a random binary
value.
.Pp
Like
.Xr rand 3 ,
.Fn random
will by default produce a sequence of numbers that can be duplicated
by calling
.Fn srandom
with
.Ql 1
as the seed.
.Pp
The
.Fn srandomdev
routine switches to an algorithm using state derived from
random numbers obtained from the kernel.
Note that this particular seeding procedure can generate
states which are impossible to reproduce by calling
.Fn srandom
with any value, since the succeeding terms in the
state buffer are no longer derived from the LC algorithm applied to
a fixed seed.
d147 6
a152 3
With 256 bytes of state information, the period of the random number
generator is greater than 2**69
which should be sufficient for most purposes.
a167 1
.Fn srandom ,
d175 6
d183 4
a192 3
.Sh BUGS
The historical implementation used to have very weak seeding.
As a result, the random sequence did not vary much with the seed.
@


1.25
log
@zap trailing whitespace;
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.24 2014/07/17 23:12:28 deraadt Exp $
d30 1
a30 1
.Dd $Mdocdate: July 17 2014 $
d39 1
a39 1
.Nd better random number generator; routines for changing generators
d189 2
a190 2
About 2/3 the speed of
.Xr rand 3 .
@


1.24
log
@it is 2014, and we still need to encourage people away from srand()
and random().  Sigh.
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.23 2014/07/13 14:25:00 tedu Exp $
d30 1
a30 1
.Dd $Mdocdate: July 13 2014 $
d54 1
a54 1
This interface is not cryptographically secure, so consider using 
@


1.23
log
@oops, i deleted the wrong word
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.22 2014/07/13 14:24:23 tedu Exp $
d53 6
@


1.22
log
@remove a lie spotted by guenther
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.21 2013/06/05 03:39:23 tedu Exp $
d30 1
a30 1
.Dd $Mdocdate: June 5 2013 $
d92 1
a92 1
switches to an algorithm using state derived from
@


1.21
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.20 2012/06/01 01:01:57 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: June 1 2012 $
d92 2
a93 3
routine initializes a state array using
random numbers obtained from the kernel,
suitable for cryptographic use.
@


1.20
log
@Improve standards conformance: ecvt(), fcvt(), gcvt(), mktemp(), ttyslot(),
and valloc() are not in the current version, while posix_memalign() mkstemp(),
and mkdtemp() are, and setstate()'s argument has lost a bogus 'const'.

ok millert@@ jmc@@ espie@@ kettenis@@; ports build testing by naddy@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.19 2007/05/31 19:19:31 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 31 2007 $
d41 1
a41 1
.Fd #include <stdlib.h>
@


1.19
log
@convert to new .Dd format;
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.18 2005/11/30 07:51:02 otto Exp $
d30 1
a30 1
.Dd $Mdocdate$
d51 1
a51 1
.Fn setstate "const char *state"
@


1.18
log
@Use sysctl(KERN_ARND) to get n bytes, instead of just 4 at a time
and remove fallback code. If somebody is dumb enough to make the
sysctl fail using systrace, he deserves what he gets. Saves 7 syscalls
on process startup.
looks good miod@@ ok deraadt@@ tedu@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.17 2003/06/02 20:18:38 millert Exp $
d30 1
a30 1
.Dd April 19, 1991
@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.16 2003/06/01 19:27:27 jmc Exp $
d92 2
a93 3
routine initializes a state array using the
.Xr arandom 4
random number device which returns good random numbers,
@


1.16
log
@- section reorder
- merge COMPATIBILITY
- kill whitespace at EOL
@
text
@d12 1
a12 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
d28 1
a28 1
.\"	$OpenBSD: random.3,v 1.15 2003/05/10 06:48:30 jmc Exp $
@


1.15
log
@typos;
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.14 2001/09/06 15:04:34 mpech Exp $
a156 2
.Sh AUTHORS
.An Earl T. Cohen
d186 2
@


1.14
log
@Initial idea from aaron@@: Last char of .Xr group in SEE ALSO section should
be a single digit. Powered by mantoya@@.

millert@@ ok.
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.13 2001/06/09 01:41:59 assar Exp $
d63 1
a63 1
16*((2**31)\-1.
d71 1
a71 1
.Xr rand 3 Ns / Xr srand 3 .
d96 1
a96 1
routine initialize a state array using the
@


1.13
log
@remove confusing comparison with srand (it does not return the old seed)
use .Sh AUTHORS and .An for author
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.12 2000/04/20 13:50:02 aaron Exp $
d170 1
a170 1
.Xr random 4 ,
@


1.12
log
@Flesh out stdlib function man pages.
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.11 2000/04/03 23:23:48 millert Exp $
a83 7
Unlike
.Xr srand ,
.Fn srandom
does not return the old seed; the reason for this is that the amount of
state information used is much more than a single word.
(Two other routines are provided to deal with restarting/changing random
number generators).
a85 1
however,
d157 2
a158 2
.Sh AUTHOR
Earl T. Cohen
@


1.11
log
@Add srandomdev() from FreeBSD for use by sendmail and others.
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.10 2000/01/19 05:25:43 pjanzen Exp $
d59 2
a60 3
function
uses a non-linear additive feedback random number generator employing a
default table of size 31 long integers to return successive pseudo-random
d66 5
a70 2
.Fn random Ns / Fn srandom
have (almost) the same calling sequence and initialization properties as
d75 2
a76 1
generated by rand go through a cyclic pattern.  All the bits generated by
d78 2
a79 1
are usable.  For example,
d88 4
a91 3
state information used is much more than a single word.  (Two other
routines are provided to deal with restarting/changing random
number generators).  Like
d118 2
a119 1
for future use.  The size of the state array (in bytes) is used by
d125 2
a126 1
the nearest known amount.  Using less than 8 bytes will cause an error.)
d132 1
a132 2
function
returns a pointer to the previous state information array.
d139 1
a139 2
function
returns a pointer to the previous state array; its
@


1.10
log
@Max value returned is 2^31 - 1, regardless of the arch-dependent LONG_MAX.
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.9 1999/07/04 18:59:43 aaron Exp $
d40 1
d50 2
d98 13
d172 2
a173 1
.Xr rand 3
d183 4
@


1.9
log
@trash some old leftover macros and replace them with -mdoc macros
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.8 1999/06/29 18:36:23 aaron Exp $
a59 6
The maximum value returned by
.Fn random
is
.Dv LONG_MAX
(as defined by the header file
.Aq Pa limits.h ) .
@


1.8
log
@first round of repairs on stdlib
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.7 1999/05/23 14:11:03 aaron Exp $
d59 1
a59 3
numbers in the range from 0 to
.if t 2\u\s731\s10\d\(mi1.
.if n (2**31)\(mi1.
d67 1
a67 2
.if t 16\(mu(2\u\s731\s10\d\(mi1).
.if n 16*((2**31)\(mi1).
d148 1
a148 3
generator is greater than
.if t 2\u\s769\s10\d,
.if n 2**69
@


1.7
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.6 1998/07/05 19:54:25 millert Exp $
d45 1
a45 1
.Ft long 
d99 1
a99 1
with 
d170 3
a172 3
.Fn random ,                                                           
.Fn srandom ,                                                           
.Fn initstate ,                                                           
d179 1
a179 1
functions appeared in 
@


1.6
log
@add .Xr's for all the random functions in libc
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.5 1998/02/07 02:16:25 millert Exp $
d36 1
a36 1
.Os BSD 4.2
@


1.5
log
@More XPG4.2 --
  setstate takes a const parameter
  don't ever spew to stderr, just return NULL
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.4 1998/02/06 01:49:08 deraadt Exp $
d165 1
@


1.4
log
@size_t n in initstate(); XPG
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.3 1996/08/19 08:33:46 tholo Exp $
d48 1
a48 1
.Fn srandom "unsigned seed"
d50 1
a50 1
.Fn initstate "unsigned seed" "char *state" "size_t n"
d52 1
a52 1
.Fn setstate "char *state"
d165 1
d167 9
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d32 1
a32 1
.\"	$OpenBSD: random.3,v 1.2 1996/05/04 11:57:28 deraadt Exp $
d50 1
a50 1
.Fn initstate "unsigned seed" "char *state" "int n"
@


1.2
log
@document largest possible value; netbsd pr#2338; from banshee@@gabriella.resort.com
@
text
@d32 1
a32 2
.\"     from: @@(#)random.3	6.5 (Berkeley) 4/19/91
.\"	$Id: random.3,v 1.1.1.1 1995/10/18 08:42:19 deraadt Exp $
@


1.1
log
@Initial revision
@
text
@d33 1
a33 1
.\"	$Id: random.3,v 1.3 1993/10/04 18:05:47 jtc Exp $
d63 6
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
