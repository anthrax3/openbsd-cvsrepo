head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.12
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.8
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.10
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.12
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2013.11.01.19.05.11;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.25.13.19.19;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.16.12.15.03;	author martynas;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.29.18.45.56;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.10.16.18.37;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.10.02.23.02;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.10.02.08.28;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.08.08.05.36;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.17.21.56.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.03.01.52.40;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.09.20.01.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.02.02.43.50;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.02.15.38.54;	author millert;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Pull in gdtoa.h instead of declaring __dtoa() and __freedtoa() directly

ok deraadt@@
@
text
@/*	$OpenBSD: gcvt.c,v 1.12 2010/09/25 13:19:19 millert Exp $	*/

/*
 * Copyright (c) 2002, 2003, 2006, 2010
 *	Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 */

#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "gdtoa.h"

#define DEFPREC	6

char *
gcvt(double value, int ndigit, char *buf)
{
	char *digits, *dst, *src;
	int i, decpt, sign;
	struct lconv *lconv;

	lconv = localeconv();
	if (ndigit <= 0) {
		/* Match printf(3) behavior. */
		ndigit = ndigit ? DEFPREC : 1;
	}

	digits = __dtoa(value, 2, ndigit, &decpt, &sign, NULL);
	if (digits == NULL)
		return (NULL);
	if (decpt == 9999) {
		/*
		 * Infinity or NaN, convert to inf or nan with sign.
		 * We can't infer buffer size based on ndigit.
		 * We have to assume it is at least 5 chars.
		 */
		snprintf(buf, 5, "%s%s", sign ? "-" : "",
		    *digits == 'I' ? "inf" : "nan");
		__freedtoa(digits);
		return (buf);
	}

	dst = buf;
	if (sign)
		*dst++ = '-';

	/* Match printf(3) behavior for exponential vs. regular fomatting. */
	if (decpt <= -4 || decpt > ndigit) {
		/* exponential format (e.g. 1.2345e+13) */
		if (--decpt < 0) {
			sign = 1;
			decpt = -decpt;
		} else
			sign = 0;
		src = digits;
		*dst++ = *src++;
		if (*src != '\0') {
			*dst++ = *lconv->decimal_point;
			do {
				*dst++ = *src++;
			} while (*src != '\0');
		}
		*dst++ = 'e';
		if (sign)
			*dst++ = '-';
		else
			*dst++ = '+';
		if (decpt < 10) {
			*dst++ = '0';
			*dst++ = '0' + decpt;
			*dst = '\0';
		} else {
			/* XXX - optimize */
			for (sign = decpt, i = 0; (sign /= 10) != 0; i++)
				continue;
			dst[i + 1] = '\0';
			while (decpt != 0) {
				dst[i--] = '0' + decpt % 10;
				decpt /= 10;
			}
		}
	} else {
		/* standard format */
		for (i = 0, src = digits; i < decpt; i++) {
			if (*src != '\0')
				*dst++ = *src++;
			else
				*dst++ = '0';
		}
		if (*src != '\0') {
			if (src == digits)
				*dst++ = '0';	/* zero before decimal point */
			*dst++ = *lconv->decimal_point;
			while (decpt < 0) {
				*dst++ = '0';
				decpt++;
			}
			for (i = decpt; digits[i] != '\0'; i++) {
				*dst++ = digits[i];
			}
		}
		*dst = '\0';
	}
	__freedtoa(digits);
	return (buf);
}
@


1.12
log
@Make gcvt() better match printf("%g") behavior, it now passes regress.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.11 2009/10/16 12:15:03 martynas Exp $	*/
d28 1
a28 3

extern char *__dtoa(double, int, int, int *, int *, char **);
extern void  __freedtoa(char *);
@


1.11
log
@teach gdtoa & its subroutines that malloc can fail;  in which case
ecvt, fcvt, gcvt, *printf, strtof, strtod, strtold act per ieee
1003.1.  after these massive changes, remove unused files which
would not work now.  reported by Maksymilian Arciemowicz;  ok theo
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.10 2006/10/29 18:45:56 deraadt Exp $	*/
d4 2
a5 1
 * Copyright (c) 2002, 2003, 2006 Todd C. Miller <Todd.Miller@@courtesan.com>
d32 2
d42 3
a44 3
	if (ndigit == 0) {
		buf[0] = '\0';
		return (buf);
d53 2
a54 1
		 * We assume the buffer is at least ndigit long.
d56 1
a56 1
		snprintf(buf, ndigit + 1, "%s%s", sign ? "-" : "",
d66 2
a67 1
	if (decpt < 0 || decpt > ndigit) {
d76 6
a81 3
		*dst++ = *lconv->decimal_point;
		while (*src != '\0')
			*dst++ = *src++;
d113 4
@


1.10
log
@make __dtoa & strtod() thread-safe useing the same method as newer gdtoa
codebase.  tested mostly by ckuethe and myself.  __dtoa() use now requires
a call to __freedtoa()
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.9 2006/01/10 16:18:37 millert Exp $	*/
d45 2
@


1.9
log
@Return inf or nan as per printf() not Inf, Infinity or Nan (from dtoa)
Remove an extraneous check for dtoa returning Inf/Nan
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.8 2006/01/10 02:23:02 millert Exp $	*/
d29 1
d52 1
d109 1
@


1.8
log
@Use localeconv() to get the locale-specific radix char like printf does.
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.7 2006/01/10 02:08:28 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 2002, 2003 Todd C. Miller <Todd.Miller@@courtesan.com>
d45 6
a50 2
		/* Infinity or NaN, assume buffer is at least ndigit long. */
		snprintf(buf, ndigit + 1, "%s%s", sign ? "-" : "", digits);
@


1.7
log
@Nan and Infinity can be negative
Decimal point was missing for some exponential output
Only divide sign by 10 once per loop
Add a missing NUL terminator for one case
If there is no whole number portion, print a leading zero (e.g. 0.1 not .1)
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.6 2005/08/08 08:05:36 espie Exp $	*/
d23 1
d35 1
d37 1
d63 1
a63 1
		*dst++ = '.';		/* XXX - locale-specific */
d96 1
a96 1
			*dst++ = '.';		/* XXX - locale-specific */
@


1.6
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.5 2003/06/17 21:56:24 millert Exp $	*/
d43 1
a43 1
		strlcpy(buf, digits, ndigit + 1);
d52 1
a52 1
		/* exponential format */
d58 4
a61 1
		for (src = digits; *src != '\0'; )
d75 2
a76 1
				sign /= 10;
d91 3
a93 1
			*dst++ = '.';		/* XXX - locale-specific (LC_NUMERIC) */
@


1.5
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.4 2003/06/03 01:52:40 millert Exp $	*/
a21 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: gcvt.c,v 1.4 2003/06/03 01:52:40 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.4
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.3 2003/05/09 20:01:43 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 2002 Todd C. Miller <Todd.Miller@@courtesan.com>
d10 11
a20 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
 * FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d24 1
a24 1
static char rcsid[] = "$OpenBSD: gcvt.c,v 1.3 2003/05/09 20:01:43 millert Exp $";
@


1.3
log
@Pass ndigit+1 as size arg to strlcpy() since ndigit doesn't include the NUL
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.2 2003/04/02 02:43:50 millert Exp $	*/
a4 1
 * All rights reserved.
d6 3
a8 10
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d10 7
a16 10
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d20 1
a20 1
static char rcsid[] = "$OpenBSD: gcvt.c,v 1.2 2003/04/02 02:43:50 millert Exp $";
@


1.2
log
@use strlcpy(); assumes buf is at least ndigit bytes long which is as
safe as we can get.  deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: gcvt.c,v 1.1 2002/12/02 15:38:54 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: gcvt.c,v 1.1 2002/12/02 15:38:54 millert Exp $";
d54 1
a54 1
		strlcpy(buf, digits, ndigit);
@


1.1
log
@Add ecvt(), fcvt() and gcvt() for standard compliance and legacy code.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD$";
d52 5
a56 2
	if (decpt == 9999)
		return (strcpy(buf, digits));
@

