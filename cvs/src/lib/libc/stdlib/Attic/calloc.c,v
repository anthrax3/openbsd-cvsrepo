head	1.12;
access;
symbols
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.10
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2008.09.03.14.48.59;	author otto;	state dead;
branches;
next	1.11;

1.11
date	2006.04.02.18.22.14;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.08.08.05.36;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.30.18.51.49;	author pat;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.37;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.31.09.19.04;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.30.00.11.07;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.11.10.20.12.31;	author millert;	state Exp;
branches
	1.5.8.1
	1.5.10.1;
next	1.4;

1.4
date	99.11.09.19.25.33;	author millert;	state dead;
branches;
next	1.3;

1.3
date	96.08.20.17.42.33;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.33.27;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.17;	author deraadt;	state Exp;
branches;
next	;

1.5.8.1
date	2002.07.30.07.31.20;	author miod;	state Exp;
branches;
next	1.5.8.2;

1.5.8.2
date	2002.07.31.09.25.20;	author miod;	state Exp;
branches;
next	;

1.5.10.1
date	2002.07.30.14.51.20;	author jason;	state Exp;
branches;
next	1.5.10.2;

1.5.10.2
date	2002.07.31.16.40.07;	author jason;	state Exp;
branches;
next	;


desc
@@


1.12
log
@remove now obsolete calloc implementation; prompted by miod
@
text
@/*	$OpenBSD: calloc.c,v 1.11 2006/04/02 18:22:14 otto Exp $ */
/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <errno.h>

void *
calloc(size_t num, size_t size)
{
	void *p;

	if (num && SIZE_MAX / num < size) {
		errno = ENOMEM;
		return NULL;
	}
	size *= num;
	p = malloc(size);
	if (p)
		memset(p, 0, size);
	return(p);
}
@


1.11
log
@Use SIZE_MAX instead of SIZE_T_MAX, the latter is not POSIX and
remove redundant check on size. ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: calloc.c,v 1.10 2005/08/08 08:05:36 espie Exp $ */
@


1.10
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d41 1
a41 1
	if (num && size && SIZE_T_MAX / num < size) {
@


1.9
log
@ansi + de-register

ok otto deraadt
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: calloc.c,v 1.8 2003/06/02 20:18:37 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: calloc.c,v 1.7 2002/07/31 09:19:04 deraadt Exp $";
d40 1
a40 3
calloc(num, size)
	size_t num;
	register size_t size;
d42 1
a42 1
	register void *p;
@


1.7
log
@permit calloc(0, N) and calloc(N, 0) -- malloc(0) does the right thing; markus miod ok
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d31 1
a31 1
static char *rcsid = "$OpenBSD: calloc.c,v 1.6 2002/07/30 00:11:07 deraadt Exp $";
@


1.6
log
@return failure if integer overflow happens.  sigh; too people had to
help get this right.
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: calloc.c,v 1.5 1999/11/10 20:12:31 millert Exp $";
d50 1
a50 1
	if (SIZE_T_MAX / num < size) {
@


1.5
log
@calloc() needs to be separate from malloc in case a user wants to have
their own malloc() implementation.
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: calloc.c,v 1.3 1996/08/20 17:42:33 downsj Exp $";
d40 2
d50 4
@


1.5.10.1
log
@Pull in patch from current:
Fix (deraadt):
return failure if integer overflow happens.  sigh; too people had to
help get this right.
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: calloc.c,v 1.6 2002/07/30 00:11:07 deraadt Exp $";
a39 2
#include <limits.h>
#include <errno.h>
a47 4
	if (SIZE_T_MAX / num < size) {
		errno = ENOMEM;
		return NULL;
	}
@


1.5.10.2
log
@Pull in patch from current:
Fix (deraadt):
permit calloc(0, N) and calloc(N, 0) -- malloc(0) does the right thing
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: calloc.c,v 1.5.10.1 2002/07/30 14:51:20 jason Exp $";
d50 1
a50 1
	if (num && size && SIZE_T_MAX / num < size) {
@


1.5.8.1
log
@MFC (deraadt):
return failure if integer overflow happens.  sigh; too people had to
help get this right.
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: calloc.c,v 1.5 1999/11/10 20:12:31 millert Exp $";
a39 2
#include <limits.h>
#include <errno.h>
a47 4
	if (SIZE_T_MAX / num < size) {
		errno = ENOMEM;
		return NULL;
	}
@


1.5.8.2
log
@MFC (deraadt):
permit calloc(0, N) and calloc(N, 0) -- malloc(0) does the right thing
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: calloc.c,v 1.5.8.1 2002/07/30 07:31:20 miod Exp $";
d50 1
a50 1
	if (num && size && SIZE_T_MAX / num < size) {
@


1.4
log
@Move calloc() into malloc.c and only zero out the area if malloc()
didn't do so for us.  By default, malloc() zeros out the space it
allocates but the programmer cannot rely on this as it is implementation-
specific (and configurable via /etc/malloc.conf)
@
text
@d51 1
a51 1
		memset(p, '\0', size);
@


1.3
log
@Cleaner.
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: calloc.c,v 1.2 1996/08/19 08:33:27 tholo Exp $";
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d35 1
a35 1
static char *rcsid = "$OpenBSD: calloc.c,v 1.1.1.1 1995/10/18 08:42:17 deraadt Exp $";
d49 2
a50 1
	if (p = malloc(size))
@


1.1
log
@Initial revision
@
text
@d35 1
a35 2
/*static char *sccsid = "from: @@(#)calloc.c	5.6 (Berkeley) 2/23/91";*/
static char *rcsid = "$Id: calloc.c,v 1.5 1993/11/30 21:55:35 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
