head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.30
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.28
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.24
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.22
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.20
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.18
	OPENBSD_5_0:1.4.0.16
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.14
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.05.29.20.47.49;	author guenther;	state Exp;
branches;
next	1.6;
commitid	t2Ly4rpRnfcdyxYT;

1.6
date	2015.09.10.18.13.46;	author guenther;	state Exp;
branches;
next	1.5;
commitid	qU49tm8AgtP7HwZE;

1.5
date	2014.08.10.02.15.18;	author guenther;	state Exp;
branches;
next	1.4;
commitid	BYpeKMerLDGWah6S;

1.4
date	2007.09.02.15.19.17;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.10.17.37.44;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.08.08.05.36;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.24.04.43.33;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove dead support for changing BDB hash algorithm and cache of alternatives

ok natano@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: hcreate.c,v 1.6 2015/09/10 18:13:46 guenther Exp $	*/
/*	$NetBSD: hcreate.c,v 1.5 2004/04/23 02:48:12 simonb Exp $	*/

/*
 * Copyright (c) 2001 Christopher G. Demetriou
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *          This product includes software developed for the
 *          NetBSD Project.  See http://www.NetBSD.org/ for
 *          information about NetBSD.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * <<Id: LICENSE,v 1.2 2000/06/14 15:57:33 cgd Exp>>
 */

/*
 * hcreate() / hsearch() / hdestroy()
 *
 * SysV/XPG4 hash table functions.
 *
 * Implementation done based on NetBSD manual page and Solaris manual page,
 * plus my own personal experience about how they're supposed to work.
 *
 * I tried to look at Knuth (as cited by the Solaris manual page), but
 * nobody had a copy in the office, so...
 */

#include <assert.h>
#include <errno.h>
#include <stdint.h>
#include <search.h>
#include <stdlib.h>
#include <string.h>
#include <sys/queue.h>

#include <db.h>		/* for __default_hash */

#ifndef _DIAGASSERT
#define _DIAGASSERT(x)
#endif

/*
 * DO NOT MAKE THIS STRUCTURE LARGER THAN 32 BYTES (4 ptrs on 64-bit
 * ptr machine) without adjusting MAX_BUCKETS_LG2 below.
 */
struct internal_entry {
	SLIST_ENTRY(internal_entry) link;
	ENTRY ent;
};
SLIST_HEAD(internal_head, internal_entry);

#define	MIN_BUCKETS_LG2	4
#define	MIN_BUCKETS	(1 << MIN_BUCKETS_LG2)

/*
 * max * sizeof internal_entry must fit into size_t.
 * assumes internal_entry is <= 32 (2^5) bytes.
 */
#define	MAX_BUCKETS_LG2	(sizeof (size_t) * 8 - 1 - 5)
#define	MAX_BUCKETS	((size_t)1 << MAX_BUCKETS_LG2)

static struct internal_head *htable;
static size_t htablesize;

int
hcreate(size_t nel)
{
	size_t idx;
	unsigned int p2;

	/* Make sure this isn't called when a table already exists. */
	_DIAGASSERT(htable == NULL);
	if (htable != NULL) {
		errno = EINVAL;
		return 0;
	}

	/* If nel is too small, make it min sized. */
	if (nel < MIN_BUCKETS)
		nel = MIN_BUCKETS;

	/* If it's too large, cap it. */
	if (nel > MAX_BUCKETS)
		nel = MAX_BUCKETS;

	/* If it's is not a power of two in size, round up. */
	if ((nel & (nel - 1)) != 0) {
		for (p2 = 0; nel != 0; p2++)
			nel >>= 1;
		_DIAGASSERT(p2 <= MAX_BUCKETS_LG2);
		nel = 1 << p2;
	}
	
	/* Allocate the table. */
	htablesize = nel;
	htable = calloc(htablesize, sizeof htable[0]);
	if (htable == NULL) {
		errno = ENOMEM;
		return 0;
	}

	/* Initialize it. */
	for (idx = 0; idx < htablesize; idx++)
		SLIST_INIT(&htable[idx]);

	return 1;
}

void
hdestroy(void)
{
	struct internal_entry *ie;
	size_t idx;

	_DIAGASSERT(htable != NULL);
	if (htable == NULL)
		return;

	for (idx = 0; idx < htablesize; idx++) {
		while (!SLIST_EMPTY(&htable[idx])) {
			ie = SLIST_FIRST(&htable[idx]);
			SLIST_REMOVE_HEAD(&htable[idx], link);
			free(ie->ent.key);
			free(ie);
		}
	}
	free(htable);
	htable = NULL;
}

ENTRY *
hsearch(ENTRY item, ACTION action)
{
	struct internal_head *head;
	struct internal_entry *ie;
	uint32_t hashval;
	size_t len;

	_DIAGASSERT(htable != NULL);
	_DIAGASSERT(item.key != NULL);
	_DIAGASSERT(action == ENTER || action == FIND);

	len = strlen(item.key);
	hashval = __default_hash(item.key, len);

	head = &htable[hashval & (htablesize - 1)];
	ie = SLIST_FIRST(head);
	while (ie != NULL) {
		if (strcmp(ie->ent.key, item.key) == 0)
			break;
		ie = SLIST_NEXT(ie, link);
	}

	if (ie != NULL)
		return &ie->ent;
	else if (action == FIND)
		return NULL;

	ie = malloc(sizeof *ie);
	if (ie == NULL)
		return NULL;
	ie->ent.key = item.key;
	ie->ent.data = item.data;

	SLIST_INSERT_HEAD(head, ie, link);
	return &ie->ent;
}
@


1.6
log
@Pull in namespace.h when building all .c files using gcc's -include option,
so that we can provide asm labels for the memcpy/memset/__stack_smash_handler
calls that it generates ab initio.  Eliminate direct #includes of it.  Make
sure it's a dependency of all objects (unnecessary for asm, but close enough).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hcreate.c,v 1.5 2014/08/10 02:15:18 guenther Exp $	*/
d58 2
a83 3
/* Default hash function, from db/hash/hash_func.c */
extern u_int32_t (*__default_hash)(const void *, size_t);

d166 1
a166 1
	hashval = (*__default_hash)(item.key, len);
@


1.5
log
@Only need <stdint.h> and not all of <inttypes.h> here
@
text
@d1 1
a1 1
/*	$OpenBSD: hcreate.c,v 1.4 2007/09/02 15:19:17 deraadt Exp $	*/
a49 1
#include "namespace.h"
@


1.4
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: hcreate.c,v 1.3 2005/10/10 17:37:44 espie Exp $	*/
d53 1
a53 1
#include <inttypes.h>
@


1.3
log
@fix a few warnings, keep the crypt stuff for later.
okay otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hcreate.c,v 1.2 2005/08/08 08:05:36 espie Exp $	*/
d120 1
a120 1
	htable = malloc(htablesize * sizeof htable[0]);
@


1.2
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: hcreate.c,v 1.1 2004/06/24 04:43:33 millert Exp $	*/
d60 1
a60 1
#define _DIAGASSERT
@


1.1
log
@Working hcreate(3) et al from NetBSD (cgd) via ray at cyth dot net.
Now passes the regress tests.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a48 9

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 2001 Christopher G. Demetriou.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
static const char rcsid[] = "$OpenBSD$";
#endif /* not lint */
@

