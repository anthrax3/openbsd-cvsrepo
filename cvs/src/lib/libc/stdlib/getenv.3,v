head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.12
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.14
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.10
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.6
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.8
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.19.0.6
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.18.0.2
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.17.0.2
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.4
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.12.0.8
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.6
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.14
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.12
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.10
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.8
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.21
date	2014.07.11.09.24.03;	author tedu;	state Exp;
branches;
next	1.20;
commitid	74mEAuqRMKmRkAwk;

1.20
date	2014.04.21.08.46.59;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2012.09.23.16.08.04;	author jeremy;	state Exp;
branches;
next	1.17;

1.17
date	2012.06.02.00.14.16;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.27.13.40.15;	author otto;	state Exp;
branches;
next	1.15;

1.15
date	2010.07.06.20.52.00;	author naddy;	state Exp;
branches;
next	1.14;

1.14
date	2010.03.10.20.46.16;	author kili;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.03.15.52.16;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.31.19.19.31;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2005.07.26.04.20.23;	author jaredy;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.11.20.09.44;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.23.23.08.46;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.37;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.20.13.50.02;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.09.06.23.26.30;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.06.29.18.36.20;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.05.25.13.06.46;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	98.11.10.22.27.30;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.08.10.05.03.00;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@better document perils of setuid getenv and xr with issetugid
ok deraadt
@
text
@.\" Copyright (c) 1988, 1991, 1993
.\"    The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: getenv.3,v 1.20 2014/04/21 08:46:59 guenther Exp $
.\"
.Dd $Mdocdate: April 21 2014 $
.Dt GETENV 3
.Os
.Sh NAME
.Nm getenv ,
.Nm putenv ,
.Nm setenv ,
.Nm unsetenv
.Nd environment variable functions
.Sh SYNOPSIS
.In stdlib.h
.Ft char *
.Fn getenv "const char *name"
.Ft int
.Fn setenv "const char *name" "const char *value" "int overwrite"
.Ft int
.Fn putenv "char *string"
.Ft int
.Fn unsetenv "const char *name"
.Sh DESCRIPTION
These functions set, unset, and fetch environment variables from the host
.Em environment list .
.Pp
The
.Fn getenv
function obtains the current value of the environment variable
.Fa name .
If the variable
.Fa name
is not in the current environment, a null pointer is returned.
.Pp
The
.Fn setenv
function inserts or resets the environment variable
.Fa name
in the current environment list.
If the variable
.Fa name
does not exist in the list, it is inserted with the given
.Fa value .
If the variable does exist, the argument
.Fa overwrite
is tested; if
.Fa overwrite
is zero, the variable is not reset, otherwise it is reset to the given
.Fa value .
.Pp
The
.Fn putenv
function takes an argument of the form
.Ar name Ns = Ns Ar value .
The memory pointed to by
.Ar string
becomes part of the environment and must not be deallocated by the caller.
If the variable already exists, it will be overwritten.
A common source of bugs is to pass a
.Ar string
argument that is a locally scoped string buffer.
This will result in corruption of the environment after leaving
the scope in which the variable is defined.
For this reason, the
.Fn setenv
function is preferred over
.Fn putenv .
.Pp
The
.Fn unsetenv
function deletes all instances of the variable name pointed to by
.Fa name
from the list.
.Sh RETURN VALUES
.Rv -std putenv setenv unsetenv
.Pp
The
.Fn getenv
function returns a pointer to the requested value, or
.Dv NULL
if it could not be found.
If
.Fn getenv
is successful, the string returned should be considered read-only.
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er EINVAL
The
.Fn setenv
or
.Fn unsetenv
function was passed an empty
.Ar name
or a NULL pointer, or was passed a
.Ar name
containing an
.Sq =
character.
.Pp
The
.Fn putenv
function was passed a
.Ar string
that did not contain an
.Sq =
character.
.It Bq Er ENOMEM
The
.Fn setenv
or
.Fn putenv
function failed because it was unable to allocate memory for the environment.
.El
.Sh SEE ALSO
.Xr csh 1 ,
.Xr sh 1 ,
.Xr execve 2 ,
.Xr issetugid 2 ,
.Xr environ 7
.Sh STANDARDS
The
.Fn getenv
function conforms to
.St -ansiC .
The
.Fn putenv ,
.Fn setenv ,
and
.Fn unsetenv
functions conform to
.St -p1003.1-2008 .
.Sh HISTORY
The function
.Fn getenv
appeared in
.At v7
and
.Bx 3 .
The functions
.Fn setenv
and
.Fn unsetenv
appeared in
.Bx 4.3 Tahoe .
The
.Fn putenv
function appeared in
.Bx 4.3 Reno .
.Sh CAVEATS
Library code must be careful about using
.Fn getenv
to read untrusted environment variables in setuid programs.
The
.Fn issetugid
function is provided for this purpose.
@


1.20
log
@Correctly document the return value of getenv(3)

From Ben Cornett (ben (at) lantern.is)
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.19 2013/06/05 03:39:23 tedu Exp $
d34 1
a34 1
.Dd $Mdocdate: June 5 2013 $
d148 1
d179 7
@


1.19
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.18 2012/09/23 16:08:04 jeremy Exp $
d34 1
a34 1
.Dd $Mdocdate: September 23 2012 $
d105 1
a105 4
These functions
return zero if successful; otherwise the global variable
.Va errno
is set to indicate the error and \-1 is returned.
d107 5
@


1.18
log
@Make setenv(3) consistent with unsetenv(3), giving EINVAL if passed
an empty name, NULL pointer, or a name containing an '=' character.

OK millert@@, guenther@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.17 2012/06/02 00:14:16 guenther Exp $
d34 1
a34 1
.Dd $Mdocdate: June 2 2012 $
d44 1
a44 1
.Fd #include <stdlib.h>
@


1.17
log
@Update STANDARDS section for a few <stdlib.h> functions
Update SYNOPSIS for setkey() to show it's in <stdlib.h>

ok jmc@@, millert@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.16 2011/04/27 13:40:15 otto Exp $
d34 1
a34 1
.Dd $Mdocdate: April 27 2011 $
a55 8
For compatibility with differing environment conventions, the given argument
.Fa name
may be appended with an equal sign
.Dq Li \&=
followed by zero or more characters,
and
.Fa value
may be prepended with an equal sign.
d120 3
a122 1
function was passed a
a126 6
.Pp
The
.Fn unsetenv
function was passed an empty
.Ar name
or a NULL pointer.
@


1.16
log
@Tweak the description of the optional parts around =. Found this in my
tree, no idea where it came from; ok millert@@ jmc@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.15 2010/07/06 20:52:00 naddy Exp $
d34 1
a34 1
.Dd $Mdocdate: July 6 2010 $
d164 7
@


1.15
log
@Document new unsetenv() error returns.
From Nicolas Legrand <nlegrand@@ethelred.fr>; ok jmc@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.14 2010/03/10 20:46:16 kili Exp $
d34 1
a34 1
.Dd $Mdocdate: March 10 2010 $
d56 1
a56 1
For compatibility with differing environment conventions, the given arguments
d58 3
d63 1
a63 2
may be appended and prepended, respectively, with an equal sign
.Dq Li \&= .
@


1.14
log
@It's unsetenv() that doesn't like `=' in the argument, not putenv().

ok millert@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.13 2009/06/03 15:52:16 millert Exp $
d34 1
a34 1
.Dd $Mdocdate: June 3 2009 $
d131 6
@


1.13
log
@Make putenv(), setenv() and unsetenv() standards compliant.  The
standard explicitly disallows passing setenv a name with a '=' in
it but historic BSD behavior is to allow this but to ignore the '='
and anything after it.
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.12 2007/05/31 19:19:31 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: May 31 2007 $
d125 1
a125 1
.Fn putenv
@


1.12
log
@convert to new .Dd format;
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.11 2005/07/26 04:20:23 jaredy Exp $
d34 1
a34 1
.Dd $Mdocdate$
d50 2
a51 2
.Fn putenv "const char *string"
.Ft void
d90 14
a103 5
.Ar name Ns = Ns Ar value
and is equivalent to:
.Bd -literal -offset indent
setenv(name, value, 1);
.Ed
d111 1
a111 4
The functions
.Fn setenv
and
.Fn putenv
d121 18
d140 1
a140 1
The function
d144 1
a144 1
failed because they were unable to allocate memory for the environment.
@


1.11
log
@- typos, punctuation, layout, macro tweaks
- break long lines

ok jmc
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.10 2005/05/11 20:09:44 otto Exp $
d34 1
a34 1
.Dd December 11, 1993
@


1.10
log
@Update HISTORY fixing some facts, while it is not clear if the
environment stuff originates from AT&T or BSD. ok ok deraadt@@
millert@@ ian@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.9 2004/01/23 23:08:46 jmc Exp $
d65 1
a65 1
function obtains the current value of the environment variable,
d114 1
a114 1
.Bl -tag -width [ENOMEM]
@


1.9
log
@`Ns' implies `No', so `Ns No' -> `Ns'; (even simpler in adduser(8))
discussed with todd@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.8 2003/06/02 20:18:37 millert Exp $
d133 6
d144 1
a144 1
.At v7 .
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.7 2000/04/20 13:50:02 aaron Exp $
d90 1
a90 1
.Ar name Ns No = Ns Ar value
@


1.7
log
@Flesh out stdlib function man pages.
@
text
@d16 1
a16 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
d32 1
a32 1
.\"	$OpenBSD: getenv.3,v 1.6 1999/09/06 23:26:30 aaron Exp $
@


1.6
log
@succesful -> successful
@
text
@d36 1
a36 1
.\"	$OpenBSD: getenv.3,v 1.5 1999/06/29 18:36:20 aaron Exp $
d58 1
a58 2
These functions set, unset and fetch environment variables from the
host
d60 1
a60 2
For compatibility with differing environment conventions,
the given arguments
d64 1
a64 3
may be appended and prepended,
respectively,
with an equal sign
d73 1
a73 2
is not in the current environment,
a null pointer is returned.
d82 1
a82 2
does not exist in the list,
it is inserted with the given
d88 1
a88 3
is zero,
the variable is not reset, otherwise it is reset
to the given
d93 3
a95 2
function takes an argument of the form ``name=value'' and is
equivalent to:
d102 1
a102 2
function
deletes all instances of the variable name pointed to by
d112 1
a112 2
is set to indicate the error and a
\-1 is returned.
@


1.5
log
@first round of repairs on stdlib
@
text
@d36 1
a36 1
.\"	$OpenBSD: getenv.3,v 1.4 1999/05/25 13:06:46 aaron Exp $
d125 1
a125 1
is succesful, the string returned should be considered read-only.
@


1.4
log
@punctuation
@
text
@d36 1
a36 1
.\"	$OpenBSD: getenv.3,v 1.3 1998/11/10 22:27:30 espie Exp $
d63 1
a63 1
.Ar name
d65 2
a66 2
.Ar value
may be appended and prepended, 
d74 1
a74 1
.Ar name .
d76 1
a76 1
.Ar name
d83 1
a83 1
.Ar name
d86 1
a86 1
.Ar name
d89 1
a89 1
.Ar value .
d91 1
a91 1
.Ar overwrite
d93 3
a95 3
.Ar overwrite is
zero, the
variable is not reset, otherwise it is reset
d97 1
a97 1
.Ar value .
d125 1
a125 1
is succesful, the string returned should be considered read-only. 
@


1.3
log
@getenv() result is read-only, unless you're looking for trouble.
@
text
@d36 1
a36 1
.\"	$OpenBSD: getenv.3,v 1.2 1996/08/10 05:03:00 tholo Exp $
d89 1
a89 1
.Ar value.
@


1.2
log
@Minor formatting fixes from Lite2
Correct return value of putenv(3), also from Lite2
@
text
@d36 1
a36 1
.\"	$OpenBSD: getenv.3,v 1.1.1.1 1995/10/18 08:42:17 deraadt Exp $
d122 4
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
.\" Copyright (c) 1988, 1991 The Regents of the University of California.
.\" All rights reserved.
d36 1
a36 2
.\"     from: @@(#)getenv.3	6.11 (Berkeley) 6/29/91
.\"	$Id: getenv.3,v 1.6 1994/04/08 00:58:04 cgd Exp $
d38 1
a38 1
.Dd June 29, 1991
d77 1
a77 1
is not in the current environment ,
d123 1
a123 1
.Bl -tag -width Er
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
