head	1.46;
access;
symbols
	OPENBSD_6_1_BASE:1.46
	OPENBSD_6_0:1.46.0.4
	OPENBSD_6_0_BASE:1.46
	OPENBSD_5_9:1.46.0.2
	OPENBSD_5_9_BASE:1.46
	OPENBSD_5_8:1.44.0.10
	OPENBSD_5_8_BASE:1.44
	OPENBSD_5_7:1.44.0.2
	OPENBSD_5_7_BASE:1.44
	OPENBSD_5_6:1.44.0.6
	OPENBSD_5_6_BASE:1.44
	OPENBSD_5_5:1.44.0.4
	OPENBSD_5_5_BASE:1.44
	OPENBSD_5_4:1.43.0.2
	OPENBSD_5_4_BASE:1.43
	OPENBSD_5_3:1.42.0.8
	OPENBSD_5_3_BASE:1.42
	OPENBSD_5_2:1.42.0.6
	OPENBSD_5_2_BASE:1.42
	OPENBSD_5_1_BASE:1.42
	OPENBSD_5_1:1.42.0.4
	OPENBSD_5_0:1.42.0.2
	OPENBSD_5_0_BASE:1.42
	OPENBSD_4_9:1.41.0.8
	OPENBSD_4_9_BASE:1.41
	OPENBSD_4_8:1.41.0.6
	OPENBSD_4_8_BASE:1.41
	OPENBSD_4_7:1.41.0.2
	OPENBSD_4_7_BASE:1.41
	OPENBSD_4_6:1.41.0.4
	OPENBSD_4_6_BASE:1.41
	OPENBSD_4_5:1.40.0.8
	OPENBSD_4_5_BASE:1.40
	OPENBSD_4_4:1.40.0.6
	OPENBSD_4_4_BASE:1.40
	OPENBSD_4_3:1.40.0.4
	OPENBSD_4_3_BASE:1.40
	OPENBSD_4_2:1.40.0.2
	OPENBSD_4_2_BASE:1.40
	OPENBSD_4_1:1.38.0.4
	OPENBSD_4_1_BASE:1.38
	OPENBSD_4_0:1.38.0.2
	OPENBSD_4_0_BASE:1.38
	OPENBSD_3_9:1.37.0.2
	OPENBSD_3_9_BASE:1.37
	OPENBSD_3_8:1.36.0.2
	OPENBSD_3_8_BASE:1.36
	OPENBSD_3_7:1.30.0.2
	OPENBSD_3_7_BASE:1.30
	OPENBSD_3_6:1.28.0.4
	OPENBSD_3_6_BASE:1.28
	OPENBSD_3_5:1.28.0.2
	OPENBSD_3_5_BASE:1.28
	OPENBSD_3_4:1.26.0.2
	OPENBSD_3_4_BASE:1.26
	OPENBSD_3_3:1.20.0.2
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.14.0.4
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.13.0.4
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.46
date	2016.01.04.19.43.13;	author tb;	state Exp;
branches;
next	1.45;
commitid	tlE9New8zMPEA5xe;

1.45
date	2015.11.24.09.03.16;	author bentley;	state Exp;
branches;
next	1.44;
commitid	5YY2fcGul2mngm3E;

1.44
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.43;

1.43
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.42;

1.42
date	2011.03.05.22.10.11;	author guenther;	state Exp;
branches;
next	1.41;

1.41
date	2009.04.12.23.13.36;	author okan;	state Exp;
branches;
next	1.40;

1.40
date	2007.05.31.19.19.31;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2007.04.10.20.35.34;	author millert;	state Exp;
branches;
next	1.38;

1.38
date	2006.03.15.02.50.25;	author ray;	state Exp;
branches;
next	1.37;

1.37
date	2005.10.11.01.23.41;	author jaredy;	state Exp;
branches;
next	1.36;

1.36
date	2005.07.26.13.38.41;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2005.07.26.04.20.23;	author jaredy;	state Exp;
branches;
next	1.34;

1.34
date	2005.07.26.04.14.58;	author jaredy;	state Exp;
branches;
next	1.33;

1.33
date	2005.07.01.05.18.57;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2005.07.01.02.11.55;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2005.03.26.22.02.15;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2004.12.22.16.24.53;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2004.12.07.16.14.35;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2003.09.22.23.47.26;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2003.09.18.09.29.27;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2003.09.02.18.24.21;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.02.20.18.37;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.02.03.49.39;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.01.19.27.27;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2003.05.10.06.48.30;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2003.04.10.17.05.08;	author jsyn;	state Exp;
branches;
next	1.20;

1.20
date	2002.12.08.18.12.50;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.12.04.21.42.22;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2002.12.04.20.31.30;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.08.19.22.29.52;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.23.19.54.29;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.23.19.50.01;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.15.14.15.27;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.20.13.50.02;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2000.03.04.22.19.31;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.01.25.23.28.55;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	99.09.07.16.04.54;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	99.06.29.18.36.20;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.27.13.09.09;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.05.23.14.11.03;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.05.05.19.36.03;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.04.25.00.34.44;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.06.02.11.13.33;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.04.03.07.22.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.33.31;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.46
log
@Follow style(9) and drop lint /* NOTREACHED */ annotations from
the examples.

Diff from Juuso Lapinlampi < wub () partyvan ! eu >, thanks!

ok schwarze@@
@
text
@.\" Copyright (c) 1988, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: getopt.3,v 1.45 2015/11/24 09:03:16 bentley Exp $
.\"
.Dd $Mdocdate: November 24 2015 $
.Dt GETOPT 3
.Os
.Sh NAME
.Nm getopt
.Nd get option character from command line argument list
.Sh SYNOPSIS
.In unistd.h
.Vt extern char *optarg;
.Vt extern int   opterr;
.Vt extern int   optind;
.Vt extern int   optopt;
.Vt extern int   optreset;
.Ft int
.Fn getopt "int argc" "char * const *argv" "const char *optstring"
.Sh DESCRIPTION
The
.Fn getopt
function incrementally parses a command line argument list
.Fa argv
and returns the next
.Em known
option character.
An option character is
.Em known
if it has been specified in the string of accepted option characters,
.Fa optstring .
.Pp
The option string
.Fa optstring
may contain the following elements: individual characters,
characters followed by a colon, and characters followed by two colons.
A character followed by a single colon indicates that an argument
is to follow the option on the command line.
Two colons indicates that the argument is optional \- this is an
extension not covered by POSIX.
For example, an option string
.Qq x
recognizes an option
.Fl x ,
and an option string
.Qq Li x:
recognizes an option and argument
.Fl x Ar argument .
It does not matter to
.Fn getopt
if a following argument has leading whitespace; except in the case where
the argument is optional, denoted with two colons, no leading whitespace
is permitted.
.Pp
On return from
.Fn getopt ,
.Va optarg
points to an option argument, if it is anticipated,
and the variable
.Va optind
contains the index to the next
.Fa argv
argument for a subsequent call
to
.Fn getopt .
.Pp
The variables
.Va opterr
and
.Va optind
are both initialized to 1.
The
.Va optind
variable may be set to another value larger than 0 before a set of calls to
.Fn getopt
in order to skip over more or less
.Fa argv
entries.
An
.Va optind
value of 0 is reserved for compatibility with GNU
.Fn getopt .
.Pp
In order to use
.Fn getopt
to evaluate multiple sets of arguments, or to evaluate a single set of
arguments multiple times,
the variable
.Va optreset
must be set to 1 before the second and each additional set of calls to
.Fn getopt ,
and the variable
.Va optind
must be reinitialized.
.Pp
The
.Fn getopt
function returns \-1 when the argument list is exhausted.
The interpretation of options in the argument list may be cancelled
by the option
.Ql --
(double dash) which causes
.Fn getopt
to signal the end of argument processing and return \-1.
When all options have been processed (i.e., up to the first non-option
argument),
.Fn getopt
returns \-1.
.Sh RETURN VALUES
The
.Fn getopt
function returns the next known option character in
.Fa optstring .
If
.Fn getopt
encounters a character not found in
.Fa optstring
or if it detects a missing option argument,
it returns
.Sq \&?
(question mark).
If
.Fa optstring
has a leading
.Sq \&:
then a missing option argument causes
.Sq \&:
to be returned instead of
.Sq \&? .
In either case, the variable
.Va optopt
is set to the character that caused the error.
The
.Fn getopt
function returns \-1 when the argument list is exhausted.
.Sh EXAMPLES
The following code accepts the options
.Fl b
and
.Fl f Ar argument
and adjusts
.Va argc
and
.Va argv
after option argument processing has completed.
.Bd -literal -offset indent
int bflag, ch, fd;

bflag = 0;
while ((ch = getopt(argc, argv, "bf:")) != -1) {
	switch (ch) {
	case 'b':
		bflag = 1;
		break;
	case 'f':
		if ((fd = open(optarg, O_RDONLY, 0)) == -1)
			err(1, "%s", optarg);
		break;
	default:
		usage();
	}
}
argc -= optind;
argv += optind;
.Ed
.Sh DIAGNOSTICS
If the
.Fn getopt
function encounters a character not found in the string
.Fa optstring
or detects
a missing option argument, it writes an error message to
.Em stderr
and returns
.Ql \&? .
Setting
.Va opterr
to a zero will disable these error messages.
If
.Fa optstring
has a leading
.Ql \&:
then a missing option argument causes a
.Ql \&:
to be returned in addition to suppressing any error messages.
.Pp
Option arguments are allowed to begin with
.Ql - ;
this is reasonable but reduces the amount of error checking possible.
.Sh SEE ALSO
.Xr getopt 1 ,
.Xr getopt_long 3 ,
.Xr getsubopt 3
.Sh STANDARDS
The
.Fn getopt
function implements a superset of the functionality specified by
.St -p1003.1 .
.Pp
The following extensions are supported:
.Bl -bullet
.It
The
.Va optreset
variable was added to make it possible to call the
.Fn getopt
function multiple times.
.It
If the
.Va optind
variable is set to 0,
.Fn getopt
will behave as if the
.Va optreset
variable has been set.
This is for compatibility with
.Tn GNU
.Fn getopt .
New code should use
.Va optreset
instead.
.It
If the first character of
.Fa optstring
is a plus sign
.Pq Ql + ,
it will be ignored.
This is for compatibility with
.Tn GNU
.Fn getopt .
.It
If the first character of
.Fa optstring
is a dash
.Pq Ql - ,
non-options will be returned as arguments to the option character
.Ql \e1 .
This is for compatibility with
.Tn GNU
.Fn getopt .
.It
A single dash
.Pq Ql -
may be specified as a character in
.Fa optstring ,
however it should
.Em never
have an argument associated with it.
This allows
.Fn getopt
to be used with programs that expect
.Ql -
as an option flag.
This practice is wrong, and should not be used in any current development.
It is provided for backward compatibility
.Em only .
Care should be taken not to use
.Ql -
as the first character in
.Fa optstring
to avoid a semantic conflict with
.Tn GNU
.Fn getopt
semantics (see above).
By default, a single dash causes
.Fn getopt
to return \-1.
.El
.Pp
Historic
.Bx
versions of
.Fn getopt
set
.Fa optopt
to the last option character processed.
However, this conflicts with
.St -p1003.1
which stipulates that
.Fa optopt
be set to the last character that caused an error.
.Sh HISTORY
The
.Fn getopt
function appeared in
.Bx 4.3 .
.Sh BUGS
The
.Fn getopt
function was once specified to return
.Dv EOF
instead of \-1.
This was changed by
.St -p1003.2-92
to decouple
.Fn getopt
from
.In stdio.h .
.Pp
It is possible to handle digits as option letters.
This allows
.Fn getopt
to be used with programs that expect a number
.Pq Dq Li \-3
as an option.
This practice is wrong, and should not be used in any current development.
It is provided for backward compatibility
.Em only .
The following code fragment works in most cases and can handle mixed
number and letter arguments.
.Bd -literal -offset indent
int aflag = 0, bflag = 0, ch, lastch = '\e0';
int length = -1, newarg = 1, prevoptind = 1;

while ((ch = getopt(argc, argv, "0123456789ab")) != -1) {
	switch (ch) {
	case '0': case '1': case '2': case '3': case '4':
	case '5': case '6': case '7': case '8': case '9':
		if (newarg || !isdigit(lastch))
			length = 0;
		else if (length > INT_MAX / 10)
			usage();
		length = (length * 10) + (ch - '0');
		break;
	case 'a':
		aflag = 1;
		break;
	case 'b':
		bflag = 1;
		break;
	default:
		usage();
	}
	lastch = ch;
	newarg = optind != prevoptind;
	prevoptind = optind;
}
.Ed
@


1.45
log
@Don't fake a bulleted list by prefixing items with 'o'.

ok jmc@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.44 2014/01/21 03:15:45 schwarze Exp $
d30 1
a30 1
.Dd $Mdocdate: January 21 2014 $
a185 1
		/* NOTREACHED */
@


1.44
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.43 2013/06/05 03:39:23 tedu Exp $
d30 1
a30 1
.Dd $Mdocdate: June 5 2013 $
d227 2
a228 2
.Bl -tag -width "xxx"
.It Li o
d234 1
a234 1
.It Li o
d248 1
a248 1
.It Li o
d257 1
a257 1
.It Li o
d267 1
a267 1
.It Li o
@


1.43
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.42 2011/03/05 22:10:11 guenther Exp $
d30 1
a30 1
.Dd $Mdocdate: March 5 2011 $
d324 1
a324 1
.Aq Pa stdio.h .
@


1.42
log
@Fix PR 6267: recheck POSIXLY_CORRECT each time getopt_long() starts a new
argv and don't suppress the handling of leading '-' in optstring when
POSIXLY_CORRECT is set.

Based on patch from Eric Blake.
ok and manpage update from millert@@, manpage ok jmc@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.41 2009/04/12 23:13:36 okan Exp $
d30 1
a30 1
.Dd $Mdocdate: April 12 2009 $
d37 1
a37 1
.Fd #include <unistd.h>
@


1.41
log
@document that no leading whitespace is permitted between the option and
argument if the argument is deemed to be optional ('::').

feedback and ok jmc@@ and millert@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.40 2007/05/31 19:19:31 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 31 2007 $
a160 9
.Sh ENVIRONMENT
.Bl -tag -width POSIXLY_CORRECTXX
.It Ev POSIXLY_CORRECT
If set, a leading
.Sq -
in
.Ar optstring
is ignored.
.El
@


1.40
log
@convert to new .Dd format;
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.39 2007/04/10 20:35:34 millert Exp $
d30 1
a30 1
.Dd $Mdocdate$
d76 3
a78 1
if a following argument has leading whitespace.
@


1.39
log
@Support for optional args separated with whitespace was removed
some time ago--it caused too many problems.
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.38 2006/03/15 02:50:25 ray Exp $
d30 1
a30 1
.Dd December 17, 2002
@


1.38
log
@Removes extraneous variables from getopt(3).  Inspired by one of
David Hill's diffs.

ok otto
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.37 2005/10/11 01:23:41 jaredy Exp $
a301 16
.Pp
Unlike
.Tn GNU
.Fn getopt ,
.Ox
does not permute the argument vector to allow non-options to be
interspersed with options on the command line.
Programs requiring this behavior should use
.Xr getopt_long 3
instead.
Because of this (and unlike
.Tn GNU ) ,
the
.Ox
.Fn getopt
supports optional arguments separated by whitespace.
@


1.37
log
@tidy up examples
- use err() for error handling
- add lint hints
- spacing nits and missing braces

ok otto
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.36 2005/07/26 13:38:41 jmc Exp $
a178 2
extern char *optarg;
extern int optind;
@


1.36
log
@kill errant blank line;
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.35 2005/07/26 04:20:23 jaredy Exp $
d190 2
a191 5
		if ((fd = open(optarg, O_RDONLY, 0)) < 0) {
			(void)fprintf(stderr,
			    "myname: %s: %s\en", optarg, strerror(errno));
			exit(1);
		}
a192 1
	case '?':
d195 1
@


1.35
log
@- typos, punctuation, layout, macro tweaks
- break long lines

ok jmc
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.34 2005/07/26 04:14:58 jaredy Exp $
a364 1

@


1.34
log
@provide a description of the EXAMPLE; ok jmc
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.33 2005/07/01 05:18:57 jmc Exp $
d210 1
a210 1
a missing option argument it writes an error message to
@


1.33
log
@whitespace;
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.32 2005/07/01 02:11:55 millert Exp $
d169 10
a178 1
.Bd -literal -compact
@


1.32
log
@More robust example of numeric argument handling.  The old example
code would dereference NULL for mixed letter and number args.
OK deraadt@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.31 2005/03/26 22:02:15 millert Exp $
d359 1
a359 1
int length = -1, newarg = 1, prevoptind = 1; 
d369 1
a369 1
		length = (length * 10) + (ch - '0');                    
d382 1
a382 1
	prevoptind = optind;                                            
@


1.31
log
@Document that historic BSD getopt(3) set optopt for each char, not just
on error.
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.30 2004/12/22 16:24:53 jmc Exp $
d354 3
a356 1
The following code fragment works in most cases.
d358 2
a359 3
int ch;
long length;
char *p;
d361 1
a361 1
while ((ch = getopt(argc, argv, "0123456789")) != -1) {
d365 8
a372 5
		p = argv[optind - 1];
		if (p[0] == '-' && p[1] == ch && !p[2])
			length = ch - '0';
		else
			length = strtol(argv[optind] + 1, NULL, 10);
d374 5
d380 3
@


1.30
log
@tweaks from michael knudsen;
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.29 2004/12/07 16:14:35 millert Exp $
d314 13
@


1.29
log
@Document why not to set optind = 0.  Inspired by and OK jfb@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.28 2003/09/22 23:47:26 millert Exp $
d39 1
a41 1
.Vt extern int   opterr;
d64 2
a65 3
Two colons indicates that the argument is optional--this is an
extension not covered by
.Px .
d99 3
a101 1
in order to skip over more or less argv entries.
@


1.28
log
@Document the optional argument support and as well as where we differ from
POSIX and/or GNU.  deraadt@@ and jmc@@ OK
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.27 2003/09/18 09:29:27 jmc Exp $
d98 1
a98 1
variable may be set to another value before a set of calls to
d101 4
d236 14
@


1.27
log
@typos from wiz@@netbsd (including one from a PR from Quentin Garnier);
slight sync with NetBSD page;

ok millert@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.26 2003/09/02 18:24:21 jmc Exp $
d60 7
a66 3
may contain the following elements: individual characters and
characters followed by a colon to indicate an option argument
is to follow.
d154 9
d220 8
d232 20
a251 21
This is an extension to the
.St -p1003.2
specification.
.Sh HISTORY
The
.Fn getopt
function appeared in
.Bx 4.3 .
.Sh BUGS
The
.Fn getopt
function was once specified to return
.Dv EOF
instead of \-1.
This was changed by
.St -p1003.2-92
to decouple
.Fn getopt
from
.Aq Pa stdio.h .
.Pp
d273 2
a274 5
.Fn getopt ,
which assigns different meaning to an
.Fa optstring
that begins with a
.Ql - .
d278 34
d313 1
a313 1
It is also possible to handle digits as option letters.
d317 1
a317 1
.Pq Dq Li \&-\&3
@


1.26
log
@escape punctuation;
ok deraadt@@
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.25 2003/06/02 20:18:37 millert Exp $
d50 3
a52 1
and returns the next known option character.
d54 1
a54 1
.Dq known
d118 1
a118 1
to signal the end of argument processing and returns \-1.
d139 1
a139 1
.Sq \:
d141 1
a141 1
.Sq \:
d152 2
d181 1
a181 1
.Va optstring
d191 1
a191 1
.Va optstring
d205 1
a205 1
.Sh EXTENSIONS
d230 1
a230 1
.Pa <stdio.h> .
@


1.25
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.24 2003/06/02 03:49:39 millert Exp $
d132 1
a132 1
.Sq ?
d141 1
a141 1
.Sq ? .
d182 1
a182 1
.Ql ? .
@


1.24
log
@Remove some lies
@
text
@d12 1
a12 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
d28 1
a28 1
.\"	$OpenBSD: getopt.3,v 1.23 2003/06/01 19:27:27 jmc Exp $
@


1.23
log
@- section reorder
- merge COMPATIBILITY
- kill whitespace at EOL
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.22 2003/05/10 06:48:30 jmc Exp $
d34 1
a34 1
.Dd December 8, 2002
a87 4
The variable
.Va optopt
saves the last known option character returned by
.Fn getopt .
d136 2
a137 1
.Sq ? .
d146 3
@


1.22
log
@typos;
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.21 2003/04/10 17:05:08 jsyn Exp $
a176 4
.Sh SEE ALSO
.Xr getopt 1 ,
.Xr getopt_long 3 ,
.Xr getsubopt 3
d201 4
@


1.21
log
@make the second example valid; ok millert@@
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.20 2002/12/08 18:12:50 millert Exp $
d247 1
a247 1
Care should be taken to not to use
@


1.20
log
@In BUGS section, append a warning to not use '-' as the first character
of optstring to avoid a semantic conflict with GNU getopt.
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.19 2002/12/04 21:42:22 millert Exp $
d273 1
d277 2
a278 2
while ((c = getopt(argc, argv, "0123456789")) != -1) {
	switch (c) {
@


1.19
log
@Add "RETURN VALUES" sections
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.18 2002/12/04 20:31:30 millert Exp $
d34 1
a34 1
.Dd April 19, 1994
d247 11
a260 1
This is, we believe, compatible with System V.
@


1.18
log
@.Xr getopt_long
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.17 2002/08/19 22:29:52 miod Exp $
d129 23
@


1.17
log
@Suggest better types in examples; from NetBSD
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.16 2002/02/23 19:54:29 miod Exp $
d156 1
@


1.16
log
@deraadt@@ objects to the caveat remark, so remove it.
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.15 2002/02/23 19:50:01 miod Exp $
d239 1
a239 1
int length;
@


1.15
log
@Add a caveat section pointing out that people affecting the return value
of getopt() to char variables instead of int lose on arches where char is
unsigned by default.

Clean the example by not pasting parts of <unistd.h> into it, and by not
using atoi(3).
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.14 2000/12/15 14:15:27 aaron Exp $
a194 10
.Sh CAVEATS
Some software use the very bad practice of affecting the return value of
.Fn getopt
to a
.Ft char
variable.
On platforms where
.Ft char
is unsigned by default, a comparison of this variable to \-1 to detect the
end of the argument list will never succeed.
@


1.14
log
@.Sh EXAMPLE -> .Sh EXAMPLES. Move this section before SEE ALSO where it
belongs. Closes PR/1554 from bk@@rt.fm.
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.13 2000/04/20 13:50:02 aaron Exp $
a130 2
extern char *optarg;
extern int optind;
d195 10
d258 1
a258 1
			length = atoi(++p);
d260 1
a260 1
			length = atoi(argv[optind] + 1);
@


1.13
log
@Flesh out stdlib function man pages.
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.12 2000/03/04 22:19:31 aaron Exp $
d129 27
a191 27
.Sh EXAMPLE
.Bd -literal -compact
extern char *optarg;
extern int optind;
int bflag, ch, fd;

bflag = 0;
while ((ch = getopt(argc, argv, "bf:")) != -1) {
	switch (ch) {
	case 'b':
		bflag = 1;
		break;
	case 'f':
		if ((fd = open(optarg, O_RDONLY, 0)) < 0) {
			(void)fprintf(stderr,
			    "myname: %s: %s\en", optarg, strerror(errno));
			exit(1);
		}
		break;
	case '?':
	default:
		usage();
	}
}
argc -= optind;
argv += optind;
.Ed
@


1.12
log
@In Unix land we prefer "whitespace" to "white space" or "white-space". At
least, this is the impression I get from looking at a lot of Perl docs.
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.11 2000/01/25 23:28:55 deraadt Exp $
d54 1
a54 3
and returns the next
.Em known
option character.
d56 1
a56 1
.Em known
d62 1
a62 1
may contain the following elements: individual characters, and
d66 1
a66 1
.Li "\&""x""
d68 1
a68 1
.Dq Fl x ,
d70 1
a70 1
.Li "\&""x:""
d72 1
a72 1
.Dq Fl x Ar argument .
d90 1
a90 3
saves the last
.Em known
option character returned by
d93 1
a93 1
The variable
d118 1
a118 3
function
returns \-1
when the argument list is exhausted.
d154 2
a155 3
.Dq Li \- ;
this is reasonable but
reduces the amount of error checking possible.
@


1.11
log
@repair
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.10 1999/09/07 16:04:54 espie Exp $
d77 1
a77 1
if a following argument has leading white space.
@


1.10
log
@typo
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.9 1999/06/29 18:36:20 aaron Exp $
d251 1
a251 1
while ((c = getopt(argc, argv, "0123456789")) != -1)
@


1.9
log
@first round of repairs on stdlib
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.8 1999/05/27 13:09:09 aaron Exp $
d202 1
a202 1
function appeared
@


1.8
log
@getopt(3) does not return -1 when encountering unrecognized options
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.7 1999/05/23 14:11:03 aaron Exp $
d135 3
d144 2
a145 2
a missing option argument it writes an error message to 
.Em stderr 
d152 2
a153 2
.Va optstring 
has a leading 
d208 1
a208 1
.Dv EOF 
d212 1
a212 1
to decouple 
d214 1
a214 1
from 
d218 1
a218 1
.Dq Li -
d227 1
a227 1
.Dq Li -
@


1.7
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.6 1998/05/05 19:36:03 deraadt Exp $
d124 1
a124 2
when the argument list is exhausted, or a non-recognized
option is encountered.
@


1.6
log
@indent nice
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.5 1998/04/25 00:34:44 deraadt Exp $
d36 1
a36 1
.Os BSD 4.3
@


1.5
log
@indent; dima
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.4 1997/06/02 11:13:33 deraadt Exp $
d178 1
a178 1
	switch(ch) {
@


1.4
log
@incorrect description; bgrayson@@ece.utexas.edu
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.3 1997/04/03 07:22:31 deraadt Exp $
d177 1
a177 1
while ((ch = getopt(argc, argv, "bf:")) != -1)
d192 1
@


1.3
log
@an -> a; soil@@quick.net
@
text
@d32 1
a32 1
.\"	$OpenBSD: getopt.3,v 1.2 1996/08/19 08:33:31 tholo Exp $
d140 1
a140 1
.Va optarg
d142 4
a145 4
a missing option argument it writes an error message and returns
.Ql ?
to the
.Em stderr .
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d32 1
a32 1
.\"	$OpenBSD$
d216 1
a216 1
may be specified as an character in
@


1.1
log
@Initial revision
@
text
@d32 1
a32 1
.\"     @@(#)getopt.3	8.4 (Berkeley) 4/19/94
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
