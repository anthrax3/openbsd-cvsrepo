head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.8
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.6
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.10
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.12
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.4
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.8
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.6
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.18.0.4
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.2
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.20
	OPENBSD_5_0:1.16.0.18
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.16
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.14
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.10
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.12
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.8
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.9.0.12
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.10
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.8
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.6
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@# @;


1.20
date	2016.03.12.21.31.22;	author mmcc;	state Exp;
branches;
next	1.19;
commitid	KhDV1S6CZAu8cbBc;

1.19
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2012.07.08.10.25.55;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2012.07.08.10.14.35;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.31.19.19.32;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.04.19.07.23;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.04.11.21.50;	author moritz;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.30.19.50.41;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.17.21.56.24;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.01.52.40;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.01.19.27.27;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.09.15.51.21;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.20.13.50.03;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.02.25.07.53.09;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.07.04.18.59.43;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.06.29.18.36.24;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.05.10.17.56.28;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.02.27.21.56.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	98.06.21.22.13.49;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.06.15.23.59.33;	author millert;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Remove sentences in RETURN VALUES sections saying that functions with
void return types 'return no value'. This is obvious and therefore
unneccessary to mention.

We spare rewind(3)'s sentence because espie@@ pointed out that it's a
warning - the function masks a potential error.

This commit also adds a sentence to X509_free clarifying that it's
NULL-safe. This bit was discussed with doug@@.

ok martijn@@, sentiment supported by schwarze@@
@
text
@.\" $OpenBSD: tsearch.3,v 1.19 2013/06/05 03:39:23 tedu Exp $
.\"
.\" Copyright (c) 1997 Todd C. Miller <Todd.Miller@@courtesan.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt TSEARCH 3
.Os
.Sh NAME
.Nm tsearch ,
.Nm tfind ,
.Nm tdelete ,
.Nm twalk
.Nd manipulate binary search trees
.Sh SYNOPSIS
.In search.h
.Ft void *
.Fn tdelete "const void *key" "void **rootp" "int (*compar)(const void *, const void *)"
.Ft void *
.Fn tfind "const void *key" "void * const *rootp" "int (*compar)(const void *, const void *)"
.Ft void *
.Fn tsearch "const void *key" "void **rootp" "int (*compar)(const void *, const void *)"
.Ft void
.Fn twalk "const void *root" "void (*action)(const void *, VISIT, int)"
.Sh DESCRIPTION
The
.Fn tdelete ,
.Fn tfind ,
.Fn tsearch ,
and
.Fn twalk
functions manage binary search trees based on algorithms T and D
from Knuth (6.2.2).
The comparison function passed in by
the user has the same style of return values as
.Xr strcmp 3 .
.Pp
.Fn tfind
searches for the datum matched by the argument
.Fa key
in the binary tree rooted at
.Fa rootp ,
returning a pointer to the datum if it is found and
.Dv NULL
if it is not.
.Pp
.Fn tsearch
is identical to
.Fn tfind
except that if no match is found,
.Fa key
is inserted into the tree and a pointer to it is returned.
If
.Fa rootp
points to a null value a new binary search tree is created.
.Pp
.Fn tdelete
deletes a node from the specified binary search tree and returns
a pointer to the parent of the node to be deleted.
If the node to be deleted is the root of the binary search tree,
.Fa rootp
will be adjusted and an unspecified non-null pointer will be returned.
It takes the same arguments as
.Fn tfind
and
.Fn tsearch .
.Pp
.Fn twalk
walks the binary search tree rooted in
.Fa root
and calls the function
.Fa action
on each node.
.Fa action
is called with three arguments: a pointer to the current node,
a value from the enum
.Sy "typedef enum { preorder, postorder, endorder, leaf } VISIT;"
specifying the traversal type, and a node level (where level
zero is the root of the tree).
.Sh RETURN VALUES
The
.Fn tsearch
function returns
.Dv NULL
if allocation of a new node fails (usually
due to a lack of free memory).
.Pp
.Fn tdelete
returns a pointer to the parent of the deleted node or an unspecified
non-null pointer if the root node is deleted.
.Pp
.Fn tfind ,
.Fn tsearch ,
and
.Fn tdelete
return
.Dv NULL
if
.Fa rootp
is
.Dv NULL
or the datum cannot be found.
.Sh SEE ALSO
.Xr bsearch 3 ,
.Xr lsearch 3
.Sh STANDARDS
These functions conform to
.St -p1003.1-2008 .
.Sh CAVEATS
The value returned when deleting the root node was unspecified before
the
.St -p1003.1-2008
standard, so users of the
.Fn tdelete
function should be wary of relying on a specific behaviour.
@


1.19
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\" $OpenBSD: tsearch.3,v 1.18 2012/07/08 10:25:55 guenther Exp $
d17 1
a17 1
.Dd $Mdocdate: July 8 2012 $
a113 4
.Pp
The
.Fn twalk
function returns no value.
@


1.18
log
@Zap extra spaces from function pointer arguments
Pointed out by Joachim Schipper (joachim at joachimschipper.nl)
@
text
@d1 1
a1 1
.\" $OpenBSD: tsearch.3,v 1.17 2012/07/08 10:14:35 guenther Exp $
d27 1
a27 1
.Fd #include <search.h>
@


1.17
log
@Describe tdelete()'s return value correctly and update the related CAVEAT

Based on a note from Steffen Daode Nurpmeso (sdaoden at googlemail.com)
ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tsearch.3,v 1.16 2007/05/31 19:19:32 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 31 2007 $
d29 1
a29 1
.Fn tdelete "const void *key" "void **rootp" "int (*compar) (const void *, const void *)"
d31 1
a31 1
.Fn tfind "const void *key" "void * const *rootp" "int (*compar) (const void *, const void *)"
d33 1
a33 1
.Fn tsearch "const void *key" "void **rootp" "int (*compar) (const void *, const void *)"
d35 1
a35 1
.Fn twalk "const void *root" "void (*action) (const void *, VISIT, int)"
@


1.16
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: tsearch.3,v 1.15 2006/04/04 19:07:23 otto Exp $
d17 1
a17 1
.Dd $Mdocdate$
d71 3
a77 3
If the node to be deleted is the root of the binary search tree,
.Fa rootp
will be adjusted and a pointer to the new root will be returned.
d99 4
d123 1
a123 1
.St -p1003.1-2004 .
d125 4
a128 5
The
.St -p1003.1-2004
standard does not specify what value should be returned when deleting the
root node.
Since implementations vary, the user of the
d130 1
a130 1
function should not rely on a specific behaviour.
@


1.15
log
@POSIX says tdelete() returns the parent of the deleted node. Sadly the
root node doesn't have a parent, and POSIX does not say what should be
done in that case. Warn developers that different implementations
may do different things.
@
text
@d1 1
a1 1
.\" $OpenBSD: tsearch.3,v 1.14 2006/04/04 11:21:50 moritz Exp $
d17 1
a17 1
.Dd June 15, 1997
@


1.14
log
@When tdelete() is used to delete the root node, don't return a
pointer to the freed root node, but return a pointer to the new
root node. POSIX does not define, what should be returned in
that case.

Fixes Coverity CID 2528.

ok millert@@ otto@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tsearch.3,v 1.13 2006/01/30 19:50:41 jmc Exp $
d120 8
@


1.13
log
@document posixness;
fixes pr #4996, from joachim schipper;
@
text
@d1 1
a1 1
.\" $OpenBSD: tsearch.3,v 1.12 2003/06/17 21:56:24 millert Exp $
d77 1
a77 1
will be adjusted.
@


1.12
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
.\" $OpenBSD: tsearch.3,v 1.11 2003/06/03 01:52:40 millert Exp $
d117 3
@


1.11
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
d9 7
a15 9
.\" THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
.\" WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
.\" FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
.\" OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
.\" CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\"	$OpenBSD: tsearch.3,v 1.10 2003/06/01 19:27:27 jmc Exp $
@


1.10
log
@- section reorder
- merge COMPATIBILITY
- kill whitespace at EOL
@
text
@d1 1
a2 1
.\" All rights reserved.
d4 3
a6 10
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
d8 7
a14 10
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d16 1
a16 1
.\"	$OpenBSD: tsearch.3,v 1.9 2000/08/09 15:51:21 aaron Exp $
@


1.9
log
@For man pages that describe multiple functions, split the .Nm arguments
onto separate lines in the NAME section.
@
text
@d26 1
a26 1
.\"	$OpenBSD: tsearch.3,v 1.8 2000/04/20 13:50:03 aaron Exp $
a101 3
.Sh SEE ALSO
.Xr bsearch 3 ,
.Xr lsearch 3
d125 3
@


1.8
log
@Flesh out stdlib function man pages.
@
text
@d26 1
a26 1
.\"	$OpenBSD: tsearch.3,v 1.7 2000/02/25 07:53:09 deraadt Exp $
d32 4
a35 1
.Nm tsearch, tfind, tdelete, twalk
@


1.7
log
@repair prototypes; cky@@pobox.com
@
text
@d26 1
a26 1
.\"	$OpenBSD: tsearch.3,v 1.6 1999/07/04 18:59:43 aaron Exp $
d52 2
a53 1
from Knuth (6.2.2).  The comparison function passed in by
d71 2
a72 1
is inserted into the tree and a pointer to it is returned.  If
@


1.6
log
@trash some old leftover macros and replace them with -mdoc macros
@
text
@d26 1
a26 1
.\"	$OpenBSD: tsearch.3,v 1.5 1999/06/29 18:36:24 aaron Exp $
d37 1
a37 1
.Fn tdelete "const void *key" "void **rootp", "int (*compar) (const void *, const void *)"
d39 1
a39 1
.Fn tfind "const void *key" "void * const *rootp", "int (*compar) (const void *, const void *)"
d41 1
a41 1
.Fn tsearch "const void *key" "void **rootp", "int (*compar) (const void *, const void *)"
d43 1
a43 1
.Fn twalk "const void *root" "void (*compar) (const void *, VISIT, int)"
@


1.5
log
@first round of repairs on stdlib
@
text
@d26 1
a26 1
.\"	$OpenBSD: tsearch.3,v 1.4 1999/05/10 17:56:28 aaron Exp $
d87 1
a87 1
.fa root
@


1.4
log
@correct some Xr's which referred to the wrong man page sections
@
text
@d26 1
a26 1
.\"	$OpenBSD: tsearch.3,v 1.3 1999/02/27 21:56:03 deraadt Exp $
d61 2
a62 1
returning a pointer to the datum if it is found and NULL
d72 1
a72 1
points to a NULL value a new binary search tree is created.
d93 1
a93 1
a value from the enum 
d103 3
a105 1
function returns NULL if allocation of a new node fails (usually
d112 3
a114 1
return NULL if
d116 3
a118 1
is NULL or the datum cannot be found.
@


1.3
log
@make function names the correct case
@
text
@d26 1
a26 1
.\"	$OpenBSD: tsearch.3,v 1.2 1998/06/21 22:13:49 millert Exp $
a97 1
.Xr hsearch 3 ,
@


1.2
log
@Remove the advertising clause in my old license, it impedes free use
of the code as a large number of similar clauses makes it impossible
to write an ad for a product using the code...
@
text
@d26 1
a26 1
.\"	$OpenBSD: tsearch.3,v 1.1 1997/06/15 23:59:33 millert Exp $
d56 1
a56 1
.Fn Tfind
d64 1
a64 1
.Fn Tsearch
d73 1
a73 1
.Fn Tdelete
d84 1
a84 1
.Fn Twalk
d90 1
a90 1
.Fa Action
d106 1
a106 1
.Fn Tfind ,
@


1.1
log
@First cut at documentinf tsearch(3) -- needs work.
@
text
@d12 1
a12 4
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by Todd C. Miller.
.\" 4. The name of the author may not be used to endorse or promote products
d26 1
a26 1
.\"	$OpenBSD$
@

