head	1.29;
access;
symbols
	OPENBSD_6_2:1.29.0.6
	OPENBSD_6_2_BASE:1.29
	OPENBSD_6_1:1.29.0.8
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.26.0.6
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.25.0.18
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.16
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.12
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.10
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.8
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.6
	OPENBSD_5_0:1.25.0.4
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.2
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.24.0.6
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.4
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.23.0.12
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.23.0.10
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.23.0.8
	OPENBSD_4_3_BASE:1.23
	OPENBSD_4_2:1.23.0.6
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.23.0.4
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.2
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.22.0.4
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.2
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.19.0.4
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.18.0.10
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.18.0.8
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.18.0.6
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.18.0.4
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.17.0.4
	OPENBSD_2_9_BASE:1.17
	OPENBSD_2_8:1.17.0.2
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.16.0.8
	OPENBSD_2_7_BASE:1.16
	OPENBSD_2_6:1.16.0.6
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.16.0.4
	OPENBSD_2_5_BASE:1.16
	OPENBSD_2_4:1.16.0.2
	OPENBSD_2_4_BASE:1.16
	OPENBSD_2_3:1.15.0.4
	OPENBSD_2_3_BASE:1.15
	OPENBSD_2_2:1.15.0.2
	OPENBSD_2_2_BASE:1.15
	OPENBSD_2_1:1.14.0.2
	OPENBSD_2_1_BASE:1.14
	OPENBSD_2_0:1.9.0.2
	OPENBSD_2_0_BASE:1.9
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2015.11.01.03.45.29;	author guenther;	state Exp;
branches;
next	1.28;
commitid	CfNWDWdDpm7mVO8i;

1.28
date	2015.09.13.15.36.56;	author guenther;	state Exp;
branches;
next	1.27;
commitid	FxNpAvmgpSFQVav0;

1.27
date	2015.09.01.19.54.01;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	1kc6QzxBpplZkdjp;

1.26
date	2014.11.11.04.51.49;	author guenther;	state Exp;
branches;
next	1.25;
commitid	LYakkpp5DP76DW3H;

1.25
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2009.06.02.14.18.19;	author schwarze;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.31.18.28.55;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2005.08.08.08.05.35;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2005.04.01.07.44.03;	author otto;	state Exp;
branches;
next	1.20;

1.20
date	2005.01.08.19.17.39;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.31.03.27.23;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2001.09.15.13.51.00;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2000.08.24.17.03.15;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	98.05.19.06.58.51;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	97.09.22.05.11.06;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	97.04.29.08.52.31;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.04.27.22.23.31;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	97.01.02.09.21.01;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	96.12.10.07.46.37;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	96.11.14.06.17.36;	author etheisen;	state Exp;
branches;
next	1.9;

1.9
date	96.09.15.09.31.34;	author tholo;	state Exp;
branches;
next	1.8;

1.8
date	96.09.02.05.01.09;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.08.20.23.47.37;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.08.19.08.31.29;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	96.08.15.07.27.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.20.06.12.24;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.20.05.51.44;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.21.54.36;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.29
log
@delete old lint ARGSUSED comments
@
text
@/*	$OpenBSD: clnt_tcp.c,v 1.28 2015/09/13 15:36:56 guenther Exp $ */

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * clnt_tcp.c, Implements a TCP/IP based, client side RPC.
 *
 * TCP based RPC supports 'batched calls'.
 * A sequence of calls may be batched-up in a send buffer.  The rpc call
 * return immediately to the client even though the call was not necessarily
 * sent.  The batching occurs if the results' xdr routine is NULL (0) AND
 * the rpc timeout value is zero (see clnt.h, rpc).
 *
 * Clients should NOT casually batch calls that in fact return results; that is,
 * the server side should be aware that a call is batched and not produce any
 * return message.  Batched calls that produce many result messages can
 * deadlock (netlock) the client and the server....
 *
 * Now go hang yourself.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <rpc/rpc.h>
#include <sys/socket.h>
#include <netdb.h>
#include <errno.h>
#include <rpc/pmap_clnt.h>

#define MCALL_MSG_SIZE 24

static enum clnt_stat	clnttcp_call(CLIENT *, u_long, xdrproc_t, caddr_t,
			    xdrproc_t, caddr_t, struct timeval);
static void		clnttcp_abort(CLIENT *);
static void		clnttcp_geterr(CLIENT *, struct rpc_err *);
static bool_t		clnttcp_freeres(CLIENT *, xdrproc_t, caddr_t);
static bool_t           clnttcp_control(CLIENT *, u_int, void *);
static void		clnttcp_destroy(CLIENT *);

static struct clnt_ops tcp_ops = {
	clnttcp_call,
	clnttcp_abort,
	clnttcp_geterr,
	clnttcp_freeres,
	clnttcp_destroy,
	clnttcp_control
};

struct ct_data {
	int		ct_sock;
	bool_t		ct_closeit;
	struct timeval	ct_wait;
	bool_t          ct_waitset;       /* wait set by clnt_control? */
	struct sockaddr_in ct_addr; 
	struct rpc_err	ct_error;
	char		ct_mcall[MCALL_MSG_SIZE];	/* marshalled callmsg */
	u_int		ct_mpos;			/* pos after marshal */
	XDR		ct_xdrs;
};

static int	readtcp(struct ct_data *, caddr_t, int);
static int	writetcp(struct ct_data *, caddr_t, int);

/*
 * Create a client handle for a tcp/ip connection.
 * If *sockp<0, *sockp is set to a newly created TCP socket and it is
 * connected to raddr.  If *sockp non-negative then
 * raddr is ignored.  The rpc/tcp package does buffering
 * similar to stdio, so the client must pick send and receive buffer sizes,];
 * 0 => use the default.
 * If raddr->sin_port is 0, then a binder on the remote machine is
 * consulted for the right port number.
 * NB: *sockp is copied into a private area.
 * NB: It is the client's responsibility to close *sockp, unless
 *     clnttcp_create() was called with *sockp = -1 (so it created
 *     the socket), and CLNT_DESTROY() is used.
 * NB: The rpch->cl_auth is set null authentication.  Caller may wish to set this
 * something more useful.
 */
CLIENT *
clnttcp_create(struct sockaddr_in *raddr, u_long prog, u_long vers, int *sockp,
    u_int sendsz, u_int recvsz)
{
	CLIENT *h;
	struct ct_data *ct = NULL;
	struct timeval now;
	struct rpc_msg call_msg;

	h  = (CLIENT *)mem_alloc(sizeof(*h));
	if (h == NULL) {
		rpc_createerr.cf_stat = RPC_SYSTEMERROR;
		rpc_createerr.cf_error.re_errno = errno;
		goto fooy;
	}
	ct = (struct ct_data *)mem_alloc(sizeof(*ct));
	if (ct == NULL) {
		rpc_createerr.cf_stat = RPC_SYSTEMERROR;
		rpc_createerr.cf_error.re_errno = errno;
		goto fooy;
	}

	/*
	 * If no port number given ask the pmap for one
	 */
	if (raddr->sin_port == 0) {
		u_short port;
		if ((port = pmap_getport(raddr, prog, vers, IPPROTO_TCP)) == 0) {
			mem_free((caddr_t)ct, sizeof(struct ct_data));
			mem_free((caddr_t)h, sizeof(CLIENT));
			return (NULL);
		}
		raddr->sin_port = htons(port);
	}

	/*
	 * If no socket given, open one
	 */
	if (*sockp < 0) {
		*sockp = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
		(void)bindresvport(*sockp, NULL);
		if ((*sockp < 0)
		    || (connect(*sockp, (struct sockaddr *)raddr,
		    sizeof(*raddr)) < 0)) {
			rpc_createerr.cf_stat = RPC_SYSTEMERROR;
			rpc_createerr.cf_error.re_errno = errno;
			if (*sockp != -1)
				(void)close(*sockp);
			goto fooy;
		}
		ct->ct_closeit = TRUE;
	} else {
		ct->ct_closeit = FALSE;
	}

	/*
	 * Set up private data struct
	 */
	ct->ct_sock = *sockp;
	ct->ct_wait.tv_usec = 0;
	ct->ct_waitset = FALSE;
	ct->ct_addr = *raddr;

	/*
	 * Initialize call message
	 */
	(void)gettimeofday(&now, NULL);
	call_msg.rm_xid = arc4random();
	call_msg.rm_direction = CALL;
	call_msg.rm_call.cb_rpcvers = RPC_MSG_VERSION;
	call_msg.rm_call.cb_prog = prog;
	call_msg.rm_call.cb_vers = vers;

	/*
	 * pre-serialize the static part of the call msg and stash it away
	 */
	xdrmem_create(&(ct->ct_xdrs), ct->ct_mcall, MCALL_MSG_SIZE,
	    XDR_ENCODE);
	if (! xdr_callhdr(&(ct->ct_xdrs), &call_msg)) {
		if (ct->ct_closeit) {
			(void)close(*sockp);
		}
		goto fooy;
	}
	ct->ct_mpos = XDR_GETPOS(&(ct->ct_xdrs));
	XDR_DESTROY(&(ct->ct_xdrs));

	/*
	 * Create a client handle which uses xdrrec for serialization
	 * and authnone for authentication.
	 */
	xdrrec_create(&(ct->ct_xdrs), sendsz, recvsz,
	    (caddr_t)ct, (int(*)(caddr_t, caddr_t, int))readtcp,
	    (int(*)(caddr_t, caddr_t, int))writetcp);
	h->cl_ops = &tcp_ops;
	h->cl_private = (caddr_t) ct;
	h->cl_auth = authnone_create();
	if (h->cl_auth == NULL) {
		rpc_createerr.cf_stat = RPC_SYSTEMERROR;
		rpc_createerr.cf_error.re_errno = errno;
		goto fooy;
	}
	return (h);

fooy:
	/*
	 * Something goofed, free stuff and barf
	 */
	if (ct)
		mem_free((caddr_t)ct, sizeof(struct ct_data));
	if (h)
		mem_free((caddr_t)h, sizeof(CLIENT));
	return (NULL);
}
DEF_WEAK(clnttcp_create);

static enum clnt_stat
clnttcp_call(CLIENT *h, u_long proc, xdrproc_t xdr_args, caddr_t args_ptr,
    xdrproc_t xdr_results, caddr_t results_ptr, struct timeval timeout)
{
	struct ct_data *ct = (struct ct_data *) h->cl_private;
	XDR *xdrs = &(ct->ct_xdrs);
	struct rpc_msg reply_msg;
	u_long x_id;
	u_int32_t *msg_x_id = (u_int32_t *)(ct->ct_mcall);	/* yuk */
	bool_t shipnow;
	int refreshes = 2;

	if (!ct->ct_waitset) {
		ct->ct_wait = timeout;
	}

	shipnow =
	    (xdr_results == NULL && timeout.tv_sec == 0
	    && timeout.tv_usec == 0) ? FALSE : TRUE;

call_again:
	xdrs->x_op = XDR_ENCODE;
	ct->ct_error.re_status = RPC_SUCCESS;
	x_id = ntohl(--(*msg_x_id));
	if ((! XDR_PUTBYTES(xdrs, ct->ct_mcall, ct->ct_mpos)) ||
	    (! XDR_PUTLONG(xdrs, (long *)&proc)) ||
	    (! AUTH_MARSHALL(h->cl_auth, xdrs)) ||
	    (! (*xdr_args)(xdrs, args_ptr))) {
		if (ct->ct_error.re_status == RPC_SUCCESS)
			ct->ct_error.re_status = RPC_CANTENCODEARGS;
		(void)xdrrec_endofrecord(xdrs, TRUE);
		return (ct->ct_error.re_status);
	}
	if (! xdrrec_endofrecord(xdrs, shipnow))
		return (ct->ct_error.re_status = RPC_CANTSEND);
	if (! shipnow)
		return (RPC_SUCCESS);
	/*
	 * Hack to provide rpc-based message passing
	 */
	if (timeout.tv_sec == 0 && timeout.tv_usec == 0) {
		return(ct->ct_error.re_status = RPC_TIMEDOUT);
	}


	/*
	 * Keep receiving until we get a valid transaction id
	 */
	xdrs->x_op = XDR_DECODE;
	while (TRUE) {
		reply_msg.acpted_rply.ar_verf = _null_auth;
		reply_msg.acpted_rply.ar_results.where = NULL;
		reply_msg.acpted_rply.ar_results.proc = xdr_void;
		if (! xdrrec_skiprecord(xdrs))
			return (ct->ct_error.re_status);
		/* now decode and validate the response header */
		if (! xdr_replymsg(xdrs, &reply_msg)) {
			if (ct->ct_error.re_status == RPC_SUCCESS)
				continue;
			return (ct->ct_error.re_status);
		}
		if (reply_msg.rm_xid == x_id)
			break;
	}

	/*
	 * process header
	 */
	_seterr_reply(&reply_msg, &(ct->ct_error));
	if (ct->ct_error.re_status == RPC_SUCCESS) {
		if (! AUTH_VALIDATE(h->cl_auth, &reply_msg.acpted_rply.ar_verf)) {
			ct->ct_error.re_status = RPC_AUTHERROR;
			ct->ct_error.re_why = AUTH_INVALIDRESP;
		} else if (! (*xdr_results)(xdrs, results_ptr)) {
			if (ct->ct_error.re_status == RPC_SUCCESS)
				ct->ct_error.re_status = RPC_CANTDECODERES;
		}
		/* free verifier ... */
		if (reply_msg.acpted_rply.ar_verf.oa_base != NULL) {
			xdrs->x_op = XDR_FREE;
			(void)xdr_opaque_auth(xdrs, &(reply_msg.acpted_rply.ar_verf));
		}
	}  /* end successful completion */
	else {
		/* maybe our credentials need to be refreshed ... */
		if (refreshes-- && AUTH_REFRESH(h->cl_auth))
			goto call_again;
	}  /* end of unsuccessful completion */
	return (ct->ct_error.re_status);
}

static void
clnttcp_geterr(CLIENT *h, struct rpc_err *errp)
{
	struct ct_data *ct =
	    (struct ct_data *) h->cl_private;

	*errp = ct->ct_error;
}

static bool_t
clnttcp_freeres(CLIENT *cl, xdrproc_t xdr_res, caddr_t res_ptr)
{
	struct ct_data *ct = (struct ct_data *)cl->cl_private;
	XDR *xdrs = &(ct->ct_xdrs);

	xdrs->x_op = XDR_FREE;
	return ((*xdr_res)(xdrs, res_ptr));
}

static void
clnttcp_abort(CLIENT *clnt)
{
}

static bool_t
clnttcp_control(CLIENT *cl, u_int request, void *info)
{
	struct ct_data *ct = (struct ct_data *)cl->cl_private;

	switch (request) {
	case CLSET_TIMEOUT:
		ct->ct_wait = *(struct timeval *)info;
		ct->ct_waitset = TRUE;
		break;
	case CLGET_TIMEOUT:
		*(struct timeval *)info = ct->ct_wait;
		break;
	case CLGET_SERVER_ADDR:
		*(struct sockaddr_in *)info = ct->ct_addr;
		break;
	default:
		return (FALSE);
	}
	return (TRUE);
}


static void
clnttcp_destroy(CLIENT *h)
{
	struct ct_data *ct =
	    (struct ct_data *) h->cl_private;

	if (ct->ct_closeit && ct->ct_sock != -1) {
		(void)close(ct->ct_sock);
	}
	XDR_DESTROY(&(ct->ct_xdrs));
	mem_free((caddr_t)ct, sizeof(struct ct_data));
	mem_free((caddr_t)h, sizeof(CLIENT));
}

/*
 * Interface between xdr serializer and tcp connection.
 * Behaves like the system calls, read & write, but keeps some error state
 * around for the rpc level.
 */
static int
readtcp(struct ct_data *ct, caddr_t buf, int len)
{
	struct pollfd pfd[1];
	struct timeval start, after, duration, tmp;
	int delta, r, save_errno;

	if (len == 0)
		return (0);

	pfd[0].fd = ct->ct_sock;
	pfd[0].events = POLLIN;
	delta = ct->ct_wait.tv_sec * 1000 + ct->ct_wait.tv_usec / 1000;
	gettimeofday(&start, NULL);
	for (;;) {
		r = poll(pfd, 1, delta);
		save_errno = errno;

		gettimeofday(&after, NULL);
		timersub(&start, &after, &duration);
		timersub(&ct->ct_wait, &duration, &tmp);
		delta = tmp.tv_sec * 1000 + tmp.tv_usec / 1000;
		if (delta <= 0)
			r = 0;

		switch (r) {
		case 0:
			ct->ct_error.re_status = RPC_TIMEDOUT;
			return (-1);
		case 1:
			if (pfd[0].revents & POLLNVAL)
				errno = EBADF;
			else if (pfd[0].revents & POLLERR)
				errno = EIO;
			else
				break;
			/* FALLTHROUGH */
		case -1:
			if (errno == EINTR)
				continue;
			ct->ct_error.re_status = RPC_CANTRECV;
			ct->ct_error.re_errno = save_errno;
			return (-1);
		}
		break;
	}

	switch (len = read(ct->ct_sock, buf, len)) {
	case 0:
		/* premature eof */
		ct->ct_error.re_errno = ECONNRESET;
		ct->ct_error.re_status = RPC_CANTRECV;
		len = -1;  /* it's really an error */
		break;
	case -1:
		ct->ct_error.re_errno = errno;
		ct->ct_error.re_status = RPC_CANTRECV;
		break;
	}
	return (len);
}

static int
writetcp(struct ct_data *ct, caddr_t buf, int len)
{
	int i, cnt;

	for (cnt = len; cnt > 0; cnt -= i, buf += i) {
		if ((i = write(ct->ct_sock, buf, cnt)) == -1) {
			ct->ct_error.re_errno = errno;
			ct->ct_error.re_status = RPC_CANTSEND;
			return (-1);
		}
	}
	return (len);
}
@


1.28
log
@Wrap <rpc/*.h> so that calls go direct and the symbols are all weak.
Hide __xprt_register() and _authenticate(); truncate <rpc/svc_auth.h>

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_tcp.c,v 1.27 2015/09/01 19:54:01 deraadt Exp $ */
a336 1
/*ARGSUSED*/
@


1.27
log
@Remove all bogus writes to stderr.  Only explicit requests should
go that way.
ok miod beck
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_tcp.c,v 1.26 2014/11/11 04:51:49 guenther Exp $ */
d225 1
@


1.26
log
@Merge from NetBSD from 1999-03-25:"
 * don't close the socket unless it was opened by the function
 * note (in the comments) that the client is responsible for closing
  the socket if they opened it, or they didn't use CLNT_DESTROY()

  fixes a couple of unnecessary closing of already-closed sockets.
  noted by: Matthias Drochner <M.Drochner@@fz-juelich.de>"

tested by many in snaps
ok schwarze@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_tcp.c,v 1.25 2010/09/01 14:43:34 millert Exp $ */
a121 1
		(void)fprintf(stderr, "clnttcp_create: out of memory\n");
a127 1
		(void)fprintf(stderr, "clnttcp_create: out of memory\n");
@


1.25
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_tcp.c,v 1.24 2009/06/02 14:18:19 schwarze Exp $ */
d105 3
a107 1
 * NB: It is the clients responsibility to close *sockp.
d373 1
a373 1
	if (ct->ct_closeit) {
@


1.24
log
@When authnone_create fails, do not leave behind a NULL cl_auth attribute,
because that one will typically derefenced later without any checking.
Instead, flag the error condition and bail out cleanly.
useful feedback from kjell@@ and ok millert@@
@
text
@d1 2
a2 1
/*	$OpenBSD: clnt_tcp.c,v 1.23 2006/03/31 18:28:55 deraadt Exp $ */
d4 28
a31 26
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 * 
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 * 
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 * 
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 * 
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 * 
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
a35 2
 *
 * Copyright (C) 1984, Sun Microsystems, Inc.
@


1.23
log
@sprinkle a bit of ARGSUSED
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_tcp.c,v 1.22 2005/08/08 08:05:35 espie Exp $ */
d184 1
a184 1
	 * pre-serialize the staic part of the call msg and stash it away
d207 5
@


1.22
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d330 1
@


1.21
log
@ansify. ok deraadt@@ jaredy@@
@
text
@d1 1
a30 4
#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.20 2005/01/08 19:17:39 krw Exp $";
#endif /* LIBC_SCCS and not lint */
 
@


1.20
log
@Bit of KNF - replace (<type> *)0 and (<type> *)NULL with NULL. Pointed
out by mickey@@, seconded by millert@@.

ok deraadt@@.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.19 2003/12/31 03:27:23 millert Exp $";
a64 3
static int	readtcp();
static int	writetcp();

d94 3
d112 2
a113 7
clnttcp_create(raddr, prog, vers, sockp, sendsz, recvsz)
	struct sockaddr_in *raddr;
	u_long prog;
	u_long vers;
	int *sockp;
	u_int sendsz;
	u_int recvsz;
d205 2
a206 1
	    (caddr_t)ct, readtcp, writetcp);
d224 2
a225 8
clnttcp_call(h, proc, xdr_args, args_ptr, xdr_results, results_ptr, timeout)
	CLIENT *h;
	u_long proc;
	xdrproc_t xdr_args;
	caddr_t args_ptr;
	xdrproc_t xdr_results;
	caddr_t results_ptr;
	struct timeval timeout;
d315 1
a315 3
clnttcp_geterr(h, errp)
	CLIENT *h;
	struct rpc_err *errp;
d324 1
a324 4
clnttcp_freeres(cl, xdr_res, res_ptr)
	CLIENT *cl;
	xdrproc_t xdr_res;
	caddr_t res_ptr;
d339 1
a339 4
clnttcp_control(cl, request, info)
	CLIENT *cl;
	u_int request;
	void *info;
d362 1
a362 2
clnttcp_destroy(h)
	CLIENT *h;
d381 1
a381 4
readtcp(ct, buf, len)
	struct ct_data *ct;
	caddr_t buf;
	int len;
d443 1
a443 4
writetcp(ct, buf, len)
	struct ct_data *ct;
	caddr_t buf;
	int len;
@


1.19
log
@Implement svc_getreq_poll(3) and friends and use poll(2) instead of select(2)
in the libc rpc code.  The main difference between this and the previous
version is the use of a simple free list that simplifies the logic when
adding a socket to svc_pollfd.  I've also added code to pack svc_pollfd
when the free list gets too big.  The idea general idea is to keep
svc_pollfd as tightly packed as possible to make poll(2) efficient.
Tested by many people and OK deraadt@@
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.18 2001/09/15 13:51:00 deraadt Exp $";
d148 1
a148 1
			return ((CLIENT *)NULL);
d158 1
a158 1
		(void)bindresvport(*sockp, (struct sockaddr_in *)0);
d184 1
a184 1
	(void)gettimeofday(&now, (struct timezone *)0);
d224 1
a224 1
	return ((CLIENT *)NULL);
d250 1
a250 1
	    (xdr_results == (xdrproc_t)0 && timeout.tv_sec == 0
@


1.18
log
@prototype cleanup
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.17 2000/08/24 17:03:15 deraadt Exp $";
d405 3
a407 3
	fd_set *fds, readfds;
	struct timeval start, after, duration, delta, tmp;
	int r, save_errno;
d412 3
a414 11
	if (ct->ct_sock+1 > FD_SETSIZE) {
		int bytes = howmany(ct->ct_sock+1, NFDBITS) * sizeof(fd_mask);
		fds = (fd_set *)malloc(bytes);
		if (fds == NULL)
			return (-1);
		memset(fds, 0, bytes);
	} else {
		fds = &readfds;
		FD_ZERO(fds);
	}

d416 2
a417 5
	delta = ct->ct_wait;
	while (TRUE) {
		/* XXX we know the other bits are still clear */
		FD_SET(ct->ct_sock, fds);
		r = select(ct->ct_sock+1, fds, NULL, NULL, &delta);
d423 2
a424 2
		delta = tmp;
		if (delta.tv_sec < 0 || !timerisset(&delta))
a429 2
			if (fds != &readfds)
				free(fds);
d431 8
a443 2
			if (fds != &readfds)
				free(fds);
a447 2
	if (fds != &readfds)
		free(fds);
@


1.17
log
@uninit variables
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.16 1998/05/19 06:58:51 deraadt Exp $";
d68 7
a74 6
static enum clnt_stat	clnttcp_call();
static void		clnttcp_abort();
static void		clnttcp_geterr();
static bool_t		clnttcp_freeres();
static bool_t           clnttcp_control();
static void		clnttcp_destroy();
d116 1
a116 1
	register int *sockp;
d121 1
a121 1
	register struct ct_data *ct = NULL;
d229 1
a229 1
	register CLIENT *h;
d237 2
a238 2
	register struct ct_data *ct = (struct ct_data *) h->cl_private;
	register XDR *xdrs = &(ct->ct_xdrs);
d242 1
a242 1
	register bool_t shipnow;
d329 1
a329 1
	register struct ct_data *ct =
d341 2
a342 2
	register struct ct_data *ct = (struct ct_data *)cl->cl_private;
	register XDR *xdrs = &(ct->ct_xdrs);
d349 1
a349 1
clnttcp_abort()
d356 2
a357 2
	int request;
	char *info;
d359 1
a359 1
	register struct ct_data *ct = (struct ct_data *)cl->cl_private;
d383 1
a383 1
	register struct ct_data *ct =
d401 1
a401 1
	register struct ct_data *ct;
d403 1
a403 1
	register int len;
d479 1
a479 1
	register int i, cnt;
@


1.16
log
@incorrect timeout handling
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.15 1997/09/22 05:11:06 millert Exp $";
d120 1
a120 1
	register struct ct_data *ct;
@


1.15
log
@Some -Wall.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.14 1997/04/29 08:52:31 deraadt Exp $";
d432 1
a432 1
		timersub(&delta, &duration, &tmp);
@


1.14
log
@something is wrong with this level of randomness; let 2.1 go out with this "problem"
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.12 1997/01/02 09:21:01 deraadt Exp $";
d55 1
@


1.13
log
@re-randomize xid on reuse of a CLIENT *; pointed out by adam@@math.tau.ac.il
@
text
@d254 1
a254 1
	x_id = *msg_x_id = arc4random();
@


1.12
log
@use arc4random for xid generation
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.11 1996/12/10 07:46:37 deraadt Exp $";
d254 1
a254 1
	x_id = ntohl(--(*msg_x_id));
@


1.11
log
@avoid close(-1) cases
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.10 1996/11/14 06:17:36 etheisen Exp $";
a121 4
	static u_int32_t disrupt;

	if (disrupt == 0)
		disrupt = (u_int32_t)(long)raddr;
d183 1
a183 1
	call_msg.rm_xid = (++disrupt) ^ getpid() ^ now.tv_sec ^ now.tv_usec;
@


1.10
log
@Cast better for the alpha.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.9 1996/09/15 09:31:34 tholo Exp $";
d166 2
a167 1
			(void)close(*sockp);
@


1.9
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.8 1996/09/02 05:01:09 deraadt Exp $";
d125 1
a125 1
		disrupt = (u_int32_t)raddr;
@


1.8
log
@perturb xid further. confuse the world
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.7 1996/08/20 23:47:37 deraadt Exp $";
d446 1
a446 1
			if (errno == EINTR);
@


1.7
log
@memset 0; also fix for byte order botch in __svc_fdset handling; thanks to mw@@openbsd.org
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.6 1996/08/19 08:31:29 tholo Exp $";
d122 4
d186 1
a186 1
	call_msg.rm_xid = getpid() ^ now.tv_sec ^ now.tv_usec;
@


1.6
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.5 1996/08/15 07:27:47 deraadt Exp $";
d410 2
a411 1
		fds = (fd_set *)malloc(howmany(ct->ct_sock+1, NBBY));
d414 1
a414 1
		memset(fds, '\0', howmany(ct->ct_sock+1, NBBY));
@


1.5
log
@support descriptors > FD_SETSIZE and correct timeout handling
@
text
@a0 3
/*	$OpenBSD: clnt_tcp.c,v 1.4 1996/07/20 06:12:24 deraadt Exp $	*/
/*	$NetBSD: clnt_tcp.c,v 1.4 1995/02/25 03:01:41 cgd Exp $	*/

d31 2
a32 4
/*static char *sccsid = "from: @@(#)clnt_tcp.c 1.37 87/10/05 Copyr 1984 Sun Micro";*/
/*static char *sccsid = "from: @@(#)clnt_tcp.c	2.2 88/08/01 4.0 RPCSRC";*/
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.4 1996/07/20 06:12:24 deraadt Exp $";
#endif
@


1.4
log
@bcopy->memcpy & tag
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_tcp.c,v 1.4 1995/02/25 03:01:41 cgd Exp $	*/
d36 1
a36 1
static char *rcsid = "$OpenBSD: clnt_tcp.c,v 1.4 1995/02/25 03:01:41 cgd Exp $";
d407 3
a409 2
	fd_set mask;
	fd_set readfds;
d413 13
a425 2
	FD_ZERO(&mask);
	FD_SET(ct->ct_sock, &mask);
d427 13
a439 3
		readfds = mask;
		switch (select(ct->ct_sock+1, &readfds, NULL, NULL,
			       &(ct->ct_wait))) {
d442 2
a444 1

d446 1
a446 1
			if (errno == EINTR)
d449 3
a451 1
			ct->ct_error.re_errno = errno;
d456 3
a459 1

a465 1

@


1.3
log
@bogus frees; from jraynard@@freebsd.org
@
text
@d1 1
d36 1
a36 1
static char *rcsid = "$NetBSD: clnt_tcp.c,v 1.4 1995/02/25 03:01:41 cgd Exp $";
@


1.2
log
@Pull prototypes into scope
Remove graticious casts
@
text
@d221 4
a224 2
	mem_free((caddr_t)ct, sizeof(struct ct_data));
	mem_free((caddr_t)h, sizeof(CLIENT));
@


1.1
log
@Initial revision
@
text
@d59 1
d257 1
a257 1
	    (! XDR_PUTLONG(xdrs, &proc)) ||
d413 1
a413 1
		switch (select(ct->ct_sock+1, &readfds, (int*)NULL, (int*)NULL,
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
