head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.9.0.22
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.14
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.18
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.6
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.4.0.16
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.14
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.12
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.10
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.12.20.22.19.08;	author krw;	state Exp;
branches;
next	1.11;
commitid	he6NK9EzIygmfrzo;

1.11
date	2015.09.13.15.36.56;	author guenther;	state Exp;
branches;
next	1.10;
commitid	FxNpAvmgpSFQVav0;

1.10
date	2015.09.01.19.54.01;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	1kc6QzxBpplZkdjp;

1.9
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2009.06.06.03.28.34;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.08.08.05.36;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.05.08.39.10;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.01.07.44.04;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.15.13.51.01;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.32.06;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.20.06.12.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Add 'default:' cases to switch statements that gcc whines about.

ok jung@@
@
text
@/*	$OpenBSD: xdr_reference.c,v 1.11 2015/09/13 15:36:56 guenther Exp $ */

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * xdr_reference.c, Generic XDR routines implementation.
 *
 * These are the "non-trivial" xdr primitives used to serialize and de-serialize
 * "pointers".  See xdr.h for more info on the interface to xdr.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <rpc/types.h>
#include <rpc/xdr.h>

/*
 * XDR an indirect pointer
 * xdr_reference is for recursively translating a structure that is
 * referenced by a pointer inside the structure that is currently being
 * translated.  pp references a pointer to storage. If *pp is null
 * the  necessary storage is allocated.
 * size is the sizeof the referneced structure.
 * proc is the routine to handle the referenced structure.
 */
bool_t
xdr_reference(XDR *xdrs,
    caddr_t *pp,	/* the pointer to work on */
    u_int size,		/* size of the object pointed to */
    xdrproc_t proc)	/* xdr routine to handle the object */
{
	caddr_t loc = *pp;
	bool_t stat;

	if (loc == NULL)
		switch (xdrs->x_op) {
		case XDR_FREE:
			return (TRUE);

		case XDR_DECODE:
			*pp = loc = (caddr_t) calloc(size, 1);
			if (loc == NULL)
				return (FALSE);
			break;
		default:
			break;
	}

	stat = (*proc)(xdrs, loc);

	if (xdrs->x_op == XDR_FREE) {
		mem_free(loc, size);
		*pp = NULL;
	}
	return (stat);
}
DEF_WEAK(xdr_reference);


/*
 * xdr_pointer():
 *
 * XDR a pointer to a possibly recursive data structure. This
 * differs with xdr_reference in that it can serialize/deserialiaze
 * trees correctly.
 *
 *  What's sent is actually a union:
 *
 *  union object_pointer switch (boolean b) {
 *  case TRUE: object_data data;
 *  case FALSE: void nothing;
 *  }
 *
 * > objpp: Pointer to the pointer to the object.
 * > obj_size: size of the object.
 * > xdr_obj: routine to XDR an object.
 *
 */
bool_t
xdr_pointer(XDR *xdrs, char **objpp, u_int obj_size, xdrproc_t xdr_obj)
{

	bool_t more_data;

	more_data = (*objpp != NULL);
	if (! xdr_bool(xdrs,&more_data)) {
		return (FALSE);
	}
	if (! more_data) {
		*objpp = NULL;
		return (TRUE);
	}
	return (xdr_reference(xdrs,objpp,obj_size,xdr_obj));
}
DEF_WEAK(xdr_pointer);
@


1.11
log
@Wrap <rpc/*.h> so that calls go direct and the symbols are all weak.
Hide __xprt_register() and _authenticate(); truncate <rpc/svc_auth.h>

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_reference.c,v 1.10 2015/09/01 19:54:01 deraadt Exp $ */
d74 2
@


1.10
log
@Remove all bogus writes to stderr.  Only explicit requests should
go that way.
ok miod beck
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_reference.c,v 1.9 2010/09/01 14:43:34 millert Exp $ */
d85 1
d123 1
@


1.9
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_reference.c,v 1.8 2009/06/06 03:28:34 deraadt Exp $ */
d72 1
a72 3
			if (loc == NULL) {
				(void) fprintf(stderr,
				    "xdr_reference: out of memory\n");
a73 1
			}
@


1.8
log
@use calloc() and realloc() more; ok schwarze
@
text
@d1 2
a2 1
/*	$OpenBSD: xdr_reference.c,v 1.7 2005/08/08 08:05:36 espie Exp $ */
d4 28
a31 26
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 * 
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 * 
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 * 
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 * 
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 * 
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
a35 2
 *
 * Copyright (C) 1987, Sun Microsystems, Inc.
@


1.7
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d70 1
a70 1
			*pp = loc = (caddr_t) mem_alloc(size);
a75 1
			memset(loc, 0, (int)size);
@


1.6
log
@impelmentation -> implementation

yes, new typo for an old friend.
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint) 
static char *rcsid = "$OpenBSD: xdr_reference.c,v 1.5 2005/04/01 07:44:04 otto Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.5
log
@ansify. ok deraadt@@ jaredy@@
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_reference.c,v 1.4 2001/09/15 13:51:01 deraadt Exp $";
d35 1
a35 1
 * xdr_reference.c, Generic XDR routines impelmentation.
@


1.4
log
@prototype cleanup
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_reference.c,v 1.3 1996/08/19 08:32:06 tholo Exp $";
d59 4
a62 5
xdr_reference(xdrs, pp, size, proc)
	XDR *xdrs;
	caddr_t *pp;		/* the pointer to work on */
	u_int size;		/* size of the object pointed to */
	xdrproc_t proc;		/* xdr routine to handle the object */
d113 1
a113 5
xdr_pointer(xdrs,objpp,obj_size,xdr_obj)
	XDR *xdrs;
	char **objpp;
	u_int obj_size;
	xdrproc_t xdr_obj;
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_reference.c,v 1.2 1996/07/20 06:12:52 deraadt Exp $";
d60 1
a60 1
	register XDR *xdrs;
d65 2
a66 2
	register caddr_t loc = *pp;
	register bool_t stat;
d115 1
a115 1
	register XDR *xdrs;
@


1.2
log
@bcopy->memcpy & tag
@
text
@a0 3
/*	$OpenBSD: xdr_reference.c,v 1.5 1995/04/14 20:30:18 jtc Exp $	*/
/*	$NetBSD: xdr_reference.c,v 1.5 1995/04/14 20:30:18 jtc Exp $	*/

d31 2
a32 4
/*static char *sccsid = "from: @@(#)xdr_reference.c 1.11 87/08/11 SMI";*/
/*static char *sccsid = "from: @@(#)xdr_reference.c	2.1 88/07/29 4.0 RPCSRC";*/
static char *rcsid = "$OpenBSD: xdr_reference.c,v 1.5 1995/04/14 20:30:18 jtc Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
d36 1
a36 1
static char *rcsid = "$NetBSD: xdr_reference.c,v 1.5 1995/04/14 20:30:18 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
