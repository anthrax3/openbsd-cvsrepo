head	1.24;
access;
symbols
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.23.0.22
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.14
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.18
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.16
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.12
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.10
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.8
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.6
	OPENBSD_5_0:1.23.0.4
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.22.0.6
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.4
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.20.0.6
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.4
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.19.0.4
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.2
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.18.0.6
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.4
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.15.0.12
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.10
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.8
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.6
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.15.0.4
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.2
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.13.0.4
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.10.0.8
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.6
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.10.0.4
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.8.0.8
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.6
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.4
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2015.09.13.15.36.56;	author guenther;	state Exp;
branches;
next	1.23;
commitid	FxNpAvmgpSFQVav0;

1.23
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2009.06.03.03.34.00;	author schwarze;	state Exp;
branches;
next	1.21;

1.21
date	2009.06.01.23.18.29;	author schwarze;	state Exp;
branches;
next	1.20;

1.20
date	2007.09.12.08.16.02;	author moritz;	state Exp;
branches;
next	1.19;

1.19
date	2006.09.17.17.00.38;	author thib;	state Exp;
branches;
next	1.18;

1.18
date	2005.08.08.08.05.35;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2005.04.11.18.34.09;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2005.04.01.07.44.03;	author otto;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.10.05.39.07;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.29.18.53.14;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.15.13.51.00;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.18.22.37.21;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.03.06.50.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.12.30.22.26.18;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.11.22.07.40.12;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.02.10.00.51.39;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.02.09.03.35.23;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.01.21.06.07.22;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.12.19.18.38.40;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.09.15.09.31.31;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.31.26;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.20.06.12.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Wrap <rpc/*.h> so that calls go direct and the symbols are all weak.
Hide __xprt_register() and _authenticate(); truncate <rpc/svc_auth.h>

ok deraadt@@
@
text
@/*	$OpenBSD: clnt_perror.c,v 1.23 2010/09/01 14:43:34 millert Exp $ */

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <rpc/rpc.h>
#include <rpc/types.h>
#include <rpc/auth.h>
#include <rpc/clnt.h>

static char *auth_errmsg(enum auth_stat stat);
#define CLNT_PERROR_BUFLEN 256

static char buf[CLNT_PERROR_BUFLEN];

/*
 * Print reply error info
 */
char *
clnt_sperror(CLIENT *rpch, char *s)
{
	char *err, *str = buf;
	struct rpc_err e;
	int ret, len = CLNT_PERROR_BUFLEN;

	CLNT_GETERR(rpch, &e);

	ret = snprintf(str, len, "%s: %s", s, clnt_sperrno(e.re_status));
	if (ret == -1)
		ret = 0;
	else if (ret >= len)
		goto truncated;
	str += ret;
	len -= ret;

	switch (e.re_status) {
	case RPC_SUCCESS:
	case RPC_CANTENCODEARGS:
	case RPC_CANTDECODERES:
	case RPC_TIMEDOUT:
	case RPC_PROGUNAVAIL:
	case RPC_PROCUNAVAIL:
	case RPC_CANTDECODEARGS:
	case RPC_SYSTEMERROR:
	case RPC_UNKNOWNHOST:
	case RPC_UNKNOWNPROTO:
	case RPC_PMAPFAILURE:
	case RPC_PROGNOTREGISTERED:
	case RPC_FAILED:
		break;

	case RPC_CANTSEND:
	case RPC_CANTRECV:
		ret = snprintf(str, len, "; errno = %s", strerror(e.re_errno));
		if (ret == -1 || ret >= len)
			goto truncated;
		break;

	case RPC_VERSMISMATCH:
		ret = snprintf(str, len,
		    "; low version = %u, high version = %u",
		    e.re_vers.low, e.re_vers.high);
		if (ret == -1 || ret >= len)
			goto truncated;
		break;

	case RPC_AUTHERROR:
		ret = snprintf(str, len, "; why = ");
		if (ret == -1)
			ret = 0;
		else if (ret >= len)
			goto truncated;
		str += ret;
		len -= ret;
		err = auth_errmsg(e.re_why);
		if (err != NULL) {
			ret = snprintf(str, len, "%s", err);
			if (ret == -1 || ret >= len)
				goto truncated;
		} else {
			ret = snprintf(str, len,
			    "(unknown authentication error - %d)",
			    (int) e.re_why);
			if (ret == -1 || ret >= len)
				goto truncated;
		}
		break;

	case RPC_PROGVERSMISMATCH:
		ret = snprintf(str, len,
		    "; low version = %u, high version = %u",
		    e.re_vers.low, e.re_vers.high);
		if (ret == -1 || ret >= len)
			goto truncated;
		break;

	default:	/* unknown */
		ret = snprintf(str, len, "; s1 = %u, s2 = %u",
		    e.re_lb.s1, e.re_lb.s2);
		if (ret == -1 || ret >= len)
			goto truncated;
		break;
	}
	if (strlcat(buf, "\n", CLNT_PERROR_BUFLEN) >= CLNT_PERROR_BUFLEN)
		goto truncated;
	return (buf);

truncated:
	snprintf(buf + CLNT_PERROR_BUFLEN - 5, 5, "...\n");
	return (buf);
}
DEF_WEAK(clnt_sperror);

void
clnt_perror(CLIENT *rpch, char *s)
{
	(void) fprintf(stderr, "%s", clnt_sperror(rpch, s));
}
DEF_WEAK(clnt_perror);

static const char *const rpc_errlist[] = {
	"RPC: Success",				/*  0 - RPC_SUCCESS */
	"RPC: Can't encode arguments",		/*  1 - RPC_CANTENCODEARGS */
	"RPC: Can't decode result",		/*  2 - RPC_CANTDECODERES */
	"RPC: Unable to send",			/*  3 - RPC_CANTSEND */
	"RPC: Unable to receive",		/*  4 - RPC_CANTRECV */
	"RPC: Timed out",			/*  5 - RPC_TIMEDOUT */
	"RPC: Incompatible versions of RPC",	/*  6 - RPC_VERSMISMATCH */
	"RPC: Authentication error",		/*  7 - RPC_AUTHERROR */
	"RPC: Program unavailable",		/*  8 - RPC_PROGUNAVAIL */
	"RPC: Program/version mismatch",	/*  9 - RPC_PROGVERSMISMATCH */
	"RPC: Procedure unavailable",		/* 10 - RPC_PROCUNAVAIL */
	"RPC: Server can't decode arguments",	/* 11 - RPC_CANTDECODEARGS */
	"RPC: Remote system error",		/* 12 - RPC_SYSTEMERROR */
	"RPC: Unknown host",			/* 13 - RPC_UNKNOWNHOST */
	"RPC: Port mapper failure",		/* 14 - RPC_PMAPFAILURE */
	"RPC: Program not registered",		/* 15 - RPC_PROGNOTREGISTERED */
	"RPC: Failed (unspecified error)",	/* 16 - RPC_FAILED */
	"RPC: Unknown protocol"			/* 17 - RPC_UNKNOWNPROTO */
};


/*
 * This interface for use by clntrpc
 */
char *
clnt_sperrno(enum clnt_stat stat)
{
	unsigned int errnum = stat;

	if (errnum < (sizeof(rpc_errlist)/sizeof(rpc_errlist[0])))
		return (char *)rpc_errlist[errnum];

	return ("RPC: (unknown error code)");
}
DEF_WEAK(clnt_sperrno);

void
clnt_perrno(enum clnt_stat num)
{
	(void) fprintf(stderr, "%s\n", clnt_sperrno(num));
}


char *
clnt_spcreateerror(char *s)
{
	switch (rpc_createerr.cf_stat) {
	case RPC_PMAPFAILURE:
		(void) snprintf(buf, CLNT_PERROR_BUFLEN, "%s: %s - %s\n", s,
		    clnt_sperrno(rpc_createerr.cf_stat),
		    clnt_sperrno(rpc_createerr.cf_error.re_status));
		break;

	case RPC_SYSTEMERROR:
		(void) snprintf(buf, CLNT_PERROR_BUFLEN, "%s: %s - %s\n", s,
		    clnt_sperrno(rpc_createerr.cf_stat),
		    strerror(rpc_createerr.cf_error.re_errno));
		break;

	default:
		(void) snprintf(buf, CLNT_PERROR_BUFLEN, "%s: %s\n", s,
		    clnt_sperrno(rpc_createerr.cf_stat));
		break;
	}
	buf[CLNT_PERROR_BUFLEN-2] = '\n';
	buf[CLNT_PERROR_BUFLEN-1] = '\0';
	return (buf);
}
DEF_WEAK(clnt_spcreateerror);

void
clnt_pcreateerror(char *s)
{
	fprintf(stderr, "%s", clnt_spcreateerror(s));
}
DEF_WEAK(clnt_pcreateerror);

static const char *const auth_errlist[] = {
	"Authentication OK",			/* 0 - AUTH_OK */
	"Invalid client credential",		/* 1 - AUTH_BADCRED */
	"Server rejected credential",		/* 2 - AUTH_REJECTEDCRED */
	"Invalid client verifier", 		/* 3 - AUTH_BADVERF */
	"Server rejected verifier", 		/* 4 - AUTH_REJECTEDVERF */
	"Client credential too weak",		/* 5 - AUTH_TOOWEAK */
	"Invalid server verifier",		/* 6 - AUTH_INVALIDRESP */
	"Failed (unspecified error)"		/* 7 - AUTH_FAILED */
};

static char *
auth_errmsg(enum auth_stat stat)
{
	unsigned int errnum = stat;

	if (errnum < (sizeof(auth_errlist)/sizeof(auth_errlist[0])))
		return (char *)auth_errlist[errnum];

	return (NULL);
}
@


1.23
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_perror.c,v 1.22 2009/06/03 03:34:00 schwarze Exp $ */
d143 1
d150 1
d187 1
d221 1
d228 1
@


1.22
log
@Don't postpone memory allocation for the error message to the error handler:
That way, memory exhaustion simply cannot be reported because it would
require to...  allocate memory.
Instead, really use a statical buffer as it is advertised in the manual.
"looks good" millert@@
@
text
@d1 2
a2 1
/*	$OpenBSD: clnt_perror.c,v 1.21 2009/06/01 23:18:29 schwarze Exp $ */
d4 1
a4 22
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 *
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 *
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 *
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 *
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
d6 26
a31 3
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
a33 6
/*
 * clnt_perror.c
 *
 * Copyright (C) 1984, Sun Microsystems, Inc.
 *
 */
@


1.21
log
@When an RPC client program encounters ENOMEM while trying to print
an error message, rather skip the error message than dereferencing
a NULL pointer.
debugging help and ok kjell@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_perror.c,v 1.20 2007/09/12 08:16:02 moritz Exp $ */
d48 1
a48 10
static char *buf;

static char *
_buf(void)
{

	if (buf == NULL)
		buf = (char *)malloc(CLNT_PERROR_BUFLEN);
	return (buf);
}
d56 1
a56 1
	char *err, *str = _buf(), *strstart;
a59 3
	strstart = str;
	if (str == NULL)
		return (0);
d138 1
a138 1
	if (strlcat(strstart, "\n", CLNT_PERROR_BUFLEN) >= CLNT_PERROR_BUFLEN)
d140 1
a140 1
	return (strstart);
d143 2
a144 2
	snprintf(strstart + CLNT_PERROR_BUFLEN - 5, 5, "...\n");
	return (strstart);
a198 5
	char *str = _buf();

	if (str == NULL)
		return (0);

d201 1
a201 1
		(void) snprintf(str, CLNT_PERROR_BUFLEN, "%s: %s - %s\n", s,
d207 1
a207 1
		(void) snprintf(str, CLNT_PERROR_BUFLEN, "%s: %s - %s\n", s,
d213 1
a213 1
		(void) snprintf(str, CLNT_PERROR_BUFLEN, "%s: %s\n", s,
d217 3
a219 3
	str[CLNT_PERROR_BUFLEN-2] = '\n';
	str[CLNT_PERROR_BUFLEN-1] = '\0';
	return (str);
d225 1
a225 3
	char *msg = clnt_spcreateerror(s);
	if (msg)
		(void) fprintf(stderr, "%s", msg);
@


1.20
log
@Remove wrong snprintf(3) truncation checks, which can't be
triggered and are off-by-one anyways. Instead replace them
with correct checks and add all the missing cases.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_perror.c,v 1.19 2006/09/17 17:00:38 thib Exp $ */
d242 3
a244 1
	(void) fprintf(stderr, "%s", clnt_spcreateerror(s));
@


1.19
log
@dont put two '\n' at the end of the string returnd by clnt_sperror()

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_perror.c,v 1.18 2005/08/08 08:05:35 espie Exp $ */
d78 1
a78 1
		ret = len;
a80 2
	if (str > strstart + CLNT_PERROR_BUFLEN)
		goto truncated;
d100 3
a102 1
		snprintf(str, len, "; errno = %s", strerror(e.re_errno));
d106 2
a107 1
		snprintf(str, len, "; low version = %u, high version = %u",
d109 2
d118 1
a118 1
			ret = len;
a120 2
		if (str > strstart + CLNT_PERROR_BUFLEN)
			goto truncated;
d123 3
a125 1
			snprintf(str, len, "%s", err);
d127 1
a127 1
			snprintf(str, len,
d130 2
d136 2
a137 1
		snprintf(str, len, "; low version = %u, high version = %u",
d139 2
d144 1
a144 1
		snprintf(str, len, "; s1 = %u, s2 = %u",
d146 2
d150 2
a151 2
	strstart[CLNT_PERROR_BUFLEN-2] = '\0';
	strlcat(strstart, "\n", CLNT_PERROR_BUFLEN);
@


1.18
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d102 1
a102 1
		snprintf(str, len, "; errno = %s\n", strerror(e.re_errno));
d106 1
a106 1
		snprintf(str, len, "; low version = %u, high version = %u\n",
d122 1
a122 1
			snprintf(str, len, "%s\n", err);
d125 1
a125 1
			    "(unknown authentication error - %d)\n",
d131 1
a131 1
		snprintf(str, len, "; low version = %u, high version = %u\n",
d136 1
a136 1
		snprintf(str, len, "; s1 = %u, s2 = %u\n",
@


1.17
log
@more snprintf return value sloppiness; ok otto
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.16 2005/04/01 07:44:03 otto Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.16
log
@ansify. ok deraadt@@ jaredy@@
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.15 2002/09/10 05:39:07 deraadt Exp $";
d80 2
d117 2
d125 1
a125 1
			ret = snprintf(str, len, "%s\n", err);
d127 1
a127 1
			ret = snprintf(str, len,
@


1.15
log
@remove extra output of \n in clnt_perror()
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.14 2002/05/29 18:53:14 deraadt Exp $";
d54 1
a54 1
_buf()
d66 1
a66 3
clnt_sperror(rpch, s)
	CLIENT *rpch;
	char *s;
d149 1
a149 3
clnt_perror(rpch, s)
	CLIENT *rpch;
	char *s;
d180 1
a180 2
clnt_sperrno(stat)
	enum clnt_stat stat;
d191 1
a191 2
clnt_perrno(num)
	enum clnt_stat num;
d198 1
a198 2
clnt_spcreateerror(s)
	char *s;
d229 1
a229 2
clnt_pcreateerror(s)
	char *s;
d246 1
a246 2
auth_errmsg(stat)
	enum auth_stat stat;
@


1.14
log
@strlcat bounds
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.13 2001/09/15 13:51:00 deraadt Exp $";
d155 1
a155 1
	(void) fprintf(stderr, "%s\n", clnt_sperror(rpch, s));
@


1.13
log
@prototype cleanup
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.12 2001/08/18 22:37:21 deraadt Exp $";
d142 1
a142 1
	strcat(strstart, "\n");
@


1.12
log
@be more careful with snprintf; millert ok
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.11 2001/03/03 06:50:28 deraadt Exp $";
d48 1
a48 1
static char *auth_errmsg();
@


1.11
log
@plug many memory leaks
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.10 1998/12/30 22:26:18 deraadt Exp $";
d70 1
d72 1
a72 4
	char *err;
	char *str = _buf();
	char *strstart = str;
	int ret;
d74 1
d79 3
a81 2
	ret = snprintf(str, CLNT_PERROR_BUFLEN, "%s: %s", s,
	    clnt_sperrno(e.re_status));
d83 1
d105 1
a105 2
		ret = snprintf(str, CLNT_PERROR_BUFLEN - (str - strstart),
		    "; errno = %s\n", strerror(e.re_errno));
d109 1
a109 2
		ret = snprintf(str, CLNT_PERROR_BUFLEN - (str - strstart),
		    "; low version = %u, high version = %u\n",
d114 3
a116 3
		err = auth_errmsg(e.re_why);
		ret = snprintf(str, CLNT_PERROR_BUFLEN - (str - strstart),
		    "; why = ");
d118 1
d121 1
d123 1
a123 2
			ret = snprintf(str, CLNT_PERROR_BUFLEN -
			    (str - strstart), "%s\n", err);
d125 1
a125 2
			ret = snprintf(str, CLNT_PERROR_BUFLEN -
			    (str - strstart),
d132 1
a132 2
		ret = snprintf(str, CLNT_PERROR_BUFLEN - (str - strstart),
		    "; low version = %u, high version = %u\n",
d137 2
a138 2
		ret = snprintf(str, CLNT_PERROR_BUFLEN - (str - strstart),
		    "; s1 = %u, s2 = %u\n", e.re_lb.s1, e.re_lb.s2);
@


1.10
log
@append \n correctly
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.9 1998/11/22 07:40:12 deraadt Exp $";
d57 1
a57 1
	if (buf == 0)
d76 1
a76 1
	if (str == 0)
d211 1
a211 1
	if (str == 0)
@


1.9
log
@detect truncation and overflow better
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.8 1997/02/10 00:51:39 millert Exp $";
d143 2
a144 2
	strstart[CLNT_PERROR_BUFLEN-2] = '\n';
	strstart[CLNT_PERROR_BUFLEN-1] = '\0';
@


1.8
log
@Make printf's match actual type (%lu -> %u).
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.7 1997/02/09 03:35:23 deraadt Exp $";
d74 1
d80 5
a84 3
	(void) snprintf(str, CLNT_PERROR_BUFLEN, "%s: %s", s,
		clnt_sperrno(e.re_status));
	str += strlen(str);
d104 2
a105 2
		(void) snprintf(str, CLNT_PERROR_BUFLEN - (str - strstart),
			"; errno = %s\n", strerror(e.re_errno));
d109 3
a111 3
		(void) snprintf(str, CLNT_PERROR_BUFLEN - (str - strstart),
			"; low version = %u, high version = %u\n",
			e.re_vers.low, e.re_vers.high);
d116 5
a120 3
		(void) snprintf(str, CLNT_PERROR_BUFLEN - (str - strstart),
			"; why = ");
		str += strlen(str);
d122 2
a123 2
			(void) snprintf(str, CLNT_PERROR_BUFLEN -
				(str - strstart), "%s\n", err);
d125 4
a128 4
			(void) snprintf(str, CLNT_PERROR_BUFLEN -
				(str - strstart),
				"(unknown authentication error - %d)\n",
				(int) e.re_why);
d133 3
a135 3
		(void) snprintf(str, CLNT_PERROR_BUFLEN - (str - strstart),
			"; low version = %u, high version = %u\n",
			e.re_vers.low, e.re_vers.high);
d139 2
a140 3
		(void) snprintf(str, CLNT_PERROR_BUFLEN - (str - strstart),
			"; s1 = %u, s2 = %u\n",
			e.re_lb.s1, e.re_lb.s2);
d145 5
a149 1
	return (strstart) ;
@


1.7
log
@do not print extra \n
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.6 1997/01/21 06:07:22 millert Exp $";
d107 1
a107 1
			"; low version = %lu, high version = %lu\n",
d129 1
a129 1
			"; low version = %lu, high version = %lu\n",
d135 1
a135 1
			"; s1 = %lu, s2 = %lu\n",
@


1.6
log
@More sprintf -> snprintf.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.5 1996/12/19 18:38:40 deraadt Exp $";
d233 1
a233 1
	(void) fprintf(stderr, "%s\n", clnt_spcreateerror(s));
@


1.5
log
@avoid oflows, thanks also to todd
@
text
@d8 1
a8 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d20 1
a20 1
 * 
d24 1
a24 1
 * 
d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.4 1996/09/15 09:31:31 tholo Exp $";
d79 2
a80 1
	(void) sprintf(str, "%s: %s", s, clnt_sperrno(e.re_status));
d87 1
a87 1
	case RPC_TIMEDOUT:     
d106 2
a107 2
		(void) sprintf(str,
			"; low version = %lu, high version = %lu\n", 
d113 2
a114 1
		(void) sprintf(str, "; why = ");
d117 2
a118 1
			(void) sprintf(str, "%s\n", err);
d120 2
a121 1
			(void) sprintf(str,
d128 1
a128 1
		(void) sprintf(str,
d134 1
a134 1
		(void) sprintf(str,
a136 1
		str += strlen(str);
d141 1
a141 1
	return(strstart);
d149 1
a149 1
	(void) fprintf(stderr,"%s\n",clnt_sperror(rpch,s));
d193 1
a193 1
	(void) fprintf(stderr,"%s\n",clnt_sperrno(num));
d204 2
a205 1
		return(0);
d212 1
d218 1
d233 1
a233 1
	(void) fprintf(stderr,"%s\n",clnt_spcreateerror(s));
d256 1
a256 1
	return(NULL);
@


1.4
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.3 1996/08/19 08:31:26 tholo Exp $";
d49 1
d58 1
a58 1
		buf = (char *)malloc(256);
d79 1
a79 4
	(void) sprintf(str, "%s: ", s);  
	str += strlen(str);

	(void) strcpy(str, clnt_sperrno(e.re_status));  
d100 2
a101 3
		(void) sprintf(str, "; errno = %s",
		    strerror(e.re_errno)); 
		str += strlen(str);
d106 1
a106 1
			"; low version = %lu, high version = %lu", 
a107 1
		str += strlen(str);
d112 1
a112 1
		(void) sprintf(str,"; why = ");
d115 1
a115 1
			(void) sprintf(str, "%s",err);
d118 1
a118 1
				"(unknown authentication error - %d)",
a120 1
		str += strlen(str);
d124 2
a125 2
		(void) sprintf(str, 
			"; low version = %lu, high version = %lu", 
a126 1
		str += strlen(str);
d130 2
a131 2
		(void) sprintf(str, 
			"; s1 = %lu, s2 = %lu", 
d136 3
a138 2
	(void) sprintf(str, "\n");
	return(strstart) ;
a201 2
	(void) sprintf(str, "%s: ", s);
	(void) strcat(str, clnt_sperrno(rpc_createerr.cf_stat));
d204 2
a205 2
		(void) strcat(str, " - ");
		(void) strcat(str,
a207 1

d209 7
a215 2
		(void) strcat(str, " - ");
		(void) strcat(str, strerror(rpc_createerr.cf_error.re_errno));
d218 2
a219 1
	(void) strcat(str, "\n");
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.2 1996/07/20 06:12:22 deraadt Exp $";
a69 1
	void clnt_perrno();
a182 2
	int i;

@


1.2
log
@bcopy->memcpy & tag
@
text
@a0 3
/*	$OpenBSD: clnt_perror.c,v 1.7 1995/04/24 16:34:39 cgd Exp $	*/
/*	$NetBSD: clnt_perror.c,v 1.7 1995/04/24 16:34:39 cgd Exp $	*/

d31 2
a32 4
/*static char *sccsid = "from: @@(#)clnt_perror.c 1.15 87/10/07 Copyr 1984 Sun Micro";*/
/*static char *sccsid = "from: @@(#)clnt_perror.c	2.1 88/07/29 4.0 RPCSRC";*/
static char *rcsid = "$OpenBSD: clnt_perror.c,v 1.7 1995/04/24 16:34:39 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
d36 1
a36 1
static char *rcsid = "$NetBSD: clnt_perror.c,v 1.7 1995/04/24 16:34:39 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
