head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.8
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.22
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.14
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.18
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.16
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.12
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.10
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.8
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.4
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.6.0.16
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.14
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.12
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.10
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.8
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.6
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.4.0.20
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.14
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.12
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.11.01.03.45.29;	author guenther;	state Exp;
branches;
next	1.13;
commitid	CfNWDWdDpm7mVO8i;

1.13
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.09.19.40.10;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.17.16.04.24;	author blambert;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.10.14.29.53;	author tobias;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.30.19.44.52;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.08.08.05.36;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.01.07.44.04;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.17.18.34.51;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.15.13.51.01;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.09.15.09.31.44;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.32.08;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.20.06.12.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@delete old lint ARGSUSED comments
@
text
@/*	$OpenBSD: xdr_stdio.c,v 1.13 2010/09/01 14:43:34 millert Exp $ */

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * xdr_stdio.c, XDR implementation on standard i/o file.
 *
 * This set of routines implements a XDR on a stdio stream.
 * XDR_ENCODE serializes onto the stream, XDR_DECODE de-serializes
 * from the stream.
 */

#include <stdio.h>
#include <rpc/types.h>
#include <rpc/xdr.h>

static bool_t	xdrstdio_getlong(XDR *, long *);
static bool_t	xdrstdio_putlong(XDR *, long *);
static bool_t	xdrstdio_getbytes(XDR *, caddr_t, u_int);
static bool_t	xdrstdio_putbytes(XDR *, caddr_t, u_int);
static u_int	xdrstdio_getpos(XDR *);
static bool_t	xdrstdio_setpos(XDR *, u_int);
static int32_t *xdrstdio_inline(XDR *, u_int);
static void	xdrstdio_destroy(XDR *);

/*
 * Ops vector for stdio type XDR
 */
static struct xdr_ops	xdrstdio_ops = {
	xdrstdio_getlong,	/* deserialize a long int */
	xdrstdio_putlong,	/* serialize a long int */
	xdrstdio_getbytes,	/* deserialize counted bytes */
	xdrstdio_putbytes,	/* serialize counted bytes */
	xdrstdio_getpos,	/* get offset in the stream */
	xdrstdio_setpos,	/* set offset in the stream */
	xdrstdio_inline,	/* prime stream for inline macros */
	xdrstdio_destroy,	/* destroy stream */
	NULL,			/* xdrstdio_control */
};

/*
 * Initialize a stdio xdr stream.
 * Sets the xdr stream handle xdrs for use on the stream file.
 * Operation flag is set to op.
 */
void
xdrstdio_create(XDR *xdrs, FILE *file, enum xdr_op op)
{

	xdrs->x_op = op;
	xdrs->x_ops = &xdrstdio_ops;
	xdrs->x_private = (caddr_t)file;
	xdrs->x_handy = 0;
	xdrs->x_base = 0;
}

/*
 * Destroy a stdio xdr stream.
 * Cleans up the xdr stream handle xdrs previously set up by xdrstdio_create.
 */
static void
xdrstdio_destroy(XDR *xdrs)
{
	(void)fflush((FILE *)xdrs->x_private);
	/* xx should we close the file ?? */
}

static bool_t
xdrstdio_getlong(XDR *xdrs, long int *lp)
{
	u_int32_t temp;

	if (fread(&temp, sizeof(int32_t), 1, (FILE *)xdrs->x_private) != 1)
		return (FALSE);
	*lp = (long)ntohl(temp);
	return (TRUE);
}

static bool_t
xdrstdio_putlong(XDR *xdrs, long int *lp)
{
	int32_t mycopy = htonl((u_int32_t)*lp);

	if (fwrite(&mycopy, sizeof(int32_t), 1, (FILE *)xdrs->x_private) != 1)
		return (FALSE);
	return (TRUE);
}

static bool_t
xdrstdio_getbytes(XDR *xdrs, caddr_t addr, u_int len)
{

	if ((len != 0) && (fread(addr, (int)len, 1, (FILE *)xdrs->x_private) != 1))
		return (FALSE);
	return (TRUE);
}

static bool_t
xdrstdio_putbytes(XDR *xdrs, caddr_t addr, u_int len)
{

	if ((len != 0) && (fwrite(addr, (int)len, 1, (FILE *)xdrs->x_private) != 1))
		return (FALSE);
	return (TRUE);
}

static u_int
xdrstdio_getpos(XDR *xdrs)
{

	return ((u_int) ftell((FILE *)xdrs->x_private));
}

static bool_t
xdrstdio_setpos(XDR *xdrs, u_int pos)
{ 

	return ((fseek((FILE *)xdrs->x_private, (long)pos, SEEK_SET) < 0) ?
		FALSE : TRUE);
}

static int32_t *
xdrstdio_inline(XDR *xdrs, u_int len)
{

	/*
	 * Must do some work to implement this: must ensure
	 * enough data in the underlying stdio buffer,
	 * that the buffer is aligned so that we can indirect through a
	 * long *, and stuff this pointer in xdrs->x_buf.  Doing
	 * a fread or fwrite to a scratch buffer would defeat
	 * most of the gains to be had here and require storage
	 * management on this buffer, so we don't do this.
	 */
	return (NULL);
}
@


1.13
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_stdio.c,v 1.12 2008/12/09 19:40:10 otto Exp $ */
a150 1
/* ARGSUSED */
@


1.12
log
@Commit requested by marco:
Add nonblock support for xdrrecs
ok millert blambert & otto; from NetBSD. libc bump to follow soon.
@
text
@d1 2
a2 1
/*	$OpenBSD: xdr_stdio.c,v 1.11 2007/09/17 16:04:24 blambert Exp $ */
d4 28
a31 26
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 * 
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 * 
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 * 
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 * 
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 * 
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
a35 2
 *
 * Copyright (C) 1984, Sun Microsystems, Inc.
@


1.11
log
@Fix comment typos; ok ray@@, jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_stdio.c,v 1.10 2007/09/10 14:29:53 tobias Exp $ */
d41 1
a42 1
#include <stdio.h>
d65 2
a66 1
	xdrstdio_destroy	/* destroy stream */
@


1.10
log
@Proper use of fseek/fseeko macros.

OK joris@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_stdio.c,v 1.9 2005/10/30 19:44:52 kettenis Exp $ */
d58 2
a59 2
	xdrstdio_getlong,	/* deseraialize a long int */
	xdrstdio_putlong,	/* seraialize a long int */
d155 1
a155 1
	 * Must do some work to implement this: must insure
@


1.9
log
@Make xdrstdio_getlong() and xdrstdio_putlong() work on 64-bit big-endian
systems.  From NetBSD and FreeBSD.
ok deraadt@@, otto@@, "looks correct to me" fgsch@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_stdio.c,v 1.8 2005/08/08 08:05:36 espie Exp $ */
d145 1
a145 1
	return ((fseek((FILE *)xdrs->x_private, (long)pos, 0) < 0) ?
@


1.8
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d98 1
d100 1
a100 2
	if (fread((caddr_t)lp, sizeof(int32_t), 1,
	    (FILE *)xdrs->x_private) != 1)
d102 1
a102 1
	*lp = (long)ntohl((u_int32_t)*lp);
d109 1
a109 1
	long mycopy = (long)htonl((u_int32_t)*lp);
d111 1
a111 2
	if (fwrite((caddr_t)&mycopy, sizeof(int32_t), 1,
	    (FILE *)xdrs->x_private) != 1)
@


1.7
log
@ansify. ok deraadt@@ jaredy@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: xdr_stdio.c,v 1.6 2001/09/17 18:34:51 jason Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.6
log
@cast a few more long's to int32_t
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_stdio.c,v 1.5 2001/09/15 13:51:01 deraadt Exp $";
d77 1
a77 4
xdrstdio_create(xdrs, file, op)
	XDR *xdrs;
	FILE *file;
	enum xdr_op op;
d92 1
a92 2
xdrstdio_destroy(xdrs)
	XDR *xdrs;
d99 1
a99 3
xdrstdio_getlong(xdrs, lp)
	XDR *xdrs;
	long *lp;
d110 1
a110 3
xdrstdio_putlong(xdrs, lp)
	XDR *xdrs;
	long *lp;
d121 1
a121 4
xdrstdio_getbytes(xdrs, addr, len)
	XDR *xdrs;
	caddr_t addr;
	u_int len;
d130 1
a130 4
xdrstdio_putbytes(xdrs, addr, len)
	XDR *xdrs;
	caddr_t addr;
	u_int len;
d139 1
a139 2
xdrstdio_getpos(xdrs)
	XDR *xdrs;
d146 1
a146 3
xdrstdio_setpos(xdrs, pos) 
	XDR *xdrs;
	u_int pos;
d155 1
a155 3
xdrstdio_inline(xdrs, len)
	XDR *xdrs;
	u_int len;
@


1.5
log
@prototype cleanup
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_stdio.c,v 1.4 1996/09/15 09:31:44 tholo Exp $";
d111 1
a111 1
	*lp = (long)ntohl((int32_t)*lp);
d120 1
a120 1
	long mycopy = (long)htonl((int32_t)*lp);
@


1.4
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_stdio.c,v 1.3 1996/08/19 08:32:08 tholo Exp $";
d48 8
a55 8
static bool_t	xdrstdio_getlong();
static bool_t	xdrstdio_putlong();
static bool_t	xdrstdio_getbytes();
static bool_t	xdrstdio_putbytes();
static u_int	xdrstdio_getpos();
static bool_t	xdrstdio_setpos();
static int32_t *xdrstdio_inline();
static void	xdrstdio_destroy();
d78 1
a78 1
	register XDR *xdrs;
d96 1
a96 1
	register XDR *xdrs;
d105 1
a105 1
	register long *lp;
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_stdio.c,v 1.2 1996/07/20 06:12:53 deraadt Exp $";
d100 1
a100 1
};
d170 1
@


1.2
log
@bcopy->memcpy & tag
@
text
@a0 3
/*	$OpenBSD: xdr_stdio.c,v 1.3 1995/02/25 03:02:09 cgd Exp $	*/
/*	$NetBSD: xdr_stdio.c,v 1.3 1995/02/25 03:02:09 cgd Exp $	*/

d31 2
a32 4
/*static char *sccsid = "from: @@(#)xdr_stdio.c 1.16 87/08/11 Copyr 1984 Sun Micro";*/
/*static char *sccsid = "from: @@(#)xdr_stdio.c	2.1 88/07/29 4.0 RPCSRC";*/
static char *rcsid = "$OpenBSD: xdr_stdio.c,v 1.3 1995/02/25 03:02:09 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
d36 1
a36 1
static char *rcsid = "$NetBSD: xdr_stdio.c,v 1.3 1995/02/25 03:02:09 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
