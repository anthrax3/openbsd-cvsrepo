head	1.22;
access;
symbols
	OPENBSD_6_2:1.22.0.2
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.17.0.10
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.10
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.8
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.6
	OPENBSD_5_0:1.15.0.4
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.13.0.4
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.9.0.14
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.12
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2016.09.21.04.38.56;	author guenther;	state Exp;
branches;
next	1.21;
commitid	pqjnYVtACzQ9ctai;

1.21
date	2015.10.04.06.37.21;	author guenther;	state Exp;
branches;
next	1.20;
commitid	MV6GKMQ1i2Bq0mxy;

1.20
date	2015.09.13.15.36.56;	author guenther;	state Exp;
branches;
next	1.19;
commitid	FxNpAvmgpSFQVav0;

1.19
date	2015.09.11.13.34.41;	author guenther;	state Exp;
branches;
next	1.18;
commitid	OfNbslWxmI8ofyX5;

1.18
date	2015.09.01.19.54.01;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	1kc6QzxBpplZkdjp;

1.17
date	2013.11.26.20.33.08;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2013.04.17.17.40.35;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2010.07.17.19.23.10;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.09.19.40.10;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.02.02.04.05;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.08.08.05.36;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.01.07.44.04;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.24;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.15.13.51.01;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.03.06.50.28;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.05.20.23.50.02;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.05.28.21.28.56;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.08.19.08.32.06;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.07.20.06.12.51;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.21.54.41;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Delete casts to off_t and size_t that are implied by assignments
or prototypes.  Ditto for some of the char* and void* casts too.

verified no change to instructions on ILP32 (i386) and LP64 (amd64)
ok natano@@ abluhm@@ deraadt@@ millert@@
@
text
@/*	$OpenBSD: xdr_rec.c,v 1.21 2015/10/04 06:37:21 guenther Exp $ */

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * xdr_rec.c, Implements TCP/IP based XDR streams with a "record marking"
 * layer above tcp (for rpc's use).
 *
 * These routines interface XDRSTREAMS to a tcp/ip connection.
 * There is a record marking layer between the xdr stream
 * and the tcp transport level.  A record is composed on one or more
 * record fragments.  A record fragment is a thirty-two bit header followed
 * by n bytes of data, where n is contained in the header.  The header
 * is represented as a htonl(u_int32_t).  The high order bit encodes
 * whether or not the fragment is the last fragment of the record
 * (1 => fragment is last, 0 => more fragments to follow. 
 * The other 31 bits encode the byte length of the fragment.
 */

#include <sys/types.h>
#include <netinet/in.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <rpc/types.h>
#include <rpc/xdr.h>
#include <rpc/auth.h>
#include <rpc/clnt.h>
#include <rpc/rpc_msg.h>
#include <rpc/svc.h>

static bool_t	xdrrec_getlong(XDR *, long *);
static bool_t	xdrrec_putlong(XDR *, long *);
static bool_t	xdrrec_getbytes(XDR *, caddr_t, u_int);
static bool_t	xdrrec_putbytes(XDR *, caddr_t, u_int);
static u_int	xdrrec_getpos(XDR *);
static bool_t	xdrrec_setpos(XDR *, u_int);
static int32_t *xdrrec_inline(XDR *, u_int);
static void	xdrrec_destroy(XDR *);

/*
 * Not clear if these are used externally
 */
bool_t	__xdrrec_setnonblock(XDR *, int);
PROTO_STD_DEPRECATED(__xdrrec_setnonblock);

bool_t __xdrrec_getrec(XDR *xdrs, enum xprt_stat *statp, bool_t expectdata);
PROTO_NORMAL(__xdrrec_getrec);

struct ct_data;

static struct  xdr_ops xdrrec_ops = {
	xdrrec_getlong,
	xdrrec_putlong,
	xdrrec_getbytes,
	xdrrec_putbytes,
	xdrrec_getpos,
	xdrrec_setpos,
	xdrrec_inline,
	xdrrec_destroy,
	NULL, /* xdrrec_control */
};

/*
 * A record is composed of one or more record fragments.
 * A record fragment is a four-byte header followed by zero to
 * 2**32-1 bytes.  The header is treated as a long unsigned and is
 * encode/decoded to the network via htonl/ntohl.  The low order 31 bits
 * are a byte count of the fragment.  The highest order bit is a boolean:
 * 1 => this fragment is the last fragment of the record,
 * 0 => this fragment is followed by more fragment(s).
 *
 * The fragment/record machinery is not general;  it is constructed to
 * meet the needs of xdr and rpc based on tcp.
 */

#define LAST_FRAG ((u_int32_t)(1U << 31))

typedef struct rec_strm {
	caddr_t tcp_handle;
	/*
	 * out-goung bits
	 */
	int (*writeit)(caddr_t, caddr_t, int);
	caddr_t out_base;	/* output buffer (points to frag header) */
	caddr_t out_finger;	/* next output position */
	caddr_t out_boundry;	/* data cannot up to this address */
	u_int32_t *frag_header;	/* beginning of current fragment */
	bool_t frag_sent;	/* true if buffer sent in middle of record */
	/*
	 * in-coming bits
	 */
	int (*readit)(caddr_t, caddr_t, int);
	u_long in_size;	/* fixed size of the input buffer */
	caddr_t in_base;
	caddr_t in_finger;	/* location of next byte to be had */
	caddr_t in_boundry;	/* can read up to this location */
	long fbtbc;		/* fragment bytes to be consumed */
	bool_t last_frag;
	u_int sendsize;
	u_int recvsize;

	bool_t nonblock;
	bool_t in_haveheader;
	u_int32_t in_header;
	char *in_hdrp;
	int in_hdrlen;
	int in_reclen;
	int in_received;
	int in_maxrec;
} RECSTREAM;

static u_int	fix_buf_size(u_int);
static bool_t	flush_out(RECSTREAM *, bool_t);
static bool_t	fill_input_buf(RECSTREAM *);
static bool_t	get_input_bytes(RECSTREAM *, caddr_t, int);
static bool_t	set_input_fragment(RECSTREAM *);
static bool_t	skip_input_bytes(RECSTREAM *, long);
static bool_t	realloc_stream(RECSTREAM *, int);

/*
 * Create an xdr handle for xdrrec
 * xdrrec_create fills in xdrs.  Sendsize and recvsize are
 * send and recv buffer sizes (0 => use default).
 * tcp_handle is an opaque handle that is passed as the first parameter to
 * the procedures readit and writeit.  Readit and writeit are read and
 * write respectively.   They are like the system
 * calls expect that they take an opaque handle rather than an fd.
 */
void
xdrrec_create(XDR *xdrs, u_int sendsize, u_int recvsize, caddr_t tcp_handle,
	int (*readit)(caddr_t, caddr_t, int),	/* like read, but pass it a
						   tcp_handle, not sock */
	int (*writeit)(caddr_t, caddr_t, int))	/* like write, but pass it a
						   tcp_handle, not sock */
{
	RECSTREAM *rstrm =
		(RECSTREAM *)mem_alloc(sizeof(RECSTREAM));

	if (rstrm == NULL) {
		/* 
		 *  This is bad.  Should rework xdrrec_create to 
		 *  return a handle, and in this case return NULL
		 */
		return;
	}

	rstrm->sendsize = sendsize = fix_buf_size(sendsize);
	rstrm->out_base = malloc(rstrm->sendsize);
	if (rstrm->out_base == NULL) {
		mem_free(rstrm, sizeof(RECSTREAM));
		return;
	}

	rstrm->recvsize = recvsize = fix_buf_size(recvsize);
	rstrm->in_base = malloc(recvsize);
	if (rstrm->in_base == NULL) {
		mem_free(rstrm->out_base, sendsize);
		mem_free(rstrm, sizeof(RECSTREAM));
		return;
	}
	/*
	 * now the rest ...
	 */
	xdrs->x_ops = &xdrrec_ops;
	xdrs->x_private = (caddr_t)rstrm;
	rstrm->tcp_handle = tcp_handle;
	rstrm->readit = readit;
	rstrm->writeit = writeit;
	rstrm->out_finger = rstrm->out_boundry = rstrm->out_base;
	rstrm->frag_header = (u_int32_t *)rstrm->out_base;
	rstrm->out_finger += sizeof(u_int32_t);
	rstrm->out_boundry += sendsize;
	rstrm->frag_sent = FALSE;
	rstrm->in_size = recvsize;
	rstrm->in_boundry = rstrm->in_base;
	rstrm->in_finger = (rstrm->in_boundry += recvsize);
	rstrm->fbtbc = 0;
	rstrm->last_frag = TRUE;
	rstrm->in_haveheader = FALSE;
	rstrm->in_hdrlen = 0;
	rstrm->in_hdrp = (char *)(void *)&rstrm->in_header;
	rstrm->nonblock = FALSE;
	rstrm->in_reclen = 0;
	rstrm->in_received = 0;
}
DEF_WEAK(xdrrec_create);


/*
 * The reoutines defined below are the xdr ops which will go into the
 * xdr handle filled in by xdrrec_create.
 */

static bool_t
xdrrec_getlong(XDR *xdrs, long int *lp)
{
	RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	int32_t *buflp = (int32_t *)(rstrm->in_finger);
	int32_t mylong;

	/* first try the inline, fast case */
	if ((rstrm->fbtbc >= sizeof(int32_t)) &&
		(((long)rstrm->in_boundry - (long)buflp) >= sizeof(int32_t))) {
		*lp = (long)ntohl((u_int32_t)(*buflp));
		rstrm->fbtbc -= sizeof(int32_t);
		rstrm->in_finger += sizeof(int32_t);
	} else {
		if (! xdrrec_getbytes(xdrs, (caddr_t)(void *)&mylong,
		    sizeof(int32_t)))
			return (FALSE);
		*lp = (long)ntohl((u_int32_t)mylong);
	}
	return (TRUE);
}

static bool_t
xdrrec_putlong(XDR *xdrs, long int *lp)
{
	RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	int32_t *dest_lp = ((int32_t *)(rstrm->out_finger));

	if ((rstrm->out_finger += sizeof(int32_t)) > rstrm->out_boundry) {
		/*
		 * this case should almost never happen so the code is
		 * inefficient
		 */
		rstrm->out_finger -= sizeof(int32_t);
		rstrm->frag_sent = TRUE;
		if (! flush_out(rstrm, FALSE))
			return (FALSE);
		dest_lp = ((int32_t *)(void *)(rstrm->out_finger));
		rstrm->out_finger += sizeof(int32_t);
	}
	*dest_lp = (int32_t)htonl((u_int32_t)(*lp));
	return (TRUE);
}

static bool_t  /* must manage buffers, fragments, and records */
xdrrec_getbytes(XDR *xdrs, caddr_t addr, u_int len)
{
	RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	int current;

	while (len > 0) {
		current = rstrm->fbtbc;
		if (current == 0) {
			if (rstrm->last_frag)
				return (FALSE);
			if (! set_input_fragment(rstrm))
				return (FALSE);
			continue;
		}
		current = (len < current) ? len : current;
		if (! get_input_bytes(rstrm, addr, current))
			return (FALSE);
		addr += current; 
		rstrm->fbtbc -= current;
		len -= current;
	}
	return (TRUE);
}

static bool_t
xdrrec_putbytes(XDR *xdrs, caddr_t addr, u_int len)
{
	RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	long current;

	while (len > 0) {
		current = (u_long)rstrm->out_boundry -
		    (u_long)rstrm->out_finger;
		current = (len < current) ? len : current;
		memcpy(rstrm->out_finger, addr, current);
		rstrm->out_finger += current;
		addr += current;
		len -= current;
		if (rstrm->out_finger == rstrm->out_boundry) {
			rstrm->frag_sent = TRUE;
			if (! flush_out(rstrm, FALSE))
				return (FALSE);
		}
	}
	return (TRUE);
}

static u_int
xdrrec_getpos(XDR *xdrs)
{
	RECSTREAM *rstrm = (RECSTREAM *)xdrs->x_private;
	off_t pos;

	pos = lseek((int)(long)rstrm->tcp_handle, 0, SEEK_CUR);
	if (pos != -1)
		switch (xdrs->x_op) {

		case XDR_ENCODE:
			pos += rstrm->out_finger - rstrm->out_base;
			break;

		case XDR_DECODE:
			pos -= rstrm->in_boundry - rstrm->in_finger;
			break;

		default:
			pos = -1;
			break;
		}
	return ((u_int) pos);
}

static bool_t
xdrrec_setpos(XDR *xdrs, u_int pos)
{
	RECSTREAM *rstrm = (RECSTREAM *)xdrs->x_private;
	u_int currpos = xdrrec_getpos(xdrs);
	int delta = currpos - pos;
	caddr_t newpos;

	if ((int)currpos != -1)
		switch (xdrs->x_op) {

		case XDR_ENCODE:
			newpos = rstrm->out_finger - delta;
			if ((newpos > (caddr_t)(rstrm->frag_header)) &&
				(newpos < rstrm->out_boundry)) {
				rstrm->out_finger = newpos;
				return (TRUE);
			}
			break;

		case XDR_DECODE:
			newpos = rstrm->in_finger - delta;
			if ((delta < (int)(rstrm->fbtbc)) &&
				(newpos <= rstrm->in_boundry) &&
				(newpos >= rstrm->in_base)) {
				rstrm->in_finger = newpos;
				rstrm->fbtbc -= delta;
				return (TRUE);
			}
			break;

		case XDR_FREE:
			break;
		}
	return (FALSE);
}

static int32_t *
xdrrec_inline(XDR *xdrs, u_int len)
{
	RECSTREAM *rstrm = (RECSTREAM *)xdrs->x_private;
	int32_t *buf = NULL;

	switch (xdrs->x_op) {

	case XDR_ENCODE:
		if ((rstrm->out_finger + len) <= rstrm->out_boundry) {
			buf = (int32_t *) rstrm->out_finger;
			rstrm->out_finger += len;
		}
		break;

	case XDR_DECODE:
		if ((len <= rstrm->fbtbc) &&
			((rstrm->in_finger + len) <= rstrm->in_boundry)) {
			buf = (int32_t *) rstrm->in_finger;
			rstrm->fbtbc -= len;
			rstrm->in_finger += len;
		}
		break;

	case XDR_FREE:
		break;
	}
	return (buf);
}

static void
xdrrec_destroy(XDR *xdrs)
{
	RECSTREAM *rstrm = (RECSTREAM *)xdrs->x_private;

	mem_free(rstrm->out_base, rstrm->sendsize);
	mem_free(rstrm->in_base, rstrm->recvsize);
	mem_free(rstrm, sizeof(RECSTREAM));
}

/*
 * Exported routines to manage xdr records
 */

/*
 * Before reading (deserializing from the stream, one should always call
 * this procedure to guarantee proper record alignment.
 */
bool_t
xdrrec_skiprecord(XDR *xdrs)
{
	RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	enum xprt_stat xstat;

	if (rstrm->nonblock) {
		if (__xdrrec_getrec(xdrs, &xstat, FALSE)) {
			rstrm->fbtbc = 0;
			return (TRUE);
		}
		if (rstrm->in_finger == rstrm->in_boundry &&
		    xstat == XPRT_MOREREQS) {
			rstrm->fbtbc = 0;
			return (TRUE);
		}
		return (FALSE);
	}
	while (rstrm->fbtbc > 0 || (! rstrm->last_frag)) {
		if (! skip_input_bytes(rstrm, rstrm->fbtbc))
			return (FALSE);
		rstrm->fbtbc = 0;
		if ((! rstrm->last_frag) && (! set_input_fragment(rstrm)))
			return (FALSE);
	}
	rstrm->last_frag = FALSE;
	return (TRUE);
}
DEF_WEAK(xdrrec_skiprecord);

/*
 * Look ahead fuction.
 * Returns TRUE iff there is no more input in the buffer 
 * after consuming the rest of the current record.
 */
bool_t
xdrrec_eof(XDR *xdrs)
{
	RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);

	while (rstrm->fbtbc > 0 || (! rstrm->last_frag)) {
		if (! skip_input_bytes(rstrm, rstrm->fbtbc))
			return (TRUE);
		rstrm->fbtbc = 0;
		if ((! rstrm->last_frag) && (! set_input_fragment(rstrm)))
			return (TRUE);
	}
	if (rstrm->in_finger == rstrm->in_boundry)
		return (TRUE);
	return (FALSE);
}
DEF_WEAK(xdrrec_eof);

/*
 * The client must tell the package when an end-of-record has occurred.
 * The second paraemters tells whether the record should be flushed to the
 * (output) tcp stream.  (This let's the package support batched or
 * pipelined procedure calls.)  TRUE => immmediate flush to tcp connection.
 */
bool_t
xdrrec_endofrecord(XDR *xdrs, int32_t sendnow)
{
	RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	u_long len;  /* fragment length */

	if (sendnow || rstrm->frag_sent ||
		((u_long)rstrm->out_finger + sizeof(u_int32_t) >=
		(u_long)rstrm->out_boundry)) {
		rstrm->frag_sent = FALSE;
		return (flush_out(rstrm, TRUE));
	}
	len = (u_long)(rstrm->out_finger) - (u_long)(rstrm->frag_header) -
	   sizeof(u_int32_t);
	*(rstrm->frag_header) = htonl((u_long)len | LAST_FRAG);
	rstrm->frag_header = (u_int32_t *)rstrm->out_finger;
	rstrm->out_finger += sizeof(u_int32_t);
	return (TRUE);
}
DEF_WEAK(xdrrec_endofrecord);

/*
 * Fill the stream buffer with a record for a non-blocking connection.
 * Return true if a record is available in the buffer, false if not.
 */
bool_t
__xdrrec_getrec(XDR *xdrs, enum xprt_stat *statp, bool_t expectdata)
{
	RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	ssize_t n;
	int fraglen;

	if (!rstrm->in_haveheader) {
		n = rstrm->readit(rstrm->tcp_handle, rstrm->in_hdrp,
		    (int)sizeof (rstrm->in_header) - rstrm->in_hdrlen);
		if (n == 0) {
			*statp = expectdata ? XPRT_DIED : XPRT_IDLE;
			return (FALSE);
		}
		if (n < 0) {
			*statp = XPRT_DIED;
			return (FALSE);
		}
		rstrm->in_hdrp += n;
		rstrm->in_hdrlen += n;
		if (rstrm->in_hdrlen < sizeof (rstrm->in_header)) {
			*statp = XPRT_MOREREQS;
			return (FALSE);
		}
		rstrm->in_header = ntohl(rstrm->in_header);
		fraglen = (int)(rstrm->in_header & ~LAST_FRAG);
		if (fraglen == 0 || fraglen > rstrm->in_maxrec ||
		    (rstrm->in_reclen + fraglen) > rstrm->in_maxrec) {
			*statp = XPRT_DIED;
			return (FALSE);
		}
		rstrm->in_reclen += fraglen;
		if (rstrm->in_reclen > rstrm->recvsize)
			realloc_stream(rstrm, rstrm->in_reclen);
		if (rstrm->in_header & LAST_FRAG) {
			rstrm->in_header &= ~LAST_FRAG;
			rstrm->last_frag = TRUE;
		}
	}

	n =  rstrm->readit(rstrm->tcp_handle,
	    rstrm->in_base + rstrm->in_received,
	    (rstrm->in_reclen - rstrm->in_received));

	if (n < 0) {
		*statp = XPRT_DIED;
		return (FALSE);
	}

	if (n == 0) {
		*statp = expectdata ? XPRT_DIED : XPRT_IDLE;
		return (FALSE);
	}

	rstrm->in_received += n;

	if (rstrm->in_received == rstrm->in_reclen) {
		rstrm->in_haveheader = (FALSE);
		rstrm->in_hdrp = (char *)(void *)&rstrm->in_header;
		rstrm->in_hdrlen = 0;
		if (rstrm->last_frag) {
			rstrm->fbtbc = rstrm->in_reclen;
			rstrm->in_boundry = rstrm->in_base + rstrm->in_reclen;
			rstrm->in_finger = rstrm->in_base;
			rstrm->in_reclen = rstrm->in_received = 0;
			*statp = XPRT_MOREREQS;
			return (TRUE);
		}
	}

	*statp = XPRT_MOREREQS;
	return (FALSE);
}
DEF_STRONG(__xdrrec_getrec);

bool_t
__xdrrec_setnonblock(XDR *xdrs, int maxrec)
{
	RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);

	rstrm->nonblock = TRUE;
	if (maxrec == 0)
		maxrec = rstrm->recvsize;
	rstrm->in_maxrec = maxrec;
	return (TRUE);
}


/*
 * Internal useful routines
 */
static bool_t
flush_out(RECSTREAM *rstrm, int32_t eor)
{
	u_long eormask = (eor == TRUE) ? LAST_FRAG : 0;
	u_int32_t len = (u_long)(rstrm->out_finger) - 
		(u_long)(rstrm->frag_header) - sizeof(u_int32_t);

	*(rstrm->frag_header) = htonl(len | eormask);
	len = (u_long)(rstrm->out_finger) - (u_long)(rstrm->out_base);
	if ((*(rstrm->writeit))(rstrm->tcp_handle, rstrm->out_base, (int)len)
		!= (int)len)
		return (FALSE);
	rstrm->frag_header = (u_int32_t *)rstrm->out_base;
	rstrm->out_finger = (caddr_t)rstrm->out_base + sizeof(u_int32_t);
	return (TRUE);
}

static bool_t  /* knows nothing about records!  Only about input buffers */
fill_input_buf(RECSTREAM *rstrm)
{
	caddr_t where;
	u_long i;
	long len;

	if (rstrm->nonblock)
		return FALSE;
	where = rstrm->in_base;
	i = (u_long)rstrm->in_boundry % BYTES_PER_XDR_UNIT;
	where += i;
	len = rstrm->in_size - i;
	if ((len = (*(rstrm->readit))(rstrm->tcp_handle, where, len)) == -1)
		return (FALSE);
	rstrm->in_finger = where;
	where += len;
	rstrm->in_boundry = where;
	return (TRUE);
}

static bool_t  /* knows nothing about records!  Only about input buffers */
get_input_bytes(RECSTREAM *rstrm, caddr_t addr, int len)
{
	long current;

	if (rstrm->nonblock) {
		if (len > (int)(rstrm->in_boundry - rstrm->in_finger))
			return FALSE;
		memcpy(addr, rstrm->in_finger, len);
		rstrm->in_finger += len;
		return (TRUE);
	}

	while (len > 0) {
		current = (long)rstrm->in_boundry - (long)rstrm->in_finger;
		if (current == 0) {
			if (! fill_input_buf(rstrm))
				return (FALSE);
			continue;
		}
		current = (len < current) ? len : current;
		memcpy(addr, rstrm->in_finger, current);
		rstrm->in_finger += current;
		addr += current;
		len -= current;
	}
	return (TRUE);
}

static bool_t  /* next four bytes of the input stream are treated as a header */
set_input_fragment(RECSTREAM *rstrm)
{
	u_int32_t header;

	if (rstrm->nonblock)
		return (FALSE);
	if (! get_input_bytes(rstrm, (caddr_t)&header, sizeof(header)))
		return (FALSE);
	header = (long)ntohl(header);
	rstrm->last_frag = ((header & LAST_FRAG) == 0) ? FALSE : TRUE;
	/*
	 * Sanity check. Try not to accept wildly incorrect
	 * record sizes. Unfortunately, the only record size
	 * we can positively identify as being 'wildly incorrect'
	 * is zero. Ridiculously large record sizes may look wrong,
	 * but we don't have any way to be certain that they aren't
	 * what the client actually intended to send us.
	 */
	if (header == 0)
		return(FALSE);
	rstrm->fbtbc = header & (~LAST_FRAG);
	return (TRUE);
}

static bool_t  /* consumes input bytes; knows nothing about records! */
skip_input_bytes(RECSTREAM *rstrm, long int cnt)
{
	long current;

	while (cnt > 0) {
		current = (long)rstrm->in_boundry - (long)rstrm->in_finger;
		if (current == 0) {
			if (! fill_input_buf(rstrm))
				return (FALSE);
			continue;
		}
		current = (cnt < current) ? cnt : current;
		rstrm->in_finger += current;
		cnt -= current;
	}
	return (TRUE);
}

static u_int
fix_buf_size(u_int s)
{

	if (s < 100)
		s = 4000;
	return (RNDUP(s));
}

/*
 * Reallocate the input buffer for a non-block stream.
 */
static bool_t
realloc_stream(RECSTREAM *rstrm, int size)
{
	ptrdiff_t diff;
	char *buf;

	if (size > rstrm->recvsize) {
		buf = realloc(rstrm->in_base, size);
		if (buf == NULL)
			return (FALSE);
		diff = buf - rstrm->in_base;
		rstrm->in_finger += diff;
		rstrm->in_base = buf;
		rstrm->in_boundry = buf + size;
		rstrm->recvsize = size;
		rstrm->in_size = size;
	}

	return (TRUE);
}
@


1.21
log
@__xdrrec_getrec is in the reserved namespace, so it doesn't need to be weak
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_rec.c,v 1.20 2015/09/13 15:36:56 guenther Exp $ */
d324 2
a325 2
	pos = lseek((int)(long)rstrm->tcp_handle, (off_t)0, SEEK_CUR);
	if (pos != (off_t)-1)
d649 1
a649 1
		memcpy(addr, rstrm->in_finger, (size_t)len);
d733 1
a733 1
		buf = realloc(rstrm->in_base, (size_t)size);
@


1.20
log
@Wrap <rpc/*.h> so that calls go direct and the symbols are all weak.
Hide __xprt_register() and _authenticate(); truncate <rpc/svc_auth.h>

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_rec.c,v 1.19 2015/09/11 13:34:41 guenther Exp $ */
d585 1
a585 1
DEF_WEAK(__xdrrec_getrec);
@


1.19
log
@lseek() is in <unistd.h>  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_rec.c,v 1.18 2015/09/01 19:54:01 deraadt Exp $ */
d72 9
d218 1
a419 2
bool_t __xdrrec_getrec(XDR *xdrs, enum xprt_stat *statp, bool_t expectdata);

d456 1
d479 1
d506 1
d585 1
@


1.18
log
@Remove all bogus writes to stderr.  Only explicit requests should
go that way.
ok miod beck
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_rec.c,v 1.17 2013/11/26 20:33:08 deraadt Exp $ */
d55 1
@


1.17
log
@1 << 31 cleanup.  Eitan Adler pointed out that there has been a
resurrection of the bad idiom in the tree.
sufficient review by miod, kettenis, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_rec.c,v 1.16 2013/04/17 17:40:35 tedu Exp $ */
a161 1
		(void)fprintf(stderr, "xdrrec_create: out of memory\n");
a171 1
		(void)fprintf(stderr, "xdrrec_create: out of memory\n");
a178 1
		(void)fprintf(stderr, "xdrrec_create: out of memory\n");
@


1.16
log
@add some prototypes, casts, includes, parenthesis, and whatnot to
silence some warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_rec.c,v 1.15 2010/09/01 14:43:34 millert Exp $ */
d98 1
a98 1
#define LAST_FRAG ((u_int32_t)(1 << 31))
@


1.15
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_rec.c,v 1.14 2010/07/17 19:23:10 guenther Exp $ */
d412 1
@


1.14
log
@Correct the #includes to avoid warnings in <rpc/svc.h>
ok miod@@
@
text
@d1 2
a2 1
/*	$OpenBSD: xdr_rec.c,v 1.13 2008/12/09 19:40:10 otto Exp $ */
d4 28
a31 26
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 * 
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 * 
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 * 
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 * 
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 * 
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
d33 1
a36 2
 *
 * Copyright (C) 1984, Sun Microsystems, Inc.
@


1.13
log
@Commit requested by marco:
Add nonblock support for xdrrecs
ok millert blambert & otto; from NetBSD. libc bump to follow soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_rec.c,v 1.12 2006/04/02 02:04:05 deraadt Exp $ */
d56 2
a58 1
#include <rpc/clnt.h>
@


1.12
log
@be more careful checking for (off_t)-1 as the failure condition from
lseek(), not just any old -1; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_rec.c,v 1.11 2005/08/08 08:05:36 espie Exp $ */
d47 3
d55 3
a57 1
#include <netinet/in.h>
d78 2
a79 1
	xdrrec_destroy
a98 1
	caddr_t the_buffer;
d120 9
d133 1
d137 1
a137 1

d166 1
a166 3
	/*
	 * adjust sizes and allocate buffer quad byte aligned
	 */
d168 7
d176 2
a177 2
	rstrm->the_buffer = mem_alloc(sendsize + recvsize + BYTES_PER_XDR_UNIT);
	if (rstrm->the_buffer == NULL) {
d179 2
a180 1
		free(rstrm);
a182 4
	for (rstrm->out_base = rstrm->the_buffer;
		(u_long)rstrm->out_base % BYTES_PER_XDR_UNIT != 0;
		rstrm->out_base++);
	rstrm->in_base = rstrm->out_base + sendsize;
d201 6
d362 3
d392 3
d404 3
a406 3
	mem_free(rstrm->the_buffer,
		rstrm->sendsize + rstrm->recvsize + BYTES_PER_XDR_UNIT);
	mem_free((caddr_t)rstrm, sizeof(RECSTREAM));
d422 1
d424 12
d495 90
d613 2
d632 8
d661 2
d667 9
a675 1
	if ((header & (~LAST_FRAG)) == 0)
d707 24
@


1.11
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d288 1
a288 1
	long pos;
d290 2
a291 2
	pos = lseek((int)(long)rstrm->tcp_handle, (off_t)0, 1);
	if (pos != -1)
@


1.10
log
@ansify. ok deraadt@@ jaredy@@
@
text
@d1 1
a29 4
#if defined(LIBC_SCCS) && !defined(lint) 
static char *rcsid = "$OpenBSD: xdr_rec.c,v 1.9 2002/02/16 21:27:24 millert Exp $";
#endif /* LIBC_SCCS and not lint */

@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d30 1
a30 1
static char *rcsid = "$OpenBSD: xdr_rec.c,v 1.8 2001/09/15 13:51:01 deraadt Exp $";
d66 2
d137 5
a141 7
xdrrec_create(xdrs, sendsize, recvsize, tcp_handle, readit, writeit)
	XDR *xdrs;
	u_int sendsize;
	u_int recvsize;
	caddr_t tcp_handle;
	int (*readit)();  /* like read, but pass it a tcp_handle, not sock */
	int (*writeit)();  /* like write, but pass it a tcp_handle, not sock */
d196 1
a196 3
xdrrec_getlong(xdrs, lp)
	XDR *xdrs;
	long *lp;
d218 1
a218 3
xdrrec_putlong(xdrs, lp)
	XDR *xdrs;
	long *lp;
d240 1
a240 4
xdrrec_getbytes(xdrs, addr, len)
	XDR *xdrs;
	caddr_t addr;
	u_int len;
d265 1
a265 4
xdrrec_putbytes(xdrs, addr, len)
	XDR *xdrs;
	caddr_t addr;
	u_int len;
d288 1
a288 2
xdrrec_getpos(xdrs)
	XDR *xdrs;
d313 1
a313 3
xdrrec_setpos(xdrs, pos)
	XDR *xdrs;
	u_int pos;
d347 1
a347 3
xdrrec_inline(xdrs, len)
	XDR *xdrs;
	u_int len;
d374 1
a374 2
xdrrec_destroy(xdrs)
	XDR *xdrs;
d393 1
a393 2
xdrrec_skiprecord(xdrs)
	XDR *xdrs;
d414 1
a414 2
xdrrec_eof(xdrs)
	XDR *xdrs;
d437 1
a437 3
xdrrec_endofrecord(xdrs, sendnow)
	XDR *xdrs;
	bool_t sendnow;
d461 1
a461 3
flush_out(rstrm, eor)
	RECSTREAM *rstrm;
	bool_t eor;
d478 1
a478 2
fill_input_buf(rstrm)
	RECSTREAM *rstrm;
d497 1
a497 4
get_input_bytes(rstrm, addr, len)
	RECSTREAM *rstrm;
	caddr_t addr;
	int len;
d518 1
a518 2
set_input_fragment(rstrm)
	RECSTREAM *rstrm;
d533 1
a533 3
skip_input_bytes(rstrm, cnt)
	RECSTREAM *rstrm;
	long cnt;
d552 1
a552 2
fix_buf_size(s)
	u_int s;
@


1.8
log
@prototype cleanup
@
text
@d30 1
a30 1
static char *rcsid = "$OpenBSD: xdr_rec.c,v 1.7 2001/03/03 06:50:28 deraadt Exp $";
d98 1
a98 1
	int (*writeit) __P((caddr_t, caddr_t, int));
d107 1
a107 1
	int (*readit) __P((caddr_t, caddr_t, int));
@


1.7
log
@plug many memory leaks
@
text
@d30 1
a30 1
static char *rcsid = "$OpenBSD: xdr_rec.c,v 1.6 1998/05/20 23:50:02 deraadt Exp $";
d57 8
a64 14
static u_int	fix_buf_size();
static bool_t	flush_out();
static bool_t	get_input_bytes();
static bool_t	set_input_fragment();
static bool_t	skip_input_bytes();

static bool_t	xdrrec_getlong();
static bool_t	xdrrec_putlong();
static bool_t	xdrrec_getbytes();
static bool_t	xdrrec_putbytes();
static u_int	xdrrec_getpos();
static bool_t	xdrrec_setpos();
static int32_t *xdrrec_inline();
static void	xdrrec_destroy();
d118 6
d136 3
a138 3
	register XDR *xdrs;
	register u_int sendsize;
	register u_int recvsize;
d143 1
a143 1
	register RECSTREAM *rstrm =
d200 2
a201 2
	register RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	register int32_t *buflp = (int32_t *)(rstrm->in_finger);
d211 2
a212 1
		if (! xdrrec_getbytes(xdrs, (caddr_t)&mylong, sizeof(int32_t)))
d224 2
a225 2
	register RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	register int32_t *dest_lp = ((int32_t *)(rstrm->out_finger));
d236 1
a236 1
		dest_lp = ((int32_t *)(rstrm->out_finger));
d246 2
a247 2
	register caddr_t addr;
	register u_int len;
d249 2
a250 2
	register RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	register int current;
d274 2
a275 2
	register caddr_t addr;
	register u_int len;
d277 2
a278 2
	register RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	register long current;
d299 1
a299 1
	register XDR *xdrs;
d301 2
a302 2
	register RECSTREAM *rstrm = (RECSTREAM *)xdrs->x_private;
	register long pos;
d325 1
a325 1
	register XDR *xdrs;
d328 1
a328 1
	register RECSTREAM *rstrm = (RECSTREAM *)xdrs->x_private;
d361 2
a362 2
	register XDR *xdrs;
	int len;
d364 1
a364 1
	register RECSTREAM *rstrm = (RECSTREAM *)xdrs->x_private;
d390 1
a390 1
	register XDR *xdrs;
d392 1
a392 1
	register RECSTREAM *rstrm = (RECSTREAM *)xdrs->x_private;
d412 1
a412 1
	register RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
d434 1
a434 1
	register RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
d459 2
a460 2
	register RECSTREAM *rstrm = (RECSTREAM *)(xdrs->x_private);
	register u_long len;  /* fragment length */
d482 1
a482 1
	register RECSTREAM *rstrm;
d485 2
a486 2
	register u_long eormask = (eor == TRUE) ? LAST_FRAG : 0;
	register u_int32_t len = (u_long)(rstrm->out_finger) - 
d501 1
a501 1
	register RECSTREAM *rstrm;
d503 1
a503 1
	register caddr_t where;
d505 1
a505 1
	register long len;
d521 3
a523 3
	register RECSTREAM *rstrm;
	register caddr_t addr;
	register int len;
d525 1
a525 1
	register long current;
d545 1
a545 1
	register RECSTREAM *rstrm;
d561 1
a561 1
	register RECSTREAM *rstrm;
d564 1
a564 1
	register long current;
d582 1
a582 1
	register u_int s;
@


1.6
log
@fragment size of 0 is clearly illegal; wpaul
@
text
@d30 1
a30 1
static char *rcsid = "$OpenBSD: xdr_rec.c,v 1.5 1997/05/28 21:28:56 deraadt Exp $";
d162 1
@


1.5
log
@repair comments about 2 byte xdrred headers
@
text
@d30 1
a30 1
static char *rcsid = "$OpenBSD: xdr_rec.c,v 1.4 1996/08/19 08:32:06 tholo Exp $";
d551 2
@


1.4
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d30 1
a30 1
static char *rcsid = "$OpenBSD: xdr_rec.c,v 1.3 1996/07/20 06:12:51 deraadt Exp $";
d44 1
a44 1
 * is represented as a htonl(u_long).  Thegh order bit encodes
d85 1
a85 1
 * A record fragment is a two-byte header followed by zero to
d108 1
a108 1
	u_int32_t *frag_header;	/* beginning of curren fragment */
d541 1
a541 1
static bool_t  /* next two bytes of the input stream are treated as a header */
@


1.3
log
@bcopy->memcpy & tag
@
text
@a0 3
/*	$OpenBSD: xdr_rec.c,v 1.5 1995/02/25 03:02:08 cgd Exp $	*/
/*	$NetBSD: xdr_rec.c,v 1.5 1995/02/25 03:02:08 cgd Exp $	*/

d30 2
a31 4
/*static char *sccsid = "from: @@(#)xdr_rec.c 1.21 87/08/11 Copyr 1984 Sun Micro";*/
/*static char *sccsid = "from: @@(#)xdr_rec.c	2.2 88/08/01 4.0 RPCSRC";*/
static char *rcsid = "$OpenBSD: xdr_rec.c,v 1.5 1995/02/25 03:02:08 cgd Exp $";
#endif
@


1.2
log
@Pull prototypes into scope
Remove graticious casts
@
text
@d1 1
d35 1
a35 1
static char *rcsid = "$NetBSD: xdr_rec.c,v 1.5 1995/02/25 03:02:08 cgd Exp $";
d287 1
a287 1
		bcopy(addr, rstrm->out_finger, current);
d538 1
a538 1
		bcopy(rstrm->in_finger, addr, current);
@


1.1
log
@Initial revision
@
text
@d56 1
d306 1
a306 1
	pos = lseek((off_t)(long)rstrm->tcp_handle, 0, 1);
d319 1
a319 1
			pos = (u_int) -1;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
