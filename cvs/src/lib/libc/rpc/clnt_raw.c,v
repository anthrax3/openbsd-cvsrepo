head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.6
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.8
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.17.0.14
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.18
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.16
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.12
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.10
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.8
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.6
	OPENBSD_5_0:1.17.0.4
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.16.0.6
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.4
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.15.0.12
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.10
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.8
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.6
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.14.0.4
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.10.0.14
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.12
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.10
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.10.0.8
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.6
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.4
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.8.0.12
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.10
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.8
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2015.11.01.03.45.29;	author guenther;	state Exp;
branches;
next	1.19;
commitid	CfNWDWdDpm7mVO8i;

1.19
date	2015.08.20.21.49.29;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	jeIpGH0zlTW3huPH;

1.18
date	2015.05.04.09.43.51;	author jsg;	state Exp;
branches;
next	1.17;
commitid	Lyf9t4BPgY8aDwg5;

1.17
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.04.03.51.29;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.31.18.28.55;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.08.08.05.35;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2005.08.01.19.44.53;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.01.07.44.03;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.16.20.45.07;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.15.13.51.00;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.03.06.50.28;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.03.19.00.27.18;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.11.05.10.17.40;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.11.05.10.00.20;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.12.14.06.49.41;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.09.15.09.31.32;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.31.27;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.20.06.12.23;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@delete old lint ARGSUSED comments
@
text
@/*	$OpenBSD: clnt_raw.c,v 1.19 2015/08/20 21:49:29 deraadt Exp $ */

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * clnt_raw.c
 *
 * Memory based rpc for simple testing and timing.
 * Interface to create an rpc client and server in the same process.
 * This lets us similate rpc and get round trip overhead, without
 * any interference from the kernel.
 */

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <rpc/rpc.h>

#define MCALL_MSG_SIZE 24

/*
 * This is the "network" we will be moving stuff over.
 */
static struct clntraw_private {
	CLIENT	client_object;
	XDR	xdr_stream;
	char	_raw_buf[UDPMSGSIZE];
	char	mashl_callmsg[MCALL_MSG_SIZE];
	u_int	mcnt;
} *clntraw_private;

static enum clnt_stat	clntraw_call(CLIENT *, u_long, xdrproc_t, caddr_t,
			    xdrproc_t, caddr_t, struct timeval);
static void		clntraw_abort(CLIENT *);
static void		clntraw_geterr(CLIENT *, struct rpc_err *);
static bool_t		clntraw_freeres(CLIENT *, xdrproc_t, caddr_t);
static bool_t		clntraw_control(CLIENT *, u_int, void *);
static void		clntraw_destroy(CLIENT *);

static struct clnt_ops client_ops = {
	clntraw_call,
	clntraw_abort,
	clntraw_geterr,
	clntraw_freeres,
	clntraw_destroy,
	clntraw_control
};

void	svc_getreq(int rdfds);

/*
 * Create a client handle for memory based rpc.
 */
CLIENT *
clntraw_create(u_long prog, u_long vers)
{
	struct clntraw_private *clp = clntraw_private;
	struct rpc_msg call_msg;
	XDR *xdrs;
	CLIENT	*client;

	if (clp == NULL) {
		clp = calloc(1, sizeof (*clp));
		if (clp == NULL)
			goto fail;
		clntraw_private = clp;
	}
	xdrs = &clp->xdr_stream;
	client = &clp->client_object;
	/*
	 * pre-serialize the static part of the call msg and stash it away
	 */
	call_msg.rm_direction = CALL;
	call_msg.rm_call.cb_rpcvers = RPC_MSG_VERSION;
	call_msg.rm_call.cb_prog = prog;
	call_msg.rm_call.cb_vers = vers;
	xdrmem_create(xdrs, clp->mashl_callmsg, MCALL_MSG_SIZE, XDR_ENCODE); 
	if (!xdr_callhdr(xdrs, &call_msg))
		goto fail;
	clp->mcnt = XDR_GETPOS(xdrs);
	XDR_DESTROY(xdrs);

	/*
	 * Set xdrmem for client/server shared buffer
	 */
	xdrmem_create(xdrs, clp->_raw_buf, UDPMSGSIZE, XDR_FREE);

	/*
	 * create client handle
	 */
	client->cl_ops = &client_ops;
	client->cl_auth = authnone_create();
	if (client->cl_auth == NULL)
		goto fail;
	return (client);

fail:
	mem_free((caddr_t)clntraw_private, sizeof(*clntraw_private));
	clntraw_private = NULL;
	rpc_createerr.cf_stat = RPC_SYSTEMERROR;
	rpc_createerr.cf_error.re_errno = errno;
	return (NULL);
}

static enum clnt_stat 
clntraw_call(CLIENT *h, u_long proc, xdrproc_t xargs, caddr_t argsp,
    xdrproc_t xresults, caddr_t resultsp, struct timeval timeout)
{
	struct clntraw_private *clp = clntraw_private;
	XDR *xdrs;
	struct rpc_msg msg;
	enum clnt_stat status;
	struct rpc_err error;

	if (clp == NULL)
		return (RPC_FAILED);
	xdrs = &clp->xdr_stream;
call_again:
	/*
	 * send request
	 */
	xdrs->x_op = XDR_ENCODE;
	XDR_SETPOS(xdrs, 0);
	((struct rpc_msg *)clp->mashl_callmsg)->rm_xid ++ ;
	if ((! XDR_PUTBYTES(xdrs, clp->mashl_callmsg, clp->mcnt)) ||
	    (! XDR_PUTLONG(xdrs, (long *)&proc)) ||
	    (! AUTH_MARSHALL(h->cl_auth, xdrs)) ||
	    (! (*xargs)(xdrs, argsp))) {
		return (RPC_CANTENCODEARGS);
	}
	(void)XDR_GETPOS(xdrs);  /* called just to cause overhead */

	/*
	 * We have to call server input routine here because this is
	 * all going on in one process. Yuk.
	 */
	svc_getreq(1);

	/*
	 * get results
	 */
	xdrs->x_op = XDR_DECODE;
	XDR_SETPOS(xdrs, 0);
	msg.acpted_rply.ar_verf = _null_auth;
	msg.acpted_rply.ar_results.where = resultsp;
	msg.acpted_rply.ar_results.proc = xresults;
	if (! xdr_replymsg(xdrs, &msg)) {
		/* xdr_replymsg() may have left some things allocated */
		int op = xdrs->x_op;
		xdrs->x_op = XDR_FREE;
		xdr_replymsg(xdrs, &msg);
		xdrs->x_op = op;
		return (RPC_CANTDECODERES);
	}
	_seterr_reply(&msg, &error);
	status = error.re_status;

	if (status == RPC_SUCCESS) {
		if (! AUTH_VALIDATE(h->cl_auth, &msg.acpted_rply.ar_verf)) {
			status = RPC_AUTHERROR;
		}
	}  /* end successful completion */
	else {
		if (AUTH_REFRESH(h->cl_auth))
			goto call_again;
	}  /* end of unsuccessful completion */

	if (status == RPC_SUCCESS) {
		if (! AUTH_VALIDATE(h->cl_auth, &msg.acpted_rply.ar_verf)) {
			status = RPC_AUTHERROR;
		}
		if (msg.acpted_rply.ar_verf.oa_base != NULL) {
			xdrs->x_op = XDR_FREE;
			(void)xdr_opaque_auth(xdrs, &(msg.acpted_rply.ar_verf));
		}
	}

	return (status);
}

static void
clntraw_geterr(CLIENT *clnt, struct rpc_err *err)
{
}

static bool_t
clntraw_freeres(CLIENT *cl, xdrproc_t xdr_res, caddr_t res_ptr)
{
	struct clntraw_private *clp = clntraw_private;
	XDR *xdrs;
	bool_t rval;

	if (clp == NULL) {
		rval = (bool_t) RPC_FAILED;
		return (rval);
	}
	xdrs = &clp->xdr_stream;
	xdrs->x_op = XDR_FREE;
	return ((*xdr_res)(xdrs, res_ptr));
}

static void
clntraw_abort(CLIENT *clnt)
{
}

static bool_t
clntraw_control(CLIENT *clnt, u_int i, void *v)
{
	return (FALSE);
}

static void
clntraw_destroy(CLIENT *clnt)
{
}
@


1.19
log
@All these files include <stdlib.h>, so do not need to cast
malloc/calloc/realloc* returns.
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_raw.c,v 1.18 2015/05/04 09:43:51 jsg Exp $ */
a133 1
/* ARGSUSED */
a209 1
/*ARGSUSED*/
a214 1
/* ARGSUSED */
a230 1
/*ARGSUSED*/
a235 1
/*ARGSUSED*/
a241 1
/*ARGSUSED*/
@


1.18
log
@Use the size of the buffer not the pointer in a call to mem_free().
ok miod@@ and guenther@@ who both pointed out this argument is unused.
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_raw.c,v 1.17 2010/09/01 14:43:34 millert Exp $ */
d92 1
a92 1
		clp = (struct clntraw_private *)calloc(1, sizeof (*clp));
@


1.17
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_raw.c,v 1.16 2009/06/04 03:51:29 schwarze Exp $ */
d127 1
a127 1
	mem_free((caddr_t)clntraw_private, sizeof(clntraw_private));
@


1.16
log
@Proper error handling in clntraw_create:
Bail out and clean up after all errors, and report in libc/rpc style.
Among others, this fixes a NULL pointer dereference in clntraw_call.
Feedback and ok  kjell@@ and millert@@.
@
text
@d1 2
a2 1
/*	$OpenBSD: clnt_raw.c,v 1.15 2006/03/31 18:28:55 deraadt Exp $ */
d4 5
a8 14
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 * 
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 * 
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
d10 22
a31 11
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 * 
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 * 
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
a35 2
 *
 * Copyright (C) 1984, Sun Microsystems, Inc.
@


1.15
log
@sprinkle a bit of ARGSUSED
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_raw.c,v 1.14 2005/08/08 08:05:35 espie Exp $ */
d44 1
d93 1
a93 1
			return (NULL);
d99 1
a99 1
	 * pre-serialize the staic part of the call msg and stash it away
d106 2
a107 3
	if (! xdr_callhdr(xdrs, &call_msg)) {
		perror("clnt_raw.c - Fatal header serialization error.");
	}
d121 2
d124 7
@


1.14
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d201 1
d224 1
d230 1
d237 1
@


1.13
log
@kernal->kernel;
from netbsd pr #30872 (anonymous post);
ok deraadt@@ krw@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.12 2005/04/01 07:44:03 otto Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.12
log
@ansify. ok deraadt@@ jaredy@@
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.11 2004/12/16 20:45:07 krw Exp $";
d42 1
a42 1
 * any interference from the kernal.
@


1.11
log
@De-reference pointer *after* checking if it is NULL.

ok millert@@.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.10 2001/09/15 13:51:00 deraadt Exp $";
d79 1
a79 1
void	svc_getreq();
d85 1
a85 3
clntraw_create(prog, vers)
	u_long prog;
	u_long vers;
d129 2
a130 8
clntraw_call(h, proc, xargs, argsp, xresults, resultsp, timeout)
	CLIENT *h;
	u_long proc;
	xdrproc_t xargs;
	caddr_t argsp;
	xdrproc_t xresults;
	caddr_t resultsp;
	struct timeval timeout;
d211 1
a211 4
clntraw_freeres(cl, xdr_res, res_ptr)
	CLIENT *cl;
	xdrproc_t xdr_res;
	caddr_t res_ptr;
@


1.10
log
@prototype cleanup
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.9 2001/03/03 06:50:28 deraadt Exp $";
d91 2
a92 2
	XDR *xdrs = &clp->xdr_stream;
	CLIENT	*client = &clp->client_object;
d100 2
d141 1
a141 1
	XDR *xdrs = &clp->xdr_stream;
d148 1
d225 1
a225 1
	XDR *xdrs = &clp->xdr_stream;
d232 1
@


1.9
log
@plug many memory leaks
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.8 1998/03/19 00:27:18 millert Exp $";
d62 7
a68 6
static enum clnt_stat	clntraw_call();
static void		clntraw_abort();
static void		clntraw_geterr();
static bool_t		clntraw_freeres();
static bool_t		clntraw_control();
static void		clntraw_destroy();
d89 1
a89 1
	register struct clntraw_private *clp = clntraw_private;
d138 2
a139 2
	register struct clntraw_private *clp = clntraw_private;
	register XDR *xdrs = &clp->xdr_stream;
d210 1
a210 1
clntraw_geterr()
d221 2
a222 2
	register struct clntraw_private *clp = clntraw_private;
	register XDR *xdrs = &clp->xdr_stream;
d234 1
a234 1
clntraw_abort()
d239 1
a239 1
clntraw_control()
d245 1
a245 1
clntraw_destroy()
@


1.8
log
@Some -Wall
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.7 1997/11/05 10:17:40 deraadt Exp $";
d93 1
a93 1
	if (clp == 0) {
d95 2
a96 2
		if (clp == 0)
			return (0);
d143 1
a143 1
	if (clp == 0)
d224 1
a224 2
	if (clp == 0)
	{
@


1.7
log
@oops
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.6 1997/11/05 10:00:20 deraadt Exp $";
d45 1
@


1.6
log
@if xdr_replymsg() fails, it can leave memory still allocated.  thus we
need to go XDR_FREE it; wpaul@@freebsd.  clnt_raw.c also appears to have
the same problem, and there is precedent for the solution in various
other rpc code.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.5 1996/12/14 06:49:41 tholo Exp $";
d175 4
a178 5
		int op = reply_xdrs.x_op;
		reply_xdrs.x_op = XDR_FREE;
		xdr_replymsg(&reply_xdrs, &reply_msg);
		reply_xdrs.x_op = op;
		cu->cu_error.re_status = RPC_CANTDECODERES;
@


1.5
log
@Clean up lint and compile warnings
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.4 1996/09/15 09:31:32 tholo Exp $";
d173 7
a179 1
	if (! xdr_replymsg(xdrs, &msg))
d181 1
@


1.4
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.3 1996/08/19 08:31:27 tholo Exp $";
d152 1
a152 1
	    (! XDR_PUTLONG(xdrs, &proc)) ||
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.2 1996/07/20 06:12:23 deraadt Exp $";
d125 1
d206 1
a206 1

@


1.2
log
@bcopy->memcpy & tag
@
text
@a0 3
/*	$OpenBSD: clnt_raw.c,v 1.3 1995/02/25 03:01:40 cgd Exp $	*/
/*	$NetBSD: clnt_raw.c,v 1.3 1995/02/25 03:01:40 cgd Exp $	*/

d31 2
a32 4
/*static char *sccsid = "from: @@(#)clnt_raw.c 1.22 87/08/11 Copyr 1984 Sun Micro";*/
/*static char *sccsid = "from: @@(#)clnt_raw.c	2.2 88/08/01 4.0 RPCSRC";*/
static char *rcsid = "$OpenBSD: clnt_raw.c,v 1.3 1995/02/25 03:01:40 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
d36 1
a36 1
static char *rcsid = "$NetBSD: clnt_raw.c,v 1.3 1995/02/25 03:01:40 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

