head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.6
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.11.0.22
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.14
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.18
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.16
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.12
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.10.0.18
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.14
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.16
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.12
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.7.0.16
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.14
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.12
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.10
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.8
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.11.01.03.45.29;	author guenther;	state Exp;
branches;
next	1.13;
commitid	CfNWDWdDpm7mVO8i;

1.13
date	2015.09.13.15.36.56;	author guenther;	state Exp;
branches;
next	1.12;
commitid	FxNpAvmgpSFQVav0;

1.12
date	2015.08.20.21.49.29;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	jeIpGH0zlTW3huPH;

1.11
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.31.18.28.55;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.08.08.05.35;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.01.07.44.03;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.15.13.51.00;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.03.06.50.27;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.24.17.03.19;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.12.20.23.45.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.31.20;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.20.06.12.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@delete old lint ARGSUSED comments
@
text
@/*	$OpenBSD: auth_none.c,v 1.13 2015/09/13 15:36:56 guenther Exp $ */

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * auth_none.c
 * Creates a client authentication handle for passing "null" 
 * credentials and verifiers to remote systems. 
 */

#include <stdlib.h>
#include <rpc/types.h>
#include <rpc/rpc.h>
#include <rpc/xdr.h>
#include <rpc/auth.h>
#define MAX_MARSHEL_SIZE 20

/*
 * Authenticator operations routines
 */
static void	authnone_destroy(struct __rpc_auth *);
static void	authnone_verf(struct __rpc_auth *);
static bool_t	authnone_validate(struct __rpc_auth *, struct opaque_auth *);
static bool_t	authnone_marshal(struct __rpc_auth *, XDR *);
static bool_t	authnone_refresh(struct __rpc_auth *);

static struct auth_ops ops = {
	authnone_verf,
	authnone_marshal,
	authnone_validate,
	authnone_refresh,
	authnone_destroy
};

static struct authnone_private {
	AUTH	no_client;
	char	marshalled_client[MAX_MARSHEL_SIZE];
	u_int	mcnt;
} *authnone_private;

AUTH *
authnone_create(void)
{
	struct authnone_private *ap = authnone_private;
	XDR xdr_stream;
	XDR *xdrs;

	if (ap == NULL) {
		ap = calloc(1, sizeof (*ap));
		if (ap == NULL)
			return (NULL);
		authnone_private = ap;
	}
	if (!ap->mcnt) {
		ap->no_client.ah_cred = ap->no_client.ah_verf = _null_auth;
		ap->no_client.ah_ops = &ops;
		xdrs = &xdr_stream;
		xdrmem_create(xdrs, ap->marshalled_client, (u_int)MAX_MARSHEL_SIZE,
		    XDR_ENCODE);
		(void)xdr_opaque_auth(xdrs, &ap->no_client.ah_cred);
		(void)xdr_opaque_auth(xdrs, &ap->no_client.ah_verf);
		ap->mcnt = XDR_GETPOS(xdrs);
		XDR_DESTROY(xdrs);
	}
	return (&ap->no_client);
}
DEF_WEAK(authnone_create);

static bool_t
authnone_marshal(AUTH *client, XDR *xdrs)
{
	struct authnone_private *ap = authnone_private;

	if (ap == NULL)
		return (0);
	return ((*xdrs->x_ops->x_putbytes)(xdrs,
	    ap->marshalled_client, ap->mcnt));
}

static void 
authnone_verf(struct __rpc_auth *none)
{
}

static bool_t
authnone_validate(struct __rpc_auth *none, struct opaque_auth *noauth)
{

	return (TRUE);
}

static bool_t
authnone_refresh(struct __rpc_auth *none)
{

	return (FALSE);
}

static void
authnone_destroy(struct __rpc_auth *none)
{
}
@


1.13
log
@Wrap <rpc/*.h> so that calls go direct and the symbols are all weak.
Hide __xprt_register() and _authenticate(); truncate <rpc/svc_auth.h>

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: auth_none.c,v 1.12 2015/08/20 21:49:29 deraadt Exp $ */
a97 1
/*ARGSUSED*/
a108 1
/*ARGSUSED*/
a113 1
/*ARGSUSED*/
a120 1
/*ARGSUSED*/
a127 1
/*ARGSUSED*/
@


1.12
log
@All these files include <stdlib.h>, so do not need to cast
malloc/calloc/realloc* returns.
@
text
@d1 1
a1 1
/*	$OpenBSD: auth_none.c,v 1.11 2010/09/01 14:43:34 millert Exp $ */
d96 1
@


1.11
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: auth_none.c,v 1.10 2006/03/31 18:28:55 deraadt Exp $ */
d78 1
a78 1
		ap = (struct authnone_private *)calloc(1, sizeof (*ap));
@


1.10
log
@sprinkle a bit of ARGSUSED
@
text
@d1 2
a2 1
/*	$OpenBSD: auth_none.c,v 1.9 2005/08/08 08:05:35 espie Exp $ */
d4 28
a31 26
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 * 
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 * 
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 * 
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 * 
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 * 
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
a37 2
 * 
 * Copyright (C) 1984, Sun Microsystems, Inc. 
@


1.9
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d108 1
d114 1
d122 1
d130 1
@


1.8
log
@ansify. ok deraadt@@ jaredy@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: auth_none.c,v 1.7 2001/09/15 13:51:00 deraadt Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.7
log
@prototype cleanup
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: auth_none.c,v 1.6 2001/03/03 06:50:27 deraadt Exp $";
d73 1
a73 1
authnone_create()
d101 1
a101 3
authnone_marshal(client, xdrs)
	AUTH *client;
	XDR *xdrs;
@


1.6
log
@plug many memory leaks
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: auth_none.c,v 1.5 2000/08/24 17:03:19 deraadt Exp $";
d52 5
a56 5
static void	authnone_destroy();
static void	authnone_verf();
static bool_t	authnone_marshal();
static bool_t	authnone_refresh();
static bool_t	authnone_validate();
d75 1
a75 1
	register struct authnone_private *ap = authnone_private;
d77 1
a77 1
	register XDR *xdrs;
d105 1
a105 1
	register struct authnone_private *ap = authnone_private;
d114 1
a114 1
authnone_verf()
d119 1
a119 1
authnone_validate()
d126 1
a126 1
authnone_refresh()
d133 1
a133 1
authnone_destroy()
@


1.5
log
@fix includes
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: auth_none.c,v 1.4 1998/12/20 23:45:41 millert Exp $";
d79 1
a79 1
	if (ap == 0) {
d81 2
a82 2
		if (ap == 0)
			return (0);
d107 1
a107 1
	if (ap == 0)
@


1.4
log
@alphabetize function forward decls for prettiness
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: auth_none.c,v 1.3 1996/08/19 08:31:20 tholo Exp $";
d44 1
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: auth_none.c,v 1.2 1996/07/20 06:12:16 deraadt Exp $";
d51 1
a52 1
static void	authnone_destroy();
d54 1
a55 1
static bool_t	authnone_refresh();
@


1.2
log
@bcopy->memcpy & tag
@
text
@a0 3
/*	$OpenBSD: auth_none.c,v 1.3 1995/02/25 03:01:34 cgd Exp $	*/
/*	$NetBSD: auth_none.c,v 1.3 1995/02/25 03:01:34 cgd Exp $	*/

d31 2
a32 4
/*static char *sccsid = "from: @@(#)auth_none.c 1.19 87/08/11 Copyr 1984 Sun Micro";*/
/*static char *sccsid = "from: @@(#)auth_none.c	2.1 88/07/29 4.0 RPCSRC";*/
static char *rcsid = "$OpenBSD: auth_none.c,v 1.3 1995/02/25 03:01:34 cgd Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
d36 1
a36 1
static char *rcsid = "$NetBSD: auth_none.c,v 1.3 1995/02/25 03:01:34 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
