head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.6
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.24.0.6
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.20.0.8
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.6
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.19.0.10
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.8
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.6
	OPENBSD_5_0:1.19.0.4
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.2
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.18.0.20
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.16
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.18
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.14
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.12
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.10
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.8
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.6
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.4
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.6
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.8
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.11.0.6
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.4
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.10.0.8
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.6
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.4
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.9.0.4
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2015.09.01.17.31.39;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	wNBber7PJsiacqv9;

1.24
date	2014.11.05.21.06.51;	author sthen;	state Exp;
branches;
next	1.23;
commitid	rLmrH2L9ZR0IKWEN;

1.23
date	2014.11.04.17.17.05;	author millert;	state Exp;
branches;
next	1.22;
commitid	P3nQMDwHSFkpWVNt;

1.22
date	2014.10.22.23.10.30;	author millert;	state Exp;
branches;
next	1.21;
commitid	taUMIaedomzRsEDA;

1.21
date	2014.10.22.15.47.18;	author millert;	state Exp;
branches;
next	1.20;
commitid	2QblJr9PJJULM5Sf;

1.20
date	2013.04.16.12.15.55;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.21.01.40.22;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2005.09.10.23.04.26;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.08.08.05.35;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.01.07.44.04;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.31.03.27.23;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.03.22.04.28;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.27.24;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	99.11.23.22.37.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.03.19.00.27.24;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	96.11.14.06.33.12;	author etheisen;	state Exp;
branches;
next	1.8;

1.8
date	96.09.15.09.31.40;	author tholo;	state Exp;
branches;
next	1.7;

1.7
date	96.08.20.23.47.44;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.08.20.20.01.56;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.08.19.08.31.55;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.08.15.07.27.50;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.20.06.12.43;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.21.54.39;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Remove calls to perror(); the error returns are sufficient, and these
library may not assume stderr is useable.
ok millert miod beck
@
text
@/*	$OpenBSD: svc_run.c,v 1.24 2014/11/05 21:06:51 sthen Exp $ */

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This is the rpc server side idle loop
 * Wait for input, call server program.
 */
#include <rpc/rpc.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void
svc_run(void)
{
	struct pollfd *pfd = NULL, *newp;
	int nready, saved_max_pollfd = 0;

	for (;;) {
		if (svc_max_pollfd > saved_max_pollfd) {
			newp = reallocarray(pfd, svc_max_pollfd, sizeof(*pfd));
			if (newp == NULL) {
				free(pfd);
				return;			/* XXX */
			}
			saved_max_pollfd = svc_max_pollfd;
			pfd = newp;
		}
		memcpy(pfd, svc_pollfd, sizeof(*pfd) * svc_max_pollfd);

		nready = poll(pfd, svc_max_pollfd, INFTIM);
		switch (nready) {
		case -1:
			if (errno == EINTR)
				continue;
			free(pfd);
			return;					/* XXX */
		case 0:
			/* should not happen */
			continue;
		default:
			svc_getreq_poll(pfd, nready);
		}
	}
}
@


1.24
log
@missing pfd = newp, diagnosed by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svc_run.c,v 1.23 2014/11/04 17:17:05 millert Exp $ */
a55 1
				perror("svc_run");	/* XXX */
a67 1
			perror("svc_run: - poll failed");	/* XXX */
@


1.23
log
@Fix memory leak on reallocarray() failure introduced by conversion
from calloc().
@
text
@d1 1
a1 1
/*	$OpenBSD: svc_run.c,v 1.22 2014/10/22 23:10:30 millert Exp $ */
d60 1
@


1.22
log
@We prefer to use call reallocarray() with nmemb first and size second.
Requested by guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svc_run.c,v 1.21 2014/10/22 15:47:18 millert Exp $ */
d48 1
a48 1
	struct pollfd *pfd = NULL;
d53 3
a55 2
			pfd = reallocarray(pfd, svc_max_pollfd, sizeof(*pfd));
			if (pfd == NULL) {
d72 1
@


1.21
log
@Use reallocarray() instead of calloc() (originally was realloc).
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svc_run.c,v 1.20 2013/04/16 12:15:55 millert Exp $ */
d53 1
a53 1
			pfd = reallocarray(pfd, sizeof(*pfd), svc_max_pollfd);
@


1.20
log
@Replace a realloc() + memcpy() with calloc() + memcpy().
We don't need to zero pfd but using calloc() gets us overflow
protection for free.  OK chl@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svc_run.c,v 1.19 2010/09/01 14:43:34 millert Exp $ */
d53 1
a53 2
			free(pfd);
			pfd = calloc(sizeof(*pfd), svc_max_pollfd);
@


1.19
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svc_run.c,v 1.18 2005/12/21 01:40:22 millert Exp $ */
d48 1
a48 1
	struct pollfd *pfd = NULL, *newp;
d53 3
a55 3
			newp = realloc(pfd, sizeof(*pfd) * svc_max_pollfd);
			if (newp == NULL) {
				free(pfd);
a58 1
			pfd = newp;
@


1.18
log
@Userland programs should include <errno.h> not <sys/errno.h>
OK deraadt@@
@
text
@d1 2
a2 1
/*	$OpenBSD: svc_run.c,v 1.17 2005/09/10 23:04:26 brad Exp $ */
d4 28
a31 26
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 * 
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 * 
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 * 
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 * 
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 * 
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
@


1.17
log
@Use realloc() instead of malloc().

From: Alexander dot Farber at gmail dot com

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svc_run.c,v 1.16 2005/08/08 08:05:35 espie Exp $ */
d36 1
a36 1
#include <sys/errno.h>
@


1.16
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d45 1
a45 1
	struct pollfd *pfd = NULL;
d50 3
a52 3
			free(pfd);
			pfd = malloc(sizeof(*pfd) * svc_max_pollfd);
			if (pfd == NULL) {
d56 1
@


1.15
log
@ansify. ok deraadt@@ jaredy@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: svc_run.c,v 1.14 2003/12/31 03:27:23 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.14
log
@Implement svc_getreq_poll(3) and friends and use poll(2) instead of select(2)
in the libc rpc code.  The main difference between this and the previous
version is the use of a simple free list that simplifies the logic when
adding a socket to svc_pollfd.  I've also added code to pack svc_pollfd
when the free list gets too big.  The idea general idea is to keep
svc_pollfd as tightly packed as possible to make poll(2) efficient.
Tested by many people and OK deraadt@@
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.13 2002/08/03 22:04:28 millert Exp $";
d46 1
a46 1
svc_run()
@


1.13
log
@If malloc() fails, perror() and return.  This is non-optimal but because
svr_run() is void we have no way to pass back error status.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.12 2002/02/16 21:27:24 millert Exp $";
a44 5
extern int __svc_fdsetsize;
extern fd_set *__svc_fdset;

void svc_getreqset2(fd_set *, int);

d48 2
a49 1
	fd_set *fds;
d52 6
a57 6
		if (__svc_fdset) {
			int bytes = howmany(__svc_fdsetsize, NFDBITS) *
			    sizeof(fd_mask);
			if ((fds = (fd_set *)malloc(bytes)) == NULL) {
				perror("svc_run");
				return;
d59 6
a64 4
			memcpy(fds, __svc_fdset, bytes);
		} else
			fds = NULL;
		switch (select(svc_maxfd+1, fds, 0, 0, (struct timeval *)0)) {
d66 1
a66 3
			if (errno == EINTR) {
				if (fds)
					free(fds);
d68 3
a70 5
			}
			perror("svc_run: - select failed");
			if (fds)
				free(fds);
			return;
a71 2
			if (fds)
				free(fds);
d74 1
a74 2
			svc_getreqset2(fds, svc_maxfd+1);
			free(fds);
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.11 1999/11/23 22:37:28 deraadt Exp $";
d59 4
a62 1
			fds = (fd_set *)malloc(bytes);	/* XXX */
@


1.11
log
@mark some places that malloc is not checked
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.10 1998/03/19 00:27:24 millert Exp $";
d48 1
a48 1
void svc_getreqset2 __P((fd_set *, int));
@


1.10
log
@Some -Wall
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.9 1996/11/14 06:33:12 etheisen Exp $";
d59 1
a59 1
			fds = (fd_set *)malloc(bytes);
@


1.9
log
@memcpy needs string.h.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.8 1996/09/15 09:31:40 tholo Exp $";
d41 1
d47 2
@


1.8
log
@Remove dead code
Remove unused variables
Silence some warnings
lint(1) is your friend
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.7 1996/08/20 23:47:44 deraadt Exp $";
d42 1
@


1.7
log
@memset 0; also fix for byte order botch in __svc_fdset handling; thanks to mw@@openbsd.org
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.6 1996/08/20 20:01:56 deraadt Exp $";
d41 1
@


1.6
log
@deal with unintializated __svc_fdset
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.5 1996/08/19 08:31:55 tholo Exp $";
d52 4
a55 3
			fds = (fd_set *)malloc(howmany(__svc_fdsetsize, NBBY));
			memcpy(fds, __svc_fdset, howmany(__svc_fdsetsize,
			    NBBY));
@


1.5
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.4 1996/08/15 07:27:50 deraadt Exp $";
d51 6
a56 2
		fds = (fd_set *)malloc(howmany(__svc_fdsetsize, NBBY));
		memcpy(fds, __svc_fdset, howmany(__svc_fdsetsize, NBBY));
d60 2
a61 1
				free(fds);
d65 2
a66 1
			free(fds);
d69 2
a70 1
			free(fds);
@


1.4
log
@support descriptors > FD_SETSIZE and correct timeout handling
@
text
@a0 3
/*	$OpenBSD: svc_run.c,v 1.3 1996/07/20 06:12:43 deraadt Exp $	*/
/*	$NetBSD: svc_run.c,v 1.6 1995/02/25 03:02:00 cgd Exp $	*/

d31 2
a32 4
/*static char *sccsid = "from: @@(#)svc_run.c 1.1 87/10/13 Copyr 1984 Sun Micro";*/
/*static char *sccsid = "from: @@(#)svc_run.c	2.1 88/07/29 4.0 RPCSRC";*/
static char *rcsid = "$OpenBSD: svc_run.c,v 1.3 1996/07/20 06:12:43 deraadt Exp $";
#endif
@


1.3
log
@bcopy->memcpy & tag
@
text
@d1 1
a1 1
/*	$OpenBSD: svc_run.c,v 1.6 1995/02/25 03:02:00 cgd Exp $	*/
d36 1
a36 1
static char *rcsid = "$OpenBSD: svc_run.c,v 1.6 1995/02/25 03:02:00 cgd Exp $";
d47 3
d53 1
a53 1
	fd_set readfds;
d56 3
a58 3
		readfds = svc_fdset;
		switch (select(svc_maxfd+1, &readfds, 0, 0,
			       (struct timeval *)0)) {
d61 1
d65 1
d68 1
d71 2
a72 1
			svc_getreqset(&readfds);
@


1.2
log
@Pull prototypes into scope
Remove graticious casts
@
text
@d1 1
d36 1
a36 1
static char *rcsid = "$NetBSD: svc_run.c,v 1.6 1995/02/25 03:02:00 cgd Exp $";
@


1.1
log
@Initial revision
@
text
@d44 1
d53 1
a53 1
		switch (select(svc_maxfd+1, &readfds, (int *)0, (int *)0,
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

