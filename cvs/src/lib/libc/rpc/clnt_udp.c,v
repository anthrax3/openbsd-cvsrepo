head	1.32;
access;
symbols
	OPENBSD_6_1:1.32.0.8
	OPENBSD_6_1_BASE:1.32
	OPENBSD_6_0:1.32.0.4
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.26.0.18
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.16
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.12
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.26.0.10
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.26.0.8
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.6
	OPENBSD_5_0:1.26.0.4
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.25.0.6
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.4
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.24.0.12
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.10
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.8
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.6
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.4
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.2
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.23.0.4
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.2
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.21.0.2
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.20.0.4
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.2
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.19.0.6
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.19.0.4
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.17.0.4
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9:1.16.0.4
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_8:1.16.0.2
	OPENBSD_2_8_BASE:1.16
	OPENBSD_2_7:1.15.0.10
	OPENBSD_2_7_BASE:1.15
	OPENBSD_2_6:1.15.0.8
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.15.0.6
	OPENBSD_2_5_BASE:1.15
	OPENBSD_2_4:1.15.0.4
	OPENBSD_2_4_BASE:1.15
	OPENBSD_2_3:1.15.0.2
	OPENBSD_2_3_BASE:1.15
	OPENBSD_2_2:1.13.0.2
	OPENBSD_2_2_BASE:1.13
	OPENBSD_2_1:1.12.0.2
	OPENBSD_2_1_BASE:1.12
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.32
date	2015.11.01.03.45.29;	author guenther;	state Exp;
branches;
next	1.31;
commitid	CfNWDWdDpm7mVO8i;

1.31
date	2015.09.13.15.36.56;	author guenther;	state Exp;
branches;
next	1.30;
commitid	FxNpAvmgpSFQVav0;

1.30
date	2015.09.09.15.40.04;	author guenther;	state Exp;
branches;
next	1.29;
commitid	ciFCSwO7wkqzZ7sN;

1.29
date	2015.09.01.19.54.01;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	1kc6QzxBpplZkdjp;

1.28
date	2015.05.17.01.15.44;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	Gy9vPS3mSJz8AFc8;

1.27
date	2014.11.11.04.51.49;	author guenther;	state Exp;
branches;
next	1.26;
commitid	LYakkpp5DP76DW3H;

1.26
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2009.06.02.14.18.19;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.31.18.28.55;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2005.08.08.08.05.35;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2005.04.01.07.44.03;	author otto;	state Exp;
branches;
next	1.21;

1.21
date	2005.01.08.19.17.39;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.31.03.27.23;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.09.06.18.35.12;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.03.12.04.08;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.15.13.51.00;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2000.08.24.17.03.15;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	98.03.01.10.05.33;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	97.11.05.10.00.22;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.09.22.05.11.06;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	97.04.29.08.52.33;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.04.27.22.23.33;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.01.02.09.21.05;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	96.11.14.06.51.48;	author etheisen;	state Exp;
branches;
next	1.8;

1.8
date	96.09.02.05.01.12;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.08.20.23.47.40;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.08.19.08.31.30;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	96.08.15.07.27.48;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.20.06.12.25;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.29.18.48.53;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.21.54.38;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.32
log
@delete old lint ARGSUSED comments
@
text
@/*	$OpenBSD: clnt_udp.c,v 1.31 2015/09/13 15:36:56 guenther Exp $ */

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * clnt_udp.c, Implements a UDP/IP based, client side RPC.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <rpc/rpc.h>
#include <sys/socket.h>
#include <netdb.h>
#include <errno.h>
#include <rpc/pmap_clnt.h>

/*
 * UDP bases client side rpc operations
 */
static enum clnt_stat	clntudp_call(CLIENT *, u_long, xdrproc_t, caddr_t,
			    xdrproc_t, caddr_t, struct timeval);
static void		clntudp_abort(CLIENT *);
static void		clntudp_geterr(CLIENT *, struct rpc_err *);
static bool_t		clntudp_freeres(CLIENT *, xdrproc_t, caddr_t);
static bool_t           clntudp_control(CLIENT *, u_int, void *);
static void		clntudp_destroy(CLIENT *);

static struct clnt_ops udp_ops = {
	clntudp_call,
	clntudp_abort,
	clntudp_geterr,
	clntudp_freeres,
	clntudp_destroy,
	clntudp_control
};

/* 
 * Private data kept per client handle
 */
struct cu_data {
	int		   cu_sock;
	bool_t		   cu_closeit;
	struct sockaddr_in cu_raddr;
	int		   cu_rlen;
	struct timeval	   cu_wait;
	struct timeval     cu_total;
	struct rpc_err	   cu_error;
	XDR		   cu_outxdrs;
	u_int		   cu_xdrpos;
	u_int		   cu_sendsz;
	char		   *cu_outbuf;
	u_int		   cu_recvsz;
	char		   cu_inbuf[1];
};

/*
 * Create a UDP based client handle.
 * If *sockp<0, *sockp is set to a newly created UPD socket.
 * If raddr->sin_port is 0 a binder on the remote machine
 * is consulted for the correct port number.
 * NB: It is the client's responsibility to close *sockp, unless
 *	clntudp_bufcreate() was called with *sockp = -1 (so it created
 *	the socket), and CLNT_DESTROY() is used.
 * NB: The rpch->cl_auth is initialized to null authentication.
 *     Caller may wish to set this something more useful.
 *
 * wait is the amount of time used between retransmitting a call if
 * no response has been heard;  retransmission occurs until the actual
 * rpc call times out.
 *
 * sendsz and recvsz are the maximum allowable packet sizes that can be
 * sent and received.
 */
CLIENT *
clntudp_bufcreate(struct sockaddr_in *raddr, u_long program, u_long version,
    struct timeval wait, int *sockp, u_int sendsz, u_int recvsz)
{
	CLIENT *cl;
	struct cu_data *cu = NULL;
	struct timeval now;
	struct rpc_msg call_msg;

	cl = (CLIENT *)mem_alloc(sizeof(CLIENT));
	if (cl == NULL) {
		rpc_createerr.cf_stat = RPC_SYSTEMERROR;
		rpc_createerr.cf_error.re_errno = errno;
		goto fooy;
	}
	sendsz = ((sendsz + 3) / 4) * 4;
	recvsz = ((recvsz + 3) / 4) * 4;
	cu = (struct cu_data *)mem_alloc(sizeof(*cu) + sendsz + recvsz);
	if (cu == NULL) {
		rpc_createerr.cf_stat = RPC_SYSTEMERROR;
		rpc_createerr.cf_error.re_errno = errno;
		goto fooy;
	}
	cu->cu_outbuf = &cu->cu_inbuf[recvsz];

	(void)gettimeofday(&now, NULL);
	if (raddr->sin_port == 0) {
		u_short port;
		if ((port =
		    pmap_getport(raddr, program, version, IPPROTO_UDP)) == 0) {
			goto fooy;
		}
		raddr->sin_port = htons(port);
	}
	cl->cl_ops = &udp_ops;
	cl->cl_private = (caddr_t)cu;
	cu->cu_raddr = *raddr;
	cu->cu_rlen = sizeof (cu->cu_raddr);
	cu->cu_wait = wait;
	cu->cu_total.tv_sec = -1;
	cu->cu_total.tv_usec = -1;
	cu->cu_sendsz = sendsz;
	cu->cu_recvsz = recvsz;
	call_msg.rm_xid = arc4random();
	call_msg.rm_direction = CALL;
	call_msg.rm_call.cb_rpcvers = RPC_MSG_VERSION;
	call_msg.rm_call.cb_prog = program;
	call_msg.rm_call.cb_vers = version;
	xdrmem_create(&(cu->cu_outxdrs), cu->cu_outbuf,
	    sendsz, XDR_ENCODE);
	if (!xdr_callhdr(&(cu->cu_outxdrs), &call_msg)) {
		goto fooy;
	}
	cu->cu_xdrpos = XDR_GETPOS(&(cu->cu_outxdrs));
	if (*sockp < 0) {
		*sockp = socket(AF_INET, SOCK_DGRAM | SOCK_NONBLOCK,
		    IPPROTO_UDP);
		if (*sockp < 0) {
			rpc_createerr.cf_stat = RPC_SYSTEMERROR;
			rpc_createerr.cf_error.re_errno = errno;
			goto fooy;
		}
		/* attempt to bind to priv port */
		(void)bindresvport(*sockp, NULL);
		cu->cu_closeit = TRUE;
	} else {
		cu->cu_closeit = FALSE;
	}
	cu->cu_sock = *sockp;
	cl->cl_auth = authnone_create();
	if (cl->cl_auth == NULL) {
		rpc_createerr.cf_stat = RPC_SYSTEMERROR;
		rpc_createerr.cf_error.re_errno = errno;
		goto fooy;
	}
	return (cl);
fooy:
	if (cu)
		mem_free((caddr_t)cu, sizeof(*cu) + sendsz + recvsz);
	if (cl)
		mem_free((caddr_t)cl, sizeof(CLIENT));
	return (NULL);
}
DEF_WEAK(clntudp_bufcreate);

CLIENT *
clntudp_create(struct sockaddr_in *raddr, u_long program, u_long version,
    struct timeval wait, int *sockp)
{

	return(clntudp_bufcreate(raddr, program, version, wait, sockp,
	    UDPMSGSIZE, UDPMSGSIZE));
}
DEF_WEAK(clntudp_create);

static enum clnt_stat 
clntudp_call(CLIENT *cl,	/* client handle */
    u_long proc,		/* procedure number */
    xdrproc_t xargs,		/* xdr routine for args */
    caddr_t argsp,		/* pointer to args */
    xdrproc_t xresults,		/* xdr routine for results */
    caddr_t resultsp,		/* pointer to results */
    struct timeval utimeout)	/* seconds to wait before giving up */
{
	struct cu_data *cu = (struct cu_data *)cl->cl_private;
	XDR *xdrs;
	int outlen;
	int inlen;
	socklen_t fromlen;
	struct pollfd pfd[1];
	struct sockaddr_in from;
	struct rpc_msg reply_msg;
	XDR reply_xdrs;
	struct timeval time_waited, start, after, tmp1, tmp2;
	bool_t ok;
	int nrefreshes = 2;	/* number of times to refresh cred */
	struct timeval timeout;

	if (cu->cu_total.tv_usec == -1)
		timeout = utimeout;     /* use supplied timeout */
	else
		timeout = cu->cu_total; /* use default timeout */

	pfd[0].fd = cu->cu_sock;
	pfd[0].events = POLLIN;
	timerclear(&time_waited);
call_again:
	xdrs = &(cu->cu_outxdrs);
	xdrs->x_op = XDR_ENCODE;
	XDR_SETPOS(xdrs, cu->cu_xdrpos);
	/*
	 * the transaction is the first thing in the out buffer
	 */
	(*(u_short *)(cu->cu_outbuf))++;
	if (!XDR_PUTLONG(xdrs, (long *)&proc) ||
	    !AUTH_MARSHALL(cl->cl_auth, xdrs) ||
	    !(*xargs)(xdrs, argsp)) {
		return (cu->cu_error.re_status = RPC_CANTENCODEARGS);
	}
	outlen = (int)XDR_GETPOS(xdrs);

send_again:
	if (sendto(cu->cu_sock, cu->cu_outbuf, outlen, 0,
	    (struct sockaddr *)&(cu->cu_raddr), cu->cu_rlen) != outlen) {
		cu->cu_error.re_errno = errno;
		return (cu->cu_error.re_status = RPC_CANTSEND);
	}

	/*
	 * Hack to provide rpc-based message passing
	 */
	if (!timerisset(&timeout))
		return (cu->cu_error.re_status = RPC_TIMEDOUT);

	/*
	 * sub-optimal code appears here because we have
	 * some clock time to spare while the packets are in flight.
	 * (We assume that this is actually only executed once.)
	 */
	reply_msg.acpted_rply.ar_verf = _null_auth;
	reply_msg.acpted_rply.ar_results.where = resultsp;
	reply_msg.acpted_rply.ar_results.proc = xresults;

	gettimeofday(&start, NULL);
	for (;;) {
		switch (poll(pfd, 1,
		    cu->cu_wait.tv_sec * 1000 + cu->cu_wait.tv_usec / 1000)) {
		case 0:
			timeradd(&time_waited, &cu->cu_wait, &tmp1);
			time_waited = tmp1;
			if (timercmp(&time_waited, &timeout, <))
				goto send_again;
			return (cu->cu_error.re_status = RPC_TIMEDOUT);
		case 1:
			if (pfd[0].revents & POLLNVAL)
				errno = EBADF;
			else if (pfd[0].revents & POLLERR)
				errno = EIO;
			else
				break;
			/* FALLTHROUGH */
		case -1:
			if (errno == EINTR) {
				gettimeofday(&after, NULL);
				timersub(&after, &start, &tmp1);
				timeradd(&time_waited, &tmp1, &tmp2);
				time_waited = tmp2;
				if (timercmp(&time_waited, &timeout, <))
					continue;
				return (cu->cu_error.re_status = RPC_TIMEDOUT);
			}
			cu->cu_error.re_errno = errno;
			return (cu->cu_error.re_status = RPC_CANTRECV);
		}

		do {
			fromlen = sizeof(struct sockaddr);
			inlen = recvfrom(cu->cu_sock, cu->cu_inbuf, 
			    (int) cu->cu_recvsz, 0,
			    (struct sockaddr *)&from, &fromlen);
		} while (inlen < 0 && errno == EINTR);
		if (inlen < 0) {
			if (errno == EWOULDBLOCK)
				continue;
			cu->cu_error.re_errno = errno;
			return (cu->cu_error.re_status = RPC_CANTRECV);
		}
		if (inlen < sizeof(u_int32_t))
			continue;	
		/* see if reply transaction id matches sent id */
		if (((struct rpc_msg *)(cu->cu_inbuf))->rm_xid !=
		    ((struct rpc_msg *)(cu->cu_outbuf))->rm_xid)
			continue;
		/* we now assume we have the proper reply */
		break;
	}

	/*
	 * now decode and validate the response
	 */
	xdrmem_create(&reply_xdrs, cu->cu_inbuf, (u_int)inlen, XDR_DECODE);
	ok = xdr_replymsg(&reply_xdrs, &reply_msg);
	/* XDR_DESTROY(&reply_xdrs);  save a few cycles on noop destroy */
	if (ok) {
#if 0
		/*
		 * XXX Would like to check these, but call_msg is not
		 * around.
		 */
		if (reply_msg.rm_call.cb_prog != call_msg.rm_call.cb_prog ||
		    reply_msg.rm_call.cb_vers != call_msg.rm_call.cb_vers ||
		    reply_msg.rm_call.cb_proc != call_msg.rm_call.cb_proc) {
			goto call_again;	/* XXX spin? */
		}
#endif

		_seterr_reply(&reply_msg, &(cu->cu_error));
		if (cu->cu_error.re_status == RPC_SUCCESS) {
			if (!AUTH_VALIDATE(cl->cl_auth,
			    &reply_msg.acpted_rply.ar_verf)) {
				cu->cu_error.re_status = RPC_AUTHERROR;
				cu->cu_error.re_why = AUTH_INVALIDRESP;
			}
			if (reply_msg.acpted_rply.ar_verf.oa_base != NULL) {
				xdrs->x_op = XDR_FREE;
				(void)xdr_opaque_auth(xdrs,
				    &(reply_msg.acpted_rply.ar_verf));
			} 
		} else {
			/* maybe our credentials need to be refreshed ... */
			if (nrefreshes > 0 && AUTH_REFRESH(cl->cl_auth)) {
				nrefreshes--;
				goto call_again;
			}
		}
	} else {
		/* xdr_replymsg() may have left some things allocated */
		int op = reply_xdrs.x_op;
		reply_xdrs.x_op = XDR_FREE;
		xdr_replymsg(&reply_xdrs, &reply_msg);
		reply_xdrs.x_op = op;
		cu->cu_error.re_status = RPC_CANTDECODERES;
	}

	return (cu->cu_error.re_status);
}

static void
clntudp_geterr(CLIENT *cl, struct rpc_err *errp)
{
	struct cu_data *cu = (struct cu_data *)cl->cl_private;

	*errp = cu->cu_error;
}


static bool_t
clntudp_freeres(CLIENT *cl, xdrproc_t xdr_res, caddr_t res_ptr)
{
	struct cu_data *cu = (struct cu_data *)cl->cl_private;
	XDR *xdrs = &(cu->cu_outxdrs);

	xdrs->x_op = XDR_FREE;
	return ((*xdr_res)(xdrs, res_ptr));
}

static void 
clntudp_abort(CLIENT *clnt)
{
}

static bool_t
clntudp_control(CLIENT *cl, u_int request, void *info)
{
	struct cu_data *cu = (struct cu_data *)cl->cl_private;

	switch (request) {
	case CLSET_TIMEOUT:
		cu->cu_total = *(struct timeval *)info;
		break;
	case CLGET_TIMEOUT:
		*(struct timeval *)info = cu->cu_total;
		break;
	case CLSET_RETRY_TIMEOUT:
		cu->cu_wait = *(struct timeval *)info;
		break;
	case CLGET_RETRY_TIMEOUT:
		*(struct timeval *)info = cu->cu_wait;
		break;
	case CLGET_SERVER_ADDR:
		*(struct sockaddr_in *)info = cu->cu_raddr;
		break;
	default:
		return (FALSE);
	}
	return (TRUE);
}
	
static void
clntudp_destroy(CLIENT *cl)
{
	struct cu_data *cu = (struct cu_data *)cl->cl_private;

	if (cu->cu_closeit && cu->cu_sock != -1) {
		(void)close(cu->cu_sock);
	}
	XDR_DESTROY(&(cu->cu_outxdrs));
	mem_free((caddr_t)cu, (sizeof(*cu) + cu->cu_sendsz + cu->cu_recvsz));
	mem_free((caddr_t)cl, sizeof(CLIENT));
}
@


1.31
log
@Wrap <rpc/*.h> so that calls go direct and the symbols are all weak.
Hide __xprt_register() and _authenticate(); truncate <rpc/svc_auth.h>

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_udp.c,v 1.30 2015/09/09 15:40:04 guenther Exp $ */
a391 1
/*ARGSUSED*/
@


1.30
log
@Use SOCK_NONBLOCK in a couple more places

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_udp.c,v 1.29 2015/09/01 19:54:01 deraadt Exp $ */
d189 1
d199 1
@


1.29
log
@Remove all bogus writes to stderr.  Only explicit requests should
go that way.
ok miod beck
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_udp.c,v 1.28 2015/05/17 01:15:44 deraadt Exp $ */
d161 2
a162 3
		int fl;

		*sockp = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
a169 18
		/* the sockets rpc controls are non-blocking */

		fl = fcntl(*sockp, F_GETFL);
		if (fl == -1) {
			close(*sockp);
			rpc_createerr.cf_stat = RPC_SYSTEMERROR;
			rpc_createerr.cf_error.re_errno = errno;
			goto fooy;
		}
		if ((fl & O_NONBLOCK) == 0) {
			fl |= O_NONBLOCK;
			if (fcntl(*sockp, F_SETFL, fl) == -1) {
				close(*sockp);
				rpc_createerr.cf_stat = RPC_SYSTEMERROR;
				rpc_createerr.cf_error.re_errno = errno;
				goto fooy;
			}
		}
@


1.28
log
@Use fcntl() to set non-blocking-mode, rather ioctl().  This has a better
chance of working in systrace restricted environments.
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_udp.c,v 1.27 2014/11/11 04:51:49 guenther Exp $ */
a116 1
		(void) fprintf(stderr, "clntudp_create: out of memory\n");
a124 1
		(void) fprintf(stderr, "clntudp_create: out of memory\n");
@


1.27
log
@Merge from NetBSD from 1999-03-25:"
 * don't close the socket unless it was opened by the function
 * note (in the comments) that the client is responsible for closing
  the socket if they opened it, or they didn't use CLNT_DESTROY()

  fixes a couple of unnecessary closing of already-closed sockets.
  noted by: Matthias Drochner <M.Drochner@@fz-juelich.de>"

tested by many in snaps
ok schwarze@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_udp.c,v 1.26 2010/09/01 14:43:34 millert Exp $ */
d42 1
a44 1
#include <sys/ioctl.h>
d163 1
a163 1
		int dontblock = 1;
d174 17
a190 1
		(void)ioctl(*sockp, FIONBIO, (char *) &dontblock);
@


1.26
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_udp.c,v 1.25 2009/06/02 14:18:19 schwarze Exp $ */
d93 3
a95 1
 * NB: It is the clients responsibility to close *sockp.
d433 1
a433 1
	if (cu->cu_closeit) {
@


1.25
log
@When authnone_create fails, do not leave behind a NULL cl_auth attribute,
because that one will typically derefenced later without any checking.
Instead, flag the error condition and bail out cleanly.
useful feedback from kjell@@ and ok millert@@
@
text
@d1 2
a2 1
/*	$OpenBSD: clnt_udp.c,v 1.24 2006/03/31 18:28:55 deraadt Exp $ */
d4 28
a31 26
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 * 
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 * 
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 * 
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 * 
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 * 
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
a35 2
 *
 * Copyright (C) 1984, Sun Microsystems, Inc.
@


1.24
log
@sprinkle a bit of ARGSUSED
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_udp.c,v 1.23 2005/08/08 08:05:35 espie Exp $ */
d178 5
@


1.23
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d387 1
@


1.22
log
@ansify. ok deraadt@@ jaredy@@
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.21 2005/01/08 19:17:39 krw Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.21
log
@Bit of KNF - replace (<type> *)0 and (<type> *)NULL with NULL. Pointed
out by mickey@@, seconded by millert@@.

ok deraadt@@.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.20 2003/12/31 03:27:23 millert Exp $";
d107 2
a108 8
clntudp_bufcreate(raddr, program, version, wait, sockp, sendsz, recvsz)
	struct sockaddr_in *raddr;
	u_long program;
	u_long version;
	struct timeval wait;
	int *sockp;
	u_int sendsz;
	u_int recvsz;
d191 2
a192 6
clntudp_create(raddr, program, version, wait, sockp)
	struct sockaddr_in *raddr;
	u_long program;
	u_long version;
	struct timeval wait;
	int *sockp;
d200 7
a206 8
clntudp_call(cl, proc, xargs, argsp, xresults, resultsp, utimeout)
	CLIENT	*cl;		/* client handle */
	u_long		proc;		/* procedure number */
	xdrproc_t	xargs;		/* xdr routine for args */
	caddr_t		argsp;		/* pointer to args */
	xdrproc_t	xresults;	/* xdr routine for results */
	caddr_t		resultsp;	/* pointer to results */
	struct timeval	utimeout;	/* seconds to wait before giving up */
d372 1
a372 3
clntudp_geterr(cl, errp)
	CLIENT *cl;
	struct rpc_err *errp;
d381 1
a381 4
clntudp_freeres(cl, xdr_res, res_ptr)
	CLIENT *cl;
	xdrproc_t xdr_res;
	caddr_t res_ptr;
d396 1
a396 4
clntudp_control(cl, request, info)
	CLIENT *cl;
	u_int request;
	void *info;
@


1.20
log
@Implement svc_getreq_poll(3) and friends and use poll(2) instead of select(2)
in the libc rpc code.  The main difference between this and the previous
version is the use of a simple free list that simplifies the logic when
adding a socket to svc_pollfd.  I've also added code to pack svc_pollfd
when the free list gets too big.  The idea general idea is to keep
svc_pollfd as tightly packed as possible to make poll(2) efficient.
Tested by many people and OK deraadt@@
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.19 2002/09/06 18:35:12 deraadt Exp $";
d139 1
a139 1
	(void)gettimeofday(&now, (struct timezone *)0);
d178 1
a178 1
		(void)bindresvport(*sockp, (struct sockaddr_in *)0);
d193 1
a193 1
	return ((CLIENT *)NULL);
@


1.19
log
@use socklen_t where needed; henning pvalchev ok
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.18 2002/06/03 12:04:08 deraadt Exp $";
d224 1
a224 1
	fd_set *fds, readfds;
d238 2
a239 11
	if (cu->cu_sock+1 > FD_SETSIZE) {
		int bytes = howmany(cu->cu_sock+1, NFDBITS) * sizeof(fd_mask);
		fds = (fd_set *)malloc(bytes);
		if (fds == NULL)
			return (cu->cu_error.re_status = RPC_CANTSEND);
		memset(fds, 0, bytes);
	} else {
		fds = &readfds;
		FD_ZERO(fds);
	}

a251 2
		if (fds != &readfds)
			free(fds);
a259 2
		if (fds != &readfds)
			free(fds);
d266 1
a266 3
	if (!timerisset(&timeout)) {
		if (fds != &readfds)
			free(fds);
a267 1
	}
d280 2
a281 3
		/* XXX we know the other bits are still clear */
		FD_SET(cu->cu_sock, fds);
		switch (select(cu->cu_sock+1, fds, NULL, NULL, &cu->cu_wait)) {
a286 2
			if (fds != &readfds)
				free(fds);
d288 8
a303 2
				if (fds != &readfds)
					free(fds);
a306 2
			if (fds != &readfds)
				free(fds);
a319 2
			if (fds != &readfds)
				free(fds);
a378 2
	if (fds != &readfds)
		free(fds);
@


1.18
log
@compatiblity -> compatibility
decriptor -> descriptor
authentciated -> authenticated
transmition -> transmission
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.17 2001/09/15 13:51:00 deraadt Exp $";
d223 1
a223 1
	int fromlen;
@


1.17
log
@prototype cleanup
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.16 2000/08/24 17:03:15 deraadt Exp $";
d100 1
a100 1
 * no response has been heard;  retransmition occurs until the actual
@


1.16
log
@uninit variables
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.15 1998/03/01 10:05:33 deraadt Exp $";
d54 7
a60 6
static enum clnt_stat	clntudp_call();
static void		clntudp_abort();
static void		clntudp_geterr();
static bool_t		clntudp_freeres();
static bool_t           clntudp_control();
static void		clntudp_destroy();
d112 1
a112 1
	register int *sockp;
d117 1
a117 1
	register struct cu_data *cu = NULL;
d202 1
a202 1
	register int *sockp;
d211 1
a211 1
	register CLIENT	*cl;		/* client handle */
d219 4
a222 4
	register struct cu_data *cu = (struct cu_data *)cl->cl_private;
	register XDR *xdrs;
	register int outlen;
	register int inlen;
d406 1
a406 1
	register struct cu_data *cu = (struct cu_data *)cl->cl_private;
d418 2
a419 2
	register struct cu_data *cu = (struct cu_data *)cl->cl_private;
	register XDR *xdrs = &(cu->cu_outxdrs);
d426 1
a426 2
clntudp_abort(/*h*/)
	/*CLIENT *h;*/
d433 2
a434 2
	int request;
	char *info;
d436 1
a436 1
	register struct cu_data *cu = (struct cu_data *)cl->cl_private;
d461 1
a461 2
clntudp_destroy(cl)
	CLIENT *cl;
d463 1
a463 1
	register struct cu_data *cu = (struct cu_data *)cl->cl_private;
@


1.15
log
@match xid nicer; plus notes for later work
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.14 1997/11/05 10:00:22 deraadt Exp $";
d116 1
a116 1
	register struct cu_data *cu;
@


1.14
log
@if xdr_replymsg() fails, it can leave memory still allocated.  thus we
need to go XDR_FREE it; wpaul@@freebsd.  clnt_raw.c also appears to have
the same problem, and there is precedent for the solution in various
other rpc code.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.13 1997/09/22 05:11:06 millert Exp $";
d163 1
a163 1
	if (! xdr_callhdr(&(cu->cu_outxdrs), &call_msg)) {
d341 3
a343 2
		if (*((u_int32_t *)(cu->cu_inbuf)) != *((u_int32_t *)(cu->cu_outbuf)))
			continue;	
d355 12
d369 1
a369 1
			if (! AUTH_VALIDATE(cl->cl_auth,
@


1.13
log
@Some -Wall.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.12 1997/04/29 08:52:33 deraadt Exp $";
d373 6
a378 1
	} else
d380 1
@


1.12
log
@something is wrong with this level of randomness; let 2.1 go out with this "problem"
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.10 1997/01/02 09:21:05 deraadt Exp $";
d42 1
@


1.11
log
@re-randomize xid on reuse of a CLIENT *; pointed out by adam@@math.tau.ac.il
@
text
@a226 1
	u_int32_t *msg_x_id = (u_int32_t *)(cu->cu_outbuf);	/* yuk */
d252 4
a255 1
	*msg_x_id = arc4random();
d340 1
a340 1
		if (*((u_int32_t *)(cu->cu_inbuf)) != *msg_x_id)
@


1.10
log
@use arc4random for xid generation
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.9 1996/11/14 06:51:48 etheisen Exp $";
d227 1
d253 1
a253 4
	/*
	 * the transaction is the first thing in the out buffer
	 */
	(*(u_short *)(cu->cu_outbuf))++;
d338 1
a338 1
		if (*((u_int32_t *)(cu->cu_inbuf)) != *((u_int32_t *)(cu->cu_outbuf)))
@


1.9
log
@Missed one cast.
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.8 1996/09/02 05:01:12 deraadt Exp $";
a117 4
	static u_int32_t disrupt;

	if (disrupt == 0)
		disrupt = (u_int32_t)(long)raddr;
d155 1
a155 1
	call_msg.rm_xid = (++disrupt) ^ getpid() ^ now.tv_sec ^ now.tv_usec;
@


1.8
log
@perturb xid further. confuse the world
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.7 1996/08/20 23:47:40 deraadt Exp $";
d121 1
a121 1
		disrupt = (u_int32_t)raddr;
@


1.7
log
@memset 0; also fix for byte order botch in __svc_fdset handling; thanks to mw@@openbsd.org
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.6 1996/08/19 08:31:30 tholo Exp $";
d118 4
d159 1
a159 1
	call_msg.rm_xid = getpid() ^ now.tv_sec ^ now.tv_usec;
@


1.6
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.5 1996/08/15 07:27:48 deraadt Exp $";
d237 2
a238 1
		fds = (fd_set *)malloc(howmany(cu->cu_sock+1, NBBY));
d241 1
a241 1
		memset(fds, '\0', howmany(cu->cu_sock+1, NBBY));
@


1.5
log
@support descriptors > FD_SETSIZE and correct timeout handling
@
text
@a0 3
/*	$OpenBSD: clnt_udp.c,v 1.4 1996/07/20 06:12:25 deraadt Exp $	*/
/*	$NetBSD: clnt_udp.c,v 1.4 1995/02/25 03:01:42 cgd Exp $	*/

d31 2
a32 4
/*static char *sccsid = "from: @@(#)clnt_udp.c 1.39 87/08/11 Copyr 1984 Sun Micro";*/
/*static char *sccsid = "from: @@(#)clnt_udp.c	2.2 88/08/01 4.0 RPCSRC";*/
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.4 1996/07/20 06:12:25 deraadt Exp $";
#endif
@


1.4
log
@bcopy->memcpy & tag
@
text
@d1 1
a1 1
/*	$OpenBSD: clnt_udp.c,v 1.4 1995/02/25 03:01:42 cgd Exp $	*/
d36 1
a36 1
static char *rcsid = "$OpenBSD: clnt_udp.c,v 1.4 1995/02/25 03:01:42 cgd Exp $";
d227 1
a227 2
	fd_set readfds;
	fd_set mask;
d231 1
a231 1
	struct timeval time_waited;
d236 1
a236 1
	if (cu->cu_total.tv_usec == -1) {
d238 8
d247 2
a248 1
		timeout = cu->cu_total; /* use default timeout */
d251 1
a251 2
	time_waited.tv_sec = 0;
	time_waited.tv_usec = 0;
d260 5
a264 3
	if ((! XDR_PUTLONG(xdrs, (long *)&proc)) ||
	    (! AUTH_MARSHALL(cl->cl_auth, xdrs)) ||
	    (! (*xargs)(xdrs, argsp)))
d266 1
d271 1
a271 2
	    (struct sockaddr *)&(cu->cu_raddr), cu->cu_rlen)
	    != outlen) {
d273 2
d281 3
a283 1
	if (timeout.tv_sec == 0 && timeout.tv_usec == 0) {
d286 1
d295 2
a296 2
	FD_ZERO(&mask);
	FD_SET(cu->cu_sock, &mask);
d298 3
a300 4
		readfds = mask;
		switch (select(cu->cu_sock+1, &readfds, NULL, 
			       NULL, &(cu->cu_wait))) {

d302 6
a307 10
			time_waited.tv_sec += cu->cu_wait.tv_sec;
			time_waited.tv_usec += cu->cu_wait.tv_usec;
			while (time_waited.tv_usec >= 1000000) {
				time_waited.tv_sec++;
				time_waited.tv_usec -= 1000000;
			}
			if ((time_waited.tv_sec < timeout.tv_sec) ||
				((time_waited.tv_sec == timeout.tv_sec) &&
				(time_waited.tv_usec < timeout.tv_usec)))
				goto send_again;	
a308 5

		/*
		 * buggy in other cases because time_waited is not being
		 * updated.
		 */
d310 11
a320 2
			if (errno == EINTR)
				continue;	
d322 2
d326 1
d330 2
a331 2
				(int) cu->cu_recvsz, 0,
				(struct sockaddr *)&from, &fromlen);
d335 1
a335 1
				continue;	
d337 2
d360 1
a360 1
				&reply_msg.acpted_rply.ar_verf)) {
d369 1
a369 2
		}  /* end successful completion */
		else {
d375 2
a376 3
		}  /* end of unsuccessful completion */
	}  /* end of valid reply message */
	else {
d378 3
a380 1
	}
@


1.3
log
@typo
@
text
@d1 1
d36 1
a36 1
static char *rcsid = "$NetBSD: clnt_udp.c,v 1.4 1995/02/25 03:01:42 cgd Exp $";
@


1.2
log
@Pull prototypes into scope
Remove graticious casts
@
text
@d179 1
a179 1
		/* attempt to bind to prov port */
@


1.1
log
@Initial revision
@
text
@d46 1
d252 1
a252 1
	if ((! XDR_PUTLONG(xdrs, &proc)) ||
d284 2
a285 2
		switch (select(cu->cu_sock+1, &readfds, (int *)NULL, 
			       (int *)NULL, &(cu->cu_wait))) {
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

