head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.22
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.14
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.22
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.18
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.20
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.6.0.12
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.10
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2017.01.21.08.29.13;	author krw;	state Exp;
branches;
next	1.13;
commitid	F2YefviqXngZtOa0;

1.13
date	2016.12.20.22.19.08;	author krw;	state Exp;
branches;
next	1.12;
commitid	he6NK9EzIygmfrzo;

1.12
date	2015.09.13.15.36.56;	author guenther;	state Exp;
branches;
next	1.11;
commitid	FxNpAvmgpSFQVav0;

1.11
date	2015.09.01.19.54.01;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	1kc6QzxBpplZkdjp;

1.10
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.08.08.05.36;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.05.08.39.10;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.01.07.44.04;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.01.01.05.24;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.29.23.00.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.15.13.51.01;	author deraadt;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	96.08.19.08.32.02;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.20.06.12.50;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.10;	author deraadt;	state Exp;
branches;
next	;

1.4.2.1
date	2002.07.30.07.30.28;	author miod;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2002.08.01.05.37.43;	author miod;	state Exp;
branches;
next	;

1.4.4.1
date	2002.07.30.14.49.20;	author jason;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2002.08.01.14.26.11;	author jason;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Nuke whitespace foolish enough to expose itself during the great
"warning:" rectification.
@
text
@/*	$OpenBSD: xdr_array.c,v 1.13 2016/12/20 22:19:08 krw Exp $ */

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * xdr_array.c, Generic XDR routines implementation.
 *
 * These are the "non-trivial" xdr primitives used to serialize and de-serialize
 * arrays.  See xdr.h for more info on the interface to xdr.
 */



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <rpc/types.h>
#include <rpc/xdr.h>

/*
 * XDR an array of arbitrary elements
 * *addrp is a pointer to the array, *sizep is the number of elements.
 * If addrp is NULL (*sizep * elsize) bytes are allocated.
 * elsize is the size (in bytes) of each element, and elproc is the
 * xdr procedure to call to handle each element of the array.
 */
bool_t
xdr_array(XDR *xdrs,
    caddr_t *addrp,	/* array pointer */
    u_int *sizep,	/* number of elements */
    u_int maxsize,	/* max numberof elements */
    u_int elsize,	/* size in bytes of each element */
    xdrproc_t elproc)	/* xdr routine to handle each element */
{
	caddr_t target = *addrp;
	u_int nodesize, c, i;
	bool_t stat = TRUE;

	/* like strings, arrays are really counted arrays */
	if (!xdr_u_int(xdrs, sizep))
		return (FALSE);

	c = *sizep;
	if ((c > maxsize || c > UINT_MAX/elsize) &&
	    xdrs->x_op != XDR_FREE)
		return (FALSE);
	nodesize = c * elsize;

	/*
	 * if we are deserializing, we may need to allocate an array.
	 * We also save time by checking for a null array if we are freeing.
	 */
	if (target == NULL) {
		switch (xdrs->x_op) {
		case XDR_DECODE:
			if (c == 0)
				return (TRUE);
			*addrp = target = mem_alloc(nodesize);
			if (target == NULL)
				return (FALSE);
			memset(target, 0, nodesize);
			break;
		case XDR_FREE:
			return (TRUE);
		default:
			break;
		}
	}

	/*
	 * now we xdr each element of array
	 */
	for (i = 0; (i < c) && stat; i++) {
		stat = (*elproc)(xdrs, target);
		target += elsize;
	}

	/*
	 * the array may need freeing
	 */
	if (xdrs->x_op == XDR_FREE) {
		mem_free(*addrp, nodesize);
		*addrp = NULL;
	}
	return (stat);
}
DEF_WEAK(xdr_array);

/*
 * xdr_vector():
 *
 * XDR a fixed length array. Unlike variable-length arrays,
 * the storage of fixed length arrays is static and unfreeable.
 * > basep: base of the array
 * > size: size of the array
 * > elemsize: size of each element
 * > xdr_elem: routine to XDR each element
 */
bool_t
xdr_vector(XDR *xdrs, char *basep, u_int nelem, u_int elemsize,
    xdrproc_t xdr_elem)
{
	char *elptr;
	u_int i;

	elptr = basep;
	for (i = 0; i < nelem; i++) {
		if (!(*xdr_elem)(xdrs, elptr))
			return(FALSE);
		elptr += elemsize;
	}
	return(TRUE);
}
@


1.13
log
@Add 'default:' cases to switch statements that gcc whines about.

ok jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_array.c,v 1.12 2015/09/13 15:36:56 guenther Exp $ */
d99 1
a99 1
	
d142 1
a142 1
	return(TRUE);	
@


1.12
log
@Wrap <rpc/*.h> so that calls go direct and the symbols are all weak.
Hide __xprt_register() and _authenticate(); truncate <rpc/svc_auth.h>

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_array.c,v 1.11 2015/09/01 19:54:01 deraadt Exp $ */
d95 2
@


1.11
log
@Remove all bogus writes to stderr.  Only explicit requests should
go that way.
ok miod beck
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_array.c,v 1.10 2010/09/01 14:43:34 millert Exp $ */
d115 1
@


1.10
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xdr_array.c,v 1.9 2005/08/08 08:05:36 espie Exp $ */
d89 1
a89 3
			if (target == NULL) {
				(void) fprintf(stderr, 
				    "xdr_array: out of memory\n");
a90 1
			}
@


1.9
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 2
a2 1
/*	$OpenBSD$ */
d4 28
a31 26
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 * 
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 * 
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 * 
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 * 
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 * 
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
a35 2
 *
 * Copyright (C) 1984, Sun Microsystems, Inc.
@


1.8
log
@impelmentation -> implementation

yes, new typo for an old friend.
@
text
@d1 1
a29 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.7 2005/04/01 07:44:04 otto Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.7
log
@ansify. ok deraadt@@ jaredy@@
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.6 2002/08/01 01:05:24 deraadt Exp $";
d35 1
a35 1
 * xdr_array.c, Generic XDR routines impelmentation.
@


1.6
log
@KNF and correct overflow fix; jhutz@@cmu.edu
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.5 2002/07/29 23:00:36 deraadt Exp $";
d60 6
a65 7
xdr_array(xdrs, addrp, sizep, maxsize, elsize, elproc)
	XDR *xdrs;
	caddr_t *addrp;		/* array pointer */
	u_int *sizep;		/* number of elements */
	u_int maxsize;		/* max numberof elements */
	u_int elsize;		/* size in bytes of each element */
	xdrproc_t elproc;	/* xdr routine to handle each element */
d132 2
a133 6
xdr_vector(xdrs, basep, nelem, elemsize, xdr_elem)
	XDR *xdrs;
	char *basep;
	u_int nelem;
	u_int elemsize;
	xdrproc_t xdr_elem;	
@


1.5
log
@careful malloc
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.4 2001/09/15 13:51:01 deraadt Exp $";
a67 1
	u_int i;
d69 1
a69 1
	u_int c;  /* the actual element count */
a70 1
	u_int nodesize;
d73 1
a73 1
	if (!xdr_u_int(xdrs, sizep)) {
d75 1
a75 1
	}
d77 2
a78 2
	if ((c > maxsize && UINT_MAX/elsize < c) &&
	    (xdrs->x_op != XDR_FREE)) {
a79 1
	}
d86 1
a86 1
	if (target == NULL)
d94 1
a94 1
					"xdr_array: out of memory\n");
a98 1

d101 1
d140 1
a141 1
	char *elptr;
d145 1
a145 1
		if (!(*xdr_elem)(xdrs, elptr)) {
a146 1
		}
a150 1

@


1.4
log
@prototype cleanup
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.3 1996/08/19 08:32:02 tholo Exp $";
d48 1
d75 1
a75 1
	if (! xdr_u_int(xdrs, sizep)) {
d79 2
a80 1
	if ((c > maxsize) && (xdrs->x_op != XDR_FREE)) {
d148 1
a148 1
		if (! (*xdr_elem)(xdrs, elptr)) {
@


1.4.4.1
log
@Pull in patch from current:
Fix (deraadt), Errata 012:
careful malloc
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.4 2001/09/15 13:51:01 deraadt Exp $";
a47 1
#include <limits.h>
d74 1
a74 1
	if (!xdr_u_int(xdrs, sizep)) {
d78 1
a78 2
	if ((c > maxsize && UINT_MAX/elsize < c) &&
	    (xdrs->x_op != XDR_FREE)) {
d146 1
a146 1
		if (!(*xdr_elem)(xdrs, elptr)) {
@


1.4.4.2
log
@Pull in patch from current:
Errata 012 (take two), deraadt:
KNF and correct overflow fix; jhutz@@cmu.edu
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.4.4.1 2002/07/30 14:49:20 jason Exp $";
d68 1
d70 1
a70 1
	u_int nodesize, c, i;
d72 1
d75 1
a75 1
	if (!xdr_u_int(xdrs, sizep))
d77 1
a77 1

d79 2
a80 2
	if ((c > maxsize || c > UINT_MAX/elsize) &&
	    xdrs->x_op != XDR_FREE)
d82 1
d89 1
a89 1
	if (target == NULL) {
d97 1
a97 1
				    "xdr_array: out of memory\n");
d102 1
a104 1
		}
d143 1
a144 1
	u_int i;
d148 1
a148 1
		if (!(*xdr_elem)(xdrs, elptr))
d150 1
d155 1
@


1.4.2.1
log
@Errata #029 (deraadt):
careful malloc
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.4 2001/09/15 13:51:01 deraadt Exp $";
a47 1
#include <limits.h>
d74 1
a74 1
	if (!xdr_u_int(xdrs, sizep)) {
d78 1
a78 2
	if ((c > maxsize && UINT_MAX/elsize < c) &&
	    (xdrs->x_op != XDR_FREE)) {
d146 1
a146 1
		if (!(*xdr_elem)(xdrs, elptr)) {
@


1.4.2.2
log
@Errata #029, take 2 (deraadt):
Correct overflow fix; jhutz@@cmu.edu
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.4.2.1 2002/07/30 07:30:28 miod Exp $";
d79 1
a79 1
	if ((c > maxsize || c > UINT_MAX/elsize) &&
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d31 1
a31 1
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.2 1996/07/20 06:12:50 deraadt Exp $";
d60 1
a60 1
	register XDR *xdrs;
d67 5
a71 5
	register u_int i;
	register caddr_t target = *addrp;
	register u_int c;  /* the actual element count */
	register bool_t stat = TRUE;
	register u_int nodesize;
d135 5
a139 5
	register XDR *xdrs;
	register char *basep;
	register u_int nelem;
	register u_int elemsize;
	register xdrproc_t xdr_elem;	
d141 2
a142 2
	register u_int i;
	register char *elptr;
@


1.2
log
@bcopy->memcpy & tag
@
text
@a0 3
/*	$OpenBSD: xdr_array.c,v 1.4 1995/04/14 20:30:16 jtc Exp $	*/
/*	$NetBSD: xdr_array.c,v 1.4 1995/04/14 20:30:16 jtc Exp $	*/

d31 2
a32 4
/*static char *sccsid = "from: @@(#)xdr_array.c 1.10 87/08/11 Copyr 1984 Sun Micro";*/
/*static char *sccsid = "from: @@(#)xdr_array.c	2.1 88/07/29 4.0 RPCSRC";*/
static char *rcsid = "$OpenBSD: xdr_array.c,v 1.4 1995/04/14 20:30:16 jtc Exp $";
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
d36 1
a36 1
static char *rcsid = "$NetBSD: xdr_array.c,v 1.4 1995/04/14 20:30:16 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
