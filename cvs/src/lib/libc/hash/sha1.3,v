head	1.45;
access;
symbols
	OPENBSD_6_1:1.45.0.4
	OPENBSD_6_1_BASE:1.45
	OPENBSD_6_0:1.43.0.2
	OPENBSD_6_0_BASE:1.43
	OPENBSD_5_9:1.42.0.2
	OPENBSD_5_9_BASE:1.42
	OPENBSD_5_8:1.41.0.6
	OPENBSD_5_8_BASE:1.41
	OPENBSD_5_7:1.41.0.2
	OPENBSD_5_7_BASE:1.41
	OPENBSD_5_6:1.40.0.4
	OPENBSD_5_6_BASE:1.40
	OPENBSD_5_5:1.39.0.6
	OPENBSD_5_5_BASE:1.39
	OPENBSD_5_4:1.39.0.2
	OPENBSD_5_4_BASE:1.39
	OPENBSD_5_3:1.38.0.2
	OPENBSD_5_3_BASE:1.38
	OPENBSD_5_2:1.37.0.20
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.18
	OPENBSD_5_0:1.37.0.16
	OPENBSD_5_0_BASE:1.37
	OPENBSD_4_9:1.37.0.14
	OPENBSD_4_9_BASE:1.37
	OPENBSD_4_8:1.37.0.12
	OPENBSD_4_8_BASE:1.37
	OPENBSD_4_7:1.37.0.8
	OPENBSD_4_7_BASE:1.37
	OPENBSD_4_6:1.37.0.10
	OPENBSD_4_6_BASE:1.37
	OPENBSD_4_5:1.37.0.6
	OPENBSD_4_5_BASE:1.37
	OPENBSD_4_4:1.37.0.4
	OPENBSD_4_4_BASE:1.37
	OPENBSD_4_3:1.37.0.2
	OPENBSD_4_3_BASE:1.37
	OPENBSD_4_2:1.36.0.2
	OPENBSD_4_2_BASE:1.36
	OPENBSD_4_1:1.35.0.2
	OPENBSD_4_1_BASE:1.35
	OPENBSD_4_0:1.34.0.10
	OPENBSD_4_0_BASE:1.34
	OPENBSD_3_9:1.34.0.8
	OPENBSD_3_9_BASE:1.34
	OPENBSD_3_8:1.34.0.6
	OPENBSD_3_8_BASE:1.34
	OPENBSD_3_7:1.34.0.4
	OPENBSD_3_7_BASE:1.34
	OPENBSD_3_6:1.34.0.2
	OPENBSD_3_6_BASE:1.34
	OPENBSD_3_5:1.26.0.4
	OPENBSD_3_5_BASE:1.26
	OPENBSD_3_4:1.26.0.2
	OPENBSD_3_4_BASE:1.26
	OPENBSD_3_3:1.21.0.6
	OPENBSD_3_3_BASE:1.21
	OPENBSD_3_2:1.21.0.4
	OPENBSD_3_2_BASE:1.21
	OPENBSD_3_1:1.21.0.2
	OPENBSD_3_1_BASE:1.21
	OPENBSD_3_0:1.20.0.2
	OPENBSD_3_0_BASE:1.20
	OPENBSD_2_9:1.19.0.2
	OPENBSD_2_9_BASE:1.19
	OPENBSD_2_8:1.18.0.4
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.18.0.2
	OPENBSD_2_7_BASE:1.18
	OPENBSD_2_6:1.17.0.2
	OPENBSD_2_6_BASE:1.17
	OPENBSD_2_5:1.10.0.4
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7;
locks; strict;
comment	@# @;


1.45
date	2017.02.23.20.46.08;	author daniel;	state Exp;
branches;
next	1.44;
commitid	upwZQ2goSjCLrzJR;

1.44
date	2016.09.04.09.24.38;	author tedu;	state Exp;
branches;
next	1.43;
commitid	OsdUTzaD6JMBb2nk;

1.43
date	2016.03.10.08.41.12;	author jmc;	state Exp;
branches;
next	1.42;
commitid	Qc8VgF56BCkE2pI1;

1.42
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.41;
commitid	QU70QaxjyBAtj4Rv;

1.41
date	2014.11.26.02.05.58;	author schwarze;	state Exp;
branches;
next	1.40;
commitid	Iv6a1fxvN93wyKF7;

1.40
date	2014.03.23.23.27.22;	author naddy;	state Exp;
branches;
next	1.39;

1.39
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.38;

1.38
date	2012.09.27.11.31.57;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2008.02.13.08.43.39;	author art;	state Exp;
branches;
next	1.36;

1.36
date	2007.05.31.19.19.29;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2006.10.03.12.06.07;	author grunk;	state Exp;
branches;
next	1.34;

1.34
date	2004.06.22.01.57.29;	author jfb;	state Exp;
branches;
next	1.33;

1.33
date	2004.05.16.18.29.09;	author otto;	state Exp;
branches;
next	1.32;

1.32
date	2004.05.05.17.09.46;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2004.05.03.18.10.07;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2004.05.03.17.30.15;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	2004.04.29.15.51.16;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2004.04.28.16.54.57;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2004.04.26.19.38.12;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.25.19.33.34;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.17.21.56.23;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.03.01.52.39;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2003.05.30.19.55.03;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2003.05.06.19.13.10;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.29.18.08.29;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.19;

1.19
date	2000.12.21.17.34.33;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.18.03.01.29;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.10.06.14.55.29;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	99.08.11.03.06.06;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	99.07.09.13.35.20;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.07.07.10.50.04;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.05.25.21.16.25;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.05.25.13.06.45;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.04.18.23.31.01;	author wvdputte;	state Exp;
branches;
next	1.10;

1.10
date	98.06.21.22.13.43;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.03.07.22.18.12;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.02.27.12.17.49;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.07.17.06.01.09;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.07.17.05.33.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.15.01.54.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.12.20.06.03;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.07.12.11.02.28;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	97.07.11.05.35.46;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.07.11.02.05.02;	author millert;	state Exp;
branches;
next	;


desc
@@


1.45
log
@SHA-1 collisions have now been found so update some man pages. As noted by
minek van on misc@@. Thanks.

ok tb@@, tj@@

(and jmc@@ is ok with the diff but can't ok the technical content).
@
text
@.\"	$OpenBSD: sha1.3,v 1.44 2016/09/04 09:24:38 tedu Exp $
.\"
.\" Copyright (c) 1997, 2004 Todd C. Miller <Todd.Miller@@courtesan.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" See http://csrc.nist.gov/publications/fips/fips180-1/fip180-1.txt
.\" for the detailed standard
.\"
.Dd $Mdocdate: September 4 2016 $
.Dt SHA1INIT 3
.Os
.Sh NAME
.Nm SHA1Init ,
.Nm SHA1Update ,
.Nm SHA1Pad ,
.Nm SHA1Final ,
.Nm SHA1Transform ,
.Nm SHA1End ,
.Nm SHA1File ,
.Nm SHA1FileChunk ,
.Nm SHA1Data
.Nd calculate the NIST Secure Hash Algorithm
.Sh SYNOPSIS
.In sys/types.h
.In sha1.h
.Ft void
.Fn SHA1Init "SHA1_CTX *context"
.Ft void
.Fn SHA1Update "SHA1_CTX *context" "const u_int8_t *data" "size_t len"
.Ft void
.Fn SHA1Pad "SHA1_CTX *context"
.Ft void
.Fn SHA1Final "u_int8_t digest[SHA1_DIGEST_LENGTH]" "SHA1_CTX *context"
.Ft void
.Fn SHA1Transform "u_int32_t state[5]" "const u_int8_t buffer[SHA1_BLOCK_LENGTH]"
.Ft "char *"
.Fn SHA1End "SHA1_CTX *context" "char *buf"
.Ft "char *"
.Fn SHA1File "const char *filename" "char *buf"
.Ft "char *"
.Fn SHA1FileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
.Ft "char *"
.Fn SHA1Data "const u_int8_t *data" "size_t len" "char *buf"
.Sh DESCRIPTION
The SHA1 functions implement the NIST Secure Hash Algorithm (SHA-1),
FIPS PUB 180-1.
SHA-1 is used to generate a condensed representation
of a message called a message digest.
The algorithm takes a
message less than 2^64 bits as input and produces a 160-bit digest
suitable for use as a digital signature.
.Pp
SHA-1 has been broken; it should only be used where necessary for
backward compatibility.
The attack on SHA-1 is in the nature of finding
.Dq collisions
\(em that is, multiple inputs which hash to the same value.
It is still unlikely for an attacker to be able to determine the exact
original input given a hash value.
.Pp
The
.Fn SHA1Init
function initializes a SHA1_CTX
.Fa context
for use with
.Fn SHA1Update ,
and
.Fn SHA1Final .
The
.Fn SHA1Update
function adds
.Fa data
of length
.Fa len
to the SHA1_CTX specified by
.Fa context .
.Fn SHA1Final
is called when all data has been added via
.Fn SHA1Update
and stores a message digest in the
.Fa digest
parameter.
.Pp
The
.Fn SHA1Pad
function can be used to apply padding to the message digest as in
.Fn SHA1Final ,
but the current context can still be used with
.Fn SHA1Update .
.Pp
The
.Fn SHA1Transform
function is used by
.Fn SHA1Update
to hash 512-bit blocks and forms the core of the algorithm.
Most programs should use the interface provided by
.Fn SHA1Init ,
.Fn SHA1Update
and
.Fn SHA1Final
instead of calling
.Fn SHA1Transform
directly.
.Pp
The
.Fn SHA1End
function is a front end for
.Fn SHA1Final
which converts the digest into an
.Tn ASCII
representation of the 160 bit digest in hexadecimal.
.Pp
The
.Fn SHA1File
function calculates the digest for a file and returns the result via
.Fn SHA1End .
If
.Fn SHA1File
is unable to open the file a
.Dv NULL
pointer is returned.
.Pp
.Fn SHA1FileChunk
behaves like
.Fn SHA1File
but calculates the digest only for that portion of the file starting at
.Fa offset
and continuing for
.Fa length
bytes or until end of file is reached, whichever comes first.
A zero
.Fa length
can be specified to read until end of file.
A negative
.Fa length
or
.Fa offset
will be ignored.
.Pp
The
.Fn SHA1Data
function
calculates the digest of an arbitrary string and returns the result via
.Fn SHA1End .
.Pp
For each of the
.Fn SHA1End ,
.Fn SHA1File ,
and
.Fn SHA1Data
functions the
.Fa buf
parameter should either be a string of at least 41 characters in
size or a
.Dv NULL
pointer.
In the latter case, space will be dynamically allocated via
.Xr malloc 3
and should be freed using
.Xr free 3
when it is no longer needed.
.Sh EXAMPLES
The following code fragment will calculate the digest for
the string
.Qq abc
which is
.Dq 0xa9993e364706816aba3e25717850c26c9cd0d89d .
.Bd -literal -offset indent
SHA1_CTX sha;
u_int8_t results[SHA1_DIGEST_LENGTH];
char *buf;
int n;

buf = "abc";
n = strlen(buf);
SHA1Init(&sha);
SHA1Update(&sha, (u_int8_t *)buf, n);
SHA1Final(results, &sha);

/* Print the digest as one long hex value */
printf("0x");
for (n = 0; n < SHA1_DIGEST_LENGTH; n++)
	printf("%02x", results[n]);
putchar('\en');
.Ed
.Pp
Alternately, the helper functions could be used in the following way:
.Bd -literal -offset indent
u_int8_t output[SHA1_DIGEST_STRING_LENGTH];
char *buf = "abc";

printf("0x%s\en", SHA1Data(buf, strlen(buf), output));
.Ed
.Sh SEE ALSO
.Xr cksum 1 ,
.Xr sha1 1 ,
.Xr md5 3 ,
.Xr rmd160 3 ,
.Xr sha2 3
.Sh STANDARDS
.Rs
.%A J. Burrows
.%R FIPS PUB 180-1
.%T The Secure Hash Standard
.Re
.Pp
.Rs
.%A D. Eastlake
.%A P. Jones
.%D September 2001
.%R RFC 3174
.%T US Secure Hash Algorithm 1 (SHA1)
.Re
.Sh HISTORY
The SHA-1 functions appeared in
.Ox 2.0 .
.Sh AUTHORS
.An -nosplit
This implementation of SHA-1 was written by
.An Steve Reid .
.Pp
The
.Fn SHA1End ,
.Fn SHA1File ,
.Fn SHA1FileChunk ,
and
.Fn SHA1Data
helper functions are derived from code written by
.An Poul-Henning Kamp .
@


1.44
log
@remove caveats that are either misleading or unhelpful.
ok jmc naddy
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.43 2016/03/10 08:41:12 jmc Exp $
d20 1
a20 1
.Dd $Mdocdate: March 10 2016 $
d64 7
a70 3
The SHA1 functions are considered to be more secure than the
.Xr md5 3
functions with which they share a similar interface.
@


1.43
log
@un-vax;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.42 2015/11/10 23:48:18 jmc Exp $
d20 1
a20 1
.Dd $Mdocdate: November 10 2015 $
a236 7
.Sh CAVEATS
This implementation of SHA-1 has not been validated by NIST
and as such is not in official compliance with the standard.
.Pp
If a message digest is to be copied to a multi-byte type (ie:
an array of five 32-bit integers) it will be necessary to
perform byte swapping on little endian machines such as the i386 and alpha.
@


1.42
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.41 2014/11/26 02:05:58 schwarze Exp $
d20 1
a20 1
.Dd $Mdocdate: November 26 2014 $
d243 1
a243 2
perform byte swapping on little endian machines such as the i386, alpha,
and vax.
@


1.41
log
@macro cleanup; from kaspars at bankovskis dot net
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.40 2014/03/23 23:27:22 naddy Exp $
d20 2
a21 2
.Dd $Mdocdate: March 23 2014 $
.Dt SHA1 3
@


1.40
log
@Remove the MD4 functions.
"A collision attack published in 2007 can find collisions for full
MD4 in less than two hash operations."

ok deraadt@@, man pages ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.39 2013/06/05 03:39:22 tedu Exp $
d20 1
a20 1
.Dd $Mdocdate: June 5 2013 $
d71 1
a71 1
.Ar context
d79 1
a79 1
.Ar data
d81 1
a81 1
.Ar len
d83 1
a83 1
.Ar context .
d88 1
a88 1
.Ar digest
d126 3
a128 1
is unable to open the file a NULL pointer is returned.
d159 1
a159 1
.Ar buf
d161 3
a163 1
size or a NULL pointer.
d170 5
a174 2
The follow code fragment will calculate the digest for
the string "abc" which is ``0xa9993e364706816aba3e25717850c26c9cd0d89d''.
d225 3
a227 1
This implementation of SHA-1 was written by Steve Reid.
d235 2
a236 1
helper functions are derived from code written by Poul-Henning Kamp.
@


1.39
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.38 2012/09/27 11:31:57 jmc Exp $
d20 1
a20 1
.Dd $Mdocdate: September 27 2012 $
a64 2
.Xr md4 3
and
a196 1
.Xr md4 3 ,
@


1.38
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.37 2008/02/13 08:43:39 art Exp $
d20 1
a20 1
.Dd $Mdocdate: February 13 2008 $
d35 2
a36 2
.Fd #include <sys/types.h>
.Fd #include <sha1.h>
@


1.37
log
@The digest in the example seems to have been generated
by code that does not do zero padding. The example code does. Fix.

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.36 2007/05/31 19:19:29 jmc Exp $
d20 1
a20 1
.Dd $Mdocdate: May 31 2007 $
d203 1
d206 1
a207 1
.%O FIPS PUB 180-1
d209 1
d211 5
a215 3
.%A D. Eastlake and P. Jones
.%T US Secure Hash Algorithm 1
.%O RFC 3174
@


1.36
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.35 2006/10/03 12:06:07 grunk Exp $
d20 1
a20 1
.Dd $Mdocdate$
d169 1
a169 1
the string "abc" which is ``0xa9993e36476816aba3e25717850c26c9cd0d89d''.
@


1.35
log
@when using SHA1Data(), no CTX is needed, so zap that line in the example

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.34 2004/06/22 01:57:29 jfb Exp $
d20 1
a20 1
.Dd April 29, 2004
@


1.34
log
@Make the `filename' parameter to HASHFile() and HASHFileChunk() const
ok pedro@@, millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.33 2004/05/16 18:29:09 otto Exp $
a190 1
SHA1_CTX sha;
@


1.33
log
@Add .Xr's to the commands implementing the various digests. ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.32 2004/05/05 17:09:46 millert Exp $
d50 1
a50 1
.Fn SHA1File "char *filename" "char *buf"
d52 1
a52 1
.Fn SHA1FileChunk "char *filename" "char *buf" "off_t offset" "off_t length"
@


1.32
log
@Make the 2nd arg to SHA1Transform const again and unifdef SHA1HANDSOFF.
It was defined before and there is no need to for this knob...
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.31 2004/05/03 18:10:07 millert Exp $
d198 1
@


1.31
log
@Sync some prototypes with the headers
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.30 2004/05/03 17:30:15 millert Exp $
d46 1
a46 1
.Fn SHA1Transform "u_int32_t state[5]" "u_int8_t buffer[SHA1_BLOCK_LENGTH]"
@


1.30
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.29 2004/04/29 15:51:16 millert Exp $
d40 1
a40 1
.Fn SHA1Update "SHA1_CTX *context" "const u_int8_t *data" "u_int len"
@


1.29
log
@Undo some recent prototype changes; it is legal to pass the helper
functions can take a NULL buf pointer.  They will malloc memory as
needed in this case.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.28 2004/04/28 16:54:57 millert Exp $
d26 1
d31 1
d42 2
d52 2
d92 6
a97 4
When a null pointer is passed to
.Fn SHA1Final
as first argument only the final padding will be applied and the
current context can still be used with
d130 17
d222 1
@


1.28
log
@Xr sha2(3)
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.27 2004/04/26 19:38:12 millert Exp $
d3 1
a3 1
.\" Copyright (c) 1997 Todd C. Miller <Todd.Miller@@courtesan.com>
d20 1
a20 1
.Dd July 10, 1997
d44 1
a44 1
.Fn SHA1End "SHA1_CTX *context" "char buf[SHA1_DIGEST_STRING_LENGTH]"
d46 1
a46 1
.Fn SHA1File "char *filename" "char buf[SHA1_DIGEST_STRING_LENGTH]"
d48 1
a48 1
.Fn SHA1Data "const u_int8_t *data" "u_int len" "char buf[SHA1_DIGEST_STRING_LENGTH]"
@


1.27
log
@Use a common source file for all the hash helper functions that
previously lived in foohl.c.  The foohl.c files are now generated
via sed, though perhaps cpp could be used in the future.

Use u_int8_t instead of unsigned char for the buffers struct fooContext.
Add constants for buffer lengths and use them in function prototypes
and the man pages.

This is basically cosmetic surgery; there should be no functional changes.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.26 2003/06/25 19:33:34 deraadt Exp $
d176 2
a177 1
.Xr rmd160 3
@


1.26
log
@missing const; millert ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.25 2003/06/17 21:56:23 millert Exp $
d38 1
a38 1
.Fn SHA1Update "SHA1_CTX *context" "const u_char *data" "u_int len"
d40 1
a40 1
.Fn SHA1Final "u_char digest[20]" "SHA1_CTX *context"
d42 1
a42 1
.Fn SHA1Transform "u_int32_t state[5]" "u_char buffer[64]"
d44 1
a44 1
.Fn SHA1End "SHA1_CTX *context" "char *buf"
d46 1
a46 1
.Fn SHA1File "char *filename" "char *buf"
d48 1
a48 1
.Fn SHA1Data "const u_char *data" "u_int len" "char *buf"
d147 1
a147 1
u_char results[20];
d154 1
a154 1
SHA1Update(&sha, (u_char *)buf, n);
d159 1
a159 1
for (n = 0; n < 20; n++)
d167 1
a167 1
u_char output[41];
@


1.25
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.24 2003/06/03 01:52:39 millert Exp $
d48 1
a48 1
.Fn SHA1Data "u_char *data" "u_int len" "char *buf"
@


1.24
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.23 2003/05/30 19:55:03 jmc Exp $
d9 7
a15 7
.\" THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
.\" WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
.\" FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
.\" OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
.\" CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@


1.23
log
@- section reorder
- whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.22 2003/05/06 19:13:10 jmc Exp $
a3 1
.\" All rights reserved.
d5 3
a7 10
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
d9 7
a15 10
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.22
log
@updated URL from Leandro Costa;
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.21 2001/10/29 18:08:29 millert Exp $
a182 17
.Sh CAVEATS
This implementation of SHA-1 has not been validated by NIST
and as such is not in official compliance with the standard.
.Pp
If a message digest is to be copied to a multi-byte type (ie:
an array of five 32-bit integers) it will be necessary to
perform byte swapping on little endian machines such as the i386, alpha,
and vax.
.Sh AUTHORS
This implementation of SHA-1 was written by Steve Reid.
.Pp
The
.Fn SHA1End ,
.Fn SHA1File ,
and
.Fn SHA1Data
helper functions are derived from code written by Poul-Henning Kamp.
d201 17
@


1.21
log
@add RFC 3174 to SEE ALSO section
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.20 2001/08/06 10:42:26 mpech Exp $
d28 2
a29 1
.\" See http://csrc.nist.gov/fips/fip180-1.txt for the detailed standard
@


1.20
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.19 2000/12/21 17:34:33 aaron Exp $
d208 5
@


1.19
log
@mdoc prefers `\e' as an escape character.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.18 2000/04/18 03:01:29 aaron Exp $
d190 1
a190 1
.Sh AUTHOR
a203 1
.Pp
@


1.18
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.17 1999/10/06 14:55:29 espie Exp $
d171 1
a171 1
putchar('\\n');
@


1.17
log
@- let cryptographic checksums refer to each other
- avoid .Xref to one's own manpage
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.16 1999/08/11 03:06:06 deraadt Exp $
d61 4
a64 2
FIPS PUB 180-1.  SHA-1 is used to generate a condensed representation
of a message called a message digest.  The algorithm takes a
d146 2
a147 2
size or a NULL pointer.  In the latter case, space will be dynamically
allocated via
@


1.16
log
@more unescaped \n lines in nroff documents
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.15 1999/07/09 13:35:20 aaron Exp $
d200 2
a201 1
.Xr md5 3
@


1.15
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.14 1999/07/07 10:50:04 aaron Exp $
d178 1
a178 1
printf("0x%s\n", SHA1Data(buf, strlen(buf), output));
@


1.14
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.13 1999/05/25 21:16:25 aaron Exp $
d66 1
a66 1
The SHA1 functions are considered to be more secure than the 
d96 1
a96 1
as first argument only the final padding will be applied and the 
@


1.13
log
@kill some old macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.12 1999/05/25 13:06:45 aaron Exp $
d32 1
@


1.12
log
@punctuation
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.11 1999/04/18 23:31:01 wvdputte Exp $
d189 1
a189 1
.br
@


1.11
log
@Fixup of formatting in the example source code
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.10 1998/06/21 22:13:43 millert Exp $
d86 1
a86 1
.Ar context.
@


1.10
log
@Remove the advertising clause in my old license, it impedes free use
of the code as a large number of similar clauses makes it impossible
to write an ad for a product using the code...
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.9 1998/03/07 22:18:12 millert Exp $
d167 1
a167 1
	printf("%x", results[n]);
d177 1
a177 1
printf("0x%s", SHA1Data(buf, strlen(buf), output));
@


1.9
log
@.Bx Open -> .Ox 2.x
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.8 1998/02/27 12:17:49 deraadt Exp $
d14 1
a14 4
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by Todd C. Miller.
.\" 4. The name of the author may not be used to endorse or promote products
@


1.8
log
@extra commas go foom foom foom
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.7 1997/07/17 06:01:09 millert Exp $
d211 1
a211 2
.Bx Open
2.0.
@


1.7
log
@More typos.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.6 1997/07/17 05:33:16 millert Exp $
d42 1
a42 1
.Nm SHA1Data ,
@


1.6
log
@Fix typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.5 1997/07/15 01:54:23 millert Exp $
d180 1
a180 1
printf("0x%s", MD5Data(buf, strlen(buf), output));
d190 1
a190 1
.Sh AUTHORS
@


1.5
log
@Add a missing const
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.4 1997/07/12 20:06:03 millert Exp $
d62 1
a62 1
The SHA1 functions implement then NIST Secure Hash Algorithm (SHA-1),
@


1.4
log
@Add SHA1End, SHA1File, SHA1Data helper functions like in md5(3).
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.3 1997/07/12 11:02:28 provos Exp $
d50 1
a50 1
.Fn SHA1Update "SHA1_CTX *context" "u_char *data" "u_int len"
@


1.3
log
@mention usage of SHA1Final with null pointer
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.2 1997/07/11 05:35:46 millert Exp $
d39 4
a42 1
.Nm SHA1Transform
d55 6
d76 1
a76 1
function initializes a MDX_CTX
d115 38
a152 1
.Sh EXAMPLE
d171 10
a180 1
putchar('\n');
d190 9
a198 2
.Sh AUTHOR
This implementation of SHA-1 was written by Steve Reid <steve@@edmweb.com>.
d200 1
@


1.2
log
@Todd kant spel.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha1.3,v 1.1 1997/07/11 02:05:02 millert Exp $
d87 5
@


1.1
log
@Man page for SHA1*
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d123 1
a123 1
This implementation of SHA-1 has not been valdiated by NIST
d127 1
a127 1
an array of five 32-bit integers) it will be necesary to
@

