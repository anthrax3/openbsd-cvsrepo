head	1.15;
access;
symbols
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.11.0.10
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.10
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.12
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9;
locks; strict;
comment	@.\" @;


1.15
date	2014.03.23.23.27.22;	author naddy;	state dead;
branches;
next	1.14;

1.14
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2012.09.27.11.31.57;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.18.08.44.25;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.13.22.34.45;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.31.19.19.29;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.24.20.10.33;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.24.19.38.17;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.22.01.57.29;	author jfb;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.16.18.29.09;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.03.18.10.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.03.17.30.14;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.29.15.51.16;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.29.13.33.58;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.28.16.55.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove the MD4 functions.
"A collision attack published in 2007 can find collisions for full
MD4 in less than two hash operations."

ok deraadt@@, man pages ok jmc@@
@
text
@.\"
.\" ----------------------------------------------------------------------------
.\" "THE BEER-WARE LICENSE" (Revision 42):
.\" <phk@@login.dkuug.dk> wrote this file.  As long as you retain this notice you
.\" can do whatever you want with this stuff. If we meet some day, and you think
.\" this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
.\" ----------------------------------------------------------------------------
.\"
.\" 	$OpenBSD: mdX.3,v 1.14 2013/06/05 03:39:22 tedu Exp $
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt MDX 3
.Os
.Sh NAME
.Nm MDXInit ,
.Nm MDXUpdate ,
.Nm MDXPad ,
.Nm MDXFinal ,
.Nm MDXTransform ,
.Nm MDXEnd ,
.Nm MDXFile ,
.Nm MDXFileChunk ,
.Nm MDXData
.Nd calculate the RSA Data Security, Inc., ``MDX'' message digest
.Sh SYNOPSIS
.In sys/types.h
.In mdX.h
.Ft void
.Fn MDXInit "MDX_CTX *context"
.Ft void
.Fn MDXUpdate "MDX_CTX *context" "const u_int8_t *data" "size_t len"
.Ft void
.Fn MDXPad "MDX_CTX *context"
.Ft void
.Fn MDXFinal "u_int8_t digest[MDX_DIGEST_LENGTH]" "MDX_CTX *context"
.Ft void
.Fn MDXTransform "u_int32_t state[4]" "u_int8_t block[MDX_BLOCK_LENGTH]"
.Ft "char *"
.Fn MDXEnd "MDX_CTX *context" "char *buf"
.Ft "char *"
.Fn MDXFile "const char *filename" "char *buf"
.Ft "char *"
.Fn MDXFileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
.Ft "char *"
.Fn MDXData "const u_int8_t *data" "size_t len" "char *buf"
.Sh DESCRIPTION
The MDX functions calculate a 128-bit cryptographic checksum (digest)
for any number of input bytes.
A cryptographic checksum is a one-way
hash-function, that is, you cannot find (except by exhaustive search)
the input corresponding to a particular output.
This net result is a
.Dq fingerprint
of the input-data, which doesn't disclose the actual input.
.Pp
MD4 and MD5 have been broken; they should only be used where necessary for
backward compatibility.
The attacks on both MD4 and MD5
are both in the nature of finding
.Dq collisions
\- that is, multiple
inputs which hash to the same value; it is still unlikely for an attacker
to be able to determine the exact original input given a hash value.
.Pp
The
.Fn MDXInit ,
.Fn MDXUpdate ,
and
.Fn MDXFinal
functions are the core functions.
Allocate an MDX_CTX, initialize it with
.Fn MDXInit ,
run over the data with
.Fn MDXUpdate ,
and finally extract the result using
.Fn MDXFinal .
.Pp
The
.Fn MDXPad
function can be used to apply padding to the message digest as in
.Fn MDXFinal ,
but the current context can still be used with
.Fn MDXUpdate .
.Pp
The
.Fn MDXTransform
function is used by
.Fn MDXUpdate
to hash 512-bit blocks and forms the core of the algorithm.
Most programs should use the interface provided by
.Fn MDXInit ,
.Fn MDXUpdate
and
.Fn MDXFinal
instead of calling
.Fn MDXTransform
directly.
.Pp
.Fn MDXEnd
is a wrapper for
.Fn MDXFinal
which converts the return value to an MDX_DIGEST_STRING_LENGTH-character
(including the terminating '\e0')
.Tn ASCII
string which represents the 128 bits in hexadecimal.
.Pp
.Fn MDXFile
calculates the digest of a file, and uses
.Fn MDXEnd
to return the result.
If the file cannot be opened, a null pointer is returned.
.Pp
.Fn MDXFileChunk
behaves like
.Fn MDXFile
but calculates the digest only for that portion of the file starting at
.Fa offset
and continuing for
.Fa length
bytes or until end of file is reached, whichever comes first.
A zero
.Fa length
can be specified to read until end of file.
A negative
.Fa length
or
.Fa offset
will be ignored.
.Fn MDXData
calculates the digest of a chunk of data in memory, and uses
.Fn MDXEnd
to return the result.
.Pp
When using
.Fn MDXEnd ,
.Fn MDXFile ,
.Fn MDXFileChunk ,
or
.Fn MDXData ,
the
.Ar buf
argument can be a null pointer, in which case the returned string
is allocated with
.Xr malloc 3
and subsequently must be explicitly deallocated using
.Xr free 3
after use.
If the
.Ar buf
argument is non-null it must point to at least MDX_DIGEST_STRING_LENGTH
characters of buffer space.
.Sh SEE ALSO
.Xr cksum 1 ,
.Xr md5 1 ,
.Xr mdY 3 ,
.Xr rmd160 3 ,
.Xr sha1 3 ,
.Xr sha2 3
.Rs
.%A RSA Laboratories
.%T Frequently Asked Questions About today's Cryptography
.%U http://www.rsa.com/rsalabs/faq/
.Re
.Rs
.%A H. Dobbertin
.%D 1995
.%J CryptoBytes
.%N 1(3):5
.%T Alf Swindles Ann
.Re
.Rs
.%A MJ. B. Robshaw
.%D November 12, 1996
.%J RSA Laboratories Bulletin
.%N 4
.%T On Recent Results for MD4 and MD5
.Re
.Rs
.%A Hans Dobbertin
.%T Cryptanalysis of MD5 Compress
.Re
.Sh STANDARDS
.Rs
.%A R. Rivest
.%D October 1990
.%R RFC 1186
.%T The MD4 Message Digest Algorithm
.Re
.Pp
.Rs
.%A R. Rivest
.%D April 1992
.%R RFC 1321
.%T The MD5 Message Digest Algorithm
.Re
.Sh HISTORY
These functions appeared in
.Ox 2.0 .
.Sh AUTHORS
The original MDX routines were developed by
.Tn RSA
Data Security, Inc., and published in the above references.
This code is derived from a public domain implementation written by Colin Plumb.
.Pp
The
.Fn MDXEnd ,
.Fn MDXFile ,
.Fn MDXFileChunk ,
and
.Fn MDXData
helper functions are derived from code written by Poul-Henning Kamp.
.Sh BUGS
Collisions have been found for the full versions of both MD4 and MD5.
The use of
.Xr sha2 3
is recommended instead.
@


1.14
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.13 2012/09/27 11:31:57 jmc Exp $
d11 1
a11 1
.Dd $Mdocdate: September 27 2012 $
@


1.13
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.12 2012/08/18 08:44:25 jmc Exp $
d11 1
a11 1
.Dd $Mdocdate: August 18 2012 $
d26 2
a27 2
.Fd #include <sys/types.h>
.Fd #include <mdX.h>
@


1.12
log
@within Rs/Re reference blocks, use %U instead of %O (or any other
variants) for URLs, allowing mandoc -Thtml to properly generate links;

(sendmail.8 changes are simply using Lk, which i somehow missed in previous)

ingo reminded me to verify that gnu groff recognises %U: 1.20.1 does not,
but 1.21 does;
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.11 2010/07/13 22:34:45 tedu Exp $
d11 1
a11 1
.Dd $Mdocdate: July 13 2010 $
a159 10
.%A R. Rivest
.%T The MD4 Message-Digest Algorithm
.%O RFC 1186
.Re
.Rs
.%A R. Rivest
.%T The MD5 Message-Digest Algorithm
.%O RFC 1321
.Re
.Rs
d166 1
a166 1
.%T Alf Swindles Ann
d169 1
a169 1
.%D 1995
d173 1
a173 1
.%T On Recent Results for MD4 and MD5
d176 1
a176 1
.%D November 12, 1996
d181 14
@


1.11
log
@update our recommended hash function to sha256 and note md5 is broken.
ok deraadt jmc millert sobrado
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.10 2007/05/31 19:19:29 jmc Exp $
d11 1
a11 1
.Dd $Mdocdate: May 31 2007 $
d172 1
a172 1
.%O \&<http://www.rsa.com/rsalabs/faq/>
@


1.10
log
@convert to new .Dd format;
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.9 2004/08/24 20:10:33 millert Exp $
d11 1
a11 1
.Dd $Mdocdate$
d56 1
a56 1
MD4 has been broken; it should only be used where necessary for
a57 2
MD5 has not yet (1999-02-11) been broken, but recent attacks have cast
some doubt on its security properties.
d211 1
a211 4
.Xr sha1 3 ,
.Xr sha2 3 ,
or
.Xr rmd160 3
@


1.9
log
@Whoops, ripemd was broken, not ripemd-160.
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.8 2004/08/24 19:38:17 millert Exp $
d11 1
a11 1
.Dd April 29, 2004
@


1.8
log
@Collisions have been found for the full versions of MD4, MD5 and RMD160.
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.7 2004/06/22 01:57:29 jfb Exp $
d213 2
a214 1
.Xr sha1 3
d216 1
a216 1
.Xr sha2 3
@


1.7
log
@Make the `filename' parameter to HASHFile() and HASHFileChunk() const
ok pedro@@, millert@@
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.6 2004/05/16 18:29:09 otto Exp $
d211 6
a216 3
Hans Dobbertin has shown collisions for the full version of MD4 and
found a collision in the compress function of MD5.
The use of SHA or RIPEMD-160 is recommended instead.
@


1.6
log
@Add .Xr's to the commands implementing the various digests. ok millert@@
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.5 2004/05/03 18:10:07 millert Exp $
d41 1
a41 1
.Fn MDXFile "char *filename" "char *buf"
d43 1
a43 1
.Fn MDXFileChunk "char *filename" "char *buf" "off_t offset" "off_t length"
@


1.5
log
@Sync some prototypes with the headers
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.4 2004/05/03 17:30:14 millert Exp $
d155 2
@


1.4
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.3 2004/04/29 15:51:16 millert Exp $
d31 1
a31 1
.Fn MDXUpdate "MDX_CTX *context" "const unsigned char *data" "unsigned int len"
@


1.3
log
@Undo some recent prototype changes; it is legal to pass the helper
functions can take a NULL buf pointer.  They will malloc memory as
needed in this case.
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.2 2004/04/29 13:33:58 jmc Exp $
d17 1
d22 1
d33 2
d43 2
d79 6
a84 4
When a null pointer is passed to
.Fn MDXFinal
as first argument only the final padding will be applied and the
current context can still be used with
d114 17
d139 1
d199 1
a199 1
This code is derived from a public domain implementation by Colin Plumb.
d204 1
d207 1
a207 1
helper functions were written by Poul-Henning Kamp.
@


1.2
log
@typo in SEE ALSO;
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.1 2004/04/28 16:55:46 millert Exp $
d11 1
a11 1
.Dd October 9, 1996
d35 1
a35 1
.Fn MDXEnd "MDX_CTX *context" "char buf[MDX_DIGEST_STRING_LENGTH]"
d37 1
a37 1
.Fn MDXFile "char *filename" "char buf[MDX_DIGEST_STRING_LENGTH]"
d39 1
a39 1
.Fn MDXData "const u_int8_t *data" "unsigned int len" "char buf[MDX_DIGEST_STRING_LENGTH]"
@


1.1
log
@md[45] man page
@
text
@d9 1
a9 1
.\" 	$OpenBSD: mdX.3,v 1.19 2003/06/25 19:33:34 deraadt Exp $
d131 1
a131 1
.Xr sha1, 3
@

