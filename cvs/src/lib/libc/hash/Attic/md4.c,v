head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.34
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.32
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.30
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.28
	OPENBSD_5_0:1.7.0.26
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.24
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.22
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6;
locks; strict;
comment	@ * @;


1.9
date	2014.03.23.23.27.22;	author naddy;	state dead;
branches;
next	1.8;

1.8
date	2014.01.08.06.14.56;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.08.08.05.35;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.28.15.10.27;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.03.18.07.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.03.17.30.14;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.29.18.45.39;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.28.20.24.59;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.28.16.54.00;	author millert;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove the MD4 functions.
"A collision attack published in 2007 can find collisions for full
MD4 in less than two hash operations."

ok deraadt@@, man pages ok jmc@@
@
text
@/*	$OpenBSD: md4.c,v 1.8 2014/01/08 06:14:56 tedu Exp $	*/

/*
 * This code implements the MD4 message-digest algorithm.
 * The algorithm is due to Ron Rivest.	This code was
 * written by Colin Plumb in 1993, no copyright is claimed.
 * This code is in the public domain; do with it what you wish.
 * Todd C. Miller modified the MD5 code to do MD4 based on RFC 1186.
 *
 * Equivalent code is available from RSA Data Security, Inc.
 * This code has been tested against that, and is equivalent,
 * except that you don't need to include two pages of legalese
 * with every copy.
 *
 * To compute the message digest of a chunk of bytes, declare an
 * MD4Context structure, pass it to MD4Init, call MD4Update as
 * needed on buffers full of bytes, and then call MD4Final, which
 * will fill a supplied 16-byte array with the digest.
 */

#include <sys/types.h>
#include <string.h>
#include <md4.h>

#define PUT_64BIT_LE(cp, value) do {					\
	(cp)[7] = (value) >> 56;					\
	(cp)[6] = (value) >> 48;					\
	(cp)[5] = (value) >> 40;					\
	(cp)[4] = (value) >> 32;					\
	(cp)[3] = (value) >> 24;					\
	(cp)[2] = (value) >> 16;					\
	(cp)[1] = (value) >> 8;						\
	(cp)[0] = (value); } while (0)

#define PUT_32BIT_LE(cp, value) do {					\
	(cp)[3] = (value) >> 24;					\
	(cp)[2] = (value) >> 16;					\
	(cp)[1] = (value) >> 8;						\
	(cp)[0] = (value); } while (0)

static u_int8_t PADDING[MD4_BLOCK_LENGTH] = {
	0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

/*
 * Start MD4 accumulation.
 * Set bit count to 0 and buffer to mysterious initialization constants.
 */
void
MD4Init(MD4_CTX *ctx)
{
	ctx->count = 0;
	ctx->state[0] = 0x67452301;
	ctx->state[1] = 0xefcdab89;
	ctx->state[2] = 0x98badcfe;
	ctx->state[3] = 0x10325476;
}

/*
 * Update context to reflect the concatenation of another buffer full
 * of bytes.
 */
void
MD4Update(MD4_CTX *ctx, const unsigned char *input, size_t len)
{
	size_t have, need;

	/* Check how many bytes we already have and how many more we need. */
	have = (size_t)((ctx->count >> 3) & (MD4_BLOCK_LENGTH - 1));
	need = MD4_BLOCK_LENGTH - have;

	/* Update bitcount */
	ctx->count += (u_int64_t)len << 3;

	if (len >= need) {
		if (have != 0) {
			memcpy(ctx->buffer + have, input, need);
			MD4Transform(ctx->state, ctx->buffer);
			input += need;
			len -= need;
			have = 0;
		}

		/* Process data in MD4_BLOCK_LENGTH-byte chunks. */
		while (len >= MD4_BLOCK_LENGTH) {
			MD4Transform(ctx->state, input);
			input += MD4_BLOCK_LENGTH;
			len -= MD4_BLOCK_LENGTH;
		}
	}

	/* Handle any remaining bytes of data. */
	if (len != 0)
		memcpy(ctx->buffer + have, input, len);
}

/*
 * Pad pad to 64-byte boundary with the bit pattern
 * 1 0* (64-bit count of bits processed, MSB-first)
 */
void
MD4Pad(MD4_CTX *ctx)
{
	u_int8_t count[8];
	size_t padlen;

	/* Convert count to 8 bytes in little endian order. */
	PUT_64BIT_LE(count, ctx->count);

	/* Pad out to 56 mod 64. */
	padlen = MD4_BLOCK_LENGTH -
	    ((ctx->count >> 3) & (MD4_BLOCK_LENGTH - 1));
	if (padlen < 1 + 8)
		padlen += MD4_BLOCK_LENGTH;
	MD4Update(ctx, PADDING, padlen - 8);		/* padlen - 8 <= 64 */
	MD4Update(ctx, count, 8);
}

/*
 * Final wrapup--call MD4Pad, fill in digest and zero out ctx.
 */
void
MD4Final(unsigned char digest[MD4_DIGEST_LENGTH], MD4_CTX *ctx)
{
	int i;

	MD4Pad(ctx);
	for (i = 0; i < 4; i++)
		PUT_32BIT_LE(digest + i * 4, ctx->state[i]);
	memset(ctx, 0, sizeof(*ctx));
}


/* The three core functions - F1 is optimized somewhat */

/* #define F1(x, y, z) (x & y | ~x & z) */
#define F1(x, y, z) (z ^ (x & (y ^ z)))
#define F2(x, y, z) ((x & y) | (x & z) | (y & z))
#define F3(x, y, z) (x ^ y ^ z)

/* This is the central step in the MD4 algorithm. */
#define MD4STEP(f, w, x, y, z, data, s) \
	( w += f(x, y, z) + data,  w = w<<s | w>>(32-s) )

/*
 * The core of the MD4 algorithm, this alters an existing MD4 hash to
 * reflect the addition of 16 longwords of new data.  MD4Update blocks
 * the data and converts bytes into longwords for this routine.
 */
void
MD4Transform(u_int32_t state[4], const u_int8_t block[MD4_BLOCK_LENGTH])
{
	u_int32_t a, b, c, d, in[MD4_BLOCK_LENGTH / 4];

#if BYTE_ORDER == LITTLE_ENDIAN
	memcpy(in, block, sizeof(in));
#else
	for (a = 0; a < MD4_BLOCK_LENGTH / 4; a++) {
		in[a] = (u_int32_t)(
		    (u_int32_t)(block[a * 4 + 0]) |
		    (u_int32_t)(block[a * 4 + 1]) <<  8 |
		    (u_int32_t)(block[a * 4 + 2]) << 16 |
		    (u_int32_t)(block[a * 4 + 3]) << 24);
	}
#endif

	a = state[0];
	b = state[1];
	c = state[2];
	d = state[3];

	MD4STEP(F1, a, b, c, d, in[ 0],  3);
	MD4STEP(F1, d, a, b, c, in[ 1],  7);
	MD4STEP(F1, c, d, a, b, in[ 2], 11);
	MD4STEP(F1, b, c, d, a, in[ 3], 19);
	MD4STEP(F1, a, b, c, d, in[ 4],  3);
	MD4STEP(F1, d, a, b, c, in[ 5],  7);
	MD4STEP(F1, c, d, a, b, in[ 6], 11);
	MD4STEP(F1, b, c, d, a, in[ 7], 19);
	MD4STEP(F1, a, b, c, d, in[ 8],  3);
	MD4STEP(F1, d, a, b, c, in[ 9],  7);
	MD4STEP(F1, c, d, a, b, in[10], 11);
	MD4STEP(F1, b, c, d, a, in[11], 19);
	MD4STEP(F1, a, b, c, d, in[12],  3);
	MD4STEP(F1, d, a, b, c, in[13],  7);
	MD4STEP(F1, c, d, a, b, in[14], 11);
	MD4STEP(F1, b, c, d, a, in[15], 19);

	MD4STEP(F2, a, b, c, d, in[ 0] + 0x5a827999,  3);
	MD4STEP(F2, d, a, b, c, in[ 4] + 0x5a827999,  5);
	MD4STEP(F2, c, d, a, b, in[ 8] + 0x5a827999,  9);
	MD4STEP(F2, b, c, d, a, in[12] + 0x5a827999, 13);
	MD4STEP(F2, a, b, c, d, in[ 1] + 0x5a827999,  3);
	MD4STEP(F2, d, a, b, c, in[ 5] + 0x5a827999,  5);
	MD4STEP(F2, c, d, a, b, in[ 9] + 0x5a827999,  9);
	MD4STEP(F2, b, c, d, a, in[13] + 0x5a827999, 13);
	MD4STEP(F2, a, b, c, d, in[ 2] + 0x5a827999,  3);
	MD4STEP(F2, d, a, b, c, in[ 6] + 0x5a827999,  5);
	MD4STEP(F2, c, d, a, b, in[10] + 0x5a827999,  9);
	MD4STEP(F2, b, c, d, a, in[14] + 0x5a827999, 13);
	MD4STEP(F2, a, b, c, d, in[ 3] + 0x5a827999,  3);
	MD4STEP(F2, d, a, b, c, in[ 7] + 0x5a827999,  5);
	MD4STEP(F2, c, d, a, b, in[11] + 0x5a827999,  9);
	MD4STEP(F2, b, c, d, a, in[15] + 0x5a827999, 13);

	MD4STEP(F3, a, b, c, d, in[ 0] + 0x6ed9eba1,  3);
	MD4STEP(F3, d, a, b, c, in[ 8] + 0x6ed9eba1,  9);
	MD4STEP(F3, c, d, a, b, in[ 4] + 0x6ed9eba1, 11);
	MD4STEP(F3, b, c, d, a, in[12] + 0x6ed9eba1, 15);
	MD4STEP(F3, a, b, c, d, in[ 2] + 0x6ed9eba1,  3);
	MD4STEP(F3, d, a, b, c, in[10] + 0x6ed9eba1,  9);
	MD4STEP(F3, c, d, a, b, in[ 6] + 0x6ed9eba1, 11);
	MD4STEP(F3, b, c, d, a, in[14] + 0x6ed9eba1, 15);
	MD4STEP(F3, a, b, c, d, in[ 1] + 0x6ed9eba1,  3);
	MD4STEP(F3, d, a, b, c, in[ 9] + 0x6ed9eba1,  9);
	MD4STEP(F3, c, d, a, b, in[ 5] + 0x6ed9eba1, 11);
	MD4STEP(F3, b, c, d, a, in[13] + 0x6ed9eba1, 15);
	MD4STEP(F3, a, b, c, d, in[ 3] + 0x6ed9eba1,  3);
	MD4STEP(F3, d, a, b, c, in[11] + 0x6ed9eba1,  9);
	MD4STEP(F3, c, d, a, b, in[ 7] + 0x6ed9eba1, 11);
	MD4STEP(F3, b, c, d, a, in[15] + 0x6ed9eba1, 15);

	state[0] += a;
	state[1] += b;
	state[2] += c;
	state[3] += d;
}
@


1.8
log
@calling HashFinal with a null digest should crash, not be silently ignored
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.c,v 1.7 2005/08/08 08:05:35 espie Exp $	*/
@


1.7
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.c,v 1.6 2004/05/28 15:10:27 millert Exp $	*/
d130 3
a132 5
	if (digest != NULL) {
		for (i = 0; i < 4; i++)
			PUT_32BIT_LE(digest + i * 4, ctx->state[i]);
		memset(ctx, 0, sizeof(*ctx));
	}
@


1.6
log
@In the Final function, move the context zeroing into the digest != NULL
scope so that passing a NULL digest is equivalent to the Pad function
(like it used to be).  Fixes skey w/ sha1 as noticed by David Krause.
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.c,v 1.5 2004/05/03 18:07:07 millert Exp $	*/
a19 4

#if defined(LIBC_SCCS) && !defined(lint)
static const char rcsid[] = "$OpenBSD: md4.c,v 1.5 2004/05/03 18:07:07 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.5
log
@Some u_char -> u_int8_t conversion I missed earlier.
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.c,v 1.4 2004/05/03 17:30:14 millert Exp $	*/
d22 1
a22 1
static const char rcsid[] = "$OpenBSD: md4.c,v 1.4 2004/05/03 17:30:14 millert Exp $";
d137 1
a138 1
	memset(ctx, 0, sizeof(*ctx));	/* in case it's sensitive */
@


1.4
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.c,v 1.3 2004/04/29 18:45:39 millert Exp $	*/
d22 1
a22 1
static const char rcsid[] = "$OpenBSD: md4.c,v 1.3 2004/04/29 18:45:39 millert Exp $";
d45 1
a45 1
static u_char PADDING[MD4_BLOCK_LENGTH] = {
@


1.3
log
@Sync with md5.c rev. 1.4
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.c,v 1.2 2004/04/28 20:24:59 millert Exp $	*/
d22 1
a22 1
static const char rcsid[] = "$OpenBSD: md4.c,v 1.2 2004/04/28 20:24:59 millert Exp $";
d72 1
a72 1
	u_int32_t have, need;
d75 1
a75 1
	have = (u_int32_t)((ctx->count >> 3) & (MD4_BLOCK_LENGTH - 1));
d104 1
a104 1
 * Final wrapup - pad to 64-byte boundary with the bit pattern 
d108 1
a108 1
MD4Final(unsigned char digest[MD4_DIGEST_LENGTH], MD4_CTX *ctx)
d111 1
a111 2
	u_int32_t padlen;
	int i;
d123 9
d133 1
@


1.2
log
@Pass sizeof(*pointer) not sizeof(point) to memset.  Karsten Desler.
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.c,v 1.1 2004/04/28 16:54:00 millert Exp $	*/
d22 1
a22 1
static const char rcsid[] = "$OpenBSD: md4.c,v 1.1 2004/04/28 16:54:00 millert Exp $";
d29 21
a49 52
#if BYTE_ORDER == LITTLE_ENDIAN

#define htole32_4(buf)		/* Nothing */
#define htole32_14(buf)		/* Nothing */
#define htole32_16(buf)		/* Nothing */

#else

#define htole32_4(buf) do {						\
	(buf)[ 0] = htole32((buf)[ 0]);					\
	(buf)[ 1] = htole32((buf)[ 1]);					\
	(buf)[ 2] = htole32((buf)[ 2]);					\
	(buf)[ 3] = htole32((buf)[ 3]);					\
} while (0)

#define htole32_14(buf) do {						\
	(buf)[ 0] = htole32((buf)[ 0]);					\
	(buf)[ 1] = htole32((buf)[ 1]);					\
	(buf)[ 2] = htole32((buf)[ 2]);					\
	(buf)[ 3] = htole32((buf)[ 3]);					\
	(buf)[ 4] = htole32((buf)[ 4]);					\
	(buf)[ 5] = htole32((buf)[ 5]);					\
	(buf)[ 6] = htole32((buf)[ 6]);					\
	(buf)[ 7] = htole32((buf)[ 7]);					\
	(buf)[ 8] = htole32((buf)[ 8]);					\
	(buf)[ 9] = htole32((buf)[ 9]);					\
	(buf)[10] = htole32((buf)[10]);					\
	(buf)[11] = htole32((buf)[11]);					\
	(buf)[12] = htole32((buf)[12]);					\
	(buf)[13] = htole32((buf)[13]);					\
} while (0)

#define htole32_16(buf) do {						\
	(buf)[ 0] = htole32((buf)[ 0]);					\
	(buf)[ 1] = htole32((buf)[ 1]);					\
	(buf)[ 2] = htole32((buf)[ 2]);					\
	(buf)[ 3] = htole32((buf)[ 3]);					\
	(buf)[ 4] = htole32((buf)[ 4]);					\
	(buf)[ 5] = htole32((buf)[ 5]);					\
	(buf)[ 6] = htole32((buf)[ 6]);					\
	(buf)[ 7] = htole32((buf)[ 7]);					\
	(buf)[ 8] = htole32((buf)[ 8]);					\
	(buf)[ 9] = htole32((buf)[ 9]);					\
	(buf)[10] = htole32((buf)[10]);					\
	(buf)[11] = htole32((buf)[11]);					\
	(buf)[12] = htole32((buf)[12]);					\
	(buf)[13] = htole32((buf)[13]);					\
	(buf)[14] = htole32((buf)[14]);					\
	(buf)[15] = htole32((buf)[15]);					\
} while (0)

#endif
d70 1
a70 1
MD4Update(MD4_CTX *ctx, const unsigned char *buf, size_t len)
d72 1
a72 1
	u_int32_t count;
d74 3
a76 2
	/* Bytes already stored in ctx->buffer */
	count = (u_int32_t)((ctx->count >> 3) & 0x3f);
d81 7
a87 8
	/* Handle any leading odd-sized chunks */
	if (count) {
		unsigned char *p = (unsigned char *)ctx->buffer + count;

		count = MD4_BLOCK_LENGTH - count;
		if (len < count) {
			memcpy(p, buf, len);
			return;
a88 6
		memcpy(p, buf, count);
		htole32_16((u_int32_t *)ctx->buffer);
		MD4Transform(ctx->state, ctx->buffer);
		buf += count;
		len -= count;
	}
d90 6
a95 7
	/* Process data in MD4_BLOCK_LENGTH-byte chunks */
	while (len >= MD4_BLOCK_LENGTH) {
		memcpy(ctx->buffer, buf, MD4_BLOCK_LENGTH);
		htole32_16((u_int32_t *)ctx->buffer);
		MD4Transform(ctx->state, ctx->buffer);
		buf += MD4_BLOCK_LENGTH;
		len -= MD4_BLOCK_LENGTH;
d99 2
a100 1
	memcpy(ctx->buffer, buf, len);
d110 18
a127 28
	u_int32_t count;
	unsigned char *p;

	/* number of bytes mod 64 */
	count = (u_int32_t)(ctx->count >> 3) & 0x3f;

	/*
	 * Set the first char of padding to 0x80.
	 * This is safe since there is always at least one byte free.
	 */
	p = ctx->buffer + count;
	*p++ = 0x80;

	/* Bytes of padding needed to make 64 bytes */
	count = 64 - 1 - count;

	/* Pad out to 56 mod 64 */
	if (count < 8) {
		/* Two lots of padding:  Pad the first block to 64 bytes */
		memset(p, 0, count);
		htole32_16((u_int32_t *)ctx->buffer);
		MD4Transform(ctx->state, ctx->buffer);

		/* Now fill the next block with 56 bytes */
		memset(ctx->buffer, 0, 56);
	} else {
		/* Pad block to 56 bytes */
		memset(p, 0, count - 8);
a128 9
	htole32_14((u_int32_t *)ctx->buffer);

	/* Append bit count and transform */
	((u_int32_t *)ctx->buffer)[14] = ctx->count & 0xffffffff;
	((u_int32_t *)ctx->buffer)[15] = (u_int32_t)(ctx->count >> 32);

	MD4Transform(ctx->state, ctx->buffer);
	htole32_4(ctx->state);
	memcpy(digest, ctx->state, MD4_DIGEST_LENGTH);
d150 1
a150 1
MD4Transform(u_int32_t buf[4], const unsigned char inc[MD4_BLOCK_LENGTH])
d152 13
a164 2
	u_int32_t a, b, c, d;
	const u_int32_t *in = (const u_int32_t *)inc;
d166 4
a169 4
	a = buf[0];
	b = buf[1];
	c = buf[2];
	d = buf[3];
d222 4
a225 4
	buf[0] += a;
	buf[1] += b;
	buf[2] += c;
	buf[3] += d;
@


1.1
log
@PD md4 code derived from Colin Plumb's md5 routines.
@
text
@d1 1
a1 1
/*	$OpenBSD: md4c.c,v 1.14 2002/12/23 04:33:31 millert Exp $	*/
d22 1
a22 1
static const char rcsid[] = "$OpenBSD: md4c.c,v 1.14 2002/12/23 04:33:31 millert Exp $";
d185 1
a185 1
	memset(ctx, 0, sizeof(ctx));        /* In case it's sensitive */
@

