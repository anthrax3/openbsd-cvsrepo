head	1.24;
access;
symbols
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.22.0.4
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.20.0.4
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.19.0.6
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.18.0.18
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.16
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.14
	OPENBSD_5_0:1.18.0.12
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.10
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.8
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.4
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.6
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.17.0.18
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.16
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.14
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.12
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.10
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.8
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.6
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.4
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.24
date	2016.09.03.16.25.03;	author tedu;	state Exp;
branches;
next	1.23;
commitid	KRhF60sCd55H0FTx;

1.23
date	2016.03.30.06.38.41;	author jmc;	state Exp;
branches;
next	1.22;
commitid	LN9ijdk9SEnzWAbM;

1.22
date	2014.12.08.21.29.49;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	3cMNKyERtGxVT97S;

1.21
date	2014.12.08.20.37.11;	author tedu;	state Exp;
branches;
next	1.20;
commitid	bF1aN0ooA0JhT5Mq;

1.20
date	2014.03.23.23.27.22;	author naddy;	state Exp;
branches;
next	1.19;

1.19
date	2013.04.15.15.54.17;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2008.09.06.12.00.19;	author djm;	state Exp;
branches;
next	1.17;

1.17
date	2004.05.03.17.30.14;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.28.16.56.49;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.26.19.38.12;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.08.23.34.55;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.08.19.53.59;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.16.19.29.13;	author marc;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.25.14.27.18;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.24.20.10.13;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.24.19.54.08;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.02.14.20.40;	author art;	state Exp;
branches;
next	1.7;

1.7
date	99.11.17.05.22.40;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.11.20.11.18.41;	author d;	state Exp;
branches;
next	1.5;

1.5
date	97.07.17.06.02.42;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.17.05.37.01;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.07.12.20.06.02;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.07.11.04.29.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.09.29.16.15.04;	author millert;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Add functions for SHA512/256. The standard says you're supposed to start
with different magic numbers, so we need to add some functions instead
of just asking the user to truncate as desired. Sigh.
SHA512 is quite a bit faster than SHA256 on 64 bit CPUs,
but 256 bit hashes are usually quite sufficient. Best of both.
ok deraadt tom
@
text
@#	$OpenBSD: Makefile.inc,v 1.23 2016/03/30 06:38:41 jmc Exp $

# hash functions
.PATH: ${LIBCSRCDIR}/hash

HELPER=	md5hl.c rmd160hl.c sha1hl.c sha224hl.c sha256hl.c sha384hl.c sha512hl.c sha512_256hl.c
SRCS+=	md5.c rmd160.c sha1.c sha2.c ${HELPER} siphash.c
MAN+=	md5.3 rmd160.3 sha1.3 sha2.3 SipHash24.3

CLEANFILES+= ${HELPER}

md5hl.c:	helper.c
	sed -e 's/hashinc/md5.h/g' -e 's/HASH/MD5/g' $> > $@@

rmd160hl.c:	helper.c
	sed -e 's/hashinc/rmd160.h/g' -e 's/HASH/RMD160/g' $> > $@@

sha1hl.c:	helper.c
	sed -e 's/hashinc/sha1.h/g' -e 's/HASH/SHA1/g' $> > $@@

sha224hl.c:	helper.c
	sed -e 's/hashinc/sha2.h/g' \
	    -e 's/HASH/SHA224/g' \
	    -e 's/SHA[0-9][0-9][0-9]_CTX/SHA2_CTX/g' $> > $@@

sha256hl.c:	helper.c
	sed -e 's/hashinc/sha2.h/g' \
	    -e 's/HASH/SHA256/g' \
	    -e 's/SHA[0-9][0-9][0-9]_CTX/SHA2_CTX/g' $> > $@@

sha384hl.c:	helper.c
	sed -e 's/hashinc/sha2.h/g' \
	    -e 's/HASH/SHA384/g' \
	    -e 's/SHA[0-9][0-9][0-9]_CTX/SHA2_CTX/g' $> > $@@

sha512hl.c:	helper.c
	sed -e 's/hashinc/sha2.h/g' \
	    -e 's/HASH/SHA512/g' \
	    -e 's/SHA[0-9][0-9][0-9]_CTX/SHA2_CTX/g' $> > $@@

sha512_256hl.c:	helper.c
	sed -e 's/hashinc/sha2.h/g' \
	    -e 's/HASH/SHA512_256/g' \
	    -e 's/SHA512_256_CTX/SHA2_CTX/g' $> > $@@

beforedepend: md5hl.c rmd160hl.c sha1hl.c sha256hl.c sha384hl.c sha512hl.c sha512_256hl.c
@


1.23
log
@for some time now mandoc has not required MLINKS to function
correctly - logically complete that now by removing MLINKS from base;

authors need only to ensure there is an entry in NAME for any function/
util being added. MLINKS will still work, and remain for perl to ease
upgrades;

ok nicm (curses) bcook (ssl)
ok schwarze, who provided a lot of feedback and assistance
ok tb natano jung
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.22 2014/12/08 21:29:49 deraadt Exp $
d6 1
a6 1
HELPER=	md5hl.c rmd160hl.c sha1hl.c sha224hl.c sha256hl.c sha384hl.c sha512hl.c
d41 6
a46 1
beforedepend: md5hl.c rmd160hl.c sha1hl.c sha256hl.c sha384hl.c sha512hl.c
@


1.22
log
@typo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.21 2014/12/08 20:37:11 tedu Exp $
a8 24

MLINKS+=md5.3 MD5Transform.3 md5.3 MD5Init.3 md5.3 MD5Final.3
MLINKS+=md5.3 MD5Update.3    md5.3 MD5End.3  md5.3 MD5File.3
MLINKS+=md5.3 MD5FileChunk.3 md5.3 MD5Pad.3  md5.3 MD5Data.3
MLINKS+=rmd160.3 RMD160Transform.3 rmd160.3 RMD160Init.3 rmd160.3 RMD160Final.3
MLINKS+=rmd160.3 RMD160Update.3    rmd160.3 RMD160End.3  rmd160.3 RMD160File.3
MLINKS+=rmd160.3 RMD160FileChunk.3 rmd160.3 RMD160Pad.3  rmd160.3 RMD160Data.3
MLINKS+=sha1.3 SHA1Transform.3 sha1.3 SHA1Init.3 sha1.3 SHA1Final.3
MLINKS+=sha1.3 SHA1Update.3    sha1.3 SHA1End.3  sha1.3 SHA1File.3
MLINKS+=sha1.3 SHA1FileChunk.3 sha1.3 SHA1Pad.3  sha1.3 SHA1Data.3
MLINKS+=sha2.3 SHA224Init.3  sha2.3 SHA224Update.3    sha2.3 SHA224Pad.3
MLINKS+=sha2.3 SHA224Final.3 sha2.3 SHA224Transform.3 sha2.3 SHA224End.3
MLINKS+=sha2.3 SHA224File.3  sha2.3 SHA224FileChunk.3 sha2.3 SHA224Data.3
MLINKS+=sha2.3 SHA256Init.3  sha2.3 SHA256Update.3    sha2.3 SHA256Pad.3
MLINKS+=sha2.3 SHA256Final.3 sha2.3 SHA256Transform.3 sha2.3 SHA256End.3
MLINKS+=sha2.3 SHA256File.3  sha2.3 SHA256FileChunk.3 sha2.3 SHA256Data.3
MLINKS+=sha2.3 SHA384Init.3  sha2.3 SHA384Update.3    sha2.3 SHA384Pad.3
MLINKS+=sha2.3 SHA384Final.3 sha2.3 SHA384Transform.3 sha2.3 SHA384End.3
MLINKS+=sha2.3 SHA384File.3  sha2.3 SHA384FileChunk.3 sha2.3 SHA384Data.3
MLINKS+=sha2.3 SHA512Init.3  sha2.3 SHA512Update.3    sha2.3 SHA512Pad.3
MLINKS+=sha2.3 SHA512Final.3 sha2.3 SHA512Transform.3 sha2.3 SHA512End.3
MLINKS+=sha2.3 SHA512File.3  sha2.3 SHA512FileChunk.3 sha2.3 SHA512Data.3
MLINKS+=SipHash24.3 SipHash24_Init.3 SipHash24.3 SipHash24_Update.3
MLINKS+=SipHash24.3 SipHash24_End.3 SipHash24.3 SipHash24_Final.3
@


1.21
log
@add siphash from the kernel to libc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.20 2014/03/23 23:27:22 naddy Exp $
d8 1
a8 1
MAN+=	md5.3 rmd160.3 sha1.3 sha2.3 SipHash.3
@


1.20
log
@Remove the MD4 functions.
"A collision attack published in 2007 can find collisions for full
MD4 in less than two hash operations."

ok deraadt@@, man pages ok jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.19 2013/04/15 15:54:17 millert Exp $
d7 2
a8 2
SRCS+=	md5.c rmd160.c sha1.c sha2.c ${HELPER}
MAN+=	md5.3 rmd160.3 sha1.3 sha2.3
d31 3
@


1.19
log
@SHA-224 is to SHA-256 as SHA-384 is to SHA-512.  It was added in a
later revision of FIPS-180.  OK miod@@ jmc@@ guenther@@ djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.18 2008/09/06 12:00:19 djm Exp $
d6 4
a9 7
HELPER=	md4hl.c md5hl.c rmd160hl.c sha1hl.c sha224hl.c sha256hl.c sha384hl.c sha512hl.c
SRCS+=	md4.c md5.c rmd160.c sha1.c sha2.c ${HELPER}
MAN+=	md4.3 md5.3 rmd160.3 sha1.3 sha2.3

MLINKS+=md4.3 MD4Transform.3 md4.3 MD4Init.3 md4.3 MD4Final.3
MLINKS+=md4.3 MD4Update.3    md4.3 MD4End.3  md4.3 MD4File.3
MLINKS+=md4.3 MD4FileChunk.3 md4.3 MD4Pad.3  md4.3 MD4Data.3
d31 1
a31 14
CLEANFILES+= ${HELPER} md[45].3

.ifndef NOMAN
all:	md4.3 md5.3

md4.3:  mdX.3
	sed -e 's/mdX/md4/g' -e 's/mdY/md5/g' -e 's/MDX/MD4/g' $> > $@@

md5.3:  mdX.3
	sed -e 's/mdX/md5/g' -e 's/mdY/md4/g' -e 's/MDX/MD5/g' $> > $@@
.endif

md4hl.c:	helper.c
	sed -e 's/hashinc/md4.h/g' -e 's/HASH/MD4/g' $> > $@@
d62 1
a62 1
beforedepend: md4hl.c md5hl.c rmd160hl.c sha1hl.c sha256hl.c sha384hl.c sha512hl.c
@


1.18
log
@Rename SHA256/384/512 API to avoid namespace collisions with
forthcoming OpenSSL update.

Function names lose their underscore (SHA256_Init => SHA256Init) and
the various SHA256_CTX, SHA512_CTX are merged into a single SHA2_CTX
that is used for all these hashes.

ok millert@@ manpage bits jmc@@ "please commit" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.17 2004/05/03 17:30:14 millert Exp $
d6 1
a6 1
HELPER=	md4hl.c md5hl.c rmd160hl.c sha1hl.c sha256hl.c sha384hl.c sha512hl.c
d22 3
d57 5
@


1.17
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.16 2004/04/28 16:56:49 millert Exp $
d22 9
a30 9
MLINKS+=sha2.3 SHA256_Init.3 sha2.3 SHA256_Update.3 sha2.3 SHA256_Final.3
MLINKS+=sha2.3 SHA256_End.3  sha2.3 SHA256_File.3   sha2.3 SHA256_Data.3
MLINKS+=sha2.3 SHA256_Pad.3  sha2.3 SHA256_FileChunk.3
MLINKS+=sha2.3 SHA384_Init.3 sha2.3 SHA384_Update.3 sha2.3 SHA384_Final.3
MLINKS+=sha2.3 SHA384_End.3  sha2.3 SHA384_File.3   sha2.3 SHA384_Data.3
MLINKS+=sha2.3 SHA384_Pad.3  sha2.3 SHA384_FileChunk.3
MLINKS+=sha2.3 SHA512_Init.3 sha2.3 SHA512_Update.3 sha2.3 SHA512_Final.3
MLINKS+=sha2.3 SHA512_End.3  sha2.3 SHA512_File.3   sha2.3 SHA512_Data.3
MLINKS+=sha2.3 SHA512_Pad.3  sha2.3 SHA512_FileChunk.3
d56 3
a58 1
	sed -e 's/hashinc/sha2.h/g' -e 's/HASH_\{0,1\}/SHA256_/g' $> > $@@
d61 3
a63 1
	sed -e 's/hashinc/sha2.h/g' -e 's/HASH_\{0,1\}/SHA384_/g' $> > $@@
d66 3
a68 1
	sed -e 's/hashinc/sha2.h/g' -e 's/HASH_\{0,1\}/SHA512_/g' $> > $@@
@


1.16
log
@Don't build lib/libc/md, build md[45] in lib/libc/hash instead.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.15 2004/04/26 19:38:12 millert Exp $
d9 13
a21 12
MLINKS+=md4.3 MD4Init.3 md4.3 MD4Update.3 md4.3 MD4Final.3
MLINKS+=md4.3 MD4End.3  md4.3 MD4File.3   md4.3 MD4Data.3
MLINKS+=md4.3 MD4Transform.3
MLINKS+=md5.3 MD5Init.3 md5.3 MD5Update.3 md5.3 MD5Final.3
MLINKS+=md5.3 MD5End.3  md5.3 MD5File.3   md5.3 MD5Data.3
MLINKS+=md5.3 MD5Transform.3
MLINKS+=rmd160.3 RMD160Init.3 rmd160.3 RMD160Update.3 rmd160.3 RMD160Final.3
MLINKS+=rmd160.3 RMD160End.3  rmd160.3 RMD160File.3   rmd160.3 RMD160Data.3
MLINKS+=rmd160.3 RMD160Transform.3
MLINKS+=sha1.3 SHA1Init.3 sha1.3 SHA1Update.3 sha1.3 SHA1Final.3
MLINKS+=sha1.3 SHA1End.3  sha1.3 SHA1File.3   sha1.3 SHA1Data.3
MLINKS+=sha1.3 SHA1Transform.3
d24 1
d27 1
d30 1
@


1.15
log
@Use a common source file for all the hash helper functions that
previously lived in foohl.c.  The foohl.c files are now generated
via sed, though perhaps cpp could be used in the future.

Use u_int8_t instead of unsigned char for the buffers struct fooContext.
Add constants for buffer lengths and use them in function prototypes
and the man pages.

This is basically cosmetic surgery; there should be no functional changes.

OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.14 2003/05/08 23:34:55 millert Exp $
d6 9
a14 3
HELPER=	rmd160hl.c sha1hl.c sha256hl.c sha384hl.c sha512hl.c
SRCS+=	rmd160.c sha1.c sha2.c ${HELPER}
MAN+=	rmd160.3 sha1.3 sha2.3
d27 17
a43 1
CLEANFILES+= ${HELPER}
d60 1
a60 1
beforedepend: rmd160hl.c sha1hl.c sha256hl.c sha384hl.c sha512hl.c
@


1.14
log
@Add sha2 routines based on code by Aaron D. Gifford with minor
massaging and a man page by me.  I used the phk-derived stuff for
sha2hl.c instead of Aaron's for consistency with our other hash
routines.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.13 2003/01/08 19:53:59 millert Exp $
d6 2
a7 1
SRCS+=	rmd160.c rmd160hl.c sha1.c sha1hl.c sha2.c sha2hl.c
d21 18
@


1.13
log
@Move the rounds into separate functions on sparc64 so gcc's optimizer
doesn't blow up.  This is a hack but is better than compiling sha1.c
with -O0 on sparc64.  From NetBSD (mrg).
deraadt@@ OK
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.12 2002/01/16 19:29:13 marc Exp $
d6 5
a10 2
SRCS+=	sha1.c sha1hl.c rmd160.c rmd160hl.c
MAN+=	sha1.3 rmd160.3
d14 6
a19 3
MLINKS+=rmd160.3 RMD160Init.3 rmd160.3 RMD160Update.3 rmd160.3 RMD160Final.3
MLINKS+=rmd160.3 RMD160End.3  rmd160.3 RMD160File.3   rmd160.3 RMD160Data.3
MLINKS+=rmd160.3 RMD160Transform.3
@


1.12
log
@compile sparc64 version of sha1.go with -O0, too. OK jason@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2001/09/25 14:27:18 drahn Exp $
a13 13

.if (${MACHINE_ARCH} == "sparc64")
sha1.o:
	${CC} ${CFLAGS} ${CPPFLAGS} -O0 -c ${.IMPSRC}

sha1.po:
	${CC} ${CFLAGS} ${CPPFLAGS} -O0 -c ${.IMPSRC} -o $@@
sha1.so:
	${CC} ${CFLAGS} ${CPPFLAGS} -O0 ${PICFLAG} -DPIC -c ${.IMPSRC} -o $@@
sha1.go:
	${CC} ${CFLAGS} ${CPPFLAGS} -O0 -g -c ${.IMPSRC} -o $@@

.endif
@


1.11
log
@Also build the .so version of sha1 without optimization.
ok jason@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2001/09/24 20:10:13 jason Exp $
d23 3
@


1.10
log
@get previous right...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2001/09/24 19:54:08 jason Exp $
d21 2
@


1.9
log
@add hack for sha1.po on sparc64, too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2001/09/02 14:20:40 art Exp $
d20 1
a20 1
	${CC} ${CFLAGS} ${CPPFLAGS} -O0 -c ${.IMPSRC}
@


1.8
log
@gcc hangs when compiling sha1 on sparc64, workaround.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 1999/11/17 05:22:40 millert Exp $
d17 3
@


1.7
log
@Add missing MLINKs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 1998/11/20 11:18:41 d Exp $
d14 5
@


1.6
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 1997/07/17 06:02:42 millert Exp $
d8 2
a9 3
MLINKS+=sha1.3 SHA1Init.3
MLINKS+=sha1.3 SHA1Update.3
MLINKS+=sha1.3 SHA1Final.3
d11 3
@


1.5
log
@Manpage for RMD*(3)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 1997/07/17 05:37:01 millert Exp $
d4 1
a4 1
.PATH: ${.CURDIR}/hash
@


1.4
log
@mdX(3)-like interface to RIPEMD-160 hash function.  Code by
Antoon Bosselaers and massaged by me to fit the mdX(3) API.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 1997/07/12 20:06:02 millert Exp $
d7 1
a7 1
MAN+=	sha1.3
@


1.3
log
@Add SHA1End, SHA1File, SHA1Data helper functions like in md5(3).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 1997/07/11 04:29:20 millert Exp $
d6 1
a6 1
SRCS+=	sha1.c sha1hl.c
@


1.2
log
@Install sha1(3) and links.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 1996/09/29 16:15:04 millert Exp $
d6 1
a6 1
SRCS+=	sha1.c
@


1.1
log
@added sha1 (secure hash function).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 1996/08/19 08:27:59 millert Exp $
d7 5
a11 1
#MAN+=	sha1.3
@
