head	1.26;
access;
symbols
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.20.0.4
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.19.0.6
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.16
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.14
	OPENBSD_5_0:1.16.0.12
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.10
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.8
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.4
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.6
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.14.0.6
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4;
locks; strict;
comment	@.\" @;


1.26
date	2016.09.04.09.28.12;	author tedu;	state Exp;
branches;
next	1.25;
commitid	LFEydVB2qqECWdBu;

1.25
date	2016.09.04.09.24.38;	author tedu;	state Exp;
branches;
next	1.24;
commitid	OsdUTzaD6JMBb2nk;

1.24
date	2016.03.10.08.41.12;	author jmc;	state Exp;
branches;
next	1.23;
commitid	Qc8VgF56BCkE2pI1;

1.23
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.22;
commitid	QU70QaxjyBAtj4Rv;

1.22
date	2015.02.05.02.33.09;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	3DjwIM9vrpCmLhTQ;

1.21
date	2014.11.26.02.05.58;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	Iv6a1fxvN93wyKF7;

1.20
date	2014.03.23.23.27.22;	author naddy;	state Exp;
branches;
next	1.19;

1.19
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2013.04.15.15.54.17;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2012.09.07.23.11.51;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.12.05.33.10;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2008.09.06.12.00.19;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.31.19.19.29;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2007.02.27.19.34.53;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2005.09.12.10.33.29;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2004.06.22.01.57.29;	author jfb;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.16.18.29.09;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.05.17.39.47;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.03.18.10.07;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.03.17.30.15;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.29.15.51.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.03.13.57.39;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.17.21.56.23;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.03.01.52.40;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.30.19.55.03;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.08.23.34.55;	author millert;	state Exp;
branches;
next	;


desc
@@


1.26
log
@jmc says you can never have too many functions in one man page, so list
the SHA512/256 functions as well.
@
text
@.\"	$OpenBSD: sha2.3,v 1.25 2016/09/04 09:24:38 tedu Exp $
.\"
.\" Copyright (c) 2003, 2004 Todd C. Miller <Todd.Miller@@courtesan.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" Sponsored in part by the Defense Advanced Research Projects
.\" Agency (DARPA) and Air Force Research Laboratory, Air Force
.\" Materiel Command, USAF, under agreement number F39502-99-1-0512.
.\"
.\" See http://www.nist.gov/sha/ for the detailed standard
.\"
.Dd $Mdocdate: September 4 2016 $
.Dt SHA256INIT 3
.Os
.Sh NAME
.Nm SHA224Init ,
.Nm SHA224Update ,
.Nm SHA224Pad ,
.Nm SHA224Final ,
.Nm SHA224Transform ,
.Nm SHA224End ,
.Nm SHA224File ,
.Nm SHA224FileChunk ,
.Nm SHA224Data ,
.Nm SHA256Init ,
.Nm SHA256Update ,
.Nm SHA256Pad ,
.Nm SHA256Final ,
.Nm SHA256Transform ,
.Nm SHA256End ,
.Nm SHA256File ,
.Nm SHA256FileChunk ,
.Nm SHA256Data ,
.Nm SHA384Init ,
.Nm SHA384Update ,
.Nm SHA384Pad ,
.Nm SHA384Final ,
.Nm SHA384Transform ,
.Nm SHA384End ,
.Nm SHA384File ,
.Nm SHA384FileChunk ,
.Nm SHA384Data ,
.Nm SHA512Init ,
.Nm SHA512Update ,
.Nm SHA512Pad ,
.Nm SHA512Final ,
.Nm SHA512Transform ,
.Nm SHA512End ,
.Nm SHA512File ,
.Nm SHA512FileChunk ,
.Nm SHA512Data ,
.Nm SHA512_256Init ,
.Nm SHA512_256Update ,
.Nm SHA512_256Pad ,
.Nm SHA512_256Final ,
.Nm SHA512_256Transform ,
.Nm SHA512_256End ,
.Nm SHA512_256File ,
.Nm SHA512_256FileChunk ,
.Nm SHA512_256Data
.Nd calculate the NIST Secure Hash Standard (version 2)
.Sh SYNOPSIS
.In sys/types.h
.In sha2.h
.Ft void
.Fn SHA224Init "SHA2_CTX *context"
.Ft void
.Fn SHA224Update "SHA2_CTX *context" "const u_int8_t *data" "size_t len"
.Ft void
.Fn SHA224Pad "SHA2_CTX *context"
.Ft void
.Fn SHA224Final "u_int8_t digest[SHA224_DIGEST_LENGTH]" "SHA2_CTX *context"
.Ft void
.Fn SHA224Transform "u_int32_t state[8]" "const u_int8_t buffer[SHA224_BLOCK_LENGTH]"
.Ft "char *"
.Fn SHA224End "SHA2_CTX *context" "char *buf"
.Ft "char *"
.Fn SHA224File "const char *filename" "char *buf"
.Ft "char *"
.Fn SHA224FileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
.Ft "char *"
.Fn SHA224Data "const u_int8_t *data" "size_t len" "char *buf"
.Ft void
.Fn SHA256Init "SHA2_CTX *context"
.Ft void
.Fn SHA256Update "SHA2_CTX *context" "const u_int8_t *data" "size_t len"
.Ft void
.Fn SHA256Pad "SHA2_CTX *context"
.Ft void
.Fn SHA256Final "u_int8_t digest[SHA256_DIGEST_LENGTH]" "SHA2_CTX *context"
.Ft void
.Fn SHA256Transform "u_int32_t state[8]" "const u_int8_t buffer[SHA256_BLOCK_LENGTH]"
.Ft "char *"
.Fn SHA256End "SHA2_CTX *context" "char *buf"
.Ft "char *"
.Fn SHA256File "const char *filename" "char *buf"
.Ft "char *"
.Fn SHA256FileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
.Ft "char *"
.Fn SHA256Data "const u_int8_t *data" "size_t len" "char *buf"
.Ft void
.Fn SHA384Init "SHA2_CTX *context"
.Ft void
.Fn SHA384Update "SHA2_CTX *context" "const u_int8_t *data" "size_t len"
.Ft void
.Fn SHA384Pad "SHA2_CTX *context"
.Ft void
.Fn SHA384Final "u_int8_t digest[SHA384_DIGEST_LENGTH]" "SHA2_CTX *context"
.Ft void
.Fn SHA384Transform "u_int64_t state[8]" "const u_int8_t buffer[SHA384_BLOCK_LENGTH]"
.Ft "char *"
.Fn SHA384End "SHA2_CTX *context" "char *buf"
.Ft "char *"
.Fn SHA384File "const char *filename" "char *buf"
.Ft "char *"
.Fn SHA384FileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
.Ft "char *"
.Fn SHA384Data "const u_int8_t *data" "size_t len" "char *buf"
.Ft void
.Fn SHA512Init "SHA2_CTX *context"
.Ft void
.Fn SHA512Update "SHA2_CTX *context" "const u_int8_t *data" "size_t len"
.Ft void
.Fn SHA512Pad "SHA2_CTX *context"
.Ft void
.Fn SHA512Final "u_int8_t digest[SHA512_DIGEST_LENGTH]" "SHA2_CTX *context"
.Ft void
.Fn SHA512Transform "u_int64_t state[8]" "const u_int8_t buffer[SHA512_BLOCK_LENGTH]"
.Ft "char *"
.Fn SHA512End "SHA2_CTX *context" "char *buf"
.Ft "char *"
.Fn SHA512File "const char *filename" "char *buf"
.Ft "char *"
.Fn SHA512FileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
.Ft "char *"
.Fn SHA512Data "const u_int8_t *data" "size_t len" "char *buf"
.Ft void
.Fn SHA512_256Init "SHA2_CTX *context"
.Ft void
.Fn SHA512_256Update "SHA2_CTX *context" "const u_int8_t *data" "size_t len"
.Ft void
.Fn SHA512_256Pad "SHA2_CTX *context"
.Ft void
.Fn SHA512_256Final "u_int8_t digest[SHA512_256_DIGEST_LENGTH]" "SHA2_CTX *context"
.Ft void
.Fn SHA512_256Transform "u_int64_t state[8]" "const u_int8_t buffer[SHA512_256_BLOCK_LENGTH]"
.Ft "char *"
.Fn SHA512_256End "SHA2_CTX *context" "char *buf"
.Ft "char *"
.Fn SHA512_256File "const char *filename" "char *buf"
.Ft "char *"
.Fn SHA512_256FileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
.Ft "char *"
.Fn SHA512_256Data "const u_int8_t *data" "size_t len" "char *buf"
.Sh DESCRIPTION
The SHA2 functions implement the NIST Secure Hash Standard,
FIPS PUB 180-2.
The SHA2 functions are used to generate a condensed representation of a
message called a message digest, suitable for use as a digital signature.
There are four families of functions, with names corresponding to
the number of bits in the resulting message digest.
The SHA-224 and SHA-256 functions are limited to processing a message of less
than 2^64 bits as input.
The SHA-384 and SHA-512 functions can process a message of at most 2^128 - 1
bits as input.
.Pp
The SHA2 functions are considered to be more secure than the
.Xr sha1 3
functions with which they share a similar interface.
The 224, 256, 384, and 512-bit versions of SHA2 share the same interface.
SHA512/256, a truncated version of SHA512, is also supported.
For brevity, only the 256-bit variants are described below.
.Pp
The
.Fn SHA256Init
function initializes a SHA2_CTX
.Fa context
for use with
.Fn SHA256Update
and
.Fn SHA256Final .
The
.Fn SHA256Update
function adds
.Fa data
of length
.Fa len
to the SHA2_CTX specified by
.Fa context .
.Fn SHA256Final
is called when all data has been added via
.Fn SHA256Update
and stores a message digest in the
.Fa digest
parameter.
.Pp
The
.Fn SHA256Pad
function can be used to apply padding to the message digest as in
.Fn SHA256Final ,
but the current context can still be used with
.Fn SHA256Update .
.Pp
The
.Fn SHA256Transform
function is used by
.Fn SHA256Update
to hash 512-bit blocks and forms the core of the algorithm.
Most programs should use the interface provided by
.Fn SHA256Init ,
.Fn SHA256Update ,
and
.Fn SHA256Final
instead of calling
.Fn SHA256Transform
directly.
.Pp
The
.Fn SHA256End
function is a front end for
.Fn SHA256Final
which converts the digest into an
.Tn ASCII
representation of the digest in hexadecimal.
.Pp
The
.Fn SHA256File
function calculates the digest for a file and returns the result via
.Fn SHA256End .
If
.Fn SHA256File
is unable to open the file, a
.Dv NULL
pointer is returned.
.Pp
.Fn SHA256FileChunk
behaves like
.Fn SHA256File
but calculates the digest only for that portion of the file starting at
.Fa offset
and continuing for
.Fa length
bytes or until end of file is reached, whichever comes first.
A zero
.Fa length
can be specified to read until end of file.
A negative
.Fa length
or
.Fa offset
will be ignored.
.Pp
The
.Fn SHA256Data
function
calculates the digest of an arbitrary string and returns the result via
.Fn SHA256End .
.Pp
For each of the
.Fn SHA256End ,
.Fn SHA256File ,
.Fn SHA256FileChunk ,
and
.Fn SHA256Data
functions the
.Fa buf
parameter should either be a string large enough to hold the resulting digest
(e.g.\&
.Dv SHA224_DIGEST_STRING_LENGTH ,
.Dv SHA256_DIGEST_STRING_LENGTH ,
.Dv SHA384_DIGEST_STRING_LENGTH ,
.Dv SHA512_DIGEST_STRING_LENGTH ,
or
.Dv SHA512_256_DIGEST_STRING_LENGTH ,
depending on the function being used)
or a
.Dv NULL
pointer.
In the latter case, space will be dynamically allocated via
.Xr malloc 3
and should be freed using
.Xr free 3
when it is no longer needed.
.Sh EXAMPLES
The following code fragment will calculate the SHA-256 digest for the string
.Qq abc ,
which is
.Dq 0xba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad .
.Bd -literal -offset indent
SHA2_CTX ctx;
u_int8_t results[SHA256_DIGEST_LENGTH];
char *buf;
int n;

buf = "abc";
n = strlen(buf);
SHA256Init(&ctx);
SHA256Update(&ctx, (u_int8_t *)buf, n);
SHA256Final(results, &ctx);

/* Print the digest as one long hex value */
printf("0x");
for (n = 0; n \*(Lt SHA256_DIGEST_LENGTH; n++)
	printf("%02x", results[n]);
putchar('\en');
.Ed
.Pp
Alternately, the helper functions could be used in the following way:
.Bd -literal -offset indent
u_int8_t output[SHA256_DIGEST_STRING_LENGTH];
char *buf = "abc";

printf("0x%s\en", SHA256Data(buf, strlen(buf), output));
.Ed
.Sh SEE ALSO
.Xr cksum 1 ,
.Xr md5 3 ,
.Xr rmd160 3 ,
.Xr sha1 3
.Rs
.%T Secure Hash Standard
.%O FIPS PUB 180-2
.Re
.Sh HISTORY
The SHA2 functions appeared in
.Ox 3.4 .
.Sh AUTHORS
.An -nosplit
This implementation of the SHA functions was written by
.An Aaron D. Gifford .
.Pp
The
.Fn SHA256End ,
.Fn SHA256File ,
.Fn SHA256FileChunk ,
and
.Fn SHA256Data
helper functions are derived from code written by
.An Poul-Henning Kamp .
@


1.25
log
@remove caveats that are either misleading or unhelpful.
ok jmc naddy
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.24 2016/03/10 08:41:12 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: March 10 2016 $
d62 10
a71 1
.Nm SHA512Data
d148 18
d182 1
d283 1
d285 1
a285 1
.Dv SHA512_DIGEST_STRING_LENGTH ,
@


1.24
log
@un-vax;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.23 2015/11/10 23:48:18 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: November 10 2015 $
a321 7
.Sh CAVEATS
This implementation of the Secure Hash Standard has not been validated by
NIST and as such is not in official compliance with the standard.
.Pp
If a message digest is to be copied to a multi-byte type (i.e.\&
an array of 32-bit integers) it will be necessary to
perform byte swapping on little endian machines such as the i386 and alpha.
@


1.23
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.22 2015/02/05 02:33:09 schwarze Exp $
d23 1
a23 1
.Dd $Mdocdate: February 5 2015 $
d328 1
a328 2
perform byte swapping on little endian machines such as the i386, alpha,
and vax.
@


1.22
log
@macro fixes from Kaspars at Bankovskis dot net;
also fixing one typo in fts(3) while here
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.21 2014/11/26 02:05:58 schwarze Exp $
d23 2
a24 2
.Dd $Mdocdate: November 26 2014 $
.Dt SHA2 3
d27 9
d44 19
a62 1
.Nm SHA256Data
d144 1
a144 1
There are three families of functions, with names corresponding to
@


1.21
log
@macro cleanup; from kaspars at bankovskis dot net
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.20 2014/03/23 23:27:22 naddy Exp $
d23 1
a23 1
.Dd $Mdocdate: March 23 2014 $
d225 3
a227 3
.Ev SHA224_DIGEST_STRING_LENGTH ,
.Ev SHA256_DIGEST_STRING_LENGTH ,
.Ev SHA384_DIGEST_STRING_LENGTH ,
d229 1
a229 1
.Ev SHA512_DIGEST_STRING_LENGTH ,
@


1.20
log
@Remove the MD4 functions.
"A collision attack published in 2007 can find collisions for full
MD4 in less than two hash operations."

ok deraadt@@, man pages ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.19 2013/06/05 03:39:22 tedu Exp $
d23 1
a23 1
.Dd $Mdocdate: June 5 2013 $
d133 1
a133 1
.Ar context
d141 1
a141 1
.Ar data
d143 1
a143 1
.Ar len
d145 1
a145 1
.Ar context .
d150 1
a150 1
.Ar digest
d222 1
a222 1
.Ar buf
d283 3
a285 1
This implementation of the SHA functions was written by Aaron D. Gifford.
d293 2
a294 1
helper functions are derived from code written by Poul-Henning Kamp.
@


1.19
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.18 2013/04/15 15:54:17 millert Exp $
d23 1
a23 1
.Dd $Mdocdate: April 15 2013 $
a271 1
.Xr md4 3 ,
@


1.18
log
@SHA-224 is to SHA-256 as SHA-384 is to SHA-512.  It was added in a
later revision of FIPS-180.  OK miod@@ jmc@@ guenther@@ djm@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.17 2012/09/07 23:11:51 tedu Exp $
d23 1
a23 1
.Dd $Mdocdate: September 7 2012 $
d38 2
a39 2
.Fd #include <sys/types.h>
.Fd #include <sha2.h>
@


1.17
log
@add const where missing
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.16 2008/09/12 05:33:10 djm Exp $
d23 1
a23 1
.Dd $Mdocdate: September 12 2008 $
d41 18
d119 1
a119 1
The SHA-256 functions are limited to processing a message of less
d127 1
a127 1
The 256, 384, and 512-bit versions of SHA2 share the same interface.
d225 1
@


1.16
log
@the last example doesn't need a ctx variable;
from Loic Tortay via jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.15 2008/09/06 12:00:19 djm Exp $
d23 1
a23 1
.Dd $Mdocdate: September 6 2008 $
d57 1
a57 1
.Fn SHA256Data "u_int8_t *data" "size_t len" "char *buf"
d71 1
a71 1
.Fn SHA384File "char *filename" "char *buf"
d73 1
a73 1
.Fn SHA384FileChunk "char *filename" "char *buf" "off_t offset" "off_t length"
d75 1
a75 1
.Fn SHA384Data "u_int8_t *data" "size_t len" "char *buf"
d89 1
a89 1
.Fn SHA512File "char *filename" "char *buf"
d91 1
a91 1
.Fn SHA512FileChunk "char *filename" "char *buf" "off_t offset" "off_t length"
d93 1
a93 1
.Fn SHA512Data "u_int8_t *data" "size_t len" "char *buf"
@


1.15
log
@Rename SHA256/384/512 API to avoid namespace collisions with
forthcoming OpenSSL update.

Function names lose their underscore (SHA256_Init => SHA256Init) and
the various SHA256_CTX, SHA512_CTX are merged into a single SHA2_CTX
that is used for all these hashes.

ok millert@@ manpage bits jmc@@ "please commit" deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.14 2007/05/31 19:19:29 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: May 31 2007 $
a245 1
SHA2_CTX ctx;
@


1.14
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.13 2007/02/27 19:34:53 millert Exp $
d23 1
a23 1
.Dd $Mdocdate$
d27 9
a35 9
.Nm SHA256_Init ,
.Nm SHA256_Update ,
.Nm SHA256_Pad ,
.Nm SHA256_Final ,
.Nm SHA256_Transform ,
.Nm SHA256_End ,
.Nm SHA256_File ,
.Nm SHA256_FileChunk ,
.Nm SHA256_Data
d41 1
a41 1
.Fn SHA256_Init "SHA256_CTX *context"
d43 1
a43 1
.Fn SHA256_Update "SHA256_CTX *context" "const u_int8_t *data" "size_t len"
d45 1
a45 1
.Fn SHA256_Pad "SHA256_CTX *context"
d47 1
a47 1
.Fn SHA256_Final "u_int8_t digest[SHA256_DIGEST_LENGTH]" "SHA256_CTX *context"
d49 1
a49 1
.Fn SHA256_Transform "u_int32_t state[8]" "const u_int8_t buffer[SHA256_BLOCK_LENGTH]"
d51 1
a51 1
.Fn SHA256_End "SHA256_CTX *context" "char *buf"
d53 1
a53 1
.Fn SHA256_File "const char *filename" "char *buf"
d55 1
a55 1
.Fn SHA256_FileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
d57 1
a57 1
.Fn SHA256_Data "u_int8_t *data" "size_t len" "char *buf"
d59 1
a59 1
.Fn SHA384_Init "SHA384_CTX *context"
d61 1
a61 1
.Fn SHA384_Update "SHA384_CTX *context" "const u_int8_t *data" "size_t len"
d63 1
a63 1
.Fn SHA384_Pad "SHA384_CTX *context"
d65 1
a65 1
.Fn SHA384_Final "u_int8_t digest[SHA384_DIGEST_LENGTH]" "SHA384_CTX *context"
d67 1
a67 1
.Fn SHA384_Transform "u_int64_t state[8]" "const u_int8_t buffer[SHA384_BLOCK_LENGTH]"
d69 1
a69 1
.Fn SHA384_End "SHA384_CTX *context" "char *buf"
d71 1
a71 1
.Fn SHA384_File "char *filename" "char *buf"
d73 1
a73 1
.Fn SHA384_FileChunk "char *filename" "char *buf" "off_t offset" "off_t length"
d75 1
a75 1
.Fn SHA384_Data "u_int8_t *data" "size_t len" "char *buf"
d77 1
a77 1
.Fn SHA512_Init "SHA512_CTX *context"
d79 1
a79 1
.Fn SHA512_Update "SHA512_CTX *context" "const u_int8_t *data" "size_t len"
d81 1
a81 1
.Fn SHA512_Pad "SHA512_CTX *context"
d83 1
a83 1
.Fn SHA512_Final "u_int8_t digest[SHA512_DIGEST_LENGTH]" "SHA512_CTX *context"
d85 1
a85 1
.Fn SHA512_Transform "u_int64_t state[8]" "const u_int8_t buffer[SHA512_BLOCK_LENGTH]"
d87 1
a87 1
.Fn SHA512_End "SHA512_CTX *context" "char *buf"
d89 1
a89 1
.Fn SHA512_File "char *filename" "char *buf"
d91 1
a91 1
.Fn SHA512_FileChunk "char *filename" "char *buf" "off_t offset" "off_t length"
d93 1
a93 1
.Fn SHA512_Data "u_int8_t *data" "size_t len" "char *buf"
d113 2
a114 2
.Fn SHA256_Init
function initializes a SHA256_CTX
d117 1
a117 1
.Fn SHA256_Update ,
d119 1
a119 1
.Fn SHA256_Final .
d121 1
a121 1
.Fn SHA256_Update
d126 1
a126 1
to the SHA256_CTX specified by
d128 1
a128 1
.Fn SHA256_Final
d130 1
a130 1
.Fn SHA256_Update
d136 1
a136 1
.Fn SHA256_Pad
d138 1
a138 1
.Fn SHA256_Final ,
d140 1
a140 1
.Fn SHA256_Update .
d143 1
a143 1
.Fn SHA256_Transform
d145 1
a145 1
.Fn SHA256_Update
d148 2
a149 2
.Fn SHA256_Init ,
.Fn SHA256_Update ,
d151 1
a151 1
.Fn SHA256_Final
d153 1
a153 1
.Fn SHA256_Transform
d157 1
a157 1
.Fn SHA256_End
d159 1
a159 1
.Fn SHA256_Final
d165 1
a165 1
.Fn SHA256_File
d167 1
a167 1
.Fn SHA256_End .
d169 1
a169 1
.Fn SHA256_File
d174 1
a174 1
.Fn SHA256_FileChunk
d176 1
a176 1
.Fn SHA256_File
d192 1
a192 1
.Fn SHA256_Data
d195 1
a195 1
.Fn SHA256_End .
d198 3
a200 3
.Fn SHA256_End ,
.Fn SHA256_File ,
.Fn SHA256_FileChunk ,
d202 1
a202 1
.Fn SHA256_Data
d226 1
a226 1
SHA256_CTX ctx;
d233 3
a235 3
SHA256_Init(&ctx);
SHA256_Update(&ctx, (u_int8_t *)buf, n);
SHA256_Final(results, &ctx);
d246 1
a246 1
SHA256_CTX ctx;
d250 1
a250 1
printf("0x%s\en", SHA256_Data(buf, strlen(buf), output));
d269 3
a271 3
.Fn SHA256_End ,
.Fn SHA256_File ,
.Fn SHA256_FileChunk ,
d273 1
a273 1
.Fn SHA256_Data
@


1.13
log
@sha2 hashes are not 5 32-bit ints in size.  Just leave out the size
in ints since there are multiple flavors.  The key point to get
across is that when storing as a type > byte it may be necessary
to do byte swapping depending on the machine's byte order.
Noticed by Tamas TEVESZ.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.12 2005/09/12 10:33:29 jmc Exp $
d23 1
a23 1
.Dd April 24, 2003
@


1.12
log
@some markup and punctuation fixes from wiz@@netbsd
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.11 2004/06/22 01:57:29 jfb Exp $
d280 1
a280 1
an array of five 32-bit integers) it will be necessary to
@


1.11
log
@Make the `filename' parameter to HASHFile() and HASHFileChunk() const
ok pedro@@, millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.10 2004/05/16 18:29:09 otto Exp $
d149 1
a149 1
.Fn SHA256_Update
d170 3
a172 1
is unable to open the file, a NULL pointer is returned.
d208 1
a208 1
.Ev SHA384_DIGEST_STRING_LENGTH
d212 3
a214 1
or a NULL pointer.
d239 1
a239 1
for (n = 0; n < SHA256_DIGEST_LENGTH; n++)
d279 1
a279 1
If a message digest is to be copied to a multi-byte type (ie:
@


1.10
log
@Add .Xr's to the commands implementing the various digests. ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.9 2004/05/05 17:39:47 millert Exp $
d53 1
a53 1
.Fn SHA256_File "char *filename" "char *buf"
d55 1
a55 1
.Fn SHA256_FileChunk "char *filename" "char *buf" "off_t offset" "off_t length"
@


1.9
log
@Make the Transform functions match the other hash types and document them.
Use sizeof() in the Init functions where it makes sense.
Use weak aliases instead of wrapper functions.

Probably should have gone in before the major bump but as these are only
used internally by the sha2 functions themselves there should be no problem.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.8 2004/05/03 18:10:07 millert Exp $
d249 1
@


1.8
log
@Sync some prototypes with the headers
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.7 2004/05/03 17:30:15 millert Exp $
d31 1
d48 2
d66 2
d84 2
d141 14
@


1.7
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.6 2004/04/29 15:51:16 millert Exp $
d54 1
a54 1
.Fn SHA256_Data "u_int8_t *data" "u_int len" "char *buf"
@


1.6
log
@Undo some recent prototype changes; it is legal to pass the helper
functions can take a NULL buf pointer.  They will malloc memory as
needed in this case.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.5 2003/10/03 13:57:39 jmc Exp $
d29 1
d33 1
d44 2
d52 2
d60 2
d68 2
d76 2
d84 2
d127 6
a132 4
When a null pointer is passed to
.Fn SHA256_Final
as first argument only the final padding will be applied and the
current context can still be used with
d151 17
d177 1
d245 1
@


1.5
log
@correct hash for EXAMPLES, plus some typos;
from er, Charlie Root (PR 3506)
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.4 2003/06/17 21:56:23 millert Exp $
d3 1
a3 1
.\" Copyright (c) 2003 Todd C. Miller <Todd.Miller@@courtesan.com>
d44 1
a44 1
.Fn SHA256_End "SHA256_CTX *context" "char buf[SHA256_DIGEST_STRING_LENGTH]"
d46 1
a46 1
.Fn SHA256_File "char *filename" "char buf[SHA256_DIGEST_STRING_LENGTH]"
d48 1
a48 1
.Fn SHA256_Data "u_int8_t *data" "u_int len" "char buf[SHA256_DIGEST_STRING_LENGTH]"
d56 1
a56 1
.Fn SHA384_End "SHA384_CTX *context" "char buf[SHA384_DIGEST_STRING_LENGTH]"
d58 1
a58 1
.Fn SHA384_File "char *filename" "char buf[SHA384_DIGEST_STRING_LENGTH]"
d60 1
a60 1
.Fn SHA384_Data "u_int8_t *data" "size_t len" "char buf[SHA384_DIGEST_STRING_LENGTH]"
d68 1
a68 1
.Fn SHA512_End "SHA512_CTX *context" "char buf[SHA512_DIGEST_STRING_LENGTH]"
d70 1
a70 1
.Fn SHA512_File "char *filename" "char buf[SHA512_DIGEST_STRING_LENGTH]"
d72 1
a72 1
.Fn SHA512_Data "u_int8_t *data" "size_t len" "char buf[SHA512_DIGEST_STRING_LENGTH]"
@


1.4
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.3 2003/06/03 01:52:40 millert Exp $
d88 2
a89 2
The 256, 384, and 512 bit versions of SHA2 share the same interface.
For brevity, only the 256 bit variants are described below.
d133 1
a133 1
is unable to open the file a NULL pointer is returned.
d149 1
a149 1
(e.g.
d162 4
a165 2
The follow code fragment will calculate the digest for
the string "abc" which is ``0xa9993e36476816aba3e25717850c26c9cd0d89d''.
d206 1
a206 1
This implementation of the SHA fucntions was written by Aaron D. Gifford.
@


1.3
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.2 2003/05/30 19:55:03 jmc Exp $
d9 11
a19 7
.\" THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
.\" WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
.\" FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
.\" OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
.\" CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@


1.2
log
@- section reorder
- whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: sha2.3,v 1.1 2003/05/08 23:34:55 millert Exp $
a3 1
.\" All rights reserved.
d5 3
a7 10
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
d9 7
a15 10
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.1
log
@Add sha2 routines based on code by Aaron D. Gifford with minor
massaging and a man page by me.  I used the phk-derived stuff for
sha2hl.c instead of Aaron's for consistency with our other hash
routines.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d85 1
a85 1
There are three families of functions, with names corresponding to 
a197 17
.Sh CAVEATS
This implementation of the Secure Hash Standard has not been validated by
NIST and as such is not in official compliance with the standard.
.Pp
If a message digest is to be copied to a multi-byte type (ie:
an array of five 32-bit integers) it will be necessary to
perform byte swapping on little endian machines such as the i386, alpha,
and vax.
.Sh AUTHORS
This implementation of the SHA fucntions was written by Aaron D. Gifford.
.Pp
The
.Fn SHA256_End ,
.Fn SHA256_File ,
and
.Fn SHA256_Data
helper functions are derived from code written by Poul-Henning Kamp.
d210 17
@

