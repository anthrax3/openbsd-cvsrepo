head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.6
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.20
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.16
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.14
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.12
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.8
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6;
locks; strict;
comment	@ * @;


1.16
date	2016.09.21.04.38.57;	author guenther;	state Exp;
branches;
next	1.15;
commitid	pqjnYVtACzQ9ctai;

1.15
date	2015.11.01.03.45.29;	author guenther;	state Exp;
branches;
next	1.14;
commitid	CfNWDWdDpm7mVO8i;

1.14
date	2015.09.11.09.18.27;	author guenther;	state Exp;
branches;
next	1.13;
commitid	Ug7ZHdkfaIoV0KLN;

1.13
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	0DYulI8hhujBHMcR;

1.12
date	2015.01.15.13.05.59;	author millert;	state Exp;
branches;
next	1.11;
commitid	gkpEJvpVgT62ZVxP;

1.11
date	2014.04.03.17.55.27;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.03.15.55.29;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.08.13.30.21;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.08.08.05.35;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.16.15.12.09;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.22.01.57.29;	author jfb;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.03.17.30.14;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.29.15.51.16;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.29.02.43.06;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.29.02.39.32;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.26.19.38.12;	author millert;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Delete casts to off_t and size_t that are implied by assignments
or prototypes.  Ditto for some of the char* and void* casts too.

verified no change to instructions on ILP32 (i386) and LP64 (amd64)
ok natano@@ abluhm@@ deraadt@@ millert@@
@
text
@/*	$OpenBSD: helper.c,v 1.15 2015/11/01 03:45:29 guenther Exp $ */

/*
 * Copyright (c) 2000 Poul-Henning Kamp <phk@@FreeBSD.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * If we meet some day, and you think this stuff is worth it, you
 * can buy me a beer in return. Poul-Henning Kamp
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include <hashinc>

#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

char *
HASHEnd(HASH_CTX *ctx, char *buf)
{
	int i;
	u_int8_t digest[HASH_DIGEST_LENGTH];
	static const char hex[] = "0123456789abcdef";

	if (buf == NULL && (buf = malloc(HASH_DIGEST_STRING_LENGTH)) == NULL)
		return (NULL);

	HASHFinal(digest, ctx);
	for (i = 0; i < HASH_DIGEST_LENGTH; i++) {
		buf[i + i] = hex[digest[i] >> 4];
		buf[i + i + 1] = hex[digest[i] & 0x0f];
	}
	buf[i + i] = '\0';
	explicit_bzero(digest, sizeof(digest));
	return (buf);
}
DEF_WEAK(HASHEnd);

char *
HASHFileChunk(const char *filename, char *buf, off_t off, off_t len)
{
	struct stat sb;
	u_char buffer[BUFSIZ];
	HASH_CTX ctx;
	int fd, save_errno;
	ssize_t nr;

	HASHInit(&ctx);

	if ((fd = open(filename, O_RDONLY)) < 0)
		return (NULL);
	if (len == 0) {
		if (fstat(fd, &sb) == -1) {
			close(fd);
			return (NULL);
		}
		len = sb.st_size;
	}
	if (off > 0 && lseek(fd, off, SEEK_SET) < 0) {
		close(fd);
		return (NULL);
	}

	while ((nr = read(fd, buffer, MINIMUM(sizeof(buffer), len))) > 0) {
		HASHUpdate(&ctx, buffer, nr);
		if (len > 0 && (len -= nr) == 0)
			break;
	}

	save_errno = errno;
	close(fd);
	errno = save_errno;
	return (nr < 0 ? NULL : HASHEnd(&ctx, buf));
}
DEF_WEAK(HASHFileChunk);

char *
HASHFile(const char *filename, char *buf)
{
	return (HASHFileChunk(filename, buf, 0, 0));
}
DEF_WEAK(HASHFile);

char *
HASHData(const u_char *data, size_t len, char *buf)
{
	HASH_CTX ctx;

	HASHInit(&ctx);
	HASHUpdate(&ctx, data, len);
	return (HASHEnd(&ctx, buf));
}
DEF_WEAK(HASHData);
@


1.15
log
@delete old lint ARGSUSED comments
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.14 2015/09/11 09:18:27 guenther Exp $ */
d85 1
a85 1
		HASHUpdate(&ctx, buffer, (size_t)nr);
d100 1
a100 1
	return (HASHFileChunk(filename, buf, (off_t)0, (off_t)0));
@


1.14
log
@Wrap blowfish, sha*, md5, and rmd160 so that internal calls go direct

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.13 2015/01/16 16:48:51 deraadt Exp $ */
a37 1
/* ARGSUSED */
@


1.13
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.12 2015/01/15 13:05:59 millert Exp $ */
d58 1
d96 1
d103 1
d114 1
@


1.12
log
@Use explicit_bzero instead of memset in hash Final and End functions.
OK deraadt@@ djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.11 2014/04/03 17:55:27 beck Exp $ */
d24 1
a24 1
#include <sys/param.h>
d36 2
d84 1
a84 1
	while ((nr = read(fd, buffer, MIN(sizeof(buffer), len))) > 0) {
@


1.11
log
@put $OpenBSD$ back.. notice by philip.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d53 1
a53 1
	memset(digest, 0, sizeof(digest));
@


1.10
log
@I have discussed these licenses with Poul-Henning Kamp and he has agreed to
this license change. We will remember that we all still like beer.
@
text
@d1 2
@


1.9
log
@plug a file descriptor leak in HASHFileChunk().

From Igor Zinovik; thanks!

ok millert@@
@
text
@d1 15
a15 1
/*	$OpenBSD: helper.c,v 1.8 2005/08/08 08:05:35 espie Exp $	*/
d18 2
a19 6
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <phk@@login.dkuug.dk> wrote this file.  As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 * ----------------------------------------------------------------------------
@


1.8
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.7 2004/09/16 15:12:09 millert Exp $	*/
d65 2
a66 1
	if (off > 0 && lseek(fd, off, SEEK_SET) < 0)
d68 1
@


1.7
log
@Fix MD5FileChunk() when passed a 0 length; makes MD5File() work again.
From Peter Galbavy.
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.6 2004/06/22 01:57:29 jfb Exp $	*/
a10 4

#if defined(LIBC_SCCS) && !defined(lint)
static const char rcsid[] = "$OpenBSD: helper.c,v 1.6 2004/06/22 01:57:29 jfb Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.6
log
@Make the `filename' parameter to HASHFile() and HASHFileChunk() const
ok pedro@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.5 2004/05/03 17:30:14 millert Exp $	*/
d13 1
a13 1
static const char rcsid[] = "$OpenBSD: helper.c,v 1.5 2004/05/03 17:30:14 millert Exp $";
d17 1
d52 1
d62 7
@


1.5
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.4 2004/04/29 15:51:16 millert Exp $	*/
d13 1
a13 1
static const char rcsid[] = "$OpenBSD: helper.c,v 1.4 2004/04/29 15:51:16 millert Exp $";
d49 1
a49 1
HASHFileChunk(char *filename, char *buf, off_t off, off_t len)
d76 1
a76 1
HASHFile(char *filename, char *buf)
@


1.4
log
@Undo some recent prototype changes; it is legal to pass the helper
functions can take a NULL buf pointer.  They will malloc memory as
needed in this case.
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.3 2004/04/29 02:43:06 millert Exp $	*/
d13 1
a13 1
static const char rcsid[] = "$OpenBSD: helper.c,v 1.3 2004/04/29 02:43:06 millert Exp $";
d16 1
a16 1
#include <sys/types.h>
d49 1
a49 1
HASHFile(char *filename, char *buf)
d53 2
a54 1
	int fd, num, save_errno;
d60 2
d63 5
a67 2
	while ((num = read(fd, buffer, sizeof(buffer))) > 0)
		HASHUpdate(&ctx, buffer, num);
d72 7
a78 1
	return (num < 0 ? NULL : HASHEnd(&ctx, buf));
@


1.3
log
@more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.2 2004/04/29 02:39:32 millert Exp $	*/
d13 1
a13 1
static const char rcsid[] = "$OpenBSD: helper.c,v 1.2 2004/04/29 02:39:32 millert Exp $";
d29 1
a29 1
HASHEnd(HASH_CTX *ctx, char buf[HASH_DIGEST_STRING_LENGTH])
d36 1
a36 1
		return(NULL);
d49 1
a49 1
HASHFile(char *filename, char buf[HASH_DIGEST_STRING_LENGTH])
d58 1
a58 1
		return(NULL);
d70 1
a70 1
HASHData(const u_char *data, size_t len, char buf[HASH_DIGEST_STRING_LENGTH])
@


1.2
log
@Some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: helper.c,v 1.1 2004/04/26 19:38:12 millert Exp $	*/
d13 1
a13 1
static const char rcsid[] = "$OpenBSD: helper.c,v 1.1 2004/04/26 19:38:12 millert Exp $";
d38 1
a38 1
	HASHFinal(digest,ctx);
d51 16
a66 16
    u_char buffer[BUFSIZ];
    HASH_CTX ctx;
    int fd, num, save_errno;

    HASHInit(&ctx);

    if ((fd = open(filename, O_RDONLY)) < 0)
	    return(NULL);

    while ((num = read(fd, buffer, sizeof(buffer))) > 0)
	    HASHUpdate(&ctx, buffer, num);

    save_errno = errno;
    close(fd);
    errno = save_errno;
    return (num < 0 ? NULL : HASHEnd(&ctx, buf));
@


1.1
log
@Use a common source file for all the hash helper functions that
previously lived in foohl.c.  The foohl.c files are now generated
via sed, though perhaps cpp could be used in the future.

Use u_int8_t instead of unsigned char for the buffers struct fooContext.
Add constants for buffer lengths and use them in function prototypes
and the man pages.

This is basically cosmetic surgery; there should be no functional changes.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d13 1
a13 1
static const char rcsid[] = "$OpenBSD$";
d31 15
a45 15
    int i;
    u_char digest[HASH_DIGEST_LENGTH];
    static const char hex[] = "0123456789abcdef";

    if (buf == NULL && (buf = malloc(HASH_DIGEST_STRING_LENGTH)) == NULL)
	return(NULL);

    HASHFinal(digest,ctx);
    for (i = 0; i < HASH_DIGEST_LENGTH; i++) {
	buf[i + i] = hex[digest[i] >> 4];
	buf[i + i + 1] = hex[digest[i] & 0x0f];
    }
    buf[i + i] = '\0';
    memset(digest, 0, sizeof(digest));
    return(buf);
d53 1
a53 1
    int fd, num, oerrno;
d58 1
a58 1
	return(0);
d61 1
a61 1
	HASHUpdate(&ctx, buffer, num);
d63 1
a63 1
    oerrno = errno;
d65 2
a66 2
    errno = oerrno;
    return(num < 0 ? 0 : HASHEnd(&ctx, buf));
d72 1
a72 1
    HASH_CTX ctx;
d74 3
a76 3
    HASHInit(&ctx);
    HASHUpdate(&ctx, data, len);
    return(HASHEnd(&ctx, buf));
@

