head	1.38;
access;
symbols
	OPENBSD_6_1:1.38.0.2
	OPENBSD_6_1_BASE:1.38
	OPENBSD_6_0:1.36.0.2
	OPENBSD_6_0_BASE:1.36
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.34.0.6
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.34.0.2
	OPENBSD_5_7_BASE:1.34
	OPENBSD_5_6:1.32.0.4
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.31.0.6
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.31.0.2
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.30.0.12
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.30.0.10
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.30
	OPENBSD_5_1:1.30.0.8
	OPENBSD_5_0:1.30.0.6
	OPENBSD_5_0_BASE:1.30
	OPENBSD_4_9:1.30.0.4
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.30.0.2
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.29.0.10
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.29.0.12
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.29.0.8
	OPENBSD_4_5_BASE:1.29
	OPENBSD_4_4:1.29.0.6
	OPENBSD_4_4_BASE:1.29
	OPENBSD_4_3:1.29.0.4
	OPENBSD_4_3_BASE:1.29
	OPENBSD_4_2:1.29.0.2
	OPENBSD_4_2_BASE:1.29
	OPENBSD_4_1:1.28.0.12
	OPENBSD_4_1_BASE:1.28
	OPENBSD_4_0:1.28.0.10
	OPENBSD_4_0_BASE:1.28
	OPENBSD_3_9:1.28.0.8
	OPENBSD_3_9_BASE:1.28
	OPENBSD_3_8:1.28.0.6
	OPENBSD_3_8_BASE:1.28
	OPENBSD_3_7:1.28.0.4
	OPENBSD_3_7_BASE:1.28
	OPENBSD_3_6:1.28.0.2
	OPENBSD_3_6_BASE:1.28
	OPENBSD_3_5:1.20.0.4
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.16.0.8
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.6
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.16.0.4
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_8:1.12.0.4
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2;
locks; strict;
comment	@# @;


1.38
date	2016.09.04.09.24.38;	author tedu;	state Exp;
branches;
next	1.37;
commitid	OsdUTzaD6JMBb2nk;

1.37
date	2016.07.28.03.52.41;	author tedu;	state Exp;
branches;
next	1.36;
commitid	fBuqFwCFNyUTogaz;

1.36
date	2016.03.10.08.41.12;	author jmc;	state Exp;
branches;
next	1.35;
commitid	Qc8VgF56BCkE2pI1;

1.35
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.34;
commitid	QU70QaxjyBAtj4Rv;

1.34
date	2014.11.16.19.57.24;	author schwarze;	state Exp;
branches;
next	1.33;
commitid	5KwnyPVZR1dC1mYp;

1.33
date	2014.11.15.14.41.02;	author bentley;	state Exp;
branches;
next	1.32;
commitid	HuCemPIiOkto0SJD;

1.32
date	2014.03.23.23.27.22;	author naddy;	state Exp;
branches;
next	1.31;

1.31
date	2013.06.05.03.39.22;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2010.07.13.07.01.23;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2007.05.31.19.19.29;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2004.08.24.20.10.33;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2004.08.24.19.38.17;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2004.06.22.01.57.29;	author jfb;	state Exp;
branches;
next	1.25;

1.25
date	2004.05.16.18.29.09;	author otto;	state Exp;
branches;
next	1.24;

1.24
date	2004.05.03.17.30.14;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2004.04.29.15.51.16;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2004.04.28.16.54.57;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.26.19.38.12;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.25.19.33.34;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.17.21.56.23;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.03.01.52.39;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.05.30.19.55.03;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.01.22.12.14;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	2001.10.01.20.36.17;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2000.12.21.17.34.33;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2000.04.18.03.01.29;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.08.11.03.06.06;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	99.07.09.13.35.20;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.07.07.10.50.04;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.25.21.16.24;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.05.25.13.06.45;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.04.18.23.31.01;	author wvdputte;	state Exp;
branches;
next	1.5;

1.5
date	98.06.21.22.13.42;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.03.07.22.18.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.02.27.12.17.48;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.07.17.06.05.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.07.17.06.02.43;	author millert;	state Exp;
branches;
next	;


desc
@@


1.38
log
@remove caveats that are either misleading or unhelpful.
ok jmc naddy
@
text
@.\"	$OpenBSD: rmd160.3,v 1.37 2016/07/28 03:52:41 tedu Exp $
.\"
.\" Copyright (c) 1997, 2004 Todd C. Miller <Todd.Miller@@courtesan.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" See http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
.\"	for detailed information about RIPEMD-160.
.\"
.Dd $Mdocdate: July 28 2016 $
.Dt RMD160INIT 3
.Os
.Sh NAME
.Nm RMD160Init ,
.Nm RMD160Update ,
.Nm RMD160Pad ,
.Nm RMD160Final ,
.Nm RMD160Transform ,
.Nm RMD160End ,
.Nm RMD160File ,
.Nm RMD160FileChunk ,
.Nm RMD160Data
.Nd calculate the RIPEMD-160 message digest
.Sh SYNOPSIS
.In sys/types.h
.In rmd160.h
.Ft void
.Fn RMD160Init "RMD160_CTX *context"
.Ft void
.Fn RMD160Update "RMD160_CTX *context" "const u_int8_t *data" "size_t nbytes"
.Ft void
.Fn RMD160Pad "RMD160_CTX *context"
.Ft void
.Fn RMD160Final "u_int8_t digest[RMD160_DIGEST_LENGTH]" "RMD160_CTX *context"
.Ft void
.Fn RMD160Transform "u_int32_t state[5]" "const u_int8_t block[RMD160_BLOCK_LENGTH]"
.Ft "char *"
.Fn RMD160End "RMD160_CTX *context" "char *buf"
.Ft "char *"
.Fn RMD160File "const char *filename" "char *buf"
.Ft "char *"
.Fn RMD160FileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
.Ft "char *"
.Fn RMD160Data "const u_int8_t *data" "size_t len" "char *buf"
.Sh DESCRIPTION
The RMD160 functions implement the 160-bit RIPE message digest hash algorithm
(RMD-160).
RMD-160 is used to generate a condensed representation
of a message called a message digest.
The algorithm takes a
message less than 2^64 bits as input and produces a 160-bit digest
suitable for use as a digital signature.
.Pp
The RMD160 functions are considered to be more secure than the
.Xr md5 3
functions and at least as secure as the
.Xr sha1 3
function.
All share a similar interface.
.Pp
The
.Fn RMD160Init
function initializes a RMD160_CTX
.Ar context
for use with
.Fn RMD160Update ,
and
.Fn RMD160Final .
The
.Fn RMD160Update
function adds
.Ar data
of length
.Ar nbytes
to the RMD160_CTX specified by
.Ar context .
.Fn RMD160Final
is called when all data has been added via
.Fn RMD160Update
and stores a message digest in the
.Ar digest
parameter.
.Pp
The
.Fn RMD160Pad
function can be used to apply padding to the message digest as in
.Fn RMD160Final ,
but the current context can still be used with
.Fn RMD160Update .
.Pp
The
.Fn RMD160Transform
function is used by
.Fn RMD160Update
to hash 512-bit blocks and forms the core of the algorithm.
Most programs should use the interface provided by
.Fn RMD160Init ,
.Fn RMD160Update
and
.Fn RMD160Final
instead of calling
.Fn RMD160Transform
directly.
.Pp
The
.Fn RMD160End
function is a front end for
.Fn RMD160Final
which converts the digest into an ASCII
representation of the 160 bit digest in hexadecimal.
.Pp
The
.Fn RMD160File
function calculates the digest for a file and returns the result via
.Fn RMD160End .
If
.Fn RMD160File
is unable to open the file a NULL pointer is returned.
.Pp
.Fn RMD160FileChunk
behaves like
.Fn RMD160File
but calculates the digest only for that portion of the file starting at
.Fa offset
and continuing for
.Fa length
bytes or until end of file is reached, whichever comes first.
A zero
.Fa length
can be specified to read until end of file.
A negative
.Fa length
or
.Fa offset
will be ignored.
.Pp
The
.Fn RMD160Data
function
calculates the digest of an arbitrary string and returns the result via
.Fn RMD160End .
.Pp
For each of the
.Fn RMD160End ,
.Fn RMD160File ,
and
.Fn RMD160Data
functions the
.Ar buf
parameter should either be a string of at least 41 characters in
size or a NULL pointer.
In the latter case, space will be dynamically allocated via
.Xr malloc 3
and should be freed using
.Xr free 3
when it is no longer needed.
.Sh EXAMPLES
The follow code fragment will calculate the digest for
the string
.Dq abc
which is
.Dq 0x8eb208f7e05d987a9b044a8e98c6b087f15a0bfc .
.Bd -literal -offset indent
RMD160_CTX rmd;
u_int8_t results[RMD160_DIGEST_LENGTH];
char *buf;
int n;

buf = "abc";
n = strlen(buf);
RMD160Init(&rmd);
RMD160Update(&rmd, (u_int8_t *)buf, n);
RMD160Final(results, &rmd);

/* Print the digest as one long hex value */
printf("0x");
for (n = 0; n < RMD160_DIGEST_LENGTH; n++)
	printf("%02x", results[n]);
putchar('\en');
.Ed
.Pp
Alternately, the helper functions could be used in the following way:
.Bd -literal -offset indent
RMD160_CTX rmd;
u_int8_t output[RMD160_DIGEST_STRING_LENGTH];
char *buf = "abc";

printf("0x%s\en", RMD160Data(buf, strlen(buf), output));
.Ed
.Sh SEE ALSO
.Xr cksum 1 ,
.Xr md5 3 ,
.Xr sha1 3 ,
.Xr sha2 3
.Rs
.%A H. Dobbertin, A. Bosselaers, B. Preneel
.%T RIPEMD-160, a strengthened version of RIPEMD
.Re
.Rs
.%T Information technology - Security techniques - Hash-functions - Part 3: Dedicated hash-functions
.%O ISO/IEC 10118-3
.Re
.Rs
.%A H. Dobbertin, A. Bosselaers, B. Preneel
.%T The RIPEMD-160 cryptographic hash function
.%J Dr. Dobb's Journal
.%V Vol. 22, No. 1
.%D January 1997
.%P pp. 24-28
.Re
.Sh HISTORY
The RMD-160 functions appeared in
.Ox 2.1 .
.Sh AUTHORS
.An -nosplit
This implementation of RMD-160 was written by
.An Markus Friedl .
.Pp
The
.Fn RMD160End ,
.Fn RMD160File ,
.Fn RMD160FileChunk ,
and
.Fn RMD160Data
helper functions are derived from code written by
.An Poul-Henning Kamp .
@


1.37
log
@RMD160Update actually takes size_t length
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.36 2016/03/10 08:41:12 jmc Exp $
d20 1
a20 1
.Dd $Mdocdate: March 10 2016 $
a236 4
.Sh CAVEATS
If a message digest is to be copied to a multi-byte type (ie:
an array of five 32-bit integers) it will be necessary to
perform byte swapping on little endian machines such as the i386 and alpha.
@


1.36
log
@un-vax;
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.35 2015/11/10 23:48:18 jmc Exp $
d20 1
a20 1
.Dd $Mdocdate: November 10 2015 $
d40 1
a40 1
.Fn RMD160Update "RMD160_CTX *context" "const u_int8_t *data" "u_int32_t nbytes"
@


1.35
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.34 2014/11/16 19:57:24 schwarze Exp $
d20 1
a20 1
.Dd $Mdocdate: November 16 2014 $
d240 1
a240 2
perform byte swapping on little endian machines such as the i386, alpha,
and vax.
@


1.34
log
@add some missing .An macros and remove some obsolete .Tn
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.33 2014/11/15 14:41:02 bentley Exp $
d20 2
a21 2
.Dd $Mdocdate: November 15 2014 $
.Dt RMD160 3
@


1.33
log
@Reduce instances of `` '' in manuals.

troff displays these as typographic quotes, but nroff implementations
almost always print them literally, which rarely has the intended effect
with modern fonts, even in stock xterm.

These uses of `` '' can be replaced either with more semantic alternatives
or with Dq, which prints typographic quotes in a UTF-8 locale (but will
automatically fall back to `` '' in an ASCII locale).

improvements and ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.32 2014/03/23 23:27:22 naddy Exp $
d20 1
a20 1
.Dd $Mdocdate: March 23 2014 $
d119 1
a119 2
which converts the digest into an
.Tn ASCII
d225 3
a227 1
This implementation of RMD-160 was written by Markus Friedl.
d235 2
a236 1
helper functions are derived from code written by Poul-Henning Kamp.
@


1.32
log
@Remove the MD4 functions.
"A collision attack published in 2007 can find collisions for full
MD4 in less than two hash operations."

ok deraadt@@, man pages ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.31 2013/06/05 03:39:22 tedu Exp $
d20 1
a20 1
.Dd $Mdocdate: June 5 2013 $
d33 1
a33 1
.Nd calculate the ``RIPEMD-160'' message digest
d170 4
a173 1
the string "abc" which is ``0x8eb208f7e05d987a9b044a8e98c6b087f15a0bfc''.
@


1.31
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.30 2010/07/13 07:01:23 jmc Exp $
d20 1
a20 1
.Dd $Mdocdate: July 13 2010 $
a64 2
.Xr md4 3
and
a199 1
.Xr md4 3 ,
@


1.30
log
@no more rmd160(1);
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.29 2007/05/31 19:19:29 jmc Exp $
d20 1
a20 1
.Dd $Mdocdate: May 31 2007 $
d35 2
a36 2
.Fd #include <sys/types.h>
.Fd #include <rmd160.h>
@


1.29
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.28 2004/08/24 20:10:33 millert Exp $
d20 1
a20 1
.Dd $Mdocdate$
a201 1
.Xr rmd160 1 ,
@


1.28
log
@Whoops, ripemd was broken, not ripemd-160.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.27 2004/08/24 19:38:17 millert Exp $
d20 1
a20 1
.Dd April 29, 2004
@


1.27
log
@Collisions have been found for the full versions of MD4, MD5 and RMD160.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.26 2004/06/22 01:57:29 jfb Exp $
a240 7
.Sh BUGS
Collisions have been found for the full version of RMD-160.
The use of
.Xr sha1 3  
or
.Xr sha2 3
is recommended instead.
@


1.26
log
@Make the `filename' parameter to HASHFile() and HASHFileChunk() const
ok pedro@@, millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.25 2004/05/16 18:29:09 otto Exp $
d241 7
@


1.25
log
@Add .Xr's to the commands implementing the various digests. ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.24 2004/05/03 17:30:14 millert Exp $
d50 1
a50 1
.Fn RMD160File "char *filename" "char *buf"
d52 1
a52 1
.Fn RMD160FileChunk "char *filename" "char *buf" "off_t offset" "off_t length"
@


1.24
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.23 2004/04/29 15:51:16 millert Exp $
d201 1
@


1.23
log
@Undo some recent prototype changes; it is legal to pass the helper
functions can take a NULL buf pointer.  They will malloc memory as
needed in this case.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.22 2004/04/28 16:54:57 millert Exp $
d26 1
d31 1
d42 2
d52 2
d95 6
a100 4
When a null pointer is passed to
.Fn RMD160Final
as first argument only the final padding will be applied and the
current context can still be used with
d133 17
d231 1
@


1.22
log
@Xr sha2(3)
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.21 2004/04/26 19:38:12 millert Exp $
d3 1
a3 1
.\" Copyright (c) 1997 Todd C. Miller <Todd.Miller@@courtesan.com>
d20 1
a20 1
.Dd July 16, 1997
d44 1
a44 1
.Fn RMD160End "RMD160_CTX *context" "char buf[RMD160_DIGEST_STRING_LENGTH]"
d46 1
a46 1
.Fn RMD160File "char *filename" "char buf[RMD160_DIGEST_STRING_LENGTH]"
d48 1
a48 1
.Fn RMD160Data "const u_int8_t *data" "size_t len" "char buf[RMD160_DIGEST_STRING_LENGTH]"
@


1.21
log
@Use a common source file for all the hash helper functions that
previously lived in foohl.c.  The foohl.c files are now generated
via sed, though perhaps cpp could be used in the future.

Use u_int8_t instead of unsigned char for the buffers struct fooContext.
Add constants for buffer lengths and use them in function prototypes
and the man pages.

This is basically cosmetic surgery; there should be no functional changes.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.20 2003/06/25 19:33:34 deraadt Exp $
d179 2
a180 1
.Xr sha1 3
@


1.20
log
@missing const; millert ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.19 2003/06/17 21:56:23 millert Exp $
d38 1
a38 1
.Fn RMD160Update "RMD160_CTX *context" "const u_char *data" "u_int32_t nbytes"
d40 1
a40 1
.Fn RMD160Final "u_char digest[20]" "RMD160_CTX *context"
d42 1
a42 1
.Fn RMD160Transform "u_int32_t state[5]" "const u_char block[64]"
d44 1
a44 1
.Fn RMD160End "RMD160_CTX *context" "char *buf"
d46 1
a46 1
.Fn RMD160File "char *filename" "char *buf"
d48 1
a48 1
.Fn RMD160Data "const u_char *data" "size_t len" "char *buf"
d150 1
a150 1
u_char results[20];
d157 1
a157 1
RMD160Update(&rmd, (u_char *)buf, n);
d162 1
a162 1
for (n = 0; n < 20; n++)
d170 1
a170 1
u_char output[41];
@


1.19
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.18 2003/06/03 01:52:39 millert Exp $
d48 1
a48 1
.Fn RMD160Data "u_char *data" "size_t len" "char *buf"
@


1.18
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.17 2003/05/30 19:55:03 jmc Exp $
d9 7
a15 7
.\" THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
.\" WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
.\" FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
.\" OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
.\" CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@


1.17
log
@- section reorder
- whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.16 2001/10/01 22:12:14 markus Exp $
a3 1
.\" All rights reserved.
d5 3
a7 10
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
d9 7
a15 10
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.16
log
@sync with rmd160.h
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.15 2001/10/01 20:36:17 markus Exp $
a185 14
.Sh CAVEATS
If a message digest is to be copied to a multi-byte type (ie:
an array of five 32-bit integers) it will be necessary to
perform byte swapping on little endian machines such as the i386, alpha,
and vax.
.Sh AUTHORS
This implementation of RMD-160 was written by Markus Friedl.
.Pp
The
.Fn RMD160End ,
.Fn RMD160File ,
and
.Fn RMD160Data
helper functions are derived from code written by Poul-Henning Kamp.
d210 14
@


1.15
log
@new rmd160 implementation.  based on
ftp://ftp.rsasecurity.com/pub/cryptobytes/crypto3n2.pdf, ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.14 2001/08/06 10:42:26 mpech Exp $
d49 1
a49 1
.Fn RMD160Update "RMD160_CTX *context" "const u_char *data" "u_int nbytes"
d53 1
a53 1
.Fn RMD160Transform "u_int32_t state[5]" "const u_int32_t block[16]"
d59 1
a59 1
.Fn RMD160Data "u_char *data" "u_int len" "char *buf"
@


1.14
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.13 2000/12/21 17:34:33 aaron Exp $
d192 1
a192 1
This implementation of RMD-160 was written by Antoon Bosselaers.
@


1.13
log
@mdoc prefers `\e' as an escape character.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.12 2000/04/18 03:01:29 aaron Exp $
d191 1
a191 1
.Sh AUTHOR
a204 1
.Pp
@


1.12
log
@Repairs, mostly removing hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.11 1999/08/11 03:06:06 deraadt Exp $
d175 1
a175 1
putchar('\\n');
@


1.11
log
@more unescaped \n lines in nroff documents
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.10 1999/07/09 13:35:20 aaron Exp $
d62 4
a65 2
(RMD-160).  RMD-160 is used to generate a condensed representation
of a message called a message digest.  The algorithm takes a
d75 2
a76 1
function.  All share a similar interface.
d150 2
a151 2
size or a NULL pointer.  In the latter case, space will be dynamically
allocated via
@


1.10
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.9 1999/07/07 10:50:04 aaron Exp $
d181 1
a181 1
printf("0x%s\n", RMD160Data(buf, strlen(buf), output));
@


1.9
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.8 1999/05/25 21:16:24 aaron Exp $
d67 1
a67 1
The RMD160 functions are considered to be more secure than the 
d99 1
a99 1
as first argument only the final padding will be applied and the 
@


1.8
log
@kill some old macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.7 1999/05/25 13:06:45 aaron Exp $
d33 1
@


1.7
log
@punctuation
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.6 1999/04/18 23:31:01 wvdputte Exp $
d189 1
a189 1
.br
@


1.6
log
@Fixup of formatting in the example source code
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.5 1998/06/21 22:13:42 millert Exp $
d89 1
a89 1
.Ar context.
@


1.5
log
@Remove the advertising clause in my old license, it impedes free use
of the code as a large number of similar clauses makes it impossible
to write an ad for a product using the code...
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.4 1998/03/07 22:18:10 millert Exp $
d170 1
a170 1
	printf("%x", results[n]);
d180 1
a180 1
printf("0x%s", RMD160Data(buf, strlen(buf), output));
@


1.4
log
@.Bx Open -> .Ox 2.x
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.3 1998/02/27 12:17:48 deraadt Exp $
d14 1
a14 4
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by Todd C. Miller.
.\" 4. The name of the author may not be used to endorse or promote products
@


1.3
log
@extra commas go foom foom foom
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.2 1997/07/17 06:05:40 millert Exp $
d223 1
a223 2
.Bx Open
2.1.
@


1.2
log
@Typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.1 1997/07/17 06:02:43 millert Exp $
d43 1
a43 1
.Nm RMD160Data ,
@


1.1
log
@Manpage for RMD*(3)
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.5 1997/07/15 01:54:23 millert Exp $
d183 1
a183 1
printf("0x%s", MD5Data(buf, strlen(buf), output));
@

