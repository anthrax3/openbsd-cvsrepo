head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.8.0.34
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.32
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.30
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.28
	OPENBSD_5_0:1.8.0.26
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.24
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.22
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.18
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.20
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.16
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.14
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.12
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.8
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7;
locks; strict;
comment	@ * @;


1.11
date	2015.09.11.09.18.27;	author guenther;	state Exp;
branches;
next	1.10;
commitid	Ug7ZHdkfaIoV0KLN;

1.10
date	2015.01.15.13.05.59;	author millert;	state Exp;
branches;
next	1.9;
commitid	gkpEJvpVgT62ZVxP;

1.9
date	2014.01.08.06.14.57;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.08.08.05.35;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.28.15.10.27;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.03.18.07.07;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.03.17.30.14;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.29.18.38.23;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.28.20.24.59;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.28.16.52.08;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.28.16.46.03;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Wrap blowfish, sha*, md5, and rmd160 so that internal calls go direct

ok deraadt@@
@
text
@/*	$OpenBSD: md5.c,v 1.10 2015/01/15 13:05:59 millert Exp $	*/

/*
 * This code implements the MD5 message-digest algorithm.
 * The algorithm is due to Ron Rivest.	This code was
 * written by Colin Plumb in 1993, no copyright is claimed.
 * This code is in the public domain; do with it what you wish.
 *
 * Equivalent code is available from RSA Data Security, Inc.
 * This code has been tested against that, and is equivalent,
 * except that you don't need to include two pages of legalese
 * with every copy.
 *
 * To compute the message digest of a chunk of bytes, declare an
 * MD5Context structure, pass it to MD5Init, call MD5Update as
 * needed on buffers full of bytes, and then call MD5Final, which
 * will fill a supplied 16-byte array with the digest.
 */

#include <sys/types.h>
#include <string.h>
#include <md5.h>

#define PUT_64BIT_LE(cp, value) do {					\
	(cp)[7] = (value) >> 56;					\
	(cp)[6] = (value) >> 48;					\
	(cp)[5] = (value) >> 40;					\
	(cp)[4] = (value) >> 32;					\
	(cp)[3] = (value) >> 24;					\
	(cp)[2] = (value) >> 16;					\
	(cp)[1] = (value) >> 8;						\
	(cp)[0] = (value); } while (0)

#define PUT_32BIT_LE(cp, value) do {					\
	(cp)[3] = (value) >> 24;					\
	(cp)[2] = (value) >> 16;					\
	(cp)[1] = (value) >> 8;						\
	(cp)[0] = (value); } while (0)

static u_int8_t PADDING[MD5_BLOCK_LENGTH] = {
	0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */
void
MD5Init(MD5_CTX *ctx)
{
	ctx->count = 0;
	ctx->state[0] = 0x67452301;
	ctx->state[1] = 0xefcdab89;
	ctx->state[2] = 0x98badcfe;
	ctx->state[3] = 0x10325476;
}
DEF_WEAK(MD5Init);

/*
 * Update context to reflect the concatenation of another buffer full
 * of bytes.
 */
void
MD5Update(MD5_CTX *ctx, const unsigned char *input, size_t len)
{
	size_t have, need;

	/* Check how many bytes we already have and how many more we need. */
	have = (size_t)((ctx->count >> 3) & (MD5_BLOCK_LENGTH - 1));
	need = MD5_BLOCK_LENGTH - have;

	/* Update bitcount */
	ctx->count += (u_int64_t)len << 3;

	if (len >= need) {
		if (have != 0) {
			memcpy(ctx->buffer + have, input, need);
			MD5Transform(ctx->state, ctx->buffer);
			input += need;
			len -= need;
			have = 0;
		}

		/* Process data in MD5_BLOCK_LENGTH-byte chunks. */
		while (len >= MD5_BLOCK_LENGTH) {
			MD5Transform(ctx->state, input);
			input += MD5_BLOCK_LENGTH;
			len -= MD5_BLOCK_LENGTH;
		}
	}

	/* Handle any remaining bytes of data. */
	if (len != 0)
		memcpy(ctx->buffer + have, input, len);
}
DEF_WEAK(MD5Update);

/*
 * Pad pad to 64-byte boundary with the bit pattern
 * 1 0* (64-bit count of bits processed, MSB-first)
 */
void
MD5Pad(MD5_CTX *ctx)
{
	u_int8_t count[8];
	size_t padlen;

	/* Convert count to 8 bytes in little endian order. */
	PUT_64BIT_LE(count, ctx->count);

	/* Pad out to 56 mod 64. */
	padlen = MD5_BLOCK_LENGTH -
	    ((ctx->count >> 3) & (MD5_BLOCK_LENGTH - 1));
	if (padlen < 1 + 8)
		padlen += MD5_BLOCK_LENGTH;
	MD5Update(ctx, PADDING, padlen - 8);		/* padlen - 8 <= 64 */
	MD5Update(ctx, count, 8);
}
DEF_WEAK(MD5Pad);

/*
 * Final wrapup--call MD5Pad, fill in digest and zero out ctx.
 */
void
MD5Final(unsigned char digest[MD5_DIGEST_LENGTH], MD5_CTX *ctx)
{
	int i;

	MD5Pad(ctx);
	for (i = 0; i < 4; i++)
		PUT_32BIT_LE(digest + i * 4, ctx->state[i]);
	explicit_bzero(ctx, sizeof(*ctx));
}
DEF_WEAK(MD5Final);


/* The four core functions - F1 is optimized somewhat */

/* #define F1(x, y, z) (x & y | ~x & z) */
#define F1(x, y, z) (z ^ (x & (y ^ z)))
#define F2(x, y, z) F1(z, x, y)
#define F3(x, y, z) (x ^ y ^ z)
#define F4(x, y, z) (y ^ (x | ~z))

/* This is the central step in the MD5 algorithm. */
#define MD5STEP(f, w, x, y, z, data, s) \
	( w += f(x, y, z) + data,  w = w<<s | w>>(32-s),  w += x )

/*
 * The core of the MD5 algorithm, this alters an existing MD5 hash to
 * reflect the addition of 16 longwords of new data.  MD5Update blocks
 * the data and converts bytes into longwords for this routine.
 */
void
MD5Transform(u_int32_t state[4], const u_int8_t block[MD5_BLOCK_LENGTH])
{
	u_int32_t a, b, c, d, in[MD5_BLOCK_LENGTH / 4];

#if BYTE_ORDER == LITTLE_ENDIAN
	memcpy(in, block, sizeof(in));
#else
	for (a = 0; a < MD5_BLOCK_LENGTH / 4; a++) {
		in[a] = (u_int32_t)(
		    (u_int32_t)(block[a * 4 + 0]) |
		    (u_int32_t)(block[a * 4 + 1]) <<  8 |
		    (u_int32_t)(block[a * 4 + 2]) << 16 |
		    (u_int32_t)(block[a * 4 + 3]) << 24);
	}
#endif

	a = state[0];
	b = state[1];
	c = state[2];
	d = state[3];

	MD5STEP(F1, a, b, c, d, in[ 0] + 0xd76aa478,  7);
	MD5STEP(F1, d, a, b, c, in[ 1] + 0xe8c7b756, 12);
	MD5STEP(F1, c, d, a, b, in[ 2] + 0x242070db, 17);
	MD5STEP(F1, b, c, d, a, in[ 3] + 0xc1bdceee, 22);
	MD5STEP(F1, a, b, c, d, in[ 4] + 0xf57c0faf,  7);
	MD5STEP(F1, d, a, b, c, in[ 5] + 0x4787c62a, 12);
	MD5STEP(F1, c, d, a, b, in[ 6] + 0xa8304613, 17);
	MD5STEP(F1, b, c, d, a, in[ 7] + 0xfd469501, 22);
	MD5STEP(F1, a, b, c, d, in[ 8] + 0x698098d8,  7);
	MD5STEP(F1, d, a, b, c, in[ 9] + 0x8b44f7af, 12);
	MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
	MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
	MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122,  7);
	MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
	MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
	MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);

	MD5STEP(F2, a, b, c, d, in[ 1] + 0xf61e2562,  5);
	MD5STEP(F2, d, a, b, c, in[ 6] + 0xc040b340,  9);
	MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
	MD5STEP(F2, b, c, d, a, in[ 0] + 0xe9b6c7aa, 20);
	MD5STEP(F2, a, b, c, d, in[ 5] + 0xd62f105d,  5);
	MD5STEP(F2, d, a, b, c, in[10] + 0x02441453,  9);
	MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
	MD5STEP(F2, b, c, d, a, in[ 4] + 0xe7d3fbc8, 20);
	MD5STEP(F2, a, b, c, d, in[ 9] + 0x21e1cde6,  5);
	MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6,  9);
	MD5STEP(F2, c, d, a, b, in[ 3] + 0xf4d50d87, 14);
	MD5STEP(F2, b, c, d, a, in[ 8] + 0x455a14ed, 20);
	MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905,  5);
	MD5STEP(F2, d, a, b, c, in[ 2] + 0xfcefa3f8,  9);
	MD5STEP(F2, c, d, a, b, in[ 7] + 0x676f02d9, 14);
	MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);

	MD5STEP(F3, a, b, c, d, in[ 5] + 0xfffa3942,  4);
	MD5STEP(F3, d, a, b, c, in[ 8] + 0x8771f681, 11);
	MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
	MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
	MD5STEP(F3, a, b, c, d, in[ 1] + 0xa4beea44,  4);
	MD5STEP(F3, d, a, b, c, in[ 4] + 0x4bdecfa9, 11);
	MD5STEP(F3, c, d, a, b, in[ 7] + 0xf6bb4b60, 16);
	MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
	MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6,  4);
	MD5STEP(F3, d, a, b, c, in[ 0] + 0xeaa127fa, 11);
	MD5STEP(F3, c, d, a, b, in[ 3] + 0xd4ef3085, 16);
	MD5STEP(F3, b, c, d, a, in[ 6] + 0x04881d05, 23);
	MD5STEP(F3, a, b, c, d, in[ 9] + 0xd9d4d039,  4);
	MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
	MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
	MD5STEP(F3, b, c, d, a, in[2 ] + 0xc4ac5665, 23);

	MD5STEP(F4, a, b, c, d, in[ 0] + 0xf4292244,  6);
	MD5STEP(F4, d, a, b, c, in[7 ] + 0x432aff97, 10);
	MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
	MD5STEP(F4, b, c, d, a, in[5 ] + 0xfc93a039, 21);
	MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3,  6);
	MD5STEP(F4, d, a, b, c, in[3 ] + 0x8f0ccc92, 10);
	MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
	MD5STEP(F4, b, c, d, a, in[1 ] + 0x85845dd1, 21);
	MD5STEP(F4, a, b, c, d, in[8 ] + 0x6fa87e4f,  6);
	MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
	MD5STEP(F4, c, d, a, b, in[6 ] + 0xa3014314, 15);
	MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
	MD5STEP(F4, a, b, c, d, in[4 ] + 0xf7537e82,  6);
	MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
	MD5STEP(F4, c, d, a, b, in[2 ] + 0x2ad7d2bb, 15);
	MD5STEP(F4, b, c, d, a, in[9 ] + 0xeb86d391, 21);

	state[0] += a;
	state[1] += b;
	state[2] += c;
	state[3] += d;
}
DEF_WEAK(MD5Transform);
@


1.10
log
@Use explicit_bzero instead of memset in hash Final and End functions.
OK deraadt@@ djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md5.c,v 1.9 2014/01/08 06:14:57 tedu Exp $	*/
d59 1
d98 1
d121 1
d136 1
d251 1
@


1.9
log
@calling HashFinal with a null digest should crash, not be silently ignored
@
text
@d1 1
a1 1
/*	$OpenBSD: md5.c,v 1.8 2005/08/08 08:05:35 espie Exp $	*/
d131 1
a131 1
	memset(ctx, 0, sizeof(*ctx));
@


1.8
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: md5.c,v 1.7 2004/05/28 15:10:27 millert Exp $	*/
d129 3
a131 5
	if (digest != NULL) {
		for (i = 0; i < 4; i++)
			PUT_32BIT_LE(digest + i * 4, ctx->state[i]);
		memset(ctx, 0, sizeof(*ctx));
	}
@


1.7
log
@In the Final function, move the context zeroing into the digest != NULL
scope so that passing a NULL digest is equivalent to the Pad function
(like it used to be).  Fixes skey w/ sha1 as noticed by David Krause.
@
text
@d1 1
a1 1
/*	$OpenBSD: md5.c,v 1.6 2004/05/03 18:07:07 millert Exp $	*/
a18 4

#if defined(LIBC_SCCS) && !defined(lint)
static const char rcsid[] = "$OpenBSD: md5.c,v 1.6 2004/05/03 18:07:07 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.6
log
@Some u_char -> u_int8_t conversion I missed earlier.
@
text
@d1 1
a1 1
/*	$OpenBSD: md5.c,v 1.5 2004/05/03 17:30:14 millert Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: md5.c,v 1.5 2004/05/03 17:30:14 millert Exp $";
d136 1
a137 1
	memset(ctx, 0, sizeof(*ctx));	/* in case it's sensitive */
@


1.5
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d1 1
a1 1
/*	$OpenBSD: md5.c,v 1.4 2004/04/29 18:38:23 millert Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: md5.c,v 1.4 2004/04/29 18:38:23 millert Exp $";
d44 1
a44 1
static u_char PADDING[MD5_BLOCK_LENGTH] = {
@


1.4
log
@Changes inspired by Markus's rmd160 implementation:
o Make MD5Update() more readable
o Simplify padding in MD5Final()
o Do copy + byte flip in MD5Transform() instead of in the caller

The result is a faster md5 and the byte order foo is kept to a minimum.
@
text
@d1 1
a1 1
/*	$OpenBSD: md5.c,v 1.3 2004/04/28 20:24:59 millert Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: md5.c,v 1.3 2004/04/28 20:24:59 millert Exp $";
d71 1
a71 1
	u_int32_t have, need;
d74 1
a74 1
	have = (u_int32_t)((ctx->count >> 3) & (MD5_BLOCK_LENGTH - 1));
d103 1
a103 1
 * Final wrapup - pad to 64-byte boundary with the bit pattern 
d107 1
a107 1
MD5Final(unsigned char digest[MD5_DIGEST_LENGTH], MD5_CTX *ctx)
d110 1
a110 2
	u_int32_t padlen;
	int i;
d122 9
d132 1
@


1.3
log
@Pass sizeof(*pointer) not sizeof(point) to memset.  Karsten Desler.
@
text
@d1 1
a1 1
/*	$OpenBSD: md5.c,v 1.2 2004/04/28 16:52:08 millert Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: md5.c,v 1.2 2004/04/28 16:52:08 millert Exp $";
d28 21
a48 52
#if BYTE_ORDER == LITTLE_ENDIAN

#define htole32_4(buf)		/* Nothing */
#define htole32_14(buf)		/* Nothing */
#define htole32_16(buf)		/* Nothing */

#else

#define htole32_4(buf) do {						\
	(buf)[ 0] = htole32((buf)[ 0]);					\
	(buf)[ 1] = htole32((buf)[ 1]);					\
	(buf)[ 2] = htole32((buf)[ 2]);					\
	(buf)[ 3] = htole32((buf)[ 3]);					\
} while (0)

#define htole32_14(buf) do {						\
	(buf)[ 0] = htole32((buf)[ 0]);					\
	(buf)[ 1] = htole32((buf)[ 1]);					\
	(buf)[ 2] = htole32((buf)[ 2]);					\
	(buf)[ 3] = htole32((buf)[ 3]);					\
	(buf)[ 4] = htole32((buf)[ 4]);					\
	(buf)[ 5] = htole32((buf)[ 5]);					\
	(buf)[ 6] = htole32((buf)[ 6]);					\
	(buf)[ 7] = htole32((buf)[ 7]);					\
	(buf)[ 8] = htole32((buf)[ 8]);					\
	(buf)[ 9] = htole32((buf)[ 9]);					\
	(buf)[10] = htole32((buf)[10]);					\
	(buf)[11] = htole32((buf)[11]);					\
	(buf)[12] = htole32((buf)[12]);					\
	(buf)[13] = htole32((buf)[13]);					\
} while (0)

#define htole32_16(buf) do {						\
	(buf)[ 0] = htole32((buf)[ 0]);					\
	(buf)[ 1] = htole32((buf)[ 1]);					\
	(buf)[ 2] = htole32((buf)[ 2]);					\
	(buf)[ 3] = htole32((buf)[ 3]);					\
	(buf)[ 4] = htole32((buf)[ 4]);					\
	(buf)[ 5] = htole32((buf)[ 5]);					\
	(buf)[ 6] = htole32((buf)[ 6]);					\
	(buf)[ 7] = htole32((buf)[ 7]);					\
	(buf)[ 8] = htole32((buf)[ 8]);					\
	(buf)[ 9] = htole32((buf)[ 9]);					\
	(buf)[10] = htole32((buf)[10]);					\
	(buf)[11] = htole32((buf)[11]);					\
	(buf)[12] = htole32((buf)[12]);					\
	(buf)[13] = htole32((buf)[13]);					\
	(buf)[14] = htole32((buf)[14]);					\
	(buf)[15] = htole32((buf)[15]);					\
} while (0)

#endif
d69 1
a69 1
MD5Update(MD5_CTX *ctx, const unsigned char *buf, size_t len)
d71 1
a71 1
	u_int32_t count;
d73 3
a75 2
	/* Bytes already stored in ctx->buffer */
	count = (u_int32_t)((ctx->count >> 3) & 0x3f);
d80 7
a86 8
	/* Handle any leading odd-sized chunks */
	if (count) {
		unsigned char *p = (unsigned char *)ctx->buffer + count;

		count = MD5_BLOCK_LENGTH - count;
		if (len < count) {
			memcpy(p, buf, len);
			return;
a87 6
		memcpy(p, buf, count);
		htole32_16((u_int32_t *)ctx->buffer);
		MD5Transform(ctx->state, ctx->buffer);
		buf += count;
		len -= count;
	}
d89 6
a94 7
	/* Process data in MD5_BLOCK_LENGTH-byte chunks */
	while (len >= MD5_BLOCK_LENGTH) {
		memcpy(ctx->buffer, buf, MD5_BLOCK_LENGTH);
		htole32_16((u_int32_t *)ctx->buffer);
		MD5Transform(ctx->state, ctx->buffer);
		buf += MD5_BLOCK_LENGTH;
		len -= MD5_BLOCK_LENGTH;
d98 2
a99 1
	memcpy(ctx->buffer, buf, len);
d109 18
a126 28
	u_int32_t count;
	unsigned char *p;

	/* number of bytes mod 64 */
	count = (u_int32_t)(ctx->count >> 3) & 0x3f;

	/*
	 * Set the first char of padding to 0x80.
	 * This is safe since there is always at least one byte free.
	 */
	p = ctx->buffer + count;
	*p++ = 0x80;

	/* Bytes of padding needed to make 64 bytes */
	count = 64 - 1 - count;

	/* Pad out to 56 mod 64 */
	if (count < 8) {
		/* Two lots of padding:  Pad the first block to 64 bytes */
		memset(p, 0, count);
		htole32_16((u_int32_t *)ctx->buffer);
		MD5Transform(ctx->state, ctx->buffer);

		/* Now fill the next block with 56 bytes */
		memset(ctx->buffer, 0, 56);
	} else {
		/* Pad block to 56 bytes */
		memset(p, 0, count - 8);
a127 9
	htole32_14((u_int32_t *)ctx->buffer);

	/* Append bit count and transform */
	((u_int32_t *)ctx->buffer)[14] = ctx->count & 0xffffffff;
	((u_int32_t *)ctx->buffer)[15] = (u_int32_t)(ctx->count >> 32);

	MD5Transform(ctx->state, ctx->buffer);
	htole32_4(ctx->state);
	memcpy(digest, ctx->state, MD5_DIGEST_LENGTH);
d150 1
a150 1
MD5Transform(u_int32_t buf[4], const unsigned char inc[MD5_BLOCK_LENGTH])
d152 13
a164 2
	u_int32_t a, b, c, d;
	const u_int32_t *in = (const u_int32_t *)inc;
d166 4
a169 4
	a = buf[0];
	b = buf[1];
	c = buf[2];
	d = buf[3];
d239 4
a242 4
	buf[0] += a;
	buf[1] += b;
	buf[2] += c;
	buf[3] += d;
@


1.2
log
@Rename members of struct MD5Context to match other hash routines.
Add constants for buffer lengths and use them.
Make bit count 64bit based on changes by niklas@@ long ago.
Conver htole32n() to macros and unroll loops.
@
text
@d1 1
a1 1
/*	$OpenBSD: md5c.c,v 1.15 2002/12/23 21:10:22 drahn Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: md5c.c,v 1.15 2002/12/23 21:10:22 drahn Exp $";
d184 1
a184 1
	memset(ctx, 0, sizeof(ctx));        /* In case it's sensitive */
@


1.1
log
@PD version of md5(3) based on code written by Colin Plumb.
@
text
@d29 5
a33 1
#define htole32n(buf, n)	/* Nothing */
d35 44
a78 12
/*
 * Note: this code is harmless on little-endian machines.
 * XXX - unroll calls to htole32n -> htole32?
 */
void
htole32n(u_int32_t *buf, size_t n)
{
	while (n--) {
		*buf = htole32(*buf);
		buf++;
	}
}
d88 5
a92 7
	ctx->buf[0] = 0x67452301;
	ctx->buf[1] = 0xefcdab89;
	ctx->buf[2] = 0x98badcfe;
	ctx->buf[3] = 0x10325476;

	ctx->bits[0] = 0;
	ctx->bits[1] = 0;
d102 4
a105 1
	u_int32_t t;
d108 1
a108 7

	t = ctx->bits[0];
	if ((ctx->bits[0] = t + ((u_int32_t)len << 3)) < t)
		ctx->bits[1]++; 	/* Carry from low to high */
	ctx->bits[1] += len >> 29;

	t = (t >> 3) & 0x3f;	/* Bytes already in shsInfo->data */
d111 2
d114 2
a115 5
	if (t) {
		unsigned char *p = (unsigned char *)ctx->in + t;

		t = 64 - t;
		if (len < t) {
d119 5
a123 5
		memcpy(p, buf, t);
		htole32n((u_int32_t *)ctx->in, 16);
		MD5Transform(ctx->buf, ctx->in);
		buf += t;
		len -= t;
d126 7
a132 7
	/* Process data in 64-byte chunks */
	while (len >= 64) {
		memcpy(ctx->in, buf, 64);
		htole32n((u_int32_t *)ctx->in, 16);
		MD5Transform(ctx->buf, ctx->in);
		buf += 64;
		len -= 64;
d136 1
a136 1
	memcpy(ctx->in, buf, len);
d144 1
a144 1
MD5Final(unsigned char digest[16], MD5_CTX *ctx)
d146 1
a146 1
	size_t count;
d150 1
a150 1
	count = (ctx->bits[0] >> 3) & 0x3F;
d156 1
a156 1
	p = ctx->in + count;
d166 2
a167 2
		htole32n((u_int32_t *)ctx->in, 16);
		MD5Transform(ctx->buf, ctx->in);
d170 1
a170 1
		memset(ctx->in, 0, 56);
d175 1
a175 1
	htole32n((u_int32_t *)ctx->in, 14);
d177 7
a183 7
	/* Append length in bits and transform */
	((u_int32_t *) ctx->in)[14] = ctx->bits[0];
	((u_int32_t *) ctx->in)[15] = ctx->bits[1];

	MD5Transform(ctx->buf, ctx->in);
	htole32n(ctx->buf, 4);
	memcpy(digest, ctx->buf, 16);
d206 1
a206 1
MD5Transform(u_int32_t buf[4], const unsigned char inc[64])
d216 10
a225 10
	MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
	MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
	MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
	MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
	MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
	MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
	MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
	MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
	MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
	MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
d228 1
a228 1
	MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
d233 2
a234 2
	MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
	MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
d236 3
a238 3
	MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
	MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
	MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
d240 8
a247 8
	MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
	MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
	MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
	MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
	MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
	MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
	MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
	MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
d250 2
a251 2
	MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
	MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
d254 3
a256 3
	MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
	MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
	MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
d258 5
a262 5
	MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
	MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
	MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
	MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
	MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
d265 1
a265 1
	MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
d267 2
a268 2
	MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
	MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
d270 3
a272 3
	MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
	MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
	MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
d274 2
a275 2
	MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
	MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
d277 1
a277 1
	MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
d279 1
a279 1
	MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
d281 2
a282 2
	MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
	MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
@

