head	1.41;
access;
symbols
	OPENBSD_6_2_BASE:1.41
	OPENBSD_6_1:1.39.0.12
	OPENBSD_6_1_BASE:1.39
	OPENBSD_6_0:1.39.0.8
	OPENBSD_6_0_BASE:1.39
	OPENBSD_5_9:1.39.0.4
	OPENBSD_5_9_BASE:1.39
	OPENBSD_5_8:1.39.0.6
	OPENBSD_5_8_BASE:1.39
	OPENBSD_5_7:1.39.0.2
	OPENBSD_5_7_BASE:1.39
	OPENBSD_5_6:1.38.0.8
	OPENBSD_5_6_BASE:1.38
	OPENBSD_5_5:1.38.0.6
	OPENBSD_5_5_BASE:1.38
	OPENBSD_5_4:1.38.0.2
	OPENBSD_5_4_BASE:1.38
	OPENBSD_5_3:1.35.0.6
	OPENBSD_5_3_BASE:1.35
	OPENBSD_5_2:1.35.0.4
	OPENBSD_5_2_BASE:1.35
	OPENBSD_5_1_BASE:1.35
	OPENBSD_5_1:1.35.0.2
	OPENBSD_5_0:1.33.0.8
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.33.0.6
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.33.0.4
	OPENBSD_4_8_BASE:1.33
	OPENBSD_4_7:1.33.0.2
	OPENBSD_4_7_BASE:1.33
	OPENBSD_4_6:1.31.0.6
	OPENBSD_4_6_BASE:1.31
	OPENBSD_4_5:1.31.0.2
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.30.0.6
	OPENBSD_4_4_BASE:1.30
	OPENBSD_4_3:1.30.0.4
	OPENBSD_4_3_BASE:1.30
	OPENBSD_4_2:1.30.0.2
	OPENBSD_4_2_BASE:1.30
	OPENBSD_4_1:1.29.0.6
	OPENBSD_4_1_BASE:1.29
	OPENBSD_4_0:1.29.0.4
	OPENBSD_4_0_BASE:1.29
	OPENBSD_3_9:1.29.0.2
	OPENBSD_3_9_BASE:1.29
	OPENBSD_3_8:1.28.0.6
	OPENBSD_3_8_BASE:1.28
	OPENBSD_3_7:1.28.0.4
	OPENBSD_3_7_BASE:1.28
	OPENBSD_3_6:1.28.0.2
	OPENBSD_3_6_BASE:1.28
	OPENBSD_3_5:1.27.0.4
	OPENBSD_3_5_BASE:1.27
	OPENBSD_3_4:1.27.0.2
	OPENBSD_3_4_BASE:1.27
	OPENBSD_3_3:1.24.0.6
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.24.0.4
	OPENBSD_3_2_BASE:1.24
	OPENBSD_3_1:1.24.0.2
	OPENBSD_3_1_BASE:1.24
	OPENBSD_3_0:1.23.0.2
	OPENBSD_3_0_BASE:1.23
	OPENBSD_2_9:1.22.0.2
	OPENBSD_2_9_BASE:1.22
	OPENBSD_2_8:1.21.0.2
	OPENBSD_2_8_BASE:1.21
	OPENBSD_2_7:1.20.0.2
	OPENBSD_2_7_BASE:1.20
	OPENBSD_2_6:1.16.0.2
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.41
date	2017.09.21.14.24.16;	author schwarze;	state Exp;
branches;
next	1.40;
commitid	eyFzRsOfSiYjJcUd;

1.40
date	2017.09.20.18.41.55;	author schwarze;	state Exp;
branches;
next	1.39;
commitid	oNg46ECtzKZffxYV;

1.39
date	2015.02.05.02.33.09;	author schwarze;	state Exp;
branches;
next	1.38;
commitid	3DjwIM9vrpCmLhTQ;

1.38
date	2013.04.08.07.39.17;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2013.04.08.06.26.12;	author guenther;	state Exp;
branches;
next	1.36;

1.36
date	2013.03.09.21.05.29;	author tedu;	state Exp;
branches;
next	1.35;

1.35
date	2011.11.06.12.07.22;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2011.11.05.17.55.49;	author guenther;	state Exp;
branches;
next	1.33;

1.33
date	2009.12.30.09.46.23;	author fgsch;	state Exp;
branches;
next	1.32;

1.32
date	2009.12.29.10.25.43;	author sobrado;	state Exp;
branches;
next	1.31;

1.31
date	2008.12.17.09.25.35;	author ray;	state Exp;
branches;
next	1.30;

1.30
date	2007.05.31.19.19.34;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2006.01.19.19.35.20;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2004.04.15.19.52.18;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.02.20.18.39;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.02.09.21.32;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.04.03.23.12.01;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2002.01.24.21.18.36;	author mickey;	state Exp;
branches;
next	1.23;

1.23
date	2001.05.14.15.11.27;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2001.02.16.01.56.58;	author smart;	state Exp;
branches;
next	1.21;

1.21
date	2000.10.18.05.12.12;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	2000.04.20.06.34.37;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2000.04.15.11.46.04;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.12.21.48.02;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.11.14.04.18.03;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	99.09.26.16.05.01;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	99.09.26.16.00.35;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	99.09.26.14.16.31;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	99.08.13.13.31.36;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	99.06.29.14.10.32;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.05.23.14.10.57;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.05.11.02.45.17;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.02.27.21.57.02;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.08.17.17.35.17;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.08.05.16.49.35;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.07.28.19.47.11;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.28.04.13.33;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.07.06.18.28.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.04.29.18.28.42;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.12.13.21.20.51;	author michaels;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.30;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.30;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.41
log
@tweak previous: remove trailing blank and improve a wording;
requested by jmc@@
@
text
@.\"	$OpenBSD: write.2,v 1.40 2017/09/20 18:41:55 schwarze Exp $
.\"	$NetBSD: write.2,v 1.6 1995/02/27 12:39:43 cgd Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)write.2	8.5 (Berkeley) 4/2/94
.\"
.Dd $Mdocdate: September 20 2017 $
.Dt WRITE 2
.Os
.Sh NAME
.Nm write ,
.Nm writev ,
.Nm pwrite ,
.Nm pwritev
.Nd write output
.Sh SYNOPSIS
.In unistd.h
.Ft ssize_t
.Fn write "int d" "const void *buf" "size_t nbytes"
.Ft ssize_t
.Fn pwrite "int d" "const void *buf" "size_t nbytes" "off_t offset"
.Pp
.In sys/uio.h
.Ft ssize_t
.Fn writev "int d" "const struct iovec *iov" "int iovcnt"
.In sys/types.h
.In sys/uio.h
.Ft ssize_t
.Fn pwritev "int d" "const struct iovec *iov" "int iovcnt" "off_t offset"
.Sh DESCRIPTION
.Fn write
attempts to write
.Fa nbytes
of data to the object referenced by the descriptor
.Fa d
from the buffer pointed to by
.Fa buf .
.Fn writev
performs the same action, but gathers the output data from the
.Fa iovcnt
buffers specified by the members of the
.Fa iov
array: iov[0], iov[1], ..., iov[iovcnt-1].
.Fn pwrite
and
.Fn pwritev
perform the same functions, but write to the specified position
.Fa offset
in the file without modifying the file pointer.
.Pp
For
.Fn writev
and
.Fn pwritev ,
the
.Vt iovec
structure is defined as:
.Bd -literal -offset indent
struct iovec {
	void *iov_base;
	size_t iov_len;
};
.Ed
.Pp
Each
.Vt iovec
entry specifies the base address and length of an area
in memory from which data should be written.
.Fn writev
and
.Fn pwritev
will always write a complete area before proceeding to the next.
.Pp
On objects capable of seeking, the
.Fn write
starts at a position given by the pointer associated with
.Fa d
(see
.Xr lseek 2 ) .
Upon return from
.Fn write ,
the pointer is incremented by the number of bytes which were written.
If a file was opened with the
.Dv O_APPEND
flag (see
.Xr open 2 ) ,
calls to
.Fn write
or
.Fn writev
will automatically set the pointer to the end of the file before writing.
.Pp
Objects that are not capable of seeking always write from the current
position.
The value of the pointer associated with such an object is undefined.
.Pp
If the real user is not the superuser, then
.Fn write
clears the set-user-ID bit on a file.
This prevents penetration of system security by a user who
.Dq captures
a writable set-user-ID file owned by the superuser.
.Pp
If
.Fn write
succeeds it will update the st_ctime and st_mtime fields of the file's
meta-data (see
.Xr stat 2 ) .
.Pp
When using non-blocking I/O on objects such as sockets that are subject
to flow control,
.Fn write
and
.Fn writev
may write fewer bytes than requested; the return value must be noted,
and the remainder of the operation should be retried when possible.
.Pp
Note that
.Fn writev
and
.Fn pwritev
will fail if the value of
.Fa iovcnt
exceeds the constant
.Dv IOV_MAX .
.Sh RETURN VALUES
Upon successful completion the number of bytes which were written
is returned.
Otherwise, a \-1 is returned and the global variable
.Va errno
is set to indicate the error.
.Sh EXAMPLES
A typical loop allowing partial writes looks like this:
.Bd -literal
const char *buf;
size_t bsz, off;
ssize_t nw;
int d;

for (off = 0; off < bsz; off += nw)
	if ((nw = write(d, buf + off, bsz - off)) == 0 || nw == -1)
		err(1, "write");
.Ed
.Sh ERRORS
.Fn write ,
.Fn pwrite ,
.Fn writev ,
and
.Fn pwritev
will fail and the file pointer will remain unchanged if:
.Bl -tag -width Er
.It Bq Er EBADF
.Fa d
is not a valid descriptor open for writing.
.It Bq Er EFBIG
An attempt was made to write a file that exceeds the process's
file size limit or the maximum file size.
.It Bq Er ENOSPC
There is no free space remaining on the file system containing the file.
.It Bq Er EDQUOT
The user's quota of disk blocks on the file system containing the file
has been exhausted.
.It Bq Er EINTR
A write to a slow device
(i.e. one that might block for an arbitrary amount of time)
was interrupted by the delivery of a signal
before any data could be written.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.It Bq Er EFAULT
Part of
.Fa buf
points outside the process's allocated address space.
.El
.Pp
In addition,
.Fn write
and
.Fn writev
may return the following errors:
.Bl -tag -width Er
.It Bq Er EPIPE
An attempt is made to write to a pipe that is not open
for reading by any process.
.It Bq Er EPIPE
An attempt is made to write to a socket of type
.Dv SOCK_STREAM
that is not connected to a peer socket.
.It Bq Er EAGAIN
The file was marked for non-blocking I/O, and no data could be
written immediately.
.It Bq Er ENETDOWN
The destination address specified a network that is down.
.It Bq Er EDESTADDRREQ
The destination is no longer available when writing to a
.Ux Ns -domain
datagram socket on which
.Xr connect 2
had been used to set a destination address.
.It Bq Er EIO
The process is a member of a background process attempting to write
to its controlling terminal,
.Dv TOSTOP
is set on the terminal,
the process isn't ignoring the
.Dv SIGTTOUT
signal and the thread isn't blocking the
.Dv SIGTTOUT
signal,
and either the process was created with
.Xr vfork 2
and hasn't successfully executed one of the exec functions or
the process group is orphaned.
.El
.Pp
.Fn write
and
.Fn pwrite
may return the following error:
.Bl -tag -width Er
.It Bq Er EINVAL
.Fa nbytes
was larger than
.Dv SSIZE_MAX .
.El
.Pp
.Fn pwrite
and
.Fn pwritev
may return the following error:
.Bl -tag -width Er
.It Bq Er EINVAL
.Fa offset
was negative.
.It Bq Er ESPIPE
.Fa d
is associated with a pipe, socket, FIFO, or tty.
.El
.Pp
.Fn writev
and
.Fn pwritev
may return one of the following errors:
.Bl -tag -width Er
.It Bq Er EINVAL
.Fa iovcnt
was less than or equal to 0, or greater than
.Dv IOV_MAX .
.It Bq Er EINVAL
The sum of the
.Fa iov_len
values in the
.Fa iov
array overflowed an
.Vt ssize_t .
.It Bq Er EFAULT
Part of
.Fa iov
points outside the process's allocated address space.
.It Bq Er ENOBUFS
The system lacked sufficient buffer space or a queue was full.
.El
.Sh SEE ALSO
.Xr fcntl 2 ,
.Xr lseek 2 ,
.Xr open 2 ,
.Xr pipe 2 ,
.Xr poll 2 ,
.Xr select 2 ,
.Xr termios 4
.Sh STANDARDS
The
.Fn write ,
.Fn writev ,
and
.Fn pwrite
functions conform to
.St -p1003.1-2008 .
.Sh HISTORY
The
.Fn pwritev
function call appeared in
.Ox 2.7 .
The
.Fn pwrite
function call appeared in
.At V.4 .
The
.Fn writev
function call appeared in
.Bx 4.2 .
The
.Fn write
function call appeared in
.At v2 .
.Sh CAVEATS
Error checks should explicitly test for \-1.
On some platforms, if
.Fa nbytes
is larger than
.Dv SSIZE_MAX
but smaller than
.Dv SIZE_MAX
\- 2, the return value of an error-free call
may appear as a negative number distinct from \-1.
@


1.40
log
@Properly document the typical write(2) loop,
and delete misleading parts from the CAVEATS;
issue reported by <ScottCheloha at gmail dot com> on bugs@@;
OK espie@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.39 2015/02/05 02:33:09 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: February 5 2015 $
d159 1
a159 1
The typical loop allowing partial writes looks like this:
d330 1
a330 1
\- 2, the return value of an error-free call 
@


1.39
log
@macro fixes from Kaspars at Bankovskis dot net;
also fixing one typo in fts(3) while here
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.38 2013/04/08 07:39:17 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: April 8 2013 $
d158 12
d324 1
a324 6
Code such as
.Bd -literal -offset indent
while ((nr = write(fd, buf, sizeof(buf))) > 0)
.Ed
.Pp
is not maximally portable, as some platforms allow for
d326 1
a326 1
to range between
d328 1
a328 1
and
d330 1
a330 2
\- 2, in which case the return value of an error-free
.Fn write
a331 4
Proper loops should use
.Bd -literal -offset indent
while ((nr = write(fd, buf, sizeof(buf))) != -1 && nr != 0)
.Ed
@


1.38
log
@macro fix for previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.37 2013/04/08 06:26:12 guenther Exp $
d43 1
a43 1
.Fd #include <unistd.h>
d49 1
a49 1
.Fd #include <sys/uio.h>
d52 2
a53 2
.Fd #include <sys/types.h>
.Fd #include <sys/uio.h>
d82 1
a82 1
.Fa iovec
d92 1
a92 1
.Fa iovec
d109 3
a111 1
If a file was opened with the O_APPEND flag (see
d269 1
a269 1
.Em ssize_t .
d318 1
a318 1
.Va nbytes
@


1.37
log
@Updates to SYNOPSIS, ERRORS, and STANDARDS.
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.36 2013/03/09 21:05:29 tedu Exp $
d33 1
a33 1
.Dd $Mdocdate: March 9 2013 $
d215 2
a216 1
.Dv TOSTOP is set on the terminal,
@


1.36
log
@Describe interaction between write and O_APPEND.
Pointed out by Sachidananda on tech
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.35 2011/11/06 12:07:22 deraadt Exp $
d33 1
a33 1
.Dd $Mdocdate: November 6 2011 $
a42 1
.Fd #include <sys/types.h>
a48 1
.Fd #include <sys/types.h>
a49 1
.Fd #include <unistd.h>
d52 2
d175 5
d192 1
a192 1
may return the following error:
d204 2
d212 13
d280 2
a281 1
.Xr select 2
d284 2
a285 5
.Fn write
function conforms to
.St -p1003.1-90 .
The
.Fn writev
d289 1
a289 1
.St -xpg4.2 .
@


1.35
log
@repair documentation offset in the p*() versions of the calls and EINVAL;
plus merge differences between two pages.
ok guenther jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.34 2011/11/05 17:55:49 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: November 5 2011 $
d110 7
@


1.34
log
@Move around the error cases to make clear that some don't apply to the
p* versions, as well as fix a couple other cases
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.33 2009/12/30 09:46:23 fgsch Exp $
d33 1
a33 1
.Dd $Mdocdate: December 30 2009 $
d70 1
a70 1
array: iov[0], iov[1], ..., iov[iovcnt\|-\|1].
a163 4
.It Bq Er EINVAL
The pointer associated with
.Fa d
was negative.
d209 1
a209 1
.Ev SSIZE_MAX .
d217 3
@


1.33
log
@Document ESPIPE and make EFAULT cover all functions.
jmc@@ deraadt@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.32 2009/12/29 10:25:43 sobrado Exp $
d33 1
a33 1
.Dd $Mdocdate: December 29 2009 $
a160 7
.It Bq Er EPIPE
An attempt is made to write to a pipe that is not open
for reading by any process.
.It Bq Er EPIPE
An attempt is made to write to a socket of type
.Dv SOCK_STREAM
that is not connected to a peer socket.
a174 3
.It Bq Er EAGAIN
The file was marked for non-blocking I/O, and no data could be
written immediately.
a176 2
.Fa iov
or
d184 23
d223 1
a223 1
is associated with a pipe, socket, or FIFO.
a230 6
.It Bq Er EDESTADDRREQ
The destination is no longer available when writing to a
.Ux Ns -domain
datagram socket on which
.Xr connect 2
had been used to set a destination address.
d242 4
@


1.32
log
@replace a few remaining UNIX terms with .Ux macros; this diff
completes the changes from Oct 22.
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.31 2008/12/17 09:25:35 ray Exp $
d33 1
a33 1
.Dd $Mdocdate: December 17 2008 $
d185 6
a198 5
.It Bq Er EFAULT
Part of
.Fa iov
or data to be written to the file points outside the process's
allocated address space.
d205 10
a214 1
Also,
@


1.31
log
@Document ENOBUFS for writev(2).

Okay claudio, deraadt.
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.30 2007/05/31 19:19:34 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d212 2
a213 2
.Ux
domain datagram socket on which
@


1.30
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.29 2006/01/19 19:35:20 espie Exp $
d33 1
a33 1
.Dd $Mdocdate$
d227 2
@


1.29
log
@make offset parameter to pwrite apparent in description.
okay jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.28 2004/04/15 19:52:18 jmc Exp $
d33 1
a33 1
.Dd July 28, 1998
@


1.28
log
@various improvements to lists and displays:

.Pp removal
-compact removal for displays
other list/display errors
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.27 2003/06/02 20:18:39 millert Exp $
d74 3
a76 2
perform the same functions, but write to the specified position in
the file without modifying the file pointer.
@


1.27
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.26 2003/06/02 09:21:32 jmc Exp $
d84 1
a84 2
.Pp
.Bd -literal -offset indent -compact
d265 2
a266 2
.Bd -literal
	while ((nr = write(fd, buf, sizeof(buf))) > 0)
d279 2
a280 2
.Bd -literal
	while ((nr = write(fd, buf, sizeof(buf))) != -1 && nr != 0)
@


1.26
log
@section reorder;
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.25 2003/04/03 23:12:01 jmc Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.25
log
@exceeds -> exceedes;

from Pedro Bastos (thanks)
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.24 2002/01/24 21:18:36 mickey Exp $
d250 17
a286 17
.Sh HISTORY
The
.Fn pwritev
function call appeared in
.Ox 2.7 .
The
.Fn pwrite
function call appeared in
.At V.4 .
The
.Fn writev
function call appeared in
.Bx 4.2 .
The
.Fn write
function call appeared in
.At v2 .
@


1.24
log
@most of these is v2, not v6
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.23 2001/05/14 15:11:27 espie Exp $
d146 1
a146 1
exceedes the constant
@


1.23
log
@Split synopsis, plain read/write don't need uio.
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.22 2001/02/16 01:56:58 smart Exp $
d286 1
a286 1
.At v6 .
@


1.22
log
@style(9) nit in examples, aaron@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.21 2000/10/18 05:12:12 aaron Exp $
a47 1
.Fd #include <sys/uio.h>
d52 6
a58 2
.Ft ssize_t
.Fn pwrite "int d" "const void *buf" "size_t nbytes" "off_t offset"
@


1.21
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.20 2000/04/20 06:34:37 deraadt Exp $
d251 1
a251 1
	while ((nr = write(fd, buf, sizeof buf)) > 0)
d265 1
a265 1
	while ((nr = write(fd, buf, sizeof buf)) != -1 && nr != 0)
@


1.20
log
@p{read,write}{,v} man pages
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.19 2000/04/15 11:46:04 aaron Exp $
d67 1
a67 2
performs the same action, but gathers the output data
from the
d100 1
a100 2
will always write a complete area before proceeding
to the next.
d104 1
a104 2
starts at a position
given by the pointer associated with
d113 2
a114 2
position.  The value of the pointer associated with such an object
is undefined.
d119 1
a119 2
This prevents penetration of system security
by a user who
d121 1
a121 2
a writable set-user-ID file
owned by the superuser.
d134 1
a134 2
may write fewer bytes than requested;
the return value must be noted,
d147 2
a148 1
is returned.  Otherwise, a \-1 is returned and the global variable
d177 1
a177 2
There is no free space remaining on the file system
containing the file.
d179 2
a180 2
The user's quota of disk blocks on the file system
containing the file has been exhausted.
d184 2
a185 2
The file was marked for non-blocking I/O,
and no data could be written immediately.
d197 2
a198 2
or data to be written to the file
points outside the process's allocated address space.
d270 1
a270 2
function call
appeared in
d274 1
a274 2
function call
appeared in
d278 1
a278 2
function call
appeared in
@


1.19
log
@- For consistency, `super-user' -> `superuser' in all cases.
- Some punctuation fixes.
- Some `id' -> `ID'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.18 2000/04/12 21:48:02 aaron Exp $
d42 3
a44 1
.Nm writev
d54 4
d66 1
a66 1
.Fn \ Writev
d73 5
d80 3
a82 1
.Fn writev ,
d99 2
d145 2
d157 3
a159 1
.Fn write
d161 1
a161 1
.Fn writev
d196 2
d213 2
d245 8
a252 2
function is expected to conform to
.St -p1003.1-88 .
d274 10
@


1.18
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.17 1999/11/14 04:18:03 deraadt Exp $
d95 1
a95 1
.Xr lseek 2 . )
d104 1
a104 1
If the real user is not the super-user, then
d106 1
a106 1
clears the set-user-id bit on a file.
d110 2
a111 2
a writable set-user-id file
owned by the super-user.
d117 1
a117 1
.Xr stat 2 . )
@


1.17
log
@EFAULT does not happen for all files; posix 1003.1, line 216
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.16 1999/09/26 16:05:01 espie Exp $
d231 1
a231 1
is not maximally portable, as some platforms allow for 
d234 1
a234 1
.Dv SSIZE_MAX 
d236 1
a236 1
.Dv SIZE_MAX 
@


1.16
log
@.Nm -> .Fn
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.15 1999/09/26 16:00:35 espie Exp $
a157 5
.It Bq Er EFAULT
Part of
.Fa iov
or data to be written to the file
points outside the process's allocated address space.
d179 5
@


1.15
log
@Proper coding idioms.

[yes, there ARE some systems where read and write >SSIZE_MAX work,
and physicists use those features to write huge files in one swoop]
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.14 1999/09/26 14:16:31 espie Exp $
d238 1
a238 1
.Nm write
@


1.14
log
@`may return following error' => `may return the following error'
`may return following errors' => `may return one of the following errors'
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.13 1999/08/13 13:31:36 millert Exp $
d224 20
@


1.13
log
@Missing comma
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.12 1999/06/29 14:10:32 aaron Exp $
d182 1
a182 1
may return following error:
@


1.12
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.11 1999/05/23 14:10:57 aaron Exp $
d136 1
a136 1
is returned.  Otherwise a \-1 is returned and the global variable
@


1.11
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.10 1999/05/11 02:45:17 aaron Exp $
d59 1
a59 1
.Fa buf . 
d62 1
a62 1
from the 
d68 1
a68 1
For 
d70 1
a70 1
the 
d81 1
a81 1
Each 
d127 5
a131 5
.Pp                                                                       
Note that                                                          
.Fn writev   
will fail if the value of                                                  
.Fa iovcnt              
d133 1
a133 1
.Dv IOV_MAX .     
d136 1
a136 1
is returned.  Otherwise a -1 is returned and the global variable
d153 1
a153 1
.DV SOCK_STREAM
@


1.10
log
@writev(2) may return EDESTADDRREQ if a write is attempted to a connect(2)'d
uipc domain socket and the destination set by connect(2) is no longer
available; from FreeBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.9 1999/02/27 21:57:02 deraadt Exp $
d39 1
a39 1
.Os BSD 4
@


1.9
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.8 1998/08/17 17:35:17 deraadt Exp $
d194 6
@


1.8
log
@Xr poll
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.7 1998/08/05 16:49:35 millert Exp $
d53 1
a53 1
.Fn Write
d85 1
a85 1
.Fn Writev
d140 1
a140 1
.Fn Write
d146 1
a146 1
.Fa D
d195 1
a195 1
.Fa Iovcnt
@


1.7
log
@IOV_MAX, not UIO_MAXIOV
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.6 1998/07/28 19:47:11 millert Exp $
d211 1
@


1.6
log
@For read, write, send, sendto, recv, recvfrom return EINVAL is size arg > SSIZE_MAX.  For readv, writev, sendmsg, recvmsg return EINVAL if sum of the  over iov_len values overflows an ssize_t.  Based on what XPG 4.2 says (though XPG is not entirely consistent here).  Basically since the return value is ssize_t allowing size > SSIZE_MAX is bad since people who (incorrectly mind you) check the return value for < 0 instead of == -1 will have bad things happen to them.
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.5 1998/07/28 04:13:33 millert Exp $
d133 1
a133 1
.Fa UIO_MAXIOV .     
d197 1
a197 1
.Fa UIO_MAXIOV .
@


1.5
log
@Don't talk about the sum of the iov_len being negative since iov_len is unsigned.
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.4 1998/07/06 18:28:59 deraadt Exp $
d37 1
a37 1
.Dd April 2, 1994
d180 11
a190 1
In addition, 
d203 2
a204 1
array overflowed an unsigned 32-bit integer.
@


1.4
log
@fix openbsd tag
@
text
@d1 1
a1 1
.\"	$OpenBSD: write.2,v 1.6 1995/02/27 12:39:43 cgd Exp $
a188 6
One of the
.Fa iov_len
values in the
.Fa iov
array was negative.
.It Bq Er EINVAL
d193 1
a193 1
array overflowed a 32-bit integer.
@


1.3
log
@mention that write updates timestamps
@
text
@d1 1
@


1.2
log
@make UIO_MAXIOV note more prominent
@
text
@d94 1
a94 1
.Xr lseek 2 ) .
d111 6
@


1.1
log
@Initial revision
@
text
@d58 2
a59 2
.Fa buf .
.Fn Writev
d120 7
d180 1
a180 1
.Dv {UIO_MAXIOV} .
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
