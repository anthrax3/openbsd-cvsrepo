head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.4
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.23.0.6
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.10.0.26
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.24
	OPENBSD_5_0:1.10.0.22
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.20
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.18
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.14
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.16
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.12
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.23
date	2016.03.21.22.41.28;	author bluhm;	state Exp;
branches;
next	1.22;
commitid	hneUpr7ZOJCeNeHP;

1.22
date	2016.03.13.18.34.21;	author guenther;	state Exp;
branches;
next	1.21;
commitid	AStIlKdF20sYXV6x;

1.21
date	2015.12.01.17.05.25;	author canacar;	state Exp;
branches;
next	1.20;
commitid	gcVezd9DWD8Os5Hu;

1.20
date	2015.11.25.00.16.40;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	FgrfNseaP4Fz35q3;

1.19
date	2015.11.10.04.30.59;	author guenther;	state Exp;
branches;
next	1.18;
commitid	GTAoVjpQRAdNHXVz;

1.18
date	2015.11.10.04.14.03;	author guenther;	state Exp;
branches;
next	1.17;
commitid	SlaqG0vnitmMjAjz;

1.17
date	2015.09.10.18.13.46;	author guenther;	state Exp;
branches;
next	1.16;
commitid	qU49tm8AgtP7HwZE;

1.16
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	0DYulI8hhujBHMcR;

1.15
date	2013.12.28.18.42.42;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2013.12.27.18.32.19;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2013.12.27.03.22.27;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.24.01.28.54;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	2012.08.22.17.06.39;	author matthew;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.31.05.34.44;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.30.07.51.02;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.08.08.05.37;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.14.22.19.30;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.01.18.19.08;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.18.23.05.13;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.03.19.52.41;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.10.08.53.42;	author etoh;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.02.09.02.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.02.09.00.15;	author miod;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@/*	$OpenBSD: stack_protector.c,v 1.22 2016/03/13 18:34:21 guenther Exp $	*/

/*
 * Copyright (c) 2002 Hiroaki Etoh, Federico G. Schwindt, and Miodrag Vallat.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>

/*
 * Note: test below is for PIC not __PIC__.  This code must only be included
 * in the shared library and not in libc.a, but __PIC__ is set for libc.a
 * objects where PIE is supported
 *
 * XXX would this work? #if defined(__PIC__) && !defined(__PIE__)
 * XXX any archs which are always PIC (like mips64) but don't have PIE?
 */
#ifdef PIC
#include <../csu/os-note-elf.h>

long __guard_local __dso_hidden __attribute__((section(".openbsd.randomdata")));
#endif /* PIC */

void
__stack_smash_handler(const char func[], int damaged)
{
	struct sigaction sa;
	sigset_t mask;
	char buf[1024];

	/* Immediately block all signal handlers from running code */
	sigfillset(&mask);
	sigdelset(&mask, SIGABRT);
	sigprocmask(SIG_SETMASK, &mask, NULL);

	/* <10> is LOG_CRIT */
	strlcpy(buf, "<10>", sizeof buf);

	/* Make sure progname does not fill the whole buffer */
	strlcat(buf, __progname, sizeof(buf) / 2 );

	strlcat(buf, ": stack overflow in function ", sizeof buf);
	strlcat(buf, func, sizeof buf);

	sendsyslog(buf, strlen(buf), LOG_CONS);

	memset(&sa, 0, sizeof(sa));
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = 0;
	sa.sa_handler = SIG_DFL;
	sigaction(SIGABRT, &sa, NULL);

	thrkill(0, SIGABRT, NULL);

	_exit(127);
}
DEF_STRONG(__stack_smash_handler);
@


1.22
log
@environ and __progname are not declared in a public header; declare them
in libc's hidden/stdlib.h instead of in each .c file that needs one

ok deraadt@@ gsoares@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.21 2015/12/01 17:05:25 canacar Exp $	*/
d71 1
a71 1
	sendsyslog2(buf, strlen(buf), LOG_CONS);
@


1.21
log
@use strlcat instead of strlcpy with modified arguments. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.20 2015/11/25 00:16:40 deraadt Exp $	*/
d31 1
a52 1
	extern char *__progname;
@


1.20
log
@Rather than using syslog(3) (which pulls in snprintf), creating the report
string using simpler strings functions and use sendsyslog2() directly.
Also, use the LOG_CONS flag so that single-user reports are more clear.
Use a buffer size of 1024 (from bluhm)
discussed with guenther and matthew
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.19 2015/11/10 04:30:59 guenther Exp $	*/
a55 1
	size_t len;
d63 4
a66 2
	len = strlcpy(buf, "<10>", sizeof buf);
	strlcpy(buf + len, __progname, sizeof buf - len);
a67 2
	/* truncate progname in case it is too long */
	buf[sizeof(buf) / 2] = '\0';
@


1.19
log
@Split the intra-thread functionality from kill(2) into its own syscall
thrkill(2), rolling the kill(2) syscall number with the ABI change to
avoid breaking binaries during during the transition.  thrkill(2) includes
a 'tcb' argument that eliminates the need for locking in pthread_kill()
and simplifies pthread_cancel().  Switch __stack_smash_handler() to use
thrkill(2) and explicitly unblock SIGABRT.

Minor bump to both libc and libpthread: make sure you install a new kernel!

ok semarie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.18 2015/11/10 04:14:03 guenther Exp $	*/
d52 1
a52 2
	struct syslog_data sdata = SYSLOG_DATA_INIT;
	const char message[] = "stack overflow in function %s";
d55 2
d63 10
a72 1
	syslog_r(LOG_CRIT, &sdata, message, func);
@


1.18
log
@libc.so can't be unloaded, so move the hidden atexit() and pthread_atfork()
stubs for the executable from crtbegin.o into libc, which lets them be
excluded from static links that don't use them.
For this, drop the normal crt{begin,end}S.o from libc.so: the .init and .fini
sections for libc aren't called at the right times anyway, so it's good that
they're unused.  libc.so just needs __guard_local and the .note.openbsd.ident
section, so add them to stack_protector.c for now (this will be improved)

"good time" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.17 2015/09/10 18:13:46 guenther Exp $	*/
d60 1
a60 1
	sigprocmask(SIG_BLOCK, &mask, NULL);
a61 1
	/* This may fail on a chroot jail... */
d64 1
a64 1
	bzero(&sa, sizeof(struct sigaction));
d70 1
a70 1
	kill(getpid(), SIGABRT);
@


1.17
log
@Pull in namespace.h when building all .c files using gcc's -include option,
so that we can provide asm labels for the memcpy/memset/__stack_smash_handler
calls that it generates ab initio.  Eliminate direct #includes of it.  Make
sure it's a dependency of all objects (unnecessary for asm, but close enough).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.16 2015/01/16 16:48:51 deraadt Exp $	*/
d34 14
@


1.16
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.15 2013/12/28 18:42:42 deraadt Exp $	*/
a34 3
void __stack_smash_handler(char func[], int damaged __attribute__((unused)));

/*ARGSUSED*/
d36 1
a36 1
__stack_smash_handler(char func[], int damaged)
d61 1
@


1.15
log
@Do not need __guard[] anymore since we are now relying on __guard_local
for a while already
ok miod kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.14 2013/12/27 18:32:19 deraadt Exp $	*/
a29 1
#include <sys/param.h>
@


1.14
log
@do not need to create the stack cookie using a constructor anymore,
since the kernel supplies a .openbsd.randomdata segment.
ok matthew miod guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.13 2013/12/27 03:22:27 deraadt Exp $	*/
a34 2

long __guard[8] __attribute__((section(".openbsd.randomdata")));
@


1.13
log
@remove non-openbsd.randomdata parts
ok miod matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.12 2012/08/24 01:28:54 matthew Exp $	*/
a30 1
#include <sys/sysctl.h>
a35 2
extern int __sysctl(int *, u_int, void *, size_t *, void *, size_t);

a37 1
static void __guard_setup(void) __attribute__ ((constructor));
a38 24

static void
__guard_setup(void)
{
	int mib[2];
	size_t i, len;

	for (i = 0; i < sizeof(__guard) / sizeof(__guard[0]); i++)
		if (__guard[i] != 0)
			return;

	mib[0] = CTL_KERN;
	mib[1] = KERN_ARND;

	len = sizeof(__guard);
	if (__sysctl(mib, 2, __guard, &len, NULL, 0) == -1 ||
	    len != sizeof(__guard)) {
		/* If sysctl was unsuccessful, use the "terminator canary". */
		((unsigned char *)__guard)[0] = 0;
		((unsigned char *)__guard)[1] = 0;
		((unsigned char *)__guard)[2] = '\n';
		((unsigned char *)__guard)[3] = 255;
	}
}
@


1.12
log
@Don't attempt to warn about uninitialized __guard values yet.  It's
too early to assume that everyone has updated their compiler
toolchains, and it seems to cause problems at least on armish when an
out-of-date binutils is used.
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.11 2012/08/22 17:06:39 matthew Exp $	*/
a38 1
#ifdef __ELF__
a39 3
#else
long __guard[8] = {0, 0, 0, 0, 0, 0, 0, 0};
#endif
a52 7

#if 0
	{
		struct syslog_data sdata = SYSLOG_DATA_INIT;
		syslog_r(LOG_WARNING, &sdata, "__guard not initialized");
	}
#endif
@


1.11
log
@Change ld.so and libc to use .openbsd.randomdata on ELF platforms for
initializing their __guard values.  For the time being, we're leaving
libc's constructor method as a backup to make sure __guard actually
gets initialized and to emit syslog warnings when it's not.

Not really an ABI change, so no shlib bump... "hold on to your butts"

ok deraadt, kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.10 2006/03/31 05:34:44 deraadt Exp $	*/
d58 1
a58 1
#ifdef __ELF__
@


1.10
log
@ARGSUSED where needed
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.9 2005/11/30 07:51:02 otto Exp $	*/
d39 3
d43 2
d52 1
a52 1
	size_t len;
d54 10
a63 2
	if (__guard[0] != 0)
		return;
@


1.9
log
@Use sysctl(KERN_ARND) to get n bytes, instead of just 4 at a time
and remove fallback code. If somebody is dumb enough to make the
sysctl fail using systrace, he deserves what he gets. Saves 7 syscalls
on process startup.
looks good miod@@ ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.8 2005/08/08 08:05:37 espie Exp $	*/
d66 1
@


1.8
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.7 2004/09/14 22:19:30 deraadt Exp $	*/
d46 1
a46 1
	int i, mib[2];
d55 3
a57 8
	len = 4;
	for (i = 0; i < sizeof(__guard) / 4; i++) {
		if (__sysctl(mib, 2, (char *)&((int *)__guard)[i],
		    &len, NULL, 0) == -1)
			break;
	}

	if (i < sizeof(__guard) / 4) {
@


1.7
log
@lint says unsigned...
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.6 2003/10/01 18:19:08 miod Exp $	*/
a28 4

#if defined(LIBC_SCCS) && !defined(list)
static char rcsid[] = "$OpenBSD: stack_protector.c,v 1.6 2003/10/01 18:19:08 miod Exp $";
#endif
@


1.6
log
@Directly invoke the sysctl system call, rather than going through the sysctl(3)
wrapper.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.5 2003/07/18 23:05:13 david Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: stack_protector.c,v 1.5 2003/07/18 23:05:13 david Exp $";
d68 4
a71 2
		((char *)__guard)[0] = 0; ((char*)__guard)[1] = 0;
		((char *)__guard)[2] = '\n'; ((char *)__guard)[3] = 255;
@


1.5
log
@add missing includes
ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.4 2003/03/03 19:52:41 deraadt Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: stack_protector.c,v 1.4 2003/03/03 19:52:41 deraadt Exp $";
d41 2
d61 1
a61 1
		if (sysctl(mib, 2, (char *)&((int *)__guard)[i],
@


1.4
log
@in the handler, block signals handlers as soon as possible; ok miod millert
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.3 2002/12/10 08:53:42 etoh Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: stack_protector.c,v 1.3 2002/12/10 08:53:42 etoh Exp $";
d36 2
d39 1
@


1.3
log
@bug fix
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.2 2002/12/02 09:02:57 deraadt Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: stack_protector.c,v 1.2 2002/12/02 09:02:57 deraadt Exp $";
d74 1
d76 6
a81 1
	/* this may fail on a chroot jail, though luck */
@


1.2
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: stack_protector.c,v 1.1 2002/12/02 09:00:15 miod Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: stack_protector.c,v 1.1 2002/12/02 09:00:15 miod Exp $";
d78 1
a78 1
	bzero(sa, sizeof(struct sigaction));
@


1.1
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD$";
d38 1
a38 1
long __guard[8] = {0,0,0,0,0,0,0,0};
d56 1
a56 1
		if (sysctl(mib, 2, (char*)&((int*)__guard)[i],
d63 2
a64 2
		((char*)__guard)[0] = 0; ((char*)__guard)[1] = 0;
		((char*)__guard)[2] = '\n'; ((char*)__guard)[3] = 255;
@

