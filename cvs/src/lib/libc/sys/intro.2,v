head	1.64;
access;
symbols
	OPENBSD_6_1:1.64.0.6
	OPENBSD_6_1_BASE:1.64
	OPENBSD_6_0:1.64.0.2
	OPENBSD_6_0_BASE:1.64
	OPENBSD_5_9:1.62.0.2
	OPENBSD_5_9_BASE:1.62
	OPENBSD_5_8:1.59.0.4
	OPENBSD_5_8_BASE:1.59
	OPENBSD_5_7:1.58.0.2
	OPENBSD_5_7_BASE:1.58
	OPENBSD_5_6:1.51.0.4
	OPENBSD_5_6_BASE:1.51
	OPENBSD_5_5:1.48.0.4
	OPENBSD_5_5_BASE:1.48
	OPENBSD_5_4:1.46.0.12
	OPENBSD_5_4_BASE:1.46
	OPENBSD_5_3:1.46.0.10
	OPENBSD_5_3_BASE:1.46
	OPENBSD_5_2:1.46.0.8
	OPENBSD_5_2_BASE:1.46
	OPENBSD_5_1_BASE:1.46
	OPENBSD_5_1:1.46.0.6
	OPENBSD_5_0:1.46.0.4
	OPENBSD_5_0_BASE:1.46
	OPENBSD_4_9:1.46.0.2
	OPENBSD_4_9_BASE:1.46
	OPENBSD_4_8:1.45.0.4
	OPENBSD_4_8_BASE:1.45
	OPENBSD_4_7:1.45.0.2
	OPENBSD_4_7_BASE:1.45
	OPENBSD_4_6:1.43.0.10
	OPENBSD_4_6_BASE:1.43
	OPENBSD_4_5:1.43.0.6
	OPENBSD_4_5_BASE:1.43
	OPENBSD_4_4:1.43.0.4
	OPENBSD_4_4_BASE:1.43
	OPENBSD_4_3:1.43.0.2
	OPENBSD_4_3_BASE:1.43
	OPENBSD_4_2:1.40.0.2
	OPENBSD_4_2_BASE:1.40
	OPENBSD_4_1:1.38.0.4
	OPENBSD_4_1_BASE:1.38
	OPENBSD_4_0:1.38.0.2
	OPENBSD_4_0_BASE:1.38
	OPENBSD_3_9:1.33.0.4
	OPENBSD_3_9_BASE:1.33
	OPENBSD_3_8:1.33.0.2
	OPENBSD_3_8_BASE:1.33
	OPENBSD_3_7:1.31.0.2
	OPENBSD_3_7_BASE:1.31
	OPENBSD_3_6:1.30.0.4
	OPENBSD_3_6_BASE:1.30
	OPENBSD_3_5:1.30.0.2
	OPENBSD_3_5_BASE:1.30
	OPENBSD_3_4:1.27.0.2
	OPENBSD_3_4_BASE:1.27
	OPENBSD_3_3:1.26.0.2
	OPENBSD_3_3_BASE:1.26
	OPENBSD_3_2:1.25.0.2
	OPENBSD_3_2_BASE:1.25
	OPENBSD_3_1:1.21.0.4
	OPENBSD_3_1_BASE:1.21
	OPENBSD_3_0:1.21.0.2
	OPENBSD_3_0_BASE:1.21
	OPENBSD_2_9:1.20.0.2
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_8:1.17.0.2
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.16.0.2
	OPENBSD_2_7_BASE:1.16
	OPENBSD_2_6:1.15.0.2
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.9.0.4
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.64
date	2016.04.17.14.36.44;	author jmc;	state Exp;
branches;
next	1.63;
commitid	PSRBiq0V2jD3DNj1;

1.63
date	2016.03.06.22.32.09;	author guenther;	state Exp;
branches;
next	1.62;
commitid	54AqaE0XKiCoBi8A;

1.62
date	2015.12.01.01.34.16;	author mmcc;	state Exp;
branches;
next	1.61;
commitid	9E5vbEsI0YWnbZBO;

1.61
date	2015.11.07.22.57.52;	author jmc;	state Exp;
branches;
next	1.60;
commitid	NJ1naRj4HulCkLlB;

1.60
date	2015.10.24.10.42.02;	author bluhm;	state Exp;
branches;
next	1.59;
commitid	ooninuingH9mEmCU;

1.59
date	2015.07.28.22.48.31;	author deraadt;	state Exp;
branches;
next	1.58;
commitid	QCjhGzhWJRiWXcc0;

1.58
date	2015.01.19.21.29.38;	author millert;	state Exp;
branches;
next	1.57;
commitid	1AhRbsVE42F5ErS9;

1.57
date	2015.01.19.13.59.16;	author millert;	state Exp;
branches;
next	1.56;
commitid	1g6UEuu61s5QhQzC;

1.56
date	2015.01.17.13.37.59;	author millert;	state Exp;
branches;
next	1.55;
commitid	T1J1cFZDjRdXlwI3;

1.55
date	2015.01.01.07.27.34;	author schwarze;	state Exp;
branches;
next	1.54;
commitid	A3xgKtV5bMGI5uM7;

1.54
date	2015.01.01.07.05.24;	author schwarze;	state Exp;
branches;
next	1.53;
commitid	6PoEmgpyjDZsWyH5;

1.53
date	2014.12.10.07.18.44;	author guenther;	state Exp;
branches;
next	1.52;
commitid	NBsrKLkFkwNb26d8;

1.52
date	2014.11.15.14.41.02;	author bentley;	state Exp;
branches;
next	1.51;
commitid	HuCemPIiOkto0SJD;

1.51
date	2014.05.30.04.42.07;	author guenther;	state Exp;
branches;
next	1.50;

1.50
date	2014.05.02.20.20.12;	author guenther;	state Exp;
branches;
next	1.49;

1.49
date	2014.05.02.09.50.32;	author jca;	state Exp;
branches;
next	1.48;

1.48
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.47;

1.47
date	2013.09.30.12.02.35;	author millert;	state Exp;
branches;
next	1.46;

1.46
date	2011.01.21.08.20.17;	author lum;	state Exp;
branches;
next	1.45;

1.45
date	2009.11.24.18.40.53;	author guenther;	state Exp;
branches;
next	1.44;

1.44
date	2009.10.26.21.09.33;	author jasper;	state Exp;
branches;
next	1.43;

1.43
date	2007.11.05.08.21.58;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2007.09.08.18.56.26;	author otto;	state Exp;
branches;
next	1.41;

1.41
date	2007.09.03.14.37.52;	author millert;	state Exp;
branches;
next	1.40;

1.40
date	2007.05.31.19.19.32;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2007.05.21.21.07.33;	author jasper;	state Exp;
branches;
next	1.38;

1.38
date	2006.09.15.20.40.23;	author otto;	state Exp;
branches;
next	1.37;

1.37
date	2006.08.04.21.35.51;	author beck;	state Exp;
branches;
next	1.36;

1.36
date	2006.08.03.23.20.32;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2006.08.03.21.02.07;	author beck;	state Exp;
branches;
next	1.34;

1.34
date	2006.08.03.20.49.44;	author beck;	state Exp;
branches;
next	1.33;

1.33
date	2005.08.18.15.18.19;	author jaredy;	state Exp;
branches;
next	1.32;

1.32
date	2005.03.22.15.48.30;	author hshoexer;	state Exp;
branches;
next	1.31;

1.31
date	2005.01.04.15.54.06;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.16.08.46.46;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2003.12.04.14.32.09;	author otto;	state Exp;
branches;
next	1.28;

1.28
date	2003.11.25.21.45.32;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.02.20.18.39;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2003.02.25.08.26.38;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2002.08.11.16.50.26;	author aaron;	state Exp;
branches;
next	1.24;

1.24
date	2002.06.16.04.40.42;	author todd;	state Exp;
branches;
next	1.23;

1.23
date	2002.05.01.13.36.18;	author drahn;	state Exp;
branches;
next	1.22;

1.22
date	2002.04.30.16.32.58;	author drahn;	state Exp;
branches;
next	1.21;

1.21
date	2001.08.22.12.15.46;	author heko;	state Exp;
branches;
next	1.20;

1.20
date	2001.03.27.22.41.44;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	2001.03.11.06.06.08;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	2001.03.11.05.02.29;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2000.10.18.05.12.10;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.15.11.46.03;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.07.04.18.59.43;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.07.02.19.50.51;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	99.06.29.14.10.03;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.05.27.20.49.35;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.05.27.14.22.19;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.05.23.14.10.54;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	98.09.07.16.36.54;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	98.07.06.18.27.42;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.03.18.20.36.34;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.07.17.07.38.20;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.06.13.10.08.34;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.06.12.20.02.05;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.08.21.07.08.05;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.08.15.23.50.41;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.64
log
@document pledge(2); from rob pierce
@
text
@.\"	$OpenBSD: intro.2,v 1.63 2016/03/06 22:32:09 guenther Exp $
.\"	$NetBSD: intro.2,v 1.6 1995/02/27 12:33:41 cgd Exp $
.\"
.\" Copyright (c) 1980, 1983, 1986, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)intro.2	8.3 (Berkeley) 12/11/93
.\"
.Dd $Mdocdate: March 6 2016 $
.Dt INTRO 2
.Os
.Sh NAME
.Nm intro ,
.Nm errno
.Nd introduction to system calls and error numbers
.Sh SYNOPSIS
.In errno.h
.Sh DESCRIPTION
The manual pages in section 2 provide an overview of the system calls,
their error returns, and other common definitions and concepts.
.Pp
Programs may be restricted to a subset of system calls with
.Xr pledge 2 .
.\".Pp
.\".Sy System call restart
.\".Pp
.\"<more later...>
.Sh DIAGNOSTICS
Nearly all of the system calls provide an error number via the identifier
.Dv errno ,
which expands to an addressable location of type
.Vt int .
The address of
.Va errno
in each thread is guaranteed to be unique for the lifetime of the thread.
Applications must use
.Va errno
as defined in
.In errno.h
and not attempt to use a custom definition.
.Pp
When a system call detects an error, it returns an integer value
indicating failure (usually \-1) and sets the variable
.Va errno
accordingly.
(This allows interpretation of the failure on receiving
a \-1 and to take action accordingly.)
Successful calls never set
.Va errno ;
once set, it remains until another error occurs.
It should only be examined after an error.
Note that a number of system calls overload the meanings of these
error numbers, and that the meanings must be interpreted according
to the type and circumstances of the call.
.Pp
The following is a complete list of the errors and their
names as given in
.In sys/errno.h .
.Bl -hang -width Ds
.It Er 0 Em "Undefined error: 0" .
Not used.
.It Er 1 EPERM Em "Operation not permitted" .
An attempt was made to perform an operation limited to processes
with appropriate privileges or to the owner of a file or other
resources.
.It Er 2 ENOENT Em "\&No such file or directory" .
A component of a specified pathname did not exist, or the
pathname was an empty string.
.It Er 3 ESRCH Em "\&No such process" .
No process could be found which corresponds to the given process ID.
.It Er 4 EINTR Em "Interrupted system call" .
An asynchronous signal (such as
.Dv SIGINT
or
.Dv SIGQUIT )
was caught by the thread during the execution of an interruptible
function.
If the signal handler performs a normal return, the
interrupted function call will seem to have returned the error condition.
.It Er 5 EIO Em "Input/output error" .
Some physical input or output error occurred.
This error will not be reported until a subsequent operation on the same file
descriptor and may be lost (overwritten) by any subsequent errors.
.It Er 6 ENXIO Em "Device not configured" .
Input or output on a special file referred to a device that did not
exist, or made a request beyond the limits of the device.
This error may also occur when, for example, a tape drive is not online or
no disk pack is loaded on a drive.
.It Er 7 E2BIG Em "Argument list too long" .
The number of bytes used for the argument and environment
list of the new process exceeded the limit
.Dv ARG_MAX .
.It Er 8 ENOEXEC Em "Exec format error" .
A request was made to execute a file that, although it has the appropriate
permissions, was not in the format required for an executable file.
.It Er 9 EBADF Em "Bad file descriptor" .
A file descriptor argument was out of range, referred to no open file,
or a read (write) request was made to a file that was only open for
writing (reading).
.It Er 10 ECHILD Em "\&No child processes" .
A
.Xr wait 2
or
.Xr waitpid 2
function was executed by a process that had no existing or unwaited-for
child processes.
.It Er 11 EDEADLK Em "Resource deadlock avoided" .
An attempt was made to lock a system resource that
would have resulted in a deadlock situation.
.It Er 12 ENOMEM Em "Cannot allocate memory" .
The new process image required more memory than was allowed by the hardware
or by system-imposed memory management constraints.
A lack of swap space is normally temporary; however, a lack of core is not.
Soft limits may be increased to their corresponding hard limits.
.It Er 13 EACCES Em "Permission denied" .
An attempt was made to access a file in a way forbidden
by its file access permissions.
.It Er 14 EFAULT Em "Bad address" .
The system detected an invalid address in attempting to
use an argument of a call.
.It Er 15 ENOTBLK Em "Block device required" .
A block device operation was attempted on a non-block device or file.
.It Er 16 EBUSY Em "Device busy" .
An attempt to use a system resource which was in use at the time
in a manner which would have conflicted with the request.
.It Er 17 EEXIST Em "File exists" .
An existing file was mentioned in an inappropriate context,
for instance, as the new link name in a
.Xr link 2
function.
.It Er 18 EXDEV Em "Cross-device link" .
A hard link to a file on another file system was attempted.
.It Er 19 ENODEV Em "Operation not supported by device" .
An attempt was made to apply an inappropriate function to a device,
for example, trying to read a write-only device such as a printer.
.It Er 20 ENOTDIR Em "Not a directory" .
A component of the specified pathname existed, but it was
not a directory, when a directory was expected.
.It Er 21 EISDIR Em "Is a directory" .
An attempt was made to open a directory with write mode specified.
.It Er 22 EINVAL Em "Invalid argument" .
Some invalid argument was supplied.
(For example, specifying an undefined signal to a
.Xr signal 3
or
.Xr kill 2
function).
.It Er 23 ENFILE Em "Too many open files in system" .
Maximum number of file descriptors allowable on the system
has been reached and a request for an open cannot be satisfied
until at least one has been closed.
The
.Xr sysctl 3
variable
.Va kern.maxfiles
contains the current limit.
.It Er 24 EMFILE Em "Too many open files" .
The maximum number of file descriptors allowable for this process
has been reached and a request for an open cannot be satisfied
until at least one has been closed.
.Xr getdtablesize 3
will obtain the current limit.
.It Er 25 ENOTTY Em "Inappropriate ioctl for device" .
A control function (see
.Xr ioctl 2 )
was attempted for a file or
special device for which the operation was inappropriate.
.It Er 26 ETXTBSY Em "Text file busy" .
An attempt was made either to execute a pure procedure (shared text)
file which was open for writing by another process,
or to open with write access a pure procedure file that is currently
being executed.
.It Er 27 EFBIG Em "File too large" .
The size of a file exceeded the maximum.
(The system-wide maximum file size is 2**63 bytes.
Each file system may impose a lower limit for files contained within it.)
.It Er 28 ENOSPC Em "\&No space left on device" .
A
.Xr write 2
to an ordinary file, the creation of a directory or symbolic link,
or the creation of a directory entry failed because no more disk
blocks were available on the file system, or the allocation of an
inode for a newly created file failed because no more inodes were
available on the file system.
.It Er 29 ESPIPE Em "Illegal seek" .
An
.Xr lseek 2
function was issued on a socket, pipe or FIFO.
.It Er 30 EROFS Em "Read-only file system" .
An attempt was made to modify a file or create a directory
on a file system that was read-only at the time.
.It Er 31 EMLINK Em "Too many links" .
The maximum allowable number of hard links to a single file has been
exceeded (see
.Xr pathconf 2
for how to obtain this value).
.It Er 32 EPIPE Em "Broken pipe" .
A write on a pipe, socket or FIFO
for which there is no process to read the data.
.It Er 33 EDOM Em "Numerical argument out of domain" .
A numerical input argument was outside the defined domain of
the mathematical function.
.It Er 34 ERANGE Em "Result too large" .
A result of the function was too large to fit in the
available space (perhaps exceeded precision).
.It Er 35 EAGAIN Em "Resource temporarily unavailable" .
This is a temporary condition and later calls to the
same routine may complete normally.
.It Er 36 EINPROGRESS Em "Operation now in progress" .
An operation that takes a long time to complete (such as a
.Xr connect 2 )
was attempted on a non-blocking object (see
.Xr fcntl 2 ) .
.It Er 37 EALREADY Em "Operation already in progress" .
An operation was attempted on a non-blocking object that already
had an operation in progress.
.It Er 38 ENOTSOCK Em "Socket operation on non-socket" .
Self-explanatory.
.It Er 39 EDESTADDRREQ Em "Destination address required" .
A required address was omitted from an operation on a socket.
.It Er 40 EMSGSIZE Em "Message too long" .
A message sent on a socket was larger than the internal message buffer
or some other network limit.
.It Er 41 EPROTOTYPE Em "Protocol wrong type for socket" .
A protocol was specified that does not support the semantics of the
socket type requested.
For example, you cannot use the Internet UDP protocol with type
.Dv SOCK_STREAM .
.It Er 42 ENOPROTOOPT Em "Protocol not available" .
A bad option or level was specified in a
.Xr getsockopt 2
or
.Xr setsockopt 2
call.
.It Er 43 EPROTONOSUPPORT Em "Protocol not supported" .
The protocol has not been configured into the
system or no implementation for it exists.
.It Er 44 ESOCKTNOSUPPORT Em "Socket type not supported" .
The support for the socket type has not been configured into the
system or no implementation for it exists.
.It Er 45 EOPNOTSUPP Em "Operation not supported" .
The attempted operation is not supported for the type of object referenced.
Usually this occurs when a file descriptor refers to a file or socket
that cannot support this operation, for example, trying to
.Em accept
a connection on a datagram socket.
.It Er 46 EPFNOSUPPORT Em "Protocol family not supported" .
The protocol family has not been configured into the
system or no implementation for it exists.
.It Er 47 EAFNOSUPPORT Em "Address family not supported by protocol family" .
An address incompatible with the requested protocol was used.
For example, you shouldn't necessarily expect to be able to use
NS addresses with Internet protocols.
.It Er 48 EADDRINUSE Em "Address already in use" .
Only one usage of each address is normally permitted.
.It Er 49 EADDRNOTAVAIL Em "Can't assign requested address" .
Normally results from an attempt to create a socket with an
address not on this machine.
.It Er 50 ENETDOWN Em "Network is down" .
A socket operation encountered a dead network.
.It Er 51 ENETUNREACH Em "Network is unreachable" .
A socket operation was attempted to an unreachable network.
.It Er 52 ENETRESET Em "Network dropped connection on reset" .
The host you were connected to crashed and rebooted.
.It Er 53 ECONNABORTED Em "Software caused connection abort" .
A connection abort was caused internal to your host machine.
.It Er 54 ECONNRESET Em "Connection reset by peer" .
A connection was forcibly closed by a peer.
This normally results from a loss of the connection on the remote socket
due to a timeout or a reboot.
.It Er 55 ENOBUFS Em "\&No buffer space available" .
An operation on a socket or pipe was not performed because
the system lacked sufficient buffer space or because a queue was full.
.It Er 56 EISCONN Em "Socket is already connected" .
A
.Xr connect 2
request was made on an already connected socket; or, a
.Xr sendto 2
or
.Xr sendmsg 2
request on a connected socket specified a destination
when already connected.
.It Er 57 ENOTCONN Em "Socket is not connected" .
A request to send or receive data was disallowed because
the socket was not connected and (when sending on a datagram socket)
no address was supplied.
.It Er 58 ESHUTDOWN Em "Can't send after socket shutdown" .
A request to send data was disallowed because the socket
had already been shut down with a previous
.Xr shutdown 2
call.
.It Er 59 ETOOMANYREFS Em "Too many references: can't splice" .
Not used in
.Ox .
.It Er 60 ETIMEDOUT Em "Operation timed out" .
A
.Xr connect 2
or
.Xr send 2
request failed because the connected party did not
properly respond after a period of time.
(The timeout period is dependent on the communication protocol.)
.It Er 61 ECONNREFUSED Em "Connection refused" .
No connection could be made because the target machine actively
refused it.
This usually results from trying to connect to a service that is
inactive on the foreign host.
.It Er 62 ELOOP Em "Too many levels of symbolic links" .
A path name lookup involved more than 32
.Pq Dv SYMLOOP_MAX
symbolic links.
.It Er 63 ENAMETOOLONG Em "File name too long" .
A component of a pathname exceeded 255
.Pq Dv NAME_MAX
characters, or an entire pathname (including the terminating NUL)
exceeded 1024
.Pq Dv PATH_MAX
bytes.
.It Er 64 EHOSTDOWN Em "Host is down" .
A socket operation failed because the destination host was down.
.It Er 65 EHOSTUNREACH Em "\&No route to host" .
A socket operation was attempted to an unreachable host.
.It Er 66 ENOTEMPTY Em "Directory not empty" .
A directory with entries other than
.Ql \&.
and
.Ql \&..
was supplied to a remove directory or rename call.
.It Er 67 EPROCLIM Em "Too many processes" .
.It Er 68 EUSERS Em "Too many users" .
The quota system ran out of table entries.
.It Er 69 EDQUOT Em "Disk quota exceeded" .
A
.Xr write 2
to an ordinary file, the creation of a directory or symbolic link,
or the creation of a directory entry failed because the user's quota
of disk blocks was exhausted, or the allocation of an inode for a newly
created file failed because the user's quota of inodes was exhausted.
.It Er 70 ESTALE Em "Stale NFS file handle" .
An attempt was made to access an open file on an NFS filesystem which
is now unavailable as referenced by the file descriptor.
This may indicate the file was deleted on the NFS server or some other
catastrophic event occurred.
.It Er 72 EBADRPC Em "RPC struct is bad" .
Exchange of
.Xr rpc 3
information was unsuccessful.
.It Er 73 ERPCMISMATCH Em "RPC version wrong" .
The version of
.Xr rpc 3
on the remote peer is not compatible with the local version.
.It Er 74 EPROGUNAVAIL Em "RPC program not available" .
The requested
.Xr rpc 3
program is not registered on the remote host.
.It Er 75 EPROGMISMATCH Em "Program version wrong" .
The requested version of the
.Xr rpc 3
program is not available on the remote host.
.It Er 76 EPROCUNAVAIL Em "Bad procedure for program" .
An
.Xr rpc 3
call was attempted for a procedure which doesn't exist
in the remote program.
.It Er 77 ENOLCK Em "\&No locks available" .
A system-imposed limit on the number of simultaneous file
locks was reached.
.It Er 78 ENOSYS Em "Function not implemented" .
Attempted a system call that is not available on this
system.
.It Er 79 EFTYPE Em "Inappropriate file type or format" .
The file contains invalid data or set to invalid modes.
.It Er 80 EAUTH Em "Authentication error" .
Attempted to use an invalid authentication ticket to mount a
NFS filesystem.
.It Er 81 ENEEDAUTH Em "Need authenticator" .
An authentication ticket must be obtained before the given
NFS filesystem may be mounted.
.It Er 82 EIPSEC Em "IPsec processing failure" .
IPsec subsystem error.
Not used in
.Ox .
.It Er 83 ENOATTR Em "Attribute not found" .
A UFS Extended Attribute is not found for the specified pathname.
.It Er 84 EILSEQ Em "Illegal byte sequence" .
An illegal sequence of bytes was used when using wide characters.
.It Er 85 ENOMEDIUM Em "\&No medium found" .
Attempted to use a removable media device with no medium present.
.It Er 86 EMEDIUMTYPE Em "Wrong medium type" .
Attempted to use a removable media device with incorrect or incompatible
medium.
.It Er 87 EOVERFLOW Em "Value too large to be stored in data type" .
A numerical result of the function was too large to be stored in the
caller provided space.
.It Er 88 ECANCELED Em "Operation canceled" .
The requested operation was canceled.
.It Er 89 EIDRM Em "Identifier removed" .
An IPC identifier was removed while the current thread was waiting on it.
.It Er 90 ENOMSG Em "\&No message of desired type".
An IPC message queue does not contain a message of the desired type,
or a message catalog does not contain the requested message.
.It Er 91 ENOTSUP Em "Not supported" .
The operation has requested an unsupported value.
.El
.Sh DEFINITIONS
.Bl -tag -width Ds
.It Process
A process is a collection of one or more threads,
plus the resources shared by those threads such as process ID,
address space,
user IDs and group IDs,
and root directory and current working directory.
.It Process ID
Each active process in the system is uniquely identified by a non-negative
integer called a process ID.
The range of this ID is from 0 to 99999.
.It Parent Process ID
A new process is created by a currently active process; (see
.Xr fork 2 ) .
The parent process ID of a process is initially the process ID of its creator.
If the creating process exits,
the parent process ID of each child is set to the ID of a system process,
.Xr init 8 .
.It Process Group
Each active process is a member of a process group that is identified by
a non-negative integer called the process group ID.
This is the process ID of the group leader.
This grouping permits the signaling of related processes (see
.Xr termios 4 )
and the job control mechanisms of
.Xr ksh 1
and
.Xr csh 1 .
.It Session
A session is a set of one or more process groups.
A session is created by a successful call to
.Xr setsid 2 ,
which causes the caller to become the only member of the only process
group in the new session.
.It Session Leader
A process that has created a new session by a successful call to
.Xr setsid 2 ,
is known as a session leader.
Only a session leader may acquire a terminal as its controlling terminal (see
.Xr termios 4 ) .
.It Controlling Process
A session leader with a controlling terminal is a controlling process.
.It Controlling Terminal
A terminal that is associated with a session is known as the controlling
terminal for that session and its members.
.It Terminal Process Group ID
A terminal may be acquired by a session leader as its controlling terminal.
Once a terminal is associated with a session, any of the process groups
within the session may be placed into the foreground by setting
the terminal process group ID to the ID of the process group.
This facility is used
to arbitrate between multiple jobs contending for the same terminal;
(see
.Xr ksh 1 ,
.Xr csh 1 ,
and
.Xr tty 4 ) .
.It Orphaned Process Group
A process group is considered to be
.Em orphaned
if it is not under the control of a job control shell.
More precisely, a process group is orphaned
when none of its members has a parent process that is in the same session
as the group,
but is in a different process group.
Note that when a process exits, the parent process for its children
is changed to be
.Xr init 8 ,
which is in a separate session.
Not all members of an orphaned process group are necessarily orphaned
processes (those whose creating process has exited).
The process group of a session leader is orphaned by definition.
.It Thread
A thread is a preemptively scheduled flow of control within a process,
with its own set of register values,
floating point environment,
thread ID,
signal mask,
pending signal set,
alternate signal stack,
thread control block address,
resource utilization,
errno variable location,
and values for thread-specific keys.
A process initially has just one thread,
a duplicate of the thread in the parent process that created this process.
.It Real User ID and Real Group ID
Each user on the system is identified by a positive integer
termed the real user ID.
.Pp
Each user is also a member of one or more groups.
One of these groups is distinguished from others and
used in implementing accounting facilities.
The positive integer corresponding to this distinguished group is termed
the real group ID.
.Pp
All processes have a real user ID and real group ID.
These are initialized from the equivalent attributes
of the process that created it.
.It "Effective User ID, Effective Group ID, and Group Access List"
Access to system resources is governed by two values:
the effective user ID, and the group access list.
The first member of the group access list is also known as the
effective group ID.
(In POSIX.1, the group access list is known as the set of supplementary
group IDs, and it is unspecified whether the effective group ID is
a member of the list.)
.Pp
The effective user ID and effective group ID are initially the
process's real user ID and real group ID respectively.
Either may be modified through execution of a set-user-ID or set-group-ID
file (possibly by one of its ancestors) (see
.Xr execve 2 ) .
By convention, the effective group ID (the first member of the group access
list) is duplicated, so that the execution of a set-group-ID program
does not result in the loss of the original (real) group ID.
.Pp
The group access list is a set of group IDs
used only in determining resource accessibility.
Access checks are performed as described below in
.Dq File Access Permissions .
.It Saved Set User ID and Saved Set Group ID
When a process executes a new file, the effective user ID is set
to the owner of the file if the file is set-user-ID, and the effective
group ID (first element of the group access list) is set to the group
of the file if the file is set-group-ID.
The effective user ID of the process is then recorded as the saved set-user-ID,
and the effective group ID of the process is recorded as the saved set-group-ID.
These values may be used to regain those values as the effective user
or group ID after reverting to the real ID (see
.Xr setuid 2 ) .
(In POSIX.1, the saved set-user-ID and saved set-group-ID are optional,
and are used in setuid and setgid, but this does not work as desired
for the superuser.)
.It Superuser
A process is recognized as a
.Em superuser
process and is granted special privileges if its effective user ID is 0.
.It Special Processes
The processes with process IDs of 0 and 1 are special.
Process 0 is the scheduler.
Process 1 is the initialization process
.Xr init 8 ,
and is the ancestor of every other process in the system.
It is used to control the process structure.
.It Descriptor
An integer assigned by the system when a file is referenced
by
.Xr open 2
or
.Xr dup 2 ,
or when a socket is created by
.Xr pipe 2 ,
.Xr socket 2
or
.Xr socketpair 2 ,
which uniquely identifies an access path to that file or socket from
a given process or any of its children.
.It File Name
Names consisting of up to 255
.Pq Dv NAME_MAX
characters may be used to name
an ordinary file, special file, or directory.
.Pp
These characters may be arbitrary eight-bit values,
excluding 0 (NUL) and the ASCII code for
.Ql \&/
(slash).
.Pp
Note that it is generally unwise to use
.Ql \&* ,
.Ql \&? ,
.Ql \&[
or
.Ql \&]
as part of
file names because of the special meaning attached to these characters
by the shell.
.Pp
Note also that
.Dv NAME_MAX
is an upper limit fixed by the kernel, meant to be used for sizing buffers.
Some filesystems may have additional restrictions.
These can be queried using
.Xr pathconf 2
and
.Xr fpathconf 2 .
.It Path Name
A path name is a NUL-terminated
character string starting with an
optional slash
.Ql \&/ ,
followed by zero or more directory names separated
by slashes, optionally followed by a file name.
The total length of a path name must be less than 1024
.Pq Dv PATH_MAX
characters.
Additional restrictions may apply, depending upon the filesystem, to be
queried with
.Xr pathconf 2
or
.Xr fpathconf 2
if needed.
.Pp
If a path name begins with a slash, the path search begins at the
.Em root
directory.
Otherwise, the search begins from the current working directory.
A slash by itself names the root directory.
An empty pathname is invalid.
.It Directory
A directory is a special type of file that contains entries
that are references to other files.
Directory entries are called links.
By convention, a directory contains at least two links,
.Ql \&.
and
.Ql \&.. ,
referred to as
.Em dot
and
.Em dot-dot
respectively.
Dot refers to the directory itself and dot-dot refers to its
parent directory.
.It "Root Directory and Current Working Directory"
Each process has associated with it a concept of a root directory
and a current working directory for the purpose of resolving path
name searches.
A process's root directory need not be the root directory of
the root file system.
.It File Access Permissions
Every file in the file system has a set of access permissions.
These permissions are used in determining whether a process
may perform a requested operation on the file (such as opening
a file for writing).
Access permissions are established at the time a file is created.
They may be changed at some later time through the
.Xr chmod 2
call.
.Pp
File access is broken down according to whether a file may be: read,
written, or executed.
Directory files use the execute permission to control if the directory
may be searched.
.Pp
File access permissions are interpreted by the system as
they apply to three different classes of users: the owner
of the file, those users in the file's group, anyone else.
Every file has an independent set of access permissions for
each of these classes.
When an access check is made, the system decides if permission should be
granted by checking the access information applicable to the caller.
.Pp
Read, write, and execute/search permissions on
a file are granted to a process if:
.Pp
The process's effective user ID is that of the superuser.
(Note: even the superuser cannot execute a non-executable file.)
.Pp
The process's effective user ID matches the user ID of the owner
of the file and the owner permissions allow the access.
.Pp
The process's effective user ID does not match the user ID of the
owner of the file, and either the process's effective
group ID matches the group ID
of the file, or the group ID of the file is in
the process's group access list,
and the group permissions allow the access.
.Pp
Neither the effective user ID nor effective group ID
and group access list of the process
match the corresponding user ID and group ID of the file,
but the permissions for
.Dq other users
allow access.
.Pp
Otherwise, permission is denied.
.It Sockets and Address Families
A socket is an endpoint for communication between processes.
Each socket has queues for sending and receiving data.
.Pp
Sockets are typed according to their communications properties.
These properties include whether messages sent and received
at a socket require the name of the partner, whether communication
is reliable, the format used in naming message recipients, etc.
.Pp
Each instance of the system supports some
collection of socket types; consult
.Xr socket 2
for more information about the types available and
their properties.
.Pp
Each instance of the system supports some number of sets of
communications protocols.
Each protocol set supports addresses of a certain format.
An Address Family is the set of addresses for a specific group of protocols.
Each socket has an address chosen from the address family in which the
socket was created.
.El
.Sh SEE ALSO
.Xr pledge 2 ,
.Xr intro 3 ,
.Xr perror 3
.Sh HISTORY
An
.Nm
manual page appeared in
.At v6 .
@


1.63
log
@The range of PIDs has changed, and always included zero.

Based on diff from Michal Mazurek (akfaew (at) jasminek.net)
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.62 2015/12/01 01:34:16 mmcc Exp $
d33 1
a33 1
.Dd $Mdocdate: December 1 2015 $
d45 3
d731 1
@


1.62
log
@Mention ksh along with csh when job control is discussed.   ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.61 2015/11/07 22:57:52 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: November 7 2015 $
d437 1
a437 1
The range of this ID is from 1 to 32766.
@


1.61
log
@add missing NAME entries;
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.60 2015/10/24 10:42:02 bluhm Exp $
d33 1
a33 1
.Dd $Mdocdate: October 24 2015 $
d452 2
d480 2
a481 1
.Xr csh 1
@


1.60
log
@Unify all the errno names in
- include comment
- libc errlist
- nls C msg
- man page
OK tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.59 2015/07/28 22:48:31 deraadt Exp $
d33 1
a33 1
.Dd $Mdocdate: July 28 2015 $
d37 2
a38 1
.Nm intro
@


1.59
log
@ARG_MAX is the standard name (not NCARGS); probab[l]y guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.58 2015/01/19 21:29:38 millert Exp $
d33 1
a33 1
.Dd $Mdocdate: January 19 2015 $
d352 1
a352 1
.It Er 69 EDQUOT Em "Disc quota exceeded" .
d372 1
a372 1
.It Er 74 EPROGUNAVAIL Em "RPC prog. not avail" .
@


1.58
log
@Talk about thread-local errno and do not mention "extern int errno".
Also correct the string version of error 0.  OK guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.57 2015/01/19 13:59:16 millert Exp $
d112 1
a112 3
.Dv NCARGS
(specified in
.In sys/param.h ) .
@


1.57
log
@Back out changes unrelated to the ENAMETOOLONG diff.
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.55 2015/01/01 07:27:34 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 1 2015 $
d49 8
a56 9
Nearly all of the system calls provide an error number in the external
variable
.Va errno ,
which is currently defined as:
.Pp
.Dl extern int errno;
.Pp
Portable applications must not depend on this definition, and should only
use
d59 3
a61 1
.In errno.h .
d80 1
a80 1
.It Er 0 Em "Error 0" .
@


1.56
log
@Remove a pasto introduced in the last commit, spotted by schwarze@@
@
text
@d49 9
a57 9
Nearly all of the system calls provide an error number via the identifier
.Dv errno ,
which expands to an addressable location of type
.Vt int .
The address of
.Va errno
in each thread is guaranteed to be unique for the lifetime of thread
thread.
Applications must use
d60 1
a60 3
.In errno.h
and not attempt to use a custom definition.
.Pp
d79 1
a79 1
.It Er 0 Em "Undefined error: 0" .
@


1.55
log
@Get rid of .Tn; from Kaspars at Bankovskis dot net, tweaked by me.
While here, stop calling the Internet "the ARPA Internet".
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.54 2015/01/01 07:05:24 schwarze Exp $
d49 9
a57 9
Nearly all of the system calls provide an error number in the external
variable
.Va errno ,
which is currently defined as:
.Pp
.Dl extern int errno;
.Pp
Portable applications must not depend on this definition, and should only
use
d60 3
a62 1
.In errno.h .
d81 1
a81 1
.It Er 0 Em "Error 0" .
d336 1
a336 1
A component of a path name exceeded 255
d338 4
a341 3
characters, or an entire path name exceeded 1023
.Pq Dv PATH_MAX Ns -1
characters.
@


1.54
log
@Even though i personally consider 8-bit-characters in filenames unwise,
technically, filenames are not restricted to ASCII.
Patch from Kaspars at Bankovskis dot net, no opposition when shown on tech@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.53 2014/12/10 07:18:44 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: December 10 2014 $
d209 1
a209 2
function was issued on a socket, pipe or
.Tn FIFO .
d219 1
a219 2
A write on a pipe, socket or
.Tn FIFO
d248 1
a248 5
For example, you cannot use the
.Tn ARPA
Internet
.Tn UDP
protocol with type
d274 1
a274 4
.Tn NS
addresses with
.Tn ARPA
Internet protocols.
d360 4
a363 7
An attempt was made to access an open file (on an
.Tn NFS
filesystem) which is now unavailable as referenced by the file descriptor.
This may indicate the file was deleted on the
.Tn NFS
server or some
other catastrophic event occurred.
d366 1
a366 1
.Tn RPC
d370 1
a370 1
.Tn RPC
d373 3
a375 1
The requested program is not registered on the remote host.
d377 3
a379 2
The requested version of the program is not available on the remote host
.Pq Tn RPC .
d382 1
a382 1
.Tn RPC
d395 1
a395 2
.Tn NFS
filesystem.
d398 1
a398 2
.Tn NFS
filesystem may be mounted.
d603 1
a603 1
.Pq Dv NAME_MAX
d611 1
a611 2
A path name is a
.Tn NUL Ns -terminated
@


1.53
log
@Prefer .In and .Rv -std
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.52 2014/11/15 14:41:02 bentley Exp $
d33 1
a33 1
.Dd $Mdocdate: November 15 2014 $
d598 2
a599 6
These characters may be selected from the set of all
.Tn ASCII
character
excluding 0 (NUL) and the
.Tn ASCII
code for
@


1.52
log
@Reduce instances of `` '' in manuals.

troff displays these as typographic quotes, but nroff implementations
almost always print them literally, which rarely has the intended effect
with modern fonts, even in stock xterm.

These uses of `` '' can be replaced either with more semantic alternatives
or with Dq, which prints typographic quotes in a UTF-8 locale (but will
automatically fall back to `` '' in an ASCII locale).

improvements and ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.51 2014/05/30 04:42:07 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: May 30 2014 $
d40 1
a40 1
.Fd #include <errno.h>
@


1.51
log
@Add definitions for Process and (finally!) Thread
Tweak some error descriptions based on that
Completely reword ETXTBSY description based on a suggestion from millert@@

tweaks and oks jmc@@ millert@@ sobrado@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.50 2014/05/02 20:20:12 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: May 2 2014 $
d553 2
a554 1
Access checks are performed as described below in ``File Access Permissions''.
d712 3
a714 1
but the permissions for ``other users'' allow access.
@


1.50
log
@No really, pid 2 isn't special
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.49 2014/05/02 09:50:32 jca Exp $
d95 1
a95 1
was caught by the process during the execution of an interruptible
d190 4
a193 5
The new process was a pure procedure (shared text) file
which was open for writing by another process, or
while the pure procedure file was being executed an
.Xr open 2
call requested write access.
d429 1
a429 1
An IPC identifier was removed while the current process was waiting on it.
d438 6
d506 14
@


1.49
log
@The page daemon no longer has a fixed PID.  ok kettenis@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.48 2014/01/21 03:15:45 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 21 2014 $
d553 1
a553 1
The processes with process IDs of 0, 1, and 2 are special.
@


1.48
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.47 2013/09/30 12:02:35 millert Exp $
d33 1
a33 1
.Dd $Mdocdate: September 30 2013 $
a558 1
Process 2 is the paging daemon.
@


1.47
log
@Use PATH_MAX, NAME_MAX and LOGIN_NAME_MAX not MAXPATHNAMELEN,
MAXNAMLEN or MAXLOGNAME where possible.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.46 2011/01/21 08:20:17 lum Exp $
d33 1
a33 1
.Dd $Mdocdate: January 21 2011 $
d60 1
a60 1
.Aq Pa errno.h .
d77 1
a77 1
.Aq Pa sys/errno.h .
d113 1
a113 1
.Aq Pa sys/param.h ) .
@


1.46
log
@over written -> overwritten
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.45 2009/11/24 18:40:53 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: November 24 2009 $
d345 1
a345 1
.Pq Dv MAXNAMLEN
d347 1
a347 1
.Pq Dv MAXPATHLEN Ns -1
d575 1
a575 1
.Pq Dv MAXNAMLEN
d599 1
a599 1
.Pq Dv MAXNAMLEN
d615 1
a615 1
.Pq Dv MAXPATHLEN
@


1.45
log
@Update the ENOTSUP summary and description.
Pointed out by Alan Bueno and jmc@@

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.44 2009/10/26 21:09:33 jasper Exp $
d33 1
a33 1
.Dd $Mdocdate: October 26 2009 $
d102 1
a102 1
descriptor and may be lost (over written) by any subsequent errors.
@


1.44
log
@add ENOTSUP and bump libc minor

discussed with a few
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.43 2007/11/05 08:21:58 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: November 5 2007 $
d434 2
a435 2
.It Er 91 ENOTSUP Em "Operation not supported" .
The attempted operation is not supported for the type of object referenced.
@


1.43
log
@- sync the error descriptions w/ those in errlist
- escape "No" incase groff thinks it's a macro call
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.42 2007/09/08 18:56:26 otto Exp $
d33 1
a33 1
.Dd $Mdocdate: September 8 2007 $
d434 2
@


1.42
log
@it's MAXNAMLEN, not MAXNAMELEN; spotted by Igor Zinovi.
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.41 2007/09/03 14:37:52 millert Exp $
d33 1
a33 1
.Dd $Mdocdate: September 3 2007 $
d85 1
a85 1
.It Er 2 ENOENT Em "No such file or directory" .
d88 1
a88 1
.It Er 3 ESRCH Em "No such process" .
d90 1
a90 1
.It Er 4 EINTR Em "Interrupted function call" .
d103 1
a103 1
.It Er 6 ENXIO Em "\&No such device or address" .
d108 1
a108 1
.It Er 7 E2BIG Em "Arg list too long" .
d142 1
a142 1
.It Er 15 ENOTBLK Em "Not a block device" .
d152 1
a152 1
.It Er 18 EXDEV Em "Improper link" .
d199 1
a199 1
.It Er 28 ENOSPC Em "Device out of space" .
d227 1
a227 1
.It Er 34 ERANGE Em "Result out of range" .
d287 1
a287 1
.It Er 49 EADDRNOTAVAIL Em "Cannot assign requested address" .
d318 1
a318 1
.It Er 58 ESHUTDOWN Em "Cannot send after socket shutdown" .
d351 1
a351 1
.It Er 65 EHOSTUNREACH Em "No route to host" .
d395 1
a395 1
.It Er 77 ENOLCK Em "No locks available" .
d419 1
a419 1
.It Er 85 ENOMEDIUM Em "No medium found" .
d424 1
a424 1
.It Er 87 EOVERFLOW Em "Conversion overflow" .
d431 1
a431 1
.It Er 90 ENOMSG Em "No message of the desired type".
@


1.41
log
@Add ENOMSG and EIDRM; from jsg@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.40 2007/05/31 19:19:32 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d345 1
a345 1
.Pq Dv MAXNAMELEN
d573 1
a573 1
.Pq Dv MAXNAMELEN
d597 1
a597 1
.Pq Dv MAXNAMELEN
@


1.40
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.39 2007/05/21 21:07:33 jasper Exp $
d33 1
a33 1
.Dd $Mdocdate$
d429 5
@


1.39
log
@add EOVERFLOW and ECANCELED here too.

reminded and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.38 2006/09/15 20:40:23 otto Exp $
d33 1
a33 1
.Dd December 11, 1993
@


1.38
log
@better desciption of ESRCH; prompted by jmc@@; ok miod@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.37 2006/08/04 21:35:51 beck Exp $
d424 5
@


1.37
log
@Add ENOMEDIUM and EMEDIUMTYPE to report medium errors to userland programs
when using removable media devices, along with changes to scsi_base to
detect such cases in tapes other devices. This makes tar, dd, and friends
report a semi useful error message instead of nonsense when there is nothing
in the device.

Includes libc minor bump, and will require the corresponding sets change.

ok krw@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.36 2006/08/03 23:20:32 jmc Exp $
d89 1
a89 2
No process could be found corresponding to that specified by the given
process ID.
@


1.36
log
@tweak;
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.35 2006/08/03 21:02:07 beck Exp $
d420 5
@


1.35
log
@EILSEQ is 84 not 83.
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.34 2006/08/03 20:49:44 beck Exp $
d419 1
a419 1
An Illegal sequence of bytes was used when using wide characters.
@


1.34
log
@Document EILSEQ - forgotten by the wide character folks when they added
it to errno.
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.33 2005/08/18 15:18:19 jaredy Exp $
d418 1
a418 1
.It Er 83 EILSEQ Em "Illegal byte sequence" .
@


1.33
log
@Update a few error descriptions w.r.t. obtaining the limits
that cause the errors to reality.

ok millert, jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.32 2005/03/22 15:48:30 hshoexer Exp $
d418 2
@


1.32
log
@add missing "of" to make this a real sentence.

ok henning mpf miod jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.31 2005/01/04 15:54:06 jmc Exp $
d174 5
d180 3
a182 2
(As released, the limit on the number of
open files per process is 64.)
d217 4
a220 2
Maximum allowable hard links to a single file has been exceeded (limit
of 32767 hard links per file).
d341 3
a343 1
A path name lookup involved more than 32 symbolic links.
@


1.31
log
@consistency fix;
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.30 2004/03/16 08:46:46 tedu Exp $
d498 1
a498 1
file (possibly by one its ancestors) (see
@


1.30
log
@errno should only be gotten from <errno.h>.  ok help jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.29 2003/12/04 14:32:09 otto Exp $
a668 1
.Pp
@


1.29
log
@Better description of ERANGE.

ok jmc@@ henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.28 2003/11/25 21:45:32 jmc Exp $
d52 1
a52 1
which is defined as:
d56 5
@


1.28
log
@empty pathname is invalid; from Akinori Saitoh;
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.27 2003/06/02 20:18:39 millert Exp $
d215 2
a216 2
.It Er 34 ERANGE Em "Numerical result out of range" .
A numerical result of the function was too large to fit in the
@


1.27
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.26 2003/02/25 08:26:38 jmc Exp $
d596 1
a596 1
An empty pathname refers to the current directory.
@


1.26
log
@typos;

intro(2): help deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.25 2002/08/11 16:50:26 aaron Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.25
log
@Sync limits described by EFBIG and ELOOP with current reality; from NetBSD.
miod@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.24 2002/06/16 04:40:42 todd Exp $
d171 1
a171 1
has been reached and a requests for an open cannot be satisfied
d207 1
a207 1
An attempt was made to modify a file or directory was made
d307 1
a307 1
An request to send or receive data was disallowed because
d402 1
a402 1
IPsec subsystem error,
@


1.24
log
@match man page to source; from Jean-Francois Brousseau <krapht@@secureops.com>
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.23 2002/05/01 13:36:18 drahn Exp $
d190 3
a192 1
The size of a file exceeded the maximum (about 2.1E9 bytes).
d332 1
a332 1
A path name lookup involved more than 8 symbolic links.
@


1.23
log
@Sync EA with FreeBSD, mostly addition of new ENOATTR errno.
ok millert@@, art@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.22 2002/04/30 16:32:58 drahn Exp $
d144 1
a144 1
.It Er 16 EBUSY Em "Resource busy" .
d400 1
a400 1
IPsec subsystem error, 
@


1.22
log
@Some errno entries were not documented or added to _sys_errlist[] when
they were added to errno.h. Add the missing entries. ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.21 2001/08/22 12:15:46 heko Exp $
d403 2
@


1.21
log
@"This section" and variants ==> 'The manual pages in section x'
in intro manual pages to hopefully confuse users a little bit less
aaron@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.19 2001/03/11 06:06:08 aaron Exp $
d399 4
@


1.20
log
@The .Os macro should not be used in the general text domain.
@
text
@d46 1
a46 1
This section provides an overview of the system calls,
@


1.19
log
@Cosmetic: Super-user -> Superuser
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.18 2001/03/11 05:02:29 aaron Exp $
d315 1
a315 1
.Os
@


1.18
log
@mdoc police.
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.17 2000/10/18 05:12:10 aaron Exp $
d511 1
a511 1
.It Super-user
@


1.17
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.16 2000/04/15 11:46:03 aaron Exp $
d58 1
a58 1
.Dl extern int errno
d60 2
a61 4
When a system call detects an error,
it returns an integer value
indicating failure (usually \-1)
and sets the variable
d64 2
a65 2
<This allows interpretation of the failure on receiving
a \-1 and to take action accordingly.>
d105 3
a107 5
exist, or
made a request beyond the limits of the device.
This error may also occur when, for example,
a tape drive is not online or no disk pack is
loaded on a drive.
d115 2
a116 4
A request was made to execute a file
that, although it has the appropriate permissions,
was not in the format required for an
executable file.
d134 1
a134 2
A lack of swap space is normally temporary; however,
a lack of core is not.
d153 1
a153 2
A hard link to a file on another file system
was attempted.
d155 2
a156 4
An attempt was made to apply an inappropriate
function to a device,
for example,
trying to read a write-only device such as a printer.
d174 2
a175 2
<As released, the limit on the number of
open files per process is 64.>
d194 5
a198 6
to an ordinary file, the creation of a
directory or symbolic link, or the creation of a directory
entry failed because no more disk blocks were available
on the file system, or the allocation of an inode for a newly
created file failed because no more inodes were available
on the file system.
d213 1
a213 2
for which there is no process
to read the data.
d215 2
a216 2
A numerical input argument was outside the defined domain of the mathematical
function.
d262 1
a262 2
that cannot support this operation,
for example, trying to
d334 1
a334 2
characters, or an entire
path name exceeded 1023
d353 4
a356 6
to an ordinary file, the creation of a
directory or symbolic link, or the creation of a directory
entry failed because the user's quota of disk blocks was
exhausted, or the allocation of an inode for a newly
created file failed because the user's quota of inodes
was exhausted.
d360 1
a360 2
filesystem)
which is now unavailable as referenced by the file descriptor.
d372 1
a372 2
on the remote peer is not compatible with
the local version.
d376 1
a376 2
The requested version of the program is not available
on the remote host
d517 2
a518 1
Process 0 is the scheduler.  Process 1 is the initialization process
d564 2
a565 2
Some filesystems may have additional restrictions.  These can be queried
using
d591 2
a592 2
A slash by itself names the root directory.  An empty
pathname refers to the current directory.
d596 2
a597 2
Directory entries are called links.  By convention, a directory
contains at least two links,
d605 3
a607 2
respectively.  Dot refers to the directory itself and
dot-dot refers to its parent directory.
d611 3
a613 2
name searches.  A process's root directory need not be the root
directory of the root file system.
d618 3
a620 3
a file for writing).  Access permissions are established at the
time a file is created.  They may be changed at some later time
through the
d625 3
a627 2
written, or executed.  Directory files use the execute
permission to control if the directory may be searched.
d633 3
a635 3
each of these classes.  When an access check is made, the system
decides if permission should be granted by checking the access
information applicable to the caller.
d640 2
a641 2
The process's effective user ID is that of the superuser. (Note:
even the superuser cannot execute a non-executable file.)
@


1.16
log
@- For consistency, `super-user' -> `superuser' in all cases.
- Some punctuation fixes.
- Some `id' -> `ID'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.15 1999/07/04 18:59:43 aaron Exp $
d98 2
a99 1
function. If the signal handler performs a normal return, the
d173 2
a174 2
Some invalid argument was supplied. (For example,
specifying an undefined signal to a
d216 1
a216 2
An attempt was made to modify a file or directory
was made
d236 1
a236 2
An operation that takes a long time to complete (such as
a
d252 2
a253 1
socket type requested. For example, you cannot use the
d302 2
a303 2
A connection was forcibly closed by a peer.  This normally
results from a loss of the connection on the remote socket
d311 1
a311 2
request was made on an already connected socket; or,
a
d335 2
a336 2
properly respond after a period of time.  (The timeout
period is dependent on the communication protocol.)
d339 3
a341 2
refused it.  This usually results from trying to connect
to a service that is inactive on the foreign host.
d423 2
a424 1
integer called a process ID.  The range of this ID is from 1 to 32766.
d434 3
a436 3
a non-negative integer called the process group ID.  This is the process
ID of the group leader.  This grouping permits the signaling of related
processes (see
d489 2
a490 2
used in implementing accounting facilities.  The positive
integer corresponding to this distinguished group is termed
d506 2
a507 2
process's real user ID and real group ID respectively.  Either
may be modified through execution of a set-user-ID or set-group-ID
d515 2
a516 2
used only in determining resource accessibility.  Access checks
are performed as described below in ``File Access Permissions''.
d691 5
a695 4
communications protocols.  Each protocol set supports addresses
of a certain format.  An Address Family is the set of addresses
for a specific group of protocols.  Each socket has an address
chosen from the address family in which the socket was created.
d702 1
a702 1
.Nm intro
@


1.15
log
@trash some old leftover macros and replace them with -mdoc macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.14 1999/07/02 19:50:51 deraadt Exp $
d528 1
a528 1
for the super-user.)
d531 1
a531 1
.Em super-user
d654 2
a655 2
The process's effective user ID is that of the super-user. (Note:
even the super-user cannot execute a non-executable file.)
@


1.14
log
@document more
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.13 1999/06/29 14:10:03 aaron Exp $
d199 1
a199 4
The size of a file exceeded the maximum (about
.if t 2\u\s-231\s+2\d
.if n 2.1E9
bytes).
@


1.13
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.12 1999/05/27 20:49:35 aaron Exp $
d330 3
d413 8
d426 1
a426 1
integer called a process ID.  The range of this ID is from 0 to 30000.
@


1.12
log
@more missing .El macros filled in
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.11 1999/05/27 14:22:19 aaron Exp $
d62 1
a62 1
indicating failure (usually -1)
d67 1
a67 1
a -1 and to take action accordingly.>
d87 1
a87 1
A component of a specified pathname did not exist, or the 
d365 1
a365 1
A 
d377 1
a377 1
which is now unavailable as referenced by the file descriptor.  
d379 2
a380 2
.Tn NFS 
server or some 
d394 1
a394 1
The requested version of the program is not available 
d403 1
a403 1
A system-imposed limit on the number of simultaneous file 
d406 1
a406 1
Attempted a system call that is not available on this 
d478 1
a478 1
Each user is also a member of one or more groups. 
d481 1
a481 1
integer corresponding to this distinguished group is termed 
d575 1
a575 1
.Xr pathconf 2 
d588 1
a588 1
characters.  
d627 1
a627 1
through the 
d629 1
a629 1
call. 
d633 1
a633 1
permission to control if the directory may be searched. 
d689 1
a689 1
.Xr perror 3 
@


1.11
log
@- add missing .El macro
- capitalization
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.10 1999/05/23 14:10:54 aaron Exp $
d686 1
@


1.10
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.9 1998/09/07 16:36:54 espie Exp $
d410 1
d413 1
a413 1
.It  Process ID .
d416 1
a416 1
.It  Parent process ID
d423 1
a423 1
.It  Process Group
d437 1
a437 1
.It Session leader
d443 1
a443 1
.It Controlling process
d445 1
a445 1
.It Controlling terminal
d448 1
a448 1
.It  "Terminal Process Group ID"
d459 1
a459 1
.It  "Orphaned Process Group"
d474 1
a474 1
.It "Real User ID and Real Group ID"
d487 1
a487 1
.It "Effective User Id, Effective Group Id, and Group Access List"
d508 1
a508 1
.It  "Saved Set User ID and Saved Set Group ID"
d521 1
a521 1
.It  Super-user
d525 1
a525 1
.It  Special Processes
d532 1
a532 1
.It  Descriptor
d545 1
a545 1
.It  File Name
d578 1
a578 1
.It  Path Name
d602 1
a602 1
.It  Directory
d621 1
a621 1
.It  File Access Permissions
d665 1
a665 1
.It  Sockets and Address Families
@


1.9
log
@
Nitpicking max filename length: add .Xr to pathconf/fpathconf.
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.8 1998/07/06 18:27:42 deraadt Exp $
d39 1
a39 1
.Os BSD 4
@


1.8
log
@fix openbsd tag
@
text
@d1 1
a1 1
.\"	$OpenBSD: intro.2,v 1.6 1995/02/27 12:33:41 cgd Exp $
d568 9
d587 7
a593 1
characters.
@


1.7
log
@include errno.h not sys/errno.h for int errno
@
text
@d1 1
@


1.6
log
@fix Xr
@
text
@d43 1
a43 1
.Fd #include <sys/errno.h>
@


1.5
log
@fix lots of .Xr and other minor things
@
text
@d184 1
a184 1
.Xr getdtablesize 2
@


1.4
log
@add EFTYPE
@
text
@d127 1
a127 1
.Xr wait
d129 1
a129 1
.Xr waitpid
d155 1
a155 1
.Xr link
d173 1
a173 1
.Xr signal
d175 1
a175 1
.Xr kill
d184 1
a184 1
.Xr Getdtablesize 2
d195 1
a195 1
.Xr open
d204 1
a204 1
.Xr write
d213 1
a213 1
.Xr lseek
d312 1
a312 1
.Xr connect
d315 1
a315 1
.Xr sendto
d317 1
a317 1
.Xr sendmsg
d331 1
a331 1
.Xr connect
d333 1
a333 1
.Xr send
d365 1
a365 1
.Xr write
d420 1
a420 1
.Xr init .
d467 1
a467 1
.Xr init ,
d526 1
a526 1
.Xr init ,
@


1.3
log
@Fix formatting problem for E2BIG description
@
text
@d407 2
@


1.2
log
@problems reported by freebsd pr#1493; schweikhardt@@rus.uni-stuttgart.de
@
text
@d113 1
a113 1
.Pf Dv NCARGS
d115 1
a115 1
.Aq Pa sys/param.h ).
@


1.1
log
@Initial revision
@
text
@d112 4
a115 5
list of the new process exceeded the current limit
of 20480 bytes
.Pf ( Dv NCARGS
in
.Aq Pa sys/param.h ) .
d554 1
a554 2
(slash).  (The parity bit,
bit 7, must be 0.)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

