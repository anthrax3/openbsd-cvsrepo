head	1.28;
access;
symbols
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.8
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.4
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.6
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.26.0.8
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.6
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.2
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.23.0.4
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.2
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.20
	OPENBSD_5_0:1.20.0.18
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.16
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.14
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.10
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.12
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.8
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.6
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.4
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.18.0.8
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.6
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.4
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.17.0.2
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.4
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.4
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.28
date	2014.09.09.03.50.43;	author guenther;	state Exp;
branches;
next	1.27;
commitid	MG1EE1t2jUqNh0O4;

1.27
date	2014.08.31.01.42.36;	author guenther;	state Exp;
branches;
next	1.26;
commitid	zF5A8BuuSSyqaDyM;

1.26
date	2013.07.17.05.42.11;	author schwarze;	state Exp;
branches;
next	1.25;

1.25
date	2013.04.21.07.44.59;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2013.03.31.08.34.27;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2012.04.24.12.20.59;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2012.04.01.16.48.43;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2012.04.01.15.09.44;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.31.19.19.32;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2007.03.30.12.46.39;	author kurt;	state Exp;
branches;
next	1.18;

1.18
date	2005.08.10.00.54.38;	author jaredy;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.31.18.34.32;	author matthieu;	state Exp;
branches;
next	1.16;

1.16
date	2004.12.31.18.31.15;	author matthieu;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.20.18.38;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.25.08.26.38;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.02.22.34.21;	author jj;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.11.05.02.29;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2001.02.07.12.48.37;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.18.05.12.08;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.08.15.13.14.11;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	99.06.29.14.09.49;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.29.00.36.06;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.23.14.10.57;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.02.15.19.04.19;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.17.17.35.07;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.07.06.18.27.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.01.11.10.26;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.24;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.28
log
@We have no protocols which require explicit confirmation
@
text
@.\"	$OpenBSD: accept.2,v 1.27 2014/08/31 01:42:36 guenther Exp $
.\"	$NetBSD: accept.2,v 1.7 1996/01/31 20:14:42 mycroft Exp $
.\"
.\" Copyright (c) 1983, 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)accept.2	8.2 (Berkeley) 12/11/93
.\"
.Dd $Mdocdate: August 31 2014 $
.Dt ACCEPT 2
.Os
.Sh NAME
.Nm accept ,
.Nm accept4
.Nd accept a connection on a socket
.Sh SYNOPSIS
.In sys/socket.h
.Ft int
.Fn accept "int s" "struct sockaddr *addr" "socklen_t *addrlen"
.Ft int
.Fn accept4 "int s" "struct sockaddr *addr" "socklen_t *addrlen" "int flags"
.Sh DESCRIPTION
The argument
.Fa s
is a socket that has been created with
.Xr socket 2 ,
bound to an address with
.Xr bind 2 ,
and is listening for connections after a
.Xr listen 2 .
The
.Fn accept
call extracts the first connection request on the queue of pending
connections, creates a new socket with the same non-blocking I/O mode as
.Fa s ,
and allocates a new file descriptor for the socket with the
close-on-exec flag clear.
.Pp
The
.Fn accept4
system call is similar, however the non-blocking I/O mode of the
new socket is determined by the
.Dv SOCK_NONBLOCK
flag in the
.Fa flags
argument and the close-on-exec flag on the new file descriptor is
determined by the
.Dv SOCK_CLOEXEC
flag in the
.Fa flags
argument.
.Pp
If no pending connections are present on the queue,
and the socket is not marked as non-blocking,
.Fn accept
blocks the caller until a connection is present.
If the socket is marked non-blocking and no pending
connections are present on the queue,
.Fn accept
returns an error as described below.
The accepted socket may not be used to accept more connections.
The original socket
.Fa s
remains open.
.Pp
The argument
.Fa addr
is a result parameter that is filled in with the address of the connecting
entity as known to the communications layer.
The exact format of the
.Fa addr
parameter is determined by the domain in which the communication
is occurring.
The structure
.Li sockaddr_storage
exists for greater portability.
It is large enough to hold any of the types that may be returned in the
.Fa addr
parameter.
.Pp
The
.Fa addrlen
is a value-result parameter; it should initially contain the
amount of space pointed to by
.Fa addr ;
on return it will contain the actual length (in bytes) of the
address returned.
If
.Fa addrlen
does not point to enough space to hold the entire socket address, the
result will be truncated to the initial value of
.Fa addrlen
(in bytes).
This call is used with connection-based socket types, currently with
.Dv SOCK_STREAM .
.Pp
It is possible to
.Xr select 2
or
.Xr poll 2
a socket for the purposes of doing an
.Fn accept
by selecting it for read.
.Sh RETURN VALUES
The call returns \-1 on error.
If it succeeds, it returns a non-negative integer that is a descriptor
for the accepted socket.
.Sh EXAMPLES
The following code uses struct
.Li sockaddr_storage
to allocate enough space for the returned address:
.Bd -literal -offset indent
#include <sys/types.h>
#include <sys/socket.h>

struct sockaddr_storage addr;
socklen_t len = sizeof(addr);
int retcode;

retcode = accept(s, (struct sockaddr *)&addr, &len);
if (retcode == -1)
	err(1, "accept");
.Ed
.Sh ERRORS
.Fn accept
and
.Fn accept4
will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The descriptor is invalid.
.It Bq Er ENOTSOCK
The descriptor doesn't reference a socket.
.It Bq Er EOPNOTSUPP
The referenced socket is not of type
.Dv SOCK_STREAM .
.It Bq Er EINTR
A signal was caught before a connection arrived.
.It Bq Er EINVAL
The referenced socket is not listening for connections (that is,
.Xr listen 2
has not yet been called).
.It Bq Er EFAULT
The
.Fa addr
or
.Fa addrlen
parameter is not in a valid part of the process address space.
.It Bq Er EWOULDBLOCK
The socket is marked non-blocking and no connections
are present to be accepted.
.It Bq Er EMFILE
The per-process descriptor table is full.
.It Bq Er ENFILE
The system file table is full.
.It Bq Er ECONNABORTED
A connection has been aborted.
.El
.Pp
In addition,
.Fn accept4
will fail if
.Bl -tag -width Er
.It Bq Er EINVAL
.Fa flags
is invalid.
.El
.Sh SEE ALSO
.Xr bind 2 ,
.Xr connect 2 ,
.Xr listen 2 ,
.Xr poll 2 ,
.Xr select 2 ,
.Xr socket 2
.Sh STANDARDS
The
.Fn accept
function conforms to
.St -p1003.1-2008 .
The
.Fn accept4
function is expected to conform to a future revision of that standard.
.Sh HISTORY
The
.Fn accept
system call first appeared in
.Bx 4.1c
and
.Fn accept4
in
.Ox 5.7 .
.Sh CAVEATS
When
.Er EMFILE
or
.Er ENFILE
is returned,
new connections are neither dequeued nor discarded.
Thus considerable care is required in
.Xr select 2
and
.Xr poll 2
loops.
@


1.27
log
@Add additional kernel interfaces for setting close-on-exec on fds
when creating them: pipe2(), dup3(), accept4(), MSG_CMSG_CLOEXEC,
SOCK_CLOEXEC.  Includes SOCK_NONBLOCK support.

ok matthew@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.26 2013/07/17 05:42:11 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: July 17 2013 $
a127 23
.Pp
For certain protocols which require an explicit confirmation,
.Fn accept
can be thought of as merely dequeuing the next connection
request and not implying confirmation.
Confirmation can be implied by a normal read or write on the new file
descriptor, and rejection can be implied by closing the new socket.
.Pp
One can obtain user connection request data without confirming
the connection by issuing a
.Xr recvmsg 2
call with an
.Fa msg_iovlen
of 0 and a non-zero
.Fa msg_controllen ,
or by issuing a
.Xr getsockopt 2
request.
Similarly, one can provide user connection rejection information
by issuing a
.Xr sendmsg 2
call providing only the control information, or by calling
.Xr setsockopt 2 .
@


1.26
log
@more library history
facts checked by sobrado@@
style tweaks and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.25 2013/04/21 07:44:59 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: April 21 2013 $
d37 2
a38 1
.Nm accept
d41 1
a41 1
.Fd #include <sys/socket.h>
d44 2
d58 1
a58 1
connections, creates a new socket with the same properties of
d60 17
a76 1
and allocates a new file descriptor for the socket.
d173 2
d206 9
d227 3
d234 5
a238 1
.Bx 4.1c .
@


1.25
log
@wording fix;
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.24 2013/03/31 08:34:27 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: March 31 2013 $
d200 2
a201 2
function appeared in
.Bx 4.2 .
@


1.24
log
@Updates to SYNOPSIS, ERRORS, and STANDARDS

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.23 2012/04/24 12:20:59 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: April 24 2012 $
a152 1
The
@


1.23
log
@document address truncation; from Steffen Daode Nurpmeso
ok deraadt matthew millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.22 2012/04/01 16:48:43 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: April 1 2012 $
a39 1
.Fd #include <sys/types.h>
d160 1
a160 1
The descriptor references a file, not a socket.
d193 5
@


1.22
log
@fix previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.21 2012/04/01 15:09:44 deraadt Exp $
d86 1
d94 6
@


1.21
log
@remind people to think of the poor file descriptors
with claudio and jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.20 2007/05/31 19:19:32 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d191 1
@


1.20
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.19 2007/03/30 12:46:39 kurt Exp $
d33 1
a33 1
.Dd $Mdocdate$
d191 12
a202 1
.Bx 4.2 .
@


1.19
log
@document accept can return EINTR. ok millert@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.18 2005/08/10 00:54:38 jaredy Exp $
d33 1
a33 1
.Dd February 15, 1999
@


1.18
log
@- wording
- remove mention of antiquated protocols (e.g. ISO)
- in example, use err() instead of errx() on error return
  since errno will be set
- addrlen may also cause EFAULT

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.17 2004/12/31 18:34:32 matthieu Exp $
d158 2
@


1.17
log
@typos
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.16 2004/12/31 18:31:15 matthieu Exp $
d55 1
a55 1
argument extracts the first connection request on the queue of pending
d104 1
a104 4
For certain protocols which require an explicit confirmation, such as
.Tn ISO
or
.Tn DATAKIT ,
d143 2
a144 2
if (retcode < 0)
	errx(1, "accept");
d165 3
a167 1
parameter is not in a writable part of the user address space.
@


1.16
log
@Document existence of struct sockaddr_storage and add an example.
hints by miod@@ and jmc@@, ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.15 2003/06/02 20:18:38 millert Exp $
d145 2
a146 2
retcode = accept(s, (struct sockaddr *)&addr, &len)
if ( etcode < 0)
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.14 2003/02/25 08:26:38 jmc Exp $
d80 6
d133 16
@


1.14
log
@typos;

intro(2): help deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.13 2001/11/02 22:34:21 jj Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.13
log
@poll(2) manpage references itself, accept(2) references poll(2) twice.
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.12 2001/03/11 05:02:29 aaron Exp $
d125 1
a125 1
call with providing only the control information, or by calling
@


1.12
log
@mdoc police.
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.11 2001/02/07 12:48:37 itojun Exp $
a166 1
.Xr poll 2 ,
@


1.11
log
@dd ECONNABORTED.
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.10 2000/10/18 05:12:08 aaron Exp $
d159 1
a159 1
A connection has been aborted. 
@


1.10
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.9 1999/08/15 13:14:11 deraadt Exp $
d158 2
@


1.9
log
@more poll
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.8 1999/06/29 14:09:49 aaron Exp $
d59 6
a64 9
argument
extracts the first connection request
on the queue of pending connections, creates
a new socket with the same properties of
.Fa s
and allocates a new file descriptor
for the socket.  If no pending connections are
present on the queue, and the socket is not marked
as non-blocking,
d71 2
a72 3
The accepted socket
may not be used
to accept more connections.  The original socket
d78 2
a79 3
is a result parameter that is filled in with
the address of the connecting entity,
as known to the communications layer.
d91 1
a91 2
This call
is used with connection-based socket types, currently with
d102 1
a102 2
For certain protocols which require an explicit confirmation,
such as
d107 1
a107 2
can be thought of
as merely dequeuing the next connection
d109 2
a110 3
Confirmation can be implied by a normal read or write on the new
file descriptor, and rejection can be implied by closing the
new socket.
d125 1
a125 2
call with providing only the control information,
or by calling
d128 3
a130 2
The call returns \-1 on error.  If it succeeds, it returns a non-negative
integer that is a descriptor for the accepted socket.
d150 1
a150 2
parameter is not in a writable part of the
user address space.
@


1.8
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.7 1999/06/29 00:36:06 aaron Exp $
d102 2
d175 1
@


1.7
log
@accept(2) will set errno to EINVAL if the socket is not listen(2)'ing
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.6 1999/05/23 14:10:57 aaron Exp $
d62 1
a62 1
a new socket with the same properties of 
d71 1
a71 1
connections are present on the queue, 
d89 1
a89 1
The 
d98 1
a98 1
.Dv SOCK_STREAM . 
d120 1
a120 1
the connection by issuing a 
d149 1
a149 1
.Dv SOCK_STREAM . 
d177 1
a177 1
function appeared in 
@


1.6
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.5 1999/02/15 19:04:19 millert Exp $
d150 4
@


1.5
log
@Use and document socklen_t
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.4 1998/08/17 17:35:07 deraadt Exp $
d39 1
a39 1
.Os BSD 4.2
@


1.4
log
@Xr poll
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.3 1998/07/06 18:27:01 deraadt Exp $
d37 1
a37 1
.Dd December 11, 1993
d47 1
a47 1
.Fn accept "int s" "struct sockaddr *addr" "int *addrlen"
@


1.3
log
@fix openbsd tag
@
text
@d1 1
a1 1
.\"	$OpenBSD: accept.2,v 1.7 1996/01/31 20:14:42 mycroft Exp $
d167 1
@


1.2
log
@from netbsd; Document EMFILE and ENFILE
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: accept.2,v 1.6 1995/02/27 12:31:41 cgd Exp $
d157 4
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
