head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.6
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.18
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.10
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.14
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.12
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.26
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.24
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.22
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.18
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.20
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.16
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4;
locks; strict;
comment	@ * @;


1.8
date	2015.09.11.13.26.20;	author guenther;	state Exp;
branches;
next	1.7;
commitid	BD9IK85aqntd1MJv;

1.7
date	2011.10.16.06.29.56;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.06.16.56.45;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.15.20.04.37;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.28.21.32.08;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.25.20.32.07;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.25.18.30.18;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.14.04.53.50;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Use PROTO_NORMAL() on __syscall to go direct, adjusting the declaration
to eliminate some casts.
Retire some uses of old-style STUB* macros where superseded by namespace.h bits

tweaks and ok deraadt@@
@
text
@/*	$OpenBSD: mquery.c,v 1.7 2011/10/16 06:29:56 guenther Exp $	*/
/*
 *	Written by Artur Grabowski <art@@openbsd.org> Public Domain
 */

#include <sys/types.h>
#include <sys/mman.h>
#include <sys/syscall.h>

void	*__syscall(quad_t, ...);
PROTO_NORMAL(__syscall);

DEF_SYS(mquery);

/*
 * This function provides 64-bit offset padding.
 */
void *
mquery(void *addr, size_t len, int prot, int flags, int fd, off_t offset)
{
	return (__syscall(SYS_mquery, addr, len, prot, flags, fd, 0, offset));
}
DEF_WEAK(mquery);
@


1.7
log
@Make consistent the syscall stubs for the syscalls that got special
handling to fix up the alignment of 64bit arguments so that they do
the same dance where _thread_sys_FOO is the real stub and FOO is a
weak alias.  For some of them, this is needed for cancellation handling.

From discussions with fgsch@@, ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mquery.c,v 1.6 2005/04/06 16:56:45 millert Exp $	*/
a8 1
#include "thread_private.h"
d10 2
a11 1
register_t __syscall(quad_t, ...);
d13 1
a13 3
STUB_PROTOTYPE(mquery);

STUB_ALIAS(mquery);
d19 1
a19 2
STUB_NAME(mquery)(void *addr, size_t len, int prot, int flags, int fd,
    off_t offset)
d21 1
a21 2
	return((void *)__syscall((quad_t)SYS_mquery, addr, len, prot,
	    flags, fd, 0, offset));
d23 1
@


1.6
log
@Make __syscall prototypes more consistent.  Use register_t as the
return value for system calls that return size_t or ssize_t and
quad_t for those that return off_t.
@
text
@d1 1
a1 1
/*	$OpenBSD: mquery.c,v 1.5 2004/07/15 20:04:37 deraadt Exp $	*/
d9 1
d13 4
d21 2
a22 1
mquery(void *addr, size_t len, int prot, int flags, int fd, off_t offset)
@


1.5
log
@add minimal __syscall() proto for lint
@
text
@d1 1
a1 1
/*	$OpenBSD: mquery.c,v 1.4 2003/04/28 21:32:08 drahn Exp $	*/
d10 1
a10 3
#ifdef lint
quad_t __syscall(quad_t, ...);
#endif
d18 1
a18 1
	return((void *)(long)__syscall((quad_t)SYS_mquery, addr, len, prot,
@


1.4
log
@Change mquery() function call signature to be the same a mmap(). It
needs the prot/flags info and passing the addresses via arg/return allows
it to be traced via ktrace better than an in/out paramter.
This adds a new mquery syscall and renames the old one to omquery.
New kernel _MUST_ be built, booted, and 'make includes' before building
ld.so with this change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mquery.c,v 1.3 2003/04/25 20:32:07 drahn Exp $	*/
d9 4
@


1.3
log
@backout mquery change, something broke when not combined with a different diff.
@
text
@d1 1
a1 1
/*	$OpenBSD: mquery.c,v 1.1 2003/04/14 04:53:50 art Exp $	*/
d13 2
a14 2
int
mquery(int flags, void **addr, size_t size, int fd, off_t off)
d16 2
a17 1
	return(__syscall((quad_t)SYS_mquery, flags, addr, size, fd, off));
@


1.2
log
@change mquery() function call signature to be the same a mmap(). It
needs the prot/flags info and passing the addresses via arg/return allows
it to be traced via ktrace better than an in/out paramter.
This adds a new mquery syscall and renames the old one to omquery.
New kernel _MUST_ be built and installed before building ld.so with this change.
ok millert@@ tedu@@
@
text
@d13 2
a14 2
void *
mquery(void *addr, size_t len, int prot, int flags, int fd, off_t offset)
d16 1
a16 2
	return((void *)(long)__syscall((quad_t)SYS_mquery, addr, len, prot,
	    flags, fd, 0, offset));
@


1.1
log
@There are two related changes.

The first one is an mquery(2) syscall. It's for asking the VM system
about where to map things. It will be used by ld.so, read the man page
for details.

The second change is related and is a centralization of uvm_map hint
that all callers of uvm_map calculated. This will allow us to adjust
this hint on architectures that have segments for non-exec mappings.

deraadt@@ drahn@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d13 2
a14 2
int
mquery(int flags, void **addr, size_t size, int fd, off_t off)
d16 2
a17 1
	return(__syscall((quad_t)SYS_mquery, flags, addr, size, fd, off));
@

