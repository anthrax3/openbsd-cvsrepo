head	1.26;
access;
symbols
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.8
	OPENBSD_5_0:1.25.0.6
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.4
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.2
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.23.0.10
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.23.0.12
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.23.0.8
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.23.0.6
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.23.0.4
	OPENBSD_4_3_BASE:1.23
	OPENBSD_4_2:1.23.0.2
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.22.0.10
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.8
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.6
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.4
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.2
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.21.0.2
	OPENBSD_3_6_BASE:1.21
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.17.0.2
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.16.0.6
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.16.0.4
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9:1.15.0.4
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.15.0.2
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.14.0.4
	OPENBSD_2_7_BASE:1.14
	OPENBSD_2_6:1.14.0.2
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@# @;


1.26
date	2012.04.12.12.33.04;	author deraadt;	state dead;
branches;
next	1.25;

1.25
date	2010.06.29.17.54.35;	author tedu;	state Exp;
branches;
next	1.24;

1.24
date	2010.04.03.01.49.44;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2007.05.31.19.19.33;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.31.21.05.47;	author jaredy;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.03.10.07.08;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2004.04.02.19.08.58;	author tedu;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.18.11.05.21;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.01.21.23.15;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2002.11.28.21.50.13;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.14.14.39.03;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2000.10.18.05.12.11;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.07.02.17.04.16;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.06.29.14.10.16;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.06.05.04.47.42;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.05.16.19.55.35;	author alex;	state Exp;
branches;
next	1.10;

1.10
date	99.02.27.21.56.43;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	99.01.11.01.01.23;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	98.07.06.18.28.22;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.05.18.03.20.54;	author art;	state Exp;
branches;
next	1.6;

1.6
date	97.08.01.22.57.53;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.06.25.15.32.48;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.06.13.10.08.35;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.01.14.01.27.17;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.01.10.17.10.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.01.10.09.38.36;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@remove rfork(); ok guenther miod
@
text
@.\"	$OpenBSD: rfork.2,v 1.25 2010/06/29 17:54:35 tedu Exp $
.\"
.\" Copyright (c) 2003 Jason McIntyre <jmc@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: June 29 2010 $
.Dt RFORK 2
.Os
.Sh NAME
.Nm rfork
.Nd control new processes
.Sh SYNOPSIS
.Fd #include <sys/param.h>
.Fd #include <unistd.h>
.Ft int
.Fn rfork "int flags"
.Sh DESCRIPTION
The fork functions
.Po
.Xr fork 2 ,
.Xr vfork 2 ,
and
.Fn rfork
.Pc
create new processes.
The new process
.Pq child process
is an exact copy of the calling process
.Pq parent process ,
except as outlined in the
.Xr fork 2
manual page.
.Fn rfork
is used to manipulate the resources of the parent process and the
child process.
.Pp
Operations currently supported include whether to copy or share the file
descriptor table between the two processes, whether to share the address
space, and whether the parent should
.Xr wait 2
for the child process to
.Xr _exit 2 .
.Fn rfork
takes a single argument,
.Fa flags ,
which controls which of these resources should be manipulated.
They are defined in the header file
.Aq Pa sys/param.h
and are the logical OR of one or more of the following:
.Bl -tag -width "RFNOWAIT"
.\" .It Dv RFNAMEG
.\" New Plan 9
.\" .Sq name space .
.\" This is a Plan 9 specific flag, and is not implemented.
.\" .It Dv RFENVG
.\" Copy Plan 9
.\" .Sq env space .
.\" This is a Plan 9 specific flag, and is not implemented.
.It Dv RFFDG
Copy the parent's file descriptor table.
If this flag is unset, the parent and child will share the parent's
file descriptor table.
Descriptors will remain in existence until they are closed by all
child processes using the table copies as well as by the parent process.
May not be used in conjunction with
.Dv RFCFDG .
.\" .It Dv RFNOTEG
.\" Create new Plan 9
.\" .Sq note group .
.\" This is a Plan 9 specific flag, and is not implemented.
.It Dv RFPROC
Create a new process.
The current implementation requires this flag to always be set.
.It Dv RFMEM
Force sharing of the entire address space between the parent and child
processes.
The child will then inherit all the shared segments the parent process owns.
Subsequent forks by the parent will then propagate the shared
data and BSS segments among children.
.It Dv RFNOWAIT
Child processes will have their resources reaped immediately and
implicitly when they terminate instead of turning into zombies,
so the parent process may not call
.Xr wait 2
to collect their exit statuses and have their resources released
explicitly.
.\" .It Dv RFCNAMEG
.\" Zero Plan 9
.\" .Sq name space .
.\" This is a Plan 9 specific flag, and is not implemented.
.\" .It Dv RFCENVG
.\" Zero Plan 9
.\" .Sq env space .
.\" This is a Plan 9 specific flag, and is not implemented.
.It Dv RFCFDG
Zero the child's file descriptor table
.Pq i.e. start with a blank file descriptor table .
May not be used in conjunction with
.Dv RFFDG .
.It Dv RFTHREAD
Create a kernel thread in the current process instead of a separate
process.
Must be combined with
.Dv RFMEM .
Automatically enables
.Dv RFNOWAIT .
The kern.rthreads sysctl must be enabled for this to succeed.
.El
.Pp
.Xr fork 2
can be implemented as a call to
.Fn rfork
using "RFFDG|RFPROC", but isn't for backwards compatibility.
If a process has file descriptor table sharing active, setuid or setgid
programs will not
.Xr execve 2
with extra privileges.
.Sh RETURN VALUES
The parent process returns the process ID
.Pq PID
of the child process.
The child process returns 0.
The range of the process ID is defined in
.Aq Pa sys/proc.h
and is currently between 1 and 32766, inclusive.
.Sh ERRORS
.Fn rfork
will fail and no child process will be created if:
.Bl -tag -width Er
.It Bq Er ENOMEM
Cannot allocate memory.
The new process image required more memory than was allowed by the hardware or
by system-imposed memory management constraints.
A lack of swap space is normally temporary; however, a lack of core is not.
Soft limits may be increased to their corresponding hard limits.
.It Bq Er EINVAL
Invalid argument.
Some invalid argument was supplied.
.It Bq Er EAGAIN
Resource temporarily unavailable.
The system-imposed limit on the total
number of processes under execution would be exceeded.
This limit is configuration-dependent.
.It Bq Er EAGAIN
Resource temporarily unavailable.
The system-imposed limit
.Dv MAXUPRC
on the total number of processes under execution by a single user would be
exceeded.
.Dv MAXUPRC
is currently defined in
.Aq Pa sys/param.h
as
.Dv CHILD_MAX ,
which is currently defined as 80 in
.Aq Pa sys/syslimits.h .
.It Bq Er ENOTSUP
The
.Dv RFTHREAD
flag was set but the kern.rthreads sysctl was not enabled.
.El
.Sh SEE ALSO
.Xr _exit 2 ,
.Xr execve 2 ,
.Xr fork 2 ,
.Xr intro 2 ,
.Xr vfork 2
.Sh HISTORY
The
.Fn rfork
function first appeared in Plan 9.
.Sh BUGS
.Dv RFTHREAD
cannot be used from C, as the two threads would return on the same stack.
@


1.25
log
@RTHREADS option is gone, now it's a sysctl.  spotted by jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.24 2010/04/03 01:49:44 guenther Exp $
d17 1
a17 1
.Dd $Mdocdate: April 3 2010 $
@


1.24
log
@Add missing documention:
 - fork1() flags: FORK_SIGHAND, FORK_PTRACE, and FORK_THREAD
 - RTHREADS kernel option
 - rfork() RFTHREAD flag (with a BUGS entry that it's not usable from C)

ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.23 2007/05/31 19:19:33 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 31 2007 $
d118 1
a118 1
The kernel option RTHREADS must be enabled for this to succeed.
d171 1
a171 2
flag was set but the kernel was not compiled with the RTHREADS
kernel option.
@


1.23
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.22 2004/12/31 21:05:47 jaredy Exp $
d17 1
a17 1
.Dd $Mdocdate$
d111 8
d168 5
d184 3
@


1.22
log
@- elaborate on the descriptions of some flags
- comment out Plan9 flags
- other minor tweaks

prod by and ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.21 2004/04/03 10:07:08 jmc Exp $
d17 1
a17 1
.Dd June 17, 2003
@


1.21
log
@- use macros instead of parentheses
- remove .Pp before list
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.20 2004/04/02 19:08:58 tedu Exp $
d45 1
a45 1
can be used to manipulate the resources of the parent process and the
d47 1
d62 8
a69 8
.It Dv RFNAMEG
New Plan 9
.Sq name space .
This is a Plan 9 specific flag, and not implemented.
.It Dv RFENVG
Copy Plan 9
.Sq env space .
This is a Plan 9 specific flag, and not implemented.
d74 2
d78 4
a81 4
.It Dv RFNOTEG
Create new Plan 9
.Sq note group .
This is a Plan 9 specific flag, and not implemented.
d86 2
a87 1
The kernel forces sharing of the entire address space.
d90 1
a90 1
data and bss between children.
d92 3
a94 1
Parent need not
d96 10
a105 9
on child.
.It Dv RFCNAMEG
Zero Plan 9
.Sq name space .
This is a Plan 9 specific flag, and not implemented.
.It Dv RFCENVG
Zero Plan 9
.Sq env space .
This is a Plan 9 specific flag, and not implemented.
d112 9
a128 9
.Pp
.Fn fork
can be implemented as a call to
.Fn rfork
using "RFFDG|RFPROC", but isn't for backwards compatibility.
If a process has file descriptor table sharing active, setuid or setgid
programs will not
.Xr execve 2
with extra privileges.
d159 1
a159 1
.Aq Pa sys/limits.h .
@


1.20
log
@rfork(RFMEM) shares complete vmspace.  much more useful, and in line with
other projects' implementations.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.19 2003/06/18 11:05:21 jmc Exp $
d30 3
a32 2
.Pf ( Xr fork 2 ,
.Xr vfork 2
d34 2
a35 1
.Fn rfork )
d37 5
a41 2
The new process (child process) is an exact copy of the calling process
(parent process), except as outlined in the
a59 1
.Pp
d100 2
a101 2
Zero the child's file descriptor table (ie. start with a blank file
descriptor table).
d106 3
a108 1
The parent process returns the process ID (PID) of the child process.
@


1.19
log
@- rewrite of the plan9 sections of rfork(2) and new (c)
- updated ERRORS and RETURN VALUES

this had to be rewritten because of licensing issues with plan9.
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
a82 1
The stack segment is always split.
@


1.18
log
@- section reorder
- macro cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.17 2002/11/28 21:50:13 brad Exp $
d3 1
a3 3
.\" This manual page is taken directly from Plan9, and modified to
.\" describe the actual OpenBSD implementation.  Permission for
.\" use of this page comes from Rob Pike <rob@@plan9.att.com>.
d5 13
a17 1
.Dd January 12, 1996
d22 1
a22 1
.Nd manipulate process resources
d29 19
a47 4
Forking, vforking or rforking is the only way new processes are created.
The
.Fa flags
argument to
d49 26
a74 13
selects which resources of the
invoking process (parent) are shared
by the new process (child) or initialized to
their default values.
The resources include
the open file descriptor table (which, when shared, permits processes
to open and close files for other processes),
and open files.
.Fa flags
is the logical
.Tn OR
of some subset of
.Bl -tag -width "RFCNAMEG" -compact -offset indent
d76 1
a76 2
If set a new process is created; otherwise changes affect the
current process.
a77 18
.It Dv RFNOWAIT
If set, the child process will be dissociated from the parent.
Upon exit the child will not leave a status for the parent to collect.
See
.Xr wait 2 .
.It Xo Dv RFNAMEG , Dv RFCNAMEG ,
.Dv RFENVG , Dv RFCENVG , Dv RFNOTEG
.Xc
These are Plan 9 specific flags, and not implemented.
.It Dv RFFDG
If set, the invoker's file descriptor table (see
.Xr intro 2 )
is copied; otherwise the two processes share a
single table.
.It Dv RFCFDG
If set, the new process starts with a clean file descriptor table.
Is mutually exclusive with
.Dv RFFDG .
d79 2
a80 4
If set, the kernel will force sharing of the entire address space.
The child
will then inherit all the shared segments the parent process owns.
Other segment types will be unaffected.
d84 17
a100 2
May be set only with
.Dv RFPROC .
d102 6
a107 19
.Pp
File descriptors in a shared file descriptor table are kept
open until either they are explicitly closed
or all processes sharing the table exit.
.Pp
If
.Dv RFPROC
is set, the
value returned in the parent process
is the process ID
of the child process; the value returned in the child is zero.
Without
.Dv RFPROC ,
the return value is zero.
Process ids range from 1 to the maximum integer
.Li int
value.
.Fn rfork
will sleep, if necessary, until required process resources are available.
d112 1
a112 2
using "RFFDG|RFPROC"
but isn't for backwards compatibility.
d121 9
d131 1
d136 1
d139 9
a147 5
.Pq Aq Pa sys/param.h
on the total number of
processes under execution by a single user would be exceeded.
.It Bq Er ENOMEM
There is insufficient swap space for the new process.
d150 2
a153 1
.Xr minherit 2 ,
d158 1
a158 1
function first appeared in Plan9.
@


1.17
log
@fd sharing was re-enabled quite awhile ago.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.16 2001/10/14 14:39:03 art Exp $
d92 1
a92 1
.Xr rfork 2
@


1.16
log
@Disable fd sharing for this release. Sorry.
deraadt@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.15 2000/10/18 05:12:11 aaron Exp $
a54 5
This flag is currently disabled in the kernel for security reasons and needs
a special kernel compile option to work.
Please consult
.Xr options 4
for information about the RFORK_FDSHARE option.
@


1.15
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.14 1999/07/02 17:04:16 aaron Exp $
d55 5
@


1.14
log
@.Dd should not be given abbreviated month names
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.13 1999/06/29 14:10:16 aaron Exp $
d42 2
a43 2
If set, the child process will be dissociated from the parent. Upon
exit the child will not leave a status for the parent to collect.
d62 6
a67 4
will then inherit all the shared segments the parent process owns. Other segment
types will be unaffected.  Subsequent forks by the parent will then
propagate the shared data and bss between children.  The stack segment
is always split.  May be set only with
@


1.13
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.12 1999/06/05 04:47:42 aaron Exp $
d7 1
a7 1
.Dd Jan 12, 1996
@


1.12
log
@use .Tn instead of .Em for logical/bitwise OR + AND
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.11 1999/05/16 19:55:35 alex Exp $
d44 1
a44 1
See 
@


1.11
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.10 1999/02/27 21:56:43 deraadt Exp $
d33 3
a35 1
is the logical OR of some subset of
d37 1
a37 1
.It RFPROC
d41 1
a41 1
.It RFNOWAIT
d46 3
a48 1
.It RFNAMEG, RFCNAMEG, RFENVG, RFCENVG, RFNOTEG
d50 1
a50 1
.It RFFDG
d52 2
a53 2
.Xr intro 2
) is copied; otherwise the two processes share a
d55 1
a55 1
.It RFCFDG
d59 1
a59 1
.It RFMEM
d77 1
a77 1
is the process id
d83 1
a83 1
.Ft ( int )
@


1.10
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.9 1999/01/11 01:01:23 niklas Exp $
d111 1
d113 2
a114 3
.Xr fork 2 ,
.Xr vfork 2 ,
.Xr minherit 2
@


1.9
log
@RFNOWAIT is now supported
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.8 1998/07/06 18:28:22 deraadt Exp $
d32 1
a32 1
.Fa Flags
d81 1
a81 1
.Fn Rfork
d84 1
a84 1
.Fn Fork
d94 1
a94 1
.Fn Rfork
@


1.8
log
@fix openbsd tag
@
text
@d1 1
a1 1
.\"	$OpenBSD$
a43 1
This is not currently implemented.
@


1.7
log
@spelling
@
text
@d1 1
@


1.6
log
@note about file table sharing and execve
@
text
@d92 1
a92 1
with extra priviledges.
@


1.5
log
@Fix typos.  PR and fix from Felix Schroeter <felix@@mamba.pond.sub.org>
@
text
@d87 1
a87 1
"RFFDG|RFPROC"
d89 4
@


1.4
log
@fix lots of .Xr and other minor things
@
text
@d3 1
a3 1
.\" describe the actual OpenBSD implimentation. Permission for
d45 1
a45 1
These are Plan 9 specific flags, and not implimented.
@


1.3
log
@Redid formatting with mandoc macros.  Added an "ERRORS" section.
@
text
@d86 2
a87 1
.Xr rfork "RFFDG|RFPROC"
@


1.2
log
@describe actual openbsd rfork() details. this should be converted to a
mandoc manpage by some brave individual (prettier because they fit more
data on the same page). please?
@
text
@d6 13
a18 14
.TH RFORK 2
.SH NAME
rfork \- manipulate process resources
.SH SYNOPSIS
.B #include <sys/param.h>
.br
.B #include <unistd.h>
.PP
.nf
.B
int rfork(int flags)
.fi
.SH DESCRIPTION
Forking or rforking is the only way new processes are created.
d20 1
a20 1
.I flags
d22 1
a22 1
.I rfork
d31 1
a31 1
.I Flags
d33 2
a34 3
.TF RFCNAMEG
.TP
.B RFPROC
d38 1
a38 2
.TP
.B RFNOWAIT
d40 3
a42 5
exit the child will leave no
.B Waitmsg
(see
.IR wait (2))
for the parent to collect.
d44 1
a44 2
.TP
.B RFNAMEG, RFCNAMEG, RFENVG, RFCENVG, RFNOTEG
d46 1
a46 2
.TP
.B RFFDG
d48 2
a49 2
.IR intro (2))
is copied; otherwise the two processes share a
d51 1
a51 2
.TP
.B RFCFDG
d54 2
a55 3
.BR RFFDG .
.TP
.B RFMEM
d62 3
a64 3
.BR RFPROC .
.PD
.PP
d68 1
a68 1
.PP
d70 1
a70 1
.B RFPROC
d76 1
a76 1
.BR RFPROC ,
d79 1
a79 1
.RB ( int )
d81 1
a81 1
.I Rfork
d83 2
a84 2
.PP
.I Fork
d86 1
a86 1
.BR rfork(RFFDG|RFPROC)
d88 26
a113 5
.SH SEE ALSO
.IR intro (2),
.IR fork (2),
.IR minherit (2).

@


1.1
log
@original rfork(2) manpage from plan9. This will be modified to describe
the actual implimentation in OpenBSD.
> From: "Rob Pike" <rob@@plan9.att.com>
> feel free to borrow the text of the plan 9 rfork page, with attribution.
@
text
@d6 1
a6 1
.TH FORK 2
d8 1
a8 1
fork, rfork \- manipulate process resources
d10 1
a10 1
.B #include <u.h>
d12 1
a12 1
.B #include <libc.h>
a15 3
int fork(void)
.PP
.B
d19 1
a19 1
Forking is the only way new processes are created.
a28 1
the file name space,
a30 8
the set of environment variables
(see
.IR env (3)),
the note group
(the set of processes that receive notes written to a member's
.B notepg
file; see
.IR proc (3)),
d39 1
d48 1
d50 2
a51 38
.B RFNAMEG
If set, the new process inherits a copy of the parent's name space;
otherwise the new process shares the parent's name space.
The tag space for
.IR rendezvous (2)
is considered part of the name space.
Is mutually exclusive with
.BR RFCNAMEG .
.TP
.B RFCNAMEG
If set, the new process starts with a clean name space. A new
name space must be built from a mount of an open file descriptor.
Is mutually exclusive with
.BR RFNAMEG .
.TP
.B RFENVG
If set, the environment variables are copied;
otherwise the two processes share environment variables.
Is mutually exclusive with
.BR RFCENVG .
.TP
.B RFCENVG
If set, the new process starts with an empty environment.
Is mutually exclusive with
.BR RFENVG .
.TP
.B RFNOTEG
Each process is a member of a group of processes that all
receive notes when a note is written to any of their
.B notepg
files (see
.IR proc (3)).
The group of a new process is by default the same as its parent, but if
.B RFNOTEG
is set (regardless of
.BR RFPROC ),
the process becomes the first in a new group, isolated from
previous processes.
d65 2
a66 5
If set, the kernel will mark segments of type
.B data 
and
.B bss 
as shared. The child
d94 3
a96 6
is just a call of
.BR rfork(RFFDG|RFPROC) .
.SH SOURCE
.B /sys/src/libc/9syscall
.br
.B /sys/src/libc/9sys/fork.c
d99 2
a100 4
.IR proc (3),
.SH DIAGNOSTICS
These functions set
.IR errstr .
@
