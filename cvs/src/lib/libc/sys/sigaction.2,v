head	1.72;
access;
symbols
	OPENBSD_6_1:1.72.0.6
	OPENBSD_6_1_BASE:1.72
	OPENBSD_6_0:1.72.0.4
	OPENBSD_6_0_BASE:1.72
	OPENBSD_5_9:1.72.0.2
	OPENBSD_5_9_BASE:1.72
	OPENBSD_5_8:1.70.0.4
	OPENBSD_5_8_BASE:1.70
	OPENBSD_5_7:1.68.0.2
	OPENBSD_5_7_BASE:1.68
	OPENBSD_5_6:1.60.0.4
	OPENBSD_5_6_BASE:1.60
	OPENBSD_5_5:1.54.0.4
	OPENBSD_5_5_BASE:1.54
	OPENBSD_5_4:1.52.0.2
	OPENBSD_5_4_BASE:1.52
	OPENBSD_5_3:1.49.0.4
	OPENBSD_5_3_BASE:1.49
	OPENBSD_5_2:1.49.0.2
	OPENBSD_5_2_BASE:1.49
	OPENBSD_5_1_BASE:1.48
	OPENBSD_5_1:1.48.0.2
	OPENBSD_5_0:1.46.0.8
	OPENBSD_5_0_BASE:1.46
	OPENBSD_4_9:1.46.0.6
	OPENBSD_4_9_BASE:1.46
	OPENBSD_4_8:1.46.0.4
	OPENBSD_4_8_BASE:1.46
	OPENBSD_4_7:1.46.0.2
	OPENBSD_4_7_BASE:1.46
	OPENBSD_4_6:1.44.0.12
	OPENBSD_4_6_BASE:1.44
	OPENBSD_4_5:1.44.0.8
	OPENBSD_4_5_BASE:1.44
	OPENBSD_4_4:1.44.0.6
	OPENBSD_4_4_BASE:1.44
	OPENBSD_4_3:1.44.0.4
	OPENBSD_4_3_BASE:1.44
	OPENBSD_4_2:1.44.0.2
	OPENBSD_4_2_BASE:1.44
	OPENBSD_4_1:1.43.0.6
	OPENBSD_4_1_BASE:1.43
	OPENBSD_4_0:1.43.0.4
	OPENBSD_4_0_BASE:1.43
	OPENBSD_3_9:1.43.0.2
	OPENBSD_3_9_BASE:1.43
	OPENBSD_3_8:1.41.0.6
	OPENBSD_3_8_BASE:1.41
	OPENBSD_3_7:1.41.0.4
	OPENBSD_3_7_BASE:1.41
	OPENBSD_3_6:1.41.0.2
	OPENBSD_3_6_BASE:1.41
	OPENBSD_3_5:1.40.0.2
	OPENBSD_3_5_BASE:1.40
	OPENBSD_3_4:1.39.0.2
	OPENBSD_3_4_BASE:1.39
	OPENBSD_3_3:1.36.0.2
	OPENBSD_3_3_BASE:1.36
	OPENBSD_3_2:1.33.0.2
	OPENBSD_3_2_BASE:1.33
	OPENBSD_3_1:1.32.0.2
	OPENBSD_3_1_BASE:1.32
	OPENBSD_3_0:1.28.0.2
	OPENBSD_3_0_BASE:1.28
	OPENBSD_2_9:1.27.0.2
	OPENBSD_2_9_BASE:1.27
	OPENBSD_2_8:1.24.0.2
	OPENBSD_2_8_BASE:1.24
	OPENBSD_2_7:1.21.0.2
	OPENBSD_2_7_BASE:1.21
	OPENBSD_2_6:1.20.0.2
	OPENBSD_2_6_BASE:1.20
	OPENBSD_2_5:1.18.0.2
	OPENBSD_2_5_BASE:1.18
	OPENBSD_2_4:1.17.0.2
	OPENBSD_2_4_BASE:1.17
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.72
date	2015.10.11.09.51.26;	author guenther;	state Exp;
branches;
next	1.71;
commitid	0izyLHkBROuZkWoO;

1.71
date	2015.10.11.07.53.49;	author guenther;	state Exp;
branches;
next	1.70;
commitid	IaeylBmMgjVh99i0;

1.70
date	2015.05.12.02.44.06;	author guenther;	state Exp;
branches;
next	1.69;
commitid	2jg9IjkXCv2pgiQ5;

1.69
date	2015.04.14.17.05.28;	author millert;	state Exp;
branches;
next	1.68;
commitid	a9oSXlzrzezfqYMd;

1.68
date	2014.12.14.07.42.50;	author schwarze;	state Exp;
branches;
next	1.67;
commitid	4RSteAc4BFbAOGs6;

1.67
date	2014.11.17.00.11.05;	author guenther;	state Exp;
branches;
next	1.66;
commitid	0isMIfUHmTZ9wu3m;

1.66
date	2014.09.15.06.18.36;	author guenther;	state Exp;
branches;
next	1.65;
commitid	jF3OuNSjqMElSBXE;

1.65
date	2014.09.15.05.51.24;	author guenther;	state Exp;
branches;
next	1.64;
commitid	PLrLbXBFHXgYntxc;

1.64
date	2014.09.10.07.04.23;	author guenther;	state Exp;
branches;
next	1.63;
commitid	eB00qtTROvakT6om;

1.63
date	2014.09.10.02.55.46;	author schwarze;	state Exp;
branches;
next	1.62;
commitid	Fa8mE8m9cBcjJm8S;

1.62
date	2014.09.09.08.17.59;	author guenther;	state Exp;
branches;
next	1.61;
commitid	hrgOvZZTOpUJ6Lpz;

1.61
date	2014.08.31.01.42.36;	author guenther;	state Exp;
branches;
next	1.60;
commitid	zF5A8BuuSSyqaDyM;

1.60
date	2014.07.21.23.05.12;	author matthew;	state Exp;
branches;
next	1.59;
commitid	xgzk3NDDRWlpQ9DV;

1.59
date	2014.07.21.17.40.06;	author matthew;	state Exp;
branches;
next	1.58;
commitid	a3cEAjZWlfTPHeHd;

1.58
date	2014.07.19.08.55.22;	author matthew;	state Exp;
branches;
next	1.57;
commitid	celshWyKUo40Hq2E;

1.57
date	2014.07.18.19.24.42;	author matthew;	state Exp;
branches;
next	1.56;
commitid	e8H71sTbqvW0KDjO;

1.56
date	2014.07.18.19.19.20;	author matthew;	state Exp;
branches;
next	1.55;
commitid	KcvO4x6wwDOk8HQ3;

1.55
date	2014.05.23.15.37.23;	author millert;	state Exp;
branches;
next	1.54;

1.54
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.53;

1.53
date	2013.08.14.08.46.07;	author jmc;	state Exp;
branches;
next	1.52;

1.52
date	2013.05.10.04.55.36;	author guenther;	state Exp;
branches;
next	1.51;

1.51
date	2013.05.08.07.23.20;	author guenther;	state Exp;
branches;
next	1.50;

1.50
date	2013.05.08.05.39.49;	author guenther;	state Exp;
branches;
next	1.49;

1.49
date	2012.04.03.23.06.11;	author matthew;	state Exp;
branches;
next	1.48;

1.48
date	2011.09.03.23.40.15;	author jmc;	state Exp;
branches;
next	1.47;

1.47
date	2011.09.03.22.59.07;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2010.02.25.17.10.34;	author schwarze;	state Exp;
branches;
next	1.45;

1.45
date	2009.12.16.07.36.56;	author guenther;	state Exp;
branches;
next	1.44;

1.44
date	2007.05.31.19.19.34;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2005.10.09.23.03.08;	author jaredy;	state Exp;
branches;
next	1.42;

1.42
date	2005.09.06.22.13.19;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2004.04.15.19.52.18;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2003.12.02.23.41.15;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2003.06.02.20.18.39;	author millert;	state Exp;
branches;
next	1.38;

1.38
date	2003.06.01.21.23.15;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2003.05.12.14.40.13;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2003.03.06.20.04.06;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2003.02.28.21.34.37;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2003.02.03.21.20.40;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.32;

1.32
date	2002.03.14.16.21.26;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2002.02.16.21.27.24;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2002.01.07.16.16.32;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	2001.11.07.18.46.58;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.27;

1.27
date	2001.03.11.05.02.30;	author aaron;	state Exp;
branches;
next	1.26;

1.26
date	2001.01.17.19.20.06;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2000.12.15.14.31.19;	author aaron;	state Exp;
branches;
next	1.24;

1.24
date	2000.10.18.05.12.12;	author aaron;	state Exp;
branches;
next	1.23;

1.23
date	2000.08.05.22.04.19;	author pjanzen;	state Exp;
branches;
next	1.22;

1.22
date	2000.08.05.01.09.51;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2000.01.22.12.00.43;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	99.06.29.14.10.21;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	99.05.10.17.56.29;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	99.02.27.21.56.49;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	98.07.24.00.43.50;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	98.07.13.02.18.54;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	98.07.06.18.28.34;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	98.06.05.00.47.44;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	98.05.13.10.12.24;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	98.05.13.08.54.52;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.11.05.10.09.19;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.09.20.01.56.48;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.09.20.01.56.01;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.09.17.11.54.34;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.09.15.05.46.11;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.06.13.11.20.25;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.06.13.10.08.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.03.29.20.33.43;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	97.02.03.15.57.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.02.21.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.72
log
@Document that execve(2) resets SIGCHLD to SIG_DFL

wordsmithing and ok jmc@@
@
text
@.\"	$OpenBSD: sigaction.2,v 1.71 2015/10/11 07:53:49 guenther Exp $
.\"	$NetBSD: sigaction.2,v 1.7 1995/10/12 15:41:16 jtc Exp $
.\"
.\" Copyright (c) 1980, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)sigaction.2	8.2 (Berkeley) 4/3/94
.\"
.Dd $Mdocdate: October 11 2015 $
.Dt SIGACTION 2
.Os
.Sh NAME
.Nm sigaction
.Nd software signal facilities
.Sh SYNOPSIS
.In signal.h
.Bd -literal
struct sigaction {
	union {		/* signal handler */
		void	(*__sa_handler)(int);
		void	(*__sa_sigaction)(int, siginfo_t *, void *);
	} __sigaction_u;
	sigset_t sa_mask;          /* signal mask to apply */
	int	 sa_flags;         /* see signal options below */
};
.Ed
.Pp
.Fd #define sa_handler		__sigaction_u.__sa_handler
.Fd #define sa_sigaction	__sigaction_u.__sa_sigaction
.Ft int
.Fn sigaction "int sig" "const struct sigaction *act" "struct sigaction *oact"
.Sh DESCRIPTION
The system defines a set of signals that may be delivered to a process.
Signal delivery resembles the occurrence of a hardware interrupt:
the signal is normally blocked from further occurrence, the current process
context is saved, and a new one is built.
A process may specify a
.Em handler
to which a signal is delivered, or specify that a signal is to be
.Em ignored .
A process may also specify that a default action is to be taken
by the system when a signal occurs.
A signal may also be
.Em blocked ,
in which case its delivery is postponed until it is
.Em unblocked .
The action to be taken on delivery is determined at the time
of delivery.
Normally, signal handlers execute on the current stack
of the process.
This may be changed, on a per-handler basis,
so that signals are taken on a special
.Em "signal stack" .
.Pp
Signal routines normally execute with the signal that caused their
invocation
.Em blocked ,
but other signals may yet occur.
A global
.Em "signal mask"
defines the set of signals currently blocked from delivery
to a process.
The signal mask for a process is initialized from that of its
parent (normally empty).
It may be changed with a
.Xr sigprocmask 2
call, or when a signal is delivered to the process.
.Pp
When a signal
condition arises for a process, the signal is added to a set of
signals pending for the process.
If the signal is not currently
.Em blocked
by the process then it is delivered to the process.
Signals may be delivered any time a process enters the operating system
(e.g., during a system call, page fault or trap, or clock interrupt).
If multiple signals are ready to be delivered at the same time,
any signals that could be caused by traps are delivered first.
Additional signals may be processed at the same time, with each
appearing to interrupt the handlers for the previous signals
before their first instructions.
The set of pending signals is returned by the
.Xr sigpending 2
function.
When a caught signal
is delivered, the current state of the process is saved,
a new signal mask is calculated (as described below),
and the signal handler is invoked.
The call to the handler is arranged so that if the signal handling routine
returns normally the process will resume execution in the context from
before the signal's delivery.
If the process wishes to resume in a different context, then it
must arrange to restore the previous context itself.
.Pp
When a signal is delivered to a process a new signal mask is
installed for the duration of the process' signal handler
(or until a
.Xr sigprocmask 2
call is made).
This mask is formed by taking the union of the current signal mask set,
the signal to be delivered, and the signal mask
.Fa sa_mask
associated with the handler to be invoked, but always excluding
.Dv SIGKILL
and
.Dv SIGSTOP .
.Pp
.Fn sigaction
assigns an action for a signal specified by
.Fa sig .
If
.Fa act
is non-zero, it
specifies an action
.Pf ( Dv SIG_DFL ,
.Dv SIG_IGN ,
or a handler routine) and mask
to be used when delivering the specified signal.
If
.Fa oact
is non-zero, the previous handling information for the signal
is returned to the user.
.Pp
Once a signal handler is installed, it normally remains installed
until another
.Fn sigaction
call is made, or an
.Xr execve 2
is performed.
The value of
.Fa sa_handler
(or, if the
.Dv SA_SIGINFO
flag is set, the value of
.Fa sa_sigaction
instead) indicates what action should be performed when a
signal arrives.
A signal-specific default action may be reset by
setting
.Fa sa_handler
to
.Dv SIG_DFL .
Alternately, if the
.Dv SA_RESETHAND
flag is set the default action will be reinstated when the signal
is first posted.
The defaults are process termination, possibly with core dump;
no action; stopping the process; or continuing the process.
See the signal list below for each signal's default action.
If
.Fa sa_handler
is
.Dv SIG_DFL ,
the default action for the signal is to discard the signal,
and if a signal is pending,
the pending signal is discarded even if the signal is masked.
If
.Fa sa_handler
is set to
.Dv SIG_IGN ,
current and pending instances
of the signal are ignored and discarded.
If
.Fa sig
is
.Dv SIGCHLD
and
.Fa sa_handler
is set to
.Dv SIG_IGN ,
the
.Dv SA_NOCLDWAIT
flag (described below) is implied.
.Pp
Options may be specified by setting
.Fa sa_flags .
The meaning of the various bits is as follows:
.Bl -tag -offset indent -width SA_RESETHANDXX
.It Dv SA_NOCLDSTOP
If this bit is set when installing a catching function
for the
.Dv SIGCHLD
signal,
the
.Dv SIGCHLD
signal will be generated only when a child process exits,
not when a child process stops.
.It Dv SA_NOCLDWAIT
If this bit is set when calling
.Fn sigaction
for the
.Dv SIGCHLD
signal, the system will not create zombie processes when children of
the calling process exit,
though existing zombies will remain.
If the calling process subsequently issues a
.Xr waitpid 2
(or equivalent) and there are no previously existing zombie child
processes that match the
.Xr waitpid 2
criteria,
it blocks until all of the calling process's child
processes that would match terminate,
and then returns a value of \-1 with
.Va errno
set to
.Er ECHILD .
.It Dv SA_ONSTACK
If this bit is set, the system will deliver the signal to the process
on a
.Em "signal stack" ,
specified with
.Xr sigaltstack 2 .
.It Dv SA_NODEFER
If this bit is set, further occurrences of the delivered signal are
not masked during the execution of the handler.
.It Dv SA_RESETHAND
If this bit is set, the handler is reset back to
.Dv SIG_DFL
at the moment the signal is delivered.
.It Dv SA_SIGINFO
If this bit is set, the 2nd argument of the handler is set to
be a pointer to a
.Em siginfo_t
structure as described in
.In sys/siginfo.h .
It provides much more information about the causes and
attributes of the signal that is being delivered.
.It Dv SA_RESTART
If a signal is caught during the system calls listed below,
the call may be forced to terminate
with the error
.Er EINTR ,
the call may return with a data transfer shorter than requested,
or the call may be restarted.
Restarting of pending calls is requested
by setting the
.Dv SA_RESTART
bit in
.Fa sa_flags .
The affected system calls include
.Xr read 2 ,
.Xr write 2 ,
.Xr sendto 2 ,
.Xr recvfrom 2 ,
.Xr sendmsg 2
and
.Xr recvmsg 2
on a communications channel or a slow device (such as a terminal,
but not a regular file)
and during a
.Xr wait 2
or
.Xr ioctl 2 .
However, calls that have already committed are not restarted,
but instead return a partial success (for example, a short read count).
.El
.Pp
After a
.Xr fork 2
or
.Xr vfork 2 ,
all signals, the signal mask, the signal stack,
and the restart/interrupt flags are inherited by the child.
.Pp
.Xr execve 2
reinstates the default
action for
.Dv SIGCHLD
and all signals which were caught; all other signals remain ignored.
All signals are reset to be caught on the user stack and
the signal mask remains the same;
signals that restart pending system calls continue to do so.
.Pp
The following is a list of all signals
with names as in the include file
.In signal.h :
.Bl -column "SIGVTALARM" "create core image" "Description"
.It Sy "Name" Ta Sy "Default Action" Ta Sy "Description"
.It Dv SIGHUP Ta "terminate process" Ta "terminal line hangup"
.It Dv SIGINT Ta "terminate process" Ta "interrupt program"
.It Dv SIGQUIT Ta "create core image" Ta "quit program"
.It Dv SIGILL Ta "create core image" Ta "illegal instruction"
.It Dv SIGTRAP Ta "create core image" Ta "trace trap"
.It Dv SIGABRT Ta "create core image" Ta "abort(3) call (formerly SIGIOT)"
.It Dv SIGEMT Ta "create core image" Ta "emulate instruction executed"
.It Dv SIGFPE Ta "create core image" Ta "floating-point exception"
.It Dv SIGKILL Ta "terminate process" Ta "kill program (cannot be caught or ignored)"
.It Dv SIGBUS Ta "create core image" Ta "bus error"
.It Dv SIGSEGV Ta "create core image" Ta "segmentation violation"
.It Dv SIGSYS Ta "create core image" Ta "system call given invalid argument"
.It Dv SIGPIPE Ta "terminate process" Ta "write on a pipe with no reader"
.It Dv SIGALRM Ta "terminate process" Ta "real-time timer expired"
.It Dv SIGTERM Ta "terminate process" Ta "software termination signal"
.It Dv SIGURG Ta "discard signal" Ta "urgent condition present on socket"
.It Dv SIGSTOP Ta "stop process" Ta "stop (cannot be caught or ignored)"
.It Dv SIGTSTP Ta "stop process" Ta "stop signal generated from keyboard"
.It Dv SIGCONT Ta "discard signal" Ta "continue after stop"
.It Dv SIGCHLD Ta "discard signal" Ta "child status has changed"
.It Dv SIGTTIN Ta "stop process" Ta "background read attempted from control terminal"
.It Dv SIGTTOU Ta "stop process" Ta "background write attempted to control terminal"
.It Dv SIGIO Ta "discard signal" Ta "I/O is possible on a descriptor (see"
.Xr fcntl 2 )
.It Dv SIGXCPU Ta "terminate process" Ta "CPU time limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGXFSZ Ta "terminate process" Ta "file size limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGVTALRM Ta "terminate process" Ta "virtual time alarm (see"
.Xr setitimer 2 )
.It Dv SIGPROF Ta "terminate process" Ta "profiling timer alarm (see"
.Xr setitimer 2 )
.It Dv SIGWINCH Ta "discard signal" Ta "window size change"
.It Dv SIGINFO Ta "discard signal" Ta "status request from keyboard"
.It Dv SIGUSR1 Ta "terminate process" Ta "user defined signal 1"
.It Dv SIGUSR2 Ta "terminate process" Ta "user defined signal 2"
.It Dv SIGTHR Ta "discard signal" Ta "thread AST"
.El
.Sh RETURN VALUES
.Rv -std
.Sh EXAMPLES
The handler routine can be declared:
.Bd -literal -offset indent
void
handler(int sig)
.Pp
.Ed
If the
.Dv SA_SIGINFO
option is enabled, the canonical way to declare it is:
.Bd -literal -offset indent
void
handler(int sig, siginfo_t *sip, void *ctx)
.Ed
.Pp
Here
.Fa sig
is the signal number, into which the hardware faults and traps are mapped.
If the
.Dv SA_SIGINFO
option is set,
.Fa sip
is a pointer to a
.Dv siginfo_t
as described in
.In sys/siginfo.h .
If
.Dv SA_SIGINFO
is not set, this pointer will be
.Dv NULL
instead.
The function specified in
.Fa sa_sigaction
will be called instead of the function specified by
.Fa sa_handler
(note that in some implementations these are in fact the same).
.Fa ctx
may be cast to a pointer to
.Fa ucontext_t
which can be used to restore the thread's context from before the signal.
On
.Ox ,
.Fa ucontext_t
is an alias for the
.Fa sigcontext
structure defined in
.In signal.h .
The contents of this structure are machine-dependent.
.Sh ERRORS
.Fn sigaction
will fail and no new signal handler will be installed if one
of the following occurs:
.Bl -tag -width Er
.It Bq Er EFAULT
Either
.Fa act
or
.Fa oact
points to memory that is not a valid part of the process
address space.
.It Bq Er EINVAL
.Fa sig
is not a valid signal number.
.It Bq Er EINVAL
An attempt is made to ignore or supply a handler for
.Dv SIGKILL
or
.Dv SIGSTOP .
.El
.Sh SEE ALSO
.Xr kill 1 ,
.Xr kill 2 ,
.Xr ptrace 2 ,
.Xr sigaltstack 2 ,
.Xr sigprocmask 2 ,
.Xr sigsuspend 2 ,
.Xr wait 2 ,
.Xr setjmp 3 ,
.Xr sigblock 3 ,
.Xr sigpause 3 ,
.Xr sigsetops 3 ,
.Xr sigvec 3 ,
.Xr tty 4
.Sh STANDARDS
The
.Fn sigaction
function conforms to
.St -p1003.1-2008 .
.Pp
The
.Dv SA_ONSTACK
flag and the
.Dv SIGPROF ,
.Dv SIGSYS ,
.Dv SIGTRAP ,
.Dv SIGVTALRM ,
.Dv SIGXCPU ,
and
.Dv SIGXFSZ
signals conform to the X/Open System Interfaces option of that standard.
The standard marks
.Dv SIGPROF
as obsolescent.
The signals
.Dv SIGEMT ,
.Dv SIGINFO ,
.Dv SIGIO ,
and
.Dv SIGWINCH
are Berkeley extensions.
These signals are available on most
.Bx Ns -derived
systems.
The
.Dv SIGTHR
signal is specific to
.Ox
and is part of the
implementation of thread cancellation;
.Fa sigaction
and other signal interfaces may reject attempts to use or alter the
handling of
.Dv SIGTHR .
.Pp
The following functions are either reentrant or not interruptible
by signals and are async-signal-safe.
Therefore applications may
invoke them, without restriction, from signal-catching functions:
.Pp
Standard Interfaces:
.Pp
.Fn _exit ,
.Fn _Exit ,
.Fn abort ,
.Fn accept ,
.Fn access ,
.Fn alarm ,
.Fn bind ,
.Fn cfgetispeed ,
.Fn cfgetospeed ,
.Fn cfsetispeed ,
.Fn cfsetospeed ,
.Fn chdir ,
.Fn chmod ,
.Fn chown ,
.Fn clock_gettime ,
.Fn close ,
.Fn connect ,
.Fn creat ,
.Fn dup ,
.Fn dup2 ,
.Fn execl ,
.Fn execle ,
.Fn execv ,
.Fn execve ,
.Fn faccessat ,
.Fn fchdir ,
.Fn fchmod ,
.Fn fchmodat ,
.Fn fchown ,
.Fn fchownat ,
.Fn fcntl ,
.Fn fdatasync ,
.Fn fork ,
.Fn fpathconf ,
.Fn fstat ,
.Fn fstatat ,
.Fn fsync ,
.Fn ftruncate ,
.Fn futimens ,
.Fn futimes ,
.Fn getegid ,
.Fn geteuid ,
.Fn getgid ,
.Fn getgroups ,
.Fn getpeername ,
.Fn getpgrp ,
.Fn getpid ,
.Fn getppid ,
.Fn getsockname ,
.Fn getsockopt ,
.Fn getuid ,
.Fn kill ,
.Fn link ,
.Fn linkat ,
.Fn listen ,
.Fn lseek ,
.Fn lstat ,
.Fn mkdir ,
.Fn mkdirat ,
.Fn mkfifo ,
.Fn mkfifoat ,
.Fn mknod ,
.Fn mknodat ,
.Fn open ,
.Fn openat ,
.Fn pathconf ,
.Fn pause ,
.Fn pipe ,
.Fn poll ,
.Fn pselect ,
.Fn pthread_sigmask ,
.Fn raise ,
.Fn read ,
.Fn readlink ,
.Fn readlinkat ,
.Fn recv ,
.Fn recvfrom ,
.Fn recvmsg ,
.Fn rename ,
.Fn renameat ,
.Fn rmdir ,
.Fn select ,
.Fn send ,
.Fn sendmsg ,
.Fn sendto ,
.Fn setgid ,
.Fn setpgid ,
.Fn setsid ,
.Fn setsockopt ,
.Fn setuid ,
.Fn shutdown ,
.Fn sigaction ,
.Fn sigaddset ,
.Fn sigdelset ,
.Fn sigemptyset ,
.Fn sigfillset  ,
.Fn sigismember ,
.Fn signal ,
.Fn sigpause ,
.Fn sigpending ,
.Fn sigprocmask ,
.Fn sigsuspend ,
.Fn sleep ,
.Fn sockatmark ,
.Fn socket ,
.Fn socketpair ,
.Fn stat ,
.Fn strcat ,
.Fn strcpy ,
.Fn strncat ,
.Fn strncpy ,
.Fn symlink ,
.Fn symlinkat ,
.Fn sysconf ,
.Fn tcdrain ,
.Fn tcflow ,
.Fn tcflush ,
.Fn tcgetattr ,
.Fn tcgetpgrp ,
.Fn tcsendbreak ,
.Fn tcsetattr ,
.Fn tcsetpgrp ,
.Fn time ,
.Fn times ,
.Fn umask ,
.Fn uname ,
.Fn unlink ,
.Fn unlinkat ,
.Fn utime ,
.Fn utimensat ,
.Fn utimes ,
.Fn wait ,
.Fn waitpid ,
.Fn write ,
and perhaps some others.
.\" unimplemented functions that should be async-sig-safe, if we had them
.\" POSIX Issue 7 additions
.\" .Pp
.\" .Fn fexecve .
.\"
.\" Realtime Interfaces:
.\" .Pp
.\" .Fn aio_error ,
.\" .Fn aio_return ,
.\" .Fn aio_suspend ,
.\" .Fn sem_post ,
.\" .Fn sigqueue ,
.\" .Fn timer_getoverrun ,
.\" .Fn timer_gettime ,
.\" .Fn timer_settime .
.Pp
Extension Interfaces:
.Pp
.Fn accept4 ,
.Fn chflags ,
.Fn chflagsat ,
.Fn dup3 ,
.Fn fchflags ,
.Fn getentropy ,
.Fn getresgid ,
.Fn getresuid ,
.Fn pipe2 ,
.Fn ppoll ,
.Fn sendsyslog ,
.Fn setresgid ,
.Fn setresuid ,
.Fn strlcat ,
.Fn strlcpy ,
.Fn wait3 ,
.Fn wait4 .
.Pp
In addition, access and updates to
.Va errno
are guaranteed to be safe.
Most functions not in the above lists are considered to be unsafe
with respect to signals.
That is to say, the behaviour of such functions when called from
a signal handler is undefined.
In general though, signal handlers should do little more than set a
flag, ideally of type volatile sig_atomic_t; most other actions are not safe.
.Pp
Additionally, it is advised that signal handlers guard against
modification of the external symbol
.Va errno
by the above functions, saving it at entry and restoring
it on return, thus:
.Bd -literal -offset indent
void
handler(int sig)
{
	int save_errno = errno;

	...
	errno = save_errno;
}
.Ed
.Pp
The functions below are async-signal-safe in
.Ox
except when used with floating-point arguments or directives,
but are probably unsafe on other systems:
.Pp
.Bl -tag -offset indent -compact -width foofoofoofoo
.It Fn dprintf
Safe.
.It Fn vdprintf
Safe.
.It Fn snprintf
Safe.
.It Fn vsnprintf
Safe.
.It Fn syslog_r
Safe if the
.Va syslog_data
struct is initialized as a local variable.
.El
@


1.71
log
@Prefer .Fa over .Em for struct members

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.70 2015/05/12 02:44:06 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: May 12 2015 $
d292 4
a295 3
action for all signals which were caught and
resets all signals to be caught on the user stack.
Ignored signals remain ignored;
@


1.70
log
@chflagsat() is also async-signal-safe
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.69 2015/04/14 17:05:28 millert Exp $
d33 1
a33 1
.Dd $Mdocdate: April 14 2015 $
d126 1
a126 1
.Em sa_mask
@


1.69
log
@Fix sa_sigaction() handler example.  The third argument is void * and
should be cast to ucontext_t * to actually use it.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.68 2014/12/14 07:42:50 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: December 14 2014 $
d629 1
@


1.68
log
@macro cleanup; from Kaspars at Bankovskis dot net
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.67 2014/11/17 00:11:05 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: November 17 2014 $
d355 1
a355 1
handler(int sig, siginfo_t *sip, struct sigcontext *scp)
d378 9
a386 3
(Note that in some implementations these are in fact the same).
.Fa scp
is a pointer to the
d388 3
a390 3
structure (defined in
.In signal.h ) ,
used to restore the context from before the signal.
@


1.67
log
@When listing the async-signal-safe functions, don't split out "ANSI C"
functions; the concept comes from POSIX anyway.

With tweaks from schwarze@@
ok deraadt@@, jmc@@, millert@@, schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.66 2014/09/15 06:18:36 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: September 15 2014 $
d200 1
a200 1
.Em sa_flags .
d264 1
a264 1
.Ar sa_flags .
@


1.66
log
@We missed a hyphen in 'async-signal-safe'

Noted by Jean-Philippe Ouellet (jean-philippe (at) ouellet.biz)
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.65 2014/09/15 05:51:24 guenther Exp $
d466 1
a466 1
Base Interfaces:
d469 1
d575 4
d597 1
a597 1
.Fn utimensat .
d601 2
a602 2
.Fn write .
.Pp
a617 9
ANSI C Interfaces:
.Pp
.Fn _Exit ,
.Fn raise ,
.Fn strcat ,
.Fn strcpy ,
.Fn strncat ,
.Fn strncpy ,
and perhaps some others.
@


1.65
log
@Mention that SIGTHR is both local and weird

"seems fair" schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.64 2014/09/10 07:04:23 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: September 10 2014 $
d462 1
a462 1
by signals and are async-signal safe.
@


1.64
log
@sockatmark(3) has been implemented; add it to the async-signal-safe lists
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.63 2014/09/10 02:55:46 schwarze Exp $
d450 10
@


1.63
log
@update STANDARDS reference from POSIX 1990 to POSIX 2008;
joint work with and ok guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.62 2014/09/09 08:17:59 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: September 9 2014 $
d560 1
a588 3
.\" POSIX Issue 6 additions
.\" .Fn sockatmark .
.\"
@


1.62
log
@Various updates and corrections to SYNOPSIS, ERRORS, and STANDARDS
Mention that unlinkat() serves the role of rmdirat().
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.61 2014/08/31 01:42:36 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: August 31 2014 $
a250 4
The
.Em siginfo_t
structure is a part of
.St -p1003.1b .
d424 2
a425 1
.St -p1003.1-90 .
d428 6
d435 6
a440 3
.Dv SA_RESTART
flags are Berkeley extensions, as are the signals
.Dv SIGTRAP ,
d442 1
a442 3
.Dv SIGBUS ,
.Dv SIGSYS ,
.Dv SIGURG ,
a443 5
.Dv SIGXCPU ,
.Dv SIGXFSZ ,
.Dv SIGVTALRM ,
.Dv SIGPROF ,
.Dv SIGWINCH ,
d445 2
a446 1
.Dv SIGINFO .
d450 1
a450 12
The
.Dv SA_NODEFER
and
.Dv SA_RESETHAND
flags are intended for backwards compatibility with other operating
systems.
The
.Dv SA_NOCLDSTOP ,
.Dv SA_NOCLDWAIT ,
and
.Dv SA_SIGINFO
flags are options commonly found in other operating systems.
@


1.61
log
@Add additional kernel interfaces for setting close-on-exec on fds
when creating them: pipe2(), dup3(), accept4(), MSG_CMSG_CLOEXEC,
SOCK_CLOEXEC.  Includes SOCK_NONBLOCK support.

ok matthew@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.60 2014/07/21 23:05:12 matthew Exp $
d33 1
a33 1
.Dd $Mdocdate: July 21 2014 $
d40 1
a40 1
.Fd #include <signal.h>
d346 1
a346 4
A 0 value indicates that the call succeeded.
A \-1 return value indicates an error occurred and
.Va errno
is set to indicate the reason.
@


1.60
log
@Add pthread_sigmask() and raise() to the list of async signal safe
functions, per POSIX Issue 7

ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.59 2014/07/21 17:40:06 matthew Exp $
d631 1
d633 1
d638 1
d640 1
@


1.59
log
@Fix typo: s/lstate/lstat/
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.58 2014/07/19 08:55:22 matthew Exp $
d33 1
a33 1
.Dd $Mdocdate: July 19 2014 $
d541 2
@


1.58
log
@Document that abort() is async signal safe now that it doesn't flush
stdio buffers

While here replace "SUSv[67]" with "POSIX Issue [67]" and update
signal(3) to mention that pselect() and ppoll() are async signal safe
like sigaction(2) already does.

ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.57 2014/07/18 19:24:42 matthew Exp $
d33 1
a33 1
.Dd $Mdocdate: July 18 2014 $
d527 1
a527 1
.Fn lstate ,
@


1.57
log
@Oops, getentropy() is an "extension interface", not a "base interface"

Also, update the async signal safe list in signal(3) too (reminded by
deraadt)
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.56 2014/07/18 19:19:20 matthew Exp $
d473 1
a473 2
.\" SUSv7 says abort() is safe, but since it flushes stdio buffers,
.\" that's not practical
d600 1
a600 1
.\" SUSv[56] additions
d603 1
a603 1
.\" SUSv7 additions
@


1.56
log
@Document that getentropy() is async signal safe.

Pointed out by Jean-Philippe Ouellet
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.55 2014/05/23 15:37:23 millert Exp $
d33 1
a33 1
.Dd $Mdocdate: May 23 2014 $
a512 1
.Fn getentropy ,
d632 1
@


1.55
log
@Document that v?dprintf() is just as safe as v?snprintf().  OK espie@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.54 2014/01/21 03:15:45 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 21 2014 $
d513 1
@


1.54
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.53 2013/08/14 08:46:07 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: August 14 2013 $
d674 4
@


1.53
log
@more Bx;
From: Jan Stary
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.52 2013/05/10 04:55:36 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: May 10 2013 $
d250 1
a250 1
.Aq Pa sys/siginfo.h .
d304 1
a304 1
.Aq Pa signal.h :
d375 1
a375 1
.Aq Pa sys/siginfo.h .
d390 1
a390 1
.Aq Pa signal.h ) ,
@


1.52
log
@Clarify behavior of SA_NOCLDWAIT
Tweak indentation in the synopsis

feedback and ok jmc@@, espie@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.51 2013/05/08 07:23:20 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: May 8 2013 $
d451 1
a451 1
.Tn BSD Ns \-derived
@


1.51
log
@Lists should be sorted by the normal alphabet, not my private one
Noted by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.50 2013/05/08 05:39:49 guenther Exp $
d52 1
a52 1
.Fd #define sa_handler	__sigaction_u.__sa_handler
d218 2
a219 1
the calling process exit.
d221 8
a228 3
.Xr wait 2
(or equivalent), it blocks until all of the calling process's child
processes terminate, and then returns a value of \-1 with
@


1.50
log
@We have fdatasync() and pselect() now, so uncomment them in the list of
async-signal-safe functions.  Also, add ppoll() as an async-s-s extension
interface
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.49 2012/04/03 23:06:11 matthew Exp $
d33 1
a33 1
.Dd $Mdocdate: April 3 2012 $
d628 1
a630 1
.Fn ppoll ,
@


1.49
log
@Document that openat(), etc are safe to call from a signal handler.
While here, recognize that _Exit() and raise() are C functions.

ok deraadt@@, guenther@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.48 2011/09/03 23:40:15 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: September 3 2011 $
d497 1
d535 1
a595 1
.\" .Fn pselect ,
a606 1
.\" .Fn fdatasync ,
d630 1
@


1.48
log
@knock out some useless Pp;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.47 2011/09/03 22:59:07 jmc Exp $
a465 1
.Fn _Exit ,
d490 1
d493 1
d495 1
d500 1
d503 1
d518 1
d523 1
d525 1
d527 1
d529 1
a533 1
.Fn raise ,
d536 1
d541 1
d569 1
d584 1
d586 1
d599 1
a599 16
.\" .Fn faccessat ,
.\" .Fn fchmodat ,
.\" .Fn fchownat ,
.\" .Fn fexecve ,
.\" .Fn fstatat ,
.\" .Fn futimens ,
.\" .Fn linkat ,
.\" .Fn mkdirat ,
.\" .Fn mkfifoat ,
.\" .Fn mknodat ,
.\" .Fn openat ,
.\" .Fn readlinkat ,
.\" .Fn renameat ,
.\" .Fn symlinkat ,
.\" .Fn unlinkat ,
.\" .Fn utimensat .
d614 2
@


1.47
log
@make -column lists pretty again;

specifically, rewrite them to permit some markup in the column headers,
and use "Ta" instead of literal tabs; mandoc does not currently match groff
100%, but a mandoc fix may be some time off, and we've gone enough releases
with poorly formatting column lists.

in some cases i have rewritten the lists as -tag, where -column made
little sense.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.46 2010/02/25 17:10:34 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: February 25 2010 $
a40 1
.Pp
@


1.46
log
@Do not attempt to silently continue text for the last column of tables
generated by .Bl -column .It <tab> on following lines.  This is a
workaround; fixing it properly in a way compatible with our old groff
would require .Xo support for .Bl -column phrases in mandoc(1), which
is too much work right now just to fix exactly this one place in our tree.

ok jmc@@

This commit fixes the last issue i'm aware of which prevented building
our whole tree with mandoc.  Not all pages format nicely yet, but
none kill the build any more.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.45 2009/12/16 07:36:56 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: December 16 2009 $
d300 25
a324 26
.Bl -column SIGVTALARMXX "create core imagexxx"
.It Sy "  NAME  " "	Default Action  " "	Description"
.It Dv SIGHUP No "	terminate process" "	terminal line hangup"
.It Dv SIGINT No "	terminate process" "	interrupt program"
.It Dv SIGQUIT No "	create core image" "	quit program"
.It Dv SIGILL No "	create core image" "	illegal instruction"
.It Dv SIGTRAP No "	create core image" "	trace trap"
.It Dv SIGABRT No "	create core image" "	abort(3) call (formerly SIGIOT)"
.It Dv SIGEMT No "	create core image" "	emulate instruction executed"
.It Dv SIGFPE No "	create core image" "	floating-point exception"
.It Dv SIGKILL No "	terminate process" "	kill program (cannot be caught or ignored)"
.It Dv SIGBUS No "	create core image" "	bus error"
.It Dv SIGSEGV No "	create core image" "	segmentation violation"
.It Dv SIGSYS No "	create core image" "	system call given invalid argument"
.It Dv SIGPIPE No "	terminate process" "	write on a pipe with no reader"
.It Dv SIGALRM No "	terminate process" "	real-time timer expired"
.It Dv SIGTERM No "	terminate process" "	software termination signal"
.It Dv SIGURG No "	discard signal" "	urgent condition present on socket"
.It Dv SIGSTOP No "	stop process" "	stop (cannot be caught or ignored)"
.It Dv SIGTSTP No "	stop process" "	stop signal generated from keyboard"
.It Dv SIGCONT No "	discard signal" "	continue after stop"
.It Dv SIGCHLD No "	discard signal" "	child status has changed"
.It Dv SIGTTIN No "	stop process" "	background read attempted from control terminal"
.It Dv SIGTTOU No "	stop process" "	background write attempted to control terminal"
.It Dv SIGIO No "	discard signal" Tn "	I/O"
is possible on a descriptor (see
d326 1
a326 1
.It Dv SIGXCPU No "	terminate process" "	CPU time limit exceeded (see"
d328 1
a328 1
.It Dv SIGXFSZ No "	terminate process" "	file size limit exceeded (see"
d330 1
a330 1
.It Dv SIGVTALRM No "	terminate process" "	virtual time alarm (see"
d332 1
a332 1
.It Dv SIGPROF No "	terminate process" "	profiling timer alarm (see"
d334 5
a338 5
.It Dv SIGWINCH No "	discard signal" "	window size change"
.It Dv SIGINFO No "	discard signal" "	status request from keyboard"
.It Dv SIGUSR1 No "	terminate process" "	user defined signal 1"
.It Dv SIGUSR2 No "	terminate process" "	user defined signal 2"
.It Dv SIGTHR No "	discard signal" "	thread AST"
@


1.45
log
@Update the list of async-signal-safe functions
Document that snprintf/vsnprintf/syslog_r() aren't async-signal-safe
	for floating-point
Provide cursory documentation of SIGTHR
Eliminate the NOTE section of the sigaction(2) manpage by merging the
	good bits into the STANDARDS section

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.44 2007/05/31 19:19:34 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d307 1
a307 3
.It Dv SIGABRT No "	create core image" Xr 	abort 3
call (formerly
.Dv SIGIOT )
@


1.44
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.43 2005/10/09 23:03:08 jaredy Exp $
d33 1
a33 1
.Dd $Mdocdate$
d128 4
a131 1
associated with the handler to be invoked.
d341 1
a342 131
.Sh NOTE
The
.Fa sa_mask
field specified in
.Fa act
is not allowed to block
.Dv SIGKILL
or
.Dv SIGSTOP .
Any attempt to do so will be silently ignored.
.Pp
The following functions are either reentrant or not interruptible
by signals and are async-signal safe.
Therefore applications may invoke them, without restriction, from
signal-catching functions:
.Bd -ragged -offset indent
.Xr _exit 2 ,
.Xr access 2 ,
.Xr alarm 3 ,
.Xr cfgetispeed 3 ,
.Xr cfgetospeed 3 ,
.Xr cfsetispeed 3 ,
.Xr cfsetospeed 3 ,
.Xr chdir 2 ,
.Xr chmod 2 ,
.Xr chown 2 ,
.Xr close 2 ,
.Xr creat 3 ,
.Xr dup 2 ,
.Xr dup2 2 ,
.Xr execle 3 ,
.Xr execve 2 ,
.Xr fcntl 2 ,
.Xr fork 2 ,
.Xr fpathconf 2 ,
.Xr fstat 2 ,
.Xr fsync 2 ,
.Xr getegid 2 ,
.Xr geteuid 2 ,
.Xr getgid 2 ,
.Xr getgroups 2 ,
.Xr getpgrp 2 ,
.Xr getpid 2 ,
.Xr getppid 2 ,
.Xr getuid 2 ,
.Xr kill 2 ,
.Xr link 2 ,
.Xr lseek 2 ,
.Xr mkdir 2 ,
.Xr mkfifo 2 ,
.Xr open 2 ,
.Xr pathconf 2 ,
.Xr pause 3 ,
.Xr pipe 2 ,
.Xr raise 3 ,
.Xr read 2 ,
.Xr rename 2 ,
.Xr rmdir 2 ,
.Xr setgid 2 ,
.Xr setpgid 2 ,
.Xr setsid 2 ,
.Xr setuid 2 ,
.Xr sigaction 2 ,
.Xr sigaddset 3 ,
.Xr sigdelset 3 ,
.Xr sigemptyset 3 ,
.Xr sigfillset 3 ,
.Xr sigismember 3 ,
.Xr signal 3 ,
.Xr sigpause 3 ,
.Xr sigpending 2 ,
.Xr sigprocmask 2 ,
.Xr sigsuspend 2 ,
.Xr sleep 3 ,
.Xr stat 2 ,
.Xr sysconf 3 ,
.Xr tcdrain 3 ,
.Xr tcflow 3 ,
.Xr tcflush 3 ,
.Xr tcgetattr 3 ,
.Xr tcgetpgrp 3 ,
.Xr tcsendbreak 3 ,
.Xr tcsetattr 3 ,
.Xr tcsetpgrp 3 ,
.Xr time 3 ,
.Xr times 3 ,
.Xr umask 2 ,
.Xr uname 3 ,
.Xr unlink 2 ,
.Xr utime 3 ,
.Xr wait 2 ,
.Xr waitpid 2 ,
.Xr write 2 .
.\" .Fn aio_error ,
.\" .Fn clock_gettime ,
.\" .Fn timer_getoverrun ,
.\" .Fn aio_return ,
.\" .Fn fdatasync ,
.\" .Fn sigqueue ,
.\" .Fn timer_gettime ,
.\" .Fn aio_suspend ,
.\" .Fn sem_post ,
.\" .Fn timer_settime .
.Ed
.Pp
Please see
.Xr signal 3
for a more detailed list.
.Pp
All functions not in the above list are considered to be unsafe
with respect to signals.
That is to say, the behaviour of such functions when called from
a signal handler is undefined.
In general though, signal handlers should do little more than set a
flag; most other actions are not safe.
.Pp
Additionally, it is advised that signal handlers guard against
modification of the external symbol
.Va errno
by the above functions, saving it at entry and restoring
it on return, thus:
.Bd -literal -offset indent
void
handler(int sig)
{
	int save_errno = errno;

	...
	errno = save_errno;
}
.Ed
d470 1
d472 3
d477 1
d485 1
d487 1
d491 1
d493 1
d495 3
d503 2
d509 1
d513 2
d518 1
d520 1
d523 1
d528 1
d531 4
d537 4
d544 1
d546 1
d554 1
d559 2
d562 1
d578 1
d583 24
a611 1
.\" .Fn clock_gettime ,
a613 1
.\" .Fn sigpause ,
a614 1
.\" .Fn sigset ,
a617 1
.\" .Pp
d628 6
d635 3
a637 1
.Fn strlcpy .
d639 3
d646 2
d649 2
a650 2
Additionally, inside the signal handler it is also considered safer to
make a copy of the global variable
d652 12
a663 1
and restore it before returning from the signal handler.
d665 1
a665 1
A few other functions are signal race safe in
d667 2
a668 1
but probably not on other systems:
@


1.43
log
@ANSI function prototypes in examples; ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.42 2005/09/06 22:13:19 jmc Exp $
d33 1
a33 1
.Dd April 3, 1994
@


1.42
log
@take some .Fd out of a literal block;
from juha erkkila;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.41 2004/04/15 19:52:18 jmc Exp $
d462 1
a462 1
handler(sig)
d479 1
a479 2
handler(sig)
	int sig;
d487 1
a487 4
handler(sig, sip, scp)
	int sig;
	siginfo_t *sip;
	struct sigcontext *scp;
@


1.41
log
@various improvements to lists and displays:

.Pp removal
-compact removal for displays
other list/display errors
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.40 2003/12/02 23:41:15 deraadt Exp $
d41 1
a42 1

d51 2
a52 1

a54 1
.Ed
@


1.40
log
@actually snprintf/vsnprintf are now signal race safe
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.39 2003/06/02 20:18:39 millert Exp $
a353 1
.Pp
@


1.39
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.38 2003/06/01 21:23:15 jmc Exp $
d723 3
a725 1
Safe as long as $n positional arguments are not used.
@


1.38
log
@- section reorder
- macro cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.37 2003/05/12 14:40:13 jmc Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.37
log
@cpu -> CPU
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.36 2003/03/06 20:04:06 jmc Exp $
d127 1
a127 1
.Xr sigprocmask
d547 14
a710 1
.Pp
a732 15
.Pp
.Sh SEE ALSO
.Xr kill 1 ,
.Xr kill 2 ,
.Xr ptrace 2 ,
.Xr sigaltstack 2 ,
.Xr sigprocmask 2 ,
.Xr sigsuspend 2 ,
.Xr wait 2 ,
.Xr setjmp 3 ,
.Xr sigblock 3 ,
.Xr sigpause 3 ,
.Xr sigsetops 3 ,
.Xr sigvec 3 ,
.Xr tty 4
@


1.36
log
@.Xr typos;

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.35 2003/02/28 21:34:37 jmc Exp $
d330 1
a330 1
.It Dv SIGXCPU No "	terminate process" "	cpu time limit exceeded (see"
@


1.35
log
@typos;

reboot(2), sigaction(2): help and ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.34 2003/02/03 21:20:40 deraadt Exp $
d371 1
a371 1
.Xr creat 2 ,
@


1.34
log
@some more functions that are (only on OpenBSD) safe in signal handlers.
not having access to these makes things really painful
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.33 2002/04/30 16:31:42 mpech Exp $
d56 2
a57 2
#define sa_handler	__sigaction_u.__sa_handler
#define sa_sigaction	__sigaction_u.__sa_sigaction
d186 1
a186 1
.Dv SIG_IGN
d246 1
a246 1
.Pa <sys/siginfo.h> .
d338 1
a338 1
.It Dv SIGWINCH No "	discard signal" "	Window size change"
d340 2
a341 2
.It Dv SIGUSR1 No "	terminate process" "	User defined signal 1"
.It Dv SIGUSR2 No "	terminate process" "	User defined signal 2"
d374 1
a374 1
.Xr execle 2 ,
d396 1
a396 1
.Xr pause 2 ,
d413 1
a436 2
.Xr sigpause 3 ,
.Xr sigset 3 .
d460 1
a460 1
As well, it is advised that signal handlers guard against
d509 1
a509 1
.Pa <sys/siginfo.h> .
d669 15
a683 15
Realtime Interfaces:
.Pp
.Fn aio_error ,
.Fn clock_gettime ,
.Fn sigpause ,
.Fn timer_getoverrun ,
.Fn aio_return ,
.Fn fdatasync ,
.Fn sigqueue ,
.Fn timer_gettime ,
.Fn aio_suspend ,
.Fn sem_post ,
.Fn sigset ,
.Fn timer_settime .
.Pp
d686 1
d688 1
a688 1
.Fn strcat ,
a689 1
.Fn strncat ,
d694 2
a695 2
.Fn strlcpy ,
.Fn strlcat .
d703 2
a704 2
As well, inside the signal handler it is also considered more safe to
make a copy the global variable
a731 1
.Xr sigsetmask 3 ,
@


1.33
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.32 2002/03/14 16:21:26 millert Exp $
d698 2
a699 1
All functions not in the above lists are considered to be unsafe
d708 14
@


1.32
log
@Fix error; open(2) is not supposed to restart when SA_RESTART is set,
that is why it is documented as returning EINTR.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.31 2002/02/16 21:27:24 millert Exp $
d705 1
a705 1
.Va errno 
@


1.31
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.30 2002/01/07 16:16:32 millert Exp $
a265 1
.Xr open 2 ,
@


1.30
log
@If the handler for SIGCHLD is set to SIG_IGN, act as if the
SA_NOCLDWAIT (don't create zombies) flag has been specified.  This
is consistent with most other operating systems and is what XPG4.2
specifies.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.29 2001/11/07 18:46:58 deraadt Exp $
d49 2
a50 2
		void	(*__sa_handler) __P((int));
		void	(*__sa_sigaction) __P((int, siginfo_t *, void *));
@


1.29
log
@list syslog_r as safe in signal handlers
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.28 2001/08/06 10:42:26 mpech Exp $
d189 11
@


1.28
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.27 2001/03/11 05:02:30 aaron Exp $
d439 4
@


1.27
log
@mdoc police.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.26 2001/01/17 19:20:06 deraadt Exp $
a461 1
.Pp
@


1.26
log
@first cut at "what is allowed in a signal handler, based on but extended from FreeBSD list
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.25 2000/12/15 14:31:19 aaron Exp $
d441 3
a443 2
with respect to signals.  That is to say, the behaviour of such
functions when called from a signal handler is undefined.
d686 3
a688 2
with respect to signals.  That is to say, the behaviour of such
functions when called from a signal handler is undefined.
@


1.25
log
@.Sh EXAMPLE -> .Sh EXAMPLES. Even if there's only one example, at least
this is consistent.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.24 2000/10/18 05:12:12 aaron Exp $
d441 4
a444 3
with respect to signals.
That is to say, the behaviour of such functions when called from a
signal handler is undefined.
d572 120
@


1.24
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.23 2000/08/05 22:04:19 pjanzen Exp $
d466 1
a466 1
.Sh EXAMPLE
@


1.23
log
@formatting, grammar, and typo correction
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.22 2000/08/05 01:09:51 deraadt Exp $
d65 2
a66 1
context is saved, and a new one is built.  A process may specify a
d79 2
a80 1
of the process.  This may be changed, on a per-handler basis,
d91 4
a94 3
to a process.  The signal mask for a process is initialized
from that of its parent (normally empty).  It
may be changed with a
d117 4
a120 4
and the signal handler is invoked.  The call to the handler
is arranged so that if the signal handling routine returns
normally the process will resume execution in the context
from before the signal's delivery.
d209 2
a210 2
the calling process exit.  If the calling process subsequently issues
a
d487 1
a487 2
is the signal number, into which the hardware faults and traps are
mapped.
d542 1
a542 2
flags are Berkeley extensions,
as are the signals
d564 2
a565 1
systems.  The
@


1.22
log
@talk about errno; and try to list sighandler safe functions
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.21 2000/01/22 12:00:43 aaron Exp $
d342 3
a344 2
by signals and are async-signal safe. Therefore applications may
invoke them, without restriction, from signal-catching functions:
d437 4
a440 3
All functions not in the above lists are considered to be unsafe
with respect to signals.  That is to say, the behaviour of such
functions when called from a signal handler is undefined.
d442 1
a442 1
As well, it is advised that signal handlers be careful to gaurd against
d444 2
a445 2
.Va errno ,
by the above functions, and consider saving it at entry and restoring
d459 2
a460 2
A 0 value indicates that the call succeeded.  A \-1 return value
indicates an error occurred and
@


1.21
log
@Use .Va macro when referring to the global variable errno.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.20 1999/06/29 14:10:21 aaron Exp $
d340 116
@


1.20
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.19 1999/05/10 17:56:29 aaron Exp $
d210 4
a213 2
processes terminate, and then returns a value of \-1 with errno set to
.Dv ECHILD .
d243 1
a243 1
.Dv EINTR ,
@


1.19
log
@correct some Xr's which referred to the wrong man page sections
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.18 1999/02/27 21:56:49 deraadt Exp $
d210 1
a210 1
processes terminate, and then returns a value of -1 with errno set to
d351 3
a353 1
If the SA_SIGINFO option is enabled, the canonical way to declare it is:
d376 3
a378 1
is not set, this pointer will be NULL instead.
@


1.18
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.17 1998/07/24 00:43:50 espie Exp $
a449 1
.Xr sigpause 2 ,
d455 1
@


1.17
log
@
Man pages Xrefs.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.16 1998/07/13 02:18:54 deraadt Exp $
d131 1
a131 1
.Fn Sigaction
d275 1
a275 1
.Xr Execve 2
d380 1
a380 1
.Fa Scp
d387 1
a387 1
.Fn Sigaction
d399 1
a399 1
.Fa Sig
@


1.16
log
@clarify
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.15 1998/07/06 18:28:34 deraadt Exp $
a449 1
.Xr sigblock 2 ,
a451 1
.Xr sigsetmask 2 ,
d455 2
@


1.15
log
@fix openbsd tag
@
text
@d1 1
a1 1
.\"	$OpenBSD: sigaction.2,v 1.7 1995/10/12 15:41:16 jtc Exp $
d127 3
a129 2
the signal to be delivered, and
the signal mask associated with the handler to be invoked.
@


1.14
log
@spelling
@
text
@d1 1
@


1.13
log
@put the SA_RESTART into the list of flags
@
text
@d436 1
a436 1
flags are intended for backwards compatability with other operating
@


1.12
log
@document SA_RESETHAND; erh@@uaccess.net
@
text
@d235 1
a235 2
.El
.Pp
d264 1
@


1.11
log
@various minor nigglies
@
text
@d164 4
@


1.10
log
@hmm, not ideal yet...
@
text
@d151 1
a151 1
The value of 
d239 1
a239 1
Restart of pending calls is requested
d333 1
a333 1
A 0 value indicated that the call succeeded.  A \-1 return value
d336 1
a336 1
is set to indicated the reason.
d405 1
a405 1
.St -p1003.1-88 .
d425 1
a425 1
Those signals are available on most
a450 1
.Xr siginterrupt 3 ,
@


1.9
log
@create sa_handler and sa_sigaction stubs in struct sigaction, via a
union and cpp.  This permits use of either the old or new POSIX names,
and gives proper typing for the argument handler. (Sorry for the name
space whacking; I'd love to see a better way to do this).
@
text
@a340 9
handler(sig, nothing, scp)
	int sig;
	int nothing;		/* this will be NULL */
	struct sigcontext *scp;
.Pp
.Ed
or alternatively just
.Bd -literal -offset indent
void
@


1.8
log
@pretty
@
text
@d47 4
a50 1
	void     (*sa_handler)();  /* signal handler */
d54 3
d151 8
d340 21
a360 4
void handler(sig, sip, scp)
int sig;
siginfo_t *sip;
struct sigcontext *scp;
d377 6
a382 1
is not set, this is NULL.
@


1.7
log
@From FreeBSD (joerg@@freebsd.org):
    Implement SA_NOCLDWAIT by reparenting kids of processes that have
    the appropriate bit set to PID 1, and let PID 1 handle the zombie.
    This assumes that PID 1 will wait for its kids (which is true of init).
    This also includes some FreeBSD sigaction.2.
@
text
@d45 1
@


1.6
log
@not ready for sa_sigaction...
@
text
@d46 3
a48 3
	void     (*sa_handler)();
	sigset_t sa_mask;
	int	 sa_flags;
d56 1
a56 1
the signal is blocked from further occurrence, the current process 
d59 1
a59 1
to which a signal is delivered, or specify that a signal is to be 
d74 1
a74 1
Signal routines execute with the signal that caused their
d78 1
a78 1
A global 
d105 1
a105 1
a new signal mask is calculated (as described below), 
d119 1
a119 1
the signal to be delivered, and 
d123 2
a124 1
assigns an action for a specific signal.
d133 1
a133 1
If 
d138 1
a138 1
Once a signal handler is installed, it remains installed
d141 1
a141 1
call is made, or an 
d168 4
a171 3
If the
.Dv SA_NOCLDSTOP
bit is set when installing a catching function
d179 15
a193 5
Further, if the
.Dv SA_ONSTACK
bit is set in
.Em sa_flags ,
the system will deliver the signal to the process on a
d196 11
a206 6
.Xr sigstack 2 .
.Pp
Finally, the
.Dv SA_SIGINFO
option causes the 2nd argument for the signal handler to be a pointer
to a
d208 1
a208 1
as described in
d212 1
a212 1
is a part of 
d214 1
a214 1
and provides much more information about the causes and
d216 1
d250 1
a250 1
.Xr vfork 2
d272 1
a272 1
.It Dv SIGABRT No "	create core image" Xr 	abort 2
d308 3
a310 1
The mask specified in 
d316 1
a316 1
This is done silently by the system.
d360 1
a360 1
or 
d383 1
a383 1
as are the signals,
d400 11
d413 1
d415 3
a417 1
.Xr kill 2 ,
d419 1
d421 1
a421 5
.Xr sigblock 2 ,
.Xr sigsetmask 2 ,
.Xr sigpause 2 ,
.Xr sigstack 2 ,
.Xr sigvec 3 ,
d425 1
@


1.5
log
@fix lots of .Xr and other minor things
@
text
@d46 1
a46 4
	union {		/* signal handler */
		void	(*__sa_handler) __P((int));
		void	(*__sa_sigaction) __P((int, siginfo_t *, void *));
	} __sigaction_u;
a49 3

#define sa_handler	__sigaction_u.__sa_handler
#define sa_sigaction	__sigaction_u.__sa_sigaction
a142 8
The value of 
.Fa sa_handler
(or, if the
.Dv SA_SIGINFO
flag is set, the value of
.Fa sa_sigaction
instead) indicates what action should be performed when a
signal arrives.
a304 8
void handler(sig)
int sig;
int nothing;		/* this will be NULL */
struct sigcontext *scp;
.Pp
.Ed
or if SA_SIGINFO is enabled,
.Bd -literal -offset indent
d325 1
a325 6
is not set, this pointer will be NULL instead.
The function specified in
.Fa sa_sigaction
will be called instead of the function specified by
.Fa sa_handler
(Note that in some implementations these are in fact the same).
@


1.4
log
@Updated description of some signals; from Klaus Klein <kleink@@layla.inka.de>
in NetBSD PR 3398
@
text
@d46 4
a49 1
	void     (*sa_handler)();
d53 3
d149 8
d319 8
d347 6
a352 1
is not set, this is NULL.
@


1.3
log
@wimpy docs for SA_SIGINFO
@
text
@d259 1
a259 1
.It Dv SIGKILL No "	terminate process" "	kill program"
d355 2
a356 2
.Nm sigaction
function is defined by
a383 1
.Xr sigaction 2 ,
@


1.2
log
@from netbsd:
add & fix a bunch of system call pages
@
text
@d186 14
d305 3
a307 2
void handler(sig, code, scp)
int sig, code;
d315 11
a325 4
.Fa Code
is a parameter that is either a constant
or the code provided by
the hardware.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: sigaction.2,v 1.6 1995/02/27 12:37:19 cgd Exp $
d52 1
a52 1
.Fn sigaction "int sig" "struct sigaction *act" "struct sigaction *oact"
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
