head	1.151;
access;
symbols
	OPENBSD_6_1:1.148.0.4
	OPENBSD_6_1_BASE:1.148
	OPENBSD_6_0:1.146.0.2
	OPENBSD_6_0_BASE:1.146
	OPENBSD_5_9:1.137.0.2
	OPENBSD_5_9_BASE:1.137
	OPENBSD_5_8:1.126.0.4
	OPENBSD_5_8_BASE:1.126
	OPENBSD_5_7:1.124.0.2
	OPENBSD_5_7_BASE:1.124
	OPENBSD_5_6:1.119.0.4
	OPENBSD_5_6_BASE:1.119
	OPENBSD_5_5:1.116.0.4
	OPENBSD_5_5_BASE:1.116
	OPENBSD_5_4:1.113.0.2
	OPENBSD_5_4_BASE:1.113
	OPENBSD_5_3:1.109.0.2
	OPENBSD_5_3_BASE:1.109
	OPENBSD_5_2:1.103.0.2
	OPENBSD_5_2_BASE:1.103
	OPENBSD_5_1_BASE:1.97
	OPENBSD_5_1:1.97.0.2
	OPENBSD_5_0:1.94.0.2
	OPENBSD_5_0_BASE:1.94
	OPENBSD_4_9:1.92.0.4
	OPENBSD_4_9_BASE:1.92
	OPENBSD_4_8:1.92.0.2
	OPENBSD_4_8_BASE:1.92
	OPENBSD_4_7:1.89.0.2
	OPENBSD_4_7_BASE:1.89
	OPENBSD_4_6:1.86.0.4
	OPENBSD_4_6_BASE:1.86
	OPENBSD_4_5:1.85.0.4
	OPENBSD_4_5_BASE:1.85
	OPENBSD_4_4:1.85.0.2
	OPENBSD_4_4_BASE:1.85
	OPENBSD_4_3:1.83.0.2
	OPENBSD_4_3_BASE:1.83
	OPENBSD_4_2:1.80.0.4
	OPENBSD_4_2_BASE:1.80
	OPENBSD_4_1:1.80.0.2
	OPENBSD_4_1_BASE:1.80
	OPENBSD_4_0:1.78.0.2
	OPENBSD_4_0_BASE:1.78
	OPENBSD_3_9:1.75.0.2
	OPENBSD_3_9_BASE:1.75
	OPENBSD_3_8:1.73.0.2
	OPENBSD_3_8_BASE:1.73
	OPENBSD_3_7:1.71.0.2
	OPENBSD_3_7_BASE:1.71
	OPENBSD_3_6:1.69.0.4
	OPENBSD_3_6_BASE:1.69
	OPENBSD_3_5:1.69.0.2
	OPENBSD_3_5_BASE:1.69
	OPENBSD_3_4:1.66.0.2
	OPENBSD_3_4_BASE:1.66
	OPENBSD_3_3:1.64.0.2
	OPENBSD_3_3_BASE:1.64
	OPENBSD_3_2:1.56.0.2
	OPENBSD_3_2_BASE:1.56
	OPENBSD_3_1:1.51.0.2
	OPENBSD_3_1_BASE:1.51
	OPENBSD_3_0:1.48.0.2
	OPENBSD_3_0_BASE:1.48
	OPENBSD_2_9:1.43.0.2
	OPENBSD_2_9_BASE:1.43
	OPENBSD_2_8:1.38.0.2
	OPENBSD_2_8_BASE:1.38
	OPENBSD_2_7:1.35.0.2
	OPENBSD_2_7_BASE:1.35
	OPENBSD_2_6:1.30.0.2
	OPENBSD_2_6_BASE:1.30
	OPENBSD_2_5:1.28.0.2
	OPENBSD_2_5_BASE:1.28
	OPENBSD_2_4:1.26.0.2
	OPENBSD_2_4_BASE:1.26
	OPENBSD_2_3:1.25.0.2
	OPENBSD_2_3_BASE:1.25
	OPENBSD_2_2:1.23.0.2
	OPENBSD_2_2_BASE:1.23
	OPENBSD_2_1:1.22.0.2
	OPENBSD_2_1_BASE:1.22
	OPENBSD_2_0:1.13.0.2
	OPENBSD_2_0_BASE:1.13
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.151
date	2017.08.12.00.07.35;	author guenther;	state Exp;
branches;
next	1.150;
commitid	WXOM12DS963yfcZn;

1.150
date	2017.05.31.10.29.47;	author sthen;	state Exp;
branches;
next	1.149;
commitid	7r1UXGVuOris1lWr;

1.149
date	2017.04.30.09.01.14;	author mpi;	state Exp;
branches;
next	1.148;
commitid	vCui6rXztcBpzKiB;

1.148
date	2017.03.29.16.29.02;	author deraadt;	state Exp;
branches;
next	1.147;
commitid	rhWpHtIoyHn0EoCc;

1.147
date	2017.03.26.19.03.38;	author guenther;	state Exp;
branches;
next	1.146;
commitid	Wgd08CWaQpmpO8ky;

1.146
date	2016.07.04.18.01.44;	author guenther;	state Exp;
branches;
next	1.145;
commitid	MDAws5Y7do6cFWlq;

1.145
date	2016.05.30.21.35.08;	author guenther;	state Exp;
branches;
next	1.144;
commitid	61HxkjwgKoFWEH8s;

1.144
date	2016.05.19.05.31.22;	author guenther;	state Exp;
branches;
next	1.143;
commitid	fPKPdrZTGZYsrj8U;

1.143
date	2016.05.09.23.55.52;	author guenther;	state Exp;
branches;
next	1.142;
commitid	ulYahYCAglSNcKb7;

1.142
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.141;
commitid	d9R7VGw9CHTkwXE1;

1.141
date	2016.03.30.07.55.36;	author guenther;	state Exp;
branches;
next	1.140;
commitid	ydrb2vgFKtK8TXi5;

1.140
date	2016.03.30.07.52.47;	author guenther;	state Exp;
branches;
next	1.139;
commitid	rAfkqKGUk60crxhW;

1.139
date	2016.03.30.06.38.42;	author jmc;	state Exp;
branches;
next	1.138;
commitid	LN9ijdk9SEnzWAbM;

1.138
date	2016.03.21.22.41.28;	author bluhm;	state Exp;
branches;
next	1.137;
commitid	hneUpr7ZOJCeNeHP;

1.137
date	2015.11.25.00.01.21;	author deraadt;	state Exp;
branches;
next	1.136;
commitid	C18rLGWf738HaMug;

1.136
date	2015.11.10.04.30.59;	author guenther;	state Exp;
branches;
next	1.135;
commitid	GTAoVjpQRAdNHXVz;

1.135
date	2015.10.23.04.39.24;	author guenther;	state Exp;
branches;
next	1.134;
commitid	OrVNAJkzchWBNbO0;

1.134
date	2015.10.23.00.52.49;	author deraadt;	state Exp;
branches;
next	1.133;
commitid	pDhBYUTGbf9bGgvD;

1.133
date	2015.10.19.23.13.38;	author deraadt;	state Exp;
branches;
next	1.132;
commitid	V7jRG86TpRD8KFIt;

1.132
date	2015.10.18.00.36.20;	author deraadt;	state Exp;
branches;
next	1.131;
commitid	7SSNoJuBxoZ1XquM;

1.131
date	2015.10.09.01.24.57;	author deraadt;	state Exp;
branches;
next	1.130;
commitid	JNaUtIMteCgesqPo;

1.130
date	2015.09.13.17.08.03;	author guenther;	state Exp;
branches;
next	1.129;
commitid	BssYI6s6zozAyfkk;

1.129
date	2015.09.09.09.16.39;	author guenther;	state Exp;
branches;
next	1.128;
commitid	sTGWDeMRRX0D2y50;

1.128
date	2015.08.26.01.54.09;	author guenther;	state Exp;
branches;
next	1.127;
commitid	ZWoe9OaBBikaM1w5;

1.127
date	2015.08.25.19.58.04;	author guenther;	state Exp;
branches;
next	1.126;
commitid	Lro0JmJnln3R0Mk8;

1.126
date	2015.07.19.02.37.29;	author deraadt;	state Exp;
branches;
next	1.125;
commitid	oLWWNhdF2IpRGxdg;

1.125
date	2015.04.07.01.27.07;	author guenther;	state Exp;
branches;
next	1.124;
commitid	oQvh7XA3Kql35r0J;

1.124
date	2014.12.08.20.56.11;	author guenther;	state Exp;
branches;
next	1.123;
commitid	W5ntmn0jpthTCbn0;

1.123
date	2014.11.14.00.24.28;	author guenther;	state Exp;
branches;
next	1.122;
commitid	hRQO1F9jtgnHZjyt;

1.122
date	2014.08.31.04.02.08;	author guenther;	state Exp;
branches;
next	1.121;
commitid	cqt0oliIc4YJXCZZ;

1.121
date	2014.08.31.01.42.36;	author guenther;	state Exp;
branches;
next	1.120;
commitid	zF5A8BuuSSyqaDyM;

1.120
date	2014.08.14.17.55.28;	author tobias;	state Exp;
branches;
next	1.119;
commitid	U10H0ss9SRjFygPh;

1.119
date	2014.07.12.02.28.56;	author deraadt;	state Exp;
branches;
next	1.118;
commitid	i8KQc1IoSdH1xTUE;

1.118
date	2014.06.13.08.26.10;	author deraadt;	state Exp;
branches;
next	1.117;
commitid	CpYJ4dq5gv2iN1W3;

1.117
date	2014.03.18.22.36.30;	author miod;	state Exp;
branches;
next	1.116;

1.116
date	2013.10.13.23.30.12;	author guenther;	state Exp;
branches;
next	1.115;

1.115
date	2013.10.07.01.50.26;	author guenther;	state Exp;
branches;
next	1.114;

1.114
date	2013.08.13.05.52.13;	author guenther;	state Exp;
branches;
next	1.113;

1.113
date	2013.06.05.04.06.08;	author guenther;	state Exp;
branches;
next	1.112;

1.112
date	2013.06.01.09.49.53;	author miod;	state Exp;
branches;
next	1.111;

1.111
date	2013.04.29.17.06.20;	author matthew;	state Exp;
branches;
next	1.110;

1.110
date	2013.04.15.16.38.21;	author matthew;	state Exp;
branches;
next	1.109;

1.109
date	2013.02.03.10.38.40;	author miod;	state Exp;
branches;
next	1.108;

1.108
date	2013.02.02.13.29.14;	author miod;	state Exp;
branches;
next	1.107;

1.107
date	2012.09.04.03.10.42;	author okan;	state Exp;
branches;
next	1.106;

1.106
date	2012.08.23.06.19.48;	author deraadt;	state Exp;
branches;
next	1.105;

1.105
date	2012.08.22.17.19.34;	author pascal;	state Exp;
branches;
next	1.104;

1.104
date	2012.08.21.15.30.09;	author pascal;	state Exp;
branches;
next	1.103;

1.103
date	2012.06.19.09.40.39;	author deraadt;	state Exp;
branches;
next	1.102;

1.102
date	2012.04.12.12.33.04;	author deraadt;	state Exp;
branches;
next	1.101;

1.101
date	2012.04.12.11.16.24;	author deraadt;	state Exp;
branches;
next	1.100;

1.100
date	2012.04.12.11.07.19;	author deraadt;	state Exp;
branches;
next	1.99;

1.99
date	2012.03.22.00.44.55;	author guenther;	state Exp;
branches;
next	1.98;

1.98
date	2012.03.13.15.55.46;	author guenther;	state Exp;
branches;
next	1.97;

1.97
date	2012.01.17.02.34.18;	author guenther;	state Exp;
branches;
next	1.96;

1.96
date	2011.11.22.21.13.30;	author guenther;	state Exp;
branches;
next	1.95;

1.95
date	2011.10.16.06.21.52;	author guenther;	state Exp;
branches;
next	1.94;

1.94
date	2011.07.18.23.04.40;	author matthew;	state Exp;
branches;
next	1.93;

1.93
date	2011.07.18.17.29.49;	author matthew;	state Exp;
branches;
next	1.92;

1.92
date	2010.07.03.04.44.51;	author guenther;	state Exp;
branches;
next	1.91;

1.91
date	2010.07.01.19.15.30;	author deraadt;	state Exp;
branches;
next	1.90;

1.90
date	2010.05.18.22.24.55;	author tedu;	state Exp;
branches;
next	1.89;

1.89
date	2010.02.03.20.49.00;	author miod;	state Exp;
branches;
next	1.88;

1.88
date	2009.11.27.20.05.50;	author guenther;	state Exp;
branches;
next	1.87;

1.87
date	2009.08.13.19.54.58;	author jmc;	state Exp;
branches;
next	1.86;

1.86
date	2009.06.03.14.45.47;	author jj;	state Exp;
branches;
next	1.85;

1.85
date	2008.03.22.19.18.42;	author otto;	state Exp;
branches;
next	1.84;

1.84
date	2008.03.16.19.44.34;	author otto;	state Exp;
branches;
next	1.83;

1.83
date	2008.01.05.02.11.44;	author deraadt;	state Exp;
branches;
next	1.82;

1.82
date	2007.09.09.19.22.45;	author otto;	state Exp;
branches;
next	1.81;

1.81
date	2007.09.09.18.46.34;	author otto;	state Exp;
branches;
next	1.80;

1.80
date	2006.10.24.04.40.59;	author tedu;	state Exp;
branches;
next	1.79;

1.79
date	2006.10.10.14.18.17;	author deraadt;	state Exp;
branches;
next	1.78;

1.78
date	2006.06.14.19.55.24;	author otto;	state Exp;
branches;
next	1.77;

1.77
date	2006.05.27.16.14.02;	author pedro;	state Exp;
branches;
next	1.76;

1.76
date	2006.03.13.19.00.58;	author moritz;	state Exp;
branches;
next	1.75;

1.75
date	2005.11.29.21.29.15;	author deraadt;	state Exp;
branches;
next	1.74;

1.74
date	2005.10.03.11.35.53;	author jmc;	state Exp;
branches;
next	1.73;

1.73
date	2005.06.17.20.37.31;	author drahn;	state Exp;
branches;
next	1.72;

1.72
date	2005.06.17.20.36.10;	author millert;	state Exp;
branches;
next	1.71;

1.71
date	2004.09.18.19.21.46;	author deraadt;	state Exp;
branches;
next	1.70;

1.70
date	2004.09.16.08.37.46;	author deraadt;	state Exp;
branches;
next	1.69;

1.69
date	2004.02.13.22.15.29;	author tedu;	state Exp;
branches;
next	1.68;

1.68
date	2004.01.15.13.40.22;	author deraadt;	state Exp;
branches;
next	1.67;

1.67
date	2004.01.12.18.27.28;	author tedu;	state Exp;
branches;
next	1.66;

1.66
date	2003.05.10.17.52.17;	author miod;	state Exp;
branches;
next	1.65;

1.65
date	2003.04.14.04.53.50;	author art;	state Exp;
branches;
next	1.64;

1.64
date	2003.01.31.21.47.46;	author millert;	state Exp;
branches;
next	1.63;

1.63
date	2002.12.02.15.54.14;	author millert;	state Exp;
branches;
next	1.62;

1.62
date	2002.12.02.09.00.14;	author miod;	state Exp;
branches;
next	1.61;

1.61
date	2002.11.10.03.21.02;	author fgsch;	state Exp;
branches;
next	1.60;

1.60
date	2002.11.05.22.19.55;	author marc;	state Exp;
branches;
next	1.59;

1.59
date	2002.11.03.23.58.39;	author marc;	state Exp;
branches;
next	1.58;

1.58
date	2002.11.03.20.36.43;	author marc;	state Exp;
branches;
next	1.57;

1.57
date	2002.10.30.20.15.29;	author millert;	state Exp;
branches;
next	1.56;

1.56
date	2002.08.05.22.42.12;	author art;	state Exp;
branches;
next	1.55;

1.55
date	2002.08.05.15.31.12;	author art;	state Exp;
branches;
next	1.54;

1.54
date	2002.07.06.19.14.20;	author nordin;	state Exp;
branches;
next	1.53;

1.53
date	2002.06.10.17.46.41;	author fgsch;	state Exp;
branches;
next	1.52;

1.52
date	2002.06.08.20.55.31;	author drahn;	state Exp;
branches;
next	1.51;

1.51
date	2002.02.22.21.06.01;	author drahn;	state Exp;
branches;
next	1.50;

1.50
date	2002.02.21.21.19.20;	author art;	state Exp;
branches;
next	1.49;

1.49
date	2002.02.17.23.40.58;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2001.09.25.20.36.44;	author niklas;	state Exp;
branches;
next	1.47;

1.47
date	2001.09.25.13.04.30;	author drahn;	state Exp;
branches;
next	1.46;

1.46
date	2001.09.20.20.52.09;	author millert;	state Exp;
branches;
next	1.45;

1.45
date	2001.07.09.00.20.52;	author fgsch;	state Exp;
branches;
next	1.44;

1.44
date	2001.06.26.19.56.52;	author dugsong;	state Exp;
branches;
next	1.43;

1.43
date	2001.03.14.04.01.59;	author aaron;	state Exp;
branches;
next	1.42;

1.42
date	2001.03.09.15.13.48;	author art;	state Exp;
branches;
next	1.41;

1.41
date	2001.01.10.17.39.43;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2000.12.23.03.04.34;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2000.11.16.20.29.55;	author provos;	state Exp;
branches;
next	1.38;

1.38
date	2000.10.17.17.44.38;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2000.10.16.14.25.04;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2000.05.15.06.10.21;	author niklas;	state Exp;
branches;
next	1.35;

1.35
date	2000.05.01.23.13.17;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2000.04.20.06.34.36;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2000.02.07.04.59.30;	author assar;	state Exp;
branches;
next	1.32;

1.32
date	2000.01.06.16.53.30;	author d;	state Exp;
branches;
next	1.31;

1.31
date	99.12.14.03.41.16;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	99.06.07.07.17.56;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	99.05.22.21.27.21;	author weingart;	state Exp;
branches;
next	1.28;

1.28
date	99.02.01.08.13.01;	author d;	state Exp;
branches;
next	1.27;

1.27
date	98.11.20.11.18.52;	author d;	state Exp;
branches;
next	1.26;

1.26
date	98.09.18.00.48.35;	author art;	state Exp;
branches;
next	1.25;

1.25
date	98.02.08.22.45.14;	author tholo;	state Exp;
branches;
next	1.24;

1.24
date	97.11.13.07.11.13;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	97.05.30.21.53.10;	author kstailey;	state Exp;
branches;
next	1.22;

1.22
date	97.05.08.20.10.06;	author kstailey;	state Exp;
branches;
next	1.21;

1.21
date	97.05.08.20.09.20;	author kstailey;	state Exp;
branches;
next	1.20;

1.20
date	97.04.20.20.56.19;	author tholo;	state Exp;
branches;
next	1.19;

1.19
date	97.04.04.16.45.25;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	97.03.29.18.08.05;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	97.03.26.05.11.54;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	97.01.26.23.36.13;	author downsj;	state Exp;
branches;
next	1.15;

1.15
date	97.01.26.05.10.32;	author downsj;	state Exp;
branches;
next	1.14;

1.14
date	96.12.11.08.32.44;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	96.09.02.05.26.54;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	96.08.25.11.58.29;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	96.06.18.08.25.56;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	96.05.19.20.37.29;	author pefo;	state Exp;
branches;
next	1.9;

1.9
date	96.05.18.08.53.11;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.05.08.15.18.14;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.05.01.11.13.37;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.03.25.23.31.47;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	96.01.29.23.05.03;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.01.08.11.36.02;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.01.07.17.20.45;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.02.21.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.24;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.151
log
@Instead of hardcoding a partial dependency list for the syscall stub objects,
calculate them as done for other objects
@
text
@#	$OpenBSD: Makefile.inc,v 1.150 2017/05/31 10:29:47 sthen Exp $
#	$NetBSD: Makefile.inc,v 1.35 1995/10/16 23:49:07 jtc Exp $
#	@@(#)Makefile.inc	8.1 (Berkeley) 6/17/93

# sys sources
.PATH: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/sys ${LIBCSRCDIR}/sys

# modules with non-default implementations on at least one architecture:
SRCS+=	Ovfork.S brk.S ${CERROR} \
	sbrk.S sigpending.S sigprocmask.S \
	sigsuspend.S syscall.S tfork_thread.S

# glue to offer userland wrappers for some syscalls
SRCS+=	posix_madvise.c pthread_sigmask.c \
	w_fork.c w_sigaction.c w_sigprocmask.c w_sigsuspend.c w_vfork.c

# glue for compat with old syscall interfaces.
SRCS+=	ftruncate.c lseek.c mquery.c mmap.c ptrace.c semctl.c truncate.c \
	timer_create.c timer_delete.c timer_getoverrun.c timer_gettime.c \
	timer_settime.c pread.c preadv.c pwrite.c pwritev.c

# stack protector helper functions
SRCS+=	stack_protector.c

# cancelation details
SRCS+=	canceled.c

# syscalls that would be normal...except for cancellation or SIGTHR
CANCEL=	accept accept4 \
	close closefrom connect \
	fcntl fsync \
	msgrcv msgsnd msync \
	nanosleep \
	open openat \
	poll ppoll pselect \
	read readv recvfrom recvmsg \
	select sendmsg sendto \
	wait4 write writev
SRCS+=	${CANCEL:%=w_%.c} w_pread.c w_preadv.c w_pwrite.c w_pwritev.c

# modules with default implementations on all architectures, unless overridden
# below:
ASM=	__semctl.o __syscall.o __thrsigdivert.o \
	access.o acct.o adjfreq.o adjtime.o \
	bind.o chdir.o chflags.o chflagsat.o chmod.o chown.o chroot.o \
	clock_getres.o clock_gettime.o clock_settime.o \
	dup.o dup2.o dup3.o \
	execve.o \
	faccessat.o fchdir.o fchflags.o fchmod.o fchmodat.o fchown.o \
	fchownat.o fhopen.o fhstat.o fhstatfs.o \
	flock.o fpathconf.o fstat.o fstatat.o fstatfs.o \
	futimens.o futimes.o \
	getentropy.o getdents.o getfh.o getfsstat.o \
	getgroups.o getitimer.o getpeername.o getpgid.o \
	getpriority.o getresgid.o getresuid.o \
	getrlimit.o getrusage.o getsid.o getsockname.o \
	getsockopt.o gettimeofday.o ioctl.o \
	kevent.o kill.o kqueue.o ktrace.o lchown.o \
	link.o linkat.o listen.o lstat.o madvise.o mincore.o \
	minherit.o mkdir.o mkdirat.o mkfifo.o mkfifoat.o \
	mknod.o mknodat.o mlock.o mlockall.o mount.o mprotect.o \
	msgctl.o msgget.o munlock.o munlockall.o munmap.o \
	nfssvc.o \
	pathconf.o pipe.o pipe2.o pledge.o profil.o \
	quotactl.o \
	readlink.o readlinkat.o reboot.o \
	rename.o renameat.o revoke.o rmdir.o \
	semget.o semop.o sendsyslog.o \
	setegid.o seteuid.o setgid.o setgroups.o setitimer.o setlogin.o \
	setpgid.o setpriority.o setregid.o setresgid.o setresuid.o \
	setreuid.o setrlimit.o setrtable.o setsid.o setsockopt.o \
	settimeofday.o setuid.o shmat.o shmctl.o shmdt.o \
	shmget.o shutdown.o sigaltstack.o socket.o \
	socketpair.o stat.o statfs.o swapctl.o symlink.o symlinkat.o \
	sysarch.o sysctl.o thrkill.o unlink.o unlinkat.o \
	unmount.o utimensat.o utimes.o utrace.o

SRCS+=	${SRCS_${MACHINE_CPU}}
.for i in ${SRCS_${MACHINE_CPU}}
ASM:=	${ASM:N${i:R}.o}
.endfor

PASM=	${ASM:.o=.po}
SASM=	${ASM:.o=.so}
DASM=	${ASM:.o=.do}

# syscalls that CANNOT FAIL.  They can return whatever value they want,
# they just never want to set errno.
ASM_NOERR=__get_tcb.o __set_tcb.o __threxit.o __thrsleep.o __thrwakeup.o \
	futex.o \
	getdtablecount.o getegid.o geteuid.o getgid.o getlogin_r.o \
	getpgrp.o getpid.o getppid.o getrtable.o getthrid.o getuid.o \
	issetugid.o \
	sched_yield.o sync.o \
	umask.o 
PASM_NOERR=	${ASM_NOERR:.o=.po}
SASM_NOERR=	${ASM_NOERR:.o=.so}
DASM_NOERR=	${ASM_NOERR:.o=.do}

PSEUDO=
PPSEUDO=${PSEUDO:.o=.po}
SPSEUDO=${PSEUDO:.o=.so}
DPSEUDO=${PSEUDO:.o=.do}

# syscalls that CANNOT FAIL and whose function has one more leading underbar
# than its matching SYS_* symbol.  E.g., _exit() --> SYS_exit
PSEUDO_NOERR=	_exit.o
PPSEUDO_NOERR=${PSEUDO_NOERR:.o=.po}
SPSEUDO_NOERR=${PSEUDO_NOERR:.o=.so}
DPSEUDO_NOERR=${PSEUDO_NOERR:.o=.do}

HIDDEN= ___getcwd.o fork.o sigaction.o _ptrace.o ${CANCEL:=.o}
PHIDDEN=${HIDDEN:.o=.po}
SHIDDEN=${HIDDEN:.o=.so}
DHIDDEN=${HIDDEN:.o=.do}

OBJS+=	${ASM} ${ASM_NOERR} ${PSEUDO} ${PSEUDO_NOERR} ${HIDDEN}

# XXX only difference is -x removes FILE symbols?
TRIM=${LD} -x -r ${.TARGET}.o -o ${.TARGET} && rm -f ${.TARGET}.o
TRIM.debug=${LD} -X -r ${.TARGET}.o -o ${.TARGET} && rm -f ${.TARGET}.o


GEN_PREFIX=\t.file "${@@:R}.S"\n\#include "SYS.h"
# Pick one of these to set what ASM is generated...
GENERATE.rsyscall=\
	echo creating ${.TARGET} && \
	printf '${GEN_PREFIX}\nRSYSCALL(${.PREFIX})\n'
GENERATE.rsyscall_noerr=\
	echo creating ${.TARGET} && \
	printf '${GEN_PREFIX}\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX})\n'
GENERATE.pseudo=\
	echo creating ${.TARGET} && \
	printf '${GEN_PREFIX}\nPSEUDO(${.PREFIX},${.PREFIX:S/^_//})\n'
GENERATE.pseudo_noerr=\
	echo creating ${.TARGET} && \
	printf '${GEN_PREFIX}\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX:S/^_//})\n'
GENERATE.rsyscall_hidden=\
	echo creating ${.TARGET} && \
	printf '${GEN_PREFIX}\nRSYSCALL_HIDDEN(${.PREFIX:S/^_//})\n'

# ...and one of these to control how it's compiled
FINISH=	${COMPILE.S} ${CFLAGS:M-[ID]*} ${CFLAGS:M-pipe} ${AINC} -P -x assembler-with-cpp - ${DFLAGS} -MF ${.TARGET:R}.d
FINISH.po=${FINISH} -o ${.TARGET}.o -DPROF		&& ${TRIM.debug}
FINISH.so=${FINISH} -o ${.TARGET}   ${PICFLAG}
FINISH.do=${FINISH} -o ${.TARGET}.o ${DIST_CFLAGS}	&& ${TRIM}
FINISH.o =${FINISH} -o ${.TARGET}.o			&& ${TRIM}

# Use those to generate the desired syscall stubs
${PASM}: ; @@${GENERATE.rsyscall} | ${FINISH.po}
${SASM}: ; @@${GENERATE.rsyscall} | ${FINISH.so}
${DASM}: ; @@${GENERATE.rsyscall} | ${FINISH.do}
${ASM}:  ; @@${GENERATE.rsyscall} | ${FINISH.o}

${PASM_NOERR}: ; @@${GENERATE.rsyscall_noerr} | ${FINISH.po}
${SASM_NOERR}: ; @@${GENERATE.rsyscall_noerr} | ${FINISH.so}
${DASM_NOERR}: ; @@${GENERATE.rsyscall_noerr} | ${FINISH.do}
${ASM_NOERR}:  ; @@${GENERATE.rsyscall_noerr} | ${FINISH.o}

${PPSEUDO}: ; @@${GENERATE.pseudo} | ${FINISH.po}
${SPSEUDO}: ; @@${GENERATE.pseudo} | ${FINISH.so}
${DPSEUDO}: ; @@${GENERATE.pseudo} | ${FINISH.do}
${PSEUDO}:  ; @@${GENERATE.pseudo} | ${FINISH.o}

${PPSEUDO_NOERR}: ; @@${GENERATE.pseudo_noerr} | ${FINISH.po}
${SPSEUDO_NOERR}: ; @@${GENERATE.pseudo_noerr} | ${FINISH.so}
${DPSEUDO_NOERR}: ; @@${GENERATE.pseudo_noerr} | ${FINISH.do}
${PSEUDO_NOERR}:  ; @@${GENERATE.pseudo_noerr} | ${FINISH.o}

${PHIDDEN}: ; @@${GENERATE.rsyscall_hidden} | ${FINISH.po}
${SHIDDEN}: ; @@${GENERATE.rsyscall_hidden} | ${FINISH.so}
${DHIDDEN}: ; @@${GENERATE.rsyscall_hidden} | ${FINISH.do}
${HIDDEN}:  ; @@${GENERATE.rsyscall_hidden} | ${FINISH.o}


MAN+=	__get_tcb.2 __thrsigdivert.2 __thrsleep.2 _exit.2 accept.2 \
	access.2 acct.2 adjfreq.2 adjtime.2 bind.2 brk.2 chdir.2 \
	chflags.2 chmod.2 chown.2 chroot.2 clock_gettime.2 close.2 \
	closefrom.2 connect.2 dup.2 execve.2 fcntl.2 fhopen.2 flock.2 \
	fork.2 fsync.2 futex.2 getentropy.2 getdents.2 getdtablecount.2 \
	getfh.2 getfsstat.2 getgid.2 getgroups.2 getitimer.2 getlogin.2 \
	getpeername.2 getpgrp.2 getpid.2 getpriority.2 getrlimit.2 \
	getrtable.2 getrusage.2 getsid.2 getsockname.2 getsockopt.2 \
	getthrid.2 gettimeofday.2 getuid.2 intro.2 ioctl.2 issetugid.2 \
	kbind.2 kill.2 kqueue.2 ktrace.2 link.2 listen.2 lseek.2 madvise.2 \
	mincore.2 minherit.2 mkdir.2 mkfifo.2 mknod.2 mlock.2 \
	mlockall.2 mmap.2 mount.2 mprotect.2 mquery.2 msgctl.2 \
	msgget.2 msgrcv.2 msgsnd.2 msync.2 munmap.2 nanosleep.2 \
	nfssvc.2 open.2 pathconf.2 pipe.2 pledge.2 poll.2 profil.2 \
	ptrace.2 quotactl.2 read.2 readlink.2 reboot.2 recv.2 \
	rename.2 revoke.2 rmdir.2 sched_yield.2 select.2 semctl.2 semget.2 \
	semop.2 send.2 setgroups.2 setpgid.2 setregid.2 \
	setresuid.2 setreuid.2 setsid.2 sendsyslog.2 setuid.2 shmat.2 \
	shmctl.2 shmget.2 shutdown.2 sigaction.2 sigaltstack.2 sigpending.2 \
	sigprocmask.2 sigreturn.2 sigsuspend.2 socket.2 \
	socketpair.2 stat.2 statfs.2 swapctl.2 symlink.2 \
	sync.2 sysarch.2 syscall.2 thrkill.2 truncate.2 umask.2 unlink.2 \
	utimes.2 utrace.2 vfork.2 wait.2 write.2
@


1.150
log
@install futex(2), ok mpi
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.149 2017/04/30 09:01:14 mpi Exp $
a118 2
SYS_DEP =  ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h

d143 1
a143 1
FINISH=	${COMPILE.S} ${CFLAGS:M-[ID]*} ${CFLAGS:M-pipe} ${AINC} -P -x assembler-with-cpp -
d150 24
a173 24
${PASM}: ${SYS_DEP} ; @@${GENERATE.rsyscall} | ${FINISH.po}
${SASM}: ${SYS_DEP} ; @@${GENERATE.rsyscall} | ${FINISH.so}
${DASM}: ${SYS_DEP} ; @@${GENERATE.rsyscall} | ${FINISH.do}
${ASM}:  ${SYS_DEP} ; @@${GENERATE.rsyscall} | ${FINISH.o}

${PASM_NOERR}: ${SYS_DEP} ; @@${GENERATE.rsyscall_noerr} | ${FINISH.po}
${SASM_NOERR}: ${SYS_DEP} ; @@${GENERATE.rsyscall_noerr} | ${FINISH.so}
${DASM_NOERR}: ${SYS_DEP} ; @@${GENERATE.rsyscall_noerr} | ${FINISH.do}
${ASM_NOERR}:  ${SYS_DEP} ; @@${GENERATE.rsyscall_noerr} | ${FINISH.o}

${PPSEUDO}: ${SYS_DEP} ; @@${GENERATE.pseudo} | ${FINISH.po}
${SPSEUDO}: ${SYS_DEP} ; @@${GENERATE.pseudo} | ${FINISH.so}
${DPSEUDO}: ${SYS_DEP} ; @@${GENERATE.pseudo} | ${FINISH.do}
${PSEUDO}:  ${SYS_DEP} ; @@${GENERATE.pseudo} | ${FINISH.o}

${PPSEUDO_NOERR}: ${SYS_DEP} ; @@${GENERATE.pseudo_noerr} | ${FINISH.po}
${SPSEUDO_NOERR}: ${SYS_DEP} ; @@${GENERATE.pseudo_noerr} | ${FINISH.so}
${DPSEUDO_NOERR}: ${SYS_DEP} ; @@${GENERATE.pseudo_noerr} | ${FINISH.do}
${PSEUDO_NOERR}:  ${SYS_DEP} ; @@${GENERATE.pseudo_noerr} | ${FINISH.o}

${PHIDDEN}: ${SYS_DEP} ; @@${GENERATE.rsyscall_hidden} | ${FINISH.po}
${SHIDDEN}: ${SYS_DEP} ; @@${GENERATE.rsyscall_hidden} | ${FINISH.so}
${DHIDDEN}: ${SYS_DEP} ; @@${GENERATE.rsyscall_hidden} | ${FINISH.do}
${HIDDEN}:  ${SYS_DEP} ; @@${GENERATE.rsyscall_hidden} | ${FINISH.o}
@


1.149
log
@Add futex(2) shim, bump minor.

Inputs from guenther@@, ok kettenis@@, visa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.148 2017/03/29 16:29:02 deraadt Exp $
d182 1
a182 1
	fork.2 fsync.2 getentropy.2 getdents.2 getdtablecount.2 \
@


1.148
log
@The hppa version of as(1) requires whitespace before a .file directive,
it may not be in column 0.  This kind of thing is very common in GNU
and Linux software because the software was written from the start to
be 'compatible replacements' of vendor software.
ok jsing guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.147 2017/03/26 19:03:38 guenther Exp $
d90 1
@


1.147
log
@Use .file to convince 'as' to generate proper FILE symbols in the syscall
stubs that aren't actually in files, so that syspatch can figure out what
order the syscall stub objects are in the .so.  Use -P to suppress to #line
directives that would override that.  Tested with both gcc/gas and clang.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.146 2016/07/04 18:01:44 guenther Exp $
d125 1
a125 1
GEN_PREFIX=.file "${@@:R}.S"\n\#include "SYS.h"
@


1.146
log
@DEBUGLIBS has been broken since the gcc4 switch, so delete it.  CFLAGS
contains -g by default anyway

problem noted by Edgar Pettijohn (edgar (at) pettijohn-web.com)
ok millert@@ kettenis@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.145 2016/05/30 21:35:08 guenther Exp $
d125 1
d129 1
a129 1
	printf '\#include "SYS.h"\nRSYSCALL(${.PREFIX})\n'
d132 1
a132 1
	printf '\#include "SYS.h"\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX})\n'
d135 1
a135 1
	printf '\#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/^_//})\n'
d138 1
a138 1
	printf '\#include "SYS.h"\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX:S/^_//})\n'
d141 1
a141 1
	printf '\#include "SYS.h"\nRSYSCALL_HIDDEN(${.PREFIX:S/^_//})\n'
d144 1
a144 1
FINISH=	${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} -x assembler-with-cpp -
@


1.145
log
@Move __getcwd from ASM to HIDDEN: we don't want the literal __getcwd symbol

ok millert@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.144 2016/05/19 05:31:22 guenther Exp $
a82 1
GASM=	${ASM:.o=.go}
a94 1
GASM_NOERR=	${ASM_NOERR:.o=.go}
a99 1
GPSEUDO=${PSEUDO:.o=.go}
a106 1
GPSEUDO_NOERR=${PSEUDO_NOERR:.o=.go}
a111 1
GHIDDEN=${HIDDEN:.o=.go}
a143 1
FINISH.go=${FINISH} -o ${.TARGET}.o			&& ${TRIM.debug}
a149 1
${GASM}: ${SYS_DEP} ; @@${GENERATE.rsyscall} | ${FINISH.go}
a154 1
${GASM_NOERR}: ${SYS_DEP} ; @@${GENERATE.rsyscall_noerr} | ${FINISH.go}
a159 1
${GPSEUDO}: ${SYS_DEP} ; @@${GENERATE.pseudo} | ${FINISH.go}
a164 1
${GPSEUDO_NOERR}: ${SYS_DEP} ; @@${GENERATE.pseudo_noerr} | ${FINISH.go}
a169 1
${GHIDDEN}: ${SYS_DEP} ; @@${GENERATE.rsyscall_hidden} | ${FINISH.go}
@


1.144
log
@Add ASM_NOERR for syscalls that never fail and thus don't need the errno
setting logic...which can significantly reduce the size of the stub on
some archs; 20 syscalls get a trim with this.

in snaps for a bit and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.143 2016/05/09 23:55:52 guenther Exp $
d43 1
a43 1
ASM=	__getcwd.o __semctl.o __syscall.o __thrsigdivert.o \
d115 1
a115 1
HIDDEN= fork.o sigaction.o _ptrace.o ${CANCEL:=.o}
@


1.143
log
@Remove sigreturn declaration and the now-unused libc syscall stub
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.142 2016/05/07 19:05:22 guenther Exp $
d43 1
a43 3
ASM=	__get_tcb.o __getcwd.o __semctl.o __set_tcb.o __syscall.o \
	__threxit.o __thrsigdivert.o __thrsleep.o \
	__thrwakeup.o \
d53 6
a58 7
	getentropy.o getdents.o getdtablecount.o \
	getegid.o geteuid.o getfh.o getfsstat.o getgid.o \
	getgroups.o getitimer.o getpeername.o getpgid.o getpgrp.o \
	getpid.o getppid.o getpriority.o getresgid.o getresuid.o \
	getrlimit.o getrtable.o getrusage.o getsid.o getsockname.o \
	getsockopt.o getthrid.o gettimeofday.o getuid.o ioctl.o \
	issetugid.o kevent.o kill.o kqueue.o ktrace.o lchown.o \
d68 1
a68 1
	sched_yield.o semget.o semop.o sendsyslog.o \
d75 1
a75 1
	sync.o sysarch.o sysctl.o thrkill.o umask.o unlink.o unlinkat.o \
d88 13
d107 3
a109 1
PSEUDO_NOERR=	_exit.o getlogin_r.o
d121 1
a121 1
OBJS+=	${ASM} ${PSEUDO} ${PSEUDO_NOERR} ${HIDDEN}
d134 3
d161 6
@


1.142
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.141 2016/03/30 07:55:36 guenther Exp $
d10 1
a10 1
	sbrk.S sigpending.S sigprocmask.S sigreturn.S \
@


1.141
log
@Turd polish: use HIDDEN= instead of PSEUDO= for ptrace syscall stub, to
make its underlying symbol name look like others.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.140 2016/03/30 07:52:47 guenther Exp $
d9 1
a9 1
SRCS+=	Ovfork.S brk.S cerror.S fork.S \
d15 1
a15 1
	w_fork.c w_sigaction.c w_sigprocmask.c
d17 1
a17 2
# glue to provide compatibility between GCC 1.X and 2.X and for compat
# with old syscall interfaces.
d25 16
d45 2
a46 1
	__thrwakeup.o accept.o accept4.o access.o acct.o adjfreq.o adjtime.o \
d48 5
a52 4
	clock_getres.o clock_gettime.o clock_settime.o close.o \
	closefrom.o connect.o dup.o dup2.o dup3.o execve.o faccessat.o \
	fchdir.o fchflags.o fchmod.o fchmodat.o fchown.o \
	fchownat.o fcntl.o fhopen.o fhstat.o fhstatfs.o \
d54 2
a55 1
	fsync.o futimens.o futimes.o getentropy.o getdents.o getdtablecount.o \
d65 7
a71 8
	msgctl.o msgget.o msgrcv.o msgsnd.o msync.o munlock.o \
	munlockall.o munmap.o nanosleep.o nfssvc.o \
	open.o openat.o pathconf.o pipe.o pipe2.o pledge.o \
	poll.o ppoll.o profil.o pselect.o \
	quotactl.o read.o readlink.o readlinkat.o readv.o reboot.o \
	recvfrom.o recvmsg.o rename.o renameat.o revoke.o rmdir.o \
	sched_yield.o select.o semget.o semop.o sendmsg.o sendsyslog.o \
	sendto.o \
d79 1
a79 1
	unmount.o utimensat.o utimes.o utrace.o wait4.o write.o writev.o
d103 1
a103 1
HIDDEN= sigaction.o _ptrace.o
@


1.140
log
@Eliminate userspace caching by getlogin_r/setlogin; make the getlogin
syscall behave exactly like userspace getlogin_r() and rename it to
match.  Eliminate the reduced-to-no-op wrappers of the syscalls.
Eliminate the unnecessary per-thread static buffering by getlogin().

ok kettenis@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.139 2016/03/30 06:38:42 jmc Exp $
d74 1
a74 1
PSEUDO=	_ptrace.o
d86 1
a86 1
HIDDEN= sigaction.o
@


1.139
log
@for some time now mandoc has not required MLINKS to function
correctly - logically complete that now by removing MLINKS from base;

authors need only to ensure there is an entry in NAME for any function/
util being added. MLINKS will still work, and remain for perl to ease
upgrades;

ok nicm (curses) bcook (ssl)
ok schwarze, who provided a lot of feedback and assistance
ok tb natano jung
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.138 2016/03/21 22:41:28 bluhm Exp $
d55 1
a55 1
	setegid.o seteuid.o setgid.o setgroups.o setitimer.o \
d74 1
a74 1
PSEUDO=	_getlogin.o _setlogin.o _ptrace.o
d80 1
a80 1
PSEUDO_NOERR=	_exit.o
d107 1
a107 1
	printf '\#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n'
d110 1
a110 1
	printf '\#include "SYS.h"\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX:S/_//})\n'
d113 1
a113 1
	printf '\#include "SYS.h"\nRSYSCALL_HIDDEN(${.PREFIX:S/_//})\n'
@


1.138
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.137 2015/11/25 00:01:21 deraadt Exp $
a171 74

MLINKS+=__get_tcb.2 __set_tcb.2
MLINKS+=__thrsleep.2 __thrwakeup.2
MLINKS+=_exit.2 _Exit.2
MLINKS+=accept.2 accept4.2
MLINKS+=access.2 faccessat.2
MLINKS+=brk.2 sbrk.2
MLINKS+=chdir.2 fchdir.2
MLINKS+=chflags.2 chflagsat.2 chflags.2 fchflags.2
MLINKS+=chmod.2 fchmod.2 chmod.2 fchmodat.2
MLINKS+=chown.2 fchown.2 chown.2 fchownat.2 chown.2 lchown.2
MLINKS+=clock_gettime.2 clock_getres.2
MLINKS+=clock_gettime.2 clock_settime.2
MLINKS+=dup.2 dup2.2
MLINKS+=dup.2 dup3.2
MLINKS+=fhopen.2 fhstat.2 fhopen.2 fhstatfs.2
MLINKS+=fsync.2 fdatasync.2
MLINKS+=getgid.2 getegid.2
MLINKS+=getitimer.2 setitimer.2
MLINKS+=getitimer.2 timeradd.3
MLINKS+=getitimer.2 timerclear.3
MLINKS+=getitimer.2 timercmp.3
MLINKS+=getitimer.2 timerisset.3
MLINKS+=getitimer.2 timersub.3
MLINKS+=getlogin.2 getlogin_r.2 getlogin.2 setlogin.2
MLINKS+=getpgrp.2 getpgid.2
MLINKS+=getpid.2 getppid.2
MLINKS+=getpriority.2 setpriority.2
MLINKS+=getrlimit.2 setrlimit.2
MLINKS+=getrtable.2 setrtable.2
MLINKS+=getsockopt.2 setsockopt.2
MLINKS+=gettimeofday.2 settimeofday.2
MLINKS+=getuid.2 geteuid.2
MLINKS+=intro.2 errno.2
MLINKS+=kqueue.2 kevent.2 kqueue.2 EV_SET.2
MLINKS+=link.2 linkat.2
MLINKS+=madvise.2 posix_madvise.2
MLINKS+=mkdir.2 mkdirat.2
MLINKS+=mkfifo.2 mkfifoat.2
MLINKS+=mknod.2 mknodat.2
MLINKS+=mlock.2 munlock.2
MLINKS+=mlockall.2 munlockall.2
MLINKS+=mount.2 unmount.2
MLINKS+=open.2 openat.2
MLINKS+=pathconf.2 fpathconf.2
MLINKS+=pipe.2 pipe2.2
MLINKS+=poll.2 ppoll.2
MLINKS+=read.2 readv.2 read.2 pread.2 read.2 preadv.2
MLINKS+=readlink.2 readlinkat.2
MLINKS+=recv.2 recvfrom.2 recv.2 recvmsg.2
MLINKS+=rename.2 renameat.2
MLINKS+=select.2 pselect.2
MLINKS+=select.2 FD_ISSET.3 select.2 FD_ZERO.3
MLINKS+=select.2 FD_SET.3 select.2 FD_CLR.3
MLINKS+=send.2 sendmsg.2 send.2 sendto.2
MLINKS+=setpgid.2 setpgrp.2
MLINKS+=setresuid.2 getresgid.2 setresuid.2 getresuid.2
MLINKS+=setresuid.2 setresgid.2
MLINKS+=setuid.2 setegid.2 setuid.2 seteuid.2 setuid.2 setgid.2
MLINKS+=shmat.2 shmdt.2
MLINKS+=stat.2 S_ISBLK.2 stat.2 S_ISCHR.2 stat.2 S_ISDIR.2
MLINKS+=stat.2 S_ISFIFO.2 stat.2 S_ISLNK.2 stat.2 S_ISREG.2 stat.2 S_ISSOCK.2
MLINKS+=stat.2 fstat.2 stat.2 fstatat.2 stat.2 lstat.2
MLINKS+=statfs.2 fstatfs.2
MLINKS+=symlink.2 symlinkat.2
MLINKS+=syscall.2 __syscall.2
MLINKS+=truncate.2 ftruncate.2
MLINKS+=unlink.2 unlinkat.2
MLINKS+=utimes.2 futimens.2 utimes.2 futimes.2 utimes.2 utimensat.2
MLINKS+=wait.2 WEXITSTATUS.2 wait.2 WCOREDUMP.2 wait.2 WSTOPSIG.2
MLINKS+=wait.2 WIFCONTINUED.2 wait.2 WIFEXITED.2
MLINKS+=wait.2 WIFSIGNALED.2 wait.2 WIFSTOPPED.2 wait.2 WTERMSIG.2
MLINKS+=wait.2 wait3.2 wait.2 wait4.2 wait.2 waitpid.2
MLINKS+=write.2 writev.2 write.2 pwrite.2 write.2 pwritev.2
@


1.137
log
@Add a syscall stub for sendsyslog2(2), and use it in syslog_r(3), passing
LOG_CONS to the kernel.  As a result, the /dev/console opening code can
be removed.
ok kettenis millert beck
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.136 2015/11/10 04:30:59 guenther Exp $
d54 1
a54 1
	sendsyslog2.o sendto.o \
@


1.136
log
@Split the intra-thread functionality from kill(2) into its own syscall
thrkill(2), rolling the kill(2) syscall number with the ABI change to
avoid breaking binaries during during the transition.  thrkill(2) includes
a 'tcb' argument that eliminates the need for locking in pthread_kill()
and simplifies pthread_cancel().  Switch __stack_smash_handler() to use
thrkill(2) and explicitly unblock SIGABRT.

Minor bump to both libc and libpthread: make sure you install a new kernel!

ok semarie@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.135 2015/10/23 04:39:24 guenther Exp $
d53 2
a54 1
	sched_yield.o select.o semget.o semop.o sendmsg.o sendsyslog.o sendto.o \
@


1.135
log
@Merge the sigaction() and sigprocmask() overloads/wrappers from libpthread
into libc, and move pthread_sigmask() as well (just a trivial wrapper).
This provides consistent handling of SIGTHR between single- and multi-threaded
programs and is a step in the merge of all the libpthread overloads, providing
some ASM and Makefile bits that the other wrappers will need.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.134 2015/10/23 00:52:49 deraadt Exp $
d60 1
a60 1
	sync.o sysarch.o sysctl.o umask.o unlink.o unlinkat.o \
d169 1
a169 1
	sync.2 sysarch.2 syscall.2 truncate.2 umask.2 unlink.2 \
@


1.134
log
@Remove dnssocket() and dnsconnect(), since we decided to use a SOCK_DNS
flag instead.
ok guenther tedu semarie
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.133 2015/10/19 23:13:38 deraadt Exp $
d14 2
a15 1
SRCS+=	posix_madvise.c w_fork.c
d58 1
a58 1
	shmget.o shutdown.o sigaction.o sigaltstack.o socket.o \
d85 7
a91 1
OBJS+=	${ASM} ${PSEUDO} ${PSEUDO_NOERR}
d110 3
d140 6
@


1.133
log
@Remove old tame() stub
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.132 2015/10/18 00:36:20 deraadt Exp $
d32 1
a32 1
	closefrom.o dnsconnect.o connect.o dup.o dup2.o dup3.o execve.o faccessat.o \
d57 1
a57 1
	shmget.o shutdown.o sigaction.o sigaltstack.o dnssocket.o socket.o \
@


1.132
log
@create libc stubs for dnssocket() and dnsconnect()
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.131 2015/10/09 01:24:57 deraadt Exp $
d20 1
a20 1
	timer_settime.c pread.c preadv.c pwrite.c pwritev.c tame.c
@


1.131
log
@tame -> pledge conversion, in libc.  I should crank libc, but am cheating
hoping things go well.  The old symbol is faked via a stupid stub function,
until next major crank when it can be removed.  I am expecting guenther
to scream at me.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.130 2015/09/13 17:08:03 guenther Exp $
d32 1
a32 1
	closefrom.o connect.o dup.o dup2.o dup3.o execve.o faccessat.o \
d57 1
a57 1
	shmget.o shutdown.o sigaction.o sigaltstack.o socket.o \
@


1.130
log
@Rename __sysctl syscall to just sysctl, as the userland wrapper is no longer
necessary

ok deraadt@@ jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.129 2015/09/09 09:16:39 guenther Exp $
d20 1
a20 1
	timer_settime.c pread.c preadv.c pwrite.c pwritev.c
d48 1
a48 1
	open.o openat.o pathconf.o pipe.o pipe2.o \
d59 1
a59 1
	sync.o sysarch.o sysctl.o tame.o umask.o unlink.o unlinkat.o \
d145 1
a145 1
	nfssvc.2 open.2 pathconf.2 pipe.2 poll.2 profil.2 \
d153 1
a153 1
	sync.2 sysarch.2 syscall.2 tame.2 truncate.2 umask.2 unlink.2 \
@


1.129
log
@Simplify makefile rules for building the ASM stubs into "pick something
from column A and something from column B".

ok miod@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.128 2015/08/26 01:54:09 guenther Exp $
d28 1
a28 1
	__sysctl.o __threxit.o __thrsigdivert.o __thrsleep.o \
d58 2
a59 2
	socketpair.o stat.o statfs.o swapctl.o symlink.o \
	symlinkat.o sync.o sysarch.o tame.o umask.o unlink.o unlinkat.o \
@


1.128
log
@Hide many (194!) symbols that nothing should be using.
Delete exect(2); it wasn't portable across archs and nothing used it.

ports test build by naddy@@
ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.127 2015/08/25 19:58:04 guenther Exp $
d86 45
a130 113
${GASM}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nRSYSCALL(${.PREFIX})\n' | \
	    ${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} -x assembler-with-cpp - \
	    -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${PASM}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nRSYSCALL(${.PREFIX})\n' | \
	    ${COMPILE.S} -DPROF ${CFLAGS:M-[ID]*} ${AINC} \
	    -x assembler-with-cpp - -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${SASM}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nRSYSCALL(${.PREFIX})\n' | \
	    ${COMPILE.S} ${PICFLAG} ${CFLAGS:M-[ID]*} ${AINC} \
	    -x assembler-with-cpp - -o ${.TARGET}

${DASM}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nRSYSCALL(${.PREFIX})\n' | \
	    ${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} -x assembler-with-cpp - \
	     ${DIST_CFLAGS} -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${ASM}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nRSYSCALL(${.PREFIX})\n' | \
	    ${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} -x assembler-with-cpp - \
	     -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${GPSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} -x assembler-with-cpp - \
	    -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${PPSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${COMPILE.S} -DPROF ${CFLAGS:M-[ID]*} ${AINC} \
	    -x assembler-with-cpp - -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${SPSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${COMPILE.S} ${PICFLAG} ${CFLAGS:M-[ID]*} ${AINC} \
	    -x assembler-with-cpp - -o ${.TARGET}

${DPSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} -x assembler-with-cpp - \
	    ${DIST_CFLAGS} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${PSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} -x assembler-with-cpp - \
	    -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${GPSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} -x assembler-with-cpp - \
	    -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${PPSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${COMPILE.S} -DPROF ${CFLAGS:M-[ID]*} ${AINC} \
	    -x assembler-with-cpp - -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${SPSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${COMPILE.S} ${PICFLAG} ${CFLAGS:M-[ID]*} ${AINC} \
	    -x assembler-with-cpp - -o ${.TARGET}

${DPSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} -x assembler-with-cpp - \
	    ${DIST_CFLAGS} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${PSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} -x assembler-with-cpp - \
	    -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o
@


1.127
log
@Document kbind(2)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.126 2015/07/19 02:37:29 deraadt Exp $
d9 1
a9 1
SRCS+=	Ovfork.S brk.S cerror.S exect.S fork.S \
a237 1
MLINKS+=execve.2 exect.2
@


1.126
log
@manual page for tame(2).  not very good, so i will be hearing from jmc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.125 2015/04/07 01:27:07 guenther Exp $
d209 1
a209 1
	kill.2 kqueue.2 ktrace.2 link.2 listen.2 lseek.2 madvise.2 \
@


1.125
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.124 2014/12/08 20:56:11 guenther Exp $
d59 1
a59 1
	symlinkat.o sync.o sysarch.o umask.o unlink.o unlinkat.o \
d221 1
a221 1
	sync.2 sysarch.2 syscall.2 truncate.2 umask.2 unlink.2 \
@


1.124
log
@Add chflagsat(), modeled on fchmodat() with name to match FreeBSD.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.123 2014/11/14 00:24:28 guenther Exp $
d14 1
a14 1
SRCS+=	posix_madvise.c
@


1.123
log
@Add sched_yield(2) manpage
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.122 2014/08/31 04:02:08 guenther Exp $
d30 1
a30 1
	bind.o chdir.o chflags.o chmod.o chown.o chroot.o \
d231 1
a231 1
MLINKS+=chflags.2 fchflags.2
@


1.122
log
@Declare and document getthrid()

indirectly prodded by krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.121 2014/08/31 01:42:36 guenther Exp $
d215 1
a215 1
	rename.2 revoke.2 rmdir.2 select.2 semctl.2 semget.2 \
@


1.121
log
@Add additional kernel interfaces for setting close-on-exec on fds
when creating them: pipe2(), dup3(), accept4(), MSG_CMSG_CLOEXEC,
SOCK_CLOEXEC.  Includes SOCK_NONBLOCK support.

ok matthew@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.120 2014/08/14 17:55:28 tobias Exp $
d208 1
a208 1
	gettimeofday.2 getuid.2 intro.2 ioctl.2 issetugid.2 \
@


1.120
log
@fixed overrid(d)en typo

millert@@ and jmc@@ agree that "overriden" is wrong
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.119 2014/07/12 02:28:56 deraadt Exp $
d29 1
a29 1
	__thrwakeup.o accept.o access.o acct.o adjfreq.o adjtime.o \
d32 1
a32 1
	closefrom.o connect.o dup.o dup2.o execve.o faccessat.o \
d48 2
a49 1
	open.o openat.o pathconf.o pipe.o poll.o ppoll.o profil.o pselect.o \
d227 1
d237 1
d269 1
@


1.119
log
@document sendsyslog(2); ok guenther tedu matthew
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.118 2014/06/13 08:26:10 deraadt Exp $
d25 1
a25 1
# modules with default implementations on all architectures, unless overriden
@


1.118
log
@Add new getentropy() system call.  Code and pressure from matthew.
I accepted that he's right (again) to seperate this out from heavy
sysctl API and this will simply a variety of things.  Functionname
is not used by anyone in the ports tree, so we guess we can use it.
Shocking that no application has a function called this.
ok matthew & others who pushed him to start this early on
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.117 2014/03/18 22:36:30 miod Exp $
d51 1
a51 1
	sched_yield.o select.o semget.o semop.o sendmsg.o sendto.o \
d216 2
a217 2
	setresuid.2 setreuid.2 setsid.2 setuid.2 shmat.2 shmctl.2 \
	shmget.2 shutdown.2 sigaction.2 sigaltstack.2 sigpending.2 \
@


1.117
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.116 2013/10/13 23:30:12 guenther Exp $
d36 1
a36 1
	fsync.o futimens.o futimes.o getdents.o getdtablecount.o \
d203 4
a206 4
	fork.2 fsync.2 getdents.2 getdtablecount.2 getfh.2 getfsstat.2 \
	getgid.2 getgroups.2 getitimer.2 getlogin.2 getpeername.2 \
	getpgrp.2 getpid.2 getpriority.2 getrlimit.2 getrtable.2 \
	getrusage.2 getsid.2 getsockname.2 getsockopt.2 \
@


1.116
log
@Make it possible to build to reduced version of a library, including
just specific objects that are compiled with additional options to
reduce their size.  For use by distrib/ and crunchgen.

style and naming assistance from espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.115 2013/10/07 01:50:26 guenther Exp $
a59 4

# modules with specific implementations on some architectures, and the
# default implementation elsewhere:
SRCS_m68k=	__get_tcb.S shmat.S
@


1.115
log
@getdirentries(2) is dead; long live getdents(2)!

confirmation that getdirentries(2) is unused by ports from sthen@@ and naddy@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.114 2013/08/13 05:52:13 guenther Exp $
d73 1
d79 1
d85 1
d111 8
d149 8
d186 8
@


1.114
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.113 2013/06/05 04:06:08 guenther Exp $
d180 1
a180 1
	fork.2 fsync.2 getdirentries.2 getdtablecount.2 getfh.2 getfsstat.2 \
@


1.113
log
@Move _Exit() from the exit() manpage to the _exit() manpage, as it's
just an alias of the latter.

ok matthew@@ tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.112 2013/06/01 09:49:53 miod Exp $
d36 1
a36 1
	fsync.o futimens.o futimes.o getdirentries.o getdtablecount.o \
@


1.112
log
@Add utrace(2), a system call allowing for userland to send its own ktrace
records. From FreeBSD via otto@@, with tweaks suggested by guenther@@.
Commite on behalf of otto@@ who is not around, to ride the libc minor bump.
Causes a librthread minor bump as well (new syscall).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.111 2013/04/29 17:06:20 matthew Exp $
d202 1
@


1.111
log
@Extend P_SIGSUSPEND handling in userret() to properly restore the
sigmask even if there are no pending signals under the temporary
sigmask.

Refactor existing select() and poll() system calls to introduce the
pselect() and ppoll() system calls.

Add rthread wrappers for pselect() and ppoll().  While there, update
cancellation point comments to reflect recent fdatasync() addition.

Minor bumps for libc and librthread due to new symbols.

ok guenther, millert, deraadt, jmc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.110 2013/04/15 16:38:21 matthew Exp $
d59 1
a59 1
	unmount.o utimensat.o utimes.o wait4.o write.o writev.o
d198 1
a198 1
	utimes.2 vfork.2 wait.2 write.2
@


1.110
log
@Implement fdatasync() as a wrapper around fsync()

ok guenther, deraadt, jmc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.109 2013/02/03 10:38:40 miod Exp $
d48 1
a48 1
	open.o openat.o pathconf.o pipe.o poll.o profil.o \
d242 1
d247 1
@


1.109
log
@gremlin crept in
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.108 2013/02/02 13:29:14 miod Exp $
d213 1
@


1.108
log
@Userland bits for m68k/ELF. Mostly addition of register prefixes to the
assembler instructions, and cope with the few changes in return values
location.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.107 2012/09/04 03:10:42 okan Exp $
d63 1
a63 1
SRCS_m68k=	__get_tcb.S shmat.S chdir.S
@


1.107
log
@remove lint leftovers; ok guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.106 2012/08/23 06:19:48 deraadt Exp $
d25 2
a26 1
# modules with default implementations on all architectures:
d60 9
@


1.106
log
@no more nnpfspioctl() system call; ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.105 2012/08/22 17:19:34 pascal Exp $
a12 12
LSRCS+=	Lint_Ovfork.c Lint_brk.c Lint_exect.c Lint_fork.c Lint_sbrk.c \
	Lint_sigpending.c Lint_sigprocmask.c Lint_sigreturn.c \
	Lint_sigsuspend.c Lint_syscall.c Lint_crt.c Lint_environ.c \
	Lint_setjmp.c Lint_longjmp.c \
	Lint_sigsetjmp.c Lint_siglongjmp.c
DPSRCS+= Lint_Ovfork.c Lint_brk.c Lint_exect.c Lint_fork.c \
	Lint_sbrk.c \
	Lint_sigpending.c Lint_sigprocmask.c Lint_sigreturn.c \
	Lint_sigsuspend.c Lint_syscall.c Lint_crt.c Lint_environ.c \
	Lint_setjmp.c Lint_longjmp.c \
	Lint_sigsetjmp.c Lint_siglongjmp.c

a164 26

# Lint stubs for all automatically-generated assembly stubs (GENERATED)
#LSRCS+=	LintSysNormal.c LintSysNoerr.c LintSysPseudoNoerr.c
#DPSRCS+= LintSysNormal.c LintSysNoerr.c LintSysPseudoNoerr.c
LSRCS+=	LintSysNormal.c LintSysPseudoNoerr.c
DPSRCS+= LintSysNormal.c LintSysPseudoNoerr.c

CLEANFILES+= LintSysNormal.c LintSysNoerr.c LintSysPseudoNoerr.c

LintSysNormal.c: ${LIBCSRCDIR}/sys/makelintstub.sh \
    ${DESTDIR}/usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@sh ${LIBCSRCDIR}/sys/makelintstub.sh -o ${.TARGET} \
	    -s ${DESTDIR}/usr/include/sys/syscall.h ${ASM}

LintSysNoerr.c: ${LIBCSRCDIR}/sys/makelintstub.sh \
    ${DESTDIR}/usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@sh ${LIBCSRCDIR}/sys/makelintstub.sh -o ${.TARGET} -n \
	    -s ${DESTDIR}/usr/include/sys/syscall.h ${NOERR}

LintSysPseudoNoerr.c: ${LIBCSRCDIR}/sys/makelintstub.sh \
    ${DESTDIR}/usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@sh ${LIBCSRCDIR}/sys/makelintstub.sh -o ${.TARGET} -p \
	    -s ${DESTDIR}/usr/include/sys/syscall.h ${PSEUDO_NOERR}
@


1.105
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.103 2012/06/19 09:40:39 deraadt Exp $
d58 1
a58 1
	munlockall.o munmap.o nanosleep.o nfssvc.o nnpfspioctl.o \
@


1.104
log
@Kill an old mips workaround; we don't support mips, just mips64.

ok deraadt@@ kettenis@@
@
text
@d91 2
a92 1
	    ${CPP} ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
d99 2
a100 1
	    ${CPP} -DPROF ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
d107 2
a108 2
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | \
	    ${AS} ${ASPICFLAG} -o ${.TARGET}
d113 2
a114 1
	    ${CPP} ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
d121 2
a122 1
	    ${CPP} ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
d129 2
a130 1
	    ${CPP} -DPROF ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
d137 2
a138 2
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | \
	    ${AS} ${ASPICFLAG} -o ${.TARGET}
d143 2
a144 1
	    ${CPP} ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
d151 2
a152 1
	    ${CPP} ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
d159 2
a160 1
	    ${CPP} -DPROF ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
d167 2
a168 2
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | \
	    ${AS} ${ASPICFLAG} -o ${.TARGET}
d173 2
a174 1
	    ${CPP} ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
@


1.103
log
@oops, forgot to install getdtablecount(2); noted by tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.102 2012/04/12 12:33:04 deraadt Exp $
a101 1
.if (${MACHINE_CPU} != "mips")
a106 6
.else
${SASM}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nRSYSCALL(${.PREFIX})\n' | \
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}
.endif
a128 1
.if (${MACHINE_CPU} != "mips")
a133 6
.else
${SPSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}
.endif
a155 1
.if (${MACHINE_CPU} != "mips")
a160 6
.else
${SPSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_CPU}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO_NOERROR(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}
.endif
@


1.102
log
@remove rfork(); ok guenther miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.101 2012/04/12 11:16:24 deraadt Exp $
d219 2
a220 2
	closefrom.2 connect.2 dup.2 execve.2 fcntl.2 fhopen.2 \
	flock.2 fork.2 fsync.2 getdirentries.2 getfh.2 getfsstat.2 \
@


1.101
log
@kill lfs system call lines and libc stubs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.100 2012/04/12 11:07:19 deraadt Exp $
d9 1
a9 1
SRCS+=	Ovfork.S brk.S cerror.S exect.S fork.S rfork.S \
d13 1
a13 2
LSRCS+=	Lint_Ovfork.c Lint_brk.c Lint_exect.c Lint_fork.c \
	Lint_rfork.c Lint_sbrk.c \
d216 23
a238 25
MAN+=	accept.2 access.2 acct.2 adjfreq.2 adjtime.2 bind.2 brk.2 chdir.2 \
	chflags.2 \
	chmod.2 chown.2 chroot.2 clock_gettime.2 close.2 closefrom.2 connect.2 \
	dup.2 execve.2 _exit.2 fcntl.2 fhopen.2 \
	flock.2 fork.2 fsync.2 getdirentries.2 getdtablecount.2 \
	getfh.2 getfsstat.2 getgid.2 getgroups.2 getitimer.2 getlogin.2 \
	getpeername.2 getpgrp.2 getrtable.2 __get_tcb.2 \
	getpid.2 getpriority.2 getrlimit.2 getrusage.2 getsid.2 getsockname.2 \
	getsockopt.2 gettimeofday.2 getuid.2 intro.2 issetugid.2 ioctl.2 \
	kill.2 kqueue.2 ktrace.2 link.2 \
	listen.2 lseek.2 mkdir.2 mkfifo.2 mknod.2 madvise.2 \
	mquery.2 mincore.2 minherit.2 mlock.2 mlockall.2 \
	mmap.2 mount.2 mprotect.2 msync.2 munmap.2 nanosleep.2 \
	nfssvc.2 open.2 pathconf.2 \
	pipe.2 profil.2 poll.2 ptrace.2 quotactl.2 read.2 readlink.2 reboot.2 \
	recv.2 rename.2 revoke.2 rfork.2 rmdir.2 select.2 send.2 setgroups.2 \
	setpgid.2 setregid.2 setreuid.2 setresuid.2 setsid.2 setuid.2 \
	shutdown.2 sigaction.2 sigaltstack.2 sigpending.2 sigprocmask.2 \
	sigreturn.2 sigsuspend.2 socket.2 socketpair.2 stat.2 \
	statfs.2 swapctl.2 symlink.2 sync.2 sysarch.2 syscall.2 \
	__thrsigdivert.2 __thrsleep.2 truncate.2 \
	umask.2 unlink.2 utimes.2 vfork.2 wait.2 write.2

MAN+=	msgctl.2 shmctl.2 shmat.2 semop.2 semget.2 semctl.2 msgsnd.2 msgrcv.2 \
	msgget.2 shmget.2
d240 2
a243 1
MLINKS+=dup.2 dup2.2
d248 1
d250 1
a250 1
MLINKS+=clock_gettime.2 clock_getres.2
d265 1
a266 2
MLINKS+=getrtable.2 setrtable.2
MLINKS+=__get_tcb.2 __set_tcb.2
d269 1
a271 1
MLINKS+=intro.2 errno.2
d283 1
d285 2
a286 1
MLINKS+=recv.2 recvfrom.2 recv.2 recvmsg.2
a288 1
MLINKS+=setuid.2 setegid.2 setuid.2 seteuid.2 setuid.2 setgid.2
d291 1
a292 1
MLINKS+=stat.2 fstat.2 stat.2 fstatat.2 stat.2 lstat.2
d295 1
a298 1
MLINKS+=__thrsleep.2 __thrwakeup.2
d302 3
a306 5
MLINKS+=select.2 FD_SET.3 select.2 FD_CLR.3
MLINKS+=select.2 FD_ISSET.3 select.2 FD_ZERO.3
MLINKS+=wait.2 WIFCONTINUED.2 wait.2 WIFEXITED.2
MLINKS+=wait.2 WIFSIGNALED.2 wait.2 WIFSTOPPED.2 wait.2 WTERMSIG.2
MLINKS+=wait.2 WEXITSTATUS.2 wait.2 WCOREDUMP.2 wait.2 WSTOPSIG.2
@


1.100
log
@New system call: getdtablecount(2) returns the number of file
descriptors the process currently has open.
ok guenther miod gilles ...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.99 2012/03/22 00:44:55 guenther Exp $
a54 1
	lfs_bmapv.o lfs_markv.o lfs_segclean.o lfs_segwait.o \
@


1.99
log
@Move __tfork_thread() from rthreads (libpthread) to libc so that
it can be used for not-strictly-threading purposes

ok matthew@@ kurt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.98 2012/03/13 15:55:46 guenther Exp $
d39 34
a72 35
ASM=	accept.o access.o acct.o adjfreq.o adjtime.o bind.o chdir.o chflags.o \
	chmod.o \
	chown.o chroot.o clock_gettime.o clock_settime.o clock_getres.o \
	close.o closefrom.o connect.o dup.o dup2.o execve.o fchdir.o \
	fchflags.o fchmod.o fchown.o fcntl.o fhopen.o fhstat.o fhstatfs.o \
	flock.o fpathconf.o fstat.o \
	fstatfs.o fsync.o futimes.o getdirentries.o getegid.o geteuid.o \
	getfh.o getfsstat.o getgid.o getgroups.o getitimer.o \
	getpeername.o \
	getpgid.o \
	getpgrp.o getpid.o getppid.o getpriority.o getresgid.o getresuid.o \
	getrlimit.o getrusage.o getsid.o \
	getsockname.o getsockopt.o gettimeofday.o getuid.o issetugid.o \
	ioctl.o kill.o kevent.o kqueue.o \
	ktrace.o lchown.o lfs_bmapv.o lfs_markv.o lfs_segclean.o lfs_segwait.o \
	link.o listen.o lstat.o madvise.o mincore.o minherit.o mkdir.o \
	mkfifo.o mknod.o mlock.o mlockall.o \
	mount.o mprotect.o msgctl.o msgget.o msgrcv.o msgsnd.o msync.o \
	munlock.o munlockall.o munmap.o nanosleep.o nfssvc.o \
	open.o pathconf.o pipe.o poll.o profil.o quotactl.o \
	read.o readlink.o readv.o reboot.o recvfrom.o recvmsg.o rename.o \
	revoke.o rmdir.o select.o semget.o semop.o sendmsg.o sendto.o \
	setegid.o seteuid.o setgid.o setgroups.o setitimer.o setpgid.o \
	setpriority.o setregid.o setreuid.o setresgid.o setresuid.o \
	setrlimit.o setsid.o setsockopt.o settimeofday.o \
	setuid.o shmat.o shmctl.o shmdt.o shmget.o shutdown.o sigaction.o \
	sigaltstack.o socket.o socketpair.o stat.o statfs.o swapctl.o \
	symlink.o sync.o sysarch.o umask.o unlink.o unmount.o \
	utimes.o wait4.o write.o writev.o nnpfspioctl.o __semctl.o \
	__syscall.o __sysctl.o __getcwd.o sched_yield.o getthrid.o \
	__thrsleep.o __thrwakeup.o __threxit.o __thrsigdivert.o \
	setrtable.o getrtable.o __set_tcb.o __get_tcb.o \
	openat.o fchmodat.o fstatat.o mkdirat.o mkfifoat.o mknodat.o \
	faccessat.o fchownat.o linkat.o readlinkat.o renameat.o symlinkat.o \
	unlinkat.o utimensat.o futimens.o
d222 1
a222 1
	flock.2 fork.2 fsync.2 getdirentries.2 \
@


1.98
log
@Add manpages for __thrsigdivert, __thrsleep, and __thrwakeup.  Various
syntax and grammar fixes from jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.97 2012/01/17 02:34:18 guenther Exp $
d11 1
a11 1
	sigsuspend.S syscall.S
@


1.97
log
@Reimplement mutexes, condvars, and rwlocks to eliminate bugs,
particularly the "consume the signal you just sent" hang, and putting
the wait queues in userspace.

Do cancellation handling in pthread_cond_*wait(), pthread_join(),
and sem_wait().

Add __ prefix to thr{sleep,wakeup,exit,sigdivert}() syscalls; add
'abort" argument to thrsleep to close cancellation race; make
thr{sleep,wakeup} return errno values via *retval to avoid touching
userspace errno.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.96 2011/11/22 21:13:30 guenther Exp $
d238 2
a239 1
	statfs.2 swapctl.2 symlink.2 sync.2 sysarch.2 syscall.2 truncate.2 \
d301 1
@


1.96
log
@sigstack() is long dead, and the compat sigaltstack syscall is gone too.
Correct the namespace protections for sigreturn(), sigwait(), and psignal()

ok millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.95 2011/10/16 06:21:52 guenther Exp $
d69 1
a69 1
	thrsleep.o thrwakeup.o threxit.o thrsigdivert.o \
@


1.95
log
@Add stubs and manpage for __{get,set}_tcb

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.94 2011/07/18 23:04:40 matthew Exp $
d237 1
a237 1
	sigreturn.2 sigstack.2 sigsuspend.2 socket.2 socketpair.2 stat.2 \
@


1.94
log
@Add (rough draft) documentation for fdopendir(3) and the 15 new
XXXat(2) system calls from POSIX 2008.  Editing will be done in tree.

General style discussed with jmc@@, schwarze@@, and deraadt@@
ok jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.93 2011/07/18 17:29:49 matthew Exp $
d70 1
a70 1
	setrtable.o getrtable.o \
d225 1
a225 1
	getpeername.2 getpgrp.2 getrtable.2 \
d269 1
@


1.93
log
@Expose a bunch of new functionality from POSIX 2008: openat(2),
fchmodat(2), fstatat(2), mkdirat(2), mkfifoat(2), mknodat(2),
faccessat(2), fchownat(2), linkat(2), readlinkat(2), renameat(2),
symlinkat(2), unlinkat(2), utimensat(2), futimens(2), and
fdopendir(3).

"Minor" libc bump.

Tested in a bulk build by naddy@@
Much help from guenther@@, thib@@, tedu@@, oga@@, and others.
ok deraadt@@, naddy@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.92 2010/07/03 04:44:51 guenther Exp $
d244 1
d249 2
a250 3
MLINKS+=chmod.2 fchmod.2
MLINKS+=chown.2 fchown.2
MLINKS+=chown.2 lchown.2
d272 1
d275 3
d281 1
d284 2
d293 1
a293 1
MLINKS+=stat.2 fstat.2 stat.2 lstat.2
d297 1
d300 2
a301 1
MLINKS+=utimes.2 futimes.2
@


1.92
log
@Fix the naming of interfaces and variables for rdomains and rtables
and make it possible to bind sockets (including listening sockets!)
to rtables and not just rdomains.  This changes the name of the
system calls, socket option, and ioctl.  After building with this
you should remove the files /usr/share/man/cat2/[gs]etrdomain.0.

Since this removes the existing [gs]etrdomain() system calls, the
libc major is bumped.

Written by claudio@@, criticized^Wcritiqued by me
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.91 2010/07/01 19:15:30 deraadt Exp $
d70 4
a73 1
	setrtable.o getrtable.o
@


1.91
log
@getpeereid() can now be a library routine using getsockopt() with
SOL_SOCKET and SO_PEERCRED, only issue being that it cannot return
EFAULT for a page fault.  The kernel code will soon be put into
compat, and then in 10 years or so tedu will delete it.
ok guenther millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.90 2010/05/18 22:24:55 tedu Exp $
d70 1
a70 1
	setrdomain.o getrdomain.o
d222 1
a222 1
	getpeername.2 getpgrp.2 getrdomain.2 \
d265 1
a265 1
MLINKS+=getrdomain.2 setrdomain.2
@


1.90
log
@add posix_madvise, posix_memalign, strndup, and strnlen.  mostly from
brad and millert, with hints from guenther, jmc, and otto I think.
ok previous.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.89 2010/02/03 20:49:00 miod Exp $
d46 1
a46 1
	getfh.o getfsstat.o getgid.o getgroups.o getitimer.o getpeereid.o \
d222 1
a222 1
	getpeername.2 getpeereid.2 getpgrp.2 getrdomain.2 \
@


1.89
log
@Use MACHINE_CPU instead of MACHINE_ARCH to pick the correct machine dependent
files or directories when applicable.
The inspiration and name of MACHINE_CPU come from NetBSD, although the way to
provide it to Makefiles is completely different.
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.88 2009/11/27 20:05:50 guenther Exp $
d26 3
d270 1
@


1.88
log
@Add setrdomain() and getrdomain() system calls.  Committing now to
catch the libc major bump per request from deraadt@@

Diff by reyk.

ok guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.87 2009/08/13 19:54:58 jmc Exp $
d6 1
a6 1
.PATH: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/sys ${LIBCSRCDIR}/sys
d85 1
a85 1
${GASM}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d92 1
a92 1
${PASM}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d99 2
a100 2
.if (${MACHINE_ARCH} != "mips")
${SASM}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d106 1
a106 1
${SASM}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d112 1
a112 1
${ASM}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d119 1
a119 1
${GPSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d126 1
a126 1
${PPSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d133 2
a134 2
.if (${MACHINE_ARCH} != "mips")
${SPSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d140 1
a140 1
${SPSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d146 1
a146 1
${PSEUDO}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d153 1
a153 1
${GPSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d160 1
a160 1
${PPSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d167 2
a168 2
.if (${MACHINE_ARCH} != "mips")
${SPSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d174 1
a174 1
${SPSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d180 1
a180 1
${PSEUDO_NOERR}: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
@


1.87
log
@various MLINK fixes from Alan R. S. Bueno;
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.86 2009/06/03 14:45:47 jj Exp $
d66 2
a67 1
	thrsleep.o thrwakeup.o threxit.o thrsigdivert.o
d219 1
a219 1
	getpeername.2 getpeereid.2 getpgrp.2 \
d262 1
@


1.86
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.85 2008/03/22 19:18:42 otto Exp $
d263 1
a263 1
MLINKS+=kqueue.2 kevent.2
@


1.85
log
@move statvfs.c to gen, since it is not a syscall; ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.84 2008/03/16 19:44:34 otto Exp $
d64 1
a64 1
	utimes.o wait4.o write.o writev.o xfspioctl.o __semctl.o \
@


1.84
log
@statvfs support
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.83 2008/01/05 02:11:44 deraadt Exp $
d30 1
a30 1
	timer_settime.c pread.c preadv.c pwrite.c pwritev.c statvfs.c
@


1.83
log
@no more need for vadvise.o
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.82 2007/09/09 19:22:45 otto Exp $
d30 1
a30 1
	timer_settime.c pread.c preadv.c pwrite.c pwritev.c
@


1.82
log
@Add lint stubs for the longjmp family of functions which are defined in
assembly on all platforms. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.81 2007/09/09 18:46:34 otto Exp $
d64 1
a64 1
	utimes.o vadvise.o wait4.o write.o writev.o xfspioctl.o __semctl.o \
@


1.81
log
@Silence erroneous "environ used, but not defined" lint warning by
providing a stub. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.80 2006/10/24 04:40:59 tedu Exp $
d16 3
a18 1
	Lint_sigsuspend.c Lint_syscall.c Lint_crt.c Lint_environ.c
d22 3
a24 1
	Lint_sigsuspend.c Lint_syscall.c Lint_crt.c Lint_environ.c
@


1.80
log
@add rthread syscalls and bump minor.
rthreads are hardly done, but if just trying it out is too much of a hassle,
we'll never make more progress.
ok brad marc marco mbalmer
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.79 2006/10/10 14:18:17 deraadt Exp $
d16 1
a16 1
	Lint_sigsuspend.c Lint_syscall.c Lint_crt.c
d20 1
a20 1
	Lint_sigsuspend.c Lint_syscall.c Lint_crt.c
@


1.79
log
@MLINKS to macros described in stat(2)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.78 2006/06/14 19:55:24 otto Exp $
d61 2
a62 1
	__syscall.o __sysctl.o __getcwd.o
@


1.78
log
@Introducing adjfreq(2), to adjust the clock frequency.
Loosely based on dragonfly code. Man page help fro jmc@@; ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.77 2006/05/27 16:14:02 pedro Exp $
d273 2
@


1.77
log
@Make libc's getcwd() use the new __getcwd() system call
Hacked by marius@@ at c2k5, okay miod@@ krw@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.76 2006/03/13 19:00:58 moritz Exp $
d32 2
a33 1
ASM=	accept.o access.o acct.o adjtime.o bind.o chdir.o chflags.o chmod.o \
d207 2
a208 1
MAN+=	accept.2 access.2 acct.2 adjtime.2 bind.2 brk.2 chdir.2 chflags.2 \
@


1.76
log
@Clean the correct file. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.75 2005/11/29 21:29:15 deraadt Exp $
d60 1
a60 1
	__syscall.o __sysctl.o
@


1.75
log
@Provide stubs for things which are supplied by crt0.  I don't think we
want a crt0.ln, at least, not yet.  We may reconsider later.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.74 2005/10/03 11:35:53 jmc Exp $
d186 1
a186 1
CLEANFILES+= LintSysNormal.c LintSysNoerr.c LintSysPseudo.c
@


1.74
log
@add missing MLINK for WEXITSTATUS.2
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.73 2005/06/17 20:37:31 drahn Exp $
d16 1
a16 1
	Lint_sigsuspend.c Lint_syscall.c
d20 1
a20 1
	Lint_sigsuspend.c Lint_syscall.c
@


1.73
log
@Extended Attributes was a piece to get to ACLs, however ACLs have not
been worked on, so EA is pointless to maintain.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.72 2005/06/17 20:36:10 millert Exp $
d281 1
a281 1
MLINKS+=wait.2 WCOREDUMP.2 wait.2 WSTOPSIG.2
@


1.72
log
@remove undelete syscall
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.71 2004/09/18 19:21:46 deraadt Exp $
a61 4
ASM+=	extattrctl.o extattr_set_file.o extattr_get_file.o \
	extattr_delete_file.o extattr_set_fd.o extattr_get_fd.o \
	extattr_delete_fd.o

a225 8

MAN+=	extattr_get_file.2
MLINKS+=extattr_get_file.2 extattr_set_file.2 \
	extattr_get_file.2 extattr_delete_file.2 \
	extattr_get_file.2 extattr_get_fd.2 \
	extattr_get_file.2 extattr_set_fd.2 \
	extattr_get_file.2 extattr_delete_fd.2 \
	extattr_get_file.2 extattr.2
@


1.71
log
@MLINK to macros provided in wait.2
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.70 2004/09/16 08:37:46 deraadt Exp $
d58 1
a58 1
	symlink.o sync.o sysarch.o umask.o undelete.o unlink.o unmount.o \
@


1.70
log
@add files missing for building a proper lint library
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.69 2004/02/13 22:15:29 tedu Exp $
d291 3
@


1.69
log
@death to osigaltstack.  ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.68 2004/01/15 13:40:22 deraadt Exp $
d14 1
a14 1
	Lint_sbrk.c \
d187 2
a188 2
LSRCS+=	LintSysNormal.c
DPSRCS+= LintSysNormal.c
d208 1
a208 1
	    -s ${DESTDIR}/usr/include/sys/syscall.h ${PSEUDONOERR}
@


1.68
log
@ABI breakage happened with the sigaltstack replacement.  It is too late,
now we just have to cope.  Since setjmp uses it, the alpha and sparc64 are
unhappy with the structure change.  In a few days, we will make the second
hop here, for now, use the old system call until all binaries have the new
struct in them.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.67 2004/01/12 18:27:28 tedu Exp $
a49 1
	osigaltstack.o \
@


1.67
log
@new syscall closefrom(2).  ok deraadt millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.66 2003/05/10 17:52:17 miod Exp $
d50 1
@


1.66
log
@Do not let userland access the swapon system call anymore (nothing uses it
anyway).
ok deraadt@@ weingart@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.65 2003/04/14 04:53:50 art Exp $
d34 1
a34 1
	close.o connect.o dup.o dup2.o execve.o fchdir.o \
d211 2
a212 2
	chmod.2 chown.2 chroot.2 clock_gettime.2 close.2 connect.2 dup.2 \
	execve.2 _exit.2 fcntl.2 fhopen.2 \
@


1.65
log
@There are two related changes.

The first one is an mquery(2) syscall. It's for asking the VM system
about where to map things. It will be used by ld.so, read the man page
for details.

The second change is related and is a centralization of uvm_map hint
that all callers of uvm_map calculated. This will allow us to adjust
this hint on architectures that have segments for non-exec mappings.

deraadt@@ drahn@@ ok.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.64 2003/01/31 21:47:46 millert Exp $
d57 1
a57 1
	sigaltstack.o socket.o socketpair.o stat.o statfs.o swapon.o swapctl.o \
@


1.64
log
@Replace emulated versions of setreuid() and setregid() with real syscalls.
These are spec'd by POSIX as of 1003.1-2001; deraadt@@ OK
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.63 2002/12/02 15:54:14 millert Exp $
d24 1
a24 1
SRCS+=	ftruncate.c lseek.c mmap.c ptrace.c semctl.c truncate.c \
d219 2
a220 2
	listen.2 lseek.2 mkdir.2 mkfifo.2 mknod.2 madvise.2 mincore.2 \
	minherit.2 mlock.2 mlockall.2 \
@


1.63
log
@Document getlogin_r()
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.62 2002/12/02 09:00:14 miod Exp $
d54 2
a55 2
	setpriority.o setresgid.o setresuid.o setrlimit.o setsid.o \
	setsockopt.o settimeofday.o \
d225 5
a229 5
	setpgid.2 setresuid.2 setsid.2 setuid.2 shutdown.2 sigaction.2 \
	sigaltstack.2 sigpending.2 sigprocmask.2 sigreturn.2 sigstack.2 \
	sigsuspend.2 socket.2 socketpair.2 stat.2 statfs.2 swapctl.2 symlink.2 \
	sync.2 sysarch.2 syscall.2 truncate.2 umask.2 unlink.2 utimes.2 \
	vfork.2 wait.2 write.2
@


1.62
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.61 2002/11/10 03:21:02 fgsch Exp $
d260 1
a260 1
MLINKS+=getlogin.2 setlogin.2
@


1.61
log
@missing MLINKs for setresuid(2). millert ok.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.59 2002/11/03 23:58:39 marc Exp $
d27 3
@


1.60
log
@
thread safe libc -- 2nd try.   OK miod@@, millert@@
Thanks to miod@@ for m68k and vax fixes
@
text
@d276 2
@


1.59
log
@back out previous patch.. there are still some vax/m68k issues
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.58 2002/11/03 20:36:43 marc Exp $
a6 5

# for now, only arch's below have weak aliases enabled
.if ${MACHINE_ARCH} != "i386" && ${ELF_TOOLCHAIN} != "yes"
CFLAGS+=	-D_NO_WEAK_ALIASES
.endif
@


1.58
log
@
libc changes for thread safety.  Tested on:
alpha (millert@@), i386 (marc@@), m68k (millert@@ and miod@@),
powerpc (drahn@@ and dhartmei@@), sparc (millert@@ and marc@@),
sparc64 (marc@@), and vax (millert@@ and miod@@).
Thanks to millert@@, miod@@, and mickey@@ for fixes along the way.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.57 2002/10/30 20:15:29 millert Exp $
d7 5
@


1.57
log
@Add [gs]etres[ug]id(2) syscall to libc and use it in emulating some 4.3BSD
functions.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.56 2002/08/05 22:42:12 art Exp $
a6 5

# for now, only arch's below have weak aliases enabled
.if ${MACHINE_ARCH} != "i386" && ${ELF_TOOLCHAIN} != "yes"
CFLAGS+=	-D_NO_WEAK_ALIASES
.endif
@


1.56
log
@Fix brain blackout.
Pointed out byb miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.55 2002/08/05 15:31:12 art Exp $
d43 2
a44 2
	getpgrp.o getpid.o getppid.o getpriority.o getrlimit.o getrusage.o \
	getsid.o \
d56 2
a57 1
	setpriority.o setrlimit.o setsid.o setsockopt.o settimeofday.o \
d227 5
a231 5
	setpgid.2 setsid.2 setuid.2 shutdown.2 sigaction.2 sigaltstack.2 \
	sigpending.2 sigprocmask.2 sigreturn.2 sigstack.2 sigsuspend.2 \
	socket.2 socketpair.2 stat.2 statfs.2 swapctl.2 symlink.2 sync.2 \
	sysarch.2 syscall.2 truncate.2 umask.2 unlink.2 utimes.2 vfork.2 \
	wait.2 write.2
@


1.55
log
@One more ELF_TOOLCHAIN.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.54 2002/07/06 19:14:20 nordin Exp $
d9 1
a9 1
.if ${MACHINE_ARCH} != "i386" || ${ELF_TOOLCHAIN} == "yes"
@


1.54
log
@Remove kernel support for NTP. ok deraadt@@ and tholo@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.53 2002/06/10 17:46:41 fgsch Exp $
d9 1
a9 1
.if ${MACHINE_ARCH} != "i386" && ${MACHINE_ARCH} != "powerpc" && ${MACHINE_ARCH} != "sparc64" && ${MACHINE_ARCH} != "alpha"
@


1.53
log
@correct comment.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.52 2002/06/08 20:55:31 drahn Exp $
a51 1
	ntp_gettime.o ntp_adjtime.o \
@


1.52
log
@ELF architectures all support weak aliases, enable them for this part.
ok fgsch@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.51 2002/02/22 21:06:01 drahn Exp $
d8 1
a8 1
# for now, only i386 has usable weak aliases
@


1.51
log
@Extended Attribute support, from FreeBSD/TrustedBSD. ok art@@ deraadt@@
libc support pieces
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.50 2002/02/21 21:19:20 art Exp $
d9 1
a9 1
.if ${MACHINE_ARCH} != "i386"
@


1.50
log
@remove rfork.o from the auto-generated assembler stubs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.49 2002/02/17 23:40:58 deraadt Exp $
d64 4
d232 8
@


1.49
log
@rfork() needs a fork.S-like stub as well; ok art
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.48 2001/09/25 20:36:44 niklas Exp $
d55 1
a55 2
	revoke.o rfork.o \
	rmdir.o select.o semget.o semop.o sendmsg.o sendto.o \
@


1.48
log
@Forgotten DEBUGLIBS stuff
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.47 2001/09/25 13:04:30 drahn Exp $
d14 1
a14 1
SRCS+=	Ovfork.S brk.S cerror.S exect.S fork.S \
@


1.47
log
@Add an ASPICFLAG variable to bsd.own.mk which a platform use to pass flags
to 'as' to make it compile pic. add defaults for sparc64 which needs picflags
set to -fPIC and ASPICFLAGS to -KPIC.
Also simplifies the systemcall generation for sparc64 PIC mode.
ok epsie@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.46 2001/09/20 20:52:09 millert Exp $
d145 7
@


1.46
log
@Add PSEUDO_NOERROR similar to that used by NetBSD.
Some ports were setting errno in PSEUDO and some were not.  Now errno
is set for all in PSEUDO and PSEUDO_NOERROR is provided for the
non-errno case (only used by _exit).

Needs testing on vax and m88k.
XXX - hppa and powerpc still lack a real PSEUDO_NOERROR implementation.
Currently PSEUDO_NOERROR and PSEUDO are the same (so builds don't
break on those platforms).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.45 2001/07/09 00:20:52 fgsch Exp $
d99 2
a100 1
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -k -o ${.TARGET}
d133 2
a134 1
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -k -o ${.TARGET}
d160 2
a161 1
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -k -o ${.TARGET}
@


1.45
log
@Install getpeereid(2) manpage.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.44 2001/06/26 19:56:52 dugsong Exp $
d69 1
a69 1
PSEUDO=	_exit.o _getlogin.o _setlogin.o _ptrace.o
d74 6
a79 1
OBJS+=	${ASM} ${PSEUDO}
d143 26
@


1.44
log
@implement djb's getpeereid(2), to allow local-domain servers to determine client credentials. mostly from superscript.com. deraadt@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.43 2001/03/14 04:01:59 aaron Exp $
d172 2
a173 2
	getfh.2 getfsstat.2 \
	getgid.2 getgroups.2 getitimer.2 getlogin.2 getpeername.2 getpgrp.2 \
@


1.43
log
@Move description of exect() to execve(2) man page. Add a note about exect() not
being portable.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.42 2001/03/09 15:13:48 art Exp $
d40 2
a41 1
	getfh.o getfsstat.o getgid.o getgroups.o getitimer.o getpeername.o \
@


1.42
log
@Add mlockall and munlockall. man-page from NetBSD.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.41 2001/01/10 17:39:43 deraadt Exp $
d200 1
@


1.41
log
@put up FD_* manual pages, in section 3
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.40 2000/12/23 03:04:34 deraadt Exp $
d48 1
a48 1
	mkfifo.o mknod.o mlock.o \
d50 1
a50 1
	munlock.o munmap.o nanosleep.o nfssvc.o \
d177 1
a177 1
	minherit.2 mlock.2 \
d219 1
@


1.40
log
@create proper docs for timer{add,clear,sub,isset,cmp}
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.39 2000/11/16 20:29:55 provos Exp $
d234 2
@


1.39
log
@kqueue and kevent system calls
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.38 2000/10/17 17:44:38 deraadt Exp $
d203 5
@


1.38
log
@damn it, i have had it with this untested weak shit
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.36 2000/05/15 06:10:21 niklas Exp $
d45 1
a45 1
	ioctl.o kill.o \
d175 1
a175 1
	kill.2 ktrace.2 link.2 \
d211 1
@


1.37
log
@re-add weak sparc support; d@@
@
text
@d9 1
a9 1
.if ${MACHINE_ARCH} != "i386" && ${MACHINE_ARCH} != "sparc"
@


1.36
log
@Add support for building libraries with debugging information in them.
Enable by setting DEBUGLIBS=yes in /etc/mk.conf, then -g libraries will get
installed in /usr/lib/debug.  This directory will be searched first if
gcc is given the -g flag during the link stage.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.35 2000/05/01 23:13:17 deraadt Exp $
d9 1
a9 1
.if ${MACHINE_ARCH} != "i386"
@


1.35
log
@bye bye semconfig(2)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.34 2000/04/20 06:34:36 deraadt Exp $
d64 1
d69 1
d75 7
d106 7
@


1.34
log
@p{read,write}{,v} man pages
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.33 2000/02/07 04:59:30 assar Exp $
d55 1
a55 1
	rmdir.o select.o semconfig.o semget.o semop.o sendmsg.o sendto.o \
@


1.33
log
@add fhopen, fhstat, fhstatfs system calls.  largely from NetBSD
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.32 2000/01/06 16:53:30 d Exp $
d31 1
a31 1
	timer_settime.c
d199 1
a199 1
MLINKS+=read.2 readv.2
d211 1
a211 1
MLINKS+=write.2 writev.2
@


1.32
log
@for now, disable weak aliases for all archs except i386
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.31 1999/12/14 03:41:16 millert Exp $
d37 2
a38 1
	fchflags.o fchmod.o fchown.o fcntl.o flock.o fpathconf.o fstat.o \
d153 2
a154 1
	execve.2 _exit.2 fcntl.2 flock.2 fork.2 fsync.2 getdirentries.2 \
d184 1
@


1.31
log
@Install swapctl.2, not swapon.2.  swapon.2 should probably go away.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.30 1999/06/07 07:17:56 deraadt Exp $
d7 5
@


1.30
log
@replacement pipe() system call; copies data into place inside kernel, so
that EFAULT return value is possible
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.29 1999/05/22 21:27:21 weingart Exp $
d161 1
a161 1
	socket.2 socketpair.2 stat.2 statfs.2 swapon.2 symlink.2 sync.2 \
@


1.29
log
@Add swapctl(2), and crank shlib minor.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.28 1999/02/01 08:13:01 d Exp $
d9 1
a9 1
SRCS+=	Ovfork.S brk.S cerror.S exect.S fork.S pipe.S \
d14 1
a14 1
	Lint_pipe.c Lint_sbrk.c \
d18 1
a18 1
	Lint_pipe.c Lint_sbrk.c \
d46 1
a46 1
	open.o pathconf.o poll.o profil.o quotactl.o \
@


1.28
log
@mi ptrace
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.27 1998/11/20 11:18:52 d Exp $
d53 1
a53 1
	sigaltstack.o socket.o socketpair.o stat.o statfs.o swapon.o \
@


1.27
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.26 1998/09/18 00:48:35 art Exp $
d9 1
a9 1
SRCS+=	Ovfork.S brk.S cerror.S exect.S fork.S pipe.S ptrace.S \
d14 1
a14 1
	Lint_pipe.c Lint_ptrace.c Lint_sbrk.c \
d18 1
a18 1
	Lint_pipe.c Lint_ptrace.c Lint_sbrk.c \
d24 1
a24 1
SRCS+=	ftruncate.c lseek.c mmap.c semctl.c truncate.c \
d61 1
a61 1
PSEUDO=	_exit.o _getlogin.o _setlogin.o
@


1.26
log
@make use of xfspioctl
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.25 1998/02/08 22:45:14 tholo Exp $
d6 1
a6 1
.PATH: ${.CURDIR}/arch/${MACHINE_ARCH}/sys ${.CURDIR}/sys
d10 1
a10 1
	sbrk.S setlogin.S sigpending.S sigprocmask.S sigreturn.S \
d14 1
a14 1
	Lint_pipe.c Lint_ptrace.c Lint_sbrk.c Lint_setlogin.c \
d18 1
a18 1
	Lint_pipe.c Lint_ptrace.c Lint_sbrk.c Lint_setlogin.c \
d61 1
a61 1
PSEUDO=	_exit.o _getlogin.o
d67 1
a67 1
${PASM}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d75 1
a75 1
${SASM}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d80 1
a80 1
${SASM}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d86 1
a86 1
${ASM}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d93 1
a93 1
${PPSEUDO}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d101 1
a101 1
${SPSEUDO}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d106 1
a106 1
${SPSEUDO}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d112 1
a112 1
${PSEUDO}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
d127 1
a127 1
LintSysNormal.c: ${.CURDIR}/sys/makelintstub.sh \
d130 1
a130 1
	@@sh ${.CURDIR}/sys/makelintstub.sh -o ${.TARGET} \
d133 1
a133 1
LintSysNoerr.c: ${.CURDIR}/sys/makelintstub.sh \
d136 1
a136 1
	@@sh ${.CURDIR}/sys/makelintstub.sh -o ${.TARGET} -n \
d139 1
a139 1
LintSysPseudoNoerr.c: ${.CURDIR}/sys/makelintstub.sh \
d142 1
a142 1
	@@sh ${.CURDIR}/sys/makelintstub.sh -o ${.TARGET} -p \
@


1.25
log
@Better lint(1) framework.  Mostly from cgd@@NetBSD
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.24 1997/11/13 07:11:13 deraadt Exp $
d55 2
a56 2
	utimes.o vadvise.o wait4.o write.o writev.o __semctl.o __syscall.o \
	__sysctl.o
@


1.24
log
@add getsid(2), XPG4
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.23 1997/05/30 21:53:10 kstailey Exp $
d13 9
d119 13
a131 1
LSRCS+=	protolib.c
d133 11
a143 2
protolib.ln:
	${LINT} ${LINTFLAGS} ${CFLAGS:M-[IDU]*} ${AINC} -i ${.IMPSRC}
@


1.23
log
@add getpgrp(2) from NetBSD
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.22 1997/05/08 20:10:06 kstailey Exp $
d28 1
d120 1
a120 1
	getpid.2 getpriority.2 getrlimit.2 getrusage.2 getsockname.2 \
@


1.22
log
@add tag
@
text
@d1 1
a1 1
#	$OpenBSD$
d26 1
d149 1
@


1.21
log
@make clock_gettime.cat2
@
text
@d1 1
@


1.20
log
@New POSIX 1003.1b syscalls; from pk@@NetBSD
@
text
@d113 3
a115 2
	chmod.2 chown.2 chroot.2 close.2 connect.2 dup.2 execve.2 _exit.2 \
	fcntl.2 flock.2 fork.2 fsync.2 getdirentries.2 getfh.2 getfsstat.2 \
d142 2
@


1.19
log
@seek(2) is not needed
@
text
@d14 3
a16 1
SRCS+=	ftruncate.c lseek.c mmap.c semctl.c truncate.c
d20 2
a21 1
	chown.o chroot.o close.o connect.o dup.o dup2.o execve.o fchdir.o \
d32 1
a32 1
	munlock.o munmap.o nfssvc.o \
d121 2
a122 1
	mmap.2 mount.2 mprotect.2 msync.2 munmap.2 nfssvc.2 open.2 pathconf.2 \
@


1.18
log
@futimes link; nakayosh@@kcn.or.jp
@
text
@a146 1
MLINKS+=lseek.2 seek.2
@


1.17
log
@install ktrace(2)
@
text
@d161 1
@


1.16
log
@Add a link for lchown.2
@
text
@d115 1
a115 1
	kill.2 link.2 \
@


1.15
log
@Add lchown(), increment minor number.
@
text
@d136 1
@


1.14
log
@generate reboot.o like other system calls
@
text
@d25 3
a27 3
	ktrace.o lfs_bmapv.o lfs_markv.o lfs_segclean.o lfs_segwait.o link.o \
	listen.o lstat.o madvise.o mincore.o minherit.o mkdir.o mkfifo.o \
	mknod.o mlock.o \
@


1.13
log
@shmdt link
@
text
@d8 1
a8 1
SRCS+=	Ovfork.S brk.S cerror.S exect.S fork.S pipe.S ptrace.S reboot.S \
d32 2
a33 2
	read.o readlink.o readv.o recvfrom.o recvmsg.o rename.o revoke.o \
	rfork.o \
@


1.12
log
@and a man page
@
text
@d155 1
@


1.11
log
@build poll.o
@
text
@d23 2
a24 1
	getsockname.o getsockopt.o gettimeofday.o getuid.o ioctl.o kill.o \
d114 2
a115 1
	getsockopt.2 gettimeofday.2 getuid.2 intro.2 ioctl.2 kill.2 link.2 \
@


1.10
log
@Changes for mips.
@
text
@d30 1
a30 1
	open.o pathconf.o profil.o quotactl.o \
@


1.9
log
@poll() as a system call
@
text
@d58 1
d63 6
d84 1
d89 6
@


1.8
log
@install rfork man page
@
text
@d103 7
a109 6
	pipe.2 profil.2 ptrace.2 quotactl.2 read.2 readlink.2 reboot.2 recv.2 \
	rename.2 revoke.2 rfork.2 rmdir.2 select.2 send.2 setgroups.2 setpgid.2 \
	setsid.2 setuid.2 shutdown.2 sigaction.2 sigaltstack.2 sigpending.2 \
	sigprocmask.2 sigreturn.2 sigstack.2 sigsuspend.2 socket.2 \
	socketpair.2 stat.2 statfs.2 swapon.2 symlink.2 sync.2 sysarch.2 \
	syscall.2 truncate.2 umask.2 unlink.2 utimes.2 vfork.2 wait.2 write.2
@


1.7
log
@add futimes
@
text
@d104 1
a104 1
	rename.2 revoke.2 rmdir.2 select.2 send.2 setgroups.2 setpgid.2 \
@


1.6
log
@Add support for building lint(1) library
@
text
@d20 3
a22 3
	fstatfs.o fsync.o getdirentries.o getegid.o geteuid.o getfh.o \
	getfsstat.o getgid.o getgroups.o getitimer.o getpeername.o getpgrp.o \
	getpid.o getppid.o getpriority.o getrlimit.o getrusage.o \
@


1.5
log
@Add kernel PLL for system clock
Add ntp_adjtime() and ntp_gettime() system calls
Mostly stolen from FreeBSD
@
text
@d89 5
@


1.4
log
@add rfork.o and minherit.o
@
text
@d28 3
a30 1
	munlock.o munmap.o nfssvc.o open.o pathconf.o profil.o quotactl.o \
@


1.3
log
@add minherit() system call
@
text
@d25 2
a26 1
	listen.o lstat.o madvise.o mincore.o mkdir.o mkfifo.o mknod.o mlock.o \
d30 1
@


1.2
log
@from netbsd:
add & fix a bunch of system call pages
@
text
@d91 2
a92 1
	listen.2 lseek.2 mkdir.2 mkfifo.2 mknod.2 madvise.2 mincore.2 mlock.2 \
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.inc,v 1.34 1995/09/25 00:57:28 christos Exp $
d99 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
