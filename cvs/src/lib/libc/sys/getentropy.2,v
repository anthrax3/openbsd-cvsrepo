head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6;
locks; strict;
comment	@.\" @;


1.8
date	2015.01.31.00.20.12;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	VA8P9EKAas3UaadM;

1.7
date	2014.12.10.19.19.00;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	sADK4BTCz4ZrHHo9;

1.6
date	2014.07.18.18.20.17;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	hgKFElYdZw55yN8E;

1.5
date	2014.07.13.21.39.00;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	quLcld1DtTNfe47e;

1.4
date	2014.06.15.07.24.19;	author jmc;	state Exp;
branches;
next	1.3;
commitid	iPuWbErEo7KIGNKO;

1.3
date	2014.06.14.18.01.42;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mGZAeMJ1mGoco6ZP;

1.2
date	2014.06.13.15.16.46;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	5A2kwxSuELJqq3tf;

1.1
date	2014.06.13.08.26.10;	author deraadt;	state Exp;
branches;
next	;
commitid	CpYJ4dq5gv2iN1W3;


desc
@@


1.8
log
@fix macro usage; from Kaspars at Bankovskis dot net
@
text
@.\"	$OpenBSD: getentropy.2,v 1.7 2014/12/10 19:19:00 schwarze Exp $
.\"
.\" Copyright (c) 2014 Theo de Raadt
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: December 10 2014 $
.Dt GETENTROPY 2
.Os
.Sh NAME
.Nm getentropy
.Nd get entropy
.Sh SYNOPSIS
.In unistd.h
.Ft int
.Fn getentropy "void *buf" "size_t buflen"
.Sh DESCRIPTION
.Fn getentropy
fills a buffer with high-quality entropy, which can be used
as input for process-context pseudorandom generators like
.Xr arc4random 3 .
.Pp
The maximum buffer size permitted is 256 bytes.
If
.Fa buflen
exceeds this, an error of
.Er EIO
will be indicated.
.Pp
.Fn getentropy
is not intended for regular code; please use the
.Xr arc4random 3
family of functions instead.
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
.Fn getentropy
will succeed unless:
.Bl -tag -width Er
.It Bq Er EFAULT
The
.Fa buf
parameter points to an
invalid address.
.It Bq Er EIO
Too many bytes requested, or some other fatal error occurred.
.El
.Sh SEE ALSO
.Xr arc4random 3
.Sh HISTORY
The
.Fn getentropy
function appeared in
.Ox 5.6 .
@


1.7
log
@use .Rv; no change of meaning; from Kaspars at Bankovskis dot net
@
text
@d1 1
a1 1
.\"	$OpenBSD: getentropy.2,v 1.6 2014/07/18 18:20:17 deraadt Exp $
d17 1
a17 1
.Dd $Mdocdate: July 18 2014 $
d24 1
a24 1
.Fd #include <unistd.h>
d28 1
a28 1
.Nm
d35 1
a35 1
.Va buflen
d40 1
a40 1
.Nm
d62 1
a62 1
.Nm
@


1.6
log
@As discussed with beck, tweak the wording for getentropy slightly so
that a certain kind of people don't go bonkers over "what is entropy".
it is what it is, input to PRNG's.
@
text
@d1 1
a1 1
.\"	$OpenBSD: getentropy.2,v 1.5 2014/07/13 21:39:00 deraadt Exp $
d17 1
a17 1
.Dd $Mdocdate: July 13 2014 $
d45 1
a45 4
Upon successful completion, a value of 0 is returned.
Otherwise, a value of \-1 is returned and
.Va errno
is set to indicate the error.
@


1.5
log
@yes indeed, it returns void *.  from Jean-Philippe Ouellet, i also had
this lurking in a tree
@
text
@d1 1
a1 1
.\"	$OpenBSD: getentropy.2,v 1.4 2014/06/15 07:24:19 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: June 15 2014 $
d29 2
a30 3
fills a buffer with high-quality seed-grade entropy, which can
be used as input for process-context random
generators like
@


1.4
log
@occured -> occurred;
@
text
@d1 1
a1 1
.\"	$OpenBSD: getentropy.2,v 1.3 2014/06/14 18:01:42 deraadt Exp $
d17 1
a17 1
.Dd $Mdocdate: June 14 2014 $
d26 1
a26 1
.Fn getentropy "char *buf" "size_t buflen"
@


1.3
log
@Change return value of getentropy() to int 0 for success.  Maximum
buffersize is enforced strictly, this supplies sufficient entropy
payload to act as seed material.  Discourage general use of this
API, but lock down this function name as the go-to for userland
PRNG seeding.  Improve documentation.
ok miod matthew
@
text
@d1 1
a1 1
.\"	$OpenBSD: getentropy.2,v 1.2 2014/06/13 15:16:46 deraadt Exp $
d17 1
a17 1
.Dd $Mdocdate: June 13 2014 $
d60 1
a60 1
Too many bytes requested, or some other fatal error occured.
@


1.2
log
@typo; Piotr Sikora
@
text
@d1 1
a1 1
.\"	$OpenBSD: getentropy.2,v 1.1 2014/06/13 08:26:10 deraadt Exp $
d25 1
a25 1
.Ft ssize_t
d29 11
a39 1
returns a buffer of high-quality seed-grade entropy.
d41 9
a49 3
This is typically used to seed a process-context generator
like
.Xr arc4random 3 .
d51 1
a51 1
.Fn getlogin
d56 1
a56 1
.Fa name
d59 2
@


1.1
log
@Add new getentropy() system call.  Code and pressure from matthew.
I accepted that he's right (again) to seperate this out from heavy
sysctl API and this will simply a variety of things.  Functionname
is not used by anyone in the ports tree, so we guess we can use it.
Shocking that no application has a function called this.
ok matthew & others who pushed him to start this early on
@
text
@d1 1
a1 1
.\"	$OpenBSD: getdtablecount.2,v 1.4 2014/01/26 22:27:31 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: January 26 2014 $
d35 1
a35 2
.Nm
.Fn setlogin
@

