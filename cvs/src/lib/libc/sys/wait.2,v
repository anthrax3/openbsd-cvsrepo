head	1.29;
access;
symbols
	OPENBSD_6_1:1.29.0.6
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.27.0.6
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.26.0.6
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.4
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.22.0.6
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.4
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.2
	OPENBSD_5_0:1.21.0.18
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.16
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.14
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.10
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.12
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.8
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.6
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.12
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.10
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.8
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.19.0.6
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.4
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.4
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.29
date	2015.11.24.19.34.31;	author jmc;	state Exp;
branches;
next	1.28;
commitid	1MDtA5QyUIdLDmJ3;

1.28
date	2015.11.07.22.57.52;	author jmc;	state Exp;
branches;
next	1.27;
commitid	NJ1naRj4HulCkLlB;

1.27
date	2014.09.09.06.32.37;	author guenther;	state Exp;
branches;
next	1.26;
commitid	zVKXOKwBKhUAmYCc;

1.26
date	2014.02.13.07.30.39;	author guenther;	state Exp;
branches;
next	1.25;

1.25
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2013.04.03.03.15.59;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2013.04.01.20.16.31;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2011.11.17.14.26.14;	author schwarze;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.31.19.19.34;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2006.09.27.20.43.41;	author jasper;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.11.18.58.39;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2004.01.12.15.25.37;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.03.23.30.55;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.03.19.25.49;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.20.18.39;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.02.09.21.32;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.04.12.21.00.46;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.24.21.18.36;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.25.04.30.00;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.18.05.12.12;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.06.29.14.10.31;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.06.05.04.47.42;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.05.23.14.10.57;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.16.19.55.42;	author alex;	state Exp;
branches;
next	1.5;

1.5
date	99.02.27.21.57.00;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.07.06.18.28.58;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.13.10.08.38;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.02.20.05.49.55;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.30;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.30;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.29
log
@fix an error in NAME; ok schwarze
@
text
@.\"	$OpenBSD: wait.2,v 1.28 2015/11/07 22:57:52 jmc Exp $
.\"	$NetBSD: wait.2,v 1.6 1995/02/27 12:39:37 cgd Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)wait.2	8.2 (Berkeley) 4/19/94
.\"
.Dd $Mdocdate: November 7 2015 $
.Dt WAIT 2
.Os
.Sh NAME
.Nm wait ,
.Nm waitpid ,
.Nm wait4 ,
.Nm wait3 ,
.Nm WCOREDUMP ,
.Nm WEXITSTATUS ,
.Nm WIFCONTINUED ,
.Nm WIFEXITED ,
.Nm WIFSIGNALED ,
.Nm WIFSTOPPED ,
.Nm WSTOPSIG ,
.Nm WTERMSIG
.Nd wait for process termination
.Sh SYNOPSIS
.In sys/wait.h
.Ft pid_t
.Fn wait "int *status"
.Ft pid_t
.Fn waitpid "pid_t wpid" "int *status" "int options"
.In sys/resource.h
.In sys/wait.h
.Ft pid_t
.Fn wait3 "int *status" "int options" "struct rusage *rusage"
.Ft pid_t
.Fn wait4 "pid_t wpid" "int *status" "int options" "struct rusage *rusage"
.Sh DESCRIPTION
The
.Fn wait
function suspends execution of its calling process until
.Fa status
information is available for a terminated child process,
or a signal is received.
On return from a successful
.Fn wait
call, the
.Fa status
area, if non-zero, is filled in with termination information about the
process that exited (see below).
.Pp
The
.Fn wait4
call provides a more general interface for programs
that need to wait for certain child processes,
that need resource utilization statistics accumulated by child processes,
or that require options.
The other wait functions are implemented using
.Fn wait4 .
.Pp
The
.Fa wpid
parameter specifies the set of child processes for which to wait.
The following symbolic constants are currently defined in
.In sys/wait.h :
.Bd -unfilled -offset indent
#define WAIT_ANY        (-1)    /* any process */
#define WAIT_MYPGRP     0       /* any process in my process group */
.Ed
.Pp
If
.Fa wpid
is set to
.Dv WAIT_ANY ,
the call waits for any child process.
If
.Fa wpid
is set to
.Dv WAIT_MYPGRP ,
the call waits for any child process in the process group of the caller.
If
.Fa wpid
is greater than zero, the call waits for the process with process ID
.Fa wpid .
If
.Fa wpid
is less than \-1, the call waits for any process whose process group ID
equals the absolute value of
.Fa wpid .
.Pp
The
.Fa status
parameter is defined below.
The
.Fa options
argument is the bitwise OR of zero or more of the following values:
.Bl -tag -width "WCONTINUED"
.It Dv WCONTINUED
Causes status to be reported for stopped child processes that have been
continued by receipt of a
.Dv SIGCONT
signal.
.It Dv WNOHANG
Indicates that the call should not block if there are no processes that wish
to report status.
.It Dv WUNTRACED
If set, children of the current process that are stopped due to a
.Dv SIGTTIN , SIGTTOU , SIGTSTP ,
or
.Dv SIGSTOP
signal also have their status reported.
.El
.Pp
If
.Fa rusage
is non-zero, a summary of the resources used by the terminated
process and all its
children is returned (this information is currently not available
for stopped processes).
.Pp
When the
.Dv WNOHANG
option is specified and no processes wish to report status,
.Fn wait4
returns a process ID of 0.
.Pp
The
.Fn waitpid
call is identical to
.Fn wait4
with an
.Fa rusage
value of zero.
The older
.Fn wait3
call is the same as
.Fn wait4
with a
.Fa wpid
value of \-1.
.Pp
The following macros may be used to test the manner of exit of the process.
One of the first three macros will evaluate to a non-zero (true) value:
.Bl -tag -width Ds
.It Fn WIFCONTINUED status
True if the process has not terminated, and has continued after a job
control stop.
This macro can be true only if the wait call specified the
.Dv WCONTINUED
option.
.It Fn WIFEXITED status
True if the process terminated normally by a call to
.Xr _exit 2
or
.Xr exit 3 .
.It Fn WIFSIGNALED status
True if the process terminated due to receipt of a signal.
.It Fn WIFSTOPPED status
True if the process has not terminated, but has stopped and can be restarted.
This macro can be true only if the wait call specified the
.Dv WUNTRACED
option or if the child process is being traced (see
.Xr ptrace 2 ) .
.El
.Pp
Depending on the values of those macros, the following macros
produce the remaining status information about the child process:
.Bl -tag -width Ds
.It Fn WEXITSTATUS status
If
.Fn WIFEXITED status
is true, evaluates to the low-order 8 bits of the argument passed to
.Xr _exit 2
or
.Xr exit 3
by the child.
.It Fn WTERMSIG status
If
.Fn WIFSIGNALED status
is true, evaluates to the number of the signal
that caused the termination of the process.
.It Fn WCOREDUMP status
If
.Fn WIFSIGNALED status
is true, evaluates as true if the termination
of the process was accompanied by the creation of a core file
containing an image of the process when the signal was received.
.It Fn WSTOPSIG status
If
.Fn WIFSTOPPED status
is true, evaluates to the number of the signal that caused the process
to stop.
.El
.Sh NOTES
See
.Xr sigaction 2
for a list of termination signals.
A status of 0 indicates normal termination.
.Pp
If a parent process terminates without
waiting for all of its child processes to terminate,
the remaining child processes are assigned the parent
process 1 ID (the init process ID).
.Pp
If a signal is caught while any of the
.Fn wait
calls is pending, the call may be interrupted or restarted when the
signal-catching routine returns, depending on the options in effect
for the signal; for further information, see
.Xr siginterrupt 3 .
.Sh RETURN VALUES
If
.Fn wait
returns due to a stopped
or terminated child process, the process ID of the child
is returned to the calling process.
Otherwise, a value of \-1 is returned and
.Va errno
is set to indicate the error.
.Pp
If
.Fn wait4 ,
.Fn wait3
or
.Fn waitpid
returns due to a stopped or terminated child process, the process ID
of the child is returned to the calling process.
If there are no children not previously awaited, \-1 is returned with
.Va errno
set to
.Bq Er ECHILD .
Otherwise, if
.Dv WNOHANG
is specified and there are no stopped or exited children, 0 is returned.
If an error is detected or a caught signal aborts the call, a value of \-1
is returned and
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn wait
will fail and return immediately if:
.Bl -tag -width Er
.It Bq Er ECHILD
The calling process has no existing unwaited-for child processes.
.It Bq Er EFAULT
The
.Fa status
or
.Fa rusage
arguments point to an illegal address.
(May not be detected before exit of a child process.)
.It Bq Er EINTR
The call was interrupted by a caught signal, or the signal did not have the
.Dv SA_RESTART
flag set.
.It Bq Er EINVAL
Invalid or undefined flags were passed in the
.Fa options
argument.
.El
.Sh SEE ALSO
.Xr _exit 2 ,
.Xr sigaction 2 ,
.Xr exit 3
.Sh STANDARDS
The
.Fn wait
and
.Fn waitpid
functions conform to
.St -p1003.1-2008 .
.Pp
.Fn wait4
and
.Fn wait3
are not specified by POSIX.
The
.Fn WCOREDUMP
macro and the ability to restart a pending
.Fn wait
call are extensions to that specification.
.Sh HISTORY
A
.Fn wait
system call first appeared in
.At v1 .
The
.Fa status
argument is accepted since
.At v2 .
A
.Fn wait3
system call first appeared in
.Bx 4 ,
but the final calling convention was only established in
.Bx 4.2 .
The
.Fn wait4
and
.Fn waitpid
function calls first appeared in
.Bx 4.3 Reno .
@


1.28
log
@add missing NAME entries;
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.27 2014/09/09 06:32:37 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: September 9 2014 $
d47 1
a47 1
.Nm WIFSTOPSIG ,
@


1.27
log
@Various updates and corrections to SYNOPSIS, ERRORS, and STANDARDS
Mention send(MSG_EOR)
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.26 2014/02/13 07:30:39 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: February 13 2014 $
d40 9
a48 1
.Nm wait3
@


1.26
log
@Don't use use .Tn with AND/OR/NOT
Phrase any "The _flags_ argument is the ..." line consistently,
eliminating unnecessary use of 'inclusive' and saying "zero or more"
or "one or more" as appropriate

ok millert@@ jmc@@ schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.25 2014/01/21 03:15:45 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 21 2014 $
d43 1
a43 1
.Fd #include <sys/wait.h>
d48 2
a49 2
.Fd #include <sys/resource.h>
.Fd #include <sys/wait.h>
d286 3
a288 1
functions are defined by POSIX;
d297 1
a297 1
call are extensions to the POSIX interface.
@


1.25
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.24 2013/04/03 03:15:59 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: April 3 2013 $
d112 1
a112 3
parameter contains the bitwise
.Tn OR
of any of the following options:
@


1.24
log
@Drop an unnecessary #include

reminded by schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.23 2013/04/01 20:16:31 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: April 1 2013 $
d81 1
a81 1
.Aq Pa sys/wait.h :
@


1.23
log
@When there are multiple groups of functions with their own #includes
listed, the #includes in each group are independent, so that users
don't need to guess at possible carry-over.

general idea ok otto@@ millert@@
actual diff ok jmc@@ schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.22 2011/11/17 14:26:14 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: November 17 2011 $
a42 1
.Fd #include <sys/types.h>
@


1.22
log
@Complete the HISTORY of all syscalls that exist since Version 1 AT&T UNIX.
All facts from http://minnie.tuhs.org/cgi-bin/utree.pl, checked by sobrado@@.
Feedback and ok jmc@@ jmc@@ (sic, Jason checked and ok'ed this twice).
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.21 2007/05/31 19:19:34 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
a48 1
.Fd #include <sys/time.h>
d50 1
@


1.21
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.20 2006/09/27 20:43:41 jasper Exp $
d33 1
a33 1
.Dd $Mdocdate$
d302 5
a306 1
function call appeared in
d308 12
@


1.20
log
@remove superfluous paranthesis
from Matthew R. Dempsky <mrd at alkemio dot org>
ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.19 2004/03/11 18:58:39 millert Exp $
d33 1
a33 1
.Dd April 19, 1994
@


1.19
log
@Document that a NULL status pointer is allowed.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.18 2004/01/12 15:25:37 jmc Exp $
d169 1
a169 1
option).
@


1.18
log
@document WAIT_ANY and WAIT_MYPGRP;
help and ok miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.17 2003/08/03 23:30:55 millert Exp $
d66 2
a67 2
area contains termination information about the process that exited
as defined below.
@


1.17
log
@Use WCONTINUED as width for list of wait options; jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.15 2003/06/02 20:18:39 millert Exp $
d81 7
d90 3
a92 1
is \-1, the call waits for any child process.
d95 2
a96 1
is 0,
@


1.16
log
@Implement the WCONTINUED flag to the wait(2) family of syscalls and the
associated WIFCONTINUED macro as per 1003.1-2001.  Adapted from FreeBSD.
A minor amount of trickiness is involved here.  The value for WCONTINUED
is chosen in such a way that _WSTATUS(_WCONTINUED) == _WSTOPPED and the
WIFSTOPPED macro has been modified such that WIFSTOPPED(_WCONTINUED) !=
_WSTOPPED.  This means we don't need to add an extra check to the
WIFSIGNALED and WIFSTOPPED macros.  deraadt@@ OK.
@
text
@d106 1
a106 1
.Bl -tag -width Ds
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.14 2003/06/02 09:21:32 jmc Exp $
d105 12
a116 8
of any of the following options.
The
.Dv WNOHANG
option is used to indicate that the call should not block if
there are no processes that wish to report status.
If the
.Dv WUNTRACED
option is set, children of the current process that are stopped due to a
d121 1
d154 6
@


1.14
log
@section reorder;
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.13 2003/04/12 21:00:46 jmc Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.13
log
@underfined -> undefined;

from Fabio Olive Leite;
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.12 2002/01/24 21:18:36 mickey Exp $
d263 4
a281 4
.Sh SEE ALSO
.Xr _exit 2 ,
.Xr sigaction 2 ,
.Xr exit 3
@


1.12
log
@most of these is v2, not v6
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.11 2001/06/25 04:30:00 pjanzen Exp $
d259 1
a259 1
Invalid or underfined flags were passed in the
@


1.11
log
@Refer to siginterrupt(3) rather than to a nonexistant part of intro(2)
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.10 2000/10/18 05:12:12 aaron Exp $
d286 1
a286 1
.At v6 .
@


1.10
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.9 1999/06/29 14:10:31 aaron Exp $
d211 2
a212 3
for the signal; see
.Xr intro 2 ,
System call restart.
@


1.9
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.8 1999/06/05 04:47:42 aaron Exp $
d68 1
a68 2
call,
the
d104 2
a105 1
parameter is defined below.  The
d112 1
a112 2
option
is used to indicate that the call should not block if
d116 1
a116 3
option is set,
children of the current process that are stopped
due to a
d120 1
a120 2
signal also have
their status reported.
d131 1
a131 2
option is specified and no processes
wish to report status,
d133 1
a133 3
returns a
process ID
of 0.
d164 1
a164 2
option
or if the child process is being traced (see
d174 1
a174 2
is true, evaluates to the low-order 8 bits
of the argument passed to
d193 2
a194 2
is true, evaluates to the number of the signal
that caused the process to stop.
d209 3
a211 5
calls is pending,
the call may be interrupted or restarted when the signal-catching routine
returns,
depending on the options in effect for the signal;
see
d219 2
a220 2
is returned to the calling process.  Otherwise, a value of \-1
is returned and
d229 3
a231 5
returns due to a stopped
or terminated child process, the process ID of the child
is returned to the calling process.
If there are no children not previously awaited,
\-1 is returned with
d237 2
a238 5
is specified and there are
no stopped or exited children,
0 is returned.
If an error is detected or a caught signal aborts the call,
a value of \-1
d247 1
a247 2
The calling process has no existing unwaited-for
child processes.
d256 1
a256 2
The call was interrupted by a caught signal,
or the signal did not have the
d276 1
a276 2
macro
and the ability to restart a pending
@


1.8
log
@use .Tn instead of .Em for logical/bitwise OR + AND
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.7 1999/05/23 14:10:57 aaron Exp $
d66 1
a66 1
On return from a successful 
d68 1
a68 1
call, 
d88 1
a88 1
is -1, the call waits for any child process.
d95 1
a95 1
is greater than zero, the call waits for the process with process id
d99 1
a99 1
is less than -1, the call waits for any process whose process group id
d136 1
a136 1
wish to report status, 
d138 2
a139 2
returns a 
process id
d155 1
a155 1
value of -1.
d230 1
a230 1
is returned to the calling process.  Otherwise, a value of -1
d244 1
a244 1
-1 is returned with
d254 1
a254 1
a value of -1
d305 1
a305 1
function call appeared in 
@


1.7
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.6 1999/05/16 19:55:42 alex Exp $
d107 3
a109 1
parameter contains the bitwise OR of any of the following options.
@


1.6
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.5 1999/02/27 21:57:00 deraadt Exp $
d39 1
a39 1
.Os BSD 4
@


1.5
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.4 1998/07/06 18:28:58 deraadt Exp $
d298 2
a299 2
.Xr exit 3 ,
.Xr sigaction 2
@


1.4
log
@fix openbsd tag
@
text
@d1 1
a1 1
.\"	$OpenBSD: wait.2,v 1.6 1995/02/27 12:39:37 cgd Exp $
d257 1
a257 1
.Fn Wait
@


1.3
log
@fix lots of .Xr and other minor things
@
text
@d1 1
@


1.2
log
@Document EINVAL
@
text
@d161 1
a161 1
.Xr exit 2 .
d183 1
a183 1
.Xr exit 2
d296 2
a297 1
.Xr exit 2 ,
@


1.1
log
@Initial revision
@
text
@d274 4
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
