head	1.47;
access;
symbols
	OPENBSD_6_0:1.46.0.2
	OPENBSD_6_0_BASE:1.46
	OPENBSD_5_9:1.45.0.2
	OPENBSD_5_9_BASE:1.45
	OPENBSD_5_8:1.43.0.6
	OPENBSD_5_8_BASE:1.43
	OPENBSD_5_7:1.43.0.2
	OPENBSD_5_7_BASE:1.43
	OPENBSD_5_6:1.41.0.6
	OPENBSD_5_6_BASE:1.41
	OPENBSD_5_5:1.41.0.4
	OPENBSD_5_5_BASE:1.41
	OPENBSD_5_4:1.40.0.8
	OPENBSD_5_4_BASE:1.40
	OPENBSD_5_3:1.40.0.6
	OPENBSD_5_3_BASE:1.40
	OPENBSD_5_2:1.40.0.4
	OPENBSD_5_2_BASE:1.40
	OPENBSD_5_1_BASE:1.40
	OPENBSD_5_1:1.40.0.2
	OPENBSD_5_0:1.38.0.18
	OPENBSD_5_0_BASE:1.38
	OPENBSD_4_9:1.38.0.16
	OPENBSD_4_9_BASE:1.38
	OPENBSD_4_8:1.38.0.14
	OPENBSD_4_8_BASE:1.38
	OPENBSD_4_7:1.38.0.10
	OPENBSD_4_7_BASE:1.38
	OPENBSD_4_6:1.38.0.12
	OPENBSD_4_6_BASE:1.38
	OPENBSD_4_5:1.38.0.8
	OPENBSD_4_5_BASE:1.38
	OPENBSD_4_4:1.38.0.6
	OPENBSD_4_4_BASE:1.38
	OPENBSD_4_3:1.38.0.4
	OPENBSD_4_3_BASE:1.38
	OPENBSD_4_2:1.38.0.2
	OPENBSD_4_2_BASE:1.38
	OPENBSD_4_1:1.35.0.2
	OPENBSD_4_1_BASE:1.35
	OPENBSD_4_0:1.34.0.4
	OPENBSD_4_0_BASE:1.34
	OPENBSD_3_9:1.34.0.2
	OPENBSD_3_9_BASE:1.34
	OPENBSD_3_8:1.32.0.2
	OPENBSD_3_8_BASE:1.32
	OPENBSD_3_7:1.31.0.6
	OPENBSD_3_7_BASE:1.31
	OPENBSD_3_6:1.31.0.4
	OPENBSD_3_6_BASE:1.31
	OPENBSD_3_5:1.31.0.2
	OPENBSD_3_5_BASE:1.31
	OPENBSD_3_4:1.30.0.2
	OPENBSD_3_4_BASE:1.30
	OPENBSD_3_3:1.23.0.2
	OPENBSD_3_3_BASE:1.23
	OPENBSD_3_2:1.22.0.2
	OPENBSD_3_2_BASE:1.22
	OPENBSD_3_1:1.21.0.6
	OPENBSD_3_1_BASE:1.21
	OPENBSD_3_0:1.21.0.4
	OPENBSD_3_0_BASE:1.21
	OPENBSD_2_9:1.21.0.2
	OPENBSD_2_9_BASE:1.21
	OPENBSD_2_8:1.19.0.2
	OPENBSD_2_8_BASE:1.19
	OPENBSD_2_7:1.18.0.2
	OPENBSD_2_7_BASE:1.18
	OPENBSD_2_6:1.17.0.2
	OPENBSD_2_6_BASE:1.17
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.47
date	2017.02.27.16.30.55;	author jmc;	state Exp;
branches;
next	1.46;
commitid	UZekh7oJzl5MRJwm;

1.46
date	2016.05.27.19.45.04;	author deraadt;	state Exp;
branches;
next	1.45;
commitid	nQEqvpt7rKDi6fz0;

1.45
date	2015.11.23.10.01.45;	author jmc;	state Exp;
branches;
next	1.44;
commitid	Dvo97MsccFko48ag;

1.44
date	2015.09.10.17.55.21;	author schwarze;	state Exp;
branches;
next	1.43;
commitid	PeV7Ql0T6htfMjhP;

1.43
date	2015.01.19.23.41.32;	author millert;	state Exp;
branches;
next	1.42;
commitid	oQvfD2Bpc0sgJ2wY;

1.42
date	2014.12.10.19.19.00;	author schwarze;	state Exp;
branches;
next	1.41;
commitid	sADK4BTCz4ZrHHo9;

1.41
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.40;

1.40
date	2011.11.17.14.26.14;	author schwarze;	state Exp;
branches;
next	1.39;

1.39
date	2011.11.06.12.07.42;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2007.06.01.06.27.57;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2007.05.31.19.19.33;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2007.03.21.13.44.04;	author pedro;	state Exp;
branches;
next	1.35;

1.35
date	2006.12.15.03.04.23;	author krw;	state Exp;
branches;
next	1.34;

1.34
date	2005.10.27.19.21.00;	author jaredy;	state Exp;
branches;
next	1.33;

1.33
date	2005.10.03.16.31.11;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2005.06.01.00.29.13;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2004.03.16.18.28.52;	author otto;	state Exp;
branches;
next	1.30;

1.30
date	2003.07.25.07.42.48;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2003.06.21.20.28.06;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.10.17.51.02;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.09.17.17.27;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.02.20.18.39;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.01.20.25.23;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2003.04.02.16.04.18;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.27.07.55.34;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2002.04.23.18.55.43;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2001.04.22.17.23.56;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2001.04.05.04.01.55;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	2000.09.22.02.18.15;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.15.11.46.03;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.09.25.21.28.04;	author pjanzen;	state Exp;
branches;
next	1.16;

1.16
date	99.07.05.06.08.05;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.06.29.14.10.08;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.05.27.16.10.36;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	99.05.23.14.10.55;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.05.16.19.55.30;	author alex;	state Exp;
branches;
next	1.11;

1.11
date	99.04.18.17.26.52;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	99.03.05.10.37.18;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	99.02.27.21.56.34;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.12.21.14.08.59;	author art;	state Exp;
branches;
next	1.7;

1.7
date	98.06.08.17.17.15;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.03.09.19.41.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.03.19.23.15.17;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.03.09.02.42.59;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	95.12.14.02.21.16;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.06.21.10.01;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.47
log
@use Dv, for consistency; from bruno flueckiger
@
text
@.\"	$OpenBSD: mount.2,v 1.46 2016/05/27 19:45:04 deraadt Exp $
.\"	$NetBSD: mount.2,v 1.12 1996/02/29 23:47:48 jtc Exp $
.\"
.\" Copyright (c) 1980, 1989, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)mount.2	8.2 (Berkeley) 12/11/93
.\"
.Dd $Mdocdate: May 27 2016 $
.Dt MOUNT 2
.Os
.Sh NAME
.Nm mount ,
.Nm unmount
.Nd mount or dismount a filesystem
.Sh SYNOPSIS
.In sys/param.h
.In sys/mount.h
.Ft int
.Fn mount "const char *type" "const char *dir" "int flags" "void *data"
.Ft int
.Fn unmount "const char *dir" "int flags"
.Sh DESCRIPTION
The
.Fn mount
function grafts
a filesystem object onto the system file tree
at the point
.Fa dir .
The argument
.Fa data
describes the filesystem object to be mounted.
The argument
.Fa type
tells the kernel how to interpret
.Fa data
(see
.Fa type
below).
The contents of the filesystem
become available through the new mount point
.Fa dir .
Any files in
.Fa dir
at the time
of a successful mount are swept under the carpet, so to speak, and
are unavailable until the filesystem is unmounted.
.Pp
The following
.Fa flags
may be specified to
suppress default semantics which affect filesystem access.
.Bl -tag -width MNT_SYNCHRONOUS
.It Dv MNT_RDONLY
The filesystem should be treated as read-only:
even the superuser may not write to it.
.It Dv MNT_NOATIME
Do not update the access time on files in the filesystem unless
the modification or status change times are also being updated.
.It Dv MNT_NOEXEC
Do not allow files to be executed from the filesystem.
.It Dv MNT_NOSUID
Do not honor setuid or setgid bits on files when executing them.
.It Dv MNT_NODEV
Do not interpret special files on the filesystem.
.It Dv MNT_SYNCHRONOUS
All I/O to the filesystem should be done synchronously.
.It Dv MNT_ASYNC
All I/O to the filesystem should be done asynchronously.
.It Dv MNT_SOFTDEP
Use soft dependencies.
Applies to FFS filesystems only (see 'softdep' in
.Xr mount 8 ) .
.It Dv MNT_WXALLOWED
Processes that ask for memory to be made writeable plus executable
using the
.Xr mmap 2
and
.Xr mprotect 2
system calls are killed by default.
This option allows those processes to continue operation.
The option is typically used on the
.Pa /usr/local
filesystem.
.El
.Pp
The flag
.Dv MNT_UPDATE
indicates that the mount command is being applied
to an already mounted filesystem.
This allows the mount flags to be changed without requiring
that the filesystem be unmounted and remounted.
Some filesystems may not allow all flags to be changed.
For example,
most filesystems will not allow a change from read-write to read-only.
.Pp
The
.Fa type
argument defines the type of the filesystem.
The types of filesystems known to the system are defined in
.In sys/mount.h .
.Fa data
is a pointer to a structure that contains the type
specific arguments to mount.
The currently supported types of filesystems and
their type specific data are:
.Pp
.Dv MOUNT_CD9660
.Bd -literal -offset indent -compact
struct iso_args {
    char	*fspec;	    /* block special device to mount */
    struct	export_args export_info;
    			    /* network export info */
    int	flags;		    /* mounting flags, see below */
};
#define	ISOFSMNT_NORRIP	  0x00000001 /* disable Rock Ridge Ext.*/
#define	ISOFSMNT_GENS	  0x00000002 /* enable generation numbers */
#define	ISOFSMNT_EXTATT	  0x00000004 /* enable extended attributes */
#define	ISOFSMNT_NOJOLIET 0x00000008 /* disable Joliet Ext.*/
#define	ISOFSMNT_SESS	  0x00000010 /* use iso_args.sess */
.Ed
.Pp
.Dv MOUNT_FFS
.Bd -literal -offset indent -compact
struct ufs_args {
      char      *fspec;             /* block special file to mount */
      struct    export_args export_info;
      				    /* network export information */
};
.Ed
.Pp
.Dv MOUNT_MFS
.Bd -literal -offset indent -compact
struct mfs_args {
      char	*fspec;             /* name to export for statfs */
      struct	export_args export_info;
      				    /* if we can export an MFS */
      caddr_t	base;               /* base of filesystem in mem */
      u_long	size;               /* size of filesystem */
};
.Ed
.Pp
.Dv MOUNT_MSDOS
.Bd -literal -offset indent -compact
struct msdosfs_args {
	char	*fspec;	   /* blocks special holding fs to mount */
	struct	export_args export_info;
			   /* network export information */
	uid_t	uid;	   /* uid that owns msdosfs files */
	gid_t	gid;	   /* gid that owns msdosfs files */
	mode_t  mask;	   /* mask to be applied for msdosfs perms */
	int	flags;	   /* see below */
};

/*
 * Msdosfs mount options:
 */
#define	MSDOSFSMNT_SHORTNAME 1  /* Force old DOS short names only */
#define	MSDOSFSMNT_LONGNAME  2  /* Force Win'95 long names */
#define	MSDOSFSMNT_NOWIN95   4  /* Completely ignore Win95 entries */
.Ed
.Pp
.Dv MOUNT_NFS
.Bd -literal -offset indent -compact
struct nfs_args {
      int	version;	/* args structure version */
      struct sockaddr *addr;	/* file server address */
      int	addrlen;	/* length of address */
      int	sotype;       	/* Socket type */
      int	proto;        	/* and Protocol */
      u_char	*fh;          	/* File handle to be mounted */
      int	fhsize;       	/* Size, in bytes, of fh */
      int	flags;        	/* flags */
      int	wsize;        	/* write size in bytes */
      int	rsize;        	/* read size in bytes */
      int	readdirsize;  	/* readdir size in bytes */
      int	timeo;        	/* initial timeout in .1 secs */
      int	retrans;      	/* times to retry send */
      int	maxgrouplist; 	/* Max. size of group list */
      int	readahead;    	/* # of blocks to readahead */
      int	leaseterm;    	/* Term (sec) of lease */
      int	deadthresh;   	/* Retrans threshold */
      char	*hostname;    	/* server's name */
      int	acregmin;     /* Attr cache file recently modified */
      int	acregmax;     	/* ac file not recently modified */
      int	acdirmin;     	/* ac for dir recently modified */
      int	acdirmax;     /* ac for dir not recently modified */
};
.Ed
.Pp
.Dv MOUNT_NTFS
.Bd -literal -offset indent -compact
struct ntfs_args {
        char    *fspec;	/* block special device to mount */
        struct  export_args export_info;
			/* network export information */
        uid_t   uid;	/* uid that owns ntfs files */
        gid_t   gid;	/* gid that owns ntfs files */
        mode_t  mode;	/* mask to be applied for ntfs perms */
        u_long  flag;	/* additional flags */
};

/*
 * ntfs mount options:
 */
#define     NTFS_MFLAG_CASEINS      0x00000001
#define     NTFS_MFLAG_ALLNAMES     0x00000002
.Ed
.Pp
.Dv MOUNT_UDF
.Bd -literal -offset indent -compact
struct udf_args {
	char	*fspec;	/* block special device to mount */
};
.Ed
.Pp
The
.Fn unmount
function call disassociates the filesystem from the specified
mount point
.Fa dir .
.Pp
The
.Fa flags
argument may specify
.Dv MNT_FORCE
to specify that the filesystem should be forcibly unmounted even if files are
still active.
Active special devices continue to work,
but any further accesses to any other active files result in errors
even if the filesystem is later remounted.
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
.Fn mount
will fail when one of the following occurs:
.Bl -tag -width [ENAMETOOLONG]
.It Bq Er EPERM
The caller is not the superuser.
.It Bq Er ENAMETOOLONG
The path name exceeded
.Dv {MNAMELEN}
characters.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating a pathname.
.It Bq Er ENOENT
A component of
.Fa dir
does not exist.
.It Bq Er ENOTDIR
A component of
.Ar name
is not a directory,
or a path prefix of
.Ar special
is not a directory.
.It Bq Er EINVAL
An argument given was invalid.
.It Bq Er EBUSY
Another process currently holds a reference to
.Fa dir .
.It Bq Er EFAULT
.Fa dir
points outside the process's allocated address space.
.It Bq Er EOPNOTSUPP
.Fa type
is not supported by the kernel.
.El
.Pp
The following errors can occur for a
.Dq ufs
filesystem mount:
.Bl -tag -width [ENOTBLK]
.It Bq Er ENODEV
A component of ufs_args
.Fa fspec
does not exist.
.It Bq Er ENOTBLK
.Fa fspec
is not a block device.
.It Bq Er ENXIO
The major device number of
.Fa fspec
is out of range (this indicates no device driver exists
for the associated hardware).
.It Bq Er EBUSY
.Fa fspec
is already mounted.
.It Bq Er EINVAL
The super block for the filesystem had a bad magic number, an out of range
block size, or an invalid combination of flags.
.It Bq Er ENOMEM
Not enough memory was available to read the cylinder
group information for the filesystem.
.It Bq Er EIO
An I/O error occurred while reading the super block or
cylinder group information.
.It Bq Er EFAULT
.Fa fspec
points outside the process's allocated address space.
.It Bq Er EROFS
The filesystem was not unmounted cleanly and
.Dv MNT_FORCE
was not specified.
.It Bq Er EROFS
An attempt was made to mount a
.Bx 4.2
filesystem without the
.Dv MNT_RDONLY
flag.
.El
.Pp
The following errors can occur for an
.Em NFS
filesystem mount:
.Bl -tag -width [ETIMEDOUT]
.It Bq Er ETIMEDOUT
.Em NFS
timed out trying to contact the server.
.It Bq Er EFAULT
Some part of the information described by nfs_args
points outside the process's allocated address space.
.El
.Pp
The following errors can occur for a
.Em mfs
filesystem mount:
.Bl -tag -width [EMFILE]
.It Bq Er EMFILE
No space remains in the mount table.
.It Bq Er EINVAL
The super block for the filesystem had a bad magic
number or an out of range block size.
.It Bq Er ENOMEM
Not enough memory was available to read the cylinder
group information for the filesystem.
.It Bq Er EIO
A paging error occurred while reading the super block or
cylinder group information.
.It Bq Er EFAULT
.Em Name
points outside the process's allocated address space.
.El
.Pp
.Fn unmount
may fail with one of the following errors:
.Bl -tag -width [ENAMETOOLONG]
.It Bq Er EPERM
The caller is not the superuser.
.It Bq Er ENOTDIR
A component of the path is not a directory.
.It Bq Er EINVAL
An argument given was invalid.
.It Bq Er ENAMETOOLONG
A component of a pathname exceeded
.Dv NAME_MAX
characters, or an entire pathname (including the terminating NUL)
exceeded
.Dv PATH_MAX
bytes.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating the pathname.
.It Bq Er EINVAL
The requested directory is not in the mount table.
.It Bq Er EBUSY
A process is holding a reference to a file located
on the filesystem.
.It Bq Er EIO
An I/O error occurred while writing cached filesystem information.
.It Bq Er EFAULT
.Fa dir
points outside the process's allocated address space.
.El
.Sh SEE ALSO
.Xr statfs 2 ,
.Xr mount 8 ,
.Xr mount_mfs 8 ,
.Xr umount 8
.Sh HISTORY
The
.Fn mount
and
.Fn unmount
system calls first appeared in
.At v1 .
The
.Fa flags
argument is supported by
.Fn mount
since
.At v5
and by
.Fn unmount
since
.Bx 4.3 Reno .
The current calling convention involving
.Fa type
and
.Fa data
arguments was introduced by
.Bx 4.3 Reno
as well.
.Sh BUGS
Some of the error codes need translation to more obvious messages.
@


1.46
log
@W^X violations are no longer permitted by default.  A kernel log message
is generated, and mprotect/mmap return ENOTSUP.  If the sysctl(8) flag
kern.wxabort is set then a SIGABRT occurs instead, for gdb use or coredump
creation.

W^X violating programs can be permitted on a ffs/nfs filesystem-basis,
using the "wxallowed" mount option.  One day far in the future
upstream software developers will understand that W^X violations are a
tremendously risky practice and that style of programming will be
banished outright.  Until then, we recommend most users need to use the
wxallowed option on their /usr/local filesystem.  At least your other
filesystems don't permit such programs.

ok jca kettenis mlarkin natano
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.45 2015/11/23 10:01:45 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: November 23 2015 $
d98 1
a98 1
.It MNT_WXALLOWED
@


1.45
log
@point to mount_mfs(8), not mfs(8);
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.44 2015/09/10 17:55:21 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: September 10 2015 $
d98 11
@


1.44
log
@use .In rather than .Fd #include
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.43 2015/01/19 23:41:32 millert Exp $
d33 1
a33 1
.Dd $Mdocdate: January 19 2015 $
a388 1
.Xr mfs 8 ,
d390 1
@


1.43
log
@Explicitly mention that PATH_MAX includes the NUL in the ENAMETOOLONG
description.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.42 2014/12/10 19:19:00 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: December 10 2014 $
d41 2
a42 2
.Fd #include <sys/param.h>
.Fd #include <sys/mount.h>
@


1.42
log
@use .Rv; no change of meaning; from Kaspars at Bankovskis dot net
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.41 2014/01/21 03:15:45 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 21 2014 $
d369 5
a373 4
.Dv {NAME_MAX}
characters, or an entire path name exceeded
.Dv {PATH_MAX}
characters.
@


1.41
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.40 2011/11/17 14:26:14 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: November 17 2011 $
d246 1
a246 11
.Fn mount
returns the value 0 if the mount was successful; otherwise, \-1 is returned
and the variable
.Va errno
is set to indicate the error.
.Pp
.Fn unmount
returns the value 0 if the unmount was successful; otherwise, \-1 is returned
and the variable
.Va errno
is set to indicate the error.
@


1.40
log
@Complete the HISTORY of all syscalls that exist since Version 1 AT&T UNIX.
All facts from http://minnie.tuhs.org/cgi-bin/utree.pl, checked by sobrado@@.
Feedback and ok jmc@@ jmc@@ (sic, Jason checked and ok'ed this twice).
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.39 2011/11/06 12:07:42 deraadt Exp $
d33 1
a33 1
.Dd $Mdocdate: November 6 2011 $
d114 1
a114 1
.Aq Pa sys/mount.h .
@


1.39
log
@.Ev -> .Dv
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.38 2007/06/01 06:27:57 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 1 2007 $
d402 1
d406 19
a424 2
function calls appeared in
.At v6 .
@


1.38
log
@more adosfs removal;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.37 2007/05/31 19:19:33 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d332 1
a332 1
.Ev MNT_RDONLY
@


1.37
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.36 2007/03/21 13:44:04 pedro Exp $
d33 1
a33 1
.Dd $Mdocdate$
a119 12
.Pp
.Dv MOUNT_ADOSFS
.Bd -literal -offset indent -compact
struct adosfs_args {
    char	*fspec;	    /* blocks special holding fs to mount */
    struct	export_args export_info;
    			    /* network export information */
    uid_t	uid;	    /* uid that owns adosfs files */
    gid_t	gid;	    /* gid that owns adosfs files */
    mode_t	mask;	    /* mask to be applied for adosfs perms */
};
.Ed
@


1.36
log
@Add support for mounting arbitrary sessions, from Enache Adrian
OK deraadt@@ mjc@@ canacar@@ krw@@, with much input from Enache himself
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.35 2006/12/15 03:04:23 krw Exp $
d33 1
a33 1
.Dd December 11, 1993
@


1.35
log
@Nuke GEMDOSFS. Unused part of unused atari port. Simplifies
MSDOSFS code. Eliminates -G option to mount_msdos.

Nit detection by gwk@@, tom@@, jmc@@.

ok weingart@@ tom@@ thib@@ dlg@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.34 2005/10/27 19:21:00 jaredy Exp $
d145 1
@


1.34
log
@remove errors that no longer apply; ok millert, tedu
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.33 2005/10/03 16:31:11 jmc Exp $
a184 1
#define	MSDOSFSMNT_GEMDOSFS  8  /* This is a gemdos-flavour */
@


1.33
log
@add struct udf_args;

requested by mpech@@
ok otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.32 2005/06/01 00:29:13 jmc Exp $
a323 2
.It Bq Er EMFILE
No space remains in the mount table.
a407 7
.Pp
A
.Dq ufs
or
.Dq mfs
mount can also fail if the maximum number of filesystems are currently
mounted.
@


1.32
log
@no more MNT_UNION, says pedro@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.31 2004/03/16 18:28:52 otto Exp $
d233 7
@


1.31
log
@Document correct limit to path names lengths. Resolves PR 3716.
ok jmc@@ tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.30 2003/07/25 07:42:48 jmc Exp $
a89 4
.It Dv MNT_UNION
Mount in such a way that the contents of the underlying filesystem are
not (totally) obscured (see
.Xr mount_union 8 ) .
@


1.30
log
@change the description of [EINVAL] for mount() and unmount();
discussed with tedu.

reported by Hannah Schroeter on misc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.29 2003/06/21 20:28:06 jmc Exp $
d273 2
a274 4
A component of a pathname exceeded
.Dv {NAME_MAX}
characters, or an entire path name exceeded
.Dv {PATH_MAX}
@


1.29
log
@document mount_ntfs and better formatting;
ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.28 2003/06/10 17:51:02 millert Exp $
d292 1
a292 1
A pathname contains a character with the high-order bit set.
d389 1
a389 1
The pathname contains a character with the high-order bit set.
@


1.28
log
@o make mount(2) return EROFS, not EPERM if ffs is dirty
o document EROFS in man page (2 possible causes)
o recognize EROFS in mount_ffs and try to give a reasonable error message
deraadt@@ OK
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.27 2003/06/09 17:17:27 millert Exp $
d195 22
a216 22
      int             version;      /* args structure version */
      struct sockaddr *addr;        /* file server address */
      int             addrlen;      /* length of address */
      int             sotype;       /* Socket type */
      int             proto;        /* and Protocol */
      u_char          *fh;          /* File handle to be mounted */
      int             fhsize;       /* Size, in bytes, of fh */
      int             flags;        /* flags */
      int             wsize;        /* write size in bytes */
      int             rsize;        /* read size in bytes */
      int             readdirsize;  /* readdir size in bytes */
      int             timeo;        /* initial timeout in .1 secs */
      int             retrans;      /* times to retry send */
      int             maxgrouplist; /* Max. size of group list */
      int             readahead;    /* # of blocks to readahead */
      int             leaseterm;    /* Term (sec) of lease */
      int             deadthresh;   /* Retrans threshold */
      char            *hostname;    /* server's name */
      int             acregmin;     /* Attr cache file recently modified */
      int             acregmax;     /* ac file not recently modified */
      int             acdirmin;     /* ac for dir recently modified */
      int             acdirmax;     /* ac for dir not recently modified */
d218 19
@


1.27
log
@Mention that you can get EPERM when trying to mount an unclean filesystem.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.26 2003/06/02 20:18:39 millert Exp $
a252 4
.It Bq Er EPERM
The filesystem was not unmounted cleanly and
.Dv MNT_FORCE
was not specified.
d318 10
@


1.26
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.25 2003/06/01 20:25:23 jmc Exp $
d253 4
@


1.25
log
@- section reorder
- merge COMPATIBILITY
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.24 2003/04/02 16:04:18 jmc Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.24
log
@nfs -> NFS
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.23 2003/02/27 07:55:34 jmc Exp $
d159 1
a159 1
      struct    export_args export_info; 
d168 1
a168 1
      struct	export_args export_info; 
a395 2
.Sh BUGS
Some of the error codes need translation to more obvious messages.
d402 2
@


1.23
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.22 2002/04/23 18:55:43 espie Exp $
d324 2
a325 2
The following errors can occur for a
.Em nfs
d329 1
a329 1
.Em Nfs
@


1.22
log
@sync doc, export->export_info.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.21 2001/04/22 17:23:56 krw Exp $
d195 1
@


1.21
log
@In the verbiage for MNT_SOFTDEP add a reference to 'softdep' in
mount(8).

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.20 2001/04/05 04:01:55 aaron Exp $
d133 1
a133 1
    struct	export_args export;
d145 1
a145 1
    struct	export_args export;
d159 2
a160 1
      struct    export_args export; /* network export information */
d168 2
a169 1
      struct	export_args export; /* if we can export an MFS */
d179 1
a179 1
	struct	export_args export;
@


1.20
log
@Updates and corrections from gluk@@ after recent softupdates changes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.19 2000/09/22 02:18:15 espie Exp $
d104 2
a105 1
Applies to FFS filesystems only.
@


1.19
log
@Document cd/ados/msdos options.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.18 2000/04/15 11:46:03 aaron Exp $
d100 5
d307 2
a308 2
The super block for the filesystem had a bad magic
number or an out of range block size.
@


1.18
log
@- For consistency, `super-user' -> `superuser' in all cases.
- Some punctuation fixes.
- Some `id' -> `ID'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.17 1999/09/25 21:28:04 pjanzen Exp $
d123 26
d157 30
a211 10
};
.Ed
.Pp
.Dv MOUNT_MFS
.Bd -literal -offset indent -compact
struct mfs_args {
      char	*fspec;             /* name to export for statfs */
      struct	export_args export; /* if we can export an MFS */
      caddr_t	base;               /* base of filesystem in mem */
      u_long	size;               /* size of filesystem */
@


1.17
log
@grammar
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.16 1999/07/05 06:08:05 aaron Exp $
d84 1
a84 1
even the super-user may not write to it.
d201 1
a201 1
The caller is not the super-user.
d305 1
a305 1
The caller is not the super-user.
@


1.16
log
@use .Li to refer to data types
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.15 1999/06/29 14:10:08 aaron Exp $
d65 1
a65 1
(See
d74 1
a74 1
of a successful mount are swept under the carpet so to speak, and
d83 2
a84 2
The filesystem should be treated as read-only;
Even the super-user may not write on it.
d95 3
a97 1
Union with underlying filesystem instead of obscuring it.
a184 1
The
d186 1
a186 1
returns the value 0 if the mount was successful, otherwise \-1 is returned
d192 1
a192 1
returns the value 0 if the unmount succeeded; otherwise \-1 is returned
@


1.15
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.14 1999/05/27 16:10:36 millert Exp $
d57 1
a57 1
.Ar dir .
d59 1
a59 1
.Ar data
d62 1
a62 1
.Ar type
d64 1
a64 1
.Ar data
d66 1
a66 1
.Ar type
d70 1
a70 1
.Ar dir .
d72 1
a72 1
.Ar dir
d78 1
a78 1
.Ar flags
d234 1
a234 1
.Em ufs
d239 1
a239 1
.Ar fspec
d242 1
a242 1
.Ar Fspec
d246 1
a246 1
.Ar fspec
d250 1
a250 1
.Ar Fspec
d264 1
a264 1
.Ar Fspec
d330 1
a330 1
.Em ufs
d332 1
a332 1
.Em mfs
@


1.14
log
@add missing members to nfs_args
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.13 1999/05/23 14:10:55 aaron Exp $
d185 1
a185 1
returns the value 0 if the mount was successful, otherwise -1 is returned
d191 1
a191 1
returns the value 0 if the unmount succeeded; otherwise -1 is returned
@


1.13
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.12 1999/05/16 19:55:30 alex Exp $
d150 4
@


1.12
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.11 1999/04/18 17:26:52 espie Exp $
d39 1
a39 1
.Os BSD 4
@


1.11
log
@Add Xrefs.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.10 1999/03/05 10:37:18 deraadt Exp $
d333 1
d335 1
a335 2
.Xr umount 8 ,
.Xr mfs 8
@


1.10
log
@fix umount references; markus.friedl@@informatik.uni-erlangen.de
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.9 1999/02/27 21:56:34 deraadt Exp $
d332 1
@


1.9
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.8 1998/12/21 14:08:59 art Exp $
d164 1
a164 1
.Fn umount
d186 2
a187 2
.Nm umount
returns the value 0 if the umount succeeded; otherwise -1 is returned
d296 1
a296 1
.Nm umount
d340 1
a340 1
.Fn umount
@


1.8
log
@document EOPNOTSUPP
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.7 1998/06/08 17:17:15 deraadt Exp $
d115 1
a115 1
.Fa Data
d222 1
a222 1
.Fa Dir
d225 1
a225 1
.Fa Type
d321 1
a321 1
.Fa Dir
@


1.7
log
@do not needlessly uppercase function names
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.6 1997/03/09 19:41:16 millert Exp $
d224 3
@


1.6
log
@Mention MNT_NOATIME and pull in some changes from the lite2 version.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.5 1996/03/19 23:15:17 niklas Exp $
d186 1
a186 1
.Nm Umount
d192 1
a192 1
.Fn Mount
d293 1
a293 1
.Nm Umount
d335 1
a335 1
.Fn Mount
@


1.5
log
@From NetBSD: merge of 960317
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount.2,v 1.4 1996/03/09 02:42:59 niklas Exp $
d43 1
a43 1
.Nd mount or dismount a file system
d55 1
a55 1
a file system object onto the system file tree
d60 1
a60 1
describes the file system object to be mounted.
d68 1
a68 1
The contents of the file system
d75 1
a75 1
are unavailable until the file system is unmounted.
d80 1
a80 1
suppress default semantics which affect file system access.
d83 1
a83 1
The file system should be treated as read-only;
d85 3
d89 1
a89 1
Do not allow files to be executed from the file system.
d93 1
a93 1
Do not interpret special files on the file system.
d97 1
a97 1
All I/O to the file system should be done synchronously.
d102 2
a103 2
indicates that the mount command is being applied 
to an already mounted file system.
d105 2
a106 2
that the file system be unmounted and remounted.
Some file systems may not allow all flags to be changed.
d108 1
a108 1
most file systems will not allow a change from read-write to read-only.
d112 2
a113 2
argument defines the type of the file system.
The types of file systems known to the system are defined in
d118 1
a118 1
The currently supported types of file systems and
d158 2
a159 2
      caddr_t	base;               /* base of file system in mem */
      u_long	size;               /* size of file system */
d165 1
a165 1
function call disassociates the file system from the specified
d173 1
a173 1
to specify that the file system should be forcibly unmounted even if files are
d177 1
a177 1
even if the file system is later remounted.
d194 1
a194 1
.Bl -tag -width Er
d198 1
a198 1
A component of a pathname exceeded 
d200 1
a200 1
characters, or an entire path name exceeded 
d216 2
d228 2
a229 2
file system mount:
.Bl -tag -width Er
d238 1
a238 1
The major device number of 
d248 1
a248 1
The super block for the file system had a bad magic
d252 1
a252 1
group information for the file system.
d263 2
a264 2
file system mount:
.Bl -tag -width Er
d275 2
a276 2
file system mount:
.Bl -tag -width Er
d280 1
a280 1
The super block for the file system had a bad magic
d284 1
a284 1
group information for the file system.
d295 1
a295 1
.Bl -tag -width Er
d300 2
d303 1
a303 1
A component of a pathname exceeded 
d305 1
a305 1
characters, or an entire path name exceeded 
d314 1
a314 1
on the file system.
d316 1
a316 1
An I/O error occurred while writing cached file system information.
d326 1
a326 1
mount can also fail if the maximum number of file systems are currently
d338 1
a338 1
function calls appeared in 
@


1.4
log
@From NetBSD: 960217 merge
@
text
@d1 2
a2 2
.\"	$OpenBSD$
.\"	$NetBSD: mount.2,v 1.11 1996/02/08 18:33:58 mycroft Exp $
d91 2
d121 2
a122 3
      char	*fspec;  /* Block special file to mount */
      int	exflags; /* export related flags */
      uid_t	exroot;  /* mapping for root uid */
d129 18
a146 8
      struct sockaddr_in *addr; /* file server address */
      nfsv2fh_t *fh;       /* File handle to be mounted */
      int       flags;     /* flags */
      int       wsize;     /* write size in bytes */
      int       rsize;     /* read size in bytes */
      int       timeo;     /* initial timeout 0.1 secs */
      int       retrans;   /* times to retry send */
      char      *hostname; /* server's name */
d153 4
a156 3
      char	*name;	/* name of backing process */
      caddr_t	base;	/* base address of the file system */
      u_long	size;	/* size of the file system */
@


1.3
log
@from netbsd:
add & fix a bunch of system call pages
@
text
@d1 2
a2 1
.\"	$NetBSD: mount.2,v 1.10 1995/11/28 06:41:53 jtc Exp $
d48 1
a48 1
.Fn mount "char *type" "const char *dir" "int flags" "void *data"
@


1.2
log
@complete ufs -> ffs change (From John Kohl; PR #1403)
@
text
@d1 1
a1 1
.\"	$NetBSD: mount.2,v 1.8.2.1 1995/11/01 00:06:16 jtc Exp $
d47 1
a47 1
.Fn mount "int type" "const char *dir" "int flags" "caddr_t data"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: mount.2,v 1.8 1995/02/27 12:34:49 cgd Exp $
d115 1
a115 1
.Dv MOUNT_UFS
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
