head	1.35;
access;
symbols
	OPENBSD_6_1:1.35.0.2
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.33.0.2
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.31.0.6
	OPENBSD_5_8_BASE:1.31
	OPENBSD_5_7:1.31.0.2
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.23.0.6
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.22.0.2
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.21.0.24
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.22
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.20
	OPENBSD_5_0:1.21.0.18
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.16
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.14
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.10
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.12
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.8
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.6
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.19.0.14
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.12
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.10
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.8
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.19.0.6
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.4
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@# @;


1.35
date	2017.02.14.17.51.14;	author tb;	state Exp;
branches;
next	1.34;
commitid	eSZnhhwvsddarrh9;

1.34
date	2016.09.17.01.01.42;	author guenther;	state Exp;
branches;
next	1.33;
commitid	XAaA6WzzWng2gOy8;

1.33
date	2016.06.07.16.18.56;	author tedu;	state Exp;
branches;
next	1.32;
commitid	zErgpwYZ9LaIS7qF;

1.32
date	2015.12.25.01.48.08;	author tb;	state Exp;
branches;
next	1.31;
commitid	7nyWtvop4idGBg9L;

1.31
date	2015.03.03.01.13.41;	author kspillner;	state Exp;
branches;
next	1.30;
commitid	upHha9BGtxcahSoo;

1.30
date	2015.03.02.21.17.00;	author millert;	state Exp;
branches;
next	1.29;
commitid	tWCxlL6SU6WlVHWc;

1.29
date	2015.02.05.02.33.09;	author schwarze;	state Exp;
branches;
next	1.28;
commitid	3DjwIM9vrpCmLhTQ;

1.28
date	2014.12.16.00.06.49;	author schwarze;	state Exp;
branches;
next	1.27;
commitid	V04BuZyu1wULJQGU;

1.27
date	2014.11.30.21.58.22;	author schwarze;	state Exp;
branches;
next	1.26;
commitid	bDP0FqOl5f55v0nd;

1.26
date	2014.11.05.07.04.49;	author jmc;	state Exp;
branches;
next	1.25;
commitid	Wwjcu1JZVWvMXhmK;

1.25
date	2014.11.05.00.08.40;	author millert;	state Exp;
branches;
next	1.24;
commitid	VE3uKjA4DjQQt2MO;

1.24
date	2014.11.03.22.15.14;	author millert;	state Exp;
branches;
next	1.23;
commitid	Ba5ORWz4ju8LTDRv;

1.23
date	2013.11.02.17.25.34;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2013.04.29.17.06.20;	author matthew;	state Exp;
branches;
next	1.21;

1.21
date	2007.07.11.08.12.15;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.31.19.19.33;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2004.01.08.18.35.34;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.10.23.10.08;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.23.16.53.34;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.08.18.29.15;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.19.22.16.39;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.25.22.14.19;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.27.07.55.34;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.02.22.34.21;	author jj;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.11.08.13.18;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.18.05.12.11;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.09.12.59.28;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.22.12.00.43;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.29.14.10.14;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.16.19.55.33;	author alex;	state Exp;
branches;
next	1.5;

1.5
date	99.02.27.21.56.38;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.08.17.17.35.12;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.07.06.18.28.11;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.07.02.24.34;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.05.18.08.53.11;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Missing opening brace. Spotted by Hiltjo Posthuma.
@
text
@.\"	$OpenBSD: poll.2,v 1.34 2016/09/17 01:01:42 guenther Exp $
.\"
.\" Copyright (c) 1994 Jason R. Thorpe
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by Jason R. Thorpe.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\" BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
.\" AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\"
.Dd $Mdocdate: September 17 2016 $
.Dt POLL 2
.Os
.Sh NAME
.Nm poll ,
.Nm ppoll
.Nd synchronous I/O multiplexing
.Sh SYNOPSIS
.In poll.h
.Ft int
.Fn poll "struct pollfd *fds" "nfds_t nfds" "int timeout"
.Ft int
.Fn ppoll "struct pollfd *fds" "nfds_t nfds" "const struct timespec *timeout" "const sigset_t *mask"
.Sh DESCRIPTION
.Fn poll
provides a mechanism for multiplexing I/O across a set of file
descriptors.
It is similar in function to
.Xr select 2 .
Unlike
.Xr select 2 ,
however, it is possible to only pass in data corresponding to the
file descriptors for which events are wanted.
This makes
.Fn poll
more efficient than
.Xr select 2
in most cases.
.Pp
The arguments are as follows:
.Bl -tag -width timeout
.It Fa fds
Points to an array of
.Vt pollfd
structures, which are defined as:
.Bd -literal -offset indent
struct pollfd {
	int fd;
	short events;
	short revents;
};
.Ed
.Pp
The
.Fa fd
member is an open file descriptor.
If
.Fa fd
is -1,
the
.Vt pollfd
structure is considered unused, and
.Fa revents
will be cleared.
.Pp
The
.Fa events
and
.Fa revents
members are bitmasks of conditions to monitor and conditions found,
respectively.
.It Fa nfds
An unsigned integer specifying the number of
.Vt pollfd
structures in the array.
.It Fa timeout
Maximum interval to wait for the poll to complete, in milliseconds.
If this value is 0,
.Fn poll
will return immediately.
If this value is
.Dv INFTIM Pq -1 ,
.Fn poll
will block indefinitely until a condition is found.
.El
.Pp
The calling process sets the
.Fa events
bitmask and
.Fn poll
sets the
.Fa revents
bitmask.
Each call to
.Fn poll
resets the
.Fa revents
bitmask for accuracy.
The condition flags in the bitmasks are defined as:
.Bl -tag -width POLLRDNORM
.It Dv POLLIN
Data other than high-priority data may be read without blocking.
.It Dv POLLRDNORM
Normal data may be read without blocking.
.It Dv POLLRDBAND
Priority data may be read without blocking.
.It Dv POLLNORM
Same as
.Dv POLLRDNORM .
This flag is provided for source code compatibility with older
programs and should not be used in new code.
.It Dv POLLPRI
High-priority data may be read without blocking.
.It Dv POLLOUT
Normal data may be written without blocking.
.It Dv POLLWRNORM
Same as
.Dv POLLOUT .
.It Dv POLLWRBAND
Priority data may be written.
.It Dv POLLERR
An error has occurred on the device or socket.
This flag is only valid in the
.Fa revents
bitmask; it is ignored in the
.Fa events
member.
.It Dv POLLHUP
The device or socket has been disconnected.
This event and
.Dv POLLOUT
are mutually-exclusive; a descriptor can never be writable if a hangup has
occurred.
However, this event and
.Dv POLLIN ,
.Dv POLLRDNORM ,
.Dv POLLRDBAND ,
or
.Dv POLLPRI
are not mutually-exclusive.
This flag is only valid in the
.Fa revents
bitmask; it is ignored in the
.Fa events
member.
.It Dv POLLNVAL
The corresponding file descriptor is invalid.
This flag is only valid in the
.Fa revents
bitmask; it is ignored in the
.Fa events
member.
.El
.Pp
The significance and semantics of normal, priority, and high-priority
data are device-specific.
For example, on
.Ox ,
the
.Dv POLLPRI
and
.Dv POLLRDBAND
flags may be used to detect when out-of-band socket data may be read
without blocking.
.Pp
In addition to I/O multiplexing,
.Fn poll
can be used to generate simple timeouts.
This functionality may be achieved by passing a null pointer for
.Fa fds .
.Pp
The
.Fn ppoll
function is similar to
.Fn poll
except that it specifies the timeout using a timespec structure,
and a null pointer is used to specify an indefinite timeout
instead of
.Dv INFTIM .
Also, if
.Fa mask
is a non-null pointer,
.Fn ppoll
atomically sets the calling thread's signal mask to the signal set
pointed to by
.Fa mask
for the duration of the function call.
In this case, the original signal mask will be restored before
.Fn ppoll
returns.
.Sh RETURN VALUES
Upon error,
.Fn poll
and
.Fn ppoll
return \-1 and set the global variable
.Va errno
to indicate the error.
If the timeout interval was reached before any events occurred,
they return 0.
Otherwise, they return the number of
.Vt pollfd
structures for which
.Fa revents
is non-zero.
.Sh IDIOMS
Care must be taken when converting code from
.Xr select 2
to
.Fn poll
as they have slightly different semantics.
The first semantic difference is that, unlike
.Xr select 2 ,
.Fn poll
has a way of indicating that one or more file descriptors is invalid
by setting a flag in the
.Fa revents
field of corresponding entry of
.Fa fds ,
whereas
.Xr select 2
returns an error (-1) if any of the descriptors with bits set in
the
.Vt fd_set
are invalid.
The second difference is that on EOF there is no guarantee that
.Dv POLLIN
will be set in
.Fa revents ,
the caller must also check for
.Dv POLLHUP .
This differs from
.Xr select 2
where EOF is considered as a read event.
.Pp
Consider the following usage of
.Xr select 2
that implements a read from the standard input with a
60 second time out:
.Bd -literal -offset indent
struct timeval timeout;
fd_set readfds;
char buf[BUFSIZ];
int nready;

timeout.tv_sec = 60;
timeout.tv_usec = 0;
FD_ZERO(&readfds);
FD_SET(STDIN_FILENO, &readfds);
nready = select(STDIN_FILENO + 1, &readfds, NULL, NULL, &timeout);
if (nready == -1)
	err(1, "select");
if (nready == 0)
	errx(1, "time out");
if (FD_ISSET(STDIN_FILENO, &readfds)) {
	if (read(STDIN_FILENO, buf, sizeof(buf)) == -1)
		err(1, "read");
}
.Ed
.Pp
This can be converted to
.Fn poll
as follows:
.Bd -literal -offset indent
struct pollfd pfd[1];
char buf[BUFSIZ];
int nready;

pfd[0].fd = STDIN_FILENO;
pfd[0].events = POLLIN;
nready = poll(pfd, 1, 60 * 1000);
if (nready == -1)
	err(1, "poll");
if (nready == 0)
	errx(1, "time out");
if ((pfd[0].revents & (POLLERR|POLLNVAL)))
	errx(1, "bad fd %d", pfd[0].fd);
if ((pfd[0].revents & (POLLIN|POLLHUP))) {
	if (read(STDIN_FILENO, buf, sizeof(buf)) == -1)
		err(1, "read");
}
.Ed
.Sh ERRORS
.Fn poll
and
.Fn ppoll
will fail if:
.Bl -tag -width Er
.It Bq Er EFAULT
.Fa fds
points outside the process's allocated address space.
.It Bq Er EINTR
A signal was caught before any polled events occurred
and before the timeout elapsed.
.It Bq Er EINVAL
.Fa nfds
was greater than the number of available
file descriptors.
.It Bq Er EINVAL
The timeout passed was invalid.
.El
.Sh SEE ALSO
.Xr clock_gettime 2 ,
.Xr getrlimit 2 ,
.Xr read 2 ,
.Xr select 2 ,
.Xr write 2
.Sh STANDARDS
The
.Fn poll
function is compliant with the
.St -p1003.1-2008
specification.
The
.Fn ppoll
function is a Linux extension.
.Sh HISTORY
A
.Fn poll
system call appeared in
.At V.3 .
The
.Fn ppoll
function appeared in
.Ox 5.4 .
.Sh BUGS
The
.Dv POLLWRBAND
flag is accepted but ignored by the kernel.
.Pp
Because
.Ox
does not implement STREAMS,
there is no distinction between some of the fields in the
.Fa events
and
.Fa revents
bitmasks.
As a result, the
.Dv POLLIN ,
.Dv POLLNORM ,
and
.Dv POLLRDNORM
flags are equivalent.
Similarly, the
.Dv POLLPRI
and
.Dv POLLRDBAND
flags are also equivalent.
.Pp
Internally to the kernel,
.Fn poll
and
.Fn ppoll
work poorly if multiple processes wait on the same file descriptor.
@


1.34
log
@Restore warnings about multiple process waiting on same fd

requested by mpf@@
ok deraadt tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.33 2016/06/07 16:18:56 tedu Exp $
d31 1
a31 1
.Dd $Mdocdate: June 7 2016 $
d298 1
a298 1
if ((pfd[0].revents & (POLLIN|POLLHUP)))
@


1.33
log
@remove historic note about multiple processes. mostly irrelevant today.
ok deraadt millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.32 2015/12/25 01:48:08 tb Exp $
d31 1
a31 1
.Dd $Mdocdate: December 25 2015 $
d370 6
@


1.32
log
@Add missing second argument to FD_SET macro in example code snippet.
Spotted and diff provided by d ! lowe () openmailbox ! org, thanks!

ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.31 2015/03/03 01:13:41 kspillner Exp $
d31 1
a31 1
.Dd $Mdocdate: March 3 2015 $
a369 6
.Pp
Internally to the kernel,
.Fn poll
and
.Fn ppoll
work poorly if multiple processes wait on the same file descriptor.
@


1.31
log
@Fix variable name typo in IDIOMS.

ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.30 2015/03/02 21:17:00 millert Exp $
d31 1
a31 1
.Dd $Mdocdate: March 2 2015 $
d269 1
a269 1
FD_SET(STDIN_FILENO);
@


1.30
log
@Document that POLLPRI and POLLRDBAND are set for out-of-band socket
data.
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.29 2015/02/05 02:33:09 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: February 5 2015 $
d285 1
a285 1
struct pollfd pdf[1];
@


1.29
log
@macro fixes from Kaspars at Bankovskis dot net;
also fixing one typo in fts(3) while here
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.28 2014/12/16 00:06:49 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: December 16 2014 $
d177 8
d365 5
@


1.28
log
@use .In and delete .Tn; from Kaspars at Bankovskis dot net
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.27 2014/11/30 21:58:22 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: November 30 2014 $
d64 1
a64 1
.Fa pollfd
d81 1
a81 1
.Fa pollfd
d94 1
a94 1
.Fa pollfd
d101 2
a102 1
If this value is INFTIM (-1),
d214 1
a214 1
.Fa pollfd
d220 1
a220 1
.Fn select
d225 1
a225 1
.Fn select ,
d233 1
a233 1
.Fn select
d235 3
a237 1
the fd_set are invalid.
d245 1
a245 1
.Fn select
d249 1
a249 1
.Fn select
@


1.27
log
@update STANDARDS; ok millert@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.26 2014/11/05 07:04:49 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: November 5 2014 $
d39 1
a39 1
.Fd #include <poll.h>
d342 1
a342 2
does not implement
.Tn STREAMS ,
@


1.26
log
@zap double word;
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.25 2014/11/05 00:08:40 millert Exp $
d321 1
a321 1
.St -xpg4.3
@


1.25
log
@Convert EXAMPLES to IDIOMS and make it a simple select -> poll
conversion along with commentary.  A more comprehensive sample
conversion is needed too.  OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.24 2014/11/03 22:15:14 millert Exp $
d31 1
a31 1
.Dd $Mdocdate: November 3 2014 $
d226 1
a226 1
has a way of of indicating that one or more file descriptors is invalid
@


1.24
log
@POLLERR is only valid in revents so it is not a bug that it is
ignored in events.  The kernel does actually set POLLERR in revents
in some cases.
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.23 2013/11/02 17:25:34 espie Exp $
d31 1
a31 1
.Dd $Mdocdate: November 2 2013 $
d217 32
a248 3
.Sh EXAMPLES
The following example implements a read from the standard input that times
out after 60 seconds:
d250 4
a253 4
#include <err.h>
#include <poll.h>
#include <stdio.h>
#include <unistd.h>
d255 20
a274 1
struct pollfd pfd[1];
d276 1
a276 1
int nfds;
d280 4
a283 4
nfds = poll(pfd, 1, 60 * 1000);
if (nfds == -1 || (pfd[0].revents & (POLLERR|POLLHUP|POLLNVAL)))
	errx(1, "poll error");
if (nfds == 0)
d285 6
a290 2
if (read(STDIN_FILENO, buf, sizeof(buf)) == -1)
	errx(1, "read");
@


1.23
log
@.Xr clock_gettime
okay deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.22 2013/04/29 17:06:20 matthew Exp $
d31 1
a31 1
.Dd $Mdocdate: April 29 2013 $
a284 2
.Dv POLLERR
and
d286 1
a286 1
flags are accepted but ignored by the kernel.
@


1.22
log
@Extend P_SIGSUSPEND handling in userret() to properly restore the
sigmask even if there are no pending signals under the temporary
sigmask.

Refactor existing select() and poll() system calls to introduce the
pselect() and ppoll() system calls.

Add rthread wrappers for pselect() and ppoll().  While there, update
cancellation point comments to reflect recent fdatasync() addition.

Minor bumps for libc and librthread due to new symbols.

ok guenther, millert, deraadt, jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.21 2007/07/11 08:12:15 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: July 11 2007 $
d260 1
@


1.21
log
@add a STANDARDS section, as requested by itojun;
ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.20 2007/05/31 19:19:33 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate$
d35 2
a36 1
.Nm poll
d42 2
d182 20
d205 3
a207 1
returns \-1 and sets the global variable
d211 4
a214 5
.Fn poll
returns 0.
Otherwise,
.Fn poll
returns the number of file descriptors for which
d242 2
d245 1
a245 1
.Bl -tag -width "EINVAL   "
d250 2
a251 2
.Fn poll
caught a signal during the polling process.
d257 1
a257 3
The timeout passed to
.Fn poll
was too large.
d270 3
d278 4
d307 3
a309 1
works poorly if multiple processes wait on the same file descriptor.
@


1.20
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.19 2004/01/08 18:35:34 millert Exp $
d240 6
@


1.19
log
@Add missing include of poll.h to example code; Andre Nathan
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.18 2003/12/10 23:10:08 millert Exp $
d31 1
a31 1
.Dd December 13, 1994
@


1.18
log
@Add an nfds_t type as per POSIX and also add pollfd_t like Solaris has.
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.17 2003/09/23 16:53:34 millert Exp $
d198 1
@


1.17
log
@o mention why poll(2) is often more effecient than select(2)
o add a bit on priority from POSIX
o provide a simple example
o our poll(2) does not return EAGAIN (we block on memory allocation failure)
o correct some comments about the flags now that we support more of them
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.16 2003/09/08 18:29:15 millert Exp $
d40 1
a40 1
.Fn poll "struct pollfd *fds" "int nfds" "int timeout"
d90 1
a90 1
The number of
d227 1
a227 1
was either a negative number or greater than the number of available
@


1.16
log
@o Use proper mdoc macros for function macros and defines
o Update flags values based on POSIX-2001
o Remove inaccuracies
o Document what we don't support in BUGS
o More specific HISTORY info
o Update SEE ALSO
OK jmc@@ and deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.15 2003/08/19 22:16:39 deraadt Exp $
d43 1
a43 1
provides a mechanism for reporting I/O conditions across a set of file
d45 11
d95 1
a95 1
If this value is 0, then
d171 3
d182 1
a182 1
returns a \-1 and sets the global variable
d186 2
a187 1
a 0 is returned.
d193 22
d219 6
a232 9
.It Bq Er EAGAIN
Resource allocation failed inside of
.Fn poll .
Subsequent calls to
.Fn poll
may succeed.
.It Bq Er EINTR
.Fn poll
caught a signal during the polling process.
d246 1
a246 1
.Dv POLLHUP
d248 2
a249 3
.Dv POLLERR
flags are currently unimplemented in
.Ox .
d263 1
a263 1
.Dv POLLPRI ,
d265 5
a269 7
and
.Dv POLLRDBAND
flags are all equivalent.
Also, the
.Dv POLLWRBAND
flag is equivalent to
.Dv POLLWRNORM .
@


1.15
log
@document what happens when pollfd.fd is -1
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.14 2003/04/25 22:14:19 tedu Exp $
d48 1
a48 1
.It Pa fds
d50 1
a50 1
.Nm pollfd
d61 1
a61 1
.Pa fd
d64 1
a64 1
.Pa fd
d67 1
a67 1
.Nm pollfd
d69 1
a69 1
.Pa revents
d73 1
a73 1
.Pa events
d75 1
a75 1
.Pa revents
d78 1
a78 1
.It Pa nfds
d80 1
a80 1
.Nm pollfd
d82 1
a82 1
.It Pa timeout
d93 1
a93 1
.Pa events
d97 1
a97 1
.Pa revents
d102 1
a102 1
.Pa revents
d106 46
a151 18
.It Nm POLLIN
Data is available on the file descriptor for reading.
.It Nm POLLNORM
Same as
.Nm POLLIN .
.It Nm POLLPRI
Same as
.Nm POLLIN .
.It Nm POLLOUT
Data can be written to the file descriptor without blocking.
.It Nm POLLERR
This flag is not used in this implementation and is provided only for source
code compatibility.
.It Nm POLLHUP
The file descriptor was valid before the polling process and invalid after.
Presumably, this means that the file descriptor was closed sometime during
the poll.
.It Nm POLLNVAL
d153 5
a157 12
.It Nm POLLRDNORM
Same as
.Nm POLLIN .
.It Nm POLLRDBAND
Same as
.Nm POLLIN .
.It Nm POLLWRNORM
Same as
.Nm POLLOUT .
.It Nm POLLWRBAND
Same as
.Nm POLLOUT .
a159 12
All flags except
.Nm POLLIN ,
.Nm POLLOUT ,
and their synonyms are for use only in the
.Pa revents
member of the
.Nm pollfd
structure.
An attempt to set any of these flags in the
.Pa events
member will generate an error condition.
.Pp
d164 1
a164 5
.Pa fds .
.Sh WARNINGS
The
.Nm POLLHUP
flag is only a close approximation and may not always be accurate.
d176 1
a176 1
.Pa revents
d183 1
a183 1
.Pa nfds
a186 6
An invalid flag was set in the
.Pa events
member of the
.Nm pollfd
structure.
.It Bq Er EINVAL
d201 2
d204 1
a204 1
.Xr sysconf 3
d209 30
a238 1
.At V .
@


1.14
log
@Remove note about POLLMSG.  not used and not provided. ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.13 2003/02/27 07:55:34 jmc Exp $
d63 9
@


1.13
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.12 2001/11/02 22:34:21 jj Exp $
a127 3
.It Nm POLLMSG
This flag is not used in this implementation and is provided only for source
code compatibility.
@


1.12
log
@poll(2) manpage references itself, accept(2) references poll(2) twice.
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.11 2001/08/11 08:13:18 fgsch Exp $
d176 1
a176 1
An invalid flags was set in the
@


1.11
log
@Define INFTIM to -1, as appears everywhere. Talk about it in the
manpage; millert@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.10 2000/10/18 05:12:11 aaron Exp $
a195 1
.Xr poll 2 ,
@


1.10
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.9 2000/08/09 12:59:28 aaron Exp $
d78 1
a78 1
If this value is less than 0,
@


1.9
log
@Insert missing period.
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.8 2000/01/22 12:00:43 aaron Exp $
d62 2
a63 1
member is an open file descriptor.  The
d74 2
a75 2
Maximum interval to wait for the poll to complete, in milliseconds.  If
this value is 0, then
d77 2
a78 1
will return immediately.  If this value is less than 0,
d89 2
a90 1
bitmask.  Each call to
d94 2
a95 1
bitmask for accuracy.  The condition flags in the bitmasks are defined as:
d140 2
a141 1
structure.  An attempt to set any of these flags in the
d147 2
a148 2
can be used to generate simple timeouts.  This functionality may be achieved
by passing a null pointer for
d159 4
a162 2
to indicate the error.  If the timeout interval was reached before any events
occurred, a 0 is returned.  Otherwise,
@


1.8
log
@Use .Va macro when referring to the global variable errno.
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.7 1999/06/29 14:10:14 aaron Exp $
d196 1
a196 1
.At V
@


1.7
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.6 1999/05/16 19:55:33 alex Exp $
d153 1
a153 1
.Pa errno
@


1.6
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.5 1999/02/27 21:56:38 deraadt Exp $
d143 1
a143 1
by passing a NULL pointer for
d152 1
a152 1
returns a -1 and sets the global variable
@


1.5
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.4 1998/08/17 17:35:12 deraadt Exp $
a188 1
.Xr sysconf 3 ,
d190 2
a191 1
.Xr select 2
@


1.4
log
@Xr poll
@
text
@d1 1
a1 1
.\"	$OpenBSD: poll.2,v 1.3 1998/07/06 18:28:11 deraadt Exp $
d42 1
a42 1
.Fn Poll
d161 1
a161 1
.Fn Poll
@


1.3
log
@fix openbsd tag
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d190 1
@


1.2
log
@poll is not a wrapper around select
@
text
@d1 1
@


1.1
log
@poll() as a system call
@
text
@a144 5
Since this implementation is a wrapper around
.Fn select ,
functionality is limited to such.  There is no differentiation between
standard and priority messages in the read or write queues.
.Pp
d175 1
a175 1
.Fn select
d184 1
a184 1
.Fn Select
@
