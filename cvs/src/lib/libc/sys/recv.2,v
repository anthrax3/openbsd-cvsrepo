head	1.43;
access;
symbols
	OPENBSD_6_1:1.43.0.12
	OPENBSD_6_1_BASE:1.43
	OPENBSD_6_0:1.43.0.8
	OPENBSD_6_0_BASE:1.43
	OPENBSD_5_9:1.43.0.4
	OPENBSD_5_9_BASE:1.43
	OPENBSD_5_8:1.43.0.6
	OPENBSD_5_8_BASE:1.43
	OPENBSD_5_7:1.43.0.2
	OPENBSD_5_7_BASE:1.43
	OPENBSD_5_6:1.40.0.6
	OPENBSD_5_6_BASE:1.40
	OPENBSD_5_5:1.40.0.4
	OPENBSD_5_5_BASE:1.40
	OPENBSD_5_4:1.37.0.10
	OPENBSD_5_4_BASE:1.37
	OPENBSD_5_3:1.37.0.8
	OPENBSD_5_3_BASE:1.37
	OPENBSD_5_2:1.37.0.6
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.4
	OPENBSD_5_0:1.37.0.2
	OPENBSD_5_0_BASE:1.37
	OPENBSD_4_9:1.36.0.12
	OPENBSD_4_9_BASE:1.36
	OPENBSD_4_8:1.36.0.10
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.36.0.6
	OPENBSD_4_7_BASE:1.36
	OPENBSD_4_6:1.36.0.8
	OPENBSD_4_6_BASE:1.36
	OPENBSD_4_5:1.36.0.4
	OPENBSD_4_5_BASE:1.36
	OPENBSD_4_4:1.36.0.2
	OPENBSD_4_4_BASE:1.36
	OPENBSD_4_3:1.35.0.4
	OPENBSD_4_3_BASE:1.35
	OPENBSD_4_2:1.35.0.2
	OPENBSD_4_2_BASE:1.35
	OPENBSD_4_1:1.34.0.8
	OPENBSD_4_1_BASE:1.34
	OPENBSD_4_0:1.34.0.6
	OPENBSD_4_0_BASE:1.34
	OPENBSD_3_9:1.34.0.4
	OPENBSD_3_9_BASE:1.34
	OPENBSD_3_8:1.34.0.2
	OPENBSD_3_8_BASE:1.34
	OPENBSD_3_7:1.33.0.2
	OPENBSD_3_7_BASE:1.33
	OPENBSD_3_6:1.31.0.2
	OPENBSD_3_6_BASE:1.31
	OPENBSD_3_5:1.28.0.4
	OPENBSD_3_5_BASE:1.28
	OPENBSD_3_4:1.28.0.2
	OPENBSD_3_4_BASE:1.28
	OPENBSD_3_3:1.26.0.6
	OPENBSD_3_3_BASE:1.26
	OPENBSD_3_2:1.26.0.4
	OPENBSD_3_2_BASE:1.26
	OPENBSD_3_1:1.26.0.2
	OPENBSD_3_1_BASE:1.26
	OPENBSD_3_0:1.24.0.6
	OPENBSD_3_0_BASE:1.24
	OPENBSD_2_9:1.24.0.4
	OPENBSD_2_9_BASE:1.24
	OPENBSD_2_8:1.24.0.2
	OPENBSD_2_8_BASE:1.24
	OPENBSD_2_7:1.23.0.2
	OPENBSD_2_7_BASE:1.23
	OPENBSD_2_6:1.22.0.2
	OPENBSD_2_6_BASE:1.22
	OPENBSD_2_5:1.14.0.2
	OPENBSD_2_5_BASE:1.14
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.43
date	2015.02.16.16.20.15;	author tedu;	state Exp;
branches;
next	1.42;
commitid	7pAPPQL7sOwcFTCT;

1.42
date	2014.09.09.06.32.37;	author guenther;	state Exp;
branches;
next	1.41;
commitid	zVKXOKwBKhUAmYCc;

1.41
date	2014.08.31.01.42.36;	author guenther;	state Exp;
branches;
next	1.40;
commitid	zF5A8BuuSSyqaDyM;

1.40
date	2014.02.13.07.30.39;	author guenther;	state Exp;
branches;
next	1.39;

1.39
date	2014.01.22.22.54.14;	author guenther;	state Exp;
branches;
next	1.38;

1.38
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.37;

1.37
date	2011.07.19.18.24.40;	author mikeb;	state Exp;
branches;
next	1.36;

1.36
date	2008.07.29.20.15.53;	author gilles;	state Exp;
branches;
next	1.35;

1.35
date	2007.05.31.19.19.33;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2005.07.04.05.02.15;	author jaredy;	state Exp;
branches;
next	1.33;

1.33
date	2005.01.06.00.32.48;	author jaredy;	state Exp;
branches;
next	1.32;

1.32
date	2004.11.12.10.36.09;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2004.07.26.08.59.00;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2004.04.27.18.51.17;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	2004.04.15.19.52.18;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.11.10.22.47;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.02.20.18.39;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2002.03.31.20.34.57;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2002.01.02.15.57.16;	author mpech;	state Exp;
branches;
next	1.24;

1.24
date	2000.10.18.05.12.11;	author aaron;	state Exp;
branches;
next	1.23;

1.23
date	2000.04.15.02.15.24;	author aaron;	state Exp;
branches;
next	1.22;

1.22
date	99.09.26.14.16.31;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	99.08.15.13.14.12;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	99.07.02.20.58.01;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	99.06.29.14.10.16;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	99.06.05.04.47.42;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.05.27.16.21.00;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	99.05.23.14.10.55;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.05.16.19.55.34;	author alex;	state Exp;
branches;
next	1.14;

1.14
date	99.02.27.21.56.42;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	99.02.15.21.22.25;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	99.02.15.19.04.21;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	99.02.05.00.40.23;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.08.17.17.35.14;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.08.05.16.49.38;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.07.28.19.47.14;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.07.28.04.49.31;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.07.06.18.28.18;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.11.24.07.24.56;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.11.16.20.01.15;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.22.20.33.05;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.06.30.03.48.03;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.28;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.43
log
@redundant though it may be, recv() is unlikely to be removed in a future
release. ok millert
@
text
@.\"	$OpenBSD: recv.2,v 1.42 2014/09/09 06:32:37 guenther Exp $
.\"	$NetBSD: recv.2,v 1.6 1995/02/27 12:36:08 cgd Exp $
.\"
.\" Copyright (c) 1983, 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)recv.2	8.3 (Berkeley) 2/21/94
.\"
.Dd $Mdocdate: September 9 2014 $
.Dt RECV 2
.Os
.Sh NAME
.Nm recv ,
.Nm recvfrom ,
.Nm recvmsg
.Nd receive a message from a socket
.Sh SYNOPSIS
.In sys/socket.h
.Ft ssize_t
.Fn recv "int s" "void *buf" "size_t len" "int flags"
.Ft ssize_t
.Fn recvfrom "int s" "void *buf" "size_t len" "int flags" "struct sockaddr *from" "socklen_t *fromlen"
.Ft ssize_t
.Fn recvmsg "int s" "struct msghdr *msg" "int flags"
.Sh DESCRIPTION
.Fn recvfrom
and
.Fn recvmsg
are used to receive messages from a socket,
.Fa s ,
and may be used to receive
data on a socket whether or not it is connection-oriented.
.Pp
If
.Fa from
is non-null and the socket is not connection-oriented,
the source address of the message is filled in.
.Fa fromlen
is a value-result parameter, initialized to the size of
the buffer associated with
.Fa from ,
and modified on return to indicate the actual size of the
address stored there.
.Pp
The
.Fn recv
call is normally used only on a
.Em connected
socket (see
.Xr connect 2 )
and is identical to
.Fn recvfrom
with a null
.Fa from
parameter.
.Pp
On successful completion, all three routines return the number of
message bytes read.
If a message is too long to fit in the supplied
buffer, excess bytes may be discarded depending on the type of socket
the message is received from (see
.Xr socket 2 ) .
.Pp
If no messages are available at the socket, the
receive call waits for a message to arrive, unless
the socket is nonblocking (see
.Xr fcntl 2 )
in which case the value
\-1 is returned and the external variable
.Va errno
set to
.Er EAGAIN .
The receive calls normally return any data available,
up to the requested amount,
rather than waiting for receipt of the full amount requested;
this behavior is affected by the socket-level options
.Dv SO_RCVLOWAT
and
.Dv SO_RCVTIMEO
described in
.Xr getsockopt 2 .
.Pp
The
.Xr select 2
or
.Xr poll 2
system calls may be used to determine when more data arrive.
.Pp
The
.Fa flags
argument is the bitwise OR of zero or more of the following values:
.Pp
.Bl -tag -width "MSG_CMSG_CLOEXECXX" -offset indent -compact
.It Dv MSG_OOB
process out-of-band data
.It Dv MSG_PEEK
peek at incoming message
.It Dv MSG_WAITALL
wait for full request or error
.It Dv MSG_DONTWAIT
don't block
.It Dv MSG_CMSG_CLOEXEC
set the close-on-exec flag on received file descriptors
.El
.Pp
The
.Dv MSG_OOB
flag requests receipt of out-of-band data
that would not be received in the normal data stream.
Some protocols place expedited data at the head of the normal
data queue, and thus this flag cannot be used with such protocols.
The
.Dv MSG_PEEK
flag causes the receive operation to return data
from the beginning of the receive queue without removing that
data from the queue.
Thus, a subsequent receive call will return the same data.
The
.Dv MSG_WAITALL
flag requests that the operation block until
the full request is satisfied.
However, the call may still return less data than requested
if a signal is caught, an error or disconnect occurs,
or the next data to be received is of a different type than that returned.
The
.Dv MSG_DONTWAIT
flag requests the call to return when it would block otherwise.
If no data is available,
.Va errno
is set to
.Er EAGAIN .
This flag is not available in strict ANSI or C99 compilation mode.
The
.Dv MSG_CMSG_CLOEXEC
requests that any file descriptors received as ancillary data with
.Fn recvmsg
(see below)
have their close-on-exec flag set.
.Pp
The
.Fn recvmsg
call uses a
.Fa msghdr
structure to minimize the number of directly supplied parameters.
This structure has the following form, as defined in
.In sys/socket.h :
.Bd -literal
struct msghdr {
	void		*msg_name;	/* optional address */
	socklen_t	msg_namelen;	/* size of address */
	struct		iovec *msg_iov;	/* scatter/gather array */
	unsigned int	msg_iovlen;	/* # elements in msg_iov */
	void		*msg_control;	/* ancillary data, see below */
	socklen_t	msg_controllen; /* ancillary data buffer len */
	int		msg_flags;	/* flags on received message */
};
.Ed
.Pp
Here
.Fa msg_name
and
.Fa msg_namelen
specify the source address if the socket is unconnected;
.Fa msg_name
may be given as a null pointer if no names are desired or required.
.Fa msg_iov
and
.Fa msg_iovlen
describe scatter gather locations, as discussed in
.Xr read 2 .
.Fa msg_control ,
which has length
.Fa msg_controllen ,
points to a buffer for other protocol control related messages
or other miscellaneous ancillary data.
The messages are of the form:
.Bd -literal
struct cmsghdr {
	socklen_t	cmsg_len;   /* data byte count, including hdr */
	int		cmsg_level; /* originating protocol */
	int		cmsg_type;  /* protocol-specific type */
/* followed by u_char	cmsg_data[]; */
};
.Ed
.Pp
See
.Xr CMSG_DATA 3
for how these messages are constructed and decomposed.
.Pp
Open file descriptors are now passed as ancillary data for
.Dv AF_UNIX
domain and
.Xr socketpair 2
sockets, with
.Fa cmsg_level
set to
.Dv SOL_SOCKET
and
.Fa cmsg_type
set to
.Dv SCM_RIGHTS .
.Pp
The
.Fa msg_flags
field is set on return according to the message received.
It will contain zero or more of the following values:
.Pp
.Bl -tag -width MSG_CTRUNC -offset indent -compact
.It Dv MSG_OOB
Returned to indicate that expedited or out-of-band data was received.
.It Dv MSG_EOR
Indicates end-of-record;
the data returned completed a record (generally used with sockets of type
.Dv SOCK_SEQPACKET ) .
.It Dv MSG_TRUNC
Indicates that
the trailing portion of a datagram was discarded because the datagram
was larger than the buffer supplied.
.It Dv MSG_CTRUNC
Indicates that some
control data were discarded due to lack of space in the buffer
for ancillary data.
.It Dv MSG_BCAST
Indicates that the packet was received as broadcast.
.It Dv MSG_MCAST
Indicates that the packet was received as multicast.
.El
.Sh RETURN VALUES
These calls return the number of bytes received, or \-1 if an error occurred.
.Sh ERRORS
.Fn recv ,
.Fn recvfrom ,
and
.Fn recvmsg
fail if:
.Bl -tag -width "[EHOSTUNREACH]"
.It Bq Er EBADF
The argument
.Fa s
is an invalid descriptor.
.It Bq Er ENOTCONN
The socket is associated with a connection-oriented protocol
and has not been connected (see
.Xr connect 2
and
.Xr accept 2 ) .
.It Bq Er ENOTSOCK
The argument
.Fa s
does not refer to a socket.
.It Bq Er EAGAIN
The socket is marked non-blocking, and the receive operation
would block, or
a receive timeout had been set,
and the timeout expired before data were received.
.It Bq Er EINTR
The receive was interrupted by delivery of a signal before
any data were available.
.It Bq Er EFAULT
The receive buffer pointer(s) point outside the process's
address space.
.It Bq Er EHOSTUNREACH
A socket operation was attempted to an unreachable host.
.It Bq Er EHOSTDOWN
A socket operation failed
because the destination host was down.
.It Bq Er ENETDOWN
A socket operation encountered a dead network.
.It Bq Er ECONNREFUSED
The socket is associated with a connection-oriented protocol
and the connection was forcefully rejected (see
.Xr connect 2 ) .
.El
.Pp
In addition,
.Fn recv
and
.Fn recvfrom
may return the following error:
.Bl -tag -width Er
.It Bq Er EINVAL
.Fa len
was larger than
.Dv SSIZE_MAX .
.El
.Pp
And
.Fn recvmsg
may return one of the following errors:
.Bl -tag -width Er
.It Bq Er EINVAL
The sum of the
.Fa iov_len
values in the
.Fa msg_iov
array overflowed an
.Em ssize_t .
.It Bq Er EMSGSIZE
The
.Fa msg_iovlen
member of
.Fa msg
was less than 0 or larger than
.Dv IOV_MAX .
.It Bq Er EMSGSIZE
The receiving program did not have sufficient
free file descriptor slots.
The descriptors are closed
and any pending data can be returned
by another call to
.Fn recvmsg .
.El
.Sh SEE ALSO
.Xr connect 2 ,
.Xr fcntl 2 ,
.Xr getsockopt 2 ,
.Xr poll 2 ,
.Xr read 2 ,
.Xr select 2 ,
.Xr socket 2 ,
.Xr socketpair 2 ,
.Xr CMSG_DATA 3 ,
.Xr sockatmark 3
.Sh STANDARDS
The
.Fn recv ,
.Fn recvfrom ,
and
.Fn recvmsg
functions conform to
.St -p1003.1-2008 .
The
.Dv MSG_DONTWAIT ,
.Dv MSG_BCAST ,
and
.Dv MSG_MCAST
flags are extensions to that specification.
.Sh HISTORY
The
.Fn recv
function call appeared in
.Bx 4.2 .
@


1.42
log
@Various updates and corrections to SYNOPSIS, ERRORS, and STANDARDS
Mention send(MSG_EOR)
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.41 2014/08/31 01:42:36 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: August 31 2014 $
a79 1
As it is redundant, it may not be supported in future releases.
@


1.41
log
@Add additional kernel interfaces for setting close-on-exec on fds
when creating them: pipe2(), dup3(), accept4(), MSG_CMSG_CLOEXEC,
SOCK_CLOEXEC.  Includes SOCK_NONBLOCK support.

ok matthew@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.40 2014/02/13 07:30:39 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: February 13 2014 $
d294 4
a311 10
Also,
.Fn recv
may return the following error:
.Bl -tag -width "[ECONNREFUSED]"
.It Bq Er ECONNREFUSED
The socket is associated with a connection-oriented protocol
and the connection was forcefully rejected (see
.Xr connect 2 ) .
.El
.Pp
d347 16
a362 1
.Xr CMSG_DATA 3
@


1.40
log
@Don't use use .Tn with AND/OR/NOT
Phrase any "The _flags_ argument is the ..." line consistently,
eliminating unnecessary use of 'inclusive' and saying "zero or more"
or "one or more" as appropriate

ok millert@@ jmc@@ schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.39 2014/01/22 22:54:14 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: January 22 2014 $
d42 1
a42 2
.Fd #include <sys/types.h>
.Fd #include <sys/socket.h>
d118 1
a118 1
.Bl -tag -width "MSG_DONTWAITXX" -offset indent -compact
d127 2
d158 6
@


1.39
log
@Use consistent phrasing for bitmask flags.

tweaking and ok millert@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.38 2014/01/21 03:15:45 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 21 2014 $
d117 1
a117 3
argument is the bitwise
.Tn OR
of zero or more of the following values:
@


1.38
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.37 2011/07/19 18:24:40 mikeb Exp $
d33 1
a33 1
.Dd $Mdocdate: July 19 2011 $
d117 3
a119 3
argument to a recv call is formed by
.Tn OR Ns ing
one or more of the values:
@


1.37
log
@no need to mention xerox network stack here;  ok claudio
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.36 2008/07/29 20:15:53 gilles Exp $
d33 1
a33 1
.Dd $Mdocdate: July 29 2008 $
d166 1
a166 1
.Aq Pa sys/socket.h :
@


1.36
log
@clarify EMSGSIZE

rewording by jmc@@, "lovely" deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.35 2007/05/31 19:19:33 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
a208 3
.Pp
As an example, one could use this to learn of changes in the data-stream
in XNS/SPP.
@


1.35
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.34 2005/07/04 05:02:15 jaredy Exp $
d33 1
a33 1
.Dd $Mdocdate$
d334 7
@


1.34
log
@link to new CMSG_DATA(3); prod by deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.33 2005/01/06 00:32:48 jaredy Exp $
d33 1
a33 1
.Dd February 15, 1999
@


1.33
log
@iso is no more, ok millert jmc henning deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.32 2004/11/12 10:36:09 jmc Exp $
d206 4
d343 2
a344 1
.Xr socketpair 2
@


1.32
log
@mention `s';

from aleksander piotrowski;
ok henning@@ deraadt@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.31 2004/07/26 08:59:00 jmc Exp $
d207 1
a207 4
in XNS/SPP, or in ISO, to obtain user-connection-request data by requesting
a recvmsg with no data buffer provided immediately after an
.Fn accept
call.
@


1.31
log
@- change some lists from -column to -tag (-column not needed) and adjust
for a decent -width
- document MSG_DONTWAIT (from FreeBSD)
- simplify macros
- document EHOSTUNREACH, EHOSTDOWN, and ENETDOWN; spotted by henning@@
- .Xr connect 2

ok henning@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.30 2004/04/27 18:51:17 millert Exp $
d54 3
a56 1
are used to receive messages from a socket, and may be used to receive
@


1.30
log
@fd passing works over a socketpair too of course so document this.
Also test it in regress to be pedantic (though the kernel path is
really the same).  While there, remove cred-passing code that we
don't support.  OK deraadt@@,
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.29 2004/04/15 19:52:18 jmc Exp $
d118 10
a127 4
.Bl -column MSG_WAITALL -offset indent
.It Dv MSG_OOB Ta process out-of-band data
.It Dv MSG_PEEK Ta peek at incoming message
.It Dv MSG_WAITALL Ta wait for full request or error
d149 8
d164 1
a164 1
.Ao Pa sys/socket.h Ac :
d227 5
a231 2
.Bl -column MSG_CTRUNC -offset indent
.It Dv MSG_EOR Ta
d235 1
a235 1
.It Dv MSG_TRUNC Ta
d239 1
a239 1
.It Dv MSG_CTRUNC Ta
d243 1
a243 3
.It Dv MSG_OOB Ta
Returned to indicate that expedited or out-of-band data was received.
.It Dv MSG_BCAST Ta
d245 1
a245 1
.It Dv MSG_MCAST Ta
d256 1
a256 1
.Bl -tag -width Er
d282 7
d306 1
a306 1
.Bl -tag -width Er
d333 1
@


1.29
log
@various improvements to lists and displays:

.Pp removal
-compact removal for displays
other list/display errors
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.28 2003/06/11 10:22:47 jmc Exp $
d198 3
a200 1
domain sockets, with
d316 2
a317 1
.Xr socket 2
@


1.28
log
@sync man page with sys/socket.h;

from a NetBSD bug report (MAEKAWA Masahide);
ok pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.27 2003/06/02 20:18:39 millert Exp $
a150 1
.Pp
@


1.27
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.26 2002/03/31 20:34:57 deraadt Exp $
d154 1
a154 1
	caddr_t		msg_name;	/* optional address */
d157 2
a158 2
	u_int		msg_iovlen;	/* # elements in msg_iov */
	caddr_t		msg_control;	/* ancillary data, see below */
@


1.26
log
@doc ECONNREFUSED; maurice@@amaze.nl
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.25 2002/01/02 15:57:16 mpech Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.25
log
@Remove extra reference to poll.2. Spotted by form@@.

millert@@ ok;
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.24 2000/10/18 05:12:11 aaron Exp $
d285 10
@


1.24
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.23 2000/04/15 02:15:24 aaron Exp $
a308 1
.Xr poll 2 ,
@


1.23
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.22 1999/09/26 14:16:31 espie Exp $
d58 2
a59 3
are used to receive messages from a socket,
and may be used to receive data on a socket whether or not
it is connection-oriented.
d86 2
a87 1
message bytes read.  If a message is too long to fit in the supplied
d214 2
a215 2
field is set on return according to the message received.  It will contain
zero or more of the following values:
d237 1
a237 2
These calls return the number of bytes received, or \-1
if an error occurred.
@


1.22
log
@`may return following error' => `may return the following error'
`may return following errors' => `may return one of the following errors'
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.21 1999/08/15 13:14:12 deraadt Exp $
d255 1
a255 1
.Xr accept 2 ).
@


1.21
log
@more poll
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.20 1999/07/02 20:58:01 aaron Exp $
d277 1
a277 1
may return following error:
d287 1
a287 1
may return following errors:
@


1.20
log
@remove redundant .Pp macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.19 1999/06/29 14:10:16 aaron Exp $
d113 3
a115 1
call may be used to determine when more data arrive.
d310 1
@


1.19
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.18 1999/06/05 04:47:42 aaron Exp $
a233 1
.Pp
@


1.18
log
@use .Tn instead of .Em for logical/bitwise OR + AND
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.17 1999/05/27 16:21:00 aaron Exp $
d64 1
a64 1
is non-nil, and the socket is not connection-oriented,
d73 1
a73 1
The 
d75 1
a75 1
call is normally used only on a 
d81 1
a81 1
with a nil
d97 1
a97 1
-1 is returned and the external variable
d117 1
a117 1
argument to a recv call is formed by 
d132 3
a134 1
The MSG_PEEK flag causes the receive operation to return data
d138 3
a140 1
The MSG_WAITALL flag requests that the operation block until
d148 1
a148 1
call uses a 
d236 1
a236 1
These calls return the number of bytes received, or -1
d279 1
a279 1
.Fa len   
d298 2
a299 2
member of    
.Fa msg   
@


1.17
log
@or'ing -> OR'ing
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.16 1999/05/23 14:10:55 aaron Exp $
d118 1
a118 1
.Em OR Ns ing
@


1.16
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.15 1999/05/16 19:55:34 alex Exp $
d118 1
a118 1
.Em or Ns ing
@


1.15
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.14 1999/02/27 21:56:42 deraadt Exp $
d39 1
a39 1
.Os BSD 4.3r
@


1.14
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.13 1999/02/15 21:22:25 millert Exp $
d301 2
a303 1
.Xr poll 2 ,
a304 1
.Xr getsockopt 2 ,
@


1.13
log
@socklen_t is used in struct msghdr and struct cmsghdr
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.12 1999/02/15 19:04:21 millert Exp $
d55 1
a55 1
.Fn Recvfrom
d66 1
a66 1
.Fa Fromlen
d169 1
a169 1
.Fa Msg_iov
d174 1
a174 1
.Fa Msg_control ,
d235 1
a235 1
.Fn Recv ,
@


1.12
log
@Use and document socklen_t
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.11 1999/02/05 00:40:23 deraadt Exp $
d152 7
a158 7
	caddr_t	msg_name;	/* optional address */
	u_int	msg_namelen;	/* size of address */
	struct	iovec *msg_iov;	/* scatter/gather array */
	u_int	msg_iovlen;	/* # elements in msg_iov */
	caddr_t	msg_control;	/* ancillary data, see below */
	u_int	msg_controllen; /* ancillary data buffer len */
	int	msg_flags;	/* flags on received message */
d182 4
a185 5
	u_int	cmsg_len;	/* data byte count, including hdr */
	int	cmsg_level;	/* originating protocol */
	int	cmsg_type;	/* protocol-specific type */
/* followed by
	u_char	cmsg_data[]; */
@


1.11
log
@support MSG_BCAST and MSG_MCAST
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.10 1998/08/17 17:35:14 deraadt Exp $
d37 1
a37 1
.Dd July 27, 1998
d51 1
a51 1
.Fn recvfrom "int s" "void *buf" "size_t len" "int flags" "struct sockaddr *from" "int *fromlen"
@


1.10
log
@Xr poll
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.9 1998/08/05 16:49:38 millert Exp $
d209 5
a213 3
field is set on return according to the message received.
.Dv MSG_EOR
indicates end-of-record;
d216 2
a217 2
.Dv MSG_TRUNC
indicates that
d220 2
a221 2
.Dv MSG_CTRUNC
indicates that some
d224 7
a230 2
.Dv MSG_OOB
is returned to indicate that expedited or out-of-band data were received.
@


1.9
log
@IOV_MAX, not UIO_MAXIOV
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.8 1998/07/28 19:47:14 millert Exp $
d296 1
@


1.8
log
@For read, write, send, sendto, recv, recvfrom return EINVAL is size arg > SSIZE_MAX.  For readv, writev, sendmsg, recvmsg return EINVAL if sum of the  over iov_len values overflows an ssize_t.  Based on what XPG 4.2 says (though XPG is not entirely consistent here).  Basically since the return value is ssize_t allowing size > SSIZE_MAX is bad since people who (incorrectly mind you) check the return value for < 0 instead of == -1 will have bad things happen to them.
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.7 1998/07/28 04:49:31 millert Exp $
d271 1
a271 1
.Ev SSIZE_MAX .
d276 1
a276 1
may return following error:
d285 7
@


1.7
log
@document EINVAL due to overflow
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.6 1998/07/06 18:28:18 deraadt Exp $
d262 13
a274 1
In addition, 
d283 2
a284 1
array overflowed an unsigned 32-bit integer.
@


1.6
log
@fix openbsd tag
@
text
@d1 1
a1 1
.\"	$OpenBSD: recv.2,v 1.6 1995/02/27 12:36:08 cgd Exp $
d37 1
a37 1
.Dd February 21, 1994
d229 5
a233 1
The calls fail if:
d260 12
@


1.5
log
@missing blank lines
@
text
@d1 1
@


1.4
log
@blank line
@
text
@d188 1
@


1.3
log
@Use Ns macro and not non-existant Ap macro
@
text
@d124 1
@


1.2
log
@destination address should have read source, return description was ambigous.
@
text
@d117 1
a117 1
.Em or Ap ing
@


1.1
log
@Initial revision
@
text
@d85 3
a87 4
All three routines return the length of the message on successful
completion.
If a message is too long to fit in the supplied buffer,
excess bytes may be discarded depending on the type of socket
d164 1
a164 1
specify the destination address if the socket is unconnected;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
