head	1.41;
access;
symbols
	OPENBSD_6_1:1.41.0.4
	OPENBSD_6_1_BASE:1.41
	OPENBSD_6_0:1.41.0.2
	OPENBSD_6_0_BASE:1.41
	OPENBSD_5_9:1.40.0.2
	OPENBSD_5_9_BASE:1.40
	OPENBSD_5_8:1.39.0.6
	OPENBSD_5_8_BASE:1.39
	OPENBSD_5_7:1.39.0.2
	OPENBSD_5_7_BASE:1.39
	OPENBSD_5_6:1.36.0.6
	OPENBSD_5_6_BASE:1.36
	OPENBSD_5_5:1.36.0.4
	OPENBSD_5_5_BASE:1.36
	OPENBSD_5_4:1.35.0.2
	OPENBSD_5_4_BASE:1.35
	OPENBSD_5_3:1.32.0.10
	OPENBSD_5_3_BASE:1.32
	OPENBSD_5_2:1.32.0.8
	OPENBSD_5_2_BASE:1.32
	OPENBSD_5_1_BASE:1.32
	OPENBSD_5_1:1.32.0.6
	OPENBSD_5_0:1.32.0.4
	OPENBSD_5_0_BASE:1.32
	OPENBSD_4_9:1.32.0.2
	OPENBSD_4_9_BASE:1.32
	OPENBSD_4_8:1.31.0.8
	OPENBSD_4_8_BASE:1.31
	OPENBSD_4_7:1.31.0.4
	OPENBSD_4_7_BASE:1.31
	OPENBSD_4_6:1.31.0.6
	OPENBSD_4_6_BASE:1.31
	OPENBSD_4_5:1.31.0.2
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.30.0.4
	OPENBSD_4_4_BASE:1.30
	OPENBSD_4_3:1.30.0.2
	OPENBSD_4_3_BASE:1.30
	OPENBSD_4_2:1.29.0.2
	OPENBSD_4_2_BASE:1.29
	OPENBSD_4_1:1.25.0.2
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.24.0.2
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.22.0.8
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.6
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.4
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.20.0.4
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.18.0.12
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.18.0.10
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.18.0.8
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.18.0.6
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.18.0.4
	OPENBSD_2_9_BASE:1.18
	OPENBSD_2_8:1.18.0.2
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.16.0.2
	OPENBSD_2_7_BASE:1.16
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.41
date	2016.03.19.22.10.49;	author guenther;	state Exp;
branches;
next	1.40;
commitid	XtVrZ6zBlSAffki3;

1.40
date	2015.10.20.18.11.53;	author deraadt;	state Exp;
branches;
next	1.39;
commitid	zYfGXYMInrUDRftW;

1.39
date	2015.02.28.21.51.57;	author bentley;	state Exp;
branches;
next	1.38;
commitid	NNu2UZnsd5zmNVYD;

1.38
date	2014.08.31.01.42.36;	author guenther;	state Exp;
branches;
next	1.37;
commitid	zF5A8BuuSSyqaDyM;

1.37
date	2014.08.10.07.19.08;	author guenther;	state Exp;
branches;
next	1.36;
commitid	OsfR6qNtFOzsbEeX;

1.36
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.35;

1.35
date	2013.07.17.05.42.11;	author schwarze;	state Exp;
branches;
next	1.34;

1.34
date	2013.04.08.19.49.55;	author guenther;	state Exp;
branches;
next	1.33;

1.33
date	2013.03.12.00.19.02;	author dlg;	state Exp;
branches;
next	1.32;

1.32
date	2011.02.24.17.20.08;	author mikeb;	state Exp;
branches;
next	1.31;

1.31
date	2008.11.26.22.40.21;	author mk;	state Exp;
branches;
next	1.30;

1.30
date	2007.09.07.15.52.17;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2007.06.11.00.27.13;	author uwe;	state Exp;
branches;
next	1.28;

1.28
date	2007.06.07.19.49.38;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2007.06.05.06.56.19;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.31.19.19.34;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2006.10.24.17.21.41;	author henning;	state Exp;
branches;
next	1.24;

1.24
date	2006.07.09.21.50.07;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2006.07.09.21.48.28;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2004.04.15.19.52.18;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.02.08.47.18;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.02.20.18.39;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2003.04.30.11.55.41;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2000.10.18.05.12.12;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2000.05.24.15.19.28;	author itojun;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.15.11.46.04;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.12.21.48.02;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2000.03.14.21.31.40;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.01.22.12.05.49;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2000.01.13.06.23.59;	author fgsch;	state Exp;
branches;
next	1.11;

1.11
date	99.06.29.14.10.23;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.06.25.04.10.08;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.05.23.14.10.56;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.16.19.55.39;	author alex;	state Exp;
branches;
next	1.7;

1.7
date	99.02.27.21.56.52;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.08.17.17.35.16;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.08.07.20.43.52;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.07.06.18.28.43;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.11.24.02.07.36;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.04.26.23.04.35;	author michaels;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.41
log
@Add STANDARDS and HISTORY blurbs for SOCK_{NONBLOCK,CLOEXEC,DNS}
@
text
@.\"	$OpenBSD: socket.2,v 1.40 2015/10/20 18:11:53 deraadt Exp $
.\"	$NetBSD: socket.2,v 1.5 1995/02/27 12:37:53 cgd Exp $
.\"
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)socket.2	8.1 (Berkeley) 6/4/93
.\"
.Dd $Mdocdate: October 20 2015 $
.Dt SOCKET 2
.Os
.Sh NAME
.Nm socket
.Nd create an endpoint for communication
.Sh SYNOPSIS
.In sys/socket.h
.Ft int
.Fn socket "int domain" "int type" "int protocol"
.Sh DESCRIPTION
.Fn socket
creates an endpoint for communication and returns a descriptor.
.Pp
The
.Fa domain
parameter specifies a communications domain within which
communication will take place; this selects the protocol family
which should be used.
These families are defined in the include file
.In sys/socket.h .
The currently understood formats are:
.Pp
.Bl -tag -width "AF_INET6XXX" -offset indent -compact
.It AF_UNIX
UNIX internal protocols
.It AF_INET
ARPA Internet protocols
.It AF_INET6
IPv6 (Internet Protocol version 6) protocols
.El
.Pp
The socket has the indicated
.Fa type ,
which specifies the semantics of communication.
Currently defined types are:
.Pp
.Bl -tag -width "SOCK_SEQPACKETXXX" -offset indent -compact
.It SOCK_STREAM
.It SOCK_DGRAM
.It SOCK_RAW
.It SOCK_SEQPACKET
.El
.Pp
A
.Dv SOCK_STREAM
type provides sequenced, reliable,
two-way connection based byte streams.
An out-of-band data transmission mechanism may be supported.
A
.Dv SOCK_DGRAM
socket supports
datagrams (connectionless, unreliable messages of
a fixed (typically small) maximum length).
A
.Dv SOCK_SEQPACKET
socket may provide a sequenced, reliable,
two-way connection-based data transmission path for datagrams
of fixed maximum length; a consumer may be required to read
an entire packet with each read system call.
This facility is protocol specific, and presently implemented only for
.Dv AF_UNIX .
.Dv SOCK_RAW
sockets provide access to internal network protocols and interfaces,
and are available only to the superuser.
.Pp
Any combination of the following flags may additionally be used in the
.Fa type
argument:
.Pp
.Bl -tag -width "SOCK_NONBLOCKX" -offset indent -compact
.It SOCK_CLOEXEC
Set close-on-exec flag on the new descriptor.
.It SOCK_NONBLOCK
Set non-blocking I/O mode on the new socket.
.It SOCK_DNS
For domains
.Dv AF_INET
or
.Dv AF_INET6 ,
only allow
.Xr connect 2 ,
.Xr sendto 2 ,
or
.Xr sendmsg 2
to the DNS port (typically 53).
.El
.Pp
The
.Fa protocol
specifies a particular protocol to be used with the socket.
Normally only a single protocol exists to support a particular
socket type within a given protocol family.
However, it is possible that many protocols may exist,
in which case a particular protocol must be specified in this manner.
The protocol number to use is particular to the
.Dq communication domain
in which communication is to take place; see
.Xr protocols 5 .
A value of 0 for
.Fa protocol
will let the system select an appropriate protocol for the requested
socket type.
.Pp
Sockets of type
.Dv SOCK_STREAM
are full-duplex byte streams.
A stream socket must be in a
.Em connected
state before any data may be sent or received on it.
A connection to another socket is created with a
.Xr connect 2
call.
Once connected, data may be transferred using
.Xr read 2
and
.Xr write 2
calls or some variant of the
.Xr send 2
and
.Xr recv 2
calls.
When a session has been completed a
.Xr close 2
may be performed.
Out-of-band data may also be transmitted as described in
.Xr send 2
and received as described in
.Xr recv 2 .
.Pp
The communications protocols used to implement a
.Dv SOCK_STREAM
ensure that data is not lost or duplicated.
If a piece of data for which the peer protocol has buffer space cannot
be successfully transmitted within a reasonable length of time, then the
connection is considered broken and calls will indicate an error with \-1
returns and with
.Er ETIMEDOUT
as the specific code in the global variable
.Va errno .
The protocols optionally keep sockets
.Dq warm
by forcing transmissions roughly every minute in the absence of other activity.
An error is then indicated if no response can be elicited on an otherwise
idle connection for an extended period (e.g., 5 minutes).
A
.Dv SIGPIPE
signal is raised if a process sends on a broken stream; this causes
naive processes, which do not handle the signal, to exit.
.Pp
.Dv SOCK_SEQPACKET
sockets employ the same system calls
as
.Dv SOCK_STREAM
sockets.
The only difference is that
.Xr read 2
calls will return only the amount of data requested,
and any remaining in the arriving packet will be discarded.
.Pp
.Dv SOCK_DGRAM
and
.Dv SOCK_RAW
sockets allow sending of datagrams to correspondents named in
.Xr send 2
calls.
Datagrams are generally received with
.Xr recvfrom 2 ,
which returns the next datagram with its return address.
.Pp
An
.Xr fcntl 2
call can be used to specify a process group to receive
a
.Dv SIGURG
signal when the out-of-band data arrives.
It may also enable non-blocking I/O and asynchronous notification
of I/O events via
.Dv SIGIO .
.Pp
The operation of sockets is controlled by socket level
.Em options .
These options are defined in the file
.In sys/socket.h .
.Xr setsockopt 2
and
.Xr getsockopt 2
are used to set and get options, respectively.
.Sh RETURN VALUES
A \-1 is returned if an error occurs, otherwise the return
value is a descriptor referencing the socket.
.Sh ERRORS
The
.Fn socket
call fails if:
.Bl -tag -width Er
.It Bq Er EAFNOSUPPORT
The specified address family is not supported on this machine.
.It Bq Er EPROTONOSUPPORT
The protocol type or the specified protocol is not supported
within this domain.
.It Bq Er EPROTOTYPE
The combination of the specified protocol and type is not supported.
.It Bq Er EMFILE
The per-process descriptor table is full.
.It Bq Er ENFILE
The system file table is full.
.It Bq Er ENOBUFS
Insufficient resources were available in the system
to perform the operation.
.It Bq Er EACCES
Permission to create a socket of the specified type and/or protocol
is denied.
.El
.Sh SEE ALSO
.Xr accept 2 ,
.Xr bind 2 ,
.Xr connect 2 ,
.Xr getsockname 2 ,
.Xr getsockopt 2 ,
.Xr ioctl 2 ,
.Xr listen 2 ,
.Xr poll 2 ,
.Xr read 2 ,
.Xr recv 2 ,
.Xr select 2 ,
.Xr send 2 ,
.Xr setsockopt 2 ,
.Xr shutdown 2 ,
.Xr socketpair 2 ,
.Xr write 2 ,
.Xr getprotoent 3 ,
.Xr inet 4 ,
.Xr inet6 4 ,
.Xr netintro 4 ,
.Xr unix 4
.Rs
.%T "An Introductory 4.3 BSD Interprocess Communication Tutorial"
.%O "reprinted in UNIX Programmer's Supplementary Documents Volume 1"
.Re
.Rs
.%T "BSD Interprocess Communication Tutorial"
.%O "reprinted in UNIX Programmer's Supplementary Documents Volume 1"
.Re
.Sh STANDARDS
The
.Fn socket
function conforms to
.St -p1003.1-2008 .
The
.Dv SOCK_CLOEXEC
and
.Dv SOCK_NONBLOCK
flags are expected to conform to a future revision of that standard.
.Pp
The
.Dv SOCK_DNS
flag is an
.Ox
extension.
.Sh HISTORY
The
.Fn socket
system call first appeared in
.Bx 4.1c .
Support for the
.Dv SOCK_CLOEXEC
and
.Dv SOCK_NONBLOCK
flags appeared in
.Ox 5.7 .
Support for the
.Dv SOCK_DNS
flag appeared in
.Ox 5.9 .
@


1.40
log
@Document SOCK_DNS flag
ok guenther tedu semarie
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.39 2015/02/28 21:51:57 bentley Exp $
d33 1
a33 1
.Dd $Mdocdate: February 28 2015 $
d282 11
d298 10
@


1.39
log
@Reduce usage of predefined strings in manpages.

Predefined strings are not very portable across troff implementations,
and they make the source much harder to read. Usually the intended
character can be written directly.

No output changes, except for two instances where the incorrect escape
was used in the first place.

tweaks + ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.38 2014/08/31 01:42:36 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: August 31 2014 $
d108 11
@


1.38
log
@Add additional kernel interfaces for setting close-on-exec on fds
when creating them: pipe2(), dup3(), accept4(), MSG_CMSG_CLOEXEC,
SOCK_CLOEXEC.  Includes SOCK_NONBLOCK support.

ok matthew@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.37 2014/08/10 07:19:08 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: August 10 2014 $
d117 2
a118 1
The protocol number to use is particular to the \*(lqcommunication domain\*(rq
@


1.37
log
@AF_IMPLINK and AF_BLUETOOTH are gone
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.36 2014/01/21 03:15:45 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 21 2014 $
d40 1
a40 1
.Fd #include <sys/socket.h>
d93 1
a93 1
This facility is protocol specific, and presently implemented for
d98 11
@


1.36
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.35 2013/07/17 05:42:11 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: July 17 2013 $
d56 1
a56 1
.Bl -tag -width "AF_IMPLINKXXX" -offset indent -compact
a62 4
.It AF_IMPLINK
IMP host at IMP link layer
.It AF_BLUETOOTH
Bluetooth protocols
a93 2
.Dv AF_BLUETOOTH
and
@


1.35
log
@more library history
facts checked by sobrado@@
style tweaks and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.34 2013/04/08 19:49:55 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: April 8 2013 $
d53 1
a53 1
.Ao Pa sys/socket.h Ac .
d199 1
a199 1
.Ao Pa sys/socket.h Ac .
@


1.34
log
@Updates to SYNOPSIS, ERRORS, and STANDARDS.
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.33 2013/03/12 00:19:02 dlg Exp $
d33 1
a33 1
.Dd $Mdocdate: March 12 2013 $
d268 2
a269 2
function call appeared in
.Bx 4.2 .
@


1.33
log
@SOCK_SEQPACKET is supported on AF_UNIX too.

ok jmc@@ matthew@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.32 2011/02/24 17:20:08 mikeb Exp $
d33 1
a33 1
.Dd $Mdocdate: February 24 2011 $
a39 1
.Fd #include <sys/types.h>
d212 2
d217 2
d223 3
a228 3
.It Bq Er ENOBUFS
Insufficient buffer space is available.
The socket cannot be created until sufficient resources are freed.
d260 5
@


1.32
log
@SOCK_SEQPACKET is only valid for the AF_BLUETOOTH now, and
SOCK_RDM is a dead SysV compatibility option that is not
described anywhere in the man page so don't reference it.

ok claudio
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.31 2008/11/26 22:40:21 mk Exp $
d33 1
a33 1
.Dd $Mdocdate: November 26 2008 $
d98 4
a101 3
This facility is protocol specific, and presently implemented
only for
.Dv AF_BLUETOOTH .
@


1.31
log
@Add unix(4) to SEE ALSO.

ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.30 2007/09/07 15:52:17 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: September 7 2007 $
a79 1
.It SOCK_RDM
d100 1
a100 1
.Dv PF_NS .
@


1.30
log
@IPv6 is not an ARPA protocol;
from Robert Elz, netbsd-bugs pr#36933
ok otto deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.29 2007/06/11 00:27:13 uwe Exp $
d33 1
a33 1
.Dd $Mdocdate: June 7 2007 $
d247 2
a248 1
.Xr netintro 4
@


1.29
log
@Document the Bluetooth network protocols and mention that there is AF_BLUETOOTH
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.28 2007/06/07 19:49:38 jmc Exp $
d63 1
a63 1
ARPA IPv6 protocols
@


1.28
log
@convert some displays to lists, since the format is more suitable;
plus a little cleanup;
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.27 2007/06/05 06:56:19 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d66 2
@


1.27
log
@one more IPX removal; ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.26 2007/05/31 19:19:34 jmc Exp $
d55 12
a66 7
The currently understood formats are
.Bd -literal -offset indent
AF_UNIX		(UNIX internal protocols),
AF_INET		(ARPA Internet protocols),
AF_INET6	(ARPA IPv6 protocols), and
AF_IMPLINK	(IMP \*(lqhost at IMP\*(rq link layer).
.Ed
d72 8
a79 7
.Bd -literal -offset indent
SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
.Ed
@


1.26
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.25 2006/10/24 17:21:41 henning Exp $
d59 1
a59 2
AF_INET6	(ARPA IPv6 protocols),
AF_IPX		(Internetwork Packet Exchange), and
@


1.25
log
@evil AF_ISO and AF_NS references were hiding here, but we'll hunt 'em all down!
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.24 2006/07/09 21:50:07 jmc Exp $
d33 1
a33 1
.Dd June 4, 1993
@


1.24
log
@grammar tweak, on re-read;
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.23 2006/07/09 21:48:28 jmc Exp $
a59 2
AF_ISO		(ISO protocols),
AF_NS		(Xerox Network Systems protocols),
@


1.23
log
@- clean up the SOCK_RAW text
- remove the SOCK_RDM text; suggested by krw
- Xr inet(4) and inet6(4)
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.22 2004/04/15 19:52:18 jmc Exp $
d99 1
a99 1
and is available only to the superuser.
@


1.22
log
@various improvements to lists and displays:

.Pp removal
-compact removal for displays
other list/display errors
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.21 2004/04/02 08:47:18 jmc Exp $
d98 2
a99 7
sockets provide access to internal network protocols and interfaces.
The types
.Dv SOCK_RAW ,
which is available only to the superuser, and
.Dv SOCK_RDM ,
which is planned,
but not yet implemented, are not described here.
d240 2
@


1.21
log
@do not compare SOCK_STREAM sockets to pipes;

from NetBSD (-r1.29);
ok markus@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.20 2003/06/02 20:18:39 millert Exp $
d56 1
a56 2
.Pp
.Bd -literal -offset indent -compact
d70 1
a70 2
.Pp
.Bd -literal -offset indent -compact
@


1.20
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.19 2003/04/30 11:55:41 jmc Exp $
d125 1
a125 1
are full-duplex byte streams, similar to pipes.
@


1.19
log
@a extended -> an extended;
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.18 2000/10/18 05:12:12 aaron Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.18
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.17 2000/05/24 15:19:28 itojun Exp $
d167 1
a167 1
idle connection for a extended period (e.g., 5 minutes).
@


1.17
log
@add AF_INET6.
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.16 2000/04/15 11:46:04 aaron Exp $
d73 2
a74 2
which specifies the semantics of communication.  Currently
defined types are:
d116 5
a120 5
socket type within a given protocol family.  However, it is possible
that many protocols may exist, in which case a particular protocol
must be specified in this manner.  The protocol number to use is
particular to the \*(lqcommunication domain\*(rq in which communication
is to take place; see
d129 2
a130 2
are full-duplex byte streams, similar
to pipes.  A stream socket must be in a
d132 2
a133 2
state before any data may be sent or received
on it.  A connection to another socket is created with a
d135 2
a136 1
call.  Once connected, data may be transferred using
d144 2
a145 1
calls.  When a session has been completed a
d155 5
a159 7
insure that data
is not lost or duplicated.  If a piece of data for which the
peer protocol has buffer space cannot be successfully transmitted
within a reasonable length of time, then
the connection is considered broken and calls
will indicate an error with
\-1 returns and with
d165 2
a166 4
by forcing transmissions
roughly every minute in the absence of other activity.
An error is then indicated if no response can be
elicited on an otherwise
d170 2
a171 3
signal is raised if a process sends
on a broken stream; this causes naive processes,
which do not handle the signal, to exit.
d177 2
a178 2
sockets.  The only difference
is that
d186 1
a186 2
sockets allow sending of datagrams to correspondents
named in
d188 2
a189 1
calls.  Datagrams are generally received with
d199 2
a200 3
It may also enable non-blocking I/O
and asynchronous notification of I/O events
via
@


1.16
log
@- For consistency, `super-user' -> `superuser' in all cases.
- Some punctuation fixes.
- Some `id' -> `ID'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.15 2000/04/12 21:48:02 aaron Exp $
d64 1
@


1.15
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.14 2000/03/14 21:31:40 aaron Exp $
d106 1
a106 1
which is available only to the super-user, and
@


1.14
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.13 2000/01/22 12:05:49 aaron Exp $
d65 1
a65 1
AF_NS		(Xerox Network Systems protocols), 
@


1.13
log
@Use .Er macro when referring to errno error names.
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.12 2000/01/13 06:23:59 fgsch Exp $
d168 1
a168 1
idle connection for a extended period (e.g. 5 minutes).
@


1.12
log
@Add AF_IPX.
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.11 1999/06/29 14:10:23 aaron Exp $
d159 2
a160 3
.Dv ETIMEDOUT
as the specific code
in the global variable
@


1.11
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.10 1999/06/25 04:10:08 aaron Exp $
d65 2
a66 1
AF_NS		(Xerox Network Systems protocols), and
@


1.10
log
@add missing reference to setsockopt(2) in "SEE ALSO" section; tron@@netbsd.org
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.9 1999/05/23 14:10:56 aaron Exp $
d137 1
a137 1
calls or some variant of the 
d157 1
a157 1
-1 returns and with
d180 1
a180 1
is that 
d195 1
a195 1
An 
d215 1
a215 1
A -1 is returned if an error occurs, otherwise the return
@


1.9
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.8 1999/05/16 19:55:39 alex Exp $
d249 1
@


1.8
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.7 1999/02/27 21:56:52 deraadt Exp $
d39 1
a39 1
.Os BSD 4.2
@


1.7
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.6 1998/08/17 17:35:16 deraadt Exp $
a239 1
.Xr getprotoent 3 ,
d244 1
a246 1
.Xr poll 2 ,
d252 1
@


1.6
log
@Xr poll
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.5 1998/08/07 20:43:52 deraadt Exp $
d49 1
a49 1
.Fn Socket
d210 1
a210 1
.Xr Setsockopt 2
@


1.5
log
@Xr netintro
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.4 1998/07/06 18:28:43 deraadt Exp $
d247 1
@


1.4
log
@fix openbsd tag
@
text
@d1 1
a1 1
.\"	$OpenBSD: socket.2,v 1.5 1995/02/27 12:37:53 cgd Exp $
d251 2
a252 1
.Xr write 2
@


1.3
log
@fix mispelling of EACCES; bde
@
text
@d1 1
@


1.2
log
@document the meaning of protocol = 0.
@
text
@d228 1
a228 1
.It Bq Er EACCESS
@


1.1
log
@Initial revision
@
text
@d119 4
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
