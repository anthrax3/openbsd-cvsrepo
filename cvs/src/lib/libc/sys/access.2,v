head	1.25;
access;
symbols
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.8
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.4
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.6
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.23.0.6
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.22.0.2
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.19.0.6
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.4
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.2
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.15.0.12
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.10
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.6
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.8
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.10
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.8
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.6
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.25
date	2015.01.19.15.54.11;	author millert;	state Exp;
branches;
next	1.24;
commitid	nJ2wjGsUe8RwMTRS;

1.24
date	2014.12.14.07.42.50;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	4RSteAc4BFbAOGs6;

1.23
date	2014.02.13.07.30.39;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2013.04.01.20.16.31;	author guenther;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.31.05.07.55;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.30.06.44.44;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2012.01.15.21.03.05;	author schwarze;	state Exp;
branches;
next	1.18;

1.18
date	2011.07.19.20.58.05;	author matthew;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.19.20.51.38;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	2011.07.18.23.04.40;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.10.16.37.57;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.10.03.19.12;	author otto;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.09.23.38.37;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.31.19.19.32;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.10.01.06.13;	author jaredy;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.20.18.38;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.21.09.14.36;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.18.05.12.08;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.29.14.09.49;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.06.05.04.47.41;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.05.23.14.10.50;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.02.27.21.56.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.07.06.18.27.02;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.02.20.01.33;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.24;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Explicitly mention that PATH_MAX includes the NUL in the ENAMETOOLONG
description.
@
text
@.\"	$OpenBSD: access.2,v 1.24 2014/12/14 07:42:50 schwarze Exp $
.\"	$NetBSD: access.2,v 1.7 1995/02/27 12:31:44 cgd Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)access.2	8.2 (Berkeley) 4/1/94
.\"
.Dd $Mdocdate: December 14 2014 $
.Dt ACCESS 2
.Os
.Sh NAME
.Nm access ,
.Nm faccessat
.Nd check access permissions of a file or pathname
.Sh SYNOPSIS
.In unistd.h
.Ft int
.Fn access "const char *path" "int amode"
.In fcntl.h
.In unistd.h
.Ft int
.Fn faccessat "int fd" "const char *path" "int amode" "int flag"
.Sh DESCRIPTION
The
.Fn access
function checks the accessibility of the file named by
.Fa path
for the access permissions indicated by
.Fa amode .
The
.Fa amode
argument is either the bitwise OR of one or more of the access permissions
to be checked
.Pf ( Dv R_OK
for read permission,
.Dv W_OK
for write permission, and
.Dv X_OK
for execute/search permission) or the existence test,
.Dv F_OK .
All components of the pathname
.Fa path
are checked for access permissions (including
.Dv F_OK ) .
.Pp
The real user ID is used in place of the effective user ID
and the real group access list
(including the real group ID) is
used in place of the effective ID for verifying permission.
.Pp
If the invoking process has superuser privileges,
.Fn access
will always indicate success for
.Dv R_OK
and
.Dv W_OK ,
regardless of the actual file permission bits.
Likewise, for
.Dv X_OK ,
if the file has any of the execute bits set and
.Fa path
is not a directory,
.Fn access
will indicate success.
.Pp
The
.Fn faccessat
function is equivalent to
.Fn access
except that where
.Fa path
specifies a relative path,
the file whose accessibility is checked is determined relative to
the directory associated with file descriptor
.Fa fd
instead of the current working directory.
.Pp
If
.Fn faccessat
is passed the special value
.Dv AT_FDCWD
(defined in
.In fcntl.h )
in the
.Fa fd
parameter, the current working directory is used.
If
.Fa flag
is also zero, the behavior is identical to a call to
.Fn access .
.Pp
The
.Fa flag
argument is the bitwise OR of zero or more of the following values:
.Pp
.Bl -tag -width AT_EACCESS -offset indent -compact
.It Dv AT_EACCESS
The checks for accessibility are performed using the effective user
and group IDs instead of the real user and group IDs.
.El
.Sh RETURN VALUES
If
.Fa path
cannot be found or if any of the desired access modes would not be granted,
then a \-1 value is returned; otherwise a 0 value is returned.
.Sh ERRORS
Access to the file is denied if:
.Bl -tag -width Er
.It Bq Er ENOTDIR
A component of the path prefix is not a directory.
.It Bq Er ENAMETOOLONG
A component of a pathname exceeded
.Dv NAME_MAX
characters, or an entire pathname (including the terminating NUL)
exceeded
.Dv PATH_MAX
bytes.
.It Bq Er ENOENT
The named file does not exist.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating the pathname.
.It Bq Er EROFS
Write access is requested for a file on a read-only file system.
.It Bq Er ETXTBSY
Write access is requested for a pure procedure (shared text)
file presently being executed.
.It Bq Er EACCES
Permission bits of the file mode do not permit the requested access,
or search permission is denied on a component of the path prefix.
The owner of a file has permission checked with respect to the
.Dq owner
read, write, and execute mode bits, members of the file's group other
than the owner have permission checked with respect to the
.Dq group
mode bits, and all others have permissions checked with respect to the
.Dq other
mode bits.
.It Bq Er EPERM
Write access has been requested and the named file has its immutable
flag set (see
.Xr chflags 2 ) .
.It Bq Er EFAULT
.Fa path
points outside the process's allocated address space.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.It Bq Er EINVAL
An invalid value was specified for
.Fa amode .
.El
.Pp
Additionally,
.Fn faccessat
will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The value of the
.Fa flag
argument was neither zero nor
.Dv AT_EACCESS .
.It Bq Er EBADF
The
.Fa path
argument specifies a relative path and the
.Fa fd
argument is neither
.Dv AT_FDCWD
nor a valid file descriptor.
.It Bq Er ENOTDIR
The
.Fa path
argument specifies a relative path and the
.Fa fd
argument is a valid file descriptor but it does not reference a directory.
.It Bq Er EACCES
The
.Fa path
argument specifies a relative path but search permission is denied
for the directory which the
.Fa fd
file descriptor references.
.El
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr stat 2
.Sh STANDARDS
The
.Fn access
and
.Fn faccessat
functions conform to
.St -p1003.1-2008 .
.Sh HISTORY
.Fn access
first appeared as an internal kernel function in
.At v1
and was reimplemented in C before the release of
.At v4 .
It was first promoted to a system call in the Programmer's Workbench
(PWB/UNIX), which was later ported to
.At v7
and
.Bx 2 .
.Pp
The
.Fn faccessat
function appeared in
.Ox 5.0 .
.Sh AUTHORS
.An Ken Thompson
first implemented the
.Fn access
kernel function in C.
.Sh CAVEATS
.Fn access
and
.Fn faccessat
should never be used for actual access control.
Doing so can result in a time of check vs. time of use security hole.
@


1.24
log
@macro cleanup; from Kaspars at Bankovskis dot net
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.23 2014/02/13 07:30:39 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: February 13 2014 $
d138 5
a142 4
.Dv {NAME_MAX}
characters, or an entire path name exceeded
.Dv {PATH_MAX}
characters.
@


1.23
log
@Don't use use .Tn with AND/OR/NOT
Phrase any "The _flags_ argument is the ..." line consistently,
eliminating unnecessary use of 'inclusive' and saying "zero or more"
or "one or more" as appropriate

ok millert@@ jmc@@ schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.22 2013/04/01 20:16:31 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: April 1 2013 $
d41 1
a41 1
.Fd #include <unistd.h>
d44 2
a45 2
.Fd #include <fcntl.h>
.Fd #include <unistd.h>
d173 1
a173 1
.Ar amode .
@


1.22
log
@When there are multiple groups of functions with their own #includes
listed, the #includes in each group are independent, so that users
don't need to guess at possible carry-over.

general idea ok otto@@ millert@@
actual diff ok jmc@@ schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.21 2013/03/31 05:07:55 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: March 31 2013 $
d55 1
a55 1
The value of
d57 2
a58 3
is the bitwise inclusive
.Tn OR
of the access permissions to be checked
d117 1
a117 1
Values for
d119 1
a119 4
are constructed by bitwise-inclusive
.Tn OR Ns ing
flags from the following list defined in
.In fcntl.h :
@


1.21
log
@Use consistent wording for the EINVAL, EBADF, ENOTDIR, and EACCES cases
of the various *at() functions.
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.20 2013/03/30 06:44:44 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: March 30 2013 $
d45 1
@


1.20
log
@Various updates, mostly to SYNOPSIS, ERRORS, and STANDARDS, but
some other fixes included...

*at() function ERRORS description suggested by matthew@@

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.19 2012/01/15 21:03:05 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 15 2012 $
d183 5
@


1.19
log
@Document early history of a few functions specifically mentioned in 2BSD
manuals; however, it turned out all of these actually predate 2BSD.
All information from http://minnie.tuhs.org/cgi-bin/utree.pl.
ok jmc@@ sobrado@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.18 2011/07/19 20:58:05 matthew Exp $
d33 1
a33 1
.Dd $Mdocdate: July 19 2011 $
a40 1
.Fd #include <fcntl.h>
d44 1
d186 1
a186 1
argument does not specify an absolute path and the
d190 14
a203 1
nor a valid file descriptor open for reading.
@


1.18
log
@Change "constructed by bitwise-inclusive OR'ing of flags from ..." to
"constructed by bitwise-inclusive ORing flags from ..."

Requested by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.17 2011/07/19 20:51:38 matthew Exp $
d203 11
d218 5
@


1.17
log
@Change "If also flag is zero" to "If flag is also zero".

Requested by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.16 2011/07/18 23:04:40 matthew Exp $
d33 1
a33 1
.Dd $Mdocdate: July 18 2011 $
d120 2
a121 2
.Tn OR Ns 'ing
of flags from the following list defined in
@


1.16
log
@Add (rough draft) documentation for fdopendir(3) and the 15 new
XXXat(2) system calls from POSIX 2008.  Editing will be done in tree.

General style discussed with jmc@@, schwarze@@, and deraadt@@
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.15 2008/06/10 16:37:57 otto Exp $
d33 1
a33 1
.Dd $Mdocdate: June 10 2008 $
d112 1
a112 1
If also
d114 1
a114 1
is zero, the behavior is identical to a call to
@


1.15
log
@document access(2) can return EPERM; noted by Tim van der Molen; ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.14 2008/06/10 03:19:12 otto Exp $
d37 2
a38 1
.Nm access
d41 1
d44 3
a46 1
.Fn access "const char *path" "int mode"
d53 1
a53 1
.Fa mode .
d55 1
a55 1
.Fa mode
d90 39
d176 15
a190 1
.Ar mode .
d198 9
a206 2
function conforms to
.St -p1003.1-90 .
d209 2
@


1.14
log
@add missing arg to .Fn
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.13 2008/06/09 23:38:37 millert Exp $
d33 1
a33 1
.Dd $Mdocdate: June 9 2008 $
d122 4
@


1.13
log
@Update access(2) to have modern semantics with respect to X_OK and
the superuser.  access(2) will now only indicate success for X_OK on
non-directories if there is at least one execute bit set on the file.
OK deraadt@@ thib@@ otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.12 2007/05/31 19:19:32 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d84 1
a84 1
.Fn
@


1.12
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.11 2005/08/10 01:06:13 jaredy Exp $
d72 3
a74 4
Even if a process has appropriate privileges and indicates success for
.Dv X_OK ,
the file may not actually have execute permission bits set.
Likewise for
d77 9
a85 1
.Dv W_OK .
d141 2
a142 1
is a potential security hole and should never be used.
@


1.11
log
@- punctuation fixes
- refer to formal parameters consistently.

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.10 2003/06/02 20:18:38 millert Exp $
d33 1
a33 1
.Dd April 1, 1994
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.9 2003/02/21 09:14:36 jmc Exp $
d58 1
a58 1
for write permission and
@


1.9
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.8 2000/10/18 05:12:08 aaron Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@Another round of man page cleanup, this time to remove more hard sentence
breaks and getting rid of short lines, making these files easier to work with.
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.7 1999/06/29 14:09:49 aaron Exp $
d73 1
a73 1
(including the real group ID) are
@


1.7
log
@- change references to nil to null; tschroed@@acm.org
- remove trailing spaces from end of lines
- add some .Dv
- change -1 to \-1, so `-' is taken as a negative sign
- other misc formatting fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.6 1999/06/05 04:47:41 aaron Exp $
d50 1
a50 2
function checks the accessibility of the
file named by
d86 2
a87 3
cannot be found or if any of the desired access modes would
not be granted, then a \-1 value is returned; otherwise
a 0 value is returned.
d109 9
a117 7
Permission bits of the file mode do not permit the requested
access, or search permission is denied on a component of the
path prefix.  The owner of a file has permission checked with
respect to the ``owner'' read, write, and execute mode bits,
members of the file's group other than the owner have permission
checked with respect to the ``group'' mode bits, and all
others have permissions checked with respect to the ``other''
d136 1
a136 1
.Sh CAVEAT
d138 1
a138 2
is a potential security hole and
should never be used.
@


1.6
log
@use .Tn instead of .Em for logical/bitwise OR + AND
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.5 1999/05/23 14:10:50 aaron Exp $
d88 1
a88 1
not be granted, then a -1 value is returned; otherwise
d96 1
a96 1
A component of a pathname exceeded 
d98 1
a98 1
characters, or an entire path name exceeded 
d134 1
a134 1
function conforms to 
@


1.5
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.4 1999/02/27 21:56:05 deraadt Exp $
d57 3
a59 2
is the bitwise inclusive OR of the access permissions to be
checked
@


1.4
log
@make function names the correct case
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.3 1998/07/06 18:27:02 deraadt Exp $
d39 1
a39 1
.Os BSD 4
@


1.3
log
@fix openbsd tag
@
text
@d1 1
a1 1
.\"	$OpenBSD: access.2,v 1.7 1995/02/27 12:31:44 cgd Exp $
d119 1
a119 1
.Fa Path
d136 1
a136 1
.Fn Access
@


1.2
log
@Document EINVAL errno value
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d122 3
d133 1
a133 1
.St -p1003.1-88 .
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
