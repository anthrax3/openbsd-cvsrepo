head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.2;
commitid	d9R7VGw9CHTkwXE1;

1.2
date	2015.10.25.18.03.17;	author guenther;	state Exp;
branches;
next	1.1;
commitid	fJGaTiQAM4lxdg3P;

1.1
date	2015.04.07.01.27.07;	author guenther;	state Exp;
branches;
next	;
commitid	oQvh7XA3Kql35r0J;


desc
@@


1.3
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@/*	$OpenBSD: w_fork.c,v 1.2 2015/10/25 18:03:17 guenther Exp $ */

/*
 * Copyright (c) 2008 Kurt Miller <kurt@@openbsd.org>
 * Copyright (c) 2008 Philip Guenther <guenther@@openbsd.org>
 * Copyright (c) 2003 Daniel Eischen <deischen@@freebsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: /repoman/r/ncvs/src/lib/libc_r/uthread/uthread_atfork.c,v 1.1 2004/12/10 03:36:45 grog Exp $
 */

#include <tib.h>
#include <unistd.h>
#include "thread_private.h"
#include "atfork.h"

pid_t
WRAP(fork)(void)
{
	struct atfork_fn *p;
	pid_t newid;

	/*
	 * In the common case the list is empty; remain async-signal-safe
	 * then by skipping the locking and just forking
	 */
	if (TAILQ_FIRST(&_atfork_list) == NULL) {
		if (_thread_cb.tc_fork != NULL)
			return _thread_cb.tc_fork();
		newid = fork();
		if (newid == 0)
			TIB_GET()->tib_tid = getthrid();
		return newid;
	}

	_ATFORK_LOCK();
	TAILQ_FOREACH_REVERSE(p, &_atfork_list, atfork_listhead, fn_next)
		if (p->fn_prepare)
			p->fn_prepare();

	if (_thread_cb.tc_fork != NULL)
		newid = _thread_cb.tc_fork();
	else {
		newid = fork();
		if (newid == 0)
			TIB_GET()->tib_tid = getthrid();
	}

	if (newid == 0) {
		TAILQ_FOREACH(p, &_atfork_list, fn_next)
			if (p->fn_child)
				p->fn_child();
	} else {
		TAILQ_FOREACH(p, &_atfork_list, fn_next)
			if (p->fn_parent)
				p->fn_parent();
	}
	_ATFORK_UNLOCK();

	return (newid);
}
DEF_WRAP(fork);
@


1.2
log
@Move the _atfork_list definition to atexit.c so that the fork syscall stub
doesn't get pulled into all static executables

ok millert@@ jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: w_fork.c,v 1.1 2015/04/07 01:27:07 guenther Exp $ */
d33 1
a37 2
pid_t	_thread_fork(void);

d39 1
a39 1
fork(void)
d48 8
a55 2
	if (TAILQ_FIRST(&_atfork_list) == NULL)
		return (_thread_fork());
d62 7
a68 1
	newid = _thread_fork();
d83 1
@


1.1
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_fork.c,v 1.10 2013/11/29 16:27:40 guenther Exp $ */
a35 3

/* define and initialize the list */
struct atfork_listhead _atfork_list = TAILQ_HEAD_INITIALIZER(_atfork_list);
@

