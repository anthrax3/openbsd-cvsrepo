head	1.29;
access;
symbols
	OPENBSD_6_1:1.29.0.6
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.2
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.18.0.6
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.17.0.4
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.2
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@# @;


1.29
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.28;
commitid	d9R7VGw9CHTkwXE1;

1.28
date	2016.03.09.16.28.46;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	OSDG2O3Cgeifnf1W;

1.27
date	2015.11.25.05.01.44;	author guenther;	state Exp;
branches;
next	1.26;
commitid	IqDuPqfsgoR0tC8Y;

1.26
date	2015.10.25.10.22.09;	author bluhm;	state Exp;
branches;
next	1.25;
commitid	7mBkOAMje05PhuEO;

1.25
date	2015.09.10.18.13.46;	author guenther;	state Exp;
branches;
next	1.24;
commitid	qU49tm8AgtP7HwZE;

1.24
date	2015.08.31.19.43.39;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	wStl3ObcU5undKO1;

1.23
date	2015.08.31.02.53.56;	author guenther;	state Exp;
branches;
next	1.22;
commitid	lTMF8Y3C9fQGd6jQ;

1.22
date	2014.08.31.09.36.39;	author miod;	state Exp;
branches;
next	1.21;
commitid	YFYjcCv9iW12xVv5;

1.21
date	2014.07.10.12.55.14;	author tedu;	state Exp;
branches;
next	1.20;
commitid	LbMLZkOvwoOPUVd1;

1.20
date	2014.06.09.20.47.10;	author miod;	state Exp;
branches;
next	1.19;
commitid	iQ7uGgiNX7UaiPtF;

1.19
date	2014.05.12.19.25.16;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.28.16.43.08;	author eric;	state Exp;
branches;
next	1.17;

1.17
date	2012.04.26.01.22.31;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	2010.09.24.13.33.00;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	2010.07.27.16.59.03;	author stsp;	state Exp;
branches;
next	1.14;

1.14
date	2010.02.03.20.49.00;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.27.23.59.59;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.07.20.36.07;	author martynas;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.17.20.37.31;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.07.02.26.41;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.28.16.56.49;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.24.01.15.41;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.20.19.41.53;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.22.21.06.00;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.20.01.09.38;	author pvalchev;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.02.13.27.05;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.03.18.41.13;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.06.08.47.07;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.11.20.11.18.28;	author d;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@#	$OpenBSD: Makefile.inc,v 1.28 2016/03/09 16:28:46 deraadt Exp $
#
# This file contains make rules used to build libc
#

.ifndef LIBCSRCDIR
all:
	@@echo "need to define LIBCSRCDIR" >&2; exit 1
.endif

CFLAGS+=-I${LIBCSRCDIR}/include -I${LIBCSRCDIR}/hidden -D__LIBC__ \
	-Werror-implicit-function-declaration -include namespace.h

.if ${COMPILER_VERSION:L} != "gcc3"
CFLAGS+=-Werror=deprecated-declarations
.endif

# Include link-time warnings about unsafe API uses (ie. strcpy)
CFLAGS+=-DAPIWARN

.if (${YP:L} == "yes")
CFLAGS+=-DYP -I${LIBCSRCDIR}/yp
.endif

LLIBS=
AINC=   -I${LIBCSRCDIR}/arch/${MACHINE_CPU}
.if defined(DESTDIR)
AINC+=  -nostdinc -idirafter ${DESTDIR}/usr/include
.endif

.if exists (${LIBCSRCDIR}/arch/${MACHINE_CPU}/Makefile.inc)
.PATH:	${LIBCSRCDIR}/arch/${MACHINE_CPU}
.include "${LIBCSRCDIR}/arch/${MACHINE_CPU}/Makefile.inc"
.endif

.include "${LIBCSRCDIR}/db/Makefile.inc"
.include "${LIBCSRCDIR}/dlfcn/Makefile.inc"
.include "${LIBCSRCDIR}/citrus/Makefile.inc"
.include "${LIBCSRCDIR}/compat-43/Makefile.inc"
.include "${LIBCSRCDIR}/gen/Makefile.inc"
.include "${LIBCSRCDIR}/crypt/Makefile.inc"
.include "${LIBCSRCDIR}/gdtoa/Makefile.inc"
.include "${LIBCSRCDIR}/gmon/Makefile.inc"
.include "${LIBCSRCDIR}/hash/Makefile.inc"
.include "${LIBCSRCDIR}/locale/Makefile.inc"
.include "${LIBCSRCDIR}/asr/Makefile.inc"
.include "${LIBCSRCDIR}/net/Makefile.inc"
.include "${LIBCSRCDIR}/nls/Makefile.inc"

# 32-bit systems need these
.if (${MACHINE_CPU} == "i386") || (${MACHINE_CPU} == "powerpc") || \
    (${MACHINE_CPU} == "hppa") || (${MACHINE_CPU} == "arm") || \
    (${MACHINE_CPU} == "sparc") || (${MACHINE_CPU} == "sh") || \
    (${MACHINE_CPU} == "m88k")
.include "${LIBCSRCDIR}/quad/Makefile.inc"
.endif

.include "${LIBCSRCDIR}/regex/Makefile.inc"
.include "${LIBCSRCDIR}/rpc/Makefile.inc"
.include "${LIBCSRCDIR}/stdio/Makefile.inc"
.include "${LIBCSRCDIR}/stdlib/Makefile.inc"
.include "${LIBCSRCDIR}/string/Makefile.inc"
.include "${LIBCSRCDIR}/termios/Makefile.inc"
.include "${LIBCSRCDIR}/thread/Makefile.inc"
.include "${LIBCSRCDIR}/time/Makefile.inc"
.include "${LIBCSRCDIR}/uuid/Makefile.inc"
.include "${LIBCSRCDIR}/sys/Makefile.inc"
.if (${YP:L} == "yes")
.include "${LIBCSRCDIR}/yp/Makefile.inc"
.endif

${OBJS} ${GOBJS} ${POBJS} ${SOBJS} ${DOBJS}: ${LIBCSRCDIR}/include/namespace.h
@


1.28
log
@We are done providing support for the vax.
lots of agreement.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.27 2015/11/25 05:01:44 guenther Exp $
d11 1
a11 1
CFLAGS+=-I${LIBCSRCDIR}/include -I${LIBCSRCDIR}/hidden \
@


1.27
log
@Make using a deprecated function an error instead of just a warning

ok millert@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.26 2015/10/25 10:22:09 bluhm Exp $
d53 2
a54 2
    (${MACHINE_CPU} == "sparc") || (${MACHINE_CPU} == "vax") || \
    (${MACHINE_CPU} == "sh") || (${MACHINE_CPU} == "m88k")
@


1.26
log
@The only thing that was translated into multiple languages in OpenBSD
are the errno messages and signal names.  Everything else is in
English.  We are not planning to translate more text.  Running a
mixed system with less than 1% of the text in native language makes
no sense.  So remove the NLS support from libc messages.  The
catopen(3) functions stay as they are.
OK stsp@@ mpi@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.25 2015/09/10 18:13:46 guenther Exp $
d13 4
@


1.25
log
@Pull in namespace.h when building all .c files using gcc's -include option,
so that we can provide asm labels for the memcpy/memset/__stack_smash_handler
calls that it generates ab initio.  Eliminate direct #includes of it.  Make
sure it's a dependency of all objects (unnecessary for asm, but close enough).

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.24 2015/08/31 19:43:39 deraadt Exp $
a68 2

CFLAGS+=-DNLS
@


1.24
log
@only 32-bit systems need the quad functions.
skipping a libc crank since unused in base on 64bit systems
discussed with miod, tedu; ok kettenis
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.23 2015/08/31 02:53:56 guenther Exp $
d12 1
a12 1
	-Werror-implicit-function-declaration
d67 2
@


1.23
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.22 2014/08/31 09:36:39 miod Exp $
d45 6
a50 1
.if (${MACHINE_CPU} != "alpha")
d53 1
@


1.22
log
@Add uuid support routines to libc. From FreeBSD via NetBSD via Bitrig via
Markus Mueller.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.21 2014/07/10 12:55:14 tedu Exp $
d11 2
a12 1
CFLAGS+=	-I${LIBCSRCDIR}/include -Werror-implicit-function-declaration
@


1.21
log
@sprinkle in -Werror-implicit-function-declaration to disable one of the
worst C misfeatures. ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.20 2014/06/09 20:47:10 miod Exp $
d55 1
@


1.20
log
@Nuke the machinery to sync libkern with libc, it's not been used in the
last 15 years and there is no point to use it in the future.

From Jean-Philippe Ouellet
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.19 2014/05/12 19:25:16 espie Exp $
d11 1
a11 1
CFLAGS+=	-I${LIBCSRCDIR}/include
@


1.19
log
@...better if I actually unplug it, Makefile doesn't do it
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.18 2013/03/28 16:43:08 eric Exp $
a60 12

LIBKERN=	${LIBCSRCDIR}/../../sys/lib/libkern

KSRCS=	bcmp.c bzero.c ffs.c strcat.c strcmp.c strcpy.c strlen.c  strncmp.c \
	strncpy.c strnlen.c htonl.c htons.c ntohl.c ntohs.c timingsafe_bcmp.c
.if (${MACHINE_CPU} != "alpha")
KSRCS+=	adddi3.c anddi3.c ashldi3.c ashrdi3.c cmpdi2.c divdi3.c iordi3.c \
	lshldi3.c lshrdi3.c moddi3.c muldi3.c negdi2.c notdi2.c qdivrem.c \
	subdi3.c  ucmpdi2.c udivdi3.c umoddi3.c xordi3.c
KINCLUDES+=	quad/quad.h
.endif

@


1.18
log
@switch to the new resolver implementation.
requested by many.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.17 2012/04/26 01:22:31 matthew Exp $
a43 1
.include "${LIBCSRCDIR}/ohash/Makefile.inc"
@


1.17
log
@Add strnlen() to libkern.

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.16 2010/09/24 13:33:00 matthew Exp $
d41 1
@


1.16
log
@Add timingsafe_bcmp(3) to libc, mention that it's already in the
kernel in kern(9), and remove it from OpenSSH.

ok deraadt@@, djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.15 2010/07/27 16:59:03 stsp Exp $
d64 2
a65 2
KSRCS=	bcmp.c bzero.c ffs.c strcat.c strcmp.c strcpy.c strlen.c strncmp.c \
	strncpy.c htonl.c htons.c ntohl.c ntohs.c timingsafe_bcmp.c
@


1.15
log
@Replace the single-byte placeholders for the multi-byte/wide-character
conversion interfaces of libc (mbrtowc(3) and friends) with new
implementations that internally call an API based on NetBSD's citrus.
This allows us to support locales with multi-byte character encodings.

Provide two implementations of the citrus-based API: one based on the old
single-byte placeholders for use with our existing single-byte character
locales (C, ISO8859-*, KOI8, CP1251, etc.), and one that provides support
for UTF-8 encoded characters (code based on FreeBSD's implementation).

Install the en_US.UTF-8 ctype locale support file, and allow the UTF-8
ctype locale to be enabled via setlocale(3) (export LC_CTYPE='en_US.UTF-8').

A lot of programs, especially from ports, will now start using UTF-8 if the
UTF-8 locale is enabled. Use at your own risk, and please report any breakage.
Note that ncurses-based programs cannot display UTF-8 right now, this is being
worked on.

To prevent install media growth, add vfprintf(3) and mbrtowc(3) to libstubs.
The mbrtowc stub was copied unchanged from its old single-byte placeholder.
vfprintf.c doesn't need to be copied, just put in .PATH (hint by fgsch@@).

Testing by myself, naddy, sthen, nicm, espie, armani, Dmitrij D. Czarkoff.

ok matthieu espie millert sthen nicm deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.14 2010/02/03 20:49:00 miod Exp $
d65 1
a65 1
	strncpy.c htonl.c htons.c ntohl.c ntohs.c
@


1.14
log
@Use MACHINE_CPU instead of MACHINE_ARCH to pick the correct machine dependent
files or directories when applicable.
The inspiration and name of MACHINE_CPU come from NetBSD, although the way to
provide it to Makefiles is completely different.
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.13 2009/10/27 23:59:59 deraadt Exp $
d33 1
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.12 2008/09/07 20:36:07 martynas Exp $
d21 1
a21 1
AINC=   -I${LIBCSRCDIR}/arch/${MACHINE_ARCH}
d26 3
a28 3
.if exists (${LIBCSRCDIR}/arch/${MACHINE_ARCH}/Makefile.inc)
.PATH:	${LIBCSRCDIR}/arch/${MACHINE_ARCH}
.include "${LIBCSRCDIR}/arch/${MACHINE_ARCH}/Makefile.inc"
d43 1
a43 1
.if (${MACHINE_ARCH} != "alpha")
d65 1
a65 1
.if (${MACHINE_ARCH} != "alpha")
@


1.12
log
@- replace dtoa w/ David's gdtoa, version 2008-03-15
- provide proper dtoa locks
- use the real strtof implementation
- add strtold, __hdtoa, __hldtoa
- add %a/%A support
- don't lose precision in printf, don't round to double anymore
- implement extended-precision versions of libc functions: fpclassify,
isnan, isinf, signbit, isnormal, isfinite, now that the ieee.h is
fixed
- separate vax versions of strtof, and __hdtoa
- add complex math support.  added functions: cacos, casin, catan,
ccos, csin, ctan, cacosh, casinh, catanh, ccosh, csinh, ctanh, cexp,
clog, cabs, cpow, csqrt, carg, cimag, conj, cproj, creal, cacosf,
casinf, catanf, ccosf, csinf, ctanf, cacoshf, casinhf, catanhf,
ccoshf, csinhf, ctanhf, cexpf, clogf, cabsf, cpowf, csqrtf, cargf,
cimagf, conjf, cprojf, crealf
- add fdim, fmax, fmin
- add log2. (adapted implementation e_log.c.  could be more acruate
& faster, but it's good enough for now)
- remove wrappers & cruft in libm, supposed to work-around mistakes
in SVID, etc.;  use ieee versions.  fixes issues in python 2.6 for
djm@@
- make _digittoint static
- proper definitions for i386, and amd64 in ieee.h
- sh, powerpc don't really have extended-precision
- add missing definitions for mips64 (quad), m{6,8}k (96-bit) float.h
for LDBL_*
- merge lead to frac for m{6,8}k, for gdtoa to work properly
- add FRAC*BITS & EXT_TO_ARRAY32 definitions in ieee.h, for hdtoa&ldtoa
to use
- add EXT_IMPLICIT_NBIT definition, which indicates implicit
normalization bit
- add regression tests for libc: fpclassify and printf
- arith.h & gd_qnan.h definitions
- update ieee.h: hppa doesn't have quad-precision, hppa64 does
- add missing prototypes to gdtoaimp
- on 64-bit platforms make sure gdtoa doesn't use a long when it
really wants an int
- etc., what i may have forgotten...
- bump libm major, due to removed&changed symbols
- no libc bump, since this is riding on djm's libc major crank from
a day ago

discussed with / requested by / testing theo, sthen@@, djm@@, jsg@@,
merdely@@, jsing@@, tedu@@, brad@@, jakemsr@@, and others.
looks good to millert@@
parts of the diff ok kettenis@@

this commit does not include:
- man page changes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2005/06/17 20:37:31 drahn Exp $
d11 1
a11 1
CFLAGS+=	-DLIBC_SCCS -DSYSLIBC_SCCS -I${LIBCSRCDIR}/include
@


1.11
log
@Extended Attributes was a piece to get to ACLs, however ACLs have not
been worked on, so EA is pointless to maintain.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2005/03/07 02:26:41 deraadt Exp $
d36 1
@


1.10
log
@turn on APIWARN (prints link-time warnings for a few more functions).  The
snapshots have been built with this for more than a year, but the releases
have not.  This is a fair bit more noisy in the ports tree, but it is good
advice for people about how they can improve their code.  Let us see where
the annoyance vs worthwhile balance lands
ok pvalchev
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2004/04/28 16:56:49 millert Exp $
a53 1
.include "${LIBCSRCDIR}/posix1e/Makefile.inc"
@


1.9
log
@Don't build lib/libc/md, build md[45] in lib/libc/hash instead.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2003/07/24 01:15:41 deraadt Exp $
d14 1
a14 1
#CFLAGS+=-DAPIWARN
@


1.8
log
@warn about unsafe APIs at link time.  Conditional on libc/Makefile defining
APIWARN; disabled by default.  In use by many developers for quite some time,
now they have a common knob to enable/disable this
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2003/01/20 19:41:53 marc Exp $
a38 1
.include "${LIBCSRCDIR}/md/Makefile.inc"
@


1.7
log
@remove libc_r mention in comment
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2002/02/22 21:06:00 drahn Exp $
d12 3
@


1.6
log
@Extended Attribute support, from FreeBSD/TrustedBSD. ok art@@ deraadt@@
libc support pieces
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2001/11/20 01:09:38 pvalchev Exp $
d3 1
a3 1
# This file contains make rules that are shared by libc and libc_r.
@


1.5
log
@Put dl* function definitions in libc on ELF, removing the need for libdl.
These are just stubs, the real functions are resolved by ld.so when linking
is performed.  ok art
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2001/03/02 13:27:05 espie Exp $
d52 1
@


1.4
log
@Add ohash_* functions to libc.
Ok'd deraadt@@, millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2000/09/03 18:41:13 espie Exp $
d29 1
@


1.3
log
@Boring...  Add :L modifier to all tweakable variables tests.

Closes PR 1246
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2000/01/06 08:47:07 d Exp $
d38 1
@


1.2
log
@include thread/Makefile.inc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 1998/11/20 11:18:28 d Exp $
d13 1
a13 1
.if (${YP} == "yes")
d50 1
a50 1
.if (${YP} == "yes")
@


1.1
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 1998/08/08 04:12:16 form Exp $
d47 1
@

