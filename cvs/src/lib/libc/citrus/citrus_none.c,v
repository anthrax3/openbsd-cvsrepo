head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.12
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2016.09.07.17.10.43;	author schwarze;	state Exp;
branches;
next	1.8;
commitid	wkJKxzbOTK0dRzyz;

1.8
date	2016.09.07.17.06.23;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	mWKuz25KiF2qGetW;

1.7
date	2016.09.05.09.47.03;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	pwnoqOj4YLQyPERN;

1.6
date	2015.11.01.03.45.28;	author guenther;	state Exp;
branches;
next	1.5;
commitid	CfNWDWdDpm7mVO8i;

1.5
date	2013.03.07.18.12.31;	author stsp;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.05.23.19.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.06.16.58.02;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	2010.08.03.11.23.37;	author stsp;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.16.59.03;	author stsp;	state Exp;
branches;
next	;


desc
@@


1.9
log
@trivial cleanup: delete inline attribute on static function,
leave that decision to the compiler; no functional change
@
text
@/*	$OpenBSD: citrus_none.c,v 1.8 2016/09/07 17:06:23 schwarze Exp $ */
/*	$NetBSD: citrus_none.c,v 1.18 2008/06/14 16:01:07 tnozaki Exp $	*/

/*-
 * Copyright (c)2002 Citrus Project,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <errno.h>
#include <string.h>
#include <wchar.h>

#include "citrus_ctype.h"

static char	 wrapv(unsigned char);


/*
 * Convert an unsigned char value into a char value without relying on
 * signed overflow behavior.
 */
static char
wrapv(unsigned char ch)
{
	if (ch >= 0x80)
		return (int)ch - 0x100;
	else
		return ch;
}

size_t
_citrus_none_ctype_mbrtowc(wchar_t * __restrict pwc,
    const char * __restrict s, size_t n)
{
	if (s == NULL)
		return 0;
	if (n == 0)
		return -2;
	if (pwc != NULL)
		*pwc = (wchar_t)(unsigned char)*s;
	return *s != '\0';
}

size_t
_citrus_none_ctype_mbsnrtowcs(wchar_t * __restrict dst,
    const char ** __restrict src, size_t nmc, size_t len)
{
	size_t i;

	if (dst == NULL)
		return strnlen(*src, nmc);

	for (i = 0; i < nmc && i < len; i++)
		if ((dst[i] = (wchar_t)(unsigned char)(*src)[i]) == L'\0') {
			*src = NULL;
			return i;
		}

	*src += i;
	return i;
}

size_t
_citrus_none_ctype_wcrtomb(char * __restrict s, wchar_t wc)
{
	if (s == NULL)
		return 1;

	if (wc < 0 || wc > 0xff) {
		errno = EILSEQ;
		return -1;
	}

	*s = wrapv(wc);
	return 1;
}

size_t
_citrus_none_ctype_wcsnrtombs(char * __restrict dst,
    const wchar_t ** __restrict src, size_t nwc, size_t len)
{
	size_t i;

	if (dst == NULL) {
		for (i = 0; i < nwc; i++) {
			wchar_t wc = (*src)[i];
			if (wc < 0 || wc > 0xff) {
				errno = EILSEQ;
				return -1;
			}
			if (wc == L'\0')
				return i;
		}
		return i;
	}

	for (i = 0; i < nwc && i < len; i++) {
		wchar_t wc = (*src)[i];
		if (wc < 0 || wc > 0xff) {
			*src += i;
			errno = EILSEQ;
			return -1;
		}
		dst[i] = wrapv(wc);
		if (wc == L'\0') {
			*src = NULL;
			return i;
		}
	}
	*src += i;
	return i;
}
@


1.8
log
@trivial cleanup:
- delete unused headers
- add missing function prototype
- delete needless casts of return values
- KNF: return is not a function
- KNF: do not use a pointer as a boolean
- consistent wording in comments: s/octets/bytes/
OK gcc: no object change after strip -g
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_none.c,v 1.7 2016/09/05 09:47:03 schwarze Exp $ */
d38 1
a38 1
static inline char	 wrapv(unsigned char);
d45 1
a45 1
static inline char
@


1.7
log
@Delete some abstraction that we don't and won't need.
Declare functions rather than generating declarations with macros.
Just call functions rather than mainting function pointer tables.
Purge unused arguments.  Simplify mbstate_t casting.
Garbage collect one empty and one unused function.

As a bonus, make mbsinit(3) work at all, it returned garbage
in the past due to a missing cast when passing mbstate_t.
Apart from that, no functional change.

No libc bump needed; only private functions are removed and
change prototype and only private structs change size.

OK stsp@@ mpi@@; deraadt@@ likes the general direction.
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_none.c,v 1.6 2015/11/01 03:45:28 guenther Exp $ */
a32 1
#include <limits.h>
a33 3
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
d38 3
d49 1
a49 1
		return ((int)ch - 0x100);
d51 1
a51 1
		return (ch);
d61 2
a62 2
		return (size_t)-2;
	if (pwc)
d64 1
a64 1
	return (*s != '\0');
d79 1
a79 1
			return (i);
d83 1
a83 1
	return (i);
d90 1
a90 1
		return (1);
d94 1
a94 1
		return (-1);
d98 1
a98 1
	return (1);
d112 1
a112 1
				return (-1);
d115 1
a115 1
				return (i);
d117 1
a117 1
		return (i);
d125 1
a125 1
			return (-1);
d130 1
a130 1
			return (i);
d134 1
a134 1
	return (i);
@


1.6
log
@delete old lint ARGSUSED comments
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_none.c,v 1.5 2013/03/07 18:12:31 stsp Exp $ */
a40 3
#include "citrus_none.h"

_CITRUS_CTYPE_DEF_OPS(none);
d57 1
a57 2
			   const char * __restrict s, size_t n,
			   void * __restrict pspriv)
a58 4
	/* pwc may be NULL */
	/* s may be NULL */
	/* pspriv appears to be unused */

a67 6
int
_citrus_none_ctype_mbsinit(const void * __restrict pspriv)
{
	return (1);  /* always initial state */
}

d70 1
a70 3
			      const char ** __restrict src,
			      size_t nmc, size_t len,
			      void * __restrict pspriv)
a73 3
	/* dst may be NULL */
	/* pspriv appears to be unused */

d88 1
a88 2
_citrus_none_ctype_wcrtomb(char * __restrict s,
			   wchar_t wc, void * __restrict pspriv)
a89 3
	/* s may be NULL */
	/* ps appears to be unused */

d104 1
a104 3
			      const wchar_t ** __restrict src,
			      size_t nwc, size_t len,
			      void * __restrict pspriv)
a106 3

	/* dst may be NULL */
	/* pspriv appears to be unused */
@


1.5
log
@Fix return value of wcrtomb() in single-byte locales if the s argument is NULL.
wcrtomb() must pretend to store one byte (NUL-terminator) in this case.
Patch by Vladimir Tamara Patino. ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_none.c,v 1.4 2012/12/05 23:19:59 deraadt Exp $ */
a58 1
/*ARGSUSED*/
a76 1
/*ARGSUSED*/
a82 1
/*ARGSUSED*/
a106 1
/*ARGSUSED*/
a125 1
/*ARGSUSED*/
@


1.4
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_none.c,v 1.3 2012/06/06 16:58:02 matthew Exp $ */
d118 1
a118 1
		return (0);
@


1.3
log
@Add support for mbsnrtowcs() and wcsnrtombs() to libc.

Bulk build test by naddy.
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_none.c,v 1.2 2010/08/03 11:23:37 stsp Exp $ */
a29 1
#include <sys/cdefs.h>
@


1.2
log
@When the target pointer 'pwcs' passed to mbsrtowcs() is NULL, mbsrtowcs()
is supposed to ignore the 'n' parameter and return the number of wide
characters needed to represent the given multi-byte character sequence.

However, in the special case where 'pwcs' is NULL and 'n' is zero, our
mbsrtowcs() implementation for single-byte locales mistakenly returned zero.
Before the UTF-8 locale was added, this bug was invisible to callers of
mbstowcs() because mbstowcs() handled this special case itself.
But our new mbstowcs() implementation simply forwards to the locale-specific
mbsrtowcs() implementation and expects it to do the right thing.

The "awesome" window manager's "Run:" command prompt uses mbstowcs() to
measure how many (possibly multi-byte) characters a user has typed, and
due to this bug would always be tricked into thinking the user had entered
zero characters when a single-byte locale was used.

Found after prodding by dcoppa.

ok deraadt sthen espie
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_none.c,v 1.1 2010/07/27 16:59:03 stsp Exp $ */
d34 1
d46 13
d87 4
a90 3
_citrus_none_ctype_mbsrtowcs(wchar_t * __restrict pwcs,
			     const char ** __restrict s, size_t n,
			     void * __restrict pspriv)
d92 1
a92 1
	int count = 0;
d94 1
a94 2
	/* pwcs may be NULL */
	/* s may be NULL */
d97 2
a98 2
	if (!s || !*s)
		return 0;
d100 5
a104 2
	if (pwcs == NULL)
		return strlen(*s);
d106 2
a107 8
	while (n > 0) {
		if ((*pwcs++ = (wchar_t)(unsigned char)*(*s)++) == 0)
			break;
		count++;
		n--;
	}
	
	return count;
d119 6
a124 1
		return 0;
d126 2
a127 2
	*s = (char) wc;
	return 1;
d132 4
a135 3
_citrus_none_ctype_wcsrtombs(char * __restrict s,
			     const wchar_t ** __restrict pwcs, size_t n,
			     void * __restrict pspriv)
d137 1
a137 1
	int count = 0;
d139 1
a139 2
	/* s may be NULL */
	/* pwcs may be NULL */
d142 11
a152 7
	if (pwcs == NULL || *pwcs == NULL)
		return (0);

	if (s == NULL) {
		while (*(*pwcs)++ != 0)
			count++;
		return(count);
d155 12
a166 6
	if (n != 0) {
		do {
			if ((*s++ = (char) *(*pwcs)++) == 0)
				break;
			count++;
		} while (--n != 0);
d168 2
a169 2

	return count;
@


1.1
log
@Replace the single-byte placeholders for the multi-byte/wide-character
conversion interfaces of libc (mbrtowc(3) and friends) with new
implementations that internally call an API based on NetBSD's citrus.
This allows us to support locales with multi-byte character encodings.

Provide two implementations of the citrus-based API: one based on the old
single-byte placeholders for use with our existing single-byte character
locales (C, ISO8859-*, KOI8, CP1251, etc.), and one that provides support
for UTF-8 encoded characters (code based on FreeBSD's implementation).

Install the en_US.UTF-8 ctype locale support file, and allow the UTF-8
ctype locale to be enabled via setlocale(3) (export LC_CTYPE='en_US.UTF-8').

A lot of programs, especially from ports, will now start using UTF-8 if the
UTF-8 locale is enabled. Use at your own risk, and please report any breakage.
Note that ncurses-based programs cannot display UTF-8 right now, this is being
worked on.

To prevent install media growth, add vfprintf(3) and mbrtowc(3) to libstubs.
The mbrtowc stub was copied unchanged from its old single-byte placeholder.
vfprintf.c doesn't need to be copied, just put in .PATH (hint by fgsch@@).

Testing by myself, naddy, sthen, nicm, espie, armani, Dmitrij D. Czarkoff.

ok matthieu espie millert sthen nicm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d86 8
a93 14
	if (n != 0) {
		if (pwcs != NULL) {
			do {
				if ((*pwcs++ = (wchar_t)(unsigned char)*(*s)++) == 0)
					break;
				count++;
			} while (--n != 0);
		} else {
			do {
				if (((wchar_t)*(*s)++) == 0)
					break;
				count++;
			} while (--n != 0);
		}
@

