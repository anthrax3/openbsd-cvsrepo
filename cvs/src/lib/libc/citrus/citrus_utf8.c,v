head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.6
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.18
date	2016.09.07.17.15.06;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	1ttCEco1hLfNNkzT;

1.17
date	2016.09.07.17.06.23;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	mWKuz25KiF2qGetW;

1.16
date	2016.09.05.09.47.03;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	pwnoqOj4YLQyPERN;

1.15
date	2015.11.01.03.45.28;	author guenther;	state Exp;
branches;
next	1.14;
commitid	CfNWDWdDpm7mVO8i;

1.14
date	2015.10.13.02.17.46;	author bentley;	state Exp;
branches;
next	1.13;
commitid	y6iDHMO9yfy8twlr;

1.13
date	2015.10.12.17.50.51;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	1XfXZaDby2C4G21e;

1.12
date	2015.10.10.13.54.22;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	MPHsW9pXlqbYM1I6;

1.11
date	2015.09.26.14.22.40;	author semarie;	state Exp;
branches;
next	1.10;
commitid	bVPOAe2v0zBvQl6G;

1.10
date	2015.09.05.15.22.04;	author semarie;	state Exp;
branches;
next	1.9;
commitid	BIlE3tZaTEvWAaL3;

1.9
date	2015.09.05.13.29.38;	author semarie;	state Exp;
branches;
next	1.8;
commitid	u9dJHfm9hE9XQxWv;

1.8
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	0DYulI8hhujBHMcR;

1.7
date	2014.05.03.14.10.20;	author stsp;	state Exp;
branches;
next	1.6;

1.6
date	2012.12.05.23.19.59;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.06.16.58.02;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.21.00.16.06;	author yasuoka;	state Exp;
branches;
next	1.3;

1.3
date	2010.08.05.17.13.53;	author stsp;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.29.00.50.10;	author stsp;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.16.59.03;	author stsp;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Trivial cleanup: Pass pointers of the correct types to the private
functions and delete a macro that is used in only one place;
no functional change.
This completes the audit of the citrus directory (only 3 files left).
@
text
@/*	$OpenBSD: citrus_utf8.c,v 1.17 2016/09/07 17:06:23 schwarze Exp $ */

/*-
 * Copyright (c) 2002-2004 Tim J. Robbins
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <errno.h>
#include <string.h>
#include <wchar.h>

#include "citrus_ctype.h"

struct _utf8_state {
	wchar_t	ch;
	int	want;
	wchar_t	lbound;
};

size_t
_citrus_utf8_ctype_mbrtowc(wchar_t * __restrict pwc,
    const char * __restrict s, size_t n, mbstate_t * __restrict ps)
{
	struct _utf8_state *us;
	int ch, i, mask, want;
	wchar_t lbound, wch;

	us = (struct _utf8_state *)ps;

	if (us->want < 0 || us->want > _CITRUS_UTF8_MB_CUR_MAX) {
		errno = EINVAL;
		return -1;
	}

	if (s == NULL) {
		s = "";
		n = 1;
		pwc = NULL;
	}

	if (n == 0)
		return -2;

	if (us->want == 0 && ((ch = (unsigned char)*s) & ~0x7f) == 0) {
		/* Fast path for plain ASCII characters. */
		if (pwc != NULL)
			*pwc = ch;
		return ch != '\0' ? 1 : 0;
	}

	if (us->want == 0) {
		/*
		 * Determine the number of bytes that make up this character
		 * from the first byte, and a mask that extracts the
		 * interesting bits of the first byte.  We already know
		 * the character is at least two bytes long.
		 *
		 * We also specify a lower bound for the character code to
		 * detect redundant, non-"shortest form" encodings. For
		 * example, the sequence C0 80 is _not_ a legal representation
		 * of the null character. This enforces a 1-to-1 mapping
		 * between character codes and their multibyte representations.
		 */
		ch = (unsigned char)*s;
		if ((ch & 0x80) == 0) {
			mask = 0x7f;
			want = 1;
			lbound = 0;
		} else if ((ch & 0xe0) == 0xc0) {
			mask = 0x1f;
			want = 2;
			lbound = 0x80;
		} else if ((ch & 0xf0) == 0xe0) {
			mask = 0x0f;
			want = 3;
			lbound = 0x800;
		} else if ((ch & 0xf8) == 0xf0) {
			mask = 0x07;
			want = 4;
			lbound = 0x10000;
		} else {
			/*
			 * Malformed input; input is not UTF-8.
			 * See RFC 3629.
			 */
			errno = EILSEQ;
			return -1;
		}
	} else {
		want = us->want;
		lbound = us->lbound;
	}

	/*
	 * Decode the byte sequence representing the character in chunks
	 * of 6 bits, most significant first.
	 */
	if (us->want == 0)
		wch = (unsigned char)*s++ & mask;
	else
		wch = us->ch;
	for (i = (us->want == 0) ? 1 : 0; i < want && (size_t)i < n; i++) {
		if ((*s & 0xc0) != 0x80) {
			/*
			 * Malformed input; bad byte in the middle
			 * of a character.
			 */
			errno = EILSEQ;
			return -1;
		}
		wch <<= 6;
		wch |= *s++ & 0x3f;
	}
	if (i < want) {
		/* Incomplete multibyte sequence. */
		us->want = want - i;
		us->lbound = lbound;
		us->ch = wch;
		return -2;
	}
	if (wch < lbound) {
		/*
		 * Malformed input; redundant encoding.
		 */
		errno = EILSEQ;
		return -1;
	}
	if (wch >= 0xd800 && wch <= 0xdfff) {
		/*
		 * Malformed input; invalid code points.
		 */
		errno = EILSEQ;
		return -1;
	}
	if (wch > 0x10ffff) {
		/*
		 * Malformed input; invalid code points.
		 */
		errno = EILSEQ;
		return -1;
	}
	if (pwc != NULL)
		*pwc = wch;
	us->want = 0;
	return wch == L'\0' ? 0 : want;
}

int
_citrus_utf8_ctype_mbsinit(const mbstate_t * __restrict ps)
{
	return ((const struct _utf8_state *)ps)->want == 0;
}

size_t
_citrus_utf8_ctype_mbsnrtowcs(wchar_t * __restrict dst,
    const char ** __restrict src, size_t nmc, size_t len,
    mbstate_t * __restrict ps)
{
	struct _utf8_state *us;
	size_t i, o, r;

	us = (struct _utf8_state *)ps;

	if (dst == NULL) {
		/*
		 * The fast path in the loop below is not safe if an ASCII
		 * character appears as anything but the first byte of a
		 * multibyte sequence. Check now to avoid doing it in the loop.
		 */
		if (nmc > 0 && us->want > 0 && (unsigned char)(*src)[0] < 0x80) {
			errno = EILSEQ;
			return -1;
		}
		for (i = o = 0; i < nmc; i += r, o++) {
			if ((unsigned char)(*src)[i] < 0x80) {
				/* Fast path for plain ASCII characters. */
				if ((*src)[i] == '\0')
					return o;
				r = 1;
			} else {
				r = _citrus_utf8_ctype_mbrtowc(NULL, *src + i,
				    nmc - i, ps);
				if (r == (size_t)-1)
					return r;
				if (r == (size_t)-2)
					return o;
				if (r == 0)
					return o;
			}
		}
		return o;
	}

	/*
	 * The fast path in the loop below is not safe if an ASCII
	 * character appears as anything but the first byte of a
	 * multibyte sequence. Check now to avoid doing it in the loop.
	 */
	if (len > 0 && nmc > 0 && us->want > 0 &&
	    (unsigned char)(*src)[0] < 0x80) {
		errno = EILSEQ;
		return -1;
	}
	for (i = o = 0; i < nmc && o < len; i += r, o++) {
		if ((unsigned char)(*src)[i] < 0x80) {
			/* Fast path for plain ASCII characters. */
			dst[o] = (wchar_t)(unsigned char)(*src)[i];
			if ((*src)[i] == '\0') {
				*src = NULL;
				return o;
			}
			r = 1;
		} else {
			r = _citrus_utf8_ctype_mbrtowc(dst + o, *src + i,
			    nmc - i, ps);
			if (r == (size_t)-1) {
				*src += i;
				return r;
			}
			if (r == (size_t)-2) {
				*src += nmc;
				return o;
			}
			if (r == 0) {
				*src = NULL;
				return o;
			}
		}
	}
	*src += i;
	return o;
}

size_t
_citrus_utf8_ctype_wcrtomb(char * __restrict s, wchar_t wc,
    mbstate_t * __restrict ps)
{
	struct _utf8_state *us;
	unsigned char lead;
	int i, len;

	us = (struct _utf8_state *)ps;

	if (us->want != 0) {
		errno = EINVAL;
		return -1;
	}

	if (s == NULL)
		return 1;

	if (wc < 0 || (wc > 0xd7ff && wc < 0xe000) || wc > 0x10ffff) {
		errno = EILSEQ;
		return -1;
	}

	/*
	 * Determine the number of bytes needed to represent this character.
	 * We always output the shortest sequence possible. Also specify the
	 * first few bits of the first byte, which contains the information
	 * about the sequence length.
	 */
	if (wc <= 0x7f) {
		/* Fast path for plain ASCII characters. */
		*s = (char)wc;
		return 1;
	} else if (wc <= 0x7ff) {
		lead = 0xc0;
		len = 2;
	} else if (wc <= 0xffff) {
		lead = 0xe0;
		len = 3;
	} else {
		lead = 0xf0;
		len = 4;
	}

	/*
	 * Output the bytes representing the character in chunks
	 * of 6 bits, least significant last. The first byte is
	 * a special case because it contains the sequence length
	 * information.
	 */
	for (i = len - 1; i > 0; i--) {
		s[i] = (wc & 0x3f) | 0x80;
		wc >>= 6;
	}
	*s = (wc & 0xff) | lead;

	return len;
}

size_t
_citrus_utf8_ctype_wcsnrtombs(char * __restrict dst,
    const wchar_t ** __restrict src, size_t nwc, size_t len,
    mbstate_t * __restrict ps)
{
	struct _utf8_state *us;
	char buf[_CITRUS_UTF8_MB_CUR_MAX];
	size_t i, o, r;

	us = (struct _utf8_state *)ps;

	if (us->want != 0) {
		errno = EINVAL;
		return -1;
	}

	if (dst == NULL) {
		for (i = o = 0; i < nwc; i++, o += r) {
			wchar_t wc = (*src)[i];
			if (wc >= 0 && wc < 0x80) {
				/* Fast path for plain ASCII characters. */
				if (wc == 0)
					return o;
				r = 1;
			} else {
				r = _citrus_utf8_ctype_wcrtomb(buf, wc, ps);
				if (r == (size_t)-1)
					return r;
			}
		}
		return o;
	}

	for (i = o = 0; i < nwc && o < len; i++, o += r) {
		wchar_t wc = (*src)[i];
		if (wc >= 0 && wc < 0x80) {
			/* Fast path for plain ASCII characters. */
			dst[o] = (wchar_t)wc;
			if (wc == 0) {
				*src = NULL;
				return o;
			}
			r = 1;
		} else if (len - o >= _CITRUS_UTF8_MB_CUR_MAX) {
			/* Enough space to translate in-place. */
			r = _citrus_utf8_ctype_wcrtomb(dst + o, wc, ps);
			if (r == (size_t)-1) {
				*src += i;
				return r;
			}
		} else {
			/* May not be enough space; use temp buffer. */
			r = _citrus_utf8_ctype_wcrtomb(buf, wc, ps);
			if (r == (size_t)-1) {
				*src += i;
				return r;
			}
			if (r > len - o)
				break;
			memcpy(dst + o, buf, r);
		}
	}
	*src += i;
	return o;
}
@


1.17
log
@trivial cleanup:
- delete unused headers
- add missing function prototype
- delete needless casts of return values
- KNF: return is not a function
- KNF: do not use a pointer as a boolean
- consistent wording in comments: s/octets/bytes/
OK gcc: no object change after strip -g
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.16 2016/09/05 09:47:03 schwarze Exp $ */
a36 2
#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

d125 1
a125 1
	for (i = (us->want == 0) ? 1 : 0; i < MINIMUM(want, n); i++) {
d205 1
a205 1
				    nmc - i, us);
d238 1
a238 1
			    nmc - i, us);
d341 1
a341 1
				r = _citrus_utf8_ctype_wcrtomb(buf, wc, us);
d361 1
a361 1
			r = _citrus_utf8_ctype_wcrtomb(dst + o, wc, us);
d368 1
a368 1
			r = _citrus_utf8_ctype_wcrtomb(buf, wc, us);
@


1.16
log
@Delete some abstraction that we don't and won't need.
Declare functions rather than generating declarations with macros.
Just call functions rather than mainting function pointer tables.
Purge unused arguments.  Simplify mbstate_t casting.
Garbage collect one empty and one unused function.

As a bonus, make mbsinit(3) work at all, it returned garbage
in the past due to a missing cast when passing mbstate_t.
Apart from that, no functional change.

No libc bump needed; only private functions are removed and
change prototype and only private structs change size.

OK stsp@@ mpi@@; deraadt@@ likes the general direction.
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.15 2015/11/01 03:45:28 guenther Exp $ */
a28 1
#include <sys/errno.h>
a29 1
#include <sys/limits.h>
a31 3
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
d57 1
a57 1
		return ((size_t)-1);
d66 2
a67 4
	if (n == 0) {
		/* Incomplete multibyte sequence */
		return ((size_t)-2);
	}
d73 1
a73 1
		return (ch != '\0' ? 1 : 0);
d78 3
a80 3
		 * Determine the number of octets that make up this character
		 * from the first octet, and a mask that extracts the
		 * interesting bits of the first octet. We already know
d112 1
a112 1
			return ((size_t)-1);
d120 1
a120 1
	 * Decode the octet sequence representing the character in chunks
d130 1
a130 1
			 * Malformed input; bad characters in the middle
d134 1
a134 1
			return ((size_t)-1);
d144 1
a144 1
		return ((size_t)-2);
d151 1
a151 1
		return ((size_t)-1);
d158 1
a158 1
		return ((size_t)-1);
d165 1
a165 1
		return ((size_t)-1);
d170 1
a170 1
	return (wch == L'\0' ? 0 : want);
d176 1
a176 1
	return (((const struct _utf8_state *)ps)->want == 0);
d197 1
a197 1
			return ((size_t)-1);
d203 1
a203 1
					return (o);
d209 1
a209 1
					return (r);
d211 1
a211 1
					return (o);
d213 1
a213 1
					return (o);
d216 1
a216 1
		return (o);
d224 2
a225 1
	if (len > 0 && nmc > 0 && us->want > 0 && (unsigned char)(*src)[0] < 0x80) {
d227 1
a227 1
		return ((size_t)-1);
d235 1
a235 1
				return (o);
d243 1
a243 1
				return (r);
d247 1
a247 1
				return (o);
d251 1
a251 1
				return (o);
d256 1
a256 1
	return (o);
d271 1
a271 1
		return ((size_t)-1);
d274 2
a275 4
	if (s == NULL) {
		/* Reset to initial shift state (no-op) */
		return (1);
	}
d279 1
a279 1
		return ((size_t)-1);
d283 1
a283 1
	 * Determine the number of octets needed to represent this character.
d285 1
a285 1
	 * first few bits of the first octet, which contains the information
d291 1
a291 1
		return (1);
d304 2
a305 2
	 * Output the octets representing the character in chunks
	 * of 6 bits, least significant last. The first octet is
d315 1
a315 1
	return (len);
d331 1
a331 1
		return ((size_t)-1);
d340 1
a340 1
					return (o);
d345 1
a345 1
					return (r);
d348 1
a348 1
		return (o);
d358 1
a358 1
				return (o);
d366 1
a366 1
				return (r);
d373 1
a373 1
				return (r);
d381 1
a381 1
	return (o);
@


1.15
log
@delete old lint ARGSUSED comments
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.14 2015/10/13 02:17:46 bentley Exp $ */
a40 1
#include "citrus_utf8.h"
a43 2
_CITRUS_CTYPE_DEF_OPS(utf8);

d52 1
a52 2
			   const char * __restrict s, size_t n,
			   void * __restrict pspriv)
d58 1
a58 1
	us = (struct _utf8_state *)pspriv;
d181 1
a181 1
_citrus_utf8_ctype_mbsinit(const void * __restrict pspriv)
d183 1
a183 2
	return (pspriv == NULL ||
	    ((const struct _utf8_state *)pspriv)->want == 0);
d188 2
a189 3
			      const char ** __restrict src,
			      size_t nmc, size_t len,
			      void * __restrict pspriv)
d194 1
a194 1
	us = (struct _utf8_state *)pspriv;
d266 2
a267 2
_citrus_utf8_ctype_wcrtomb(char * __restrict s,
			   wchar_t wc, void * __restrict pspriv)
d273 1
a273 1
	us = (struct _utf8_state *)pspriv;
d328 2
a329 3
			      const wchar_t ** __restrict src,
			      size_t nwc, size_t len,
			      void * __restrict pspriv)
d335 1
a335 1
	us = (struct _utf8_state *)pspriv;
@


1.14
log
@Tighten the ranges in wcrtomb(3).

By definition, the range of valid Unicode code points is the union of
U+0000..U+D7FF and U+E000..U+10FFFF (see Unicode 8.0.0, chapter 3.9).

In UTF-16, the encoded values that would represent U+D800..U+DFFF are
used for surrogate pairs. UTF-8 has no concept of surrogate pairs;
attempting to treat them as regular code points violates the standard
and makes no sense besides.

ok stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.13 2015/10/12 17:50:51 schwarze Exp $ */
a53 1
/*ARGSUSED*/
a184 1
/*ARGSUSED*/
a191 1
/*ARGSUSED*/
a271 1
/*ARGSUSED*/
a332 1
/*ARGSUSED*/
@


1.13
log
@Make wcrtomb() more readable by weeding out range errors up front,
doing ASCII handling once rather than twice, and using <= rather
than ((&~)==) obfuscation (which already caused a bug in the past).
No functional change.
Joint work with and OK stsp@@ semarie@@ bentley@@
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.12 2015/10/10 13:54:22 schwarze Exp $ */
d295 1
a295 1
	if (wc < 0 || wc > 0x10ffff) {
@


1.12
log
@Code points U+10000 to U+fffff are valid, too.
Fixing a regression in wcrtomb(3) found with the mandoc testsuite
that was caused by the last commit.
OK semarie@@ bentley@@
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.11 2015/09/26 14:22:40 semarie Exp $ */
d295 3
a297 4
	if ((wc & ~0x7f) == 0) {
		/* Fast path for plain ASCII characters. */
		*s = (char)wc;
		return (1);
d306 5
a310 4
	if ((wc & ~0x7f) == 0) {
		lead = 0;
		len = 1;
	} else if ((wc & ~0x7ff) == 0) {
d313 1
a313 1
	} else if ((wc & ~0xffff) == 0) {
d316 1
a316 1
	} else if ((wc & ~0xfffff) == 0 || (wc & ~0x10ffff) == 0) {
a318 3
	} else {
		errno = EILSEQ;
		return ((size_t)-1);
@


1.11
log
@correct a range problem in citrus-utf8 version of wcrtomb(3), in order to match
RFC 3629 (limiting the range of UTF-8 to 0x10FFFF).

it is the counterpart of a previous commit correcting mbrtowc(3).

problem spotted by stsp

ok bentley@@ stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.10 2015/09/05 15:22:04 semarie Exp $ */
d316 1
a316 1
	} else if ((wc & ~0x10ffff) == 0) {
@


1.10
log
@off-by-one for the previous patch. the limit is inclusive: 0x10ffff is a valid codepoint.

ok stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.9 2015/09/05 13:29:38 semarie Exp $ */
d316 1
a316 1
	} else if ((wc & ~0x1fffff) == 0) {
@


1.9
log
@check for limiting the range of UTF-8 to 0x10FFFF, as requested by RFC 3629.

ok stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.8 2015/01/16 16:48:51 deraadt Exp $ */
d172 1
a172 1
	if (wch >= 0x10ffff) {
@


1.8
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.7 2014/05/03 14:10:20 stsp Exp $ */
d166 7
@


1.7
log
@Noncharacters 0xFFFE and 0xFFFF don't render a UTF-8 string invalid
so stop rejecting them in our citrus UTF-8 parser.

This is a common misinterpretation of the Unicode standard which resulted
in a corrigendum last year: http://www.unicode.org/versions/corrigendum9.html

Pointed out by jilles@@freebsd (via pfg@@freebsd), thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.6 2012/12/05 23:19:59 deraadt Exp $ */
a29 1
#include <sys/param.h>
d43 2
d139 1
a139 1
	for (i = (us->want == 0) ? 1 : 0; i < MIN(want, n); i++) {
@


1.6
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.5 2012/06/06 16:58:02 matthew Exp $ */
d164 1
a164 2
	if ((wch >= 0xd800 && wch <= 0xdfff) ||
	    wch == 0xfffe || wch == 0xffff) {
@


1.5
log
@Add support for mbsnrtowcs() and wcsnrtombs() to libc.

Bulk build test by naddy.
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.4 2011/04/21 00:16:06 yasuoka Exp $ */
a28 1
#include <sys/cdefs.h>
@


1.4
log
@Don't use 'n' for the length of multibyte chars, because it is the length
of wide characters.  This will fix a problem of uim-fep pre-edit display.

OK stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.3 2010/08/05 17:13:53 stsp Exp $ */
d189 4
a192 3
_citrus_utf8_ctype_mbsrtowcs(wchar_t * __restrict pwcs,
			     const char ** __restrict s, size_t n,
			     void * __restrict pspriv)
d195 1
a195 4
	const char *src;
	size_t nchr;
	wchar_t wc;
	size_t nb;
a197 2
	src = *s;
	nchr = 0;
d199 1
a199 1
	if (pwcs == NULL) {
d205 1
a205 1
		if (us->want > 0 && (signed char)*src > 0) {
d209 6
a214 7
		for (;;) {
			if ((signed char)*src > 0) {
				/*
				 * Fast path for plain ASCII characters
				 * excluding NUL.
				 */
				nb = 1;
d216 8
a223 9
				nb = _citrus_utf8_ctype_mbrtowc(&wc, src,
				    _CITRUS_UTF8_MB_CUR_MAX, us);
				if (nb == (size_t)-1) {
					/* Invalid sequence. */
					return (nb);
				}
				if (nb == 0 || nb == (size_t)-2) {
					return (nchr);
				}
a224 3

			src += nb;
			nchr++;
d226 1
a226 1
		/*NOTREACHED*/
d234 1
a234 1
	if (n > 0 && us->want > 0 && (signed char)*src > 0) {
d238 9
a246 8
	while (n-- > 0) {
		if ((signed char)*src > 0) {
			/*
			 * Fast path for plain ASCII characters
			 * excluding NUL.
			 */
			*pwcs = (wchar_t)*src;
			nb = 1;
d248 5
a252 5
			nb = _citrus_utf8_ctype_mbrtowc(pwcs, src,
			    _CITRUS_UTF8_MB_CUR_MAX, us);
			if (nb == (size_t)-1) {
				*s = src;
				return (nb);
d254 3
a256 3
			if (nb == (size_t)-2) {
				*s = src;
				return (nchr);
d258 3
a260 3
			if (nb == 0) {
				*s = NULL;
				return (nchr);
a262 3
		src += nb;
		nchr++;
		pwcs++;
d264 2
a265 2
	*s = src;
	return (nchr);
d335 4
a338 3
_citrus_utf8_ctype_wcsrtombs(char * __restrict s,
			     const wchar_t ** __restrict pwcs, size_t n,
			     void * __restrict pspriv)
d342 1
a342 3
	const wchar_t *src;
	size_t nbytes;
	size_t nb;
d351 4
a354 6
	src = *pwcs;
	nbytes = 0;

	if (s == NULL) {
		for (;;) {
			if (0 <= *src && *src < 0x80)
d356 7
a362 7
				nb = 1;
			else {
				nb = _citrus_utf8_ctype_wcrtomb(buf, *src, us);
				if (nb == (size_t)-1) {
					/* Invalid character */
					return (nb);
				}
a363 5
			if (*src == L'\0') {
				return (nbytes + nb - 1);
			}
			src++;
			nbytes += nb;
d365 1
a365 1
		/*NOTREACHED*/
d368 3
a370 2
	while (n > 0) {
		if (0 <= *src && *src < 0x80) {
d372 7
a378 3
			nb = 1;
			*s = *src;
		} else if (n > (size_t)_CITRUS_UTF8_MB_CUR_MAX) {
d380 4
a383 4
			nb = _citrus_utf8_ctype_wcrtomb(s, *src, us);
			if (nb == (size_t)-1) {
				*pwcs = src;
				return (nb);
d386 5
a390 7
			/*
			 * May not be enough space; use temp. buffer.
			 */
			nb = _citrus_utf8_ctype_wcrtomb(buf, *src, us);
			if (nb == (size_t)-1) {
				*pwcs = src;
				return (nb);
d392 1
a392 2
			if (nb > n)
				/* MB sequence for character won't fit. */
d394 1
a394 5
			memcpy(s, buf, nb);
		}
		if (*src == L'\0') {
			*pwcs = NULL;
			return (nbytes + nb - 1);
a395 4
		src++;
		s += nb;
		n -= nb;
		nbytes += nb;
d397 2
a398 2
	*pwcs = src;
	return (nbytes);
@


1.3
log
@The UTF-8 decoder should not accept byte sequences which decode to unicode
code positions U+D800 to U+DFFF (UTF-16 surrogates), U+FFFE, and U+FFFF.

http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
http://unicode.org/faq/utf_bom.html#utf8-4

ok phessler, millert, miod, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.2 2010/07/29 00:50:10 stsp Exp $ */
d256 2
a257 1
			nb = _citrus_utf8_ctype_mbrtowc(pwcs, src, n, us);
@


1.2
log
@Remove stray newline, fix $OpenBSD$; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: citrus_utf8.c,v 1.1 2010/07/27 16:59:03 stsp Exp $ */
d161 8
@


1.1
log
@Replace the single-byte placeholders for the multi-byte/wide-character
conversion interfaces of libc (mbrtowc(3) and friends) with new
implementations that internally call an API based on NetBSD's citrus.
This allows us to support locales with multi-byte character encodings.

Provide two implementations of the citrus-based API: one based on the old
single-byte placeholders for use with our existing single-byte character
locales (C, ISO8859-*, KOI8, CP1251, etc.), and one that provides support
for UTF-8 encoded characters (code based on FreeBSD's implementation).

Install the en_US.UTF-8 ctype locale support file, and allow the UTF-8
ctype locale to be enabled via setlocale(3) (export LC_CTYPE='en_US.UTF-8').

A lot of programs, especially from ports, will now start using UTF-8 if the
UTF-8 locale is enabled. Use at your own risk, and please report any breakage.
Note that ncurses-based programs cannot display UTF-8 right now, this is being
worked on.

To prevent install media growth, add vfprintf(3) and mbrtowc(3) to libstubs.
The mbrtowc stub was copied unchanged from its old single-byte placeholder.
vfprintf.c doesn't need to be copied, just put in .PATH (hint by fgsch@@).

Testing by myself, naddy, sthen, nicm, espie, armani, Dmitrij D. Czarkoff.

ok matthieu espie millert sthen nicm deraadt
@
text
@d1 1
a1 2

/*	$OpenBSD$ */
@

