head	1.13;
access;
symbols
	OPENBSD_5_6:1.12.0.18
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.16
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.12
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.14
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.10
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.10
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.8
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.14
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.12
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.10
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.02.09.11.29.19;	author tedu;	state dead;
branches;
next	1.12;
commitid	tJvDnNK0SzmBKgN8;

1.12
date	2010.08.23.22.35.34;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.30.13.20.42;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.08.08.05.38;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2005.07.05.13.40.51;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.13.15.47.34;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.14.18.24.53;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.30.16.53.13;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.08.14.21.39.43;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.01.18.23.24.52;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.14.03.16.45;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.34.49;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.32;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.32;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@stop trying to workaround malloc bugs that have not existed for 20 years.
ok deraadt
@
text
@/*	$OpenBSD: ialloc.c,v 1.12 2010/08/23 22:35:34 millert Exp $ */
/*
** This file is in the public domain, so clarified as of
** 2006-07-17 by Arthur David Olson.
*/

/*LINTLIBRARY*/

#include "private.h"

#define nonzero(n)	(((n) == 0) ? 1 : (n))

char *
imalloc(n)
const int	n;
{
	return malloc((size_t) nonzero(n));
}

char *
icalloc(nelem, elsize)
int	nelem;
int	elsize;
{
	if (nelem == 0 || elsize == 0)
		nelem = elsize = 1;
	return calloc((size_t) nelem, (size_t) elsize);
}

void *
irealloc(pointer, size)
void * const	pointer;
const int	size;
{
	void *p;

	if (pointer == NULL)
		return imalloc(size);
	p = realloc((void *) pointer, (size_t) nonzero(size));
	if (p == NULL)
		free(pointer);
	return p;
}

char *
icatalloc(old, new)
char * const		old;
const char * const	new;
{
	register char *	result;
	register int	oldsize, newsize;

	newsize = (new == NULL) ? 0 : strlen(new);
	if (old == NULL)
		oldsize = 0;
	else if (newsize == 0)
		return old;
	else
		oldsize = strlen(old);
	if ((result = irealloc(old, oldsize + newsize + 1)) != NULL)
		if (new != NULL)
			(void) memcpy(result + oldsize, new, newsize + 1);
	return result;
}

char *
icpyalloc(string)
const char * const	string;
{
	return icatalloc((char *) NULL, string);
}

void
ifree(p)
char * const	p;
{
	if (p != NULL)
		(void) free(p);
}

void
icfree(p)
char * const	p;
{
	if (p != NULL)
		(void) free(p);
}
@


1.12
log
@update to tzcode2010k from elsie.nci.nih.gov; OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ialloc.c,v 1.11 2007/06/30 13:20:42 millert Exp $ */
@


1.11
log
@Update to tzcode2007f from elsie.nci.nih.gov
@
text
@d1 1
a1 1
/*	$OpenBSD: ialloc.c,v 1.10 2005/08/08 08:05:38 espie Exp $ */
d4 1
a4 1
** Feb 14, 2003 by Arthur David Olson (arthur_david_olson@@nih.gov).
@


1.10
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d62 1
a62 1
			(void) strlcpy(result + oldsize, new, newsize + 1);
@


1.9
log
@Update to tzcode2005j.
@
text
@d1 1
a5 5

#if defined(LIBC_SCCS) && !defined(lint) && !defined(NOID)
static char elsieid[] = "@@(#)ialloc.c	8.29";
static char rcsid[] = "$OpenBSD: ialloc.c,v 1.8 2003/03/13 15:47:34 deraadt Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.8
log
@a few more strlcy; ok from beck & ho
@
text
@d8 1
a8 1
static char rcsid[] = "$OpenBSD: ialloc.c,v 1.7 2003/02/14 18:24:53 millert Exp $";
d44 1
a44 1
	if (p == NULL && pointer)
a55 1
	int size;
d64 1
a64 2
	size = oldsize + newsize + 1;
	if ((result = irealloc(old, size)) != NULL)
a66 2
	else
		free(old);
@


1.7
log
@license clarifications; arthur_david_olson@@nih.gov
@
text
@d8 1
a8 1
static char rcsid[] = "$OpenBSD: ialloc.c,v 1.6 2001/10/30 16:53:13 deraadt Exp $";
d56 1
d65 2
a66 1
	if ((result = irealloc(old, oldsize + newsize + 1)) != NULL)
d68 1
a68 1
			(void) strcpy(result + oldsize, new);
@


1.6
log
@correct realloc() misuse
@
text
@d1 5
d8 1
a8 1
static char rcsid[] = "$OpenBSD: ialloc.c,v 1.5 1998/08/14 21:39:43 deraadt Exp $";
@


1.5
log
@realloc repair
@
text
@d3 1
a3 1
static char rcsid[] = "$OpenBSD: ialloc.c,v 1.4 1998/01/18 23:24:52 millert Exp $";
d34 2
d38 4
a41 1
	return realloc((void *) pointer, (size_t) nonzero(size));
d57 2
a58 1
	else	oldsize = strlen(old);
@


1.4
log
@tzcode1998b from ftp://elsie.nci.nih.gov/pub
@
text
@d3 1
a3 1
static char rcsid[] = "$OpenBSD: ialloc.c,v 1.3 1997/01/14 03:16:45 millert Exp $";
d56 2
@


1.3
log
@Update to tzcode1996o + our fixes.  Fixes problem pointed out
by cross@@va.pubnix.com.
@
text
@d1 3
a3 6
#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char	elsieid[] = "@@(#)ialloc.c	8.28";
#else
static char rcsid[] = "$OpenBSD: ialloc.c,v 1.2 1996/08/19 08:34:49 tholo Exp $";
#endif
a10 7

char *	icalloc P((int nelem, int elsize));
char *	icatalloc P((char * old, const char * new));
char *	icpyalloc P((const char * string));
char *	imalloc P((int n));
void *	irealloc P((void * pointer, int size));
void	ifree P((char * pointer));
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d2 5
a6 1
static char rcsid[] = "$OpenBSD$";
@


1.1
log
@Initial revision
@
text
@d1 3
a3 7
/*	$NetBSD: ialloc.c,v 1.2 1995/03/10 18:12:38 jtc Exp $	*/

#ifndef lint
#ifndef NOID
static char	elsieid[] = "@@(#)ialloc.c	8.28";
#endif /* !defined NOID */
#endif /* !defined lint */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
