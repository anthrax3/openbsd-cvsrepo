head	1.23;
access;
symbols
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.16.0.18
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.16
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.12
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.10
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.16
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.12
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.14
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.10
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.8
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.6
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.4
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.14.0.4
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.7.0.20
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.18
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.16
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.14
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.12
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.10
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.8
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2015.10.24.18.13.18;	author guenther;	state Exp;
branches;
next	1.22;
commitid	3UUG5rCiAaQfZxGj;

1.22
date	2015.09.12.14.35.40;	author guenther;	state Exp;
branches;
next	1.21;
commitid	3aozKGzPDVlUxHqo;

1.21
date	2015.02.16.17.35.38;	author tedu;	state Exp;
branches;
next	1.20;
commitid	hGmApVtIoWcT7SuR;

1.20
date	2015.02.16.17.11.54;	author tedu;	state Exp;
branches;
next	1.19;
commitid	ixmRXbwUTO3BdBrW;

1.19
date	2015.02.09.14.52.28;	author tedu;	state Exp;
branches;
next	1.18;
commitid	93eVast0s79AHJL6;

1.18
date	2015.02.09.13.32.51;	author tedu;	state Exp;
branches;
next	1.17;
commitid	QYDQRaNlwjawD1Bd;

1.17
date	2015.02.09.08.25.11;	author tedu;	state Exp;
branches;
next	1.16;
commitid	1GKby7MIpIVNqvkA;

1.16
date	2010.08.23.22.35.34;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2007.02.06.19.35.16;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.18.21.54.17;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2005.08.08.08.05.38;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.05.13.40.51;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2005.03.06.01.40.05;	author cloder;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.02.12.25.52;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.28.19.44.11;	author dhartmei;	state Exp;
branches;
next	1.8;

1.8
date	2004.10.18.22.33.43;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.06.08.24.17;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.01.29.07.09.26;	author d;	state Exp;
branches;
next	1.5;

1.5
date	98.11.20.11.18.55;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.01.18.23.24.50;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.14.03.16.42;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.08.34.47;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.31;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Move #includes from private.h to the .c files that need them, getting rid of
several.  Switch from FILENAME_MAX to PATH_MAX (it's for open(), not fopen()).

ok deraadt@@ tedu@@ krw@@
@
text
@/*	$OpenBSD: asctime.c,v 1.22 2015/09/12 14:35:40 guenther Exp $ */
/*
** This file is in the public domain, so clarified as of
** 1996-06-05 by Arthur David Olson.
*/

/*
** Avoid the temptation to punt entirely to strftime;
** the output of strftime is supposed to be locale specific
** whereas the output of asctime is supposed to be constant.
*/

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include "private.h"
#include "tzfile.h"
#include "thread_private.h"

/*
** Some systems only handle "%.2d"; others only handle "%02d";
** "%02.2d" makes (most) everybody happy.
** At least some versions of gcc warn about the %02.2d;
** we conditionalize below to avoid the warning.
*/
/*
** All years associated with 32-bit time_t values are exactly four digits long;
** some years associated with 64-bit time_t values are not.
** Vintage programs are coded for years that are always four digits long
** and may assume that the newline always lands in the same place.
** For years that are less than four digits, we pad the output with
** leading zeroes to get the newline in the traditional place.
** The -4 ensures that we get four characters of output even if
** we call a strftime variant that produces fewer characters for some years.
** The ISO C 1999 and POSIX 1003.1-2004 standards prohibit padding the year,
** but many implementations pad anyway; most likely the standards are buggy.
*/
#define ASCTIME_FMT	"%.3s %.3s%3d %2.2d:%2.2d:%2.2d %-4s\n"

/*
** For years that are more than four digits we put extra spaces before the year
** so that code trying to overwrite the newline won't end up overwriting
** a digit within a year and truncating the year (operating on the assumption
** that no output is better than wrong output).
*/
#define ASCTIME_FMT_B	"%.3s %.3s%3d %2.2d:%2.2d:%2.2d     %s\n"

#define STD_ASCTIME_BUF_SIZE	26
/*
** Big enough for something such as
** ??? ???-2147483648 -2147483648:-2147483648:-2147483648     -2147483648\n
** (two three-character abbreviations, five strings denoting integers,
** seven explicit spaces, two explicit colons, a newline,
** and a trailing ASCII nul).
** The values above are for systems where an int is 32 bits and are provided
** as an example; the define below calculates the maximum for the system at
** hand.
*/
#define MAX_ASCTIME_BUF_SIZE	(2*3+5*INT_STRLEN_MAXIMUM(int)+7+2+1+1)

static char *
asctime3(const struct tm *timeptr, char *buf, int bufsize)
{
	static const char	wday_name[][4] = {
		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
	};
	static const char	mon_name[][4] = {
		"Jan", "Feb", "Mar", "Apr", "May", "Jun",
		"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
	};
	const char *	wn;
	const char *	mn;
	char		year[INT_STRLEN_MAXIMUM(int) + 2];
	int		len;

	if (timeptr == NULL) {
		errno = EINVAL;
		strlcpy(buf, "??? ??? ?? ??:??:?? ????\n", bufsize);
		return buf;
	}
	if (timeptr->tm_wday < 0 || timeptr->tm_wday >= DAYSPERWEEK)
		wn = "???";
	else
		wn = wday_name[timeptr->tm_wday];
	if (timeptr->tm_mon < 0 || timeptr->tm_mon >= MONSPERYEAR)
		mn = "???";
	else
		mn = mon_name[timeptr->tm_mon];
	/*
	** Use strftime's %Y to generate the year, to avoid overflow problems
	** when computing timeptr->tm_year + TM_YEAR_BASE.
	** Assume that strftime is unaffected by other out-of-range members
	** (e.g., timeptr->tm_mday) when processing "%Y".
	*/
	(void) strftime(year, sizeof year, "%Y", timeptr);
	len = snprintf(buf, bufsize,
	    ((strlen(year) <= 4) ? ASCTIME_FMT : ASCTIME_FMT_B),
	    wn, mn,
	    timeptr->tm_mday, timeptr->tm_hour,
	    timeptr->tm_min, timeptr->tm_sec,
	    year);
	if (len != -1 && len < bufsize) {
		return buf;
	} else {
		errno = EOVERFLOW;
		return NULL;
	}
}

/*
** A la ISO/IEC 9945-1, ANSI/IEEE Std 1003.1, 2004 Edition.
*/

char *
asctime_r(const struct tm *timeptr, char *buf)
{
	/*
	** P1003 8.3.5.2 says that asctime_r() can only assume at most
	** a 26 byte buffer.
	*/
	return asctime3(timeptr, buf, STD_ASCTIME_BUF_SIZE);
}
DEF_WEAK(asctime_r);

/*
** A la ISO/IEC 9945-1, ANSI/IEEE Std 1003.1, 2004 Edition.
*/

char *
asctime(const struct tm *timeptr)
{
	static char result[MAX_ASCTIME_BUF_SIZE];
	_THREAD_PRIVATE_KEY(asctime);
	char *resultp = (char *)_THREAD_PRIVATE(asctime, result, NULL);

	if (resultp == NULL)
		return NULL;
	else
		return asctime3(timeptr, resultp, sizeof(result));
}
DEF_STRONG(asctime);
@


1.22
log
@Wrap <time.h> so that internal calls go direct and symbols not in C99 are weak
Add prototypes to localtime.c for offtime(), time2posix(), posix2time() to
	reduce noise with -Wmissing-prototypes
Eliminate unnecessary #includes
@
text
@d1 1
a1 1
/*	$OpenBSD: asctime.c,v 1.21 2015/02/16 17:35:38 tedu Exp $ */
d13 3
@


1.21
log
@knf indents to give me a fighting chance at differentiating new blocks
from continuation lines, of which there are many
@
text
@d1 1
a1 1
/*	$OpenBSD: asctime.c,v 1.20 2015/02/16 17:11:54 tedu Exp $ */
d120 1
d138 1
@


1.20
log
@drop an ansi bomb on the function definitions
@
text
@d1 1
a1 1
/*	$OpenBSD: asctime.c,v 1.19 2015/02/09 14:52:28 tedu Exp $ */
d70 2
a71 2
	char			year[INT_STRLEN_MAXIMUM(int) + 2];
	int			len;
d80 2
a81 1
	else	wn = wday_name[timeptr->tm_wday];
d84 2
a85 1
	else	mn = mon_name[timeptr->tm_mon];
d94 5
a98 5
		((strlen(year) <= 4) ? ASCTIME_FMT : ASCTIME_FMT_B),
		wn, mn,
		timeptr->tm_mday, timeptr->tm_hour,
		timeptr->tm_min, timeptr->tm_sec,
		year);
@


1.19
log
@-       register int                    idays;  /* unsigned would be so 2003 */
+       int                     idays;  /* unsigned would be so 2003 */

register is so 1973
@
text
@d1 1
a1 1
/*	$OpenBSD: asctime.c,v 1.18 2015/02/09 13:32:51 tedu Exp $ */
d59 1
a59 4
asctime3(timeptr, buf, bufsize)
const struct tm *	timeptr;
char *				buf;
int				bufsize;
d110 1
a110 3
asctime_r(timeptr, buf)
const struct tm *	timeptr;
char *				buf;
d124 1
a124 2
asctime(timeptr)
const struct tm *	timeptr;
@


1.18
log
@move include lines around a bit
@
text
@d1 1
a1 1
/*	$OpenBSD: asctime.c,v 1.17 2015/02/09 08:25:11 tedu Exp $ */
d60 1
a60 1
register const struct tm *	timeptr;
d71 2
a72 2
	register const char *	wn;
	register const char *	mn;
d114 1
a114 1
register const struct tm *	timeptr;
@


1.17
log
@this removes just a few ifdef checks for things that should always be enabled,
and which we definitely don't want to workaround. no change in the compiled
code (yet).
some of these, like the first chunk are plain silly. the compiler used to
compile asctime has nothing to do with the format strings strftime should
support.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: asctime.c,v 1.16 2010/08/23 22:35:34 millert Exp $ */
a11 2

/*LINTLIBRARY*/
@


1.16
log
@update to tzcode2010k from elsie.nci.nih.gov; OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asctime.c,v 1.15 2007/02/06 19:35:16 millert Exp $ */
a36 1
#ifdef __GNUC__
d38 1
a38 3
#else /* !defined __GNUC__ */
#define ASCTIME_FMT	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d %-4s\n"
#endif /* !defined __GNUC__ */
a44 1
#ifdef __GNUC__
a45 3
#else /* !defined __GNUC__ */
#define ASCTIME_FMT_B	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d     %s\n"
#endif /* !defined __GNUC__ */
a104 1
#ifdef EOVERFLOW
a105 3
#else /* !defined EOVERFLOW */
		errno = EINVAL;
#endif /* !defined EOVERFLOW */
@


1.15
log
@Update to tzcode2007a.  This adds support for 64bit time_t in case
we need it in the future.  All of our platforms currently have 32bit
time_t types.  This also extends the timezone data file format to
support both 32bit and 64bit data.  The 64bit data is located after
the 32bit data so binaries linked with the older tzcode simply won't
look at it.  A version field in the file header is used to determine
whether the data file is the old or extended format.  OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asctime.c,v 1.14 2006/02/18 21:54:17 millert Exp $ */
d85 5
@


1.14
log
@Update to tzcode2006a; primarily just cast and const fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: asctime.c,v 1.13 2005/08/08 08:05:38 espie Exp $ */
d22 2
a23 1
** At least some versions of gcc warn about the %02.2d; ignore the warning.
d37 3
d41 1
d48 3
d52 1
@


1.13
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d4 1
a4 1
** 1996-06-05 by Arthur David Olson (arthur_david_olson@@nih.gov).
@


1.12
log
@Update to tzcode2005j.
@
text
@d1 1
a11 5

#if defined(LIBC_SCCS) && !defined(lint) && !defined(NOID)
static char elsieid[] = "@@(#)asctime.c	7.31";
static char rcsid[] = "$OpenBSD: asctime.c,v 1.11 2005/03/06 01:40:05 cloder Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.11
log
@Always remember to check snprintf return value for -1.
OK hshoexer, jsg, otto, krw
@
text
@d6 6
d13 2
a14 2
static char elsieid[] = "@@(#)asctime.c	7.22";
static char rcsid[] = "$OpenBSD: asctime.c,v 1.10 2005/03/02 12:25:52 millert Exp $";
a22 4
#if STRICTLY_STANDARD_ASCTIME
#define ASCTIME_FMT	"%.3s %.3s%3d %.2d:%.2d:%.2d %ld\n"
#define ASCTIME_FMT_B	ASCTIME_FMT
#else /* !STRICTLY_STANDARD_ASCTIME */
d34 5
a38 1
** spaces before the newline to get the newline in the traditional place.
d40 1
a40 1
#define ASCTIME_FMT	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d %-4ld\n"
d47 1
a47 2
#define ASCTIME_FMT_B	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d     %ld\n"
#endif /* !STRICTLY_STANDARD_ASCTIME */
d77 1
a77 1
	long			year;
d86 7
a92 1
	year = timeptr->tm_year + (long) TM_YEAR_BASE;
d94 1
a94 1
		((year >= -999 && year <= 9999) ? ASCTIME_FMT : ASCTIME_FMT_B),
@


1.10
log
@Explicitly leave room for the NUL byte in {wday,mon}_name; Francois Perrad
@
text
@d8 1
a8 1
static char rcsid[] = "$OpenBSD: asctime.c,v 1.9 2004/10/28 19:44:11 dhartmei Exp $";
d88 1
a88 1
	if (len < bufsize) {
@


1.9
log
@uses %ld, so pass the already present long instead of an int, should fix
PR 3970. ok miod@@, deraadt@@
@
text
@d8 1
a8 1
static char rcsid[] = "$OpenBSD: asctime.c,v 1.8 2004/10/18 22:33:43 millert Exp $";
d63 1
a63 1
	static const char	wday_name[][3] = {
d66 1
a66 1
	static const char	mon_name[][3] = {
@


1.8
log
@Update to tzcode2004e from elsie.nci.nih.gov
@
text
@d8 1
a8 1
static char rcsid[] = "$OpenBSD: asctime.c,v 1.7 2000/01/06 08:24:17 d Exp $";
d87 1
a87 1
		TM_YEAR_BASE + timeptr->tm_year);
@


1.7
log
@_THREAD_PRIVATE_* macros changed
@
text
@d7 2
a8 2
static char elsieid[] = "@@(#)asctime.c	7.9";
static char rcsid[] = "$OpenBSD: asctime.c,v 1.6 1999/01/29 07:09:26 d Exp $";
d17 4
d22 3
a24 1
** A la ISO/IEC 9945-1, ANSI/IEEE Std 1003.1, Second Edition, 1996-07-12.
d26 30
d57 2
a58 2
char *
asctime_r(timeptr, buf)
d61 1
d72 2
a73 1
	int size;
d81 3
a83 10
	/*
	** The X3J11-suggested format is
	**	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d %d\n"
	** Since the .2 in 02.2d is ignored, we drop it.
	*/
	/*
	 * P1003 8.3.5.2 says that asctime_r() can only assume at most
	 * a 26 byte buffer.  *XXX*
	 */
	size = snprintf(buf, 26, "%.3s %.3s%3d %02d:%02d:%02d %d\n",
d88 8
a95 1
	if (size >= 26)
d97 17
a113 1
	return buf;
d117 1
a117 1
** A la X3J11, with core dump avoidance.
d124 1
a124 2
	/* asctime_r won't exceed this buffer: */
	static char result[26];
d126 1
a126 1
	char *resultp = (char*) _THREAD_PRIVATE(asctime, result, NULL);
d131 1
a131 1
		return asctime_r(timeptr, resultp);
@


1.6
log
@tzcode1999a from ftp://elsie.nci.nih.gov/pub - merge with libc_r stuff
@
text
@d8 1
a8 1
static char rcsid[] = "$OpenBSD: asctime.c,v 1.5 1998/11/20 11:18:55 d Exp $";
d72 1
a72 1
	_THREAD_PRIVATE_KEY(asctime)
@


1.5
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d7 2
a8 2
static char elsieid[] = "@@(#)asctime.c	7.8";
static char rcsid[] = "$OpenBSD: asctime.c,v 1.4 1998/01/18 23:24:50 millert Exp $";
d18 1
a18 1
** A la X3J11, with core dump avoidance.
d22 1
a22 1
asctime_r(timeptr, result)
d24 1
a24 1
char *result;
a32 1

d52 1
a52 1
	size = snprintf(result, 26, "%.3s %.3s%3d %02d:%02d:%02d %d\n",
d59 1
a59 1
	return result;
d63 3
a65 5
 * Theoretically, the worst case string is of the form
 * "www mmm-2147483648 -2147483648:-2147483648:-2147483648 -2147483648\n"
 * but we only provide space for 26 since asctime_r won't use any more.
 * "www mmmddd hh:mm:ss yyyy\n"
 */
d70 1
a70 1

a79 1

@


1.4
log
@tzcode1998b from ftp://elsie.nci.nih.gov/pub
@
text
@d8 1
a8 1
static char rcsid[] = "$OpenBSD: asctime.c,v 1.3 1997/01/14 03:16:42 millert Exp $";
d15 1
d22 1
a22 1
asctime(timeptr)
d24 1
d33 1
a33 9
	/*
	** Big enough for something such as
	** ??? ???-2147483648 -2147483648:-2147483648:-2147483648 -2147483648\n
	** (two three-character abbreviations, five strings denoting integers,
	** three explicit spaces, two explicit colons, a newline,
	** and a trailing ASCII nul).
	*/
	static char		result[3 * 2 + 5 * INT_STRLEN_MAXIMUM(int) +
					3 + 2 + 1 + 1];
d36 1
d49 5
a53 1
	(void) sprintf(result, "%.3s %.3s%3d %02d:%02d:%02d %d\n",
d58 2
d62 22
@


1.3
log
@Update to tzcode1996o + our fixes.  Fixes problem pointed out
by cross@@va.pubnix.com.
@
text
@d6 3
a8 6
#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char	elsieid[] = "@@(#)asctime.c	7.8";
#else
static char rcsid[] = "$OpenBSD: asctime.c,v 1.2 1996/08/19 08:34:47 tholo Exp $";
#endif
@


1.2
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 5
d7 5
a11 1
static char rcsid[] = "$OpenBSD$";
@


1.1
log
@Initial revision
@
text
@d1 3
a3 7
/*	$NetBSD: asctime.c,v 1.2 1995/03/09 23:41:11 jtc Exp $	*/

#ifndef lint
#ifndef NOID
static char	elsieid[] = "@@(#)asctime.c	7.6";
#endif /* !defined NOID */
#endif /* !defined lint */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
