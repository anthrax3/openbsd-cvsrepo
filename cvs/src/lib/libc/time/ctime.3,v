head	1.44;
access;
symbols
	OPENBSD_6_1:1.44.0.6
	OPENBSD_6_1_BASE:1.44
	OPENBSD_6_0:1.44.0.4
	OPENBSD_6_0_BASE:1.44
	OPENBSD_5_9:1.44.0.2
	OPENBSD_5_9_BASE:1.44
	OPENBSD_5_8:1.43.0.10
	OPENBSD_5_8_BASE:1.43
	OPENBSD_5_7:1.43.0.2
	OPENBSD_5_7_BASE:1.43
	OPENBSD_5_6:1.43.0.6
	OPENBSD_5_6_BASE:1.43
	OPENBSD_5_5:1.43.0.4
	OPENBSD_5_5_BASE:1.43
	OPENBSD_5_4:1.40.0.2
	OPENBSD_5_4_BASE:1.40
	OPENBSD_5_3:1.38.0.2
	OPENBSD_5_3_BASE:1.38
	OPENBSD_5_2:1.37.0.8
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.6
	OPENBSD_5_0:1.37.0.4
	OPENBSD_5_0_BASE:1.37
	OPENBSD_4_9:1.37.0.2
	OPENBSD_4_9_BASE:1.37
	OPENBSD_4_8:1.36.0.8
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.36.0.4
	OPENBSD_4_7_BASE:1.36
	OPENBSD_4_6:1.36.0.6
	OPENBSD_4_6_BASE:1.36
	OPENBSD_4_5:1.36.0.2
	OPENBSD_4_5_BASE:1.36
	OPENBSD_4_4:1.35.0.4
	OPENBSD_4_4_BASE:1.35
	OPENBSD_4_3:1.35.0.2
	OPENBSD_4_3_BASE:1.35
	OPENBSD_4_2:1.34.0.2
	OPENBSD_4_2_BASE:1.34
	OPENBSD_4_1:1.33.0.2
	OPENBSD_4_1_BASE:1.33
	OPENBSD_4_0:1.32.0.2
	OPENBSD_4_0_BASE:1.32
	OPENBSD_3_9:1.31.0.4
	OPENBSD_3_9_BASE:1.31
	OPENBSD_3_8:1.31.0.2
	OPENBSD_3_8_BASE:1.31
	OPENBSD_3_7:1.29.0.2
	OPENBSD_3_7_BASE:1.29
	OPENBSD_3_6:1.28.0.6
	OPENBSD_3_6_BASE:1.28
	OPENBSD_3_5:1.28.0.4
	OPENBSD_3_5_BASE:1.28
	OPENBSD_3_4:1.28.0.2
	OPENBSD_3_4_BASE:1.28
	OPENBSD_3_3:1.25.0.2
	OPENBSD_3_3_BASE:1.25
	OPENBSD_3_2:1.24.0.8
	OPENBSD_3_2_BASE:1.24
	OPENBSD_3_1:1.24.0.6
	OPENBSD_3_1_BASE:1.24
	OPENBSD_3_0:1.24.0.4
	OPENBSD_3_0_BASE:1.24
	OPENBSD_2_9:1.24.0.2
	OPENBSD_2_9_BASE:1.24
	OPENBSD_2_8:1.23.0.2
	OPENBSD_2_8_BASE:1.23
	OPENBSD_2_7:1.22.0.2
	OPENBSD_2_7_BASE:1.22
	OPENBSD_2_6:1.15.0.2
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.44
date	2015.09.14.13.08.01;	author schwarze;	state Exp;
branches;
next	1.43;
commitid	YV9Btzibn39kPFq6;

1.43
date	2014.01.23.08.15.13;	author otto;	state Exp;
branches;
next	1.42;

1.42
date	2014.01.21.11.51.02;	author otto;	state Exp;
branches;
next	1.41;

1.41
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.40;

1.40
date	2013.07.17.05.42.11;	author schwarze;	state Exp;
branches;
next	1.39;

1.39
date	2013.06.05.03.39.23;	author tedu;	state Exp;
branches;
next	1.38;

1.38
date	2012.09.13.11.14.20;	author millert;	state Exp;
branches;
next	1.37;

1.37
date	2010.08.23.22.35.34;	author millert;	state Exp;
branches;
next	1.36;

1.36
date	2008.10.23.20.33.06;	author guenther;	state Exp;
branches;
next	1.35;

1.35
date	2008.01.07.01.09.37;	author millert;	state Exp;
branches;
next	1.34;

1.34
date	2007.05.31.19.19.34;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2007.02.06.19.35.16;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2006.07.23.09.11.04;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2005.07.22.03.23.37;	author jaredy;	state Exp;
branches;
next	1.30;

1.30
date	2005.07.05.13.40.51;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	2004.10.18.22.33.43;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2003.07.07.15.38.38;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2003.05.29.19.13.33;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2003.05.07.08.52.42;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.02.14.18.24.53;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2001.02.18.22.27.23;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2000.08.22.14.21.23;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2000.04.16.16.24.03;	author d;	state Exp;
branches;
next	1.21;

1.21
date	2000.04.15.02.15.26;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	2000.03.31.00.10.14;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2000.03.28.23.34.19;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2000.03.23.22.10.21;	author d;	state Exp;
branches;
next	1.17;

1.17
date	2000.03.06.21.47.27;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	99.11.15.07.45.57;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	99.07.07.14.22.25;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.07.02.17.04.16;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.05.16.19.55.44;	author alex;	state Exp;
branches;
next	1.12;

1.12
date	99.04.20.02.04.11;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.02.16.23.43.11;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	99.02.16.05.09.42;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.07.05.19.36.54;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.06.06.21.12.10;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	97.04.18.20.34.26;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.01.14.03.16.43;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.08.19.08.34.48;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.01.29.02.08.12;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.01.11.17.46.20;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.28.00.55.51;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.32;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.32;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.44
log
@use .Va for global variables, and .Vt where the type is included
@
text
@.\"	$OpenBSD: ctime.3,v 1.43 2014/01/23 08:15:13 otto Exp $
.\"
.\"
.Dd $Mdocdate: January 23 2014 $
.Dt CTIME 3
.Os
.Sh NAME
.Nm asctime ,
.Nm asctime_r ,
.Nm ctime ,
.Nm ctime_r ,
.Nm difftime ,
.Nm gmtime ,
.Nm gmtime_r ,
.Nm localtime ,
.Nm localtime_r ,
.Nm mktime ,
.Nm timegm ,
.Nm timelocal
.Nd convert date and time to ASCII
.Sh SYNOPSIS
.In sys/types.h
.In time.h
.Vt extern char *tzname[2] ;
.Ft "char *"
.Fn ctime "const time_t *clock"
.Ft "char *"
.Fn ctime_r "const time_t *clock" "char *buf"
.Ft double
.Fn difftime "time_t time1" "time_t time0"
.Ft "char *"
.Fn asctime "const struct tm *tm"
.Ft "char *"
.Fn asctime_r "const struct tm *tm" "char *buf"
.Ft "struct tm *"
.Fn localtime "const time_t *clock"
.Ft "struct tm *"
.Fn localtime_r "const time_t *clock" "struct tm *result"
.Ft "struct tm *"
.Fn gmtime "const time_t *clock"
.Ft "struct tm *"
.Fn gmtime_r "const time_t *clock" "struct tm *result"
.Ft time_t
.Fn mktime "struct tm *tm"
.Ft time_t
.Fn timegm "struct tm *tm"
.Ft time_t
.Fn timelocal "struct tm *tm"
.Sh DESCRIPTION
The
.Fn ctime
function converts a
.Li time_t ,
pointed to by
.Fa clock ,
representing the time in seconds since
00:00:00 UTC, 1970-01-01,
and returns a pointer to a
string of the form
.Pp
.Dl Thu Nov 24 18:22:48 1986\en
.Pp
Years requiring fewer than four characters are padded with leading zeroes.
For years longer than four characters, the string is of the form
.Pp
.Dl Thu Nov 24 18:22:48\ \ \ \ \ 81986\en
.Pp
with five spaces before the year.
These unusual formats are designed to make it less likely that older
software that expects exactly 26 bytes of output will mistakenly output
misleading values for out-of-range years.
.Pp
The
.Fn ctime_r
function converts the calendar time pointed to by
.Fa clock
to local time in exactly the same way as
.Fn ctime
and puts the string into the array pointed to by
.Fa buf
(which contains at least 26 bytes) and returns
.Fa buf .
Unlike
.Fn ctime ,
the thread-safe version
.Fn ctime_r
is not required to set
.Va tzname .
.Pp
The
.Fn localtime
and
.Fn gmtime
functions return pointers to
.Li tm
structures, described below.
.Fn localtime
corrects for the time zone and any time zone adjustments
(such as Daylight Saving Time in the United States).
After filling in the
.Li tm
structure,
.Fn localtime
sets the
.Fa tm_isdst Ns 'th
element of
.Va tzname
to a pointer to an
ASCII string that's the time zone abbreviation to be used with
the return value of
.Fn localtime .
.Pp
.Fn gmtime
converts to Coordinated Universal Time.
.Pp
The
.Fn localtime_r
and
.Fn gmtime_r
functions convert the calendar time pointed to by
.Fa clock
into a broken-down time in exactly the same way as their non-reentrant
counterparts,
.Fn localtime
and
.Fn gmtime ,
but instead store the result directly into the structure pointed to by
.Fa result .
Unlike
.Fn localtime ,
the reentrant version is not required to set
.Va tzname .
.Pp
.Fn asctime
converts a time value contained in a
.Li tm
structure to a string,
as shown in the above example,
and returns a pointer to the string.
.Fn asctime_r
uses the buffer pointed to by
.Fa buf
(which should contain at least 26 bytes) and then
returns
.Fa buf .
.Pp
.Fn mktime
converts the broken-down time,
expressed as local time,
in the structure pointed to by
.Fa tm
into a calendar time value with the same encoding as that of the values
returned by the
.Fn time
function.
The original values of the
.Fa tm_wday
and
.Fa tm_yday
components of the structure are ignored,
and the original values of the other components are not restricted
to their normal ranges.
(A positive or zero value for
.Fa tm_isdst
causes
.Fn mktime
to presume initially that summer time (for example, Daylight Saving Time
in the U.S.A.)\&
respectively,
is or is not in effect for the specified time.
A negative value for
.Fa tm_isdst
causes the
.Fn mktime
function to attempt to divine whether summer time is in effect
for the specified time; in this case it does not use a consistent
rule and may give a different answer when later
presented with the same argument.)
On successful completion, the values of the
.Fa tm_wday
and
.Fa tm_yday
components of the structure are set appropriately,
and the other components are set to represent the specified calendar time,
but with their values forced to their normal ranges; the final value of
.Fa tm_mday
is not set until
.Fa tm_mon
and
.Fa tm_year
are determined.
.Fn mktime
returns the specified calendar time;
if the calendar time cannot be represented,
it returns \-1.
.Pp
.Fn timelocal
is a deprecated interface that is equivalent to calling
.Fn mktime
with a negative value for
.Fa tm_isdst .
.Pp
.Fn timegm
is a deprecated interface that converts the broken-down time, as returned by
.Fn gmtime ,
into a calendar time value with the same encoding as that of the values
returned by the
.Fn time
function.
.Pp
.Fn difftime
returns the difference between two calendar times,
.Pf ( Fa time1 No \- Fa time0 ) ,
expressed in seconds.
.Pp
Declarations of all the functions and externals, and the
.Li tm
structure, are in the
.In time.h
header file.
The structure (of type)
.Li struct tm
includes the following fields:
.Bd -literal -offset indent
	int tm_sec;	/* seconds (0 \- 60) */
	int tm_min;	/* minutes (0 \- 59) */
	int tm_hour;	/* hours (0 \- 23) */
	int tm_mday;	/* day of month (1 \- 31) */
	int tm_mon;	/* month of year (0 \- 11) */
	int tm_year;	/* year \- 1900 */
	int tm_wday;	/* day of week (Sunday = 0) */
	int tm_yday;	/* day of year (0 \- 365) */
	int tm_isdst;	/* is summer time in effect? */
	long tm_gmtoff;	/* offset from UTC in seconds */
	char *tm_zone;	/* abbreviation of timezone name */
.Ed
.Pp
The
.Fa tm_zone
and
.Fa tm_gmtoff
fields exist, and are filled in by
.Fn mktime ,
.Fn localtime ,
.Fn timegm ,
and
.Fn gmtime ,
but are not standardized.
There is no guarantee that these fields will continue to exist
in this form and they may be altered or removed in a future release.
.Pp
.Fa tm_isdst
is non-zero if summer time is in effect.
.Pp
.Fa tm_gmtoff
is the offset (in seconds) of the time represented
from UTC, with positive values indicating east
of the Prime Meridian.
.Sh RETURN VALUES
The functions
.Fn ctime ,
.Fn ctime_r ,
.Fn asctime ,
.Fn asctime_r ,
.Fn localtime ,
.Fn localtime_r ,
.Fn gmtime
and
.Fn gmtime_r
return NULL on error.
The function
.Fn mktime
returns \-1 on error.
.Sh FILES
.Bl -tag -width "/usr/share/zoneinfo/posixrules" -compact
.It Pa /usr/share/zoneinfo
time zone information directory
.It Pa /etc/localtime
local time zone file
.It Pa /usr/share/zoneinfo/posixrules
used with POSIX-style TZ's
.It Pa /usr/share/zoneinfo/GMT
for UTC leap seconds
.El
.Pp
If
.Pa /usr/share/zoneinfo/GMT
is absent,
UTC leap seconds are loaded from
.Pa /usr/share/zoneinfo/posixrules .
.Sh SEE ALSO
.Xr getenv 3 ,
.Xr strftime 3 ,
.Xr time 3 ,
.Xr tzset 3 ,
.Xr tzfile 5 ,
.Xr zic 8
.Sh HISTORY
A
.Fn ctime
function first appeared in
.At v1 .
.Sh NOTES
The return values
of the non re-entrant functions
point to static data;
the data is overwritten by each call.
The
.Fa tm_zone
field of a returned
.Li struct tm
points to a static array of characters, which
will also be overwritten at the next call
(and by calls to
.Xr tzset 3 ) .
.Pp
.Fn asctime
and
.Fn ctime
behave strangely for years before 1000 or after 9999.
The 1989 and 1999 editions of the C Standard say
that years from \-99 through 999 are converted without
extra spaces, but this conflicts with longstanding
tradition and with this implementation.
Traditional implementations of these two functions are
restricted to years in the range 1900 through 2099.
To avoid this portability mess, new programs should use
.Fn strftime
instead.
.Pp
The default system time zone may be set by running
.Dq Li zic -l timezone
as the superuser.
.Pp
Avoid using out-of-range values with
.Fn mktime
when setting up lunch with promptness sticklers in Riyadh.
.\" This file is in the public domain, so clarified as of
.\" 2009-05-17 by Arthur David Olson.
@


1.43
log
@also document that ctime* and asctime* can return NULL; ok deraadt@@, millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.42 2014/01/21 11:51:02 otto Exp $
d4 1
a4 1
.Dd $Mdocdate: January 21 2014 $
d24 1
a24 2
.Pp
.Fd extern char *tzname[2];
d88 1
a88 1
.Fa tzname .
d107 1
a107 1
.Fa tzname
d132 1
a132 1
.Fa tzname .
@


1.42
log
@document return values; ok deraadt@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.41 2014/01/21 03:15:45 schwarze Exp $
d262 4
@


1.41
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.40 2013/07/17 05:42:11 schwarze Exp $
d4 1
a4 1
.Dd $Mdocdate: July 17 2013 $
d260 11
@


1.40
log
@more library history
facts checked by sobrado@@
style tweaks and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.39 2013/06/05 03:39:23 tedu Exp $
d4 1
a4 1
.Dd $Mdocdate: June 5 2013 $
d220 1
a220 1
.Aq Pa time.h
@


1.39
log
@Use the fancy .In macro for includes. From Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.38 2012/09/13 11:14:20 millert Exp $
d4 1
a4 1
.Dd $Mdocdate: September 13 2012 $
d284 5
@


1.38
log
@Update to tzcode2012f.  Now that tzcode is in git there are no moe
SCCS ids.  No actual code changes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.37 2010/08/23 22:35:34 millert Exp $
d4 1
a4 1
.Dd $Mdocdate: August 23 2010 $
d22 2
a23 2
.Fd #include <sys/types.h>
.Fd #include <time.h>
@


1.37
log
@update to tzcode2010k from elsie.nci.nih.gov; OK miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.36 2008/10/23 20:33:06 guenther Exp $
d4 1
a4 1
.Dd $Mdocdate: October 23 2008 $
a318 1
.\" based on @@(#)newctime.3	8.3
@


1.36
log
@Reword description of tm_zone and tm_gmtoff fields
Prompted by millert@@; ok millert@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.35 2008/01/07 01:09:37 millert Exp $
d4 1
a4 1
.Dd $Mdocdate: January 7 2008 $
d319 1
a319 1
.\" based on @@(#)newctime.3	8.2
d321 1
a321 1
.\" 2003-02-14 by Arthur David Olson (arthur_david_olson@@nih.gov).
@


1.35
log
@update to tzcode2007k from elsie.nci.nih.gov
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.34 2007/05/31 19:19:34 jmc Exp $
d4 1
a4 1
.Dd $Mdocdate: May 31 2007 $
d243 7
a249 3
fields exist, and are filled in, only if arrangements to do
so were made when the library containing these functions was
created.
d251 1
a251 1
in this form in future releases of this code.
@


1.34
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.33 2007/02/06 19:35:16 millert Exp $
d4 1
a4 1
.Dd $Mdocdate$
d177 3
a179 1
for the specified time.)
d315 1
a315 1
.\" based on @@(#)newctime.3	8.1
@


1.33
log
@Update to tzcode2007a.  This adds support for 64bit time_t in case
we need it in the future.  All of our platforms currently have 32bit
time_t types.  This also extends the timezone data file format to
support both 32bit and 64bit data.  The 64bit data is located after
the 32bit data so binaries linked with the older tzcode simply won't
look at it.  A version field in the file header is used to determine
whether the data file is the old or extended format.  OK miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.32 2006/07/23 09:11:04 jmc Exp $
d4 1
a4 1
.Dd February 16, 1999
@


1.32
log
@remove tzset(3) from SYNOPSIS: it has its own man page;
spotted by stevesk; ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.31 2005/07/22 03:23:37 jaredy Exp $
d313 1
a313 1
.\" based on @@(#)newctime.3	7.16
@


1.31
log
@- sync prototypes and header excerpts to reality
- punctuation, rewording, typos/spelling, macro, and layout fixes
- add crossrefs where relevant

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.30 2005/07/05 13:40:51 millert Exp $
a25 2
.Ft void
.Fn tzset "void"
d290 1
a290 1
.Fn tzset ) .
@


1.30
log
@Update to tzcode2005j.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.29 2004/10/18 22:33:43 millert Exp $
d154 1
a154 1
.Li tm
d171 1
a171 1
in the U.S.A.)
d235 1
a236 1
	long tm_gmtoff;	/* offset from UTC in seconds */
@


1.29
log
@Update to tzcode2004e from elsie.nci.nih.gov
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.28 2003/07/07 15:38:38 jmc Exp $
d66 1
a66 1
Years requiring fewer than four characters are padded with trailing spaces.
d72 1
a72 1
This unusual format is designed to make it less likely that older
d102 1
a102 1
(such as Daylight Saving Time in the U.S.A.).
@


1.28
log
@- remove some unnecessary quoting
- simplify a display
- escape en-dashes
- .Li Dq -> .Dq Li
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.27 2003/05/29 19:13:33 deraadt Exp $
d62 1
a62 2
26-character string
of the form
d66 9
a74 1
All the fields have constant width.
d140 1
a140 1
structure to a 26-character string,
d142 1
a142 2
and returns a pointer
to the string.
d294 14
d315 1
a315 1
.\" based on @@(#)newctime.3	7.14
@


1.27
log
@layout problems; jmc ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.26 2003/05/07 08:52:42 jmc Exp $
d64 2
a65 3
.Bd -literal -offset indent
Thu Nov 24 18:22:48 1986\en\0
.Ed
d101 1
a101 1
.Fa tm_isdst Ns No 'th
d208 1
a208 3
.Pf ( Fa time1
-
.Fa time0 ) ,
d220 11
a230 11
	int tm_sec;	/\(** seconds (0 - 60) \(**/
	int tm_min;	/\(** minutes (0 - 59) \(**/
	int tm_hour;	/\(** hours (0 - 23) \(**/
	int tm_mday;	/\(** day of month (1 - 31) \(**/
	int tm_mon;	/\(** month of year (0 - 11) \(**/
	int tm_year;	/\(** year \- 1900 \(**/
	int tm_wday;	/\(** day of week (Sunday = 0) \(**/
	int tm_yday;	/\(** day of year (0 - 365) \(**/
	int tm_isdst;	/\(** is summer time in effect? \(**/
	char \(**tm_zone;	/\(** abbreviation of timezone name \(**/
	long tm_gmtoff;	/\(** offset from UTC in seconds \(**/
d289 1
a289 1
.Li Dq zic -l timezone
@


1.26
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.25 2003/02/14 18:24:53 millert Exp $
d24 2
a25 1
.Ft extern char *tzname[2];
@


1.25
log
@license clarifications; arthur_david_olson@@nih.gov
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.24 2001/02/18 22:27:23 millert Exp $
d118 1
a118 1
into a broken-down time in exactly the same was as their non-reentrant
d189 1
a189 1
If the calendar time cannot be represented,
@


1.24
log
@fix typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.23 2000/08/22 14:21:23 millert Exp $
d298 2
@


1.23
log
@Quickly describe timelocal() and timegm() and note that they are
deprecated interfaces.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.22 2000/04/16 16:24:03 d Exp $
d84 1
a84 1
timelocalFa tzname .
@


1.22
log
@sync with ftp://elsie.nci.nih.gov/pub/tzcode2000c.tar.gz, millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.21 2000/04/15 02:15:26 aaron Exp $
d17 3
a19 1
.Nm mktime
d47 4
d84 1
a84 1
.Fa tzname .
d191 14
@


1.21
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.20 2000/03/31 00:10:14 millert Exp $
d26 1
a26 1
.Fn ctime "time_t *clock"
d28 1
a28 1
.Fn ctime_r "time_t *clock" "char *buf"
d95 1
a95 2
.Fa tm_isdst
'th
d277 1
a277 1
.\" based on @@(#)newctime.3	7.13
@


1.20
log
@Tell how to set the localtime link here too.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.19 2000/03/28 23:34:19 deraadt Exp $
d269 1
a269 2
.Fn tzset
).
@


1.19
log
@tzfile(5) not tzfil(5)
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.18 2000/03/23 22:10:21 d Exp $
d255 2
a256 1
.Xr tzfile 5
d271 4
@


1.18
log
@asctime_r, ctime_r, gmtime_r, localtime_r. ok aaron@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.17 2000/03/06 21:47:27 aaron Exp $
d255 1
a255 1
.Xr tzfil 5
@


1.17
log
@Various mdoc fixups.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.16 1999/11/15 07:45:57 deraadt Exp $
d9 1
d11 1
d14 1
d16 1
d27 2
d33 2
d38 2
d41 2
d64 17
d107 18
d132 6
d257 3
a259 1
The return values point to static data;
@


1.16
log
@typos
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.15 1999/07/07 14:22:25 aaron Exp $
d10 1
a10 1
.N difftime ,
d34 1
d36 2
a37 2
converts a
.Ft time_t ,
d39 1
a39 1
.Ft clock ,
d51 1
d55 2
a56 2
return pointers to
.Ft tm
d62 1
a62 1
.Ft tm
d66 1
a66 1
.Ft tm_isdst
d69 1
a69 1
.Ft tzname
d80 1
a80 1
.Ft tm
d90 1
a90 1
.Ft tm
d96 1
a96 1
.Ft tm_wday
d98 1
a98 1
.Ft tm_yday
d103 1
a103 1
.Ft tm_isdst
d111 1
a111 1
.Ft tm_isdst
d117 1
a117 1
.Ft tm_wday
d119 1
a119 1
.Ft tm_yday
d123 1
a123 1
.Ft tm_mday
d125 1
a125 1
.Ft tm_mon
d127 1
a127 1
.Ft tm_year
d136 1
a136 2
(
.Ft time1
d138 2
a139 2
.Ft time0
), expressed in seconds.
d142 1
a142 1
.Ft tm
d144 1
a144 1
.Ft <time.h>
d147 1
a147 1
.Ft struct tm
d164 1
a164 1
.Ft tm_zone
d166 1
a166 1
.Ft tm_gmtoff
d173 1
a173 1
.Ft tm_isdst
d176 1
a176 1
.Ft tm_gmtoff
d181 1
a181 1
.Bl -tag -width "/usr/share/zoneinfo/posixrules"
d207 1
a207 1
.Ft tm_zone
d209 1
a209 1
.Ft "struct tm"
@


1.15
log
@when using `-' as a negative sign, escape it with a backslash so troff knows
it's not supposed to be a hyphen/dash
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.14 1999/07/02 17:04:16 aaron Exp $
d45 1
a45 1
Thu Nov 24 18:22:48 1986\n\0
@


1.14
log
@.Dd should not be given abbreviated month names
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.13 1999/05/16 19:55:44 alex Exp $
d130 1
a130 1
it returns -1.
@


1.13
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.12 1999/04/20 02:04:11 aaron Exp $
d4 1
a4 1
.Dd Feb 16, 1999
@


1.12
log
@.Fn -> .Ft in SYNOPSIS for localtime() return type
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.11 1999/02/16 23:43:11 deraadt Exp $
d199 1
a200 1
.Xr time 3 ,
@


1.11
log
@mandoc version
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.10 1999/02/16 05:09:42 deraadt Exp $
d27 1
a27 1
.Fn "struct tm *"
@


1.10
log
@localtime is in /etc
@
text
@d1 38
a38 36
.\"	$OpenBSD: ctime.3,v 1.9 1998/07/05 19:36:54 millert Exp $
.TH CTIME 3
.SH NAME
asctime, ctime, difftime, gmtime, localtime, mktime \- convert date and time to ASCII
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <time.h>
.PP
.B extern char *tzname[2];
.PP
.B void tzset()
.PP
.B char *ctime(clock)
.B const time_t *clock;
.PP
.B double difftime(time1, time0)
.B time_t time1;
.B time_t time0;
.PP
.B char *asctime(tm)
.B const struct tm *tm;
.PP
.B struct tm *localtime(clock)
.B const time_t *clock;
.PP
.B struct tm *gmtime(clock)
.B const time_t *clock;
.PP
.B time_t mktime(tm)
.B struct tm *tm;
.fi
.SH DESCRIPTION
.I Ctime\^
converts a time_t, pointed to by
.IR clock ,
d44 1
a44 3
.br
.ce
.eo
d46 2
a47 2
.ec
.br
d49 2
a50 2
.PP
.IR Localtime\^
d52 5
a56 3
.I gmtime\^
return pointers to ``tm'' structures, described below.
.I Localtime\^
d59 4
a62 2
After filling in the ``tm'' structure,
.I localtime
d64 2
a65 1
.BR tm_isdst 'th
d67 1
a67 1
.B tzname
d70 4
a73 4
.IR localtime 's
return value.
.PP
.I Gmtime\^
d75 2
a76 2
.PP
.I Asctime\^
d78 2
a79 1
``tm'' structure to a 26-character string,
d83 2
a84 2
.PP
.I Mktime\^
d88 1
a88 1
.I tm
d91 1
a91 1
.I time
d94 1
a94 1
.B tm_wday
d96 1
a96 1
.B tm_yday
d101 1
a101 1
.B tm_isdst
d103 1
a103 1
.I mktime
d109 1
a109 1
.B tm_isdst
d111 1
a111 1
.I mktime
d115 1
a115 1
.B tm_wday
d117 1
a117 1
.B tm_yday
d121 1
a121 1
.B tm_mday
d123 1
a123 1
.B tm_mon
d125 1
a125 1
.B tm_year
d127 1
a127 1
.I Mktime\^
d130 3
a132 4
it returns
.BR -1 .
.PP
.I Difftime\^
d134 2
a135 1
.RI ( time1
d137 7
a143 6
.IR time0 ),
expressed in seconds.
.PP
Declarations of all the functions and externals, and the ``tm'' structure,
are in the
.B <time.h>\^
d146 1
a146 1
.B struct tm
d148 1
a148 4
.RS
.PP
.nf
.ta .5i +\w'long tm_gmtoff;\0\0'u
d160 2
a161 3
.fi
.RE
.PP
d163 1
a163 1
.I tm_zone
d165 1
a165 1
.I tm_gmtoff
d171 2
a172 2
.PP
.I Tm_isdst\^
d174 2
a175 2
.PP
.I Tm_gmtoff
d179 12
a190 10
.SH FILES
.ta \w'/usr/share/zoneinfo/posixrules\0\0'u
/usr/share/zoneinfo	time zone information directory
.br
/etc/localtime		local time zone file
.br
/usr/share/zoneinfo/posixrules	used with POSIX-style TZ's
.br
/usr/share/zoneinfo/GMT	for UTC leap seconds
.sp
d192 1
a192 1
.B /usr/share/zoneinfo/GMT
d195 8
a202 8
.BR /usr/share/zoneinfo/posixrules .
.SH SEE ALSO
getenv(3),
strftime(3),
tzset(3),
time(3),
tzfile(5)
.SH NOTES
d206 1
a206 1
.B tm_zone
d208 1
a208 1
.B "struct tm"
d212 3
a214 2
.IR tzset ).
.PP
d216 1
a216 1
.I mktime
d218 1
a218 1
.\" @@(#)newctime.3	7.13
@


1.9
log
@ctime takes a pointer to time_t not long.  Correct in prototype, wrong in description
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.8 1997/06/06 21:12:10 kstailey Exp $
d180 1
a180 1
/usr/share/zoneinfo/localtime	local time zone file
@


1.8
log
@Why on earth was libz.a mentioned here?
Removed "cc ... -lz".
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.7 1997/04/18 20:34:26 deraadt Exp $
d35 1
a35 1
converts a long integer, pointed to by
@


1.7
log
@move #includes to top; is
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.6 1997/01/14 03:16:43 millert Exp $
a31 2
.PP
.B cc ... -lz
@


1.6
log
@Update to tzcode1996o + our fixes.  Fixes problem pointed out
by cross@@va.pubnix.com.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.5 1996/08/19 08:34:48 tholo Exp $
d7 3
a13 2
.B #include <sys/types.h>
.PP
a19 2
.PP
.B #include <time.h>
@


1.5
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
.\"	$OpenBSD: ctime.3,v 1.9 1996/01/20 02:29:47 jtc Exp $
d34 1
d41 1
a41 1
00:00:00 UTC, January 1, 1970,
d215 1
a215 1
.\" @@(#)newctime.3	7.12
@


1.4
log
@new common tz code
@
text
@d1 1
a1 1
.\"	$NetBSD: ctime.3,v 1.9 1996/01/20 02:29:47 jtc Exp $
@


1.3
log
@from netbsd; sync with tzcode96a
@
text
@d1 1
a1 1
.\"	$NetBSD: ctime.3,v 1.8 1996/01/08 22:50:54 jtc Exp $
a58 7
Before doing so,
.I localtime\^
calls
.I tzset\^
(if
.I tzset\^
has not been called in the current process).
d214 1
a214 1
.\" @@(#)newctime.3	7.11
@


1.2
log
@update from NetBSD
@
text
@d1 1
a1 1
.\"	$NetBSD: ctime.3,v 1.6.2.1 1995/10/26 05:24:48 jtc Exp $
d202 1
d221 1
a221 1
.\" @@(#)newctime.3	7.9
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: ctime.3,v 1.6 1995/08/22 19:28:15 jtc Exp $
d202 2
a203 2
newtzset(3),
time(2),
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
