head	1.30;
access;
symbols
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.26.0.6
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.21.0.8
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.4
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.20.0.12
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.10
	OPENBSD_5_0:1.20.0.8
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.6
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.4
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.19.0.6
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.16.0.10
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.8
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.6
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.4
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.30
date	2016.09.21.04.38.57;	author guenther;	state Exp;
branches;
next	1.29;
commitid	pqjnYVtACzQ9ctai;

1.29
date	2015.12.25.19.10.29;	author mmcc;	state Exp;
branches;
next	1.28;
commitid	3TfB1fDcIwYGUko5;

1.28
date	2015.10.24.18.13.18;	author guenther;	state Exp;
branches;
next	1.27;
commitid	3UUG5rCiAaQfZxGj;

1.27
date	2015.09.12.14.35.40;	author guenther;	state Exp;
branches;
next	1.26;
commitid	3aozKGzPDVlUxHqo;

1.26
date	2015.02.16.17.11.54;	author tedu;	state Exp;
branches;
next	1.25;
commitid	ixmRXbwUTO3BdBrW;

1.25
date	2015.02.09.14.52.28;	author tedu;	state Exp;
branches;
next	1.24;
commitid	93eVast0s79AHJL6;

1.24
date	2015.02.09.14.00.03;	author tedu;	state Exp;
branches;
next	1.23;
commitid	d4VCCcG9HT8Wy2HB;

1.23
date	2015.02.09.13.32.51;	author tedu;	state Exp;
branches;
next	1.22;
commitid	QYDQRaNlwjawD1Bd;

1.22
date	2014.05.06.15.49.45;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2012.09.13.11.14.20;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2009.10.27.23.59.59;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.31.14.12.17;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2007.12.29.22.26.51;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.17.07.07.23;	author moritz;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.08.08.05.38;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2005.07.05.13.40.51;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2004.10.18.22.33.43;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.04.21.47.58;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.13.15.47.34;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.19.14.56.28;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.26.00.21.40;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.25.09.11.02;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.04.19.12.09;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.06.23.05.11;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.16.16.24.04;	author d;	state Exp;
branches;
next	1.5;

1.5
date	98.08.14.21.39.44;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.07.06.19.00.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.07.06.18.57.09;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.02.14.21.03.48;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	98.01.19.00.07.43;	author millert;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Delete casts to off_t and size_t that are implied by assignments
or prototypes.  Ditto for some of the char* and void* casts too.

verified no change to instructions on ILP32 (i386) and LP64 (amd64)
ok natano@@ abluhm@@ deraadt@@ millert@@
@
text
@/*	$OpenBSD: strftime.c,v 1.29 2015/12/25 19:10:29 mmcc Exp $ */
/*
** Copyright (c) 1989, 1993
**	The Regents of the University of California.  All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. Neither the name of the University nor the names of its contributors
**    may be used to endorse or promote products derived from this software
**    without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
** ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
** ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
** FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
** OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
** HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
** OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
** SUCH DAMAGE.
*/

#include <fcntl.h>
#include <locale.h>
#include <stdio.h>

#include "private.h"
#include "tzfile.h"

struct lc_time_T {
	const char *	mon[MONSPERYEAR];
	const char *	month[MONSPERYEAR];
	const char *	wday[DAYSPERWEEK];
	const char *	weekday[DAYSPERWEEK];
	const char *	X_fmt;
	const char *	x_fmt;
	const char *	c_fmt;
	const char *	am;
	const char *	pm;
	const char *	date_fmt;
};

#ifdef LOCALE_HOME
#include "sys/stat.h"
static struct lc_time_T		localebuf;
static struct lc_time_T *	_loc(void);
#define Locale	_loc()
#endif /* defined LOCALE_HOME */
#ifndef LOCALE_HOME
#define Locale	(&C_time_locale)
#endif /* !defined LOCALE_HOME */

static const struct lc_time_T	C_time_locale = {
	{
		"Jan", "Feb", "Mar", "Apr", "May", "Jun",
		"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
	}, {
		"January", "February", "March", "April", "May", "June",
		"July", "August", "September", "October", "November", "December"
	}, {
		"Sun", "Mon", "Tue", "Wed",
		"Thu", "Fri", "Sat"
	}, {
		"Sunday", "Monday", "Tuesday", "Wednesday",
		"Thursday", "Friday", "Saturday"
	},

	/* X_fmt */
	"%H:%M:%S",

	/*
	** x_fmt
	** C99 requires this format.
	** Using just numbers (as here) makes Quakers happier;
	** it's also compatible with SVR4.
	*/
	"%m/%d/%y",

	/*
	** c_fmt
	** C99 requires this format.
	** Previously this code used "%D %X", but we now conform to C99.
	** Note that
	**	"%a %b %d %H:%M:%S %Y"
	** is used by Solaris 2.3.
	*/
	"%a %b %e %T %Y",

	/* am */
	"AM",

	/* pm */
	"PM",

	/* date_fmt */
	"%a %b %e %H:%M:%S %Z %Y"
};

static char *	_add(const char *, char *, const char *);
static char *	_conv(int, const char *, char *, const char *);
static char *	_fmt(const char *, const struct tm *, char *, const char *,
			int *);
static char *	_yconv(int, int, int, int, char *, const char *);

extern char *	tzname[];

#define IN_NONE	0
#define IN_SOME	1
#define IN_THIS	2
#define IN_ALL	3

size_t
strftime(char *s, size_t maxsize, const char *format, const struct tm *t)
{
	char *	p;
	int	warn;

	tzset();
#ifdef LOCALE_HOME
	localebuf.mon[0] = 0;
#endif /* defined LOCALE_HOME */
	warn = IN_NONE;
	p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize, &warn);
	if (p == s + maxsize) {
		if (maxsize > 0)
			s[maxsize - 1] = '\0';
		return 0;
	}
	*p = '\0';
	return p - s;
}
DEF_STRONG(strftime);

static char *
_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim, int *warnp)
{
	for ( ; *format; ++format) {
		if (*format == '%') {
label:
			switch (*++format) {
			case '\0':
				--format;
				break;
			case 'A':
				pt = _add((t->tm_wday < 0 ||
					t->tm_wday >= DAYSPERWEEK) ?
					"?" : Locale->weekday[t->tm_wday],
					pt, ptlim);
				continue;
			case 'a':
				pt = _add((t->tm_wday < 0 ||
					t->tm_wday >= DAYSPERWEEK) ?
					"?" : Locale->wday[t->tm_wday],
					pt, ptlim);
				continue;
			case 'B':
				pt = _add((t->tm_mon < 0 ||
					t->tm_mon >= MONSPERYEAR) ?
					"?" : Locale->month[t->tm_mon],
					pt, ptlim);
				continue;
			case 'b':
			case 'h':
				pt = _add((t->tm_mon < 0 ||
					t->tm_mon >= MONSPERYEAR) ?
					"?" : Locale->mon[t->tm_mon],
					pt, ptlim);
				continue;
			case 'C':
				/*
				** %C used to do a...
				**	_fmt("%a %b %e %X %Y", t);
				** ...whereas now POSIX 1003.2 calls for
				** something completely different.
				** (ado, 1993-05-24)
				*/
				pt = _yconv(t->tm_year, TM_YEAR_BASE, 1, 0,
					pt, ptlim);
				continue;
			case 'c':
				{
				int warn2 = IN_SOME;

				pt = _fmt(Locale->c_fmt, t, pt, ptlim, &warn2);
				if (warn2 == IN_ALL)
					warn2 = IN_THIS;
				if (warn2 > *warnp)
					*warnp = warn2;
				}
				continue;
			case 'D':
				pt = _fmt("%m/%d/%y", t, pt, ptlim, warnp);
				continue;
			case 'd':
				pt = _conv(t->tm_mday, "%02d", pt, ptlim);
				continue;
			case 'E':
			case 'O':
				/*
				** C99 locale modifiers.
				** The sequences
				**	%Ec %EC %Ex %EX %Ey %EY
				**	%Od %oe %OH %OI %Om %OM
				**	%OS %Ou %OU %OV %Ow %OW %Oy
				** are supposed to provide alternate
				** representations.
				*/
				goto label;
			case 'e':
				pt = _conv(t->tm_mday, "%2d", pt, ptlim);
				continue;
			case 'F':
				pt = _fmt("%Y-%m-%d", t, pt, ptlim, warnp);
				continue;
			case 'H':
				pt = _conv(t->tm_hour, "%02d", pt, ptlim);
				continue;
			case 'I':
				pt = _conv((t->tm_hour % 12) ?
					(t->tm_hour % 12) : 12,
					"%02d", pt, ptlim);
				continue;
			case 'j':
				pt = _conv(t->tm_yday + 1, "%03d", pt, ptlim);
				continue;
			case 'k':
				/*
				** This used to be...
				**	_conv(t->tm_hour % 12 ?
				**		t->tm_hour % 12 : 12, 2, ' ');
				** ...and has been changed to the below to
				** match SunOS 4.1.1 and Arnold Robbins'
				** strftime version 3.0. That is, "%k" and
				** "%l" have been swapped.
				** (ado, 1993-05-24)
				*/
				pt = _conv(t->tm_hour, "%2d", pt, ptlim);
				continue;
#ifdef KITCHEN_SINK
			case 'K':
				/*
				** After all this time, still unclaimed!
				*/
				pt = _add("kitchen sink", pt, ptlim);
				continue;
#endif /* defined KITCHEN_SINK */
			case 'l':
				/*
				** This used to be...
				**	_conv(t->tm_hour, 2, ' ');
				** ...and has been changed to the below to
				** match SunOS 4.1.1 and Arnold Robbin's
				** strftime version 3.0. That is, "%k" and
				** "%l" have been swapped.
				** (ado, 1993-05-24)
				*/
				pt = _conv((t->tm_hour % 12) ?
					(t->tm_hour % 12) : 12,
					"%2d", pt, ptlim);
				continue;
			case 'M':
				pt = _conv(t->tm_min, "%02d", pt, ptlim);
				continue;
			case 'm':
				pt = _conv(t->tm_mon + 1, "%02d", pt, ptlim);
				continue;
			case 'n':
				pt = _add("\n", pt, ptlim);
				continue;
			case 'p':
				pt = _add((t->tm_hour >= (HOURSPERDAY / 2)) ?
					Locale->pm :
					Locale->am,
					pt, ptlim);
				continue;
			case 'R':
				pt = _fmt("%H:%M", t, pt, ptlim, warnp);
				continue;
			case 'r':
				pt = _fmt("%I:%M:%S %p", t, pt, ptlim, warnp);
				continue;
			case 'S':
				pt = _conv(t->tm_sec, "%02d", pt, ptlim);
				continue;
			case 's':
				{
					struct tm	tm;
					char		buf[INT_STRLEN_MAXIMUM(
								time_t) + 1];
					time_t		mkt;

					tm = *t;
					mkt = mktime(&tm);
					(void) snprintf(buf, sizeof buf,
					    "%ld", (long) mkt);
					pt = _add(buf, pt, ptlim);
				}
				continue;
			case 'T':
				pt = _fmt("%H:%M:%S", t, pt, ptlim, warnp);
				continue;
			case 't':
				pt = _add("\t", pt, ptlim);
				continue;
			case 'U':
				pt = _conv((t->tm_yday + DAYSPERWEEK -
					t->tm_wday) / DAYSPERWEEK,
					"%02d", pt, ptlim);
				continue;
			case 'u':
				/*
				** From Arnold Robbins' strftime version 3.0:
				** "ISO 8601: Weekday as a decimal number
				** [1 (Monday) - 7]"
				** (ado, 1993-05-24)
				*/
				pt = _conv((t->tm_wday == 0) ?
					DAYSPERWEEK : t->tm_wday,
					"%d", pt, ptlim);
				continue;
			case 'V':	/* ISO 8601 week number */
			case 'G':	/* ISO 8601 year (four digits) */
			case 'g':	/* ISO 8601 year (two digits) */
/*
** From Arnold Robbins' strftime version 3.0: "the week number of the
** year (the first Monday as the first day of week 1) as a decimal number
** (01-53)."
** (ado, 1993-05-24)
**
** From "http://www.ft.uni-erlangen.de/~mskuhn/iso-time.html" by Markus Kuhn:
** "Week 01 of a year is per definition the first week which has the
** Thursday in this year, which is equivalent to the week which contains
** the fourth day of January. In other words, the first week of a new year
** is the week which has the majority of its days in the new year. Week 01
** might also contain days from the previous year and the week before week
** 01 of a year is the last week (52 or 53) of the previous year even if
** it contains days from the new year. A week starts with Monday (day 1)
** and ends with Sunday (day 7). For example, the first week of the year
** 1997 lasts from 1996-12-30 to 1997-01-05..."
** (ado, 1996-01-02)
*/
				{
					int	year;
					int	base;
					int	yday;
					int	wday;
					int	w;

					year = t->tm_year;
					base = TM_YEAR_BASE;
					yday = t->tm_yday;
					wday = t->tm_wday;
					for ( ; ; ) {
						int	len;
						int	bot;
						int	top;

						len = isleap_sum(year, base) ?
							DAYSPERLYEAR :
							DAYSPERNYEAR;
						/*
						** What yday (-3 ... 3) does
						** the ISO year begin on?
						*/
						bot = ((yday + 11 - wday) %
							DAYSPERWEEK) - 3;
						/*
						** What yday does the NEXT
						** ISO year begin on?
						*/
						top = bot -
							(len % DAYSPERWEEK);
						if (top < -3)
							top += DAYSPERWEEK;
						top += len;
						if (yday >= top) {
							++base;
							w = 1;
							break;
						}
						if (yday >= bot) {
							w = 1 + ((yday - bot) /
								DAYSPERWEEK);
							break;
						}
						--base;
						yday += isleap_sum(year, base) ?
							DAYSPERLYEAR :
							DAYSPERNYEAR;
					}
#ifdef XPG4_1994_04_09
					if ((w == 52 &&
						t->tm_mon == TM_JANUARY) ||
						(w == 1 &&
						t->tm_mon == TM_DECEMBER))
							w = 53;
#endif /* defined XPG4_1994_04_09 */
					if (*format == 'V')
						pt = _conv(w, "%02d",
							pt, ptlim);
					else if (*format == 'g') {
						*warnp = IN_ALL;
						pt = _yconv(year, base, 0, 1,
							pt, ptlim);
					} else	pt = _yconv(year, base, 1, 1,
							pt, ptlim);
				}
				continue;
			case 'v':
				/*
				** From Arnold Robbins' strftime version 3.0:
				** "date as dd-bbb-YYYY"
				** (ado, 1993-05-24)
				*/
				pt = _fmt("%e-%b-%Y", t, pt, ptlim, warnp);
				continue;
			case 'W':
				pt = _conv((t->tm_yday + DAYSPERWEEK -
					(t->tm_wday ?
					(t->tm_wday - 1) :
					(DAYSPERWEEK - 1))) / DAYSPERWEEK,
					"%02d", pt, ptlim);
				continue;
			case 'w':
				pt = _conv(t->tm_wday, "%d", pt, ptlim);
				continue;
			case 'X':
				pt = _fmt(Locale->X_fmt, t, pt, ptlim, warnp);
				continue;
			case 'x':
				{
				int	warn2 = IN_SOME;

				pt = _fmt(Locale->x_fmt, t, pt, ptlim, &warn2);
				if (warn2 == IN_ALL)
					warn2 = IN_THIS;
				if (warn2 > *warnp)
					*warnp = warn2;
				}
				continue;
			case 'y':
				*warnp = IN_ALL;
				pt = _yconv(t->tm_year, TM_YEAR_BASE, 0, 1,
					pt, ptlim);
				continue;
			case 'Y':
				pt = _yconv(t->tm_year, TM_YEAR_BASE, 1, 1,
					pt, ptlim);
				continue;
			case 'Z':
#ifdef TM_ZONE
				if (t->TM_ZONE != NULL)
					pt = _add(t->TM_ZONE, pt, ptlim);
				else
#endif /* defined TM_ZONE */
				if (t->tm_isdst >= 0)
					pt = _add(tzname[t->tm_isdst != 0],
						pt, ptlim);
				/*
				** C99 says that %Z must be replaced by the
				** empty string if the time zone is not
				** determinable.
				*/
				continue;
			case 'z':
				{
				int		diff;
				char const *	sign;

				if (t->tm_isdst < 0)
					continue;
#ifdef TM_GMTOFF
				diff = t->TM_GMTOFF;
#else /* !defined TM_GMTOFF */
				/*
				** C99 says that the UTC offset must
				** be computed by looking only at
				** tm_isdst. This requirement is
				** incorrect, since it means the code
				** must rely on magic (in this case
				** altzone and timezone), and the
				** magic might not have the correct
				** offset. Doing things correctly is
				** tricky and requires disobeying C99;
				** see GNU C strftime for details.
				** For now, punt and conform to the
				** standard, even though it's incorrect.
				**
				** C99 says that %z must be replaced by the
				** empty string if the time zone is not
				** determinable, so output nothing if the
				** appropriate variables are not available.
				*/
				if (t->tm_isdst == 0)
#ifdef USG_COMPAT
					diff = -timezone;
#else /* !defined USG_COMPAT */
					continue;
#endif /* !defined USG_COMPAT */
				else
#ifdef ALTZONE
					diff = -altzone;
#else /* !defined ALTZONE */
					continue;
#endif /* !defined ALTZONE */
#endif /* !defined TM_GMTOFF */
				if (diff < 0) {
					sign = "-";
					diff = -diff;
				} else	sign = "+";
				pt = _add(sign, pt, ptlim);
				diff /= SECSPERMIN;
				diff = (diff / MINSPERHOUR) * 100 +
					(diff % MINSPERHOUR);
				pt = _conv(diff, "%04d", pt, ptlim);
				}
				continue;
			case '+':
				pt = _fmt(Locale->date_fmt, t, pt, ptlim,
					warnp);
				continue;
			case '%':
			/*
			** X311J/88-090 (4.12.3.5): if conversion char is
			** undefined, behavior is undefined. Print out the
			** character itself as printf(3) also does.
			*/
			default:
				break;
			}
		}
		if (pt == ptlim)
			break;
		*pt++ = *format;
	}
	return pt;
}

static char *
_conv(int n, const char *format, char *pt, const char *ptlim)
{
	char	buf[INT_STRLEN_MAXIMUM(int) + 1];

	(void) snprintf(buf, sizeof buf, format, n);
	return _add(buf, pt, ptlim);
}

static char *
_add(const char *str, char *pt, const char *ptlim)
{
	while (pt < ptlim && (*pt = *str++) != '\0')
		++pt;
	return pt;
}

/*
** POSIX and the C Standard are unclear or inconsistent about
** what %C and %y do if the year is negative or exceeds 9999.
** Use the convention that %C concatenated with %y yields the
** same output as %Y, and that %Y contains at least 4 bytes,
** with more only if necessary.
*/

static char *
_yconv(int a, int b, int convert_top, int convert_yy, char *pt, const char *ptlim)
{
	int	lead;
	int	trail;

#define DIVISOR	100
	trail = a % DIVISOR + b % DIVISOR;
	lead = a / DIVISOR + b / DIVISOR + trail / DIVISOR;
	trail %= DIVISOR;
	if (trail < 0 && lead > 0) {
		trail += DIVISOR;
		--lead;
	} else if (lead < 0 && trail > 0) {
		trail -= DIVISOR;
		++lead;
	}
	if (convert_top) {
		if (lead == 0 && trail < 0)
			pt = _add("-0", pt, ptlim);
		else	pt = _conv(lead, "%02d", pt, ptlim);
	}
	if (convert_yy)
		pt = _conv(((trail < 0) ? -trail : trail), "%02d", pt, ptlim);
	return pt;
}

#ifdef LOCALE_HOME
static struct lc_time_T *
_loc(void)
{
	static const char	locale_home[] = LOCALE_HOME;
	static const char	lc_time[] = "LC_TIME";
	static char *		locale_buf;

	int			fd;
	int			oldsun;	/* "...ain't got nothin' to do..." */
	int			len;
	char *			lbuf;
	char *			nlbuf;
	char *			name;
	char *			p;
	const char **		ap;
	const char *		plim;
	char			filename[PATH_MAX];
	struct stat		st;
	size_t			namesize;
	size_t			bufsize;

	/*
	** Use localebuf.mon[0] to signal whether locale is already set up.
	*/
	if (localebuf.mon[0])
		return &localebuf;
	name = setlocale(LC_TIME, (char *) NULL);
	if (name == NULL || *name == '\0')
		goto no_locale;
	/*
	** If the locale name is the same as our cache, use the cache.
	*/
	lbuf = locale_buf;
	if (lbuf != NULL && strcmp(name, lbuf) == 0) {
		p = lbuf;
		for (ap = (const char **) &localebuf;
			ap < (const char **) (&localebuf + 1);
				++ap)
					*ap = p += strlen(p) + 1;
		return &localebuf;
	}
	/*
	** Slurp the locale file into the cache.
	*/
	namesize = strlen(name) + 1;
	if (sizeof filename <
		((sizeof locale_home) + namesize + (sizeof lc_time)))
			goto no_locale;
	oldsun = 0;
	len = snprintf(filename, sizeof filename, "%s/%s/%s", locale_home,
	    name, lc_time);
	if (len < 0 || len >= sizeof filename)
		goto no_locale;
	fd = open(filename, O_RDONLY);
	if (fd < 0) {
		/*
		** Old Sun systems have a different naming and data convention.
		*/
		oldsun = 1;
		len = snprintf(filename, sizeof filename, "%s/%s/%s",
			locale_home, lc_time, name);
		if (len < 0 || len >= sizeof filename)
			goto no_locale;
		fd = open(filename, O_RDONLY);
		if (fd < 0)
			goto no_locale;
	}
	if (fstat(fd, &st) != 0)
		goto bad_locale;
	if (st.st_size <= 0)
		goto bad_locale;
	bufsize = namesize + st.st_size;
	locale_buf = NULL;
	nlbuf = realloc(lbuf, bufsize);
	if (nlbuf == NULL) {
		free(lbuf);
		lbuf = NULL;
		goto bad_locale;
	}
	lbuf = nlbuf;
	(void) strlcpy(lbuf, name, bufsize);
	p = lbuf + namesize;
	plim = p + st.st_size;
	if (read(fd, p, st.st_size) != st.st_size)
		goto bad_lbuf;
	if (close(fd) != 0)
		goto bad_lbuf;
	/*
	** Parse the locale file into localebuf.
	*/
	if (plim[-1] != '\n')
		goto bad_lbuf;
	for (ap = (const char **) &localebuf;
		ap < (const char **) (&localebuf + 1);
			++ap) {
				if (p == plim)
					goto bad_lbuf;
				*ap = p;
				while (*p != '\n')
					++p;
				*p++ = '\0';
	}
	if (oldsun) {
		/*
		** SunOS 4 used an obsolescent format; see localdtconv(3).
		** c_fmt had the ``short format for dates and times together''
		** (SunOS 4 date, "%a %b %e %T %Z %Y" in the C locale);
		** date_fmt had the ``long format for dates''
		** (SunOS 4 strftime %C, "%A, %B %e, %Y" in the C locale).
		** Discard the latter in favor of the former.
		*/
		localebuf.date_fmt = localebuf.c_fmt;
	}
	/*
	** Record the successful parse in the cache.
	*/
	locale_buf = lbuf;

	return &localebuf;

bad_lbuf:
	free(lbuf);
bad_locale:
	(void) close(fd);
no_locale:
	localebuf = C_time_locale;
	locale_buf = NULL;
	return &localebuf;
}
#endif /* defined LOCALE_HOME */
@


1.29
log
@Simplify allocation logic based on free and realloc's behavior on NULL.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.28 2015/10/24 18:13:18 guenther Exp $ */
d683 1
a683 1
	if (read(fd, p, (size_t) st.st_size) != st.st_size)
@


1.28
log
@Move #includes from private.h to the .c files that need them, getting rid of
several.  Switch from FILENAME_MAX to PATH_MAX (it's for open(), not fopen()).

ok deraadt@@ tedu@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.27 2015/09/12 14:35:40 guenther Exp $ */
d673 1
a673 1
	nlbuf = (lbuf == NULL) ? malloc(bufsize) : realloc(lbuf, bufsize);
d675 1
a675 2
		if (lbuf)
			free(lbuf);
@


1.27
log
@Wrap <time.h> so that internal calls go direct and symbols not in C99 are weak
Add prototypes to localtime.c for offtime(), time2posix(), posix2time() to
	reduce noise with -Wmissing-prototypes
Eliminate unnecessary #includes
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.26 2015/02/16 17:11:54 tedu Exp $ */
d33 1
d616 1
a616 1
	char			filename[FILENAME_MAX];
@


1.26
log
@drop an ansi bomb on the function definitions
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.25 2015/02/09 14:52:28 tedu Exp $ */
d139 1
@


1.25
log
@-       register int                    idays;  /* unsigned would be so 2003 */
+       int                     idays;  /* unsigned would be so 2003 */

register is so 1973
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.24 2015/02/09 14:00:03 tedu Exp $ */
d120 1
a120 5
strftime(s, maxsize, format, t)
char * const		s;
const size_t		maxsize;
const char * const	format;
const struct tm * const	t;
d141 1
a141 6
_fmt(format, t, pt, ptlim, warnp)
const char *		format;
const struct tm * const	t;
char *			pt;
const char * const	ptlim;
int *			warnp;
d546 1
a546 5
_conv(n, format, pt, ptlim)
const int		n;
const char * const	format;
char * const		pt;
const char * const	ptlim;
d555 1
a555 4
_add(str, pt, ptlim)
const char *		str;
char *			pt;
const char * const	ptlim;
d571 1
a571 7
_yconv(a, b, convert_top, convert_yy, pt, ptlim)
const int		a;
const int		b;
const int		convert_top;
const int		convert_yy;
char *			pt;
const char * const	ptlim;
@


1.24
log
@the one true type of time_t is a signed integer
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.23 2015/02/09 13:32:51 tedu Exp $ */
d595 2
a596 2
	register int	lead;
	register int	trail;
@


1.23
log
@move include lines around a bit
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.22 2014/05/06 15:49:45 tedu Exp $ */
d309 2
a310 5
					if (TYPE_SIGNED(time_t))
						(void) snprintf(buf, sizeof buf,
						    "%ld", (long) mkt);
					else	(void) snprintf(buf, sizeof buf,
						    "%lu", (unsigned long) mkt);
@


1.22
log
@enh@@google reported a warning in crufty y2k code. just delete it.
ok deraadt stsp
@
text
@d1 1
a1 3
/*	$OpenBSD: strftime.c,v 1.21 2012/09/13 11:14:20 millert Exp $ */
#include "private.h"

d31 4
a35 2
#include "fcntl.h"
#include "locale.h"
@


1.21
log
@Update to tzcode2012f.  Now that tzcode is in git there are no moe
SCCS ids.  No actual code changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.20 2009/10/27 23:59:59 deraadt Exp $ */
a113 4
#ifndef YEAR_2000_NAME
#define YEAR_2000_NAME	"CHECK_STRFTIME_FORMATS_FOR_TWO_DIGIT_YEARS"
#endif /* !defined YEAR_2000_NAME */

a134 16
#ifndef NO_RUN_TIME_WARNINGS_ABOUT_YEAR_2000_PROBLEMS_THANK_YOU
	if (warn != IN_NONE && getenv(YEAR_2000_NAME) != NULL) {
		(void) fprintf(stderr, "\n");
		if (format == NULL)
			(void) fprintf(stderr, "NULL strftime format ");
		else	(void) fprintf(stderr, "strftime format \"%s\" ",
				format);
		(void) fprintf(stderr, "yields only two digits of years in ");
		if (warn == IN_SOME)
			(void) fprintf(stderr, "some locales");
		else if (warn == IN_THIS)
			(void) fprintf(stderr, "the current locale");
		else	(void) fprintf(stderr, "all locales");
		(void) fprintf(stderr, "\n");
	}
#endif /* !defined NO_RUN_TIME_WARNINGS_ABOUT_YEAR_2000_PROBLEMS_THANK_YOU */
@


1.20
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.19 2008/10/31 14:12:17 millert Exp $ */
a4 3
** Based on the UCB version with the ID appearing below.
** This is ANSIish only when "multibyte character == plain character".
**
@


1.19
log
@Pass a pointer to warn2 so the warn2 == IN_ALL would not be an
always-false condition.  From FreeBSD (delphij).
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.18 2007/12/29 22:26:51 millert Exp $ */
a34 8

#if 0
#ifndef LIBC_SCCS
#ifndef lint
static const char	sccsid[] = "@@(#)strftime.c	5.4 (Berkeley) 3/14/89";
#endif /* !defined lint */
#endif /* !defined LIBC_SCCS */
#endif
@


1.18
log
@update to tzcode2007j from elsie.nci.nih.gov; mostly ANSIfication
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.17 2007/09/17 07:07:23 moritz Exp $ */
d230 1
a230 1
				pt = _fmt(Locale->c_fmt, t, pt, ptlim, warnp);
@


1.17
log
@Check snprintf(3) return value for error or truncation.
Mostly path construction, where truncation could be bad.

ok and input from deraadt@@ millert@@ ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strftime.c,v 1.16 2005/08/08 08:05:38 espie Exp $ */
d64 1
a64 1
static struct lc_time_T *	_loc P((void));
d117 5
a121 5
static char *	_add P((const char *, char *, const char *));
static char *	_conv P((int, const char *, char *, const char *));
static char *	_fmt P((const char *, const struct tm *, char *, const char *,
			int *));
static char *	_yconv P((int, int, int, int, char *, const char *));
d655 1
a655 1
_loc P((void))
@


1.16
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d663 1
d703 1
a703 1
	(void) snprintf(filename, sizeof filename, "%s/%s/%s", locale_home,
d705 2
d713 1
a713 1
		(void) snprintf(filename, sizeof filename, "%s/%s/%s",
d715 2
@


1.15
log
@Update to tzcode2005j.
@
text
@d1 1
a1 5
#if defined(LIBC_SCCS) && !defined(lint) && !defined(NOID)
static char elsieid[] = "@@(#)strftime.c	7.75";
static char *rcsid = "$OpenBSD: strftime.c,v 1.14 2004/10/18 22:33:43 millert Exp $";
#endif /* LIBC_SCCS and not lint */

@


1.14
log
@Update to tzcode2004e from elsie.nci.nih.gov
@
text
@a0 6
/*
** XXX To do: figure out correct (as distinct from standard-mandated)
** output for "two digits of year" and "century" formats when
** the year is negative or less than 100. --ado, 2004-09-09
*/

d2 2
a3 2
static char elsieid[] = "@@(#)strftime.c	7.64";
static char *rcsid = "$OpenBSD: strftime.c,v 1.13 2003/06/04 21:47:58 deraadt Exp $";
d106 1
a106 1
	**      "%a %b %d %H:%M:%S %Y"
d123 3
a125 4
static char *	_lconv P((long, const char *, char *, const char *));
static char *	_fmt P((const char *, const struct tm *, char *, const char *, int *));

size_t strftime P((char *, size_t, const char *, const struct tm *));
a132 1

d227 2
a228 3
				pt = _conv((int) ((t->tm_year +
					(long) TM_YEAR_BASE) / 100),
					"%02d", pt, ptlim);
d283 1
a283 1
				** strftime version 3.0.  That is, "%k" and
d303 1
a303 1
				** strftime version 3.0.  That is, "%k" and
d378 1
a378 1
** From Arnold Robbins' strftime version 3.0:  "the week number of the
d391 1
a391 1
** and ends with Sunday (day 7).  For example, the first week of the year
d396 2
a397 1
					long	year;
d403 1
a403 1
					year += TM_YEAR_BASE;
d411 1
a411 1
						len = isleap(year) ?
d430 1
a430 1
							++year;
d439 2
a440 2
						--year;
						yday += isleap(year) ?
d456 3
a458 3
						pt = _conv((int) (year % 100),
							"%02d", pt, ptlim);
					} else	pt = _lconv(year, "%04ld",
d496 2
a497 3
				pt = _conv((int) ((t->tm_year +
					(long) TM_YEAR_BASE) % 100),
					"%02d", pt, ptlim);
d500 2
a501 2
				pt = _lconv(t->tm_year + (long) TM_YEAR_BASE,
					"%04ld", pt, ptlim);
d531 1
a531 1
				** tm_isdst.  This requirement is
d536 1
a536 1
				** offset.  Doing things correctly is
d565 4
a568 3
				diff /= 60;
				pt = _conv((diff/60)*100 + diff%60,
					"%04d", pt, ptlim);
d578 1
a578 1
			** undefined, behavior is undefined.  Print out the
d606 3
a608 4
_lconv(n, format, pt, ptlim)
const long		n;
const char * const	format;
char * const		pt;
d611 4
a614 1
	char	buf[INT_STRLEN_MAXIMUM(long) + 1];
d616 7
a622 3
	(void) snprintf(buf, sizeof buf, format, n);
	return _add(buf, pt, ptlim);
}
d625 5
a629 2
_add(str, pt, ptlim)
const char *		str;
d633 21
a653 2
	while (pt < ptlim && (*pt = *str++) != '\0')
		++pt;
d702 1
a702 1
	if (sizeof filename  <
@


1.13
log
@mop up some more 3/4 license issues
@
text
@d1 6
d9 1
a9 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.12 2003/03/13 15:47:34 deraadt Exp $";
d129 1
d235 2
a236 1
				pt = _conv((t->tm_year + TM_YEAR_BASE) / 100,
d405 1
a405 1
					int	year;
d410 2
a411 1
					year = t->tm_year + TM_YEAR_BASE;
d453 5
a457 5
					if ((w == 52
					     && t->tm_mon == TM_JANUARY)
					    || (w == 1
						&& t->tm_mon == TM_DECEMBER))
						w = 53;
d464 3
a466 3
						pt = _conv(year % 100, "%02d",
							pt, ptlim);
					} else	pt = _conv(year, "%04d",
d504 2
a505 1
				pt = _conv((t->tm_year + TM_YEAR_BASE) % 100,
d509 2
a510 2
				pt = _conv(t->tm_year + TM_YEAR_BASE, "%04d",
					pt, ptlim);
d608 13
@


1.12
log
@a few more strlcy; ok from beck & ho
@
text
@d3 1
a3 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.11 2002/06/19 14:56:28 millert Exp $";
d23 1
a23 5
** 3. All advertising materials mentioning features or use of this software
**    must display the following acknowledgement:
**	This product includes software developed by the University of
**	California, Berkeley and its contributors.
** 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@Update license based on lite2 version
@
text
@d3 1
a3 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.10 2002/05/26 00:21:40 deraadt Exp $";
d695 1
a695 1
	(void) strcpy(lbuf, name);
@


1.10
log
@oops, major oops; moritz@@jodeit.org
@
text
@d3 1
a3 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.9 2002/05/25 09:11:02 deraadt Exp $";
d12 2
a13 2
** Copyright (c) 1989 The Regents of the University of California.
** All rights reserved.
d15 27
a41 11
** Redistribution and use in source and binary forms are permitted
** provided that the above copyright notice and this paragraph are
** duplicated in all such forms and that any documentation,
** advertising materials, and other materials related to such
** distribution and use acknowledge that the software was developed
** by the University of California, Berkeley.  The name of the
** University may not be used to endorse or promote products derived
** from this software without specific prior written permission.
** THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
@


1.9
log
@remaining easy snprintf conversions
@
text
@d3 1
a3 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.8 2002/04/04 19:12:09 millert Exp $";
d651 2
a652 1
	(void) snprintf(filename, "%s/%s/%s", locale_home, name, lc_time);
@


1.8
log
@Minor updates from tzcode2002c
@
text
@d3 1
a3 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.7 2000/09/06 23:05:11 millert Exp $";
d334 4
a337 4
						(void) sprintf(buf, "%ld",
							(long) mkt);
					else	(void) sprintf(buf, "%lu",
							(unsigned long) mkt);
d587 1
a587 1
	(void) sprintf(buf, format, n);
d651 1
a651 1
	(void) sprintf(filename, "%s/%s/%s", locale_home, name, lc_time);
d658 2
a659 2
		(void) sprintf(filename, "%s/%s/%s", locale_home,
			lc_time, name);
@


1.7
log
@Update to tzcode2000f from ftp://elsie.nci.nih.gov/pub/
@
text
@d2 2
a3 2
static char elsieid[] = "@@(#)strftime.c	7.62";
static char *rcsid = "$OpenBSD: strftime.c,v 1.6 2000/04/16 16:24:04 d Exp $";
d537 1
a537 1
#else /* defined USG_COMPAT */
a608 1
	static char		locale_buf_C[] = "C";
d647 2
a648 2
	if (sizeof(filename) <
		sizeof(locale_home) + namesize + sizeof(lc_time))
d670 1
a670 2
	nlbuf = (lbuf == NULL || lbuf == locale_buf_C) ?
		malloc(bufsize) : realloc(lbuf, bufsize);
d724 1
a724 1
	locale_buf = locale_buf_C;
@


1.6
log
@sync with ftp://elsie.nci.nih.gov/pub/tzcode2000c.tar.gz, millert@@ ok
@
text
@d2 2
a3 2
static char elsieid[] = "@@(#)strftime.c	7.58";
static char *rcsid = "$OpenBSD: strftime.c,v 1.5 1998/08/14 21:39:44 deraadt Exp $";
d239 1
a239 2
				** POSIX locale extensions, a la
				** Arnold Robbins' strftime version 3.0.
d241 1
a241 1
				**	%Ec %EC %Ex %Ey %EY
a245 1
				** (ado, 1993-05-24)
d251 3
d496 2
a497 2
				if (t->tm_isdst == 0 || t->tm_isdst == 1) {
					pt = _add(tzname[t->tm_isdst],
d499 57
a555 1
				} else  pt = _add("?", pt, ptlim);
d563 4
a566 4
			 * X311J/88-090 (4.12.3.5): if conversion char is
			 * undefined, behavior is undefined.  Print out the
			 * character itself as printf(3) also does.
			 */
@


1.5
log
@realloc repair
@
text
@d2 2
a3 2
static char elsieid[] = "@@(#)strftime.c	7.57";
static char *rcsid = "$OpenBSD: strftime.c,v 1.4 1998/07/06 19:00:38 millert Exp $";
d83 1
a83 2
	** Since the C language standard calls for
	** "date, using locale's date format," anything goes.
a85 4
	**
	** XXX--might it be better to use the year-2000 friendly
	**	%Y-%m-%d
	** here?
d91 5
a95 3
	** XXX--Changed by millert from "%D %X"
	**      to the more common "%a %b %d %H:%M:%S %Y"
	**      used by everyone else.
d97 1
a97 1
	"%a %b %d %H:%M:%S %Y",
@


1.4
log
@do the right thing if maxsiz == 0
@
text
@d3 1
a3 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.3 1998/07/06 18:57:09 millert Exp $";
d560 1
d617 1
a617 1
	lbuf = (lbuf == NULL || lbuf == locale_buf_C) ?
d619 4
a622 1
	if (lbuf == NULL)
d624 2
@


1.3
log
@Always NUL terminate buf even if there was not enough space to
write the whole time string.  XPG4.2 says
    "the contents of the array are indeterminate"
in this case so this is allowed, though obviously you can't rely
on this behavior if you care about portability...
@
text
@d3 1
a3 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.2 1998/02/14 21:03:48 millert Exp $";
d163 2
a164 1
		s[maxsize - 1] = '\0';
@


1.2
log
@Changed %c in the builtin C locale from "%D %X" to the more
common "%a %b %d %H:%M:%S %Y".  This fixes problems with calendar(1).
@
text
@d3 1
a3 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.1 1998/01/19 00:07:43 millert Exp $";
d162 2
a163 1
	if (p == s + maxsize)
d165 1
@


1.1
log
@use tzcode strftime(3) as it is kept up to date.
@
text
@d3 1
a3 1
static char *rcsid = "$OpenBSD: strftime.c,v 1.8 1997/07/25 20:30:14 mickey Exp $";
d96 3
a98 3
	** Note that
	**	"%a %b %d %H:%M:%S %Y"
	** is used by Solaris 2.3.
d100 1
a100 1
	"%D %X",	/* %m/%d/%y %H:%M:%S */
@
