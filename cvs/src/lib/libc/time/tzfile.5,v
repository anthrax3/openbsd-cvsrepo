head	1.15;
access;
symbols
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.10
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.6
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.10
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.8
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.4
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.12
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.8
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.10
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.6
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.26
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.24
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.22
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.20
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.18
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.16
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.14
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.12
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.10
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.15
date	2015.03.14.22.15.09;	author millert;	state Exp;
branches;
next	1.14;
commitid	lhEn4AZOMpIZF7sD;

1.14
date	2012.09.13.11.14.20;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2010.08.23.22.35.34;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2008.01.07.01.09.37;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.31.19.19.34;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2007.02.06.19.35.16;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.18.21.54.17;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.07.09.13.35.21;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.05.25.00.49.42;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.01.29.07.04.05;	author d;	state Exp;
branches;
next	1.5;

1.5
date	98.01.18.23.24.59;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.14.03.16.51;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.08.19.08.34.52;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.10.28.00.55.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.32;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.32;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Do not reference tzfile.h since that is an internal header.
Be clear that "standard" byte order means big endian.
Update struct ttinfo.
@
text
@.\"	$OpenBSD: tzfile.5,v 1.14 2012/09/13 11:14:20 millert Exp $
.Dd $Mdocdate: September 13 2012 $
.Dt TZFILE 5
.Os
.Sh NAME
.Nm tzfile
.Nd time zone information
.Sh DESCRIPTION
The time zone information files used by
.Xr tzset 3
begin with the magic characters "TZif" to identify themselves as
time zone information files,
followed by a character identifying the version of the file's format
(as of 2005, either an ASCII NUL or a '2')
followed by fifteen bytes containing zeroes reserved for future use,
followed by six four-byte values of type
.Fa int
written in a
.Dq big endian
byte order
.Po
the most significant byte of the value is written first
.Pc .
These values are,
in order:
.Bl -tag -width "tzh_ttisgmtcnt"
.It Fa tzh_ttisgmtcnt
The number of UTC/local indicators stored in the file.
.It Fa tzh_ttisstdcnt
The number of standard/wall indicators stored in the file.
.It Fa tzh_leapcnt
The number of leap seconds for which data is stored in the file.
.It Fa tzh_timecnt
The number of "transition times" for which data is stored
in the file.
.It Fa tzh_typecnt
The number of "local time types" for which data is stored
in the file (must not be zero).
.It Fa tzh_charcnt
The number of characters of "time zone abbreviation strings"
stored in the file.
.El
.Pp
The above header is followed by
.Fa tzh_timecnt
four-byte values of type
.Fa long ,
sorted in ascending order.
These values are written in
.Dq standard
byte order.
Each is used as a transition time
.Pq as returned by Xr time 3
at which the rules for computing local time change.
Next come
.Fa tzh_timecnt
one-byte values of type
.Fa unsigned char ;
each one tells which of the different types of
.Dq local time
types
described in the file is associated with the same-indexed transition time.
These values serve as indices into an array of
.Fa ttinfo
structures (with
.Fa tzh_typecnt
entries) that appears next in the file;
these structures are defined as follows:
.Bd -literal -offset indent
.ta .5i +\w'unsigned int\0\0'u
struct ttinfo {
	long	tt_gmtoff;	/* UTC offset in seconds */
	int	tt_isdst;	/* used to set tm_isdst */
	int	tt_abbrind;	/* abbreviation list index */
};
.Ed
.Pp
Each structure is written as a four-byte value for
.Fa tt_gmtoff
of type
.Fa long ,
in
.Dq big endian
byte order, followed by a one-byte value for
.Fa tt_isdst
and a one-byte value for
.Fa tt_abbrind .
In each structure,
.Fa tt_gmtoff
gives the number of seconds to be added to UTC,
.Fa tt_isdst
tells whether
.Fa tm_isdst
should be set by
.Xr localtime 3
and
.Fa tt_abbrind
serves as an index into the array of time zone abbreviation characters
that follow the
.Fa ttinfo
structure(s) in the file.
.Pp
Then there are
.Fa tzh_leapcnt
pairs of four-byte values, written in standard byte order;
the first value of each pair gives the time
.Pq as returned by Xr time 3
at which a leap second occurs;
the second gives the
.Em total
number of leap seconds to be applied after the given time.
The pairs of values are sorted in ascending order by time.
.Pp
Then there are
.Fa tzh_ttisstdcnt
standard/wall indicators, each stored as a one-byte value;
they tell whether the transition times associated with local time types
were specified as standard time or wall clock time,
and are used when a time zone file is used in handling POSIX-style
time zone environment variables.
.Pp
Finally there are
.Fa tzh_ttisgmtcnt
UTC/local indicators, each stored as a one-byte value;
they tell whether the transition times associated with local time types
were specified as UTC or local time,
and are used when a time zone file is used in handling POSIX-style
time zone environment variables.
.Pp
.Xr localtime 3
uses the first standard-time
.Fa ttinfo
structure in the file,
or simply the first
.Fa ttinfo
structure in the absence of a standard-time structure,
if either
.Fa tzh_timecnt
is zero or the time argument is less than the first transition time recorded
in the file.
.Pp
For version-2-format time zone files,
the above header and data are followed by a second header and data,
identical in format except that
eight bytes are used for each transition time or leap second time.
After the second header and data comes a newline-enclosed,
POSIX-TZ-environment-variable-style string for use in handling instants
after the last transition time stored in the file
(with nothing between the newlines if there is no POSIX representation for
such instants).
.Sh SEE ALSO
.Xr ctime 3
.\" This file is in the public domain, so clarified as of
.\" 1996-06-05 by Arthur David Olson.
@


1.14
log
@Update to tzcode2012f.  Now that tzcode is in git there are no moe
SCCS ids.  No actual code changes.
@
text
@d1 2
a2 2
.\"	$OpenBSD: tzfile.5,v 1.13 2010/08/23 22:35:34 millert Exp $
.Dd $Mdocdate: August 23 2010 $
a7 2
.Sh SYNOPSIS
.Fd #include <tzfile.h>
d17 1
a17 1
.Fa long
d19 1
a19 1
.Dq standard
d22 1
a22 1
the high-order byte of the value is written first
d72 3
a74 3
	long	tt_gmtoff;
	int	tt_isdst;
	unsigned int	tt_abbrind;
d82 3
a84 1
in a standard byte order, followed by a one-byte value for
d143 1
a143 1
the above header and data is followed by a second header and data,
@


1.13
log
@update to tzcode2010k from elsie.nci.nih.gov; OK miod@@
@
text
@d1 2
a2 2
.\"	$OpenBSD: tzfile.5,v 1.12 2008/01/07 01:09:37 millert Exp $
.Dd $Mdocdate: January 7 2008 $
a152 1
.\" @@(#)tzfile.5	8.3
@


1.12
log
@update to tzcode2007k from elsie.nci.nih.gov
@
text
@d1 2
a2 2
.\"	$OpenBSD: tzfile.5,v 1.11 2007/05/31 19:19:34 jmc Exp $
.Dd $Mdocdate: May 31 2007 $
d153 1
a153 1
.\" @@(#)tzfile.5	8.2
@


1.11
log
@convert to new .Dd format;
@
text
@d1 2
a2 2
.\"	$OpenBSD: tzfile.5,v 1.10 2007/02/06 19:35:16 millert Exp $
.Dd $Mdocdate$
d67 3
a69 1
structures that appears next in the file;
d146 1
a146 1
After the second header and data comes a newline-encloded,
d153 1
a153 1
.\" @@(#)tzfile.5	8.1
@


1.10
log
@Update to tzcode2007a.  This adds support for 64bit time_t in case
we need it in the future.  All of our platforms currently have 32bit
time_t types.  This also extends the timezone data file format to
support both 32bit and 64bit data.  The 64bit data is located after
the 32bit data so binaries linked with the older tzcode simply won't
look at it.  A version field in the file header is used to determine
whether the data file is the old or extended format.  OK miod@@
@
text
@d1 2
a2 2
.\"	$OpenBSD: tzfile.5,v 1.9 2006/02/18 21:54:17 millert Exp $
.Dd May 24, 1999
@


1.9
log
@Update to tzcode2006a; primarily just cast and const fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tzfile.5,v 1.8 1999/07/09 13:35:21 aaron Exp $
d15 3
a17 1
followed by sixteen bytes reserved for future use,
d139 10
d151 1
a151 1
.\" @@(#)tzfile.5	7.11
@


1.8
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: tzfile.5,v 1.7 1999/05/25 00:49:42 aaron Exp $
d141 1
a141 1
.\" 1996-06-05 by Arthur David Olson (arthur_david_olson@@nih.gov).
@


1.7
log
@out with old macros, in with new mdoc; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: tzfile.5,v 1.6 1999/01/29 07:04:05 d Exp $
d18 1
a18 1
written in a 
@


1.6
log
@tzcode1999a from ftp://elsie.nci.nih.gov/pub
@
text
@d1 10
a10 8
.\"	$OpenBSD: tzfile.5,v 1.5 1998/01/18 23:24:59 millert Exp $
.TH TZFILE 5
.SH NAME
tzfile \- time zone information
.SH SYNOPSIS
.B
#include <tzfile.h>
.SH DESCRIPTION
d12 2
a13 2
.IR tzset (3)
begin with the magic characters "TZif" to identify then as
d17 7
a23 3
.BR long ,
written in a ``standard'' byte order
(the high-order byte of the value is written first).
d26 2
a27 2
.TP
.I tzh_ttisgmtcnt
d29 1
a29 2
.TP
.I tzh_ttisstdcnt
d31 1
a31 2
.TP
.I tzh_leapcnt
d33 1
a33 2
.TP
.I tzh_timecnt
d36 1
a36 2
.TP
.I tzh_typecnt
d39 1
a39 2
.TP
.I tzh_charcnt
d42 2
a43 1
.PP
d45 1
a45 1
.I tzh_timecnt
d47 1
a47 1
.BR long ,
d49 5
a53 3
These values are written in ``standard'' byte order.
Each is used as a transition time (as returned by
.IR time (3))
d56 1
a56 1
.I tzh_timecnt
d58 4
a61 2
.BR "unsigned char" ;
each one tells which of the different types of ``local time'' types
d64 1
a64 1
.I ttinfo
d67 1
a67 3
.in +.5i
.sp
.nf
d74 2
a75 3
.in -.5i
.fi
.sp
d77 1
a77 1
.I tt_gmtoff
d79 1
a79 1
.BR long ,
d81 1
a81 1
.I tt_isdst
d83 1
a83 1
.IR tt_abbrind .
d85 1
a85 1
.I tt_gmtoff
d87 1
a87 1
.I tt_isdst
d89 1
a89 1
.I tm_isdst
d91 1
a91 1
.I localtime (3)
d93 1
a93 1
.I tt_abbrind
d96 1
a96 1
.I ttinfo
d98 1
a98 1
.PP
d100 1
a100 1
.I tzh_leapcnt
d103 1
a103 2
(as returned by
.IR time(3))
d106 1
a106 1
.I total
d109 1
a109 1
.PP
d111 1
a111 1
.I tzh_ttisstdcnt
d117 1
a117 1
.PP
d119 1
a119 1
.I tzh_ttisgmtcnt
d125 2
a126 2
.PP
.I Localtime
d128 5
a132 5
.I ttinfo
structure in the file
(or simply the first
.I ttinfo
structure in the absence of a standard-time structure)
d134 1
a134 1
.I tzh_timecnt
d137 2
a138 2
.SH SEE ALSO
ctime(3)
@


1.5
log
@tzcode1998b from ftp://elsie.nci.nih.gov/pub
@
text
@d1 1
a1 1
.\"	$OpenBSD: tzfile.5,v 1.4 1997/01/14 03:16:51 millert Exp $
d13 1
a13 1
followed by bytes reserved for future use,
d137 1
a137 1
.\" @@(#)tzfile.5	7.10
@


1.4
log
@Update to tzcode1996o + our fixes.  Fixes problem pointed out
by cross@@va.pubnix.com.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tzfile.5,v 1.3 1996/08/19 08:34:52 tholo Exp $
d11 3
a13 1
begin with bytes reserved for future use,
d22 1
a22 1
The number of GMT/local indicators stored in the file.
d83 1
a83 1
gives the number of seconds to be added to GMT,
d118 1
a118 1
GMT/local indicators, each stored as a one-byte value;
d120 1
a120 1
were specified as GMT or local time,
d137 1
a137 1
.\" @@(#)tzfile.5	7.5
@


1.3
log
@Fix RCS ids
Make sure everything uses {SYS,}LIBC_SCCS properly
@
text
@d1 1
a1 1
.\"	$OpenBSD: tzfile.5,v 1.3.4.1 1995/10/26 05:24:50 jtc Exp $
d47 1
a47 1
.IR time (2))
d135 3
a137 1
.\" @@(#)tzfile.5	7.3
@


1.2
log
@update from NetBSD
@
text
@d1 1
a1 1
.\"	$NetBSD: tzfile.5,v 1.3.4.1 1995/10/26 05:24:50 jtc Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: tzfile.5,v 1.3 1995/03/10 18:21:29 jtc Exp $
d99 1
a99 1
.IR time(2))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
