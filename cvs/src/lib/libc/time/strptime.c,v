head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.8
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.4
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.12.0.10
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.10
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.22
date	2016.05.23.00.05.15;	author guenther;	state Exp;
branches;
next	1.21;
commitid	93KfkbbTTGrOENTw;

1.21
date	2015.09.12.14.35.40;	author guenther;	state Exp;
branches;
next	1.20;
commitid	3aozKGzPDVlUxHqo;

1.20
date	2015.04.07.01.49.11;	author millert;	state Exp;
branches;
next	1.19;
commitid	cPMYW1EESv2U9ONs;

1.19
date	2015.02.09.13.32.51;	author tedu;	state Exp;
branches;
next	1.18;
commitid	QYDQRaNlwjawD1Bd;

1.18
date	2014.10.11.02.21.27;	author doug;	state Exp;
branches;
next	1.17;
commitid	qSYFELpPL58q8ymQ;

1.17
date	2014.10.02.23.50.11;	author doug;	state Exp;
branches;
next	1.16;
commitid	J96DOVvcuU8GOz0b;

1.16
date	2014.02.13.23.16.03;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2012.01.16.17.42.45;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2011.01.19.16.50.14;	author landry;	state Exp;
branches;
next	1.13;

1.13
date	2010.11.08.19.16.16;	author jasper;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.26.05.42.05;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.08.08.05.38;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.15.19.01.58;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.20.16.50.18;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.24;	author millert;	state Exp;
branches
	1.8.6.1
	1.8.8.1;
next	1.7;

1.7
date	2001.08.23.16.32.19;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.08.15.23.20;	author d;	state Exp;
branches;
next	1.5;

1.5
date	98.04.25.08.08.25;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.03.17.09.04.51;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.03.15.23.31.00;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.03.15.06.49.01;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	98.02.04.22.22.43;	author deraadt;	state Exp;
branches;
next	;

1.8.6.1
date	2004.01.31.04.19.44;	author brad;	state Exp;
branches;
next	;

1.8.8.1
date	2004.01.31.04.16.05;	author brad;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Stop exposing <sys/localedef.h> and various symbols internal to the libc
locale implementation: _{Current,Default}*Locale, __[mn]locale_changed,
__mb_len_max_runtime

ok millert@@ schwarze@@ deraadt@@
@
text
@/*	$OpenBSD: strptime.c,v 1.21 2015/09/12 14:35:40 guenther Exp $ */
/*	$NetBSD: strptime.c,v 1.12 1998/01/20 21:39:40 mycroft Exp $	*/
/*-
 * Copyright (c) 1997, 1998, 2005, 2008 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code was contributed to The NetBSD Foundation by Klaus Klein.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <ctype.h>
#include <locale.h>
#include <string.h>
#include <time.h>

#include "localedef.h"
#include "private.h"
#include "tzfile.h"

#define	_ctloc(x)		(_CurrentTimeLocale->x)

/*
 * We do not implement alternate representations. However, we always
 * check whether a given modifier is allowed for a certain conversion.
 */
#define _ALT_E			0x01
#define _ALT_O			0x02
#define	_LEGAL_ALT(x)		{ if (alt_format & ~(x)) return (0); }

/*
 * We keep track of some of the fields we set in order to compute missing ones.
 */
#define FIELD_TM_MON	(1 << 0)
#define FIELD_TM_MDAY	(1 << 1)
#define FIELD_TM_WDAY	(1 << 2)
#define FIELD_TM_YDAY	(1 << 3)
#define FIELD_TM_YEAR	(1 << 4)

static char gmt[] = { "GMT" };
static char utc[] = { "UTC" };
/* RFC-822/RFC-2822 */
static const char * const nast[5] = {
       "EST",    "CST",    "MST",    "PST",    "\0\0\0"
};
static const char * const nadt[5] = {
       "EDT",    "CDT",    "MDT",    "PDT",    "\0\0\0"
};

static const int mon_lengths[2][MONSPERYEAR] = {
        { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
        { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
};

static	int _conv_num(const unsigned char **, int *, int, int);
static	int leaps_thru_end_of(const int y);
static	char *_strptime(const char *, const char *, struct tm *, int);
static	const u_char *_find_string(const u_char *, int *, const char * const *,
	    const char * const *, int);


char *
strptime(const char *buf, const char *fmt, struct tm *tm)
{
	return(_strptime(buf, fmt, tm, 1));
}
DEF_WEAK(strptime);

static char *
_strptime(const char *buf, const char *fmt, struct tm *tm, int initialize)
{
	unsigned char c;
	const unsigned char *bp, *ep;
	size_t len;
	int alt_format, i, offs;
	int neg = 0;
	static int century, relyear, fields;

	if (initialize) {
		century = TM_YEAR_BASE;
		relyear = -1;
		fields = 0;
	}

	bp = (const unsigned char *)buf;
	while ((c = *fmt) != '\0') {
		/* Clear `alternate' modifier prior to new conversion. */
		alt_format = 0;

		/* Eat up white-space. */
		if (isspace(c)) {
			while (isspace(*bp))
				bp++;

			fmt++;
			continue;
		}
				
		if ((c = *fmt++) != '%')
			goto literal;


again:		switch (c = *fmt++) {
		case '%':	/* "%%" is converted to "%". */
literal:
		if (c != *bp++)
			return (NULL);

		break;

		/*
		 * "Alternative" modifiers. Just set the appropriate flag
		 * and start over again.
		 */
		case 'E':	/* "%E?" alternative conversion modifier. */
			_LEGAL_ALT(0);
			alt_format |= _ALT_E;
			goto again;

		case 'O':	/* "%O?" alternative conversion modifier. */
			_LEGAL_ALT(0);
			alt_format |= _ALT_O;
			goto again;
			
		/*
		 * "Complex" conversion rules, implemented through recursion.
		 */
		case 'c':	/* Date and time, using the locale's format. */
			_LEGAL_ALT(_ALT_E);
			if (!(bp = _strptime(bp, _ctloc(d_t_fmt), tm, 0)))
				return (NULL);
			break;

		case 'D':	/* The date as "%m/%d/%y". */
			_LEGAL_ALT(0);
			if (!(bp = _strptime(bp, "%m/%d/%y", tm, 0)))
				return (NULL);
			break;

		case 'F':	/* The date as "%Y-%m-%d". */
			_LEGAL_ALT(0);
			if (!(bp = _strptime(bp, "%Y-%m-%d", tm, 0)))
				return (NULL);
			continue;

		case 'R':	/* The time as "%H:%M". */
			_LEGAL_ALT(0);
			if (!(bp = _strptime(bp, "%H:%M", tm, 0)))
				return (NULL);
			break;

		case 'r':	/* The time as "%I:%M:%S %p". */
			_LEGAL_ALT(0);
			if (!(bp = _strptime(bp, "%I:%M:%S %p", tm, 0)))
				return (NULL);
			break;

		case 'T':	/* The time as "%H:%M:%S". */
			_LEGAL_ALT(0);
			if (!(bp = _strptime(bp, "%H:%M:%S", tm, 0)))
				return (NULL);
			break;

		case 'X':	/* The time, using the locale's format. */
			_LEGAL_ALT(_ALT_E);
			if (!(bp = _strptime(bp, _ctloc(t_fmt), tm, 0)))
				return (NULL);
			break;

		case 'x':	/* The date, using the locale's format. */
			_LEGAL_ALT(_ALT_E);
			if (!(bp = _strptime(bp, _ctloc(d_fmt), tm, 0)))
				return (NULL);
			break;

		/*
		 * "Elementary" conversion rules.
		 */
		case 'A':	/* The day of week, using the locale's form. */
		case 'a':
			_LEGAL_ALT(0);
			for (i = 0; i < 7; i++) {
				/* Full name. */
				len = strlen(_ctloc(day[i]));
				if (strncasecmp(_ctloc(day[i]), bp, len) == 0)
					break;

				/* Abbreviated name. */
				len = strlen(_ctloc(abday[i]));
				if (strncasecmp(_ctloc(abday[i]), bp, len) == 0)
					break;
			}

			/* Nothing matched. */
			if (i == 7)
				return (NULL);

			tm->tm_wday = i;
			bp += len;
			fields |= FIELD_TM_WDAY;
			break;

		case 'B':	/* The month, using the locale's form. */
		case 'b':
		case 'h':
			_LEGAL_ALT(0);
			for (i = 0; i < 12; i++) {
				/* Full name. */
				len = strlen(_ctloc(mon[i]));
				if (strncasecmp(_ctloc(mon[i]), bp, len) == 0)
					break;

				/* Abbreviated name. */
				len = strlen(_ctloc(abmon[i]));
				if (strncasecmp(_ctloc(abmon[i]), bp, len) == 0)
					break;
			}

			/* Nothing matched. */
			if (i == 12)
				return (NULL);

			tm->tm_mon = i;
			bp += len;
			fields |= FIELD_TM_MON;
			break;

		case 'C':	/* The century number. */
			_LEGAL_ALT(_ALT_E);
			if (!(_conv_num(&bp, &i, 0, 99)))
				return (NULL);

			century = i * 100;
			break;

		case 'd':	/* The day of month. */
		case 'e':
			_LEGAL_ALT(_ALT_O);
			if (!(_conv_num(&bp, &tm->tm_mday, 1, 31)))
				return (NULL);
			fields |= FIELD_TM_MDAY;
			break;

		case 'k':	/* The hour (24-hour clock representation). */
			_LEGAL_ALT(0);
			/* FALLTHROUGH */
		case 'H':
			_LEGAL_ALT(_ALT_O);
			if (!(_conv_num(&bp, &tm->tm_hour, 0, 23)))
				return (NULL);
			break;

		case 'l':	/* The hour (12-hour clock representation). */
			_LEGAL_ALT(0);
			/* FALLTHROUGH */
		case 'I':
			_LEGAL_ALT(_ALT_O);
			if (!(_conv_num(&bp, &tm->tm_hour, 1, 12)))
				return (NULL);
			break;

		case 'j':	/* The day of year. */
			_LEGAL_ALT(0);
			if (!(_conv_num(&bp, &tm->tm_yday, 1, 366)))
				return (NULL);
			tm->tm_yday--;
			fields |= FIELD_TM_YDAY;
			break;

		case 'M':	/* The minute. */
			_LEGAL_ALT(_ALT_O);
			if (!(_conv_num(&bp, &tm->tm_min, 0, 59)))
				return (NULL);
			break;

		case 'm':	/* The month. */
			_LEGAL_ALT(_ALT_O);
			if (!(_conv_num(&bp, &tm->tm_mon, 1, 12)))
				return (NULL);
			tm->tm_mon--;
			fields |= FIELD_TM_MON;
			break;

		case 'p':	/* The locale's equivalent of AM/PM. */
			_LEGAL_ALT(0);
			/* AM? */
			len = strlen(_ctloc(am_pm[0]));
			if (strncasecmp(_ctloc(am_pm[0]), bp, len) == 0) {
				if (tm->tm_hour > 12)	/* i.e., 13:00 AM ?! */
					return (NULL);
				else if (tm->tm_hour == 12)
					tm->tm_hour = 0;

				bp += len;
				break;
			}
			/* PM? */
			len = strlen(_ctloc(am_pm[1]));
			if (strncasecmp(_ctloc(am_pm[1]), bp, len) == 0) {
				if (tm->tm_hour > 12)	/* i.e., 13:00 PM ?! */
					return (NULL);
				else if (tm->tm_hour < 12)
					tm->tm_hour += 12;

				bp += len;
				break;
			}

			/* Nothing matched. */
			return (NULL);

		case 'S':	/* The seconds. */
			_LEGAL_ALT(_ALT_O);
			if (!(_conv_num(&bp, &tm->tm_sec, 0, 61)))
				return (NULL);
			break;

		case 'U':	/* The week of year, beginning on sunday. */
		case 'W':	/* The week of year, beginning on monday. */
			_LEGAL_ALT(_ALT_O);
			/*
			 * XXX This is bogus, as we can not assume any valid
			 * information present in the tm structure at this
			 * point to calculate a real value, so just check the
			 * range for now.
			 */
			 if (!(_conv_num(&bp, &i, 0, 53)))
				return (NULL);
			 break;

		case 'w':	/* The day of week, beginning on sunday. */
			_LEGAL_ALT(_ALT_O);
			if (!(_conv_num(&bp, &tm->tm_wday, 0, 6)))
				return (NULL);
			fields |= FIELD_TM_WDAY;
			break;

		case 'u':	/* The day of week, monday = 1. */
			_LEGAL_ALT(_ALT_O);
			if (!(_conv_num(&bp, &i, 1, 7)))
				return (NULL);
			tm->tm_wday = i % 7;
			fields |= FIELD_TM_WDAY;
			continue;

		case 'g':	/* The year corresponding to the ISO week
				 * number but without the century.
				 */
			if (!(_conv_num(&bp, &i, 0, 99)))
				return (NULL);				
			continue;

		case 'G':	/* The year corresponding to the ISO week
				 * number with century.
				 */
			do
				bp++;
			while (isdigit(*bp));
			continue;

		case 'V':	/* The ISO 8601:1988 week number as decimal */
			if (!(_conv_num(&bp, &i, 0, 53)))
				return (NULL);
			continue;

		case 'Y':	/* The year. */
			_LEGAL_ALT(_ALT_E);
			if (!(_conv_num(&bp, &i, 0, 9999)))
				return (NULL);

			relyear = -1;
			tm->tm_year = i - TM_YEAR_BASE;
			fields |= FIELD_TM_YEAR;
			break;

		case 'y':	/* The year within the century (2 digits). */
			_LEGAL_ALT(_ALT_E | _ALT_O);
			if (!(_conv_num(&bp, &relyear, 0, 99)))
				return (NULL);
			break;

		case 'Z':
			tzset();
			if (strncmp((const char *)bp, gmt, 3) == 0) {
				tm->tm_isdst = 0;
#ifdef TM_GMTOFF
				tm->TM_GMTOFF = 0;
#endif
#ifdef TM_ZONE
				tm->TM_ZONE = gmt;
#endif
				bp += 3;
			} else if (strncmp((const char *)bp, utc, 3) == 0) {
				tm->tm_isdst = 0;
#ifdef TM_GMTOFF
				tm->TM_GMTOFF = 0;
#endif
#ifdef TM_ZONE
				tm->TM_ZONE = utc;
#endif
				bp += 3;
			} else {
				ep = _find_string(bp, &i,
					       	 (const char * const *)tzname,
					       	  NULL, 2);
				if (ep == NULL)
					return (NULL);

				tm->tm_isdst = i;
#ifdef TM_GMTOFF
				tm->TM_GMTOFF = -(timezone);
#endif
#ifdef TM_ZONE
				tm->TM_ZONE = tzname[i];
#endif
				bp = ep;
			}
			continue;

		case 'z':
			/*
			 * We recognize all ISO 8601 formats:
			 * Z	= Zulu time/UTC
			 * [+-]hhmm
			 * [+-]hh:mm
			 * [+-]hh
			 * We recognize all RFC-822/RFC-2822 formats:
			 * UT|GMT
			 *          North American : UTC offsets
			 * E[DS]T = Eastern : -4 | -5
			 * C[DS]T = Central : -5 | -6
			 * M[DS]T = Mountain: -6 | -7
			 * P[DS]T = Pacific : -7 | -8
			 *          Military
			 * [A-IL-M] = -1 ... -9 (J not used)
			 * [N-Y]  = +1 ... +12
			 */
			while (isspace(*bp))
				bp++;

			switch (*bp++) {
			case 'G':
				if (*bp++ != 'M')
					return NULL;
				/*FALLTHROUGH*/
			case 'U':
				if (*bp++ != 'T')
					return NULL;
				/*FALLTHROUGH*/
			case 'Z':
				tm->tm_isdst = 0;
#ifdef TM_GMTOFF
				tm->TM_GMTOFF = 0;
#endif
#ifdef TM_ZONE
				tm->TM_ZONE = utc;
#endif
				continue;
			case '+':
				neg = 0;
				break;
			case '-':
				neg = 1;
				break;
			default:
				--bp;
				ep = _find_string(bp, &i, nast, NULL, 4);
				if (ep != NULL) {
#ifdef TM_GMTOFF
					tm->TM_GMTOFF = -5 - i;
#endif
#ifdef TM_ZONE
					tm->TM_ZONE = (char *)nast[i];
#endif
					bp = ep;
					continue;
				}
				ep = _find_string(bp, &i, nadt, NULL, 4);
				if (ep != NULL) {
					tm->tm_isdst = 1;
#ifdef TM_GMTOFF
					tm->TM_GMTOFF = -4 - i;
#endif
#ifdef TM_ZONE
					tm->TM_ZONE = (char *)nadt[i];
#endif
					bp = ep;
					continue;
				}

				if ((*bp >= 'A' && *bp <= 'I') ||
				    (*bp >= 'L' && *bp <= 'Y')) {
#ifdef TM_GMTOFF
					/* Argh! No 'J'! */
					if (*bp >= 'A' && *bp <= 'I')
						tm->TM_GMTOFF =
						    ('A' - 1) - (int)*bp;
					else if (*bp >= 'L' && *bp <= 'M')
						tm->TM_GMTOFF = 'A' - (int)*bp;
					else if (*bp >= 'N' && *bp <= 'Y')
						tm->TM_GMTOFF = (int)*bp - 'M';
#endif
#ifdef TM_ZONE
					tm->TM_ZONE = NULL; /* XXX */
#endif
					bp++;
					continue;
				}
				return NULL;
			}
			offs = 0;
			for (i = 0; i < 4; ) {
				if (isdigit(*bp)) {
					offs = offs * 10 + (*bp++ - '0');
					i++;
					continue;
				}
				if (i == 2 && *bp == ':') {
					bp++;
					continue;
				}
				break;
			}
			switch (i) {
			case 2:
				offs *= 100;
				break;
			case 4:
				i = offs % 100;
				if (i >= 60)
					return NULL;
				/* Convert minutes into decimal */
				offs = (offs / 100) * 100 + (i * 50) / 30;
				break;
			default:
				return NULL;
			}
			if (neg)
				offs = -offs;
			tm->tm_isdst = 0;	/* XXX */
#ifdef TM_GMTOFF
			tm->TM_GMTOFF = offs;
#endif
#ifdef TM_ZONE
			tm->TM_ZONE = NULL;	/* XXX */
#endif
			continue;

		/*
		 * Miscellaneous conversions.
		 */
		case 'n':	/* Any kind of white-space. */
		case 't':
			_LEGAL_ALT(0);
			while (isspace(*bp))
				bp++;
			break;


		default:	/* Unknown/unsupported conversion. */
			return (NULL);
		}


	}

	/*
	 * We need to evaluate the two digit year spec (%y)
	 * last as we can get a century spec (%C) at any time.
	 */
	if (relyear != -1) {
		if (century == TM_YEAR_BASE) {
			if (relyear <= 68)
				tm->tm_year = relyear + 2000 - TM_YEAR_BASE;
			else
				tm->tm_year = relyear + 1900 - TM_YEAR_BASE;
		} else {
			tm->tm_year = relyear + century - TM_YEAR_BASE;
		}
		fields |= FIELD_TM_YEAR;
	}

	/* Compute some missing values when possible. */
	if (fields & FIELD_TM_YEAR) {
		const int year = tm->tm_year + TM_YEAR_BASE;
		const int *mon_lens = mon_lengths[isleap(year)];
		if (!(fields & FIELD_TM_YDAY) &&
		    (fields & FIELD_TM_MON) && (fields & FIELD_TM_MDAY)) {
			tm->tm_yday = tm->tm_mday - 1;
			for (i = 0; i < tm->tm_mon; i++)
				tm->tm_yday += mon_lens[i];
			fields |= FIELD_TM_YDAY;
		}
		if (fields & FIELD_TM_YDAY) {
			int days = tm->tm_yday;
			if (!(fields & FIELD_TM_WDAY)) {
				tm->tm_wday = EPOCH_WDAY +
				    ((year - EPOCH_YEAR) % DAYSPERWEEK) *
				    (DAYSPERNYEAR % DAYSPERWEEK) +
				    leaps_thru_end_of(year - 1) -
				    leaps_thru_end_of(EPOCH_YEAR - 1) +
				    tm->tm_yday;
				tm->tm_wday %= DAYSPERWEEK;
				if (tm->tm_wday < 0)
					tm->tm_wday += DAYSPERWEEK;
			}
			if (!(fields & FIELD_TM_MON)) {
				tm->tm_mon = 0;
				while (tm->tm_mon < MONSPERYEAR && days >= mon_lens[tm->tm_mon])
					days -= mon_lens[tm->tm_mon++];
			}
			if (!(fields & FIELD_TM_MDAY))
				tm->tm_mday = days + 1;
		}
	}

	return ((char *)bp);
}


static int
_conv_num(const unsigned char **buf, int *dest, int llim, int ulim)
{
	int result = 0;
	int rulim = ulim;

	if (**buf < '0' || **buf > '9')
		return (0);

	/* we use rulim to break out of the loop when we run out of digits */
	do {
		result *= 10;
		result += *(*buf)++ - '0';
		rulim /= 10;
	} while ((result * 10 <= ulim) && rulim && **buf >= '0' && **buf <= '9');

	if (result < llim || result > ulim)
		return (0);

	*dest = result;
	return (1);
}

static const u_char *
_find_string(const u_char *bp, int *tgt, const char * const *n1,
		const char * const *n2, int c)
{
	int i;
	unsigned int len;

	/* check full name - then abbreviated ones */
	for (; n1 != NULL; n1 = n2, n2 = NULL) {
		for (i = 0; i < c; i++, n1++) {
			len = strlen(*n1);
			if (strncasecmp(*n1, (const char *)bp, len) == 0) {
				*tgt = i;
				return bp + len;
			}
		}
	}

	/* Nothing matched */
	return NULL;
}

static int              
leaps_thru_end_of(const int y)
{
	return (y >= 0) ? (y / 4 - y / 100 + y / 400) :
		-(leaps_thru_end_of(-(y + 1)) + 1);
}
@


1.21
log
@Wrap <time.h> so that internal calls go direct and symbols not in C99 are weak
Add prototypes to localtime.c for offtime(), time2posix(), posix2time() to
	reduce noise with -Wmissing-prototypes
Eliminate unnecessary #includes
@
text
@d1 1
a1 1
/*	$OpenBSD: strptime.c,v 1.20 2015/04/07 01:49:11 millert Exp $ */
a30 1
#include <sys/localedef.h>
d36 1
@


1.20
log
@Add support for setting tm_zone now that we have the timezone symbol.
@
text
@d1 1
a1 1
/*	$OpenBSD: strptime.c,v 1.19 2015/02/09 13:32:51 tedu Exp $ */
d86 1
@


1.19
log
@move include lines around a bit
@
text
@d1 1
a1 1
/*	$OpenBSD: strptime.c,v 1.18 2014/10/11 02:21:27 doug Exp $ */
d37 1
d103 1
a103 1
	bp = (unsigned char *)buf;
d491 1
a491 1
					tm->TM_ZONE = __UNCONST(nast[i]);
d503 1
a503 1
					tm->TM_ZONE = __UNCONST(nadt[i]);
@


1.18
log
@Add UTC support to %Z conversion in strptime().

Patch from jmates at ee dot washington dot edu.

ok otto@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strptime.c,v 1.17 2014/10/02 23:50:11 doug Exp $ */
a2 1

d36 2
a37 1
#include <tzfile.h>
@


1.17
log
@Fix a crash when there is text after a failed %Z conversion in strptime.

jmates at ee dot washington dot edu reported this bug and provided a patch.
This is a slightly modified version of the patch that only contains the
bug fix.

ok millert@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strptime.c,v 1.16 2014/02/13 23:16:03 millert Exp $ */
a58 1
#ifdef TM_ZONE
a59 1
#endif
d408 9
@


1.16
log
@Fix logic bug; we can only infer tm_yday if both tm_mday and tm_mon
are set.  Adapted from a diff from David Higgs.  OK krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strptime.c,v 1.15 2012/01/16 17:42:45 millert Exp $ */
d416 4
a419 2
				if (ep != NULL) {
					tm->tm_isdst = i;
d421 1
a421 1
					tm->TM_GMTOFF = -(timezone);
d424 1
a424 1
					tm->TM_ZONE = tzname[i];
a425 1
				}
@


1.15
log
@POSIX indicates that some fields should be computed even if not
explicitly set.  We can compute tm_yday, tm_wday, tm_mon and tm_mday
based on the values that were specified if possible.  Some logic
borrowed from localtime.c.  OK espie@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strptime.c,v 1.14 2011/01/19 16:50:14 landry Exp $ */
d597 1
a597 1
		    (fields & (FIELD_TM_MON|FIELD_TM_MDAY))) {
@


1.14
log
@Fix typo, %F pattern corresponds to %Y-%m-%d (the ISO 8601 date format),
not %Y/%m/%d. Found while debugging geo/gpx-viewer.
ok millert@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strptime.c,v 1.13 2010/11/08 19:16:16 jasper Exp $ */
d49 9
d70 5
d76 1
d96 1
a96 1
	static int century, relyear;
d101 1
d219 1
d244 1
d260 1
d286 1
d300 1
d354 1
d362 1
d392 1
d589 35
d673 7
@


1.13
log
@Add %F, %g, %G, %u, %z (extended) and %Z.
This is mostly a sync with NetBSD.

tested in a bulk build by landry@@
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strptime.c,v 1.12 2008/06/26 05:42:05 ray Exp $ */
d145 1
a145 1
			if (!(bp = _strptime(bp, "%Y/%m/%d", tm, 0)))
@


1.12
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strptime.c,v 1.11 2005/08/08 08:05:38 espie Exp $ */
d5 1
a5 1
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
d49 11
d63 2
d77 1
a77 1
	const unsigned char *bp;
d79 2
a80 1
	int alt_format, i;
d142 7
a148 1
	
d335 27
d377 157
d592 22
@


1.11
log
@zap remaining rcsid.

Kill old files that are no longer compiled.

okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a17 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.10
log
@signed vs unsigned char casting...
@
text
@d1 1
a37 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: strptime.c,v 1.9 2004/01/20 16:50:18 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.9
log
@Stop parsing the buffer after an appropriate number of digits; from NetBSD
OK otto@@ and miod@@
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: strptime.c,v 1.8 2002/02/16 21:27:24 millert Exp $";
d84 1
a84 1
	bp = buf;
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: strptime.c,v 1.7 2001/08/23 16:32:19 espie Exp $";
d60 1
a60 1
static	int _conv_num(const char **, int *, int, int);
d65 1
a65 3
strptime(buf, fmt, tm)
	const char *buf, *fmt;
	struct tm *tm;
d71 1
a71 4
_strptime(buf, fmt, tm, initialize)
	const char *buf, *fmt;
	struct tm *tm;
	int initialize;
d73 4
a76 3
	char c;
	const char *bp;
	int alt_format, i, len;
d327 1
a327 1
			if (!(_conv_num(&bp, &i, 0, INT_MAX)))
d378 1
a378 4
_conv_num(buf, dest, llim, ulim)
	const char **buf;
	int *dest;
	int llim, ulim;
d380 2
a381 1
	*dest = 0;
d386 1
d388 4
a391 3
		*dest *= 10;
		*dest += *(*buf)++ - '0';
	} while ((*dest * 10 <= ulim) && **buf >= '0' && **buf <= '9');
d393 1
a393 1
	if (*dest < llim || *dest > ulim || isdigit(**buf))
d396 1
@


1.8.6.1
log
@MFC:
Fix by millert@@

Stop parsing the buffer after an appropriate number of digits; from NetBSD

ok deraadt@@
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: strptime.c,v 1.8 2002/02/16 21:27:24 millert Exp $";
d60 1
a60 1
static	int _conv_num(const unsigned char **, int *, int, int);
d65 3
a67 1
strptime(const char *buf, const char *fmt, struct tm *tm)
d73 4
a76 1
_strptime(const char *buf, const char *fmt, struct tm *tm, int initialize)
d78 3
a80 4
	unsigned char c;
	const unsigned char *bp;
	size_t len;
	int alt_format, i;
d331 1
a331 1
			if (!(_conv_num(&bp, &i, 0, 9999)))
d382 4
a385 1
_conv_num(const unsigned char **buf, int *dest, int llim, int ulim)
d387 1
a387 2
	int result = 0;
	int rulim = ulim;
a391 1
	/* we use rulim to break out of the loop when we run out of digits */
d393 3
a395 4
		result *= 10;
		result += *(*buf)++ - '0';
		rulim /= 10;
	} while ((result * 10 <= ulim) && rulim && **buf >= '0' && **buf <= '9');
d397 1
a397 1
	if (result < llim || result > ulim)
a399 1
	*dest = result;
@


1.8.8.1
log
@MFC:
Fix by millert@@

Stop parsing the buffer after an appropriate number of digits; from NetBSD

ok deraadt@@
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: strptime.c,v 1.8 2002/02/16 21:27:24 millert Exp $";
d60 1
a60 1
static	int _conv_num(const unsigned char **, int *, int, int);
d65 3
a67 1
strptime(const char *buf, const char *fmt, struct tm *tm)
d73 4
a76 1
_strptime(const char *buf, const char *fmt, struct tm *tm, int initialize)
d78 3
a80 4
	unsigned char c;
	const unsigned char *bp;
	size_t len;
	int alt_format, i;
d331 1
a331 1
			if (!(_conv_num(&bp, &i, 0, 9999)))
d382 4
a385 1
_conv_num(const unsigned char **buf, int *dest, int llim, int ulim)
d387 1
a387 2
	int result = 0;
	int rulim = ulim;
a391 1
	/* we use rulim to break out of the loop when we run out of digits */
d393 3
a395 4
		result *= 10;
		result += *(*buf)++ - '0';
		rulim /= 10;
	} while ((result * 10 <= ulim) && rulim && **buf >= '0' && **buf <= '9');
d397 1
a397 1
	if (result < llim || result > ulim)
a399 1
	*dest = result;
@


1.7
log
@Kill very odd use of __CONCAT: completely unneeded, obfuscated, and
not even ANSI (concatenation does not produce a valid token).

Found out by heko@@.
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: strptime.c,v 1.6 2001/01/08 15:23:20 d Exp $";
d60 2
a61 2
static	int _conv_num __P((const char **, int *, int, int));
static	char *_strptime __P((const char *, const char *, struct tm *, int));
@


1.6
log
@fix %p matching. checked by angelos. closes PR1612
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: strptime.c,v 1.5 1998/04/25 08:08:25 deraadt Exp $";
d49 1
a49 1
#define	_ctloc(x)		__CONCAT(_CurrentTimeLocale->,x)
@


1.5
log
@month/weekday names are case insensitive; jpo@@EasternGraphics.com
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: strptime.c,v 1.4 1998/03/17 09:04:51 millert Exp $";
d279 2
a280 1
			if (strcmp(_ctloc(am_pm[0]), bp) == 0) {
d286 1
a286 1
				bp += strlen(_ctloc(am_pm[0]));
d290 2
a291 1
			else if (strcmp(_ctloc(am_pm[1]), bp) == 0) {
d297 1
a297 1
				bp += strlen(_ctloc(am_pm[1]));
@


1.4
log
@Make %Y override an earlier %y (%y stuff gets delayed due to century specs).
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: strptime.c,v 1.3 1998/03/15 23:31:00 millert Exp $";
d110 1
a110 1
			return (0);
d134 1
a134 1
				return (0);
d140 1
a140 1
				return (0);
d146 1
a146 1
				return (0);
d152 1
a152 1
				return (0);
d158 1
a158 1
				return (0);
d164 1
a164 1
				return (0);
d170 1
a170 1
				return (0);
d182 1
a182 1
				if (strncmp(_ctloc(day[i]), bp, len) == 0)
d187 1
a187 1
				if (strncmp(_ctloc(abday[i]), bp, len) == 0)
d193 1
a193 1
				return (0);
d206 1
a206 1
				if (strncmp(_ctloc(mon[i]), bp, len) == 0)
d211 1
a211 1
				if (strncmp(_ctloc(abmon[i]), bp, len) == 0)
d217 1
a217 1
				return (0);
d226 1
a226 1
				return (0);
d235 1
a235 1
				return (0);
d244 1
a244 1
				return (0);
d253 1
a253 1
				return (0);
d259 1
a259 1
				return (0);
d266 1
a266 1
				return (0);
d272 1
a272 1
				return (0);
d281 1
a281 1
					return (0);
d291 1
a291 1
					return (0);
d300 1
a300 1
			return (0);
d305 1
a305 1
				return (0);
d318 1
a318 1
				return (0);
d324 1
a324 1
				return (0);
d330 1
a330 1
				return (0);
d339 1
a339 1
				return (0);
d354 1
a354 1
			return (0);
@


1.3
log
@%C influences %y regardless of ordering.  This becomes a bit tricky
due to recursion so we do all the work in _strptime which takes
an extra flag specifying whether or not to initialize some statics.
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: strptime.c,v 1.2 1998/03/15 06:49:01 millert Exp $";
d332 1
@


1.2
log
@Fix %m, %I, %S, %y, %C, and %j conversions.  Fixes by nakayosh@@kcn.or.jp
and myself.  Some bugs noted by woods@@most.weird.com.
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: strptime.c,v 1.1 1998/02/04 22:22:43 deraadt Exp $";
d61 1
d69 9
d81 6
a86 1
	int century = TM_YEAR_BASE;
a88 1

d133 1
a133 1
			if (!(bp = strptime(bp, _ctloc(d_t_fmt), tm)))
d139 1
a139 1
			if (!(bp = strptime(bp, "%m/%d/%y", tm)))
d145 1
a145 1
			if (!(bp = strptime(bp, "%H:%M", tm)))
d151 1
a151 1
			if (!(bp = strptime(bp, "%I:%M:%S %p", tm)))
d157 1
a157 1
			if (!(bp = strptime(bp, "%H:%M:%S", tm)))
d163 1
a163 1
			if (!(bp = strptime(bp, _ctloc(t_fmt), tm)))
d169 1
a169 1
			if (!(bp = strptime(bp, _ctloc(d_fmt), tm)))
d337 1
a337 1
			if (!(_conv_num(&bp, &i, 0, 99)))
a338 9

			if (century == TM_YEAR_BASE) {
				if (i <= 68)
					tm->tm_year = i + 2000 - TM_YEAR_BASE;
				else
					tm->tm_year = i + 1900 - TM_YEAR_BASE;
			} else {
				tm->tm_year = i + century - TM_YEAR_BASE;
			}
d357 15
@


1.1
log
@+ strptime, from netbsd
@
text
@d39 1
a39 1
static char rcsid[] = "$OpenBSD: getcwd.c,v 1.4 1997/07/09 00:28:20 millert Exp $";
d71 1
d135 1
a135 1
		case 'r':	/* The time in 12-hour clock representation. */
d137 1
a137 1
			if (!(bp = strptime(bp, _ctloc(t_fmt_ampm), tm)))
d214 1
a214 1
			tm->tm_year = i * 100;
d238 1
a238 1
			if (!(_conv_num(&bp, &tm->tm_hour, 0, 11)))
d246 1
d259 1
d290 1
a290 1
			if (!(_conv_num(&bp, &tm->tm_sec, 1, 61)))
d321 1
a321 1
		case 'y':	/* The year within 100 years of the epoch. */
d326 8
a333 4
			if (i <= 68)
				tm->tm_year = i + 2000 - TM_YEAR_BASE;
			else
				tm->tm_year = i + 1900 - TM_YEAR_BASE;
d374 1
a374 1
	if (*dest < llim || *dest > ulim)
@

