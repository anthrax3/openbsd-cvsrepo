head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.12
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.14
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2014.04.28.13.08.34;	author syl;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.03.16.00.50;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Add support for 255 character file names in fuse.

from Helg Bredow, thanks!
input/OK reyk@@
@
text
@/*	$OpenBSD: dict.c,v 1.1 2013/06/03 16:00:50 tedu Exp $	*/

/*
 * Copyright (c) 2012 Gilles Chehade <gilles@@poolp.org>
 * Copyright (c) 2012 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <stdlib.h>
#include <string.h>

#include "fuse_private.h"

#define	MAX_DICTKEY_SIZE	NAME_MAX
struct dictentry {
	SPLAY_ENTRY(dictentry)	entry;
	char			key[MAX_DICTKEY_SIZE + 1];
	void		       *data;
};

static int dictentry_cmp(struct dictentry *, struct dictentry *);

SPLAY_PROTOTYPE(dict, dictentry, entry, dictentry_cmp);

int
dict_check(struct dict *d, const char *k)
{
	struct dictentry	key;

	if (strlcpy(key.key, k, sizeof key.key) >= sizeof key.key)
		errx(1, "dict_check(%p, %s): key too large", d, k);

	return (SPLAY_FIND(dict, d, &key) != NULL);
}

void *
dict_set(struct dict *d, const char *k, void *data)
{
	struct dictentry	*entry, key;

	if (strlcpy(key.key, k, sizeof key.key) >= sizeof key.key)
		errx(1, "dict_set(%p, %s): key too large", d, k);
	if ((entry = SPLAY_FIND(dict, d, &key)) == NULL) {
		entry = malloc(sizeof *entry);
		if (entry == NULL)
			return (NULL);

		strlcpy(entry->key, k, sizeof entry->key);
		SPLAY_INSERT(dict, d, entry);
	}

	entry->data = data;

	return (entry);
}

void *
dict_get(struct dict *d, const char *k)
{
	struct dictentry	key, *entry;

	if (strlcpy(key.key, k, sizeof key.key) >= sizeof key.key)
		errx(1, "dict_get(%p, %s): key too large", d, k);
	if ((entry = SPLAY_FIND(dict, d, &key)) == NULL)
		return (NULL);

	return (entry->data);
}

void *
dict_pop(struct dict *d, const char *k)
{
	struct dictentry	key, *entry;
	void			*data;

	if (strlcpy(key.key, k, sizeof key.key) >= sizeof key.key)
		errx(1, "dict_pop(%p, %s): key too large", d, k);
	if ((entry = SPLAY_FIND(dict, d, &key)) == NULL)
		return (NULL);

	data = entry->data;
	SPLAY_REMOVE(dict, d, entry);
	free(entry);

	return (data);
}

static int
dictentry_cmp(struct dictentry *a, struct dictentry *b)
{
	return strcmp(a->key, b->key);
}

SPLAY_GENERATE(dict, dictentry, entry, dictentry_cmp);
@


1.1
log
@add userland fuse library. ok beck deraadt
from Sylvestre Gallon ccna.syl gmail.com
@
text
@d1 1
a1 1
/*	$OpenBSD: src/usr.sbin/smtpd/dict.c,v 1.1 2013/01/26 09:37:23 gilles Exp $	*/
d29 1
a29 1
	char			key[MAX_DICTKEY_SIZE];
@

