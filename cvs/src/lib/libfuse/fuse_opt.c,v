head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5;
locks; strict;
comment	@ * @;


1.18
date	2017.01.04.12.01.22;	author stsp;	state Exp;
branches;
next	1.17;
commitid	GrUuqH1rth06DP9z;

1.17
date	2016.11.23.09.53.16;	author mpi;	state Exp;
branches;
next	1.16;
commitid	ABDEtYvkuWESjReT;

1.16
date	2016.05.24.20.55.32;	author okan;	state Exp;
branches;
next	1.15;
commitid	lENexCUZLt4o0Evi;

1.15
date	2015.10.19.17.24.07;	author tedu;	state Exp;
branches;
next	1.14;
commitid	s0LEAggOxhdeDioh;

1.14
date	2015.08.24.15.31.36;	author mpi;	state Exp;
branches;
next	1.13;
commitid	Io3rFO7YmyXAjfNJ;

1.13
date	2015.07.07.13.03.58;	author ajacoutot;	state Exp;
branches;
next	1.12;
commitid	B9N695sgQe9gpzTc;

1.12
date	2015.02.06.23.21.58;	author millert;	state Exp;
branches;
next	1.11;
commitid	STdsVrA5MGLlnbLm;

1.11
date	2014.10.08.04.50.10;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	s527XIJ5z4SJp4Kt;

1.10
date	2014.05.20.13.22.06;	author syl;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.15.08.48.11;	author syl;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.21.22.26.11;	author jca;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.04.19.54.18;	author syl;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.02.09.00.49;	author syl;	state Exp;
branches;
next	1.5;

1.5
date	2013.07.11.11.41.12;	author syl;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.12.22.44.42;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.12.22.42.52;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.12.22.38.08;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.12.22.36.06;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Revert fuse_opt.c r1.17. It broke exfat-fuse and perhaps other plugins.
http://marc.info/?l=openbsd-ports&m=148170738917809&w=2
reported by yasuoka@@
@
text
@/* $OpenBSD: fuse_opt.c,v 1.16 2016/05/24 20:55:32 okan Exp $ */
/*
 * Copyright (c) 2013 Sylvestre Gallon <ccna.syl@@gmail.com>
 * Copyright (c) 2013 Stefan Sperling <stsp@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <assert.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#include "debug.h"
#include "fuse_opt.h"
#include "fuse_private.h"

static void
free_argv(char **argv, int argc)
{
	int i;

	for (i = 0; i < argc; i++)
		free(argv[i]);
	free(argv);
}

static int
alloc_argv(struct fuse_args *args)
{
	char **argv;
	int i;

	assert(!args->allocated);

	argv = calloc(args->argc, sizeof(*argv));
	if (argv == NULL)
		return (-1);

	if (args->argv) {
		for (i = 0; i < args->argc; i++) {
			argv[i] = strdup(args->argv[i]);
			if (argv[i] == NULL) {
				free_argv(argv, i + 1);
				return (-1);
			}
		}
	}

	args->allocated = 1;
	args->argv = argv;

	return (0);
}

static int
match_opt(const char *templ, const char *opt)
{
	const char *o, *t;
	char *arg;

	arg = strpbrk(templ, " =");

	/* verify template */
	t = templ;
	if (*t == '-') {
		t++;
		if (*t == '-')
			t++;
		if (*t == 'o' || *t == '\0')
			return (0);
	}

	/* skip leading -, -o, and -- in option name */
	o = opt;
	if (*o == '-') {
		o++;
		if (*o == 'o' || *o == '-')
			o++;
	}

	/* empty option name is invalid */
	if (*o == '\0')
		return (0);

	/* match option name */
	while (*t && *o) {
		if (*t++ != *o++)
			return (0);
		if (arg && t == arg) {
			if (*o != ' ' && *o != '=')
				return (0);
			o++; /* o now points at argument */
			if (*o == '\0')
				return (0);
			break;
		}
	}

	/* match argument */
	if (arg) {
		if (t != arg)
			return (0);
		t++;
		/* does template have an argument? */
		if (*t != '%' && *t != '\0')
			return (0);
		if (*t == '%' && t[1] == '\0')
			return (0);
		/* yes it does, consume argument in opt */
		while (*o && *o != ' ')
			o++;
	} else if (*t != '\0')
		return (0);

	/* we should have consumed entire opt string */
	if (*o != '\0')
		return (0);

	return (1);
}

static int
add_opt(char **opts, const char *opt)
{
	char *new_opts;

	if (*opts == NULL) {
		*opts = strdup(opt);
		if (*opts == NULL)
			return (-1);
		return (0);
	}

	if (asprintf(&new_opts, "%s,%s", *opts, opt) == -1)
		return (-1);

	free(*opts);
	*opts = new_opts;
	return (0);
}

int
fuse_opt_add_opt(char **opts, const char *opt)
{
	int ret;

	if (opt == NULL || opt[0] == '\0')
		return (-1);

	ret = add_opt(opts, opt);
	return (ret);
}

int
fuse_opt_add_opt_escaped(char **opts, const char *opt)
{
	size_t size = 0, escaped = 0;
	const char *s = opt;
	char *escaped_opt, *p;
	int ret;

	if (opt == NULL || opt[0] == '\0')
		return (-1);

	while (*s) {
		/* malloc(size + escaped) overflow check */
		if (size >= (SIZE_MAX / 2))
			return (-1);

		if (*s == ',' || *s == '\\')
			escaped++;
		s++;
		size++;
	}

	if (escaped > 0) {
		escaped_opt = malloc(size + escaped);
		if (escaped_opt == NULL)
			return (-1);
		s = opt;
		p = escaped_opt;
		while (*s) {
			switch (*s) {
			case ',':
			case '\\':
				*p++ = '\\';
				/* FALLTHROUGH */
			default:
				*p++ = *s++;
			}
		}
		*p = '\0';
	} else {
		escaped_opt = strdup(opt);
		if (escaped_opt == NULL)
			return (-1);
	}

	ret = add_opt(opts, escaped_opt);
	free(escaped_opt);
	return (ret);
}

int
fuse_opt_add_arg(struct fuse_args *args, const char *name)
{
	return (fuse_opt_insert_arg(args, args->argc, name));
}

static int
parse_opt(const struct fuse_opt *o, const char *val, void *data,
    fuse_opt_proc_t f, struct fuse_args *arg)
{
	int found, ret, keyval;
	size_t idx;

	ret = 0;
	found = 0;
	keyval = 0;

	/* check if it is a key=value entry */
	idx = strcspn(val, "=");
	if (idx != strlen(val)) {
		idx++;
		keyval = 1;
	}

	for(; o->templ; o++) {
		if ((keyval && strncmp(val, o->templ, idx) == 0) ||
		    (!keyval && strcmp(val, o->templ) == 0)) {
			if (o->val == FUSE_OPT_KEY_DISCARD)
				return (1);

			if (FUSE_OPT_IS_OPT_KEY(o)) {
				if (keyval)
					ret = f(data, &val[idx], o->val, arg);
				else
					ret = f(data, val, o->val, arg);
			}

			if (o->off != ULONG_MAX && data && o->val >= 0) {
				ret = f(data, val, o->val, arg);
				int *addr = (int *)(data + o->off);
				*addr = o->val;
				ret = 0;
			}

			if (ret == -1)
				return (ret);
			if (ret == 1)
				fuse_opt_add_arg(arg, val);
			found++;
			break;
		}
	}

	if (!found) {
		ret = f(data, val, FUSE_OPT_KEY_OPT, arg);
		if (ret == 1)
			fuse_opt_add_arg(arg, val);
		return (ret);
	}

	return (ret);
}

/*
 * this code is not very sexy but we are forced to follow
 * the fuse api.
 *
 * when f() returns 1 we need to keep the arg
 * when f() returns 0 we need to discard the arg
 */
int
fuse_opt_parse(struct fuse_args *args, void *data,
    const struct fuse_opt *opt, fuse_opt_proc_t f)
{
	struct fuse_args outargs;
	const char *arg;
	int ret = 0;
	int i;

	if (!f || !args || !args->argc || !args->argv)
		return (0);

	bzero(&outargs, sizeof(outargs));
	fuse_opt_add_arg(&outargs, args->argv[0]);

	for (i = 1; i < args->argc; i++) {
		arg = args->argv[i];

		/* not - and not -- */
		if (arg[0] != '-') {
			ret = f(data, arg, FUSE_OPT_KEY_NONOPT, &outargs);

			if (ret == 1)
				fuse_opt_add_arg(&outargs, arg);
			if (ret == -1)
				goto err;
		} else if (arg[1] == 'o') {
			if (arg[2])
				arg += 2;	/* -ofoo,bar */
			else
				arg = args->argv[++i];

			ret = parse_opt(opt, arg, data, f, &outargs);

			if (ret == -1)
				goto err;
		} else {
			ret = parse_opt(opt, arg, data, f, &outargs);

			if (ret == -1)
				goto err;
		}
	}
	ret = 0;

err:
	/* Update args */
	fuse_opt_free_args(args);
	args->allocated = outargs.allocated;
	args->argc = outargs.argc;
	args->argv = outargs.argv;

	return (ret);
}

int
fuse_opt_insert_arg(struct fuse_args *args, int p, const char *name)
{
	char **av;
	char *this_arg, *next_arg;
	int i;

	if (name == NULL)
		return (-1);

	if (!args->allocated && alloc_argv(args))
		return (-1);

	if (p < 0 || p > args->argc)
		return (-1);

	av = reallocarray(args->argv, args->argc + 2, sizeof(*av));
	if (av == NULL)
		return (-1);

	this_arg = strdup(name);
	if (this_arg == NULL) {
		free(av);
		return (-1);
	}

	args->argc++;
	args->argv = av;
	args->argv[args->argc] = NULL;
	for (i = p; i < args->argc; i++) {
		next_arg = args->argv[i];
		args->argv[i] = this_arg;
		this_arg = next_arg;
	}
	return (0);
}

void
fuse_opt_free_args(struct fuse_args *args)
{
	if (!args->allocated)
		return;

	free_argv(args->argv, args->argc);
	args->argv = 0;
	args->argc = 0;
	args->allocated = 0;
}

int
fuse_opt_match(const struct fuse_opt *opts, const char *opt)
{
	const struct fuse_opt *this_opt = opts;

	if (opt == NULL || opt[0] == '\0')
		return (0);

	while (this_opt->templ) {
		if (match_opt(this_opt->templ, opt))
			return (1);
		this_opt++;
	}

	return (0);
}
@


1.17
log
@Empty strings are invalid arguments.

Fix a regression introduced when merging the two options parsers.

ok stsp@@
@
text
@d347 1
a347 1
	if (name == NULL || *name == '\0')
@


1.16
log
@NUL-terminate argv when parsing options, following other
implementations; fixes issue when exec*() is used for
fuse_args, notably in sshfs; from Hiltjo Posthuma and
reminded by ray.

ok mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.15 2015/10/19 17:24:07 tedu Exp $ */
d347 1
a347 1
	if (name == NULL)
@


1.15
log
@missing deref on char check. from David Binderman
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.14 2015/08/24 15:31:36 mpi Exp $ */
d356 1
a356 1
	av = reallocarray(args->argv, args->argc + 1, sizeof(*av));
d368 1
@


1.14
log
@When an option is not recognized call the processing function with
FUSE_OPT_KEY_OPT, while here fix the last argument of a call in
fuse_opt_parse().

Diff from Thiébaud Weksteen <thiebaud AT weksteen DOT fr>, thanks!

ok syl@@, ajacoutot@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.13 2015/07/07 13:03:58 ajacoutot Exp $ */
d80 1
a80 1
		if (*t == 'o' || t == '\0')
@


1.13
log
@Unbreak option parsing:
fuse_opt_pase is called with an opaque void * and struct fuse_opt. If val has a
positive value and off != -1, we modify the opaque void * at the offset off to
put it val.
This matches what the GNU libfuse does.

fixes (at least) simple-mtpfs option parsing
diff from slacker syl@@, thanks!

"it can't get worse than not working" mikeb@@
ok miod@@ sthen@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.12 2015/02/06 23:21:58 millert Exp $ */
d269 4
a272 2
		printf("fuse: unknown option %s\n", val);
		return (-1);
d305 1
a305 1
			ret = f(data, arg, FUSE_OPT_KEY_NONOPT, 0);
@


1.12
log
@SIZE_MAX is standard, we should be using it in preference to the
obsolete SIZE_T_MAX.  OK miod@@ beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.11 2014/10/08 04:50:10 deraadt Exp $ */
d250 7
@


1.11
log
@use reallocarray(); ok doug
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.10 2014/05/20 13:22:06 syl Exp $ */
d20 1
d178 1
a178 1
		if (size >= (SIZE_T_MAX / 2))
@


1.10
log
@Add support for -o XXX or -oXXX options in libfuse.

inputs from tedu@@, ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.9 2014/04/15 08:48:11 syl Exp $ */
d346 1
a346 1
	av = realloc(args->argv, (args->argc + 1) * sizeof(*av));
@


1.9
log
@Init outargs only once, and fix a bad bzero().

Spotted by jsg@@, ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.8 2014/01/21 22:26:11 jca Exp $ */
d224 13
a236 2
	int ret;
	int found = 0;
d239 2
a240 1
		if (strcmp(val, o->templ) == 0) {
d244 6
a249 1
			ret = f(data, val, o->val, arg);
d265 1
a265 1
	return (0);
d305 6
a310 3
				i++;		/* -o foo,bar*/
			if (ret != 0)
				return (ret);
@


1.8
log
@Mark fuse_opt_parse()'s third argument as a point to const, to match the
reference FUSE implementation.  ok syl@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.7 2013/11/04 19:54:18 syl Exp $ */
d262 1
a262 1
	struct fuse_args outargs = FUSE_ARGS_INIT(args->argc, args->argv);
d270 1
a270 1
	bzero(&outargs, sizeof(args));
@


1.7
log
@fuse_opt_insert_arg() can take empty string as argument.

unbreak ntfs-3g.
ok pirofti@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.6 2013/11/02 09:00:49 syl Exp $ */
d221 2
a222 2
parse_opt(struct fuse_opt *o, const char *val, void *data, fuse_opt_proc_t f,
    struct fuse_args *arg)
d259 2
a260 2
fuse_opt_parse(struct fuse_args *args, void *data, struct fuse_opt *opt,
    fuse_opt_proc_t f)
@


1.6
log
@Update the fuse_opt to have option like -h working.

ok ajacoutot@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.5 2013/07/11 11:41:12 syl Exp $ */
d317 1
a317 1
	if (name == NULL || name[0] == '\0')
@


1.5
log
@Merge fuse_opt code with stsp@@ fuse_opt code.

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.4 2013/06/12 22:44:42 tedu Exp $ */
d220 38
d262 1
d264 8
a271 3
	struct fuse_opt *good;
	int ret;
	int i, j;
d273 1
a273 1
	for (i = 0; i < args->argc; i++) {
d278 1
a278 1
			ret = (f) ? f(data, arg, FUSE_OPT_KEY_NONOPT, 0) : 0;
d280 2
d283 7
d292 4
a295 28
			switch (arg[1]) {
			case 'o':
				DPRINTF("%s: -o X,Y not supported yet.\n",
				    __func__);
				break ;
			case '-':
				DPRINTF("%s: long option not supported yet.",
				    __func__);
				break ;
			default:
				good = NULL;
				for (j = 0; opt[j].templ != NULL; j++)
					if (strcmp(arg, opt[j].templ) == 0) {
						good = &opt[j];
						break ;
					}

				if (!good)
					break ;

				if (good->val == -1 && f) {
					ret = f(data, arg, good->val, 0);

					if (ret == -1)
						return (ret);
				}
				break;
			}
d298 10
a307 1
	return (0);
@


1.4
log
@style for loops
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.3 2013/06/12 22:42:52 tedu Exp $ */
d4 1
d19 1
d27 12
a38 2
int
fuse_opt_add_arg(struct fuse_args *args, const char *name)
d40 1
a40 1
	char **av;
d43 5
a47 5
	/* copy argv, we cannot reallocate the orignal argv */
	if (args->allocated == 0) {
		av = malloc((args->argc + 1) * sizeof(*av));
		if (av == NULL)
			return (-1);
d49 1
d51 3
a53 2
			av[i] = strdup(args->argv[i]);
			if (av[i] == NULL)
d55 1
d57 13
d71 69
a139 2
		av[args->argc] = strdup(name);
		if (av[args->argc] == NULL)
d141 5
d147 31
a177 6
		args->argc++;
		args->argv = av;
		args->allocated = 1;
	} else {
		av = realloc(args->argv, (args->argc + 1) * sizeof(*av));
		if (av == NULL)
d180 26
a205 4
		args->argv = av;
		args->argc++;
		args->argv[args->argc - 1] = strdup(name);
		if (args->argv[args->argc - 1] == NULL)
d209 9
a217 1
	return (0);
d273 1
a273 1
fuse_opt_insert_arg(struct fuse_args *args, int p, const char *arg)
d276 1
d279 5
a283 2
	if (p > args->argc + 1)
		return -1;
d285 2
a286 4
	if (args->allocated) {
		av = realloc(args->argv, (args->argc + 1) * sizeof(char *));
		if (av == NULL)
			return (-1);
d288 9
a296 4
		args->argv = av;
		args->argc++;
		for (i = args->argc - 1; i > p; i++)
			args->argv[i] = args->argv[i - 1];
d298 6
a303 3
		args->argv[p] = strdup(arg);
		if (args->argv[p] == NULL)
			return (-1);
d308 1
a308 1
int
d311 2
a312 1
	int i;
d314 3
a316 4
	if (args->allocated)
		for (i = 0; i < args->argc; i++)
			free(args->argv[i]);
	free(args->argv);
d318 15
a332 1
	args->argc = 0;
@


1.3
log
@correct realloc usage
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.2 2013/06/12 22:38:08 tedu Exp $ */
d37 1
a37 1
		for (i = 0 ; i < args->argc ; i++) {
d74 1
a74 1
	for (i = 0 ; i < args->argc ; i++) {
d95 1
a95 1
				for (j = 0 ; opt[j].templ != NULL ; j++)
d133 1
a133 1
		for (i = args->argc - 1 ; i > p ; i++)
d149 1
a149 1
		for (i = 0 ; i < args->argc ; i++)
@


1.2
log
@style
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_opt.c,v 1.1 2013/06/12 22:36:06 tedu Exp $ */
a49 1

d51 2
a52 3
		args->argc++;
		args->argv = realloc(args->argv, args->argc * sizeof(*av));
		if (args->argv == NULL)
d55 2
d120 1
d127 2
a128 3
		args->argc++;
		args->argv = realloc(args->argv, (args->argc) * sizeof(char *));
		if (args->argv == NULL)
d131 2
@


1.1
log
@fuse_opt support from Sylvestre
@
text
@d1 1
a1 1
/* $OpenBSD: fuse.c,v 1.2 2013/06/03 16:21:08 tedu Exp $ */
d65 2
a66 1
int fuse_opt_parse(struct fuse_args *args, void *data, struct fuse_opt *opt,
@

