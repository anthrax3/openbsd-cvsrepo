head	1.9;
access;
symbols
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.24
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.22
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.18
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.20
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.16
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.05.11.21.52.48;	author deraadt;	state dead;
branches;
next	1.8;
commitid	VpgRpYXqYSJy4P7J;

1.8
date	2016.03.20.02.32.39;	author guenther;	state Exp;
branches;
next	1.7;
commitid	va8OhMk7nsI8YWCs;

1.7
date	2016.03.13.18.35.02;	author guenther;	state Exp;
branches;
next	1.6;
commitid	dhkWXrJW7zbsTPZe;

1.6
date	2015.09.01.05.40.06;	author guenther;	state Exp;
branches;
next	1.5;
commitid	AUiGrkvnwcUfa8tR;

1.5
date	2013.12.20.16.23.43;	author tobiasu;	state Exp;
branches;
next	1.4;

1.4
date	2013.12.03.06.21.41;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.19.21.05.29;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.20.14.33.27;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.01.10.56.43;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.9
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@/* $OpenBSD: md_init.h,v 1.8 2016/03/20 02:32:39 guenther Exp $ */

/*
 * Copyright (c) 2003 Dale Rahn. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */  


#define MD_SECT_CALL_FUNC(section, func)			\
	__asm (".section .rodata			\n"	\
	"	.align 8				\n"	\
	"L$" #func "					\n"	\
	"	.dword "#func "				\n"	\
	"	.previous				\n"	\
	"	.section "#section",\"ax\",@@progbits	\n"	\
	"	addil	LR'L$" #func "-$global$, %dp	\n"	\
	"	ldd	RR'L$" #func "-$global$(%r1), %r1\n"	\
	"	bve,l	(%r1), %rp			\n"	\
	"	std	%dp,-80(%sp)			\n"	\
	"	ldd	-80(%sp),%dp			\n"	\
	"	.previous")

#define MD_SECTION_PROLOGUE(sect, entry_pt)			\
	__asm (						   	\
	"	.section "#sect",\"ax\",@@progbits	\n"	\
	"	.EXPORT "#entry_pt",ENTRY,PRIV_LEV=3,ARGW0=NO,ARGW1=NO,ARGW2=NO,ARGW3=NO,RTNVAL=NO					\n"	\
	"	.align 4				\n"	\
	#entry_pt"					\n"	\
	"	std %rp, -16(%sp)			\n"	\
	"	ldo 128(%sp),%sp			\n"	\
	"	/* fall thru */				\n"	\
	"	.previous")


#define MD_SECTION_EPILOGUE(sect)				\
	__asm (							\
	"	.section "#sect",\"ax\",@@progbits	\n"	\
	"	ldd -144(%sp),%rp			\n"	\
	"	bv %r0(%rp)				\n"	\
	"	ldo -128(%sp),%sp			\n"	\
	"	.previous")

#include <sys/exec.h>		/* for struct psstrings */

/* XXX no cleanup() callback passed to __start yet? */
#define	MD_NO_CLEANUP

#define	MD_CRT0_START						\
	__asm(							\
	".import $global$, data					\n" \
	"	.import ___start, code				\n" \
	"	.text						\n" \
	"	.align	4					\n" \
	"	.export _start, entry				\n" \
	"	.export __start, entry				\n" \
	"	.type	_start,@@function			\n" \
	"	.type	__start,@@function			\n" \
	"	.label _start					\n" \
	"	.label __start					\n" \
	"	.proc						\n" \
	"	.callinfo frame=0, calls			\n" \
	"	.entry						\n" \
	"	ldil	L%__gp, %r27				\n" \
	"	.call						\n" \
	"	b	___start				\n" \
	"	ldo	R%__gp(%r27), %r27			\n" \
	"	.exit						\n" \
	"	.procend")

#define	MD_START_ARGS	struct ps_strings *arginfo, void (*cleanup)(void)
#define	MD_START_SETUP				\
	char	**argv, **envp;			\
	int	argc;				\
						\
	argv = arginfo->ps_argvstr;		\
	argc = arginfo->ps_nargvstr;		\
	envp = arginfo->ps_envstr;

#define	MD_EPROL_LABEL	__asm (".export _eprol, entry\n\t.label _eprol")
@


1.8
log
@Rearrange C runtime bits: now that ld.so exports environ and __progname,
move their definitions and initialization in static links to libc.a
Make crt0 always invoke a new func _csu_finish() in libc to process the auxv
and to either register the ld.so cleanup function (in dynamic links) or
initialize environ and __progname and do MC_DISABLE_KBIND (in static links).
In libc, get pagesize from auxv; cache that between getpagesize() and
sysconf(_SC_PAGESIZE)

ok mpi@@ "good time" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.7 2016/03/13 18:35:02 guenther Exp $ */
@


1.7
log
@crt0.c is already setting environ, so don't set it in MD_START_SETUP

ok kettenis@@ mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.6 2015/09/01 05:40:06 guenther Exp $ */
a65 2
/* kbind disabled in the kernel for hppa64 until we do dynamic linking */
#define	MD_DISABLE_KBIND	do { } while (0)
@


1.6
log
@In static binaries, invoke kbind() once to disable it.

With much assistance from miod@@
ok deraadt@@@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.5 2013/12/20 16:23:43 tobiasu Exp $ */
d98 1
a98 1
	environ = envp = arginfo->ps_envstr;
@


1.5
log
@Fix typo, allow hppa64 to build a little further
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.4 2013/12/03 06:21:41 guenther Exp $ */
d66 2
@


1.4
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.3 2011/09/19 21:05:29 kettenis Exp $ */
d80 1
a80 1
	"	.callin_fo frame=0, calls			\n" \
@


1.3
log
@Use long calls like we do on hppa, otherwise the function we want to call
might be unreachable.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.2 2011/04/20 14:33:27 jsing Exp $ */
d61 38
@


1.2
log
@Implement correct prologue and epilogue for hppa64.

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d29 11
a39 4
	__asm (".section "#section",\"ax\",@@progbits	\n"	\
	"	bl	" #func ",%r2			\n"	\
	"	std	%r19,-80(%r30)			\n"	\
	"	ldd	-80(%r30),%r19			\n"	\
@


1.1
log
@hppa64 bits cloned form hppa
@
text
@d41 2
a42 2
	"	std %r2, -20(%r30)			\n"	\
	"	ldo 64(%r30),%r30			\n"	\
d50 3
a52 3
	"	ldd -84(%r30),%r2			\n"	\
	"	bv %r0(%r2)				\n"	\
	"	ldo -64(%r30),%r30			\n"	\
@

