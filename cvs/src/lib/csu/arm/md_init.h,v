head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.2
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.36
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.34
	OPENBSD_5_0:1.2.0.32
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.30
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.28
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.24
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.26
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.22
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.20
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2017.08.11.20.13.31;	author guenther;	state Exp;
branches;
next	1.11;
commitid	5eAWkIW8wRuBAA6V;

1.11
date	2017.02.26.15.20.58;	author kettenis;	state Exp;
branches;
next	1.10;
commitid	ntRUxzJZZ3QaCH21;

1.10
date	2017.01.21.00.45.13;	author guenther;	state Exp;
branches;
next	1.9;
commitid	TdwnlwbfWriSs7fI;

1.9
date	2016.10.03.22.13.30;	author kettenis;	state Exp;
branches;
next	1.8;
commitid	dPEf8DuNEsAsmrsV;

1.8
date	2016.09.08.18.56.58;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	ICVA9xZlSZbMJOfM;

1.7
date	2016.03.24.05.27.19;	author guenther;	state Exp;
branches;
next	1.6;
commitid	cLl4FNtsUqRv0WJn;

1.6
date	2016.03.20.02.32.39;	author guenther;	state Exp;
branches;
next	1.5;
commitid	va8OhMk7nsI8YWCs;

1.5
date	2015.09.01.05.40.06;	author guenther;	state Exp;
branches;
next	1.4;
commitid	AUiGrkvnwcUfa8tR;

1.4
date	2013.12.03.06.21.40;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.22.17.19.34;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.09.02.40.49;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.28.20;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.12
log
@_dl_printf is no longer referenced by RELOC_{JMPREL,DYN,GOT}; delete the stub

ok kettenis@@
@
text
@/* $OpenBSD: md_init.h,v 1.11 2017/02/26 15:20:58 kettenis Exp $ */

/*-
 * Copyright (c) 2001 Ross Harvey
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the NetBSD
 *      Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * arm overrides these because it uses %progbits instead of @@progbits
 */
#define MD_DATA_SECTION_FLAGS_SYMBOL(section, flags, type, symbol)	\
	extern __dso_hidden type symbol[];				\
	__asm("	.section "section",\""flags"\",%progbits		\n" \
	"	.balign 4						\n" \
	#symbol":							\n" \
	"	.previous")
#define MD_DATA_SECTION_SYMBOL_VALUE(section, type, symbol, value)	\
	extern __dso_hidden type symbol[];				\
	__asm("	.section "section",\"aw\",%progbits			\n" \
	"	.balign 4						\n" \
	#symbol":							\n" \
	"	.int "#value"						\n" \
	"	.previous")
#define MD_DATA_SECTION_FLAGS_VALUE(section, flags, value)		\
	__asm("	.section "section",\""flags"\",%progbits		\n" \
	"	.balign 4						\n" \
	"	.int "#value"						\n" \
	"	.previous")

#define MD_SECT_CALL_FUNC(section, func) \
	__asm (".section "#section", \"ax\"		\n" \
	"	movw	r0, #:lower16:" #func "- 1f - 8	\n" \
	"	movt	r0, #:upper16:" #func "- 1f - 8	\n" \
	"1:	add	r0, r0, pc			\n" \
	"	blx	r0				\n" \
	"	.previous")

#define MD_SECTION_PROLOGUE(sect, entry_pt)	\
	__asm (					\
	".section "#sect",\"ax\",%progbits	\n" \
	"	.globl " #entry_pt "		\n" \
	"	.type " #entry_pt ",%function	\n" \
	"	.align 4			\n" \
	#entry_pt":				\n" \
	"	push	{r4, lr}		\n" \
	"	/* fall thru */			\n" \
	"	.previous")


#define MD_SECTION_EPILOGUE(sect)		\
	__asm (					\
	".section "#sect",\"ax\",%progbits	\n" \
	"	pop	{r4, pc}		\n" \
	"	.previous")


/*
 * The definitions of environ and __progname prevent the creation
 * of COPY relocations for WEAK symbols.
 */
#define	MD_CRT0_START				\
	char **environ, *__progname;		\
	__asm(					\
	".text					\n" \
	"	.align	0			\n" \
	"	.globl	_start			\n" \
	"	.globl	__start			\n" \
	"_start:				\n" \
	"__start:				\n" \
	"	mov	r3, r0	/* cleanup */	\n" \
	"/* Get argc/argv/envp from stack */	\n" \
	"	ldr	r0, [sp, #0]		\n" \
	"	add	r1, sp, #4		\n" \
	"	add	r2, r1, r0, lsl #2	\n" \
	"	add	r2, r2, #4		\n" \
	"					\n" \
	"/*					\n" \
	" * Ensure the stack is properly	\n" \
	" * aligned before calling C code.	\n" \
	" */					\n" \
	"	bic	sp, sp, #7" /*__STRING(STACKALIGNBYTES)*/ "	\n" \
	"	b	___start		\n" \
	".previous");

#define	MD_RCRT0_START				\
	char **environ, *__progname;		\
	__asm(					\
	".text					\n" \
	"	.align	0			\n" \
	"	.globl	_start			\n" \
	"	.globl	__start			\n" \
	"_start:				\n" \
	"__start:				\n" \
	"	mov	fp, sp			\n" \
	"	mov	r0, fp			\n" \
	"					\n" \
	"	sub	sp, sp, #4+4+(16*4)	\n" \
	"	add	r1, sp, #4		\n" \
	"					\n" \
	"	ldr	r8, .L_GOT		\n" \
	"1:	add	r8, pc, r8		\n" \
	"	ldr	r2, .L__DYNAMIC		\n" \
	"	add	r2, r2, r8		\n" \
	"					\n" \
	"	bl	_dl_boot_bind		\n" \
	"					\n" \
	"	mov	sp, fp			\n" \
	"	mov	fp, #0			\n" \
	"					\n" \
	"	mov	r3, #0	/* cleanup */	\n" \
	"/* Get argc/argv/envp from stack */	\n" \
	"	ldr	r0, [sp, #0]		\n" \
	"	add	r1, sp, #4		\n" \
	"	add	r2, r1, r0, lsl #2	\n" \
	"	add	r2, r2, #4		\n" \
	"					\n" \
	"/*					\n" \
	" * Ensure the stack is properly	\n" \
	" * aligned before calling C code.	\n" \
	" */					\n" \
	"	bic	sp, sp, #7" /*__STRING(STACKALIGNBYTES)*/ "	\n" \
	"	b	___start		\n" \
	"					\n" \
	".L_GOT:				\n" \
	"	.long	_GLOBAL_OFFSET_TABLE_-(1b+8)	\n" \
	".L__DYNAMIC:				\n" \
	"	.long	_DYNAMIC(GOTOFF)	\n" \
	"					\n" \
	"_dl_exit:				\n" \
	"	mov	r12, #1			\n" \
	"	swi	#0			\n" \
	".previous");
@


1.11
log
@Use a long branch (using movw/movt) to implement MD_SECT_CALL_FUNC.
Necessary (but perhaps not suffcient) to build large binaries on arm.

ok guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.10 2017/01/21 00:45:13 guenther Exp $ */
a159 2
	"_dl_printf:				\n" \
	"	mov	pc, lr			\n" \
@


1.10
log
@Declare the symbols that label the .ctors, .dtors, .eh_frame, and .jcr
sections as extern hidden arrays of indefinite size, so that the compiler
(well, clang) doesn't believe it knows the exact contents and thus optimize
things into infinite loops.  Actually set the symbols to be in the sections
and insert the leading and trailing values via __asm().

Problem pointed out by patrick@@
testing and ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.9 2016/10/03 22:13:30 kettenis Exp $ */
a57 2
#ifdef __PIC__
	/* This nastyness derived from gcc3 output */
d60 4
a63 1
	"	bl " #func "(PLT)			\n" \
a64 11
#else
#define MD_SECT_CALL_FUNC(section, func) \
	__asm (".section "#section", \"ax\"	\n" \
	"	adr r0, 1f			\n" \
	"	ldr r0, [r0]			\n" \
	"	adr lr, 2f			\n" \
	"	mov pc,	r0			\n" \
	"1:	.word " #func "			\n" \
	"2:					\n" \
	"	.previous")
#endif
@


1.9
log
@Simplify code that sets up a stack frame for running .init code to be more
AEABI-like.

ok tom@@, jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.8 2016/09/08 18:56:58 kettenis Exp $ */
d35 22
@


1.8
log
@Implement self-relocation for -static -pie on arm.  Also removes some
unecessary code from the normal startup code and do some general cleanup to
make the code more readable.

ok guenther@@, jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.7 2016/03/24 05:27:19 guenther Exp $ */
d61 1
a61 3
	"	mov ip, sp			\n" \
	"	stmfd sp!, {fp, ip, lr, pc}	\n" \
	"	sub fp, ip, #4			\n" \
d69 1
a69 1
	"	ldmea	fp, {fp, sp, pc}	\n" \
@


1.7
log
@Unbreak arm and m88k: COPY relocations for weak symbols that are overloaded
with strong symbols in ld.so don't do what we need, so put definitions back
in crt0 and make ld.so update __progname like it does environ.

report and testing patrick@@ jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.6 2016/03/20 02:32:39 guenther Exp $ */
d90 2
a91 2
	"	ldr	r0, [sp, #0x0000]	\n" \
	"	add	r1, sp, #0x0004		\n" \
d93 1
a93 1
	"	add	r2, r2, #0x0004		\n" \
a98 1
	/* #if 1 */				\
d100 22
a121 4
	/* #endif */				\
	"	sub	sp, sp, #8		\n" \
	"	str	r5, [sp, #4]		\n" \
	"	str	r4, [sp, #0]		\n" \
d123 17
d141 11
@


1.6
log
@Rearrange C runtime bits: now that ld.so exports environ and __progname,
move their definitions and initialization in static links to libc.a
Make crt0 always invoke a new func _csu_finish() in libc to process the auxv
and to either register the ld.so cleanup function (in dynamic links) or
initialize environ and __progname and do MC_DISABLE_KBIND (in static links).
In libc, get pagesize from auxv; cache that between getpagesize() and
sysconf(_SC_PAGESIZE)

ok mpi@@ "good time" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.5 2015/09/01 05:40:06 guenther Exp $ */
d75 4
d80 1
@


1.5
log
@In static binaries, invoke kbind() once to disable it.

With much assistance from miod@@
ok deraadt@@@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.4 2013/12/03 06:21:40 guenther Exp $ */
a102 9

#include <sys/syscall.h>
#define	MD_DISABLE_KBIND						\
	do {								\
		register long syscall_num __asm("r12") = SYS_kbind;	\
		register void *arg1 __asm("r0") = NULL;			\
		__asm volatile("swi 0" : "+r" (arg1)			\
		    : "r" (syscall_num) : "r1", "cc");			\
	} while (0)
@


1.4
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.3 2012/08/22 17:19:34 pascal Exp $ */
d103 9
@


1.3
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.2 2004/02/09 02:40:49 drahn Exp $ */
d73 30
@


1.2
log
@Proper PIC support in arm startup files.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.1 2004/02/01 05:28:20 drahn Exp $ */
d36 1
a36 1
#ifdef PIC
@


1.1
log
@startup files for arm. Partially borrowed from NetBSD.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.2 2004/01/29 16:24:32 drahn Exp $ */
d36 7
a42 1
/* XXX */
d52 1
d62 1
a62 1
	"	stmfd sp!, {fp, lr, pc}		\n" \
@

