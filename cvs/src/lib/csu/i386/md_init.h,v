head	1.9;
access;
symbols
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.30
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.28
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.24
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.26
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2017.08.11.20.13.31;	author guenther;	state Exp;
branches;
next	1.8;
commitid	5eAWkIW8wRuBAA6V;

1.8
date	2016.08.07.02.30.55;	author guenther;	state Exp;
branches;
next	1.7;
commitid	0pC9OLvtSON7f3wH;

1.7
date	2016.03.20.02.32.39;	author guenther;	state Exp;
branches;
next	1.6;
commitid	va8OhMk7nsI8YWCs;

1.6
date	2015.09.01.05.40.06;	author guenther;	state Exp;
branches;
next	1.5;
commitid	AUiGrkvnwcUfa8tR;

1.5
date	2014.12.22.21.58.25;	author kurt;	state Exp;
branches;
next	1.4;
commitid	OYU7b7AvLdPfGQRF;

1.4
date	2013.12.03.06.21.41;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.23.12.00.48;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.31.09.48.09;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.14.59.15;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@_dl_printf is no longer referenced by RELOC_{JMPREL,DYN,GOT}; delete the stub

ok kettenis@@
@
text
@/* $OpenBSD: md_init.h,v 1.8 2016/08/07 02:30:55 guenther Exp $ */

/*-
 * Copyright (c) 2001 Ross Harvey
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the NetBSD
 *      Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define MD_SECT_CALL_FUNC(section, func) \
	__asm (".section "#section", \"ax\"\n"	\
	"	call " #func "\n"		\
	"	.previous")

/*
 * Align is after because we want the function to start at the first
 * address of the section, but overall we want the section to be
 * aligned by the align amount.
 */
#define MD_SECTION_PROLOGUE(sect, entry_pt)	\
	__asm (					\
	".section "#sect",\"ax\",@@progbits	\n" \
	"	.globl " #entry_pt "		\n" \
	"	.type " #entry_pt ",@@function	\n" \
	#entry_pt":				\n" \
	"	.align 16			\n" \
	"	pushl	%ebp			\n" \
	"	movl	%esp,%ebp		\n" \
	"	andl	$~15,%esp		\n" \
	"	.previous")


#define MD_SECTION_EPILOGUE(sect)		\
	__asm (					\
	".section "#sect",\"ax\",@@progbits	\n" \
	"	leave				\n" \
	"	ret				\n" \
	"	.previous")


#define	MD_CRT0_START				\
	__asm(					\
	".text					\n" \
	"	.align	4			\n" \
	"	.globl	__start			\n" \
	"	.globl	_start			\n" \
	"_start:				\n" \
	"__start:				\n" \
	"	movl	%esp,%ebp		\n" \
	"	andl	$~15,%esp	# align stack\n" \
	"	pushl	%edx		# cleanup\n" \
	"	movl	0(%ebp),%eax		\n" \
	"	leal	8(%ebp,%eax,4),%ecx	\n" \
	"	leal	4(%ebp),%edx		\n" \
	"	pushl	%ecx			\n" \
	"	pushl	%edx			\n" \
	"	pushl	%eax			\n" \
	"	xorl	%ebp,%ebp	# mark deepest stack frame\n" \
	"	call	___start		\n" \
	"	.previous")

#define	MD_RCRT0_START				\
	__asm(					\
	".text					\n" \
	"	.align	4			\n" \
	"	.globl	__start			\n" \
	"	.globl	_start			\n" \
	"_start:				\n" \
	"__start:				\n" \
	"	movl	%esp,%eax	# save SP for dl_boot_bind \n" \
	"	subl	$16*4,%esp 	# allocate dl_data \n" \
	"	call	1f		# push &_DYNAMIC... \n" \
	"1:	addl	$(_DYNAMIC-1b),(%esp)	# ...for dl_boot_bind \n" \
	"	movl	%esp,%ebx		\n" \
	"	pushl	%ebx		# push dl_data for dl_boot_bind \n" \
	"					\n" \
	"	mov	%eax, %esi	# save stack for ___start \n" \
	"	pushl	%eax		# push saved SP for dl_boot_bind \n" \
	"					\n" \
	"	call	_dl_boot_bind@@PLT # _dl_boot_bind(sp,dl_data,0) \n" \
	"	addl	$3*4,%esp	# pop args \n" \
	"					\n" \
	"	movl	%esi,%ebp		\n" \
	"	andl	$~15,%esp	# align stack\n" \
	"	pushl	$0		# cleanup\n" \
	"	movl	0(%ebp),%eax	# argc	\n" \
	"	leal	8(%ebp,%eax,4),%ecx #envp \n" \
	"	leal	4(%ebp),%edx	# argv	\n" \
	"	pushl	%ecx			\n" \
	"	pushl	%edx			\n" \
	"	pushl	%eax			\n" \
	"	xorl	%ebp,%ebp	# mark deepest stack frame\n" \
	"	call	___start	# ___start(argc,argv,envp,0) \n" \
	"					\n" \
	"	.align	4			\n" \
	"	.globl	_dl_exit		\n" \
	"	.type	_dl_exit,@@function	\n" \
	"_dl_exit:				\n" \
	"	mov	$1, %eax		\n" \
	"	int	$0x80			\n" \
	"	ret				\n" \
	"	.previous")
@


1.8
log
@Teach i386 to pass &_DYNAMIC to _dl_boot_bind()
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.7 2016/03/20 02:32:39 guenther Exp $ */
a120 8
	".text					\n" \
	"	.align	4			\n" \
	"	.globl	_dl_printf		\n" \
	"	.type	_dl_printf,@@function	\n" \
	"_dl_printf:				\n" \
	"	ret				\n" \
	"					\n" \
	".text					\n" \
@


1.7
log
@Rearrange C runtime bits: now that ld.so exports environ and __progname,
move their definitions and initialization in static links to libc.a
Make crt0 always invoke a new func _csu_finish() in libc to process the auxv
and to either register the ld.so cleanup function (in dynamic links) or
initialize environ and __progname and do MC_DISABLE_KBIND (in static links).
In libc, get pagesize from auxv; cache that between getpagesize() and
sysconf(_SC_PAGESIZE)

ok mpi@@ "good time" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.6 2015/09/01 05:40:06 guenther Exp $ */
d98 2
a99 1
	"	pushl	$0	# push 0 for dynamicp (unused on i386) \n" \
@


1.6
log
@In static binaries, invoke kbind() once to disable it.

With much assistance from miod@@
ok deraadt@@@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.5 2014/12/22 21:58:25 kurt Exp $ */
a135 9

#include <sys/syscall.h>
#define	MD_DISABLE_KBIND						\
	do {								\
		register long syscall_num __asm("eax") = SYS_kbind;	\
		__asm volatile("pushl $0; push %%eax; int $0x80;"	\
		    " addl $8, %%esp" : "+a" (syscall_num) :		\
		    : "edx", "cc");					\
	} while (0)
@


1.5
log
@Self-relocation code for i386.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.4 2013/12/03 06:21:41 guenther Exp $ */
d136 9
@


1.4
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.3 2012/12/23 12:00:48 kettenis Exp $ */
d86 49
@


1.3
log
@Explicitly align the stack on a 16-byte boundary such that constructors can
use SSE instructions.  In principle we should be able to rely on the stack to
be aligned properly, but the i386 calling convention makes this rather fragile.

ok guenther@@, deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.2 2011/03/31 09:48:09 kettenis Exp $ */
d64 22
@


1.2
log
@Make sure everything run from .init and .fini sections gets a properly aligned
stack.

ok fgsch@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.1 2004/01/08 14:59:15 drahn Exp $ */
d53 3
a55 1
	"	subl	$8,%esp			\n" \
d62 1
a62 1
	"	addl	$8,%esp			\n" \
@


1.1
log
@__init/__fini handling on ELF has not been correct. It is supposed to
be a section which code stubs (branches) can be added to initialize/destructor
This adds MD stubs to allow this to operate as expected. should fix wine
and behave according to ELF specs. ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d53 1
a53 1
	"	/* fall thru */			\n" \
d60 1
@

