head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.2
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.6
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10;
locks; strict;
comment	@ * @;


1.12
date	2017.01.21.00.45.13;	author guenther;	state Exp;
branches;
next	1.11;
commitid	TdwnlwbfWriSs7fI;

1.11
date	2015.04.04.18.05.05;	author guenther;	state Exp;
branches;
next	1.10;
commitid	JLMS0l1gREgLc0hW;

1.10
date	2012.12.05.23.19.57;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.01.11.32.43;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.14.16.37.31;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2009.04.13.20.15.24;	author kurt;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.10.18.29.15;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.26.20.04.11;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.26.20.00.37;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.08.14.59.15;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.16.21.27.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.03.22.47.01;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Declare the symbols that label the .ctors, .dtors, .eh_frame, and .jcr
sections as extern hidden arrays of indefinite size, so that the compiler
(well, clang) doesn't believe it knows the exact contents and thus optimize
things into infinite loops.  Actually set the symbols to be in the sections
and insert the leading and trailing values via __asm().

Problem pointed out by patrick@@
testing and ok kettenis@@
@
text
@/*	$OpenBSD: crtend.c,v 1.11 2015/04/04 18:05:05 guenther Exp $	*/
/*	$NetBSD: crtend.c,v 1.1 1996/09/12 16:59:04 cgd Exp $	*/

#include <sys/types.h>
#include "md_init.h"
#include "extern.h"

MD_DATA_SECTION_FLAGS_VALUE(".ctors", "aw", 0);
MD_DATA_SECTION_FLAGS_VALUE(".dtors", "aw", 0);
MD_DATA_SECTION_FLAGS_VALUE(".eh_frame", "a", 0);
MD_DATA_SECTION_FLAGS_VALUE(".jcr", "aw", 0);

MD_SECTION_EPILOGUE(".init");
MD_SECTION_EPILOGUE(".fini");
@


1.11
log
@gcc 2.x is dead

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtend.c,v 1.10 2012/12/05 23:19:57 deraadt Exp $	*/
d8 4
a11 10
static init_f __CTOR_LIST__[1]
    __used __attribute__((section(".ctors"))) = { (void *)0 };	/* XXX */
static init_f __DTOR_LIST__[1]
    __used __attribute__((section(".dtors"))) = { (void *)0 };	/* XXX */

static const int __EH_FRAME_END__[]
    __used __attribute__((section(".eh_frame"), aligned(4))) = { 0 };

static void * __JCR_END__[]
    __used __attribute__((section(".jcr"), aligned(sizeof(void*)))) = { 0 };
@


1.10
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: crtend.c,v 1.9 2010/05/01 11:32:43 kettenis Exp $	*/
a15 1
#if (__GNUC__ > 2)
a17 1
#endif
@


1.9
log
@Sprinkle a few __used markers to prevent gcc4 from throwing away essential
bits of code and data.  With this change gcc4 builds usable crt*.o on sparc64,
other architectures probably need some more love.

ok marco@@, jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtend.c,v 1.8 2009/07/14 16:37:31 jsg Exp $	*/
d4 1
a4 1
#include <sys/cdefs.h>
@


1.8
log
@Don't specify mode(SI) attribute for __EH_FRAME_END__ as we have
32 bit ints on OpenBSD.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtend.c,v 1.7 2009/04/13 20:15:24 kurt Exp $	*/
d9 1
a9 1
    __attribute__((section(".ctors"))) = { (void *)0 };		/* XXX */
d11 1
a11 1
    __attribute__((section(".dtors"))) = { (void *)0 };		/* XXX */
d14 1
a14 1
__attribute__((unused, section(".eh_frame"), aligned(4))) = { 0 };
d18 1
a18 1
__attribute__((unused, section(".jcr"), aligned(sizeof(void*)))) = { 0 };
@


1.7
log
@Add gcj java class registration hooks for gcc3 elf archs. From NetBSD
with minor differences.

okay kettenis@@ drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtend.c,v 1.6 2004/10/10 18:29:15 kettenis Exp $	*/
d14 1
a14 1
__attribute__((unused, mode(SI), section(".eh_frame"), aligned(4))) = { 0 };
@


1.6
log
@Add support for DWARF2 exception handling.
ok drahn@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtend.c,v 1.5 2004/01/26 20:04:11 espie Exp $	*/
d15 5
@


1.5
log
@add finalized guard to destructor calls, to prevent multiple calls.
stop most kde apps from burping all over the place on exit, which
means that, somehow, our destructors get registered twice... :-(

Okay drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtend.c,v 1.3 2004/01/08 14:59:15 drahn Exp $	*/
d12 3
@


1.4
log
@small clean-up: typedef to desambiguate const, prototypes...

ok drahn@@, some time ago.
@
text
@@


1.3
log
@__init/__fini handling on ELF has not been correct. It is supposed to
be a section which code stubs (branches) can be added to initialize/destructor
This adds MD stubs to allow this to operate as expected. should fix wine
and behave according to ELF specs. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtend.c,v 1.2 2002/02/16 21:27:20 millert Exp $	*/
d6 1
d8 1
a8 1
static void (*__CTOR_LIST__[1])(void)
d10 1
a10 1
static void (*__DTOR_LIST__[1])(void)
@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: crtend.c,v 1.1 2001/02/03 22:47:01 art Exp $	*/
a3 2
#ifndef ECOFF_COMPAT

d5 1
d12 2
a13 1
#endif /* !ECOFF_COMPAT */
@


1.1
log
@Create a common_elf directory with crtbegin and crtend that can
be shared between archs.
@
text
@d1 1
a1 1
/*	$OpenBSD: crtend.c,v 1.1 1996/11/13 21:28:04 niklas Exp $	*/
d8 1
a8 1
static void (*__CTOR_LIST__[1]) __P((void))
d10 1
a10 1
static void (*__DTOR_LIST__[1]) __P((void))
@

