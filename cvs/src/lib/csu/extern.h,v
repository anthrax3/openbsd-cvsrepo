head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.6
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.1.0.8
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2017.01.21.04.14.19;	author guenther;	state Exp;
branches;
next	1.2;
commitid	lcJRU2dlFKIPQ0hE;

1.2
date	2017.01.21.00.45.13;	author guenther;	state Exp;
branches;
next	1.1;
commitid	TdwnlwbfWriSs7fI;

1.1
date	2004.01.26.20.00.37;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Pull in declarations for main() and __init() to make clang happy.
Mark __init() as hidden

ok kettenis@@ deraadt@@
@
text
@/*
 * Copyright (c) 2004 Marc Espie <espie@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

void	__init(void) __dso_hidden;
int	main(int argc, char *argv[], char *envp[]);

typedef void (*init_f)(void);

/*
 * Provide default implementations of these.  Only archs with weird
 * ASM stuff (hppa, arm) need to override them
 */
#ifndef MD_DATA_SECTION_FLAGS_SYMBOL
# ifdef __LP64__
#  define VALUE_ALIGN		".balign 8"
#  define VALUE_DIRECTIVE	".quad"
# else
#  define VALUE_ALIGN		".balign 4"
#  define VALUE_DIRECTIVE	".int"
# endif
# define MD_DATA_SECTION_FLAGS_SYMBOL(section, flags, type, symbol)	\
	extern __dso_hidden type symbol[];				\
	__asm("	.section "section",\""flags"\",@@progbits		\n" \
	"	"VALUE_ALIGN"						\n" \
	#symbol":							\n" \
	"	.previous")
# define MD_DATA_SECTION_SYMBOL_VALUE(section, type, symbol, value)	\
	extern __dso_hidden type symbol[];				\
	__asm("	.section "section",\"aw\",@@progbits			\n" \
	"	"VALUE_ALIGN"						\n" \
	#symbol":							\n" \
	"	"VALUE_DIRECTIVE" "#value"				\n" \
	"	.previous")
# define MD_DATA_SECTION_FLAGS_VALUE(section, flags, value)		\
	__asm("	.section "section",\""flags"\",@@progbits		\n" \
	"	"VALUE_ALIGN"						\n" \
	"	"VALUE_DIRECTIVE" "#value"				\n" \
	"	.previous")
#endif
@


1.2
log
@Declare the symbols that label the .ctors, .dtors, .eh_frame, and .jcr
sections as extern hidden arrays of indefinite size, so that the compiler
(well, clang) doesn't believe it knows the exact contents and thus optimize
things into infinite loops.  Actually set the symbols to be in the sections
and insert the leading and trailing values via __asm().

Problem pointed out by patrick@@
testing and ok kettenis@@
@
text
@a15 1
struct ps_strings;
d17 2
a18 4
extern void ___start(int argc, char **argv, char **envp, void (*cleanup)(void),
    const void *obj, struct ps_strings *ps_strings);
extern void __init(void);
extern int main(int argc, char *argv[], char *envp[]);
@


1.1
log
@small clean-up: typedef to desambiguate const, prototypes...

ok drahn@@, some time ago.
@
text
@d24 32
@

