head	1.4;
access;
symbols
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2017.08.11.20.13.30;	author guenther;	state Exp;
branches;
next	1.3;
commitid	5eAWkIW8wRuBAA6V;

1.3
date	2017.02.26.22.26.42;	author kettenis;	state Exp;
branches;
next	1.2;
commitid	5V3iHagkyKth5XS4;

1.2
date	2017.01.24.01.43.32;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	FC6JtR5YkzhxqUkK;

1.1
date	2017.01.11.13.59.02;	author patrick;	state Exp;
branches;
next	;
commitid	YIbm0PB64X7Ucm95;


desc
@@


1.4
log
@_dl_printf is no longer referenced by RELOC_{JMPREL,DYN,GOT}; delete the stub

ok kettenis@@
@
text
@/* $OpenBSD: md_init.h,v 1.3 2017/02/26 22:26:42 kettenis Exp $ */

/*-
 * Copyright (c) 2001 Ross Harvey
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the NetBSD
 *      Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define MD_SECT_CALL_FUNC(section, func) \
	__asm (".section "#section", \"ax\"		\n" \
	"	bl " #func "				\n" \
	"	.previous")

#define MD_SECTION_PROLOGUE(sect, entry_pt)	\
	__asm (					\
	".section "#sect",\"ax\",%progbits	\n" \
	"	.globl " #entry_pt "		\n" \
	"	.type " #entry_pt ",%function	\n" \
	"	.align 4			\n" \
	#entry_pt":				\n" \
	"	sub	sp, sp, #16		\n" \
	"	str	lr, [sp]		\n" \
	"	/* fall thru */			\n" \
	"	.previous")


#define MD_SECTION_EPILOGUE(sect)		\
	__asm (					\
	".section "#sect",\"ax\",%progbits	\n" \
	"	ldr	lr, [sp]		\n" \
	"	add	sp, sp, #16		\n" \
	"	ret				\n" \
	"	.previous")


#define	MD_CRT0_START				\
	__asm(					\
	".text					\n" \
	"	.align	0			\n" \
	"	.globl	_start			\n" \
	"	.globl	__start			\n" \
	"_start:				\n" \
	"__start:				\n" \
	"	mov	x3, x2	/* cleanup */	\n" \
	"/* Get argc/argv/envp from stack */	\n" \
	"	ldr	x0, [sp]		\n" \
	"	add	x1, sp, #0x0008		\n" \
	"	add	x2, x1, x0, lsl #3	\n" \
	"	add	x2, x2, #0x0008		\n" \
	"					\n" \
	"	b	___start		\n" \
	".previous");

#define	MD_RCRT0_START				\
	char **environ, *__progname;		\
	__asm(					\
	".text					\n" \
	"	.align	0			\n" \
	"	.globl	_start			\n" \
	"	.globl	__start			\n" \
	"_start:				\n" \
	"__start:				\n" \
	"	mov	fp, sp			\n" \
	"	mov	x0, fp			\n" \
	"					\n" \
	"	sub	sp, sp, #8+8+(16*8)	\n" \
	"	add	x1, sp, #4		\n" \
	"					\n" \
	"	adrp	x2, :got:_DYNAMIC	\n" \
	"	add	x2, x2, #:lo12:_DYNAMIC	\n" \
	"					\n" \
	"	bl	_dl_boot_bind		\n" \
	"					\n" \
	"	mov	sp, fp			\n" \
	"	mov	fp, #0			\n" \
	"					\n" \
	"	mov	x3, #0	/* cleanup */	\n" \
	"/* Get argc/argv/envp from stack */	\n" \
	"	ldr	x0, [sp]		\n" \
	"	add	x1, sp, #0x0008		\n" \
	"	add	x2, x1, x0, lsl #3	\n" \
	"	add	x2, x2, #0x0008		\n" \
	"					\n" \
	"	b	___start		\n" \
	"					\n" \
	"_dl_exit:				\n" \
	"	mov	x8, #1			\n" \
	"	svc	#0			\n" \
	".previous");
@


1.3
log
@Our certbegin/certend is always PIC, so remove the non-PIC MD_SECT_CALL_FUNC()
implementations.

ok guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.2 2017/01/24 01:43:32 kettenis Exp $ */
a115 2
	"_dl_printf:				\n" \
	"	ret				\n" \
@


1.2
log
@Fix passing &_DYNAMIC to _dl_boot_bind; makes -static -pie work.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.1 2017/01/11 13:59:02 patrick Exp $ */
a35 2
#ifdef __PIC__
	/* This nastyness derived from gcc3 output */
a39 11
#else
#define MD_SECT_CALL_FUNC(section, func) \
	__asm (".section "#section", \"ax\"	\n" \
	"	adr	x0, 1f			\n" \
	"	ldr	x0, [x0]		\n" \
	"	adr	lr, 2f			\n" \
	"	br	x0			\n" \
	"1:	.xword " #func "		\n" \
	"2:					\n" \
	"	.previous")
#endif
@


1.1
log
@Add support for AArch64.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.4 2013/12/03 06:21:40 guenther Exp $ */
d107 1
a107 1
	"	add	x1, sp, #8		\n" \
d110 1
@

