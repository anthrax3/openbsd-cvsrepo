head	1.26;
access;
symbols
	OPENBSD_6_1:1.26.0.2
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.21.0.8
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.4
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.16.0.16
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.14
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.10
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.14
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.10
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.8
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.6
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.4
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.10
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.8.0.10
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.8
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.26
date	2017.01.21.00.46.32;	author guenther;	state Exp;
branches;
next	1.25;
commitid	VqRyfAPsGikuuCUA;

1.25
date	2016.11.08.19.04.48;	author natano;	state Exp;
branches;
next	1.24;
commitid	DasEq4BGKwJbSLbT;

1.24
date	2016.10.15.13.00.07;	author espie;	state Exp;
branches;
next	1.23;
commitid	97sJQIjk83NOXfhl;

1.23
date	2016.09.03.10.47.24;	author jsg;	state Exp;
branches;
next	1.22;
commitid	nSJNIZFGjOCrZYov;

1.22
date	2016.09.01.09.33.30;	author tedu;	state Exp;
branches;
next	1.21;
commitid	pzmnYX8KstYooFrj;

1.21
date	2014.12.22.03.51.08;	author kurt;	state Exp;
branches;
next	1.20;
commitid	IDpxsqs0vh0PbV5Z;

1.20
date	2014.11.15.21.59.29;	author guenther;	state Exp;
branches;
next	1.19;
commitid	5bK2kczMbAAk40iV;

1.19
date	2014.11.15.01.40.07;	author guenther;	state Exp;
branches;
next	1.18;
commitid	LraQ2vmu3gUZLnSe;

1.18
date	2014.11.12.02.31.47;	author guenther;	state Exp;
branches;
next	1.17;
commitid	yVvDwJtYN2JUuiTV;

1.17
date	2014.11.10.19.06.47;	author guenther;	state Exp;
branches;
next	1.16;
commitid	FRmWStK3GNpwHDDJ;

1.16
date	2011.07.04.05.54.27;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2010.02.03.20.49.00;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2006.11.09.15.19.18;	author drahn;	state Exp;
branches;
next	1.13;

1.13
date	2004.09.10.12.07.26;	author pefo;	state Exp;
branches;
next	1.12;

1.12
date	2004.02.27.17.36.14;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.01.07.21.56;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.28.17.37.46;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.04.17.26.37;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.11.01.28.40;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.19.20.44.31;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.19.19.58.43;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.11.03.02.26;	author pvalchev;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.26.22.42.49;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	99.08.20.14.11.34;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	97.11.08.08.13.10;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@amd64 can build rcrt0.o with the stack-protector

ok kettenis@@ deraadt@@
@
text
@#	$OpenBSD: Makefile,v 1.25 2016/11/08 19:04:48 natano Exp $

OBJS=		crt0.o gcrt0.o
OBJS+=		crtbegin.o crtend.o
OBJS+=		crtbeginS.o crtendS.o
OBJS+=		rcrt0.o
SRCS=		crt0.c crtbegin.c crtbeginS.c crtend.c crtendS.c

CFLAGS+=	-I${.CURDIR}/${MACHINE_CPU}
CFLAGS+=	-I${.CURDIR}/../../libexec/ld.so
CFLAGS+=	-I${.CURDIR}/../../libexec/ld.so/${MACHINE_CPU}

# XXX "use -fno-omit-frame-pointer; the reason is almost crazy; pr#287"
.if ${MACHINE_ARCH} == "amd64" || ${MACHINE_ARCH} == "i386"
CFLAGS+=	-fno-omit-frame-pointer
.endif

# Override powerpc default of -fPIE
# XXX if this is safe, why not override CFLAGS for alpha and sparc64 too?
# Does it work because the csu bits come first and get the first few GOT
# entries?
.if ${MACHINE_ARCH} == "powerpc"
CFLAGS+=	-fpie
.endif

.ifdef NOPIC
PICFLAG=
.elif ${MACHINE_ARCH} == "powerpc" || ${MACHINE_ARCH} == "sparc64"
# The objects for shared libraries need to work for all possible
# libraries, so force big PIC where it matters.
# Arguably m88k should do this too, but maybe there aren't any
# libraries big enough to need it there?
PICFLAG=	-fPIC
.endif

RCFLAGS=-DRCRT0
# amd64 can access the stack protector before relocation has occurred.
# Other archs aren't so lucky
.if ${MACHINE_ARCH} != "amd64"
RCFLAGS+=-fno-stack-protector 
.endif

all: ${OBJS}

crt0.o: crt0.c
	@@echo ${COMPILE.c} ${.CURDIR}/crt0.c -o ${.TARGET}
	@@${COMPILE.c} ${.CURDIR}/crt0.c -o ${.TARGET}.o
	@@${LD} -x -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

gcrt0.o: crt0.c
	@@echo ${COMPILE.c} -DMCRT0 ${.CURDIR}/crt0.c -o ${.TARGET}
	@@${COMPILE.c} -DMCRT0 ${.CURDIR}/crt0.c -o ${.TARGET}.o
	@@${LD} -x -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

rcrt0.o: crt0.c
	@@echo ${COMPILE.c} ${RCFLAGS} ${.CURDIR}/crt0.c -o ${.TARGET}
	@@${COMPILE.c} ${RCFLAGS} ${.CURDIR}/crt0.c -o ${.TARGET}.o
	@@${LD} -x -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

crtbegin.o: crtbegin.c
	@@echo ${COMPILE.c} ${.CURDIR}/crtbegin.c -o ${.TARGET}
	@@${COMPILE.c} ${.CURDIR}/crtbegin.c -o ${.TARGET}.o
	@@${LD} -x -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

crtbeginS.o: crtbeginS.c
	@@echo ${COMPILE.c} ${PICFLAG} ${.CURDIR}/crtbeginS.c -o ${.TARGET}
	@@${COMPILE.c} ${PICFLAG} ${.CURDIR}/crtbeginS.c -o ${.TARGET}.o
	@@${LD} -x -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

crtend.o: crtend.c
	@@echo ${COMPILE.c} ${.CURDIR}/crtend.c -o ${.TARGET}
	@@${COMPILE.c} ${.CURDIR}/crtend.c -o ${.TARGET}.o
	@@${LD} -x -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

crtendS.o: crtendS.c
	@@echo ${COMPILE.c} ${PICFLAG} ${.CURDIR}/crtendS.c -o ${.TARGET}
	@@${COMPILE.c} ${PICFLAG} ${.CURDIR}/crtendS.c -o ${.TARGET}.o
	@@${LD} -x -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

realinstall:
	${INSTALL} ${INSTALL_COPY} -S -o ${BINOWN} -g ${BINGRP} -m 444 ${OBJS} \
	    ${DESTDIR}/usr/lib

afterdepend: .depend
	@@sed -i 's/^\([^\.]*\).o[ ]*:/\1.o g\1.o r\1.o:/' .depend

.include <bsd.prog.mk>
@


1.25
log
@Use sed -i to post-process .depend. This avoids permission issues caused
by the file being created in /tmp.

tweaks and ok tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2016/10/15 13:00:07 espie Exp $
d36 7
d58 2
a59 2
	@@echo ${COMPILE.c} -DRCRT0 -fno-stack-protector ${.CURDIR}/crt0.c -o ${.TARGET}
	@@${COMPILE.c} -DRCRT0 -fno-stack-protector ${.CURDIR}/crt0.c -o ${.TARGET}.o
@


1.24
log
@unify tmp depend generation.
- simpler uniform pattern
- put the tmpfile in OBJDIR, so that mv doesn't whine about groups
when using a separate builduser.

okay millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2016/09/03 10:47:24 jsg Exp $
d85 1
a85 7
	@@TMP=`mktemp .dependXXXXXXXXXX` || exit 1; \
	if sed -e 's/^\([^\.]*\).o[ ]*:/\1.o g\1.o r\1.o:/' \
	      < .depend > $$TMP; then \
		mv $$TMP .depend; \
    	else \
		rm -f $$TMP; \
	fi
@


1.23
log
@Enable PIE on arm now that sjlj exceptions are no longer used after
the switch to eabi.  This does not include static PIE which will be
handled later.

A specific sequence of steps is required to cross over this change,
using a snapshot is the easiest way to do so.

ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2016/09/01 09:33:30 tedu Exp $
d85 7
a91 4
	@@(TMP=/tmp/_depend$$$$; \
	    sed -e 's/^\([^\.]*\).o[ ]*:/\1.o g\1.o r\1.o:/' \
	    < .depend > $$TMP; \
	mv $$TMP .depend)
@


1.22
log
@retire sparc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2014/12/22 03:51:08 kurt Exp $
a15 5
.endif

# XXX arm doesn't do pie yet???
.if ${MACHINE_ARCH} == "arm"
CFLAGS+=	-fpie
@


1.21
log
@Introduce new csu0 variant for -static -pie binaries to use called
rcsu0.o where the initial 'r' is for relocatable. rcsu0.o performs
self-relocation on static pie binaries by calling a slightly modified
copy of ld.so's _dl_boot_bind() in boot.h.

The first arch implementatation is also included for amd64 where
__start calls _dl_boot_bind() and then calls ___start(). Includes
parts from kettenis@@ to help get R_X86_64_64 relocations working
and proper handling for undefined weak symbols.

This is the first part of several to get static pie self-relocating
binaries working. binutils, gcc and kernel changes are forthcoming
to complete the solution, then per-arch implementations are needed
for MD_RCRT0_START in csu.

okay kettenis@@ pascal@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2014/11/15 21:59:29 guenther Exp $
d33 1
a33 2
.elif ${MACHINE_ARCH} == "powerpc" || ${MACHINE_ARCH} == "sparc" || \
      ${MACHINE_ARCH} == "sparc64"
@


1.20
log
@Objects for the executable can be PIE instead of PIC, so remove the sparc64
special case; no binary change

ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2014/11/15 01:40:07 guenther Exp $
d6 1
d10 2
d56 6
d92 1
a92 1
	    sed -e 's/^\([^\.]*\).o[ ]*:/\1.o g\1.o:/' \
@


1.19
log
@ELF uberalles, so move the files up out of common_elf

ok miod@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2014/11/12 02:31:47 guenther Exp $
a25 8
.endif

# Override sparc64 default of -fPIE
# XXX Why do we need to compile the csu bits that are linked into the
# *executable* with -fPIC and not just the default of -fPIE?  The
# bits for shared libraries are handled below.
.if ${MACHINE_ARCH} == "sparc64"
CFLAGS+=	-fPIC
@


1.18
log
@Merge Makefiles, moving the build up a level and putting the CPU-specific
build flags into conditionals in the Makefile, fixing a few inconsistencies
in the process.

\o/ miod@@
@
text
@d1 1
a1 1
#	$OpenBSD$
d8 1
a8 3
ELFDIR=		${.CURDIR}/common_elf
.PATH:		${ELFDIR}
CFLAGS+=	-I${ELFDIR} -I${.CURDIR}/${MACHINE_CPU}
d50 2
a51 2
	@@echo ${COMPILE.c} ${ELFDIR}/crt0.c -o ${.TARGET}
	@@${COMPILE.c} ${ELFDIR}/crt0.c -o ${.TARGET}.o
d56 2
a57 2
	@@echo ${COMPILE.c} -DMCRT0 ${ELFDIR}/crt0.c -o ${.TARGET}
	@@${COMPILE.c} -DMCRT0 ${ELFDIR}/crt0.c -o ${.TARGET}.o
d62 2
a63 2
	@@echo ${COMPILE.c} ${ELFDIR}/crtbegin.c -o ${.TARGET}
	@@${COMPILE.c} ${ELFDIR}/crtbegin.c -o ${.TARGET}.o
d68 2
a69 2
	@@echo ${COMPILE.c} ${PICFLAG} ${ELFDIR}/crtbeginS.c -o ${.TARGET}
	@@${COMPILE.c} ${PICFLAG} ${ELFDIR}/crtbeginS.c -o ${.TARGET}.o
d74 2
a75 2
	@@echo ${COMPILE.c} ${ELFDIR}/crtend.c -o ${.TARGET}
	@@${COMPILE.c} ${ELFDIR}/crtend.c -o ${.TARGET}.o
d80 2
a81 2
	@@echo ${COMPILE.c} ${PICFLAG} ${ELFDIR}/crtendS.c -o ${.TARGET}
	@@${COMPILE.c} ${PICFLAG} ${ELFDIR}/crtendS.c -o ${.TARGET}.o
@


1.17
log
@m68k is dead  <sniff>

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2011/07/04 05:54:27 deraadt Exp $
d3 44
a46 4
.if make(obj)
SUBDIR= alpha amd64 arm hppa i386 ia64 m88k mips64 powerpc sh sparc sparc64 vax
.else
SUBDIR= ${MACHINE_CPU}
d49 49
a97 1
.include <bsd.subdir.mk>
@


1.16
log
@enter ia64 for obj
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2010/02/03 20:49:00 miod Exp $
d4 1
a4 1
SUBDIR= alpha amd64 arm hppa i386 ia64 m68k m88k mips64 powerpc sh sparc sparc64 vax
@


1.15
log
@Use MACHINE_CPU instead of MACHINE_ARCH to pick the correct machine dependent
files or directories when applicable.
The inspiration and name of MACHINE_CPU come from NetBSD, although the way to
provide it to Makefiles is completely different.
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2006/11/09 15:19:18 drahn Exp $
d4 1
a4 1
SUBDIR= alpha amd64 arm hppa i386 m68k m88k mips64 powerpc sh sparc sparc64 vax
@


1.14
log
@build obj in sh
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2004/09/10 12:07:26 pefo Exp $
d4 1
a4 1
SUBDIR= alpha arm hppa i386 m68k m88k powerpc sh sparc sparc64 vax amd64 mips64
d6 1
a6 1
SUBDIR= ${MACHINE_ARCH}
@


1.13
log
@add mips64 to the list. ok derradt.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2004/02/27 17:36:14 deraadt Exp $
d4 1
a4 1
SUBDIR= alpha arm hppa i386 m68k m88k powerpc sparc sparc64 vax amd64 mips64
@


1.12
log
@change amd64's MACHINE_ARCH from x86_64 to amd64.  There are many many
reasons for this, quite a few of them technical, and not all of them
in response to Intel's broken ia32e crud.  The gcc toolchain stays at
x86_64 for now.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2004/02/01 07:21:56 drahn Exp $
d4 1
a4 1
SUBDIR= alpha arm hppa i386 m68k m88k powerpc sparc sparc64 vax amd64
@


1.11
log
@link into build. make obj is safe in arm dir.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2004/01/28 17:37:46 deraadt Exp $
d4 1
a4 1
SUBDIR= alpha arm hppa i386 m68k m88k powerpc sparc sparc64 vax x86_64
@


1.10
log
@for make obj, enter x86_64; mickey ok
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2004/01/04 17:26:37 drahn Exp $
d4 1
a4 1
SUBDIR= alpha hppa i386 m68k m88k powerpc sparc sparc64 vax x86_64
@


1.9
log
@c++rt0.o is a relic of long ago. tested on ELF drahn a.out miod, ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2001/09/11 01:28:40 jason Exp $
d4 1
a4 1
SUBDIR= alpha hppa i386 m68k m88k powerpc sparc sparc64 vax
@


1.8
log
@add sparc64; op2@@squish.org
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2001/08/19 20:44:31 brad Exp $
a7 2

SUBDIR+= c++
@


1.7
log
@remove unused bits and pieces.
--
Ok'd by art@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2001/08/19 19:58:43 mickey Exp $
d4 1
a4 1
SUBDIR= alpha hppa i386 m68k m88k powerpc sparc vax
@


1.6
log
@make obj in hppa always
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2001/07/11 03:02:26 pvalchev Exp $
d4 1
a4 1
SUBDIR= alpha hppa i386 m68k m88k ns32k powerpc sparc vax
@


1.5
log
@remove mips leftovers; ok brad
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2001/06/26 22:42:49 miod Exp $
d4 1
a4 1
SUBDIR= alpha i386 m68k m88k ns32k powerpc sparc vax
@


1.4
log
@Put m88k-related files in the correctly named directory.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 1999/08/20 14:11:34 niklas Exp $
d4 1
a4 1
SUBDIR= alpha i386 m68k mips m88k ns32k powerpc sparc vax
@


1.3
log
@Fix RCS Ids
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 1997/11/08 08:13:10 todd Exp $
d4 1
a4 1
SUBDIR= alpha i386 m68k mips mvme88k ns32k powerpc sparc vax
@


1.2
log
@make obj thingies.
@
text
@d1 1
a1 1
#	$Id: Makefile,v 1.1.1.1 1995/10/18 08:41:17 deraadt Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$Id: Makefile,v 1.5 1994/01/10 14:09:16 deraadt Exp $
d3 7
a9 1
SUBDIR=	${MACHINE_ARCH} c++
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
