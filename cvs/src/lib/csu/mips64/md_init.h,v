head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.2.0.38
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.36
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.34
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.32
	OPENBSD_5_0:1.2.0.30
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.28
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.26
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.22
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.24
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.20
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.18
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.16
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2016.08.07.02.44.00;	author guenther;	state Exp;
branches;
next	1.13;
commitid	6WdLcgMlrNAmywly;

1.13
date	2016.03.20.02.32.39;	author guenther;	state Exp;
branches;
next	1.12;
commitid	va8OhMk7nsI8YWCs;

1.12
date	2016.03.13.18.35.02;	author guenther;	state Exp;
branches;
next	1.11;
commitid	dhkWXrJW7zbsTPZe;

1.11
date	2015.09.01.05.40.06;	author guenther;	state Exp;
branches;
next	1.10;
commitid	AUiGrkvnwcUfa8tR;

1.10
date	2015.02.07.04.57.22;	author miod;	state Exp;
branches;
next	1.9;
commitid	E8U9D2iC41MCetHu;

1.9
date	2015.01.01.19.43.10;	author miod;	state Exp;
branches;
next	1.8;
commitid	T54KghnxCzJk16vH;

1.8
date	2014.12.27.20.33.47;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	kSUtX42r21XCN4L2;

1.7
date	2014.12.23.16.27.18;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	QLrZFdkIn6Gex4cP;

1.6
date	2014.02.22.18.10.39;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2013.12.23.18.16.39;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2013.12.04.00.20.31;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2013.12.03.06.21.41;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.09.17.45.26;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.22.21.16;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Teach mips64 to pass &_DYNAMIC to _dl_boot_bind().

mips64be testing by deraadt@@
@
text
@/* $OpenBSD: md_init.h,v 1.13 2016/03/20 02:32:39 guenther Exp $ */

/*-
 * Copyright (c) 2001 Ross Harvey
 * Copyright (c) 2001 Simon Burge
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the NetBSD
 *      Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Allocate 32 bytes for the stack frame.  Store GP at SP+16 (since
 * this is where code generated by the compiler for fallthru processing
 * expects it to be), and the RA at SP+24.
 */

/* this is gross... */

#ifdef __ABICALLS__
#define MD_FUNCTION_PROLOGUE(entry_pt)			\
	"	.frame $sp,32,$31		\n"	\
	"	.set	reorder			\n"	\
	"	dsubu    $sp,$sp,32		\n"	\
	"	.cpsetup $25, 16, "#entry_pt"	\n"	\
	"	sd      $ra ,24($sp)		\n"
#else
#define MD_FUNCTION_PROLOGUE(entry_pt)			\
	"       dsubu	$sp,$sp,32		\n"	\
	"       sd	$ra ,24($sp)		\n"
#endif


#define MD_SECTION_PROLOGUE(sect, entry_pt)		\
	__asm (						\
	".section "#sect",\"ax\",@@progbits	\n"	\
	".align 2				\n"	\
	".globl "#entry_pt"			\n"	\
	".type "#entry_pt"@@function		\n"	\
	".ent "#entry_pt"			\n"	\
	#entry_pt":				\n"	\
	MD_FUNCTION_PROLOGUE(entry_pt)			\
	"       /* fall thru */			\n"	\
	".end "#entry_pt"			\n"	\
	".previous")

#define MD_SECTION_EPILOGUE(sect)                       \
	__asm (						\
	".section "#sect",\"ax\",@@progbits      \n"	\
	"	ld	$ra ,24($sp)		\n"	\
	" # next should have been a .cpreturn 	\n"	\
	"	ld	$gp,16($sp)		\n"	\
	"	.set	noreorder		\n"	\
	"	j	$ra			\n"	\
	"	daddu	$sp,$sp,32		\n"	\
	"	.set	reorder			\n"	\
	".previous")

#define MD_SECT_CALL_FUNC(section, func)		\
	__asm (".section "#section", \"ax\"	\n"	\
	"	jal	" #func "		\n"	\
	".previous")

#define MD_CRT0_START				\
	__asm(					\
	".text					\n" \
	"	.align	3			\n" \
	"	.globl	__start			\n" \
	"	.ent	__start			\n" \
	"	.type	__start, @@function	\n" \
	"__start:				\n" \
	"	lui	$gp, %hi(%neg(%gp_rel(__start)))	\n" \
	"	addiu	$gp, $gp, %lo(%neg(%gp_rel(__start)))	\n" \
	"	daddu	$gp, $gp, $t9		\n" \
	"	move	$a0, $sp		\n" \
	"	dsrl	$a1, $sp, 4		\n" /* align stack on a */ \
	"	dsll	$sp, $a1, 4		\n" /* 16 byte boundary */ \
	"	move	$a1, $v0		\n" \
	"	dla	$t9, ___start		\n" \
	"	jr	$t9			\n" \
	"	.end	__start			\n" \
	"	.previous")

#define MD_RCRT0_START				\
	__asm(					\
	".text					\n" \
	"	.align	3			\n" \
	"	.globl	__start			\n" \
	"	.ent	__start			\n" \
	"	.type	__start, @@function	\n" \
	"__start:				\n" \
	"	dsubu	$sp, $sp, 160		\n" \
	"	lui	$gp, %hi(%neg(%gp_rel(__start)))	\n" \
	"	addiu	$gp, $gp, %lo(%neg(%gp_rel(__start)))	\n" \
	"	daddu	$gp, $gp, $t9		\n" \
	"	dla	$s1, 1f			\n" \
	"	bgezal	$zero, 1f		\n" \
	"1:					\n" \
	"	dsubu	$s0, $ra, $s1		\n" \
	"	daddu	$a0, $sp, 160		\n" \
	"	daddu	$a1, $sp, 0		\n" \
	"	dla	$a2, _DYNAMIC		\n" \
	"	daddu	$a2, $s0		\n" \
	"	dla	$t9, _dl_boot_bind	\n" \
	"	daddu	$t9, $s0		\n" \
	"	jalr	$t9			\n" \
	"	daddu	$sp, $sp, 160		\n" \
	"	move	$a0, $sp		\n" \
	"	dsrl	$a1, $sp, 4		\n" /* align stack on a */ \
	"	dsll	$sp, $a1, 4		\n" /* 16 byte boundary */ \
	"	move	$a1, $zero		\n" \
	"	dla	$t9, ___start		\n" \
	"	jr	$t9			\n" \
	"	.end	__start			\n" \
	"	.globl	_dl_exit		\n" \
	"	.ent	_dl_exit		\n" \
	"	.type	_dl_exit, @@function	\n" \
	"_dl_exit:				\n" \
	"	li	$v0, 1			\n" \
	"	syscall				\n" \
	"	j	$ra			\n" \
	"	.end	_dl_exit		\n" \
	"	.globl	_dl_printf		\n" \
	"	.ent	_dl_printf		\n" \
	"	.type	_dl_printf, @@function	\n" \
	"_dl_printf:				\n" \
	"	j	$ra			\n" \
	"	.end	_dl_printf		\n" \
	"	.previous")

struct kframe {
	long	kargc;
	char	*kargv[1];	/* size depends on kargc */
	char	kargstr[1];	/* size varies */
	char	kenvstr[1];	/* size varies */
};

#define	MD_START_ARGS		struct kframe *kfp, void (*cleanup)(void)
#define	MD_START_SETUP				\
	char	**argv, **envp;			\
	long	argc;				\
						\
	argc = kfp->kargc;			\
	argv = &kfp->kargv[0];			\
	envp = argv + argc + 1;
@


1.13
log
@Rearrange C runtime bits: now that ld.so exports environ and __progname,
move their definitions and initialization in static links to libc.a
Make crt0 always invoke a new func _csu_finish() in libc to process the auxv
and to either register the ld.so cleanup function (in dynamic links) or
initialize environ and __progname and do MC_DISABLE_KBIND (in static links).
In libc, get pagesize from auxv; cache that between getpagesize() and
sysconf(_SC_PAGESIZE)

ok mpi@@ "good time" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.12 2016/03/13 18:35:02 guenther Exp $ */
d127 2
@


1.12
log
@crt0.c is already setting environ, so don't set it in MD_START_SETUP

ok kettenis@@ mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.11 2015/09/01 05:40:06 guenther Exp $ */
a168 9

#include <sys/syscall.h>
#define	MD_DISABLE_KBIND						\
	do {								\
		register long syscall_num __asm("v0") = SYS_kbind;	\
		register void *arg1 __asm("a0") = NULL;			\
		__asm volatile("syscall" : "+r" (syscall_num)		\
		    : "r" (arg1) : "v1", "a3");				\
	} while (0)
@


1.11
log
@In static binaries, invoke kbind() once to disable it.

With much assistance from miod@@
ok deraadt@@@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.10 2015/02/07 04:57:22 miod Exp $ */
d168 1
a168 1
	environ = envp = argv + argc + 1;
@


1.10
log
@argc is passed as a long by the kernel, define it as such to match what
other ports do.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.9 2015/01/01 19:43:10 miod Exp $ */
d69 1
d169 9
@


1.9
log
@Inline the .cpsetup pseudo-statement in rcrt0 to avoid saving the "old" gp
value, which we have no use for. ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.8 2014/12/27 20:33:47 kettenis Exp $ */
d163 1
a163 1
	int	argc;				\
@


1.8
log
@Static PIE for mips64.  Still something not quite right as a full make build
fails.

ok kurt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.7 2014/12/23 16:27:18 deraadt Exp $ */
d117 3
a119 1
	"	.cpsetup $t9, 144, __start	\n" \
@


1.7
log
@do not expose "ra" to cpp because it muddles up the .c code above.
instead handle it internally as $ra
solution from kettenis, ok guenther
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.6 2014/02/22 18:10:39 miod Exp $ */
d106 43
@


1.6
log
@Increase _STACKALIGNBYTES to 15 (was 7), and make sure the stack is aligned
to a 16 byte boundary in csu (similar to what the other arches where
_STACKALIGNBYTES != _ALIGNBYTES do).
This is necessary for long double variables on the stack to be correctly
aligned.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.5 2013/12/23 18:16:39 kettenis Exp $ */
a36 2
#define ra      "$31"

d51 1
a51 1
	"	sd      "ra",24($sp)		\n"
d55 1
a55 1
	"       sd	"ra",24($sp)		\n"
d74 1
a74 1
	"	ld	"ra",24($sp)		\n"	\
d78 1
a78 1
	"	j	"ra"			\n"	\
@


1.5
log
@Add assembly code to set up the arguments for the common C startup code.  This
means we no longer rely on how the C compiler sets up the initial stack frame
and allows us to get rid of MD_NO_CLEANUP.

ok deraadt@@, guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.4 2013/12/04 00:20:31 deraadt Exp $ */
d102 2
@


1.4
log
@correct frame handling
with and ok guenther
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.3 2013/12/03 06:21:41 guenther Exp $ */
d90 17
d115 1
a115 26
#define	MD_START		__start
#define	MD_START_ARGS		void

/*
 * XXX no cleanup() callback passed to __start yet.  Need to pull
 * it from v0 in ASM? 
 */
#define	MD_NO_CLEANUP


/*
 * Do GP register setup and find the kframe struct. Differs depending
 * on shared lib stuff or not.
 * XXX just above the saved frame pointer?
 *	kfp = (struct kframe *) (&param-1);
 */
#if defined(_NO_ABICALLS)
#define	SETUP_KFP(kfp)					\
	asm("	dla	$28,_gp				\n" \
	"	daddiu	%0,$29,32" : "=r" (kfp))
#else
#define	SETUP_KFP(kfp)					\
	asm("	daddiu	%0,$29,48" : "=r" (kfp))
#endif


a116 1
	struct	kframe *kfp;			\
a119 1
	SETUP_KFP(kfp);				\
@


1.3
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.2 2004/09/09 17:45:26 pefo Exp $ */
d92 1
a92 1
	int	kargc;
a118 1
#if defined(__GNUC__) && __GNUC__ > 3
d120 1
a120 5
	asm("	daddiu	%0,$29,64" : "=r" (kfp))
#else
#define	SETUP_KFP(kfp)					\
	asm("	daddiu	%0,$29,80" : "=r" (kfp))
#endif
@


1.2
log
@Shared libs now works. Changes here for ABI64.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.1 2004/08/06 22:21:16 pefo Exp $ */
d90 48
@


1.1
log
@csu stuff for sgi et al
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.1 2004/01/08 14:59:15 drahn Exp $ */
d5 1
d37 21
a57 28
#if 0
#define MD_SECT_CALL_FUNC(section, func) \
	__asm (".section "#section", \"ax\"\n"	\
	"	bl " #func "\n"		\
	"	.previous")

#define MD_SECTION_PROLOGUE(sect, entry_pt)	\
	__asm (					\
	".section "#sect",\"ax\",@@progbits	\n" \
	"	.globl " #entry_pt "		\n" \
	"	.type " #entry_pt ",@@function	\n" \
	"	.align 4			\n" \
	#entry_pt":				\n" \
	"	stwu	%r1,-16(%r1)		\n" \
	"	mflr	%r0			\n" \
	"	stw	%r0,12(%r1)		\n" \
	"	/* fall thru */			\n" \
	"	.previous")


#define MD_SECTION_EPILOGUE(sect)		\
	__asm (					\
	".section "#sect",\"ax\",@@progbits	\n" \
	"	lwz	%r0,12(%r1)		\n" \
	"	mtlr	%r0			\n" \
	"	addi	%r1,%r1,16		\n" \
	"	blr				\n" \
	"	.previous")
d59 31
@

