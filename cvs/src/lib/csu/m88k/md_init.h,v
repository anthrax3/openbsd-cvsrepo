head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.8
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.6
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.10
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.03.24.05.27.19;	author guenther;	state Exp;
branches;
next	1.4;
commitid	cLl4FNtsUqRv0WJn;

1.4
date	2016.03.20.02.32.39;	author guenther;	state Exp;
branches;
next	1.3;
commitid	va8OhMk7nsI8YWCs;

1.3
date	2015.09.01.05.40.06;	author guenther;	state Exp;
branches;
next	1.2;
commitid	AUiGrkvnwcUfa8tR;

1.2
date	2013.12.03.06.21.41;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.05.11.20.55;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Unbreak arm and m88k: COPY relocations for weak symbols that are overloaded
with strong symbols in ld.so don't do what we need, so put definitions back
in crt0 and make ld.so update __progname like it does environ.

report and testing patrick@@ jsg@@
@
text
@/*	$OpenBSD: md_init.h,v 1.4 2016/03/20 02:32:39 guenther Exp $	*/

/*
 * Copyright (c) 2012 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define	MD_SECT_CALL_FUNC(section, func) __asm (			\
	"\t.section\t" #section ",\"ax\",@@progbits\n"			\
	"\tbsr\t" #func "\n"					\
	"\t.previous")

#define	MD_SECTION_PROLOGUE(section, entry) __asm (			\
	"\t.section\t" #section ",\"ax\",@@progbits\n"			\
	"\t.globl\t" #entry "\n"					\
	"\t.type\t" #entry ",@@function\n"				\
	"\t.align\t2\n"							\
	#entry ":\n"							\
	"\tsubu\t%r31, %r31, 16\n"					\
	"\tst\t%r1, %r31, 0\n"						\
	"\t.previous")

#define	MD_SECTION_EPILOGUE(section) __asm(				\
	"\t.section\t" #section ",\"ax\",@@progbits\n"			\
	"\tld\t%r1, %r31, 0\n"						\
	"\tjmp.n\t%r1\n"						\
	"\taddu\t%r31, %r31, 16\n"					\
	"\t.previous")

/*
 * When a program begins, r31 points to a structure passed by the kernel.
 *
 * This structure contains argc, the argv[] NULL-terminated array, and
 * the envp[] NULL-terminated array.
 *
 * Our start code starts with two nops because execution may skip up to
 * two instructions; see setregs() in the kernel for details.
 *
 * The definitions of environ and __progname prevent the creation
 * of COPY relocations for WEAK symbols.
 */
#define	MD_CRT0_START					\
	char **environ, *__progname;			\
	__asm(						\
	"	.text					\n" \
	"	.align 3				\n" \
	"	.globl __start				\n" \
	"	.globl _start				\n" \
	"__start:					\n" \
	"_start:					\n" \
	"	or	%r0, %r0, %r0			\n" \
	"	or	%r0, %r0, %r0			\n" \
	"	ld	%r2, %r31, 0	/* argc */	\n" \
	"	addu	%r3, %r31, 4	/* argv */	\n" \
	"	lda	%r4, %r3[%r2]			\n" \
	"	br.n	___start			\n" \
	"	 addu	%r4, %r4, 4			\n" \
	"	 /* envp = argv + argc + 1 */		\n" \
	"	.previous");
@


1.4
log
@Rearrange C runtime bits: now that ld.so exports environ and __progname,
move their definitions and initialization in static links to libc.a
Make crt0 always invoke a new func _csu_finish() in libc to process the auxv
and to either register the ld.so cleanup function (in dynamic links) or
initialize environ and __progname and do MC_DISABLE_KBIND (in static links).
In libc, get pagesize from auxv; cache that between getpagesize() and
sysconf(_SC_PAGESIZE)

ok mpi@@ "good time" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md_init.h,v 1.3 2015/09/01 05:40:06 guenther Exp $	*/
d49 3
d54 1
@


1.3
log
@In static binaries, invoke kbind() once to disable it.

With much assistance from miod@@
ok deraadt@@@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md_init.h,v 1.2 2013/12/03 06:21:41 guenther Exp $	*/
a66 9

#include <sys/syscall.h>
#define	MD_DISABLE_KBIND						\
	do {								\
		register long syscall_num __asm("r13") = SYS_kbind;	\
		register void *arg1 __asm("r2") = NULL;			\
		__asm volatile("tb0 0, %%r0, 450; or %%r0, %%r0, %%r0"	\
		    : "+r" (arg1) : "r" (syscall_num) : "r3", "cc");	\
	} while (0)
@


1.2
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md_init.h,v 1.1 2013/01/05 11:20:55 miod Exp $	*/
d67 9
@


1.1
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 27
@

