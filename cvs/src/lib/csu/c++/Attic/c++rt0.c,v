head	1.8;
access;
symbols
	OPENBSD_3_4:1.7.0.8
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.12
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2004.01.04.17.27.31;	author drahn;	state dead;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.20;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.02.01.17.02.47;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	98.09.15.11.01.51;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	98.02.09.19.28.36;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.02.08.04.42.46;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.02.03.21.51.52;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@c++rt0 is a relic. It shall go away.
@
text
@/*	$OpenBSD: c++rt0.c,v 1.7 2002/02/16 21:27:20 millert Exp $	*/
/*	$NetBSD: c++rt0.c,v 1.6 1997/12/29 15:36:50 pk Exp $	*/

/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Run-time module for GNU C++ compiled shared libraries.
 *
 * The linker constructs the following arrays of pointers to global
 * constructors and destructors. The first element contains the
 * number of pointers in each.
 * The tables are also null-terminated.
 */
#include <stdlib.h>
#include <sys/exec.h>

#if !defined(NATIVE_EXEC_ELF)
/*
 * We make the __{C,D}TOR_LIST__ symbols appear as type `SETD' and
 * include a dummy local function in the set. This keeps references
 * to these symbols local to the shared object this module is linked to.
 */
static void dummy(void) { return; }

/* Note: this is "a.out" dependent. */
__asm(".stabs \"___CTOR_LIST__\",22,0,0,_dummy");
__asm(".stabs \"___DTOR_LIST__\",22,0,0,_dummy");
#endif

extern void (*__CTOR_LIST__[])(void);
extern void (*__DTOR_LIST__[])(void);

static void	__dtors(void);
static void	__ctors(void);

static void
__dtors()
{
	unsigned long i = (unsigned long) __DTOR_LIST__[0];
	void (**p)(void) = __DTOR_LIST__ + i;
 
	while (i--)
		(**p--)();
}

static void
__ctors()
{
	void (**p)(void) = __CTOR_LIST__ + 1;

	while (*p)
		(**p++)();
}

#if !defined(NATIVE_EXEC_ELF)
extern void __init(void) asm(".init");
extern void __fini(void) asm(".fini");
#else
extern void __init(void) __attribute__ ((section (".init")));
extern void __fini(void) __attribute__ ((section (".fini")));
#endif

void
__init()
{
	static int initialized = 0;

	/*
	 * Call global constructors.
	 * Arrange to call global destructors at exit.
	 */
	if (!initialized) {
		initialized = 1;
		__ctors();
	}

}

void
__fini()
{
	/*
	 * Call global destructors.
	 */
	__dtors();
}
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: c++rt0.c,v 1.6 1999/02/01 17:02:47 pefo Exp $	*/
@


1.6
log
@When compiling for ELF use .init and .fini sections instead of special syms.
@
text
@d1 1
a1 1
/*	$OpenBSD: c++rt0.c,v 1.5 1998/09/15 11:01:51 pefo Exp $	*/
d51 1
a51 1
static void dummy __P((void)) { return; }
d58 2
a59 2
extern void (*__CTOR_LIST__[]) __P((void));
extern void (*__DTOR_LIST__[]) __P((void));
d61 2
a62 2
static void	__dtors __P((void));
static void	__ctors __P((void));
d84 2
a85 2
extern void __init __P((void)) asm(".init");
extern void __fini __P((void)) asm(".fini");
d87 2
a88 2
extern void __init __P((void)) __attribute__ ((section (".init")));
extern void __fini __P((void)) __attribute__ ((section (".fini")));
@


1.5
log
@If something is a.out dependent... don't use if in elf ports...
@
text
@d1 1
a1 1
/*	$OpenBSD: c++rt0.c,v 1.4 1998/02/09 19:28:36 niklas Exp $	*/
d83 1
d86 4
@


1.4
log
@merge in rev 1.2
@
text
@d1 1
a1 1
/*	$OpenBSD: c++rt0.c,v 1.3 1998/02/08 04:42:46 niklas Exp $	*/
d43 1
d45 1
d56 1
@


1.3
log
@Update from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a43 1

d55 2
a56 2
void (*__CTOR_LIST__[0]) __P((void));
void (*__DTOR_LIST__[0]) __P((void));
@


1.2
log
@Make __{CTOR,DTOR}_LIST__ extern instead of array of size zero
@
text
@d1 3
a31 2
 *
 *	$Id: c++rt0.c,v 1.1.1.1 1995/10/18 08:41:17 deraadt Exp $
d44 14
a57 2
extern void (*__CTOR_LIST__[]) __P((void));
extern void (*__DTOR_LIST__[]) __P((void));
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
 *	$Id: c++rt0.c,v 1.4 1995/09/23 22:38:22 pk Exp $
d43 2
a44 2
void (*__CTOR_LIST__[0]) __P((void));
void (*__DTOR_LIST__[0]) __P((void));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
