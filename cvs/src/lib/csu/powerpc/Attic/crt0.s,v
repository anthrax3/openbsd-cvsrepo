head	1.8;
access;
symbols
	OPENBSD_3_2:1.7.0.10
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.8
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.6
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	powerpc_1:1.1.1.1;
locks; strict;
comment	@# @;


1.8
date	2003.02.26.18.50.35;	author drahn;	state dead;
branches;
next	1.7;

1.7
date	2000.06.28.04.56.44;	author rahnds;	state Exp;
branches;
next	1.6;

1.6
date	99.08.20.14.11.36;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	99.07.23.03.17.55;	author rahnds;	state Exp;
branches;
next	1.4;

1.4
date	99.03.13.01.39.22;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	99.01.28.05.01.15;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	98.07.05.00.00.00;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.53.48;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.53.48;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Switch to a C version of powerpc crt0 file. easier to read. moves
_progname storage into data instead of stack.
@
text
@#	$OpenBSD: crt0.s,v 1.7 2000/06/28 04:56:44 rahnds Exp $
	
	.section ".data"
	.comm	environ, 4
	.globl	__progname
__progname:
	.long L1
L1:	.long 0		# null string plus padding

	

	.section ".text"
	.globl _start
	.type	_start,@@function
_start:	
	
	# squirrel away the arguments for main
	mr 13, 3
	mr 14, 4
	mr 15, 5
	mr 16, 6

	# make certain space exists on the stack for the
	# 'stw X, 4(1)' at the beginning of functions.
	subi	1, 1, 16
	li	0, 0
	stw	0, 0(1)

	# determine the program name (__progname)
	mr 4, 14
	lwz 28, 0(4)		# r28 = argv[0] (program name)
	cmpwi 28, 0		# argv[0] == NULL?
	beq call_main		# yep forget setup of progname
	mr 3, 28		# r3 = argv[0]
	li 4, '/'		# r4 = '/'
	.extern strrchr
	bl strrchr		# strrchr(argv[0], '/')
	cmpwi 3, 0		#    == 0?
	beq no_slash_found	# not found, use argv[0] still in r28
	addi 28, 3, 1		# was found, point at char after '/'
no_slash_found:
	# store the address of the basename found in argv[0]
	lis 31, __progname@@HA
	stw 28, __progname@@L(31)

	lis	26, environ@@HA
	stw	15, environ@@L(26)

call_main:	
#ifdef MCRT0
	lis	3, _mcleanup@@ha
	addi	3, 3, _mcleanup@@l
	bl atexit
	lis	3, eprol@@ha
	addi	3, 3, eprol@@l
	lis	4, _etext@@ha
	addi	4, 4, _etext@@l
	bl monstartup
#endif
#ifndef SCRT0
	.globl __init
	bl __init
#endif
	# recover those saved registers
	mr 3, 13
	mr 4, 14
	mr 5, 15
	mr 6, 16
	
	bl main
	.extern exit
	bl exit

eprol:
#if 0
	.globl __main
__main:
#endif
	.globl __eabi
	.type  __eabi,@@function
__eabi:
	blr

@


1.7
log
@Powerpc was missing the scrt.o startup file. now used by the ramdisk instbin.
also scrt does not support c++ ctors/dtors thus does not require
crtbegin.o/crtend.o which it normally does.
@
text
@d1 1
a1 1
#	$OpenBSD: crt0.s,v 1.6 1999/08/20 14:11:36 niklas Exp $
@


1.6
log
@Fix RCS Ids
@
text
@d1 1
a1 1
#	$OpenBSD$
a48 1
	.globl __init
d60 2
d63 1
@


1.5
log
@Eliminate namespace pollution, the crt0 file should not conflict
with the "C" function start();
@
text
@d1 1
a1 1

@


1.4
log
@Fix loading of constant into upper portion off register, prevously
if the register being loaded into was not value zero would end up
with wrong value. Only affected profiling executables.
@
text
@a12 2
	.globl start
start:	
@


1.3
log
@update for binutils 2.9.1, whenever it might show up... The changes
are cleanup that would not work correctly with the newer version. works
fine with the current (old) version of gas/ld.

ALSO:
Found a very long outstanding bug on the powerpc port. whenever
nroff was run, say during a build, it would complain about memory being
freed twice. Found the cause of this was that *roff which is written in
C++ was using globals that had constructors/destructors and due to a
bug in the crt code, the destructors were getting called when a program
exited via falling out of the main loop. calling exit directly would
not exersize the bug that ran the destructors twice. THIS BUG IS NOW FIXED.
@
text
@d54 1
a54 1
	addis	3, 3, _mcleanup@@ha
d57 1
a57 1
	addis	3, 3, eprol@@ha
d59 1
a59 1
	addis	4, 4, _etext@@ha
@


1.2
log
@Changes to support profiling on the powerpc port, startup code.
@
text
@a71 3
	mr 13, 3
	bl __fini
	mr 3, 13
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
	.data 1
d12 1
a12 1
	.text
d16 1
d25 6
d32 1
d49 1
a49 1
	stw	5, environ@@L(26)
d51 1
d53 10
a62 1
	.globl __init
d77 2
d81 1
d83 1
@


1.1.1.1
log
@Check-in of powerpc csu support.
NOTE: This will not work until the other pieces are checked in.
This is primarily the NetBSD powerpc port, with modifications
to support ELF.

A change needs to be made to one of the bsd.*.mk files to support
DESTDIR compilation with the crtbegin and crtend files.

@
text
@@
