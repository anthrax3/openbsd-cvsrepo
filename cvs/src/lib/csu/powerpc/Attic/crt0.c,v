head	1.9;
access;
symbols
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.12
	OPENBSD_5_0:1.5.0.10
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2013.12.03.06.21.41;	author guenther;	state dead;
branches;
next	1.8;

1.8
date	2013.12.01.17.18.31;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2012.12.31.10.07.51;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2012.11.01.10.33.44;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.16.16.37.14;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.14.19.45.20;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.25.17.59.42;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.28.18.05.51;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.26.18.50.35;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@/*	$OpenBSD: crt0.c,v 1.8 2013/12/01 17:18:31 guenther Exp $	*/
/*	$NetBSD: crt0.c,v 1.1 1996/09/12 16:59:02 cgd Exp $	*/
/*
 * Copyright (c) 1995 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <stdlib.h>
#include <sys/syscall.h>

char **environ;
char * __progname = "";

char __progname_storage[NAME_MAX+1];

#ifdef MCRT0
extern void     monstartup(u_long, u_long);
extern void     _mcleanup(void);
extern unsigned char _etext, _eprol;
#endif /* MCRT0 */

static inline char * _strrchr(const char *p, char ch);

#define STR(x) __STRING(x) 
__asm(
"	.text								\n"
"	.section	\".text\"					\n"
"	.align 2							\n"
"	.size	__got_start, 0						\n"
" 	.type	__got_start, @@object					\n"
"	.size	__got_end, 0						\n"
" 	.type	__got_end, @@object					\n"
"	.weak	__got_start						\n"
"	.weak	__got_end						\n"
"	.globl	_start							\n"
"	.type	_start, @@function					\n"
"	.globl	__start							\n"
"	.type	__start, @@function					\n"
"_start:								\n"
"__start:								\n"
"	# move argument registers to saved registers for startup flush	\n"
"	mr %r26, %r3							\n"
"	mr %r25, %r4							\n"
"	mr %r24, %r5							\n"
"	mr %r23, %r6							\n"
"	mr %r22, %r7							\n"
"	mflr	%r27	/* save off old link register */		\n"
"	bl	1f							\n"
"	# this instruction never gets executed but can be used		\n"
"	# to find the virtual address where the page is loaded.		\n"
"	bl _GLOBAL_OFFSET_TABLE_@@local-4				\n"
"1:									\n"
"	mflr	%r6		# this stores where we are (+4)		\n"
"	lwz	%r18, 0(%r6)	# load the instruction at offset_sym	\n"
"				# it contains an offset to the location	\n"
"				# of the GOT.				\n"
"									\n"
"	rlwinm %r18,%r18,0,8,30 # mask off the offset portion of the instr. \n"
"									\n"
"	/*								\n"
"	 * these adds effectively calculate the value the		\n"
"	 * bl _GLOBAL_OFFSET_TABLE_@@local-4				\n"
"	 * operation that would be below would calculate.		\n"
"	 */								\n"
"	add	%r28, %r18, %r6						\n"
"									\n"
"	addi	%r3,%r28,4		# calculate the actual got addr \n"
"	lwz	%r0,__got_start@@got(%r3)				\n"
"	cmpwi	%r0,0							\n"
"	beq	4f							\n"
"	cmpw	%r0,%r28						\n"
"	bne	4f							\n"
"	lwz	%r4,__got_end@@got(%r3)					\n"
"	cmpwi	%r4,0							\n"
"	beq	2f							\n"
"									\n"
"	sub	%r4, %r4, %r0						\n"
"	b 3f								\n"
"2:									\n"
"	li	%r4, 4							\n"
"3:									\n"
"									\n"
"	/* mprotect GOT to eliminate W+X regions in static binaries */	\n"
"	li	%r0, " STR(SYS_mprotect) "				\n"
"	mr	%r3, %r28						\n"
"	li	%r5, 5	/* (PROT_READ|PROT_EXEC) */			\n"
"	sc								\n"
"									\n"
"4:									\n"
"	li	%r0, 0							\n"
"	# flush the blrl instruction out of the data cache		\n"
"	dcbf	%r6, %r18						\n"
"	sync								\n"
"	isync								\n"
"	# make certain that the got table addr is not in the icache	\n"
"	icbi	%r6, %r18						\n"
"	sync								\n"
"	isync								\n"
"	mtlr %r27							\n"
"	# move argument registers back from saved registers		\n"
"	mr %r3, %r26							\n"
"	mr %r4, %r25							\n"
"	mr %r5, %r24							\n"
"	mr %r6, %r23							\n"
"	mr %r7, %r22							\n"
"	b ___start							\n"
);

void
___start(int argc, char **argv, char **envp, void *aux, void (*cleanup)(void))
{
	char *s;

	environ = envp;

	if ((__progname = argv[0]) != NULL) {   /* NULL ptr if argc = 0 */
		if ((__progname = _strrchr(__progname, '/')) == NULL)
			__progname = argv[0];
		else
			__progname++;
		for (s = __progname_storage; *__progname &&
		   s < &__progname_storage[sizeof __progname_storage - 1]; )
			*s++ = *__progname++;
		*s = '\0';
		__progname = __progname_storage;
	}

	if (cleanup)
		atexit(cleanup);

#ifdef MCRT0
	atexit(_mcleanup);
	monstartup((u_long)&_eprol, (u_long)&_etext);
#endif

	__init();

	exit(main(argc, argv, environ));
}

static inline char *
_strrchr(const char *p, char ch)
{
	char *save;
	
	for (save = NULL;; ++p) {
		if (*p == ch)
			save = (char *)p;
		if (!*p)
			return(save);
	}
/* NOTREACHED */
}
asm ("	.section \".text\" \n_eprol:");

@


1.8
log
@mips64 no longer uses scrt0.o, and it was identical to crt0.o anyway.
Delete unused #ifndef SCRT0 conditionals.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.7 2012/12/31 10:07:51 miod Exp $	*/
@


1.7
log
@Spell `calculation' correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.6 2012/11/01 10:33:44 kettenis Exp $	*/
a161 1
#ifndef SCRT0
a162 1
#endif
@


1.6
log
@Register cleanup handler passed by ld.so with atexit(3).

ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.5 2009/06/16 16:37:14 drahn Exp $	*/
d89 1
a89 1
"	 * operation that would be below would calulate.		\n"
@


1.5
log
@Do not break gcc -Z on powerpc. mprotect the got only if it is padded.
Diff written and tweaked by kurt@@ and myself.
ok kurt@@, now is agood time deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.4 2009/01/14 19:45:20 kurt Exp $	*/
d153 4
a156 3
#if 0
	atexit(cleanup);
#endif
@


1.4
log
@Re-enable pie support on macppc (still off by default but usable
again). Due to the way executable sections are loaded by
the kernel, a one page .got section with the blrl instruction may
be in the data cache and not flushed causing random crashes
upon process startup. Flush the data cache before ___start()
jumps there. Also mprotect the .got section to be read/exec
instead of read/write/exec. ld.so knows how to cope and static
binaries don't write to .got.

written by and okay drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.3 2003/08/25 17:59:42 drahn Exp $	*/
d55 10
a64 4
"	.globl  _start							\n"
"	.type   _start, @@function					\n"
"	.globl  __start							\n"
"	.type   __start, @@function					\n"
d79 2
a80 2
"	mflr	%r5		# this stores where we are (+4)		\n"
"	lwz	%r18, 0(%r5)	# load the instruction at offset_sym	\n"
d91 1
a91 2
"	add	%r28, %r18, %r5						\n"
"	mr	%r6, %r5		# save offset for later use	\n"
d93 17
a109 1
"	/* mprotect GOT-4 for correct execution of blrl instruction */	\n"
a111 1
"	li	%r4, 4							\n"
d115 1
a115 2
"	mr	%r5, %r6						\n"
"									\n"
d118 1
a118 1
"	dcbf	%r5, %r18						\n"
d122 1
a122 1
"	icbi	%r5, %r18						\n"
@


1.3
log
@Define both _start and __start in crt0, all of the other architectures do.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.2 2003/02/28 18:05:51 deraadt Exp $	*/
d35 1
d50 66
a115 3
__asm(".globl __start");
__asm(".type __start@@function");
__asm("__start = _start");
d117 1
a117 1
_start(int argc, char **argv, char **envp, void *aux, void (*cleanup)(void))
@


1.2
log
@copy basename of argv[0] to bss for __progname, so that large stack smash
does not make propolice reporting ineffective; millert miod ok
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.1 2003/02/26 18:50:35 drahn Exp $	*/
d49 3
@


1.1
log
@Switch to a C version of powerpc crt0 file. easier to read. moves
_progname storage into data instead of stack.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.7 2002/02/16 21:27:20 millert Exp $	*/
d39 1
a39 1
char __progname_storage[MAXPATHLEN];
@

