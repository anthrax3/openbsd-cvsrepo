head	1.15;
access;
symbols
	OPENBSD_5_4:1.14.0.24
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.22
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.20
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.18
	OPENBSD_5_0:1.14.0.16
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.14
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.12
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.8
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.10
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.6
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.4
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.16
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.14
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.12
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.10
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.6
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2013.09.08.18.06.28;	author miod;	state dead;
branches;
next	1.14;

1.14
date	2008.01.29.13.02.31;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.05.09.02.03;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.22.19.15.39;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.14.12.37.51;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.11.14.05.42;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.05.22.09.53;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.20;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.01.18.17.56;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.11.15.22.37;	author art;	state Exp;
branches;
next	1.5;

1.5
date	99.12.09.18.10.24;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	99.08.24.20.41.04;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	99.08.20.14.11.34;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	97.07.01.19.14.46;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove a.out leftovers. (it's september now)
@
text
@/*	$OpenBSD: common.c,v 1.14 2008/01/29 13:02:31 krw Exp $	*/
/*	$NetBSD: common.c,v 1.4 1995/09/23 22:34:20 pk Exp $	*/
/*
 * Copyright (c) 1993,1995 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifdef DYNAMIC

typedef int (*rtld_entry_fn)(int, struct crt_ldso *);
static struct ld_entry	**ld_entry;

static void
__load_rtld(dp)
	struct _dynamic *dp;
{
	static struct crt_ldso	crt;
	struct exec	hdr;
	rtld_entry_fn	entry;

#ifdef DEBUG
	/* Provision for alternate ld.so - security risk! */
	if ((crt.crt_ldso = _getenv("LDSO")) == NULL)
#endif
		crt.crt_ldso = LDSO;

	crt.crt_ldfd = open(crt.crt_ldso, 0, 0);
	if (crt.crt_ldfd == -1) {
		/* If we don't need ld.so then just return instead bail out. */
		if (!LD_NEED(dp)) {
			ld_entry = 0;
			return;
		}
		_FATAL("No ld.so\n");
	}

	/* Read LDSO exec header */
	if (read(crt.crt_ldfd, &hdr, sizeof hdr) != sizeof hdr) {
		_FATAL("Failure reading ld.so\n");
	}
	if (N_GETMAGIC(hdr) != ZMAGIC && N_GETMAGIC(hdr) != QMAGIC) {
		_FATAL("Bad magic: ld.so\n");
	}

	/* We use MAP_ANON */
	crt.crt_dzfd = -1;

	/* Map in ld.so */
	crt.crt_ba = mmap(0, hdr.a_text+hdr.a_data+hdr.a_bss,
			PROT_READ|PROT_EXEC,
			MAP_PRIVATE,
			crt.crt_ldfd, N_TXTOFF(hdr));
	if (crt.crt_ba == -1) {
		_FATAL("Cannot map ld.so\n");
	}

/* !!!
 * This is gross, ld.so is a ZMAGIC a.out, but has `sizeof(hdr)' for
 * an entry point and not at PAGSIZ as the N_*ADDR macros assume.
 */
#undef N_DATADDR
#undef N_BSSADDR
#define N_DATADDR(x)	((x).a_text)
#define N_BSSADDR(x)	((x).a_text + (x).a_data)

	/*
	 * Map in data segment of ld.so writable
	 * The segment must be PROT_EXEC too because the
	 * GOT is located there.
	 */
	if (mmap(crt.crt_ba+N_DATADDR(hdr), hdr.a_data,
			PROT_READ|PROT_WRITE|PROT_EXEC,
			MAP_FIXED|MAP_PRIVATE,
			crt.crt_ldfd, N_DATOFF(hdr)) == -1) {
		_FATAL("Cannot map ld.so\n");
	}

	/* Map bss segment of ld.so zero */
	if (hdr.a_bss && mmap(crt.crt_ba+N_BSSADDR(hdr), hdr.a_bss,
			PROT_READ|PROT_WRITE,
			MAP_FIXED|MAP_ANON|MAP_PRIVATE,
			crt.crt_dzfd, 0) == -1) {
		_FATAL("Cannot map ld.so\n");
	}

	crt.crt_dp = dp;
	crt.crt_ep = environ;
	crt.crt_bp = (caddr_t)_callmain;
	crt.crt_prog = __progname;

	ld_entry = &crt.crt_ldentry;
	entry = (rtld_entry_fn)(crt.crt_ba + sizeof hdr);
	if ((*entry)(CRT_VERSION_BSD_4, &crt) == -1) {
		/* Feeble attempt to deal with out-dated ld.so */
#		define str "crt0: update /usr/libexec/ld.so\n"
		(void)write(2, str, sizeof(str));
#		undef str
		if ((*entry)(CRT_VERSION_BSD_3, &crt) == -1) {
			_FATAL("ld.so failed\n");
		}
		ld_entry = &dp->d_entry;
		return;
	}
	atexit((*ld_entry)->dlexit);
}

/*
 * DL stubs
 */

void *
dlopen(name, mode)
	const char	*name;
	int		mode;
{
	if ((*ld_entry) == NULL)
		return NULL;

	return ((*ld_entry)->dlopen)(name, mode);
}

int
dlclose(fd)
	void	*fd;
{
	if ((*ld_entry) == NULL)
		return -1;

	return ((*ld_entry)->dlclose)(fd);
}

void *
dlsym(fd, name)
	void		*fd;
	const char	*name;
{
	if ((*ld_entry) == NULL)
		return NULL;

	return ((*ld_entry)->dlsym)(fd, name);
}

int
dlctl(fd, cmd, arg)
void	*fd, *arg;
int	cmd;
{
	if ((*ld_entry) == NULL)
		return -1;

	return ((*ld_entry)->dlctl)(fd, cmd, arg);
}

const char *
dlerror()
{
	int     error;

	if ((*ld_entry) == NULL ||
	    ((*ld_entry)->dlctl)(NULL, DL_GETERRNO, &error) == -1)
		return "Service unavailable";

	if (error == 0)
		return NULL;
	return (char *)strerror(error);
}

/*
 * Support routines
 */

#ifdef DEBUG
static int
_strncmp(s1, s2, n)
	register char *s1, *s2;
	register int n;
{

	if (n == 0)
		return (0);
	do {
		if (*s1 != *s2++)
			return (*(unsigned char *)s1 - *(unsigned char *)--s2);
		if (*s1++ == 0)
			break;
	} while (--n != 0);
	return (0);
}

static char *
_getenv(name)
	register char *name;
{
	extern char **environ;
	register int len;
	register char **P, *C;

	for (C = name, len = 0; *C && *C != '='; ++C, ++len);
	for (P = environ; *P; ++P)
		if (!_strncmp(*P, name, len))
			if (*(C = *P + len) == '=') {
				return(++C);
			}
	return (char *)0;
}
#endif

#endif /* DYNAMIC */

static char *
_strrchr(p, ch)
register char *p, ch;
{
	register char *save;

	for (save = NULL;; ++p) {
		if (*p == ch)
			save = (char *)p;
		if (!*p)
			return(save);
	}
/* NOTREACHED */
}
@


1.14
log
@More read/write result checking fixes to avoid unsigned comparisons vs
-1.

ok henning@@ beck@@ ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.13 2004/01/05 09:02:03 miod Exp $	*/
@


1.13
log
@Do not have non-dynamic crt0 depend upon libc's strrchr() function on a.out.
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.12 2002/07/22 19:15:39 art Exp $	*/
d64 1
a64 1
	if (read(crt.crt_ldfd, &hdr, sizeof hdr) < sizeof hdr) {
@


1.12
log
@Remove some dead ifdefs to make the code more readable.
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.11 2002/07/14 12:37:51 art Exp $	*/
d234 2
a249 2

#endif /* DYNAMIC */
@


1.11
log
@Fix an oversight in revision 1.9. ld_entry was set in one more spot.
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.10 2002/07/11 14:05:42 art Exp $	*/
a45 3
#if defined(sun) && defined(DUPZFD)
	int		dupzfd;
#endif
a70 8
#ifdef sun
	/* Get bucket of zeroes */
	crt.crt_dzfd = open("/dev/zero", 0, 0);
	if (crt.crt_dzfd == -1) {
		_FATAL("No /dev/zero\n");
	}
#endif
#ifdef BSD
a72 7
#endif

#if defined(sun) && defined(DUPZFD)
	if ((dupzfd = dup(crt.crt_dzfd)) < 0) {
		_FATAL("Cannot dup /dev/zero\n");
	}
#endif
a82 1
#ifdef BSD
a90 1
#endif
a116 4
#ifdef sun
	/* Call Sun's ld.so entry point: version 1, offset crt */
	__call(CRT_VERSION_SUN, &crt, crt.crt_ba + sizeof hdr);
#else
a130 9
#endif

#if defined(sun) && defined(DUPZFD)
	if (dup2(dupzfd, crt.crt_dzfd) < 0) {
		_FATAL("Cannot dup2 /dev/zero\n");
	}
	(void)close(dupzfd);
#endif
	return;
@


1.10
log
@We need to map the data segment of ld.so with PROT_EXEC for the GOT.
This is in preparation for actually honoring exec protection in sparc pmap.
NOTICE! You really want to rebuild the whole userland with this change
before the kernel fix goes in. Otherwise all shared binaries will dump core.
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.9 2002/06/05 22:09:53 espie Exp $	*/
d151 1
a151 1
		ld_entry = dp->d_entry;
@


1.9
log
@one more level of indirection for dlopen structure.
Allows dlopen to be used much earlier, e.g., in dynamic constructors.

From NetBSD.

okay art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.8 2002/02/16 21:27:20 millert Exp $	*/
d112 5
a116 1
	/* Map in data segment of ld.so writable */
d118 1
a118 1
			PROT_READ|PROT_WRITE,
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.7 2001/06/01 18:17:56 deraadt Exp $	*/
d37 1
a37 1
static struct ld_entry	*ld_entry;
d137 1
d150 1
a150 2
	ld_entry = crt.crt_ldentry;
	atexit(ld_entry->dlexit);
d171 1
a171 1
	if (ld_entry == NULL)
d174 1
a174 1
	return (ld_entry->dlopen)(name, mode);
d181 1
a181 1
	if (ld_entry == NULL)
d184 1
a184 1
	return (ld_entry->dlclose)(fd);
d192 1
a192 1
	if (ld_entry == NULL)
d195 1
a195 1
	return (ld_entry->dlsym)(fd, name);
d203 1
a203 1
	if (ld_entry == NULL)
d206 1
a206 1
	return (ld_entry->dlctl)(fd, cmd, arg);
d214 2
a215 2
	if (ld_entry == NULL ||
	    (*ld_entry->dlctl)(NULL, DL_GETERRNO, &error) == -1)
@


1.7
log
@proto for dlerror() changed
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.6 2001/05/11 15:22:37 art Exp $	*/
d36 1
a36 1
typedef int (*rtld_entry_fn) __P((int, struct crt_ldso *));
@


1.6
log
@MAP_COPY -> MAP_PRIVATE
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.5 1999/12/09 18:10:24 espie Exp $	*/
d209 1
a209 1
char *
@


1.5
log
@dlopen and dlsym take const char * parameters.
Fix prototypes, propagate const where applicable.
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.4 1999/08/24 20:41:04 niklas Exp $	*/
d95 1
a95 1
			MAP_COPY,
d115 1
a115 1
			MAP_FIXED|MAP_COPY,
d123 1
a123 1
			MAP_FIXED|MAP_ANON|MAP_COPY,
@


1.4
log
@Do not error out if we have been statically linked but would like ld.so for dlopen
and it is not there.
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.3 1999/08/20 14:11:34 niklas Exp $	*/
d168 2
a169 2
	char	*name;
	int	mode;
d189 2
a190 2
	void	*fd;
	char	*name;
@


1.3
log
@Fix RCS Ids
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.4 1995/09/23 22:34:20 pk Exp $	*/
d58 5
@


1.2
log
@if no error, dlerror() should return NULL
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d212 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
