head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.10
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.8
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.30
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.28
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.24
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.26
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.03.20.02.32.39;	author guenther;	state Exp;
branches;
next	1.5;
commitid	va8OhMk7nsI8YWCs;

1.5
date	2015.09.01.05.40.06;	author guenther;	state Exp;
branches;
next	1.4;
commitid	AUiGrkvnwcUfa8tR;

1.4
date	2014.12.22.03.51.08;	author kurt;	state Exp;
branches;
next	1.3;
commitid	IDpxsqs0vh0PbV5Z;

1.3
date	2013.12.03.06.21.40;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.30.19.15.03;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.46.17;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Rearrange C runtime bits: now that ld.so exports environ and __progname,
move their definitions and initialization in static links to libc.a
Make crt0 always invoke a new func _csu_finish() in libc to process the auxv
and to either register the ld.so cleanup function (in dynamic links) or
initialize environ and __progname and do MC_DISABLE_KBIND (in static links).
In libc, get pagesize from auxv; cache that between getpagesize() and
sysconf(_SC_PAGESIZE)

ok mpi@@ "good time" deraadt@@
@
text
@/* $OpenBSD: md_init.h,v 1.5 2015/09/01 05:40:06 guenther Exp $ */

/*-
 * Copyright (c) 2001 Ross Harvey
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the NetBSD
 *      Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define MD_SECT_CALL_FUNC(section, func) \
	__asm (".section "#section", \"ax\"\n"	\
	"	call " #func "\n"		\
	"	.previous")

/*
 * Align is after because we want the function to start at the first
 * address of the section, but overall we want the section to be
 * aligned by the align amount.
 */
#define MD_SECTION_PROLOGUE(sect, entry_pt)	\
	__asm (					\
	".section "#sect",\"ax\",@@progbits	\n" \
	"	.globl " #entry_pt "		\n" \
	"	.type " #entry_pt ",@@function	\n" \
	#entry_pt":				\n" \
	"	.align 16			\n" \
	"	subq	$8,%rsp			\n" \
	"	.previous")


#define MD_SECTION_EPILOGUE(sect)		\
	__asm (					\
	".section "#sect",\"ax\",@@progbits	\n" \
	"	addq	$8,%rsp			\n" \
	"	ret				\n" \
	"	.previous")


#define	MD_CRT0_START				\
	__asm(					\
	".text					\n" \
	"	.align	8			\n" \
	"	.globl	__start			\n" \
	"	.globl	_start			\n" \
	"_start:				\n" \
	"__start:				\n" \
	"	movq	%rdx,%rcx		\n" \
	"	movq	(%rsp),%rdi		\n" \
	"	leaq	16(%rsp,%rdi,8),%rdx	\n" \
	"	leaq	8(%rsp),%rsi		\n" \
	"	subq	$8,%rsp			\n" \
	"	andq	$~15,%rsp		\n" \
	"	addq	$8,%rsp			\n" \
	"	jmp	___start		\n" \
	"	.previous")


#define	MD_RCRT0_START					\
	__asm(						\
	".text						\n" \
	"	.align	8				\n" \
	"	.globl	__start				\n" \
	"	.type	__start,@@function		\n" \
	"_start:					\n" \
	"__start:					\n" \
	"	movq	%rsp, %r12			\n" \
	"	subq	$8, %rsp			\n" \
	"	andq	$~15, %rsp			\n" \
	"	addq	$8, %rsp			\n" \
	"	pushq	%rbx				\n" \
	"	subq	$(16*8), %rsp			\n" \
	"	leaq	_DYNAMIC(%rip),%rdx		\n" \
	"	movq	%rsp, %rsi			\n" \
	"	movq	%r12, %rdi			\n" \
	"	call	_dl_boot_bind@@PLT		\n" \
	"						\n" \
	"	movq	$0, %rcx			\n" \
	"	movq	%r12, %rsp			\n" \
	"	movq	(%rsp),%rdi			\n" \
	"	leaq	16(%rsp,%rdi,8),%rdx		\n" \
	"	leaq	8(%rsp),%rsi			\n" \
	"	subq	$8,%rsp				\n" \
	"	andq	$~15,%rsp			\n" \
	"	addq	$8,%rsp				\n" \
	"	jmp	___start			\n" \
	"						\n" \
	"	.global	_dl_exit			\n" \
	"	.type	_dl_exit,@@function		\n" \
	"	.align	8				\n" \
	"_dl_exit:					\n" \
	"	movl	$(1), %eax			\n" \
	"	syscall					\n" \
	"	jb	1f				\n" \
	"	ret					\n" \
	"1:						\n" \
	"	neg	%rax				\n" \
	"	ret					\n" \
	"	.previous")
@


1.5
log
@In static binaries, invoke kbind() once to disable it.

With much assistance from miod@@
ok deraadt@@@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.4 2014/12/22 03:51:08 kurt Exp $ */
a124 8

#include <sys/syscall.h>
#define	MD_DISABLE_KBIND						\
	do {								\
		register long syscall_num __asm("rax") = SYS_kbind;	\
		__asm volatile("syscall" : "+r" (syscall_num) :		\
		    "D" (0) : "cc", "rdx", "rcx", "r11", "memory");	\
	} while (0)
@


1.4
log
@Introduce new csu0 variant for -static -pie binaries to use called
rcsu0.o where the initial 'r' is for relocatable. rcsu0.o performs
self-relocation on static pie binaries by calling a slightly modified
copy of ld.so's _dl_boot_bind() in boot.h.

The first arch implementatation is also included for amd64 where
__start calls _dl_boot_bind() and then calls ___start(). Includes
parts from kettenis@@ to help get R_X86_64_64 relocations working
and proper handling for undefined weak symbols.

This is the first part of several to get static pie self-relocating
binaries working. binutils, gcc and kernel changes are forthcoming
to complete the solution, then per-arch implementations are needed
for MD_RCRT0_START in csu.

okay kettenis@@ pascal@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.3 2013/12/03 06:21:40 guenther Exp $ */
a117 1
	"	movq	%rcx, %r10			\n" \
d126 7
@


1.3
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.2 2011/03/30 19:15:03 kettenis Exp $ */
d82 45
@


1.2
log
@Make sure everything run from .init and .fini sections gets a properly aligned
stack.

ok deraadt@@, fgsch@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.1 2004/01/28 01:46:17 mickey Exp $ */
d62 19
@


1.1
log
@things for amd64; from art@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d53 1
a53 1
	"	/* fall thru */			\n" \
d60 1
@

