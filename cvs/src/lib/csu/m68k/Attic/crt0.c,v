head	1.11;
access;
symbols
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.30
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.28
	OPENBSD_5_0:1.9.0.26
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.24
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.22
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.18
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.20
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.10
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.8
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2013.12.03.06.21.41;	author guenther;	state dead;
branches;
next	1.10;

1.10
date	2013.02.02.13.29.14;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.04.16.33.05;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.28.18.05.51;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.17.21.16.01;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.17.12.53.44;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.12.12.03.01;	author heko;	state Exp;
branches;
next	1.3;

1.3
date	99.08.20.14.11.35;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	97.06.24.17.15.50;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.18;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@/* $OpenBSD: crt0.c,v 1.10 2013/02/02 13:29:14 miod Exp $ */
/* $NetBSD: crt0.c,v 1.13 2011/03/07 05:09:10 joerg Exp $ */

/*
 * Copyright (c) 1999 Klaus Klein
 * Copyright (c) 1995 Christopher G. Demetriou
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *          This product includes software developed for the
 *          NetBSD Project.  See http://www.NetBSD.org/ for
 *          information about NetBSD.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * <<Id: LICENSE,v 1.2 2000/06/14 15:57:33 cgd Exp>>
 */

#include <stdlib.h>
#include <limits.h>

static char	*_strrchr(char *, char);

char	**environ;
char	*__progname = "";
char	__progname_storage[NAME_MAX+1];

#ifdef MCRT0
extern void	monstartup(u_long, u_long);
extern void	_mcleanup(void);
extern unsigned char _etext, _eprol;
#endif /* MCRT0 */

static void ___start(int, char **, char **, void (*)(void)) __used;

__asm("\n"
"	.text				\n"
"	.align	2			\n"
"	.globl	__start			\n"
"__start:				\n"
"	movl	%sp,%a0			\n"
"	movl	(%a0)+,%d0		| argc\n"
"	movl	%a1,-(%sp)		| cleanup\n"
"	pea	4(%a0,%d0.l*4)		| envp\n"
"	movl	%a0,-(%sp)		| argv\n"
"	movl	%d0,-(%sp)		| argc\n"
"	jsr	___start");

void
___start(int argc, char **argv, char **envp,
    void (*cleanup)(void))
{
	char *s;

	environ = envp;

	if ((__progname = argv[0]) != NULL) {	/* NULL ptr if argc = 0 */
		if ((__progname = _strrchr(__progname, '/')) == NULL)
			__progname = argv[0];
		else
			__progname++;
		for (s = __progname_storage; *__progname &&
		    s < &__progname_storage[sizeof __progname_storage - 1]; )
			*s++ = *__progname++;
		*s = '\0';
		__progname = __progname_storage;
	}

	if (cleanup)
		atexit(cleanup);

#ifdef MCRT0
	atexit(_mcleanup);
	monstartup((u_long)&_eprol, (u_long)&_etext);
#endif

	__init();

	exit(main(argc, argv, environ));
}

static char *
_strrchr(p, ch)
register char *p, ch;
{
	register char *save;

	for (save = NULL;; ++p) {
		if (*p == ch)
			save = (char *)p;
		if (!*p)
			return(save);
	}
/* NOTREACHED */
}

#ifdef MCRT0
asm ("  .text");
asm ("_eprol:");
#endif
@


1.10
log
@Userland bits for m68k/ELF. Mostly addition of register prefixes to the
assembler instructions, and cope with the few changes in return values
location.
@
text
@d1 1
a1 1
/* $OpenBSD: crt0.c,v 1.9 2012/12/23 12:24:13 kettenis Exp $ */
@


1.9
log
@zap rcsid. Okay deraadt@@, krw@@
@
text
@d1 3
a3 2
/*	$OpenBSD: crt0.c,v 1.8 2003/02/28 18:05:51 deraadt Exp $	*/
/*	$NetBSD: crt0.c,v 1.14 1995/06/03 13:16:11 pk Exp $	*/
d5 2
a6 1
 * Copyright (c) 1993 Paul Kranenburg
d8 1
a8 1
 *
d19 3
a21 1
 *      This product includes software developed by Paul Kranenburg.
d23 2
a24 2
 *    derived from this software without specific prior written permission
 *
d35 2
a36 1
 *
d39 4
d44 9
a52 2
#include <sys/param.h>
#include <stdlib.h>
d54 1
a54 1
#include "common.h"
d56 12
a67 1
extern void	start(void) asm("start");
d70 2
a71 1
start()
a72 11
	struct kframe {
		int	kargc;
		char	*kargv[1];	/* size depends on kargc */
		char	kargstr[1];	/* size varies */
		char	kenvstr[1];	/* size varies */
	};
	/*
	 *	ALL REGISTER VARIABLES!!!
	 */
	register struct kframe *kfp;
	register char **argv, *ap;
d75 5
a79 12
#ifdef lint
	kfp = 0;
	initcode = initcode = 0;
#else /* not lint */
	asm("lea a6@@(4),%0" : "=r" (kfp));	/* catch it quick */
#endif /* not lint */
	argv = &kfp->kargv[0];
	environ = argv + kfp->kargc + 1;

	if (ap = argv[0]) {
		if ((__progname = _strrchr(ap, '/')) == NULL)
			__progname = ap;
d81 1
a81 1
			++__progname;
d89 2
a90 11
#ifdef DYNAMIC
	/* ld(1) convention: if DYNAMIC = 0 then statically linked */
#ifdef stupid_gcc
	if (&_DYNAMIC)
#else
	if ( ({volatile caddr_t x = (caddr_t)&_DYNAMIC; x; }) )
#endif
		__load_rtld(&_DYNAMIC);
#endif /* DYNAMIC */

asm("eprol:");
d94 4
a97 2
	monstartup((u_long)&eprol, (u_long)&etext);
#endif /* MCRT0 */
d99 1
a99 2
asm ("__callmain:");		/* Defined for the benefit of debuggers */
	exit(main(kfp->kargc, argv, environ));
d102 5
a106 10
#ifdef DYNAMIC
	asm("	___syscall:");
	asm("		movel	a7@@+,a0");	/* return address */
	asm("		movel	a7@@,d0");	/* syscall number */
	asm("		movel	a0,a7@@");
	asm("		trap	#0");		/* do system call */
	asm("		bcc	1f");		/* check error */
	asm("		moveq	#-1,d0");
	asm("	1:	movel	a7@@,a0");	/* get return address, leave */
	asm("		jmp	a0@@");		/* correct amount on stack */
d108 8
a115 3
#endif /* DYNAMIC */

#include "common.c"
d118 1
a118 1
asm ("	.text");
@


1.8
log
@copy basename of argv[0] to bss for __progname, so that large stack smash
does not make propolice reporting ineffective; millert miod ok
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.7 2002/09/17 21:16:01 deraadt Exp $	*/
a33 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: crt0.c,v 1.7 2002/09/17 21:16:01 deraadt Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.7
log
@uncommit, since it breaks macppc libc.  millert and miod have now said they
did NOT approve those for commit.  why did mickey feel he was ok to go
commiting a set of diffs which had not been passed around and tested by people?
we don't know.  mickey, have you got something to say for yourself?
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.5 2002/02/16 21:27:20 millert Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.5 2002/02/16 21:27:20 millert Exp $";
d60 1
d71 1
a71 1
	if (ap = argv[0])
d76 6
@


1.6
log
@use a different name for __syscall(); millert@@ miod@@ niklas@@ ok
@
text
@d98 1
a98 1
	asm("	___syscall2:");
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.4 2001/08/12 12:03:01 heko Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.4 2001/08/12 12:03:01 heko Exp $";
d98 1
a98 1
	asm("	___syscall:");
@


1.4
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.3 1999/08/20 14:11:35 niklas Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.3 1999/08/20 14:11:35 niklas Exp $";
d44 1
a44 1
extern void	start __P((void)) asm("start");
@


1.3
log
@Fix RCS Ids
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.2 1997/06/24 17:15:50 tholo Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.2 1997/06/24 17:15:50 tholo Exp $";
d91 1
a91 1
#endif MCRT0
@


1.2
log
@Use OpenBSD tags and not SCCS or RCS Id tags
@
text
@d1 1
a2 1
/*	$OpenBSD$	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD$";
@


1.1
log
@Initial revision
@
text
@d2 1
d36 1
a36 1
static char sccsid[] = "%W% (Erasmus) %G%";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
