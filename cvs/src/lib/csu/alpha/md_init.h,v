head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.40
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.38
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.36
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.34
	OPENBSD_5_0:1.1.0.32
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.30
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.28
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.24
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.26
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2017.08.11.20.13.30;	author guenther;	state Exp;
branches;
next	1.8;
commitid	5eAWkIW8wRuBAA6V;

1.8
date	2017.01.19.23.47.04;	author guenther;	state Exp;
branches;
next	1.7;
commitid	JaAtEQPA6wImDWUD;

1.7
date	2016.08.07.02.34.52;	author guenther;	state Exp;
branches;
next	1.6;
commitid	gwLjhbz16APKwjcf;

1.6
date	2016.03.20.02.32.39;	author guenther;	state Exp;
branches;
next	1.5;
commitid	va8OhMk7nsI8YWCs;

1.5
date	2016.03.13.18.35.02;	author guenther;	state Exp;
branches;
next	1.4;
commitid	dhkWXrJW7zbsTPZe;

1.4
date	2015.09.01.05.40.06;	author guenther;	state Exp;
branches;
next	1.3;
commitid	AUiGrkvnwcUfa8tR;

1.3
date	2014.12.27.13.17.52;	author kettenis;	state Exp;
branches;
next	1.2;
commitid	szLCPbXaGN94NYFQ;

1.2
date	2013.12.03.06.21.40;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.14.59.15;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@_dl_printf is no longer referenced by RELOC_{JMPREL,DYN,GOT}; delete the stub

ok kettenis@@
@
text
@/* $OpenBSD: md_init.h,v 1.8 2017/01/19 23:47:04 guenther Exp $ */
/*-
 * Copyright (c) 2001 Ross Harvey
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the NetBSD
 *      Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define MD_SECT_CALL_FUNC(section, func) \
	__asm (".section "#section", \"ax\"\n"	\
	"	jsr 	$26," #func "		\n" \
	"	ldgp	$29,0($26)		\n" \
	"	.previous")

#define MD_SECTION_PROLOGUE(sect, entry_pt)	\
	__asm (					\
	".section "#sect",\"ax\",@@progbits	\n" \
	"	.globl " #entry_pt "		\n" \
	"	.type " #entry_pt ",@@function	\n" \
	#entry_pt":				\n" \
	"	ldgp	$29, 0($27)		\n" \
	"	lda	$30, -16($30)		\n" \
	"	stq	$26, 0($30)		\n" \
	"	stq	$15, 8($30)		\n" \
	"	.align	5			\n" \
	"	/* fall thru */			\n" \
	"	.previous")


#define MD_SECTION_EPILOGUE(sect)		\
	__asm (					\
	".section "#sect",\"ax\",@@progbits	\n" \
	"	ldq	$15, 8($30)		\n" \
	"	ldq	$26, 0($30)		\n" \
	"	lda	$30, 16($30)		\n" \
	"	ret				\n" \
	"	.previous")


#define	MD_CRT0_START				\
	__asm (					\
	"	.globl __start			\n" \
	"	.type __start@@function		\n" \
	"__start = ___start")

#define	MD_RCRT0_START				\
	__asm (					\
	"	.globl __start			\n" \
	"	.type __start@@function		\n" \
	"__start:				\n" \
	"	.set	noreorder		\n" \
	"	br	$27, L1			\n" \
	"L1:					\n" \
	"	ldgp	$gp, 0($27)		\n" \
	"	mov	$16, $9			\n" \
	"	br	$11, L2			\n" \
	"L2:	ldiq	$12, L2			\n" \
	"	subq	$11, $12, $11		\n" \
	"	mov	$11, $17		\n" \
	"	lda	$6, _DYNAMIC		\n" \
	"	addq	$11, $6, $16		\n" \
	"	mov	$16, $15		\n" \
	"	bsr	$26, _reloc_alpha_got	\n" \
	"	lda	$sp, -80($sp)		\n" \
	"	mov	$9, $16			\n" \
	"	lda	$11, 0($sp)		\n" \
	"	mov	$11, $17		\n" \
	"	mov	$15, $18		\n" \
	"	jsr	$26, _dl_boot_bind	\n" \
	"	ldgp	$gp, 0($26)		\n" \
	"	mov	$9, $16			\n" \
	"	mov	0, $17			\n" \
	"	jsr	$26, ___start		\n" \
	".globl _dl_exit			\n" \
	".type _dl_exit@@function		\n" \
	"_dl_exit:				\n" \
	"	lda	$0, 1			\n" \
	"	callsys				\n" \
	"	ret")

#define	MD_START_ARGS		char **sp, void (*cleanup)(void)
#define	MD_START_SETUP				\
	char **argv, **envp;			\
	long argc;				\
						\
	argc = *(long *)sp;			\
	argv = sp + 1;				\
	envp = sp + 2 + argc;		/* 2: argc + NULL ending argv */
@


1.8
log
@MD_START is now always ___start, so expand and eliminate it

ok phessler@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.7 2016/08/07 02:34:52 guenther Exp $ */
a104 4
	"	ret				\n" \
	".globl _dl_printf			\n" \
	".type _dl_printf@@function		\n" \
	"_dl_printf:				\n" \
@


1.7
log
@alpha already calculates &_DYNAMIC for the _reloc_alpha_got() call, so
save that and pass it to _dl_boot_bind() too
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.6 2016/03/20 02:32:39 guenther Exp $ */
a110 1
#define	MD_START		___start
@


1.6
log
@Rearrange C runtime bits: now that ld.so exports environ and __progname,
move their definitions and initialization in static links to libc.a
Make crt0 always invoke a new func _csu_finish() in libc to process the auxv
and to either register the ld.so cleanup function (in dynamic links) or
initialize environ and __progname and do MC_DISABLE_KBIND (in static links).
In libc, get pagesize from auxv; cache that between getpagesize() and
sysconf(_SC_PAGESIZE)

ok mpi@@ "good time" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.5 2016/03/13 18:35:02 guenther Exp $ */
d88 1
d94 1
a94 1
	"	mov	0, $18			\n" \
@


1.5
log
@crt0.c is already setting environ, so don't set it in MD_START_SETUP

ok kettenis@@ mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.4 2015/09/01 05:40:06 guenther Exp $ */
a118 11

#include <sys/syscall.h>
#include <machine/pal.h>

#define	MD_DISABLE_KBIND						\
	do {								\
		register long syscall_num __asm("$0") /* v0 */ = SYS_kbind;\
		register void *arg1 __asm("$16") /* a0 */ = NULL;	\
		__asm volatile("call_pal %1" : "+r" (syscall_num)	\
		    : "i" (PAL_OSF1_callsys), "r" (arg1) : "$19", "$20");\
	} while (0)
@


1.4
log
@In static binaries, invoke kbind() once to disable it.

With much assistance from miod@@
ok deraadt@@@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.3 2014/12/27 13:17:52 kettenis Exp $ */
d118 1
a118 1
	environ = envp = sp + 2 + argc;	/* 2: argc + NULL ending argv */
@


1.3
log
@Static PIE support for alpha.

This adds alpha-specific first-pass GOT relocation code to boot.h.
The assembly code is pure magic.  The numeric register
names don't make it easier to understand (or compare with the
equivalent ld.so code).  Unfortunately the assembler only understands
a few symbolic register names.

Renames the crt0.o entry point to __start.  Our compiler was already using
__start and the linker will soon follow.

ok kurt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.2 2013/12/03 06:21:40 guenther Exp $ */
d119 11
@


1.2
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.1 2004/01/08 14:59:15 drahn Exp $ */
d65 1
a65 1
/* XXX this should not be necessary: ld should use __start */
d68 41
a108 3
	".globl _start				\n" \
	".type _start@@function			\n" \
	"_start = __start")
d110 1
a110 1
#define	MD_START		__start
@


1.1
log
@__init/__fini handling on ELF has not been correct. It is supposed to
be a section which code stubs (branches) can be added to initialize/destructor
This adds MD stubs to allow this to operate as expected. should fix wine
and behave according to ELF specs. ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 17
@

