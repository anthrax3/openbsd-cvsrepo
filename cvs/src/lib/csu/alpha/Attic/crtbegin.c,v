head	1.4;
access;
symbols
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.12
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2005.09.25.19.59.00;	author kettenis;	state dead;
branches;
next	1.3;

1.3
date	2004.10.21.19.57.42;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.03.22.48.36;	author art;	state dead;
branches;
next	1.1;

1.1
date	96.11.13.21.28.03;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Revert temporary hack.
ok deraadt@@
@
text
@/*	$OpenBSD: crtbegin.c,v 1.3 2004/10/21 19:57:42 kettenis Exp $	*/
/*	$NetBSD: crtbegin.c,v 1.1 1996/09/12 16:59:03 cgd Exp $	*/

/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Run-time module for GNU C++ compiled shared libraries.
 *
 * The linker constructs the following arrays of pointers to global
 * constructors and destructors. The first element contains the
 * number of pointers in each.
 * The tables are also null-terminated.
 */
#include <stdlib.h>

#include "md_init.h"
#include "os-note-elf.h"
#include "extern.h"

static const char __EH_FRAME_BEGIN__[]
    __attribute__((section(".eh_frame"), aligned(4))) = { };

static const init_f __CTOR_LIST__[1]
    __attribute__((section(".ctors"))) = { (void *)-1 };	/* XXX */
static const init_f __DTOR_LIST__[1]
    __attribute__((section(".dtors"))) = { (void *)-1 };	/* XXX */

static void	__dtors(void);
static void	__ctors(void);

static void
__dtors()
{
	unsigned long i = (unsigned long) __DTOR_LIST__[0];
	const init_f *p;

	if (i == -1)  {
		for (i = 1; __DTOR_LIST__[i] != NULL; i++)
			;
		i--;
	}
	p = __DTOR_LIST__ + i;
	while (i--)
		(**p--)();
}

static void
__ctors()
{
	const init_f *p = __CTOR_LIST__ + 1;

	while (*p)
		(**p++)();
}

void __init(void);
void __fini(void);
static void __do_init(void);
static void __do_fini(void);

MD_SECTION_PROLOGUE(".init", __init);

MD_SECTION_PROLOGUE(".fini", __fini);

MD_SECT_CALL_FUNC(".init", __do_init);
MD_SECT_CALL_FUNC(".fini", __do_fini);


void
__do_init()
{
	static int initialized = 0;

	/*
	 * Call global constructors.
	 * Arrange to call global destructors at exit.
	 */
	if (!initialized) {
		initialized = 1;

		(__ctors)();

		atexit(__fini);
	}
}

void
__do_fini()
{
	static int finalized = 0;

	if (!finalized) {
		finalized = 1;
		/*
		 * Call global destructors.
		 */
		(__dtors)();
	}
}
@


1.3
log
@Temporary hack to make alpha build again.
ok drahn@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbegin.c,v 1.10 2004/10/10 18:29:15 kettenis Exp $	*/
@


1.2
log
@Use crtbegin and crtend from common_elf.
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbegin.c,v 1.1 1996/11/13 21:28:03 niklas Exp $	*/
a33 6
#ifndef ECOFF_COMPAT

/*
 * XXX EVENTUALLY SHOULD BE MERGED BACK WITH c++rt0.c
 */

d44 8
a51 1
static void (*__CTOR_LIST__[1]) __P((void))
d53 1
a53 1
static void (*__DTOR_LIST__[1]) __P((void))
d56 2
a57 2
static void	__dtors __P((void));
static void	__ctors __P((void));
d63 1
a63 1
	void (**p)(void);
d78 1
a78 1
	void (**p)(void) = __CTOR_LIST__ + 1;
d84 12
a95 1
extern void __init(void) __attribute__((section(".init")));
d98 1
a98 1
__init()
d108 4
a111 1
		__ctors();
a112 1

a114 2
extern void __fini(void) __attribute__((section(".fini")));

d116 1
a116 1
__fini()
d118 9
a126 4
	/*
	 * Call global destructors.
	 */
	__dtors();
a127 2

#endif /* !ECOFF_COMPAT */
@


1.1
log
@Sync with NetBSD, Add OpenBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbegin.c,v 1.1 1996/09/12 16:59:03 cgd Exp $	*/
@

