head	1.11;
access;
symbols
	OPENBSD_5_4:1.10.0.34
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.32
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.30
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.28
	OPENBSD_5_0:1.10.0.26
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.24
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.22
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.18
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2013.12.03.06.21.40;	author guenther;	state dead;
branches;
next	1.10;

1.10
date	2005.08.04.16.33.04;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.25.17.59.42;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.28.18.05.51;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.20;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.03.23.16.16;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.03.23.08.41;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.25.05.37.20;	author art;	state Exp;
branches;
next	1.3;

1.3
date	99.08.20.14.11.34;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	97.06.24.17.15.49;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	96.11.13.21.28.01;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@/*	$OpenBSD: crt0.c,v 1.10 2005/08/04 16:33:04 espie Exp $	*/
/*	$NetBSD: crt0.c,v 1.1 1996/09/12 16:59:02 cgd Exp $	*/
/*
 * Copyright (c) 1995 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdlib.h>
#include <limits.h>

static char	*_strrchr(char *, char);

char	**environ;
char	*__progname = "";
char	__progname_storage[NAME_MAX+1];

#ifdef MCRT0
extern void	monstartup(u_long, u_long);
extern void	_mcleanup(void);
extern unsigned char _etext, _eprol;
#endif /* MCRT0 */

__asm(".globl _start");
__asm(".type _start@@function");
__asm("_start = __start");
void
__start(sp, cleanup, obj)
	char **sp;
	void (*cleanup)(void);			/* from shared loader */
	const void *obj;			/* from shared loader */
{
	long argc;
	char **argv, *namep;
	char *s;

	argc = *(long *)sp;
	argv = sp + 1;
	environ = sp + 2 + argc;		/* 2: argc + NULL ending argv */

	if ((namep = argv[0]) != NULL) {	/* NULL ptr if argc = 0 */
		if ((__progname = _strrchr(namep, '/')) == NULL)
			__progname = namep;
		else
			__progname++;
		for (s = __progname_storage; *__progname &&
		    s < &__progname_storage[sizeof __progname_storage - 1]; )
			*s++ = *__progname++;
		*s = '\0';
		__progname = __progname_storage;
	}

#ifdef MCRT0
	atexit(_mcleanup);
	monstartup((u_long)&_eprol, (u_long)&_etext);
#endif

	__init();

	exit(main(argc, argv, environ));
}


static char *
_strrchr(p, ch)
register char *p, ch;
{
	register char *save;

	for (save = NULL;; ++p) {
		if (*p == ch)
			save = (char *)p;
		if (!*p)
			return(save);
	}
/* NOTREACHED */
}

#ifdef MCRT0
asm ("  .text");
asm ("_eprol:");
#endif

@


1.10
log
@zap rcsid. Okay deraadt@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.9 2003/08/25 17:59:42 drahn Exp $	*/
@


1.9
log
@Define both _start and __start in crt0, all of the other architectures do.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.8 2003/02/28 18:05:51 deraadt Exp $	*/
a32 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: crt0.c,v 1.8 2003/02/28 18:05:51 deraadt Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.8
log
@copy basename of argv[0] to bss for __progname, so that large stack smash
does not make propolice reporting ineffective; millert miod ok
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.7 2002/02/16 21:27:20 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.7 2002/02/16 21:27:20 millert Exp $";
d53 3
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.6 2001/02/03 23:16:16 art Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.6 2001/02/03 23:16:16 art Exp $";
d39 1
d45 1
d61 1
d72 5
@


1.6
log
@Remove even more dead code.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.5 2001/02/03 23:08:41 art Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.5 2001/02/03 23:08:41 art Exp $";
d40 1
a40 1
static char	*_strrchr __P((char *, char));
d46 2
a47 2
extern void	monstartup __P((u_long, u_long));
extern void	_mcleanup __P((void));
d54 1
a54 1
	void (*cleanup) __P((void));		/* from shared loader */
@


1.5
log
@Schedule running of __fini in __init, not __start.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.4 2001/01/25 05:37:20 art Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.4 2001/01/25 05:37:20 art Exp $";
a38 17
#include <sys/syscall.h>
typedef void Obj_Entry;

/*
 * Lots of the chunks of this file cobbled together from pieces of
 * other NetBSD crt files, including the common code.
 */

extern int	__syscall __P((int, ...));
#define	_exit(v)	__syscall(SYS_exit, (v))
#define	write(fd, s, n)	__syscall(SYS_write, (fd), (s), (n))

#define _FATAL(str)				\
	do {					\
		write(2, str, sizeof(str));	\
		_exit(1);			\
	} while (0)
a41 1

a44 5
#ifndef ECOFF_COMPAT
extern void	__init __P((void));
extern void	__fini __P((void));
#endif /* ECOFF_COMPAT */

d55 1
a55 1
	const Obj_Entry *obj;			/* from shared loader */
a75 1
#ifndef ECOFF_COMPAT
a76 1
#endif /* ECOFF_COMPAT */
@


1.4
log
@This is not how we'll do dynamic libraries on alpha anyway.
Zap dead code.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.3 1999/08/20 14:11:34 niklas Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.3 1999/08/20 14:11:34 niklas Exp $";
a99 1
	atexit(__fini);
@


1.3
log
@Fix RCS Ids
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.2 1997/06/24 17:15:49 tholo Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.2 1997/06/24 17:15:49 tholo Exp $";
a37 4
#ifdef ECOFF_COMPAT
#undef DYNAMIC
#endif

a39 3
#ifdef DYNAMIC
#include "rtld.h"
#else
a40 1
#endif
a67 14
#ifdef DYNAMIC
void		rtld_setup __P((void (*)(void), const Obj_Entry *obj));

const Obj_Entry *mainprog_obj;

/*
 * Arrange for _DYNAMIC to exist weakly at address zero.  That way,
 * if we happen to be compiling without -static but with without any
 * shared libs present, things will still work.
 */
asm(".weak _DYNAMIC; _DYNAMIC = 0");
extern int _DYNAMIC;
#endif /* DYNAMIC */

a93 5
#ifdef DYNAMIC
	if (&_DYNAMIC != NULL)
		rtld_setup(cleanup, obj);
#endif

a127 70
#ifdef DYNAMIC
void
rtld_setup(cleanup, obj)
	void (*cleanup) __P((void));
	const Obj_Entry *obj;
{

	if ((obj == NULL) || (obj->magic != RTLD_MAGIC))
		_FATAL("Corrupt Obj_Entry pointer in GOT");
	if (obj->version != RTLD_VERSION)
		_FATAL("Dynamic linker version mismatch");

	mainprog_obj = obj;
	atexit(cleanup);
}

void *
dlopen(name, mode)
	char	*name;
	int	mode;
{

	if (mainprog_obj == NULL)
		return NULL;
	return (mainprog_obj->dlopen)(name, mode);
}

int
dlclose(fd)
	void	*fd;
{

	if (mainprog_obj == NULL)
		return -1;
	return (mainprog_obj->dlclose)(fd);
}

void *
dlsym(fd, name)
	void	*fd;
	char	*name;
{

	if (mainprog_obj == NULL)
		return NULL;
	return (mainprog_obj->dlsym)(fd, name);
}

#if 0 /* not supported for ELF shlibs, apparently */
int
dlctl(fd, cmd, arg)
	void *fd, *arg;
	int cmd;
{

	if (mainprog_obj == NULL)
		return -1;
	return (mainprog_obj->dlctl)(fd, cmd, arg);
}
#endif

char *
dlerror()
{

	if (mainprog_obj == NULL)
		return NULL;
	return (mainprog_obj->dlerror)();
}
#endif /* DYNAMIC */
@


1.2
log
@Use OpenBSD tags and not SCCS or RCS Id tags
@
text
@d1 1
a2 1
/*	$OpenBSD$	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD$";
@


1.1
log
@Sync with NetBSD, Add OpenBSD tags.
@
text
@d2 1
a2 1

d33 4
@
