head	1.6;
access;
symbols
	OPENBSD_2_9:1.5.0.16
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2001.06.26.22.42.59;	author miod;	state dead;
branches;
next	1.5;

1.5
date	97.07.23.20.39.32;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.06.24.17.15.51;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	97.04.23.21.28.15;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	97.04.21.21.04.36;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	97.03.25.17.06.45;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Put m88k-related files in the correctly named directory.
@
text
@/*	$OpenBSD: crt0.c,v 1.5 1997/07/23 20:39:32 kstailey Exp $	*/

/*   
 *   Mach Operating System
 *   Copyright (c) 1991, 1992 Carnegie Mellon University
 *   Copyright (c) 1991, 1992 Omron Corporation
 *   All Rights Reserved.
 *   
 *   Permission to use, copy, modify and distribute this software and its
 *   documentation is hereby granted, provided that both the copyright
 *   notice and this permission notice appear in all copies of the
 *   software, derivative works or modified versions, and any portions
 *   thereof, and that both notices appear in supporting documentation.
 *   
 *   CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 *   CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 *   ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *   
 *   Carnegie Mellon requests users of this software to return to
 *   
 *    Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *    School of Computer Science
 *    Carnegie Mellon University
 *    Pittsburgh PA 15213-3890
 *   
 *   any improvements or extensions that they make and grant Carnegie Mellon 
 *   the rights to redistribute these changes.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: crt0.c,v 1.5 1997/07/23 20:39:32 kstailey Exp $";
#endif /* LIBC_SCCS and not lint */

/* 
 *   Author :   Jeffrey Friedl
 *   Created:   July 1992
 *   Standalone crt0.
 */

/*
 * GCCisms used:
 * 	A "volatile void fcn()" is one that never returns.
 *	register var asm("r1"): variable VAR is raw access to named register.
 */

/*
 * When a program begins, r31 points to info passed from the kernel.
 *
 * The following shows the memory to which r31 points (think "int *r31;"),
 * and how we derive argc, argv, and envp from that:
 *
 *    +-------------------+ <-------------------------------------- r31
 *    | ARGC		  | <- argc = r31[0];
 *    +-------------------+ <- argv = &r31[1];
 *    | &(argument #1)    |
 *    +-------------------+
 *    | &(argument #2)    |
 *     -  - - - - - - -  - 
 *    | &(argument #ARGC) |
 *    +-------------------+
 *    | 0x00000000	  | <- end-of-ARGV-list marker (redundant information).
 *    +-------------------+ <- environ = envp =  &argv[argc+1];
 *    | &(env. var. #1)   |
 *    +-------------------+
 *    | &(env. var. #2)   |
 *     -  - - - - - - -  - 
 *    | &(env. var. #N)   |
 *    +-------------------+
 *    | 0x00000000	  | <- end-of-ENVP-list marker (not redundant!).
 *    +-------------------+
 *
 * We use 'start:' to grab r31 and and call real_start(argc, argv, envp).
 * We must do this since the function prologue makes finding the initial
 * r31 difficult in C.
 */

#include <stdlib.h>

#include "common.h"

asm("	    text		");
asm("	    align  4		");
asm("start: global start	");
asm("       ld     r2, r31,   0 "); /* First arg to real_start: argc */
asm("       addu   r3, r31,   4 "); /* Second arg to real_start: argv */
asm("       lda    r4,  r3  [r2]"); /* Third arg to real_start: envp, but.... */
asm("       addu   r4,  r4,   4 "); /*   ... don't forget to skip past marker */
asm("       br.n   ___crt0_real_start");
asm("       subu   r31, r31, 32 ");

#ifdef DYNAMIC
extern struct _dynamic	_DYNAMIC;
struct _dynamic	*___pdynamic = &_DYNAMIC;
#endif

/* static */ void volatile
__crt0_real_start(int argc, char *argv[], char *envp[])
{
	register char *ap;
	volatile int a = 0;
	extern int end;

	environ = envp; /* environ is for the user that can't get at 'envp' */

	if (ap = argv[0])
		if ((__progname = _strrchr(ap, '/')) == NULL)
			__progname = ap;
		else
			++__progname;
asm ("__callmain:");		/* Defined for the benefit of debuggers */
	exit(main(argc, argv, environ));

    /*NOTREACHED*/
}

#include "common.c"
@


1.5
log
@tabify
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.4 1997/06/24 17:15:51 tholo Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.4 1997/06/24 17:15:51 tholo Exp $";
@


1.4
log
@Use OpenBSD tags and not SCCS or RCS Id tags
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD$";
d53 1
a53 1
 *    | ARGC              | <- argc = r31[0];
d61 1
a61 1
 *    | 0x00000000        | <- end-of-ARGV-list marker (redundant information).
d69 1
a69 1
 *    | 0x00000000        | <- end-of-ENVP-list marker (not redundant!).
d81 3
a83 3
asm("       text                ");
asm("       align  4            ");
asm("start: global start        ");
@


1.3
log
@Fix "bug" in linker. actually was bug in asm files that did not correctly
align the global data. This allows the workaround in crt0 to be removed.
@
text
@d1 2
d29 4
@


1.2
log
@Ugly hack to work around bug in 88k linker.
@
text
@a94 2
	extern int minbrk asm ("minbrk");
	extern int curbrk asm ("curbrk");
a96 2
	minbrk = (int)&end;
	curbrk = (int)&end;
@


1.1
log
@Ok here is the mvme88k userland, minus a few important pieces.
as, ld change need to be merged. It is known that shared libraries and C++
do not work.
If anyone wants to step forward and take over the mvme88k port please do.
It was dumped on me when the original developer, Nivas, left his previous
job and started a new one.

I am trying to get the port in a shape that someone could take over.
@
text
@d96 1
d100 1
@
