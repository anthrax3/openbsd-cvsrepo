head	1.8;
access;
symbols
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.20
	OPENBSD_5_0:1.3.0.18
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.16
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.14
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.10
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	SH4_LIBC_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2013.12.03.06.21.41;	author guenther;	state dead;
branches;
next	1.7;

1.7
date	2013.12.01.17.18.31;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.10.19.30.40;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2012.12.05.23.19.57;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2012.04.12.11.28.32;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.13.21.42.33;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.02.06.11.54;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@/*	$OpenBSD: crt0.c,v 1.7 2013/12/01 17:18:31 guenther Exp $	*/
/*	$NetBSD: crt0.c,v 1.10 2004/08/26 21:16:41 thorpej Exp $ */

/*
 * Copyright (c) 1998 Christos Zoulas
 * Copyright (c) 1995 Christopher G. Demetriou
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *          This product includes software developed for the
 *          NetBSD Project.  See http://www.NetBSD.org/ for
 *          information about NetBSD.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * <<Id: LICENSE,v 1.2 2000/06/14 15:57:33 cgd Exp>>
 */

#include <sys/param.h>

#include <machine/asm.h>
#include <machine/fpu.h>
#include <stdlib.h>

static char     *_strrchr(const char *, char);

char    **environ;

char * __progname = "";

char __progname_storage[NAME_MAX+1];

#if defined(__SH4__) && !defined(__SH4_NOFPU__)
unsigned int __fpscr_values[2];
#endif

#ifdef MCRT0
extern void     monstartup(u_long, u_long);
extern void     _mcleanup(void);
extern unsigned char _etext, _eprol;
#endif /* MCRT0 */

void		__start(int, char *[], char *[], void (*)(void));

void
__start(int argc, char **argv, char **envp, void (*cleanup)(void))
{
	char *s;

#if defined(__SH4__) && !defined(__SH4_NOFPU__)
	extern void __set_fpscr(unsigned int);

	__set_fpscr(0);
	__fpscr_values[0] |= FPSCR_DN;
	__fpscr_values[1] |= FPSCR_DN;
	__asm__ __volatile__ ("lds %0, fpscr" : : "r" (__fpscr_values[1]));
#endif

 	environ = envp;

	if ((__progname = argv[0]) != NULL) {   /* NULL ptr if argc = 0 */
		if ((__progname = _strrchr(__progname, '/')) == NULL)
			__progname = argv[0];
		else
			__progname++;
		for (s = __progname_storage; *__progname &&
		    s < &__progname_storage[sizeof __progname_storage - 1]; )
			*s++ = *__progname++;
		*s = '\0';
		__progname = __progname_storage;
	}

	if (cleanup)
		atexit(cleanup);
#ifdef MCRT0
	atexit(_mcleanup);
	monstartup((u_long)&_eprol, (u_long)&_etext);
#endif	/* MCRT0 */

        __init();

__asm("__callmain:");		/* Defined for the benefit of debuggers */
	exit(main(argc, argv, envp));
}

static char *
_strrchr(const char *p, char ch)
{
	char *save;

	for (save = NULL;; ++p) {
		if (*p == ch)
			save = (char *)p;
		if (!*p)
			return(save);
	}
	/* NOTREACHED */
}
asm ("  .section \".text\" \n_eprol:");
@


1.7
log
@mips64 no longer uses scrt0.o, and it was identical to crt0.o anyway.
Delete unused #ifndef SCRT0 conditionals.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.6 2013/11/10 19:30:40 guenther Exp $	*/
@


1.6
log
@The kernel and ld.so have passed 0 in r7 for use as the cleanup
callback for about a year, so it's safe to make __start() treat
that as the cleanup argument and conditionally pass it to atexit().
Eliminate the no-longer-used obj and ps_strings arguments to position
things correctly, which lets us eliminate the ASM wrapper completely.

ok kettenis@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.5 2012/12/05 23:19:57 deraadt Exp $	*/
a99 1
#ifndef SCRT0
a100 1
#endif
@


1.5
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.4 2012/04/12 11:28:32 jsg Exp $	*/
d63 1
a63 13
extern	void	_start(void);
void		___start(int, char *[], char *[], void *,
				const void *, void (*)(void));

__asm(	"	.text			\n"
	"	.align 2		\n"
	"	.globl _start		\n"
	"	.globl __start		\n"
	"_start:			\n"
	"__start:			\n"
	"	mov.l	r9,@@-r15	\n"
	"	bra ___start		\n"
	"	 mov.l	r8,@@-r15");
d66 1
a66 2
___start(int argc, char **argv, char **envp, void *ps_strings,
	const void *obj, void (*cleanup)(void))
d93 2
a94 3
#if 0
	atexit(cleanup);
#endif
@


1.4
log
@the fpu control symbol on sh (__fpscr_values) suddenly becomes local
instead of global with gcc4 and this ends up breaking things in hard
to debug ways.  So move the definition to csu instead of libgcc.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.3 2007/03/13 21:42:33 miod Exp $	*/
a38 1
#include <sys/cdefs.h>
@


1.3
log
@Set the DN bit in the fpscr upon startup, to prevent faulting when loading
denormals. This is recommended by the manual, and is necessary for the gdb
testsuite to pass; found by, discussed with, and ok kettenis@@

(be sure to make includes before recompiling csu)
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.2 2007/03/02 06:11:54 miod Exp $	*/
d54 4
a85 1
	extern unsigned int __fpscr_values[2];
@


1.2
log
@Move landisk to hardware floating point. At the moment the FPU context is
always saved upon context switches, as FPU registers are heavily used for
long long computations (don't ask). Gcc default to -m4.

Credits to drahn@@ otto@@ and deraadt@@ for feedback and help testing.

Upgrade procedure if you don't want to use the damn snapshots:
- build and install new kernel, reboot off it
- build new gcc, do not install it yet
- make includes
- install new gcc
- build and install lib/csu and lib/libc
- make build
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.1.1.1 2006/10/10 22:07:10 miod Exp $	*/
d43 1
d85 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d78 8
@


1.1.1.1
log
@Preliminary userland bits for OpenBSD/landisk, many things coming from
NetBSD.
@
text
@@
