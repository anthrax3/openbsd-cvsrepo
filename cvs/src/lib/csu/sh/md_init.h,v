head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.1.1.0.28
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.26
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.24
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.22
	OPENBSD_5_0:1.1.1.1.0.20
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.18
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.14
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.10
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.8
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.6
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.4
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.2
	OPENBSD_4_1_BASE:1.1.1.1
	SH4_LIBC_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2017.01.19.23.47.04;	author guenther;	state Exp;
branches;
next	1.6;
commitid	JaAtEQPA6wImDWUD;

1.6
date	2016.03.20.02.32.39;	author guenther;	state Exp;
branches;
next	1.5;
commitid	va8OhMk7nsI8YWCs;

1.5
date	2015.09.01.05.40.06;	author guenther;	state Exp;
branches;
next	1.4;
commitid	AUiGrkvnwcUfa8tR;

1.4
date	2014.12.30.19.26.38;	author miod;	state Exp;
branches;
next	1.3;
commitid	UERJD8H1hSHEx8By;

1.3
date	2014.04.18.15.09.52;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2013.12.03.06.21.41;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@MD_START is now always ___start, so expand and eliminate it

ok phessler@@ deraadt@@
@
text
@/*	$OpenBSD: md_init.h,v 1.6 2016/03/20 02:32:39 guenther Exp $	*/
/*	$NetBSD: dot_init.h,v 1.3 2005/12/24 22:02:10 perry Exp $	*/

/*-
 * Copyright (c) 2001 Ross Harvey
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the NetBSD
 *      Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define MD_SECTION_PROLOGUE(sect, entry_pt)		    \
		__asm (					    \
		".section "#sect",\"ax\",@@progbits	\n" \
		"	.globl " #entry_pt "		\n" \
		"	.type " #entry_pt ",@@function	\n" \
		#entry_pt":				\n" \
		"	sts.l	pr, @@-r15		\n" \
		"	.align	2			\n" \
		"	/* fall thru */			\n" \
		".previous")

#define MD_SECTION_EPILOGUE(sect)			    \
		__asm (					    \
		".section "#sect",\"ax\",@@progbits	\n" \
		"	lds.l	@@r15+, pr		\n" \
		"	rts				\n" \
		"	nop				\n" \
		".previous")

/*
 * We need to put the function pointer in our own constant
 * pool (otherwise it might be too far away to reference).
 */
#define MD_SECT_CALL_FUNC(section, func) \
__asm(".section " #section "\n"		\
"    mov.l 1f, r1	\n"		\
"    mova 2f, r0	\n"		\
"    braf r1		\n"		\
"     lds r0, pr	\n"		\
"0:  .p2align 2		\n"		\
"1:  .long " #func " - 0b \n"		\
"2:  .previous");


#if defined(__SH4__) && !defined(__SH4_NOFPU__)
#include <machine/fpu.h>

#define	MD_FPU_START				\
	void __set_fpscr(unsigned int);		\
	unsigned int __fpscr_values[2];

#define	MD_START_SETUP				\
	__set_fpscr(0);				\
	__fpscr_values[0] |= FPSCR_DN;		\
	__fpscr_values[1] |= FPSCR_DN;		\
	__asm volatile ("lds %0, fpscr"		\
	    : : "r" (__fpscr_values[1]));
#else
#define	MD_FPU_START
#endif /* defined(__SH4__) && !defined(__SH4_NOFPU__) */

#define	MD_CRT0_START							\
	MD_FPU_START							\
	__asm (".globl __start; __start = ___start")

#define	MD_RCRT0_START							\
	MD_FPU_START							\
	__asm (								\
	".text								\n" \
	"	.align	2						\n" \
	"	.globl	__start						\n" \
	"	.type	__start,@@function				\n" \
	"__start:							\n" \
	"	mov	r15, r12					\n" \
	"	mov	r15, r4						\n" \
	"	add	#-72, r15					\n" \
	"	mov	r15, r5						\n" \
	"	bsr	1f						\n" \
	"	 nop							\n" \
	"1:								\n" \
	".L_offbase:							\n" \
	"	sts	pr, r0						\n" \
	"	mov.l	.L_dynamic, r6					\n" \
	"	add	r0, r6						\n" \
	"	mov.l	.L_boot_bind, r0				\n" \
	"	bsrf	r0						\n" \
	"	 nop							\n" \
	".L_call_boot_bind:						\n" \
	"	mov	r12, r15					\n" \
	"	mov.l	@@r15, r4	/* argc */			\n" \
	"	mov	r15, r5						\n" \
	"	add	#4, r5		/* argv */			\n" \
	"	mov	r4, r6						\n" \
	"	add	#1, r6						\n" \
	"	shll2	r6						\n" \
	"	add	r5, r6		/* envp */			\n" \
	"	bra	___start					\n" \
	"	 mov	#0, r7		/* cleanup */			\n" \
	"	.align	2						\n" \
	".L_boot_bind:							\n" \
	"	.long	_dl_boot_bind - .L_call_boot_bind		\n" \
	".L_datasize:							\n" \
	"	.long	4 + 4 + (16 * 4)				\n" \
	".L_dynamic:							\n" \
	"	.long	_DYNAMIC - .L_offbase				\n" \
									\
	"	.align	2						\n" \
	"	.globl	_dl_printf					\n" \
	"	.type	_dl_printf,@@function				\n" \
	"_dl_printf:							\n" \
	"	rts							\n" \
	"	 nop							\n" \
									\
	"	.align	2						\n" \
	"	.globl	_dl_exit					\n" \
	"	.type	_dl_exit,@@function				\n" \
	"_dl_exit:							\n" \
	"	mov	#1, r0						\n" \
	"	.word	0xc380	/* trapa #0x80 */			\n" \
	".previous")
@


1.6
log
@Rearrange C runtime bits: now that ld.so exports environ and __progname,
move their definitions and initialization in static links to libc.a
Make crt0 always invoke a new func _csu_finish() in libc to process the auxv
and to either register the ld.so cleanup function (in dynamic links) or
initialize environ and __progname and do MC_DISABLE_KBIND (in static links).
In libc, get pagesize from auxv; cache that between getpagesize() and
sysconf(_SC_PAGESIZE)

ok mpi@@ "good time" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md_init.h,v 1.5 2015/09/01 05:40:06 guenther Exp $	*/
a146 3

/* no ASM stub for __start; the C routine can be called directly */
#define	MD_START	___start
@


1.5
log
@In static binaries, invoke kbind() once to disable it.

With much assistance from miod@@
ok deraadt@@@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md_init.h,v 1.4 2014/12/30 19:26:38 miod Exp $	*/
a149 9

#include <sys/syscall.h>
#define	MD_DISABLE_KBIND						\
	do {								\
		register long syscall_num __asm("r0") = SYS_kbind;	\
		register void *arg1 __asm("r4") = NULL;			\
		__asm volatile("trapa #0x80" : "+r" (syscall_num)	\
		    : "r" (arg1) : "r1", "cc");				\
	} while (0)
@


1.4
log
@self-relocating crt0 bits for sh, and enable static pie by default. With some
archdep.h help from kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md_init.h,v 1.3 2014/04/18 15:09:52 guenther Exp $	*/
d150 9
@


1.3
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
a1 1
/*	$OpenBSD: md_init.h,v 1.2 2013/12/03 06:21:41 guenther Exp $	*/
a70 3
/* no ASM stub for __start; the C routine can be called directly */
#define	MD_START	__start

d74 1
a74 1
#define	MD_CRT0_START				\
d76 1
a76 1
	unsigned int __fpscr_values[2]
d84 2
d88 62
@


1.2
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md_init.h,v 1.1.1.1 2006/10/10 22:07:10 miod Exp $	*/
d85 1
a85 1
	__asm __volatile__ ("lds %0, fpscr"	\
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 20
@


1.1.1.1
log
@Preliminary userland bits for OpenBSD/landisk, many things coming from
NetBSD.
@
text
@@
