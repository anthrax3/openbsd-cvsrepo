head	1.15;
access;
symbols
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.11.0.10
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2014.11.15.01.40.07;	author guenther;	state dead;
branches;
next	1.14;
commitid	LraQ2vmu3gUZLnSe;

1.14
date	2013.12.28.18.38.42;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2012.09.08.20.08.33;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.28.16.39.09;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	2010.05.01.11.32.43;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.13.20.15.24;	author kurt;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.04.19.43.48;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.03.14.40.16;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.26.20.04.11;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.26.20.00.37;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.08.14.59.15;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.28.04.11.52;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.26.23.19.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.16.21.27.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.28.21.38.13;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.15
log
@ELF uberalles, so move the files up out of common_elf

ok miod@@ deraadt@@
@
text
@/*	$OpenBSD: crtbeginS.c,v 1.14 2013/12/28 18:38:42 kettenis Exp $	*/
/*	$NetBSD: crtbegin.c,v 1.1 1996/09/12 16:59:03 cgd Exp $	*/

/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Run-time module for GNU C++ compiled shared libraries.
 *
 * The linker constructs the following arrays of pointers to global
 * constructors and destructors. The first element contains the
 * number of pointers in each.
 * The tables are also null-terminated.

 */
#include <stdlib.h>

#include "md_init.h"
#include "os-note-elf.h"
#include "extern.h"

/*
 * java class registration hooks
 */

#if (__GNUC__ > 2)
static void *__JCR_LIST__[]
    __attribute__((section(".jcr"), aligned(sizeof(void*)))) = { };

extern void _Jv_RegisterClasses (void *)
    __attribute__((weak));
#endif

/*
 * Include support for the __cxa_atexit/__cxa_finalize C++ abi for
 * gcc > 2.x. __dso_handle is NULL in the main program and a unique
 * value for each C++ shared library. For more info on this API, see:
 *
 *     http://www.codesourcery.com/cxx-abi/abi.html#dso-dtor
 */

#if (__GNUC__ > 2)
void *__dso_handle = &__dso_handle;
__asm(".hidden  __dso_handle");

long __guard_local __dso_hidden __attribute__((section(".openbsd.randomdata")));

extern int __cxa_atexit(void (*)(void *), void *, void *) __attribute__((weak));
extern void __cxa_finalize(void *) __attribute__((weak));

int
atexit(void (*fn)(void))
{
	return (__cxa_atexit((void (*)(void *))fn, NULL, &__dso_handle));
}
asm(".hidden atexit");
#endif

static init_f __CTOR_LIST__[1]
    __attribute__((section(".ctors"))) = { (void *)-1 };	/* XXX */
static init_f __DTOR_LIST__[1]
    __attribute__((section(".dtors"))) = { (void *)-1 };	/* XXX */

static void	__dtors(void) __used;
static void	__ctors(void) __used;

void
__ctors(void)
{
	unsigned long i = (unsigned long) __CTOR_LIST__[0];
	init_f *p;

	if (i == -1)  {
		for (i = 1; __CTOR_LIST__[i] != NULL; i++)
			;
		i--;
	}
	p = __CTOR_LIST__ + i;
	while (i--) {
		(**p--)();
	}
}

static void
__dtors(void)
{
	init_f *p = __DTOR_LIST__ + 1;

	while (*p) {
		(**p++)();
	}
}
void _init(void);
void _fini(void);
static void _do_init(void) __used;
static void _do_fini(void) __used;

MD_SECTION_PROLOGUE(".init", _init);

MD_SECTION_PROLOGUE(".fini", _fini);

MD_SECT_CALL_FUNC(".init", _do_init);
MD_SECT_CALL_FUNC(".fini", _do_fini);

void
_do_init(void)
{
	static int initialized = 0;

	/*
	 * Call global constructors.
	 * Arrange to call global destructors at exit.
	 */
	if (!initialized) {
		initialized = 1;

#if (__GNUC__ > 2)
		if (__JCR_LIST__[0] && _Jv_RegisterClasses)
			_Jv_RegisterClasses(__JCR_LIST__);
#endif

		__ctors();
	}
}

void
_do_fini(void)
{
	static int finalized = 0;
	if (!finalized) {
		finalized = 1;

#if (__GNUC__ > 2)
		if (__cxa_finalize != NULL)
			__cxa_finalize(__dso_handle);
#endif

		/*
		 * since the _init() function sets up the destructors to 
		 * be called by atexit, do not call the destructors here.
		 */
		__dtors();
	}
}
@


1.14
log
@Move atexit(3) into crtbegin.c and certbeginS.c such that we can pass the
right __dso_handle and have dlopen'ed shared objects run their atexit handlers
when they get unloaded.  This is what Linux does, and several ports depend on
this behaviour (and will crash upon exit without this chang).

Based on an earlier diff from matthew@@
Tested by ajacoutot@@
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.13 2012/09/08 20:08:33 matthew Exp $	*/
@


1.13
log
@Reverse the order that ctors and dtors are run in accordance with
GCC's documentation.  Fixes GNU C++'s init_priority attribute.

ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.12 2012/08/28 16:39:09 matthew Exp $	*/
d75 1
d77 7
@


1.12
log
@Add __guard_local as a hidden symbol to ld.so, kernel, and every
executable and DSO (via crtbegin.c/crtbeginS.c).  Not used yet, but
needed before GCC can start emitting -fstack-protector code that uses
them instead of __guard.
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.11 2010/05/01 11:32:43 kettenis Exp $	*/
d87 1
a87 1
__dtors(void)
d89 1
a89 1
	unsigned long i = (unsigned long) __DTOR_LIST__[0];
d93 1
a93 1
		for (i = 1; __DTOR_LIST__[i] != NULL; i++)
d97 1
a97 1
	p = __DTOR_LIST__ + i;
d104 1
a104 1
__ctors(void)
d106 1
a106 1
	init_f *p = __CTOR_LIST__ + 1;
@


1.11
log
@Sprinkle a few __used markers to prevent gcc4 from throwing away essential
bits of code and data.  With this change gcc4 builds usable crt*.o on sparc64,
other architectures probably need some more love.

ok marco@@, jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.10 2009/04/13 20:15:24 kurt Exp $	*/
d72 2
@


1.10
log
@Add gcj java class registration hooks for gcc3 elf archs. From NetBSD
with minor differences.

okay kettenis@@ drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.9 2009/02/04 19:43:48 kettenis Exp $	*/
d81 2
a82 2
static void	__dtors(void);
static void	__ctors(void);
d112 2
a113 2
static void _do_init(void);
static void _do_fini(void);
@


1.9
log
@Tag ELF shared libraries as OpenBSD.

ok kurt@@, drahn@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.8 2007/09/03 14:40:16 millert Exp $	*/
d50 12
d133 6
@


1.8
log
@Add __cxa_atexit() support for gcc3.  This provides support for shared object destructors called at dlclose() time.  Inspired by similar changes in FreeBSD and NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.7 2004/01/26 20:04:11 espie Exp $	*/
d44 1
d46 1
@


1.7
log
@add finalized guard to destructor calls, to prevent multiple calls.
stop most kde apps from burping all over the place on exit, which
means that, somehow, our destructors get registered twice... :-(

Okay drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.5 2004/01/08 14:59:15 drahn Exp $	*/
d47 15
d129 6
@


1.6
log
@small clean-up: typedef to desambiguate const, prototypes...

ok drahn@@, some time ago.
@
text
@d111 9
a119 5
	/*
	 * since the _init() function sets up the destructors to be called
	 * by atexit, do not call the destructors here.
	 */
	__dtors();
@


1.5
log
@__init/__fini handling on ELF has not been correct. It is supposed to
be a section which code stubs (branches) can be added to initialize/destructor
This adds MD stubs to allow this to operate as expected. should fix wine
and behave according to ELF specs. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.4 2003/12/28 04:11:52 drahn Exp $	*/
d45 1
d47 1
a47 1
static void (*__CTOR_LIST__[1])(void)
d49 1
a49 1
static void (*__DTOR_LIST__[1])(void)
d59 1
a59 1
	void (**p)(void);
d75 1
a75 1
	void (**p)(void) = __CTOR_LIST__ + 1;
@


1.4
log
@correct array initializer size to be [1], not [0] fixes gcc3 libstdc++ error
ok espie, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.3 2003/06/26 23:19:18 deraadt Exp $	*/
d44 1
d80 11
d93 1
a93 1
_init(void)
d108 1
a108 1
_fini(void)
@


1.3
log
@boring protos
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.2 2002/02/16 21:27:20 millert Exp $	*/
d45 1
a45 1
static void (*__CTOR_LIST__[0])(void)
d47 1
a47 1
static void (*__DTOR_LIST__[0])(void)
@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.1 2001/05/28 21:38:13 drahn Exp $	*/
d54 1
a54 1
__dtors()
d71 1
a71 1
__ctors()
d81 1
a81 1
_init()
d96 1
a96 1
_fini()
@


1.1
log
@Commonize csu code for elf systems, powerpc now no longer has it's own
versions of these files.

Fixed a bug in ld.so in this, instead of scheduling the fini of each of
the shared libraries with atexit. schedule a function of ld.so itself
and it will walk all of the open libraries when the program exits.
otherwise a shared library could be dl_open()ed and then dl_close()d
and then it would not be mapped for the atexit processing.

TODO:
What if atexit is not found (process did not link against libc?)
Do shared libraries that are dl_closed have their global destructors run?
@
text
@d1 1
a1 1
/*	$OpenBSD: crtbeginS.c,v 1.1 2001/05/28 21:27:44 drahn Exp $	*/
d45 1
a45 1
static void (*__CTOR_LIST__[0]) __P((void))
d47 1
a47 1
static void (*__DTOR_LIST__[0]) __P((void))
d50 2
a51 2
static void	__dtors __P((void));
static void	__ctors __P((void));
@

