head	1.9;
access;
symbols
	OPENBSD_5_6:1.8.0.10
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.10
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.11.15.01.40.07;	author guenther;	state dead;
branches;
next	1.8;
commitid	LraQ2vmu3gUZLnSe;

1.8
date	2012.12.05.23.19.57;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.01.11.32.43;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2009.04.13.20.15.24;	author kurt;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.26.20.04.11;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.26.20.00.37;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.08.14.59.15;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.16.21.27.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.28.21.38.13;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@ELF uberalles, so move the files up out of common_elf

ok miod@@ deraadt@@
@
text
@/*	$OpenBSD: crtendS.c,v 1.8 2012/12/05 23:19:57 deraadt Exp $	*/
/*	$NetBSD: crtend.c,v 1.1 1997/04/16 19:38:24 thorpej Exp $	*/

#include <sys/types.h>
#include "md_init.h"
#include "extern.h"

static init_f __CTOR_LIST__[1]
    __used __attribute__((section(".ctors"))) = { (void *)0 };	/* XXX */
static init_f __DTOR_LIST__[1]
    __used __attribute__((section(".dtors"))) = { (void *)0 };	/* XXX */

#if (__GNUC__ > 2)
static void * __JCR_END__[]
    __used __attribute__((section(".jcr"), aligned(sizeof(void*)))) = { 0 };
#endif

MD_SECTION_EPILOGUE(".init");
MD_SECTION_EPILOGUE(".fini");
@


1.8
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: crtendS.c,v 1.7 2010/05/01 11:32:43 kettenis Exp $	*/
@


1.7
log
@Sprinkle a few __used markers to prevent gcc4 from throwing away essential
bits of code and data.  With this change gcc4 builds usable crt*.o on sparc64,
other architectures probably need some more love.

ok marco@@, jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtendS.c,v 1.6 2009/04/13 20:15:24 kurt Exp $	*/
d4 1
a4 1
#include <sys/cdefs.h>
@


1.6
log
@Add gcj java class registration hooks for gcc3 elf archs. From NetBSD
with minor differences.

okay kettenis@@ drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtendS.c,v 1.5 2004/01/26 20:04:11 espie Exp $	*/
d9 1
a9 1
    __attribute__((section(".ctors"))) = { (void *)0 };		/* XXX */
d11 1
a11 1
    __attribute__((section(".dtors"))) = { (void *)0 };		/* XXX */
d15 1
a15 1
__attribute__((unused, section(".jcr"), aligned(sizeof(void*)))) = { 0 };
@


1.5
log
@add finalized guard to destructor calls, to prevent multiple calls.
stop most kde apps from burping all over the place on exit, which
means that, somehow, our destructors get registered twice... :-(

Okay drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtendS.c,v 1.3 2004/01/08 14:59:15 drahn Exp $	*/
d12 5
@


1.4
log
@small clean-up: typedef to desambiguate const, prototypes...

ok drahn@@, some time ago.
@
text
@@


1.3
log
@__init/__fini handling on ELF has not been correct. It is supposed to
be a section which code stubs (branches) can be added to initialize/destructor
This adds MD stubs to allow this to operate as expected. should fix wine
and behave according to ELF specs. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crtendS.c,v 1.2 2002/02/16 21:27:20 millert Exp $	*/
d6 1
d8 1
a8 1
static void (*__CTOR_LIST__[1])(void)
d10 1
a10 1
static void (*__DTOR_LIST__[1])(void)
@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: crtendS.c,v 1.1 2001/05/28 21:38:13 drahn Exp $	*/
d5 1
d11 3
@


1.1
log
@Commonize csu code for elf systems, powerpc now no longer has it's own
versions of these files.

Fixed a bug in ld.so in this, instead of scheduling the fini of each of
the shared libraries with atexit. schedule a function of ld.so itself
and it will walk all of the open libraries when the program exits.
otherwise a shared library could be dl_open()ed and then dl_close()d
and then it would not be mapped for the atexit processing.

TODO:
What if atexit is not found (process did not link against libc?)
Do shared libraries that are dl_closed have their global destructors run?
@
text
@d1 1
a1 1
/*	$OpenBSD: crtendS.c,v 1.1 2001/05/28 21:27:44 drahn Exp $	*/
d6 1
a6 1
static void (*__CTOR_LIST__[1]) __P((void))
d8 1
a8 1
static void (*__DTOR_LIST__[1]) __P((void))
@

