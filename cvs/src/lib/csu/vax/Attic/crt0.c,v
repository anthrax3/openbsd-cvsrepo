head	1.11;
access;
symbols
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.32
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.30
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.28
	OPENBSD_5_0:1.9.0.26
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.24
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.22
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.18
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.20
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.10
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.8
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2013.12.03.06.21.41;	author guenther;	state dead;
branches;
next	1.10;

1.10
date	2013.07.05.21.10.50;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.04.16.33.05;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.28.18.05.51;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.17.21.16.01;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.17.12.53.44;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.12.12.03.01;	author heko;	state Exp;
branches;
next	1.3;

1.3
date	99.08.20.14.11.36;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	97.06.24.17.15.54;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.11.01.17.38.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@/*	$OpenBSD: crt0.c,v 1.10 2013/07/05 21:10:50 miod Exp $	*/
/*	$NetBSD: crt0.c,v 1.14 2002/05/16 19:38:21 wiz Exp $	*/

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdlib.h>
#include <limits.h>

#ifdef MCRT0
extern void monstartup(u_long, u_long);
extern void _mcleanup(void);
extern unsigned char _etext, _eprol;
#endif

char **environ;
char *__progname = "";
char __progname_storage[1 + NAME_MAX];

static char *_strrchr(const char *, char);

struct kframe {
	int	kargc;
	char	*kargv[1];	/* size depends on kargc */
	char	kargstr[1];	/* size varies */
	char	kenvstr[1];	/* size varies */
};

	asm("	.text");
	asm("	.align 2");
	asm("	.globl _start");
	asm("	.type _start,@@function");
	asm("	_start:");
	asm("		.word 0x0101");		/* two nops just in case */
	asm("		pushl %sp");		/* no registers to save */
	asm("		calls $1,__start");	/* do the real start */
	asm("		halt");

void
__start(struct kframe *kfp)
{
	char **argv, *ap;
	char *s;

	argv = &kfp->kargv[0];
	environ = argv + kfp->kargc + 1;

	if ((__progname = argv[0]) != NULL) {
		if ((__progname = _strrchr(__progname, '/')) == NULL)
			__progname = argv[0];
		else
			__progname++;
		for (s = __progname_storage; *__progname &&
		    s < &__progname_storage[sizeof __progname_storage - 1]; )
			*s++ = *__progname++;
		*s = '\0';
		__progname = __progname_storage;
	}

#ifdef MCRT0
	atexit(_mcleanup);
	monstartup((u_long)&_eprol, (u_long)&_etext);
#endif /* MCRT0 */

	__init();

asm ("__callmain:");		/* Defined for the benefit of debuggers */
	exit(main(kfp->kargc, argv, environ));
}

static char *
_strrchr(const char *p, char ch)
{
	char *save;

	for (save = NULL; ; ++p) {
		if (*p == ch)
			save = (char *)p;
		if (*p == '\0')
			return (save);
	}
}

#ifdef MCRT0
asm ("	.text");
asm ("_eprol:");
#endif
@


1.10
log
@VAX ELF userland bits. Consists mostly of register prefix additions.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.9 2005/08/04 16:33:05 espie Exp $	*/
@


1.9
log
@zap rcsid. Okay deraadt@@, krw@@
@
text
@d1 5
a5 4
/*	$OpenBSD: crt0.c,v 1.8 2003/02/28 18:05:51 deraadt Exp $	*/
/*	$NetBSD: crt0.c,v 1.1.2.1 1995/10/15 19:40:04 ragge Exp $	*/
/*
 * Copyright (c) 1993 Paul Kranenburg
d8 3
d21 5
a25 14
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d27 11
a39 2

#include <sys/param.h>
d41 1
d43 5
a47 1
#include "common.h"
d49 22
a70 1
extern void	start(void) asm("start");
d73 1
a73 1
start()
d75 1
a75 11
	struct kframe {
		int	kargc;
		char	*kargv[1];	/* size depends on kargc */
		char	kargstr[1];	/* size varies */
		char	kenvstr[1];	/* size varies */
	};
	/*
	 *	ALL REGISTER VARIABLES!!!
	 */
	register struct kframe *kfp;
	register char **argv, *ap;
a77 7
#ifdef lint
	kfp = 0;
	initcode = initcode = 0;
#else /* not lint */
	/* make kfp point to the arguments on stack */
	asm ("movl sp, %0" : "=r" (kfp));
#endif /* not lint */
d81 3
a83 3
	if (ap = argv[0]) {
		if ((__progname = _strrchr(ap, '/')) == NULL)
			__progname = ap;
d85 1
a85 1
			++__progname;
a92 12
#ifdef DYNAMIC
	/* ld(1) convention: if DYNAMIC = 0 then statically linked */
#ifdef stupid_gcc
	if (&_DYNAMIC)
#else
	if ( ({volatile caddr_t x = (caddr_t)&_DYNAMIC; x; }) )
#endif
		__load_rtld(&_DYNAMIC);
#endif /* DYNAMIC */

asm("eprol:");

d95 1
a95 1
	monstartup((u_long)&eprol, (u_long)&etext);
d98 2
d104 4
a107 10
#ifdef DYNAMIC
	asm("	___syscall:");
	asm("		.word 0");		/* no registers to save */
	asm("		movl 4(ap), r0");	/* get syscall number */
	asm("		subl3 $1,(ap)+,(ap)");	/* n-1 args to syscall */
	asm("		chmk r0");		/* do system call */
	asm("		jcs 1f");		/* check error */
	asm("		ret");			/* return */
	asm("	1:	movl $-1, r0");
	asm("		ret");
d109 7
a115 3
#endif /* DYNAMIC */

#include "common.c"
@


1.8
log
@copy basename of argv[0] to bss for __progname, so that large stack smash
does not make propolice reporting ineffective; millert miod ok
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.7 2002/09/17 21:16:01 deraadt Exp $	*/
a33 4

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: crt0.c,v 1.7 2002/09/17 21:16:01 deraadt Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.7
log
@uncommit, since it breaks macppc libc.  millert and miod have now said they
did NOT approve those for commit.  why did mickey feel he was ok to go
commiting a set of diffs which had not been passed around and tested by people?
we don't know.  mickey, have you got something to say for yourself?
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.5 2002/02/16 21:27:20 millert Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.5 2002/02/16 21:27:20 millert Exp $";
d60 1
d72 1
a72 1
	if (ap = argv[0])
d77 6
@


1.6
log
@use a different name for __syscall(); millert@@ miod@@ niklas@@ ok
@
text
@d99 1
a99 1
	asm("	___syscall2:");
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.4 2001/08/12 12:03:01 heko Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.4 2001/08/12 12:03:01 heko Exp $";
d99 1
a99 1
	asm("	___syscall:");
@


1.4
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.3 1999/08/20 14:11:36 niklas Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.3 1999/08/20 14:11:36 niklas Exp $";
d44 1
a44 1
extern void	start __P((void)) asm("start");
@


1.3
log
@Fix RCS Ids
@
text
@d1 1
a1 1
/*	$OpenBSD: crt0.c,v 1.2 1997/06/24 17:15:54 tholo Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: crt0.c,v 1.2 1997/06/24 17:15:54 tholo Exp $";
d92 1
a92 1
#endif MCRT0
@


1.2
log
@Use OpenBSD tags and not SCCS or RCS Id tags
@
text
@d1 1
a2 1
/*	$OpenBSD$	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD$";
@


1.1
log
@vax c runtime support
@
text
@d2 1
d36 1
a36 1
static char sccsid[] = "%W% (Erasmus) %G%";
@
