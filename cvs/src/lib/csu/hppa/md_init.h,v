head	1.13;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.34
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.32
	OPENBSD_5_0:1.2.0.30
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.28
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.26
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.22
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.24
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.20
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.18
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.16
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2017.08.11.20.13.31;	author guenther;	state Exp;
branches;
next	1.12;
commitid	5eAWkIW8wRuBAA6V;

1.12
date	2017.02.26.22.26.42;	author kettenis;	state Exp;
branches;
next	1.11;
commitid	5V3iHagkyKth5XS4;

1.11
date	2017.01.21.01.43.16;	author guenther;	state Exp;
branches;
next	1.10;
commitid	DSJ1ySpADdWuIqQN;

1.10
date	2017.01.21.00.45.13;	author guenther;	state Exp;
branches;
next	1.9;
commitid	TdwnlwbfWriSs7fI;

1.9
date	2016.03.20.02.32.39;	author guenther;	state Exp;
branches;
next	1.8;
commitid	va8OhMk7nsI8YWCs;

1.8
date	2016.03.13.18.35.02;	author guenther;	state Exp;
branches;
next	1.7;
commitid	dhkWXrJW7zbsTPZe;

1.7
date	2015.09.01.05.40.06;	author guenther;	state Exp;
branches;
next	1.6;
commitid	AUiGrkvnwcUfa8tR;

1.6
date	2014.12.23.12.25.43;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	epSIDMoKmiA3UO2i;

1.5
date	2014.12.22.19.02.58;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	CZTAYTCWY9sFUXIy;

1.4
date	2013.12.03.06.21.40;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.22.17.19.34;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.26.19.17.35;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.14.59.15;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.13
log
@_dl_printf is no longer referenced by RELOC_{JMPREL,DYN,GOT}; delete the stub

ok kettenis@@
@
text
@/* $OpenBSD: md_init.h,v 1.12 2017/02/26 22:26:42 kettenis Exp $ */

/*
 * Copyright (c) 2003 Dale Rahn. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */  

/*
 * hppa overrides these because it has different label syntax
 */
#define MD_DATA_SECTION_FLAGS_SYMBOL(section, flags, type, symbol)	\
	extern __dso_hidden type symbol[];				\
	__asm("	.section "section",\""flags"\",@@progbits		\n" \
	"	.balign 4						\n" \
	#symbol"							\n" \
	"	.previous")
#define MD_DATA_SECTION_SYMBOL_VALUE(section, type, symbol, value)	\
	extern __dso_hidden type symbol[];				\
	__asm("	.section "section",\"aw\",@@progbits			\n" \
	"	.balign 4						\n" \
	#symbol"							\n" \
	"	.int "#value"						\n" \
	"	.previous")
#define MD_DATA_SECTION_FLAGS_VALUE(section, flags, value)		\
	__asm("	.section "section",\""flags"\",@@progbits		\n" \
	"	.balign 4						\n" \
	"	.int "#value"						\n" \
	"	.previous")

#define MD_SECT_CALL_FUNC(section, func)			\
	__asm (".section "#section",\"ax\",@@progbits	\n"	\
	"	bl	" #func ",%r2			\n"	\
	"	stw	%r19,-80(%r30)			\n"	\
	"	ldw	-80(%r30),%r19			\n"	\
	"	.previous")

#define MD_SECTION_PROLOGUE(sect, entry_pt)			\
	__asm (						   	\
	"	.section "#sect",\"ax\",@@progbits	\n"	\
	"	.EXPORT "#entry_pt",ENTRY,PRIV_LEV=3,ARGW0=NO,ARGW1=NO,ARGW2=NO,ARGW3=NO,RTNVAL=NO					\n"	\
	"	.align 4				\n"	\
	#entry_pt"					\n"	\
	"	stw %r2, -20(%r30)			\n"	\
	"	ldo 64(%r30),%r30			\n"	\
	"	/* fall thru */				\n"	\
	"	.previous")


#define MD_SECTION_EPILOGUE(sect)				\
	__asm (							\
	"	.section "#sect",\"ax\",@@progbits	\n"	\
	"	ldw -84(%r30),%r2			\n"	\
	"	bv %r0(%r2)				\n"	\
	"	ldo -64(%r30),%r30			\n"	\
	"	.previous")


#include <sys/exec.h>		/* for struct ps_strings */

#define	MD_CRT0_START						\
	__asm(							\
	".import $global$, data					\n" \
	"	.import ___start, code				\n" \
	"	.text						\n" \
	"	.align	4					\n" \
	"	.export __start, entry				\n" \
	"	.type	__start,@@function			\n" \
	"	.label __start					\n" \
	"	.proc						\n" \
	"	.callinfo frame=0, calls			\n" \
	"	.entry						\n" \
	"	bl L$lpc, %r27					\n" \
	"	depi 0, 31, 2, %r27				\n" \
	"L$lpc:  addil L'$global$ - ($PIC_pcrel$0 - 8), %r27	\n" \
	"	ldo R'$global$ - ($PIC_pcrel$0 - 12)(%r1),%r27	\n" \
	"	.call						\n" \
	"	b	___start				\n" \
	"	copy    %r27, %r19				\n" \
	"	.exit						\n" \
	"	.procend")


#define	MD_RCRT0_START						\
	__asm(							\
	".import $global$, data					\n" \
	"	.import ___start, code				\n" \
	"	.text						\n" \
	"	.align	4					\n" \
	"	.export __start, entry				\n" \
	"	.type	__start,@@function			\n" \
	"	.label __start					\n" \
	"	.proc						\n" \
	"	.callinfo frame=0, calls			\n" \
	"	.entry						\n" \
	"	copy	%r3, %r1				\n" \
	"	copy	%sp, %r3				\n" \
	"	stwm	%r1, 64+16*4(%sp)			\n" \
	"	stw	%arg0, -36(%r3)				\n" \
	"	bl	1f, %dp					\n" \
	"	depi	0, 31, 2, %dp				\n" \
	"1:	addil	L'$global$ - ($PIC_pcrel$0 - 8), %dp	\n" \
	"	ldo	R'$global$ - ($PIC_pcrel$0 - 12)(%r1), %dp \n" \
	"	bl	1f, %arg2				\n" \
	"	depi	0, 31, 2, %arg2				\n" \
	"1:	addil	L'_DYNAMIC - ($PIC_pcrel$0 - 8), %arg2	\n" \
	"	ldo	R'_DYNAMIC - ($PIC_pcrel$0 - 12)(%r1), %arg2 \n" \
	"	stw	%arg2, -40(%r3)				\n" \
	"	ldw	0(%arg0), %arg0				\n" \
	"	ldo	4(%r3), %arg1				\n" \
	"	ldo	-4(%arg0), %arg0			\n" \
	"	bl	_dl_boot_bind, %rp			\n" \
	"	copy	%dp, %r19				\n" \
	"	ldw	-36(%r3), %arg0				\n" \
	"	copy	%r0, %arg1				\n" \
	"	ldo	64(%r3), %sp				\n" \
	"	ldwm	-64(%sp), %r3				\n" \
	"	.call						\n" \
	"	b	___start				\n" \
	"	copy	%dp, %r19				\n" \
	"	.exit						\n" \
	"	.procend					\n" \
	"	.export _dl_exit, entry				\n" \
	"	.type	_dl_exit,@@function			\n" \
	"	.label _dl_exit					\n" \
	"	.proc						\n" \
	"	.callinfo frame=0, calls			\n" \
	"	.entry						\n" \
	"_dl_exit:						\n" \
	"	stw	%rp, -24(%sp)				\n" \
	"	ldil	L%0xc0000000, %r1			\n" \
	"	ble	4(%sr7, %r1)				\n" \
	"	ldi	1, %t1					\n" \
	"	comb,<>	%r0, %t1, 1f				\n" \
	"	ldw	-24(%sp), %rp				\n" \
	"	bv	%r0(%rp)				\n" \
	"	nop						\n" \
	"1:	bv	%r0(%rp)				\n" \
	"	sub	%r0, %ret0, %ret0			\n" \
	"	.exit						\n" \
	"	.procend")


#define	MD_START_ARGS	struct ps_strings *arginfo, void (*cleanup)(void)
#define	MD_START_SETUP				\
	char	**argv, **envp;			\
	int	argc;				\
						\
	argv = arginfo->ps_argvstr;		\
	argc = arginfo->ps_nargvstr;		\
	envp = arginfo->ps_envstr;

#define	MD_EPROL_LABEL	__asm (".export _eprol, entry\n\t.label _eprol")
@


1.12
log
@Our certbegin/certend is always PIC, so remove the non-PIC MD_SECT_CALL_FUNC()
implementations.

ok guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.11 2017/01/21 01:43:16 guenther Exp $ */
a157 11
	"	.exit						\n" \
	"	.procend					\n" \
	"	.export _dl_printf, entry			\n" \
	"	.type	_dl_printf,@@function			\n" \
	"	.label _dl_printf				\n" \
	"	.proc						\n" \
	"	.callinfo frame=0, calls			\n" \
	"	.entry						\n" \
	"_dl_printf:						\n" \
	"	bv	%r0(%rp)				\n" \
	"	nop						\n" \
@


1.11
log
@Fix misspelling in comment
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.10 2017/01/21 00:45:13 guenther Exp $ */
a48 1
#ifdef __PIC__
a54 14
#else
#define MD_SECT_CALL_FUNC(section, func)			\
	__asm (".section .rodata			\n"	\
	"	.align 4				\n"	\
	"L$" #func "					\n"	\
	"	.word "#func "				\n"	\
	"	.previous				\n"	\
	"	.section "#section",\"ax\",@@progbits	\n"	\
	"	ldil	LR'L$" #func ",%r1		\n"	\
	"	ldw	RR'L$" #func "(%r1), %r31	\n"	\
	"	ble	0(%sr4,%r31)			\n"	\
	"	copy 	%r31,%r2			\n"	\
	"	.previous")
#endif
@


1.10
log
@Declare the symbols that label the .ctors, .dtors, .eh_frame, and .jcr
sections as extern hidden arrays of indefinite size, so that the compiler
(well, clang) doesn't believe it knows the exact contents and thus optimize
things into infinite loops.  Actually set the symbols to be in the sections
and insert the leading and trailing values via __asm().

Problem pointed out by patrick@@
testing and ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.9 2016/03/20 02:32:39 guenther Exp $ */
d92 1
a92 1
#include <sys/exec.h>		/* for struct psstrings */
@


1.9
log
@Rearrange C runtime bits: now that ld.so exports environ and __progname,
move their definitions and initialization in static links to libc.a
Make crt0 always invoke a new func _csu_finish() in libc to process the auxv
and to either register the ld.so cleanup function (in dynamic links) or
initialize environ and __progname and do MC_DISABLE_KBIND (in static links).
In libc, get pagesize from auxv; cache that between getpagesize() and
sysconf(_SC_PAGESIZE)

ok mpi@@ "good time" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.8 2016/03/13 18:35:02 guenther Exp $ */
d27 21
@


1.8
log
@crt0.c is already setting environ, so don't set it in MD_START_SETUP

ok kettenis@@ mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.7 2015/09/01 05:40:06 guenther Exp $ */
a176 12

#include <sys/syscall.h>
#include <machine/vmparam.h>	/* SYSCALLGATE */
#define	MD_DISABLE_KBIND						\
do {									\
	register long r1 __asm__("r1") = SYSCALLGATE;			\
	register void *arg0 __asm__("r26") = NULL;			\
	__asm__ __volatile__ ("ble 4(%%sr7, %%r1) ! ldi %0, %%r22"	\
	    :								\
	    : "i" (SYS_kbind), "r" (r1), "r"(arg0)			\
	    : "r22", "r28", "r29", "cc", "memory");			\
} while (0)
@


1.7
log
@In static binaries, invoke kbind() once to disable it.

With much assistance from miod@@
ok deraadt@@@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.6 2014/12/23 12:25:43 kettenis Exp $ */
d174 1
a174 1
	environ = envp = arginfo->ps_envstr;
@


1.6
log
@Set up the linkage table register (%r19) before calling _dl_boot_bind.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.5 2014/12/22 19:02:58 kettenis Exp $ */
d177 12
@


1.5
log
@Self-relocation code for hppa.
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.4 2013/12/03 06:21:40 guenther Exp $ */
d112 4
d117 1
a117 1
	"	depi 0, 31, 2, %arg2				\n" \
a120 1
	"	ldi	-1, %dp					\n" \
d123 1
d125 1
a125 1
	"	ldo	-4(%arg0), %arg0			\n" \
a129 4
	"	bl L$lpc, %r27					\n" \
	"	depi 0, 31, 2, %r27				\n" \
	"L$lpc:  addil L'$global$ - ($PIC_pcrel$0 - 8), %r27	\n" \
	"	ldo R'$global$ - ($PIC_pcrel$0 - 12)(%r1),%r27	\n" \
d132 1
a132 1
	"	copy    %r27, %r19				\n" \
@


1.4
log
@Merge the per-arch crt0.c files into common_elf/crt0.c, with MD macros in
the md_init.h files.

Worked out with and ok miod@@; ok matthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.3 2012/08/22 17:19:34 pascal Exp $ */
d94 72
@


1.3
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.2 2004/05/26 19:17:35 mickey Exp $ */
d69 36
@


1.2
log
@better code for calling ctors
@
text
@d1 1
a1 1
/* $OpenBSD: md_init.h,v 1.1 2004/01/08 14:59:15 drahn Exp $ */
d28 1
a28 1
#ifdef PIC
@


1.1
log
@__init/__fini handling on ELF has not been correct. It is supposed to
be a section which code stubs (branches) can be added to initialize/destructor
This adds MD stubs to allow this to operate as expected. should fix wine
and behave according to ELF specs. ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a30 2
	"	stw	%r19,-32(%r30)			\n"	\
	"	stw	%r4,-64(%r30)			\n"	\
d32 2
a33 2
	"	copy 	%r19,%r4			\n"	\
	"	copy 	%r4,%r19			\n"	\
@

