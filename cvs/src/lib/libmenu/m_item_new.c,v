head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.34
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.32
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.28
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.24
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.26
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.28
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.10
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.8
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.6
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	initial:1.1.1.1
	ncurses:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2010.01.12.23.22.08;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.04.23.04.36;	author tdeval;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.22.18.02.04;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.05.17.03.04.24;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.05.08.20.29.03;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.07.24.16.39.01;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.31.20;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.03.58.49;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.21.34.41;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.06.02.21.34.41;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2005,2006 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *   Author:  Juergen Pfeifer, 1995,1997                                    *
 ****************************************************************************/

/***************************************************************************
* Module m_item_new                                                        *
* Create and destroy menu items                                            *
* Set and get marker string for menu                                       *
***************************************************************************/

#include "menu.priv.h"

#if USE_WIDEC_SUPPORT
#if HAVE_WCTYPE_H
#include <wctype.h>
#endif
#endif

MODULE_ID("$Id: m_item_new.c,v 1.27 2006/12/17 19:47:09 tom Exp $")

/*---------------------------------------------------------------------------
|   Facility      :  libnmenu  
|   Function      :  bool Is_Printable_String(const char *s)
|   
|   Description   :  Checks whether or not the string contains only printable
|                    characters.
|
|   Return Values :  TRUE     - if string is printable
|                    FALSE    - if string contains non-printable characters
+--------------------------------------------------------------------------*/
static bool
Is_Printable_String(const char *s)
{
  int result = TRUE;

#if USE_WIDEC_SUPPORT
  int count = mbstowcs(0, s, 0);
  wchar_t *temp = 0;

  assert(s);

  if (count > 0
      && (temp = typeCalloc(wchar_t, (2 + (unsigned)count))) != 0)
    {
      int n;

      mbstowcs(temp, s, (unsigned)count);
      for (n = 0; n < count; ++n)
	if (!iswprint((wint_t) temp[n]))
	  {
	    result = FALSE;
	    break;
	  }
      free(temp);
    }
#else
  assert(s);
  while (*s)
    {
      if (!isprint(UChar(*s)))
	{
	  result = FALSE;
	  break;
	}
      s++;
    }
#endif
  return result;
}

/*---------------------------------------------------------------------------
|   Facility      :  libnmenu  
|   Function      :  ITEM *new_item(char *name, char *description)
|   
|   Description   :  Create a new item with name and description. Return
|                    a pointer to this new item.
|                    N.B.: an item must(!) have a name.
|
|   Return Values :  The item pointer or NULL if creation failed.
+--------------------------------------------------------------------------*/
NCURSES_EXPORT(ITEM *)
new_item(const char *name, const char *description)
{
  ITEM *item;

  T((T_CALLED("new_item(\"%s\", \"%s\")"),
     name ? name : "",
     description ? description : ""));

  if (!name || (*name == '\0') || !Is_Printable_String(name))
    {
      item = (ITEM *) 0;
      SET_ERROR(E_BAD_ARGUMENT);
    }
  else
    {
      item = (ITEM *) calloc(1, sizeof(ITEM));
      if (item)
	{
	  *item = _nc_Default_Item;	/* hope we have struct assignment */

	  item->name.length = strlen(name);
	  item->name.str = name;

	  if (description && (*description != '\0') &&
	      Is_Printable_String(description))
	    {
	      item->description.length = strlen(description);
	      item->description.str = description;
	    }
	  else
	    {
	      item->description.length = 0;
	      item->description.str = (char *)0;
	    }
	}
      else
	SET_ERROR(E_SYSTEM_ERROR);
    }
  returnItem(item);
}

/*---------------------------------------------------------------------------
|   Facility      :  libnmenu  
|   Function      :  int free_item(ITEM *item)
|   
|   Description   :  Free the allocated storage for this item. 
|                    N.B.: a connected item can't be freed.
|
|   Return Values :  E_OK              - success
|                    E_BAD_ARGUMENT    - invalid value has been passed
|                    E_CONNECTED       - item is still connected to a menu    
+--------------------------------------------------------------------------*/
NCURSES_EXPORT(int)
free_item(ITEM * item)
{
  T((T_CALLED("free_item(%p)"), item));

  if (!item)
    RETURN(E_BAD_ARGUMENT);

  if (item->imenu)
    RETURN(E_CONNECTED);

  free(item);

  RETURN(E_OK);
}

/*---------------------------------------------------------------------------
|   Facility      :  libnmenu  
|   Function      :  int set_menu_mark( MENU *menu, const char *mark )
|   
|   Description   :  Set the mark string used to indicate the current
|                    item (single-valued menu) or the selected items
|                    (multi-valued menu).
|                    The mark argument may be NULL, in which case no 
|                    marker is used.
|                    This might be a little bit tricky, because this may 
|                    affect the geometry of the menu, which we don't allow 
|                    if it is already posted.
|
|   Return Values :  E_OK               - success
|                    E_BAD_ARGUMENT     - an invalid value has been passed
|                    E_SYSTEM_ERROR     - no memory to store mark
+--------------------------------------------------------------------------*/
NCURSES_EXPORT(int)
set_menu_mark(MENU * menu, const char *mark)
{
  unsigned l;

  T((T_CALLED("set_menu_mark(%p,%s)"), menu, _nc_visbuf(mark)));

  if (mark && (*mark != '\0') && Is_Printable_String(mark))
    l = strlen(mark);
  else
    l = 0;

  if (menu)
    {
      char *old_mark = menu->mark;
      unsigned short old_status = menu->status;

      if (menu->status & _POSTED)
	{
	  /* If the menu is already posted, the geometry is fixed. Then
	     we can only accept a mark with exactly the same length */
	  if (menu->marklen != (int)l)
	    RETURN(E_BAD_ARGUMENT);
	}
      menu->marklen = l;
      if (l)
	{
	  menu->mark = (char *)malloc(l + 1);
	  if (menu->mark)
	    {
	      strlcpy(menu->mark, mark, l+1);
	      if (menu != &_nc_Default_Menu)
		menu->status |= _MARK_ALLOCATED;
	    }
	  else
	    {
	      menu->mark = old_mark;
	      RETURN(E_SYSTEM_ERROR);
	    }
	}
      else
	menu->mark = (char *)0;

      if ((old_status & _MARK_ALLOCATED) && old_mark)
	free(old_mark);

      if (menu->status & _POSTED)
	{
	  _nc_Draw_Menu(menu);
	  _nc_Show_Menu(menu);
	}
      else
	{
	  /* Recalculate the geometry */
	  _nc_Calculate_Item_Length_and_Width(menu);
	}
    }
  else
    {
      returnCode(set_menu_mark(&_nc_Default_Menu, mark));
    }
  RETURN(E_OK);
}

/*---------------------------------------------------------------------------
|   Facility      :  libnmenu  
|   Function      :  char *menu_mark(const MENU *menu)
|   
|   Description   :  Return a pointer to the marker string
|
|   Return Values :  The marker string pointer or NULL if no marker defined
+--------------------------------------------------------------------------*/
NCURSES_EXPORT(const char *)
menu_mark(const MENU * menu)
{
  T((T_CALLED("menu_mark(%p)"), menu));
  returnPtr(Normalize_Menu(menu)->mark);
}

/* m_item_new.c */
@


1.8
log
@strcpy -> strlcpy
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: m_item_new.c,v 1.7 2001/01/22 18:02:04 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d32 1
a32 1
 *   Author: Juergen Pfeifer <juergen.pfeifer@@gmx.net> 1995,1997            *
d43 7
a49 1
MODULE_ID("$From: m_item_new.c,v 1.12 2000/12/10 02:16:48 tom Exp $")
d61 2
a62 1
static bool Is_Printable_String(const char *s)
d64 23
d88 1
a88 1
  while(*s)
d90 5
a94 2
      if (!isprint((unsigned char)*s))
	return FALSE;
d97 2
a98 1
  return TRUE;
d112 1
a112 1
new_item (const char *name, const char *description)
d115 6
a120 2
  
  if ( !name || (*name == '\0') || !Is_Printable_String(name) )
d122 2
a123 2
      item = (ITEM *)0;
      SET_ERROR( E_BAD_ARGUMENT );
d127 1
a127 1
      item = (ITEM *)calloc(1,sizeof(ITEM));
d130 4
a133 4
	  *item  = _nc_Default_Item; /* hope we have struct assignment */
	  
	  item->name.length	   = strlen(name);
	  item->name.str 	   = name;
d135 1
a135 1
	  if (description && (*description != '\0') && 
d138 2
a139 2
	      item->description.length = strlen(description);	      
	      item->description.str    = description;
d144 1
a144 1
	      item->description.str    = (char *)0;
d148 3
a150 3
	SET_ERROR( E_SYSTEM_ERROR );
    }  
  return(item);
d165 1
a165 1
free_item (ITEM * item)
d167 2
d170 1
a170 1
    RETURN( E_BAD_ARGUMENT );
d173 2
a174 2
    RETURN( E_CONNECTED );
  
d177 1
a177 1
  RETURN( E_OK );
d198 1
a198 1
set_menu_mark (MENU * menu, const char * mark)
d200 3
a202 1
  int l;
d204 1
a204 1
  if ( mark && (*mark != '\0') && Is_Printable_String(mark) )
d209 1
a209 1
  if ( menu )
d218 1
a218 1
	  if (menu->marklen != l) 
d220 1
a220 1
	}	
d224 1
a224 1
	  menu->mark = (char *)malloc(l+1);
d239 1
a239 1
      
d245 2
a246 2
	  _nc_Draw_Menu( menu );
	  _nc_Show_Menu( menu );
d251 1
a251 1
	  _nc_Calculate_Item_Length_and_Width( menu );			
d256 1
a256 1
      return set_menu_mark(&_nc_Default_Menu, mark);
d270 1
a270 1
menu_mark (const MENU * menu)
d272 2
a273 1
  return Normalize_Menu( menu )->mark;
@


1.7
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: m_item_new.c,v 1.6 1999/05/17 03:04:24 millert Exp $	*/
d185 1
a185 1
	      strcpy(menu->mark, mark);
@


1.6
log
@ncurses-4.2-990516; no code changes
@
text
@d1 1
a1 1
/*	$OpenBSD: m_item_new.c,v 1.5 1999/05/08 20:29:03 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d43 1
a43 1
MODULE_ID("$From: m_item_new.c,v 1.11 1999/05/16 17:28:49 juergen Exp $")
d77 2
a78 1
ITEM *new_item(const char *name, const char *description)
d126 2
a127 1
int free_item(ITEM * item)
d157 2
a158 1
int set_menu_mark(MENU * menu, const char * mark)
d227 2
a228 1
const char *menu_mark(const MENU * menu)
@


1.5
log
@ncurses-4.2-990424
@
text
@d1 1
a1 1
/*	$OpenBSD: m_item_new.c,v 1.4 1998/07/24 16:39:01 millert Exp $	*/
d32 1
a32 1
 *   Author: Juergen Pfeifer <Juergen.Pfeifer@@T-Online.de> 1995,1997        *
d43 1
a43 1
MODULE_ID("$From: m_item_new.c,v 1.9 1999/03/28 18:10:24 juergen Exp $")
@


1.4
log
@libmenu from ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
MODULE_ID("$From: m_item_new.c,v 1.8 1998/02/11 12:13:50 tom Exp $")
d183 2
a184 1
	      menu->status |= _MARK_ALLOCATED;
@


1.3
log
@merge of ncurses-4.1-971129
@
text
@d3 31
a33 21
/*-----------------------------------------------------------------------------+
|           The ncurses menu library is  Copyright (C) 1995-1997               |
|             by Juergen Pfeifer <Juergen.Pfeifer@@T-Online.de>                 |
|                          All Rights Reserved.                                |
|                                                                              |
| Permission to use, copy, modify, and distribute this software and its        |
| documentation for any purpose and without fee is hereby granted, provided    |
| that the above copyright notice appear in all copies and that both that      |
| copyright notice and this permission notice appear in supporting             |
| documentation, and that the name of the above listed copyright holder(s) not |
| be used in advertising or publicity pertaining to distribution of the        |
| software without specific, written prior permission.                         | 
|                                                                              |
| THE ABOVE LISTED COPYRIGHT HOLDER(S) DISCLAIM ALL WARRANTIES WITH REGARD TO  |
| THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FIT-  |
| NESS, IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR   |
| ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RE- |
| SULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, |
| NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH    |
| THE USE OR PERFORMANCE OF THIS SOFTWARE.                                     |
+-----------------------------------------------------------------------------*/
d43 1
a43 1
MODULE_ID("Id: m_item_new.c,v 1.7 1997/10/21 08:44:31 juergen Exp $")
@


1.2
log
@libmenu from ncurses 4.1.  Post 4.1 patches to be applied in a separate commit.
@
text
@d1 2
d26 1
a26 1
* Module menu_item_new                                                     *
d28 1
a28 1
* Set and get marker string for menu
d33 1
a33 1
MODULE_ID("Id: m_item_new.c,v 1.5 1997/05/01 16:47:26 juergen Exp $")
d84 2
a85 12
	  item->name.str 	   = (char *)malloc(1 + item->name.length);
	  if (item->name.str)
	    {
	      strcpy(item->name.str, name);
	    }
	  else
	    {
	      free(item);
	      SET_ERROR( E_SYSTEM_ERROR );
	      return (ITEM *)0;
	    }
	  
d90 1
a90 13
	      item->description.str    = 
		(char *)malloc(1 + item->description.length);
	      if (item->description.str)
		{
		  strcpy(item->description.str, description);
		}
	      else
		{
		  free(item->name.str);
		  free(item);
		  SET_ERROR( E_SYSTEM_ERROR );
		  return (ITEM *)0;
		}
a122 4
  if (item->name.str)
    free(item->name.str);
  if (item->description.str)
    free (item->description.str);
@


1.1
log
@Initial revision
@
text
@d1 21
a21 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d31 2
d65 1
a65 1
ITEM *new_item(char *name, char *description)
a80 1
	  item->name.str 	   = name;
d82 11
d94 18
a111 3
	  item->description.str    = description;
	  if (description && Is_Printable_String(description))
	    item->description.length = strlen(description);
d143 4
d148 1
d154 1
a154 1
|   Function      :  int set_menu_mark( MENU *menu, char *mark )
d167 1
d169 1
a169 1
int set_menu_mark(MENU * menu, char * mark)
d172 2
a173 2
  
  if ( mark && *mark && Is_Printable_String(mark) )
d177 1
a177 1
  
d180 3
a189 1
      menu->mark    = l ? mark : (char *)0;
d191 16
d208 3
d224 1
a224 2
      _nc_Default_Menu.mark    = l ? mark : (char *)0;
      _nc_Default_Menu.marklen = l;
d237 1
a237 1
char *menu_mark(const MENU * menu)
@


1.1.1.1
log
@SYSV-style menu library; from ncurses
@
text
@@
