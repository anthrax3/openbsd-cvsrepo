head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.30
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.32
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.28
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.24
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.26
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.18
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.38
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.34
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.32
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.30
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.28
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.26
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.24
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.22
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2010.01.12.23.22.05;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.22.18.01.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.11.28.17.49.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.05.08.20.29.00;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.09.45;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Thomas E. Dickey                    1996-on                     *
 ****************************************************************************/

#include <curses.priv.h>
#include <term_entry.h>
#include <tic.h>

#if HAVE_NC_FREEALL

#if HAVE_LIBDBMALLOC
extern int malloc_errfd;	/* FIXME */
#endif

MODULE_ID("$Id: lib_freeall.c,v 1.54 2008/09/27 13:09:57 tom Exp $")

/*
 * Free all ncurses data.  This is used for testing only (there's no practical
 * use for it as an extension).
 */
NCURSES_EXPORT(void)
_nc_freeall(void)
{
    WINDOWLIST *p, *q;
    static va_list empty_va;

    T((T_CALLED("_nc_freeall()")));
#if NO_LEAKS
    if (SP != 0) {
	if (SP->_oldnum_list != 0) {
	    FreeAndNull(SP->_oldnum_list);
	}
	if (SP->_panelHook.destroy != 0) {
	    SP->_panelHook.destroy(SP->_panelHook.stdscr_pseudo_panel);
	}
    }
#endif
    if (SP != 0) {
	_nc_lock_global(curses);

	while (_nc_windows != 0) {
	    bool deleted = FALSE;

	    /* Delete only windows that're not a parent */
	    for (each_window(p)) {
		bool found = FALSE;

		for (each_window(q)) {
		    if ((p != q)
			&& (q->win._flags & _SUBWIN)
			&& (&(p->win) == q->win._parent)) {
			found = TRUE;
			break;
		    }
		}

		if (!found) {
		    if (delwin(&(p->win)) != ERR)
			deleted = TRUE;
		    break;
		}
	    }

	    /*
	     * Don't continue to loop if the list is trashed.
	     */
	    if (!deleted)
		break;
	}
	delscreen(SP);
	_nc_unlock_global(curses);
    }
    if (cur_term != 0)
	del_curterm(cur_term);

    (void) _nc_printf_string(0, empty_va);
#ifdef TRACE
    (void) _nc_trace_buf(-1, 0);
#endif
#if USE_WIDEC_SUPPORT
    FreeIfNeeded(_nc_wacs);
#endif
    _nc_leaks_tinfo();

#if HAVE_LIBDBMALLOC
    malloc_dump(malloc_errfd);
#elif HAVE_LIBDMALLOC
#elif HAVE_LIBMPATROL
    __mp_summary();
#elif HAVE_PURIFY
    purify_all_inuse();
#endif
    returnVoid;
}

NCURSES_EXPORT(void)
_nc_free_and_exit(int code)
{
    char *last_setbuf = (SP != 0) ? SP->_setbuf : 0;

    _nc_freeall();
#ifdef TRACE
    trace(0);			/* close trace file, freeing its setbuf */
    {
	static va_list fake;
	free(_nc_varargs("?", fake));
    }
#endif
    fclose(stdout);
    FreeIfNeeded(last_setbuf);
    exit(code);
}

#else
NCURSES_EXPORT(void)
_nc_freeall(void)
{
}

NCURSES_EXPORT(void)
_nc_free_and_exit(int code)
{
    if (SP)
	delscreen(SP);
    if (cur_term != 0)
	del_curterm(cur_term);
    exit(code);
}
#endif
@


1.4
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_freeall.c,v 1.3 1999/11/28 17:49:53 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999,2000 Free Software Foundation, Inc.              *
d32 1
a32 1
 *  Author: Thomas E. Dickey <dickey@@clark.net> 1996,1997                   *
d37 1
d45 1
a45 25
MODULE_ID("$From: lib_freeall.c,v 1.18 2000/12/10 02:43:27 tom Exp $")

static void
free_slk(SLK * p)
{
    if (p != 0) {
	FreeIfNeeded(p->ent);
	FreeIfNeeded(p->buffer);
	free(p);
    }
}

static void
free_tries(struct tries *p)
{
    struct tries *q;

    while (p != 0) {
	q = p->sibling;
	if (p->child != 0)
	    free_tries(p->child);
	free(p);
	p = q;
    }
}
d55 1
d57 1
d59 8
a66 1
    _nc_free_tparm();
d69 2
d72 2
d75 1
a75 1
	    for (p = _nc_windows; p != 0; p = p->next) {
d78 1
a78 1
		for (q = _nc_windows; q != 0; q = q->next) {
d80 2
a81 2
			&& (q->win->_flags & _SUBWIN)
			&& (p->win == q->win->_parent)) {
d88 2
a89 1
		    delwin(p->win);
d93 6
d100 2
a101 9

	free_tries(SP->_keytry);
	free_tries(SP->_key_ok);
	free_slk(SP->_slk);
	FreeIfNeeded(SP->_color_pairs);
	FreeIfNeeded(SP->_color_table);
#if !BROKEN_LINKER
	FreeAndNull(SP);
#endif
d103 2
d106 1
a106 4
    if (cur_term != 0) {
	_nc_free_termtype(&(cur_term->type));
	free(cur_term);
    }
d110 5
d118 2
d123 1
d129 2
d132 9
d148 10
@


1.3
log
@update to ncurses-5.0-19991127
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_freeall.c,v 1.2 1999/05/08 20:29:00 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999 Free Software Foundation, Inc.                   *
d44 1
a44 1
MODULE_ID("$From: lib_freeall.c,v 1.16 1999/11/28 01:34:11 tom Exp $")
d47 1
a47 1
free_slk(SLK *p)
d74 1
a74 1
void
d129 1
a129 1
void
d137 1
a137 1
void
@


1.2
log
@ncurses-4.2-990424
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_freeall.c,v 1.1 1999/01/18 19:09:45 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d44 1
a44 1
MODULE_ID("$From: lib_freeall.c,v 1.14 1999/04/03 23:17:06 tom Exp $")
d46 2
a47 1
static void free_slk(SLK *p)
d49 5
a53 5
	if (p != 0) {
		FreeIfNeeded(p->ent);
		FreeIfNeeded(p->buffer);
		free(p);
	}
d56 2
a57 1
static void free_tries(struct tries *p)
d59 1
a59 1
	struct tries *q;
d61 7
a67 7
	while (p != 0) {
		q = p->sibling;
		if (p->child != 0)
			free_tries(p->child);
		free(p);
		p = q;
	}
d74 2
a75 1
void _nc_freeall(void)
d77 1
a77 1
	WINDOWLIST *p, *q;
d80 1
a80 1
	_nc_free_tparm();
d82 1
d84 11
a94 17
		/* Delete only windows that're not a parent */
		for (p = _nc_windows; p != 0; p = p->next) {
			bool found = FALSE;

			for (q = _nc_windows; q != 0; q = q->next) {
				if ((p != q)
				 && (q->win->_flags & _SUBWIN)
				 && (p->win == q->win->_parent)) {
					found = TRUE;
					break;
				}
			}

			if (!found) {
				delwin(p->win);
				break;
			}
d96 6
d104 5
a108 8
	if (SP != 0) {
		free_tries (SP->_keytry);
		free_tries (SP->_key_ok);
	    	free_slk(SP->_slk);
		FreeIfNeeded(SP->_color_pairs);
		FreeIfNeeded(SP->_color_table);
		/* it won't free buffer anyway */
/*		_nc_set_buffer(SP->_ofp, FALSE);*/
d110 1
a110 1
		FreeAndNull(SP);
d112 1
a112 6
	}

	if (cur_term != 0) {
		_nc_free_termtype(&(cur_term->type));
		free(cur_term);
	}
d114 4
d119 1
a119 1
	(void) _nc_trace_buf(-1, 0);
d122 1
a122 1
	malloc_dump(malloc_errfd);
d125 1
a125 1
	purify_all_inuse();
d129 2
a130 1
void _nc_free_and_exit(int code)
d132 2
a133 2
	_nc_freeall();
	exit(code);
d135 1
d137 4
a140 1
void _nc_freeall(void) { }
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_freeall.c,v 1.2 1998/11/17 03:16:21 millert Exp $	*/
d36 1
a36 1
#include <term.h>
d44 1
a44 1
MODULE_ID("$From: lib_freeall.c,v 1.13 1998/11/12 19:42:42 Alexander.V.Lukyanov Exp $")
a54 10
void _nc_free_termtype(struct termtype *p, int base)
{
	if (p != 0) {
		FreeIfNeeded(p->term_names);
		FreeIfNeeded(p->str_table);
		if (base)
			free(p);
	}
}

d114 2
a115 1
		_nc_free_termtype(&(cur_term->type), TRUE);
@

