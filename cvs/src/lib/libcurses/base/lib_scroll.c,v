head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.32
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.28
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.24
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.26
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.18
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.22
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.20
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.38
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.34
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.32
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.30
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.28
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.26
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.24
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.22
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.20
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.18
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.16
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.14
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.22.18.01.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.19.03.53.45;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.09.58;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2004,2006 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Thomas E. Dickey 1996-2003                                      *
 *     and: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/

/*
**	lib_scroll.c
**
**	The routine wscrl(win, n).
**  positive n scroll the window up (ie. move lines down)
**  negative n scroll the window down (ie. move lines up)
**
*/

#include <curses.priv.h>

MODULE_ID("$Id: lib_scroll.c,v 1.26 2006/10/14 20:46:08 tom Exp $")

NCURSES_EXPORT(void)
_nc_scroll_window(WINDOW *win,
		  int const n,
		  NCURSES_SIZE_T const top,
		  NCURSES_SIZE_T const bottom,
		  NCURSES_CH_T blank)
{
    int limit;
    int line;
    int j;
    size_t to_copy = (size_t) (sizeof(NCURSES_CH_T) * (win->_maxx + 1));

    TR(TRACE_MOVE, ("_nc_scroll_window(%p, %d, %ld, %ld)",
		    win, n, (long) top, (long) bottom));

    if (top < 0
	|| bottom < top
	|| bottom > win->_maxy) {
	TR(TRACE_MOVE, ("nothing to scroll"));
	return;
    }

    /*
     * This used to do a line-text pointer-shuffle instead of text copies.
     * That (a) doesn't work when the window is derived and doesn't have
     * its own storage, (b) doesn't save you a lot on modern machines
     * anyway.  Your typical memcpy implementations are coded in
     * assembler using a tight BLT loop; for the size of copies we're
     * talking here, the total execution time is dominated by the one-time
     * setup cost.  So there is no point in trying to be excessively
     * clever -- esr.
     */

    /* shift n lines downwards */
    if (n < 0) {
	limit = top - n;
	for (line = bottom; line >= limit && line >= 0; line--) {
	    TR(TRACE_MOVE, ("...copying %d to %d", line + n, line));
	    memcpy(win->_line[line].text,
		   win->_line[line + n].text,
		   to_copy);
	    if_USE_SCROLL_HINTS(win->_line[line].oldindex =
				win->_line[line + n].oldindex);
	}
	for (line = top; line < limit && line <= win->_maxy; line++) {
	    TR(TRACE_MOVE, ("...filling %d", line));
	    for (j = 0; j <= win->_maxx; j++)
		win->_line[line].text[j] = blank;
	    if_USE_SCROLL_HINTS(win->_line[line].oldindex = _NEWINDEX);
	}
    }

    /* shift n lines upwards */
    if (n > 0) {
	limit = bottom - n;
	for (line = top; line <= limit && line <= win->_maxy; line++) {
	    memcpy(win->_line[line].text,
		   win->_line[line + n].text,
		   to_copy);
	    if_USE_SCROLL_HINTS(win->_line[line].oldindex =
				win->_line[line + n].oldindex);
	}
	for (line = bottom; line > limit && line >= 0; line--) {
	    for (j = 0; j <= win->_maxx; j++)
		win->_line[line].text[j] = blank;
	    if_USE_SCROLL_HINTS(win->_line[line].oldindex = _NEWINDEX);
	}
    }
    touchline(win, top, bottom - top + 1);

    if_WIDEC({
	if (WINDOW_EXT(win, addch_used) != 0) {
	    int next = WINDOW_EXT(win, addch_y) + n;
	    if (next < 0 || next > win->_maxy) {
		TR(TRACE_VIRTPUT,
		   ("Alert discarded multibyte on scroll"));
		WINDOW_EXT(win, addch_y) = 0;
	    } else {
		TR(TRACE_VIRTPUT, ("scrolled working position to %d,%d",
				   WINDOW_EXT(win, addch_y),
				   WINDOW_EXT(win, addch_x)));
		WINDOW_EXT(win, addch_y) = next;
	    }
	}
    })
}

NCURSES_EXPORT(int)
wscrl(WINDOW *win, int n)
{
    T((T_CALLED("wscrl(%p,%d)"), win, n));

    if (!win || !win->_scroll) {
	TR(TRACE_MOVE, ("...scrollok is false"));
	returnCode(ERR);
    }

    if (n != 0) {
	_nc_scroll_window(win, n, win->_regtop, win->_regbottom, win->_nc_bkgd);
	_nc_synchook(win);
    }
    returnCode(OK);
}
@


1.3
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_scroll.c,v 1.2 2000/06/19 03:53:45 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d32 2
a33 1
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
d48 1
a48 1
MODULE_ID("$From: lib_scroll.c,v 1.20 2000/12/10 02:54:03 tom Exp $")
d51 5
a55 3
_nc_scroll_window
(WINDOW *win, int const n, NCURSES_SIZE_T const top,
 NCURSES_SIZE_T const bottom, chtype blank)
d57 14
a70 4
    int line, j;
    size_t to_copy = (size_t) (sizeof(chtype) * (win->_maxx + 1));

    TR(TRACE_MOVE, ("_nc_scroll_window(%p, %d, %d, %d)", win, n, top, bottom));
d85 3
a87 1
	for (line = bottom; line >= top - n; line--) {
d91 2
a92 3
	    if_USE_SCROLL_HINTS(
				   win->_line[line].oldindex =
				   win->_line[line + n].oldindex);
d94 2
a95 1
	for (line = top; line < top - n; line++) {
d104 2
a105 1
	for (line = top; line <= bottom - n; line++) {
d112 1
a112 1
	for (line = bottom; line > bottom - n; line--) {
d119 16
d142 2
a143 1
    if (!win || !win->_scroll)
d145 1
d147 4
a150 10
    if (n == 0)
	returnCode(OK);

    if ((n > (win->_regbottom - win->_regtop)) ||
	(-n > (win->_regbottom - win->_regtop)))
	returnCode(ERR);

    _nc_scroll_window(win, n, win->_regtop, win->_regbottom, _nc_background(win));

    _nc_synchook(win);
@


1.2
log
@ncurses-5.0-20000617
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_scroll.c,v 1.1 1999/01/18 19:09:58 millert Exp $	*/
d47 1
a47 1
MODULE_ID("$From: lib_scroll.c,v 1.17 2000/04/29 21:10:51 tom Exp $")
d49 4
a52 3
void
_nc_scroll_window(WINDOW *win, int const n, NCURSES_SIZE_T const top,
    NCURSES_SIZE_T const bottom, chtype blank)
d74 5
a78 4
		win->_line[line + n].text,
		to_copy);
	    if_USE_SCROLL_HINTS(win->_line[line].oldindex = win->_line[line
		    + n].oldindex);
d91 4
a94 4
		win->_line[line + n].text,
		to_copy);
	    if_USE_SCROLL_HINTS(win->_line[line].oldindex = win->_line[line
		    + n].oldindex);
d105 1
a105 1
int
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_scroll.c,v 1.4 1998/07/23 21:19:20 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
a35 2


d47 1
a47 1
MODULE_ID("$From: lib_scroll.c,v 1.16 1998/02/11 12:13:55 tom Exp $")
d49 3
a51 1
void _nc_scroll_window(WINDOW *win, int const n, short const top, short const bottom, chtype blank)
d53 4
a56 2
int	line, j;
size_t	to_copy = (size_t)(sizeof(chtype) * (win->_maxx + 1));
d58 26
a83 1
	TR(TRACE_MOVE, ("_nc_scroll_window(%p, %d, %d, %d)", win, n, top,bottom)); 
d85 13
a97 39
	/*
	 * This used to do a line-text pointer-shuffle instead of text copies.
	 * That (a) doesn't work when the window is derived and doesn't have
	 * its own storage, (b) doesn't save you a lot on modern machines
	 * anyway.  Your typical memcpy implementations are coded in
	 * assembler using a tight BLT loop; for the size of copies we're
	 * talking here, the total execution time is dominated by the one-time
	 * setup cost.  So there is no point in trying to be excessively
	 * clever -- esr.
	 */

	/* shift n lines downwards */
    	if (n < 0) {
		for (line = bottom; line >= top-n; line--) {
		    	memcpy(win->_line[line].text,
			       win->_line[line+n].text,
			       to_copy);
			if_USE_SCROLL_HINTS(win->_line[line].oldindex = win->_line[line+n].oldindex);
		}
		for (line = top; line < top-n; line++) {
			for (j = 0; j <= win->_maxx; j ++)
				win->_line[line].text[j] = blank;
			if_USE_SCROLL_HINTS(win->_line[line].oldindex = _NEWINDEX);
		}
    	}

	/* shift n lines upwards */
    	if (n > 0) {
		for (line = top; line <= bottom-n; line++) {
		    	memcpy(win->_line[line].text,
			       win->_line[line+n].text,
			       to_copy);
			if_USE_SCROLL_HINTS(win->_line[line].oldindex = win->_line[line+n].oldindex);
		}
		for (line = bottom; line > bottom-n; line--) {
			for (j = 0; j <= win->_maxx; j ++)
				win->_line[line].text[j] = blank;
			if_USE_SCROLL_HINTS(win->_line[line].oldindex = _NEWINDEX);
		}
d99 2
a100 1
	touchline(win, top, bottom-top+1);
d106 1
a106 1
	T((T_CALLED("wscrl(%p,%d)"), win, n));
d108 2
a109 2
	if (!win || !win->_scroll)
		returnCode(ERR);
d111 2
a112 2
	if (n == 0)
		returnCode(OK);
d114 3
a116 3
	if ((n > (win->_regbottom - win->_regtop)) || 
	    (-n > (win->_regbottom - win->_regtop)))
	    returnCode(ERR);
d118 1
a118 1
	_nc_scroll_window(win, n, win->_regtop, win->_regbottom, _nc_background(win));
d120 2
a121 2
	_nc_synchook(win);
    	returnCode(OK);
@

