head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.34
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.32
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.28
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.24
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.26
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.18
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.22
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.20
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.38
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.34
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.32
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.30
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.28
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.26
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.24
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.22
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.20
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.18
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.16
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.14
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.22.18.01.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.08.15.11.40.55;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.09.58;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Thomas E. Dickey                        1996 on                 *
 ****************************************************************************/

#include <curses.priv.h>

MODULE_ID("$Id: lib_screen.c,v 1.31 2008/08/16 19:05:37 tom Exp $")

#define MAX_SIZE 0x3fff		/* 16k is big enough for a window or pad */

NCURSES_EXPORT(WINDOW *)
getwin(FILE *filep)
{
    WINDOW tmp, *nwin;
    int n;

    T((T_CALLED("getwin(%p)"), filep));

    clearerr(filep);
    (void) fread(&tmp, sizeof(WINDOW), 1, filep);
    if (ferror(filep)
	|| tmp._maxy == 0
	|| tmp._maxy > MAX_SIZE
	|| tmp._maxx == 0
	|| tmp._maxx > MAX_SIZE)
	returnWin(0);

    if (tmp._flags & _ISPAD) {
	nwin = newpad(tmp._maxy + 1, tmp._maxx + 1);
    } else {
	nwin = newwin(tmp._maxy + 1, tmp._maxx + 1, 0, 0);
    }

    /*
     * We deliberately do not restore the _parx, _pary, or _parent
     * fields, because the window hierarchy within which they
     * made sense is probably gone.
     */
    if (nwin != 0) {
	nwin->_curx = tmp._curx;
	nwin->_cury = tmp._cury;
	nwin->_maxy = tmp._maxy;
	nwin->_maxx = tmp._maxx;
	nwin->_begy = tmp._begy;
	nwin->_begx = tmp._begx;
	nwin->_yoffset = tmp._yoffset;
	nwin->_flags = tmp._flags & ~(_SUBWIN);

	WINDOW_ATTRS(nwin) = WINDOW_ATTRS(&tmp);
	nwin->_nc_bkgd = tmp._nc_bkgd;

	nwin->_notimeout = tmp._notimeout;
	nwin->_clear = tmp._clear;
	nwin->_leaveok = tmp._leaveok;
	nwin->_idlok = tmp._idlok;
	nwin->_idcok = tmp._idcok;
	nwin->_immed = tmp._immed;
	nwin->_scroll = tmp._scroll;
	nwin->_sync = tmp._sync;
	nwin->_use_keypad = tmp._use_keypad;
	nwin->_delay = tmp._delay;

	nwin->_regtop = tmp._regtop;
	nwin->_regbottom = tmp._regbottom;

	if (tmp._flags & _ISPAD)
	    nwin->_pad = tmp._pad;

	for (n = 0; n <= nwin->_maxy; n++) {
	    clearerr(filep);
	    (void) fread(nwin->_line[n].text,
			 sizeof(NCURSES_CH_T),
			 (size_t) (nwin->_maxx + 1),
			 filep);
	    if (ferror(filep)) {
		delwin(nwin);
		returnWin(0);
	    }
	}
	touchwin(nwin);
    }
    returnWin(nwin);
}

NCURSES_EXPORT(int)
putwin(WINDOW *win, FILE *filep)
{
    int code = ERR;
    int n;

    T((T_CALLED("putwin(%p,%p)"), win, filep));

    if (win != 0) {
	size_t len = (size_t) (win->_maxx + 1);

	clearerr(filep);
	if (fwrite(win, sizeof(WINDOW), 1, filep) != 1
	    || ferror(filep))
	      returnCode(code);

	for (n = 0; n <= win->_maxy; n++) {
	    if (fwrite(win->_line[n].text,
		       sizeof(NCURSES_CH_T), len, filep) != len
		|| ferror(filep)) {
		returnCode(code);
	    }
	}
	code = OK;
    }
    returnCode(code);
}

NCURSES_EXPORT(int)
scr_restore(const char *file)
{
    FILE *fp = 0;

    T((T_CALLED("scr_restore(%s)"), _nc_visbuf(file)));

    if (_nc_access(file, R_OK) < 0
	|| (fp = fopen(file, "rb")) == 0) {
	returnCode(ERR);
    } else {
	delwin(newscr);
	SP->_newscr = getwin(fp);
#if !USE_REENTRANT
	newscr = SP->_newscr;
#endif
	(void) fclose(fp);
	returnCode(OK);
    }
}

NCURSES_EXPORT(int)
scr_dump(const char *file)
{
    FILE *fp = 0;

    T((T_CALLED("scr_dump(%s)"), _nc_visbuf(file)));

    if (_nc_access(file, W_OK) < 0
	|| (fp = fopen(file, "wb")) == 0) {
	returnCode(ERR);
    } else {
	(void) putwin(newscr, fp);
	(void) fclose(fp);
	returnCode(OK);
    }
}

NCURSES_EXPORT(int)
scr_init(const char *file)
{
    FILE *fp = 0;

    T((T_CALLED("scr_init(%s)"), _nc_visbuf(file)));

    if (exit_ca_mode && non_rev_rmcup)
	returnCode(ERR);

    if (_nc_access(file, R_OK) < 0
	|| (fp = fopen(file, "rb")) == 0) {
	returnCode(ERR);
    } else {
	delwin(curscr);
	SP->_curscr = getwin(fp);
#if !USE_REENTRANT
	curscr = SP->_curscr;
#endif
	(void) fclose(fp);
	returnCode(OK);
    }
}

NCURSES_EXPORT(int)
scr_set(const char *file)
{
    T((T_CALLED("scr_set(%s)"), _nc_visbuf(file)));

    if (scr_init(file) == ERR) {
	returnCode(ERR);
    } else {
	delwin(newscr);
	SP->_newscr = dupwin(curscr);
#if !USE_REENTRANT
	newscr = SP->_newscr;
#endif
	returnCode(OK);
    }
}
@


1.3
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_screen.c,v 1.2 1999/08/15 11:40:55 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d34 1
d39 1
a39 3
#include <sys/stat.h>
#include <time.h>
#include <term.h>		/* exit_ca_mode, non_rev_rmcup */
d41 1
a41 3
MODULE_ID("$From: lib_screen.c,v 1.17 2000/12/10 02:43:27 tom Exp $")

static time_t dumptime;
d44 1
a44 1
getwin(FILE * filep)
d51 1
d53 5
a57 1
    if (ferror(filep))
d60 5
a64 2
    if ((nwin = newwin(tmp._maxy + 1, tmp._maxx + 1, 0, 0)) == 0)
	returnWin(0);
d71 40
a110 29
    nwin->_curx = tmp._curx;
    nwin->_cury = tmp._cury;
    nwin->_maxy = tmp._maxy;
    nwin->_maxx = tmp._maxx;
    nwin->_begy = tmp._begy;
    nwin->_begx = tmp._begx;
    nwin->_yoffset = tmp._yoffset;
    nwin->_flags = tmp._flags & ~(_SUBWIN | _ISPAD);

    nwin->_attrs = tmp._attrs;
    nwin->_bkgd = tmp._bkgd;

    nwin->_clear = tmp._clear;
    nwin->_scroll = tmp._scroll;
    nwin->_leaveok = tmp._leaveok;
    nwin->_use_keypad = tmp._use_keypad;
    nwin->_delay = tmp._delay;
    nwin->_immed = tmp._immed;
    nwin->_sync = tmp._sync;

    nwin->_regtop = tmp._regtop;
    nwin->_regbottom = tmp._regbottom;

    for (n = 0; n < nwin->_maxy + 1; n++) {
	(void) fread(nwin->_line[n].text,
		     sizeof(chtype), (size_t) (nwin->_maxx + 1), filep);
	if (ferror(filep)) {
	    delwin(nwin);
	    returnWin(0);
d112 1
a113 2
    touchwin(nwin);

d118 1
a118 1
putwin(WINDOW *win, FILE * filep)
d125 12
a136 9
    if (win) {
	(void) fwrite(win, sizeof(WINDOW), 1, filep);
	if (ferror(filep))
	    returnCode(code);

	for (n = 0; n < win->_maxy + 1; n++) {
	    (void) fwrite(win->_line[n].text,
			  sizeof(chtype), (size_t) (win->_maxx + 1), filep);
	    if (ferror(filep))
d138 1
d153 1
a153 1
	|| (fp = fopen(file, "rb")) == 0)
d155 1
a155 1
    else {
d157 4
a160 1
	newscr = getwin(fp);
d174 1
a174 1
	|| (fp = fopen(file, "wb")) == 0)
d176 1
a176 1
    else {
a178 1
	dumptime = time((time_t *) 0);
a186 1
    struct stat stb;
d194 1
a194 3
	|| (fp = fopen(file, "rb")) == 0)
	returnCode(ERR);
    else if (fstat(STDOUT_FILENO, &stb) || stb.st_mtime > dumptime)
d196 1
a196 1
    else {
d198 4
a201 1
	curscr = getwin(fp);
d212 1
a212 1
    if (scr_init(file) == ERR)
d214 1
a214 1
    else {
d216 4
a219 1
	newscr = dupwin(curscr);
@


1.2
log
@Update to ncurses-5.0-990814
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_screen.c,v 1.1 1999/01/18 19:09:58 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
a35 1

d40 1
a40 1
#include <term.h>	/* exit_ca_mode, non_rev_rmcup */
d42 1
a42 1
MODULE_ID("$From: lib_screen.c,v 1.15 1999/07/24 20:05:29 tom Exp $")
d44 1
a44 1
static time_t	dumptime;
d46 2
a47 1
WINDOW *getwin(FILE *filep)
d49 46
a94 49
	WINDOW	tmp, *nwin;
	int	n;

	T((T_CALLED("getwin(%p)"), filep));

	(void) fread(&tmp, sizeof(WINDOW), 1, filep);
	if (ferror(filep))
		returnWin(0);

	if ((nwin = newwin(tmp._maxy+1, tmp._maxx+1, 0, 0)) == 0)
		returnWin(0);

	/*
	 * We deliberately do not restore the _parx, _pary, or _parent
	 * fields, because the window hierarchy within which they
	 * made sense is probably gone.
	 */
	nwin->_curx       = tmp._curx;
	nwin->_cury       = tmp._cury;
	nwin->_maxy       = tmp._maxy;
	nwin->_maxx       = tmp._maxx;
	nwin->_begy       = tmp._begy;
	nwin->_begx       = tmp._begx;
	nwin->_yoffset    = tmp._yoffset;
	nwin->_flags      = tmp._flags & ~(_SUBWIN|_ISPAD);

	nwin->_attrs      = tmp._attrs;
	nwin->_bkgd       = tmp._bkgd;

	nwin->_clear      = tmp._clear;
	nwin->_scroll     = tmp._scroll;
	nwin->_leaveok    = tmp._leaveok;
	nwin->_use_keypad = tmp._use_keypad;
	nwin->_delay      = tmp._delay;
	nwin->_immed      = tmp._immed;
	nwin->_sync       = tmp._sync;

	nwin->_regtop     = tmp._regtop;
	nwin->_regbottom  = tmp._regbottom;

	for (n = 0; n < nwin->_maxy + 1; n++)
	{
		(void) fread(nwin->_line[n].text,
			      sizeof(chtype), (size_t)(nwin->_maxx + 1), filep);
		if (ferror(filep))
		{
			delwin(nwin);
			returnWin(0);
		}
d96 2
a97 1
	touchwin(nwin);
d99 1
a99 1
	returnWin(nwin);
d102 2
a103 1
int putwin(WINDOW *win, FILE *filep)
d105 2
a106 2
        int code = ERR; 
	int n;
d108 1
a108 1
	T((T_CALLED("putwin(%p,%p)"), win, filep));
d110 3
a112 3
	if (win) {
	  (void) fwrite(win, sizeof(WINDOW), 1, filep);
	  if (ferror(filep))
d115 4
a118 5
	  for (n = 0; n < win->_maxy + 1; n++)
	    {
	      (void) fwrite(win->_line[n].text,
			    sizeof(chtype), (size_t)(win->_maxx + 1), filep);
	      if (ferror(filep))
a119 2
	    }
	  code = OK;
d121 3
a123 1
	returnCode(code);
d126 2
a127 1
int scr_restore(const char *file)
d129 1
a129 1
	FILE	*fp = 0;
d131 1
a131 1
	T((T_CALLED("scr_restore(%s)"), _nc_visbuf(file)));
d133 9
a141 10
	if (_nc_access(file, R_OK) < 0
	 || (fp = fopen(file, "rb")) == 0)
	    returnCode(ERR);
	else
	{
	    delwin(newscr);
	    newscr = getwin(fp);
	    (void) fclose(fp);
	    returnCode(OK);
	}
d144 2
a145 1
int scr_dump(const char *file)
d147 1
a147 1
	FILE	*fp = 0;
d149 1
a149 1
	T((T_CALLED("scr_dump(%s)"), _nc_visbuf(file)));
d151 9
a159 10
	if (_nc_access(file, W_OK) < 0
	 || (fp = fopen(file, "wb")) == 0)
	    returnCode(ERR);
	else
	{
	    (void) putwin(newscr, fp);
	    (void) fclose(fp);
	    dumptime = time((time_t *)0);
	    returnCode(OK);
	}
d162 2
a163 1
int scr_init(const char *file)
d165 4
a168 2
	FILE	*fp = 0;
	struct stat	stb;
d170 2
a171 1
	T((T_CALLED("scr_init(%s)"), _nc_visbuf(file)));
d173 11
a183 15
	if (exit_ca_mode && non_rev_rmcup)
	    returnCode(ERR);

	if (_nc_access(file, R_OK) < 0
	 || (fp = fopen(file, "rb")) == 0)
	    returnCode(ERR);
	else if (fstat(STDOUT_FILENO, &stb) || stb.st_mtime > dumptime)
	    returnCode(ERR);
	else
	{
	    delwin(curscr);
	    curscr = getwin(fp);
	    (void) fclose(fp);
	    returnCode(OK);
	}
d186 2
a187 1
int scr_set(const char *file)
d193 1
a193 2
    else
    {
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_screen.c,v 1.6 1998/07/27 03:37:31 millert Exp $	*/
d43 1
a43 1
MODULE_ID("$From: lib_screen.c,v 1.14 1999/01/02 22:56:17 tom Exp $")
d130 1
a130 1
	FILE	*fp;
d148 1
a148 1
	FILE	*fp;
d166 1
a166 1
	FILE	*fp;
@

