head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.30
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.32
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.28
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.24
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.26
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.18
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.22
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.20
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.16
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.14
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.12
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.38
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.34
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.32
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.30
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.28
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.26
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.24
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.22
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.20
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.18
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.16
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.14
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.12
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.10
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.8
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.22.18.01.42;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.09.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2003,2005 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Thomas E. Dickey <dickey@@clark.net> 1997                        *
 ****************************************************************************/

/*
**	lib_printw.c
**
**	The routines printw(), wprintw() and friends.
**
*/

#include <curses.priv.h>

MODULE_ID("$Id: lib_printw.c,v 1.18 2006/12/17 19:21:39 tom Exp $")

NCURSES_EXPORT(int)
printw(const char *fmt,...)
{
    va_list argp;
    int code;

#ifdef TRACE
    va_start(argp, fmt);
    T((T_CALLED("printw(%s%s)"),
       _nc_visbuf(fmt), _nc_varargs(fmt, argp)));
    va_end(argp);
#endif

    va_start(argp, fmt);
    code = vwprintw(stdscr, fmt, argp);
    va_end(argp);

    returnCode(code);
}

NCURSES_EXPORT(int)
wprintw(WINDOW *win, const char *fmt,...)
{
    va_list argp;
    int code;

#ifdef TRACE
    va_start(argp, fmt);
    T((T_CALLED("wprintw(%p,%s%s)"),
       win, _nc_visbuf(fmt), _nc_varargs(fmt, argp)));
    va_end(argp);
#endif

    va_start(argp, fmt);
    code = vwprintw(win, fmt, argp);
    va_end(argp);

    returnCode(code);
}

NCURSES_EXPORT(int)
mvprintw(int y, int x, const char *fmt,...)
{
    va_list argp;
    int code;

#ifdef TRACE
    va_start(argp, fmt);
    T((T_CALLED("mvprintw(%d,%d,%s%s)"),
       y, x, _nc_visbuf(fmt), _nc_varargs(fmt, argp)));
    va_end(argp);
#endif

    if ((code = move(y, x)) != ERR) {
	va_start(argp, fmt);
	code = vwprintw(stdscr, fmt, argp);
	va_end(argp);
    }
    returnCode(code);
}

NCURSES_EXPORT(int)
mvwprintw(WINDOW *win, int y, int x, const char *fmt,...)
{
    va_list argp;
    int code;

#ifdef TRACE
    va_start(argp, fmt);
    T((T_CALLED("mvwprintw(%d,%d,%p,%s%s)"),
       y, x, win, _nc_visbuf(fmt), _nc_varargs(fmt, argp)));
    va_end(argp);
#endif

    if ((code = wmove(win, y, x)) != ERR) {
	va_start(argp, fmt);
	code = vwprintw(win, fmt, argp);
	va_end(argp);
    }
    returnCode(code);
}

NCURSES_EXPORT(int)
vwprintw(WINDOW *win, const char *fmt, va_list argp)
{
    char *buf;
    int code = ERR;

    T((T_CALLED("vwprintw(%p,%s,va_list)"), win, _nc_visbuf(fmt)));

    if ((buf = _nc_printf_string(fmt, argp)) != 0) {
	code = waddstr(win, buf);
    }
    returnCode(code);
}
@


1.2
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_printw.c,v 1.1 1999/01/18 19:09:56 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d44 1
a44 1
MODULE_ID("$From: lib_printw.c,v 1.9 2000/12/10 02:43:27 tom Exp $")
d47 1
a47 1
printw(NCURSES_CONST char *fmt,...)
d52 6
a57 1
    T(("printw(%s,...) called", _nc_visbuf(fmt)));
d63 1
a63 1
    return code;
d67 1
a67 1
wprintw(WINDOW *win, NCURSES_CONST char *fmt,...)
d72 6
a77 1
    T(("wprintw(%p,%s,...) called", win, _nc_visbuf(fmt)));
d83 1
a83 1
    return code;
d87 1
a87 1
mvprintw(int y, int x, NCURSES_CONST char *fmt,...)
d90 8
a97 1
    int code = move(y, x);
d99 1
a99 1
    if (code != ERR) {
d104 1
a104 1
    return code;
d108 1
a108 2
mvwprintw
(WINDOW *win, int y, int x, NCURSES_CONST char *fmt,...)
d111 1
a111 1
    int code = wmove(win, y, x);
d113 8
a120 1
    if (code != ERR) {
d125 1
a125 1
    return code;
d129 1
a129 2
vwprintw
(WINDOW *win, NCURSES_CONST char *fmt, va_list argp)
d131 1
a131 1
    char *buf = _nc_printf_string(fmt, argp);
d134 3
a136 1
    if (buf != 0) {
a137 3
#if USE_SAFE_SPRINTF
	free(buf);
#endif
d139 1
a139 1
    return code;
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_printw.c,v 1.6 1998/07/23 21:19:13 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d44 1
a44 1
MODULE_ID("$From: lib_printw.c,v 1.7 1998/04/11 22:53:44 tom Exp $")
d46 2
a47 1
int printw(NCURSES_CONST char *fmt, ...)
d49 2
a50 2
	va_list argp;
	int code;
d52 1
a52 1
	T(("printw(%s,...) called", _nc_visbuf(fmt)));
d54 3
a56 3
	va_start(argp, fmt);
	code = vwprintw(stdscr, fmt, argp);
	va_end(argp);
d58 1
a58 1
	return code;
d61 2
a62 1
int wprintw(WINDOW *win, NCURSES_CONST char *fmt, ...)
d64 2
a65 2
	va_list argp;
	int code;
d67 1
a67 1
	T(("wprintw(%p,%s,...) called", win, _nc_visbuf(fmt)));
d69 3
a71 3
	va_start(argp, fmt);
	code = vwprintw(win, fmt, argp);
	va_end(argp);
d73 1
a73 1
	return code;
d76 2
a77 1
int mvprintw(int y, int x, NCURSES_CONST char *fmt, ...)
d79 2
a80 2
	va_list argp;
	int code = move(y, x);
d82 6
a87 6
	if (code != ERR) {
		va_start(argp, fmt);
		code = vwprintw(stdscr, fmt, argp);
		va_end(argp);
	}
	return code;
d90 3
a92 1
int mvwprintw(WINDOW *win, int y, int x, NCURSES_CONST char *fmt, ...)
d94 2
a95 2
	va_list argp;
	int code = wmove(win, y, x);
d97 6
a102 6
	if (code != ERR) {
		va_start(argp, fmt);
		code = vwprintw(win, fmt, argp);
		va_end(argp);
	}
	return code;
d105 3
a107 1
int vwprintw(WINDOW *win, NCURSES_CONST char *fmt, va_list argp)
d109 2
a110 2
	char *buf = _nc_printf_string(fmt, argp);
	int code = ERR;
d112 2
a113 2
	if (buf != 0) {
		code = waddstr(win, buf);
d115 1
a115 1
		free(buf);
d117 2
a118 2
	}
	return code;
@

