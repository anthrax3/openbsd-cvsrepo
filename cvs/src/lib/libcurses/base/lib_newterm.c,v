head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.30
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.32
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.28
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.24
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.26
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.18
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.22
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.20
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.38
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.34
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.32
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.30
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.28
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.26
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.24
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.22
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.20
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.18
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.16
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.14
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.12
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.10
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.8
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.6
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.12.0.4
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.13
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.22.18.01.42;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2000.10.08.22.46.59;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2000.07.24.04.06.10;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.10.03.06.15;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.19.03.53.43;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.10.01.35.02;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.02.22.06.51;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.08.15.11.40.55;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.06.14.02.29.15;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.03.11.21.03.55;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.01.31.20.17.09;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.09.53;	author millert;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Thomas E. Dickey                        1996-on                 *
 ****************************************************************************/

/*
**	lib_newterm.c
**
**	The newterm() function.
**
*/

#include <curses.priv.h>

#if SVR4_TERMIO && !defined(_POSIX_SOURCE)
#define _POSIX_SOURCE
#endif

#include <term.h>		/* clear_screen, cup & friends, cur_term */
#include <tic.h>

MODULE_ID("$Id: lib_newterm.c,v 1.73 2008/08/16 21:20:48 Werner.Fink Exp $")

#ifndef ONLCR			/* Allows compilation under the QNX 4.2 OS */
#define ONLCR 0
#endif

/*
 * SVr4/XSI Curses specify that hardware echo is turned off in initscr, and not
 * restored during the curses session.  The library simulates echo in software.
 * (The behavior is unspecified if the application enables hardware echo).
 *
 * The newterm function also initializes terminal settings, and since initscr
 * is supposed to behave as if it calls newterm, we do it here.
 */
static NCURSES_INLINE int
_nc_initscr(void)
{
    int result = ERR;

    /* for extended XPG4 conformance requires cbreak() at this point */
    /* (SVr4 curses does this anyway) */
    if (cbreak() == OK) {
	TTY buf;

	buf = cur_term->Nttyb;
#ifdef TERMIOS
	buf.c_lflag &= ~(ECHO | ECHONL);
	buf.c_iflag &= ~(ICRNL | INLCR | IGNCR);
	buf.c_oflag &= ~(ONLCR);
#elif HAVE_SGTTY_H
	buf.sg_flags &= ~(ECHO | CRMOD);
#else
	memset(&buf, 0, sizeof(buf));
#endif
	if ((result = _nc_set_tty_mode(&buf)) == OK)
	    cur_term->Nttyb = buf;
    }
    return result;
}

/*
 * filter() has to be called before either initscr() or newterm(), so there is
 * apparently no way to make this flag apply to some terminals and not others,
 * aside from possibly delaying a filter() call until some terminals have been
 * initialized.
 */
NCURSES_EXPORT(void)
filter(void)
{
    START_TRACE();
    T((T_CALLED("filter")));
    _nc_prescreen.filter_mode = TRUE;
    returnVoid;
}

#if NCURSES_EXT_FUNCS
/*
 * An extension, allowing the application to open a new screen without
 * requiring it to also be filtered.
 */
NCURSES_EXPORT(void)
nofilter(void)
{
    START_TRACE();
    T((T_CALLED("nofilter")));
    _nc_prescreen.filter_mode = FALSE;
    returnVoid;
}
#endif

NCURSES_EXPORT(SCREEN *)
newterm(NCURSES_CONST char *name, FILE *ofp, FILE *ifp)
{
    int value;
    int errret;
    SCREEN *current;
    SCREEN *result = 0;
    TERMINAL *its_term;

    START_TRACE();
    T((T_CALLED("newterm(\"%s\",%p,%p)"), name, ofp, ifp));

    _nc_init_pthreads();
    _nc_lock_global(curses);

    current = SP;
    its_term = (SP ? SP->_term : 0);

    /* this loads the capability entry, then sets LINES and COLS */
    if (setupterm(name, fileno(ofp), &errret) != ERR) {
	int slk_format = _nc_globals.slk_format;

	/*
	 * This actually allocates the screen structure, and saves the original
	 * terminal settings.
	 */
	_nc_set_screen(0);

	/* allow user to set maximum escape delay from the environment */
	if ((value = _nc_getenv_num("ESCDELAY")) >= 0) {
	    set_escdelay(value);
	}

	if (_nc_setupscreen(LINES,
			    COLS,
			    ofp,
			    _nc_prescreen.filter_mode,
			    slk_format) == ERR) {
	    _nc_set_screen(current);
	    result = 0;
	} else {
	    assert(SP != 0);
	    /*
	     * In setupterm() we did a set_curterm(), but it was before we set
	     * SP.  So the "current" screen's terminal pointer was overwritten
	     * with a different terminal.  Later, in _nc_setupscreen(), we set
	     * SP and the terminal pointer in the new screen.
	     *
	     * Restore the terminal-pointer for the pre-existing screen, if
	     * any.
	     */
	    if (current)
		current->_term = its_term;

	    /* if the terminal type has real soft labels, set those up */
	    if (slk_format && num_labels > 0 && SLK_STDFMT(slk_format))
		_nc_slk_initialize(stdscr, COLS);

	    SP->_ifd = fileno(ifp);
	    typeahead(fileno(ifp));
#ifdef TERMIOS
	    SP->_use_meta = ((cur_term->Ottyb.c_cflag & CSIZE) == CS8 &&
			     !(cur_term->Ottyb.c_iflag & ISTRIP));
#else
	    SP->_use_meta = FALSE;
#endif
	    SP->_endwin = FALSE;

	    /*
	     * Check whether we can optimize scrolling under dumb terminals in
	     * case we do not have any of these capabilities, scrolling
	     * optimization will be useless.
	     */
	    SP->_scrolling = ((scroll_forward && scroll_reverse) ||
			      ((parm_rindex ||
				parm_insert_line ||
				insert_line) &&
			       (parm_index ||
				parm_delete_line ||
				delete_line)));

	    baudrate();		/* sets a field in the SP structure */

	    SP->_keytry = 0;

	    /*
	     * Check for mismatched graphic-rendition capabilities.  Most SVr4
	     * terminfo trees contain entries that have rmul or rmso equated to
	     * sgr0 (Solaris curses copes with those entries).  We do this only
	     * for curses, since many termcap applications assume that
	     * smso/rmso and smul/rmul are paired, and will not function
	     * properly if we remove rmso or rmul.  Curses applications
	     * shouldn't be looking at this detail.
	     */
#define SGR0_TEST(mode) (mode != 0) && (exit_attribute_mode == 0 || strcmp(mode, exit_attribute_mode))
	    SP->_use_rmso = SGR0_TEST(exit_standout_mode);
	    SP->_use_rmul = SGR0_TEST(exit_underline_mode);

	    /* compute movement costs so we can do better move optimization */
	    _nc_mvcur_init();

	    /* initialize terminal to a sane state */
	    _nc_screen_init();

	    /* Initialize the terminal line settings. */
	    _nc_initscr();

	    _nc_signal_handler(TRUE);

	    result = SP;
	}
    }
    _nc_unlock_global(curses);
    returnSP(result);
}
@


1.12
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.11 2000/10/08 22:46:59 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999,2000 Free Software Foundation, Inc.              *
d34 1
d53 1
a53 1
MODULE_ID("$From: lib_newterm.c,v 1.50 2000/12/10 02:43:27 tom Exp $")
d67 1
a67 1
static inline int
d70 2
d74 2
a75 1
    cbreak();
d77 1
d79 5
a83 3
    cur_term->Nttyb.c_lflag &= ~(ECHO | ECHONL);
    cur_term->Nttyb.c_iflag &= ~(ICRNL | INLCR | IGNCR);
    cur_term->Nttyb.c_oflag &= ~(ONLCR);
d85 1
a85 1
    cur_term->Nttyb.sg_flags &= ~(ECHO | CRMOD);
d87 4
a90 1
    return _nc_set_tty_mode(&cur_term->Nttyb);
d99 8
a106 1
static int filter_mode = FALSE;
d108 5
d114 1
a114 1
filter(void)
d116 4
a119 1
    filter_mode = TRUE;
d121 1
d124 1
a124 2
newterm
(NCURSES_CONST char *name, FILE * ofp, FILE * ifp)
d126 1
a127 1
    int slk_format = _nc_slk_format;
d129 2
a130 6
#ifdef TRACE
    int t = _nc_getenv_num("NCURSES_TRACE");

    if (t >= 0)
	trace(t);
#endif
d132 1
d135 2
a136 3
    /* this loads the capability entry, then sets LINES and COLS */
    if (setupterm(name, fileno(ofp), &errret) == ERR)
	return 0;
d138 2
a139 16
    /* implement filter mode */
    if (filter_mode) {
	LINES = 1;

	if (VALID_NUMERIC(init_tabs))
	    TABSIZE = init_tabs;
	else
	    TABSIZE = 8;

	T(("TABSIZE = %d", TABSIZE));

	clear_screen = 0;
	cursor_down = parm_down_cursor = 0;
	cursor_address = 0;
	cursor_up = parm_up_cursor = 0;
	row_address = 0;
d141 3
a143 2
	cursor_home = carriage_return;
    }
d145 9
a153 9
    /* If we must simulate soft labels, grab off the line to be used.
       We assume that we must simulate, if it is none of the standard
       formats (4-4  or 3-2-3) for which there may be some hardware
       support. */
    if (num_labels <= 0 || !SLK_STDFMT(slk_format))
	if (slk_format) {
	    if (ERR == _nc_ripoffline(-SLK_LINES(slk_format),
				      _nc_slk_initialize))
		return 0;
a154 9
    /* this actually allocates the screen structure, and saves the
     * original terminal settings.
     */
    current = SP;
    _nc_set_screen(0);
    if (_nc_setupscreen(LINES, COLS, ofp) == ERR) {
	_nc_set_screen(current);
	return 0;
    }
d156 27
a182 7
    /* if the terminal type has real soft labels, set those up */
    if (slk_format && num_labels > 0 && SLK_STDFMT(slk_format))
	_nc_slk_initialize(stdscr, COLS);

    SP->_ifd = fileno(ifp);
    SP->_checkfd = fileno(ifp);
    typeahead(fileno(ifp));
d184 2
a185 2
    SP->_use_meta = ((cur_term->Ottyb.c_cflag & CSIZE) == CS8 &&
		     !(cur_term->Ottyb.c_iflag & ISTRIP));
d187 1
a187 1
    SP->_use_meta = FALSE;
d189 1
a189 1
    SP->_endwin = FALSE;
d191 26
a216 21
    /* Check whether we can optimize scrolling under dumb terminals in case
     * we do not have any of these capabilities, scrolling optimization
     * will be useless.
     */
    SP->_scrolling = ((scroll_forward && scroll_reverse) ||
		      ((parm_rindex || parm_insert_line || insert_line) &&
		       (parm_index || parm_delete_line || delete_line)));

    baudrate();			/* sets a field in the SP structure */

    SP->_keytry = 0;

    /*
     * Check for mismatched graphic-rendition capabilities.  Most SVr4
     * terminfo trees contain entries that have rmul or rmso equated to
     * sgr0 (Solaris curses copes with those entries).  We do this only for
     * curses, since many termcap applications assume that smso/rmso and
     * smul/rmul are paired, and will not function properly if we remove
     * rmso or rmul.  Curses applications shouldn't be looking at this
     * detail.
     */
d218 2
a219 2
    SP->_use_rmso = SGR0_TEST(exit_standout_mode);
    SP->_use_rmul = SGR0_TEST(exit_underline_mode);
d221 2
a222 19
#if USE_WIDEC_SUPPORT
    /*
     * XFree86 xterm can be configured to support UTF-8 based on environment
     * variable settings.
     */
    {
	char *s;
	s = getenv("LC_ALL");
	if (s == NULL || *s == '\0') {
	    s = getenv("LC_CTYPE");
	    if (s == NULL || *s == '\0') {
		s = getenv("LANG");
	    }
	}
	if (s != NULL && *s != '\0' && strstr(s, "UTF-8") != NULL) {
	    SP->_outch = _nc_utf8_outch;
	}
    }
#endif
d224 2
a225 2
    /* compute movement costs so we can do better move optimization */
    _nc_mvcur_init();
d227 2
a228 2
    /* initialize terminal to a sane state */
    _nc_screen_init();
d230 1
a230 2
    /* Initialize the terminal line settings. */
    _nc_initscr();
d232 5
a236 4
    _nc_signal_handler(TRUE);

    T((T_RETURN("%p"), SP));
    return (SP);
@


1.11
log
@update to ncurses-5.1-20001007
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.10 2000/07/24 04:06:10 millert Exp $	*/
d52 1
a52 1
MODULE_ID("$From: lib_newterm.c,v 1.48 2000/09/02 18:11:42 tom Exp $")
d91 1
a91 1
void
d97 3
a99 2
SCREEN *
newterm(NCURSES_CONST char *name, FILE * ofp, FILE * ifp)
d144 1
a144 1
		    _nc_slk_initialize))
d166 1
a166 1
	!(cur_term->Ottyb.c_iflag & ISTRIP));
d177 2
a178 2
	((parm_rindex || parm_insert_line || insert_line) &&
	    (parm_index || parm_delete_line || delete_line)));
@


1.10
log
@Update to ncurses-5.1-20000722
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.9 2000/07/10 03:06:15 millert Exp $	*/
d45 1
a45 1
#if defined(SVR4_TERMIO) && !defined(_POSIX_SOURCE)
d52 1
a52 1
MODULE_ID("$From: lib_newterm.c,v 1.47 2000/07/22 22:33:34 Bruno.Haible Exp $")
d196 1
a196 1
#ifdef USE_WIDEC_SUPPORT
@


1.9
log
@ncurses 5.1
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.8 2000/06/19 03:53:43 millert Exp $	*/
d52 1
a52 1
MODULE_ID("$From: lib_newterm.c,v 1.46 2000/07/01 22:26:22 tom Exp $")
d203 8
a210 4
	if (((s = getenv("LC_ALL")) != 0
		|| (s = getenv("LC_CTYPE")) != 0
		|| (s = getenv("LANG")) != 0)
	    && strstr(s, "UTF-8") != 0) {
@


1.8
log
@ncurses-5.0-20000617
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.7 2000/03/10 01:35:02 millert Exp $	*/
d52 1
a52 1
MODULE_ID("$From: lib_newterm.c,v 1.45 2000/05/20 23:45:57 tom Exp $");
@


1.7
log
@Update to ncurses-5.0-20000304
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.6 2000/01/02 22:06:51 millert Exp $	*/
d52 1
a52 1
MODULE_ID("$From: lib_newterm.c,v 1.44 2000/02/13 00:59:39 tom Exp $")
d195 16
@


1.6
log
@+ corrected conversion from terminfo rs2 to termcap rs (cf: 980704)
+ make conversion to termcap ug (underline glitch) more consistently applied.
+ modify read_termtype(), fixing 'toe', which could dump core when it
found an incomplete entry such as "dumb" because it did not
initialize its buffer for _nc_read_file_entry().
+ use explicit VALID_NUMERIC() checks in a few places that had been
overlooked, and add a check to ensure that init_tabs is nonzero,
to avoid divide-by-zero (reported by Todd C Miller).
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.5 1999/08/15 11:40:55 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998-2000 Free Software Foundation, Inc.                   *
d52 1
a52 1
MODULE_ID("$From: lib_newterm.c,v 1.43 2000/01/01 16:56:20 tom Exp $")
@


1.5
log
@Update to ncurses-5.0-990814
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.4 1999/06/14 02:29:15 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
a35 2


d49 2
a50 1
#include <term.h>	/* clear_screen, cup & friends, cur_term */
d52 1
a52 1
MODULE_ID("$From: lib_newterm.c,v 1.41 1999/07/24 20:07:48 tom Exp $")
d54 1
a54 1
#ifndef ONLCR		/* Allows compilation under the QNX 4.2 OS */
d66 2
a67 1
static inline int _nc_initscr(void)
d69 3
a71 3
	/* for extended XPG4 conformance requires cbreak() at this point */
	/* (SVr4 curses does this anyway) */
	cbreak();
d74 3
a76 3
	cur_term->Nttyb.c_lflag &= ~(ECHO|ECHONL);
	cur_term->Nttyb.c_iflag &= ~(ICRNL|INLCR|IGNCR);
	cur_term->Nttyb.c_oflag &= ~(ONLCR);
d78 1
a78 1
	cur_term->Nttyb.sg_flags &= ~(ECHO|CRMOD);
d80 1
a80 1
	return _nc_set_tty_mode(&cur_term->Nttyb);
d91 2
a92 1
void filter(void)
d97 2
a98 1
SCREEN * newterm(NCURSES_CONST char *name, FILE *ofp, FILE *ifp)
d100 3
a102 3
int	errret;
int     slk_format = _nc_slk_format;
SCREEN* current;
d104 1
a104 1
int t = _nc_getenv_num("NCURSES_TRACE");
d106 2
a107 2
	if (t >= 0)
               trace(t);
d110 1
a110 25
	T((T_CALLED("newterm(\"%s\",%p,%p)"), name, ofp, ifp));

	/* this loads the capability entry, then sets LINES and COLS */
	if (setupterm(name, fileno(ofp), &errret) == ERR)
		return 0;

	/* implement filter mode */
	if (filter_mode) {
		LINES = 1;

		if (init_tabs != -1)
			TABSIZE = init_tabs;
		else
			TABSIZE = 8;

		T(("TABSIZE = %d", TABSIZE));

		clear_screen = 0;
		cursor_down = parm_down_cursor = 0;
		cursor_address = 0;
		cursor_up = parm_up_cursor = 0;
		row_address = 0;

		cursor_home = carriage_return;
	}
d112 32
a143 18
	/* If we must simulate soft labels, grab off the line to be used.
	   We assume that we must simulate, if it is none of the standard
	   formats (4-4  or 3-2-3) for which there may be some hardware
	   support. */
	if (num_labels <= 0 || !SLK_STDFMT(slk_format))
	    if (slk_format)
	      {
		if (ERR==_nc_ripoffline(-SLK_LINES(slk_format),
					_nc_slk_initialize))
		  return 0;
	      }
	/* this actually allocates the screen structure, and saves the
	 * original terminal settings.
	 */
	current = SP;
	_nc_set_screen(0);
	if (_nc_setupscreen(LINES, COLS, ofp) == ERR) {
	        _nc_set_screen(current);
d146 17
a162 8

	/* if the terminal type has real soft labels, set those up */
	if (slk_format && num_labels > 0 && SLK_STDFMT(slk_format))
	    _nc_slk_initialize(stdscr, COLS);

	SP->_ifd        = fileno(ifp);
	SP->_checkfd	= fileno(ifp);
	typeahead(fileno(ifp));
d164 2
a165 2
	SP->_use_meta   = ((cur_term->Ottyb.c_cflag & CSIZE) == CS8 &&
			    !(cur_term->Ottyb.c_iflag & ISTRIP));
d167 1
a167 1
	SP->_use_meta   = FALSE;
d169 1
a169 1
	SP->_endwin	= FALSE;
d171 21
a191 21
	/* Check whether we can optimize scrolling under dumb terminals in case
	 * we do not have any of these capabilities, scrolling optimization
	 * will be useless.
	 */
	SP->_scrolling = ((scroll_forward && scroll_reverse) ||
			  ((parm_rindex || parm_insert_line || insert_line) &&
			   (parm_index  || parm_delete_line || delete_line)));

	baudrate();	/* sets a field in the SP structure */

	SP->_keytry = 0;

	/*
	 * Check for mismatched graphic-rendition capabilities.  Most SVr4
	 * terminfo trees contain entries that have rmul or rmso equated to
	 * sgr0 (Solaris curses copes with those entries).  We do this only for
	 * curses, since many termcap applications assume that smso/rmso and
	 * smul/rmul are paired, and will not function properly if we remove
	 * rmso or rmul.  Curses applications shouldn't be looking at this
	 * detail.
	 */
d193 2
a194 2
	SP->_use_rmso = SGR0_TEST(exit_standout_mode);
	SP->_use_rmul = SGR0_TEST(exit_underline_mode);
d196 2
a197 2
	/* compute movement costs so we can do better move optimization */
	_nc_mvcur_init();
d199 2
a200 2
	/* initialize terminal to a sane state */
	_nc_screen_init();
d202 2
a203 2
	/* Initialize the terminal line settings. */
	_nc_initscr();
d205 1
a205 1
	_nc_signal_handler(TRUE);
d207 2
a208 2
	T((T_RETURN("%p"), SP));
	return(SP);
@


1.4
log
@ncurses-5.0-990612
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.3 1999/03/11 21:03:55 millert Exp $	*/
d53 1
a53 1
MODULE_ID("$From: lib_newterm.c,v 1.40 1999/06/12 21:30:39 tom Exp $")
d96 1
a96 1
SCREEN * newterm(NCURSES_CONST char *term, FILE *ofp, FILE *ifp)
d108 1
a108 1
	T((T_CALLED("newterm(\"%s\",%p,%p)"), term, ofp, ifp));
d111 1
a111 1
	if (setupterm(term, fileno(ofp), &errret) == ERR)
@


1.3
log
@ncurses-4.2-990307
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.2 1999/01/31 20:17:09 millert Exp $	*/
d53 1
a53 1
MODULE_ID("$From: lib_newterm.c,v 1.39 1999/03/03 23:44:22 juergen Exp $")
a113 16
	/*
	 * Check for mismatched graphic-rendition capabilities.  Most SVr4
	 * terminfo trees contain entries that have rmul or rmso equated to
	 * sgr0 (Solaris curses copes with those entries).  We do this only for
	 * curses, since many termcap applications assume that smso/rmso and
	 * smul/rmul are paired, and will not function properly if we remove
	 * rmso or rmul.  Curses applications shouldn't be looking at this
	 * detail.
	 */
	if (exit_attribute_mode) {
#define SGR0_FIX(mode) if (mode != 0 && !strcmp(mode, exit_attribute_mode)) \
			mode = 0
		SGR0_FIX(exit_underline_mode);
		SGR0_FIX(exit_standout_mode);
	}

d181 13
@


1.2
log
@ncurses-4.2-990130
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.1 1999/01/18 19:09:53 millert Exp $	*/
d53 1
a53 1
MODULE_ID("$From: lib_newterm.c,v 1.38 1999/01/31 01:23:25 tom Exp $")
d99 1
d154 2
a155 2
	if (num_labels <= 0 || !SLK_STDFMT)
	    if (_nc_slk_format)
d157 2
a158 1
		if (ERR==_nc_ripoffline(-SLK_LINES, _nc_slk_initialize))
d172 1
a172 1
	if (_nc_slk_format && num_labels > 0 && SLK_STDFMT)
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_newterm.c,v 1.6 1998/10/31 06:30:30 millert Exp $	*/
d53 1
a53 1
MODULE_ID("$From: lib_newterm.c,v 1.37 1999/01/02 22:56:08 tom Exp $")
a198 2
	_nc_signal_handler(TRUE);

d204 2
@

