head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.30
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.28
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.24
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.26
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.18
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.22
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.20
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.16
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.14
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.12
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.38
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.34
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.32
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.30
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.28
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.26
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.24
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.22
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.20
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.18
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.16
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.14
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.12
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.10
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.8
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2010.01.12.23.22.05;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.22.18.01.39;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.09.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2006,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/

/*
**	lib_getstr.c
**
**	The routine wgetstr().
**
*/

#include <curses.priv.h>
#include <term.h>

MODULE_ID("$Id: lib_getstr.c,v 1.27 2008/08/16 19:20:04 tom Exp $")

/*
 * This wipes out the last character, no matter whether it was a tab, control
 * or other character, and handles reverse wraparound.
 */
static char *
WipeOut(WINDOW *win, int y, int x, char *first, char *last, bool echoed)
{
    if (last > first) {
	*--last = '\0';
	if (echoed) {
	    int y1 = win->_cury;
	    int x1 = win->_curx;

	    wmove(win, y, x);
	    waddstr(win, first);
	    getyx(win, y, x);
	    while (win->_cury < y1
		   || (win->_cury == y1 && win->_curx < x1))
		waddch(win, (chtype) ' ');

	    wmove(win, y, x);
	}
    }
    return last;
}

NCURSES_EXPORT(int)
wgetnstr_events(WINDOW *win,
		char *str,
		int maxlen,
		EVENTLIST_1st(_nc_eventlist * evl))
{
    SCREEN *sp = _nc_screen_of(win);
    TTY buf;
    bool oldnl, oldecho, oldraw, oldcbreak;
    char erasec;
    char killc;
    char *oldstr;
    int ch;
    int y, x;

    T((T_CALLED("wgetnstr(%p,%p, %d)"), win, str, maxlen));

    if (!win)
	returnCode(ERR);

    _nc_get_tty_mode(&buf);

    oldnl = sp->_nl;
    oldecho = sp->_echo;
    oldraw = sp->_raw;
    oldcbreak = sp->_cbreak;
    nl();
    noecho();
    noraw();
    cbreak();

    erasec = erasechar();
    killc = killchar();

    oldstr = str;
    getyx(win, y, x);

    if (is_wintouched(win) || (win->_flags & _HASMOVED))
	wrefresh(win);

    while ((ch = wgetch_events(win, evl)) != ERR) {
	/*
	 * Some terminals (the Wyse-50 is the most common) generate
	 * a \n from the down-arrow key.  With this logic, it's the
	 * user's choice whether to set kcud=\n for wgetch();
	 * terminating *getstr() with \n should work either way.
	 */
	if (ch == '\n'
	    || ch == '\r'
	    || ch == KEY_DOWN
	    || ch == KEY_ENTER) {
	    if (oldecho == TRUE
		&& win->_cury == win->_maxy
		&& win->_scroll)
		wechochar(win, (chtype) '\n');
	    break;
	}
#ifdef KEY_EVENT
	if (ch == KEY_EVENT)
	    break;
#endif
#ifdef KEY_RESIZE
	if (ch == KEY_RESIZE)
	    break;
#endif
	if (ch == erasec || ch == KEY_LEFT || ch == KEY_BACKSPACE) {
	    if (str > oldstr) {
		str = WipeOut(win, y, x, oldstr, str, oldecho);
	    }
	} else if (ch == killc) {
	    while (str > oldstr) {
		str = WipeOut(win, y, x, oldstr, str, oldecho);
	    }
	} else if (ch >= KEY_MIN
		   || (maxlen >= 0 && str - oldstr >= maxlen)) {
	    beep();
	} else {
	    *str++ = (char) ch;
	    if (oldecho == TRUE) {
		int oldy = win->_cury;
		if (waddch(win, (chtype) ch) == ERR) {
		    /*
		     * We can't really use the lower-right
		     * corner for input, since it'll mess
		     * up bookkeeping for erases.
		     */
		    win->_flags &= ~_WRAPPED;
		    waddch(win, (chtype) ' ');
		    str = WipeOut(win, y, x, oldstr, str, oldecho);
		    continue;
		} else if (win->_flags & _WRAPPED) {
		    /*
		     * If the last waddch forced a wrap &
		     * scroll, adjust our reference point
		     * for erasures.
		     */
		    if (win->_scroll
			&& oldy == win->_maxy
			&& win->_cury == win->_maxy) {
			if (--y <= 0) {
			    y = 0;
			}
		    }
		    win->_flags &= ~_WRAPPED;
		}
		wrefresh(win);
	    }
	}
    }

    win->_curx = 0;
    win->_flags &= ~_WRAPPED;
    if (win->_cury < win->_maxy)
	win->_cury++;
    wrefresh(win);

    /* Restore with a single I/O call, to fix minor asymmetry between
     * raw/noraw, etc.
     */
    sp->_nl = oldnl;
    sp->_echo = oldecho;
    sp->_raw = oldraw;
    sp->_cbreak = oldcbreak;

    _nc_set_tty_mode(&buf);

    *str = '\0';
    if (ch == ERR)
	returnCode(ch);

    T(("wgetnstr returns %s", _nc_visbuf(oldstr)));

#ifdef KEY_EVENT
    if (ch == KEY_EVENT)
	returnCode(ch);
#endif
#ifdef KEY_RESIZE
    if (ch == KEY_RESIZE)
	returnCode(ch);
#endif

    returnCode(OK);
}

#ifdef NCURSES_WGETCH_EVENTS
NCURSES_EXPORT(int)
wgetnstr(WINDOW *win, char *str, int maxlen)
{
    returnCode(wgetnstr_events(win,
			       str,
			       maxlen,
			       EVENTLIST_1st((_nc_eventlist *) 0)));
}
#endif
@


1.2
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_getstr.c,v 1.1 1999/01/18 19:09:46 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d46 1
a46 1
MODULE_ID("$From: lib_getstr.c,v 1.23 2000/12/10 02:43:27 tom Exp $")
d75 4
a78 1
wgetnstr(WINDOW *win, char *str, int maxlen)
d80 1
d96 4
a99 4
    oldnl = SP->_nl;
    oldecho = SP->_echo;
    oldraw = SP->_raw;
    oldcbreak = SP->_cbreak;
d114 1
a114 1
    while ((ch = wgetch(win)) != ERR) {
d131 8
d151 1
a151 1
	    *str++ = ch;
d193 4
a196 4
    SP->_nl = oldnl;
    SP->_echo = oldecho;
    SP->_raw = oldraw;
    SP->_cbreak = oldcbreak;
d202 1
a202 1
	returnCode(ERR);
d206 9
d217 11
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_getstr.c,v 1.4 1998/07/23 21:18:48 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
a35 1

d46 1
a46 1
MODULE_ID("$From: lib_getstr.c,v 1.20 1998/12/20 00:16:01 tom Exp $")
d52 2
a53 1
static char *WipeOut(WINDOW *win, int y, int x, char *first, char *last, bool echoed)
d55 12
a66 12
	if (last > first) {
		*--last = '\0';
		if (echoed) {
			int y1 = win->_cury;
			int x1 = win->_curx;

			wmove(win, y, x);
			waddstr(win, first);
			getyx(win, y, x);
			while (win->_cury < y1
			   || (win->_cury == y1 && win->_curx < x1))
				waddch(win, ' ');
d68 1
a68 2
			wmove(win, y, x);
		}
d70 2
a71 1
	return last;
d74 2
a75 1
int wgetnstr(WINDOW *win, char *str, int maxlen)
d77 23
a99 23
TTY	buf;
bool	oldnl, oldecho, oldraw, oldcbreak;
char	erasec;
char	killc;
char	*oldstr;
int ch;
int	y, x;

	T((T_CALLED("wgetnstr(%p,%p, %d)"), win, str, maxlen));

	if (!win)
	  returnCode(ERR);

	_nc_get_tty_mode(&buf);

	oldnl = SP->_nl;
	oldecho = SP->_echo;
	oldraw = SP->_raw;
	oldcbreak = SP->_cbreak;
	nl();
	noecho();
	noraw();
	cbreak();
d101 2
a102 2
	erasec = erasechar();
	killc = killchar();
d104 2
a105 2
	oldstr = str;
	getyx(win, y, x);
d107 2
a108 2
	if (is_wintouched(win) || (win->_flags & _HASMOVED))
		wrefresh(win);
d110 53
a162 58
	while ((ch = wgetch(win)) != ERR) {
		/*
		 * Some terminals (the Wyse-50 is the most common) generate
		 * a \n from the down-arrow key.  With this logic, it's the
		 * user's choice whether to set kcud=\n for wgetch();
		 * terminating *getstr() with \n should work either way.
		 */
		if (ch == '\n'
		 || ch == '\r'
		 || ch == KEY_DOWN
		 || ch == KEY_ENTER) {
			if (oldecho == TRUE
			 && win->_cury == win->_maxy
			 && win->_scroll)
				wechochar(win, '\n');
			break;
		}
		if (ch == erasec || ch == KEY_LEFT || ch == KEY_BACKSPACE) {
			if (str > oldstr) {
				str = WipeOut(win, y, x, oldstr, str, oldecho);
			}
		} else if (ch == killc) {
			while (str > oldstr) {
				str = WipeOut(win, y, x, oldstr, str, oldecho);
			}
		} else if (ch >= KEY_MIN
			   || (maxlen >= 0 && str - oldstr >= maxlen)) {
			beep();
		} else {
			*str++ = ch;
			if (oldecho == TRUE) {
				int oldy = win->_cury;
				if (waddch(win, ch) == ERR) {
					/*
					 * We can't really use the lower-right
					 * corner for input, since it'll mess
					 * up bookkeeping for erases.
					 */
					win->_flags &= ~_WRAPPED;
					waddch(win, ' ');
					str = WipeOut(win, y, x, oldstr, str, oldecho);
					continue;
				} else if (win->_flags & _WRAPPED) {
					/*
					 * If the last waddch forced a wrap &
					 * scroll, adjust our reference point
					 * for erasures.
					 */
					if (win->_scroll
					 && oldy == win->_maxy
					 && win->_cury == win->_maxy) {
						if (--y <= 0) {
							y = 0;
						}
					}
					win->_flags &= ~_WRAPPED;
				}
				wrefresh(win);
d164 2
d167 2
d170 1
d172 19
a190 19
	win->_curx = 0;
	win->_flags &= ~_WRAPPED;
	if (win->_cury < win->_maxy)
		win->_cury++;
	wrefresh(win);

	/* Restore with a single I/O call, to fix minor asymmetry between
	 * raw/noraw, etc.
	 */
	SP->_nl = oldnl;
	SP->_echo = oldecho;
	SP->_raw = oldraw;
	SP->_cbreak = oldcbreak;

	_nc_set_tty_mode(&buf);

	*str = '\0';
	if (ch == ERR)
		returnCode(ERR);
d192 1
a192 1
	T(("wgetnstr returns %s", _nc_visbuf(oldstr)));
d194 1
a194 1
	returnCode(OK);
@

