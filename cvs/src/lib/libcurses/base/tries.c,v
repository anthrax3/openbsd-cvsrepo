head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.32
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.28
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.24
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.26
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.18
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.38
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.34
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.32
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.30
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.28
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.26
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.24
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.22
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.22.18.01.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.03.02.06.23.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.02.24.06.31.08;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.07;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Thomas E. Dickey <dickey@@clark.net> 1997                        *
 ****************************************************************************/

/*
**	tries.c
**
**	Functions to manage the tree of partial-completions for keycodes.
**
*/

#include <curses.priv.h>

MODULE_ID("$Id: tries.c,v 1.27 2008/08/16 19:22:55 tom Exp $")

/*
 * Expand a keycode into the string that it corresponds to, returning null if
 * no match was found, otherwise allocating a string of the result.
 */
NCURSES_EXPORT(char *)
_nc_expand_try(TRIES * tree, unsigned code, int *count, size_t len)
{
    TRIES *ptr = tree;
    char *result = 0;

    if (code != 0) {
	while (ptr != 0) {
	    if ((result = _nc_expand_try(ptr->child, code, count, len + 1))
		!= 0) {
		break;
	    }
	    if (ptr->value == code) {
		*count -= 1;
		if (*count == -1) {
		    result = typeCalloc(char, len + 2);
		    break;
		}
	    }
	    ptr = ptr->sibling;
	}
    }
    if (result != 0) {
	if (ptr != 0 && (result[len] = (char) ptr->ch) == 0)
	    *((unsigned char *) (result + len)) = 128;
#ifdef TRACE
	if (len == 0 && USE_TRACEF(TRACE_MAXIMUM)) {
	    _tracef("expand_key %s %s", _nc_tracechar(SP, code), _nc_visbuf(result));
	    _nc_unlock_global(tracef);
	}
#endif
    }
    return result;
}

/*
 * Remove a code from the specified tree, freeing the unused nodes.  Returns
 * true if the code was found/removed.
 */
NCURSES_EXPORT(int)
_nc_remove_key(TRIES ** tree, unsigned code)
{
    T((T_CALLED("_nc_remove_key(%p,%d)"), tree, code));

    if (code == 0)
	returnCode(FALSE);

    while (*tree != 0) {
	if (_nc_remove_key(&(*tree)->child, code)) {
	    returnCode(TRUE);
	}
	if ((*tree)->value == code) {
	    if ((*tree)->child) {
		/* don't cut the whole sub-tree */
		(*tree)->value = 0;
	    } else {
		TRIES *to_free = *tree;
		*tree = (*tree)->sibling;
		free(to_free);
	    }
	    returnCode(TRUE);
	}
	tree = &(*tree)->sibling;
    }
    returnCode(FALSE);
}

/*
 * Remove a string from the specified tree, freeing the unused nodes.  Returns
 * true if the string was found/removed.
 */
NCURSES_EXPORT(int)
_nc_remove_string(TRIES ** tree, const char *string)
{
    T((T_CALLED("_nc_remove_string(%p,%s)"), tree, _nc_visbuf(string)));

    if (string == 0 || *string == 0)
	returnCode(FALSE);

    while (*tree != 0) {
	if (UChar((*tree)->ch) == UChar(*string)) {
	    if (string[1] != 0)
		returnCode(_nc_remove_string(&(*tree)->child, string + 1));
	    if ((*tree)->child == 0) {
		TRIES *to_free = *tree;
		*tree = (*tree)->sibling;
		free(to_free);
		returnCode(TRUE);
	    } else {
		returnCode(FALSE);
	    }
	}
	tree = &(*tree)->sibling;
    }
    returnCode(FALSE);
}
@


1.4
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: tries.c,v 1.3 1999/03/02 06:23:27 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d44 1
a44 1
MODULE_ID("$From: tries.c,v 1.14 2000/12/10 02:43:28 tom Exp $")
d51 1
a51 2
_nc_expand_try
(struct tries *tree, unsigned short code, int *count, size_t len)
d53 1
a53 1
    struct tries *ptr = tree;
d73 1
a73 1
	if ((result[len] = ptr->ch) == 0)
d76 4
a79 2
	if (len == 0)
	    _tracef("expand_key %s %s", _trace_key(code), _nc_visbuf(result));
d90 1
a90 2
_nc_remove_key
(struct tries **tree, unsigned short code)
d106 1
a106 1
		struct tries *to_free = *tree;
d122 1
a122 1
_nc_remove_string(struct tries **tree, char *string)
d130 1
a130 1
	if ((unsigned char) (*tree)->ch == (unsigned char) *string) {
d133 2
a134 5
	    if ((*tree)->child) {
		/* don't cut the whole sub-tree */
		(*tree)->value = 0;
	    } else {
		struct tries *to_free = *tree;
d137 3
a140 1
	    returnCode(TRUE);
@


1.3
log
@ncurses-4.2-990301
@
text
@d1 1
a1 1
/*	$OpenBSD: tries.c,v 1.2 1999/02/24 06:31:08 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d44 1
a44 1
MODULE_ID("$From: tries.c,v 1.12 1999/03/01 23:23:59 tom Exp $")
d50 3
a52 1
char *_nc_expand_try(struct tries *tree, unsigned short code, int *count, size_t len)
d54 2
a55 2
	struct tries *ptr = tree;
	char *result = 0;
d57 11
a67 13
	if (code != 0) {
		while (ptr != 0) {
			if ((result = _nc_expand_try(ptr->child, code, count, len + 1)) != 0) {
				break;
			}
			if (ptr->value == code) {
				*count -= 1;
				if (*count == -1) {
					result = typeCalloc(char, len+2);
					break;
				}
			}
			ptr = ptr->sibling;
d69 2
d72 4
a75 3
	if (result != 0) {
		if ((result[len] = ptr->ch) == 0)
			*((unsigned char *)(result+len)) = 128;
d77 2
a78 2
		if (len == 0)
			_tracef("expand_key %s %s", _trace_key(code), _nc_visbuf(result));
d80 2
a81 2
	}
	return result;
d88 3
a90 1
int _nc_remove_key(struct tries **tree, unsigned short code)
d92 4
a95 1
	T((T_CALLED("_nc_remove_key(%p,%d)"), tree, code));
d97 14
a110 19
	if (code == 0)
		returnCode(FALSE);
		
	while (*tree != 0) {
		if (_nc_remove_key(&(*tree)->child, code)) {
			returnCode(TRUE);
		}
		if ((*tree)->value == code) {
			if((*tree)->child) {
				/* don't cut the whole sub-tree */
				(*tree)->value = 0;
			} else {
				struct tries *to_free = *tree;
				*tree = (*tree)->sibling;
				free(to_free);
			}
			returnCode(TRUE);
		}
		tree = &(*tree)->sibling;
d112 3
a114 1
	returnCode(FALSE);
d121 2
a122 1
int _nc_remove_string(struct tries **tree, char *string)
d124 4
a127 1
	T((T_CALLED("_nc_remove_string(%p,%s)"), tree, _nc_visbuf(string)));
d129 13
a141 18
	if (string == 0 || *string == 0)
		returnCode(FALSE);
		
	while (*tree != 0) {
		if ((unsigned char)(*tree)->ch == (unsigned char)*string) {
			if (string[1] != 0)
				returnCode(_nc_remove_string(&(*tree)->child, string+1));
			if((*tree)->child) {
				/* don't cut the whole sub-tree */
				(*tree)->value = 0;
			} else {
				struct tries *to_free = *tree;
				*tree = (*tree)->sibling;
				free(to_free);
			}
			returnCode(TRUE);
		}
		tree = &(*tree)->sibling;
d143 3
a145 1
	returnCode(FALSE);
@


1.2
log
@ncurses-4.2-990220; this is a pre-release of 5.0
@
text
@d1 1
a1 1
/*	$OpenBSD: tries.c,v 1.1 1999/01/18 19:10:07 millert Exp $	*/
d44 1
a44 1
MODULE_ID("$From: tries.c,v 1.10 1999/02/19 11:52:11 tom Exp $")
d87 2
d90 1
a90 1
		return FALSE;
d94 1
a94 1
			return TRUE;
d105 1
a105 1
			return TRUE;
d109 1
a109 1
	return FALSE;
d118 2
d121 1
a121 1
		return FALSE;
a123 3
		if (_nc_remove_string(&(*tree)->child, string+1)) {
			return TRUE;
		}
d125 2
d135 1
a135 1
			return TRUE;
d139 1
a139 1
	return FALSE;
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: tries.c,v 1.4 1998/11/17 03:16:22 millert Exp $	*/
d44 1
a44 1
MODULE_ID("$From: tries.c,v 1.8 1998/11/07 22:54:48 tom Exp $")
d50 1
a50 1
char *_nc_expand_try(struct tries *tree, unsigned short code, size_t len)
d57 1
a57 1
			if ((result = _nc_expand_try(ptr->child, code, len + 1)) != 0) {
d61 5
a65 2
				result = typeCalloc(char, len+2);
				break;
d95 29
@

