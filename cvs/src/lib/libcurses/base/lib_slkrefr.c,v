head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.30
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.32
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.28
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.24
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.26
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.18
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.38
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.34
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.32
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.30
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.28
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.26
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.24
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.22
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.22.18.01.46;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.03.14.03.10.32;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.03.11.21.03.56;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.03;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2006,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Juergen Pfeifer                         1996-on                 *
 *     and: Thomas E. Dickey                                                *
 ****************************************************************************/

/*
 *	lib_slkrefr.c
 *	Write SLK window to the (virtual) screen.
 */
#include <curses.priv.h>
#include <term.h>		/* num_labels, label_*, plab_norm */

MODULE_ID("$Id: lib_slkrefr.c,v 1.17 2008/09/27 14:07:53 juergen Exp $")

/*
 * Paint the info line for the PC style SLK emulation.
 */
static void
slk_paint_info(WINDOW *win)
{
    SCREEN *sp = _nc_screen_of(win);

    if (win && sp && (sp->slk_format == 4)) {
	int i;

	mvwhline(win, 0, 0, 0, getmaxx(win));
	wmove(win, 0, 0);

	for (i = 0; i < sp->_slk->maxlab; i++) {
	    mvwprintw(win, 0, sp->_slk->ent[i].ent_x, "F%d", i + 1);
	}
    }
}

/*
 * Write the soft labels to the soft-key window.
 */
static void
slk_intern_refresh(SLK * slk)
{
    int i;
    int fmt = SP->slk_format;

    for (i = 0; i < slk->labcnt; i++) {
	if (slk->dirty || slk->ent[i].dirty) {
	    if (slk->ent[i].visible) {
		if (num_labels > 0 && SLK_STDFMT(fmt)) {
		    if (i < num_labels) {
			TPUTS_TRACE("plab_norm");
			putp(TPARM_2(plab_norm, i + 1, slk->ent[i].form_text));
		    }
		} else {
		    if (fmt == 4)
			slk_paint_info(slk->win);
		    wmove(slk->win, SLK_LINES(fmt) - 1, slk->ent[i].ent_x);
		    if (SP->_slk) {
			wattrset(slk->win, AttrOf(SP->_slk->attr));
		    }
		    waddstr(slk->win, slk->ent[i].form_text);
		    /* if we simulate SLK's, it's looking much more
		       natural to use the current ATTRIBUTE also
		       for the label window */
		    wattrset(slk->win, WINDOW_ATTRS(stdscr));
		}
	    }
	    slk->ent[i].dirty = FALSE;
	}
    }
    slk->dirty = FALSE;

    if (num_labels > 0) {
	if (slk->hidden) {
	    TPUTS_TRACE("label_off");
	    putp(label_off);
	} else {
	    TPUTS_TRACE("label_on");
	    putp(label_on);
	}
    }
}

/*
 * Refresh the soft labels.
 */
NCURSES_EXPORT(int)
slk_noutrefresh(void)
{
    T((T_CALLED("slk_noutrefresh()")));

    if (SP == NULL || SP->_slk == NULL)
	returnCode(ERR);
    if (SP->_slk->hidden)
	returnCode(OK);
    slk_intern_refresh(SP->_slk);

    returnCode(wnoutrefresh(SP->_slk->win));
}

/*
 * Refresh the soft labels.
 */
NCURSES_EXPORT(int)
slk_refresh(void)
{
    T((T_CALLED("slk_refresh()")));

    if (SP == NULL || SP->_slk == NULL)
	returnCode(ERR);
    if (SP->_slk->hidden)
	returnCode(OK);
    slk_intern_refresh(SP->_slk);

    returnCode(wrefresh(SP->_slk->win));
}
@


1.4
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_slkrefr.c,v 1.3 1999/03/14 03:10:32 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d34 2
d45 21
a65 1
MODULE_ID("$From: lib_slkrefr.c,v 1.10 2000/12/10 02:43:27 tom Exp $")
d82 1
a82 1
			putp(tparm(plab_norm, i + 1, slk->ent[i].form_text));
d85 7
a91 5
		    wmove(slk->win, SLK_LINES(fmt) - 1, slk->ent[i].x);
		    if (SP && SP->_slk)
			wattrset(slk->win, SP->_slk->attr);
		    waddnstr(slk->win, slk->ent[i].form_text,
			     MAX_SKEY_LEN(fmt));
d95 1
a95 1
		    wattrset(slk->win, stdscr->_attrs);
@


1.3
log
@ncurses-4.2-990313
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_slkrefr.c,v 1.2 1999/03/11 21:03:56 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d41 1
a41 1
#include <term.h>	  /* num_labels, label_*, plab_norm */
d43 1
a43 1
MODULE_ID("$From: lib_slkrefr.c,v 1.8 1999/03/14 00:10:27 Alexander.V.Lukyanov Exp $")
d49 1
a49 1
slk_intern_refresh(SLK *slk)
d51 2
a52 2
int i;
int fmt = SP->slk_format;
d54 18
a71 24
	for (i = 0; i < slk->labcnt; i++) {
		if (slk->dirty || slk->ent[i].dirty) {
			if (slk->ent[i].visible) {
				if (num_labels > 0 && SLK_STDFMT(fmt))
				{
				  if (i < num_labels) {
				    TPUTS_TRACE("plab_norm");
				    putp(tparm(plab_norm, i+1, slk->ent[i].form_text));
				  }
				}
				else
				{
					wmove(slk->win,SLK_LINES(fmt)-1,slk->ent[i].x);
					if (SP && SP->_slk)
					  wattrset(slk->win,SP->_slk->attr);
					waddnstr(slk->win,slk->ent[i].form_text,
						 MAX_SKEY_LEN(fmt));
					/* if we simulate SLK's, it's looking much more
					   natural to use the current ATTRIBUTE also
					   for the label window */
					wattrset(slk->win,stdscr->_attrs);
				}
			}
			slk->ent[i].dirty = FALSE;
d73 2
d76 2
a77 1
	slk->dirty = FALSE;
d79 7
a85 11
	if (num_labels > 0) {
	    if (slk->hidden)
	    {
		TPUTS_TRACE("label_off");
		putp(label_off);
	    }
	    else
	    {
		TPUTS_TRACE("label_on");
		putp(label_on);
	    }
d87 1
d93 1
a93 1
int
d96 1
a96 1
	T((T_CALLED("slk_noutrefresh()")));
d98 5
a102 5
	if (SP == NULL || SP->_slk == NULL)
		returnCode(ERR);
	if (SP->_slk->hidden)
		returnCode(OK);
	slk_intern_refresh(SP->_slk);
d104 1
a104 1
	returnCode(wnoutrefresh(SP->_slk->win));
d110 1
a110 1
int
d113 1
a113 1
	T((T_CALLED("slk_refresh()")));
d115 5
a119 5
	if (SP == NULL || SP->_slk == NULL)
		returnCode(ERR);
	if (SP->_slk->hidden)
		returnCode(OK);
	slk_intern_refresh(SP->_slk);
d121 1
a121 1
	returnCode(wrefresh(SP->_slk->win));
@


1.2
log
@ncurses-4.2-990307
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_slkrefr.c,v 1.1 1999/01/18 19:10:03 millert Exp $	*/
d43 1
a43 1
MODULE_ID("$From: lib_slkrefr.c,v 1.7 1999/03/03 23:44:22 juergen Exp $")
d61 1
a61 1
				    putp(tparm(plab_norm, i+1, slk->win,slk->ent[i].form_text));
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_slkrefr.c,v 1.2 1998/07/23 21:19:33 millert Exp $	*/
d43 1
a43 1
MODULE_ID("$From: lib_slkrefr.c,v 1.6 1999/01/02 22:56:59 tom Exp $")
d52 2
d57 1
a57 1
				if (num_labels > 0 && SLK_STDFMT)
d61 1
a61 1
				    putp(tparm(plab_norm, i, slk->win,slk->ent[i].form_text));
d66 1
a66 1
					wmove(slk->win,SLK_LINES-1,slk->ent[i].x);
d69 2
a70 1
					waddnstr(slk->win,slk->ent[i].form_text, MAX_SKEY_LEN);
@

