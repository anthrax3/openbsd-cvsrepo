head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.34
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.32
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.28
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.24
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.30
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.26
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.24
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.22
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.20
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.18
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.16
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.14
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.12
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.10
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.8
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.6
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.4
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.8
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.6
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.4
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.18.16.55.54;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.17.19.16.59;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.22.18.01.54;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.08.22.47.02;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.24.04.06.10;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.19.03.53.50;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.10.01.35.04;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.16.01.35.18;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.11.28.17.49.54;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.03.02.06.23.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.20;	author millert;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Thomas E. Dickey                        1996-on                 *
 ****************************************************************************/

/*
 *	tputs.c
 *		delay_output()
 *		_nc_outch()
 *		tputs()
 *
 */

#include <curses.priv.h>
#include <ctype.h>
#include <term.h>		/* padding_baud_rate, xon_xoff */
#include <termcap.h>		/* ospeed */
#include <tic.h>

MODULE_ID("$Id: lib_tputs.c,v 1.66 2008/06/28 13:12:15 tom Exp $")

NCURSES_EXPORT_VAR(char) PC = 0;              /* used by termcap library */
NCURSES_EXPORT_VAR(NCURSES_OSPEED) ospeed = 0;        /* used by termcap library */

NCURSES_EXPORT_VAR(int) _nc_nulls_sent = 0;   /* used by 'tack' program */

#if NCURSES_NO_PADDING
NCURSES_EXPORT(void)
_nc_set_no_padding(SCREEN *sp)
{
    bool no_padding = (getenv("NCURSES_NO_PADDING") != 0);

    if (sp)
	sp->_no_padding = no_padding;
    else
	_nc_prescreen._no_padding = no_padding;

    TR(TRACE_CHARPUT | TRACE_MOVE, ("padding will%s be used",
				    GetNoPadding(sp) ? " not" : ""));
}
#endif

static int (*my_outch) (int c) = _nc_outch;

NCURSES_EXPORT(int)
delay_output(int ms)
{
    T((T_CALLED("delay_output(%d)"), ms));

    if (no_pad_char) {
	_nc_flush();
	napms(ms);
    } else {
	register int nullcount;

	nullcount = (ms * _nc_baudrate(ospeed)) / (BAUDBYTE * 1000);
	for (_nc_nulls_sent += nullcount; nullcount > 0; nullcount--)
	    my_outch(PC);
	if (my_outch == _nc_outch)
	    _nc_flush();
    }

    returnCode(OK);
}

NCURSES_EXPORT(void)
_nc_flush(void)
{
    (void) fflush(NC_OUTPUT);
}

NCURSES_EXPORT(int)
_nc_outch(int ch)
{
    COUNT_OUTCHARS(1);

    if (SP != 0
	&& SP->_cleanup) {
	char tmp = ch;
	/*
	 * POSIX says write() is safe in a signal handler, but the
	 * buffered I/O is not.
	 */
	write(fileno(NC_OUTPUT), &tmp, 1);
    } else {
	putc(ch, NC_OUTPUT);
    }
    return OK;
}

NCURSES_EXPORT(int)
putp(const char *string)
{
    return tputs(string, 1, _nc_outch);
}

NCURSES_EXPORT(int)
tputs(const char *string, int affcnt, int (*outc) (int))
{
    bool always_delay;
    bool normal_delay;
    int number;
#if BSD_TPUTS
    int trailpad;
#endif /* BSD_TPUTS */

#ifdef TRACE
    char addrbuf[32];

    if (USE_TRACEF(TRACE_TPUTS)) {
	if (outc == _nc_outch)
	    (void) strlcpy(addrbuf, "_nc_outch", sizeof(addrbuf));
	else
	    (void) snprintf(addrbuf, sizeof(addrbuf), "%p", outc);
	if (_nc_tputs_trace) {
	    _tracef("tputs(%s = %s, %d, %s) called", _nc_tputs_trace,
		    _nc_visbuf(string), affcnt, addrbuf);
	} else {
	    _tracef("tputs(%s, %d, %s) called", _nc_visbuf(string), affcnt, addrbuf);
	}
	TPUTS_TRACE(NULL);
	_nc_unlock_global(tracef);
    }
#endif /* TRACE */

    if (!VALID_STRING(string))
	return ERR;

    if (cur_term == 0) {
	always_delay = FALSE;
	normal_delay = TRUE;
    } else {
	always_delay = (string == bell) || (string == flash_screen);
	normal_delay =
	    !xon_xoff
	    && padding_baud_rate
#if NCURSES_NO_PADDING
	    && !GetNoPadding(SP)
#endif
	    && (_nc_baudrate(ospeed) >= padding_baud_rate);
    }

#if BSD_TPUTS
    /*
     * This ugly kluge deals with the fact that some ancient BSD programs
     * (like nethack) actually do the likes of tputs("50") to get delays.
     */
    trailpad = 0;
    if (isdigit(UChar(*string))) {
	while (isdigit(UChar(*string))) {
	    trailpad = trailpad * 10 + (*string - '0');
	    string++;
	}
	trailpad *= 10;
	if (*string == '.') {
	    string++;
	    if (isdigit(UChar(*string))) {
		trailpad += (*string - '0');
		string++;
	    }
	    while (isdigit(UChar(*string)))
		string++;
	}

	if (*string == '*') {
	    trailpad *= affcnt;
	    string++;
	}
    }
#endif /* BSD_TPUTS */

    my_outch = outc;		/* redirect delay_output() */
    while (*string) {
	if (*string != '$')
	    (*outc) (*string);
	else {
	    string++;
	    if (*string != '<') {
		(*outc) ('$');
		if (*string)
		    (*outc) (*string);
	    } else {
		bool mandatory;

		string++;
		if ((!isdigit(UChar(*string)) && *string != '.')
		    || !strchr(string, '>')) {
		    (*outc) ('$');
		    (*outc) ('<');
		    continue;
		}

		number = 0;
		while (isdigit(UChar(*string))) {
		    number = number * 10 + (*string - '0');
		    string++;
		}
		number *= 10;
		if (*string == '.') {
		    string++;
		    if (isdigit(UChar(*string))) {
			number += (*string - '0');
			string++;
		    }
		    while (isdigit(UChar(*string)))
			string++;
		}

		mandatory = FALSE;
		while (*string == '*' || *string == '/') {
		    if (*string == '*') {
			number *= affcnt;
			string++;
		    } else {	/* if (*string == '/') */
			mandatory = TRUE;
			string++;
		    }
		}

		if (number > 0
		    && (always_delay
			|| normal_delay
			|| mandatory))
		    delay_output(number / 10);

	    }			/* endelse (*string == '<') */
	}			/* endelse (*string == '$') */

	if (*string == '\0')
	    break;

	string++;
    }

#if BSD_TPUTS
    /*
     * Emit any BSD-style prefix padding that we've accumulated now.
     */
    if (trailpad > 0
	&& (always_delay || normal_delay))
	delay_output(trailpad / 10);
#endif /* BSD_TPUTS */

    my_outch = _nc_outch;
    return OK;
}
@


1.11
log
@Use strlcpy() / strlcat() throughout.
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tputs.c,v 1.10 2003/03/17 19:16:59 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999,2000 Free Software Foundation, Inc.              *
d34 1
d51 1
a51 1
MODULE_ID("$From: lib_tputs.c,v 1.55 2000/12/10 02:55:08 tom Exp $");
d53 2
a54 3
NCURSES_EXPORT_VAR(char)
PC = 0;				/* used by termcap library */
NCURSES_EXPORT_VAR(NCURSES_OSPEED) ospeed = 0;	/* used by termcap library */
d56 1
a56 2
NCURSES_EXPORT_VAR(int)
_nc_nulls_sent = 0;		/* used by 'tack' program */
d58 17
a74 1
     static int (*my_outch) (int c) = _nc_outch;
d87 1
a87 1
	nullcount = (ms * _nc_baudrate(ospeed)) / 10000;
d106 1
a106 3
#ifdef TRACE
    _nc_outchars++;
#endif /* TRACE */
a121 66
#if USE_WIDEC_SUPPORT
/*
 * Reference: The Unicode Standard 2.0
 *
 * No surrogates supported (we're storing only one 16-bit Unicode value per
 * cell).
 */
NCURSES_EXPORT(int)
_nc_utf8_outch(int ch)
{
    static const unsigned byteMask = 0xBF;
    static const unsigned otherMark = 0x80;
    static const unsigned firstMark[] =
    {0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC};

    int result[7], *ptr;
    int count = 0;

    if ((unsigned int) ch < 0x80)
	count = 1;
    else if ((unsigned int) ch < 0x800)
	count = 2;
    else if ((unsigned int) ch < 0x10000)
	count = 3;
    else if ((unsigned int) ch < 0x200000)
	count = 4;
    else if ((unsigned int) ch < 0x4000000)
	count = 5;
    else if ((unsigned int) ch <= 0x7FFFFFFF)
	count = 6;
    else {
	count = 3;
	ch = 0xFFFD;
    }
    ptr = result + count;
    switch (count) {
    case 6:
	*--ptr = (ch | otherMark) & byteMask;
	ch >>= 6;
	/* FALLTHRU */
    case 5:
	*--ptr = (ch | otherMark) & byteMask;
	ch >>= 6;
	/* FALLTHRU */
    case 4:
	*--ptr = (ch | otherMark) & byteMask;
	ch >>= 6;
	/* FALLTHRU */
    case 3:
	*--ptr = (ch | otherMark) & byteMask;
	ch >>= 6;
	/* FALLTHRU */
    case 2:
	*--ptr = (ch | otherMark) & byteMask;
	ch >>= 6;
	/* FALLTHRU */
    case 1:
	*--ptr = (ch | firstMark[count]);
	break;
    }
    while (count--)
	_nc_outch(*ptr++);
    return OK;
}
#endif

d129 1
a129 2
tputs
(const char *string, int affcnt, int (*outc) (int))
d141 1
a141 1
    if (_nc_tracing & TRACE_TPUTS) {
d152 2
a153 1
	_nc_tputs_trace = (char *) NULL;
d169 1
a169 1
	    && (SP == 0 || !(SP->_no_padding))
d180 2
a181 2
    if (isdigit(*string)) {
	while (isdigit(*string)) {
d188 1
a188 1
	    if (isdigit(*string)) {
d192 1
a192 1
	    while (isdigit(*string))
d217 1
a217 1
		if ((!isdigit(CharOf(*string)) && *string != '.')
d225 1
a225 1
		while (isdigit(CharOf(*string))) {
d232 1
a232 1
		    if (isdigit(CharOf(*string))) {
d236 1
a236 1
		    while (isdigit(CharOf(*string)))
@


1.10
log
@use snprintf throughout
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tputs.c,v 1.9 2001/01/22 18:01:54 millert Exp $	*/
d197 1
a197 1
	    (void) strcpy(addrbuf, "_nc_outch");
@


1.9
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tputs.c,v 1.8 2000/10/08 22:47:02 millert Exp $	*/
d199 1
a199 1
	    (void) sprintf(addrbuf, "%p", outc);
@


1.8
log
@update to ncurses-5.1-20001007
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tputs.c,v 1.7 2000/07/24 04:06:10 millert Exp $	*/
d50 1
a50 1
MODULE_ID("$From: lib_tputs.c,v 1.51 2000/10/08 00:22:24 tom Exp $")
d52 3
a54 2
char PC = 0;			/* used by termcap library */
short ospeed = 0;		/* used by termcap library */
d56 2
a57 1
int _nc_nulls_sent = 0;		/* used by 'tack' program */
d59 1
a59 1
static int (*my_outch) (int c) = _nc_outch;
d61 1
a61 1
int
d82 1
a82 1
void
d88 1
a88 1
int
d116 1
a116 1
int
d175 1
a175 1
int
d181 3
a183 2
int
tputs(const char *string, int affcnt, int (*outc) (int))
d270 2
a271 1
		if ((!isdigit(*string) && *string != '.') || !strchr(string, '>')) {
d278 1
a278 1
		while (isdigit(*string)) {
d285 1
a285 1
		    if (isdigit(*string)) {
d289 1
a289 1
		    while (isdigit(*string))
@


1.7
log
@Update to ncurses-5.1-20000722
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tputs.c,v 1.6 2000/06/19 03:53:50 millert Exp $	*/
d50 1
a50 1
MODULE_ID("$From: lib_tputs.c,v 1.48 2000/07/22 22:33:23 Bruno.Haible Exp $")
d53 1
a53 1
speed_t ospeed = 0;		/* used by termcap library */
d107 1
a107 1
#ifdef USE_WIDEC_SUPPORT
d146 1
d150 1
d154 1
d158 1
d162 1
d165 1
d185 1
a185 1
#ifdef BSD_TPUTS
d199 1
a199 1
		_nc_visbuf(string), affcnt, addrbuf);
d218 1
a218 1
#ifdef NCURSES_NO_PADDING
d224 1
a224 1
#ifdef BSD_TPUTS
d315 1
a315 1
#ifdef BSD_TPUTS
@


1.6
log
@ncurses-5.0-20000617
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tputs.c,v 1.5 2000/03/10 01:35:04 millert Exp $	*/
d50 1
a50 1
MODULE_ID("$From: lib_tputs.c,v 1.47 2000/05/27 23:08:41 tom Exp $")
d83 1
a83 1
    (void)fflush(NC_OUTPUT);
d125 1
a125 1
    if (ch < 0x80)
d127 1
a127 1
    else if (ch < 0x800)
d129 1
a129 1
    else if (ch < 0x10000)
d131 1
a131 1
    else if (ch < 0x200000)
d133 1
a133 1
    else if (ch < 0x4000000)
d135 1
a135 1
    else if (ch <= 0x7FFFFFFF)
d138 1
a138 1
	count = 2;
@


1.5
log
@Update to ncurses-5.0-20000304
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tputs.c,v 1.4 2000/01/16 01:35:18 millert Exp $	*/
d50 1
a50 1
MODULE_ID("$From: lib_tputs.c,v 1.45 2000/02/27 02:33:24 tom Exp $")
d80 6
d106 60
@


1.4
log
@Update to ncurses-5.0-20000115:
+ additional fixes for non-bce terminals (handling of delete_character)
to work when assume_default_colors() is not specified.
+ modify warning message from _nc_parse_entry() regarding extended
capability names to print only if tic/infocmp/toe have the -v flag
set, and not at all in ordinary user applications.  Otherwise, this
warning would be shown for screen's extended capabilities in programs
that use the termcap interface.
+ modify use of _nc_tracing from programs such as tic so their debug
level is not in the same range as values set by trace() function.
+ small panel header cleanup (patch by Juergen Pfeifer).
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tputs.c,v 1.3 1999/11/28 17:49:54 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998-2000 Free Software Foundation, Inc.                   *
d50 1
a50 1
MODULE_ID("$From: lib_tputs.c,v 1.43 2000/01/15 20:13:04 tom Exp $")
d64 2
a65 1
    if (no_pad_char)
d67 1
a67 1
    else {
@


1.3
log
@update to ncurses-5.0-19991127
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tputs.c,v 1.2 1999/03/02 06:23:29 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999 Free Software Foundation, Inc.                   *
a35 1

d46 2
a47 2
#include <term.h>	/* padding_baud_rate, xon_xoff */
#include <termcap.h>	/* ospeed */
d50 1
a50 1
MODULE_ID("$From: lib_tputs.c,v 1.42 1999/10/30 23:00:16 tom Exp $")
d52 2
a53 2
char PC = 0;		/* used by termcap library */
speed_t ospeed = 0;	/* used by termcap library */
d55 1
a55 1
int _nc_nulls_sent = 0;	/* used by 'tack' program */
d57 1
a57 1
static int (*my_outch)(int c) = _nc_outch;
d59 2
a60 1
int delay_output(int ms)
d62 1
a62 1
	T((T_CALLED("delay_output(%d)"), ms));
d64 11
a74 4
	if (no_pad_char)
		napms(ms);
	else {
		register int	nullcount;
d76 1
a76 8
		nullcount = (ms * _nc_baudrate(ospeed)) / 10000;
		for (_nc_nulls_sent += nullcount; nullcount > 0; nullcount--)
			my_outch(PC);
		if (my_outch == _nc_outch)
			_nc_flush();
	}

	returnCode(OK);
d79 2
a80 1
int _nc_outch(int ch)
d83 1
a83 1
    	_nc_outchars++;
d86 12
a97 12
	if (SP != 0
	 && SP->_cleanup) {
		char tmp = ch;
		/*
		 * POSIX says write() is safe in a signal handler, but the
		 * buffered I/O is not.
		 */
		write(fileno(NC_OUTPUT), &tmp, 1);
	} else {
		putc(ch, NC_OUTPUT);
	}
	return OK;
d100 2
a101 1
int putp(const char *string)
d103 1
a103 1
	return tputs(string, 1, _nc_outch);
d106 2
a107 1
int tputs(const char *string, int affcnt, int (*outc)(int))
d109 3
a111 3
bool	always_delay;
bool	normal_delay;
int	number;
d113 1
a113 1
int	trailpad;
d117 1
a117 1
char	addrbuf[32];
d119 10
a128 13
	if (_nc_tracing & TRACE_TPUTS)
	{
		if (outc == _nc_outch)
			(void) strcpy(addrbuf, "_nc_outch");
		else
			(void) sprintf(addrbuf, "%p", outc);
		if (_nc_tputs_trace) {
			TR(TRACE_MAXIMUM, ("tputs(%s = %s, %d, %s) called", _nc_tputs_trace, _nc_visbuf(string), affcnt, addrbuf));
		}
		else {
			TR(TRACE_MAXIMUM, ("tputs(%s, %d, %s) called", _nc_visbuf(string), affcnt, addrbuf));
		}
		_nc_tputs_trace = (char *)NULL;
d130 2
d133 12
a144 12
	
	if (!VALID_STRING(string))
		return ERR;

	if (cur_term == 0) {
		always_delay = FALSE;
		normal_delay = TRUE;
	} else {
		always_delay = (string == bell) || (string == flash_screen);
		normal_delay =
		 !xon_xoff
		 && padding_baud_rate
d146 1
a146 1
		 && (SP == 0 || !(SP->_no_padding))
d148 23
a170 1
		 && (_nc_baudrate(ospeed) >= padding_baud_rate);
d173 28
a200 7
#ifdef BSD_TPUTS
	/*
	 * This ugly kluge deals with the fact that some ancient BSD programs
	 * (like nethack) actually do the likes of tputs("50") to get delays.
	 */
	trailpad = 0;
	if (isdigit(*string)) {
d202 2
a203 2
			trailpad = trailpad * 10 + (*string - '0');
			string++;
d205 1
a205 1
		trailpad *= 10;
d207 6
a213 6
			if (isdigit(*string)) {
				trailpad += (*string - '0');
				string++;
			}
			while (isdigit(*string))
				string++;
d216 7
a222 2
		if (*string == '*') {
			trailpad *= affcnt;
d224 1
a225 2
	}
#endif /* BSD_TPUTS */
d227 5
a231 54
	my_outch = outc;	/* redirect delay_output() */
	while (*string) {
		if (*string != '$')
			(*outc)(*string);
		else {
			string++;
			if (*string != '<') {
				(*outc)('$');
				if (*string)
				    (*outc)(*string);
			} else {
				bool mandatory;

				string++;
				if ((!isdigit(*string) && *string != '.') || !strchr(string, '>')) {
					(*outc)('$');
					(*outc)('<');
					continue;
				}

				number = 0;
				while (isdigit(*string)) {
					number = number * 10 + (*string - '0');
					string++;
				}
				number *= 10;
				if (*string == '.') {
					string++;
					if (isdigit(*string)) {
						number += (*string - '0');
						string++;
					}
					while (isdigit(*string))
						string++;
				}

				mandatory = FALSE;
				while (*string == '*' || *string == '/')
				{
					if (*string == '*') {
						number *= affcnt;
						string++;
					}
					else /* if (*string == '/') */ {
						mandatory = TRUE;
						string++;
					}
				}

				if (number > 0
				 && (always_delay
				  || normal_delay
				  || mandatory))
					delay_output(number/10);
d233 2
a234 2
			} /* endelse (*string == '<') */
		} /* endelse (*string == '$') */
d236 2
a237 2
		if (*string == '\0')
			break;
d239 2
a240 2
		string++;
	}
d243 6
a248 6
	/*
	 * Emit any BSD-style prefix padding that we've accumulated now.
	 */
	if (trailpad > 0
	 && (always_delay || normal_delay))
		delay_output(trailpad/10);
d251 2
a252 2
	my_outch = _nc_outch;
	return OK;
@


1.2
log
@ncurses-4.2-990301
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tputs.c,v 1.1 1999/01/18 19:10:20 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d51 1
a51 1
MODULE_ID("$From: lib_tputs.c,v 1.39 1999/02/25 10:44:29 tom Exp $")
d53 2
a54 1
#define OUTPUT ((SP != 0) ? SP->_ofp : stdout)
d56 1
a56 4
char PC;		/* used by termcap library */
speed_t ospeed;		/* used by termcap library */

int _nc_nulls_sent;	/* used by 'tack' program */
d73 1
a73 1
			(void) fflush(OUTPUT);
d85 11
a95 1
	putc(ch, OUTPUT);
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 1
a51 1
MODULE_ID("$From: lib_tputs.c,v 1.38 1999/01/10 00:57:41 tom Exp $")
d124 1
a124 1
	if (string == ABSENT_STRING || string == CANCELLED_STRING)
@

