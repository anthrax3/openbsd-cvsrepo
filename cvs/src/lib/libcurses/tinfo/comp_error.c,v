head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.32
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.28
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.24
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.26
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.18
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.18.16.55.54;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.22.18.05.43;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.22.18.01.50;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.11.28.17.49.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.13;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2005,2007 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Thomas E. Dickey                        1996-on                 *
 ****************************************************************************/

/*
 *	comp_error.c -- Error message routines
 *
 */

#include <curses.priv.h>

#include <tic.h>

MODULE_ID("$Id: comp_error.c,v 1.31 2007/04/21 23:38:32 tom Exp $")

NCURSES_EXPORT_VAR(bool) _nc_suppress_warnings = FALSE;
NCURSES_EXPORT_VAR(int) _nc_curr_line = 0; /* current line # in input */
NCURSES_EXPORT_VAR(int) _nc_curr_col = 0; /* current column # in input */

#define SourceName	_nc_globals.comp_sourcename
#define TermType	_nc_globals.comp_termtype

NCURSES_EXPORT(const char *)
_nc_get_source(void)
{
    return SourceName;
}

NCURSES_EXPORT(void)
_nc_set_source(const char *const name)
{
    SourceName = name;
}

NCURSES_EXPORT(void)
_nc_set_type(const char *const name)
{
    if (TermType == 0)
	TermType = typeMalloc(char, MAX_NAME_SIZE + 1);
    if (TermType != 0) {
	TermType[0] = '\0';
	if (name)
	    strncat(TermType, name, MAX_NAME_SIZE);
    }
}

NCURSES_EXPORT(void)
_nc_get_type(char *name)
{
#if NO_LEAKS
    if (name == 0 && TermType != 0) {
	FreeAndNull(TermType);
	return;
    }
#endif
    if (name != 0)
        strlcpy(name, TermType != 0 ? TermType : "", MAX_NAME_SIZE + 1);
}

static NCURSES_INLINE void
where_is_problem(void)
{
    fprintf(stderr, "\"%s\"", SourceName ? SourceName : "?");
    if (_nc_curr_line >= 0)
	fprintf(stderr, ", line %d", _nc_curr_line);
    if (_nc_curr_col >= 0)
	fprintf(stderr, ", col %d", _nc_curr_col);
    if (TermType != 0 && TermType[0] != '\0')
	fprintf(stderr, ", terminal '%s'", TermType);
    fputc(':', stderr);
    fputc(' ', stderr);
}

NCURSES_EXPORT(void)
_nc_warning(const char *const fmt,...)
{
    va_list argp;

    if (_nc_suppress_warnings)
	return;

    where_is_problem();
    va_start(argp, fmt);
    vfprintf(stderr, fmt, argp);
    fprintf(stderr, "\n");
    va_end(argp);
}

NCURSES_EXPORT(void)
_nc_err_abort(const char *const fmt,...)
{
    va_list argp;

    where_is_problem();
    va_start(argp, fmt);
    vfprintf(stderr, fmt, argp);
    fprintf(stderr, "\n");
    va_end(argp);
    exit(EXIT_FAILURE);
}

NCURSES_EXPORT(void)
_nc_syserr_abort(const char *const fmt,...)
{
    va_list argp;

    where_is_problem();
    va_start(argp, fmt);
    vfprintf(stderr, fmt, argp);
    fprintf(stderr, "\n");
    va_end(argp);

    /* If we're debugging, try to show where the problem occurred - this
     * will dump core.
     */
#if defined(TRACE) || !defined(NDEBUG)
    abort();
#else
    /* Dumping core in production code is not a good idea.
     */
    exit(EXIT_FAILURE);
#endif
}
@


1.5
log
@Use strlcpy() / strlcat() throughout.
@
text
@d1 1
a1 1
/*	$OpenBSD: comp_error.c,v 1.4 2001/01/22 18:05:43 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999,2000 Free Software Foundation, Inc.              *
d34 1
d46 1
a46 1
MODULE_ID("$From: comp_error.c,v 1.21 2000/12/10 02:55:07 tom Exp $")
d49 2
a50 4
NCURSES_EXPORT_VAR(int)
_nc_curr_line = 0;		/* current line # in input */
NCURSES_EXPORT_VAR(int)
_nc_curr_col = 0;		/* current column # in input */
d52 8
a59 2
     static const char *sourcename;
     static char termtype[MAX_NAME_SIZE + 1];
d64 1
a64 1
    sourcename = name;
d70 7
a76 4
    if (name)
	strlcpy(termtype, name, sizeof(termtype));
    else
    	termtype[0] = '\0';
d82 8
a89 1
    strlcpy(name, termtype, MAX_NAME_SIZE + 1);
d92 1
a92 1
static inline void
d95 1
a95 1
    fprintf(stderr, "\"%s\"", sourcename);
d100 2
a101 2
    if (termtype[0])
	fprintf(stderr, ", terminal '%s'", termtype);
@


1.4
log
@Missed changes in ncurses-5.2-20010114 commit
@
text
@d1 1
a1 1
/*	$OpenBSD: comp_error.c,v 1.2 1999/11/28 17:49:53 millert Exp $	*/
a64 1
    termtype[0] = '\0';
d66 3
a68 1
	strncat(termtype, name, sizeof(termtype) - 1);
d74 1
a74 1
    strcpy(name, termtype);
@


1.3
log
@Update to ncurses-5.2-20010114
@
text
@d45 1
a45 1
MODULE_ID("$From: comp_error.c,v 1.17 1999/10/30 23:00:16 tom Exp $")
d47 5
a51 3
bool	_nc_suppress_warnings = FALSE;
int	_nc_curr_line = 0;	/* current line # in input */
int	_nc_curr_col = 0;	/* current column # in input */
d53 2
a54 2
static const char *sourcename;
static char termtype[MAX_NAME_SIZE+1];
d56 2
a57 1
void _nc_set_source(const char *const name)
d59 1
a59 1
	sourcename = name;
d62 2
a63 1
void _nc_set_type(const char *const name)
d65 3
a67 4
	if (name)
		strlcpy( termtype, name, sizeof(termtype) );
	else
		termtype[0] = '\0';
d70 2
a71 1
void _nc_get_type(char *name)
d73 1
a73 1
	strcpy( name, termtype );
d76 2
a77 1
static inline void where_is_problem(void)
d79 9
a87 9
	fprintf (stderr, "\"%s\"", sourcename);
	if (_nc_curr_line >= 0)
		fprintf (stderr, ", line %d", _nc_curr_line);
	if (_nc_curr_col >= 0)
		fprintf (stderr, ", col %d", _nc_curr_col);
	if (termtype[0])
		fprintf (stderr, ", terminal '%s'", termtype);
	fputc(':', stderr);
	fputc(' ', stderr);
d90 2
a91 1
void _nc_warning(const char *const fmt, ...)
d93 1
a93 1
va_list argp;
d95 2
a96 2
	if (_nc_suppress_warnings)
	    return;
d98 5
a102 5
	where_is_problem();
	va_start(argp,fmt);
	vfprintf (stderr, fmt, argp);
	fprintf (stderr, "\n");
	va_end(argp);
d105 2
a106 2

void _nc_err_abort(const char *const fmt, ...)
d108 1
a108 1
va_list argp;
d110 6
a115 6
	where_is_problem();
	va_start(argp,fmt);
	vfprintf (stderr, fmt, argp);
	fprintf (stderr, "\n");
	va_end(argp);
	exit(EXIT_FAILURE);
d118 2
a119 2

void _nc_syserr_abort(const char *const fmt, ...)
d121 1
a121 1
va_list argp;
d123 5
a127 5
	where_is_problem();
	va_start(argp,fmt);
	vfprintf (stderr, fmt, argp);
	fprintf (stderr, "\n");
	va_end(argp);
d129 3
a131 3
	/* If we're debugging, try to show where the problem occurred - this
	 * will dump core.
	 */
d133 1
a133 1
	abort();
d135 3
a137 3
	/* Dumping core in production code is not a good idea.
	 */
	exit(EXIT_FAILURE);
@


1.2
log
@update to ncurses-5.0-19991127
@
text
@d1 1
a1 1
/*	$OpenBSD: comp_error.c,v 1.1 1999/01/18 19:10:13 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999 Free Software Foundation, Inc.                   *
a34 1

@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: comp_error.c,v 1.2 1998/08/03 17:02:37 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d46 1
a46 1
MODULE_ID("$From: comp_error.c,v 1.16 1998/08/01 23:39:51 tom Exp $")
d48 3
a50 3
bool	_nc_suppress_warnings;
int	_nc_curr_line;		/* current line # in input */
int	_nc_curr_col;		/* current column # in input */
@

