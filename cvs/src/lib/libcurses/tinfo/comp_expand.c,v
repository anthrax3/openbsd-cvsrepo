head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.28
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.24
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.26
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.18
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.12
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.8
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.6
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.4
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.02.01.29.11;	author pvalchev;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.17.19.16.59;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.22.18.01.51;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.03.11.21.03.57;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.03.02.06.23.28;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.13;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Thomas E. Dickey <dickey@@clark.net> 1998                        *
 ****************************************************************************/

#include <curses.priv.h>

#include <ctype.h>
#include <tic.h>

MODULE_ID("$Id: comp_expand.c,v 1.20 2008/08/16 19:29:42 tom Exp $")

static int
trailing_spaces(const char *src)
{
    while (*src == ' ')
	src++;
    return *src == 0;
}

/* this deals with differences over whether 0x7f and 0x80..0x9f are controls */
#define REALCTL(s) (UChar(*(s)) < 127 && iscntrl(UChar(*(s))))
#define REALPRINT(s) (UChar(*(s)) < 127 && isprint(UChar(*(s))))

NCURSES_EXPORT(char *)
_nc_tic_expand(const char *srcp, bool tic_format, int numbers)
{
    static char *buffer;
    static size_t length;

    int bufp;
    const char *str = VALID_STRING(srcp) ? srcp : "\0\0";
    bool islong = (strlen(str) > 3);
    size_t need = (2 + strlen(str)) * 4;
    int ch;

#if NO_LEAKS
    if (srcp == 0) {
	if (buffer != 0) {
	    FreeAndNull(buffer);
	    length = 0;
	}
	return 0;
    }
#endif
    if (buffer == 0 || need > length) {
	if ((buffer = typeRealloc(char, length = need, buffer)) == 0)
	      return 0;
    }

    bufp = 0;
    while ((ch = UChar(*str)) != 0) {
	if (ch == '%' && REALPRINT(str + 1)) {
	    buffer[bufp++] = *str++;
	    /*
	     * Though the character literals are more compact, most
	     * terminal descriptions use numbers and are not easy
	     * to read in character-literal form.
	     */
	    switch (numbers) {
	    case -1:
		if (str[0] == S_QUOTE
		    && str[1] != '\\'
		    && REALPRINT(str + 1)
		    && str[2] == S_QUOTE) {
		    snprintf(buffer + bufp, length - bufp, "{%d}", str[1]);
		    bufp += strlen(buffer + bufp);
		    str += 2;
		} else {
		    buffer[bufp++] = *str;
		}
		break;
		/*
		 * If we have a "%{number}", try to translate it into
		 * a "%'char'" form, since that will run a little faster
		 * when we're interpreting it.  Also, having one form
		 * for the constant makes it simpler to compare terminal
		 * descriptions.
		 */
	    case 1:
		if (str[0] == L_BRACE
		    && isdigit(UChar(str[1]))) {
		    char *dst = 0;
		    long value = strtol(str + 1, &dst, 0);
		    if (dst != 0
			&& *dst == R_BRACE
			&& value < 127
			&& value != '\\'	/* FIXME */
			&& isprint((int) value)) {
			ch = (int) value;
			buffer[bufp++] = S_QUOTE;
			if (ch == '\\'
			    || ch == S_QUOTE)
			    buffer[bufp++] = '\\';
			buffer[bufp++] = (char) ch;
			buffer[bufp++] = S_QUOTE;
			str = dst;
		    } else {
			buffer[bufp++] = *str;
		    }
		} else {
		    buffer[bufp++] = *str;
		}
		break;
	    default:
		buffer[bufp++] = *str;
		break;
	    }
	} else if (ch == 128) {
	    buffer[bufp++] = '\\';
	    buffer[bufp++] = '0';
	} else if (ch == '\033') {
	    buffer[bufp++] = '\\';
	    buffer[bufp++] = 'E';
	} else if (ch == '\\' && tic_format && (str == srcp || str[-1] != '^')) {
	    buffer[bufp++] = '\\';
	    buffer[bufp++] = '\\';
	} else if (ch == ' ' && tic_format && (str == srcp ||
					       trailing_spaces(str))) {
	    buffer[bufp++] = '\\';
	    buffer[bufp++] = 's';
	} else if ((ch == ',' || ch == ':' || ch == '^') && tic_format) {
	    buffer[bufp++] = '\\';
	    buffer[bufp++] = (char) ch;
	} else if (REALPRINT(str)
		   && (ch != ','
		       && ch != ':'
		       && !(ch == '!' && !tic_format)
		       && ch != '^'))
	    buffer[bufp++] = (char) ch;
#if 0				/* FIXME: this would be more readable (in fact the whole 'islong' logic should be removed) */
	else if (ch == '\b') {
	    buffer[bufp++] = '\\';
	    buffer[bufp++] = 'b';
	} else if (ch == '\f') {
	    buffer[bufp++] = '\\';
	    buffer[bufp++] = 'f';
	} else if (ch == '\t' && islong) {
	    buffer[bufp++] = '\\';
	    buffer[bufp++] = 't';
	}
#endif
	else if (ch == '\r' && (islong || (strlen(srcp) > 2 && str[1] == '\0'))) {
	    buffer[bufp++] = '\\';
	    buffer[bufp++] = 'r';
	} else if (ch == '\n' && islong) {
	    buffer[bufp++] = '\\';
	    buffer[bufp++] = 'n';
	}
#define UnCtl(c) ((c) + '@@')
	else if (REALCTL(str) && ch != '\\'
		 && (!islong || isdigit(UChar(str[1])))) {
	    (void) snprintf(buffer + bufp, length - bufp, "^%c", UnCtl(ch));
	    bufp += strlen(buffer + bufp);
	} else {
	    (void) snprintf(buffer + bufp, length - bufp, "\\%03o", ch);
	    bufp += strlen(buffer + bufp);
	}

	str++;
    }

    buffer[bufp] = '\0';
    return (buffer);
}
@


1.6
log
@safer snprintf construct with more paranoid length calculation
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: comp_expand.c,v 1.5 2003/03/17 19:16:59 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d40 1
a40 1
MODULE_ID("$From: comp_expand.c,v 1.15 2000/12/10 01:30:10 tom Exp $")
d51 2
a52 3
#define CHAR_OF(s) (*(unsigned const char *)(s))
#define REALCTL(s) (CHAR_OF(s) < 127 && iscntrl(CHAR_OF(s)))
#define REALPRINT(s) (CHAR_OF(s) < 127 && isprint(CHAR_OF(s)))
d55 1
a55 2
_nc_tic_expand
(const char *srcp, bool tic_format, int numbers)
d61 1
a61 1
    const char *str = VALID_STRING(srcp) ? srcp : "";
d66 9
d81 1
a81 1
    while ((ch = CharOf(*str)) != 0) {
d111 1
a111 1
		    && isdigit(CharOf(str[1]))) {
d124 1
a124 1
			buffer[bufp++] = ch;
d153 1
a153 1
	    buffer[bufp++] = ch;
d159 1
a159 1
	    buffer[bufp++] = ch;
d181 1
a181 1
		 && (!islong || isdigit(CharOf(str[1])))) {
@


1.5
log
@use snprintf throughout
@
text
@d1 1
a1 1
/*	$OpenBSD: comp_expand.c,v 1.4 2001/01/22 18:01:51 millert Exp $	*/
d176 1
a176 1
	    bufp += 2;
d179 1
a179 1
	    bufp += 4;
@


1.4
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: comp_expand.c,v 1.3 1999/03/11 21:03:57 millert Exp $	*/
d88 1
a88 1
		    sprintf(buffer + bufp, "{%d}", str[1]);
d175 1
a175 1
	    (void) sprintf(&buffer[bufp], "^%c", UnCtl(ch));
d178 1
a178 1
	    (void) sprintf(&buffer[bufp], "\\%03o", ch);
@


1.3
log
@ncurses-4.2-990307
@
text
@d1 1
a1 1
/*	$OpenBSD: comp_expand.c,v 1.2 1999/03/02 06:23:28 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d40 1
a40 1
MODULE_ID("$From: comp_expand.c,v 1.11 1999/03/07 00:51:07 tom Exp $")
d42 2
a43 1
static int trailing_spaces(const char *src)
d45 3
a47 3
	while (*src == ' ')
		src++;
	return *src == 0;
d55 3
a57 1
char *_nc_tic_expand(const char *srcp, bool tic_format, int numbers)
d59 2
a60 2
static char *	buffer;
static size_t	length;
d62 101
a162 9
int		bufp;
const char	*ptr, *str = VALID_STRING(srcp) ? srcp : "";
bool		islong = (strlen(str) > 3);
size_t		need = (2 + strlen(str)) * 4;
int		ch;

	if (buffer == 0 || need > length) {
		if ((buffer = typeRealloc(char, length = need, buffer)) == 0)
			return 0;
a163 96

	bufp = 0;
	ptr = str;
	while ((ch = (*str & 0xff)) != 0) {
		if (ch == '%' && REALPRINT(str+1)) {
			buffer[bufp++] = *str++;
			/*
			 * Though the character literals are more compact, most
			 * terminal descriptions use numbers and are not easy
			 * to read in character-literal form.
			 */
			switch (numbers) {
			case -1:
			    if (str[0] == S_QUOTE
			     && str[1] != '\\'
			     && REALPRINT(str+1)
			     && str[2] == S_QUOTE) {
				sprintf(buffer+bufp, "{%d}", str[1]);
				bufp += strlen(buffer+bufp);
				str += 2;
			    } else {
				buffer[bufp++] = *str;
			    }
			    break;
			/*
			 * If we have a "%{number}", try to translate it into
			 * a "%'char'" form, since that will run a little faster
			 * when we're interpreting it.  Also, having one form
			 * for the constant makes it simpler to compare terminal
			 * descriptions.
			 */
			case 1:
			    if (str[0] == L_BRACE
			     && isdigit(str[1])) {
				char *dst = 0;
				long value = strtol(str+1, &dst, 0);
				if (dst != 0
				 && *dst == R_BRACE
				 && value < 127
				 && value != '\\'	/* FIXME */
				 && isprint((int)value)) {
					ch = (int)value;
					buffer[bufp++] = S_QUOTE;
					if (ch == '\\'
					 || ch == S_QUOTE)
						buffer[bufp++] = '\\';
					buffer[bufp++] = ch;
					buffer[bufp++] = S_QUOTE;
					str = dst;
				} else {
					buffer[bufp++] = *str;
				}
			    } else {
				    buffer[bufp++] = *str;
			    }
			    break;
			default:
			    buffer[bufp++] = *str;
			    break;
			}
		}
		else if (ch == 128) {
			buffer[bufp++] = '\\';
			buffer[bufp++] = '0';
		}
		else if (ch == '\033') {
			buffer[bufp++] = '\\';
			buffer[bufp++] = 'E';
		}
		else if (ch == '\\' && tic_format && (str == srcp || str[-1] != '^')) {
			buffer[bufp++] = '\\';
			buffer[bufp++] = '\\';
		}
		else if (ch == ' ' && tic_format && (str == srcp || trailing_spaces(str))) {
			buffer[bufp++] = '\\';
			buffer[bufp++] = 's';
		}
		else if ((ch == ',' || ch == ':' || ch == '^') && tic_format) {
			buffer[bufp++] = '\\';
			buffer[bufp++] = ch;
		}
		else if (REALPRINT(str) && (ch != ',' && ch != ':' && !(ch == '!' && !tic_format) && ch != '^'))
			buffer[bufp++] = ch;
#if 0		/* FIXME: this would be more readable (in fact the whole 'islong' logic should be removed) */
		else if (ch == '\b') {
			buffer[bufp++] = '\\';
			buffer[bufp++] = 'b';
		}
		else if (ch == '\f') {
			buffer[bufp++] = '\\';
			buffer[bufp++] = 'f';
		}
		else if (ch == '\t' && islong) {
			buffer[bufp++] = '\\';
			buffer[bufp++] = 't';
		}
d165 7
a171 8
		else if (ch == '\r' && (islong || (strlen(srcp) > 2 && str[1] == '\0'))) {
			buffer[bufp++] = '\\';
			buffer[bufp++] = 'r';
		}
		else if (ch == '\n' && islong) {
			buffer[bufp++] = '\\';
			buffer[bufp++] = 'n';
		}
d173 8
a180 10
		else if (REALCTL(str) && ch != '\\' && (!islong || isdigit(str[1])))
		{
			(void) sprintf(&buffer[bufp], "^%c", UnCtl(ch));
			bufp += 2;
		}
		else
		{
			(void) sprintf(&buffer[bufp], "\\%03o", ch);
			bufp += 4;
		}
d182 2
a183 2
		str++;
	}
d185 2
a186 2
	buffer[bufp] = '\0';
	return(buffer);
@


1.2
log
@ncurses-4.2-990301
@
text
@d1 1
a1 1
/*	$OpenBSD: comp_expand.c,v 1.1 1999/01/18 19:10:13 millert Exp $	*/
d40 1
a40 1
MODULE_ID("$From: comp_expand.c,v 1.10 1999/02/23 23:14:59 tom Exp $")
d54 1
a54 1
char *_nc_tic_expand(const char *srcp, bool tic_format, bool numbers)
d78 1
a78 2
			 * to read in character-literal form.  This is the
			 * default option for tic/infocmp.
d80 6
a85 5
			if (numbers
			 && str[0] == S_QUOTE
			 && str[1] != '\\'
			 && REALPRINT(str+1)
			 && str[2] == S_QUOTE) {
d89 4
a92 1
			}
d100 3
a102 3
			else if (!numbers
			 && str[0] == L_BRACE
			 && isdigit(str[1])) {
d121 7
a127 2
			} else {
				buffer[bufp++] = *str;
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: comp_expand.c,v 1.5 1998/10/31 06:30:28 millert Exp $	*/
d40 1
a40 1
MODULE_ID("$From: comp_expand.c,v 1.9 1998/09/26 13:41:40 tom Exp $")
d66 1
a66 1
		if ((buffer = (char *)_nc_doalloc(buffer, length = need)) == 0)
@

