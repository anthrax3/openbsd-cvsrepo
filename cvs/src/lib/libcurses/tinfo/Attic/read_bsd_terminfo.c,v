head	1.19;
access;
symbols
	OPENBSD_5_8:1.18.0.26
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.18
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.22
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.20
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.16
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.14
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.12
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.14.0.28
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.24
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.22
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.20
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.18
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.16
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.14
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.12
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.10
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.8
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.6
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.19
date	2015.12.03.11.29.55;	author nicm;	state dead;
branches;
next	1.18;
commitid	5hoMCFvEUcTQqvPZ;

1.18
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.28.23.22.45;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.18.13.51.44;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.08.28.11.43.50;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.17.21.56.24;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.01.52.40;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.18.03.46.12;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.17.21.57.57;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.26;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.08.22.47.02;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.02.04.10.47;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.08.06.26.25;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.12.28.23.15.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.03.02.06.23.29;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.02.01.20.55.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.01.23.18.31.02;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.01.22.04.50.43;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.22;	author millert;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Instead of using our own custom BDB terminfo databases, use the ncurses
files in /usr/share/terminfo/*. This removes a large difference from
upstream ncurses and other systems.

ok millert
@
text
@/*	$OpenBSD: read_bsd_terminfo.c,v 1.18 2010/01/12 23:22:06 nicm Exp $	*/

/*
 * Copyright (c) 1998, 1999, 2000 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <curses.priv.h>
#include <tic.h>
#include <term.h>	/* lines, columns, cur_term */
#include <term_entry.h>

#define	_PATH_TERMINFO	"/usr/share/misc/terminfo"

/* Function prototypes for private functions, */
static int _nc_lookup_bsd_terminfo_entry(const char *const, const char *const, TERMTYPE *);

/*
 * Look up ``tn'' in the BSD terminfo.db file and fill in ``tp''
 * with the info we find there.
 * Returns 1 on success, 0 on failure.
 */
int
_nc_read_bsd_terminfo_entry(tn, filename, tp)
    const char *const tn;
    char *const filename;
    TERMTYPE *const tp;
{
    char **fname, *p;
    char   envterm[PATH_MAX];		/* local copy of $TERMINFO */
    char   hometerm[PATH_MAX];		/* local copy of $HOME/.terminfo */
    char  *pathvec[4];			/* list of possible terminfo files */
    size_t len;

    fname = pathvec;
    /* $TERMINFO may hold a path to a terminfo file */
    if (use_terminfo_vars() && (p = getenv("TERMINFO")) != NULL) {
	len = strlcpy(envterm, p, sizeof(envterm));
	if (len < sizeof(envterm))
	    *fname++ = envterm;
    }

    /* Also check $HOME/.terminfo if it exists */
    if (use_terminfo_vars() && (p = getenv("HOME")) != NULL && *p != '\0') {
	len = snprintf(hometerm, sizeof(hometerm), "%s/.terminfo", p);
	if (len > 0 && len < sizeof(hometerm))
	    *fname++ = hometerm;
    }

    /* Finally we check the system terminfo file */
    *fname++ = _PATH_TERMINFO;
    *fname = NULL;

    /*
     * Lookup ``tn'' in each possible terminfo file until
     * we find it or reach the end.
     */
    for (fname = pathvec; *fname; fname++) {
	if (_nc_lookup_bsd_terminfo_entry(tn, *fname, tp) == 1) {
	    /* Set copyout parameter and return */
	    (void)strlcpy(filename, *fname, PATH_MAX);
	    return (1);
	}
    }
    return (0);
}

/*
 * Given a path /path/to/terminfo/X/termname, look up termname
 * /path/to/terminfo.db and fill in ``tp'' with the info we find there.
 * Returns 1 on success, 0 on failure.
 */
int
_nc_read_bsd_terminfo_file(filename, tp)
    const char *const filename;
    TERMTYPE *const tp;
{
    char path[PATH_MAX];		/* path to terminfo.db */
    char *tname;			/* name of terminal to look up */
    char *p;

    (void)strlcpy(path, filename, sizeof(path));

    /* Split filename into path and term name components. */
    if ((tname = strrchr(path, '/')) == NULL)
	return (0);
    *tname++ = '\0';
    if ((p = strrchr(path, '/')) == NULL)
	return (0);
    *p = '\0';

    return (_nc_lookup_bsd_terminfo_entry(tname, path, tp));
}

/*
 * Look up ``tn'' in the BSD terminfo file ``filename'' and fill in
 * ``tp'' with the info we find there.
 * Returns 1 on success, 0 on failure.
 */
static int
_nc_lookup_bsd_terminfo_entry(tn, filename, tp)
    const char *const tn;
    const char *const filename;
    TERMTYPE *const tp;
{
    char  *pathvec[2];
    char  *capbuf, *cptr, *infobuf, *iptr, *ifind, *istart, ch;
    int    error;
    size_t len, clen, cnamelen;

    pathvec[0] = (char *)filename;
    pathvec[1] = NULL;
    capbuf = NULL;
    infobuf = NULL;

    _nc_set_source(filename);		/* For useful error messages */

    /* Don't prepend any hardcoded entries. */
    (void) cgetset(NULL);

    /* Lookup tn in 'filename' */
    error = cgetent(&capbuf, pathvec, (char *)tn);      
    if (error == 0) {
	/*
	 * To make the terminfo parser happy we need to, as a minimum,
	 * 1) convert ':' separators to ','
	 * 2) add a newline after the name field
	 * 3) add a newline at the end of the entry
	 */

	/* Add space for 2 extra newlines and the final NUL */
	infobuf = malloc(strlen(capbuf) + 3);
	if (infobuf == NULL) {
	    error = TRUE;
	    goto done;
	}

	/* Copy name and aliases, adding a newline. */
	cptr = strchr(capbuf, ':');
	if (cptr == NULL) {
	    error = TRUE;
	    goto done;
	}
	len = cptr - capbuf;
	memcpy(infobuf, capbuf, len);
	iptr = infobuf + len;
	*iptr++ = ',';
	*iptr++ = '\n';
	istart = iptr;

	/*
	 * cap_mkdb(1) expands use=, but ncurses doesn't know this and uses the
	 * last defined cap instead of the first. Step though capbuf skipping
	 * duplicates and replacing ':' with ','.
	 */
	cptr++;
	while (*cptr != '\0') {
	    /* Find the length of the source cap. */
	    clen = 0;
	    while (cptr[clen] != '\0' && cptr[clen] != ':') {
		ch = cptr[clen++];
		if ((ch == '^' || ch == '\\') && cptr[clen] != '\0')
		    clen++;
	    }
	    if (clen == 0) {	/* ignore empty caps */
		if (*cptr == ':')
		    cptr++;
		continue;
	    }
		
	    /* Find the length of the cap name. */
	    cnamelen = strcspn(cptr, "=@@#");
	    if (cnamelen > clen)
		cnamelen = clen;
		
	    /* Is the cap already in the output buffer? */
	    ifind = istart;
	    while (iptr - ifind > cnamelen) {
		if (memcmp(ifind, cptr, cnamelen) == 0
		    && strchr(",=@@#", ifind[cnamelen]) != NULL)
		    break;
			
		/*
		 * Move to the next cap, in the output buffer this is
		 * terminated by an unescaped comma.
		 */
		while (ifind != iptr && *ifind != ',') {
		    ch = *ifind++;
		    if ((ch == '^' || ch == '\\') && ifind != iptr)
		        ifind++;
		}
		if (ifind != iptr && *ifind == ',')
		    ifind++;
	    }
	    
	    /* Copy if it isn't already there, replacing ':' -> ','. */
	    if (iptr - ifind <= cnamelen) {
		while (clen-- != 0) {
		    switch (ch = *cptr++) {
		    case '^':
		    case '\\':
		        *iptr++ = ch;
			if (clen != 0) {
			    clen--;
			    *iptr++ = *cptr++;
			}
			break;
		    case ':':
			*iptr++ = ',';
			break;
		    default:
			*iptr++ = ch;
			break;
		    }
		}
		if (*cptr == ':')
		    *iptr++ = ',';
	    } else
		cptr += clen;
	    if (*cptr == ':')
		cptr++;
	}
	*iptr++ = '\n';
	*iptr = '\0';

	/*
	 * Parse the terminfo entry; sets _nc_head as a side effect.
	 * (_nc_head is actually a linked list but since we only parse
	 *  a single entry we know there is only one entry in the list).
	 */
	_nc_read_entry_source(NULL, infobuf, FALSE, FALSE, NULLHOOK);
	if (_nc_head == 0) {
	    error = TRUE;
	    goto done;
	}

        /* Save term entry and free from _nc_head list. */
        *tp = _nc_head->tterm;
	_nc_free_entry(_nc_head, tp);
	_nc_head = _nc_tail = NULL;
    }

done:
    if (capbuf)
	free(capbuf);
    if (infobuf)
	free(infobuf);
    cgetclose();

    return ((error == 0));
}
@


1.18
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.17 2009/10/28 23:22:45 schwarze Exp $	*/
@


1.17
log
@a few leftovers from yesterday's SCCS/RCS-ID removal;
survived a full make build on i386;
"sure" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.16 2009/10/18 13:51:44 nicm Exp $	*/
d248 4
a251 7
	/*
	 * Save term entry and prevent _nc_free_entries() from freeing
	 * up the string table (since we use it in tp).
	 */
	*tp = _nc_head->tterm;
	_nc_head->tterm.str_table = NULL;
	_nc_free_entries(_nc_head);
@


1.16
log
@terminfo supports the use= capability (tc= in termcap), to allow one
description to reference another. If this is used, any capabilities in the
parent terminal description should override those pulled in by use=.

When cap_mkdb is building terminfo.db, it concatenates any use= references
together so each description is self-contained. However, the ncurses terminfo
implementation doesn't expect this - it assumes it will have to resolve use=
itself, and picks the last entry in the description created by cap_mkdb rather
than the first.

read_bsd_terminfo.c already makes some transformations to make ncurses happy
with the format in the database. So, extend this to trim out duplicate entries,
leaving only the first.

(Interestingly, ncurses already has code to correctly handle merged tc=
capabilities in termcap.db (used if terminfo.db is missing).)

"go ahead" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.15 2009/08/28 11:43:50 nicm Exp $	*/
a17 4

#ifndef lint
static const char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.15 2009/08/28 11:43:50 nicm Exp $";
#endif
@


1.15
log
@Change cap_mkdb and curses to be a better about reformatting terminfo entries
into the cap database format and back: rather than replacing all colons with
commas, only touch real separators (skip those with a leading \ or ^) and
replace an unadorned colon with a literal "\072".

Fixes problems with quite a few caps including acsc in "screen" (:s instead of
,s) and setab/initc in "xterm-256color" (wrongly concatenated together).

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.14 2003/06/17 21:56:24 millert Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.14 2003/06/17 21:56:24 millert Exp $";
d122 1
a122 1
    char  *capbuf, *cptr, *infobuf, *iptr, ch;
d124 1
a124 1
    size_t len;
d164 1
d166 5
a170 1
	/* Copy the rest of capbuf, converting ':' -> ',' */
d173 36
a208 13
	    switch (ch = *cptr++) {
	    case '^':
	    case '\\':
		*iptr++ = ch;
		if (*cptr != '\0')
		    *iptr++ = *cptr++;
		break;
	    case ':':
		*iptr++ = ',';
		break;
	    default:
		*iptr++ = ch;
		break;
d210 27
@


1.14
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.13 2003/06/03 01:52:40 millert Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.13 2003/06/03 01:52:40 millert Exp $";
d122 1
a122 1
    char  *capbuf, *cptr, *infobuf, *iptr, lastc;
d166 10
a175 3
	for (++cptr, lastc = '\0'; *cptr; cptr++) {
	    /* XXX - somewhat simplistic */
	    if (*cptr == ':' && lastc != '\\')
d177 5
a181 3
	    else
		*iptr++ = *cptr;
	    lastc = *cptr;
@


1.13
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.12 2003/03/18 03:46:12 millert Exp $	*/
d10 7
a16 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
 * FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.12 2003/03/18 03:46:12 millert Exp $";
@


1.12
log
@make rcsid const to pass gcc -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.11 2003/03/17 21:57:57 millert Exp $	*/
a4 1
 * All rights reserved.
d6 3
a8 10
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d10 7
a16 10
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.11 2003/03/17 21:57:57 millert Exp $";
@


1.11
log
@Deal with snprintf returning -1
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.10 2002/02/16 21:27:26 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.10 2002/02/16 21:27:26 millert Exp $";
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.9 2000/10/08 22:47:02 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.9 2000/10/08 22:47:02 millert Exp $";
d72 1
a72 1
	if (len < sizeof(hometerm))
@


1.9
log
@update to ncurses-5.1-20001007
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.8 2000/08/02 04:10:47 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.8 2000/08/02 04:10:47 millert Exp $";
d42 1
a42 1
static int _nc_lookup_bsd_terminfo_entry __P((const char *const, const char *const, TERMTYPE *));
@


1.8
log
@$HOME paranoia: never use getenv("HOME") w/o checking for NULL and non-zero
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.7 2000/01/08 06:26:25 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.7 2000/01/08 06:26:25 millert Exp $";
d63 1
a63 1
    if (!issetugid() && (p = getenv("TERMINFO")) != NULL) {
d70 1
a70 1
    if (!issetugid() && (p = getenv("HOME")) != NULL && *p != '\0') {
@


1.7
log
@Enable extended cap names.  Previously, the only allowed cap names were
those explicitly listed in term.h.  With extended names, non-standard
terminfo/termcap capabilities are passed through for those programs that
want to use them (screen for instance).  This changes struct term and
therefor requires a library major increment.  It also requires changing
how the terminfo.db file is parsed.  Previously, it was parsed like:
foreach cap (all_possible_caps) if ( is_listed(cap) ) add_cap(cap)
However, now that we can't know the set of all possible capabilities
we need to convert the buffer we get back from cgetent into one that
looks more like a terminfo entry and pass it through to the ncurses
terminfo parsing routines.  This also enables tic's -x flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.6 1999/12/28 23:15:16 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.6 1999/12/28 23:15:16 millert Exp $";
d70 1
a70 1
    if (!issetugid() && (p = getenv("HOME")) != NULL) {
@


1.6
log
@When reading an entry from terminfo.db, do not try to set a capability
to be 'not present' since that has already been done for us in _nc_init_entry().
This fixes some core dumps caused by a divide by 0 bug deep within ncurses
that resulted from using the old way to specify that a capability was
'not present'.
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.5 1999/03/02 06:23:29 millert Exp $	*/
d4 1
a4 2
 * Copyright (c) 1998, 1999 Todd C. Miller <Todd.Miller@@courtesan.com>
 * Copyright (c) 1996 SigmaSoft, Th. Lockert <tholo@@sigmasoft.com>
d15 1
a15 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by SigmaSoft, Th.  Lockert.
 * 4. The name of the authors may not be used to endorse or promote products
d21 1
a21 1
 * THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
d31 1
a31 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.5 1999/03/02 06:23:29 millert Exp $";
d133 3
a135 4
    char  *capbuf, *p;
    char   namecpy[MAX_NAME_SIZE+1];
    long   num;
    int    i;
a136 1
    capbuf = NULL;
d139 2
d142 3
a144 1
    /* Don't prepent any hardcoded entries. */
d147 22
a168 12
    /* Lookup tn in filename */
    i = cgetent(&capbuf, pathvec, (char *)tn);      
    if (i == 0) {
	_nc_init_entry(tp);

	/* Set terminal name(s) */
	if ((p = strchr(capbuf, ':')) != NULL)
	    *p = '\0';
	if ((tp->str_table = tp->term_names = strdup(capbuf)) == NULL) {
	    if (capbuf)
		free(capbuf);
	    return (0);
d170 36
a205 26
	_nc_set_type(_nc_first_name(tp->term_names));
	if (p)
	    *p = ':';

	/* Check for overly-long names and aliases */
	(void)strlcpy(namecpy, tp->term_names, sizeof(namecpy));
	if ((p = strrchr(namecpy, '|')) != (char *)NULL)
	    *p = '\0';
	p = strtok(namecpy, "|");
	if (strlen(p) > MAX_ALIAS)
	    _nc_warning("primary name may be too long");
	while ((p = strtok((char *)NULL, "|")) != (char *)NULL)
	    if (strlen(p) > MAX_ALIAS)
		_nc_warning("alias `%s' may be too long", p);

	/* Copy existing capabilities */
	for_each_boolean(i, tp)
	    if (cgetcap(capbuf, (char *)boolnames[i], ':') != NULL)
		tp->Booleans[i] = TRUE;
	for_each_number(i, tp)
	    if (cgetnum(capbuf, (char *)numnames[i], &num) == 0)
		tp->Numbers[i] = (short)num;
	for_each_string(i, tp)
	    if (cgetstr(capbuf, (char *)strnames[i], &p) >= 0)
		tp->Strings[i] = p;
	i = 0;
d208 1
a208 2
    /* We are done with the returned getcap buffer now; free it */
    cgetclose();
d211 3
d215 1
a215 1
    return ((i == 0));
@


1.5
log
@ncurses-4.2-990301
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.4 1999/02/01 20:55:41 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.4 1999/02/01 20:55:41 millert Exp $";
d177 3
a179 5
	/* Copy capabilities */
	for_each_boolean(i, tp) {
	    if (cgetcap(capbuf, (char *)boolnames[i], ':') == NULL)
		tp->Booleans[i] = FALSE;
	    else
d181 5
a185 11
	}
	for_each_number(i, tp) {
	    if (cgetnum(capbuf, (char *)numnames[i], &num) < 0)
		tp->Numbers[i] = 0;
	    else
		tp->Numbers[i] = (int)num;
	}
	for_each_string(i, tp) {
	    if (cgetstr(capbuf, (char *)strnames[i], &p) < 0)
		tp->Strings[i] = NULL;
	    else
a186 1
	}
@


1.4
log
@Bracket protos for _nc_read_bsd_terminfo_entry and _nc_read_bsd_terminfo_file
with #ifdef __OpenBSD__ to make it obvious they are OpenBSD extensions.
Update copyright years in tinfo/read_bsd_terminfo.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.3 1999/01/23 18:31:02 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.3 1999/01/23 18:31:02 millert Exp $";
d178 1
a178 1
	for (i = 0 ; i < BOOLCOUNT ; i++) {
d184 1
a184 1
	for (i = 0 ; i < NUMCOUNT ; i++) {
d190 1
a190 1
	for (i = 0 ; i < STRCOUNT ; i++) {
@


1.3
log
@make _nc_read_file_entry() look in terminfo.db too.  Makes the -A and -B flags of infocmp more useful.
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.2 1999/01/22 04:50:43 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
d35 1
a35 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.2 1999/01/22 04:50:43 millert Exp $";
d95 1
a95 1
    return(0);
@


1.2
log
@Move call to _nc_read_bsd_terminfo_entry() to _nc_read_entry() so reading
terminfo.db is transparent.  This requires us to be able to tell which
of the entries in pathvec held the terminfo entry.  To make that work
we only pass one pathname to cgetent(3) at a time.  This might be a
slight performance hit but should not be noticable in normal use.
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.1 1999/01/18 19:10:22 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.1 1999/01/18 19:10:22 millert Exp $";
a42 1
#define PVECSIZ 3 * 2
d45 3
d59 1
a59 4
    char  *p;
    char  *capbuf;
    char **fname;
    int    i, pathcnt;
d62 1
a62 3
    char  *pathvec[PVECSIZ];		/* list of possible terminfo files */
    char   namecpy[MAX_NAME_SIZE+1];
    long   num;
a65 1
    pathcnt = 1;
a69 1
	    pathcnt++;
a70 1
	    *fname++ = NULL;
a76 1
	    pathcnt++;
a77 1
	    *fname++ = NULL;
a83 3
    /* Don't prepent any hardcoded entries. */
    (void) cgetset(NULL);

d85 2
a86 4
     * We can't pass a normal vector in to cgetent(3) because
     * we need to know which of the paths in pathvec we actually
     * used (for the filename copyout parameter).
     * Therefore, we kludge things a bit...
d88 3
a90 6
    for (fname = pathvec, i = 1; fname != pathvec + pathcnt * 2 && i != 0; ) {
	capbuf = NULL;
	i = cgetent(&capbuf, fname, (char *)tn);      
	    
	if (i == 0) {
	    /* Set copyout parameter and init term description */
d92 32
a123 1
	    _nc_init_entry(tp);
d125 49
a173 14
	    /* Set terminal name(s) */
	    if ((p = strchr(capbuf, ':')) != NULL)
		*p = '\0';
	    if ((tp->str_table = tp->term_names = strdup(capbuf)) == NULL)
		return (0);
	    _nc_set_type(_nc_first_name(tp->term_names));
	    if (p)
		*p = ':';

	    /* Truncate overly-long names and aliases */
	    (void)strlcpy(namecpy, tp->term_names, sizeof(namecpy));
	    if ((p = strrchr(namecpy, '|')) != (char *)NULL)
		*p = '\0';
	    p = strtok(namecpy, "|");
d175 8
a182 25
		_nc_warning("primary name may be too long");
	    while ((p = strtok((char *)NULL, "|")) != (char *)NULL)
		if (strlen(p) > MAX_ALIAS)
		    _nc_warning("alias `%s' may be too long", p);

	    /* Copy capabilities */
	    for (i = 0 ; i < BOOLCOUNT ; i++) {
		if (cgetcap(capbuf, (char *)boolnames[i], ':') == NULL)
		    tp->Booleans[i] = FALSE;
		else
		    tp->Booleans[i] = TRUE;
	    }
	    for (i = 0 ; i < NUMCOUNT ; i++) {
		if (cgetnum(capbuf, (char *)numnames[i], &num) < 0)
		    tp->Numbers[i] = 0;
		else
		    tp->Numbers[i] = (int)num;
	    }
	    for (i = 0 ; i < STRCOUNT ; i++) {
		if (cgetstr(capbuf, (char *)strnames[i], &p) < 0)
		    tp->Strings[i] = NULL;
		else
		    tp->Strings[i] = p;
	    }
	    i = 0;
d184 14
a197 2
	/* Increment by two since we have that NULL in there */
	fname += 2;
d199 4
a202 5
	/* We are done with the returned getcap buffer now; free it */
	cgetclose();
	if (capbuf)
	    free(capbuf);
    }
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.6 1998/11/19 18:08:54 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.6 1998/11/19 18:08:54 millert Exp $";
d43 1
a43 1
#define PVECSIZ 32
d52 4
a55 3
_nc_read_bsd_terminfo_entry(tn, tp)
     const char *tn;
     TERMTYPE *const tp;
d58 1
a58 1
    char  *dummy;
d60 1
a60 1
    int    i;
d63 1
a63 1
    char  *pathvec[PVECSIZ];		/* to point to names in pathbuf */
d69 1
d74 1
d76 1
d83 1
d85 1
d88 1
a88 1
    /* Finally we check the system terminfo file and mark the end of vector */
d90 1
a90 1
    *fname = (char *) 0;
d92 1
d94 30
a123 23
    dummy = NULL;
    i = cgetent(&dummy, pathvec, (char *)tn);      
	
    if (i == 0) {
	_nc_init_entry(tp);

	/* Set terminal name(s) */
	if ((p = strchr(dummy, ':')) != NULL)
	    *p = '\0';
	if ((tp->str_table = tp->term_names = strdup(dummy)) == NULL)
	    return (0);
	_nc_set_type(_nc_first_name(tp->term_names));
	if (p)
	    *p = ':';

	/* Truncate overly-long names and aliases */
	(void)strlcpy(namecpy, tp->term_names, sizeof(namecpy));
	if ((p = strrchr(namecpy, '|')) != (char *)NULL)
	    *p = '\0';
	p = strtok(namecpy, "|");
	if (strlen(p) > MAX_ALIAS)
	    _nc_warning("primary name may be too long");
	while ((p = strtok((char *)NULL, "|")) != (char *)NULL)
d125 28
a152 1
		_nc_warning("alias `%s' may be too long", p);
d154 4
a157 20
	/* Copy capabilities */
	for (i = 0 ; i < BOOLCOUNT ; i++) {
	    if (cgetcap(dummy, (char *)boolnames[i], ':') == NULL)
		tp->Booleans[i] = FALSE;
	    else
		tp->Booleans[i] = TRUE;
	}
	for (i = 0 ; i < NUMCOUNT ; i++) {
	    if (cgetnum(dummy, (char *)numnames[i], &num) < 0)
		tp->Numbers[i] = 0;
	    else
		tp->Numbers[i] = (int)num;
	}
	for (i = 0 ; i < STRCOUNT ; i++) {
	    if (cgetstr(dummy, (char *)strnames[i], &p) < 0)
		tp->Strings[i] = NULL;
	    else
		tp->Strings[i] = p;
	}
	i = 0;
a158 4

    /* We are done with the returned getcap buffer now; free it */
    if (dummy)
	free(dummy);
@

