head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.34
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.32
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.28
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.24
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.38
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.34
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.32
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.30
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.28
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.26
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.24
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.22
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.20
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.18
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.16
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.14
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.12
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.10
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.8
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.6
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2001.01.22.18.01.53;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.08.22.47.01;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.10.01.35.04;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.02.22.06.51;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.11.28.17.49.54;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.08.22.17.42.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.07.04.12.43.16;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.06.14.02.29.16;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.03.02.06.23.29;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.01.22.04.50.43;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.19;	author millert;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Thomas E. Dickey                        1996-on                 *
 ****************************************************************************/

/*
 * Terminal setup routines common to termcap and terminfo:
 *
 *		use_env(bool)
 *		setupterm(char *, int, int *)
 */

#include <curses.priv.h>
#include <tic.h>		/* for MAX_NAME_SIZE */
#include <term_entry.h>

#if SVR4_TERMIO && !defined(_POSIX_SOURCE)
#define _POSIX_SOURCE
#endif

#if HAVE_LOCALE_H
#include <locale.h>
#endif

#include <term.h>		/* lines, columns, cur_term */

MODULE_ID("$Id: lib_setup.c,v 1.111 2008/08/03 22:42:33 tom Exp $")

/****************************************************************************
 *
 * Terminal size computation
 *
 ****************************************************************************/

#if HAVE_SIZECHANGE
# if !defined(sun) || !TERMIOS
#  if HAVE_SYS_IOCTL_H
#   include <sys/ioctl.h>
#  endif
# endif
#endif

#if NEED_PTEM_H
 /* On SCO, they neglected to define struct winsize in termios.h -- it's only
  * in termio.h and ptem.h (the former conflicts with other definitions).
  */
# include <sys/stream.h>
# include <sys/ptem.h>
#endif

#if HAVE_LANGINFO_CODESET
#include <langinfo.h>
#endif

/*
 * SCO defines TIOCGSIZE and the corresponding struct.  Other systems (SunOS,
 * Solaris, IRIX) define TIOCGWINSZ and struct winsize.
 */
#ifdef TIOCGSIZE
# define IOCTL_WINSIZE TIOCGSIZE
# define STRUCT_WINSIZE struct ttysize
# define WINSIZE_ROWS(n) (int)n.ts_lines
# define WINSIZE_COLS(n) (int)n.ts_cols
#else
# ifdef TIOCGWINSZ
#  define IOCTL_WINSIZE TIOCGWINSZ
#  define STRUCT_WINSIZE struct winsize
#  define WINSIZE_ROWS(n) (int)n.ws_row
#  define WINSIZE_COLS(n) (int)n.ws_col
# endif
#endif

/*
 * Reduce explicit use of "cur_term" global variable.
 */
#undef CUR
#define CUR termp->type.

/*
 * Wrap global variables in this module.
 */
#if USE_REENTRANT
NCURSES_EXPORT(char *)
NCURSES_PUBLIC_VAR(ttytype) (void)
{
    static char empty[] = "";
    return cur_term ? cur_term->type.term_names : empty;
}
NCURSES_EXPORT(int *)
_nc_ptr_Lines(void)
{
    return ptrLines();
}
NCURSES_EXPORT(int)
NCURSES_PUBLIC_VAR(LINES) (void)
{
    return *_nc_ptr_Lines();
}
NCURSES_EXPORT(int *)
_nc_ptr_Cols(void)
{
    return ptrCols();
}
NCURSES_EXPORT(int)
NCURSES_PUBLIC_VAR(COLS) (void)
{
    return *_nc_ptr_Cols();
}
NCURSES_EXPORT(int)
NCURSES_PUBLIC_VAR(TABSIZE) (void)
{
    return SP ? SP->_TABSIZE : 8;
}
#else
NCURSES_EXPORT_VAR(char) ttytype[NAMESIZE] = "";
NCURSES_EXPORT_VAR(int) LINES = 0;
NCURSES_EXPORT_VAR(int) COLS = 0;
NCURSES_EXPORT_VAR(int) TABSIZE = 0;
#endif

#if NCURSES_EXT_FUNCS
NCURSES_EXPORT(int)
set_tabsize(int value)
{
    int code = OK;
#if USE_REENTRANT
    if (SP) {
	SP->_TABSIZE = value;
    } else {
	code = ERR;
    }
#else
    TABSIZE = value;
#endif
    return code;
}
#endif

#if USE_SIGWINCH
/*
 * If we have a pending SIGWINCH, set the flag in each screen.
 */
NCURSES_EXPORT(int)
_nc_handle_sigwinch(SCREEN *sp)
{
    SCREEN *scan;

    if (_nc_globals.have_sigwinch) {
	_nc_globals.have_sigwinch = 0;

	for (each_screen(scan)) {
	    scan->_sig_winch = TRUE;
	}
    }

    return (sp ? sp->_sig_winch : 0);
}

#endif

NCURSES_EXPORT(void)
use_env(bool f)
{
    T((T_CALLED("use_env()")));
    _nc_prescreen.use_env = f;
    returnVoid;
}

NCURSES_EXPORT(void)
_nc_get_screensize(SCREEN *sp, int *linep, int *colp)
/* Obtain lines/columns values from the environment and/or terminfo entry */
{
    TERMINAL *termp = cur_term;
    int my_tabsize;

    /* figure out the size of the screen */
    T(("screen size: terminfo lines = %d columns = %d", lines, columns));

    if (!_nc_prescreen.use_env) {
	*linep = (int) lines;
	*colp = (int) columns;
    } else {			/* usually want to query LINES and COLUMNS from environment */
	int value;

	*linep = *colp = 0;

	/* first, look for environment variables */
	if ((value = _nc_getenv_num("LINES")) > 0) {
	    *linep = value;
	}
	if ((value = _nc_getenv_num("COLUMNS")) > 0) {
	    *colp = value;
	}
	T(("screen size: environment LINES = %d COLUMNS = %d", *linep, *colp));

#ifdef __EMX__
	if (*linep <= 0 || *colp <= 0) {
	    int screendata[2];
	    _scrsize(screendata);
	    *colp = screendata[0];
	    *linep = screendata[1];
	    T(("EMX screen size: environment LINES = %d COLUMNS = %d",
	       *linep, *colp));
	}
#endif
#if HAVE_SIZECHANGE
	/* if that didn't work, maybe we can try asking the OS */
	if (*linep <= 0 || *colp <= 0) {
	    if (isatty(cur_term->Filedes)) {
		STRUCT_WINSIZE size;

		errno = 0;
		do {
		    if (ioctl(cur_term->Filedes, IOCTL_WINSIZE, &size) < 0
			&& errno != EINTR)
			goto failure;
		} while
		    (errno == EINTR);

		/*
		 * Solaris lets users override either dimension with an
		 * environment variable.
		 */
		if (*linep <= 0)
		    *linep = (sp != 0 && sp->_filtered) ? 1 : WINSIZE_ROWS(size);
		if (*colp <= 0)
		    *colp = WINSIZE_COLS(size);
	    }
	    /* FALLTHRU */
	  failure:;
	}
#endif /* HAVE_SIZECHANGE */

	/* if we can't get dynamic info about the size, use static */
	if (*linep <= 0) {
	    *linep = (int) lines;
	}
	if (*colp <= 0) {
	    *colp = (int) columns;
	}

	/* the ultimate fallback, assume fixed 24x80 size */
	if (*linep <= 0) {
	    *linep = 24;
	}
	if (*colp <= 0) {
	    *colp = 80;
	}

	/*
	 * Put the derived values back in the screen-size caps, so
	 * tigetnum() and tgetnum() will do the right thing.
	 */
	lines = (short) (*linep);
	columns = (short) (*colp);
    }

    T(("screen size is %dx%d", *linep, *colp));

    if (VALID_NUMERIC(init_tabs))
	my_tabsize = (int) init_tabs;
    else
	my_tabsize = 8;

#if USE_REENTRANT
    if (sp != 0)
	sp->_TABSIZE = my_tabsize;
#else
    TABSIZE = my_tabsize;
#endif
    T(("TABSIZE = %d", TABSIZE));
}

#if USE_SIZECHANGE
NCURSES_EXPORT(void)
_nc_update_screensize(SCREEN *sp)
{
    TERMINAL *termp = cur_term;
    int old_lines = lines;
    int new_lines;
    int old_cols = columns;
    int new_cols;

    _nc_get_screensize(sp, &new_lines, &new_cols);

    /*
     * See is_term_resized() and resizeterm().
     * We're doing it this way because those functions belong to the upper
     * ncurses library, while this resides in the lower terminfo library.
     */
    if (sp != 0
	&& sp->_resize != 0) {
	if ((new_lines != old_lines) || (new_cols != old_cols))
	    sp->_resize(new_lines, new_cols);
	sp->_sig_winch = FALSE;
    }
}
#endif

/****************************************************************************
 *
 * Terminal setup
 *
 ****************************************************************************/

#define ret_error(code, fmt, arg)	if (errret) {\
					    *errret = code;\
					    returnCode(ERR);\
					} else {\
					    fprintf(stderr, fmt, arg);\
					    exit(EXIT_FAILURE);\
					}

#define ret_error0(code, msg)		if (errret) {\
					    *errret = code;\
					    returnCode(ERR);\
					} else {\
					    fprintf(stderr, msg);\
					    exit(EXIT_FAILURE);\
					}

#if USE_DATABASE || USE_TERMCAP
/*
 * Return 1 if entry found, 0 if not found, -1 if database not accessible,
 * just like tgetent().
 */
static int
grab_entry(const char *const tn, TERMTYPE *const tp)
{
    char filename[PATH_MAX];
    int status = _nc_read_entry(tn, filename, tp);

    /*
     * If we have an entry, force all of the cancelled strings to null
     * pointers so we don't have to test them in the rest of the library.
     * (The terminfo compiler bypasses this logic, since it must know if
     * a string is cancelled, for merging entries).
     */
    if (status == TGETENT_YES) {
	unsigned n;
	for_each_boolean(n, tp) {
	    if (!VALID_BOOLEAN(tp->Booleans[n]))
		tp->Booleans[n] = FALSE;
	}
	for_each_string(n, tp) {
	    if (tp->Strings[n] == CANCELLED_STRING)
		tp->Strings[n] = ABSENT_STRING;
	}
    }
    return (status);
}
#endif

/*
**	do_prototype()
**
**	Take the real command character out of the CC environment variable
**	and substitute it in for the prototype given in 'command_character'.
*/
static void
do_prototype(TERMINAL * termp)
{
    unsigned i;
    char CC;
    char proto;
    char *tmp;

    if ((tmp = getenv("CC")) != 0) {
	if ((CC = *tmp) != 0) {
	    proto = *command_character;

	    for_each_string(i, &(termp->type)) {
		for (tmp = termp->type.Strings[i]; *tmp; tmp++) {
		    if (*tmp == proto)
			*tmp = CC;
		}
	    }
	}
    }
}

/*
 * Find the locale which is in effect.
 */
NCURSES_EXPORT(char *)
_nc_get_locale(void)
{
    char *env;
#if HAVE_LOCALE_H
    /*
     * This is preferable to using getenv() since it ensures that we are using
     * the locale which was actually initialized by the application.
     */
    env = setlocale(LC_CTYPE, 0);
#else
    if (((env = getenv("LC_ALL")) != 0 && *env != '\0')
	|| ((env = getenv("LC_CTYPE")) != 0 && *env != '\0')
	|| ((env = getenv("LANG")) != 0 && *env != '\0')) {
	;
    }
#endif
    T(("_nc_get_locale %s", _nc_visbuf(env)));
    return env;
}

/*
 * Check if we are running in a UTF-8 locale.
 */
NCURSES_EXPORT(int)
_nc_unicode_locale(void)
{
    int result = 0;
#if HAVE_LANGINFO_CODESET
    char *env = nl_langinfo(CODESET);
    result = !strcmp(env, "UTF-8");
    T(("_nc_unicode_locale(%s) ->%d", env, result));
#else
    char *env = _nc_get_locale();
    if (env != 0) {
	if (strstr(env, ".UTF-8") != 0) {
	    result = 1;
	    T(("_nc_unicode_locale(%s) ->%d", env, result));
	}
    }
#endif
    return result;
}

#define CONTROL_N(s) ((s) != 0 && strstr(s, "\016") != 0)
#define CONTROL_O(s) ((s) != 0 && strstr(s, "\017") != 0)

/*
 * Check for known broken cases where a UTF-8 locale breaks the alternate
 * character set.
 */
NCURSES_EXPORT(int)
_nc_locale_breaks_acs(TERMINAL * termp)
{
    char *env;

    if ((env = getenv("NCURSES_NO_UTF8_ACS")) != 0) {
	return atoi(env);
    } else if ((env = getenv("TERM")) != 0) {
	if (strstr(env, "linux"))
	    return 1;		/* always broken */
	if (strstr(env, "screen") != 0
	    && ((env = getenv("TERMCAP")) != 0
		&& strstr(env, "screen") != 0)
	    && strstr(env, "hhII00") != 0) {
	    if (CONTROL_N(enter_alt_charset_mode) ||
		CONTROL_O(enter_alt_charset_mode) ||
		CONTROL_N(set_attributes) ||
		CONTROL_O(set_attributes))
		return 1;
	}
    }
    return 0;
}

/*
 * This entrypoint is called from tgetent() to allow a special case of reusing
 * the same TERMINAL data (see comment).
 */
NCURSES_EXPORT(int)
_nc_setupterm(NCURSES_CONST char *tname, int Filedes, int *errret, bool reuse)
{
    TERMINAL *termp;
    int status;

    START_TRACE();
    T((T_CALLED("setupterm(%s,%d,%p)"), _nc_visbuf(tname), Filedes, errret));

    if (tname == 0) {
	tname = getenv("TERM");
	if (tname == 0 || *tname == '\0') {
	    ret_error0(TGETENT_ERR, "TERM environment variable not set.\n");
	}
    }

    if (strlen(tname) > MAX_NAME_SIZE) {
	ret_error(TGETENT_ERR,
		  "TERM environment must be <= %d characters.\n",
		  MAX_NAME_SIZE);
    }

    T(("your terminal name is %s", tname));

    /*
     * Allow output redirection.  This is what SVr3 does.  If stdout is
     * directed to a file, screen updates go to standard error.
     */
    if (Filedes == STDOUT_FILENO && !isatty(Filedes))
	Filedes = STDERR_FILENO;

    /*
     * Check if we have already initialized to use this terminal.  If so, we
     * do not need to re-read the terminfo entry, or obtain TTY settings.
     *
     * This is an improvement on SVr4 curses.  If an application mixes curses
     * and termcap calls, it may call both initscr and tgetent.  This is not
     * really a good thing to do, but can happen if someone tries using ncurses
     * with the readline library.  The problem we are fixing is that when
     * tgetent calls setupterm, the resulting Ottyb struct in cur_term is
     * zeroed.  A subsequent call to endwin uses the zeroed terminal settings
     * rather than the ones saved in initscr.  So we check if cur_term appears
     * to contain terminal settings for the same output file as our current
     * call - and copy those terminal settings.  (SVr4 curses does not do this,
     * however applications that are working around the problem will still work
     * properly with this feature).
     */
    if (reuse
	&& (termp = cur_term) != 0
	&& termp->Filedes == Filedes
	&& termp->_termname != 0
	&& !strcmp(termp->_termname, tname)
	&& _nc_name_match(termp->type.term_names, tname, "|")) {
	T(("reusing existing terminal information and mode-settings"));
    } else {

	termp = typeCalloc(TERMINAL, 1);

	if (termp == 0) {
	    ret_error0(TGETENT_ERR,
		       "Not enough memory to create terminal structure.\n");
	}
#if USE_DATABASE || USE_TERMCAP
	status = grab_entry(tname, &termp->type);
#else
	status = TGETENT_NO;
#endif

	/* try fallback list if entry on disk */
	if (status != TGETENT_YES) {
	    const TERMTYPE *fallback = _nc_fallback(tname);

	    if (fallback) {
		termp->type = *fallback;
		status = TGETENT_YES;
	    }
	}

	if (status != TGETENT_YES) {
	    del_curterm(termp);
	    if (status == TGETENT_ERR) {
		ret_error0(status, "terminals database is inaccessible\n");
	    } else if (status == TGETENT_NO) {
		ret_error(status, "'%s': unknown terminal type.\n", tname);
	    }
	}
#if !USE_REENTRANT
	strncpy(ttytype, termp->type.term_names, NAMESIZE - 1);
	ttytype[NAMESIZE - 1] = '\0';
#endif

	termp->Filedes = Filedes;
	termp->_termname = strdup(tname);

	set_curterm(termp);

	if (command_character && getenv("CC"))
	    do_prototype(termp);

	/*
	 * If an application calls setupterm() rather than initscr() or
	 * newterm(), we will not have the def_prog_mode() call in
	 * _nc_setupscreen().  Do it now anyway, so we can initialize the
	 * baudrate.
	 */
	if (isatty(Filedes)) {
	    def_prog_mode();
	    baudrate();
	}
    }

    /*
     * We should always check the screensize, just in case.
     */
    _nc_get_screensize(SP, ptrLines(), ptrCols());

    if (errret)
	*errret = TGETENT_YES;

    if (generic_type) {
	ret_error(TGETENT_NO, "'%s': I need something more specific.\n", tname);
    }
    if (hard_copy) {
	ret_error(TGETENT_YES, "'%s': I can't handle hardcopy terminals.\n", tname);
    }
    returnCode(OK);
}

/*
 *	setupterm(termname, Filedes, errret)
 *
 *	Find and read the appropriate object file for the terminal
 *	Make cur_term point to the structure.
 */
NCURSES_EXPORT(int)
setupterm(NCURSES_CONST char *tname, int Filedes, int *errret)
{
    return _nc_setupterm(tname, Filedes, errret, FALSE);
}
@


1.11
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.10 2000/10/08 22:47:01 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999,2000 Free Software Foundation, Inc.              *
d34 1
d52 4
d58 1
a58 1
MODULE_ID("$From: lib_setup.c,v 1.64 2000/12/10 02:55:07 tom Exp $")
d82 4
d104 74
a177 1
static int _use_env = TRUE;
d179 12
a190 1
static void do_prototype(void);
d195 3
a197 1
    _use_env = f;
d200 2
a201 9
NCURSES_EXPORT_VAR(int)
LINES = 0;
NCURSES_EXPORT_VAR(int)
COLS = 0;
NCURSES_EXPORT_VAR(int)
TABSIZE = 0;

     static void
       _nc_get_screensize(int *linep, int *colp)
d204 3
d210 1
a210 1
    if (!_use_env) {
d256 1
a256 1
		    *linep = WINSIZE_ROWS(size);
d274 1
a274 1
	if (*linep <= 0 || *colp <= 0) {
d276 2
d292 1
a292 1
	TABSIZE = (int) init_tabs;
d294 8
a301 1
	TABSIZE = 8;
a302 1

d307 1
a307 1
_nc_update_screensize(void)
d309 5
a313 1
    int my_lines, my_cols;
d315 13
a327 3
    _nc_get_screensize(&my_lines, &my_cols);
    if (SP != 0 && SP->_resize != 0)
	SP->_resize(my_lines, my_cols);
d353 5
a357 1
#if USE_DATABASE
d359 1
a359 2
grab_entry(const char *const tn, TERMTYPE * const tp)
/* return 1 if entry found, 0 if not found, -1 if database not accessible */
d362 1
a362 21
    int status;

    /*
     * $TERM shouldn't contain pathname delimiters.
     */
    if (strchr(tn, '/'))
	return 0;

    if ((status = _nc_read_entry(tn, filename, tp)) != 1) {

#if !PURE_TERMINFO
	/*
	 * Try falling back on the termcap file.
	 * Note:  allowing this call links the entire terminfo/termcap
	 * compiler into the startup code.  It's preferable to build a
	 * real terminfo database and use that.
	 */
	status = _nc_read_termcap_entry(tn, tp);
#endif /* PURE_TERMINFO */

    }
d370 2
a371 2
    if (status == 1) {
	int n;
d385 77
a461 1
NCURSES_EXPORT_VAR(char) ttytype[NAMESIZE] = "";
d464 2
a465 5
 *	setupterm(termname, Filedes, errret)
 *
 *	Find and read the appropriate object file for the terminal
 *	Make cur_term point to the structure.
 *
d467 23
d491 4
d496 1
a496 2
setupterm
(NCURSES_CONST char *tname, int Filedes, int *errret)
d498 1
a498 1
    struct term *term_ptr;
d501 1
d507 1
a507 1
	    ret_error0(-1, "TERM environment variable not set.\n");
d510 1
d512 2
a513 1
	ret_error(-1, "TERM environment must be <= %d characters.\n",
d519 6
a524 1
    term_ptr = typeCalloc(TERMINAL, 1);
d526 33
a558 5
    if (term_ptr == 0) {
	ret_error0(-1, "Not enough memory to create terminal structure.\n");
    }
#if USE_DATABASE
    status = grab_entry(tname, &term_ptr->type);
d560 1
a560 1
    status = 0;
d563 9
a571 3
    /* try fallback list if entry on disk */
    if (status != 1) {
	const TERMTYPE *fallback = _nc_fallback(tname);
d573 7
a579 3
	if (fallback) {
	    term_ptr->type = *fallback;
	    status = 1;
d581 4
a584 7
    }

    if (status == -1) {
	ret_error0(-1, "terminals database is inaccessible\n");
    } else if (status == 0) {
	ret_error(0, "'%s': unknown terminal type.\n", tname);
    }
d586 2
a587 17
    /*
     * Improve on SVr4 curses.  If an application mixes curses and termcap
     * calls, it may call both initscr and tgetent.  This is not really a
     * good thing to do, but can happen if someone tries using ncurses with
     * the readline library.  The problem we are fixing is that when
     * tgetent calls setupterm, the resulting Ottyb struct in cur_term is
     * zeroed.  A subsequent call to endwin uses the zeroed terminal
     * settings rather than the ones saved in initscr.  So we check if
     * cur_term appears to contain terminal settings for the same output
     * file as our current call - and copy those terminal settings.  (SVr4
     * curses does not do this, however applications that are working
     * around the problem will still work properly with this feature).
     */
    if (cur_term != 0) {
	if (cur_term->Filedes == Filedes)
	    term_ptr->Ottyb = cur_term->Ottyb;
    }
d589 1
a589 1
    set_curterm(term_ptr);
d591 2
a592 2
    if (command_character && getenv("CC"))
	do_prototype();
d594 11
a604 1
    strlcpy(ttytype, cur_term->type.term_names, NAMESIZE);
d607 1
a607 3
     * Allow output redirection.  This is what SVr3 does.
     * If stdout is directed to a file, screen updates go
     * to standard error.
d609 1
a609 5
    if (Filedes == STDOUT_FILENO && !isatty(Filedes))
	Filedes = STDERR_FILENO;
    cur_term->Filedes = Filedes;

    _nc_get_screensize(&LINES, &COLS);
d612 1
a612 3
	*errret = 1;

    T((T_CREATE("screen %s %dx%d"), tname, LINES, COLS));
d615 1
a615 1
	ret_error(0, "'%s': I need something more specific.\n", tname);
d618 1
a618 1
	ret_error(1, "'%s': I can't handle hardcopy terminals.\n", tname);
d624 7
a630 9
**	do_prototype()
**
**	Take the real command character out of the CC environment variable
**	and substitute it in for the prototype given in 'command_character'.
**
*/

static void
do_prototype(void)
d632 1
a632 15
    int i;
    char CC;
    char proto;
    char *tmp;

    tmp = getenv("CC");
    CC = *tmp;
    proto = *command_character;

    for_each_string(i, &(cur_term->type)) {
	for (tmp = cur_term->type.Strings[i]; *tmp; tmp++) {
	    if (*tmp == proto)
		*tmp = CC;
	}
    }
@


1.10
log
@update to ncurses-5.1-20001007
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.9 2000/03/10 01:35:04 millert Exp $	*/
d53 1
a53 1
MODULE_ID("$From: lib_setup.c,v 1.60 2000/09/02 18:13:12 tom Exp $")
d99 1
a99 1
void
d105 6
a110 1
int LINES = 0, COLS = 0, TABSIZE = 0;
d112 2
a113 2
static void
_nc_get_screensize(int *linep, int *colp)
d143 1
a143 1
		    *linep, *colp));
d175 6
a180 5
	if (*linep <= 0 || *colp <= 0)
	    if (lines > 0 && columns > 0) {
		*linep = (int) lines;
		*colp = (int) columns;
	    }
d207 1
a207 1
void
d276 1
a276 1
	for_each_boolean(n, tp)
d278 3
a280 2
	    tp->Booleans[n] = FALSE;
	for_each_string(n, tp)
d282 2
a283 1
	    tp->Strings[n] = ABSENT_STRING;
d289 1
a289 1
char ttytype[NAMESIZE] = "";
d299 3
a301 2
int
setupterm(NCURSES_CONST char *tname, int Filedes, int *errret)
d316 1
a316 1
	    MAX_NAME_SIZE);
@


1.9
log
@Update to ncurses-5.0-20000304
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.8 2000/01/02 22:06:51 millert Exp $	*/
d47 1
a47 1
#if defined(SVR4_TERMIO) && !defined(_POSIX_SOURCE)
d53 1
a53 1
MODULE_ID("$From: lib_setup.c,v 1.59 2000/02/13 01:01:26 tom Exp $")
d250 1
a250 1
#ifndef PURE_TERMINFO
@


1.8
log
@+ corrected conversion from terminfo rs2 to termcap rs (cf: 980704)
+ make conversion to termcap ug (underline glitch) more consistently applied.
+ modify read_termtype(), fixing 'toe', which could dump core when it
found an incomplete entry such as "dumb" because it did not
initialize its buffer for _nc_read_file_entry().
+ use explicit VALID_NUMERIC() checks in a few places that had been
overlooked, and add a check to ensure that init_tabs is nonzero,
to avoid divide-by-zero (reported by Todd C Miller).
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.7 1999/11/28 17:49:54 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998-2000 Free Software Foundation, Inc.                   *
d53 1
a53 1
MODULE_ID("$From: lib_setup.c,v 1.58 2000/01/01 16:46:57 tom Exp $")
@


1.7
log
@update to ncurses-5.0-19991127
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.6 1999/08/22 17:42:37 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999 Free Software Foundation, Inc.                   *
a35 1

d44 1
a44 1
#include <tic.h>	/* for MAX_NAME_SIZE */
d51 1
a51 1
#include <term.h>	/* lines, columns, cur_term */
d53 1
a53 1
MODULE_ID("$From: lib_setup.c,v 1.56 1999/10/30 23:00:16 tom Exp $")
d99 2
a100 1
void use_env(bool f)
d102 1
a102 1
	_use_env = f;
d107 2
a108 1
static void _nc_get_screensize(int *linep, int *colp)
d111 10
a120 2
	/* figure out the size of the screen */
	T(("screen size: terminfo lines = %d columns = %d", lines, columns));
d122 3
a124 4
	if (!_use_env)
	{
	    *linep = (int)lines;
	    *colp  = (int)columns;
d126 4
a129 14
	else	/* usually want to query LINES and COLUMNS from environment */
	{
	    int value;

	    *linep = *colp = 0;

	    /* first, look for environment variables */
	    if ((value = _nc_getenv_num("LINES")) > 0) {
		    *linep = value;
	    }
	    if ((value = _nc_getenv_num("COLUMNS")) > 0) {
		    *colp = value;
	    }
	    T(("screen size: environment LINES = %d COLUMNS = %d",*linep,*colp));
d132 8
a139 8
	    if (*linep <= 0 || *colp <= 0)
	    {
		int screendata[2];
		_scrsize(screendata);
		*colp  = screendata[0];
		*linep = screendata[1];
	    	T(("EMX screen size: environment LINES = %d COLUMNS = %d",*linep,*colp));
	    }
d142 21
a162 26
	    /* if that didn't work, maybe we can try asking the OS */
	    if (*linep <= 0 || *colp <= 0)
	    {
		if (isatty(cur_term->Filedes))
		{
		    STRUCT_WINSIZE size;

		    errno = 0;
		    do {
			if (ioctl(cur_term->Filedes, IOCTL_WINSIZE, &size) < 0
				&& errno != EINTR)
			    goto failure;
		    } while
			(errno == EINTR);

		    /*
		     * Solaris lets users override either dimension with an
		     * environment variable.
		     */
		    if (*linep <= 0)
			*linep = WINSIZE_ROWS(size);
		    if (*colp <= 0)
			*colp  = WINSIZE_COLS(size);
		}
		/* FALLTHRU */
	    failure:;
d164 3
d169 5
a173 13
	    /* if we can't get dynamic info about the size, use static */
	    if (*linep <= 0 || *colp <= 0)
		if (lines > 0 && columns > 0)
		{
		    *linep = (int)lines;
		    *colp  = (int)columns;
		}

	    /* the ultimate fallback, assume fixed 24x80 size */
	    if (*linep <= 0 || *colp <= 0)
	    {
		*linep = 24;
		*colp  = 80;
d176 4
a179 6
	    /*
	     * Put the derived values back in the screen-size caps, so
	     * tigetnum() and tgetnum() will do the right thing.
	     */
	    lines   = (short)(*linep);
	    columns = (short)(*colp);
d182 15
a196 7
	T(("screen size is %dx%d", *linep, *colp));

	if (init_tabs != -1)
		TABSIZE = (int)init_tabs;
	else
		TABSIZE = 8;
	T(("TABSIZE = %d", TABSIZE));
d201 2
a202 1
void _nc_update_screensize(void)
d204 1
a204 1
	int my_lines, my_cols;
d206 3
a208 3
	_nc_get_screensize(&my_lines, &my_cols);
	if (SP != 0 && SP->_resize != 0)
		SP->_resize(my_lines, my_cols);
d235 2
a236 1
static int grab_entry(const char *const tn, TERMTYPE *const tp)
d239 2
a240 2
	char	filename[PATH_MAX];
	int	status;
d242 5
a246 5
	/*
	 * $TERM shouldn't contain pathname delimiters.
	 */
	if (strchr(tn, '/'))
		return 0;
d248 1
a248 1
	if ((status = _nc_read_entry(tn, filename, tp)) != 1) {
d251 7
a257 7
		/*
		 * Try falling back on the termcap file.
		 * Note:  allowing this call links the entire terminfo/termcap
		 * compiler into the startup code.  It's preferable to build a
		 * real terminfo database and use that.
		 */
		status = _nc_read_termcap_entry(tn, tp);
d260 1
a260 1
	}
d262 16
a277 16
	/*
	 * If we have an entry, force all of the cancelled strings to null
	 * pointers so we don't have to test them in the rest of the library.
	 * (The terminfo compiler bypasses this logic, since it must know if
	 * a string is cancelled, for merging entries).
	 */
	if (status == 1) {
		int n;
		for_each_boolean(n,tp)
			if (!VALID_BOOLEAN(tp->Booleans[n]))
				tp->Booleans[n] = FALSE;
		for_each_string(n,tp)
			if (tp->Strings[n] == CANCELLED_STRING)
				tp->Strings[n] = ABSENT_STRING;
	}
	return(status);
d291 2
a292 1
int setupterm(NCURSES_CONST char *tname, int Filedes, int *errret)
d294 2
a295 2
struct term	*term_ptr;
int status;
d297 1
a297 1
	T((T_CALLED("setupterm(%s,%d,%p)"), _nc_visbuf(tname), Filedes, errret));
d299 4
a302 9
	if (tname == 0) {
		tname = getenv("TERM");
		if (tname == 0 || *tname == '\0') {
			ret_error0(-1, "TERM environment variable not set.\n");
                }
	}
	if (strlen(tname) > MAX_NAME_SIZE) {
		ret_error(-1, "TERM environment must be <= %d characters.\n",
		    MAX_NAME_SIZE);
d304 5
d310 1
a310 1
	T(("your terminal name is %s", tname));
d312 1
a312 1
	term_ptr = typeCalloc(TERMINAL, 1);
d314 3
a316 3
	if (term_ptr == 0) {
		ret_error0(-1, "Not enough memory to create terminal structure.\n") ;
        }
d318 1
a318 1
	status = grab_entry(tname, &term_ptr->type);
d320 1
a320 1
	status = 0;
d323 64
a386 69
	/* try fallback list if entry on disk */
	if (status != 1)
	{
	    const TERMTYPE	*fallback = _nc_fallback(tname);

	    if (fallback)
	    {
		term_ptr->type = *fallback;
		status = 1;
	    }
	}

	if (status == -1)
	{
		ret_error0(-1, "terminals database is inaccessible\n");
	}
	else if (status == 0)
	{
		ret_error(0, "'%s': unknown terminal type.\n", tname);
	}

	/*
	 * Improve on SVr4 curses.  If an application mixes curses and termcap
	 * calls, it may call both initscr and tgetent.  This is not really a
	 * good thing to do, but can happen if someone tries using ncurses with
	 * the readline library.  The problem we are fixing is that when
	 * tgetent calls setupterm, the resulting Ottyb struct in cur_term is
	 * zeroed.  A subsequent call to endwin uses the zeroed terminal
	 * settings rather than the ones saved in initscr.  So we check if
	 * cur_term appears to contain terminal settings for the same output
	 * file as our current call - and copy those terminal settings.  (SVr4
	 * curses does not do this, however applications that are working
	 * around the problem will still work properly with this feature).
	 */
	if (cur_term != 0) {
		if (cur_term->Filedes == Filedes)
			term_ptr->Ottyb = cur_term->Ottyb;
	}

	set_curterm(term_ptr);

	if (command_character  &&  getenv("CC"))
		do_prototype();

	strlcpy(ttytype, cur_term->type.term_names, NAMESIZE);

	/*
	 * Allow output redirection.  This is what SVr3 does.
	 * If stdout is directed to a file, screen updates go
	 * to standard error.
	 */
	if (Filedes == STDOUT_FILENO && !isatty(Filedes))
	    Filedes = STDERR_FILENO;
	cur_term->Filedes = Filedes;

	_nc_get_screensize(&LINES, &COLS);

	if (errret)
		*errret = 1;

	T((T_CREATE("screen %s %dx%d"), tname, LINES, COLS));

	if (generic_type) {
		ret_error(0, "'%s': I need something more specific.\n", tname);
	}
	if (hard_copy) {
		ret_error(1, "'%s': I can't handle hardcopy terminals.\n", tname);
	}
	returnCode(OK);
d400 13
a412 14
int	i;
char	CC;
char	proto;
char    *tmp;

	tmp = getenv("CC");
	CC = *tmp;
	proto = *command_character;

	for_each_string(i, &(cur_term->type)) {
	    for (tmp = cur_term->type.Strings[i]; *tmp; tmp++) {
		if (*tmp == proto)
		    *tmp = CC;
	    }
d414 1
@


1.6
log
@ncurses-5.0-990821
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.5 1999/07/04 12:43:16 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d54 1
a54 1
MODULE_ID("$From: lib_setup.c,v 1.55 1999/08/21 23:06:08 tom Exp $")
d105 1
a105 1
int LINES, COLS, TABSIZE;
d285 1
a285 1
char ttytype[NAMESIZE];
@


1.5
log
@ncurses-5.0-990703 -- better support for mixing termcap and terminfo/curses routines
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.4 1999/06/14 02:29:16 millert Exp $	*/
d54 1
a54 1
MODULE_ID("$From: lib_setup.c,v 1.54 1999/07/04 01:37:32 tom Exp $")
d245 6
@


1.4
log
@ncurses-5.0-990612
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.3 1999/03/02 06:23:29 millert Exp $	*/
d54 1
a54 1
MODULE_ID("$From: lib_setup.c,v 1.53 1999/06/12 23:12:12 tom Exp $")
d339 18
@


1.3
log
@ncurses-4.2-990301
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.2 1999/01/22 04:50:43 millert Exp $	*/
d54 1
a54 1
MODULE_ID("$From: lib_setup.c,v 1.51 1999/02/27 22:13:00 tom Exp $")
d294 1
a294 1
	T((T_CALLED("setupterm(\"%s\",%d,%p)"), tname, Filedes, errret));
@


1.2
log
@Move call to _nc_read_bsd_terminfo_entry() to _nc_read_entry() so reading
terminfo.db is transparent.  This requires us to be able to tell which
of the entries in pathvec held the terminfo entry.  To make that work
we only pass one pathname to cgetent(3) at a time.  This might be a
slight performance hit but should not be noticable in normal use.
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.1 1999/01/18 19:10:19 millert Exp $	*/
d46 1
d54 1
a54 1
MODULE_ID("$From: lib_setup.c,v 1.48 1999/01/02 23:11:56 tom Exp $")
d267 2
a268 2
		unsigned n;
		for (n = 0; n < BOOLCOUNT; n++)
d271 1
a271 1
		for (n = 0; n < STRCOUNT; n++)
d327 1
a327 1
		memcpy(&term_ptr->type, fallback, sizeof(TERMTYPE));
d384 1
a384 1
int	i, j;
d393 5
a397 7
	for (i=0; i < STRCOUNT; i++) {
		j = 0;
		while (cur_term->type.Strings[i][j]) {
			if (cur_term->type.Strings[i][j] == proto)
				cur_term->type.Strings[i][j] = CC;
			j++;
		}
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_setup.c,v 1.4 1998/10/31 06:30:30 millert Exp $	*/
d243 1
a243 2
	int	status = 0;
	int	_nc_read_bsd_terminfo_entry(const char *, TERMTYPE *); /* XXX */
d245 1
a245 5
#ifdef __OpenBSD__
	status = _nc_read_bsd_terminfo_entry(tn, tp);
#endif /* __OpenBSD__ */

	if (status != 1 && (status = _nc_read_entry(tn, filename, tp)) != 1) {
@

