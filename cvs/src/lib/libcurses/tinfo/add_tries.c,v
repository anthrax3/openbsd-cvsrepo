head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.30
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.32
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.28
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.24
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.26
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.18
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.22
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.20
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.38
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.34
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.32
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.30
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.28
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.26
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.24
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.22
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.20
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.18
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.16
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.14
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.22.18.01.50;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.26.16.45.03;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.12;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2005,2006 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Thomas E. Dickey            1998-on                             *
 ****************************************************************************/

/*
**	add_tries.c
**
**	Add keycode/string to tries-tree.
**
*/

#include <curses.priv.h>

MODULE_ID("$Id: add_tries.c,v 1.8 2006/12/30 23:15:26 tom Exp $")

#define SET_TRY(dst,src) if ((dst->ch = *src++) == 128) dst->ch = '\0'
#define CMP_TRY(a,b) ((a)? (a == b) : (b == 128))

NCURSES_EXPORT(int)
_nc_add_to_try(TRIES ** tree, const char *str, unsigned code)
{
    TRIES *ptr, *savedptr;
    unsigned const char *txt = (unsigned const char *) str;

    T((T_CALLED("_nc_add_to_try(%p, %s, %u)"), *tree, _nc_visbuf(str), code));
    if (txt == 0 || *txt == '\0' || code == 0)
	returnCode(ERR);

    if ((*tree) != 0) {
	ptr = savedptr = (*tree);

	for (;;) {
	    unsigned char cmp = *txt;

	    while (!CMP_TRY(ptr->ch, cmp)
		   && ptr->sibling != 0)
		ptr = ptr->sibling;

	    if (CMP_TRY(ptr->ch, cmp)) {
		if (*(++txt) == '\0') {
		    ptr->value = code;
		    returnCode(OK);
		}
		if (ptr->child != 0)
		    ptr = ptr->child;
		else
		    break;
	    } else {
		if ((ptr->sibling = typeCalloc(TRIES, 1)) == 0) {
		    returnCode(ERR);
		}

		savedptr = ptr = ptr->sibling;
		SET_TRY(ptr, txt);
		ptr->value = 0;

		break;
	    }
	}			/* end for (;;) */
    } else {			/* (*tree) == 0 :: First sequence to be added */
	savedptr = ptr = (*tree) = typeCalloc(TRIES, 1);

	if (ptr == 0) {
	    returnCode(ERR);
	}

	SET_TRY(ptr, txt);
	ptr->value = 0;
    }

    /* at this point, we are adding to the try.  ptr->child == 0 */

    while (*txt) {
	ptr->child = typeCalloc(TRIES, 1);

	ptr = ptr->child;

	if (ptr == 0) {
	    while ((ptr = savedptr) != 0) {
		savedptr = ptr->child;
		free(ptr);
	    }
	    returnCode(ERR);
	}

	SET_TRY(ptr, txt);
	ptr->value = 0;
    }

    ptr->value = code;
    returnCode(OK);
}
@


1.3
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: add_tries.c,v 1.2 2000/03/26 16:45:03 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d32 1
a32 1
 *  Author: Thomas E. Dickey <dickey@@clark.net> 1998                        *
d44 1
a44 1
MODULE_ID("$From: add_tries.c,v 1.4 2000/12/10 02:55:07 tom Exp $")
d49 2
a50 2
NCURSES_EXPORT(void)
_nc_add_to_try(struct tries **tree, const char *str, unsigned short code)
d52 1
a52 2
    static bool out_of_memory = FALSE;
    struct tries *ptr, *savedptr;
d55 3
a57 2
    if (txt == 0 || *txt == '\0' || out_of_memory || code == 0)
	return;
d72 1
a72 1
		    return;
d79 2
a80 3
		if ((ptr->sibling = typeCalloc(struct tries, 1)) == 0) {
		    out_of_memory = TRUE;
		    return;
d91 1
a91 1
	savedptr = ptr = (*tree) = typeCalloc(struct tries, 1);
d94 1
a94 2
	    out_of_memory = TRUE;
	    return;
d104 1
a104 1
	ptr->child = typeCalloc(struct tries, 1);
a108 2
	    out_of_memory = TRUE;

d113 1
a113 2

	    return;
d121 1
a121 1
    return;
@


1.2
log
@Update to ncurses-5.0-20000325
@
text
@d1 1
a1 1
/*	$OpenBSD: add_tries.c,v 1.1 1999/01/18 19:10:12 millert Exp $	*/
d44 1
a44 1
MODULE_ID("$From: add_tries.c,v 1.2 2000/03/18 22:23:56 tom Exp $")
d49 1
a49 1
void
d66 1
a66 1
		&& ptr->sibling != 0)
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: add_tries.c,v 1.1 1998/11/17 03:16:20 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d44 1
a44 1
MODULE_ID("$From: add_tries.c,v 1.1 1998/11/08 00:04:18 tom Exp $")
d49 2
a50 1
void _nc_add_to_try(struct tries **tree, char *str, unsigned short code)
d52 30
a81 45
	static bool     out_of_memory = FALSE;
	struct tries    *ptr, *savedptr;
	unsigned char	*txt = (unsigned char *)str;

	if (txt == 0 || *txt == '\0' || out_of_memory || code == 0)
		return;

	if ((*tree) != 0) {
		ptr = savedptr = (*tree);

		for (;;) {
			unsigned char cmp = *txt;

			while (!CMP_TRY(ptr->ch, cmp)
			       &&  ptr->sibling != 0)
				ptr = ptr->sibling;
	
			if (CMP_TRY(ptr->ch, cmp)) {
				if (*(++txt) == '\0') {
					ptr->value = code;
					return;
				}
				if (ptr->child != 0)
					ptr = ptr->child;
				else
					break;
			} else {
				if ((ptr->sibling = typeCalloc(struct tries,1)) == 0) {
					out_of_memory = TRUE;
					return;
				}

				savedptr = ptr = ptr->sibling;
				SET_TRY(ptr,txt);
				ptr->value = 0;

				break;
			}
		} /* end for (;;) */
	} else {   /* (*tree) == 0 :: First sequence to be added */
		savedptr = ptr = (*tree) = typeCalloc(struct tries,1);

		if (ptr == 0) {
			out_of_memory = TRUE;
			return;
d84 2
a85 1
		SET_TRY(ptr,txt);
d87 10
d99 3
a101 1
	    /* at this point, we are adding to the try.  ptr->child == 0 */
d103 1
a103 2
	while (*txt) {
		ptr->child = typeCalloc(struct tries,1);
d105 2
a106 1
		ptr = ptr->child;
d108 1
a108 2
		if (ptr == 0) {
			out_of_memory = TRUE;
d110 2
a111 4
			while ((ptr = savedptr) != 0) {
				savedptr = ptr->child;
				free(ptr);
			}
d113 4
a116 2
			return;
		}
d118 1
a118 2
		SET_TRY(ptr,txt);
		ptr->value = 0;
d121 6
a126 2
	ptr->value = code;
	return;
@

