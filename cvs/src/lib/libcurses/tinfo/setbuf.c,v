head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.28
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.24
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.26
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.18
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.38
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.34
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.32
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.30
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.28
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.26
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.24
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.22
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.22.18.01.57;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.03.02.06.23.29;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.02.24.05.36.11;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.22;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2003,2007 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/

/*
**	setbuf.c
**
**	Support for set_term(), reset_shell_mode(), reset_prog_mode().
**
*/

#include <curses.priv.h>

MODULE_ID("$Id: setbuf.c,v 1.13 2007/05/12 19:04:02 tom Exp $")

/*
 * If the output file descriptor is connected to a tty (the typical case) it
 * will probably be line-buffered.  Keith Bostic pointed out that we don't want
 * this; it hoses people running over networks by forcing out a bunch of small
 * packets instead of one big one, so screen updates on ptys look jerky.
 * Restore block buffering to prevent this minor lossage.
 *
 * The buffer size is a compromise.  Ideally we'd like a buffer that can hold
 * the maximum possible update size (the whole screen plus cup commands to
 * change lines as it's painted).  On a 66-line xterm this can become
 * excessive.  So we min it with the amount of data we think we can get through
 * two Ethernet packets (maximum packet size - 100 for TCP/IP overhead).
 *
 * Why two ethernet packets?  It used to be one, on the theory that said
 * packets define the maximum size of atomic update.  But that's less than the
 * 2000 chars on a 25 x 80 screen, and we don't want local updates to flicker
 * either.  Two packet lengths will handle up to a 35 x 80 screen.
 *
 * The magic '6' is the estimated length of the end-of-line cup sequence to go
 * to the next line.  It's generous.  We used to mess with the buffering in
 * init_mvcur() after cost computation, but that lost the sequences emitted by
 * init_acs() in setupscreen().
 *
 * "The setvbuf function may be used only after the stream pointed to by stream
 * has been associated with an open file and before any other operation is
 * performed on the stream." (ISO 7.9.5.6.)
 *
 * Grrrr...
 *
 * On a lighter note, many implementations do in fact allow an application to
 * reset the buffering after it has been written to.  We try to do this because
 * otherwise we leave stdout in buffered mode after endwin() is called.  (This
 * also happens with SVr4 curses).
 *
 * There are pros/cons:
 *
 * con:
 *	There is no guarantee that we can reestablish buffering once we've
 *	dropped it.
 *
 *	We _may_ lose data if the implementation does not coordinate this with
 *	fflush.
 *
 * pro:
 *	An implementation is more likely to refuse to change the buffering than
 *	to do it in one of the ways mentioned above.
 *
 *	The alternative is to have the application try to change buffering
 *	itself, which is certainly no improvement.
 *
 * Just in case it does not work well on a particular system, the calls to
 * change buffering are all via the macro NC_BUFFERED.  Some implementations
 * do indeed get confused by changing setbuf on/off, and will overrun the
 * buffer.  So we disable this by default (there may yet be a workaround).
 */
NCURSES_EXPORT(void)
_nc_set_buffer(FILE *ofp, bool buffered)
{
    /* optional optimization hack -- do before any output to ofp */
#if HAVE_SETVBUF || HAVE_SETBUFFER
    if (SP->_buffered != buffered) {
	unsigned buf_len;
	char *buf_ptr;

	if (getenv("NCURSES_NO_SETBUF") != 0)
	    return;

	fflush(ofp);
#ifdef __DJGPP__
	setmode(ofp, O_BINARY);
#endif
	if (buffered != 0) {
	    buf_len = min(LINES * (COLS + 6), 2800);
	    if ((buf_ptr = SP->_setbuf) == 0) {
		if ((buf_ptr = typeMalloc(char, buf_len)) == NULL)
		      return;
		SP->_setbuf = buf_ptr;
		/* Don't try to free this! */
	    }
#if !USE_SETBUF_0
	    else
		return;
#endif
	} else {
#if !USE_SETBUF_0
	    return;
#else
	    buf_len = 0;
	    buf_ptr = 0;
#endif
	}

#if HAVE_SETVBUF
#ifdef SETVBUF_REVERSED		/* pre-svr3? */
	(void) setvbuf(ofp, buf_ptr, buf_len, buf_len ? _IOFBF : _IOLBF);
#else
	(void) setvbuf(ofp, buf_ptr, buf_len ? _IOFBF : _IOLBF, buf_len);
#endif
#elif HAVE_SETBUFFER
	(void) setbuffer(ofp, buf_ptr, (int) buf_len);
#endif

	SP->_buffered = buffered;
    }
#endif /* HAVE_SETVBUF || HAVE_SETBUFFER */
}
@


1.4
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: setbuf.c,v 1.3 1999/03/02 06:23:29 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d45 1
a45 1
MODULE_ID("$From: setbuf.c,v 1.7 2000/12/10 02:55:08 tom Exp $")
d103 1
a103 1
_nc_set_buffer(FILE * ofp, bool buffered)
d107 3
a109 2
    unsigned buf_len;
    char *buf_ptr;
d111 2
a112 2
    if (getenv("NCURSES_NO_SETBUF") != 0)
	return;
d114 12
a125 9
    fflush(ofp);
    if ((SP->_buffered = buffered) != 0) {
	buf_len = min(LINES * (COLS + 6), 2800);
	if ((buf_ptr = SP->_setbuf) == 0) {
	    if ((buf_ptr = typeMalloc(char, buf_len)) == NULL)
		  return;
	    SP->_setbuf = buf_ptr;
	    /* Don't try to free this! */
	}
d127 2
a128 2
	else
	    return;
d130 1
a130 1
    } else {
d132 1
a132 1
	return;
d134 2
a135 2
	buf_len = 0;
	buf_ptr = 0;
d137 1
a137 1
    }
d141 1
a141 1
    (void) setvbuf(ofp, buf_ptr, buf_len, buf_len ? _IOFBF : _IOLBF);
d143 1
a143 1
    (void) setvbuf(ofp, buf_ptr, buf_len ? _IOFBF : _IOLBF, buf_len);
d146 1
a146 1
    (void) setbuffer(ofp, buf_ptr, (int) buf_len);
d149 2
@


1.3
log
@ncurses-4.2-990301
@
text
@d1 1
a1 1
/*	$OpenBSD: setbuf.c,v 1.2 1999/02/24 05:36:11 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
a35 2


d45 1
a45 1
MODULE_ID("$From: setbuf.c,v 1.5 1999/02/27 20:00:15 tom Exp $")
d102 2
a103 1
void _nc_set_buffer(FILE *ofp, bool buffered)
d105 1
a105 1
	/* optional optimization hack -- do before any output to ofp */
d107 2
a108 2
	unsigned buf_len;
	char *buf_ptr;
d110 2
a111 2
	if (getenv("NCURSES_NO_SETBUF") != 0)
		return;
d113 9
a121 9
	fflush(ofp);
	if ((SP->_buffered = buffered) != 0) {
		buf_len = min(LINES * (COLS + 6), 2800);
	 	if ((buf_ptr = SP->_setbuf) == 0) {
			if ((buf_ptr = typeMalloc(char, buf_len)) == NULL)
				return;
			SP->_setbuf = buf_ptr;
			/* Don't try to free this! */
		}
d123 2
a124 1
		else return;
d126 1
a126 1
	} else {
d128 1
a128 1
		return;
d130 2
a131 2
		buf_len = 0;
		buf_ptr = 0;
d133 1
a133 1
	}
d136 2
a137 2
#ifdef SETVBUF_REVERSED	/* pre-svr3? */
	(void) setvbuf(ofp, buf_ptr, buf_len, buf_len ? _IOFBF : _IOLBF);
d139 1
a139 1
	(void) setvbuf(ofp, buf_ptr, buf_len ? _IOFBF : _IOLBF, buf_len);
d142 1
a142 1
	(void) setbuffer(ofp, buf_ptr, (int)buf_len);
@


1.2
log
@ncurses-990213
@
text
@d1 1
a1 1
/*	$OpenBSD: setbuf.c,v 1.1 1999/01/18 19:10:22 millert Exp $	*/
d47 1
a47 1
MODULE_ID("$From: setbuf.c,v 1.4 1999/02/10 03:15:09 tom Exp $")
d118 1
a118 1
			if ((buf_ptr = malloc(buf_len)) == NULL)
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: setbuf.c,v 1.1 1998/11/17 03:16:21 millert Exp $	*/
d47 1
a47 1
MODULE_ID("$From: setbuf.c,v 1.2 1998/12/13 03:48:09 tom Exp $")
d100 3
a102 1
 * change buffering are all via the macro NC_BUFFERED.
d123 3
d127 3
d132 1
@

