head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.30
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.32
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.28
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.24
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.26
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.18
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.38
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.34
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.32
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.30
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.28
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.26
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.24
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.22
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2010.01.12.23.22.06;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.22.18.01.52;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.11.28.17.49.54;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.02.24.06.31.11;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Thomas E. Dickey                        1996-on                 *
 ****************************************************************************/

#include <curses.priv.h>
#include <term.h>		/* ena_acs, acs_chars */

MODULE_ID("$Id: lib_acs.c,v 1.36 2008/08/16 19:22:55 tom Exp $")

#if BROKEN_LINKER || USE_REENTRANT
#define MyBuffer _nc_prescreen.real_acs_map
NCURSES_EXPORT_VAR(chtype *)
_nc_acs_map(void)
{
    if (MyBuffer == 0)
	MyBuffer = typeCalloc(chtype, ACS_LEN);
    return MyBuffer;
}
#undef MyBuffer
#else
NCURSES_EXPORT_VAR(chtype) acs_map[ACS_LEN] =
{
    0
};
#endif

NCURSES_EXPORT(void)
_nc_init_acs(void)
{
    chtype *fake_map = acs_map;
    chtype *real_map = SP != 0 ? SP->_acs_map : fake_map;
    int j;

    T(("initializing ACS map"));

    /*
     * If we're using this from curses (rather than terminfo), we are storing
     * the mapping information in the SCREEN struct so we can decide how to
     * render it.
     */
    if (real_map != fake_map) {
	for (j = 1; j < ACS_LEN; ++j) {
	    real_map[j] = 0;
	    fake_map[j] = A_ALTCHARSET | j;
	    if (SP)
		SP->_screen_acs_map[j] = FALSE;
	}
    } else {
	for (j = 1; j < ACS_LEN; ++j) {
	    real_map[j] = 0;
	}
    }

    /*
     * Initializations for a UNIX-like multi-terminal environment.  Use
     * ASCII chars and count on the terminfo description to do better.
     */
    real_map['l'] = '+';	/* should be upper left corner */
    real_map['m'] = '+';	/* should be lower left corner */
    real_map['k'] = '+';	/* should be upper right corner */
    real_map['j'] = '+';	/* should be lower right corner */
    real_map['u'] = '+';	/* should be tee pointing left */
    real_map['t'] = '+';	/* should be tee pointing right */
    real_map['v'] = '+';	/* should be tee pointing up */
    real_map['w'] = '+';	/* should be tee pointing down */
    real_map['q'] = '-';	/* should be horizontal line */
    real_map['x'] = '|';	/* should be vertical line */
    real_map['n'] = '+';	/* should be large plus or crossover */
    real_map['o'] = '~';	/* should be scan line 1 */
    real_map['s'] = '_';	/* should be scan line 9 */
    real_map['`'] = '+';	/* should be diamond */
    real_map['a'] = ':';	/* should be checker board (stipple) */
    real_map['f'] = '\'';	/* should be degree symbol */
    real_map['g'] = '#';	/* should be plus/minus */
    real_map['~'] = 'o';	/* should be bullet */
    real_map[','] = '<';	/* should be arrow pointing left */
    real_map['+'] = '>';	/* should be arrow pointing right */
    real_map['.'] = 'v';	/* should be arrow pointing down */
    real_map['-'] = '^';	/* should be arrow pointing up */
    real_map['h'] = '#';	/* should be board of squares */
    real_map['i'] = '#';	/* should be lantern symbol */
    real_map['0'] = '#';	/* should be solid square block */
    /* these defaults were invented for ncurses */
    real_map['p'] = '-';	/* should be scan line 3 */
    real_map['r'] = '-';	/* should be scan line 7 */
    real_map['y'] = '<';	/* should be less-than-or-equal-to */
    real_map['z'] = '>';	/* should be greater-than-or-equal-to */
    real_map['{'] = '*';	/* should be greek pi */
    real_map['|'] = '!';	/* should be not-equal */
    real_map['}'] = 'f';	/* should be pound-sterling symbol */

    if (ena_acs != NULL) {
	TPUTS_TRACE("ena_acs");
	putp(ena_acs);
    }
#if NCURSES_EXT_FUNCS
    /*
     * Linux console "supports" the "PC ROM" character set by the coincidence
     * that smpch/rmpch and smacs/rmacs have the same values.  ncurses has
     * no codepage support (see SCO Merge for an example).  Outside of the
     * values defined in acsc, there are no definitions for the "PC ROM"
     * character set (assumed by some applications to be codepage 437), but we
     * allow those applications to use those codepoints.
     *
     * test/blue.c uses this feature.
     */
#define PCH_KLUDGE(a,b) (a != 0 && b != 0 && !strcmp(a,b))
    if (PCH_KLUDGE(enter_pc_charset_mode, enter_alt_charset_mode) &&
	PCH_KLUDGE(exit_pc_charset_mode, exit_alt_charset_mode)) {
	size_t i;
	for (i = 1; i < ACS_LEN; ++i) {
	    if (real_map[i] == 0) {
		real_map[i] = i;
		if (real_map != fake_map) {
		    if (SP != 0)
			SP->_screen_acs_map[i] = TRUE;
		}
	    }
	}
    }
#endif

    if (acs_chars != NULL) {
	size_t i = 0;
	size_t length = strlen(acs_chars);

	while (i + 1 < length) {
	    if (acs_chars[i] != 0 && UChar(acs_chars[i]) < ACS_LEN) {
		real_map[UChar(acs_chars[i])] = UChar(acs_chars[i + 1]) | A_ALTCHARSET;
		if (SP != 0)
		    SP->_screen_acs_map[UChar(acs_chars[i])] = TRUE;
	    }
	    i += 2;
	}
    }
#ifdef TRACE
    /* Show the equivalent mapping, noting if it does not match the
     * given attribute, whether by re-ordering or duplication.
     */
    if (USE_TRACEF(TRACE_CALLS)) {
	size_t n, m;
	char show[ACS_LEN * 2 + 1];
	for (n = 1, m = 0; n < ACS_LEN; n++) {
	    if (real_map[n] != 0) {
		show[m++] = (char) n;
		show[m++] = (char) ChCharOf(real_map[n]);
	    }
	}
	show[m] = 0;
	if (acs_chars == NULL || strcmp(acs_chars, show))
	    _tracef("%s acs_chars %s",
		    (acs_chars == NULL) ? "NULL" : "READ",
		    _nc_visbuf(acs_chars));
	_tracef("%s acs_chars %s",
		(acs_chars == NULL)
		? "NULL"
		: (strcmp(acs_chars, show)
		   ? "DIFF"
		   : "SAME"),
		_nc_visbuf(show));
	_nc_unlock_global(tracef);
    }
#endif /* TRACE */
}
@


1.4
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_acs.c,v 1.3 1999/11/28 17:49:54 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999,2000 Free Software Foundation, Inc.              *
d34 1
d40 1
a40 1
MODULE_ID("$From: lib_acs.c,v 1.18 2000/12/10 02:55:07 tom Exp $")
d42 11
d57 1
d62 4
d69 18
d90 25
a114 25
    ACS_ULCORNER = '+';		/* should be upper left corner */
    ACS_LLCORNER = '+';		/* should be lower left corner */
    ACS_URCORNER = '+';		/* should be upper right corner */
    ACS_LRCORNER = '+';		/* should be lower right corner */
    ACS_RTEE = '+';		/* should be tee pointing left */
    ACS_LTEE = '+';		/* should be tee pointing right */
    ACS_BTEE = '+';		/* should be tee pointing up */
    ACS_TTEE = '+';		/* should be tee pointing down */
    ACS_HLINE = '-';		/* should be horizontal line */
    ACS_VLINE = '|';		/* should be vertical line */
    ACS_PLUS = '+';		/* should be large plus or crossover */
    ACS_S1 = '~';		/* should be scan line 1 */
    ACS_S9 = '_';		/* should be scan line 9 */
    ACS_DIAMOND = '+';		/* should be diamond */
    ACS_CKBOARD = ':';		/* should be checker board (stipple) */
    ACS_DEGREE = '\'';		/* should be degree symbol */
    ACS_PLMINUS = '#';		/* should be plus/minus */
    ACS_BULLET = 'o';		/* should be bullet */
    ACS_LARROW = '<';		/* should be arrow pointing left */
    ACS_RARROW = '>';		/* should be arrow pointing right */
    ACS_DARROW = 'v';		/* should be arrow pointing down */
    ACS_UARROW = '^';		/* should be arrow pointing up */
    ACS_BOARD = '#';		/* should be board of squares */
    ACS_LANTERN = '#';		/* should be lantern symbol */
    ACS_BLOCK = '#';		/* should be solid square block */
d116 7
a122 7
    ACS_S3 = '-';		/* should be scan line 3 */
    ACS_S7 = '-';		/* should be scan line 7 */
    ACS_LEQUAL = '<';		/* should be less-than-or-equal-to */
    ACS_GEQUAL = '>';		/* should be greater-than-or-equal-to */
    ACS_PI = '*';		/* should be greek pi */
    ACS_NEQUAL = '!';		/* should be not-equal */
    ACS_STERLING = 'f';		/* should be pound-sterling symbol */
d128 26
a153 1
#define ALTCHAR(c)	((chtype)(((unsigned char)(c)) | A_ALTCHARSET))
d159 5
a163 41
	while (i < length)
	    switch (acs_chars[i]) {
	    case 'l':
	    case 'm':
	    case 'k':
	    case 'j':
	    case 'u':
	    case 't':
	    case 'v':
	    case 'w':
	    case 'q':
	    case 'x':
	    case 'n':
	    case 'o':
	    case 's':
	    case '`':
	    case 'a':
	    case 'f':
	    case 'g':
	    case '~':
	    case ',':
	    case '+':
	    case '.':
	    case '-':
	    case 'h':
	    case 'i':
	    case '0':
	    case 'p':
	    case 'r':
	    case 'y':
	    case 'z':
	    case '{':
	    case '|':
	    case '}':
		acs_map[(unsigned int) acs_chars[i]] =
		    ALTCHAR(acs_chars[i + 1]);
		i++;
		/* FALLTHRU */
	    default:
		i++;
		break;
d165 2
d172 1
a172 1
    if (_nc_tracing & TRACE_CALLS) {
d174 3
a176 3
	char show[SIZEOF(acs_map) + 1];
	for (n = 1, m = 0; n < SIZEOF(acs_map); n++) {
	    if (acs_map[n] != 0) {
d178 1
a178 1
		show[m++] = TextOf(acs_map[n]);
d182 4
d193 1
@


1.3
log
@update to ncurses-5.0-19991127
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_acs.c,v 1.2 1999/02/24 06:31:11 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999 Free Software Foundation, Inc.                   *
a35 2


d37 1
a37 1
#include <term.h>	/* ena_acs, acs_chars */
d39 1
a39 1
MODULE_ID("$From: lib_acs.c,v 1.16 1999/10/30 23:00:16 tom Exp $")
d41 4
a44 1
chtype acs_map[ACS_LEN] = { 0 };
d46 2
a47 1
void _nc_init_acs(void)
d49 1
a49 45
	T(("initializing ACS map"));

	/*
	 * Initializations for a UNIX-like multi-terminal environment.  Use
	 * ASCII chars and count on the terminfo description to do better.
	 */
	ACS_ULCORNER = '+';	/* should be upper left corner */
	ACS_LLCORNER = '+';	/* should be lower left corner */
	ACS_URCORNER = '+';	/* should be upper right corner */
	ACS_LRCORNER = '+';	/* should be lower right corner */
	ACS_RTEE     = '+';	/* should be tee pointing left */
	ACS_LTEE     = '+';	/* should be tee pointing right */
	ACS_BTEE     = '+';	/* should be tee pointing up */
	ACS_TTEE     = '+';	/* should be tee pointing down */
	ACS_HLINE    = '-';	/* should be horizontal line */
	ACS_VLINE    = '|';	/* should be vertical line */
	ACS_PLUS     = '+';	/* should be large plus or crossover */
	ACS_S1       = '~';	/* should be scan line 1 */
	ACS_S9       = '_';	/* should be scan line 9 */
	ACS_DIAMOND  = '+';	/* should be diamond */
	ACS_CKBOARD  = ':';	/* should be checker board (stipple) */
	ACS_DEGREE   = '\'';	/* should be degree symbol */
	ACS_PLMINUS  = '#';	/* should be plus/minus */
	ACS_BULLET   = 'o';	/* should be bullet */
	ACS_LARROW   = '<';	/* should be arrow pointing left */
	ACS_RARROW   = '>';	/* should be arrow pointing right */
	ACS_DARROW   = 'v';	/* should be arrow pointing down */
	ACS_UARROW   = '^';	/* should be arrow pointing up */
	ACS_BOARD    = '#';	/* should be board of squares */
	ACS_LANTERN  = '#';	/* should be lantern symbol */
	ACS_BLOCK    = '#';	/* should be solid square block */
	/* these defaults were invented for ncurses */
	ACS_S3       = '-';	/* should be scan line 3 */
	ACS_S7       = '-';	/* should be scan line 7 */
	ACS_LEQUAL   = '<';	/* should be less-than-or-equal-to */
	ACS_GEQUAL   = '>';	/* should be greater-than-or-equal-to */
	ACS_PI       = '*';	/* should be greek pi */
        ACS_NEQUAL   = '!';	/* should be not-equal */
        ACS_STERLING = 'f';	/* should be pound-sterling symbol */

	if (ena_acs != NULL)
	{
		TPUTS_TRACE("ena_acs");
		putp(ena_acs);
	}
d51 42
d95 47
a141 23
	if (acs_chars != NULL) {
	    size_t i = 0;
	    size_t length = strlen(acs_chars);

		while (i < length)
			switch (acs_chars[i]) {
			case 'l':case 'm':case 'k':case 'j':
			case 'u':case 't':case 'v':case 'w':
			case 'q':case 'x':case 'n':case 'o':
			case 's':case '`':case 'a':case 'f':
			case 'g':case '~':case ',':case '+':
			case '.':case '-':case 'h':case 'i':
			case '0':case 'p':case 'r':case 'y':
			case 'z':case '{':case '|':case '}':
				acs_map[(unsigned int)acs_chars[i]] =
					ALTCHAR(acs_chars[i+1]);
				i++;
				/* FALLTHRU */
			default:
				i++;
				break;
			}
	}
d143 11
a153 20
	/* Show the equivalent mapping, noting if it does not match the
	 * given attribute, whether by re-ordering or duplication.
	 */
	if (_nc_tracing & TRACE_CALLS) {
		size_t n, m;
		char show[SIZEOF(acs_map) + 1];
		for (n = 1, m = 0; n < SIZEOF(acs_map); n++) {
			if (acs_map[n] != 0) {
				show[m++] = (char)n;
				show[m++] = TextOf(acs_map[n]);
			}
		}
		show[m] = 0;
		_tracef("%s acs_chars %s",
			(acs_chars == NULL)
			? "NULL"
			: (strcmp(acs_chars, show)
				? "DIFF"
				: "SAME"),
			_nc_visbuf(show));
d155 9
@


1.2
log
@ncurses-4.2-990220; this is a pre-release of 5.0
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_acs.c,v 1.1 1999/01/18 19:10:16 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d41 1
a41 1
MODULE_ID("$From: lib_acs.c,v 1.15 1999/02/18 11:31:43 tom Exp $")
d43 1
a43 1
chtype acs_map[ACS_LEN];
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_acs.c,v 1.5 1998/07/23 21:18:24 millert Exp $	*/
d41 1
a41 1
MODULE_ID("$From: lib_acs.c,v 1.14 1999/01/02 22:37:49 tom Exp $")
d45 1
a45 1
void init_acs(void)
@

