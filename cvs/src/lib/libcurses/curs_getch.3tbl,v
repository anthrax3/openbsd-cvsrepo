head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.30
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.28
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.24
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.28
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.24
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.22
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.20
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.18
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.16
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.10
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.8
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.6
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.4
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4;
locks; strict;
comment	@# @;


1.12
date	2010.01.12.23.21.59;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.12.11.06.49;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2001.02.28.22.58.53;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.10.03.06.06;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.19.03.53.34;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.01.18.19.07.12;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.09.13.19.16.18;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.23.21.17.38;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.12.14.23.15.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.45.08;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.12.03.05.20.54;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.26.05.45.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@'\" t
.\" $OpenBSD$
.\"
.\"***************************************************************************
.\" Copyright (c) 1998-2005,2006 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_getch.3x,v 1.30 2006/12/02 17:02:53 tom Exp $
.TH curs_getch 3 ""
.na
.hy 0
.SH NAME
\fBgetch\fR,
\fBwgetch\fR,
\fBmvgetch\fR,
\fBmvwgetch\fR,
\fBungetch\fR,
\fBhas_key\fR \- get (or push back) characters from \fBcurses\fR terminal keyboard
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.PP
\fBint getch(void);\fR
.br
\fBint wgetch(WINDOW *win);\fR
.br
\fBint mvgetch(int y, int x);\fR
.br
\fBint mvwgetch(WINDOW *win, int y, int x);\fR
.br
\fBint ungetch(int ch);\fR
.br
\fBint has_key(int ch);\fR
.br
.SH DESCRIPTION
The \fBgetch\fR, \fBwgetch\fR, \fBmvgetch\fR and \fBmvwgetch\fR, routines read
a character from the window.
In no-delay mode, if no input is waiting, the value \fBERR\fR is returned.
In delay mode, the program waits until the system
passes text through to the program.
Depending on the setting of \fBcbreak\fR,
this is after one character (cbreak mode),
or after the first newline (nocbreak mode).
In half-delay mode,
the program waits until a character is typed or the
specified timeout has been reached.
.PP
Unless \fBnoecho\fR has been set,
then the character will also be echoed into the
designated window according to the following rules:
If the character is the current erase character, left arrow, or backspace,
the cursor is moved one space to the left and that screen position is erased
as if \fBdelch\fR had been called.
If the character value is any other \fBKEY_\fR define, the user is alerted
with a \fBbeep\fR call.
Otherwise the character is simply output to the screen.
.PP
If the window is not a pad, and it has been moved or modified since the last
call to \fBwrefresh\fR, \fBwrefresh\fR will be called before another character
is read.
.PP
If \fBkeypad\fR is \fBTRUE\fR, and a function key is pressed, the token for
that function key is returned instead of the raw characters.
Possible function
keys are defined in \fB<curses.h>\fR as macros with values outside the range
of 8-bit characters whose names begin with \fBKEY_\fR. Thus, a variable
intended to hold the return value of a function key must be of short size or
larger.
.PP
When a character that could be the beginning of a function key is received
(which, on modern terminals, means an escape character),
\fBcurses\fR sets a timer.
If the remainder of the sequence does not come in within the designated
time, the character is passed through;
otherwise, the function key value is returned.
For this reason, many terminals experience a delay between the time
a user presses the escape key and the escape is returned to the program.
.PP
The \fBungetch\fR routine places \fIch\fR back onto the input queue to be
returned by the next call to \fBwgetch\fR.
There is just one input queue for all windows.
.PP
.SS Function Keys
The following function keys, defined in \fB<curses.h>\fR, might be returned by
\fBgetch\fR if \fBkeypad\fR has been enabled.
Note that not all of these are
necessarily supported on any particular terminal.
.sp
.TS
center tab(/) ;
l l
l l .
\fIName\fR/\fIKey\fR \fIname\fR
KEY_BREAK/Break key
KEY_DOWN/The four arrow keys ...
KEY_UP
KEY_LEFT
KEY_RIGHT
KEY_HOME/Home key (upward+left arrow)
KEY_BACKSPACE/Backspace
KEY_F0/T{
Function keys; space for 64 keys is reserved.
T}
KEY_F(\fIn\fR)/T{
For 0 \(<= \fIn\fR \(<= 63
T}
KEY_DL/Delete line
KEY_IL/Insert line
KEY_DC/Delete character
KEY_IC/Insert char or enter insert mode
KEY_EIC/Exit insert char mode
KEY_CLEAR/Clear screen
KEY_EOS/Clear to end of screen
KEY_EOL/Clear to end of line
KEY_SF/Scroll 1 line forward
KEY_SR/Scroll 1 line backward (reverse)
KEY_NPAGE/Next page
KEY_PPAGE/Previous page
KEY_STAB/Set tab
KEY_CTAB/Clear tab
KEY_CATAB/Clear all tabs
KEY_ENTER/Enter or send
KEY_SRESET/Soft (partial) reset
KEY_RESET/Reset or hard reset
KEY_PRINT/Print or copy
KEY_LL/Home down or bottom (lower left)
KEY_A1/Upper left of keypad
KEY_A3/Upper right of keypad
KEY_B2/Center of keypad
KEY_C1/Lower left of keypad
KEY_C3/Lower right of keypad
KEY_BTAB/Back tab key
KEY_BEG/Beg(inning) key
KEY_CANCEL/Cancel key
KEY_CLOSE/Close key
KEY_COMMAND/Cmd (command) key
KEY_COPY/Copy key
KEY_CREATE/Create key
KEY_END/End key
KEY_EXIT/Exit key
KEY_FIND/Find key
KEY_HELP/Help key
KEY_MARK/Mark key
KEY_MESSAGE/Message key
KEY_MOUSE/Mouse event read
KEY_MOVE/Move key
KEY_NEXT/Next object key
KEY_OPEN/Open key
KEY_OPTIONS/Options key
KEY_PREVIOUS/Previous object key
KEY_REDO/Redo key
KEY_REFERENCE/Ref(erence) key
KEY_REFRESH/Refresh key
KEY_REPLACE/Replace key
KEY_RESIZE/Screen resized
KEY_RESTART/Restart key
KEY_RESUME/Resume key
KEY_SAVE/Save key
KEY_SBEG/Shifted beginning key
KEY_SCANCEL/Shifted cancel key
KEY_SCOMMAND/Shifted command key
KEY_SCOPY/Shifted copy key
KEY_SCREATE/Shifted create key
KEY_SDC/Shifted delete char key
KEY_SDL/Shifted delete line key
KEY_SELECT/Select key
KEY_SEND/Shifted end key
KEY_SEOL/Shifted clear line key
KEY_SEXIT/Shifted exit key
KEY_SFIND/Shifted find key
KEY_SHELP/Shifted help key
KEY_SHOME/Shifted home key
KEY_SIC/Shifted input key
KEY_SLEFT/Shifted left arrow key
KEY_SMESSAGE/Shifted message key
KEY_SMOVE/Shifted move key
KEY_SNEXT/Shifted next key
KEY_SOPTIONS/Shifted options key
KEY_SPREVIOUS/Shifted prev key
KEY_SPRINT/Shifted print key
KEY_SREDO/Shifted redo key
KEY_SREPLACE/Shifted replace key
KEY_SRIGHT/Shifted right arrow
KEY_SRSUME/Shifted resume key
KEY_SSAVE/Shifted save key
KEY_SSUSPEND/Shifted suspend key
KEY_SUNDO/Shifted undo key
KEY_SUSPEND/Suspend key
KEY_UNDO/Undo key
.TE
.PP
Keypad is arranged like this:
.sp
.TS
center allbox tab(/) ;
c c c .
\fBA1\fR/\fBup\fR/\fBA3\fR
\fBleft\fR/\fBB2\fR/\fBright\fR
\fBC1\fR/\fBdown\fR/\fBC3\fR
.TE
.sp
The \fBhas_key\fR routine takes a key value from the above list, and
returns TRUE or FALSE according to whether
the current terminal type recognizes a key with that value.
Note that a few values do not correspond to a real key,
e.g., \fBKEY_RESIZE\fP and \fBKEY_MOUSE\fP.
See \fBresizeterm\fR(3) for more details about \fBKEY_RESIZE\fP, and
\fBcurs_mouse\fR(3) for a discussion of \fBKEY_MOUSE\fP.
.PP
.SH RETURN VALUE
All routines return the integer \fBERR\fR upon failure and an integer value
other than \fBERR\fR (\fBOK\fR in the case of ungetch()) upon successful
completion.
.RS
.TP 5
\fBungetch\fP
returns an error
if there is no more room in the FIFO.
.TP 5
\fBwgetch\fP
returns an error
if the window pointer is null, or
if its timeout expires without having any data.
.RE
.SH NOTES
Use of the escape key by a programmer for a single character function is
discouraged, as it will cause a delay of up to one second while the
keypad code looks for a following function-key sequence.
.PP
Note that some keys may be the same as commonly used control
keys, e.g., \fBKEY_ENTER\fP versus control/M, \fBKEY_BACKSPACE\fP versus control/H.
Some curses implementations may differ according to whether they
treat these control keys specially (and ignore the terminfo), or
use the terminfo definitions.
\fBNcurses\fR uses the terminfo definition.
If it says that \fBKEY_ENTER\fP is control/M,
\fBgetch\fR will return \fBKEY_ENTER\fP
when you press control/M.
.PP
When using \fBgetch\fR, \fBwgetch\fR, \fBmvgetch\fR, or
\fBmvwgetch\fR, nocbreak mode (\fBnocbreak\fR) and echo mode
(\fBecho\fR) should not be used at the same time.
Depending on the
state of the tty driver when each character is typed, the program may
produce undesirable results.
.PP
Note that \fBgetch\fR, \fBmvgetch\fR, and \fBmvwgetch\fR may be macros.
.PP
Historically, the set of keypad macros was largely defined by the extremely
function-key-rich keyboard of the AT&T 7300, aka 3B1, aka Safari 4.
Modern
personal computers usually have only a small subset of these.
IBM PC-style
consoles typically support little more than \fBKEY_UP\fR, \fBKEY_DOWN\fR,
\fBKEY_LEFT\fR, \fBKEY_RIGHT\fR, \fBKEY_HOME\fR, \fBKEY_END\fR,
\fBKEY_NPAGE\fR, \fBKEY_PPAGE\fR, and function keys 1 through 12.
The Ins key
is usually mapped to \fBKEY_IC\fR.
.SH PORTABILITY
The *get* functions are described in the XSI Curses standard, Issue 4.
They
read single-byte characters only.
The standard specifies that they return
\fBERR\fR on failure, but specifies no error conditions.
.PP
The echo behavior of these functions on input of \fBKEY_\fR or backspace
characters was not specified in the SVr4 documentation.
This description is
adopted from the XSI Curses standard.
.PP
The behavior of \fBgetch\fR and friends in the presence of handled signals is
unspecified in the SVr4 and XSI Curses documentation.
Under historical curses
implementations, it varied depending on whether the operating system's
implementation of handled signal receipt interrupts a \fBread\fR(2) call in
progress or not, and also (in some implementations) depending on whether an
input timeout or non-blocking mode has been set.
.PP
Programmers concerned about portability should be prepared for either of two
cases: (a) signal receipt does not interrupt \fBgetch\fR; (b) signal receipt
interrupts \fBgetch\fR and causes it to return ERR with \fBerrno\fR set to
\fBEINTR\fR.
Under the \fBncurses\fR implementation, handled signals never
interrupt \fBgetch\fR.
.PP
The \fBhas_key\fR function is unique to \fBncurses\fR.
We recommend that
any code using it be conditionalized on the \fBNCURSES_VERSION\fR feature macro.
.SH SEE ALSO
\fBcurses\fR(3),
\fBcurs_inopts\fR(3),
\fBcurs_mouse\fR(3),
\fBcurs_move\fR(3),
\fBcurs_refresh\fR(3),
\fBresizeterm\fR(3).
.PP
Comparable functions in the wide-character (ncursesw) library are
described in
\fBcurs_get_wch\fR(3).
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
@


1.11
log
@typos;

diffs passed on to curses people.
@
text
@d1 2
a2 2
'\" t 
.\" $OpenBSD: curs_getch.3tbl,v 1.10 2001/02/28 22:58:53 millert Exp $
d5 1
a5 1
.\" Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d32 1
a32 1
.\" $From: curs_getch.3x,v 1.18 2001/02/25 00:20:30 tom Exp $
d34 2
d43 2
d47 1
a47 1

d62 9
a70 5
a character from the window.  In no-delay mode, if no input is waiting, the
value \fBERR\fR is returned.  In delay mode, the program waits until the system
passes text through to the program.  Depending on the setting of \fBcbreak\fR,
this is after one character (cbreak mode), or after the first newline (nocbreak
mode).  In half-delay mode, the program waits until a character is typed or the
d72 3
a74 2

Unless \fBnoecho\fR has been set, then the character will also be echoed into the
d82 1
a82 1

d86 1
a86 1

d88 2
a89 1
that function key is returned instead of the raw characters.  Possible function
d94 1
a94 1

d96 6
a101 4
(which, on modern terminals, means an escape character), \fBcurses\fR sets a
timer.  If the remainder of the sequence does not come in within the designated
time, the character is passed through; otherwise, the function key value is
returned.  For this reason, many terminals experience a delay between the time
d103 1
a103 1

d105 3
a107 3
returned by the next call to \fBwgetch\fR.  Note that there is, in effect,
just one input queue for all windows.

d110 2
a111 1
\fBgetch\fR if \fBkeypad\fR has been enabled.  Note that not all of these are
a118 1

d216 1
a216 1

d228 7
a234 3
returns TRUE or FALSE according to whether the current terminal type
recognizes a key with that value.

d239 11
d254 1
a254 1

d256 1
a256 1
keys, e.g., KEY_ENTER versus control/M, KEY_BACKSPACE versus control/H.
d261 2
a262 1
If it says that KEY_ENTER is control/M, \fBgetch\fR will return KEY_ENTER
d264 1
a264 1

d267 2
a268 1
(\fBecho\fR) should not be used at the same time.  Depending on the
d271 1
a271 1

d273 1
a273 1

d275 4
a278 2
function-key-rich keyboard of the AT&T 7300, aka 3B1, aka Safari 4.  Modern
personal computers usually have only a small subset of these.  IBM PC-style
d281 2
a282 1
\fBKEY_NPAGE\fR, \fBKEY_PPAGE\fR, and function keys 1 through 12.  The Ins key
d285 4
a288 2
The *get* functions are described in the XSI Curses standard, Issue 4.  They
read single-byte characters only.  The standard specifies that they return
d290 1
a290 1

d292 2
a293 1
characters was not specified in the SVr4 documentation.  This description is
d295 1
a295 1

d297 2
a298 1
unspecified in the SVr4 and XSI Curses documentation.  Under historical curses
d302 2
a303 2
input timeout or non-blocking mode hsd been set.

d307 2
a308 1
\fBEINTR\fR.  Under the \fBncurses\fR implementation, handled signals never
d310 3
a312 2

The \fBhas_key\fR function is unique to \fBncurses\fR.  We recommend that
d319 1
a319 1
\fBcurs_refresh\fR(3).
d321 4
@


1.10
log
@ncurses-5.2-20010224
@
text
@d2 1
a2 1
.\" $OpenBSD: curs_getch.3tbl,v 1.9 2000/07/10 03:06:06 millert Exp $
d81 1
a81 1
of 8-bit characters whose names begin with \fBKEY_.\fR Thus, a variable
d139 1
a139 1
KEY_LL/Home down or bottom (lower left).
d216 2
a217 2
returns TRUE or FALSE according as the current terminal type recognizes
a key with that value.
d234 1
a234 1
If it says that KEY_ENTER is control/M, \fBgetch\fR, will return KEY_ENTER
@


1.9
log
@ncurses 5.1
@
text
@d2 1
a2 1
.\" $OpenBSD: curs_getch.3tbl,v 1.8 2000/06/19 03:53:34 millert Exp $
d32 1
a32 1
.\" $From: curs_getch.3x,v 1.17 2000/07/01 16:45:36 tom Exp $
d227 9
@


1.8
log
@ncurses-5.0-20000617
@
text
@d2 1
a2 1
.\" $OpenBSD: curs_getch.3tbl,v 1.7 1999/01/18 19:07:12 millert Exp $
d5 1
a5 1
.\" Copyright (c) 1998 Free Software Foundation, Inc.                        *
d32 1
a32 1
.\" $From: curs_getch.3x,v 1.16 2000/05/27 22:48:05 tom Exp $
d35 6
a40 3
\fBgetch\fR, \fBwgetch\fR, \fBmvgetch\fR,
\fBmvwgetch\fR, \fBungetch\fR - get (or push back) characters from
\fBcurses\fR terminal keyboard
@


1.7
log
@ncurses-4.2-990116
@
text
@d2 1
a2 1
.\" $OpenBSD: curs_getch.3tbl,v 1.6 1998/09/13 19:16:18 millert Exp $
d32 1
a32 1
.\" $From: curs_getch.3x,v 1.15 1998/11/29 01:04:26 Rick.Ohnemus Exp $
d62 1
a62 1
If \fBnoecho\fR has been set, then the character will also be echoed into the
@


1.6
log
@ncurses-4.2-980905
@
text
@d2 1
a2 1
.\" $OpenBSD$
d32 1
a32 1
.\" $From: curs_getch.3x,v 1.14 1998/08/27 21:21:04 Rick.Ohnemus Exp $
@


1.5
log
@ncurses-4.2-980718
@
text
@d1 3
d32 1
a32 3
'\" t
.\" $From: curs_getch.3x,v 1.13 1998/03/11 21:12:53 juergen Exp $
.\" $OpenBSD$
d259 1
a259 1
\fBEINTR\fR.  Under this \fBcurses\fR implementation, handled signals never
d262 2
a263 3
The \fBhas_key\fR function is unique to this version of \fBcurses\fR.  We
recommend that any code using it be conditionalized on the
\fBNCURSES_VERSION\fR feature macro.
@


1.4
log
@ncurses-4.1-971213
@
text
@d1 28
d30 2
a31 2
.\" $OpenBSD: curs_getch.3tbl,v 1.3 1997/12/03 05:45:08 millert Exp $
.\" Id: curs_getch.3x,v 1.12 1997/12/13 22:39:05 tom Exp $
d258 1
a258 1
\fBEINTR\fR.  Under the \fBcurses\fR implementation, handled signals never
d261 3
a263 2
The \fBhas_key\fR function is unique to \fBcurses\fR.  We recommend that
any code using it be conditionalized on the \fBNCURSES_VERSION\fR feature macro.
d269 1
a269 1
\fBcurs_refresh\fR(3),
@


1.3
log
@3X-> 3
@
text
@d1 3
a3 2
.\" $OpenBSD: curs_getch.3tbl,v 1.2 1997/12/03 05:20:54 millert Exp $
.\" Id: curs_getch.3x,v 1.11 1997/11/02 00:20:41 tom Exp $
@


1.2
log
@Merge of ncurses-4.1-971129
@
text
@d1 1
a1 1
.\" $OpenBSD$
d3 1
a3 1
.TH curs_getch 3X ""
@


1.1
log
@Need to run these through tbl.
@
text
@d1 2
a2 1
.\" Id: curs_getch.3x,v 1.10 1997/01/05 11:57:54 Jesse.Thilo Exp $
d125 1
d135 1
d233 1
a233 1
any code using it be conditionalized on the NCURSES feature macro.
d235 6
a240 2
\fBcurses\fR(3X), \fBcurs_inopts\fR(3X), \fBcurs_move\fR(3X),
\fBcurs_refresh\fR(3X).
@
