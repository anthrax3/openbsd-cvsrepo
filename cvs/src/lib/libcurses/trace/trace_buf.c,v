head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.30
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.32
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.28
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.24
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.26
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.18
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.22
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.20
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.38
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.34
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.32
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.30
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.28
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.26
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.24
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.22
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.20
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.18
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.16
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.14
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2010.01.12.23.22.07;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.22.18.01.58;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.03.02.06.23.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.25;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Thomas E. Dickey                 1997-on                        *
 ****************************************************************************/
/*
 *	trace_buf.c - Tracing/Debugging buffers (attributes)
 */

#include <curses.priv.h>

MODULE_ID("$Id: trace_buf.c,v 1.14 2008/08/03 15:13:56 tom Exp $")

#define MyList _nc_globals.tracebuf_ptr
#define MySize _nc_globals.tracebuf_used

static char *
_nc_trace_alloc(int bufnum, size_t want)
{
#ifdef TRACE
    char *result = 0;

    if (bufnum >= 0) {
	if ((size_t) (bufnum + 1) > MySize) {
	    size_t need = (bufnum + 1) * 2;
	    if ((MyList = typeRealloc(TRACEBUF, need, MyList)) != 0) {
		while (need > MySize)
		    MyList[MySize++].text = 0;
	    }
	}

	if (MyList != 0) {
	    if (MyList[bufnum].text == 0
		|| want > MyList[bufnum].size) {
		MyList[bufnum].text = typeRealloc(char, want, MyList[bufnum].text);
		if (MyList[bufnum].text != 0)
		    MyList[bufnum].size = want;
	    }
	    result = MyList[bufnum].text;
	}
    }
#if NO_LEAKS
    else {
	if (MySize) {
	    if (MyList) {
		while (MySize--) {
		    if (MyList[MySize].text != 0) {
			free(MyList[MySize].text);
		    }
		}
		free(MyList);
		MyList = 0;
	    }
	    MySize = 0;
	}
    }
#endif
    return result;
#else
    return NULL;
#endif
}

/*
 * (re)Allocate a buffer big enough for the caller's wants.
 */
NCURSES_EXPORT(char *)
_nc_trace_buf(int bufnum, size_t want)
{
    char *result = _nc_trace_alloc(bufnum, want);
    if (result != 0)
	*result = '\0';
    return result;
}

/*
 * Append a new string to an existing buffer.
 */
NCURSES_EXPORT(char *)
_nc_trace_bufcat(int bufnum, const char *value)
{
    char *buffer = _nc_trace_alloc(bufnum, 0);
    if (buffer != 0) {
        size_t have = strlen(buffer), length;

	length = 1 + have + strlen(value);
	buffer = _nc_trace_alloc(bufnum, length);
	if (buffer != 0)
	     (void) strlcpy(buffer + have, value, length);

    }
    return buffer;
}
@


1.3
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: trace_buf.c,v 1.2 1999/03/02 06:23:29 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d32 1
a32 1
 *  Author: Thomas E. Dickey <dickey@@clark.net> 1997                        *
d40 1
a40 1
MODULE_ID("$From: trace_buf.c,v 1.9 2000/12/10 03:02:45 tom Exp $")
d42 2
a43 4
typedef struct {
    char *text;
    size_t size;
} LIST;
d45 2
a46 2
NCURSES_EXPORT(char *)
_nc_trace_buf(int bufnum, size_t want)
d48 11
a58 2
    static LIST *list;
    static size_t have;
d60 10
d71 10
a80 4
    if (bufnum < 0) {
	if (have) {
	    while (have--) {
		free(list[have].text);
d82 1
a82 1
	    free(list);
a83 1
	return 0;
d86 5
d92 26
a117 7
    if ((size_t) (bufnum + 1) > have) {
	size_t need = (bufnum + 1) * 2;
	if ((list = typeRealloc(LIST, need, list)) == 0)
	    return (0);
	while (need > have)
	    list[have++].text = 0;
    }
a118 5
    if (list[bufnum].text == 0
	|| want > list[bufnum].size) {
	if ((list[bufnum].text = typeRealloc(char, want, list[bufnum].text))
	    != 0)
	      list[bufnum].size = want;
d120 1
a120 4

    if (list[bufnum].text != 0)
	*(list[bufnum].text) = '\0';
    return list[bufnum].text;
@


1.2
log
@ncurses-4.2-990301
@
text
@d1 1
a1 1
/*	$OpenBSD: trace_buf.c,v 1.1 1999/01/18 19:10:25 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d40 1
a40 1
MODULE_ID("$From: trace_buf.c,v 1.7 1999/02/27 19:50:58 tom Exp $")
d43 2
a44 2
	char *text;
	size_t size;
d47 2
a48 1
char * _nc_trace_buf(int bufnum, size_t want)
d50 2
a51 2
	static LIST *list;
	static size_t have;
d54 6
a59 8
	if (bufnum < 0) {
		if (have) {
			while (have--) {
				free(list[have].text);
			}
			free(list);
		}
		return 0;
d61 2
d65 18
a82 18
	if ((size_t)(bufnum+1) > have) {
		size_t need = (bufnum + 1) * 2;
		if ((list = typeRealloc(LIST, need, list)) == 0)
			return(0);
		while (need > have)
			list[have++].text = 0;
	}

	if (list[bufnum].text == 0
	 || want > list[bufnum].size)
	{
		if ((list[bufnum].text = typeRealloc(char, want, list[bufnum].text)) != 0)
			list[bufnum].size = want;
	}

	if (list[bufnum].text != 0)
		*(list[bufnum].text) = '\0';
	return list[bufnum].text;
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: trace_buf.c,v 1.5 1998/09/13 19:16:31 millert Exp $	*/
d40 1
a40 1
MODULE_ID("$From: trace_buf.c,v 1.6 1998/08/15 23:37:25 tom Exp $")
d66 1
a66 2
		size_t used = sizeof(*list) * need;
		if ((list = (LIST *)_nc_doalloc(list, used)) == 0)
d75 1
a75 1
		if ((list[bufnum].text = (char *)_nc_doalloc(list[bufnum].text, want)) != 0)
@

