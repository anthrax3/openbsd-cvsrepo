head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.32
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.28
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.24
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.26
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.18
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.22
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.20
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.8
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2010.01.12.23.22.07;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.17.19.16.59;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.22.18.01.58;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.24;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Thomas E. Dickey 1996-on                                        *
 *     and: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/

/*
 *	lib_tracedmp.c - Tracing/Debugging routines
 */

#include <curses.priv.h>
#include <ctype.h>

MODULE_ID("$Id: lib_tracedmp.c,v 1.31 2008/08/16 19:30:56 tom Exp $")

#ifdef TRACE

#define my_buffer _nc_globals.tracedmp_buf
#define my_length _nc_globals.tracedmp_used

NCURSES_EXPORT(void)
_tracedump(const char *name, WINDOW *win)
{
    int i, j, n, width;

    /* compute narrowest possible display width */
    for (width = i = 0; i <= win->_maxy; ++i) {
	n = 0;
	for (j = 0; j <= win->_maxx; ++j) {
	    if (CharOf(win->_line[i].text[j]) != L(' ')
		|| AttrOf(win->_line[i].text[j]) != A_NORMAL
		|| GetPair(win->_line[i].text[j]) != 0) {
		n = j;
	    }
	}

	if (n > width)
	    width = n;
    }
    if (width < win->_maxx)
	++width;
    if (++width + 1 > (int) my_length) {
	my_length = 2 * (width + 1);
	my_buffer = typeRealloc(char, my_length, my_buffer);
    }

    for (n = 0; n <= win->_maxy; ++n) {
	char *ep = my_buffer;
	bool haveattrs, havecolors;

	/*
	 * Dump A_CHARTEXT part.  It is more important to make the grid line up
	 * in the trace file than to represent control- and wide-characters, so
	 * we map those to '.' and '?' respectively.
	 */
	for (j = 0; j < width; ++j) {
	    chtype test = CharOf(win->_line[n].text[j]);
	    ep[j] = (char) ((UChar(test) == test
#if USE_WIDEC_SUPPORT
			     && (win->_line[n].text[j].chars[1] == 0)
#endif
			    )
			    ? (iscntrl(UChar(test))
			       ? '.'
			       : UChar(test))
			    : '?');
	}
	ep[j] = '\0';
	_tracef("%s[%2d] %3ld%3ld ='%s'",
		name, n,
		(long) win->_line[n].firstchar,
		(long) win->_line[n].lastchar,
		ep);

	/* if there are multi-column characters on the line, print them now */
	if_WIDEC({
	    bool multicolumn = FALSE;
	    for (j = 0; j < width; ++j)
		if (WidecExt(win->_line[n].text[j]) != 0) {
		    multicolumn = TRUE;
		    break;
		}
	    if (multicolumn) {
		ep = my_buffer;
		for (j = 0; j < width; ++j) {
		    int test = WidecExt(win->_line[n].text[j]);
		    if (test) {
			ep[j] = (char) (test + '0');
		    } else {
			ep[j] = ' ';
		    }
		}
		ep[j] = '\0';
		_tracef("%*s[%2d]%*s='%s'", (int) strlen(name),
			"widec", n, 8, " ", my_buffer);
	    }
	});

	/* dump A_COLOR part, will screw up if there are more than 96 */
	havecolors = FALSE;
	for (j = 0; j < width; ++j)
	    if (GetPair(win->_line[n].text[j]) != 0) {
		havecolors = TRUE;
		break;
	    }
	if (havecolors) {
	    ep = my_buffer;
	    for (j = 0; j < width; ++j) {
		int pair = GetPair(win->_line[n].text[j]);
		if (pair >= 52)
		    ep[j] = '?';
		else if (pair >= 36)
		    ep[j] = (char) (pair + 'A');
		else if (pair >= 10)
		    ep[j] = (char) (pair + 'a');
		else if (pair >= 1)
		    ep[j] = (char) (pair + '0');
		else
		    ep[j] = ' ';
	    }
	    ep[j] = '\0';
	    _tracef("%*s[%2d]%*s='%s'", (int) strlen(name),
		    "colors", n, 8, " ", my_buffer);
	}

	for (i = 0; i < 4; ++i) {
	    const char *hex = " 123456789ABCDEF";
	    attr_t mask = (0xf << ((i + 4) * 4));

	    haveattrs = FALSE;
	    for (j = 0; j < width; ++j)
		if (AttrOf(win->_line[n].text[j]) & mask) {
		    haveattrs = TRUE;
		    break;
		}
	    if (haveattrs) {
		ep = my_buffer;
		for (j = 0; j < width; ++j)
		    ep[j] = hex[(AttrOf(win->_line[n].text[j]) & mask) >>
				((i + 4) * 4)];
		ep[j] = '\0';
		_tracef("%*s%d[%2d]%*s='%s'", (int) strlen(name) -
			1, "attrs", i, n, 8, " ", my_buffer);
	    }
	}
    }
#if NO_LEAKS
    free(my_buffer);
    my_buffer = 0;
    my_length = 0;
#endif
}

#else
EMPTY_MODULE(_nc_lib_tracedmp)
#endif /* TRACE */
@


1.3
log
@use snprintf throughout
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracedmp.c,v 1.2 2001/01/22 18:01:58 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d32 2
a33 1
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
d42 1
d44 1
a44 1
MODULE_ID("$From: lib_tracedmp.c,v 1.16 2000/12/10 03:02:45 tom Exp $")
d47 4
d57 1
a57 1
    for (width = i = 0; i <= win->_maxy; i++) {
d59 4
a62 2
	for (j = 0; j <= win->_maxx; j++)
	    if (win->_line[i].text[j] != ' ')
d64 2
d72 4
d77 2
a78 2
    for (n = 0; n <= win->_maxy; n++) {
	char buf[BUFSIZ], *ep;
d81 16
a96 10
	/* dump A_CHARTEXT part */
	(void) snprintf(buf, sizeof(buf), "%s[%2d] %3d%3d ='",
		        name, n,
		        win->_line[n].firstchar,
		        win->_line[n].lastchar);
	ep = buf + strlen(buf);
	for (j = 0; j <= width; j++) {
	    ep[j] = TextOf(win->_line[n].text[j]);
	    if (ep[j] == 0)
		ep[j] = '.';
d98 30
a127 3
	ep[j] = '\'';
	ep[j + 1] = '\0';
	_tracef("%s", buf);
d131 2
a132 2
	for (j = 0; j <= width; j++)
	    if (win->_line[n].text[j] & A_COLOR) {
d137 17
a153 8
	    (void) snprintf(buf, sizeof(buf), "%*s[%2d]%*s='",
			    (int) strlen(name), "colors", n, 8, " ");
	    ep = buf + strlen(buf);
	    for (j = 0; j <= width; j++)
		ep[j] = CharOf(win->_line[n].text[j] >> 8) + ' ';
	    ep[j] = '\'';
	    ep[j + 1] = '\0';
	    _tracef("%s", buf);
d156 1
a156 1
	for (i = 0; i < 4; i++) {
d158 1
a158 1
	    chtype mask = (0xf << ((i + 4) * 4));
d161 2
a162 2
	    for (j = 0; j <= width; j++)
		if (win->_line[n].text[j] & mask) {
d167 7
a173 8
		(void) snprintf(buf, sizeof(buf), "%*s%d[%2d]%*s='",
				(int) strlen(name) - 1, "attrs", i, n, 8, " ");
		ep = buf + strlen(buf);
		for (j = 0; j <= width; j++)
		    ep[j] = hex[(win->_line[n].text[j] & mask) >> ((i + 4) * 4)];
		ep[j] = '\'';
		ep[j + 1] = '\0';
		_tracef("%s", buf);
d177 5
d183 1
d185 1
a185 7
extern
NCURSES_EXPORT(void)
_nc_lib_tracedmp(void);
NCURSES_EXPORT(void)
_nc_lib_tracedmp(void)
{
}
@


1.2
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracedmp.c,v 1.1 1999/01/18 19:10:24 millert Exp $	*/
d68 4
a71 4
	(void) sprintf(buf, "%s[%2d] %3d%3d ='",
		       name, n,
		       win->_line[n].firstchar,
		       win->_line[n].lastchar);
d90 2
a91 2
	    (void) sprintf(buf, "%*s[%2d]%*s='", (int) strlen(name),
			   "colors", n, 8, " ");
d111 2
a112 2
		(void) sprintf(buf, "%*s%d[%2d]%*s='", (int) strlen(name) -
			       1, "attrs", i, n, 8, " ");
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracedmp.c,v 1.3 1998/07/23 21:19:42 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d42 1
a42 1
MODULE_ID("$From: lib_tracedmp.c,v 1.13 1998/03/21 18:39:44 tom Exp $")
d45 2
a46 1
void _tracedump(const char *name, WINDOW *win)
d48 1
a48 1
    int	i, j, n, width;
d51 1
a51 2
    for (width = i = 0; i <= win->_maxy; i++)
    {
d54 2
a55 2
	  if (win->_line[i].text[j] != ' ')
	    n = j;
d58 1
a58 1
	  width = n;
d61 1
a61 1
      ++width;
d63 2
a64 3
    for (n = 0; n <= win->_maxy; n++)
    {
	char	buf[BUFSIZ], *ep;
d69 3
a71 3
		name, n,
		win->_line[n].firstchar,
		win->_line[n].lastchar);
d76 1
a76 1
	    	ep[j] = '.';
d79 1
a79 1
	ep[j+1] = '\0';
d85 1
a85 2
	    if (win->_line[n].text[j] & A_COLOR)
	    {
d89 3
a91 3
	if (havecolors)
	{
	    (void) sprintf(buf, "%*s[%2d]%*s='", (int)strlen(name), "colors", n, 8, " ");
d94 1
a94 1
		ep[j] = ((win->_line[n].text[j] >> 8) & 0xff) + ' ';
d96 1
a96 1
	    ep[j+1] = '\0';
d100 3
a102 4
	for (i = 0; i < 4; i++)
	{
	    const char	*hex = " 123456789ABCDEF";
	    chtype	mask = (0xf << ((i + 4) * 4));
d106 1
a106 2
		if (win->_line[n].text[j] & mask)
		{
d110 3
a112 3
	    if (haveattrs)
	    {
		(void) sprintf(buf, "%*s%d[%2d]%*s='", (int)strlen(name)-1, "attrs", i, n, 8, " ");
d117 1
a117 1
		ep[j+1] = '\0';
d124 7
a130 2
extern	void _nc_lib_tracedmp(void);
	void _nc_lib_tracedmp(void) { }
@

