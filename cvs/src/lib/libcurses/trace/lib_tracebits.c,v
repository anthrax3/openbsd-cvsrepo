head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.30
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.32
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.28
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.24
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.26
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.18
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.22
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.30
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.26
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.24
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.22
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.20
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.18
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.16
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.14
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.12
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.10
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.8
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.6
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.4
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.8
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.6
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2010.01.12.23.22.07;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.18.16.55.54;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.22.18.01.58;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.08.22.47.04;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.24.04.06.11;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.10.01.35.05;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.09.05.06.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.08.22.17.42.37;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.03.15.19.12.23;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.24;	author millert;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Thomas E. Dickey                        1996-on                 *
 ****************************************************************************/

#include <curses.priv.h>
#include <term.h>		/* cur_term */

MODULE_ID("$Id: lib_tracebits.c,v 1.17 2008/08/03 16:09:26 tom Exp $")

#if SVR4_TERMIO && !defined(_POSIX_SOURCE)
#define _POSIX_SOURCE
#endif

#if HAVE_SYS_TERMIO_H
#include <sys/termio.h>		/* needed for ISC */
#endif

#ifdef __EMX__
#include <io.h>
#endif

/* may be undefined if we're using termio.h */
#ifndef TOSTOP
#define TOSTOP 0
#endif

#ifndef IEXTEN
#define IEXTEN 0
#endif

#ifndef ONLCR
#define ONLCR 0
#endif

#ifndef OCRNL
#define OCRNL 0
#endif

#ifndef ONOCR
#define ONOCR 0
#endif

#ifndef ONLRET
#define ONLRET 0
#endif

#ifdef TRACE

typedef struct {
    unsigned int val;
    const char *name;
} BITNAMES;

static void
lookup_bits(char *buf, size_t bufsize, const BITNAMES * table, const char *label, unsigned int val)
{
    const BITNAMES *sp;

    (void) strlcat(buf, label, bufsize);
    (void) strlcat(buf, ": {", bufsize);
    for (sp = table; sp->name; sp++)
	if (sp->val != 0
	    && (val & sp->val) == sp->val) {
	    (void) strlcat(buf, sp->name, bufsize);
	    (void) strlcat(buf, ", ", bufsize);
	}
    if (buf[strlen(buf) - 2] == ',')
	buf[strlen(buf) - 2] = '\0';
    (void) strlcat(buf, "} ", bufsize);
}

NCURSES_EXPORT(char *)
_nc_trace_ttymode(TTY * tty)
/* describe the state of the terminal control bits exactly */
{
    char *buf;
    size_t bufsize;

#ifdef TERMIOS
    static const BITNAMES iflags[] =
    {
	{BRKINT, "BRKINT"},
	{IGNBRK, "IGNBRK"},
	{IGNPAR, "IGNPAR"},
	{PARMRK, "PARMRK"},
	{INPCK, "INPCK"},
	{ISTRIP, "ISTRIP"},
	{INLCR, "INLCR"},
	{IGNCR, "IGNC"},
	{ICRNL, "ICRNL"},
	{IXON, "IXON"},
	{IXOFF, "IXOFF"},
	{0, NULL}
#define ALLIN	(BRKINT|IGNBRK|IGNPAR|PARMRK|INPCK|ISTRIP|INLCR|IGNCR|ICRNL|IXON|IXOFF)
    }, oflags[] =
    {
	{OPOST, "OPOST"},
	{OFLAGS_TABS, "XTABS"},
	{ONLCR, "ONLCR"},
	{OCRNL, "OCRNL"},
	{ONOCR, "ONOCR"},
	{ONLRET, "ONLRET"},
	{0, NULL}
#define ALLOUT	(OPOST|OFLAGS_TABS|ONLCR|OCRNL|ONOCR|ONLRET)
    }, cflags[] =
    {
	{CLOCAL, "CLOCAL"},
	{CREAD, "CREAD"},
	{CSTOPB, "CSTOPB"},
#if !defined(CS5) || !defined(CS8)
	{CSIZE, "CSIZE"},
#endif
	{HUPCL, "HUPCL"},
	{PARENB, "PARENB"},
	{PARODD | PARENB, "PARODD"},	/* concession to readability */
	{0, NULL}
#define ALLCTRL	(CLOCAL|CREAD|CSIZE|CSTOPB|HUPCL|PARENB|PARODD)
    }, lflags[] =
    {
	{ECHO, "ECHO"},
	{ECHOE | ECHO, "ECHOE"},	/* concession to readability */
	{ECHOK | ECHO, "ECHOK"},	/* concession to readability */
	{ECHONL, "ECHONL"},
	{ICANON, "ICANON"},
	{ISIG, "ISIG"},
	{NOFLSH, "NOFLSH"},
	{TOSTOP, "TOSTOP"},
	{IEXTEN, "IEXTEN"},
	{0, NULL}
#define ALLLOCAL	(ECHO|ECHONL|ICANON|ISIG|NOFLSH|TOSTOP|IEXTEN)
    };

    bufsize = 8 + sizeof(iflags) + 8 + sizeof(oflags) + 8 + sizeof(cflags) +
	8 + sizeof(lflags) + 8;
    buf = _nc_trace_buf(0, bufsize);

    if (buf != 0) {

	if (tty->c_iflag & ALLIN)
	    lookup_bits(buf, bufsize, iflags, "iflags", tty->c_iflag);

	if (tty->c_oflag & ALLOUT)
	    lookup_bits(buf, bufsize, oflags, "oflags", tty->c_oflag);

	if (tty->c_cflag & ALLCTRL)
	    lookup_bits(buf, bufsize, cflags, "cflags", tty->c_cflag);

#if defined(CS5) && defined(CS8)
	{
	    static struct {
		int value;
		const char *name;
	    } csizes[] = {
#define CS_DATA(name) { name, #name " " }
		CS_DATA(CS5),
#ifdef CS6
		    CS_DATA(CS6),
#endif
#ifdef CS7
		    CS_DATA(CS7),
#endif
		    CS_DATA(CS8),
	    };
	    const char *result = "CSIZE? ";
	    int value = (tty->c_cflag & CSIZE);
	    unsigned n;

	    if (value != 0) {
		for (n = 0; n < SIZEOF(csizes); n++) {
		    if (csizes[n].value == value) {
			result = csizes[n].name;
			break;
		    }
		}
	    }
	    strlcat(buf, result, bufsize);
	}
#endif

	if (tty->c_lflag & ALLLOCAL)
	    lookup_bits(buf, bufsize, lflags, "lflags", tty->c_lflag);
    }
#else
    /* reference: ttcompat(4M) on SunOS 4.1 */
#ifndef EVENP
#define EVENP 0
#endif
#ifndef LCASE
#define LCASE 0
#endif
#ifndef LLITOUT
#define LLITOUT 0
#endif
#ifndef ODDP
#define ODDP 0
#endif
#ifndef TANDEM
#define TANDEM 0
#endif

    static const BITNAMES cflags[] =
    {
	{CBREAK, "CBREAK"},
	{CRMOD, "CRMOD"},
	{ECHO, "ECHO"},
	{EVENP, "EVENP"},
	{LCASE, "LCASE"},
	{LLITOUT, "LLITOUT"},
	{ODDP, "ODDP"},
	{RAW, "RAW"},
	{TANDEM, "TANDEM"},
	{XTABS, "XTABS"},
	{0, NULL}
#define ALLCTRL	(CBREAK|CRMOD|ECHO|EVENP|LCASE|LLITOUT|ODDP|RAW|TANDEM|XTABS)
    };

    buf = _nc_trace_buf(0,
			8 + sizeof(cflags));
    if (buf != 0) {
	if (tty->sg_flags & ALLCTRL) {
	    lookup_bits(buf, cflags, "cflags", tty->sg_flags);
	}
    }
#endif
    return (buf);
}

NCURSES_EXPORT(char *)
_nc_tracebits(void)
{
    return _nc_trace_ttymode(&(cur_term->Nttyb));
}
#else
NCURSES_EXPORT(char *)
_nc_tracebits(void)
{
	return NULL;
}
#endif /* TRACE */
@


1.9
log
@Use strlcpy() / strlcat() throughout.
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracebits.c,v 1.8 2001/01/22 18:01:58 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999,2000 Free Software Foundation, Inc.              *
d34 1
d40 1
a40 1
MODULE_ID("$From: lib_tracebits.c,v 1.9 2000/12/10 03:02:45 tom Exp $")
d58 1
d63 16
d105 1
a105 1
_nc_tracebits(void)
d130 5
d136 1
a136 1
#define ALLOUT	(OPOST)
d166 1
a166 1
	      8 + sizeof(lflags) + 8;
d169 4
a172 2
    if (cur_term->Nttyb.c_iflag & ALLIN)
	lookup_bits(buf, bufsize, iflags, "iflags", cur_term->Nttyb.c_iflag);
d174 2
a175 2
    if (cur_term->Nttyb.c_oflag & ALLOUT)
	lookup_bits(buf, bufsize, oflags, "oflags", cur_term->Nttyb.c_oflag);
d177 2
a178 2
    if (cur_term->Nttyb.c_cflag & ALLCTRL)
	lookup_bits(buf, bufsize, cflags, "cflags", cur_term->Nttyb.c_cflag);
d181 7
a187 8
    {
	static struct {
	    char *name;
	    int value;
	} csizes[] = {
	    {
		"CS5 ", CS5
	    },
d189 1
a189 3
	    {
		"CS6 ", CS6
	    },
d192 14
a205 17
	    {
		"CS7 ", CS7
	    },
#endif
	    {
		"CS8 ", CS8
	    },
	};
	char *result = "CSIZE? ";
	int value = (cur_term->Nttyb.c_cflag & CSIZE);
	unsigned n;

	if (value != 0) {
	    for (n = 0; n < SIZEOF(csizes); n++) {
		if (csizes[n].value == value) {
		    result = csizes[n].name;
		    break;
d208 1
a209 2
	strlcat(buf, result, bufsize);
    }
d212 3
a214 3
    if (cur_term->Nttyb.c_lflag & ALLLOCAL)
	lookup_bits(buf, bufsize, lflags, "lflags", cur_term->Nttyb.c_lflag);

d251 4
a254 3

    if (cur_term->Nttyb.sg_flags & ALLCTRL) {
	lookup_bits(buf, bufsize, cflags, "cflags", cur_term->Nttyb.sg_flags);
d259 6
d269 1
a269 2
    static char tmp[] = "";
    return tmp;
@


1.8
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracebits.c,v 1.7 2000/10/08 22:47:04 millert Exp $	*/
d69 1
a69 1
lookup_bits(char *buf, const BITNAMES * table, const char *label, unsigned int val)
d73 2
a74 2
    (void) strcat(buf, label);
    (void) strcat(buf, ": {");
d78 2
a79 2
	    (void) strcat(buf, sp->name);
	    (void) strcat(buf, ", ");
d83 1
a83 1
    (void) strcat(buf, "} ");
d91 1
d142 3
a144 6
    buf = _nc_trace_buf(0,
			8 + sizeof(iflags) +
			8 + sizeof(oflags) +
			8 + sizeof(cflags) +
			8 + sizeof(lflags) +
			8);
d147 1
a147 1
	lookup_bits(buf, iflags, "iflags", cur_term->Nttyb.c_iflag);
d150 1
a150 1
	lookup_bits(buf, oflags, "oflags", cur_term->Nttyb.c_oflag);
d153 1
a153 1
	lookup_bits(buf, cflags, "cflags", cur_term->Nttyb.c_cflag);
d190 1
a190 1
	strcat(buf, result);
d195 1
a195 1
	lookup_bits(buf, lflags, "lflags", cur_term->Nttyb.c_lflag);
d235 1
a235 1
	lookup_bits(buf, cflags, "cflags", cur_term->Nttyb.sg_flags);
@


1.7
log
@update to ncurses-5.1-20001007
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracebits.c,v 1.6 2000/07/24 04:06:11 millert Exp $	*/
d39 1
a39 1
MODULE_ID("$From: lib_tracebits.c,v 1.7 2000/09/02 18:08:37 tom Exp $")
d86 1
a86 1
char *
d142 5
a146 5
	8 + sizeof(iflags) +
	8 + sizeof(oflags) +
	8 + sizeof(cflags) +
	8 + sizeof(lflags) +
	8);
d234 1
a234 1
	8 + sizeof(cflags));
d243 1
a243 1
char *
@


1.6
log
@Update to ncurses-5.1-20000722
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracebits.c,v 1.5 2000/03/10 01:35:05 millert Exp $	*/
d39 1
a39 1
MODULE_ID("$From: lib_tracebits.c,v 1.6 2000/07/23 00:22:32 tom Exp $")
d41 1
a41 1
#if defined(SVR4_TERMIO) && !defined(_POSIX_SOURCE)
@


1.5
log
@Update to ncurses-5.0-20000304
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracebits.c,v 1.4 2000/01/09 05:06:02 millert Exp $	*/
d39 1
a39 1
MODULE_ID("$From: lib_tracebits.c,v 1.5 2000/02/13 01:01:55 tom Exp $")
d158 35
a192 24
    switch (cur_term->Nttyb.c_cflag & CSIZE) {
#if defined(CS5) && (CS5 != 0)
    case CS5:
	strcat(buf, "CS5 ");
	break;
#endif
#if defined(CS6) && (CS6 != 0)
    case CS6:
	strcat(buf, "CS6 ");
	break;
#endif
#if defined(CS7) && (CS7 != 0)
    case CS7:
	strcat(buf, "CS7 ");
	break;
#endif
#if defined(CS8) && (CS8 != 0)
    case CS8:
	strcat(buf, "CS8 ");
	break;
#endif
    default:
	strcat(buf, "CSIZE? ");
	break;
@


1.4
log
@Update to ncurses-5.0-20000108:
+ add prototype for erase() to curses.h
+ add TRACE_DATABASE flag for trace().
+ formatting changes (style)
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracebits.c,v 1.3 1999/08/22 17:42:37 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998-2000 Free Software Foundation, Inc.                   *
d39 1
a39 1
MODULE_ID("$From: lib_tracebits.c,v 1.4 2000/01/08 17:41:41 tom Exp $")
@


1.3
log
@ncurses-5.0-990821
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracebits.c,v 1.2 1999/03/15 19:12:23 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d37 1
a37 1
#include <term.h>	/* cur_term */
d39 1
a39 1
MODULE_ID("$From: lib_tracebits.c,v 1.3 1999/08/21 21:43:48 tom Exp $")
d46 1
a46 1
#include <sys/termio.h>	/* needed for ISC */
a50 1
#include <fcntl.h>
d63 4
a66 1
typedef struct {unsigned int val; const char *name;} BITNAMES;
d68 2
a69 1
static void lookup_bits(char *buf, const BITNAMES *table, const char *label, unsigned int val)
d71 1
a71 1
	const BITNAMES *sp;
d73 11
a83 12
	(void) strcat(buf, label);
	(void) strcat(buf, ": {");
	for (sp = table; sp->name; sp++)
		if (sp->val != 0
		&& (val & sp->val) == sp->val)
		{
			(void) strcat(buf, sp->name);
			(void) strcat(buf, ", ");
		}
	if (buf[strlen(buf) - 2] == ',')
		buf[strlen(buf) - 2] = '\0';
	(void) strcat(buf,"} ");
d86 2
a87 1
char *_nc_tracebits(void)
d90 1
a90 2
char	*buf;
static const	BITNAMES
d93 1
a93 1
iflags[] =
d95 12
a106 12
	{BRKINT,	"BRKINT"},
	{IGNBRK,	"IGNBRK"},
	{IGNPAR,	"IGNPAR"},
	{PARMRK,	"PARMRK"},
	{INPCK, 	"INPCK"},
	{ISTRIP,	"ISTRIP"},
	{INLCR, 	"INLCR"},
	{IGNCR, 	"IGNC"},
	{ICRNL, 	"ICRNL"},
	{IXON,  	"IXON"},
	{IXOFF, 	"IXOFF"},
	{0,		NULL}
d108 1
a108 2
    },
oflags[] =
d110 2
a111 2
	{OPOST, 	"OPOST"},
	{0,		NULL}
d113 1
a113 2
    },
cflags[] =
d115 3
a117 3
	{CLOCAL,	"CLOCAL"},
	{CREAD, 	"CREAD"},
	{CSTOPB,	"CSTOPB"},
d119 1
a119 1
	{CSIZE, 	"CSIZE"},
d121 4
a124 4
	{HUPCL, 	"HUPCL"},
	{PARENB,	"PARENB"},
	{PARODD|PARENB,	"PARODD"},	/* concession to readability */
	{0,		NULL}
d126 1
a126 2
    },
lflags[] =
d128 10
a137 10
	{ECHO,  	"ECHO"},
	{ECHOE|ECHO, 	"ECHOE"},	/* concession to readability */
	{ECHOK|ECHO, 	"ECHOK"},	/* concession to readability */
	{ECHONL,	"ECHONL"},
	{ICANON,	"ICANON"},
	{ISIG,  	"ISIG"},
	{NOFLSH,	"NOFLSH"},
	{TOSTOP,	"TOSTOP"},
	{IEXTEN,	"IEXTEN"},
	{0,		NULL}
a140 1

d142 4
a145 4
    	8 + sizeof(iflags) +
    	8 + sizeof(oflags) +
    	8 + sizeof(cflags) +
    	8 + sizeof(lflags) +
d160 3
a162 1
    case CS5:	strcat(buf, "CS5 ");	break;
d165 3
a167 1
    case CS6:	strcat(buf, "CS6 ");	break;
d170 3
a172 1
    case CS7:	strcat(buf, "CS7 ");	break;
d175 7
a181 3
    case CS8:	strcat(buf, "CS8 ");	break;
#endif
    default:	strcat(buf, "CSIZE? ");	break;
d206 1
a206 1
cflags[] =
d208 11
a218 11
	{CBREAK,	"CBREAK"},
	{CRMOD,		"CRMOD"},
	{ECHO,		"ECHO"},
	{EVENP,		"EVENP"},
	{LCASE,		"LCASE"},
	{LLITOUT,	"LLITOUT"},
	{ODDP,		"ODDP"},
	{RAW,		"RAW"},
	{TANDEM,	"TANDEM"},
	{XTABS,		"XTABS"},
	{0,		NULL}
d223 1
a223 1
    	8 + sizeof(cflags));
d225 1
a225 2
    if (cur_term->Nttyb.sg_flags & ALLCTRL)
    {
a227 1

d229 1
a229 1
    return(buf);
d232 6
a237 1
char *_nc_tracebits(void) { static char tmp[] = ""; return tmp; }
@


1.2
log
@ncurses-4.2-990314
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracebits.c,v 1.1 1999/01/18 19:10:24 millert Exp $	*/
d39 1
a39 1
MODULE_ID("$From: lib_tracebits.c,v 1.2 1999/03/14 12:27:03 tom Exp $")
d161 1
d163 2
d166 2
d169 2
d172 1
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tracebits.c,v 1.1 1998/11/17 03:16:21 millert Exp $	*/
d39 1
a39 1
MODULE_ID("$From: lib_tracebits.c,v 1.1 1998/11/08 00:20:32 tom Exp $")
d218 1
a218 1
char *_nc_tracebits(void) { return ""; }
@

