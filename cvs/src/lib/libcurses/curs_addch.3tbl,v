head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.30
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.32
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.28
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.24
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.26
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.18
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.22
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.28
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.24
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.22
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.20
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.18
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.12
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.10
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.8
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.6
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.6
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.4
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4;
locks; strict;
comment	@# @;


1.11
date	2010.01.12.23.21.58;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.12.11.06.49;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.10.03.06.04;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.02.11.00.09.36;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.01.18.19.07.11;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.09.13.19.16.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.23.21.17.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.12.14.23.15.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.45.07;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.12.03.05.20.49;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.26.05.45.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@'\" t
.\" $OpenBSD$
.\" 
.\"***************************************************************************
.\" Copyright (c) 1998-2006,2007 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_addch.3x,v 1.27 2007/06/02 20:40:07 tom Exp $
.TH curs_addch 3 ""
.SH NAME
\fBaddch\fR, \fBwaddch\fR, \fBmvaddch\fR, \fBmvwaddch\fR,
\fBechochar\fR,
\fBwechochar\fR - add a character (with attributes) to a \fBcurses\fR window, then advance the cursor
.SH SYNOPSIS
\fB#include <curses.h>\fR
.PP
\fBint addch(const chtype ch);\fR
.br
\fBint waddch(WINDOW *win, const chtype ch);\fR
.br
\fBint mvaddch(int y, int x, const chtype ch);\fR
.br
\fBint mvwaddch(WINDOW *win, int y, int x, const chtype ch);\fR
.br
\fBint echochar(const chtype ch);\fR
.br
\fBint wechochar(WINDOW *win, const chtype ch);\fR
.br
.SH DESCRIPTION
The \fBaddch\fR, \fBwaddch\fR, \fBmvaddch\fR and \fBmvwaddch\fR routines put
the character \fIch\fR into the given window at its current window position,
which is then advanced.  They are analogous to \fBputchar\fR in \fBstdio\fR(3).
If the advance is at the right margin, the cursor automatically wraps to the
beginning of the next line.  At the bottom of the current scrolling region, if
\fBscrollok\fR is enabled, the scrolling region is scrolled up one line.
.PP
If \fIch\fR is a tab, newline, or backspace,
the cursor is moved appropriately within the window.
Backspace moves the cursor one character left; at the left
edge of a window it does nothing.
Newline does a \fBclrtoeol\fR,
then moves the cursor to the window left margin on the next line,
scrolling the window if on the last line.
Tabs are considered to be at every eighth column.
The tab interval may be altered by setting the \fBTABSIZE\fR variable.
.PP
If \fIch\fR is any control character other than tab, newline, or backspace, it
is drawn in \fB^\fR\fIX\fR notation.  Calling \fBwinch\fR after adding a
control character does not return the character itself, but instead returns
the ^-representation of the control character.
.PP
Video attributes can be combined with a character argument passed to
\fBaddch\fR or related functions by logical-ORing them into the character.
(Thus, text, including attributes, can be copied from one place to another
using \fBinch\fR and \fBaddch\fR.)  See the \fBcurs_attr\fR(3) page for
values of predefined video attribute constants that can be usefully OR'ed
into characters.
.PP
The \fBechochar\fR and \fBwechochar\fR routines are equivalent to a call to
\fBaddch\fR followed by a call to \fBrefresh\fR, or a call to \fBwaddch\fR
followed by a call to \fBwrefresh\fR.  The knowledge that only a single
character is being output is used and, for non-control characters, a
considerable performance gain may be seen by using these routines instead of
their equivalents.
.SS Line Graphics
The following variables may be used to add line drawing characters to the
screen with routines of the \fBaddch\fR family.  The default character listed
below is used if the \fBacsc\fR capability does not define a terminal-specific
replacement for it.
The names are taken from VT100 nomenclature.
.PP
.TS
l l l
_ _ _
l l l.
\fIName\fR	\fIDefault\fR	\fIDescription\fR
ACS_BLOCK	#	solid square block
ACS_BOARD	#	board of squares
ACS_BTEE	+	bottom tee
ACS_BULLET	o	bullet
ACS_CKBOARD	:	checker board (stipple)
ACS_DARROW	v	arrow pointing down
ACS_DEGREE	'	degree symbol
ACS_DIAMOND	+	diamond
ACS_GEQUAL	>	greater-than-or-equal-to
ACS_HLINE	-	horizontal line
ACS_LANTERN	#	lantern symbol
ACS_LARROW	<	arrow pointing left
ACS_LEQUAL	<	less-than-or-equal-to
ACS_LLCORNER	+	lower left-hand corner
ACS_LRCORNER	+	lower right-hand corner
ACS_LTEE	+	left tee
ACS_NEQUAL	!	not-equal
ACS_PI	*	greek pi
ACS_PLMINUS	#	plus/minus
ACS_PLUS	+	plus
ACS_RARROW	>	arrow pointing right
ACS_RTEE	+	right tee
ACS_S1	-	scan line 1
ACS_S3	-	scan line 3
ACS_S7	-	scan line 7
ACS_S9	\&_	scan line 9
ACS_STERLING	f	pound-sterling symbol
ACS_TTEE	+	top tee
ACS_UARROW	^	arrow pointing up
ACS_ULCORNER	+	upper left-hand corner
ACS_URCORNER	+	upper right-hand corner
ACS_VLINE	|	vertical line
.TE
.SH RETURN VALUE
All routines return the integer \fBERR\fR upon failure and \fBOK\fR on success
(the SVr4 manuals specify only "an integer value other than \fBERR\fR") upon
successful completion, unless otherwise noted in the preceding routine
descriptions.
.SH NOTES
Note that \fBaddch\fR, \fBmvaddch\fR, \fBmvwaddch\fR, and
\fBechochar\fR may be macros.
.SH PORTABILITY
All these functions are described in the XSI Curses standard, Issue 4.
The defaults specified for forms-drawing characters apply in the POSIX locale.
.LP
Some ACS symbols
(ACS_S3,
ACS_S7,
ACS_LEQUAL,
ACS_GEQUAL,
ACS_PI,
ACS_NEQUAL,
ACS_STERLING)
were not documented in
any publicly released System V.  However, many publicly available terminfos
include \fBacsc\fR strings in which their key characters (pryz{|}) are
embedded, and a second-hand list of their character descriptions has come
to light.  The ACS-prefixed names for them were invented for \fBncurses\fR(3).
.LP
The \fBTABSIZE\fR variable is implemented in some versions of curses,
but is not part of X/Open curses.
.LP
If \fIch\fR is a carriage return,
the cursor is moved to the beginning of the current row of the window.
This is true of other implementations, but is not documented.
.SH SEE ALSO
\fBcurses\fR(3),
\fBcurs_attr\fR(3),
\fBcurs_clear\fR(3),
\fBcurs_inch\fR(3),
\fBcurs_outopts\fR(3),
\fBcurs_refresh\fR(3),
\fBputc\fR(3).
.PP
Comparable functions in the wide-character (ncursesw) library are
described in
\fBcurs_add_wch\fR(3).
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
@


1.10
log
@typos;

diffs passed on to curses people.
@
text
@d1 3
a3 3
'\" t 
.\" $OpenBSD: curs_addch.3tbl,v 1.9 2000/07/10 03:06:04 millert Exp $
.\"
d5 1
a5 1
.\" Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d32 1
a32 1
.\" $From: curs_addch.3x,v 1.17 2000/07/01 19:53:01 tom Exp $
d40 2
a41 2

\fBint addch(chtype ch);\fR
d43 1
a43 1
\fBint waddch(WINDOW *win, chtype ch);\fR
d45 1
a45 1
\fBint mvaddch(int y, int x, chtype ch);\fR
d47 1
a47 1
\fBint mvwaddch(WINDOW *win, int y, int x, chtype ch);\fR
d49 1
a49 1
\fBint echochar(chtype ch);\fR
d51 1
a51 1
\fBint wechochar(WINDOW *win, chtype ch);\fR
d60 11
a70 7

If \fIch\fR is a tab, newline, or backspace, the cursor is moved appropriately
within the window.  Backspace moves the cursor one character left; at the left
edge of a window it does nothing.  Newline does a \fBclrtoeol\fR, then moves
the cursor to the window left margin on the next line, scrolling the window if
on the last line.  Tabs are considered to be at every eighth column.

d75 1
a75 1

d82 1
a82 1

d92 4
a95 4
below is used if the \fBacsc\fR capability doesn't define a terminal-specific
replacement for it (but see the EXTENSIONS section below).  The names are
taken from VT100 nomenclature.

a133 1

d145 1
a145 1

d159 7
d167 6
a172 2
\fBcurses\fR(3), \fBcurs_attr\fR(3), \fBcurs_clear\fR(3),
\fBcurs_inch\fR(3), \fBcurs_outopts\fR(3), \fBcurs_refresh\fR(3),
d174 4
@


1.9
log
@ncurses 5.1
@
text
@d2 1
a2 1
.\" $OpenBSD: curs_addch.3tbl,v 1.8 1999/02/11 00:09:36 millert Exp $
d65 1
a65 1
on the last line).  Tabs are considered to be at every eighth column.
d75 1
a75 1
using \fBinch\fR and \fBaddch\fR.).  See the \fBcurs_attr\fR(3) page for
@


1.8
log
@Update to ncurses-4.2-990206:
    suppress sc/rc capabilities from terminal description if they appear
    in smcup/rmcup.  This affects only scrolling optimization, to fix a
    problem reported by several people with xterm's alternate screen,
    though the problem is more general.
@
text
@d2 1
a2 1
.\" $OpenBSD: curs_addch.3tbl,v 1.7 1999/01/18 19:07:11 millert Exp $
d5 1
a5 1
.\" Copyright (c) 1998 Free Software Foundation, Inc.                        *
d32 1
a32 1
.\" $From: curs_addch.3x,v 1.16 1999/02/07 03:47:42 tom Exp $
d36 2
a37 2
\fBechochar\fR, \fBwechochar\fR - add a character (with attributes) to a
\fBcurses\fR window, then advance the cursor
@


1.7
log
@ncurses-4.2-990116
@
text
@d2 1
a2 1
.\" $OpenBSD: curs_addch.3tbl,v 1.6 1998/09/13 19:16:16 millert Exp $
d32 1
a32 1
.\" $From: curs_addch.3x,v 1.15 1998/11/29 01:03:52 Rick.Ohnemus Exp $
a138 19
.SH EXTENSIONS
The following extended \fBcurses\fR features are available only on PC-clone
consoles and compatible terminals obeying the ANSI.SYS de-facto standard for
terminal control sequences.  They are not part of XSI curses.

The attribute A_ALTCHARSET actually forces literal display of PC ROM characters
including the high-half graphics.  Your console driver may still capture or
translate a few (such as ESC) but this feature should give you access to the
card-suit characters, up and down-arrow, and most others in the range 0-32.
(In a terminfo entry designed for use with \fBncurses\fR, the high-half
characters are obtained using this attribute with an \fBacsc\fR string in
which the second of each pair is a high-half character.)

Giving \fBwechochar\fR an argument with its high bit set will produce the
corresponding high-half ASCII graphic (SVr4 curses also has this feature but
does not document it).  A control-character argument, however, will not
typically produce the corresponding graphic; characters such as CR, NL, FF and
TAB are typically interpreted by the console driver itself, and ESC will be
interpreted as the leader of a control sequence.
d143 9
a151 1
The seven ACS symbols starting with \fBACS_S3\fR were not documented in
@


1.6
log
@ncurses-4.2-980905
@
text
@d2 1
a2 1
.\" $OpenBSD$
d32 1
a32 1
.\" $From: curs_addch.3x,v 1.14 1998/08/27 21:21:04 Rick.Ohnemus Exp $
@


1.5
log
@ncurses-4.2-980718
@
text
@d1 3
d32 1
a32 3
'\" t
.\" $OpenBSD$
.\" $From: curs_addch.3x,v 1.12 1998/06/13 21:44:11 Alexander.V.Lukyanov Exp $
d97 13
a109 1
ACS_ULCORNER	+	upper left-hand corner
a110 1
ACS_URCORNER	+	upper right-hand corner
a111 1
ACS_RTEE	+	right tee
d113 3
a115 4
ACS_BTEE	+	bottom tee
ACS_TTEE	+	top tee
ACS_HLINE	-	horizontal line
ACS_VLINE	|	vertical line
d117 2
a119 13
ACS_S9	\&_	scan line 9
ACS_DIAMOND	+	diamond
ACS_CKBOARD	:	checker board (stipple)
ACS_DEGREE	'	degree symbol
ACS_PLMINUS	#	plus/minus
ACS_BULLET	o	bullet
ACS_LARROW	<	arrow pointing left
ACS_RARROW	>	arrow pointing right
ACS_DARROW	v	arrow pointing down
ACS_UARROW	^	arrow pointing up
ACS_BOARD	#	board of squares
ACS_LANTERN	#	lantern symbol
ACS_BLOCK	#	solid square block
d122 1
a122 4
ACS_LEQUAL	<	less-than-or-equal-to
ACS_GEQUAL	>	greater-than-or-equal-to
ACS_PI	*	greek pi
ACS_NEQUAL	!	not-equal
d124 5
d148 1
a148 1
(In a terminfo entry designed for use with \fBcurses\fR, the high-half
d166 1
a166 1
to light.  The ACS-prefixed names for them were invented for \fBcurses\fR(3).
@


1.4
log
@ncurses-4.1-971213
@
text
@d1 28
a28 2
.\" $OpenBSD: curs_addch.3tbl,v 1.3 1997/12/03 05:45:07 millert Exp $
.\" Id: curs_addch.3x,v 1.10 1997/12/13 22:37:23 tom Exp $
d30 2
d69 1
a69 2
the ^-representation of the control character.  (To emit control characters
literally, use \fBechochar\fR.)
d147 1
a147 1
(In a terminfo entry designed for use with \fBcurses\fR, the high-half 
d163 1
a163 1
include \fBacsc\fR strings in which their key characters (pryz{|}) are 
@


1.3
log
@3X-> 3
@
text
@d1 2
a2 1
.\" $OpenBSD: curs_addch.3tbl,v 1.2 1997/12/03 05:20:49 millert Exp $
d80 2
a81 2
ACS_S1  	-	scan line 1
ACS_S9  	\&_	scan line 9
d94 2
a95 2
ACS_S3   	-	scan line 3
ACS_S7  	-	scan line 7
d98 1
a98 1
ACS_PI  	*	greek pi
d142 1
a142 1
\fBputc\fR(3S).
@


1.2
log
@Merge of ncurses-4.1-971129
@
text
@d1 1
a1 1
.\" $OpenBSD$
d3 1
a3 1
.TH curs_addch 3X ""
@


1.1
log
@Need to run these through tbl.
@
text
@d1 1
d46 1
a46 1
using \fBinch\fR and \fBaddch\fR.).  See the \fBcurs_attr\fR(3X) page for
d137 1
a137 1
to light.  The ACS-prefixed names for them were invented for \fBcurses\fR(3X).
d139 2
a140 2
\fBcurses\fR(3X), \fBcurs_attr\fR(3X), \fBcurs_clear\fR(3X),
\fBcurs_inch\fR(3X), \fBcurs_outopts\fR(3X), \fBcurs_refresh\fR(3X),
@
