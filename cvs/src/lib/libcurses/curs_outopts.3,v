head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.30
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.32
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.28
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.24
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.28
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.24
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.22
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.20
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.18
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.16
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.10
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.8
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.6
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.4
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.12
date	2010.01.12.23.21.59;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.12.11.06.49;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2001.02.25.18.32.34;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.25.17.00.08;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.10.01.35.01;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.01.18.19.07.14;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.09.13.19.16.21;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.23.21.17.53;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.12.03.05.45.01;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.20.59;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.14;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.05;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@.\" $OpenBSD$
.\"
.\"***************************************************************************
.\" Copyright (c) 1998-2005,2007 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_outopts.3x,v 1.21 2007/06/02 20:40:07 tom Exp $
.TH curs_outopts 3 ""
.na
.hy 0
.SH NAME
\fBclearok\fR,
\fBidlok\fR,
\fBidcok\fR,
\fBimmedok\fR,
\fBleaveok\fR,
\fBsetscrreg\fR,
\fBwsetscrreg\fR,
\fBscrollok\fR,
\fBnl\fR,
\fBnonl\fR - \fBcurses\fR output options
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.sp
\fBint clearok(WINDOW *win, bool bf);\fR
.br
\fBint idlok(WINDOW *win, bool bf);\fR
.br
\fBvoid idcok(WINDOW *win, bool bf);\fR
.br
\fBvoid immedok(WINDOW *win, bool bf);\fR
.br
\fBint leaveok(WINDOW *win, bool bf);\fR
.br
\fBint setscrreg(int top, int bot);\fR
.br
\fBint wsetscrreg(WINDOW *win, int top, int bot);\fR
.br
\fBint scrollok(WINDOW *win, bool bf);\fR
.br
\fBint nl(void);\fR
.br
\fBint nonl(void);\fR
.br
.SH DESCRIPTION
These routines set options that change the style of output within
\fBcurses\fR.
All options are initially \fBFALSE\fR, unless otherwise stated.
It is not necessary to turn these options off before calling \fBendwin\fR.
.PP
If \fBclearok\fR is called with \fBTRUE\fR as argument, the next
call to \fBwrefresh\fR with this window will clear the screen completely and
redraw the entire screen from scratch.
This is useful when the contents of the
screen are uncertain, or in some cases for a more pleasing visual effect.
If
the \fIwin\fR argument to \fBclearok\fR is the global variable \fBcurscr\fR,
the next call to \fBwrefresh\fR with any window causes the screen to be cleared
and repainted from scratch.
.PP
If \fBidlok\fR is called with \fBTRUE\fR as second argument, \fBcurses\fR
considers using the hardware insert/delete line feature of terminals so
equipped.
Calling \fBidlok\fR with \fBFALSE\fR as second argument disables use
of line insertion and deletion.
This option should be enabled only if the
application needs insert/delete line, for example, for a screen editor.
It is
disabled by default because insert/delete line tends to be visually annoying
when used in applications where it is not really needed.
If insert/delete line
cannot be used, \fBcurses\fR redraws the changed portions of all lines.
.PP
If \fBidcok\fR is called with \fBFALSE\fR as second argument, \fBcurses\fR
no longer considers using the hardware insert/delete character feature of
terminals so equipped.
Use of character insert/delete is enabled by default.
Calling \fBidcok\fR with \fBTRUE\fR as second argument re-enables use
of character insertion and deletion.
.PP
If \fBimmedok\fR is called with \fBTRUE as argument\fR, any change
in the window image, such as the ones caused by \fBwaddch, wclrtobot, wscrl\fR,
etc., automatically cause a call to \fBwrefresh\fR.
However, it may
degrade performance considerably, due to repeated calls to \fBwrefresh\fR.
It is disabled by default.
.PP
Normally, the hardware cursor is left at the location of the window cursor
being refreshed.
The \fBleaveok\fR option allows the cursor to be left
wherever the update happens to leave it.
It is useful for applications where
the cursor is not used, since it reduces the need for cursor motions.
.PP
The \fBsetscrreg\fR and \fBwsetscrreg\fR routines allow the application
programmer to set a software scrolling region in a window.
\fItop\fR and
\fIbot\fR are the line numbers of the top and bottom margin of the scrolling
region.
(Line 0 is the top line of the window.)  If this option and
\fBscrollok\fR are enabled, an attempt to move off the bottom margin line
causes all lines in the scrolling region to scroll one line in the direction
of the first line.
Only the text of the window is scrolled.
(Note that this
has nothing to do with the use of a physical scrolling region capability in the
terminal, like that in the VT100.
If \fBidlok\fR is enabled and the terminal
has either a scrolling region or insert/delete line capability, they will
probably be used by the output routines.)
.PP
The \fBscrollok\fR option controls what happens when the cursor of a window is
moved off the edge of the window or scrolling region, either as a result of a
newline action on the bottom line, or typing the last character of the last
line.
If disabled, (\fIbf\fR is \fBFALSE\fR), the cursor is left on the bottom
line.
If enabled, (\fIbf\fR is \fBTRUE\fR), the window is scrolled up one line
(Note that to get the physical scrolling effect on the terminal, it is
also necessary to call \fBidlok\fR).
.PP
The \fBnl\fR and \fBnonl\fR routines control whether the underlying display
device translates the return key into newline on input, and whether it
translates newline into return and line-feed on output (in either case, the
call \fBaddch('\\n')\fR does the equivalent of return and line feed on the
virtual screen).
Initially, these translations do occur.
If you disable them
using \fBnonl\fR, \fBcurses\fR will be able to make better use of the line-feed
capability, resulting in faster cursor motion.
Also, \fBcurses\fR will then be
able to detect the return key.
.SH RETURN VALUE
The functions \fBsetscrreg\fR and \fBwsetscrreg\fR return \fBOK\fR upon success
and \fBERR\fR upon failure.
All other routines that return an integer always
return \fBOK\fR.
.PP
X/Open does not define any error conditions.
.PP
In this implementation, those functions that have a window pointer
will return an error if the window pointer is null.
.RS
.TP 5
.B wclrtoeol
returns an error
if the cursor position is about to wrap.
.TP 5
.B wsetscrreg
returns an error if the scrolling region limits extend outside the window.
.RE
.PP
X/Open does not define any error conditions.
This implementation returns an error
if the window pointer is null.
.SH PORTABILITY
These functions are described in the XSI Curses standard, Issue 4.
.PP
The XSI Curses standard is ambiguous on the question of whether \fBraw\fR()
should disable the CRLF translations controlled by \fBnl\fR() and \fBnonl\fR().
BSD curses did turn off these translations; AT&T curses (at least as late as
SVr1) did not.
We choose to do so, on the theory that a programmer requesting
raw input wants a clean (ideally 8-bit clean) connection that the operating
system will not alter.
.PP
Some historic curses implementations had, as an undocumented feature, the
ability to do the equivalent of \fBclearok(..., 1)\fR by saying
\fBtouchwin(stdscr)\fR or \fBclear(stdscr)\fR.
This will not work under
ncurses.
.PP
Earlier System V curses implementations specified that with \fBscrollok\fR
enabled, any window modification triggering a scroll also forced a physical
refresh.
XSI Curses does not require this, and \fBncurses\fR avoids doing
it to perform better vertical-motion optimization at \fBwrefresh\fR
time.
.PP
The XSI Curses standard does not mention that the cursor should be
made invisible as a side-effect of \fBleaveok\fR.
SVr4 curses documentation does this, but the code does not.
Use \fBcurs_set\fR to make the cursor invisible.
.SH NOTES
Note that \fBclearok\fR, \fBleaveok\fR, \fBscrollok\fR, \fBidcok\fR, \fBnl\fR,
\fBnonl\fR and \fBsetscrreg\fR may be macros.
.PP
The \fBimmedok\fR routine is useful for windows that are used as terminal
emulators.
.SH SEE ALSO
\fBcurses\fR(3), \fBcurs_addch\fR(3), \fBcurs_clear\fR(3),
\fBcurs_initscr\fR(3), \fBcurs_scroll\fR(3), \fBcurs_refresh\fR(3)
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
@


1.11
log
@typos;

diffs passed on to curses people.
@
text
@d1 1
a1 1
.\" $OpenBSD: curs_outopts.3,v 1.10 2001/02/25 18:32:34 millert Exp $
d4 1
a4 1
.\" Copyright (c) 1998 Free Software Foundation, Inc.                        *
d31 1
a31 1
.\" $From: curs_outopts.3x,v 1.14 2000/02/27 01:41:58 tom Exp $
d33 2
d36 12
a47 3
\fBclearok\fR, \fBidlok\fR, \fBidcok\fR, \fBimmedok\fR,
\fBleaveok\fR, \fBsetscrreg\fR, \fBwsetscrreg\fR, \fBscrollok\fR,
\fBnl\fR, \fBnonl\fR - \fBcurses\fR output options
d50 1
a50 1

d73 2
a74 1
\fBcurses\fR.  All options are initially \fBFALSE\fR, unless otherwise stated.
d76 1
a76 1

d79 4
a82 2
redraw the entire screen from scratch.  This is useful when the contents of the
screen are uncertain, or in some cases for a more pleasing visual effect.  If
d86 1
a86 1

d89 6
a94 3
equipped.  Calling \fBidlok\fR with \fBFALSE\fR as second argument disables use
of line insertion and deletion.  This option should be enabled only if the
application needs insert/delete line, for example, for a screen editor.  It is
d96 2
a97 1
when used in applications where it isn't really needed.  If insert/delete line
d99 1
a99 1

d102 2
a103 1
terminals so equipped.  Use of character insert/delete is enabled by default.
d106 2
a107 2

If \fBimmedok\fR is called with \fBTRUE\fR as argument, any change
d109 2
a110 1
etc., automatically cause a call to \fBwrefresh\fR.  However, it may
d113 1
a113 1

d115 6
a120 5
being refreshed.  The \fBleaveok\fR option allows the cursor to be left
wherever the update happens to leave it.  It is useful for applications where
the cursor is not used, since it reduces the need for cursor motions.  If
possible, the cursor is made invisible when this option is enabled.

d122 2
a123 1
programmer to set a software scrolling region in a window.  \fItop\fR and
d125 2
a126 1
region.  (Line 0 is the top line of the window.)  If this option and
d129 3
a131 1
of the first line.  Only the text of the window is scrolled.  (Note that this
d133 2
a134 1
terminal, like that in the VT100.  If \fBidlok\fR is enabled and the terminal
d137 1
a137 1

d141 5
a145 3
line.  If disabled, (\fIbf\fR is \fBFALSE\fR), the cursor is left on the bottom
line.  If enabled, (\fIbf\fR is \fBTRUE\fR), the window is scrolled up one line
(Note that in order to get the physical scrolling effect on the terminal, it is
d147 1
a147 1

d152 3
a154 1
virtual screen).  Initially, these translations do occur.  If you disable them
d156 2
a157 1
capability, resulting in faster cursor motion.  Also, \fBcurses\fR will then be
d161 2
a162 1
and \fBERR\fR upon failure. All other routines that return an integer always
d164 18
d184 1
a184 1

d188 2
a189 1
SVr1) did not.  We choose to do so, on the theory that a programmer requesting
d191 2
a192 2
system does not mess with.

d195 2
a196 1
\fBtouchwin(stdscr)\fR or \fBclear(stdscr)\fR.  This will not work under
d198 1
a198 1

d201 3
a203 2
refresh.  XSI Curses does not require this, and \fBncurses\fR avoids doing
it in order to perform better vertical-motion optimization at \fBwrefresh\fR
d205 1
a205 1

d213 1
a213 1

@


1.10
log
@fix enboldening on idcok and immedok in NAME section
@
text
@d1 1
a1 1
.\" $OpenBSD: curs_outopts.3,v 1.8 2000/03/10 01:35:01 millert Exp $
d88 1
a88 1
If \fBimmedok\fR is called with \fBTRUE as argument\fR, any change
d90 1
a90 1
\fIetc\fR., automatically cause a call to \fBwrefresh\fR.  However, it may
d147 1
a147 1
Earlier System V curses implementations specified that with \fBscrollok\fR 
@


1.9
log
@Missing commas in NAME section.  Found by an espie script ;-)
@
text
@d34 1
a34 1
\fBclearok\fR, \fBidlok\fR, \fBidcok, immedok\fR,
@


1.8
log
@Update to ncurses-5.0-20000304
@
text
@d1 1
a1 1
.\" $OpenBSD: curs_outopts.3,v 1.7 1999/01/18 19:07:14 millert Exp $
d34 1
a34 1
\fBclearok\fR, \fBidlok\fR, \fBidcok immedok\fR,
@


1.7
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
.\" $OpenBSD: curs_outopts.3,v 1.6 1998/09/13 19:16:21 millert Exp $
d31 1
a31 1
.\" $From: curs_outopts.3x,v 1.13 1998/12/26 20:02:04 tom Exp $
d156 1
@


1.6
log
@ncurses-4.2-980905
@
text
@d1 1
a1 1
.\" $OpenBSD$
d31 1
a31 1
.\" $From: curs_outopts.3x,v 1.12 1998/03/21 22:56:02 jtc Exp $
d123 1
a123 1
call \fBaddch('\n')\fR does the equivalent of return and line feed on the
@


1.5
log
@ncurses-4.2-980718
@
text
@d1 2
a31 1
.\" $OpenBSD$
d145 1
a145 1
this curses.
d149 1
a149 1
refresh.  XSI Curses does not require this, and \fBcurses\fR avoids doing
@


1.4
log
@3X-> 3
@
text
@d1 30
a30 1
.\" $OpenBSD: curs_outopts.3,v 1.3 1997/12/03 05:20:59 millert Exp $
d144 1
a144 1
curses.
d151 4
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d1 2
a2 2
.\" $OpenBSD$
.TH curs_outopts 3X ""
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 1
d129 2
a130 2
\fBcurses\fR(3X), \fBcurs_addch\fR(3X), \fBcurs_clear\fR(3X),
\fBcurs_initscr\fR(3X), \fBcurs_scroll\fR(3X), \fBcurs_refresh\fR(3X)
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d42 8
a49 9
If \fBidlok\fR is called with \fBTRUE\fR as argument,
\fBcurses\fR considers using the hardware insert/delete line feature of
terminals so equipped.  If disabled (\fIbf\fR is \fBFALSE\fR), \fBcurses\fR
very seldom uses this feature.  (The insert/delete character feature is always
considered.)  This option should be enabled only if the application needs
insert/delete line, for example, for a screen editor.  It is disabled by
default because insert/delete line tends to be visually annoying when used in
applications where it isn't really needed.  If insert/delete line cannot be
used, \fBcurses\fR redraws the changed portions of all lines.
d51 5
a55 3
If \fBidcok\fR is called with \fBTRUE\fR as argument,
\fBcurses\fR considers using the hardware insert/delete character feature of
terminals so equipped.  This is enabled by default.
d60 1
a60 1
degrade the performance considerably, due to repeated calls to \fBwrefresh\fR.
@
