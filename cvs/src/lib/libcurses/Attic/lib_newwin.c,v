head	1.5;
access;
symbols
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	99.01.18.19.08.12;	author millert;	state dead;
branches;
next	1.4;

1.4
date	98.07.23.21.19.07;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.25;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.44;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.29;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_newwin.c,v 1.4 1998/07/23 21:19:07 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/



/*
**	lib_newwin.c
**
**	The routines newwin(), subwin() and their dependent
**
*/

#include <curses.priv.h>

MODULE_ID("$From: lib_newwin.c,v 1.20 1998/05/23 23:21:32 Alexander.V.Lukyanov Exp $")

void _nc_freewin(WINDOW *win)
{
WINDOWLIST *p, *q;
int	i;

	if (win != 0) {
		for (p = _nc_windows, q = 0; p != 0; q = p, p = p->next) {
			if (p->win == win) {
				if (q == 0)
					_nc_windows = p->next;
				else
					q->next = p->next;
				free(p);

				if (! (win->_flags & _SUBWIN)) {
					for (i = 0; i <= win->_maxy && win->_line[i].text; i++)
						free(win->_line[i].text);
				}
				free(win->_line);
				free(win);

				if (win == curscr) curscr = 0;
				if (win == stdscr) stdscr = 0;
				if (win == newscr) newscr = 0;

				T(("...deleted win=%p", win));
				break;
			}
		}
	}
}

WINDOW * newwin(int num_lines, int num_columns, int begy, int begx)
{
WINDOW	*win;
chtype	*ptr;
int	i;

	T((T_CALLED("newwin(%d,%d,%d,%d)"), num_lines, num_columns, begy, begx));

	if (begy < 0 || begx < 0 || num_lines < 0 || num_columns < 0)
		returnWin(0);

	if (num_lines == 0)
	    num_lines = SP->_lines_avail - begy;
	if (num_columns == 0)
	    num_columns = screen_columns - begx;

	if (num_columns + begx > SP->_columns || num_lines + begy > SP->_lines_avail)
		returnWin(0);

	if ((win = _nc_makenew(num_lines, num_columns, begy, begx, 0)) == 0)
		returnWin(0);

	for (i = 0; i < num_lines; i++) {
	    if ((win->_line[i].text = typeCalloc(chtype, (unsigned)num_columns)) == 0) {
		_nc_freewin(win);
		returnWin(0);
	    }
	    for (ptr = win->_line[i].text; ptr < win->_line[i].text + num_columns; )
		*ptr++ = ' ';
	}

	T(("newwin: returned window is %p", win));

	returnWin(win);
}

WINDOW * derwin(WINDOW *orig, int num_lines, int num_columns, int begy, int begx)
{
WINDOW	*win;
int	i;
int     flags = _SUBWIN;

	T((T_CALLED("derwin(%p,%d,%d,%d,%d)"), orig, num_lines, num_columns, begy, begx));

	/*
	** make sure window fits inside the original one
	*/
	if ( begy < 0 || begx < 0 || orig == 0 || num_lines < 0 || num_columns < 0)
	    returnWin(0);
	if ( begy + num_lines > orig->_maxy + 1
		|| begx + num_columns > orig->_maxx + 1)
	    returnWin(0);

	if (num_lines == 0)
	    num_lines = orig->_maxy + 1 - begy; 

	if (num_columns == 0)
	    num_columns = orig->_maxx + 1 - begx; 

	if (orig->_flags & _ISPAD)
	  flags |= _ISPAD;

	if ((win = _nc_makenew(num_lines, num_columns, orig->_begy + begy, orig->_begx + begx, flags)) == 0)
	    returnWin(0);

	win->_pary = begy;
	win->_parx = begx;
	win->_attrs = orig->_attrs;
	win->_bkgd = orig->_bkgd;

	for (i = 0; i < num_lines; i++)
	    win->_line[i].text = &orig->_line[begy++].text[begx];

	win->_parent = orig;

	T(("derwin: returned window is %p", win));

	returnWin(win);
}


WINDOW *subwin(WINDOW *w, int l, int c, int y, int x)
{
	T((T_CALLED("subwin(%p, %d, %d, %d, %d)"), w, l, c, y, x));
	T(("parent has begy = %d, begx = %d", w->_begy, w->_begx));

	returnWin(derwin(w, l, c, y - w->_begy, x - w->_begx));
}

WINDOW *
_nc_makenew(int num_lines, int num_columns, int begy, int begx, int flags)
{
int	i;
WINDOWLIST *wp;
WINDOW	*win;
bool    is_pad = (flags & _ISPAD);

	T(("_nc_makenew(%d,%d,%d,%d)", num_lines, num_columns, begy, begx));

	if (num_lines <= 0 || num_columns <= 0)
		return 0;

	if ((wp = typeCalloc(WINDOWLIST, 1)) == 0)
		return 0;

	if ((win = typeCalloc(WINDOW, 1)) == 0)
		return 0;

	if ((win->_line = typeCalloc(struct ldat, ((unsigned)num_lines))) == 0) {
		free(win);
		return 0;
	}

	win->_curx       = 0;
	win->_cury       = 0;
	win->_maxy       = num_lines - 1;
	win->_maxx       = num_columns - 1;
	win->_begy       = begy;
	win->_begx       = begx;
	win->_yoffset    = SP->_topstolen;

	win->_flags      = flags;
	win->_attrs      = A_NORMAL;
	win->_bkgd       = BLANK;

	win->_clear      = is_pad ? FALSE : (num_lines == screen_lines  &&  num_columns == screen_columns);
	win->_idlok      = FALSE;
	win->_idcok      = TRUE;
	win->_scroll     = FALSE;
	win->_leaveok    = FALSE;
	win->_use_keypad = FALSE;
	win->_delay      = -1;
	win->_immed      = FALSE;
	win->_sync       = 0;
	win->_parx       = -1;
	win->_pary       = -1;
	win->_parent     = 0;

	win->_regtop     = 0;
	win->_regbottom  = num_lines - 1;

	win->_pad._pad_y      = -1;
	win->_pad._pad_x      = -1;
	win->_pad._pad_top    = -1;
	win->_pad._pad_bottom = -1;
	win->_pad._pad_left   = -1;
	win->_pad._pad_right  = -1;

	for (i = 0; i < num_lines; i++)
	{
	    /*
	     * This used to do
	     *
	     * win->_line[i].firstchar = win->_line[i].lastchar = _NOCHANGE;
	     *
	     * which marks the whole window unchanged.  That's how
	     * SVr1 curses did it, but SVr4 curses marks the whole new
	     * window changed.
	     *
	     * With the old SVr1-like code, say you have stdscr full of
	     * characters, then create a new window with newwin(),
	     * then do a printw(win, "foo        ");, the trailing spaces are
	     * completely ignored by the following refreshes.  So, you
	     * get "foojunkjunk" on the screen instead of "foo        " as
	     * you actually intended.
	     *
	     * SVr4 doesn't do this.  Instead the spaces are actually written.
	     * So that's how we want ncurses to behave.
	     */
	    win->_line[i].firstchar = 0;
	    win->_line[i].lastchar = num_columns-1;

	    if_USE_SCROLL_HINTS(win->_line[i].oldindex = i);
	}

	if (!is_pad && (begx + num_columns == screen_columns)) {
		win->_flags |= _ENDLINE;

		if (begx == 0  &&  num_lines == screen_lines  &&  begy == 0)
			win->_flags |= _FULLWIN;

		if (begy + num_lines == screen_lines)
			win->_flags |= _SCROLLWIN;
	}

	wp->next = _nc_windows;
	wp->win  = win;
	_nc_windows = wp;

	T((T_CREATE("window %p"), win));

	return(win);
}
@


1.4
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d47 1
a47 1
MODULE_ID("Id: lib_newwin.c,v 1.18 1997/08/09 17:21:49 tom Exp $")
d135 1
a135 1
	    num_lines = orig->_maxy - begy;
d138 1
a138 1
	    num_columns = orig->_maxx - begx;
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d35 1
a35 1
MODULE_ID("Id: lib_newwin.c,v 1.17 1997/02/15 21:46:05 tom Exp $")
d241 1
a241 1
	    win->_line[i].oldindex = i;
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d31 35
a65 2
#include "curses.priv.h"
#include <stdlib.h>
d71 1
a71 1
int	i, j;
d73 4
a76 1
	T(("newwin(%d,%d,%d,%d) called", num_lines, num_columns, begy, begx));
d79 1
a79 1
	    num_lines = screen_lines - begy;
d83 2
a84 2
	if (num_columns + begx > SP->_columns || num_lines + begy > SP->_lines)
		return NULL;
d86 2
a87 2
	if ((win = _nc_makenew(num_lines, num_columns, begy, begx)) == NULL)
		return NULL;
d90 3
a92 8
	    if ((win->_line[i].text = (chtype *) calloc((unsigned)num_columns, sizeof(chtype))) == NULL) {
			for (j = 0; j < i; j++)
			    free(win->_line[j].text);

			free(win->_line);
			free(win);

			return NULL;
d94 2
a95 3
	    else
		for (ptr = win->_line[i].text; ptr < win->_line[i].text + num_columns; )
		    *ptr++ = ' ';
d100 1
a100 1
	return(win);
d107 1
d109 1
a109 1
	T(("derwin(%p, %d,%d,%d,%d) called", orig, num_lines, num_columns, begy, begx));
d114 2
a115 2
	if ( begy < 0 || begx < 0) 
		return NULL;
d118 1
a118 1
	    return NULL;
d126 5
a130 2
	if ((win = _nc_makenew(num_lines, num_columns, orig->_begy + begy, orig->_begx + begx)) == NULL)
	    return NULL;
a139 1
	win->_flags = _SUBWIN;
d144 1
a144 1
	return(win);
d150 1
a150 1
	T(("subwin(%p, %d, %d, %d, %d) called", w, l, c, y, x));
d153 1
a153 1
	return derwin(w, l, c, y - w->_begy, x - w->_begx); 
d157 1
a157 1
_nc_makenew(int num_lines, int num_columns, int begy, int begx)
d160 1
d162 1
d167 1
a167 1
	 	return NULL;
d169 2
a170 2
	if ((win = (WINDOW *) calloc(1, sizeof(WINDOW))) == NULL)
		return NULL;            
d172 4
a175 1
	if ((win->_line = (struct ldat *) calloc((unsigned)num_lines, sizeof (struct ldat))) == NULL) {
d177 1
a177 1
		return NULL;               
d186 1
d188 1
a188 1
	win->_flags      = 0;
d190 1
a190 1
	win->_bkgd	 = A_NORMAL;
d192 1
a192 1
	win->_clear      = (num_lines == screen_lines  &&  num_columns == screen_columns);
d198 6
a203 6
	win->_delay    	 = -1;   
	win->_immed	 = FALSE;
	win->_sync	 = 0;
	win->_parx	 = -1;
	win->_pary	 = -1;
	win->_parent	 = (WINDOW *)NULL;
d217 22
a238 1
	    win->_line[i].firstchar = win->_line[i].lastchar = _NOCHANGE;
d242 1
a242 1
	if (begx + num_columns == screen_columns) {
d251 6
@
