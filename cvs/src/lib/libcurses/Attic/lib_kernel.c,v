head	1.7;
access;
symbols
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	99.01.18.19.08.02;	author millert;	state dead;
branches;
next	1.6;

1.6
date	98.10.31.06.30.29;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.23.21.18.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.12.09.01.23.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.22;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.27;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_kernel.c,v 1.6 1998/10/31 06:30:29 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/


/*
 *	lib_kernel.c
 *
 *	Misc. low-level routines:
 *		reset_prog_mode()
 *		reset_shell_mode()
 *		erasechar()
 *		killchar()
 *		flushinp()
 *		savetty()
 *		resetty()
 *
 * The baudrate() and delay_output() functions could logically live here,
 * but are in other modules to reduce the static-link size of programs
 * that use only these facilities.
 */

#include <curses.priv.h>
#include <term.h>	/* cur_term */

MODULE_ID("$From: lib_kernel.c,v 1.18 1998/09/20 03:34:18 tom Exp $")

int reset_prog_mode(void)
{
	T((T_CALLED("reset_prog_mode()")));

	if (cur_term != 0) {
		_nc_set_curterm(&cur_term->Nttyb);
		if (SP) {
			if (stdscr && stdscr->_use_keypad)
				_nc_keypad(TRUE);
			NC_BUFFERED(TRUE);
		}
		returnCode(OK);
	}
	returnCode(ERR);
}


int reset_shell_mode(void)
{
	T((T_CALLED("reset_shell_mode()")));

	if (cur_term != 0) {
		if (SP)
		{
			_nc_keypad(FALSE);
			fflush(SP->_ofp);
			NC_BUFFERED(FALSE);
		}
		returnCode(_nc_set_curterm(&cur_term->Ottyb));
	}
	returnCode(ERR);
}

/*
 *	erasechar()
 *
 *	Return erase character as given in cur_term->Ottyb.
 *
 */

char
erasechar(void)
{
	T((T_CALLED("erasechar()")));

	if (cur_term != 0) {
#ifdef TERMIOS
		returnCode(cur_term->Ottyb.c_cc[VERASE]);
#else
		returnCode(cur_term->Ottyb.sg_erase);
#endif
	}
	returnCode(ERR);
}



/*
 *	killchar()
 *
 *	Return kill character as given in cur_term->Ottyb.
 *
 */

char
killchar(void)
{
	T((T_CALLED("killchar()")));

	if (cur_term != 0) {
#ifdef TERMIOS
		returnCode(cur_term->Ottyb.c_cc[VKILL]);
#else
		returnCode(cur_term->Ottyb.sg_kill);
#endif
	}
	returnCode(ERR);
}



/*
 *	flushinp()
 *
 *	Flush any input on cur_term->Filedes
 *
 */

int flushinp(void)
{
	T((T_CALLED("flushinp()")));

	if (cur_term != 0) {
#ifdef TERMIOS
		tcflush(cur_term->Filedes, TCIFLUSH);
#else
		errno = 0;
		do {
		    ioctl(cur_term->Filedes, TIOCFLUSH, 0);
		} while
		    (errno == EINTR);
#endif
		if (SP) {
			SP->_fifohead = -1;
			SP->_fifotail = 0;
			SP->_fifopeek = 0;
		}
		returnCode(OK);
	}
	returnCode(ERR);
}

/*
**	savetty()  and  resetty()
**
*/

static TTY   buf;

int savetty(void)
{
	T((T_CALLED("savetty()")));

	returnCode(_nc_get_curterm(&buf));
}

int resetty(void)
{
	T((T_CALLED("resetty()")));

	returnCode(_nc_set_curterm(&buf));
}
@


1.6
log
@update to ncurses 4.2-981017
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_kernel.c,v 1.5 1998/07/23 21:18:58 millert Exp $	*/
@


1.5
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 1
MODULE_ID("$From: lib_kernel.c,v 1.17 1998/02/11 12:13:57 tom Exp $")
d65 5
a69 2
		if (SP && stdscr && stdscr->_use_keypad)
			_nc_keypad(TRUE);
d83 1
d85 1
a85 1
			_nc_keypad(FALSE);
@


1.4
log
@Make reset_prog_mode() and reset_shell_mode() in libtermlib weak
symbols so that they get overridden by the ones in libcurses.
This is rather gross but the curses versions are tightly coupled
to naughty bits private to libcurses.  This allows reset_prog_mode()
and reset_shell_mode() to operate properly both with an without
libcurses linked in.
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_kernel.c,v 1.3 1997/12/03 05:21:22 millert Exp $	*/
d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
a40 1
 *		napms()
d57 1
a57 9
MODULE_ID("Id: lib_kernel.c,v 1.14 1997/09/02 22:41:57 tom Exp $")

int napms(int ms)
{
	T((T_CALLED("napms(%d)"), ms));

	usleep(1000*(unsigned)ms);
	returnCode(OK);
}
d63 7
a69 5
	_nc_set_curterm(&cur_term->Nttyb);
	if (SP && stdscr && stdscr->_use_keypad)
		_nc_keypad(TRUE);

	returnCode(OK);
d77 7
a83 4
	if (SP)
	{
		fflush(SP->_ofp);
		_nc_keypad(FALSE);
d85 1
a85 3

	_nc_set_curterm(&cur_term->Ottyb);
	returnCode(OK);
d100 1
d102 1
a102 1
	returnCode(cur_term->Ottyb.c_cc[VERASE]);
d104 1
a104 1
	returnCode(cur_term->Ottyb.sg_erase);
d106 2
a107 1

d124 1
d126 1
a126 1
	returnCode(cur_term->Ottyb.c_cc[VKILL]);
d128 1
a128 1
	returnCode(cur_term->Ottyb.sg_kill);
d130 2
d147 1
d149 1
a149 1
	tcflush(cur_term->Filedes, TCIFLUSH);
d151 5
a155 5
	errno = 0;
	do {
	    ioctl(cur_term->Filedes, TIOCFLUSH, 0);
	} while
	    (errno == EINTR);
d157 6
a162 4
	if (SP) {
		SP->_fifohead = -1;
		SP->_fifotail = 0;
		SP->_fifopeek = 0;
d164 1
a164 2
	returnCode(OK);

d178 1
a178 2
	_nc_get_curterm(&buf);
	returnCode(OK);
d185 1
a185 2
	_nc_set_curterm(&buf);
	returnCode(OK);
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a55 1
#ifndef EXTERN_TERMINFO
a80 1
#endif /* EXTERN_TERMINFO */
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d46 1
a46 1
MODULE_ID("Id: lib_kernel.c,v 1.13 1997/02/02 00:33:14 tom Exp $")
d61 1
a61 1
	SET_TTY(cur_term->Filedes, &cur_term->Nttyb);
d79 1
a79 1
	SET_TTY(cur_term->Filedes, &cur_term->Ottyb);
d167 1
a167 1
	GET_TTY(cur_term->Filedes, &buf);
d175 1
a175 1
	SET_TTY(cur_term->Filedes, &buf);
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@a29 2
 *		baudrate()
 *		delay_output()
d36 3
a38 1
 *
d41 4
a44 6
#include "curses.priv.h"
#include "term.h"	/* cur_term, pad_char */
#include <errno.h>
#if !HAVE_EXTERN_ERRNO
extern int errno;
#endif
d48 1
a48 1
	T(("napms(%d) called", ms));
d51 1
a51 1
	return OK;
d57 1
a57 1
	T(("reset_prog_mode() called"));
d59 1
a59 5
#ifdef TERMIOS
	tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb);
#else
	stty(cur_term->Filedes, &cur_term->Nttyb);
#endif
d63 1
a63 1
	return OK; 
d69 1
a69 1
	T(("reset_shell_mode() called"));
d77 2
a78 6
#ifdef TERMIOS
	tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Ottyb);
#else
	stty(cur_term->Filedes, &cur_term->Ottyb);
#endif
	return OK; 
a81 27
int delay_output(float ms)
{
	T(("delay_output(%f) called", ms));

    	if (SP == 0 || SP->_baudrate == ERR)
		return(ERR);
#ifdef no_pad_char
    	else if (no_pad_char)
		_nc_timed_wait(0, (int)ms, (int *)NULL);
#endif /* no_pad_char */
	else {
		register int	nullcount;
		char	null = '\0';

#ifdef pad_char
		if (pad_char)
	    		null = pad_char[0];
#endif /* pad_char */

		for (nullcount = ms * 1000 / SP->_baudrate; nullcount > 0; nullcount--)
		    	putc(null, SP->_ofp);
		(void) fflush(SP->_ofp);
    	}

    	return OK;
}
  
d92 1
a92 1
	T(("erasechar() called"));
d95 1
a95 1
    	return(cur_term->Ottyb.c_cc[VERASE]);
d97 1
a97 1
    	return(cur_term->Ottyb.sg_erase);
d114 1
a114 1
	T(("killchar() called"));
d117 1
a117 1
    	return(cur_term->Ottyb.c_cc[VKILL]);
d119 1
a119 1
    	return(cur_term->Ottyb.sg_kill);
d134 1
a134 1
	T(("flushinp() called"));
d144 5
a148 5
#endif    
    	if (SP) {
	  	SP->_fifohead = -1;
	  	SP->_fifotail = 0;
	  	SP->_fifopeek = 0;
d150 1
a150 73
	return OK;

}



/*
 *	int
 *	baudrate()
 *
 *	Returns the current terminal's baud rate.
 *
 */

struct speed {
	speed_t s;
	int sp;
};

static struct speed const speeds[] = {
	{B0, 0},
	{B50, 50},
	{B75, 75},
	{B110, 110},
	{B134, 134},
	{B150, 150},
	{B200, 200},
	{B300, 300},
	{B600, 600},
	{B1200, 1200},
	{B1800, 1800},
	{B2400, 2400},
	{B4800, 4800},
	{B9600, 9600},
#define MAX_BAUD	B9600
#ifdef B19200
#undef MAX_BAUD
#define MAX_BAUD	B19200
	{B19200, 19200},
#else 
#ifdef EXTA
#define MAX_BAUD	EXTA
	{EXTA, 19200},
#endif
#endif
#ifdef B38400
#undef MAX_BAUD
#define MAX_BAUD	B38400
	{B38400, 38400},
#else 
#ifdef EXTB
#define MAX_BAUD	EXTB
	{EXTB, 38400},
#endif
#endif
#ifdef B57600
#undef MAX_BAUD
#define MAX_BAUD        B57600
	{B57600, 57600},
#endif
#ifdef B115200
#undef MAX_BAUD
#define MAX_BAUD        B115200
	{B115200, 115200},
#endif
};

int
baudrate(void)
{
int i, ret;

	T(("baudrate() called"));
a151 15
#ifdef TERMIOS
	ret = cfgetospeed(&cur_term->Nttyb);
#else
	ret = cur_term->Nttyb.sg_ospeed;
#endif
	if(ret < 0 || ret > MAX_BAUD)
		return ERR;
	SP->_baudrate = ERR;
	for (i = 0; i < (sizeof(speeds) / sizeof(struct speed)); i++)
		if (speeds[i].s == ret)
		{
			SP->_baudrate = speeds[i].sp;
			break;
		}
	return(SP->_baudrate);
a153 1

d163 1
a163 1
	T(("savetty() called"));
d165 2
a166 6
#ifdef TERMIOS
	tcgetattr(cur_term->Filedes, &buf);
#else
	gtty(cur_term->Filedes, &buf);
#endif
	return OK;
d171 1
a171 1
	T(("resetty() called"));
d173 2
a174 6
#ifdef TERMIOS
	tcsetattr(cur_term->Filedes, TCSANOW, &buf);
#else
        stty(cur_term->Filedes, &buf);
#endif
	return OK;
a175 1

@
