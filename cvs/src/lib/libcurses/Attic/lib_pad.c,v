head	1.5;
access;
symbols
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	99.01.18.19.08.15;	author millert;	state dead;
branches;
next	1.4;

1.4
date	98.07.23.21.19.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.26;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.46;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.30;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_pad.c,v 1.4 1998/07/23 21:19:11 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/


/*
 * lib_pad.c
 * newpad	-- create a new pad
 * pnoutrefresh -- refresh a pad, no update
 * pechochar	-- add a char to a pad and refresh
 */

#include <curses.priv.h>

MODULE_ID("$From: lib_pad.c,v 1.27 1998/06/28 00:10:16 tom Exp $")

WINDOW *newpad(int l, int c)
{
WINDOW *win;
chtype *ptr;
int i;

	T((T_CALLED("newpad(%d, %d)"), l, c));

	if (l <= 0 || c <= 0)
		returnWin(0);

	if ((win = _nc_makenew(l,c,0,0,_ISPAD)) == NULL)
		returnWin(0);

	for (i = 0; i < l; i++) {
	    if_USE_SCROLL_HINTS(win->_line[i].oldindex = _NEWINDEX);
	    if ((win->_line[i].text = typeCalloc(chtype, ((size_t)c))) == 0) {
		_nc_freewin(win);
		returnWin(0);
	    }
	    for (ptr = win->_line[i].text; ptr < win->_line[i].text + c; )
		*ptr++ = ' ';
	}

	returnWin(win);
}

WINDOW *subpad(WINDOW *orig, int l, int c, int begy, int begx)
{
WINDOW	*win = (WINDOW *)0;

	T((T_CALLED("subpad(%d, %d)"), l, c));

	if (orig) {
	  if (!(orig->_flags & _ISPAD) || ((win = derwin(orig, l, c, begy, begx)) == NULL))
	    returnWin(0);
	}
	returnWin(win);
}

int prefresh(WINDOW *win, int pminrow, int pmincol,
	int sminrow, int smincol, int smaxrow, int smaxcol)
{
	T((T_CALLED("prefresh()")));
	if (pnoutrefresh(win, pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol) != ERR
	 && doupdate() != ERR) {
		returnCode(OK);
	}
	returnCode(ERR);
}

int pnoutrefresh(WINDOW *win, int pminrow, int pmincol,
	int sminrow, int smincol, int smaxrow, int smaxcol)
{
const	int my_len = 2;	/* parameterize the threshold for hardscroll */
short	i, j;
short	m, n;
short	pmaxrow;
short	pmaxcol;
short	displaced;
bool	wide;

	T((T_CALLED("pnoutrefresh(%p, %d, %d, %d, %d, %d, %d)"),
		win, pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol));

	if (win == 0)
		returnCode(ERR);

	if (!(win->_flags & _ISPAD))
		returnCode(ERR);

	/* negative values are interpreted as zero */
	if (pminrow < 0) pminrow = 0;
	if (pmincol < 0) pmincol = 0;
	if (sminrow < 0) sminrow = 0;
	if (smincol < 0) smincol = 0;

	pmaxrow = pminrow + smaxrow - sminrow;
	pmaxcol = pmincol + smaxcol - smincol;

	T((" pminrow + smaxrow - sminrow %d, win->_maxy %d", pmaxrow, win->_maxy));
	T((" pmincol + smaxcol - smincol %d, win->_maxx %d", pmaxcol, win->_maxx));

	/*
	 * Trim the caller's screen size back to the actual limits.
	 */
	if (pmaxrow > win->_maxy) {
		smaxrow -= (pmaxrow - win->_maxy);
		pmaxrow = pminrow + smaxrow - sminrow;
	}
	if (pmaxcol > win->_maxx) {
		smaxcol -= (pmaxcol - win->_maxx);
		pmaxcol = pmincol + smaxcol - smincol;
	}

	if (smaxrow > screen_lines
	 || smaxcol > screen_columns
	 || sminrow > smaxrow
	 || smincol > smaxcol)
		returnCode(ERR);

	T(("pad being refreshed"));

	if (win->_pad._pad_y >= 0) {
		displaced = pminrow - win->_pad._pad_y
			  -(sminrow - win->_pad._pad_top);
		T(("pad being shifted by %d line(s)", displaced));
	} else
		displaced = 0;

	/*
	 * For pure efficiency, we'd want to transfer scrolling information
	 * from the pad to newscr whenever the window is wide enough that
	 * its update will dominate the cost of the update for the horizontal
	 * band of newscr that it occupies.  Unfortunately, this threshold
	 * tends to be complex to estimate, and in any case scrolling the
	 * whole band and rewriting the parts outside win's image would look
	 * really ugly.  So.  What we do is consider the pad "wide" if it
	 * either (a) occupies the whole width of newscr, or (b) occupies
	 * all but at most one column on either vertical edge of the screen
	 * (this caters to fussy people who put boxes around full-screen
	 * windows).  Note that changing this formula will not break any code,
	 * merely change the costs of various update cases.
	 */
	wide = (smincol < my_len && smaxcol > (newscr->_maxx - my_len));

	for (i = pminrow, m = sminrow + win->_yoffset;
		i <= pmaxrow && m <= newscr->_maxy;
			i++, m++) {
		register struct ldat	*nline = &newscr->_line[m];
		register struct ldat	*oline = &win->_line[i];

		for (j = pmincol, n = smincol; j <= pmaxcol; j++, n++) {
			if (oline->text[j] != nline->text[n]) {
				nline->text[n] = oline->text[j];
				CHANGED_CELL(nline,n);
			}
		}

#if USE_SCROLL_HINTS
		if (wide) {
		    int nind = m + displaced;
		    if (oline->oldindex < 0
		     || nind < sminrow
		     || nind > smaxrow) {
			nind = _NEWINDEX;
		    } else if (displaced) {
			register struct ldat *pline = &curscr->_line[nind];
			for (j = 0; j <= my_len; j++) {
			    int k = newscr->_maxx - j;
			    if (pline->text[j] != nline->text[j]
			     || pline->text[k] != nline->text[k]) {
				nind = _NEWINDEX;
				break;
			    }
			}
		    }

		    nline->oldindex = nind;
		}
#endif /* USE_SCROLL_HINTS */
		oline->firstchar = oline->lastchar = _NOCHANGE;
		if_USE_SCROLL_HINTS(oline->oldindex = i);
	}

	/*
	 * Clean up debris from scrolling or resizing the pad, so we do not
	 * accidentally pick up the index value during the next call to this
	 * procedure.  The only rows that should have an index value are those
	 * that are displayed during this cycle.
	 */
#if USE_SCROLL_HINTS
	for (i = pminrow-1; (i >= 0) && (win->_line[i].oldindex >= 0); i--)
		win->_line[i].oldindex = _NEWINDEX;
	for (i = pmaxrow+1; (i <= win->_maxy) && (win->_line[i].oldindex >= 0); i++)
		win->_line[i].oldindex = _NEWINDEX;
#endif

	win->_begx = smincol;
	win->_begy = sminrow;

	if (win->_clear) {
	    win->_clear = FALSE;
	    newscr->_clear = TRUE;
	}

	/*
	 * Use the pad's current position, if it will be visible.
	 * If not, don't do anything; it's not an error.
	 */
	if (win->_leaveok == FALSE
	 && win->_cury  >= pminrow
	 && win->_curx  >= pmincol
	 && win->_cury  <= pmaxrow
	 && win->_curx  <= pmaxcol) {
		newscr->_cury = win->_cury - pminrow + win->_begy + win->_yoffset;
		newscr->_curx = win->_curx - pmincol + win->_begx;
	}
	win->_flags &= ~_HASMOVED;

	/*
	 * Update our cache of the line-numbers that we displayed from the pad.
	 * We will use this on subsequent calls to this function to derive
	 * values to stuff into 'oldindex[]' -- for scrolling optimization.
	 */
	win->_pad._pad_y      = pminrow;
	win->_pad._pad_x      = pmincol;
	win->_pad._pad_top    = sminrow;
	win->_pad._pad_left   = smincol;
	win->_pad._pad_bottom = smaxrow;
	win->_pad._pad_right  = smaxcol;

	returnCode(OK);
}

int pechochar(WINDOW *pad, const chtype ch)
{
	T((T_CALLED("pechochar(%p, %s)"), pad, _tracechtype(ch)));

	if (pad == 0)
	  returnCode(ERR);

	if (!(pad->_flags & _ISPAD))
		returnCode(wechochar(pad,ch));

	waddch(pad, ch);
	prefresh(pad, pad->_pad._pad_y,
		      pad->_pad._pad_x,
		      pad->_pad._pad_top,
		      pad->_pad._pad_left,
		      pad->_pad._pad_bottom,
		      pad->_pad._pad_right);
	
	returnCode(OK);
}
@


1.4
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d46 1
a46 1
MODULE_ID("Id: lib_pad.c,v 1.24 1997/09/20 15:02:34 juergen Exp $")
d183 1
a183 7

				if (nline->firstchar == _NOCHANGE)
					nline->firstchar = nline->lastchar = n;
				else if (n < nline->firstchar)
					nline->firstchar = n;
				else if (n > nline->lastchar)
					nline->lastchar = n;
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d34 1
a34 1
MODULE_ID("Id: lib_pad.c,v 1.18 1997/04/12 17:42:52 tom Exp $")
d51 1
a51 1
	    win->_line[i].oldindex = _NEWINDEX;
d65 1
a65 1
WINDOW	*win;
d69 2
a70 1
	if (!(orig->_flags & _ISPAD) || ((win = derwin(orig, l, c, begy, begx)) == NULL))
d72 1
a72 1

d90 1
d160 1
a160 1
	wide = (sminrow <= 1 && win->_maxx >= (newscr->_maxx - 1));
d181 1
d186 1
a186 1
		     || nind > smaxrow)
d188 11
d202 1
d204 1
a204 1
		oline->oldindex = i;
d213 1
d218 1
d257 1
a257 1
int pechochar(WINDOW *pad, chtype ch)
d261 5
a265 2
	if (pad->_flags & _ISPAD)
		returnCode(ERR);
d267 8
a274 2
	waddch(curscr, ch);
	doupdate();
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d30 1
a30 1
#include "curses.priv.h"
d32 1
a32 6
#include <stdlib.h>
#include <errno.h>

#if !HAVE_EXTERN_ERRNO
extern int errno;
#endif
d38 1
a38 1
int i, j;
d40 1
a40 1
	T(("newpad(%d, %d) called", l, c));
d43 1
a43 4
		return NULL;

	if ((win = _nc_makenew(l,c,0,0)) == NULL)
		return NULL;
d45 2
a46 1
	win->_flags |= _ISPAD;
d50 3
a52 9
	    if ((win->_line[i].text = (chtype *) calloc((size_t)c, sizeof(chtype))) == NULL) {
			for (j = 0; j < i; j++)
			    free(win->_line[j].text);

			free(win->_line);
			free(win);

			errno = ENOMEM;
			return NULL;
d54 2
a55 3
	    else
		for (ptr = win->_line[i].text; ptr < win->_line[i].text + c; )
		    *ptr++ = ' ';
d58 1
a58 3
	T(("newpad: returned window is %p", win));

	return(win);
d65 1
a65 6
	T(("subpad(%d, %d) called", l, c));

	if ((win = derwin(orig, l, c, begy, begx)) == NULL)
	    return NULL;

	win->_flags |= _ISPAD;
d67 2
a68 1
	T(("subpad: returned window is %p", win));
d70 1
a70 1
	return(win);
d76 1
a76 1
	T(("prefresh() called"));
d79 1
a79 1
		return OK;
d81 1
a81 1
	return ERR;
d94 1
a94 1
	T(("pnoutrefresh(%p, %d, %d, %d, %d, %d, %d) called", 
d98 1
a98 1
		return ERR;
d101 1
a101 1
		return ERR;
a108 6
	if (smaxrow > screen_lines
	 || smaxcol > screen_columns
	 || sminrow > smaxrow
	 || smincol > smaxcol)
		return ERR;

d114 18
a131 3
	if ((pmaxrow > win->_maxy)
	 || (pmaxcol > win->_maxx))
		return ERR;
d158 3
a160 1
	for (i = pminrow, m = sminrow; i <= pmaxrow; i++, m++) {
d165 1
a165 1
	    		if (oline->text[j] != nline->text[n]) {
d169 1
a169 1
		   			nline->firstchar = nline->lastchar = n;
d171 1
a171 1
		   			nline->firstchar = n;
d173 1
a173 1
		   			nline->lastchar = n;
d177 9
a185 9
  		if (wide) {
 		    int nind = m + displaced;
 		    if (oline->oldindex < 0
 		     || nind < sminrow
 		     || nind > smaxrow)
 		    	nind = _NEWINDEX;
  
 		    nline->oldindex = nind;
  		}
d190 11
a200 11
 	/*
 	 * Clean up debris from scrolling or resizing the pad, so we do not
 	 * accidentally pick up the index value during the next call to this
 	 * procedure.  The only rows that should have an index value are those
 	 * that are displayed during this cycle.
 	 */
 	for (i = pminrow-1; (i >= 0) && (win->_line[i].oldindex >= 0); i--)
 		win->_line[i].oldindex = _NEWINDEX;
 	for (i = pmaxrow+1; (i <= win->_maxy) && (win->_line[i].oldindex >= 0); i++)
 		win->_line[i].oldindex = _NEWINDEX;
 
d218 1
a218 1
		newscr->_cury = win->_cury - pminrow + win->_begy;
d224 1
a224 1
	 * Update our cache of the line-numbers that we displayed from the pad. 
d235 1
a235 1
	return OK;
d240 1
a240 1
	T(("echochar(%p, %lx)", pad, ch));
d243 1
a243 1
		return ERR;
d247 1
a247 1
	return OK;
a248 1

@
