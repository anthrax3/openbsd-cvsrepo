head	1.5;
access;
symbols
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	99.01.18.19.08.53;	author millert;	state dead;
branches;
next	1.4;

1.4
date	98.07.23.21.19.45;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.38;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.56;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.35;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_twait.c,v 1.4 1998/07/23 21:19:45 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/

/*
**	lib_twait.c
**
**	The routine _nc_timed_wait().
**
**	(This file was originally written by Eric Raymond; however except for
**	comments, none of the original code remains - T.Dickey).
*/

#include <curses.priv.h>

#if USE_FUNC_POLL
# include <stropts.h>
# include <poll.h>
# if HAVE_SYS_TIME_H
#  include <sys/time.h>
# endif
#elif HAVE_SELECT
# if HAVE_SYS_TIME_H && HAVE_SYS_TIME_SELECT
#  include <sys/time.h>
# endif
# if HAVE_SYS_SELECT_H
#  include <sys/select.h>
# endif
#endif

#ifdef __BEOS__
/* BeOS select() only works on sockets.  Use the tty hack instead */
#include <socket.h>
#define select check_select
#endif

MODULE_ID("$From: lib_twait.c,v 1.32 1998/06/06 22:44:14 tom Exp $")

static int _nc_gettime(void)
{
	int res;

#if HAVE_GETTIMEOFDAY
# define PRECISE_GETTIME 1
	struct timeval t;
	gettimeofday(&t, (struct timezone *)0);
	res = t.tv_sec*1000 + t.tv_usec/1000;
#else
# define PRECISE_GETTIME 0
	res = time(0)*1000;
#endif
	T(("time: %d msec", res));
	return res;
}

/*
 * Wait a specified number of milliseconds, returning nonzero if the timer
 * didn't expire before there is activity on the specified file descriptors.
 * The file-descriptors are specified by the mode:
 *	0 - none (absolute time)
 *	1 - ncurses' normal input-descriptor
 *	2 - mouse descriptor, if any
 *	3 - either input or mouse.
 * We return a mask that corresponds to the mode (e.g., 2 for mouse activity).
 *
 * If the milliseconds given are -1, the wait blocks until activity on the
 * descriptors.
 */
int _nc_timed_wait(int mode, int milliseconds, int *timeleft)
{
int	fd;
int	count;

int result;

#if USE_FUNC_POLL
struct pollfd fds[2];
#elif HAVE_SELECT
static fd_set set;
#endif

int starttime, returntime;

	T(("start twait: %d milliseconds, mode: %d", milliseconds, mode));

#if PRECISE_GETTIME
retry:
#endif
	starttime = _nc_gettime();

	count = 0;

#if USE_FUNC_POLL
	if (mode & 1) {
		fds[count].fd     = SP->_ifd;
		fds[count].events = POLLIN;
		count++;
	}
	if ((mode & 2)
	 && (fd = SP->_mouse_fd) >= 0) {
		fds[count].fd     = fd;
		fds[count].events = POLLIN;
		count++;
	}
	result = poll(fds, count, milliseconds);

#elif HAVE_SELECT
	/*
	 * select() modifies the fd_set arguments; do this in the
	 * loop.
	 */
	FD_ZERO(&set);

	if (mode & 1) {
		FD_SET(SP->_ifd, &set);
		count = SP->_ifd + 1;
	}
	if ((mode & 2)
	 && (fd = SP->_mouse_fd) >= 0) {
		FD_SET(fd, &set);
		count = max(fd, count) + 1;
	}

	if (milliseconds >= 0) {
		struct timeval ntimeout;
		ntimeout.tv_sec  = milliseconds / 1000;
		ntimeout.tv_usec = (milliseconds % 1000) * 1000;
		result = select(count, &set, NULL, NULL, &ntimeout);
	} else {
		result = select(count, &set, NULL, NULL, NULL);
	}
#endif

	returntime = _nc_gettime();

	if (milliseconds >= 0)
		milliseconds -= returntime-starttime;

#if PRECISE_GETTIME
	/*
	 * If the timeout hasn't expired, and we've gotten no data,
	 * this is probably a system where 'select()' needs to be left
	 * alone so that it can complete.  Make this process sleep,
	 * then come back for more.
	 */
	if (result == 0 && milliseconds > 100) {
		napms(100);
		milliseconds -= 100;
		goto retry;
	}
#endif

	/* return approximate time left in milliseconds */
	if (timeleft)
		*timeleft = milliseconds;

	T(("end twait: returned %d (%d), remaining time %d msec",
		result, errno, milliseconds));

	/*
	 * Both 'poll()' and 'select()' return the number of file descriptors
	 * that are active.  Translate this back to the mask that denotes which
	 * file-descriptors, so that we don't need all of this system-specific
	 * code everywhere.
	 */
	if (result != 0) {
		if (result > 0) {
			result = 0;
#if USE_FUNC_POLL
			for (count = 0; count < 2; count++) {
				if ((mode & (1 << count))
				 && (fds[count].revents & POLLIN)) {
					result |= (1 << count);
					count++;
				}
			}
#elif HAVE_SELECT
			if ((mode & 2)
			 && (fd = SP->_mouse_fd) >= 0
			 && FD_ISSET(fd, &set))
				result |= 2;
			if ((mode & 1)
			 && FD_ISSET(SP->_ifd, &set))
				result |= 1;
#endif
		}
		else
			result = 0;
	}

	return (result);
}
@


1.4
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d48 5
a52 5
#include <stropts.h>
#include <poll.h>
#if HAVE_SYS_TIME_H
#include <sys/time.h>
#endif
d54 6
a59 5
#if HAVE_SYS_TIME_H && HAVE_SYS_TIME_SELECT
#include <sys/time.h>
#endif
#if HAVE_SYS_SELECT_H
#include <sys/select.h>
d61 5
d68 1
a68 1
MODULE_ID("Id: lib_twait.c,v 1.26 1997/11/30 01:09:23 tom Exp $")
d70 3
a72 13
/*
 * We want to define GOOD_SELECT if the last argument of select(2) is
 * modified to indicate time left.  The code will deal gracefully with
 * the other case, this is just an optimization to reduce the number
 * of system calls per input event.
 *
 * In general, expect System-V-like UNIXes to have this behavior and BSD-like
 * ones to not have it.  Check your manual page.  If it doesn't explicitly
 * say the last argument is modified, assume it's not.
 *
 * (We'd really like configure to autodetect this, but writing a proper test
 * turns out to be hard.)
 */
d75 7
a81 31
#if (defined(TRACE) && !HAVE_USLEEP) || ! GOOD_SELECT
static void _nc_gettime(struct timeval *tp)
{
	gettimeofday(tp, (struct timezone *)0);
	T(("time: %ld.%06ld", (long) tp->tv_sec, (long) tp->tv_usec));
}
#endif
#endif

#if !HAVE_USLEEP
int _nc_usleep(unsigned int usec)
{
int code;
struct timeval tval;

#if defined(TRACE) && HAVE_GETTIMEOFDAY
	_nc_gettime(&tval);
#endif
#if USE_FUNC_POLL
	{
	struct pollfd fds[1];
	code = poll(fds, 0, usec / 1000);
	}
#elif HAVE_SELECT
	tval.tv_sec = usec / 1000000;
	tval.tv_usec = usec % 1000000;
	code = select(0, NULL, NULL, NULL, &tval);
#endif

#if defined(TRACE) && HAVE_GETTIMEOFDAY
	_nc_gettime(&tval);
d83 2
a84 1
	return code;
a85 1
#endif /* !HAVE_USLEEP */
d103 1
a103 3
int	count = 0;
long	whole_secs = milliseconds / 1000;
long	micro_secs = (milliseconds % 1000) * 1000;
d105 1
a105 2
int result = 0;
struct timeval ntimeout;
d113 1
a113 3
#if !GOOD_SELECT && HAVE_GETTIMEOFDAY
struct timeval starttime, returntime;
long delta;
d115 4
a118 1
	_nc_gettime(&starttime);
d120 34
d156 4
a159 2
		ntimeout.tv_sec  = whole_secs;
		ntimeout.tv_usec = micro_secs;
d161 1
a161 2
		ntimeout.tv_sec  = 0;
		ntimeout.tv_usec = 0;
d163 1
d165 1
a165 1
	T(("start twait: %lu.%06lu secs", (long) ntimeout.tv_sec, (long) ntimeout.tv_usec));
d167 4
a170 1
#ifdef HIDE_EINTR
d172 4
a175 2
	 * The do loop tries to make it look like we have restarting signals,
	 * even if we don't.
d177 5
a181 81
	do {
#endif /* HIDE_EINTR */
#if !GOOD_SELECT && HAVE_GETTIMEOFDAY
	retry:
#endif
		count = 0;
#if USE_FUNC_POLL

		if (mode & 1) {
			fds[count].fd     = SP->_ifd;
			fds[count].events = POLLIN;
			count++;
		}
		if ((mode & 2)
		 && (fd = SP->_mouse_fd) >= 0) {
			fds[count].fd     = fd;
			fds[count].events = POLLIN;
			count++;
		}
		result = poll(fds, count, milliseconds);
#elif HAVE_SELECT
		/*
		 * Some systems modify the fd_set arguments; do this in the
		 * loop.
		 */
		FD_ZERO(&set);

		if (mode & 1) {
			FD_SET(SP->_ifd, &set);
			count = SP->_ifd + 1;
		}
		if ((mode & 2)
		 && (fd = SP->_mouse_fd) >= 0) {
			FD_SET(fd, &set);
			count = max(fd, count) + 1;
		}

		errno = 0;
		result = select(count, &set, NULL, NULL, milliseconds >= 0 ? &ntimeout : 0);
#endif

#if !GOOD_SELECT && HAVE_GETTIMEOFDAY
		_nc_gettime(&returntime);

		/* The contents of ntimeout aren't guaranteed after return from
		 * 'select()', so we disregard its contents.  Also, note that
		 * on some systems, tv_sec and tv_usec are unsigned.
		 */
		ntimeout.tv_sec  = whole_secs;
		ntimeout.tv_usec = micro_secs;

#define DELTA(f) (long)ntimeout.f - (long)returntime.f + (long)starttime.f

		delta = DELTA(tv_sec);
		if (delta < 0)
			delta = 0;
		ntimeout.tv_sec = delta;

		delta = DELTA(tv_usec);
		while (delta < 0 && ntimeout.tv_sec != 0) {
			ntimeout.tv_sec--;
			delta += 1000000;
		}
		ntimeout.tv_usec = delta;
		if (delta < 0)
			ntimeout.tv_sec = ntimeout.tv_usec = 0;

		/*
		 * If the timeout hasn't expired, and we've gotten no data,
		 * this is probably a system where 'select()' needs to be left
		 * alone so that it can complete.  Make this process sleep,
		 * then come back for more.
		 */
		if (result == 0
		 && (ntimeout.tv_sec != 0 || ntimeout.tv_usec > 100000)) {
			napms(100);
			goto retry;
		}
#endif
#ifdef HIDE_EINTR
	} while (result == -1 && errno == EINTR);
d184 1
a184 1
	/* return approximate time left on the ntimeout, in milliseconds */
d186 1
a186 1
		*timeleft = (ntimeout.tv_sec * 1000) + (ntimeout.tv_usec / 1000);
d188 2
a189 4
	T(("end twait: returned %d (%d), remaining time %lu.%06lu secs (%d msec)",
		result, errno,
		(long) ntimeout.tv_sec, (long) ntimeout.tv_usec,
		timeleft ? *timeleft : -1));
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d29 2
d42 1
a42 2
/* on SCO, <sys/time.h> conflicts with <sys/select.h> */
#if HAVE_SYS_TIME_H && ! SYSTEM_LOOKS_LIKE_SCO
d50 1
a50 1
MODULE_ID("Id: lib_twait.c,v 1.18 1997/02/15 18:27:51 tom Exp $")
d71 1
a71 1
	T(("time: %ld.%06ld", tp->tv_sec, tp->tv_usec));
d104 1
a104 1
 * Wait a specified number of milliseconds, returning true if the timer
d111 1
d149 1
d155 4
d168 1
a168 1
		 && (fd = _nc_mouse_fd()) >= 0) {
a172 1

d186 1
a186 1
		 && (fd = _nc_mouse_fd()) >= 0) {
d230 1
a230 1
			continue;
d233 1
d235 1
d241 3
a243 2
	T(("end twait: returned %d, remaining time %lu.%06lu secs (%d msec)",
		result, (long) ntimeout.tv_sec, (long) ntimeout.tv_usec,
d265 1
a265 1
			 && (fd = _nc_mouse_fd()) >= 0
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d29 1
a29 4
#include "curses.priv.h"

#include <sys/types.h>		/* some systems can't live without this */
#include <string.h>
d31 8
a41 5

#if HAVE_UNISTD_H
#include <unistd.h>
#endif

d45 3
d50 1
a50 1
 * We want to define GOOD_SELECT if the last argument of select(2) is 
d55 1
a55 1
 * In general, expect System-V-like UNIXes to have this behavior and BSD-like 
d58 1
a58 1
 * 
d62 9
a70 2
#if defined(linux)
#define GOOD_SELECT
d74 1
a74 1
int usleep(unsigned int usec)
d76 1
d79 9
d90 2
a91 1
	select(0, NULL, NULL, NULL, &tval);
d93 4
d98 1
a98 1
#endif
d100 13
a112 1
int _nc_timed_wait(int fd, int wait, int *timeleft)
d114 6
a119 1
int result;
d121 4
d126 3
a128 1
#if !defined(GOOD_SELECT) && HAVE_GETTIMEOFDAY
d130 1
d132 1
a132 1
	 gettimeofday(&starttime, NULL);
d135 89
a223 21
	 FD_ZERO(&set);
	 FD_SET(fd, &set);

	 /* the units of wait are milliseconds */
	 ntimeout.tv_sec = wait / 1000;
	 ntimeout.tv_usec = (wait % 1000) * 1000;

	 T(("start twait: sec = %ld, usec = %ld", ntimeout.tv_sec, ntimeout.tv_usec));

	 result = select(fd+1, &set, NULL, NULL, &ntimeout);

#if !defined(GOOD_SELECT) && HAVE_GETTIMEOFDAY
	 gettimeofday(&returntime, NULL);
	 ntimeout.tv_sec -= (returntime.tv_sec - starttime.tv_sec);
	 ntimeout.tv_usec -= (returntime.tv_usec - starttime.tv_usec);
	 if (ntimeout.tv_usec < 0 && ntimeout.tv_sec > 0) {
		ntimeout.tv_sec--;
		ntimeout.tv_usec += 1000000;
	 }
	 if (ntimeout.tv_sec < 0)
		ntimeout.tv_sec = ntimeout.tv_usec = 0;
d225 1
d227 2
a228 2
	 /* return approximate time left on the ntimeout, in milliseconds */
	 if (timeleft)
d231 34
a264 3
	 T(("end twait: returned %d, sec = %ld, usec = %ld (%d msec)",
		 result, ntimeout.tv_sec, ntimeout.tv_usec, 
	 	timeleft ? *timeleft : -1));
d266 1
a266 1
	 return(result);
@
