head	1.7;
access;
symbols
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	99.01.18.19.08.18;	author millert;	state dead;
branches;
next	1.6;

1.6
date	98.11.17.03.16.21;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.23.21.19.14;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.01.17.16.27.35;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.48;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.31;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_raw.c,v 1.6 1998/11/17 03:16:21 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/


/*
 *	raw.c
 *
 *	Routines:
 *		raw()
 *		cbreak()
 *		noraw()
 *		nocbreak()
 *		qiflush()
 *		noqiflush()
 *		intrflush()
 *
 */

#include <curses.priv.h>
#include <term.h>	/* cur_term */

MODULE_ID("$From: lib_raw.c,v 1.1 1998/11/08 00:26:05 tom Exp $")

#if defined(SVR4_TERMIO) && !defined(_POSIX_SOURCE)
#define _POSIX_SOURCE
#endif

#if HAVE_SYS_TERMIO_H
#include <sys/termio.h>	/* needed for ISC */
#endif

#ifdef __EMX__
#include <io.h>
#include <fcntl.h>
#endif

#define COOKED_INPUT	(IXON|BRKINT|PARMRK)

#ifdef TRACE
#define BEFORE(N)	if (_nc_tracing&TRACE_BITS) _tracef("%s before bits: %s", N, _nc_tracebits())
#define AFTER(N)	if (_nc_tracing&TRACE_BITS) _tracef("%s after bits: %s", N, _nc_tracebits())
#else
#define BEFORE(s)
#define AFTER(s)
#endif /* TRACE */

int raw(void)
{
	T((T_CALLED("raw()")));
	if (SP != 0 && cur_term != 0) {

		SP->_raw = TRUE;
		SP->_cbreak = TRUE;

#ifdef __EMX__
		setmode(SP->_ifd, O_BINARY);
#endif

#ifdef TERMIOS
		BEFORE("raw");
		cur_term->Nttyb.c_lflag &= ~(ICANON|ISIG);
		cur_term->Nttyb.c_iflag &= ~(COOKED_INPUT);
		cur_term->Nttyb.c_cc[VMIN] = 1;
		cur_term->Nttyb.c_cc[VTIME] = 0;
		AFTER("raw");
#else
		cur_term->Nttyb.sg_flags |= RAW;
#endif
		returnCode(_nc_set_curterm(&cur_term->Nttyb));
	}
	returnCode(ERR);
}

int cbreak(void)
{
	T((T_CALLED("cbreak()")));

	SP->_cbreak = TRUE;

#ifdef __EMX__
	setmode(SP->_ifd, O_BINARY);
#endif

#ifdef TERMIOS
	BEFORE("cbreak");
	cur_term->Nttyb.c_lflag &= ~ICANON;
	cur_term->Nttyb.c_iflag &= ~ICRNL;
	cur_term->Nttyb.c_lflag |= ISIG;
	cur_term->Nttyb.c_cc[VMIN] = 1;
	cur_term->Nttyb.c_cc[VTIME] = 0;
	AFTER("cbreak");
#else
	cur_term->Nttyb.sg_flags |= CBREAK;
#endif
	returnCode(_nc_set_curterm( &cur_term->Nttyb));
}

void qiflush(void)
{
	T((T_CALLED("qiflush()")));

	/*
	 * Note: this implementation may be wrong.  See the comment under
	 * intrflush().
	 */

#ifdef TERMIOS
	BEFORE("qiflush");
	cur_term->Nttyb.c_lflag &= ~(NOFLSH);
	AFTER("qiflush");
	(void)_nc_set_curterm( &cur_term->Nttyb);
	returnVoid;
#endif
}


int noraw(void)
{
	T((T_CALLED("noraw()")));

	SP->_raw = FALSE;
	SP->_cbreak = FALSE;

#ifdef __EMX__
	setmode(SP->_ifd, O_TEXT);
#endif

#ifdef TERMIOS
	BEFORE("noraw");
	cur_term->Nttyb.c_lflag |= ISIG|ICANON;
	cur_term->Nttyb.c_iflag |= COOKED_INPUT;
	AFTER("noraw");
#else
	cur_term->Nttyb.sg_flags &= ~(RAW|CBREAK);
#endif
	returnCode(_nc_set_curterm( &cur_term->Nttyb));
}


int nocbreak(void)
{
	T((T_CALLED("nocbreak()")));

	SP->_cbreak = FALSE;

#ifdef __EMX__
	setmode(SP->_ifd, O_TEXT);
#endif

#ifdef TERMIOS
	BEFORE("nocbreak");
	cur_term->Nttyb.c_lflag |= ICANON;
	cur_term->Nttyb.c_iflag |= ICRNL;
	AFTER("nocbreak");
#else
	cur_term->Nttyb.sg_flags &= ~CBREAK;
#endif
	returnCode(_nc_set_curterm( &cur_term->Nttyb));
}

void noqiflush(void)
{
	T((T_CALLED("noqiflush()")));

	/*
	 * Note: this implementation may be wrong.  See the comment under
	 * intrflush().
	 */

#ifdef TERMIOS
	BEFORE("noqiflush");
	cur_term->Nttyb.c_lflag |= NOFLSH;
	AFTER("noqiflush");
	(void)_nc_set_curterm( &cur_term->Nttyb);
	returnVoid;
#endif
}

int intrflush(WINDOW *win GCC_UNUSED, bool flag)
{
	T((T_CALLED("intrflush(%d)"), flag));

	/*
	 * This call does the same thing as the qiflush()/noqiflush()
	 * pair.  We know for certain that SVr3 intrflush() tweaks the
	 * NOFLSH bit; on the other hand, the match (in the SVr4 man
	 * pages) between the language describing NOFLSH in termio(7)
	 * and the language describing qiflush()/noqiflush() in
	 * curs_inopts(3x) is too exact to be coincidence.
	 */

#ifdef TERMIOS
	BEFORE("intrflush");
	if (flag)
		cur_term->Nttyb.c_lflag &= ~(NOFLSH);
	else
		cur_term->Nttyb.c_lflag |= (NOFLSH);
	AFTER("intrflush");
	returnCode(_nc_set_curterm( &cur_term->Nttyb));
#else
	returnCode(ERR);
#endif
}
@


1.6
log
@update to ncurses-4.2-981114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_raw.c,v 1.5 1998/07/23 21:19:14 millert Exp $	*/
@


1.5
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 1
a54 1
MODULE_ID("$From: lib_raw.c,v 1.26 1998/04/11 23:00:07 tom Exp $")
a68 8
/* may be undefined if we're using termio.h */
#ifndef TOSTOP
#define TOSTOP 0
#endif
#ifndef IEXTEN
#define IEXTEN 0
#endif

d72 2
a73 157

typedef struct {unsigned int val; const char *name;} BITNAMES;

static void lookup_bits(char *buf, const BITNAMES *table, const char *label, unsigned int val)
{
	const BITNAMES *sp;

	(void) strcat(buf, label);
	(void) strcat(buf, ": {");
	for (sp = table; sp->name; sp++)
		if (sp->val != 0
		&& (val & sp->val) == sp->val)
		{
			(void) strcat(buf, sp->name);
			(void) strcat(buf, ", ");
		}
	if (buf[strlen(buf) - 2] == ',')
		buf[strlen(buf) - 2] = '\0';
	(void) strcat(buf,"} ");
}

char *_tracebits(void)
/* describe the state of the terminal control bits exactly */
{
char	*buf;
static const	BITNAMES

#ifdef TERMIOS
iflags[] =
    {
	{BRKINT,	"BRKINT"},
	{IGNBRK,	"IGNBRK"},
	{IGNPAR,	"IGNPAR"},
	{PARMRK,	"PARMRK"},
	{INPCK, 	"INPCK"},
	{ISTRIP,	"ISTRIP"},
	{INLCR, 	"INLCR"},
	{IGNCR, 	"IGNC"},
	{ICRNL, 	"ICRNL"},
	{IXON,  	"IXON"},
	{IXOFF, 	"IXOFF"},
	{0,		NULL}
#define ALLIN	(BRKINT|IGNBRK|IGNPAR|PARMRK|INPCK|ISTRIP|INLCR|IGNCR|ICRNL|IXON|IXOFF)
    },
oflags[] =
    {
	{OPOST, 	"OPOST"},
	{0,		NULL}
#define ALLOUT	(OPOST)
    },
cflags[] =
    {
	{CLOCAL,	"CLOCAL"},
	{CREAD, 	"CREAD"},
	{CSTOPB,	"CSTOPB"},
#if !defined(CS5) || !defined(CS8)
	{CSIZE, 	"CSIZE"},
#endif
	{HUPCL, 	"HUPCL"},
	{PARENB,	"PARENB"},
	{PARODD|PARENB,	"PARODD"},	/* concession to readability */
	{0,		NULL}
#define ALLCTRL	(CLOCAL|CREAD|CSIZE|CSTOPB|HUPCL|PARENB|PARODD)
    },
lflags[] =
    {
	{ECHO,  	"ECHO"},
	{ECHOE|ECHO, 	"ECHOE"},	/* concession to readability */
	{ECHOK|ECHO, 	"ECHOK"},	/* concession to readability */
	{ECHONL,	"ECHONL"},
	{ICANON,	"ICANON"},
	{ISIG,  	"ISIG"},
	{NOFLSH,	"NOFLSH"},
	{TOSTOP,	"TOSTOP"},
	{IEXTEN,	"IEXTEN"},
	{0,		NULL}
#define ALLLOCAL	(ECHO|ECHONL|ICANON|ISIG|NOFLSH|TOSTOP|IEXTEN)
    };


    buf = _nc_trace_buf(0,
    	8 + sizeof(iflags) +
    	8 + sizeof(oflags) +
    	8 + sizeof(cflags) +
    	8 + sizeof(lflags) +
	8);

    if (cur_term->Nttyb.c_iflag & ALLIN)
	lookup_bits(buf, iflags, "iflags", cur_term->Nttyb.c_iflag);

    if (cur_term->Nttyb.c_oflag & ALLOUT)
	lookup_bits(buf, oflags, "oflags", cur_term->Nttyb.c_oflag);

    if (cur_term->Nttyb.c_cflag & ALLCTRL)
	lookup_bits(buf, cflags, "cflags", cur_term->Nttyb.c_cflag);

#if defined(CS5) && defined(CS8)
    switch (cur_term->Nttyb.c_cflag & CSIZE) {
    case CS5:	strcat(buf, "CS5 ");	break;
    case CS6:	strcat(buf, "CS6 ");	break;
    case CS7:	strcat(buf, "CS7 ");	break;
    case CS8:	strcat(buf, "CS8 ");	break;
    default:	strcat(buf, "CSIZE? ");	break;
    }
#endif

    if (cur_term->Nttyb.c_lflag & ALLLOCAL)
	lookup_bits(buf, lflags, "lflags", cur_term->Nttyb.c_lflag);

#else
    /* reference: ttcompat(4M) on SunOS 4.1 */
#ifndef EVENP
#define EVENP 0
#endif
#ifndef LCASE
#define LCASE 0
#endif
#ifndef LLITOUT
#define LLITOUT 0
#endif
#ifndef ODDP
#define ODDP 0
#endif
#ifndef TANDEM
#define TANDEM 0
#endif

cflags[] =
    {
	{CBREAK,	"CBREAK"},
	{CRMOD,		"CRMOD"},
	{ECHO,		"ECHO"},
	{EVENP,		"EVENP"},
	{LCASE,		"LCASE"},
	{LLITOUT,	"LLITOUT"},
	{ODDP,		"ODDP"},
	{RAW,		"RAW"},
	{TANDEM,	"TANDEM"},
	{XTABS,		"XTABS"},
	{0,		NULL}
#define ALLCTRL	(CBREAK|CRMOD|ECHO|EVENP|LCASE|LLITOUT|ODDP|RAW|TANDEM|XTABS)
    };

    buf = _nc_trace_buf(0,
    	8 + sizeof(cflags));

    if (cur_term->Nttyb.sg_flags & ALLCTRL)
    {
	lookup_bits(buf, cflags, "cflags", cur_term->Nttyb.sg_flags);
    }

#endif
    return(buf);
}

#define BEFORE(N)	if (_nc_tracing&TRACE_BITS) _tracef("%s before bits: %s", N, _tracebits())
#define AFTER(N)	if (_nc_tracing&TRACE_BITS) _tracef("%s after bits: %s", N, _tracebits())
@


1.4
log
@Use _ti_get_screensize() from libtermlib to update screen size if changed
    after a program is suspended.
Define EXTERN_TERMINFO in curses.h.
Update to ncurses-4.1-980103 and crank minor.
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_raw.c,v 1.3 1997/12/03 05:21:27 millert Exp $	*/
d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
a41 2
 *		echo()
 *		nl()
a43 2
 *		noecho()
 *		nonl()
d54 1
a54 1
MODULE_ID("Id: lib_raw.c,v 1.22 1998/01/03 21:59:22 tom Exp $")
d245 1
d247 2
a248 2
	SP->_raw = TRUE;
	SP->_cbreak = TRUE;
d251 1
a251 1
	setmode(SP->_ifd, O_BINARY);
d255 6
a260 6
	BEFORE("raw");
	cur_term->Nttyb.c_lflag &= ~(ICANON|ISIG);
	cur_term->Nttyb.c_iflag &= ~(COOKED_INPUT);
	cur_term->Nttyb.c_cc[VMIN] = 1;
	cur_term->Nttyb.c_cc[VTIME] = 0;
	AFTER("raw");
d262 1
a262 1
	cur_term->Nttyb.sg_flags |= RAW;
d264 3
a266 1
	returnCode(_nc_set_curterm(&cur_term->Nttyb));
d293 1
a293 26
int echo(void)
{
	T((T_CALLED("echo()")));

	SP->_echo = TRUE;

	returnCode(OK);
}


int nl(void)
{
	T((T_CALLED("nl()")));

	SP->_nl = TRUE;

#ifdef __EMX__
	fflush(SP->_ofp);
	_fsetmode(SP->_ofp, "t");
#endif

	returnCode(OK);
}


int qiflush(void)
d306 2
a307 3
	returnCode(_nc_set_curterm( &cur_term->Nttyb));
#else
	returnCode(ERR);
d356 1
a356 23
int noecho(void)
{
	T((T_CALLED("noecho()")));
	SP->_echo = FALSE;
	returnCode(OK);
}


int nonl(void)
{
	T((T_CALLED("nonl()")));

	SP->_nl = FALSE;

#ifdef __EMX__
	fflush(SP->_ofp);
	_fsetmode(SP->_ofp, "b");
#endif

	returnCode(OK);
}

int noqiflush(void)
d369 2
a370 3
	returnCode(_nc_set_curterm( &cur_term->Nttyb));
#else
	returnCode(ERR);
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
MODULE_ID("Id: lib_raw.c,v 1.21 1997/11/01 19:05:35 tom Exp $")
d56 5
d241 4
d264 4
d298 5
d334 4
d354 5
a358 1
	SP->_cbreak = 0;
d384 5
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d46 1
a46 1
MODULE_ID("Id: lib_raw.c,v 1.16 1997/02/02 00:02:32 tom Exp $")
d48 1
a48 1
#ifdef SVR4_TERMIO
d67 21
d91 2
a92 2
static char	buf[BUFSIZ];
static const	struct {unsigned int val; const char *name;}
d121 2
d124 1
a124 1
	{CSTOPB,	"CSTOPB"},
a139 1
#if TOSTOP != 0
a140 2
#endif
#if IEXTEN != 0
a141 1
#endif
d144 9
a152 2
    },
    *sp;
d155 1
a155 12
    {
	(void) strcpy(buf, "iflags: {");
	for (sp = iflags; sp->val; sp++)
	    if ((cur_term->Nttyb.c_iflag & sp->val) == sp->val)
	    {
		(void) strcat(buf, sp->name);
		(void) strcat(buf, ", ");
	    }
	if (buf[strlen(buf) - 2] == ',')
	    buf[strlen(buf) - 2] = '\0';
	(void) strcat(buf,"} ");
    }
d158 1
a158 12
    {
	(void) strcat(buf, "oflags: {");
	for (sp = oflags; sp->val; sp++)
	    if ((cur_term->Nttyb.c_oflag & sp->val) == sp->val)
	    {
		(void) strcat(buf, sp->name);
		(void) strcat(buf, ", ");
	    }
	if (buf[strlen(buf) - 2] == ',')
	    buf[strlen(buf) - 2] = '\0';
	(void) strcat(buf,"} ");
    }
d161 9
a169 11
    {
	(void) strcat(buf, "cflags: {");
	for (sp = cflags; sp->val; sp++)
	    if ((cur_term->Nttyb.c_cflag & sp->val) == sp->val)
	    {
		(void) strcat(buf, sp->name);
		(void) strcat(buf, ", ");
	    }
	if (buf[strlen(buf) - 2] == ',')
	    buf[strlen(buf) - 2] = '\0';
	(void) strcat(buf,"} ");
d171 1
d174 1
a174 12
    {
	(void) strcat(buf, "lflags: {");
	for (sp = lflags; sp->val; sp++)
	    if ((cur_term->Nttyb.c_lflag & sp->val) == sp->val)
	    {
		(void) strcat(buf, sp->name);
		(void) strcat(buf, ", ");
	    }
	if (buf[strlen(buf) - 2] == ',')
	    buf[strlen(buf) - 2] = '\0';
	(void) strcat(buf,"} ");
    }
d208 4
a211 2
    },
    *sp;
d215 1
a215 10
	(void) strcat(buf, "cflags: {");
	for (sp = cflags; sp->val; sp++)
	    if ((cur_term->Nttyb.sg_flags & sp->val) == sp->val)
	    {
		(void) strcat(buf, sp->name);
		(void) strcat(buf, ", ");
	    }
	if (buf[strlen(buf) - 2] == ',')
	    buf[strlen(buf) - 2] = '\0';
	(void) strcat(buf,"} ");
d246 1
a246 3
	if ((SET_TTY(cur_term->Filedes, &cur_term->Nttyb)) == -1)
		returnCode(ERR);
	returnCode(OK);
d266 1
a266 3
	if ((SET_TTY(cur_term->Filedes, &cur_term->Nttyb)) == -1)
		returnCode(ERR);
	returnCode(OK);
d302 1
a302 4
	if ((SET_TTY(cur_term->Filedes, &cur_term->Nttyb)) == -1)
		returnCode(ERR);
	else
		returnCode(OK);
d324 1
a324 3
	if ((SET_TTY(cur_term->Filedes, &cur_term->Nttyb)) == -1)
		returnCode(ERR);
	returnCode(OK);
d342 1
a342 3
	if ((SET_TTY(cur_term->Filedes, &cur_term->Nttyb)) == -1)
		returnCode(ERR);
	returnCode(OK);
d375 1
a375 4
	if ((SET_TTY(cur_term->Filedes, &cur_term->Nttyb)) == -1)
		returnCode(ERR);
	else
		returnCode(OK);
d401 1
a401 4
	if ((SET_TTY(cur_term->Filedes, &cur_term->Nttyb)) == -1)
		returnCode(ERR);
	else
		returnCode(OK);
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d41 2
a42 2
#include "curses.priv.h"
#include "term.h"	/* cur_term */
d44 197
a240 35
/* 
 * COOKED_INPUT defines the collection of input mode bits to be
 * cleared when entering raw mode, then re-set by noraw().  
 *
 * We used to clear ISTRIP and INPCK when going to raw mode.  Keith
 * Bostic says that's wrong, because those are hardware bits that the
 * user has to get right in his/her initial environment -- he says
 * curses can't do any good by clearing these, and may do harm.  In
 * 1995's world of 8N1 connections over error-correcting modems, all
 * the parity-check stuff is pretty nearly irrelevant anyway.
 *
 * What's supposed to happen when noraw() executes has never been very
 * well-defined.  Yes, it should reset ISIG/ICANON/OPOST (historical
 * practice is for it to attempt to take the driver back to cooked
 * mode, rather going to some half-baked cbreak-like intermediate
 * level).
 *
 * We make a design choice here to turn off CR/LF translation a la BSD
 * when raw() is enabled, on the theory that a programmer requesting
 * raw() ideally wants an 8-bit data stream that's been messed with as
 * little as possible.  The man pages document this.
 *
 * We originally opted for the simplest way to handle noraw(); just set all
 * the flags we cleared.  Unfortunately, having noraw() set IGNCR
 * turned out to be too painful.  So raw() now clears the COOKED_INPUT
 * flags, but also clears (ICRNL|INLCR|IGNCR) which noraw() doesn't
 * restore.
 *
 * Unfortunately, this means noraw() may still force some COOKED_INPUT
 * flags on that the user had initially cleared via stty.  It'll all
 * come out in the wash when endwin() restores the user's original
 * input bits (we hope...)
 *
 */
#define COOKED_INPUT	(IXON|IGNBRK|BRKINT|PARMRK)
d244 1
a244 1
	T(("raw() called"));
d250 3
a252 3
	cur_term->Nttyb.c_lflag &= ~(ICANON|ISIG|IEXTEN);
	cur_term->Nttyb.c_iflag &= ~(COOKED_INPUT|ICRNL|INLCR|IGNCR);
	cur_term->Nttyb.c_oflag &= ~(OPOST);
d255 1
a255 4
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
	else
		return OK;
a257 2
	stty(cur_term->Filedes, &cur_term->Nttyb);
	return OK;
d259 3
d266 1
a266 1
	T(("cbreak() called"));
d271 3
a273 1
	cur_term->Nttyb.c_lflag &= ~ICANON; 
d277 1
a277 4
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
	else
		return OK;
a279 2
	stty(cur_term->Filedes, &cur_term->Nttyb);
	return OK;
d281 3
d288 1
a288 1
	T(("echo() called"));
d291 2
a292 12
    
#ifdef TERMIOS
	cur_term->Nttyb.c_lflag |= ECHO;
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
	else
		return OK;
#else
	cur_term->Nttyb.sg_flags |= ECHO;
	stty(cur_term->Filedes, &cur_term->Nttyb);
	return OK;
#endif
d298 1
a298 1
	T(("nl() called"));
d302 1
a302 13
#ifdef TERMIOS
	/* the code used to set IXON|IXOFF here, Ghod knows why... */
	cur_term->Nttyb.c_iflag |= ICRNL;
	cur_term->Nttyb.c_oflag |= OPOST|ONLCR;
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
	else
		return OK;
#else
	cur_term->Nttyb.sg_flags |= CRMOD;
	stty(cur_term->Filedes, &cur_term->Nttyb);
	return OK;
#endif
d308 1
a308 1
	T(("qiflush() called"));
d316 1
d318 3
a320 2
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
d322 1
a322 1
		return OK;
d324 1
a324 1
	return ERR;
d331 1
a331 1
	T(("noraw() called"));
d337 2
a338 1
	cur_term->Nttyb.c_lflag |= ISIG|ICANON|IEXTEN;
d340 1
a340 5
	cur_term->Nttyb.c_oflag |= OPOST;
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
	else
		return OK;
a342 2
	stty(cur_term->Filedes, &cur_term->Nttyb);
	return OK;
d344 3
a346 1

d352 1
a352 1
	T(("nocbreak() called"));
d355 1
a355 1
	
d357 1
d359 3
a361 5
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
	else
		return OK;
#else 
a362 2
	stty(cur_term->Filedes, &cur_term->Nttyb);
	return OK;
d364 3
d371 1
a371 2
	T(("noecho() called"));

d373 1
a373 16
	
#ifdef TERMIOS
	/* 
	 * Turn off ECHONL to avoid having \n still be echoed when
	 * cooked mode is in effect (that is, ICANON is on).
	 */
	cur_term->Nttyb.c_lflag &= ~(ECHO|ECHONL);
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
	else
		return OK;
#else
	cur_term->Nttyb.sg_flags &= ~ECHO;
	stty(cur_term->Filedes, &cur_term->Nttyb);
	return OK;
#endif
d379 1
a379 1
	T(("nonl() called"));
d382 2
a383 13
	
#ifdef TERMIOS
	cur_term->Nttyb.c_iflag &= ~ICRNL;
	cur_term->Nttyb.c_oflag &= ~ONLCR;
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
	else
		return OK;
#else
	cur_term->Nttyb.sg_flags &= ~CRMOD;
	stty(cur_term->Filedes, &cur_term->Nttyb);
	return OK;
#endif
d388 1
a388 1
	T(("noqiflush() called"));
d396 1
d398 3
a400 2
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
d402 1
a402 1
		return OK;
d404 1
a404 1
	return ERR;
d408 1
a408 1
int intrflush(WINDOW *win, bool flag)
d410 1
a410 1
	T(("intrflush() called"));
d422 1
d427 3
a429 2
	if((tcsetattr(cur_term->Filedes, TCSANOW, &cur_term->Nttyb)) == -1)
		return ERR;
d431 1
a431 1
		return OK;
d433 1
a433 1
	return ERR;
a435 1

@
