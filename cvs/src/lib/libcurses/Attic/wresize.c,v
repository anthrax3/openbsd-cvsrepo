head	1.8;
access;
symbols
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.8
date	99.01.18.19.09.20;	author millert;	state dead;
branches;
next	1.7;

1.7
date	98.09.13.19.16.31;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.08.15.18.44.47;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.08.14.21.11.45;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.07.23.21.20.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.46;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.29.05.01.23;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.26.04.02.02;	author millert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: wresize.c,v 1.7 1998/09/13 19:16:31 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Thomas E. Dickey <dickey@@clark.net> 1996,1997                   *
 ****************************************************************************/

#include <curses.priv.h>
#include <term.h>

MODULE_ID("$From: wresize.c,v 1.10 1998/08/15 22:59:39 tom Exp $")

/*
 * Reallocate a curses WINDOW struct to either shrink or grow to the specified
 * new lines/columns.  If it grows, the new character cells are filled with
 * blanks.  The application is responsible for repainting the blank area.
 */

#define DOALLOC(p,t,n)  (t *)_nc_doalloc(p, sizeof(t)*(n))
#define	ld_ALLOC(p,n)	DOALLOC(p,struct ldat,n)
#define	c_ALLOC(p,n)	DOALLOC(p,chtype,n)

int
wresize(WINDOW *win, int ToLines, int ToCols)
{
	register int row;
	int size_x, size_y;
	struct ldat *pline;
	chtype blank;

#ifdef TRACE
	T((T_CALLED("wresize(%p,%d,%d)"), win, ToLines, ToCols));
	if (win) {
	  TR(TRACE_UPDATE, ("...beg (%d, %d), max(%d,%d), reg(%d,%d)",
			    win->_begy, win->_begx,
			    win->_maxy, win->_maxx,
			    win->_regtop, win->_regbottom));
	  if (_nc_tracing & TRACE_UPDATE)
	    _tracedump("...before", win);
	}
#endif

	if (!win || --ToLines < 0 || --ToCols < 0)
		returnCode(ERR);

	size_x = win->_maxx;
	size_y = win->_maxy;

	if (ToLines == size_y
	 && ToCols  == size_x)
		returnCode(OK);

	pline  = (win->_flags & _SUBWIN) ? win->_parent->_line : 0;

	/*
	 * If the number of lines has changed, adjust the size of the overall
	 * vector:
	 */
	if (ToLines != size_y) {
		if (! (win->_flags & _SUBWIN)) {
			for (row = ToLines+1; row <= size_y; row++)
				free((char *)(win->_line[row].text));
		}

		win->_line = ld_ALLOC(win->_line, ToLines+1);
		if (win->_line == 0)
			returnCode(ERR);

		for (row = size_y+1; row <= ToLines; row++) {
			win->_line[row].text      = 0;
			win->_line[row].firstchar = 0;
			win->_line[row].lastchar  = ToCols;
			if ((win->_flags & _SUBWIN)) {
				win->_line[row].text =
	    			&pline[win->_begy + row].text[win->_begx];
			}
		}
	}

	/*
	 * Adjust the width of the columns:
	 */
	blank = _nc_background(win);
	for (row = 0; row <= ToLines; row++) {
		chtype	*s	= win->_line[row].text;
		int	begin	= (s == 0) ? 0 : size_x + 1;
		int	end	= ToCols;

		if_USE_SCROLL_HINTS(win->_line[row].oldindex = row);

		if (ToCols != size_x || s == 0) {
			if (! (win->_flags & _SUBWIN)) {
				win->_line[row].text = s = c_ALLOC(s, ToCols+1);
				if (win->_line[row].text == 0)
					returnCode(ERR);
			} else if (s == 0) {
				win->_line[row].text = s =
	    			&pline[win->_begy + row].text[win->_begx];
			}

			if (end >= begin) {	/* growing */
				if (win->_line[row].firstchar < begin)
					win->_line[row].firstchar = begin;
				win->_line[row].lastchar = ToCols;
				do {
					s[end] = blank;
				} while (--end >= begin);
			} else {		/* shrinking */
				win->_line[row].firstchar = 0;
				win->_line[row].lastchar  = ToCols;
			}
		}
	}

	/*
	 * Finally, adjust the parameters showing screen size and cursor
	 * position:
	 */
	win->_maxx = ToCols;
	win->_maxy = ToLines;

	if (win->_regtop > win->_maxy)
		win->_regtop = win->_maxy;
	if (win->_regbottom > win->_maxy
	 || win->_regbottom == size_y)
		win->_regbottom = win->_maxy;

	if (win->_curx > win->_maxx)
		win->_curx = win->_maxx;
	if (win->_cury > win->_maxy)
		win->_cury = win->_maxy;

#ifdef TRACE
	TR(TRACE_UPDATE, ("...beg (%d, %d), max(%d,%d), reg(%d,%d)",
		win->_begy, win->_begx,
		win->_maxy, win->_maxx,
		win->_regtop, win->_regbottom));
	if (_nc_tracing & TRACE_UPDATE)
		_tracedump("...after:", win);
#endif
	returnCode(OK);
}
@


1.7
log
@ncurses-4.2-980905
@
text
@d1 1
a1 1
/*	$OpenBSD: wresize.c,v 1.6 1998/08/15 18:44:47 millert Exp $	*/
@


1.6
log
@fix broken realloc fix from yesterday
@
text
@d1 1
a1 1
/*	$OpenBSD: wresize.c,v 1.5 1998/08/14 21:11:45 millert Exp $	*/
d38 1
a38 1
MODULE_ID("$From: wresize.c,v 1.9 1998/02/11 12:13:54 tom Exp $")
d46 1
a46 11
static void *doalloc(void *p, size_t n)
{
	void *np;

	np = p ? realloc(p, n) : malloc(n);
	if (np == 0 && p != 0)
		free(p);
	return np;
}

#define DOALLOC(p,t,n)  (t *)doalloc(p, sizeof(t)*(n))
@


1.5
log
@fix realloc usage
@
text
@d1 1
a1 1
/*	$OpenBSD: wresize.c,v 1.4 1998/07/23 21:20:11 millert Exp $	*/
d50 1
a50 4
	if (p == 0)
		np = malloc(n);
	else
		np = realloc(p, n);
@


1.4
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 2
d51 1
a51 1
		p = malloc(n);
d53 4
a56 2
		p = realloc(p, n);
	return p;
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d3 31
a33 19
/******************************************************************************
 * Copyright 1996,1997 by Thomas E. Dickey <dickey@@clark.net>                 *
 * All Rights Reserved.                                                       *
 *                                                                            *
 * Permission to use, copy, modify, and distribute this software and its      *
 * documentation for any purpose and without fee is hereby granted, provided  *
 * that the above copyright notice appear in all copies and that both that    *
 * copyright notice and this permission notice appear in supporting           *
 * documentation, and that the name of the above listed copyright holder(s)   *
 * not be used in advertising or publicity pertaining to distribution of the  *
 * software without specific, written prior permission. THE ABOVE LISTED      *
 * COPYRIGHT HOLDER(S) DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,  *
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO     *
 * EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY         *
 * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER       *
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF       *
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN        *
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                   *
 ******************************************************************************/
d38 1
a38 1
MODULE_ID("Id: wresize.c,v 1.8 1997/09/20 15:03:39 juergen Exp $")
a51 2
	if (p == 0)
		errno = ENOMEM;
@


1.2
log
@Check malloc() return vals.
@
text
@d1 2
d26 1
a26 1
MODULE_ID("Id: wresize.c,v 1.5 1997/02/01 23:22:54 tom Exp $")
d52 4
a55 3
	register int	row;
	int	size_x, size_y;
	struct ldat *pline = (win->_flags & _SUBWIN) ? win->_parent->_line : 0;
d59 8
a66 6
	TR(TRACE_UPDATE, ("...beg (%d, %d), max(%d,%d), reg(%d,%d)",
		win->_begy, win->_begx,
		win->_maxy, win->_maxx,
		win->_regtop, win->_regbottom));
	if (_nc_tracing & TRACE_UPDATE)
		_tracedump("...before", win);
d69 1
a69 1
	if (--ToLines < 0 || --ToCols < 0)
d79 2
d109 1
a113 1
		chtype	blank	= _nc_background(win);
d115 1
a115 1
		win->_line[row].oldindex = row;
@


1.1
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d38 2
@
