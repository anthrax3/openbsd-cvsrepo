head	1.7;
access;
symbols
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	99.01.18.19.08.15;	author millert;	state dead;
branches;
next	1.6;

1.6
date	98.07.23.21.19.09;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.01.17.16.27.35;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.12.14.23.15.47;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.26;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.46;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.30;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_overlay.c,v 1.6 1998/07/23 21:19:09 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/


/*
**	lib_overlay.c
**
**	The routines overlay(), copywin(), and overwrite().
**
*/

#include <curses.priv.h>

MODULE_ID("$From: lib_overlay.c,v 1.12 1998/02/11 12:13:59 tom Exp $")

static int overlap(const WINDOW *const s, WINDOW *const d, int const flag)
{
int sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol;

	T(("overlap : sby %d, sbx %d, smy %d, smx %d, dby %d, dbx %d, dmy %d, dmx %d",
		s->_begy, s->_begx, s->_maxy, s->_maxx,
		d->_begy, d->_begx, d->_maxy, d->_maxx));
	
	if (!s || !d)
		returnCode(ERR);

	sminrow = max(s->_begy, d->_begy) - s->_begy;
	smincol = max(s->_begx, d->_begx) - s->_begx;
	dminrow = max(s->_begy, d->_begy) - d->_begy;
	dmincol = max(s->_begx, d->_begx) - d->_begx;
	dmaxrow = min(s->_maxy+s->_begy, d->_maxy+d->_begy) - d->_begy;
	dmaxcol = min(s->_maxx+s->_begx, d->_maxx+d->_begx) - d->_begx;

	return(copywin(s, d,
		       sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol,
		       flag));
}

/*
**
**	overlay(win1, win2)
**
**
**	overlay() writes the overlapping area of win1 behind win2
**	on win2 non-destructively.
**
**/

int overlay(const WINDOW *win1, WINDOW *win2)
{
	T((T_CALLED("overlay(%p,%p)"), win1, win2));
	returnCode(overlap(win1, win2, TRUE));
}

/*
**
**	overwrite(win1, win2)
**
**
**	overwrite() writes the overlapping area of win1 behind win2
**	on win2 destructively.
**
**/

int overwrite(const WINDOW *win1, WINDOW *win2)
{
	T((T_CALLED("overwrite(%p,%p)"), win1, win2));
	returnCode(overlap(win1, win2, FALSE));
}

int copywin(const WINDOW *src, WINDOW *dst,
	int sminrow, int smincol,
	int dminrow, int dmincol, int dmaxrow, int dmaxcol,
	int over)
{
int sx, sy, dx, dy;
bool touched;
chtype bk = AttrOf(dst->_bkgd);
chtype mask = ~(chtype)((bk&A_COLOR) ? A_COLOR : 0);

	T((T_CALLED("copywin(%p, %p, %d, %d, %d, %d, %d, %d, %d)"),
		src, dst, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol, over));

	if (!src || !dst)
	  returnCode(ERR);

	/* make sure rectangle exists in source */
	if ((sminrow + dmaxrow - dminrow) > (src->_maxy + 1) ||
	    (smincol + dmaxcol - dmincol) > (src->_maxx + 1)) {
		returnCode(ERR);
	}

	T(("rectangle exists in source"));

	/* make sure rectangle fits in destination */
	if (dmaxrow > dst->_maxy || dmaxcol > dst->_maxx) {
		returnCode(ERR);
	}

	T(("rectangle fits in destination"));

	for (dy = dminrow, sy = sminrow; dy <= dmaxrow; sy++, dy++) {
	   touched = FALSE;
	   for(dx=dmincol, sx=smincol; dx <= dmaxcol; sx++, dx++)
	   {
		if (over)
		{
		   if ((TextOf(src->_line[sy].text[sx]) != ' ') &&
                       (dst->_line[dy].text[dx]!=src->_line[sy].text[sx]))
		   {
			dst->_line[dy].text[dx] =
					(src->_line[sy].text[sx] & mask) | bk;
			touched = TRUE;
		   }
	        }
		else {
		   if (dst->_line[dy].text[dx] != src->_line[sy].text[sx])
		   {
			dst->_line[dy].text[dx] = src->_line[sy].text[sx];
			touched = TRUE;
                   }
                }
           }
	   if (touched)
	   {
	      touchline(dst,0,getmaxy(dst));
	   }
	}
	T(("finished copywin"));
	returnCode(OK);
}
@


1.6
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5
log
@Use _ti_get_screensize() from libtermlib to update screen size if changed
    after a program is suspended.
Define EXTERN_TERMINFO in curses.h.
Update to ncurses-4.1-980103 and crank minor.
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_overlay.c,v 1.4 1997/12/14 23:15:47 millert Exp $	*/
d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d46 1
a46 1
MODULE_ID("Id: lib_overlay.c,v 1.11 1997/12/19 17:04:06 xtang Exp $")
d55 1
a55 1

@


1.4
log
@ncurses-4.1-971213
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_overlay.c,v 1.3 1997/12/03 05:21:26 millert Exp $	*/
d34 1
a34 1
MODULE_ID("Id: lib_overlay.c,v 1.10 1997/12/03 15:47:41 Alexander.V.Lukyanov Exp $")
d43 4
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 1
a34 1
MODULE_ID("Id: lib_overlay.c,v 1.9 1997/09/20 15:02:34 juergen Exp $")
d94 2
d127 2
a128 1
			dst->_line[dy].text[dx] = src->_line[sy].text[sx];
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d34 1
a34 1
MODULE_ID("Id: lib_overlay.c,v 1.8 1997/04/24 10:34:38 tom Exp $")
d97 3
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d30 1
a30 1
#include "curses.priv.h"
d32 4
a35 2
static void overlap(const WINDOW *const s, WINDOW *const d, int const flag)
{ 
d39 1
a39 1
		s->_begy, s->_begx, s->_maxy, s->_maxx, 
d48 3
a50 1
	copywin(s, d, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol, flag);
d65 2
a66 2
	overlap(win1, win2, TRUE);
	return OK;
d81 2
a82 2
	overlap(win1, win2, FALSE);
	return OK;
d85 1
a85 1
int copywin(const WINDOW *src, WINDOW *dst, 
d87 1
a87 1
	int dminrow, int dmincol, int dmaxrow, int dmaxcol, 
d91 4
a94 1
int touched;
a95 3
	T(("copywin(%p, %p, %d, %d, %d, %d, %d, %d, %d)",
	    	src, dst, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol, over));
	
d99 1
a99 1
		return ERR;
d106 1
a106 1
		return ERR;
d112 1
a112 1
	   touched=0;
d117 1
a117 1
		   if (((src->_line[sy].text[sx] & A_CHARTEXT)!=' ') &&
d121 1
a121 1
			touched=1;
d128 1
a128 1
			touched=1;
d138 1
a138 1
	return OK;
@
