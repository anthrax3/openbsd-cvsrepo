head	1.7;
access;
symbols
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5;
locks; strict;
comment	@ * @;


1.7
date	99.01.18.19.09.06;	author millert;	state dead;
branches;
next	1.6;

1.6
date	98.11.19.18.08.54;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.10.08.04.20.00;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.16.05.17.53;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.07.25.19.36.11;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.07.24.06.10.42;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	98.07.23.21.19.58;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: read_bsd_terminfo.c,v 1.6 1998/11/19 18:08:54 millert Exp $	*/

/*
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 * Copyright (c) 1996 SigmaSoft, Th. Lockert <tholo@@sigmasoft.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by SigmaSoft, Th.  Lockert.
 * 4. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef lint
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.6 1998/11/19 18:08:54 millert Exp $";
#endif

#include <curses.priv.h>
#include <tic.h>
#include <term.h>	/* lines, columns, cur_term */
#include <term_entry.h>

#define PVECSIZ 32
#define	_PATH_TERMINFO	"/usr/share/misc/terminfo"

/*
 * Look up ``tn'' in the BSD terminfo.db file and fill in ``tp''
 * with the info we find there.
 * Returns 1 on success, 0 on failure.
 */
int
_nc_read_bsd_terminfo_entry(tn, tp)
     const char *tn;
     TERMTYPE *const tp;
{
    char  *p;
    char  *dummy;
    char **fname;
    int    i;
    char   envterm[PATH_MAX];		/* local copy of $TERMINFO */
    char   hometerm[PATH_MAX];		/* local copy of $HOME/.terminfo */
    char  *pathvec[PVECSIZ];		/* to point to names in pathbuf */
    char   namecpy[MAX_NAME_SIZE+1];
    long   num;
    size_t len;

    fname = pathvec;
    /* $TERMINFO may hold a path to a terminfo file */
    if (!issetugid() && (p = getenv("TERMINFO")) != NULL) {
	len = strlcpy(envterm, p, sizeof(envterm));
	if (len < sizeof(envterm))
	    *fname++ = envterm;
    }

    /* Also check $HOME/.terminfo if it exists */
    if (!issetugid() && (p = getenv("HOME")) != NULL) {
	len = snprintf(hometerm, sizeof(hometerm), "%s/.terminfo", p);
	if (len < sizeof(hometerm))
	    *fname++ = hometerm;
    }

    /* Finally we check the system terminfo file and mark the end of vector */
    *fname++ = _PATH_TERMINFO;
    *fname = (char *) 0;

    (void) cgetset(NULL);
    dummy = NULL;
    i = cgetent(&dummy, pathvec, (char *)tn);      
	
    if (i == 0) {
	_nc_init_entry(tp);

	/* Set terminal name(s) */
	if ((p = strchr(dummy, ':')) != NULL)
	    *p = '\0';
	if ((tp->str_table = tp->term_names = strdup(dummy)) == NULL)
	    return (0);
	_nc_set_type(_nc_first_name(tp->term_names));
	if (p)
	    *p = ':';

	/* Truncate overly-long names and aliases */
	(void)strlcpy(namecpy, tp->term_names, sizeof(namecpy));
	if ((p = strrchr(namecpy, '|')) != (char *)NULL)
	    *p = '\0';
	p = strtok(namecpy, "|");
	if (strlen(p) > MAX_ALIAS)
	    _nc_warning("primary name may be too long");
	while ((p = strtok((char *)NULL, "|")) != (char *)NULL)
	    if (strlen(p) > MAX_ALIAS)
		_nc_warning("alias `%s' may be too long", p);

	/* Copy capabilities */
	for (i = 0 ; i < BOOLCOUNT ; i++) {
	    if (cgetcap(dummy, (char *)boolnames[i], ':') == NULL)
		tp->Booleans[i] = FALSE;
	    else
		tp->Booleans[i] = TRUE;
	}
	for (i = 0 ; i < NUMCOUNT ; i++) {
	    if (cgetnum(dummy, (char *)numnames[i], &num) < 0)
		tp->Numbers[i] = 0;
	    else
		tp->Numbers[i] = (int)num;
	}
	for (i = 0 ; i < STRCOUNT ; i++) {
	    if (cgetstr(dummy, (char *)strnames[i], &p) < 0)
		tp->Strings[i] = NULL;
	    else
		tp->Strings[i] = p;
	}
	i = 0;
    }

    /* We are done with the returned getcap buffer now; free it */
    if (dummy)
	free(dummy);

    return ((i == 0));
}
@


1.6
log
@Ignore $TERMINFO if setuigid
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.5 1998/10/08 04:20:00 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.5 1998/10/08 04:20:00 millert Exp $";
@


1.5
log
@Don't honor $TERMCAP, $TERMINFO, or ~/.termcap, ~/.terminfo if we are setuid/setgid
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.4 1998/08/16 05:17:53 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.4 1998/08/16 05:17:53 millert Exp $";
d69 1
a69 1
    if ((p = getenv("TERMINFO")) != NULL) {
@


1.4
log
@If $TERMINFO is set, use that in preference to the system terminfo file, but fallback on the system one if the terminal entry is not found in $TERMINFO
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.3 1998/07/25 19:36:11 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.3 1998/07/25 19:36:11 millert Exp $";
d76 1
a76 1
    if ((p = getenv("HOME")) != NULL) {
@


1.3
log
@fix comment
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.2 1998/07/24 06:10:42 downsj Exp $	*/
d4 1
d19 1
a19 1
 * 4. The name of the author may not be used to endorse or promote products
d25 1
a25 1
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
d35 1
a35 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.2 1998/07/24 06:10:42 downsj Exp $";
d44 1
a44 3

/* XXX - belongs in a header file */
#define	_PATH_INFODEF	".terminfo /usr/share/misc/terminfo"
a58 1
    char  *home;
d60 2
a61 1
    char   pathbuf[PATH_MAX];		/* holds raw path of filenames */
a62 1
    char  *termpath;
d68 12
a79 21
    p = pathbuf;
    /*
     * TERMINFO can have the name of a file to use instead of
     * /usr/share/misc/terminfo.  If TERMINFO does not hold a file
     * name then a path of names is searched instead. The path is
     * found in the TERMINFO variable, or becomes "$HOME/.terminfo
     * /usr/share/misc/terminfo" if no TERMINFO exists.
     */
    if ((termpath = getenv("TERMINFO")) != NULL)
	strlcpy(pathbuf, termpath, sizeof(pathbuf));
    else {
	/* $HOME/.terminfo or just .terminfo if no $HOME */
	if ((home = getenv("HOME")) != NULL) {
	    len = strlcpy(pathbuf, home,
		sizeof(pathbuf) - sizeof(_PATH_INFODEF));
	    if (len < sizeof(pathbuf) - sizeof(_PATH_INFODEF)) {
		p+= len;
		*p++ = '/';
	    }
	}
	strlcpy(p, _PATH_INFODEF, sizeof(pathbuf) - (p - pathbuf));
d82 4
a85 16
    *fname++ = pathbuf;	/* tokenize path into vector of names */
    while (*++p)
	if (*p == ' ' || *p == ':') {
	    *p = '\0';
	    while (*++p)
		if (*p != ' ' && *p != ':')
		    break;
	    if (*p == '\0')
		break;
	    *fname++ = p;
	    if (fname >= pathvec + PVECSIZ) {
		fname--;
		break;
	    }
	}
    *fname = (char *) 0;			/* mark end of vector */
a86 1

@


1.2
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: read_bsd_terminfo.c,v 1.1 1998/07/23 21:19:58 millert Exp $	*/
d34 1
a34 1
static char rcsid[] = "$OpenBSD: read_bsd_terminfo.c,v 1.1 1998/07/23 21:19:58 millert Exp $";
d72 5
a76 9
     * TERMINFO can have one of two things in it. It can be the name
     * of a file to use instead of /usr/share/misc/terminfo. In this
     * case it better start with a "/". Or it can be an entry to use
     * so we don't have to read the file. In this case it has to
     * already have the newlines crunched out.  If TERMINFO does not
     * hold a file name then a path of names is searched instead.
     * The path is found in the TERMINFO variable, or becomes
     * "$HOME/.terminfo /usr/share/misc/terminfo" if no TERMINFO
     * exists.
@


1.1
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 1
a34 1
static char rcsid[] = "$OpenBSD$";
d83 1
a83 1
	strlpy(pathbuf, termpath, sizeof(pathbuf));
@

