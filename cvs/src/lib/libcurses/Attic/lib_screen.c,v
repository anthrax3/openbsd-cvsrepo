head	1.7;
access;
symbols
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	99.01.18.19.08.22;	author millert;	state dead;
branches;
next	1.6;

1.6
date	98.07.27.03.37.31;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.23.21.19.19;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.01.17.16.27.36;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.29;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.51;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.33;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_screen.c,v 1.6 1998/07/27 03:37:31 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/


#include <curses.priv.h>

#include <sys/stat.h>
#include <time.h>
#include <term.h>	/* exit_ca_mode, non_rev_rmcup */

MODULE_ID("$From: lib_screen.c,v 1.13 1998/07/25 20:10:48 tom Exp $")

static time_t	dumptime;

WINDOW *getwin(FILE *filep)
{
	WINDOW	tmp, *nwin;
	int	n;

	T((T_CALLED("getwin(%p)"), filep));

	(void) fread(&tmp, sizeof(WINDOW), 1, filep);
	if (ferror(filep))
		returnWin(0);

	if ((nwin = newwin(tmp._maxy+1, tmp._maxx+1, 0, 0)) == 0)
		returnWin(0);

	/*
	 * We deliberately do not restore the _parx, _pary, or _parent
	 * fields, because the window hierarchy within which they
	 * made sense is probably gone.
	 */
	nwin->_curx       = tmp._curx;
	nwin->_cury       = tmp._cury;
	nwin->_maxy       = tmp._maxy;
	nwin->_maxx       = tmp._maxx;
	nwin->_begy       = tmp._begy;
	nwin->_begx       = tmp._begx;
	nwin->_yoffset    = tmp._yoffset;
	nwin->_flags      = tmp._flags & ~(_SUBWIN|_ISPAD);

	nwin->_attrs      = tmp._attrs;
	nwin->_bkgd       = tmp._bkgd;

	nwin->_clear      = tmp._clear;
	nwin->_scroll     = tmp._scroll;
	nwin->_leaveok    = tmp._leaveok;
	nwin->_use_keypad = tmp._use_keypad;
	nwin->_delay      = tmp._delay;
	nwin->_immed      = tmp._immed;
	nwin->_sync       = tmp._sync;

	nwin->_regtop     = tmp._regtop;
	nwin->_regbottom  = tmp._regbottom;

	for (n = 0; n < nwin->_maxy + 1; n++)
	{
		(void) fread(nwin->_line[n].text,
			      sizeof(chtype), (size_t)(nwin->_maxx + 1), filep);
		if (ferror(filep))
		{
			delwin(nwin);
			returnWin(0);
		}
	}
	touchwin(nwin);

	returnWin(nwin);
}

int putwin(WINDOW *win, FILE *filep)
{
        int code = ERR; 
	int n;

	T((T_CALLED("putwin(%p,%p)"), win, filep));

	if (win) {
	  (void) fwrite(win, sizeof(WINDOW), 1, filep);
	  if (ferror(filep))
	    returnCode(code);

	  for (n = 0; n < win->_maxy + 1; n++)
	    {
	      (void) fwrite(win->_line[n].text,
			    sizeof(chtype), (size_t)(win->_maxx + 1), filep);
	      if (ferror(filep))
		returnCode(code);
	    }
	  code = OK;
	}
	returnCode(code);
}

int scr_restore(const char *file)
{
	FILE	*fp;

	T((T_CALLED("scr_restore(%s)"), _nc_visbuf(file)));

	if (_nc_access(file, R_OK) < 0
	 || (fp = fopen(file, "rb")) == 0)
	    returnCode(ERR);
	else
	{
	    delwin(newscr);
	    newscr = getwin(fp);
	    (void) fclose(fp);
	    returnCode(OK);
	}
}

int scr_dump(const char *file)
{
	FILE	*fp;

	T((T_CALLED("scr_dump(%s)"), _nc_visbuf(file)));

	if (_nc_access(file, W_OK) < 0
	 || (fp = fopen(file, "wb")) == 0)
	    returnCode(ERR);
	else
	{
	    (void) putwin(newscr, fp);
	    (void) fclose(fp);
	    dumptime = time((time_t *)0);
	    returnCode(OK);
	}
}

int scr_init(const char *file)
{
	FILE	*fp;
	struct stat	stb;

	T((T_CALLED("scr_init(%s)"), _nc_visbuf(file)));

#ifdef exit_ca_mode
	if (exit_ca_mode && non_rev_rmcup)
	    returnCode(ERR);
#endif /* exit_ca_mode */

	if (_nc_access(file, R_OK) < 0
	 || (fp = fopen(file, "rb")) == 0)
	    returnCode(ERR);
	else if (fstat(STDOUT_FILENO, &stb) || stb.st_mtime > dumptime)
	    returnCode(ERR);
	else
	{
	    delwin(curscr);
	    curscr = getwin(fp);
	    (void) fclose(fp);
	    returnCode(OK);
	}
}

int scr_set(const char *file)
{
    T((T_CALLED("scr_set(%s)"), _nc_visbuf(file)));

    if (scr_init(file) == ERR)
	returnCode(ERR);
    else
    {
	delwin(newscr);
	newscr = dupwin(curscr);
	returnCode(OK);
    }
}
@


1.6
log
@update to ncurses-4.2-980725
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_screen.c,v 1.5 1998/07/23 21:19:19 millert Exp $	*/
@


1.5
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
MODULE_ID("$From: lib_screen.c,v 1.11 1998/02/11 12:13:56 tom Exp $")
d134 2
a135 1
	if ((fp = fopen(file, "rb")) == 0)
d152 2
a153 1
	if ((fp = fopen(file, "wb")) == 0)
d176 2
a177 1
	if ((fp = fopen(file, "rb")) == 0)
@


1.4
log
@Use _ti_get_screensize() from libtermlib to update screen size if changed
    after a program is suspended.
Define EXTERN_TERMINFO in curses.h.
Update to ncurses-4.1-980103 and crank minor.
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_screen.c,v 1.3 1997/12/03 05:21:29 millert Exp $	*/
d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d43 1
a43 1
MODULE_ID("Id: lib_screen.c,v 1.10 1997/12/27 19:48:58 tom Exp $")
d134 1
a134 1
	if ((fp = fopen(file, "r")) == 0)
d151 1
a151 1
	if ((fp = fopen(file, "w")) == 0)
d174 1
a174 1
	if ((fp = fopen(file, "r")) == 0)
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a31 1
MODULE_ID("Id: lib_screen.c,v 1.9 1997/10/18 19:22:52 tom Exp $")
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d31 1
a31 1
MODULE_ID("Id: lib_screen.c,v 1.7 1997/02/02 00:41:10 tom Exp $")
d37 1
a37 1
	WINDOW	try, *nwin;
d42 1
a42 1
	(void) fread(&try, sizeof(WINDOW), 1, filep);
d46 1
a46 1
	if ((nwin = newwin(try._maxy+1, try._maxx+1, 0, 0)) == 0)
d54 19
a72 19
	nwin->_curx       = try._curx;
	nwin->_cury       = try._cury;
	nwin->_maxy       = try._maxy;
	nwin->_maxx       = try._maxx;
	nwin->_begy       = try._begy;
	nwin->_begx       = try._begx;
	nwin->_yoffset    = try._yoffset;
	nwin->_flags      = try._flags & ~(_SUBWIN|_ISPAD);

	nwin->_attrs      = try._attrs;
	nwin->_bkgd       = try._bkgd;

	nwin->_clear      = try._clear;
	nwin->_scroll     = try._scroll;
	nwin->_leaveok    = try._leaveok;
	nwin->_use_keypad = try._use_keypad;
	nwin->_delay      = try._delay;
	nwin->_immed      = try._immed;
	nwin->_sync       = try._sync;
d74 2
a75 2
	nwin->_regtop     = try._regtop;
	nwin->_regbottom  = try._regbottom;
d94 2
a95 1
	int	n;
d99 13
a111 10
	(void) fwrite(win, sizeof(WINDOW), 1, filep);
	if (ferror(filep))
		returnCode(ERR);

	for (n = 0; n < win->_maxy + 1; n++)
	{
		(void) fwrite(win->_line[n].text,
			      sizeof(chtype), (size_t)(win->_maxx + 1), filep);
		if (ferror(filep))
			returnCode(ERR);
d113 1
a113 2

	returnCode(OK);
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d23 1
a23 1
#include "curses.priv.h"
a24 2
#include <stdio.h>
#include <sys/types.h>
d27 3
a29 1
#include "term.h"	/* exit_ca_mode, non_rev_rmcup */
d38 2
d42 1
a42 1
		return (WINDOW *)NULL;
d44 2
a45 2
	if ((nwin = newwin(try._maxy+1, try._maxx+1, 0, 0)) == (WINDOW *)NULL)
		return (WINDOW *)NULL;
d55 1
a55 1
	nwin->_maxx       = try._maxx;       
d58 2
a59 1
	nwin->_flags      = try._flags;
d62 1
a62 1
	nwin->_bkgd	  = try._bkgd; 
d68 3
a70 3
	nwin->_delay   	  = try._delay;
	nwin->_immed	  = try._immed;
	nwin->_sync	  = try._sync;
d82 1
a82 1
			return((WINDOW *)NULL);
d87 1
a87 1
	return nwin;
d94 2
d98 1
a98 1
		return ERR;
d105 1
a105 1
			return(ERR);
d108 1
a108 1
	return(OK);
d115 4
a118 2
	if ((fp = fopen(file, "r")) == (FILE *)NULL)
	    return ERR;
d124 1
a124 1
	    return OK;
d132 4
a135 2
	if ((fp = fopen(file, "w")) == (FILE *)NULL)
	    return ERR;
d141 1
a141 1
	    return OK;
d150 2
d154 1
a154 1
	    return(ERR);
d157 2
a158 2
	if ((fp = fopen(file, "r")) == (FILE *)NULL)
	    return ERR;
d160 1
a160 1
	    return ERR;
d166 1
a166 1
	    return OK;
d172 2
d175 1
a175 1
	return(ERR);
d180 1
a180 1
	return(OK);
a182 2


@
