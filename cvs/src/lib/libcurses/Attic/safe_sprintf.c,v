head	1.6;
access;
symbols
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	99.01.18.19.09.09;	author millert;	state dead;
branches;
next	1.5;

1.5
date	98.09.13.19.16.30;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.15.19.06.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.08.14.21.11.42;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.07.23.21.20.01;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.12.03.05.21.43;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: safe_sprintf.c,v 1.5 1998/09/13 19:16:30 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Thomas E. Dickey <dickey@@clark.net> 1997                        *
 ****************************************************************************/

#include <curses.priv.h>
#include <ctype.h>

MODULE_ID("$From: safe_sprintf.c,v 1.9 1998/08/15 23:58:49 tom Exp $")

#if USE_SAFE_SPRINTF

typedef enum { Flags, Width, Prec, Type, Format } PRINTF;

#define VA_INTGR(type) ival = va_arg(ap, type)
#define VA_FLOAT(type) fval = va_arg(ap, type)
#define VA_POINT(type) pval = (void *)va_arg(ap, type)

/*
 * Scan a variable-argument list for printf to determine the number of
 * characters that would be emitted.
 */
static int
_nc_printf_length(const char *fmt, va_list ap)
{
	size_t length = BUFSIZ;
	char *buffer;
	char *format;
	int len = 0;

	if (fmt == 0 || *fmt == '\0')
		return -1;
	if ((format = malloc(strlen(fmt)+1)) == 0)
		return -1;
	if ((buffer = malloc(length)) == 0) {
		free(format);
		return -1;
	}

	while (*fmt != '\0') {
		if (*fmt == '%') {
			static char dummy[] = "";
			PRINTF state = Flags;
			char *pval   = dummy;	/* avoid const-cast */
			double fval  = 0.0;
			int done     = FALSE;
			int ival     = 0;
			int prec     = -1;
			int type     = 0;
			int used     = 0;
			int width    = -1;
			size_t f     = 0;

			format[f++] = *fmt;
			while (*++fmt != '\0' && len >= 0 && !done) {
				format[f++] = *fmt;

				if (isdigit(*fmt)) {
					int num = *fmt - '0';
					if (state == Flags && num != 0)
						state = Width;
					if (state == Width) {
						if (width < 0)
							width = 0;
						width = (width * 10) + num;
					} else if (state == Prec) {
						if (prec < 0)
							prec = 0;
						prec = (prec * 10) + num;
					}
				} else if (*fmt == '*') {
					VA_INTGR(int);
					if (state == Flags)
						state = Width;
					if (state == Width) {
						width = ival;
					} else if (state == Prec) {
						prec = ival;
					}
					sprintf(&format[--f], "%d", ival);
					f = strlen(format);
				} else if (isalpha(*fmt)) {
					done = TRUE;
					switch (*fmt) {
					case 'Z': /* FALLTHRU */
					case 'h': /* FALLTHRU */
					case 'l': /* FALLTHRU */
					case 'L': /* FALLTHRU */
						done = FALSE;
						type = *fmt;
						break;
					case 'i': /* FALLTHRU */
					case 'd': /* FALLTHRU */
					case 'u': /* FALLTHRU */
					case 'x': /* FALLTHRU */
					case 'X': /* FALLTHRU */
						if (type == 'l')
							VA_INTGR(long);
						else if (type == 'Z')
							VA_INTGR(size_t);
						else
							VA_INTGR(int);
						used = 'i';
						break;
					case 'f': /* FALLTHRU */
					case 'e': /* FALLTHRU */
					case 'E': /* FALLTHRU */
					case 'g': /* FALLTHRU */
					case 'G': /* FALLTHRU */
						if (type == 'L')
							VA_FLOAT(long double);
						else
							VA_FLOAT(double);
						used = 'f';
						break;
					case 'c':
						VA_INTGR(int);
						used = 'i';
						break;
					case 's':
						VA_POINT(char *);
						if (prec < 0)
							prec = strlen(pval);
						if (prec > (int)length) {
							length = length + prec;
							buffer = (char *)_nc_doalloc(buffer, length);
							if (buffer == 0) {
								free(format);
								return -1;
							}
						}
						used = 'p';
						break;
					case 'p':
						VA_POINT(void *);
						used = 'p';
						break;
					case 'n':
						VA_POINT(int *);
						used = 0;
						break;
					default:
						break;
					}
				} else if (*fmt == '.') {
					state = Prec;
				} else if (*fmt == '%') {
					done = TRUE;
					used = 'p';
				}
			}
			format[f] = '\0';
			switch (used) {
			case 'i':
				sprintf(buffer, format, ival);
				break;
			case 'f':
				sprintf(buffer, format, fval);
				break;
			default:
				sprintf(buffer, format, pval);
				break;
			}
			len += (int)strlen(buffer);
		} else {
			fmt++;
			len++;
		}
	}

	free(buffer);
	free(format);
	return len;
}
#endif

/*
 * Wrapper for vsprintf that allocates a buffer big enough to hold the result.
 */
char *
_nc_printf_string(const char *fmt, va_list ap)
{
#if USE_SAFE_SPRINTF
	char *buf = 0;
	int len = _nc_printf_length(fmt, ap);

	if (len > 0) {
		if ((buf = malloc(len+1)) == 0)
			return(0);
		vsprintf(buf, fmt, ap);
	}
#else
	static int rows, cols;
	static char *buf;
	static size_t len;

	if (screen_lines > rows || screen_columns > cols) {
		if (screen_lines   > rows) rows = screen_lines;
		if (screen_columns > cols) cols = screen_columns;
		len = (rows * (cols + 1)) + 1;
		buf = (char *)_nc_doalloc(buf, len);
		if (buf == 0) {
			return(0);
		}
	}

	if (buf != 0) {
# if HAVE_VSNPRINTF
		vsnprintf(buf, len, fmt, ap);	/* GNU extension */
# else
		vsprintf(buf, fmt, ap);		/* ANSI */
# endif
	}
#endif
	return buf;
}
@


1.5
log
@ncurses-4.2-980905
@
text
@d1 1
a1 1
/*	$OpenBSD: safe_sprintf.c,v 1.4 1998/08/15 19:06:38 millert Exp $	*/
@


1.4
log
@simplify a few things wrt realloc
@
text
@d1 1
a1 1
/*	$OpenBSD: safe_sprintf.c,v 1.3 1998/08/14 21:11:42 millert Exp $	*/
d38 1
a38 1
MODULE_ID("$From: safe_sprintf.c,v 1.8 1998/07/11 20:31:37 Bernhard.Rosenkraenzer Exp $")
d71 1
d73 1
a73 1
			char *pval   = "";
a153 2
							char *nbuffer;

d155 2
a156 4
							nbuffer = realloc(buffer, length);
							if (nbuffer == 0) {
								if (buffer != 0)
									free(buffer);
a159 1
							buffer = nbuffer;
d217 2
a218 2
		if ((buf = malloc(len+1)) == NULL)
			return(NULL);
a224 1
	char *nbuf;
d230 3
a232 5
		nbuf = buf ? realloc(buf, len) : malloc(len);
		if (nbuf == NULL) {
			if (buf != NULL)
				free(buf);
			return(NULL);
a233 1
		buf = nbuf;
@


1.3
log
@fix realloc usage
@
text
@d1 1
a1 1
/*	$OpenBSD: safe_sprintf.c,v 1.2 1998/07/23 21:20:01 millert Exp $	*/
d235 1
a235 4
		if (buf == 0)
			nbuf = malloc(len);
		else
			nbuf = realloc(buf, len);
@


1.2
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d153 2
d156 4
a159 2
							buffer = realloc(buffer, length);
							if (buffer == 0) {
d163 1
d229 1
d236 1
a236 1
			buf = malloc(len);
d238 4
a241 2
			buf = realloc(buf, len);
		if (buf == NULL)
d243 2
@


1.1
log
@Merge of ncurses-4.1-971129
@
text
@d3 31
a33 20
/******************************************************************************
 * Copyright 1997 by Thomas E. Dickey <dickey@@clark.net>                      *
 * All Rights Reserved.                                                       *
 *                                                                            *
 * Permission to use, copy, modify, and distribute this software and its      *
 * documentation for any purpose and without fee is hereby granted, provided  *
 * that the above copyright notice appear in all copies and that both that    *
 * copyright notice and this permission notice appear in supporting           *
 * documentation, and that the name of the above listed copyright holder(s)   *
 * not be used in advertising or publicity pertaining to distribution of the  *
 * software without specific, written prior permission.                       *
 *                                                                            *
 * THE ABOVE LISTED COPYRIGHT HOLDER(S) DISCLAIM ALL WARRANTIES WITH REGARD   *
 * TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND  *
 * FITNESS, IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE  *
 * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES          *
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN      *
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR *
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                *
 ******************************************************************************/
d38 1
a38 1
MODULE_ID("Id: safe_sprintf.c,v 1.4 1997/11/01 23:01:09 tom Exp $")
d216 2
a217 1
		buf = malloc(len+1);
d233 2
d243 1
a244 1
	}
@

