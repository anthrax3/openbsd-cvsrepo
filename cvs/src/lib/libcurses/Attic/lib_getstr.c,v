head	1.5;
access;
symbols
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	99.01.18.19.07.54;	author millert;	state dead;
branches;
next	1.4;

1.4
date	98.07.23.21.18.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.19;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.36;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.24;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_getstr.c,v 1.4 1998/07/23 21:18:48 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/


/*
**	lib_getstr.c
**
**	The routine wgetstr().
**
*/

#include <curses.priv.h>
#include <term.h>

MODULE_ID("$From: lib_getstr.c,v 1.19 1998/02/11 12:13:53 tom Exp $")

/*
 * This wipes out the last character, no matter whether it was a tab, control
 * or other character, and handles reverse wraparound.
 */
static char *WipeOut(WINDOW *win, int y, int x, char *first, char *last, bool echoed)
{
	if (last > first) {
		*--last = '\0';
		if (echoed) {
			int y1 = win->_cury;
			int x1 = win->_curx;

			wmove(win, y, x);
			waddstr(win, first);
			getyx(win, y, x);
			while (win->_cury < y1
			   || (win->_cury == y1 && win->_curx < x1))
				waddch(win, ' ');

			wmove(win, y, x);
		}
	}
	return last;
}

int wgetnstr(WINDOW *win, char *str, int maxlen)
{
TTY	buf;
bool	oldnl, oldecho, oldraw, oldcbreak;
char	erasec;
char	killc;
char	*oldstr;
int ch;
int	y, x;

	T((T_CALLED("wgetnstr(%p,%p, %d)"), win, str, maxlen));

	if (!win)
	  returnCode(ERR);

	_nc_get_curterm(&buf);

	oldnl = SP->_nl;
	oldecho = SP->_echo;
	oldraw = SP->_raw;
	oldcbreak = SP->_cbreak;
	nl();
	noecho();
	noraw();
	cbreak();

	erasec = erasechar();
	killc = killchar();

	oldstr = str;
	getyx(win, y, x);

	if (is_wintouched(win) || (win->_flags & _HASMOVED))
		wrefresh(win);

	while ((ch = wgetch(win)) != ERR) {
		/*
		 * Some terminals (the Wyse-50 is the most common) generate
		 * a \n from the down-arrow key.  With this logic, it's the
		 * user's choice whether to set kcud=\n for wgetch();
		 * terminating *getstr() with \n should work either way.
		 */
		if (ch == '\n'
		 || ch == '\r'
		 || ch == KEY_DOWN
		 || ch == KEY_ENTER) {
			if (oldecho == TRUE
			 && win->_cury == win->_maxy
			 && win->_scroll)
				wechochar(win, '\n');
			break;
		}
		if (ch == erasec || ch == KEY_LEFT || ch == KEY_BACKSPACE) {
			if (str > oldstr) {
				str = WipeOut(win, y, x, oldstr, str, oldecho);
			}
		} else if (ch == killc) {
			while (str > oldstr) {
				str = WipeOut(win, y, x, oldstr, str, oldecho);
			}
		} else if (ch >= KEY_MIN
			   || (maxlen >= 0 && str - oldstr >= maxlen)) {
			beep();
		} else {
			*str++ = ch;
			if (oldecho == TRUE) {
				int oldy = win->_cury;
				if (waddch(win, ch) == ERR) {
					/*
					 * We can't really use the lower-right
					 * corner for input, since it'll mess
					 * up bookkeeping for erases.
					 */
					win->_flags &= ~_WRAPPED;
					waddch(win, ' ');
					str = WipeOut(win, y, x, oldstr, str, oldecho);
					continue;
				} else if (win->_flags & _WRAPPED) {
					/*
					 * If the last waddch forced a wrap &
					 * scroll, adjust our reference point
					 * for erasures.
					 */
					if (win->_scroll
					 && oldy == win->_maxy
					 && win->_cury == win->_maxy) {
						if (--y <= 0) {
							y = 0;
						}
					}
					win->_flags &= ~_WRAPPED;
				}
				wrefresh(win);
			}
		}
	}

	win->_curx = 0;
	win->_flags &= ~_WRAPPED;
	if (win->_cury < win->_maxy)
		win->_cury++;
	wrefresh(win);

	/* Restore with a single I/O call, to fix minor asymmetry between
	 * raw/noraw, etc.
	 */
	SP->_nl = oldnl;
	SP->_echo = oldecho;
	SP->_raw = oldraw;
	SP->_cbreak = oldcbreak;

	_nc_set_curterm(&buf);

	*str = '\0';
	if (ch == ERR)
		returnCode(ERR);

	T(("wgetnstr returns %s", _nc_visbuf(oldstr)));

	returnCode(OK);
}
@


1.4
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d3 27
d31 4
a34 19
/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d47 1
a47 1
MODULE_ID("Id: lib_getstr.c,v 1.18 1997/09/20 15:02:34 juergen Exp $")
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d35 1
a35 1
MODULE_ID("Id: lib_getstr.c,v 1.11 1997/02/01 23:22:54 tom Exp $")
d65 1
a65 1
bool	oldnl, oldecho, oldraw, oldcbreak, oldkeypad;
d74 4
a77 1
	GET_TTY(cur_term->Filedes, &buf);
a82 1
	oldkeypad = win->_use_keypad;
a86 1
	keypad(win, TRUE);
d107 5
a111 1
		 || ch == KEY_ENTER)
d113 1
d128 1
d139 14
d173 1
a173 4
	SET_TTY(cur_term->Filedes, &buf);

	if (oldkeypad == FALSE)
		keypad(win, FALSE);
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d30 29
a58 3
#include "curses.priv.h"
#include "unctrl.h"
#include <string.h>
d62 1
d68 5
a72 2
  
	T(("wgetnstr(%p,%p, %d) called", win, str, maxlen));
d89 1
d95 1
a95 1
	        /*
d101 4
a104 1
		if (ch == '\n' || ch == '\r' || ch == KEY_DOWN)
d106 1
a106 1
	   	if (ch == erasec || ch == KEY_LEFT || ch == KEY_BACKSPACE) {
d108 1
a108 3
		    		str--;
		    		if (oldecho == TRUE)
			    		_nc_backspace(win);
d110 1
a110 1
	 	} else if (ch == killc) {
d112 1
a112 3
			    	str--;
		    		if (oldecho == TRUE)
		    			_nc_backspace(win);
d116 1
a116 1
		    beep();
d118 1
d120 14
a133 10
			        char	*glyph = unctrl(ch);

				mvwaddstr(curscr, win->_begy + win->_cury,
				  	win->_begx + win->_curx, glyph);
				waddstr(win, glyph);
				_nc_outstr(glyph);
				SP->_curscol += strlen(glyph);
			} 
			*str++ = ch;
	   	}
d136 4
a139 4
    	win->_curx = 0;
	win->_flags &= ~_NEED_WRAP;
    	if (win->_cury < win->_maxy)
       		win->_cury++;
d142 7
a148 2
	if (oldnl == FALSE)
	    nonl();
d150 1
a150 8
	if (oldecho == TRUE)
	    echo();

	if (oldraw == TRUE)
	    raw();

	if (oldcbreak == FALSE)
	    nocbreak();
a154 4
	if (ch == ERR) {
		*str = '\0';
		return ERR;
	}
d156 2
d159 1
a159 1
	T(("wgetnstr returns \"%s\"", _nc_visbuf(oldstr)));
d161 1
a161 1
	return(OK);
@
