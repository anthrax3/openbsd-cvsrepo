head	1.5;
access;
symbols
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	99.01.18.19.07.30;	author millert;	state dead;
branches;
next	1.4;

1.4
date	98.07.23.21.18.26;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.11;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.24;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.18;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_addstr.c,v 1.4 1998/07/23 21:18:26 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/

/*
**	lib_addstr.c
*
**	The routines waddnstr(), waddchnstr().
**
*/

#include <curses.priv.h>

MODULE_ID("$From: lib_addstr.c,v 1.16 1998/06/28 00:38:29 tom Exp $")

int
waddnstr(WINDOW *win, const char *const astr, int n)
{
unsigned const char *str = (unsigned const char *)astr;
int code = ERR;

	T((T_CALLED("waddnstr(%p,%s,%d)"), win, _nc_visbuf(astr), n));
	  
	if (win && (str != 0)) {	    
	  T(("... current %s", _traceattr(win->_attrs)));
	  TR(TRACE_VIRTPUT, ("str is not null"));
	  code = OK;
	  if (n < 0)
	    n = (int)strlen(astr);
	  
	  while((n-- > 0) && (*str != '\0')) {
	    TR(TRACE_VIRTPUT, ("*str = %#x", *str));
	    if (_nc_waddch_nosync(win, (chtype)*str++) == ERR) {
	      code = ERR;
	      break;
	    }
	  }
	  _nc_synchook(win);
	}
	TR(TRACE_VIRTPUT, ("waddnstr returns %d", code));
	returnCode(code);
}

int
waddchnstr(WINDOW *win, const chtype *const astr, int n)
{
short y = win->_cury;
short x = win->_curx;
int code = OK;
struct ldat *line;

	T((T_CALLED("waddchnstr(%p,%p,%d)"), win, astr, n));

	if (!win)
		returnCode(ERR);

	if (n < 0) {
		const chtype *str;
		n = 0;
		for (str=(const chtype *)astr; *str!=0; str++)
			n++;
	}
	if (n > win->_maxx - x + 1)
		n = win->_maxx - x + 1;
	if (n == 0)
		returnCode(code);

	line = &(win->_line[y]);
	memcpy(line->text+x, astr, n*sizeof(*astr));
	CHANGED_RANGE(line, x, x+n-1);

	_nc_synchook(win);
	returnCode(code);
}
@


1.4
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d45 1
a45 1
MODULE_ID("Id: lib_addstr.c,v 1.13 1997/09/20 15:02:34 juergen Exp $")
d81 1
d86 1
a86 1
	  returnCode(ERR);
d99 3
a101 14
	if (win->_line[y].firstchar == _NOCHANGE)
	{
		win->_line[y].firstchar = x;
		win->_line[y].lastchar = x+n-1;
	}
	else
	{
		if (x < win->_line[y].firstchar)
			win->_line[y].firstchar = x;
		if (x+n-1 > win->_line[y].lastchar)
			win->_line[y].lastchar = x+n-1;
	}
	
	memcpy(win->_line[y].text+x, astr, n*sizeof(*astr));
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d33 1
a33 1
MODULE_ID("Id: lib_addstr.c,v 1.11 1997/03/08 21:38:52 tom Exp $")
d42 16
a57 16
	T(("... current %s", _traceattr(win->_attrs)));

	if (str != 0) {

		TR(TRACE_VIRTPUT, ("str is not null"));
		code = OK;
		if (n < 0)
			n = (int)strlen(astr);

		while((n-- > 0) && (*str != '\0')) {
			TR(TRACE_VIRTPUT, ("*str = %#x", *str));
			if (_nc_waddch_nosync(win, (chtype)*str++) == ERR) {
				code = ERR;
				break;
			}
		}
a58 1
	_nc_synchook(win);
d66 2
a67 3
short oy = win->_cury;
short ox = win->_curx;
const chtype *str = (const chtype *)astr;
d70 4
a73 1
	T((T_CALLED("waddchnstr(%p,%p,%d)"), win, str, n));
d76 1
d78 1
a78 1
		while (*str++ != 0)
a79 1
		str = (const chtype *)astr;
d81 16
a96 6

	while(n-- > 0) {
		if (_nc_waddch_nosync(win, *str++) == ERR) {
			code = ERR;
			break;
		}
d98 2
a100 2
	win->_curx = ox;
	win->_cury = oy;
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d29 3
a31 2
#include "curses.priv.h"
#include <string.h>
d36 1
a36 1
unsigned char *str = (unsigned char *)astr;
d39 2
a40 1
	T(("waddnstr(%p,\"%s\",%d) called %s", win, _nc_visbuf(astr), n, _traceattr(win->_attrs)));
d42 1
a42 1
	if (str != NULL) {
d50 1
a50 1
			TR(TRACE_VIRTPUT, ("*str = %x", *str));
d59 1
a59 1
	return code;
d67 1
a67 1
chtype *str = (chtype *)astr;
d70 1
a70 1
	T(("waddchnstr(%p,%p,%d) called", win, str, n));
d76 1
a76 1
		str = (chtype *)astr;
d89 1
a89 1
	return code;
@
