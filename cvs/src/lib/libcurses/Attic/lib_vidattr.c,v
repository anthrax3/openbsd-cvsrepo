head	1.6;
access;
symbols
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	99.01.18.19.08.55;	author millert;	state dead;
branches;
next	1.5;

1.5
date	98.08.03.17.02.46;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.07.23.21.19.47;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.39;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.56;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.36;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_vidattr.c,v 1.5 1998/08/03 17:02:46 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/

/*
 *	vidputs(newmode, outc)
 *
 *	newmode is taken to be the logical 'or' of the symbols in curses.h
 *	representing graphic renditions.  The terminal is set to be in all of
 *	the given modes, if possible.
 *
 *	if the new attribute is normal
 *		if exit-alt-char-set exists
 *			emit it
 *		emit exit-attribute-mode
 *	else if set-attributes exists
 *		use it to set exactly what you want
 *	else
 *		if exit-attribute-mode exists
 *			turn off everything
 *		else
 *			turn off those which can be turned off and aren't in
 *			newmode.
 *		turn on each mode which should be on and isn't, one by one
 *
 *	NOTE that this algorithm won't achieve the desired mix of attributes
 *	in some cases, but those are probably just those cases in which it is
 *	actually impossible, anyway, so...
 *
 * 	NOTE that we cannot assume that there's no interaction between color
 *	and other attribute resets.  So each time we reset color (or other
 *	attributes) we'll have to be prepared to restore the other.
 */

#include <curses.priv.h>
#include <term.h>

MODULE_ID("$From: lib_vidattr.c,v 1.21 1998/08/01 22:21:19 tom Exp $")

#define doPut(mode) TPUTS_TRACE(#mode); tputs(mode, 1, outc)

#define TurnOn(mask,mode) \
	if ((turn_on & mask) && mode) { doPut(mode); }

#define TurnOff(mask,mode) \
	if ((turn_off & mask) && mode) { doPut(mode); turn_off &= ~mask; }

	/* if there is no current screen, assume we *can* do color */
#define SetColorsIf(why,old_attr) \
	if ((!SP || SP->_coloron) && (why)) { \
		int old_pair = PAIR_NUMBER(old_attr); \
		T(("old pair = %d -- new pair = %d", old_pair, pair)); \
		if ((pair != old_pair) \
		 || (reverse ^ ((old_attr & A_REVERSE) != 0))) { \
			_nc_do_color(pair, reverse, outc); \
		} \
	}

int vidputs(attr_t newmode, int  (*outc)(int))
{
static attr_t previous_attr = A_NORMAL;
attr_t turn_on, turn_off;
int pair;
bool reverse = FALSE;
bool used_ncv = FALSE;

	T((T_CALLED("vidputs(%s)"), _traceattr(newmode)));

	/* this allows us to go on whether or not newterm() has been called */
	if (SP)
		previous_attr = SP->_current_attr;

	T(("previous attribute was %s", _traceattr(previous_attr)));

#if !USE_XMC_SUPPORT
	if (magic_cookie_glitch > 0)
		newmode &= ~(SP->_xmc_suppress);
#endif

	/*
	 * If we have a terminal that cannot combine color with video
	 * attributes, use the colors in preference.
	 */
	if ((newmode & A_COLOR)
	 && (no_color_video > 0)) {
		static const struct {
			attr_t video;
			unsigned bit;
		} table[] = {
			{ A_STANDOUT,		1 },
			{ A_UNDERLINE,		2 },
			{ A_REVERSE,		4 },
			{ A_BLINK,		8 },
			{ A_DIM,		16 },
			{ A_BOLD, 		32 },
			{ A_INVIS,		64 },
			{ A_PROTECT,		128 },
			{ A_ALTCHARSET,		256 },
		};
		size_t n;
		for (n = 0; n < SIZEOF(table); n++) {
			if ((table[n].bit & no_color_video)
			 && (table[n].video & newmode)) {
				used_ncv = TRUE;
				if (table[n].video == A_REVERSE)
					reverse = TRUE;
				else
					newmode &= ~table[n].video;
			}
		}
	}

	if (newmode == previous_attr)
		returnCode(OK);

	pair = PAIR_NUMBER(newmode);

	if (reverse) {
		newmode &= ~A_REVERSE;
	}

	turn_off = (~newmode & previous_attr) & ALL_BUT_COLOR;
	turn_on  = (newmode & ~previous_attr) & ALL_BUT_COLOR;

	SetColorsIf(pair == 0, previous_attr);

	if (newmode == A_NORMAL) {
		if((previous_attr & A_ALTCHARSET) && exit_alt_charset_mode) {
			doPut(exit_alt_charset_mode);
			previous_attr &= ~A_ALTCHARSET;
		}
		if (previous_attr) {
			doPut(exit_attribute_mode);
			previous_attr &= ~A_COLOR;
		}

		SetColorsIf(pair != 0, previous_attr);
	} else if (set_attributes && !used_ncv) {
		if (turn_on || turn_off) {
			TPUTS_TRACE("set_attributes");
			tputs(tparm(set_attributes,
				(newmode & A_STANDOUT) != 0,
				(newmode & A_UNDERLINE) != 0,
				(newmode & A_REVERSE) != 0,
				(newmode & A_BLINK) != 0,
				(newmode & A_DIM) != 0,
				(newmode & A_BOLD) != 0,
				(newmode & A_INVIS) != 0,
				(newmode & A_PROTECT) != 0,
				(newmode & A_ALTCHARSET) != 0), 1, outc);
			previous_attr &= ~A_COLOR;
		}
		SetColorsIf(pair != 0, previous_attr);
	} else {

		T(("turning %s off", _traceattr(turn_off)));

		TurnOff(A_ALTCHARSET,  exit_alt_charset_mode);
		TurnOff(A_UNDERLINE,   exit_underline_mode);
		TurnOff(A_STANDOUT,    exit_standout_mode);

		if (turn_off && exit_attribute_mode) {
			doPut(exit_attribute_mode);
			turn_on  |= (newmode & (chtype)(~A_COLOR));
			previous_attr &= ~A_COLOR;
		}
		SetColorsIf(pair != 0, previous_attr);

		T(("turning %s on", _traceattr(turn_on)));

		TurnOn (A_ALTCHARSET, enter_alt_charset_mode);
		TurnOn (A_BLINK,      enter_blink_mode);
		TurnOn (A_BOLD,       enter_bold_mode);
		TurnOn (A_DIM,        enter_dim_mode);
		TurnOn (A_REVERSE,    enter_reverse_mode);
		TurnOn (A_STANDOUT,   enter_standout_mode);
		TurnOn (A_PROTECT,    enter_protected_mode);
		TurnOn (A_INVIS,      enter_secure_mode);
		TurnOn (A_UNDERLINE,  enter_underline_mode);
		TurnOn (A_HORIZONTAL, enter_horizontal_hl_mode);
		TurnOn (A_LEFT,       enter_left_hl_mode);
		TurnOn (A_LOW,        enter_low_hl_mode);
		TurnOn (A_RIGHT,      enter_right_hl_mode);
		TurnOn (A_TOP,        enter_top_hl_mode);
		TurnOn (A_VERTICAL,   enter_vertical_hl_mode);
	}

	if (reverse)
		newmode |= A_REVERSE;

	if (SP)
		SP->_current_attr = newmode;
	else
		previous_attr = newmode;

	returnCode(OK);
}

int vidattr(attr_t newmode)
{
	T((T_CALLED("vidattr(%s)"), _traceattr(newmode)));

	returnCode(vidputs(newmode, _nc_outch));
}

chtype termattrs(void)
{
	chtype attrs = A_NORMAL;

	if (enter_alt_charset_mode)
		attrs |= A_ALTCHARSET;

	if (enter_blink_mode)
		attrs |= A_BLINK;

	if (enter_bold_mode)
		attrs |= A_BOLD;

	if (enter_dim_mode)
		attrs |= A_DIM;

	if (enter_reverse_mode)
		attrs |= A_REVERSE;

	if (enter_standout_mode)
		attrs |= A_STANDOUT;

	if (enter_protected_mode)
		attrs |= A_PROTECT;

	if (enter_secure_mode)
		attrs |= A_INVIS;

	if (enter_underline_mode)
		attrs |= A_UNDERLINE;

	if (SP->_coloron)
		attrs |= A_COLOR;

	return(attrs);
}

@


1.5
log
@update to ncurses-4.2-980801
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_vidattr.c,v 1.4 1998/07/23 21:19:47 millert Exp $	*/
@


1.4
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 1
a69 1
MODULE_ID("$From: lib_vidattr.c,v 1.20 1998/02/11 12:13:56 tom Exp $")
d79 11
d94 1
a94 1
int pair, current_pair;
a147 1
	current_pair = PAIR_NUMBER(previous_attr);
a150 1
		pair = -pair;
a151 2
	if (previous_attr & A_REVERSE)
		current_pair = -current_pair;
d156 1
a156 8
	/* if there is no current screen, assume we *can* do color */
	if ((!SP || SP->_coloron) && pair == 0) {
		T(("old pair = %d -- new pair = %d", current_pair, pair));
		if (pair != current_pair) {
			_nc_do_color(pair, reverse, outc);
			previous_attr &= ~A_COLOR;
		}
	}
d168 1
d184 1
d198 1
a216 9
	}

	/* if there is no current screen, assume we *can* do color */
	if ((!SP || SP->_coloron) && pair != 0) {
		current_pair = PAIR_NUMBER(previous_attr);
		T(("old pair = %d -- new pair = %d", current_pair, pair));
		if (pair != current_pair) {
			_nc_do_color(pair, reverse, outc);
		}
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d69 1
a69 1
MODULE_ID("Id: lib_vidattr.c,v 1.17 1997/09/28 00:23:21 tom Exp $")
d84 2
d99 34
d136 10
a148 3
	pair = PAIR_NUMBER(newmode);
	current_pair = PAIR_NUMBER(previous_attr);

d153 1
a153 1
			_nc_do_color(pair, outc);
d168 1
a168 1
	} else if (set_attributes) {
d221 1
a221 1
			_nc_do_color(pair, outc);
d225 3
a234 4

#ifdef EXTERN_TERMINFO
#undef vidattr
#endif
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d57 1
a57 1
MODULE_ID("Id: lib_vidattr.c,v 1.14 1997/05/06 16:02:43 tom Exp $")
d81 4
d189 1
a189 1
attr_t termattrs(void)
d191 1
a191 1
	int attrs = A_NORMAL;
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d26 1
a26 1
 *	representing graphic renditions.  The teminal is set to be in all of
d46 4
d52 12
a63 3
#include "curses.priv.h"
#include <string.h>
#include "term.h"
d67 1
a67 1
static attr_t previous_attr;
d69 1
d71 1
a71 1
	T(("vidputs(%lx) called %s", newmode, _traceattr(newmode)));
d73 1
a73 1
	/* this allows us to go on whether or not newterm() has been called */ 
d79 17
a95 2
	turn_off = (~newmode & previous_attr) & (chtype)(~A_COLOR);
	turn_on  = (newmode & ~previous_attr) & (chtype)(~A_COLOR);
a96 2
	if (newmode == previous_attr)
		return OK;
d99 6
a104 11
			TPUTS_TRACE("exit_alt_charset_mode");
 			tputs(exit_alt_charset_mode, 1, outc);
 			previous_attr &= ~A_ALTCHARSET;
 		}
		if (previous_attr & A_COLOR) {
			TPUTS_TRACE("orig_pair");
 			tputs(orig_pair, 1, outc);
		}
 		if (previous_attr) {
			TPUTS_TRACE("exit_attribute_mode");
 			tputs(exit_attribute_mode, 1, outc);
d106 1
a106 1
 	
d110 1
a110 1
	    		tputs(tparm(set_attributes,
d120 1
a120 5
			/*
			 * Setting attributes in this way tends to unset the
			 * ones (such as color) that weren't specified.
			 */
			turn_off |= A_COLOR;
d126 3
a128 17
		if ((turn_off & A_ALTCHARSET) && exit_alt_charset_mode) {
			TPUTS_TRACE("exit_alt_charset_mode");
			tputs(exit_alt_charset_mode, 1, outc);
			turn_off &= ~A_ALTCHARSET;
		}

		if ((turn_off & A_UNDERLINE)  &&  exit_underline_mode) {
			TPUTS_TRACE("exit_underline_mode");
			tputs(exit_underline_mode, 1, outc);
			turn_off &= ~A_UNDERLINE;
		}

		if ((turn_off & A_STANDOUT)  &&  exit_standout_mode) {
			TPUTS_TRACE("exit_standout_mode");
			tputs(exit_standout_mode, 1, outc);
			turn_off &= ~A_STANDOUT;
		}
d131 1
a131 2
			TPUTS_TRACE("exit_attribute_mode");
			tputs(exit_attribute_mode, 1, outc);
d133 1
a133 1
			turn_off |= A_COLOR;
d138 15
a152 74
		if ((turn_on & A_ALTCHARSET) && enter_alt_charset_mode) {
			TPUTS_TRACE("enter_alt_charset_mode");
			tputs(enter_alt_charset_mode, 1, outc);
		}

		if ((turn_on & A_BLINK)  &&  enter_blink_mode) {
			TPUTS_TRACE("enter_blink_mode");
			tputs(enter_blink_mode, 1, outc);
		}

		if ((turn_on & A_BOLD)  &&  enter_bold_mode) {
			TPUTS_TRACE("enter_bold_mode");
			tputs(enter_bold_mode, 1, outc);
		}

		if ((turn_on & A_DIM)  &&  enter_dim_mode) {
			TPUTS_TRACE("enter_dim_mode");
			tputs(enter_dim_mode, 1, outc);
		}

		if ((turn_on & A_REVERSE)  &&  enter_reverse_mode) {
			TPUTS_TRACE("enter_reverse_mode");
			tputs(enter_reverse_mode, 1, outc);
		}

		if ((turn_on & A_STANDOUT)  &&  enter_standout_mode) {
			TPUTS_TRACE("enter_standout_mode");
			tputs(enter_standout_mode, 1, outc);
		}

		if ((turn_on & A_PROTECT)  &&  enter_protected_mode) {
			TPUTS_TRACE("enter_protected_mode");
			tputs(enter_protected_mode, 1, outc);
		}

		if ((turn_on & A_INVIS)  &&  enter_secure_mode) {
			TPUTS_TRACE("enter_secure_mode");
			tputs(enter_secure_mode, 1, outc);
		}

		if ((turn_on & A_UNDERLINE)  &&  enter_underline_mode) {
			TPUTS_TRACE("enter_underline_mode");
			tputs(enter_underline_mode, 1, outc);
		}

		if ((turn_on & A_HORIZONTAL)  &&  enter_horizontal_hl_mode) {
			TPUTS_TRACE("enter_horizontal_hl_mode");
			tputs(enter_horizontal_hl_mode, 1, outc);
		}

		if ((turn_on & A_LEFT)  &&  enter_left_hl_mode) {
			TPUTS_TRACE("enter_left_hl_mode");
			tputs(enter_left_hl_mode, 1, outc);
		}

		if ((turn_on & A_LOW)  &&  enter_low_hl_mode) {
			TPUTS_TRACE("enter_low_hl_mode");
			tputs(enter_low_hl_mode, 1, outc);
		}

		if ((turn_on & A_RIGHT)  &&  enter_right_hl_mode) {
			TPUTS_TRACE("enter_right_hl_mode");
			tputs(enter_right_hl_mode, 1, outc);
		}

		if ((turn_on & A_TOP)  &&  enter_top_hl_mode) {
			TPUTS_TRACE("enter_top_hl_mode");
			tputs(enter_top_hl_mode, 1, outc);
		}

		if ((turn_on & A_VERTICAL)  &&  enter_vertical_hl_mode) {
			TPUTS_TRACE("enter_vertical_hl_mode");
			tputs(enter_vertical_hl_mode, 1, outc);
		}
d155 5
a159 7
	/* if there is no crrent screen, assume we *can* do color */
	if (!SP || SP->_coloron) {
	int pair = PAIR_NUMBER(newmode);
	int current_pair = PAIR_NUMBER(previous_attr);

   		T(("old pair = %d -- new pair = %d", current_pair, pair));
   		if (pair != current_pair || (turn_off && pair)) {
d162 1
a162 1
   	}
d166 2
d169 1
a169 2
	T(("vidputs finished"));
	return OK;
d172 1
d174 1
d178 1
d180 1
a180 3
	T(("vidattr(%lx) called", newmode));

	return(vidputs(newmode, _nc_outch));
@
