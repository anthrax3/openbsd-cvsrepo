head	1.9;
access;
symbols
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	99.01.18.19.08.05;	author millert;	state dead;
branches;
next	1.8;

1.8
date	98.10.31.06.30.30;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.09.17.04.14.30;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.09.13.19.16.27;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.23.21.19.01;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.01.17.16.27.33;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.23;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.41;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.27;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.9
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_mouse.c,v 1.8 1998/10/31 06:30:30 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/

/*
 * This module is intended to encapsulate ncurses's interface to pointing
 * devices.
 *
 * The first method used is xterm's internal mouse-tracking facility.
 * The second (not yet implemented) will be Alessandro Rubini's GPM server.
 *
 * Notes for implementors of new mouse-interface methods:
 *
 * The code is logically split into a lower level that accepts event reports
 * in a device-dependent format and an upper level that parses mouse gestures
 * and filters events.  The mediating data structure is a circular queue of
 * MEVENT structures.
 *
 * Functionally, the lower level's job is to pick up primitive events and
 * put them on the circular queue.  This can happen in one of two ways:
 * either (a) _nc_mouse_event() detects a series of incoming mouse reports
 * and queues them, or (b) code in lib_getch.c detects the kmous prefix in
 * the keyboard input stream and calls _nc_mouse_inline to queue up a series
 * of adjacent mouse reports.
 *
 * In either case, _nc_mouse_parse() should be called after the series is
 * accepted to parse the digested mouse reports (low-level MEVENTs) into
 * a gesture (a high-level or composite MEVENT).
 *
 * Don't be too shy about adding new event types or modifiers, if you can find
 * room for them in the 32-bit mask.  The API is written so that users get
 * feedback on which theoretical event types they won't see when they call
 * mousemask. There's one bit per button (the RESERVED_EVENT bit) not being
 * used yet, and a couple of bits open at the high end.
 */

#ifdef __EMX__
#  include "io.h"
#  include "fcntl.h"
#  define  INCL_DOS
#  define  INCL_VIO
#  define  INCL_KBD
#  define  INCL_MOU
#  define  INCL_DOSPROCESS
#  include <os2.h>			/* Need to include before the others */
#endif

#include <curses.priv.h>
#include <term.h>

#if USE_GPM_SUPPORT
#ifndef LINT		/* don't need this for llib-lncurses */
#undef buttons		/* term.h defines this, and gpm uses it! */
#include <gpm.h>
#endif
#endif

MODULE_ID("$From: lib_mouse.c,v 1.38 1998/10/03 19:08:33 tom Exp $")

#define MY_TRACE TRACE_ICALLS|TRACE_IEVENT

#define INVALID_EVENT	-1

static int		mousetype;
#define M_XTERM		-1	/* use xterm's mouse tracking? */
#define M_NONE		0	/* no mouse device */
#define M_GPM		1	/* use GPM */
#define M_QNX		2	/* QNX mouse on console */
#define M_QNX_TERM	3	/* QNX mouse on pterm/xterm (using qansi-m) */

#if USE_GPM_SUPPORT
#ifndef LINT
static Gpm_Connect gpm_connect;
#endif
#endif

static mmask_t	eventmask;		/* current event mask */

static bool _nc_mouse_parse(int);
static void _nc_mouse_resume(SCREEN *);
static void _nc_mouse_wrap(SCREEN *);

/* maintain a circular list of mouse events */

/* The definition of the circular list size (EV_MAX), is in curses.priv.h, so
 * wgetch() may refer to the size and call _nc_mouse_parse() before circular
 * list overflow.
 */
static MEVENT	events[EV_MAX];		/* hold the last mouse event seen */
static MEVENT	*eventp = events;	/* next free slot in event queue */
#define NEXT(ep)	((ep == events + EV_MAX - 1) ? events : ep + 1)
#define PREV(ep)	((ep == events) ? events + EV_MAX - 1 : ep - 1)

#ifdef TRACE
static void _trace_slot(const char *tag)
{
	MEVENT *ep;

	_tracef(tag);

	for (ep = events; ep < events + EV_MAX; ep++)
		_tracef("mouse event queue slot %ld = %s",
			(long) (ep - events),
			_tracemouse(ep));
}
#endif

#ifdef USE_EMX_MOUSE

#  define TOP_ROW          0
#  define LEFT_COL         0

static int mouse_wfd;
static int mouse_thread;

#  define M_FD(sp) sp->_mouse_fd

static void
write_event(int down, int button, int x, int y)
{
    char buf[6];
    unsigned long ignore;

    strcpy(buf, key_mouse);
    buf[3] = ' ' + (button - 1) + (down ? 0 : 0x40);
    buf[4] = ' ' + x - LEFT_COL + 1;
    buf[5] = ' ' + y - TOP_ROW + 1;
    DosWrite(mouse_wfd, buf, 6, &ignore);
}

static void
mouse_server(unsigned long ignored GCC_UNUSED)
{
    unsigned short fWait = MOU_WAIT;
    /* NOPTRRECT mourt = { 0,0,24,79 }; */
    MOUEVENTINFO mouev;
    HMOU hmou;
    unsigned short mask = MOUSE_BN1_DOWN | MOUSE_BN2_DOWN | MOUSE_BN3_DOWN;
    int oldstate = 0;
    char errmess[] = "Unexpected termination of mouse thread\r\n";
    unsigned long ignore;

    /* open the handle for the mouse */
    if (MouOpen(NULL,&hmou) == 0) {

	if (MouSetEventMask(&mask,hmou) == 0
	 && MouDrawPtr(hmou) == 0) {

	    for (;;) {
		/* sit and wait on the event queue */
		if (MouReadEventQue(&mouev,&fWait,hmou))
			break;

		/*
		 * OS/2 numbers a 3-button mouse inconsistently from other
		 * platforms:
		 *	1 = left
		 *	2 = right
		 *	3 = middle.
		 */
		if ((mouev.fs ^ oldstate) & MOUSE_BN1_DOWN)
		    write_event(mouev.fs  & MOUSE_BN1_DOWN, 1, mouev.col, mouev.row);
		if ((mouev.fs ^ oldstate) & MOUSE_BN2_DOWN)
		    write_event(mouev.fs  & MOUSE_BN2_DOWN, 2, mouev.col, mouev.row);
		if ((mouev.fs ^ oldstate) & MOUSE_BN3_DOWN)
		    write_event(mouev.fs  & MOUSE_BN3_DOWN, 3, mouev.col, mouev.row);

		oldstate = mouev.fs;
	    }
	}

	DosWrite(2, errmess, strlen(errmess), &ignore);
	MouClose(hmou);
    }
    DosExit(EXIT_THREAD, 0L );
}
#endif

/* FIXME: The list of names should be configurable */
static int is_xterm(const char *name)
{
    return (!strncmp(name, "xterm", 5)
      ||    !strncmp(name, "rxvt",  4)
      ||    !strncmp(name, "kterm", 5)
      ||    !strncmp(name, "color_xterm", 11));
}

static void _nc_mouse_init(void)
/* initialize the mouse */
{
    int i;
    static int initialized;

    if (initialized) {
	return;
    }
    initialized = TRUE;

    TR(MY_TRACE, ("_nc_mouse_init() called"));

    for (i = 0; i < EV_MAX; i++)
	events[i].id = INVALID_EVENT;

    /* we know how to recognize mouse events under xterm */
    if (key_mouse != 0
     && is_xterm(cur_term->type.term_names))
	mousetype = M_XTERM;

#if USE_GPM_SUPPORT
    else if (!strncmp(cur_term->type.term_names, "linux", 5))
    {
	/* GPM: initialize connection to gpm server */
	gpm_connect.eventMask = GPM_DOWN|GPM_UP;
	gpm_connect.defaultMask = ~gpm_connect.eventMask;
	gpm_connect.minMod = 0;
	gpm_connect.maxMod = ~0;
	if (Gpm_Open (&gpm_connect, 0) >= 0) { /* returns the file-descriptor */
	    mousetype = M_GPM;
	    SP->_mouse_fd = gpm_fd;
	}
    }
#endif

    /* OS/2 VIO */
#ifdef USE_EMX_MOUSE
    if (!mouse_thread && mousetype != M_XTERM && key_mouse) {
	int handles[2];
	if (pipe(handles) < 0) {
	    perror("mouse pipe error");
	} else {
	    int rc;

	    mouse_wfd = handles[1];
	    M_FD(SP) = handles[0];
	    /* Needed? */
	    setmode(handles[0], O_BINARY);
	    setmode(handles[1], O_BINARY);
	    /* Do not use CRT functions, we may single-threaded. */
	    rc = DosCreateThread((unsigned long*)&mouse_thread, mouse_server, 0, 0, 8192);
	    if (rc)
		printf("mouse thread error %d=%#x", rc, rc);
	    else
		mousetype = M_XTERM;
	}
    }
#endif

    T(("_nc_mouse_init() set mousetype to %d", mousetype));
}

static bool _nc_mouse_event(SCREEN *sp GCC_UNUSED)
/* query to see if there is a pending mouse event */
{
#if USE_GPM_SUPPORT
    /* GPM: query server for event, return TRUE if we find one */
    Gpm_Event ev;

    if (gpm_fd >= 0
     && _nc_timed_wait(2, 0, (int *)0)
     && Gpm_GetEvent(&ev) == 1)
    {
	eventp->id = 0;		/* there's only one mouse... */

	eventp->bstate = 0;
	switch (ev.type & 0x0f)
	{
	case(GPM_DOWN):
	    if (ev.buttons & GPM_B_LEFT)   eventp->bstate |= BUTTON1_PRESSED;
	    if (ev.buttons & GPM_B_MIDDLE) eventp->bstate |= BUTTON2_PRESSED;
	    if (ev.buttons & GPM_B_RIGHT)  eventp->bstate |= BUTTON3_PRESSED;
	    break;
	case(GPM_UP):
	    if (ev.buttons & GPM_B_LEFT)   eventp->bstate |= BUTTON1_RELEASED;
	    if (ev.buttons & GPM_B_MIDDLE) eventp->bstate |= BUTTON2_RELEASED;
	    if (ev.buttons & GPM_B_RIGHT)  eventp->bstate |= BUTTON3_RELEASED;
	    break;
	default:
	    break;
	}

	eventp->x = ev.x - 1;
	eventp->y = ev.y - 1;
	eventp->z = 0;

	/* bump the next-free pointer into the circular list */
	eventp = NEXT(eventp);
	return (TRUE);
    }
#endif

    /* xterm: never have to query, mouse events are in the keyboard stream */
    return(FALSE);	/* no event waiting */
}

static bool _nc_mouse_inline(SCREEN *sp)
/* mouse report received in the keyboard stream -- parse its info */
{
    TR(MY_TRACE, ("_nc_mouse_inline() called"));

    if (mousetype == M_XTERM)
    {
	unsigned char	kbuf[4];
	MEVENT	*prev;
	size_t	grabbed;
	int	res;

	/* This code requires that your xterm entry contain the kmous
	 * capability and that it be set to the \E[M documented in the
	 * Xterm Control Sequences reference.  This is how we
	 * arrange for mouse events to be reported via a KEY_MOUSE
	 * return value from wgetch().  After this value is received,
	 * _nc_mouse_inline() gets called and is immediately
	 * responsible for parsing the mouse status information
	 * following the prefix.
	 *
	 * The following quotes from the ctrlseqs.ms document in the
	 * X distribution, describing the X mouse tracking feature:
	 *
	 * Parameters for all mouse tracking escape sequences
	 * generated by xterm encode numeric parameters in a single
	 * character as value+040.  For example, !  is 1.
	 *
	 * On button press or release, xterm sends ESC [ M CbCxCy.
	 * The low two bits of Cb encode button information: 0=MB1
	 * pressed, 1=MB2 pressed, 2=MB3 pressed, 3=release.  The
	 * upper bits encode what modifiers were down when the
	 * button was pressed and are added together.  4=Shift,
	 * 8=Meta, 16=Control.  Cx and Cy are the x and y coordinates
	 * of the mouse event.  The upper left corner is (1,1).
	 *
	 * (End quote)  By the time we get here, we've eaten the
	 * key prefix.  FYI, the loop below is necessary because
	 * mouse click info isn't guaranteed to present as a
	 * single clist item.  It always does under Linux but often
	 * fails to under Solaris.
	 */
	for (grabbed = 0; grabbed < 3; grabbed += res)
	{

	/* For VIO mouse we add extra bit 64 to disambiguate button-up. */
#ifdef USE_EMX_MOUSE
	     res = read( M_FD(sp) >= 0 ? M_FD(sp) : sp->_ifd, &kbuf, 3);
#else
	     res = read(sp->_ifd, kbuf + grabbed, 3-grabbed);
#endif
	     if (res == -1)
		 break;
	}
	kbuf[3] = '\0';

	TR(TRACE_IEVENT, ("_nc_mouse_inline sees the following xterm data: '%s'", kbuf));

	eventp->id = 0;		/* there's only one mouse... */

	/* processing code goes here */
	eventp->bstate = 0;
	switch (kbuf[0] & 0x3)
	{
	case 0x0:
	    eventp->bstate = BUTTON1_PRESSED;
#ifdef USE_EMX_MOUSE
	    if (kbuf[0] & 0x40)
		eventp->bstate = BUTTON1_RELEASED;
#endif
	    break;

	case 0x1:
	    eventp->bstate = BUTTON2_PRESSED;
#ifdef USE_EMX_MOUSE
	    if (kbuf[0] & 0x40)
		eventp->bstate = BUTTON2_RELEASED;
#endif
	    break;

	case 0x2:
	    eventp->bstate = BUTTON3_PRESSED;
#ifdef USE_EMX_MOUSE
	    if (kbuf[0] & 0x40)
		eventp->bstate = BUTTON3_RELEASED;
#endif
	    break;

	case 0x3:
	    /*
	     * Release events aren't reported for individual buttons,
	     * just for the button set as a whole...
	     */
	    eventp->bstate =
		(BUTTON1_RELEASED |
		 BUTTON2_RELEASED |
		 BUTTON3_RELEASED);
	    /*
	     * ...however, because there are no kinds of mouse events under
	     * xterm that can intervene between press and release, we can
	     * deduce which buttons were actually released by looking at the
	     * previous event.
	     */
	    prev = PREV(eventp);
	    if (!(prev->bstate & BUTTON1_PRESSED))
		eventp->bstate &=~ BUTTON1_RELEASED;
	    if (!(prev->bstate & BUTTON2_PRESSED))
		eventp->bstate &=~ BUTTON2_RELEASED;
	    if (!(prev->bstate & BUTTON3_PRESSED))
		eventp->bstate &=~ BUTTON3_RELEASED;
	    break;
	}

	if (kbuf[0] & 4) {
	    eventp->bstate |= BUTTON_SHIFT;
	}
	if (kbuf[0] & 8) {
	    eventp->bstate |= BUTTON_ALT;
	}
	if (kbuf[0] & 16) {
	    eventp->bstate |= BUTTON_CTRL;
	}

	eventp->x = (kbuf[1] - ' ') - 1;
	eventp->y = (kbuf[2] - ' ') - 1;
	TR(MY_TRACE, ("_nc_mouse_inline: primitive mouse-event %s has slot %ld",
		_tracemouse(eventp),
		(long) (eventp - events)));

	/* bump the next-free pointer into the circular list */
	eventp = NEXT(eventp);
#if 0	/* this return would be needed for QNX's mods to lib_getch.c */
	return(TRUE);
#endif
    }

    return(FALSE);
}

static void mouse_activate(bool on)
{
    _nc_mouse_init();

    if (on) {

	switch (mousetype) {
	case M_XTERM:
#ifdef NCURSES_EXT_FUNCS
	    keyok(KEY_MOUSE, on);
#endif
	    TPUTS_TRACE("xterm mouse initialization");
	    putp("\033[?1000h");
	    break;
#if USE_GPM_SUPPORT
	case M_GPM:
	    SP->_mouse_fd = gpm_fd;
	    break;
#endif
	}
	/* Make runtime binding to cut down on object size of applications that
	 * do not use the mouse (e.g., 'clear').
	 */
	SP->_mouse_event  = _nc_mouse_event;
	SP->_mouse_inline = _nc_mouse_inline;
	SP->_mouse_parse  = _nc_mouse_parse;
	SP->_mouse_resume = _nc_mouse_resume;
	SP->_mouse_wrap   = _nc_mouse_wrap;

    } else {

	switch (mousetype) {
	case M_XTERM:
	    TPUTS_TRACE("xterm mouse deinitialization");
	    putp("\033[?1000l");
	    break;
#if USE_GPM_SUPPORT
	case M_GPM:
	    break;
#endif
	}
    }
    (void) fflush(SP->_ofp);
}

/**************************************************************************
 *
 * Device-independent code
 *
 **************************************************************************/

static bool _nc_mouse_parse(int runcount)
/* parse a run of atomic mouse events into a gesture */
{
    MEVENT	*ep, *runp, *next, *prev = PREV(eventp);
    int		n;
    bool	merge;

    TR(MY_TRACE, ("_nc_mouse_parse(%d) called", runcount));

    /*
     * When we enter this routine, the event list next-free pointer
     * points just past a run of mouse events that we know were separated
     * in time by less than the critical click interval. The job of this
     * routine is to collaps this run into a single higher-level event
     * or gesture.
     *
     * We accomplish this in two passes.  The first pass merges press/release
     * pairs into click events.  The second merges runs of click events into
     * double or triple-click events.
     *
     * It's possible that the run may not resolve to a single event (for
     * example, if the user quadruple-clicks).  If so, leading events
     * in the run are ignored.
     *
     * Note that this routine is independent of the format of the specific
     * format of the pointing-device's reports.  We can use it to parse
     * gestures on anything that reports press/release events on a per-
     * button basis, as long as the device-dependent mouse code puts stuff
     * on the queue in MEVENT format.
     */
    if (runcount == 1)
    {
	TR(MY_TRACE, ("_nc_mouse_parse: returning simple mouse event %s at slot %ld",
	   _tracemouse(prev),
	   (long) (prev - events)));
	return (prev->id >= 0)
		? ((prev->bstate & eventmask) ? TRUE : FALSE)
		: FALSE;
    }

    /* find the start of the run */
    runp = eventp;
    for (n = runcount; n > 0; n--) {
	runp = PREV(runp);
    }

#ifdef TRACE
    if (_nc_tracing & TRACE_IEVENT)
    {
	_trace_slot("before mouse press/release merge:");
	_tracef("_nc_mouse_parse: run starts at %ld, ends at %ld, count %d",
	    (long) (runp - events),
	    (long) ((eventp - events) + (EV_MAX-1)) % EV_MAX,
	    runcount);
    }
#endif /* TRACE */

    /* first pass; merge press/release pairs */
    do {
	merge = FALSE;
	for (ep = runp; next = NEXT(ep), next != eventp; ep = next)
	{
	    if (ep->x == next->x && ep->y == next->y
		&& (ep->bstate & (BUTTON1_PRESSED|BUTTON2_PRESSED|BUTTON3_PRESSED))
		&& (!(ep->bstate & BUTTON1_PRESSED)
		    == !(next->bstate & BUTTON1_RELEASED))
		&& (!(ep->bstate & BUTTON2_PRESSED)
		    == !(next->bstate & BUTTON2_RELEASED))
		&& (!(ep->bstate & BUTTON3_PRESSED)
		    == !(next->bstate & BUTTON3_RELEASED))
		)
	    {
		if ((eventmask & BUTTON1_CLICKED)
			&& (ep->bstate & BUTTON1_PRESSED))
		{
		    ep->bstate &=~ BUTTON1_PRESSED;
		    ep->bstate |= BUTTON1_CLICKED;
		    merge = TRUE;
		}
		if ((eventmask & BUTTON2_CLICKED)
			&& (ep->bstate & BUTTON2_PRESSED))
		{
		    ep->bstate &=~ BUTTON2_PRESSED;
		    ep->bstate |= BUTTON2_CLICKED;
		    merge = TRUE;
		}
		if ((eventmask & BUTTON3_CLICKED)
			&& (ep->bstate & BUTTON3_PRESSED))
		{
		    ep->bstate &=~ BUTTON3_PRESSED;
		    ep->bstate |= BUTTON3_CLICKED;
		    merge = TRUE;
		}
		if (merge)
		    next->id = INVALID_EVENT;
	    }
	}
    } while
	(merge);

#ifdef TRACE
    if (_nc_tracing & TRACE_IEVENT)
    {
	_trace_slot("before mouse click merge:");
	_tracef("_nc_mouse_parse: run starts at %ld, ends at %ld, count %d",
	    (long) (runp - events),
	    (long) ((eventp - events) + (EV_MAX-1)) % EV_MAX,
	    runcount);
    }
#endif /* TRACE */

    /*
     * Second pass; merge click runs.  At this point, click events are
     * each followed by one invalid event. We merge click events
     * forward in the queue.
     *
     * NOTE: There is a problem with this design!  If the application
     * allows enough click events to pile up in the circular queue so
     * they wrap around, it will cheerfully merge the newest forward
     * into the oldest, creating a bogus doubleclick and confusing
     * the queue-traversal logic rather badly.  Generally this won't
     * happen, because calling getmouse() marks old events invalid and
     * ineligible for merges.  The true solution to this problem would
     * be to timestamp each MEVENT and perform the obvious sanity check,
     * but the timer element would have to have sub-second resolution,
     * which would get us into portability trouble.
     */
    do {
	MEVENT	*follower;

	merge = FALSE;
	for (ep = runp; next = NEXT(ep), next != eventp; ep = next)
	    if (ep->id != INVALID_EVENT)
	    {
		if (next->id != INVALID_EVENT)
		    continue;
		follower = NEXT(next);
		if (follower->id == INVALID_EVENT)
		    continue;

		/* merge click events forward */
		if ((ep->bstate &
			(BUTTON1_CLICKED | BUTTON2_CLICKED | BUTTON3_CLICKED))
		    && (follower->bstate &
			(BUTTON1_CLICKED | BUTTON2_CLICKED | BUTTON3_CLICKED)))
		{
		    if ((eventmask & BUTTON1_DOUBLE_CLICKED)
			&& (follower->bstate & BUTTON1_CLICKED))
		    {
			follower->bstate &=~ BUTTON1_CLICKED;
			follower->bstate |= BUTTON1_DOUBLE_CLICKED;
			merge = TRUE;
		    }
		    if ((eventmask & BUTTON2_DOUBLE_CLICKED)
			&& (follower->bstate & BUTTON2_CLICKED))
		    {
			follower->bstate &=~ BUTTON2_CLICKED;
			follower->bstate |= BUTTON2_DOUBLE_CLICKED;
			merge = TRUE;
		    }
		    if ((eventmask & BUTTON3_DOUBLE_CLICKED)
			&& (follower->bstate & BUTTON3_CLICKED))
		    {
			follower->bstate &=~ BUTTON3_CLICKED;
			follower->bstate |= BUTTON3_DOUBLE_CLICKED;
			merge = TRUE;
		    }
		    if (merge)
			ep->id = INVALID_EVENT;
		}

		/* merge double-click events forward */
		if ((ep->bstate &
			(BUTTON1_DOUBLE_CLICKED
			 | BUTTON2_DOUBLE_CLICKED
			 | BUTTON3_DOUBLE_CLICKED))
		    && (follower->bstate &
			(BUTTON1_CLICKED | BUTTON2_CLICKED | BUTTON3_CLICKED)))
		{
		    if ((eventmask & BUTTON1_TRIPLE_CLICKED)
			&& (follower->bstate & BUTTON1_CLICKED))
		    {
			follower->bstate &=~ BUTTON1_CLICKED;
			follower->bstate |= BUTTON1_TRIPLE_CLICKED;
			merge = TRUE;
		    }
		    if ((eventmask & BUTTON2_TRIPLE_CLICKED)
			&& (follower->bstate & BUTTON2_CLICKED))
		    {
			follower->bstate &=~ BUTTON2_CLICKED;
			follower->bstate |= BUTTON2_TRIPLE_CLICKED;
			merge = TRUE;
		    }
		    if ((eventmask & BUTTON3_TRIPLE_CLICKED)
			&& (follower->bstate & BUTTON3_CLICKED))
		    {
			follower->bstate &=~ BUTTON3_CLICKED;
			follower->bstate |= BUTTON3_TRIPLE_CLICKED;
			merge = TRUE;
		    }
		    if (merge)
			ep->id = INVALID_EVENT;
		}
	    }
    } while
	(merge);

#ifdef TRACE
    if (_nc_tracing & TRACE_IEVENT)
    {
	_trace_slot("before mouse event queue compaction:");
	_tracef("_nc_mouse_parse: run starts at %ld, ends at %ld, count %d",
	    (long) (runp - events),
	    (long) ((eventp - events) + (EV_MAX-1)) % EV_MAX,
	    runcount);
    }
#endif /* TRACE */

    /*
     * Now try to throw away trailing events flagged invalid, or that
     * don't match the current event mask.
     */
    for (; runcount; prev = PREV(eventp), runcount--)
	if (prev->id == INVALID_EVENT || !(prev->bstate & eventmask)) {
	    eventp = prev;
	}

#ifdef TRACE
    if (_nc_tracing & TRACE_IEVENT)
    {
	_trace_slot("after mouse event queue compaction:");
	_tracef("_nc_mouse_parse: run starts at %ld, ends at %ld, count %d",
	    (long) (runp - events),
	    (long) ((eventp - events) + (EV_MAX-1)) % EV_MAX,
	    runcount);
    }
    for (ep = runp; ep != eventp; ep = NEXT(ep))
	if (ep->id != INVALID_EVENT)
	    TR(MY_TRACE, ("_nc_mouse_parse: returning composite mouse event %s at slot %ld",
		_tracemouse(ep),
		(long) (ep - events)));
#endif /* TRACE */

    /* after all this, do we have a valid event? */
    return(PREV(eventp)->id != INVALID_EVENT);
}

static void _nc_mouse_wrap(SCREEN *sp GCC_UNUSED)
/* release mouse -- called by endwin() before shellout/exit */
{
    TR(MY_TRACE, ("_nc_mouse_wrap() called"));

    switch (mousetype) {
    case M_XTERM:
        if (eventmask)
            mouse_activate(FALSE);
        break;
#if USE_GPM_SUPPORT
	/* GPM: pass all mouse events to next client */
	case M_GPM:
	    break;
#endif
    }
}

static void _nc_mouse_resume(SCREEN *sp GCC_UNUSED)
/* re-connect to mouse -- called by doupdate() after shellout */
{
    TR(MY_TRACE, ("_nc_mouse_resume() called"));

    /* xterm: re-enable reporting */
    if (mousetype == M_XTERM && eventmask)
	mouse_activate(TRUE);

    /* GPM: reclaim our event set */
}

/**************************************************************************
 *
 * Mouse interface entry points for the API
 *
 **************************************************************************/

int getmouse(MEVENT *aevent)
/* grab a copy of the current mouse event */
{
    T((T_CALLED("getmouse(%p)"), aevent));

    if (aevent && (mousetype != M_NONE))
    {
	/* compute the current-event pointer */
	MEVENT	*prev = PREV(eventp);

	/* copy the event we find there */
	*aevent = *prev;

	TR(TRACE_IEVENT, ("getmouse: returning event %s from slot %ld",
	    _tracemouse(prev),
	    (long) (prev - events)));

	prev->id = INVALID_EVENT;	/* so the queue slot becomes free */
	returnCode(OK);
    }
    returnCode(ERR);
}

int ungetmouse(MEVENT *aevent)
/* enqueue a synthesized mouse event to be seen by the next wgetch() */
{
    /* stick the given event in the next-free slot */
    *eventp = *aevent;

    /* bump the next-free pointer into the circular list */
    eventp = NEXT(eventp);

    /* push back the notification event on the keyboard queue */
    return ungetch(KEY_MOUSE);
}

mmask_t mousemask(mmask_t newmask, mmask_t *oldmask)
/* set the mouse event mask */
{
    mmask_t result = 0;

    T((T_CALLED("mousemask(%#lx,%p)"), newmask, oldmask));

    if (oldmask)
	*oldmask = eventmask;

    _nc_mouse_init();
    if ( mousetype != M_NONE )
    {
	eventmask = newmask &
	    (BUTTON_ALT | BUTTON_CTRL | BUTTON_SHIFT
	     | BUTTON1_PRESSED | BUTTON1_RELEASED | BUTTON1_CLICKED
	     | BUTTON1_DOUBLE_CLICKED | BUTTON1_TRIPLE_CLICKED
	     | BUTTON2_PRESSED | BUTTON2_RELEASED | BUTTON2_CLICKED
	     | BUTTON2_DOUBLE_CLICKED | BUTTON2_TRIPLE_CLICKED
	     | BUTTON3_PRESSED | BUTTON3_RELEASED | BUTTON3_CLICKED
	     | BUTTON3_DOUBLE_CLICKED | BUTTON3_TRIPLE_CLICKED);

	mouse_activate(eventmask != 0);

	result = eventmask;
    }

    returnCode(result);
}

bool wenclose(const WINDOW *win, int y, int x)
/* check to see if given window encloses given screen location */
{
    if (win)
    {
	y -= win->_yoffset;
	return ((win->_begy <= y &&
		 win->_begx <= x &&
		 (win->_begx + win->_maxx) >= x &&
		 (win->_begy + win->_maxy) >= y) ? TRUE : FALSE);
    }
    return FALSE;
}

int mouseinterval(int maxclick)
/* set the maximum mouse interval within which to recognize a click */
{
    int oldval;

    if (SP != 0) {
	oldval = SP->_maxclick;
	if (maxclick >= 0)
	    SP->_maxclick = maxclick;
    } else {
	oldval = DEFAULT_MAXCLICK;
    }

    return(oldval);
}

/* This may be used by other routines to ask for the existence of mouse
   support */
int _nc_has_mouse(void) {
  return (mousetype==M_NONE ? 0:1);
}

/* lib_mouse.c ends here */
@


1.8
log
@update to ncurses 4.2-981017
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_mouse.c,v 1.7 1998/09/17 04:14:30 millert Exp $	*/
@


1.7
log
@ncurses-4.2-980912
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_mouse.c,v 1.6 1998/09/13 19:16:27 millert Exp $	*/
d68 11
d89 1
a89 1
MODULE_ID("$From: lib_mouse.c,v 1.36 1998/08/22 18:09:52 tom Exp $")
d139 71
d255 24
d370 5
d376 1
d392 4
d400 4
d408 4
@


1.6
log
@ncurses-4.2-980905
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_mouse.c,v 1.5 1998/07/23 21:19:01 millert Exp $	*/
d425 2
a426 2
	    _tracemouse(prev),
	    (long) (prev - events)));
@


1.5
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d78 1
a78 1
MODULE_ID("$From: lib_mouse.c,v 1.35 1998/02/11 12:13:55 tom Exp $")
d122 3
a124 1
		_tracef("mouse event queue slot %d = %s", ep-events, _tracemouse(ep));
d327 3
a329 1
	TR(MY_TRACE, ("_nc_mouse_inline: primitive mouse-event %s has slot %d", _tracemouse(eventp), eventp - events));
d424 3
a426 2
	TR(MY_TRACE, ("_nc_mouse_parse: returning simple mouse event %s at slot %d",
	   _tracemouse(prev), prev-events));
d442 4
a445 2
	_tracef("_nc_mouse_parse: run starts at %d, ends at %d, count %d",
	    runp-events, ((eventp - events) + (EV_MAX-1)) % EV_MAX, runcount);
d496 4
a499 2
	_tracef("_nc_mouse_parse: run starts at %d, ends at %d, count %d",
	    runp-events, ((eventp - events) + (EV_MAX-1)) % EV_MAX, runcount);
d603 4
a606 2
	_tracef("_nc_mouse_parse: run starts at %d, ends at %d, count %d",
	    runp-events, ((eventp - events) + (EV_MAX-1)) % EV_MAX, runcount);
d623 4
a626 2
	_tracef("_nc_mouse_parse: run starts at %d, ends at %d, count %d",
	    runp-events, ((eventp - events) + (EV_MAX-1)) % EV_MAX, runcount);
d630 3
a632 2
	    TR(MY_TRACE, ("_nc_mouse_parse: returning composite mouse event %s at slot %d",
		_tracemouse(ep), ep-events));
d688 3
a690 2
	TR(TRACE_IEVENT, ("getmouse: returning event %s from slot %d",
	    _tracemouse(prev), prev-events));
@


1.4
log
@Use _ti_get_screensize() from libtermlib to update screen size if changed
    after a program is suspended.
Define EXTERN_TERMINFO in curses.h.
Update to ncurses-4.1-980103 and crank minor.
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_mouse.c,v 1.3 1997/12/03 05:21:23 millert Exp $	*/
d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d78 1
a78 1
MODULE_ID("Id: lib_mouse.c,v 0.32 1997/12/20 22:30:42 tom Exp $")
d88 2
d104 5
a108 1
#define EV_MAX		8		/* size of circular event queue */
a150 5
#ifdef EXTERN_TERMINFO                                                      
    /* we know how to recognize mouse events under xterm */
    if (key_mouse != 0 && is_xterm(cur_term->name))
	mousetype = M_XTERM;
#else
a154 1
#endif
d170 2
d213 1
d329 3
d340 5
a344 2
    if (mousetype == M_XTERM)
    {
d346 1
a346 1
	keyok(KEY_MOUSE, on);
a347 2
	if (on)
	{
d350 6
d357 3
a359 13
	else
	{
	    TPUTS_TRACE("xterm mouse deinitialization");
	    putp("\033[?1000l");
	}
	(void) fflush(SP->_ofp);
    }

    /* Make runtime binding to cut down on object size of applications that do
     * not use the mouse (e.g., 'clear').
     */
    if (on)
    {
d365 8
d374 2
a375 2
	if (mousetype == M_GPM)
	    SP->_mouse_fd = gpm_fd;
d377 1
d379 1
d429 1
a429 1
    for (n = runcount; n > 0; n--)
d431 1
d604 1
a604 1
	if (prev->id == INVALID_EVENT || !(prev->bstate & eventmask))
d606 1
d630 11
a640 5
    /* xterm: turn off reporting */
    if (mousetype == M_XTERM && eventmask)
	mouse_activate(FALSE);

    /* GPM: pass all mouse events to next client */
d666 1
a666 1
    if (aevent && (mousetype == M_XTERM || mousetype == M_GPM))
d707 1
a707 1
    if (mousetype == M_XTERM || mousetype == M_GPM)
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 1
a66 1
MODULE_ID("Id: lib_mouse.c,v 0.31 1997/10/11 22:40:49 tom Exp $")
d324 1
d326 1
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d66 1
a66 1
MODULE_ID("Id: lib_mouse.c,v 0.22 1997/02/15 22:33:37 tom Exp $")
a71 2
int _nc_max_click_interval = 166;	/* max press/release separation */

d85 4
d108 11
a118 2
void _nc_mouse_init(SCREEN *sp GCC_UNUSED)
/* initialize the mouse -- called at screen-setup time */
d121 6
d135 1
a135 1
    if (!strncmp(cur_term->name, "xterm", 5) && key_mouse)
d139 2
a140 1
    if (!strncmp(cur_term->type.term_names, "xterm", 5) && key_mouse)
d152 1
a152 1
	if (Gpm_Open (&gpm_connect, 0) >= 0) /* returns the file-descriptor */
d154 2
d160 1
a160 12
int _nc_mouse_fd(void)
{
	if (mousetype == M_XTERM)
		return -1;
#if USE_GPM_SUPPORT
	else if (mousetype == M_GPM)
		return gpm_fd;
#endif
	return -1;
}

bool _nc_mouse_event(SCREEN *sp GCC_UNUSED)
d173 1
a173 1
	eventp->bstate = 0;	
d192 1
a192 1
	eventp->z = 0; 
d203 1
a203 1
bool _nc_mouse_inline(SCREEN *sp)
d321 1
d324 1
d337 16
d361 1
a361 1
bool _nc_mouse_parse(int runcount)
d395 3
a397 1
	return (PREV(prev)->id >= 0) ? (PREV(prev)->bstate & eventmask) : 0;
d596 1
a596 1
void _nc_mouse_wrap(SCREEN *sp GCC_UNUSED)
d608 1
a608 1
void _nc_mouse_resume(SCREEN *sp GCC_UNUSED)
d629 2
d643 1
a643 1
	return(OK);
d645 1
a645 1
    return(ERR);
d664 4
d671 1
d685 1
a685 1
	return(eventmask);
d688 1
a688 1
    return(0);
d691 1
a691 1
bool wenclose(WINDOW *win, int y, int x)
d697 4
a700 4
	return (win->_begy <= y && 
		win->_begx <= x &&
		(win->_begx + win->_maxx) >= x && 
		(win->_begy + win->_maxy) >= y);
d708 9
a716 1
    int	oldval = _nc_max_click_interval;
a717 1
    _nc_max_click_interval = maxclick;
d719 6
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d24 1
a24 1
 * devices. 
d54 13
a66 4
#include <curses.h>
#include <string.h>
#include "term.h"
#include "curses.priv.h"
d75 7
a81 1
#define M_GPM		1	/* use GPM (not yet implemented) */
d92 13
a104 1
void _nc_mouse_init(SCREEN *sp)
d109 1
a109 1
    T(("_nc_mouse_init() called"));
d114 1
a114 1
#ifdef EXTERN_TERMINFO
d124 23
a146 1
    /* GPM: initialize connection to gpm server */
d149 1
a149 1
bool _nc_mouse_event(SCREEN *sp)
d152 1
a152 1
    /* xterm: never have to query, mouse events are  in the keyboard stream */
d154 35
d195 1
a195 1
    T(("_nc_mouse_inline() called"));
d199 1
a199 1
	char	kbuf[4];
d201 2
d229 4
a232 1
	 * key prefix.
d234 6
a239 1
	(void) read(sp->_ifd, &kbuf, 3);
d242 1
a242 3
#ifdef MOUSEDEBUG
	T(("_nc_mouse_inline sees the following xterm data: '%s'", kbuf));
#endif /* MOUSEDEBUG */
d267 1
a267 1
	    eventp->bstate = 
d297 3
a299 3
	eventp->x = (kbuf[1] - ' ') - 1; 
	eventp->y = (kbuf[2] - ' ') - 1; 
	T(("_nc_mouse_inline: primitive mouse-event %s has slot %d", _tracemouse(eventp), eventp - events));
d339 2
a340 1
    T(("_nc_mouse_parse() called"));
d352 1
a352 1
     * It's possible that the run may not resolve to a single event (for 
d364 1
a364 1
	T(("_nc_mouse_parse: returning simple mouse event %s at slot %d",
d366 1
a366 1
	return(PREV(prev)->bstate & eventmask);
d374 8
a381 7
#ifdef MOUSEDEBUG
    T(("before mouse press/release merge:"));
    for (ep = events; ep < events + EV_MAX; ep++)
      T(("mouse event queue slot %d = %s", ep-events, _tracemouse(ep)));
    T(("_nc_mouse_parse: run starts at %d, ends at %d, count %d",
       runp-events, ((eventp - events) + (EV_MAX - 1)) % EV_MAX, runcount));
#endif /* MOUSEDEBUG */
a424 8
    
#ifdef MOUSEDEBUG
    T(("before mouse click merges:"));
    for (ep = events; ep < events + EV_MAX; ep++)
      T(("mouse event queue slot %d = %s", ep-events, _tracemouse(ep)));
    T(("_nc_mouse_parse: run starts at %d, ends at %d, count %d",
       runp-events, ((eventp - events) + (EV_MAX - 1)) % EV_MAX, runcount));
#endif /* MOUSEDEBUG */
d426 10
a435 1
    /* 
d468 1
a468 1
		    	(BUTTON1_CLICKED | BUTTON2_CLICKED | BUTTON3_CLICKED)))
d497 2
a498 2
			(BUTTON1_DOUBLE_CLICKED 
			 | BUTTON2_DOUBLE_CLICKED 
d501 1
a501 1
		    	(BUTTON1_CLICKED | BUTTON2_CLICKED | BUTTON3_CLICKED)))
d531 8
a538 7
#ifdef MOUSEDEBUG
    T(("before mouse event queue compaction:"));
    for (ep = events; ep < events + EV_MAX; ep++)
      T(("mouse event queue slot %d = %s", ep-events, _tracemouse(ep)));
    T(("_nc_mouse_parse: uncompacted run starts at %d, ends at %d, count %d",
       runp-events, ((eventp - events) + (EV_MAX - 1)) % EV_MAX, runcount));
#endif /* MOUSEDEBUG */
d549 6
a554 7
#ifdef MOUSEDEBUG
    T(("after mouse event queue compaction:"));
    for (ep = events; ep < events + EV_MAX; ep++)
      T(("mouse event queue slot %d = %s", ep-events, _tracemouse(ep)));
    T(("_nc_mouse_parse: compacted run starts at %d, ends at %d, count %d",
       runp-events, ((eventp - events) + (EV_MAX - 1)) % EV_MAX, runcount));
#endif /* MOUSEDEBUG */
d557 1
a557 1
	    T(("_nc_mouse_parse: returning composite mouse event %s at slot %d",
d565 1
a565 1
void _nc_mouse_wrap(SCREEN *sp)
d568 1
a568 1
    T(("_nc_mouse_wrap() called"));
a571 1
    {
a572 2
	eventmask = 0;
    }
d577 1
a577 1
void _nc_mouse_resume(SCREEN *sp)
d580 1
a580 1
    T(("_nc_mouse_resume() called"));
d598 1
a598 1
    if (mousetype == M_XTERM)
d606 1
a606 2
#ifdef MOUSEDEBUG
	T(("getmouse: returning event %s from slot %d",
a607 1
#endif /* MOUSEDEBUG */
d634 1
a634 1
    if (mousetype == M_XTERM)
d639 1
a639 1
	     | BUTTON1_DOUBLE_CLICKED | BUTTON1_TRIPLE_CLICKED 
d641 1
a641 1
	     | BUTTON2_DOUBLE_CLICKED | BUTTON2_TRIPLE_CLICKED 
d656 9
a664 3
    return
	(win->_begy <= y && win->_begx <= x
	 && win->_maxx >= x && win->_maxy >= y);
@
