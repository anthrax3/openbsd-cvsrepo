head	1.7;
access;
symbols
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	99.01.18.19.07.57;	author millert;	state dead;
branches;
next	1.6;

1.6
date	98.10.31.06.30.29;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.09.13.19.16.27;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.07.23.21.18.51;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.20;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.37;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.25;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_initscr.c,v 1.6 1998/10/31 06:30:29 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/

/*
**	lib_initscr.c
**
**	The routines initscr(), and termname().
**
*/

#include <curses.priv.h>
#include <tic.h>	/* for MAX_ALIAS */

#if HAVE_SYS_TERMIO_H
#include <sys/termio.h>	/* needed for ISC */
#endif

MODULE_ID("$From: lib_initscr.c,v 1.25 1998/09/19 21:39:25 tom Exp $")

WINDOW *initscr(void)
{
static	bool initialized = FALSE;
NCURSES_CONST char *name;
int value;

	T((T_CALLED("initscr()")));
	/* Portable applications must not call initscr() more than once */
	if (!initialized) {
		initialized = TRUE;

		if ((name = getenv("TERM")) == 0
		 || *name == '\0')
			name = "unknown";
		if (newterm(name, stdout, stdin) == 0) {
			fprintf(stderr, "Error opening terminal: %s.\n", name);
			exit(EXIT_FAILURE);
		}

		/* allow user to set maximum escape delay from the environment */
		if ((value = _nc_getenv_num("ESCDELAY")) >= 0) {
			ESCDELAY = value;
		}

		/* def_shell_mode - done in newterm/_nc_setupscreen */
		def_prog_mode();
	}
	returnWin(stdscr);
}

char *termname(void)
{
char	*term = getenv("TERM");
static char	ret[MAX_ALIAS];

	T(("termname() called"));

	if (term != 0) {
		(void) strlcpy(ret, term, sizeof(ret));
		term = ret;
	}
	return term;
}
@


1.6
log
@update to ncurses 4.2-981017
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_initscr.c,v 1.5 1998/09/13 19:16:27 millert Exp $	*/
@


1.5
log
@ncurses-4.2-980905
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_initscr.c,v 1.4 1998/07/23 21:18:51 millert Exp $	*/
d50 1
a50 1
MODULE_ID("$From: lib_initscr.c,v 1.23 1998/08/09 00:18:48 tom Exp $")
d56 1
a56 2
char *p;
long l;
d72 2
a73 5
		if ((name = getenv("ESCDELAY")) != 0) {
			l = strtol(name, &p, 10);
			if (p != name && *p == '\0' && l != LONG_MIN &&
			    l <= INT_MAX)
				ESCDELAY = (int)l;
@


1.4
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 1
a50 1
MODULE_ID("$From: lib_initscr.c,v 1.22 1998/04/18 21:51:33 tom Exp $")
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d44 1
d50 1
a50 1
MODULE_ID("Id: lib_initscr.c,v 1.19 1997/06/28 17:41:12 tom Exp $")
d55 3
a57 1
const char *name;
d64 2
a65 1
		if ((name = getenv("TERM")) == 0)
d73 6
a78 2
		if ((name = getenv("ESCDELAY")) != 0)
			ESCDELAY = atoi(getenv("ESCDELAY"));
d89 1
a89 1
static char	ret[15];
d94 1
a94 1
		(void) strncpy(ret, term, sizeof(ret) - 1);
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
a31 1
#include <term.h>	/* cur_term */
d37 1
a37 30
MODULE_ID("Id: lib_initscr.c,v 1.18 1997/03/08 14:03:59 tom Exp $")

#ifndef ONLCR		/* Allows compilation under the QNX 4.2 OS */
#define ONLCR 0
#endif

/*
 * SVr4/XSI Curses specify that hardware echo is turned off in initscr, and not
 * restored during the curses session.  The library simulates echo in software.
 * (The behavior is unspecified if the application enables hardware echo).
 *
 * The newterm function also initializes terminal settings.
 */
int _nc_initscr(void)
{
	/* for extended XPG4 conformance requires cbreak() at this point */
	/* (SVr4 curses does this anyway) */
	cbreak();

#ifdef TERMIOS
	cur_term->Nttyb.c_lflag &= ~(ECHO|ECHONL);
	cur_term->Nttyb.c_iflag &= ~(ICRNL|INLCR|IGNCR);
	cur_term->Nttyb.c_oflag &= ~(ONLCR);
#else
	cur_term->Nttyb.sg_flags &= ~(ECHO|CRMOD);
#endif
	if ((SET_TTY(cur_term->Filedes, &cur_term->Nttyb)) == -1)
		return ERR;
	return OK;
}
a74 1
		ret[sizeof(ret) - 1] = '\0';
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d29 2
a30 3
#include "curses.priv.h"
#include <stdlib.h>
#include <string.h>
d32 18
a49 1
WINDOW *initscr(void)
d51 3
a53 1
char	*name = getenv("TERM");
d55 11
a65 6
	if (name == 0)
		name = "unknown";
  	if (newterm(name, stdout, stdin) == NULL) {
  		fprintf(stderr, "Error opening terminal: %s.\n", name);
  		exit(1);
	}
d67 4
a70 3
	/* allow user to set maximum escape delay from the environment */
	if ((name = getenv("ESCDELAY")))
	    ESCDELAY = atoi(getenv("ESCDELAY"));
d72 15
a86 1
	def_shell_mode();
d88 4
a91 10
	/* follow the XPG4 requirement to turn echo off at this point */
	noecho();

#ifdef _XOPEN_SOURCE_EXTENDED
	/* for extended XPG4 conformance requires cbreak() at this point */
	cbreak();
#endif /* _XOPEN_SOURCE_EXTENDED */

	def_prog_mode();
	return(stdscr);
d101 1
a101 3
	if (term == (char *)NULL)
		return(char *)NULL;
	else {
d103 2
a104 1
		return(ret);
d106 1
@
