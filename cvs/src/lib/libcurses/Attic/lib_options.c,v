head	1.6;
access;
symbols
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	99.01.18.19.08.14;	author millert;	state dead;
branches;
next	1.5;

1.5
date	98.07.23.21.19.08;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.01.17.16.27.34;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.26;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.45;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.30;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_options.c,v 1.5 1998/07/23 21:19:08 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/


/*
**	lib_options.c
**
**	The routines to handle option setting.
**
*/

#include <curses.priv.h>

#include <term.h>	/* keypad_xmit, keypad_local, meta_on, meta_off */
			/* cursor_visible,cursor_normal,cursor_invisible */

MODULE_ID("$From: lib_options.c,v 1.31 1998/04/11 23:40:51 tom Exp $")

bool has_ic(void)
{
	T((T_CALLED("has_ic()")));
	returnCode((insert_character || parm_ich
	   ||  (enter_insert_mode && exit_insert_mode))
	   &&  (delete_character || parm_dch));
}

bool has_il(void)
{
	T((T_CALLED("has_il()")));
	returnCode((insert_line || parm_insert_line)
		&& (delete_line || parm_delete_line));
}

int idlok(WINDOW *win,  bool flag)
{
	T((T_CALLED("idlok(%p,%d)"), win, flag));

	if (win) {
	  _nc_idlok = win->_idlok = flag && (has_il() || change_scroll_region);
	  returnCode(OK);
	}
	else
	  returnCode(ERR);
}


void idcok(WINDOW *win, bool flag)
{
	T((T_CALLED("idcok(%p,%d)"), win, flag));

	if (win)
	  _nc_idcok = win->_idcok = flag && has_ic();

	returnVoid;
}

int halfdelay(int t)
{
	T((T_CALLED("halfdelay(%d)"), t));

	if (t < 1 || t > 255)
		returnCode(ERR);

	cbreak();
	SP->_cbreak = t+1;
	returnCode(OK);
}

int nodelay(WINDOW *win, bool flag)
{
	T((T_CALLED("nodelay(%p,%d)"), win, flag));

	if (win) {
	  if (flag == TRUE)
	    win->_delay = 0;
	  else win->_delay = -1;
	  returnCode(OK);
	}
	else
	  returnCode(ERR);
}

int notimeout(WINDOW *win, bool f)
{
	T((T_CALLED("notimout(%p,%d)"), win, f));

	if (win) {
	  win->_notimeout = f;
	  returnCode(OK);
	}
	else
	  returnCode(ERR);
}

void wtimeout(WINDOW *win, int delay)
{
	T((T_CALLED("wtimeout(%p,%d)"), win, delay));

	if (win) {
	  win->_delay = delay;
	}
}

int keypad(WINDOW *win, bool flag)
{
	T((T_CALLED("keypad(%p,%d)"), win, flag));

	if (win) {
	  win->_use_keypad = flag;
	  returnCode(_nc_keypad(flag));
	}
	else
	  returnCode(ERR);
}


int meta(WINDOW *win GCC_UNUSED, bool flag)
{
        /* Ok, we stay relaxed and don't signal an error if win is NULL */
	T((T_CALLED("meta(%p,%d)"), win, flag));

	SP->_use_meta = flag;

	if (flag  &&  meta_on)
	{
	    TPUTS_TRACE("meta_on");
	    putp(meta_on);
	}
	else if (! flag  &&  meta_off)
	{
	    TPUTS_TRACE("meta_off");
	    putp(meta_off);
	}
	returnCode(OK);
}

/* curs_set() moved here to narrow the kernel interface */

int curs_set(int vis)
{
int cursor = SP->_cursor;

	T((T_CALLED("curs_set(%d)"), vis));

	if (vis < 0 || vis > 2)
		returnCode(ERR);

	if (vis == cursor)
		returnCode(cursor);

	switch(vis) {
	case 2:
		if (cursor_visible)
		{
			TPUTS_TRACE("cursor_visible");
			putp(cursor_visible);
		}
		else
			returnCode(ERR);
		break;
	case 1:
		if (cursor_normal)
		{
			TPUTS_TRACE("cursor_normal");
			putp(cursor_normal);
		}
		else
			returnCode(ERR);
		break;
	case 0:
		if (cursor_invisible)
		{
			TPUTS_TRACE("cursor_invisible");
			putp(cursor_invisible);
		}
		else
			returnCode(ERR);
		break;
	}
	SP->_cursor = vis;
	(void) fflush(SP->_ofp);

	returnCode(cursor==-1 ? 1 : cursor);
}

int typeahead(int fd)
{
	T((T_CALLED("typeahead(%d)"), fd));
	SP->_checkfd = fd;
	returnCode(OK);
}

/*
**      has_key()
**
**      Return TRUE if the current terminal has the given key
**
*/

#ifdef NCURSES_EXT_FUNCS
static int has_key_internal(int keycode, struct tries *tp)
{
    if (tp == 0)
	return(FALSE);
    else if (tp->value == keycode)
	return(TRUE);
    else
	return(has_key_internal(keycode, tp->child)
	       || has_key_internal(keycode, tp->sibling));
}

int has_key(int keycode)
{
    T((T_CALLED("has_key(%d)"), keycode));
    returnCode(has_key_internal(keycode, SP->_keytry));
}
#endif /* NCURSES_EXT_FUNCS */

/*
**      init_keytry()
**
**      Construct the try for the current terminal's keypad keys.
**
*/

static void init_keytry(void)
{
/* LINT_PREPRO
#if 0*/
#include <keys.tries>
/* LINT_PREPRO
#endif*/
	size_t n;

	/* The SP->_keytry value is initialized in newterm(), where the SP
	 * structure is created, because we can not tell where keypad() or
	 * mouse_activate() (which will call keyok()) are first called.
	 */

	for (n = 0; n < SIZEOF(table); n++)
		if (table[n].offset < STRCOUNT)
		_nc_add_to_try(&(SP->_keytry),
			CUR Strings[table[n].offset],
			table[n].code);
}

/* Turn the keypad on/off
 *
 * Note:  we flush the output because changing this mode causes some terminals
 * to emit different escape sequences for cursor and keypad keys.  If we don't
 * flush, then the next wgetch may get the escape sequence that corresponds to
 * the terminal state _before_ switching modes.
 */
int _nc_keypad(bool flag)
{
	if (flag  &&  keypad_xmit)
	{
	    TPUTS_TRACE("keypad_xmit");
	    putp(keypad_xmit);
	    (void) fflush(SP->_ofp);
	}
	else if (! flag  &&  keypad_local)
	{
	    TPUTS_TRACE("keypad_local");
	    putp(keypad_local);
	    (void) fflush(SP->_ofp);
	}

	if (!SP->_tried) {
	    init_keytry();
	    SP->_tried = TRUE;
	}
	return(OK);
}
@


1.5
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4
log
@Use _ti_get_screensize() from libtermlib to update screen size if changed
    after a program is suspended.
Define EXTERN_TERMINFO in curses.h.
Update to ncurses-4.1-980103 and crank minor.
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_options.c,v 1.3 1997/12/03 05:21:26 millert Exp $	*/
d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d49 1
a49 3
MODULE_ID("Id: lib_options.c,v 1.26 1997/09/20 15:02:34 juergen Exp $")

static void add_to_try(char *, short);
d51 1
a51 1
int has_ic(void)
d59 1
a59 1
int has_il(void)
a88 53

int clearok(WINDOW *win, bool flag)
{
	T((T_CALLED("clearok(%p,%d)"), win, flag));

	if (win) {
	  win->_clear = flag;
	  returnCode(OK);
	}
	else
	  returnCode(ERR);
}


void immedok(WINDOW *win, bool flag)
{
	T((T_CALLED("immedok(%p,%d)"), win, flag));

	if (win)
	  win->_immed = flag;

	returnVoid;
}

int leaveok(WINDOW *win, bool flag)
{
	T((T_CALLED("leaveok(%p,%d)"), win, flag));

	if (win) {
	  win->_leaveok = flag;
	  if (flag == TRUE)
	    curs_set(0);
	  else
	    curs_set(1);
	  returnCode(OK);
	}
	else
	  returnCode(ERR);
}


int scrollok(WINDOW *win, bool flag)
{
	T((T_CALLED("scrollok(%p,%d)"), win, flag));

	if (win) {
	  win->_scroll = flag;
	  returnCode(OK);
	}
	else
	  returnCode(ERR);
}

d127 1
a127 1
int wtimeout(WINDOW *win, int delay)
a132 1
	  returnCode(OK);
a133 2
	else
	  returnCode(ERR);
d151 1
a151 1
	/* Ok, we stay relaxed and don't signal an error if win is NULL */
d232 1
a232 1

d236 1
a236 1
        return(FALSE);
d238 1
a238 1
        return(TRUE);
d240 2
a241 2
        return(has_key_internal(keycode, tp->child)
               || has_key_internal(keycode, tp->sibling));
d249 1
a257 3

static struct  tries *newtry;

a259 2
	newtry = 0;

d265 1
d267 10
a276 93
	SP->_keytry = newtry;
}


static void add_to_try(char *str, short code)
{
static bool     out_of_memory = FALSE;
struct tries    *ptr, *savedptr;

	if (! str  ||  out_of_memory)
		return;

	if (newtry != 0) {
		ptr = savedptr = newtry;

		for (;;) {
			while (ptr->ch != (unsigned char) *str
			       &&  ptr->sibling != 0)
				ptr = ptr->sibling;
	
			if (ptr->ch == (unsigned char) *str) {
				if (*(++str)) {
					if (ptr->child != 0)
						ptr = ptr->child;
					else
						break;
				} else {
					ptr->value = code;
					return;
				}
			} else {
				if ((ptr->sibling = typeCalloc(struct tries,1)) == 0) {
					out_of_memory = TRUE;
					return;
				}

				savedptr = ptr = ptr->sibling;
				if (*str == '\200')
					ptr->ch = '\0';
				else
					ptr->ch = (unsigned char) *str;
				str++;
				ptr->value = 0;

				break;
			}
		} /* end for (;;) */
	} else {   /* newtry == 0 :: First sequence to be added */
		savedptr = ptr = newtry = typeCalloc(struct tries,1);

		if (ptr == 0) {
			out_of_memory = TRUE;
				return;
		}

		if (*str == '\200')
			ptr->ch = '\0';
		else
			ptr->ch = (unsigned char) *str;
		str++;
		ptr->value = 0;
	}

	    /* at this point, we are adding to the try.  ptr->child == 0 */

	while (*str) {
		ptr->child = typeCalloc(struct tries,1);

		ptr = ptr->child;

		if (ptr == 0) {
			out_of_memory = TRUE;

			ptr = savedptr;
			while (ptr != 0) {
				savedptr = ptr->child;
				free(ptr);
				ptr = savedptr;
			}

			return;
		}

		if (*str == '\200')
			ptr->ch = '\0';
		else
			ptr->ch = (unsigned char) *str;
		str++;
		ptr->value = 0;
	}

	ptr->value = code;
	return;
d301 1
a301 1
	if (SP->_keytry == UNINITIALISED)
d303 2
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 1
a37 1
MODULE_ID("Id: lib_options.c,v 1.22 1997/05/01 23:46:18 Alexander.V.Lukyanov Exp $")
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d39 2
d60 6
a65 2
	_nc_idlok = win->_idlok = flag && (has_il() || change_scroll_region);
	returnCode(OK);
d73 2
a74 1
	_nc_idcok = win->_idcok = flag && has_ic();
d84 6
a89 2
	win->_clear = flag;
	returnCode(OK);
d97 2
a98 1
	win->_immed = flag;
d107 8
a114 3
	win->_leaveok = flag;
	if (flag == TRUE)
		curs_set(0);
d116 1
a116 2
		curs_set(1);
	returnCode(OK);
d124 6
a129 2
	win->_scroll = flag;
	returnCode(OK);
d148 8
a155 4
	if (flag == TRUE)
		win->_delay = 0;
	else win->_delay = -1;
	returnCode(OK);
d162 6
a167 2
	win->_notimeout = f;
	returnCode(OK);
d174 3
a176 21
	win->_delay = delay;
	returnCode(OK);
}

static void init_keytry(void);
static void add_to_try(char *, short);

/* Turn the keypad on/off
 *
 * Note:  we flush the output because changing this mode causes some terminals
 * to emit different escape sequences for cursor and keypad keys.  If we don't
 * flush, then the next wgetch may get the escape sequence that corresponds to
 * the terminal state _before_ switching modes.
 */
int _nc_keypad(bool flag)
{
	if (flag  &&  keypad_xmit)
	{
	    TPUTS_TRACE("keypad_xmit");
	    putp(keypad_xmit);
	    (void) fflush(SP->_ofp);
d178 2
a179 10
	else if (! flag  &&  keypad_local)
	{
	    TPUTS_TRACE("keypad_local");
	    putp(keypad_local);
	    (void) fflush(SP->_ofp);
	}

	if (SP->_keytry == UNINITIALISED)
	    init_keytry();
	return(OK);
d186 6
a191 2
	win->_use_keypad = flag;
	returnCode(_nc_keypad(flag));
d197 1
d264 32
d411 8
a418 1
int typeahead(int fd)
d420 12
a431 4
	T((T_CALLED("typeahead(%d)"), fd));
	SP->_checkfd = fd;
	returnCode(OK);
}
d433 3
a435 23
/*
**      has_key()
**
**      Return TRUE if the current terminal has the given key
**
*/


static int has_key_internal(int keycode, struct tries *tp)
{
    if (!tp)
	return(FALSE);
    else if (tp->value == keycode)
	return(TRUE);
    else
	return(has_key_internal(keycode, tp->child)
	       || has_key_internal(keycode, tp->sibling));
}

int has_key(int keycode)
{
    T((T_CALLED("has_key(%d)"), keycode));
    returnCode(has_key_internal(keycode, SP->_keytry));
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d30 3
a32 3
#include "curses.priv.h"
#include <stdlib.h>
#include "term.h"	/* keypad_xmit, keypad_local, meta_on, meta_off */
d35 2
d39 4
a42 3
	T(("has_ic() called"));
	return (insert_character || parm_ich)
		&& (delete_character || parm_dch);
d47 3
a49 3
	T(("has_il() called"));
	return (insert_line || parm_insert_line)
		&& (delete_line || parm_delete_line);
d54 1
a54 1
	T(("idlok(%p,%d) called", win, flag));
d56 2
a57 2
   	win->_idlok = flag && (has_il() || change_scroll_region);
	return OK; 
d61 1
a61 1
int idcok(WINDOW *win, bool flag)
d63 1
a63 1
	T(("idcok(%p,%d) called", win, flag));
d65 1
a65 1
	win->_idcok = flag && has_ic();
d67 1
a67 1
	return OK; 
d73 1
a73 1
	T(("clearok(%p,%d) called", win, flag));
d75 2
a76 5
   	if (win == curscr)
	    newscr->_clear = flag;
	else
	    win->_clear = flag;
	return OK; 
d80 1
a80 1
int immedok(WINDOW *win, bool flag)
d82 1
a82 1
	T(("immedok(%p,%d) called", win, flag));
d84 3
a86 2
   	win->_immed = flag;
	return OK; 
d91 1
a91 1
	T(("leaveok(%p,%d) called", win, flag));
d93 6
a98 6
   	win->_leaveok = flag;
   	if (flag == TRUE)
   		curs_set(0);
   	else
   		curs_set(1);
	return OK; 
d104 1
a104 1
	T(("scrollok(%p,%d) called", win, flag));
d106 2
a107 2
   	win->_scroll = flag;
	return OK; 
d112 1
a112 1
	T(("halfdelay(%d) called", t));
d115 1
a115 1
		return ERR;
d119 1
a119 1
	return OK;
d124 1
a124 1
	T(("nodelay(%p,%d) called", win, flag));
d126 1
a126 1
   	if (flag == TRUE)
d129 1
a129 1
	return OK;
d134 1
a134 1
	T(("notimout(%p,%d) called", win, f));
d137 1
a137 1
	return OK;
d142 1
a142 1
	T(("wtimeout(%p,%d) called", win, delay));
d145 1
a145 1
	return OK;
d172 1
a172 1
	    
d175 1
a175 1
	return OK; 
d180 1
a180 1
	T(("keypad(%p,%d) called", win, flag));
d182 2
a183 2
   	win->_use_keypad = flag;
	return (_nc_keypad(flag));
d187 1
a187 1
int meta(WINDOW *win, bool flag)
d189 1
a189 1
	T(("meta(%p,%d) called", win, flag));
d203 1
a203 1
	return OK; 
d212 1
a212 1
	T(("curs_set(%d)", vis));
d215 4
a218 1
		return ERR;
d227 2
d236 2
d245 2
d250 3
a252 1
	return cursor;	
d263 1
a263 1
static struct  try *newtry;
d267 7
a273 3
    newtry = NULL;
	
#include "keys.tries"
d282 1
a282 1
struct try      *ptr, *savedptr;
d285 9
a293 1
	    	return;
d295 8
a302 16
	if (newtry != NULL)    {
    	ptr = savedptr = newtry;
	    
       	for (;;) {
	       	while (ptr->ch != (unsigned char) *str
		       &&  ptr->sibling != NULL)
	       		ptr = ptr->sibling;
	    
	       	if (ptr->ch == (unsigned char) *str) {
	    		if (*(++str)) {
	           		if (ptr->child != NULL)
	           			ptr = ptr->child;
               		else
	           			break;
	    		} else {
	        		ptr->value = code;
d304 1
a304 1
	   			}
d306 2
a307 2
	    		if ((ptr->sibling = (struct try *) malloc(sizeof *ptr)) == NULL) {
	        		out_of_memory = TRUE;
d309 18
a326 19
	    		}
		    
	    		savedptr = ptr = ptr->sibling;
	    		ptr->child = ptr->sibling = NULL;
			if (*str == '\200')
				ptr->ch = '\0';
			else
				ptr->ch = (unsigned char) *str; 
	    		str++;
	    		ptr->value = (short) NULL;
	    
           		break;
	       	}
	   	} /* end for (;;) */  
	} else {   /* newtry == NULL :: First sequence to be added */
	    	savedptr = ptr = newtry = (struct try *) malloc(sizeof *ptr);
	    
	    	if (ptr == NULL) {
	        	out_of_memory = TRUE;
d328 2
a329 3
	    	}
	    
	    	ptr->child = ptr->sibling = NULL;
d333 3
a335 3
			ptr->ch = (unsigned char) *str; 
	    	str++;
	    	ptr->value = (short) NULL;
d337 3
a339 3
	
	    /* at this point, we are adding to the try.  ptr->child == NULL */
	    
d341 7
a347 7
	   	ptr->child = (struct try *) malloc(sizeof *ptr);
	    
	   	ptr = ptr->child;
	   
	   	if (ptr == NULL) {
	       	out_of_memory = TRUE;
		
d349 4
a352 4
			while (ptr != NULL) {
		    	savedptr = ptr->child;
		    	free(ptr);
		    	ptr = savedptr;
d354 1
a354 1
		
d357 1
a357 2
	    
	   	ptr->child = ptr->sibling = NULL;
d361 3
a363 3
			ptr->ch = (unsigned char) *str; 
	    	str++;
	   	ptr->value = (short) NULL;
d365 1
a365 1
	
d372 4
d377 17
a393 3
	T(("typeahead(%d) called", fd));
	SP->_checkfd = fd;
	return OK;
d396 5
@
