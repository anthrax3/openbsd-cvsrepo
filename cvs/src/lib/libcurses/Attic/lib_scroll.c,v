head	1.5;
access;
symbols
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	99.01.18.19.08.25;	author millert;	state dead;
branches;
next	1.4;

1.4
date	98.07.23.21.19.20;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.21.30;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.51;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.33;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@ncurses-4.2-990116
@
text
@/*	$OpenBSD: lib_scroll.c,v 1.4 1998/07/23 21:19:20 millert Exp $	*/

/****************************************************************************
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 ****************************************************************************/



/*
**	lib_scroll.c
**
**	The routine wscrl(win, n).
**  positive n scroll the window up (ie. move lines down)
**  negative n scroll the window down (ie. move lines up)
**
*/

#include <curses.priv.h>

MODULE_ID("$From: lib_scroll.c,v 1.16 1998/02/11 12:13:55 tom Exp $")

void _nc_scroll_window(WINDOW *win, int const n, short const top, short const bottom, chtype blank)
{
int	line, j;
size_t	to_copy = (size_t)(sizeof(chtype) * (win->_maxx + 1));

	TR(TRACE_MOVE, ("_nc_scroll_window(%p, %d, %d, %d)", win, n, top,bottom)); 

	/*
	 * This used to do a line-text pointer-shuffle instead of text copies.
	 * That (a) doesn't work when the window is derived and doesn't have
	 * its own storage, (b) doesn't save you a lot on modern machines
	 * anyway.  Your typical memcpy implementations are coded in
	 * assembler using a tight BLT loop; for the size of copies we're
	 * talking here, the total execution time is dominated by the one-time
	 * setup cost.  So there is no point in trying to be excessively
	 * clever -- esr.
	 */

	/* shift n lines downwards */
    	if (n < 0) {
		for (line = bottom; line >= top-n; line--) {
		    	memcpy(win->_line[line].text,
			       win->_line[line+n].text,
			       to_copy);
			if_USE_SCROLL_HINTS(win->_line[line].oldindex = win->_line[line+n].oldindex);
		}
		for (line = top; line < top-n; line++) {
			for (j = 0; j <= win->_maxx; j ++)
				win->_line[line].text[j] = blank;
			if_USE_SCROLL_HINTS(win->_line[line].oldindex = _NEWINDEX);
		}
    	}

	/* shift n lines upwards */
    	if (n > 0) {
		for (line = top; line <= bottom-n; line++) {
		    	memcpy(win->_line[line].text,
			       win->_line[line+n].text,
			       to_copy);
			if_USE_SCROLL_HINTS(win->_line[line].oldindex = win->_line[line+n].oldindex);
		}
		for (line = bottom; line > bottom-n; line--) {
			for (j = 0; j <= win->_maxx; j ++)
				win->_line[line].text[j] = blank;
			if_USE_SCROLL_HINTS(win->_line[line].oldindex = _NEWINDEX);
		}
	}
	touchline(win, top, bottom-top+1);
}

int
wscrl(WINDOW *win, int n)
{
	T((T_CALLED("wscrl(%p,%d)"), win, n));

	if (!win || !win->_scroll)
		returnCode(ERR);

	if (n == 0)
		returnCode(OK);

	if ((n > (win->_regbottom - win->_regtop)) || 
	    (-n > (win->_regbottom - win->_regtop)))
	    returnCode(ERR);

	_nc_scroll_window(win, n, win->_regtop, win->_regbottom, _nc_background(win));

	_nc_synchook(win);
    	returnCode(OK);
}
@


1.4
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@d3 32
a34 20

/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d49 1
a49 1
MODULE_ID("Id: lib_scroll.c,v 1.15 1997/09/20 15:02:34 juergen Exp $")
@


1.2
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d37 1
a37 1
MODULE_ID("Id: lib_scroll.c,v 1.11 1997/02/01 23:22:54 tom Exp $")
d39 1
a39 1
void _nc_scroll_window(WINDOW *win, int const n, short const top, short const bottom)
a41 1
chtype	blank = _nc_background(win);
d63 1
a63 1
			win->_line[line].oldindex = win->_line[line+n].oldindex;
d68 1
a68 3
			win->_line[line].oldindex = _NEWINDEX;
			win->_line[line].firstchar = 0;
			win->_line[line].lastchar = win->_maxx;
d78 1
a78 1
			win->_line[line].oldindex = win->_line[line+n].oldindex;
d83 1
a83 3
			win->_line[line].oldindex = _NEWINDEX;
			win->_line[line].firstchar = 0;
			win->_line[line].lastchar = win->_maxx;
d86 1
d94 1
a94 1
	if (! win->_scroll)
d104 1
a104 2
	_nc_scroll_window(win, n, win->_regtop, win->_regbottom);
	touchline(win, win->_regtop, (int)(win->_regbottom - win->_regtop + 1));
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d33 3
a35 3
#include "curses.priv.h"
#include <stdlib.h>
#include <string.h>
d40 2
a41 1
chtype	blank = _nc_render(win, ' ', BLANK);
d61 1
a61 1
			       (size_t)(sizeof(chtype) * (win->_maxx+1)));
d78 1
a78 1
			       (size_t)(sizeof(chtype) * (win->_maxx+1)));
d94 1
a94 1
	T(("wscrl(%p,%d) called", win, n));
d97 1
a97 1
		return ERR;
d100 1
a100 1
		return OK;
d104 1
a104 1
	    return ERR;
d110 1
a110 1
    	return OK;
@
