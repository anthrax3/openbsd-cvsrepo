head	1.61;
access;
symbols
	OPENBSD_6_1:1.61.0.28
	OPENBSD_6_1_BASE:1.61
	OPENBSD_6_0:1.61.0.24
	OPENBSD_6_0_BASE:1.61
	OPENBSD_5_9:1.61.0.20
	OPENBSD_5_9_BASE:1.61
	OPENBSD_5_8:1.61.0.22
	OPENBSD_5_8_BASE:1.61
	OPENBSD_5_7:1.61.0.14
	OPENBSD_5_7_BASE:1.61
	OPENBSD_5_6:1.61.0.18
	OPENBSD_5_6_BASE:1.61
	OPENBSD_5_5:1.61.0.16
	OPENBSD_5_5_BASE:1.61
	OPENBSD_5_4:1.61.0.12
	OPENBSD_5_4_BASE:1.61
	OPENBSD_5_3:1.61.0.10
	OPENBSD_5_3_BASE:1.61
	OPENBSD_5_2:1.61.0.8
	OPENBSD_5_2_BASE:1.61
	OPENBSD_5_1_BASE:1.61
	OPENBSD_5_1:1.61.0.6
	OPENBSD_5_0:1.61.0.4
	OPENBSD_5_0_BASE:1.61
	OPENBSD_4_9:1.61.0.2
	OPENBSD_4_9_BASE:1.61
	OPENBSD_4_8:1.60.0.4
	OPENBSD_4_8_BASE:1.60
	OPENBSD_4_7:1.60.0.2
	OPENBSD_4_7_BASE:1.60
	OPENBSD_4_6:1.59.0.38
	OPENBSD_4_6_BASE:1.59
	OPENBSD_4_5:1.59.0.34
	OPENBSD_4_5_BASE:1.59
	OPENBSD_4_4:1.59.0.32
	OPENBSD_4_4_BASE:1.59
	OPENBSD_4_3:1.59.0.30
	OPENBSD_4_3_BASE:1.59
	OPENBSD_4_2:1.59.0.28
	OPENBSD_4_2_BASE:1.59
	OPENBSD_4_1:1.59.0.26
	OPENBSD_4_1_BASE:1.59
	OPENBSD_4_0:1.59.0.24
	OPENBSD_4_0_BASE:1.59
	OPENBSD_3_9:1.59.0.22
	OPENBSD_3_9_BASE:1.59
	OPENBSD_3_8:1.59.0.20
	OPENBSD_3_8_BASE:1.59
	OPENBSD_3_7:1.59.0.18
	OPENBSD_3_7_BASE:1.59
	OPENBSD_3_6:1.59.0.16
	OPENBSD_3_6_BASE:1.59
	OPENBSD_3_5:1.59.0.14
	OPENBSD_3_5_BASE:1.59
	OPENBSD_3_4:1.59.0.12
	OPENBSD_3_4_BASE:1.59
	OPENBSD_3_3:1.59.0.10
	OPENBSD_3_3_BASE:1.59
	OPENBSD_3_2:1.59.0.8
	OPENBSD_3_2_BASE:1.59
	OPENBSD_3_1:1.59.0.6
	OPENBSD_3_1_BASE:1.59
	OPENBSD_3_0:1.59.0.4
	OPENBSD_3_0_BASE:1.59
	OPENBSD_2_9:1.59.0.2
	OPENBSD_2_9_BASE:1.59
	OPENBSD_2_8:1.55.0.2
	OPENBSD_2_8_BASE:1.55
	OPENBSD_2_7:1.50.0.2
	OPENBSD_2_7_BASE:1.50
	OPENBSD_2_6:1.37.0.2
	OPENBSD_2_6_BASE:1.37
	OPENBSD_2_5:1.28.0.2
	OPENBSD_2_5_BASE:1.28
	OPENBSD_2_4:1.12.0.2
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.61
date	2010.09.06.17.26.17;	author nicm;	state Exp;
branches;
next	1.60;

1.60
date	2010.01.12.23.21.59;	author nicm;	state Exp;
branches;
next	1.59;

1.59
date	2001.02.28.22.58.53;	author millert;	state Exp;
branches;
next	1.58;

1.58
date	2001.02.22.04.16.34;	author millert;	state Exp;
branches;
next	1.57;

1.57
date	2001.01.22.18.01.33;	author millert;	state Exp;
branches;
next	1.56;

1.56
date	2000.12.06.17.18.49;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2000.10.22.18.27.19;	author millert;	state Exp;
branches;
next	1.54;

1.54
date	2000.10.08.22.46.54;	author millert;	state Exp;
branches;
next	1.53;

1.53
date	2000.07.24.04.06.09;	author millert;	state Exp;
branches;
next	1.52;

1.52
date	2000.07.10.03.06.10;	author millert;	state Exp;
branches;
next	1.51;

1.51
date	2000.06.19.03.53.35;	author millert;	state Exp;
branches;
next	1.50;

1.50
date	2000.04.04.16.49.58;	author millert;	state Exp;
branches;
next	1.49;

1.49
date	2000.03.26.16.45.02;	author millert;	state Exp;
branches;
next	1.48;

1.48
date	2000.03.13.23.53.38;	author millert;	state Exp;
branches;
next	1.47;

1.47
date	2000.03.10.01.35.01;	author millert;	state Exp;
branches;
next	1.46;

1.46
date	2000.02.06.07.10.50;	author millert;	state Exp;
branches;
next	1.45;

1.45
date	2000.01.23.04.57.41;	author millert;	state Exp;
branches;
next	1.44;

1.44
date	2000.01.16.01.35.17;	author millert;	state Exp;
branches;
next	1.43;

1.43
date	2000.01.09.05.06.01;	author millert;	state Exp;
branches;
next	1.42;

1.42
date	2000.01.02.22.06.50;	author millert;	state Exp;
branches;
next	1.41;

1.41
date	99.12.28.19.16.24;	author millert;	state Exp;
branches;
next	1.40;

1.40
date	99.12.12.04.49.18;	author millert;	state Exp;
branches;
next	1.39;

1.39
date	99.12.06.02.13.31;	author millert;	state Exp;
branches;
next	1.38;

1.38
date	99.11.28.17.53.40;	author millert;	state Exp;
branches;
next	1.37;

1.37
date	99.08.22.17.42.44;	author millert;	state Exp;
branches;
next	1.36;

1.36
date	99.08.15.11.41.04;	author millert;	state Exp;
branches;
next	1.35;

1.35
date	99.07.11.14.13.46;	author millert;	state Exp;
branches;
next	1.34;

1.34
date	99.07.04.12.43.22;	author millert;	state Exp;
branches;
next	1.33;

1.33
date	99.06.27.08.15.19;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	99.06.15.03.07.48;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	99.06.14.17.26.03;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	99.05.17.03.03.55;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	99.05.08.20.28.57;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	99.03.28.18.01.04;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	99.03.18.16.46.57;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	99.03.16.15.25.08;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	99.03.15.19.12.19;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	99.03.14.03.14.19;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	99.03.12.04.36.01;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	99.03.02.06.23.26;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	99.02.24.06.33.14;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	99.02.24.06.31.06;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	99.02.24.05.36.09;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	99.02.11.00.09.36;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	99.01.31.20.17.06;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	99.01.24.20.06.44;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	99.01.18.19.07.17;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	98.11.17.03.16.20;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	98.10.31.06.30.28;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	98.09.17.04.14.29;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.09.13.19.16.24;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	98.08.03.17.02.43;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.07.27.03.37.28;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.07.23.21.18.11;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.01.17.16.27.31;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.12.14.23.15.44;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.12.03.05.21.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.11.26.04.01.19;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.02.06.05.11;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.04.13.36.46;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.37;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.61
log
@Enable wide character support in ncurses. It is built into libcurses,
libform, libmenu, libpanel and each library is also linked to a
corresponding "w" version.

This is a major bump for all four libraries.

Thanks to landry, stsp, sthen, naddy, oga, Martin Pieuchot, and anyone
else I've forgotten for testing.

ok naddy krw deraadt
@
text
@/* $OpenBSD: curses.h,v 1.60 2010/01/12 23:21:59 nicm Exp $ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Thomas E. Dickey                        1996-on                 *
 ****************************************************************************/

/* $Id: curses.h,v 1.60 2010/01/12 23:21:59 nicm Exp $ */

#ifndef __NCURSES_H
#define __NCURSES_H

#define CURSES 1
#define CURSES_H 1

/* This should be defined for the enhanced functionality to be visible.
 * However, some of the wide-character (enhanced) functionality is missing.
 * So we do not define it (yet).
#define _XOPEN_CURSES 1
 */

/* These are defined only in curses.h, and are used for conditional compiles */
#define NCURSES_VERSION_MAJOR 5
#define NCURSES_VERSION_MINOR 7
#define NCURSES_VERSION_PATCH 20081102

/* This is defined in more than one ncurses header, for identification */
#undef  NCURSES_VERSION
#define NCURSES_VERSION "5.7"

#if !defined(NCURSES_IMPEXP)
#  define NCURSES_IMPEXP /* nothing */
#endif
#if !defined(NCURSES_API)
#  define NCURSES_API /* nothing */
#endif
#if !defined(NCURSES_EXPORT)
#  define NCURSES_EXPORT(type) NCURSES_IMPEXP type NCURSES_API
#endif
#if !defined(NCURSES_EXPORT_VAR)
#  define NCURSES_EXPORT_VAR(type) NCURSES_IMPEXP type
#endif

/*
 * Identify the mouse encoding version.
 */
#define NCURSES_MOUSE_VERSION 1

/*
 * User-definable tweak to disable the include of <stdbool.h>.
 */
#ifndef NCURSES_ENABLE_STDBOOL_H
#define NCURSES_ENABLE_STDBOOL_H 1
#endif

/*
 * NCURSES_ATTR_T is used to quiet compiler warnings when building ncurses
 * configured using --disable-macros.
 */
#ifdef NCURSES_NOMACROS
#ifndef NCURSES_ATTR_T
#define NCURSES_ATTR_T attr_t
#endif
#endif /* NCURSES_NOMACROS */

#ifndef NCURSES_ATTR_T
#define NCURSES_ATTR_T int
#endif

/*
 * Expands to 'const' if ncurses is configured using --enable-const.  Note that
 * doing so makes it incompatible with other implementations of X/Open Curses.
 */
#undef  NCURSES_CONST
#define NCURSES_CONST /*nothing*/

#undef NCURSES_INLINE
#define NCURSES_INLINE inline

/*
 * The internal type used for color values
 */
#undef	NCURSES_COLOR_T
#define	NCURSES_COLOR_T short

/*
 * Definition used to make WINDOW and similar structs opaque.
 */
#ifndef NCURSES_OPAQUE
#define NCURSES_OPAQUE 0
#endif

/*
 * The internal type used for window dimensions.
 */
#undef	NCURSES_SIZE_T
#define	NCURSES_SIZE_T short

/*
 * Control whether tparm() supports varargs or fixed-parameter list.
 */
#undef NCURSES_TPARM_VARARGS
#define NCURSES_TPARM_VARARGS 1

/*
 * NCURSES_CH_T is used in building the library, but not used otherwise in
 * this header file, since that would make the normal/wide-character versions
 * of the header incompatible.
 */
#undef	NCURSES_CH_T
#define NCURSES_CH_T cchar_t

#if 0 && defined(_LP64)
typedef unsigned chtype;
typedef unsigned mmask_t;
#else
typedef unsigned int chtype;
typedef unsigned long mmask_t;
#endif

#include <stdio.h>
#include <unctrl.h>
#include <stdarg.h>	/* we need va_list */
#ifdef _XOPEN_SOURCE_EXTENDED
#include <stddef.h>	/* we want wchar_t */
#endif /* _XOPEN_SOURCE_EXTENDED */

/* X/Open and SVr4 specify that curses implements 'bool'.  However, C++ may also
 * implement it.  If so, we must use the C++ compiler's type to avoid conflict
 * with other interfaces.
 *
 * A further complication is that <stdbool.h> may declare 'bool' to be a
 * different type, such as an enum which is not necessarily compatible with
 * C++.  If we have <stdbool.h>, make 'bool' a macro, so users may #undef it.
 * Otherwise, let it remain a typedef to avoid conflicts with other #define's.
 * In either case, make a typedef for NCURSES_BOOL which can be used if needed
 * from either C or C++.
 */

#undef TRUE
#define TRUE    1

#undef FALSE
#define FALSE   0

typedef unsigned char NCURSES_BOOL;

#if defined(__cplusplus)	/* __cplusplus, etc. */

/* use the C++ compiler's bool type */
#define NCURSES_BOOL bool

#else			/* c89, c99, etc. */

#if NCURSES_ENABLE_STDBOOL_H
#include <stdbool.h>
/* use whatever the C compiler decides bool really is */
#define NCURSES_BOOL bool
#else
/* there is no predefined bool - use our own */
#undef bool
#define bool NCURSES_BOOL
#endif

#endif /* !__cplusplus, etc. */

#ifdef __cplusplus
extern "C" {
#define NCURSES_CAST(type,value) static_cast<type>(value)
#else
#define NCURSES_CAST(type,value) (type)(value)
#endif

/*
 * X/Open attributes.  In the ncurses implementation, they are identical to the
 * A_ attributes.
 */
#define WA_ATTRIBUTES	A_ATTRIBUTES
#define WA_NORMAL	A_NORMAL
#define WA_STANDOUT	A_STANDOUT
#define WA_UNDERLINE	A_UNDERLINE
#define WA_REVERSE	A_REVERSE
#define WA_BLINK	A_BLINK
#define WA_DIM		A_DIM
#define WA_BOLD		A_BOLD
#define WA_ALTCHARSET	A_ALTCHARSET
#define WA_INVIS	A_INVIS
#define WA_PROTECT	A_PROTECT
#define WA_HORIZONTAL	A_HORIZONTAL
#define WA_LEFT		A_LEFT
#define WA_LOW		A_LOW
#define WA_RIGHT	A_RIGHT
#define WA_TOP		A_TOP
#define WA_VERTICAL	A_VERTICAL

/* colors */
#define COLOR_BLACK	0
#define COLOR_RED	1
#define COLOR_GREEN	2
#define COLOR_YELLOW	3
#define COLOR_BLUE	4
#define COLOR_MAGENTA	5
#define COLOR_CYAN	6
#define COLOR_WHITE	7

/* line graphics */

#if 0 || 0
NCURSES_WRAPPED_VAR(chtype*, acs_map);
#define acs_map (_nc_acs_map())
#else
extern NCURSES_EXPORT_VAR(chtype) acs_map[];
#endif

#define NCURSES_ACS(c)	(acs_map[NCURSES_CAST(unsigned char,c)])

/* VT100 symbols begin here */
#define ACS_ULCORNER	NCURSES_ACS('l') /* upper left corner */
#define ACS_LLCORNER	NCURSES_ACS('m') /* lower left corner */
#define ACS_URCORNER	NCURSES_ACS('k') /* upper right corner */
#define ACS_LRCORNER	NCURSES_ACS('j') /* lower right corner */
#define ACS_LTEE	NCURSES_ACS('t') /* tee pointing right */
#define ACS_RTEE	NCURSES_ACS('u') /* tee pointing left */
#define ACS_BTEE	NCURSES_ACS('v') /* tee pointing up */
#define ACS_TTEE	NCURSES_ACS('w') /* tee pointing down */
#define ACS_HLINE	NCURSES_ACS('q') /* horizontal line */
#define ACS_VLINE	NCURSES_ACS('x') /* vertical line */
#define ACS_PLUS	NCURSES_ACS('n') /* large plus or crossover */
#define ACS_S1		NCURSES_ACS('o') /* scan line 1 */
#define ACS_S9		NCURSES_ACS('s') /* scan line 9 */
#define ACS_DIAMOND	NCURSES_ACS('`') /* diamond */
#define ACS_CKBOARD	NCURSES_ACS('a') /* checker board (stipple) */
#define ACS_DEGREE	NCURSES_ACS('f') /* degree symbol */
#define ACS_PLMINUS	NCURSES_ACS('g') /* plus/minus */
#define ACS_BULLET	NCURSES_ACS('~') /* bullet */
/* Teletype 5410v1 symbols begin here */
#define ACS_LARROW	NCURSES_ACS(',') /* arrow pointing left */
#define ACS_RARROW	NCURSES_ACS('+') /* arrow pointing right */
#define ACS_DARROW	NCURSES_ACS('.') /* arrow pointing down */
#define ACS_UARROW	NCURSES_ACS('-') /* arrow pointing up */
#define ACS_BOARD	NCURSES_ACS('h') /* board of squares */
#define ACS_LANTERN	NCURSES_ACS('i') /* lantern symbol */
#define ACS_BLOCK	NCURSES_ACS('0') /* solid square block */
/*
 * These aren't documented, but a lot of System Vs have them anyway
 * (you can spot pprryyzz{{||}} in a lot of AT&T terminfo strings).
 * The ACS_names may not match AT&T's, our source didn't know them.
 */
#define ACS_S3		NCURSES_ACS('p') /* scan line 3 */
#define ACS_S7		NCURSES_ACS('r') /* scan line 7 */
#define ACS_LEQUAL	NCURSES_ACS('y') /* less/equal */
#define ACS_GEQUAL	NCURSES_ACS('z') /* greater/equal */
#define ACS_PI		NCURSES_ACS('{') /* Pi */
#define ACS_NEQUAL	NCURSES_ACS('|') /* not equal */
#define ACS_STERLING	NCURSES_ACS('}') /* UK pound sign */

/*
 * Line drawing ACS names are of the form ACS_trbl, where t is the top, r
 * is the right, b is the bottom, and l is the left.  t, r, b, and l might
 * be B (blank), S (single), D (double), or T (thick).  The subset defined
 * here only uses B and S.
 */
#define ACS_BSSB	ACS_ULCORNER
#define ACS_SSBB	ACS_LLCORNER
#define ACS_BBSS	ACS_URCORNER
#define ACS_SBBS	ACS_LRCORNER
#define ACS_SBSS	ACS_RTEE
#define ACS_SSSB	ACS_LTEE
#define ACS_SSBS	ACS_BTEE
#define ACS_BSSS	ACS_TTEE
#define ACS_BSBS	ACS_HLINE
#define ACS_SBSB	ACS_VLINE
#define ACS_SSSS	ACS_PLUS

#undef	ERR
#define ERR     (-1)

#undef	OK
#define OK      (0)

/* values for the _flags member */
#define _SUBWIN         0x01	/* is this a sub-window? */
#define _ENDLINE        0x02	/* is the window flush right? */
#define _FULLWIN        0x04	/* is the window full-screen? */
#define _SCROLLWIN      0x08	/* bottom edge is at screen bottom? */
#define _ISPAD	        0x10	/* is this window a pad? */
#define _HASMOVED       0x20	/* has cursor moved since last refresh? */
#define _WRAPPED        0x40	/* cursor was just wrappped */

/*
 * this value is used in the firstchar and lastchar fields to mark
 * unchanged lines
 */
#define _NOCHANGE       -1

/*
 * this value is used in the oldindex field to mark lines created by insertions
 * and scrolls.
 */
#define _NEWINDEX	-1

typedef struct screen  SCREEN;
typedef struct _win_st WINDOW;

typedef	chtype	attr_t;		/* ...must be at least as wide as chtype */

#ifdef _XOPEN_SOURCE_EXTENDED

#if 0
#ifdef mblen			/* libutf8.h defines it w/o undefining first */
#undef mblen
#endif
#include <libutf8.h>
#endif

#if 1
#include <wchar.h>		/* ...to get mbstate_t, etc. */
#endif

#if 0
typedef unsigned short wchar_t;
#endif

#if 0
typedef unsigned int wint_t;
#endif

#define CCHARW_MAX	5
typedef struct
{
    attr_t	attr;
    wchar_t	chars[CCHARW_MAX];
#if 0
#undef NCURSES_EXT_COLORS
#define NCURSES_EXT_COLORS 20081102
    int		ext_color;	/* color pair, must be more than 16-bits */
#endif
}
cchar_t;

#endif /* _XOPEN_SOURCE_EXTENDED */

#if !NCURSES_OPAQUE
struct ldat;

struct _win_st
{
	NCURSES_SIZE_T _cury, _curx; /* current cursor position */

	/* window location and size */
	NCURSES_SIZE_T _maxy, _maxx; /* maximums of x and y, NOT window size */
	NCURSES_SIZE_T _begy, _begx; /* screen coords of upper-left-hand corner */

	short   _flags;		/* window state flags */

	/* attribute tracking */
	attr_t  _attrs;		/* current attribute for non-space character */
	chtype  _bkgd;		/* current background char/attribute pair */

	/* option values set by user */
	bool	_notimeout;	/* no time out on function-key entry? */
	bool	_clear;		/* consider all data in the window invalid? */
	bool	_leaveok;	/* OK to not reset cursor on exit? */
	bool	_scroll;	/* OK to scroll this window? */
	bool	_idlok;		/* OK to use insert/delete line? */
	bool	_idcok;		/* OK to use insert/delete char? */
	bool	_immed;		/* window in immed mode? (not yet used) */
	bool	_sync;		/* window in sync mode? */
	bool	_use_keypad;	/* process function keys into KEY_ symbols? */
	int	_delay;		/* 0 = nodelay, <0 = blocking, >0 = delay */

	struct ldat *_line;	/* the actual line data */

	/* global screen state */
	NCURSES_SIZE_T _regtop;	/* top line of scrolling region */
	NCURSES_SIZE_T _regbottom; /* bottom line of scrolling region */

	/* these are used only if this is a sub-window */
	int	_parx;		/* x coordinate of this window in parent */
	int	_pary;		/* y coordinate of this window in parent */
	WINDOW	*_parent;	/* pointer to parent if a sub-window */

	/* these are used only if this is a pad */
	struct pdat
	{
	    NCURSES_SIZE_T _pad_y,      _pad_x;
	    NCURSES_SIZE_T _pad_top,    _pad_left;
	    NCURSES_SIZE_T _pad_bottom, _pad_right;
	} _pad;

	NCURSES_SIZE_T _yoffset; /* real begy is _begy + _yoffset */

#ifdef _XOPEN_SOURCE_EXTENDED
	cchar_t  _bkgrnd;	/* current background char/attribute pair */
#if 0
	int	_color;		/* current color-pair for non-space character */
#endif
#endif
};
#endif /* NCURSES_OPAQUE */

/*
 * This is an extension to support events...
 */
#if 1
#ifdef NCURSES_WGETCH_EVENTS
#if !defined(__BEOS__) || defined(__HAIKU__)
   /* Fix _nc_timed_wait() on BEOS... */
#  define NCURSES_EVENT_VERSION	1
#endif	/* !defined(__BEOS__) */

/*
 * Bits to set in _nc_event.data.flags
 */
#  define _NC_EVENT_TIMEOUT_MSEC	1
#  define _NC_EVENT_FILE		2
#  define _NC_EVENT_FILE_READABLE	2
#  if 0					/* Not supported yet... */
#    define _NC_EVENT_FILE_WRITABLE	4
#    define _NC_EVENT_FILE_EXCEPTION	8
#  endif

typedef struct
{
    int type;
    union
    {
	long timeout_msec;	/* _NC_EVENT_TIMEOUT_MSEC */
	struct
	{
	    unsigned int flags;
	    int fd;
	    unsigned int result;
	} fev;				/* _NC_EVENT_FILE */
    } data;
} _nc_event;

typedef struct
{
    int count;
    int result_flags;	/* _NC_EVENT_TIMEOUT_MSEC or _NC_EVENT_FILE_READABLE */
    _nc_event *events[1];
} _nc_eventlist;

extern NCURSES_EXPORT(int) wgetch_events(WINDOW *, _nc_eventlist *);	/* experimental */
extern NCURSES_EXPORT(int) wgetnstr_events(WINDOW *,char *,int,_nc_eventlist *);/* experimental */

#endif /* NCURSES_WGETCH_EVENTS */
#endif /* NCURSES_EXT_FUNCS */

/*
 * GCC (and some other compilers) define '__attribute__'; we're using this
 * macro to alert the compiler to flag inconsistencies in printf/scanf-like
 * function calls.  Just in case '__attribute__' isn't defined, make a dummy.
 * Old versions of G++ do not accept it anyway, at least not consistently with
 * GCC.
 */
#if !(defined(__GNUC__) || defined(__GNUG__) || defined(__attribute__))
#define __attribute__(p) /* nothing */
#endif

/*
 * We cannot define these in ncurses_cfg.h, since they require parameters to be
 * passed (that is non-portable).  If you happen to be using gcc with warnings
 * enabled, define
 *	GCC_PRINTF
 *	GCC_SCANF
 * to improve checking of calls to printw(), etc.
 */
#ifndef GCC_PRINTFLIKE
#if defined(GCC_PRINTF) && !defined(printf)
#define GCC_PRINTFLIKE(fmt,var) __attribute__((__format__(printf,fmt,var)))
#else
#define GCC_PRINTFLIKE(fmt,var) /*nothing*/
#endif
#endif

#ifndef GCC_SCANFLIKE
#if defined(GCC_SCANF) && !defined(scanf)
#define GCC_SCANFLIKE(fmt,var)  __attribute__((__format__(scanf,fmt,var)))
#else
#define GCC_SCANFLIKE(fmt,var)  /*nothing*/
#endif
#endif

#ifndef	GCC_NORETURN
#define	GCC_NORETURN /* nothing */
#endif

#ifndef	GCC_UNUSED
#define	GCC_UNUSED /* nothing */
#endif

/*
 * Function prototypes.  This is the complete X/Open Curses list of required
 * functions.  Those marked `generated' will have sources generated from the
 * macro definitions later in this file, in order to satisfy XPG4.2
 * requirements.
 */

extern NCURSES_EXPORT(int) addch (const chtype);			/* generated */
extern NCURSES_EXPORT(int) addchnstr (const chtype *, int);		/* generated */
extern NCURSES_EXPORT(int) addchstr (const chtype *);			/* generated */
extern NCURSES_EXPORT(int) addnstr (const char *, int);			/* generated */
extern NCURSES_EXPORT(int) addstr (const char *);			/* generated */
extern NCURSES_EXPORT(int) attroff (NCURSES_ATTR_T);			/* generated */
extern NCURSES_EXPORT(int) attron (NCURSES_ATTR_T);			/* generated */
extern NCURSES_EXPORT(int) attrset (NCURSES_ATTR_T);			/* generated */
extern NCURSES_EXPORT(int) attr_get (attr_t *, short *, void *);	/* generated */
extern NCURSES_EXPORT(int) attr_off (attr_t, void *);			/* generated */
extern NCURSES_EXPORT(int) attr_on (attr_t, void *);			/* generated */
extern NCURSES_EXPORT(int) attr_set (attr_t, short, void *);		/* generated */
extern NCURSES_EXPORT(int) baudrate (void);				/* implemented */
extern NCURSES_EXPORT(int) beep  (void);				/* implemented */
extern NCURSES_EXPORT(int) bkgd (chtype);				/* generated */
extern NCURSES_EXPORT(void) bkgdset (chtype);				/* generated */
extern NCURSES_EXPORT(int) border (chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);	/* generated */
extern NCURSES_EXPORT(int) box (WINDOW *, chtype, chtype);		/* generated */
extern NCURSES_EXPORT(bool) can_change_color (void);			/* implemented */
extern NCURSES_EXPORT(int) cbreak (void);				/* implemented */
extern NCURSES_EXPORT(int) chgat (int, attr_t, short, const void *);	/* generated */
extern NCURSES_EXPORT(int) clear (void);				/* generated */
extern NCURSES_EXPORT(int) clearok (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) clrtobot (void);				/* generated */
extern NCURSES_EXPORT(int) clrtoeol (void);				/* generated */
extern NCURSES_EXPORT(int) color_content (short,short*,short*,short*);	/* implemented */
extern NCURSES_EXPORT(int) color_set (short,void*);			/* generated */
extern NCURSES_EXPORT(int) COLOR_PAIR (int);				/* generated */
extern NCURSES_EXPORT(int) copywin (const WINDOW*,WINDOW*,int,int,int,int,int,int,int);	/* implemented */
extern NCURSES_EXPORT(int) curs_set (int);				/* implemented */
extern NCURSES_EXPORT(int) def_prog_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) def_shell_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) delay_output (int);				/* implemented */
extern NCURSES_EXPORT(int) delch (void);				/* generated */
extern NCURSES_EXPORT(void) delscreen (SCREEN *);			/* implemented */
extern NCURSES_EXPORT(int) delwin (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) deleteln (void);				/* generated */
extern NCURSES_EXPORT(WINDOW *) derwin (WINDOW *,int,int,int,int);	/* implemented */
extern NCURSES_EXPORT(int) doupdate (void);				/* implemented */
extern NCURSES_EXPORT(WINDOW *) dupwin (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) echo (void);					/* implemented */
extern NCURSES_EXPORT(int) echochar (const chtype);			/* generated */
extern NCURSES_EXPORT(int) erase (void);				/* generated */
extern NCURSES_EXPORT(int) endwin (void);				/* implemented */
extern NCURSES_EXPORT(char) erasechar (void);				/* implemented */
extern NCURSES_EXPORT(void) filter (void);				/* implemented */
extern NCURSES_EXPORT(int) flash (void);				/* implemented */
extern NCURSES_EXPORT(int) flushinp (void);				/* implemented */
extern NCURSES_EXPORT(chtype) getbkgd (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getch (void);				/* generated */
extern NCURSES_EXPORT(int) getnstr (char *, int);			/* generated */
extern NCURSES_EXPORT(int) getstr (char *);				/* generated */
extern NCURSES_EXPORT(WINDOW *) getwin (FILE *);			/* implemented */
extern NCURSES_EXPORT(int) halfdelay (int);				/* implemented */
extern NCURSES_EXPORT(bool) has_colors (void);				/* implemented */
extern NCURSES_EXPORT(bool) has_ic (void);				/* implemented */
extern NCURSES_EXPORT(bool) has_il (void);				/* implemented */
extern NCURSES_EXPORT(int) hline (chtype, int);				/* generated */
extern NCURSES_EXPORT(void) idcok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(int) idlok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(void) immedok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(chtype) inch (void);				/* generated */
extern NCURSES_EXPORT(int) inchnstr (chtype *, int);			/* generated */
extern NCURSES_EXPORT(int) inchstr (chtype *);				/* generated */
extern NCURSES_EXPORT(WINDOW *) initscr (void);				/* implemented */
extern NCURSES_EXPORT(int) init_color (short,short,short,short);	/* implemented */
extern NCURSES_EXPORT(int) init_pair (short,short,short);		/* implemented */
extern NCURSES_EXPORT(int) innstr (char *, int);			/* generated */
extern NCURSES_EXPORT(int) insch (chtype);				/* generated */
extern NCURSES_EXPORT(int) insdelln (int);				/* generated */
extern NCURSES_EXPORT(int) insertln (void);				/* generated */
extern NCURSES_EXPORT(int) insnstr (const char *, int);			/* generated */
extern NCURSES_EXPORT(int) insstr (const char *);			/* generated */
extern NCURSES_EXPORT(int) instr (char *);				/* generated */
extern NCURSES_EXPORT(int) intrflush (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(bool) isendwin (void);				/* implemented */
extern NCURSES_EXPORT(bool) is_linetouched (WINDOW *,int);		/* implemented */
extern NCURSES_EXPORT(bool) is_wintouched (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(NCURSES_CONST char *) keyname (int);		/* implemented */
extern NCURSES_EXPORT(int) keypad (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(char) killchar (void);				/* implemented */
extern NCURSES_EXPORT(int) leaveok (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(char *) longname (void);				/* implemented */
extern NCURSES_EXPORT(int) meta (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) move (int, int);				/* generated */
extern NCURSES_EXPORT(int) mvaddch (int, int, const chtype);		/* generated */
extern NCURSES_EXPORT(int) mvaddchnstr (int, int, const chtype *, int);	/* generated */
extern NCURSES_EXPORT(int) mvaddchstr (int, int, const chtype *);	/* generated */
extern NCURSES_EXPORT(int) mvaddnstr (int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvaddstr (int, int, const char *);		/* generated */
extern NCURSES_EXPORT(int) mvchgat (int, int, int, attr_t, short, const void *);	/* generated */
extern NCURSES_EXPORT(int) mvcur (int,int,int,int);			/* implemented */
extern NCURSES_EXPORT(int) mvdelch (int, int);				/* generated */
extern NCURSES_EXPORT(int) mvderwin (WINDOW *, int, int);		/* implemented */
extern NCURSES_EXPORT(int) mvgetch (int, int);				/* generated */
extern NCURSES_EXPORT(int) mvgetnstr (int, int, char *, int);		/* generated */
extern NCURSES_EXPORT(int) mvgetstr (int, int, char *);			/* generated */
extern NCURSES_EXPORT(int) mvhline (int, int, chtype, int);		/* generated */
extern NCURSES_EXPORT(chtype) mvinch (int, int);			/* generated */
extern NCURSES_EXPORT(int) mvinchnstr (int, int, chtype *, int);	/* generated */
extern NCURSES_EXPORT(int) mvinchstr (int, int, chtype *);		/* generated */
extern NCURSES_EXPORT(int) mvinnstr (int, int, char *, int);		/* generated */
extern NCURSES_EXPORT(int) mvinsch (int, int, chtype);			/* generated */
extern NCURSES_EXPORT(int) mvinsnstr (int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvinsstr (int, int, const char *);		/* generated */
extern NCURSES_EXPORT(int) mvinstr (int, int, char *);			/* generated */
extern NCURSES_EXPORT(int) mvprintw (int,int, const char *,...)		/* implemented */
		GCC_PRINTFLIKE(3,4);
extern NCURSES_EXPORT(int) mvscanw (int,int, NCURSES_CONST char *,...)	/* implemented */
		GCC_SCANFLIKE(3,4);
extern NCURSES_EXPORT(int) mvvline (int, int, chtype, int);		/* generated */
extern NCURSES_EXPORT(int) mvwaddch (WINDOW *, int, int, const chtype);	/* generated */
extern NCURSES_EXPORT(int) mvwaddchnstr (WINDOW *, int, int, const chtype *, int);/* generated */
extern NCURSES_EXPORT(int) mvwaddchstr (WINDOW *, int, int, const chtype *);	/* generated */
extern NCURSES_EXPORT(int) mvwaddnstr (WINDOW *, int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwaddstr (WINDOW *, int, int, const char *);	/* generated */
extern NCURSES_EXPORT(int) mvwchgat (WINDOW *, int, int, int, attr_t, short, const void *);/* generated */
extern NCURSES_EXPORT(int) mvwdelch (WINDOW *, int, int);		/* generated */
extern NCURSES_EXPORT(int) mvwgetch (WINDOW *, int, int);		/* generated */
extern NCURSES_EXPORT(int) mvwgetnstr (WINDOW *, int, int, char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwgetstr (WINDOW *, int, int, char *);	/* generated */
extern NCURSES_EXPORT(int) mvwhline (WINDOW *, int, int, chtype, int);	/* generated */
extern NCURSES_EXPORT(int) mvwin (WINDOW *,int,int);			/* implemented */
extern NCURSES_EXPORT(chtype) mvwinch (WINDOW *, int, int);			/* generated */
extern NCURSES_EXPORT(int) mvwinchnstr (WINDOW *, int, int, chtype *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwinchstr (WINDOW *, int, int, chtype *);		/* generated */
extern NCURSES_EXPORT(int) mvwinnstr (WINDOW *, int, int, char *, int);		/* generated */
extern NCURSES_EXPORT(int) mvwinsch (WINDOW *, int, int, chtype);		/* generated */
extern NCURSES_EXPORT(int) mvwinsnstr (WINDOW *, int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwinsstr (WINDOW *, int, int, const char *);		/* generated */
extern NCURSES_EXPORT(int) mvwinstr (WINDOW *, int, int, char *);		/* generated */
extern NCURSES_EXPORT(int) mvwprintw (WINDOW*,int,int, const char *,...)	/* implemented */
		GCC_PRINTFLIKE(4,5);
extern NCURSES_EXPORT(int) mvwscanw (WINDOW *,int,int, NCURSES_CONST char *,...)	/* implemented */
		GCC_SCANFLIKE(4,5);
extern NCURSES_EXPORT(int) mvwvline (WINDOW *,int, int, chtype, int);	/* generated */
extern NCURSES_EXPORT(int) napms (int);					/* implemented */
extern NCURSES_EXPORT(WINDOW *) newpad (int,int);				/* implemented */
extern NCURSES_EXPORT(SCREEN *) newterm (NCURSES_CONST char *,FILE *,FILE *);	/* implemented */
extern NCURSES_EXPORT(WINDOW *) newwin (int,int,int,int);			/* implemented */
extern NCURSES_EXPORT(int) nl (void);					/* implemented */
extern NCURSES_EXPORT(int) nocbreak (void);				/* implemented */
extern NCURSES_EXPORT(int) nodelay (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) noecho (void);				/* implemented */
extern NCURSES_EXPORT(int) nonl (void);					/* implemented */
extern NCURSES_EXPORT(void) noqiflush (void);				/* implemented */
extern NCURSES_EXPORT(int) noraw (void);				/* implemented */
extern NCURSES_EXPORT(int) notimeout (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) overlay (const WINDOW*,WINDOW *);		/* implemented */
extern NCURSES_EXPORT(int) overwrite (const WINDOW*,WINDOW *);		/* implemented */
extern NCURSES_EXPORT(int) pair_content (short,short*,short*);		/* implemented */
extern NCURSES_EXPORT(int) PAIR_NUMBER (int);				/* generated */
extern NCURSES_EXPORT(int) pechochar (WINDOW *, const chtype);		/* implemented */
extern NCURSES_EXPORT(int) pnoutrefresh (WINDOW*,int,int,int,int,int,int);/* implemented */
extern NCURSES_EXPORT(int) prefresh (WINDOW *,int,int,int,int,int,int);	/* implemented */
extern NCURSES_EXPORT(int) printw (const char *,...)			/* implemented */
		GCC_PRINTFLIKE(1,2);
extern NCURSES_EXPORT(int) putwin (WINDOW *, FILE *);			/* implemented */
extern NCURSES_EXPORT(void) qiflush (void);				/* implemented */
extern NCURSES_EXPORT(int) raw (void);					/* implemented */
extern NCURSES_EXPORT(int) redrawwin (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) refresh (void);				/* generated */
extern NCURSES_EXPORT(int) resetty (void);				/* implemented */
extern NCURSES_EXPORT(int) reset_prog_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) reset_shell_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) ripoffline (int, int (*)(WINDOW *, int));	/* implemented */
extern NCURSES_EXPORT(int) savetty (void);				/* implemented */
extern NCURSES_EXPORT(int) scanw (NCURSES_CONST char *,...)		/* implemented */
		GCC_SCANFLIKE(1,2);
extern NCURSES_EXPORT(int) scr_dump (const char *);			/* implemented */
extern NCURSES_EXPORT(int) scr_init (const char *);			/* implemented */
extern NCURSES_EXPORT(int) scrl (int);					/* generated */
extern NCURSES_EXPORT(int) scroll (WINDOW *);				/* generated */
extern NCURSES_EXPORT(int) scrollok (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) scr_restore (const char *);			/* implemented */
extern NCURSES_EXPORT(int) scr_set (const char *);			/* implemented */
extern NCURSES_EXPORT(int) setscrreg (int,int);				/* generated */
extern NCURSES_EXPORT(SCREEN *) set_term (SCREEN *);			/* implemented */
extern NCURSES_EXPORT(int) slk_attroff (const chtype);			/* implemented */
extern NCURSES_EXPORT(int) slk_attr_off (const attr_t, void *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) slk_attron (const chtype);			/* implemented */
extern NCURSES_EXPORT(int) slk_attr_on (attr_t,void*);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) slk_attrset (const chtype);			/* implemented */
extern NCURSES_EXPORT(attr_t) slk_attr (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_attr_set (const attr_t,short,void*);	/* implemented */
extern NCURSES_EXPORT(int) slk_clear (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_color (short);				/* implemented */
extern NCURSES_EXPORT(int) slk_init (int);				/* implemented */
extern NCURSES_EXPORT(char *) slk_label (int);				/* implemented */
extern NCURSES_EXPORT(int) slk_noutrefresh (void);			/* implemented */
extern NCURSES_EXPORT(int) slk_refresh (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_restore (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_set (int,const char *,int);		/* implemented */
extern NCURSES_EXPORT(int) slk_touch (void);				/* implemented */
extern NCURSES_EXPORT(int) standout (void);				/* generated */
extern NCURSES_EXPORT(int) standend (void);				/* generated */
extern NCURSES_EXPORT(int) start_color (void);				/* implemented */
extern NCURSES_EXPORT(WINDOW *) subpad (WINDOW *, int, int, int, int);	/* implemented */
extern NCURSES_EXPORT(WINDOW *) subwin (WINDOW *, int, int, int, int);	/* implemented */
extern NCURSES_EXPORT(int) syncok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(chtype) termattrs (void);				/* implemented */
extern NCURSES_EXPORT(char *) termname (void);				/* implemented */
extern NCURSES_EXPORT(void) timeout (int);				/* generated */
extern NCURSES_EXPORT(int) touchline (WINDOW *, int, int);		/* generated */
extern NCURSES_EXPORT(int) touchwin (WINDOW *);				/* generated */
extern NCURSES_EXPORT(int) typeahead (int);				/* implemented */
extern NCURSES_EXPORT(int) ungetch (int);				/* implemented */
extern NCURSES_EXPORT(int) untouchwin (WINDOW *);			/* generated */
extern NCURSES_EXPORT(void) use_env (bool);				/* implemented */
extern NCURSES_EXPORT(int) vidattr (chtype);				/* implemented */
extern NCURSES_EXPORT(int) vidputs (chtype, int (*)(int));		/* implemented */
extern NCURSES_EXPORT(int) vline (chtype, int);				/* generated */
extern NCURSES_EXPORT(int) vwprintw (WINDOW *, const char *,va_list);	/* implemented */
extern NCURSES_EXPORT(int) vw_printw (WINDOW *, const char *,va_list);	/* generated */
extern NCURSES_EXPORT(int) vwscanw (WINDOW *, NCURSES_CONST char *,va_list);	/* implemented */
extern NCURSES_EXPORT(int) vw_scanw (WINDOW *, NCURSES_CONST char *,va_list);	/* generated */
extern NCURSES_EXPORT(int) waddch (WINDOW *, const chtype);		/* implemented */
extern NCURSES_EXPORT(int) waddchnstr (WINDOW *,const chtype *,int);	/* implemented */
extern NCURSES_EXPORT(int) waddchstr (WINDOW *,const chtype *);		/* generated */
extern NCURSES_EXPORT(int) waddnstr (WINDOW *,const char *,int);	/* implemented */
extern NCURSES_EXPORT(int) waddstr (WINDOW *,const char *);		/* generated */
extern NCURSES_EXPORT(int) wattron (WINDOW *, int);			/* generated */
extern NCURSES_EXPORT(int) wattroff (WINDOW *, int);			/* generated */
extern NCURSES_EXPORT(int) wattrset (WINDOW *, int);			/* generated */
extern NCURSES_EXPORT(int) wattr_get (WINDOW *, attr_t *, short *, void *);	/* generated */
extern NCURSES_EXPORT(int) wattr_on (WINDOW *, attr_t, void *);		/* implemented */
extern NCURSES_EXPORT(int) wattr_off (WINDOW *, attr_t, void *);	/* implemented */
extern NCURSES_EXPORT(int) wattr_set (WINDOW *, attr_t, short, void *);	/* generated */
extern NCURSES_EXPORT(int) wbkgd (WINDOW *, chtype);			/* implemented */
extern NCURSES_EXPORT(void) wbkgdset (WINDOW *,chtype);			/* implemented */
extern NCURSES_EXPORT(int) wborder (WINDOW *,chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);	/* implemented */
extern NCURSES_EXPORT(int) wchgat (WINDOW *, int, attr_t, short, const void *);/* implemented */
extern NCURSES_EXPORT(int) wclear (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wclrtobot (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wclrtoeol (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wcolor_set (WINDOW*,short,void*);		/* implemented */
extern NCURSES_EXPORT(void) wcursyncup (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wdelch (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wdeleteln (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) wechochar (WINDOW *, const chtype);		/* implemented */
extern NCURSES_EXPORT(int) werase (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wgetch (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wgetnstr (WINDOW *,char *,int);		/* implemented */
extern NCURSES_EXPORT(int) wgetstr (WINDOW *, char *);			/* generated */
extern NCURSES_EXPORT(int) whline (WINDOW *, chtype, int);		/* implemented */
extern NCURSES_EXPORT(chtype) winch (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) winchnstr (WINDOW *, chtype *, int);		/* implemented */
extern NCURSES_EXPORT(int) winchstr (WINDOW *, chtype *);		/* generated */
extern NCURSES_EXPORT(int) winnstr (WINDOW *, char *, int);		/* implemented */
extern NCURSES_EXPORT(int) winsch (WINDOW *, chtype);			/* implemented */
extern NCURSES_EXPORT(int) winsdelln (WINDOW *,int);			/* implemented */
extern NCURSES_EXPORT(int) winsertln (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) winsnstr (WINDOW *, const char *,int);	/* implemented */
extern NCURSES_EXPORT(int) winsstr (WINDOW *, const char *);		/* generated */
extern NCURSES_EXPORT(int) winstr (WINDOW *, char *);			/* generated */
extern NCURSES_EXPORT(int) wmove (WINDOW *,int,int);			/* implemented */
extern NCURSES_EXPORT(int) wnoutrefresh (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wprintw (WINDOW *, const char *,...)		/* implemented */
		GCC_PRINTFLIKE(2,3);
extern NCURSES_EXPORT(int) wredrawln (WINDOW *,int,int);		/* implemented */
extern NCURSES_EXPORT(int) wrefresh (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wscanw (WINDOW *, NCURSES_CONST char *,...)	/* implemented */
		GCC_SCANFLIKE(2,3);
extern NCURSES_EXPORT(int) wscrl (WINDOW *,int);			/* implemented */
extern NCURSES_EXPORT(int) wsetscrreg (WINDOW *,int,int);		/* implemented */
extern NCURSES_EXPORT(int) wstandout (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) wstandend (WINDOW *);			/* generated */
extern NCURSES_EXPORT(void) wsyncdown (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(void) wsyncup (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(void) wtimeout (WINDOW *,int);			/* implemented */
extern NCURSES_EXPORT(int) wtouchln (WINDOW *,int,int,int);		/* implemented */
extern NCURSES_EXPORT(int) wvline (WINDOW *,chtype,int);		/* implemented */

/*
 * These are also declared in <term.h>:
 */
extern NCURSES_EXPORT(int) tigetflag (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(int) tigetnum (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(char *) tigetstr (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(int) putp (const char *);				/* implemented */

#if NCURSES_TPARM_VARARGS
extern NCURSES_EXPORT(char *) tparm (NCURSES_CONST char *, ...);	/* special */
#else
extern NCURSES_EXPORT(char *) tparm (NCURSES_CONST char *, long,long,long,long,long,long,long,long,long);	/* special */
extern NCURSES_EXPORT(char *) tparm_varargs (NCURSES_CONST char *, ...);	/* special */
#endif

/*
 * These functions are not in X/Open, but we use them in macro definitions:
 */
extern NCURSES_EXPORT(int) getattrs (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getcurx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getcury (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getbegx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getbegy (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getmaxx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getmaxy (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getparx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getpary (const WINDOW *);			/* generated */

/*
 * vid_attr() was implemented originally based on a draft of X/Open curses.
 */
#ifndef _XOPEN_SOURCE_EXTENDED
#define vid_attr(a,pair,opts) vidattr(a)
#endif

/*
 * These functions are extensions - not in X/Open Curses.
 */
#if 1
#undef  NCURSES_EXT_FUNCS
#define NCURSES_EXT_FUNCS 20081102
typedef int (*NCURSES_WINDOW_CB)(WINDOW *, void *);
typedef int (*NCURSES_SCREEN_CB)(SCREEN *, void *);
extern NCURSES_EXPORT(bool) is_term_resized (int, int);
extern NCURSES_EXPORT(char *) keybound (int, int);
extern NCURSES_EXPORT(const char *) curses_version (void);
extern NCURSES_EXPORT(int) assume_default_colors (int, int);
extern NCURSES_EXPORT(int) define_key (const char *, int);
extern NCURSES_EXPORT(int) key_defined (const char *);
extern NCURSES_EXPORT(int) keyok (int, bool);
extern NCURSES_EXPORT(int) resize_term (int, int);
extern NCURSES_EXPORT(int) resizeterm (int, int);
extern NCURSES_EXPORT(int) set_escdelay (int);
extern NCURSES_EXPORT(int) set_tabsize (int);
extern NCURSES_EXPORT(int) use_default_colors (void);
extern NCURSES_EXPORT(int) use_extended_names (bool);
extern NCURSES_EXPORT(int) use_legacy_coding (int);
extern NCURSES_EXPORT(int) use_screen (SCREEN *, NCURSES_SCREEN_CB, void *);
extern NCURSES_EXPORT(int) use_window (WINDOW *, NCURSES_WINDOW_CB, void *);
extern NCURSES_EXPORT(int) wresize (WINDOW *, int, int);
extern NCURSES_EXPORT(void) nofilter(void);

/*
 * These extensions provide access to information stored in the WINDOW even
 * when NCURSES_OPAQUE is set:
 */
extern NCURSES_EXPORT(WINDOW *) wgetparent (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_cleared (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_idcok (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_idlok (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_immedok (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_keypad (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_leaveok (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_nodelay (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_notimeout (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_scrollok (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_syncok (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(int) wgetscrreg (const WINDOW *, int *, int *); /* generated */

#else
#define curses_version() NCURSES_VERSION
#endif

/* attributes */

#define NCURSES_ATTR_SHIFT       8
#define NCURSES_BITS(mask,shift) ((mask) << ((shift) + NCURSES_ATTR_SHIFT))

#define A_NORMAL	(1U - 1U)
#define A_ATTRIBUTES	NCURSES_BITS(~(1U - 1U),0)
#define A_CHARTEXT	(NCURSES_BITS(1U,0) - 1U)
#define A_COLOR		NCURSES_BITS(((1U) << 8) - 1U,0)
#define A_STANDOUT	NCURSES_BITS(1U,8)
#define A_UNDERLINE	NCURSES_BITS(1U,9)
#define A_REVERSE	NCURSES_BITS(1U,10)
#define A_BLINK		NCURSES_BITS(1U,11)
#define A_DIM		NCURSES_BITS(1U,12)
#define A_BOLD		NCURSES_BITS(1U,13)
#define A_ALTCHARSET	NCURSES_BITS(1U,14)
#define A_INVIS		NCURSES_BITS(1U,15)
#define A_PROTECT	NCURSES_BITS(1U,16)
#define A_HORIZONTAL	NCURSES_BITS(1U,17)
#define A_LEFT		NCURSES_BITS(1U,18)
#define A_LOW		NCURSES_BITS(1U,19)
#define A_RIGHT		NCURSES_BITS(1U,20)
#define A_TOP		NCURSES_BITS(1U,21)
#define A_VERTICAL	NCURSES_BITS(1U,22)

/*
 * Most of the pseudo functions are macros that either provide compatibility
 * with older versions of curses, or provide inline functionality to improve
 * performance.
 */

/*
 * These pseudo functions are always implemented as macros:
 */

#define getyx(win,y,x)   	(y = getcury(win), x = getcurx(win))
#define getbegyx(win,y,x)	(y = getbegy(win), x = getbegx(win))
#define getmaxyx(win,y,x)	(y = getmaxy(win), x = getmaxx(win))
#define getparyx(win,y,x)	(y = getpary(win), x = getparx(win))

#define getsyx(y,x) do { if (newscr) { \
			     if (is_leaveok(newscr)) \
				(y) = (x) = -1; \
			     else \
				 getyx(newscr,(y), (x)); \
			} \
		    } while(0)

#define setsyx(y,x) do { if (newscr) { \
			    if ((y) == -1 && (x) == -1) \
				leaveok(newscr, TRUE); \
			    else { \
				leaveok(newscr, FALSE); \
				wmove(newscr, (y), (x)); \
			    } \
			} \
		    } while(0)

#ifndef NCURSES_NOMACROS

/*
 * These miscellaneous pseudo functions are provided for compatibility:
 */

#define wgetstr(w, s)		wgetnstr(w, s, -1)
#define getnstr(s, n)		wgetnstr(stdscr, s, n)

#define setterm(term)		setupterm(term, 1, (int *)0)

#define fixterm()		reset_prog_mode()
#define resetterm()		reset_shell_mode()
#define saveterm()		def_prog_mode()
#define crmode()		cbreak()
#define nocrmode()		nocbreak()
#define gettmode()

/* It seems older SYSV curses versions define these */
#if !NCURSES_OPAQUE
#define getattrs(win)		((win) ? (win)->_attrs : A_NORMAL)
#define getcurx(win)		((win) ? (win)->_curx : ERR)
#define getcury(win)		((win) ? (win)->_cury : ERR)
#define getbegx(win)		((win) ? (win)->_begx : ERR)
#define getbegy(win)		((win) ? (win)->_begy : ERR)
#define getmaxx(win)		((win) ? ((win)->_maxx + 1) : ERR)
#define getmaxy(win)		((win) ? ((win)->_maxy + 1) : ERR)
#define getparx(win)		((win) ? (win)->_parx : ERR)
#define getpary(win)		((win) ? (win)->_pary : ERR)
#endif /* NCURSES_OPAQUE */

#define wstandout(win)      	(wattrset(win,A_STANDOUT))
#define wstandend(win)      	(wattrset(win,A_NORMAL))

#define wattron(win,at)		wattr_on(win, NCURSES_CAST(attr_t, at), NULL)
#define wattroff(win,at)	wattr_off(win, NCURSES_CAST(attr_t, at), NULL)

#if !NCURSES_OPAQUE
#if defined(_XOPEN_SOURCE_EXTENDED) && 0
#define wattrset(win,at)	((win)->_color = PAIR_NUMBER(at), \
				 (win)->_attrs = (at))
#else
#define wattrset(win,at)	((win)->_attrs = (at))
#endif
#endif /* NCURSES_OPAQUE */

#define scroll(win)		wscrl(win,1)

#define touchwin(win)		wtouchln((win), 0, getmaxy(win), 1)
#define touchline(win, s, c)	wtouchln((win), s, c, 1)
#define untouchwin(win)		wtouchln((win), 0, getmaxy(win), 0)

#define box(win, v, h)		wborder(win, v, v, h, h, 0, 0, 0, 0)
#define border(ls, rs, ts, bs, tl, tr, bl, br)	wborder(stdscr, ls, rs, ts, bs, tl, tr, bl, br)
#define hline(ch, n)		whline(stdscr, ch, n)
#define vline(ch, n)		wvline(stdscr, ch, n)

#define winstr(w, s)		winnstr(w, s, -1)
#define winchstr(w, s)		winchnstr(w, s, -1)
#define winsstr(w, s)		winsnstr(w, s, -1)

#if !NCURSES_OPAQUE
#define redrawwin(win)		wredrawln(win, 0, (win)->_maxy+1)
#endif /* NCURSES_OPAQUE */

#define waddstr(win,str)	waddnstr(win,str,-1)
#define waddchstr(win,str)	waddchnstr(win,str,-1)

/*
 * These apply to the first 256 color pairs.
 */
#define COLOR_PAIR(n)	NCURSES_BITS(n, 0)
#define PAIR_NUMBER(a)	(NCURSES_CAST(int,(((a) & A_COLOR) >> NCURSES_ATTR_SHIFT)))

/*
 * pseudo functions for standard screen
 */

#define addch(ch)		waddch(stdscr,ch)
#define addchnstr(str,n)	waddchnstr(stdscr,str,n)
#define addchstr(str)		waddchstr(stdscr,str)
#define addnstr(str,n)		waddnstr(stdscr,str,n)
#define addstr(str)		waddnstr(stdscr,str,-1)
#define attroff(at)		wattroff(stdscr,at)
#define attron(at)		wattron(stdscr,at)
#define attrset(at)		wattrset(stdscr,at)
#define attr_get(ap,cp,o)	wattr_get(stdscr,ap,cp,o)
#define attr_off(a,o)		wattr_off(stdscr,a,o)
#define attr_on(a,o)		wattr_on(stdscr,a,o)
#define attr_set(a,c,o)		wattr_set(stdscr,a,c,o)
#define bkgd(ch)		wbkgd(stdscr,ch)
#define bkgdset(ch)		wbkgdset(stdscr,ch)
#define chgat(n,a,c,o)		wchgat(stdscr,n,a,c,o)
#define clear()			wclear(stdscr)
#define clrtobot()		wclrtobot(stdscr)
#define clrtoeol()		wclrtoeol(stdscr)
#define color_set(c,o)		wcolor_set(stdscr,c,o)
#define delch()			wdelch(stdscr)
#define deleteln()		winsdelln(stdscr,-1)
#define echochar(c)		wechochar(stdscr,c)
#define erase()			werase(stdscr)
#define getch()			wgetch(stdscr)
#define getstr(str)		wgetstr(stdscr,str)
#define inch()			winch(stdscr)
#define inchnstr(s,n)		winchnstr(stdscr,s,n)
#define inchstr(s)		winchstr(stdscr,s)
#define innstr(s,n)		winnstr(stdscr,s,n)
#define insch(c)		winsch(stdscr,c)
#define insdelln(n)		winsdelln(stdscr,n)
#define insertln()		winsdelln(stdscr,1)
#define insnstr(s,n)		winsnstr(stdscr,s,n)
#define insstr(s)		winsstr(stdscr,s)
#define instr(s)		winstr(stdscr,s)
#define move(y,x)		wmove(stdscr,y,x)
#define refresh()		wrefresh(stdscr)
#define scrl(n)			wscrl(stdscr,n)
#define setscrreg(t,b)		wsetscrreg(stdscr,t,b)
#define standend()		wstandend(stdscr)
#define standout()		wstandout(stdscr)
#define timeout(delay)		wtimeout(stdscr,delay)
#define wdeleteln(win)		winsdelln(win,-1)
#define winsertln(win)		winsdelln(win,1)

/*
 * mv functions
 */

#define mvwaddch(win,y,x,ch)		(wmove(win,y,x) == ERR ? ERR : waddch(win,ch))
#define mvwaddchnstr(win,y,x,str,n)	(wmove(win,y,x) == ERR ? ERR : waddchnstr(win,str,n))
#define mvwaddchstr(win,y,x,str)	(wmove(win,y,x) == ERR ? ERR : waddchnstr(win,str,-1))
#define mvwaddnstr(win,y,x,str,n)	(wmove(win,y,x) == ERR ? ERR : waddnstr(win,str,n))
#define mvwaddstr(win,y,x,str)		(wmove(win,y,x) == ERR ? ERR : waddnstr(win,str,-1))
#define mvwdelch(win,y,x)		(wmove(win,y,x) == ERR ? ERR : wdelch(win))
#define mvwchgat(win,y,x,n,a,c,o)	(wmove(win,y,x) == ERR ? ERR : wchgat(win,n,a,c,o))
#define mvwgetch(win,y,x)		(wmove(win,y,x) == ERR ? ERR : wgetch(win))
#define mvwgetnstr(win,y,x,str,n)	(wmove(win,y,x) == ERR ? ERR : wgetnstr(win,str,n))
#define mvwgetstr(win,y,x,str)		(wmove(win,y,x) == ERR ? ERR : wgetstr(win,str))
#define mvwhline(win,y,x,c,n)		(wmove(win,y,x) == ERR ? ERR : whline(win,c,n))
#define mvwinch(win,y,x)		(wmove(win,y,x) == ERR ? NCURSES_CAST(chtype, ERR) : winch(win))
#define mvwinchnstr(win,y,x,s,n)	(wmove(win,y,x) == ERR ? ERR : winchnstr(win,s,n))
#define mvwinchstr(win,y,x,s)		(wmove(win,y,x) == ERR ? ERR : winchstr(win,s))
#define mvwinnstr(win,y,x,s,n)		(wmove(win,y,x) == ERR ? ERR : winnstr(win,s,n))
#define mvwinsch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : winsch(win,c))
#define mvwinsnstr(win,y,x,s,n)		(wmove(win,y,x) == ERR ? ERR : winsnstr(win,s,n))
#define mvwinsstr(win,y,x,s)		(wmove(win,y,x) == ERR ? ERR : winsstr(win,s))
#define mvwinstr(win,y,x,s)		(wmove(win,y,x) == ERR ? ERR : winstr(win,s))
#define mvwvline(win,y,x,c,n)		(wmove(win,y,x) == ERR ? ERR : wvline(win,c,n))

#define mvaddch(y,x,ch)			mvwaddch(stdscr,y,x,ch)
#define mvaddchnstr(y,x,str,n)		mvwaddchnstr(stdscr,y,x,str,n)
#define mvaddchstr(y,x,str)		mvwaddchstr(stdscr,y,x,str)
#define mvaddnstr(y,x,str,n)		mvwaddnstr(stdscr,y,x,str,n)
#define mvaddstr(y,x,str)		mvwaddstr(stdscr,y,x,str)
#define mvchgat(y,x,n,a,c,o)		mvwchgat(stdscr,y,x,n,a,c,o)
#define mvdelch(y,x)			mvwdelch(stdscr,y,x)
#define mvgetch(y,x)			mvwgetch(stdscr,y,x)
#define mvgetnstr(y,x,str,n)		mvwgetnstr(stdscr,y,x,str,n)
#define mvgetstr(y,x,str)		mvwgetstr(stdscr,y,x,str)
#define mvhline(y,x,c,n)		mvwhline(stdscr,y,x,c,n)
#define mvinch(y,x)			mvwinch(stdscr,y,x)
#define mvinchnstr(y,x,s,n)		mvwinchnstr(stdscr,y,x,s,n)
#define mvinchstr(y,x,s)		mvwinchstr(stdscr,y,x,s)
#define mvinnstr(y,x,s,n)		mvwinnstr(stdscr,y,x,s,n)
#define mvinsch(y,x,c)			mvwinsch(stdscr,y,x,c)
#define mvinsnstr(y,x,s,n)		mvwinsnstr(stdscr,y,x,s,n)
#define mvinsstr(y,x,s)			mvwinsstr(stdscr,y,x,s)
#define mvinstr(y,x,s)			mvwinstr(stdscr,y,x,s)
#define mvvline(y,x,c,n)		mvwvline(stdscr,y,x,c,n)

/*
 * Some wide-character functions can be implemented without the extensions.
 */
#if !NCURSES_OPAQUE
#define getbkgd(win)                    ((win)->_bkgd)
#endif /* NCURSES_OPAQUE */

#define slk_attr_off(a,v)		((v) ? ERR : slk_attroff(a))
#define slk_attr_on(a,v)		((v) ? ERR : slk_attron(a))

#if !NCURSES_OPAQUE
#if defined(_XOPEN_SOURCE_EXTENDED) && 0
#define wattr_set(win,a,p,opts)		((win)->_attrs = ((a) & ~A_COLOR), \
					 (win)->_color = (p), \
					 OK)
#define wattr_get(win,a,p,opts)		((void)((a) != (void *)0 && (*(a) = (win)->_attrs)), \
					 (void)((p) != (void *)0 && (*(p) = (win)->_color)), \
					 OK)
#else
#define wattr_set(win,a,p,opts)		((win)->_attrs = (((a) & ~A_COLOR) | COLOR_PAIR(p)), OK)
#define wattr_get(win,a,p,opts)		((void)((a) != (void *)0 && (*(a) = (win)->_attrs)), \
					 (void)((p) != (void *)0 && (*(p) = PAIR_NUMBER((win)->_attrs))), \
					 OK)
#endif
#endif /* NCURSES_OPAQUE */

/*
 * X/Open curses deprecates SVr4 vwprintw/vwscanw, which are supposed to use
 * varargs.h.  It adds new calls vw_printw/vw_scanw, which are supposed to
 * use POSIX stdarg.h.  The ncurses versions of vwprintw/vwscanw already
 * use stdarg.h, so...
 */
#define vw_printw		vwprintw
#define vw_scanw		vwscanw

/*
 * Export fallback function for use in C++ binding.
 */
#if !1
#define vsscanf(a,b,c) _nc_vsscanf(a,b,c)
NCURSES_EXPORT(int) vsscanf(const char *, const char *, va_list);
#endif

/*
 * These macros are extensions - not in X/Open Curses.
 */
#if 1
#if !NCURSES_OPAQUE
#define is_cleared(win)		((win)->_clear)
#define is_idcok(win)		((win)->_idcok)
#define is_idlok(win)		((win)->_idlok)
#define is_immedok(win)		((win)->_immed)
#define is_keypad(win)		((win)->_use_keypad)
#define is_leaveok(win)		((win)->_leaveok)
#define is_nodelay(win)		((win)->_delay == 0)
#define is_notimeout(win)	((win)->_notimeout)
#define is_scrollok(win)	((win)->_scroll)
#define is_syncok(win)		((win)->_sync)
#define wgetparent(win)		((win) ? (win)->_parent : 0)
#define wgetscrreg(win,t,b)	((win) ? (*(t) = (win)->_regtop, *(b) = (win)->_regbottom, OK) : ERR)
#endif
#endif

#endif /* NCURSES_NOMACROS */

/*
 * Public variables.
 *
 * Notes:
 *	a. ESCDELAY was an undocumented feature under AIX curses.
 *	   It gives the ESC expire time in milliseconds.
 *	b. ttytype is needed for backward compatibility
 */
#if 0

NCURSES_WRAPPED_VAR(WINDOW *, curscr);
NCURSES_WRAPPED_VAR(WINDOW *, newscr);
NCURSES_WRAPPED_VAR(WINDOW *, stdscr);
NCURSES_WRAPPED_VAR(char *, ttytype);
NCURSES_WRAPPED_VAR(int, COLORS);
NCURSES_WRAPPED_VAR(int, COLOR_PAIRS);
NCURSES_WRAPPED_VAR(int, COLS);
NCURSES_WRAPPED_VAR(int, ESCDELAY);
NCURSES_WRAPPED_VAR(int, LINES);
NCURSES_WRAPPED_VAR(int, TABSIZE);

#define curscr      NCURSES_PUBLIC_VAR(curscr())
#define newscr      NCURSES_PUBLIC_VAR(newscr())
#define stdscr      NCURSES_PUBLIC_VAR(stdscr())
#define ttytype     NCURSES_PUBLIC_VAR(ttytype())
#define COLORS      NCURSES_PUBLIC_VAR(COLORS())
#define COLOR_PAIRS NCURSES_PUBLIC_VAR(COLOR_PAIRS())
#define COLS        NCURSES_PUBLIC_VAR(COLS())
#define ESCDELAY    NCURSES_PUBLIC_VAR(ESCDELAY())
#define LINES       NCURSES_PUBLIC_VAR(LINES())
#define TABSIZE     NCURSES_PUBLIC_VAR(TABSIZE())

#else

extern NCURSES_EXPORT_VAR(WINDOW *) curscr;
extern NCURSES_EXPORT_VAR(WINDOW *) newscr;
extern NCURSES_EXPORT_VAR(WINDOW *) stdscr;
extern NCURSES_EXPORT_VAR(char) ttytype[];
extern NCURSES_EXPORT_VAR(int) COLORS;
extern NCURSES_EXPORT_VAR(int) COLOR_PAIRS;
extern NCURSES_EXPORT_VAR(int) COLS;
extern NCURSES_EXPORT_VAR(int) ESCDELAY;
extern NCURSES_EXPORT_VAR(int) LINES;
extern NCURSES_EXPORT_VAR(int) TABSIZE;

#endif

/*
 * Pseudo-character tokens outside ASCII range.  The curses wgetch() function
 * will return any given one of these only if the corresponding k- capability
 * is defined in your terminal's terminfo entry.
 *
 * Some keys (KEY_A1, etc) are arranged like this:
 *	a1     up    a3
 *	left   b2    right
 *	c1     down  c3
 *
 * A few key codes do not depend upon the terminfo entry.
 */
#define KEY_CODE_YES	0400		/* A wchar_t contains a key code */
#define KEY_MIN		0401		/* Minimum curses key */
#define KEY_BREAK	0401		/* Break key (unreliable) */
#define KEY_SRESET	0530		/* Soft (partial) reset (unreliable) */
#define KEY_RESET	0531		/* Reset or hard reset (unreliable) */
/*
 * These definitions were generated by ./MKkey_defs.sh ./Caps
 */
#define KEY_DOWN	0402		/* down-arrow key */
#define KEY_UP		0403		/* up-arrow key */
#define KEY_LEFT	0404		/* left-arrow key */
#define KEY_RIGHT	0405		/* right-arrow key */
#define KEY_HOME	0406		/* home key */
#define KEY_BACKSPACE	0407		/* backspace key */
#define KEY_F0		0410		/* Function keys.  Space for 64 */
#define KEY_F(n)	(KEY_F0+(n))	/* Value of function key n */
#define KEY_DL		0510		/* delete-line key */
#define KEY_IL		0511		/* insert-line key */
#define KEY_DC		0512		/* delete-character key */
#define KEY_IC		0513		/* insert-character key */
#define KEY_EIC		0514		/* sent by rmir or smir in insert mode */
#define KEY_CLEAR	0515		/* clear-screen or erase key */
#define KEY_EOS		0516		/* clear-to-end-of-screen key */
#define KEY_EOL		0517		/* clear-to-end-of-line key */
#define KEY_SF		0520		/* scroll-forward key */
#define KEY_SR		0521		/* scroll-backward key */
#define KEY_NPAGE	0522		/* next-page key */
#define KEY_PPAGE	0523		/* previous-page key */
#define KEY_STAB	0524		/* set-tab key */
#define KEY_CTAB	0525		/* clear-tab key */
#define KEY_CATAB	0526		/* clear-all-tabs key */
#define KEY_ENTER	0527		/* enter/send key */
#define KEY_PRINT	0532		/* print key */
#define KEY_LL		0533		/* lower-left key (home down) */
#define KEY_A1		0534		/* upper left of keypad */
#define KEY_A3		0535		/* upper right of keypad */
#define KEY_B2		0536		/* center of keypad */
#define KEY_C1		0537		/* lower left of keypad */
#define KEY_C3		0540		/* lower right of keypad */
#define KEY_BTAB	0541		/* back-tab key */
#define KEY_BEG		0542		/* begin key */
#define KEY_CANCEL	0543		/* cancel key */
#define KEY_CLOSE	0544		/* close key */
#define KEY_COMMAND	0545		/* command key */
#define KEY_COPY	0546		/* copy key */
#define KEY_CREATE	0547		/* create key */
#define KEY_END		0550		/* end key */
#define KEY_EXIT	0551		/* exit key */
#define KEY_FIND	0552		/* find key */
#define KEY_HELP	0553		/* help key */
#define KEY_MARK	0554		/* mark key */
#define KEY_MESSAGE	0555		/* message key */
#define KEY_MOVE	0556		/* move key */
#define KEY_NEXT	0557		/* next key */
#define KEY_OPEN	0560		/* open key */
#define KEY_OPTIONS	0561		/* options key */
#define KEY_PREVIOUS	0562		/* previous key */
#define KEY_REDO	0563		/* redo key */
#define KEY_REFERENCE	0564		/* reference key */
#define KEY_REFRESH	0565		/* refresh key */
#define KEY_REPLACE	0566		/* replace key */
#define KEY_RESTART	0567		/* restart key */
#define KEY_RESUME	0570		/* resume key */
#define KEY_SAVE	0571		/* save key */
#define KEY_SBEG	0572		/* shifted begin key */
#define KEY_SCANCEL	0573		/* shifted cancel key */
#define KEY_SCOMMAND	0574		/* shifted command key */
#define KEY_SCOPY	0575		/* shifted copy key */
#define KEY_SCREATE	0576		/* shifted create key */
#define KEY_SDC		0577		/* shifted delete-character key */
#define KEY_SDL		0600		/* shifted delete-line key */
#define KEY_SELECT	0601		/* select key */
#define KEY_SEND	0602		/* shifted end key */
#define KEY_SEOL	0603		/* shifted clear-to-end-of-line key */
#define KEY_SEXIT	0604		/* shifted exit key */
#define KEY_SFIND	0605		/* shifted find key */
#define KEY_SHELP	0606		/* shifted help key */
#define KEY_SHOME	0607		/* shifted home key */
#define KEY_SIC		0610		/* shifted insert-character key */
#define KEY_SLEFT	0611		/* shifted left-arrow key */
#define KEY_SMESSAGE	0612		/* shifted message key */
#define KEY_SMOVE	0613		/* shifted move key */
#define KEY_SNEXT	0614		/* shifted next key */
#define KEY_SOPTIONS	0615		/* shifted options key */
#define KEY_SPREVIOUS	0616		/* shifted previous key */
#define KEY_SPRINT	0617		/* shifted print key */
#define KEY_SREDO	0620		/* shifted redo key */
#define KEY_SREPLACE	0621		/* shifted replace key */
#define KEY_SRIGHT	0622		/* shifted right-arrow key */
#define KEY_SRSUME	0623		/* shifted resume key */
#define KEY_SSAVE	0624		/* shifted save key */
#define KEY_SSUSPEND	0625		/* shifted suspend key */
#define KEY_SUNDO	0626		/* shifted undo key */
#define KEY_SUSPEND	0627		/* suspend key */
#define KEY_UNDO	0630		/* undo key */
#define KEY_MOUSE	0631		/* Mouse event has occurred */
#define KEY_RESIZE	0632		/* Terminal resize event */
#define KEY_EVENT	0633		/* We were interrupted by an event */

#define KEY_MAX		0777		/* Maximum key value is 0633 */
/* $Id: curses.wide,v 1.34 2007/03/10 17:52:23 tom Exp $ */
/*
 * vile:cmode:
 * This file is part of ncurses, designed to be appended after curses.h.in
 * (see that file for the relevant copyright).
 */
#ifdef _XOPEN_SOURCE_EXTENDED

extern NCURSES_EXPORT_VAR(cchar_t *) _nc_wacs;

#define NCURSES_WACS(c)	(&_nc_wacs[(unsigned char)c])

#define WACS_BSSB	NCURSES_WACS('l')
#define WACS_SSBB	NCURSES_WACS('m')
#define WACS_BBSS	NCURSES_WACS('k')
#define WACS_SBBS	NCURSES_WACS('j')
#define WACS_SBSS	NCURSES_WACS('u')
#define WACS_SSSB	NCURSES_WACS('t')
#define WACS_SSBS	NCURSES_WACS('v')
#define WACS_BSSS	NCURSES_WACS('w')
#define WACS_BSBS	NCURSES_WACS('q')
#define WACS_SBSB	NCURSES_WACS('x')
#define WACS_SSSS	NCURSES_WACS('n')

#define WACS_ULCORNER	WACS_BSSB
#define WACS_LLCORNER	WACS_SSBB
#define WACS_URCORNER	WACS_BBSS
#define WACS_LRCORNER	WACS_SBBS
#define WACS_RTEE	WACS_SBSS
#define WACS_LTEE	WACS_SSSB
#define WACS_BTEE	WACS_SSBS
#define WACS_TTEE	WACS_BSSS
#define WACS_HLINE	WACS_BSBS
#define WACS_VLINE	WACS_SBSB
#define WACS_PLUS	WACS_SSSS

#define WACS_S1		NCURSES_WACS('o') /* scan line 1 */
#define WACS_S9 	NCURSES_WACS('s') /* scan line 9 */
#define WACS_DIAMOND	NCURSES_WACS('`') /* diamond */
#define WACS_CKBOARD	NCURSES_WACS('a') /* checker board */
#define WACS_DEGREE	NCURSES_WACS('f') /* degree symbol */
#define WACS_PLMINUS	NCURSES_WACS('g') /* plus/minus */
#define WACS_BULLET	NCURSES_WACS('~') /* bullet */

	/* Teletype 5410v1 symbols */
#define WACS_LARROW	NCURSES_WACS(',') /* arrow left */
#define WACS_RARROW	NCURSES_WACS('+') /* arrow right */
#define WACS_DARROW	NCURSES_WACS('.') /* arrow down */
#define WACS_UARROW	NCURSES_WACS('-') /* arrow up */
#define WACS_BOARD	NCURSES_WACS('h') /* board of squares */
#define WACS_LANTERN	NCURSES_WACS('i') /* lantern symbol */
#define WACS_BLOCK	NCURSES_WACS('0') /* solid square block */

	/* ncurses extensions */
#define WACS_S3		NCURSES_WACS('p') /* scan line 3 */
#define WACS_S7		NCURSES_WACS('r') /* scan line 7 */
#define WACS_LEQUAL	NCURSES_WACS('y') /* less/equal */
#define WACS_GEQUAL	NCURSES_WACS('z') /* greater/equal */
#define WACS_PI		NCURSES_WACS('{') /* Pi */
#define WACS_NEQUAL	NCURSES_WACS('|') /* not equal */
#define WACS_STERLING	NCURSES_WACS('}') /* UK pound sign */

/*
 * Function prototypes for wide-character operations.
 *
 * "generated" comments should include ":WIDEC" to make the corresponding
 * functions ifdef'd in lib_gen.c
 *
 * "implemented" comments do not need this marker.
 */

extern NCURSES_EXPORT(int) add_wch (const cchar_t *);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) add_wchnstr (const cchar_t *, int);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) add_wchstr (const cchar_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) addnwstr (const wchar_t *, int);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) addwstr (const wchar_t *);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) bkgrnd (const cchar_t *);			/* generated:WIDEC */
extern NCURSES_EXPORT(void) bkgrndset (const cchar_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) border_set (const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*); /* generated:WIDEC */
extern NCURSES_EXPORT(int) box_set (WINDOW *, const cchar_t *, const cchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) echo_wchar (const cchar_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) erasewchar (wchar_t*);			/* implemented */
extern NCURSES_EXPORT(int) get_wch (wint_t *);				/* generated:WIDEC */
extern NCURSES_EXPORT(int) get_wstr (wint_t *);				/* generated:WIDEC */
extern NCURSES_EXPORT(int) getbkgrnd (cchar_t *);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) getcchar (const cchar_t *, wchar_t*, attr_t*, short*, void*);	/* implemented */
extern NCURSES_EXPORT(int) getn_wstr (wint_t *, int);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) hline_set (const cchar_t *, int);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) in_wch (cchar_t *);				/* generated:WIDEC */
extern NCURSES_EXPORT(int) in_wchnstr (cchar_t *, int);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) in_wchstr (cchar_t *);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) innwstr (wchar_t *, int);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) ins_nwstr (const wchar_t *, int);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) ins_wch (const cchar_t *);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) ins_wstr (const wchar_t *);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) inwstr (wchar_t *);				/* generated:WIDEC */
extern NCURSES_EXPORT(NCURSES_CONST char*) key_name (wchar_t);		/* implemented */
extern NCURSES_EXPORT(int) killwchar (wchar_t *);			/* implemented */
extern NCURSES_EXPORT(int) mvadd_wch (int, int, const cchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvadd_wchnstr (int, int, const cchar_t *, int);/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvadd_wchstr (int, int, const cchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvaddnwstr (int, int, const wchar_t *, int);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvaddwstr (int, int, const wchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvget_wch (int, int, wint_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvget_wstr (int, int, wint_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvgetn_wstr (int, int, wint_t *, int);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvhline_set (int, int, const cchar_t *, int);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvin_wch (int, int, cchar_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvin_wchnstr (int, int, cchar_t *, int);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvin_wchstr (int, int, cchar_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvinnwstr (int, int, wchar_t *, int);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvins_nwstr (int, int, const wchar_t *, int);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvins_wch (int, int, const cchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvins_wstr (int, int, const wchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvinwstr (int, int, wchar_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvvline_set (int, int, const cchar_t *, int);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwadd_wch (WINDOW *, int, int, const cchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwadd_wchnstr (WINDOW *, int, int, const cchar_t *, int); /* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwadd_wchstr (WINDOW *, int, int, const cchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwaddnwstr (WINDOW *, int, int, const wchar_t *, int);/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwaddwstr (WINDOW *, int, int, const wchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwget_wch (WINDOW *, int, int, wint_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwget_wstr (WINDOW *, int, int, wint_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwgetn_wstr (WINDOW *, int, int, wint_t *, int);/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwhline_set (WINDOW *, int, int, const cchar_t *, int);/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwin_wch (WINDOW *, int, int, cchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwin_wchnstr (WINDOW *, int,int, cchar_t *,int);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwin_wchstr (WINDOW *, int, int, cchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwinnwstr (WINDOW *, int, int, wchar_t *, int);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwins_nwstr (WINDOW *, int,int, const wchar_t *,int); /* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwins_wch (WINDOW *, int, int, const cchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwins_wstr (WINDOW *, int, int, const wchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwinwstr (WINDOW *, int, int, wchar_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) mvwvline_set (WINDOW *, int,int, const cchar_t *,int); /* generated:WIDEC */
extern NCURSES_EXPORT(int) pecho_wchar (WINDOW *, const cchar_t *);	/* implemented */
extern NCURSES_EXPORT(int) setcchar (cchar_t *, const wchar_t *, const attr_t, short, const void *);	/* implemented */
extern NCURSES_EXPORT(int) slk_wset (int, const wchar_t *, int);	/* implemented */
extern NCURSES_EXPORT(attr_t) term_attrs (void);			/* implemented */
extern NCURSES_EXPORT(int) unget_wch (const wchar_t);			/* implemented */
extern NCURSES_EXPORT(int) vid_attr (attr_t, short, void *);		/* implemented */
extern NCURSES_EXPORT(int) vid_puts (attr_t, short, void *, int (*)(int)); /* implemented */
extern NCURSES_EXPORT(int) vline_set (const cchar_t *, int);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) wadd_wch (WINDOW *,const cchar_t *);		/* implemented */
extern NCURSES_EXPORT(int) wadd_wchnstr (WINDOW *,const cchar_t *,int);	/* implemented */
extern NCURSES_EXPORT(int) wadd_wchstr (WINDOW *,const cchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) waddnwstr (WINDOW *,const wchar_t *,int);	/* implemented */
extern NCURSES_EXPORT(int) waddwstr (WINDOW *,const wchar_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) wbkgrnd (WINDOW *,const cchar_t *);		/* implemented */
extern NCURSES_EXPORT(void) wbkgrndset (WINDOW *,const cchar_t *);	/* implemented */
extern NCURSES_EXPORT(int) wborder_set (WINDOW *,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*);	/* implemented */
extern NCURSES_EXPORT(int) wecho_wchar (WINDOW *, const cchar_t *);	/* implemented */
extern NCURSES_EXPORT(int) wget_wch (WINDOW *, wint_t *);		/* implemented */
extern NCURSES_EXPORT(int) wget_wstr (WINDOW *, wint_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) wgetbkgrnd (WINDOW *, cchar_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) wgetn_wstr (WINDOW *,wint_t *, int);		/* implemented */
extern NCURSES_EXPORT(int) whline_set (WINDOW *, const cchar_t *, int);	/* implemented */
extern NCURSES_EXPORT(int) win_wch (WINDOW *, cchar_t *);		/* implemented */
extern NCURSES_EXPORT(int) win_wchnstr (WINDOW *, cchar_t *, int);	/* implemented */
extern NCURSES_EXPORT(int) win_wchstr (WINDOW *, cchar_t *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) winnwstr (WINDOW *, wchar_t *, int);		/* implemented */
extern NCURSES_EXPORT(int) wins_nwstr (WINDOW *, const wchar_t *, int);	/* implemented */
extern NCURSES_EXPORT(int) wins_wch (WINDOW *, const cchar_t *);	/* implemented */
extern NCURSES_EXPORT(int) wins_wstr (WINDOW *, const wchar_t *);	/* generated:WIDEC */
extern NCURSES_EXPORT(int) winwstr (WINDOW *, wchar_t *);		/* implemented */
extern NCURSES_EXPORT(wchar_t*) wunctrl (cchar_t *);			/* implemented */
extern NCURSES_EXPORT(int) wvline_set (WINDOW *, const cchar_t *, int);	/* implemented */

#ifndef NCURSES_NOMACROS

/*
 * XSI curses macros for XPG4 conformance.
 */
#define add_wch(c)			wadd_wch(stdscr,c)
#define add_wchnstr(str,n)		wadd_wchnstr(stdscr,str,n)
#define add_wchstr(str)			wadd_wchstr(stdscr,str)
#define addnwstr(wstr,n)		waddnwstr(stdscr,wstr,n)
#define addwstr(wstr)			waddwstr(stdscr,wstr)
#define bkgrnd(c)			wbkgrnd(stdscr,c)
#define bkgrndset(c)			wbkgrndset(stdscr,c)
#define border_set(l,r,t,b,tl,tr,bl,br) wborder_set(stdscr,l,r,t,b,tl,tr,bl,br)
#define box_set(w,v,h)			wborder_set(w,v,v,h,h,0,0,0,0)
#define echo_wchar(c)			wecho_wchar(stdscr,c)
#define get_wch(c)			wget_wch(stdscr,c)
#define get_wstr(t)			wget_wstr(stdscr,t)
#define getbkgrnd(wch)			wgetbkgrnd(stdscr,wch)
#define getn_wstr(t,n)			wgetn_wstr(stdscr,t,n)
#define hline_set(c,n)			whline_set(stdscr,c,n)
#define in_wch(c)			win_wch(stdscr,c)
#define in_wchnstr(c,n)			win_wchnstr(stdscr,c,n)
#define in_wchstr(c)			win_wchstr(stdscr,c)
#define innwstr(c,n)			winnwstr(stdscr,c,n)
#define ins_nwstr(t,n)			wins_nwstr(stdscr,t,n)
#define ins_wch(c)			wins_wch(stdscr,c)
#define ins_wstr(t)			wins_wstr(stdscr,t)
#define inwstr(c)			winwstr(stdscr,c)
#define vline_set(c,n)			wvline_set(stdscr,c,n)
#define wadd_wchstr(win,str)		wadd_wchnstr(win,str,-1)
#define waddwstr(win,wstr)		waddnwstr(win,wstr,-1)
#define wget_wstr(w,t)			wgetn_wstr(w,t,-1)
#define win_wchstr(w,c)			win_wchnstr(w,c,-1)
#define wins_wstr(w,t)			wins_nwstr(w,t,-1)

#if !NCURSES_OPAQUE
#define wgetbkgrnd(win,wch)		(*wch = win->_bkgrnd, OK)
#endif

#define mvadd_wch(y,x,c)		mvwadd_wch(stdscr,y,x,c)
#define mvadd_wchnstr(y,x,s,n)		mvwadd_wchnstr(stdscr,y,x,s,n)
#define mvadd_wchstr(y,x,s)		mvwadd_wchstr(stdscr,y,x,s)
#define mvaddnwstr(y,x,wstr,n)		mvwaddnwstr(stdscr,y,x,wstr,n)
#define mvaddwstr(y,x,wstr)		mvwaddwstr(stdscr,y,x,wstr)
#define mvget_wch(y,x,c)		mvwget_wch(stdscr,y,x,c)
#define mvget_wstr(y,x,t)		mvwget_wstr(stdscr,y,x,t)
#define mvgetn_wstr(y,x,t,n)		mvwgetn_wstr(stdscr,y,x,t,n)
#define mvhline_set(y,x,c,n)		mvwhline_set(stdscr,y,x,c,n)
#define mvin_wch(y,x,c)			mvwin_wch(stdscr,y,x,c)
#define mvin_wchnstr(y,x,c,n)		mvwin_wchnstr(stdscr,y,x,c,n)
#define mvin_wchstr(y,x,c)		mvwin_wchstr(stdscr,y,x,c)
#define mvinnwstr(y,x,c,n)		mvwinnwstr(stdscr,y,x,c,n)
#define mvins_nwstr(y,x,t,n)		mvwins_nwstr(stdscr,y,x,t,n)
#define mvins_wch(y,x,c)		mvwins_wch(stdscr,y,x,c)
#define mvins_wstr(y,x,t)		mvwins_wstr(stdscr,y,x,t)
#define mvinwstr(y,x,c)			mvwinwstr(stdscr,y,x,c)
#define mvvline_set(y,x,c,n)		mvwvline_set(stdscr,y,x,c,n)

#define mvwadd_wch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : wadd_wch(win,c))
#define mvwadd_wchnstr(win,y,x,s,n)	(wmove(win,y,x) == ERR ? ERR : wadd_wchnstr(win,s,n))
#define mvwadd_wchstr(win,y,x,s)	(wmove(win,y,x) == ERR ? ERR : wadd_wchstr(win,s))
#define mvwaddnwstr(win,y,x,wstr,n)	(wmove(win,y,x) == ERR ? ERR : waddnwstr(win,wstr,n))
#define mvwaddwstr(win,y,x,wstr)	(wmove(win,y,x) == ERR ? ERR : waddwstr(win,wstr))
#define mvwget_wch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : wget_wch(win,c))
#define mvwget_wstr(win,y,x,t)		(wmove(win,y,x) == ERR ? ERR : wget_wstr(win,t))
#define mvwgetn_wstr(win,y,x,t,n)	(wmove(win,y,x) == ERR ? ERR : wgetn_wstr(win,t,n))
#define mvwhline_set(win,y,x,c,n)	(wmove(win,y,x) == ERR ? ERR : whline_set(win,c,n))
#define mvwin_wch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : win_wch(win,c))
#define mvwin_wchnstr(win,y,x,c,n)	(wmove(win,y,x) == ERR ? ERR : win_wchnstr(win,c,n))
#define mvwin_wchstr(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : win_wchstr(win,c))
#define mvwinnwstr(win,y,x,c,n)		(wmove(win,y,x) == ERR ? ERR : winnwstr(win,c,n))
#define mvwins_nwstr(win,y,x,t,n)	(wmove(win,y,x) == ERR ? ERR : wins_nwstr(win,t,n))
#define mvwins_wch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : wins_wch(win,c))
#define mvwins_wstr(win,y,x,t)		(wmove(win,y,x) == ERR ? ERR : wins_wstr(win,t))
#define mvwinwstr(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : winwstr(win,c))
#define mvwvline_set(win,y,x,c,n)	(wmove(win,y,x) == ERR ? ERR : wvline_set(win,c,n))

#endif /* NCURSES_NOMACROS */

#if defined(TRACE) || defined(NCURSES_TEST)
extern NCURSES_EXPORT(const char *) _nc_viswbuf(const wchar_t *);
extern NCURSES_EXPORT(const char *) _nc_viswibuf(const wint_t *);
#endif

#endif /* _XOPEN_SOURCE_EXTENDED */
/* $Id: curses.h,v 1.60 2010/01/12 23:21:59 nicm Exp $ */
/*
 * vile:cmode:
 * This file is part of ncurses, designed to be appended after curses.h.in
 * (see that file for the relevant copyright).
 */

/* mouse interface */

#if NCURSES_MOUSE_VERSION > 1
#define NCURSES_MOUSE_MASK(b,m) ((m) << (((b) - 1) * 5))
#else
#define NCURSES_MOUSE_MASK(b,m) ((m) << (((b) - 1) * 6))
#endif

#define	NCURSES_BUTTON_RELEASED	001L
#define	NCURSES_BUTTON_PRESSED	002L
#define	NCURSES_BUTTON_CLICKED	004L
#define	NCURSES_DOUBLE_CLICKED	010L
#define	NCURSES_TRIPLE_CLICKED	020L
#define	NCURSES_RESERVED_EVENT	040L

/* event masks */
#define	BUTTON1_RELEASED	NCURSES_MOUSE_MASK(1, NCURSES_BUTTON_RELEASED)
#define	BUTTON1_PRESSED		NCURSES_MOUSE_MASK(1, NCURSES_BUTTON_PRESSED)
#define	BUTTON1_CLICKED		NCURSES_MOUSE_MASK(1, NCURSES_BUTTON_CLICKED)
#define	BUTTON1_DOUBLE_CLICKED	NCURSES_MOUSE_MASK(1, NCURSES_DOUBLE_CLICKED)
#define	BUTTON1_TRIPLE_CLICKED	NCURSES_MOUSE_MASK(1, NCURSES_TRIPLE_CLICKED)

#define	BUTTON2_RELEASED	NCURSES_MOUSE_MASK(2, NCURSES_BUTTON_RELEASED)
#define	BUTTON2_PRESSED		NCURSES_MOUSE_MASK(2, NCURSES_BUTTON_PRESSED)
#define	BUTTON2_CLICKED		NCURSES_MOUSE_MASK(2, NCURSES_BUTTON_CLICKED)
#define	BUTTON2_DOUBLE_CLICKED	NCURSES_MOUSE_MASK(2, NCURSES_DOUBLE_CLICKED)
#define	BUTTON2_TRIPLE_CLICKED	NCURSES_MOUSE_MASK(2, NCURSES_TRIPLE_CLICKED)

#define	BUTTON3_RELEASED	NCURSES_MOUSE_MASK(3, NCURSES_BUTTON_RELEASED)
#define	BUTTON3_PRESSED		NCURSES_MOUSE_MASK(3, NCURSES_BUTTON_PRESSED)
#define	BUTTON3_CLICKED		NCURSES_MOUSE_MASK(3, NCURSES_BUTTON_CLICKED)
#define	BUTTON3_DOUBLE_CLICKED	NCURSES_MOUSE_MASK(3, NCURSES_DOUBLE_CLICKED)
#define	BUTTON3_TRIPLE_CLICKED	NCURSES_MOUSE_MASK(3, NCURSES_TRIPLE_CLICKED)

#define	BUTTON4_RELEASED	NCURSES_MOUSE_MASK(4, NCURSES_BUTTON_RELEASED)
#define	BUTTON4_PRESSED		NCURSES_MOUSE_MASK(4, NCURSES_BUTTON_PRESSED)
#define	BUTTON4_CLICKED		NCURSES_MOUSE_MASK(4, NCURSES_BUTTON_CLICKED)
#define	BUTTON4_DOUBLE_CLICKED	NCURSES_MOUSE_MASK(4, NCURSES_DOUBLE_CLICKED)
#define	BUTTON4_TRIPLE_CLICKED	NCURSES_MOUSE_MASK(4, NCURSES_TRIPLE_CLICKED)

/*
 * In 32 bits the version-1 scheme does not provide enough space for a 5th
 * button, unless we choose to change the ABI by omitting the reserved-events.
 */
#if NCURSES_MOUSE_VERSION > 1

#define	BUTTON5_RELEASED	NCURSES_MOUSE_MASK(5, NCURSES_BUTTON_RELEASED)
#define	BUTTON5_PRESSED		NCURSES_MOUSE_MASK(5, NCURSES_BUTTON_PRESSED)
#define	BUTTON5_CLICKED		NCURSES_MOUSE_MASK(5, NCURSES_BUTTON_CLICKED)
#define	BUTTON5_DOUBLE_CLICKED	NCURSES_MOUSE_MASK(5, NCURSES_DOUBLE_CLICKED)
#define	BUTTON5_TRIPLE_CLICKED	NCURSES_MOUSE_MASK(5, NCURSES_TRIPLE_CLICKED)

#define	BUTTON_CTRL		NCURSES_MOUSE_MASK(6, 0001L)
#define	BUTTON_SHIFT		NCURSES_MOUSE_MASK(6, 0002L)
#define	BUTTON_ALT		NCURSES_MOUSE_MASK(6, 0004L)
#define	REPORT_MOUSE_POSITION	NCURSES_MOUSE_MASK(6, 0010L)

#else

#define	BUTTON1_RESERVED_EVENT	NCURSES_MOUSE_MASK(1, NCURSES_RESERVED_EVENT)
#define	BUTTON2_RESERVED_EVENT	NCURSES_MOUSE_MASK(2, NCURSES_RESERVED_EVENT)
#define	BUTTON3_RESERVED_EVENT	NCURSES_MOUSE_MASK(3, NCURSES_RESERVED_EVENT)
#define	BUTTON4_RESERVED_EVENT	NCURSES_MOUSE_MASK(4, NCURSES_RESERVED_EVENT)

#define	BUTTON_CTRL		NCURSES_MOUSE_MASK(5, 0001L)
#define	BUTTON_SHIFT		NCURSES_MOUSE_MASK(5, 0002L)
#define	BUTTON_ALT		NCURSES_MOUSE_MASK(5, 0004L)
#define	REPORT_MOUSE_POSITION	NCURSES_MOUSE_MASK(5, 0010L)

#endif

#define	ALL_MOUSE_EVENTS	(REPORT_MOUSE_POSITION - 1)

/* macros to extract single event-bits from masks */
#define	BUTTON_RELEASE(e, x)		((e) & NCURSES_MOUSE_MASK(x, 001))
#define	BUTTON_PRESS(e, x)		((e) & NCURSES_MOUSE_MASK(x, 002))
#define	BUTTON_CLICK(e, x)		((e) & NCURSES_MOUSE_MASK(x, 004))
#define	BUTTON_DOUBLE_CLICK(e, x)	((e) & NCURSES_MOUSE_MASK(x, 010))
#define	BUTTON_TRIPLE_CLICK(e, x)	((e) & NCURSES_MOUSE_MASK(x, 020))
#define	BUTTON_RESERVED_EVENT(e, x)	((e) & NCURSES_MOUSE_MASK(x, 040))

typedef struct
{
    short id;		/* ID to distinguish multiple devices */
    int x, y, z;	/* event coordinates (character-cell) */
    mmask_t bstate;	/* button state bits */
}
MEVENT;

extern NCURSES_EXPORT(int) getmouse (MEVENT *);
extern NCURSES_EXPORT(int) ungetmouse (MEVENT *);
extern NCURSES_EXPORT(mmask_t) mousemask (mmask_t, mmask_t *);
extern NCURSES_EXPORT(bool) wenclose (const WINDOW *, int, int);
extern NCURSES_EXPORT(int) mouseinterval (int);
extern NCURSES_EXPORT(bool) wmouse_trafo (const WINDOW*, int*, int*, bool);
extern NCURSES_EXPORT(bool) mouse_trafo (int*, int*, bool);              /* generated */

#define mouse_trafo(y,x,to_screen) wmouse_trafo(stdscr,y,x,to_screen)

/* other non-XSI functions */

extern NCURSES_EXPORT(int) mcprint (char *, int);	/* direct data to printer */
extern NCURSES_EXPORT(int) has_key (int);		/* do we have given key? */

/* Debugging : use with libncurses_g.a */

extern NCURSES_EXPORT(void) _tracef (const char *, ...) GCC_PRINTFLIKE(1,2);
extern NCURSES_EXPORT(void) _tracedump (const char *, WINDOW *);
extern NCURSES_EXPORT(char *) _traceattr (attr_t);
extern NCURSES_EXPORT(char *) _traceattr2 (int, chtype);
extern NCURSES_EXPORT(char *) _nc_tracebits (void);
extern NCURSES_EXPORT(char *) _tracechar (int);
extern NCURSES_EXPORT(char *) _tracechtype (chtype);
extern NCURSES_EXPORT(char *) _tracechtype2 (int, chtype);
#ifdef _XOPEN_SOURCE_EXTENDED
#define _tracech_t		_tracecchar_t
extern NCURSES_EXPORT(char *) _tracecchar_t (const cchar_t *);
#define _tracech_t2		_tracecchar_t2
extern NCURSES_EXPORT(char *) _tracecchar_t2 (int, const cchar_t *);
#else
#define _tracech_t		_tracechtype
#define _tracech_t2		_tracechtype2
#endif
extern NCURSES_EXPORT(char *) _tracemouse (const MEVENT *);
extern NCURSES_EXPORT(void) trace (const unsigned int);

/* trace masks */
#define TRACE_DISABLE	0x0000	/* turn off tracing */
#define TRACE_TIMES	0x0001	/* trace user and system times of updates */
#define TRACE_TPUTS	0x0002	/* trace tputs calls */
#define TRACE_UPDATE	0x0004	/* trace update actions, old & new screens */
#define TRACE_MOVE	0x0008	/* trace cursor moves and scrolls */
#define TRACE_CHARPUT	0x0010	/* trace all character outputs */
#define TRACE_ORDINARY	0x001F	/* trace all update actions */
#define TRACE_CALLS	0x0020	/* trace all curses calls */
#define TRACE_VIRTPUT	0x0040	/* trace virtual character puts */
#define TRACE_IEVENT	0x0080	/* trace low-level input processing */
#define TRACE_BITS	0x0100	/* trace state of TTY control bits */
#define TRACE_ICALLS	0x0200	/* trace internal/nested calls */
#define TRACE_CCALLS	0x0400	/* trace per-character calls */
#define TRACE_DATABASE	0x0800	/* trace read/write of terminfo/termcap data */
#define TRACE_ATTRS	0x1000	/* trace attribute updates */

#define TRACE_SHIFT	13	/* number of bits in the trace masks */
#define TRACE_MAXIMUM	((1 << TRACE_SHIFT) - 1) /* maximum trace level */

#if defined(TRACE) || defined(NCURSES_TEST)
extern NCURSES_EXPORT_VAR(int) _nc_optimize_enable;		/* enable optimizations */
extern NCURSES_EXPORT(const char *) _nc_visbuf (const char *);
#define OPTIMIZE_MVCUR		0x01	/* cursor movement optimization */
#define OPTIMIZE_HASHMAP	0x02	/* diff hashing to detect scrolls */
#define OPTIMIZE_SCROLL		0x04	/* scroll optimization */
#define OPTIMIZE_ALL		0xff	/* enable all optimizations (dflt) */
#endif

#ifdef __cplusplus

#ifndef NCURSES_NOMACROS

/* these names conflict with STL */
#undef box
#undef clear
#undef erase
#undef move
#undef refresh

#endif /* NCURSES_NOMACROS */

}
#endif

#endif /* __NCURSES_H */
@


1.60
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d37 1
a37 1
/* $Id: curses.h.in,v 1.187 2008/08/30 20:11:29 tom Exp $ */
d140 1
a140 1
#define NCURSES_CH_T chtype
d345 1
a345 1
#if 0
d1337 253
a1589 1
/* $Id: curses.tail,v 1.16 2008/07/05 20:20:38 tom Exp $ */
@


1.59
log
@ncurses-5.2-20010224
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.58 2001/02/22 04:16:34 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999,2000 Free Software Foundation, Inc.              *
d34 1
d37 1
a37 1
/* $From: curses.h.in,v 1.97 2000/12/10 02:00:24 tom Exp $ */
d46 1
a46 1
 * However, none of the wide-character (enhanced) functionality is implemented.
d53 2
a54 2
#define NCURSES_VERSION_MINOR 2
#define NCURSES_VERSION_PATCH 20010224
d58 1
a58 1
#define NCURSES_VERSION "5.2"
d73 16
d90 1
d93 1
d99 4
d106 6
d115 10
d128 21
a148 1
typedef unsigned long chtype;
d157 1
a157 1
/* XSI and SVr4 specify that curses implements 'bool'.  However, C++ may also
d160 7
d175 15
a189 1
#if !defined(__cplusplus)
d191 1
a191 1
typedef unsigned char bool;
d194 2
d198 3
d204 1
a204 1
 * XSI attributes.  In the ncurses implementation, they are identical to the
a225 3
extern NCURSES_EXPORT_VAR(int) COLORS;
extern NCURSES_EXPORT_VAR(int) COLOR_PAIRS;

d237 4
d242 3
d247 18
a264 18
#define ACS_ULCORNER	(acs_map['l'])	/* upper left corner */
#define ACS_LLCORNER	(acs_map['m'])	/* lower left corner */
#define ACS_URCORNER	(acs_map['k'])	/* upper right corner */
#define ACS_LRCORNER	(acs_map['j'])	/* lower right corner */
#define ACS_LTEE	(acs_map['t'])	/* tee pointing right */
#define ACS_RTEE	(acs_map['u'])	/* tee pointing left */
#define ACS_BTEE	(acs_map['v'])	/* tee pointing up */
#define ACS_TTEE	(acs_map['w'])	/* tee pointing down */
#define ACS_HLINE	(acs_map['q'])	/* horizontal line */
#define ACS_VLINE	(acs_map['x'])	/* vertical line */
#define ACS_PLUS	(acs_map['n'])	/* large plus or crossover */
#define ACS_S1		(acs_map['o'])	/* scan line 1 */
#define ACS_S9		(acs_map['s'])	/* scan line 9 */
#define ACS_DIAMOND	(acs_map['`'])	/* diamond */
#define ACS_CKBOARD	(acs_map['a'])	/* checker board (stipple) */
#define ACS_DEGREE	(acs_map['f'])	/* degree symbol */
#define ACS_PLMINUS	(acs_map['g'])	/* plus/minus */
#define ACS_BULLET	(acs_map['~'])	/* bullet */
d266 7
a272 7
#define ACS_LARROW	(acs_map[','])	/* arrow pointing left */
#define ACS_RARROW	(acs_map['+'])	/* arrow pointing right */
#define ACS_DARROW	(acs_map['.'])	/* arrow pointing down */
#define ACS_UARROW	(acs_map['-'])	/* arrow pointing up */
#define ACS_BOARD	(acs_map['h'])	/* board of squares */
#define ACS_LANTERN	(acs_map['i'])	/* lantern symbol */
#define ACS_BLOCK	(acs_map['0'])	/* solid square block */
d278 7
a284 7
#define ACS_S3		(acs_map['p'])	/* scan line 3 */
#define ACS_S7		(acs_map['r'])	/* scan line 7 */
#define ACS_LEQUAL	(acs_map['y'])	/* less/equal */
#define ACS_GEQUAL	(acs_map['z'])	/* greater/equal */
#define ACS_PI		(acs_map['{'])	/* Pi */
#define ACS_NEQUAL	(acs_map['|'])	/* not equal */
#define ACS_STERLING	(acs_map['}'])	/* UK pound sign */
d304 1
a304 1
#if	!defined(ERR) || ((ERR) != -1)
a305 1
#endif
d307 1
a307 1
#if	!defined(OK) || ((OK) != 0)
a308 1
#endif
d337 19
a355 6
#ifndef _WCHAR_T
typedef unsigned long wchar_t;
#endif /* _WCHAR_T */
#ifndef _WINT_T
typedef long int wint_t;
#endif /* _WINT_T */
d362 5
d369 1
d372 2
a373 7
struct ldat
{
	chtype  *text;		/* text of the line */
	NCURSES_SIZE_T firstchar; /* first changed character in the line */
	NCURSES_SIZE_T lastchar; /* last changed character in the line */
	NCURSES_SIZE_T oldindex; /* index of the line at last update */
};
d391 5
a395 5
	bool    _clear;		/* consider all data in the window invalid? */
	bool    _leaveok;	/* OK to not reset cursor on exit? */
	bool    _scroll;	/* OK to scroll this window? */
	bool    _idlok;		/* OK to use insert/delete line? */
	bool    _idcok;		/* OK to use insert/delete char? */
d398 1
a398 1
	bool    _use_keypad;    /* process function keys into KEY_ symbols? */
d421 7
d429 1
d431 9
a439 7
extern NCURSES_EXPORT_VAR(WINDOW *)   stdscr;
extern NCURSES_EXPORT_VAR(WINDOW *)   curscr;
extern NCURSES_EXPORT_VAR(WINDOW *)   newscr;

extern NCURSES_EXPORT_VAR(int)	LINES;
extern NCURSES_EXPORT_VAR(int)	COLS;
extern NCURSES_EXPORT_VAR(int)	TABSIZE;
d442 1
a442 1
 * This global was an undocumented feature under AIX curses.
d444 7
a450 1
extern NCURSES_EXPORT_VAR(int) ESCDELAY;	/* ESC expire time in milliseconds */
d452 14
a465 1
extern NCURSES_EXPORT_VAR(char) ttytype[];	/* needed for backward compatibility */
d467 12
a478 12
/*
 * These functions are extensions - not in XSI Curses.
 */
extern NCURSES_EXPORT(char *) keybound (int, int);
extern NCURSES_EXPORT(const char *) curses_version (void);
extern NCURSES_EXPORT(int) assume_default_colors (int, int);
extern NCURSES_EXPORT(int) define_key (char *, int);
extern NCURSES_EXPORT(int) keyok (int, bool);
extern NCURSES_EXPORT(int) resizeterm (int, int);
extern NCURSES_EXPORT(int) use_default_colors (void);
extern NCURSES_EXPORT(int) use_extended_names (bool);
extern NCURSES_EXPORT(int) wresize (WINDOW *, int, int);
d484 2
a485 1
 * G++ doesn't accept it anyway.
d487 1
a487 1
#if !defined(__GNUC__) && !defined(__attribute__)
a491 11
 * For g++, turn off our macros that use __attribute__ (g++ recognizes some
 * of them, but not at the same version levels as gcc).
 */
#ifdef __cplusplus
#undef GCC_NORETURN
#undef GCC_PRINTF
#undef GCC_SCANF
#undef GCC_UNUSED
#endif

/*
d493 5
a497 1
 * passed (that's non-portable).
d499 2
a500 1
#ifdef	GCC_PRINTF
d505 1
d507 2
a508 1
#ifdef	GCC_SCANF
d513 1
d524 1
a524 1
 * Function prototypes.  This is the complete XSI Curses list of required
a534 7
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) addnwstr (const wchar_t *, int);		/* missing */
extern NCURSES_EXPORT(int) addwstr (const wchar_t *);			/* missing */
extern NCURSES_EXPORT(int) add_wch (const cchar_t *);			/* missing */
extern NCURSES_EXPORT(int) add_wchnstr (const cchar_t *, int);		/* missing */
extern NCURSES_EXPORT(int) add_wchstr (const cchar_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a545 4
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(void) bkgrndset (const cchar_t *);		/* missing */
extern NCURSES_EXPORT(int) bkgrnd (const cchar_t *);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a546 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) border_set (const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a547 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) box_set (WINDOW *, const cchar_t *, const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a572 4
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) echo_wchar (const cchar_t *);		/* missing */
extern NCURSES_EXPORT(int) erasewchar (wchar_t*);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a578 4
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) getbkgrnd (cchar_t *);			/* missing */
extern NCURSES_EXPORT(int) getcchar (const cchar_t *, wchar_t*, attr_t*, short*, void*);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a580 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) getn_wstr (wint_t *, int);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a581 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) get_wch (wint_t *);				/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a582 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) get_wstr (wint_t *);				/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a587 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) hline_set (const cchar_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a597 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) innwstr (wchar_t *, int);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a603 5
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) ins_nwstr (const wchar_t *, int);		/* missing */
extern NCURSES_EXPORT(int) ins_wch (const cchar_t *);			/* missing */
extern NCURSES_EXPORT(int) ins_wstr (const wchar_t *);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a604 6
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) inwstr (wchar_t *);				/* missing */
extern NCURSES_EXPORT(int) in_wch (NCURSES_CONST cchar_t *);		/* missing */
extern NCURSES_EXPORT(int) in_wchstr (NCURSES_CONST cchar_t *);		/* missing */
extern NCURSES_EXPORT(int) in_wchnstr (NCURSES_CONST cchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a608 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(char *) key_name (wchar_t);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a610 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) killwchar (wchar_t *);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a619 7
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvaddnwstr (int, int, const wchar_t *, int);	/* missing */
extern NCURSES_EXPORT(int) mvaddwstr (int, int, const wchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvadd_wch (int, int, const cchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvadd_wchnstr (int, int, const cchar_t *, int);/* missing */
extern NCURSES_EXPORT(int) mvadd_wchstr (int, int, const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a625 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvgetn_wstr (int, int, wint_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a626 6
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvget_wch (int, int, wint_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvget_wstr (int, int, wint_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a627 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvhline_set (int, int, const cchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a631 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvinnwstr (int, int, wchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d636 1
a636 10
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvins_nwstr (int, int, const wchar_t *, int);	/* missing */
extern NCURSES_EXPORT(int) mvins_wch (int, int, const cchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvins_wstr (int, int, const wchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvinwstr (int, int, wchar_t *);		/* missing */
extern NCURSES_EXPORT(int) mvin_wch (int, int, NCURSES_CONST cchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvin_wchstr (int, int, NCURSES_CONST cchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvin_wchnstr (int, int, NCURSES_CONST cchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern NCURSES_EXPORT(int) mvprintw (int,int, NCURSES_CONST char *,...)	/* implemented */
a640 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvvline_set (int, int, const cchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a645 7
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvwaddnwstr (WINDOW *, int, int, const wchar_t *, int);/* missing */
extern NCURSES_EXPORT(int) mvwaddwstr (WINDOW *, int, int, const wchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvwadd_wch (WINDOW *, int, int, const cchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvwadd_wchnstr (WINDOW *, int, int, const cchar_t *, int); /* missing */
extern NCURSES_EXPORT(int) mvwadd_wchstr (WINDOW *, int, int, const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a649 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvwgetn_wstr (WINDOW *, int, int, wint_t *, int);/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a650 6
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvwget_wch (WINDOW *, int, int, wint_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvwget_wstr (WINDOW *, int, int, wint_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a651 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvwhline_set (WINDOW *, int, int, const cchar_t *, int);/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a656 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvwinnwstr (WINDOW *, int, int, wchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d661 1
a661 10
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvwins_nwstr (WINDOW *, int,int, const wchar_t *,int); /* missing */
extern NCURSES_EXPORT(int) mvwins_wch (WINDOW *, int, int, const cchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvwins_wstr (WINDOW *, int, int, const wchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvwinwstr (WINDOW *, int, int, wchar_t *);		/* missing */
extern NCURSES_EXPORT(int) mvwin_wch (WINDOW *, int, int, NCURSES_CONST cchar_t *);	/* missing */
extern NCURSES_EXPORT(int) mvwin_wchnstr (WINDOW *, int,int, NCURSES_CONST cchar_t *,int); /* missing */
extern NCURSES_EXPORT(int) mvwin_wchstr (WINDOW *, int, int, NCURSES_CONST cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern NCURSES_EXPORT(int) mvwprintw (WINDOW*,int,int, NCURSES_CONST char *,...)	/* implemented */
a665 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) mvwvline_set (WINDOW *, int,int, const cchar_t *,int); /* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a682 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) pecho_wchar (WINDOW *, const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d685 1
a685 1
extern NCURSES_EXPORT(int) printw (NCURSES_CONST char *,...)		/* implemented */
a686 1
extern NCURSES_EXPORT(int) putp (const char *);				/* implemented */
d695 1
a695 1
extern NCURSES_EXPORT(int) ripoffline (int, int (*init)(WINDOW *, int));	/* implemented */
a705 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) setcchar (cchar_t *, const wchar_t *, const attr_t, short, const void *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a723 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) slk_wset (int, const wchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d728 1
a728 1
extern NCURSES_EXPORT(WINDOW *) subwin (WINDOW *,int,int,int,int);	/* implemented */
a730 1
extern NCURSES_EXPORT(attr_t) term_attrs (void);			/* missing */
a731 3
extern NCURSES_EXPORT(int) tigetflag (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(int) tigetnum (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(char *) tigetstr (NCURSES_CONST char *);		/* implemented */
a734 1
extern NCURSES_EXPORT(char *) tparm (NCURSES_CONST char *, ...);	/* implemented */
a736 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) unget_wch (const wchar_t);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a739 1
extern NCURSES_EXPORT(int) vid_attr (attr_t, short, void *);		/* generated:WIDEC */
a740 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) vid_puts (attr_t, short, void *, int (*)(int)); /* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d742 2
a743 5
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) vline_set (const cchar_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern NCURSES_EXPORT(int) vwprintw (WINDOW *, NCURSES_CONST char *,va_list);	/* implemented */
extern NCURSES_EXPORT(int) vw_printw (WINDOW *, NCURSES_CONST char *,va_list);	/* generated */
d747 1
a747 1
extern NCURSES_EXPORT(int) waddchnstr (WINDOW *,const chtype *const,int); /* implemented */
d749 1
a749 1
extern NCURSES_EXPORT(int) waddnstr (WINDOW *,const char *const,int);	/* implemented */
a750 7
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) waddwstr (WINDOW *,const wchar_t *);		/* missing */
extern NCURSES_EXPORT(int) waddnwstr (WINDOW *,const wchar_t *,int);	/* missing */
extern NCURSES_EXPORT(int) wadd_wch (WINDOW *,const cchar_t *);		/* missing */
extern NCURSES_EXPORT(int) wadd_wchnstr (WINDOW *,const cchar_t *,int);	/* missing */
extern NCURSES_EXPORT(int) wadd_wchstr (WINDOW *,const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d755 4
a758 4
extern NCURSES_EXPORT(int) wattr_on (WINDOW *, NCURSES_CONST attr_t, void *);	/* implemented */
extern NCURSES_EXPORT(int) wattr_off (WINDOW *, NCURSES_CONST attr_t, void *);	/* implemented */
extern NCURSES_EXPORT(int) wattr_set (WINDOW *, attr_t, short, void *);		/* generated */
extern NCURSES_EXPORT(int) wbkgd (WINDOW *,const chtype);		/* implemented */
a759 4
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(void) wbkgrndset (WINDOW *,const cchar_t *);	/* missing */
extern NCURSES_EXPORT(int) wbkgrnd (WINDOW *,const cchar_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a760 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) wborder_set (WINDOW *,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a769 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) wecho_wchar (WINDOW *, const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a770 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) wgetbkgrnd (WINDOW *, cchar_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a772 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) wgetn_wstr (WINDOW *,wint_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a773 4
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) wget_wch (WINDOW *, wint_t *);		/* missing */
extern NCURSES_EXPORT(int) wget_wstr (WINDOW *, wint_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a774 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) whline_set (WINDOW *, const cchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a778 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) winnwstr (WINDOW *, wchar_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a784 9
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) wins_nwstr (WINDOW *, const wchar_t *, int);	/* missing */
extern NCURSES_EXPORT(int) wins_wch (WINDOW *, const cchar_t *);	/* missing */
extern NCURSES_EXPORT(int) wins_wstr (WINDOW *, const wchar_t *);	/* missing */
extern NCURSES_EXPORT(int) winwstr (WINDOW *, wchar_t *);		/* missing */
extern NCURSES_EXPORT(int) win_wch (WINDOW *, NCURSES_CONST cchar_t *);	/* missing */
extern NCURSES_EXPORT(int) win_wchnstr (WINDOW *, NCURSES_CONST cchar_t *, int);	/* missing */
extern NCURSES_EXPORT(int) win_wchstr (WINDOW *, NCURSES_CONST cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d787 1
a787 1
extern NCURSES_EXPORT(int) wprintw (WINDOW *, NCURSES_CONST char *,...)	/* implemented */
a800 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(wchar_t *) wunctrl (cchar_t *);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
a801 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern NCURSES_EXPORT(int) wvline_set (WINDOW *, const cchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d803 34
a836 1
extern NCURSES_EXPORT(bool) mouse_trafo (int*, int*, bool);              /* generated */
d838 26
a863 1
/* attributes */
d865 16
a880 1
#define NCURSES_BITS(mask,shift) ((mask) << ((shift) + 8))
a881 24
#define A_NORMAL	0L
#define A_ATTRIBUTES	NCURSES_BITS(~(1UL - 1UL),0)
#define A_CHARTEXT	(NCURSES_BITS(1UL,0) - 1UL)
#define A_COLOR		NCURSES_BITS(((1UL) << 8) - 1UL,0)
#define A_STANDOUT	NCURSES_BITS(1UL,8)
#define A_UNDERLINE	NCURSES_BITS(1UL,9)
#define A_REVERSE	NCURSES_BITS(1UL,10)
#define A_BLINK		NCURSES_BITS(1UL,11)
#define A_DIM		NCURSES_BITS(1UL,12)
#define A_BOLD		NCURSES_BITS(1UL,13)
#define A_ALTCHARSET	NCURSES_BITS(1UL,14)
#define A_INVIS		NCURSES_BITS(1UL,15)

/* Tradeoff on 32-bit machines ('protect' vs widec).  The others (e.g., left
 * highlight are not implemented in any terminal descriptions, anyway.
 */
#if ((16 + 8) < 32)
#define A_PROTECT	NCURSES_BITS(1UL,16)
#define A_HORIZONTAL	NCURSES_BITS(1UL,17)
#define A_LEFT		NCURSES_BITS(1UL,18)
#define A_LOW		NCURSES_BITS(1UL,19)
#define A_RIGHT		NCURSES_BITS(1UL,20)
#define A_TOP		NCURSES_BITS(1UL,21)
#define A_VERTICAL	NCURSES_BITS(1UL,22)
d883 1
a883 7
#define A_PROTECT	0L
#define A_HORIZONTAL	0L
#define A_LEFT		0L
#define A_LOW		0L
#define A_RIGHT		0L
#define A_TOP		0L
#define A_VERTICAL	0L
d886 59
a944 2
#define COLOR_PAIR(n)	NCURSES_BITS(n, 0)
#define PAIR_NUMBER(a)	(((a) & A_COLOR) >> 8)
d947 1
a947 1
 * pseudo functions
d949 1
a961 11
#define getyx(win,y,x)   	(y = (win)?(win)->_cury:ERR, x = (win)?(win)->_curx:ERR)
#define getbegyx(win,y,x)	(y = (win)?(win)->_begy:ERR, x = (win)?(win)->_begx:ERR)
#define getmaxyx(win,y,x)	(y = (win)?((win)->_maxy + 1):ERR, x = (win)?((win)->_maxx + 1):ERR)
#define getparyx(win,y,x)	(y = (win)?(win)->_pary:ERR, x = (win)?(win)->_parx:ERR)
#define getsyx(y,x) do { if(newscr->_leaveok) (y)=(x)=-1; \
			 else getyx(newscr,(y),(x)); \
		    } while(0)
#define setsyx(y,x) do { if((y)==-1 && (x)==-1) newscr->_leaveok=TRUE; \
			 else {newscr->_leaveok=FALSE;wmove(newscr,(y),(x));} \
		    } while(0)

d963 11
a973 9
#define getattrs(win)		((win)?(win)->_attrs:A_NORMAL)
#define getcurx(win)		((win)?(win)->_curx:ERR)
#define getcury(win)		((win)?(win)->_cury:ERR)
#define getbegx(win)		((win)?(win)->_begx:ERR)
#define getbegy(win)		((win)?(win)->_begy:ERR)
#define getmaxx(win)		((win)?((win)->_maxx + 1):ERR)
#define getmaxy(win)		((win)?((win)->_maxy + 1):ERR)
#define getparx(win)		((win)?(win)->_parx:ERR)
#define getpary(win)		((win)?(win)->_pary:ERR)
a976 1
#define wattr_set(win,a,p,opts) ((win)->_attrs = (((a) & ~A_COLOR) | COLOR_PAIR(p)), OK)
d978 11
a988 3
#define wattron(win,at)		wattr_on(win, at, (void *)0)
#define wattroff(win,at)	wattr_off(win, at, (void *)0)
#define wattrset(win,at)    	((win)->_attrs = (at))
d1005 1
d1007 2
d1013 6
d1022 1
a1022 1
#define addch(ch)      		waddch(stdscr,ch)
d1026 8
a1033 4
#define addstr(str)    		waddnstr(stdscr,str,-1)
#define attroff(at)    		wattroff(stdscr,at)
#define attron(at)     		wattron(stdscr,at)
#define attrset(at)    		wattrset(stdscr,at)
d1036 4
a1039 3
#define clear()        		wclear(stdscr)
#define clrtobot()     		wclrtobot(stdscr)
#define clrtoeol()     		wclrtoeol(stdscr)
d1041 2
a1042 2
#define delch()        		wdelch(stdscr)
#define deleteln()     		winsdelln(stdscr,-1)
d1044 4
a1047 4
#define erase()        		werase(stdscr)
#define getch()        		wgetch(stdscr)
#define getstr(str)    		wgetstr(stdscr,str)
#define inch()       		winch(stdscr)
d1051 1
a1051 1
#define insch(c)       		winsch(stdscr,c)
d1053 1
a1053 1
#define insertln()     		winsdelln(stdscr,1)
d1057 2
a1058 2
#define move(y,x)     		wmove(stdscr,y,x)
#define refresh()      		wrefresh(stdscr)
d1060 3
a1062 3
#define setscrreg(t,b) 		wsetscrreg(stdscr,t,b)
#define standend()     		wstandend(stdscr)
#define standout()     		wstandout(stdscr)
d1064 2
a1065 2
#define wdeleteln(win)     	winsdelln(win,-1)
#define winsertln(win)     	winsdelln(win,1)
d1071 1
a1071 1
#define mvwaddch(win,y,x,ch)    	(wmove(win,y,x) == ERR ? ERR : waddch(win,ch))
d1073 1
a1073 1
#define mvwaddchstr(win,y,x,str)  	(wmove(win,y,x) == ERR ? ERR : waddchnstr(win,str,-1))
d1075 8
a1082 7
#define mvwaddstr(win,y,x,str)  	(wmove(win,y,x) == ERR ? ERR : waddnstr(win,str,-1))
#define mvwdelch(win,y,x)       	(wmove(win,y,x) == ERR ? ERR : wdelch(win))
#define mvwgetch(win,y,x)       	(wmove(win,y,x) == ERR ? ERR : wgetch(win))
#define mvwgetnstr(win,y,x,str,n)    	(wmove(win,y,x) == ERR ? ERR : wgetnstr(win,str,n))
#define mvwgetstr(win,y,x,str)      	(wmove(win,y,x) == ERR ? ERR : wgetstr(win,str))
#define mvwhline(win,y,x,c,n)     	(wmove(win,y,x) == ERR ? ERR : whline(win,c,n))
#define mvwinch(win,y,x)        	(wmove(win,y,x) == ERR ? (chtype)ERR : winch(win))
d1086 1
a1086 1
#define mvwinsch(win,y,x,c)     	(wmove(win,y,x) == ERR ? ERR : winsch(win,c))
d1090 1
a1090 1
#define mvwvline(win,y,x,c,n)     	(wmove(win,y,x) == ERR ? ERR : wvline(win,c,n))
d1092 1
a1092 1
#define mvaddch(y,x,ch)         	mvwaddch(stdscr,y,x,ch)
d1096 4
a1099 3
#define mvaddstr(y,x,str)       	mvwaddstr(stdscr,y,x,str)
#define mvdelch(y,x)            	mvwdelch(stdscr,y,x)
#define mvgetch(y,x)            	mvwgetch(stdscr,y,x)
d1101 1
a1101 1
#define mvgetstr(y,x,str)           	mvwgetstr(stdscr,y,x,str)
d1103 1
a1103 1
#define mvinch(y,x)             	mvwinch(stdscr,y,x)
d1107 1
a1107 1
#define mvinsch(y,x,c)          	mvwinsch(stdscr,y,x,c)
d1114 5
a1118 66
 * XSI curses macros for XPG4 conformance.
 * The underlying functions needed to make these work are:
 * waddnwstr(), waddchnwstr(), wadd_wch(), wborder_set(), wchgat(),
 * wecho_wchar(), wgetn_wstr(), wget_wch(), whline_set(), vhline_set(),
 * winnwstr(), wins_nwstr(), wins_wch(), win_wch(), win_wchnstr().
 * Except for wchgat(), these are not yet implemented.  They will be someday.
 */
#define add_wch(c)			wadd_wch(stdscr,c)
#define addnwstr(wstr,n)		waddnwstr(stdscr,wstr,n)
#define addwstr(wstr,n)			waddnwstr(stdscr,wstr,-1)
#define attr_get(a,pair,opts)		wattr_get(stdscr,a,pair,opts)
#define attr_off(a,opts)		wattr_off(stdscr,a,opts)
#define attr_on(a,opts)			wattr_on(stdscr,a,opts)
#define attr_set(a,pair,opts)		wattr_set(stdscr,a,pair,opts)
#define box_set(w,v,h)			wborder_set(w,v,v,h,h,0,0,0,0)
#define chgat(n,a,c,o)			wchgat(stdscr,n,a,c,o)
#define echo_wchar(c)			wecho_wchar(stdscr,c)
#define getbkgd(win)			((win)->_bkgd)
#define get_wch(c)			wget_wch(stdscr,c)
#define get_wstr(t)			wgetn_wstr(stdscr,t,-1)
#define getn_wstr(t,n)			wgetn_wstr(stdscr,t,n)
#define hline_set(c,n)			whline_set(stdscr,c,n)
#define in_wch(c)			win_wch(stdscr,c)
#define in_wchnstr(c,n)			win_wchnstr(stdscr,c,n)
#define in_wchstr(c)			win_wchnstr(stdscr,c,-1)
#define innwstr(c,n)			winnwstr(stdscr,c,n)
#define ins_nwstr(t,n)			wins_nwstr(stdscr,t,n)
#define ins_wch(c)			wins_wch(stdscr,c)
#define ins_wstr(t)			wins_nwstr(stdscr,t,-1)
#define inwstr(c)			winnwstr(stdscr,c,-1)

#define mvadd_wch(y,x,c)		mvwadd_wch(stdscr,y,x,c)
#define mvaddnwstr(y,x,wstr,n)		mvwaddnwstr(stdscr,y,x,wstr,n)
#define mvaddwstr(y,x,wstr,n)		mvwaddnwstr(stdscr,y,x,wstr,-1)
#define mvchgat(y,x,n,a,c,o)		mvwchgat(stdscr,y,x,n,a,c,o)
#define mvget_wch(y,x,c)		mvwget_wch(stdscr,y,x,c)
#define mvget_wstr(y,x,t)		mvwgetn_wstr(stdscr,y,x,t,-1)
#define mvgetn_wstr(y,x,t,n)		mvwgetn_wstr(stdscr,y,x,t,n)
#define mvhline_set(y,x,c,n)		mvwhline_set(stdscr,y,x,c,n)
#define mvin_wch(y,x,c)			mvwin_wch(stdscr,y,x,c)
#define mvin_wchnstr(y,x,c,n)		mvwin_wchnstr(stdscr,y,x,c,n)
#define mvin_wchstr(y,x,c)		mvwin_wchnstr(stdscr,y,x,c,-1)
#define mvinnwstr(y,x,c,n)		mvwinnwstr(stdscr,y,x,c,n)
#define mvins_nwstr(y,x,t,n)		mvwins_nwstr(stdscr,y,x,t,n)
#define mvins_wch(y,x,c)		mvwins_wch(stdscr,y,x,c)
#define mvins_wstr(y,x,t)		mvwins_nwstr(stdscr,y,x,t,-1)
#define mvinwstr(y,x,c)			mvwinnwstr(stdscr,y,x,c,-1)
#define mvvline_set(y,x,c,n)		mvwvline_set(stdscr,y,x,c,n)

#define mvwadd_wch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : wadd_wch(stdscr,c))
#define mvwaddnwstr(win,y,x,wstr,n)	(wmove(win,y,x) == ERR ? ERR : waddnwstr(stdscr,wstr,n))
#define mvwaddwstr(win,y,x,wstr,n)	(wmove(win,y,x) == ERR ? ERR : waddnwstr(stdscr,wstr,-1))
#define mvwchgat(win,y,x,n,a,c,o)	(wmove(win,y,x) == ERR ? ERR : wchgat(win,n,a,c,o))
#define mvwget_wch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : wget_wch(win,c))
#define mvwget_wstr(win,y,x,t)		(wmove(win,y,x) == ERR ? ERR : wgetn_wstr(win,t,-1))
#define mvwgetn_wstr(win,y,x,t,n)	(wmove(win,y,x) == ERR ? ERR : wgetn_wstr(win,t,n))
#define mvwhline_set(win,y,x,c,n)	(wmove(win,y,x) == ERR ? ERR : whline_set(win,c,n))
#define mvwin_wch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : win_wch(win,c))
#define mvwin_wchnstr(win,y,x,c,n)	(wmove(win,y,x) == ERR ? ERR : win_wchnstr(stdscr,c,n))
#define mvwin_wchstr(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : win_wchnstr(stdscr,c,-1))
#define mvwinnwstr(win,y,x,c,n)		(wmove(win,y,x) == ERR ? ERR : winnwstr(stdscr,c,n))
#define mvwins_nwstr(win,y,x,t,n)	(wmove(win,y,x) == ERR ? ERR : wins_nwstr(stdscr,t,n))
#define mvwins_wch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : wins_wch(stdscr,c))
#define mvwins_wstr(win,y,x,t)		(wmove(win,y,x) == ERR ? ERR : wins_nwstr(stdscr,t,-1))
#define mvwinwstr(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : winnwstr(stdscr,c,-1))
#define mvwvline_set(win,y,x,c,n)	(wmove(win,y,x) == ERR ? ERR : wvline_set(win,c,n))
d1123 12
a1134 5
#define vid_attr(a,pair,opts)		vidattr(a)
#define vline_set(c,n)			wvline_set(stdscr,c,n)
#define waddwstr(win,wstr,n)		waddnwstr(win,wstr,-1)
#define wattr_get(win,a,p,opts)		((void)((a) != 0 && (*(a) = (win)->_attrs)), \
					 (void)((p) != 0 && (*(p) = PAIR_NUMBER((win)->_attrs))), \
d1136 2
a1137 5
#define wget_wstr(w,t)			wgetn_wstr(w,t,-1)
#define win_wchstr(w,c)			win_wchnstr(w,c,-1)
#define wins_wstr(w,t)			wins_nwstr(w,t,-1)
#define winwstr(w,c)			winnwstr(w,c,-1)

d1140 1
a1140 1
 * XSI curses deprecates SVr4 vwprintw/vwscanw, which are supposed to use
d1149 77
d1229 7
d1239 93
a1331 96
#define KEY_BREAK       0401            /* Break key (unreliable) */
#define KEY_DOWN        0402            /* Down-arrow */
#define KEY_UP          0403		/* Up-arrow */
#define KEY_LEFT        0404		/* Left-arrow */
#define KEY_RIGHT       0405            /* Right-arrow */
#define KEY_HOME        0406            /* Home key (upward+left arrow) */
#define KEY_BACKSPACE   0407            /* Backspace (unreliable) */
#define KEY_F0          0410            /* Function keys.  Space for 64 */
#define KEY_F(n)        (KEY_F0+(n))    /* Value of function key n */
#define KEY_DL          0510            /* Delete line */
#define KEY_IL          0511            /* Insert line */
#define KEY_DC          0512            /* Delete character */
#define KEY_IC          0513            /* Insert char or enter insert mode */
#define KEY_EIC         0514            /* Exit insert char mode */
#define KEY_CLEAR       0515            /* Clear screen */
#define KEY_EOS         0516            /* Clear to end of screen */
#define KEY_EOL         0517            /* Clear to end of line */
#define KEY_SF          0520            /* Scroll 1 line forward */
#define KEY_SR          0521            /* Scroll 1 line backward (reverse) */
#define KEY_NPAGE       0522            /* Next page */
#define KEY_PPAGE       0523            /* Previous page */
#define KEY_STAB        0524            /* Set tab */
#define KEY_CTAB        0525            /* Clear tab */
#define KEY_CATAB       0526            /* Clear all tabs */
#define KEY_ENTER       0527            /* Enter or send (unreliable) */
#define KEY_SRESET      0530            /* Soft (partial) reset (unreliable) */
#define KEY_RESET       0531            /* Reset or hard reset (unreliable) */
#define KEY_PRINT       0532            /* Print */
#define KEY_LL          0533            /* Home down or bottom (lower left) */

/* The keypad is arranged like this: */
/* a1    up    a3   */
/* left   b2  right  */
/* c1   down   c3   */

#define KEY_A1		0534		/* Upper left of keypad */
#define KEY_A3		0535		/* Upper right of keypad */
#define KEY_B2		0536		/* Center of keypad */
#define KEY_C1		0537		/* Lower left of keypad */
#define KEY_C3		0540		/* Lower right of keypad */
#define KEY_BTAB	0541		/* Back tab */
#define KEY_BEG		0542		/* Beg (beginning) */
#define KEY_CANCEL	0543		/* Cancel */
#define KEY_CLOSE	0544		/* Close */
#define KEY_COMMAND	0545		/* Cmd (command) */
#define KEY_COPY	0546		/* Copy */
#define KEY_CREATE	0547		/* Create */
#define KEY_END		0550		/* End */
#define KEY_EXIT	0551		/* Exit */
#define KEY_FIND	0552		/* Find */
#define KEY_HELP	0553		/* Help */
#define KEY_MARK	0554		/* Mark */
#define KEY_MESSAGE	0555		/* Message */
#define KEY_MOVE	0556		/* Move */
#define KEY_NEXT	0557		/* Next */
#define KEY_OPEN	0560		/* Open */
#define KEY_OPTIONS	0561		/* Options */
#define KEY_PREVIOUS	0562		/* Prev (previous) */
#define KEY_REDO	0563		/* Redo */
#define KEY_REFERENCE	0564		/* Ref (reference) */
#define KEY_REFRESH	0565		/* Refresh */
#define KEY_REPLACE	0566		/* Replace */
#define KEY_RESTART	0567		/* Restart */
#define KEY_RESUME	0570		/* Resume */
#define KEY_SAVE	0571		/* Save */
#define KEY_SBEG	0572		/* Shifted Beg (beginning) */
#define KEY_SCANCEL	0573		/* Shifted Cancel */
#define KEY_SCOMMAND	0574		/* Shifted Command */
#define KEY_SCOPY	0575		/* Shifted Copy */
#define KEY_SCREATE	0576		/* Shifted Create */
#define KEY_SDC		0577		/* Shifted Delete char */
#define KEY_SDL		0600		/* Shifted Delete line */
#define KEY_SELECT	0601		/* Select */
#define KEY_SEND	0602		/* Shifted End */
#define KEY_SEOL	0603		/* Shifted Clear line */
#define KEY_SEXIT	0604		/* Shifted Dxit */
#define KEY_SFIND	0605		/* Shifted Find */
#define KEY_SHELP	0606		/* Shifted Help */
#define KEY_SHOME	0607		/* Shifted Home */
#define KEY_SIC		0610		/* Shifted Input */
#define KEY_SLEFT	0611		/* Shifted Left arrow */
#define KEY_SMESSAGE	0612		/* Shifted Message */
#define KEY_SMOVE	0613		/* Shifted Move */
#define KEY_SNEXT	0614		/* Shifted Next */
#define KEY_SOPTIONS	0615		/* Shifted Options */
#define KEY_SPREVIOUS	0616		/* Shifted Prev */
#define KEY_SPRINT	0617		/* Shifted Print */
#define KEY_SREDO	0620		/* Shifted Redo */
#define KEY_SREPLACE	0621		/* Shifted Replace */
#define KEY_SRIGHT	0622		/* Shifted Right arrow */
#define KEY_SRSUME	0623		/* Shifted Resume */
#define KEY_SSAVE	0624		/* Shifted Save */
#define KEY_SSUSPEND	0625		/* Shifted Suspend */
#define KEY_SUNDO	0626		/* Shifted Undo */
#define KEY_SUSPEND	0627		/* Suspend */
#define KEY_UNDO	0630		/* Undo */
d1334 9
a1342 1
#define KEY_MAX		0777		/* Maximum key value */
d1345 13
a1357 1
#define NCURSES_MOUSE_VERSION	1
d1360 56
a1415 29
#define	BUTTON1_RELEASED	000000000001L
#define	BUTTON1_PRESSED		000000000002L
#define	BUTTON1_CLICKED		000000000004L
#define	BUTTON1_DOUBLE_CLICKED	000000000010L
#define	BUTTON1_TRIPLE_CLICKED	000000000020L
#define BUTTON1_RESERVED_EVENT	000000000040L
#define	BUTTON2_RELEASED	000000000100L
#define	BUTTON2_PRESSED		000000000200L
#define	BUTTON2_CLICKED		000000000400L
#define	BUTTON2_DOUBLE_CLICKED	000000001000L
#define	BUTTON2_TRIPLE_CLICKED	000000002000L
#define BUTTON2_RESERVED_EVENT	000000004000L
#define	BUTTON3_RELEASED	000000010000L
#define	BUTTON3_PRESSED		000000020000L
#define	BUTTON3_CLICKED		000000040000L
#define	BUTTON3_DOUBLE_CLICKED	000000100000L
#define	BUTTON3_TRIPLE_CLICKED	000000200000L
#define BUTTON3_RESERVED_EVENT	000000400000L
#define	BUTTON4_RELEASED	000001000000L
#define	BUTTON4_PRESSED		000002000000L
#define	BUTTON4_CLICKED		000004000000L
#define	BUTTON4_DOUBLE_CLICKED	000010000000L
#define	BUTTON4_TRIPLE_CLICKED	000020000000L
#define BUTTON4_RESERVED_EVENT	000040000000L
#define BUTTON_CTRL		000100000000L
#define BUTTON_SHIFT		000200000000L
#define BUTTON_ALT		000400000000L
#define	ALL_MOUSE_EVENTS	000777777777L
#define	REPORT_MOUSE_POSITION	001000000000L
d1418 6
a1423 8
#define	BUTTON_RELEASE(e, x)		((e) & (001 << (6 * ((x) - 1))))
#define	BUTTON_PRESS(e, x)		((e) & (002 << (6 * ((x) - 1))))
#define	BUTTON_CLICK(e, x)		((e) & (004 << (6 * ((x) - 1))))
#define	BUTTON_DOUBLE_CLICK(e, x)	((e) & (010 << (6 * ((x) - 1))))
#define	BUTTON_TRIPLE_CLICK(e, x)	((e) & (020 << (6 * ((x) - 1))))
#define	BUTTON_RESERVED_EVENT(e, x)	((e) & (040 << (6 * ((x) - 1))))

typedef unsigned long mmask_t;
d1438 2
a1439 1
extern NCURSES_EXPORT(bool) wmouse_trafo (const WINDOW* win,int* y, int* x, bool to_screen);
d1455 1
a1455 1
extern NCURSES_EXPORT(char *) _tracechar (const unsigned char);
d1458 9
d1486 3
a1488 1
#define TRACE_MAXIMUM	0xffff	/* maximum trace level */
d1501 2
d1509 2
@


1.58
log
@Update to ncurses-5.2-20010210:
o remove macro callPutChar() from tty_update.c, since this is no longer
  needed (reported by Philippe Blain).
o add a null-pointer check in tic.c to handle the case when the input
  file is really empty.  Modify the next_char() function in comp_scan.c
  to allow arbitrarily long lines, and incidentally supply a newline to
  files that do not end in a newline.  These changes improve tic's
  recovery from attempts to read binary files, e.g., its output from
  the terminfo database (reported by Bernhard Rosenkraenzer).
o revert change to c++/demo.cc from 20001209, which changed definition
  of main() apparently to accommodate cygwin linker, but broke the demo
  program.
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.57 2001/01/22 18:01:33 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20010210
@


1.57
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.56 2000/12/06 17:18:49 deraadt Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20010114
@


1.56
log
@use __x__ formats for __attribute__ arguments; guenther@@gac.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.55 2000/10/22 18:27:19 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.96 2000/09/16 16:11:01 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20001021
d59 13
d141 2
a142 2
extern int COLORS;
extern int COLOR_PAIRS;
d155 1
a155 1
extern	chtype acs_map[];
d322 7
a328 7
extern WINDOW   *stdscr;
extern WINDOW   *curscr;
extern WINDOW   *newscr;

extern int	LINES;
extern int	COLS;
extern int	TABSIZE;
d333 1
a333 1
extern int ESCDELAY;	/* ESC expire time in milliseconds */
d335 1
a335 1
extern char ttytype[];		/* needed for backward compatibility */
d340 9
a348 9
extern char *keybound (int, int);
extern const char *curses_version (void);
extern int assume_default_colors (int, int);
extern int define_key (char *, int);
extern int keyok (int, bool);
extern int resizeterm (int, int);
extern int use_default_colors (void);
extern int use_extended_names (bool);
extern int wresize (WINDOW *, int, int);
d402 193
a594 193
extern int addch(const chtype);				/* generated */
extern int addchnstr(const chtype *, int);		/* generated */
extern int addchstr(const chtype *);			/* generated */
extern int addnstr(const char *, int);			/* generated */
extern int addstr(const char *);			/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int addnwstr(const wchar_t *, int);		/* missing */
extern int addwstr(const wchar_t *);			/* missing */
extern int add_wch(const cchar_t *);			/* missing */
extern int add_wchnstr(const cchar_t *, int);		/* missing */
extern int add_wchstr(const cchar_t *);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int attroff(NCURSES_ATTR_T);			/* generated */
extern int attron(NCURSES_ATTR_T);			/* generated */
extern int attrset(NCURSES_ATTR_T);			/* generated */
extern int attr_get(attr_t *, short *, void *);		/* generated */
extern int attr_off(attr_t, void *);			/* generated */
extern int attr_on(attr_t, void *);			/* generated */
extern int attr_set(attr_t, short, void *);		/* generated */
extern int baudrate(void);				/* implemented */
extern int beep(void);					/* implemented */
extern int bkgd(chtype);				/* generated */
extern void bkgdset(chtype);				/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern void bkgrndset(const cchar_t *);			/* missing */
extern int bkgrnd(const cchar_t *);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int border(chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);	/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int border_set(const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int box(WINDOW *, chtype, chtype);		/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int box_set(WINDOW *, const cchar_t *, const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern bool can_change_color(void);			/* implemented */
extern int cbreak(void);				/* implemented */
extern int chgat(int, attr_t, short, const void *);	/* generated */
extern int clear(void);					/* generated */
extern int clearok(WINDOW *,bool);			/* implemented */
extern int clrtobot(void);				/* generated */
extern int clrtoeol(void);				/* generated */
extern int color_content(short,short*,short*,short*);	/* implemented */
extern int color_set(short,void*);			/* generated */
extern int COLOR_PAIR(int);				/* generated */
extern int copywin(const WINDOW*,WINDOW*,int,int,int,int,int,int,int);	/* implemented */
extern int curs_set(int);				/* implemented */
extern int def_prog_mode(void);				/* implemented */
extern int def_shell_mode(void);			/* implemented */
extern int delay_output(int);				/* implemented */
extern int delch(void);					/* generated */
extern void delscreen(SCREEN *);			/* implemented */
extern int delwin(WINDOW *);				/* implemented */
extern int deleteln(void);				/* generated */
extern WINDOW *derwin(WINDOW *,int,int,int,int);	/* implemented */
extern int doupdate(void);				/* implemented */
extern WINDOW *dupwin(WINDOW *);			/* implemented */
extern int echo(void);					/* implemented */
extern int echochar(const chtype);			/* generated */
extern int erase(void);					/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int echo_wchar(const cchar_t *);			/* missing */
extern int erasewchar(wchar_t*);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int endwin(void);				/* implemented */
extern char erasechar(void);				/* implemented */
extern void filter(void);				/* implemented */
extern int flash(void);					/* implemented */
extern int flushinp(void);				/* implemented */
extern chtype getbkgd(WINDOW *);			/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int getbkgrnd(cchar_t *);			/* missing */
extern int getcchar(const cchar_t *, wchar_t*, attr_t*, short*, void*);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int getch(void);					/* generated */
extern int getnstr(char *, int);			/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int getn_wstr(wint_t *, int);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int getstr(char *);				/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int get_wch(wint_t *);				/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern WINDOW *getwin(FILE *);				/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int get_wstr(wint_t *);				/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int halfdelay(int);				/* implemented */
extern bool has_colors(void);				/* implemented */
extern bool has_ic(void);				/* implemented */
extern bool has_il(void);				/* implemented */
extern int hline(chtype, int);				/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int hline_set(const cchar_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern void idcok(WINDOW *, bool);			/* implemented */
extern int idlok(WINDOW *, bool);			/* implemented */
extern void immedok(WINDOW *, bool);			/* implemented */
extern chtype inch(void);				/* generated */
extern int inchnstr(chtype *, int);			/* generated */
extern int inchstr(chtype *);				/* generated */
extern WINDOW *initscr(void);				/* implemented */
extern int init_color(short,short,short,short);		/* implemented */
extern int init_pair(short,short,short);		/* implemented */
extern int innstr(char *, int);				/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int innwstr(wchar_t *, int);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int insch(chtype);				/* generated */
extern int insdelln(int);				/* generated */
extern int insertln(void);				/* generated */
extern int insnstr(const char *, int);			/* generated */
extern int insstr(const char *);			/* generated */
extern int instr(char *);				/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int ins_nwstr(const wchar_t *, int);		/* missing */
extern int ins_wch(const cchar_t *);			/* missing */
extern int ins_wstr(const wchar_t *);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int intrflush(WINDOW *,bool);			/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int inwstr(wchar_t *);				/* missing */
extern int in_wch(NCURSES_CONST cchar_t *);		/* missing */
extern int in_wchstr(NCURSES_CONST cchar_t *);		/* missing */
extern int in_wchnstr(NCURSES_CONST cchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern bool isendwin(void);				/* implemented */
extern bool is_linetouched(WINDOW *,int);		/* implemented */
extern bool is_wintouched(WINDOW *);			/* implemented */
extern NCURSES_CONST char *keyname(int);		/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern char *key_name(wchar_t);				/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int keypad(WINDOW *,bool);			/* implemented */
extern char killchar(void);				/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int killwchar(wchar_t *);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int leaveok(WINDOW *,bool);			/* implemented */
extern char *longname(void);				/* implemented */
extern int meta(WINDOW *,bool);				/* implemented */
extern int move(int, int);				/* generated */
extern int mvaddch(int, int, const chtype);		/* generated */
extern int mvaddchnstr(int, int, const chtype *, int);	/* generated */
extern int mvaddchstr(int, int, const chtype *);	/* generated */
extern int mvaddnstr(int, int, const char *, int);	/* generated */
extern int mvaddstr(int, int, const char *);		/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int mvaddnwstr(int, int, const wchar_t *, int);	/* missing */
extern int mvaddwstr(int, int, const wchar_t *);	/* missing */
extern int mvadd_wch(int, int, const cchar_t *);	/* missing */
extern int mvadd_wchnstr(int, int, const cchar_t *, int);/* missing */
extern int mvadd_wchstr(int, int, const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int mvchgat(int, int, int, attr_t, short, const void *);	/* generated */
extern int mvcur(int,int,int,int);			/* implemented */
extern int mvdelch(int, int);				/* generated */
extern int mvderwin(WINDOW *, int, int);		/* implemented */
extern int mvgetch(int, int);				/* generated */
extern int mvgetnstr(int, int, char *, int);		/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int mvgetn_wstr(int, int, wint_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int mvgetstr(int, int, char *);			/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int mvget_wch(int, int, wint_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int mvget_wstr(int, int, wint_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int mvhline(int, int, chtype, int);		/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int mvhline_set(int, int, const cchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern chtype mvinch(int, int);				/* generated */
extern int mvinchnstr(int, int, chtype *, int);		/* generated */
extern int mvinchstr(int, int, chtype *);		/* generated */
extern int mvinnstr(int, int, char *, int);		/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int mvinnwstr(int, int, wchar_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int mvinsch(int, int, chtype);			/* generated */
extern int mvinsnstr(int, int, const char *, int);	/* generated */
extern int mvinsstr(int, int, const char *);		/* generated */
extern int mvinstr(int, int, char *);			/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int mvins_nwstr(int, int, const wchar_t *, int);	/* missing */
extern int mvins_wch(int, int, const cchar_t *);	/* missing */
extern int mvins_wstr(int, int, const wchar_t *);	/* missing */
extern int mvinwstr(int, int, wchar_t *);		/* missing */
extern int mvin_wch(int, int, NCURSES_CONST cchar_t *);	/* missing */
extern int mvin_wchstr(int, int, NCURSES_CONST cchar_t *);	/* missing */
extern int mvin_wchnstr(int, int, NCURSES_CONST cchar_t *, int);	/* missing */
d596 1
a596 1
extern int mvprintw(int,int, NCURSES_CONST char *,...)	/* implemented */
d598 1
a598 1
extern int mvscanw(int,int, NCURSES_CONST char *,...)	/* implemented */
d600 1
a600 1
extern int mvvline(int, int, chtype, int);		/* generated */
d602 1
a602 1
extern int mvvline_set(int, int, const cchar_t *, int);	/* missing */
d604 5
a608 5
extern int mvwaddch(WINDOW *, int, int, const chtype);	/* generated */
extern int mvwaddchnstr(WINDOW *, int, int, const chtype *, int);/* generated */
extern int mvwaddchstr(WINDOW *, int, int, const chtype *);	/* generated */
extern int mvwaddnstr(WINDOW *, int, int, const char *, int);	/* generated */
extern int mvwaddstr(WINDOW *, int, int, const char *);	/* generated */
d610 5
a614 5
extern int mvwaddnwstr(WINDOW *, int, int, const wchar_t *, int);/* missing */
extern int mvwaddwstr(WINDOW *, int, int, const wchar_t *);	/* missing */
extern int mvwadd_wch(WINDOW *, int, int, const cchar_t *);	/* missing */
extern int mvwadd_wchnstr(WINDOW *, int, int, const cchar_t *, int); /* missing */
extern int mvwadd_wchstr(WINDOW *, int, int, const cchar_t *);	/* missing */
d616 4
a619 4
extern int mvwchgat(WINDOW *, int, int, int, attr_t, short, const void *);/* generated */
extern int mvwdelch(WINDOW *, int, int);		/* generated */
extern int mvwgetch(WINDOW *, int, int);		/* generated */
extern int mvwgetnstr(WINDOW *, int, int, char *, int);	/* generated */
d621 1
a621 1
extern int mvwgetn_wstr(WINDOW *, int, int, wint_t *, int);/* missing */
d623 1
a623 1
extern int mvwgetstr(WINDOW *, int, int, char *);	/* generated */
d625 1
a625 1
extern int mvwget_wch(WINDOW *, int, int, wint_t *);	/* missing */
d628 1
a628 1
extern int mvwget_wstr(WINDOW *, int, int, wint_t *);	/* missing */
d630 1
a630 1
extern int mvwhline(WINDOW *, int, int, chtype, int);	/* generated */
d632 1
a632 1
extern int mvwhline_set(WINDOW *, int, int, const cchar_t *, int);/* missing */
d634 5
a638 5
extern int mvwin(WINDOW *,int,int);			/* implemented */
extern chtype mvwinch(WINDOW *, int, int);			/* generated */
extern int mvwinchnstr(WINDOW *, int, int, chtype *, int);	/* generated */
extern int mvwinchstr(WINDOW *, int, int, chtype *);		/* generated */
extern int mvwinnstr(WINDOW *, int, int, char *, int);		/* generated */
d640 1
a640 1
extern int mvwinnwstr(WINDOW *, int, int, wchar_t *, int);	/* missing */
d642 4
a645 4
extern int mvwinsch(WINDOW *, int, int, chtype);		/* generated */
extern int mvwinsnstr(WINDOW *, int, int, const char *, int);	/* generated */
extern int mvwinsstr(WINDOW *, int, int, const char *);		/* generated */
extern int mvwinstr(WINDOW *, int, int, char *);		/* generated */
d647 7
a653 7
extern int mvwins_nwstr(WINDOW *, int,int, const wchar_t *,int); /* missing */
extern int mvwins_wch(WINDOW *, int, int, const cchar_t *);	/* missing */
extern int mvwins_wstr(WINDOW *, int, int, const wchar_t *);	/* missing */
extern int mvwinwstr(WINDOW *, int, int, wchar_t *);		/* missing */
extern int mvwin_wch(WINDOW *, int, int, NCURSES_CONST cchar_t *);	/* missing */
extern int mvwin_wchnstr(WINDOW *, int,int, NCURSES_CONST cchar_t *,int); /* missing */
extern int mvwin_wchstr(WINDOW *, int, int, NCURSES_CONST cchar_t *);	/* missing */
d655 1
a655 1
extern int mvwprintw(WINDOW*,int,int, NCURSES_CONST char *,...)	/* implemented */
d657 1
a657 1
extern int mvwscanw(WINDOW *,int,int, NCURSES_CONST char *,...)	/* implemented */
d659 1
a659 1
extern int mvwvline(WINDOW *,int, int, chtype, int);	/* generated */
d661 1
a661 1
extern int mvwvline_set(WINDOW *, int,int, const cchar_t *,int); /* missing */
d663 23
a685 23
extern int napms(int);					/* implemented */
extern WINDOW *newpad(int,int);				/* implemented */
extern SCREEN *newterm(NCURSES_CONST char *,FILE *,FILE *);	/* implemented */
extern WINDOW *newwin(int,int,int,int);			/* implemented */
extern int nl(void);					/* implemented */
extern int nocbreak(void);				/* implemented */
extern int nodelay(WINDOW *,bool);			/* implemented */
extern int noecho(void);				/* implemented */
extern int nonl(void);					/* implemented */
extern void noqiflush(void);				/* implemented */
extern int noraw(void);					/* implemented */
extern int notimeout(WINDOW *,bool);			/* implemented */
extern int overlay(const WINDOW*,WINDOW *);		/* implemented */
extern int overwrite(const WINDOW*,WINDOW *);		/* implemented */
extern int pair_content(short,short*,short*);		/* implemented */
extern int PAIR_NUMBER(int);				/* generated */
extern int pechochar(WINDOW *, const chtype);		/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int pecho_wchar(WINDOW *, const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int pnoutrefresh(WINDOW*,int,int,int,int,int,int);/* implemented */
extern int prefresh(WINDOW *,int,int,int,int,int,int);	/* implemented */
extern int printw(NCURSES_CONST char *,...)		/* implemented */
d687 12
a698 12
extern int putp(const char *);				/* implemented */
extern int putwin(WINDOW *, FILE *);			/* implemented */
extern void qiflush(void);				/* implemented */
extern int raw(void);					/* implemented */
extern int redrawwin(WINDOW *);				/* generated */
extern int refresh(void);				/* generated */
extern int resetty(void);				/* implemented */
extern int reset_prog_mode(void);			/* implemented */
extern int reset_shell_mode(void);			/* implemented */
extern int ripoffline(int, int (*init)(WINDOW *, int));	/* implemented */
extern int savetty(void);				/* implemented */
extern int scanw(NCURSES_CONST char *,...)		/* implemented */
d700 152
a851 152
extern int scr_dump(const char *);			/* implemented */
extern int scr_init(const char *);			/* implemented */
extern int scrl(int);					/* generated */
extern int scroll(WINDOW *);				/* generated */
extern int scrollok(WINDOW *,bool);			/* implemented */
extern int scr_restore(const char *);			/* implemented */
extern int scr_set(const char *);			/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int setcchar(cchar_t *, const wchar_t *, const attr_t, short, const void *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int setscrreg(int,int);				/* generated */
extern SCREEN *set_term(SCREEN *);			/* implemented */
extern int slk_attroff(const chtype);			/* implemented */
extern int slk_attr_off(const attr_t, void *);		/* generated:WIDEC */
extern int slk_attron(const chtype);			/* implemented */
extern int slk_attr_on(attr_t,void*);			/* generated:WIDEC */
extern int slk_attrset(const chtype);			/* implemented */
extern attr_t slk_attr(void);				/* implemented */
extern int slk_attr_set(const attr_t,short,void*);	/* implemented */
extern int slk_clear(void);				/* implemented */
extern int slk_color(short);				/* implemented */
extern int slk_init(int);				/* implemented */
extern char *slk_label(int);				/* implemented */
extern int slk_noutrefresh(void);			/* implemented */
extern int slk_refresh(void);				/* implemented */
extern int slk_restore(void);				/* implemented */
extern int slk_set(int,const char *,int);		/* implemented */
extern int slk_touch(void);				/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int slk_wset(int, const wchar_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int standout(void);				/* generated */
extern int standend(void);				/* generated */
extern int start_color(void);				/* implemented */
extern WINDOW *subpad(WINDOW *, int, int, int, int);	/* implemented */
extern WINDOW *subwin(WINDOW *,int,int,int,int);	/* implemented */
extern int syncok(WINDOW *, bool);			/* implemented */
extern chtype termattrs(void);				/* implemented */
extern attr_t term_attrs(void);				/* missing */
extern char *termname(void);				/* implemented */
extern int tigetflag(NCURSES_CONST char *);		/* implemented */
extern int tigetnum(NCURSES_CONST char *);		/* implemented */
extern char *tigetstr(NCURSES_CONST char *);		/* implemented */
extern void timeout(int);				/* generated */
extern int touchline(WINDOW *, int, int);		/* generated */
extern int touchwin(WINDOW *);				/* generated */
extern char *tparm(NCURSES_CONST char *, ...);		/* implemented */
extern int typeahead(int);				/* implemented */
extern int ungetch(int);				/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int unget_wch(const wchar_t);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int untouchwin(WINDOW *);			/* generated */
extern void use_env(bool);				/* implemented */
extern int vidattr(chtype);				/* implemented */
extern int vid_attr(attr_t, short, void *);		/* generated:WIDEC */
extern int vidputs(chtype, int (*)(int));		/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int vid_puts(attr_t, short, void *, int (*)(int)); /* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int vline(chtype, int);				/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int vline_set(const cchar_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int vwprintw(WINDOW *, NCURSES_CONST char *,va_list);	/* implemented */
extern int vw_printw(WINDOW *, NCURSES_CONST char *,va_list);	/* generated */
extern int vwscanw(WINDOW *, NCURSES_CONST char *,va_list);	/* implemented */
extern int vw_scanw(WINDOW *, NCURSES_CONST char *,va_list);	/* generated */
extern int waddch(WINDOW *, const chtype);		/* implemented */
extern int waddchnstr(WINDOW *,const chtype *const,int); /* implemented */
extern int waddchstr(WINDOW *,const chtype *);		/* generated */
extern int waddnstr(WINDOW *,const char *const,int);	/* implemented */
extern int waddstr(WINDOW *,const char *);		/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int waddwstr(WINDOW *,const wchar_t *);		/* missing */
extern int waddnwstr(WINDOW *,const wchar_t *,int);	/* missing */
extern int wadd_wch(WINDOW *,const cchar_t *);		/* missing */
extern int wadd_wchnstr(WINDOW *,const cchar_t *,int);	/* missing */
extern int wadd_wchstr(WINDOW *,const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int wattron(WINDOW *, int);			/* generated */
extern int wattroff(WINDOW *, int);			/* generated */
extern int wattrset(WINDOW *, int);			/* generated */
extern int wattr_get(WINDOW *, attr_t *, short *, void *);	/* generated */
extern int wattr_on(WINDOW *, NCURSES_CONST attr_t, void *);	/* implemented */
extern int wattr_off(WINDOW *, NCURSES_CONST attr_t, void *);	/* implemented */
extern int wattr_set(WINDOW *, attr_t, short, void *);		/* generated */
extern int wbkgd(WINDOW *,const chtype);		/* implemented */
extern void wbkgdset(WINDOW *,chtype);			/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern void wbkgrndset(WINDOW *,const cchar_t *);	/* missing */
extern int wbkgrnd(WINDOW *,const cchar_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int wborder(WINDOW *,chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);	/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int wborder_set(WINDOW *,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*,const cchar_t*);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int wchgat(WINDOW *, int, attr_t, short, const void *);/* implemented */
extern int wclear(WINDOW *);				/* implemented */
extern int wclrtobot(WINDOW *);				/* implemented */
extern int wclrtoeol(WINDOW *);				/* implemented */
extern int wcolor_set(WINDOW*,short,void*);		/* implemented */
extern void wcursyncup(WINDOW *);			/* implemented */
extern int wdelch(WINDOW *);				/* implemented */
extern int wdeleteln(WINDOW *);				/* generated */
extern int wechochar(WINDOW *, const chtype);		/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int wecho_wchar(WINDOW *, const cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int werase(WINDOW *);				/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int wgetbkgrnd(WINDOW *, cchar_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int wgetch(WINDOW *);				/* implemented */
extern int wgetnstr(WINDOW *,char *,int);		/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int wgetn_wstr(WINDOW *,wint_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int wgetstr(WINDOW *, char *);			/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int wget_wch(WINDOW *, wint_t *);		/* missing */
extern int wget_wstr(WINDOW *, wint_t *);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int whline(WINDOW *, chtype, int);		/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int whline_set(WINDOW *, const cchar_t *, int);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern chtype winch(WINDOW *);				/* implemented */
extern int winchnstr(WINDOW *, chtype *, int);		/* implemented */
extern int winchstr(WINDOW *, chtype *);		/* generated */
extern int winnstr(WINDOW *, char *, int);		/* implemented */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int winnwstr(WINDOW *, wchar_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int winsch(WINDOW *, chtype);			/* implemented */
extern int winsdelln(WINDOW *,int);			/* implemented */
extern int winsertln(WINDOW *);				/* generated */
extern int winsnstr(WINDOW *, const char *,int);	/* implemented */
extern int winsstr(WINDOW *, const char *);		/* generated */
extern int winstr(WINDOW *, char *);			/* generated */
#ifdef _XOPEN_SOURCE_EXTENDED
extern int wins_nwstr(WINDOW *, const wchar_t *, int);	/* missing */
extern int wins_wch(WINDOW *, const cchar_t *);		/* missing */
extern int wins_wstr(WINDOW *, const wchar_t *);	/* missing */
extern int winwstr(WINDOW *, wchar_t *);		/* missing */
extern int win_wch(WINDOW *, NCURSES_CONST cchar_t *);	/* missing */
extern int win_wchnstr(WINDOW *, NCURSES_CONST cchar_t *, int);	/* missing */
extern int win_wchstr(WINDOW *, NCURSES_CONST cchar_t *);	/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int wmove(WINDOW *,int,int);			/* implemented */
extern int wnoutrefresh(WINDOW *);			/* implemented */
extern int wprintw(WINDOW *, NCURSES_CONST char *,...)	/* implemented */
d853 3
a855 3
extern int wredrawln(WINDOW *,int,int);			/* implemented */
extern int wrefresh(WINDOW *);				/* implemented */
extern int wscanw(WINDOW *, NCURSES_CONST char *,...)	/* implemented */
d857 8
a864 8
extern int wscrl(WINDOW *,int);				/* implemented */
extern int wsetscrreg(WINDOW *,int,int);		/* implemented */
extern int wstandout(WINDOW *);				/* generated */
extern int wstandend(WINDOW *);				/* generated */
extern void wsyncdown(WINDOW *);			/* implemented */
extern void wsyncup(WINDOW *);				/* implemented */
extern void wtimeout(WINDOW *,int);			/* implemented */
extern int wtouchln(WINDOW *,int,int,int);		/* implemented */
d866 1
a866 1
extern wchar_t *wunctrl(cchar_t *);			/* missing */
d868 1
a868 1
extern int wvline(WINDOW *,chtype,int);			/* implemented */
d870 1
a870 1
extern int wvline_set(WINDOW *, const cchar_t *, int);	/* missing */
d873 1
a873 1
extern bool mouse_trafo(int*, int*, bool);              /* generated */
d1319 6
a1324 6
extern int getmouse(MEVENT *);
extern int ungetmouse(MEVENT *);
extern mmask_t mousemask(mmask_t, mmask_t *);
extern bool wenclose(const WINDOW *, int, int);
extern int mouseinterval(int);
extern bool wmouse_trafo(const WINDOW* win,int* y, int* x, bool to_screen);
d1330 2
a1331 2
extern int mcprint(char *, int);	/* direct data to printer */
extern int has_key(int);		/* do we have given key? */
d1335 10
a1344 10
extern void _tracef(const char *, ...) GCC_PRINTFLIKE(1,2);
extern void _tracedump(const char *, WINDOW *);
extern char *_traceattr(attr_t);
extern char *_traceattr2(int, chtype);
extern char *_nc_tracebits(void);
extern char *_tracechar(const unsigned char);
extern char *_tracechtype(chtype);
extern char *_tracechtype2(int, chtype);
extern char *_tracemouse(const MEVENT *);
extern void trace(const unsigned int);
d1365 2
a1366 2
extern int _nc_optimize_enable;		/* enable optimizations */
extern const char *_nc_visbuf(const char *);
@


1.55
log
@update to ncurses 5.2
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.54 2000/10/08 22:46:54 millert Exp $	*/
d363 1
a363 1
#define GCC_PRINTFLIKE(fmt,var) __attribute__((format(printf,fmt,var)))
d369 1
a369 1
#define GCC_SCANFLIKE(fmt,var)  __attribute__((format(scanf,fmt,var)))
@


1.54
log
@update to ncurses-5.1-20001007
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.53 2000/07/24 04:06:09 millert Exp $	*/
d52 2
a53 2
#define NCURSES_VERSION_MINOR 1
#define NCURSES_VERSION_PATCH 20001004
d57 1
a57 1
#define NCURSES_VERSION "5.1"
@


1.53
log
@Update to ncurses-5.1-20000722
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.52 2000/07/10 03:06:10 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.93 2000/07/08 11:07:26 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000722
d68 1
a68 1
#define NCURSES_CONST 
d362 1
a362 1
#if	GCC_PRINTF
d368 1
a368 1
#if	GCC_SCANF
d1348 1
@


1.52
log
@ncurses 5.1
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.51 2000/06/19 03:53:35 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000708
@


1.51
log
@ncurses-5.0-20000617
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.50 2000/04/04 16:49:58 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.92 2000/04/29 18:52:53 tom Exp $ */
d52 2
a53 2
#define NCURSES_VERSION_MINOR 0
#define NCURSES_VERSION_PATCH 20000617
d57 1
a57 1
#define NCURSES_VERSION "5.0"
d731 2
@


1.50
log
@Update to ncurses-5.0-20000401:
 o change unctrl() to render C1 characters (128-159) as ~@@, ~A, etc.
 o trace() function is provided only if TRACE is defined, e.g., in the debug
   library.  Modify related calls to _tracechar() to use unctrl() instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.49 2000/03/26 16:45:02 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.90 2000/02/19 22:15:43 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000401
d70 6
d256 3
a258 3
	short   firstchar;	/* first changed character in the line */
	short   lastchar;	/* last changed character in the line */
	short   oldindex;	/* index of the line at last update */
d263 1
a263 1
	short   _cury, _curx;	/* current cursor position */
d266 2
a267 2
	short   _maxy, _maxx;	/* maximums of x and y, NOT window size */
	short   _begy, _begx;	/* screen coords of upper-left-hand corner */
d290 2
a291 2
	short	_regtop;	/* top line of scrolling region */
	short	_regbottom;	/* bottom line of scrolling region */
d301 3
a303 3
	    short _pad_y,      _pad_x;
	    short _pad_top,    _pad_left;
	    short _pad_bottom, _pad_right;
d306 1
a306 1
	short   _yoffset;	/* real begy is _begy + _yoffset */
d961 1
a961 1
#define redrawwin(w)		wredrawln(w, 0, w->_maxy+1)
@


1.49
log
@Update to ncurses-5.0-20000325
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.48 2000/03/13 23:53:38 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000325
@


1.48
log
@update to ncurses-5.0-20000311
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.47 2000/03/10 01:35:01 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000311
@


1.47
log
@Update to ncurses-5.0-20000304
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.46 2000/02/06 07:10:50 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000304
@


1.46
log
@ncurses-5.0-20000205
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.45 2000/01/23 04:57:41 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d36 1
a36 1
/* $From: curses.h.in,v 1.89 2000/01/09 01:10:20 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000129
@


1.45
log
@Update to ncurses-5.0-20000122
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.44 2000/01/16 01:35:17 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000122
@


1.44
log
@Update to ncurses-5.0-20000115:
+ additional fixes for non-bce terminals (handling of delete_character)
to work when assume_default_colors() is not specified.
+ modify warning message from _nc_parse_entry() regarding extended
capability names to print only if tic/infocmp/toe have the -v flag
set, and not at all in ordinary user applications.  Otherwise, this
warning would be shown for screen's extended capabilities in programs
that use the termcap interface.
+ modify use of _nc_tracing from programs such as tic so their debug
level is not in the same range as values set by trace() function.
+ small panel header cleanup (patch by Juergen Pfeifer).
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.43 2000/01/09 05:06:01 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000115
@


1.43
log
@Update to ncurses-5.0-20000108:
+ add prototype for erase() to curses.h
+ add TRACE_DATABASE flag for trace().
+ formatting changes (style)
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.42 2000/01/02 22:06:50 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000108
@


1.42
log
@+ corrected conversion from terminfo rs2 to termcap rs (cf: 980704)
+ make conversion to termcap ug (underline glitch) more consistently applied.
+ modify read_termtype(), fixing 'toe', which could dump core when it
found an incomplete entry such as "dumb" because it did not
initialize its buffer for _nc_read_file_entry().
+ use explicit VALID_NUMERIC() checks in a few places that had been
overlooked, and add a check to ensure that init_tabs is nonzero,
to avoid divide-by-zero (reported by Todd C Miller).
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.41 1999/12/28 19:16:24 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.87 1999/11/14 00:21:57 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 20000101
d442 1
d1339 1
@


1.41
log
@neglected to update NCURSES_VERSION_PATCH
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.40 1999/12/12 04:49:18 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 19991218
@


1.40
log
@Update to ncurses-19991211:
 o treat as untranslatable to termcap those terminfo strings which
   contain non-decimal formatting, e.g., hexadecimal or octal.
 o correct commented-out capabilities that cannot be translated to
   termcap, which did not check if a colon must be escaped.
 o correct termcap translation for "%>" and "%+", which did not check
   if a colon must be escaped, for instance.
 o use save_string/save_char for _nc_captoinfo() to eliminate fixed
   buffer (originally for _nc_infotocap() in 960301 -TD).
 o correct expression used for terminfo equivalent of termcap %B,
   adjust regent100 entry which uses this.
 o some cleanup and commenting of ad hoc cases in _nc_infotocap().
 o eliminate a fixed-buffer in tic, used for translating comments.
 o add manpage for infotocap.
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.39 1999/12/06 02:13:31 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 19991211
@


1.39
log
@update to ncurses-5.0-19991204
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.38 1999/11/28 17:53:40 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 19991204
@


1.38
log
@update to ncurses-5.0-19991127
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.37 1999/08/22 17:42:44 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 19991127
@


1.37
log
@ncurses-5.0-990821
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.36 1999/08/15 11:41:04 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.84 1999/07/24 20:15:42 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990821
d92 1
a92 1
typedef char bool;
d316 5
d322 2
a330 2
extern char ttytype[];		/* needed for backward compatibility */

d1350 8
@


1.36
log
@Update to ncurses-5.0-990814
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.35 1999/07/11 14:13:46 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990814
@


1.35
log
@ncurses-990710:
Correct logic in write_entry from split-out of home_terminfo in
980919, which prevented update of $HOME/.terminfo
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.34 1999/07/04 12:43:22 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.83 1999/06/16 00:25:26 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990710
d332 1
a332 1
#if defined(__cplusplus) || (!defined(__GNUC__) && !defined(__attribute__))
d334 11
@


1.34
log
@ncurses-5.0-990703 -- better support for mixing termcap and terminfo/curses routines
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.33 1999/06/27 08:15:19 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990703
@


1.33
log
@ncurses-5.0-990626
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.32 1999/06/15 03:07:48 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990626
@


1.32
log
@ncurses-5.0-990614 -- only affects ada stuff which we don't ship so just update NCURSES_VERSION_PATCH
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.31 1999/06/14 17:26:03 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.82 1999/06/06 00:38:49 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990614
d90 1
a90 1
#if !defined(__cplusplus) || !1
@


1.31
log
@cvs skipped these files in the previous commit for mysterious reasons
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.30 1999/05/17 03:03:55 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990612
@


1.30
log
@ncurses-4.2-990516; no code changes
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.29 1999/05/08 20:28:57 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.81 1999/02/28 23:38:22 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990516
d91 1
@


1.29
log
@ncurses-4.2-990424
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.28 1999/03/28 18:01:04 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990417
@


1.28
log
@ncurses-4.2-990327; just man page fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.27 1999/03/18 16:46:57 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990327
@


1.27
log
@ncurses-4.2-990318
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.26 1999/03/16 15:25:08 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990318
@


1.26
log
@ncurses-4.2-990316
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.25 1999/03/15 19:12:19 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990316
@


1.25
log
@ncurses-4.2-990314
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.24 1999/03/14 03:14:19 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990314
@


1.24
log
@ncurses-4.2-990313
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.23 1999/03/12 04:36:01 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990313
@


1.23
log
@these somehow got missed in the earlier curses commit
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.22 1999/03/02 06:23:26 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990307
@


1.22
log
@ncurses-4.2-990301
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.21 1999/02/24 06:33:14 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990301
@


1.21
log
@This is 5.0, not 4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.20 1999/02/24 06:31:06 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.79 1999/02/19 12:03:06 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990220
a81 4
 *
 * To simplify use with/without the configuration script, we define the symbols
 * CXX_BUILTIN_BOOL and CXX_TYPE_OF_BOOL; they're edited by the configure
 * script.
d85 2
d88 1
a88 2
#define CXX_BUILTIN_BOOL 1
#define CXX_TYPE_OF_BOOL char
d90 2
a91 7
#if defined(__cplusplus) && CXX_BUILTIN_BOOL
#define TRUE    ((CXX_TYPE_OF_BOOL)true)
#define FALSE   ((CXX_TYPE_OF_BOOL)false)
#else
typedef CXX_TYPE_OF_BOOL bool;
#define TRUE    ((bool)1)
#define FALSE   ((bool)0)
d320 1
@


1.20
log
@ncurses-4.2-990220; this is a pre-release of 5.0
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.19 1999/02/24 05:36:09 millert Exp $	*/
d51 2
a52 2
#define NCURSES_VERSION_MAJOR 4
#define NCURSES_VERSION_MINOR 2
d57 1
a57 1
#define NCURSES_VERSION "4.2"
@


1.19
log
@ncurses-990213
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.18 1999/02/11 00:09:36 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.78 1999/01/10 03:21:11 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990213
d323 1
@


1.18
log
@Update to ncurses-4.2-990206:
    suppress sc/rc capabilities from terminal description if they appear
    in smcup/rmcup.  This affects only scrolling optimization, to fix a
    problem reported by several people with xterm's alternate screen,
    though the problem is more general.
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.17 1999/01/31 20:17:06 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990206
@


1.17
log
@ncurses-4.2-990130
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.16 1999/01/24 20:06:44 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990130
@


1.16
log
@ncurses-4.2-990123
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.15 1999/01/18 19:07:17 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990123
@


1.15
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.14 1998/11/17 03:16:20 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 990116
@


1.14
log
@update to ncurses-4.2-981114
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.13 1998/10/31 06:30:28 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.71 1998/09/05 22:03:59 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 981114
d67 1
a67 1
#undef	NCURSES_CONST
d401 1
a401 1
extern int border_set(cchar_t*,cchar_t*,cchar_t*,cchar_t*,cchar_t*,cchar_t*,cchar_t*,cchar_t*);	/* missing */
a436 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern int erase_wchar(wchar_t *);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d495 1
a495 1
extern int in_wchntr(NCURSES_CONST cchar_t *, int);	/* missing */
d563 1
a563 1
extern int mvin_wchntr(int, int, NCURSES_CONST cchar_t *, int);	/* missing */
d742 1
d762 1
a762 1
extern int wborder_set(WINDOW *,cchar_t*,cchar_t*,cchar_t*,cchar_t*,cchar_t*,cchar_t*,cchar_t*,cchar_t*);	/* missing */
d840 2
d1043 1
a1043 1
#define add_wch(c)			wadd_wch(stsdscr,c)
d1050 1
a1050 1
#define box_set(w,v,h)			wborder_set(w,v,v,h,h,0,0,0,9)
d1085 3
a1087 3
#define mvwadd_wch(y,x,win,c)		(wmove(win,y,x) == ERR ? ERR : wadd_wch(stsdscr,c))
#define mvwaddnwstr(y,x,win,wstr,n)	(wmove(win,y,x) == ERR ? ERR : waddnwstr(stdscr,wstr,n))
#define mvwaddwstr(y,x,win,wstr,n)	(wmove(win,y,x) == ERR ? ERR : waddnwstr(stdscr,wstr,-1))
d1089 1
a1089 1
#define mvwget_wch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : wget_wch(win,n))
d1098 1
a1098 1
#define mvwins_wch(win,y,x,c)		(wmove(win,y,x) == ERR ? ERR : wins_wch(c))
d1107 1
a1107 1
#define vline_set(c,n)			vhline_set(stdscr,c,n)
d1291 3
@


1.13
log
@update to ncurses 4.2-981017
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.12 1998/09/17 04:14:29 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.68 1998/09/05 22:03:59 tom Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 981017
d67 1
a67 1
#ifndef NCURSES_CONST
a68 1
#endif
d796 1
a796 1
extern chtype winch(WINDOW *);				/* generated */
a919 1
#define winch(win)       	((win)?(win)->_line[(win)->_cury].text[(win)->_curx]:0)
d1303 1
a1303 1
extern char *_tracebits(void);
@


1.12
log
@ncurses-4.2-980912
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.11 1998/09/13 19:16:24 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 980912
@


1.11
log
@ncurses-4.2-980905
@
text
@d1 1
a1 1
/*	$OpenBSD: SigAction.h,v 1.1 1998/07/23 21:17:25 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 980905
@


1.10
log
@update to ncurses-4.2-980801
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.9 1998/07/27 03:37:28 millert Exp $	*/
d36 1
a36 1
/* $From: curses.h.in,v 1.67 1998/07/11 20:17:07 dnelson Exp $ */
d53 1
a53 1
#define NCURSES_VERSION_PATCH 980801
d717 1
@


1.9
log
@update to ncurses-4.2-980725
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.8 1998/07/23 21:18:11 millert Exp $	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 980725
@


1.8
log
@ncurses-4.2-980718
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 1
a53 1
#define NCURSES_VERSION_PATCH 980718
@


1.7
log
@Use _ti_get_screensize() from libtermlib to update screen size if changed
    after a program is suspended.
Define EXTERN_TERMINFO in curses.h.
Update to ncurses-4.1-980103 and crank minor.
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.6 1997/12/14 23:15:44 millert Exp $	*/
d3 32
a34 19
/***************************************************************************
*                            COPYRIGHT NOTICE                              *
****************************************************************************
*                ncurses is copyright (C) 1992-1995                        *
*                          Zeyd M. Ben-Halim                               *
*                          zmbenhal@@netcom.com                             *
*                          Eric S. Raymond                                 *
*                          esr@@snark.thyrsus.com                           *
*                                                                          *
*        Permission is hereby granted to reproduce and distribute ncurses  *
*        by any means and for any fee, whether alone or as part of a       *
*        larger distribution, in source or in binary form, PROVIDED        *
*        this notice is included with any such distribution, and is not    *
*        removed from any of its header files. Mention of ncurses in any   *
*        applications linked with it is highly appreciated.                *
*                                                                          *
*        ncurses comes AS IS with no warranty, implied or expressed.       *
*                                                                          *
***************************************************************************/
d36 1
a36 1
/* Id: curses.h.in,v 1.59 1997/11/15 22:02:42 tom Exp $ */
a43 4
#ifdef __OpenBSD__
#define	EXTERN_TERMINFO
#endif

d52 2
a53 2
#define NCURSES_VERSION_MINOR 1
#define NCURSES_VERSION_PATCH 980103
d57 1
a57 1
#define NCURSES_VERSION "4.1"
d68 1
a68 1
#define NCURSES_CONST /* nothing */
a70 6
#ifdef EXTERN_TERMINFO
#ifndef _CHTYPE_T_
#define _CHTYPE_T_	unsigned long
typedef _CHTYPE_T_	chtype;
#endif
#else
a71 1
#endif
a323 1
/* non-XSI extensions (dickey@@clark.net) */
d388 4
a391 4
extern int attr_get(void);				/* generated */
extern int attr_off(NCURSES_ATTR_T);			/* generated */
extern int attr_on(NCURSES_ATTR_T);			/* generated */
extern int attr_set(NCURSES_ATTR_T);			/* generated */
d397 1
a397 1
extern int bkgrndset(const cchar_t *);			/* missing */
d402 1
a402 1
extern int border_set(cchar_t,cchar_t,cchar_t,cchar_t,cchar_t,cchar_t,cchar_t,cchar_t);	/* missing */
d406 1
a406 1
extern int box_set(WINDOW *, cchar_t, cchar_t);		/* missing */
d416 1
a416 1
extern int color_set(short,void*);			/* missing */
d464 2
a465 2
extern int has_ic(void);				/* implemented */
extern int has_il(void);				/* implemented */
d497 8
a504 8
extern int in_wch(const cchar_t *);			/* missing */
extern int in_wchstr(const cchar_t *);			/* missing */
extern int in_wchntr(const cchar_t *, int);		/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
extern int isendwin(void);				/* implemented */
extern int is_linetouched(WINDOW *,int);		/* implemented */
extern int is_wintouched(WINDOW *);			/* implemented */
extern const char *keyname(int);			/* implemented */
d506 1
a506 1
extern int key_name(wchar_t *);				/* missing */
d565 3
a567 3
extern int mvin_wch(int, int, const cchar_t *);		/* missing */
extern int mvin_wchstr(int, int, const cchar_t *);	/* missing */
extern int mvin_wchntr(int, int, const cchar_t *, int);	/* missing */
d569 1
a569 1
extern int mvprintw(int,int,const char *,...)		/* implemented */
d571 1
a571 1
extern int mvscanw(int,int,const char *,...)		/* implemented */
d624 3
a626 3
extern int mvwin_wch(WINDOW *, int, int, const cchar_t *);	/* missing */
extern int mvwin_wchnstr(WINDOW *, int,int,const cchar_t *,int); /* missing */
extern int mvwin_wchstr(WINDOW *, int, int, const cchar_t *);	/* missing */
d628 1
a628 1
extern int mvwprintw(WINDOW*,int,int,const char *,...)	/* implemented */
d630 1
a630 1
extern int mvwscanw(WINDOW *,int,int,const char *,...)	/* implemented */
d638 1
a638 1
extern SCREEN *newterm(const char *,FILE *,FILE *);	/* implemented */
d645 1
a645 1
extern int noqiflush(void);				/* implemented */
d658 1
a658 1
extern int printw(const char *,...)			/* implemented */
a659 1
#ifndef EXTERN_TERMINFO
a660 1
#endif
d662 1
a662 1
extern int qiflush(void);				/* implemented */
d671 1
a671 1
extern int scanw(const char *,...)			/* implemented */
d681 1
a681 1
extern int setcchar(cchar_t *, wchar_t *, attr_t, short, const void *);	/* missing */
d685 7
a691 7
extern int slk_attroff(const attr_t);			/* implemented */
extern int slk_attr_off(attr_t);			/* generated:WIDEC */
extern int slk_attron(const attr_t);			/* implemented */
extern int slk_attr_on(attr_t);				/* generated:WIDEC */
extern int slk_attrset(const attr_t);			/* implemented */
extern attr_t slk_attr(void);                           /* implemented */
extern int slk_attr_set(attr_t);			/* generated:WIDEC */
d693 1
d702 1
a702 1
extern int slk_wset(int, wchar_t *, int);		/* missing */
d713 4
a716 4
extern int tigetflag(const char *);			/* implemented */
extern int tigetnum(const char *);			/* implemented */
extern char *tigetstr(const char *);			/* implemented */
extern int timeout(int);				/* generated */
d720 1
a720 1
extern int unget_wch(const wchar_t *);			/* missing */
a722 1
#ifndef EXTERN_TERMINFO
d725 1
a725 2
#endif
extern int vid_attr(attr_t);				/* generated:WIDEC */
d728 1
a728 1
extern int vid_puts(attr_t, int (*)(int));		/* missing */
d734 4
a737 4
extern int vwprintw(WINDOW *,const char *,va_list);	/* implemented */
extern int vw_printw(WINDOW *,const char *,va_list);	/* generated */
extern int vwscanw(WINDOW *,const char *,va_list);	/* implemented */
extern int vw_scanw(WINDOW *,const char *,va_list);	/* generated */
d752 4
a755 4
extern attr_t wattr_get(WINDOW *);			/* generated */
extern int wattr_on(WINDOW *, const attr_t);		/* implemented */
extern int wattr_off(WINDOW *, const attr_t);		/* implemented */
extern int wattr_set(WINDOW *, attr_t);			/* generated */
d759 1
a759 1
extern int wbkgrndset(WINDOW *,const cchar_t *);	/* missing */
d764 1
a764 1
extern int wborder_set(WINDOW *,cchar_t,cchar_t,cchar_t,cchar_t,cchar_t,cchar_t,cchar_t,cchar_t);	/* missing */
d770 1
a770 1
extern int wcolor_set(WINDOW*,short,void*);		/* missing */
d814 3
a816 3
extern int win_wch(WINDOW *, const cchar_t *);		/* missing */
extern int win_wchnstr(WINDOW *, const cchar_t *, int);	/* missing */
extern int win_wchstr(WINDOW *, const cchar_t *);	/* missing */
d820 1
a820 1
extern int wprintw(WINDOW *,const char *,...)		/* implemented */
d824 1
a824 1
extern int wscanw(WINDOW *,const char *,...)		/* implemented */
d832 1
a832 1
extern int wtimeout(WINDOW *,int);			/* implemented */
d835 1
a835 1
extern wchar_t wunctrl(cchar_t *);			/* missing */
d902 6
a907 2
#define getsyx(y,x)		getyx(stdscr, y, x)
#define setsyx(y,x)		(stdscr->_cury = y, stdscr->_curx = x)
d921 7
a927 7
#define wstandout(win)      	(wattr_set(win,A_STANDOUT))
#define wstandend(win)      	(wattr_set(win,A_NORMAL))
#define wattr_set(win,at)    	((win)?((win)->_attrs = (at)):0)

#define wattron(win,at)		wattr_on(win, at)
#define wattroff(win,at)	wattr_off(win, at)
#define wattrset(win,at)    	wattr_set(win, at)
d965 1
d1047 4
a1050 4
#define attr_get()			wattr_get(stdscr)
#define attr_off(a)			wattr_off(stdscr,a)
#define attr_on(a)			wattr_on(stdscr,a)
#define attr_set(a)			wattr_set(stdscr,a)
d1104 4
a1107 4
#define slk_attr_off(a)			slk_attroff(a)
#define slk_attr_on(a)			slk_attron(a)
#define slk_attr_set(a)			slk_attrset(a)
#define vid_attr(a)			vidattr(a)
d1110 3
a1112 1
#define wattr_get(win)			((win)->_attrs)
@


1.6
log
@ncurses-4.1-971213
@
text
@d1 1
a1 1
/*	$OpenBSD: curses.h,v 1.5 1997/12/03 05:21:07 millert Exp $	*/
d31 4
d44 1
a44 1
#define NCURSES_VERSION_PATCH 971213
d724 1
@


1.5
log
@Merge of ncurses-4.1-971129
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
#define NCURSES_VERSION_PATCH 971129
@


1.4
log
@ncurses 4.1 + changes to work with our terminfo libs (instead of
the ncurses ones).  Changes are #ifdef EXTERN_TERMINFO.
Post 4.1 patches will be applied in a separate commit.
@
text
@d1 2
d23 1
a23 1
/* Id: curses.h.in,v 1.44 1997/04/20 01:32:08 tom Exp $ */
d27 1
d31 6
d40 1
a40 1
#define NCURSES_VERSION_PATCH 970515
d64 1
a64 3
#ifndef _UNCTRL_H
typedef unsigned long  chtype;
#endif
d103 1
a103 2
 * A_ attributes because attr_t is just an int.  The XSI Curses attr_* and
 * wattr_* entry points are all mapped to attr* and wattr* entry points.
d105 17
a121 17
#define WA_ATTRIBUTES	0xffffff00
#define WA_NORMAL	0x00000000
#define WA_STANDOUT	0x00010000
#define WA_UNDERLINE	0x00020000
#define WA_REVERSE	0x00040000
#define WA_BLINK	0x00080000
#define WA_DIM		0x00100000
#define WA_BOLD		0x00200000
#define WA_ALTCHARSET	0x00400000
#define WA_INVIS	0x00800000
#define WA_PROTECT	0x01000000
#define WA_HORIZONTAL	0x02000000	/* XSI Curses attr -- not yet used */
#define WA_LEFT		0x04000000	/* XSI Curses attr -- not yet used */
#define WA_LOW		0x08000000	/* XSI Curses attr -- not yet used */
#define WA_RIGHT	0x10000000	/* XSI Curses attr -- not yet used */
#define WA_TOP		0x20000000	/* XSI Curses attr -- not yet used */
#define WA_VERTICAL	0x40000000	/* XSI Curses attr -- not yet used */
d165 1
a165 1
#define ACS_LANTERN	(acs_map['I'])	/* lantern symbol */
d249 10
a258 1
struct _win_st {
d283 1
a283 9
	/* the actual line data */
	struct ldat
	{
	    chtype  *text;	/* text of the line */
	    short   firstchar;  /* first changed character in the line */
	    short   lastchar;   /* last changed character in the line */
	    short   oldindex;	/* index of the line at last update */
	}
	*_line;
d305 7
a311 3
extern WINDOW   *stdscr, *curscr, *newscr;

extern int	LINES, COLS, TABSIZE;
d319 2
d322 1
a323 1
extern int use_default_colors (void);
d331 1
d333 1
a333 1
#if !defined(__GNUC__) && !defined(__attribute__)
d411 1
d429 1
d453 1
a453 1
extern WINDOW *getwin(FILE *);				/* not in XPG4 */
d647 1
a647 1
extern int pechochar(WINDOW *, chtype);			/* implemented */
d683 1
a683 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern int slk_attr_off(attr_t);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d685 1
a685 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern int slk_attr_on(attr_t);				/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d688 1
a688 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern int slk_attr_set(attr_t);			/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d706 2
a707 1
extern attr_t termattrs(void);				/* implemented */
d722 1
a722 3
#ifdef _XOPEN_SOURCE_EXTENDED
extern int vid_attr(attr_t);				/* missing */
#endif /* _XOPEN_SOURCE_EXTENDED */
d754 1
a754 1
extern void wbkgdset(WINDOW *,chtype);			/* generated */
d767 1
d840 38
a877 20
#define A_ATTRIBUTES	0xffffff00
#define A_NORMAL	0x00000000
#define A_STANDOUT	0x00010000
#define A_UNDERLINE	0x00020000
#define A_REVERSE	0x00040000
#define A_BLINK		0x00080000
#define A_DIM		0x00100000
#define A_BOLD		0x00200000
#define A_ALTCHARSET	0x00400000
#define A_INVIS		0x00800000
#define A_PROTECT	0x01000000
#define A_HORIZONTAL	0x02000000	/* XSI Curses attr -- not yet used */
#define A_LEFT		0x04000000	/* XSI Curses attr -- not yet used */
#define A_LOW		0x08000000	/* XSI Curses attr -- not yet used */
#define A_RIGHT		0x10000000	/* XSI Curses attr -- not yet used */
#define A_TOP		0x20000000	/* XSI Curses attr -- not yet used */
#define A_VERTICAL	0x40000000	/* XSI Curses attr -- not yet used */
#define A_CHARTEXT	0x000000ff
#define A_COLOR		0x0000ff00
#define COLOR_PAIR(n)	((n) << 8)
d895 4
a898 4
#define getyx(win,y,x)   	(y = (win)->_cury, x = (win)->_curx)
#define getbegyx(win,y,x)	(y = (win)->_begy, x = (win)->_begx)
#define getmaxyx(win,y,x)	(y = (win)->_maxy + 1, x = (win)->_maxx + 1)
#define getparyx(win,y,x)	(y = (win)->_pary, x = (win)->_parx)
a901 5
#define	wbkgdset(win, ch) \
	(((win)->_attrs = (((win)->_attrs & ~((win)->_bkgd & A_ATTRIBUTES)) | \
	    ((ch) & A_ATTRIBUTES))), \
	    ((win)->_bkgd = (ch)))

d903 9
a911 3
#define getattrs(win)		((win)->_attrs)
#define getmaxx(win)		((win)->_maxx + 1)
#define getmaxy(win)		((win)->_maxy + 1)
d913 1
a913 1
#define winch(win)       	((win)->_line[(win)->_cury].text[(win)->_curx])
d916 1
a916 1
#define wattr_set(win,at)    	((win)->_attrs = (at))
d924 1
a924 1
#define touchwin(win)		wtouchln((win), 0, (win)->_maxy + 1, 1)
d926 1
a926 1
#define untouchwin(win)		wtouchln((win), 0, (win)->_maxy + 1, 0)
d1096 4
d1222 1
d1280 1
a1280 1
extern bool wenclose(WINDOW *, int, int);
d1319 1
@


1.3
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@a0 1

d21 1
a26 1
#define NCURSES_VERSION "1.9.9e"
d28 22
d51 1
a51 1
#define	_CHTYPE_T_	unsigned long
d54 5
d60 1
a60 1
#include <stdio.h>   
d62 1
a62 1
#include <stdarg.h>
d90 4
a119 1
extern unsigned char *color_pairs;
d132 1
a132 1
extern 	chtype acs_map[];
d179 1
a179 1
 */ 
d207 1
a207 1
#define _NEED_WRAP	0x40	/* cursor wrap pending */
d210 1
a210 1
 * this value is used in the firstchar and lastchar fields to mark 
d294 2
d307 4
a310 3
#ifdef __cplusplus
extern "C" {
#endif
d324 24
d366 3
a368 3
extern int attroff(int);				/* generated */
extern int attron(int);					/* generated */
extern int attrset(int);				/* generated */
d370 3
a372 3
extern int attr_off(int);				/* implemented */
extern int attr_on(int);				/* implemented */
extern int attr_set(int);				/* generated */
d402 1
a402 1
extern int delay_output(float);				/* implemented */
d423 1
a424 1
extern chtype getbkgd(WINDOW *);			/* missing */
d431 1
a431 1
extern int getn_wstr(wint_t *, int n);			/* missing */
d442 1
a442 1
extern int has_colors(void);				/* implemented */
d449 1
a449 1
extern int idcok(WINDOW *, bool);			/* implemented */
d451 1
a451 1
extern int immedok(WINDOW *, bool);			/* implemented */
d491 1
a491 1
#endif /* _XOPEN_SOURCE_EXTENDED */	
d515 1
a515 1
extern int mvgetn_wstr(int, int, wint_t *, int n);	/* missing */
d548 4
a551 2
extern int mvprintw(int,int,const char *,...);		/* implemented */
extern int mvscanw(int,int,const char *,...);		/* implemented */
d573 1
a573 1
extern int mvwgetn_wstr(WINDOW *, int, int, wint_t *, int n);/* missing */
d607 4
a610 2
extern int mvwprintw(WINDOW*,int,int,const char *,...);	/* implemented */
extern int mvwscanw(WINDOW *,int,int,const char *,...);	/* implemented */
d630 1
a630 1
extern int PAIR_NUMBER(int);				/* generated */	
d637 3
a639 1
extern int printw(const char *,...);			/* implemented */
d641 1
d650 1
a650 1
extern int ripoffline(int line, int (*init)(WINDOW *, int));/* implemented */
d652 2
a653 1
extern int scanw(const char *,...);			/* implemented */
d666 1
a666 1
extern int slk_attroff(chtype);				/* implemented */
d670 1
a670 1
extern int slk_attron(chtype);				/* implemented */
d674 2
a675 1
extern int slk_attrset(chtype);				/* implemented */
d695 1
a695 1
extern int syncok(WINDOW *win, bool);			/* implemented */
d701 1
a701 1
extern int timeout(int);				/* implemented */
d708 1
d710 1
d723 1
a723 1
extern int vw_printw(WINDOW *,const char *,va_list);	/* implemented */
d725 1
a725 1
extern int vw_scanw(WINDOW *,const char *,va_list);	/* implemented */
d743 1
a743 1
extern int wattr_set(WINDOW *, attr_t);			/* implemented */
d807 2
a808 1
extern int wprintw(WINDOW *,const char *,...);		/* implemented */
d811 2
a812 2
extern int wresize(WINDOW *, int, int);			/* implemented */
extern int wscanw(WINDOW *,const char *,...);		/* implemented */
a828 4
#ifdef __cplusplus
}
#endif

d849 2
a850 2
#define COLOR_PAIR(n)	(n << 8) 
#define PAIR_NUMBER(a)	((a & A_COLOR) >> 8)
d865 1
a865 1
#define gettmode()		
d874 4
a877 1
#define wbkgdset(win,ch)	((win)->_bkgd = (ch))
d916 6
a921 5
#define bkgdset(ch)		wbkgdset(stdscr,ch)
#define bkgd(ch)		wbkgd(stdscr,ch)
#define inch()       		winch(stdscr)
#define standout()     		wstandout(stdscr)
#define standend()     		wstandend(stdscr)
a922 1
#define attroff(at)    		wattroff(stdscr,at)
d924 2
a925 6
#define addch(ch)      		waddch(stdscr,ch)
#define echochar(c)		wechochar(stdscr, c)
#define getch()        		wgetch(stdscr)
#define addstr(str)    		waddnstr(stdscr,str,-1)
#define getstr(str)    		wgetstr(stdscr,str)
#define move(y, x)     		wmove(stdscr,y,x)
a926 1
#define erase()        		werase(stdscr)
d929 17
a945 4
#define insertln()     		winsdelln(stdscr, 1)
#define winsertln(w)     	winsdelln(w, 1)
#define deleteln()     		winsdelln(stdscr, -1)
#define wdeleteln(w)     	winsdelln(w, -1)
d947 1
a947 2
#define insch(c)       		winsch(stdscr,c)
#define delch()        		wdelch(stdscr)
d949 5
a953 12
#define scrl(n)			wscrl(stdscr,n)
#define timeout(delay)		wtimeout(stdscr, delay)
#define addnstr(str,n)		waddnstr(stdscr,str,n)
#define addchstr(str)		waddchstr(stdscr,str)
#define addchnstr(str,n)	waddchnstr(stdscr,str, n)
#define insdelln(n)		winsdelln(stdscr, n)
#define insstr(s)		winsstr(stdscr, s)
#define insnstr(s,n)		winsnstr(stdscr, s, n)
#define instr(s)		winstr(stdscr, s)
#define innstr(s,n)		winnstr(stdscr, s, n)
#define inchstr(s)		winchstr(stdscr, s)
#define inchnstr(s,n)		winchnstr(stdscr, s, n)
a959 1
#define mvwgetch(win,y,x)       	(wmove(win,y,x) == ERR ? ERR : wgetch(win))
d964 3
d968 5
a972 4
#define mvgetnstr(y,x,str,n)    	(move(y,x) == ERR ? ERR : wgetnstr(stdscr,str,n))
#define mvwgetnstr(win,y,x,str,n)    	(wmove(win,y,x) == ERR ? ERR : wgetnstr(win,str,n))
#define mvwinch(win,y,x)        	(wmove(win,y,x) == ERR ? ERR : winch(win))
#define mvwdelch(win,y,x)       	(wmove(win,y,x) == ERR ? ERR : wdelch(win))
d974 3
a976 1
#define mvwhline(win,y,x,c,n)     	(wmove(win,y,x) == ERR ? ERR : whline(win,c,n))
d978 1
a981 1
#define mvgetch(y,x)            	mvwgetch(stdscr,y,x)
d984 3
d988 1
d990 3
a992 1
#define mvdelch(y,x)            	mvwdelch(stdscr,y,x)
d994 1
a994 4
#define mvhline(y,x,c,n)		mvwhline(stdscr,y,x,c,n)
#define mvvline(y,x,c,n)		mvwvline(stdscr,y,x,c,n)
#define mvwinsstr(w, y, x, s)		(wmove(w,y,x) == ERR ? ERR : winsstr(w,s))
#define mvwinsnstr(w, y, x, s, n)	(wmove(w,y,x) == ERR ? ERR : winsnstr(w,s,n))
a995 3
#define mvinsnstr(y,x,s,n)		mvwinsnstr(stdscr,y,x,s,n)
#define mvwinstr(w, y, x, s)		(wmove(w,y,x) == ERR ? ERR : winstr(w,s))
#define mvwinnstr(w, y, x, s, n)	(wmove(w,y,x) == ERR ? ERR : winnstr(w,s,n))
d997 1
a997 5
#define mvinnstr(y,x,s,n)		mvwinnstr(stdscr,y,x,s,n)
#define mvwinchstr(w, y, x, s)		(wmove(w,y,x) == ERR ? ERR : winchstr(w,s))
#define mvwinchnstr(w, y, x, s, n)	(wmove(w,y,x) == ERR ? ERR : winchnstr(w,s,n))
#define mvinchstr(y,x,s)		mvwinchstr(stdscr,y,x,s)
#define mvinchnstr(y,x,s,n)		mvwinchnstr(stdscr,y,x,s,n)
d1001 1
a1001 1
 * The underling functions needed to make these work are:
d1007 67
a1073 64
#define addnwstr(wstr, n)	waddnwstr(stdscr, wstr, n)
#define addwstr(wstr, n)	waddnwstr(stdscr, wstr, -1)
#define mvaddnwstr(y,x,wstr, n)	(wmove(stdscr,y,x) == ERR ? ERR : waddnwstr(stdscr, wstr, n))
#define mvaddwstr(y,x,wstr, n)	(wmove(stdscr,y,x) == ERR ? ERR : waddnwstr(stdscr, wstr, -1))
#define mvwaddnwstr(y,x,win,wstr,n)	(wmove(win,y,x) == ERR ? ERR : waddnwstr(stdscr, wstr, n))
#define mvwaddwstr(y,x,win,wstr,n)	(wmove(win,y,x) == ERR ? ERR : waddnwstr(stdscr, wstr, -1))
#define waddwstr(win, wstr, n)	waddnwstr(win, wstr, -1)
#define add_wch(c)		wadd_wch(stsdscr, c)
#define mvadd_wch(y,x,c)	(wmove(stdscr,y,x) == ERR ? ERR : wadd_wch(stsdscr, c))
#define mvwadd_wch(y,x,win,c)	(wmove(win,y,x) == ERR ? ERR : wadd_wch(stsdscr, c))
#define wattr_get(win)		((win)->_attrs)
#define attr_get()		wattr_get(stdscr)
#define attr_off(a)		wattr_off(stdscr, a)
#define attr_on(a)		wattr_on(stdscr, a)
#define attr_set(a)		wattr_set(stdscr, a)
#define wgetbkgd(win)		((win)->_bkgd)
#define box_set(w,v,h)		wborder_set(w,v,v,h,h,0,0,0,9)
#define chgat(n, a, c, o)	wchgat(stdscr, n, a, c, o)
#define mvchgat(y,x, n,a,c, o)	(move(y,x)==ERR ? ERR : wchgat(stdscr,n,a,c,o))
#define mvwchgat(w,y,x,n,a,c,o)	(wmove(w,y,x) == ERR ? ERR : wchgat(w,n,a,c,o))
#define echo_wchar(c)		wecho_wchar(stdscr, c)
#define getn_wstr(t, n)		wgetn_wstr(stdscr, t, n)
#define get_wstr(t)		wgetn_wstr(stdscr, t, -1)
#define mvgetn_wstr(y, x, t, n)	(move(y,x)==ERR ? ERR:wgetn_wstr(stdscr,t,n))
#define mvget_wstr(y, x, t)	(move(y,x)==ERR ? ERR:wgetn_wstr(stdscr,t,-1))
#define mvwgetn_wstr(w,y,x,t,n)	(wmove(w,y,x)==ERR ? ERR : wgetn_wstr(w,t,n))
#define mvwget_wstr(w, y, x, t)	(wmove(w,y,x)==ERR ? ERR : wgetn_wstr(w,t,-1))
#define wget_wstr(w, t)		wgetn_wstr(w, t, -1)
#define get_wch(c)		wget_wch(stdscr, c)
#define mvget_wch(y, x, c)	(move(y,x) == ERR ? ERR : wget_wch(stdscr, c))
#define mvwget_wch(y, x, c)	(wmove(w,y,x) == ERR ? ERR : wget_wch(w, n))
#define hline_set(c, n)		whline_set(stdscr, c, n)
#define mvhline_set(y,x,c,n)	(move(y,x)==ERR ? ERR : whline_set(stdscr,c,n))
#define mvvline_set(y,x,c,n)	(move(y,x)==ERR ? ERR : wvline_set(stdscr,c,n))
#define mvwhline_set(w,y,x,c,n)	(wmove(w,y,x)==ERR ? ERR : whline_set(w,c,n))
#define mvwvline_set(w,y,x,c,n)	(wmove(w,y,x)==ERR ? ERR : wvline_set(w,c,n))
#define vline_set(c, n)		vhline_set(stdscr, c, n)
#define innwstr(c, n)		winnwstr(stdscr, c, n)
#define inwstr(c)		winnwstr(stdscr, c, -1)
#define mvinnwstr(y, x, c, n)	(move(y,x)==ERR ? ERR : winnwstr(stdscr, c, n))
#define mvinwstr(y, x, c)	(move(y,x)==ERR ? ERR : winnwstr(stdscr, c,-1))
#define mvwinnwstr(w,y,x,c,n)	(wmove(w,y,x)==ERR ? ERR:winnwstr(stdscr,c,n))
#define mvwinwstr(w,y,x,c)	(wmove(w,y,x)==ERR ? ERR:winnwstr(stdscr,c,-1))
#define winwstr(w, c)		winnwstr(w, c, -1)
#define ins_nwstr(t, n)		wins_nwstr(stdscr, t, n)
#define ins_wstr(t)		wins_nwstr(stdscr, t, -1)
#define mvins_nwstr(y,x,t,n)	(move(y,x)==ERR ? ERR: wins_nwstr(stdscr,t,n))
#define mvins_wstr(y,x,t)	(move(y,x)==ERR ? ERR: wins_nwstr(stdscr,t,-1))
#define mvwins_nwstr(w,y,x,t,n)	(wmove(w,y,x)==ERR?ERR:wins_nwstr(stdscr,t,n))
#define mvwins_wstr(w,y,x,t)	(wmove(w,y,x)==ERR?ERR:wins_nwstr(stdscr,t,-1))
#define wins_wstr(w, t)		wins_nwstr(w, t, -1)
#define ins_wch(c)		wins_wch(stdscr, c)
#define mvins_wch(y,x,c)	(move(y,x) == ERR ? ERR : wins_wch(c))
#define mwvins_wch(w,y,x,c)	(wmove(w,y,x) == ERR ? ERR : wins_wch(c))
#define in_wch(c)		win_wch(stdscr, c)
#define mvin_wch(y,x,c)		(move(y,x) == ERR ? ERR : win_wch(stdscr, c))
#define mvwin_wch(w,y,x,c)	(wmove(w, y,x) == ERR ? ERR : win_wch(w, c))
#define in_wchnstr(c, n)	win_wchnstr(stdscr, c, n)
#define in_wchstr(c)		win_wchnstr(stdscr, c, -1)
#define mvin_wchnstr(y,x,c,n)	(move(y,x)==ERR ? ERR:win_wchnstr(stdscr,c,n))
#define mvin_wchstr(y, x, c)	(move(y,x)==ERR ? ERR:win_wchnstr(stdscr,c,-1))
#define mvwin_wchnstr(w,y,x,c,n)	(wmove(w,y,x)==ERR ? ERR:win_wchnstr(stdscr,c,n))
#define mvwin_wchstr(w,y,x,c)	(wmove(w,y,x)==ERR ? ERR:win_wchnstr(stdscr,c,-1))
#define win_wchstr(w, c)	win_wchnstr(w, c, -1)
d1243 10
a1252 5
int getmouse(MEVENT *event);
int ungetmouse(MEVENT *event);
mmask_t mousemask(mmask_t newmask, mmask_t *oldmask);
bool wenclose(WINDOW *win, int y, int x);
int mouseinterval(int);
d1256 5
a1260 3
extern void _tracef(const char *, ...) __attribute__((format(printf,1,2)));
extern void _tracedump(char *, WINDOW *);
extern char *_traceattr(attr_t mode);
d1262 2
d1265 1
a1265 1
extern void trace(const unsigned int tracelevel);
d1268 26
a1293 13
#define TRACE_DISABLE	0x00	/* turn off tracing */
#define TRACE_UPDATE	0x01	/* trace update actions, old & new screens */
#define TRACE_MOVE	0x02	/* trace cursor moves and scrolls */
#define TRACE_CHARPUT	0x04	/* trace all character outputs */
#define TRACE_ORDINARY	0x07	/* trace all update actions */
#define TRACE_CALLS	0x08	/* trace all curses calls */
#define TRACE_VIRTPUT	0x10	/* trace virtual character puts */
#define TRACE_FIFO	0x20	/* also fifo actions by getch() */
#define TRACE_MAXIMUM	0xff	/* maximum trace level */

#ifdef TRACE
extern bool no_optimize;	/* suppress optimization */
#endif /* TRACE */
@


1.2
log
@use "unsigned int" instead of "u_int" so that _POSIX_SOURCE works.
netbsd pr#2164; from seebs@@taniemarie.solon.com
@
text
@d1 185
d187 2
a188 32
 * Copyright (c) 1981, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)curses.h	8.4 (Berkeley) 8/10/94
d190 4
d195 1
a195 2
#ifndef _CURSES_H_
#define	_CURSES_H_
d197 69
a265 2
#include <sys/types.h>
#include <sys/cdefs.h>
d267 3
a269 1
#include <stdio.h>
d272 1
a272 4
 * The following #defines and #includes are present for backward
 * compatibility only.  They should not be used in future code.
 *
 * START BACKWARD COMPATIBILITY ONLY.
d274 1
a274 3
#ifndef _CURSES_PRIVATE
#define	bool	char
#define	reg	register
d276 2
a277 2
#ifndef TRUE
#define	TRUE	(1)
d279 10
a288 2
#ifndef FALSE
#define	FALSE	(0)
d291 469
a759 2
#define	_puts(s)	tputs(s, 0, __cputchar)
#define	_putchar(c)	__cputchar(c)
d761 3
a763 33
/* Old-style terminal modes access. */
#define	baudrate()	(cfgetospeed(&__baset))
#define	crmode()	cbreak()
#define	erasechar()	(__baset.c_cc[VERASE])
#define	killchar()	(__baset.c_cc[VKILL])
#define	nocrmode()	nocbreak()
#define	ospeed		(cfgetospeed(&__baset))
#endif /* _CURSES_PRIVATE */

extern char	 GT;			/* Gtty indicates tabs. */
extern char	 NONL;			/* Term can't hack LF doing a CR. */
extern char	 UPPERCASE;		/* Terminal is uppercase only. */

extern int	 My_term;		/* Use Def_term regardless. */
extern char	*Def_term;		/* Default terminal type. */

/* Termcap capabilities. */
extern char	AM, BS, CA, DA, EO, HC, IN, MI, MS, NC, NS, OS,
		PC, UL, XB, XN, XT, XS, XX;
extern char	*AL, *BC, *BT, *CD, *CE, *CL, *CM, *CR, *CS, *DC, *DL,
		*DM, *DO, *ED, *EI, *K0, *K1, *K2, *K3, *K4, *K5, *K6,
		*K7, *K8, *K9, *HO, *IC, *IM, *IP, *KD, *KE, *KH, *KL,
		*KR, *KS, *KU, *LL, *MA, *ND, *NL, *RC, *SC, *SE, *SF,
		*SO, *SR, *TA, *TE, *TI, *UC, *UE, *UP, *US, *VB, *VS,
		*VE, *al, *dl, *sf, *sr,
		*AL_PARM, *DL_PARM, *UP_PARM, *DOWN_PARM, *LEFT_PARM,
		*RIGHT_PARM;

/* END BACKWARD COMPATIBILITY ONLY. */

/* 8-bit ASCII characters. */
#define	unctrl(c)		__unctrl[(c) & 0xff]
#define	unctrllen(ch)		__unctrllen[(ch) & 0xff]
d765 22
a786 2
extern char	*__unctrl[256];	/* Control strings. */
extern char	 __unctrllen[256];	/* Control strings length. */
d789 224
a1012 228
 * A window an array of __LINE structures pointed to by the 'lines' pointer.
 * A line is an array of __LDATA structures pointed to by the 'line' pointer.
 *
 * IMPORTANT: the __LDATA structure must NOT induce any padding, so if new
 * fields are added -- padding fields with *constant values* should ensure 
 * that the compiler will not generate any padding when storing an array of
 *  __LDATA structures.  This is to enable consistent use of memcmp, and memcpy
 * for comparing and copying arrays.
 */
typedef struct {
	char ch;			/* the actual character */

#define	__STANDOUT	0x01  		/* Added characters are standout. */
	char attr;			/* attributes of character */
} __LDATA;

#define __LDATASIZE	(sizeof(__LDATA))

typedef struct {
#define	__ISDIRTY	0x01		/* Line is dirty. */
#define __ISPASTEOL	0x02		/* Cursor is past end of line */
#define __FORCEPAINT	0x04		/* Force a repaint of the line */
	unsigned int flags;
	unsigned int hash;			/* Hash value for the line. */
	size_t *firstchp, *lastchp;	/* First and last chngd columns ptrs */
	size_t firstch, lastch;		/* First and last changed columns. */
	__LDATA *line;			/* Pointer to the line text. */
} __LINE;

typedef struct __window {		/* Window structure. */
	struct __window	*nextp, *orig;	/* Subwindows list and parent. */
	size_t begy, begx;		/* Window home. */
	size_t cury, curx;		/* Current x, y coordinates. */
	size_t maxy, maxx;		/* Maximum values for curx, cury. */
	short ch_off;			/* x offset for firstch/lastch. */
	__LINE **lines;			/* Array of pointers to the lines */
	__LINE  *lspace;		/* line space (for cleanup) */
	__LDATA *wspace;		/* window space (for cleanup) */

#define	__ENDLINE	0x001		/* End of screen. */
#define	__FLUSH		0x002		/* Fflush(stdout) after refresh. */
#define	__FULLWIN	0x004		/* Window is a screen. */
#define	__IDLINE	0x008		/* Insert/delete sequences. */
#define	__SCROLLWIN	0x010		/* Last char will scroll window. */
#define	__SCROLLOK	0x020		/* Scrolling ok. */
#define	__CLEAROK	0x040		/* Clear on next refresh. */
#define __WSTANDOUT	0x080		/* Standout window */
#define __LEAVEOK	0x100		/* If curser left */	
	unsigned int flags;
} WINDOW;

/* Curses external declarations. */
extern WINDOW	*curscr;		/* Current screen. */
extern WINDOW	*stdscr;		/* Standard screen. */

extern struct termios __orig_termios;	/* Terminal state before curses */
extern struct termios __baset;		/* Our base terminal state */
extern int __tcaction;			/* If terminal hardware set. */

extern int	 COLS;			/* Columns on the screen. */
extern int	 LINES;			/* Lines on the screen. */

extern char	*ttytype;		/* Full name of current terminal. */

#define	ERR	(0)			/* Error return. */
#define	OK	(1)			/* Success return. */

/* Standard screen pseudo functions. */
#define	addbytes(s, n)			__waddbytes(stdscr, s, n, 0)
#define	addch(ch)			waddch(stdscr, ch)
#define	addnstr(s, n)			waddnstr(stdscr, s, n)
#define	addstr(s)			__waddbytes(stdscr, s, strlen(s), 0)
#define	clear()				wclear(stdscr)
#define	clrtobot()			wclrtobot(stdscr)
#define	clrtoeol()			wclrtoeol(stdscr)
#define	delch()				wdelch(stdscr)
#define	deleteln()			wdeleteln(stdscr)
#define	erase()				werase(stdscr)
#define	getch()				wgetch(stdscr)
#define	getstr(s)			wgetstr(stdscr, s)
#define	inch()				winch(stdscr)
#define	insch(ch)			winsch(stdscr, ch)
#define	insertln()			winsertln(stdscr)
#define	move(y, x)			wmove(stdscr, y, x)
#define	refresh()			wrefresh(stdscr)
#define	standend()			wstandend(stdscr)
#define	standout()			wstandout(stdscr)
#define	waddbytes(w, s, n)		__waddbytes(w, s, n, 0)
#define	waddstr(w, s)			__waddbytes(w, s, strlen(s), 0)

/* Standard screen plus movement pseudo functions. */
#define	mvaddbytes(y, x, s, n)		mvwaddbytes(stdscr, y, x, s, n)
#define	mvaddch(y, x, ch)		mvwaddch(stdscr, y, x, ch)
#define	mvaddnstr(y, x, s, n)		mvwaddnstr(stdscr, y, x, s, n)
#define	mvaddstr(y, x, s)		mvwaddstr(stdscr, y, x, s)
#define	mvdelch(y, x)			mvwdelch(stdscr, y, x)
#define	mvgetch(y, x)			mvwgetch(stdscr, y, x)
#define	mvgetstr(y, x, s)		mvwgetstr(stdscr, y, x, s)
#define	mvinch(y, x)			mvwinch(stdscr, y, x)
#define	mvinsch(y, x, c)		mvwinsch(stdscr, y, x, c)
#define	mvwaddbytes(w, y, x, s, n) \
	(wmove(w, y, x) == ERR ? ERR : __waddbytes(w, s, n, 0))
#define	mvwaddch(w, y, x, ch) \
	(wmove(w, y, x) == ERR ? ERR : waddch(w, ch))
#define	mvwaddnstr(w, y, x, s, n) \
	(wmove(w, y, x) == ERR ? ERR : waddnstr(w, s, n))
#define	mvwaddstr(w, y, x, s) \
	(wmove(w, y, x) == ERR ? ERR : __waddbytes(w, s, strlen(s), 0))
#define	mvwdelch(w, y, x) \
	(wmove(w, y, x) == ERR ? ERR : wdelch(w))
#define	mvwgetch(w, y, x) \
	(wmove(w, y, x) == ERR ? ERR : wgetch(w))
#define	mvwgetstr(w, y, x, s) \
	(wmove(w, y, x) == ERR ? ERR : wgetstr(w, s))
#define	mvwinch(w, y, x) \
	(wmove(w, y, x) == ERR ? ERR : winch(w))
#define	mvwinsch(w, y, x, c) \
	(wmove(w, y, x) == ERR ? ERR : winsch(w, c))

/* Psuedo functions. */
#define	clearok(w, bf) \
	((bf) ? ((w)->flags |= __CLEAROK) : ((w)->flags &= ~__CLEAROK))
#define	flushok(w, bf) \
	((bf) ? ((w)->flags |= __FLUSH) : ((w)->flags &= ~__FLUSH))
#define	getyx(w, y, x) \
	(y) = (w)->cury, (x) = (w)->curx
#define	leaveok(w, bf) \
	((bf) ? ((w)->flags |= __LEAVEOK) : ((w)->flags &= ~__LEAVEOK))
#define	scrollok(w, bf) \
	((bf) ? ((w)->flags |= __SCROLLOK) : ((w)->flags &= ~__SCROLLOK))
#define	winch(w) \
	((w)->lines[(w)->cury]->line[(w)->curx].ch & 0177)

/* Public function prototypes. */
__BEGIN_DECLS
int	 box __P((WINDOW *, int, int));
int	 cbreak __P((void));
int	 delwin __P((WINDOW *));
int	 echo __P((void));
int	 endwin __P((void));
char	*fullname __P((char *, char *));
char	*getcap __P((char *));
int	 gettmode __P((void));
void	 idlok __P((WINDOW *, int));
WINDOW	*initscr __P((void));
char	*longname __P((char *, char *));
int	 mvcur __P((int, int, int, int));
int	 mvprintw __P((int, int, const char *, ...));
int	 mvscanw __P((int, int, const char *, ...));
int	 mvwin __P((WINDOW *, int, int));
int	 mvwprintw __P((WINDOW *, int, int, const char *, ...));
int	 mvwscanw __P((WINDOW *, int, int, const char *, ...));
WINDOW	*newwin __P((int, int, int, int));
int	 nl __P((void));
int	 nocbreak __P((void));
int	 noecho __P((void));
int	 nonl __P((void));
int	 noraw __P((void));
int	 overlay __P((WINDOW *, WINDOW *));
int	 overwrite __P((WINDOW *, WINDOW *));
int	 printw __P((const char *, ...));
int	 raw __P((void));
int	 resetty __P((void));
int	 savetty __P((void));
int	 scanw __P((const char *, ...));
int	 scroll __P((WINDOW *));
int	 setterm __P((char *));
int	 sscans __P((WINDOW *, const char *, ...));
WINDOW	*subwin __P((WINDOW *, int, int, int, int));
int	 suspendwin __P((void));
int	 touchline __P((WINDOW *, int, int, int));
int	 touchoverlap __P((WINDOW *, WINDOW *));
int	 touchwin __P((WINDOW *));
int 	 vwprintw __P((WINDOW *, const char *, _BSD_VA_LIST_));
int      vwscanw __P((WINDOW *, const char *, _BSD_VA_LIST_));
int	 waddch __P((WINDOW *, int));
int	 waddnstr __P((WINDOW *, const char *, int));
int	 wclear __P((WINDOW *));
int	 wclrtobot __P((WINDOW *));
int	 wclrtoeol __P((WINDOW *));
int	 wdelch __P((WINDOW *));
int	 wdeleteln __P((WINDOW *));
int	 werase __P((WINDOW *));
int	 wgetch __P((WINDOW *));
int	 wgetstr __P((WINDOW *, char *));
int	 winsch __P((WINDOW *, int));
int	 winsertln __P((WINDOW *));
int	 wmove __P((WINDOW *, int, int));
int	 wprintw __P((WINDOW *, const char *, ...));
int	 wrefresh __P((WINDOW *));
int	 wscanw __P((WINDOW *, const char *, ...));
int	 wstandend __P((WINDOW *));
int	 wstandout __P((WINDOW *));
int	 vwprintw __P((WINDOW *, const char *, _BSD_VA_LIST_));

/* Private functions that are needed for user programs prototypes. */
void	 __cputchar __P((int));
int	 __waddbytes __P((WINDOW *, const char *, int, int));
__END_DECLS

/* Private functions. */
#ifdef _CURSES_PRIVATE
void	 __CTRACE __P((const char *, ...));
unsigned int	 __hash __P((char *, int));
void	 __id_subwins __P((WINDOW *));
int	 __mvcur __P((int, int, int, int, int));
void	 __restore_stophandler __P((void));
void	 __set_stophandler __P((void));
void	 __set_subwin __P((WINDOW *, WINDOW *));
void	 __startwin __P((void));
void	 __stop_signal_handler __P((int));
void	 __swflags __P((WINDOW *));
int	 __touchline __P((WINDOW *, int, int, int, int));
int	 __touchwin __P((WINDOW *));
char	*__tscroll __P((const char *, int, int));
int	 __waddch __P((WINDOW *, __LDATA *));

/* Private #defines. */
#define	min(a,b)	(a < b ? a : b)
#define	max(a,b)	(a > b ? a : b)

/* Private externs. */
extern int	 __echoit;
extern int	 __endwin;
extern int	 __pfast;
extern int	 __rawmode;
extern int	 __noqch;
#endif
d1014 187
a1200 9
/* Termcap functions. */
__BEGIN_DECLS
int	 tgetent __P((char *, char *));
int	 tgetnum __P((char *));
int	 tgetflag __P((char *));
char	*tgetstr __P((char *, char **));
char	*tgoto __P((char *, int, int));
void	 tputs __P((char *, int, void (*)(int)));
__END_DECLS
d1202 1
a1202 1
#endif /* !_CURSES_H_ */
@


1.1
log
@Initial revision
@
text
@d124 2
a125 2
	u_int flags;
	u_int hash;			/* Hash value for the line. */
d150 1
a150 1
	u_int flags;
d305 1
a305 1
u_int	 __hash __P((char *, int));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
