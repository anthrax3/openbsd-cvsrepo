head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.34
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.32
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.28
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.24
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.26
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.18
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.20
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.18
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.16
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.14
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.12
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2010.01.12.23.21.59;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.11.06.49;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	98.09.13.19.16.19;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.23.21.17.45;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.12.14.23.15.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.44.58;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.12.03.05.20.56;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.05.03;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@.\" $OpenBSD$
.\"
.\"***************************************************************************
.\" Copyright (c) 1998-2003,2005 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_inopts.3x,v 1.13 2005/05/15 16:18:07 tom Exp $
.TH curs_inopts 3 ""
.na
.hy 0
.SH NAME
\fBcbreak\fR,
\fBnocbreak\fR,
\fBecho\fR,
\fBnoecho\fR,
\fBhalfdelay\fR,
\fBintrflush\fR,
\fBkeypad\fR,
\fBmeta\fR,
\fBnodelay\fR,
\fBnotimeout\fR,
\fBraw\fR,
\fBnoraw\fR,
\fBnoqiflush\fR,
\fBqiflush\fR,
\fBtimeout\fR,
\fBwtimeout\fR,
\fBtypeahead\fR - \fBcurses\fR input options
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.PP
\fBint cbreak(void);\fR
.br
\fBint nocbreak(void);\fR
.br
\fBint echo(void);\fR
.br
\fBint noecho(void);\fR
.br
\fBint halfdelay(int tenths);\fR
.br
\fBint intrflush(WINDOW *win, bool bf);\fR
.br
\fBint keypad(WINDOW *win, bool bf);\fR
.br
\fBint meta(WINDOW *win, bool bf);\fR
.br
\fBint nodelay(WINDOW *win, bool bf);\fR
.br
\fBint raw(void);\fR
.br
\fBint noraw(void);\fR
.br
\fBvoid noqiflush(void);\fR
.br
\fBvoid qiflush(void);\fR
.br
\fBint notimeout(WINDOW *win, bool bf);\fR
.br
\fBvoid timeout(int delay);\fR
.br
\fBvoid wtimeout(WINDOW *win, int delay);\fR
.br
\fBint typeahead(int fd);\fR
.br
.SH DESCRIPTION
Normally, the tty driver buffers typed characters until a newline or carriage
return is typed.  The \fBcbreak\fR routine disables line buffering and
erase/kill character-processing (interrupt and flow control characters are
unaffected), making characters typed by the user immediately available to the
program.  The \fBnocbreak\fR routine returns the terminal to normal (cooked)
mode.
.PP
Initially the terminal may or may not be in \fBcbreak\fR mode, as the mode is
inherited; therefore, a program should call \fBcbreak\fR or \fBnocbreak\fR
explicitly.  Most interactive programs using \fBcurses\fR set the \fBcbreak\fR
mode.  Note that \fBcbreak\fR overrides \fBraw\fR.
[See \fBcurs_getch\fR(3) for a
discussion of how these routines interact with \fBecho\fR and \fBnoecho\fR.]
.PP
The \fBecho\fR and \fBnoecho\fR routines control whether characters typed by
the user are echoed by \fBgetch\fR as they are typed.  Echoing by the tty
driver is always disabled, but initially \fBgetch\fR is in echo mode, so
characters typed are echoed.  Authors of most interactive programs prefer to do
their own echoing in a controlled area of the screen, or not to echo at all, so
they disable echoing by calling \fBnoecho\fR.
[See \fBcurs_getch\fR(3) for a
discussion of how these routines interact with \fBcbreak\fR and
\fBnocbreak\fR.]
.PP
The \fBhalfdelay\fR routine is used for half-delay mode, which is similar to
\fBcbreak\fR mode in that characters typed by the user are immediately
available to the program.  However, after blocking for \fItenths\fR tenths of
seconds, ERR is returned if nothing has been typed.  The value of \fBtenths\fR
must be a number between 1 and 255.  Use \fBnocbreak\fR to leave half-delay
mode.
.PP
If the \fBintrflush\fR option is enabled, (\fIbf\fR is \fBTRUE\fR), when an
interrupt key is pressed on the keyboard (interrupt, break, quit) all output in
the tty driver queue will be flushed, giving the effect of faster response to
the interrupt, but causing \fBcurses\fR to have the wrong idea of what is on
the screen.  Disabling (\fIbf\fR is \fBFALSE\fR), the option prevents the
flush.  The default for the option is inherited from the tty driver settings.
The window argument is ignored.
.PP
The \fBkeypad\fR option enables the keypad of the user's terminal.  If
enabled (\fIbf\fR is \fBTRUE\fR), the user can press a function key
(such as an arrow key) and \fBwgetch\fR returns a single value
representing the function key, as in \fBKEY_LEFT\fR.  If disabled
(\fIbf\fR is \fBFALSE\fR), \fBcurses\fR does not treat function keys
specially and the program has to interpret the escape sequences
itself.  If the keypad in the terminal can be turned on (made to
transmit) and off (made to work locally), turning on this option
causes the terminal keypad to be turned on when \fBwgetch\fR is
called.  The default value for keypad is false.
.PP
Initially, whether the terminal returns 7 or 8 significant bits on
input depends on the control mode of the tty driver [see termio(7)].
To force 8 bits to be returned, invoke \fBmeta\fR(\fIwin\fR,
\fBTRUE\fR); this is equivalent, under POSIX, to setting the CS8 flag
on the terminal.  To force 7 bits to be returned, invoke
\fBmeta\fR(\fIwin\fR, \fBFALSE\fR); this is equivalent, under POSIX,
to setting the CS7 flag on the terminal.  The window argument,
\fIwin\fR, is always ignored.  If the terminfo capabilities \fBsmm\fR
(meta_on) and \fBrmm\fR (meta_off) are defined for the terminal,
\fBsmm\fR is sent to the terminal when \fBmeta\fR(\fIwin\fR,
\fBTRUE\fR) is called and \fBrmm\fR is sent when \fBmeta\fR(\fIwin\fR,
\fBFALSE\fR) is called.
.PP
The \fBnodelay\fR option causes \fBgetch\fR to be a non-blocking call.
If no input is ready, \fBgetch\fR returns \fBERR\fR.  If disabled
(\fIbf\fR is \fBFALSE\fR), \fBgetch\fR waits until a key is pressed.
.PP
While interpreting an input escape sequence, \fBwgetch\fR sets a timer
while waiting for the next character.  If \fBnotimeout(\fR\fIwin\fR,
\fBTRUE\fR) is called, then \fBwgetch\fR does not set a timer.  The
purpose of the timeout is to differentiate between sequences received
from a function key and those typed by a user.
.PP
The \fBraw\fR and \fBnoraw\fR routines place the terminal into or out of raw
mode.  Raw mode is similar to \fBcbreak\fR mode, in that characters typed are
immediately passed through to the user program.  The differences are that in
raw mode, the interrupt, quit, suspend, and flow control characters are all
passed through uninterpreted, instead of generating a signal.  The behavior of
the BREAK key depends on other bits in the tty driver that are not set by
\fBcurses\fR.
.PP
When the \fBnoqiflush\fR routine is used, normal flush of input and
output queues associated with the \fBINTR\fR, \fBQUIT\fR and
\fBSUSP\fR characters will not be done [see termio(7)].  When
\fBqiflush\fR is called, the queues will be flushed when these control
characters are read.  You may want to call \fBnoqiflush()\fR in a signal
handler if you want output to continue as though the interrupt
had not occurred, after the handler exits.
.PP
The \fBtimeout\fR and \fBwtimeout\fR routines set blocking or
non-blocking read for a given window.  If \fIdelay\fR is negative,
blocking read is used (i.e., waits indefinitely for
input).  If \fIdelay\fR is zero, then non-blocking read is used
(i.e., read returns \fBERR\fR if no input is waiting).  If
\fIdelay\fR is positive, then read blocks for \fIdelay\fR
milliseconds, and returns \fBERR\fR if there is still no input.
Hence, these routines provide the same functionality as \fBnodelay\fR,
plus the additional capability of being able to block for only
\fIdelay\fR milliseconds (where \fIdelay\fR is positive).
.PP
The \fBcurses\fR library does ``line-breakout optimization'' by looking for
typeahead periodically while updating the screen.  If input is found,
and it is coming from a tty, the current update is postponed until
\fBrefresh\fR or \fBdoupdate\fR is called again.  This allows faster
response to commands typed in advance.  Normally, the input FILE
pointer passed to \fBnewterm\fR, or \fBstdin\fR in the case that
\fBinitscr\fR was used, will be used to do this typeahead checking.
The \fBtypeahead\fR routine specifies that the file descriptor
\fIfd\fR is to be used to check for typeahead instead.  If \fIfd\fR is
-1, then no typeahead checking is done.
.SH RETURN VALUE
All routines that return an integer return \fBERR\fR upon failure and OK (SVr4
specifies only "an integer value other than \fBERR\fR") upon successful
completion, unless otherwise noted in the preceding routine descriptions.
.PP
X/Open does not define any error conditions.
In this implementation,
functions with a window parameter will return an error if it is null.
Any function will also return an error if the terminal was not initialized.
Also,
.RS
.TP 5
\fBhalfdelay\fP
returns an error
if its parameter is outside the range 1..255.
.RE
.SH PORTABILITY
These functions are described in the XSI Curses standard, Issue 4.
.PP
The ncurses library obeys the XPG4 standard and the historical practice of the
AT&T curses implementations, in that the echo bit is cleared when curses
initializes the terminal state.  BSD curses differed from this slightly; it
left the echo bit on at initialization, but the BSD \fBraw\fR call turned it
off as a side-effect.  For best portability, set echo or noecho explicitly
just after initialization, even if your program remains in cooked mode.
.SH NOTES
Note that \fBecho\fR, \fBnoecho\fR, \fBhalfdelay\fR, \fBintrflush\fR,
\fBmeta\fR, \fBnodelay\fR, \fBnotimeout\fR, \fBnoqiflush\fR,
\fBqiflush\fR, \fBtimeout\fR, and \fBwtimeout\fR may be macros.
.PP
The \fBnoraw\fR and \fBnocbreak\fR calls follow historical practice in that
they attempt to restore to normal (`cooked') mode from raw and cbreak modes
respectively.  Mixing raw/noraw and cbreak/nocbreak calls leads to tty driver
control states that are hard to predict or understand; it is not recommended.
.SH SEE ALSO
\fBcurses\fR(3), \fBcurs_getch\fR(3), \fBcurs_initscr\fR(3), \fBtermio\fR(7)
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
@


1.7
log
@typos;

diffs passed on to curses people.
@
text
@d1 1
a1 1
.\" $OpenBSD: curs_inopts.3,v 1.6 1998/09/13 19:16:19 millert Exp $
d4 1
a4 1
.\" Copyright (c) 1998 Free Software Foundation, Inc.                        *
d31 1
a31 1
.\" $From: curs_inopts.3x,v 1.8 1998/03/11 21:12:53 juergen Exp $
d33 2
d36 16
a51 4
\fBcbreak\fR, \fBnocbreak\fR, \fBecho\fR,
\fBnoecho\fR, \fBhalfdelay\fR, \fBintrflush\fR, \fBkeypad\fR,
\fBmeta\fR, \fBnodelay\fR, \fBnotimeout\fR, \fBraw\fR, \fBnoraw\fR,
\fBnoqiflush\fR, \fBqiflush\fR, \fBtimeout\fR, \fBwtimeout\fR,
d53 2
d57 1
a57 1

d99 1
a99 1

d106 1
a106 1

d116 1
a116 1

d123 1
a123 1

d131 1
a131 1

d142 1
a142 1

d149 1
a149 1
to setting the CS8 flag on the terminal.  The window argument,
d155 1
a155 1

d159 1
a159 1

d165 1
a165 1

d173 1
a173 1

d181 1
a181 1

d192 1
a192 1

d207 12
d221 1
a221 1

d232 1
a232 1

@


1.6
log
@ncurses-4.2-980905
@
text
@d1 1
a1 1
.\" $OpenBSD$
d168 1
a168 1
blocking read is used (\fIi\fR.\fIe\fR., waits indefinitely for
d170 1
a170 1
(\fIi\fR.\fIe\fR., read returns \fBERR\fR if no input is waiting).  If
d198 1
a198 1
off as a side-effect.  For best portability, set echo or noecho explicitly 
@


1.5
log
@ncurses-4.2-980718
@
text
@d1 2
a31 1
.\" $OpenBSD$
d194 1
a194 1
This curses library obeys the XPG4 standard and the historical practice of the
@


1.4
log
@ncurses-4.1-971213
@
text
@d1 30
a30 2
.\" $OpenBSD: curs_inopts.3,v 1.3 1997/12/03 05:44:58 millert Exp $
.\" Id: curs_inopts.3x,v 1.7 1997/12/14 01:12:04 tom Exp $
d193 1
a193 1
The curses library obeys the XPG4 standard and the historical practice of the
@


1.3
log
@3X-> 3
@
text
@d1 2
a2 1
.\" $OpenBSD: curs_inopts.3,v 1.2 1997/12/03 05:20:56 millert Exp $
d58 2
a59 1
mode.  Note that \fBcbreak\fR overrides \fBraw\fR.  [See curs_getch(3) for a
d67 2
a68 1
they disable echoing by calling \fBnoecho\fR.  [See curs_getch(3) for a
@


1.2
log
@Merge of ncurses-4.1-971129
@
text
@d1 2
a2 2
.\" $OpenBSD$
.TH curs_inopts 3X ""
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d1 1
d57 1
a57 1
mode.  Note that \fBcbreak\fR overrides \fBraw\fR.  [See curs_getch(3X) for a
d65 1
a65 1
they disable echoing by calling \fBnoecho\fR.  [See curs_getch(3X) for a
d178 1
a178 1
\fBcurses\fR(3X), \fBcurs_getch\fR(3X), \fBcurs_initscr\fR(3X), \fBtermio\fR(7)
@
