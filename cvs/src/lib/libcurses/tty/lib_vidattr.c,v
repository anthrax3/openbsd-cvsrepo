head	1.9;
access;
symbols
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.28
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.24
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.26
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.38
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.34
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.32
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.30
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.28
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.26
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.24
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.22
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.20
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.18
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.16
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.14
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.12
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.10
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.8
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.6
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2010.01.12.23.22.07;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.22.18.02.00;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.22.18.27.24;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.08.22.47.05;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.19.03.53.54;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.26.16.45.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.11.28.17.49.55;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.06.14.02.29.16;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.27;	author millert;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@/* $OpenBSD$ */

/****************************************************************************
 * Copyright (c) 1998-2006,2007 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Thomas E. Dickey                        1996 on                 *
 ****************************************************************************/

/*
 *	vidputs(newmode, outc)
 *
 *	newmode is taken to be the logical 'or' of the symbols in curses.h
 *	representing graphic renditions.  The terminal is set to be in all of
 *	the given modes, if possible.
 *
 *	if the new attribute is normal
 *		if exit-alt-char-set exists
 *			emit it
 *		emit exit-attribute-mode
 *	else if set-attributes exists
 *		use it to set exactly what you want
 *	else
 *		if exit-attribute-mode exists
 *			turn off everything
 *		else
 *			turn off those which can be turned off and aren't in
 *			newmode.
 *		turn on each mode which should be on and isn't, one by one
 *
 *	NOTE that this algorithm won't achieve the desired mix of attributes
 *	in some cases, but those are probably just those cases in which it is
 *	actually impossible, anyway, so...
 *
 * 	NOTE that we cannot assume that there's no interaction between color
 *	and other attribute resets.  So each time we reset color (or other
 *	attributes) we'll have to be prepared to restore the other.
 */

#include <curses.priv.h>
#include <term.h>

MODULE_ID("$Id: lib_vidattr.c,v 1.49 2007/06/30 21:58:04 tom Exp $")

#define doPut(mode) TPUTS_TRACE(#mode); tputs(mode, 1, outc)

#define TurnOn(mask,mode) \
	if ((turn_on & mask) && mode) { doPut(mode); }

#define TurnOff(mask,mode) \
	if ((turn_off & mask) && mode) { doPut(mode); turn_off &= ~mask; }

	/* if there is no current screen, assume we *can* do color */
#define SetColorsIf(why,old_attr) \
	if (can_color && (why)) { \
		int old_pair = PAIR_NUMBER(old_attr); \
		TR(TRACE_ATTRS, ("old pair = %d -- new pair = %d", old_pair, pair)); \
		if ((pair != old_pair) \
		 || (fix_pair0 && (pair == 0)) \
		 || (reverse ^ ((old_attr & A_REVERSE) != 0))) { \
			_nc_do_color(old_pair, pair, reverse, outc); \
		} \
	}

#define PreviousAttr _nc_prescreen.previous_attr

NCURSES_EXPORT(int)
vidputs(chtype newmode, int (*outc) (int))
{
    attr_t turn_on, turn_off;
    int pair;
    bool reverse = FALSE;
    bool can_color = (SP == 0 || SP->_coloron);
#if NCURSES_EXT_FUNCS
    bool fix_pair0 = (SP != 0 && SP->_coloron && !SP->_default_color);
#else
#define fix_pair0 FALSE
#endif

    newmode &= A_ATTRIBUTES;
    T((T_CALLED("vidputs(%s)"), _traceattr(newmode)));

    /* this allows us to go on whether or not newterm() has been called */
    if (SP)
	PreviousAttr = AttrOf(SCREEN_ATTRS(SP));

    TR(TRACE_ATTRS, ("previous attribute was %s", _traceattr(PreviousAttr)));

    if ((SP != 0)
	&& (magic_cookie_glitch > 0)) {
#if USE_XMC_SUPPORT
	static const chtype table[] =
	{
	    A_STANDOUT,
	    A_UNDERLINE,
	    A_REVERSE,
	    A_BLINK,
	    A_DIM,
	    A_BOLD,
	    A_INVIS,
	    A_PROTECT,
	};
	unsigned n;
	int used = 0;
	int limit = (max_attributes <= 0) ? 1 : max_attributes;
	chtype retain = 0;

	/*
	 * Limit the number of attribute bits set in the newmode according to
	 * the terminfo max_attributes value.
	 */
	for (n = 0; n < SIZEOF(table); ++n) {
	    if ((table[n] & SP->_ok_attributes) == 0) {
		newmode &= ~table[n];
	    } else if ((table[n] & newmode) != 0) {
		if (used++ >= limit) {
		    newmode &= ~table[n];
		    if (newmode == retain)
			break;
		} else {
		    retain = newmode;
		}
	    }
	}
#else
	newmode &= ~(SP->_xmc_suppress);
#endif
	TR(TRACE_ATTRS, ("suppressed attribute is %s", _traceattr(newmode)));
    }

    /*
     * If we have a terminal that cannot combine color with video
     * attributes, use the colors in preference.
     */
    if (((newmode & A_COLOR) != 0
	 || fix_pair0)
	&& (no_color_video > 0)) {
	/*
	 * If we had chosen the A_xxx definitions to correspond to the
	 * no_color_video mask, we could simply shift it up and mask off the
	 * attributes.  But we did not (actually copied Solaris' definitions).
	 * However, this is still simpler/faster than a lookup table.
	 *
	 * The 63 corresponds to A_STANDOUT, A_UNDERLINE, A_REVERSE, A_BLINK,
	 * A_DIM, A_BOLD which are 1:1 with no_color_video.  The bits that
	 * correspond to A_INVIS, A_PROTECT (192) must be shifted up 1 and
	 * A_ALTCHARSET (256) down 2 to line up.  We use the NCURSES_BITS
	 * macro so this will work properly for the wide-character layout.
	 */
	unsigned value = no_color_video;
	attr_t mask = NCURSES_BITS((value & 63)
				   | ((value & 192) << 1)
				   | ((value & 256) >> 2), 8);

	if ((mask & A_REVERSE) != 0
	    && (newmode & A_REVERSE) != 0) {
	    reverse = TRUE;
	    mask &= ~A_REVERSE;
	}
	newmode &= ~mask;
    }

    if (newmode == PreviousAttr)
	returnCode(OK);

    pair = PAIR_NUMBER(newmode);

    if (reverse) {
	newmode &= ~A_REVERSE;
    }

    turn_off = (~newmode & PreviousAttr) & ALL_BUT_COLOR;
    turn_on = (newmode & ~PreviousAttr) & ALL_BUT_COLOR;

    SetColorsIf(((pair == 0) && !fix_pair0), PreviousAttr);

    if (newmode == A_NORMAL) {
	if ((PreviousAttr & A_ALTCHARSET) && exit_alt_charset_mode) {
	    doPut(exit_alt_charset_mode);
	    PreviousAttr &= ~A_ALTCHARSET;
	}
	if (PreviousAttr) {
	    if (exit_attribute_mode) {
		doPut(exit_attribute_mode);
	    } else {
		if (!SP || SP->_use_rmul) {
		    TurnOff(A_UNDERLINE, exit_underline_mode);
		}
		if (!SP || SP->_use_rmso) {
		    TurnOff(A_STANDOUT, exit_standout_mode);
		}
	    }
	    PreviousAttr &= ALL_BUT_COLOR;
	}

	SetColorsIf((pair != 0) || fix_pair0, PreviousAttr);
    } else if (set_attributes) {
	if (turn_on || turn_off) {
	    TPUTS_TRACE("set_attributes");
	    tputs(tparm(set_attributes,
			(newmode & A_STANDOUT) != 0,
			(newmode & A_UNDERLINE) != 0,
			(newmode & A_REVERSE) != 0,
			(newmode & A_BLINK) != 0,
			(newmode & A_DIM) != 0,
			(newmode & A_BOLD) != 0,
			(newmode & A_INVIS) != 0,
			(newmode & A_PROTECT) != 0,
			(newmode & A_ALTCHARSET) != 0), 1, outc);
	    PreviousAttr &= ALL_BUT_COLOR;
	}
	SetColorsIf((pair != 0) || fix_pair0, PreviousAttr);
    } else {

	TR(TRACE_ATTRS, ("turning %s off", _traceattr(turn_off)));

	TurnOff(A_ALTCHARSET, exit_alt_charset_mode);

	if (!SP || SP->_use_rmul) {
	    TurnOff(A_UNDERLINE, exit_underline_mode);
	}

	if (!SP || SP->_use_rmso) {
	    TurnOff(A_STANDOUT, exit_standout_mode);
	}

	if (turn_off && exit_attribute_mode) {
	    doPut(exit_attribute_mode);
	    turn_on |= (newmode & ALL_BUT_COLOR);
	    PreviousAttr &= ALL_BUT_COLOR;
	}
	SetColorsIf((pair != 0) || fix_pair0, PreviousAttr);

	TR(TRACE_ATTRS, ("turning %s on", _traceattr(turn_on)));
	/* *INDENT-OFF* */
	TurnOn(A_ALTCHARSET,	enter_alt_charset_mode);
	TurnOn(A_BLINK,		enter_blink_mode);
	TurnOn(A_BOLD,		enter_bold_mode);
	TurnOn(A_DIM,		enter_dim_mode);
	TurnOn(A_REVERSE,	enter_reverse_mode);
	TurnOn(A_STANDOUT,	enter_standout_mode);
	TurnOn(A_PROTECT,	enter_protected_mode);
	TurnOn(A_INVIS,		enter_secure_mode);
	TurnOn(A_UNDERLINE,	enter_underline_mode);
#if USE_WIDEC_SUPPORT
	TurnOn(A_HORIZONTAL,	enter_horizontal_hl_mode);
	TurnOn(A_LEFT,		enter_left_hl_mode);
	TurnOn(A_LOW,		enter_low_hl_mode);
	TurnOn(A_RIGHT,		enter_right_hl_mode);
	TurnOn(A_TOP,		enter_top_hl_mode);
	TurnOn(A_VERTICAL,	enter_vertical_hl_mode);
#endif
	/* *INDENT-ON* */

    }

    if (reverse)
	newmode |= A_REVERSE;

    if (SP)
	SetAttr(SCREEN_ATTRS(SP), newmode);
    else
	PreviousAttr = newmode;

    returnCode(OK);
}

NCURSES_EXPORT(int)
vidattr(chtype newmode)
{
    T((T_CALLED("vidattr(%s)"), _traceattr(newmode)));

    returnCode(vidputs(newmode, _nc_outch));
}

NCURSES_EXPORT(chtype)
termattrs(void)
{
    chtype attrs = A_NORMAL;

    T((T_CALLED("termattrs()")));
    if (enter_alt_charset_mode)
	attrs |= A_ALTCHARSET;

    if (enter_blink_mode)
	attrs |= A_BLINK;

    if (enter_bold_mode)
	attrs |= A_BOLD;

    if (enter_dim_mode)
	attrs |= A_DIM;

    if (enter_reverse_mode)
	attrs |= A_REVERSE;

    if (enter_standout_mode)
	attrs |= A_STANDOUT;

    if (enter_protected_mode)
	attrs |= A_PROTECT;

    if (enter_secure_mode)
	attrs |= A_INVIS;

    if (enter_underline_mode)
	attrs |= A_UNDERLINE;

    if (SP->_coloron)
	attrs |= A_COLOR;

    returnChar(attrs);
}
@


1.8
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_vidattr.c,v 1.7 2000/10/22 18:27:24 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999,2000 Free Software Foundation, Inc.              *
d34 1
d70 1
a70 1
MODULE_ID("$From: lib_vidattr.c,v 1.36 2000/12/10 03:05:48 tom Exp $")
d92 2
d95 1
a95 2
vidputs
(attr_t newmode, int (*outc) (int))
a96 1
    static attr_t previous_attr = A_NORMAL;
a99 1
    bool used_ncv = FALSE;
d107 1
d112 1
a112 1
	previous_attr = SP->_current_attr;
d114 1
a114 1
    TR(TRACE_ATTRS, ("previous attribute was %s", _traceattr(previous_attr)));
a115 1
#if !USE_XMC_SUPPORT
d117 36
a152 1
	&& (magic_cookie_glitch > 0))
d155 2
d190 1
a190 1
    if (newmode == previous_attr)
d199 2
a200 2
    turn_off = (~newmode & previous_attr) & ALL_BUT_COLOR;
    turn_on = (newmode & ~previous_attr) & ALL_BUT_COLOR;
d202 1
a202 1
    SetColorsIf(((pair == 0) && !fix_pair0), previous_attr);
d205 1
a205 1
	if ((previous_attr & A_ALTCHARSET) && exit_alt_charset_mode) {
d207 1
a207 1
	    previous_attr &= ~A_ALTCHARSET;
d209 1
a209 1
	if (previous_attr) {
d220 1
a220 1
	    previous_attr &= ~A_COLOR;
d223 2
a224 2
	SetColorsIf((pair != 0) || fix_pair0, previous_attr);
    } else if (set_attributes && !used_ncv) {
d237 1
a237 1
	    previous_attr &= ~A_COLOR;
d239 1
a239 1
	SetColorsIf((pair != 0) || fix_pair0, previous_attr);
d256 2
a257 2
	    turn_on |= (newmode & (chtype) (~A_COLOR));
	    previous_attr &= ~A_COLOR;
d259 1
a259 1
	SetColorsIf((pair != 0) || fix_pair0, previous_attr);
d272 1
d279 1
d288 1
a288 1
	SP->_current_attr = newmode;
d290 1
a290 1
	previous_attr = newmode;
d296 1
a296 1
vidattr(attr_t newmode)
@


1.7
log
@update to ncurses 5.2
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_vidattr.c,v 1.6 2000/10/08 22:47:05 millert Exp $	*/
d69 1
a69 1
MODULE_ID("$From: lib_vidattr.c,v 1.33 2000/10/09 22:45:29 tom Exp $")
d91 3
a93 2
int
vidputs(attr_t newmode, int (*outc) (int))
d140 4
a143 3
	attr_t mask = NCURSES_BITS((no_color_video & 63)
				   | ((no_color_video & 192) << 1)
				   | ((no_color_video & 256) >> 2), 8);
d145 2
a146 1
	if (mask & A_REVERSE && newmode & A_REVERSE) {
d256 1
a256 1
int
d264 1
a264 1
chtype
@


1.6
log
@update to ncurses-5.1-20001007
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_vidattr.c,v 1.5 2000/06/19 03:53:54 millert Exp $	*/
d69 1
a69 1
MODULE_ID("$From: lib_vidattr.c,v 1.32 2000/09/17 00:15:23 tom Exp $")
d143 1
a143 1
	if (mask & A_REVERSE) {
@


1.5
log
@ncurses-5.0-20000617
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_vidattr.c,v 1.4 2000/03/26 16:45:04 millert Exp $	*/
d69 1
a69 1
MODULE_ID("$From: lib_vidattr.c,v 1.27 2000/04/29 23:25:27 tom Exp $")
d83 1
a83 1
		T(("old pair = %d -- new pair = %d", old_pair, pair)); \
d100 1
a100 1
#ifdef NCURSES_EXT_FUNCS
d112 1
a112 1
    T(("previous attribute was %s", _traceattr(previous_attr)));
d125 1
a125 1
	    || fix_pair0)
d127 19
a145 27
	/* *INDENT-OFF* */
	static const struct {
	    attr_t video;
	    unsigned bit;
	} table[] = {
	    { A_STANDOUT,       1 },
	    { A_UNDERLINE,      2 },
	    { A_REVERSE,        4 },
	    { A_BLINK,          8 },
	    { A_DIM,            16 },
	    { A_BOLD,           32 },
	    { A_INVIS,          64 },
	    { A_PROTECT,        128 },
	    { A_ALTCHARSET,     256 },
	};
	/* *INDENT-ON* */

	size_t n;
	for (n = 0; n < SIZEOF(table); n++) {
	    if ((table[n].bit & no_color_video)
		&& (table[n].video & newmode)) {
		used_ncv = TRUE;
		if (table[n].video == A_REVERSE)
		    reverse = TRUE;
		else
		    newmode &= ~table[n].video;
	    }
d147 1
d170 10
a179 1
	    doPut(exit_attribute_mode);
d188 9
a196 9
		    (newmode & A_STANDOUT) != 0,
		    (newmode & A_UNDERLINE) != 0,
		    (newmode & A_REVERSE) != 0,
		    (newmode & A_BLINK) != 0,
		    (newmode & A_DIM) != 0,
		    (newmode & A_BOLD) != 0,
		    (newmode & A_INVIS) != 0,
		    (newmode & A_PROTECT) != 0,
		    (newmode & A_ALTCHARSET) != 0), 1, outc);
d202 1
a202 1
	T(("turning %s off", _traceattr(turn_off)));
d221 1
a221 1
	T(("turning %s on", _traceattr(turn_on)));
d266 1
d297 1
a297 1
    return (attrs);
@


1.4
log
@Update to ncurses-5.0-20000325
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_vidattr.c,v 1.3 1999/11/28 17:49:55 millert Exp $	*/
d69 1
a69 1
MODULE_ID("$From: lib_vidattr.c,v 1.26 2000/03/26 02:56:20 tom Exp $");
d124 2
a125 1
    if ((newmode & A_COLOR)
@


1.3
log
@update to ncurses-5.0-19991127
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_vidattr.c,v 1.2 1999/06/14 02:29:16 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d69 1
a69 1
MODULE_ID("$From: lib_vidattr.c,v 1.24 1999/11/14 02:53:43 tom Exp $")
d81 1
a81 1
	if (can_color && (1)) { \
d87 1
a87 1
			_nc_do_color(pair, reverse, outc); \
d91 2
a92 1
int vidputs(attr_t newmode, int  (*outc)(int))
d94 6
a99 6
static attr_t previous_attr = A_NORMAL;
attr_t turn_on, turn_off;
int pair;
bool reverse = FALSE;
bool used_ncv = FALSE;
bool can_color = (SP == 0 || SP->_coloron);
d101 1
a101 1
bool fix_pair0 = (SP != 0 && SP->_coloron && !SP->_default_color);
d106 1
a106 1
	T((T_CALLED("vidputs(%s)"), _traceattr(newmode)));
d108 3
a110 3
	/* this allows us to go on whether or not newterm() has been called */
	if (SP)
		previous_attr = SP->_current_attr;
d112 1
a112 1
	T(("previous attribute was %s", _traceattr(previous_attr)));
d115 3
a117 3
	if ((SP != 0)
	 && (magic_cookie_glitch > 0))
		newmode &= ~(SP->_xmc_suppress);
d120 33
a152 31
	/*
	 * If we have a terminal that cannot combine color with video
	 * attributes, use the colors in preference.
	 */
	if ((newmode & A_COLOR)
	 && (no_color_video > 0)) {
		static const struct {
			attr_t video;
			unsigned bit;
		} table[] = {
			{ A_STANDOUT,		1 },
			{ A_UNDERLINE,		2 },
			{ A_REVERSE,		4 },
			{ A_BLINK,		8 },
			{ A_DIM,		16 },
			{ A_BOLD, 		32 },
			{ A_INVIS,		64 },
			{ A_PROTECT,		128 },
			{ A_ALTCHARSET,		256 },
		};
		size_t n;
		for (n = 0; n < SIZEOF(table); n++) {
			if ((table[n].bit & no_color_video)
			 && (table[n].video & newmode)) {
				used_ncv = TRUE;
				if (table[n].video == A_REVERSE)
					reverse = TRUE;
				else
					newmode &= ~table[n].video;
			}
		}
d154 1
d156 8
a163 2
	if (newmode == previous_attr)
		returnCode(OK);
d165 14
a178 1
	pair = PAIR_NUMBER(newmode);
d180 15
a194 2
	if (reverse) {
		newmode &= ~A_REVERSE;
d196 4
d201 1
a201 2
	turn_off = (~newmode & previous_attr) & ALL_BUT_COLOR;
	turn_on  = (newmode & ~previous_attr) & ALL_BUT_COLOR;
d203 3
a205 1
	SetColorsIf(pair == 0, previous_attr);
d207 2
a208 67
	if (newmode == A_NORMAL) {
		if((previous_attr & A_ALTCHARSET) && exit_alt_charset_mode) {
			doPut(exit_alt_charset_mode);
			previous_attr &= ~A_ALTCHARSET;
		}
		if (previous_attr) {
			doPut(exit_attribute_mode);
			if (fix_pair0) _nc_do_color(0, FALSE, _nc_outch);
			previous_attr &= ~A_COLOR;
		}

		SetColorsIf(pair != 0, previous_attr);
	} else if (set_attributes && !used_ncv) {
		if (turn_on || turn_off) {
			TPUTS_TRACE("set_attributes");
			tputs(tparm(set_attributes,
				(newmode & A_STANDOUT) != 0,
				(newmode & A_UNDERLINE) != 0,
				(newmode & A_REVERSE) != 0,
				(newmode & A_BLINK) != 0,
				(newmode & A_DIM) != 0,
				(newmode & A_BOLD) != 0,
				(newmode & A_INVIS) != 0,
				(newmode & A_PROTECT) != 0,
				(newmode & A_ALTCHARSET) != 0), 1, outc);
			previous_attr &= ~A_COLOR;
		}
		SetColorsIf(pair != 0, previous_attr);
	} else {

		T(("turning %s off", _traceattr(turn_off)));

		TurnOff(A_ALTCHARSET,  exit_alt_charset_mode);

		if (!SP || SP->_use_rmul) {
			TurnOff(A_UNDERLINE,   exit_underline_mode);
		}

		if (!SP || SP->_use_rmso) {
			TurnOff(A_STANDOUT,    exit_standout_mode);
		}

		if (turn_off && exit_attribute_mode) {
			doPut(exit_attribute_mode);
			if (fix_pair0) _nc_do_color(0, FALSE, _nc_outch);
			turn_on  |= (newmode & (chtype)(~A_COLOR));
			previous_attr &= ~A_COLOR;
		}
		SetColorsIf(pair != 0, previous_attr);

		T(("turning %s on", _traceattr(turn_on)));

		TurnOn (A_ALTCHARSET, enter_alt_charset_mode);
		TurnOn (A_BLINK,      enter_blink_mode);
		TurnOn (A_BOLD,       enter_bold_mode);
		TurnOn (A_DIM,        enter_dim_mode);
		TurnOn (A_REVERSE,    enter_reverse_mode);
		TurnOn (A_STANDOUT,   enter_standout_mode);
		TurnOn (A_PROTECT,    enter_protected_mode);
		TurnOn (A_INVIS,      enter_secure_mode);
		TurnOn (A_UNDERLINE,  enter_underline_mode);
		TurnOn (A_HORIZONTAL, enter_horizontal_hl_mode);
		TurnOn (A_LEFT,       enter_left_hl_mode);
		TurnOn (A_LOW,        enter_low_hl_mode);
		TurnOn (A_RIGHT,      enter_right_hl_mode);
		TurnOn (A_TOP,        enter_top_hl_mode);
		TurnOn (A_VERTICAL,   enter_vertical_hl_mode);
d211 6
a216 2
	if (reverse)
		newmode |= A_REVERSE;
d218 28
a245 4
	if (SP)
		SP->_current_attr = newmode;
	else
		previous_attr = newmode;
d247 1
a247 1
	returnCode(OK);
d250 2
a251 1
int vidattr(attr_t newmode)
d253 1
a253 1
	T((T_CALLED("vidattr(%s)"), _traceattr(newmode)));
d255 1
a255 1
	returnCode(vidputs(newmode, _nc_outch));
d258 2
a259 1
chtype termattrs(void)
d261 1
a261 1
	chtype attrs = A_NORMAL;
d263 2
a264 2
	if (enter_alt_charset_mode)
		attrs |= A_ALTCHARSET;
d266 2
a267 2
	if (enter_blink_mode)
		attrs |= A_BLINK;
d269 2
a270 2
	if (enter_bold_mode)
		attrs |= A_BOLD;
d272 2
a273 2
	if (enter_dim_mode)
		attrs |= A_DIM;
d275 2
a276 2
	if (enter_reverse_mode)
		attrs |= A_REVERSE;
d278 2
a279 2
	if (enter_standout_mode)
		attrs |= A_STANDOUT;
d281 2
a282 2
	if (enter_protected_mode)
		attrs |= A_PROTECT;
d284 2
a285 2
	if (enter_secure_mode)
		attrs |= A_INVIS;
d287 2
a288 2
	if (enter_underline_mode)
		attrs |= A_UNDERLINE;
d290 2
a291 2
	if (SP->_coloron)
		attrs |= A_COLOR;
d293 1
a293 1
	return(attrs);
a294 1

@


1.2
log
@ncurses-5.0-990612
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_vidattr.c,v 1.1 1999/01/18 19:10:27 millert Exp $	*/
d69 1
a69 1
MODULE_ID("$From: lib_vidattr.c,v 1.23 1999/06/12 21:20:41 tom Exp $")
d81 1
a81 1
	if ((!SP || SP->_coloron) && (why)) { \
d85 1
d98 6
d173 1
d210 1
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_vidattr.c,v 1.5 1998/08/03 17:02:46 millert Exp $	*/
d69 1
a69 1
MODULE_ID("$From: lib_vidattr.c,v 1.21 1998/08/01 22:21:19 tom Exp $")
d107 2
a108 1
	if (magic_cookie_glitch > 0)
d191 8
a198 2
		TurnOff(A_UNDERLINE,   exit_underline_mode);
		TurnOff(A_STANDOUT,    exit_standout_mode);
@

