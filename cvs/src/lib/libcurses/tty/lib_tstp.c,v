head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.24
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.26
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.22
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.18
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.20
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.12
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.16
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.14
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.10
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.8
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.34
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.30
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.28
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.26
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.24
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.22
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.20
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.18
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.16
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.14
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.12
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2011.05.30.21.59.35;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.12.23.22.07;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.06.04.26.00;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.22.18.02.00;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.08.22.47.05;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.19.03.53.54;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.11.28.17.49.54;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.08.15.11.40.56;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.06.27.08.14.21;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.01.31.20.17.10;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.01.18.19.10.26;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Document why everything in this signal handler is totally unsafe -- it is
totally ridiculous to call all sorts of stdio and malloc stuff in a signal
handler.  These comments have been looked at by nicm, and then passed
upstream.
@
text
@/* $OpenBSD: lib_tstp.c,v 1.10 2010/01/12 23:22:07 nicm Exp $ */

/****************************************************************************
 * Copyright (c) 1998-2007,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/****************************************************************************
 *  Author: Zeyd M. Ben-Halim <zmbenhal@@netcom.com> 1992,1995               *
 *     and: Eric S. Raymond <esr@@snark.thyrsus.com>                         *
 *     and: Thomas E. Dickey                        1995-on                 *
 ****************************************************************************/

/*
**	lib_tstp.c
**
**	The routine _nc_signal_handler().
**
*/
#include <curses.priv.h>

#include <SigAction.h>

#if SVR4_ACTION && !defined(_POSIX_SOURCE)
#define _POSIX_SOURCE
#endif

MODULE_ID("$Id: lib_tstp.c,v 1.10 2010/01/12 23:22:07 nicm Exp $")

#if defined(SIGTSTP) && (HAVE_SIGACTION || HAVE_SIGVEC)
#define USE_SIGTSTP 1
#else
#define USE_SIGTSTP 0
#endif

#ifdef TRACE
static const char *
signal_name(int sig)
{
    switch (sig) {
    case SIGALRM:
	return "SIGALRM";
#ifdef SIGCONT
    case SIGCONT:
	return "SIGCONT";
#endif
    case SIGINT:
	return "SIGINT";
    case SIGQUIT:
	return "SIGQUIT";
    case SIGTERM:
	return "SIGTERM";
#ifdef SIGTSTP
    case SIGTSTP:
	return "SIGTSTP";
#endif
#ifdef SIGTTOU
    case SIGTTOU:
	return "SIGTTOU";
#endif
#ifdef SIGWINCH
    case SIGWINCH:
	return "SIGWINCH";
#endif
    default:
	return "unknown signal";
    }
}
#endif

/*
 * Note: This code is fragile!  Its problem is that different OSs
 * handle restart of system calls interrupted by signals differently.
 * The ncurses code needs signal-call restart to happen -- otherwise,
 * interrupted wgetch() calls will return FAIL, probably making the
 * application think the input stream has ended and it should
 * terminate.  In particular, you know you have this problem if, when
 * you suspend an ncurses-using lynx with ^Z and resume, it dies
 * immediately.
 *
 * Default behavior of POSIX sigaction(2) is not to restart
 * interrupted system calls, but Linux's sigaction does it anyway (at
 * least, on and after the 1.1.47 I (esr) use).  Thus this code works
 * OK under Linux.  The 4.4BSD sigaction(2) supports a (non-portable)
 * SA_RESTART flag that forces the right behavior.  Thus, this code
 * should work OK under BSD/OS, NetBSD, and FreeBSD (let us know if it
 * does not).
 *
 * Stock System Vs (and anything else using a strict-POSIX
 * sigaction(2) without SA_RESTART) may have a problem.  Possible
 * solutions:
 *
 *    sigvec      restarts by default (SV_INTERRUPT flag to not restart)
 *    signal      restarts by default in SVr4 (assuming you link with -lucb)
 *                and BSD, but not SVr3.
 *    sigset      restarts, but is only available under SVr4/Solaris.
 *
 * The signal(3) call is mandated by the ANSI standard, and its
 * interaction with sigaction(2) is described in the POSIX standard
 * (3.3.4.2, page 72,line 934).  According to section 8.1, page 191,
 * however, signal(3) itself is not required by POSIX.1.  And POSIX is
 * silent on whether it is required to restart signals.
 *
 * So.  The present situation is, we use sigaction(2) with no
 * guarantee of restart anywhere but on Linux and BSD.  We could
 * switch to signal(3) and collar Linux, BSD, and SVr4.  Any way
 * we slice it, System V UNIXes older than SVr4 will probably lose
 * (this may include XENIX).
 *
 * This implementation will probably be changed to use signal(3) in
 * the future.  If nothing else, it's simpler...
 */

#if USE_SIGTSTP
static void
tstp(int dummy GCC_UNUSED)
{
    sigset_t mask, omask;
    sigaction_t act, oact;

#ifdef SIGTTOU
    int sigttou_blocked;
#endif

    T(("tstp() called"));

    /*
     * The user may have changed the prog_mode tty bits, so save them.
     *
     * But first try to detect whether we still are in the foreground
     * process group - if not, an interactive shell may already have
     * taken ownership of the tty and modified the settings when our
     * parent was stopped before us, and we would likely pick up the
     * settings already modified by the shell.
     */
    if (SP != 0 && !SP->_endwin)	/* don't do this if we're not in curses */
#if HAVE_TCGETPGRP
	if (tcgetpgrp(STDIN_FILENO) == getpgrp())
#endif
	    def_prog_mode();

    /*
     * Block window change and timer signals.  The latter
     * is because applications use timers to decide when
     * to repaint the screen.
     */
    (void) sigemptyset(&mask);
    (void) sigaddset(&mask, SIGALRM);
#if USE_SIGWINCH
    (void) sigaddset(&mask, SIGWINCH);
#endif
    (void) sigprocmask(SIG_BLOCK, &mask, &omask);

#ifdef SIGTTOU
    sigttou_blocked = sigismember(&omask, SIGTTOU);
    if (!sigttou_blocked) {
	(void) sigemptyset(&mask);
	(void) sigaddset(&mask, SIGTTOU);
	(void) sigprocmask(SIG_BLOCK, &mask, NULL);
    }
#endif

    /*
     * End window mode, which also resets the terminal state to the
     * original (pre-curses) modes.
     */
    endwin();

    /* Unblock SIGTSTP. */
    (void) sigemptyset(&mask);
    (void) sigaddset(&mask, SIGTSTP);
#ifdef SIGTTOU
    if (!sigttou_blocked) {
	/* Unblock this too if it wasn't blocked on entry */
	(void) sigaddset(&mask, SIGTTOU);
    }
#endif
    (void) sigprocmask(SIG_UNBLOCK, &mask, NULL);

    /* Now we want to resend SIGSTP to this process and suspend it */
    act.sa_handler = SIG_DFL;
    sigemptyset(&act.sa_mask);
    act.sa_flags = 0;
#ifdef SA_RESTART
    act.sa_flags |= SA_RESTART;
#endif /* SA_RESTART */
    sigaction(SIGTSTP, &act, &oact);
    kill(getpid(), SIGTSTP);

    /* Process gets suspended...time passes...process resumes */

    T(("SIGCONT received"));
    sigaction(SIGTSTP, &oact, NULL);
    flushinp();

    /*
     * If the user modified the tty state while suspended, he wants
     * those changes to stick.  So save the new "default" terminal state.
     */
    def_shell_mode();

    /*
     * This relies on the fact that doupdate() will restore the
     * program-mode tty state, and issue enter_ca_mode if need be.
     */
    doupdate();

    /* Reset the signals. */
    (void) sigprocmask(SIG_SETMASK, &omask, NULL);
}
#endif /* USE_SIGTSTP */

static void
cleanup(int sig)
{
    /*
     * XXX signal race.
     *
     * 1) Walking the SCREEN list is unsafe, since all list management
     *    is done without any signal blocking.
     * 2) On systems which have REENTRANT turned on, set_term() uses
     *    _nc_lock_global() which could deadlock or misbehave in other ways.
     * 3) endwin() calls all sorts of stuff, many of which use stdio or
     *    other library functions which are clearly unsafe.
     * 4) The comment about atexit() is wrong.  atexit() should never be
     *    called, because ...
     * 5) The call to exit() at the bottom is unsafe:  exit() depends
     *    depends on stdio being coherent (obviously it is not).  stdio
     *    could call free(), and also calls atexit() and dtor handlers,
     *    which are probably not written to be safe.  The signal handler
     *    should be calling _exit().
     */
    if (!_nc_globals.cleanup_nested++
	&& (sig == SIGINT
	    || sig == SIGQUIT)) {
#if HAVE_SIGACTION || HAVE_SIGVEC
	sigaction_t act;
	sigemptyset(&act.sa_mask);
	act.sa_flags = 0;
	act.sa_handler = SIG_IGN;
	if (sigaction(sig, &act, NULL) == 0)
#else
	if (signal(sig, SIG_IGN) != SIG_ERR)
#endif
	{
	    SCREEN *scan;
	    for (each_screen(scan)) {
		if (scan->_ofp != 0
		    && isatty(fileno(scan->_ofp))) {
		    scan->_cleanup = TRUE;
		    scan->_outch = _nc_outch;
		}
		set_term(scan);
		endwin();
		if (SP)
		    SP->_endwin = FALSE;	/* in case we have an atexit! */
	    }
	}
    }
    exit(EXIT_FAILURE);
}

#if USE_SIGWINCH
static void
sigwinch(int sig GCC_UNUSED)
{
    _nc_globals.have_sigwinch = 1;
}
#endif /* USE_SIGWINCH */

/*
 * If the given signal is still in its default state, set it to the given
 * handler.
 */
static int
CatchIfDefault(int sig, RETSIGTYPE (*handler) (int))
{
    int result;
#if HAVE_SIGACTION || HAVE_SIGVEC
    sigaction_t old_act;
    sigaction_t new_act;

    memset(&new_act, 0, sizeof(new_act));
    sigemptyset(&new_act.sa_mask);
#ifdef SA_RESTART
#ifdef SIGWINCH
    if (sig != SIGWINCH)
#endif
	new_act.sa_flags |= SA_RESTART;
#endif /* SA_RESTART */
    new_act.sa_handler = handler;

    if (sigaction(sig, NULL, &old_act) == 0
	&& (old_act.sa_handler == SIG_DFL
	    || old_act.sa_handler == handler
#if USE_SIGWINCH
	    || (sig == SIGWINCH && old_act.sa_handler == SIG_IGN)
#endif
	)) {
	(void) sigaction(sig, &new_act, NULL);
	result = TRUE;
    } else {
	result = FALSE;
    }
#else /* !HAVE_SIGACTION */
    RETSIGTYPE (*ohandler) (int);

    ohandler = signal(sig, SIG_IGN);
    if (ohandler == SIG_DFL
	|| ohandler == handler
#if USE_SIGWINCH
	|| (sig == SIGWINCH && ohandler == SIG_IGN)
#endif
	) {
	signal(sig, handler);
	result = TRUE;
    } else {
	signal(sig, ohandler);
	result = FALSE;
    }
#endif
    T(("CatchIfDefault - will %scatch %s",
       result ? "" : "not ", signal_name(sig)));
    return result;
}

/*
 * This is invoked once at the beginning (e.g., from 'initscr()'), to
 * initialize the signal catchers, and thereafter when spawning a shell (and
 * returning) to disable/enable the SIGTSTP (i.e., ^Z) catcher.
 *
 * If the application has already set one of the signals, we'll not modify it
 * (during initialization).
 *
 * The XSI document implies that we shouldn't keep the SIGTSTP handler if
 * the caller later changes its mind, but that doesn't seem correct.
 */
NCURSES_EXPORT(void)
_nc_signal_handler(bool enable)
{
    T((T_CALLED("_nc_signal_handler(%d)"), enable));
#if USE_SIGTSTP			/* Xenix 2.x doesn't have SIGTSTP, for example */
    {
	static bool ignore_tstp = FALSE;

	if (!ignore_tstp) {
	    static sigaction_t new_sigaction, old_sigaction;

	    if (!enable) {
		new_sigaction.sa_handler = SIG_IGN;
		sigaction(SIGTSTP, &new_sigaction, &old_sigaction);
	    } else if (new_sigaction.sa_handler != SIG_DFL) {
		sigaction(SIGTSTP, &old_sigaction, NULL);
	    } else if (sigaction(SIGTSTP, NULL, &old_sigaction) == 0
		       && (old_sigaction.sa_handler == SIG_DFL)) {
		sigemptyset(&new_sigaction.sa_mask);
#ifdef SA_RESTART
		new_sigaction.sa_flags |= SA_RESTART;
#endif /* SA_RESTART */
		new_sigaction.sa_handler = tstp;
		(void) sigaction(SIGTSTP, &new_sigaction, NULL);
	    } else {
		ignore_tstp = TRUE;
	    }
	}
    }
#endif /* !USE_SIGTSTP */

    if (!_nc_globals.init_signals) {
	if (enable) {
	    CatchIfDefault(SIGINT, cleanup);
	    CatchIfDefault(SIGTERM, cleanup);
#if USE_SIGWINCH
	    CatchIfDefault(SIGWINCH, sigwinch);
#endif
	    _nc_globals.init_signals = TRUE;
	}
    }
    returnVoid;
}
@


1.10
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d51 1
a51 1
MODULE_ID("$Id: lib_tstp.c,v 1.37 2008/05/03 16:24:56 tom Exp $")
d240 1
a240 1
     * XXX signal race. This kind of comment is completely ingenious!
d242 13
a254 3
     * Actually, doing any sort of I/O from within an signal handler is
     * "unsafe".  But we'll _try_ to clean up the screen and terminal
     * settings on the way out.
@


1.9
log
@mark more signals that I cannot fix
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tstp.c,v 1.8 2001/01/22 18:02:00 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999,2000 Free Software Foundation, Inc.              *
d34 1
a42 1

a44 1
#include <signal.h>
d51 1
a51 1
MODULE_ID("$From: lib_tstp.c,v 1.24 2000/12/10 03:04:30 tom Exp $")
d59 35
a238 2
    static int nested;

d240 1
a240 1
     * XXX signal race. The kind of comment is completely ingenius!
d246 1
a246 1
    if (!nested++
d254 1
a254 1
	if (sigaction(sig, &act, (sigaction_t *) 0) == 0)
d259 6
a264 7
	    SCREEN *scan = _nc_screen_chain;
	    while (scan) {
		if (SP != 0
		    && SP->_ofp != 0
		    && isatty(fileno(SP->_ofp))) {
		    SP->_cleanup = TRUE;
		    SP->_outch = _nc_outch;
a269 1
		scan = scan->_next_screen;
d280 1
a280 5
    SCREEN *scan = _nc_screen_chain;
    while (scan) {
	scan->_sig_winch = TRUE;
	scan = scan->_next_screen;
    }
a287 1
#if HAVE_SIGACTION || HAVE_SIGVEC
d289 1
a289 1
CatchIfDefault(int sig, sigaction_t * act)
d291 2
d294 1
d296 11
a306 1
    if (sigaction(sig, (sigaction_t *) 0, &old_act) == 0
d308 1
d313 4
a316 2
	(void) sigaction(sig, act, (sigaction_t *) 0);
	return TRUE;
d318 2
a319 7
    return FALSE;
}
#else
static int
CatchIfDefault(int sig, RETSIGTYPE(*handler) (int))
{
    void (*ohandler) (int);
d323 1
d329 1
a329 1
	return TRUE;
d332 1
a332 1
	return FALSE;
d334 4
a338 1
#endif
d354 1
d356 2
a357 2
    static sigaction_t act, oact;
    static int ignore;
d359 2
a360 13
    if (!ignore) {
	if (!enable) {
	    act.sa_handler = SIG_IGN;
	    sigaction(SIGTSTP, &act, &oact);
	} else if (act.sa_handler) {
	    sigaction(SIGTSTP, &oact, NULL);
	} else {		/*initialize */
	    sigemptyset(&act.sa_mask);
	    act.sa_flags = 0;
#if USE_SIGWINCH
	    act.sa_handler = sigwinch;
	    CatchIfDefault(SIGWINCH, &act);
#endif
d362 8
d371 1
a371 1
	    act.sa_flags |= SA_RESTART;
d373 5
a377 7
	    act.sa_handler = cleanup;
	    CatchIfDefault(SIGINT, &act);
	    CatchIfDefault(SIGTERM, &act);

	    act.sa_handler = tstp;
	    if (!CatchIfDefault(SIGTSTP, &act))
		ignore = TRUE;
d380 1
a380 17
#else /* !USE_SIGTSTP */
    if (enable) {
#if HAVE_SIGACTION || HAVE_SIGVEC
	static sigaction_t act;
	sigemptyset(&act.sa_mask);
#if USE_SIGWINCH
	act.sa_handler = sigwinch;
	CatchIfDefault(SIGWINCH, &act);
#endif
#ifdef SA_RESTART
	act.sa_flags |= SA_RESTART;
#endif /* SA_RESTART */
	act.sa_handler = cleanup;
	CatchIfDefault(SIGINT, &act);
	CatchIfDefault(SIGTERM, &act);

#else /* !(HAVE_SIGACTION || HAVE_SIGVEC) */
d382 4
a385 2
	CatchIfDefault(SIGINT, cleanup);
	CatchIfDefault(SIGTERM, cleanup);
d387 1
a387 1
	CatchIfDefault(SIGWINCH, sigwinch);
d389 2
a390 1
#endif /* !(HAVE_SIGACTION || HAVE_SIGVEC) */
d392 1
a392 1
#endif /* !USE_SIGTSTP */
@


1.8
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tstp.c,v 1.7 2000/10/08 22:47:05 millert Exp $	*/
d208 2
@


1.7
log
@update to ncurses-5.1-20001007
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tstp.c,v 1.6 2000/06/19 03:53:54 millert Exp $	*/
d52 1
a52 1
MODULE_ID("$From: lib_tstp.c,v 1.22 2000/09/02 18:33:17 tom Exp $")
d309 1
a309 1
void
@


1.6
log
@ncurses-5.0-20000617
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tstp.c,v 1.5 1999/11/28 17:49:54 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998,1999 Free Software Foundation, Inc.                   *
a35 1

d48 1
a48 1
#if defined(SVR4_ACTION) && !defined(_POSIX_SOURCE)
d52 1
a52 1
MODULE_ID("$From: lib_tstp.c,v 1.21 2000/05/20 23:28:56 tom Exp $")
d104 2
a105 1
static void tstp(int dummy GCC_UNUSED)
d107 2
a108 2
	sigset_t mask, omask;
	sigaction_t act, oact;
d111 1
a111 1
	int sigttou_blocked;
d114 1
a114 1
	T(("tstp() called"));
d116 10
a125 10
	/*
	 * The user may have changed the prog_mode tty bits, so save them.
	 *
	 * But first try to detect whether we still are in the foreground
	 * process group - if not, an interactive shell may already have
	 * taken ownership of the tty and modified the settings when our
	 * parent was stopped before us, and we would likely pick up the
	 * settings already modified by the shell.
	 */
	if (SP != 0 && !SP->_endwin) /* don't do this if we're not in curses */
d131 7
a137 7
	/*
	 * Block window change and timer signals.  The latter
	 * is because applications use timers to decide when
	 * to repaint the screen.
	 */
	(void)sigemptyset(&mask);
	(void)sigaddset(&mask, SIGALRM);
d139 1
a139 1
	(void)sigaddset(&mask, SIGWINCH);
d141 1
a141 1
	(void)sigprocmask(SIG_BLOCK, &mask, &omask);
d144 6
a149 6
	sigttou_blocked = sigismember(&omask, SIGTTOU);
	if (!sigttou_blocked) {
	    (void)sigemptyset(&mask);
	    (void)sigaddset(&mask, SIGTTOU);
	    (void)sigprocmask(SIG_BLOCK, &mask, NULL);
	}
d152 9
a160 9
	/*
	 * End window mode, which also resets the terminal state to the
	 * original (pre-curses) modes.
	 */
	endwin();

	/* Unblock SIGTSTP. */
	(void)sigemptyset(&mask);
	(void)sigaddset(&mask, SIGTSTP);
d162 4
a165 4
	if (!sigttou_blocked) {
            /* Unblock this too if it wasn't blocked on entry */
	    (void)sigaddset(&mask, SIGTTOU);
	}
d167 1
a167 1
	(void)sigprocmask(SIG_UNBLOCK, &mask, NULL);
d169 4
a172 4
	/* Now we want to resend SIGSTP to this process and suspend it */
	act.sa_handler = SIG_DFL;
	sigemptyset(&act.sa_mask);
	act.sa_flags = 0;
d174 1
a174 1
	act.sa_flags |= SA_RESTART;
d176 2
a177 2
	sigaction(SIGTSTP, &act, &oact);
	kill(getpid(), SIGTSTP);
d179 1
a179 1
	/* Process gets suspended...time passes...process resumes */
d181 15
a195 15
	T(("SIGCONT received"));
	sigaction(SIGTSTP, &oact, NULL);
	flushinp();

	/*
	 * If the user modified the tty state while suspended, he wants
	 * those changes to stick.  So save the new "default" terminal state.
	 */
	def_shell_mode();

	/*
	 * This relies on the fact that doupdate() will restore the
	 * program-mode tty state, and issue enter_ca_mode if need be.
	 */
	doupdate();
d197 2
a198 2
	/* Reset the signals. */
	(void)sigprocmask(SIG_SETMASK, &omask, NULL);
d200 1
a200 1
#endif	/* USE_SIGTSTP */
d202 2
a203 1
static void cleanup(int sig)
d205 1
a205 1
	static int nested;
d207 8
a214 8
	/*
	 * Actually, doing any sort of I/O from within an signal handler is
	 * "unsafe".  But we'll _try_ to clean up the screen and terminal
	 * settings on the way out.
	 */
	if (!nested++
	 && (sig == SIGINT
	  || sig == SIGQUIT)) {
d216 5
a220 5
		sigaction_t act;
		sigemptyset(&act.sa_mask);
		act.sa_flags = 0;
		act.sa_handler = SIG_IGN;
		if (sigaction(sig, &act, (sigaction_t *)0) == 0)
d222 1
a222 1
		if (signal(sig, SIG_IGN) != SIG_ERR)
d224 8
a231 16
		{
		    SCREEN *scan = _nc_screen_chain;
		    while(scan)
		    {
			if (SP != 0
			&& SP->_ofp != 0
			&& isatty(fileno(SP->_ofp))) {
			    SP->_cleanup = TRUE;
			    SP->_outch = _nc_outch;
			}
			set_term(scan);
			endwin();
			if (SP)
			    SP->_endwin = FALSE; /* in case we have an atexit! */
			scan = scan->_next_screen;
		    }
d233 6
d240 2
a241 1
	exit(EXIT_FAILURE);
d245 2
a246 1
static void sigwinch(int sig GCC_UNUSED)
d249 1
a249 2
    while(scan)
    {
d261 2
a262 1
static int CatchIfDefault(int sig, sigaction_t *act)
d264 1
a264 1
	sigaction_t old_act;
d266 2
a267 2
	if (sigaction(sig, (sigaction_t *)0, &old_act) == 0
	 && (old_act.sa_handler == SIG_DFL
d271 5
a275 5
	    )) {
		(void)sigaction(sig, act, (sigaction_t *)0);
		return TRUE;
	}
	return FALSE;
d278 2
a279 1
static int CatchIfDefault(int sig, RETSIGTYPE (*handler)(int))
d281 1
a281 1
	void	(*ohandler)(int);
d283 2
a284 2
	ohandler = signal(sig, SIG_IGN);
	if (ohandler == SIG_DFL
d286 1
a286 1
	    || (sig == SIGWINCH && ohandler == SIG_IGN)
d289 6
a294 6
		signal(sig, handler);
		return TRUE;
	} else {
		signal(sig, ohandler);
		return FALSE;
	}
d309 2
a310 1
void _nc_signal_handler(bool enable)
d312 13
a324 19
#if USE_SIGTSTP		/* Xenix 2.x doesn't have SIGTSTP, for example */
static sigaction_t act, oact;
static int ignore;

	if (!ignore)
	{
		if (!enable)
		{
			act.sa_handler = SIG_IGN;
			sigaction(SIGTSTP, &act, &oact);
		}
		else if (act.sa_handler)
		{
			sigaction(SIGTSTP, &oact, NULL);
		}
		else	/*initialize */
		{
			sigemptyset(&act.sa_mask);
			act.sa_flags = 0;
d326 2
a327 2
			act.sa_handler = sigwinch;
			CatchIfDefault(SIGWINCH, &act);
d331 1
a331 1
			act.sa_flags |= SA_RESTART;
d333 7
a339 8
			act.sa_handler = cleanup;
			CatchIfDefault(SIGINT,  &act);
			CatchIfDefault(SIGTERM, &act);

			act.sa_handler = tstp;
			if (!CatchIfDefault(SIGTSTP, &act))
				ignore = TRUE;
		}
d341 1
d343 1
a343 2
	if (enable)
	{
d345 2
a346 2
		static sigaction_t act;
		sigemptyset(&act.sa_mask);
d348 2
a349 2
		act.sa_handler = sigwinch;
		CatchIfDefault(SIGWINCH, &act);
d352 1
a352 1
		act.sa_flags |= SA_RESTART;
d354 3
a356 3
		act.sa_handler = cleanup;
		CatchIfDefault(SIGINT,  &act);
		CatchIfDefault(SIGTERM, &act);
d360 2
a361 2
		CatchIfDefault(SIGINT,  cleanup);
		CatchIfDefault(SIGTERM, cleanup);
d363 1
a363 1
		CatchIfDefault(SIGWINCH, sigwinch);
d366 1
a366 1
	}
@


1.5
log
@update to ncurses-5.0-19991127
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tstp.c,v 1.4 1999/08/15 11:40:56 millert Exp $	*/
d53 1
a53 1
MODULE_ID("$From: lib_tstp.c,v 1.20 1999/10/22 23:11:09 tom Exp $")
d231 1
@


1.4
log
@Update to ncurses-5.0-990814
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tstp.c,v 1.3 1999/06/27 08:14:21 millert Exp $	*/
d53 1
a53 1
MODULE_ID("$From: lib_tstp.c,v 1.19 1999/07/24 22:47:20 tom Exp $")
d204 2
d211 3
a213 2
	if (sig == SIGINT
	 || sig == SIGQUIT) {
d227 5
@


1.3
log
@ncurses-5.0-990626
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tstp.c,v 1.2 1999/01/31 20:17:10 millert Exp $	*/
d53 1
a53 1
MODULE_ID("$From: lib_tstp.c,v 1.18 1999/06/19 23:00:06 tom Exp $")
d125 1
d226 2
a227 1
			SP->_endwin = FALSE; /* in case we have an atexit! */
@


1.2
log
@ncurses-4.2-990130
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tstp.c,v 1.1 1999/01/18 19:10:26 millert Exp $	*/
d53 7
a59 1
MODULE_ID("$From: lib_tstp.c,v 1.17 1999/01/31 01:06:14 tom Exp $")
d104 1
a104 1
#ifdef SIGTSTP
d199 1
a199 1
#endif	/* defined(SIGTSTP) */
d266 1
a266 1
static int CatchIfDefault(int sig, RETSIGTYPE (*handler)())
d268 1
a268 1
	void	(*ohandler)();
d298 1
a298 1
#ifdef SIGTSTP		/* Xenix 2.x doesn't have this */
d334 1
a334 1
#else /* !SIGTSTP */
d360 1
a360 1
#endif /* !SIGTSTP */
@


1.1
log
@ncurses-4.2-990116
@
text
@d1 1
a1 1
/*	$OpenBSD: lib_tstp.c,v 1.8 1998/07/23 21:19:44 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Free Software Foundation, Inc.                        *
d53 1
a53 1
MODULE_ID("$From: lib_tstp.c,v 1.15 1998/02/11 12:13:57 tom Exp $")
d104 4
d112 6
d119 4
a122 1
	def_prog_mode();
d136 9
d154 6
@

