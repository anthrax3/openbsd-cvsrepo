head	1.2;
access;
symbols
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	from_mysql_3_22_4:1.1.1.2
	mit:1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.03.10.08.53.39;	author d;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.08.43.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.05;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.21.13.20.14;	author peter;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Goodbye, MIT pthreads... you were a handy reference implementation
@
text
@/* ==== pthread_detach.c =======================================================
 * Copyright (c) 1994 by Chris Provenzano, proven@@mit.edu
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by Chris Provenzano.
 * 4. The name of Chris Provenzano may not be used to endorse or promote 
 *	  products derived from this software without specific prior written
 *	  permission.
 *
 * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO BE LIABLE FOR ANY 
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 *
 * Description : pthread_join function.
 *
 *  1.00 94/01/15 proven
 *      -Started coding this file.
 */

#ifndef lint
static const char rcsid[] = "$Id: pthread_detach.c,v 1.1 1995/10/18 08:43:05 deraadt Exp $ $provenid: pthread_detach.c,v 1.16 1994/02/07 02:19:16 proven Exp $";
#endif

#include <pthread.h>

/* ==========================================================================
 * pthread_detach()
 */
int pthread_detach(pthread_t pthread)
{
	semaphore *plock;
	int ret;

	plock = &(pthread->lock);
	while (SEMAPHORE_TEST_AND_SET(plock)) {
		pthread_yield();
	}

	/* Check that thread isn't detached already */
	if (!(pthread->flags & PF_DETACHED)) {

		pthread->flags |= PF_DETACHED;

		/* Wakeup first threads waiting on a join */
		{
			struct pthread * next_thread;
			semaphore * next_lock;

			if (next_thread = pthread_queue_get(&(pthread->join_queue))) {
				next_lock = &(next_thread->lock);
				while (SEMAPHORE_TEST_AND_SET(next_lock)) {
					pthread_yield();
				}
				pthread_queue_deq(&(pthread->join_queue)); 
				next_thread->state = PS_RUNNING;
				/*
				 * Thread will wake up in pthread_join(), see the thread
				 * it was joined to already detached and unlock itself
				 * and pthread
				 */
			} else {
				SEMAPHORE_RESET(plock);
			}
		}
		ret = OK;

	} else {
		SEMAPHORE_RESET(plock);
		ret = ESRCH;
	}
	return(ret);
}
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
static const char rcsid[] = "$Id: pthread_detach.c,v 1.1 1994/02/07 22:04:24 proven Exp $ $provenid: pthread_detach.c,v 1.16 1994/02/07 02:19:16 proven Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@Complete initial import from mySQL 3.22.4 (mit-pthreads/).
Lots of dross to move and remove yet.

At minimum:
o	remove GNU config and GNU Makefiles
o	build arch directory and migrate away machdep/
o	rebuild BSD Makefiles
o	move notes etc. into doc/
@
text
@d39 1
a39 1
static const char rcsid[] = "$Id: pthread_detach.c,v 1.53.4.1 1995/12/13 05:53:05 proven Exp $";
a41 1
#include <errno.h>
d49 1
a49 1
	struct pthread * next_thread, * high_thread, * low_thread;
d52 4
a55 1
	pthread_sched_prevent();
d58 1
a58 1
	if (!(pthread->attr.flags & PTHREAD_DETACHED)) {
d60 1
a60 1
		pthread->attr.flags |= PTHREAD_DETACHED;
d62 9
a70 10
		/* Wakeup all threads waiting on a join */
		if (next_thread = pthread_queue_deq(&(pthread->join_queue))) {
			high_thread = next_thread;
			
			while (next_thread = pthread_queue_deq(&(pthread->join_queue))) {
				if (high_thread->pthread_priority < next_thread->pthread_priority) {
					low_thread = high_thread;
					high_thread = next_thread;
				} else {
					low_thread = next_thread;
d72 9
a80 6
				pthread_prio_queue_enq(pthread_current_prio_queue, low_thread);
				low_thread->state = PS_RUNNING;
			}
			/* If the thread is dead then move it to the alloc queue */
			if (pthread_queue_remove(&pthread_dead_queue, pthread) == OK) {
				pthread_queue_enq(&pthread_alloc_queue, pthread);
a81 7
			pthread_sched_other_resume(high_thread);
			return(OK);
		}
		/* If the thread is dead then move it to the alloc queue */
		if (pthread_queue_remove(&pthread_dead_queue, pthread) == OK) {
			pthread_queue_enq(&pthread_alloc_queue, pthread);
			pthread->state = PS_UNALLOCED;
d84 1
d86 1
a88 1
	pthread_sched_resume();
@

