head	1.2;
access;
symbols
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	from_mysql_3_22_4:1.1.1.2
	mit:1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.03.10.08.53.40;	author d;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.08.43.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.05;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.21.13.20.16;	author peter;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Goodbye, MIT pthreads... you were a handy reference implementation
@
text
@/* ==== pthread_join.c =======================================================
 * Copyright (c) 1994 by Chris Provenzano, proven@@mit.edu
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by Chris Provenzano.
 * 4. The name of Chris Provenzano may not be used to endorse or promote 
 *	  products derived from this software without specific prior written
 *	  permission.
 *
 * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO BE LIABLE FOR ANY 
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 *
 * Description : pthread_join function.
 *
 *  1.00 94/01/15 proven
 *      -Started coding this file.
 */

#ifndef lint
static const char rcsid[] = "$Id: pthread_join.c,v 1.1 1995/10/18 08:43:05 deraadt Exp $ $provenid: pthread_join.c,v 1.16 1994/02/07 02:19:19 proven Exp $";
#endif

#include <pthread.h>

/* ==========================================================================
 * pthread_join()
 */
int pthread_join(pthread_t pthread, void **thread_return)
{
	semaphore *lock, *plock;
	int ret;


	plock = &(pthread->lock);
	while (SEMAPHORE_TEST_AND_SET(plock)) {
		pthread_yield();
	}

	/* Check that thread isn't detached already */
	if (pthread->flags & PF_DETACHED) {
		SEMAPHORE_RESET(plock);
		return(ESRCH);
	} 

	lock = &(pthread_run->lock);
	while (SEMAPHORE_TEST_AND_SET(lock)) {
		pthread_yield();
	}

	/* If OK then queue current thread. */
	pthread_queue(&(pthread->join_queue), pthread_run);

	SEMAPHORE_RESET(plock);
	reschedule(PS_JOIN);

	/*
	 * At this point the thread is locked from the pthread_exit 
	 * and so are we, so no extra locking is required, but be sure
	 * to unlock at least ourself.
	 */
	if (!(pthread->flags & PF_DETACHED)) {
		if (thread_return) {
			*thread_return = pthread->ret;
		}
		pthread->flags |= PF_DETACHED;
		ret = OK;
	} else {
		ret = ESRCH;
	}

	/* Cant do a cleanup until queue is cleared */
	{
		struct pthread * next_thread;
		semaphore * next_lock;

		if (next_thread = pthread_queue_get(&(pthread->join_queue))) {
			next_lock = &(next_thread->lock);
			while (SEMAPHORE_TEST_AND_SET(next_lock)) {
				pthread_yield();
			}
			pthread_queue_deq(&(pthread->join_queue)); 
			next_thread->state = PS_RUNNING;
			/*
			 * Thread will wake up in pthread_join(), see the thread
			 * it was joined to already detached and unlock itself
			 */
		} else {
			SEMAPHORE_RESET(lock);
		}
	}

	SEMAPHORE_RESET(plock);
	return(ret);
}
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
static const char rcsid[] = "$Id: pthread_join.c,v 1.1 1994/02/07 22:04:26 proven Exp $ $provenid: pthread_join.c,v 1.16 1994/02/07 02:19:19 proven Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@Complete initial import from mySQL 3.22.4 (mit-pthreads/).
Lots of dross to move and remove yet.

At minimum:
o	remove GNU config and GNU Makefiles
o	build arch directory and migrate away machdep/
o	rebuild BSD Makefiles
o	move notes etc. into doc/
@
text
@d39 1
a39 1
static const char rcsid[] = "$Id: pthread_join.c,v 1.53.4.1 1995/12/13 05:53:07 proven Exp $";
a42 3
#include <errno.h>

static int testDeadlock( struct pthread_queue *queue, pthread_t target );
d49 1
a51 1
	pthread_sched_prevent();
d53 4
a56 5
	/* Ensure they gave us a legal pthread pointer */
	if( ! __pthread_is_valid( pthread ) ) {
		pthread_sched_resume();
		return(EINVAL);
	} 
d59 2
a60 2
	if (pthread->attr.flags & PTHREAD_DETACHED) {
		pthread_sched_resume();
d64 11
d76 3
a78 2
	 * Now check if other thread has exited
	 * Note: This must happen after checking detached state.
d80 3
a82 24
	if (pthread_queue_remove(&pthread_dead_queue, pthread) != OK) {

		/* Before we pend on the join, ensure there is no dead lock */

		if( testDeadlock( &pthread_run->join_queue, pthread ) == NOTOK ) {
			ret = EDEADLK;
		} else {
			pthread_queue_enq(&(pthread->join_queue), pthread_run);
			SET_PF_AT_CANCEL_POINT(pthread_run); /* This is a cancel point */
			pthread_resched_resume(PS_JOIN);
			CLEAR_PF_AT_CANCEL_POINT(pthread_run); /* No longer at cancel point */
			pthread_sched_prevent();

			if (pthread_queue_remove(&pthread_dead_queue, pthread) == OK) {
				pthread_queue_enq(&pthread_alloc_queue, pthread);
				pthread->attr.flags |= PTHREAD_DETACHED;
				pthread->state = PS_UNALLOCED;
				if (thread_return) {
					*thread_return = pthread->ret;
				}
				ret = OK;
			} else {
				ret = ESRCH;
			}
d84 1
a84 8
    } else {
		/* Just get the return value and detach the thread */
		pthread_queue_enq(&pthread_alloc_queue, pthread);
		pthread->attr.flags |= PTHREAD_DETACHED;
		pthread->state = PS_UNALLOCED;
		if (thread_return) {
            *thread_return = pthread->ret;
        }
d86 2
a88 3
	pthread_sched_resume();
	return(ret);
}
d90 18
a107 24
/*----------------------------------------------------------------------
 * Function:	testDeadlock
 * Purpose:		recursive queue walk to check for deadlocks
 * Args:
 *		queue	= the queue to walk
 *		pthread	= target to scan for
 * Returns:
 *		OK = no deadlock, NOTOK = deadlock
 * Notes:
 *----------------------------------------------------------------------*/
static int
testDeadlock( struct pthread_queue *queue, pthread_t target )
{
	pthread_t t;

	if( queue == NULL )
		return OK;						/* Empty queue, obviously ok */

	for( t = queue->q_next; t; t = t->next ) {
		if( t == target )
			return NOTOK;				/* bang, your dead */

		if( testDeadlock( &t->join_queue, target ) == NOTOK ) {
			return NOTOK;
d111 2
a112 1
	return OK;							/* No deadlock */
@

