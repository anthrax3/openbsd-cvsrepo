head	1.2;
access;
symbols
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	from_mysql_3_22_4:1.1.1.2
	mit:1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.03.10.08.53.39;	author d;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.08.43.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.05;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.21.13.20.12;	author peter;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Goodbye, MIT pthreads... you were a handy reference implementation
@
text
@/* ==== pthread_attr.c =======================================================
 * Copyright (c) 1993, 1994 by Chris Provenzano, proven@@mit.edu
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by Chris Provenzano.
 * 4. The name of Chris Provenzano may not be used to endorse or promote 
 *	  products derived from this software without specific prior written
 *	  permission.
 *
 * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO BE LIABLE FOR ANY 
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 *
 * Description : Pthread attribute functions.
 *
 *  1.00 93/11/04 proven
 *      -Started coding this file.
 */

#ifndef lint
static const char rcsid[] = "$Id: pthread_attr.c,v 1.1 1995/10/18 08:43:05 deraadt Exp $ $provenid: pthread_attr.c,v 1.16 1994/02/07 02:19:14 proven Exp $";
#endif

#include <pthread.h>
#include <errno.h>

/* Currently we do no locking, should we just to be safe? CAP */
/* ==========================================================================
 * pthread_attr_init()
 */
int pthread_attr_init(pthread_attr_t *attr)
{
	memcpy(attr, &pthread_default_attr, sizeof(pthread_attr_t));
	return(OK);
}

/* ==========================================================================
 * pthread_attr_destroy()
 */
int pthread_attr_destroy(pthread_attr_t *attr)
{
	return(OK);
}

/* ==========================================================================
 * pthread_attr_getstacksize()
 */
int pthread_attr_getstacksize(pthread_attr_t *attr, size_t * stacksize)
{
	*stacksize = attr->stacksize_attr;
	return(OK);
}

/* ==========================================================================
 * pthread_attr_setstacksize()
 */
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize)
{
	if (stacksize >= PTHREAD_STACK_MIN) {
		attr->stacksize_attr = stacksize;
		return(OK);
	}
	return(EINVAL);
}

/* ==========================================================================
 * pthread_attr_getstackaddr()
 */
int pthread_attr_getstackaddr(pthread_attr_t *attr, void ** stackaddr)
{
	*stackaddr = attr->stackaddr_attr;
	return(OK);
}

/* ==========================================================================
 * pthread_attr_setstackaddr()
 */
int pthread_attr_setstackaddr(pthread_attr_t *attr, void * stackaddr)
{
	attr->stackaddr_attr = stackaddr;
	return(OK);
}
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
static const char rcsid[] = "$Id: pthread_attr.c,v 1.3 1994/02/07 22:04:23 proven Exp $ $provenid: pthread_attr.c,v 1.16 1994/02/07 02:19:14 proven Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@Complete initial import from mySQL 3.22.4 (mit-pthreads/).
Lots of dross to move and remove yet.

At minimum:
o	remove GNU config and GNU Makefiles
o	build arch directory and migrate away machdep/
o	rebuild BSD Makefiles
o	move notes etc. into doc/
@
text
@d39 1
a39 1
static const char rcsid[] = "$Id: pthread_attr.c,v 1.58.4.1 1996/11/11 05:56:52 proven Exp $";
a43 1
#include <string.h>
d51 1
a51 1
	memcpy(attr, &pthread_attr_default, sizeof(pthread_attr_t));
a100 154

/* ==========================================================================
 * pthread_attr_setcleanup()
 */
int pthread_attr_setcleanup(pthread_attr_t *attr, void (*routine)(void *),
  void * arg)
{
	attr->cleanup_attr = routine;
	attr->arg_attr = arg;
	return(OK);
}

/* ==========================================================================
 * pthread_attr_getdetachstate()
 */
int pthread_attr_getdetachstate(pthread_attr_t *attr, int * detachstate)
{
	*detachstate = attr->flags & PTHREAD_DETACHED;
	return(OK);
}

/* ==========================================================================
 * pthread_attr_setdetachstate()
 */
int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate)
{
	attr->flags = (attr->flags & ~(PTHREAD_DETACHED)) |
	  (detachstate & PTHREAD_DETACHED);
	return(OK);
}

/* ==========================================================================
 * pthread_attr_getfloatstate()
 */
int pthread_attr_getfloatstate(pthread_attr_t *attr, int * floatstate)
{
	*floatstate = attr->flags & PTHREAD_NOFLOAT;
	return(OK);
}

/* ==========================================================================
 * pthread_attr_setfloatstate()
 */
int pthread_attr_setfloatstate(pthread_attr_t *attr, int floatstate)
{
	attr->flags = (attr->flags & ~(PTHREAD_NOFLOAT)) |
	  (floatstate & PTHREAD_NOFLOAT);
	return(OK);
}

/* ==========================================================================
 * pthread_attr_getscope()
 */
int pthread_attr_getscope(pthread_attr_t *attr, int * contentionscope)
{
	*contentionscope = attr->flags & PTHREAD_SCOPE_SYSTEM;
	return(OK);
}

/* ==========================================================================
 * pthread_attr_setscope()
 */
int pthread_attr_setscope(pthread_attr_t *attr, int contentionscope)
{
	int ret;

	switch (contentionscope) {
	case PTHREAD_SCOPE_PROCESS:
		attr->flags = (attr->flags & ~(PTHREAD_SCOPE_PROCESS)) 
		  | PTHREAD_SCOPE_PROCESS;
		ret = OK;
		break;
	case PTHREAD_SCOPE_SYSTEM:
		ret = ENOSYS;
		break;
	default:
		ret = EINVAL;
		break;
	}

	return(ret);
}

/* ==========================================================================
 * pthread_attr_getinheritsched()
 */
int pthread_attr_getinheritsched(pthread_attr_t *attr, int * inheritsched)
{
	*inheritsched = attr->flags & PTHREAD_INHERIT_SCHED;
	return(OK);
}

/* ==========================================================================
 * pthread_attr_setinheritsched()
 */
int pthread_attr_setinheritsched(pthread_attr_t *attr, int inheritsched)
{
	attr->flags = (attr->flags & ~(PTHREAD_INHERIT_SCHED)) |
	  (inheritsched & PTHREAD_INHERIT_SCHED);
	return(OK);
}

/* ==========================================================================
 * pthread_attr_getschedpolicy()
 */
int pthread_attr_getschedpolicy(pthread_attr_t *attr, int * schedpolicy)
{
	*schedpolicy = (int)attr->schedparam_policy;
	return(OK);
}

/* ==========================================================================
 * pthread_attr_setschedpolicy()
 */
int pthread_attr_setschedpolicy(pthread_attr_t *attr, int schedpolicy)
{
	int ret;

	switch(schedpolicy) {
	case SCHED_FIFO:
	case SCHED_IO:
	case SCHED_RR:
		attr->schedparam_policy = schedpolicy;
		ret = OK;
		break;
	default:
		ret = EINVAL;
		break;
	}
	return(ret);
}

/* ==========================================================================
 * pthread_attr_getschedparam()
 */
int pthread_attr_getschedparam(pthread_attr_t *attr, struct sched_param * param)
{
	param->sched_priority = attr->sched_priority;
	return(OK);
}

/* ==========================================================================
 * pthread_attr_setschedparam()
 */
int pthread_attr_setschedparam(pthread_attr_t *attr, struct sched_param * param)
{
	if ((param->sched_priority >= PTHREAD_MIN_PRIORITY) &&
	  (param->sched_priority <= PTHREAD_MAX_PRIORITY)) {
		attr->sched_priority = param->sched_priority;
		return(OK);
	}
	return(EINVAL);
}

@

