head	1.2;
access;
symbols
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	from_mysql_3_22_4:1.1.1.2
	mit:1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.03.10.08.53.37;	author d;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.08.43.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.05;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.21.13.20.00;	author peter;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Goodbye, MIT pthreads... you were a handy reference implementation
@
text
@/* ==== file.c ============================================================
 * Copyright (c) 1993, 1994 by Chris Provenzano, proven@@mit.edu
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by Chris Provenzano.
 * 4. The name of Chris Provenzano may not be used to endorse or promote 
 *	  products derived from this software without specific prior written
 *	  permission.
 *
 * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO BE LIABLE FOR ANY 
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 *
 * Description : The locking functions for stdio.
 *
 *  1.00 93/09/04 proven
 *      -Started coding this file.
 */

#ifndef lint
static const char rcsid[] = "$Id: file.c,v 1.1 1995/10/18 08:43:05 deraadt Exp $ $provenid: file.c,v 1.16 1994/02/07 02:18:55 proven Exp $";
#endif

#include <pthread.h>
#include <stdio.h>

/* ==========================================================================
 * flockfile()
 */
void flockfile(FILE *fp)
{
	semaphore *lock;
	int fd;

	fd = fileno(fp);
	lock = &(fd_table[fd]->lock);
	while (SEMAPHORE_TEST_AND_SET(lock)) {
		pthread_yield();
	}

	if (fd_table[fd]->r_owner != pthread_run) {
		/* This might fail but POSIX doesn't give a damn. */
		fd_basic_lock(fd, FD_RDWR, lock);
	}
	fd_table[fd]->lockcount++;
	SEMAPHORE_RESET(lock);
}

/* ==========================================================================
 * ftrylockfile()
 */
int ftrylockfile(FILE *fp)
{
	semaphore *lock;
	int fd;

	fd = fileno(fp);
	lock = &(fd_table[fd]->lock);
	while (SEMAPHORE_TEST_AND_SET(lock)) {
		pthread_yield();
	}

	if (fd_table[fd]->r_owner != pthread_run) {
		if (!(fd_table[fd]->r_owner && fd_table[fd]->w_owner)) {
			fd_basic_lock(fd, FD_RDWR, lock);
			fd = OK;
		} else {
			fd = NOTOK;
		}
	} else {
		fd_table[fd]->lockcount++;
		fd = OK;
	}
	SEMAPHORE_RESET(lock);
	return(fd);
}

/* ==========================================================================
 * funlockfile()
 */
void funlockfile(FILE *fp)
{
	semaphore *lock;
	int fd;

	fd = fileno(fp);
	lock = &(fd_table[fd]->lock);
	while (SEMAPHORE_TEST_AND_SET(lock)) {
		pthread_yield();
	}

	if (fd_table[fd]->r_owner == pthread_run) {
		if (--fd_table[fd]->lockcount == 0) {
			fd_basic_unlock(fd, FD_RDWR);
		}
	} 
	SEMAPHORE_RESET(lock);
}

@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
static const char rcsid[] = "$Id: file.c,v 1.3 1994/02/07 22:04:18 proven Exp $ $provenid: file.c,v 1.16 1994/02/07 02:18:55 proven Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@Complete initial import from mySQL 3.22.4 (mit-pthreads/).
Lots of dross to move and remove yet.

At minimum:
o	remove GNU config and GNU Makefiles
o	build arch directory and migrate away machdep/
o	rebuild BSD Makefiles
o	move notes etc. into doc/
@
text
@d39 1
a39 1
static const char rcsid[] = "$Id: file.c,v 1.53 1995/03/11 22:24:27 proven Exp $";
d50 2
a51 2
	pthread_mutex_t *mutex;
	int fd, flags;
d53 5
a57 12
	if ((fd = fileno(fp)) >= 0) {
		pthread_mutex_lock(mutex = &(fd_table[fd]->mutex));

		if (fp->_flags & __SRW) {
			flags = FD_READ | FD_WRITE;
		} else {
			if (fp->_flags & __SWR) {
				flags = FD_WRITE;
			} else {
				flags = FD_READ;
			}
		}
d59 1
d61 1
a61 2
		fd_basic_lock(fd, flags, mutex, NULL);
		pthread_mutex_unlock(mutex);
d63 2
d72 2
a73 2
	pthread_mutex_t *mutex;
	int fd, flags;
d75 5
a79 2
	if ((fd = fileno(fp)) >= 0) {
		pthread_mutex_lock(mutex = &(fd_table[fd]->mutex));
d81 1
a81 9
		if (fp->_flags & __SRW) {
			flags = FD_READ | FD_WRITE;
		} else {
			if (fp->_flags & __SWR) {
				flags = FD_WRITE;
			} else {
				flags = FD_READ;
			}
		}
d83 1
a83 1
			fd_basic_lock(fd, flags, mutex, NULL);
a87 1
		pthread_mutex_unlock(mutex);
d89 1
d92 1
d101 2
a102 2
	pthread_mutex_t *mutex;
	int fd, flags;
d104 5
a108 2
	if ((fd = fileno(fp)) >= 0) {
		pthread_mutex_lock(mutex = &(fd_table[fd]->mutex));
d110 3
a112 8
		if (fp->_flags & __SRW) {
			flags = FD_READ | FD_WRITE;
		} else {
			if (fp->_flags & __SWR) {
				flags = FD_WRITE;
			} else {
				flags = FD_READ;
			}
d114 2
a115 3
		fd_basic_unlock(fd, flags);
		pthread_mutex_unlock(mutex);
	}
@

