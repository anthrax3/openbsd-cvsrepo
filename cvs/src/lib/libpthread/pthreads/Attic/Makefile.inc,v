head	1.5;
access;
symbols
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	from_mysql_3_22_4:1.1.1.2
	mit:1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.5
date	99.03.10.08.53.34;	author d;	state dead;
branches;
next	1.4;

1.4
date	98.07.22.10.46.50;	author peter;	state Exp;
branches;
next	1.3;

1.3
date	98.07.21.19.47.58;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	98.07.21.16.28.44;	author peter;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.04;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.21.13.19.48;	author peter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Goodbye, MIT pthreads... you were a handy reference implementation
@
text
@#	from: @@(#)Makefile.inc	5.6 (Berkeley) 6/4/91

.PATH: ${.CURDIR}/pthreads

SRCS+= cleanup.c cond.c fd.c fd_kern.c fd_pipe.c file.c globals.c malloc.c \
       mutex.c pthread.c pthread_attr.c queue.c signal.c machdep.c syscall.S \
       pthread_join.c pthread_detach.c pthread_once.c sleep.c specific.c \
       process.c wait.c errno.c schedparam.c _exit.c prio_queue.c \
       pthread_init.c init.cc sig.c info.c mutexattr.c select.c wrapper.c \
       dump_state.c pthread_kill.c condattr.c pthread_cancel.c panic.c

# glue to provide compatibility between GCC 1.X and 2.X and for compat
# with old syscall interfaces.
#SRCS+=	ftruncate.c lseek.c mmap.c semctl.c truncate.c \
#	timer_create.c timer_delete.c timer_getoverrun.c timer_gettime.c \
#	timer_settime.c

# modules with default implementations on all architectures:
ASM=	accept.o access.o acct.o adjtime.o bind.o chdir.o chflags.o chmod.o \
	chown.o chroot.o clock_gettime.o clock_settime.o clock_getres.o \
	close.o connect.o dup.o dup2.o execve.o fchdir.o \
	fchflags.o fchmod.o fchown.o fcntl.o flock.o fpathconf.o fstat.o \
	fstatfs.o fsync.o futimes.o getdirentries.o getegid.o geteuid.o \
	getfh.o getfsstat.o getgid.o getgroups.o getitimer.o getpeername.o \
	getpgid.o \
	getpgrp.o getpid.o getppid.o getpriority.o getrlimit.o getrusage.o \
	getsid.o \
	getsockname.o getsockopt.o gettimeofday.o getuid.o issetugid.o \
	ioctl.o kill.o \
	ktrace.o lchown.o lfs_bmapv.o lfs_markv.o lfs_segclean.o lfs_segwait.o \
	link.o listen.o lstat.o madvise.o mincore.o minherit.o mkdir.o \
	mkfifo.o mknod.o mlock.o \
	mount.o mprotect.o msgctl.o msgget.o msgrcv.o msgsnd.o msync.o \
	munlock.o munmap.o nanosleep.o nfssvc.o \
	ntp_gettime.o ntp_adjtime.o \
	open.o pathconf.o poll.o profil.o quotactl.o \
	read.o readlink.o readv.o reboot.o recvfrom.o recvmsg.o rename.o \
	revoke.o rfork.o \
	rmdir.o select.o semconfig.o semget.o semop.o sendmsg.o sendto.o \
	setegid.o seteuid.o setgid.o setgroups.o setitimer.o setpgid.o \
	setpriority.o setrlimit.o setsid.o setsockopt.o settimeofday.o \
	setuid.o shmat.o shmctl.o shmdt.o shmget.o shutdown.o sigaction.o \
	sigaltstack.o socket.o socketpair.o stat.o statfs.o swapon.o \
	symlink.o sync.o sysarch.o umask.o undelete.o unlink.o unmount.o \
	utimes.o vadvise.o wait4.o write.o writev.o __semctl.o \
	__sysctl.o

PASM=	${ASM:.o=.po}
SASM=	${ASM:.o=.so}

PSEUDO=	_exit.o _getlogin.o
PPSEUDO=${PSEUDO:.o=.po}
SPSEUDO=${PSEUDO:.o=.so}

OBJS+=	${ASM} ${PSEUDO}

${PASM}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nRSYSCALL(${.PREFIX})\n' | \
	    ${CPP} -DPROF ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.if (${MACHINE_ARCH} != "mips")
${SASM}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nRSYSCALL(${.PREFIX})\n' | \
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -k -o ${.TARGET}
.else
${SASM}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nRSYSCALL(${.PREFIX})\n' | \
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}
.endif

${ASM}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nRSYSCALL(${.PREFIX})\n' | \
	    ${CPP} ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${PPSEUDO}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${CPP} -DPROF ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.if (${MACHINE_ARCH} != "mips")
${SPSEUDO}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -k -o ${.TARGET}
.else
${SPSEUDO}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${CPP} -DPIC ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}
.endif

${PSEUDO}: ${.CURDIR}/arch/${MACHINE_ARCH}/SYS.h /usr/include/sys/syscall.h
	@@echo creating ${.TARGET}
	@@printf '#include "SYS.h"\nPSEUDO(${.PREFIX},${.PREFIX:S/_//})\n' | \
	    ${CPP} ${CFLAGS:M-[ID]*} ${AINC} | ${AS} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o
@


1.4
log
@o removed more unused or old, left over files

o general changes so that now the library compiles and many of the
  tests run correctly

o pthreads/Makefile.inc rebuilt using libc/sys/Makefile.inc as a template.
  this should be kept in sync in case of new syscalls

soon TODO:
figure out why remaining tests fail and fix
look at building .so version of library
tidy up arch/i386 directory - no longer uses syscall-template.S
port other arch's from libc syscall templates
@
text
@@


1.3
log
@this will now compile on i386 if you move arch/i386/machdep.h to
arch/i386/pthread/machdep.h - not an ideal solution. Correct fix
is welcome. I am quiting work on this for today, so other hackers
are welcome to take it up for the rest of the day/night. More from
me tomorrow.
@
text
@d12 57
a68 10
OBJS+= syscalls.o

AVAILABLE_SYSCALLS =  open write read creat close fcntl lseek dup pipe fchmod fchown execve fstat lstat link unlink chdir chown chmod stat rename ioctl fstatfs sigsuspend sigaction sigprocmask getdents waitsys poll putmsg getmsg pgrpsys exit readv writev fork

SYSCALL_TEMPLATE = ${.CURDIR}/arch/${MACHINE}/syscall-template.S
SYSCALL_S = ${.CURDIR}/arch/${MACHINE}/syscall.S

.if !defined(NOPIC)
SOBJS+= syscalls.so
SYSCALL_PIC_COMPILE= $(CC) $(CFLAGS) -DSYSCALL_NAME=$$syscall -DPIC -c ${SYSCALL_TEMPLATE} -o ${.OBJDIR}/syscalls/S$$syscall.so
d70 4
a73 1
SYSCALL_PIC_COMPILE= true
d76 19
a94 3
.if !defined(NOPROFILE)
POBJS+= syscalls.po
SYSCALL_PROF_COMPILE= $(CC) $(CFLAGS) -DSYSCALL_NAME=$$syscall -pg -c ${SYSCALL_TEMPLATE} -o ${.OBJDIR}/syscalls/S$$syscall.po
d96 4
a99 18
SYSCALL_PROF_COMPILE= true
.endif

syscalls.o syscalls.so syscalls.po : ${SYSCALL_TEMPLATE}
	-rm -rf ${.OBJDIR}/syscalls
	mkdir ${.OBJDIR}/syscalls
	for syscall in $(AVAILABLE_SYSCALLS) ; do \
	  case " $(SYSCALL_EXCEPTIONS) " in \
	    *" "$$syscall" "*) ;; \
	    *)	echo $$syscall ; \
		$(CC) $(CFLAGS) -DSYSCALL_NAME=$$syscall -c ${SYSCALL_TEMPLATE} -o ${.OBJDIR}/syscalls/S$$syscall.o ; \
		$(SYSCALL_PIC_COMPILE) ; \
		$(SYSCALL_PROF_COMPILE) ;; \
	  esac ; \
	done
	x=`pwd` && cd ${.OBJDIR}/syscalls && ld -r -o ../syscalls.o *.o && cd $$x
.if !defined(NOPIC)
	x=`pwd` && cd ${.OBJDIR}/syscalls && ld -r -o ../syscalls.so *.so && cd $$x
d102 6
a107 21
.if !defined(NOPROFILE)
	x=`pwd` && cd ${.OBJDIR}/syscalls && ld -r -o ../syscalls.po *.po && cd $$x
.endif
	rm -r ${.OBJDIR}/syscalls

syscall.o: syscall.S
	cpp ${CPPFLAGS} ${SYSCALL_S} > syscall.i
	as syscall.i 
	rm syscall.i
	mv a.out syscall.o

syscall.po: syscall.S
	cpp ${CPPFLAGS} ${SYSCALL_S} > syscall.i
	as syscall.i 
	rm syscall.i
	mv a.out syscall.po

MAN2+=

MAN3+=

@


1.2
log
@move unchanged files from machdep/ into appropriate arch/${MACHINE}
directories. These files have been renamed as appropriate, but
hackers of these files should note those that started off as netbsd
files (alpha and sparc).

also moved machdep/openbsd-2.0/ to include/sys/
@
text
@d14 5
d21 1
a21 1
SYSCALL_PIC_COMPILE= $(CC) $(CFLAGS) -DSYSCALL_NAME=$$syscall -DPIC -c ${.CURDIR}/syscall-template.S -o ${.OBJDIR}/syscalls/S$$syscall.so
d28 1
a28 1
SYSCALL_PROF_COMPILE= $(CC) $(CFLAGS) -DSYSCALL_NAME=$$syscall -pg -c ${.CURDIR}/syscall-template.S -o ${.OBJDIR}/syscalls/S$$syscall.po
d33 1
a33 1
syscalls.o syscalls.so syscalls.po : syscall-template.S
d40 1
a40 1
		$(CC) $(CFLAGS) -DSYSCALL_NAME=$$syscall -c ${.CURDIR}/syscall-template.S -o ${.OBJDIR}/syscalls/S$$syscall.o ; \
d56 1
a56 1
	cpp ${CPPFLAGS} ${.CURDIR}/syscall.S > syscall.i
d62 1
a62 1
	cpp ${CPPFLAGS} ${.CURDIR}/syscall.S > syscall.i
@


1.1
log
@Initial revision
@
text
@a2 1
# pthread sources
d5 60
a64 3
SRCS+= cond.c fd.c fd_kern.c fd_pipe.c file.c globals.c malloc.c mutex.c \
       pthread.c pthread_attr.c queue.c signal.c pthread_join.c \
       pthread_detach.c sleep.c
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@Complete initial import from mySQL 3.22.4 (mit-pthreads/).
Lots of dross to move and remove yet.

At minimum:
o	remove GNU config and GNU Makefiles
o	build arch directory and migrate away machdep/
o	rebuild BSD Makefiles
o	move notes etc. into doc/
@
text
@d4 1
a4 1
.PATH: ${srcdir}/pthreads
d6 3
a8 59
SRCS+= cleanup.c cond.c fd.c fd_kern.c fd_pipe.c file.c globals.c malloc.c \
       mutex.c pthread.c pthread_attr.c queue.c signal.c machdep.c syscall.S \
       pthread_join.c pthread_detach.c pthread_once.c sleep.c specific.c \
       process.c wait.c errno.c schedparam.c _exit.c prio_queue.c \
       pthread_init.c init.cc sig.c info.c mutexattr.c select.c wrapper.c \
       dump_state.c pthread_kill.c condattr.c pthread_cancel.c panic.c

.if $(HAVE_SYSCALL_TEMPLATE) == yes
OBJS+= syscalls.o
.if !defined(NOPIC)
SOBJS+= syscalls.so
SYSCALL_PIC_COMPILE= $(CC) $(CFLAGS) -DSYSCALL_NAME=$$syscall -DPIC -c ${.CURDIR}/syscall-template.S -o ${.OBJDIR}/syscalls/S$$syscall.so
.else
SYSCALL_PIC_COMPILE= true
.endif
.if !defined(NOPROFILE)
POBJS+= syscalls.po
SYSCALL_PROF_COMPILE= $(CC) $(CFLAGS) -DSYSCALL_NAME=$$syscall -pg -c ${.CURDIR}/syscall-template.S -o ${.OBJDIR}/syscalls/S$$syscall.po
.else
SYSCALL_PROF_COMPILE= true
.endif

syscalls.o syscalls.so syscalls.po : syscall-template.S
	-rm -rf ${.OBJDIR}/syscalls
	mkdir ${.OBJDIR}/syscalls
	for syscall in $(AVAILABLE_SYSCALLS) ; do \
	  case " $(SYSCALL_EXCEPTIONS) " in \
	    *" "$$syscall" "*) ;; \
	    *)	echo $$syscall ; \
		$(CC) $(CFLAGS) -DSYSCALL_NAME=$$syscall -c ${.CURDIR}/syscall-template.S -o ${.OBJDIR}/syscalls/S$$syscall.o ; \
		$(SYSCALL_PIC_COMPILE) ; \
		$(SYSCALL_PROF_COMPILE) ;; \
	  esac ; \
	done
	x=`pwd` && cd ${.OBJDIR}/syscalls && ld -r -o ../syscalls.o *.o && cd $$x
.if !defined(NOPIC)
	x=`pwd` && cd ${.OBJDIR}/syscalls && ld -r -o ../syscalls.so *.so && cd $$x
.endif
.if !defined(NOPROFILE)
	x=`pwd` && cd ${.OBJDIR}/syscalls && ld -r -o ../syscalls.po *.po && cd $$x
.endif
	rm -r ${.OBJDIR}/syscalls
.endif

syscall.o: syscall.S
	cpp ${CPPFLAGS} ${.CURDIR}/syscall.S > syscall.i
	as syscall.i 
	rm syscall.i
	mv a.out syscall.o

syscall.po: syscall.S
	cpp ${CPPFLAGS} ${.CURDIR}/syscall.S > syscall.i
	as syscall.i 
	rm syscall.i
	mv a.out syscall.po

MAN2+=

MAN3+=
@

