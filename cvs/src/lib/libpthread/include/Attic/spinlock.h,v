head	1.10;
access;
symbols
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.40
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.38
	OPENBSD_5_0:1.8.0.36
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.34
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.32
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.28
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.30
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.26
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.24
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.22
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.20
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.18
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.16
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.14
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.12
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.10
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.8
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8;
locks; strict;
comment	@ * @;


1.10
date	2013.06.01.20.47.40;	author tedu;	state dead;
branches;
next	1.9;

1.9
date	2012.12.05.23.20.05;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.31.04.46.17;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.25;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.04.22.17.45;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.06.07.06.42;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.11.25.07.01.29;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.18.00.03.34;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.08.08.25.37;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.12.21.07.58.55;	author d;	state Exp;
branches;
next	;


desc
@@


1.10
log
@cleanup and consolidate the spinlock_lock (what a name!) code.
it's now atomic_lock to better reflect its usage, and librthread now
features a new spinlock that's really a ticket lock.
thrlseep can handle both types of lock via a flag in the clock arg.
(temp back compat hack)
remove some old stuff that's accumulated along the way and no longer used.
some feedback from dlg, who is concerned with all things ticket lock.
(you need to boot a new kernel before installing librthread)
@
text
@/*
 * Copyright (c) 1998 John Birrell <jb@@cimlogic.com.au>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $Id: spinlock.h,v 1.9 2012/12/05 23:20:05 deraadt Exp $
 * $OpenBSD: spinlock.h,v 1.9 2012/12/05 23:20:05 deraadt Exp $
 *
 * Lock definitions used in both libc and libpthread.
 *
 */

#ifndef _SPINLOCK_H_
#define _SPINLOCK_H_
#include <sys/types.h>
#include <machine/spinlock.h>

/*
 * Lock structure with room for debugging information.
 */
typedef volatile struct {
	_spinlock_lock_t	access_lock;
	void *			lock_owner;
	const char *		fname;
	int			lineno;
} spinlock_t;

#define	_SPINLOCK_INITIALIZER	{ _SPINLOCK_UNLOCKED, 0, 0, 0 }

#define _SPINUNLOCK(_lck)	(_lck)->access_lock = _SPINLOCK_UNLOCKED
#ifdef	_LOCK_DEBUG
#define	_SPINLOCK(_lck)		_spinlock_debug(_lck, __FILE__, __LINE__)
#else
#define	_SPINLOCK(_lck)		_spinlock(_lck)
#endif

#define _SPINLOCK_INIT(_lck)	_SPINUNLOCK(_lck)

/*
 * Thread function prototype definitions:
 */
__BEGIN_DECLS
void	_spinlock(spinlock_t *);
void	_spinlock_debug(spinlock_t *, const char *, int);

/* lock() functions return 0 if lock was acquired. */
/* is_locked functions() return 1 if lock is locked. */
int	_atomic_lock(volatile _spinlock_lock_t *);
int	_atomic_is_locked(volatile _spinlock_lock_t *);
__END_DECLS

#endif /* _SPINLOCK_H_ */
@


1.9
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d32 2
a33 2
 * $Id: spinlock.h,v 1.8 2003/01/31 04:46:17 marc Exp $
 * $OpenBSD: spinlock.h,v 1.8 2003/01/31 04:46:17 marc Exp $
@


1.8
log
@
Create a siginfo_t for thread-to-thread kill.
Clean up (compiler warning elimination).   Compile check options added
but commented out as they have not been checked on all architectures, yet.
@
text
@d32 2
a33 2
 * $Id: spinlock.h,v 1.7 2002/02/16 21:27:25 millert Exp $
 * $OpenBSD: spinlock.h,v 1.7 2002/02/16 21:27:25 millert Exp $
a40 1
#include <sys/cdefs.h>
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d32 2
a33 2
 * $Id: spinlock.h,v 1.6 2001/09/04 22:17:45 fgsch Exp $
 * $OpenBSD: spinlock.h,v 1.6 2001/09/04 22:17:45 fgsch Exp $
d51 1
a51 1
	char *			fname;
d71 1
a71 1
void	_spinlock_debug(spinlock_t *, char *, int);
@


1.6
log
@put changes back, this time ALL the files.
@
text
@d32 2
a33 2
 * $Id: spinlock.h,v 1.5 2000/01/06 07:06:42 d Exp $
 * $OpenBSD: spinlock.h,v 1.5 2000/01/06 07:06:42 d Exp $
d70 2
a71 2
void	_spinlock __P((spinlock_t *));
void	_spinlock_debug __P((spinlock_t *, char *, int));
d75 2
a76 2
int	_atomic_lock __P((volatile _spinlock_lock_t *));
int	_atomic_is_locked __P((volatile _spinlock_lock_t *));
@


1.5
log
@volatile the spinlock
@
text
@d32 2
a33 2
 * $Id: spinlock.h,v 1.4 1999/11/25 07:01:29 d Exp $
 * $OpenBSD: spinlock.h,v 1.4 1999/11/25 07:01:29 d Exp $
d51 1
a51 1
	const char *		fname;
d71 1
a71 1
void	_spinlock_debug __P((spinlock_t *, const char *, int));
@


1.4
log
@sync with FreeBSD
@
text
@d32 2
a33 2
 * $Id: spinlock.h,v 1.3 1999/01/18 00:03:34 d Exp $
 * $OpenBSD: spinlock.h,v 1.3 1999/01/18 00:03:34 d Exp $
d48 5
a52 5
typedef struct {
	volatile _spinlock_lock_t access_lock;
	volatile void *	lock_owner;
	volatile const char * fname;
	volatile int	lineno;
@


1.3
log
@move private spinlock protos out
@
text
@d32 2
a33 2
 * $Id: spinlock.h,v 1.2 1999/01/08 08:25:37 d Exp $
 * $OpenBSD: spinlock.h,v 1.2 1999/01/08 08:25:37 d Exp $
d63 2
@


1.2
log
@move spinlock.h into the real world
@
text
@d32 2
a33 2
 * $Id: spinlock.h,v 1.1 1998/12/21 07:58:55 d Exp $
 * $OpenBSD: spinlock.h,v 1.1 1998/12/21 07:58:55 d Exp $
a74 2
int	_thread_slow_atomic_lock __P((volatile _spinlock_lock_t *));
int	_thread_slow_atomic_is_locked __P((volatile _spinlock_lock_t *));
@


1.1
log
@very important bit of md spinlock
@
text
@d32 2
a33 2
 * $Id: spinlock.h,v 1.2 1998/12/18 05:59:17 d Exp $
 * $OpenBSD: spinlock.h,v 1.2 1998/12/18 05:59:17 d Exp $
d43 1
a43 1
#include "_spinlock.h"
d50 1
a50 1
	volatile long	lock_owner;
@

