head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.18
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.14
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.10
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.12
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.8
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.4
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.20
	OPENBSD_5_0:1.9.0.18
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.16
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.14
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.10
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.12
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6;
locks; strict;
comment	@.\" @;


1.11
date	2013.06.05.03.44.50;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2012.02.24.04.58.22;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.26.08.03.05;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.31.19.19.37;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.09.19.33.24;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.21.20.12.19;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	99.11.24.05.35.32;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.07.02.21.13.02;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.03.10.10.04.42;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.15;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.45;	author d;	state Exp;
branches;
next	;


desc
@@


1.11
log
@use fancy .In macro for includes. from Jan Klemkow. ok jmc schwarze
@
text
@.\" $OpenBSD: pthread_mutex_lock.3,v 1.10 2012/02/24 04:58:22 guenther Exp $
.\"
.\" Copyright (c) 1997 Brian Cully <shmit@@kublai.com>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the author nor the names of any co-contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD: pthread_mutex_lock.3,v 1.5 1999/08/28 00:03:07 peter Exp $
.\"
.Dd $Mdocdate: February 24 2012 $
.Dt PTHREAD_MUTEX_LOCK 3
.Os
.Sh NAME
.Nm pthread_mutex_lock ,
.Nm pthread_mutex_timedlock ,
.Nm pthread_mutex_trylock
.Nd lock a mutex
.Sh SYNOPSIS
.In pthread.h
.Ft int
.Fn pthread_mutex_lock "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_mutex_timedlock "pthread_mutex_t *mutex" "const struct timespec *abstime"
.Ft int
.Fn pthread_mutex_trylock "pthread_mutex_t *mutex"
.Sh DESCRIPTION
The
.Fn pthread_mutex_lock
function locks
.Fa mutex .
If the mutex is currently locked by another thread,
the calling thread will block until the
mutex becomes available.
.Pp
If the mutex is currently locked by the calling thread,
then the behavior depends on the type of the mutex.
If
.Fa mutex
is of type
.Dv PTHREAD_MUTEX_NORMAL ,
then the calling thread will deadlock and never return from
.Fn pthread_mutex_lock .
If
.Fa mutex
is of type
.Dv PTHREAD_MUTEX_ERRORCHECK ,
then
.Er EDEADLK
is immediately returned.
If
.Fa mutex
is of type
.Dv PTHREAD_MUTEX_RECURSIVE ,
then the recursion count on the mutex is incremented.
.Pp
The
.Fn pthread_mutex_timedlock
function locks
.Fa mutex
like
.Fn pthread_mutex_lock
except that it will not block or deadlock past the system time
specified in
.Fa abstime .
If that time is reached without being able to lock
.Fa mutex ,
then it returns
.Er ETIMEDOUT .
.Pp
The
.Fn pthread_mutex_trylock
function locks
.Fa mutex
like
.Fn pthread_mutex_lock
except that if
.Fa mutex
is locked by another thread,
or is locked by the calling thread and is not of type
.Dv PTHREAD_MUTEX_RECURSIVE ,
then it will immediately return
.Er EBUSY .
.Sh RETURN VALUES
If successful,
.Fn pthread_mutex_lock ,
.Fn pthread_mutex_timedlock ,
and
.Fn pthread_mutex_trylock
will return zero, otherwise an error number will be returned to
indicate the error.
.Sh ERRORS
.Fn pthread_mutex_lock ,
.Fn pthread_mutex_timedlock ,
and
.Fn pthread_mutex_trylock
will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The value specified by
.Fa mutex
is invalid.
.It Bq Er EAGAIN
The mutex is of type
.Dv PTHREAD_MUTEX_RECURSIVE
and the maximum recursion count has been reached.
.El
.Pp
In addition,
.Fn pthread_mutex_lock
and
.Fn pthread_mutex_timedlock
may return the following error:
.Bl -tag -width Er
.It Bq Er EDEADLK
The mutex is of type
.Dv PTHREAD_MUTEX_ERRORCHECK
and is already locked by the calling thread.
.El
.Pp
.Fn pthread_mutex_timedlock
may return the following error:
.Bl -tag -width Er
.It Bq Er ETIMEDOUT
The mutex could not be locked and the specified time was reached.
.El
.Pp
.Fn pthread_mutex_trylock
may return the following error:
.Bl -tag -width Er
.It Bq Er EBUSY
The mutex could not be locked because it was already locked.
.El
.Sh SEE ALSO
.Xr pthread_mutex_destroy 3 ,
.Xr pthread_mutex_init 3 ,
.Xr pthread_mutex_unlock 3 ,
.Xr pthread_mutexattr_settype 3
.Sh STANDARDS
.Fn pthread_mutex_lock ,
.Fn pthread_mutex_timedlock ,
and
.Fn pthread_mutex_trylock
conform to
.St -p1003.1-2008 .
@


1.10
log
@Merge pthread_mutex_trylock(3) into pthread_mutex_lock(3) and document
pthread_mutex_timedlock() in that same page

ok fgsch@@, brad@@, as well as jmc@@, who also fixed a bunch of nits
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_mutex_lock.3,v 1.9 2007/07/26 08:03:05 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: July 26 2007 $
d41 1
a41 1
.Fd #include <pthread.h>
@


1.9
log
@apparently this function cannot return EBUSY, so back out -r1.7;
from pjanzen; ok marc
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_mutex_lock.3,v 1.8 2007/05/31 19:19:37 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate$
d36 3
a38 1
.Nm pthread_mutex_lock
d44 4
d53 2
a54 1
If the mutex is already locked, the calling thread will block until the
d56 49
d107 4
a110 1
.Fn pthread_mutex_lock
d114 4
a117 1
.Fn pthread_mutex_lock
d124 12
d137 17
a153 2
A deadlock would occur if the thread blocked waiting for
.Fa mutex .
d158 2
a159 2
.Xr pthread_mutex_trylock 3 ,
.Xr pthread_mutex_unlock 3
d161 6
a166 3
.Fn pthread_mutex_lock
conforms to
.St -p1003.1-96 .
@


1.8
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_mutex_lock.3,v 1.7 2005/02/09 19:33:24 jmc Exp $
a57 4
.It Bq Er EBUSY
Currently
.Fa mutex
is locked by another thread.
@


1.7
log
@document [EBUSY];

from freebsd pr #73887;
ok marc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_mutex_lock.3,v 1.6 2002/02/21 20:12:19 fgsch Exp $
d32 1
a32 1
.Dd July 30, 1998
@


1.6
log
@Use .St for standards. Random cleanups as well.
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_mutex_lock.3,v 1.5 1999/11/24 05:35:32 d Exp $
d58 4
@


1.5
log
@Add FreeBSD tags
@
text
@d1 2
a2 1
.\" $OpenBSD$
d73 2
a74 3
conforms to ISO/IEC 9945-1 ANSI/IEEE
.Pq Dq Tn POSIX
Std 1003.1 Second Edition 1996-07-12.
@


1.4
log
@remove redundant .Pp macros
@
text
@d1 1
d28 2
@


1.3
log
@Fix .Os so that correct OS version appears
@
text
@a61 1
.Pp
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d30 1
a30 1
.Os BSD 4
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d64 2
a65 2
.Xr pthreads 3 ,
.Xr pthread_mutex_unlock 3 ,
d67 1
a67 2
.Xr pthread_mutex_init 3 ,
.Xr pthread_mutex_destroy 3
@

