head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.14
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.12
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.8
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.4
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.8
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.4
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.20
	OPENBSD_5_0:1.11.0.18
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.16
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.14
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.10
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.18
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.16
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.14
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.12
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.10
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.8
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.6
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.4
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10;
locks; strict;
comment	@.\" @;


1.16
date	2014.08.31.20.23.10;	author guenther;	state Exp;
branches;
next	1.15;
commitid	fzxbkcZqNIBa9TOj;

1.15
date	2013.06.05.03.44.50;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2012.03.22.01.15.37;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2012.03.22.00.06.19;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2012.03.21.22.03.18;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.31.19.19.37;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.20.18.59.12;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.01.08.03.30;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.21.20.12.19;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.22.13.59.29;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.11.24.05.35.33;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.07.09.13.35.25;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.03.10.21.25.27;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	99.03.10.10.04.42;	author d;	state Exp;
branches;
next	1.1;

1.1
date	99.01.17.23.57.28;	author d;	state Exp;
branches;
next	;


desc
@@


1.16
log
@accept4() should be a cancellation point.
Update the list in the pthread_testcancel(3) manpage: several were missing.

noted by miod@@
@
text
@.\" $OpenBSD: pthread_testcancel.3,v 1.15 2013/06/05 03:44:50 tedu Exp $
.\"
.\"
.\"  David Leonard, 1999. Public Domain.
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt PTHREAD_TESTCANCEL 3
.Os
.Sh NAME
.Nm pthread_setcancelstate ,
.Nm pthread_setcanceltype ,
.Nm pthread_testcancel
.Nd set cancelability state
.Sh SYNOPSIS
.In pthread.h
.Ft int
.Fn pthread_setcancelstate "int state" "int *oldstate"
.Ft int
.Fn pthread_setcanceltype "int type" "int *oldtype"
.Ft void
.Fn pthread_testcancel "void"
.Sh DESCRIPTION
The
.Fn pthread_setcancelstate
function atomically both sets the calling thread's cancelability state
to the indicated
.Fa state
and, if
.Fa oldstate
is not
.Dv NULL ,
returns the previous cancelability state at the location referenced by
.Fa oldstate .
Legal values for
.Fa state
are
.Dv PTHREAD_CANCEL_ENABLE
and
.Dv PTHREAD_CANCEL_DISABLE .
.Pp
The
.Fn pthread_setcanceltype
function atomically both sets the calling thread's cancelability type
to the indicated
.Fa type
and, if
.Fa oldtype
is not
.Dv NULL ,
returns the previous cancelability type at the location referenced by
.Fa oldtype .
Legal values for
.Fa type
are
.Dv PTHREAD_CANCEL_DEFERRED
and
.Dv PTHREAD_CANCEL_ASYNCHRONOUS .
.Pp
The cancelability state and type of any newly created threads, including the
thread in which
.Fn main
was first invoked, are
.Dv PTHREAD_CANCEL_ENABLE
and
.Dv PTHREAD_CANCEL_DEFERRED
respectively.
.Pp
The
.Fn pthread_testcancel
function creates a cancellation point in the calling thread.
The
.Fn pthread_testcancel
function has no effect if cancelability is disabled.
.Ss Cancelability States
The cancelability state of a thread determines the action taken upon
receipt of a cancellation request.
The thread may control cancellation in a number of ways.
.Pp
Each thread maintains its own
.Dq cancelability state
which may be encoded in two bits:
.Bl -hang
.It Em Cancelability Enable
When cancelability is
.Dv PTHREAD_CANCEL_DISABLE ,
cancellation requests against the target thread are held pending.
.It Em Cancelability Type
When cancelability is enabled and the cancelability type is
.Dv PTHREAD_CANCEL_ASYNCHRONOUS ,
new or pending cancellation requests may be acted upon at any time.
When cancelability is enabled and the cancelability type is
.Dv PTHREAD_CANCEL_DEFERRED ,
cancellation requests are held pending until a cancellation point (see
below) is reached.
If cancelability is disabled, the setting of the
cancelability type has no immediate effect as all cancellation requests
are held pending; however, once cancelability is enabled again the new
type will be in effect.
.El
.Ss Cancellation Points
Cancellation points will occur when a thread is executing the following
base interfaces:
.Fn accept ,
.Fn close ,
.Fn connect ,
.Fn creat ,
.Fn fcntl "F_SETLKW" ,
.Fn fdatasync ,
.Fn fsync ,
.Fn lockf ,
.Fn msgrcv ,
.Fn msgsnd ,
.Fn msync ,
.Fn nanosleep ,
.Fn open ,
.Fn openat ,
.Fn pause ,
.Fn poll ,
.Fn pread ,
.Fn pthread_cond_timedwait ,
.Fn pthread_cond_wait ,
.Fn pthread_join ,
.Fn pthread_testcancel ,
.Fn pwrite ,
.Fn read ,
.Fn readv ,
.Fn recv ,
.Fn recvfrom ,
.Fn recvmsg ,
.Fn select ,
.Fn sem_timedwait ,
.Fn sem_wait ,
.Fn send ,
.Fn sendmsg ,
.Fn sendto ,
.Fn sigsuspend ,
.Fn sigwait ,
.Fn sleep ,
.Fn system ,
.Fn tcdrain ,
.Fn wait ,
.Fn waitpid ,
.Fn write ,
.Fn writev .
.Pp
In addition,
cancellation points will occur when a thread is executing the following
extension interfaces:
.Fn accept4 ,
.Fn closefrom ,
.Fn ppoll ,
.Fn preadv ,
.Fn pwritev ,
.Fn wait3 ,
.Fn wait4 .
.Sh RETURN VALUES
If successful, the
.Fn pthread_setcancelstate
and
.Fn pthread_setcanceltype
functions will return zero.
Otherwise, an error number shall be returned to indicate the error.
.Pp
The
.Fn pthread_setcancelstate
and
.Fn pthread_setcanceltype
functions are used to control the points at which a thread may be
asynchronously cancelled.
For cancellation control to be usable in modular
fashion, some rules must be followed.
.Pp
For purposes of this discussion, consider an object to be a generalization
of a procedure.
It is a set of procedures and global variables written as
a unit and called by clients not known by the object.
Objects may depend on other objects.
.Pp
First, cancelability should only be disabled on entry to an object, never
explicitly enabled.
On exit from an object, the cancelability state should
always be restored to its value on entry to the object.
.Pp
This follows from a modularity argument: if the client of an object (or the
client of an object that uses that object) has disabled cancelability, it is
because the client doesn't want to have to worry about how to clean up if the
thread is cancelled while executing some sequence of actions.
If an object
is called in such a state and it enables cancelability and a cancellation
request is pending for that thread, then the thread will be cancelled,
contrary to the wish of the client that disabled.
.Pp
Second, the cancelability type may be explicitly set to either
.Em deferred
or
.Em asynchronous
upon entry to an object.
But as with the cancelability state, on exit from
an object that cancelability type should always be restored to its value on
entry to the object.
.Pp
Finally, only functions that are cancel-safe may be called from a thread that
is asynchronously cancelable.
.Sh ERRORS
The function
.Fn pthread_setcancelstate
may fail with:
.Bl -tag -width Er
.It Bq Er EINVAL
The specified state is not
.Dv PTHREAD_CANCEL_ENABLE
or
.Dv PTHREAD_CANCEL_DISABLE .
.El
.Pp
The function
.Fn pthread_setcanceltype
may fail with:
.Bl -tag -width Er
.It Bq Er EINVAL
The specified state is not
.Dv PTHREAD_CANCEL_DEFERRED
or
.Dv PTHREAD_CANCEL_ASYNCHRONOUS .
.El
.Sh SEE ALSO
.Xr pthread_cancel 3
.Sh STANDARDS
.Fn pthread_testcancel
conforms to
.St -p1003.1-96
@


1.15
log
@use fancy .In macro for includes. from Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_testcancel.3,v 1.14 2012/03/22 01:15:37 guenther Exp $
d6 1
a6 1
.Dd $Mdocdate: March 22 2012 $
d108 1
d124 1
d149 1
d151 1
d154 1
@


1.14
log
@Update cancellation point list to reflect what's done with rthreads
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_testcancel.3,v 1.13 2012/03/22 00:06:19 jmc Exp $
d15 1
a15 1
.Fd #include <pthread.h>
@


1.13
log
@new sentence, new line;
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_testcancel.3,v 1.12 2012/03/21 22:03:18 guenther Exp $
d6 1
a6 1
.Dd $Mdocdate: March 21 2012 $
d107 1
a107 1
.Fn fcntl ,
d110 2
d129 1
d138 1
@


1.12
log
@Update list of cancellation points to reflect what was in 5.1's uthreads

Pointed out by nicolas.george at normalesup.org.  ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_testcancel.3,v 1.11 2007/05/31 19:19:37 jmc Exp $
d6 1
a6 1
.Dd $Mdocdate: May 31 2007 $
d165 2
a166 1
of a procedure. It is a set of procedures and global variables written as
@


1.11
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_testcancel.3,v 1.10 2003/02/20 18:59:12 jmc Exp $
d6 1
a6 1
.Dd $Mdocdate$
d102 2
a103 1
functions:
d105 1
d109 1
d113 1
d115 2
d122 9
a130 1
.Fn sigwaitinfo ,
a134 1
.Fn tcdrain ,
d137 10
a146 1
.Fn write .
@


1.10
log
@copyrights added;

these are all David Leonard, and Public Domain
ok deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_testcancel.3,v 1.9 2002/05/01 08:03:30 mpech Exp $
d6 1
a6 1
.Dd January 17, 1999
@


1.9
log
@o) start new sentence on a new line;
o) always close .Bl tags;
o) fix usage of .Xr;

millert@@ ok
@
text
@d1 4
a4 1
.\" $OpenBSD: pthread_testcancel.3,v 1.8 2002/04/30 16:31:42 mpech Exp $
@


1.8
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_testcancel.3,v 1.7 2002/02/21 20:12:19 fgsch Exp $
d67 2
a68 1
function creates a cancellation point in the calling thread. The
d73 2
a74 2
receipt of a cancellation request. The thread may control cancellation in
a number of ways.
d91 2
a92 1
below) is reached. If cancelability is disabled, the setting of the
d127 2
a128 2
functions will return zero. Otherwise, an error number shall be returned to
indicate the error.
d135 2
a136 1
asynchronously cancelled. For cancellation control to be usable in modular
d141 2
a142 2
a unit and called by clients not known by the object. Objects may depend
on other objects.
d145 2
a146 1
explicitly enabled. On exit from an object, the cancelability state should
d152 2
a153 1
thread is cancelled while executing some sequence of actions. If an object
d162 2
a163 1
upon entry to an object. But as with the cancelability state, on exit from
@


1.7
log
@Use .St for standards. Random cleanups as well.
@
text
@d1 1
a1 1
.\" $OpenBSD: pthread_testcancel.3,v 1.6 2000/01/22 13:59:29 aaron Exp $
a69 1
.Pp
d190 1
a190 1
.St -p1003.1-96   
@


1.6
log
@canceled -> cancelled
@
text
@d1 2
a2 1
.\" $OpenBSD: pthread_testcancel.3,v 1.5 1999/11/24 05:35:33 d Exp $
d25 5
a29 1
and returns the previous cancelability state at the location referenced by
d43 5
a47 1
and returns the previous cancelability type at the location referenced by
d190 2
a191 3
conforms to ISO/IEC 9945-1 ANSI/IEEE
.Pq Dq Tn POSIX
Std 1003.1 Second Edition 1996-07-12.
@


1.5
log
@Add FreeBSD tags
@
text
@d1 1
a1 1
.\" $OpenBSD$
d125 1
a125 1
asynchronously canceled. For cancellation control to be usable in modular
d140 1
a140 1
thread is canceled while executing some sequence of actions. If an object
d142 1
a142 1
request is pending for that thread, then the thread will be canceled,
@


1.4
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
@


1.3
log
@fix comma splices involving 'however'
@
text
@d39 1
a39 1
Legal values for 
d84 1
a84 1
type will be in effect. 
d123 1
a123 1
functions are used to control the points at which a thread may be 
@


1.2
log
@Fix .Os so that correct OS version appears
@
text
@d83 1
a83 1
are held pending, however, once cancelability is enabled again the new
@


1.1
log
@pthread_cancel() and cancellation points
@
text
@d3 1
a3 1
.Os BSD 4
@

