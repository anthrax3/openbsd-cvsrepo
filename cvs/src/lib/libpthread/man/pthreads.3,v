head	1.41;
access;
symbols
	OPENBSD_6_1_BASE:1.41
	OPENBSD_6_0:1.41.0.14
	OPENBSD_6_0_BASE:1.41
	OPENBSD_5_9:1.41.0.10
	OPENBSD_5_9_BASE:1.41
	OPENBSD_5_8:1.41.0.12
	OPENBSD_5_8_BASE:1.41
	OPENBSD_5_7:1.41.0.4
	OPENBSD_5_7_BASE:1.41
	OPENBSD_5_6:1.41.0.8
	OPENBSD_5_6_BASE:1.41
	OPENBSD_5_5:1.41.0.6
	OPENBSD_5_5_BASE:1.41
	OPENBSD_5_4:1.41.0.2
	OPENBSD_5_4_BASE:1.41
	OPENBSD_5_3:1.38.0.2
	OPENBSD_5_3_BASE:1.38
	OPENBSD_5_2:1.36.0.2
	OPENBSD_5_2_BASE:1.36
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.14
	OPENBSD_5_0:1.29.0.12
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.10
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.8
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.4
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.29.0.6
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.29.0.2
	OPENBSD_4_5_BASE:1.29
	OPENBSD_4_4:1.28.0.2
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.27.0.4
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.26.0.6
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.26.0.4
	OPENBSD_4_0_BASE:1.26
	OPENBSD_3_9:1.26.0.2
	OPENBSD_3_9_BASE:1.26
	OPENBSD_3_8:1.24.0.6
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.24.0.4
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.24.0.2
	OPENBSD_3_6_BASE:1.24
	OPENBSD_3_5:1.23.0.2
	OPENBSD_3_5_BASE:1.23
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.18.0.2
	OPENBSD_3_3_BASE:1.18;
locks; strict;
comment	@.\" @;


1.41
date	2013.07.16.15.21.11;	author schwarze;	state Exp;
branches;
next	1.40;

1.40
date	2013.06.24.15.49.49;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2013.06.17.19.11.54;	author guenther;	state Exp;
branches;
next	1.38;

1.38
date	2012.09.02.13.29.29;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2012.09.01.07.35.42;	author guenther;	state Exp;
branches;
next	1.36;

1.36
date	2012.05.03.09.07.17;	author pirofti;	state Exp;
branches;
next	1.35;

1.35
date	2012.04.11.18.40.10;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2012.04.11.17.23.10;	author pirofti;	state Exp;
branches;
next	1.33;

1.33
date	2012.03.22.19.44.53;	author kurt;	state Exp;
branches;
next	1.32;

1.32
date	2012.02.25.07.54.32;	author guenther;	state Exp;
branches;
next	1.31;

1.31
date	2012.02.24.07.15.28;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2012.02.24.06.35.27;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2008.12.18.09.30.32;	author guenther;	state Exp;
branches;
next	1.28;

1.28
date	2008.07.05.08.03.57;	author guenther;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.31.19.19.37;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2005.10.30.04.53.44;	author brad;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.30.03.37.34;	author brad;	state Exp;
branches;
next	1.24;

1.24
date	2004.05.01.22.15.10;	author marc;	state Exp;
branches;
next	1.23;

1.23
date	2004.01.15.23.17.19;	author marc;	state Exp;
branches;
next	1.22;

1.22
date	2004.01.15.11.27.04;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2004.01.02.09.28.36;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.23.20.10.45;	author brad;	state Exp;
branches;
next	1.19;

1.19
date	2003.05.18.13.06.33;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.01.08.03.30;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.21.08.37.55;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.02.22.50.12;	author marc;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.30.23.41.05;	author marc;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.28.01.52.11;	author marc;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.31.03.01.49;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.31.19.38.24;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.28.21.42.44;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.12.21.48.03;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.14.21.31.40;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.06.07.10.16;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.07.09.13.35.24;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.07.07.10.50.05;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.05.26.00.13.11;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.03.22.04.21.45;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.20.15.15.06;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.47;	author d;	state Exp;
branches;
next	;


desc
@@


1.41
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@.\" $OpenBSD: pthreads.3,v 1.40 2013/06/24 15:49:49 jmc Exp $
.\" David Leonard <d@@openbsd.org>, 1998. Public domain.
.Dd $Mdocdate: June 24 2013 $
.Dt PTHREADS 3
.Os
.Sh NAME
.Nm pthreads
.Nd POSIX 1003.1c thread interface
.Sh DESCRIPTION
A thread is a flow of control within a process.
Each thread represents a minimal amount of state:
normally just the CPU state and a signal mask.
All other process state (such as memory, file descriptors)
is shared among all of the threads in the process.
.Pp
In
.Ox ,
threads use a 1-to-1 implementation,
where every thread is independently scheduled by the kernel.
.Pp
For the purpose of this document,
the functions available are grouped in the following categories.
For further information, see the individual man page for each function.
.Pp
.Bl -dash -offset indent -compact
.It
Attribute Object Routines
.It
Barrier Routines
.It
Cleanup Routines
.It
Condition Variable Routines
.It
Mutex Routines
.It
Non Portable Extensions
.It
Per-Thread Context Routines
.It
Read/Write Lock Routines
.It
Spinlock Routines
.It
Thread Routines
.El
.Ss Attribute Object Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_attr_getdetachstate()" -compact
.It Fn pthread_attr_init
Initialise a threads attribute object.
.It Fn pthread_attr_destroy
Destroy a threads attribute object.
.It Fn pthread_attr_getdetachstate
Get detachstate attribute.
.It Fn pthread_attr_setdetachstate
Set detachstate attribute.
.It Fn pthread_attr_getstack
Get stackaddr and stacksize attributes.
.It Fn pthread_attr_setstack
Set stackaddr and stacksize attributes.
.It Fn pthread_attr_getstackaddr
Get stackaddr attribute.
.It Fn pthread_attr_setstackaddr
Set stackaddr attribute.
.It Fn pthread_attr_getstacksize
Get stacksize attribute.
.It Fn pthread_attr_setstacksize
Set stacksize attribute.
.It Fn pthread_attr_getguardsize
Get guardsize attribute.
.It Fn pthread_attr_setguardsize
Set guardsize attribute.
.El
.Ss Barrier Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_barrierattr_getpshared()" -compact
.It Fn pthread_barrier_init
Initialize a barrier object.
.It Fn pthread_barrier_destroy
Destroy a barrier object.
.It Fn pthread_barrier_wait
Synchronize at a barrier.
.It Fn pthread_barrierattr_init
Initialize a barrier's attribute object.
.It Fn pthread_barrierattr_destroy
Destroy a barrier's attribute object.
.It Fn pthread_barrierattr_getpshared
Get the process-shared attribute of the barrier attribute's object.
.It Fn pthread_barrierattr_setpshared
Set the process-shared attribute of the barrier attribute's object.
.El
.Ss Cleanup Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_cleanup_push()" -compact
.It Fn pthread_atfork
Register fork handlers.
.It Fn pthread_cleanup_pop
Call the first cleanup routine.
.It Fn pthread_cleanup_push
Add a cleanup function for thread exit.
.El
.Ss Condition Variable Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_condattr_setclock()" -compact
.It Fn pthread_cond_init
Create a condition variable.
.It Fn pthread_cond_destroy
Destroy a condition variable.
.It Fn pthread_cond_broadcast
Unblock all threads waiting for a condition variable.
.It Fn pthread_cond_signal
Unblock a thread waiting for a condition variable.
.It Fn pthread_cond_timedwait
Wait on a condition variable until a specific point in time.
.It Fn pthread_cond_wait
Wait on a condition variable.
.It Fn pthread_condattr_init
Initialise a condition variable attribute object.
.It Fn pthread_condattr_destroy
Destroy a condition variable attribute object.
.It Fn pthread_condattr_getclock
Get clock attribute.
.It Fn pthread_condattr_setclock
Set clock attribute.
.El
.Ss Mutex Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_mutexattr_getprioceiling()" -compact
.It Fn pthread_mutex_init
Create a mutex.
.It Fn pthread_mutex_destroy
Free resources allocated for a mutex.
.It Fn pthread_mutex_lock
Lock a mutex.
.It Fn pthread_mutex_timedlock
Attempt to lock a mutex before a specific point in time.
.It Fn pthread_mutex_trylock
Attempt to lock a mutex without blocking.
.It Fn pthread_mutex_unlock
Unlock a mutex.
.It Fn pthread_mutexattr_init
Mutex attribute operations.
.It Fn pthread_mutexattr_destroy
Mutex attribute operations.
.It Fn pthread_mutexattr_getprioceiling
Mutex attribute operations.
.It Fn pthread_mutexattr_setprioceiling
Mutex attribute operations.
.It Fn pthread_mutexattr_getprotocol
Mutex attribute operations.
.It Fn pthread_mutexattr_setprotocol
Mutex attribute operations.
.It Fn pthread_mutexattr_gettype
Mutex attribute operations.
.It Fn pthread_mutexattr_settype
Mutex attribute operations.
.El
.Ss Non Portable Extensions
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_set_name_np()" -compact
.It Fn pthread_main_np
Identify the main thread.
.It Fn pthread_set_name_np
Set the name of a thread.
.It Fn pthread_stackseg_np
Return stack size and location.
.It Fn pthread_yield
Yield control of the current thread.
.El
.Ss Per-Thread Context Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_getspecific()" -compact
.It Fn pthread_key_create
Thread-specific data key creation.
.It Fn pthread_key_delete
Delete a thread-specific data key.
.It Fn pthread_getspecific
Get a thread-specific data value.
.It Fn pthread_setspecific
Set a thread-specific data value.
.El
.Ss Read/Write Lock Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_rwlockattr_getpshared()" -compact
.It Fn pthread_rwlock_init
Initialise a read/write lock.
.It Fn pthread_rwlock_destroy
Destroy a read/write lock.
.It Fn pthread_rwlock_rdlock
Acquire a read/write lock for reading.
.It Fn pthread_rwlock_timedrdlock
Attempt to acquire a read/write lock for reading before a specific
point in time.
.It Fn pthread_rwlock_tryrdlock
Attempt to acquire a read/write lock for reading without blocking.
.It Fn pthread_rwlock_wrlock
Acquire a read/write lock for writing.
.It Fn pthread_rwlock_timedwrlock
Attempt to acquire a read/write lock for writing before a specific
point in time.
.It Fn pthread_rwlock_trywrlock
Attempt to acquire a read/write lock for writing without blocking.
.It Fn pthread_rwlock_unlock
Release a read/write lock.
.It Fn pthread_rwlockattr_init
Initialise a read/write lock.
.It Fn pthread_rwlockattr_destroy
Destroy a read/write lock.
.It Fn pthread_rwlockattr_getpshared
Get the process shared attribute.
.It Fn pthread_rwlockattr_setpshared
Set the process shared attribute.
.El
.Ss Spinlock Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_spin_trylock()" -compact
.It Fn pthread_spin_init
Initialize a spinlock object.
.It Fn pthread_spin_destroy
Destroy a spinlock object.
.It Fn pthread_spin_lock
Lock a spinlock object.
.It Fn pthread_spin_trylock
Attempt to lock a spinlock without blocking.
.It Fn pthread_spin_unlock
Unlock a spinlock object.
.El
.Ss Thread Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_getconcurrency()" -compact
.It Fn pthread_create
Create a new thread.
.It Fn pthread_cancel
Cancel execution of a thread.
.It Fn pthread_detach
Detach a thread.
.It Fn pthread_equal
Compare thread IDs.
.It Fn pthread_exit
Terminate the calling thread.
.It Fn pthread_getconcurrency
Get level of concurrency.
.It Fn pthread_setconcurrency
Set level of concurrency.
.It Fn pthread_join
Wait for thread termination.
.It Fn pthread_kill
Send a signal to a specific thread.
.It Fn pthread_once
Dynamic package initialisation.
.It Fn pthread_self
Get the calling thread's ID.
.It Fn pthread_setcancelstate
Set cancelability state.
.It Fn pthread_setcanceltype
Set cancelability state.
.It Fn pthread_testcancel
Set cancelability state.
.It Fn pthread_sigmask
Examine/change a thread's signal mask.
.It Fn pthread_getcpuclockid
Get a CPU time clock for a thread.
.El
.Ss Thread stacks
Each thread has a different stack, whether it be provided by a
user attribute, or provided automatically by the system.
If a thread overflows its stack, unpredictable results may occur.
System-allocated stacks (including that of the initial thread)
are typically allocated in such a way that a
.Dv SIGSEGV
signal is delivered to the process when a stack overflows.
.Pp
Signals handlers are normally run on the stack of the currently executing
thread.
Hence, if you want to handle the
.Dv SIGSEGV
signal from stack overflow for a thread, you should use
.Xr sigaltstack 2
in that thread.
.Ss Thread safety
The following functions are not thread-safe:
.Bd -filled
asctime(),
basename(),
catgets(),
crypt(),
ctime(),
dbm_clearerr(),
dbm_close(),
dbm_delete(),
dbm_error(),
dbm_fetch(),
dbm_firstkey(),
dbm_nextkey(),
dbm_open(),
dbm_store(),
dirname(),
dlerror(),
drand48(),
ecvt(),
encrypt(),
endgrent(),
endpwent(),
fcvt(),
ftw(),
gcvt(),
getc_unlocked(),
getchar_unlocked(),
.\" getdate(),
getenv(),
getgrent(),
getgrgid(),
getgrnam(),
gethostbyaddr(),
gethostbyname(),
gethostent(),
getlogin(),
getnetbyaddr(),
getnetbyname(),
getnetent(),
getopt(),
getprotobyname(),
getprotobynumber(),
getprotoent(),
getpwent(),
getpwnam(),
getpwuid(),
getservbyname(),
getservbyport(),
getservent(),
gmtime(),
hcreate(),
hdestroy(),
hsearch(),
inet_ntoa(),
l64a(),
lgamma(),
lgammaf(),
lgammal(),
localeconv(),
localtime(),
lrand48(),
mrand48(),
nftw(),
nl_langinfo(),
putc_unlocked(),
putchar_unlocked(),
putenv(),
rand(),
readdir(),
setenv(),
setgrent(),
setkey(),
setpwent(),
strerror(),
strsignal(),
strtok(),
ttyname(),
unsetenv(),
wcstombs(),
wctomb()
.Ed
.Pp
The
.Fn ctermid
and
.Fn tmpnam
functions are not thread-safe when passed a
.Dv NULL
argument.
The
.Fn wcrtomb ,
.Fn wcsrtombs ,
and
.Fn wcsnrtombs
functions are not thread-safe when passed a
.Dv NULL
.Fa ps
argument.
.Sh ENVIRONMENT
.Bl -tag -width "RTHREAD_DEBUG"
.It Ev RTHREAD_DEBUG
Enables debugging output when set to a positive number,
with larger numbers generating more verbose output.
.El
.Sh SEE ALSO
.Xr intro 3 ,
.Xr pthread_atfork 3 ,
.Xr pthread_attr_init 3 ,
.Xr pthread_attr_setdetachstate 3 ,
.Xr pthread_attr_setguardsize 3 ,
.Xr pthread_attr_setstack 3 ,
.Xr pthread_attr_setstackaddr 3 ,
.Xr pthread_attr_setstacksize 3 ,
.Xr pthread_barrier_init 3 ,
.Xr pthread_barrier_wait 3 ,
.Xr pthread_barrierattr_getpshared 3 ,
.Xr pthread_barrierattr_init 3 ,
.Xr pthread_cancel 3 ,
.Xr pthread_cleanup_pop 3 ,
.Xr pthread_cleanup_push 3 ,
.Xr pthread_cond_broadcast 3 ,
.Xr pthread_cond_destroy 3 ,
.Xr pthread_cond_init 3 ,
.Xr pthread_cond_signal 3 ,
.Xr pthread_cond_timedwait 3 ,
.Xr pthread_cond_wait 3 ,
.Xr pthread_condattr_init 3 ,
.Xr pthread_create 3 ,
.Xr pthread_detach 3 ,
.Xr pthread_equal 3 ,
.Xr pthread_exit 3 ,
.Xr pthread_getcpuclockid 3 ,
.Xr pthread_getspecific 3 ,
.Xr pthread_join 3 ,
.Xr pthread_key_create 3 ,
.Xr pthread_key_delete 3 ,
.Xr pthread_kill 3 ,
.Xr pthread_main_np 3 ,
.Xr pthread_mutex_destroy 3 ,
.Xr pthread_mutex_init 3 ,
.Xr pthread_mutex_lock 3 ,
.Xr pthread_mutex_unlock 3 ,
.Xr pthread_mutexattr 3 ,
.Xr pthread_once 3 ,
.Xr pthread_rwlock_destroy 3 ,
.Xr pthread_rwlock_init 3 ,
.Xr pthread_rwlock_rdlock 3 ,
.Xr pthread_rwlock_unlock 3 ,
.Xr pthread_rwlock_wrlock 3 ,
.Xr pthread_rwlockattr_destroy 3 ,
.Xr pthread_rwlockattr_getpshared 3 ,
.Xr pthread_rwlockattr_init 3 ,
.Xr pthread_rwlockattr_setpshared 3 ,
.Xr pthread_schedparam 3 ,
.Xr pthread_self 3 ,
.Xr pthread_set_name_np 3 ,
.Xr pthread_setspecific 3 ,
.Xr pthread_sigmask 3 ,
.Xr pthread_spin_init 3 ,
.Xr pthread_spin_lock 3 ,
.Xr pthread_spin_unlock 3 ,
.Xr pthread_stackseg_np 3 ,
.Xr pthread_testcancel 3 ,
.Xr pthread_yield 3
.Sh STANDARDS
The thread library provides functions that
conform to
.St -p1003.1-96
and various later versions of
.Pq Dq Tn POSIX .
Please consult the manpages for the individual functions for details.
.Sh HISTORY
This 1-to-1 implementation of the
.Nm
API initially appeared in
.Ox 3.9
under the name
.Dq librthread
as an alternative to the pure-userspace (N-to-1) implementation.
In
.Ox 5.2
it became the default implementation and was renamed to
.Dq libpthread .
.Sh AUTHORS
.An -nosplit
.An Ted Unangst Aq Mt tedu@@openbsd.org ,
.An Kurt Miller Aq Mt kurt@@openbsd.org ,
.An Marco S Hyman Aq Mt marc@@openbsd.org ,
.An Otto Moerbeek Aq Mt otto@@openbsd.org ,
and
.An Philip Guenther Aq Mt guenther@@openbsd.org .
@


1.40
log
@space needed before punctuation;
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.39 2013/06/17 19:11:54 guenther Exp $
d3 1
a3 1
.Dd $Mdocdate: June 17 2013 $
d478 4
a481 4
.An Ted Unangst Aq tedu@@openbsd.org ,
.An Kurt Miller Aq kurt@@openbsd.org ,
.An Marco S Hyman Aq marc@@openbsd.org ,
.An Otto Moerbeek Aq otto@@openbsd.org ,
d483 1
a483 1
.An Philip Guenther Aq guenther@@openbsd.org .
@


1.39
log
@Add support for the _POSIX_CPUTIME and _POSIX_THREAD_CPUTIME options,
including CLOCK_{PROCESS,THREAD}_CPUTIME_ID constants and
{clock,pthread}_getcpuclockid() functions.

Worked out at t2k13 with help from tedu@@ and matthew@@ and testing by aja@@
ok matthew@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.38 2012/09/02 13:29:29 jmc Exp $
d3 1
a3 1
.Dd $Mdocdate: September 2 2012 $
d424 1
a424 1
.Xr pthread_getcpuclockid 3,
@


1.38
log
@tweaks; ok guenther
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.37 2012/09/01 07:35:42 guenther Exp $
d3 1
a3 1
.Dd $Mdocdate: September 1 2012 $
d272 2
d424 1
@


1.37
log
@Strip out stuff specific to the old uthreads and add similar bits for
rthreads, including the beginning of a HISTORY section
Tweak name (and therefore order) of the Barrier Routines and Spinlock
Routines sections
Update the list of functions that aren't thread-safe
Be consistent with other manpages by spelling 'thread-safe' with a hyphen
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.36 2012/05/03 09:07:17 pirofti Exp $
d3 1
a3 1
.Dd $Mdocdate: May 3 2012 $
d11 1
a11 1
Each thread represents a minimal amount of state;
d19 1
a19 1
where every thread is independently schedulable by the kernel.
d480 1
a480 1
.An Philip Guenther Aq guenther@@openbsd.org
@


1.36
log
@Add pthread spinlock support.

Implementation, documentation and naive regression tests for:
- pthread_spin_init()
- pthread_spin_destroy()
- pthread_spin_lock()
- pthread_spin_trylock()
- pthread_spin_unlock()

Implementation okay guenther@@, documentation okay jmc@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.35 2012/04/11 18:40:10 jmc Exp $
d3 1
a3 1
.Dd $Mdocdate: April 11 2012 $
d18 2
a19 22
threads are implemented in a user-level library.
A program using these routines must be linked with the
.Fl pthread
option.
.Pp
The
.Dv SIGINFO
signal can be sent to a threaded process to have the library show the state of
all of its threads.
The information is sent to the process'
controlling tty and describes each thread's
ID,
state (see
.Sx Thread states ) ,
current priority,
flags (see
.Sx Thread flags ) ,
signal mask, and name (as set by
.Xr pthread_set_name_np 3 ) .
If the environment variable
.Ev PTHREAD_DEBUG
is defined additional information is displayed.
d29 2
d43 2
d76 19
d223 1
a223 20
.Ss Thread Barrier Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_barrierattr_getpshared()" -compact
.It Fn pthread_barrier_init
Initialize a barrier object.
.It Fn pthread_barrier_destroy
Destroy a barrier object.
.It Fn pthread_barrier_wait
Synchronize at a barrier.
.It Fn pthread_barrierattr_init
Initialize a barrier's attribute object.
.It Fn pthread_barrierattr_destroy
Destroy a barrier's attribute object.
.It Fn pthread_barrierattr_getpshared
Get the process-shared attribute of the barrier attribute's object.
.It Fn pthread_barrierattr_setpshared
Set the process-shared attribute of the barrier attribute's object.
.El
.Ss Thread Spinlock Routines
a272 126
.Ss Thread states
Threads can be in one of these states:
.Pp
.Bl -tag -offset indent -width Dv -compact
.It cond_wait
Executing
.Xr pthread_cond_wait 3
or
.Xr pthread_cond_timedwait 3 .
.It dead
Waiting for resource deallocation by the thread garbage collector.
.It deadlock
Waiting for a resource held by the thread itself.
.It fdlr_wait
File descriptor read lock wait.
.It fdlw_wait
File descriptor write lock wait.
.It fdr_wait
Executing one of
.Xr accept 2 ,
.Xr read 2 ,
.Xr readv 2 ,
.Xr recvfrom 2 ,
.Xr recvmsg 2 .
.It fdw_wait
Executing one of
.Xr connect 2 ,
.Xr sendmsg 2 ,
.Xr sendto 2 ,
.Xr write 2 ,
.Xr writev 2 .
.It file_wait
Executing
.Xr flockfile 3
or similar.
.It join
Executing
.Xr pthread_join 3 .
.It mutex_wait
Executing
.Xr pthread_mutex_lock 3 .
.It poll_wait
Executing
.Xr poll 2 .
.It running
Scheduled for, or engaged in, program execution.
.It select_wait
Executing
.Xr select 2 .
.It sigsuspend
Executing
.Xr sigsuspend 2 .
.It sigwait
Executing
.Xr sigwait 3 .
.It sleep_wait
Executing
.Xr sleep 3
or
.Xr nanosleep 2 .
.It spinblock
Waiting for a machine-level atomic lock.
.It wait_wait
Executing
.Xr wait4 2
or similar.
.El
.Ss Thread flags
The first three flags are one of:
.Pp
.Bl -tag -offset indent -width 3en -compact
.It "p"
Private, system thread (e.g., the garbage collector).
.It "E, C, or c"
Thread is exiting (E), has a cancellation pending (C) (see
.Xr pthread_cancel 3 ) ,
or is at a cancellation point (c).
.It "t"
Thread is being traced.
.El
.Pp
The next 7 flags refer to thread attributes:
.Pp
.Bl -tag -offset indent -width 3en -compact
.It "C"
Thread is in the
.Dv CONDQ .
.It "R"
Thread is in the
.Dv WORKQ .
.It "W"
Thread is in the
.Dv WAITQ .
.It "P"
Thread is in the
.Dv PRIOQ .
.It "d"
Thread has been detached (see
.Xr pthread_detach 3 ) .
.It "i"
Thread inherits scheduler properties.
.It "f"
Thread will save floating point context.
.El
.Ss Scheduling algorithm
The scheduling algorithm used by the user-level thread library is
roughly as follows:
.Pp
.Bl -enum -compact
.It
Threads each have a time slice credit which is debited
by the actual time the thread spends in running.
Freshly scheduled threads are given a time slice credit of 100000 usec.
.It
Give an incremental priority update to run-enabled threads that
have not run since the last time that an incremental priority update
was given to them.
.It
Choose the next run-enabled thread with the highest priority,
that became inactive least recently, and has
the largest remaining time slice.
.El
.Pp
When all threads are blocked, the process also blocks.
When there are no threads remaining,
the process terminates with an exit code of zero.
d274 1
a274 1
Each thread has (or should have) a different stack, whether it be provided by a
d286 1
a286 1
signal, you should make use of
d288 1
a288 2
or
.Xr sigprocmask 2 .
d290 1
a290 1
The following functions are not thread safe:
d318 1
d348 1
d365 1
d369 2
d377 1
a377 1
functions are not thread safe when passed a
d380 9
d390 4
a393 11
.Bl -tag -width "LIBPTHREAD_DEBUG"
.It Ev PTHREAD_DEBUG
Enables verbose
.Dv SIGINFO
signal output.
.It Ev LIBPTHREAD_DEBUG
Display thread status every time the garbage collection thread runs,
approximately once every 10 seconds.
The status display verbosity is controlled by the
.Ev PTHREAD_DEBUG
environment variable.
d396 1
d455 18
a472 4
The user-level thread library provides functions that
conform to ISO/IEC 9945-1 ANSI/IEEE
.Pq Dq Tn POSIX
Std 1003.1 Second Edition 1996-07-12.
d474 7
a480 23
John Birrell
.Pa ( jb@@freebsd.org )
wrote the majority of the user level thread library.
.\" David Leonard did a fair bit too, but is far too modest.
.Sh BUGS
The library contains a scheduler that uses the
process virtual interval timer to pre-empt running threads.
This means that using
.Xr setitimer 2
to alter the process virtual timer will have undefined effects.
The
.Dv SIGVTALRM
will never be delivered to threads in a process.
.Pp
Some pthread functions fail to work correctly when linked using the
.Fl g
option to
.Xr cc 1
or
.Xr gcc 1 .
The problems do not occur when linked using the
.Fl ggdb
option.
@


1.35
log
@fix SEE ALSO;
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.34 2012/04/11 17:23:10 pirofti Exp $
d239 15
d583 3
@


1.34
log
@Mention and link the pthread barrier functions. Okay jmc@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.33 2012/03/22 19:44:53 kurt Exp $
d3 1
a3 1
.Dd $Mdocdate: March 22 2012 $
d526 1
a527 1
.Xr pthread_barrierattr_getpshared 3 ,
@


1.33
log
@Remove man pages for removed non-portable functions. okay jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.32 2012/02/25 07:54:32 guenther Exp $
d3 1
a3 1
.Dd $Mdocdate: February 25 2012 $
d220 19
d524 4
@


1.32
log
@Apply a bit more consistency in the ordering of functions in each
group of functions.  No objection from jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.31 2012/02/24 07:15:28 guenther Exp $
d3 1
a3 1
.Dd $Mdocdate: February 24 2012 $
d164 1
a164 1
.Bl -tag -width "pthread_suspend_all_np()" -compact
a168 4
.It Fn pthread_single_np
Switch thread scheduling mode.
.It Fn pthread_multi_np
Switch thread scheduling mode.
a170 8
.It Fn pthread_suspend_np
Suspend given thread.
.It Fn pthread_suspend_all_np
Suspend all threads except current thread.
.It Fn pthread_resume_np
Resumes given thread.
.It Fn pthread_resume_all_np
Resumes all suspended threads.
a316 5
.It suspended
Suspended with
.Xr pthread_suspend_np 3
or
.Xr pthread_suspend_all_np 3 .
a530 2
.Xr pthread_resume_all_np 3 ,
.Xr pthread_resume_np 3 ,
a544 1
.Xr pthread_single_np 3 ,
a545 2
.Xr pthread_suspend_all_np 3 ,
.Xr pthread_suspend_np 3 ,
@


1.31
log
@Add pthread_condattr_{get,set}clock(), pthread_mutex_timedlock(),
and pthread_rwlock_{timed,try}{rd,wr}lock().  Requested by jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.30 2012/02/24 06:35:27 jmc Exp $
d107 4
a112 4
.It Fn pthread_cond_destroy
Destroy a condition variable.
.It Fn pthread_cond_init
Create a condition variable.
d132 2
a135 2
.It Fn pthread_mutex_init
Create a mutex.
d203 2
a206 2
.It Fn pthread_rwlock_init
Initialise a read/write lock.
d212 4
a218 2
.It Fn pthread_rwlock_tryrdlock
Attempt to acquire a read/write lock for reading without blocking.
d223 2
a224 2
.It Fn pthread_rwlock_wrlock
Acquire a read/write lock for writing.
a228 2
.It Fn pthread_rwlockattr_init
Initialise a read/write lock.
@


1.30
log
@now that pthread_mutex_trylock.3 has been folded into pthread_mutex_lock.3,
don;t list both pages in SEE ALSO;
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.29 2008/12/18 09:30:32 guenther Exp $
d3 1
a3 1
.Dd $Mdocdate: December 18 2008 $
d106 1
a106 1
.Bl -tag -width "pthread_cond_timedwait()" -compact
d116 1
a116 1
Wait on a condition variable for a specific amount of time.
d119 8
d138 2
d209 10
d531 1
@


1.29
log
@Add pthread_attr_[sg]etguardsize() to match rthread, including manpages
Bump lib minor

ok otto@@ kurt@@ marc@@; doc review by jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.28 2008/07/05 08:03:57 guenther Exp $
d3 1
a3 1
.Dd $Mdocdate: July 5 2008 $
a523 1
.Xr pthread_mutex_trylock 3 ,
@


1.28
log
@Add manpage for pthread_attr_[sg]etstack(3)
Correct misnaming in STANDARDS section
ok brad@@ otto@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.27 2007/05/31 19:19:37 jmc Exp $
d3 1
a3 1
.Dd $Mdocdate: May 31 2007 $
d87 4
d498 1
@


1.27
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.26 2005/10/30 04:53:44 brad Exp $
d3 1
a3 1
.Dd $Mdocdate$
d75 4
d494 1
@


1.26
log
@shuffle some of the function names around into new section names.
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.25 2005/10/30 03:37:34 brad Exp $
d3 1
a3 1
.Dd August 17, 1998
@


1.25
log
@Add pthread_atfork(3)

From FreeBSD

'looks ok' fgsch@@ miod@@
man page reviewed by jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.24 2004/05/01 22:15:10 marc Exp $
a48 2
Cancellation Routines
.It
a52 2
Data Management Routines
.It
d57 2
d87 1
a87 1
.Bl -tag -width "pthread_atfork()" -compact
a89 7
.El
.Ss Cancellation Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_setcancelstate()" -compact
.It Fn pthread_cancel
Cancel execution of a thread.
a93 6
.It Fn pthread_setcancelstate
Set cancelability state.
.It Fn pthread_setcanceltype
Set cancelability state.
.It Fn pthread_testcancel
Set cancelability state.
a111 13
.Ss Data Management Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_getspecific()" -compact
.It Fn pthread_getspecific
Get a thread-specific data value.
.It Fn pthread_setspecific
Set a thread-specific data value.
.It Fn pthread_key_create
Thread-specific data key creation.
.It Fn pthread_key_delete
Delete a thread-specific data key.
.El
d168 13
d210 2
d230 6
@


1.24
log
@
pthead_supsend_all_np and pthread_resume_all_np from freebsd via
Kurt Miller <truk at optonline.net>.   Kurt says:
They're needed for the java hotspot compiler in the 1.3+ jdk
OK brad@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.23 2004/01/15 23:17:19 marc Exp $
d51 2
d86 7
d494 1
@


1.23
log
@
man pages for thread_yield and pthread_stackseg_np
jmc asked for them, now he can make them look pretty
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.22 2004/01/15 11:27:04 jmc Exp $
d165 1
a165 1
.Bl -tag -width "pthread_set_name_np()" -compact
d176 8
d301 3
a303 1
.Xr pthread_suspend_np 3 .
d515 2
d533 1
@


1.22
log
@group and list thread functions;
also add missing pages to SEE ALSO;

prodded by tedu@@, based on freebsd's page, and helped by marc@@;
ok marc@@ tedu@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.21 2004/01/02 09:28:36 jmc Exp $
d174 4
d520 1
d522 2
a523 1
.Xr pthread_testcancel 3
@


1.21
log
@add a section on thread safety, which is a start at documenting which
functions are not thread safe;

started by a request from Marc Balmer to document that malloc(3) *was*
thread safe, and expanded by marc@@ to list functions that are not;

also add some spacing to make the page more readable, and adjust the -width
of a list;

ok marc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.20 2003/12/23 20:10:45 brad Exp $
d40 185
d471 5
d493 1
d499 1
d510 1
d512 6
a517 1
.Xr pthread_setspecific 3
@


1.20
log
@change the variable name used for status checking,
LIBC_R_DEBUG -> LIBPTHREAD_DEBUG

ok marc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.19 2003/05/18 13:06:33 jmc Exp $
d42 1
d112 1
d123 1
d125 1
d150 1
d186 86
d273 1
a273 1
.Bl -tag -width "PTHREAD_DEBUG"
@


1.19
log
@- typos
- new sentence, new line
- clean up .Xrs
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.18 2002/05/01 08:03:30 mpech Exp $
d187 1
a187 1
.It Ev LIBC_R_DEBUG
@


1.18
log
@o) start new sentence on a new line;
o) always close .Bl tags;
o) fix usage of .Xr;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.17 2002/04/30 16:31:42 mpech Exp $
d12 1
a12 1
normally just the cpu state and a signal mask.
d190 1
a190 1
The status display verbosity is controled by the
@


1.17
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.16 2002/02/21 08:37:55 fgsch Exp $
d26 2
a27 1
all of its threads. The information is sent to the process'
d189 2
a190 2
approximately once every 10 seconds.   The status display verbosity is
controled by the
d244 2
a245 1
to alter the process virtual timer will have undefined effects. The
@


1.16
log
@Xr pthread_kill; from fries@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.15 2001/11/02 22:50:12 marc Exp $
d36 1
a36 1
If the environment variable 
a38 1
.Pp
@


1.15
log
@fix typo in thread status flags
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.14 2001/10/30 23:41:05 marc Exp $
d211 1
@


1.14
log
@
Add note to BUGS section regarding linking with -ggdb vs -g
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.13 2001/10/28 01:52:11 marc Exp $
d132 1
a132 1
.It "p"
@


1.13
log
@
Describe all the thread status flags.   Describe the two
environment variables used to control status format and display
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.12 2001/05/31 03:01:49 deraadt Exp $
d246 10
@


1.12
log
@typos; first few spotted by heko@@saitti.net
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.11 2000/12/31 19:38:24 brad Exp $
d33 2
a34 2
.Sx Thread flags )
and name (as set by
d36 3
d110 1
a110 1
The meaning of thread flags are as follows:
d112 1
a112 1
.It p
d114 5
a118 8
.It E
Thread is exiting.
.It C
Thread has an cancellation pending (see
.Xr pthread_cancel 3 ) .
.It c
Thread is at a cancellation point.
.It t
d121 1
a121 1
The other flags refer to thread attributes:
d123 13
a135 1
.It d
d138 1
a138 1
.It i
d140 1
a140 1
.It f
d181 13
@


1.11
log
@-lpthread -> -pthread
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.10 2000/04/28 21:42:44 deraadt Exp $
d27 1
a27 1
controlling tty and descrbes each thread's
d159 1
a159 1
signal is deliverred to the process when a stack overflows.
d161 1
a161 1
Signals handlers are normally  run on the stack of the currently executing
d214 1
a214 1
The library contains of a scheduler that uses the
@


1.10
log
@fix Xr; glam0006@@tc.umn.edu
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.9 2000/04/12 21:48:03 aaron Exp $
d20 1
a20 1
.Fl lpthread
@


1.9
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.8 2000/03/14 21:31:40 aaron Exp $
d166 1
a166 1
.Xr sigaltstack 3
d168 1
a168 1
.Xr sigprocmask 3 .
@


1.8
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.7 2000/01/06 07:10:16 d Exp $
d27 2
a28 2
controlling tty and descrbes each thread's 
ID, 
d30 1
a30 1
.Sx Thread states ) , 
d156 1
a156 1
System-allocated stacks (including that of the initial thread) 
d161 1
a161 1
Signals handlers are normally  run on the stack of the currently executing 
@


1.7
log
@describe SIGINFO dump better
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.6 1999/07/09 13:35:24 aaron Exp $
d110 1
a110 1
Private, system thread (e.g. the garbage collector).
@


1.6
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.5 1999/07/07 10:50:05 aaron Exp $
d18 4
a21 11
threads are implemented in a user-level library
.Pa ( libc_r )
that replaces the standard C library
.Pa ( libc ) .
This replacement is currently achieved by specifying the
.Fl pthread
flag to
.Xr cc 1
for each compilation unit, and for linking.
(But see the section on
.Sx BUGS . )
d27 9
a35 1
.Pa /dev/tty .
d37 1
d77 3
d106 25
d152 17
a213 10
Having to pass the
.Fl pthread
flag to
.Xr cc 1
for every compilation unit and linking is an awful kludge.
Future releases will most likely depreceate this flag,
and instead only use
.Fl l Ns Pa pthread
during linking.
.Pp
a220 8
.Pp
Due to the
type definition of
.Ft fd_set
and the internal reliance on
.Xr select 2 ,
threaded processes may be arbitrarily limited in the number of file descriptors
that they can collectively have open.
@


1.5
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.4 1999/05/26 00:13:11 d Exp $
d185 1
a185 1
Due to the 
@


1.4
log
@document two new states (deadlock and spinblock)
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.3 1999/03/22 04:21:45 d Exp $
d5 1
a5 1
.Os BSD 4
@


1.3
log
@better, nicer, neater documentation
@
text
@d1 1
a1 1
.\" $OpenBSD$
d45 2
d91 2
@


1.2
log
@link/mention recently added manual pages
@
text
@d1 2
a8 75
.Sh SYNOPSIS
.Fd #include <pthread.h>
.Ft int
.Fn pthread_create "pthread_t *thread" "const pthread_attr_t *attr" "void *(*start_routine)(void *)" "void *arg"
.Ft void
.Fn pthread_cleanup_pop "int execute"
.Ft void
.Fn pthread_cleanup_push "void (*cleanup_routine)(void *)" "void *arg"
.Ft int
.Fn pthread_cond_broadcast "pthread_cond_t *cond"
.Ft int
.Fn pthread_cond_destroy "pthread_cond_t *cond"
.Ft int
.Fn pthread_cond_init "pthread_cond_t *cond" "const pthread_condattr_t *attr"
.Ft int
.Fn pthread_cond_signal "pthread_cond_t *cond"
.Ft int
.Fn pthread_cond_timedwait "pthread_cond_t *cond" "pthread_mutex_t *mutex" "const struct timespec *abstime"
.Ft int
.Fn pthread_cond_wait "pthread_cond_t *cond" "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_create "pthread_t *thread" "const pthread_attr_t *attr" "void *(*start_routine)(void *)" "void *arg"
.Fn pthread_exit
.Ft int
.Fn pthread_detach "pthread_t thread"
.Ft int
.Fn pthread_equal "pthread_t t1" "pthread_t t2"
.Ft void
.Fn pthread_exit "void *value_ptr"
.Ft void *
.Fn pthread_getspecific "pthread_key_t key"
.Ft int
.Fn pthread_join "pthread_t thread" "void **value_ptr"
.Ft int
.Fn pthread_key_create "pthread_key_t *key" "void (*destructor)(void *)"
.Ft int
.Fn pthread_key_delete "pthread_key_t key"
.Ft int
.Fn pthread_mutex_destroy "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_mutex_init "pthread_mutex_t *mutex" "const pthread_mutexattr_t *attr"
.Ft int
.Fn pthread_mutex_lock "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_mutex_trylock "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_mutex_unlock "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_once "pthread_once_t *once_control" "void (*init_routine)(void)"
.Ft int
.Fn pthread_rwlock_destroy "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlock_init "pthread_rwlock_t *lock" "const pthread_rwlockattr_t *attr"
.Ft int
.Fn pthread_rwlock_rdlock "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlock_tryrdlock "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlock_unlock "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlock_wrlock "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlock_trywrlock "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlockattr_destroy "pthread_rwlockattr_t *attr"
.Ft int
.Fn pthread_rwlockattr_getpshared "pthread_rwlockattr_t *attr" "int *pshared"
.Ft int
.Fn pthread_rwlockattr_init "pthread_rwlockattr_t *attr"
.Ft int
.Fn pthread_rwlockattr_setpshared "pthread_rwlockattr_t *attr" "int *pshared"
.Ft pthread_t
.Fn pthread_self "void"
.Ft int
.Fn pthread_setspecific "pthread_key_t key" "const void *value"
d10 108
a117 1
Steal something from the posix specs to describe what a thread is.
d143 1
a143 1
.Xr pthread_rwlock_rdlock.3 
d151 1
a151 1
.Xr pthread_setspecific 3 
d153 2
a154 2
.Fn pthread_create
conforms to ISO/IEC 9945-1 ANSI/IEEE
d157 31
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d56 22
d107 9
@

