head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.12
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@.\" @;


1.4
date	2015.09.22.08.22.05;	author sobrado;	state Exp;
branches;
next	1.3;
commitid	b4hMLLK8MqoLWgRz;

1.3
date	2013.06.05.03.44.50;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.11.13.47.32;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.11.10.18.46;	author pirofti;	state Exp;
branches;
next	;


desc
@@


1.4
log
@typo (s/intialization/initialization/).
@
text
@.\"	$OpenBSD: pthread_barrier_wait.3,v 1.3 2013/06/05 03:44:50 tedu Exp $
.\"
.\" Copyright (c) 2012 Paul Irofti <pirofti@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt PTHREAD_BARRIER_WAIT 3
.Os
.Sh NAME
.Nm pthread_barrier_wait
.Nd synchronize at a barrier
.Sh SYNOPSIS
.In pthread.h
.Ft int
.Fn pthread_barrier_wait "pthread_barrier_t *barrier"
.Sh DESCRIPTION
The
.Fn pthread_barrier_wait
function blocks the calling thread until the required number of threads
call
.Fn pthread_barrier_wait ,
as specified at the object's initialization.
.Sh RETURN VALUES
If successful,
.Fn pthread_barrier_wait
returns
.Dv PTHREAD_BARRIER_SERIAL_THREAD
for a single arbitrary thread and zero for each of the other threads;
otherwise an error number is returned to indicate the error.
.Sh ERRORS
.Fn pthread_barrier_wait
will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The value specified by
.Fa barrier
is invalid.
.El
.Sh SEE ALSO
.Xr pthread_barrier_init 3 ,
.Xr pthread_barrierattr_getpshared 3 ,
.Xr pthread_barrierattr_init 3
.Sh STANDARDS
.Fn pthread_barrier_wait
conforms to
.St -p1003.1-2008 .
@


1.3
log
@use fancy .In macro for includes. from Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: pthread_barrier_wait.3,v 1.2 2012/04/11 13:47:32 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: April 11 2012 $
d34 1
a34 1
as specified at the object's intialization.
@


1.2
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pthread_barrier_wait.3,v 1.1 2012/04/11 10:18:46 pirofti Exp $
d25 1
a25 1
.Fd #include <pthread.h>
@


1.1
log
@Add pthread barrier support.

Implementation and documentation for:
 - pthread_barrier_init()
 - pthread_barrier_destroy()
 - pthread_barrier_wait()
 - pthread_barrierattr_init()
 - pthread_barrierattr_destroy()
 - pthread_barrierattr_getpshared()
 - pthread_barrierattr_setpshared()

Currently only private barriers are supported.

Okay guenther@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d18 1
a18 1
.Dd $Mdocdate: April 10 2012 $
d23 1
a23 1
.Nd synchornize at a barrier
d31 3
a33 3
function will block the calling thread until the required number of threads
will call
.Fn pthread_barrier_wait
d38 1
a38 1
will return 
d40 2
a41 2
for a single aribtrary thread and zero for each of the other threads,
otherwise an error number will be returned to indicate the error.
d50 1
d53 2
a54 2
.Xr pthread_barrierattr_init 3 ,
.Xr pthread_barrierattr_getpshared 3
@

