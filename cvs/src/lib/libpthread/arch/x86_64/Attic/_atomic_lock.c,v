head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.27.17.36.15;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2004.02.25.04.10.53;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.25.03.48.36;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.51.40;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@change amd64's MACHINE_ARCH from x86_64 to amd64.  There are many many
reasons for this, quite a few of them technical, and not all of them
in response to Intel's broken ia32e crud.  The gcc toolchain stays at
x86_64 for now.
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.3 2004/02/25 04:10:53 deraadt Exp $	*/

/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

/*
 * Atomic lock for amd64 -- taken from i386 code.
 */

#include "spinlock.h"

int
_atomic_lock(volatile _spinlock_lock_t *lock)
{
	_spinlock_lock_t old;

	/*
	 * Use the eXCHanGe instruction to swap the lock value with
	 * a local variable containing the locked state.
	 */
	old = _SPINLOCK_LOCKED;
	__asm__("xchg %0,%1"
		: "=r" (old), "=m" (*lock)
		: "0"  (old), "1"  (*lock));

	return (old != _SPINLOCK_UNLOCKED);
}
@


1.3
log
@copyrights
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 2004/02/25 03:48:36 deraadt Exp $	*/
@


1.2
log
@initial working pthreads support from sparc64, done with drahn.  there are
some `debugging features' and other optimizations (such as not saving all
registers) that we can still do perhaps
@
text
@d1 4
a4 1
/*	$OpenBSD$	*/
@


1.1
log
@the rest of the libs stuff; from art@@ again
@
text
@d1 1
d3 1
a3 1
 * Atomic lock for amd64
d11 12
a22 1
	/* dummy for now */
@

