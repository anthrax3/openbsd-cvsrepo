head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.38
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.36
	OPENBSD_5_0:1.2.0.34
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.32
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.30
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.26
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.28
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.24
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.22
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.2;

1.2
date	2003.05.27.22.59.33;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.23.02.43.49;	author marc;	state Exp;
branches;
next	;


desc
@@


1.3
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_machdep.c,v 1.2 2003/05/27 22:59:33 miod Exp $	*/

/*
 * Machine-dependent thread state functions for OpenBSD/vax
 * Written by Miodrag Vallat <miod@@openbsd.org> - placed in the public domain.
 */

#include <pthread.h>
#include "pthread_private.h"

/* XXX we need <machine/asm.h> but it conflicts with <machine/cdefs.h> */
#undef	_C_LABEL
#undef	WEAK_ALIAS
#include <machine/asm.h>

#define	ALIGNBYTES	3

struct frame {
	/* a CALLS frame */
	long	condition;		/* sp and fp point here */
	long	psw;
	long	ap;	/* r12 */
	long 	fp;	/* r13 */
	long	pc;	/* r15 */
	long	r[10];	/* r2 - r11 */
	long	numarg;			/* ap points here */
};

/*
 * Given a stack and an entry function, initialize a state
 * structure that can be later switched to.
 */
void
_thread_machdep_init(struct _machdep_state* statep, void *base, int len,
    void (*entry)(void))
{
	struct frame *f;

	/* Locate the initial frame, aligned at the top of the stack */
	f = (struct frame *)(((long)base + len - sizeof *f) & ~ALIGNBYTES);
	
	/* Set up initial frame */
	f->condition = 0;
	f->psw = (1 << 29) /* CALLS */ |
	    ((R2|R3|R4|R5|R6|R7|R8|R9|R10|R11) << 16);
	f->ap = (long)&f->numarg;
	f->fp = (long)f;

	/*
	 * DANGER WILL ROBINSON! The thread entry point is a CALLS target
	 * routine, hence it starts with two bytes being the entry
	 * mask. We rely here upon the following facts:
	 * - MI code will always pass _thread_start as the entry argument
	 * - the entry mask for _thread_start is zero (no registers saved)
	 */
	f->pc = (long)entry + 2;	/* skip entry mask */
	f->numarg = 0;	/* safety */

	statep->frame = f->fp;
}

void
_thread_machdep_save_float_state(struct _machdep_state* statep)
{
	/* nothing to do */
}

void
_thread_machdep_restore_float_state(struct _machdep_state* statep)
{
	/* nothing to do */
}
@


1.2
log
@libpthread support for vax, at last.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@stubs for functions needed by the vax
@
text
@d1 1
a1 2
/* $OpenBSD$ */
/* PUBLIC DOMAIN <marc@@snafu.org> */
d4 2
a5 1
 * Machine-dependent thread state functions for OpenBSD/sparc.
a7 4
#if 0
#include <sys/types.h>
#include <machine/frame.h>
#include <machine/param.h>
d10 18
a27 1
#endif
d30 1
a30 1
 * Given a stack and an entry function, initialise a state
d35 1
a35 1
		     void (*entry)(void))
d37 23
a59 1
	/* XXX implement, please */
d65 1
a65 1
	/* XXX implement, please */
d71 1
a71 1
	/* XXX implement, please */
@

