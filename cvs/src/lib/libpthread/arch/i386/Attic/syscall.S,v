head	1.4;
access;
symbols
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.4
date	99.03.10.08.53.04;	author d;	state dead;
branches;
next	1.3;

1.3
date	98.07.22.10.46.33;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	98.07.21.16.28.03;	author peter;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.03;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Goodbye, MIT pthreads... you were a handy reference implementation
@
text
@/* ==== syscall.S ============================================================
 * Copyright (c) 1990 The Regents of the University of California.
 * Copyright (c) 1995 Chris Provenzano, proven@@mit.edu
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * Description : Machine dependent syscalls for i386/i486/i586
 *
 */

#ifndef lint
	.text
	.asciz "syscall-i386-freebsd-2.0.S,v 1.2 1995/05/26 07:44:29 proven Exp";
#endif
 
#if defined(SYSLIBC_SCCS) && !defined(lint)
        .asciz "@@(#)syscall.s   5.1 (Berkeley) 4/23/90"
#endif /* SYSLIBC_SCCS and not lint */

#include <sys/syscall.h>

#ifdef __STDC__

#define	SYSCALL(x)					\
	.globl _machdep_sys_##x##;		\
									\
_machdep_sys_##x##:;				\
									\
	movl $(SYS_##x##), %eax;		\
	.byte 0x9a; .long 0; .word 7;	\
	jb	1b;							\
	ret;							

#else

#define	SYSCALL(x)					\
	.globl _machdep_sys_/**/x;		\
									\
_machdep_sys_/**/x:;				\
									\
	movl $(SYS_/**/x), %eax;		\
	.byte 0x9a; .long 0; .word 7;	\
	jb	1b;							\
	ret;							

#endif


/*
 * Initial asm stuff for all functions.
 */
	.text
	.align	2


/* ==========================================================================
 * error code for all syscalls. The error value is returned as the negative
 * of the errno value.
 */

1:
	neg		%eax
	ret

/* ==========================================================================
 * machdep_sys_fork()
 */
	.globl _machdep_sys_fork;		
									
_machdep_sys_fork:;				
									
	movl $(SYS_fork), %eax;		
	.byte 0x9a; .long 0; .word 7;	
	cmpl $0, %edx
	je	2f
	movl $0, %eax
2:	
	ret;							

/* ==========================================================================
 * machdep_sys___syscall()
 */

_machdep_sys___syscall:;				

	movl $(SYS___syscall), %eax;		
	.byte 0x9a; .long 0; .word 7;	
	jb 3f;
	ret

/* ==========================================================================
 * machdep_sys_sigsuspend()
 */
	.globl _machdep_sys_sigsuspend;		

_machdep_sys_sigsuspend:;

	movl    4(%esp),%eax            # fetch mask arg
    movl    (%eax),%eax             # indirect to mask arg
    movl    %eax,4(%esp)
	movl $(SYS_sigsuspend), %eax;		
	.byte 0x9a; .long 0; .word 7;	
	jb 3f;
	ret

3:
	
	neg		%eax
	movl	$0xffffffff,%edx
	ret

/* ==========================================================================
 * machdep_sys_sigprocmask()
 */
	.globl _machdep_sys_sigprocmask;		

_machdep_sys_sigprocmask:;

	movl    8(%esp),%ecx
	movl    (%ecx),%ecx
	movl    %ecx,8(%esp)
	movl    $ SYS_sigprocmask , %eax
	.byte 0x9a; .long 0; .word 7;
	jb 4f;
	ret

4:
	neg     %eax
	movl    $0xffffffff,%edx
	ret

/* ==========================================================================
 * machdep_sys_lseek()
 */
	.globl _machdep_sys_lseek;		

_machdep_sys_lseek:;				
									
	pushl  %ebp;
	movl   %esp,%ebp;
	pushl  0x14(%ebp);
	pushl  0x10(%ebp);
	pushl  0xc(%ebp);
	pushl  $0x0;
	pushl  0x8(%ebp);
	pushl  $0x0;
	pushl $(SYS_lseek);
	call _machdep_sys___syscall;
	leave
	ret

/* ==========================================================================
 * machdep_sys_ftruncate() ; Added by Monty
 */
        .globl _machdep_sys_ftruncate;
 
_machdep_sys_ftruncate:;
 
        pushl  %ebp; 
        movl   %esp,%ebp;
        pushl  0x10(%ebp);
        pushl  0xc(%ebp);
        pushl  $0x0;			# Why this?
        pushl  0x8(%ebp);
        pushl  $0x0;			# And this?
        pushl $(SYS_ftruncate);
        call _machdep_sys___syscall;
        leave
        ret  

/* ==========================================================================
 * machdep_sys_setjmp()
 */
	.globl _machdep_sys_setjmp;		

_machdep_sys_setjmp:;				
    movl    4(%esp),%eax
    movl    0(%esp),%edx
    movl    %edx, 0(%eax)       /* rta */
    movl    %ebx, 4(%eax)
    movl    %esp, 8(%eax)
    movl    %ebp,12(%eax)
    movl    %esi,16(%eax)
    movl    %edi,20(%eax)
    xorl    %eax,%eax
    ret

/* ==========================================================================
 * machdep_sys_longjmp()
 */
    .globl _machdep_sys_longjmp;
    
_machdep_sys_longjmp:;
    movl    4(%esp),%edx
    movl    8(%esp),%eax
    movl    0(%edx),%ecx
    movl    4(%edx),%ebx
    movl    8(%edx),%esp
    movl    12(%edx),%ebp
    movl    16(%edx),%esi
    movl    20(%edx),%edi
    testl   %eax,%eax
    jnz 1f
    incl    %eax
1:  movl    %ecx,0(%esp)
    ret

/* ==========================================================================
 * machdep_sys_pipe()
 */
    .globl _machdep_sys_pipe;

_machdep_sys_pipe:;
    movl    4(%esp),%ecx
    movl    %eax,(%ecx)
    movl    %edx,4(%ecx)
    xorl    %eax,%eax
    ret
@


1.3
log
@o removed more unused or old, left over files

o general changes so that now the library compiles and many of the
  tests run correctly

o pthreads/Makefile.inc rebuilt using libc/sys/Makefile.inc as a template.
  this should be kept in sync in case of new syscalls

soon TODO:
figure out why remaining tests fail and fix
look at building .so version of library
tidy up arch/i386 directory - no longer uses syscall-template.S
port other arch's from libc syscall templates
@
text
@@


1.2
log
@move unchanged files from machdep/ into appropriate arch/${MACHINE}
directories. These files have been renamed as appropriate, but
hackers of these files should note those that started off as netbsd
files (alpha and sparc).

also moved machdep/openbsd-2.0/ to include/sys/
@
text
@d238 11
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Copyright (c) 1993 Chris Provenzano, proven@@mit.edu
a38 5
 *  1.00 93/08/26 proven
 *      -Started coding this file.
 *
 *	1.01 93/11/13 proven
 *		-The functions readv() and writev() added.
d42 2
a43 2
    .text
    .asciz "$Id: syscall.S,v 1.3 1994/02/07 22:00:47 proven Exp $";
a49 1
#include <machine/asm.h>
d52 14
d76 3
d96 1
a96 1
 * machdep_sys_write()
d98 11
a108 1
SYSCALL(write)
d111 1
a111 1
 * machdep_sys_read()
a112 1
SYSCALL(read)
d114 1
a114 4
/* ==========================================================================
 * machdep_sys_open()
 */
SYSCALL(open)
d116 4
a119 4
/* ==========================================================================
 * machdep_sys_close()
 */
SYSCALL(close)
d122 1
a122 1
 * machdep_sys_fcntl()
d124 1
a124 1
SYSCALL(fcntl)
d126 1
a126 4
/* ==========================================================================
 * machdep_sys_lseek()
 */
SYSCALL(lseek)
d128 7
a134 7
/* ========================================================================== 
 * Nonstandard calls used to make the system work
 *
 * ==========================================================================
 * machdep_sys_select()
 */
SYSCALL(select)
d136 5
a140 7
/* ========================================================================== 
 * Berkeley socket stuff
 * 
 * ==========================================================================
 * machdep_sys_socket()
 */
SYSCALL(socket)
d143 1
a143 1
 * machdep_sys_bind()
d145 1
a145 1
SYSCALL(bind)
d147 1
a147 4
/* ==========================================================================
 * machdep_sys_connect()
 */
SYSCALL(connect)
d149 7
a155 4
/* ==========================================================================
 * machdep_sys_accept()
 */
SYSCALL(accept)
d157 4
a160 4
/* ==========================================================================
 * machdep_sys_listen()
 */
SYSCALL(listen)
d163 1
a163 1
 * machdep_sys_getsockopt()
d165 1
a165 1
SYSCALL(getsockopt)
d167 14
a180 4
/* ==========================================================================
 * machdep_sys_readv()
 */
SYSCALL(readv)
d183 1
a183 1
 * machdep_sys_writev()
d185 52
a236 11
SYSCALL(writev)

/* ==========================================================================
 * machdep_sys_getpeername()
 */
SYSCALL(getpeername)

/* ==========================================================================
 * machdep_sys_getsockname()
 */
SYSCALL(getsockname)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
