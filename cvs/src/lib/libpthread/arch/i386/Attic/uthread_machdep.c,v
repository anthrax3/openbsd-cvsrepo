head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.6;

1.6
date	2008.01.28.18.48.41;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.06.15.27.08;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.21.22.55.20;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.24.20.58.23;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.13.00.05.51;	author d;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.25.01.16.40;	author d;	state Exp;
branches;
next	;


desc
@@


1.7
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	 $OpenBSD: uthread_machdep.c,v 1.6 2008/01/28 18:48:41 kettenis Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

/*
 * Machine-dependent thread state functions for OpenBSD/i386.
 */

#include <sys/param.h>
#include <sys/sysctl.h>
#include <machine/cpu.h>
#include <pthread.h>
#include "pthread_private.h"

struct frame {
	int	fr_gs;
	int	fr_fs;
	int	fr_es;
	int	fr_ds;

	int	fr_edi;
	int	fr_esi;
	int	fr_ebp;
	int	fr_esp;
	int	fr_ebx;
	int	fr_edx;
	int	fr_ecx;
	int	fr_eax;

	int	fr_eip;
	int	fr_cs;		/* XXX unreachable? */
};

#define copyreg(reg, lval) \
	__asm__("mov %%" #reg ", %0" : "=g"(lval))

static int _thread_machdep_osfxsr(void);

static int
_thread_machdep_osfxsr(void)
{
	int mib[] = { CTL_MACHDEP, CPU_OSFXSR };
	static int sse = -1;
	size_t len;
	int val;

	if (sse == -1) {
		len = sizeof (val);
		if (sysctl(mib, 2, &val, &len, NULL, 0) == -1)
			return (0);
		if (val)
			sse = 1;
		else
			sse = 0;
	}
	return (sse);
}

/*
 * Given a stack and an entry function, initialise a state
 * structure that can be later switched to.
 */
void
_thread_machdep_init(struct _machdep_state* statep, void *base, int len,
		     void (*entry)(void))
{
	struct frame *f;

	/*
	 * Locate the initial frame at the top of the stack.  For the
	 * stack to end up properly (16-byte) aligned, we need to
	 * align the frame at an odd 8-byte boundary.
	 */
	f = (struct frame *)((((int)base + len - sizeof *f) & ~15) - 8);

	/* Set up initial frame */
	f->fr_esp = (int)&f->fr_edi;
	copyreg(cs, f->fr_cs);
	copyreg(ds, f->fr_ds);
	copyreg(es, f->fr_es);
	copyreg(fs, f->fr_fs);
	copyreg(gs, f->fr_gs);
	f->fr_ebp = (int)-1;
	f->fr_eip = (int)entry;

	statep->esp = (int)f;

	_thread_machdep_save_float_state(statep);
	/*
	 * The current thread float state is saved into the new thread stack.
	 * Later pthread_create calls _thread_kern_sched which saves the current
	 * thread float state again into its own stack. However all float state
	 * saves must be balanced with a restore on i386 due to the fninit().
	 * Restore the current thread float state here so that the next save
	 * gets the correct state. 
	 */
	_thread_machdep_restore_float_state(statep);
}

/*
 * Floating point save restore copied from code in npx.c
 * (without really understanding what it does).
 */
#define	fldcw(addr)		__asm("fldcw %0"  : : "m" (*addr))
#define	fnsave(addr)		__asm("fnsave %0" : "=m" (*addr))
#define	fninit()		__asm("fninit")
#define	frstor(addr)		__asm("frstor %0" : : "m" (*addr))
#define	fxsave(addr)		__asm("fxsave %0" : "=m" (*addr))
#define	fxrstor(addr)		__asm("fxrstor %0" : : "m" (*addr))
#define	fwait()			__asm("fwait")

void
_thread_machdep_save_float_state(struct _machdep_state *ms)
{
	union savefpu *addr = &ms->fpreg;

	if (_thread_machdep_osfxsr()) {
		fwait();
		fxsave(&addr->sv_xmm);
		fninit();
	} else
		fnsave(&addr->sv_87);
	fwait();
}

void
_thread_machdep_restore_float_state(struct _machdep_state *ms)
{
	union savefpu *addr = &ms->fpreg;

	if (_thread_machdep_osfxsr()) {
		fxrstor(&addr->sv_xmm);
		fwait();
	} else
		frstor(&addr->sv_87);

}
@


1.6
log
@Properly align stack such that code that uses SSE2 instructions doesn't crash.
ok espie@@, beck@@
@
text
@d1 1
a1 1
/*	 $OpenBSD: uthread_machdep.c,v 1.5 2006/04/06 15:27:08 kurt Exp $	*/
@


1.5
log
@- due to the fninit() in _thread_machdep_save_float_state() all calls to
it need to be matched with a call to _thread_machdep_restore_float_state(),
so add missing one in _thread_machdep_init().
- 16-byte align fp frame
- call fwait() before save and and after restoring fp state.

lots of guidance and ok mickey@@
@
text
@d1 1
a1 1
/*	 $OpenBSD: uthread_machdep.c,v 1.4 2004/02/21 22:55:20 deraadt Exp $	*/
d68 6
a73 2
	/* Locate the initial frame, aligned at the top of the stack */
	f = (struct frame *)(((int)base + len - sizeof *f) & ~15);
@


1.4
log
@if cpu has fxsr, use fxsave instead; ok marc
@
text
@d1 1
a1 1
/*	 $OpenBSD: uthread_machdep.c,v 1.3 2003/01/24 20:58:23 marc Exp $	*/
d69 1
a69 1
	f = (struct frame *)(((int)base + len - sizeof *f) & ~ALIGNBYTES);
d84 9
d113 1
d126 1
a126 1
	if (_thread_machdep_osfxsr())
d128 2
a129 1
	else
d131 1
a131 1
		
@


1.3
log
@save i386 fpu state
@
text
@d1 1
a1 1
/*	 $OpenBSD: uthread_machdep.c,v 1.2 2001/03/13 00:05:51 d Exp $	*/
d8 3
a10 1
#include <machine/param.h>
d36 22
d92 4
a95 1
#define frstor(addr)		__asm("frstor %0" : : "m" (*addr))
d101 1
a101 1
	struct save87 *addr = &ms->fpreg;
d103 5
a107 1
	fnsave(addr);
d114 1
a114 1
	struct save87 *addr = &ms->fpreg;
d116 5
a120 1
	frstor(addr);
a121 1

@


1.2
log
@typo in comment
@
text
@d1 1
a1 1
/*	 $OpenBSD: uthread_machdep.c,v 1.1 2000/09/25 01:16:40 d Exp $	*/
d39 2
a40 5
_thread_machdep_init(statep, base, len, entry)
        struct _machdep_state* statep;
        void *base;
        int len;
        void (*entry)(void);
d58 2
d62 9
d72 1
a72 2
_thread_machdep_save_float_state(ms)
	struct _machdep_state *ms;
d74 1
a74 1
	char *fdata = (char *)&ms->fpreg;
d76 2
a77 1
	__asm__("fsave %0"::"m" (*fdata));
d81 1
a81 2
_thread_machdep_restore_float_state(ms)
	struct _machdep_state *ms;
d83 1
a83 1
	char *fdata = (char *)&ms->fpreg;
d85 1
a85 1
	__asm__("frstor %0"::"m" (*fdata));
@


1.1
log
@preparation for switch-based threads
@
text
@d1 1
a1 1
/*	 $OpenBSD$	*/
d5 1
a5 1
 * Machine-dependent thread state functions for OpenBSD/sparc.
@

