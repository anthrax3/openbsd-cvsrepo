head	1.9;
access;
symbols
	OPENBSD_5_2:1.8.0.40
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.38
	OPENBSD_5_0:1.8.0.36
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.34
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.32
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.28
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.30
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.26
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.24
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.22
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.20
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.18
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.16
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.14
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.12
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.10
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.8
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8;
locks; strict;
comment	@ * @;


1.9
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.8;

1.8
date	2002.01.04.14.46.18;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.05.13.27.55;	author d;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.04.05.55.33;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.11.25.07.01.27;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.02.04.23.37.39;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	99.02.03.05.25.01;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.17.23.49.48;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.28.01.54.57;	author d;	state Exp;
branches;
next	;


desc
@@


1.9
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_machdep.h,v 1.8 2002/01/04 14:46:18 art Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

struct _machdep_state {
	u_int64_t	sp;
};
@


1.8
log
@Let's start by making the stack pointer 64 bit and nobody will get hurt.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.h,v 1.7 2000/10/05 13:27:55 d Exp $	*/
@


1.7
log
@missed it by That Much
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.h,v 1.6 2000/10/04 05:55:33 d Exp $	*/
d5 1
a5 1
	int	sp;
@


1.6
log
@switch to _machdep_switch() instead of setjmp/longjmp. For some reason this fixes sparc threads.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d5 1
a5 1
	int	fp;
@


1.5
log
@sync with FreeBSD
@
text
@d1 2
a2 5
/*
 * OpenBSD/alpha machine-dependent thread macros
 *
 * $OpenBSD: uthread_machdep.h,v 1.4 1999/02/04 23:37:39 niklas Exp $
 */
d4 2
a5 61
/* save the floating point state of a thread */
#define _thread_machdep_save_float_state(thr)				      \
do {									      \
	__asm__(							      \
	     "stt $f8,  ( 0 * 8) + %0\n\tstt $f9,  ( 1 * 8) + %0\n\t"	      \
	     "stt $f10, ( 2 * 8) + %0\n\tstt $f11, ( 3 * 8) + %0\n\t"	      \
	     "stt $f12, ( 4 * 8) + %0\n\tstt $f13, ( 5 * 8) + %0\n\t"	      \
	     "stt $f14, ( 6 * 8) + %0\n\tstt $f15, ( 7 * 8) + %0\n\t"	      \
	     "stt $f16, ( 8 * 8) + %0\n\tstt $f17, ( 9 * 8) + %0\n\t"	      \
	     "stt $f18, (10 * 8) + %0\n\tstt $f19, (11 * 8) + %0\n\t"	      \
	     "stt $f20, (12 * 8) + %0\n\tstt $f21, (13 * 8) + %0\n\t"	      \
	     "stt $f22, (14 * 8) + %0\n\tstt $f23, (15 * 8) + %0\n\t"	      \
	     "stt $f24, (16 * 8) + %0\n\tstt $f25, (17 * 8) + %0\n\t"	      \
	     "stt $f26, (18 * 8) + %0\n\tstt $f27, (19 * 8) + %0\n\t"	      \
	     "stt $f28, (20 * 8) + %0\n\tstt $f29, (21 * 8) + %0\n\t"	      \
	     "stt $f30, (22 * 8) + %0" 			      \
	     : : "o" ((thr)->_machdep.saved_fp) : "memory");		      \
} while(0)

/* restore the floating point state of a thread */
#define _thread_machdep_restore_float_state(thr)			      \
do {									      \
	__asm__(							      \
	     "ldt $f8,  ( 0 * 8) + %0\n\tldt $f9,  ( 1 * 8) + %0\n\t"	      \
	     "ldt $f10, ( 2 * 8) + %0\n\tldt $f11, ( 3 * 8) + %0\n\t"	      \
	     "ldt $f12, ( 4 * 8) + %0\n\tldt $f13, ( 5 * 8) + %0\n\t"	      \
	     "ldt $f14, ( 6 * 8) + %0\n\tldt $f15, ( 7 * 8) + %0\n\t"	      \
	     "ldt $f16, ( 8 * 8) + %0\n\tldt $f17, ( 9 * 8) + %0\n\t"	      \
	     "ldt $f18, (10 * 8) + %0\n\tldt $f19, (11 * 8) + %0\n\t"	      \
	     "ldt $f20, (12 * 8) + %0\n\tldt $f21, (13 * 8) + %0\n\t"	      \
	     "ldt $f22, (14 * 8) + %0\n\tldt $f23, (15 * 8) + %0\n\t"	      \
	     "ldt $f24, (16 * 8) + %0\n\tldt $f25, (17 * 8) + %0\n\t"	      \
	     "ldt $f26, (18 * 8) + %0\n\tldt $f27, (19 * 8) + %0\n\t"	      \
	     "ldt $f28, (20 * 8) + %0\n\tldt $f29, (21 * 8) + %0\n\t"	      \
	     "ldt $f30, (22 * 8) + %0\n\t"				      \
	     : : "o" (thr->_machdep.saved_fp) :				      \
	     "$f8",  "$f9",  "$f10", "$f11", "$f12", "$f13", "$f14", "$f15",  \
	     "$f16", "$f17", "$f18", "$f19", "$f20", "$f21", "$f22", "$f23",  \
	     "$f24", "$f25", "$f26", "$f27", "$f28", "$f29", "$f30"); \
} while(0)

/* initialise the jmpbuf stack frame so it continues from entry */
#define _thread_machdep_thread_create(thr, entry, pattr)	\
	{						\
	    /* entry */					\
	    (thr)->saved_jmp_buf[2] = (long) entry;	\
	    (thr)->saved_jmp_buf[4 + R_RA] = 0;		\
	    (thr)->saved_jmp_buf[4 + R_T12] = (long) entry; \
	    /* stack */					\
	    (thr)->saved_jmp_buf[4 + R_SP] = (long) (thr)->stack->base \
				+ (thr)->stack->size	\
				- sizeof(double);	\
	}

#define _thread_machdep_longjmp(a,v)    _longjmp(a,v)
#define _thread_machdep_setjmp(a)       _setjmp(a)

typedef jmp_buf _machdep_jmp_buf;

struct _machdep_struct {
	char		saved_fp[23 * 8];
@


1.4
log
@Save/restore the fp state setjmp/longjmp does not
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.3 1999/02/03 05:25:01 d Exp $
d53 2
a54 2
	    (thr)->saved_jmp_buf[4+R_RA] = 0;		\
	    (thr)->saved_jmp_buf[4+R_T12] = (long) entry; \
d56 2
a57 2
	    (thr)->saved_jmp_buf[4 + R_SP] = (long) (thr)->stack \
				+ (pattr)->stacksize_attr \
@


1.3
log
@comment out broken float save stuff for the time being
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.2 1999/01/17 23:49:48 d Exp $
d8 17
a24 5
#define _thread_machdep_save_float_state(thr) 		\
	{						\
/*	    char *fdata = (char*)((thr)->_machdep.saved_fp);	\
	    __asm__("fsave %0"::"m" (*fdata)); */		\
	}
d27 20
a46 5
#define _thread_machdep_restore_float_state(thr) 	\
	{						\
/*	    char *fdata = (char*)((thr)->_machdep.saved_fp);	\
	    __asm__("frstor %0"::"m" (*fdata));	*/	\
	}
d61 2
a62 2
#define _thread_machdep_longjmp(a,v)    longjmp(a,v)
#define _thread_machdep_setjmp(a)       setjmp(a)
d67 1
a67 1
	char		saved_fp[108];
@


1.2
log
@mi+md jmp_buf; save i386s fs and gs for WINE (csapuntz@@stanford.edu)
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.1 1998/08/28 01:54:57 d Exp $
d10 2
a11 2
	    char *fdata = (char*)((thr)->_machdep.saved_fp);	\
	    __asm__("fsave %0"::"m" (*fdata));		\
d17 2
a18 2
	    char *fdata = (char*)((thr)->_machdep.saved_fp);	\
	    __asm__("frstor %0"::"m" (*fdata));		\
@


1.1
log
@somehow i missed this directory..
@
text
@d4 1
a4 1
 * $OpenBSD$
d33 5
@

