head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.22
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.20
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.18
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.16
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.4;

1.4
date	2009.06.01.22.52.38;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.25.04.10.53;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.25.03.48.36;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.51.40;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.5
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.4 2009/06/01 22:52:38 guenther Exp $	*/

/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

/*
 * Atomic lock for amd64 -- taken from i386 code.
 */

#include "spinlock.h"

int
_atomic_lock(volatile _spinlock_lock_t *lock)
{
	_spinlock_lock_t old;

	/*
	 * Use the eXCHanGe instruction to swap the lock value with
	 * a local variable containing the locked state.
	 */
	old = _SPINLOCK_LOCKED;
	__asm__("xchg %0,(%2)"
		: "=r" (old)
		: "0"  (old), "r"  (lock));

	return (old != _SPINLOCK_UNLOCKED);
}
@


1.4
log
@Correct the _atomic_lock() asm so that gcc accepts the constraints
when compiling without optimization; fix copied from the kernel's atomic.h

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.3 2004/02/25 04:10:53 deraadt Exp $	*/
@


1.3
log
@copyrights
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 2004/02/25 03:48:36 deraadt Exp $	*/
d21 3
a23 3
	__asm__("xchg %0,%1"
		: "=r" (old), "=m" (*lock)
		: "0"  (old), "1"  (*lock));
@


1.2
log
@initial working pthreads support from sparc64, done with drahn.  there are
some `debugging features' and other optimizations (such as not saving all
registers) that we can still do perhaps
@
text
@d1 4
a4 1
/*	$OpenBSD$	*/
@


1.1
log
@the rest of the libs stuff; from art@@ again
@
text
@d1 1
d3 1
a3 1
 * Atomic lock for amd64
d11 12
a22 1
	/* dummy for now */
@

