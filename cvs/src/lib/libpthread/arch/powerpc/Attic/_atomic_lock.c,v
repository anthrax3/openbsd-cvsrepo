head	1.9;
access;
symbols
	OPENBSD_5_2:1.8.0.16
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.14
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5;
locks; strict;
comment	@ * @;


1.9
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.8;

1.8
date	2008.10.01.14.59.18;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.06.17.03.17;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.14.21.29.48;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.12.18.56.28;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.11.19.08.41;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.10.20.30.13;	author jsyn;	state Exp;
branches;
next	1.2;

1.2
date	98.12.22.05.47.17;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	98.12.21.07.22.26;	author d;	state Exp;
branches;
next	;


desc
@@


1.9
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.8 2008/10/01 14:59:18 drahn Exp $	*/
/*
 * Copyright (c) 1998 Dale Rahn <drahn@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Atomic lock for powerpc
 */

#include "spinlock.h"

int
_atomic_lock(volatile _spinlock_lock_t *lock)
{
	_spinlock_lock_t old;

	__asm__("1: lwarx 0,0,%1   \n"
		"   stwcx. %2,0,%1 \n"
		"   bne- 1b        \n"
		"   mr %0, 0	   \n"
		: "=r" (old), "=r" (lock)
		: "r" (_SPINLOCK_LOCKED), "1" (lock) : "0"
	);

	return (old != _SPINLOCK_UNLOCKED);

	/*
	 * Dale <drahn@@openbsd.org> says:
	 *   Side note. to prevent two processes from accessing
	 *   the same address with the lwarx in one instruction
	 *   and the stwcx in another process, the current powerpc
	 *   kernel uses a stwcx instruction without the corresponding
	 *   lwarx which causes any reservation of a process
	 *   to be removed.  if a context switch occurs
	 *   between the two accesses the store will not occur
	 *   and the condition code will cause it to loop. If on
	 *   a dual processor machine, the reserve will cause
	 *   appropriate bus cycle accesses to notify other
	 *   processors.
	 */
}
@


1.8
log
@Assert my copyright on files I gave to d@@ back in 1998.
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.7 2006/02/06 17:03:17 jmc Exp $	*/
@


1.7
log
@typos from alexey dobriyan;
@
text
@d1 17
a17 1
/*	$OpenBSD: _atomic_lock.c,v 1.6 2005/12/14 21:29:48 drahn Exp $	*/
@


1.6
log
@My email address changed quite a while ago...
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.5 2002/11/12 18:56:28 drahn Exp $	*/
d26 1
a26 1
	 *   the same address with the lwarx in one instrution
@


1.5
log
@Fix the C version of atomic lock so that the compiler will not share
registers. ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.4 2002/10/11 19:08:41 marc Exp $	*/
d24 1
a24 1
	 * Dale <rahnds@@openbsd.org> says:
@


1.4
log
@remove unused/unreferenced code.
ok fgs@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.3 2002/07/10 20:30:13 jsyn Exp $	*/
d13 1
a13 1
	__asm__("1: lwarx %0,0,%1  \n"
d16 1
d18 1
a18 1
		: "r" (_SPINLOCK_LOCKED), "1" (lock)
@


1.3
log
@'sez' is not an english word; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 1998/12/22 05:47:17 rahnds Exp $	*/
a35 7
}

int
_atomic_is_locked(volatile _spinlock_lock_t *lock)
{

	return (*lock != _SPINLOCK_UNLOCKED);
@


1.2
log
@Correct a thinko I had when writing the comment for this code.
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.1 1998/12/21 07:22:26 d Exp $	*/
d23 1
a23 1
	 * Dale <rahnds@@openbsd.org> sez:
@


1.1
log
@unfinished powerpc md stuff.. rahnds?
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 3
a29 3
	 *   kernel uses a lwarx instruction without the corresponding
	 *   stwcx which effectively causes any reservation of a
	 *   process to be removed.  if a context switch occurs
@

