head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.24
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.22
	OPENBSD_5_0:1.5.0.20
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.18
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.16
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.6
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.5;

1.5
date	2006.09.29.14.35.28;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.27.21.45.24;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.05.04.59.34;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.03.02.57.17;	author d;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.25.01.16.40;	author d;	state Exp;
branches;
next	;


desc
@@


1.6
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_machdep.c,v 1.5 2006/09/29 14:35:28 otto Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain */

#include <pthread.h>
#include "pthread_private.h"

#define ALIGNBYTES	0xf

/* Register save frame as it appears on the stack */
struct frame {
	int     r1;
	int     reserved;
	int     gp[32-14];
	int     lr, cr, ctr, xer;
	double    fp[32];
	double    fs;
	/* The rest are only valid in the initial frame */
	int     next_r1;
	int     next_lr;
};

/*
 * Given a stack and an entry function, initialise a state
 * structure that can be later switched to.
 */
void
_thread_machdep_init(statep, base, len, entry)
	struct _machdep_state* statep;
	void *base;
	int len;
	void (*entry)(void);
{
	struct frame *f;

	/* Locate the initial frame, aligned at the top of the stack */
	f = (struct frame *)(((int)base - 16 + len - sizeof *f) & ~ALIGNBYTES);
	
	f->r1 = (int)&f->next_r1;
	f->reserved = 0;
	f->lr = (int)entry;
	f->next_r1 = 0;		/* for gdb */
	f->next_lr = 0;		/* for gdb */

	/* Initialise the new thread with all the state from this thread. */

#define copyreg(x) __asm__ volatile ("stw " #x ", %0" : "=m"(f->gp[x-14]))
	copyreg(14); copyreg(15); copyreg(16); copyreg(17); copyreg(18);
	copyreg(19); copyreg(20); copyreg(21); copyreg(22); copyreg(23);
	copyreg(24); copyreg(25); copyreg(26); copyreg(27); copyreg(28);
	copyreg(29); copyreg(30); copyreg(31);

#define copysreg(nm) __asm__ volatile ("mf" #nm " %0" : "=r"(f->nm))
	copysreg(cr); copysreg(ctr); copysreg(xer);

#define copyfreg(x) __asm__ volatile ("stfd " #x ", %0" : "=m"(f->fp[x]))
	copyfreg(0);  copyfreg(1);  copyfreg(2);  copyfreg(3);
	copyfreg(4);  copyfreg(5);  copyfreg(6);  copyfreg(7);
	copyfreg(8);  copyfreg(9);  copyfreg(10); copyfreg(11);
	copyfreg(12); copyfreg(13); copyfreg(14); copyfreg(15);
	copyfreg(16); copyfreg(17); copyfreg(18); copyfreg(19);
	copyfreg(20); copyfreg(21); copyfreg(22); copyfreg(23);
	copyfreg(24); copyfreg(25); copyfreg(26); copyfreg(27);
	copyfreg(28); copyfreg(29); copyfreg(30); copyfreg(31);

	__asm__ volatile ("mffs 0; stfd 0, %0" : "=m"(f->fs));

	statep->frame = (int)f;
}


/*
 * No-op float saves.
 * (Floating point registers were saved in _thread_machdep_switch())
 */

void
_thread_machdep_save_float_state(statep)
	struct _machdep_state* statep;
{
}

void
_thread_machdep_restore_float_state(statep)
	struct _machdep_state* statep;
{
}
@


1.5
log
@powerpc stack needs a bit more headroom; needed because of mmap()ed
stacks; report by Antoine Jacoutot; ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.4 2003/01/27 21:45:24 drahn Exp $	*/
@


1.4
log
@Save all floating point registers to full register sized fields, not
half-sized areas. fixes preemption_float on powerpc.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.3 2000/10/05 04:59:34 rahnds Exp $	*/
d36 1
a36 1
	f = (struct frame *)(((int)base + len - sizeof *f) & ~ALIGNBYTES);
@


1.3
log
@Use volatile on the __asm__ directives, do not allow the compiler to reorder
or optimize out any of the assembly statements.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.3 2000/10/05 04:56:44 drahn Exp $	*/
d15 2
a16 2
	long    fp[32-14];
	long    fs;
d55 9
a63 5
#define copyfreg(x) __asm__ volatile ("stfd " #x ", %0" : "=m"(f->fp[x-14]))
	copyfreg(14); copyfreg(15); copyfreg(16); copyfreg(17); copyfreg(18);
	copyfreg(19); copyfreg(20); copyfreg(21); copyfreg(22); copyfreg(23);
	copyfreg(24); copyfreg(25); copyfreg(26); copyfreg(27); copyfreg(28);
	copyfreg(29); copyfreg(30); copyfreg(31);
@


1.2
log
@constistent naming
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.1 2000/09/25 01:16:40 d Exp $	*/
d46 1
a46 1
#define copyreg(x) __asm__("stw " #x ", %0" : "=m"(f->gp[x-14]))
d52 1
a52 1
#define copysreg(nm) __asm__("mf" #nm " %0" : "=r"(f->nm))
d55 1
a55 1
#define copyfreg(x) __asm__("stfd " #x ", %0" : "=m"(f->fp[x-14]))
d61 1
a61 1
	__asm__("mffs 0; stfd 0, %0" : "=m"(f->fs));
@


1.1
log
@preparation for switch-based threads
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d10 1
a10 1
struct _machdep_frame {
d33 1
a33 1
	struct _machdep_frame *f;
d36 1
a36 1
	f = (struct _machdep_frame *)(((int)base + len - sizeof *f) & ~ALIGNBYTES);
@

