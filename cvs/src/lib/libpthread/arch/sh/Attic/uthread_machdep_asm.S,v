head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.24
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.22
	OPENBSD_5_0:1.2.0.20
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.18
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.16
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.12
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.14
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.10
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.8
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.6
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.2;

1.2
date	2007.03.02.06.11.54;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.19.21.03.50;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_machdep_asm.S,v 1.2 2007/03/02 06:11:54 miod Exp $	*/

/*
 * Copyright (c) 2007 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice, this permission notice, and the disclaimer below
 * appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <machine/asm.h>

/*
 * void _thread_machdep_switch(new, oldsave);
 */
ENTRY(_thread_machdep_switch)
	/*
	 * On entry: r4 = new, r5 = oldsave
	 */

	/*
	 * Save current context on the stack.
	 */
#if defined(__SH4__) && !defined(__SH4_NOFPU__)
	sts.l	fpscr,	@@-r15
	mov	#0,	r1
	sts.l	fpul,	@@-r15
	lds	r1,	fpscr
	fmov.s	fr15,	@@-r15	/* note that we can't do double stores... */
	fmov.s	fr14,	@@-r15	/* ...as we don't control stack alignment. */
	fmov.s	fr13,	@@-r15
	fmov.s	fr12,	@@-r15
	frchg
	fmov.s	fr15,	@@-r15
	fmov.s	fr14,	@@-r15
	fmov.s	fr13,	@@-r15
	fmov.s	fr12,	@@-r15
#endif
	sts.l	mach,	@@-r15
	sts.l	macl,	@@-r15
	mov.l	r8,	@@-r15
	mov.l	r9,	@@-r15
	mov.l	r10,	@@-r15
	mov.l	r11,	@@-r15
	mov.l	r12,	@@-r15
	mov.l	r13,	@@-r15
	mov.l	r14,	@@-r15
	sts.l	pr,	@@-r15

	/*
	 * Switch stacks.
	 */
	mov.l	r15,	@@r5
	mov.l	@@r4,	r15

	/*
	 * Restore new context.
	 */
	lds.l	@@r15+,	pr
	mov.l	@@r15+,	r14
	mov.l	@@r15+,	r13
	mov.l	@@r15+,	r12
	mov.l	@@r15+,	r11
	mov.l	@@r15+,	r10
	mov.l	@@r15+,	r9
	mov.l	@@r15+,	r8
	lds.l	@@r15+,	macl
#if defined(__SH4__) && !defined(__SH4_NOFPU__)
	mov	#0,	r1
	lds.l	@@r15+,	mach
	lds	r1,	fpscr
	frchg
	fmov.s	@@r15+,	fr12
	fmov.s	@@r15+,	fr13
	fmov.s	@@r15+,	fr14
	fmov.s	@@r15+,	fr15
	frchg
	fmov.s	@@r15+,	fr12
	fmov.s	@@r15+,	fr13
	fmov.s	@@r15+,	fr14
	fmov.s	@@r15+,	fr15
	lds.l	@@r15+,	fpul
	rts
	 lds.l	@@r15+,	fpscr
#else
	rts
	 lds.l	@@r15+,	mach
#endif
@


1.2
log
@Move landisk to hardware floating point. At the moment the FPU context is
always saved upon context switches, as FPU registers are heavily used for
long long computations (don't ask). Gcc default to -m4.

Credits to drahn@@ otto@@ and deraadt@@ for feedback and help testing.

Upgrade procedure if you don't want to use the damn snapshots:
- build and install new kernel, reboot off it
- build new gcc, do not install it yet
- make includes
- install new gcc
- build and install lib/csu and lib/libc
- make build
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep_asm.S,v 1.1 2007/02/19 21:03:50 miod Exp $	*/
@


1.1
log
@pthread bits for sh; help deraadt@@, ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 20
a49 1
	/* save caller-saved context on stack */
d59 3
a61 1
	/* save old stack */
a62 2

	/* switch stacks */
d65 3
a67 1
	/* restore new context */
d75 20
d96 2
a97 1
	 mov.l	@@r15+,	r8
@

