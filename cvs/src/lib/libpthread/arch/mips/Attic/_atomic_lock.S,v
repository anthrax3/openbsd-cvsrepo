head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	98.11.20.11.15.37;	author d;	state dead;
branches;
next	1.1;

1.1
date	98.11.09.03.13.14;	author d;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Move atomic_lock code from asm to C with inline asm;
Add m68k, mips and sparc. (needs more careful checking)
Add 'slow_atomic_lock' for crippled archs.
@
text
@/*
 * $OpenBSD: _atomic_lock.S,v 1.1 1998/11/09 03:13:14 d Exp $
 */

#include "SYS.h"

/*
 * Atomicly lock a location with an identifier provided the location
 * is not currently locked.
 *
 * long _atomic_lock(long *a0);
 * v0 will contain the return value (zero if lock obtained).
 */

/*
 * XXXXXX THIS IS LOCK FUNCTION IS TOTALLY BOGUS XXXXXXXXX
 * pefo@@ says that for R4000 processors, there is a way to do this
 * atomically, but for R3000 you will need to context switch.
 * Specifically he says the 'll' and 'sc' instructions can be used for mips2.
 */
LEAF(_atomic_lock)
	.set	noreorder
	.set	nomacro

	/* Get the existing lock value and lock memory: */
	ori	t0,zero,1
	lw	v0,0(a0)
	sw	t0,0(a0)
	j	ra
	nop

	.set	macro
	.set	reorder
END(_atomic_lock)

@


1.1
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d2 1
a2 1
 * $OpenBSD: _atomic_lock.S,v 1.1 1998/08/28 01:54:57 d Exp $
@

