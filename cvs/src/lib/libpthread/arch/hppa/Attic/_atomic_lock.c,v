head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.36
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.34
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.32
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.28
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.30
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.26
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.24
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.22
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.20
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.18
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.16
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.14
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.12
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.10
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.3;

1.3
date	2011.11.14.15.16.12;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.11.19.08.41;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	98.12.21.22.54.55;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.3 2011/11/14 15:16:12 jsing Exp $	*/
/*
 * Atomic lock for hppa
 */
#include "spinlock.h"

int
_atomic_lock(volatile _spinlock_lock_t *lock)
{
	register register_t old;

	__asm__("ldcws 0(%1), %0" : "=r" (old): "r" (lock));

	return (old == _SPINLOCK_LOCKED);
}
@


1.3
log
@Unbreak build of libpthread on hppa/hppa64 by using correct type in
_atomic_lock() declaration.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.1 1998/12/21 22:54:55 mickey Exp $	*/
@


1.2
log
@remove unused/unreferenced code.
ok fgs@@
@
text
@d8 1
a8 1
_atomic_lock(volatile register_t *lock)
@


1.1
log
@MD locking and thread support for hppa
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a14 6
}

int
_atomic_is_locked(volatile register_t *lock)
{
	return (*lock == _SPINLOCK_LOCKED);
@

