head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.18
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.16
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.6;

1.6
date	2011.08.03.20.19.46;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.24.04.58.59;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.25.06.53.22;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.25.04.16.54;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.21.05.29.16;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.09.13.14.34;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.7
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_machdep.c,v 1.6 2011/08/03 20:19:46 miod Exp $	*/

/*
 * Copyright (c) 2004 Dale Rahn. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

#include <pthread.h>
#include "pthread_private.h"

#define ALIGNBYTES	0x7

/* Register save frame as it appears on the stack */
struct frame {
	int     r[12-4];
	int     fp; /* r12 */
	int     ip; /* r13 */
	int     lr; /* r14 */
	int	cpsr;
	double    fpr[6]; /* sizeof(fp)+sizeof(fs) == 52 */
	int	fs;
	/* The rest are only valid in the initial frame */
	int     next_fp;
	int     next_ip;
	int     next_lr;
	int	oldpc;
};

/*
 * Given a stack and an entry function, initialise a state
 * structure that can be later switched to.
 */
void
_thread_machdep_init(statep, base, len, entry)
	struct _machdep_state* statep;
	void *base;
	int len;
	void (*entry)(void);
{
	struct frame *f;
	int cpsr;

	/* Locate the initial frame, aligned at the top of the stack */
	f = (struct frame *)(((int)base + len - sizeof *f) & ~ALIGNBYTES);
	
	f->fp = (int)&f->next_fp;
	f->ip = (int)0;
	f->lr = (int)entry;
	f->next_fp = 0;		/* for gdb */
	f->next_lr = 0;		/* for gdb */

	/* Initialise the new thread with all the state from this thread. */

	__asm__ volatile ("mrs	%0, cpsr_all" : "=r" (cpsr));
	f->cpsr = cpsr;

	__asm__ volatile ("stmia %0, {r4-r12}":: "r"(&f->r[0]));

#ifndef __SOFTFP__
	__asm__ volatile ("sfm f4, 4, [%0], #0":: "r"(&f->fpr[0]));

	__asm__ volatile ("rfs 0; stfd 0, %0" : "=m"(f->fs));
#endif

	statep->frame = (int)f;
}


/*
 * No-op float saves.
 * (Floating point registers were saved in _thread_machdep_switch())
 */

void
_thread_machdep_save_float_state(statep)
	struct _machdep_state* statep;
{
#if !defined(__SOFTFP__) && !defined (__lint__)
#error finish FP save
#endif
}

void
_thread_machdep_restore_float_state(statep)
	struct _machdep_state* statep;
{
#if !defined(__SOFTFP__) && !defined (__lint__)
#error finish FP save
#endif
}
@


1.6
log
@Don't try to outsmart gcc inline assembler when saving the cpsr in the
thread context, this used to work but loses bigtime with gcc4.
ok drahn@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.5 2006/11/24 04:58:59 drahn Exp $	*/
@


1.5
log
@Use correct define to detect soft fpu on arm, dont complain on lint so much.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.4 2005/11/25 06:53:22 deraadt Exp $	*/
d60 1
a60 1
	int scratch;
d73 2
a74 2
	__asm__ volatile ("mrs	%0, cpsr_all; str %0, [%2, #0]"
	    : "=r"(scratch) : "0"(scratch), "r" (&f->cpsr));
@


1.4
log
@don't ask; ok drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.3 2004/02/25 04:16:54 drahn Exp $	*/
d78 1
a78 1
#ifndef __VFP_FP__
d97 1
a97 2
#if 0
#ifndef __VFP_FP__
a99 1
#endif
d106 1
a106 2
#if 0
#ifndef __VFP_FP__
a107 1
#endif
@


1.3
log
@Apply my copyrights to these files which I wrote. none of the old
copyright code remained.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.2 2004/02/21 05:29:16 drahn Exp $	*/
d97 1
d101 1
d108 1
d111 1
@


1.2
log
@Implement the arm pthreads pieces, only two regress fails, preemption_float
and sigmask.
@
text
@d1 25
a25 2
/*	$OpenBSD: uthread_machdep.c,v 1.1 2004/02/09 13:14:34 drahn Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain */
@


1.1
log
@Add arm support files for libpthread.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.1 2004/01/20 03:11:54 drahn Exp $	*/
d7 1
a7 2
#if 0
#define ALIGNBYTES	0xf
d11 7
a17 6
	int     r1;
	int     reserved;
	int     gp[32-14];
	int     lr, cr, ctr, xer;
	double    fp[32];
	double    fs;
d19 2
a20 1
	int     next_r1;
d22 1
d37 1
d42 2
a43 2
	f->r1 = (int)&f->next_r1;
	f->reserved = 0;
d45 1
a45 1
	f->next_r1 = 0;		/* for gdb */
d50 2
a51 18
#define copyreg(x) __asm__ volatile ("stw " #x ", %0" : "=m"(f->gp[x-14]))
	copyreg(14); copyreg(15); copyreg(16); copyreg(17); copyreg(18);
	copyreg(19); copyreg(20); copyreg(21); copyreg(22); copyreg(23);
	copyreg(24); copyreg(25); copyreg(26); copyreg(27); copyreg(28);
	copyreg(29); copyreg(30); copyreg(31);

#define copysreg(nm) __asm__ volatile ("mf" #nm " %0" : "=r"(f->nm))
	copysreg(cr); copysreg(ctr); copysreg(xer);

#define copyfreg(x) __asm__ volatile ("stfd " #x ", %0" : "=m"(f->fp[x]))
	copyfreg(0);  copyfreg(1);  copyfreg(2);  copyfreg(3);
	copyfreg(4);  copyfreg(5);  copyfreg(6);  copyfreg(7);
	copyfreg(8);  copyfreg(9);  copyfreg(10); copyfreg(11);
	copyfreg(12); copyfreg(13); copyfreg(14); copyfreg(15);
	copyfreg(16); copyfreg(17); copyfreg(18); copyfreg(19);
	copyfreg(20); copyfreg(21); copyfreg(22); copyfreg(23);
	copyfreg(24); copyfreg(25); copyfreg(26); copyfreg(27);
	copyfreg(28); copyfreg(29); copyfreg(30); copyfreg(31);
d53 7
a59 1
	__asm__ volatile ("mffs 0; stfd 0, %0" : "=m"(f->fs));
a62 1
#endif
d74 3
d83 3
@

