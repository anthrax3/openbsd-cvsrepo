head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.36
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.34
	OPENBSD_5_0:1.4.0.32
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.30
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.28
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.24
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.26
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.22
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.20
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.4;

1.4
date	2004.02.02.10.05.55;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.24.21.05.45;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.02.19.12.43;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.10.20.00.14;	author jason;	state Exp;
branches;
next	;


desc
@@


1.5
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_machdep.c,v 1.4 2004/02/02 10:05:55 brad Exp $	*/

/*
 * Machine-dependent thread state functions for OpenBSD/sparc64.
 */

#include <sys/types.h>
#include <machine/frame.h>
#include <machine/param.h>
#include <pthread.h>
#include "pthread_private.h"

/*
 * Given a stack and an entry function, initialise a state
 * structure that can be later switched to.
 */
void
_thread_machdep_init(statep, base, len, entry)
	struct _machdep_state* statep;
	void *base;
	int len;
	void (*entry)(void);
{
	struct frame64 *f;

	/* Locate the initial frame, aligned at the top of the stack */
	f = (struct frame64 *)(((long)base + len - sizeof *f) & ~ALIGNBYTES);
	
	f->fr_fp = 0;				/* purposefully misaligned */
	f->fr_pc = -1;				/* for gdb */
	statep->fp = (u_long)f - BIAS;
	statep->pc = -8 + (u_long)entry;
}

void
_thread_machdep_save_float_state(statep)
	struct _machdep_state* statep;
{
	_thread_machdep_fpsave(&statep->fs_fprs);
}

void
_thread_machdep_restore_float_state(statep)
	struct _machdep_state* statep;
{
	_thread_machdep_fprestore(&statep->fs_fprs);
}
@


1.4
log
@sparc -> sparc64
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.3 2003/01/24 21:05:45 jason Exp $	*/
@


1.3
log
@Save FPU state (unconditionally)
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.2 2002/01/02 19:12:43 art Exp $	*/
d4 1
a4 1
 * Machine-dependent thread state functions for OpenBSD/sparc.
@


1.2
log
@fp and pc are 64 bit.
And just to make things more fun -1, is not a misaligned stack on sparc64.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.1 2001/09/10 20:00:14 jason Exp $	*/
d39 1
d46 1
@


1.1
log
@Enough for libc_r on sparc64 to build (this stuff is mostly taken from sparc,
and will need attention before it can be expected to work).
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.1 2000/09/25 01:16:40 d Exp $	*/
d27 1
a27 1
	f = (struct frame64 *)(((int)base + len - sizeof *f) & ~ALIGNBYTES);
d29 1
a29 1
	f->fr_fp = (struct frame64 *)-1;	/* purposefully misaligned */
d31 2
a32 2
	statep->fp = (int)f;
	statep->pc = -8 + (int)entry;
@

