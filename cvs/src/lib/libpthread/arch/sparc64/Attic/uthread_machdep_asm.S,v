head	1.10;
access;
symbols
	OPENBSD_5_2:1.9.0.10
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.24
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7;
locks; strict;
comment	@# @;


1.10
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.9;

1.9
date	2010.05.25.20.05.48;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.02.10.05.55;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.31.19.17.46;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.24.21.30.15;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.24.21.05.45;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.25.22.10.44;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.02.23.05.53;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.02.19.11.28;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.10.20.00.14;	author jason;	state Exp;
branches;
next	;


desc
@@


1.10
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_machdep_asm.S,v 1.9 2010/05/25 20:05:48 kettenis Exp $	*/
/* David Leonard <d@@csee.uq.edu.au>. Public domain. */

#include <machine/asm.h>
#include <machine/trap.h>
#include <machine/frame.h>

/*
 * Switch stacks.
 *
 * On sparc64 this also means we switch register windows.
 */

/*
 * void _thread_machdep_switch(long newstate[2], long savestate[2], int flags);
 */
ENTRY(_thread_machdep_switch)

	/* new window */
	save	%sp, -CC64FSZ, %sp

	/* flush all windows (except current one) into memory frames */
	flushw

	/* switch the stack pointer and return address */
	stx 	%fp, [%i1 + 0]
	stx	%i7, [%i1 + 8]
	ldx	[%i0 + 0], %fp
	ldx	[%i0 + 8], %i7

	/* return to saved window at new %fp */
	ret
	 restore

#define	FPRS_ENA	0x4		/* fpu enabled */
#define	FPRS_DU		0x2		/* lower unit dirty */
#define	FPRS_DL		0x1		/* upper unit dirty */

ENTRY(_thread_machdep_fpsave)
	rd	%fprs, %o1
	stx	%o1, [%o0]
	andcc	%o1, FPRS_ENA, %g0
	bz	1f
	 nop

	stx	%fsr, [%o0 + 8]
	add	%o0, 16, %o0

	std	%f0, [%o0 + 0 * 8]		/* store registers */
	std	%f2, [%o0 + 1 * 8]
	std	%f4, [%o0 + 2 * 8]
	std	%f6, [%o0 + 3 * 8]
	std	%f8, [%o0 + 4 * 8]
	std	%f10, [%o0 + 5 * 8]
	std	%f12, [%o0 + 6 * 8]
	std	%f14, [%o0 + 7 * 8]
	std	%f16, [%o0 + 8 * 8]
	std	%f18, [%o0 + 9 * 8]
	std	%f20, [%o0 + 10 * 8]
	std	%f22, [%o0 + 11 * 8]
	std	%f24, [%o0 + 12 * 8]
	std	%f26, [%o0 + 13 * 8]
	std	%f28, [%o0 + 14 * 8]
	std	%f30, [%o0 + 15 * 8]

	std	%f32, [%o0 + 16 * 8]		/* store registers */
	std	%f34, [%o0 + 17 * 8]
	std	%f36, [%o0 + 18 * 8]
	std	%f38, [%o0 + 19 * 8]
	std	%f40, [%o0 + 20 * 8]
	std	%f42, [%o0 + 21 * 8]
	std	%f44, [%o0 + 22 * 8]
	std	%f46, [%o0 + 23 * 8]
	std	%f48, [%o0 + 24 * 8]
	std	%f50, [%o0 + 25 * 8]
	std	%f52, [%o0 + 26 * 8]
	std	%f54, [%o0 + 27 * 8]
	std	%f56, [%o0 + 28 * 8]
	std	%f58, [%o0 + 29 * 8]
	std	%f60, [%o0 + 30 * 8]
	std	%f62, [%o0 + 31 * 8]

	/* disable fpu and mark both sides clean */
	wr	%g0, 0, %fprs

1:
	retl
	 nop

ENTRY(_thread_machdep_fprestore)
	ldx	[%o0], %o1		/* o1 = fprs */
	andcc	%o1, FPRS_ENA, %g0
	bz	1f
	 nop

	wr	%o1, 0, %fprs
	ldx	[%o0 + 8], %fsr
	add	%o0, 16, %o0

	ldd	[%o0 + 0 * 8], %f0
	ldd	[%o0 + 1 * 8], %f2
	ldd	[%o0 + 2 * 8], %f4
	ldd	[%o0 + 3 * 8], %f6
	ldd	[%o0 + 4 * 8], %f8
	ldd	[%o0 + 5 * 8], %f10
	ldd	[%o0 + 6 * 8], %f12
	ldd	[%o0 + 7 * 8], %f14
	ldd	[%o0 + 8 * 8], %f16
	ldd	[%o0 + 9 * 8], %f18
	ldd	[%o0 + 10 * 8], %f20
	ldd	[%o0 + 11 * 8], %f22
	ldd	[%o0 + 12 * 8], %f24
	ldd	[%o0 + 13 * 8], %f26
	ldd	[%o0 + 14 * 8], %f28
	ldd	[%o0 + 15 * 8], %f30

	ldd	[%o0 + 16 * 8], %f32
	ldd	[%o0 + 17 * 8], %f34
	ldd	[%o0 + 18 * 8], %f36
	ldd	[%o0 + 19 * 8], %f38
	ldd	[%o0 + 20 * 8], %f40
	ldd	[%o0 + 21 * 8], %f42
	ldd	[%o0 + 22 * 8], %f44
	ldd	[%o0 + 23 * 8], %f46
	ldd	[%o0 + 24 * 8], %f48
	ldd	[%o0 + 25 * 8], %f50
	ldd	[%o0 + 26 * 8], %f52
	ldd	[%o0 + 27 * 8], %f54
	ldd	[%o0 + 28 * 8], %f56
	ldd	[%o0 + 29 * 8], %f58
	ldd	[%o0 + 30 * 8], %f60
	ldd	[%o0 + 31 * 8], %f62
1:
	retl
	 nop
@


1.9
log
@Make sure that we really mark the FPU registers clean.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep_asm.S,v 1.8 2004/02/02 10:05:55 brad Exp $	*/
@


1.8
log
@sparc -> sparc64
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep_asm.S,v 1.7 2003/01/31 19:17:46 jason Exp $	*/
d84 1
a84 1
	wr	%o1, FPRS_ENA|FPRS_DL|FPRS_DU, %fprs
@


1.7
log
@stuff in arch/sparc64 is by defn v9, remove < v9 #ifdefs. ok marc.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep_asm.S,v 1.6 2003/01/24 21:30:15 jason Exp $	*/
d10 5
a14 1
 * On sparc this also means we switch register windows.
@


1.6
log
@On save:
If the fpu isn't enabled, don't save state, otherwise, save the state,
mark both sides clean and disable the fpu.
On restore:
If the saved fpu state has the fpu disabled, do nothing, otherwise, restore
everything.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep_asm.S,v 1.5 2003/01/24 21:05:45 jason Exp $	*/
a10 9
 */

#ifdef __sparcv9__
#define flushw		.word 0x81580000
#else
#define flushw		t T_FLUSHWIN
#endif

/*
@


1.5
log
@Save FPU state (unconditionally)
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep_asm.S,v 1.4 2002/08/25 22:10:44 brad Exp $	*/
d47 4
d88 4
d97 4
d138 1
a138 1

@


1.4
log
@fix comment.
--
Ok'd by: jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep_asm.S,v 1.3 2002/01/02 23:05:53 art Exp $	*/
d40 89
@


1.3
log
@correct fram size.
pointed out by marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep_asm.S,v 1.2 2002/01/02 19:11:28 art Exp $	*/
d19 3
a21 1
/* void _thread_switch(long newstate[2], long savestate[2], int flags); */
@


1.2
log
@fp and pc are 64 bit.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep_asm.S,v 1.1 2001/09/10 20:00:14 jason Exp $	*/
d6 1
a18 3
#define SA(x)	(((x)+15)&(~0x1f))
#define MINFRAME ((16+1+6)*8)	

d23 1
a23 1
	save	%sp, -SA(MINFRAME), %sp
@


1.1
log
@Enough for libc_r on sparc64 to build (this stuff is mostly taken from sparc,
and will need attention before it can be expected to work).
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep_asm.S,v 1.1 2000/09/25 01:16:40 d Exp $	*/
d21 1
a21 1
/* void _thread_switch(int newstate[2], int savestate[2], int flags); */
d31 4
a34 4
	st 	%fp, [%i1 + 0]
	st	%i7, [%i1 + 4]
	ld	[%i0 + 0], %fp
	ld	[%i0 + 4], %i7
d38 1
a38 1
	restore
@

