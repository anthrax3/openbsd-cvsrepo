head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.24
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.22
	OPENBSD_5_0:1.4.0.20
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.18
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.16
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.12
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.14
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.10
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.8
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.6
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.4;

1.4
date	2006.09.22.19.04.33;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	99.11.25.07.01.37;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.24;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.07;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_ioctl.c,v 1.4 2006/09/22 19:04:33 kurt Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_ioctl.c,v 1.6 1999/08/28 00:03:37 peter Exp $
 */
#include <stdarg.h>
#include <sys/ioctl.h>
#ifdef _THREAD_SAFE
#include <sys/fcntl.h>	/* O_NONBLOCK*/
#include <pthread.h>
#include "pthread_private.h"

int
ioctl(int fd, unsigned long request,...)
{
	int             ret;
	int		*op;
	va_list         ap;

	/* Lock the file descriptor: */
	if ((ret = _FD_LOCK(fd, FD_RDWR, NULL)) == 0) {
		/* Initialise the variable argument list: */
		va_start(ap, request);

		switch( request) {
		case FIONBIO:
			/*
			 * descriptors must be non-blocking; we are only
			 * twiddling the flag based on the request
			 */
			op = va_arg(ap, int *);
			_thread_fd_table[fd]->status_flags->flags &= ~O_NONBLOCK;
			_thread_fd_table[fd]->status_flags->flags |= ((*op) ? O_NONBLOCK : 0);
			ret = 0;
			break;
		default:
			ret = _thread_sys_ioctl(fd, request, va_arg(ap, char *));
			break;
		}

		/* Free variable arguments: */
		va_end(ap);

		/* Unlock the file descriptor: */
		_FD_UNLOCK(fd, FD_RDWR);
	}

	/* Return the completion status: */
	return (ret);
}
#endif
@


1.4
log
@Part 1 of file descriptor race and deadlock corrections.

File status flags should be shared for dup'ed file descriptors.
However fd_table_entry's should not be shared for dup'ed file
descriptors so they can be independently be closed without
interfering with dup'ed fd's.

- split out file status flags into its own structure
fs_flags to manage sharing of status flags between
dup'ed file descriptors.
- when duplicating a fd, initialize a new fd_table_entry
for the new fd, but share the status flags via status_flags.
- consolidate the code that sets the underlying system fd
to be non-blocking to a new function _thread_fs_flags_init()
- consolidate the code that sets the underlying system
fd back to blocking into a new function _thread_fs_flags_replace()

This change is needed as a prerequisite to the coming race
and deadlock corrections. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_ioctl.c,v 1.3 1999/11/25 07:01:37 d Exp $	*/
@


1.3
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 2
a62 2
			_thread_fd_table[fd]->flags &= ~O_NONBLOCK;
			_thread_fd_table[fd]->flags |= ((*op) ? O_NONBLOCK : 0);
@


1.2
log
@ident
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD$
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

