head	1.13;
access;
symbols
	OPENBSD_5_2:1.12.0.4
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.10.0.18
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.16
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.14
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.10
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.12
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.6
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7;
locks; strict;
comment	@ * @;


1.13
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.12;

1.12
date	2011.10.07.08.59.43;	author fgsch;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.13.23.56.00;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.27.19.40.08;	author kurt;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.18.19.57.35;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.01.22.15.10;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.04.22.17.45;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.30.17.47.57;	author todd;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.30.07.40.47;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	99.11.25.07.01.46;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.05.26.00.18.26;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.29;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.29;	author d;	state Exp;
branches;
next	;


desc
@@


1.13
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_suspend_np.c,v 1.12 2011/10/07 08:59:43 fgsch Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_suspend_np.c,v 1.7 1999/08/28 00:03:53 peter Exp $
 */
#include <errno.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

static void	suspend_common(struct pthread *thread);
static void	finish_suspension(struct pthread *);

/* Suspend a thread: */
int
pthread_suspend_np(pthread_t thread)
{
	int ret;

	/* Suspending the current thread doesn't make sense. */
	if (thread == _get_curthread())
		ret = EDEADLK;

	/* Find the thread in the list of active threads: */
	else if ((ret = _find_thread(thread)) == 0) {
		/*
		 * Defer signals to protect the scheduling queues from
		 * access by the signal handler:
		 */
		_thread_kern_sig_defer();

		suspend_common(thread);

		/*
		 * Undefer and handle pending signals, yielding if
		 * necessary:
		 */
		_thread_kern_sig_undefer();
	}
	return(ret);
}

void
pthread_suspend_all_np(void)
{
	struct pthread	*curthread = _get_curthread();
	struct pthread	*thread;

	/*
	 * Defer signals to protect the scheduling queues from
	 * access by the signal handler:
	 */
	_thread_kern_sig_defer();

	TAILQ_FOREACH(thread, &_thread_list, tle) {
		if (thread != curthread)
			suspend_common(thread);
	}

	/*
	 * Undefer and handle pending signals, yielding if
	 * necessary:
	 */
	_thread_kern_sig_undefer();
}

static void
suspend_common(struct pthread *thread)
{
	switch (thread->state) {
	case PS_RUNNING:
		/*
		 * Remove the thread from the priority queue and
		 * set the state to suspended:
		 */
		PTHREAD_PRIOQ_REMOVE(thread);
		PTHREAD_SET_STATE(thread, PS_SUSPENDED);
		break;

	case PS_CONNECT_WAIT:
	case PS_FDR_WAIT:
	case PS_FDW_WAIT:
	case PS_KEVENT_WAIT:
		/*
		 * Remove these threads from the work queue
		 * and set the state to suspended:
		 */
		if ((thread->flags & PTHREAD_FLAGS_IN_WORKQ) != 0)
			PTHREAD_WORKQ_REMOVE(thread);
		PTHREAD_WAITQ_REMOVE(thread);
		PTHREAD_SET_STATE(thread, PS_SUSPENDED);
		break;

	case PS_SPINBLOCK:
	case PS_POLL_WAIT:
	case PS_SELECT_WAIT:
		/*
		 * Remove these threads from the work queue
		 * and mark the operation as interrupted:
		 */
		if ((thread->flags & PTHREAD_FLAGS_IN_WORKQ) != 0)
			PTHREAD_WORKQ_REMOVE(thread);
		_thread_seterrno(thread, EINTR);

		/* FALLTHROUGH */
	case PS_SLEEP_WAIT:
		thread->interrupted = 1;

		/* FALLTHROUGH */
	case PS_SIGTHREAD:
	case PS_WAIT_WAIT:
	case PS_SIGSUSPEND:
	case PS_SIGWAIT:
		/*
		 * Remove these threads from the waiting queue and
		 * set their state to suspended:
		 */
		PTHREAD_WAITQ_REMOVE(thread);
		PTHREAD_SET_STATE(thread, PS_SUSPENDED);
		break;

	case PS_MUTEX_WAIT:
		/* Mark the thread as suspended and still in a queue. */
		thread->suspended = SUSP_MUTEX_WAIT;

		PTHREAD_SET_STATE(thread, PS_SUSPENDED);
		break;
	case PS_COND_WAIT:
		/* Mark the thread as suspended and still in a queue. */
		thread->suspended = SUSP_COND_WAIT;

		PTHREAD_SET_STATE(thread, PS_SUSPENDED);
		break;
	case PS_JOIN:
		/* Mark the thread as suspended and joining: */
		thread->suspended = SUSP_JOIN;

		PTHREAD_NEW_STATE(thread, PS_SUSPENDED);
		break;
	case PS_FDLR_WAIT:
	case PS_FDLW_WAIT:
	case PS_FILE_WAIT:
		/* Mark the thread as suspended: */
		thread->suspended = SUSP_YES;

		/*
		 * Threads in these states may be in queues.
		 * In order to preserve queue integrity, the
		 * cancelled thread must remove itself from the
		 * queue.  Mark the thread as interrupted and
		 * set the state to running.  When the thread
		 * resumes, it will remove itself from the queue
		 * and call the suspension completion routine.
		 */
		thread->interrupted = 1;
		_thread_seterrno(thread, EINTR);
		PTHREAD_NEW_STATE(thread, PS_RUNNING);
		thread->continuation = finish_suspension;
		break;

	case PS_DEAD:
	case PS_DEADLOCK:
	case PS_STATE_MAX:
	case PS_SUSPENDED:
		/* Nothing needs to be done: */
		break;
	}
}

static void
finish_suspension(struct pthread *curthread)
{
	if (curthread->suspended != SUSP_NO)
		_thread_kern_sched_state(PS_SUSPENDED, __FILE__, __LINE__);
}
#endif
@


1.12
log
@threads waiting on PS_FDW_WAIT state should not be interruptible if
SA_RESTART is set, with connect(2) being the exception thus getting its
own state.
as pointed by kurt, threads on this and PS_FDR_WAIT states need to be
set to PS_RUNNING since the current signal dispatching code only looks
at the current thread.
ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_suspend_np.c,v 1.11 2011/09/13 23:56:00 fgsch Exp $	*/
@


1.11
log
@For threads in PS_FDR_WAIT state, check SA_RESTART before marking it as
interrupted, thus simulating the system call restart behaviour in the
non-pthreads case.
Add a state for kevent since it shouldn't be restarted regardless of
SA_RESTART being present.
guenther@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_suspend_np.c,v 1.10 2007/04/27 19:40:08 kurt Exp $	*/
d109 1
@


1.10
log
@fix thread_continuation_t typedef and use passed curthread instead of
calling _get_curthread() again. fixes some lint warnings. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_suspend_np.c,v 1.9 2004/09/18 19:57:35 marc Exp $	*/
d111 1
@


1.9
log
@
Allow thread in FD{R,W}_WAIT states to be suspended.
Patch from Kurt Miller <truk at optonline.net>
Commit reminder from millert@@.  OK brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_suspend_np.c,v 1.8 2004/05/01 22:15:10 marc Exp $	*/
d41 1
a41 1
static void	finish_suspension(void *arg);
d198 1
a198 1
finish_suspension(void *arg)
a199 2
	struct pthread	*curthread = _get_curthread();

@


1.8
log
@
pthead_supsend_all_np and pthread_resume_all_np from freebsd via
Kurt Miller <truk at optonline.net>.   Kurt says:
They're needed for the java hotspot compiler in the 1.3+ jdk
OK brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_suspend_np.c,v 1.7 2001/09/04 22:17:45 fgsch Exp $	*/
a108 1
	case PS_SPINBLOCK:
d111 11
@


1.7
log
@put changes back, this time ALL the files.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_suspend_np.c,v 1.5 2001/08/30 07:40:47 fgsch Exp $	*/
d40 1
d49 4
d54 1
a54 1
	if ((ret = _find_thread(thread)) == 0) {
d61 1
a61 86
		switch (thread->state) {
		case PS_RUNNING:
			/*
			 * Remove the thread from the priority queue and
			 * set the state to suspended:
			 */
			PTHREAD_PRIOQ_REMOVE(thread);
			PTHREAD_SET_STATE(thread, PS_SUSPENDED);
			break;

		case PS_SPINBLOCK:
		case PS_FDR_WAIT:
		case PS_FDW_WAIT:
		case PS_POLL_WAIT:
		case PS_SELECT_WAIT:
			/*
			 * Remove these threads from the work queue
			 * and mark the operation as interrupted:
			 */
			if ((thread->flags & PTHREAD_FLAGS_IN_WORKQ) != 0)
				PTHREAD_WORKQ_REMOVE(thread);
			_thread_seterrno(thread, EINTR);

			/* FALLTHROUGH */
		case PS_SLEEP_WAIT:
			thread->interrupted = 1;

			/* FALLTHROUGH */
		case PS_SIGTHREAD:
		case PS_WAIT_WAIT:
		case PS_SIGSUSPEND:
		case PS_SIGWAIT:
			/*
			 * Remove these threads from the waiting queue and
			 * set their state to suspended:
			 */
			PTHREAD_WAITQ_REMOVE(thread);
			PTHREAD_SET_STATE(thread, PS_SUSPENDED);
			break;

		case PS_MUTEX_WAIT:
			/* Mark the thread as suspended and still in a queue. */
			thread->suspended = SUSP_MUTEX_WAIT;

			PTHREAD_SET_STATE(thread, PS_SUSPENDED);
			break;
		case PS_COND_WAIT:
			/* Mark the thread as suspended and still in a queue. */
			thread->suspended = SUSP_COND_WAIT;

			PTHREAD_SET_STATE(thread, PS_SUSPENDED);
			break;
		case PS_JOIN:
			/* Mark the thread as suspended and joining: */
			thread->suspended = SUSP_JOIN;

			PTHREAD_NEW_STATE(thread, PS_SUSPENDED);
			break;
		case PS_FDLR_WAIT:
		case PS_FDLW_WAIT:
		case PS_FILE_WAIT:
			/* Mark the thread as suspended: */
			thread->suspended = SUSP_YES;

			/*
			 * Threads in these states may be in queues.
			 * In order to preserve queue integrity, the
			 * cancelled thread must remove itself from the
			 * queue.  Mark the thread as interrupted and
			 * set the state to running.  When the thread
			 * resumes, it will remove itself from the queue
			 * and call the suspension completion routine.
			 */
			thread->interrupted = 1;
			_thread_seterrno(thread, EINTR);
			PTHREAD_NEW_STATE(thread, PS_RUNNING);
			thread->continuation = finish_suspension;
			break;

		case PS_DEAD:
		case PS_DEADLOCK:
		case PS_STATE_MAX:
		case PS_SUSPENDED:
			/* Nothing needs to be done: */
			break;
		}
d70 115
@


1.6
log
@Back out fgsch@@'s tree breaking commits.
Test next time, ok?
@
text
@d40 2
a49 8
		/* The thread exists. Is it running? */
		if (thread->state != PS_RUNNING &&
		    thread->state != PS_SUSPENDED) {
			/* The thread operation has been interrupted */
			_thread_seterrno(thread,EINTR);
			thread->interrupted = 1;
		}

d56 86
a141 2
		/* Suspend the thread. */
		PTHREAD_NEW_STATE(thread,PS_SUSPENDED);
d150 9
@


1.5
log
@fix some const warnings.
more sync with freebsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_suspend_np.c,v 1.4 1999/11/25 07:01:46 d Exp $	*/
a39 2
static void	finish_suspension(void *arg);

d48 8
d62 2
a63 86
		switch (thread->state) {
		case PS_RUNNING:
			/*
			 * Remove the thread from the priority queue and
			 * set the state to suspended:
			 */
			PTHREAD_PRIOQ_REMOVE(thread);
			PTHREAD_SET_STATE(thread, PS_SUSPENDED);
			break;

		case PS_SPINBLOCK:
		case PS_FDR_WAIT:
		case PS_FDW_WAIT:
		case PS_POLL_WAIT:
		case PS_SELECT_WAIT:
			/*
			 * Remove these threads from the work queue
			 * and mark the operation as interrupted:
			 */
			if ((thread->flags & PTHREAD_FLAGS_IN_WORKQ) != 0)
				PTHREAD_WORKQ_REMOVE(thread);
			_thread_seterrno(thread, EINTR);

			/* FALLTHROUGH */
		case PS_SLEEP_WAIT:
			thread->interrupted = 1;

			/* FALLTHROUGH */
		case PS_SIGTHREAD:
		case PS_WAIT_WAIT:
		case PS_SIGSUSPEND:
		case PS_SIGWAIT:
			/*
			 * Remove these threads from the waiting queue and
			 * set their state to suspended:
			 */
			PTHREAD_WAITQ_REMOVE(thread);
			PTHREAD_SET_STATE(thread, PS_SUSPENDED);
			break;

		case PS_MUTEX_WAIT:
			/* Mark the thread as suspended and still in a queue. */
			thread->suspended = SUSP_MUTEX_WAIT;

			PTHREAD_SET_STATE(thread, PS_SUSPENDED);
			break;
		case PS_COND_WAIT:
			/* Mark the thread as suspended and still in a queue. */
			thread->suspended = SUSP_COND_WAIT;

			PTHREAD_SET_STATE(thread, PS_SUSPENDED);
			break;
		case PS_JOIN:
			/* Mark the thread as suspended and joining: */
			thread->suspended = SUSP_JOIN;

			PTHREAD_NEW_STATE(thread, PS_SUSPENDED);
			break;
		case PS_FDLR_WAIT:
		case PS_FDLW_WAIT:
		case PS_FILE_WAIT:
			/* Mark the thread as suspended: */
			thread->suspended = SUSP_YES;

			/*
			 * Threads in these states may be in queues.
			 * In order to preserve queue integrity, the
			 * cancelled thread must remove itself from the
			 * queue.  Mark the thread as interrupted and
			 * set the state to running.  When the thread
			 * resumes, it will remove itself from the queue
			 * and call the suspension completion routine.
			 */
			thread->interrupted = 1;
			_thread_seterrno(thread, EINTR);
			PTHREAD_NEW_STATE(thread, PS_RUNNING);
			thread->continuation = finish_suspension;
			break;

		case PS_DEAD:
		case PS_DEADLOCK:
		case PS_STATE_MAX:
		case PS_SUSPENDED:
			/* Nothing needs to be done: */
			break;
		}
a71 9
}

static void
finish_suspension(void *arg)
{
	struct pthread	*curthread = _get_curthread();

	if (curthread->suspended != SUSP_NO)
		_thread_kern_sched_state(PS_SUSPENDED, __FILE__, __LINE__);
@


1.4
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 2
a49 8
		/* The thread exists. Is it running? */
		if (thread->state != PS_RUNNING &&
		    thread->state != PS_SUSPENDED) {
			/* The thread operation has been interrupted */
			_thread_seterrno(thread,EINTR);
			thread->interrupted = 1;
		}

d56 86
a141 2
		/* Suspend the thread. */
		PTHREAD_NEW_STATE(thread,PS_SUSPENDED);
d150 9
@


1.3
log
@sync with FreeBSD
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_suspend_np.c,v 1.2 1999/01/06 05:29:29 d Exp $
d57 2
a58 3
		 * Guard against preemption by a scheduling signal.
		 * A change of thread state modifies the waiting
		 * and priority queues.
d60 1
a60 1
		_thread_kern_sched_defer();
d66 2
a67 2
		 * Reenable preemption and yield if a scheduling signal
		 * occurred while in the critical region.
d69 1
a69 1
		_thread_kern_sched_undefer();
@


1.2
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d55 7
d64 6
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

