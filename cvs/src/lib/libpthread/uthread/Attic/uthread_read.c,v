head	1.11;
access;
symbols
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.7.0.16
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.14
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.12
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.10
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.8
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.6
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7;
locks; strict;
comment	@ * @;


1.11
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.10;

1.10
date	2010.01.03.23.05.35;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2006.10.03.02.59.36;	author kurt;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.22.19.04.33;	author kurt;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.17.06.50.25;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	99.11.25.07.01.41;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.06.09.07.16.17;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.17.23.57.27;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.23.22.49.46;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.16;	author d;	state Exp;
branches;
next	;


desc
@@


1.11
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_read.c,v 1.10 2010/01/03 23:05:35 fgsch Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_read.c,v 1.8 1999/08/28 00:03:43 peter Exp $
 *
 */
#include <sys/types.h>
#include <sys/fcntl.h>
#include <sys/uio.h>
#include <errno.h>
#include <unistd.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

ssize_t
read(int fd, void *buf, size_t nbytes)
{
	struct pthread	*curthread = _get_curthread();
	ssize_t	ret;
	int	type;

	/* This is a cancellation point: */
	_thread_enter_cancellation_point();

	/* POSIX says to do just this: */
	if (nbytes == 0)
		ret = 0;

	/* Lock the file descriptor for read: */
	else if ((ret = _FD_LOCK(fd, FD_READ, NULL)) == 0) {
		/* Get the read/write mode type: */
		type = _thread_fd_table[fd]->status_flags->flags & O_ACCMODE;

		/* Check if the file is not open for read: */
		if (type != O_RDONLY && type != O_RDWR) {
			/* File is not open for read: */
			errno = EBADF;
			ret = -1;
		}

		/* Perform a non-blocking read syscall: */
		else while ((ret = _thread_sys_read(fd, buf, nbytes)) < 0) {
			if ((_thread_fd_table[fd]->status_flags->flags & O_NONBLOCK) == 0 &&
			    (errno == EWOULDBLOCK || errno == EAGAIN)) {
				curthread->data.fd.fd = fd;
				_thread_kern_set_timeout(_FD_RCVTIMEO(fd));

				/* Reset the interrupted operation flag: */
				curthread->interrupted = 0;
				curthread->closing_fd = 0;
				curthread->timeout = 0;

				_thread_kern_sched_state(PS_FDR_WAIT,
				    __FILE__, __LINE__);

				/*
				 * Check if the operation was
				 * interrupted by a signal,
				 * a closing fd or timed out.
				 */
				if (curthread->interrupted) {
					errno = EINTR;
					ret = -1;
					break;
				} else if (curthread->closing_fd) {
					errno = EBADF;
					ret = -1;
					break;
				} else if (curthread->timeout) {
					errno = EWOULDBLOCK;
					ret = -1;
					break;
				}
			} else {
				break;
			}
		}
		_FD_UNLOCK(fd, FD_READ);
	}

	/* No longer in a cancellation point: */
	_thread_leave_cancellation_point();

	return (ret);
}
#endif
@


1.10
log
@Make SO_RCVTIMEO and SO_SNDTIMEO work with pthreads. Fixes at least some of
the issues seen with www/varnish.
With input and help from guenther@@ and kurt@@. guenther@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_read.c,v 1.9 2006/10/03 02:59:36 kurt Exp $	*/
@


1.9
log
@Last Part of file descriptor race and deadlock corrections.

When a fd enters the closing state prevent any threads from
polling the fd and reschedule the thread with the closing_fd
flag set. This fixes a class of deadlocks where a thread is
blocked waiting for data (that may never arrive) and a later
thread calls close() or dup2() on the fd. okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_read.c,v 1.8 2006/09/22 19:04:33 kurt Exp $	*/
d76 1
a76 1
				_thread_kern_set_timeout(NULL);
d81 1
d88 2
a89 2
				 * interrupted by a signal or
				 * a closing fd.
d97 4
@


1.8
log
@Part 1 of file descriptor race and deadlock corrections.

File status flags should be shared for dup'ed file descriptors.
However fd_table_entry's should not be shared for dup'ed file
descriptors so they can be independently be closed without
interfering with dup'ed fd's.

- split out file status flags into its own structure
fs_flags to manage sharing of status flags between
dup'ed file descriptors.
- when duplicating a fd, initialize a new fd_table_entry
for the new fd, but share the status flags via status_flags.
- consolidate the code that sets the underlying system fd
to be non-blocking to a new function _thread_fs_flags_init()
- consolidate the code that sets the underlying system
fd back to blocking into a new function _thread_fs_flags_replace()

This change is needed as a prerequisite to the coming race
and deadlock corrections. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_read.c,v 1.7 2001/08/21 19:24:53 fgsch Exp $	*/
d80 1
d87 2
a88 1
				 * interrupted by a signal
d92 4
@


1.7
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_read.c,v 1.6 2001/08/17 06:50:25 fgsch Exp $	*/
d62 1
a62 1
		type = _thread_fd_table[fd]->flags & O_ACCMODE;
d73 1
a73 1
			if ((_thread_fd_table[fd]->flags & O_NONBLOCK) == 0 &&
@


1.6
log
@correctly return ssize_t.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_read.c,v 1.5 1999/11/25 07:01:41 d Exp $	*/
d48 1
d75 1
a75 1
				_thread_run->data.fd.fd = fd;
d79 1
a79 1
				_thread_run->interrupted = 0;
d88 1
a88 1
				if (_thread_run->interrupted) {
@


1.5
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 1
a48 1
	int	ret;
@


1.4
log
@document cancellation point handling a bit better
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 2
 * $FreeBSD: uthread_read.c,v 1.6 1998/06/10 22:28:43 jb Exp $
 * $OpenBSD: uthread_read.c,v 1.3 1999/01/17 23:57:27 d Exp $
d55 2
a56 5
	if (nbytes == 0) {
		/* No longer in a cancellation point: */
		_thread_leave_cancellation_point();
		return (0);
	}
d59 1
a59 1
	if ((ret = _FD_LOCK(fd, FD_READ, NULL)) == 0) {
d67 1
a67 4
			_FD_UNLOCK(fd, FD_READ);
			/* No longer in a cancellation point: */
			_thread_leave_cancellation_point();
			return (-1);
d71 1
a71 1
		while ((ret = _thread_sys_read(fd, buf, nbytes)) < 0) {
d98 1
d101 1
@


1.3
log
@pthread_cancel() and cancellation points
@
text
@d33 1
a33 1
 * $OpenBSD: uthread_read.c,v 1.2 1998/12/23 22:49:46 d Exp $
d51 1
d56 1
d71 1
d104 1
@


1.2
log
@preserve FreeBSD idents
@
text
@d33 1
a33 1
 * $OpenBSD: uthread_read.c,v 1.1 1998/08/27 09:01:16 d Exp $
d51 2
d54 2
a55 1
	if (nbytes == 0)
d57 1
d69 1
d101 1
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 2
a33 2
 * $Id: uthread_read.c,v 1.6 1998/06/10 22:28:43 jb Exp $
 * $OpenBSD$
@

