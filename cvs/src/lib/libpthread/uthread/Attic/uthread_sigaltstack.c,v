head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.40
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.3;

1.3
date	2003.01.20.19.24.24;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	99.11.25.07.01.44;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.11.09.03.13.20;	author d;	state Exp;
branches;
next	;


desc
@@


1.4
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/* $OpenBSD: uthread_sigaltstack.c,v 1.3 2003/01/20 19:24:24 marc Exp $ */
/* PUBLIC DOMAIN <marc@@snafu.org */

#include <signal.h>
#include <errno.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

/*
 * IEEE Std 1003.1-2001 says:
 *
 * "Use of this function by library threads that are not bound to
 * kernel-scheduled entities results in undefined behavior."
 *
 * There exists code (e.g. alpha setjmp) that uses this function
 * to get information about the current stack.
 *
 * The "undefined behaviour" in this implementation is thus:
 * o if ss is *not* null return -1 with errno set to EINVAL
 * o if oss is *not* null fill it in with information about the
 *   current stack and return 0.
 *
 * This lets things like alpha setjmp work in threaded applications.
 */

int
sigaltstack(const struct sigaltstack *ss, struct sigaltstack *oss)
{
	struct pthread *curthread = _get_curthread();

	int ret = 0;
	if (ss != NULL) {
		errno = EINVAL;
		ret = -1;
	} else if (oss != NULL) {
		/*
		 * get the requested info from the kernel if there is no
		 * thread or if the main thread (no thread stack).
		 */
		if (curthread == NULL || curthread->stack == NULL)
			_thread_sys_sigaltstack(ss, oss);
		else {
			oss->ss_sp = curthread->stack->base;
			oss->ss_size = curthread->stack->size;
			oss->ss_flags = SS_DISABLE;
		}
	}
	return (ret);
}
#endif /* _THREAD_SAFE */
@


1.3
log
@
Allow the fetching of current stack info from threaded apps.
This is necessary for alpha setjmp.   The alpha setjmp/longjmp
regression tests pass with -pthread with this change
@
text
@d1 1
a1 1
/* $OpenBSD: uthread_sigaltstack.c,v 1.2 1999/11/25 07:01:44 d Exp $ */
@


1.2
log
@sync with FreeBSD
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d11 14
a24 1
 * placeholder for sigaltstack XXX impl to be done
d30 20
a49 2
	errno = EINVAL;
	return (-1);
@


1.1
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d1 1
a1 3
/*
 * $OpenBSD$
 */
@

