head	1.15;
access;
symbols
	OPENBSD_5_2:1.14.0.12
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.10
	OPENBSD_5_0:1.14.0.8
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.12
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.8
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.6
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.15
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.14;

1.14
date	2010.01.03.23.05.35;	author fgsch;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.18.19.28.50;	author kurt;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.03.02.59.36;	author kurt;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.22.19.04.33;	author kurt;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.12.21.56.07;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.30.00.14.51;	author pat;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.01.08.19.33;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.22.21.28.47;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.31.04.46.17;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.11.14.56.07;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	99.11.25.07.01.47;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.23.22.49.47;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.30;	author d;	state Exp;
branches;
next	;


desc
@@


1.15
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_writev.c,v 1.14 2010/01/03 23:05:35 fgsch Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_writev.c,v 1.12 1999/08/28 00:03:55 peter Exp $
 *
 */
#include <sys/types.h>
#include <sys/fcntl.h>
#include <sys/uio.h>
#include <errno.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

ssize_t
writev(int fd, const struct iovec * iov, int iovcnt)
{
	struct pthread	*curthread = _get_curthread();
	int	blocking;
	int	idx = 0;
	int	type;
	ssize_t num = 0;
	size_t cnt;
	ssize_t n;
	ssize_t	ret;
	struct iovec liov[20];
	struct iovec *p_iov = liov;

	/* This is a cancellation point: */
	_thread_enter_cancellation_point();

	/* Check if the array size exceeds to compiled in size: */
	if (iovcnt > (int) (sizeof(liov) / sizeof(struct iovec))) {
		/* Allocate memory for the local array: */
		if ((p_iov = (struct iovec *)
		    malloc((size_t)iovcnt * sizeof(struct iovec))) == NULL) {
			/* Insufficient memory: */
			errno = ENOMEM;
			_thread_leave_cancellation_point();
			return (-1);
		}
	} else if (iovcnt <= 0) {
		errno = EINVAL;
		_thread_leave_cancellation_point();
		return (-1);
	}

	/* Copy the caller's array so that it can be modified locally: */
	memcpy(p_iov,iov,(size_t)iovcnt * sizeof(struct iovec));

	/* Lock the file descriptor for write: */
	if ((ret = _FD_LOCK(fd, FD_WRITE, NULL)) == 0) {
		/* Get the read/write mode type: */
		type = _thread_fd_table[fd]->status_flags->flags & O_ACCMODE;

		/* Check if the file is not open for write: */
		if (type != O_WRONLY && type != O_RDWR) {
			/* File is not open for write: */
			errno = EBADF;
			_FD_UNLOCK(fd, FD_WRITE);
			if (p_iov != liov)
				free(p_iov);
			_thread_leave_cancellation_point();
			return (-1);
		}

		/* Check if file operations are to block */
		blocking = ((_thread_fd_table[fd]->status_flags->flags & O_NONBLOCK) == 0);

		/*
		 * Loop while no error occurs and until the expected number
		 * of bytes are written if performing a blocking write:
		 */
		while (ret == 0) {
			/* Perform a non-blocking write syscall: */
			n = _thread_sys_writev(fd, &p_iov[idx], iovcnt - idx);

			/* Check if one or more bytes were written: */
			if (n > 0) {
				/*
				 * Keep a count of the number of bytes
				 * written:
				 */
				num += n;

				/*
				 * Enter a loop to check if a short write
				 * occurred and move the index to the
				 * array entry where the short write
				 * ended:
				 */
				cnt = (size_t)n;
				while (cnt > 0 && idx < iovcnt) {
					/*
					 * If the residual count exceeds
					 * the size of this vector, then
					 * it was completely written:
					 */
					if (cnt >= p_iov[idx].iov_len)
						/*
						 * Decrement the residual
						 * count and increment the
						 * index to the next array
						 * entry:
						 */
						cnt -= p_iov[idx++].iov_len;
					else {
						/*
						 * This entry was only
						 * partially written, so
						 * adjust it's length
						 * and base pointer ready
						 * for the next write:
						 */
						p_iov[idx].iov_len -= cnt;
						p_iov[idx].iov_base =
						    (char *)p_iov[idx].iov_base
						    + (ptrdiff_t)cnt;
						cnt = 0;
					}
				}
			} else if (n == 0) {
				/*
				 * Avoid an infinite loop if the last iov_len is
				 * 0.
				 */
				while (idx < iovcnt && p_iov[idx].iov_len == 0)
					idx++;

				if (idx == iovcnt) {
					ret = num;
					break;
				}
			}

			/*
			 * If performing a blocking write, check if the
			 * write would have blocked or if some bytes
			 * were written but there are still more to
			 * write:
			 */
			if (blocking && ((n < 0 && (errno == EWOULDBLOCK ||
			    errno == EAGAIN)) || (n >= 0 && idx < iovcnt))) {
				curthread->data.fd.fd = fd;
				_thread_kern_set_timeout(_FD_SNDTIMEO(fd));

				/* Reset the interrupted operation flag: */
				curthread->interrupted = 0;
				curthread->closing_fd = 0;
				curthread->timeout = 0;

				_thread_kern_sched_state(PS_FDW_WAIT,
				    __FILE__, __LINE__);

				/*
				 * Check if the operation was
				 * interrupted by a signal
				 */
				if (curthread->interrupted ||
				    curthread->closing_fd ||
				    curthread->timeout) {
					if (num > 0) {
						/* Return partial success: */
						ret = num;
					} else {
						/* Return an error: */
						if (curthread->closing_fd)
							errno = EBADF;
						else if (curthread->interrupted)
							errno = EINTR;
						else
							errno = EWOULDBLOCK;
						ret = -1;
					}
				}

			/*
			 * If performing a non-blocking write,
			 * just return whatever the write syscall did:
			 */
			} else if (!blocking) {
				/* A non-blocking call might return zero: */
				ret = n;
				break;

			/*
			 * If there was an error, return partial success
			 * (if any bytes were written) or else the error:
			 */
			} else if (n < 0) {
				if (num > 0)
					ret = num;
				else
					ret = n;

			/* Check if the write has completed: */
			} else if (idx == iovcnt)
				/* Return the number of bytes written: */
				ret = num;
		}
		_FD_UNLOCK(fd, FD_WRITE);
	}

	/* If memory was allocated for the array, free it: */
	if (p_iov != liov)
		free(p_iov);

	/* No longer in a cancellation point: */
	_thread_leave_cancellation_point();

	return (ret);
}
#endif
@


1.14
log
@Make SO_RCVTIMEO and SO_SNDTIMEO work with pthreads. Fixes at least some of
the issues seen with www/varnish.
With input and help from guenther@@ and kurt@@. guenther@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.13 2007/05/18 19:28:50 kurt Exp $	*/
@


1.13
log
@Eliminate many lint warnings by either: using the appropriate type,
casting when safe or adding ARGSUSED where needed. Reviewed and
improvements from millert@@ and marc@@. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.12 2006/10/03 02:59:36 kurt Exp $	*/
d178 1
a178 1
				_thread_kern_set_timeout(NULL);
d183 1
d192 3
a194 1
				if (curthread->interrupted || curthread->closing_fd) {
d202 2
d205 1
a205 1
							errno = EINTR;
@


1.12
log
@Last Part of file descriptor race and deadlock corrections.

When a fd enters the closing state prevent any threads from
polling the fd and reschedule the thread with the closing_fd
flag set. This fixes a class of deadlocks where a thread is
blocked waiting for data (that may never arrive) and a later
thread calls close() or dup2() on the fd. okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.11 2006/09/22 19:04:33 kurt Exp $	*/
d40 1
d55 1
a55 1
	size_t num = 0;
d69 1
a69 1
		    malloc(iovcnt * sizeof(struct iovec))) == NULL) {
d75 4
d82 1
a82 1
	memcpy(p_iov,iov,iovcnt * sizeof(struct iovec));
d125 1
a125 1
				cnt = n;
d151 1
a151 1
						    + cnt;
@


1.11
log
@Part 1 of file descriptor race and deadlock corrections.

File status flags should be shared for dup'ed file descriptors.
However fd_table_entry's should not be shared for dup'ed file
descriptors so they can be independently be closed without
interfering with dup'ed fd's.

- split out file status flags into its own structure
fs_flags to manage sharing of status flags between
dup'ed file descriptors.
- when duplicating a fd, initialize a new fd_table_entry
for the new fd, but share the status flags via status_flags.
- consolidate the code that sets the underlying system fd
to be non-blocking to a new function _thread_fs_flags_init()
- consolidate the code that sets the underlying system
fd back to blocking into a new function _thread_fs_flags_replace()

This change is needed as a prerequisite to the coming race
and deadlock corrections. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.10 2004/12/12 21:56:07 brad Exp $	*/
d177 1
d186 1
a186 1
				if (curthread->interrupted) {
d192 4
a195 1
						errno = EINTR;
@


1.10
log
@Avoid using void pointers in additive expressions

From FreeBSD

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.9 2004/11/30 00:14:51 pat Exp $	*/
d82 1
a82 1
		type = _thread_fd_table[fd]->flags & O_ACCMODE;
d96 1
a96 1
		blocking = ((_thread_fd_table[fd]->flags & O_NONBLOCK) == 0);
@


1.9
log
@* make sure we leave the thread's cancellation point before we return
* plug a memory leak and FD_UNLOCK properly in writev

ok marc
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.8 2004/01/01 08:19:33 brad Exp $	*/
d144 3
a146 1
						(char *)p_iov[idx].iov_base += cnt;
@


1.8
log
@more cancellation points.

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.7 2003/12/22 21:28:47 brad Exp $	*/
d71 1
d89 3
d218 1
a218 1
		_FD_UNLOCK(fd, FD_RDWR);
@


1.7
log
@Fix from FreeBSD' libc_r

rev 1.21
Fix bogus return values from libc_r's writev() routine in situations where
a partial-write is followed by an error.

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.6 2003/01/31 04:46:17 marc Exp $	*/
d61 3
d220 3
@


1.6
log
@
Create a siginfo_t for thread-to-thread kill.
Clean up (compiler warning elimination).   Compile check options added
but commented out as they have not been checked on all architectures, yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.5 2001/08/21 19:24:53 fgsch Exp $	*/
d177 8
a184 2
					/* Return an error: */
					ret = -1;
d188 2
a189 3
			 * If performing a non-blocking write or if an
			 * error occurred, just return whatever the write
			 * syscall did:
d191 1
a191 1
			} else if (!blocking || n < 0) {
d195 10
@


1.5
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.4 2001/08/11 14:56:07 fgsch Exp $	*/
d54 2
a55 1
	ssize_t cnt;
a56 1
	ssize_t num = 0;
d62 1
a62 1
	if (iovcnt > (sizeof(liov) / sizeof(struct iovec))) {
d137 1
a137 1
						p_iov[idx].iov_base += cnt;
@


1.4
log
@Avoid an infinite loop if the last iov_len is 0; from FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_writev.c,v 1.3 1999/11/25 07:01:47 d Exp $	*/
d50 1
d163 1
a163 1
				_thread_run->data.fd.fd = fd;
d167 1
a167 1
				_thread_run->interrupted = 0;
d176 1
a176 1
				if (_thread_run->interrupted) {
@


1.3
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d139 12
@


1.2
log
@preserve FreeBSD idents
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 2
 * $FreeBSD: uthread_writev.c,v 1.10 1998/06/14 09:36:14 jb Exp $
 * $OpenBSD: uthread_writev.c,v 1.1 1998/08/27 09:01:30 d Exp $
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 2
a33 2
 * $Id: uthread_writev.c,v 1.10 1998/06/14 09:36:14 jb Exp $
 * $OpenBSD$
@

