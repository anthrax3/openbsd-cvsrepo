head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.34
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.32
	OPENBSD_5_0:1.6.0.30
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.28
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.26
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.22
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.24
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.20
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5;
locks; strict;
comment	@ * @;


1.7
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.6;

1.6
date	2004.05.01.22.15.10;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.19.02.02.52;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	99.11.25.07.01.42;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.05.26.00.18.25;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.26;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.17;	author d;	state Exp;
branches;
next	;


desc
@@


1.7
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_resume_np.c,v 1.6 2004/05/01 22:15:10 marc Exp $	*/
/*
 * Copyright (c) 1995 John Birrell <jb@@cimlogic.com.au>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_resume_np.c,v 1.7 1999/08/28 00:03:44 peter Exp $
 */
#include <errno.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

static void	resume_common(struct pthread *, enum pthread_susp);

/* Resume a thread: */
int
pthread_resume_np(pthread_t thread)
{
	int	ret;
	enum	pthread_susp old_suspended;

	/* Find the thread in the list of active threads: */
	if ((ret = _find_thread(thread)) == 0) {
		/* Cancel any pending suspensions: */
		old_suspended = thread->suspended;
		thread->suspended = SUSP_NO;

		/* Is it currently suspended? */
		if (thread->state == PS_SUSPENDED) {
			/*
			 * Defer signals to protect the scheduling queues
			 * from access by the signal handler:
			 */
			_thread_kern_sig_defer();

			resume_common(thread, old_suspended);

			/*
			 * Undefer and handle pending signals, yielding if
			 * necessary:
			 */
			_thread_kern_sig_undefer();
		}
	}
	return(ret);
}

void
pthread_resume_all_np(void)
{
	struct pthread		*curthread = _get_curthread();
	struct pthread		*thread;
	enum pthread_susp 	old_suspended;

	/*
	 * Defer signals to protect the scheduling queues from access
	 * by the signal handler:
	 */
	_thread_kern_sig_defer();

	TAILQ_FOREACH(thread, &_thread_list, tle) {
		if (thread != curthread) {
			/* Cancel any pending suspensions: */
                	old_suspended = thread->suspended;
                	thread->suspended = SUSP_NO;

                	/* Is it currently suspended? */
                	if (thread->state == PS_SUSPENDED)
				resume_common(thread, old_suspended);
		}
	}

	/*
	 * Undefer and handle pending signals, yielding if necessary:
	 */
	_thread_kern_sig_undefer();
}

static void
resume_common(struct pthread *thread, enum pthread_susp old_suspended)
{
	switch (old_suspended) {
	case SUSP_MUTEX_WAIT:
		/* Set the thread's state back. */
		PTHREAD_SET_STATE(thread,PS_MUTEX_WAIT);
		break;
	case SUSP_COND_WAIT:
		/* Set the thread's state back. */
		PTHREAD_SET_STATE(thread,PS_COND_WAIT);
		break;
	case SUSP_JOIN:
		/* Set the thread's state back. */
		PTHREAD_SET_STATE(thread,PS_JOIN);
		break;
	case SUSP_NOWAIT:
		/* Allow the thread to run. */
		PTHREAD_SET_STATE(thread,PS_RUNNING);
		PTHREAD_WAITQ_REMOVE(thread);
		PTHREAD_PRIOQ_INSERT_TAIL(thread);
		break;
	case SUSP_NO:
	case SUSP_YES:
		/* Allow the thread to run. */
		PTHREAD_SET_STATE(thread,PS_RUNNING);
		PTHREAD_PRIOQ_INSERT_TAIL(thread);
		break;
	}

}
#endif
@


1.6
log
@
pthead_supsend_all_np and pthread_resume_all_np from freebsd via
Kurt Miller <truk at optonline.net>.   Kurt says:
They're needed for the java hotspot compiler in the 1.3+ jdk
OK brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_resume_np.c,v 1.5 2001/12/19 02:02:52 fgsch Exp $	*/
@


1.5
log
@More sync.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_resume_np.c,v 1.4 1999/11/25 07:01:42 d Exp $	*/
d40 2
d63 1
a63 26
			switch (old_suspended) {
			case SUSP_MUTEX_WAIT:
				/* Set the thread's state back. */
				PTHREAD_SET_STATE(thread,PS_MUTEX_WAIT);
				break;
			case SUSP_COND_WAIT:
				/* Set the thread's state back. */
				PTHREAD_SET_STATE(thread,PS_COND_WAIT);
				break;
			case SUSP_JOIN:
				/* Set the thread's state back. */
				PTHREAD_SET_STATE(thread,PS_JOIN);
				break;
			case SUSP_NOWAIT:
				/* Allow the thread to run. */
				PTHREAD_SET_STATE(thread,PS_RUNNING);
				PTHREAD_WAITQ_REMOVE(thread);
				PTHREAD_PRIOQ_INSERT_TAIL(thread);
				break;
			case SUSP_NO:
			case SUSP_YES:
				/* Allow the thread to run. */
				PTHREAD_SET_STATE(thread,PS_RUNNING);
				PTHREAD_PRIOQ_INSERT_TAIL(thread);
				break;
			}
d73 63
@


1.4
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 2
a45 1
	int ret;
d49 6
a54 2
		/* The thread exists. Is it suspended? */
		if (thread->state != PS_SUSPENDED) {
d61 26
a86 2
			/* Allow the thread to run. */
			PTHREAD_NEW_STATE(thread,PS_RUNNING);
@


1.3
log
@sync with FreeBSD
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_resume_np.c,v 1.2 1999/01/06 05:29:26 d Exp $
d51 2
a52 3
			 * Guard against preemption by a scheduling signal.
			 * A change of thread state modifies the waiting
			 * and priority queues.
d54 1
a54 1
			_thread_kern_sched_defer();
d60 2
a61 2
			 * Reenable preemption and yield if a scheduling
			 * signal occurred while in the critical region.
d63 1
a63 1
			_thread_kern_sched_undefer();
@


1.2
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d49 7
d58 6
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

