head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.16
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.14
	OPENBSD_5_0:1.5.0.12
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.10
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.20
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.18
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.16
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.14
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.12
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.10
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.5;

1.5
date	2008.10.02.23.27.24;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.04.19.30.41;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.20.19.35.37;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.11.25.07.01.47;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.11.09.03.13.21;	author d;	state Exp;
branches;
next	;


desc
@@


1.6
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_vfork.c,v 1.5 2008/10/02 23:27:24 deraadt Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

#include <unistd.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

pid_t	_dofork(int vfork);

pid_t
vfork(void)
{
	pid_t pid;

	/*
	 * Defer signals to protect the scheduling queues from access
	 * by the signal handler:
	 */
	_thread_kern_sig_defer();

	pid = _dofork(1);

	/*
	 * Undefer and handle pending signals, yielding if necessary:
	 */
	_thread_kern_sig_undefer();

	return (pid);
}
#endif
@


1.5
log
@the license on this is PD; david leonard says so
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_vfork.c,v 1.4 2008/04/04 19:30:41 kurt Exp $	*/
@


1.4
log
@- do not call pthread_atfork(3) handlers when a multithreaded program
calls vfork(2). "untested, but looks OK" marc@@
- document vfork(2), popen(3) and system(3) don't call atfork handlers
in multithreaded programs. okay jmc@@
@
text
@d1 3
a3 1
/*	$OpenBSD: uthread_vfork.c,v 1.3 2007/11/20 19:35:37 deraadt Exp $	*/
@


1.3
log
@make pthread vfork() not call fork(), but actually call vfork().  our
vfork() has only one semantic: "parent stalls until child does execve
or exit" and no other semantic.  it is unfair to act as if pthread
vfork() suddenly lacks that semantic.
ok kurt millert kettenis beck
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_vfork.c,v 1.2 1999/11/25 07:01:47 d Exp $	*/
d4 2
d12 16
a27 1
	return (_dofork(1));
@


1.2
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d5 3
a7 1
int
d10 1
a10 1
	return (fork());
@


1.1
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d1 1
a1 3
/*
 *	$OpenBSD$
 */
d10 1
a10 1
#endif /* _THREAD_SAFE */
@

