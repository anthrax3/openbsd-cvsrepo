head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.7
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.6;

1.6
date	2009.12.06.17.54.59;	author kurt;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.03.14.45.05;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	99.11.25.07.01.36;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.02.16.16.40.00;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.24;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.06;	author d;	state Exp;
branches;
next	;


desc
@@


1.7
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_getsockopt.c,v 1.6 2009/12/06 17:54:59 kurt Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_getsockopt.c,v 1.5 1999/08/28 00:03:36 peter Exp $
 */
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int
getsockopt(int fd, int level, int optname, void *optval, socklen_t *optlen)
{
	int             ret;
	struct fd_table_entry *entry;

	ret = _thread_fd_table_init(fd, FD_INIT_UNKNOWN, NULL);
	if (ret == 0) {
		entry = _thread_fd_table[fd];
		 
		_thread_kern_sig_defer();
		if (entry->state == FD_ENTRY_OPEN) {
			ret = _thread_sys_getsockopt(fd, level, optname, optval, optlen);
		} else {
			ret = -1;
			errno = EBADF;
		}
		_thread_kern_sig_undefer();
	}

	return ret;
}
#endif
@


1.6
log
@Make internal file descriptor handling async-signal safe by eliminating
the use of spinlocks and malloc. All needed memory is allocated upfront
and _thread_kern_sig_defer/undefer() is now used to protect critical
sections. okay guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_getsockopt.c,v 1.5 2008/06/03 14:45:05 kurt Exp $	*/
@


1.5
log
@Don't grab the fd read lock for getsockopt(2), setsockopt(2),
getpeername(2) or getsockname(2). Its not needed and causes
threads to block when another thread is blocked and holding the
read lock. Instead just protect against fd state transitions.
Blocking problem reported by David S H Rosenthal from lockss.org
okay beck@@ "looks sane" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_getsockopt.c,v 1.4 1999/11/25 07:01:36 d Exp $	*/
d52 1
a52 1
		_SPINLOCK(&entry->lock);
d59 1
a59 1
		_SPINUNLOCK(&entry->lock);
@


1.4
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d35 1
d46 1
d48 12
a59 3
	if ((ret = _FD_LOCK(fd, FD_RDWR, NULL)) == 0) {
		ret = _thread_sys_getsockopt(fd, level, optname, optval, optlen);
		_FD_UNLOCK(fd, FD_RDWR);
d61 1
@


1.3
log
@deal with socklen_t
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_getsockopt.c,v 1.2 1999/01/06 05:29:24 d Exp $
@


1.2
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d41 1
a41 1
getsockopt(int fd, int level, int optname, void *optval, int *optlen)
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

