head	1.18;
access;
symbols
	OPENBSD_5_2:1.17.0.22
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.20
	OPENBSD_5_0:1.17.0.18
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.16
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.14
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.10
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.12
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.8
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.6
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.4
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12;
locks; strict;
comment	@ * @;


1.18
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.17;

1.17
date	2007.05.01.18.16.37;	author kurt;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.09.02.57.41;	author krw;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.29.18.07.55;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2004.04.06.03.56.39;	author marc;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.23.20.10.45;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.31.04.46.17;	author marc;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.11.00.19.47;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.06.07.17.23;	author d;	state Exp;
branches;
next	1.8;

1.8
date	99.11.30.04.59.42;	author d;	state Exp;
branches;
next	1.7;

1.7
date	99.11.30.04.53.24;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.11.25.07.01.36;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.05.26.00.18.24;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.02.01.08.24.42;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.12.23.22.49.46;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.21.07.39.34;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.11.09.03.13.19;	author d;	state Exp;
branches;
next	;


desc
@@


1.18
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_gc.c,v 1.17 2007/05/01 18:16:37 kurt Exp $	*/
/*
 * Copyright (c) 1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_gc.c,v 1.10 1999/08/28 00:03:34 peter Exp $
 *
 * Garbage collector thread. Frees memory allocated for dead threads.
 *
 */
#include <errno.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/types.h>
#include <sys/mman.h>
#include <pthread.h>
#include "pthread_private.h"

/* ARGSUSED */
pthread_addr_t
_thread_gc(pthread_addr_t arg)
{
	struct pthread	*curthread = _get_curthread();
	int		f_debug;
	int		f_done = 0;
	int		ret;
	sigset_t	mask;
	pthread_t	pthread, next;
	pthread_t	pthread_cln;
	struct timespec	abstime;
	void		*p_stack;

	/* Block all signals */
	sigfillset(&mask);
	pthread_sigmask(SIG_BLOCK, &mask, NULL);

	/* Mark this thread as a library thread (not a user thread). */
	curthread->flags |= PTHREAD_FLAGS_PRIVATE;

	/* Set a debug flag based on an environment variable. */
	f_debug = (getenv("LIBPTHREAD_DEBUG") != NULL);

	/* Set the name of this thread. */
	pthread_set_name_np(curthread, "GC");

	while (!f_done) {
		/* Check if debugging this application. */
		if (f_debug)
			/* Dump thread info to file. */
			_thread_dump_info();

		/*
		 * Defer signals to protect the scheduling queues from
		 * access by the signal handler:
		 */
		_thread_kern_sig_defer();

		/* Check if this is the last running thread: */
		if (TAILQ_FIRST(&_thread_list) == curthread &&
		    TAILQ_NEXT(curthread, tle) == NULL)
			/*
			 * This is the last thread, so it can exit
			 * now.
			 */
			f_done = 1;

		/*
		 * Undefer and handle pending signals, yielding if
		 * necessary:
		 */
		_thread_kern_sig_undefer();

		/* No stack of thread structure to free yet: */
		p_stack = NULL;
		pthread_cln = NULL;

		/*
		 * Lock the garbage collector mutex which ensures that
		 * this thread sees another thread exit:
		 */
		if (pthread_mutex_lock(&_gc_mutex) != 0)
			PANIC("Cannot lock gc mutex");

		/*
		 * Enter a loop to search for the first dead thread that
		 * has memory to free.
		 */
		for (pthread = TAILQ_FIRST(&_dead_list);
		     p_stack == NULL && pthread_cln == NULL && pthread != NULL;
		     pthread = next) {
		     	next = TAILQ_NEXT(pthread, dle);
			/* Check if the initial thread: */
			if (pthread == _thread_initial) {
				/* Don't destroy the initial thread. */
			}
			/*
			 * Check if this thread has detached:
			 */
			else if ((pthread->attr.flags &
			    PTHREAD_DETACHED) != 0) {
				/* Remove this thread from the dead list: */
				TAILQ_REMOVE(&_dead_list, pthread, dle);

				/*
				 * Point to the stack structure that must
				 * be freed outside the locks:
				 */
				if (pthread->stack != NULL) {
					p_stack = pthread->stack;
					pthread->stack = NULL;
				}

				/*
				 * Point to the thread structure that must
				 * be freed outside the locks:
				 */
				pthread_cln = pthread;

			} else {
				/*
				 * This thread has not detached, so do
				 * not destroy it.
				 *
				 * But we can destroy its stack.
				 */
			        if (pthread->stack != NULL) {
					p_stack = pthread->stack;
					pthread->stack = NULL;
				}
			}
		}

		/*
		 * Check if this is not the last thread and there is no
		 * memory to free this time around.
		 */
		if (!f_done && p_stack == NULL && pthread_cln == NULL) {
			/* Get the current time. */
			if (clock_gettime(CLOCK_REALTIME,&abstime) != 0)
				PANIC("gc cannot get time");

			/*
			 * Do a backup poll in 10 seconds if no threads
			 * die before then.
			 */
			abstime.tv_sec += 10;

			/*
			 * Wait for a signal from a dying thread or a
			 * timeout (for a backup poll).
			 */
			if ((ret = pthread_cond_timedwait(&_gc_cond,
			    &_gc_mutex, &abstime)) != 0 && ret != ETIMEDOUT)
				PANIC("gc cannot wait for a signal");
		}

		/* Unlock the garbage collector mutex: */
		if (pthread_mutex_unlock(&_gc_mutex) != 0)
			PANIC("Cannot unlock gc mutex");

		/*
		 * If there is memory to free, do it now. The call to
		 * free() might block, so this must be done outside the
		 * locks.
		 */
		if (p_stack != NULL)
			/* Free the stack storage. */
			_thread_stack_free(p_stack);

		if (pthread_cln != NULL) {
			if (pthread_cln->name != NULL) {
				/* Free the thread name string. */
				free(pthread_cln->name);
			}
			/*
			 * Free the memory allocated for the thread
			 * structure.
			 */
			if (pthread_cln->poll_data.fds != NULL)
				free(pthread_cln->poll_data.fds);

			if (pthread_cln->specific_data != NULL)
				free(pthread_cln->specific_data);

			free(pthread_cln);
		}
	}
	return (NULL);
}
@


1.17
log
@lint warning corrections:
- use the correct types
- mark _thread_gc() w/ARGSUSED
- fix a 'a cast does not yield an lvalue'
okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.16 2006/04/09 02:57:41 krw Exp $	*/
@


1.16
log
@Change a debug interface to take const char pointers so we don't ave
to cast away constness whenever we want to pass in a string that is
already const -- we copy the string if we want to use it, so having it
be non-const in the first place does not make any sense.

From tholo@@

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.15 2005/10/29 18:07:55 krw Exp $	*/
d48 1
@


1.15
log
@Don't use TAILQ_NEXT() on an element that has been removed. Similar to
otto@@'s diff for uvm_aobj.c.

ok deraadt@@ pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.14 2004/04/06 03:56:39 marc Exp $	*/
d72 1
a72 1
	pthread_set_name_np(curthread, (char *)"GC");
@


1.14
log
@
Apply patch from guenther at mho.com (pr3730) that fixes a double
free in the threads library
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.13 2003/12/23 20:10:45 brad Exp $	*/
d56 1
a56 1
	pthread_t	pthread;
d118 2
a119 1
		     pthread = TAILQ_NEXT(pthread, dle)) {
@


1.13
log
@change the variable name used for status checking,
LIBC_R_DEBUG -> LIBPTHREAD_DEBUG

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.12 2003/01/31 04:46:17 marc Exp $	*/
d135 1
a135 1
				if (pthread->stack != NULL)
d137 2
@


1.12
log
@
Create a siginfo_t for thread-to-thread kill.
Clean up (compiler warning elimination).   Compile check options added
but commented out as they have not been checked on all architectures, yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.11 2001/12/11 00:19:47 fgsch Exp $	*/
d69 1
a69 1
	f_debug = (getenv("LIBC_R_DEBUG") != NULL);
@


1.11
log
@More sync with freebsd code; join related code this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.10 2001/08/21 19:24:53 fgsch Exp $	*/
d72 1
a72 1
	pthread_set_name_np(curthread,"GC");
@


1.10
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.9 2000/01/06 07:17:23 d Exp $	*/
d62 2
a63 2
	sigfillset (&mask);
	sigprocmask (SIG_BLOCK, &mask, NULL);
d101 4
a111 4
		/* No stack of thread structure to free yet: */
		p_stack = NULL;
		pthread_cln = NULL;

d127 1
a127 1
				  PTHREAD_DETACHED) != 0) {
d196 4
a203 3
			if (pthread_cln->name != NULL)
				free(pthread_cln->name);

@


1.9
log
@include stdlib.h, unused vars
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.8 1999/11/30 04:59:42 d Exp $	*/
d51 1
d66 1
a66 1
	_thread_run->flags |= PTHREAD_FLAGS_PRIVATE;
d72 1
a72 1
	pthread_set_name_np(_thread_run,"GC");
d87 2
a88 2
		if (TAILQ_FIRST(&_thread_list) == _thread_run &&
		    TAILQ_NEXT(_thread_run, tle) == NULL)
@


1.8
log
@garbage collect thread-specific data
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.7 1999/11/30 04:53:24 d Exp $	*/
d39 1
a56 2
	pthread_t	pthread_nxt;
	pthread_t	pthread_prv;
@


1.7
log
@clean up the poll fdsets in the garbage collector, not in exit()
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_gc.c,v 1.6 1999/11/25 07:01:36 d Exp $	*/
d205 3
@


1.6
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d202 4
@


1.5
log
@sync with FreeBSD
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 2
 *	$FreeBSD: uthread_gc.c,v 1.2 1998/09/30 19:17:51 dt Exp $
 *	$OpenBSD: uthread_gc.c,v 1.4 1999/02/01 08:24:42 d Exp $
a40 1
#include <stdlib.h>
d42 2
a43 2
#include <sys/time.h>
#ifdef _THREAD_SAFE
a44 1
#include <pthread_np.h>
d72 1
a72 1
	pthread_set_name_np(_thread_run, "GC");
d80 5
a84 2
		/* Lock the thread list: */
		_lock_thread_list();
d87 2
a88 2
		if (_thread_link_list == _thread_run &&
		    _thread_link_list->nxt == NULL)
d95 5
a99 2
		/* Unlock the thread list: */
		_unlock_thread_list();
a111 6
		/* Point to the first dead thread (if there are any): */
		pthread = _thread_dead;

		/* There is no previous dead thread: */
		pthread_prv = NULL;

d116 3
a118 5
		while (p_stack == NULL && pthread_cln == NULL &&
		    pthread != NULL) {
			/* Save a pointer to the next thread: */
			pthread_nxt = pthread->nxt_dead;

d120 1
a120 1
			if (pthread == _thread_initial)
d122 1
a122 2
				pthread_prv = pthread;

d127 3
a129 18
			    PTHREAD_DETACHED) != 0) {
				/*
				 * Check if there is no previous dead
				 * thread:
				 */
				if (pthread_prv == NULL)
					/*
					 * The dead thread is at the head
					 * of the list: 
					 */
					_thread_dead = pthread_nxt;
				else
					/*
					 * The dead thread is not at the
					 * head of the list: 
					 */
					pthread_prv->nxt_dead =
					    pthread->nxt_dead;
d132 2
a133 3
				 * Check if the stack was not specified by
				 * the caller to pthread_create and has not
				 * been destroyed yet: 
d135 1
a135 6
				if (pthread->attr.stackaddr_attr == NULL &&
				    pthread->stack != NULL) {
					/*
					 * Point to the stack that must
					 * be freed outside the locks:
					 */
a136 1
				}
d143 1
d147 3
a149 8
				 * not destroy it: 
				 */
				pthread_prv = pthread;

				/*
				 * Check if the stack was not specified by
				 * the caller to pthread_create and has not
				 * been destroyed yet: 
d151 1
a151 6
				if (pthread->attr.stackaddr_attr == NULL &&
				    pthread->stack != NULL) {
					/*
					 * Point to the stack that must
					 * be freed outside the locks:
					 */
a152 5

					/*
					 * NULL the stack pointer now
					 * that the memory has been freed: 
					 */
a155 3

			/* Point to the next thread: */
			pthread = pthread_nxt;
d192 3
a194 1
			free(p_stack);
a195 3
			/* Lock the thread list: */
			_lock_thread_list();

d197 2
a198 2
			 * Check if the thread is at the head of the
			 * linked list.
a199 32
			if (_thread_link_list == pthread_cln)
				/* There is no previous thread: */
				_thread_link_list = pthread_cln->nxt;
			else {
				/* Point to the first thread in the list: */
				pthread = _thread_link_list;

				/*
				 * Enter a loop to find the thread in the
				 * linked list before the thread that is
				 * about to be freed.
				 */
				while (pthread != NULL &&
				    pthread->nxt != pthread_cln)
					/* Point to the next thread: */
					pthread = pthread->nxt;

				/* Check that a previous thread was found: */
				if (pthread != NULL) {
					/*
					 * Point the previous thread to
					 * the one after the thread being
					 * freed: 
					 */
					pthread->nxt = pthread_cln->nxt;
				}
			}

			/* Unlock the thread list: */
			_unlock_thread_list();

			/* Free memory allocated for the thread's name: */
a201 5

			/*
			 * Free the memory allocated for the thread
			 * structure.
			 */
a203 1
		
a206 1
#endif /* _THREAD_SAFE */
@


1.4
log
@don't handle signals in the gc thread
@
text
@d33 1
a33 1
 *	$OpenBSD: uthread_gc.c,v 1.3 1998/12/23 22:49:46 d Exp $
d55 1
a61 1
	sigset_t	ss;
d63 6
a68 4
	/* Don't handle signals in this thread */
	sigfillset(&ss);
	if (ret = pthread_sigmask(SIG_BLOCK, &ss, NULL))
		PANIC("Can't block signals in GC thread");
@


1.3
log
@preserve FreeBSD idents
@
text
@d33 1
a33 1
 *	$OpenBSD: uthread_gc.c,v 1.2 1998/12/21 07:39:34 d Exp $
d61 6
@


1.2
log
@memory leak
@
text
@d32 2
a33 2
 *	$Id: uthread_gc.c,v 1.1 1998/11/09 03:13:19 d Exp $
 *	$OpenBSD: uthread_gc.c,v 1.1 1998/11/09 03:13:19 d Exp $
@


1.1
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d32 2
a33 2
 *	$Id: uthread_gc.c,v 1.2 1998/09/30 19:17:51 dt Exp $
 *	$OpenBSD$
d66 1
a66 1
	pthread_set_name_np(_thread_run,"GC");
d267 4
@

