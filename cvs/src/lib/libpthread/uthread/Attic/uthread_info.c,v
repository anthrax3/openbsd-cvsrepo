head	1.12;
access;
symbols
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11;
locks; strict;
comment	@ * @;


1.12
date	2003.03.31.03.50.14;	author marc;	state dead;
branches;
next	1.11;

1.11
date	2002.10.21.23.10.29;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	99.11.25.06.57.04;	author d;	state Exp;
branches;
next	1.8;

1.8
date	99.05.26.00.18.24;	author d;	state Exp;
branches;
next	1.7;

1.7
date	99.02.01.08.23.46;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.01.17.23.58.10;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.01.06.05.29.24;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.12.21.07.43.51;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.11.20.12.13.32;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.19;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.06;	author d;	state Exp;
branches;
next	;


desc
@@


1.12
log
@
Remove unused file.   OpenBSD uses uthread_info_openbsd.c, instead.
This is easier than fixing the strcpy in the file.
@
text
@/*	$OpenBSD: uthread_info.c,v 1.11 2002/10/21 23:10:29 marc Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_info.c,v 1.14 1999/09/29 15:18:38 marcel Exp $
 */
#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include <errno.h>
#include "pthread_private.h"

struct s_thread_info {
	enum pthread_state state;
	char           *name;
};

/* Static variables: */
static const struct s_thread_info thread_info[] = {
	{PS_RUNNING	, "Running"},
	{PS_SIGTHREAD	, "Waiting on signal thread"},
	{PS_MUTEX_WAIT	, "Waiting on a mutex"},
	{PS_COND_WAIT	, "Waiting on a condition variable"},
	{PS_FDLR_WAIT	, "Waiting for a file read lock"},
	{PS_FDLW_WAIT	, "Waiting for a file write lock"},
	{PS_FDR_WAIT	, "Waiting for read"},
	{PS_FDW_WAIT	, "Waiting for write"},
	{PS_FILE_WAIT	, "Waiting for FILE lock"},
	{PS_POLL_WAIT	, "Waiting on poll"},
	{PS_SELECT_WAIT	, "Waiting on select"},
	{PS_SLEEP_WAIT	, "Sleeping"},
	{PS_WAIT_WAIT	, "Waiting process"},
	{PS_SIGSUSPEND	, "Suspended, waiting for a signal"},
	{PS_SIGWAIT	, "Waiting for a signal"},
	{PS_SPINBLOCK	, "Waiting for a spinlock"},
	{PS_JOIN	, "Waiting to join"},
	{PS_SUSPENDED	, "Suspended"},
	{PS_DEAD	, "Dead"},
	{PS_DEADLOCK	, "Deadlocked"},
	{PS_STATE_MAX	, "Not a real state!"}
};

void
_thread_dump_info(void)
{
	struct pthread	*curthread = _get_curthread();
	char            s[512];
	int             fd;
	int             i;
	int             j;
	pthread_t       pthread;
	char		tmpfile[128];
	pq_list_t	*pq_list;

	for (i = 0; i < 100000; i++) { 
		snprintf(tmpfile, sizeof(tmpfile), "/tmp/uthread.dump.%u.%i",
			getpid(), i);
		/* Open the dump file for append and create it if necessary: */
		if ((fd = _thread_sys_open(tmpfile, O_RDWR | O_CREAT | O_EXCL,
			0666)) < 0) {
				/* Can't open the dump file. */
				if (errno == EEXIST)
					continue;
				/*
				 * We only need to continue in case of
				 * EEXIT error. Most other error
				 * codes means that we will fail all
				 * the times.
				 */
				return;
		} else {
			break;
		}
	}
	if (i==100000) {
		/* all 100000 possibilities are in use :( */
		return;
	} else {
		/* Output a header for active threads: */
		strcpy(s, "\n\n=============\nACTIVE THREADS\n\n");
		_thread_sys_write(fd, s, strlen(s));

		/* Enter a loop to report each thread in the global list: */
		TAILQ_FOREACH(pthread, &_thread_list, tle) {
			/* Find the state: */
			for (j = 0; j < (sizeof(thread_info) /
			    sizeof(struct s_thread_info)) - 1; j++)
				if (thread_info[j].state == pthread->state)
					break;
			/* Output a record for the current thread: */
			snprintf(s, sizeof(s),
			    "--------------------\nThread %p (%s) prio %3d state %s [%s:%d]\n",
			    pthread, (pthread->name == NULL) ?
			    "":pthread->name, pthread->base_priority,
			    thread_info[j].name,
			    pthread->fname,pthread->lineno);
			_thread_sys_write(fd, s, strlen(s));

			/* Check if this is the running thread: */
			if (pthread == curthread) {
				/* Output a record for the running thread: */
				strcpy(s, "This is the running thread\n");
				_thread_sys_write(fd, s, strlen(s));
			}
			/* Check if this is the initial thread: */
			if (pthread == _thread_initial) {
				/* Output a record for the initial thread: */
				strcpy(s, "This is the initial thread\n");
				_thread_sys_write(fd, s, strlen(s));
			}
			/* Process according to thread state: */
			switch (pthread->state) {
			/* File descriptor read lock wait: */
			case PS_FDLR_WAIT:
			case PS_FDLW_WAIT:
			case PS_FDR_WAIT:
			case PS_FDW_WAIT:
				/* Write the lock details: */
				snprintf(s, sizeof(s), "fd %d[%s:%d]",
				    pthread->data.fd.fd,
				    pthread->data.fd.fname,
				    pthread->data.fd.branch);
				_thread_sys_write(fd, s, strlen(s));
				if (_thread_fd_table[pthread->data.fd.fd])
				    snprintf(s, sizeof(s), "owner %pr/%pw\n",
					     _thread_fd_table[pthread->data.fd.fd]->r_owner,
					     _thread_fd_table[pthread->data.fd.fd]->w_owner);
				else
				    snprintf(s, sizeof(s), "owner [unknown]\n");

				_thread_sys_write(fd, s, strlen(s));
				break;
			case PS_SIGWAIT:
				snprintf(s, sizeof(s), "sigmask (hi)");
				_thread_sys_write(fd, s, strlen(s));
				for (i = _SIG_WORDS - 1; i >= 0; i--) {
					snprintf(s, sizeof(s), "%08x\n",
					    pthread->sigmask.__bits[i]);
					_thread_sys_write(fd, s, strlen(s));
				}
				snprintf(s, sizeof(s), "(lo)\n");
				_thread_sys_write(fd, s, strlen(s));
				break;

			/*
			 * Trap other states that are not explicitly
			 * coded to dump information: 
			 */
			default:
				/* Nothing to do here. */
				break;
			}
		}

		/* Output a header for ready threads: */
		strcpy(s, "\n\n=============\nREADY THREADS\n\n");
		_thread_sys_write(fd, s, strlen(s));

		/* Enter a loop to report each thread in the ready queue: */
		TAILQ_FOREACH (pq_list, &_readyq.pq_queue, pl_link) {
			TAILQ_FOREACH(pthread, &pq_list->pl_head, pqe) {
				/* Find the state: */
				for (j = 0; j < (sizeof(thread_info) /
				    sizeof(struct s_thread_info)) - 1; j++)
					if (thread_info[j].state == pthread->state)
						break;
				/* Output a record for the current thread: */
				snprintf(s, sizeof(s),
				    "--------------------\nThread %p (%s) prio %3d state %s [%s:%d]\n",
				    pthread, (pthread->name == NULL) ?
				    "":pthread->name, pthread->base_priority,
				    thread_info[j].name,
				    pthread->fname,pthread->lineno);
				_thread_sys_write(fd, s, strlen(s));
			}
		}

		/* Output a header for waiting threads: */
		strcpy(s, "\n\n=============\nWAITING THREADS\n\n");
		_thread_sys_write(fd, s, strlen(s));

		/* Enter a loop to report each thread in the waiting queue: */
		TAILQ_FOREACH (pthread, &_waitingq, pqe) {
			/* Find the state: */
			for (j = 0; j < (sizeof(thread_info) /
			    sizeof(struct s_thread_info)) - 1; j++)
				if (thread_info[j].state == pthread->state)
					break;
			/* Output a record for the current thread: */
			snprintf(s, sizeof(s),
			    "--------------------\nThread %p (%s) prio %3d state %s [%s:%d]\n",
			    pthread, (pthread->name == NULL) ?
			    "":pthread->name, pthread->base_priority,
			    thread_info[j].name,
			    pthread->fname,pthread->lineno);
			_thread_sys_write(fd, s, strlen(s));
		}

		/* Output a header for threads in the work queue: */
		strcpy(s, "\n\n=============\nTHREADS IN WORKQ\n\n");
		_thread_sys_write(fd, s, strlen(s));

		/* Enter a loop to report each thread in the waiting queue: */
		TAILQ_FOREACH (pthread, &_workq, qe) {
			/* Find the state: */
			for (j = 0; j < (sizeof(thread_info) /
			    sizeof(struct s_thread_info)) - 1; j++)
				if (thread_info[j].state == pthread->state)
					break;
			/* Output a record for the current thread: */
			snprintf(s, sizeof(s),
			    "--------------------\nThread %p (%s) prio %3d state %s [%s:%d]\n",
			    pthread, (pthread->name == NULL) ?
			    "":pthread->name, pthread->base_priority,
			    thread_info[j].name,
			    pthread->fname,pthread->lineno);
			_thread_sys_write(fd, s, strlen(s));
		}

		/* Check if there are no dead threads: */
		if (TAILQ_FIRST(&_dead_list) == NULL) {
			/* Output a record: */
			strcpy(s, "\n\nTHERE ARE NO DEAD THREADS\n");
			_thread_sys_write(fd, s, strlen(s));
		} else {
			/* Output a header for dead threads: */
			strcpy(s, "\n\nDEAD THREADS\n\n");
			_thread_sys_write(fd, s, strlen(s));

			/*
			 * Enter a loop to report each thread in the global
			 * dead thread list: 
			 */
			TAILQ_FOREACH(pthread, &_dead_list, dle) {
				/* Output a record for the current thread: */
				snprintf(s, sizeof(s),
				    "Thread %p prio %3d [%s:%d]\n",
				    pthread, pthread->base_priority,
				    pthread->fname,pthread->lineno);
				_thread_sys_write(fd, s, strlen(s));
			}
		}

		/* Output a header for file descriptors: */
		snprintf(s, sizeof(s), "\n\n=============\nFILE DESCRIPTOR TABLE (table size %d)\n\n",_thread_dtablesize);
		_thread_sys_write(fd, s, strlen(s));

		/* Enter a loop to report file descriptor lock usage: */
		for (i = 0; i < _thread_dtablesize; i++) {
			/*
			 * Check if memory is allocated for this file
			 * descriptor: 
			 */
			if (_thread_fd_table[i] != NULL) {
				/* Report the file descriptor lock status: */
				snprintf(s, sizeof(s),
				    "fd[%3d] read owner %p count %d [%s:%d]\n        write owner %p count %d [%s:%d]\n",
					i,
					_thread_fd_table[i]->r_owner,
					_thread_fd_table[i]->r_lockcount,
					_thread_fd_table[i]->r_fname,
					_thread_fd_table[i]->r_lineno,
					_thread_fd_table[i]->w_owner,
					_thread_fd_table[i]->w_lockcount,
					_thread_fd_table[i]->w_fname,
					_thread_fd_table[i]->w_lineno);
				_thread_sys_write(fd, s, strlen(s));
			}
		}

		/* Close the dump file: */
		_thread_sys_close(fd);
	}
	return;
}

/* Set the thread name for debug: */
void
pthread_set_name_np(pthread_t thread, char *name)
{
	/* Check if the caller has specified a valid thread: */
	if (thread != NULL && thread->magic == PTHREAD_MAGIC)
		thread->name = strdup(name);
	return;
}
#endif
@


1.11
log
@
Check for null pointer before deref in info output.   Based upon
a freebsd patch forwarded to me by millert@@ (thanks!).  Change also
applied to uthread_info.c even though we do not use it
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info.c,v 1.10 2001/08/21 19:24:53 fgsch Exp $	*/
@


1.10
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info.c,v 1.9 1999/11/25 06:57:04 d Exp $	*/
d155 7
a161 3
				snprintf(s, sizeof(s), "owner %pr/%pw\n",
				    _thread_fd_table[pthread->data.fd.fd]->r_owner,
				    _thread_fd_table[pthread->data.fd.fd]->w_owner);
@


1.9
log
@keep freebsd's thread info distcint from mine
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d77 1
d131 1
a131 1
			if (pthread == _thread_run) {
@


1.8
log
@sync with FreeBSD
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_info.c,v 1.7 1999/02/01 08:23:46 d Exp $
a38 2
#include <stdlib.h>
#include <stddef.h>
d41 1
a43 2
extern int _thread_sig_statistics[];

d51 21
a71 20
	{PS_RUNNING	, "running"},
	{PS_SIGTHREAD	, "sigthread"},
	{PS_MUTEX_WAIT	, "mutex_wait"},
	{PS_COND_WAIT	, "cond_wait"},
	{PS_FDLR_WAIT	, "fdlr_wait"},
	{PS_FDLW_WAIT	, "fdlw_wait"},
	{PS_FDR_WAIT	, "fdr_wait"},
	{PS_FDW_WAIT	, "fdw_wait"},
	{PS_FILE_WAIT	, "file_wait"},
	{PS_SELECT_WAIT	, "select_wait"},
	{PS_SLEEP_WAIT	, "sleep_wait"},
	{PS_WAIT_WAIT	, "wait_wait"},
	{PS_SIGSUSPEND	, "sigsuspend"},
	{PS_SIGWAIT	, "sigwait"},
	{PS_SPINBLOCK	, "spinblock"},
	{PS_JOIN	, "join"},
	{PS_SUSPENDED	, "suspended"},
	{PS_DEAD	, "dead"},
	{PS_DEADLOCK	, "deadlock"},
	{PS_STATE_MAX	, "xxx"}
a73 17
const static char info_lead[] = "               -";

/* Determine a filename for display purposes: */
static const char *
truncname(const char *name, int maxlen)
{
	int len;

	if (name == NULL)
		name = "(null)";
	len = strlen(name);
	if (len > maxlen)
		return name + len - maxlen;
	else
		return name;
}

d82 2
a83 1
	const char	*state;
d85 27
a111 1
	/* Open either the controlling tty or the dump file */
d113 15
a127 6
	fd = _thread_sys_open(_PATH_TTY, O_WRONLY | O_APPEND);
	if (fd < 0)
		fd = _thread_sys_open(INFO_DUMP_FILE, 
			O_WRONLY | O_APPEND | O_CREAT, 0666);
	if (fd < 0)
		return;
d129 41
a169 1
	/* Display a list of active threads */
d171 6
a176 29
	snprintf(s, sizeof s, 
#ifdef _THREAD_RUSAGE
	    " %8s%c%-11s %2s %5s %-8s %5s %5s %s\n", 
#else
	    " %8s%c%-11s %2s %5s %-8s %s\n", 
#endif
	    "id", ' ',  "state", "pr", "flag", "name",
#ifdef _THREAD_RUSAGE
	    "utime", "stime",
#endif
	    "location");
	_thread_sys_write(fd, s, strlen(s));

	for (pthread = _thread_link_list; pthread != NULL;
	    pthread = pthread->nxt)
	{
		char location[30];

		/* Find last known file:line checkpoint: */
		if (pthread->fname && pthread->state != PS_RUNNING)
			snprintf(location, sizeof location, "%s:%d",
			    truncname(pthread->fname, 21), pthread->lineno);
		else
			location[0] = '\0';

		/* Find the state: */
		for (j = 0; j < (sizeof(thread_info) /
		    sizeof(struct s_thread_info)) - 1; j++)
			if (thread_info[j].state == pthread->state)
d178 25
a202 1
		state = thread_info[j].name;
d204 2
a205 28
		/* Output a record for the current thread: */
		s[0] = 0;
		snprintf(s, sizeof(s), 
#ifdef _THREAD_RUSAGE
		    " %8p%c%-11s %2d %c%c%c%c%c %-8.8s %5.2f %5.2f %s\n",
#else
		    " %8p%c%-11s %2d %c%c%c%c%c %-8.8s %s\n",
#endif
		    (void *)pthread,
		    (pthread == _thread_run)     ? '*' : ' ',
		    state,
		    pthread->base_priority,
		    (pthread->flags & PTHREAD_EXITING)		  ? 'E' :
		    (pthread->flags & PTHREAD_CANCELLING)	  ? 'C' :
		    (pthread->flags & PTHREAD_AT_CANCEL_POINT)	  ? 'c' : ' ',
		    (pthread->attr.flags & PTHREAD_DETACHED)      ? 'D' : ' ',
		    (pthread->attr.flags & PTHREAD_SCOPE_SYSTEM)  ? 'S' : ' ',
		    (pthread->attr.flags & PTHREAD_INHERIT_SCHED) ? 'I' : ' ',
		    (pthread->attr.flags & PTHREAD_NOFLOAT)       ? 'F' : ' ',
		    (pthread->name == NULL) ? "" : pthread->name,
#ifdef _THREAD_RUSAGE
		    pthread->ru_utime.tv_sec + 
			(double)pthread->ru_utime.tv_usec / 1000000.0,
		    pthread->ru_stime.tv_sec + 
			(double)pthread->ru_stime.tv_usec / 1000000.0,
#endif
		    location
		);
d208 14
a221 13
		/* Process according to thread state: */
		switch (pthread->state) {
		/* File descriptor read lock wait: */
		case PS_FDLR_WAIT:
		case PS_FDLW_WAIT:
		case PS_FDR_WAIT:
		case PS_FDW_WAIT:
			/* Write the lock details: */
			snprintf(s, sizeof(s), "%s fd %d [%s:%d]\n",
			    info_lead,
			    pthread->data.fd.fd, 
			    truncname(pthread->data.fd.fname, 32),
			    pthread->data.fd.branch);
d223 20
a242 5
			s[0] = 0;
			snprintf(s, sizeof(s), "%s owner %pr/%pw\n",
			    info_lead,
			    _thread_fd_table[pthread->data.fd.fd]->r_owner,
			    _thread_fd_table[pthread->data.fd.fd]->w_owner);
d244 6
a249 5
			break;
		case PS_SIGWAIT:
			snprintf(s, sizeof(s), "%s sigmask 0x%08lx\n",
			    info_lead,
			    (unsigned long)pthread->sigmask);
d251 3
a253 6
			break;
		case PS_MUTEX_WAIT:
			snprintf(s, sizeof(s), 
			    "%s mutex %p\n",
			    info_lead,
			    pthread->data.mutex);
d255 11
a265 25
			if (pthread->data.mutex) {
				snprintf(s, sizeof(s), 
				    "%s owner %p\n",
				    info_lead,
				    NULL /* (*pthread->data.mutex)->m_owner*/);
				_thread_sys_write(fd, s, strlen(s));
			}
			break;
		case PS_COND_WAIT:
			snprintf(s, sizeof(s), 
			    "%s cond %p\n",
			    info_lead,
			    pthread->data.cond);
			_thread_sys_write(fd, s, strlen(s));
			break;
		case PS_JOIN:
			if (pthread->queue) {
				struct pthread *t;

				/* Locate the thread through its queue: */
				t = (struct pthread*)((
				    (char *)pthread->queue) -
				    offsetof(struct pthread, join_queue));
				snprintf(s, sizeof(s), 
				    "%s thread %p\n", info_lead, t);
a267 26
			break;
		case PS_SLEEP_WAIT:
			{
				struct timeval tv;
				struct timespec current_time;
				struct timespec remaining_time;
				double remain;

				gettimeofday(&tv, NULL);
				TIMEVAL_TO_TIMESPEC(&tv, &current_time);
				timespecsub(&pthread->wakeup_time, 
				    &current_time, &remaining_time);
				remain = remaining_time.tv_sec
					+ (double)remaining_time.tv_nsec / 1e9;
				snprintf(s, sizeof(s), 
				    "%s wake in %f sec\n", 
				    info_lead, remain);
				_thread_sys_write(fd, s, strlen(s));
			}
			break;
		case PS_SELECT_WAIT:
			/* XXX information in pthread->data.select_data */
			break;
		default:
			/* Nothing to do here. */
			break;
a268 1
	}
d270 3
a272 36
	/* Output a header for file descriptors: */
	snprintf(s, sizeof(s), "file descriptor table, size %d\n", 
	    _thread_dtablesize);
	_thread_sys_write(fd, s, strlen(s));

	snprintf(s, sizeof s,
		" %3s %8s %4s %21s %8s %4s %21s\n",
		"fd", "rdowner", "rcnt", "rdcode",
		"wrowner", "wcnt", "wrcode");
	_thread_sys_write(fd, s, strlen(s));

	/* Enter a loop to report file descriptor lock usage: */
	for (i = 0; i < _thread_dtablesize; i++) {
		/*
		 * Check if memory is allocated for this file
		 * descriptor: 
		 */
		char rcode[22], wcode[22];

		if (_thread_fd_table[i] != NULL) {

			/* Find the reader's last file:line: */
			if (_thread_fd_table[i]->r_owner)
				snprintf(rcode, sizeof rcode, "%s:%d", 
				    truncname(_thread_fd_table[i]->r_fname, 16),
				    _thread_fd_table[i]->r_lineno);
			else
				rcode[0] = '\0';

			/* Find the writer's last file:line: */
			if (_thread_fd_table[i]->w_owner)
				snprintf(wcode, sizeof wcode, "%s:%d", 
				    truncname(_thread_fd_table[i]->w_fname, 16),
				    _thread_fd_table[i]->w_lineno);
			else
				wcode[0] = '\0';
d274 21
a294 12
			/* Report the file descriptor lock status: */
			snprintf(s, sizeof(s),
			    " %3d %8p %4d %21s %8p %4d %21s\n",
			    i, 
			    _thread_fd_table[i]->r_owner,
			    _thread_fd_table[i]->r_lockcount,
			    rcode,
			    _thread_fd_table[i]->w_owner,
			    _thread_fd_table[i]->w_lockcount,
			    wcode
			);
			_thread_sys_write(fd, s, strlen(s));
a295 1
	}
d297 2
a298 9
	/* Show signal counter statistics: */
	snprintf(s, sizeof s, "sig:");
	for (i = 0; i < NSIG; i++) {
		char buf[16] = " xx:xxxxx";
		if (_thread_sig_statistics[i]) {
			snprintf(buf, sizeof buf, " %d:%d", i, 
			    _thread_sig_statistics[i]);
			strlcat(s, buf, sizeof s);
		}
a299 5
	strlcat(s, "\n", sizeof s);
	_thread_sys_write(fd, s, strlen(s));

	/* Close the dump file: */
	_thread_sys_close(fd);
d308 1
a308 3
	if (thread != NULL && thread->magic == PTHREAD_MAGIC) {
		if (thread->name != NULL)
			free(thread->name);
a309 1
	}
@


1.7
log
@don't compute resource usage. this speeds things up a lot
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_info.c,v 1.6 1999/01/17 23:58:10 d Exp $
d67 1
d71 1
d156 1
a156 1
		    pthread->pthread_priority,
d212 1
a212 1
				    (*pthread->data.mutex)->m_owner);
@


1.6
log
@show cancellation and exiting flags
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_info.c,v 1.5 1999/01/06 05:29:24 d Exp $
d111 10
a120 2
	snprintf(s, sizeof s, " %8s%c%-11s %2s %5s %-8s %5s %5s %s\n", 
	    "id", ' ',  "state", "pr", "flag", "name", "utime", "stime",
d146 5
a150 1
		    " %8p%c%-11s %2d %c%c%c%c%c %-8s %5.2f %5.2f %s\n",
d163 1
d168 1
@


1.5
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d111 1
a111 1
	snprintf(s, sizeof s, " %8s%c%-11s %2s %4s %-8s %5s %5s %s\n", 
d138 1
a138 1
		    " %8p%c%-11s %2d %c%c%c%c %-8s %5.2f %5.2f %s\n",
d143 3
@


1.4
log
@much nicer SIGINFO display
@
text
@d32 1
d39 1
d73 2
d122 1
a122 1
		if (pthread->fname)
d164 2
a165 1
			snprintf(s, sizeof(s), "      - fd %d [%s:%d]\n",
d171 2
a172 1
			snprintf(s, sizeof(s), "      - owner %pr/%pw\n",
d178 2
a179 1
			snprintf(s, sizeof(s), "      - sigmask 0x%08lx\n",
d183 59
a241 8

			/*
			 * Trap other states that are not explicitly
			 * coded to dump information: 
			 */
			default:
				/* Nothing to do here. */
				break;
@


1.3
log
@sync with freebsd
@
text
@d37 1
d42 2
d51 18
a68 18
	{PS_RUNNING	, "Running"},
	{PS_SIGTHREAD	, "Waiting on signal thread"},
	{PS_MUTEX_WAIT	, "Waiting on a mutex"},
	{PS_COND_WAIT	, "Waiting on a condition variable"},
	{PS_FDLR_WAIT	, "Waiting for a file read lock"},
	{PS_FDLW_WAIT	, "Waiting for a file write lock"},
	{PS_FDR_WAIT	, "Waiting for read"},
	{PS_FDW_WAIT	, "Waiting for write"},
	{PS_FILE_WAIT	, "Waiting for FILE lock"},
	{PS_SELECT_WAIT	, "Waiting on select"},
	{PS_SLEEP_WAIT	, "Sleeping"},
	{PS_WAIT_WAIT	, "Waiting process"},
	{PS_SIGSUSPEND	, "Suspended, waiting for a signal"},
	{PS_SIGWAIT	, "Waiting for a signal"},
	{PS_JOIN	, "Waiting to join"},
	{PS_SUSPENDED	, "Suspended"},
	{PS_DEAD	, "Dead"},
	{PS_STATE_MAX	, "Not a real state!"}
d71 15
d94 1
d102 48
a149 3
	if (fd >= 0) {
		/* Output a header for active threads: */
		strcpy(s, "\n\n=============\nACTIVE THREADS\n\n");
d152 22
a173 15
		/* Enter a loop to report each thread in the global list: */
		for (pthread = _thread_link_list; pthread != NULL;
		    pthread = pthread->nxt) {
			/* Find the state: */
			for (j = 0; j < (sizeof(thread_info) /
			    sizeof(struct s_thread_info)) - 1; j++)
				if (thread_info[j].state == pthread->state)
					break;
			/* Output a record for the current thread: */
			snprintf(s, sizeof(s),
			    "--------------------\nThread %p (%s) prio %3d state %s [%s:%d]\n",
			    pthread, (pthread->name == NULL) ?
			    "":pthread->name, pthread->pthread_priority,
			    thread_info[j].name,
			    pthread->fname,pthread->lineno);
d175 1
a175 36

			/* Check if this is the running thread: */
			if (pthread == _thread_run) {
				/* Output a record for the running thread: */
				strcpy(s, "This is the running thread\n");
				_thread_sys_write(fd, s, strlen(s));
			}
			/* Check if this is the initial thread: */
			if (pthread == _thread_initial) {
				/* Output a record for the initial thread: */
				strcpy(s, "This is the initial thread\n");
				_thread_sys_write(fd, s, strlen(s));
			}
			/* Process according to thread state: */
			switch (pthread->state) {
			/* File descriptor read lock wait: */
			case PS_FDLR_WAIT:
			case PS_FDLW_WAIT:
			case PS_FDR_WAIT:
			case PS_FDW_WAIT:
				/* Write the lock details: */
				snprintf(s, sizeof(s), "fd %d[%s:%d]",
				    pthread->data.fd.fd,
				    pthread->data.fd.fname,
				    pthread->data.fd.branch);
				_thread_sys_write(fd, s, strlen(s));
				snprintf(s, sizeof(s), "owner %pr/%pw\n",
				    _thread_fd_table[pthread->data.fd.fd]->r_owner,
				    _thread_fd_table[pthread->data.fd.fd]->w_owner);
				_thread_sys_write(fd, s, strlen(s));
				break;
			case PS_SIGWAIT:
				snprintf(s, sizeof(s), "sigmask 0x%08lx\n",
				    (unsigned long)pthread->sigmask);
				_thread_sys_write(fd, s, strlen(s));
				break;
a183 1
			}
d185 38
d224 11
a234 8
		/* Check if there are no dead threads: */
		if (_thread_dead == NULL) {
			/* Output a record: */
			strcpy(s, "\n\nTHERE ARE NO DEAD THREADS\n");
			_thread_sys_write(fd, s, strlen(s));
		} else {
			/* Output a header for dead threads: */
			strcpy(s, "\n\nDEAD THREADS\n\n");
a235 14

			/*
			 * Enter a loop to report each thread in the global
			 * dead thread list: 
			 */
			for (pthread = _thread_dead; pthread != NULL;
			    pthread = pthread->nxt_dead) {
				/* Output a record for the current thread: */
				snprintf(s, sizeof(s),
				    "Thread %p prio %3d [%s:%d]\n",
				    pthread, pthread->pthread_priority,
				    pthread->fname,pthread->lineno);
				_thread_sys_write(fd, s, strlen(s));
			}
d237 1
d239 8
a246 25
		/* Output a header for file descriptors: */
		snprintf(s, sizeof(s), "\n\n=============\nFILE DESCRIPTOR TABLE (table size %d)\n\n",_thread_dtablesize);
		_thread_sys_write(fd, s, strlen(s));

		/* Enter a loop to report file descriptor lock usage: */
		for (i = 0; i < _thread_dtablesize; i++) {
			/*
			 * Check if memory is allocated for this file
			 * descriptor: 
			 */
			if (_thread_fd_table[i] != NULL) {
				/* Report the file descriptor lock status: */
				snprintf(s, sizeof(s),
				    "fd[%3d] read owner %p count %d [%s:%d]\n        write owner %p count %d [%s:%d]\n",
					i,
					_thread_fd_table[i]->r_owner,
					_thread_fd_table[i]->r_lockcount,
					_thread_fd_table[i]->r_fname,
					_thread_fd_table[i]->r_lineno,
					_thread_fd_table[i]->w_owner,
					_thread_fd_table[i]->w_lockcount,
					_thread_fd_table[i]->w_fname,
					_thread_fd_table[i]->w_lineno);
				_thread_sys_write(fd, s, strlen(s));
			}
d248 3
d252 2
a253 3
		/* Close the dump file: */
		_thread_sys_close(fd);
	}
d262 3
a264 1
	if (thread != NULL && thread->magic == PTHREAD_MAGIC)
d266 1
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d99 4
a102 4
				pthread, (pthread->name == NULL) ?
				"":pthread->name, pthread->pthread_priority,
				thread_info[j].name,
				pthread->fname,pthread->lineno);
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d60 1
d71 1
a71 1
	char            s[128];
d89 2
a90 1
		for (pthread = _thread_link_list; pthread != NULL; pthread = pthread->nxt) {
d92 2
a93 1
			for (j = 0; j < (sizeof(thread_info) / sizeof(struct s_thread_info)) - 1; j++)
d97 6
a102 2
			sprintf(s, "--------------------\nThread %p (%s) prio %3d state %s [%s:%d]\n",
				pthread, (pthread->name == NULL) ? "":pthread->name, pthread->pthread_priority, thread_info[j].name,pthread->fname,pthread->lineno);
d125 8
a132 3
				sprintf(s, "fd %d[%s:%d]", pthread->data.fd.fd, pthread->data.fd.fname, pthread->data.fd.branch);
				_thread_sys_write(fd, s, strlen(s));
				sprintf(s, "owner %pr/%pw\n", _thread_fd_table[pthread->data.fd.fd]->r_owner, _thread_fd_table[pthread->data.fd.fd]->w_owner);
d136 2
a137 1
				sprintf(s, "sigmask 0x%08lx\n", (unsigned long)pthread->sigmask);
d165 2
a166 1
			for (pthread = _thread_dead; pthread != NULL; pthread = pthread->nxt) {
d168 4
a171 1
				sprintf(s, "Thread %p prio %3d [%s:%d]\n", pthread, pthread->pthread_priority,pthread->fname,pthread->lineno);
d188 2
a189 1
				sprintf(s, "fd[%3d] read owner %p count %d [%s:%d]\n        write owner %p count %d [%s:%d]\n",
@

