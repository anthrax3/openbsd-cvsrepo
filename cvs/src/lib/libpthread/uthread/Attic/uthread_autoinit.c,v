head	1.13;
access;
symbols
	OPENBSD_5_2:1.12.0.40
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.38
	OPENBSD_5_0:1.12.0.36
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.34
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.32
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.28
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.30
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.26
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.24
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.22
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.20
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.18
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.16
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.14
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.12
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.10
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.8
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.6
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.4
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12;
locks; strict;
comment	@ * @;


1.13
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.12;

1.12
date	2003.01.31.18.48.03;	author marc;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.31.04.46.17;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.25;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.24.18.39.46;	author pefo;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.06.07.14.16;	author d;	state Exp;
branches;
next	1.7;

1.7
date	99.11.25.07.01.32;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.03.10.10.05.39;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.02.02.01.36.00;	author imp;	state Exp;
branches;
next	1.4;

1.4
date	99.01.10.23.07.59;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.12.23.22.43.05;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.21.07.45.12;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.12.10.00.33.54;	author d;	state Exp;
branches;
next	;


desc
@@


1.13
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*
 * David Leonard, 1998. Public Domain. <david.leonard@@csee.uq.edu.au>
 *
 * $OpenBSD: uthread_autoinit.c,v 1.12 2003/01/31 18:48:03 marc Exp $
 */


#include <stdio.h>
#include <pthread.h>
#include "pthread_private.h"

/*
 * Use C++'s static instance constructor to initialise threads.
 */
#ifdef __cplusplus
class Init {
public:
	Init() { 
		_thread_init();
	}
};
Init _thread_initialiser;
#endif /* C++ */

/*
 * This construct places the function in the __CTOR_LIST__ entry in the
 * object, and later the collect2 stage of linkage will inform __main (from
 * libgcc.a) to call it.
 */
#if defined(__GNUC__)
extern void _thread_init_constructor(void) __attribute__((constructor));

void
_thread_init_constructor()
{
	_thread_init();
}
#endif /* GNU C */

/*
 * Dummy symbol referenced by uthread_init.o so this compilation unit 
 * is always loaded from archives.
 */
int _thread_autoinit_dummy_decl = 0;

@


1.12
log
@
bad marc, commited crap to shut gcc up.   Remove the crap.
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_autoinit.c,v 1.11 2003/01/31 04:46:17 marc Exp $
@


1.11
log
@
Create a siginfo_t for thread-to-thread kill.
Clean up (compiler warning elimination).   Compile check options added
but commented out as they have not been checked on all architectures, yet.
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_autoinit.c,v 1.10 2002/02/16 21:27:25 millert Exp $
a31 1
extern void _GLOBAL_$I$_thread_init_constructor(void);
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_autoinit.c,v 1.9 2002/01/24 18:39:46 pefo Exp $
d7 1
a11 10
__BEGIN_DECLS
extern void _thread_init(void);
__END_DECLS

#ifdef DEBUG
#define init_debug(m)	stderr_debug( "[init method: " m "]\n")
#else
#define init_debug(m)	/* nothing */
#endif

a18 1
		init_debug("C++");
d26 3
a28 2
 * The a.out ld.so dynamic linker calls the function
 * at symbol ".init" if it exists, just after linkage.
d30 3
a32 7
extern void _thread_dot_init(void) asm(".init");
void 
_thread_dot_init()
{ 
	init_debug("a.out .init");
	_thread_init();
}
a33 10
/*
 * A GNU C installation may know how to automatically run
 * constructors for other architectures. (It doesn't matter if 
 * we initialise multiple times.)  This construct places
 * the function in the __CTOR_LIST__ entry in the object, and later
 * the collect2 stage of linkage will inform __main (from libgcc.a)
 * to call it.
 */
#if defined(__GNUC__) /* && defined(notyet) */ /* internal compiler error??? */
void _thread_init_constructor(void) __attribute__((constructor));
a36 1
	init_debug("GNU constructor");
@


1.9
log
@remove old style init used by mips. uses _thread_init_constructor now
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_autoinit.c,v 1.8 2000/01/06 07:14:16 d Exp $
d12 1
a12 1
extern void _thread_init __P((void));
d39 1
a39 1
extern void _thread_dot_init __P((void)) asm(".init");
d56 1
a56 1
void _thread_init_constructor __P((void)) __attribute__((constructor));
@


1.8
log
@/* in comment
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_autoinit.c,v 1.7 1999/11/25 07:01:32 d Exp $
a47 16
 * The GNU ELF loader will place a function called _init
 * found in the .dynamic section into the _INIT field. This then gets
 * automatically run by GNU ELF's ld.so.
 */
#ifdef __mips__
extern int _init() __attribute__((constructor,section (".dynamic")));
int 
_init()
{ 
	init_debug("elf _init");
	_thread_init();
	return 0; 
}
#endif /* __mips__ */

/*
d70 1
@


1.7
log
@sync with FreeBSD
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_autoinit.c,v 1.6 1999/03/10 10:05:39 d Exp $
d71 1
a71 1
#if defined(__GNUC__) /* && defined(notyet) /* internal compiler error??? */
@


1.6
log
@nicer debugging; _GNUC_ -> __GNUC__
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_autoinit.c,v 1.5 1999/02/02 01:36:00 imp Exp $
d52 1
a52 1
#ifdef pmax
d61 1
a61 1
#endif /* mips */
d71 1
a71 1
#ifdef __GNUC__
d83 1
a83 1
 * is always loaded.
@


1.5
log
@arc fixes for libc_r
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_autoinit.c,v 1.4 1999/01/10 23:07:59 d Exp $
d16 1
a16 1
#define init_debug(m)	stderr_debug(m)
d28 1
a28 1
		init_debug("init: C++\n");
d43 1
a43 1
	init_debug("init: a.out .init\n");
d57 1
a57 1
	init_debug("init: elf _init\n");
d71 1
a71 1
#ifdef _GNUC_
d76 1
a76 1
	init_debug("init: GNU constructor");
@


1.4
log
@add some debug msgs; clean
@
text
@d4 1
a4 1
 * $OpenBSD$
d52 1
a52 1
#ifdef mips
@


1.3
log
@rename linkage variable to match freebsd
@
text
@d1 5
d11 1
d13 7
a20 1
#ifdef __cplusplus
d22 1
a22 1
 * Use C++ static initialiser
d24 1
d27 4
a30 1
	Init() { _thread_init(); }
d36 2
a37 1
 * a.out ld.so initialisation
d43 1
a46 1
#ifdef mips
d48 3
a50 1
 * elf ld.so initialisation
d52 1
d57 1
a62 1
#ifdef _GNUC_
d64 6
a69 1
 * GNU CTOR_LIST constructor
d71 1
d76 1
@


1.2
log
@add variable to force linkage
@
text
@d58 1
a58 1
int _thread_autoinit_hook = 0;
@


1.1
log
@split automatic init into own file
@
text
@d54 5
@

