head	1.13;
access;
symbols
	OPENBSD_5_2:1.12.0.10
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.10.0.10
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.12
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.13
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.12;

1.12
date	2010.07.13.03.10.29;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.27.03.14.28;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.27.12.59.24;	author kurt;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.26.14.18.28;	author kurt;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.22.19.04.33;	author kurt;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.22.00.24.14;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	99.11.25.07.01.34;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.05.26.00.18.23;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.06.05.29.23;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.19;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.00;	author d;	state Exp;
branches;
next	;


desc
@@


1.13
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_execve.c,v 1.12 2010/07/13 03:10:29 guenther Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_execve.c,v 1.8 1999/08/28 00:03:30 peter Exp $
 */
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int 
execve(const char *name, char *const * argv, char *const * envp)
{
	struct pthread	*curthread = _get_curthread();
	int		flags;
	int             i;
	int             ret;
	int		err;
	struct sigaction act;
	struct itimerval itimer;
	struct itimerval oitimer;
	sigset_t	oset;

	/* Disable the interval timer: */
	itimer.it_interval.tv_sec  = 0;
	itimer.it_interval.tv_usec = 0;
	itimer.it_value.tv_sec     = 0;
	itimer.it_value.tv_usec    = 0;
	setitimer(_ITIMER_SCHED_TIMER, &itimer, &oitimer);

	/*
	 * Enter a loop to set all file descriptors to blocking
	 * if they were not created as non-blocking:
	 */
	for (i = 0; i < _thread_max_fdtsize; i++) {
		/* Check if this file descriptor is in use: */
		if (_thread_fd_table[i] != NULL &&
		    _thread_fd_table[i]->status_flags != NULL &&
		    !(_thread_fd_table[i]->status_flags->flags & O_NONBLOCK)) {
			/* Skip if the close-on-exec flag is set */
			flags = _thread_sys_fcntl(i, F_GETFD, NULL);
			if ((flags & FD_CLOEXEC) != 0)
				continue;	/* don't bother, no point */
			/* Get the current flags: */
			flags = _thread_sys_fcntl(i, F_GETFL, NULL);
			/* Clear the nonblocking file descriptor flag: */
			_thread_sys_fcntl(i, F_SETFL, flags & ~O_NONBLOCK);
		}
	}

#define RESET_SIGNAL(sig) \
	(_thread_sigact[(sig) - 1].sa_handler == SIG_IGN && \
	_thread_sys_sigaction((sig), &_thread_sigact[(sig) - 1], NULL) != 0)
	
	/* Reset the behavior for the signals that the library uses */
	if (RESET_SIGNAL(_SCHED_SIGNAL) ||
	    RESET_SIGNAL(SIGINFO) ||
	    RESET_SIGNAL(SIGCHLD))
		PANIC("Cannot reset signal handlers");

	/* Set the signal mask: */
	_thread_sys_sigprocmask(SIG_SETMASK, &curthread->sigmask, &oset);

	/* Execute the process: */
	ret = _thread_sys_execve(name, argv, envp);
	err = errno;

	/* execve failed; try to restore the state the thread library needs */

#define REINIT_SIGNAL(sig) \
	(_thread_sigact[(sig) - 1].sa_handler == SIG_IGN && \
	_thread_sys_sigaction((sig), &act, NULL) != 0)

	_thread_sys_sigprocmask(SIG_SETMASK, &oset, NULL);
	sigfillset(&act.sa_mask);
	act.sa_handler = (void (*) (int)) _thread_sig_handler;
	act.sa_flags = SA_SIGINFO;
	if (REINIT_SIGNAL(_SCHED_SIGNAL) ||
	    REINIT_SIGNAL(SIGINFO) ||
	    REINIT_SIGNAL(SIGCHLD))
		PANIC("Cannot reinitialize signal handlers");
	_thread_nonblock_fds();
	setitimer(_ITIMER_SCHED_TIMER, &oitimer, NULL);

	/* Return the completion status: */
	errno = err;
	return (ret);
}
#endif
@


1.12
log
@Fix PR 6376: restore more thread library state if execve fails,
including the scheduling timer, sigmask, fd nonblocking status, and
handling of the signals used by the thread library.

ok marc@@, additional testing by ajacoutot@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_execve.c,v 1.11 2010/06/27 03:14:28 guenther Exp $	*/
@


1.11
log
@Instead of (manually) closing the _thread_kern_pipe before calling
execve(), just set the close-on-exec flag.  Fixes PRs 6183 and 6376.
ok marc@@, "seems clearly better" tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_execve.c,v 1.10 2007/04/27 12:59:24 kurt Exp $	*/
d49 1
a50 1
	struct sigaction oact;
d52 2
d60 1
a60 1
	setitimer(_ITIMER_SCHED_TIMER, &itimer, NULL);
d82 9
a90 26
	/* Enter a loop to adopt the signal actions for the running thread: */
	for (i = 1; i < NSIG; i++) {
		/* Check for signals which cannot be caught: */
		if (i == SIGKILL || i == SIGSTOP) {
			/* Don't do anything with these signals. */
		} else {
			/* Check if ignoring this signal: */
			if (_thread_sigact[i - 1].sa_handler == SIG_IGN) {
				/* Continue to ignore this signal: */
				act.sa_handler = SIG_IGN;
			} else {
				/* Use the default handler for this signal: */
				act.sa_handler = SIG_DFL;
			}

			/* Copy the mask and flags for this signal: */
			act.sa_mask = _thread_sigact[i - 1].sa_mask;
			act.sa_flags = _thread_sigact[i - 1].sa_flags;

			/* Ensure the scheduling signal is masked: */
			sigaddset(&act.sa_mask, _SCHED_SIGNAL);

			/* Change the signal action for the process: */
			_thread_sys_sigaction(i, &act, &oact);
		}
	}
d93 1
a93 1
	_thread_sys_sigprocmask(SIG_SETMASK, &curthread->sigmask, NULL);
d97 18
d117 1
@


1.10
log
@Use rlimit nofiles max to size fd/fdp tables instead of cur. Fixes
applications that increase nofiles using setrlimit(2). ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_execve.c,v 1.9 2006/09/26 14:18:28 kurt Exp $	*/
a58 4

	/* Close the pthread kernel pipe: */
	_thread_sys_close(_thread_kern_pipe[0]);
	_thread_sys_close(_thread_kern_pipe[1]);
@


1.9
log
@Part 2 of file descriptor race and deadlock corrections.

Adjust design of file descriptor table to eliminate races
with both opening and closing of file descriptor entries
and eliminates one class of deadlocks. One nice side effect
of this change in design should be better performance for
applications that open and close many file descriptors due
to reduced fd_table_lock contention and fd entry reuse.

- Add entry states to manage use of entry and eliminate
some closing races. fd entries are not deallocated upon
close() now.
- Call _thread_fd_table_init with one of five discreet
modes to properly initialize an entry and manage the
state transition to open.
- When closing an entry hold the entry spinlock locked
across the state transition and the _thread_sys_close
call to close another race.
- Introduce a new lock type FD_RDWR_CLOSE that transitions
either a closed entry or an open entry into closing state
and then waits for a RDWR lock so that the lock queue can
unwind normally. All subsequent fd lock attempts for that
entry are rejected with EBADF until the fd is fully closed,
or reopened by dup2(). Once a thread holds the FD_RDWR_LOCK
it is safe to close() it or dup2() on it.
- When a thread creates a new fd there is a window of time
when another thread could attempt to use the fd before the
creating thread has initialized the entry for it. This can
result in improper status_flags for the entry, so record
the entries init mode, detect when this has happened and
correct the status_flags when needed.

reviewed by marc@@ & brad@@, tested by several, okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_execve.c,v 1.8 2006/09/22 19:04:33 kurt Exp $	*/
d68 1
a68 1
	for (i = 0; i < _thread_dtablesize; i++) {
@


1.8
log
@Part 1 of file descriptor race and deadlock corrections.

File status flags should be shared for dup'ed file descriptors.
However fd_table_entry's should not be shared for dup'ed file
descriptors so they can be independently be closed without
interfering with dup'ed fd's.

- split out file status flags into its own structure
fs_flags to manage sharing of status flags between
dup'ed file descriptors.
- when duplicating a fd, initialize a new fd_table_entry
for the new fd, but share the status flags via status_flags.
- consolidate the code that sets the underlying system fd
to be non-blocking to a new function _thread_fs_flags_init()
- consolidate the code that sets the underlying system
fd back to blocking into a new function _thread_fs_flags_replace()

This change is needed as a prerequisite to the coming race
and deadlock corrections. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_execve.c,v 1.7 2003/10/22 00:24:14 brad Exp $	*/
d71 2
a72 1
			!(_thread_fd_table[i]->status_flags->flags & O_NONBLOCK)) {
@


1.7
log
@When about to do an execve(), don't bother resetting the O_NONBLOCK flag
on any file descriptors that have the close-on-exec flag set.
from FreeBSD

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_execve.c,v 1.6 2001/08/21 19:24:53 fgsch Exp $	*/
d71 1
a71 1
			!(_thread_fd_table[i]->flags & O_NONBLOCK)) {
@


1.6
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_execve.c,v 1.5 1999/11/25 07:01:34 d Exp $	*/
d72 4
@


1.5
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
d107 1
a107 1
	_thread_sys_sigprocmask(SIG_SETMASK, &_thread_run->sigmask, NULL);
@


1.4
log
@sync with FreeBSD
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_execve.c,v 1.3 1999/01/06 05:29:23 d Exp $
d96 3
@


1.3
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d56 1
a56 1
	setitimer(ITIMER_VIRTUAL, &itimer, NULL);
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d32 1
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d100 1
a100 1
	/* Execute the process: */
@

