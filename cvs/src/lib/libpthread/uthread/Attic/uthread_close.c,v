head	1.16;
access;
symbols
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.12
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.8
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.6
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.11.0.12
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.10
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.8
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.4
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10;
locks; strict;
comment	@ * @;


1.16
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.15;

1.15
date	2009.12.06.17.54.59;	author kurt;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.27.12.59.24;	author kurt;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.26.14.18.28;	author kurt;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.22.19.04.33;	author kurt;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.23.20.03.54;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.14.03.58.42;	author marc;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.04.22.14.27;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.04.05.52.34;	author d;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.06.07.14.28;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.11.25.07.01.33;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.06.09.07.16.16;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.01.17.23.57.27;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.06.05.29.22;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.18;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.56;	author d;	state Exp;
branches;
next	;


desc
@@


1.16
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_close.c,v 1.15 2009/12/06 17:54:59 kurt Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_close.c,v 1.7 1999/08/28 00:03:26 peter Exp $
 */
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int
close(int fd)
{
	int		ret;

	/* This is a cancelation point: */
	_thread_enter_cancellation_point();

	if ((fd < 0) || (fd >= _thread_max_fdtsize) ||
	    (fd == _thread_kern_pipe[0]) || (fd == _thread_kern_pipe[1])) {
		errno = EBADF;
		ret = -1;
	} else if ((ret = _FD_LOCK(fd, FD_RDWR_CLOSE, NULL)) != -1) {
		/*
		 * We need to hold the entry spinlock till after
		 * _thread_sys_close() to stop races caused by the
		 * fd state transition.
		 */
		_thread_kern_sig_defer();

		_thread_fd_entry_close(fd);

		/* Close the file descriptor: */
		ret = _thread_sys_close(fd);

		_thread_kern_sig_undefer();

		_FD_UNLOCK(fd, FD_RDWR_CLOSE);
	}

	/* No longer in a cancellation point: */
	_thread_leave_cancellation_point();

	return (ret);
}
#endif
@


1.15
log
@Make internal file descriptor handling async-signal safe by eliminating
the use of spinlocks and malloc. All needed memory is allocated upfront
and _thread_kern_sig_defer/undefer() is now used to protect critical
sections. okay guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.14 2007/04/27 12:59:24 kurt Exp $	*/
@


1.14
log
@Use rlimit nofiles max to size fd/fdp tables instead of cur. Fixes
applications that increase nofiles using setrlimit(2). ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.13 2006/09/26 14:18:28 kurt Exp $	*/
d60 1
a60 1
		_SPINLOCK(&_thread_fd_table[fd]->lock);
d67 1
a67 1
		_SPINUNLOCK(&_thread_fd_table[fd]->lock);
@


1.13
log
@Part 2 of file descriptor race and deadlock corrections.

Adjust design of file descriptor table to eliminate races
with both opening and closing of file descriptor entries
and eliminates one class of deadlocks. One nice side effect
of this change in design should be better performance for
applications that open and close many file descriptors due
to reduced fd_table_lock contention and fd entry reuse.

- Add entry states to manage use of entry and eliminate
some closing races. fd entries are not deallocated upon
close() now.
- Call _thread_fd_table_init with one of five discreet
modes to properly initialize an entry and manage the
state transition to open.
- When closing an entry hold the entry spinlock locked
across the state transition and the _thread_sys_close
call to close another race.
- Introduce a new lock type FD_RDWR_CLOSE that transitions
either a closed entry or an open entry into closing state
and then waits for a RDWR lock so that the lock queue can
unwind normally. All subsequent fd lock attempts for that
entry are rejected with EBADF until the fd is fully closed,
or reopened by dup2(). Once a thread holds the FD_RDWR_LOCK
it is safe to close() it or dup2() on it.
- When a thread creates a new fd there is a window of time
when another thread could attempt to use the fd before the
creating thread has initialized the entry for it. This can
result in improper status_flags for the entry, so record
the entries init mode, detect when this has happened and
correct the status_flags when needed.

reviewed by marc@@ & brad@@, tested by several, okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.12 2006/09/22 19:04:33 kurt Exp $	*/
d50 1
a50 1
	if ((fd < 0) || (fd >= _thread_dtablesize) ||
@


1.12
log
@Part 1 of file descriptor race and deadlock corrections.

File status flags should be shared for dup'ed file descriptors.
However fd_table_entry's should not be shared for dup'ed file
descriptors so they can be independently be closed without
interfering with dup'ed fd's.

- split out file status flags into its own structure
fs_flags to manage sharing of status flags between
dup'ed file descriptors.
- when duplicating a fd, initialize a new fd_table_entry
for the new fd, but share the status flags via status_flags.
- consolidate the code that sets the underlying system fd
to be non-blocking to a new function _thread_fs_flags_init()
- consolidate the code that sets the underlying system
fd back to blocking into a new function _thread_fs_flags_replace()

This change is needed as a prerequisite to the coming race
and deadlock corrections. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.11 2003/12/23 20:03:54 marc Exp $	*/
d54 10
a63 7
	} else if (_thread_fd_table[fd] == NULL)
		/* unknown to thread kernel, let system handle the close */
		ret = _thread_sys_close(fd);
	else if ((ret = _FD_LOCK(fd, FD_RDWR, NULL)) == 0) {
		/* XXX: Assumes well behaved threads. */
		/* XXX: Defer real close to avoid race condition */
		_thread_fd_table_remove(fd);
d66 4
@


1.11
log
@
Based upon a freebsd change:
If an application closes one of its stdio descriptors (0..2),
an excessive close() on one of these descriptors would cause
a memory for this descriptor to be allocated in the internal
descriptor table.  When this descriptor gets used again, e.g.
through the call to open() or socket(), the descriptor would
be erroneously left in the blocking mode, and the whole
 application would get stuck on a blocking operation, e.g.,
in accept(2).

but changed to not eat fds when a file that the thread kernel doesn't
know about is closed.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.10 2003/02/14 03:58:42 marc Exp $	*/
a37 2
#include <fcntl.h>
#include <sys/stat.h>
a44 1
	int		flags;
a45 1
	struct stat	sb;
a57 34
		/*
		 * Check if the file should be left as blocking.
		 *
		 * This is so that the file descriptors shared with a parent
		 * process aren't left set to non-blocking if the child
		 * closes them prior to exit.  An example where this causes
		 * problems with /bin/sh is when a child closes stdin.
		 *
		 * Setting a file as blocking causes problems if a threaded
		 * parent accesses the file descriptor before the child exits.
		 * Once the threaded parent receives a SIGCHLD then it resets
		 * all of its files to non-blocking, and so it is then safe
		 * to access them.
		 *
		 * Pipes are not set to blocking when they are closed, as
		 * the parent and child will normally close the file
		 * descriptor of the end of the pipe that they are not
		 * using, which would then cause any reads to block
		 * indefinitely.
		 *
		 * Files that we cannot fstat are probably not regular
		 * so we don't bother with them.
		 */

		if ((_thread_sys_fstat(fd, &sb) == 0) && 
		    ((S_ISREG(sb.st_mode) || S_ISCHR(sb.st_mode)) &&
		    (_thread_fd_table[fd]->flags & O_NONBLOCK) == 0))
		{
			/* Get the current flags: */
			flags = _thread_sys_fcntl(fd, F_GETFL, NULL);
			/* Clear the nonblocking file descriptor flag: */
			_thread_sys_fcntl(fd, F_SETFL, flags & ~O_NONBLOCK);
		}

@


1.10
log
@
fix bug that would leave an FD locked if dup'd, then closed.
Also, for safety lock the _thread_fd_table when removing entries.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.9 2003/02/04 22:14:27 marc Exp $	*/
d54 2
a55 4
	if ((fd == _thread_kern_pipe[0]) || (fd == _thread_kern_pipe[1])) {
		/*
		 * Don't allow silly programs to close the kernel pipe.
		 */
d58 3
a60 5
	}
	/*
	 * Lock the file descriptor while the file is closed and get
	 * the file descriptor status:
	 */
@


1.9
log
@
Part 1 of thread fd handling fixes.  In the new scheme fd_table_entries
for dup-ed fds are shared to ensure proper flag handling.  A refcnt
was added to control when entries should be freed.  Specific changes:

close: don't free entry unless refcnt is zero
dup: rewrite to use new function _thread_fd_table_dup
dup2: rewrite to use new function _thread_fd_table_dup
fcntl: use _thread_fd_table_dup
uthread_fd: initialize thread fd table, searching for dup-ed fds.  Add
function to share _thread_fd_table entries when an fd is dup-ed.
uthread_init: make it readable.   Call fd init functions.

All current regression tests plus the mysql torture test pass.  The
new stdfiles regression test fails (I/O redirection problem). Part
2 is intended to fix that problem
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.8 2000/10/04 05:52:34 d Exp $	*/
a49 1
	struct fd_table_entry	*entry;
d102 1
a102 5
		entry = _thread_fd_table[fd];
		_thread_fd_table[fd] = NULL;
		if (--entry->refcnt == 0)
			free(entry);

@


1.8
log
@if fstat fails fails, as it will on some sockets, close anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.7 2000/01/06 07:14:28 d Exp $	*/
d105 2
a106 1
		free(entry);
@


1.7
log
@unused variable
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.6 1999/11/25 07:01:33 d Exp $	*/
d66 1
a66 2
	else if (((ret = _FD_LOCK(fd, FD_RDWR, NULL)) == 0) &&
	    ((ret = _thread_sys_fstat(fd, &sb)) == 0)) {
d86 3
d90 5
a94 1
		if ((S_ISREG(sb.st_mode) || S_ISCHR(sb.st_mode)) && (_thread_fd_table[fd]->flags & O_NONBLOCK) == 0) {
@


1.6
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a48 1
	int		status;
@


1.5
log
@document cancellation point handling a bit better
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_close.c,v 1.4 1999/01/17 23:57:27 d Exp $
d35 1
d49 1
d51 1
d56 13
a68 5
	/* Lock the file descriptor while the file is closed: */
	if ((ret = _FD_LOCK(fd, FD_RDWR, NULL)) == 0) {
		/* Get file descriptor status. */
		_thread_sys_fstat(fd, &sb);

d96 6
a103 3

		free(_thread_fd_table[fd]);
		_thread_fd_table[fd] = NULL;
@


1.4
log
@pthread_cancel() and cancellation points
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_close.c,v 1.3 1999/01/06 05:29:22 d Exp $
d49 1
d51 1
d90 2
d93 1
@


1.3
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d49 1
d88 1
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d32 1
@


1.1
log
@experimental threaded libc - kernel only
@
text
@a45 1
	int		status;
@

