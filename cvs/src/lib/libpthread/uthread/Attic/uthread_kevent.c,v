head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.20
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.18
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.16
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.6;

1.6
date	2011.09.13.23.56.00;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.03.02.59.36;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.19.05.27.03;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.08.17.08.07;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.23.50.34;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.7
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_kevent.c,v 1.6 2011/09/13 23:56:00 fgsch Exp $	*/

/*-
 * Copyright (c) 2000 Jonathan Lemon <jlemon@@flugsvamp.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_kevent.c,v 1.6 2001/12/08 00:53:37 sobomax Exp $
 */

#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/event.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int 
kevent(int kq, const struct kevent *changelist, int nchanges,
    struct kevent *eventlist, int nevents, const struct timespec *timeout)
{
	struct pthread	*curthread = _get_curthread();
	struct timespec nullts = { 0, 0 };
	int rc;

	/* Set the wake up time */
	_thread_kern_set_timeout(timeout);

	rc = _thread_sys_kevent(kq, changelist, nchanges,
	    eventlist, nevents, &nullts);
	if (rc == 0 && eventlist != NULL && nevents > 0 && (timeout == NULL ||
	    timeout->tv_sec != 0 || timeout->tv_nsec != 0)) {
		/* Save the socket file descriptor: */
		curthread->data.fd.fd = kq;
		curthread->data.fd.fname = __FILE__;
		curthread->data.fd.branch = __LINE__;

		do {
			/* Reset the interrupted and timeout flags: */
			curthread->interrupted = 0;
			curthread->closing_fd = 0;
			curthread->timeout = 0;

			_thread_kern_sched_state(PS_KEVENT_WAIT,
			    __FILE__, __LINE__);

			if (curthread->interrupted) {
				errno = EINTR;
				rc = -1;
				break;
			} else if (curthread->closing_fd) {
				errno = EBADF;
				rc = -1;
				break;
			}
			rc = _thread_sys_kevent(kq, NULL, 0,
			    eventlist, nevents, &nullts);
		} while (rc == 0 && curthread->timeout == 0);
	}
	return (rc);
}
#endif
@


1.6
log
@For threads in PS_FDR_WAIT state, check SA_RESTART before marking it as
interrupted, thus simulating the system call restart behaviour in the
non-pthreads case.
Add a state for kevent since it shouldn't be restarted regardless of
SA_RESTART being present.
guenther@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_kevent.c,v 1.5 2006/10/03 02:59:36 kurt Exp $	*/
@


1.5
log
@Last Part of file descriptor race and deadlock corrections.

When a fd enters the closing state prevent any threads from
polling the fd and reschedule the thread with the closing_fd
flag set. This fixes a class of deadlocks where a thread is
blocked waiting for data (that may never arrive) and a later
thread calls close() or dup2() on the fd. okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_kevent.c,v 1.4 2003/10/19 05:27:03 brad Exp $	*/
d66 1
a66 1
			_thread_kern_sched_state(PS_FDR_WAIT,
@


1.4
log
@sync FreeBSD RCS id
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_kevent.c,v 1.3 2001/12/08 17:08:07 fgsch Exp $	*/
d63 1
d71 4
@


1.3
log
@sync with freebsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_kevent.c,v 1.2 2001/08/21 19:24:53 fgsch Exp $	*/
d28 1
a28 1
 * $FreeBSD: uthread_kevent.c,v 1.5 2001/04/10 04:19:20 deischen Exp $
@


1.2
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 2
a2 1
/*	$OpenBSD: uthread_kevent.c,v 1.1 2001/08/15 23:50:34 fgsch Exp $	*/
d53 1
a53 1
	if (rc == 0 && (timeout == NULL ||
@


1.1
log
@* kevent(2) support; from FreeBSD.
* change _thread_kern_set_timeout() parm to const.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
d55 3
a57 3
		_thread_run->data.fd.fd = kq;
		_thread_run->data.fd.fname = __FILE__;
		_thread_run->data.fd.branch = __LINE__;
d61 2
a62 2
			_thread_run->interrupted = 0;
			_thread_run->timeout = 0;
d67 1
a67 1
			if (_thread_run->interrupted) {
d74 1
a74 1
		} while (rc == 0 && _thread_run->timeout == 0);
@

