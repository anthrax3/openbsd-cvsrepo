head	1.12;
access;
symbols
	OPENBSD_5_2:1.11.0.24
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.22
	OPENBSD_5_0:1.11.0.20
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.18
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.16
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.12
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.14
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.10
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.8
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.6
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.4
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7;
locks; strict;
comment	@ * @;


1.12
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.11;

1.11
date	2006.10.03.02.59.36;	author kurt;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.26.14.18.28;	author kurt;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.22.19.04.33;	author kurt;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.23.19.31.05;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.12.20.12.45;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.30.19.11.56;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	99.11.25.07.01.30;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.02.16.16.39.59;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.21;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.50;	author d;	state Exp;
branches;
next	;


desc
@@


1.12
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_accept.c,v 1.11 2006/10/03 02:59:36 kurt Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_accept.c,v 1.9 1999/08/28 00:03:20 peter Exp $
 */
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int
accept(int fd, struct sockaddr * name, socklen_t *namelen)
{
	struct pthread	*curthread = _get_curthread();
	int             ret;
	int		newfd;
	enum fd_entry_mode init_mode;

	/* This is a cancellation point: */
	_thread_enter_cancellation_point();

	/* Lock the file descriptor: */
	if ((ret = _FD_LOCK(fd, FD_RDWR, NULL)) == 0) {
		/* Enter a loop to wait for a connection request: */
		while ((ret = _thread_sys_accept(fd, name, namelen)) < 0) {
			/* Check if the socket is to block: */
			if ((_thread_fd_table[fd]->status_flags->flags & O_NONBLOCK) == 0 &&
			    (errno == EWOULDBLOCK || errno == EAGAIN)) {
				/* Save the socket file descriptor: */
				curthread->data.fd.fd = fd;
				curthread->data.fd.fname = __FILE__;
				curthread->data.fd.branch = __LINE__;

				/* Set the timeout: */
				_thread_kern_set_timeout(NULL);
				curthread->interrupted = 0;
				curthread->closing_fd = 0;

				/* Schedule the next thread: */
				_thread_kern_sched_state(PS_FDR_WAIT, __FILE__,
							 __LINE__);

				/* Check if the wait was interrupted: */
				if (curthread->interrupted) {
					/* Return an error status: */
					errno = EINTR;
					ret = -1;
					break;
				} else if (curthread->closing_fd) {
					/* Return an error status: */
					errno = EBADF;
					ret = -1;
					break;
				}
			} else {
				/*
				 * Another error has occurred, so exit the
				 * loop here: 
				 */
				break;
			}
		}

		/*
		 * If no errors initialize the file descriptor table
		 * for the new socket. If the client's view of the
		 * status_flags for fd is blocking, then force newfd
		 * to be viewed as blocking too.
		 */
		if (ret != -1) {
			newfd = ret;

			if ((_thread_fd_table[fd]->status_flags->flags & O_NONBLOCK) == 0)
				init_mode = FD_INIT_BLOCKING;
			else
				init_mode = FD_INIT_NEW;
			if((ret = _thread_fd_table_init(newfd, init_mode, NULL)) != -1)
				ret = newfd;
			else {
				/* quitely close the fd */
				_thread_sys_close(ret);
			}
		}

		/* Unlock the file descriptor: */
		_FD_UNLOCK(fd, FD_RDWR);
	}

	/* No longer in a cancellation point: */
	_thread_leave_cancellation_point();

	/* Return the socket file descriptor or -1 on error: */
	return (ret);
}
#endif
@


1.11
log
@Last Part of file descriptor race and deadlock corrections.

When a fd enters the closing state prevent any threads from
polling the fd and reschedule the thread with the closing_fd
flag set. This fixes a class of deadlocks where a thread is
blocked waiting for data (that may never arrive) and a later
thread calls close() or dup2() on the fd. okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_accept.c,v 1.10 2006/09/26 14:18:28 kurt Exp $	*/
@


1.10
log
@Part 2 of file descriptor race and deadlock corrections.

Adjust design of file descriptor table to eliminate races
with both opening and closing of file descriptor entries
and eliminates one class of deadlocks. One nice side effect
of this change in design should be better performance for
applications that open and close many file descriptors due
to reduced fd_table_lock contention and fd entry reuse.

- Add entry states to manage use of entry and eliminate
some closing races. fd entries are not deallocated upon
close() now.
- Call _thread_fd_table_init with one of five discreet
modes to properly initialize an entry and manage the
state transition to open.
- When closing an entry hold the entry spinlock locked
across the state transition and the _thread_sys_close
call to close another race.
- Introduce a new lock type FD_RDWR_CLOSE that transitions
either a closed entry or an open entry into closing state
and then waits for a RDWR lock so that the lock queue can
unwind normally. All subsequent fd lock attempts for that
entry are rejected with EBADF until the fd is fully closed,
or reopened by dup2(). Once a thread holds the FD_RDWR_LOCK
it is safe to close() it or dup2() on it.
- When a thread creates a new fd there is a window of time
when another thread could attempt to use the fd before the
creating thread has initialized the entry for it. This can
result in improper status_flags for the entry, so record
the entries init mode, detect when this has happened and
correct the status_flags when needed.

reviewed by marc@@ & brad@@, tested by several, okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_accept.c,v 1.9 2006/09/22 19:04:33 kurt Exp $	*/
d70 1
d80 5
@


1.9
log
@Part 1 of file descriptor race and deadlock corrections.

File status flags should be shared for dup'ed file descriptors.
However fd_table_entry's should not be shared for dup'ed file
descriptors so they can be independently be closed without
interfering with dup'ed fd's.

- split out file status flags into its own structure
fs_flags to manage sharing of status flags between
dup'ed file descriptors.
- when duplicating a fd, initialize a new fd_table_entry
for the new fd, but share the status flags via status_flags.
- consolidate the code that sets the underlying system fd
to be non-blocking to a new function _thread_fs_flags_init()
- consolidate the code that sets the underlying system
fd back to blocking into a new function _thread_fs_flags_replace()

This change is needed as a prerequisite to the coming race
and deadlock corrections. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_accept.c,v 1.8 2003/12/23 19:31:05 brad Exp $	*/
d49 2
d93 3
a95 3
		 * for the new socket.   Turn on blocking mode in the
		 * child if it is on in the parent.   This is done
		 * as _thread_fd_table_init *may* have turned the flag on.
d98 10
a107 2
			if (_thread_fd_table_init(ret, NULL) != 0) {
				/* Quietly close the socket: */
d109 1
a109 3
				ret = -1;
			} else if ((_thread_fd_table[fd]->status_flags->flags & O_NONBLOCK) == 0)
				_thread_fd_table[ret]->status_flags->flags &= ~O_NONBLOCK;
@


1.8
log
@Make accept(), connect(), recvfrom(), recvmsg(), sendmsg(),
and sendto() cancellation points, as required by POSIX.1-2001.

From: FreeBSD' libc_r

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_accept.c,v 1.7 2002/11/12 20:12:45 marc Exp $	*/
d58 1
a58 1
			if ((_thread_fd_table[fd]->flags & O_NONBLOCK) == 0 &&
d96 1
a96 1
			if (_thread_fd_table_init(ret) != 0) {
d100 2
a101 2
			} else if ((_thread_fd_table[fd]->flags & O_NONBLOCK) == 0)
				_thread_fd_table[ret]->flags &= ~O_NONBLOCK;
@


1.7
log
@get rid of compiler warnings
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_accept.c,v 1.6 2002/10/30 19:11:56 marc Exp $	*/
d50 3
d107 4
@


1.6
log
@signal handling changes.   This corrects several signal
handling errors in the threads library.   Most of the libc_r regression
tests are now ok.   thread specific kill semantics are still not correct.
No negative comments after posting to tech@@ a week or so ago.
siginfo test fails on sparc64 due to sparc64 oddity.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_accept.c,v 1.5 2001/08/21 19:24:53 fgsch Exp $	*/
d92 1
a92 1
		if (ret != -1)
d99 1
@


1.5
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_accept.c,v 1.4 1999/11/25 07:01:30 d Exp $	*/
d55 2
a56 1
			if ((_thread_fd_table[fd]->flags & O_NONBLOCK) == 0 && (errno == EWOULDBLOCK || errno == EAGAIN)) {
d67 2
a68 1
				_thread_kern_sched_state(PS_FDR_WAIT, __FILE__, __LINE__);
d86 5
a90 17
		/* Check for errors: */
		if (ret < 0) {
		}
		/* Initialise the file descriptor table for the new socket: */
		else if (_thread_fd_table_init(ret) != 0) {
			/* Quietly close the socket: */
			_thread_sys_close(ret);

			/* Return an error: */
			ret = -1;
		}
		/* 
		 * If the parent socket was blocking, make sure that
		 * the new socket is also set blocking here (as the
		 * call to _thread_fd_table_init() above will always 
		 * set the new socket flags to non-blocking, as that 
		 * will be the inherited state of the new socket.
d92 7
a98 2
		if((ret > 0) && (_thread_fd_table[fd]->flags & O_NONBLOCK) == 0)
			_thread_fd_table[ret]->flags &= ~O_NONBLOCK;
@


1.4
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
d57 3
a59 3
				_thread_run->data.fd.fd = fd;
				_thread_run->data.fd.fname = __FILE__;
				_thread_run->data.fd.branch = __LINE__;
d63 1
a63 1
				_thread_run->interrupted = 0;
d69 1
a69 1
				if (_thread_run->interrupted) {
@


1.3
log
@deal with socklen_t
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_accept.c,v 1.2 1999/01/06 05:29:21 d Exp $
@


1.2
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d44 1
a44 1
accept(int fd, struct sockaddr * name, int *namelen)
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

