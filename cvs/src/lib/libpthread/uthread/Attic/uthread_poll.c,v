head	1.16;
access;
symbols
	OPENBSD_5_2:1.15.0.22
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.20
	OPENBSD_5_0:1.15.0.18
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.16
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.14
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.10
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.11.0.8
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.6
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7;
locks; strict;
comment	@ * @;


1.16
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.15;

1.15
date	2007.05.21.16.50.36;	author kurt;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.27.12.59.24;	author kurt;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.25.14.32.04;	author kurt;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.03.02.59.36;	author kurt;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.30.00.14.51;	author pat;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.19.17.53.38;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.01.08.19.33;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.10.23.10.08;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.10.00.38.39;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.15.15.47.56;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.06.08.28.53;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.11.25.07.01.41;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.08.05.09.22;	author d;	state Exp;
branches;
next	1.1;

1.1
date	99.01.08.04.59.50;	author d;	state Exp;
branches;
next	;


desc
@@


1.16
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_poll.c,v 1.15 2007/05/21 16:50:36 kurt Exp $	*/
/*
 * Copyright (c) 1999 Daniel Eischen <eischen@@vigrid.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Daniel Eischen.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY DANIEL EISCHEN AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_poll.c,v 1.4 1999/08/30 00:02:08 deischen Exp $
 */
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <poll.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/fcntl.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"


int 
poll(struct pollfd fds[], nfds_t nfds, int timeout)
{
	struct pthread	*curthread = _get_curthread();
	struct timespec	ts;
	nfds_t		n, numfds = nfds;
	int             ret = 0;
	struct pthread_poll_data data;

	/* This is a cancellation point: */
	_thread_enter_cancellation_point();

	if (numfds > _thread_max_pfdtsize) {
		numfds = _thread_max_pfdtsize;
	}
	/* Check if a timeout was specified: */
	if (timeout == INFTIM) {
		/* Wait for ever: */
		_thread_kern_set_timeout(NULL);
	} else if (timeout > 0) {
		/* Convert the timeout in msec to a timespec: */
		ts.tv_sec = timeout / 1000;
		ts.tv_nsec = (timeout % 1000) * 1000000;

		/* Set the wake up time: */
		_thread_kern_set_timeout(&ts);
	} else if (timeout < 0) {
		/* a timeout less than zero but not == INFTIM is invalid */
		errno = EINVAL;
		_thread_leave_cancellation_point();
		return (-1);
	}

	if (((ret = _thread_sys_poll(fds, numfds, 0)) == 0) && (timeout != 0)) {
		data.nfds = numfds;
		data.fds = fds;

		/*
		 * Clear revents in case of a timeout which leaves fds
		 * unchanged:
		 */
		for (n = 0; n < numfds; n++) {
			fds[n].revents = 0;
		}

		curthread->data.poll_data = &data;
		curthread->interrupted = 0;
		_thread_kern_sched_state(PS_POLL_WAIT, __FILE__, __LINE__);
		if (curthread->interrupted) {
			errno = EINTR;
			ret = -1;
		} else {
			ret = (int)data.nfds;
		}
	}

	/* No longer in a cancellation point: */
	_thread_leave_cancellation_point();

	return (ret);
}
#endif
@


1.15
log
@clean up lint warnings related to the nfds_t type. okay marc@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.14 2007/04/27 12:59:24 kurt Exp $	*/
@


1.14
log
@Use rlimit nofiles max to size fd/fdp tables instead of cur. Fixes
applications that increase nofiles using setrlimit(2). ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.13 2006/10/25 14:32:04 kurt Exp $	*/
d59 2
a60 2
	if (numfds > (nfds_t)_thread_max_fdtsize) {
		numfds = _thread_max_fdtsize;
d99 1
a99 1
			ret = data.nfds;
@


1.13
log
@select() and poll() don't _FD_LOCK their file descriptors, so there's no
need to bail from _thread_kern_poll() when a file descriptor is in
closing state. corrects segfault reported by ckuethe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.12 2006/10/03 02:59:36 kurt Exp $	*/
d59 2
a60 2
	if (numfds > (nfds_t)_thread_dtablesize) {
		numfds = _thread_dtablesize;
@


1.12
log
@Last Part of file descriptor race and deadlock corrections.

When a fd enters the closing state prevent any threads from
polling the fd and reschedule the thread with the closing_fd
flag set. This fixes a class of deadlocks where a thread is
blocked waiting for data (that may never arrive) and a later
thread calls close() or dup2() on the fd. okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.11 2004/11/30 00:14:51 pat Exp $	*/
a93 1
		curthread->closing_fd = 0;
a96 3
			ret = -1;
		} else if (curthread->closing_fd) {
			errno = EBADF;
@


1.11
log
@* make sure we leave the thread's cancellation point before we return
* plug a memory leak and FD_UNLOCK properly in writev

ok marc
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.10 2004/01/19 17:53:38 millert Exp $	*/
d94 1
d98 3
@


1.10
log
@Fix -Wsign-compare warnings pointed out by kevlo@@, ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.9 2004/01/01 08:19:33 brad Exp $	*/
d76 1
@


1.9
log
@more cancellation points.

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.8 2003/12/10 23:10:08 millert Exp $	*/
d52 2
a53 2
	nfds_t		numfds = nfds;
	int             i, ret = 0;
d59 1
a59 1
	if (numfds > _thread_dtablesize) {
d87 2
a88 2
		for (i = 0; i < numfds; i++) {
			fds[i].revents = 0;
@


1.8
log
@Add an nfds_t type as per POSIX and also add pollfd_t like Solaris has.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.7 2002/01/10 00:38:39 fgsch Exp $	*/
d56 3
d101 3
@


1.7
log
@From FreeBSD: fix conversion from msec to timespec.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.6 2001/08/21 19:24:53 fgsch Exp $	*/
d48 1
a48 1
poll(struct pollfd fds[], int nfds, int timeout)
d52 1
a52 1
	int		numfds = nfds;
@


1.6
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.5 2001/08/15 15:47:56 fgsch Exp $	*/
d66 1
a66 1
		ts.tv_nsec = (timeout % 1000) * 1000;
d71 1
a71 1
		/* a timeout less than zero but not == -1 is invalid */
@


1.5
log
@Use INFTIM.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.4 2000/01/06 08:28:53 d Exp $	*/
d50 1
d88 2
a89 2
		_thread_run->data.poll_data = &data;
		_thread_run->interrupted = 0;
d91 1
a91 1
		if (_thread_run->interrupted) {
@


1.4
log
@unused vars
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_poll.c,v 1.3 1999/11/25 07:01:41 d Exp $	*/
d59 1
a59 1
	if (timeout == -1) {
@


1.3
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
	int             i, ret = 0, found = 0;
@


1.2
log
@ident
@
text
@d1 1
d3 2
a4 1
 * David Leonard <d@@openbsd.org>, 1999. Public Domain.
d6 28
a33 1
 * $OpenBSD$
d38 1
d41 1
a41 2
#include <poll.h>
#include <stdlib.h>
a45 29
static void
poll_helper(nfds, fds, data)
	int nfds;
	struct pollfd *fds;
	struct pthread_select_data *data;
{
	int maxfd;
	int i;
	int event;
	int fd;

	FD_ZERO(&data->readfds);
	FD_ZERO(&data->writefds);
	FD_ZERO(&data->exceptfds);

	maxfd = -1;
	for (i = 0; i < nfds; i++) {
		event = fds[i].events;
		fd = fds[i].fd;

		if (event & POLLIN)
			FD_SET(fd, &data->readfds);
		if (event & POLLOUT)
			FD_SET(fd, &data->writefds);
		if (fd > maxfd)
			maxfd = fd;
	}
	data->nfds = maxfd + 1;
}
d47 2
a48 5
int
poll(fds, nfds, timeout)
	struct pollfd fds[];
	int nfds;  
	int timeout;  
d50 4
a53 7
	fd_set rfds, wfds, rwfds;
	int i;
	struct timespec ts;
	int fd, event;
	struct pthread_select_data data;
	struct timeval zero_timeout = { 0, 0 };
	int ret;
d55 6
a60 2
	if (timeout < 0) {
		/* Wait forever: */
d62 2
a63 1
	} else {
d65 3
a67 1
		ts.tv_nsec = (timeout % 1000) * 1000000L;
d69 4
d75 10
a84 46
	/* Obtain locks needed: */
	ret = 0;
	FD_ZERO(&rfds);
	FD_ZERO(&wfds);
	FD_ZERO(&rwfds);
	for (i = 0; i < nfds; i++) {
		event = fds[i].events;
		fd = fds[i].fd;

		if (event & (POLLIN|POLLOUT))
			if (!FD_ISSET(fd, &rwfds) && !FD_ISSET(fd, &rfds) &&
			    !FD_ISSET(fd, &wfds)) {
				if ((ret = _FD_LOCK(fd, FD_RDWR, NULL)) != 0)
					break;
				FD_SET(fd, &rwfds);
				continue;
			}

		if (event & POLLIN)
			if (!FD_ISSET(fd, &rwfds) && !FD_ISSET(fd, &rfds)) {
				if ((ret = _FD_LOCK(fd, FD_READ, NULL)) != 0)
					break;
				FD_SET(fd, &rfds);
			}

		if (event & POLLOUT)
			if (!FD_ISSET(fd, &rwfds) && !FD_ISSET(fd, &wfds)) {
				if ((ret = _FD_LOCK(fd, FD_WRITE, NULL)) != 0) 
					break;
				FD_SET(fd, &wfds);
			}
	}

	if (ret == 0) {
		poll_helper(nfds, fds, &data);
		ret = _thread_sys_select(data.nfds, &data.readfds, 
		    &data.writefds, NULL, &zero_timeout);
		if (ret == 0) {
			poll_helper(nfds, fds, &data);
			_thread_run->data.select_data = &data;
			_thread_run->interrupted = 0;
			_thread_kern_sched_state(PS_SELECT_WAIT, __FILE__, __LINE__);
			if (_thread_run->interrupted) {
				errno = EINTR;
				ret = -1;
			}
d87 8
a94 18
		if (ret >= 0)
			ret = _thread_sys_poll(fds, nfds, 0);
	}

	/* Clean up the locks: */
	for (i = 0; i < nfds; i++) {
		fd = fds[i].fd;
		if (FD_ISSET(fd, &rwfds)) {
			_FD_UNLOCK(fd, FD_RDWR);
			FD_CLR(fd, &rwfds);
		}
		if (FD_ISSET(fd, &rfds)) {
			_FD_UNLOCK(fd, FD_READ);
			FD_CLR(fd, &rfds);
		}
		if (FD_ISSET(fd, &wfds)) {
			_FD_UNLOCK(fd, FD_WRITE);
			FD_CLR(fd, &wfds);
@


1.1
log
@add poll(2). This might help get X threaded.
@
text
@d4 1
@

