head	1.18;
access;
symbols
	OPENBSD_5_2:1.17.0.4
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.2
	OPENBSD_5_0:1.15.0.18
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.16
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.14
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.10
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.14
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.12
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.10
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.8
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.6
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.4
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9;
locks; strict;
comment	@ * @;


1.18
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.17;

1.17
date	2011.10.07.08.59.43;	author fgsch;	state Exp;
branches;
next	1.16;

1.16
date	2011.09.13.23.56.00;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.21.16.50.36;	author kurt;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.18.19.28.50;	author kurt;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.01.18.16.37;	author kurt;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.27.12.59.24;	author kurt;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.26.14.18.28;	author kurt;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.09.02.57.41;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.20.00.09.21;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.31.04.46.17;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.11.23.21.19;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.21.23.10.30;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.11.00.19.47;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.08.14.51.36;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.26.13.32.01;	author d;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.06.07.18.01;	author d;	state Exp;
branches;
next	1.1;

1.1
date	99.11.25.06.57.05;	author d;	state Exp;
branches;
next	;


desc
@@


1.18
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_info_openbsd.c,v 1.17 2011/10/07 08:59:43 fgsch Exp $	*/

/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <stddef.h>
#include <paths.h>
#include <sys/poll.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int _thread_dump_verbose = 0;

struct s_thread_info {
	enum pthread_state state;
	const char         *name;
};

/* Static variables: */
static const struct s_thread_info thread_info[] = {
	{PS_RUNNING	, "running"},
	{PS_SIGTHREAD	, "sigthread"},
	{PS_MUTEX_WAIT	, "mutex_wait"},
	{PS_COND_WAIT	, "cond_wait"},
	{PS_CONNECT_WAIT, "connect_wait"},
	{PS_FDLR_WAIT	, "fdlr_wait"},
	{PS_FDLW_WAIT	, "fdlw_wait"},
	{PS_FDR_WAIT	, "fdr_wait"},
	{PS_FDW_WAIT	, "fdw_wait"},
	{PS_FILE_WAIT	, "file_wait"},
	{PS_KEVENT_WAIT	, "kevent_wait"},
	{PS_POLL_WAIT	, "poll_wait"},
	{PS_SELECT_WAIT	, "select_wait"},
	{PS_SLEEP_WAIT	, "sleep_wait"},
	{PS_WAIT_WAIT	, "wait_wait"},
	{PS_SIGSUSPEND	, "sigsuspend"},
	{PS_SIGWAIT	, "sigwait"},
	{PS_SPINBLOCK	, "spinblock"},
	{PS_JOIN	, "join"},
	{PS_SUSPENDED	, "suspended"},
	{PS_DEAD	, "dead"},
	{PS_DEADLOCK	, "deadlock"},
	{(enum pthread_state)0, "<invalid>"},
};

#define writestring(fd, s)	_thread_sys_write(fd, s, (sizeof s) - 1)

const static char info_lead[] = "               -";

/* Determine a filename for display purposes: */
static const char *
truncname(const char *name, int maxlen)
{
	int len;

	if (name == NULL)
		name = "(null)";
	len = (int)strlen(name);
	if (len > maxlen)
		return name + len - maxlen;
	else
		return name;
}

static void
_thread_dump_entry(pthread_t pthread, int fd, int verbose)
{
	const char	*state;
	char		s[512];
	char		location[30];
	unsigned int	j;

	/* Find last known file:line checkpoint: */
	if (pthread->fname && pthread->state != PS_RUNNING)
		snprintf(location, sizeof location, "%s:%d",
		    truncname(pthread->fname, 21), pthread->lineno);
	else
		location[0] = '\0';

	/* Find the state: */
	for (j = 0; j < (sizeof(thread_info) /
	    sizeof(struct s_thread_info)) - 1; j++)
		if (thread_info[j].state == pthread->state)
			break;
	state = thread_info[j].name;

	/* Output a record for the current thread: */
	s[0] = 0;
	snprintf(s, sizeof(s), 
	    " %8p%c%-11s %2d %c%c%c%c%c%c%c%c%c%c %04x %-8.8s %s\n",
	    (void *)pthread,
	    (pthread == _thread_run)     ? '*' : ' ',
	    state,
	    pthread->active_priority,
	    (pthread->flags & PTHREAD_FLAGS_PRIVATE)	  ? 'p' : '-',
	    (pthread->flags & PTHREAD_EXITING)		  ? 'E' :
	    (pthread->cancelflags & PTHREAD_AT_CANCEL_POINT) ? 'c' : '-',
	    (pthread->flags & PTHREAD_FLAGS_TRACE)	  ? 't' : '-',
	    (pthread->flags & PTHREAD_FLAGS_IN_CONDQ)     ? 'C' : '-',
	    (pthread->flags & PTHREAD_FLAGS_IN_WORKQ)     ? 'R' : '-',
	    (pthread->flags & PTHREAD_FLAGS_IN_WAITQ)     ? 'W' : '-',
	    (pthread->flags & PTHREAD_FLAGS_IN_PRIOQ)     ? 'P' : '-',
	    (pthread->attr.flags & PTHREAD_DETACHED)      ? 'd' : '-',
	    (pthread->attr.flags & PTHREAD_INHERIT_SCHED) ? 'i' : '-',
	    (pthread->attr.flags & PTHREAD_NOFLOAT)       ? '-' : 'f',
	    ((unsigned int)pthread->sigmask & 0xffff),
	    (pthread->name == NULL) ? "" : pthread->name,
	    (verbose) ? location : ""
	);
	_thread_sys_write(fd, s, strlen(s));

	if (!verbose)
		return;

	/* Show the scheduler wake and time slice properties */
	snprintf(s, sizeof(s), "%s sched wake ", info_lead);
	_thread_sys_write(fd, s, strlen(s));
	if (pthread->wakeup_time.tv_sec == -1)
		writestring(fd, "- slice ");
	else {
		struct timeval now;
		struct timespec nows, delta;

		gettimeofday(&now, NULL);
		TIMEVAL_TO_TIMESPEC(&now, &nows);
		timespecsub(&pthread->wakeup_time, &nows, &delta);
		snprintf(s, sizeof s, "%d.%09ld slice ",
			delta.tv_sec, delta.tv_nsec);
		_thread_sys_write(fd, s, strlen(s));
	}
	if (pthread->slice_usec == -1)
		writestring(fd, "-\n");
	else {
		snprintf(s, sizeof s, "%ld.%06ld\n",
			pthread->slice_usec / 1000000,
			pthread->slice_usec % 1000000);
		_thread_sys_write(fd, s, strlen(s));
	}

	/* Process according to thread state: */
	switch (pthread->state) {
	/* File descriptor read lock wait: */
	case PS_CONNECT_WAIT:
	case PS_FDLR_WAIT:
	case PS_FDLW_WAIT:
	case PS_FDR_WAIT:
	case PS_FDW_WAIT:
	case PS_KEVENT_WAIT:
		/* Write the lock details: */
		snprintf(s, sizeof(s), "%s fd %d [%s:%d]\n",
		    info_lead,
		    pthread->data.fd.fd, 
		    truncname(pthread->data.fd.fname, 32),
		    pthread->data.fd.branch);
		_thread_sys_write(fd, s, strlen(s));
		s[0] = 0;
		if (_thread_fd_table[pthread->data.fd.fd] &&
		    _thread_fd_table[pthread->data.fd.fd]->state != FD_ENTRY_CLOSED)
		    snprintf(s, sizeof(s), "%s owner %pr/%pw\n",
			     info_lead,
			     _thread_fd_table[pthread->data.fd.fd]->r_owner,
			     _thread_fd_table[pthread->data.fd.fd]->w_owner);
		else
		    snprintf(s, sizeof(s), "%s owner [unknown]\n", info_lead);
		_thread_sys_write(fd, s, strlen(s));
		break;
	case PS_SIGWAIT:
		snprintf(s, sizeof(s), "%s sigmask 0x%08lx\n",
		    info_lead,
		    (unsigned long)pthread->sigmask);
		_thread_sys_write(fd, s, strlen(s));
		break;
	case PS_MUTEX_WAIT:
		snprintf(s, sizeof(s), 
		    "%s mutex %p\n",
		    info_lead,
		    pthread->data.mutex);
		_thread_sys_write(fd, s, strlen(s));
		if (pthread->data.mutex) {
			snprintf(s, sizeof(s), 
			    "%s owner %p\n",
			    info_lead,
			    pthread->data.mutex->m_owner);
			_thread_sys_write(fd, s, strlen(s));
		}
		break;
	case PS_COND_WAIT:
		snprintf(s, sizeof(s), 
		    "%s cond %p\n",
		    info_lead,
		    pthread->data.cond);
		_thread_sys_write(fd, s, strlen(s));
		break;
#ifdef notyet
	case PS_JOIN:
		{
			struct pthread *t, * volatile *last;
			pthread_entry_t *e;

			/* Find the end of the list: */
			for (e = &pthread->qe; e->tqe_next != NULL;
			    e = &e->tqe_next->qe)
				;
			last = &e->tqe_next;
			/* Walk backwards to the head: */
			for (e = &pthread->qe; 
			    ((_thread_list_t *)e)->tqh_last != last; 
			    e = (pthread_entry_t *)e->tqe_prev)
				;
			/* Convert the head address into a thread address: */
			t = (pthread_t)((caddr_t)e - 
			    offsetof(struct pthread, join_queue));
			snprintf(s, sizeof(s), 
			    "%s thread %p\n", info_lead, t);
			_thread_sys_write(fd, s, strlen(s));
		}
		break;
#endif
	case PS_SLEEP_WAIT:
		{
			struct timeval tv;
			struct timespec current_time;
			struct timespec remaining_time;
			double remain;

			gettimeofday(&tv, NULL);
			TIMEVAL_TO_TIMESPEC(&tv, &current_time);
			timespecsub(&pthread->wakeup_time, 
			    &current_time, &remaining_time);
			remain = remaining_time.tv_sec
				+ (double)remaining_time.tv_nsec / 1e9;
			snprintf(s, sizeof(s), 
			    "%s wake in %f sec\n", 
			    info_lead, remain);
			_thread_sys_write(fd, s, strlen(s));
		}
		break;
	case PS_SELECT_WAIT:
	case PS_POLL_WAIT:
		{
			nfds_t i;

			for (i = 0; i < pthread->data.poll_data->nfds; i++) 
				snprintf(s, sizeof(s), "%s%d:%s%s",
				    i ? " " : "",
				    pthread->data.poll_data->fds[i].fd,
				    pthread->data.poll_data->fds[i].events &
					POLLIN ? "r" : "",
				    pthread->data.poll_data->fds[i].events &
					POLLOUT ? "w" : ""
				);
			snprintf(s, sizeof(s), "\n");
		}
		break;
	default:
	/* Nothing to do here. */
		break;
	}
}

void
_thread_dump_info(void)
{
	char            s[512];
	int             fd;
	int             i;
	pthread_t       pthread;
	pq_list_t *	pq_list;
	int		verbose;

	verbose = _thread_dump_verbose;
	if (getenv("PTHREAD_DEBUG") != NULL)
		verbose = 1;

	/* Open the controlling tty: */
	fd = _thread_sys_open(_PATH_TTY, O_WRONLY | O_APPEND);
	if (fd < 0)
		return;

	if (!verbose)  {
		/* Display only a very brief list of threads */
		TAILQ_FOREACH(pthread, &_thread_list, tle)
			if ((pthread->flags & PTHREAD_FLAGS_PRIVATE) == 0)
				_thread_dump_entry(pthread, fd, 0);
		return;
	}

	/* Display a list of active threads: */
	snprintf(s, sizeof s, " %8s%c%-11s %2s %-10s %4s %-8s %s\n", 
	    "id", ' ',  "state", "pr", "flags", "mask", "name", "location");
	_thread_sys_write(fd, s, strlen(s));

	writestring(fd, "active:\n");

	TAILQ_FOREACH(pthread, &_thread_list, tle)
		_thread_dump_entry(pthread, fd, 1);

	writestring(fd, "ready:\n");
	TAILQ_FOREACH (pq_list, &_readyq.pq_queue, pl_link)
		TAILQ_FOREACH(pthread, &pq_list->pl_head, pqe)
			_thread_dump_entry(pthread, fd, 0);

	writestring(fd, "waiting:\n");
	TAILQ_FOREACH (pthread, &_waitingq, pqe) 
		_thread_dump_entry(pthread, fd, 0);

	writestring(fd, "workq:\n");
	TAILQ_FOREACH (pthread, &_workq, qe)
		_thread_dump_entry(pthread, fd, 0);

	writestring(fd, "dead:\n");
	TAILQ_FOREACH(pthread, &_dead_list, dle)
		_thread_dump_entry(pthread, fd, 1);

	/* Output a header for file descriptors: */
	snprintf(s, sizeof(s), "file descriptor table, size %d:\n", 
	    _thread_max_fdtsize);
	_thread_sys_write(fd, s, strlen(s));

	snprintf(s, sizeof s,
		" %3s %8s %4s %21s %8s %4s %21s\n",
		"fd", "rdowner", "rcnt", "rdcode",
		"wrowner", "wcnt", "wrcode");
	_thread_sys_write(fd, s, strlen(s));

	/* Enter a loop to report file descriptor lock usage: */
	for (i = 0; i < _thread_max_fdtsize; i++) {
		/*
		 * Check if memory is allocated for this file
		 * descriptor: 
		 */
		char rcode[22], wcode[22];

		if (_thread_fd_table[i] != NULL &&
		    _thread_fd_table[i]->state != FD_ENTRY_CLOSED) {

			/* Find the reader's last file:line: */
			if (_thread_fd_table[i]->r_owner)
				snprintf(rcode, sizeof rcode, "%s:%d", 
				    truncname(_thread_fd_table[i]->r_fname, 16),
				    _thread_fd_table[i]->r_lineno);
			else
				rcode[0] = '\0';

			/* Find the writer's last file:line: */
			if (_thread_fd_table[i]->w_owner)
				snprintf(wcode, sizeof wcode, "%s:%d", 
				    truncname(_thread_fd_table[i]->w_fname, 16),
				    _thread_fd_table[i]->w_lineno);
			else
				wcode[0] = '\0';

			/* Report the file descriptor lock status: */
			snprintf(s, sizeof(s),
			    " %3d %8p %4d %21s %8p %4d %21s\n",
			    i, 
			    _thread_fd_table[i]->r_owner,
			    _thread_fd_table[i]->r_lockcount,
			    rcode,
			    _thread_fd_table[i]->w_owner,
			    _thread_fd_table[i]->w_lockcount,
			    wcode
			);
			_thread_sys_write(fd, s, strlen(s));
		}
	}

	/* Close the dump file: */
	_thread_sys_close(fd);
	return;
}

/*
 * Generic "dump some data to /dev/tty in hex format" function
 * output format is:
 *      0                     22                        48
 *	0x0123456789abcdef:   00 11 22 33 44 55 66 77   01234567
 */
#define DUMP_BUFLEN 84
#define DUMP_HEX_OFF 22
#define DUMP_ASCII_OFF 48

void
_thread_dump_data(const void *addr, int len)
{
	int fd = -1;
	unsigned char data[DUMP_BUFLEN];
	const unsigned char hexdigits[] = "0123456789abcdef";

	if (getenv("PTHREAD_DEBUG") != NULL)
		fd = _thread_sys_open(_PATH_TTY, O_WRONLY | O_APPEND);
	if (fd != -1) {
		memset(data, ' ', DUMP_BUFLEN);
		while (len) {
			const unsigned char *d;
			unsigned char *h;
			unsigned char *a;
			int count;

			d = addr;
			h = &data[DUMP_HEX_OFF];
			a = &data[DUMP_ASCII_OFF];

			if (len > 8) {
				count = 8;
				len -= 8;
			} else {
				count = len;
				len = 0;
				memset(data, ' ', DUMP_BUFLEN);
			}
			addr = (char *)addr + 8;

			snprintf((char *)data, DUMP_BUFLEN, "%18p:   ", d);
			while (count--) {
				if (isprint(*d))
					*a++ = *d;
				else
					*a++ = '.';
				*h++ = hexdigits[(*d >> 4) & 0xf];
				*h++ = hexdigits[*d++ & 0xf];
				*h++ = ' ';
			}
			*a++ = '\n';
			*a = 0;
			_thread_sys_write(fd, data, (size_t)(a - data));
		}
		writestring(fd, "\n");
		_thread_sys_close(fd);
	}
}

/* Set the thread name for debug: */
void
pthread_set_name_np(pthread_t thread, const char *name)
{
	/* Check if the caller has specified a valid thread: */
	if (thread != NULL && thread->magic == PTHREAD_MAGIC) {
		if (thread->name != NULL)
			free(thread->name);
		thread->name = strdup(name);
	}
	return;
}
#endif
@


1.17
log
@threads waiting on PS_FDW_WAIT state should not be interruptible if
SA_RESTART is set, with connect(2) being the exception thus getting its
own state.
as pointed by kurt, threads on this and PS_FDR_WAIT states need to be
set to PS_RUNNING since the current signal dispatching code only looks
at the current thread.
ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.16 2011/09/13 23:56:00 fgsch Exp $	*/
@


1.16
log
@For threads in PS_FDR_WAIT state, check SA_RESTART before marking it as
interrupted, thus simulating the system call restart behaviour in the
non-pthreads case.
Add a state for kevent since it shouldn't be restarted regardless of
SA_RESTART being present.
guenther@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.15 2007/05/21 16:50:36 kurt Exp $	*/
d60 1
d178 1
@


1.15
log
@clean up lint warnings related to the nfds_t type. okay marc@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.14 2007/05/18 19:28:50 kurt Exp $	*/
d65 1
d181 1
@


1.14
log
@Eliminate many lint warnings by either: using the appropriate type,
casting when safe or adding ARGSUSED where needed. Reviewed and
improvements from millert@@ and marc@@. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.13 2007/05/01 18:16:37 kurt Exp $	*/
d272 1
a272 1
			int i;
@


1.13
log
@lint warning corrections:
- use the correct types
- mark _thread_gc() w/ARGSUSED
- fix a 'a cast does not yield an lvalue'
okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.12 2007/04/27 12:59:24 kurt Exp $	*/
d91 1
a91 1
	len = strlen(name);
d419 1
d445 1
a445 1
			snprintf(data, DUMP_BUFLEN, "%18p:   ", d);
d451 2
a452 2
				*h++ = "0123456789abcdef"[(*d >> 4) & 0xf];
				*h++ = "0123456789abcdef"[*d++ & 0xf];
d457 1
a457 1
			_thread_sys_write(fd, data, a - data);
@


1.12
log
@Use rlimit nofiles max to size fd/fdp tables instead of cur. Fixes
applications that increase nofiles using setrlimit(2). ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.11 2006/09/26 14:18:28 kurt Exp $	*/
d442 1
a442 1
			(char *) addr += 8;
@


1.11
log
@Part 2 of file descriptor race and deadlock corrections.

Adjust design of file descriptor table to eliminate races
with both opening and closing of file descriptor entries
and eliminates one class of deadlocks. One nice side effect
of this change in design should be better performance for
applications that open and close many file descriptors due
to reduced fd_table_lock contention and fd entry reuse.

- Add entry states to manage use of entry and eliminate
some closing races. fd entries are not deallocated upon
close() now.
- Call _thread_fd_table_init with one of five discreet
modes to properly initialize an entry and manage the
state transition to open.
- When closing an entry hold the entry spinlock locked
across the state transition and the _thread_sys_close
call to close another race.
- Introduce a new lock type FD_RDWR_CLOSE that transitions
either a closed entry or an open entry into closing state
and then waits for a RDWR lock so that the lock queue can
unwind normally. All subsequent fd lock attempts for that
entry are rejected with EBADF until the fd is fully closed,
or reopened by dup2(). Once a thread holds the FD_RDWR_LOCK
it is safe to close() it or dup2() on it.
- When a thread creates a new fd there is a window of time
when another thread could attempt to use the fd before the
creating thread has initialized the entry for it. This can
result in improper status_flags for the entry, so record
the entries init mode, detect when this has happened and
correct the status_flags when needed.

reviewed by marc@@ & brad@@, tested by several, okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.10 2006/04/09 02:57:41 krw Exp $	*/
d348 1
a348 1
	    _thread_dtablesize);
d358 1
a358 1
	for (i = 0; i < _thread_dtablesize; i++) {
@


1.10
log
@Change a debug interface to take const char pointers so we don't ave
to cast away constness whenever we want to pass in a string that is
already const -- we copy the string if we want to use it, so having it
be non-const in the first place does not make any sense.

From tholo@@

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.9 2003/03/20 00:09:21 marc Exp $	*/
d188 2
a189 1
		if (_thread_fd_table[pthread->data.fd.fd])
d365 2
a366 1
		if (_thread_fd_table[i] != NULL) {
@


1.9
log
@sprintf -> snprintf; ok millert@@, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.8 2003/01/31 04:46:17 marc Exp $	*/
d463 1
a463 1
pthread_set_name_np(pthread_t thread, char *name)
@


1.8
log
@
Create a siginfo_t for thread-to-thread kill.
Clean up (compiler warning elimination).   Compile check options added
but commented out as they have not been checked on all architectures, yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.7 2002/12/11 23:21:19 marc Exp $	*/
d416 1
a416 1
	unsigned char data[ DUMP_BUFLEN ];
d442 1
a442 1
			sprintf( data, "%18p:   ", d );
@


1.7
log
@add a debugging function not normally called
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.6 2002/10/21 23:10:30 marc Exp $	*/
d51 1
a51 1
	char           *name;
d99 1
a99 4
_thread_dump_entry(pthread, fd, verbose)
	pthread_t pthread;
	int fd;
	int verbose;
d104 1
a104 1
	int		j;
d440 1
a440 1
			addr += 8;
@


1.6
log
@
Check for null pointer before deref in info output.   Based upon
a freebsd patch forwarded to me by millert@@ (thanks!).  Change also
applied to uthread_info.c even though we do not use it
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.5 2001/12/11 00:19:47 fgsch Exp $	*/
d289 1
a289 1
		/* Nothing to do here. */
d403 59
@


1.5
log
@More sync with freebsd code; join related code this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_info_openbsd.c,v 1.4 2001/12/08 14:51:36 fgsch Exp $	*/
d191 7
a197 4
		snprintf(s, sizeof(s), "%s owner %pr/%pw\n",
		    info_lead,
		    _thread_fd_table[pthread->data.fd.fd]->r_owner,
		    _thread_fd_table[pthread->data.fd.fd]->w_owner);
@


1.4
log
@Partially sync with FreeBSD; mostly pthread_cancel(3) related changes.
make includes is needed in case you want to play.
@
text
@d1 2
a33 1
 * $OpenBSD: uthread_info_openbsd.c,v 1.3 2000/02/26 13:32:01 d Exp $
d224 1
d248 1
@


1.3
log
@better column titles. show prioq and scheduler timing information
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_info_openbsd.c,v 1.2 2000/01/06 07:18:01 d Exp $
d132 1
a132 2
	    (pthread->flags & PTHREAD_FLAGS_CANCELED)	  ? 'C' :
	    (pthread->flags & PTHREAD_FLAGS_CANCELPT)	  ? 'c' : '-',
@


1.2
log
@dump verbosely only if PTHREAD_DEBUG env var is defined
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_info_openbsd.c,v 1.1 1999/11/25 06:57:05 d Exp $
d125 1
a125 1
	    " %8p%c%-11s %2d %c%c%c%c%c%c %04x %-8.8s %s\n",
d135 4
d142 1
a142 1
	    ((int)pthread->sigmask),
d151 25
d317 2
a318 2
	snprintf(s, sizeof s, " %8s%c%-11s %2s %6s %4s %-8s %s\n", 
	    "id", ' ',  "state", "pr", "flags", "sigm", "name", "location");
@


1.1
log
@keep freebsd's thread info distcint from mine
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_info.c,v 1.8 1999/05/26 00:18:24 d Exp $
d46 2
d98 1
a98 1
_thread_dump_entry(pthread, fd)
d101 1
a102 1
	pthread_t	t;
d125 1
a125 1
	    " %8p%c%-11s %2d %c%c%c%c%c%c%c %-8.8s %s\n",
d131 1
a131 1
	    (pthread->flags & PTHREAD_EXITING)		  ? 'e' :
d135 4
a138 4
	    (pthread->attr.flags & PTHREAD_DETACHED)      ? 'D' : '-',
	    (pthread->attr.flags & PTHREAD_SCOPE_SYSTEM)  ? 'S' : '-',
	    (pthread->attr.flags & PTHREAD_INHERIT_SCHED) ? 'I' : '-',
	    (pthread->attr.flags & PTHREAD_NOFLOAT)       ? 'F' : '-',
d140 1
a140 1
	    location
d144 3
d184 1
a184 1
			    NULL /* (*pthread->data.mutex)->m_owner*/);
d197 1
a197 1
			struct pthread *t, **last;
d268 5
d279 8
d288 2
a289 2
	snprintf(s, sizeof s, " %8s%c%-11s %2s %7s %-8s %s\n", 
	    "id", ' ',  "state", "pr", "flags", "name", "location");
d293 1
d295 1
a295 1
		_thread_dump_entry(pthread, fd);
d300 1
a300 1
			_thread_dump_entry(pthread, fd);
d304 1
a304 1
		_thread_dump_entry(pthread, fd);
d308 1
a308 1
		_thread_dump_entry(pthread, fd);
d312 1
a312 1
		_thread_dump_entry(pthread, fd);
d315 1
a315 1
	snprintf(s, sizeof(s), "file descriptor table, size %d\n", 
@

