head	1.17;
access;
symbols
	OPENBSD_5_2:1.16.0.22
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.20
	OPENBSD_5_0:1.16.0.18
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.16
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.14
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.10
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.12
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.8
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.11.0.12
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.10
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.8
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.17
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.16;

1.16
date	2007.05.21.16.50.36;	author kurt;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.18.19.28.50;	author kurt;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.27.12.59.24;	author kurt;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.25.14.32.04;	author kurt;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.03.02.59.36;	author kurt;	state Exp;
branches;
next	1.11;

1.11
date	2004.01.03.07.35.10;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.01.08.19.33;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.03.20.27.48;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.19.22.49.11;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.16.21.50.50;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.19.21.22.31;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	99.11.25.07.01.42;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.05.26.00.18.25;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.26;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.17;	author d;	state Exp;
branches;
next	;


desc
@@


1.17
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_select.c,v 1.16 2007/05/21 16:50:36 kurt Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_select.c,v 1.13 1999/08/30 00:02:08 deischen Exp $
 */
#include <unistd.h>
#include <errno.h>
#include <poll.h>
#include <stdlib.h>
#include <string.h>
#include <sys/param.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/fcntl.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

/*
 * Minimum number of poll_data entries to allocate
 */
#define POLLDATA_MIN	128

int 
select(int numfds, fd_set * readfds, fd_set * writefds,
       fd_set * exceptfds, struct timeval * timeout)
{
	struct pthread	*curthread = _get_curthread();
	struct timespec ts;
	int             bit, i, j, ret = 0, f_wait = 1;
	short		events;
	int		got_events = 0, fd_count = 0;
	struct pthread_poll_data data;
	fd_mask		mask, rmask, wmask, emask;

	/* This is a cancellation point: */
	_thread_enter_cancellation_point();

	if (numfds > _thread_max_fdtsize) {
		numfds = _thread_max_fdtsize;
	}

	/* Check if a timeout was specified: */
	if (timeout) {
		if (timeout->tv_sec < 0 ||
			timeout->tv_usec < 0 || timeout->tv_usec >= 1000000) {
			errno = EINVAL;
			ret = -1;
			goto done;
		}

		/* Convert the timeval to a timespec: */
		TIMEVAL_TO_TIMESPEC(timeout, &ts);

		/* Set the wake up time: */
		_thread_kern_set_timeout(&ts);
		if (ts.tv_sec == 0 && ts.tv_nsec == 0)
			f_wait = 0;
	} else {
		/* Wait for ever: */
		_thread_kern_set_timeout(NULL);
	}

	/* Count the number of file descriptors to be polled: */
	if (numfds && (readfds || writefds || exceptfds)) {
		for (i = (numfds - 1) / (int)NFDBITS; i >= 0; i--) {
			rmask = readfds ? readfds->fds_bits[i] : 0;
			wmask = writefds ? writefds->fds_bits[i] : 0;
			emask = exceptfds ? exceptfds->fds_bits[i] : 0;
			mask = rmask | wmask | emask;
			for (; (bit = ffs(mask)); mask ^= (1 << (bit - 1)))
				fd_count++;
		}
	}

	/*
	 * Allocate memory for poll data if it hasn't already been
	 * allocated or if previously allocated memory is insufficient.
	 */
	if ((curthread->poll_data.fds == NULL) ||
	    (curthread->poll_data.nfds < (nfds_t)fd_count)) {
		data.fds = (struct pollfd *) realloc(curthread->poll_data.fds,
		    sizeof(struct pollfd) * (size_t)MAX(POLLDATA_MIN, fd_count));
		if (data.fds == NULL) {
			errno = ENOMEM;
			ret = -1;
		}
		else {
			/*
			 * Note that the threads poll data always
			 * indicates what is allocated, not what is
			 * currently being polled.
			 */
			curthread->poll_data.fds = data.fds;
			curthread->poll_data.nfds = (nfds_t)MAX(POLLDATA_MIN, fd_count);
		}
	}
	if (ret == 0) {
		/* Setup the wait data. */
		data.fds = curthread->poll_data.fds;
		data.nfds = (nfds_t)fd_count;

		/*
		 * Setup the array of pollfds.  Optimize this by
		 * running the loop in reverse and stopping when
		 * the number of selected file descriptors is reached.
		 */
		for (i = (numfds - 1) / (int)NFDBITS, j = fd_count;
		    j != 0 && i >= 0; i--) {
			rmask = readfds ? readfds->fds_bits[i] : 0;
			wmask = writefds ? writefds->fds_bits[i] : 0;
			emask = exceptfds ? exceptfds->fds_bits[i] : 0;
			mask = rmask | wmask | emask;
			while ((bit = ffs(mask))) {
				int n = 1 << (bit - 1);
				mask ^= n;
				events = 0;
				if (rmask & n)
					events |= POLLRDNORM;
				if (wmask & n)
					events |= POLLWRNORM;
				if (emask & n)
					events |= POLLRDBAND;
				if (events != 0) {
					/*
					 * Set the file descriptor to be polled
					 * and clear revents in case of a
					 * timeout which leaves fds unchanged:
					 */
					data.fds[--j].fd =
					    (i * (int)NFDBITS) + bit - 1;
					data.fds[j].events = events;
					data.fds[j].revents = 0;
				}
			}
		}
		if (((ret = _thread_sys_poll(data.fds, data.nfds, 0)) == 0) &&
		   (f_wait != 0)) {
			curthread->data.poll_data = &data;
			curthread->interrupted = 0;
			_thread_kern_sched_state(PS_SELECT_WAIT, __FILE__, __LINE__);
			if (curthread->interrupted) {
				errno = EINTR;
				data.nfds = 0;
				ret = -1;
			} else
				ret = (int)data.nfds;
		}
	}

	if (ret >= 0) {
		numfds = 0;
		for (i = 0; i < fd_count; i++) {
			/*
			 * Check the results of the poll and clear
			 * this file descriptor from the fdset if
			 * the requested event wasn't ready.
			 */

			/*
			 * First check for invalid descriptor.
			 * If found, set errno and return -1.
			 */
			if (data.fds[i].revents & POLLNVAL) {
				errno = EBADF;
				ret = -1;
				goto done;
			}

			got_events = 0;
			if (readfds != NULL) {
				if (FD_ISSET(data.fds[i].fd, readfds)) {
					if ((data.fds[i].revents & (POLLIN
					    | POLLRDNORM | POLLERR
					    | POLLHUP)) != 0)
						got_events++;
					else
						FD_CLR(data.fds[i].fd, readfds);
				}
			}
			if (writefds != NULL) {
				if (FD_ISSET(data.fds[i].fd, writefds)) {
					if ((data.fds[i].revents & (POLLOUT
					    | POLLWRNORM | POLLWRBAND | POLLERR
					    | POLLHUP)) != 0)
						got_events++;
					else
						FD_CLR(data.fds[i].fd,
						    writefds);
				}
			}
			if (exceptfds != NULL) {
				if (FD_ISSET(data.fds[i].fd, exceptfds)) {
					if (data.fds[i].revents & (POLLRDBAND |
					    POLLPRI))
						got_events++;
					else
						FD_CLR(data.fds[i].fd,
						    exceptfds);
				}
			}
			if (got_events != 0)
				numfds+=got_events;
		}
		ret = numfds;
	}

done:
	/* No longer in a cancellation point: */
	_thread_leave_cancellation_point();

	return (ret);
}
#endif
@


1.16
log
@clean up lint warnings related to the nfds_t type. okay marc@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.15 2007/05/18 19:28:50 kurt Exp $	*/
@


1.15
log
@Eliminate many lint warnings by either: using the appropriate type,
casting when safe or adding ARGSUSED where needed. Reviewed and
improvements from millert@@ and marc@@. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.14 2007/04/27 12:59:24 kurt Exp $	*/
d110 1
a110 1
	    (curthread->poll_data.nfds < fd_count)) {
d124 1
a124 1
			curthread->poll_data.nfds = MAX(POLLDATA_MIN, fd_count);
d130 1
a130 1
		data.nfds = fd_count;
d176 1
a176 1
				ret = data.nfds;
@


1.14
log
@Use rlimit nofiles max to size fd/fdp tables instead of cur. Fixes
applications that increase nofiles using setrlimit(2). ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.13 2006/10/25 14:32:04 kurt Exp $	*/
d60 2
a61 1
	int		events, got_events = 0, fd_count = 0;
d71 1
d95 1
a95 1
		for (i = (numfds - 1) / NFDBITS; i >= 0; i--) {
d112 1
a112 1
		    sizeof(struct pollfd) * MAX(POLLDATA_MIN, fd_count));
d137 1
a137 1
		for (i = (numfds - 1) / NFDBITS, j = fd_count;
d160 1
a160 1
					    (i * NFDBITS) + bit - 1;
@


1.13
log
@select() and poll() don't _FD_LOCK their file descriptors, so there's no
need to bail from _thread_kern_poll() when a file descriptor is in
closing state. corrects segfault reported by ckuethe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.12 2006/10/03 02:59:36 kurt Exp $	*/
d67 2
a68 2
	if (numfds > _thread_dtablesize) {
		numfds = _thread_dtablesize;
@


1.12
log
@Last Part of file descriptor race and deadlock corrections.

When a fd enters the closing state prevent any threads from
polling the fd and reschedule the thread with the closing_fd
flag set. This fixes a class of deadlocks where a thread is
blocked waiting for data (that may never arrive) and a later
thread calls close() or dup2() on the fd. okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.11 2004/01/03 07:35:10 brad Exp $	*/
a167 1
			curthread->closing_fd = 0;
a170 4
				data.nfds = 0;
				ret = -1;
			} else if (curthread->closing_fd) {
				errno = EBADF;
@


1.11
log
@Fixes from FreeBSD's libc_r

rev 1.21
Make the libc_r version of select() set the readable or writable
file descriptor bit if poll() returns POLLERR, POLLHUP, or POLLNVAL.
Othewise, it's possible for select() to return successfully but
with no bits set.

rev 1.19
Return correct number of total bits set in all fd_set's.
Change case of POLLNVAL as an error.
Remove POLLHUP and POLLERR from one case, their place is most likely
amongst read events.

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.10 2004/01/01 08:19:33 brad Exp $	*/
d168 1
d172 4
@


1.10
log
@more cancellation points.

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.9 2003/11/03 20:27:48 marc Exp $	*/
d60 1
a60 1
	int		events, got_one = 0, fd_count = 0;
d186 12
a197 1
			got_one = 0;
d200 4
a203 3
					if (data.fds[i].revents & (POLLIN |
					    POLLRDNORM))
						got_one = 1;
d210 4
a213 3
					if (data.fds[i].revents & (POLLOUT |
					    POLLWRNORM | POLLWRBAND))
						got_one = 1;
d222 2
a223 3
					    POLLPRI | POLLHUP | POLLERR |
					    POLLNVAL))
						got_one = 1;
d229 2
a230 2
			if (got_one)
				numfds++;
@


1.9
log
@replace magic number for min number of poll_data entries
to allocate with a define
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.8 2003/10/19 22:49:11 marc Exp $	*/
d64 1
a64 1
	/* this is a cancellation point per IEEE Std 1003.1-2001 */
d224 1
@


1.8
log
@Fix optimized select handling buglet.  Patch from tholo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.7 2003/10/16 21:50:50 millert Exp $	*/
d48 5
d110 1
a110 1
		    sizeof(struct pollfd) * MAX(128, fd_count));
d122 1
a122 1
			curthread->poll_data.nfds = MAX(128, fd_count);
@


1.7
log
@Optimize conversion of fd_set -> pollfd.  OK and test by marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.6 2003/01/19 21:22:31 marc Exp $	*/
d87 1
a87 1
	if (readfds || writefds || exceptfds) {
@


1.6
log
@
return (func(...)) not needed when the current function and func
are both void.
The select call is a cancellation point per IEEE Std 1003.1-2001.
This should fix a problem espie@@ found in kde.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.5 2001/08/21 19:24:53 fgsch Exp $	*/
d54 2
a55 2
	int             i, ret = 0, f_wait = 1;
	int		pfd_index, got_one = 0, fd_count = 0;
d57 1
d88 6
a93 4
		for (i = 0; i < numfds; i++) {
			if ((readfds && FD_ISSET(i, readfds)) ||
			    (exceptfds && FD_ISSET(i, exceptfds)) ||
			    (writefds && FD_ISSET(i, writefds))) {
a94 1
			}
d130 27
a156 21
		for (i = numfds - 1, pfd_index = fd_count - 1;
		    (i >= 0) && (pfd_index >= 0); i--) {
			data.fds[pfd_index].events = 0;
			if (readfds && FD_ISSET(i, readfds)) {
				data.fds[pfd_index].events = POLLRDNORM;
			}
			if (exceptfds && FD_ISSET(i, exceptfds)) {
				data.fds[pfd_index].events |= POLLRDBAND;
			}
			if (writefds && FD_ISSET(i, writefds)) {
				data.fds[pfd_index].events |= POLLWRNORM;
			}
			if (data.fds[pfd_index].events != 0) {
				/*
				 * Set the file descriptor to be polled and
				 * clear revents in case of a timeout which
				 * leaves fds unchanged:
				 */
				data.fds[pfd_index].fd = i;
				data.fds[pfd_index].revents = 0;
				pfd_index--;
@


1.5
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.4 1999/11/25 07:01:42 d Exp $	*/
d58 3
d69 2
a70 1
			return (-1);
d209 3
@


1.4
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
d96 3
a98 3
	if ((_thread_run->poll_data.fds == NULL) ||
	    (_thread_run->poll_data.nfds < fd_count)) {
		data.fds = (struct pollfd *) realloc(_thread_run->poll_data.fds,
d110 2
a111 2
			_thread_run->poll_data.fds = data.fds;
			_thread_run->poll_data.nfds = MAX(128, fd_count);
d116 1
a116 1
		data.fds = _thread_run->poll_data.fds;
d149 2
a150 2
			_thread_run->data.poll_data = &data;
			_thread_run->interrupted = 0;
d152 1
a152 1
			if (_thread_run->interrupted) {
@


1.3
log
@sync with FreeBSD
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_select.c,v 1.2 1999/01/06 05:29:26 d Exp $
d37 2
d40 1
d43 1
a51 1
	fd_set          read_locks, write_locks, rdwr_locks;
d53 3
a55 4
	struct timeval  zero_timeout = {0, 0};
	int             i, ret = 0, got_all_locks = 1;
	int		f_wait = 1;
	struct pthread_select_data data;
d62 6
d80 1
a80 5
	FD_ZERO(&read_locks);
	FD_ZERO(&write_locks);
	FD_ZERO(&rdwr_locks);

	/* lock readfds */
d83 4
a86 22
			if ((readfds && (FD_ISSET(i, readfds))) || (exceptfds && FD_ISSET(i, exceptfds))) {
				if (writefds && FD_ISSET(i, writefds)) {
					if ((ret = _FD_LOCK(i, FD_RDWR, NULL)) != 0) {
						got_all_locks = 0;
						break;
					}
					FD_SET(i, &rdwr_locks);
				} else {
					if ((ret = _FD_LOCK(i, FD_READ, NULL)) != 0) {
						got_all_locks = 0;
						break;
					}
					FD_SET(i, &read_locks);
				}
			} else {
				if (writefds && FD_ISSET(i, writefds)) {
					if ((ret = _FD_LOCK(i, FD_WRITE, NULL)) != 0) {
						got_all_locks = 0;
						break;
					}
					FD_SET(i, &write_locks);
				}
d90 59
a148 29
	if (got_all_locks) {
		data.nfds = numfds;
		FD_ZERO(&data.readfds);
		FD_ZERO(&data.writefds);
		FD_ZERO(&data.exceptfds);
		if (readfds != NULL) {
			memcpy(&data.readfds, readfds, sizeof(data.readfds));
		}
		if (writefds != NULL) {
			memcpy(&data.writefds, writefds, sizeof(data.writefds));
		}
		if (exceptfds != NULL) {
			memcpy(&data.exceptfds, exceptfds, sizeof(data.exceptfds));
		}
		if ((ret = _thread_sys_select(data.nfds, &data.readfds, &data.writefds, &data.exceptfds, &zero_timeout)) == 0 && f_wait) {
			data.nfds = numfds;
			FD_ZERO(&data.readfds);
			FD_ZERO(&data.writefds);
			FD_ZERO(&data.exceptfds);
			if (readfds != NULL) {
				memcpy(&data.readfds, readfds, sizeof(data.readfds));
			}
			if (writefds != NULL) {
				memcpy(&data.writefds, writefds, sizeof(data.writefds));
			}
			if (exceptfds != NULL) {
				memcpy(&data.exceptfds, exceptfds, sizeof(data.exceptfds));
			}
			_thread_run->data.select_data = &data;
d153 1
a158 10
	/* clean up the locks */
	for (i = 0; i < numfds; i++)
		if (FD_ISSET(i, &read_locks))
			_FD_UNLOCK(i, FD_READ);
	for (i = 0; i < numfds; i++)
		if (FD_ISSET(i, &rdwr_locks))
			_FD_UNLOCK(i, FD_RDWR);
	for (i = 0; i < numfds; i++)
		if (FD_ISSET(i, &write_locks))
			_FD_UNLOCK(i, FD_WRITE);
d161 15
a175 5
		if (readfds != NULL) {
			for (i = 0; i < numfds; i++) {
				if (FD_ISSET(i, readfds) &&
					!FD_ISSET(i, &data.readfds)) {
					FD_CLR(i, readfds);
d178 8
a185 6
		}
		if (writefds != NULL) {
			for (i = 0; i < numfds; i++) {
				if (FD_ISSET(i, writefds) &&
					!FD_ISSET(i, &data.writefds)) {
					FD_CLR(i, writefds);
d188 9
a196 6
		}
		if (exceptfds != NULL) {
			for (i = 0; i < numfds; i++) {
				if (FD_ISSET(i, exceptfds) &&
					!FD_ISSET(i, &data.exceptfds)) {
					FD_CLR(i, exceptfds);
d199 2
d202 1
@


1.2
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d51 1
d64 2
d117 1
a117 1
		if ((ret = _thread_sys_select(data.nfds, &data.readfds, &data.writefds, &data.exceptfds, &zero_timeout)) == 0) {
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

