head	1.23;
access;
symbols
	OPENBSD_5_2:1.22.0.10
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.8
	OPENBSD_5_0:1.22.0.6
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.4
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.2
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.19.0.8
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.4
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.2
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10;
locks; strict;
comment	@ * @;


1.23
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.22;

1.22
date	2010.07.12.03.52.52;	author guenther;	state Exp;
branches;
next	1.21;

1.21
date	2009.12.06.17.54.59;	author kurt;	state Exp;
branches;
next	1.20;

1.20
date	2009.10.21.15.32.01;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2008.04.04.19.30.41;	author kurt;	state Exp;
branches;
next	1.18;

1.18
date	2007.11.20.19.35.37;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.27.12.59.24;	author kurt;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.10.13.04.37;	author kurt;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.07.14.08.46;	author kurt;	state Exp;
branches;
next	1.14;

1.14
date	2006.09.26.14.18.28;	author kurt;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.22.19.04.33;	author kurt;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.30.03.37.34;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.06.21.08.05;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.06.07.17.09;	author d;	state Exp;
branches;
next	1.8;

1.8
date	99.11.30.03.16.01;	author d;	state Exp;
branches;
next	1.7;

1.7
date	99.11.25.07.01.35;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.06.15.00.07.39;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.05.26.00.18.23;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.01.17.23.46.26;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.06.05.29.23;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.19;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.03;	author d;	state Exp;
branches;
next	;


desc
@@


1.23
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_fork.c,v 1.22 2010/07/12 03:52:52 guenther Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_fork.c,v 1.14 1999/09/29 15:18:38 marcel Exp $
 */
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

pid_t _dofork(int vfork);

pid_t
fork(void)
{
	pid_t pid;
	struct pthread_atfork *af;

	/*
	 * Defer signals to protect the scheduling queues from access
	 * by the signal handler:
	 */
	_thread_kern_sig_defer();

	pthread_mutex_lock(&_atfork_mutex);

	/* Run down atfork prepare handlers. */
	TAILQ_FOREACH_REVERSE(af, &_atfork_list, atfork_head, qe) {
		if (af->prepare != NULL)
			af->prepare();
	}

	if ((pid = _dofork(0)) == 0) {
		/* Run down atfork child handlers. */
		TAILQ_FOREACH(af, &_atfork_list, qe) {
			if (af->child != NULL)
				af->child();
		}
		_mutex_reinit(&_atfork_mutex);
	} else {
		/* Run down atfork parent handlers. */
		TAILQ_FOREACH(af, &_atfork_list, qe) {
			if (af->parent != NULL)
				af->parent();
		}
		pthread_mutex_unlock(&_atfork_mutex);
	}

	/*
	 * Undefer and handle pending signals, yielding if necessary:
	 */
	_thread_kern_sig_undefer();

	return(pid);
}

pid_t
_dofork(int vfork)
{
	struct pthread	*curthread = _get_curthread();
	int             i, flags;
	pid_t           ret;
	pthread_t	pthread;

	/* Fork a new process and reset child's state */
	if ((ret = (vfork ? _thread_sys_vfork() : _thread_sys_fork())) == 0) {
		/* Close the pthread kernel pipe: */
		_thread_sys_close(_thread_kern_pipe[0]);
		_thread_sys_close(_thread_kern_pipe[1]);

		/* Reset signals pending for the running thread: */
		sigemptyset(&curthread->sigpend);

		/*
		 * Create a pipe that is written to by the signal handler to
		 * prevent signals being missed in calls to
		 * _thread_sys_select: 
		 */
		if (_thread_sys_pipe(_thread_kern_pipe) != 0) {
			/* Cannot create pipe, so abort: */
			PANIC("Cannot create pthread kernel pipe for forked process");
		}
		/* Get the flags for the read pipe: */
		else if ((flags = _thread_sys_fcntl(_thread_kern_pipe[0], F_GETFL, NULL)) == -1) {
			/* Abort this application: */
			abort();
		}
		/* Make the read pipe non-blocking: */
		else if (_thread_sys_fcntl(_thread_kern_pipe[0], F_SETFL, flags | O_NONBLOCK) == -1) {
			/* Abort this application: */
			abort();
		}
		/* Get the flags for the write pipe: */
		else if ((flags = _thread_sys_fcntl(_thread_kern_pipe[1], F_GETFL, NULL)) == -1) {
			/* Abort this application: */
			abort();
		}
		/* Make the write pipe non-blocking: */
		else if (_thread_sys_fcntl(_thread_kern_pipe[1], F_SETFL, flags | O_NONBLOCK) == -1) {
			/* Abort this application: */
			abort();
		}
		/* Reinitialize the GC mutex: */
		else if (_mutex_reinit(&_gc_mutex) != 0) {
			/* Abort this application: */
			PANIC("Cannot initialize GC mutex for forked process");
		}
		/* Reinitialize the GC condition variable: */
		else if (_cond_reinit(&_gc_cond) != 0) {
			/* Abort this application: */
			PANIC("Cannot initialize GC condvar for forked process");
		}
		/* Initialize the ready queue: */
		else if (_pq_init(&_readyq) != 0) {
			/* Abort this application: */
			PANIC("Cannot initialize priority ready queue.");
		} else {
			/*
			 * Enter a loop to remove all threads other than
			 * the running thread from the thread list:
			 */
			while ((pthread = TAILQ_FIRST(&_thread_list)) != NULL) {
				TAILQ_REMOVE(&_thread_list, pthread, tle);

				/* Make sure this isn't the running thread: */
				if (pthread != curthread) {
					/* XXX should let gc do all this. */
					if(pthread->stack != NULL)
						_thread_stack_free(pthread->stack);

					if (pthread->specific_data != NULL)
						free(pthread->specific_data);

					if (pthread->poll_data.fds != NULL)
						free(pthread->poll_data.fds);

					free(pthread);
				}
			}

			/* Restore the running thread */
			TAILQ_INSERT_HEAD(&_thread_list, curthread, tle);

			/* Re-init the dead thread list: */
			TAILQ_INIT(&_dead_list);

			/* Re-init the waiting and work queues. */
			TAILQ_INIT(&_waitingq);
			TAILQ_INIT(&_workq);

			/* Re-init the threads mutex queue: */
			TAILQ_INIT(&curthread->mutexq);

			/* no one is joining the remaining thread */
			curthread->joiner = NULL;

			/* single threaded now */
			__isthreaded = 0;

			/* No spinlocks yet: */
			_spinblock_count = 0;

			/* Don't queue signals yet: */
			_queue_signals = 0;

			/* Initialize signal handling: */
			_thread_sig_init();

			/* Initialize the scheduling switch hook routine: */
			_sched_switch_hook = NULL;

			/* Clear out any locks in the file descriptor table: */
			for (i = 0; i < _thread_max_fdtsize; i++) {
				if (_thread_fd_table[i] != NULL) {
					/* Initialise the file locks: */
					_thread_fd_table[i]->r_owner = NULL;
					_thread_fd_table[i]->w_owner = NULL;
					_thread_fd_table[i]->r_fname = NULL;
					_thread_fd_table[i]->w_fname = NULL;
					_thread_fd_table[i]->r_lineno = 0;
					_thread_fd_table[i]->w_lineno = 0;
					_thread_fd_table[i]->r_lockcount = 0;
					_thread_fd_table[i]->w_lockcount = 0;

					/*
					 * If a fd was in the process of closing
					 * then finish closing it.
					 */
					if (_thread_fd_table[i]->state == FD_ENTRY_CLOSING) {
						 _thread_fd_entry_close(i);
						 _thread_sys_close(i);
					}

					/* Initialise the read/write queues: */
					TAILQ_INIT(&_thread_fd_table[i]->r_queue);
					TAILQ_INIT(&_thread_fd_table[i]->w_queue);
				}
			}
		}
	}

	/* Return the process ID: */
	return (ret);
}
#endif
@


1.22
log
@After forking, clear the 'thread joining this one' pointer in the child,
as the child only has the one thread remaining.

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.21 2009/12/06 17:54:59 kurt Exp $	*/
@


1.21
log
@Make internal file descriptor handling async-signal safe by eliminating
the use of spinlocks and malloc. All needed memory is allocated upfront
and _thread_kern_sig_defer/undefer() is now used to protect critical
sections. okay guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.20 2009/10/21 15:32:01 guenther Exp $	*/
d186 3
@


1.20
log
@After forking, the child is single threaded, so tell libc that.  This
is needed to avoid deadlocks in popen() on FILE locking.

ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.19 2008/04/04 19:30:41 kurt Exp $	*/
a205 1
					_SPINLOCK_INIT(&_thread_fd_table[i]->lock);
d214 1
a214 2
					if (_thread_fd_table[i]->status_flags != NULL)
						_SPINLOCK_INIT(&_thread_fd_table[i]->status_flags->lock);
@


1.19
log
@- do not call pthread_atfork(3) handlers when a multithreaded program
calls vfork(2). "untested, but looks OK" marc@@
- document vfork(2), popen(3) and system(3) don't call atfork handlers
in multithreaded programs. okay jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.18 2007/11/20 19:35:37 deraadt Exp $	*/
d186 3
@


1.18
log
@make pthread vfork() not call fork(), but actually call vfork().  our
vfork() has only one semantic: "parent stalls until child does execve
or exit" and no other semantic.  it is unfair to act as if pthread
vfork() suddenly lacks that semantic.
ok kurt millert kettenis beck
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.17 2007/04/27 12:59:24 kurt Exp $	*/
d49 1
a49 7
	return (_dofork(0));
}

pid_t
_dofork(int vfork)
{
	struct pthread	*curthread = _get_curthread();
a50 3
	int             i, flags;
	pid_t           ret;
	pthread_t	pthread;
d66 8
a73 2
	/* Fork a new process: */
	if ((ret = (vfork ? _thread_sys_vfork() : _thread_sys_fork())) != 0) {
d80 20
a99 1
	} else {
a228 6
		/* Run down atfork child handlers. */
		TAILQ_FOREACH(af, &_atfork_list, qe) {
			if (af->child != NULL)
				af->child();
		}
		_mutex_reinit(&_atfork_mutex);
a229 5

	/*
	 * Undefer and handle pending signals, yielding if necessary:
	 */
	_thread_kern_sig_undefer();
@


1.17
log
@Use rlimit nofiles max to size fd/fdp tables instead of cur. Fixes
applications that increase nofiles using setrlimit(2). ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.16 2007/04/10 13:04:37 kurt Exp $	*/
d44 2
d49 6
d76 1
a76 1
	if ((ret = _thread_sys_fork()) != 0) {
@


1.16
log
@Revert previous commit which introduced regressions in KDE.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.15 2007/04/07 14:08:46 kurt Exp $	*/
d176 1
a176 1
			for (i = 0; i < _thread_dtablesize; i++) {
@


1.15
log
@Upon fork() set the child's view of the stored file status flags inherited
from the parent to all non-blocking. This prevents the child from restoring
the file to be blocking upon close() and causing the parent to deadlock
when it later attempts to utilize the blocking fd. Corrects the netbeans
build failure caused by the jdk forkAndExec() function that replaces the
std fd's before execvp(). okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.14 2006/09/26 14:18:28 kurt Exp $	*/
d188 1
a188 1
					if (_thread_fd_table[i]->status_flags != NULL) {
a189 3
						/* make sure child doesn't set fd to blocking upon close */
						_thread_fd_table[i]->status_flags->flags |= O_NONBLOCK;
					}
@


1.14
log
@Part 2 of file descriptor race and deadlock corrections.

Adjust design of file descriptor table to eliminate races
with both opening and closing of file descriptor entries
and eliminates one class of deadlocks. One nice side effect
of this change in design should be better performance for
applications that open and close many file descriptors due
to reduced fd_table_lock contention and fd entry reuse.

- Add entry states to manage use of entry and eliminate
some closing races. fd entries are not deallocated upon
close() now.
- Call _thread_fd_table_init with one of five discreet
modes to properly initialize an entry and manage the
state transition to open.
- When closing an entry hold the entry spinlock locked
across the state transition and the _thread_sys_close
call to close another race.
- Introduce a new lock type FD_RDWR_CLOSE that transitions
either a closed entry or an open entry into closing state
and then waits for a RDWR lock so that the lock queue can
unwind normally. All subsequent fd lock attempts for that
entry are rejected with EBADF until the fd is fully closed,
or reopened by dup2(). Once a thread holds the FD_RDWR_LOCK
it is safe to close() it or dup2() on it.
- When a thread creates a new fd there is a window of time
when another thread could attempt to use the fd before the
creating thread has initialized the entry for it. This can
result in improper status_flags for the entry, so record
the entries init mode, detect when this has happened and
correct the status_flags when needed.

reviewed by marc@@ & brad@@, tested by several, okay brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.13 2006/09/22 19:04:33 kurt Exp $	*/
d188 1
a188 1
					if (_thread_fd_table[i]->status_flags != NULL)
d190 3
@


1.13
log
@Part 1 of file descriptor race and deadlock corrections.

File status flags should be shared for dup'ed file descriptors.
However fd_table_entry's should not be shared for dup'ed file
descriptors so they can be independently be closed without
interfering with dup'ed fd's.

- split out file status flags into its own structure
fs_flags to manage sharing of status flags between
dup'ed file descriptors.
- when duplicating a fd, initialize a new fd_table_entry
for the new fd, but share the status flags via status_flags.
- consolidate the code that sets the underlying system fd
to be non-blocking to a new function _thread_fs_flags_init()
- consolidate the code that sets the underlying system
fd back to blocking into a new function _thread_fs_flags_replace()

This change is needed as a prerequisite to the coming race
and deadlock corrections. okay marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.12 2005/10/30 03:37:34 brad Exp $	*/
d190 8
@


1.12
log
@Add pthread_atfork(3)

From FreeBSD

'looks ok' fgsch@@ miod@@
man page reviewed by jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.11 2003/08/06 21:08:05 millert Exp $	*/
d188 2
@


1.11
log
@Remove some double semicolons (hmm, do two semis equal a maxi?).
I've skipped the GNU stuff for now.  From Patrick Latifi.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.10 2001/08/21 19:24:53 fgsch Exp $	*/
d48 1
d59 8
d69 6
a74 1
		/* Parent process or error. Nothing to do here. */
d195 6
@


1.10
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.9 2000/01/06 07:17:09 d Exp $	*/
d170 4
a173 4
					_thread_fd_table[i]->r_lineno = 0;;
					_thread_fd_table[i]->w_lineno = 0;;
					_thread_fd_table[i]->r_lockcount = 0;;
					_thread_fd_table[i]->w_lockcount = 0;;
@


1.9
log
@include stdlib.h
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.8 1999/11/30 03:16:01 d Exp $	*/
d47 1
d67 1
a67 1
		sigemptyset(&_thread_run->sigpend);
d121 1
a121 1
				if (pthread != _thread_run) {
d137 1
a137 1
			TAILQ_INSERT_HEAD(&_thread_list, _thread_run, tle);
d147 1
a147 1
			TAILQ_INIT(&_thread_run->mutexq);
@


1.8
log
@really remove all other threads when fork()ing. (bug was in removing elements from a list whilest walking it)
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_fork.c,v 1.7 1999/11/25 07:01:35 d Exp $	*/
d39 1
@


1.7
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a48 1
	pthread_t	pthread_save;
d115 2
a116 10
			pthread = TAILQ_FIRST(&_thread_list);
			while (pthread != NULL) {
				/* Save the thread to be freed: */
				pthread_save = pthread;

				/*
				 * Advance to the next thread before
				 * destroying the current thread:
				 */
				pthread = TAILQ_NEXT(pthread, dle);
d119 4
a122 4
				if (pthread_save != _thread_run) {
					/* Remove this thread from the list: */
					TAILQ_REMOVE(&_thread_list,
					    pthread_save, tle);
d124 2
a125 2
					if(pthread_save->stack != NULL)
						_thread_stack_free(pthread_save->stack);
d127 2
a128 2
					if (pthread_save->specific_data != NULL)
						free(pthread_save->specific_data);
d130 1
a130 4
					if (pthread_save->poll_data.fds != NULL)
						free(pthread_save->poll_data.fds);

					free(pthread_save);
d133 3
@


1.6
log
@Remove pthread_atfork(). It was only part of draft 10 for a little while and was removed before stddization.
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_fork.c,v 1.5 1999/05/26 00:18:23 d Exp $
a38 1
#include <stdlib.h>
d49 1
a49 1
	pthread_t	pthread_next;
d51 5
a55 2
	/* Lock the thread list: */
	_lock_thread_list();
d66 1
a66 1
		_thread_run->sigpend = 0;
d96 11
d108 1
a108 2
		} else if (_pq_init(&_readyq, PTHREAD_MIN_PRIORITY,
		     PTHREAD_MAX_PRIORITY) != 0) {
d110 1
a110 1
			PANIC("Cannot allocate priority ready queue.");
a111 3
			/* Point to the first thread in the list: */
			pthread = _thread_link_list;

d116 1
d118 17
a134 12
				pthread_next = pthread->nxt;
				if (pthread == _thread_run) {
					_thread_link_list = pthread;
					pthread->nxt = NULL;
				} else {
					if (pthread->attr.stackaddr_attr ==
					    NULL && pthread->stack != NULL)
						/*
						 * Free the stack of the
						 * dead thread:
						 */
						free(pthread->stack);
d136 2
a137 2
					if (pthread->specific_data != NULL)
						free(pthread->specific_data);
d139 4
a142 1
					free(pthread);
d144 1
d146 2
a147 3
				/* Point to the next thread: */
				pthread = pthread_next;
			}
d149 1
a149 1
			/* Re-init the waiting queues. */
d151 13
d172 1
a172 1
					_SPINUNLOCK(&_thread_fd_table[i]->lock);
d183 2
a184 2
					_thread_queue_init(&_thread_fd_table[i]->r_queue);
					_thread_queue_init(&_thread_fd_table[i]->w_queue);
d190 4
a193 2
	/* Unock the thread list: */
	_unlock_thread_list();
@


1.5
log
@sync with FreeBSD
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_fork.c,v 1.4 1999/01/17 23:46:26 d Exp $
a50 3
	/* Call atfork handlers: */
	_thread_atfork(PTHREAD_ATFORK_PREPARE);

a56 2
		if (ret > 0)
			_thread_atfork(PTHREAD_ATFORK_PARENT);
a154 3

			/* Initialise the atfork handler: */
			_thread_atfork(PTHREAD_ATFORK_CHILD);
@


1.4
log
@pthread_atfork()
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_fork.c,v 1.3 1999/01/06 05:29:23 d Exp $
d46 1
a46 1
	int             flags;
d98 5
d134 28
@


1.3
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d51 3
d60 2
d129 1
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d32 1
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d36 1
a37 1
#include <fcntl.h>
a45 1
	int             status;
d107 1
a107 1
					    NULL && pthread->stack != NULL) {
d113 1
a113 1
					}
d116 1
@

