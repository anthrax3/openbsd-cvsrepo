head	1.14;
access;
symbols
	OPENBSD_5_2:1.13.0.40
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.38
	OPENBSD_5_0:1.13.0.36
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.34
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.32
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.28
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.30
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.26
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.24
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.22
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.20
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.18
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.16
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.14
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.12
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.10
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.8
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.6
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.4
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13;
locks; strict;
comment	@ * @;


1.14
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.13;

1.13
date	2003.01.31.04.46.17;	author marc;	state Exp;
branches;
next	1.12;

1.12
date	2002.09.12.23.21.42;	author marc;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.04.22.17.45;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.30.17.47.57;	author todd;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.30.07.40.47;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.06.07.22.04;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.11.25.07.01.46;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.05.26.00.18.26;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.01.10.23.13.24;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.12.23.22.49.47;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.21;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.25;	author d;	state Exp;
branches;
next	;


desc
@@


1.14
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_spinlock.c,v 1.13 2003/01/31 04:46:17 marc Exp $	*/
/*
 * Copyright (c) 1997 John Birrell <jb@@cimlogic.com.au>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_spinlock.c,v 1.7 1999/08/28 00:03:52 peter Exp $
 *
 */

#include <stdio.h>
#include <sched.h>
#include <unistd.h>
#include <pthread.h>
#include <string.h>
#include "pthread_private.h"

extern char *__progname;

/*
 * Lock a location for the running thread. Yield to allow other
 * threads to run if this thread is blocked because the lock is
 * not available.
 */
void
_spinlock(spinlock_t *lck)
{
	struct pthread	*curthread = _get_curthread();

	/*
	 * Try to grab the lock and loop if another thread grabs
	 * it before we do.
	 */
	while(_atomic_lock(&lck->access_lock)) {
		/* Block the thread until the lock. */
		curthread->data.spinlock = lck;
		_thread_kern_sched_state(PS_SPINBLOCK, __FILE__, __LINE__);
	}

	/* The running thread now owns the lock: */
	lck->lock_owner = curthread;
}

/*
 * Lock a location for the running thread. Yield to allow other
 * threads to run if this thread is blocked because the lock is
 * not available. Note that this function does not sleep. It
 * assumes that the lock will be available very soon.
 *
 * This function checks if the running thread has already locked the
 * location, warns if this occurs and creates a thread dump before
 * returning.
 */
void
_spinlock_debug(spinlock_t *lck, const char *fname, int lineno)
{
	struct pthread	*curthread = _get_curthread();
	int cnt = 0;

	/*
	 * Try to grab the lock and loop if another thread grabs
	 * it before we do.
	 */
	while(_atomic_lock(&lck->access_lock)) {
		cnt++;
		if (cnt > 100) {
			char str[256];
			snprintf(str, sizeof(str), "%s - Warning: Thread %p attempted to lock %p from %s (%d) was left locked from %s (%d)\n", __progname, curthread, lck, fname, lineno, lck->fname, lck->lineno);
			_thread_sys_write(2,str,strlen(str));
			sleep(1);
			cnt = 0;
		}

		/* Block the thread until the lock. */
		curthread->data.spinlock = lck;
		_thread_kern_sched_state(PS_SPINBLOCK, fname, lineno);
	}

	/* The running thread now owns the lock: */
	lck->lock_owner = curthread;
	lck->fname = fname;
	lck->lineno = lineno;
}
@


1.13
log
@
Create a siginfo_t for thread-to-thread kill.
Clean up (compiler warning elimination).   Compile check options added
but commented out as they have not been checked on all architectures, yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_spinlock.c,v 1.12 2002/09/12 23:21:42 marc Exp $	*/
@


1.12
log
@remove erroneous comment
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_spinlock.c,v 1.11 2001/09/04 22:17:45 fgsch Exp $	*/
d81 1
a81 1
_spinlock_debug(spinlock_t *lck, char *fname, int lineno)
@


1.11
log
@put changes back, this time ALL the files.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_spinlock.c,v 1.10 2001/08/30 17:47:57 todd Exp $	*/
d49 1
a49 2
 * not available. Note that this function does not sleep. It
 * assumes that the lock will be available very soon.
@


1.10
log
@Back out fgsch@@'s tree breaking commits.
Test next time, ok?
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_spinlock.c,v 1.9 2001/08/30 07:40:47 fgsch Exp $	*/
d82 1
a82 1
_spinlock_debug(spinlock_t *lck, const char *fname, int lineno)
@


1.9
log
@fix some const warnings.
more sync with freebsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_spinlock.c,v 1.8 2001/08/21 19:24:53 fgsch Exp $	*/
d82 1
a82 1
_spinlock_debug(spinlock_t *lck, char *fname, int lineno)
@


1.8
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_spinlock.c,v 1.7 2000/01/06 07:22:04 d Exp $	*/
d82 1
a82 1
_spinlock_debug(spinlock_t *lck, const char *fname, int lineno)
@


1.7
log
@kill silly casts to (long)
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_spinlock.c,v 1.6 1999/11/25 07:01:46 d Exp $	*/
d55 2
d63 1
a63 1
		_thread_run->data.spinlock = lck;
d68 1
a68 1
	lck->lock_owner = _thread_run;
d84 1
d95 1
a95 1
			snprintf(str, sizeof(str), "%s - Warning: Thread %p attempted to lock %p from %s (%d) was left locked from %s (%d)\n", __progname, _thread_run, lck, fname, lineno, lck->fname, lck->lineno);
d102 1
a102 1
		_thread_run->data.spinlock = lck;
d107 1
a107 1
	lck->lock_owner = _thread_run;
@


1.6
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 1
a66 1
	lck->lock_owner = (long) _thread_run;
d104 1
a104 1
	lck->lock_owner = (long) _thread_run;
@


1.5
log
@sync with FreeBSD
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 2
 * $FreeBSD: uthread_spinlock.c,v 1.5 1999/03/23 05:07:56 jb Exp $
 * $OpenBSD: uthread_spinlock.c,v 1.4 1999/01/10 23:13:24 d Exp $
d66 1
a66 1
	lck->lock_owner = _thread_run;
d104 1
a104 1
	lck->lock_owner = _thread_run;
@


1.4
log
@no need to cast any more
@
text
@d32 2
a33 2
 * $FreeBSD: uthread_spinlock.c,v 1.4 1998/06/09 23:13:10 jb Exp $
 * $OpenBSD: uthread_spinlock.c,v 1.3 1998/12/23 22:49:47 d Exp $
d60 3
a62 6
		/* Give up the time slice: */
		sched_yield();

		/* Check if already locked by the running thread: */
		if (lck->lock_owner == _thread_run)
			return;
d82 2
d89 2
a90 5
		/* Give up the time slice: */
		sched_yield();

		/* Check if already locked by the running thread: */
		if (lck->lock_owner == _thread_run) {
d92 1
a92 1
			snprintf(str, sizeof(str), "%s - Warning: Thread %p attempted to lock %p from %s (%d) which it had already locked in %s (%d)\n", __progname, _thread_run, lck, fname, lineno, lck->fname, lck->lineno);
d94 3
d98 3
a100 4
			/* Create a thread dump to help debug this problem: */
			_thread_dump_info();
			return;
		}
@


1.3
log
@preserve FreeBSD idents
@
text
@d33 1
a33 1
 * $OpenBSD: uthread_spinlock.c,v 1.2 1998/11/09 03:13:21 d Exp $
d64 1
a64 1
		if (lck->lock_owner == (long) _thread_run)
d69 1
a69 1
	lck->lock_owner = (long) _thread_run;
d94 1
a94 1
		if (lck->lock_owner == (long) _thread_run) {
d106 1
a106 1
	lck->lock_owner = (long) _thread_run;
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d32 2
a33 2
 * $Id: uthread_spinlock.c,v 1.1 1998/08/27 09:01:25 d Exp $
 * $OpenBSD: uthread_spinlock.c,v 1.1 1998/08/27 09:01:25 d Exp $
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 2
a33 2
 * $Id: uthread_spinlock.c,v 1.4 1998/06/09 23:13:10 jb Exp $
 * $OpenBSD$
d40 1
a41 1
#include <pthread.h>
d83 1
a83 1
_spinlock_debug(spinlock_t *lck, char *fname, int lineno)
@

