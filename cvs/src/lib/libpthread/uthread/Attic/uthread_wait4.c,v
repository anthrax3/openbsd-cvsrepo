head	1.8;
access;
symbols
	OPENBSD_5_2:1.7.0.40
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.38
	OPENBSD_5_0:1.7.0.36
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.34
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.32
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.28
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.30
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.26
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.24
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.22
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.20
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.18
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.16
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.14
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.12
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.10
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.8
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.6
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7;
locks; strict;
comment	@ * @;


1.8
date	2012.09.01.00.32.24;	author guenther;	state dead;
branches;
next	1.7;

1.7
date	2001.11.09.00.20.26;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	99.11.25.07.01.47;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.06.09.07.16.17;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.17.23.57.28;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.29;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.29;	author d;	state Exp;
branches;
next	;


desc
@@


1.8
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_wait4.c,v 1.7 2001/11/09 00:20:26 marc Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_wait4.c,v 1.5 1999/08/28 00:03:53 peter Exp $
 */
#include <errno.h>
#include <sys/wait.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

/*
 * Note: a thread calling wait4 may have its state changed to waiting
 * until awakened by a signal.  Also note that system(3), for example,
 * blocks SIGCHLD and calls waitpid (which calls wait4).  If the process
 * started by system(3) doesn't finish before this function is called the
 * function will never awaken -- system(3) also ignores SIGINT and SIGQUIT.
 *
 * Thus always unmask SIGCHLD here.
 */
pid_t
wait4(pid_t pid, int *istat, int options, struct rusage * rusage)
{
	struct pthread	*curthread = _get_curthread();
	pid_t           ret;
	sigset_t	mask, omask;

	/* This is a cancellation point: */
	_thread_enter_cancellation_point();

	_thread_kern_sig_defer();

	sigemptyset(&mask);
	sigaddset(&mask, SIGCHLD);
	sigprocmask(SIG_UNBLOCK, &mask, &omask);

	/* Perform a non-blocking wait4 syscall: */
	while ((ret = _thread_sys_wait4(pid, istat, options | WNOHANG, rusage)) == 0 && (options & WNOHANG) == 0) {
		/* Reset the interrupted operation flag: */
		curthread->interrupted = 0;

		/* Schedule the next thread while this one waits: */
		_thread_kern_sched_state(PS_WAIT_WAIT, __FILE__, __LINE__);

		/* Check if this call was interrupted by a signal: */
		if (curthread->interrupted) {
			errno = EINTR;
			ret = -1;
			break;
		}
	}

	sigprocmask(SIG_SETMASK, &omask, NULL);

	_thread_kern_sig_undefer();

	/* No longer in a cancellation point: */
	_thread_leave_cancellation_point();

	return (ret);
}
#endif
@


1.7
log
@Fix problem found by espie (and other porters) where
system(...) hangs forever.   From a comment in the fix:

 * Note: a thread calling wait4 may have its state changed to waiting
 * until awakened by a signal.  Also note that system(3), for example,
 * blocks SIGCHLD and calls waitpid (which calls wait4).  If the process
 * started by system(3) doesn't finish before this function is called the
 * function will never awaken -- system(3) also ignores SIGINT and SIGQUIT.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_wait4.c,v 1.6 2001/08/21 19:24:53 fgsch Exp $	*/
@


1.6
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_wait4.c,v 1.5 1999/11/25 07:01:47 d Exp $	*/
d41 9
d55 1
d62 4
d81 2
@


1.5
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
d55 1
a55 1
		_thread_run->interrupted = 0;
d61 1
a61 1
		if (_thread_run->interrupted) {
@


1.4
log
@document cancellation point handling a bit better
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_wait4.c,v 1.3 1999/01/17 23:57:28 d Exp $
d49 2
d66 2
@


1.3
log
@pthread_cancel() and cancellation points
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_wait4.c,v 1.2 1999/01/06 05:29:29 d Exp $
d45 1
d47 1
d63 2
d66 1
@


1.2
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d45 1
d61 1
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

