head	1.26;
access;
symbols
	OPENBSD_5_2:1.25.0.10
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.8
	OPENBSD_5_0:1.25.0.6
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.4
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.2
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.23.0.6
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.23.0.2
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.22.0.2
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.21.0.14
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.12
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.10
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.8
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.6
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.4
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.21.0.2
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.20.0.4
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.2
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.18.0.2
	OPENBSD_3_3_BASE:1.18;
locks; strict;
comment	@ * @;


1.26
date	2012.09.01.00.32.23;	author guenther;	state dead;
branches;
next	1.25;

1.25
date	2010.07.13.04.24.46;	author guenther;	state Exp;
branches;
next	1.24;

1.24
date	2009.07.25.02.09.20;	author kurt;	state Exp;
branches;
next	1.23;

1.23
date	2008.12.18.09.30.32;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2008.07.07.04.59.22;	author guenther;	state Exp;
branches;
next	1.21;

1.21
date	2005.01.23.19.23.47;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.16.22.51.11;	author brad;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.08.00.17.19;	author marc;	state Exp;
branches;
next	1.18;

1.18
date	2001.12.31.18.23.15;	author fgsch;	state Exp;
branches;
next	1.17;

1.17
date	2001.12.11.00.19.47;	author fgsch;	state Exp;
branches;
next	1.16;

1.16
date	2001.12.08.14.51.36;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.04.05.55.35;	author d;	state Exp;
branches;
next	1.13;

1.13
date	2000.01.06.07.15.05;	author d;	state Exp;
branches;
next	1.12;

1.12
date	99.11.30.04.51.56;	author d;	state Exp;
branches;
next	1.11;

1.11
date	99.11.25.07.01.33;	author d;	state Exp;
branches;
next	1.10;

1.10
date	99.05.26.00.18.23;	author d;	state Exp;
branches;
next	1.9;

1.9
date	99.05.12.06.00.00;	author d;	state Exp;
branches;
next	1.8;

1.8
date	99.03.10.10.06.22;	author d;	state Exp;
branches;
next	1.7;

1.7
date	99.02.01.08.23.46;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.01.17.23.57.27;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.01.06.05.29.22;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.12.21.07.41.31;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.11.20.12.13.32;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.19;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.58;	author d;	state Exp;
branches;
next	;


desc
@@


1.26
log
@   So passes uthreads
Like autumn leaves on water
   don't fear the tedu@@
@
text
@/*	$OpenBSD: uthread_create.c,v 1.25 2010/07/13 04:24:46 guenther Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_create.c,v 1.19 1999/08/28 00:03:28 peter Exp $
 */
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <stddef.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/mman.h>
#ifdef _THREAD_SAFE
#include <machine/reg.h>
#include <pthread.h>
#include "pthread_private.h"

/* Symbols that help gdb find the information it needs. */
int _thread_next_offset = offsetof(struct pthread, tle.tqe_next);
int _thread_state_offset = offsetof(struct pthread, state);
int _thread_ctx_offset = offsetof(struct pthread, _machdep);

int
pthread_create(pthread_t *thread, const pthread_attr_t *attr,
	       void *(*start_routine) (void *), void *arg)
{
	struct pthread	*curthread = _get_curthread();
	struct itimerval itimer;
	int		f_gc = 0;
	int             ret = 0;
	pthread_t       gc_thread;
	pthread_t       new_thread;
	pthread_attr_t	pattr;
	struct stack   *stack;

	if (thread == NULL)
		return(EINVAL);

	/*
	 * Locking functions in libc are required when there are
	 * threads other than the initial thread.
	 */
	__isthreaded = 1;

	/* Allocate memory for the thread structure: */
	if ((new_thread = (pthread_t) malloc(sizeof(struct pthread))) == NULL) {
		/* Insufficient memory to create a thread: */
		ret = EAGAIN;
	} else {
		/* Check if default thread attributes are required: */
		if (attr == NULL || *attr == NULL) {
			/* Use the default thread attributes: */
			pattr = &pthread_attr_default;
		} else {
			pattr = *attr;
		}

		/* Allocate a stack: */
		stack = _thread_stack_alloc(pattr->stackaddr_attr,
		    pattr->stacksize_attr, pattr->guardsize_attr);
		if (stack == NULL) {
			ret = EAGAIN;
			free(new_thread);
		}

		/* Check for errors: */
		if (ret != 0) {
		} else {
			/* Initialise the thread structure: */
			memset(new_thread, 0, sizeof(struct pthread));
			_SPINLOCK_INIT(&new_thread->lock);
			new_thread->slice_usec = -1;
			new_thread->sig_saved = 0;
			new_thread->stack = stack;
			new_thread->start_routine = start_routine;
			new_thread->arg = arg;

			new_thread->cancelflags = PTHREAD_CANCEL_ENABLE |
			    PTHREAD_CANCEL_DEFERRED;

			/*
			 * Write a magic value to the thread structure
			 * to help identify valid ones:
			 */
			new_thread->magic = PTHREAD_MAGIC;

			/* Initialise the thread for signals: */
			new_thread->sigmask = curthread->sigmask;

			/*
			 * Set up new stack frame so that it 'returns' to
			 * the beginning of _thread_start() after it is
			 * switched to:
			 */
			_thread_machdep_init(&new_thread->_machdep,
			    stack->base, stack->size, _thread_start);

			/* Copy the thread attributes: */
			memcpy(&new_thread->attr, pattr, sizeof(struct pthread_attr));

			/*
			 * Check if this thread is to inherit the scheduling
			 * attributes from its parent:
			 */
			if (new_thread->attr.flags & PTHREAD_INHERIT_SCHED) {
				/* Copy the scheduling attributes: */
				new_thread->base_priority =
				    curthread->base_priority &
				    ~PTHREAD_SIGNAL_PRIORITY;
				new_thread->attr.prio =
				    curthread->base_priority &
				    ~PTHREAD_SIGNAL_PRIORITY;
				new_thread->attr.sched_policy =
				    curthread->attr.sched_policy;
			} else {
				/*
				 * Use just the thread priority, leaving the
				 * other scheduling attributes as their
				 * default values:
				 */
				new_thread->base_priority =
				    new_thread->attr.prio;
			}
			new_thread->active_priority = new_thread->base_priority;
			new_thread->inherited_priority = 0;

			/* Initialize joiner to NULL (no joiner): */
			new_thread->joiner = NULL;

			/* Initialize the mutex queue: */
			TAILQ_INIT(&new_thread->mutexq);

			/* Initialise hooks in the thread structure: */
			new_thread->specific_data = NULL;
			new_thread->cleanup = NULL;
			new_thread->flags = 0;
			new_thread->poll_data.nfds = 0;
			new_thread->poll_data.fds = NULL;
			new_thread->continuation = NULL;

			/*
			 * Defer signals to protect the scheduling queues
			 * from access by the signal handler:
			 */
			_thread_kern_sig_defer();

			/*
			 * Check if the garbage collector thread
			 * needs to be started.
			 */
			f_gc = (TAILQ_FIRST(&_thread_list) == _thread_initial
			    && start_routine != _thread_gc);

			/* Add the thread to the linked list of all threads: */
			TAILQ_INSERT_HEAD(&_thread_list, new_thread, tle);

			if (pattr->suspend == PTHREAD_CREATE_SUSPENDED)
				new_thread->state = PS_SUSPENDED;
			else {
				new_thread->state = PS_RUNNING;
				PTHREAD_PRIOQ_INSERT_TAIL(new_thread);
			}

			/*
			 * Undefer and handle pending signals, yielding
			 * if necessary.
			 */
			_thread_kern_sig_undefer();

			/* Return a pointer to the thread structure: */
			if (thread != NULL)
				(*thread) = new_thread;

			if (f_gc != 0) {
				/* Install the scheduling timer: */
				itimer.it_interval.tv_sec = 0;
				itimer.it_interval.tv_usec = _clock_res_usec;
				itimer.it_value = itimer.it_interval;
				if (setitimer(_ITIMER_SCHED_TIMER, &itimer,
				    NULL) != 0)
					PANIC("Cannot set interval timer");
			}

			/* Schedule the new user thread: */
			_thread_kern_sched(NULL);

			/*
			 * Start a garbage collector thread
			 * if necessary.
			 */
			if (f_gc && pthread_create(&gc_thread,NULL,
				    _thread_gc,NULL) != 0)
				PANIC("Can't create gc thread");

		}
	}

	/* Return the status: */
	return (ret);
}

void
_thread_start(void)
{
	struct pthread	*curthread = _get_curthread();

	/* We just left the scheduler via longjmp: */
	_thread_kern_in_sched = 0;

	/* Run the current thread's start routine with argument: */
	pthread_exit(curthread->start_routine(curthread->arg));

	/* This point should never be reached. */
	PANIC("Thread has resumed after exit");
}
#endif
@


1.25
log
@Fix PR 6417: if we're starting a thread and there's no other threads
running, then we need to start a gc thread...except when this is
the very call to start a gc thread!

"This works for me" marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.24 2009/07/25 02:09:20 kurt Exp $	*/
@


1.24
log
@- add a symbol to help gdb location pthread internals (_thread_ctx_offset)
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.23 2008/12/18 09:30:32 guenther Exp $	*/
d182 2
a183 1
			f_gc = (TAILQ_FIRST(&_thread_list) == _thread_initial);
@


1.23
log
@Add pthread_attr_[sg]etguardsize() to match rthread, including manpages
Bump lib minor

ok otto@@ kurt@@ marc@@; doc review by jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.22 2008/07/07 04:59:22 guenther Exp $	*/
d52 1
@


1.22
log
@Application-specified thread stacks didn't work with libpthread
because it treated the supplied memory as holding an internal data
structure instead of as the stack space itself

ok kurt@@, "looks ok" otto@@, tested on hppa by kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.21 2005/01/23 19:23:47 kettenis Exp $	*/
d90 1
a90 1
		    pattr->stacksize_attr);
@


1.21
log
@Add debug support.
ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.20 2004/02/16 22:51:11 brad Exp $	*/
d87 1
a87 3
		/* Check if a stack was specified in the thread attributes: */
		if ((stack = pattr->stackaddr_attr) != NULL) {
		}
d89 5
a93 7
		else {
			stack = _thread_stack_alloc(pattr->stackaddr_attr,
			    pattr->stacksize_attr);
			if (stack == NULL) {
				ret = EAGAIN;
				free(new_thread);
			}
@


1.20
log
@fixes function parameters to match the man page as well
as adding a more aggressive arguement check.

From: FreeBSD's libc_r.

ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.19 2003/07/08 00:17:19 marc Exp $	*/
d40 1
d48 4
@


1.19
log
@remove variable never read
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.18 2001/12/31 18:23:15 fgsch Exp $	*/
d49 1
a49 1
pthread_create(pthread_t * thread, const pthread_attr_t * attr,
d60 3
@


1.18
log
@More changes from FreeBSD, including:

o Only poll file descriptors when needed.
o Change the way timing is achieved, counting scheduling ticks
  instead of calculating the elapsed time via gettimeofday().
o Prevent an overflow when polling.
o Use curthread instead of _thread_run.
o Remove extra spaces; indent.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.17 2001/12/11 00:19:47 fgsch Exp $	*/
a114 1
			new_thread->sigmask_seqno = 0;
@


1.17
log
@More sync with freebsd code; join related code this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.16 2001/12/08 14:51:36 fgsch Exp $	*/
d53 1
d79 11
a89 5
		/* Create a stack from the specified attributes: */
		if ((stack = _thread_stack_alloc(pattr->stackaddr_attr,
		    pattr->stacksize_attr)) == NULL) {
			ret = EAGAIN;
			free(new_thread);
d103 1
d115 1
d130 1
a130 1
			 * attributes from its parent: 
d134 8
a141 6
				new_thread->base_priority
				    = curthread->base_priority;
				new_thread->attr.prio
				    = curthread->base_priority;
				new_thread->attr.sched_policy
				    = curthread->attr.sched_policy;
d146 1
a146 1
				 * default values: 
d148 2
a149 2
				new_thread->base_priority
				    = new_thread->attr.prio;
d183 4
a186 5
			if (pattr->suspend == PTHREAD_CREATE_SUSPENDED) {
				PTHREAD_SET_STATE(new_thread, PS_SUSPENDED);
				PTHREAD_WAITQ_INSERT(new_thread);
			} else {
				PTHREAD_SET_STATE(new_thread, PS_RUNNING);
d200 10
d220 1
@


1.16
log
@Partially sync with FreeBSD; mostly pthread_cancel(3) related changes.
make includes is needed in case you want to play.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.15 2001/08/21 19:24:53 fgsch Exp $	*/
d143 2
a144 2
			/* Initialise the join queue for the new thread: */
			TAILQ_INIT(&(new_thread->join_queue));
@


1.15
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.14 2000/10/04 05:55:35 d Exp $	*/
d96 2
a97 2
			new_thread->cancelstate = PTHREAD_CANCEL_ENABLE;
			new_thread->canceltype = PTHREAD_CANCEL_DEFERRED;
d155 1
@


1.14
log
@switch to _machdep_switch() instead of setjmp/longjmp. For some reason this fixes sparc threads.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.13 2000/01/06 07:15:05 d Exp $	*/
d52 1
d106 1
a106 1
			new_thread->sigmask = _thread_run->sigmask;
d126 1
a126 1
				    = _thread_run->base_priority;
d128 1
a128 1
				    = _thread_run->base_priority;
d130 1
a130 1
				    = _thread_run->attr.sched_policy;
d209 2
d215 1
a215 1
	pthread_exit(_thread_run->start_routine(_thread_run->arg));
@


1.13
log
@unused vars
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.12 1999/11/30 04:51:56 d Exp $	*/
a106 3
			/* Initialise the jump buffer: */
			_thread_machdep_setjmp(new_thread->saved_jmp_buf);

d108 3
a110 3
			 * Set up new stack frame so that it looks like it
			 * returned from a longjmp() to the beginning of
			 * _thread_start().
d112 2
a113 2
			_thread_machdep_thread_create(new_thread, _thread_start,
			    pattr);
@


1.12
log
@set state of new threads using correct macro. This makes debugging a bit easier.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_create.c,v 1.11 1999/11/25 07:01:33 d Exp $	*/
a52 1
	int             i;
a53 1
	int             status;
@


1.11
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d176 1
a176 1
				new_thread->state = PS_SUSPENDED;
d179 1
a179 1
				new_thread->state = PS_RUNNING;
@


1.10
log
@sync with FreeBSD
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_create.c,v 1.9 1999/05/12 06:00:00 d Exp $
d41 2
a46 1
#include "thread_private.h"
d53 1
d55 1
d59 1
a59 1
	void           *stack;
d79 3
a81 6
		/* Check if a stack was specified in the thread attributes: */
		if ((stack = pattr->stackaddr_attr) != NULL) {
		}
		/* Allocate memory for the stack: */
		else if ((stack = (void *) malloc(pattr->stacksize_attr)) == NULL) {
			/* Insufficient memory to create a thread: */
d85 1
d91 1
a96 6
#ifdef _THREAD_RUSAGE
			timerclear(&new_thread->ru_utime);
			timerclear(&new_thread->ru_stime);
#endif
			_SPINUNLOCK(&new_thread->lock);

a105 6
			if (pattr->suspend == PTHREAD_CREATE_SUSPENDED) {
				PTHREAD_NEW_STATE(new_thread,PS_SUSPENDED);
			} else {
				PTHREAD_NEW_STATE(new_thread,PS_RUNNING);
			}

d117 2
a118 2

			_thread_machdep_thread_create(new_thread, _thread_start, pattr);
d129 6
a134 3
				new_thread->base_priority = _thread_run->base_priority;
				new_thread->attr.prio = _thread_run->base_priority;
				new_thread->attr.sched_policy = _thread_run->attr.sched_policy;
d141 2
a142 1
				new_thread->base_priority = new_thread->attr.prio;
d148 1
a148 1
			_thread_queue_init(&(new_thread->join_queue));
a155 2
			new_thread->queue = NULL;
			new_thread->qnxt = NULL;
d157 2
d160 5
a164 2
			/* Lock the thread list: */
			_lock_thread_list();
d170 1
a170 1
			f_gc = (_thread_link_list == _thread_initial);
d173 1
a173 12
			new_thread->nxt = _thread_link_list;
			_thread_link_list = new_thread;

			/* Unlock the thread list: */
			_unlock_thread_list();

			/*
			 * Guard against preemption by a scheduling signal.
			 * A change of thread state modifies the waiting
			 * and priority queues.
			 */
			_thread_kern_sched_defer();
d184 2
a185 2
			 * Reenable preemption and yield if a scheduling
			 * signal occurred while in the critical region.
d187 1
a187 1
			_thread_kern_sched_undefer();
@


1.9
log
@permit NULL result parameter for pthread_create(). Apparently used in Stevens?
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_create.c,v 1.8 1999/03/10 10:06:22 d Exp $
d138 3
a140 3
				new_thread->pthread_priority = _thread_run->pthread_priority;
				new_thread->attr.prio = _thread_run->pthread_priority;
				new_thread->attr.schedparam_policy = _thread_run->attr.schedparam_policy;
d147 1
a147 1
				new_thread->pthread_priority = new_thread->attr.prio;
d149 2
d155 3
d180 21
@


1.8
log
@extra includes for Wall
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_create.c,v 1.7 1999/02/01 08:23:46 d Exp $
d177 2
a178 1
			(*thread) = new_thread;
@


1.7
log
@don't compute resource usage. this speeds things up a lot
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_create.c,v 1.6 1999/01/17 23:57:27 d Exp $
d42 2
@


1.6
log
@pthread_cancel() and cancellation points
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_create.c,v 1.5 1999/01/06 05:29:22 d Exp $
d92 1
d95 1
@


1.5
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d96 3
d115 1
a115 1
			setjmp(new_thread->saved_jmp_buf);
@


1.4
log
@resource accounting
@
text
@d32 1
d94 1
@


1.3
log
@sync with freebsd
@
text
@d91 2
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d49 1
a49 1
	pthread_t	gc_thread;
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d47 1
a47 1
	int             i;
d49 1
a49 1
	int             status;
d152 6
d170 8
d188 3
@

