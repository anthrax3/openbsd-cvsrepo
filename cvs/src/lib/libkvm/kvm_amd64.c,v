head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.12
	OPENBSD_5_0:1.7.0.10
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.8
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.6
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.12.19.18.40.30;	author mmcc;	state Exp;
branches;
next	1.12;
commitid	VyFkUl2aDcMyfbMJ;

1.12
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	0DYulI8hhujBHMcR;

1.11
date	2013.11.01.15.57.56;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.28.16.27.31;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2012.12.05.23.20.02;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.09.08.43.10;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.30.21.16.14;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.02.05.16.56;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.08.18.54.12;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.20.15.11.48;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.15.03.52.59;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.05.16.45.55;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.17.36.13;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove NULL-checks before free(). ok tb@@
@
text
@/*	$OpenBSD: kvm_amd64.c,v 1.12 2015/01/16 16:48:51 deraadt Exp $	*/
/*	$NetBSD: kvm_x86_64.c,v 1.3 2002/06/05 22:01:55 fvdl Exp $	*/

/*-
 * Copyright (c) 1989, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software developed by the Computer Systems
 * Engineering group at Lawrence Berkeley Laboratory under DARPA contract
 * BG 91-66 and contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * x86-64 machine dependent routines for kvm.
 */

#include <sys/param.h>	/* MAXCOMLEN */
#include <sys/proc.h>
#include <sys/stat.h>
#include <sys/kcore.h>
#include <machine/kcore.h>
#include <stdlib.h>
#include <unistd.h>
#include <nlist.h>
#include <kvm.h>

#include <uvm/uvm_extern.h>

#include <limits.h>
#include <db.h>

#include "kvm_private.h"

#include <machine/pmap.h>
#include <machine/pte.h>
#include <machine/vmparam.h>

void
_kvm_freevtop(kvm_t *kd)
{
	/* Not actually used for anything right now, but safe. */
	free(kd->vmst);
	kd->vmst = NULL;
}

/*ARGSUSED*/
int
_kvm_initvtop(kvm_t *kd)
{

	return (0);
}

/*
 * Translate a kernel virtual address to a physical address.
 */
int
_kvm_kvatop(kvm_t *kd, u_long va, paddr_t *pa)
{
	cpu_kcore_hdr_t *cpu_kh;
	paddr_t pde_pa, pte_pa;
	u_long page_off;
	pd_entry_t pde;
	pt_entry_t pte;

	if (ISALIVE(kd)) {
		_kvm_err(kd, 0, "vatop called in live kernel!");
		return (0);
	}

	page_off = va & (kd->nbpg - 1);

	if (va >= PMAP_DIRECT_BASE && va <= PMAP_DIRECT_END) {
		*pa = va - PMAP_DIRECT_BASE;
		return (int)(kd->nbpg - page_off);
	}

	cpu_kh = kd->cpu_data;

	/*
	 * Find and read all entries to get to the pa.
	 */

	/*
	 * Level 4.
	 */
	pde_pa = cpu_kh->ptdpaddr + (pl4_pi(va) * sizeof(pd_entry_t));
	if (pread(kd->pmfd, (void *)&pde, sizeof(pde),
	    _kvm_pa2off(kd, pde_pa)) != sizeof(pde)) {
		_kvm_syserr(kd, 0, "could not read PT level 4 entry");
		goto lose;
	}
	if ((pde & PG_V) == 0) {
		_kvm_err(kd, 0, "invalid translation (invalid level 4 PDE)");
		goto lose;
	}

	/*
	 * Level 3.
	 */
	pde_pa = (pde & PG_FRAME) + (pl3_pi(va) * sizeof(pd_entry_t));
	if (pread(kd->pmfd, (void *)&pde, sizeof(pde),
	    _kvm_pa2off(kd, pde_pa)) != sizeof(pde)) {
		_kvm_syserr(kd, 0, "could not read PT level 3 entry");
		goto lose;
	}
	if ((pde & PG_V) == 0) {
		_kvm_err(kd, 0, "invalid translation (invalid level 3 PDE)");
		goto lose;
	}

	/*
	 * Level 2.
	 */
	pde_pa = (pde & PG_FRAME) + (pl2_pi(va) * sizeof(pd_entry_t));
	if (pread(kd->pmfd, (void *)&pde, sizeof(pde),
	    _kvm_pa2off(kd, pde_pa)) != sizeof(pde)) {
		_kvm_syserr(kd, 0, "could not read PT level 2 entry");
		goto lose;
	}
	if ((pde & PG_V) == 0) {
		_kvm_err(kd, 0, "invalid translation (invalid level 2 PDE)");
		goto lose;
	}

	/*
	 * Might be a large page.
	 */
	if ((pde & PG_PS) != 0) {
		page_off = va & (NBPD_L2 - 1);
		*pa = (pde & PG_LGFRAME) | page_off;
		return (int)(NBPD_L2 - page_off);
	}

	/*
	 * Level 1.
	 */
	pte_pa = (pde & PG_FRAME) + (pl1_pi(va) * sizeof(pt_entry_t));
	if (pread(kd->pmfd, (void *) &pte, sizeof(pte),
	    _kvm_pa2off(kd, pte_pa)) != sizeof(pte)) {
		_kvm_syserr(kd, 0, "could not read PTE");
		goto lose;
	}
	/*
	 * Validate the PTE and return the physical address.
	 */
	if ((pte & PG_V) == 0) {
		_kvm_err(kd, 0, "invalid translation (invalid PTE)");
		goto lose;
	}
	*pa = (pte & PG_FRAME) + page_off;
	return (int)(kd->nbpg - page_off);

 lose:
	*pa = (u_long)~0L;
	return (0);
}

/*
 * Translate a physical address to a file-offset in the crash dump.
 */
off_t
_kvm_pa2off(kvm_t *kd, paddr_t pa)
{
	cpu_kcore_hdr_t *cpu_kh;
	phys_ram_seg_t *ramsegs;
	off_t off;
	int i;

	cpu_kh = kd->cpu_data;
	ramsegs = (void *)((char *)(void *)cpu_kh + ALIGN(sizeof *cpu_kh));

	off = 0;
	for (i = 0; i < cpu_kh->nmemsegs; i++) {
		if (pa >= ramsegs[i].start &&
		    (pa - ramsegs[i].start) < ramsegs[i].size) {
			off += (pa - ramsegs[i].start);
			break;
		}
		off += ramsegs[i].size;
	}

	if (i == cpu_kh->nmemsegs)
		_kvm_err(kd, 0, "pa %lx not in dump", pa);

	return (kd->dump_off + off);
}
@


1.12
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.11 2013/11/01 15:57:56 deraadt Exp $	*/
a64 1

d66 2
a67 4
	if (kd->vmst != NULL) {
		free(kd->vmst);
		kd->vmst = NULL;
	}
@


1.11
log
@reduce use of <sys/user.h>
ok guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.10 2013/03/28 16:27:31 deraadt Exp $	*/
d41 1
a41 1
#include <sys/param.h>
@


1.10
log
@Avoid using PAGE_SHIFT, PAGE_SIZE, and PAGE_MASK defines, since we already
know it from the machine.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.9 2012/12/05 23:20:02 deraadt Exp $	*/
a41 1
#include <sys/user.h>
@


1.9
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.8 2012/07/09 08:43:10 deraadt Exp $	*/
d99 1
a99 1
	page_off = va & PAGE_MASK;
d103 1
a103 1
		return (int)(PAGE_SIZE - page_off);
d180 1
a180 1
	return (int)(PAGE_SIZE - page_off);
@


1.8
log
@Use the PAGE_* forms (instead of the ancient BSD forms) in param.h,
because param.h will get a kick in the head sometime in the future.
One day, maybe both can become invisible, but we boot one of them
first.
ok guenter
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.7 2009/03/30 21:16:14 kettenis Exp $	*/
a35 2

#include <sys/cdefs.h>
@


1.7
log
@Mop up after oga@@ and unbreak the tree.  The direct uncached map is gone so
remove the code from libkvm that dealt with it.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.6 2009/01/02 05:16:56 miod Exp $	*/
d101 1
a101 1
	page_off = va & PGOFSET;
d105 1
a105 1
		return (int)(NBPG - page_off);
d182 1
a182 1
	return (int)(NBPG - page_off);
@


1.6
log
@Sync _kvm_kvatop with existing pmap code: handle direct mappings and
level 2 large pages.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.5 2007/01/08 18:54:12 deraadt Exp $	*/
a104 5
		return (int)(NBPG - page_off);
	}

	if (va >= PMAP_DIRECT_BASE_NC && va <= PMAP_DIRECT_END_NC) {
		*pa = va - PMAP_DIRECT_BASE_NC;
@


1.5
log
@the advertising clause on these can safely be removed
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.4 2006/03/20 15:11:48 mickey Exp $	*/
d101 12
a113 1
	page_off = va & PGOFSET;
d161 8
d217 3
@


1.4
log
@for some of internal functions use paddr_t where phys addr is intended insteadd of u_long; miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.3 2004/06/15 03:52:59 deraadt Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@knf; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.2 2004/05/05 16:45:55 marc Exp $	*/
d92 1
a92 1
_kvm_kvatop(kvm_t *kd, u_long va, u_long *pa)
d183 1
a183 1
_kvm_pa2off(kvm_t *kd, u_long pa)
@


1.2
log
@fix va -> pa decode. 'by all means' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_amd64.c,v 1.1 2004/02/27 17:36:13 deraadt Exp $	*/
d70 1
a70 2
_kvm_freevtop(kd)
	kvm_t *kd;
d74 1
a74 1
	if (kd->vmst != 0)
d76 2
d82 1
a82 2
_kvm_initvtop(kd)
	kvm_t *kd;
d92 1
a92 4
_kvm_kvatop(kd, va, pa)
	kvm_t *kd;
	u_long va;
	u_long *pa;
d95 1
a98 1
	paddr_t pde_pa, pte_pa;
d183 1
a183 3
_kvm_pa2off(kd, pa)
	kvm_t *kd;
	u_long pa;
@


1.1
log
@change amd64's MACHINE_ARCH from x86_64 to amd64.  There are many many
reasons for this, quite a few of them technical, and not all of them
in response to Intel's broken ia32e crud.  The gcc toolchain stays at
x86_64 for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_x86_64.c,v 1.1 2004/01/28 01:51:40 mickey Exp $	*/
d118 1
a118 1
	pde_pa = cpu_kh->ptdpaddr + (pl4_i(va) * sizeof(pd_entry_t));
d132 1
a132 1
	pde_pa = (pde_pa + PG_FRAME) + (pl3_i(va) * sizeof(pd_entry_t));
d146 1
a146 1
	pde_pa = (pde_pa & PG_FRAME) + (pl2_i(va) * sizeof(pd_entry_t));
d161 1
a161 1
	pte_pa = (pde_pa & PG_FRAME) + (pl1_i(va) * sizeof(pt_entry_t));
@

