head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.14
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.16
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.12
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.8
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.18
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.16
	OPENBSD_5_0:1.7.0.14
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.12
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.10
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2013.11.01.15.57.56;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.28.16.27.31;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2012.12.05.23.20.02;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2008.03.30.14.49.45;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.20.15.11.48;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.15.03.52.59;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.20.18.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.27.26;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.05.02.23.11;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.28.21.49.16;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@reduce use of <sys/user.h>
ok guenther millert
@
text
@/*	$OpenBSD: kvm_sparc64.c,v 1.9 2013/03/28 16:27:31 deraadt Exp $	*/
/*	$NetBSD: kvm_sparc64.c,v 1.7 2001/08/05 03:33:15 matt Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software developed by the Computer Systems
 * Engineering group at Lawrence Berkeley Laboratory under DARPA contract
 * BG 91-66 and contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Sparc machine dependent routines for kvm.  Hopefully, the forthcoming
 * vm code will one day obsolete this module.
 */

#include <sys/param.h>
#include <sys/exec.h>
#include <sys/proc.h>
#include <sys/stat.h>
#include <sys/core.h>
#include <sys/kcore.h>
#include <unistd.h>
#include <nlist.h>
#include <kvm.h>

#include <uvm/uvm_extern.h>

#include <machine/vmparam.h>
#include <machine/pmap.h>
#include <machine/kcore.h>

#include <limits.h>
#include <db.h>

#include "kvm_private.h"

/*
 * UltraSPARC T1 & T2 implement only a 40-bit real address range, just
 * like older UltraSPARC CPUs.
 */
#define TLB_PA_MASK	SUN4U_TLB_PA_MASK

int _kvm_kvatop(kvm_t *, u_long, u_long *);

void
_kvm_freevtop(kvm_t *kd)
{
	if (kd->vmst != NULL) {
		_kvm_err(kd, kd->program, "_kvm_freevtop: internal error");
		kd->vmst = NULL;
	}
}

/*
 * Prepare for translation of kernel virtual addresses into offsets
 * into crash dump files. We use the MMU specific goop written at the
 * front of the crash dump by pmap_dumpmmu().
 *
 * We should read in and cache the ksegs here to speed up operations...
 */
int
_kvm_initvtop(kvm_t *kd)
{
	return (0);
}

/*
 * Translate a kernel virtual address to a physical address using the
 * mapping information in kd->vm.  Returns the result in pa, and returns
 * the number of bytes that are contiguously available from this
 * physical address.  This routine is used only for crashdumps.
 */
int
_kvm_kvatop(kvm_t *kd, u_long va, paddr_t *pa)
{
	cpu_kcore_hdr_t *cpup = kd->cpu_data;
	u_long kernbase = cpup->kernbase;
	uint64_t *pseg, *pdir, *ptbl;
	int64_t data;

	if (va < kernbase)
		goto lose;

	/* Handle the wired 4MB TTEs */
	if (va > cpup->ktextbase && va < (cpup->ktextbase + cpup->ktextsz)) {
		u_long vaddr;

		vaddr = va - cpup->ktextbase;
		*pa = cpup->ktextp + vaddr;
		return (cpup->ktextsz - vaddr);
	}

	if (va > cpup->kdatabase && va < (cpup->kdatabase + cpup->kdatasz)) {
		u_long vaddr;

		vaddr = va - cpup->kdatabase;
		*pa = cpup->kdatap + vaddr;
		return (cpup->kdatasz - vaddr);
	}


	/*
	 * Parse kernel page table.
	 */
	pseg = (uint64_t *)(u_long)cpup->segmapoffset;
	if (pread(kd->pmfd, &pdir, sizeof(pdir),
	    _kvm_pa2off(kd, (u_long)&pseg[va_to_seg(va)])) != sizeof(pdir)) {
		_kvm_syserr(kd, 0, "could not read L1 PTE");
		goto lose;
	}

	if (!pdir) {
		_kvm_err(kd, 0, "invalid L1 PTE");
		goto lose;
	}

	if (pread(kd->pmfd, &ptbl, sizeof(ptbl),
	    _kvm_pa2off(kd, (u_long)&pdir[va_to_dir(va)])) != sizeof(ptbl)) {
		_kvm_syserr(kd, 0, "could not read L2 PTE");
		goto lose;
	}

	if (!ptbl) {
		_kvm_err(kd, 0, "invalid L2 PTE");
		goto lose;
	}

	if (pread(kd->pmfd, &data, sizeof(data),
	    _kvm_pa2off(kd, (u_long)&ptbl[va_to_pte(va)])) != sizeof(data)) {
		_kvm_syserr(kd, 0, "could not read TTE");
		goto lose;
	}

	if (data >= 0) {
		_kvm_err(kd, 0, "invalid L2 TTE");
		goto lose;
	}

	/*
	 * Calculate page offsets and things.
	 *
	 * XXXX -- We could support multiple page sizes.
	 */
	va = va & (kd->nbpg - 1);
	data &= TLB_PA_MASK;
	*pa = data + va;

	/*
	 * Parse and translate our TTE.
	 */
	return (kd->nbpg - va);

lose:
	*pa = -1;
	_kvm_err(kd, 0, "invalid address (%lx)", va);
	return (0);
}


/*
 * Translate a physical address to a file-offset in the crash-dump.
 */
off_t
_kvm_pa2off(kvm_t *kd, paddr_t pa)
{
	cpu_kcore_hdr_t *cpup = kd->cpu_data;
	phys_ram_seg_t *mp;
	off_t off;
	int nmem;

	/*
	 * Layout of CPU segment:
	 *	cpu_kcore_hdr_t;
	 *	[alignment]
	 *	phys_ram_seg_t[cpup->nmemseg];
	 */
	mp = (phys_ram_seg_t *)((long)kd->cpu_data + cpup->memsegoffset);
	off = 0;

	/* Translate (sparse) pfnum to (packed) dump offset */
	for (nmem = cpup->nmemseg; --nmem >= 0; mp++) {
		if (mp->start <= pa && pa < mp->start + mp->size)
			break;
		off += mp->size;
	}
	if (nmem < 0) {
		_kvm_err(kd, 0, "invalid address (%lx)", pa);
		return (-1);
	}

	return (kd->dump_off + off + pa - mp->start);
}
@


1.9
log
@Avoid using PAGE_SHIFT, PAGE_SIZE, and PAGE_MASK defines, since we already
know it from the machine.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sparc64.c,v 1.8 2012/12/05 23:20:02 deraadt Exp $	*/
a43 1
#include <sys/user.h>
@


1.8
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sparc64.c,v 1.7 2008/03/30 14:49:45 kettenis Exp $	*/
a90 2
	kd->nbpg = 0x2000;

@


1.7
log
@Unbreak build.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sparc64.c,v 1.6 2006/03/20 15:11:48 mickey Exp $	*/
a35 2

#include <sys/cdefs.h>
@


1.6
log
@for some of internal functions use paddr_t where phys addr is intended insteadd of u_long; miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sparc64.c,v 1.5 2004/06/15 03:52:59 deraadt Exp $	*/
d65 6
@


1.5
log
@knf; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sparc64.c,v 1.4 2003/06/02 20:18:41 millert Exp $	*/
d99 1
a99 1
_kvm_kvatop(kvm_t *kd, u_long va, u_long *pa)
d189 1
a189 1
_kvm_pa2off(kvm_t *kd, u_long pa)
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sparc64.c,v 1.3 2002/02/16 21:27:26 millert Exp $	*/
d69 1
a69 2
_kvm_freevtop(kd)
	kvm_t *kd;
d71 1
a71 1
	if (kd->vmst != 0) {
d73 1
a73 1
		kd->vmst = 0;
d85 1
a85 2
_kvm_initvtop(kd)
	kvm_t *kd;
d99 1
a99 4
_kvm_kvatop(kd, va, pa)
	kvm_t *kd;
	u_long va;
	u_long *pa;
d132 1
a132 2
		_kvm_pa2off(kd, (u_long)&pseg[va_to_seg(va)])) 
		!= sizeof(pdir)) {
d143 1
a143 2
		_kvm_pa2off(kd, (u_long)&pdir[va_to_dir(va)])) 
		!= sizeof(ptbl)) {
d154 1
a154 2
		_kvm_pa2off(kd, (u_long)&ptbl[va_to_pte(va)])) 
		!= sizeof(data)) {
d163 2
a164 2
	
	/* 
d174 1
a174 1
	 * Parse and trnslate our TTE.
a175 1

d189 1
a189 3
_kvm_pa2off(kd, pa)
	kvm_t   *kd;
	u_long  pa;
a217 1

@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sparc64.c,v 1.2 2001/12/05 02:23:11 art Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@Include more machdep headers. (paranoia)
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sparc64.c,v 1.1 2001/08/28 21:49:16 art Exp $	*/
d70 1
a70 1
int _kvm_kvatop __P((kvm_t *, u_long, u_long *));
@


1.1
log
@sparc64 bits. Not tested yet.
From NetBSD, modified to fit our libkvm.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 1
@

