head	1.16;
access;
symbols
	OPENBSD_5_9:1.15.0.8
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.10
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.13.0.28
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.26
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.24
	OPENBSD_5_0:1.13.0.22
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.20
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.18
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.14
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.16
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.12
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.10
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.8
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.11.0.6
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2016.03.09.16.28.47;	author deraadt;	state dead;
branches;
next	1.15;
commitid	OSDG2O3Cgeifnf1W;

1.15
date	2013.11.01.15.57.56;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.28.16.27.31;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.19.20.25.49;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.20.15.11.48;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2004.09.15.19.31.31;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.01.02.04.10;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.15.03.52.59;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.41;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.05.02.23.11;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.06.19.17.36;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.05.23.04.35;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.16.05.46.09;	author bjc;	state Exp;
branches;
next	1.3;

1.3
date	97.02.26.16.46.35;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.05.14.57.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.44;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.44;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@We are done providing support for the vax.
lots of agreement.
@
text
@/*	$OpenBSD: kvm_vax.c,v 1.15 2013/11/01 15:57:56 deraadt Exp $ */
/*	$NetBSD: kvm_vax.c,v 1.3 1996/03/18 22:34:06 thorpej Exp $ */

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software developed by the Computer Systems
 * Engineering group at Lawrence Berkeley Laboratory under DARPA contract
 * BG 91-66 and contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * VAX machine dependent routines for kvm.  Hopefully, the forthcoming
 * vm code will one day obsolete this module.
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/stat.h>
#include <sys/kcore.h>
#include <unistd.h>
#include <stdlib.h>
#include <nlist.h>
#include <kvm.h>

#include <uvm/uvm_extern.h>
#include <machine/vmparam.h>
#include <machine/kcore.h>
#include <machine/pmap.h>
#include <machine/pte.h>

#include <limits.h>
#include <db.h>

#include "kvm_private.h"

void
_kvm_freevtop(kvm_t *kd)
{
}

int
_kvm_initvtop(kvm_t *kd)
{
	return (0);
}

/*
 * Translate a kernel virtual address to a physical address using the
 * mapping information in kd->vm.  Returns the result in pa, and returns
 * the number of bytes that are contiguously available from this
 * physical address.  This routine is used only for crashdumps.
 */
int
_kvm_kvatop(kvm_t *kd, u_long va, paddr_t *pa)
{
	paddr_t ofs;
	u_long pteaddr;
	pt_entry_t pte;
	cpu_kcore_hdr_t *cpu_kh;

	if (ISALIVE(kd)) {
		_kvm_err(kd, 0, "vatop called in live kernel!");
		return (0);
	}

	if (va < (u_long)KERNBASE) {
		_kvm_err(kd, 0, "invalid address (%lx<%lx)", va, KERNBASE);
		return (0);
	}

	/* read pte from Sysmap */
	cpu_kh = kd->cpu_data;
	pteaddr = (cpu_kh->sysmap - KERNBASE) +
	    PG_PFNUM(va) * sizeof(pt_entry_t);
	if (_kvm_pread(kd, kd->pmfd, (char *)&pte, sizeof(pte),
	    (off_t)_kvm_pa2off(kd, pteaddr)) < 0) {
		_kvm_err(kd, 0, "invalid address (%lx)", va);
		return (0);
	}
	if ((pte & PG_V) == 0) {
		_kvm_err(kd, 0, "invalid pte %lx (address %lx)", pte, va);
		return (0);
	}

	ofs = va & (kd->nbpg - 1);
	*pa = ((pte & PG_FRAME) << VAX_PGSHIFT) | ofs;
	return (int)(kd->nbpg - ofs);
}

/*
 * Translate a physical address to an offset in the crash dump.
 */
off_t
_kvm_pa2off(kvm_t *kd, paddr_t pa)
{
	return (kd->dump_off + pa);
}
@


1.15
log
@reduce use of <sys/user.h>
ok guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.14 2013/03/28 16:27:31 deraadt Exp $ */
@


1.14
log
@Avoid using PAGE_SHIFT, PAGE_SIZE, and PAGE_MASK defines, since we already
know it from the machine.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.13 2006/06/19 20:25:49 miod Exp $ */
a42 1
#include <sys/user.h>
@


1.13
log
@Real kvm routines for vax; allows ``target kvm'' to work in gdb for kernel
crash dumps.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.12 2006/03/20 15:11:48 mickey Exp $ */
d112 1
a112 1
	ofs = va & PAGE_MASK;
d114 1
a114 1
	return (int)(PAGE_SIZE - ofs);
@


1.12
log
@for some of internal functions use paddr_t where phys addr is intended insteadd of u_long; miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.11 2004/09/15 19:31:31 miod Exp $ */
d39 1
a39 3
 * vm code will one day obsolete this module.  Furthermore, I hope it
 * gets here soon, because this basically is an error stub! (sorry)
 * This code may not work anyway.
d46 1
d54 1
d56 1
a62 4
struct vmstate {
	u_long end;
};

a65 4
	if (kd->vmst != NULL) {
		free(kd->vmst);
		kd->vmst = NULL;
	}
a70 23
	struct nlist nlist[2];
	struct vmstate *vm;
	struct stat st;
	int i, off;

	vm = (struct vmstate *)_kvm_malloc(kd, sizeof(*vm));
	if (vm == 0)
		return (-1);

	kd->vmst = vm;

	if (fstat(kd->pmfd, &st) < 0)
		return (-1);

	/* Get end of kernel address */
	nlist[0].n_name = "_end";
	nlist[1].n_name = 0;
	if (kvm_nlist(kd, nlist) != 0) {
		_kvm_err(kd, kd->program, "pmap_stod: no such symbol");
		return (-1);
	}
	vm->end = (u_long)nlist[0].n_value;

a73 2
#define VA_OFF(va) (va & (NBPG - 1))

d83 4
a86 1
	u_long end;
d88 6
a93 1
	if (va < KERNBASE) {
d98 7
a104 2
	if (!kd->vmst) {
		_kvm_err(kd, 0, "vatop called before initvtop");
d107 2
a108 4

	end = kd->vmst->end;
	if (va >= end) {
		_kvm_err(kd, 0, "invalid address (%lx>=%lx)", va, end);
d112 3
a114 2
	*pa = (va - KERNBASE);
	return (end - va);
d118 1
a118 2
 * Translate a physical address to an offset in the crash dump
 * XXX crashdumps not working yet anyway
d123 1
a123 1
	return (kd->dump_off+pa);
@


1.11
log
@Kill (almost all) warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.10 2004/07/01 02:04:10 mickey Exp $ */
d113 1
a113 1
_kvm_kvatop(kvm_t *kd, u_long va, u_long *pa)
d142 1
a142 1
_kvm_pa2off(kvm_t *kd, u_long pa)
@


1.10
log
@if sym has null value -- report as not found; check that kd->vmst is set before use; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.9 2004/06/15 03:52:59 deraadt Exp $ */
d49 1
@


1.9
log
@knf; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.8 2003/06/02 20:18:41 millert Exp $ */
d118 5
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.7 2001/12/05 02:23:11 art Exp $ */
d66 1
a66 2
_kvm_freevtop(kd)
	kvm_t *kd;
d68 1
a68 1
	if (kd->vmst != 0)
d70 2
d75 1
a75 2
_kvm_initvtop(kd)
	kvm_t *kd;
d77 2
a78 3
	register int i;
	register int off;
	register struct vmstate *vm;
d80 1
a80 1
	struct nlist nlist[2];
d108 1
a108 1
 * the number of bytes that are contiguously available from this 
d112 1
a112 4
_kvm_kvatop(kd, va, pa)
	kvm_t *kd;
	u_long va;
	u_long *pa;
d114 1
a114 1
	register u_long end;
d131 1
a131 1
/*  
d136 1
a136 3
_kvm_pa2off(kd, pa)
	kvm_t	*kd;
	u_long	pa;
d138 1
a138 1
	return(kd->dump_off+pa);
@


1.7
log
@Include more machdep headers. (paranoia)
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.6 2001/11/06 19:17:36 art Exp $ */
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@Adapt to new uvm/ includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.5 2001/11/05 23:04:35 art Exp $ */
d57 2
@


1.5
log
@No need to pull in vm/vm_param.h in any of these files.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.4 2001/03/16 05:46:09 bjc Exp $ */
d56 1
a56 1
#include <vm/vm.h>
@


1.4
log
@add a _kvm_pa2off() for vax
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_vax.c,v 1.3 1997/02/26 16:46:35 niklas Exp $ */
a56 1
#include <vm/vm_param.h>
@


1.3
log
@Switch alpha from libkvm.old to libkvm with code from NetBSD.
%x -> %lx format fixes from me.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d136 12
@


1.2
log
@sync with 0430
@
text
@d121 1
a121 1
	register int end;
d124 1
a124 1
		_kvm_err(kd, 0, "invalid address (%x<%x)", va, KERNBASE);
d130 1
a130 1
		_kvm_err(kd, 0, "invalid address (%x>=%x)", va, end);
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
/*	$NetBSD: kvm_vax.c,v 1.2 1995/04/25 15:41:11 ragge Exp $ */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
