head	1.17;
access;
symbols
	OPENBSD_5_4:1.16.0.16
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.14
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.12
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.10
	OPENBSD_5_0:1.16.0.8
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.14.0.12
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.10
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.8
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.6
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2013.10.22.16.40.26;	author guenther;	state dead;
branches;
next	1.16;

1.16
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.20.20.20.43;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.31.03.59.40;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.12.07.24.28;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2004.09.15.19.31.31;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.06.15.03.52.59;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.28.03.16.31;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.26.16.34.53;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.29.20.15.43;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.06.19.17.36;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.05.23.04.35;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.27.09.11.51;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.19.22.01.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.05.14.56.58;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@- add UNIX-domain socket info to struct kinfo_file2
- convert netstat from kvm_getfiles() to kvm_getfile2() using that
- delete kvm_getfiles() and KERN_FILE as no longer used (bump libkvm's major)
- rename kvm_getfile2() to kvm_getfiles(), kinfo_file2 to kinfo_file
  and KERN_FILE2 to KERN_FILE.

ok deraadt@@, millert@@
ports scan sthen@@
@
text
@/*	$OpenBSD: kvm_file.c,v 1.16 2009/10/27 23:59:28 deraadt Exp $ */
/*	$NetBSD: kvm_file.c,v 1.5 1996/03/18 22:33:18 thorpej Exp $	*/

/*-
 * Copyright (c) 1989, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * File list interface for kvm.  pstat, fstat and netstat are
 * users of this code, so we've factored it out into a separate module.
 * Thus, we keep this grunge out of the other kvm applications (i.e.,
 * most other applications are interested only in open/close/read/nlist).
 */

#include <sys/param.h>
#include <sys/user.h>
#include <sys/proc.h>
#include <sys/exec.h>
#define _KERNEL
#include <sys/file.h>
#undef _KERNEL
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <nlist.h>
#include <kvm.h>

#include <sys/sysctl.h>

#include <limits.h>
#include <db.h>
#include <paths.h>

#include "kvm_private.h"

static int kvm_deadfiles(kvm_t *kd, int op, int arg, long filehead_o,
    int nfiles);

/*
 * Get file structures.
 */
static int
kvm_deadfiles(kvm_t *kd, int op, int arg, long filehead_o, int kvm_nfiles)
{
	int buflen = kd->arglen, n = 0;
	char *where = kd->argspc;
	struct file *fp;
	struct filelist kvm_filehead;

	/*
	 * first copyout filehead
	 */
	if (buflen > sizeof (kvm_filehead)) {
		if (KREAD(kd, filehead_o, &kvm_filehead)) {
			_kvm_err(kd, kd->program, "can't read filehead");
			return (0);
		}
		buflen -= sizeof(kvm_filehead);
		where += sizeof(kvm_filehead);
		*(struct filelist *)kd->argspc = kvm_filehead;
	}
	/*
	 * followed by an array of file structures
	 */
	LIST_FOREACH(fp, &kvm_filehead, f_list) {
		if (buflen > sizeof (struct file)) {
			if (KREAD(kd, (long)fp, ((struct file *)where))) {
				_kvm_err(kd, kd->program, "can't read kfp");
				return (0);
			}
			buflen -= sizeof (struct file);
			fp = (struct file *)where;
			where += sizeof (struct file);
			n++;
		}
	}
	if (n != kvm_nfiles) {
		_kvm_err(kd, kd->program, "inconsistent nfiles");
		return (0);
	}
	return (kvm_nfiles);
}

char *
kvm_getfiles(kvm_t *kd, int op, int arg, int *cnt)
{
	struct filelist kvm_filehead;
	struct file *fp, *fplim;
	int mib[2], st, kvm_nfiles;
	size_t size;

	if (ISALIVE(kd)) {
		size = 0;
		mib[0] = CTL_KERN;
		mib[1] = KERN_FILE;
		st = sysctl(mib, 2, NULL, &size, NULL, 0);
		if (st == -1) {
			_kvm_syserr(kd, kd->program, "kvm_getfiles");
			return (0);
		}
		if (kd->argspc == 0)
			kd->argspc = (char *)_kvm_malloc(kd, size);
		else if (kd->arglen < size)
			kd->argspc = (char *)_kvm_realloc(kd, kd->argspc, size);
		if (kd->argspc == 0)
			return (0);
		kd->arglen = size;
		st = sysctl(mib, 2, kd->argspc, &size, NULL, 0);
		if (st == -1 || size < sizeof(kvm_filehead)) {
			_kvm_syserr(kd, kd->program, "kvm_getfiles");
			return (0);
		}
		kvm_filehead = *(struct filelist *)kd->argspc;
		fp = (struct file *)(kd->argspc + sizeof(kvm_filehead));
		fplim = (struct file *)(kd->argspc + size);
		for (kvm_nfiles = 0; LIST_FIRST(&kvm_filehead) && (fp < fplim);
		    kvm_nfiles++, fp++)
			LIST_FIRST(&kvm_filehead) = LIST_NEXT(fp, f_list);
	} else {
		struct nlist nl[3], *p;

		nl[0].n_name = "_filehead";
		nl[1].n_name = "_nfiles";
		nl[2].n_name = 0;

		if (kvm_nlist(kd, nl) != 0) {
			for (p = nl; p->n_type != 0; ++p)
				;
			_kvm_err(kd, kd->program,
				 "%s: no such symbol", p->n_name);
			return (0);
		}
		if (KREAD(kd, nl[0].n_value, &kvm_nfiles)) {
			_kvm_err(kd, kd->program, "can't read nfiles");
			return (0);
		}
		size = sizeof(kvm_filehead) + (kvm_nfiles + 10) * sizeof(struct file);
		if (kd->argspc == 0)
			kd->argspc = (char *)_kvm_malloc(kd, size);
		else if (kd->arglen < size)
			kd->argspc = (char *)_kvm_realloc(kd, kd->argspc, size);
		if (kd->argspc == 0)
			return (0);
		kd->arglen = size;
		kvm_nfiles = kvm_deadfiles(kd, op, arg, nl[1].n_value, kvm_nfiles);
		if (kvm_nfiles == 0)
			return (0);
	}
	*cnt = kvm_nfiles;
	return (kd->argspc);
}
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.15 2009/06/20 20:20:43 millert Exp $ */
@


1.15
log
@Move KREAD define to kvm_private.h
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.14 2006/03/31 03:59:40 deraadt Exp $ */
a31 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)kvm_file.c	8.1 (Berkeley) 6/4/93";
#else
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.14 2006/03/31 03:59:40 deraadt Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.14
log
@careful cleanup following advice from lint.  be very very very careful
with sprinkling in size_t!
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.13 2005/10/12 07:24:28 otto Exp $ */
d37 1
a37 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.13 2005/10/12 07:24:28 otto Exp $";
a67 3

#define KREAD(kd, addr, obj) \
	(kvm_read(kd, addr, obj, sizeof(*obj)) != sizeof(*obj))
@


1.13
log
@Use queue macros instead of directly accessing fields. ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.12 2004/09/15 19:31:31 miod Exp $ */
d37 1
a37 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.12 2004/09/15 19:31:31 miod Exp $";
d79 1
a79 1
kvm_deadfiles(kvm_t *kd, int op, int arg, long filehead_o, int nfiles)
d84 1
a84 1
	struct filelist filehead;
d89 2
a90 2
	if (buflen > sizeof (filehead)) {
		if (KREAD(kd, filehead_o, &filehead)) {
d94 3
a96 3
		buflen -= sizeof (filehead);
		where += sizeof (filehead);
		*(struct filelist *)kd->argspc = filehead;
d101 1
a101 1
	LIST_FOREACH(fp, &filehead, f_list) {
d113 1
a113 1
	if (n != nfiles) {
d117 1
a117 1
	return (nfiles);
d123 1
a123 1
	struct filelist filehead;
d125 1
a125 1
	int mib[2], st, nfiles;
d145 1
a145 1
		if (st == -1 || size < sizeof(filehead)) {
d149 2
a150 2
		filehead = *(struct filelist *)kd->argspc;
		fp = (struct file *)(kd->argspc + sizeof (filehead));
d152 3
a154 3
		for (nfiles = 0; LIST_FIRST(&filehead) && (fp < fplim);
		    nfiles++, fp++)
			LIST_FIRST(&filehead) = LIST_NEXT(fp, f_list);
d169 1
a169 1
		if (KREAD(kd, nl[0].n_value, &nfiles)) {
d173 1
a173 1
		size = sizeof(filehead) + (nfiles + 10) * sizeof(struct file);
d181 2
a182 2
		nfiles = kvm_deadfiles(kd, op, arg, nl[1].n_value, nfiles);
		if (nfiles == 0)
d185 1
a185 1
	*cnt = nfiles;
@


1.12
log
@Kill (almost all) warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.11 2004/06/15 03:52:59 deraadt Exp $ */
d37 1
a37 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.11 2004/06/15 03:52:59 deraadt Exp $";
d101 1
a101 1
	for (fp = filehead.lh_first; fp != 0; fp = fp->f_list.le_next) {
d152 1
a152 1
		for (nfiles = 0; filehead.lh_first && (fp < fplim);
d154 1
a154 1
			filehead.lh_first = fp->f_list.le_next;
@


1.11
log
@knf; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.10 2004/04/28 03:16:31 millert Exp $ */
d37 1
a37 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.10 2004/04/28 03:16:31 millert Exp $";
d81 3
a83 3
	int buflen = kd->arglen, needed = buflen, error, n = 0;
	char *where = kd->argspc, *start = where;
	struct file *fp, file;
@


1.10
log
@Include db.h, not ndbm.h since this uses db routines and not ndbm.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.9 2003/06/26 16:34:53 deraadt Exp $ */
d37 1
a37 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.9 2003/06/26 16:34:53 deraadt Exp $";
d42 1
a42 1
 * File list interface for kvm.  pstat, fstat and netstat are 
d79 1
a79 4
kvm_deadfiles(kd, op, arg, filehead_o, nfiles)
	kvm_t *kd;
	int op, arg, nfiles;
	long filehead_o;
d82 1
a84 2
	register char *where = kd->argspc;
	char *start = where;
d121 1
a121 4
kvm_getfiles(kd, op, arg, cnt)
	kvm_t *kd;
	int op, arg;
	int *cnt;
d123 3
a126 3
	int mib[2], st, nfiles;
	struct file *fp, *fplim;
	struct filelist filehead;
@


1.9
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.8 2003/06/02 20:18:40 millert Exp $ */
d37 1
a37 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.8 2003/06/02 20:18:40 millert Exp $";
d64 1
a64 1
#include <ndbm.h>
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.7 2002/11/29 20:15:43 deraadt Exp $ */
d37 1
a37 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.7 2002/11/29 20:15:43 deraadt Exp $";
d72 3
d78 1
a78 1
static
@


1.7
log
@inconsistant spelling; torh@@bogus.net
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.6 2001/11/06 19:17:36 art Exp $ */
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.6 2001/11/06 19:17:36 art Exp $";
@


1.6
log
@Adapt to new uvm/ includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.5 2001/11/05 23:04:35 art Exp $ */
d41 1
a41 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.5 2001/11/05 23:04:35 art Exp $";
d119 1
a119 1
		_kvm_err(kd, kd->program, "inconsistant nfiles");
@


1.5
log
@No need to pull in vm/vm_param.h in any of these files.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.4 2001/06/27 09:11:51 deraadt Exp $ */
d41 1
a41 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.4 2001/06/27 09:11:51 deraadt Exp $";
a63 2

#include <vm/vm.h>
@


1.4
log
@no more vm/swap_pager.h
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.3 2000/02/19 22:01:31 deraadt Exp $ */
d41 1
a41 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.3 2000/02/19 22:01:31 deraadt Exp $";
a65 1
#include <vm/vm_param.h>
@


1.3
log
@typo; peter@@freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_file.c,v 1.2 1996/05/05 14:56:58 deraadt Exp $ */
d41 1
a41 1
static char *rcsid = "$OpenBSD: kvm_file.c,v 1.2 1996/05/05 14:56:58 deraadt Exp $";
a66 1
#include <vm/swap_pager.h>
@


1.2
log
@sync with 0430
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d41 1
a41 1
static char *rcsid = "$OpenBSD$";
d146 1
a146 1
			_kvm_syserr(kd, kd->program, "kvm_getprocs");
@


1.1
log
@Initial revision
@
text
@d1 3
d38 1
d40 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
