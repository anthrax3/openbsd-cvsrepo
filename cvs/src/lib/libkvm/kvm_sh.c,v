head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.14
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.10
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.12
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.8
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.18
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.16
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.12
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.14
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.10
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.8
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.6
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	SH4_LIBC_20061006:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.03.28.16.27.31;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.20.14.46.45;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.09.08.43.10;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.10.11.51.57;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.03.21.37.27;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.10.22.07.10;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Avoid using PAGE_SHIFT, PAGE_SIZE, and PAGE_MASK defines, since we already
know it from the machine.
ok miod
@
text
@/*	$OpenBSD: kvm_sh.c,v 1.5 2013/03/20 14:46:45 deraadt Exp $	*/

/*
 * Copyright (c) 2007 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice, this permission notice, and the disclaimer below
 * appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/core.h>
#include <sys/kcore.h>
#include <sys/vnode.h>

#include <unistd.h>
#include <stdlib.h>
#include <nlist.h>
#include <kvm.h>

#include <db.h>

#include "kvm_private.h"

#include <machine/cpu.h>
#include <machine/kcore.h>
#include <machine/pte.h>
#include <machine/vmparam.h>

void
_kvm_freevtop(kvm_t *kd)
{
}

int
_kvm_initvtop(kvm_t *kd)
{
	return (0);
}

/*
 * Translate a kernel virtual address to a physical address by walking
 * the kernels page table.
 */

/* Stolen from sys/arch/sh/include/pmap.h we can't really include */
#define	__PMAP_PTP_N		512	/* # of page table page maps 2GB. */
/* Stolen from sys/arch/sh/sh/pmap.c */
#define	__PMAP_PTP_SHIFT	22
#define	__PMAP_PTP_PG_N		(kd->nbpg / sizeof(pt_entry_t))
#define	__PMAP_PTP_INDEX(va)	(((va) >> __PMAP_PTP_SHIFT) & (__PMAP_PTP_N - 1))
#define	__PMAP_PTP_OFSET(va)	((va / kd->nbpg) & (__PMAP_PTP_PG_N - 1))

int
_kvm_kvatop(kvm_t *kd, u_long va, paddr_t *pa)
{
	cpu_kcore_hdr_t *h = kd->cpu_data;
	u_int l1idx, l2idx;
	vaddr_t l2va;
	pt_entry_t l1pte, l2pte;
	off_t pteoffset;

	if (ISALIVE(kd)) {
		_kvm_err(kd, 0, "vatop called in live kernel!");
		return (0);
	}

	/*
	 * P1 and P2 segments addresses are trivial.
	 */
	if (va >= SH3_P1SEG_BASE && va <= SH3_P1SEG_END) {
		*pa = SH3_P1SEG_TO_PHYS(va);
		return (int)((vaddr_t)SH3_P1SEG_END + 1 - va);
	}
	if (va >= SH3_P2SEG_BASE && va <= SH3_P2SEG_END) {
		*pa = SH3_P2SEG_TO_PHYS(va);
		return (int)((vaddr_t)SH3_P2SEG_END + 1 - va);
	}

	/*
	 * P3 segment addresses need kernel page table walk.
	 */
	if (va >= SH3_P3SEG_BASE && va < SH3_P3SEG_END) {
		l1idx = __PMAP_PTP_INDEX(va - VM_MIN_KERNEL_ADDRESS);
		l2idx = __PMAP_PTP_OFSET(va);

		/* read level 1 pte */
		pteoffset = h->kcore_kptp + sizeof(pt_entry_t) * l1idx;
		if (_kvm_pread(kd, kd->pmfd, (char *)&l1pte, sizeof(l1pte),
		    _kvm_pa2off(kd, pteoffset)) != sizeof(l1pte)) {
			_kvm_syserr(kd, 0, "could not read level 1 pte");
			goto bad;
		}

		/* check pte for validity */
		if ((l1pte & PG_V) == 0) {
			_kvm_err(kd, 0, "invalid level 1 pte: no valid bit");
			goto bad;
		}

		l2va = l1pte & PG_PPN;
		if (l2va < SH3_P1SEG_BASE || l2va > SH3_P1SEG_END) {
			_kvm_err(kd, 0, "invalid level 1 pte: out of P1");
			goto bad;
		}

		/* read level 2 pte */
		pteoffset = SH3_P1SEG_TO_PHYS(l2va) +
		    sizeof(pt_entry_t) * l2idx;
		if (_kvm_pread(kd, kd->pmfd, (char *)&l2pte, sizeof(l2pte),
		    _kvm_pa2off(kd, pteoffset)) != sizeof(l2pte)) {
			_kvm_syserr(kd, 0, "could not read level 2 pte");
			goto bad;
		}

		/* check pte for validity */
		if ((l2pte & PG_V) == 0) {
			_kvm_err(kd, 0, "invalid level 2 pte: no valid bit");
			goto bad;
		}

		*pa = (l2pte & PG_PPN) | (va & (kd->nbpg - 1));
		return (kd->nbpg - (va & (kd->nbpg - 1)));
	}

	/*
	 * All other addresses are incorrect.
	 */
	_kvm_err(kd, 0, "not a kernel virtual address");
bad:
	*pa = (paddr_t)-1;
	return (0);
}

/*
 * Translate a physical address to a file offset in the crash dump.
 */
off_t
_kvm_pa2off(kvm_t *kd, paddr_t pa)
{
	cpu_kcore_hdr_t *h = kd->cpu_data;
	phys_ram_seg_t *seg = h->kcore_segs;
	off_t off = kd->dump_off;
	u_int i;

	for (i = h->kcore_nsegs; i != 0; i--) {
		if (pa >= seg->start && pa < seg->start + seg->size)
			return (off + (pa - seg->start));
		off += seg->size;
	}

	_kvm_err(kd, 0, "physical address out of the image (%lx)", pa);
	return (0);
}
@


1.5
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sh.c,v 1.4 2012/07/09 08:43:10 deraadt Exp $	*/
d59 1
a59 1
#define	__PMAP_PTP_PG_N		(PAGE_SIZE / sizeof(pt_entry_t))
d61 1
a61 1
#define	__PMAP_PTP_OFSET(va)	((va >> PAGE_SHIFT) & (__PMAP_PTP_PG_N - 1))
d131 2
a132 2
		*pa = (l2pte & PG_PPN) | (va & PAGE_MASK);
		return (PAGE_SIZE - (va & PAGE_MASK));
@


1.4
log
@Use the PAGE_* forms (instead of the ancient BSD forms) in param.h,
because param.h will get a kick in the head sometime in the future.
One day, maybe both can become invisible, but we boot one of them
first.
ok guenter
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sh.c,v 1.3 2011/04/10 11:51:57 miod Exp $	*/
d160 1
a160 1
	
@


1.3
log
@Pull more headers to avoid warnings about structs being undefined.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_sh.c,v 1.2 2007/03/03 21:37:27 miod Exp $	*/
d61 1
a61 1
#define	__PMAP_PTP_OFSET(va)	((va >> PGSHIFT) & (__PMAP_PTP_PG_N - 1))
@


1.2
log
@Kernel crash dumps and associated libkvm bits for landisk.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d23 1
@


1.1
log
@Initial revision
@
text
@d4 1
a4 2
 * Copyright (c) 2002, Miodrag Vallat.
 * All rights reserved.
d6 4
a9 8
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
d11 7
a17 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d21 2
d26 1
d33 5
a40 4
	if (kd->vmst != NULL) {
		free(kd->vmst);
		kd->vmst = NULL;
	}
d49 13
d65 5
a69 1
	int offset;
d76 64
a139 1
	/* TODO */
d149 12
a160 1
	/* TODO */
a162 1

@


1.1.1.1
log
@Preliminary userland bits for OpenBSD/landisk, many things coming from
NetBSD.
@
text
@@
