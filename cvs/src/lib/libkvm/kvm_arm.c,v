head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.12
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.16
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.14
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.10
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.12
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.8
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.19.18.40.30;	author mmcc;	state Exp;
branches;
next	1.8;
commitid	VyFkUl2aDcMyfbMJ;

1.8
date	2013.03.28.16.27.31;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.20.14.46.45;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.10.12.43.39;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.19.15.49.04;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.20.15.11.48;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.15.19.31.31;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.15.03.52.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.09.04.06.13;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove NULL-checks before free(). ok tb@@
@
text
@/*	$OpenBSD: kvm_arm.c,v 1.8 2013/03/28 16:27:31 deraadt Exp $	*/
/*
 * Copyright (c) 2006 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice, this permission notice, and the disclaimer below
 * appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*-
 * Copyright (C) 1996 Wolfgang Solfrank.
 * Copyright (C) 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ARM machine dependent routines for kvm.
 */

#include <sys/param.h>
#include <sys/core.h>
#include <sys/kcore.h>
#include <sys/vnode.h>

#include <unistd.h>
#include <stdlib.h>
#include <nlist.h>
#include <kvm.h>

#include <db.h>

#include "kvm_private.h"

#include <arm/kcore.h>

void
_kvm_freevtop(kvm_t *kd)
{
	free(kd->vmst);
	kd->vmst = NULL;
}

int
_kvm_initvtop(kvm_t *kd)
{
	return (0);
}

/*
 * Translate a kernel virtual address to a physical address by walking
 * the kernels page table.
 */

int
_kvm_kvatop(kvm_t *kd, u_long va, paddr_t *pa)
{
	cpu_kcore_hdr_t *cpup = kd->cpu_data;

	if (ISALIVE(kd)) {
		_kvm_err(kd, 0, "vatop called in live kernel!");
		return (0);
	}

	/*
	 * This relies upon the kernel text and data being contiguous
	 * in the first memory segment.
	 * Other virtual addresses are not reachable yet.
	 */

	if (va >= cpup->kernelbase + cpup->kerneloffs &&
	    va < cpup->kernelbase + cpup->kerneloffs + cpup->staticsize) {
		*pa = (va - cpup->kernelbase) +
		    (paddr_t)cpup->ram_segs[0].start;
		return (int)(kd->nbpg - (va & (kd->nbpg - 1)));
	}

	_kvm_err(kd, 0, "kvm_vatop: va %x unreachable", va);
	return (0);
}

off_t
_kvm_pa2off(kvm_t *kd, paddr_t pa)
{
	cpu_kcore_hdr_t *cpup = kd->cpu_data;
	phys_ram_seg_t *mp = cpup->ram_segs;
	off_t off = 0;
	int block;

	for (block = 0; block < NPHYS_RAM_SEGS; block++, mp++) {
		if (pa >= mp->start && pa < mp->start + mp->size)
			return (kd->dump_off + off +
			    (off_t)(pa - (paddr_t)mp->start));
		off += (off_t)mp->size;
	}

	_kvm_err(kd, 0, "not a physical address: %x", pa);
	return (-1);
}
@


1.8
log
@Avoid using PAGE_SHIFT, PAGE_SIZE, and PAGE_MASK defines, since we already
know it from the machine.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_arm.c,v 1.7 2013/03/20 14:46:45 deraadt Exp $	*/
d72 2
a73 4
	if (kd->vmst != NULL) {
		free(kd->vmst);
		kd->vmst = NULL;
	}
@


1.7
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_arm.c,v 1.6 2011/04/10 12:43:39 miod Exp $	*/
d109 1
a109 1
		return (int)(PAGE_SIZE - (va & PAGE_MASK));
@


1.6
log
@Pull more headers to avoid warnings about structs being undefined.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_arm.c,v 1.5 2007/05/19 15:49:04 miod Exp $	*/
d130 1
a130 1
	
@


1.5
log
@Kernel crash dump support for arm-based platform, with minimal support in
libkvm, but all the necessary information for a complete _kvm_kvatop() is
available in the crash dump.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_arm.c,v 1.4 2006/03/20 15:11:48 mickey Exp $	*/
d56 1
@


1.4
log
@for some of internal functions use paddr_t where phys addr is intended insteadd of u_long; miod@@ ok
@
text
@d1 17
a17 2
/*	$OpenBSD: kvm_arm.c,v 1.3 2004/09/15 19:31:31 miod Exp $	*/

d54 2
d57 1
d59 3
a62 2
#include <limits.h>
#include <kvm.h>
d66 2
d83 5
d91 21
a111 1
	_kvm_err(kd, 0, "vatop not yet implemented!");
d118 14
a131 2
	_kvm_err(kd, 0, "pa2off not yet implemented!");
	return (0);
@


1.3
log
@Kill (almost all) warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_arm.c,v 1.2 2004/06/15 03:52:59 deraadt Exp $	*/
d63 1
a63 1
_kvm_kvatop(kvm_t *kd, u_long va, u_long *pa)
d70 1
a70 1
_kvm_pa2off(kvm_t *kd, u_long pa)
@


1.2
log
@knf; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_arm.c,v 1.1 2004/02/09 04:06:13 drahn Exp $	*/
d40 1
@


1.1
log
@Stub this out, copied from other archs with this stubbed out.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 2
_kvm_freevtop(kd)
	kvm_t *kd;
d49 1
a49 1
	if (kd->vmst != 0)
d51 2
d56 1
a56 2
_kvm_initvtop(kd)
	kvm_t *kd;
d58 1
a58 1
	return 0;
d62 1
a62 4
_kvm_kvatop(kd, va, pa)
	kvm_t *kd;
	u_long va;
	u_long *pa;
d65 1
a65 1
	return 0;
d69 1
a69 3
_kvm_pa2off(kd, pa)
	kvm_t *kd;
	u_long pa;
d72 1
a72 1
	return 0;
@

