head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.8
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.02.09.22.23.47;	author miod;	state Exp;
branches;
next	1.14;
commitid	Lfw5z449gRTOngvY;

1.14
date	2014.07.11.07.38.05;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	P2pVoGleiInCJYCf;

1.13
date	2013.11.01.15.57.56;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.12.07.18.49.14;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.22.18.20.49;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.22.00.07.02;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2009.06.20.20.20.43;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.18.04.32.05;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.03.19.33.58;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.08.18.54.12;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.29.13.27.21;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.20.15.11.48;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.15.19.31.31;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.22.53.47;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@typo
@
text
@/*	$OpenBSD: kvm_mips64.c,v 1.14 2014/07/11 07:38:05 deraadt Exp $ */
/*	$NetBSD: kvm_mips.c,v 1.3 1996/03/18 22:33:44 thorpej Exp $	*/

/*-
 * Copyright (c) 1989, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software developed by the Computer Systems
 * Engineering group at Lawrence Berkeley Laboratory under DARPA contract
 * BG 91-66 and contributed to Berkeley. Modified for MIPS by Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * MIPS machine dependent routines for kvm.  Hopefully, the forthcoming
 * vm code will one day obsolete this module.
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/stat.h>
#include <sys/sysctl.h>
#include <unistd.h>
#include <stdlib.h>
#include <nlist.h>
#include <kvm.h>

#include <limits.h>
#include <db.h>

#include "kvm_private.h"

#include <machine/cpu.h>
#include <machine/pte.h>
#include <machine/pmap.h>

#include <uvm/uvm_extern.h>

struct vmstate {
	pt_entry_t	*Sysmap;
	u_int		Sysmapsize;
	vaddr_t		Sysmapbase;
	int		pagesize;
	int		pagemask;
	int		pageshift;
};

void
_kvm_freevtop(kvm_t *kd)
{
	if (kd->vmst != 0)
		free(kd->vmst);
}

int
_kvm_initvtop(kvm_t *kd)
{
	struct vmstate *vm;
	struct nlist nl[4];
	struct uvmexp uvmexp;

	vm = (struct vmstate *)_kvm_malloc(kd, sizeof(*vm));
	if (vm == 0)
		return (-1);
	kd->vmst = vm;

	nl[0].n_name = "Sysmap";
	nl[1].n_name = "Sysmapsize";
	nl[2].n_name = "uvmexp";
	nl[3].n_name = 0;

	if (kvm_nlist(kd, nl) != 0) {
		_kvm_err(kd, kd->program, "bad namelist");
		return (-1);
	}
	if (KREAD(kd, (u_long)nl[0].n_value, &vm->Sysmap)) {
		_kvm_err(kd, kd->program, "cannot read Sysmap");
		return (-1);
	}
	if (KREAD(kd, (u_long)nl[1].n_value, &vm->Sysmapsize)) {
		_kvm_err(kd, kd->program, "cannot read Sysmapsize");
		return (-1);
	}
	/*
	 * We are only interested in the first three fields of struct
	 * uvmexp, so do not try to read more than necessary (especially
	 * in case the layout changes).
	 */
	if (kvm_read(kd, (u_long)nl[2].n_value, &uvmexp,
	    3 * sizeof(int)) != 3 * sizeof(int)) {
		_kvm_err(kd, kd->program, "cannot read uvmexp");
		return (-1);
	}
	vm->pagesize = uvmexp.pagesize;
	vm->pagemask = uvmexp.pagemask;
	vm->pageshift = uvmexp.pageshift;

	/*
	 * Older kernels might not have this symbol; in which case
	 * we use the value of VM_MIN_KERNEL_ADDRESS they must have.
	 */

	nl[0].n_name = "Sysmapbase";
	nl[1].n_name = 0;
	if (kvm_nlist(kd, nl) != 0 ||
	    KREAD(kd, (u_long)nl[0].n_value, &vm->Sysmapbase))
		vm->Sysmapbase = (vaddr_t)CKSSEG_BASE;

	return (0);
}

/*
 * Translate a kernel virtual address to a physical address.
 */
int
_kvm_kvatop(kvm_t *kd, u_long va, paddr_t *pa)
{
	struct vmstate *vm;
	pt_entry_t pte;
	u_long idx, addr;
	int offset;

	if (ISALIVE(kd)) {
		_kvm_err(kd, 0, "vatop called in live kernel!");
		return((off_t)0);
	}
	vm = kd->vmst;
	offset = (int)va & vm->pagemask;
	/*
	 * If we are initializing (kernel segment table pointer not yet set)
	 * then return pa == va to avoid infinite recursion.
	 */
	if (vm->Sysmap == 0) {
		*pa = va;
		return vm->pagesize - offset;
	}
	/*
	 * Check for direct-mapped segments
	 */
	if (IS_XKPHYS(va)) {
		*pa = XKPHYS_TO_PHYS(va);
		return vm->pagesize - offset;
	}
	if (va >= (vaddr_t)CKSEG0_BASE && va < (vaddr_t)CKSSEG_BASE) {
		*pa = CKSEG0_TO_PHYS(va);
		return vm->pagesize - offset;
	}
	if (va < vm->Sysmapbase)
		goto invalid;
	idx = (va - vm->Sysmapbase) >> vm->pageshift;
	if (idx >= vm->Sysmapsize)
		goto invalid;
	addr = (u_long)vm->Sysmap + idx;
	/*
	 * Can't use KREAD to read kernel segment table entries.
	 * Fortunately it is 1-to-1 mapped so we don't have to.
	 */
	if (_kvm_pread(kd, kd->pmfd, (char *)&pte, sizeof(pte),
	    (off_t)addr) < 0)
		goto invalid;
	if (!(pte & PG_V))
		goto invalid;
	*pa = (pte & PG_FRAME) | (paddr_t)offset;
	return vm->pagesize - offset;

invalid:
	_kvm_err(kd, 0, "invalid address (%lx)", va);
	return (0);
}

off_t
_kvm_pa2off(kvm_t *kd, paddr_t pa)
{
	_kvm_err(kd, 0, "pa2off going to be implemented!");
	return 0;
}
@


1.14
log
@the one userland file which wants uvmexp snooped via kmem, gets to use the
special rule that sys/sysctl.h gets it.  mips64 always wanted special
treatment.
found by todd
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.13 2013/11/01 15:57:56 deraadt Exp $ */
d123 1
a123 1
	 * we use the value of VM_MIN_KERNE_ADDRESS they must have.
@


1.13
log
@reduce use of <sys/user.h>
ok guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.12 2009/12/07 18:49:14 miod Exp $ */
d45 1
@


1.12
log
@Get page size information by reading the kernel image' struct uvmexp, instead
of the value of PAGE_SIZE found in the standard headers when compiling.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.11 2009/11/22 18:20:49 miod Exp $ */
a42 1
#include <sys/user.h>
@


1.11
log
@Oops, KSEG -> CKSEG.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.10 2009/11/22 00:07:02 miod Exp $ */
d60 2
d66 3
d82 2
a83 1
	struct nlist nlist[3];
d90 4
a93 3
	nlist[0].n_name = "Sysmap";
	nlist[1].n_name = "Sysmapsize";
	nlist[2].n_name = 0;
d95 1
a95 1
	if (kvm_nlist(kd, nlist) != 0) {
d99 1
a99 1
	if (KREAD(kd, (u_long)nlist[0].n_value, &vm->Sysmap)) {
d103 1
a103 1
	if (KREAD(kd, (u_long)nlist[1].n_value, &vm->Sysmapsize)) {
d107 13
d123 1
a123 1
	 * we use the value of VM_MIN_KERNEL_ADDRESS they must have.
d125 5
a129 4
	nlist[0].n_name = "Sysmapbase";
	nlist[1].n_name = 0;
	if (kvm_nlist(kd, nlist) != 0 ||
	    KREAD(kd, (u_long)nlist[0].n_value, &vm->Sysmapbase))
d143 2
a144 1
	u_long idx, addr, offset;
d151 1
a151 1
	offset = va & PAGE_MASK;
d158 1
a158 1
		return (int)(PAGE_SIZE - offset);
d165 1
a165 1
		return (int)(PAGE_SIZE - offset);
d169 1
a169 1
		return (int)(PAGE_SIZE - offset);
d173 1
a173 1
	idx = (va - vm->Sysmapbase) >> PGSHIFT;
d176 1
a176 1
	addr = (u_long)(vm->Sysmap + idx);
d186 2
a187 2
	*pa = (pte & PG_FRAME) | offset;
	return (int)(PAGE_SIZE - offset);
@


1.10
log
@Allow mips ports to override VM_{MIN,MAX}_KERNEL_ADDRESS, and provide the
address as a kernel variable for use by libkvm.

On sgi IP27 and IP30 kernels, use XKSEG instead of CKSSEG; this will allow
kernel KVM size to grow in the future if necessary.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.9 2009/10/27 23:59:28 deraadt Exp $ */
d109 1
a109 1
		vm->Sysmapbase = (vaddr_t)KSSEG_BASE;
d145 2
a146 2
	if (va >= (vaddr_t)KSEG0_BASE && va < (vaddr_t)KSSEG_BASE) {
		*pa = KSEG0_TO_PHYS(va);
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.8 2009/06/20 20:20:43 millert Exp $ */
d63 1
d100 11
d149 1
a149 1
	if (va < VM_MIN_KERNEL_ADDRESS)
d151 1
a151 1
	idx = (va - VM_MIN_KERNEL_ADDRESS) >> PGSHIFT;
@


1.8
log
@Move KREAD define to kvm_private.h
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.7 2007/10/18 04:32:05 miod Exp $ */
a35 8

#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)kvm_mips.c	8.1 (Berkeley) 6/4/93";
#else
static char *rcsid = "$OpenBSD: kvm_mips64.c,v 1.7 2007/10/18 04:32:05 miod Exp $";
#endif
#endif /* LIBC_SCCS and not lint */
@


1.7
log
@Get rid of the silly union for mips pte. No functional change except
pmap.h now includes pte.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.6 2007/05/03 19:33:58 miod Exp $ */
d41 1
a41 1
static char *rcsid = "$OpenBSD: kvm_mips64.c,v 1.6 2007/05/03 19:33:58 miod Exp $";
a71 3

#define KREAD(kd, addr, p)\
	(kvm_read(kd, addr, (char *)(p), sizeof(*(p))) != sizeof(*(p)))
@


1.6
log
@Enable support for > 512MB of physical memory on mips64 systems, by using
XKPHYS instead of KSEG[01] for direct mappings.

Then, detect memory above 256MB on O2 by poking at the CRIME registers
(ARCbios will not report memory above 256MB, which is mapped above 1GB
physical, to the system), and add it to the UVM managed memory.

Tested on r5k, rm5200 and r10k with and without more than 256MB, matching
hinv reports in all cases. CRIME memory decoding based on a diff from
kettenis@@ in december 2005.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.5 2007/01/08 18:54:12 deraadt Exp $ */
d41 1
a41 1
static char *rcsid = "$OpenBSD: kvm_mips64.c,v 1.5 2007/01/08 18:54:12 deraadt Exp $";
d120 2
a121 1
	u_long pte, idx, addr, offset;
@


1.5
log
@the advertising clause on these can safely be removed
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.4 2006/11/29 13:27:21 miod Exp $ */
d41 1
a41 1
static char *rcsid = "$OpenBSD: kvm_mips64.c,v 1.4 2006/11/29 13:27:21 miod Exp $";
d120 1
a120 1
	u_long pte, addr, offset;
d127 1
a127 1
	offset = va & PGOFSET;
d134 1
a134 1
		return (NBPG - offset);
d136 8
a143 4
	if (va < KERNBASE ||
	    va >= VM_MIN_KERNEL_ADDRESS + vm->Sysmapsize * NBPG)
		goto invalid;
	if (va < VM_MIN_KERNEL_ADDRESS) {
d145 1
a145 1
		return (NBPG - offset);
d147 6
a152 1
	addr = (u_long)(vm->Sysmap + ((va - VM_MIN_KERNEL_ADDRESS) >> PGSHIFT));
d157 2
a158 1
	if (_kvm_pread(kd, kd->pmfd, (char *)&pte, sizeof(pte), (off_t)addr) < 0)
d163 1
a163 1
	return (NBPG - offset);
@


1.4
log
@Fix cut'n'paste abuse in error message.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.3 2006/03/20 15:11:48 mickey Exp $ */
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d41 1
a41 1
static char *rcsid = "$OpenBSD: kvm_mips64.c,v 1.3 2006/03/20 15:11:48 mickey Exp $";
@


1.3
log
@for some of internal functions use paddr_t where phys addr is intended insteadd of u_long; miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.2 2004/09/15 19:31:31 miod Exp $ */
d45 1
a45 1
static char *rcsid = "$OpenBSD: kvm_mips64.c,v 1.2 2004/09/15 19:31:31 miod Exp $";
d111 1
a111 1
		_kvm_err(kd, kd->program, "cannot read mmutype");
@


1.2
log
@Kill (almost all) warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips64.c,v 1.1 2004/08/06 22:53:47 deraadt Exp $ */
d45 1
a45 1
static char *rcsid = "$OpenBSD: kvm_mips64.c,v 1.1 2004/08/06 22:53:47 deraadt Exp $";
d121 1
a121 1
_kvm_kvatop(kvm_t *kd, u_long va, u_long *pa)
d165 1
a165 1
_kvm_pa2off(kvm_t *kd, u_long pa)
@


1.1
log
@wrong filename
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mips.c,v 1.11 2004/08/06 22:44:55 deraadt Exp $ */
d45 1
a45 1
static char *rcsid = "$OpenBSD: kvm_mips.c,v 1.11 2004/08/06 22:44:55 deraadt Exp $";
d59 1
@

