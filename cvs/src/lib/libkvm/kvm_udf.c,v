head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.2
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2016.10.02.23.11.55;	author guenther;	state Exp;
branches;
next	1.9;
commitid	F8mRaOmEFbuy0fNX;

1.9
date	2014.12.16.03.21.10;	author tedu;	state Exp;
branches;
next	1.8;
commitid	aLPEb7x34fz5waP9;

1.8
date	2014.11.18.12.41.16;	author dlg;	state Exp;
branches;
next	1.7;
commitid	B1e0rfs5tkxxFyLb;

1.7
date	2013.11.16.00.37.11;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2013.10.22.16.40.27;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.23.17.11.08;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.04.20.35.35;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.20.20.20.43;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.20.19.50.05;	author millert;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Add va_nlink information to struct kinfo_file (so bump the shlib minor)

from Sebastien Marie
@
text
@/*	$OpenBSD: kvm_udf.c,v 1.9 2014/12/16 03:21:10 tedu Exp $	*/

/*
 * Copyright (c) 2001, 2002 Scott Long <scottl@@freebsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/ucred.h>
#define _KERNEL
#include <sys/mount.h>
#undef _KERNEL
#include <sys/lock.h>
#include <sys/vnode.h>
#include <sys/sysctl.h>
#include <sys/specdev.h>

#include <crypto/siphash.h>

#include <isofs/udf/ecma167-udf.h>
#include <isofs/udf/udf.h>

#include <stdint.h>
#include <limits.h>
#include <kvm.h>
#include <db.h>

#include "kvm_private.h"
#include "kvm_file.h"

/* Convert file entry permission (5 bits per owner/group/user) to a mode_t */
static mode_t
udf_permtomode(struct unode *up)
{
	uint32_t perm;
	uint16_t flags;
	mode_t mode;

	perm = letoh32(up->u_fentry->perm);
	flags = letoh16(up->u_fentry->icbtag.flags);

	mode = perm & UDF_FENTRY_PERM_USER_MASK;
	mode |= ((perm & UDF_FENTRY_PERM_GRP_MASK) >> 2);
	mode |= ((perm & UDF_FENTRY_PERM_OWNER_MASK) >> 4);
	mode |= ((flags & UDF_ICB_TAG_FLAGS_STICKY) << 4);
	mode |= ((flags & UDF_ICB_TAG_FLAGS_SETGID) << 6);
	mode |= ((flags & UDF_ICB_TAG_FLAGS_SETUID) << 8);

	return (mode);
}

int
_kvm_stat_udf(kvm_t *kd, struct kinfo_file *kf, struct vnode *vp)
{
	struct unode up;
	struct file_entry fentry;
	struct umount um;

	if (KREAD(kd, (u_long)VTOU(vp), &up)) {
		_kvm_err(kd, kd->program, "can't read unode at %p", VTOU(vp));
		return (-1);
	}
	if (KREAD(kd, (u_long)up.u_fentry, &fentry)) {
		_kvm_err(kd, kd->program, "can't read file_entry at %p",
		    up.u_fentry);
		return (-1);
	}
	if (KREAD(kd, (u_long)up.u_ump, &um)) {
		_kvm_err(kd, kd->program, "can't read umount at %p",
		    up.u_ump);
		return (-1);
	}
	kf->va_fsid = up.u_dev;
	kf->va_fileid = (long)up.u_ino;
	kf->va_mode = udf_permtomode(&up); /* XXX */
	kf->va_rdev = 0;
	kf->va_nlink = letoh16(fentry.link_cnt);
	if (vp->v_type & VDIR) {
		/*
		 * Directories that are recorded within their ICB will show
		 * as having 0 blocks recorded.  Since tradition dictates
		 * that directories consume at least one logical block,
		 * make it appear so.
		 */
		if (fentry.logblks_rec != 0) {
			kf->va_size =
			    letoh64(fentry.logblks_rec) * um.um_bsize;
		} else {
			kf->va_size = um.um_bsize;
		}
	} else {
		kf->va_size = letoh64(fentry.inf_len);
	}

	return (0);
}
@


1.9
log
@include lock.h, needed for later headers but currently included by magic
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_udf.c,v 1.8 2014/11/18 12:41:16 dlg Exp $	*/
d98 1
@


1.8
log
@udf needs siphash to build.

i dont know if this is the right fix, but the tree needs to build.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_udf.c,v 1.7 2013/11/16 00:37:11 guenther Exp $	*/
d34 1
@


1.7
log
@Prep for hidden visibility: move the vnode/file related function
declarations, including _kvm_getftype(), into a new header, kvm_file.h,
so that we don't have to pull <sys/vnode.h> into all the .c files.  No
more extern function declaration in .c files.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_udf.c,v 1.6 2013/10/22 16:40:27 guenther Exp $	*/
d37 2
@


1.6
log
@- add UNIX-domain socket info to struct kinfo_file2
- convert netstat from kvm_getfiles() to kvm_getfile2() using that
- delete kvm_getfiles() and KERN_FILE as no longer used (bump libkvm's major)
- rename kvm_getfile2() to kvm_getfiles(), kinfo_file2 to kinfo_file
  and KERN_FILE2 to KERN_FILE.

ok deraadt@@, millert@@
ports scan sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_udf.c,v 1.5 2013/03/23 17:11:08 deraadt Exp $	*/
d47 1
@


1.5
log
@do not need udf_extern.h
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_udf.c,v 1.4 2011/07/04 20:35:35 deraadt Exp $	*/
d70 1
a70 1
_kvm_stat_udf(kvm_t *kd, struct kinfo_file2 *kf, struct vnode *vp)
@


1.4
log
@move the specfs code to a place people can see it; ok guenther thib krw
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_udf.c,v 1.3 2009/10/27 23:59:28 deraadt Exp $	*/
a39 1
#include <isofs/udf/udf_extern.h>
@


1.3
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_udf.c,v 1.2 2009/06/20 20:20:43 millert Exp $	*/
d36 1
a40 2

#include <miscfs/specfs/specdev.h>
@


1.2
log
@Move KREAD define to kvm_private.h
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_udf.c,v 1.1 2009/06/20 19:50:05 millert Exp $	*/
a27 4

#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: kvm_udf.c,v 1.1 2009/06/20 19:50:05 millert Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.1
log
@Split out cd9660 bits into their own .c file to avoid #define collisions
with ufs and add also udf support.  OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 1
a30 1
static char *rcsid = "$OpenBSD$";
a52 3

#define KREAD(kd, addr, obj) \
	(kvm_read(kd, addr, obj, sizeof(*obj)) != sizeof(*obj))
@

