head	1.5;
access;
symbols
	OPENBSD_6_1:1.4.0.40
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.36
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.32
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.34
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.26
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.30
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.28
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.24
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.22
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.20
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.18
	OPENBSD_5_0:1.4.0.16
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.14
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.1.1.0.4
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.2
	OPENBSD_3_7_BASE:1.1.1.1
	expat_1_95_6:1.1.1.1
	expat:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2017.06.30.11.25.29;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	fn9dH5mFrh6LdSGj;

1.4
date	2007.08.30.18.41.04;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.06.16.09.30;	author alek;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.20.23.25;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.22.21.32.04;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.09.22.21.32.04;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update libexpat to version 2.2.1 which has some security fixes.
- CVE-2017-9233 CVE-2016-9063 CVE-2016-5300 CVE-2016-4472 CVE-2016-0718
  CVE-2015-2716 CVE-2015-1283 CVE-2012-6702 CVE-2012-0876 have been
  addressed.  Not all of them affect OpenBSD as we had fixes before.
- Upstream uses arc4random_buf(3) now.  Delete all code for other
  entropy sources to make sure to compile the correct one.  Our
  library already used arc4random(3) before.
- The overflow fixes in rev 1.11 and 1.12 of lib/xmlparse.c
  have been commited upstream in a different way.  Use the upstream
  code to make maintenance easier.
- Although it should be ABI compatible, there is a new global
  symbol align_limit_to_full_utf8_characters.  As it is in
  lib/internal.h, add a Symbols.map to restrict the export.  Do not
  bump the shared library version.
- Use the internal expat's siphash.h.
ports build ajacoutot@@; move ahead deraadt@@
@
text
@/* internal.h

   Internal definitions used by Expat.  This is not needed to compile
   client code.

   The following calling convention macros are defined for frequently
   called functions:

   FASTCALL    - Used for those internal functions that have a simple
                 body and a low number of arguments and local variables.

   PTRCALL     - Used for functions called though function pointers.

   PTRFASTCALL - Like PTRCALL, but for low number of arguments.

   inline      - Used for selected internal functions for which inlining
                 may improve performance on some platforms.

   Note: Use of these macros is based on judgement, not hard rules,
         and therefore subject to change.
*/

#if defined(__GNUC__) && defined(__i386__) && !defined(__MINGW32__)
/* We'll use this version by default only where we know it helps.

   regparm() generates warnings on Solaris boxes.   See SF bug #692878.

   Instability reported with egcs on a RedHat Linux 7.3.
   Let's comment out:
   #define FASTCALL __attribute__((stdcall, regparm(3)))
   and let's try this:
*/
#define FASTCALL __attribute__((regparm(3)))
#define PTRFASTCALL __attribute__((regparm(3)))
#endif

/* Using __fastcall seems to have an unexpected negative effect under
   MS VC++, especially for function pointers, so we won't use it for
   now on that platform. It may be reconsidered for a future release
   if it can be made more effective.
   Likely reason: __fastcall on Windows is like stdcall, therefore
   the compiler cannot perform stack optimizations for call clusters.
*/

/* Make sure all of these are defined if they aren't already. */

#ifndef FASTCALL
#define FASTCALL
#endif

#ifndef PTRCALL
#define PTRCALL
#endif

#ifndef PTRFASTCALL
#define PTRFASTCALL
#endif

#ifndef XML_MIN_SIZE
#if !defined(__cplusplus) && !defined(inline)
#ifdef __GNUC__
#define inline __inline
#endif /* __GNUC__ */
#endif
#endif /* XML_MIN_SIZE */

#ifdef __cplusplus
#define inline inline
#else
#ifndef inline
#define inline
#endif
#endif

#ifndef UNUSED_P
# ifdef __GNUC__
#  define UNUSED_P(p) UNUSED_ ## p __attribute__((__unused__))
# else
#  define UNUSED_P(p) UNUSED_ ## p
# endif
#endif


#ifdef __cplusplus
extern "C" {
#endif


void
align_limit_to_full_utf8_characters(const char * from, const char ** fromLimRef);


#ifdef __cplusplus
}
#endif
@


1.4
log
@Update to expat 2.0.1. ok deraadt@@
@
text
@d23 1
a23 1
#if defined(__GNUC__) && (defined(__i386__) || defined(__amd64__)) && !defined(__MINGW32__)
d73 22
@


1.3
log
@Update to 2.0.0; keep our local changes

ok espie@@, djm@@
@
text
@d23 1
a23 1
#if defined(__GNUC__) && (defined(__i386__) || defined(__amd64__))
@


1.2
log
@Do not use __attribute__(regparm) on !x86 !amd64 platforms; ok espie@@
@
text
@d24 6
a29 2
/* Instability reported with egcs on a RedHat Linux 7.3.
   Let's comment it out:
a33 1
#define PTRCALL
d35 1
a36 1
#elif defined(WIN32)
a43 3
#define FASTCALL
#define PTRCALL
#define PTRFASTCALL
d45 1
a45 1
#endif
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
#if defined(__GNUC__)
@


1.1.1.1
log
@libexpat: a simple xml parser library, used by X11 and some ports.
@
text
@@
