head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.3.0.40
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.36
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.32
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.34
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.26
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.30
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.28
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.24
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.22
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.18
	OPENBSD_5_0:1.3.0.16
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.1.1.0.6
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.4
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.2
	OPENBSD_3_7_BASE:1.1.1.1
	expat_1_95_6:1.1.1.1
	expat:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2017.08.23.14.53.52;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	MYRBxc2iJkipj59R;

1.4
date	2017.06.30.11.25.29;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	fn9dH5mFrh6LdSGj;

1.3
date	2007.08.30.18.41.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.06.16.09.30;	author alek;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.22.21.32.09;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.09.22.21.32.09;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update libexpat to 2.2.4.  Fix copying partial UTF-8 characters.
OK deraadt@@
@
text
@/* Read an XML document from standard input and print an element
   outline on standard output.
   Must be used with Expat compiled for UTF-8 output.
                            __  __            _
                         ___\ \/ /_ __   __ _| |_
                        / _ \\  /| '_ \ / _` | __|
                       |  __//  \| |_) | (_| | |_
                        \___/_/\_\ .__/ \__,_|\__|
                                 |_| XML parser

   Copyright (c) 1997-2000 Thai Open Source Software Center Ltd
   Copyright (c) 2000-2017 Expat development team
   Licensed under the MIT license:

   Permission is  hereby granted,  free of charge,  to any  person obtaining
   a  copy  of  this  software   and  associated  documentation  files  (the
   "Software"),  to  deal in  the  Software  without restriction,  including
   without  limitation the  rights  to use,  copy,  modify, merge,  publish,
   distribute, sublicense, and/or sell copies of the Software, and to permit
   persons  to whom  the Software  is  furnished to  do so,  subject to  the
   following conditions:

   The above copyright  notice and this permission notice  shall be included
   in all copies or substantial portions of the Software.

   THE  SOFTWARE  IS  PROVIDED  "AS  IS",  WITHOUT  WARRANTY  OF  ANY  KIND,
   EXPRESS  OR IMPLIED,  INCLUDING  BUT  NOT LIMITED  TO  THE WARRANTIES  OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
   NO EVENT SHALL THE AUTHORS OR  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
   DAMAGES OR  OTHER LIABILITY, WHETHER  IN AN  ACTION OF CONTRACT,  TORT OR
   OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
   USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <stdio.h>
#include <expat.h>

#ifdef XML_LARGE_SIZE
#if defined(XML_USE_MSC_EXTENSIONS) && _MSC_VER < 1400
#define XML_FMT_INT_MOD "I64"
#else
#define XML_FMT_INT_MOD "ll"
#endif
#else
#define XML_FMT_INT_MOD "l"
#endif

#define BUFFSIZE        8192

char Buff[BUFFSIZE];

int Depth;

static void XMLCALL
start(void *data, const char *el, const char **attr)
{
  int i;
  (void)data;

  for (i = 0; i < Depth; i++)
    printf("  ");

  printf("%s", el);

  for (i = 0; attr[i]; i += 2) {
    printf(" %s='%s'", attr[i], attr[i + 1]);
  }

  printf("\n");
  Depth++;
}

static void XMLCALL
end(void *data, const char *el)
{
  (void)data;
  (void)el;

  Depth--;
}

int
main(int argc, char *argv[])
{
  XML_Parser p = XML_ParserCreate(NULL);
  (void)argc;
  (void)argv;

  if (! p) {
    fprintf(stderr, "Couldn't allocate memory for parser\n");
    exit(-1);
  }

  XML_SetElementHandler(p, start, end);

  for (;;) {
    int done;
    int len;

    len = (int)fread(Buff, 1, BUFFSIZE, stdin);
    if (ferror(stdin)) {
      fprintf(stderr, "Read error\n");
      exit(-1);
    }
    done = feof(stdin);

    if (XML_Parse(p, Buff, len, done) == XML_STATUS_ERROR) {
      fprintf(stderr, "Parse error at line %" XML_FMT_INT_MOD "u:\n%s\n",
              XML_GetCurrentLineNumber(p),
              XML_ErrorString(XML_GetErrorCode(p)));
      exit(-1);
    }

    if (done)
      break;
  }
  XML_ParserFree(p);
  return 0;
}
@


1.4
log
@Update libexpat to version 2.2.1 which has some security fixes.
- CVE-2017-9233 CVE-2016-9063 CVE-2016-5300 CVE-2016-4472 CVE-2016-0718
  CVE-2015-2716 CVE-2015-1283 CVE-2012-6702 CVE-2012-0876 have been
  addressed.  Not all of them affect OpenBSD as we had fixes before.
- Upstream uses arc4random_buf(3) now.  Delete all code for other
  entropy sources to make sure to compile the correct one.  Our
  library already used arc4random(3) before.
- The overflow fixes in rev 1.11 and 1.12 of lib/xmlparse.c
  have been commited upstream in a different way.  Use the upstream
  code to make maintenance easier.
- Although it should be ABI compatible, there is a new global
  symbol align_limit_to_full_utf8_characters.  As it is in
  lib/internal.h, add a Symbols.map to restrict the export.  Do not
  bump the shared library version.
- Use the internal expat's siphash.h.
ports build ajacoutot@@; move ahead deraadt@@
@
text
@d1 9
a9 22
/*****************************************************************
 * outline.c
 *
 * Copyright 1999, Clark Cooper
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the license contained in the
 * COPYING file that comes with the expat distribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Read an XML document from standard input and print an element
 * outline on standard output.
 * Must be used with Expat compiled for UTF-8 output.
 */
d11 23
@


1.3
log
@Update to expat 2.0.1. ok deraadt@@
@
text
@a27 4
#if defined(__amigaos__) && defined(__USE_INLINE__)
#include <proto/expat.h>
#endif

d48 1
d66 3
d76 3
@


1.2
log
@Update to 2.0.0; keep our local changes

ok espie@@, djm@@
@
text
@d28 4
a71 5
#ifdef AMIGA_SHARED_LIB
#include <proto/expat.h>
int
amiga_main(int argc, char *argv[])
#else
a73 1
#endif
d87 1
a87 1
    len = fread(Buff, 1, BUFFSIZE, stdin);
d104 1
@


1.1
log
@Initial revision
@
text
@d21 1
d28 10
d44 1
a44 1
static void
d62 1
a62 1
static void
d68 5
d75 1
d97 1
a97 1
      fprintf(stderr, "Parse error at line %d:\n%s\n",
@


1.1.1.1
log
@libexpat: a simple xml parser library, used by X11 and some ports.
@
text
@@
