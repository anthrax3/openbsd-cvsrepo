head	1.28;
access;
symbols
	OPENBSD_6_2:1.28.0.4
	OPENBSD_6_2_BASE:1.28
	OPENBSD_6_1:1.27.0.6
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.2
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.16
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.14
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.10
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.8
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.4
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.20
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2017.04.12.18.24.37;	author tb;	state Exp;
branches;
next	1.27;
commitid	0AFky3THlYlICFpl;

1.27
date	2016.05.22.23.09.56;	author schwarze;	state Exp;
branches;
next	1.26;
commitid	JDRx6gbg98ixcAQq;

1.26
date	2016.05.06.13.12.52;	author schwarze;	state Exp;
branches;
next	1.25;
commitid	HmIy04UbyUS0d1Sd;

1.25
date	2016.04.11.21.17.29;	author schwarze;	state Exp;
branches;
next	1.24;
commitid	I3AtNAFb4FywnTMT;

1.24
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	OUneMOe0l7HombT5;

1.23
date	2016.04.11.19.54.53;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	xizUpRlYj2C4Hcj6;

1.22
date	2016.04.09.20.15.26;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	0bnhGLXZIvXlnMLp;

1.21
date	2016.03.21.15.25.39;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	Qq3DwK1S3lWtyR8X;

1.20
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	tRHhB2RN3ZD1GvoI;

1.19
date	2016.03.20.22.57.59;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	VBVmrUoZFnMc0hts;

1.18
date	2016.03.20.20.35.38;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	b06qlwkNEbVitvG0;

1.17
date	2016.03.01.16.43.39;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	T3KlCZafStWDEM0L;

1.16
date	2016.01.30.17.32.52;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	wAt9MiELkmlnoi4U;

1.15
date	2016.01.30.12.22.20;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	dCN84ovvbfYwqrqX;

1.14
date	2016.01.30.02.52.41;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	GXbmevFye1xXIR4O;

1.13
date	2016.01.30.00.06.39;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	tGf8IdK8wCurneJ7;

1.12
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	bdUOvGFxUQgqZg7x;

1.11
date	2011.07.07.05.40.42;	author okan;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.25.20.12.38;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.31.08.42.24;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.01.21.11.21;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.26;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.14.05.12.41;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.16.05.18.28;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Use calloc(3) and recallocarray(3) instead of *alloc* + memset(0).

ok deraadt
@
text
@/*	$OpenBSD: chared.c,v 1.27 2016/05/22 23:09:56 schwarze Exp $	*/
/*	$NetBSD: chared.c,v 1.28 2009/12/30 22:37:40 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "config.h"

/*
 * chared.c: Character editor utilities
 */
#include <ctype.h>
#include <stdlib.h>
#include <string.h>

#include "el.h"
#include "common.h"
#include "fcns.h"

/* value to leave unused in line buffer */
#define	EL_LEAVE	2

/* cv_undo():
 *	Handle state for the vi undo command
 */
protected void
cv_undo(EditLine *el)
{
	c_undo_t *vu = &el->el_chared.c_undo;
	c_redo_t *r = &el->el_chared.c_redo;
	size_t size;

	/* Save entire line for undo */
	size = el->el_line.lastchar - el->el_line.buffer;
	vu->len = size;
	vu->cursor = (int)(el->el_line.cursor - el->el_line.buffer);
	(void)memcpy(vu->buf, el->el_line.buffer, size * sizeof(*vu->buf));

	/* save command info for redo */
	r->count = el->el_state.doingarg ? el->el_state.argument : 0;
	r->action = el->el_chared.c_vcmd.action;
	r->pos = r->buf;
	r->cmd = el->el_state.thiscmd;
	r->ch = el->el_state.thisch;
}

/* cv_yank():
 *	Save yank/delete data for paste
 */
protected void
cv_yank(EditLine *el, const wchar_t *ptr, int size)
{
	c_kill_t *k = &el->el_chared.c_kill;

	(void)memcpy(k->buf, ptr, size * sizeof(*k->buf));
	k->last = k->buf + size;
}


/* c_insert():
 *	Insert num characters
 */
protected void
c_insert(EditLine *el, int num)
{
	wchar_t *cp;

	if (el->el_line.lastchar + num >= el->el_line.limit) {
		if (!ch_enlargebufs(el, (size_t)num))
			return;		/* can't go past end of buffer */
	}

	if (el->el_line.cursor < el->el_line.lastchar) {
		/* if I must move chars */
		for (cp = el->el_line.lastchar; cp >= el->el_line.cursor; cp--)
			cp[num] = *cp;
	}
	el->el_line.lastchar += num;
}


/* c_delafter():
 *	Delete num characters after the cursor
 */
protected void
c_delafter(EditLine *el, int num)
{

	if (el->el_line.cursor + num > el->el_line.lastchar)
		num = (int)(el->el_line.lastchar - el->el_line.cursor);

	if (el->el_map.current != el->el_map.emacs) {
		cv_undo(el);
		cv_yank(el, el->el_line.cursor, num);
	}

	if (num > 0) {
		wchar_t *cp;

		for (cp = el->el_line.cursor; cp <= el->el_line.lastchar; cp++)
			*cp = cp[num];

		el->el_line.lastchar -= num;
	}
}


/* c_delafter1():
 *	Delete the character after the cursor, do not yank
 */
protected void
c_delafter1(EditLine *el)
{
	wchar_t *cp;

	for (cp = el->el_line.cursor; cp <= el->el_line.lastchar; cp++)
		*cp = cp[1];

	el->el_line.lastchar--;
}


/* c_delbefore():
 *	Delete num characters before the cursor
 */
protected void
c_delbefore(EditLine *el, int num)
{

	if (el->el_line.cursor - num < el->el_line.buffer)
		num = (int)(el->el_line.cursor - el->el_line.buffer);

	if (el->el_map.current != el->el_map.emacs) {
		cv_undo(el);
		cv_yank(el, el->el_line.cursor - num, num);
	}

	if (num > 0) {
		wchar_t *cp;

		for (cp = el->el_line.cursor - num;
		    cp <= el->el_line.lastchar;
		    cp++)
			*cp = cp[num];

		el->el_line.lastchar -= num;
	}
}


/* c_delbefore1():
 *	Delete the character before the cursor, do not yank
 */
protected void
c_delbefore1(EditLine *el)
{
	wchar_t *cp;

	for (cp = el->el_line.cursor - 1; cp <= el->el_line.lastchar; cp++)
		*cp = cp[1];

	el->el_line.lastchar--;
}


/* ce__isword():
 *	Return if p is part of a word according to emacs
 */
protected int
ce__isword(wint_t p)
{
	return iswalnum(p) || wcschr(L"*?_-.[]~=", p) != NULL;
}


/* cv__isword():
 *	Return if p is part of a word according to vi
 */
protected int
cv__isword(wint_t p)
{
	if (iswalnum(p) || p == L'_')
		return 1;
	if (iswgraph(p))
		return 2;
	return 0;
}


/* cv__isWord():
 *	Return if p is part of a big word according to vi
 */
protected int
cv__isWord(wint_t p)
{
	return !iswspace(p);
}


/* c__prev_word():
 *	Find the previous word
 */
protected wchar_t *
c__prev_word(wchar_t *p, wchar_t *low, int n, int (*wtest)(wint_t))
{
	p--;

	while (n--) {
		while ((p >= low) && !(*wtest)(*p))
			p--;
		while ((p >= low) && (*wtest)(*p))
			p--;
	}

	/* cp now points to one character before the word */
	p++;
	if (p < low)
		p = low;
	/* cp now points where we want it */
	return p;
}


/* c__next_word():
 *	Find the next word
 */
protected wchar_t *
c__next_word(wchar_t *p, wchar_t *high, int n, int (*wtest)(wint_t))
{
	while (n--) {
		while ((p < high) && !(*wtest)(*p))
			p++;
		while ((p < high) && (*wtest)(*p))
			p++;
	}
	if (p > high)
		p = high;
	/* p now points where we want it */
	return p;
}

/* cv_next_word():
 *	Find the next word vi style
 */
protected wchar_t *
cv_next_word(EditLine *el, wchar_t *p, wchar_t *high, int n,
    int (*wtest)(wint_t))
{
	int test;

	while (n--) {
		test = (*wtest)(*p);
		while ((p < high) && (*wtest)(*p) == test)
			p++;
		/*
		 * vi historically deletes with cw only the word preserving the
		 * trailing whitespace! This is not what 'w' does..
		 */
		if (n || el->el_chared.c_vcmd.action != (DELETE|INSERT))
			while ((p < high) && iswspace(*p))
				p++;
	}

	/* p now points where we want it */
	if (p > high)
		return high;
	else
		return p;
}


/* cv_prev_word():
 *	Find the previous word vi style
 */
protected wchar_t *
cv_prev_word(wchar_t *p, wchar_t *low, int n, int (*wtest)(wint_t))
{
	int test;

	p--;
	while (n--) {
		while ((p > low) && iswspace(*p))
			p--;
		test = (*wtest)(*p);
		while ((p >= low) && (*wtest)(*p) == test)
			p--;
	}
	p++;

	/* p now points where we want it */
	if (p < low)
		return low;
	else
		return p;
}


/* cv_delfini():
 *	Finish vi delete action
 */
protected void
cv_delfini(EditLine *el)
{
	int size;
	int action = el->el_chared.c_vcmd.action;

	if (action & INSERT)
		el->el_map.current = el->el_map.key;

	if (el->el_chared.c_vcmd.pos == 0)
		/* sanity */
		return;

	size = (int)(el->el_line.cursor - el->el_chared.c_vcmd.pos);
	if (size == 0)
		size = 1;
	el->el_line.cursor = el->el_chared.c_vcmd.pos;
	if (action & YANK) {
		if (size > 0)
			cv_yank(el, el->el_line.cursor, size);
		else
			cv_yank(el, el->el_line.cursor + size, -size);
	} else {
		if (size > 0) {
			c_delafter(el, size);
			re_refresh_cursor(el);
		} else  {
			c_delbefore(el, -size);
			el->el_line.cursor += size;
		}
	}
	el->el_chared.c_vcmd.action = NOP;
}


/* cv__endword():
 *	Go to the end of this word according to vi
 */
protected wchar_t *
cv__endword(wchar_t *p, wchar_t *high, int n, int (*wtest)(wint_t))
{
	int test;

	p++;

	while (n--) {
		while ((p < high) && iswspace(*p))
			p++;

		test = (*wtest)(*p);
		while ((p < high) && (*wtest)(*p) == test)
			p++;
	}
	p--;
	return p;
}

/* ch_init():
 *	Initialize the character editor
 */
protected int
ch_init(EditLine *el)
{
	el->el_line.buffer = calloc(EL_BUFSIZ, sizeof(*el->el_line.buffer));
	if (el->el_line.buffer == NULL)
		return -1;
	el->el_line.cursor = el->el_line.buffer;
	el->el_line.lastchar = el->el_line.buffer;
	el->el_line.limit = &el->el_line.buffer[EL_BUFSIZ - EL_LEAVE];

	el->el_chared.c_undo.buf = calloc(EL_BUFSIZ,
	    sizeof(*el->el_chared.c_undo.buf));
	if (el->el_chared.c_undo.buf == NULL)
		return -1;
	el->el_chared.c_undo.len = -1;
	el->el_chared.c_undo.cursor = 0;

	el->el_chared.c_redo.buf = reallocarray(NULL, EL_BUFSIZ,
	    sizeof(*el->el_chared.c_redo.buf));
	if (el->el_chared.c_redo.buf == NULL)
		return -1;
	el->el_chared.c_redo.pos = el->el_chared.c_redo.buf;
	el->el_chared.c_redo.lim = el->el_chared.c_redo.buf + EL_BUFSIZ;
	el->el_chared.c_redo.cmd = ED_UNASSIGNED;

	el->el_chared.c_vcmd.action = NOP;
	el->el_chared.c_vcmd.pos = el->el_line.buffer;

	el->el_chared.c_kill.buf = calloc(EL_BUFSIZ,
	    sizeof(*el->el_chared.c_kill.buf));
	if (el->el_chared.c_kill.buf == NULL)
		return -1;
	el->el_chared.c_kill.mark = el->el_line.buffer;
	el->el_chared.c_kill.last = el->el_chared.c_kill.buf;
	el->el_chared.c_resizefun = NULL;
	el->el_chared.c_resizearg = NULL;

	el->el_map.current = el->el_map.key;

	el->el_state.inputmode = MODE_INSERT; /* XXX: save a default */
	el->el_state.doingarg = 0;
	el->el_state.metanext = 0;
	el->el_state.argument = 1;
	el->el_state.lastcmd = ED_UNASSIGNED;

	return 0;
}

/* ch_reset():
 *	Reset the character editor
 */
protected void
ch_reset(EditLine *el)
{
	el->el_line.cursor		= el->el_line.buffer;
	el->el_line.lastchar		= el->el_line.buffer;

	el->el_chared.c_undo.len	= -1;
	el->el_chared.c_undo.cursor	= 0;

	el->el_chared.c_vcmd.action	= NOP;
	el->el_chared.c_vcmd.pos	= el->el_line.buffer;

	el->el_chared.c_kill.mark	= el->el_line.buffer;

	el->el_map.current		= el->el_map.key;

	el->el_state.inputmode		= MODE_INSERT; /* XXX: save a default */
	el->el_state.doingarg		= 0;
	el->el_state.metanext		= 0;
	el->el_state.argument		= 1;
	el->el_state.lastcmd		= ED_UNASSIGNED;

	el->el_history.eventno		= 0;
}

/* ch_enlargebufs():
 *	Enlarge line buffer to be able to hold twice as much characters.
 *	Returns 1 if successful, 0 if not.
 */
protected int
ch_enlargebufs(EditLine *el, size_t addlen)
{
	size_t sz, newsz;
	wchar_t *newbuffer, *oldbuf, *oldkbuf;

	sz = el->el_line.limit - el->el_line.buffer + EL_LEAVE;
	newsz = sz * 2;
	/*
	 * If newly required length is longer than current buffer, we need
	 * to make the buffer big enough to hold both old and new stuff.
	 */
	if (addlen > sz) {
		while(newsz - sz < addlen)
			newsz *= 2;
	}

	/*
	 * Reallocate line buffer.
	 */
	newbuffer = recallocarray(el->el_line.buffer, sz, newsz,
	    sizeof(*newbuffer));
	if (!newbuffer)
		return 0;

	oldbuf = el->el_line.buffer;

	el->el_line.buffer = newbuffer;
	el->el_line.cursor = newbuffer + (el->el_line.cursor - oldbuf);
	el->el_line.lastchar = newbuffer + (el->el_line.lastchar - oldbuf);
	/* don't set new size until all buffers are enlarged */
	el->el_line.limit  = &newbuffer[sz - EL_LEAVE];

	/*
	 * Reallocate kill buffer.
	 */
	newbuffer = recallocarray(el->el_chared.c_kill.buf, sz, newsz,
	    sizeof(*newbuffer));
	if (!newbuffer)
		return 0;

	oldkbuf = el->el_chared.c_kill.buf;

	el->el_chared.c_kill.buf = newbuffer;
	el->el_chared.c_kill.last = newbuffer +
					(el->el_chared.c_kill.last - oldkbuf);
	el->el_chared.c_kill.mark = el->el_line.buffer +
					(el->el_chared.c_kill.mark - oldbuf);

	/*
	 * Reallocate undo buffer.
	 */
	newbuffer = recallocarray(el->el_chared.c_undo.buf, sz, newsz,
	    sizeof(*newbuffer));
	if (!newbuffer)
		return 0;
	el->el_chared.c_undo.buf = newbuffer;

	newbuffer = reallocarray(el->el_chared.c_redo.buf,
	    newsz, sizeof(*newbuffer));
	if (!newbuffer)
		return 0;
	el->el_chared.c_redo.pos = newbuffer +
			(el->el_chared.c_redo.pos - el->el_chared.c_redo.buf);
	el->el_chared.c_redo.lim = newbuffer +
			(el->el_chared.c_redo.lim - el->el_chared.c_redo.buf);
	el->el_chared.c_redo.buf = newbuffer;

	if (!hist_enlargebuf(el, sz, newsz))
		return 0;

	/* Safe to set enlarged buffer size */
	el->el_line.limit  = &el->el_line.buffer[newsz - EL_LEAVE];
	if (el->el_chared.c_resizefun)
		(*el->el_chared.c_resizefun)(el, el->el_chared.c_resizearg);
	return 1;
}

/* ch_end():
 *	Free the data structures used by the editor
 */
protected void
ch_end(EditLine *el)
{
	free(el->el_line.buffer);
	el->el_line.buffer = NULL;
	el->el_line.limit = NULL;
	free(el->el_chared.c_undo.buf);
	el->el_chared.c_undo.buf = NULL;
	free(el->el_chared.c_redo.buf);
	el->el_chared.c_redo.buf = NULL;
	el->el_chared.c_redo.pos = NULL;
	el->el_chared.c_redo.lim = NULL;
	el->el_chared.c_redo.cmd = ED_UNASSIGNED;
	free(el->el_chared.c_kill.buf);
	el->el_chared.c_kill.buf = NULL;
	ch_reset(el);
}


/* el_insertstr():
 *	Insert string at cursorI
 */
int
el_winsertstr(EditLine *el, const wchar_t *s)
{
	size_t len;

	if ((len = wcslen(s)) == 0)
		return -1;
	if (el->el_line.lastchar + len >= el->el_line.limit) {
		if (!ch_enlargebufs(el, len))
			return -1;
	}

	c_insert(el, (int)len);
	while (*s)
		*el->el_line.cursor++ = *s++;
	return 0;
}


/* el_deletestr():
 *	Delete num characters before the cursor
 */
void
el_deletestr(EditLine *el, int n)
{
	if (n <= 0)
		return;

	if (el->el_line.cursor < &el->el_line.buffer[n])
		return;

	c_delbefore(el, n);		/* delete before dot */
	el->el_line.cursor -= n;
	if (el->el_line.cursor < el->el_line.buffer)
		el->el_line.cursor = el->el_line.buffer;
}

/* c_gets():
 *	Get a string
 */
protected int
c_gets(EditLine *el, wchar_t *buf, const wchar_t *prompt)
{
	ssize_t len;
	wchar_t *cp = el->el_line.buffer, ch;

	if (prompt) {
		len = wcslen(prompt);
		(void)memcpy(cp, prompt, len * sizeof(*cp));
		cp += len;
	}
	len = 0;

	for (;;) {
		el->el_line.cursor = cp;
		*cp = ' ';
		el->el_line.lastchar = cp + 1;
		re_refresh(el);

		if (el_wgetc(el, &ch) != 1) {
			ed_end_of_file(el, 0);
			len = -1;
			break;
		}

		switch (ch) {

		case L'\b':	/* Delete and backspace */
		case 0177:
			if (len == 0) {
				len = -1;
				break;
			}
			len--;
			cp--;
			continue;

		case 0033:	/* ESC */
		case L'\r':	/* Newline */
		case L'\n':
			buf[len] = ch;
			break;

		default:
			if (len >= EL_BUFSIZ - 16)
				terminal_beep(el);
			else {
				buf[len++] = ch;
				*cp++ = ch;
			}
			continue;
		}
		break;
	}

	el->el_line.buffer[0] = '\0';
	el->el_line.lastchar = el->el_line.buffer;
	el->el_line.cursor = el->el_line.buffer;
	return (int)len;
}


/* c_hpos():
 *	Return the current horizontal position of the cursor
 */
protected int
c_hpos(EditLine *el)
{
	wchar_t *ptr;

	/*
	 * Find how many characters till the beginning of this line.
	 */
	if (el->el_line.cursor == el->el_line.buffer)
		return 0;
	else {
		for (ptr = el->el_line.cursor - 1;
		     ptr >= el->el_line.buffer && *ptr != '\n';
		     ptr--)
			continue;
		return (int)(el->el_line.cursor - ptr - 1);
	}
}

protected int
ch_resizefun(EditLine *el, el_zfunc_t f, void *a)
{
	el->el_chared.c_resizefun = f;
	el->el_chared.c_resizearg = a;
	return 0;
}
@


1.27
log
@Improve modularization at the chared/read boundary, no functional change.

Stop the read.c module from poking the el_chared.c_macro data
structure that used to belong to the chared.c module.  Given that
no other module, not even chared itself, is using that data, move it
into the read modules's own opaque data structure, struct el_read_t.

That gets rid of one struct, one #define, one struct member, and one
function argument in the chared.h interface.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.26 2016/05/06 13:12:52 schwarze Exp $	*/
d393 1
a393 2
	el->el_line.buffer = reallocarray(NULL, EL_BUFSIZ,
	    sizeof(*el->el_line.buffer));
a395 3

	(void) memset(el->el_line.buffer, 0, EL_BUFSIZ *
	    sizeof(*el->el_line.buffer));
d400 1
a400 1
	el->el_chared.c_undo.buf = reallocarray(NULL, EL_BUFSIZ,
a403 2
	(void) memset(el->el_chared.c_undo.buf, 0, EL_BUFSIZ *
	    sizeof(*el->el_chared.c_undo.buf));
d406 1
d418 1
a418 1
	el->el_chared.c_kill.buf = reallocarray(NULL, EL_BUFSIZ,
a421 2
	(void) memset(el->el_chared.c_kill.buf, 0, EL_BUFSIZ *
	    sizeof(*el->el_chared.c_kill.buf));
d490 1
a490 1
	newbuffer = reallocarray(el->el_line.buffer, newsz,
a494 3
	/* zero the newly added memory, leave old data in */
	(void) memset(&newbuffer[sz], 0, (newsz - sz) * sizeof(*newbuffer));

d506 1
a506 1
	newbuffer = reallocarray(el->el_chared.c_kill.buf, newsz,
a510 3
	/* zero the newly added memory, leave old data in */
	(void) memset(&newbuffer[sz], 0, (newsz - sz) * sizeof(*newbuffer));

d522 2
a523 2
	newbuffer = reallocarray(el->el_chared.c_undo.buf,
	    newsz, sizeof(*newbuffer));
a525 3

	/* zero the newly added memory, leave old data in */
	(void) memset(&newbuffer[sz], 0, (newsz - sz) * sizeof(*newbuffer));
@


1.26
log
@Replace the generated file "fcns.c" by a simpler header "func.h"
included only in the one file needing it, "map.c".
That allows to define el_action_t directly in "map.h",
which in turn allows to stop including "fcns.h" from "el.h"
and include it only in the modules needing it.
Now we no longer autogenerate any C files.

Feedback and OK martijn@@.
First version also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.25 2016/04/11 21:17:29 schwarze Exp $	*/
a48 2
static void ch__clearmacro (EditLine *);

a392 2
	c_macro_t *ma = &el->el_chared.c_macro;

a441 6
	ma->level = -1;
	ma->offset = 0;
	ma->macro = reallocarray(NULL, EL_MAXMACRO,
	    sizeof(*ma->macro));
	if (ma->macro == NULL)
		return -1;
d449 1
a449 1
ch_reset(EditLine *el, int mclear)
a470 11

	if (mclear)
		ch__clearmacro(el);
}

static void
ch__clearmacro(EditLine *el)
{
	c_macro_t *ma = &el->el_chared.c_macro;
	while (ma->level >= 0)
		free(ma->macro[ma->level--]);
d582 1
a582 3
	ch_reset(el, 1);
	free(el->el_chared.c_macro.macro);
	el->el_chared.c_macro.macro = NULL;
@


1.25
log
@delete the "private" and "public" preprocessor macros, just use standard C;
OK martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.24 2016/04/11 20:43:33 schwarze Exp $	*/
d47 1
@


1.24
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.23 2016/04/11 19:54:53 schwarze Exp $	*/
d48 1
a48 1
private void ch__clearmacro (EditLine *);
d485 1
a485 1
private void
d611 1
a611 1
public int
d633 1
a633 1
public void
@


1.23
log
@Move wrapper macros to the two files actually needing them:
FUNW, Strlen, Strdup, Strcmp, Strncmp, Strncpy, Strncat -> history.c
Strchr, tok_strdup -> tokenizer.c
FUN, TYPE, STR -> both of these files

OK martijn@@

Also proofread by Christian Heckendorf <mbie at ulmus dot me>
who reported some whitespace issues in parse.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.22 2016/04/09 20:15:26 schwarze Exp $	*/
d81 1
a81 1
cv_yank(EditLine *el, const Char *ptr, int size)
d96 1
a96 1
	Char *cp;
d128 1
a128 1
		Char *cp;
d144 1
a144 1
	Char *cp;
d169 1
a169 1
		Char *cp;
d187 1
a187 1
	Char *cp;
d233 2
a234 2
protected Char *
c__prev_word(Char *p, Char *low, int n, int (*wtest)(wint_t))
d257 2
a258 2
protected Char *
c__next_word(Char *p, Char *high, int n, int (*wtest)(wint_t))
d275 3
a277 2
protected Char *
cv_next_word(EditLine *el, Char *p, Char *high, int n, int (*wtest)(wint_t))
d305 2
a306 2
protected Char *
cv_prev_word(Char *p, Char *low, int n, int (*wtest)(wint_t))
d369 2
a370 2
protected Char *
cv__endword(Char *p, Char *high, int n, int (*wtest)(wint_t))
d501 1
a501 1
	Char *newbuffer, *oldbuf, *oldkbuf;
d612 1
a612 1
el_winsertstr(EditLine *el, const Char *s)
d652 1
a652 1
c_gets(EditLine *el, Char *buf, const Char *prompt)
a653 1
	wchar_t wch;
d655 1
a655 1
	Char *cp = el->el_line.buffer, ch;
d670 1
a670 1
		if (el_wgetc(el, &wch) != 1) {
a674 1
		ch = (Char)wch;
d719 1
a719 1
	Char *ptr;
@


1.22
log
@Delete 26 wrapper macros and two wrapper functions that are no
longer needed now that we always compile with wide character support,
reducing code obfuscation.

OK czarkoff@@ martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.21 2016/03/21 15:25:39 schwarze Exp $	*/
d202 1
a202 1
	return iswalnum(p) || Strchr(STR("*?_-.[]~="), p) != NULL;
d611 1
a611 1
FUN(el,insertstr)(EditLine *el, const Char *s)
d615 1
a615 1
	if ((len = Strlen(s)) == 0)
d658 1
a658 1
		len = Strlen(prompt);
@


1.21
log
@Reduce the FUN() macro madness by no longer applying it to el_[w]getc(3).
Always use el_wgetc(3) internally.  In the !WIDECHAR case, casting
the result to (Char) is safe because the function returns a byte
rather than a character in that case.
No functional change except for fixing a printf(3) format string issue
when compiled with DEBUG_READ and WIDECHAR.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.20 2016/03/20 23:48:27 schwarze Exp $	*/
d202 1
a202 1
	return Isalnum(p) || Strchr(STR("*?_-.[]~="), p) != NULL;
d212 1
a212 1
	if (Isalnum(p) || p == '_')
d214 1
a214 1
	if (Isgraph(p))
d226 1
a226 1
	return !Isspace(p);
d289 1
a289 1
			while ((p < high) && Isspace(*p))
d311 1
a311 1
		while ((p > low) && Isspace(*p))
d376 1
a376 1
		while ((p < high) && Isspace(*p))
@


1.20
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.19 2016/03/20 22:57:59 schwarze Exp $	*/
d653 1
a653 1
	Char ch;
d655 1
a655 1
	Char *cp = el->el_line.buffer;
d670 1
a670 1
		if (FUN(el,getc)(el, &ch) != 1) {
d675 1
d679 1
a679 1
		case 0010:	/* Delete and backspace */
d690 2
a691 2
		case '\r':	/* Newline */
		case '\n':
@


1.19
log
@Cleanup of private header inclusion:

1. Do not include private headers from "chared.h", "hist.h", "prompt.h",
"refresh.h", "search.h", "sig.h", "terminal.h", "tty.h".
The only private header having to include other private headers is "el.h".
2. Do not include "common.h", "parse.h", "help.h" from "el.h",
and do not include "emacs.h" and "vi.h" from "chared.h",
include them directly where needed.
3. Do include "fcns.h" from "el.h" because el_func_t is needed for "map.h".
4. Do not include private headers again that are already included by "el.h".
5. Include private headers after standard headers.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.18 2016/03/20 20:35:38 schwarze Exp $	*/
d41 1
d43 1
d523 1
a523 1
	    
d572 1
a572 1
	
@


1.18
log
@Delete the useless Int datatype and always use the standard wint_t
directly.  This is not a problem because <wchar_t> is required all
over the place anyway, even when WIDECHAR is not defined.
No functional change except that it fixes a few printf(3)
format string issues, %c vs. %lc.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.17 2016/03/01 16:43:39 schwarze Exp $	*/
d42 1
d44 1
@


1.17
log
@Fix a segfault and functional error in c_gets(),
which is used for extended command input and for vi search mode.

It could be triggered by typing one or more characters, then pressing
backspace once (functional error: the character was deleted from
the screen, but not from the edit buffer) or a few more times than
characters had been entered (segfault).

OK czarkoff@@.  Also checked by Christos Zoulas.
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.16 2016/01/30 17:32:52 schwarze Exp $	*/
d196 1
a196 1
ce__isword(Int p)
d206 1
a206 1
cv__isword(Int p)
d220 1
a220 1
cv__isWord(Int p)
d230 1
a230 1
c__prev_word(Char *p, Char *low, int n, int (*wtest)(Int))
d254 1
a254 1
c__next_word(Char *p, Char *high, int n, int (*wtest)(Int))
d272 1
a272 1
cv_next_word(EditLine *el, Char *p, Char *high, int n, int (*wtest)(Int))
d301 1
a301 1
cv_prev_word(Char *p, Char *low, int n, int (*wtest)(Int))
d365 1
a365 1
cv__endword(Char *p, Char *high, int n, int (*wtest)(Int))
@


1.16
log
@Fifth step in synching with NetBSD:
Delete the silly ptr_t and ioctl_t typedefs
and delete some "#ifdef notdef" code from "sys.h".
No functional change.
This makes hist.h identical to the NetBSD version.
It reduces the remaining diff from +1526 -734 to +1430 -592.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.15 2016/01/30 12:22:20 schwarze Exp $	*/
d680 1
@


1.15
log
@Fourth step in synching with NetBSD:
KNF: Remove parentheses from return lines.  No object change.
This makes emacs.c and prompt.c identical to the NetBSD versions.
It reduces the remaining diff from +2053 -1261 to +1526 -734.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.14 2016/01/30 02:52:41 schwarze Exp $	*/
d485 1
a485 1
		free((ptr_t)ma->macro[ma->level--]);
d585 1
a585 1
	free((ptr_t) el->el_line.buffer);
d588 1
a588 1
	free((ptr_t) el->el_chared.c_undo.buf);
d590 1
a590 1
	free((ptr_t) el->el_chared.c_redo.buf);
d595 1
a595 1
	free((ptr_t) el->el_chared.c_kill.buf);
d598 1
a598 1
	free((ptr_t) el->el_chared.c_macro.macro);
@


1.14
log
@delete "#ifdef notdef" code that is no longer present in NetBSD;
no change in the generated source files
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.13 2016/01/30 00:06:39 schwarze Exp $	*/
d198 1
a198 1
	return (Isalnum(p) || Strchr(STR("*?_-.[]~="), p) != NULL);
d222 1
a222 1
	return (!Isspace(p));
d246 1
a246 1
	return (p);
d265 1
a265 1
	return (p);
d291 1
a291 1
		return (high);
d293 1
a293 1
		return (p);
d317 1
a317 1
		return (low);
d319 1
a319 1
		return (p);
d380 1
a380 1
	return (p);
d394 1
a394 1
		return (-1);
d405 1
a405 1
		return (-1);
d413 1
a413 1
		return (-1);
d424 1
a424 1
		return (-1);
d445 2
a446 2
		return (-1);
	return (0);
d612 1
a612 1
		return (-1);
d615 1
a615 1
			return (-1);
d621 1
a621 1
	return (0);
d720 1
a720 1
		return (0);
@


1.13
log
@Third step in synching with NetBSD:
* rename fkey_t to funckey_t and el_term_t to el_terminal_t
* rename struct editline member el_term to el_terminal
* rename many functions in terminal.c from term_*() to terminal_*(),
for consistency with the file name and to not look related to <term.h>
No functional change.
This makes refresh.c and sig.c almost identical to the NetBSD versions.
It reduces the remaining diff from +2446 -1805 to +2053 -1420.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.12 2014/10/17 06:07:50 deraadt Exp $	*/
a322 35
#ifdef notdef
/* c__number():
 *	Ignore character p points to, return number appearing after that.
 * 	A '$' by itself means a big number; "$-" is for negative; '^' means 1.
 * 	Return p pointing to last char used.
 */
protected Char *
c__number(
    Char *p,	/* character position */
    int *num,	/* Return value	*/
    int dval)	/* dval is the number to subtract from like $-3 */
{
	int i;
	int sign = 1;

	if (*++p == '^') {
		*num = 1;
		return (p);
	}
	if (*p == '$') {
		if (*++p != '-') {
			*num = 0x7fffffff;	/* Handle $ */
			return (--p);
		}
		sign = -1;			/* Handle $- */
		++p;
	}
    /* XXX: this assumes ASCII compatible digits */
	for (i = 0; Isdigit(*p); i = 10 * i + *p++ - '0')
		continue;
	*num = (sign < 0 ? dval - i : i);
	return (--p);
}
#endif

a358 22


#ifdef notdef
/* ce__endword():
 *	Go to the end of this word according to emacs
 */
protected Char *
ce__endword(Char *p, Char *high, int n)
{
	p++;

	while (n--) {
		while ((p < high) && Isspace(*p))
			p++;
		while ((p < high) && !Isspace(*p))
			p++;
	}

	p--;
	return (p);
}
#endif
@


1.12
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.11 2011/07/07 05:40:42 okan Exp $	*/
d748 1
a748 1
				term_beep(el);
@


1.11
log
@sync with upstream, retaining local modifications.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.10 2010/06/30 00:05:35 nicm Exp $	*/
d448 1
a448 1
	el->el_line.buffer		= el_malloc(EL_BUFSIZ *
d455 3
a457 3
	el->el_line.cursor		= el->el_line.buffer;
	el->el_line.lastchar		= el->el_line.buffer;
	el->el_line.limit		= &el->el_line.buffer[EL_BUFSIZ - EL_LEAVE];
d459 1
a459 1
	el->el_chared.c_undo.buf	= el_malloc(EL_BUFSIZ *
d465 3
a467 3
	el->el_chared.c_undo.len	= -1;
	el->el_chared.c_undo.cursor	= 0;
	el->el_chared.c_redo.buf	= el_malloc(EL_BUFSIZ *
d471 3
a473 3
	el->el_chared.c_redo.pos	= el->el_chared.c_redo.buf;
	el->el_chared.c_redo.lim	= el->el_chared.c_redo.buf + EL_BUFSIZ;
	el->el_chared.c_redo.cmd	= ED_UNASSIGNED;
d475 2
a476 2
	el->el_chared.c_vcmd.action	= NOP;
	el->el_chared.c_vcmd.pos	= el->el_line.buffer;
d478 1
a478 1
	el->el_chared.c_kill.buf	= el_malloc(EL_BUFSIZ *
d484 17
a500 16
	el->el_chared.c_kill.mark	= el->el_line.buffer;
	el->el_chared.c_kill.last	= el->el_chared.c_kill.buf;
	el->el_chared.c_resizefun	= NULL;
	el->el_chared.c_resizearg	= NULL;

	el->el_map.current		= el->el_map.key;

	el->el_state.inputmode		= MODE_INSERT; /* XXX: save a default */
	el->el_state.doingarg		= 0;
	el->el_state.metanext		= 0;
	el->el_state.argument		= 1;
	el->el_state.lastcmd		= ED_UNASSIGNED;

	ma->level	= -1;
	ma->offset	= 0;
	ma->macro	= el_malloc(EL_MAXMACRO * sizeof(*ma->macro));
d542 1
a542 1
		el_free((ptr_t)ma->macro[ma->level--]);
d569 2
a570 1
	newbuffer = el_realloc(el->el_line.buffer, newsz * sizeof(*newbuffer));
d588 2
a589 1
	newbuffer = el_realloc(el->el_chared.c_kill.buf, newsz * sizeof(*newbuffer));
d607 2
a608 2
	newbuffer = el_realloc(el->el_chared.c_undo.buf,
	    newsz * sizeof(*newbuffer));
d616 2
a617 2
	newbuffer = el_realloc(el->el_chared.c_redo.buf,
	    newsz * sizeof(*newbuffer));
d642 1
a642 1
	el_free((ptr_t) el->el_line.buffer);
d645 1
a645 1
	el_free((ptr_t) el->el_chared.c_undo.buf);
d647 1
a647 1
	el_free((ptr_t) el->el_chared.c_redo.buf);
d652 1
a652 1
	el_free((ptr_t) el->el_chared.c_kill.buf);
d655 1
a655 1
	el_free((ptr_t) el->el_chared.c_macro.macro);
@


1.10
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d486 2
d628 2
d782 8
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 2
a2 2
/*	$OpenBSD: chared.c,v 1.8 2003/11/25 20:12:38 otto Exp $	*/
/*	$NetBSD: chared.c,v 1.21 2003/11/02 20:08:41 christos Exp $	*/
d44 2
d57 1
a57 1
	uint size;
d62 2
a63 2
	vu->cursor = el->el_line.cursor - el->el_line.buffer;
	memcpy(vu->buf, el->el_line.buffer, size);
d77 1
a77 1
cv_yank(EditLine *el, const char *ptr, int size)
d81 1
a81 1
	memcpy(k->buf, ptr, size +0u);
d92 1
a92 1
	char *cp;
d95 1
a95 1
		if (!ch_enlargebufs(el, num +0u))
d116 1
a116 1
		num = el->el_line.lastchar - el->el_line.cursor;
d124 1
a124 1
		char *cp;
d134 15
d157 1
a157 1
		num = el->el_line.cursor - el->el_line.buffer;
d165 1
a165 1
		char *cp;
d177 15
d196 1
a196 1
ce__isword(int p)
d198 1
a198 1
	return (isalnum(p) || strchr("*?_-.[]~=", p) != NULL);
d206 1
a206 1
cv__isword(int p)
d208 1
a208 1
	if (isalnum(p) || p == '_')
d210 1
a210 1
	if (isgraph(p))
d220 1
a220 1
cv__isWord(int p)
d222 1
a222 1
	return (!isspace(p));
d229 2
a230 2
protected char *
c__prev_word(char *p, char *low, int n, int (*wtest)(int))
d235 1
a235 1
		while ((p >= low) && !(*wtest)((unsigned char) *p))
d237 1
a237 1
		while ((p >= low) && (*wtest)((unsigned char) *p))
d253 2
a254 2
protected char *
c__next_word(char *p, char *high, int n, int (*wtest)(int))
d257 1
a257 1
		while ((p < high) && !(*wtest)((unsigned char) *p))
d259 1
a259 1
		while ((p < high) && (*wtest)((unsigned char) *p))
d271 2
a272 2
protected char *
cv_next_word(EditLine *el, char *p, char *high, int n, int (*wtest)(int))
d277 2
a278 2
		test = (*wtest)((unsigned char) *p);
		while ((p < high) && (*wtest)((unsigned char) *p) == test)
d285 1
a285 1
			while ((p < high) && isspace((unsigned char) *p))
d300 2
a301 2
protected char *
cv_prev_word(char *p, char *low, int n, int (*wtest)(int))
d307 1
a307 1
		while ((p > low) && isspace((unsigned char) *p))
d309 2
a310 2
		test = (*wtest)((unsigned char) *p);
		while ((p >= low) && (*wtest)((unsigned char) *p) == test)
d329 1
a329 1
protected char *
d331 1
a331 1
    char *p,	/* character position */
d350 2
a351 1
	for (i = 0; isdigit((unsigned char) *p); i = 10 * i + *p++ - '0')
d374 1
a374 1
	size = el->el_line.cursor - el->el_chared.c_vcmd.pos;
d400 2
a401 2
protected char *
ce__endword(char *p, char *high, int n)
d406 1
a406 1
		while ((p < high) && isspace((unsigned char) *p))
d408 1
a408 1
		while ((p < high) && !isspace((unsigned char) *p))
d421 2
a422 2
protected char *
cv__endword(char *p, char *high, int n, int (*wtest)(int))
d429 1
a429 1
		while ((p < high) && isspace((unsigned char) *p))
d432 2
a433 2
		test = (*wtest)((unsigned char) *p);
		while ((p < high) && (*wtest)((unsigned char) *p) == test)
d446 4
a449 1
	el->el_line.buffer		= (char *) el_malloc(EL_BUFSIZ);
d453 2
a454 1
	(void) memset(el->el_line.buffer, 0, EL_BUFSIZ);
d459 2
a460 1
	el->el_chared.c_undo.buf	= (char *) el_malloc(EL_BUFSIZ);
d463 2
a464 1
	(void) memset(el->el_chared.c_undo.buf, 0, EL_BUFSIZ);
d467 2
a468 1
	el->el_chared.c_redo.buf	= (char *) el_malloc(EL_BUFSIZ);
d478 2
a479 1
	el->el_chared.c_kill.buf	= (char *) el_malloc(EL_BUFSIZ);
d482 2
a483 1
	(void) memset(el->el_chared.c_kill.buf, 0, EL_BUFSIZ);
d495 4
a498 5
	el->el_chared.c_macro.level	= -1;
	el->el_chared.c_macro.offset	= 0;
	el->el_chared.c_macro.macro	= (char **) el_malloc(EL_MAXMACRO *
	    sizeof(char *));
	if (el->el_chared.c_macro.macro == NULL)
d507 1
a507 1
ch_reset(EditLine *el)
d528 5
a532 1
	el->el_chared.c_macro.level	= -1;
d534 6
a539 1
	el->el_history.eventno		= 0;
d547 1
a547 3
ch_enlargebufs(el, addlen)
	EditLine *el;
	size_t addlen;
d550 1
a550 1
	char *newbuffer, *oldbuf, *oldkbuf;
d566 1
a566 1
	newbuffer = el_realloc(el->el_line.buffer, newsz);
d571 1
a571 1
	(void) memset(&newbuffer[sz], 0, newsz - sz);
d584 1
a584 1
	newbuffer = el_realloc(el->el_chared.c_kill.buf, newsz);
d589 1
a589 1
	(void) memset(&newbuffer[sz], 0, newsz - sz);
d602 2
a603 1
	newbuffer = el_realloc(el->el_chared.c_undo.buf, newsz);
d608 1
a608 1
	(void) memset(&newbuffer[sz], 0, newsz - sz);
d611 2
a612 1
	newbuffer = el_realloc(el->el_chared.c_redo.buf, newsz);
d647 1
a649 1
	ch_reset(el);
d657 1
a657 1
el_insertstr(EditLine *el, const char *s)
d661 1
a661 1
	if ((len = strlen(s)) == 0)
d697 1
a697 1
c_gets(EditLine *el, char *buf, const char *prompt)
d699 3
a701 3
	char ch;
	int len;
	char *cp = el->el_line.buffer;
d704 2
a705 2
		len = strlen(prompt);
		memcpy(cp, prompt, len + 0u);
d716 1
a716 1
		if (el_getc(el, &ch) != 1) {
d726 1
a726 1
			if (len <= 0) {
d754 1
a754 1
	return len;
d764 1
a764 1
	char *ptr;
d776 1
a776 1
		return (el->el_line.cursor - ptr - 1);
@


1.8
log
@Sync libedit to NetBSD libedit as of Nov 8, 2003.
Tested by jmc@@ djm@@ and myself
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.7 2003/10/31 08:42:24 otto Exp $	*/
a36 7
#if !defined(lint) && !defined(SCCSID)
#if 0
static char sccsid[] = "@@(#)chared.c	8.1 (Berkeley) 6/4/93";
#else
static const char rcsid[] = "$OpenBSD: chared.c,v 1.7 2003/10/31 08:42:24 otto Exp $";
#endif
#endif /* not lint && not SCCSID */
@


1.7
log
@Update to NetBSD libedit (from Oct 1, 2003), adding some string
cleaning and history bug fixes. The code includes GNU libreadline
functionality, but the corresponding header files are not installed,
since some libreadline functions are missing. There are some minor API
changes, notably:

old: EditLine *el_init(const char *, FILE *, FILE *);
new: EditLine *el_init(const char *, FILE *, FILE *, FILE *);

old: HistEvent *history(History *h, int op, ...);
new: int history(History *h, HistEvent *ev, int op, ...); plus some
changes in operation names. See editline(3) for details.

Tested by djm@@, mouring@@, jmc@@.

ok deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: chared.c,v 1.19 2003/08/07 16:44:30 agc Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD$";
a459 1
	el->el_chared.c_macro.nline	= NULL;
d461 1
d582 1
a582 1
	el->el_line.limit  = &newbuffer[newsz - EL_LEAVE];
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: chared.c,v 1.5 2003/05/01 21:11:21 avsm Exp $	*/
/*	$NetBSD: chared.c,v 1.2 1997/01/11 06:47:48 lukem Exp $	*/
d36 1
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: chared.c,v 1.5 2003/05/01 21:11:21 avsm Exp $";
d45 1
a45 1
/* 
a47 2
#include "sys.h"

d51 3
d58 30
a87 14
cv_undo(el, action, size, ptr)
    EditLine *el;
    int action, size;
    char *ptr;
{
    c_undo_t *vu = &el->el_chared.c_undo;
    vu->action = action;
    vu->ptr    = ptr;
    vu->isize  = size;
    (void)memcpy(vu->buf, vu->ptr, size);
#ifdef DEBUG_UNDO
    (void)fprintf(el->el_errfile, "Undo buffer \"%s\" size = +%d -%d\n",
		   vu->ptr, vu->isize, vu->dsize);
#endif
d91 1
a91 1
/* c_insert(): 
d95 16
a110 16
c_insert(el, num)
    EditLine *el;
    int num;
{
    char *cp;

    if (el->el_line.lastchar + num >= el->el_line.limit)
	return;			/* can't go past end of buffer */

    if (el->el_line.cursor < el->el_line.lastchar) {	
	/* if I must move chars */
	for (cp = el->el_line.lastchar; cp >= el->el_line.cursor; cp--)
	    cp[num] = *cp;
    }
    el->el_line.lastchar += num;
} /* end c_insert */
d117 1
a117 3
c_delafter(el, num)	
    EditLine *el;
    int num;
d120 2
a121 2
    if (el->el_line.cursor + num > el->el_line.lastchar)
	num = el->el_line.lastchar - el->el_line.cursor;
d123 4
a126 2
    if (num > 0) {			
	char *cp;
d128 2
a129 2
	if (el->el_map.current != el->el_map.emacs) 
	    cv_undo(el, INSERT, num, el->el_line.cursor);
d131 2
a132 2
	for (cp = el->el_line.cursor; cp <= el->el_line.lastchar; cp++)
	    *cp = cp[num];
d134 2
a135 2
	el->el_line.lastchar -= num;
    }
d143 1
a143 3
c_delbefore(el, num)
    EditLine *el;
    int num;
d146 2
a147 2
    if (el->el_line.cursor - num < el->el_line.buffer)
	num = el->el_line.cursor - el->el_line.buffer;	
d149 4
a152 2
    if (num > 0) {		
	char *cp;
d154 2
a155 2
	if (el->el_map.current != el->el_map.emacs) 
	    cv_undo(el, INSERT, num, el->el_line.cursor - num);
d157 4
a160 2
	for (cp = el->el_line.cursor - num; cp <= el->el_line.lastchar; cp++)
	    *cp = cp[num];
d162 2
a163 2
	el->el_line.lastchar -= num;
    }
d171 1
a171 2
ce__isword(p) 
    int p;
d173 1
a173 1
    return isalpha(p) || isdigit(p) || strchr("*?_-.[]~=", p) != NULL;
d181 15
a195 2
cv__isword(p) 
    int p;
d197 1
a197 1
    return !isspace(p);
d205 17
a221 20
c__prev_word(p, low, n, wtest) 
    register char *p, *low;
    register int n;
    int (*wtest)(int);
{
    p--;

    while (n--) {
	while ((p >= low) && !(*wtest)((unsigned char) *p)) 
	    p--;
	while ((p >= low) && (*wtest)((unsigned char) *p)) 
	    p--;
    }

    /* cp now points to one character before the word */
    p++;
    if (p < low)
	p = low;
    /* cp now points where we want it */
    return p;
d229 12
a240 15
c__next_word(p, high, n, wtest)
    register char *p, *high;
    register int n;
    int (*wtest)(int);
{
    while (n--) {
	while ((p < high) && !(*wtest)((unsigned char) *p)) 
	    p++;
	while ((p < high) && (*wtest)((unsigned char) *p)) 
	    p++;
    }
    if (p > high)
	p = high;
    /* p now points where we want it */
    return p;
d247 22
a268 26
cv_next_word(el, p, high, n, wtest)
    EditLine *el;
    register char *p, *high;
    register int n;
    int (*wtest)(int);
{
    int test;

    while (n--) {
    	test = (*wtest)((unsigned char) *p);
	while ((p < high) && (*wtest)((unsigned char) *p) == test) 
	    p++;
	/*
	 * vi historically deletes with cw only the word preserving the
	 * trailing whitespace! This is not what 'w' does..
	 */
	if (el->el_chared.c_vcmd.action != (DELETE|INSERT)) 
	    while ((p < high) && isspace((unsigned char) *p)) 
		p++;
    }

    /* p now points where we want it */
    if (p > high)
	return high;
    else
	return p;
d276 1
a276 5
cv_prev_word(el, p, low, n, wtest)
    EditLine *el;
    register char *p, *low;
    register int n;
    int (*wtest)(int);
d278 1
a278 1
    int test;
a279 1
    while (n--) {
d281 7
a287 10
	/*
	 * vi historically deletes with cb only the word preserving the
	 * leading whitespace! This is not what 'b' does..
	 */
	if (el->el_chared.c_vcmd.action != (DELETE|INSERT)) 
	    while ((p > low) && isspace((unsigned char) *p)) 
		p--;
	test = (*wtest)((unsigned char) *p);
	while ((p >= low) && (*wtest)((unsigned char) *p) == test) 
	    p--;
d289 6
a294 9
	while (isspace((unsigned char) *p)) 
		p++;
    }

    /* p now points where we want it */
    if (p < low)
	return low;
    else
	return p;
d305 24
a328 24
c__number(p, num, dval)
    char *p;	/* character position */
    int *num;	/* Return value	*/
    int dval;	/* dval is the number to subtract from like $-3 */
{
    register int i;
    register int sign = 1;

    if (*++p == '^') {
	*num = 1;
	return p;
    }
    if (*p == '$') {
	if (*++p != '-') {
	    *num = 0x7fffffff;	/* Handle $ */
	    return --p;
	}
	sign = -1;		/* Handle $- */
	++p;
    }
    for (i = 0; isdigit((unsigned char) *p); i = 10 * i + *p++ - '0')
	continue;
    *num = (sign < 0 ? dval - i : i);
    return --p;
d336 1
a336 2
cv_delfini(el)		
    EditLine *el;
d338 2
a339 8
    register int size;
    int oaction;

    if (el->el_chared.c_vcmd.action & INSERT)
	el->el_map.current = el->el_map.key;

    oaction = el->el_chared.c_vcmd.action;
    el->el_chared.c_vcmd.action = NOP;
d341 2
a342 2
    if (el->el_chared.c_vcmd.pos == 0) 
	return;
d344 3
d348 3
a350 3
    if (el->el_line.cursor > el->el_chared.c_vcmd.pos) {
	size = (int) (el->el_line.cursor - el->el_chared.c_vcmd.pos);
	c_delbefore(el, size); 
d352 15
a366 27
	re_refresh_cursor(el);
    }
    else if (el->el_line.cursor < el->el_chared.c_vcmd.pos) {
	size = (int)(el->el_chared.c_vcmd.pos - el->el_line.cursor);
	c_delafter(el, size);
    }
    else {
	size = 1;
	c_delafter(el, size);
    }
    switch (oaction) {
    case DELETE|INSERT:
	el->el_chared.c_undo.action = DELETE|INSERT;
	break;
    case DELETE:
	el->el_chared.c_undo.action = INSERT;
	break;
    case NOP:
    case INSERT:
    default:
	abort();
	break;
    }
	

    el->el_chared.c_undo.ptr = el->el_line.cursor;
    el->el_chared.c_undo.dsize = size;
d375 10
a384 12
ce__endword(p, high, n)
    char *p, *high;
    int n;
{
    p++;

    while (n--) {
	while ((p < high) && isspace((unsigned char) *p))
	    p++;
	while ((p < high) && !isspace((unsigned char) *p)) 
	    p++;
    }
d386 2
a387 2
    p--;
    return p;
d396 16
a411 20
cv__endword(p, high, n)
    char *p, *high;
    int n;
{
    p++;

    while (n--) {
	while ((p < high) && isspace((unsigned char) *p)) 
	    p++;

	if (isalnum((unsigned char) *p))
	    while ((p < high) && isalnum((unsigned char) *p)) 
		p++;
	else
	    while ((p < high) && !(isspace((unsigned char) *p) || 
				   isalnum((unsigned char) *p)))
		p++;
    }
    p--;
    return p;
d418 1
a418 2
ch_init(el)
    EditLine *el;
d420 47
a466 35
    el->el_line.buffer              = (char *)  el_malloc(EL_BUFSIZ);
    (void)memset(el->el_line.buffer, 0, EL_BUFSIZ);
    el->el_line.cursor              = el->el_line.buffer;
    el->el_line.lastchar            = el->el_line.buffer;
    el->el_line.limit  		    = &el->el_line.buffer[EL_BUFSIZ - 2];

    el->el_chared.c_undo.buf        = (char *)  el_malloc(EL_BUFSIZ);
    (void)memset(el->el_chared.c_undo.buf, 0, EL_BUFSIZ);
    el->el_chared.c_undo.action     = NOP;
    el->el_chared.c_undo.isize      = 0;
    el->el_chared.c_undo.dsize      = 0;
    el->el_chared.c_undo.ptr        = el->el_line.buffer;

    el->el_chared.c_vcmd.action     = NOP;
    el->el_chared.c_vcmd.pos        = el->el_line.buffer;
    el->el_chared.c_vcmd.ins        = el->el_line.buffer;

    el->el_chared.c_kill.buf        = (char *)  el_malloc(EL_BUFSIZ);
    (void)memset(el->el_chared.c_kill.buf, 0, EL_BUFSIZ);
    el->el_chared.c_kill.mark       = el->el_line.buffer;
    el->el_chared.c_kill.last       = el->el_chared.c_kill.buf;

    el->el_map.current              = el->el_map.key;

    el->el_state.inputmode = MODE_INSERT; /* XXX: save a default */
    el->el_state.doingarg  = 0;
    el->el_state.metanext  = 0;
    el->el_state.argument  = 1;
    el->el_state.lastcmd   = ED_UNASSIGNED;

    el->el_chared.c_macro.nline     = NULL;
    el->el_chared.c_macro.level     = -1;
    el->el_chared.c_macro.macro     = (char **) el_malloc(EL_MAXMACRO * 
						          sizeof(char *));
    return 0;
d473 1
a473 2
ch_reset(el)
    EditLine *el;
d475 2
a476 2
    el->el_line.cursor              = el->el_line.buffer;
    el->el_line.lastchar            = el->el_line.buffer;
d478 2
a479 4
    el->el_chared.c_undo.action     = NOP;
    el->el_chared.c_undo.isize      = 0;
    el->el_chared.c_undo.dsize      = 0;
    el->el_chared.c_undo.ptr        = el->el_line.buffer;
d481 2
a482 3
    el->el_chared.c_vcmd.action     = NOP;
    el->el_chared.c_vcmd.pos        = el->el_line.buffer;
    el->el_chared.c_vcmd.ins        = el->el_line.buffer;
d484 1
a484 1
    el->el_chared.c_kill.mark       = el->el_line.buffer;
d486 1
a486 1
    el->el_map.current              = el->el_map.key;
d488 5
a492 5
    el->el_state.inputmode = MODE_INSERT; /* XXX: save a default */
    el->el_state.doingarg  = 0;
    el->el_state.metanext  = 0;
    el->el_state.argument  = 1;
    el->el_state.lastcmd   = ED_UNASSIGNED;
d494 1
a494 1
    el->el_chared.c_macro.level     = -1;
d496 1
a496 1
    el->el_history.eventno = 0;
d499 86
d590 1
a590 2
ch_end(el)
    EditLine *el;
d592 15
a606 10
    el_free((ptr_t) el->el_line.buffer);
    el->el_line.buffer = NULL;
    el->el_line.limit = NULL;
    el_free((ptr_t) el->el_chared.c_undo.buf);
    el->el_chared.c_undo.buf = NULL;
    el_free((ptr_t) el->el_chared.c_kill.buf);
    el->el_chared.c_kill.buf = NULL;
    el_free((ptr_t) el->el_chared.c_macro.macro);
    el->el_chared.c_macro.macro = NULL;
    ch_reset(el);
d614 15
a628 15
el_insertstr(el, s)
    EditLine *el;
    char   *s;
{
    int len;

    if ((len = strlen(s)) == 0)
	return -1;
    if (el->el_line.lastchar + len >= el->el_line.limit)
	return -1;

    c_insert(el, len);
    while (*s)
	*el->el_line.cursor++ = *s++;
    return 0;
d636 12
a647 14
el_deletestr(el, n)
    EditLine *el;
    int     n;
{
    if (n <= 0)
	return;

    if (el->el_line.cursor < &el->el_line.buffer[n]) 
	return;

    c_delbefore(el, n);		/* delete before dot */
    el->el_line.cursor -= n;
    if (el->el_line.cursor < el->el_line.buffer)
	el->el_line.cursor = el->el_line.buffer;
d654 58
a711 48
c_gets(el, buf)
    EditLine *el;
    char *buf;
{
    char ch;
    int len = 0;

    for (ch = 0; ch == 0;) {
	if (el_getc(el, &ch) != 1)
	    return ed_end_of_file(el, 0);
	switch (ch) {
	case 0010:	/* Delete and backspace */
	case 0177:
	    if (len > 1) {
		*el->el_line.cursor-- = '\0';
		el->el_line.lastchar = el->el_line.cursor;
		buf[len--] = '\0';
	    }
	    else {
		el->el_line.buffer[0] = '\0';
		el->el_line.lastchar = el->el_line.buffer;
		el->el_line.cursor = el->el_line.buffer;
		return CC_REFRESH;
	    }
	    re_refresh(el);
	    ch = 0;
	    break;

	case 0033:	/* ESC */
	case '\r':	/* Newline */
	case '\n':
	    break;

	default:
	    if (len >= EL_BUFSIZ)
		term_beep(el);
	    else {
		buf[len++] = ch;
		*el->el_line.cursor++ = ch;
		el->el_line.lastchar = el->el_line.cursor;
	    }
	    re_refresh(el);
	    ch = 0;
	    break;
	}
    }
    buf[len] = ch;
    return len;
d719 1
a719 2
c_hpos(el)
    EditLine *el;
d721 1
a721 1
    char *ptr;
d723 12
a734 12
    /*
     * Find how many characters till the beginning of this line.
     */
    if (el->el_line.cursor == el->el_line.buffer)
	return 0;
    else {
	for (ptr = el->el_line.cursor - 1; 
	     ptr >= el->el_line.buffer && *ptr != '\n';
	     ptr--)
	    continue;
	return el->el_line.cursor - ptr - 1;
    }
@


1.5
log
@is -Wall clean by making rcsid const
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.4 2002/02/16 21:27:26 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: chared.c,v 1.4 2002/02/16 21:27:26 millert Exp $";
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.3 1997/03/14 05:12:41 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: chared.c,v 1.3 1997/03/14 05:12:41 millert Exp $";
@


1.3
log
@fix el_source() - a block needed braces around it (from NetBSD)
Some strcpy() -> strncpy (from NetBSD)
Some KNF
Add current NetBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.c,v 1.2 1997/01/16 05:18:28 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: chared.c,v 1.2 1997/01/16 05:18:28 millert Exp $";
d180 1
a180 1
    int (*wtest) __P((int));
d207 1
a207 1
    int (*wtest) __P((int));
d229 1
a229 1
    int (*wtest) __P((int));
d262 1
a262 1
    int (*wtest) __P((int));
@


1.2
log
@Merge in NetBSD libedit changes and new man pages.  Also fix some
strncpy() usage in their code.  NetBSD change log was:
    * add a man page for the editline routines
    * add a man page describing editrc
    * fix bugs in el_parse():
      * didn't execute command when program name matched (test reversed)
      * was checking against empty string instead of program name
      * after checks, command to run also pointed to empty string
    * document ^char and \ escape sequences
    * when parsing ^char control chars, check the correct char when determining
      validity (previously, ^char was a NOP interpreted as the literal string
      because of this bug)
    * Implement CC_REDISPLAY, which (unlike CC_REFRESH) redraws the entire input
    * line (a la ^R). This is useful if the binding outputs information and
    * mucks up the input line. To be used in ``list-choices'' bindings (refer
    * to the ^D binding in csh when filec is set)
@
text
@d1 2
a2 1
/*	$OpenBSD: $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: $";
d69 1
a69 1
    (void) memcpy(vu->buf, vu->ptr, size);
d71 1
a71 1
    (void) fprintf(el->el_errfile, "Undo buffer \"%s\" size = +%d -%d\n",
d437 1
a437 1
    (void) memset(el->el_line.buffer, 0, EL_BUFSIZ);
d443 1
a443 1
    (void) memset(el->el_chared.c_undo.buf, 0, EL_BUFSIZ);
d454 1
a454 1
    (void) memset(el->el_chared.c_kill.buf, 0, EL_BUFSIZ);
@


1.1
log
@Initial revision
@
text
@d1 2
d40 1
d42 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
