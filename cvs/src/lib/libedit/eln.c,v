head	1.18;
access;
symbols
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.12
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.04.11.21.17.29;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	I3AtNAFb4FywnTMT;

1.17
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	OUneMOe0l7HombT5;

1.16
date	2016.04.11.19.54.54;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	xizUpRlYj2C4Hcj6;

1.15
date	2016.04.09.20.15.26;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	0bnhGLXZIvXlnMLp;

1.14
date	2016.04.09.19.31.55;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	t22PDRfkb5DJX3rc;

1.13
date	2016.03.22.11.21.02;	author martijn;	state Exp;
branches;
next	1.12;
commitid	iU1rG79moY2rYeHM;

1.12
date	2016.03.21.18.40.25;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	RG1lPKia9X4hncVR;

1.11
date	2016.03.21.17.28.10;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	bxfYrS2VROPyQgXw;

1.10
date	2016.03.21.15.25.39;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	Qq3DwK1S3lWtyR8X;

1.9
date	2016.03.20.22.57.59;	author schwarze;	state Exp;
branches;
next	1.8;
commitid	VBVmrUoZFnMc0hts;

1.8
date	2016.03.20.19.33.16;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	QfpWh7MIpK70Anq8;

1.7
date	2016.03.20.19.14.29;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	GCeM4pTD7ijmLqYD;

1.6
date	2016.01.30.17.32.52;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	wAt9MiELkmlnoi4U;

1.5
date	2016.01.30.00.06.39;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	tGf8IdK8wCurneJ7;

1.4
date	2014.05.20.11.59.03;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.27.21.46.44;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.07.05.40.42;	author okan;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@delete the "private" and "public" preprocessor macros, just use standard C;
OK martijn@@
@
text
@/*	$OpenBSD: eln.c,v 1.17 2016/04/11 20:43:33 schwarze Exp $	*/
/*	$NetBSD: eln.c,v 1.9 2010/11/04 13:53:12 christos Exp $	*/

/*-
 * Copyright (c) 2009 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "config.h"

#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#include "el.h"

int
el_getc(EditLine *el, char *cp)
{
	int num_read;
	wchar_t wc = 0;

	num_read = el_wgetc(el, &wc);
	*cp = '\0';
	if (num_read <= 0)
		return num_read;
	num_read = wctob(wc);
	if (num_read == EOF) {
		errno = ERANGE;
		return -1;
	} else {
		*cp = num_read;
		return 1;
	}
}


void
el_push(EditLine *el, const char *str)
{
	/* Using multibyte->wide string decoding works fine under single-byte
	 * character sets too, and Does The Right Thing. */
	el_wpush(el, ct_decode_string(str, &el->el_lgcyconv));
}


const char *
el_gets(EditLine *el, int *nread)
{
	const wchar_t *tmp;
	wchar_t *rd, *wr;

	if ((tmp = el_wgets(el, nread)) == NULL)
		return NULL;

	/*
	 * Temporary until the libedit audit is complete:
	 * Filter out all non-ASCII characters.
	 */
	wr = (wchar_t *)tmp;
	for (rd = wr; *rd != L'\0'; rd++) {
		if (wr < rd)
			*wr = *rd;
		if (*rd < 128)
			wr++;
	}
	*wr = L'\0';
	*nread = wr - tmp;

	return ct_encode_string(tmp, &el->el_lgcyconv);
}


int
el_parse(EditLine *el, int argc, const char *argv[])
{
	int ret;
	const wchar_t **wargv;

	wargv = (const wchar_t **)
	    ct_decode_argv(argc, argv, &el->el_lgcyconv);
	if (!wargv)
		return -1;
	ret = el_wparse(el, argc, wargv);
	free(wargv);

	return ret;
}


int
el_set(EditLine *el, int op, ...)
{
	va_list ap;
	int ret;

	if (!el)
		return -1;
	va_start(ap, op);

	switch (op) {
	case EL_PROMPT:         /* el_pfunc_t */
	case EL_RPROMPT: {
		el_pfunc_t p = va_arg(ap, el_pfunc_t);
		ret = prompt_set(el, p, 0, op, 0);
		break;
	}

	case EL_RESIZE: {
		el_zfunc_t p = va_arg(ap, el_zfunc_t);
		void *arg = va_arg(ap, void *);
		ret = ch_resizefun(el, p, arg);
		break;
	}

	case EL_TERMINAL:       /* const char * */
		ret = el_wset(el, op, va_arg(ap, char *));
		break;

	case EL_EDITOR:		/* const wchar_t * */
		ret = el_wset(el, op, ct_decode_string(va_arg(ap, char *),
		    &el->el_lgcyconv));
		break;

	case EL_SIGNAL:         /* int */
	case EL_EDITMODE:
	case EL_UNBUFFERED:
	case EL_PREP_TERM:
		ret = el_wset(el, op, va_arg(ap, int));
		break;

	case EL_BIND:   /* const char * list -> const wchar_t * list */
	case EL_TELLTC:
	case EL_SETTC:
	case EL_ECHOTC:
	case EL_SETTY: {
		const char *argv[21];
		int i;
		const wchar_t **wargv;
		for (i = 1; i < (int)__arraycount(argv) - 1; ++i)
			if ((argv[i] = va_arg(ap, char *)) == NULL)
			    break;
		argv[0] = argv[i] = NULL;
		wargv = (const wchar_t **)
		    ct_decode_argv(i + 1, argv, &el->el_lgcyconv);
		if (!wargv) {
		    ret = -1;
		    goto out;
		}
		/*
		 * AFAIK we can't portably pass through our new wargv to
		 * el_wset(), so we have to reimplement the body of
		 * el_wset() for these ops.
		 */
		switch (op) {
		case EL_BIND:
			wargv[0] = L"bind";
			ret = map_bind(el, i, wargv);
			break;
		case EL_TELLTC:
			wargv[0] = L"telltc";
			ret = terminal_telltc(el, i, wargv);
			break;
		case EL_SETTC:
			wargv[0] = L"settc";
			ret = terminal_settc(el, i, wargv);
			break;
		case EL_ECHOTC:
			wargv[0] = L"echotc";
			ret = terminal_echotc(el, i, wargv);
			break;
		case EL_SETTY:
			wargv[0] = L"setty";
			ret = tty_stty(el, i, wargv);
			break;
		default:
			ret = -1;
		}
		free(wargv);
		break;
	}

	/* XXX: do we need to change el_func_t too? */
	case EL_ADDFN: {          /* const char *, const char *, el_func_t */
		const char *args[2];
		el_func_t func;
		wchar_t **wargv;

		args[0] = va_arg(ap, const char *);
		args[1] = va_arg(ap, const char *);
		func = va_arg(ap, el_func_t);

		wargv = ct_decode_argv(2, args, &el->el_lgcyconv);
		if (!wargv) {
		    ret = -1;
		    goto out;
		}
		/* XXX: The two strdup's leak */
		ret = map_addfunc(el, wcsdup(wargv[0]), wcsdup(wargv[1]),
		    func);
		free(wargv);
		break;
	}
	case EL_HIST: {           /* hist_fun_t, const char * */
		hist_fun_t fun = va_arg(ap, hist_fun_t);
		void *ptr = va_arg(ap, void *);
		ret = hist_set(el, fun, ptr);
		el->el_flags |= NARROW_HISTORY;
		break;
	}
	case EL_GETCFN:         /* el_rfunc_t */
		ret = el_wset(el, op, va_arg(ap, el_rfunc_t));
		break;
	case EL_CLIENTDATA:     /* void * */
		ret = el_wset(el, op, va_arg(ap, void *));
		break;
	case EL_SETFP: {          /* int, FILE * */
		int what = va_arg(ap, int);
		FILE *fp = va_arg(ap, FILE *);
		ret = el_wset(el, op, what, fp);
		break;
	}
	case EL_PROMPT_ESC: /* el_pfunc_t, char */
	case EL_RPROMPT_ESC: {
		el_pfunc_t p = va_arg(ap, el_pfunc_t);
		char c = va_arg(ap, int);
		ret = prompt_set(el, p, c, op, 0);
		break;
	}
	default:
		ret = -1;
		break;
	}

out:
	va_end(ap);
	return ret;
}


int
el_get(EditLine *el, int op, ...)
{
	va_list ap;
	int ret;

	if (!el)
		return -1;

	va_start(ap, op);

	switch (op) {
	case EL_PROMPT:         /* el_pfunc_t * */
	case EL_RPROMPT: {
		el_pfunc_t *p = va_arg(ap, el_pfunc_t *);
		ret = prompt_get(el, p, 0, op);
		break;
	}

	case EL_PROMPT_ESC: /* el_pfunc_t *, char **/
	case EL_RPROMPT_ESC: {
		el_pfunc_t *p = va_arg(ap, el_pfunc_t *);
		char *c = va_arg(ap, char *);
		wchar_t wc = 0;
		ret = prompt_get(el, p, &wc, op);
		*c = (unsigned char)wc;
		break;
	}

	case EL_EDITOR: {
		const char **p = va_arg(ap, const char **);
		const wchar_t *pw;
		ret = el_wget(el, op, &pw);
		*p = ct_encode_string(pw, &el->el_lgcyconv);
		if (!el->el_lgcyconv.csize)
			ret = -1;
		break;
	}

	case EL_TERMINAL:       /* const char ** */
		ret = el_wget(el, op, va_arg(ap, const char **));
		break;

	case EL_SIGNAL:         /* int * */
	case EL_EDITMODE:
	case EL_UNBUFFERED:
	case EL_PREP_TERM:
		ret = el_wget(el, op, va_arg(ap, int *));
		break;

	case EL_GETTC: {
		char *argv[20];
		static char gettc[] = "gettc";
		int i;
		for (i = 1; i < (int)__arraycount(argv); ++i)
			if ((argv[i] = va_arg(ap, char *)) == NULL)
				break;
		argv[0] = gettc;
		ret = terminal_gettc(el, i, argv);
		break;
	}

	case EL_GETCFN:         /* el_rfunc_t */
		ret = el_wget(el, op, va_arg(ap, el_rfunc_t *));
		break;

	case EL_CLIENTDATA:     /* void ** */
		ret = el_wget(el, op, va_arg(ap, void **));
		break;

	case EL_GETFP: {          /* int, FILE ** */
		int what = va_arg(ap, int);
		FILE **fpp = va_arg(ap, FILE **);
		ret = el_wget(el, op, what, fpp);
		break;
	}

	default:
		ret = -1;
		break;
	}

	va_end(ap);
	return ret;
}


const LineInfo *
el_line(EditLine *el)
{
	const LineInfoW *winfo = el_wline(el);
	LineInfo *info = &el->el_lgcylinfo;
	size_t offset;
	const wchar_t *p;

	info->buffer   = ct_encode_string(winfo->buffer, &el->el_lgcyconv);

	offset = 0;
	for (p = winfo->buffer; p < winfo->cursor; p++)
		offset += ct_enc_width(*p);
	info->cursor = info->buffer + offset;

	offset = 0;
	for (p = winfo->buffer; p < winfo->lastchar; p++)
		offset += ct_enc_width(*p);
	info->lastchar = info->buffer + offset;

	return info;
}


int
el_insertstr(EditLine *el, const char *str)
{
	return el_winsertstr(el, ct_decode_string(str, &el->el_lgcyconv));
}
@


1.17
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.16 2016/04/11 19:54:54 schwarze Exp $	*/
d38 1
a38 1
public int
d59 1
a59 1
public void
d68 1
a68 1
public const char *
d95 1
a95 1
public int
d112 1
a112 1
public int
d262 1
a262 1
public int
@


1.16
log
@Move wrapper macros to the two files actually needing them:
FUNW, Strlen, Strdup, Strcmp, Strncmp, Strncpy, Strncat -> history.c
Strchr, tok_strdup -> tokenizer.c
FUN, TYPE, STR -> both of these files

OK martijn@@

Also proofread by Christian Heckendorf <mbie at ulmus dot me>
who reported some whitespace issues in parse.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.15 2016/04/09 20:15:26 schwarze Exp $	*/
d355 1
a355 1
	const Char *p;
@


1.15
log
@Delete 26 wrapper macros and two wrapper functions that are no
longer needed now that we always compile with wide character support,
reducing code obfuscation.

OK czarkoff@@ martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.14 2016/04/09 19:31:55 schwarze Exp $	*/
d178 1
a178 1
			wargv[0] = STR("bind");
d182 1
a182 1
			wargv[0] = STR("telltc");
d186 1
a186 1
			wargv[0] = STR("settc");
d190 1
a190 1
			wargv[0] = STR("echotc");
d194 1
a194 1
			wargv[0] = STR("setty");
d220 1
a220 1
		ret = map_addfunc(el, Strdup(wargv[0]), Strdup(wargv[1]),
@


1.14
log
@Always compile with WIDECHAR on and delete that preprocessor switch.
OK martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.13 2016/03/22 11:21:02 martijn Exp $	*/
d48 1
a48 1
	num_read = ct_wctob(wc);
d106 1
a106 1
	ct_free_argv(wargv);
d200 1
a200 1
		ct_free_argv(wargv);
d222 1
a222 1
		ct_free_argv(wargv);
@


1.13
log
@Add NULL check

OK schwarze@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.12 2016/03/21 18:40:25 schwarze Exp $	*/
a58 1
#ifdef WIDECHAR
a377 1
#endif /* WIDECHAR */
@


1.12
log
@Christos Zoulas just rescinded clauses 3 & 4 of his licenses, see
NetBSD chartype.c rev. 1.23, chartype.h rev. 1.25, eln.c rev. 1.28.
No code change.
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.11 2016/03/21 17:28:10 schwarze Exp $	*/
d75 2
a76 1
	tmp = el_wgets(el, nread);
@


1.11
log
@Make the read_char() function always take a wchar_t * argument.

On first sight, it might look as if this required a bump because
it seems to change the public type el_rfunc_t.  But we only compile
with WIDECHAR, and in that case, there is no change in the interface.

This also simplifies some logic by getting rid of the NARROW_READ flag
which was broken anyway.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.10 2016/03/21 15:25:39 schwarze Exp $	*/
a15 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.10
log
@Reduce the FUN() macro madness by no longer applying it to el_[w]getc(3).
Always use el_wgetc(3) internally.  In the !WIDECHAR case, casting
the result to (Char) is safe because the function returns a byte
rather than a character in that case.
No functional change except for fixing a printf(3) format string issue
when compiled with DEBUG_READ and WIDECHAR.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.9 2016/03/20 22:57:59 schwarze Exp $	*/
a238 1
	/* XXX: do we need to change el_rfunc_t? */
a240 1
		el->el_flags |= NARROW_READ;
a330 1
	/* XXX: do we need to change el_rfunc_t? */
@


1.9
log
@Cleanup of private header inclusion:

1. Do not include private headers from "chared.h", "hist.h", "prompt.h",
"refresh.h", "search.h", "sig.h", "terminal.h", "tty.h".
The only private header having to include other private headers is "el.h".
2. Do not include "common.h", "parse.h", "help.h" from "el.h",
and do not include "emacs.h" and "vi.h" from "chared.h",
include them directly where needed.
3. Do include "fcns.h" from "el.h" because el_func_t is needed for "map.h".
4. Do not include private headers again that are already included by "el.h".
5. Include private headers after standard headers.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.8 2016/03/20 19:33:16 schwarze Exp $	*/
d66 1
d388 1
@


1.8
log
@Delete the weird IGNORE_EXTCHARS flag, simplifying the code
in the generic low-level function read_char().
Until we fully enable UTF-8 support, instead filter out non-ASCII
characters in the more logical place in the high-level function
el_gets(3).
OK czarkoff@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.7 2016/03/20 19:14:29 schwarze Exp $	*/
a37 3
#include "histedit.h"
#include "el.h"
#include "read.h"
d42 2
@


1.7
log
@Fix the public interface function el_getc(3).
On OpenBSD, the effects are to set the return argument to the NUL byte
in case of a read failure (for robustness) and to properly set errno
when the character is out of range and cannot be stored in a byte.
Once we enable UTF-8, this will be needed to avoid returning bogus
bytes for valid Unicode characters.
On systems where the internal representation of wchar_t doesn't
match UCS-4, breakage was potentially even worse.
OK czarkoff@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.6 2016/01/30 17:32:52 schwarze Exp $	*/
d80 1
a81 1
	el->el_flags |= IGNORE_EXTCHARS;
d83 15
a97 1
	el->el_flags &= ~IGNORE_EXTCHARS;
@


1.6
log
@Fifth step in synching with NetBSD:
Delete the silly ptr_t and ioctl_t typedefs
and delete some "#ifdef notdef" code from "sys.h".
No functional change.
This makes hist.h identical to the NetBSD version.
It reduces the remaining diff from +1526 -734 to +1430 -592.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.5 2016/01/30 00:06:39 schwarze Exp $	*/
d41 1
d52 12
a63 9
	if (!(el->el_flags & CHARSET_IS_UTF8))
		el->el_flags |= IGNORE_EXTCHARS;
	num_read = el_wgetc (el, &wc);
	if (!(el->el_flags & CHARSET_IS_UTF8))
		el->el_flags &= ~IGNORE_EXTCHARS;

	if (num_read > 0)
		*cp = (unsigned char)wc;
	return num_read;
@


1.5
log
@Third step in synching with NetBSD:
* rename fkey_t to funckey_t and el_term_t to el_terminal_t
* rename struct editline member el_term to el_terminal
* rename many functions in terminal.c from term_*() to terminal_*(),
for consistency with the file name and to not look related to <term.h>
No functional change.
This makes refresh.c and sig.c almost identical to the NetBSD versions.
It reduces the remaining diff from +2446 -1805 to +2053 -1420.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.4 2014/05/20 11:59:03 nicm Exp $	*/
d216 1
a216 1
		ptr_t ptr = va_arg(ap, ptr_t);
@


1.4
log
@The argv[] used for el_set() EL_BIND, EL_SETTY, etc should be terminated
by NULL. Fix from NetBSD via yasuoka@@ but changed by me not to walk off
the end of array with >20 arguments.

ok yasuoka
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.3 2011/11/27 21:46:44 pascal Exp $	*/
d172 1
a172 1
			ret = term_telltc(el, i, wargv);
d176 1
a176 1
			ret = term_settc(el, i, wargv);
d180 1
a180 1
			ret = term_echotc(el, i, wargv);
d311 1
a311 1
		ret = term_gettc(el, i, argv);
@


1.3
log
@Don't segfault when trying to bind to an invalid command.  While here,
kill a C++-style comment.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.2 2011/07/07 05:40:42 okan Exp $	*/
d147 1
a147 1
		const char *argv[20];
d150 1
a150 1
		for (i = 1; i < (int)__arraycount(argv); ++i)
d153 1
a153 1
		argv[0] = NULL;
d155 1
a155 1
		    ct_decode_argv(i, argv, &el->el_lgcyconv);
@


1.2
log
@sync with upstream, retaining local modifications.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eln.c,v 1.1 2010/06/30 00:05:35 nicm Exp $	*/
d208 1
a208 1
		// XXX: The two strdup's leak
@


1.1
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: eln.c,v 1.7 2010/04/15 00:52:48 christos Exp $	*/
a35 1

d119 7
d218 1
a218 2
		if (!(el->el_flags & CHARSET_IS_UTF8))
			el->el_flags |= NARROW_HISTORY;
d276 1
a276 1
		wchar_t wc;
@

