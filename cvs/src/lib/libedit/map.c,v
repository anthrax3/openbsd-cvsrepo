head	1.27;
access;
symbols
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.2
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.20
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.18
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.14
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.12
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.10
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.26
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.22
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.20
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.18
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.16
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.14
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.12
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.10
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2016.05.06.13.12.52;	author schwarze;	state Exp;
branches;
next	1.26;
commitid	HmIy04UbyUS0d1Sd;

1.26
date	2016.05.03.11.36.17;	author schwarze;	state Exp;
branches;
next	1.25;
commitid	Ib9ZoqKRP1lzVDqJ;

1.25
date	2016.04.18.20.13.07;	author schwarze;	state Exp;
branches;
next	1.24;
commitid	BCiQfkJB2pLlS49p;

1.24
date	2016.04.12.09.04.02;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	0JsQE9vcJ83YRqdA;

1.23
date	2016.04.11.21.17.29;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	I3AtNAFb4FywnTMT;

1.22
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	OUneMOe0l7HombT5;

1.21
date	2016.04.11.19.54.54;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	xizUpRlYj2C4Hcj6;

1.20
date	2016.04.09.20.15.26;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	0bnhGLXZIvXlnMLp;

1.19
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	tRHhB2RN3ZD1GvoI;

1.18
date	2016.03.20.22.57.59;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	VBVmrUoZFnMc0hts;

1.17
date	2016.03.20.20.35.38;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	b06qlwkNEbVitvG0;

1.16
date	2016.01.30.17.32.52;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	wAt9MiELkmlnoi4U;

1.15
date	2016.01.30.12.22.20;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	dCN84ovvbfYwqrqX;

1.14
date	2016.01.30.00.06.39;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	tGf8IdK8wCurneJ7;

1.13
date	2016.01.29.19.32.33;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	Ue1IcMCqgxm4S8jQ;

1.12
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	bdUOvGFxUQgqZg7x;

1.11
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.31.08.42.24;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.01.21.11.21;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.13.20.35.19;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.16.20.24.53;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.14.05.12.54;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.16.05.18.38;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.41;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.41;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Replace the generated file "fcns.c" by a simpler header "func.h"
included only in the one file needing it, "map.c".
That allows to define el_action_t directly in "map.h",
which in turn allows to stop including "fcns.h" from "el.h"
and include it only in the modules needing it.
Now we no longer autogenerate any C files.

Feedback and OK martijn@@.
First version also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@/*	$OpenBSD: map.c,v 1.26 2016/05/03 11:36:17 schwarze Exp $	*/
/*	$NetBSD: map.c,v 1.25 2009/12/30 22:37:40 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "config.h"

/*
 * map.c: Editor function definitions
 */
#include <ctype.h>
#include <stdlib.h>
#include <string.h>

#include "el.h"
#include "common.h"
#include "emacs.h"
#include "vi.h"
#include "fcns.h"
#include "func.h"
#include "help.h"
#include "parse.h"

static void	map_print_key(EditLine *, el_action_t *, const wchar_t *);
static void	map_print_some_keys(EditLine *, el_action_t *, wint_t, wint_t);
static void	map_print_all_keys(EditLine *);
static void	map_init_nls(EditLine *);
static void	map_init_meta(EditLine *);

/* keymap tables ; should be N_KEYS*sizeof(KEYCMD) bytes long */


static const el_action_t  el_map_emacs[] = {
	/*   0 */	EM_SET_MARK,		/* ^@@ */
	/*   1 */	ED_MOVE_TO_BEG,		/* ^A */
	/*   2 */	ED_PREV_CHAR,		/* ^B */
	/*   3 */	ED_IGNORE,		/* ^C */
	/*   4 */	EM_DELETE_OR_LIST,	/* ^D */
	/*   5 */	ED_MOVE_TO_END,		/* ^E */
	/*   6 */	ED_NEXT_CHAR,		/* ^F */
	/*   7 */	ED_UNASSIGNED,		/* ^G */
	/*   8 */	EM_DELETE_PREV_CHAR,	/* ^H */
	/*   9 */	ED_UNASSIGNED,		/* ^I */
	/*  10 */	ED_NEWLINE,		/* ^J */
	/*  11 */	ED_KILL_LINE,		/* ^K */
	/*  12 */	ED_CLEAR_SCREEN,	/* ^L */
	/*  13 */	ED_NEWLINE,		/* ^M */
	/*  14 */	ED_NEXT_HISTORY,	/* ^N */
	/*  15 */	ED_IGNORE,		/* ^O */
	/*  16 */	ED_PREV_HISTORY,	/* ^P */
	/*  17 */	ED_IGNORE,		/* ^Q */
	/*  18 */	ED_REDISPLAY,		/* ^R */
	/*  19 */	ED_IGNORE,		/* ^S */
	/*  20 */	ED_TRANSPOSE_CHARS,	/* ^T */
	/*  21 */	EM_KILL_LINE,		/* ^U */
	/*  22 */	ED_QUOTED_INSERT,	/* ^V */
	/*  23 */	EM_KILL_REGION,		/* ^W */
	/*  24 */	ED_SEQUENCE_LEAD_IN,	/* ^X */
	/*  25 */	EM_YANK,		/* ^Y */
	/*  26 */	ED_IGNORE,		/* ^Z */
	/*  27 */	EM_META_NEXT,		/* ^[ */
	/*  28 */	ED_IGNORE,		/* ^\ */
	/*  29 */	ED_IGNORE,		/* ^] */
	/*  30 */	ED_UNASSIGNED,		/* ^^ */
	/*  31 */	ED_UNASSIGNED,		/* ^_ */
	/*  32 */	ED_INSERT,		/* SPACE */
	/*  33 */	ED_INSERT,		/* ! */
	/*  34 */	ED_INSERT,		/* " */
	/*  35 */	ED_INSERT,		/* # */
	/*  36 */	ED_INSERT,		/* $ */
	/*  37 */	ED_INSERT,		/* % */
	/*  38 */	ED_INSERT,		/* & */
	/*  39 */	ED_INSERT,		/* ' */
	/*  40 */	ED_INSERT,		/* ( */
	/*  41 */	ED_INSERT,		/* ) */
	/*  42 */	ED_INSERT,		/* * */
	/*  43 */	ED_INSERT,		/* + */
	/*  44 */	ED_INSERT,		/* , */
	/*  45 */	ED_INSERT,		/* - */
	/*  46 */	ED_INSERT,		/* . */
	/*  47 */	ED_INSERT,		/* / */
	/*  48 */	ED_DIGIT,		/* 0 */
	/*  49 */	ED_DIGIT,		/* 1 */
	/*  50 */	ED_DIGIT,		/* 2 */
	/*  51 */	ED_DIGIT,		/* 3 */
	/*  52 */	ED_DIGIT,		/* 4 */
	/*  53 */	ED_DIGIT,		/* 5 */
	/*  54 */	ED_DIGIT,		/* 6 */
	/*  55 */	ED_DIGIT,		/* 7 */
	/*  56 */	ED_DIGIT,		/* 8 */
	/*  57 */	ED_DIGIT,		/* 9 */
	/*  58 */	ED_INSERT,		/* : */
	/*  59 */	ED_INSERT,		/* ; */
	/*  60 */	ED_INSERT,		/* < */
	/*  61 */	ED_INSERT,		/* = */
	/*  62 */	ED_INSERT,		/* > */
	/*  63 */	ED_INSERT,		/* ? */
	/*  64 */	ED_INSERT,		/* @@ */
	/*  65 */	ED_INSERT,		/* A */
	/*  66 */	ED_INSERT,		/* B */
	/*  67 */	ED_INSERT,		/* C */
	/*  68 */	ED_INSERT,		/* D */
	/*  69 */	ED_INSERT,		/* E */
	/*  70 */	ED_INSERT,		/* F */
	/*  71 */	ED_INSERT,		/* G */
	/*  72 */	ED_INSERT,		/* H */
	/*  73 */	ED_INSERT,		/* I */
	/*  74 */	ED_INSERT,		/* J */
	/*  75 */	ED_INSERT,		/* K */
	/*  76 */	ED_INSERT,		/* L */
	/*  77 */	ED_INSERT,		/* M */
	/*  78 */	ED_INSERT,		/* N */
	/*  79 */	ED_INSERT,		/* O */
	/*  80 */	ED_INSERT,		/* P */
	/*  81 */	ED_INSERT,		/* Q */
	/*  82 */	ED_INSERT,		/* R */
	/*  83 */	ED_INSERT,		/* S */
	/*  84 */	ED_INSERT,		/* T */
	/*  85 */	ED_INSERT,		/* U */
	/*  86 */	ED_INSERT,		/* V */
	/*  87 */	ED_INSERT,		/* W */
	/*  88 */	ED_INSERT,		/* X */
	/*  89 */	ED_INSERT,		/* Y */
	/*  90 */	ED_INSERT,		/* Z */
	/*  91 */	ED_INSERT,		/* [ */
	/*  92 */	ED_INSERT,		/* \ */
	/*  93 */	ED_INSERT,		/* ] */
	/*  94 */	ED_INSERT,		/* ^ */
	/*  95 */	ED_INSERT,		/* _ */
	/*  96 */	ED_INSERT,		/* ` */
	/*  97 */	ED_INSERT,		/* a */
	/*  98 */	ED_INSERT,		/* b */
	/*  99 */	ED_INSERT,		/* c */
	/* 100 */	ED_INSERT,		/* d */
	/* 101 */	ED_INSERT,		/* e */
	/* 102 */	ED_INSERT,		/* f */
	/* 103 */	ED_INSERT,		/* g */
	/* 104 */	ED_INSERT,		/* h */
	/* 105 */	ED_INSERT,		/* i */
	/* 106 */	ED_INSERT,		/* j */
	/* 107 */	ED_INSERT,		/* k */
	/* 108 */	ED_INSERT,		/* l */
	/* 109 */	ED_INSERT,		/* m */
	/* 110 */	ED_INSERT,		/* n */
	/* 111 */	ED_INSERT,		/* o */
	/* 112 */	ED_INSERT,		/* p */
	/* 113 */	ED_INSERT,		/* q */
	/* 114 */	ED_INSERT,		/* r */
	/* 115 */	ED_INSERT,		/* s */
	/* 116 */	ED_INSERT,		/* t */
	/* 117 */	ED_INSERT,		/* u */
	/* 118 */	ED_INSERT,		/* v */
	/* 119 */	ED_INSERT,		/* w */
	/* 120 */	ED_INSERT,		/* x */
	/* 121 */	ED_INSERT,		/* y */
	/* 122 */	ED_INSERT,		/* z */
	/* 123 */	ED_INSERT,		/* { */
	/* 124 */	ED_INSERT,		/* | */
	/* 125 */	ED_INSERT,		/* } */
	/* 126 */	ED_INSERT,		/* ~ */
	/* 127 */	EM_DELETE_PREV_CHAR,	/* ^? */
	/* 128 */	ED_UNASSIGNED,		/* M-^@@ */
	/* 129 */	ED_UNASSIGNED,		/* M-^A */
	/* 130 */	ED_UNASSIGNED,		/* M-^B */
	/* 131 */	ED_UNASSIGNED,		/* M-^C */
	/* 132 */	ED_UNASSIGNED,		/* M-^D */
	/* 133 */	ED_UNASSIGNED,		/* M-^E */
	/* 134 */	ED_UNASSIGNED,		/* M-^F */
	/* 135 */	ED_UNASSIGNED,		/* M-^G */
	/* 136 */	ED_DELETE_PREV_WORD,	/* M-^H */
	/* 137 */	ED_UNASSIGNED,		/* M-^I */
	/* 138 */	ED_UNASSIGNED,		/* M-^J */
	/* 139 */	ED_UNASSIGNED,		/* M-^K */
	/* 140 */	ED_CLEAR_SCREEN,	/* M-^L */
	/* 141 */	ED_UNASSIGNED,		/* M-^M */
	/* 142 */	ED_UNASSIGNED,		/* M-^N */
	/* 143 */	ED_UNASSIGNED,		/* M-^O */
	/* 144 */	ED_UNASSIGNED,		/* M-^P */
	/* 145 */	ED_UNASSIGNED,		/* M-^Q */
	/* 146 */	ED_UNASSIGNED,		/* M-^R */
	/* 147 */	ED_UNASSIGNED,		/* M-^S */
	/* 148 */	ED_UNASSIGNED,		/* M-^T */
	/* 149 */	ED_UNASSIGNED,		/* M-^U */
	/* 150 */	ED_UNASSIGNED,		/* M-^V */
	/* 151 */	ED_UNASSIGNED,		/* M-^W */
	/* 152 */	ED_UNASSIGNED,		/* M-^X */
	/* 153 */	ED_UNASSIGNED,		/* M-^Y */
	/* 154 */	ED_UNASSIGNED,		/* M-^Z */
	/* 155 */	ED_UNASSIGNED,		/* M-^[ */
	/* 156 */	ED_UNASSIGNED,		/* M-^\ */
	/* 157 */	ED_UNASSIGNED,		/* M-^] */
	/* 158 */	ED_UNASSIGNED,		/* M-^^ */
	/* 159 */	EM_COPY_PREV_WORD,	/* M-^_ */
	/* 160 */	ED_UNASSIGNED,		/* M-SPACE */
	/* 161 */	ED_UNASSIGNED,		/* M-! */
	/* 162 */	ED_UNASSIGNED,		/* M-" */
	/* 163 */	ED_UNASSIGNED,		/* M-# */
	/* 164 */	ED_UNASSIGNED,		/* M-$ */
	/* 165 */	ED_UNASSIGNED,		/* M-% */
	/* 166 */	ED_UNASSIGNED,		/* M-& */
	/* 167 */	ED_UNASSIGNED,		/* M-' */
	/* 168 */	ED_UNASSIGNED,		/* M-( */
	/* 169 */	ED_UNASSIGNED,		/* M-) */
	/* 170 */	ED_UNASSIGNED,		/* M-* */
	/* 171 */	ED_UNASSIGNED,		/* M-+ */
	/* 172 */	ED_UNASSIGNED,		/* M-, */
	/* 173 */	ED_UNASSIGNED,		/* M-- */
	/* 174 */	ED_UNASSIGNED,		/* M-. */
	/* 175 */	ED_UNASSIGNED,		/* M-/ */
	/* 176 */	ED_ARGUMENT_DIGIT,	/* M-0 */
	/* 177 */	ED_ARGUMENT_DIGIT,	/* M-1 */
	/* 178 */	ED_ARGUMENT_DIGIT,	/* M-2 */
	/* 179 */	ED_ARGUMENT_DIGIT,	/* M-3 */
	/* 180 */	ED_ARGUMENT_DIGIT,	/* M-4 */
	/* 181 */	ED_ARGUMENT_DIGIT,	/* M-5 */
	/* 182 */	ED_ARGUMENT_DIGIT,	/* M-6 */
	/* 183 */	ED_ARGUMENT_DIGIT,	/* M-7 */
	/* 184 */	ED_ARGUMENT_DIGIT,	/* M-8 */
	/* 185 */	ED_ARGUMENT_DIGIT,	/* M-9 */
	/* 186 */	ED_UNASSIGNED,		/* M-: */
	/* 187 */	ED_UNASSIGNED,		/* M-; */
	/* 188 */	ED_UNASSIGNED,		/* M-< */
	/* 189 */	ED_UNASSIGNED,		/* M-= */
	/* 190 */	ED_UNASSIGNED,		/* M-> */
	/* 191 */	ED_UNASSIGNED,		/* M-? */
	/* 192 */	ED_UNASSIGNED,		/* M-@@ */
	/* 193 */	ED_UNASSIGNED,		/* M-A */
	/* 194 */	ED_PREV_WORD,		/* M-B */
	/* 195 */	EM_CAPITOL_CASE,	/* M-C */
	/* 196 */	EM_DELETE_NEXT_WORD,	/* M-D */
	/* 197 */	ED_UNASSIGNED,		/* M-E */
	/* 198 */	EM_NEXT_WORD,		/* M-F */
	/* 199 */	ED_UNASSIGNED,		/* M-G */
	/* 200 */	ED_UNASSIGNED,		/* M-H */
	/* 201 */	ED_UNASSIGNED,		/* M-I */
	/* 202 */	ED_UNASSIGNED,		/* M-J */
	/* 203 */	ED_UNASSIGNED,		/* M-K */
	/* 204 */	EM_LOWER_CASE,		/* M-L */
	/* 205 */	ED_UNASSIGNED,		/* M-M */
	/* 206 */	ED_SEARCH_NEXT_HISTORY,	/* M-N */
	/* 207 */	ED_SEQUENCE_LEAD_IN,	/* M-O */
	/* 208 */	ED_SEARCH_PREV_HISTORY,	/* M-P */
	/* 209 */	ED_UNASSIGNED,		/* M-Q */
	/* 210 */	ED_UNASSIGNED,		/* M-R */
	/* 211 */	ED_UNASSIGNED,		/* M-S */
	/* 212 */	ED_UNASSIGNED,		/* M-T */
	/* 213 */	EM_UPPER_CASE,		/* M-U */
	/* 214 */	ED_UNASSIGNED,		/* M-V */
	/* 215 */	EM_COPY_REGION,		/* M-W */
	/* 216 */	ED_COMMAND,		/* M-X */
	/* 217 */	ED_UNASSIGNED,		/* M-Y */
	/* 218 */	ED_UNASSIGNED,		/* M-Z */
	/* 219 */	ED_SEQUENCE_LEAD_IN,	/* M-[ */
	/* 220 */	ED_UNASSIGNED,		/* M-\ */
	/* 221 */	ED_UNASSIGNED,		/* M-] */
	/* 222 */	ED_UNASSIGNED,		/* M-^ */
	/* 223 */	ED_UNASSIGNED,		/* M-_ */
	/* 223 */	ED_UNASSIGNED,		/* M-` */
	/* 224 */	ED_UNASSIGNED,		/* M-a */
	/* 225 */	ED_PREV_WORD,		/* M-b */
	/* 226 */	EM_CAPITOL_CASE,	/* M-c */
	/* 227 */	EM_DELETE_NEXT_WORD,	/* M-d */
	/* 228 */	ED_UNASSIGNED,		/* M-e */
	/* 229 */	EM_NEXT_WORD,		/* M-f */
	/* 230 */	ED_UNASSIGNED,		/* M-g */
	/* 231 */	ED_UNASSIGNED,		/* M-h */
	/* 232 */	ED_UNASSIGNED,		/* M-i */
	/* 233 */	ED_UNASSIGNED,		/* M-j */
	/* 234 */	ED_UNASSIGNED,		/* M-k */
	/* 235 */	EM_LOWER_CASE,		/* M-l */
	/* 236 */	ED_UNASSIGNED,		/* M-m */
	/* 237 */	ED_SEARCH_NEXT_HISTORY,	/* M-n */
	/* 238 */	ED_UNASSIGNED,		/* M-o */
	/* 239 */	ED_SEARCH_PREV_HISTORY,	/* M-p */
	/* 240 */	ED_UNASSIGNED,		/* M-q */
	/* 241 */	ED_UNASSIGNED,		/* M-r */
	/* 242 */	ED_UNASSIGNED,		/* M-s */
	/* 243 */	ED_UNASSIGNED,		/* M-t */
	/* 244 */	EM_UPPER_CASE,		/* M-u */
	/* 245 */	ED_UNASSIGNED,		/* M-v */
	/* 246 */	EM_COPY_REGION,		/* M-w */
	/* 247 */	ED_COMMAND,		/* M-x */
	/* 248 */	ED_UNASSIGNED,		/* M-y */
	/* 249 */	ED_UNASSIGNED,		/* M-z */
	/* 250 */	ED_UNASSIGNED,		/* M-{ */
	/* 251 */	ED_UNASSIGNED,		/* M-| */
	/* 252 */	ED_UNASSIGNED,		/* M-} */
	/* 253 */	ED_UNASSIGNED,		/* M-~ */
	/* 254 */	ED_DELETE_PREV_WORD	/* M-^? */
	/* 255 */
};


/*
 * keymap table for vi.  Each index into above tbl; should be
 * N_KEYS entries long.  Vi mode uses a sticky-extend to do command mode:
 * insert mode characters are in the normal keymap, and command mode
 * in the extended keymap.
 */
static const el_action_t  el_map_vi_insert[] = {
#ifdef KSHVI
	/*   0 */	ED_UNASSIGNED,		/* ^@@ */
	/*   1 */	ED_INSERT,		/* ^A */
	/*   2 */	ED_INSERT,		/* ^B */
	/*   3 */	ED_INSERT,		/* ^C */
	/*   4 */	VI_LIST_OR_EOF,		/* ^D */
	/*   5 */	ED_INSERT,		/* ^E */
	/*   6 */	ED_INSERT,		/* ^F */
	/*   7 */	ED_INSERT,		/* ^G */
	/*   8 */	VI_DELETE_PREV_CHAR,	/* ^H */   /* BackSpace key */
	/*   9 */	ED_INSERT,		/* ^I */   /* Tab Key  */
	/*  10 */	ED_NEWLINE,		/* ^J */
	/*  11 */	ED_INSERT,		/* ^K */
	/*  12 */	ED_INSERT,		/* ^L */
	/*  13 */	ED_NEWLINE,		/* ^M */
	/*  14 */	ED_INSERT,		/* ^N */
	/*  15 */	ED_INSERT,		/* ^O */
	/*  16 */	ED_INSERT,		/* ^P */
	/*  17 */	ED_IGNORE,		/* ^Q */
	/*  18 */	ED_INSERT,		/* ^R */
	/*  19 */	ED_IGNORE,		/* ^S */
	/*  20 */	ED_INSERT,		/* ^T */
	/*  21 */	VI_KILL_LINE_PREV,	/* ^U */
	/*  22 */	ED_QUOTED_INSERT,	/* ^V */
	/*  23 */	ED_DELETE_PREV_WORD,	/* ^W */
		/* ED_DELETE_PREV_WORD: Only until strt edit pos */
	/*  24 */	ED_INSERT,		/* ^X */
	/*  25 */	ED_INSERT,		/* ^Y */
	/*  26 */	ED_INSERT,		/* ^Z */
	/*  27 */	VI_COMMAND_MODE,	/* ^[ */  /* [ Esc ] key */
	/*  28 */	ED_IGNORE,		/* ^\ */
	/*  29 */	ED_INSERT,		/* ^] */
	/*  30 */	ED_INSERT,		/* ^^ */
	/*  31 */	ED_INSERT,		/* ^_ */
#else /* !KSHVI */
				/*
				 * NOTE: These mappings do NOT Correspond well
				 * to the KSH VI editing assignments.
				 * On the other and they are convenient and
				 * many people have have gotten used to them.
				 */
	/*   0 */	ED_UNASSIGNED,		/* ^@@ */
	/*   1 */	ED_MOVE_TO_BEG,		/* ^A */
	/*   2 */	ED_PREV_CHAR,		/* ^B */
	/*   3 */	ED_IGNORE,		/* ^C */
	/*   4 */	VI_LIST_OR_EOF,		/* ^D */
	/*   5 */	ED_MOVE_TO_END,		/* ^E */
	/*   6 */	ED_NEXT_CHAR,		/* ^F */
	/*   7 */	ED_UNASSIGNED,		/* ^G */
	/*   8 */	VI_DELETE_PREV_CHAR,	/* ^H */   /* BackSpace key */
	/*   9 */	ED_UNASSIGNED,		/* ^I */   /* Tab Key */
	/*  10 */	ED_NEWLINE,		/* ^J */
	/*  11 */	ED_KILL_LINE,		/* ^K */
	/*  12 */	ED_CLEAR_SCREEN,	/* ^L */
	/*  13 */	ED_NEWLINE,		/* ^M */
	/*  14 */	ED_NEXT_HISTORY,	/* ^N */
	/*  15 */	ED_IGNORE,		/* ^O */
	/*  16 */	ED_PREV_HISTORY,	/* ^P */
	/*  17 */	ED_IGNORE,		/* ^Q */
	/*  18 */	ED_REDISPLAY,		/* ^R */
	/*  19 */	ED_IGNORE,		/* ^S */
	/*  20 */	ED_TRANSPOSE_CHARS,	/* ^T */
	/*  21 */	VI_KILL_LINE_PREV,	/* ^U */
	/*  22 */	ED_QUOTED_INSERT,	/* ^V */
	/*  23 */	ED_DELETE_PREV_WORD,	/* ^W */
	/*  24 */	ED_UNASSIGNED,		/* ^X */
	/*  25 */	ED_IGNORE,		/* ^Y */
	/*  26 */	ED_IGNORE,		/* ^Z */
	/*  27 */	VI_COMMAND_MODE,	/* ^[ */
	/*  28 */	ED_IGNORE,		/* ^\ */
	/*  29 */	ED_UNASSIGNED,		/* ^] */
	/*  30 */	ED_UNASSIGNED,		/* ^^ */
	/*  31 */	ED_UNASSIGNED,		/* ^_ */
#endif  /* KSHVI */
	/*  32 */	ED_INSERT,		/* SPACE */
	/*  33 */	ED_INSERT,		/* ! */
	/*  34 */	ED_INSERT,		/* " */
	/*  35 */	ED_INSERT,		/* # */
	/*  36 */	ED_INSERT,		/* $ */
	/*  37 */	ED_INSERT,		/* % */
	/*  38 */	ED_INSERT,		/* & */
	/*  39 */	ED_INSERT,		/* ' */
	/*  40 */	ED_INSERT,		/* ( */
	/*  41 */	ED_INSERT,		/* ) */
	/*  42 */	ED_INSERT,		/* * */
	/*  43 */	ED_INSERT,		/* + */
	/*  44 */	ED_INSERT,		/* , */
	/*  45 */	ED_INSERT,		/* - */
	/*  46 */	ED_INSERT,		/* . */
	/*  47 */	ED_INSERT,		/* / */
	/*  48 */	ED_INSERT,		/* 0 */
	/*  49 */	ED_INSERT,		/* 1 */
	/*  50 */	ED_INSERT,		/* 2 */
	/*  51 */	ED_INSERT,		/* 3 */
	/*  52 */	ED_INSERT,		/* 4 */
	/*  53 */	ED_INSERT,		/* 5 */
	/*  54 */	ED_INSERT,		/* 6 */
	/*  55 */	ED_INSERT,		/* 7 */
	/*  56 */	ED_INSERT,		/* 8 */
	/*  57 */	ED_INSERT,		/* 9 */
	/*  58 */	ED_INSERT,		/* : */
	/*  59 */	ED_INSERT,		/* ; */
	/*  60 */	ED_INSERT,		/* < */
	/*  61 */	ED_INSERT,		/* = */
	/*  62 */	ED_INSERT,		/* > */
	/*  63 */	ED_INSERT,		/* ? */
	/*  64 */	ED_INSERT,		/* @@ */
	/*  65 */	ED_INSERT,		/* A */
	/*  66 */	ED_INSERT,		/* B */
	/*  67 */	ED_INSERT,		/* C */
	/*  68 */	ED_INSERT,		/* D */
	/*  69 */	ED_INSERT,		/* E */
	/*  70 */	ED_INSERT,		/* F */
	/*  71 */	ED_INSERT,		/* G */
	/*  72 */	ED_INSERT,		/* H */
	/*  73 */	ED_INSERT,		/* I */
	/*  74 */	ED_INSERT,		/* J */
	/*  75 */	ED_INSERT,		/* K */
	/*  76 */	ED_INSERT,		/* L */
	/*  77 */	ED_INSERT,		/* M */
	/*  78 */	ED_INSERT,		/* N */
	/*  79 */	ED_INSERT,		/* O */
	/*  80 */	ED_INSERT,		/* P */
	/*  81 */	ED_INSERT,		/* Q */
	/*  82 */	ED_INSERT,		/* R */
	/*  83 */	ED_INSERT,		/* S */
	/*  84 */	ED_INSERT,		/* T */
	/*  85 */	ED_INSERT,		/* U */
	/*  86 */	ED_INSERT,		/* V */
	/*  87 */	ED_INSERT,		/* W */
	/*  88 */	ED_INSERT,		/* X */
	/*  89 */	ED_INSERT,		/* Y */
	/*  90 */	ED_INSERT,		/* Z */
	/*  91 */	ED_INSERT,		/* [ */
	/*  92 */	ED_INSERT,		/* \ */
	/*  93 */	ED_INSERT,		/* ] */
	/*  94 */	ED_INSERT,		/* ^ */
	/*  95 */	ED_INSERT,		/* _ */
	/*  96 */	ED_INSERT,		/* ` */
	/*  97 */	ED_INSERT,		/* a */
	/*  98 */	ED_INSERT,		/* b */
	/*  99 */	ED_INSERT,		/* c */
	/* 100 */	ED_INSERT,		/* d */
	/* 101 */	ED_INSERT,		/* e */
	/* 102 */	ED_INSERT,		/* f */
	/* 103 */	ED_INSERT,		/* g */
	/* 104 */	ED_INSERT,		/* h */
	/* 105 */	ED_INSERT,		/* i */
	/* 106 */	ED_INSERT,		/* j */
	/* 107 */	ED_INSERT,		/* k */
	/* 108 */	ED_INSERT,		/* l */
	/* 109 */	ED_INSERT,		/* m */
	/* 110 */	ED_INSERT,		/* n */
	/* 111 */	ED_INSERT,		/* o */
	/* 112 */	ED_INSERT,		/* p */
	/* 113 */	ED_INSERT,		/* q */
	/* 114 */	ED_INSERT,		/* r */
	/* 115 */	ED_INSERT,		/* s */
	/* 116 */	ED_INSERT,		/* t */
	/* 117 */	ED_INSERT,		/* u */
	/* 118 */	ED_INSERT,		/* v */
	/* 119 */	ED_INSERT,		/* w */
	/* 120 */	ED_INSERT,		/* x */
	/* 121 */	ED_INSERT,		/* y */
	/* 122 */	ED_INSERT,		/* z */
	/* 123 */	ED_INSERT,		/* { */
	/* 124 */	ED_INSERT,		/* | */
	/* 125 */	ED_INSERT,		/* } */
	/* 126 */	ED_INSERT,		/* ~ */
	/* 127 */	VI_DELETE_PREV_CHAR,	/* ^? */
	/* 128 */	ED_INSERT,		/* M-^@@ */
	/* 129 */	ED_INSERT,		/* M-^A */
	/* 130 */	ED_INSERT,		/* M-^B */
	/* 131 */	ED_INSERT,		/* M-^C */
	/* 132 */	ED_INSERT,		/* M-^D */
	/* 133 */	ED_INSERT,		/* M-^E */
	/* 134 */	ED_INSERT,		/* M-^F */
	/* 135 */	ED_INSERT,		/* M-^G */
	/* 136 */	ED_INSERT,		/* M-^H */
	/* 137 */	ED_INSERT,		/* M-^I */
	/* 138 */	ED_INSERT,		/* M-^J */
	/* 139 */	ED_INSERT,		/* M-^K */
	/* 140 */	ED_INSERT,		/* M-^L */
	/* 141 */	ED_INSERT,		/* M-^M */
	/* 142 */	ED_INSERT,		/* M-^N */
	/* 143 */	ED_INSERT,		/* M-^O */
	/* 144 */	ED_INSERT,		/* M-^P */
	/* 145 */	ED_INSERT,		/* M-^Q */
	/* 146 */	ED_INSERT,		/* M-^R */
	/* 147 */	ED_INSERT,		/* M-^S */
	/* 148 */	ED_INSERT,		/* M-^T */
	/* 149 */	ED_INSERT,		/* M-^U */
	/* 150 */	ED_INSERT,		/* M-^V */
	/* 151 */	ED_INSERT,		/* M-^W */
	/* 152 */	ED_INSERT,		/* M-^X */
	/* 153 */	ED_INSERT,		/* M-^Y */
	/* 154 */	ED_INSERT,		/* M-^Z */
	/* 155 */	ED_INSERT,		/* M-^[ */
	/* 156 */	ED_INSERT,		/* M-^\ */
	/* 157 */	ED_INSERT,		/* M-^] */
	/* 158 */	ED_INSERT,		/* M-^^ */
	/* 159 */	ED_INSERT,		/* M-^_ */
	/* 160 */	ED_INSERT,		/* M-SPACE */
	/* 161 */	ED_INSERT,		/* M-! */
	/* 162 */	ED_INSERT,		/* M-" */
	/* 163 */	ED_INSERT,		/* M-# */
	/* 164 */	ED_INSERT,		/* M-$ */
	/* 165 */	ED_INSERT,		/* M-% */
	/* 166 */	ED_INSERT,		/* M-& */
	/* 167 */	ED_INSERT,		/* M-' */
	/* 168 */	ED_INSERT,		/* M-( */
	/* 169 */	ED_INSERT,		/* M-) */
	/* 170 */	ED_INSERT,		/* M-* */
	/* 171 */	ED_INSERT,		/* M-+ */
	/* 172 */	ED_INSERT,		/* M-, */
	/* 173 */	ED_INSERT,		/* M-- */
	/* 174 */	ED_INSERT,		/* M-. */
	/* 175 */	ED_INSERT,		/* M-/ */
	/* 176 */	ED_INSERT,		/* M-0 */
	/* 177 */	ED_INSERT,		/* M-1 */
	/* 178 */	ED_INSERT,		/* M-2 */
	/* 179 */	ED_INSERT,		/* M-3 */
	/* 180 */	ED_INSERT,		/* M-4 */
	/* 181 */	ED_INSERT,		/* M-5 */
	/* 182 */	ED_INSERT,		/* M-6 */
	/* 183 */	ED_INSERT,		/* M-7 */
	/* 184 */	ED_INSERT,		/* M-8 */
	/* 185 */	ED_INSERT,		/* M-9 */
	/* 186 */	ED_INSERT,		/* M-: */
	/* 187 */	ED_INSERT,		/* M-; */
	/* 188 */	ED_INSERT,		/* M-< */
	/* 189 */	ED_INSERT,		/* M-= */
	/* 190 */	ED_INSERT,		/* M-> */
	/* 191 */	ED_INSERT,		/* M-? */
	/* 192 */	ED_INSERT,		/* M-@@ */
	/* 193 */	ED_INSERT,		/* M-A */
	/* 194 */	ED_INSERT,		/* M-B */
	/* 195 */	ED_INSERT,		/* M-C */
	/* 196 */	ED_INSERT,		/* M-D */
	/* 197 */	ED_INSERT,		/* M-E */
	/* 198 */	ED_INSERT,		/* M-F */
	/* 199 */	ED_INSERT,		/* M-G */
	/* 200 */	ED_INSERT,		/* M-H */
	/* 201 */	ED_INSERT,		/* M-I */
	/* 202 */	ED_INSERT,		/* M-J */
	/* 203 */	ED_INSERT,		/* M-K */
	/* 204 */	ED_INSERT,		/* M-L */
	/* 205 */	ED_INSERT,		/* M-M */
	/* 206 */	ED_INSERT,		/* M-N */
	/* 207 */	ED_INSERT,		/* M-O */
	/* 208 */	ED_INSERT,		/* M-P */
	/* 209 */	ED_INSERT,		/* M-Q */
	/* 210 */	ED_INSERT,		/* M-R */
	/* 211 */	ED_INSERT,		/* M-S */
	/* 212 */	ED_INSERT,		/* M-T */
	/* 213 */	ED_INSERT,		/* M-U */
	/* 214 */	ED_INSERT,		/* M-V */
	/* 215 */	ED_INSERT,		/* M-W */
	/* 216 */	ED_INSERT,		/* M-X */
	/* 217 */	ED_INSERT,		/* M-Y */
	/* 218 */	ED_INSERT,		/* M-Z */
	/* 219 */	ED_INSERT,		/* M-[ */
	/* 220 */	ED_INSERT,		/* M-\ */
	/* 221 */	ED_INSERT,		/* M-] */
	/* 222 */	ED_INSERT,		/* M-^ */
	/* 223 */	ED_INSERT,		/* M-_ */
	/* 224 */	ED_INSERT,		/* M-` */
	/* 225 */	ED_INSERT,		/* M-a */
	/* 226 */	ED_INSERT,		/* M-b */
	/* 227 */	ED_INSERT,		/* M-c */
	/* 228 */	ED_INSERT,		/* M-d */
	/* 229 */	ED_INSERT,		/* M-e */
	/* 230 */	ED_INSERT,		/* M-f */
	/* 231 */	ED_INSERT,		/* M-g */
	/* 232 */	ED_INSERT,		/* M-h */
	/* 233 */	ED_INSERT,		/* M-i */
	/* 234 */	ED_INSERT,		/* M-j */
	/* 235 */	ED_INSERT,		/* M-k */
	/* 236 */	ED_INSERT,		/* M-l */
	/* 237 */	ED_INSERT,		/* M-m */
	/* 238 */	ED_INSERT,		/* M-n */
	/* 239 */	ED_INSERT,		/* M-o */
	/* 240 */	ED_INSERT,		/* M-p */
	/* 241 */	ED_INSERT,		/* M-q */
	/* 242 */	ED_INSERT,		/* M-r */
	/* 243 */	ED_INSERT,		/* M-s */
	/* 244 */	ED_INSERT,		/* M-t */
	/* 245 */	ED_INSERT,		/* M-u */
	/* 246 */	ED_INSERT,		/* M-v */
	/* 247 */	ED_INSERT,		/* M-w */
	/* 248 */	ED_INSERT,		/* M-x */
	/* 249 */	ED_INSERT,		/* M-y */
	/* 250 */	ED_INSERT,		/* M-z */
	/* 251 */	ED_INSERT,		/* M-{ */
	/* 252 */	ED_INSERT,		/* M-| */
	/* 253 */	ED_INSERT,		/* M-} */
	/* 254 */	ED_INSERT,		/* M-~ */
	/* 255 */	ED_INSERT		/* M-^? */
};

static const el_action_t el_map_vi_command[] = {
	/*   0 */	ED_UNASSIGNED,		/* ^@@ */
	/*   1 */	ED_MOVE_TO_BEG,		/* ^A */
	/*   2 */	ED_UNASSIGNED,		/* ^B */
	/*   3 */	ED_IGNORE,		/* ^C */
	/*   4 */	ED_UNASSIGNED,		/* ^D */
	/*   5 */	ED_MOVE_TO_END,		/* ^E */
	/*   6 */	ED_UNASSIGNED,		/* ^F */
	/*   7 */	ED_UNASSIGNED,		/* ^G */
	/*   8 */	ED_DELETE_PREV_CHAR,	/* ^H */
	/*   9 */	ED_UNASSIGNED,		/* ^I */
	/*  10 */	ED_NEWLINE,		/* ^J */
	/*  11 */	ED_KILL_LINE,		/* ^K */
	/*  12 */	ED_CLEAR_SCREEN,	/* ^L */
	/*  13 */	ED_NEWLINE,		/* ^M */
	/*  14 */	ED_NEXT_HISTORY,	/* ^N */
	/*  15 */	ED_IGNORE,		/* ^O */
	/*  16 */	ED_PREV_HISTORY,	/* ^P */
	/*  17 */	ED_IGNORE,		/* ^Q */
	/*  18 */	ED_REDISPLAY,		/* ^R */
	/*  19 */	ED_IGNORE,		/* ^S */
	/*  20 */	ED_UNASSIGNED,		/* ^T */
	/*  21 */	VI_KILL_LINE_PREV,	/* ^U */
	/*  22 */	ED_UNASSIGNED,		/* ^V */
	/*  23 */	ED_DELETE_PREV_WORD,	/* ^W */
	/*  24 */	ED_UNASSIGNED,		/* ^X */
	/*  25 */	ED_UNASSIGNED,		/* ^Y */
	/*  26 */	ED_UNASSIGNED,		/* ^Z */
	/*  27 */	EM_META_NEXT,		/* ^[ */
	/*  28 */	ED_IGNORE,		/* ^\ */
	/*  29 */	ED_UNASSIGNED,		/* ^] */
	/*  30 */	ED_UNASSIGNED,		/* ^^ */
	/*  31 */	ED_UNASSIGNED,		/* ^_ */
	/*  32 */	ED_NEXT_CHAR,		/* SPACE */
	/*  33 */	ED_UNASSIGNED,		/* ! */
	/*  34 */	ED_UNASSIGNED,		/* " */
	/*  35 */	VI_COMMENT_OUT,		/* # */
	/*  36 */	ED_MOVE_TO_END,		/* $ */
	/*  37 */	VI_MATCH,		/* % */
	/*  38 */	ED_UNASSIGNED,		/* & */
	/*  39 */	ED_UNASSIGNED,		/* ' */
	/*  40 */	ED_UNASSIGNED,		/* ( */
	/*  41 */	ED_UNASSIGNED,		/* ) */
	/*  42 */	ED_UNASSIGNED,		/* * */
	/*  43 */	ED_NEXT_HISTORY,	/* + */
	/*  44 */	VI_REPEAT_PREV_CHAR,	/* , */
	/*  45 */	ED_PREV_HISTORY,	/* - */
	/*  46 */	VI_REDO,		/* . */
	/*  47 */	VI_SEARCH_PREV,		/* / */
	/*  48 */	VI_ZERO,		/* 0 */
	/*  49 */	ED_ARGUMENT_DIGIT,	/* 1 */
	/*  50 */	ED_ARGUMENT_DIGIT,	/* 2 */
	/*  51 */	ED_ARGUMENT_DIGIT,	/* 3 */
	/*  52 */	ED_ARGUMENT_DIGIT,	/* 4 */
	/*  53 */	ED_ARGUMENT_DIGIT,	/* 5 */
	/*  54 */	ED_ARGUMENT_DIGIT,	/* 6 */
	/*  55 */	ED_ARGUMENT_DIGIT,	/* 7 */
	/*  56 */	ED_ARGUMENT_DIGIT,	/* 8 */
	/*  57 */	ED_ARGUMENT_DIGIT,	/* 9 */
	/*  58 */	ED_COMMAND,		/* : */
	/*  59 */	VI_REPEAT_NEXT_CHAR,	/* ; */
	/*  60 */	ED_UNASSIGNED,		/* < */
	/*  61 */	ED_UNASSIGNED,		/* = */
	/*  62 */	ED_UNASSIGNED,		/* > */
	/*  63 */	VI_SEARCH_NEXT,		/* ? */
	/*  64 */	VI_ALIAS,		/* @@ */
	/*  65 */	VI_ADD_AT_EOL,		/* A */
	/*  66 */	VI_PREV_BIG_WORD,	/* B */
	/*  67 */	VI_CHANGE_TO_EOL,	/* C */
	/*  68 */	ED_KILL_LINE,		/* D */
	/*  69 */	VI_END_BIG_WORD,	/* E */
	/*  70 */	VI_PREV_CHAR,		/* F */
	/*  71 */	VI_TO_HISTORY_LINE,	/* G */
	/*  72 */	ED_UNASSIGNED,		/* H */
	/*  73 */	VI_INSERT_AT_BOL,	/* I */
	/*  74 */	ED_SEARCH_NEXT_HISTORY,	/* J */
	/*  75 */	ED_SEARCH_PREV_HISTORY,	/* K */
	/*  76 */	ED_UNASSIGNED,		/* L */
	/*  77 */	ED_UNASSIGNED,		/* M */
	/*  78 */	VI_REPEAT_SEARCH_PREV,	/* N */
	/*  79 */	ED_SEQUENCE_LEAD_IN,	/* O */
	/*  80 */	VI_PASTE_PREV,		/* P */
	/*  81 */	ED_UNASSIGNED,		/* Q */
	/*  82 */	VI_REPLACE_MODE,	/* R */
	/*  83 */	VI_SUBSTITUTE_LINE,	/* S */
	/*  84 */	VI_TO_PREV_CHAR,	/* T */
	/*  85 */	VI_UNDO_LINE,		/* U */
	/*  86 */	ED_UNASSIGNED,		/* V */
	/*  87 */	VI_NEXT_BIG_WORD,	/* W */
	/*  88 */	ED_DELETE_PREV_CHAR,	/* X */
	/*  89 */	VI_YANK_END,		/* Y */
	/*  90 */	ED_UNASSIGNED,		/* Z */
	/*  91 */	ED_SEQUENCE_LEAD_IN,	/* [ */
	/*  92 */	ED_UNASSIGNED,		/* \ */
	/*  93 */	ED_UNASSIGNED,		/* ] */
	/*  94 */	ED_MOVE_TO_BEG,		/* ^ */
	/*  95 */	VI_HISTORY_WORD,	/* _ */
	/*  96 */	ED_UNASSIGNED,		/* ` */
	/*  97 */	VI_ADD,			/* a */
	/*  98 */	VI_PREV_WORD,		/* b */
	/*  99 */	VI_CHANGE_META,		/* c */
	/* 100 */	VI_DELETE_META,		/* d */
	/* 101 */	VI_END_WORD,		/* e */
	/* 102 */	VI_NEXT_CHAR,		/* f */
	/* 103 */	ED_UNASSIGNED,		/* g */
	/* 104 */	ED_PREV_CHAR,		/* h */
	/* 105 */	VI_INSERT,		/* i */
	/* 106 */	ED_NEXT_HISTORY,	/* j */
	/* 107 */	ED_PREV_HISTORY,	/* k */
	/* 108 */	ED_NEXT_CHAR,		/* l */
	/* 109 */	ED_UNASSIGNED,		/* m */
	/* 110 */	VI_REPEAT_SEARCH_NEXT,	/* n */
	/* 111 */	ED_UNASSIGNED,		/* o */
	/* 112 */	VI_PASTE_NEXT,		/* p */
	/* 113 */	ED_UNASSIGNED,		/* q */
	/* 114 */	VI_REPLACE_CHAR,	/* r */
	/* 115 */	VI_SUBSTITUTE_CHAR,	/* s */
	/* 116 */	VI_TO_NEXT_CHAR,	/* t */
	/* 117 */	VI_UNDO,		/* u */
	/* 118 */	VI_HISTEDIT,		/* v */
	/* 119 */	VI_NEXT_WORD,		/* w */
	/* 120 */	ED_DELETE_NEXT_CHAR,	/* x */
	/* 121 */	VI_YANK,		/* y */
	/* 122 */	ED_UNASSIGNED,		/* z */
	/* 123 */	ED_UNASSIGNED,		/* { */
	/* 124 */	VI_TO_COLUMN,		/* | */
	/* 125 */	ED_UNASSIGNED,		/* } */
	/* 126 */	VI_CHANGE_CASE,		/* ~ */
	/* 127 */	ED_DELETE_PREV_CHAR,	/* ^? */
	/* 128 */	ED_UNASSIGNED,		/* M-^@@ */
	/* 129 */	ED_UNASSIGNED,		/* M-^A */
	/* 130 */	ED_UNASSIGNED,		/* M-^B */
	/* 131 */	ED_UNASSIGNED,		/* M-^C */
	/* 132 */	ED_UNASSIGNED,		/* M-^D */
	/* 133 */	ED_UNASSIGNED,		/* M-^E */
	/* 134 */	ED_UNASSIGNED,		/* M-^F */
	/* 135 */	ED_UNASSIGNED,		/* M-^G */
	/* 136 */	ED_UNASSIGNED,		/* M-^H */
	/* 137 */	ED_UNASSIGNED,		/* M-^I */
	/* 138 */	ED_UNASSIGNED,		/* M-^J */
	/* 139 */	ED_UNASSIGNED,		/* M-^K */
	/* 140 */	ED_UNASSIGNED,		/* M-^L */
	/* 141 */	ED_UNASSIGNED,		/* M-^M */
	/* 142 */	ED_UNASSIGNED,		/* M-^N */
	/* 143 */	ED_UNASSIGNED,		/* M-^O */
	/* 144 */	ED_UNASSIGNED,		/* M-^P */
	/* 145 */	ED_UNASSIGNED,		/* M-^Q */
	/* 146 */	ED_UNASSIGNED,		/* M-^R */
	/* 147 */	ED_UNASSIGNED,		/* M-^S */
	/* 148 */	ED_UNASSIGNED,		/* M-^T */
	/* 149 */	ED_UNASSIGNED,		/* M-^U */
	/* 150 */	ED_UNASSIGNED,		/* M-^V */
	/* 151 */	ED_UNASSIGNED,		/* M-^W */
	/* 152 */	ED_UNASSIGNED,		/* M-^X */
	/* 153 */	ED_UNASSIGNED,		/* M-^Y */
	/* 154 */	ED_UNASSIGNED,		/* M-^Z */
	/* 155 */	ED_UNASSIGNED,		/* M-^[ */
	/* 156 */	ED_UNASSIGNED,		/* M-^\ */
	/* 157 */	ED_UNASSIGNED,		/* M-^] */
	/* 158 */	ED_UNASSIGNED,		/* M-^^ */
	/* 159 */	ED_UNASSIGNED,		/* M-^_ */
	/* 160 */	ED_UNASSIGNED,		/* M-SPACE */
	/* 161 */	ED_UNASSIGNED,		/* M-! */
	/* 162 */	ED_UNASSIGNED,		/* M-" */
	/* 163 */	ED_UNASSIGNED,		/* M-# */
	/* 164 */	ED_UNASSIGNED,		/* M-$ */
	/* 165 */	ED_UNASSIGNED,		/* M-% */
	/* 166 */	ED_UNASSIGNED,		/* M-& */
	/* 167 */	ED_UNASSIGNED,		/* M-' */
	/* 168 */	ED_UNASSIGNED,		/* M-( */
	/* 169 */	ED_UNASSIGNED,		/* M-) */
	/* 170 */	ED_UNASSIGNED,		/* M-* */
	/* 171 */	ED_UNASSIGNED,		/* M-+ */
	/* 172 */	ED_UNASSIGNED,		/* M-, */
	/* 173 */	ED_UNASSIGNED,		/* M-- */
	/* 174 */	ED_UNASSIGNED,		/* M-. */
	/* 175 */	ED_UNASSIGNED,		/* M-/ */
	/* 176 */	ED_UNASSIGNED,		/* M-0 */
	/* 177 */	ED_UNASSIGNED,		/* M-1 */
	/* 178 */	ED_UNASSIGNED,		/* M-2 */
	/* 179 */	ED_UNASSIGNED,		/* M-3 */
	/* 180 */	ED_UNASSIGNED,		/* M-4 */
	/* 181 */	ED_UNASSIGNED,		/* M-5 */
	/* 182 */	ED_UNASSIGNED,		/* M-6 */
	/* 183 */	ED_UNASSIGNED,		/* M-7 */
	/* 184 */	ED_UNASSIGNED,		/* M-8 */
	/* 185 */	ED_UNASSIGNED,		/* M-9 */
	/* 186 */	ED_UNASSIGNED,		/* M-: */
	/* 187 */	ED_UNASSIGNED,		/* M-; */
	/* 188 */	ED_UNASSIGNED,		/* M-< */
	/* 189 */	ED_UNASSIGNED,		/* M-= */
	/* 190 */	ED_UNASSIGNED,		/* M-> */
	/* 191 */	ED_UNASSIGNED,		/* M-? */
	/* 192 */	ED_UNASSIGNED,		/* M-@@ */
	/* 193 */	ED_UNASSIGNED,		/* M-A */
	/* 194 */	ED_UNASSIGNED,		/* M-B */
	/* 195 */	ED_UNASSIGNED,		/* M-C */
	/* 196 */	ED_UNASSIGNED,		/* M-D */
	/* 197 */	ED_UNASSIGNED,		/* M-E */
	/* 198 */	ED_UNASSIGNED,		/* M-F */
	/* 199 */	ED_UNASSIGNED,		/* M-G */
	/* 200 */	ED_UNASSIGNED,		/* M-H */
	/* 201 */	ED_UNASSIGNED,		/* M-I */
	/* 202 */	ED_UNASSIGNED,		/* M-J */
	/* 203 */	ED_UNASSIGNED,		/* M-K */
	/* 204 */	ED_UNASSIGNED,		/* M-L */
	/* 205 */	ED_UNASSIGNED,		/* M-M */
	/* 206 */	ED_UNASSIGNED,		/* M-N */
	/* 207 */	ED_SEQUENCE_LEAD_IN,	/* M-O */
	/* 208 */	ED_UNASSIGNED,		/* M-P */
	/* 209 */	ED_UNASSIGNED,		/* M-Q */
	/* 210 */	ED_UNASSIGNED,		/* M-R */
	/* 211 */	ED_UNASSIGNED,		/* M-S */
	/* 212 */	ED_UNASSIGNED,		/* M-T */
	/* 213 */	ED_UNASSIGNED,		/* M-U */
	/* 214 */	ED_UNASSIGNED,		/* M-V */
	/* 215 */	ED_UNASSIGNED,		/* M-W */
	/* 216 */	ED_UNASSIGNED,		/* M-X */
	/* 217 */	ED_UNASSIGNED,		/* M-Y */
	/* 218 */	ED_UNASSIGNED,		/* M-Z */
	/* 219 */	ED_SEQUENCE_LEAD_IN,	/* M-[ */
	/* 220 */	ED_UNASSIGNED,		/* M-\ */
	/* 221 */	ED_UNASSIGNED,		/* M-] */
	/* 222 */	ED_UNASSIGNED,		/* M-^ */
	/* 223 */	ED_UNASSIGNED,		/* M-_ */
	/* 224 */	ED_UNASSIGNED,		/* M-` */
	/* 225 */	ED_UNASSIGNED,		/* M-a */
	/* 226 */	ED_UNASSIGNED,		/* M-b */
	/* 227 */	ED_UNASSIGNED,		/* M-c */
	/* 228 */	ED_UNASSIGNED,		/* M-d */
	/* 229 */	ED_UNASSIGNED,		/* M-e */
	/* 230 */	ED_UNASSIGNED,		/* M-f */
	/* 231 */	ED_UNASSIGNED,		/* M-g */
	/* 232 */	ED_UNASSIGNED,		/* M-h */
	/* 233 */	ED_UNASSIGNED,		/* M-i */
	/* 234 */	ED_UNASSIGNED,		/* M-j */
	/* 235 */	ED_UNASSIGNED,		/* M-k */
	/* 236 */	ED_UNASSIGNED,		/* M-l */
	/* 237 */	ED_UNASSIGNED,		/* M-m */
	/* 238 */	ED_UNASSIGNED,		/* M-n */
	/* 239 */	ED_UNASSIGNED,		/* M-o */
	/* 240 */	ED_UNASSIGNED,		/* M-p */
	/* 241 */	ED_UNASSIGNED,		/* M-q */
	/* 242 */	ED_UNASSIGNED,		/* M-r */
	/* 243 */	ED_UNASSIGNED,		/* M-s */
	/* 244 */	ED_UNASSIGNED,		/* M-t */
	/* 245 */	ED_UNASSIGNED,		/* M-u */
	/* 246 */	ED_UNASSIGNED,		/* M-v */
	/* 247 */	ED_UNASSIGNED,		/* M-w */
	/* 248 */	ED_UNASSIGNED,		/* M-x */
	/* 249 */	ED_UNASSIGNED,		/* M-y */
	/* 250 */	ED_UNASSIGNED,		/* M-z */
	/* 251 */	ED_UNASSIGNED,		/* M-{ */
	/* 252 */	ED_UNASSIGNED,		/* M-| */
	/* 253 */	ED_UNASSIGNED,		/* M-} */
	/* 254 */	ED_UNASSIGNED,		/* M-~ */
	/* 255 */	ED_UNASSIGNED		/* M-^? */
};


/* map_init():
 *	Initialize and allocate the maps
 */
protected int
map_init(EditLine *el)
{

	/*
         * Make sure those are correct before starting.
         */
#ifdef MAP_DEBUG
	if (sizeof(el_map_emacs) != N_KEYS * sizeof(el_action_t))
		EL_ABORT((el->errfile, "Emacs map incorrect\n"));
	if (sizeof(el_map_vi_command) != N_KEYS * sizeof(el_action_t))
		EL_ABORT((el->errfile, "Vi command map incorrect\n"));
	if (sizeof(el_map_vi_insert) != N_KEYS * sizeof(el_action_t))
		EL_ABORT((el->errfile, "Vi insert map incorrect\n"));
#endif

	el->el_map.alt = reallocarray(NULL, N_KEYS, sizeof(el_action_t));
	if (el->el_map.alt == NULL)
		return -1;
	el->el_map.key = reallocarray(NULL, N_KEYS, sizeof(el_action_t));
	if (el->el_map.key == NULL)
		return -1;
	el->el_map.emacs = el_map_emacs;
	el->el_map.vic = el_map_vi_command;
	el->el_map.vii = el_map_vi_insert;
	el->el_map.help = reallocarray(NULL, EL_NUM_FCNS,
	    sizeof(el_bindings_t));
	if (el->el_map.help == NULL)
		return -1;
	(void) memcpy(el->el_map.help, el_func_help,
	    sizeof(el_bindings_t) * EL_NUM_FCNS);
	el->el_map.func = reallocarray(NULL, EL_NUM_FCNS,
	    sizeof(el_func_t));
	if (el->el_map.func == NULL)
		return -1;
	memcpy(el->el_map.func, el_func, sizeof(el_func_t) * EL_NUM_FCNS);
	el->el_map.nfunc = EL_NUM_FCNS;

#ifdef VIDEFAULT
	map_init_vi(el);
#else
	map_init_emacs(el);
#endif /* VIDEFAULT */
	return 0;
}


/* map_end():
 *	Free the space taken by the editor maps
 */
protected void
map_end(EditLine *el)
{

	free(el->el_map.alt);
	el->el_map.alt = NULL;
	free(el->el_map.key);
	el->el_map.key = NULL;
	el->el_map.emacs = NULL;
	el->el_map.vic = NULL;
	el->el_map.vii = NULL;
	free(el->el_map.help);
	el->el_map.help = NULL;
	free(el->el_map.func);
	el->el_map.func = NULL;
}


/* map_init_nls():
 *	Find all the printable keys and bind them to self insert
 */
static void
map_init_nls(EditLine *el)
{
	int i;

	el_action_t *map = el->el_map.key;

	for (i = 0200; i <= 0377; i++)
		if (iswprint(i))
			map[i] = ED_INSERT;
}


/* map_init_meta():
 *	Bind all the meta keys to the appropriate ESC-<key> sequence
 */
static void
map_init_meta(EditLine *el)
{
	wchar_t buf[3];
	int i;
	el_action_t *map = el->el_map.key;
	el_action_t *alt = el->el_map.alt;

	for (i = 0; i <= 0377 && map[i] != EM_META_NEXT; i++)
		continue;

	if (i > 0377) {
		for (i = 0; i <= 0377 && alt[i] != EM_META_NEXT; i++)
			continue;
		if (i > 0377) {
			i = 033;
			if (el->el_map.type == MAP_VI)
				map = alt;
		} else
			map = alt;
	}
	buf[0] = (wchar_t)i;
	buf[2] = 0;
	for (i = 0200; i <= 0377; i++)
		switch (map[i]) {
		case ED_INSERT:
		case ED_UNASSIGNED:
		case ED_SEQUENCE_LEAD_IN:
			break;
		default:
			buf[1] = i & 0177;
			keymacro_add(el, buf, keymacro_map_cmd(el, (int) map[i]), XK_CMD);
			break;
		}
	map[(int) buf[0]] = ED_SEQUENCE_LEAD_IN;
}


/* map_init_vi():
 *	Initialize the vi bindings
 */
protected void
map_init_vi(EditLine *el)
{
	int i;
	el_action_t *key = el->el_map.key;
	el_action_t *alt = el->el_map.alt;
	const el_action_t *vii = el->el_map.vii;
	const el_action_t *vic = el->el_map.vic;

	el->el_map.type = MAP_VI;
	el->el_map.current = el->el_map.key;

	keymacro_reset(el);

	for (i = 0; i < N_KEYS; i++) {
		key[i] = vii[i];
		alt[i] = vic[i];
	}

	map_init_meta(el);
	map_init_nls(el);

	tty_bind_char(el, 1);
	terminal_bind_arrow(el);
}


/* map_init_emacs():
 *	Initialize the emacs bindings
 */
protected void
map_init_emacs(EditLine *el)
{
	int i;
	wchar_t buf[3];
	el_action_t *key = el->el_map.key;
	el_action_t *alt = el->el_map.alt;
	const el_action_t *emacs = el->el_map.emacs;

	el->el_map.type = MAP_EMACS;
	el->el_map.current = el->el_map.key;
	keymacro_reset(el);

	for (i = 0; i < N_KEYS; i++) {
		key[i] = emacs[i];
		alt[i] = ED_UNASSIGNED;
	}

	map_init_meta(el);
	map_init_nls(el);

	buf[0] = CONTROL('X');
	buf[1] = CONTROL('X');
	buf[2] = 0;
	keymacro_add(el, buf, keymacro_map_cmd(el, EM_EXCHANGE_MARK), XK_CMD);

	tty_bind_char(el, 1);
	terminal_bind_arrow(el);
}


/* map_set_editor():
 *	Set the editor
 */
protected int
map_set_editor(EditLine *el, wchar_t *editor)
{

	if (wcscmp(editor, L"emacs") == 0) {
		map_init_emacs(el);
		return 0;
	}
	if (wcscmp(editor, L"vi") == 0) {
		map_init_vi(el);
		return 0;
	}
	return -1;
}


/* map_get_editor():
 *	Retrieve the editor
 */
protected int
map_get_editor(EditLine *el, const wchar_t **editor)
{

	if (editor == NULL)
		return -1;
	switch (el->el_map.type) {
	case MAP_EMACS:
		*editor = L"emacs";
		return 0;
	case MAP_VI:
		*editor = L"vi";
		return 0;
	}
	return -1;
}


/* map_print_key():
 *	Print the function description for 1 key
 */
static void
map_print_key(EditLine *el, el_action_t *map, const wchar_t *in)
{
	char outbuf[EL_BUFSIZ];
	el_bindings_t *bp, *ep;

	if (in[0] == '\0' || in[1] == '\0') {
		(void) keymacro__decode_str(in, outbuf, sizeof(outbuf), "");
		ep = &el->el_map.help[el->el_map.nfunc];
		for (bp = el->el_map.help; bp < ep; bp++)
			if (bp->func == map[(unsigned char) *in]) {
				(void) fprintf(el->el_outfile,
				    "%s\t->\t%ls\n", outbuf, bp->name);
				return;
			}
	} else
		keymacro_print(el, in);
}


/* map_print_some_keys():
 *	Print keys from first to last
 */
static void
map_print_some_keys(EditLine *el, el_action_t *map, wint_t first, wint_t last)
{
	el_bindings_t *bp, *ep;
	wchar_t firstbuf[2], lastbuf[2];
	char unparsbuf[EL_BUFSIZ], extrabuf[EL_BUFSIZ];

	firstbuf[0] = first;
	firstbuf[1] = 0;
	lastbuf[0] = last;
	lastbuf[1] = 0;
	if (map[first] == ED_UNASSIGNED) {
		if (first == last) {
			(void) keymacro__decode_str(firstbuf, unparsbuf,
			    sizeof(unparsbuf), STRQQ);
			(void) fprintf(el->el_outfile,
			    "%-15s->  is undefined\n", unparsbuf);
		}
		return;
	}
	ep = &el->el_map.help[el->el_map.nfunc];
	for (bp = el->el_map.help; bp < ep; bp++) {
		if (bp->func == map[first]) {
			if (first == last) {
				(void) keymacro__decode_str(firstbuf, unparsbuf,
				    sizeof(unparsbuf), STRQQ);
				(void) fprintf(el->el_outfile, "%-15s->  %ls\n",
				    unparsbuf, bp->name);
			} else {
				(void) keymacro__decode_str(firstbuf, unparsbuf,
				    sizeof(unparsbuf), STRQQ);
				(void) keymacro__decode_str(lastbuf, extrabuf,
				    sizeof(extrabuf), STRQQ);
				(void) fprintf(el->el_outfile,
				    "%-4s to %-7s->  %ls\n",
				    unparsbuf, extrabuf, bp->name);
			}
			return;
		}
	}
#ifdef MAP_DEBUG
	if (map == el->el_map.key) {
		(void) keymacro__decode_str(firstbuf, unparsbuf,
		    sizeof(unparsbuf), STRQQ);
		(void) fprintf(el->el_outfile,
		    "BUG!!! %s isn't bound to anything.\n", unparsbuf);
		(void) fprintf(el->el_outfile, "el->el_map.key[%d] == %d\n",
		    first, el->el_map.key[first]);
	} else {
		(void) keymacro__decode_str(firstbuf, unparsbuf,
		    sizeof(unparsbuf), STRQQ);
		(void) fprintf(el->el_outfile,
		    "BUG!!! %s isn't bound to anything.\n", unparsbuf);
		(void) fprintf(el->el_outfile, "el->el_map.alt[%d] == %d\n",
		    first, el->el_map.alt[first]);
	}
#endif
	EL_ABORT((el->el_errfile, "Error printing keys\n"));
}


/* map_print_all_keys():
 *	Print the function description for all keys.
 */
static void
map_print_all_keys(EditLine *el)
{
	int prev, i;

	(void) fprintf(el->el_outfile, "Standard key bindings\n");
	prev = 0;
	for (i = 0; i < N_KEYS; i++) {
		if (el->el_map.key[prev] == el->el_map.key[i])
			continue;
		map_print_some_keys(el, el->el_map.key, prev, i - 1);
		prev = i;
	}
	map_print_some_keys(el, el->el_map.key, prev, i - 1);

	(void) fprintf(el->el_outfile, "Alternative key bindings\n");
	prev = 0;
	for (i = 0; i < N_KEYS; i++) {
		if (el->el_map.alt[prev] == el->el_map.alt[i])
			continue;
		map_print_some_keys(el, el->el_map.alt, prev, i - 1);
		prev = i;
	}
	map_print_some_keys(el, el->el_map.alt, prev, i - 1);

	(void) fprintf(el->el_outfile, "Multi-character bindings\n");
	keymacro_print(el, L"");
	(void) fprintf(el->el_outfile, "Arrow key bindings\n");
	terminal_print_arrow(el, L"");
}


/* map_bind():
 *	Add/remove/change bindings
 */
protected int
map_bind(EditLine *el, int argc, const wchar_t **argv)
{
	el_action_t *map;
	int ntype, rem;
	const wchar_t *p;
	wchar_t inbuf[EL_BUFSIZ];
	wchar_t outbuf[EL_BUFSIZ];
	const wchar_t *in = NULL;
	wchar_t *out = NULL;
	el_bindings_t *bp, *ep;
	int cmd;
	int key;

	if (argv == NULL)
		return -1;

	map = el->el_map.key;
	ntype = XK_CMD;
	key = rem = 0;
	for (argc = 1; (p = argv[argc]) != NULL; argc++)
		if (p[0] == '-')
			switch (p[1]) {
			case 'a':
				map = el->el_map.alt;
				break;

			case 's':
				ntype = XK_STR;
				break;
			case 'k':
				key = 1;
				break;

			case 'r':
				rem = 1;
				break;

			case 'v':
				map_init_vi(el);
				return 0;

			case 'e':
				map_init_emacs(el);
				return 0;

			case 'l':
				ep = &el->el_map.help[el->el_map.nfunc];
				for (bp = el->el_map.help; bp < ep; bp++)
					(void) fprintf(el->el_outfile,
					    "%ls\n\t%ls\n",
					    bp->name, bp->description);
				return 0;
			default:
				(void) fprintf(el->el_errfile,
				    "%ls: Invalid switch `%lc'.\n",
				    argv[0], (wint_t)p[1]);
			}
		else
			break;

	if (argv[argc] == NULL) {
		map_print_all_keys(el);
		return 0;
	}
	if (key)
		in = argv[argc++];
	else if ((in = parse__string(inbuf, argv[argc++])) == NULL) {
		(void) fprintf(el->el_errfile,
		    "%ls: Invalid \\ or ^ in instring.\n",
		    argv[0]);
		return -1;
	}
	if (rem) {
		if (key) {
			(void) terminal_clear_arrow(el, in);
			return -1;
		}
		if (in[1])
			(void) keymacro_delete(el, in);
		else if (map[(unsigned char) *in] == ED_SEQUENCE_LEAD_IN)
			(void) keymacro_delete(el, in);
		else
			map[(unsigned char) *in] = ED_UNASSIGNED;
		return 0;
	}
	if (argv[argc] == NULL) {
		if (key)
			terminal_print_arrow(el, in);
		else
			map_print_key(el, map, in);
		return 0;
	}
#ifdef notyet
	if (argv[argc + 1] != NULL) {
		bindkey_usage();
		return -1;
	}
#endif

	switch (ntype) {
	case XK_STR:
		if ((out = parse__string(outbuf, argv[argc])) == NULL) {
			(void) fprintf(el->el_errfile,
			    "%ls: Invalid \\ or ^ in outstring.\n", argv[0]);
			return -1;
		}
		if (key)
			terminal_set_arrow(el, in, keymacro_map_str(el, out), ntype);
		else
			keymacro_add(el, in, keymacro_map_str(el, out), ntype);
		map[(unsigned char) *in] = ED_SEQUENCE_LEAD_IN;
		break;

	case XK_CMD:
		if ((cmd = parse_cmd(el, argv[argc])) == -1) {
			(void) fprintf(el->el_errfile,
			    "%ls: Invalid command `%ls'.\n",
			    argv[0], argv[argc]);
			return -1;
		}
		if (key)
			terminal_set_arrow(el, in, keymacro_map_str(el, out), ntype);
		else {
			if (in[1]) {
				keymacro_add(el, in, keymacro_map_cmd(el, cmd), ntype);
				map[(unsigned char) *in] = ED_SEQUENCE_LEAD_IN;
			} else {
				keymacro_clear(el, map, in);
				map[(unsigned char) *in] = cmd;
			}
		}
		break;

	default:
		EL_ABORT((el->el_errfile, "Bad XK_ type %d\n", ntype));
		break;
	}
	return 0;
}


/* map_addfunc():
 *	add a user defined function
 */
protected int
map_addfunc(EditLine *el, const wchar_t *name, const wchar_t *help,
    el_func_t func)
{
	void *p;
	int nf = el->el_map.nfunc + 1;

	if (name == NULL || help == NULL || func == NULL)
		return -1;

	if ((p = reallocarray(el->el_map.func, nf, sizeof(el_func_t))) == NULL)
		return -1;
	el->el_map.func = (el_func_t *) p;
	if ((p = reallocarray(el->el_map.help, nf, sizeof(el_bindings_t)))
	    == NULL)
		return -1;
	el->el_map.help = (el_bindings_t *) p;

	nf = el->el_map.nfunc;
	el->el_map.func[nf] = func;

	el->el_map.help[nf].name = name;
	el->el_map.help[nf].func = nf;
	el->el_map.help[nf].description = help;
	el->el_map.nfunc++;

	return 0;
}
@


1.26
log
@Combine help.h and help.c into a simplified help.h
and include it only in the one file needing it, map.c.
Also delete makelist -bc.
OK martijn@@, also proofread by Christian Heckendorf <mbie at ulmus dot me>
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.25 2016/04/18 20:13:07 schwarze Exp $	*/
d46 5
d929 1
a929 1
	memcpy(el->el_map.func, func__get(), sizeof(el_func_t) * EL_NUM_FCNS);
@


1.25
log
@Delete redundant, empty callbacks;
no functional change, minus hundred lines of code.
OK martijn@@;
also proof-read by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.24 2016/04/12 09:04:02 schwarze Exp $	*/
d918 1
a918 1
	(void) memcpy(el->el_map.help, help__get(),
@


1.24
log
@* Delete the unimplemented feature XK_EXE.
* Delete the unused macro MIN().
No functional change.
OK czarkoff@@ martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.23 2016/04/11 21:17:29 schwarze Exp $	*/
d62 1
a62 1
	/*   3 */	ED_TTY_SIGINT,		/* ^C */
d74 1
a74 1
	/*  15 */	ED_TTY_FLUSH_OUTPUT,	/* ^O */
d76 1
a76 1
	/*  17 */	ED_TTY_START_OUTPUT,	/* ^Q */
d78 1
a78 1
	/*  19 */	ED_TTY_STOP_OUTPUT,	/* ^S */
d85 1
a85 1
	/*  26 */	ED_TTY_SIGTSTP,		/* ^Z */
d87 2
a88 2
	/*  28 */	ED_TTY_SIGQUIT,		/* ^\ */
	/*  29 */	ED_TTY_DSUSP,		/* ^] */
d344 1
a344 1
	/*  17 */	ED_TTY_START_OUTPUT,	/* ^Q */
d346 1
a346 1
	/*  19 */	ED_TTY_STOP_OUTPUT,	/* ^S */
d356 1
a356 1
	/*  28 */	ED_TTY_SIGQUIT,		/* ^\ */
d370 1
a370 1
	/*   3 */	ED_TTY_SIGINT,		/* ^C */
d382 1
a382 1
	/*  15 */	ED_TTY_FLUSH_OUTPUT,	/* ^O */
d384 1
a384 1
	/*  17 */	ED_TTY_START_OUTPUT,	/* ^Q */
d386 1
a386 1
	/*  19 */	ED_TTY_STOP_OUTPUT,	/* ^S */
d392 2
a393 2
	/*  25 */	ED_TTY_DSUSP,		/* ^Y */
	/*  26 */	ED_TTY_SIGTSTP,		/* ^Z */
d395 1
a395 1
	/*  28 */	ED_TTY_SIGQUIT,		/* ^\ */
d630 1
a630 1
	/*   3 */	ED_TTY_SIGINT,		/* ^C */
d642 1
a642 1
	/*  15 */	ED_TTY_FLUSH_OUTPUT,	/* ^O */
d644 1
a644 1
	/*  17 */	ED_TTY_START_OUTPUT,	/* ^Q */
d646 1
a646 1
	/*  19 */	ED_TTY_STOP_OUTPUT,	/* ^S */
d655 1
a655 1
	/*  28 */	ED_TTY_SIGQUIT,		/* ^\ */
@


1.23
log
@delete the "private" and "public" preprocessor macros, just use standard C;
OK martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.22 2016/04/11 20:43:33 schwarze Exp $	*/
a1272 5
#ifdef notyet
			case 'c':
				ntype = XK_EXE;
				break;
#endif
a1344 1
	case XK_EXE:
@


1.22
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.21 2016/04/11 19:54:54 schwarze Exp $	*/
d49 5
a53 5
private void	map_print_key(EditLine *, el_action_t *, const wchar_t *);
private void	map_print_some_keys(EditLine *, el_action_t *, wint_t, wint_t);
private void	map_print_all_keys(EditLine *);
private void	map_init_nls(EditLine *);
private void	map_init_meta(EditLine *);
d58 1
a58 1
private const el_action_t  el_map_emacs[] = {
d325 1
a325 1
private const el_action_t  el_map_vi_insert[] = {
d626 1
a626 1
private const el_action_t el_map_vi_command[] = {
d960 1
a960 1
private void
d976 1
a976 1
private void
d1121 1
a1121 1
private void
d1144 1
a1144 1
private void
d1208 1
a1208 1
private void
@


1.21
log
@Move wrapper macros to the two files actually needing them:
FUNW, Strlen, Strdup, Strcmp, Strncmp, Strncpy, Strncat -> history.c
Strchr, tok_strdup -> tokenizer.c
FUN, TYPE, STR -> both of these files

OK martijn@@

Also proofread by Christian Heckendorf <mbie at ulmus dot me>
who reported some whitespace issues in parse.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.20 2016/04/09 20:15:26 schwarze Exp $	*/
d49 1
a49 1
private void	map_print_key(EditLine *, el_action_t *, const Char *);
d979 1
a979 1
	Char buf[3];
d997 1
a997 1
	buf[0] = (Char) i;
d1051 1
a1051 1
	Char buf[3];
d1082 1
a1082 1
map_set_editor(EditLine *el, Char *editor)
d1101 1
a1101 1
map_get_editor(EditLine *el, const Char **editor)
d1122 1
a1122 1
map_print_key(EditLine *el, el_action_t *map, const Char *in)
d1148 1
a1148 1
	Char firstbuf[2], lastbuf[2];
d1244 1
a1244 1
map_bind(EditLine *el, int argc, const Char **argv)
d1248 5
a1252 5
	const Char *p;
	Char inbuf[EL_BUFSIZ];
	Char outbuf[EL_BUFSIZ];
	const Char *in = NULL;
	Char *out = NULL;
d1395 2
a1396 1
map_addfunc(EditLine *el, const Char *name, const Char *help, el_func_t func)
@


1.20
log
@Delete 26 wrapper macros and two wrapper functions that are no
longer needed now that we always compile with wide character support,
reducing code obfuscation.

OK czarkoff@@ martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.19 2016/03/20 23:48:27 schwarze Exp $	*/
d1085 1
a1085 1
	if (Strcmp(editor, STR("emacs")) == 0) {
d1089 1
a1089 1
	if (Strcmp(editor, STR("vi")) == 0) {
d1108 1
a1108 1
		*editor = STR("emacs");
d1111 1
a1111 1
		*editor = STR("vi");
d1234 1
a1234 1
	keymacro_print(el, STR(""));
d1236 1
a1236 1
	terminal_print_arrow(el, STR(""));
@


1.19
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.18 2016/03/20 22:57:59 schwarze Exp $	*/
d968 1
a968 1
		if (Isprint(i))
d1133 1
a1133 1
				    "%s\t->\t" FSTR "\n", outbuf, bp->name);
d1170 1
a1170 1
				(void) fprintf(el->el_outfile, "%-15s->  " FSTR "\n",
d1178 1
a1178 1
				    "%-4s to %-7s->  " FSTR "\n",
d1298 1
a1298 1
					    "" FSTR "\n\t" FSTR "\n",
d1303 1
a1303 1
				    "" FSTR ": Invalid switch `%lc'.\n",
d1317 1
a1317 1
		    "" FSTR ": Invalid \\ or ^ in instring.\n",
d1353 1
a1353 1
			    "" FSTR ": Invalid \\ or ^ in outstring.\n", argv[0]);
d1366 1
a1366 1
			    "" FSTR ": Invalid command `" FSTR "'.\n",
@


1.18
log
@Cleanup of private header inclusion:

1. Do not include private headers from "chared.h", "hist.h", "prompt.h",
"refresh.h", "search.h", "sig.h", "terminal.h", "tty.h".
The only private header having to include other private headers is "el.h".
2. Do not include "common.h", "parse.h", "help.h" from "el.h",
and do not include "emacs.h" and "vi.h" from "chared.h",
include them directly where needed.
3. Do include "fcns.h" from "el.h" because el_func_t is needed for "map.h".
4. Do not include private headers again that are already included by "el.h".
5. Include private headers after standard headers.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.17 2016/03/20 20:35:38 schwarze Exp $	*/
d41 1
d43 1
d1157 1
a1157 1
			(void) keymacro__decode_str(firstbuf, unparsbuf, 
d1168 1
a1168 1
				(void) keymacro__decode_str(firstbuf, unparsbuf, 
d1173 1
a1173 1
				(void) keymacro__decode_str(firstbuf, unparsbuf, 
d1175 1
a1175 1
				(void) keymacro__decode_str(lastbuf, extrabuf, 
d1186 1
a1186 1
		(void) keymacro__decode_str(firstbuf, unparsbuf, 
d1193 1
a1193 1
		(void) keymacro__decode_str(firstbuf, unparsbuf, 
@


1.17
log
@Delete the useless Int datatype and always use the standard wint_t
directly.  This is not a problem because <wchar_t> is required all
over the place anyway, even when WIDECHAR is not defined.
No functional change except that it fixes a few printf(3)
format string issues, %c vs. %lc.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.16 2016/01/30 17:32:52 schwarze Exp $	*/
d42 1
d44 2
@


1.16
log
@Fifth step in synching with NetBSD:
Delete the silly ptr_t and ioctl_t typedefs
and delete some "#ifdef notdef" code from "sys.h".
No functional change.
This makes hist.h identical to the NetBSD version.
It reduces the remaining diff from +1526 -734 to +1430 -592.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.15 2016/01/30 12:22:20 schwarze Exp $	*/
d45 1
a45 1
private void	map_print_some_keys(EditLine *, el_action_t *, Int, Int);
d1140 1
a1140 1
map_print_some_keys(EditLine *el, el_action_t *map, Int first, Int last)
d1298 2
a1299 2
				    "" FSTR ": Invalid switch `%c'.\n",
				    argv[0], p[1]);
@


1.15
log
@Fourth step in synching with NetBSD:
KNF: Remove parentheses from return lines.  No object change.
This makes emacs.c and prompt.c identical to the NetBSD versions.
It reduces the remaining diff from +2053 -1261 to +1526 -734.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.14 2016/01/30 00:06:39 schwarze Exp $	*/
d938 1
a938 1
	free((ptr_t) el->el_map.alt);
d940 1
a940 1
	free((ptr_t) el->el_map.key);
d945 1
a945 1
	free((ptr_t) el->el_map.help);
d947 1
a947 1
	free((ptr_t) el->el_map.func);
@


1.14
log
@Third step in synching with NetBSD:
* rename fkey_t to funckey_t and el_term_t to el_terminal_t
* rename struct editline member el_term to el_terminal
* rename many functions in terminal.c from term_*() to terminal_*(),
for consistency with the file name and to not look related to <term.h>
No functional change.
This makes refresh.c and sig.c almost identical to the NetBSD versions.
It reduces the remaining diff from +2446 -1805 to +2053 -1420.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.13 2016/01/29 19:32:33 schwarze Exp $	*/
d902 1
a902 1
		return (-1);
d905 1
a905 1
		return (-1);
d912 1
a912 1
		return (-1);
d918 1
a918 1
		return (-1);
d927 1
a927 1
	return (0);
d1082 1
a1082 1
		return (0);
d1086 1
a1086 1
		return (0);
d1088 1
a1088 1
	return (-1);
d1100 1
a1100 1
		return (-1);
d1104 1
a1104 1
		return (0);
d1107 1
a1107 1
		return (0);
d1109 1
a1109 1
	return (-1);
d1253 1
a1253 1
		return (-1);
d1283 1
a1283 1
				return (0);
d1287 1
a1287 1
				return (0);
d1295 1
a1295 1
				return (0);
d1306 1
a1306 1
		return (0);
d1314 1
a1314 1
		return (-1);
d1319 1
a1319 1
			return (-1);
d1327 1
a1327 1
		return (0);
d1334 1
a1334 1
		return (0);
d1339 1
a1339 1
		return (-1);
d1349 1
a1349 1
			return (-1);
d1363 1
a1363 1
			return (-1);
d1382 1
a1382 1
	return (0);
d1396 1
a1396 1
		return (-1);
d1399 1
a1399 1
		return (-1);
d1403 1
a1403 1
		return (-1);
d1414 1
a1414 1
	return (0);
@


1.13
log
@Second step in synching with NetBSD:
* Rename some types from *key*_t to *keymacro*_t.
* Rename struct editline member el_key to el_keymacro.
* Rename some functions in keymacro.c from key*() to keymacro*().
This removes the conflict of key_clear(), key_end(), and key_print()
with macros in <term.h>.  No functional change.
This makes keymacro.h identical to the NetBSD version.
It reduces the remaining diff from +2640 -1998 to +2446 -1805.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.12 2014/10/17 06:07:50 deraadt Exp $	*/
d1035 1
a1035 1
	term_bind_arrow(el);
d1069 1
a1069 1
	term_bind_arrow(el);
d1231 1
a1231 1
	term_print_arrow(el, STR(""));
d1318 1
a1318 1
			(void) term_clear_arrow(el, in);
d1331 1
a1331 1
			term_print_arrow(el, in);
d1352 1
a1352 1
			term_set_arrow(el, in, keymacro_map_str(el, out), ntype);
d1366 1
a1366 1
			term_set_arrow(el, in, keymacro_map_str(el, out), ntype);
@


1.12
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.11 2010/06/30 00:05:35 nicm Exp $	*/
d1002 1
a1002 1
			key_add(el, buf, key_map_cmd(el, (int) map[i]), XK_CMD);
d1024 1
a1024 1
	key_reset(el);
d1053 1
a1053 1
	key_reset(el);
d1066 1
a1066 1
	key_add(el, buf, key_map_cmd(el, EM_EXCHANGE_MARK), XK_CMD);
d1123 1
a1123 1
		(void) key__decode_str(in, outbuf, sizeof(outbuf), "");
d1132 1
a1132 1
		key_print(el, in);
d1152 1
a1152 1
			(void) key__decode_str(firstbuf, unparsbuf, 
d1163 1
a1163 1
				(void) key__decode_str(firstbuf, unparsbuf, 
d1168 1
a1168 1
				(void) key__decode_str(firstbuf, unparsbuf, 
d1170 1
a1170 1
				(void) key__decode_str(lastbuf, extrabuf, 
d1181 1
a1181 1
		(void) key__decode_str(firstbuf, unparsbuf, 
d1188 1
a1188 1
		(void) key__decode_str(firstbuf, unparsbuf, 
d1229 1
a1229 1
	key_print(el, STR(""));
d1322 1
a1322 1
			(void) key_delete(el, in);
d1324 1
a1324 1
			(void) key_delete(el, in);
d1352 1
a1352 1
			term_set_arrow(el, in, key_map_str(el, out), ntype);
d1354 1
a1354 1
			key_add(el, in, key_map_str(el, out), ntype);
d1366 1
a1366 1
			term_set_arrow(el, in, key_map_str(el, out), ntype);
d1369 1
a1369 1
				key_add(el, in, key_map_cmd(el, cmd), ntype);
d1372 1
a1372 1
				key_clear(el, map, in);
@


1.11
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d900 1
a900 1
	el->el_map.alt = (el_action_t *)el_malloc(sizeof(el_action_t) * N_KEYS);
d903 1
a903 1
	el->el_map.key = (el_action_t *)el_malloc(sizeof(el_action_t) * N_KEYS);
d909 2
a910 2
	el->el_map.help = (el_bindings_t *) el_malloc(sizeof(el_bindings_t) *
	    EL_NUM_FCNS);
d915 2
a916 2
	el->el_map.func = (el_func_t *)el_malloc(sizeof(el_func_t) *
	    EL_NUM_FCNS);
d938 1
a938 1
	el_free((ptr_t) el->el_map.alt);
d940 1
a940 1
	el_free((ptr_t) el->el_map.key);
d945 1
a945 1
	el_free((ptr_t) el->el_map.help);
d947 1
a947 1
	el_free((ptr_t) el->el_map.func);
d1398 1
a1398 1
	if ((p = el_realloc(el->el_map.func, nf * sizeof(el_func_t))) == NULL)
d1401 1
a1401 1
	if ((p = el_realloc(el->el_map.help, nf * sizeof(el_bindings_t)))
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 2
a2 2
/*	$OpenBSD: map.c,v 1.9 2003/10/31 08:42:24 otto Exp $	*/
/*	$NetBSD: map.c,v 1.19 2003/08/07 16:44:32 agc Exp $	*/
d44 2
a45 4
#define	N_KEYS 256

private void	map_print_key(EditLine *, el_action_t *, const char *);
private void	map_print_some_keys(EditLine *, el_action_t *, int, int);
d62 1
a62 1
	/*   8 */	ED_DELETE_PREV_CHAR,	/* ^H */
d181 1
a181 1
	/* 127 */	ED_DELETE_PREV_CHAR,	/* ^? */
d278 1
a278 1
	
d963 1
a963 1
		if (isprint(i))
d974 1
a974 1
	char buf[3];
d992 1
a992 1
	buf[0] = (char) i;
d1046 1
a1046 1
	char buf[3];
d1077 1
a1077 1
map_set_editor(EditLine *el, char *editor)
d1080 1
a1080 1
	if (strcmp(editor, "emacs") == 0) {
d1084 1
a1084 1
	if (strcmp(editor, "vi") == 0) {
d1096 1
a1096 1
map_get_editor(EditLine *el, const char **editor)
d1103 1
a1103 1
		*editor = "emacs";
d1106 1
a1106 1
		*editor = "vi";
d1117 1
a1117 1
map_print_key(EditLine *el, el_action_t *map, const char *in)
d1120 1
a1120 1
	el_bindings_t *bp;
d1123 3
a1125 2
		(void) key__decode_str(in, outbuf, "");
		for (bp = el->el_map.help; bp->name != NULL; bp++)
d1128 1
a1128 1
				    "%s\t->\t%s\n", outbuf, bp->name);
d1140 1
a1140 1
map_print_some_keys(EditLine *el, el_action_t *map, int first, int last)
d1142 2
a1143 2
	el_bindings_t *bp;
	char firstbuf[2], lastbuf[2];
d1151 3
a1153 1
		if (first == last)
d1155 2
a1156 2
			    "%-15s->  is undefined\n",
			    key__decode_str(firstbuf, unparsbuf, STRQQ));
d1159 2
a1160 1
	for (bp = el->el_map.help; bp->name != NULL; bp++) {
d1163 4
a1166 3
				(void) fprintf(el->el_outfile, "%-15s->  %s\n",
				    key__decode_str(firstbuf, unparsbuf, STRQQ),
				    bp->name);
d1168 4
d1173 2
a1174 4
				    "%-4s to %-7s->  %s\n",
				    key__decode_str(firstbuf, unparsbuf, STRQQ),
				    key__decode_str(lastbuf, extrabuf, STRQQ),
				    bp->name);
d1181 2
d1184 1
a1184 2
		    "BUG!!! %s isn't bound to anything.\n",
		    key__decode_str(firstbuf, unparsbuf, STRQQ));
d1188 2
d1191 1
a1191 2
		    "BUG!!! %s isn't bound to anything.\n",
		    key__decode_str(firstbuf, unparsbuf, STRQQ));
d1229 1
a1229 1
	key_print(el, "");
d1231 1
a1231 1
	term_print_arrow(el, "");
d1239 1
a1239 1
map_bind(EditLine *el, int argc, const char **argv)
d1243 6
a1248 6
	const char *p;
	char inbuf[EL_BUFSIZ];
	char outbuf[EL_BUFSIZ];
	const char *in = NULL;
	char *out = NULL;
	el_bindings_t *bp;
d1290 2
a1291 2
				for (bp = el->el_map.help; bp->name != NULL;
				    bp++)
d1293 1
a1293 1
					    "%s\n\t%s\n",
d1298 1
a1298 1
				    "%s: Invalid switch `%c'.\n",
d1312 1
a1312 1
		    "%s: Invalid \\ or ^ in instring.\n",
d1348 1
a1348 1
			    "%s: Invalid \\ or ^ in outstring.\n", argv[0]);
d1361 2
a1362 1
			    "%s: Invalid command `%s'.\n", argv[0], argv[argc]);
d1379 1
a1379 1
		EL_ABORT((el->el_errfile, "Bad XK_ type\n", ntype));
d1390 1
a1390 1
map_addfunc(EditLine *el, const char *name, const char *help, el_func_t func)
d1393 1
a1393 1
	int nf = el->el_map.nfunc + 2;
a1411 1
	el->el_map.help[++nf].name = NULL;
@


1.9
log
@Update to NetBSD libedit (from Oct 1, 2003), adding some string
cleaning and history bug fixes. The code includes GNU libreadline
functionality, but the corresponding header files are not installed,
since some libreadline functions are missing. There are some minor API
changes, notably:

old: EditLine *el_init(const char *, FILE *, FILE *);
new: EditLine *el_init(const char *, FILE *, FILE *, FILE *);

old: HistEvent *history(History *h, int op, ...);
new: int history(History *h, HistEvent *ev, int op, ...); plus some
changes in operation names. See editline(3) for details.

Tested by djm@@, mouring@@, jmc@@.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a36 7
#if !defined(lint) && !defined(SCCSID)
#if 0
static char sccsid[] = "@@(#)map.c	8.1 (Berkeley) 6/4/93";
#else
static const char rcsid[] = "$OpenBSD$";
#endif
#endif /* not lint && not SCCSID */
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: map.c,v 1.7 2003/05/01 21:11:21 avsm Exp $	*/
/*	$NetBSD: map.c,v 1.3 1997/01/11 06:48:00 lukem Exp $	*/
d36 1
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: map.c,v 1.7 2003/05/01 21:11:21 avsm Exp $";
d46 1
a46 1
 * map.c: Editor function definitions 
a47 1
#include "sys.h"
d51 1
a51 1
#define N_KEYS 256
d53 5
a57 5
private void map_print_key(EditLine *, el_action_t *, char *);
private void map_print_some_keys(EditLine *, el_action_t *, int, int);
private void map_print_all_keys(EditLine *);
private void map_init_nls(EditLine *);
private void map_init_meta(EditLine *);
d61 259
a319 258
private el_action_t  el_map_emacs[] = {
    /*   0 */	EM_SET_MARK,		/* ^@@ */
    /*   1 */	ED_MOVE_TO_BEG,		/* ^A */
    /*   2 */	ED_PREV_CHAR,		/* ^B */
    /*   3 */	ED_TTY_SIGINT,		/* ^C */
    /*   4 */	EM_DELETE_OR_LIST,	/* ^D */
    /*   5 */	ED_MOVE_TO_END,		/* ^E */
    /*   6 */	ED_NEXT_CHAR,		/* ^F */
    /*   7 */	ED_UNASSIGNED,		/* ^G */
    /*   8 */	ED_DELETE_PREV_CHAR,	/* ^H */
    /*   9 */	ED_UNASSIGNED,		/* ^I */
    /*  10 */	ED_NEWLINE,		/* ^J */
    /*  11 */	ED_KILL_LINE,		/* ^K */
    /*  12 */	ED_CLEAR_SCREEN,	/* ^L */
    /*  13 */	ED_NEWLINE,		/* ^M */
    /*  14 */	ED_NEXT_HISTORY,	/* ^N */
    /*  15 */	ED_TTY_FLUSH_OUTPUT,	/* ^O */
    /*  16 */	ED_PREV_HISTORY,	/* ^P */
    /*  17 */	ED_TTY_START_OUTPUT,	/* ^Q */
    /*  18 */	ED_REDISPLAY,		/* ^R */
    /*  19 */	ED_TTY_STOP_OUTPUT,	/* ^S */
    /*  20 */	ED_TRANSPOSE_CHARS,	/* ^T */
    /*  21 */	EM_KILL_LINE,		/* ^U */
    /*  22 */	ED_QUOTED_INSERT,	/* ^V */
    /*  23 */	EM_KILL_REGION,		/* ^W */
    /*  24 */	ED_SEQUENCE_LEAD_IN,	/* ^X */
    /*  25 */	EM_YANK,		/* ^Y */
    /*  26 */	ED_TTY_SIGTSTP,		/* ^Z */
    /*  27 */	EM_META_NEXT,		/* ^[ */
    /*  28 */	ED_TTY_SIGQUIT,		/* ^\ */
    /*  29 */	ED_TTY_DSUSP,		/* ^] */
    /*  30 */	ED_UNASSIGNED,		/* ^^ */
    /*  31 */	ED_UNASSIGNED,		/* ^_ */
    /*  32 */	ED_INSERT,		/* SPACE */
    /*  33 */	ED_INSERT,		/* ! */
    /*  34 */	ED_INSERT,		/* " */
    /*  35 */	ED_INSERT,		/* # */
    /*  36 */	ED_INSERT,		/* $ */
    /*  37 */	ED_INSERT,		/* % */
    /*  38 */	ED_INSERT,		/* & */
    /*  39 */	ED_INSERT,		/* ' */
    /*  40 */	ED_INSERT,		/* ( */
    /*  41 */	ED_INSERT,		/* ) */
    /*  42 */	ED_INSERT,		/* * */
    /*  43 */	ED_INSERT,		/* + */
    /*  44 */	ED_INSERT,		/* , */
    /*  45 */	ED_INSERT,		/* - */
    /*  46 */	ED_INSERT,		/* . */
    /*  47 */	ED_INSERT,		/* / */
    /*  48 */	ED_DIGIT,		/* 0 */
    /*  49 */	ED_DIGIT,		/* 1 */
    /*  50 */	ED_DIGIT,		/* 2 */
    /*  51 */	ED_DIGIT,		/* 3 */
    /*  52 */	ED_DIGIT,		/* 4 */
    /*  53 */	ED_DIGIT,		/* 5 */
    /*  54 */	ED_DIGIT,		/* 6 */
    /*  55 */	ED_DIGIT,		/* 7 */
    /*  56 */	ED_DIGIT,		/* 8 */
    /*  57 */	ED_DIGIT,		/* 9 */
    /*  58 */	ED_INSERT,		/* : */
    /*  59 */	ED_INSERT,		/* ; */
    /*  60 */	ED_INSERT,		/* < */
    /*  61 */	ED_INSERT,		/* = */
    /*  62 */	ED_INSERT,		/* > */
    /*  63 */	ED_INSERT,		/* ? */
    /*  64 */	ED_INSERT,		/* @@ */
    /*  65 */	ED_INSERT,		/* A */
    /*  66 */	ED_INSERT,		/* B */
    /*  67 */	ED_INSERT,		/* C */
    /*  68 */	ED_INSERT,		/* D */
    /*  69 */	ED_INSERT,		/* E */
    /*  70 */	ED_INSERT,		/* F */
    /*  71 */	ED_INSERT,		/* G */
    /*  72 */	ED_INSERT,		/* H */
    /*  73 */	ED_INSERT,		/* I */
    /*  74 */	ED_INSERT,		/* J */
    /*  75 */	ED_INSERT,		/* K */
    /*  76 */	ED_INSERT,		/* L */
    /*  77 */	ED_INSERT,		/* M */
    /*  78 */	ED_INSERT,		/* N */
    /*  79 */	ED_INSERT,		/* O */
    /*  80 */	ED_INSERT,		/* P */
    /*  81 */	ED_INSERT,		/* Q */
    /*  82 */	ED_INSERT,		/* R */
    /*  83 */	ED_INSERT,		/* S */
    /*  84 */	ED_INSERT,		/* T */
    /*  85 */	ED_INSERT,		/* U */
    /*  86 */	ED_INSERT,		/* V */
    /*  87 */	ED_INSERT,		/* W */
    /*  88 */	ED_INSERT,		/* X */
    /*  89 */	ED_INSERT,		/* Y */
    /*  90 */	ED_INSERT,		/* Z */
    /*  91 */	ED_INSERT,		/* [ */
    /*  92 */	ED_INSERT,		/* \ */
    /*  93 */	ED_INSERT,		/* ] */
    /*  94 */	ED_INSERT,		/* ^ */
    /*  95 */	ED_INSERT,		/* _ */
    /*  96 */	ED_INSERT,		/* ` */
    /*  97 */	ED_INSERT,		/* a */
    /*  98 */	ED_INSERT,		/* b */
    /*  99 */	ED_INSERT,		/* c */
    /* 100 */	ED_INSERT,		/* d */
    /* 101 */	ED_INSERT,		/* e */
    /* 102 */	ED_INSERT,		/* f */
    /* 103 */	ED_INSERT,		/* g */
    /* 104 */	ED_INSERT,		/* h */
    /* 105 */	ED_INSERT,		/* i */
    /* 106 */	ED_INSERT,		/* j */
    /* 107 */	ED_INSERT,		/* k */
    /* 108 */	ED_INSERT,		/* l */
    /* 109 */	ED_INSERT,		/* m */
    /* 110 */	ED_INSERT,		/* n */
    /* 111 */	ED_INSERT,		/* o */
    /* 112 */	ED_INSERT,		/* p */
    /* 113 */	ED_INSERT,		/* q */
    /* 114 */	ED_INSERT,		/* r */
    /* 115 */	ED_INSERT,		/* s */
    /* 116 */	ED_INSERT,		/* t */
    /* 117 */	ED_INSERT,		/* u */
    /* 118 */	ED_INSERT,		/* v */
    /* 119 */	ED_INSERT,		/* w */
    /* 120 */	ED_INSERT,		/* x */
    /* 121 */	ED_INSERT,		/* y */
    /* 122 */	ED_INSERT,		/* z */
    /* 123 */	ED_INSERT,		/* { */
    /* 124 */	ED_INSERT,		/* | */
    /* 125 */	ED_INSERT,		/* } */
    /* 126 */	ED_INSERT,		/* ~ */
    /* 127 */	ED_DELETE_PREV_CHAR,	/* ^? */
    /* 128 */	ED_UNASSIGNED,		/* M-^@@ */
    /* 129 */	ED_UNASSIGNED,		/* M-^A */
    /* 130 */	ED_UNASSIGNED,		/* M-^B */
    /* 131 */	ED_UNASSIGNED,		/* M-^C */
    /* 132 */	ED_UNASSIGNED,		/* M-^D */
    /* 133 */	ED_UNASSIGNED,		/* M-^E */
    /* 134 */	ED_UNASSIGNED,		/* M-^F */
    /* 135 */	ED_UNASSIGNED,		/* M-^G */
    /* 136 */	ED_DELETE_PREV_WORD,	/* M-^H */
    /* 137 */	ED_UNASSIGNED,		/* M-^I */
    /* 138 */	ED_UNASSIGNED,		/* M-^J */
    /* 139 */	ED_UNASSIGNED,		/* M-^K */
    /* 140 */	ED_CLEAR_SCREEN,		/* M-^L */
    /* 141 */	ED_UNASSIGNED,		/* M-^M */
    /* 142 */	ED_UNASSIGNED,		/* M-^N */
    /* 143 */	ED_UNASSIGNED,		/* M-^O */
    /* 144 */	ED_UNASSIGNED,		/* M-^P */
    /* 145 */	ED_UNASSIGNED,		/* M-^Q */
    /* 146 */	ED_UNASSIGNED,		/* M-^R */
    /* 147 */	ED_UNASSIGNED,		/* M-^S */
    /* 148 */	ED_UNASSIGNED,		/* M-^T */
    /* 149 */	ED_UNASSIGNED,		/* M-^U */
    /* 150 */	ED_UNASSIGNED,		/* M-^V */
    /* 151 */	ED_UNASSIGNED,		/* M-^W */
    /* 152 */	ED_UNASSIGNED,		/* M-^X */
    /* 153 */	ED_UNASSIGNED,		/* M-^Y */
    /* 154 */	ED_UNASSIGNED,		/* M-^Z */
    /* 155 */	ED_UNASSIGNED,		/* M-^[ */
    /* 156 */	ED_UNASSIGNED,		/* M-^\ */
    /* 157 */	ED_UNASSIGNED,		/* M-^] */
    /* 158 */	ED_UNASSIGNED,		/* M-^^ */
    /* 159 */	EM_COPY_PREV_WORD,	/* M-^_ */
    /* 160 */	ED_UNASSIGNED,		/* M-SPACE */
    /* 161 */	ED_UNASSIGNED,		/* M-! */
    /* 162 */	ED_UNASSIGNED,		/* M-" */
    /* 163 */	ED_UNASSIGNED,		/* M-# */
    /* 164 */	ED_UNASSIGNED,		/* M-$ */
    /* 165 */	ED_UNASSIGNED,		/* M-% */
    /* 166 */	ED_UNASSIGNED,		/* M-& */
    /* 167 */	ED_UNASSIGNED,		/* M-' */
    /* 168 */	ED_UNASSIGNED,		/* M-( */
    /* 169 */	ED_UNASSIGNED,		/* M-) */
    /* 170 */	ED_UNASSIGNED,		/* M-* */
    /* 171 */	ED_UNASSIGNED,		/* M-+ */
    /* 172 */	ED_UNASSIGNED,		/* M-, */
    /* 173 */	ED_UNASSIGNED,		/* M-- */
    /* 174 */	ED_UNASSIGNED,		/* M-. */
    /* 175 */	ED_UNASSIGNED,		/* M-/ */
    /* 176 */	ED_ARGUMENT_DIGIT,	/* M-0 */
    /* 177 */	ED_ARGUMENT_DIGIT,	/* M-1 */
    /* 178 */	ED_ARGUMENT_DIGIT,	/* M-2 */
    /* 179 */	ED_ARGUMENT_DIGIT,	/* M-3 */
    /* 180 */	ED_ARGUMENT_DIGIT,	/* M-4 */
    /* 181 */	ED_ARGUMENT_DIGIT,	/* M-5 */
    /* 182 */	ED_ARGUMENT_DIGIT,	/* M-6 */
    /* 183 */	ED_ARGUMENT_DIGIT,	/* M-7 */
    /* 184 */	ED_ARGUMENT_DIGIT,	/* M-8 */
    /* 185 */	ED_ARGUMENT_DIGIT,	/* M-9 */
    /* 186 */	ED_UNASSIGNED,		/* M-: */
    /* 187 */	ED_UNASSIGNED,		/* M-; */
    /* 188 */	ED_UNASSIGNED,		/* M-< */
    /* 189 */	ED_UNASSIGNED,		/* M-= */
    /* 190 */	ED_UNASSIGNED,		/* M-> */
    /* 191 */	ED_UNASSIGNED,		/* M-? */
    /* 192 */	ED_UNASSIGNED,		/* M-@@ */
    /* 193 */	ED_UNASSIGNED,		/* M-A */
    /* 194 */	ED_PREV_WORD,		/* M-B */
    /* 195 */	EM_CAPITOL_CASE,		/* M-C */
    /* 196 */	EM_DELETE_NEXT_WORD,	/* M-D */
    /* 197 */	ED_UNASSIGNED,		/* M-E */
    /* 198 */	EM_NEXT_WORD,		/* M-F */
    /* 199 */	ED_UNASSIGNED,		/* M-G */
    /* 200 */	ED_UNASSIGNED,		/* M-H */
    /* 201 */	ED_UNASSIGNED,		/* M-I */
    /* 202 */	ED_UNASSIGNED,		/* M-J */
    /* 203 */	ED_UNASSIGNED,		/* M-K */
    /* 204 */	EM_LOWER_CASE,		/* M-L */
    /* 205 */	ED_UNASSIGNED,		/* M-M */
    /* 206 */	ED_SEARCH_NEXT_HISTORY,	/* M-N */
    /* 207 */	ED_SEQUENCE_LEAD_IN,	/* M-O */
    /* 208 */	ED_SEARCH_PREV_HISTORY,	/* M-P */
    /* 209 */	ED_UNASSIGNED,		/* M-Q */
    /* 210 */	ED_UNASSIGNED,		/* M-R */
    /* 211 */	ED_UNASSIGNED,		/* M-S */
    /* 212 */	ED_UNASSIGNED,		/* M-T */
    /* 213 */	EM_UPPER_CASE,		/* M-U */
    /* 214 */	ED_UNASSIGNED,		/* M-V */
    /* 215 */	EM_COPY_REGION,		/* M-W */
    /* 216 */	ED_COMMAND,		/* M-X */
    /* 217 */	ED_UNASSIGNED,		/* M-Y */
    /* 218 */	ED_UNASSIGNED,		/* M-Z */
    /* 219 */	ED_SEQUENCE_LEAD_IN,	/* M-[ */
    /* 220 */	ED_UNASSIGNED,		/* M-\ */
    /* 221 */	ED_UNASSIGNED,		/* M-] */
    /* 222 */	ED_UNASSIGNED,		/* M-^ */
    /* 223 */	ED_UNASSIGNED,		/* M-_ */
    /* 223 */	ED_UNASSIGNED,		/* M-` */
    /* 224 */	ED_UNASSIGNED,		/* M-a */
    /* 225 */	ED_PREV_WORD,		/* M-b */
    /* 226 */	EM_CAPITOL_CASE,	/* M-c */
    /* 227 */	EM_DELETE_NEXT_WORD,	/* M-d */
    /* 228 */	ED_UNASSIGNED,		/* M-e */
    /* 229 */	EM_NEXT_WORD,		/* M-f */
    /* 230 */	ED_UNASSIGNED,		/* M-g */
    /* 231 */	ED_UNASSIGNED,		/* M-h */
    /* 232 */	ED_UNASSIGNED,		/* M-i */
    /* 233 */	ED_UNASSIGNED,		/* M-j */
    /* 234 */	ED_UNASSIGNED,		/* M-k */
    /* 235 */	EM_LOWER_CASE,		/* M-l */
    /* 236 */	ED_UNASSIGNED,		/* M-m */
    /* 237 */	ED_SEARCH_NEXT_HISTORY,	/* M-n */
    /* 238 */	ED_UNASSIGNED,		/* M-o */
    /* 239 */	ED_SEARCH_PREV_HISTORY,	/* M-p */
    /* 240 */	ED_UNASSIGNED,		/* M-q */
    /* 241 */	ED_UNASSIGNED,		/* M-r */
    /* 242 */	ED_UNASSIGNED,		/* M-s */
    /* 243 */	ED_UNASSIGNED,		/* M-t */
    /* 244 */	EM_UPPER_CASE,		/* M-u */
    /* 245 */	ED_UNASSIGNED,		/* M-v */
    /* 246 */	EM_COPY_REGION,		/* M-w */
    /* 247 */	ED_COMMAND,		/* M-x */
    /* 248 */	ED_UNASSIGNED,		/* M-y */
    /* 249 */	ED_UNASSIGNED,		/* M-z */
    /* 250 */	ED_UNASSIGNED,		/* M-{ */
    /* 251 */	ED_UNASSIGNED,		/* M-| */
    /* 252 */	ED_UNASSIGNED,		/* M-} */
    /* 253 */	ED_UNASSIGNED,		/* M-~ */
    /* 254 */	ED_DELETE_PREV_WORD		/* M-^? */
    /* 255 */
d322 1
d329 1
a329 1
private el_action_t  el_map_vi_insert[] = {
d331 33
a363 32
    /*   0 */	ED_UNASSIGNED,		/* ^@@ */
    /*   1 */	ED_INSERT,		/* ^A */
    /*   2 */	ED_INSERT,		/* ^B */
    /*   3 */	ED_INSERT,		/* ^C */
    /*   4 */	VI_LIST_OR_EOF,		/* ^D */
    /*   5 */	ED_INSERT,		/* ^E */
    /*   6 */	ED_INSERT,		/* ^F */
    /*   7 */	ED_INSERT,		/* ^G */
    /*   8 */	VI_DELETE_PREV_CHAR,	/* ^H */   /* BackSpace key */
    /*   9 */	ED_INSERT,		/* ^I */   /* Tab Key  */
    /*  10 */	ED_NEWLINE,		/* ^J */
    /*  11 */	ED_INSERT,		/* ^K */
    /*  12 */	ED_INSERT,		/* ^L */
    /*  13 */	ED_NEWLINE,		/* ^M */
    /*  14 */	ED_INSERT,		/* ^N */
    /*  15 */	ED_INSERT,		/* ^O */
    /*  16 */	ED_INSERT,		/* ^P */
    /*  17 */	ED_TTY_START_OUTPUT,	/* ^Q */
    /*  18 */	ED_INSERT,		/* ^R */
    /*  19 */	ED_TTY_STOP_OUTPUT,	/* ^S */
    /*  20 */	ED_INSERT,		/* ^T */
    /*  21 */	VI_KILL_LINE_PREV,	/* ^U */
    /*  22 */	ED_QUOTED_INSERT,	/* ^V */
    /*  23 */	ED_DELETE_PREV_WORD,	/* ^W */  /* Only until strt edit pos */
    /*  24 */	ED_INSERT,		/* ^X */
    /*  25 */	ED_INSERT,		/* ^Y */
    /*  26 */	ED_INSERT,		/* ^Z */
    /*  27 */	VI_COMMAND_MODE,	/* ^[ */  /* [ Esc ] key */
    /*  28 */	ED_TTY_SIGQUIT,		/* ^\ */
    /*  29 */	ED_INSERT,		/* ^] */
    /*  30 */	ED_INSERT,		/* ^^ */
    /*  31 */	ED_INSERT,		/* ^_ */
d365 38
a402 32
    /*   0 */	ED_UNASSIGNED,		/* ^@@ */   /* NOTE: These mappings do */
    /*   1 */	ED_MOVE_TO_BEG,		/* ^A */   /* NOT Correspond well to  */
    /*   2 */	ED_PREV_CHAR,		/* ^B */   /* the KSH VI editing as-  */
    /*   3 */	ED_TTY_SIGINT,		/* ^C */   /* signments. On the other */
    /*   4 */	VI_LIST_OR_EOF,		/* ^D */   /* hand they are convenient*/
    /*   5 */	ED_MOVE_TO_END,		/* ^E */   /* and many people have    */
    /*   6 */	ED_NEXT_CHAR,		/* ^F */   /* have gotten used to them*/
    /*   7 */	ED_UNASSIGNED,		/* ^G */
    /*   8 */	ED_DELETE_PREV_CHAR,	/* ^H */   /* BackSpace key */
    /*   9 */	ED_UNASSIGNED,		/* ^I */   /* Tab Key */
    /*  10 */	ED_NEWLINE,		/* ^J */
    /*  11 */	ED_KILL_LINE,		/* ^K */
    /*  12 */	ED_CLEAR_SCREEN,	/* ^L */
    /*  13 */	ED_NEWLINE,		/* ^M */
    /*  14 */	ED_NEXT_HISTORY,	/* ^N */
    /*  15 */	ED_TTY_FLUSH_OUTPUT,	/* ^O */
    /*  16 */	ED_PREV_HISTORY,	/* ^P */
    /*  17 */	ED_TTY_START_OUTPUT,	/* ^Q */
    /*  18 */	ED_REDISPLAY,		/* ^R */
    /*  19 */	ED_TTY_STOP_OUTPUT,	/* ^S */
    /*  20 */	ED_TRANSPOSE_CHARS,	/* ^T */
    /*  21 */	VI_KILL_LINE_PREV,	/* ^U */
    /*  22 */	ED_QUOTED_INSERT,	/* ^V */
    /*  23 */	ED_DELETE_PREV_WORD,	/* ^W */
    /*  24 */	ED_UNASSIGNED,		/* ^X */
    /*  25 */	ED_TTY_DSUSP,		/* ^Y */
    /*  26 */	ED_TTY_SIGTSTP,		/* ^Z */
    /*  27 */	VI_COMMAND_MODE,	/* ^[ */
    /*  28 */	ED_TTY_SIGQUIT,		/* ^\ */
    /*  29 */	ED_UNASSIGNED,		/* ^] */
    /*  30 */	ED_UNASSIGNED,		/* ^^ */
    /*  31 */	ED_UNASSIGNED,		/* ^_ */
d404 224
a627 224
    /*  32 */	ED_INSERT,		/* SPACE */
    /*  33 */	ED_INSERT,		/* ! */
    /*  34 */	ED_INSERT,		/* " */
    /*  35 */	ED_INSERT,		/* # */
    /*  36 */	ED_INSERT,		/* $ */
    /*  37 */	ED_INSERT,		/* % */
    /*  38 */	ED_INSERT,		/* & */
    /*  39 */	ED_INSERT,		/* ' */
    /*  40 */	ED_INSERT,		/* ( */
    /*  41 */	ED_INSERT,		/* ) */
    /*  42 */	ED_INSERT,		/* * */
    /*  43 */	ED_INSERT,		/* + */
    /*  44 */	ED_INSERT,		/* , */
    /*  45 */	ED_INSERT,		/* - */
    /*  46 */	ED_INSERT,		/* . */
    /*  47 */	ED_INSERT,		/* / */
    /*  48 */	ED_INSERT,		/* 0 */
    /*  49 */	ED_INSERT,		/* 1 */
    /*  50 */	ED_INSERT,		/* 2 */
    /*  51 */	ED_INSERT,		/* 3 */
    /*  52 */	ED_INSERT,		/* 4 */
    /*  53 */	ED_INSERT,		/* 5 */
    /*  54 */	ED_INSERT,		/* 6 */
    /*  55 */	ED_INSERT,		/* 7 */
    /*  56 */	ED_INSERT,		/* 8 */
    /*  57 */	ED_INSERT,		/* 9 */
    /*  58 */	ED_INSERT,		/* : */
    /*  59 */	ED_INSERT,		/* ; */
    /*  60 */	ED_INSERT,		/* < */
    /*  61 */	ED_INSERT,		/* = */
    /*  62 */	ED_INSERT,		/* > */
    /*  63 */	ED_INSERT,		/* ? */
    /*  64 */	ED_INSERT,		/* @@ */
    /*  65 */	ED_INSERT,		/* A */
    /*  66 */	ED_INSERT,		/* B */
    /*  67 */	ED_INSERT,		/* C */
    /*  68 */	ED_INSERT,		/* D */
    /*  69 */	ED_INSERT,		/* E */
    /*  70 */	ED_INSERT,		/* F */
    /*  71 */	ED_INSERT,		/* G */
    /*  72 */	ED_INSERT,		/* H */
    /*  73 */	ED_INSERT,		/* I */
    /*  74 */	ED_INSERT,		/* J */
    /*  75 */	ED_INSERT,		/* K */
    /*  76 */	ED_INSERT,		/* L */
    /*  77 */	ED_INSERT,		/* M */
    /*  78 */	ED_INSERT,		/* N */
    /*  79 */	ED_INSERT,		/* O */
    /*  80 */	ED_INSERT,		/* P */
    /*  81 */	ED_INSERT,		/* Q */
    /*  82 */	ED_INSERT,		/* R */
    /*  83 */	ED_INSERT,		/* S */
    /*  84 */	ED_INSERT,		/* T */
    /*  85 */	ED_INSERT,		/* U */
    /*  86 */	ED_INSERT,		/* V */
    /*  87 */	ED_INSERT,		/* W */
    /*  88 */	ED_INSERT,		/* X */
    /*  89 */	ED_INSERT,		/* Y */
    /*  90 */	ED_INSERT,		/* Z */
    /*  91 */	ED_INSERT,		/* [ */
    /*  92 */	ED_INSERT,		/* \ */
    /*  93 */	ED_INSERT,		/* ] */
    /*  94 */	ED_INSERT,		/* ^ */
    /*  95 */	ED_INSERT,		/* _ */
    /*  96 */	ED_INSERT,		/* ` */
    /*  97 */	ED_INSERT,		/* a */
    /*  98 */	ED_INSERT,		/* b */
    /*  99 */	ED_INSERT,		/* c */
    /* 100 */	ED_INSERT,		/* d */
    /* 101 */	ED_INSERT,		/* e */
    /* 102 */	ED_INSERT,		/* f */
    /* 103 */	ED_INSERT,		/* g */
    /* 104 */	ED_INSERT,		/* h */
    /* 105 */	ED_INSERT,		/* i */
    /* 106 */	ED_INSERT,		/* j */
    /* 107 */	ED_INSERT,		/* k */
    /* 108 */	ED_INSERT,		/* l */
    /* 109 */	ED_INSERT,		/* m */
    /* 110 */	ED_INSERT,		/* n */
    /* 111 */	ED_INSERT,		/* o */
    /* 112 */	ED_INSERT,		/* p */
    /* 113 */	ED_INSERT,		/* q */
    /* 114 */	ED_INSERT,		/* r */
    /* 115 */	ED_INSERT,		/* s */
    /* 116 */	ED_INSERT,		/* t */
    /* 117 */	ED_INSERT,		/* u */
    /* 118 */	ED_INSERT,		/* v */
    /* 119 */	ED_INSERT,		/* w */
    /* 120 */	ED_INSERT,		/* x */
    /* 121 */	ED_INSERT,		/* y */
    /* 122 */	ED_INSERT,		/* z */
    /* 123 */	ED_INSERT,		/* { */
    /* 124 */	ED_INSERT,		/* | */
    /* 125 */	ED_INSERT,		/* } */
    /* 126 */	ED_INSERT,		/* ~ */
    /* 127 */	ED_DELETE_PREV_CHAR,	/* ^? */
    /* 128 */	ED_UNASSIGNED,		/* M-^@@ */
    /* 129 */	ED_UNASSIGNED,		/* M-^A */
    /* 130 */	ED_UNASSIGNED,		/* M-^B */
    /* 131 */	ED_UNASSIGNED,		/* M-^C */
    /* 132 */	ED_UNASSIGNED,		/* M-^D */
    /* 133 */	ED_UNASSIGNED,		/* M-^E */
    /* 134 */	ED_UNASSIGNED,		/* M-^F */
    /* 135 */	ED_UNASSIGNED,		/* M-^G */
    /* 136 */	ED_UNASSIGNED,		/* M-^H */
    /* 137 */	ED_UNASSIGNED,		/* M-^I */
    /* 138 */	ED_UNASSIGNED,		/* M-^J */
    /* 139 */	ED_UNASSIGNED,		/* M-^K */
    /* 140 */	ED_UNASSIGNED,		/* M-^L */
    /* 141 */	ED_UNASSIGNED,		/* M-^M */
    /* 142 */	ED_UNASSIGNED,		/* M-^N */
    /* 143 */	ED_UNASSIGNED,		/* M-^O */
    /* 144 */	ED_UNASSIGNED,		/* M-^P */
    /* 145 */	ED_UNASSIGNED,		/* M-^Q */
    /* 146 */	ED_UNASSIGNED,		/* M-^R */
    /* 147 */	ED_UNASSIGNED,		/* M-^S */
    /* 148 */	ED_UNASSIGNED,		/* M-^T */
    /* 149 */	ED_UNASSIGNED,		/* M-^U */
    /* 150 */	ED_UNASSIGNED,		/* M-^V */
    /* 151 */	ED_UNASSIGNED,		/* M-^W */
    /* 152 */	ED_UNASSIGNED,		/* M-^X */
    /* 153 */	ED_UNASSIGNED,		/* M-^Y */
    /* 154 */	ED_UNASSIGNED,		/* M-^Z */
    /* 155 */	ED_UNASSIGNED,		/* M-^[ */
    /* 156 */	ED_UNASSIGNED,		/* M-^\ */
    /* 157 */	ED_UNASSIGNED,		/* M-^] */
    /* 158 */	ED_UNASSIGNED,		/* M-^^ */
    /* 159 */	ED_UNASSIGNED,		/* M-^_ */
    /* 160 */	ED_UNASSIGNED,		/* M-SPACE */
    /* 161 */	ED_UNASSIGNED,		/* M-! */
    /* 162 */	ED_UNASSIGNED,		/* M-" */
    /* 163 */	ED_UNASSIGNED,		/* M-# */
    /* 164 */	ED_UNASSIGNED,		/* M-$ */
    /* 165 */	ED_UNASSIGNED,		/* M-% */
    /* 166 */	ED_UNASSIGNED,		/* M-& */
    /* 167 */	ED_UNASSIGNED,		/* M-' */
    /* 168 */	ED_UNASSIGNED,		/* M-( */
    /* 169 */	ED_UNASSIGNED,		/* M-) */
    /* 170 */	ED_UNASSIGNED,		/* M-* */
    /* 171 */	ED_UNASSIGNED,		/* M-+ */
    /* 172 */	ED_UNASSIGNED,		/* M-, */
    /* 173 */	ED_UNASSIGNED,		/* M-- */
    /* 174 */	ED_UNASSIGNED,		/* M-. */
    /* 175 */	ED_UNASSIGNED,		/* M-/ */
    /* 176 */	ED_UNASSIGNED,		/* M-0 */
    /* 177 */	ED_UNASSIGNED,		/* M-1 */
    /* 178 */	ED_UNASSIGNED,		/* M-2 */
    /* 179 */	ED_UNASSIGNED,		/* M-3 */
    /* 180 */	ED_UNASSIGNED,		/* M-4 */
    /* 181 */	ED_UNASSIGNED,		/* M-5 */
    /* 182 */	ED_UNASSIGNED,		/* M-6 */
    /* 183 */	ED_UNASSIGNED,		/* M-7 */
    /* 184 */	ED_UNASSIGNED,		/* M-8 */
    /* 185 */	ED_UNASSIGNED,		/* M-9 */
    /* 186 */	ED_UNASSIGNED,		/* M-: */
    /* 187 */	ED_UNASSIGNED,		/* M-; */
    /* 188 */	ED_UNASSIGNED,		/* M-< */
    /* 189 */	ED_UNASSIGNED,		/* M-= */
    /* 190 */	ED_UNASSIGNED,		/* M-> */
    /* 191 */	ED_UNASSIGNED,		/* M-? */
    /* 192 */	ED_UNASSIGNED,		/* M-@@ */
    /* 193 */	ED_UNASSIGNED,		/* M-A */
    /* 194 */	ED_UNASSIGNED,		/* M-B */
    /* 195 */	ED_UNASSIGNED,		/* M-C */
    /* 196 */	ED_UNASSIGNED,		/* M-D */
    /* 197 */	ED_UNASSIGNED,		/* M-E */
    /* 198 */	ED_UNASSIGNED,		/* M-F */
    /* 199 */	ED_UNASSIGNED,		/* M-G */
    /* 200 */	ED_UNASSIGNED,		/* M-H */
    /* 201 */	ED_UNASSIGNED,		/* M-I */
    /* 202 */	ED_UNASSIGNED,		/* M-J */
    /* 203 */	ED_UNASSIGNED,		/* M-K */
    /* 204 */	ED_UNASSIGNED,		/* M-L */
    /* 205 */	ED_UNASSIGNED,		/* M-M */
    /* 206 */	ED_UNASSIGNED,		/* M-N */
    /* 207 */	ED_UNASSIGNED,		/* M-O */
    /* 208 */	ED_UNASSIGNED,		/* M-P */
    /* 209 */	ED_UNASSIGNED,		/* M-Q */
    /* 210 */	ED_UNASSIGNED,		/* M-R */
    /* 211 */	ED_UNASSIGNED,		/* M-S */
    /* 212 */	ED_UNASSIGNED,		/* M-T */
    /* 213 */	ED_UNASSIGNED,		/* M-U */
    /* 214 */	ED_UNASSIGNED,		/* M-V */
    /* 215 */	ED_UNASSIGNED,		/* M-W */
    /* 216 */	ED_UNASSIGNED,		/* M-X */
    /* 217 */	ED_UNASSIGNED,		/* M-Y */
    /* 218 */	ED_UNASSIGNED,		/* M-Z */
    /* 219 */	ED_UNASSIGNED,		/* M-[ */
    /* 220 */	ED_UNASSIGNED,		/* M-\ */
    /* 221 */	ED_UNASSIGNED,		/* M-] */
    /* 222 */	ED_UNASSIGNED,		/* M-^ */
    /* 223 */	ED_UNASSIGNED,		/* M-_ */
    /* 224 */	ED_UNASSIGNED,		/* M-` */
    /* 225 */	ED_UNASSIGNED,		/* M-a */
    /* 226 */	ED_UNASSIGNED,		/* M-b */
    /* 227 */	ED_UNASSIGNED,		/* M-c */
    /* 228 */	ED_UNASSIGNED,		/* M-d */
    /* 229 */	ED_UNASSIGNED,		/* M-e */
    /* 230 */	ED_UNASSIGNED,		/* M-f */
    /* 231 */	ED_UNASSIGNED,		/* M-g */
    /* 232 */	ED_UNASSIGNED,		/* M-h */
    /* 233 */	ED_UNASSIGNED,		/* M-i */
    /* 234 */	ED_UNASSIGNED,		/* M-j */
    /* 235 */	ED_UNASSIGNED,		/* M-k */
    /* 236 */	ED_UNASSIGNED,		/* M-l */
    /* 237 */	ED_UNASSIGNED,		/* M-m */
    /* 238 */	ED_UNASSIGNED,		/* M-n */
    /* 239 */	ED_UNASSIGNED,		/* M-o */
    /* 240 */	ED_UNASSIGNED,		/* M-p */
    /* 241 */	ED_UNASSIGNED,		/* M-q */
    /* 242 */	ED_UNASSIGNED,		/* M-r */
    /* 243 */	ED_UNASSIGNED,		/* M-s */
    /* 244 */	ED_UNASSIGNED,		/* M-t */
    /* 245 */	ED_UNASSIGNED,		/* M-u */
    /* 246 */	ED_UNASSIGNED,		/* M-v */
    /* 247 */	ED_UNASSIGNED,		/* M-w */
    /* 248 */	ED_UNASSIGNED,		/* M-x */
    /* 249 */	ED_UNASSIGNED,		/* M-y */
    /* 250 */	ED_UNASSIGNED,		/* M-z */
    /* 251 */	ED_UNASSIGNED,		/* M-{ */
    /* 252 */	ED_UNASSIGNED,		/* M-| */
    /* 253 */	ED_UNASSIGNED,		/* M-} */
    /* 254 */	ED_UNASSIGNED,		/* M-~ */
    /* 255 */	ED_UNASSIGNED		/* M-^? */
d630 257
a886 257
private el_action_t  el_map_vi_command[] = {
    /*   0 */	ED_UNASSIGNED,		/* ^@@ */
    /*   1 */	ED_MOVE_TO_BEG,		/* ^A */
    /*   2 */	ED_UNASSIGNED,		/* ^B */
    /*   3 */	ED_TTY_SIGINT,		/* ^C */
    /*   4 */	ED_UNASSIGNED,		/* ^D */
    /*   5 */	ED_MOVE_TO_END,		/* ^E */
    /*   6 */	ED_UNASSIGNED,		/* ^F */
    /*   7 */	ED_UNASSIGNED,		/* ^G */
    /*   8 */	ED_PREV_CHAR,		/* ^H */
    /*   9 */	ED_UNASSIGNED,		/* ^I */
    /*  10 */	ED_NEWLINE,		/* ^J */
    /*  11 */	ED_KILL_LINE,		/* ^K */
    /*  12 */	ED_CLEAR_SCREEN,	/* ^L */
    /*  13 */	ED_NEWLINE,		/* ^M */
    /*  14 */	ED_NEXT_HISTORY,	/* ^N */
    /*  15 */	ED_TTY_FLUSH_OUTPUT,	/* ^O */
    /*  16 */	ED_PREV_HISTORY,	/* ^P */
    /*  17 */	ED_TTY_START_OUTPUT,	/* ^Q */
    /*  18 */	ED_REDISPLAY,		/* ^R */
    /*  19 */	ED_TTY_STOP_OUTPUT,	/* ^S */
    /*  20 */	ED_UNASSIGNED,		/* ^T */
    /*  21 */	VI_KILL_LINE_PREV,	/* ^U */
    /*  22 */	ED_UNASSIGNED,		/* ^V */
    /*  23 */	ED_DELETE_PREV_WORD,	/* ^W */
    /*  24 */	ED_UNASSIGNED,		/* ^X */
    /*  25 */	ED_UNASSIGNED,		/* ^Y */
    /*  26 */	ED_UNASSIGNED,		/* ^Z */
    /*  27 */	EM_META_NEXT,		/* ^[ */
    /*  28 */	ED_TTY_SIGQUIT,		/* ^\ */
    /*  29 */	ED_UNASSIGNED,		/* ^] */
    /*  30 */	ED_UNASSIGNED,		/* ^^ */
    /*  31 */	ED_UNASSIGNED,		/* ^_ */
    /*  32 */	ED_NEXT_CHAR,		/* SPACE */
    /*  33 */	ED_UNASSIGNED,		/* ! */
    /*  34 */	ED_UNASSIGNED,		/* " */
    /*  35 */	ED_UNASSIGNED,		/* # */
    /*  36 */	ED_MOVE_TO_END,		/* $ */
    /*  37 */	ED_UNASSIGNED,		/* % */
    /*  38 */	ED_UNASSIGNED,		/* & */
    /*  39 */	ED_UNASSIGNED,		/* ' */
    /*  40 */	ED_UNASSIGNED,		/* ( */
    /*  41 */	ED_UNASSIGNED,		/* ) */
    /*  42 */	ED_UNASSIGNED,		/* * */
    /*  43 */	ED_NEXT_HISTORY,	/* + */
    /*  44 */	VI_REPEAT_PREV_CHAR,	/* , */	
    /*  45 */	ED_PREV_HISTORY,	/* - */	
    /*  46 */	ED_UNASSIGNED,		/* . */
    /*  47 */	VI_SEARCH_PREV,		/* / */
    /*  48 */	VI_ZERO,		/* 0 */
    /*  49 */	ED_ARGUMENT_DIGIT,	/* 1 */
    /*  50 */	ED_ARGUMENT_DIGIT,	/* 2 */
    /*  51 */	ED_ARGUMENT_DIGIT,	/* 3 */
    /*  52 */	ED_ARGUMENT_DIGIT,	/* 4 */
    /*  53 */	ED_ARGUMENT_DIGIT,	/* 5 */
    /*  54 */	ED_ARGUMENT_DIGIT,	/* 6 */
    /*  55 */	ED_ARGUMENT_DIGIT,	/* 7 */
    /*  56 */	ED_ARGUMENT_DIGIT,	/* 8 */
    /*  57 */	ED_ARGUMENT_DIGIT,	/* 9 */
    /*  58 */	ED_COMMAND,		/* : */
    /*  59 */	VI_REPEAT_NEXT_CHAR,	/* ; */
    /*  60 */	ED_UNASSIGNED,		/* < */
    /*  61 */	ED_UNASSIGNED,		/* = */
    /*  62 */	ED_UNASSIGNED,		/* > */
    /*  63 */	VI_SEARCH_NEXT,		/* ? */
    /*  64 */	ED_UNASSIGNED,		/* @@ */
    /*  65 */	VI_ADD_AT_EOL,		/* A */
    /*  66 */	VI_PREV_SPACE_WORD,	/* B */
    /*  67 */	VI_CHANGE_TO_EOL,	/* C */
    /*  68 */	ED_KILL_LINE,		/* D */
    /*  69 */	VI_TO_END_WORD,		/* E */
    /*  70 */	VI_PREV_CHAR,		/* F */
    /*  71 */	ED_UNASSIGNED,		/* G */
    /*  72 */	ED_UNASSIGNED,		/* H */
    /*  73 */	VI_INSERT_AT_BOL,	/* I */
    /*  74 */	ED_SEARCH_NEXT_HISTORY,	/* J */
    /*  75 */	ED_SEARCH_PREV_HISTORY,	/* K */
    /*  76 */	ED_UNASSIGNED,		/* L */
    /*  77 */	ED_UNASSIGNED,		/* M */
    /*  78 */	VI_REPEAT_SEARCH_PREV,	/* N */
    /*  79 */	ED_SEQUENCE_LEAD_IN,	/* O */
    /*  80 */	VI_PASTE_PREV,		/* P */
    /*  81 */	ED_UNASSIGNED,		/* Q */
    /*  82 */	VI_REPLACE_MODE,	/* R */
    /*  83 */	VI_SUBSTITUTE_LINE,	/* S */
    /*  84 */	VI_TO_PREV_CHAR,	/* T */
    /*  85 */	ED_UNASSIGNED,		/* U */
    /*  86 */	ED_UNASSIGNED,		/* V */
    /*  87 */	VI_NEXT_SPACE_WORD,	/* W */
    /*  88 */	ED_DELETE_PREV_CHAR,	/* X */
    /*  89 */	ED_UNASSIGNED,		/* Y */
    /*  90 */	ED_UNASSIGNED,		/* Z */
    /*  91 */	ED_SEQUENCE_LEAD_IN,	/* [ */
    /*  92 */	ED_UNASSIGNED,		/* \ */
    /*  93 */	ED_UNASSIGNED,		/* ] */
    /*  94 */	ED_MOVE_TO_BEG,		/* ^ */
    /*  95 */	ED_UNASSIGNED,		/* _ */
    /*  96 */	ED_UNASSIGNED,		/* ` */
    /*  97 */	VI_ADD,			/* a */
    /*  98 */	VI_PREV_WORD,		/* b */
    /*  99 */	VI_CHANGE_META,		/* c */
    /* 100 */	VI_DELETE_META,		/* d */
    /* 101 */	VI_END_WORD,		/* e */
    /* 102 */	VI_NEXT_CHAR,		/* f */
    /* 103 */	ED_UNASSIGNED,		/* g */
    /* 104 */	ED_PREV_CHAR,		/* h */
    /* 105 */	VI_INSERT,		/* i */
    /* 106 */	ED_NEXT_HISTORY,	/* j */
    /* 107 */	ED_PREV_HISTORY,	/* k */
    /* 108 */	ED_NEXT_CHAR,		/* l */
    /* 109 */	ED_UNASSIGNED,		/* m */
    /* 110 */	VI_REPEAT_SEARCH_NEXT,	/* n */
    /* 111 */	ED_UNASSIGNED,		/* o */
    /* 112 */	VI_PASTE_NEXT,		/* p */
    /* 113 */	ED_UNASSIGNED,		/* q */
    /* 114 */	VI_REPLACE_CHAR,	/* r */
    /* 115 */	VI_SUBSTITUTE_CHAR,	/* s */
    /* 116 */	VI_TO_NEXT_CHAR,	/* t */
    /* 117 */	VI_UNDO,		/* u */
    /* 118 */	ED_UNASSIGNED,		/* v */
    /* 119 */	VI_NEXT_WORD,		/* w */
    /* 120 */	ED_DELETE_NEXT_CHAR,	/* x */
    /* 121 */	ED_UNASSIGNED,		/* y */
    /* 122 */	ED_UNASSIGNED,		/* z */
    /* 123 */	ED_UNASSIGNED,		/* { */
    /* 124 */	ED_UNASSIGNED,		/* | */
    /* 125 */	ED_UNASSIGNED,		/* } */
    /* 126 */	VI_CHANGE_CASE,		/* ~ */
    /* 127 */	ED_DELETE_PREV_CHAR,	/* ^? */
    /* 128 */	ED_UNASSIGNED,		/* M-^@@ */
    /* 129 */	ED_UNASSIGNED,		/* M-^A */
    /* 130 */	ED_UNASSIGNED,		/* M-^B */
    /* 131 */	ED_UNASSIGNED,		/* M-^C */
    /* 132 */	ED_UNASSIGNED,		/* M-^D */
    /* 133 */	ED_UNASSIGNED,		/* M-^E */
    /* 134 */	ED_UNASSIGNED,		/* M-^F */
    /* 135 */	ED_UNASSIGNED,		/* M-^G */
    /* 136 */	ED_UNASSIGNED,		/* M-^H */
    /* 137 */	ED_UNASSIGNED,		/* M-^I */
    /* 138 */	ED_UNASSIGNED,		/* M-^J */
    /* 139 */	ED_UNASSIGNED,		/* M-^K */
    /* 140 */	ED_UNASSIGNED,		/* M-^L */
    /* 141 */	ED_UNASSIGNED,		/* M-^M */
    /* 142 */	ED_UNASSIGNED,		/* M-^N */
    /* 143 */	ED_UNASSIGNED,		/* M-^O */
    /* 144 */	ED_UNASSIGNED,		/* M-^P */
    /* 145 */	ED_UNASSIGNED,		/* M-^Q */
    /* 146 */	ED_UNASSIGNED,		/* M-^R */
    /* 147 */	ED_UNASSIGNED,		/* M-^S */
    /* 148 */	ED_UNASSIGNED,		/* M-^T */
    /* 149 */	ED_UNASSIGNED,		/* M-^U */
    /* 150 */	ED_UNASSIGNED,		/* M-^V */
    /* 151 */	ED_UNASSIGNED,		/* M-^W */
    /* 152 */	ED_UNASSIGNED,		/* M-^X */
    /* 153 */	ED_UNASSIGNED,		/* M-^Y */
    /* 154 */	ED_UNASSIGNED,		/* M-^Z */
    /* 155 */	ED_UNASSIGNED,		/* M-^[ */
    /* 156 */	ED_UNASSIGNED,		/* M-^\ */
    /* 157 */	ED_UNASSIGNED,		/* M-^] */
    /* 158 */	ED_UNASSIGNED,		/* M-^^ */
    /* 159 */	ED_UNASSIGNED,		/* M-^_ */
    /* 160 */	ED_UNASSIGNED,		/* M-SPACE */
    /* 161 */	ED_UNASSIGNED,		/* M-! */
    /* 162 */	ED_UNASSIGNED,		/* M-" */
    /* 163 */	ED_UNASSIGNED,		/* M-# */
    /* 164 */	ED_UNASSIGNED,		/* M-$ */
    /* 165 */	ED_UNASSIGNED,		/* M-% */
    /* 166 */	ED_UNASSIGNED,		/* M-& */
    /* 167 */	ED_UNASSIGNED,		/* M-' */
    /* 168 */	ED_UNASSIGNED,		/* M-( */
    /* 169 */	ED_UNASSIGNED,		/* M-) */
    /* 170 */	ED_UNASSIGNED,		/* M-* */
    /* 171 */	ED_UNASSIGNED,		/* M-+ */
    /* 172 */	ED_UNASSIGNED,		/* M-, */
    /* 173 */	ED_UNASSIGNED,		/* M-- */
    /* 174 */	ED_UNASSIGNED,		/* M-. */
    /* 175 */	ED_UNASSIGNED,		/* M-/ */
    /* 176 */	ED_UNASSIGNED,		/* M-0 */
    /* 177 */	ED_UNASSIGNED,		/* M-1 */
    /* 178 */	ED_UNASSIGNED,		/* M-2 */
    /* 179 */	ED_UNASSIGNED,		/* M-3 */
    /* 180 */	ED_UNASSIGNED,		/* M-4 */
    /* 181 */	ED_UNASSIGNED,		/* M-5 */
    /* 182 */	ED_UNASSIGNED,		/* M-6 */
    /* 183 */	ED_UNASSIGNED,		/* M-7 */
    /* 184 */	ED_UNASSIGNED,		/* M-8 */
    /* 185 */	ED_UNASSIGNED,		/* M-9 */
    /* 186 */	ED_UNASSIGNED,		/* M-: */
    /* 187 */	ED_UNASSIGNED,		/* M-; */
    /* 188 */	ED_UNASSIGNED,		/* M-< */
    /* 189 */	ED_UNASSIGNED,		/* M-= */
    /* 190 */	ED_UNASSIGNED,		/* M-> */
    /* 191 */	ED_UNASSIGNED,		/* M-? */
    /* 192 */	ED_UNASSIGNED,		/* M-@@ */
    /* 193 */	ED_UNASSIGNED,		/* M-A */
    /* 194 */	ED_UNASSIGNED,		/* M-B */
    /* 195 */	ED_UNASSIGNED,		/* M-C */
    /* 196 */	ED_UNASSIGNED,		/* M-D */
    /* 197 */	ED_UNASSIGNED,		/* M-E */
    /* 198 */	ED_UNASSIGNED,		/* M-F */
    /* 199 */	ED_UNASSIGNED,		/* M-G */
    /* 200 */	ED_UNASSIGNED,		/* M-H */
    /* 201 */	ED_UNASSIGNED,		/* M-I */
    /* 202 */	ED_UNASSIGNED,		/* M-J */
    /* 203 */	ED_UNASSIGNED,		/* M-K */
    /* 204 */	ED_UNASSIGNED,		/* M-L */
    /* 205 */	ED_UNASSIGNED,		/* M-M */
    /* 206 */	ED_UNASSIGNED,		/* M-N */
    /* 207 */	ED_SEQUENCE_LEAD_IN,	/* M-O */
    /* 208 */	ED_UNASSIGNED,		/* M-P */
    /* 209 */	ED_UNASSIGNED,		/* M-Q */
    /* 210 */	ED_UNASSIGNED,		/* M-R */
    /* 211 */	ED_UNASSIGNED,		/* M-S */
    /* 212 */	ED_UNASSIGNED,		/* M-T */
    /* 213 */	ED_UNASSIGNED,		/* M-U */
    /* 214 */	ED_UNASSIGNED,		/* M-V */
    /* 215 */	ED_UNASSIGNED,		/* M-W */
    /* 216 */	ED_UNASSIGNED,		/* M-X */
    /* 217 */	ED_UNASSIGNED,		/* M-Y */
    /* 218 */	ED_UNASSIGNED,		/* M-Z */
    /* 219 */	ED_SEQUENCE_LEAD_IN,	/* M-[ */
    /* 220 */	ED_UNASSIGNED,		/* M-\ */
    /* 221 */	ED_UNASSIGNED,		/* M-] */
    /* 222 */	ED_UNASSIGNED,		/* M-^ */
    /* 223 */	ED_UNASSIGNED,		/* M-_ */
    /* 224 */	ED_UNASSIGNED,		/* M-` */
    /* 225 */	ED_UNASSIGNED,		/* M-a */
    /* 226 */	ED_UNASSIGNED,		/* M-b */
    /* 227 */	ED_UNASSIGNED,		/* M-c */
    /* 228 */	ED_UNASSIGNED,		/* M-d */
    /* 229 */	ED_UNASSIGNED,		/* M-e */
    /* 230 */	ED_UNASSIGNED,		/* M-f */
    /* 231 */	ED_UNASSIGNED,		/* M-g */
    /* 232 */	ED_UNASSIGNED,		/* M-h */
    /* 233 */	ED_UNASSIGNED,		/* M-i */
    /* 234 */	ED_UNASSIGNED,		/* M-j */
    /* 235 */	ED_UNASSIGNED,		/* M-k */
    /* 236 */	ED_UNASSIGNED,		/* M-l */
    /* 237 */	ED_UNASSIGNED,		/* M-m */
    /* 238 */	ED_UNASSIGNED,		/* M-n */
    /* 239 */	ED_UNASSIGNED,		/* M-o */
    /* 240 */	ED_UNASSIGNED,		/* M-p */
    /* 241 */	ED_UNASSIGNED,		/* M-q */
    /* 242 */	ED_UNASSIGNED,		/* M-r */
    /* 243 */	ED_UNASSIGNED,		/* M-s */
    /* 244 */	ED_UNASSIGNED,		/* M-t */
    /* 245 */	ED_UNASSIGNED,		/* M-u */
    /* 246 */	ED_UNASSIGNED,		/* M-v */
    /* 247 */	ED_UNASSIGNED,		/* M-w */
    /* 248 */	ED_UNASSIGNED,		/* M-x */
    /* 249 */	ED_UNASSIGNED,		/* M-y */
    /* 250 */	ED_UNASSIGNED,		/* M-z */
    /* 251 */	ED_UNASSIGNED,		/* M-{ */
    /* 252 */	ED_UNASSIGNED,		/* M-| */
    /* 253 */	ED_UNASSIGNED,		/* M-} */
    /* 254 */	ED_UNASSIGNED,		/* M-~ */
    /* 255 */	ED_UNASSIGNED		/* M-^? */
d894 1
a894 2
map_init(el)
    EditLine *el;
d896 4
a899 4
    
    /*
     * Make sure those are correct before starting.
     */
d901 6
a906 6
    if (sizeof(el_map_emacs)      != N_KEYS * sizeof(el_action_t))
	abort();
    if (sizeof(el_map_vi_command) != N_KEYS * sizeof(el_action_t))
	abort();
    if (sizeof(el_map_vi_insert)  != N_KEYS * sizeof(el_action_t))
	abort();
d909 21
a929 12
    el->el_map.alt   = (el_action_t *) el_malloc(sizeof(el_action_t) * N_KEYS);
    el->el_map.key   = (el_action_t *) el_malloc(sizeof(el_action_t) * N_KEYS);
    el->el_map.emacs = el_map_emacs;
    el->el_map.vic   = el_map_vi_command;
    el->el_map.vii   = el_map_vi_insert;
    el->el_map.help  = (el_bindings_t *) el_malloc(sizeof(el_bindings_t) *
						   EL_NUM_FCNS);
    (void)memcpy(el->el_map.help, help__get(), 
		  sizeof(el_bindings_t) * EL_NUM_FCNS);
    el->el_map.func  = (el_func_t *) el_malloc(sizeof(el_func_t) * EL_NUM_FCNS);
    memcpy(el->el_map.func, func__get(), sizeof(el_func_t) * EL_NUM_FCNS);
    el->el_map.nfunc = EL_NUM_FCNS;
d932 1
a932 1
    map_init_vi(el);
d934 1
a934 1
    map_init_emacs(el);
d936 1
a936 1
    return 0;
d944 1
a944 2
map_end(el)
    EditLine *el;
d946 12
a957 11
    el_free((ptr_t) el->el_map.alt);
    el->el_map.alt   = NULL;
    el_free((ptr_t) el->el_map.key);
    el->el_map.key   = NULL;
    el->el_map.emacs = NULL;
    el->el_map.vic   = NULL;
    el->el_map.vii   = NULL;
    el_free((ptr_t) el->el_map.help);
    el->el_map.help  = NULL;
    el_free((ptr_t) el->el_map.func);
    el->el_map.func  = NULL;
d965 1
a965 2
map_init_nls(el)
    EditLine *el;
d967 3
a969 2
    int i;
    el_action_t *map = el->el_map.key;
d971 3
a973 3
    for (i = 0200; i <= 0377; i++) 
	if (isprint(i)) 
	    map[i] = ED_INSERT;
d981 1
a981 2
map_init_meta(el)
    EditLine *el;
d983 8
a990 11
    unsigned char buf[3];
    register int i;
    el_action_t *map = el->el_map.key;
    el_action_t *alt = el->el_map.alt;

    for (i = 0; i <= 0377 && map[i] != EM_META_NEXT; i++)
	continue;

    if (i > 0377) {
	for (i = 0; i <= 0377 && alt[i] != EM_META_NEXT; i++)
	    continue;
d992 8
a999 19
	    i = 033;
	    if (el->el_map.type == MAP_VI)
		map = alt;
	}
	else 
	    map = alt;
    }
    buf[0] = (unsigned char) i;
    buf[2] = 0;
    for (i = 0200; i <= 0377; i++) 
	switch (map[i]) {
	case ED_INSERT:
	case ED_UNASSIGNED:
	case ED_SEQUENCE_LEAD_IN:
	    break;
	default:
	    buf[1] = i & 0177;
	    key_add(el, buf, key_map_cmd(el, (int) map[i]), XK_CMD);
	    break;
d1001 14
a1014 1
    map[buf[0]] = ED_SEQUENCE_LEAD_IN;
d1022 1
a1022 2
map_init_vi(el)
    EditLine *el;
d1024 15
a1038 15
    register int i;
    el_action_t *key = el->el_map.key;
    el_action_t *alt = el->el_map.alt;
    el_action_t *vii = el->el_map.vii;
    el_action_t *vic = el->el_map.vic;

    el->el_map.type = MAP_VI;
    el->el_map.current = el->el_map.key;

    key_reset(el);

    for (i = 0; i < N_KEYS; i++) {
	key[i] = vii[i];
	alt[i] = vic[i];
    }
d1040 1
a1040 3
    map_init_meta(el);
#ifdef notyet
    if (0 /* XXX: USER has set LC_CTYPE */)
a1041 1
#endif
d1043 2
a1044 2
    tty_bind_char(el, 1);
    term_bind_arrow(el);
d1052 1
a1052 2
map_init_emacs(el)
    EditLine *el;
d1054 14
a1067 14
    int i;
    char    buf[3];
    el_action_t *key   = el->el_map.key;
    el_action_t *alt   = el->el_map.alt;
    el_action_t *emacs = el->el_map.emacs;

    el->el_map.type = MAP_EMACS;
    el->el_map.current = el->el_map.key;
    key_reset(el);

    for (i = 0; i < N_KEYS; i++) {
	key[i] = emacs[i];
	alt[i] = ED_UNASSIGNED;
    }
d1069 1
a1069 3
    map_init_meta(el);
#ifdef notyet
    if (0 /* XXX: USER has set LC_CTYPE */)
a1070 2
#endif
    map_init_nls(el);
d1072 7
a1078 7
    buf[0] = CONTROL('X');
    buf[1] = CONTROL('X');
    buf[2] = 0;
    key_add(el, buf, key_map_cmd(el, EM_EXCHANGE_MARK), XK_CMD);
    
    tty_bind_char(el, 1);
    term_bind_arrow(el);
d1083 1
a1083 1
 *	Set the editor 
d1086 1
a1086 3
map_set_editor(el, editor)
    EditLine *el;
    char *editor;
d1088 31
a1118 9
    if (strcmp(editor, "emacs") == 0) {
	map_init_emacs(el);
	return 0;
    }
    if (strcmp(editor, "vi") == 0) {
	map_init_vi(el);
	return 0;
    }
    return -1;
d1126 1
a1126 4
map_print_key(el, map, in)
    EditLine *el;
    el_action_t *map;
    char *in;
d1128 2
a1129 2
    char outbuf[EL_BUFSIZ];
    el_bindings_t *bp;
d1131 10
a1140 11
    if (in[0] == '\0' || in[1] == '\0') {
	(void)key__decode_str(in, outbuf, "");
	for (bp = el->el_map.help; bp->name != NULL; bp++)
	    if (bp->func == map[(unsigned char) *in]) {
		(void)fprintf(el->el_outfile, 
			       "%s\t->\t%s\n", outbuf, bp->name);
		return;
	    }
    }
    else 
	key_print(el, in);
d1148 1
a1148 4
map_print_some_keys(el, map, first, last)
    EditLine *el;
    el_action_t *map;
    int     first, last;
d1150 41
a1190 11
    el_bindings_t *bp;
    char    firstbuf[2], lastbuf[2];
    char unparsbuf[EL_BUFSIZ], extrabuf[EL_BUFSIZ];

    firstbuf[0] = first;
    firstbuf[1] = 0;
    lastbuf[0] = last;
    lastbuf[1] = 0;
    if (map[first] == ED_UNASSIGNED) {
	if (first == last)
	    (void)fprintf(el->el_outfile, "%-15s->  is undefined\n",
d1192 2
a1193 17
	return;
    }

    for (bp = el->el_map.help; bp->name != NULL; bp++) {
	if (bp->func == map[first]) {
	    if (first == last) {
		(void)fprintf(el->el_outfile, "%-15s->  %s\n",
			       key__decode_str(firstbuf, unparsbuf, STRQQ), 
			       bp->name);
	    }
	    else {
		(void)fprintf(el->el_outfile, "%-4s to %-7s->  %s\n",
			       key__decode_str(firstbuf, unparsbuf, STRQQ),
			       key__decode_str(lastbuf, extrabuf, STRQQ), 
			       bp->name);
	    }
	    return;
a1194 14
    }
#ifdef MAP_DEBUG
    if (map == el->el_map.key) {
	(void)fprintf(el->el_outfile, "BUG!!! %s isn't bound to anything.\n",
		       key__decode_str(firstbuf, unparsbuf, STRQQ));
	(void)fprintf(el->el_outfile, "el->el_map.key[%d] == %d\n", 
		       first, el->el_map.key[first]);
    }
    else {
	(void)fprintf(el->el_outfile, "BUG!!! %s isn't bound to anything.\n",
		       key__decode_str(firstbuf, unparsbuf, STRQQ));
	(void)fprintf(el->el_outfile, "el->el_map.alt[%d] == %d\n", 
		       first, el->el_map.alt[first]);
    }
d1196 1
a1196 1
    abort();
d1204 1
a1204 2
map_print_all_keys(el)
    EditLine *el;
d1206 1
a1206 1
    int     prev, i;
d1208 8
a1215 5
    (void)fprintf(el->el_outfile, "Standard key bindings\n");
    prev = 0;
    for (i = 0; i < N_KEYS; i++) {
	if (el->el_map.key[prev] == el->el_map.key[i])
	    continue;
d1217 9
a1225 9
	prev = i;
    }
    map_print_some_keys(el, el->el_map.key, prev, i - 1);

    (void)fprintf(el->el_outfile, "Alternative key bindings\n");
    prev = 0;
    for (i = 0; i < N_KEYS; i++) {
	if (el->el_map.alt[prev] == el->el_map.alt[i])
	    continue;
d1227 5
a1231 8
	prev = i;
    }
    map_print_some_keys(el, el->el_map.alt, prev, i - 1);

    (void)fprintf(el->el_outfile, "Multi-character bindings\n");
    key_print(el, "");
    (void)fprintf(el->el_outfile, "Arrow key bindings\n");
    term_print_arrow(el, "");
d1239 1
a1239 4
map_bind(el, argc, argv)
    EditLine *el;
    int argc;
    char **argv;
d1241 27
a1267 27
    el_action_t *map;
    int     ntype, remove;
    char   *p;
    char    inbuf[EL_BUFSIZ];
    char    outbuf[EL_BUFSIZ];
    char   *in = NULL;
    char   *out = NULL;
    el_bindings_t *bp;
    int     cmd;
    int	    key;

    if (argv == NULL)
	return -1;

    map = el->el_map.key;
    ntype = XK_CMD;
    key = remove = 0;
    for (argc = 1; (p = argv[argc]) != NULL; argc++)
	if (p[0] == '-')
	    switch (p[1]) {
	    case 'a':
		map = el->el_map.alt;
		break;

	    case 's':
		ntype = XK_STR;
		break;
d1269 3
a1271 3
	    case 'c':
		ntype = XK_EXE;
		break;
d1273 55
a1327 40
	    case 'k':
		key = 1;
		break;

	    case 'r':
		remove = 1;
		break;

	    case 'v':
		map_init_vi(el);
		return 0;

	    case 'e':
		map_init_emacs(el);
		return 0;

	    case 'l':
		for (bp = el->el_map.help; bp->name != NULL; bp++) 
		    (void)fprintf(el->el_outfile, "%s\n\t%s\n", 
				   bp->name, bp->description);
		return 0;
	    default:
		(void)fprintf(el->el_errfile, "%s: Invalid switch `%c'.\n",
			       argv[0], p[1]);
	    }
	else
	    break;

    if (argv[argc] == NULL) {
	map_print_all_keys(el);
	return 0;
    }

    if (key)
	in = argv[argc++];
    else
	if ((in = parse__string(inbuf, argv[argc++])) == NULL) {
	    (void)fprintf(el->el_errfile, "%s: Invalid \\ or ^ in instring.\n",
			   argv[0]);
	    return -1;
d1329 6
a1334 5

    if (remove) {
	if (key) {
	    (void)term_clear_arrow(el, in);
	    return -1;
a1335 17
	if (in[1]) 
	    (void)key_delete(el, in);
	else if (map[(unsigned char) *in] == ED_SEQUENCE_LEAD_IN) 
	    (void)key_delete(el, in);
	else 
	    map[(unsigned char) *in] = ED_UNASSIGNED;
	return 0;
    }

    if (argv[argc] == NULL) {
	if (key)
	    term_print_arrow(el, in);
	else
	    map_print_key(el, map, in);
	return 0;
    }

d1337 4
a1340 4
    if (argv[argc + 1] != NULL) {
	bindkey_usage();
	return -1;
    }
d1343 12
a1354 26
    switch (ntype) {
    case XK_STR:
    case XK_EXE:
	if ((out = parse__string(outbuf, argv[argc])) == NULL) {
	    (void)fprintf(el->el_errfile, 
			   "%s: Invalid \\ or ^ in outstring.\n", argv[0]);
	    return -1;
	}
	if (key)
	    term_set_arrow(el, in, key_map_str(el, out), ntype);
	else
	    key_add(el, in, key_map_str(el, out), ntype);
	map[(unsigned char) *in] = ED_SEQUENCE_LEAD_IN;
	break;

    case XK_CMD:
	if ((cmd = parse_cmd(el, argv[argc])) == -1) {
	    (void)fprintf(el->el_errfile, 
			   "%s: Invalid command `%s'.\n", argv[0], argv[argc]);
	    return -1;
	}
	if (key)
	    term_set_arrow(el, in, key_map_str(el, out), ntype);
	else {
	    if (in[1]) {
		key_add(el, in, key_map_cmd(el, cmd), ntype);
d1356 24
a1379 5
	    }
	    else  {
		key_clear(el, map, in);
		map[(unsigned char) *in] = cmd;
	    }
d1381 1
a1381 7
	break;

    default:
	abort();
	break;
    }
    return 0;
d1389 1
a1389 5
map_addfunc(el, name, help, func)
    EditLine *el;
    const char *name;
    const char *help;
    el_func_t func;
d1391 22
a1412 21
    void *p;
    int nf = el->el_map.nfunc + 2;
    if (name == NULL || help == NULL || func == NULL)
	return -1;

    if ((p = el_realloc(el->el_map.func, nf * sizeof(el_func_t))) == NULL)
	return -1;
    el->el_map.func = (el_func_t *) p;

    if ((p = el_realloc(el->el_map.help, nf * sizeof(el_bindings_t))) == NULL)
	return -1;
    el->el_map.help = (el_bindings_t *) p;

    nf = el->el_map.nfunc;
    el->el_map.func[nf] = func;

    el->el_map.help[nf].name = name;
    el->el_map.help[nf].func = nf;
    el->el_map.help[nf].description = help;
    el->el_map.help[++nf].name = NULL;
    el->el_map.nfunc++;
d1414 1
a1414 1
    return 0;
@


1.7
log
@is -Wall clean by making rcsid const
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.6 2002/02/16 21:27:26 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: map.c,v 1.6 2002/02/16 21:27:26 millert Exp $";
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.5 2001/04/13 20:35:19 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: map.c,v 1.5 2001/04/13 20:35:19 millert Exp $";
@


1.5
log
@Another case where we need to use u_char, not char for array
subscripts to avoid buf[-1] problems.
Also add a missing include of unistd.h.  OK'd by Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.4 1998/08/16 20:24:53 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: map.c,v 1.4 1998/08/16 20:24:53 millert Exp $";
d57 5
a61 5
private void map_print_key	 __P((EditLine *, el_action_t *, char *));
private void map_print_some_keys __P((EditLine *, el_action_t *, int, int));
private void map_print_all_keys	 __P((EditLine *));
private void map_init_nls 	 __P((EditLine *));
private void map_init_meta	 __P((EditLine *));
@


1.4
log
@deal with realloc/malloc failure and don't trash old pointer if realloc fails
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.3 1997/03/14 05:12:54 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: map.c,v 1.3 1997/03/14 05:12:54 millert Exp $";
d971 1
a971 1
    char    buf[3];
d990 1
a990 1
    buf[0] = (char) i;
@


1.3
log
@fix el_source() - a block needed braces around it (from NetBSD)
Some strcpy() -> strncpy (from NetBSD)
Some KNF
Add current NetBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.2 1997/01/16 05:18:38 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: map.c,v 1.2 1997/01/16 05:18:38 millert Exp $";
d1385 1
d1390 7
a1396 4
    el->el_map.func = (el_func_t *) 
		el_realloc(el->el_map.func, nf * sizeof(el_func_t));
    el->el_map.help = (el_bindings_t *)
		el_realloc(el->el_map.help, nf * sizeof(el_bindings_t));
@


1.2
log
@Merge in NetBSD libedit changes and new man pages.  Also fix some
strncpy() usage in their code.  NetBSD change log was:
    * add a man page for the editline routines
    * add a man page describing editrc
    * fix bugs in el_parse():
      * didn't execute command when program name matched (test reversed)
      * was checking against empty string instead of program name
      * after checks, command to run also pointed to empty string
    * document ^char and \ escape sequences
    * when parsing ^char control chars, check the correct char when determining
      validity (previously, ^char was a NOP interpreted as the literal string
      because of this bug)
    * Implement CC_REDISPLAY, which (unlike CC_REFRESH) redraws the entire input
    * line (a la ^R). This is useful if the binding outputs information and
    * mucks up the input line. To be used in ``list-choices'' bindings (refer
    * to the ^D binding in csh when filec is set)
@
text
@d1 2
a2 1
/*	$OpenBSD: $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: $";
d912 1
a912 1
    (void) memcpy(el->el_map.help, help__get(), 
d1113 1
a1113 1
	(void) key__decode_str(in, outbuf, "");
d1116 1
a1116 1
		(void) fprintf(el->el_outfile, 
d1145 1
a1145 1
	    (void) fprintf(el->el_outfile, "%-15s->  is undefined\n",
d1153 1
a1153 1
		(void) fprintf(el->el_outfile, "%-15s->  %s\n",
d1158 1
a1158 1
		(void) fprintf(el->el_outfile, "%-4s to %-7s->  %s\n",
d1168 1
a1168 1
	(void) fprintf(el->el_outfile, "BUG!!! %s isn't bound to anything.\n",
d1170 1
a1170 1
	(void) fprintf(el->el_outfile, "el->el_map.key[%d] == %d\n", 
d1174 1
a1174 1
	(void) fprintf(el->el_outfile, "BUG!!! %s isn't bound to anything.\n",
d1176 1
a1176 1
	(void) fprintf(el->el_outfile, "el->el_map.alt[%d] == %d\n", 
d1193 1
a1193 1
    (void) fprintf(el->el_outfile, "Standard key bindings\n");
d1203 1
a1203 1
    (void) fprintf(el->el_outfile, "Alternative key bindings\n");
d1213 1
a1213 1
    (void) fprintf(el->el_outfile, "Multi-character bindings\n");
d1215 1
a1215 1
    (void) fprintf(el->el_outfile, "Arrow key bindings\n");
d1279 1
a1279 1
		    (void) fprintf(el->el_outfile, "%s\n\t%s\n", 
d1283 1
a1283 1
		(void) fprintf(el->el_errfile, "%s: Invalid switch `%c'.\n",
d1298 1
a1298 1
	    (void) fprintf(el->el_errfile, "%s: Invalid \\ or ^ in instring.\n",
d1305 1
a1305 1
	    (void) term_clear_arrow(el, in);
d1309 1
a1309 1
	    (void) key_delete(el, in);
d1311 1
a1311 1
	    (void) key_delete(el, in);
d1336 1
a1336 1
	    (void) fprintf(el->el_errfile, 
d1349 1
a1349 1
	    (void) fprintf(el->el_errfile, 
@


1.1
log
@Initial revision
@
text
@d1 2
d40 1
d42 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
