head	1.22;
access;
symbols
	OPENBSD_6_2:1.22.0.8
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.6
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.16
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.24
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.26
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.22
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.20
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.26
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.24
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.22
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.20
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2016.05.25.09.23.49;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	8uuGVizA1k3gmrdl;

1.21
date	2016.05.20.15.30.17;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	FRyPaNIGw56FlvYt;

1.20
date	2016.05.06.13.12.52;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	HmIy04UbyUS0d1Sd;

1.19
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	OUneMOe0l7HombT5;

1.18
date	2016.04.09.19.31.55;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	t22PDRfkb5DJX3rc;

1.17
date	2016.03.21.17.28.10;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	bxfYrS2VROPyQgXw;

1.16
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	tRHhB2RN3ZD1GvoI;

1.15
date	2016.03.20.23.24.18;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	1kXRbplx2L28TTGX;

1.14
date	2016.03.20.22.57.59;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	VBVmrUoZFnMc0hts;

1.13
date	2016.03.20.19.33.16;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	QfpWh7MIpK70Anq8;

1.12
date	2016.01.30.00.06.39;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	tGf8IdK8wCurneJ7;

1.11
date	2016.01.29.19.32.33;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	Ue1IcMCqgxm4S8jQ;

1.10
date	2016.01.29.17.23.21;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	MOfHvqt1MJvqXmCY;

1.9
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	bdUOvGFxUQgqZg7x;

1.8
date	2011.07.07.05.40.42;	author okan;	state Exp;
branches;
next	1.7;

1.7
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.25.20.12.38;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.31.08.42.24;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.14.05.12.46;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.16.05.18.32;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Saving errno in el_errno is only needed for one purpose:
Restoring the original errno found in el_wgetc() after
el_wgets() did some cleanup that may have changed errno.

Improve clarity and robustness of the code by not setting and
inspecting el_errno where it isn't needed; in particular, let
keymacro_get() properly report read failure to read_getcmd().
Move el_errno to el_read_t because it's only used in read.c.
Never set errno back to zero.

Checked with a test program installing a USR1 signal handler
without SA_RESTART, for the cases read_getcmd(), ed_quoted_insert(),
keymacro_get(), ed_command(), and EL_EDITMODE=0.

OK czarkoff@@
@
text
@/*	$OpenBSD: el.h,v 1.21 2016/05/20 15:30:17 schwarze Exp $	*/
/*	$NetBSD: el.h,v 1.37 2016/04/18 17:01:19 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)el.h	8.1 (Berkeley) 6/4/93
 */

/*
 * el.h: Internal structures.
 */
#ifndef _h_el
#define	_h_el
/*
 * Local defaults
 */
#define	KSHVI
#define	VIDEFAULT
#define	ANCHOR

#include "histedit.h"
#include "chartype.h"

#define	EL_BUFSIZ	1024		/* Maximum line size		*/

#define	HANDLE_SIGNALS	0x01
#define	NO_TTY		0x02
#define	EDIT_DISABLED	0x04
#define	UNBUFFERED	0x08
#define	CHARSET_IS_UTF8 0x10
#define	NARROW_HISTORY	0x40

typedef unsigned char el_action_t;	/* Index to command array	*/

typedef struct coord_t {		/* Position on the screen	*/
	int	h;
	int	v;
} coord_t;

typedef struct el_line_t {
	wchar_t		*buffer;	/* Input line			*/
	wchar_t	        *cursor;	/* Cursor position		*/
	wchar_t	        *lastchar;	/* Last character		*/
	const wchar_t	*limit;		/* Max position			*/
} el_line_t;

/*
 * Editor state
 */
typedef struct el_state_t {
	int		inputmode;	/* What mode are we in?		*/
	int		doingarg;	/* Are we getting an argument?	*/
	int		argument;	/* Numeric argument		*/
	int		metanext;	/* Is the next char a meta char */
	el_action_t	lastcmd;	/* Previous command		*/
	el_action_t	thiscmd;	/* this command			*/
	wchar_t		thisch;		/* char that generated it	*/
} el_state_t;

#include "tty.h"
#include "prompt.h"
#include "keymacro.h"
#include "terminal.h"
#include "refresh.h"
#include "chared.h"
#include "search.h"
#include "hist.h"
#include "map.h"
#include "sig.h"

struct el_read_t;

struct editline {
	wchar_t		 *el_prog;	/* the program name		*/
	FILE		 *el_infile;	/* Stdio stuff			*/
	FILE		 *el_outfile;	/* Stdio stuff			*/
	FILE		 *el_errfile;	/* Stdio stuff			*/
	int		  el_infd;	/* Input file descriptor	*/
	int		  el_outfd;	/* Output file descriptor	*/
	int		  el_errfd;	/* Error file descriptor	*/
	int		  el_flags;	/* Various flags.		*/
	coord_t		  el_cursor;	/* Cursor location		*/
	wchar_t		**el_display;	/* Real screen image = what is there */
	wchar_t		**el_vdisplay;	/* Virtual screen image = what we see */
	void		 *el_data;	/* Client data			*/
	el_line_t	  el_line;	/* The current line information	*/
	el_state_t	  el_state;	/* Current editor state		*/
	el_terminal_t	  el_terminal;	/* Terminal dependent stuff	*/
	el_tty_t	  el_tty;	/* Tty dependent stuff		*/
	el_refresh_t	  el_refresh;	/* Refresh stuff		*/
	el_prompt_t	  el_prompt;	/* Prompt stuff			*/
	el_prompt_t	  el_rprompt;	/* Prompt stuff			*/
	el_chared_t	  el_chared;	/* Characted editor stuff	*/
	el_map_t	  el_map;	/* Key mapping stuff		*/
	el_keymacro_t	  el_keymacro;	/* Key binding stuff		*/
	el_history_t	  el_history;	/* History stuff		*/
	el_search_t	  el_search;	/* Search stuff			*/
	el_signal_t	  el_signal;	/* Signal handling stuff	*/
	struct el_read_t *el_read;	/* Character reading stuff	*/
	ct_buffer_t       el_scratch;   /* Scratch conversion buffer    */
	ct_buffer_t       el_lgcyconv;  /* Buffer for legacy wrappers   */
	LineInfo          el_lgcylinfo; /* Legacy LineInfo buffer       */
};

protected int	el_editmode(EditLine *, int, const wchar_t **);

#ifdef DEBUG
#define	EL_ABORT(a)	do { \
				fprintf(el->el_errfile, "%s, %d: ", \
					 __FILE__, __LINE__); \
				fprintf a; \
				abort(); \
			} while( /*CONSTCOND*/0);
#else
#define EL_ABORT(a)	abort()
#endif
#endif /* _h_el */
@


1.21
log
@Move the declaration of the function pointer type el_rfunc_t
from the private header "read.h" to the public header <histedit.h>.
That's not an interface change, it was already used and documented
publicly, merely not properly declared.

Improve encapsulation: Make el_read a pointer to an opaque struct
in struct editline, such that "read.h" no longer needs to be included
from "el.h" but only from the two files using it, read.c and el.c.
Only pass the required el_read_t to el_read_{s,g}etfn(),
do not pass the full struct editline.

OK czarkoff@@,
also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.h,v 1.20 2016/05/06 13:12:52 schwarze Exp $	*/
a110 1
	int		  el_errno;	/* Local copy of errno		*/
@


1.20
log
@Replace the generated file "fcns.c" by a simpler header "func.h"
included only in the one file needing it, "map.c".
That allows to define el_action_t directly in "map.h",
which in turn allows to stop including "fcns.h" from "el.h"
and include it only in the modules needing it.
Now we no longer autogenerate any C files.

Feedback and OK martijn@@.
First version also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.h,v 1.19 2016/04/11 20:43:33 schwarze Exp $	*/
d99 2
a100 1
#include "read.h"
d129 1
a129 1
	el_read_t	  el_read;	/* Character reading stuff	*/
@


1.19
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 2
a2 2
/*	$OpenBSD: el.h,v 1.18 2016/04/09 19:31:55 schwarze Exp $	*/
/*	$NetBSD: el.h,v 1.36 2016/04/11 00:50:13 christos Exp $	*/
a96 1
#include "fcns.h"	/* el_func_t is needed for map.h */
@


1.18
log
@Always compile with WIDECHAR on and delete that preprocessor switch.
OK martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 2
a2 2
/*	$OpenBSD: el.h,v 1.17 2016/03/21 17:28:10 schwarze Exp $	*/
/*	$NetBSD: el.h,v 1.35 2016/03/23 22:27:48 christos Exp $	*/
d70 4
a73 4
	Char		*buffer;	/* Input line			*/
	Char	        *cursor;	/* Cursor position		*/
	Char	        *lastchar;	/* Last character		*/
	const Char	*limit;		/* Max position			*/
d86 1
a86 1
	Char		thisch;		/* char that generated it	*/
d103 1
a103 1
	Char		 *el_prog;	/* the program name		*/
d113 2
a114 2
	Char		**el_display;	/* Real screen image = what is there */
	Char		**el_vdisplay;	/* Virtual screen image = what we see */
d135 1
a135 1
protected int	el_editmode(EditLine *, int, const Char **);
@


1.17
log
@Make the read_char() function always take a wchar_t * argument.

On first sight, it might look as if this required a bump because
it seems to change the public type el_rfunc_t.  But we only compile
with WIDECHAR, and in that case, there is no change in the interface.

This also simplifies some logic by getting rid of the NARROW_READ flag
which was broken anyway.

OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: el.h,v 1.16 2016/03/20 23:48:27 schwarze Exp $	*/
/*	$NetBSD: el.h,v 1.34 2016/02/24 17:13:22 christos Exp $	*/
a129 1
#ifdef WIDECHAR
a132 1
#endif
@


1.16
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: el.h,v 1.15 2016/03/20 23:24:18 schwarze Exp $	*/
/*	$NetBSD: el.h,v 1.33 2016/02/17 19:47:49 christos Exp $	*/
a60 1
#define	NARROW_READ	0x80
@


1.15
log
@delete useless "typedef int bool_t", use int directly;
OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: el.h,v 1.14 2016/03/20 22:57:59 schwarze Exp $	*/
/*	$NetBSD: el.h,v 1.21 2009/12/31 15:58:26 christos Exp $	*/
a51 2
#include <stdio.h>
#include <sys/types.h>
d71 1
a71 1
	Char 		*buffer;	/* Input line			*/
d86 1
a86 1
	el_action_t	thiscmd;	/* this command 		*/
@


1.14
log
@Cleanup of private header inclusion:

1. Do not include private headers from "chared.h", "hist.h", "prompt.h",
"refresh.h", "search.h", "sig.h", "terminal.h", "tty.h".
The only private header having to include other private headers is "el.h".
2. Do not include "common.h", "parse.h", "help.h" from "el.h",
and do not include "emacs.h" and "vi.h" from "chared.h",
include them directly where needed.
3. Do include "fcns.h" from "el.h" because el_func_t is needed for "map.h".
4. Do not include private headers again that are already included by "el.h".
5. Include private headers after standard headers.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.h,v 1.13 2016/03/20 19:33:16 schwarze Exp $	*/
a63 2

typedef int bool_t;			/* True or not			*/
@


1.13
log
@Delete the weird IGNORE_EXTCHARS flag, simplifying the code
in the generic low-level function read_char().
Until we fully enable UTF-8 support, instead filter out non-ASCII
characters in the more logical place in the high-level function
el_gets(3).
OK czarkoff@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.h,v 1.12 2016/01/30 00:06:39 schwarze Exp $	*/
a99 1
#include "common.h"
d102 1
a103 1
#include "parse.h"
a104 1
#include "help.h"
@


1.12
log
@Third step in synching with NetBSD:
* rename fkey_t to funckey_t and el_term_t to el_terminal_t
* rename struct editline member el_term to el_terminal
* rename many functions in terminal.c from term_*() to terminal_*(),
for consistency with the file name and to not look related to <term.h>
No functional change.
This makes refresh.c and sig.c almost identical to the NetBSD versions.
It reduces the remaining diff from +2446 -1805 to +2053 -1420.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.h,v 1.11 2016/01/29 19:32:33 schwarze Exp $	*/
a61 1
#define	IGNORE_EXTCHARS 0x20            /* Ignore characters read > 0xff */
@


1.11
log
@Second step in synching with NetBSD:
* Rename some types from *key*_t to *keymacro*_t.
* Rename struct editline member el_key to el_keymacro.
* Rename some functions in keymacro.c from key*() to keymacro*().
This removes the conflict of key_clear(), key_end(), and key_print()
with macros in <term.h>.  No functional change.
This makes keymacro.h identical to the NetBSD version.
It reduces the remaining diff from +2640 -1998 to +2446 -1805.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.h,v 1.10 2016/01/29 17:23:21 schwarze Exp $	*/
d126 1
a126 1
	el_term_t	  el_term;	/* Terminal dependent stuff	*/
@


1.10
log
@Start synching with NetBSD:
Rename the files key.[hc] to keymacro.[hc] and term.[hc] to terminal.[hc].
The change makes sense because "term.h" conflicts with <term.h>
and the functions key_clear(), key_end(), and key_print() in "key.h"
conflict with macros in <term.h>.
No content change yet, no binary change in *.o after "strip -d".
This reduces the remaining diff from +4634 -3992 to +2640 -1998.
OK czarkoff@@, and mmcc@@ agrees with the direction.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.h,v 1.9 2014/10/17 06:07:50 deraadt Exp $	*/
d133 1
a133 1
	el_key_t	  el_key;	/* Key binding stuff		*/
@


1.9
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: el.h,v 1.8 2011/07/07 05:40:42 okan Exp $	*/
d97 2
a98 2
#include "key.h"
#include "term.h"
@


1.8
log
@sync with upstream, retaining local modifications.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.h,v 1.7 2010/06/30 00:05:35 nicm Exp $	*/
a93 7

/*
 * Until we come up with something better...
 */
#define	el_malloc(a)	malloc(a)
#define	el_realloc(a,b)	realloc(a, b)
#define	el_free(a)	free(a)
@


1.7
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d123 2
@


1.6
log
@Sync libedit to NetBSD libedit as of Nov 8, 2003.
Tested by jmc@@ djm@@ and myself
@
text
@d1 2
a2 2
/*	$OpenBSD: el.h,v 1.5 2003/10/31 08:42:24 otto Exp $	*/
/*	$NetBSD: el.h,v 1.16 2003/10/18 23:48:42 christos Exp $	*/
d50 2
d61 4
d76 4
a79 4
	char	*buffer;		/* Input line			*/
	char	*cursor;		/* Cursor position		*/
	char	*lastchar;		/* Last character		*/
	const char	*limit;		/* Max position			*/
d92 1
a92 1
	char		thisch;		/* char that generated it	*/
a97 1
#define	el_strdup(a)	strdup(a)
d118 2
a119 1
	char		 *el_prog;	/* the program name		*/
d124 1
d126 2
a127 2
	char		**el_display;	/* Real screen image = what is there */
	char		**el_vdisplay;	/* Virtual screen image = what we see */
d143 5
d150 1
a150 1
protected int	el_editmode(EditLine *, int, const char **);
@


1.5
log
@Update to NetBSD libedit (from Oct 1, 2003), adding some string
cleaning and history bug fixes. The code includes GNU libreadline
functionality, but the corresponding header files are not installed,
since some libreadline functions are missing. There are some minor API
changes, notably:

old: EditLine *el_init(const char *, FILE *, FILE *);
new: EditLine *el_init(const char *, FILE *, FILE *, FILE *);

old: HistEvent *history(History *h, int op, ...);
new: int history(History *h, HistEvent *ev, int op, ...); plus some
changes in operation names. See editline(3) for details.

Tested by djm@@, mouring@@, jmc@@.

ok deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: el.h,v 1.15 2003/09/26 17:44:51 christos Exp $	*/
d92 1
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: el.h,v 1.3 1997/03/14 05:12:46 millert Exp $	*/
/*	$NetBSD: el.h,v 1.2 1997/01/11 06:47:53 lukem Exp $	*/
d42 1
a42 1
#define _h_el
d46 3
a48 3
#define KSHVI
#define VIDEFAULT
#define ANCHOR
d53 1
a53 1
#define EL_BUFSIZ	1024		/* Maximum line size		*/
d55 4
a58 1
#define HANDLE_SIGNALS	1
d65 2
a66 1
    int h, v;
d70 4
a73 4
    char *buffer, 			/* Input line 			*/
	 *cursor, 			/* Cursor position 		*/
	 *lastchar,			/* Last character 		*/
	 *limit;			/* Max position			*/
d80 7
a86 5
    int 	inputmode;		/* What mode are we in? 	*/
    int 	doingarg;		/* Are we getting an argument?	*/
    int	        argument;		/* Numeric argument 		*/
    int		metanext;		/* Is the next char a meta char */
    el_action_t lastcmd;		/* Previous command		*/
d92 3
a94 3
#define el_malloc(a)	malloc(a)
#define el_realloc(a,b)	realloc(a, b)
#define el_free(a)	free(a)
d109 1
d112 23
a134 21
    char	 *el_prog;	/* the program name 			*/
    FILE         *el_outfile;	/* Stdio stuff				*/
    FILE         *el_errfile;	/* Stdio stuff				*/
    int           el_infd;	/* Input file descriptor		*/
    int		  el_flags;	/* Various flags.			*/
    coord_t       el_cursor;	/* Cursor location			*/
    char        **el_display, 	/* Real screen image = what is there	*/
	        **el_vdisplay;	/* Virtual screen image = what we see	*/

    el_line_t     el_line;	/* The current line information		*/
    el_state_t	  el_state;	/* Current editor state			*/
    el_term_t     el_term;	/* Terminal dependent stuff		*/
    el_tty_t	  el_tty;	/* Tty dependent stuff			*/
    el_refresh_t  el_refresh;	/* Refresh stuff			*/
    el_prompt_t   el_prompt;	/* Prompt stuff				*/
    el_chared_t	  el_chared;	/* Characted editor stuff		*/
    el_map_t	  el_map;	/* Key mapping stuff			*/
    el_key_t	  el_key;	/* Key binding stuff			*/
    el_history_t  el_history;	/* History stuff			*/
    el_search_t	  el_search;	/* Search stuff				*/
    el_signal_t	  el_signal;	/* Signal handling stuff		*/
d137 12
@


1.3
log
@fix el_source() - a block needed braces around it (from NetBSD)
Some strcpy() -> strncpy (from NetBSD)
Some KNF
Add current NetBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD: el.h,v 1.2 1997/01/16 05:18:32 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@Merge in NetBSD libedit changes and new man pages.  Also fix some
strncpy() usage in their code.  NetBSD change log was:
    * add a man page for the editline routines
    * add a man page describing editrc
    * fix bugs in el_parse():
      * didn't execute command when program name matched (test reversed)
      * was checking against empty string instead of program name
      * after checks, command to run also pointed to empty string
    * document ^char and \ escape sequences
    * when parsing ^char control chars, check the correct char when determining
      validity (previously, ^char was a NOP interpreted as the literal string
      because of this bug)
    * Implement CC_REDISPLAY, which (unlike CC_REFRESH) redraws the entire input
    * line (a la ^R). This is useful if the binding outputs information and
    * mucks up the input line. To be used in ``list-choices'' bindings (refer
    * to the ^D binding in csh when filec is set)
@
text
@d1 2
a2 1
/*	$OpenBSD: $	*/
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
