head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.8
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.6
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2016.04.12.09.04.02;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	0JsQE9vcJ83YRqdA;

1.3
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	OUneMOe0l7HombT5;

1.2
date	2016.01.29.19.32.33;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	Ue1IcMCqgxm4S8jQ;

1.1
date	2016.01.29.17.23.21;	author schwarze;	state Exp;
branches;
next	;
commitid	MOfHvqt1MJvqXmCY;


desc
@@


1.4
log
@* Delete the unimplemented feature XK_EXE.
* Delete the unused macro MIN().
No functional change.
OK czarkoff@@ martijn@@
@
text
@/*	$OpenBSD: keymacro.h,v 1.3 2016/04/11 20:43:33 schwarze Exp $	*/
/*	$NetBSD: keymacro.h,v 1.5 2016/04/12 00:16:06 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)key.h	8.1 (Berkeley) 6/4/93
 */

/*
 * el.keymacro.h: Key macro header
 */
#ifndef _h_el_keymacro
#define	_h_el_keymacro

typedef union keymacro_value_t {
	el_action_t	 cmd;	/* If it is a command the #	*/
	wchar_t		*str;	/* If it is a string...		*/
} keymacro_value_t;

typedef struct keymacro_node_t keymacro_node_t;

typedef struct el_keymacro_t {
	wchar_t		*buf;	/* Key print buffer		*/
	keymacro_node_t	*map;	/* Key map			*/
	keymacro_value_t val;	/* Local conversion buffer	*/
} el_keymacro_t;

#define	XK_CMD	0
#define	XK_STR	1
#define	XK_NOD	2

protected int keymacro_init(EditLine *);
protected void keymacro_end(EditLine *);
protected keymacro_value_t *keymacro_map_cmd(EditLine *, int);
protected keymacro_value_t *keymacro_map_str(EditLine *, wchar_t *);
protected void keymacro_reset(EditLine *);
protected int keymacro_get(EditLine *, wchar_t *, keymacro_value_t *);
protected void keymacro_add(EditLine *, const wchar_t *,
    keymacro_value_t *, int);
protected void keymacro_clear(EditLine *, el_action_t *, const wchar_t *);
protected int keymacro_delete(EditLine *, const wchar_t *);
protected void keymacro_print(EditLine *, const wchar_t *);
protected void keymacro_kprint(EditLine *, const wchar_t *,
    keymacro_value_t *, int);
protected size_t keymacro__decode_str(const wchar_t *, char *, size_t,
    const char *);

#endif /* _h_el_keymacro */
@


1.3
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 2
a2 2
/*	$OpenBSD: keymacro.h,v 1.2 2016/01/29 19:32:33 schwarze Exp $	*/
/*	$NetBSD: keymacro.h,v 1.4 2016/04/11 00:50:13 christos Exp $	*/
a59 1
#define	XK_EXE	3
@


1.2
log
@Second step in synching with NetBSD:
* Rename some types from *key*_t to *keymacro*_t.
* Rename struct editline member el_key to el_keymacro.
* Rename some functions in keymacro.c from key*() to keymacro*().
This removes the conflict of key_clear(), key_end(), and key_print()
with macros in <term.h>.  No functional change.
This makes keymacro.h identical to the NetBSD version.
It reduces the remaining diff from +2640 -1998 to +2446 -1805.
OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: keymacro.h,v 1.1 2016/01/29 17:23:21 schwarze Exp $	*/
/*	$NetBSD: keymacro.h,v 1.2 2011/07/28 03:44:36 christos Exp $	*/
d46 1
a46 1
	Char		*str;	/* If it is a string...		*/
d52 1
a52 1
	Char		*buf;	/* Key print buffer		*/
d65 1
a65 1
protected keymacro_value_t *keymacro_map_str(EditLine *, Char *);
d67 9
a75 8
protected int keymacro_get(EditLine *, Char *, keymacro_value_t *);
protected void keymacro_add(EditLine *, const Char *, keymacro_value_t *, int);
protected void keymacro_clear(EditLine *, el_action_t *, const Char *);
protected int keymacro_delete(EditLine *, const Char *);
protected void keymacro_print(EditLine *, const Char *);
protected void keymacro_kprint(EditLine *, const Char *, keymacro_value_t *,
    int);
protected size_t keymacro__decode_str(const Char *, char *, size_t,
@


1.1
log
@Start synching with NetBSD:
Rename the files key.[hc] to keymacro.[hc] and term.[hc] to terminal.[hc].
The change makes sense because "term.h" conflicts with <term.h>
and the functions key_clear(), key_end(), and key_print() in "key.h"
conflict with macros in <term.h>.
No content change yet, no binary change in *.o after "strip -d".
This reduces the remaining diff from +4634 -3992 to +2640 -1998.
OK czarkoff@@, and mmcc@@ agrees with the direction.
@
text
@d1 2
a2 2
/*	$OpenBSD: key.h,v 1.8 2010/06/30 00:05:35 nicm Exp $	*/
/*	$NetBSD: key.h,v 1.13 2009/12/30 22:37:40 christos Exp $	*/
d44 1
a44 1
typedef union key_value_t {
d47 1
a47 1
} key_value_t;
d49 1
a49 1
typedef struct key_node_t key_node_t;
d51 1
a51 1
typedef struct el_key_t {
d53 3
a55 3
	key_node_t	*map;	/* Key map			*/
	key_value_t	 val;	/* Local conversion buffer	*/
} el_key_t;
d62 11
a72 15
#undef key_end
#undef key_clear
#undef key_print

protected int		 key_init(EditLine *);
protected void		 key_end(EditLine *);
protected key_value_t	*key_map_cmd(EditLine *, int);
protected key_value_t	*key_map_str(EditLine *, Char *);
protected void		 key_reset(EditLine *);
protected int		 key_get(EditLine *, Char *, key_value_t *);
protected void		 key_add(EditLine *, const Char *, key_value_t *, int);
protected void		 key_clear(EditLine *, el_action_t *, const Char *);
protected int		 key_delete(EditLine *, const Char *);
protected void		 key_print(EditLine *, const Char *);
protected void	         key_kprint(EditLine *, const Char *, key_value_t *,
d74 1
a74 1
protected size_t	 key__decode_str(const Char *, char *, size_t,
@

