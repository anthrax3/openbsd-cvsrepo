head	1.19;
access;
symbols
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.16
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.14
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.10
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.8
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.26
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.22
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.20
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.18
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.16
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.14
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.12
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.5.0.18
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.16
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.04.11.21.17.29;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	I3AtNAFb4FywnTMT;

1.18
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	tRHhB2RN3ZD1GvoI;

1.17
date	2016.03.20.22.57.59;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	VBVmrUoZFnMc0hts;

1.16
date	2016.03.20.21.25.27;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	MXwDFI6noAnjy3an;

1.15
date	2016.01.30.00.06.39;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	tGf8IdK8wCurneJ7;

1.14
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	bdUOvGFxUQgqZg7x;

1.13
date	2011.06.03.23.34.56;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.31.08.42.24;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.01.21.11.21;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.26;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.06.04.26.00;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.06.29.23.40.52;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.03.14.05.13.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.14.04.15.38;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	97.01.16.05.18.45;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@delete the "private" and "public" preprocessor macros, just use standard C;
OK martijn@@
@
text
@/*	$OpenBSD: sig.c,v 1.18 2016/03/20 23:48:27 schwarze Exp $	*/
/*	$NetBSD: sig.c,v 1.25 2016/04/11 18:56:31 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "config.h"

/*
 * sig.c: Signal handling stuff.
 *	  our policy is to trap all signals, set a good state
 *	  and pass the ball to our caller.
 */
#include <errno.h>
#include <stdlib.h>

#include "el.h"
#include "common.h"

static EditLine *sel = NULL;

static const int sighdl[] = {
#define	_DO(a)	(a),
	ALLSIGS
#undef	_DO
	- 1
};

static void sig_handler(int);

/* sig_handler():
 *	This is the handler called for all signals
 *	XXX: we cannot pass any data so we just store the old editline
 *	state in a private variable
 */
static void
sig_handler(int signo)
{
	int i, save_errno;
	sigset_t nset, oset;

	save_errno = errno;
	(void) sigemptyset(&nset);
	(void) sigaddset(&nset, signo);
	(void) sigprocmask(SIG_BLOCK, &nset, &oset);

	sel->el_signal->sig_no = signo;

	switch (signo) {
	case SIGCONT:
		tty_rawmode(sel);
		if (ed_redisplay(sel, 0) == CC_REFRESH)
			re_refresh(sel);
		terminal__flush(sel);
		break;

	case SIGWINCH:
		el_resize(sel);
		break;

	default:
		tty_cookedmode(sel);
		break;
	}

	for (i = 0; sighdl[i] != -1; i++)
		if (signo == sighdl[i])
			break;

	(void) sigaction(signo, &sel->el_signal->sig_action[i], NULL);
	sel->el_signal->sig_action[i].sa_handler = SIG_ERR;
	sel->el_signal->sig_action[i].sa_flags = 0;
	sigemptyset(&sel->el_signal->sig_action[i].sa_mask);
	(void) sigprocmask(SIG_SETMASK, &oset, NULL);
	(void) kill(0, signo);
	errno = save_errno;
}


/* sig_init():
 *	Initialize all signal stuff
 */
protected int
sig_init(EditLine *el)
{
	size_t i;
	sigset_t *nset, oset;

	el->el_signal = malloc(sizeof(*el->el_signal));
	if (el->el_signal == NULL)
		return -1;

	nset = &el->el_signal->sig_set;
	(void) sigemptyset(nset);
#define	_DO(a) (void) sigaddset(nset, a);
	ALLSIGS
#undef	_DO
	(void) sigprocmask(SIG_BLOCK, nset, &oset);

	for (i = 0; sighdl[i] != -1; i++) {
		el->el_signal->sig_action[i].sa_handler = SIG_ERR;
		el->el_signal->sig_action[i].sa_flags = 0;
		sigemptyset(&el->el_signal->sig_action[i].sa_mask);
	}

	(void) sigprocmask(SIG_SETMASK, &oset, NULL);

	return 0;
}


/* sig_end():
 *	Clear all signal stuff
 */
protected void
sig_end(EditLine *el)
{

	free(el->el_signal);
	el->el_signal = NULL;
}


/* sig_set():
 *	set all the signal handlers
 */
protected void
sig_set(EditLine *el)
{
	size_t i;
	sigset_t oset;
	struct sigaction osa, nsa;

	nsa.sa_handler = sig_handler;
	nsa.sa_flags = 0;
	sigemptyset(&nsa.sa_mask);

	(void) sigprocmask(SIG_BLOCK, &el->el_signal->sig_set, &oset);

	for (i = 0; sighdl[i] != -1; i++) {
		/* This could happen if we get interrupted */
		if (sigaction(sighdl[i], &nsa, &osa) != -1 &&
		    osa.sa_handler != sig_handler)
			el->el_signal->sig_action[i] = osa;
	}
	sel = el;
	(void) sigprocmask(SIG_SETMASK, &oset, NULL);
}


/* sig_clr():
 *	clear all the signal handlers
 */
protected void
sig_clr(EditLine *el)
{
	size_t i;
	sigset_t oset;

	(void) sigprocmask(SIG_BLOCK, &el->el_signal->sig_set, &oset);

	for (i = 0; sighdl[i] != -1; i++)
		if (el->el_signal->sig_action[i].sa_handler != SIG_ERR)
			(void)sigaction(sighdl[i],
			    &el->el_signal->sig_action[i], NULL);

	sel = NULL;		/* we are going to die if the handler is
				 * called */
	(void)sigprocmask(SIG_SETMASK, &oset, NULL);
}
@


1.18
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: sig.c,v 1.17 2016/03/20 22:57:59 schwarze Exp $	*/
/*	$NetBSD: sig.c,v 1.24 2016/02/16 19:08:41 christos Exp $	*/
d49 1
a49 1
private EditLine *sel = NULL;
d51 1
a51 1
private const int sighdl[] = {
d58 1
a58 1
private void sig_handler(int);
d65 1
a65 1
private void
@


1.17
log
@Cleanup of private header inclusion:

1. Do not include private headers from "chared.h", "hist.h", "prompt.h",
"refresh.h", "search.h", "sig.h", "terminal.h", "tty.h".
The only private header having to include other private headers is "el.h".
2. Do not include "common.h", "parse.h", "help.h" from "el.h",
and do not include "emacs.h" and "vi.h" from "chared.h",
include them directly where needed.
3. Do include "fcns.h" from "el.h" because el_func_t is needed for "map.h".
4. Do not include private headers again that are already included by "el.h".
5. Include private headers after standard headers.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sig.c,v 1.16 2016/03/20 21:25:27 schwarze Exp $	*/
d43 1
@


1.16
log
@minor simplifactions, style fixes, and trivial syncs from NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD: sig.c,v 1.15 2016/01/30 00:06:39 schwarze Exp $	*/
/*	$NetBSD: sig.c,v 1.18 2016/02/15 15:29:25 christos Exp $	*/
d43 2
d46 1
a46 1
#include <stdlib.h>
@


1.15
log
@Third step in synching with NetBSD:
* rename fkey_t to funckey_t and el_term_t to el_terminal_t
* rename struct editline member el_term to el_terminal
* rename many functions in terminal.c from term_*() to terminal_*(),
for consistency with the file name and to not look related to <term.h>
No functional change.
This makes refresh.c and sig.c almost identical to the NetBSD versions.
It reduces the remaining diff from +2446 -1805 to +2053 -1420.
OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: sig.c,v 1.14 2014/10/17 06:07:50 deraadt Exp $	*/
/*	$NetBSD: sig.c,v 1.17 2011/07/28 20:50:55 christos Exp $	*/
d65 1
a65 1
	int i, save_errno = errno;
d68 1
@


1.14
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 2
a2 2
/*	$OpenBSD: sig.c,v 1.13 2011/06/03 23:34:56 deraadt Exp $	*/
/*	$NetBSD: sig.c,v 1.15 2009/02/19 15:20:22 christos Exp $	*/
d79 1
a79 1
		term__flush(sel);
d144 1
a144 1
	free((ptr_t) el->el_signal);
@


1.13
log
@lots of back things happening in this signal handler, but at least
start to clean up the simple stuff
ok nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: sig.c,v 1.12 2010/06/30 00:05:35 nicm Exp $	*/
d114 1
a114 1
	el->el_signal = el_malloc(sizeof(*el->el_signal));
d144 1
a144 1
	el_free((ptr_t) el->el_signal);
@


1.12
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 1
a65 1
	int i;
d101 1
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 2
a2 2
/*	$OpenBSD: sig.c,v 1.10 2003/10/31 08:42:24 otto Exp $	*/
/*	$NetBSD: sig.c,v 1.11 2003/08/07 16:44:33 agc Exp $	*/
d72 2
d79 1
a79 1
		term__flush();
d95 4
a98 1
	(void) signal(signo, sel->el_signal[i]);
d110 6
a115 2
	int i;
	sigset_t nset, oset;
d117 3
a119 2
	(void) sigemptyset(&nset);
#define	_DO(a) (void) sigaddset(&nset, a);
d122 1
a122 1
	    (void) sigprocmask(SIG_BLOCK, &nset, &oset);
d124 5
a128 7
#define	SIGSIZE (sizeof(sighdl) / sizeof(sighdl[0]) * sizeof(el_signalhandler_t))

	el->el_signal = (el_signalhandler_t *) el_malloc(SIGSIZE);
	if (el->el_signal == NULL)
		return (-1);
	for (i = 0; sighdl[i] != -1; i++)
		el->el_signal[i] = SIG_ERR;
d132 1
a132 1
	return (0);
d154 7
a160 2
	int i;
	sigset_t nset, oset;
d162 1
a162 5
	(void) sigemptyset(&nset);
#define	_DO(a) (void) sigaddset(&nset, a);
	ALLSIGS
#undef	_DO
	    (void) sigprocmask(SIG_BLOCK, &nset, &oset);
a164 1
		el_signalhandler_t s;
d166 3
a168 2
		if ((s = signal(sighdl[i], sig_handler)) != sig_handler)
			el->el_signal[i] = s;
d181 2
a182 2
	int i;
	sigset_t nset, oset;
d184 1
a184 5
	(void) sigemptyset(&nset);
#define	_DO(a) (void) sigaddset(&nset, a);
	ALLSIGS
#undef	_DO
	    (void) sigprocmask(SIG_BLOCK, &nset, &oset);
d187 3
a189 2
		if (el->el_signal[i] != SIG_ERR)
			(void) signal(sighdl[i], el->el_signal[i]);
d193 1
a193 1
	(void) sigprocmask(SIG_SETMASK, &oset, NULL);
@


1.10
log
@Update to NetBSD libedit (from Oct 1, 2003), adding some string
cleaning and history bug fixes. The code includes GNU libreadline
functionality, but the corresponding header files are not installed,
since some libreadline functions are missing. There are some minor API
changes, notably:

old: EditLine *el_init(const char *, FILE *, FILE *);
new: EditLine *el_init(const char *, FILE *, FILE *, FILE *);

old: HistEvent *history(History *h, int op, ...);
new: int history(History *h, HistEvent *ev, int op, ...); plus some
changes in operation names. See editline(3) for details.

Tested by djm@@, mouring@@, jmc@@.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a36 7
#if !defined(lint) && !defined(SCCSID)
#if 0
static char sccsid[] = "@@(#)sig.c	8.1 (Berkeley) 6/4/93";
#else
static const char rcsid[] = "$OpenBSD$";
#endif
#endif /* not lint && not SCCSID */
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: sig.c,v 1.8 2003/05/01 21:11:21 avsm Exp $	*/
/*	$NetBSD: sig.c,v 1.3 1997/04/11 17:52:48 christos Exp $	*/
d36 1
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: sig.c,v 1.8 2003/05/01 21:11:21 avsm Exp $";
a49 1
#include "sys.h"
d55 5
a59 5
private int sighdl[] = {
#define _DO(a)	(a),
    ALLSIGS
#undef _DO
    -1
d70 1
a70 2
sig_handler(signo)
    int signo;
d72 31
a102 33
    int save_errno = errno;
    int i;
    sigset_t nset, oset;

    (void)sigemptyset(&nset);
    (void)sigaddset(&nset, signo);
    (void)sigprocmask(SIG_BLOCK, &nset, &oset);

    switch (signo) {
    case SIGCONT:
	tty_rawmode(sel);				/* XXX signal race */
	if (ed_redisplay(sel, 0) == CC_REFRESH)		/* XXX signal race */
	    re_refresh(sel);				/* XXX signal race */
	term__flush();					/* XXX signal race */
	break;

    case SIGWINCH:
	el_resize(sel);					/* XXX signal race */
	break;

    default:
	tty_cookedmode(sel);				/* XXX signal race */
	break;
    }

    for (i = 0; sighdl[i] != -1; i++) 
	if (signo == sighdl[i])
	    break;

    (void)signal(signo, sel->el_signal[i]);
    (void)sigprocmask(SIG_SETMASK, &oset, NULL);
    (void)kill(0, signo);
    errno = save_errno;
d110 1
a110 2
sig_init(el)
    EditLine *el;
d112 2
a113 10
    int i;
    sigset_t nset, oset;

    (void)sigemptyset(&nset);
#define _DO(a) (void)sigaddset(&nset, a);
    ALLSIGS
#undef _DO
    (void)sigprocmask(SIG_BLOCK, &nset, &oset);

#define SIGSIZE (sizeof(sighdl) / sizeof(sighdl[0]) * sizeof(sig_t))
d115 13
a127 3
    el->el_signal = (sig_t *) el_malloc(SIGSIZE);
    for (i = 0; sighdl[i] != -1; i++) 
	el->el_signal[i] = SIG_ERR;
d129 1
a129 1
    (void)sigprocmask(SIG_SETMASK, &oset, NULL);
d131 1
a131 1
    return 0;
d139 1
a139 2
sig_end(el)
    EditLine *el;
d141 3
a143 2
    el_free((ptr_t) el->el_signal);
    el->el_signal = NULL;
d151 1
a151 2
sig_set(el)
    EditLine *el;
d153 2
a154 2
    int i;
    sigset_t nset, oset;
d156 14
a169 14
    (void)sigemptyset(&nset);
#define _DO(a) (void)sigaddset(&nset, a);
    ALLSIGS
#undef _DO
    (void)sigprocmask(SIG_BLOCK, &nset, &oset);

    for (i = 0; sighdl[i] != -1; i++) {
	sig_t s;
	/* This could happen if we get interrupted */
	if ((s = signal(sighdl[i], sig_handler)) != sig_handler)
	    el->el_signal[i] = s;
    }
    sel = el;
    (void)sigprocmask(SIG_SETMASK, &oset, NULL);
d177 1
a177 2
sig_clr(el)
    EditLine *el;
d179 2
a180 12
    int i;
    sigset_t nset, oset;

    (void)sigemptyset(&nset);
#define _DO(a) (void)sigaddset(&nset, a);
    ALLSIGS
#undef _DO
    (void)sigprocmask(SIG_BLOCK, &nset, &oset);

    for (i = 0; sighdl[i] != -1; i++) 
	if (el->el_signal[i] != SIG_ERR)
	    (void)signal(sighdl[i], el->el_signal[i]);
d182 13
a194 2
    sel = NULL;	/* we are going to die if the handler is called */
    (void)sigprocmask(SIG_SETMASK, &oset, NULL);
@


1.8
log
@is -Wall clean by making rcsid const
@
text
@d1 1
a1 1
/*	$OpenBSD: sig.c,v 1.7 2002/02/16 21:27:26 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: sig.c,v 1.7 2002/02/16 21:27:26 millert Exp $";
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: sig.c,v 1.6 2001/12/06 04:26:00 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: sig.c,v 1.6 2001/12/06 04:26:00 deraadt Exp $";
@


1.6
log
@mark more signals that I cannot fix
@
text
@d1 1
a1 1
/*	$OpenBSD: sig.c,v 1.5 1997/06/29 23:40:52 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: sig.c,v 1.5 1997/06/29 23:40:52 millert Exp $";
d66 1
a66 1
private void sig_handler	__P((int));
@


1.5
log
@Updates from NetBSD (christos@@netbsd.org)
  * Portability fixes:
	__const         -> const
	BADSIG          -> SIG_ERR
	int flags       -> u_int flags
	#if __STDC__    -> #ifdef __STDC__
  * Don't allow CSWTCH to interfere with CSUSP on __SVR4 systems.
  * Return -1 if the terminal set operation resulted in dumb terminal settings.
  * Handle properly the case where the last line in the sourced file does
    not have a trailing '\n'. From Jeffrey C Honig.
  * editrc -> editline in editline(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: sig.c,v 1.4 1997/03/14 05:13:02 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: sig.c,v 1.4 1997/03/14 05:13:02 millert Exp $";
d77 1
d87 4
a90 4
	tty_rawmode(sel);
	if (ed_redisplay(sel, 0) == CC_REFRESH)
	    re_refresh(sel);
	term__flush();
d94 1
a94 1
	el_resize(sel);
d98 1
a98 1
	tty_cookedmode(sel);
d109 1
@


1.4
log
@fix el_source() - a block needed braces around it (from NetBSD)
Some strcpy() -> strncpy (from NetBSD)
Some KNF
Add current NetBSD tags
@
text
@d1 2
a2 2
/*	$OpenBSD: sig.c,v 1.3 1997/03/14 04:15:38 tholo Exp $	*/
/*	$NetBSD: sig.c,v 1.2 1997/01/11 06:48:10 lukem Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: sig.c,v 1.3 1997/03/14 04:15:38 tholo Exp $";
d131 1
a131 1
	el->el_signal[i] = BADSIG;
d195 1
a195 1
	if (el->el_signal[i] != BADSIG)
@


1.3
log
@Iterate over signals correctly
@
text
@d1 2
a2 1
/*	$OpenBSD: sig.c,v 1.2 1997/01/16 05:18:45 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: sig.c,v 1.2 1997/01/16 05:18:45 millert Exp $";
d80 3
a82 3
    (void) sigemptyset(&nset);
    (void) sigaddset(&nset, signo);
    (void) sigprocmask(SIG_BLOCK, &nset, &oset);
d105 3
a107 3
    (void) signal(signo, sel->el_signal[i]);
    (void) sigprocmask(SIG_SETMASK, &oset, NULL);
    (void) kill(0, signo);
d121 2
a122 2
    (void) sigemptyset(&nset);
#define _DO(a) (void) sigaddset(&nset, a);
d125 1
a125 1
    (void) sigprocmask(SIG_BLOCK, &nset, &oset);
d133 1
a133 1
    (void) sigprocmask(SIG_SETMASK, &oset, NULL);
d161 2
a162 2
    (void) sigemptyset(&nset);
#define _DO(a) (void) sigaddset(&nset, a);
d165 1
a165 1
    (void) sigprocmask(SIG_BLOCK, &nset, &oset);
d174 1
a174 1
    (void) sigprocmask(SIG_SETMASK, &oset, NULL);
d188 2
a189 2
    (void) sigemptyset(&nset);
#define _DO(a) (void) sigaddset(&nset, a);
d192 1
a192 1
    (void) sigprocmask(SIG_BLOCK, &nset, &oset);
d196 1
a196 1
	    (void) signal(sighdl[i], el->el_signal[i]);
d199 1
a199 1
    (void) sigprocmask(SIG_SETMASK, &oset, NULL);
@


1.2
log
@Merge in NetBSD libedit changes and new man pages.  Also fix some
strncpy() usage in their code.  NetBSD change log was:
    * add a man page for the editline routines
    * add a man page describing editrc
    * fix bugs in el_parse():
      * didn't execute command when program name matched (test reversed)
      * was checking against empty string instead of program name
      * after checks, command to run also pointed to empty string
    * document ^char and \ escape sequences
    * when parsing ^char control chars, check the correct char when determining
      validity (previously, ^char was a NOP interpreted as the literal string
      because of this bug)
    * Implement CC_REDISPLAY, which (unlike CC_REFRESH) redraws the entire input
    * line (a la ^R). This is useful if the binding outputs information and
    * mucks up the input line. To be used in ``list-choices'' bindings (refer
    * to the ^D binding in csh when filec is set)
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: $";
d121 1
a121 1
#define _DO(a) (void) sigaddset(&nset, SIGWINCH);
d161 1
a161 1
#define _DO(a) (void) sigaddset(&nset, SIGWINCH);
d188 1
a188 1
#define _DO(a) (void) sigaddset(&nset, SIGWINCH);
@


1.1
log
@Initial revision
@
text
@d1 2
d40 1
d42 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
