head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.6
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.10.0.18
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.20
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.12
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.16
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.24
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.20
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.05.22.23.09.56;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	JDRx6gbg98ixcAQq;

1.14
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	OUneMOe0l7HombT5;

1.13
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	tRHhB2RN3ZD1GvoI;

1.12
date	2016.03.20.22.57.59;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	VBVmrUoZFnMc0hts;

1.11
date	2016.03.20.20.35.38;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	b06qlwkNEbVitvG0;

1.10
date	2011.07.07.05.40.42;	author okan;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.25.20.12.38;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.31.08.42.24;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.17.19.42.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.26;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.14.05.12.42;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.16.05.18.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Improve modularization at the chared/read boundary, no functional change.

Stop the read.c module from poking the el_chared.c_macro data
structure that used to belong to the chared.c module.  Given that
no other module, not even chared itself, is using that data, move it
into the read modules's own opaque data structure, struct el_read_t.

That gets rid of one struct, one #define, one struct member, and one
function argument in the chared.h interface.

OK czarkoff@@
@
text
@/*	$OpenBSD: chared.h,v 1.14 2016/04/11 20:43:33 schwarze Exp $	*/
/*	$NetBSD: chared.h,v 1.20 2010/04/15 00:57:33 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)chared.h	8.1 (Berkeley) 6/4/93
 */

/*
 * el.chared.h: Character editor interface
 */
#ifndef _h_el_chared
#define	_h_el_chared

/*
 * This is an issue of basic "vi" look-and-feel. Defining VI_MOVE works
 * like real vi: i.e. the transition from command<->insert modes moves
 * the cursor.
 *
 * On the other hand we really don't want to move the cursor, because
 * all the editing commands don't include the character under the cursor.
 * Probably the best fix is to make all the editing commands aware of
 * this fact.
 */
#define	VI_MOVE

/*
 * Undo information for vi - no undo in emacs (yet)
 */
typedef struct c_undo_t {
	ssize_t	 len;			/* length of saved line */
	int	 cursor;		/* position of saved cursor */
	wchar_t	*buf;			/* full saved text */
} c_undo_t;

/* redo for vi */
typedef struct c_redo_t {
	wchar_t	*buf;			/* redo insert key sequence */
	wchar_t	*pos;
	wchar_t	*lim;
	el_action_t	cmd;		/* command to redo */
	wchar_t	ch;			/* char that invoked it */
	int	count;
	int	action;			/* from cv_action() */
} c_redo_t;

/*
 * Current action information for vi
 */
typedef struct c_vcmd_t {
	int	 action;
	wchar_t	*pos;
} c_vcmd_t;

/*
 * Kill buffer for emacs
 */
typedef struct c_kill_t {
	wchar_t	*buf;
	wchar_t	*last;
	wchar_t	*mark;
} c_kill_t;

typedef void (*el_zfunc_t)(EditLine *, void *);

/*
 * Note that we use both data structures because the user can bind
 * commands from both editors!
 */
typedef struct el_chared_t {
	c_undo_t	c_undo;
	c_kill_t	c_kill;
	c_redo_t	c_redo;
	c_vcmd_t	c_vcmd;
	el_zfunc_t	c_resizefun;
	void *		c_resizearg;
} el_chared_t;


#define	STRQQ		"\"\""

#define	isglob(a)	(strchr("*[]?", (a)) != NULL)

#define	NOP		0x00
#define	DELETE		0x01
#define	INSERT		0x02
#define	YANK		0x04

#define	CHAR_FWD	(+1)
#define	CHAR_BACK	(-1)

#define	MODE_INSERT	0
#define	MODE_REPLACE	1
#define	MODE_REPLACE_1	2


protected int	 cv__isword(wint_t);
protected int	 cv__isWord(wint_t);
protected void	 cv_delfini(EditLine *);
protected wchar_t *cv__endword(wchar_t *, wchar_t *, int, int (*)(wint_t));
protected int	 ce__isword(wint_t);
protected void	 cv_undo(EditLine *);
protected void	 cv_yank(EditLine *, const wchar_t *, int);
protected wchar_t *cv_next_word(EditLine*, wchar_t *, wchar_t *, int,
			int (*)(wint_t));
protected wchar_t *cv_prev_word(wchar_t *, wchar_t *, int, int (*)(wint_t));
protected wchar_t *c__next_word(wchar_t *, wchar_t *, int, int (*)(wint_t));
protected wchar_t *c__prev_word(wchar_t *, wchar_t *, int, int (*)(wint_t));
protected void	 c_insert(EditLine *, int);
protected void	 c_delbefore(EditLine *, int);
protected void	 c_delbefore1(EditLine *);
protected void	 c_delafter(EditLine *, int);
protected void	 c_delafter1(EditLine *);
protected int	 c_gets(EditLine *, wchar_t *, const wchar_t *);
protected int	 c_hpos(EditLine *);

protected int	 ch_init(EditLine *);
protected void	 ch_reset(EditLine *);
protected int	 ch_resizefun(EditLine *, el_zfunc_t, void *);
protected int	 ch_enlargebufs(EditLine *, size_t);
protected void	 ch_end(EditLine *);

#endif /* _h_el_chared */
@


1.14
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.h,v 1.13 2016/03/20 23:48:27 schwarze Exp $	*/
a43 2
#define	EL_MAXMACRO	10

a55 7

typedef struct c_macro_t {
	int	  level;
	int	  offset;
	wchar_t	**macro;
} c_macro_t;

a103 1
	c_macro_t	c_macro;
d147 1
a147 1
protected void	 ch_reset(EditLine *, int);
@


1.13
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.h,v 1.12 2016/03/20 22:57:59 schwarze Exp $	*/
d62 1
a62 1
	Char	**macro;
d71 1
a71 1
	Char	*buf;			/* full saved text */
d76 3
a78 3
	Char	*buf;			/* redo insert key sequence */
	Char	*pos;
	Char	*lim;
d80 1
a80 1
	Char	ch;			/* char that invoked it */
d90 1
a90 1
	Char	*pos;
d97 3
a99 3
	Char	*buf;
	Char	*last;
	Char	*mark;
d139 1
a139 1
protected Char	*cv__endword(Char *, Char *, int, int (*)(wint_t));
d142 6
a147 5
protected void	 cv_yank(EditLine *, const Char *, int);
protected Char	*cv_next_word(EditLine*, Char *, Char *, int, int (*)(wint_t));
protected Char	*cv_prev_word(Char *, Char *, int, int (*)(wint_t));
protected Char	*c__next_word(Char *, Char *, int, int (*)(wint_t));
protected Char	*c__prev_word(Char *, Char *, int, int (*)(wint_t));
d153 1
a153 1
protected int	 c_gets(EditLine *, Char *, const Char *);
@


1.12
log
@Cleanup of private header inclusion:

1. Do not include private headers from "chared.h", "hist.h", "prompt.h",
"refresh.h", "search.h", "sig.h", "terminal.h", "tty.h".
The only private header having to include other private headers is "el.h".
2. Do not include "common.h", "parse.h", "help.h" from "el.h",
and do not include "emacs.h" and "vi.h" from "chared.h",
include them directly where needed.
3. Do include "fcns.h" from "el.h" because el_func_t is needed for "map.h".
4. Do not include private headers again that are already included by "el.h".
5. Include private headers after standard headers.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.h,v 1.11 2016/03/20 20:35:38 schwarze Exp $	*/
a42 3

#include <ctype.h>
#include <string.h>
@


1.11
log
@Delete the useless Int datatype and always use the standard wint_t
directly.  This is not a problem because <wchar_t> is required all
over the place anyway, even when WIDECHAR is not defined.
No functional change except that it fixes a few printf(3)
format string issues, %c vs. %lc.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.h,v 1.10 2011/07/07 05:40:42 okan Exp $	*/
a46 2
#include "histedit.h"

a136 6

#include "common.h"
#include "vi.h"
#include "emacs.h"
#include "search.h"
#include "fcns.h"
@


1.10
log
@sync with upstream, retaining local modifications.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.h,v 1.9 2010/06/30 00:05:35 nicm Exp $	*/
d147 2
a148 2
protected int	 cv__isword(Int);
protected int	 cv__isWord(Int);
d150 2
a151 2
protected Char	*cv__endword(Char *, Char *, int, int (*)(Int));
protected int	 ce__isword(Int);
d154 4
a157 4
protected Char	*cv_next_word(EditLine*, Char *, Char *, int, int (*)(Int));
protected Char	*cv_prev_word(Char *, Char *, int, int (*)(Int));
protected Char	*c__next_word(Char *, Char *, int, int (*)(Int));
protected Char	*c__prev_word(Char *, Char *, int, int (*)(Int));
@


1.9
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d107 2
d119 2
d168 1
@


1.8
log
@Sync libedit to NetBSD libedit as of Nov 8, 2003.
Tested by jmc@@ djm@@ and myself
@
text
@d1 2
a2 2
/*	$OpenBSD: chared.h,v 1.7 2003/10/31 08:42:24 otto Exp $	*/
/*	$NetBSD: chared.h,v 1.13 2003/10/18 23:48:42 christos Exp $	*/
d52 1
a52 1
 * This is a issue of basic "vi" look-and-feel. Defining VI_MOVE works
d67 1
a67 1
	char	**macro;
d74 1
a74 1
	int	 len;			/* length of saved line */
d76 1
a76 1
	char	*buf;			/* full saved text */
d81 3
a83 3
	char	*buf;			/* redo insert key sequence */
	char	*pos;
	char	*lim;
d85 1
a85 1
	char	ch;			/* char that invoked it */
d95 1
a95 1
	char	*pos;
d102 3
a104 3
	char	*buf;
	char	*last;
	char	*mark;
a119 1
#define	STReof		"^D\b\b"
a122 1
#define	isword(a)	(isprint(a))
d143 2
a144 2
protected int	 cv__isword(int);
protected int	 cv__isWord(int);
d146 2
a147 2
protected char	*cv__endword(char *, char *, int, int (*)(int));
protected int	 ce__isword(int);
d149 5
a153 5
protected void	 cv_yank(EditLine *, const char *, int);
protected char	*cv_next_word(EditLine*, char *, char *, int, int (*)(int));
protected char	*cv_prev_word(char *, char *, int, int (*)(int));
protected char	*c__next_word(char *, char *, int, int (*)(int));
protected char	*c__prev_word(char *, char *, int, int (*)(int));
d156 1
d158 2
a159 1
protected int	 c_gets(EditLine *, char *, const char *);
d163 1
a163 1
protected void	 ch_reset(EditLine *);
@


1.7
log
@Update to NetBSD libedit (from Oct 1, 2003), adding some string
cleaning and history bug fixes. The code includes GNU libreadline
functionality, but the corresponding header files are not installed,
since some libreadline functions are missing. There are some minor API
changes, notably:

old: EditLine *el_init(const char *, FILE *, FILE *);
new: EditLine *el_init(const char *, FILE *, FILE *, FILE *);

old: HistEvent *history(History *h, int op, ...);
new: int history(History *h, HistEvent *ev, int op, ...); plus some
changes in operation names. See editline(3) for details.

Tested by djm@@, mouring@@, jmc@@.

ok deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: chared.h,v 1.12 2003/08/07 16:44:30 agc Exp $	*/
d66 1
a67 1
	char	 *nline;
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: chared.h,v 1.5 2002/02/17 19:42:25 millert Exp $	*/
/*	$NetBSD: chared.h,v 1.2 1997/01/11 06:47:49 lukem Exp $	*/
d42 1
a42 1
#define _h_el_chared
d49 1
a49 1
#define EL_MAXMACRO 10
d56 1
a56 1
 * On the other hand we really don't want to move the cursor, because 
d61 1
a61 1
#define VI_MOVE
d65 3
a67 3
    int    level;
    char **macro;
    char  *nline;
d70 2
a71 2
/* 
 * Undo information for both vi and emacs
d74 3
a76 5
    int   action;
    int   isize;
    int   dsize;
    char *ptr;
    char *buf;
d79 11
d94 2
a95 3
    int   action;
    char *pos;
    char *ins;
d102 3
a104 3
    char *buf;
    char *last;
    char *mark;
d112 5
a116 4
    c_undo_t    c_undo;
    c_kill_t    c_kill;
    c_vcmd_t    c_vcmd;
    c_macro_t   c_macro;
d120 2
a121 2
#define STReof "^D\b\b"
#define STRQQ  "\"\""
d123 2
a124 2
#define isglob(a) (strchr("*[]?", (a)) != NULL)
#define isword(a) (isprint(a))
d126 11
a136 11
#define NOP    	  0x00
#define DELETE 	  0x01
#define INSERT 	  0x02
#define CHANGE 	  0x04

#define CHAR_FWD	0
#define CHAR_BACK	1

#define MODE_INSERT	0
#define MODE_REPLACE	1
#define MODE_REPLACE_1	2
d145 21
a165 18
protected int   cv__isword(int);
protected void  cv_delfini(EditLine *);
protected char *cv__endword(char *, char *, int);
protected int   ce__isword(int);
protected void  cv_undo(EditLine *, int, int, char *);
protected char *cv_next_word(EditLine*, char *, char *, int, int (*)(int));
protected char *cv_prev_word(EditLine*, char *, char *, int, int (*)(int));
protected char *c__next_word(char *, char *, int, int (*)(int));
protected char *c__prev_word(char *, char *, int, int (*)(int));
protected void  c_insert(EditLine *, int);
protected void  c_delbefore(EditLine *, int);
protected void  c_delafter(EditLine *, int);
protected int   c_gets(EditLine *, char *);
protected int   c_hpos(EditLine *);

protected int   ch_init(EditLine *);
protected void  ch_reset(EditLine *);
protected void  ch_end(EditLine *);
@


1.5
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.h,v 1.4 2002/02/16 21:27:26 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.h,v 1.3 1997/03/14 05:12:42 millert Exp $	*/
d145 4
a148 6
protected char *cv_next_word	__P((EditLine*, char *, char *, int, 
				     int (*)(int)));
protected char *cv_prev_word	__P((EditLine*, char *, char *, int,
				     int (*)(int)));
protected char *c__next_word	__P((char *, char *, int, int (*)(int)));
protected char *c__prev_word	__P((char *, char *, int, int (*)(int)));
@


1.3
log
@fix el_source() - a block needed braces around it (from NetBSD)
Some strcpy() -> strncpy (from NetBSD)
Some KNF
Add current NetBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD: chared.h,v 1.2 1997/01/16 05:18:29 millert Exp $	*/
d140 5
a144 5
protected int   cv__isword	__P((int));
protected void  cv_delfini	__P((EditLine *));
protected char *cv__endword	__P((char *, char *, int));
protected int   ce__isword	__P((int));
protected void  cv_undo		__P((EditLine *, int, int, char *));
d151 9
a159 9
protected void  c_insert	__P((EditLine *, int));
protected void  c_delbefore	__P((EditLine *, int));
protected void  c_delafter	__P((EditLine *, int));
protected int   c_gets		__P((EditLine *, char *));
protected int   c_hpos		__P((EditLine *));

protected int   ch_init		__P((EditLine *));
protected void  ch_reset	__P((EditLine *));
protected void  ch_end		__P((EditLine *));
@


1.2
log
@Merge in NetBSD libedit changes and new man pages.  Also fix some
strncpy() usage in their code.  NetBSD change log was:
    * add a man page for the editline routines
    * add a man page describing editrc
    * fix bugs in el_parse():
      * didn't execute command when program name matched (test reversed)
      * was checking against empty string instead of program name
      * after checks, command to run also pointed to empty string
    * document ^char and \ escape sequences
    * when parsing ^char control chars, check the correct char when determining
      validity (previously, ^char was a NOP interpreted as the literal string
      because of this bug)
    * Implement CC_REDISPLAY, which (unlike CC_REFRESH) redraws the entire input
    * line (a la ^R). This is useful if the binding outputs information and
    * mucks up the input line. To be used in ``list-choices'' bindings (refer
    * to the ^D binding in csh when filec is set)
@
text
@d1 2
a2 1
/*	$OpenBSD: $	*/
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
