head	1.27;
access;
symbols
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.2
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.20
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.18
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.14
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.12
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.10
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.26
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.22
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.20
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.18
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.16
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.14
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.12
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.18
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.16
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.14
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2016.05.06.13.12.52;	author schwarze;	state Exp;
branches;
next	1.26;
commitid	HmIy04UbyUS0d1Sd;

1.26
date	2016.04.28.09.44.36;	author schwarze;	state Exp;
branches;
next	1.25;
commitid	q57ZdS8n9zUDOCMG;

1.25
date	2016.04.11.21.17.29;	author schwarze;	state Exp;
branches;
next	1.24;
commitid	I3AtNAFb4FywnTMT;

1.24
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	OUneMOe0l7HombT5;

1.23
date	2016.04.11.19.54.54;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	xizUpRlYj2C4Hcj6;

1.22
date	2016.04.09.20.15.26;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	0bnhGLXZIvXlnMLp;

1.21
date	2016.04.09.19.31.55;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	t22PDRfkb5DJX3rc;

1.20
date	2016.03.21.15.25.39;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	Qq3DwK1S3lWtyR8X;

1.19
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	tRHhB2RN3ZD1GvoI;

1.18
date	2016.03.20.22.57.59;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	VBVmrUoZFnMc0hts;

1.17
date	2016.03.20.20.35.38;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	b06qlwkNEbVitvG0;

1.16
date	2016.01.30.17.32.52;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	wAt9MiELkmlnoi4U;

1.15
date	2016.01.30.12.22.20;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	dCN84ovvbfYwqrqX;

1.14
date	2016.01.30.00.06.39;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	tGf8IdK8wCurneJ7;

1.13
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	bdUOvGFxUQgqZg7x;

1.12
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.25.20.12.38;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.31.08.42.24;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.01.21.34.58;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.01.21.11.21;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.06.29.23.40.51;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.14.05.13.01;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.16.05.18.44;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Replace the generated file "fcns.c" by a simpler header "func.h"
included only in the one file needing it, "map.c".
That allows to define el_action_t directly in "map.h",
which in turn allows to stop including "fcns.h" from "el.h"
and include it only in the modules needing it.
Now we no longer autogenerate any C files.

Feedback and OK martijn@@.
First version also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@/*	$OpenBSD: search.c,v 1.26 2016/04/28 09:44:36 schwarze Exp $	*/
/*	$NetBSD: search.c,v 1.45 2016/04/18 17:01:19 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "config.h"

/*
 * search.c: History and character search functions
 */
#include <stdlib.h>
#include <string.h>
#if defined(REGEX)
#include <regex.h>
#elif defined(REGEXP)
#include <regexp.h>
#endif

#include "el.h"
#include "common.h"
#include "fcns.h"

/*
 * Adjust cursor in vi mode to include the character under it
 */
#define	EL_CURSOR(el) \
    ((el)->el_line.cursor + (((el)->el_map.type == MAP_VI) && \
			    ((el)->el_map.current == (el)->el_map.alt)))

/* search_init():
 *	Initialize the search stuff
 */
protected int
search_init(EditLine *el)
{

	el->el_search.patbuf = reallocarray(NULL, EL_BUFSIZ,
	    sizeof(*el->el_search.patbuf));
	if (el->el_search.patbuf == NULL)
		return -1;
	*el->el_search.patbuf = L'\0';
	el->el_search.patlen = 0;
	el->el_search.patdir = -1;
	el->el_search.chacha = '\0';
	el->el_search.chadir = CHAR_FWD;
	el->el_search.chatflg = 0;
	return 0;
}


/* search_end():
 *	Initialize the search stuff
 */
protected void
search_end(EditLine *el)
{

	free(el->el_search.patbuf);
	el->el_search.patbuf = NULL;
}


#ifdef REGEXP
/* regerror():
 *	Handle regular expression errors
 */
void
/*ARGSUSED*/
regerror(const char *msg)
{
}
#endif


/* el_match():
 *	Return if string matches pattern
 */
protected int
el_match(const wchar_t *str, const wchar_t *pat)
{
	static ct_buffer_t conv;
#if defined (REGEX)
	regex_t re;
	int rv;
#elif defined (REGEXP)
	regexp *rp;
	int rv;
#else
	extern char	*re_comp(const char *);
	extern int	 re_exec(const char *);
#endif

	if (wcsstr(str, pat) != 0)
		return 1;

#if defined(REGEX)
	if (regcomp(&re, ct_encode_string(pat, &conv), 0) == 0) {
		rv = regexec(&re, ct_encode_string(str, &conv), 0, NULL, 0) == 0;
		regfree(&re);
	} else {
		rv = 0;
	}
	return rv;
#elif defined(REGEXP)
	if ((re = regcomp(ct_encode_string(pat, &conv))) != NULL) {
		rv = regexec(re, ct_encode_string(str, &conv));
		free(re);
	} else {
		rv = 0;
	}
	return rv;
#else
	if (re_comp(ct_encode_string(pat, &conv)) != NULL)
		return 0;
	else
		return re_exec(ct_encode_string(str, &conv)) == 1;
#endif
}


/* c_hmatch():
 *	 return True if the pattern matches the prefix
 */
protected int
c_hmatch(EditLine *el, const wchar_t *str)
{
#ifdef SDEBUG
	(void) fprintf(el->el_errfile, "match `%s' with `%s'\n",
	    el->el_search.patbuf, str);
#endif /* SDEBUG */

	return el_match(str, el->el_search.patbuf);
}


/* c_setpat():
 *	Set the history seatch pattern
 */
protected void
c_setpat(EditLine *el)
{
	if (el->el_state.lastcmd != ED_SEARCH_PREV_HISTORY &&
	    el->el_state.lastcmd != ED_SEARCH_NEXT_HISTORY) {
		el->el_search.patlen = EL_CURSOR(el) - el->el_line.buffer;
		if (el->el_search.patlen >= EL_BUFSIZ)
			el->el_search.patlen = EL_BUFSIZ - 1;
		if (el->el_search.patlen != 0) {
			(void) wcsncpy(el->el_search.patbuf, el->el_line.buffer,
			    el->el_search.patlen);
			el->el_search.patbuf[el->el_search.patlen] = '\0';
		} else
			el->el_search.patlen = wcslen(el->el_search.patbuf);
	}
#ifdef SDEBUG
	(void) fprintf(el->el_errfile, "\neventno = %d\n",
	    el->el_history.eventno);
	(void) fprintf(el->el_errfile, "patlen = %d\n", el->el_search.patlen);
	(void) fprintf(el->el_errfile, "patbuf = \"%s\"\n",
	    el->el_search.patbuf);
	(void) fprintf(el->el_errfile, "cursor %d lastchar %d\n",
	    EL_CURSOR(el) - el->el_line.buffer,
	    el->el_line.lastchar - el->el_line.buffer);
#endif
}


/* ce_inc_search():
 *	Emacs incremental search
 */
protected el_action_t
ce_inc_search(EditLine *el, int dir)
{
	static const wchar_t STRfwd[] = L"fwd", STRbck[] = L"bck";
	static wchar_t pchar = L':';  /* ':' = normal, '?' = failed */
	static wchar_t endcmd[2] = {'\0', '\0'};
	wchar_t *ocursor = el->el_line.cursor, oldpchar = pchar, ch;
	const wchar_t *cp;

	el_action_t ret = CC_NORM;

	int ohisteventno = el->el_history.eventno;
	size_t oldpatlen = el->el_search.patlen;
	int newdir = dir;
	int done, redo;

	if (el->el_line.lastchar + sizeof(STRfwd) /
	    sizeof(*el->el_line.lastchar) + 2 +
	    el->el_search.patlen >= el->el_line.limit)
		return CC_ERROR;

	for (;;) {

		if (el->el_search.patlen == 0) {	/* first round */
			pchar = ':';
#ifdef ANCHOR
#define	LEN	2
			el->el_search.patbuf[el->el_search.patlen++] = '.';
			el->el_search.patbuf[el->el_search.patlen++] = '*';
#else
#define	LEN	0
#endif
		}
		done = redo = 0;
		*el->el_line.lastchar++ = '\n';
		for (cp = (newdir == ED_SEARCH_PREV_HISTORY) ? STRbck : STRfwd;
		    *cp; *el->el_line.lastchar++ = *cp++)
			continue;
		*el->el_line.lastchar++ = pchar;
		for (cp = &el->el_search.patbuf[LEN];
		    cp < &el->el_search.patbuf[el->el_search.patlen];
		    *el->el_line.lastchar++ = *cp++)
			continue;
		*el->el_line.lastchar = '\0';
		re_refresh(el);

		if (el_wgetc(el, &ch) != 1)
			return ed_end_of_file(el, 0);

		switch (el->el_map.current[(unsigned char) ch]) {
		case ED_INSERT:
		case ED_DIGIT:
			if (el->el_search.patlen >= EL_BUFSIZ - LEN)
				terminal_beep(el);
			else {
				el->el_search.patbuf[el->el_search.patlen++] =
				    ch;
				*el->el_line.lastchar++ = ch;
				*el->el_line.lastchar = '\0';
				re_refresh(el);
			}
			break;

		case EM_INC_SEARCH_NEXT:
			newdir = ED_SEARCH_NEXT_HISTORY;
			redo++;
			break;

		case EM_INC_SEARCH_PREV:
			newdir = ED_SEARCH_PREV_HISTORY;
			redo++;
			break;

		case EM_DELETE_PREV_CHAR:
		case ED_DELETE_PREV_CHAR:
			if (el->el_search.patlen > LEN)
				done++;
			else
				terminal_beep(el);
			break;

		default:
			switch (ch) {
			case 0007:	/* ^G: Abort */
				ret = CC_ERROR;
				done++;
				break;

			case 0027:	/* ^W: Append word */
			/* No can do if globbing characters in pattern */
				for (cp = &el->el_search.patbuf[LEN];; cp++)
				    if (cp >= &el->el_search.patbuf[
					el->el_search.patlen]) {
					el->el_line.cursor +=
					    el->el_search.patlen - LEN - 1;
					cp = c__next_word(el->el_line.cursor,
					    el->el_line.lastchar, 1,
					    ce__isword);
					while (el->el_line.cursor < cp &&
					    *el->el_line.cursor != '\n') {
						if (el->el_search.patlen >=
						    EL_BUFSIZ - LEN) {
							terminal_beep(el);
							break;
						}
						el->el_search.patbuf[el->el_search.patlen++] =
						    *el->el_line.cursor;
						*el->el_line.lastchar++ =
						    *el->el_line.cursor++;
					}
					el->el_line.cursor = ocursor;
					*el->el_line.lastchar = '\0';
					re_refresh(el);
					break;
				    } else if (isglob(*cp)) {
					    terminal_beep(el);
					    break;
				    }
				break;

			default:	/* Terminate and execute cmd */
				endcmd[0] = ch;
				el_wpush(el, endcmd);
				/* FALLTHROUGH */

			case 0033:	/* ESC: Terminate */
				ret = CC_REFRESH;
				done++;
				break;
			}
			break;
		}

		while (el->el_line.lastchar > el->el_line.buffer &&
		    *el->el_line.lastchar != '\n')
			*el->el_line.lastchar-- = '\0';
		*el->el_line.lastchar = '\0';

		if (!done) {

			/* Can't search if unmatched '[' */
			for (cp = &el->el_search.patbuf[el->el_search.patlen-1],
			    ch = L']';
			    cp >= &el->el_search.patbuf[LEN];
			    cp--)
				if (*cp == '[' || *cp == ']') {
					ch = *cp;
					break;
				}
			if (el->el_search.patlen > LEN && ch != L'[') {
				if (redo && newdir == dir) {
					if (pchar == '?') { /* wrap around */
						el->el_history.eventno =
						    newdir == ED_SEARCH_PREV_HISTORY ? 0 : 0x7fffffff;
						if (hist_get(el) == CC_ERROR)
							/* el->el_history.event
							 * no was fixed by
							 * first call */
							(void) hist_get(el);
						el->el_line.cursor = newdir ==
						    ED_SEARCH_PREV_HISTORY ?
						    el->el_line.lastchar :
						    el->el_line.buffer;
					} else
						el->el_line.cursor +=
						    newdir ==
						    ED_SEARCH_PREV_HISTORY ?
						    -1 : 1;
				}
#ifdef ANCHOR
				el->el_search.patbuf[el->el_search.patlen++] =
				    '.';
				el->el_search.patbuf[el->el_search.patlen++] =
				    '*';
#endif
				el->el_search.patbuf[el->el_search.patlen] =
				    '\0';
				if (el->el_line.cursor < el->el_line.buffer ||
				    el->el_line.cursor > el->el_line.lastchar ||
				    (ret = ce_search_line(el, newdir))
				    == CC_ERROR) {
					/* avoid c_setpat */
					el->el_state.lastcmd =
					    (el_action_t) newdir;
					ret = newdir == ED_SEARCH_PREV_HISTORY ?
					    ed_search_prev_history(el, 0) :
					    ed_search_next_history(el, 0);
					if (ret != CC_ERROR) {
						el->el_line.cursor = newdir ==
						    ED_SEARCH_PREV_HISTORY ?
						    el->el_line.lastchar :
						    el->el_line.buffer;
						(void) ce_search_line(el,
						    newdir);
					}
				}
				el->el_search.patlen -= LEN;
				el->el_search.patbuf[el->el_search.patlen] =
				    '\0';
				if (ret == CC_ERROR) {
					terminal_beep(el);
					if (el->el_history.eventno !=
					    ohisteventno) {
						el->el_history.eventno =
						    ohisteventno;
						if (hist_get(el) == CC_ERROR)
							return CC_ERROR;
					}
					el->el_line.cursor = ocursor;
					pchar = '?';
				} else {
					pchar = ':';
				}
			}
			ret = ce_inc_search(el, newdir);

			if (ret == CC_ERROR && pchar == '?' && oldpchar == ':')
				/*
				 * break abort of failed search at last
				 * non-failed
				 */
				ret = CC_NORM;

		}
		if (ret == CC_NORM || (ret == CC_ERROR && oldpatlen == 0)) {
			/* restore on normal return or error exit */
			pchar = oldpchar;
			el->el_search.patlen = oldpatlen;
			if (el->el_history.eventno != ohisteventno) {
				el->el_history.eventno = ohisteventno;
				if (hist_get(el) == CC_ERROR)
					return CC_ERROR;
			}
			el->el_line.cursor = ocursor;
			if (ret == CC_ERROR)
				re_refresh(el);
		}
		if (done || ret != CC_NORM)
			return ret;
	}
}


/* cv_search():
 *	Vi search.
 */
protected el_action_t
cv_search(EditLine *el, int dir)
{
	wchar_t ch;
	wchar_t tmpbuf[EL_BUFSIZ];
	int tmplen;

#ifdef ANCHOR
	tmpbuf[0] = '.';
	tmpbuf[1] = '*';
#endif
	tmplen = LEN;

	el->el_search.patdir = dir;

	tmplen = c_gets(el, &tmpbuf[LEN],
		dir == ED_SEARCH_PREV_HISTORY ? L"\n/" : L"\n?" );
	if (tmplen == -1)
		return CC_REFRESH;

	tmplen += LEN;
	ch = tmpbuf[tmplen];
	tmpbuf[tmplen] = '\0';

	if (tmplen == LEN) {
		/*
		 * Use the old pattern, but wild-card it.
		 */
		if (el->el_search.patlen == 0) {
			re_refresh(el);
			return CC_ERROR;
		}
#ifdef ANCHOR
		if (el->el_search.patbuf[0] != '.' &&
		    el->el_search.patbuf[0] != '*') {
			(void) wcsncpy(tmpbuf, el->el_search.patbuf,
			    sizeof(tmpbuf) / sizeof(*tmpbuf) - 1);
			el->el_search.patbuf[0] = '.';
			el->el_search.patbuf[1] = '*';
			(void) wcsncpy(&el->el_search.patbuf[2], tmpbuf,
			    EL_BUFSIZ - 3);
			el->el_search.patlen++;
			el->el_search.patbuf[el->el_search.patlen++] = '.';
			el->el_search.patbuf[el->el_search.patlen++] = '*';
			el->el_search.patbuf[el->el_search.patlen] = '\0';
		}
#endif
	} else {
#ifdef ANCHOR
		tmpbuf[tmplen++] = '.';
		tmpbuf[tmplen++] = '*';
#endif
		tmpbuf[tmplen] = '\0';
		(void) wcsncpy(el->el_search.patbuf, tmpbuf, EL_BUFSIZ - 1);
		el->el_search.patlen = tmplen;
	}
	el->el_state.lastcmd = (el_action_t) dir;	/* avoid c_setpat */
	el->el_line.cursor = el->el_line.lastchar = el->el_line.buffer;
	if ((dir == ED_SEARCH_PREV_HISTORY ? ed_search_prev_history(el, 0) :
	    ed_search_next_history(el, 0)) == CC_ERROR) {
		re_refresh(el);
		return CC_ERROR;
	}
	if (ch == 0033) {
		re_refresh(el);
		return ed_newline(el, 0);
	}
	return CC_REFRESH;
}


/* ce_search_line():
 *	Look for a pattern inside a line
 */
protected el_action_t
ce_search_line(EditLine *el, int dir)
{
	wchar_t *cp = el->el_line.cursor;
	wchar_t *pattern = el->el_search.patbuf;
	wchar_t oc, *ocp;
#ifdef ANCHOR
	ocp = &pattern[1];
	oc = *ocp;
	*ocp = '^';
#else
	ocp = pattern;
	oc = *ocp;
#endif

	if (dir == ED_SEARCH_PREV_HISTORY) {
		for (; cp >= el->el_line.buffer; cp--) {
			if (el_match(cp, ocp)) {
				*ocp = oc;
				el->el_line.cursor = cp;
				return CC_NORM;
			}
		}
		*ocp = oc;
		return CC_ERROR;
	} else {
		for (; *cp != '\0' && cp < el->el_line.limit; cp++) {
			if (el_match(cp, ocp)) {
				*ocp = oc;
				el->el_line.cursor = cp;
				return CC_NORM;
			}
		}
		*ocp = oc;
		return CC_ERROR;
	}
}


/* cv_repeat_srch():
 *	Vi repeat search
 */
protected el_action_t
cv_repeat_srch(EditLine *el, wint_t c)
{

#ifdef SDEBUG
	(void) fprintf(el->el_errfile, "dir %d patlen %d patbuf %s\n",
	    c, el->el_search.patlen, ct_encode_string(el->el_search.patbuf));
#endif

	el->el_state.lastcmd = (el_action_t) c;	/* Hack to stop c_setpat */
	el->el_line.lastchar = el->el_line.buffer;

	switch (c) {
	case ED_SEARCH_NEXT_HISTORY:
		return ed_search_next_history(el, 0);
	case ED_SEARCH_PREV_HISTORY:
		return ed_search_prev_history(el, 0);
	default:
		return CC_ERROR;
	}
}


/* cv_csearch():
 *	Vi character search
 */
protected el_action_t
cv_csearch(EditLine *el, int direction, wint_t ch, int count, int tflag)
{
	wchar_t *cp;

	if (ch == 0)
		return CC_ERROR;

	if (ch == (wint_t)-1) {
		if (el_wgetc(el, &ch) != 1)
			return ed_end_of_file(el, 0);
	}

	/* Save for ';' and ',' commands */
	el->el_search.chacha = ch;
	el->el_search.chadir = direction;
	el->el_search.chatflg = tflag;

	cp = el->el_line.cursor;
	while (count--) {
		if ((wint_t)*cp == ch)
			cp += direction;
		for (;;cp += direction) {
			if (cp >= el->el_line.lastchar)
				return CC_ERROR;
			if (cp < el->el_line.buffer)
				return CC_ERROR;
			if ((wint_t)*cp == ch)
				break;
		}
	}

	if (tflag)
		cp -= direction;

	el->el_line.cursor = cp;

	if (el->el_chared.c_vcmd.action != NOP) {
		if (direction > 0)
			el->el_line.cursor++;
		cv_delfini(el);
		return CC_REFRESH;
	}
	return CC_CURSOR;
}
@


1.26
log
@Initialize the search buffer.
Otherwise, if you called ed-search-prev-history before doing any
history search but after entering at least one line into the history,
the buffer could get accessed uninitialized, potentially resulting
in a read buffer overrun.

Segfault reported in sftp(1) via djm@@ by Alf Schlichting <A dot
Schlichting at lemarit dot com>, who also confirmed that the patch
fixes the issue for him.

OK martijn@@ czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.25 2016/04/11 21:17:29 schwarze Exp $	*/
/*	$NetBSD: search.c,v 1.44 2016/04/11 18:56:31 christos Exp $	*/
d51 1
@


1.25
log
@delete the "private" and "public" preprocessor macros, just use standard C;
OK martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.24 2016/04/11 20:43:33 schwarze Exp $	*/
d70 1
@


1.24
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.23 2016/04/11 19:54:54 schwarze Exp $	*/
/*	$NetBSD: search.c,v 1.43 2016/04/11 00:50:13 christos Exp $	*/
d95 1
a95 1
public void
@


1.23
log
@Move wrapper macros to the two files actually needing them:
FUNW, Strlen, Strdup, Strcmp, Strncmp, Strncpy, Strncat -> history.c
Strchr, tok_strdup -> tokenizer.c
FUN, TYPE, STR -> both of these files

OK martijn@@

Also proofread by Christian Heckendorf <mbie at ulmus dot me>
who reported some whitespace issues in parse.c.
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.22 2016/04/09 20:15:26 schwarze Exp $	*/
/*	$NetBSD: search.c,v 1.41 2016/04/09 18:43:17 christos Exp $	*/
d107 1
a107 1
el_match(const Char *str, const Char *pat)
d153 1
a153 1
c_hmatch(EditLine *el, const Char *str)
d201 5
a205 7
	static const Char STRfwd[] = {'f', 'w', 'd', '\0'},
	     STRbck[] = {'b', 'c', 'k', '\0'};
	static Char pchar = ':';/* ':' = normal, '?' = failed */
	static Char endcmd[2] = {'\0', '\0'};
	Char *ocursor = el->el_line.cursor, oldpchar = pchar, ch;
	const Char *cp;
	wchar_t wch;
d244 1
a244 1
		if (el_wgetc(el, &wch) != 1)
a246 2
		ch = (Char)wch;

d447 2
a448 2
	Char ch;
	Char tmpbuf[EL_BUFSIZ];
d521 3
a523 3
	Char *cp = el->el_line.cursor;
	Char *pattern = el->el_search.patbuf;
	Char oc, *ocp;
d589 1
a589 1
	Char *cp;
@


1.22
log
@Delete 26 wrapper macros and two wrapper functions that are no
longer needed now that we always compile with wide character support,
reducing code obfuscation.

OK czarkoff@@ martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.21 2016/04/09 19:31:55 schwarze Exp $	*/
d176 1
a176 1
			(void) Strncpy(el->el_search.patbuf, el->el_line.buffer,
d180 1
a180 1
			el->el_search.patlen = Strlen(el->el_search.patbuf);
d324 1
a324 1
				FUN(el,push)(el, endcmd);
d464 1
a464 1
		dir == ED_SEARCH_PREV_HISTORY ? STR("\n/") : STR("\n?") );
d483 1
a483 1
			(void) Strncpy(tmpbuf, el->el_search.patbuf,
d487 1
a487 1
			(void) Strncpy(&el->el_search.patbuf[2], tmpbuf,
d501 1
a501 1
		(void) Strncpy(el->el_search.patbuf, tmpbuf, EL_BUFSIZ - 1);
@


1.21
log
@Always compile with WIDECHAR on and delete that preprocessor switch.
OK martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.20 2016/03/21 15:25:39 schwarze Exp $	*/
/*	$NetBSD: search.c,v 1.40 2016/03/23 22:27:48 christos Exp $	*/
d121 1
a121 1
	if (Strstr(str, pat) != 0)
@


1.20
log
@Reduce the FUN() macro madness by no longer applying it to el_[w]getc(3).
Always use el_wgetc(3) internally.  In the !WIDECHAR case, casting
the result to (Char) is safe because the function returns a byte
rather than a character in that case.
No functional change except for fixing a printf(3) format string issue
when compiled with DEBUG_READ and WIDECHAR.
OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.19 2016/03/20 23:48:27 schwarze Exp $	*/
/*	$NetBSD: search.c,v 1.39 2016/02/24 14:25:38 christos Exp $	*/
a108 1
#ifdef WIDECHAR
a109 1
#endif
@


1.19
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.18 2016/03/20 22:57:59 schwarze Exp $	*/
/*	$NetBSD: search.c,v 1.38 2016/02/16 22:53:14 christos Exp $	*/
d207 1
a207 1
	Char ch, *ocursor = el->el_line.cursor, oldpchar = pchar;
d209 1
d248 1
a248 1
		if (FUN(el,getc)(el, &ch) != 1)
d251 2
d346 1
a346 1
			    ch = ']';
d353 1
a353 1
			if (el->el_search.patlen > LEN && ch != '[') {
d601 1
a601 2
		Char c;
		if (FUN(el,getc)(el, &c) != 1)
a602 1
		ch = c;
@


1.18
log
@Cleanup of private header inclusion:

1. Do not include private headers from "chared.h", "hist.h", "prompt.h",
"refresh.h", "search.h", "sig.h", "terminal.h", "tty.h".
The only private header having to include other private headers is "el.h".
2. Do not include "common.h", "parse.h", "help.h" from "el.h",
and do not include "emacs.h" and "vi.h" from "chared.h",
include them directly where needed.
3. Do include "fcns.h" from "el.h" because el_func_t is needed for "map.h".
4. Do not include private headers again that are already included by "el.h".
5. Include private headers after standard headers.

OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.17 2016/03/20 20:35:38 schwarze Exp $	*/
/*	$NetBSD: search.c,v 1.37 2016/02/16 19:08:41 christos Exp $	*/
d42 1
@


1.17
log
@Delete the useless Int datatype and always use the standard wint_t
directly.  This is not a problem because <wchar_t> is required all
over the place anyway, even when WIDECHAR is not defined.
No functional change except that it fixes a few printf(3)
format string issues, %c vs. %lc.
OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.16 2016/01/30 17:32:52 schwarze Exp $	*/
/*	$NetBSD: search.c,v 1.24 2010/04/15 00:57:33 christos Exp $	*/
d47 1
d49 1
@


1.16
log
@Fifth step in synching with NetBSD:
Delete the silly ptr_t and ioctl_t typedefs
and delete some "#ifdef notdef" code from "sys.h".
No functional change.
This makes hist.h identical to the NetBSD version.
It reduces the remaining diff from +1526 -734 to +1430 -592.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.15 2016/01/30 12:22:20 schwarze Exp $	*/
d561 1
a561 1
cv_repeat_srch(EditLine *el, Int c)
d587 1
a587 1
cv_csearch(EditLine *el, int direction, Int ch, int count, int tflag)
d594 1
a594 1
	if (ch == -1) {
d608 1
a608 1
		if (*cp == ch)
d615 1
a615 1
			if (*cp == ch)
@


1.15
log
@Fourth step in synching with NetBSD:
KNF: Remove parentheses from return lines.  No object change.
This makes emacs.c and prompt.c identical to the NetBSD versions.
It reduces the remaining diff from +2053 -1261 to +1526 -734.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.14 2016/01/30 00:06:39 schwarze Exp $	*/
d83 1
a83 1
	free((ptr_t) el->el_search.patbuf);
d134 1
a134 1
		free((ptr_t) re);
@


1.14
log
@Third step in synching with NetBSD:
* rename fkey_t to funckey_t and el_term_t to el_terminal_t
* rename struct editline member el_term to el_terminal
* rename many functions in terminal.c from term_*() to terminal_*(),
for consistency with the file name and to not look related to <term.h>
No functional change.
This makes refresh.c and sig.c almost identical to the NetBSD versions.
It reduces the remaining diff from +2446 -1805 to +2053 -1420.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.13 2014/10/17 06:07:50 deraadt Exp $	*/
d66 1
a66 1
		return (-1);
d72 1
a72 1
	return (0);
d121 1
a121 1
		return (1);
d130 1
a130 1
	return (rv);
d138 1
a138 1
	return (rv);
d141 1
a141 1
		return (0);
d143 1
a143 1
		return (re_exec(ct_encode_string(str, &conv)) == 1);
d159 1
a159 1
	return (el_match(str, el->el_search.patbuf));
d217 1
a217 1
		return (CC_ERROR);
d245 1
a245 1
			return (ed_end_of_file(el, 0));
d404 1
a404 1
							return (CC_ERROR);
d429 1
a429 1
					return (CC_ERROR);
d436 1
a436 1
			return (ret);
d474 1
a474 1
			return (CC_ERROR);
d505 1
a505 1
		return (CC_ERROR);
d511 1
a511 1
	return (CC_REFRESH);
d538 1
a538 1
				return (CC_NORM);
d542 1
a542 1
		return (CC_ERROR);
d548 1
a548 1
				return (CC_NORM);
d552 1
a552 1
		return (CC_ERROR);
d574 1
a574 1
		return (ed_search_next_history(el, 0));
d576 1
a576 1
		return (ed_search_prev_history(el, 0));
d578 1
a578 1
		return (CC_ERROR);
@


1.13
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.12 2010/06/30 00:05:35 nicm Exp $	*/
d251 1
a251 1
				term_beep(el);
d276 1
a276 1
				term_beep(el);
d300 1
a300 1
							term_beep(el);
d313 1
a313 1
					    term_beep(el);
d398 1
a398 1
					term_beep(el);
@


1.12
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 1
a63 1
	el->el_search.patbuf = el_malloc(EL_BUFSIZ *
d83 1
a83 1
	el_free((ptr_t) el->el_search.patbuf);
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.10 2003/11/25 20:12:38 otto Exp $	*/
/*	$NetBSD: search.c,v 1.19 2003/10/25 06:42:41 christos Exp $	*/
d63 2
a64 1
	el->el_search.patbuf = (char *) el_malloc(EL_BUFSIZ);
d104 1
a104 1
el_match(const char *str, const char *pat)
d106 3
d120 1
a120 1
	if (strstr(str, pat) != NULL)
d124 2
a125 2
	if (regcomp(&re, pat, 0) == 0) {
		rv = regexec(&re, str, 0, NULL, 0) == 0;
d132 2
a133 2
	if ((re = regcomp(pat)) != NULL) {
		rv = regexec(re, str);
d140 1
a140 1
	if (re_comp(pat) != NULL)
d143 1
a143 1
		return (re_exec(str) == 1);
d152 1
a152 1
c_hmatch(EditLine *el, const char *str)
d175 1
a175 1
			(void) strncpy(el->el_search.patbuf, el->el_line.buffer,
d179 1
a179 1
			el->el_search.patlen = strlen(el->el_search.patbuf);
d200 1
a200 1
	static const char STRfwd[] = {'f', 'w', 'd', '\0'},
d202 4
a205 4
	static char pchar = ':';/* ':' = normal, '?' = failed */
	static char endcmd[2] = {'\0', '\0'};
	char ch, *ocursor = el->el_line.cursor, oldpchar = pchar;
	const char *cp;
d210 1
a210 1
	int oldpatlen = el->el_search.patlen;
d214 2
a215 1
	if (el->el_line.lastchar + sizeof(STRfwd) / sizeof(char) + 2 +
d244 1
a244 1
		if (el_getc(el, &ch) != 1)
d271 1
d320 1
a320 1
				el_push(el, endcmd);
d447 2
a448 2
	char ch;
	char tmpbuf[EL_BUFSIZ];
d460 1
a460 1
		dir == ED_SEARCH_PREV_HISTORY ? "\n/" : "\n?" );
d479 2
a480 2
			(void) strncpy(tmpbuf, el->el_search.patbuf,
			    sizeof(tmpbuf) - 1);
d483 1
a483 1
			(void) strncpy(&el->el_search.patbuf[2], tmpbuf,
d497 1
a497 1
		(void) strncpy(el->el_search.patbuf, tmpbuf, EL_BUFSIZ - 1);
d521 3
a523 3
	char *cp = el->el_line.cursor;
	char *pattern = el->el_search.patbuf;
	char oc, *ocp;
d561 1
a561 1
cv_repeat_srch(EditLine *el, int c)
d566 1
a566 1
	    c, el->el_search.patlen, el->el_search.patbuf);
d587 1
a587 1
cv_csearch(EditLine *el, int direction, int ch, int count, int tflag)
d589 1
a589 1
	char *cp;
d595 2
a596 2
		char c;
		if (el_getc(el, &c) != 1)
@


1.10
log
@Sync libedit to NetBSD libedit as of Nov 8, 2003.
Tested by jmc@@ djm@@ and myself
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.9 2003/10/31 08:42:24 otto Exp $	*/
a36 7
#if !defined(lint) && !defined(SCCSID)
#if 0
static char sccsid[] = "@@(#)search.c	8.1 (Berkeley) 6/4/93";
#else
static const char rcsid[] = "$OpenBSD: search.c,v 1.9 2003/10/31 08:42:24 otto Exp $";
#endif
#endif /* not lint && not SCCSID */
@


1.9
log
@Update to NetBSD libedit (from Oct 1, 2003), adding some string
cleaning and history bug fixes. The code includes GNU libreadline
functionality, but the corresponding header files are not installed,
since some libreadline functions are missing. There are some minor API
changes, notably:

old: EditLine *el_init(const char *, FILE *, FILE *);
new: EditLine *el_init(const char *, FILE *, FILE *, FILE *);

old: HistEvent *history(History *h, int op, ...);
new: int history(History *h, HistEvent *ev, int op, ...); plus some
changes in operation names. See editline(3) for details.

Tested by djm@@, mouring@@, jmc@@.

ok deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: search.c,v 1.15 2003/08/07 16:44:33 agc Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD$";
d226 1
d229 2
d239 1
a239 1
		for (cp = &el->el_search.patbuf[1];
d252 1
a252 1
			if (el->el_search.patlen > EL_BUFSIZ - 3)
d274 1
a274 1
			if (el->el_search.patlen > 1)
d289 3
a291 2
				for (cp = &el->el_search.patbuf[1];; cp++)
				    if (cp >= &el->el_search.patbuf[el->el_search.patlen]) {
d293 1
a293 1
					    el->el_search.patlen - 1;
d299 2
a300 2
						if (el->el_search.patlen >
						    EL_BUFSIZ - 3) {
d342 1
a342 1
			    cp > el->el_search.patbuf;
d348 1
a348 1
			if (el->el_search.patlen > 1 && ch != '[') {
d378 2
a379 3
				    (ret = ce_search_line(el,
				    &el->el_search.patbuf[1],
				    newdir)) == CC_ERROR) {
a391 1
						    &el->el_search.patbuf[1],
d395 2
a396 1
				el->el_search.patbuf[--el->el_search.patlen] =
a454 3
#define	LEN	2
#else
#define	LEN	0
d520 1
a520 1
ce_search_line(EditLine *el, char *pattern, int dir)
d522 11
a532 1
	char *cp;
d535 3
a537 2
		for (cp = el->el_line.cursor; cp >= el->el_line.buffer; cp--)
			if (el_match(cp, pattern)) {
d541 2
d545 3
a547 3
		for (cp = el->el_line.cursor; *cp != '\0' &&
		    cp < el->el_line.limit; cp++)
			if (el_match(cp, pattern)) {
d551 2
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.7 2003/06/01 21:34:58 miod Exp $	*/
/*	$NetBSD: search.c,v 1.4 1997/01/23 14:02:47 mrg Exp $		*/
d36 1
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: search.c,v 1.7 2003/06/01 21:34:58 miod Exp $";
a47 1
#include "sys.h"
d59 1
a59 1
#define EL_CURSOR(el) \
d67 1
a67 2
search_init(el)
    EditLine *el;
d69 10
a78 6
    el->el_search.patbuf = (char *) el_malloc(EL_BUFSIZ);
    el->el_search.patlen = 0;
    el->el_search.patdir = -1;
    el->el_search.chacha = '\0';
    el->el_search.chadir = -1;
    return 0;
d86 1
a86 2
search_end(el)
    EditLine *el;
d88 3
a90 2
    el_free((ptr_t) el->el_search.patbuf);
    el->el_search.patbuf = NULL;
d93 1
d98 1
a98 1
public void 
d100 1
a100 2
regerror(msg)
    const char *msg;
d105 1
d110 1
a110 3
el_match(str, pat)
    const char *str;
    const char *pat;
d113 2
a114 2
    regex_t re;
    int rv;
d116 5
a120 5
    regexp *rp;
    int rv;
#else 
    extern char *re_comp(const char *);
    extern int re_exec(const char *);
d123 2
a124 2
    if (strstr(str, pat) != NULL)
	return 1;
d127 7
a133 7
    if (regcomp(&re, pat, 0) == 0) {
	rv = regexec(&re, str, 0, NULL, 0) == 0;
	regfree(&re);
    } else {
	rv = 0;
    }
    return rv;
d135 7
a141 7
    if ((re = regcomp(pat)) != NULL) {
	rv = regexec(re, str);
	free((ptr_t) re);
    } else {
	rv = 0;
    }
    return rv;
d143 4
a146 4
    if (re_comp(pat) != NULL)
	return 0;
    else
    return re_exec(str) == 1;
d155 1
a155 3
c_hmatch(el, str)
    EditLine *el;
    const char *str;
d158 2
a159 2
    (void)fprintf(el->el_errfile, "match `%s' with `%s'\n",
		   el->el_search.patbuf, str);
d161 2
a162 2
    
    return el_match(str, el->el_search.patbuf);
d166 1
a166 1
/* c_setpat(): 
d170 1
a170 2
c_setpat(el)
    EditLine *el;
d172 11
a182 9
    if (el->el_state.lastcmd != ED_SEARCH_PREV_HISTORY && 
	el->el_state.lastcmd != ED_SEARCH_NEXT_HISTORY) {
	el->el_search.patlen = EL_CURSOR(el) - el->el_line.buffer;
	if (el->el_search.patlen >= EL_BUFSIZ) 
	    el->el_search.patlen = EL_BUFSIZ -1;
	if (el->el_search.patlen >= 0)  {
	    (void)strncpy(el->el_search.patbuf, el->el_line.buffer, 
			   el->el_search.patlen);
	    el->el_search.patbuf[el->el_search.patlen] = '\0';
a183 3
	else
	    el->el_search.patlen = strlen(el->el_search.patbuf);
    }
d185 8
a192 6
    (void)fprintf(el->el_errfile, "\neventno = %d\n", el->el_history.eventno);
    (void)fprintf(el->el_errfile, "patlen = %d\n", el->el_search.patlen);
    (void)fprintf(el->el_errfile, "patbuf = \"%s\"\n", el->el_search.patbuf);
    (void)fprintf(el->el_errfile, "cursor %d lastchar %d\n", 
		   EL_CURSOR(el) - el->el_line.buffer, 
		   el->el_line.lastchar - el->el_line.buffer);
d201 19
a219 20
ce_inc_search(el, dir)
    EditLine *el;
    int dir;
{
    static char STRfwd[] = { 'f', 'w', 'd', '\0' },
		STRbck[] = { 'b', 'c', 'k', '\0' };
    static char pchar = ':';	/* ':' = normal, '?' = failed */
    static char endcmd[2] = { '\0', '\0' };
    char ch, *cp, *ocursor = el->el_line.cursor, oldpchar = pchar;

    el_action_t ret = CC_NORM;

    int ohisteventno = el->el_history.eventno,
	oldpatlen = el->el_search.patlen,
	newdir = dir,
        done, redo;

    if (el->el_line.lastchar + sizeof(STRfwd) / sizeof(char) + 2 + 
	el->el_search.patlen >= el->el_line.limit)
	return CC_ERROR;
d221 1
a221 1
    for (;;) {
d223 2
a224 2
	if (el->el_search.patlen == 0) {	/* first round */
	    pchar = ':';
d226 2
a227 2
	    el->el_search.patbuf[el->el_search.patlen++] = '.';
	    el->el_search.patbuf[el->el_search.patlen++] = '*';
d229 11
a239 25
	}
	done = redo = 0;
	*el->el_line.lastchar++ = '\n';
	for (cp = newdir == ED_SEARCH_PREV_HISTORY ? STRbck : STRfwd; 
	     *cp; *el->el_line.lastchar++ = *cp++)
	     continue;
	*el->el_line.lastchar++ = pchar;
	for (cp = &el->el_search.patbuf[1]; 
	      cp < &el->el_search.patbuf[el->el_search.patlen]; 
	      *el->el_line.lastchar++ = *cp++)
	    continue;
	*el->el_line.lastchar = '\0';
	re_refresh(el);

	if (el_getc(el, &ch) != 1)
	    return ed_end_of_file(el, 0);

	switch (el->el_map.current[(unsigned char) ch]) {
	case ED_INSERT:
	case ED_DIGIT:
	    if (el->el_search.patlen > EL_BUFSIZ - 3)
		term_beep(el);
	    else {
		el->el_search.patbuf[el->el_search.patlen++] = ch;
		*el->el_line.lastchar++ = ch;
a241 2
	    }
	    break;
d243 26
a268 16
	case EM_INC_SEARCH_NEXT:
	    newdir = ED_SEARCH_NEXT_HISTORY;
	    redo++;
	    break;

	case EM_INC_SEARCH_PREV:
	    newdir = ED_SEARCH_PREV_HISTORY;
	    redo++;
	    break;

	case ED_DELETE_PREV_CHAR:
	    if (el->el_search.patlen > 1)
		done++;
	    else 
		term_beep(el);
	    break;
d270 4
a273 17
	default:
	    switch (ch) {
	    case 0007:		/* ^G: Abort */
		ret = CC_ERROR;
		done++;
		break;

	    case 0027:		/* ^W: Append word */
		/* No can do if globbing characters in pattern */
		for (cp = &el->el_search.patbuf[1]; ; cp++)
		    if (cp >= &el->el_search.patbuf[el->el_search.patlen]) {
			el->el_line.cursor += el->el_search.patlen - 1;
			cp = c__next_word(el->el_line.cursor, 
					  el->el_line.lastchar, 1, ce__isword);
			while (el->el_line.cursor < cp && 
			       *el->el_line.cursor != '\n') {
			    if (el->el_search.patlen > EL_BUFSIZ - 3) {
d275 48
a323 4
			    }
			    el->el_search.patbuf[el->el_search.patlen++] = 
				*el->el_line.cursor;
			    *el->el_line.lastchar++ = *el->el_line.cursor++;
a324 3
			el->el_line.cursor = ocursor;
			*el->el_line.lastchar = '\0';
			re_refresh(el);
a325 32
		    } else if (isglob(*cp)) {
			term_beep(el);
			break;
		    }
		break;
	    
	    default:		/* Terminate and execute cmd */
		endcmd[0] = ch;
		el_push(el, endcmd); 
		/*FALLTHROUGH*/

	    case 0033:		/* ESC: Terminate */
		ret = CC_REFRESH;
		done++;
		break;
	    }
	    break;
	}

	while (el->el_line.lastchar > el->el_line.buffer && 
	       *el->el_line.lastchar != '\n')
	    *el->el_line.lastchar-- = '\0';
	*el->el_line.lastchar = '\0';

	if (!done) {

	    /* Can't search if unmatched '[' */
	    for (cp = &el->el_search.patbuf[el->el_search.patlen-1], ch = ']'; 
		 cp > el->el_search.patbuf; cp--)
		if (*cp == '[' || *cp == ']') {
		    ch = *cp;
		    break;
d328 4
a331 49
	    if (el->el_search.patlen > 1 && ch != '[') {
		if (redo && newdir == dir) {
		    if (pchar == '?') {	/* wrap around */
			el->el_history.eventno = 
			    newdir == ED_SEARCH_PREV_HISTORY ? 0 : 0x7fffffff;
			if (hist_get(el) == CC_ERROR)
			    /* el->el_history.eventno was fixed by first call */
			    (void)hist_get(el);
			el->el_line.cursor = newdir == ED_SEARCH_PREV_HISTORY ?
			    el->el_line.lastchar : el->el_line.buffer;
		    } else
			el->el_line.cursor += 
				newdir == ED_SEARCH_PREV_HISTORY ? -1 : 1;
		}
#ifdef ANCHOR
		el->el_search.patbuf[el->el_search.patlen++] = '.';
		el->el_search.patbuf[el->el_search.patlen++] = '*';
#endif
		el->el_search.patbuf[el->el_search.patlen] = '\0';
		if (el->el_line.cursor < el->el_line.buffer || 
		    el->el_line.cursor > el->el_line.lastchar ||
		    (ret = ce_search_line(el, &el->el_search.patbuf[1], 
					  newdir)) == CC_ERROR) {
		    /* avoid c_setpat */
		    el->el_state.lastcmd = (el_action_t) newdir; 
		    ret = newdir == ED_SEARCH_PREV_HISTORY ?
			ed_search_prev_history(el, 0) : 
			ed_search_next_history(el, 0);
		    if (ret != CC_ERROR) {
			el->el_line.cursor = newdir == ED_SEARCH_PREV_HISTORY ?
			    el->el_line.lastchar : el->el_line.buffer;
			(void)ce_search_line(el, &el->el_search.patbuf[1], 
					      newdir);
		    }
		}
		el->el_search.patbuf[--el->el_search.patlen] = '\0';
		if (ret == CC_ERROR) {
		    term_beep(el);
		    if (el->el_history.eventno != ohisteventno) {
			el->el_history.eventno = ohisteventno;
			if (hist_get(el) == CC_ERROR)
			    return CC_ERROR;
		    }
		    el->el_line.cursor = ocursor;
		    pchar = '?';
		} else {
		    pchar = ':';
		}
	    }
d333 1
a333 1
	    ret = ce_inc_search(el, newdir);
d335 76
a410 3
	    if (ret == CC_ERROR && pchar == '?' && oldpchar == ':') 
		/* break abort of failed search at last non-failed */
		ret = CC_NORM;
d412 6
a417 1
	}
d419 16
a434 12
	if (ret == CC_NORM || (ret == CC_ERROR && oldpatlen == 0)) {
	    /* restore on normal return or error exit */
	    pchar = oldpchar;
	    el->el_search.patlen = oldpatlen;
	    if (el->el_history.eventno != ohisteventno) {
		el->el_history.eventno = ohisteventno;
		if (hist_get(el) == CC_ERROR)
		    return CC_ERROR;
	    }
	    el->el_line.cursor = ocursor;
	    if (ret == CC_ERROR)
		re_refresh(el);
a435 3
	if (done || ret != CC_NORM)
	    return ret;
    }
d443 5
a447 7
cv_search(el, dir)
    EditLine *el;
    int dir;
{
    char ch;
    char tmpbuf[EL_BUFSIZ];
    int tmplen;
a448 1
    tmplen = 0;
d450 5
a454 2
    tmpbuf[tmplen++] = '.';
    tmpbuf[tmplen++] = '*';
d456 3
d460 4
a463 9
    el->el_line.buffer[0] = '\0';
    el->el_line.lastchar = el->el_line.buffer;
    el->el_line.cursor = el->el_line.buffer;
    el->el_search.patdir = dir;

    c_insert(el, 2);	/* prompt + '\n' */
    *el->el_line.cursor++ = '\n';
    *el->el_line.cursor++ = dir == ED_SEARCH_PREV_HISTORY ? '/' : '?';
    re_refresh(el);
d465 3
a467 5
#ifdef ANCHOR
# define LEN 2
#else
# define LEN 0
#endif
d469 8
a476 15
    tmplen = c_gets(el, &tmpbuf[LEN]) + LEN;
    ch = tmpbuf[tmplen];
    tmpbuf[tmplen] = '\0';

    if (tmplen == LEN) {
	/*
	 * Use the old pattern, but wild-card it.
	 */
	if (el->el_search.patlen == 0) {
	    el->el_line.buffer[0] = '\0';
	    el->el_line.lastchar = el->el_line.buffer;
	    el->el_line.cursor = el->el_line.buffer;
	    re_refresh(el);
	    return CC_ERROR;
	}
d478 13
a490 13
	if (el->el_search.patbuf[0] != '.' && el->el_search.patbuf[0] != '*') {
	    (void)strncpy(tmpbuf, el->el_search.patbuf, sizeof(tmpbuf) - 1);
	    tmpbuf[sizeof(tmpbuf) - 1] = '\0';
	    el->el_search.patbuf[0] = '.';
	    el->el_search.patbuf[1] = '*';
	    (void)strncpy(&el->el_search.patbuf[2], tmpbuf,
		EL_BUFSIZ - 3);
	    el->el_search.patbuf[EL_BUFSIZ - 1] = '\0';
	    el->el_search.patlen++;
	    el->el_search.patbuf[el->el_search.patlen++] = '.';
	    el->el_search.patbuf[el->el_search.patlen++] = '*';
	    el->el_search.patbuf[el->el_search.patlen] = '\0';
	}
d492 1
a492 2
    }
    else {
d494 2
a495 2
	tmpbuf[tmplen++] = '.';
	tmpbuf[tmplen++] = '*';
d497 11
a507 14
	tmpbuf[tmplen] = '\0';
	(void)strncpy(el->el_search.patbuf, tmpbuf,
	    EL_BUFSIZ - 1);
	el->el_search.patbuf[EL_BUFSIZ - 1] = '\0';
	el->el_search.patlen = strlen(el->el_search.patbuf);
    }
    el->el_state.lastcmd = (el_action_t) dir; /* avoid c_setpat */
    el->el_line.cursor = el->el_line.lastchar = el->el_line.buffer;
    if ((dir == ED_SEARCH_PREV_HISTORY ? ed_search_prev_history(el, 0) : 
			        ed_search_next_history(el, 0)) == CC_ERROR) {
	re_refresh(el);
	return CC_ERROR;
    }
    else {
d509 2
a510 5
	    re_refresh(el);
	    *el->el_line.lastchar++ = '\n';
	    *el->el_line.lastchar = '\0';
	    re_goto_bottom(el);
	    return CC_NEWLINE;
d512 1
a512 3
	else
	    return CC_REFRESH;
    }
d520 20
a539 23
ce_search_line(el, pattern, dir)
    EditLine *el;
    char *pattern;
    int dir;
{
    char *cp;

    if (dir == ED_SEARCH_PREV_HISTORY) {
	for (cp = el->el_line.cursor; cp >= el->el_line.buffer; cp--)
	    if (el_match(cp, pattern)) {
		el->el_line.cursor = cp;
		return CC_NORM;
	    }
	return CC_ERROR;
    } else {
	for (cp = el->el_line.cursor; *cp != '\0' && 
	     cp < el->el_line.limit; cp++)
	    if (el_match(cp, pattern)) {
		el->el_line.cursor = cp;
		return CC_NORM;
	    }
	return CC_ERROR;
    }
d547 1
a547 3
cv_repeat_srch(el, c)
    EditLine *el;
    int c;
d549 1
d551 2
a552 2
    (void)fprintf(el->el_errfile, "dir %d patlen %d patbuf %s\n", 
		   c, el->el_search.patlen, el->el_search.patbuf);
d555 2
a556 2
    el->el_state.lastcmd = (el_action_t) c;  /* Hack to stop c_setpat */
    el->el_line.lastchar = el->el_line.buffer;
d558 8
a565 8
    switch (c) {
    case ED_SEARCH_NEXT_HISTORY:
	return ed_search_next_history(el, 0);
    case ED_SEARCH_PREV_HISTORY:
	return ed_search_prev_history(el, 0);
    default:
	return CC_ERROR;
    }
d569 2
a570 2
/* cv_csearch_back():
 *	Vi character search reverse
d573 6
a578 27
cv_csearch_back(el, ch, count, tflag)
    EditLine *el;
    int ch, count, tflag;
{
    char *cp;

    cp = el->el_line.cursor;
    while (count--) {
	if (*cp == ch) 
	    cp--;
	while (cp > el->el_line.buffer && *cp != ch) 
	    cp--;
    }

    if (cp < el->el_line.buffer || (cp == el->el_line.buffer && *cp != ch))
	return CC_ERROR;

    if (*cp == ch && tflag)
	cp++;

    el->el_line.cursor = cp;

    if (el->el_chared.c_vcmd.action & DELETE) {
	el->el_line.cursor++;
	cv_delfini(el);
	return CC_REFRESH;
    }
d580 28
a607 3
    re_refresh_cursor(el);
    return CC_NORM;
}
d609 1
d611 7
a617 33
/* cv_csearch_fwd():
 *	Vi character search forward
 */
protected el_action_t
cv_csearch_fwd(el, ch, count, tflag)
    EditLine *el;
    int ch, count, tflag;
{
    char *cp;

    cp = el->el_line.cursor;
    while (count--) {
	if(*cp == ch) 
	    cp++;
	while (cp < el->el_line.lastchar && *cp != ch) 
	    cp++;
    }

    if (cp >= el->el_line.lastchar)
	return CC_ERROR;

    if (*cp == ch && tflag)
	cp--;

    el->el_line.cursor = cp;

    if (el->el_chared.c_vcmd.action & DELETE) {
	el->el_line.cursor++;
	cv_delfini(el);
	return CC_REFRESH;
    }
    re_refresh_cursor(el);
    return CC_NORM;
@


1.7
log
@Correct string bounds; spotted by avsm@@'s bounds checker.
ok krw@@ rohee@@
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.6 2003/05/01 21:11:21 avsm Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: search.c,v 1.6 2003/05/01 21:11:21 avsm Exp $";
@


1.6
log
@is -Wall clean by making rcsid const
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.5 2002/02/16 21:27:26 millert Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: search.c,v 1.5 2002/02/16 21:27:26 millert Exp $";
d476 2
a477 2
		sizeof(el->el_search.patbuf) - 3);
	    el->el_search.patbuf[sizeof(el->el_search.patbuf) - 1] = '\0';
d492 2
a493 2
	    sizeof(el->el_search.patbuf) - 1);
	el->el_search.patbuf[sizeof(el->el_search.patbuf) - 1] = '\0';
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.4 1997/06/29 23:40:51 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: search.c,v 1.4 1997/06/29 23:40:51 millert Exp $";
@


1.4
log
@Updates from NetBSD (christos@@netbsd.org)
  * Portability fixes:
	__const         -> const
	BADSIG          -> SIG_ERR
	int flags       -> u_int flags
	#if __STDC__    -> #ifdef __STDC__
  * Don't allow CSWTCH to interfere with CSUSP on __SVR4 systems.
  * Return -1 if the terminal set operation resulted in dumb terminal settings.
  * Handle properly the case where the last line in the sourced file does
    not have a trailing '\n'. From Jeffrey C Honig.
  * editrc -> editline in editline(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: search.c,v 1.3 1997/03/14 05:13:01 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: search.c,v 1.3 1997/03/14 05:13:01 millert Exp $";
d121 2
a122 2
    extern char *re_comp __P((const char *));
    extern int re_exec __P((const char *));
@


1.3
log
@fix el_source() - a block needed braces around it (from NetBSD)
Some strcpy() -> strncpy (from NetBSD)
Some KNF
Add current NetBSD tags
@
text
@d1 2
a2 2
/*	$OpenBSD: search.c,v 1.2 1997/01/16 05:18:44 millert Exp $	*/
/*	$NetBSD: refresh.h,v 1.2 1997/01/11 06:48:08 lukem Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: search.c,v 1.2 1997/01/16 05:18:44 millert Exp $";
@


1.2
log
@Merge in NetBSD libedit changes and new man pages.  Also fix some
strncpy() usage in their code.  NetBSD change log was:
    * add a man page for the editline routines
    * add a man page describing editrc
    * fix bugs in el_parse():
      * didn't execute command when program name matched (test reversed)
      * was checking against empty string instead of program name
      * after checks, command to run also pointed to empty string
    * document ^char and \ escape sequences
    * when parsing ^char control chars, check the correct char when determining
      validity (previously, ^char was a NOP interpreted as the literal string
      because of this bug)
    * Implement CC_REDISPLAY, which (unlike CC_REFRESH) redraws the entire input
    * line (a la ^R). This is useful if the binding outputs information and
    * mucks up the input line. To be used in ``list-choices'' bindings (refer
    * to the ^D binding in csh when filec is set)
@
text
@d1 2
a2 1
/*	$OpenBSD: $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: $";
d162 1
a162 1
    (void) fprintf(el->el_errfile, "match `%s' with `%s'\n",
d183 1
a183 1
	    (void) strncpy(el->el_search.patbuf, el->el_line.buffer, 
d191 4
a194 4
    (void) fprintf(el->el_errfile, "\neventno = %d\n", el->el_history.eventno);
    (void) fprintf(el->el_errfile, "patlen = %d\n", el->el_search.patlen);
    (void) fprintf(el->el_errfile, "patbuf = \"%s\"\n", el->el_search.patbuf);
    (void) fprintf(el->el_errfile, "cursor %d lastchar %d\n", 
d350 1
a350 1
			    (void) hist_get(el);
d374 1
a374 1
			(void) ce_search_line(el, &el->el_search.patbuf[1], 
d471 2
a472 1
	    (void) strcpy(tmpbuf, el->el_search.patbuf);
d475 3
a477 2
	    (void) strncpy(&el->el_search.patbuf[2], tmpbuf, EL_BUFSIZ - 3);
	    el->el_search.patbuf[EL_BUFSIZ - 1] = '\0';
d491 4
a494 2
	(void) strcpy(el->el_search.patbuf, tmpbuf);
	el->el_search.patlen = tmplen;
d556 1
a556 1
    (void) fprintf(el->el_errfile, "dir %d patlen %d patbuf %s\n", 
@


1.1
log
@Initial revision
@
text
@d1 2
d40 1
d42 3
d473 2
a474 1
	    (void) strcpy(&el->el_search.patbuf[2], tmpbuf);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
