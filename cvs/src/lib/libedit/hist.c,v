head	1.18;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.20
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.18
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.14
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.12
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.10
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.26
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.22
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.20
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.18
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.26
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.24
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.22
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.20
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2017.04.12.18.24.37;	author tb;	state Exp;
branches;
next	1.17;
commitid	0AFky3THlYlICFpl;

1.17
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	OUneMOe0l7HombT5;

1.16
date	2016.04.11.19.54.54;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	xizUpRlYj2C4Hcj6;

1.15
date	2016.04.09.20.15.26;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	0bnhGLXZIvXlnMLp;

1.14
date	2016.04.09.19.31.55;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	t22PDRfkb5DJX3rc;

1.13
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	tRHhB2RN3ZD1GvoI;

1.12
date	2016.01.30.17.32.52;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	wAt9MiELkmlnoi4U;

1.11
date	2016.01.30.12.22.20;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	dCN84ovvbfYwqrqX;

1.10
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	bdUOvGFxUQgqZg7x;

1.9
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.25.20.12.38;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.31.08.42.24;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.01.21.11.21;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	97.03.14.05.12.48;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.16.05.18.33;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Use calloc(3) and recallocarray(3) instead of *alloc* + memset(0).

ok deraadt
@
text
@/*	$OpenBSD: hist.c,v 1.17 2016/04/11 20:43:33 schwarze Exp $	*/
/*	$NetBSD: hist.c,v 1.28 2016/04/11 00:50:13 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "config.h"

/*
 * hist.c: History access functions
 */
#include <stdlib.h>
#include <string.h>

#include "el.h"

/* hist_init():
 *	Initialization function.
 */
protected int
hist_init(EditLine *el)
{

	el->el_history.fun = NULL;
	el->el_history.ref = NULL;
	el->el_history.buf = reallocarray(NULL, EL_BUFSIZ,
	    sizeof(*el->el_history.buf));
	el->el_history.sz  = EL_BUFSIZ;
	if (el->el_history.buf == NULL)
		return -1;
	el->el_history.last = el->el_history.buf;
	return 0;
}


/* hist_end():
 *	clean up history;
 */
protected void
hist_end(EditLine *el)
{

	free(el->el_history.buf);
	el->el_history.buf = NULL;
}


/* hist_set():
 *	Set new history interface
 */
protected int
hist_set(EditLine *el, hist_fun_t fun, void *ptr)
{

	el->el_history.ref = ptr;
	el->el_history.fun = fun;
	return 0;
}


/* hist_get():
 *	Get a history line and update it in the buffer.
 *	eventno tells us the event to get.
 */
protected el_action_t
hist_get(EditLine *el)
{
	const wchar_t *hp;
	int h;

	if (el->el_history.eventno == 0) {	/* if really the current line */
		(void) wcsncpy(el->el_line.buffer, el->el_history.buf,
		    el->el_history.sz);
		el->el_line.lastchar = el->el_line.buffer +
		    (el->el_history.last - el->el_history.buf);

#ifdef KSHVI
		if (el->el_map.type == MAP_VI)
			el->el_line.cursor = el->el_line.buffer;
		else
#endif /* KSHVI */
			el->el_line.cursor = el->el_line.lastchar;

		return CC_REFRESH;
	}
	if (el->el_history.ref == NULL)
		return CC_ERROR;

	hp = HIST_FIRST(el);

	if (hp == NULL)
		return CC_ERROR;

	for (h = 1; h < el->el_history.eventno; h++)
		if ((hp = HIST_NEXT(el)) == NULL) {
			el->el_history.eventno = h;
			return CC_ERROR;
		}
	(void) wcsncpy(el->el_line.buffer, hp,
			(size_t)(el->el_line.limit - el->el_line.buffer));
	el->el_line.buffer[el->el_line.limit - el->el_line.buffer - 1] = '\0';
	el->el_line.lastchar = el->el_line.buffer + wcslen(el->el_line.buffer);

	if (el->el_line.lastchar > el->el_line.buffer
	    && el->el_line.lastchar[-1] == '\n')
		el->el_line.lastchar--;
	if (el->el_line.lastchar > el->el_line.buffer
	    && el->el_line.lastchar[-1] == ' ')
		el->el_line.lastchar--;
#ifdef KSHVI
	if (el->el_map.type == MAP_VI)
		el->el_line.cursor = el->el_line.buffer;
	else
#endif /* KSHVI */
		el->el_line.cursor = el->el_line.lastchar;

	return CC_REFRESH;
}


/* hist_command()
 *	process a history command
 */
protected int
hist_command(EditLine *el, int argc, const wchar_t **argv)
{
	const wchar_t *str;
	int num;
	HistEvent ev;

	if (el->el_history.ref == NULL)
		return -1;

	if (argc == 1 || wcscmp(argv[1], L"list") == 0) {
		 /* List history entries */

		for (str = HIST_LAST(el); str != NULL; str = HIST_PREV(el))
			(void) fprintf(el->el_outfile, "%d %s",
			    el->el_history.ev.num, ct_encode_string(str, &el->el_scratch));
		return 0;
	}

	if (argc != 3)
		return -1;

	num = (int)wcstol(argv[2], NULL, 0);

	if (wcscmp(argv[1], L"size") == 0)
		return history(el->el_history.ref, &ev, H_SETSIZE, num);

	if (wcscmp(argv[1], L"unique") == 0)
		return history(el->el_history.ref, &ev, H_SETUNIQUE, num);

	return -1;
}

/* hist_enlargebuf()
 *	Enlarge history buffer to specified value. Called from el_enlargebufs().
 *	Return 0 for failure, 1 for success.
 */
protected int
/*ARGSUSED*/
hist_enlargebuf(EditLine *el, size_t oldsz, size_t newsz)
{
	wchar_t *newbuf;

	newbuf = recallocarray(el->el_history.buf, oldsz, newsz,
	    sizeof(*newbuf));
	if (!newbuf)
		return 0;

	el->el_history.last = newbuf +
				(el->el_history.last - el->el_history.buf);
	el->el_history.buf = newbuf;
	el->el_history.sz  = newsz;

	return 1;
}

protected wchar_t *
hist_convert(EditLine *el, int fn, void *arg)
{
	HistEventW ev;
	if ((*(el)->el_history.fun)((el)->el_history.ref, &ev, fn, arg) == -1)
		return NULL;
	return ct_decode_string((const char *)(const void *)ev.str,
	    &el->el_scratch);
}
@


1.17
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.16 2016/04/11 19:54:54 schwarze Exp $	*/
d196 2
a197 1
	newbuf = reallocarray(el->el_history.buf, newsz, sizeof(*newbuf));
a199 2

	(void) memset(&newbuf[oldsz], '\0', (newsz - oldsz) * sizeof(*newbuf));
@


1.16
log
@Move wrapper macros to the two files actually needing them:
FUNW, Strlen, Strdup, Strcmp, Strncmp, Strncpy, Strncat -> history.c
Strchr, tok_strdup -> tokenizer.c
FUN, TYPE, STR -> both of these files

OK martijn@@

Also proofread by Christian Heckendorf <mbie at ulmus dot me>
who reported some whitespace issues in parse.c.
@
text
@d1 2
a2 2
/*	$OpenBSD: hist.c,v 1.15 2016/04/09 20:15:26 schwarze Exp $	*/
/*	$NetBSD: hist.c,v 1.26 2016/04/09 18:43:17 christos Exp $	*/
d97 1
a97 1
	const Char *hp;
d154 1
a154 1
hist_command(EditLine *el, int argc, const Char **argv)
d156 1
a156 1
	const Char *str;
d194 1
a194 1
	Char *newbuf;
@


1.15
log
@Delete 26 wrapper macros and two wrapper functions that are no
longer needed now that we always compile with wide character support,
reducing code obfuscation.

OK czarkoff@@ martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.14 2016/04/09 19:31:55 schwarze Exp $	*/
d101 1
a101 1
		(void) Strncpy(el->el_line.buffer, el->el_history.buf,
d128 1
a128 1
	(void) Strncpy(el->el_line.buffer, hp,
d131 1
a131 1
	el->el_line.lastchar = el->el_line.buffer + Strlen(el->el_line.buffer);
d163 1
a163 1
	if (argc == 1 || Strcmp(argv[1], STR("list")) == 0) {
d177 1
a177 1
	if (Strcmp(argv[1], STR("size")) == 0)
d180 1
a180 1
	if (Strcmp(argv[1], STR("unique")) == 0)
@


1.14
log
@Always compile with WIDECHAR on and delete that preprocessor switch.
OK martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 2
a2 2
/*	$OpenBSD: hist.c,v 1.13 2016/03/20 23:48:27 schwarze Exp $	*/
/*	$NetBSD: hist.c,v 1.25 2016/03/23 22:27:48 christos Exp $	*/
d175 1
a175 1
	num = (int)Strtol(argv[2], NULL, 0);
@


1.13
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: hist.c,v 1.12 2016/01/30 17:32:52 schwarze Exp $	*/
/*	$NetBSD: hist.c,v 1.17 2009/12/30 23:54:52 christos Exp $	*/
a209 1
#ifdef WIDECHAR
a218 1
#endif
@


1.12
log
@Fifth step in synching with NetBSD:
Delete the silly ptr_t and ioctl_t typedefs
and delete some "#ifdef notdef" code from "sys.h".
No functional change.
This makes hist.h identical to the NetBSD version.
It reduces the remaining diff from +1526 -734 to +1430 -592.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.11 2016/01/30 12:22:20 schwarze Exp $	*/
d42 2
@


1.11
log
@Fourth step in synching with NetBSD:
KNF: Remove parentheses from return lines.  No object change.
This makes emacs.c and prompt.c identical to the NetBSD versions.
It reduces the remaining diff from +2053 -1261 to +1526 -734.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.10 2014/10/17 06:07:50 deraadt Exp $	*/
d70 1
a70 1
	free((ptr_t) el->el_history.buf);
d79 1
a79 1
hist_set(EditLine *el, hist_fun_t fun, ptr_t ptr)
d210 1
a210 1
hist_convert(EditLine *el, int fn, ptr_t arg)
@


1.10
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.9 2010/06/30 00:05:35 nicm Exp $	*/
d57 1
a57 1
		return (-1);
d59 1
a59 1
	return (0);
d84 1
a84 1
	return (0);
d111 1
a111 1
		return (CC_REFRESH);
d114 1
a114 1
		return (CC_ERROR);
d119 1
a119 1
		return (CC_ERROR);
d124 1
a124 1
			return (CC_ERROR);
d144 1
a144 1
	return (CC_REFRESH);
d159 1
a159 1
		return (-1);
d167 1
a167 1
		return (0);
d171 1
a171 1
		return (-1);
@


1.9
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 2
a54 1
	el->el_history.buf = el_malloc(EL_BUFSIZ * sizeof(*el->el_history.buf));
d70 1
a70 1
	el_free((ptr_t) el->el_history.buf);
d194 1
a194 1
	newbuf = el_realloc(el->el_history.buf, newsz * sizeof(*newbuf));
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 2
a2 2
/*	$OpenBSD: hist.c,v 1.7 2003/11/25 20:12:38 otto Exp $	*/
/*	$NetBSD: hist.c,v 1.15 2003/11/01 23:36:39 christos Exp $	*/
d53 1
a53 1
	el->el_history.buf = (char *) el_malloc(EL_BUFSIZ);
d94 1
a94 1
	const char *hp;
d98 1
a98 1
		(void) strncpy(el->el_line.buffer, el->el_history.buf,
d125 1
a125 1
	(void) strlcpy(el->el_line.buffer, hp,
d127 2
a128 1
	el->el_line.lastchar = el->el_line.buffer + strlen(el->el_line.buffer);
d151 1
a151 1
hist_command(EditLine *el, int argc, const char **argv)
d153 1
a153 1
	const char *str;
d160 1
a160 1
	if (argc == 1 || strcmp(argv[1], "list") == 0) {
d165 1
a165 1
			    el->el_history.ev.num, str);
d172 1
a172 1
	num = (int)strtol(argv[2], NULL, 0);
d174 1
a174 1
	if (strcmp(argv[1], "size") == 0)
d177 1
a177 1
	if (strcmp(argv[1], "unique") == 0)
d191 1
a191 1
	char *newbuf;
d193 1
a193 1
	newbuf = realloc(el->el_history.buf, newsz);
d197 1
a197 1
	(void) memset(&newbuf[oldsz], '\0', newsz - oldsz);
d206 12
@


1.7
log
@Sync libedit to NetBSD libedit as of Nov 8, 2003.
Tested by jmc@@ djm@@ and myself
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.6 2003/10/31 08:42:24 otto Exp $	*/
a36 7
#if !defined(lint) && !defined(SCCSID)
#if 0
static char sccsid[] = "@@(#)hist.c	8.1 (Berkeley) 6/4/93";
#else
static const char rcsid[] = "$OpenBSD: hist.c,v 1.6 2003/10/31 08:42:24 otto Exp $";
#endif
#endif /* not lint && not SCCSID */
@


1.6
log
@Update to NetBSD libedit (from Oct 1, 2003), adding some string
cleaning and history bug fixes. The code includes GNU libreadline
functionality, but the corresponding header files are not installed,
since some libreadline functions are missing. There are some minor API
changes, notably:

old: EditLine *el_init(const char *, FILE *, FILE *);
new: EditLine *el_init(const char *, FILE *, FILE *, FILE *);

old: HistEvent *history(History *h, int op, ...);
new: int history(History *h, HistEvent *ev, int op, ...); plus some
changes in operation names. See editline(3) for details.

Tested by djm@@, mouring@@, jmc@@.

ok deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: hist.c,v 1.14 2003/08/07 16:44:31 agc Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD$";
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: hist.c,v 1.4 2003/05/01 21:11:21 avsm Exp $	*/
/*	$NetBSD: hist.c,v 1.2 1997/01/11 06:47:55 lukem Exp $	*/
d36 1
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: hist.c,v 1.4 2003/05/01 21:11:21 avsm Exp $";
a47 1
#include "sys.h"
d55 1
a55 2
hist_init(el)
    EditLine *el;
d57 9
a65 5
    el->el_history.fun  = NULL;
    el->el_history.ref  = NULL;
    el->el_history.buf   = (char *) el_malloc(EL_BUFSIZ);
    el->el_history.last  = el->el_history.buf;
    return 0;
d73 1
a73 2
hist_end(el)
    EditLine *el;
d75 3
a77 2
    el_free((ptr_t) el->el_history.buf);
    el->el_history.buf   = NULL;
d85 2
a86 4
hist_set(el, fun, ptr)
    EditLine *el;
    hist_fun_t fun;
    ptr_t ptr;
d88 3
a90 4
{
    el->el_history.ref = ptr;
    el->el_history.fun = fun;
    return 0;
d99 1
a99 2
hist_get(el)
    EditLine *el;
d101 2
a102 2
    const char    *hp;
    int     h;
d104 5
a108 5
    if (el->el_history.eventno == 0) {	/* if really the current line */
	(void)strncpy(el->el_line.buffer, el->el_history.buf, EL_BUFSIZ - 1);
	el->el_line.buffer[EL_BUFSIZ - 1] = '\0';
	el->el_line.lastchar = el->el_line.buffer + 
		(el->el_history.last - el->el_history.buf);
d111 3
a113 3
    if (el->el_map.type == MAP_VI)
	el->el_line.cursor = el->el_line.buffer;
    else
d115 1
a115 1
	el->el_line.cursor = el->el_line.lastchar;
d117 4
a120 2
	return CC_REFRESH;
    }
d122 1
a122 2
    if (el->el_history.ref == NULL)
	return CC_ERROR;
d124 2
a125 1
    hp = HIST_FIRST(el);
d127 24
a150 2
    if (hp == NULL)
	return CC_ERROR;
d152 21
a172 4
    for (h = 1; h < el->el_history.eventno; h++)
	if ((hp = HIST_NEXT(el)) == NULL) {
	    el->el_history.eventno = h;
	    return CC_ERROR;
d175 4
a178 12
    (void)strncpy(el->el_line.buffer, hp, EL_BUFSIZ - 1);
    el->el_line.buffer[EL_BUFSIZ - 1] = '\0';
    el->el_line.lastchar = el->el_line.buffer + strlen(el->el_line.buffer);

    if (el->el_line.lastchar > el->el_line.buffer) {
	if (el->el_line.lastchar[-1] == '\n')
	    el->el_line.lastchar--;
	if (el->el_line.lastchar[-1] == ' ')
	    el->el_line.lastchar--;
	if (el->el_line.lastchar < el->el_line.buffer)
	    el->el_line.lastchar = el->el_line.buffer;
    }
d180 5
a184 6
#ifdef KSHVI
    if (el->el_map.type == MAP_VI)
	el->el_line.cursor = el->el_line.buffer;
    else
#endif /* KSHVI */
	el->el_line.cursor = el->el_line.lastchar;
d186 1
a186 1
    return CC_REFRESH;
d189 3
a191 2
/* hist_list()
 *	List history entries
d195 1
a195 4
hist_list(el, argc, argv)
    EditLine *el;
    int argc;
    char **argv;
d197 7
a203 1
    const char *str;
d205 6
a210 5
    if (el->el_history.ref == NULL)
	return -1;
    for (str = HIST_LAST(el); str != NULL; str = HIST_PREV(el))
	(void)fprintf(el->el_outfile, "%d %s", el->el_history.ev->num, str);
    return 0;
@


1.4
log
@is -Wall clean by making rcsid const
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.3 1997/03/14 05:12:48 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: hist.c,v 1.3 1997/03/14 05:12:48 millert Exp $";
@


1.3
log
@fix el_source() - a block needed braces around it (from NetBSD)
Some strcpy() -> strncpy (from NetBSD)
Some KNF
Add current NetBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.2 1997/01/16 05:18:33 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: hist.c,v 1.2 1997/01/16 05:18:33 millert Exp $";
@


1.2
log
@Merge in NetBSD libedit changes and new man pages.  Also fix some
strncpy() usage in their code.  NetBSD change log was:
    * add a man page for the editline routines
    * add a man page describing editrc
    * fix bugs in el_parse():
      * didn't execute command when program name matched (test reversed)
      * was checking against empty string instead of program name
      * after checks, command to run also pointed to empty string
    * document ^char and \ escape sequences
    * when parsing ^char control chars, check the correct char when determining
      validity (previously, ^char was a NOP interpreted as the literal string
      because of this bug)
    * Implement CC_REDISPLAY, which (unlike CC_REFRESH) redraws the entire input
    * line (a la ^R). This is useful if the binding outputs information and
    * mucks up the input line. To be used in ``list-choices'' bindings (refer
    * to the ^D binding in csh when filec is set)
@
text
@d1 2
a2 1
/*	$OpenBSD: $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: $";
d110 1
a110 1
	(void) strncpy(el->el_line.buffer, el->el_history.buf, EL_BUFSIZ - 1);
d139 1
a139 1
    (void) strncpy(el->el_line.buffer, hp, EL_BUFSIZ - 1);
d177 1
a177 1
	(void) fprintf(el->el_outfile, "%d %s", el->el_history.ev->num, str);
@


1.1
log
@Initial revision
@
text
@d1 2
d40 1
d42 3
d109 2
a110 1
	(void) strncpy(el->el_line.buffer, el->el_history.buf, EL_BUFSIZ);
d138 2
a139 1
    (void) strncpy(el->el_line.buffer, hp, EL_BUFSIZ);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
