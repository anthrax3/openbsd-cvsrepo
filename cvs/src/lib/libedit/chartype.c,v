head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.8
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.6
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.04.11.21.17.29;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	I3AtNAFb4FywnTMT;

1.14
date	2016.04.11.20.54.05;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	VmmFUm6qYbPE8jjH;

1.13
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	OUneMOe0l7HombT5;

1.12
date	2016.04.09.20.15.26;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	0bnhGLXZIvXlnMLp;

1.11
date	2016.04.09.19.31.55;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	t22PDRfkb5DJX3rc;

1.10
date	2016.03.21.18.40.25;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	RG1lPKia9X4hncVR;

1.9
date	2016.03.21.17.28.10;	author schwarze;	state Exp;
branches;
next	1.8;
commitid	bxfYrS2VROPyQgXw;

1.8
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	tRHhB2RN3ZD1GvoI;

1.7
date	2016.03.20.20.16.09;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	BxYjngCBlp9HvsM6;

1.6
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	bdUOvGFxUQgqZg7x;

1.5
date	2013.05.22.00.31.38;	author yasuoka;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.17.20.14.24;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.07.05.40.42;	author okan;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.04.18.48.17;	author stsp;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@delete the "private" and "public" preprocessor macros, just use standard C;
OK martijn@@
@
text
@/*	$OpenBSD: chartype.c,v 1.14 2016/04/11 20:54:05 schwarze Exp $	*/
/*	$NetBSD: chartype.c,v 1.6 2011/07/28 00:48:21 christos Exp $	*/

/*-
 * Copyright (c) 2009 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * chartype.c: character classification and meta information
 */
#include "config.h"

#include <ctype.h>
#include <stdlib.h>
#include <string.h>

#include "el.h"

#define CT_BUFSIZ 1024

static void ct_conv_buff_resize(ct_buffer_t *, size_t, size_t);

static void
ct_conv_buff_resize(ct_buffer_t *conv, size_t mincsize, size_t minwsize)
{
	void *p;
	if (mincsize > conv->csize) {
		conv->csize = mincsize;
		p = reallocarray(conv->cbuff, conv->csize, sizeof(char));
		if (p == NULL) {
			conv->csize = 0;
			free(conv->cbuff);
			conv->cbuff = NULL;
		} else
			conv->cbuff = p;
	}

	if (minwsize > conv->wsize) {
		conv->wsize = minwsize;
		p = reallocarray(conv->wbuff, conv->wsize, sizeof(wchar_t));
		if (p == NULL) {
			conv->wsize = 0;
			free(conv->wbuff);
			conv->wbuff = NULL;
		} else
			conv->wbuff = p;
	}
}


char *
ct_encode_string(const wchar_t *s, ct_buffer_t *conv)
{
	char *dst;
	ssize_t used = 0;

	if (!s)
		return NULL;
	if (!conv->cbuff)
		ct_conv_buff_resize(conv, CT_BUFSIZ, 0);
	if (!conv->cbuff)
		return NULL;

	dst = conv->cbuff;
	while (*s) {
		used = conv->csize - (dst - conv->cbuff);
		if (used < 5) {
			used = dst - conv->cbuff;
			ct_conv_buff_resize(conv, conv->csize + CT_BUFSIZ, 0);
			if (!conv->cbuff)
				return NULL;
			dst = conv->cbuff + used;
		}
		used = ct_encode_char(dst, 5, *s);
		if (used == -1) /* failed to encode, need more buffer space */
			abort();
		++s;
		dst += used;
	}
	*dst = '\0';
	return conv->cbuff;
}

wchar_t *
ct_decode_string(const char *s, ct_buffer_t *conv)
{
	size_t len = 0;

	if (!s)
		return NULL;
	if (!conv->wbuff)
		ct_conv_buff_resize(conv, 0, CT_BUFSIZ);
	if (!conv->wbuff)
		return NULL;

	len = mbstowcs(NULL, s, 0);
	if (len == (size_t)-1)
		return NULL;
	if (len > conv->wsize)
		ct_conv_buff_resize(conv, 0, len + 1);
	if (!conv->wbuff)
		return NULL;

	mbstowcs(conv->wbuff, s, conv->wsize);
	return conv->wbuff;
}


protected wchar_t **
ct_decode_argv(int argc, const char *argv[], ct_buffer_t *conv)
{
	size_t bufspace;
	int i;
	wchar_t *p;
	wchar_t **wargv;
	size_t wlen;

	/* Make sure we have enough space in the conversion buffer to store all
	 * the argv strings. */
	for (i = 0, bufspace = 0; i < argc; ++i)
		bufspace += argv[i] ? strlen(argv[i]) + 1 : 0;
	ct_conv_buff_resize(conv, 0, bufspace * sizeof(*p));
	if (!conv->wsize)
		return NULL;

	wargv = reallocarray(NULL, argc, sizeof(*wargv));

	for (i = 0, p = conv->wbuff; i < argc; ++i) {
		if (!argv[i]) {   /* don't pass null pointers to mbstowcs */
			wargv[i] = NULL;
			continue;
		} else {
			wargv[i] = p;
			wlen = mbstowcs(p, argv[i], bufspace);
		}
		if (wlen == (size_t)-1 || wlen == bufspace) {
			/* Encoding error or not enough room for NUL. */
			free(wargv);
			return NULL;
		} else
			wlen++; /* include NUL in the count */
		bufspace -= wlen;
		p += wlen;
	}

	return wargv;
}


protected size_t
ct_enc_width(wchar_t c)
{
	/* UTF-8 encoding specific values */
	if (c < 0x80)
		return 1;
	else if (c < 0x0800)
		return 2;
	else if (c < 0x10000)
		return 3;
	else if (c < 0x110000)
		return 4;
	else
		return 0; /* not a valid codepoint */
}

protected ssize_t
ct_encode_char(char *dst, size_t len, wchar_t c)
{
	ssize_t l = 0;
	if (len < ct_enc_width(c))
		return -1;
	l = wctomb(dst, c);

	if (l < 0) {
		wctomb(NULL, L'\0');
		l = 0;
	}
	return l;
}

protected const wchar_t *
ct_visual_string(const wchar_t *s)
{
	static wchar_t *buff = NULL;
	static size_t buffsize = 0;
	void *p;
	wchar_t *dst;
	ssize_t used = 0;

	if (!s)
		return NULL;
	if (!buff) {
	    buffsize = CT_BUFSIZ;
	    buff = reallocarray(NULL, buffsize, sizeof(*buff));
	}
	dst = buff;
	while (*s) {
		used = ct_visual_char(dst, buffsize - (dst - buff), *s);
		if (used == -1) { /* failed to encode, need more buffer space */
			used = dst - buff;
			buffsize += CT_BUFSIZ;
			p = reallocarray(buff, buffsize, sizeof(*buff));
			if (p == NULL)
				goto out;
			buff = p;
			dst = buff + used;
			/* don't increment s here - we want to retry it! */
		}
		else
		    ++s;
		dst += used;
	}
	if (dst >= (buff + buffsize)) { /* sigh */
		buffsize += 1;
		p = reallocarray(buff, buffsize, sizeof(*buff));
		if (p == NULL)
			goto out;
		buff = p;
		dst = buff + buffsize - 1;
	}
	*dst = 0;
	return buff;
out:
	free(buff);
	buffsize = 0;
	return NULL;
}



protected int
ct_visual_width(wchar_t c)
{
	int t = ct_chr_class(c);
	int w;
	switch (t) {
	case CHTYPE_ASCIICTL:
		return 2; /* ^@@ ^? etc. */
	case CHTYPE_TAB:
		return 1; /* Hmm, this really need to be handled outside! */
	case CHTYPE_NL:
		return 0; /* Should this be 1 instead? */
	case CHTYPE_PRINT:
		w = wcwidth(c);
		return (w == -1 ? 0 : w);
	case CHTYPE_NONPRINT:
		if (c > 0xffff) /* prefer standard 4-byte display over 5-byte */
			return 8; /* \U+12345 */
		else
			return 7; /* \U+1234 */
	default:
		return 0; /* should not happen */
	}
}


protected ssize_t
ct_visual_char(wchar_t *dst, size_t len, wchar_t c)
{
	int t = ct_chr_class(c);
	switch (t) {
	case CHTYPE_TAB:
	case CHTYPE_NL:
	case CHTYPE_ASCIICTL:
		if (len < 2)
			return -1;   /* insufficient space */
		*dst++ = '^';
		if (c == '\177')
			*dst = '?'; /* DEL -> ^? */
		else
			*dst = c | 0100;    /* uncontrolify it */
		return 2;
	case CHTYPE_PRINT:
		if (len < 1)
			return -1;  /* insufficient space */
		*dst = c;
		return 1;
	case CHTYPE_NONPRINT:
		/* we only use single-width glyphs for display,
		 * so this is right */
		if ((ssize_t)len < ct_visual_width(c))
			return -1;   /* insufficient space */
		*dst++ = '\\';
		*dst++ = 'U';
		*dst++ = '+';
#define tohexdigit(v) "0123456789ABCDEF"[v]
		if (c > 0xffff) /* prefer standard 4-byte display over 5-byte */
			*dst++ = tohexdigit(((unsigned int) c >> 16) & 0xf);
		*dst++ = tohexdigit(((unsigned int) c >> 12) & 0xf);
		*dst++ = tohexdigit(((unsigned int) c >>  8) & 0xf);
		*dst++ = tohexdigit(((unsigned int) c >>  4) & 0xf);
		*dst   = tohexdigit(((unsigned int) c      ) & 0xf);
		return (c > 0xffff) ? 8 : 7;
		/*FALLTHROUGH*/
	/* these two should be handled outside this function */
	default:            /* we should never hit the default */
		return 0;
	}
}




protected int
ct_chr_class(wchar_t c)
{
	if (c == '\t')
		return CHTYPE_TAB;
	else if (c == '\n')
		return CHTYPE_NL;
	else if (c < 0x100 && iswcntrl(c))
		return CHTYPE_ASCIICTL;
	else if (iswprint(c))
		return CHTYPE_PRINT;
	else
		return CHTYPE_NONPRINT;
}
@


1.14
log
@Clean up chartype.h:

* not used in tokenizer.c
* only use it for !NARROWCHAR
* no need for underscores before ct_{de,en}code_string()
* make the conversion buffer resize function private

OK martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.13 2016/04/11 20:43:33 schwarze Exp $	*/
d43 1
a43 1
private void ct_conv_buff_resize(ct_buffer_t *, size_t, size_t);
d45 1
a45 1
private void
d73 1
a73 1
public char *
d106 1
a106 1
public wchar_t *
@


1.13
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.12 2016/04/09 20:15:26 schwarze Exp $	*/
d43 3
a45 1
protected void
@


1.12
log
@Delete 26 wrapper macros and two wrapper functions that are no
longer needed now that we always compile with wide character support,
reducing code obfuscation.

OK czarkoff@@ martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.11 2016/04/09 19:31:55 schwarze Exp $	*/
d60 1
a60 1
		p = reallocarray(conv->wbuff, conv->wsize, sizeof(Char));
d72 1
a72 1
ct_encode_string(const Char *s, ct_buffer_t *conv)
d104 1
a104 1
public Char *
d129 1
a129 1
protected Char **
d134 2
a135 2
	Char *p;
	Char **wargv;
d171 1
a171 1
ct_enc_width(Char c)
d187 1
a187 1
ct_encode_char(char *dst, size_t len, Char c)
d201 2
a202 2
protected const Char *
ct_visual_string(const Char *s)
d204 1
a204 1
	static Char *buff = NULL;
d207 1
a207 1
	Char *dst;
d252 1
a252 1
ct_visual_width(Char c)
d278 1
a278 1
ct_visual_char(Char *dst, size_t len, Char c)
d325 1
a325 1
ct_chr_class(Char c)
@


1.11
log
@Always compile with WIDECHAR on and delete that preprocessor switch.
OK martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.10 2016/03/21 18:40:25 schwarze Exp $	*/
d116 1
a116 1
	len = ct_mbstowcs(NULL, s, 0);
d123 2
a124 1
	ct_mbstowcs(conv->wbuff, s, conv->wsize);
d192 1
a192 1
	l = ct_wctomb(dst, c);
d195 1
a195 1
		ct_wctomb_reset;
d331 1
a331 1
	else if (IsASCII(c) && Iscntrl(c))
d333 1
a333 1
	else if (Isprint(c))
@


1.10
log
@Christos Zoulas just rescinded clauses 3 & 4 of his licenses, see
NetBSD chartype.c rev. 1.23, chartype.h rev. 1.25, eln.c rev. 1.28.
No code change.
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.9 2016/03/21 17:28:10 schwarze Exp $	*/
a42 1
#ifdef WIDECHAR
a199 16
#else

size_t
/*ARGSUSED*/
ct_mbrtowc(wchar_t *wc, const char *s, size_t n,
    void *mbs __attribute__((__unused__))) {
	if (s == NULL)
		return 0;
	if (n == 0)
		return (size_t)-2;
	if (wc != NULL)
		*wc = *s;
	return *s != '\0';
}
#endif

a253 1
#ifdef WIDECHAR
a254 1
#endif
a261 1
#ifdef WIDECHAR
a269 6
#else
	case CHTYPE_PRINT:
		return 1;
	case CHTYPE_NONPRINT:
		return 4; /* \123 */
#endif
a301 1
#ifdef WIDECHAR
a312 7
#else
		*dst++ = '\\';
#define tooctaldigit(v) ((v) + '0')
		*dst++ = tooctaldigit(((unsigned int) c >> 6) & 0x7);
		*dst++ = tooctaldigit(((unsigned int) c >> 3) & 0x7);
		*dst++ = tooctaldigit(((unsigned int) c     ) & 0x7);
#endif
@


1.9
log
@Make the read_char() function always take a wchar_t * argument.

On first sight, it might look as if this required a bump because
it seems to change the public type el_rfunc_t.  But we only compile
with WIDECHAR, and in that case, there is no change in the interface.

This also simplifies some logic by getting rid of the NARROW_READ flag
which was broken anyway.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.8 2016/03/20 23:48:27 schwarze Exp $	*/
a15 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.8
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.7 2016/03/20 20:16:09 schwarze Exp $	*/
d212 1
a212 1
ct_mbrtowc(char *wc, const char *s, size_t n,
@


1.7
log
@Get rid of "#ifdef WIDECHAR" and one goto in read_char(),
making the code more readable.  Instead, provide an mbrtowc(3)
replacement function in chartype.[hc], files that encapsulate
such system dependencies anyway.  No functional change.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.6 2014/10/17 06:07:50 deraadt Exp $	*/
d41 5
a46 1
#include <stdlib.h>
d62 1
a62 1
		} else 
@


1.6
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.5 2013/05/22 00:31:38 yasuoka Exp $	*/
d202 15
@


1.5
log
@Sync with upstream.  Fix buffer growing and memory allocation for wide
chars.  Handle return of mbstowcs().

ok nickm
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.4 2011/11/17 20:14:24 nicm Exp $	*/
d53 1
a53 1
		p = el_realloc(conv->cbuff, conv->csize * sizeof(char));
d56 1
a56 1
			el_free(conv->cbuff);
d64 1
a64 1
		p = el_realloc(conv->wbuff, conv->wsize * sizeof(Char));
d67 1
a67 1
			el_free(conv->wbuff);
d149 1
a149 1
	wargv = el_malloc(argc * sizeof(*wargv));
d161 1
a161 1
			el_free(wargv);
d218 1
a218 1
	    buff = el_malloc(buffsize * sizeof(*buff));
d226 1
a226 1
			p = el_realloc(buff, buffsize * sizeof(*buff));
d239 1
a239 1
		p = el_realloc(buff, buffsize * sizeof(*buff));
d248 1
a248 1
	el_free(buff);
@


1.4
log
@Calculate the size for the wchar_t argv correctly, fixes memory
corruption reported by LEVAI Daniel <leva at ecentrum dot hu>. Also
rename "bytes" to "wlen" since bytes is not accurate, suggested by
stsp@@.

ok stsp oga
@
text
@d1 2
a2 2
/*	$OpenBSD: chartype.c,v 1.3 2011/07/07 05:40:42 okan Exp $	*/
/*	$NetBSD: chartype.c,v 1.4 2010/04/15 00:55:57 christos Exp $	*/
d53 1
a53 1
		p = el_realloc(conv->cbuff, conv->csize);
d64 1
a64 1
		p = el_realloc(conv->wbuff, conv->wsize);
d90 2
a91 3
		used = ct_encode_char(dst, (int)(conv->csize -
		    (dst - conv->cbuff)), *s);
		if (used == -1) { /* failed to encode, need more buffer space */
a96 1
			/* don't increment s here - we want to retry it! */
d98 4
a101 2
		else
			++s;
a103 7
	if (dst >= (conv->cbuff + conv->csize)) {
		used = dst - conv->cbuff;
		ct_conv_buff_resize(conv, conv->csize + 1, 0);
		if (!conv->cbuff)
			return NULL;
		dst = conv->cbuff + used;
	}
d120 3
a122 1
	len = ct_mbstowcs(0, s, 0);
@


1.3
log
@sync with upstream, retaining local modifications.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.2 2011/04/04 18:48:17 stsp Exp $	*/
d144 1
a144 1
	ssize_t bytes;
d150 1
a150 1
	ct_conv_buff_resize(conv, 0, bufspace);
d162 1
a162 1
			bytes = mbstowcs(p, argv[i], bufspace);
d164 2
a165 1
		if (bytes == -1) {
d169 3
a171 3
			bytes++;  /* include '\0' in the count */
		bufspace -= bytes;
		p += bytes;
@


1.2
log
@Make wcwidth() callers cope with -1 return value. Doesn't affect the build yet.
ok nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.c,v 1.1 2010/06/30 00:05:35 nicm Exp $	*/
d41 2
@


1.1
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d261 3
d273 2
a274 1
		return wcwidth(c);
@

