head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.4
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.6
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.16
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.14
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.05.06.18.01.40;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	nTHl2s1BPdZ5hPZf;

1.19
date	2016.04.11.21.17.29;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	I3AtNAFb4FywnTMT;

1.18
date	2016.04.11.20.54.05;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	VmmFUm6qYbPE8jjH;

1.17
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	OUneMOe0l7HombT5;

1.16
date	2016.04.11.19.54.53;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	xizUpRlYj2C4Hcj6;

1.15
date	2016.04.09.20.15.26;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	0bnhGLXZIvXlnMLp;

1.14
date	2016.04.09.19.31.55;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	t22PDRfkb5DJX3rc;

1.13
date	2016.03.22.11.32.18;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	IqABuRl0Ys8M4ewM;

1.12
date	2016.03.21.18.40.25;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	RG1lPKia9X4hncVR;

1.11
date	2016.03.21.17.28.10;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	bxfYrS2VROPyQgXw;

1.10
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	tRHhB2RN3ZD1GvoI;

1.9
date	2016.03.20.20.35.38;	author schwarze;	state Exp;
branches;
next	1.8;
commitid	b06qlwkNEbVitvG0;

1.8
date	2016.03.20.20.16.09;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	BxYjngCBlp9HvsM6;

1.7
date	2016.03.20.19.14.29;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	GCeM4pTD7ijmLqYD;

1.6
date	2016.03.20.17.19.48;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	i7dvYVQoanOIP2WU;

1.5
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	bdUOvGFxUQgqZg7x;

1.4
date	2011.07.07.16.15.47;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.07.05.40.42;	author okan;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.04.18.48.17;	author stsp;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.20
log
@typos in comments; from Pedro Giffuni (FreeBSD) via Christos Zoulas (NetBSD)
@
text
@/*	$OpenBSD: chartype.h,v 1.19 2016/04/11 21:17:29 schwarze Exp $	*/
/*	$NetBSD: chartype.h,v 1.31 2016/04/11 18:56:31 christos Exp $	*/

/*-
 * Copyright (c) 2009 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _h_chartype_f
#define _h_chartype_f

/* Ideally we should also test the value of the define to see if it
 * supports non-BMP code points without requiring UTF-16, but nothing
 * seems to actually advertise this properly, despite Unicode 3.1 having
 * been around since 2001... */
#if !defined(__NetBSD__) && !defined(__OpenBSD__)
#ifndef __STDC_ISO_10646__
/* In many places it is assumed that the first 127 code points are ASCII
 * compatible, so ensure wchar_t indeed does ISO 10646 and not some other
 * funky encoding that could break us in weird and wonderful ways. */
	#error wchar_t must store ISO 10646 characters
#endif
#endif

/* Oh for a <uchar.h> with char32_t and __STDC_UTF_32__ in it...
 * ref: ISO/IEC DTR 19769
 */
#if WCHAR_MAX < INT32_MAX
#warning Build environment does not support non-BMP characters
#endif

/*
 * Conversion buffer
 */
typedef struct ct_buffer_t {
        char    *cbuff;
        size_t  csize;
        wchar_t *wbuff;
        size_t  wsize;
} ct_buffer_t;

/* Encode a wide-character string and return the UTF-8 encoded result. */
char *ct_encode_string(const wchar_t *, ct_buffer_t *);

/* Decode a (multi)?byte string and return the wide-character string result. */
wchar_t *ct_decode_string(const char *, ct_buffer_t *);

/* Decode a (multi)?byte argv string array.
 * The pointer returned must be free()d when done. */
protected wchar_t **ct_decode_argv(int, const char *[],  ct_buffer_t *);

/* Encode a character into the destination buffer, provided there is sufficient
 * buffer space available. Returns the number of bytes used up (zero if the
 * character cannot be encoded, -1 if there was not enough space available). */
protected ssize_t ct_encode_char(char *, size_t, wchar_t);
protected size_t ct_enc_width(wchar_t);

/* The maximum buffer size to hold the most unwieldy visual representation,
 * in this case \U+nnnnn. */
#define VISUAL_WIDTH_MAX 8

/* The terminal is thought of in terms of X columns by Y lines. In the cases
 * where a wide character takes up more than one column, the adjacent
 * occupied column entries will contain this faux character. */
#define MB_FILL_CHAR ((wchar_t)-1)

/* Visual width of character c, taking into account ^? , \0177 and \U+nnnnn
 * style visual expansions. */
protected int ct_visual_width(wchar_t);

/* Turn the given character into the appropriate visual format, matching
 * the width given by ct_visual_width(). Returns the number of characters used
 * up, or -1 if insufficient space. Buffer length is in count of wchar_t's. */
protected ssize_t ct_visual_char(wchar_t *, size_t, wchar_t);

/* Convert the given string into visual format, using the ct_visual_char()
 * function. Uses a static buffer, so not threadsafe. */
protected const wchar_t *ct_visual_string(const wchar_t *);


/* printable character, use ct_visual_width() to find out display width */
#define CHTYPE_PRINT        ( 0)
/* control character found inside the ASCII portion of the charset */
#define CHTYPE_ASCIICTL     (-1)
/* a \t */
#define CHTYPE_TAB          (-2)
/* a \n */
#define CHTYPE_NL           (-3)
/* non-printable character */
#define CHTYPE_NONPRINT     (-4)
/* classification of character c, as one of the above defines */
protected int ct_chr_class(wchar_t c);

#endif /* _chartype_f */
@


1.19
log
@delete the "private" and "public" preprocessor macros, just use standard C;
OK martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.18 2016/04/11 20:54:05 schwarze Exp $	*/
d73 1
a73 1
/* Encode a characted into the destination buffer, provided there is sufficent
d79 1
a79 1
/* The maximum buffer size to hold the most unwieldly visual representation,
@


1.18
log
@Clean up chartype.h:

* not used in tokenizer.c
* only use it for !NARROWCHAR
* no need for underscores before ct_{de,en}code_string()
* make the conversion buffer resize function private

OK martijn@@
@
text
@d1 2
a2 2
/*	$OpenBSD: chartype.h,v 1.17 2016/04/11 20:43:33 schwarze Exp $	*/
/*	$NetBSD: chartype.h,v 1.30 2016/04/11 16:06:52 christos Exp $	*/
d64 1
a64 1
public char *ct_encode_string(const wchar_t *, ct_buffer_t *);
d67 1
a67 1
public wchar_t *ct_decode_string(const char *, ct_buffer_t *);
@


1.17
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 2
a2 2
/*	$OpenBSD: chartype.h,v 1.16 2016/04/11 19:54:53 schwarze Exp $	*/
/*	$NetBSD: chartype.h,v 1.5 2010/04/15 00:55:57 christos Exp $	*/
a32 2
#ifndef NARROWCHAR

a62 1
#define ct_encode_string __ct_encode_string
a65 1
#define ct_decode_string __ct_decode_string
a72 11
/* Resizes the conversion buffer(s) if needed. */
protected void ct_conv_buff_resize(ct_buffer_t *, size_t, size_t);
protected ssize_t ct_encode_char(char *, size_t, wchar_t);
protected size_t ct_enc_width(wchar_t);

#else
#define	ct_encode_string(s, b)	(s)
#define ct_decode_string(s, b)	(s)
#endif

#ifndef NARROWCHAR
d76 2
a113 1
#endif
@


1.16
log
@Move wrapper macros to the two files actually needing them:
FUNW, Strlen, Strdup, Strcmp, Strncmp, Strncpy, Strncat -> history.c
Strchr, tok_strdup -> tokenizer.c
FUN, TYPE, STR -> both of these files

OK martijn@@

Also proofread by Christian Heckendorf <mbie at ulmus dot me>
who reported some whitespace issues in parse.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.15 2016/04/09 20:15:26 schwarze Exp $	*/
a54 7
#define Char			wchar_t
#else /* NARROW */
#define Char			char
#endif


#ifndef NARROWCHAR
d61 1
a61 1
        Char *wbuff;
d67 1
a67 1
public char *ct_encode_string(const Char *, ct_buffer_t *);
d71 1
a71 1
public Char *ct_decode_string(const char *, ct_buffer_t *);
d75 1
a75 1
protected Char **ct_decode_argv(int, const char *[],  ct_buffer_t *);
d79 2
a80 2
protected ssize_t ct_encode_char(char *, size_t, Char);
protected size_t ct_enc_width(Char);
d99 1
a99 1
#define MB_FILL_CHAR ((Char)-1)
d103 1
a103 1
protected int ct_visual_width(Char);
d107 2
a108 2
 * up, or -1 if insufficient space. Buffer length is in count of Char's. */
protected ssize_t ct_visual_char(Char *, size_t, Char);
d112 1
a112 1
protected const Char *ct_visual_string(const Char *);
d126 1
a126 1
protected int ct_chr_class(Char c);
@


1.15
log
@Delete 26 wrapper macros and two wrapper functions that are no
longer needed now that we always compile with wide character support,
reducing code obfuscation.

OK czarkoff@@ martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.14 2016/04/09 19:31:55 schwarze Exp $	*/
a55 13
#define FUN(prefix,rest)	prefix ## _w ## rest
#define FUNW(type)		type ## _w
#define TYPE(type)		type ## W
#define STR(x)			L ## x

#define Strlen(x)       wcslen(x)
#define Strchr(s,c)     wcschr(s,c)
#define Strdup(x)       wcsdup(x)
#define Strncpy(d,s,n)  wcsncpy(d,s,n)
#define Strncat(d,s,n)  wcsncat(d,s,n)
#define Strcmp(s,v)     wcscmp(s,v)
#define Strncmp(s,v,n)  wcsncmp(s,v,n)

a56 1

a57 13
#define FUN(prefix,rest)	prefix ## _ ## rest
#define FUNW(type)		type
#define TYPE(type)		type
#define STR(x)			x

#define Strlen(x)       strlen(x)
#define Strchr(s,c)     strchr(s,c)
#define Strdup(x)       strdup(x)
#define Strncpy(d,s,n)  strncpy(d,s,n)
#define Strncat(d,s,n)  strncat(d,s,n)

#define Strcmp(s,v)     strcmp(s,v)
#define Strncmp(s,v,n)  strncmp(s,v,n)
@


1.14
log
@Always compile with WIDECHAR on and delete that preprocessor switch.
OK martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.13 2016/03/22 11:32:18 schwarze Exp $	*/
a32 1

a54 7
#define ct_mbrtowc           mbrtowc
#define ct_wctob             wctob
#define ct_wctomb            wctomb
#define ct_wctomb_reset      wctomb(0,0)
#define ct_wcstombs          wcstombs
#define ct_mbstowcs          mbstowcs

a58 2
#define FSTR			"%ls"
#define FSTARSTR		"%.*ls"
a59 15
#define UC(c)			c
#define Isalpha(x)  iswalpha(x)
#define Isalnum(x)  iswalnum(x)
#define Isgraph(x)  iswgraph(x)
#define Isspace(x)  iswspace(x)
#define Isdigit(x)  iswdigit(x)
#define Iscntrl(x)  iswcntrl(x)
#define Isprint(x)  iswprint(x)

#define Isupper(x)  iswupper(x)
#define Islower(x)  iswlower(x)
#define Toupper(x)  towupper(x)
#define Tolower(x)  towlower(x)

#define IsASCII(x)  (x < 0x100)
a62 2
#define Strrchr(s,c)    wcsrchr(s,c)
#define Strstr(s,v)     wcsstr(s,v)
a63 1
/* #define Strcpy(d,s)     wcscpy(d,s) */
a65 1

a67 5
#define Strcspn(s,r)    wcscspn(s,r)

#define Strtol(p,e,b)   wcstol(p,e,b)

#define Width(c)	(wcwidth(c) == -1 ? 0 : wcwidth(c))
a70 2
size_t	ct_mbrtowc(wchar_t *, const char *, size_t, void *);

a115 2
#define ct_free_argv(s)	free(s)

a161 1

@


1.13
log
@format string fixes in debug code;
committing right away because this code is not even compiled by default
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.12 2016/03/21 18:40:25 schwarze Exp $	*/
d34 1
a34 2

#ifdef WIDECHAR
a105 5
#define ct_wctob(w)          ((int)(w))
#define ct_wctomb            error
#define ct_wctomb_reset
#define ct_wcstombs(a, b, c)    (strncpy(a, b, c), strlen(a))
#define ct_mbstowcs(a, b, c)    (strncpy(a, b, c), strlen(a))
a110 2
#define FSTR			"%s"
#define FSTARSTR		"%.*s"
a111 16
#define UC(c)			(unsigned char)(c)

#define Isalpha(x)  isalpha((unsigned char)x)
#define Isalnum(x)  isalnum((unsigned char)x)
#define Isgraph(x)  isgraph((unsigned char)x)
#define Isspace(x)  isspace((unsigned char)x)
#define Isdigit(x)  isdigit((unsigned char)x)
#define Iscntrl(x)  iscntrl((unsigned char)x)
#define Isprint(x)  isprint((unsigned char)x)

#define Isupper(x)  isupper((unsigned char)x)
#define Islower(x)  islower((unsigned char)x)
#define Toupper(x)  toupper((unsigned char)x)
#define Tolower(x)  tolower((unsigned char)x)

#define IsASCII(x)  isascii((unsigned char)x)
a114 2
#define Strrchr(s,c)    strrchr(s,c)
#define Strstr(s,v)     strstr(s,v)
a115 1
/* #define Strcpy(d,s)     strcpy(d,s) */
a120 6
#define Strcspn(s,r)    strcspn(s,r)

#define Strtol(p,e,b)   strtol(p,e,b)

#define Width(c)	1

d124 1
a124 1
#ifdef WIDECHAR
a156 4
#define ct_decode_argv(l, s, b)	(s)
#define ct_conv_buff_resize(b, os, ns)
#define ct_encode_char(d, l, s)	(*d = s, 1)
#define ct_free_argv(s)
@


1.12
log
@Christos Zoulas just rescinded clauses 3 & 4 of his licenses, see
NetBSD chartype.c rev. 1.23, chartype.h rev. 1.25, eln.c rev. 1.28.
No code change.
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.11 2016/03/21 17:28:10 schwarze Exp $	*/
d69 1
d118 1
@


1.11
log
@Make the read_char() function always take a wchar_t * argument.

On first sight, it might look as if this required a bump because
it seems to change the public type el_rfunc_t.  But we only compile
with WIDECHAR, and in that case, there is no change in the interface.

This also simplifies some logic by getting rid of the NARROW_READ flag
which was broken anyway.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.10 2016/03/20 23:48:27 schwarze Exp $	*/
a15 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.10
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.9 2016/03/20 20:35:38 schwarze Exp $	*/
d112 1
a112 1
size_t	ct_mbrtowc(char *, const char *, size_t, void *);
@


1.9
log
@Delete the useless Int datatype and always use the standard wint_t
directly.  This is not a problem because <wchar_t> is required all
over the place anyway, even when WIDECHAR is not defined.
No functional change except that it fixes a few printf(3)
format string issues, %c vs. %lc.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.8 2016/03/20 20:16:09 schwarze Exp $	*/
d76 1
a76 1
#define STR(x) 			L ## x
d112 1
a112 1
size_t 	ct_mbrtowc(char *, const char *, size_t, void *);
d115 1
a115 1
#define ct_wctomb_reset      
d124 1
a124 1
#define STR(x) 			x
d211 1
a211 1
 * where a wide character takes up more than one column, the adjacent 
@


1.8
log
@Get rid of "#ifdef WIDECHAR" and one goto in read_char(),
making the code more readable.  Instead, provide an mbrtowc(3)
replacement function in chartype.[hc], files that encapsulate
such system dependencies anyway.  No functional change.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.7 2016/03/20 19:14:29 schwarze Exp $	*/
a71 1
#define Int			wint_t
a119 1
#define Int			int
@


1.7
log
@Fix the public interface function el_getc(3).
On OpenBSD, the effects are to set the return argument to the NUL byte
in case of a read failure (for robustness) and to properly set errno
when the character is out of range and cannot be stored in a byte.
Once we enable UTF-8, this will be needed to avoid returning bogus
bytes for valid Unicode characters.
On systems where the internal representation of wchar_t doesn't
match UCS-4, breakage was potentially even worse.
OK czarkoff@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.6 2016/03/20 17:19:48 schwarze Exp $	*/
d113 1
a113 1
#define ct_mbrtowc           error
@


1.6
log
@Fix the CHARSET_IS_UTF8 case in read_char().
For now, this mainly help programs explicitly using
wide-character functions like el_wgetc(3) and el_wgets(3).

1. After reading an invalid byte sequence, do not throw away additional
valid bytes; fix by me using mbrtowc(3), obsoleting utf8_islead().
2. When read(2) returns EOF, return that information to the caller,
do not prod on and potentially access garbage data in the buffer;
from Linas Vepstas via NetBSD read.c rev. 1.70 2013/05/27.
3. After read__fixio() failure, restore errno to the one set by read();
from Steffen Nurpmeso via NetBSD read.c rev. 1.68 2012/09/10.
4. After read__fixio() success, restore errno to the initial state
upon function entry; fix by me.

OK czarkoff@@.  Also committed to NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.5 2014/10/17 06:07:50 deraadt Exp $	*/
d65 1
d114 1
@


1.5
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.4 2011/07/07 16:15:47 nicm Exp $	*/
d64 1
a64 2
#define ct_mbtowc            mbtowc
#define ct_mbtowc_reset      mbtowc(0,0,0)
d112 1
a112 2
#define ct_mbtowc            error
#define ct_mbtowc_reset      
@


1.4
log
@Enable wide character functions in libedit (not the other libe*t).

ok stsp deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.3 2011/07/07 05:40:42 okan Exp $	*/
d192 1
a192 1
#define ct_free_argv(s)	el_free(s)
@


1.3
log
@sync with upstream, retaining local modifications.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.2 2011/04/04 18:48:17 stsp Exp $	*/
d48 1
a48 1
#ifndef __NetBSD__
@


1.2
log
@Make wcwidth() callers cope with -1 return value. Doesn't affect the build yet.
ok nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: chartype.h,v 1.1 2010/06/30 00:05:35 nicm Exp $	*/
d176 1
a176 1
/* Encode a wide character string and return the UTF-8 encoded result. */
d180 1
a180 1
/* Decode a (multi)?byte string and return the wide character string result. */
@


1.1
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d109 1
a109 1
#define Width(c)	wcwidth(c)
@

