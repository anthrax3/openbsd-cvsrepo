head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	OUneMOe0l7HombT5;

1.5
date	2016.03.20.22.57.59;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	VBVmrUoZFnMc0hts;

1.4
date	2016.03.20.20.35.38;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	b06qlwkNEbVitvG0;

1.3
date	2016.01.30.00.06.39;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	tGf8IdK8wCurneJ7;

1.2
date	2016.01.29.19.32.34;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	Ue1IcMCqgxm4S8jQ;

1.1
date	2016.01.29.17.23.21;	author schwarze;	state Exp;
branches;
next	;
commitid	MOfHvqt1MJvqXmCY;


desc
@@


1.6
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@/*	$OpenBSD: terminal.h,v 1.5 2016/03/20 22:57:59 schwarze Exp $	*/
/*	$NetBSD: term.h,v 1.21 2009/12/30 22:37:40 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)term.h	8.1 (Berkeley) 6/4/93
 */

/*
 * el.term.h: Termcap header
 */
#ifndef _h_el_terminal
#define	_h_el_terminal

typedef struct {		/* Symbolic function key bindings	*/
	const wchar_t	*name;	/* name of the key			*/
	int		 key;	/* Index in termcap table		*/
	keymacro_value_t	 fun;	/* Function bound to it			*/
	int		 type;	/* Type of function			*/
} funckey_t;

typedef struct {
	const char *t_name;		/* the terminal name	*/
	coord_t	  t_size;		/* # lines and cols	*/
	int	  t_flags;
#define	TERM_CAN_INSERT		0x001	/* Has insert cap	*/
#define	TERM_CAN_DELETE		0x002	/* Has delete cap	*/
#define	TERM_CAN_CEOL		0x004	/* Has CEOL cap		*/
#define	TERM_CAN_TAB		0x008	/* Can use tabs		*/
#define	TERM_CAN_ME		0x010	/* Can turn all attrs.	*/
#define	TERM_CAN_UP		0x020	/* Can move up		*/
#define	TERM_HAS_META		0x040	/* Has a meta key	*/
#define	TERM_HAS_AUTO_MARGINS	0x080	/* Has auto margins	*/
#define	TERM_HAS_MAGIC_MARGINS	0x100	/* Has magic margins	*/
	char	 *t_buf;		/* Termcap buffer	*/
	int	  t_loc;		/* location used	*/
	char	**t_str;		/* termcap strings	*/
	int	 *t_val;		/* termcap values	*/
	char	 *t_cap;		/* Termcap buffer	*/
	funckey_t	 *t_fkey;		/* Array of keys	*/
} el_terminal_t;

/*
 * fKey indexes
 */
#define	A_K_DN		0
#define	A_K_UP		1
#define	A_K_LT		2
#define	A_K_RT		3
#define	A_K_HO		4
#define	A_K_EN		5
#define	A_K_NKEYS	6

protected void	terminal_move_to_line(EditLine *, int);
protected void	terminal_move_to_char(EditLine *, int);
protected void	terminal_clear_EOL(EditLine *, int);
protected void	terminal_overwrite(EditLine *, const wchar_t *, size_t);
protected void	terminal_insertwrite(EditLine *, wchar_t *, int);
protected void	terminal_deletechars(EditLine *, int);
protected void	terminal_clear_screen(EditLine *);
protected void	terminal_beep(EditLine *);
protected int	terminal_change_size(EditLine *, int, int);
protected int	terminal_get_size(EditLine *, int *, int *);
protected int	terminal_init(EditLine *);
protected void	terminal_bind_arrow(EditLine *);
protected void	terminal_print_arrow(EditLine *, const wchar_t *);
protected int	terminal_clear_arrow(EditLine *, const wchar_t *);
protected int	terminal_set_arrow(EditLine *, const wchar_t *,
    keymacro_value_t *, int);
protected void	terminal_end(EditLine *);
protected void	terminal_get(EditLine *, const char **);
protected int	terminal_set(EditLine *, const char *);
protected int	terminal_settc(EditLine *, int, const wchar_t **);
protected int	terminal_gettc(EditLine *, int, char **);
protected int	terminal_telltc(EditLine *, int, const wchar_t **);
protected int	terminal_echotc(EditLine *, int, const wchar_t **);
protected void	terminal_writec(EditLine *, wint_t);
protected int	terminal__putc(EditLine *, wint_t);
protected void	terminal__flush(EditLine *);

/*
 * Easy access macros
 */
#define	EL_FLAGS	(el)->el_terminal.t_flags

#define	EL_CAN_INSERT		(EL_FLAGS & TERM_CAN_INSERT)
#define	EL_CAN_DELETE		(EL_FLAGS & TERM_CAN_DELETE)
#define	EL_CAN_CEOL		(EL_FLAGS & TERM_CAN_CEOL)
#define	EL_CAN_TAB		(EL_FLAGS & TERM_CAN_TAB)
#define	EL_CAN_ME		(EL_FLAGS & TERM_CAN_ME)
#define EL_CAN_UP		(EL_FLAGS & TERM_CAN_UP)
#define	EL_HAS_META		(EL_FLAGS & TERM_HAS_META)
#define	EL_HAS_AUTO_MARGINS	(EL_FLAGS & TERM_HAS_AUTO_MARGINS)
#define	EL_HAS_MAGIC_MARGINS	(EL_FLAGS & TERM_HAS_MAGIC_MARGINS)

#endif /* _h_el_terminal */
@


1.5
log
@Cleanup of private header inclusion:

1. Do not include private headers from "chared.h", "hist.h", "prompt.h",
"refresh.h", "search.h", "sig.h", "terminal.h", "tty.h".
The only private header having to include other private headers is "el.h".
2. Do not include "common.h", "parse.h", "help.h" from "el.h",
and do not include "emacs.h" and "vi.h" from "chared.h",
include them directly where needed.
3. Do include "fcns.h" from "el.h" because el_func_t is needed for "map.h".
4. Do not include private headers again that are already included by "el.h".
5. Include private headers after standard headers.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: terminal.h,v 1.4 2016/03/20 20:35:38 schwarze Exp $	*/
d45 1
a45 1
	const Char	*name;	/* name of the key			*/
d86 2
a87 2
protected void	terminal_overwrite(EditLine *, const Char *, size_t);
protected void	terminal_insertwrite(EditLine *, Char *, int);
d95 4
a98 3
protected void	terminal_print_arrow(EditLine *, const Char *);
protected int	terminal_clear_arrow(EditLine *, const Char *);
protected int	terminal_set_arrow(EditLine *, const Char *, keymacro_value_t *, int);
d102 1
a102 1
protected int	terminal_settc(EditLine *, int, const Char **);
d104 2
a105 2
protected int	terminal_telltc(EditLine *, int, const Char **);
protected int	terminal_echotc(EditLine *, int, const Char **);
@


1.4
log
@Delete the useless Int datatype and always use the standard wint_t
directly.  This is not a problem because <wchar_t> is required all
over the place anyway, even when WIDECHAR is not defined.
No functional change except that it fixes a few printf(3)
format string issues, %c vs. %lc.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: terminal.h,v 1.3 2016/01/30 00:06:39 schwarze Exp $	*/
a42 2

#include "histedit.h"
@


1.3
log
@Third step in synching with NetBSD:
* rename fkey_t to funckey_t and el_term_t to el_terminal_t
* rename struct editline member el_term to el_terminal
* rename many functions in terminal.c from term_*() to terminal_*(),
for consistency with the file name and to not look related to <term.h>
No functional change.
This makes refresh.c and sig.c almost identical to the NetBSD versions.
It reduces the remaining diff from +2446 -1805 to +2053 -1420.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: terminal.h,v 1.2 2016/01/29 19:32:34 schwarze Exp $	*/
d107 2
a108 2
protected void	terminal_writec(EditLine *, Int);
protected int	terminal__putc(EditLine *, Int);
@


1.2
log
@Second step in synching with NetBSD:
* Rename some types from *key*_t to *keymacro*_t.
* Rename struct editline member el_key to el_keymacro.
* Rename some functions in keymacro.c from key*() to keymacro*().
This removes the conflict of key_clear(), key_end(), and key_print()
with macros in <term.h>.  No functional change.
This makes keymacro.h identical to the NetBSD version.
It reduces the remaining diff from +2640 -1998 to +2446 -1805.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: terminal.h,v 1.1 2016/01/29 17:23:21 schwarze Exp $	*/
d51 1
a51 1
} fkey_t;
d71 2
a72 2
	fkey_t	 *t_fkey;		/* Array of keys	*/
} el_term_t;
d85 25
a109 26
protected void	term_move_to_line(EditLine *, int);
protected void	term_move_to_char(EditLine *, int);
protected void	term_clear_EOL(EditLine *, int);
protected void	term_overwrite(EditLine *, const Char *, size_t);
protected void	term_insertwrite(EditLine *, Char *, int);
protected void	term_deletechars(EditLine *, int);
protected void	term_clear_screen(EditLine *);
protected void	term_beep(EditLine *);
protected int	term_change_size(EditLine *, int, int);
protected int	term_get_size(EditLine *, int *, int *);
protected int	term_init(EditLine *);
protected void	term_bind_arrow(EditLine *);
protected void	term_print_arrow(EditLine *, const Char *);
protected int	term_clear_arrow(EditLine *, const Char *);
protected int	term_set_arrow(EditLine *, const Char *, keymacro_value_t *,
    int);
protected void	term_end(EditLine *);
protected void	term_get(EditLine *, const char **);
protected int	term_set(EditLine *, const char *);
protected int	term_settc(EditLine *, int, const Char **);
protected int	term_gettc(EditLine *, int, char **);
protected int	term_telltc(EditLine *, int, const Char **);
protected int	term_echotc(EditLine *, int, const Char **);
protected void	term_writec(EditLine *, Int);
protected int	term__putc(EditLine *, Int);
protected void	term__flush(EditLine *);
d114 1
a114 1
#define	EL_FLAGS	(el)->el_term.t_flags
@


1.1
log
@Start synching with NetBSD:
Rename the files key.[hc] to keymacro.[hc] and term.[hc] to terminal.[hc].
The change makes sense because "term.h" conflicts with <term.h>
and the functions key_clear(), key_end(), and key_print() in "key.h"
conflict with macros in <term.h>.
No content change yet, no binary change in *.o after "strip -d".
This reduces the remaining diff from +4634 -3992 to +2640 -1998.
OK czarkoff@@, and mmcc@@ agrees with the direction.
@
text
@d1 1
a1 1
/*	$OpenBSD: term.h,v 1.8 2010/06/30 00:05:35 nicm Exp $	*/
d49 1
a49 1
	key_value_t	 fun;	/* Function bound to it			*/
d99 2
a100 1
protected int	term_set_arrow(EditLine *, const Char *, key_value_t *, int);
@

