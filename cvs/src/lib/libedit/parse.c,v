head	1.20;
access;
symbols
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.14
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.12
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.8
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.6
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.4
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.10.0.6
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.4
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.20
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.04.11.21.17.29;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	I3AtNAFb4FywnTMT;

1.19
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	OUneMOe0l7HombT5;

1.18
date	2016.04.11.19.54.54;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	xizUpRlYj2C4Hcj6;

1.17
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	tRHhB2RN3ZD1GvoI;

1.16
date	2016.03.20.22.57.59;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	VBVmrUoZFnMc0hts;

1.15
date	2016.03.20.20.35.38;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	b06qlwkNEbVitvG0;

1.14
date	2016.01.30.12.22.20;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	dCN84ovvbfYwqrqX;

1.13
date	2016.01.30.00.06.39;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	tGf8IdK8wCurneJ7;

1.12
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	bdUOvGFxUQgqZg7x;

1.11
date	2011.11.27.21.46.44;	author pascal;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.25.20.12.38;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.31.08.42.24;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.01.21.11.21;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.26;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.14.05.12.55;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.16.05.18.39;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.41;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.41;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@delete the "private" and "public" preprocessor macros, just use standard C;
OK martijn@@
@
text
@/*	$OpenBSD: parse.c,v 1.19 2016/04/11 20:43:33 schwarze Exp $	*/
/*	$NetBSD: parse.c,v 1.38 2016/04/11 18:56:31 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "config.h"

/*
 * parse.c: parse an editline extended command
 *
 * commands are:
 *
 *	bind
 *	echotc
 *	edit
 *	gettc
 *	history
 *	settc
 *	setty
 */
#include <stdlib.h>
#include <string.h>

#include "el.h"
#include "parse.h"

static const struct {
	const wchar_t *name;
	int (*func)(EditLine *, int, const wchar_t **);
} cmds[] = {
	{ L"bind",		map_bind	},
	{ L"echotc",		terminal_echotc	},
	{ L"edit",		el_editmode	},
	{ L"history",		hist_command	},
	{ L"telltc",		terminal_telltc	},
	{ L"settc",		terminal_settc	},
	{ L"setty",		tty_stty	},
	{ NULL,			NULL		}
};


/* parse_line():
 *	Parse a line and dispatch it
 */
protected int
parse_line(EditLine *el, const wchar_t *line)
{
	const wchar_t **argv;
	int argc;
	TokenizerW *tok;

	tok = tok_winit(NULL);
	tok_wstr(tok, line, &argc, &argv);
	argc = el_wparse(el, argc, argv);
	tok_wend(tok);
	return argc;
}


/* el_parse():
 *	Command dispatcher
 */
int
el_wparse(EditLine *el, int argc, const wchar_t *argv[])
{
	const wchar_t *ptr;
	int i;

	if (argc < 1)
		return -1;
	ptr = wcschr(argv[0], L':');
	if (ptr != NULL) {
		wchar_t *tprog;
		size_t l;

		if (ptr == argv[0])
			return 0;
		l = ptr - argv[0] - 1;
		tprog = reallocarray(NULL, l + 1, sizeof(*tprog));
		if (tprog == NULL)
			return 0;
		(void) wcsncpy(tprog, argv[0], l);
		tprog[l] = '\0';
		ptr++;
		l = el_match(el->el_prog, tprog);
		free(tprog);
		if (!l)
			return 0;
	} else
		ptr = argv[0];

	for (i = 0; cmds[i].name != NULL; i++)
		if (wcscmp(cmds[i].name, ptr) == 0) {
			i = (*cmds[i].func) (el, argc, argv);
			return -i;
		}
	return -1;
}


/* parse__escape():
 *	Parse a string of the form ^<char> \<odigit> \<char> \U+xxxx and return
 *	the appropriate character or -1 if the escape is not valid
 */
protected int
parse__escape(const wchar_t **ptr)
{
	const wchar_t *p;
	wint_t c;

	p = *ptr;

	if (p[1] == 0)
		return -1;

	if (*p == '\\') {
		p++;
		switch (*p) {
		case 'a':
			c = '\007';	/* Bell */
			break;
		case 'b':
			c = '\010';	/* Backspace */
			break;
		case 't':
			c = '\011';	/* Horizontal Tab */
			break;
		case 'n':
			c = '\012';	/* New Line */
			break;
		case 'v':
			c = '\013';	/* Vertical Tab */
			break;
		case 'f':
			c = '\014';	/* Form Feed */
			break;
		case 'r':
			c = '\015';	/* Carriage Return */
			break;
		case 'e':
			c = '\033';	/* Escape */
			break;
		case 'U':		/* Unicode \U+xxxx or \U+xxxxx format */
		{
			int i;
			const wchar_t hex[] = L"0123456789ABCDEF";
			const wchar_t *h;
			++p;
			if (*p++ != '+')
				return -1;
			c = 0;
			for (i = 0; i < 5; ++i) {
				h = wcschr(hex, *p++);
				if (!h && i < 4)
					return -1;
				else if (h)
					c = (c << 4) | ((int)(h - hex));
				else
					--p;
			}
			if (c > 0x10FFFF) /* outside valid character range */
				return -1;
			break;
		}
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		{
			int cnt, ch;

			for (cnt = 0, c = 0; cnt < 3; cnt++) {
				ch = *p++;
				if (ch < '0' || ch > '7') {
					p--;
					break;
				}
				c = (c << 3) | (ch - '0');
			}
			if ((c & 0xffffff00) != 0)
				return -1;
			--p;
			break;
		}
		default:
			c = *p;
			break;
		}
	} else if (*p == '^') {
		p++;
		c = (*p == '?') ? '\177' : (*p & 0237);
	} else
		c = *p;
	*ptr = ++p;
	return c;
}

/* parse__string():
 *	Parse the escapes from in and put the raw string out
 */
protected wchar_t *
parse__string(wchar_t *out, const wchar_t *in)
{
	wchar_t *rv = out;
	int n;

	for (;;)
		switch (*in) {
		case '\0':
			*out = '\0';
			return rv;

		case '\\':
		case '^':
			if ((n = parse__escape(&in)) == -1)
				return NULL;
			*out++ = (wchar_t)n;
			break;

		case 'M':
			if (in[1] == '-' && in[2] != '\0') {
				*out++ = '\033';
				in += 2;
				break;
			}
			/*FALLTHROUGH*/

		default:
			*out++ = *in++;
			break;
		}
}


/* parse_cmd():
 *	Return the command number for the command string given
 *	or -1 if one is not found
 */
protected int
parse_cmd(EditLine *el, const wchar_t *cmd)
{
	el_bindings_t *b;
	int i;

	for (b = el->el_map.help, i = 0; i < el->el_map.nfunc; i++)
		if (wcscmp(b[i].name, cmd) == 0)
			return b[i].func;
	return -1;
}
@


1.19
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 2
a2 2
/*	$OpenBSD: parse.c,v 1.18 2016/04/11 19:54:54 schwarze Exp $	*/
/*	$NetBSD: parse.c,v 1.37 2016/04/11 00:50:13 christos Exp $	*/
d57 1
a57 1
private const struct {
d93 1
a93 1
public int
@


1.18
log
@Move wrapper macros to the two files actually needing them:
FUNW, Strlen, Strdup, Strcmp, Strncmp, Strncpy, Strncat -> history.c
Strchr, tok_strdup -> tokenizer.c
FUN, TYPE, STR -> both of these files

OK martijn@@

Also proofread by Christian Heckendorf <mbie at ulmus dot me>
who reported some whitespace issues in parse.c.
@
text
@d1 2
a2 2
/*	$OpenBSD: parse.c,v 1.17 2016/03/20 23:48:27 schwarze Exp $	*/
/*	$NetBSD: parse.c,v 1.35 2016/02/17 19:47:49 christos Exp $	*/
d58 2
a59 2
	const Char *name;
	int (*func)(EditLine *, int, const Char **);
d76 1
a76 1
parse_line(EditLine *el, const Char *line)
d78 1
a78 1
	const Char **argv;
d94 1
a94 1
el_wparse(EditLine *el, int argc, const Char *argv[])
d96 1
a96 1
	const Char *ptr;
d103 1
a103 1
		Char *tprog;
d136 1
a136 1
parse__escape(const Char **ptr)
d138 1
a138 1
	const Char *p;
d176 2
a177 2
			const Char hex[] = L"0123456789ABCDEF";
			const Char *h;
d235 2
a236 2
protected Char *
parse__string(Char *out, const Char *in)
d238 1
a238 1
	Char *rv = out;
d251 1
a251 1
			*out++ = n;
d274 1
a274 1
parse_cmd(EditLine *el, const Char *cmd)
@


1.17
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.16 2016/03/20 22:57:59 schwarze Exp $	*/
d61 8
a68 8
	{ STR("bind"),		map_bind	},
	{ STR("echotc"),	terminal_echotc	},
	{ STR("edit"),		el_editmode	},
	{ STR("history"),	hist_command	},
	{ STR("telltc"),	terminal_telltc	},
	{ STR("settc"),	        terminal_settc	},
	{ STR("setty"),	        tty_stty	},
	{ NULL,		        NULL		}
d80 1
a80 1
	TYPE(Tokenizer) *tok;
d82 4
a85 4
	tok = FUN(tok,init)(NULL);
	FUN(tok,str)(tok, line, &argc, &argv);
	argc = FUN(el,parse)(el, argc, argv);
	FUN(tok,end)(tok);
d94 1
a94 1
FUN(el,parse)(EditLine *el, int argc, const Char *argv[])
d101 1
a101 1
	ptr = Strchr(argv[0], ':');
d112 1
a112 1
		(void) Strncpy(tprog, argv[0], l);
d123 1
a123 1
		if (Strcmp(cmds[i].name, ptr) == 0) {
d173 8
a180 8
                case 'U':               /* Unicode \U+xxxx or \U+xxxxx format */
                {
                        int i;
                        const Char hex[] = STR("0123456789ABCDEF");
                        const Char *h;
                        ++p;
                        if (*p++ != '+')
                                return -1;
d182 13
a194 13
                        for (i = 0; i < 5; ++i) {
                                h = Strchr(hex, *p++);
                                if (!h && i < 4)
                                        return -1;
                                else if (h)
                                        c = (c << 4) | ((int)(h - hex));
                                else
                                        --p;
                        }
                        if (c > 0x10FFFF) /* outside valid character range */
                                return -1;
                        break;
                }
d280 1
a280 1
		if (Strcmp(b[i].name, cmd) == 0)
@


1.16
log
@Cleanup of private header inclusion:

1. Do not include private headers from "chared.h", "hist.h", "prompt.h",
"refresh.h", "search.h", "sig.h", "terminal.h", "tty.h".
The only private header having to include other private headers is "el.h".
2. Do not include "common.h", "parse.h", "help.h" from "el.h",
and do not include "emacs.h" and "vi.h" from "chared.h",
include them directly where needed.
3. Do include "fcns.h" from "el.h" because el_func_t is needed for "map.h".
4. Do not include private headers again that are already included by "el.h".
5. Include private headers after standard headers.

OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: parse.c,v 1.15 2016/03/20 20:35:38 schwarze Exp $	*/
/*	$NetBSD: parse.c,v 1.23 2009/12/30 22:37:40 christos Exp $	*/
d52 1
d61 1
a61 1
	{ STR("bind"),  	map_bind	},
d63 1
a63 1
	{ STR("edit"),  	el_editmode	},
@


1.15
log
@Delete the useless Int datatype and always use the standard wint_t
directly.  This is not a problem because <wchar_t> is required all
over the place anyway, even when WIDECHAR is not defined.
No functional change except that it fixes a few printf(3)
format string issues, %c vs. %lc.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.14 2016/01/30 12:22:20 schwarze Exp $	*/
d51 2
d54 1
a54 1
#include <stdlib.h>
@


1.14
log
@Fourth step in synching with NetBSD:
KNF: Remove parentheses from return lines.  No object change.
This makes emacs.c and prompt.c identical to the NetBSD versions.
It reduces the remaining diff from +2053 -1261 to +1526 -734.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.13 2016/01/30 00:06:39 schwarze Exp $	*/
d136 1
a136 1
	Int c;
@


1.13
log
@Third step in synching with NetBSD:
* rename fkey_t to funckey_t and el_term_t to el_terminal_t
* rename struct editline member el_term to el_terminal
* rename many functions in terminal.c from term_*() to terminal_*(),
for consistency with the file name and to not look related to <term.h>
No functional change.
This makes refresh.c and sig.c almost identical to the NetBSD versions.
It reduces the remaining diff from +2446 -1805 to +2053 -1420.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.12 2014/10/17 06:07:50 deraadt Exp $	*/
d83 1
a83 1
	return (argc);
d97 1
a97 1
		return (-1);
d104 1
a104 1
			return (0);
d108 1
a108 1
			return (0);
d115 1
a115 1
			return (0);
d122 1
a122 1
			return (-i);
d124 1
a124 1
	return (-1);
d141 1
a141 1
		return (-1);
d177 1
a177 1
                                return (-1);
d182 1
a182 1
                                        return (-1);
d212 1
a212 1
				return (-1);
d226 1
a226 1
	return (c);
d242 1
a242 1
			return (rv);
d247 1
a247 1
				return (NULL);
d278 2
a279 2
			return (b[i].func);
	return (-1);
@


1.12
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.11 2011/11/27 21:46:44 pascal Exp $	*/
d59 1
a59 1
	{ STR("echotc"),	term_echotc	},
d62 2
a63 2
	{ STR("telltc"),	term_telltc	},
	{ STR("settc"),	        term_settc	},
@


1.11
log
@Don't segfault when trying to bind to an invalid command.  While here,
kill a C++-style comment.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.10 2010/06/30 00:05:35 nicm Exp $	*/
d106 1
a106 1
		tprog = el_malloc((l + 1) * sizeof(*tprog));
d113 1
a113 1
		el_free(tprog);
@


1.10
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d274 1
d276 3
a278 3
	for (b = el->el_map.help; b->name != NULL; b++)
		if (Strcmp(b->name, cmd) == 0)
			return (b->func);
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 2
a2 2
/*	$OpenBSD: parse.c,v 1.8 2003/11/25 20:12:38 otto Exp $	*/
/*	$NetBSD: parse.c,v 1.19 2003/11/02 20:06:57 christos Exp $	*/
a51 1
#include "tokenizer.h"
d55 2
a56 2
	const char *name;
	int (*func)(EditLine *, int, const char **);
d58 8
a65 8
	{ "bind",	map_bind	},
	{ "echotc",	term_echotc	},
	{ "edit",	el_editmode	},
	{ "history",	hist_command	},
	{ "telltc",	term_telltc	},
	{ "settc",	term_settc	},
	{ "setty",	tty_stty	},
	{ NULL,		NULL		}
d73 1
a73 1
parse_line(EditLine *el, const char *line)
d75 1
a75 1
	const char **argv;
d77 1
a77 1
	Tokenizer *tok;
d79 4
a82 4
	tok = tok_init(NULL);
	tok_line(tok, line, &argc, &argv);
	argc = el_parse(el, argc, argv);
	tok_end(tok);
d91 1
a91 1
el_parse(EditLine *el, int argc, const char *argv[])
d93 1
a93 1
	const char *ptr;
d98 1
a98 1
	ptr = strchr(argv[0], ':');
d100 1
a100 1
		char *tprog;
d106 1
a106 1
		tprog = (char *) el_malloc(l + 1);
d109 1
a109 1
		(void) strncpy(tprog, argv[0], l);
d120 1
a120 1
		if (strcmp(cmds[i].name, ptr) == 0) {
d129 1
a129 1
 *	Parse a string of the form ^<char> \<odigit> \<char> and return
d133 1
a133 1
parse__escape(const char **const ptr)
d135 2
a136 2
	const char *p;
	int c;
d170 22
d232 2
a233 2
protected char *
parse__string(char *out, const char *in)
d235 1
a235 1
	char *rv = out;
d271 1
a271 1
parse_cmd(EditLine *el, const char *cmd)
d276 1
a276 1
		if (strcmp(b->name, cmd) == 0)
@


1.8
log
@Sync libedit to NetBSD libedit as of Nov 8, 2003.
Tested by jmc@@ djm@@ and myself
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.7 2003/10/31 08:42:24 otto Exp $	*/
a36 7
#if !defined(lint) && !defined(SCCSID)
#if 0
static char sccsid[] = "@@(#)parse.c	8.1 (Berkeley) 6/4/93";
#else
static const char rcsid[] = "$OpenBSD: parse.c,v 1.7 2003/10/31 08:42:24 otto Exp $";
#endif
#endif /* not lint && not SCCSID */
@


1.7
log
@Update to NetBSD libedit (from Oct 1, 2003), adding some string
cleaning and history bug fixes. The code includes GNU libreadline
functionality, but the corresponding header files are not installed,
since some libreadline functions are missing. There are some minor API
changes, notably:

old: EditLine *el_init(const char *, FILE *, FILE *);
new: EditLine *el_init(const char *, FILE *, FILE *, FILE *);

old: HistEvent *history(History *h, int op, ...);
new: int history(History *h, HistEvent *ev, int op, ...); plus some
changes in operation names. See editline(3) for details.

Tested by djm@@, mouring@@, jmc@@.

ok deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: parse.c,v 1.17 2003/08/07 16:44:32 agc Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD$";
d206 1
a206 1
	} else if (*p == '^' && isalpha((unsigned char) p[1])) {
d214 1
d236 8
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: parse.c,v 1.5 2003/05/01 21:11:21 avsm Exp $	*/
/*	$NetBSD: parse.c,v 1.5 1997/01/11 09:57:08 lukem Exp $	*/
d36 1
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: parse.c,v 1.5 2003/05/01 21:11:21 avsm Exp $";
d52 1
a57 1
#include "sys.h"
d60 1
d62 3
a64 3
private struct {
    char *name;
    int (*func)(EditLine *, int, char **);
d66 8
a73 7
    {	"bind",		map_bind 	},
    {	"echotc",	term_echotc 	},
    {	"history",	hist_list	},
    {	"telltc",	term_telltc 	},
    {	"settc",	term_settc	},
    {	"setty",	tty_stty	},
    {	NULL,		NULL		}
d81 1
a81 3
parse_line(el, line)
    EditLine *el;
    const char *line;
d83 9
a91 9
    char **argv;
    int argc;
    Tokenizer *tok;

    tok = tok_init(NULL);
    tok_line(tok, line, &argc, &argv);
    argc = el_parse(el, argc, argv);
    tok_end(tok);
    return argc;
d94 1
d99 1
a99 4
el_parse(el, argc, argv)
    EditLine *el;
    int argc;
    char *argv[];
d101 2
a102 2
    char *ptr;
    int i;
d104 29
a132 18
    if (argc < 1)
	return -1;
    ptr = strchr(argv[0], ':');
    if (ptr != NULL) {
	*ptr++ = '\0';
	if (! el_match(el->el_prog, argv[0]))
	    return 0;
    }
    else
	ptr = argv[0];

    for (i = 0; cmds[i].name != NULL; i++)
	if (strcmp(cmds[i].name, ptr) == 0) {
	    i = (*cmds[i].func)(el, argc, argv);
	    return -i;
	}

    return -1;
d141 1
a141 2
parse__escape(ptr)
    const char  ** const ptr;
d143 2
a144 2
    const char   *p;
    int   c;
d146 1
a146 1
    p = *ptr;
d148 2
a149 2
    if (p[1] == 0) 
	return -1;
d151 53
a203 42
    if (*p == '\\') {
	p++;
	switch (*p) {
	case 'a':
	    c = '\007';		/* Bell */
	    break;
	case 'b':
	    c = '\010';		/* Backspace */
	    break;
	case 't':
	    c = '\011';		/* Horizontal Tab */
	    break;
	case 'n':
	    c = '\012';		/* New Line */
	    break;
	case 'v':
	    c = '\013';		/* Vertical Tab */
	    break;
	case 'f':
	    c = '\014';		/* Form Feed */
	    break;
	case 'r':
	    c = '\015';		/* Carriage Return */
	    break;
	case 'e':
	    c = '\033';		/* Escape */
	    break;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	    {
		int cnt, ch;

		for (cnt = 0, c = 0; cnt < 3; cnt++) {
		    ch = *p++;
		    if (ch < '0' || ch > '7') {
			p--;
a204 2
		    }
		    c = (c << 3) | (ch - '0');
d206 7
a212 18
		if ((c & 0xffffff00) != 0) 
		    return -1;
		--p;
	    }
	    break;
	default:
	    c = *p;
	    break;
	}
    }
    else if (*p == '^' && isalpha((unsigned char) p[1])) {
	p++;
	c = (*p == '?') ? '\177' : (*p & 0237);
    }
    else
	c = *p;
    *ptr = ++p;
    return c;
a213 1

d218 1
a218 3
parse__string(out, in)
    char *out;
    const char *in;
d220 20
a239 19
    char *rv = out;
    int n;
    for (;;)
	switch (*in) {
	case '\0':
	    *out = '\0';
	    return rv;

	case '\\':
	case '^':
	    if ((n = parse__escape(&in)) == -1)
		return NULL;
	    *out++ = n;
	    break;

	default:
	    *out++ = *in++;
	    break;
	}
d242 1
d248 1
a248 3
parse_cmd(el, cmd)
    EditLine *el;
    const char *cmd;
d250 1
a250 1
    el_bindings_t *b;
d252 4
a255 4
    for (b = el->el_map.help; b->name != NULL; b++)
	if (strcmp(b->name, cmd) == 0)
	    return b->func;
    return -1;
@


1.5
log
@is -Wall clean by making rcsid const
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.4 2002/02/16 21:27:26 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: parse.c,v 1.4 2002/02/16 21:27:26 millert Exp $";
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.3 1997/03/14 05:12:55 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: parse.c,v 1.3 1997/03/14 05:12:55 millert Exp $";
@


1.3
log
@fix el_source() - a block needed braces around it (from NetBSD)
Some strcpy() -> strncpy (from NetBSD)
Some KNF
Add current NetBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.2 1997/01/16 05:18:39 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: parse.c,v 1.2 1997/01/16 05:18:39 millert Exp $";
d66 1
a66 1
    int (*func) __P((EditLine *, int, char **));
@


1.2
log
@Merge in NetBSD libedit changes and new man pages.  Also fix some
strncpy() usage in their code.  NetBSD change log was:
    * add a man page for the editline routines
    * add a man page describing editrc
    * fix bugs in el_parse():
      * didn't execute command when program name matched (test reversed)
      * was checking against empty string instead of program name
      * after checks, command to run also pointed to empty string
    * document ^char and \ escape sequences
    * when parsing ^char control chars, check the correct char when determining
      validity (previously, ^char was a NOP interpreted as the literal string
      because of this bug)
    * Implement CC_REDISPLAY, which (unlike CC_REFRESH) redraws the entire input
    * line (a la ^R). This is useful if the binding outputs information and
    * mucks up the input line. To be used in ``list-choices'' bindings (refer
    * to the ^D binding in csh when filec is set)
@
text
@d1 2
a2 1
/*	$OpenBSD: $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: $";
@


1.1
log
@Initial revision
@
text
@d1 2
d40 1
d42 3
d54 2
d57 1
a57 1
 *	gettc
d108 6
a113 6
    for (ptr = argv[0]; *ptr && *ptr != ':'; ptr++)
	continue;

    if (*ptr == ':') {
	*ptr = '\0';
	if (el_match(el->el_prog, ptr))
d201 1
a201 1
    else if (*p == '^' && isalpha((unsigned char) *p)) {
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
