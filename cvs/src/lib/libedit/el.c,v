head	1.36;
access;
symbols
	OPENBSD_6_0:1.36.0.2
	OPENBSD_6_0_BASE:1.36
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.18.0.16
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.14
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.10
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.16.0.4
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.24
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.20
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.18
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.16
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.14
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.12
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.10
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.12
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.36
date	2016.05.22.23.09.56;	author schwarze;	state Exp;
branches;
next	1.35;
commitid	JDRx6gbg98ixcAQq;

1.35
date	2016.05.20.15.30.17;	author schwarze;	state Exp;
branches;
next	1.34;
commitid	FRyPaNIGw56FlvYt;

1.34
date	2016.04.11.21.17.29;	author schwarze;	state Exp;
branches;
next	1.33;
commitid	I3AtNAFb4FywnTMT;

1.33
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.32;
commitid	OUneMOe0l7HombT5;

1.32
date	2016.04.11.19.54.54;	author schwarze;	state Exp;
branches;
next	1.31;
commitid	xizUpRlYj2C4Hcj6;

1.31
date	2016.04.09.20.15.26;	author schwarze;	state Exp;
branches;
next	1.30;
commitid	0bnhGLXZIvXlnMLp;

1.30
date	2016.04.09.19.31.55;	author schwarze;	state Exp;
branches;
next	1.29;
commitid	t22PDRfkb5DJX3rc;

1.29
date	2016.03.21.17.28.10;	author schwarze;	state Exp;
branches;
next	1.28;
commitid	bxfYrS2VROPyQgXw;

1.28
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.27;
commitid	tRHhB2RN3ZD1GvoI;

1.27
date	2016.03.20.22.57.59;	author schwarze;	state Exp;
branches;
next	1.26;
commitid	VBVmrUoZFnMc0hts;

1.26
date	2016.03.20.22.09.24;	author schwarze;	state Exp;
branches;
next	1.25;
commitid	NaWUbSqizJslSEdn;

1.25
date	2016.02.02.00.43.12;	author schwarze;	state Exp;
branches;
next	1.24;
commitid	Ixwz8SQuvKPzuowe;

1.24
date	2016.01.30.17.32.52;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	wAt9MiELkmlnoi4U;

1.23
date	2016.01.30.12.22.20;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	dCN84ovvbfYwqrqX;

1.22
date	2016.01.30.00.06.39;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	tGf8IdK8wCurneJ7;

1.21
date	2016.01.29.19.32.33;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	Ue1IcMCqgxm4S8jQ;

1.20
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	0DYulI8hhujBHMcR;

1.19
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	bdUOvGFxUQgqZg7x;

1.18
date	2011.07.13.11.05.17;	author otto;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.07.05.40.42;	author okan;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.08.23.18.31.25;	author otto;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.25.20.12.38;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.31.08.42.24;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.01.21.11.21;	author avsm;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.19.19.39.37;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.13.20.35.19;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.28.17.45.25;	author dugsong;	state Exp;
branches;
next	1.6;

1.6
date	97.06.29.23.40.48;	author millert;	state Exp;
branches
	1.6.12.1;
next	1.5;

1.5
date	97.03.14.05.12.45;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.16.05.18.31;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.16.15.09.45;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.26.00.17.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.40;	author deraadt;	state Exp;
branches;
next	;

1.6.12.1
date	2000.06.28.18.12.56;	author jason;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Improve modularization at the chared/read boundary, no functional change.

Stop the read.c module from poking the el_chared.c_macro data
structure that used to belong to the chared.c module.  Given that
no other module, not even chared itself, is using that data, move it
into the read modules's own opaque data structure, struct el_read_t.

That gets rid of one struct, one #define, one struct member, and one
function argument in the chared.h interface.

OK czarkoff@@
@
text
@/*	$OpenBSD: el.c,v 1.35 2016/05/20 15:30:17 schwarze Exp $	*/
/*	$NetBSD: el.c,v 1.61 2011/01/27 23:11:40 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "config.h"

/*
 * el.c: EditLine interface functions
 */
#include <sys/types.h>
#include <ctype.h>
#include <langinfo.h>
#include <limits.h>
#include <locale.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>

#include "el.h"
#include "parse.h"
#include "read.h"

/* el_init():
 *	Initialize editline and set default parameters.
 */
EditLine *
el_init(const char *prog, FILE *fin, FILE *fout, FILE *ferr)
{
	EditLine *el = (EditLine *) malloc(sizeof(EditLine));

	if (el == NULL)
		return NULL;

	memset(el, 0, sizeof(EditLine));

	el->el_infile = fin;
	el->el_outfile = fout;
	el->el_errfile = ferr;

	el->el_infd = fileno(fin);
	el->el_outfd = fileno(fout);
	el->el_errfd = fileno(ferr);

	el->el_prog = wcsdup(ct_decode_string(prog, &el->el_scratch));
	if (el->el_prog == NULL) {
		free(el);
		return NULL;
	}

	/*
         * Initialize all the modules. Order is important!!!
         */
	el->el_flags = 0;
	if (setlocale(LC_CTYPE, NULL) != NULL){
		if (strcmp(nl_langinfo(CODESET), "UTF-8") == 0)
			el->el_flags |= CHARSET_IS_UTF8;
	}

	if (terminal_init(el) == -1) {
		free(el->el_prog);
		free(el);
		return NULL;
	}
	(void) keymacro_init(el);
	(void) map_init(el);
	if (tty_init(el) == -1)
		el->el_flags |= NO_TTY;
	(void) ch_init(el);
	(void) search_init(el);
	(void) hist_init(el);
	(void) prompt_init(el);
	(void) sig_init(el);
	if (read_init(el) == -1) {
		el_end(el);
		return NULL;
	}
	return el;
}


/* el_end():
 *	Clean up.
 */
void
el_end(EditLine *el)
{

	if (el == NULL)
		return;

	el_reset(el);

	terminal_end(el);
	keymacro_end(el);
	map_end(el);
	tty_end(el);
	ch_end(el);
	read_end(el->el_read);
	search_end(el);
	hist_end(el);
	prompt_end(el);
	sig_end(el);

	free(el->el_prog);
	free(el->el_scratch.cbuff);
	free(el->el_scratch.wbuff);
	free(el->el_lgcyconv.cbuff);
	free(el->el_lgcyconv.wbuff);
	free(el);
}


/* el_reset():
 *	Reset the tty and the parser
 */
void
el_reset(EditLine *el)
{

	tty_cookedmode(el);
	ch_reset(el);		/* XXX: Do we want that? */
}


/* el_set():
 *	set the editline parameters
 */
int
el_wset(EditLine *el, int op, ...)
{
	va_list ap;
	int rv = 0;

	if (el == NULL)
		return -1;
	va_start(ap, op);

	switch (op) {
	case EL_PROMPT:
	case EL_RPROMPT: {
		el_pfunc_t p = va_arg(ap, el_pfunc_t);

		rv = prompt_set(el, p, 0, op, 1);
		break;
	}

	case EL_RESIZE: {
		el_zfunc_t p = va_arg(ap, el_zfunc_t);
		void *arg = va_arg(ap, void *);
		rv = ch_resizefun(el, p, arg);
		break;
	}

	case EL_PROMPT_ESC:
	case EL_RPROMPT_ESC: {
		el_pfunc_t p = va_arg(ap, el_pfunc_t);
		int c = va_arg(ap, int);

		rv = prompt_set(el, p, c, op, 1);
		break;
	}

	case EL_TERMINAL:
		rv = terminal_set(el, va_arg(ap, char *));
		break;

	case EL_EDITOR:
		rv = map_set_editor(el, va_arg(ap, wchar_t *));
		break;

	case EL_SIGNAL:
		if (va_arg(ap, int))
			el->el_flags |= HANDLE_SIGNALS;
		else
			el->el_flags &= ~HANDLE_SIGNALS;
		break;

	case EL_BIND:
	case EL_TELLTC:
	case EL_SETTC:
	case EL_ECHOTC:
	case EL_SETTY:
	{
		const wchar_t *argv[20];
		int i;

		for (i = 1; i < 20; i++)
			if ((argv[i] = va_arg(ap, wchar_t *)) == NULL)
				break;

		switch (op) {
		case EL_BIND:
			argv[0] = L"bind";
			rv = map_bind(el, i, argv);
			break;

		case EL_TELLTC:
			argv[0] = L"telltc";
			rv = terminal_telltc(el, i, argv);
			break;

		case EL_SETTC:
			argv[0] = L"settc";
			rv = terminal_settc(el, i, argv);
			break;

		case EL_ECHOTC:
			argv[0] = L"echotc";
			rv = terminal_echotc(el, i, argv);
			break;

		case EL_SETTY:
			argv[0] = L"setty";
			rv = tty_stty(el, i, argv);
			break;

		default:
			rv = -1;
			EL_ABORT((el->el_errfile, "Bad op %d\n", op));
			break;
		}
		break;
	}

	case EL_ADDFN:
	{
		wchar_t *name = va_arg(ap, wchar_t *);
		wchar_t *help = va_arg(ap, wchar_t *);
		el_func_t func = va_arg(ap, el_func_t);

		rv = map_addfunc(el, name, help, func);
		break;
	}

	case EL_HIST:
	{
		hist_fun_t func = va_arg(ap, hist_fun_t);
		void *ptr = va_arg(ap, void *);

		rv = hist_set(el, func, ptr);
		if (!(el->el_flags & CHARSET_IS_UTF8))
			el->el_flags &= ~NARROW_HISTORY;
		break;
	}

	case EL_EDITMODE:
		if (va_arg(ap, int))
			el->el_flags &= ~EDIT_DISABLED;
		else
			el->el_flags |= EDIT_DISABLED;
		rv = 0;
		break;

	case EL_GETCFN:
	{
		el_rfunc_t rc = va_arg(ap, el_rfunc_t);
		rv = el_read_setfn(el->el_read, rc);
		break;
	}

	case EL_CLIENTDATA:
		el->el_data = va_arg(ap, void *);
		break;

	case EL_UNBUFFERED:
		rv = va_arg(ap, int);
		if (rv && !(el->el_flags & UNBUFFERED)) {
			el->el_flags |= UNBUFFERED;
			read_prepare(el);
		} else if (!rv && (el->el_flags & UNBUFFERED)) {
			el->el_flags &= ~UNBUFFERED;
			read_finish(el);
		}
		rv = 0;
		break;

	case EL_PREP_TERM:
		rv = va_arg(ap, int);
		if (rv)
			(void) tty_rawmode(el);
		else
			(void) tty_cookedmode(el);
		rv = 0;
		break;

	case EL_SETFP:
	{
		FILE *fp;
		int what;

		what = va_arg(ap, int);
		fp = va_arg(ap, FILE *);

		rv = 0;
		switch (what) {
		case 0:
			el->el_infile = fp;
			el->el_infd = fileno(fp);
			break;
		case 1:
			el->el_outfile = fp;
			el->el_outfd = fileno(fp);
			break;
		case 2:
			el->el_errfile = fp;
			el->el_errfd = fileno(fp);
			break;
		default:
			rv = -1;
			break;
		}
		break;
	}

	case EL_REFRESH:
		re_clear_display(el);
		re_refresh(el);
		terminal__flush(el);
		break;

	default:
		rv = -1;
		break;
	}

	va_end(ap);
	return rv;
}


/* el_get():
 *	retrieve the editline parameters
 */
int
el_wget(EditLine *el, int op, ...)
{
	va_list ap;
	int rv;

	if (el == NULL)
		return -1;

	va_start(ap, op);

	switch (op) {
	case EL_PROMPT:
	case EL_RPROMPT: {
		el_pfunc_t *p = va_arg(ap, el_pfunc_t *);
		rv = prompt_get(el, p, 0, op);
		break;
	}
	case EL_PROMPT_ESC:
	case EL_RPROMPT_ESC: {
		el_pfunc_t *p = va_arg(ap, el_pfunc_t *);
		wchar_t *c = va_arg(ap, wchar_t *);

		rv = prompt_get(el, p, c, op);
		break;
	}

	case EL_EDITOR:
		rv = map_get_editor(el, va_arg(ap, const wchar_t **));
		break;

	case EL_SIGNAL:
		*va_arg(ap, int *) = (el->el_flags & HANDLE_SIGNALS);
		rv = 0;
		break;

	case EL_EDITMODE:
		*va_arg(ap, int *) = !(el->el_flags & EDIT_DISABLED);
		rv = 0;
		break;

	case EL_TERMINAL:
		terminal_get(el, va_arg(ap, const char **));
		rv = 0;
		break;

	case EL_GETTC:
	{
		static char name[] = "gettc";
		char *argv[20];
		int i;

		for (i = 1; i < (int)(sizeof(argv) / sizeof(argv[0])); i++)
			if ((argv[i] = va_arg(ap, char *)) == NULL)
				break;

		switch (op) {
		case EL_GETTC:
			argv[0] = name;
			rv = terminal_gettc(el, i, argv);
			break;

		default:
			rv = -1;
			EL_ABORT((el->el_errfile, "Bad op %d\n", op));
			break;
		}
		break;
	}

	case EL_GETCFN:
		*va_arg(ap, el_rfunc_t *) = el_read_getfn(el->el_read);
		rv = 0;
		break;

	case EL_CLIENTDATA:
		*va_arg(ap, void **) = el->el_data;
		rv = 0;
		break;

	case EL_UNBUFFERED:
		*va_arg(ap, int *) = (!(el->el_flags & UNBUFFERED));
		rv = 0;
		break;

	case EL_GETFP:
	{
		int what;
		FILE **fpp;

		what = va_arg(ap, int);
		fpp = va_arg(ap, FILE **);
		rv = 0;
		switch (what) {
		case 0:
			*fpp = el->el_infile;
			break;
		case 1:
			*fpp = el->el_outfile;
			break;
		case 2:
			*fpp = el->el_errfile;
			break;
		default:
			rv = -1;
			break;
		}
		break;
	}
	default:
		rv = -1;
		break;
	}
	va_end(ap);

	return rv;
}


/* el_line():
 *	Return editing info
 */
const LineInfoW *
el_wline(EditLine *el)
{

	return (const LineInfoW *)(void *)&el->el_line;
}


/* el_source():
 *	Source a file
 */
int
el_source(EditLine *el, const char *fname)
{
	FILE *fp;
	size_t len;
	ssize_t slen;
	char *ptr;
#ifdef HAVE_ISSETUGID
	char path[PATH_MAX];
#endif
	const wchar_t *dptr;

	fp = NULL;
	if (fname == NULL) {
#ifdef HAVE_ISSETUGID
		static const char elpath[] = "/.editrc";

		if (issetugid())
			return -1;
		if ((ptr = getenv("HOME")) == NULL)
			return -1;
		if (strlcpy(path, ptr, sizeof(path)) >= sizeof(path))
			return -1;
		if (strlcat(path, elpath, sizeof(path)) >= sizeof(path))
			return -1;
		fname = path;
#else
		/*
		 * If issetugid() is missing, always return an error, in order
		 * to keep from inadvertently opening up the user to a security
		 * hole.
		 */
		return -1;
#endif
	}
	if (fp == NULL)
		fp = fopen(fname, "r");
	if (fp == NULL)
		return -1;

	ptr = NULL;
	len = 0;
	while ((slen = getline(&ptr, &len, fp)) != -1) {
		if (*ptr == '\n')
			continue;	/* Empty line. */
		if (slen > 0 && ptr[--slen] == '\n')
			ptr[slen] = '\0';

		dptr = ct_decode_string(ptr, &el->el_scratch);
		if (!dptr)
			continue;
		/* loop until first non-space char or EOL */
		while (*dptr != '\0' && iswspace(*dptr))
			dptr++;
		if (*dptr == '#')
			continue;   /* ignore, this is a comment line */
		if (parse_line(el, dptr) == -1) {
			free(ptr);
			(void) fclose(fp);
			return -1;
		}
	}
	free(ptr);
	(void) fclose(fp);
	return 0;
}


/* el_resize():
 *	Called from program when terminal is resized
 */
void
el_resize(EditLine *el)
{
	int lins, cols;
	sigset_t oset, nset;

	(void) sigemptyset(&nset);
	(void) sigaddset(&nset, SIGWINCH);
	(void) sigprocmask(SIG_BLOCK, &nset, &oset);

	/* get the correct window size */
	if (terminal_get_size(el, &lins, &cols))
		terminal_change_size(el, lins, cols);

	(void) sigprocmask(SIG_SETMASK, &oset, NULL);
}


/* el_beep():
 *	Called from the program to beep
 */
void
el_beep(EditLine *el)
{

	terminal_beep(el);
}


/* el_editmode()
 *	Set the state of EDIT_DISABLED from the `edit' command.
 */
protected int
/*ARGSUSED*/
el_editmode(EditLine *el, int argc, const wchar_t **argv)
{
	const wchar_t *how;

	if (argv == NULL || argc != 2 || argv[1] == NULL)
		return -1;

	how = argv[1];
	if (wcscmp(how, L"on") == 0) {
		el->el_flags &= ~EDIT_DISABLED;
		tty_rawmode(el);
	} else if (wcscmp(how, L"off") == 0) {
		tty_cookedmode(el);
		el->el_flags |= EDIT_DISABLED;
	}
	else {
		(void) fprintf(el->el_errfile, "edit: Bad value `%ls'.\n",
		    how);
		return -1;
	}
	return 0;
}
@


1.35
log
@Move the declaration of the function pointer type el_rfunc_t
from the private header "read.h" to the public header <histedit.h>.
That's not an interface change, it was already used and documented
publicly, merely not properly declared.

Improve encapsulation: Make el_read a pointer to an opaque struct
in struct editline, such that "read.h" no longer needs to be included
from "el.h" but only from the two files using it, read.c and el.c.
Only pass the required el_read_t to el_read_{s,g}etfn(),
do not pass the full struct editline.

OK czarkoff@@,
also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.34 2016/04/11 21:17:29 schwarze Exp $	*/
d129 1
d152 1
a152 1
	ch_reset(el, 0);		/* XXX: Do we want that? */
@


1.34
log
@delete the "private" and "public" preprocessor macros, just use standard C;
OK martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.33 2016/04/11 20:43:33 schwarze Exp $	*/
d52 1
d104 4
a107 2
	(void) read_init(el);

d287 1
a287 1
		rv = el_read_setfn(el, rc);
d435 1
a435 1
		*va_arg(ap, el_rfunc_t *) = el_read_getfn(el);
@


1.33
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.32 2016/04/11 19:54:54 schwarze Exp $	*/
d56 1
a56 1
public EditLine *
d112 1
a112 1
public void
d143 1
a143 1
public void
d155 1
a155 1
public int
d361 1
a361 1
public int
d483 1
a483 1
public const LineInfoW *
d494 1
a494 1
public int
d565 1
a565 1
public void
d586 1
a586 1
public void
@


1.32
log
@Move wrapper macros to the two files actually needing them:
FUNW, Strlen, Strdup, Strcmp, Strncmp, Strncpy, Strncat -> history.c
Strchr, tok_strdup -> tokenizer.c
FUN, TYPE, STR -> both of these files

OK martijn@@

Also proofread by Christian Heckendorf <mbie at ulmus dot me>
who reported some whitespace issues in parse.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.31 2016/04/09 20:15:26 schwarze Exp $	*/
d195 1
a195 1
		rv = map_set_editor(el, va_arg(ap, Char *));
d211 1
a211 1
		const Char *argv[20];
d215 1
a215 1
			if ((argv[i] = va_arg(ap, Char *)) == NULL)
d254 2
a255 2
		Char *name = va_arg(ap, Char *);
		Char *help = va_arg(ap, Char *);
d382 1
a382 1
		Char *c = va_arg(ap, Char *);
d389 1
a389 1
		rv = map_get_editor(el, va_arg(ap, const Char **));
d504 1
a504 1
	const Char *dptr;
d599 1
a599 1
el_editmode(EditLine *el, int argc, const Char **argv)
d601 1
a601 1
	const Char *how;
@


1.31
log
@Delete 26 wrapper macros and two wrapper functions that are no
longer needed now that we always compile with wide character support,
reducing code obfuscation.

OK czarkoff@@ martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.30 2016/04/09 19:31:55 schwarze Exp $	*/
d74 1
a74 1
	el->el_prog = Strdup(ct_decode_string(prog, &el->el_scratch));
d156 1
a156 1
FUN(el,set)(EditLine *el, int op, ...)
d220 1
a220 1
			argv[0] = STR("bind");
d225 1
a225 1
			argv[0] = STR("telltc");
d230 1
a230 1
			argv[0] = STR("settc");
d235 1
a235 1
			argv[0] = STR("echotc");
d240 1
a240 1
			argv[0] = STR("setty");
d362 1
a362 1
FUN(el,get)(EditLine *el, int op, ...)
d483 2
a484 2
public const TYPE(LineInfo) *
FUN(el,line)(EditLine *el)
d487 1
a487 1
	return (const TYPE(LineInfo) *)(void *)&el->el_line;
d607 1
a607 1
	if (Strcmp(how, STR("on")) == 0) {
d610 1
a610 1
	} else if (Strcmp(how, STR("off")) == 0) {
@


1.30
log
@Always compile with WIDECHAR on and delete that preprocessor switch.
OK martijn@@.
Diff also proofread by Christian Heckendorf <mbie at ulmus dot me>.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.29 2016/03/21 17:28:10 schwarze Exp $	*/
d546 1
a546 1
		while (*dptr != '\0' && Isspace(*dptr))
d615 1
a615 1
		(void) fprintf(el->el_errfile, "edit: Bad value `" FSTR "'.\n",
@


1.29
log
@Make the read_char() function always take a wchar_t * argument.

On first sight, it might look as if this required a bump because
it seems to change the public type el_rfunc_t.  But we only compile
with WIDECHAR, and in that case, there is no change in the interface.

This also simplifies some logic by getting rid of the NARROW_READ flag
which was broken anyway.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.28 2016/03/20 23:48:27 schwarze Exp $	*/
d43 1
d45 1
a48 4
#ifdef WIDECHAR
#include <locale.h>
#include <langinfo.h>
#endif
a131 1
#ifdef WIDECHAR
a135 1
#endif
@


1.28
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.27 2016/03/20 22:57:59 schwarze Exp $	*/
a288 1
		el->el_flags &= ~NARROW_READ;
@


1.27
log
@Cleanup of private header inclusion:

1. Do not include private headers from "chared.h", "hist.h", "prompt.h",
"refresh.h", "search.h", "sig.h", "terminal.h", "tty.h".
The only private header having to include other private headers is "el.h".
2. Do not include "common.h", "parse.h", "help.h" from "el.h",
and do not include "emacs.h" and "vi.h" from "chared.h",
include them directly where needed.
3. Do include "fcns.h" from "el.h" because el_func_t is needed for "map.h".
4. Do not include private headers again that are already included by "el.h".
5. Include private headers after standard headers.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.26 2016/03/20 22:09:24 schwarze Exp $	*/
a41 3
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
d44 3
d418 1
a418 1
 		for (i = 1; i < (int)(sizeof(argv) / sizeof(argv[0])); i++)
@


1.26
log
@Use getline(3) rather than fgetln(3) because it is standardized
and simpler and safer to use.  Implemented by Christos Zoulas
following my suggestion, with a bug fix by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.25 2016/02/02 00:43:12 schwarze Exp $	*/
d53 1
@


1.25
log
@Get rid of an ugly #ifdef in the middle of el_init() by
hiding the system dependencies away in "sys.h" where they belong.
No binary change on OpenBSD.
Seems reasonable to christos at NetBSD, too.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.24 2016/01/30 17:32:52 schwarze Exp $	*/
d503 2
a504 1
	char *ptr, *lptr = NULL;
d538 7
a544 12
	while ((ptr = fgetln(fp, &len)) != NULL) {
		if (ptr[len - 1] == '\n')
			ptr[len - 1] = '\0';
		else {
			if ((lptr = (char *)malloc(len + 1)) == NULL) {
				(void) fclose(fp);
				return -1;
			}
			memcpy(lptr, ptr, len);
			lptr[len] = '\0';
			ptr = lptr;
		}
a548 1

d555 1
a555 1
			free(lptr);
d560 1
a560 1
	free(lptr);
@


1.24
log
@Fifth step in synching with NetBSD:
Delete the silly ptr_t and ioctl_t typedefs
and delete some "#ifdef notdef" code from "sys.h".
No functional change.
This makes hist.h identical to the NetBSD version.
It reduces the remaining diff from +1526 -734 to +1430 -592.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.23 2016/01/30 12:22:20 schwarze Exp $	*/
d46 2
a48 1
#include <limits.h>
d50 2
a84 1
#ifdef WIDECHAR
a88 1
#endif
@


1.23
log
@Fourth step in synching with NetBSD:
KNF: Remove parentheses from return lines.  No object change.
This makes emacs.c and prompt.c identical to the NetBSD versions.
It reduces the remaining diff from +2053 -1261 to +1526 -734.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.22 2016/01/30 00:06:39 schwarze Exp $	*/
d131 1
a131 1
	free((ptr_t) el->el_prog);
d133 4
a136 4
	free((ptr_t) el->el_scratch.cbuff);
	free((ptr_t) el->el_scratch.wbuff);
	free((ptr_t) el->el_lgcyconv.cbuff);
	free((ptr_t) el->el_lgcyconv.wbuff);
d138 1
a138 1
	free((ptr_t) el);
d267 1
a267 1
		ptr_t ptr = va_arg(ap, ptr_t);
@


1.22
log
@Third step in synching with NetBSD:
* rename fkey_t to funckey_t and el_term_t to el_terminal_t
* rename struct editline member el_term to el_terminal
* rename many functions in terminal.c from term_*() to terminal_*(),
for consistency with the file name and to not look related to <term.h>
No functional change.
This makes refresh.c and sig.c almost identical to the NetBSD versions.
It reduces the remaining diff from +2446 -1805 to +2053 -1420.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.21 2016/01/29 19:32:33 schwarze Exp $	*/
d60 1
a60 1
		return (NULL);
d105 1
a105 1
	return (el);
d164 1
a164 1
		return (-1);
d357 1
a357 1
	return (rv);
d479 1
a479 1
	return (rv);
d490 1
a490 1
	return (const TYPE(LineInfo) *) (void *) &el->el_line;
d514 1
a514 1
			return (-1);
d516 1
a516 1
			return (-1);
d518 1
a518 1
			return (-1);
d520 1
a520 1
			return (-1);
d528 1
a528 1
		return (-1);
d534 1
a534 1
		return (-1);
d542 1
a542 1
				return (-1);
d561 1
a561 1
			return (-1);
d566 1
a566 1
	return (0);
d612 1
a612 1
		return (-1);
d625 1
a625 1
		return (-1);
d627 1
a627 1
	return (0);
@


1.21
log
@Second step in synching with NetBSD:
* Rename some types from *key*_t to *keymacro*_t.
* Rename struct editline member el_key to el_keymacro.
* Rename some functions in keymacro.c from key*() to keymacro*().
This removes the conflict of key_clear(), key_end(), and key_print()
with macros in <term.h>.  No functional change.
This makes keymacro.h identical to the NetBSD version.
It reduces the remaining diff from +2640 -1998 to +2446 -1805.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.20 2015/01/16 16:48:51 deraadt Exp $	*/
d89 1
a89 1
	if (term_init(el) == -1) {
d121 1
a121 1
	term_end(el);
d193 1
a193 1
		rv = term_set(el, va_arg(ap, char *));
d228 1
a228 1
			rv = term_telltc(el, i, argv);
d233 1
a233 1
			rv = term_settc(el, i, argv);
d238 1
a238 1
			rv = term_echotc(el, i, argv);
d348 1
a348 1
		term__flush(el);
d406 1
a406 1
		term_get(el, va_arg(ap, const char **));
d423 1
a423 1
			rv = term_gettc(el, i, argv);
d584 2
a585 2
	if (term_get_size(el, &lins, &cols))
		term_change_size(el, lins, cols);
d598 1
a598 1
	term_beep(el);
@


1.20
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.19 2014/10/17 06:07:50 deraadt Exp $	*/
d94 1
a94 1
	(void) key_init(el);
d122 1
a122 1
	key_end(el);
@


1.19
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.18 2011/07/13 11:05:17 otto Exp $	*/
a41 1
#include <sys/param.h>
d47 1
d504 1
a504 1
	char path[MAXPATHLEN];
@


1.18
log
@Reintroduce lost local diff; detective work by matthew@@; ok okan@@ oga@@
all hail the more strict malloc S flag!
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.17 2011/07/07 05:40:42 okan Exp $	*/
d57 1
a57 1
	EditLine *el = (EditLine *) el_malloc(sizeof(EditLine));
d74 1
a74 1
		el_free(el);
d90 2
a91 2
		el_free(el->el_prog);
		el_free(el);
d131 1
a131 1
	el_free((ptr_t) el->el_prog);
d133 4
a136 4
	el_free((ptr_t) el->el_scratch.cbuff);
	el_free((ptr_t) el->el_scratch.wbuff);
	el_free((ptr_t) el->el_lgcyconv.cbuff);
	el_free((ptr_t) el->el_lgcyconv.wbuff);
d138 1
a138 1
	el_free((ptr_t) el);
@


1.17
log
@sync with upstream, retaining local modifications.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.16 2010/06/30 00:05:35 nicm Exp $	*/
d502 1
a502 1
	char *ptr;
d537 12
a551 2
		if (len > 0 && dptr[len - 1] == '\n')
			--len;
d559 1
d564 1
a564 1

@


1.16
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: el.c,v 1.59 2010/04/15 00:56:40 christos Exp $	*/
d69 2
a131 1
	el_free((ptr_t) el);
d138 1
d176 7
d332 1
d336 1
d502 1
a502 1
	char *ptr, *lptr = NULL;
a536 12
		if (ptr[len - 1] == '\n')
			ptr[len - 1] = '\0';
		else {
			if ((lptr = (char *)malloc(len + 1)) == NULL) {
				(void) fclose(fp);
				return (-1);
			}
			memcpy(lptr, ptr, len);
			lptr[len] = '\0';
			ptr = lptr;
		}

d540 2
a548 1
			free(lptr);
a553 1
	free(lptr);
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 2
a2 2
/*	$OpenBSD: el.c,v 1.14 2004/08/23 18:31:25 otto Exp $	*/
/*	$NetBSD: el.c,v 1.36 2003/10/18 23:48:42 christos Exp $	*/
d46 3
a56 1

d64 1
a64 1
	el->el_infd = fileno(fin);
d67 5
a71 1
	if ((el->el_prog = el_strdup(prog)) == NULL) {
d80 6
d131 6
d148 1
a148 1
	ch_reset(el);		/* XXX: Do we want that? */
d156 1
a156 1
el_set(EditLine *el, int op, ...)
d158 1
a158 1
	va_list va;
d163 1
a163 1
	va_start(va, op);
d167 13
a179 2
	case EL_RPROMPT:
		rv = prompt_set(el, va_arg(va, el_pfunc_t), op);
d181 1
d184 1
a184 1
		rv = term_set(el, va_arg(va, char *));
d188 1
a188 1
		rv = map_set_editor(el, va_arg(va, char *));
d192 1
a192 1
		if (va_arg(va, int))
d204 1
a204 1
		const char *argv[20];
d208 1
a208 1
			if ((argv[i] = va_arg(va, char *)) == NULL)
d213 1
a213 1
			argv[0] = "bind";
d218 1
a218 1
			argv[0] = "telltc";
d223 1
a223 1
			argv[0] = "settc";
d228 1
a228 1
			argv[0] = "echotc";
d233 1
a233 1
			argv[0] = "setty";
d247 3
a249 3
		char *name = va_arg(va, char *);
		char *help = va_arg(va, char *);
		el_func_t func = va_arg(va, el_func_t);
d257 2
a258 2
		hist_fun_t func = va_arg(va, hist_fun_t);
		ptr_t ptr = va_arg(va, char *);
d261 2
d267 1
a267 1
		if (va_arg(va, int))
d276 1
a276 1
		el_rfunc_t rc = va_arg(va, el_rfunc_t);
d278 1
d283 1
a283 1
		el->el_data = va_arg(va, void *);
d287 1
a287 1
		rv = va_arg(va, int);
d299 1
a299 1
		rv = va_arg(va, int);
d301 1
a301 1
			read_prepare(el);
d303 1
a303 1
			read_finish(el);
d307 33
d345 1
a345 1
	va_end(va);
d354 1
a354 1
el_get(EditLine *el, int op, void *ret)
d356 1
d359 5
a363 2
	if (el == NULL || ret == NULL)
		return (-1);
d366 3
a368 2
	case EL_RPROMPT:
		rv = prompt_get(el, (void *) &ret, op);
d370 9
d381 1
a381 1
		rv = map_get_editor(el, (void *) &ret);
d385 1
a385 1
		*((int *) ret) = (el->el_flags & HANDLE_SIGNALS);
d390 1
a390 1
		*((int *) ret) = (!(el->el_flags & EDIT_DISABLED));
d395 1
a395 1
		term_get(el, (const char **)ret);
d399 1
a399 6
#if 0				/* XXX */
	case EL_BIND:
	case EL_TELLTC:
	case EL_SETTC:
	case EL_ECHOTC:
	case EL_SETTY:
d401 2
a402 1
		const char *argv[20];
d405 2
a406 2
 		for (i = 1; i < sizeof(argv) / sizeof(argv[0]); i++)
			if ((argv[i] = va_arg(va, char *)) == NULL)
d410 3
a412 23
		case EL_BIND:
			argv[0] = "bind";
			rv = map_bind(el, i, argv);
			break;

		case EL_TELLTC:
			argv[0] = "telltc";
			rv = term_telltc(el, i, argv);
			break;

		case EL_SETTC:
			argv[0] = "settc";
			rv = term_settc(el, i, argv);
			break;

		case EL_ECHOTC:
			argv[0] = "echotc";
			rv = term_echotc(el, i, argv);
			break;

		case EL_SETTY:
			argv[0] = "setty";
			rv = tty_stty(el, i, argv);
d417 1
a417 1
			EL_ABORT((el->errfile, "Bad op %d\n", op));
a422 19
	case EL_ADDFN:
	{
		char *name = va_arg(va, char *);
		char *help = va_arg(va, char *);
		el_func_t func = va_arg(va, el_func_t);

		rv = map_addfunc(el, name, help, func);
		break;
	}

	case EL_HIST:
		{
			hist_fun_t func = va_arg(va, hist_fun_t);
			ptr_t ptr = va_arg(va, char *);
			rv = hist_set(el, func, ptr);
		}
		break;
#endif /* XXX */

d424 1
a424 1
		*((el_rfunc_t *)ret) = el_read_getfn(el);
d429 1
a429 1
		*((void **)ret) = el->el_data;
d434 1
a434 1
		*((int *) ret) = (!(el->el_flags & UNBUFFERED));
d438 24
d464 1
d466 1
d475 2
a476 2
public const LineInfo *
el_line(EditLine *el)
d479 1
a479 1
	return (const LineInfo *) (void *) &el->el_line;
d492 4
a500 1
		char path[MAXPATHLEN];
d537 11
a547 1
		if (parse_line(el, ptr) == -1) {
d553 1
d597 1
a597 1
el_editmode(EditLine *el, int argc, const char **argv)
d599 1
a599 1
	const char *how;
d605 1
a605 1
	if (strcmp(how, "on") == 0)
d607 3
a609 1
	else if (strcmp(how, "off") == 0)
d611 1
d613 2
a614 1
		(void) fprintf(el->el_errfile, "edit: Bad value `%s'.\n", how);
@


1.14
log
@Fix fgetln handling and always increment the size if we need to realloc,
Based on a diff by kjell@@; latter hunk from a diff by Sergey S.  Kostyliov.
ok kjell@@ canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.13 2003/11/25 20:12:38 otto Exp $	*/
a36 7
#if !defined(lint) && !defined(SCCSID)
#if 0
static char sccsid[] = "@@(#)el.c	8.2 (Berkeley) 1/3/94";
#else
static const char rcsid[] = "$OpenBSD: el.c,v 1.13 2003/11/25 20:12:38 otto Exp $";
#endif
#endif /* not lint && not SCCSID */
@


1.13
log
@Sync libedit to NetBSD libedit as of Nov 8, 2003.
Tested by jmc@@ djm@@ and myself
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.12 2003/10/31 08:42:24 otto Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: el.c,v 1.12 2003/10/31 08:42:24 otto Exp $";
d435 1
a435 1
	char *ptr;
d467 11
a477 3
		if (len > 0 && ptr[len - 1] == '\n')
			--len;
		ptr[len] = '\0';
d479 1
d484 1
a484 1

@


1.12
log
@Update to NetBSD libedit (from Oct 1, 2003), adding some string
cleaning and history bug fixes. The code includes GNU libreadline
functionality, but the corresponding header files are not installed,
since some libreadline functions are missing. There are some minor API
changes, notably:

old: EditLine *el_init(const char *, FILE *, FILE *);
new: EditLine *el_init(const char *, FILE *, FILE *, FILE *);

old: HistEvent *history(History *h, int op, ...);
new: int history(History *h, HistEvent *ev, int op, ...); plus some
changes in operation names. See editline(3) for details.

Tested by djm@@, mouring@@, jmc@@.

ok deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: el.c,v 1.34 2003/09/26 17:44:51 christos Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD$";
d72 4
a75 1
	el->el_prog = strdup(prog);
d83 1
a83 1
		free(el->el_prog);
d269 9
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: el.c,v 1.10 2003/05/01 21:11:21 avsm Exp $	*/
/*	$NetBSD: el.c,v 1.6 1997/04/24 18:54:16 christos Exp $	*/
d36 1
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: el.c,v 1.10 2003/05/01 21:11:21 avsm Exp $";
a47 2
#include "sys.h"

a52 1
#include <unistd.h>
d59 1
a59 3
el_init(prog, fin, fout)
    const char *prog;
    FILE *fin, *fout;
a60 4
    EditLine *el = (EditLine *) el_malloc(sizeof(EditLine));
#ifdef DEBUG
    char *tty;
#endif
d62 4
a65 2
    if (el == NULL)
	return NULL;
d67 1
a67 1
    memset(el, 0, sizeof(EditLine));
d69 13
a81 11
    el->el_infd  = fileno(fin);
    el->el_outfile = fout;
    el->el_prog = strdup(prog);

#ifdef DEBUG
    if (issetugid() == 0 && (tty = getenv("DEBUGTTY")) != NULL) {
	el->el_errfile = fopen(tty, "w");
	if (el->el_errfile == NULL) {
		extern errno;
		(void)fprintf(stderr, "Cannot open %s (%s).\n",
			       tty, strerror(errno));
d84 10
a93 4
    }
    else 
#endif
	el->el_errfile = stderr;
d95 2
a96 16
    /*
     * Initialize all the modules. Order is important!!!
     */
    (void)term_init(el);
    (void)tty_init(el);
    (void)key_init(el);
    (void)map_init(el);
    (void)ch_init(el);
    (void)search_init(el);
    (void)hist_init(el);
    (void)prompt_init(el);
    (void)sig_init(el);
    el->el_flags = 0;

    return el;
} /* end el_init */
d103 1
a103 2
el_end(el)
    EditLine *el;
a104 2
    if (el == NULL)
	return;
d106 2
a107 1
    el_reset(el);
d109 15
a123 13
    term_end(el);
    tty_end(el);
    key_end(el);
    map_end(el);
    ch_end(el);
    search_end(el);
    hist_end(el);
    prompt_end(el);
    sig_end(el);

    el_free((ptr_t) el->el_prog);
    el_free((ptr_t) el);
} /* end el_end */ 
d130 1
a130 2
el_reset(el)
    EditLine *el;
d132 3
a134 2
    tty_cookedmode(el);
    ch_reset(el);	/* XXX: Do we want that? */
d144 76
a219 31
    va_list va;
    int rv;
    
    va_start(va, op);

    switch (op) {
    case EL_PROMPT:
	rv = prompt_set(el, va_arg(va, el_pfunc_t));
	break;

    case EL_TERMINAL:
	rv = term_set(el, va_arg(va, char *));
	break;

    case EL_EDITOR:
	rv = map_set_editor(el, va_arg(va, char *));
	break;

    case EL_SIGNAL:
	if (va_arg(va, int))
	    el->el_flags |= HANDLE_SIGNALS;
	else
	    el->el_flags &= ~HANDLE_SIGNALS;
	rv = 0;
	break;

    case EL_BIND:
    case EL_TELLTC:
    case EL_SETTC:
    case EL_ECHOTC:
    case EL_SETTY:
d221 3
a223 5
	    char *argv[20];
	    int i;
	    for (i = 1; i < 20; i++)
		if ((argv[i] = va_arg(va, char *)) == NULL)
		     break;
d225 1
a225 4
	    switch (op) {
	    case EL_BIND:
		argv[0] = "bind";
		rv = map_bind(el, i, argv);
d227 1
d229 6
a234 3
	    case EL_TELLTC:
		argv[0] = "telltc";
		rv = term_telltc(el, i, argv);
d236 1
d238 6
a243 3
	    case EL_SETTC:
		argv[0] = "settc";
		rv = term_settc(el, i, argv);
d246 4
a249 3
	    case EL_ECHOTC:
		argv[0] = "echotc";
		rv = term_echotc(el, i, argv);
d251 1
d253 2
a254 3
	    case EL_SETTY:
		argv[0] = "setty";
		rv = tty_stty(el, i, argv);
d257 13
a269 1
	    default:
a270 1
		abort();
a271 1
	    }
d273 47
a319 3
	break;
    
    case EL_ADDFN:
d321 39
a359 4
	    char 	*name = va_arg(va, char *);
	    char 	*help = va_arg(va, char *);
	    el_func_t    func = va_arg(va, el_func_t);
	    rv = map_addfunc(el, name, help, func);
a360 1
	break;
d362 1
a362 1
    case EL_HIST:
d364 38
a401 13
	    hist_fun_t func = va_arg(va, hist_fun_t);
	    ptr_t      ptr = va_arg(va, char *);
	    rv = hist_set(el, func, ptr);
	}
	break;

    default:
	rv = -1;
    }

    va_end(va);
    return rv;
} /* end el_set */
d408 1
a408 2
el_line(el)
    EditLine *el;
d410 2
a411 1
    return (const LineInfo *) &el->el_line;
a413 1
static const char elpath[] = "/.editrc";
d419 1
a419 3
el_source(el, fname)
    EditLine *el;
    const char *fname;
d421 41
a461 22
    FILE *fp;
    size_t len;
    char *ptr, path[MAXPATHLEN];

    if (fname == NULL) {
        ptr = getenv("HOME");
        if (issetugid() != 0 || ptr == NULL || *ptr == '\0')
	        return -1;
        (void) snprintf(path, sizeof(path), "%s%s", ptr, elpath);
        fname = path;
    }

    if ((fp = fopen(fname, "r")) == NULL) 
	return -1;

    while ((ptr = fgetln(fp, &len)) != NULL) {
	if (ptr[len - 1] == '\n')
		--len;
	ptr[len] = '\0';
	if (parse_line(el, ptr) == -1) {
	    (void)fclose(fp);
	    return -1;
a462 1
    }
d464 2
a465 2
    (void)fclose(fp);
    return 0;
d473 22
a494 2
el_resize(el)
    EditLine *el;
a495 9
    int lins, cols;
    sigset_t oset, nset;
    (void)sigemptyset(&nset);
    (void)sigaddset(&nset, SIGWINCH);
    (void)sigprocmask(SIG_BLOCK, &nset, &oset);

    /* get the correct window size */
    if (term_get_size(el, &lins, &cols))
	term_change_size(el, lins, cols);
d497 26
a522 1
    (void)sigprocmask(SIG_SETMASK, &oset, NULL);
@


1.10
log
@is -Wall clean by making rcsid const
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.9 2002/02/19 19:39:37 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: el.c,v 1.9 2002/02/19 19:39:37 millert Exp $";
@


1.9
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.8 2001/04/13 20:35:19 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: el.c,v 1.8 2001/04/13 20:35:19 millert Exp $";
@


1.8
log
@Another case where we need to use u_char, not char for array
subscripts to avoid buf[-1] problems.
Also add a missing include of unistd.h.  OK'd by Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.7 2000/06/28 17:45:25 dugsong Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: el.c,v 1.7 2000/06/28 17:45:25 dugsong Exp $";
d57 1
a57 5
#ifdef __STDC__
# include <stdarg.h>
#else
# include <varargs.h>
#endif
a157 1
#ifdef __STDC__
a158 4
#else
el_set(va_alist)
    va_dcl
#endif
d162 1
a162 1
#ifdef __STDC__
a163 3
#else
    EditLine *el;
    int op;
a164 5
    va_start(va);
    el = va_arg(va, EditLine *);
    op = va_arg(va, int);
#endif
    
@


1.7
log
@restrict editrc lookup to home directory, thanks kris@@freebsd.org. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.6 1997/06/29 23:40:48 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: el.c,v 1.6 1997/06/29 23:40:48 millert Exp $";
d62 1
@


1.6
log
@Updates from NetBSD (christos@@netbsd.org)
  * Portability fixes:
	__const         -> const
	BADSIG          -> SIG_ERR
	int flags       -> u_int flags
	#if __STDC__    -> #ifdef __STDC__
  * Don't allow CSWTCH to interfere with CSUSP on __SVR4 systems.
  * Return -1 if the terminal set operation resulted in dumb terminal settings.
  * Handle properly the case where the last line in the sourced file does
    not have a trailing '\n'. From Jeffrey C Honig.
  * editrc -> editline in editline(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.5 1997/03/14 05:12:45 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: el.c,v 1.5 1997/03/14 05:12:45 millert Exp $";
d299 5
a303 8
	fname = &elpath[1];
	if ((fp = fopen(fname, "r")) == NULL) {
	    if (issetugid() != 0 || (ptr = getenv("HOME")) == NULL) 
		return -1;
	    fname = strncpy(path, ptr, sizeof(path) - 1);
	    path[sizeof(path) - 1] = '\0';
	    (void)strncat(path, elpath, sizeof(path) - strlen(path));
	}
@


1.6.12.1
log
@Pull in patch from current:
Errata:
libedit would check for a .editrc file in the current directory. That behaviour
is not nice; this does not turn into a security problem in any real world
situation that we know of, but a patch is available anyways.
Fix (dugsong):
restrict editrc lookup to home directory, thanks kris@@freebsd.org. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: el.c,v 1.7 2000/06/28 17:45:25 dugsong Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: el.c,v 1.7 2000/06/28 17:45:25 dugsong Exp $";
d299 8
a306 5
        ptr = getenv("HOME");
        if (issetugid() != 0 || ptr == NULL || *ptr == '\0')
	        return -1;
        (void) snprintf(path, sizeof(path), "%s%s", ptr, elpath);
        fname = path;
@


1.5
log
@fix el_source() - a block needed braces around it (from NetBSD)
Some strcpy() -> strncpy (from NetBSD)
Some KNF
Add current NetBSD tags
@
text
@d1 2
a2 2
/*	$OpenBSD: el.c,v 1.4 1997/01/16 05:18:31 millert Exp $	*/
/*	$NetBSD: el.c,v 1.3 1997/01/17 01:03:33 lukem Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: el.c,v 1.4 1997/01/16 05:18:31 millert Exp $";
d57 1
a57 1
#if __STDC__
a61 1
#include <unistd.h>
d161 1
a161 1
#if __STDC__
d170 1
a170 1
#if __STDC__
d313 3
a315 1
	ptr[len - 1] = '\0';
@


1.4
log
@Merge in NetBSD libedit changes and new man pages.  Also fix some
strncpy() usage in their code.  NetBSD change log was:
    * add a man page for the editline routines
    * add a man page describing editrc
    * fix bugs in el_parse():
      * didn't execute command when program name matched (test reversed)
      * was checking against empty string instead of program name
      * after checks, command to run also pointed to empty string
    * document ^char and \ escape sequences
    * when parsing ^char control chars, check the correct char when determining
      validity (previously, ^char was a NOP interpreted as the literal string
      because of this bug)
    * Implement CC_REDISPLAY, which (unlike CC_REFRESH) redraws the entire input
    * line (a la ^R). This is useful if the binding outputs information and
    * mucks up the input line. To be used in ``list-choices'' bindings (refer
    * to the ^D binding in csh when filec is set)
@
text
@d1 2
a2 1
/*	$OpenBSD: $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: $";
d92 1
a92 1
		(void) fprintf(stderr, "Cannot open %s (%s).\n",
d104 9
a112 9
    (void) term_init(el);
    (void) tty_init(el);
    (void) key_init(el);
    (void) map_init(el);
    (void) ch_init(el);
    (void) search_init(el);
    (void) hist_init(el);
    (void) prompt_init(el);
    (void) sig_init(el);
d306 1
a306 1
	    (void) strncat(path, elpath, sizeof(path) - strlen(path));
d313 1
a313 1
    while ((ptr = fgetln(fp, &len)) != NULL)
d316 1
a316 1
	    (void) fclose(fp);
d319 1
d321 1
a321 1
    (void) fclose(fp);
d335 3
a337 3
    (void) sigemptyset(&nset);
    (void) sigaddset(&nset, SIGWINCH);
    (void) sigprocmask(SIG_BLOCK, &nset, &oset);
d343 1
a343 1
    (void) sigprocmask(SIG_SETMASK, &oset, NULL);
@


1.3
log
@stncat misuse
@
text
@d1 2
d40 1
d42 3
d61 1
d303 3
a305 3
	    fname = strncpy(path, ptr, MAXPATHLEN);
	    path[MAXPATHLEN-1] = '\0';
	    (void) strncat(path, elpath, MAXPATHLEN - strlen(path));
@


1.2
log
@use issetugid() to protect against bad getenv
@
text
@a296 1
	    (void) strncat(path, elpath, MAXPATHLEN);
d298 1
@


1.1
log
@Initial revision
@
text
@d80 1
a80 1
    if ((tty = getenv("DEBUGTTY")) != NULL) {
d294 1
a294 1
	    if ((ptr = getenv("HOME")) == NULL) 
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
