head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.8
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.6
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.2
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.20
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.18
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.14
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.12
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.10
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.26
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.22
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.20
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.18
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.16
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.14
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.12
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2016.04.11.21.17.29;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	I3AtNAFb4FywnTMT;

1.20
date	2016.04.11.20.54.05;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	VmmFUm6qYbPE8jjH;

1.19
date	2016.04.11.20.43.33;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	OUneMOe0l7HombT5;

1.18
date	2016.04.11.19.54.54;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	xizUpRlYj2C4Hcj6;

1.17
date	2016.03.20.23.48.27;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	tRHhB2RN3ZD1GvoI;

1.16
date	2016.03.20.21.04.15;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	m16bzW987eswAzZM;

1.15
date	2016.01.30.17.32.52;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	wAt9MiELkmlnoi4U;

1.14
date	2016.01.30.12.22.20;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	dCN84ovvbfYwqrqX;

1.13
date	2014.10.17.06.07.50;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	bdUOvGFxUQgqZg7x;

1.12
date	2010.06.30.00.05.35;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.25.20.12.38;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.31.08.42.24;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.11.18.21.40;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.01.21.11.21;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.16.20.24.54;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.14.05.13.07;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.16.05.18.49;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@delete the "private" and "public" preprocessor macros, just use standard C;
OK martijn@@
@
text
@/*	$OpenBSD: tokenizer.c,v 1.20 2016/04/11 20:54:05 schwarze Exp $	*/
/*	$NetBSD: tokenizer.c,v 1.28 2016/04/11 18:56:31 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "config.h"

/* We build this file twice, once as NARROW, once as WIDE. */
/*
 * tokenize.c: Bourne shell like tokenizer
 */
#include <stdlib.h>
#include <string.h>

#include "histedit.h"

typedef enum {
	Q_none, Q_single, Q_double, Q_one, Q_doubleone
} quote_t;

#define	TOK_KEEP	1
#define	TOK_EAT		2

#define	WINCR		20
#define	AINCR		10

#define	IFS		STR("\t \n")

#ifdef NARROWCHAR
#define	Char			char
#define	FUN(prefix, rest)	prefix ## _ ## rest
#define	TYPE(type)		type
#define	STR(x)			x
#define	Strchr(s, c)		strchr(s, c)
#define	tok_strdup(s)		strdup(s)
#else
#define	Char			wchar_t
#define	FUN(prefix, rest)	prefix ## _w ## rest
#define	TYPE(type)		type ## W
#define	STR(x)			L ## x
#define	Strchr(s, c)		wcschr(s, c)
#define	tok_strdup(s)		wcsdup(s)
#endif

struct TYPE(tokenizer) {
	Char	*ifs;		/* In field separator			 */
	int	 argc, amax;	/* Current and maximum number of args	 */
	Char   **argv;		/* Argument list			 */
	Char	*wptr, *wmax;	/* Space and limit on the word buffer	 */
	Char	*wstart;	/* Beginning of next word		 */
	Char	*wspace;	/* Space of word buffer			 */
	quote_t	 quote;		/* Quoting state			 */
	int	 flags;		/* flags;				 */
};


static void FUN(tok,finish)(TYPE(Tokenizer) *);


/* FUN(tok,finish)():
 *	Finish a word in the tokenizer.
 */
static void
FUN(tok,finish)(TYPE(Tokenizer) *tok)
{

	*tok->wptr = '\0';
	if ((tok->flags & TOK_KEEP) || tok->wptr != tok->wstart) {
		tok->argv[tok->argc++] = tok->wstart;
		tok->argv[tok->argc] = NULL;
		tok->wstart = ++tok->wptr;
	}
	tok->flags &= ~TOK_KEEP;
}


/* FUN(tok,init)():
 *	Initialize the tokenizer
 */
TYPE(Tokenizer) *
FUN(tok,init)(const Char *ifs)
{
	TYPE(Tokenizer) *tok = malloc(sizeof(TYPE(Tokenizer)));

	if (tok == NULL)
		return NULL;
	tok->ifs = tok_strdup(ifs ? ifs : IFS);
	if (tok->ifs == NULL) {
		free(tok);
		return NULL;
	}
	tok->argc = 0;
	tok->amax = AINCR;
	tok->argv = reallocarray(NULL, tok->amax, sizeof(*tok->argv));
	if (tok->argv == NULL) {
		free(tok->ifs);
		free(tok);
		return NULL;
	}
	tok->argv[0] = NULL;
	tok->wspace = reallocarray(NULL, WINCR, sizeof(*tok->wspace));
	if (tok->wspace == NULL) {
		free(tok->argv);
		free(tok->ifs);
		free(tok);
		return NULL;
	}
	tok->wmax = tok->wspace + WINCR;
	tok->wstart = tok->wspace;
	tok->wptr = tok->wspace;
	tok->flags = 0;
	tok->quote = Q_none;

	return tok;
}


/* FUN(tok,reset)():
 *	Reset the tokenizer
 */
void
FUN(tok,reset)(TYPE(Tokenizer) *tok)
{

	tok->argc = 0;
	tok->wstart = tok->wspace;
	tok->wptr = tok->wspace;
	tok->flags = 0;
	tok->quote = Q_none;
}


/* FUN(tok,end)():
 *	Clean up
 */
void
FUN(tok,end)(TYPE(Tokenizer) *tok)
{

	free(tok->ifs);
	free(tok->wspace);
	free(tok->argv);
	free(tok);
}



/* FUN(tok,line)():
 *	Bourne shell (sh(1)) like tokenizing
 *	Arguments:
 *		tok	current tokenizer state (setup with FUN(tok,init)())
 *		line	line to parse
 *	Returns:
 *		-1	Internal error
 *		 3	Quoted return
 *		 2	Unmatched double quote
 *		 1	Unmatched single quote
 *		 0	Ok
 *	Modifies (if return value is 0):
 *		argc	number of arguments
 *		argv	argument array
 *		cursorc	if !NULL, argv element containing cursor
 *		cursorv	if !NULL, offset in argv[cursorc] of cursor
 */
int
FUN(tok,line)(TYPE(Tokenizer) *tok, const TYPE(LineInfo) *line,
    int *argc, const Char ***argv, int *cursorc, int *cursoro)
{
	const Char *ptr;
	int cc, co;

	cc = co = -1;
	ptr = line->buffer;
	for (ptr = line->buffer; ;ptr++) {
		if (ptr >= line->lastchar)
			ptr = STR("");
		if (ptr == line->cursor) {
			cc = tok->argc;
			co = (int)(tok->wptr - tok->wstart);
		}
		switch (*ptr) {
		case '\'':
			tok->flags |= TOK_KEEP;
			tok->flags &= ~TOK_EAT;
			switch (tok->quote) {
			case Q_none:
				tok->quote = Q_single;	/* Enter single quote
							 * mode */
				break;

			case Q_single:	/* Exit single quote mode */
				tok->quote = Q_none;
				break;

			case Q_one:	/* Quote this ' */
				tok->quote = Q_none;
				*tok->wptr++ = *ptr;
				break;

			case Q_double:	/* Stay in double quote mode */
				*tok->wptr++ = *ptr;
				break;

			case Q_doubleone:	/* Quote this ' */
				tok->quote = Q_double;
				*tok->wptr++ = *ptr;
				break;

			default:
				return -1;
			}
			break;

		case '"':
			tok->flags &= ~TOK_EAT;
			tok->flags |= TOK_KEEP;
			switch (tok->quote) {
			case Q_none:	/* Enter double quote mode */
				tok->quote = Q_double;
				break;

			case Q_double:	/* Exit double quote mode */
				tok->quote = Q_none;
				break;

			case Q_one:	/* Quote this " */
				tok->quote = Q_none;
				*tok->wptr++ = *ptr;
				break;

			case Q_single:	/* Stay in single quote mode */
				*tok->wptr++ = *ptr;
				break;

			case Q_doubleone:	/* Quote this " */
				tok->quote = Q_double;
				*tok->wptr++ = *ptr;
				break;

			default:
				return -1;
			}
			break;

		case '\\':
			tok->flags |= TOK_KEEP;
			tok->flags &= ~TOK_EAT;
			switch (tok->quote) {
			case Q_none:	/* Quote next character */
				tok->quote = Q_one;
				break;

			case Q_double:	/* Quote next character */
				tok->quote = Q_doubleone;
				break;

			case Q_one:	/* Quote this, restore state */
				*tok->wptr++ = *ptr;
				tok->quote = Q_none;
				break;

			case Q_single:	/* Stay in single quote mode */
				*tok->wptr++ = *ptr;
				break;

			case Q_doubleone:	/* Quote this \ */
				tok->quote = Q_double;
				*tok->wptr++ = *ptr;
				break;

			default:
				return -1;
			}
			break;

		case '\n':
			tok->flags &= ~TOK_EAT;
			switch (tok->quote) {
			case Q_none:
				goto tok_line_outok;

			case Q_single:
			case Q_double:
				*tok->wptr++ = *ptr;	/* Add the return */
				break;

			case Q_doubleone:   /* Back to double, eat the '\n' */
				tok->flags |= TOK_EAT;
				tok->quote = Q_double;
				break;

			case Q_one:	/* No quote, more eat the '\n' */
				tok->flags |= TOK_EAT;
				tok->quote = Q_none;
				break;

			default:
				return 0;
			}
			break;

		case '\0':
			switch (tok->quote) {
			case Q_none:
				/* Finish word and return */
				if (tok->flags & TOK_EAT) {
					tok->flags &= ~TOK_EAT;
					return 3;
				}
				goto tok_line_outok;

			case Q_single:
				return 1;

			case Q_double:
				return 2;

			case Q_doubleone:
				tok->quote = Q_double;
				*tok->wptr++ = *ptr;
				break;

			case Q_one:
				tok->quote = Q_none;
				*tok->wptr++ = *ptr;
				break;

			default:
				return -1;
			}
			break;

		default:
			tok->flags &= ~TOK_EAT;
			switch (tok->quote) {
			case Q_none:
				if (Strchr(tok->ifs, *ptr) != NULL)
					FUN(tok,finish)(tok);
				else
					*tok->wptr++ = *ptr;
				break;

			case Q_single:
			case Q_double:
				*tok->wptr++ = *ptr;
				break;


			case Q_doubleone:
				*tok->wptr++ = '\\';
				tok->quote = Q_double;
				*tok->wptr++ = *ptr;
				break;

			case Q_one:
				tok->quote = Q_none;
				*tok->wptr++ = *ptr;
				break;

			default:
				return -1;

			}
			break;
		}

		if (tok->wptr >= tok->wmax - 4) {
			size_t size = tok->wmax - tok->wspace + WINCR;
			Char *s = reallocarray(tok->wspace, size, sizeof(*s));
			if (s == NULL)
				return -1;

			if (s != tok->wspace) {
				int i;
				for (i = 0; i < tok->argc; i++) {
				    tok->argv[i] =
					(tok->argv[i] - tok->wspace) + s;
				}
				tok->wptr = (tok->wptr - tok->wspace) + s;
				tok->wstart = (tok->wstart - tok->wspace) + s;
				tok->wspace = s;
			}
			tok->wmax = s + size;
		}
		if (tok->argc >= tok->amax - 4) {
			Char **p;
			tok->amax += AINCR;
			p = reallocarray(tok->argv, tok->amax, sizeof(*p));
			if (p == NULL) {
				tok->amax -= AINCR;
				return -1;
			}
			tok->argv = p;
		}
	}
 tok_line_outok:
	if (cc == -1 && co == -1) {
		cc = tok->argc;
		co = (int)(tok->wptr - tok->wstart);
	}
	if (cursorc != NULL)
		*cursorc = cc;
	if (cursoro != NULL)
		*cursoro = co;
	FUN(tok,finish)(tok);
	*argv = (const Char **)tok->argv;
	*argc = tok->argc;
	return 0;
}

/* FUN(tok,str)():
 *	Simpler version of tok_line, taking a NUL terminated line
 *	and splitting into words, ignoring cursor state.
 */
int
FUN(tok,str)(TYPE(Tokenizer) *tok, const Char *line, int *argc,
    const Char ***argv)
{
	TYPE(LineInfo) li;

	memset(&li, 0, sizeof(li));
	li.buffer = line;
	li.cursor = li.lastchar = Strchr(line, '\0');
	return FUN(tok,line)(tok, &li, argc, argv, NULL, NULL);
}
@


1.20
log
@Clean up chartype.h:

* not used in tokenizer.c
* only use it for !NARROWCHAR
* no need for underscores before ct_{de,en}code_string()
* make the conversion buffer resize function private

OK martijn@@
@
text
@d1 2
a2 2
/*	$OpenBSD: tokenizer.c,v 1.19 2016/04/11 20:43:33 schwarze Exp $	*/
/*	$NetBSD: tokenizer.c,v 1.27 2016/04/11 16:06:52 christos Exp $	*/
d87 1
a87 1
private void FUN(tok,finish)(TYPE(Tokenizer) *);
d93 1
a93 1
private void
d110 1
a110 1
public TYPE(Tokenizer) *
d151 1
a151 1
public void
d166 1
a166 1
public void
d195 1
a195 1
public int
d445 1
a445 1
public int
@


1.19
log
@get rid of the non-standard data type "Char" in almost all files;
ok martijn@@
@
text
@d1 2
a2 2
/*	$OpenBSD: tokenizer.c,v 1.18 2016/04/11 19:54:54 schwarze Exp $	*/
/*	$NetBSD: tokenizer.c,v 1.26 2016/04/11 00:50:13 christos Exp $	*/
a45 1
#include "chartype.h"
@


1.18
log
@Move wrapper macros to the two files actually needing them:
FUNW, Strlen, Strdup, Strcmp, Strncmp, Strncpy, Strncat -> history.c
Strchr, tok_strdup -> tokenizer.c
FUN, TYPE, STR -> both of these files

OK martijn@@

Also proofread by Christian Heckendorf <mbie at ulmus dot me>
who reported some whitespace issues in parse.c.
@
text
@d1 2
a2 2
/*	$OpenBSD: tokenizer.c,v 1.17 2016/03/20 23:48:27 schwarze Exp $	*/
/*	$NetBSD: tokenizer.c,v 1.23 2016/02/15 15:37:20 christos Exp $	*/
d61 1
d68 1
@


1.17
log
@Cleanup of standard header inclusion:

1. Add the missing <errno.h> to sig.c.
2. Do not include standard headers from private headers "chared.h"
and "el.h", include them directly where needed.
3. Delete a few needless inclusions of <ctype.h>.
4. Sort the standard headers.
5. Delete _GNU_SOURCE weirdness from histedit.h, that file doesn't even
need the access to wcsdup(3) mentioned in the comment.
6. Delete some trailing blanks and blanks before tabs.

OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tokenizer.c,v 1.16 2016/03/20 21:04:15 schwarze Exp $	*/
d60 13
a72 2
#define	tok_strdup(a)		Strdup(a)

@


1.16
log
@Fix the same bug again that was already fixed in:
OpenBSD tokenizer.c rev. 1.8 2003/08/11 18:21:40 deraadt
Don't increase amax on realloc() failure.
The original fix got lost in a merge along the way.
This fix from Christos Zoulas via NetBSD tokenizer.c rev. 1.23 2016/02/15.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tokenizer.c,v 1.15 2016/01/30 17:32:52 schwarze Exp $	*/
d42 1
d44 1
a44 1
#include <stdlib.h>
@


1.15
log
@Fifth step in synching with NetBSD:
Delete the silly ptr_t and ioctl_t typedefs
and delete some "#ifdef notdef" code from "sys.h".
No functional change.
This makes hist.h identical to the NetBSD version.
It reduces the remaining diff from +1526 -734 to +1430 -592.
OK czarkoff@@
@
text
@d1 2
a2 2
/*	$OpenBSD: tokenizer.c,v 1.14 2016/01/30 12:22:20 schwarze Exp $	*/
/*	$NetBSD: tokenizer.c,v 1.18 2010/01/03 18:27:10 christos Exp $	*/
d406 2
a407 1
			if (p == NULL)
d409 1
@


1.14
log
@Fourth step in synching with NetBSD:
KNF: Remove parentheses from return lines.  No object change.
This makes emacs.c and prompt.c identical to the NetBSD versions.
It reduces the remaining diff from +2053 -1261 to +1526 -734.
OK czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tokenizer.c,v 1.13 2014/10/17 06:07:50 deraadt Exp $	*/
d106 1
a106 1
		free((ptr_t)tok);
d113 2
a114 2
		free((ptr_t)tok->ifs);
		free((ptr_t)tok);
d120 3
a122 3
		free((ptr_t)tok->argv);
		free((ptr_t)tok->ifs);
		free((ptr_t)tok);
d157 4
a160 4
	free((ptr_t) tok->ifs);
	free((ptr_t) tok->wspace);
	free((ptr_t) tok->argv);
	free((ptr_t) tok);
@


1.13
log
@Remove non-exposed malloc/realloc/free wrappers, and then substitute
reallocarray() where it helps.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: tokenizer.c,v 1.12 2010/06/30 00:05:35 nicm Exp $	*/
d131 1
a131 1
	return (tok);
d227 1
a227 1
				return (-1);
d258 1
a258 1
				return (-1);
d289 1
a289 1
				return (-1);
d315 1
a315 1
				return (0);
d325 1
a325 1
					return (3);
d330 1
a330 1
				return (1);
d333 1
a333 1
				return (2);
d346 1
a346 1
				return (-1);
d378 1
a378 1
				return (-1);
d388 1
a388 1
				return (-1);
d407 1
a407 1
				return (-1);
d423 1
a423 1
	return (0);
d439 1
a439 1
	return (FUN(tok,line)(tok, &li, argc, argv, NULL, NULL));
@


1.12
log
@Update libedit to bring it into sync with the latest version from NetBSD.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a58 3
#define	tok_malloc(a)		malloc(a)
#define	tok_free(a)		free(a)
#define	tok_realloc(a, b)	realloc(a, b)
d100 1
a100 1
	TYPE(Tokenizer) *tok = tok_malloc(sizeof(TYPE(Tokenizer)));
d106 1
a106 1
		tok_free((ptr_t)tok);
d111 1
a111 1
	tok->argv = tok_malloc(sizeof(*tok->argv) * tok->amax);
d113 2
a114 2
		tok_free((ptr_t)tok->ifs);
		tok_free((ptr_t)tok);
d118 1
a118 1
	tok->wspace = tok_malloc(WINCR * sizeof(*tok->wspace));
d120 3
a122 3
		tok_free((ptr_t)tok->argv);
		tok_free((ptr_t)tok->ifs);
		tok_free((ptr_t)tok);
d157 4
a160 4
	tok_free((ptr_t) tok->ifs);
	tok_free((ptr_t) tok->wspace);
	tok_free((ptr_t) tok->argv);
	tok_free((ptr_t) tok);
d386 1
a386 2
			Char *s = tok_realloc(tok->wspace,
			    size * sizeof(*s));
d405 1
a405 1
			p = tok_realloc(tok->argv, tok->amax * sizeof(*p));
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 2
a2 2
/*	$OpenBSD: tokenizer.c,v 1.10 2003/11/25 20:12:38 otto Exp $	*/
/*	$NetBSD: tokenizer.c,v 1.13 2003/10/18 23:48:42 christos Exp $	*/
d37 2
d44 2
a45 1
#include "tokenizer.h"
a50 2
#define	IFS		"\t \n"

d57 2
a58 1
#define	tok_strdup(a)		strdup(a)
d62 1
d65 2
a66 2
struct tokenizer {
	char	*ifs;		/* In field separator			 */
d68 4
a71 4
	char   **argv;		/* Argument list			 */
	char	*wptr, *wmax;	/* Space and limit on the word buffer	 */
	char	*wstart;	/* Beginning of next word		 */
	char	*wspace;	/* Space of word buffer			 */
d77 1
a77 1
private void tok_finish(Tokenizer *);
d80 1
a80 1
/* tok_finish():
d84 1
a84 1
tok_finish(Tokenizer *tok)
d97 1
a97 1
/* tok_init():
d100 2
a101 2
public Tokenizer *
tok_init(const char *ifs)
d103 1
a103 1
	Tokenizer *tok = (Tokenizer *) tok_malloc(sizeof(Tokenizer));
d114 1
a114 1
	tok->argv = (char **) tok_malloc(sizeof(char *) * tok->amax);
d121 1
a121 1
	tok->wspace = (char *) tok_malloc(WINCR);
d138 1
a138 1
/* tok_reset():
d142 1
a142 1
tok_reset(Tokenizer *tok)
d153 1
a153 1
/* tok_end():
d157 1
a157 1
tok_end(Tokenizer *tok)
d168 16
a183 8
/* tok_line():
 *	Bourne shell like tokenizing
 *	Return:
 *		-1: Internal error
 *		 3: Quoted return
 *		 2: Unmatched double quote
 *		 1: Unmatched single quote
 *		 0: Ok
d186 2
a187 1
tok_line(Tokenizer *tok, const char *line, int *argc, const char ***argv)
d189 2
a190 1
	const char *ptr;
d192 10
a201 2
	for (;;) {
		switch (*(ptr = line++)) {
d300 1
a300 4
				tok_finish(tok);
				*argv = (const char **)tok->argv;
				*argc = tok->argc;
				return (0);
d330 1
a330 4
				tok_finish(tok);
				*argv = (const char **)tok->argv;
				*argc = tok->argc;
				return (0);
d357 2
a358 2
				if (strchr(tok->ifs, *ptr) != NULL)
					tok_finish(tok);
d389 2
a390 1
			char *s = (char *) tok_realloc(tok->wspace, size);
d407 1
a407 1
			char **p;
d409 1
a409 2
			p = (char **) tok_realloc(tok->argv,
			    tok->amax * sizeof(char *));
d415 29
@


1.10
log
@Sync libedit to NetBSD libedit as of Nov 8, 2003.
Tested by jmc@@ djm@@ and myself
@
text
@d1 1
a1 1
/*	$OpenBSD: tokenizer.c,v 1.9 2003/10/31 08:42:24 otto Exp $	*/
a36 8
#if !defined(lint) && !defined(SCCSID)
#if 0
static char sccsid[] = "@@(#)tokenizer.c	8.1 (Berkeley) 6/4/93";
#else
static const char rcsid[] = "$OpenBSD: tokenizer.c,v 1.9 2003/10/31 08:42:24 otto Exp $";
#endif
#endif /* not lint && not SCCSID */

@


1.9
log
@Update to NetBSD libedit (from Oct 1, 2003), adding some string
cleaning and history bug fixes. The code includes GNU libreadline
functionality, but the corresponding header files are not installed,
since some libreadline functions are missing. There are some minor API
changes, notably:

old: EditLine *el_init(const char *, FILE *, FILE *);
new: EditLine *el_init(const char *, FILE *, FILE *, FILE *);

old: HistEvent *history(History *h, int op, ...);
new: int history(History *h, HistEvent *ev, int op, ...); plus some
changes in operation names. See editline(3) for details.

Tested by djm@@, mouring@@, jmc@@.

ok deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: tokenizer.c,v 1.12 2003/08/07 16:44:34 agc Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD$";
d64 1
d112 1
a112 1
	tok->ifs = strdup(ifs ? ifs : IFS);
@


1.8
log
@failure to deal with realloc nicely; spotted by Jonas.Munsin@@teleste.com,
few more changes by millert
@
text
@d1 2
a2 2
/*	$OpenBSD: tokenizer.c,v 1.7 2003/06/02 20:18:40 millert Exp $	*/
/*	$NetBSD: tokenizer.c,v 1.2 1997/01/11 06:48:15 lukem Exp $	*/
d36 1
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: tokenizer.c,v 1.7 2003/06/02 20:18:40 millert Exp $";
a47 1
#include "sys.h"
d52 3
a54 1
typedef enum { Q_none, Q_single, Q_double, Q_one, Q_doubleone } quote_t;
d56 1
a56 1
#define IFS "\t \n"
d58 2
a59 2
#define TOK_KEEP	1
#define TOK_EAT		2
d61 2
a62 2
#define WINCR 20
#define AINCR 10
d64 3
a66 3
#define tok_malloc(a)		malloc(a)
#define tok_free(a)		free(a)
#define tok_realloc(a, b)	realloc(a, b)
d70 8
a77 8
    char   *ifs;		/* In field separator			*/
    int     argc, amax;		/* Current and maximum number of args	*/
    char  **argv;		/* Argument list			*/
    char   *wptr, *wmax;	/* Space and limit on the word buffer	*/
    char   *wstart;		/* Beginning of next word		*/
    char   *wspace;		/* Space of word buffer			*/
    quote_t quote;		/* Quoting state			*/
    int	    flags;		/* flags;				*/
d88 1
a88 2
tok_finish(tok)
    Tokenizer *tok;
d90 8
a97 7
    *tok->wptr = '\0';
    if ((tok->flags & TOK_KEEP) || tok->wptr != tok->wstart) {
	tok->argv[tok->argc++] = tok->wstart;
	tok->argv[tok->argc] = NULL;
	tok->wstart = ++tok->wptr;
    }
    tok->flags &= ~TOK_KEEP;
d105 1
a105 2
tok_init(ifs)
    const char *ifs;
d107 1
a107 1
    Tokenizer* tok = (Tokenizer*) tok_malloc(sizeof(Tokenizer));
d109 28
a136 11
    tok->ifs     = strdup(ifs ? ifs : IFS);
    tok->argc    = 0;
    tok->amax    = AINCR;
    tok->argv    = (char **) tok_malloc(sizeof(char *) * tok->amax);
    tok->argv[0] = NULL;
    tok->wspace  = (char *) tok_malloc(WINCR);
    tok->wmax    = tok->wspace + WINCR;
    tok->wstart  = tok->wspace;
    tok->wptr    = tok->wspace;
    tok->flags   = 0;
    tok->quote   = Q_none;
d138 1
a138 1
    return tok;
d146 1
a146 2
tok_reset(tok)
    Tokenizer *tok;
d148 6
a153 5
    tok->argc  = 0;
    tok->wstart = tok->wspace;
    tok->wptr = tok->wspace;
    tok->flags = 0;
    tok->quote = Q_none;
d161 1
a161 2
tok_end(tok)
    Tokenizer *tok;
d163 5
a167 4
    tok_free((ptr_t) tok->ifs);
    tok_free((ptr_t) tok->wspace);
    tok_free((ptr_t) tok->argv);
    tok_free((ptr_t) tok);
d179 1
a179 1
 *		 0: Ok 
d182 1
a182 5
tok_line(tok, line, argc, argv)
    Tokenizer *tok;
    const char* line;
    int *argc;
    char ***argv;
d184 1
a184 1
    const char *ptr;
d186 185
a370 184
    while (1) {
	switch (*(ptr = line++)) {
	case '\'':
	    tok->flags |= TOK_KEEP;
	    tok->flags &= ~TOK_EAT;
	    switch (tok->quote) {
	    case Q_none:
		tok->quote = Q_single;	/* Enter single quote mode */
		break;

	    case Q_single:		/* Exit single quote mode */
		tok->quote = Q_none;
		break;

	    case Q_one:			/* Quote this ' */
		tok->quote = Q_none;
		*tok->wptr++ = *ptr;
		break;

	    case Q_double:		/* Stay in double quote mode */
		*tok->wptr++ = *ptr;
		break;

	    case Q_doubleone:		/* Quote this ' */
		tok->quote = Q_double;
		*tok->wptr++ = *ptr;
		break;

	    default:
		return(-1);
	    }
	    break;

	case '"':
	    tok->flags &= ~TOK_EAT;
	    tok->flags |= TOK_KEEP;
	    switch (tok->quote) {
	    case Q_none:		/* Enter double quote mode */
		tok->quote = Q_double;
		break;

	    case Q_double:
		tok->quote = Q_none;	/* Exit double quote mode */
		break;

	    case Q_one:			/* Quote this " */
		tok->quote = Q_none;
		*tok->wptr++ = *ptr;
		break;

	    case Q_single:		/* Stay in single quote mode */
		*tok->wptr++ = *ptr;
		break;

	    case Q_doubleone:		/* Quote this " */
		tok->quote = Q_double;
		*tok->wptr++ = *ptr;
		break;

	    default: 
		return(-1);
	    }
	    break;

	case '\\':
	    tok->flags |= TOK_KEEP;
	    tok->flags &= ~TOK_EAT;
	    switch (tok->quote) {
	    case Q_none:		/* Quote next character */
		tok->quote = Q_one;
		break;

	    case Q_double:
		tok->quote = Q_doubleone;/* Quote next character */
		break;

	    case Q_one:	
		*tok->wptr++ = *ptr;
		tok->quote = Q_none;	/* Quote this, restore state */
		break;

	    case Q_single:		/* Stay in single quote mode */
		*tok->wptr++ = *ptr;
		break;

	    case Q_doubleone:		/* Quote this \ */
		tok->quote = Q_double;
		*tok->wptr++ = *ptr;
		break;

	    default:
		return(-1);
	    }
	    break;

	case '\n':
	    tok->flags &= ~TOK_EAT;
	    switch (tok->quote) {
	    case Q_none:
		tok_finish(tok);
		*argv = tok->argv;
		*argc = tok->argc;
		return(0);

	    case Q_single:
	    case Q_double:
		*tok->wptr++ = *ptr;	/* Add the return		*/
		break;
	    
	    case Q_doubleone:
		tok->flags |= TOK_EAT;
		tok->quote = Q_double;	/* Back to double, eat the '\n' */
		break;

	    case Q_one:
		tok->flags |= TOK_EAT;
		tok->quote = Q_none;	/* No quote, more eat the '\n' */
		break;

	    default:
		return(0);
	    }
	    break;

	case '\0':
	    switch (tok->quote) {
	    case Q_none:
		/* Finish word and return */
		if (tok->flags & TOK_EAT) {
		    tok->flags &= ~TOK_EAT;
		    return 3;
		}
		tok_finish(tok);
		*argv = tok->argv;
		*argc = tok->argc;
		return(0);

	    case Q_single:
		return(1);

	    case Q_double:
		return(2);

	    case Q_doubleone:
		tok->quote = Q_double;
		*tok->wptr++ = *ptr;
		break;

	    case Q_one:
		tok->quote = Q_none;
		*tok->wptr++ = *ptr;
		break;

	    default:
		return(-1);
	    }
	    break;

	default:
	    tok->flags &= ~TOK_EAT;
	    switch (tok->quote) {
	    case Q_none:
		if (strchr(tok->ifs, *ptr) != NULL)
		    tok_finish(tok);
		else
		    *tok->wptr++ = *ptr;
		break;

	    case Q_single:
	    case Q_double:
		*tok->wptr++ = *ptr;
		break;


	    case Q_doubleone:
		*tok->wptr++ = '\\';
		tok->quote = Q_double;
		*tok->wptr++ = *ptr;
		break;

	    case Q_one:
		tok->quote = Q_none;
		*tok->wptr++ = *ptr;
		break;
d372 2
a373 2
	    default:
		return(-1);
d375 3
a377 3
	    }
	    break;
	}
d379 27
a405 26
	if (tok->wptr >= tok->wmax - 4) {
	    size_t size = tok->wmax - tok->wspace + WINCR;
	    char *s;
	    int offs;

	    if ((s = tok_realloc(tok->wspace, size)) == NULL)
		return -1;

	    if ((offs = s - tok->wspace) != 0) {
		int i;
		for (i = 0; i < tok->argc; i++)
		    tok->argv[i] = tok->argv[i] + offs;
		tok->wptr   = tok->wptr + offs;
		tok->wstart = tok->wstart + offs;
		tok->wspace = s;
	    }
	    tok->wmax   = s + size;
	}

	if (tok->argc >= tok->amax - 4) {
	    char **nargv = (char **) tok_realloc(tok->argv, (tok->amax + AINCR)
						 * sizeof(char*));
	    if (nargv == NULL)
		return -1;
	    tok->amax += AINCR;
	    tok->argv = nargv;
a406 1
    }
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: tokenizer.c,v 1.6 2003/05/01 21:11:21 avsm Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: tokenizer.c,v 1.6 2003/05/01 21:11:21 avsm Exp $";
d366 1
a366 2
	    char *s = (char *) tok_realloc(tok->wspace, size);
	    /*SUPPRESS 22*/
d369 4
a372 1
	    if (s != NULL && (offs = s - tok->wspace) != 0) {
a377 1
		tok->wmax   = s + size;
d380 1
d386 4
a389 4
	    if (nargv != NULL) {
		tok->amax += AINCR;
		tok->argv = nargv;
	    }
@


1.6
log
@is -Wall clean by making rcsid const
@
text
@d1 1
a1 1
/*	$OpenBSD: tokenizer.c,v 1.5 2002/02/16 21:27:26 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: tokenizer.c,v 1.5 2002/02/16 21:27:26 millert Exp $";
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: tokenizer.c,v 1.4 1998/08/16 20:24:54 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: tokenizer.c,v 1.4 1998/08/16 20:24:54 millert Exp $";
@


1.4
log
@deal with realloc/malloc failure and don't trash old pointer if realloc fails
@
text
@d1 1
a1 1
/*	$OpenBSD: tokenizer.c,v 1.3 1997/03/14 05:13:07 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: tokenizer.c,v 1.3 1997/03/14 05:13:07 millert Exp $";
d83 1
a83 1
private void tok_finish	__P((Tokenizer *));
@


1.3
log
@fix el_source() - a block needed braces around it (from NetBSD)
Some strcpy() -> strncpy (from NetBSD)
Some KNF
Add current NetBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD: tokenizer.c,v 1.2 1997/01/16 05:18:49 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: tokenizer.c,v 1.2 1997/01/16 05:18:49 millert Exp $";
d372 1
a372 1
	    int offs = s - tok->wspace;
d374 1
a374 1
	    if (offs != 0) {
d386 6
a391 3
	    tok->amax += AINCR;
	    tok->argv = (char **) tok_realloc(tok->argv, 
					      tok->amax * sizeof(char*));
a392 1

@


1.2
log
@Merge in NetBSD libedit changes and new man pages.  Also fix some
strncpy() usage in their code.  NetBSD change log was:
    * add a man page for the editline routines
    * add a man page describing editrc
    * fix bugs in el_parse():
      * didn't execute command when program name matched (test reversed)
      * was checking against empty string instead of program name
      * after checks, command to run also pointed to empty string
    * document ^char and \ escape sequences
    * when parsing ^char control chars, check the correct char when determining
      validity (previously, ^char was a NOP interpreted as the literal string
      because of this bug)
    * Implement CC_REDISPLAY, which (unlike CC_REFRESH) redraws the entire input
    * line (a la ^R). This is useful if the binding outputs information and
    * mucks up the input line. To be used in ``list-choices'' bindings (refer
    * to the ^D binding in csh when filec is set)
@
text
@d1 2
a2 1
/*	$OpenBSD: $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: $";
@


1.1
log
@Initial revision
@
text
@d1 2
d40 1
d42 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
