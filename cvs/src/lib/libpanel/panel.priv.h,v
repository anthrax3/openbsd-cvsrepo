head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.12
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.38
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.34
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.32
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.30
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.28
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.26
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.24
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.22
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.20
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.18
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.16
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.14
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.12
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.10
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.8
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.6
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2015.01.23.22.48.51;	author krw;	state Exp;
branches;
next	1.9;
commitid	KTSX89RmrGrZOaBg;

1.9
date	2010.01.12.23.22.08;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.28.22.58.53;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.22.18.02.11;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.08.22.47.07;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.16.01.35.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.11.28.17.49.19;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.07.24.17.08.24;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.12.03.05.17.57;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.26.03.56.06;	author millert;	state Exp;
branches;
next	;


desc
@@


1.10
log
@More missing $OpenBSD$.

ok nicm@@
@
text
@/*	$OpenBSD$	*/
/****************************************************************************
 * Copyright (c) 1998-2005,2008 Free Software Foundation, Inc.              *
 *                                                                          *
 * Permission is hereby granted, free of charge, to any person obtaining a  *
 * copy of this software and associated documentation files (the            *
 * "Software"), to deal in the Software without restriction, including      *
 * without limitation the rights to use, copy, modify, merge, publish,      *
 * distribute, distribute with modifications, sublicense, and/or sell       *
 * copies of the Software, and to permit persons to whom the Software is    *
 * furnished to do so, subject to the following conditions:                 *
 *                                                                          *
 * The above copyright notice and this permission notice shall be included  *
 * in all copies or substantial portions of the Software.                   *
 *                                                                          *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
 * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                          *
 * Except as contained in this notice, the name(s) of the above copyright   *
 * holders shall not be used in advertising or otherwise to promote the     *
 * sale, use or other dealings in this Software without prior written       *
 * authorization.                                                           *
 ****************************************************************************/

/* $Id: panel.priv.h,v 1.9 2010/01/12 23:22:08 nicm Exp $ */

#ifndef NCURSES_PANEL_PRIV_H
#define NCURSES_PANEL_PRIV_H 1

#if HAVE_CONFIG_H
#  include <ncurses_cfg.h>
#endif

#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include "curses.priv.h"
#include "panel.h"
#include <nc_panel.h>

#if USE_RCS_IDS
#  define MODULE_ID(id) static const char Ident[] = id;
#else
#  define MODULE_ID(id) /*nothing*/
#endif


#ifdef TRACE
   extern NCURSES_EXPORT(const char *) _nc_my_visbuf (const void *);
#  ifdef TRACE_TXT
#    define USER_PTR(ptr) _nc_visbuf((const char *)ptr)
#  else
#    define USER_PTR(ptr) _nc_my_visbuf((const char *)ptr)
#  endif

#  define returnPanel(code)	TRACE_RETURN(code,panel)

   extern NCURSES_EXPORT(PANEL *) _nc_retrace_panel (PANEL *);
   extern NCURSES_EXPORT(void) _nc_dPanel (const char*, const PANEL*);
   extern NCURSES_EXPORT(void) _nc_dStack (const char*, int, const PANEL*);
   extern NCURSES_EXPORT(void) _nc_Wnoutrefresh (const PANEL*);
   extern NCURSES_EXPORT(void) _nc_Touchpan (const PANEL*);
   extern NCURSES_EXPORT(void) _nc_Touchline (const PANEL*, int, int);

#  define dBug(x) _tracef x
#  define dPanel(text,pan) _nc_dPanel(text,pan)
#  define dStack(fmt,num,pan) _nc_dStack(fmt,num,pan)
#  define Wnoutrefresh(pan) _nc_Wnoutrefresh(pan)
#  define Touchpan(pan) _nc_Touchpan(pan)
#  define Touchline(pan,start,count) _nc_Touchline(pan,start,count)
#else /* !TRACE */
#  define returnPanel(code)	return code
#  define dBug(x)
#  define dPanel(text,pan)
#  define dStack(fmt,num,pan)
#  define Wnoutrefresh(pan) wnoutrefresh((pan)->win)
#  define Touchpan(pan) touchwin((pan)->win)
#  define Touchline(pan,start,count) touchline((pan)->win,start,count)
#endif

#define _nc_stdscr_pseudo_panel _nc_panelhook()->stdscr_pseudo_panel
#define _nc_top_panel _nc_panelhook()->top_panel
#define _nc_bottom_panel _nc_panelhook()->bottom_panel

#define EMPTY_STACK() (_nc_top_panel==_nc_bottom_panel)
#define Is_Bottom(p)  (((p)!=(PANEL*)0) && !EMPTY_STACK() && (_nc_bottom_panel->above==(p)))
#define Is_Top(p) (((p)!=(PANEL*)0) && !EMPTY_STACK() && (_nc_top_panel==(p)))
#define Is_Pseudo(p) ((p) && ((p)==_nc_bottom_panel))

/*+-------------------------------------------------------------------------
	IS_LINKED(pan) - check to see if panel is in the stack
--------------------------------------------------------------------------*/
/* This works! The only case where it would fail is, when the list has
   only one element. But this could only be the pseudo panel at the bottom */
#define IS_LINKED(p) (((p)->above || (p)->below ||((p)==_nc_bottom_panel)) ? TRUE : FALSE)

#define PSTARTX(pan) ((pan)->win->_begx)
#define PENDX(pan)   ((pan)->win->_begx + getmaxx((pan)->win) - 1)
#define PSTARTY(pan) ((pan)->win->_begy)
#define PENDY(pan)   ((pan)->win->_begy + getmaxy((pan)->win) - 1)

/*+-------------------------------------------------------------------------
	PANELS_OVERLAPPED(pan1,pan2) - check panel overlapped
---------------------------------------------------------------------------*/
#define PANELS_OVERLAPPED(pan1,pan2) \
(( !(pan1) || !(pan2) || \
       PSTARTY(pan1) > PENDY(pan2) || PENDY(pan1) < PSTARTY(pan2) ||\
       PSTARTX(pan1) > PENDX(pan2) || PENDX(pan1) < PSTARTX(pan2) ) \
     ? FALSE : TRUE)


/*+-------------------------------------------------------------------------
	Compute the intersection rectangle of two overlapping rectangles
---------------------------------------------------------------------------*/
#define COMPUTE_INTERSECTION(pan1,pan2,ix1,ix2,iy1,iy2)\
   ix1 = (PSTARTX(pan1) < PSTARTX(pan2)) ? PSTARTX(pan2) : PSTARTX(pan1);\
   ix2 = (PENDX(pan1)   < PENDX(pan2))   ? PENDX(pan1)   : PENDX(pan2);\
   iy1 = (PSTARTY(pan1) < PSTARTY(pan2)) ? PSTARTY(pan2) : PSTARTY(pan1);\
   iy2 = (PENDY(pan1)   < PENDY(pan2))   ? PENDY(pan1)   : PENDY(pan2);\
   assert((ix1<=ix2) && (iy1<=iy2));\


/*+-------------------------------------------------------------------------
	Walk through the panel stack starting at the given location and
        check for intersections; overlapping panels are "touched", so they
        are incrementally overwriting cells that should be hidden.
        If the "touch" flag is set, the panel gets touched before it is
        updated.
---------------------------------------------------------------------------*/
#define PANEL_UPDATE(pan,panstart)\
{  PANEL* pan2 = ((panstart) ? (panstart) : _nc_bottom_panel);\
   while(pan2) {\
      if ((pan2 != pan) && PANELS_OVERLAPPED(pan,pan2)) {\
        int y,ix1,ix2,iy1,iy2;\
        COMPUTE_INTERSECTION(pan,pan2,ix1,ix2,iy1,iy2);\
	for(y = iy1; y <= iy2; y++) {\
	  if (is_linetouched(pan->win,y - PSTARTY(pan))) {\
            struct ldat* line = &(pan2->win->_line[y - PSTARTY(pan2)]);\
            CHANGED_RANGE(line,ix1-PSTARTX(pan2),ix2-PSTARTX(pan2));\
          }\
	}\
      }\
      pan2 = pan2->above;\
   }\
}

/*+-------------------------------------------------------------------------
	Remove panel from stack.
---------------------------------------------------------------------------*/
#define PANEL_UNLINK(pan,err) \
{  err = ERR;\
   if (pan) {\
     if (IS_LINKED(pan)) {\
       if ((pan)->below)\
         (pan)->below->above = (pan)->above;\
       if ((pan)->above)\
         (pan)->above->below = (pan)->below;\
       if ((pan) == _nc_bottom_panel) \
         _nc_bottom_panel = (pan)->above;\
       if ((pan) == _nc_top_panel) \
         _nc_top_panel = (pan)->below;\
       err = OK;\
     }\
     (pan)->above = (pan)->below = (PANEL*)0;\
   }\
}

#define HIDE_PANEL(pan,err,err_if_unlinked)\
  if (IS_LINKED(pan)) {\
    Touchpan(pan);\
    PANEL_UPDATE(pan,(PANEL*)0);\
    PANEL_UNLINK(pan,err);\
  } \
  else {\
      err = err_if_unlinked;\
  }

#endif /* NCURSES_PANEL_PRIV_H */
@


1.9
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@d1 1
d30 1
a30 1
/* $Id: panel.priv.h,v 1.22 2008/09/27 22:36:11 tom Exp $ */
@


1.8
log
@ncurses-5.2-20010224
@
text
@a0 2
/*	$OpenBSD: panel.priv.h,v 1.7 2001/01/22 18:02:11 millert Exp $	*/

d2 1
a2 1
 * Copyright (c) 2000 Free Software Foundation, Inc.                        *
d29 1
a29 1
/* $From: panel.priv.h,v 1.17 2001/02/24 23:47:05 tom Exp $ */
d31 2
a32 2
#ifndef _PANEL_PRIV_H
#define _PANEL_PRIV_H
d42 1
a42 8
#if HAVE_LIBDMALLOC
#  include <dmalloc.h>    /* Gray Watson's library */
#endif

#if HAVE_LIBDBMALLOC
#  include <dbmalloc.h>   /* Conor Cahill's library */
#endif

a45 6
#if ( CC_HAS_INLINE_FUNCS && !defined(TRACE) )
#  define INLINE inline
#else
#  define INLINE
#endif

d61 3
d77 1
d91 1
a91 1
#define Is_Bottom(p)  (((p)!=(PANEL*)0) && !EMPTY_STACK() && (_nc_bottom_panel->above==(p))) 
a94 9
/* borrowed from curses.priv.h */
#define CHANGED_RANGE(line,start,end) \
	if (line->firstchar == _NOCHANGE \
	 || line->firstchar > (start)) \
		line->firstchar = start; \
	if (line->lastchar == _NOCHANGE \
	 || line->lastchar < (end)) \
		line->lastchar = end

d131 1
a131 1
        are incrementally overwriting cells that should be hidden. 
d133 1
a133 1
        updated. 
d183 1
a183 1
#endif /* _PANEL_PRIV_H */
@


1.7
log
@Update to ncurses-5.2-20010114
@
text
@d1 1
a1 1
/*	$OpenBSD: panel.priv.h,v 1.6 2000/10/08 22:47:07 millert Exp $	*/
d31 1
a31 1
/* $From: panel.priv.h,v 1.15 2000/12/10 00:27:20 tom Exp $ */
d155 1
a155 1
#define PANEL_UPDATE(pan,panstart,touch)\
a156 2
   if (touch)\
      Touchpan(pan);\
d195 2
a196 1
    PANEL_UPDATE(pan,(PANEL*)0,TRUE);\
d200 1
a200 2
    if (err_if_unlinked)\
      err = ERR;\
@


1.6
log
@update to ncurses-5.1-20001007
@
text
@d1 1
a1 1
/*	$OpenBSD: panel.priv.h,v 1.5 2000/01/16 01:35:18 millert Exp $	*/
d31 1
a31 1
/* $From: panel.priv.h,v 1.14 2000/09/02 18:22:23 tom Exp $ */
d52 1
a53 1
#include "panel.h"
d69 1
a69 1
   extern const char *_nc_my_visbuf(const void *);
d76 5
a80 5
   extern void _nc_dPanel(const char*, const PANEL*);
   extern void _nc_dStack(const char*, int, const PANEL*);
   extern void _nc_Wnoutrefresh(const PANEL*);
   extern void _nc_Touchpan(const PANEL*);
   extern void _nc_Touchline(const PANEL*, int, int);
@


1.5
log
@Update to ncurses-5.0-20000115:
+ additional fixes for non-bce terminals (handling of delete_character)
to work when assume_default_colors() is not specified.
+ modify warning message from _nc_parse_entry() regarding extended
capability names to print only if tic/infocmp/toe have the -v flag
set, and not at all in ordinary user applications.  Otherwise, this
warning would be shown for screen's extended capabilities in programs
that use the termcap interface.
+ modify use of _nc_tracing from programs such as tic so their debug
level is not in the same range as values set by trace() function.
+ small panel header cleanup (patch by Juergen Pfeifer).
@
text
@d1 31
a31 2
/*	$OpenBSD: panel.priv.h,v 1.4 1999/11/28 17:49:19 millert Exp $	*/
/* $From: panel.priv.h,v 1.13 2000/01/15 20:39:53 juergen Exp $ */
d61 1
a61 1
#ifdef USE_RCS_IDS
@


1.4
log
@update to ncurses-5.0-19991127
@
text
@d1 2
a2 2
/*	$OpenBSD: panel.priv.h,v 1.3 1998/07/24 17:08:24 millert Exp $	*/
/* $From: panel.priv.h,v 1.12 1999/11/25 13:49:26 juergen Exp $ */
d127 1
a127 2
{  int y;\
   PANEL* pan2 = ((panstart) ? (panstart) : _nc_bottom_panel);\
d132 1
a132 1
        int ix1,ix2,iy1,iy2;\
@


1.3
log
@libpanel from ncurses-4.2-980718
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/* $From: panel.priv.h,v 1.8 1997/10/21 10:19:37 juergen Exp $ */
a31 6
typedef struct panelcons
{
  struct panelcons *above;
  struct panel *pan;
} PANELCONS;

a37 2
#define P_TOUCH  (0)
#define P_UPDATE (1)
d72 104
a175 5
extern void _nc_panel_link_bottom(PANEL*);
extern bool _nc_panel_is_linked(const PANEL*);
extern void _nc_calculate_obscure(void);
extern void _nc_free_obscure(PANEL*);
extern void _nc_override(const PANEL*,int);
@


1.2
log
@merge of ncurses-4.1-971129
@
text
@d2 1
a2 2

/* Id: panel.priv.h,v 1.8 1997/10/21 10:19:37 juergen Exp $ */
@


1.1
log
@libpanel from ncurses 4.1.  Post 4.1 patches to be applied in a separate commit.
@
text
@d1 3
a3 1
/* $Id: panel.priv.h,v 1.4 1997/04/05 23:38:02 tom Exp $ */
d13 1
d17 1
a17 1
#include <dmalloc.h>    /* Gray Watson's library */
d21 1
a21 1
#include <dbmalloc.h>   /* Conor Cahill's library */
d24 1
a26 1

a32 1

a38 6
#ifdef TRACE
#  define dBug(x) _tracef x
#else
#  define dBug(x)
#endif

d40 1
a40 1
#define MODULE_ID(id) static const char Ident[] = id;
d42 1
a42 1
#define MODULE_ID(id) /*nothing*/
d48 40
a87 1
#endif
@
