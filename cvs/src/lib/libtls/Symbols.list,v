head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4;
locks; strict;
comment	@# @;


1.9
date	2017.08.10.18.18.30;	author jsing;	state Exp;
branches;
next	1.8;
commitid	JWjAtg2Qibcivg2a;

1.8
date	2017.07.06.17.12.22;	author jsing;	state Exp;
branches;
next	1.7;
commitid	fv2Kdpq5NVcxboLK;

1.7
date	2017.05.06.20.57.45;	author jsing;	state Exp;
branches;
next	1.6;
commitid	7knj8PI0VBvDV9Tw;

1.6
date	2017.04.05.03.19.22;	author beck;	state Exp;
branches;
next	1.5;
commitid	fVTR3y6ldhS7rNl7;

1.5
date	2017.04.05.03.13.53;	author beck;	state Exp;
branches;
next	1.4;
commitid	SWbRdnAypDhJYgn8;

1.4
date	2017.01.31.16.18.57;	author beck;	state Exp;
branches;
next	1.3;
commitid	xEmNr0q3vZFvI7yp;

1.3
date	2017.01.24.01.48.05;	author claudio;	state Exp;
branches;
next	1.2;
commitid	k0nZBOjpyTl9Tz16;

1.2
date	2016.11.05.15.13.26;	author beck;	state Exp;
branches;
next	1.1;
commitid	3VJnu6rXiOGWa3uh;

1.1
date	2016.11.04.18.23.32;	author guenther;	state Exp;
branches;
next	;
commitid	6ETMBoXiwmbf06wQ;


desc
@@


1.9
log
@Add a tls_config_set_ecdhecurves() function to libtls, which allows the
names of the elliptic curves that may be used during client and server
key exchange to be specified.

This deprecates tls_config_set_ecdhecurve(), which could only be used to
specify a single supported curve.

ok beck@@
@
text
@tls_accept_cbs
tls_accept_fds
tls_accept_socket
tls_client
tls_close
tls_config_add_keypair_file
tls_config_add_keypair_mem
tls_config_add_keypair_ocsp_file
tls_config_add_keypair_ocsp_mem
tls_config_add_ticket_key
tls_config_clear_keys
tls_config_error
tls_config_free
tls_config_insecure_noverifycert
tls_config_insecure_noverifyname
tls_config_insecure_noverifytime
tls_config_new
tls_config_ocsp_require_stapling
tls_config_parse_protocols
tls_config_prefer_ciphers_client
tls_config_prefer_ciphers_server
tls_config_set_alpn
tls_config_set_ca_file
tls_config_set_ca_mem
tls_config_set_ca_path
tls_config_set_cert_file
tls_config_set_cert_mem
tls_config_set_ciphers
tls_config_set_crl_file
tls_config_set_crl_mem
tls_config_set_dheparams
tls_config_set_ecdhecurve
tls_config_set_ecdhecurves
tls_config_set_key_file
tls_config_set_key_mem
tls_config_set_keypair_file
tls_config_set_keypair_mem
tls_config_set_keypair_ocsp_file
tls_config_set_keypair_ocsp_mem
tls_config_set_ocsp_staple_mem
tls_config_set_ocsp_staple_file
tls_config_set_protocols
tls_config_set_session_id
tls_config_set_session_lifetime
tls_config_set_verify_depth
tls_config_skip_private_key_check
tls_config_verify
tls_config_verify_client
tls_config_verify_client_optional
tls_configure
tls_conn_alpn_selected
tls_conn_cipher
tls_conn_servername
tls_conn_version
tls_connect
tls_connect_cbs
tls_connect_fds
tls_connect_servername
tls_connect_socket
tls_error
tls_free
tls_handshake
tls_init
tls_load_file
tls_ocsp_process_response
tls_peer_cert_chain_pem
tls_peer_cert_contains_name
tls_peer_cert_hash
tls_peer_cert_issuer
tls_peer_cert_notafter
tls_peer_cert_notbefore
tls_peer_cert_provided
tls_peer_cert_subject
tls_peer_ocsp_cert_status
tls_peer_ocsp_crl_reason
tls_peer_ocsp_next_update
tls_peer_ocsp_response_status
tls_peer_ocsp_result
tls_peer_ocsp_revocation_time
tls_peer_ocsp_this_update
tls_peer_ocsp_url
tls_read
tls_reset
tls_server
tls_unload_file
tls_write
@


1.8
log
@Add support for providing CRLs to libtls - once a CRL is provided we
enable CRL checking for the full certificate chain.

Based on a diff from Jack Burton <jack at saosce dot com dot au>, thanks!

Discussed with beck@@
@
text
@d33 1
@


1.7
log
@Provide a tls_unload_file() function, that frees the memory returned from
a tls_load_file() call, ensuring that it the contents become inaccessible.
This is specifically needed on platforms where the library allocators may
be different from the application allocator.

ok beck@@
@
text
@d29 2
@


1.6
log
@Add tls_peer_cert_chain_pem - To retreive the peer certificate and chain
as PEM format. This allows for it to be used or examined with tools
external to libtls
bump minor
ok jsing@@
@
text
@d82 1
@


1.5
log
@Internal changes to allow for relayd engine privsep. sends the hash of the
public key as an identifier to RSA, and adds an function for relayd to
use to disable private key checking when doing engine privsep.
ok jsing@@
@
text
@d63 1
@


1.4
log
@Add tls_config_[add|set]keypair_ocsp functions so that ocsp staples may be
added associated to a keypair used for SNI, and are usable for more than
just the "main" certificate. Modify httpd to use this.
Bump libtls minor.

ok jsing@@
@
text
@d43 1
@


1.3
log
@Introduce ticket support. To enable them it is enough to set a positive
lifetime with tls_config_set_session_lifetime(). This enables tickets
and uses an internal automatic rekeying mode for the ticket keys.

If multiple processes are involved the following functions can be used to make
tickets work accross all instances:
- tls_config_set_session_id() sets the session identifier
- tls_config_add_ticket_key() adds an encryption and authentication key

For now only the last 4 keys added will be used (unless they are too old).
If tls_config_add_ticket_key() is used the caller must ensure to add new keys
regularly. It is best to do this 4 times per session lifetime (which is also
the ticket key lifetime).

Since tickets break PFS it is best to minimize the session lifetime according
to needs.

With a lot of help, input and OK beck@@, jsing@@
@
text
@d8 2
d35 2
@


1.2
log
@Add support for server side OCSP stapling to libtls.
Add support for server side OCSP stapling to netcat.
@
text
@d8 1
d36 2
@


1.1
log
@Add an explict list of exported symbols with just the functions declared
in <tls.h>, and use __{BEGIN,END}_HIDDEN_DECLS in tls_internal.h to
optimize internal functions

ok jsing@@
@
text
@d32 2
@

