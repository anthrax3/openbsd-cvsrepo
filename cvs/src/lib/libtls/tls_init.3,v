head	1.86;
access;
symbols
	OPENBSD_6_0:1.62.0.2
	OPENBSD_6_0_BASE:1.62
	OPENBSD_5_9:1.54.0.2
	OPENBSD_5_9_BASE:1.54
	OPENBSD_5_8:1.25.0.4
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18;
locks; strict;
comment	@.\" @;


1.86
date	2017.01.24.07.57.39;	author jmc;	state Exp;
branches;
next	1.85;
commitid	qkxGFnvBMjwSuyqC;

1.85
date	2017.01.24.01.48.05;	author claudio;	state Exp;
branches;
next	1.84;
commitid	k0nZBOjpyTl9Tz16;

1.84
date	2017.01.24.01.16.26;	author claudio;	state Exp;
branches;
next	1.83;
commitid	uge0MrHP6ABHUYJn;

1.83
date	2017.01.24.00.28.31;	author claudio;	state Exp;
branches;
next	1.82;
commitid	QHSNYf3Mq3Mg5Ftj;

1.82
date	2017.01.24.00.00.12;	author claudio;	state Exp;
branches;
next	1.81;
commitid	oh79ahHFnQiFa2RN;

1.81
date	2016.11.11.14.02.24;	author jsing;	state Exp;
branches;
next	1.80;
commitid	Raxw7C0Peowb71As;

1.80
date	2016.11.05.18.30.02;	author bcook;	state Exp;
branches;
next	1.79;
commitid	2WNvbQ50dm48L5dX;

1.79
date	2016.11.05.15.45.41;	author jmc;	state Exp;
branches;
next	1.78;
commitid	NlAGUdxYWPxLbjQz;

1.78
date	2016.11.05.15.13.26;	author beck;	state Exp;
branches;
next	1.77;
commitid	3VJnu6rXiOGWa3uh;

1.77
date	2016.11.04.05.13.13;	author beck;	state Exp;
branches;
next	1.76;
commitid	vHqLGL1n0DAh4s4y;

1.76
date	2016.11.03.12.54.16;	author beck;	state Exp;
branches;
next	1.75;
commitid	3tcXryionRDZcT0q;

1.75
date	2016.11.02.18.26.14;	author jmc;	state Exp;
branches;
next	1.74;
commitid	6kKalAw8MSntcZgm;

1.74
date	2016.11.02.17.32.42;	author jmc;	state Exp;
branches;
next	1.73;
commitid	fFERFjUSh4uzVTdQ;

1.73
date	2016.11.02.15.18.42;	author beck;	state Exp;
branches;
next	1.72;
commitid	OsrmWrsuHXqdXb2Z;

1.72
date	2016.09.13.13.40.58;	author tedu;	state Exp;
branches;
next	1.71;
commitid	YJ1fhPtYqEdHrJOQ;

1.71
date	2016.09.04.16.37.18;	author jmc;	state Exp;
branches;
next	1.70;
commitid	ZAMCd7w4r8A2FNZK;

1.70
date	2016.09.04.12.48.50;	author jsing;	state Exp;
branches;
next	1.69;
commitid	7Eq0GMqKOKMAKwI5;

1.69
date	2016.09.04.12.26.43;	author bcook;	state Exp;
branches;
next	1.68;
commitid	pRMpDkZhqg5jtYzf;

1.68
date	2016.09.04.12.03.24;	author jsing;	state Exp;
branches;
next	1.67;
commitid	Jk58a62H2Pvnkanp;

1.67
date	2016.08.22.14.55.59;	author jsing;	state Exp;
branches;
next	1.66;
commitid	WuoLREAZSBiJsrrv;

1.66
date	2016.08.18.15.43.12;	author jsing;	state Exp;
branches;
next	1.65;
commitid	IawUjraOFiTprwwJ;

1.65
date	2016.08.12.15.10.59;	author jsing;	state Exp;
branches;
next	1.64;
commitid	JoLVmCulWsGsIXUK;

1.64
date	2016.08.02.07.47.11;	author jsing;	state Exp;
branches;
next	1.63;
commitid	0rb7ZAopgz9STgBs;

1.63
date	2016.08.01.17.32.19;	author jsing;	state Exp;
branches;
next	1.62;
commitid	s3UFLNfN0t7jV6pK;

1.62
date	2016.07.13.16.30.48;	author jsing;	state Exp;
branches;
next	1.61;
commitid	Mw54YoRDL3QkFJKB;

1.61
date	2016.05.27.11.25.57;	author sthen;	state Exp;
branches;
next	1.60;
commitid	o082Pb71tGiNuUk4;

1.60
date	2016.05.09.13.48.57;	author jsing;	state Exp;
branches;
next	1.59;
commitid	c1NFxjNEWSVg4HZs;

1.59
date	2016.04.28.18.27.51;	author jmc;	state Exp;
branches;
next	1.58;
commitid	ixAlLwFUL0ZaNBQ1;

1.58
date	2016.04.28.17.05.59;	author jsing;	state Exp;
branches;
next	1.57;
commitid	DKpbOonvEBeRoW5p;

1.57
date	2016.04.28.16.48.44;	author jsing;	state Exp;
branches;
next	1.56;
commitid	pJ2jMgrYqvai7CXS;

1.56
date	2016.04.24.12.16.36;	author jmc;	state Exp;
branches;
next	1.55;
commitid	e4UWdrLlaPmqJ7YW;

1.55
date	2016.04.24.07.02.07;	author jmc;	state Exp;
branches;
next	1.54;
commitid	WGXlDHs3buntbQ2o;

1.54
date	2015.11.09.17.52.07;	author jmc;	state Exp;
branches;
next	1.53;
commitid	zZ2V7jJCPxAeKoxw;

1.53
date	2015.10.16.13.49.53;	author jsing;	state Exp;
branches;
next	1.52;
commitid	jqV9drVzEtOxxzwO;

1.52
date	2015.10.16.13.48.44;	author jsing;	state Exp;
branches;
next	1.51;
commitid	HBhneBNvrv13tUpe;

1.51
date	2015.10.08.07.22.02;	author jmc;	state Exp;
branches;
next	1.50;
commitid	VDC7b7WMDxwh9VrC;

1.50
date	2015.10.07.23.33.38;	author beck;	state Exp;
branches;
next	1.49;
commitid	XcWxDTWtCyQY5Zhm;

1.49
date	2015.09.14.21.23.00;	author jmc;	state Exp;
branches;
next	1.48;
commitid	guQ0ewZ3NDQXAjGR;

1.48
date	2015.09.14.16.16.38;	author jsing;	state Exp;
branches;
next	1.47;
commitid	Fd6WDkwQWggESQVJ;

1.47
date	2015.09.14.15.14.55;	author schwarze;	state Exp;
branches;
next	1.46;
commitid	TPchOLbdlEugnrt2;

1.46
date	2015.09.14.14.29.30;	author jmc;	state Exp;
branches;
next	1.45;
commitid	zAMmqNqhWU0IcrLY;

1.45
date	2015.09.14.12.05.33;	author schwarze;	state Exp;
branches;
next	1.44;
commitid	qvL3XzXKj2mMGbSP;

1.44
date	2015.09.13.10.32.46;	author beck;	state Exp;
branches;
next	1.43;
commitid	keUBjLPDsemH4U8s;

1.43
date	2015.09.12.21.00.38;	author beck;	state Exp;
branches;
next	1.42;
commitid	iEhBM6X1bQFFdcQ1;

1.42
date	2015.09.11.14.22.53;	author jmc;	state Exp;
branches;
next	1.41;
commitid	HSWSlwqCFgohyaaN;

1.41
date	2015.09.11.14.20.14;	author jmc;	state Exp;
branches;
next	1.40;
commitid	1uhu8QL261PLyaE2;

1.40
date	2015.09.11.14.15.19;	author jmc;	state Exp;
branches;
next	1.39;
commitid	0E3oBblvuMKbWWjc;

1.39
date	2015.09.11.13.59.20;	author beck;	state Exp;
branches;
next	1.38;
commitid	OUCA4bfXLXcZZOvB;

1.38
date	2015.09.11.12.56.55;	author beck;	state Exp;
branches;
next	1.37;
commitid	sb4du43rG1oa1RCm;

1.37
date	2015.09.11.09.02.10;	author beck;	state Exp;
branches;
next	1.36;
commitid	OTjj9gjykJNf8QZ2;

1.36
date	2015.09.11.07.09.05;	author jmc;	state Exp;
branches;
next	1.35;
commitid	Yq82VMIbPihE0KDP;

1.35
date	2015.09.10.16.59.00;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	B74PVPPsdWYJ3VpR;

1.34
date	2015.09.10.15.47.25;	author beck;	state Exp;
branches;
next	1.33;
commitid	gyPzmytrGKWsN08K;

1.33
date	2015.09.10.14.57.29;	author beck;	state Exp;
branches;
next	1.32;
commitid	PAKRUwnVECkYobUR;

1.32
date	2015.09.10.14.17.22;	author jmc;	state Exp;
branches;
next	1.31;
commitid	eIHbvhTMo5rmGpkt;

1.31
date	2015.09.10.13.29.53;	author jsing;	state Exp;
branches;
next	1.30;
commitid	aZhfsLIUxHZEsNYN;

1.30
date	2015.09.10.13.23.57;	author jsing;	state Exp;
branches;
next	1.29;
commitid	Oy5qowIUPPHeMGJJ;

1.29
date	2015.09.10.11.21.08;	author jsing;	state Exp;
branches;
next	1.28;
commitid	98STXa7pmf5P245r;

1.28
date	2015.09.10.11.00.54;	author beck;	state Exp;
branches;
next	1.27;
commitid	I0vE4TA4yBLZOh6F;

1.27
date	2015.09.10.10.59.22;	author beck;	state Exp;
branches;
next	1.26;
commitid	XvKhmCqeyI8xzhBD;

1.26
date	2015.09.10.09.10.42;	author jsing;	state Exp;
branches;
next	1.25;
commitid	QGGZQQxHecOSmNyK;

1.25
date	2015.07.19.17.10.23;	author jmc;	state Exp;
branches;
next	1.24;
commitid	7wpNzPSurxVdJjsW;

1.24
date	2015.07.19.05.49.27;	author doug;	state Exp;
branches;
next	1.23;
commitid	6HLCxZPlnf7MP0g7;

1.23
date	2015.04.03.22.33.43;	author jmc;	state Exp;
branches;
next	1.22;
commitid	2AVCIaq2weGg7ufj;

1.22
date	2015.04.02.13.19.15;	author jsing;	state Exp;
branches;
next	1.21;
commitid	gEbGjQ3WrLkgYiLT;

1.21
date	2015.04.02.05.54.22;	author jsing;	state Exp;
branches;
next	1.20;
commitid	FhAMOvXErLKYuV43;

1.20
date	2015.04.02.05.53.08;	author jsing;	state Exp;
branches;
next	1.19;
commitid	kixMlSUmELdqDSc5;

1.19
date	2015.03.31.14.03.38;	author jsing;	state Exp;
branches;
next	1.18;
commitid	eUtypBLBDknWtFkM;

1.18
date	2015.02.22.15.09.54;	author jsing;	state Exp;
branches;
next	1.17;
commitid	lRyL0pnPfoLbeA76;

1.17
date	2015.02.21.21.41.00;	author tedu;	state Exp;
branches;
next	1.16;
commitid	7Dool12z9XzttOuz;

1.16
date	2015.02.21.19.58.39;	author tedu;	state Exp;
branches;
next	1.15;
commitid	84aIC2TgO2UZtCL9;

1.15
date	2015.02.21.19.54.59;	author tedu;	state Exp;
branches;
next	1.14;
commitid	NKVLm73LgS9embpd;

1.14
date	2015.02.15.13.36.06;	author jsing;	state Exp;
branches;
next	1.13;
commitid	3r6qyYmJ4zALVqBl;

1.13
date	2015.02.15.13.33.14;	author jsing;	state Exp;
branches;
next	1.12;
commitid	XU6U0i09thMk3SHA;

1.12
date	2015.02.11.07.01.10;	author jsing;	state Exp;
branches;
next	1.11;
commitid	ZUCrxL1FSxDDlrBb;

1.11
date	2015.02.11.06.46.33;	author jsing;	state Exp;
branches;
next	1.10;
commitid	IjYTp2gC6lDO8mXr;

1.10
date	2015.02.07.23.45.06;	author reyk;	state Exp;
branches;
next	1.9;
commitid	eWy3eMJpU4IZSOWb;

1.9
date	2015.02.07.06.19.26;	author jsing;	state Exp;
branches;
next	1.8;
commitid	cwopaOfpwORA2vUX;

1.8
date	2015.01.22.11.08.54;	author jmc;	state Exp;
branches;
next	1.7;
commitid	H3q6vlyJBnrUP00l;

1.7
date	2015.01.22.09.16.24;	author reyk;	state Exp;
branches;
next	1.6;
commitid	MIkUgu4UHo6s43H0;

1.6
date	2015.01.01.13.30.52;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	d7FufULnDq2lwZfz;

1.5
date	2015.01.01.08.42.08;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	uzMzYnwU1Df43n1G;

1.4
date	2014.11.11.04.17.34;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	tAlDK3qBS67sCG11;

1.3
date	2014.11.07.13.57.43;	author tedu;	state Exp;
branches;
next	1.2;
commitid	NlU7aKK7DnPYVhMl;

1.2
date	2014.11.02.14.45.05;	author jsing;	state Exp;
branches;
next	1.1;
commitid	GgBCARgHkY5F5TEV;

1.1
date	2014.10.31.13.46.17;	author jsing;	state Exp;
branches;
next	;
commitid	y63FmUITd26yVanM;


desc
@@


1.86
log
@accross -> across;
@
text
@.\" $OpenBSD: tls_init.3,v 1.85 2017/01/24 01:48:05 claudio Exp $
.\"
.\" Copyright (c) 2014 Ted Unangst <tedu@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: January 24 2017 $
.Dt TLS_INIT 3
.Os
.Sh NAME
.Nm tls_init ,
.Nm tls_config_error ,
.Nm tls_error ,
.Nm tls_config_new ,
.Nm tls_config_free ,
.Nm tls_config_parse_protocols ,
.Nm tls_config_add_keypair_file ,
.Nm tls_config_add_keypair_mem ,
.Nm tls_config_add_ticket_key ,
.Nm tls_config_set_alpn ,
.Nm tls_config_set_ca_file ,
.Nm tls_config_set_ca_path ,
.Nm tls_config_set_ca_mem ,
.Nm tls_config_set_cert_file ,
.Nm tls_config_set_cert_mem ,
.Nm tls_config_set_ciphers ,
.Nm tls_config_set_dheparams ,
.Nm tls_config_set_ecdhecurve ,
.Nm tls_config_set_key_file ,
.Nm tls_config_set_key_mem ,
.Nm tls_config_set_keypair_file ,
.Nm tls_config_set_keypair_mem ,
.Nm tls_config_set_ocsp_staple_mem ,
.Nm tls_config_set_ocsp_staple_file ,
.Nm tls_config_set_protocols ,
.Nm tls_config_set_session_id ,
.Nm tls_config_set_session_lifetime ,
.Nm tls_config_set_verify_depth ,
.Nm tls_config_prefer_ciphers_client ,
.Nm tls_config_prefer_ciphers_server ,
.Nm tls_config_clear_keys ,
.Nm tls_config_insecure_noverifycert ,
.Nm tls_config_insecure_noverifyname ,
.Nm tls_config_insecure_noverifytime ,
.Nm tls_config_ocsp_require_stapling ,
.Nm tls_config_verify ,
.Nm tls_config_verify_client ,
.Nm tls_config_verify_client_optional ,
.Nm tls_peer_cert_provided ,
.Nm tls_peer_cert_contains_name ,
.Nm tls_peer_cert_issuer ,
.Nm tls_peer_cert_subject ,
.Nm tls_peer_cert_hash ,
.Nm tls_peer_cert_notbefore ,
.Nm tls_peer_cert_notafter ,
.Nm tls_ocsp_process_response ,
.Nm tls_peer_ocsp_cert_status ,
.Nm tls_peer_ocsp_crl_reason ,
.Nm tls_peer_ocsp_next_update ,
.Nm tls_peer_ocsp_response_status ,
.Nm tls_peer_ocsp_result_msg ,
.Nm tls_peer_ocsp_revocation_time ,
.Nm tls_peer_ocsp_this_update ,
.Nm tls_peer_ocsp_url ,
.Nm tls_conn_alpn_selected ,
.Nm tls_conn_cipher ,
.Nm tls_conn_servername ,
.Nm tls_conn_version ,
.Nm tls_load_file ,
.Nm tls_client ,
.Nm tls_server ,
.Nm tls_configure ,
.Nm tls_reset ,
.Nm tls_free ,
.Nm tls_connect ,
.Nm tls_connect_fds ,
.Nm tls_connect_servername ,
.Nm tls_connect_socket ,
.Nm tls_connect_cbs ,
.Nm tls_accept_fds ,
.Nm tls_accept_socket ,
.Nm tls_accept_cbs ,
.Nm tls_handshake ,
.Nm tls_read ,
.Nm tls_write ,
.Nm tls_close
.Nd TLS client and server API
.Sh SYNOPSIS
.In tls.h
.Ft "int"
.Fn tls_init "void"
.Ft "const char *"
.Fn tls_config_error "struct tls_config *config"
.Ft "const char *"
.Fn tls_error "struct tls *ctx"
.Ft "struct tls_config *"
.Fn tls_config_new "void"
.Ft "void"
.Fn tls_config_free "struct tls_config *config"
.Ft "int"
.Fn tls_config_parse_protocols "uint32_t *protocols" "const char *protostr"
.Ft "int"
.Fn tls_config_add_keypair_file "struct tls_config *config" "const char *cert_file" "const char *key_file"
.Ft "int"
.Fn tls_config_add_keypair_mem "struct tls_config *config" "const uint8_t *cert" "size_t cert_len" "const uint8_t *key" "size_t key_len"
.Ft "int"
.Fn tls_config_add_ticket_key "struct tls_config *config" "uint32_t keyrev" "unsigned char *key" "size_t keylen"
.Ft "int"
.Fn tls_config_set_alpn "struct tls_config *config" "const char *alpn"
.Ft "int"
.Fn tls_config_set_ca_file "struct tls_config *config" "const char *ca_file"
.Ft "int"
.Fn tls_config_set_ca_path "struct tls_config *config" "const char *ca_path"
.Ft "int"
.Fn tls_config_set_ca_mem "struct tls_config *config" "const uint8_t *cert" "size_t len"
.Ft "int"
.Fn tls_config_set_cert_file "struct tls_config *config" "const char *cert_file"
.Ft "int"
.Fn tls_config_set_cert_mem "struct tls_config *config" "const uint8_t *cert" "size_t len"
.Ft "int"
.Fn tls_config_set_ciphers "struct tls_config *config" "const char *ciphers"
.Ft "int"
.Fn tls_config_set_dheparams "struct tls_config *config" "const char *params"
.Ft "int"
.Fn tls_config_set_ecdhecurve "struct tls_config *config" "const char *name"
.Ft "int"
.Fn tls_config_set_key_file "struct tls_config *config" "const char *key_file"
.Ft "int"
.Fn tls_config_set_key_mem "struct tls_config *config" "const uint8_t *key" "size_t len"
.Ft "int"
.Fn tls_config_set_keypair_file "struct tls_config *config" "const char *cert_file" "const char *key_file"
.Ft "int"
.Fn tls_config_set_keypair_mem "struct tls_config *config" "const uint8_t *cert" "size_t cert_len" "const uint8_t *key" "size_t key_len"
.Ft "int"
.Fn tls_config_set_ocsp_staple_mem "struct tls_config *config" "const char *staple" "size_t len"
.Ft "int"
.Fn tls_config_set_ocsp_staple_file "struct tls_config *config" "const char *staple_file"
.Ft "int"
.Fn tls_config_set_protocols "struct tls_config *config" "uint32_t protocols"
.Ft "int"
.Fn tls_config_set_session_id "struct tls_config *config" "const unsigned char *session_id" "size_t len"
.Ft "int"
.Fn tls_config_set_session_lifetime "struct tls_config *config" "int lifetime"
.Ft "int"
.Fn tls_config_set_verify_depth "struct tls_config *config" "int verify_depth"
.Ft "void"
.Fn tls_config_prefer_ciphers_client "struct tls_config *config"
.Ft "void"
.Fn tls_config_prefer_ciphers_server "struct tls_config *config"
.Ft "void"
.Fn tls_config_clear_keys "struct tls_config *config"
.Ft "void"
.Fn tls_config_insecure_noverifycert "struct tls_config *config"
.Ft "void"
.Fn tls_config_insecure_noverifyname "struct tls_config *config"
.Ft "void"
.Fn tls_config_insecure_noverifytime "struct tls_config *config"
.Ft "void"
.Fn tls_config_ocsp_require_stapling "struct tls_config *config"
.Ft "void"
.Fn tls_config_verify "struct tls_config *config"
.Ft "void"
.Fn tls_config_verify_client "struct tls_config *config"
.Ft "void"
.Fn tls_config_verify_client_optional "struct tls_config *config"
.Ft "int"
.Fn tls_peer_cert_provided "struct tls *ctx"
.Ft "int"
.Fn tls_peer_cert_contains_name "struct tls *ctx" "const char *name"
.Ft "const char *"
.Fn tls_peer_cert_issuer "struct tls *ctx"
.Ft "const char *"
.Fn tls_peer_cert_subject "struct tls *ctx"
.Ft "const char *"
.Fn tls_peer_cert_hash "struct tls *ctx"
.Ft "time_t"
.Fn tls_peer_cert_notbefore "struct tls *ctx"
.Ft "time_t"
.Fn tls_peer_cert_notafter "struct tls *ctx"
.Ft "int"
.Fn tls_ocsp_process_response "struct tls *ctx" "const unsigned char *response" "size_t size"
.Ft "int"
.Fn tls_peer_ocsp_cert_status "struct tls *ctx"
.Ft "int"
.Fn tls_peer_ocsp_crl_reason "struct tls *ctx"
.Ft time_t
.Fn tls_peer_ocsp_next_update "struct tls *ctx"
.Ft "int"
.Fn tls_peer_ocsp_response_status "struct tls *ctx"
.Ft "const char *"
.Fn tls_peer_ocsp_result_msg "struct tls *ctx"
.Ft "time_t"
.Fn tls_peer_ocsp_revocation_time "struct tls *ctx"
.Ft "time_t"
.Fn tls_peer_ocsp_this_update "struct tls *ctx"
.Ft "const char *"
.Fn tls_peer_ocsp_url "struct tls *ctx"
.Ft "const char *"
.Fn tls_conn_alpn_selected "struct tls *ctx"
.Ft "const char *"
.Fn tls_conn_cipher "struct tls *ctx"
.Ft "const char *"
.Fn tls_conn_servername "struct tls *ctx"
.Ft "const char *"
.Fn tls_conn_version "struct tls *ctx"
.Ft "uint8_t *"
.Fn tls_load_file "const char *file" "size_t *len" "char *password"
.Ft "struct tls *"
.Fn tls_client void
.Ft "struct tls *"
.Fn tls_server void
.Ft "int"
.Fn tls_configure "struct tls *ctx" "struct tls_config *config"
.Ft "void"
.Fn tls_reset "struct tls *ctx"
.Ft "void"
.Fn tls_free "struct tls *ctx"
.Ft "int"
.Fn tls_connect "struct tls *ctx" "const char *host" "const char *port"
.Ft "int"
.Fn tls_connect_fds "struct tls *ctx" "int fd_read" "int fd_write" "const char *servername"
.Ft "int"
.Fn tls_connect_servername "struct tls *ctx" "const char *host" "const char *port" "const char *servername"
.Ft "int"
.Fn tls_connect_socket "struct tls *ctx" "int s" "const char *servername"
.Ft "int"
.Fn tls_connect_cbs "struct tls *ctx" "ssize_t (*tls_read_cb)(struct tls *ctx, void *buf, size_t buflen, void *cb_arg)" "ssize_t (*tls_write_cb)(struct tls *ctx, const void *buf, size_t buflen, void *cb_arg)" "void *cb_arg" "const char *servername"
.Ft "int"
.Fn tls_accept_fds "struct tls *tls" "struct tls **cctx" "int fd_read" "int fd_write"
.Ft "int"
.Fn tls_accept_socket "struct tls *tls" "struct tls **cctx" "int socket"
.Ft "int"
.Fn tls_accept_cbs "struct tls *ctx" "struct tls **cctx" "ssize_t (*tls_read_cb)(struct *ctx, void *buf, size_t buflen, void *cb_arg)" "ssize_t (*tls_write_cb)(struct tls *ctx, const void *buf, size_t buflen, void *cb_arg)" "void *cb_arg"
.Ft "int"
.Fn tls_handshake "struct tls *ctx"
.Ft "ssize_t"
.Fn tls_read "struct tls *ctx" "void *buf" "size_t buflen"
.Ft "ssize_t"
.Fn tls_write "struct tls *ctx" "const void *buf" "size_t buflen"
.Ft "int"
.Fn tls_close "struct tls *ctx"
.Sh DESCRIPTION
The
.Nm tls
family of functions establishes a secure communications channel
using the TLS socket protocol.
Both clients and servers are supported.
.Pp
The
.Fn tls_init
function should be called once before any function is used.
It may be called more than once, but not concurrently.
.Pp
Before a connection is created, a configuration must be created.
The
.Fn tls_config_new
function returns a new default configuration that can be used for future
connections.
Several functions exist to change the options of the configuration; see below.
.Pp
A TLS connection is represented as a
.Em context .
A new
.Em context
is created by either the
.Fn tls_client
or
.Fn tls_server
functions.
The context can then be configured with the function
.Fn tls_configure .
The same
.Em tls_config
object can be used to configure multiple contexts.
.Pp
A client connection is initiated after configuration by calling
.Fn tls_connect .
This function will create a new socket, connect to the specified host and
port, and then establish a secure connection.
The
.Fn tls_connect_servername
function has the same behaviour, however the name to use for verification is
explicitly provided, rather than being inferred from the
.Ar host
value.
An already existing socket can be upgraded to a secure connection by calling
.Fn tls_connect_socket .
Alternatively, a secure connection can be established over a pair of existing
file descriptors by calling
.Fn tls_connect_fds .
Calling
.Fn tls_connect_cbs
allows read and write callback functions to handle data transfers.
The specified cb_arg parameter is passed back to the functions,
and can contain a pointer to any caller-specified data.
.Pp
A server can accept a new client connection by calling
.Fn tls_accept_socket
on an already established socket connection.
Alternatively, a new client connection can be accepted over a pair of existing
file descriptors by calling
.Fn tls_accept_fds .
Calling
.Fn tls_accept_cbs
allows read and write callback functions to handle data transfers.
The specified cb_arg parameter is passed back to the functions,
and can contain a pointer to any caller-specified data.
.Pp
The TLS handshake can be completed by calling
.Fn tls_handshake .
Two functions are provided for input and output,
.Fn tls_read
and
.Fn tls_write .
Both of these functions will result in the TLS handshake being performed if it
has not already completed.
.Pp
After use, a TLS
.Em context
should be closed with
.Fn tls_close ,
and then freed by calling
.Fn tls_free .
When no more contexts are to be created, the
.Em tls_config
object should be freed by calling
.Fn tls_config_free .
.Sh FUNCTIONS
The
.Fn tls_init
function initializes global data structures.
It should be called once before any other functions.
.Pp
The following functions create and free configuration objects:
.Bl -bullet -offset four
.It
.Fn tls_config_new
allocates a new default configuration object.
.It
.Fn tls_config_free
frees a configuration object.
.El
.Pp
The
.Fn tls_config_parse_protocols
function parses a protocol string and returns the corresponding value via the
.Ar protocols
argument.
This value can then be passed to the
.Fn tls_config_set_protocols
function.
The protocol string is a comma or colon separated list of keywords.
Valid keywords are tlsv1.0, tlsv1.1, tlsv1.2, all (all supported protocols),
default (an alias for secure), legacy (an alias for all) and secure (currently
TLSv1.2 only).
If a value has a negative prefix (in the form of a leading exclamation mark)
then it is removed from the list of available protocols, rather than being
added to it.
.Pp
The following functions modify a configuration by setting parameters (the
configuration options apply to both clients and servers, unless noted
otherwise):
.Bl -bullet -offset four
.It
.Fn tls_config_add_keypair_file
adds an additional public certificate and private key from the specified files,
used as an alternative certificate for Server Name Indication (server only).
.It
.Fn tls_config_add_keypair_mem
adds an additional public certificate and private key from memory,
used as an alternative certificate for Server Name Indication (server only).
.It
.Fn tls_config_add_ticket_key
adds a key used for the encryption and authentication of TLS tickets.
By default keys are generated and rotated automatically based on their lifetime.
This function should only be used to synchronise ticket encryption key across
multiple processes.
Re-adding a known key will result in an error, unless it is the most recently
added key.
.It
.Fn tls_config_set_alpn
sets the ALPN protocols that are supported.
The alpn string is a comma separated list of protocols, in order of preference.
.It
.Fn tls_config_set_ca_file
sets the filename used to load a file
containing the root certificates.
.It
.Fn tls_config_set_ca_path
sets the path (directory) which should be searched for root
certificates.
.It
.Fn tls_config_set_ca_mem
sets the root certificates directly from memory.
.It
.Fn tls_config_set_cert_file
sets file from which the public certificate will be read.
.It
.Fn tls_config_set_cert_mem
sets the public certificate directly from memory.
.It
.Fn tls_config_set_ciphers
sets the list of ciphers that may be used.
Lists of ciphers are specified by name, and the
permitted names are:
.Pp
.Bl -tag -width "insecure" -offset indent -compact
.It Dv "secure" (or alias "default")
.It Dv "compat"
.It Dv "legacy"
.It Dv "insecure" (or alias "all")
.El
.Pp
Alternatively, libssl cipher strings can be specified.
See the CIPHERS section of
.Xr openssl 1
for further information.
.It
.Fn tls_config_set_key_file
sets the file from which the private key will be read.
.It
.Fn tls_config_set_key_mem
directly sets the private key from memory.
.It
.Fn tls_config_set_keypair_file
sets the files from which the public certificate and private key will be read.
.It
.Fn tls_config_set_keypair_mem
directly sets the public certificate and private key from memory.
.It
.Fn tls_config_set_ocsp_staple_file
sets a DER-encoded OCSP response to be stapled during the TLS handshake from
the specified file.
.It
.Fn tls_config_set_ocsp_staple_mem
sets a DER-encoded OCSP response to be stapled during the TLS handshake from
memory.
.It
.Fn tls_config_set_protocols
sets which versions of the protocol may be used.
Possible values are the bitwise OR of:
.Pp
.Bl -tag -width "TLS_PROTOCOL_TLSv1_2" -offset indent -compact
.It Dv TLS_PROTOCOL_TLSv1_0
.It Dv TLS_PROTOCOL_TLSv1_1
.It Dv TLS_PROTOCOL_TLSv1_2
.El
.Pp
Additionally, the values
.Dv TLS_PROTOCOL_TLSv1
(TLSv1.0, TLSv1.1 and TLSv1.2),
.Dv TLS_PROTOCOLS_ALL
(all supported protocols) and
.Dv TLS_PROTOCOLS_DEFAULT
(TLSv1.2 only) may be used.
.It
.Fn tls_config_set_session_id
sets the session identifier that will be used by the TLS server when
sessions are enabled.
By default a random value is used.
.It
.Fn tls_config_set_session_lifetime
sets the lifetime to be used for TLS sessions.
Session support is disabled if a lifetime of zero is specified, which is the
default.
.It
.Fn tls_config_set_verify_depth
limits the number of intermediate certificates that will be followed during
certificate validation.
.It
.Fn tls_config_prefer_ciphers_client
prefers ciphers in the client's cipher list when selecting a cipher suite
(server only).
This is considered to be less secure than preferring the server's list.
.It
.Fn tls_config_prefer_ciphers_server
prefers ciphers in the server's cipher list when selecting a cipher suite
(server only).
This is considered to be more secure than preferring the client's list and is
the default.
.It
.Fn tls_config_clear_keys
clears any secret keys from memory.
.It
.Fn tls_config_insecure_noverifycert
disables certificate verification and OCSP validation.
Be extremely careful when using this option.
.It
.Fn tls_config_insecure_noverifyname
disables server name verification (client only).
Be careful when using this option.
.It
.Fn tls_config_insecure_noverifytime
disables validity checking of certificates and OCSP validation.
Be careful when using this option.
.It
.Fn tls_config_ocsp_require_stapling
requires that a valid stapled OCSP response be provided during the TLS handshake.
.It
.Fn tls_config_verify
reenables server name and certificate verification.
.It
.Fn tls_config_verify_client
enables client certificate verification, requiring the client to send
a certificate (server only).
.It
.Fn tls_config_verify_client_optional
enables client certificate verification, without requiring the client
to send a certificate (server only).
.El
.Pp
The following functions return information about a TLS connection and will only
succeed after the handshake is complete (the connection information applies
to both clients and servers, unless noted otherwise):
.Bl -bullet -offset four
.It
.Fn tls_conn_alpn_selected
returns a string that specifies the ALPN protocol selected for use with the peer
connected to
.Ar ctx .
If no protocol was selected then NULL is returned.
.It
.Fn tls_conn_cipher
returns a string corresponding to the cipher suite negotiated with the peer
connected to
.Ar ctx .
.It
.Fn tls_conn_servername
returns a string corresponding to the servername that the client connected to
.Ar ctx
requested by sending a TLS Server Name Indication extension (server only).
.It
.Fn tls_conn_version
returns a string corresponding to a TLS version negotiated with the peer
connected to
.Ar ctx .
.It
.Fn tls_peer_cert_provided
checks if the peer of
.Ar ctx
has provided a certificate.
.It
.Fn tls_peer_cert_contains_name
checks if the peer of a TLS
.Ar ctx
has provided a certificate that contains a
SAN or CN that matches
.Ar name .
.It
.Fn tls_peer_cert_subject
returns a string
corresponding to the subject of the peer certificate from
.Ar ctx .
.It
.Fn tls_peer_cert_issuer
returns a string
corresponding to the issuer of the peer certificate from
.Ar ctx .
.It
.Fn tls_peer_cert_hash
returns a string
corresponding to a hash of the raw peer certificate from
.Ar ctx
prefixed by a hash name followed by a colon.
The hash currently used is SHA256, though this
could change in the future.
The hash string for a certificate in file
.Ar mycert.crt
can be generated using the commands:
.Bd -literal -offset indent
h=$(openssl x509 -outform der -in mycert.crt | sha256)
printf "SHA256:${h}\\n"
.Ed
.It
.Fn tls_peer_cert_notbefore
returns the time corresponding to the start of the validity period of
the peer certificate from
.Ar ctx .
.It
.Fn tls_peer_cert_notafter
returns the time corresponding to the end of the validity period of
the peer certificate from
.Ar ctx .
.It
.Fn tls_ocsp_process_response
processes a raw OCSP response in
.Ar response
of size
.Ar size
to check the revocation status of the peer certificate from
.Ar ctx .
A successful return code of 0 indicates that the certificate
has not been revoked.
.It
.Fn tls_peer_ocsp_url
returns the URL for OCSP validation of the peer certificate from
.Ar ctx
.El
.Pp
The following functions return information about the peer certificate from
.Ar ctx
that was obtained by validating a stapled OCSP response during the handshake,
or via a previous call to
.Fn tls_ocsp_process_response .
.Bl -bullet -offset four
.It
.Fn tls_peer_ocsp_cert_status
returns the OCSP certificate status code as per RFC 6960 section 2.2.
.It
.Fn tls_peer_ocsp_crl_reason
returns the OCSP certificate revocation reason status code as per RFC 5280
section 5.3.1.
.It
.Fn tls_peer_ocsp_next_update
returns the OCSP next update time.
.It
.Fn tls_peer_ocsp_response_status
returns the OCSP response status as per RFC 6960 section 2.3.
.It
.Fn tls_peer_ocsp_revocation_time
returns the OCSP revocation time.
.It
.Fn tls_peer_ocsp_this_update
returns the OCSP this update time.
.El
.Pp
The following are TLS related utility functions:
.Bl -bullet -offset four
.It
.Fn tls_load_file
loads a certificate or key from disk into memory to be loaded with
.Fn tls_config_set_ca_mem ,
.Fn tls_config_set_cert_mem
or
.Fn tls_config_set_key_mem .
A private key will be decrypted if the optional
.Ar password
argument is specified.
.El
.Pp
The following functions create, prepare, and free a connection context:
.Bl -bullet -offset four
.It
.Fn tls_client
creates a new TLS context for client connections.
.It
.Fn tls_server
creates a new TLS context for server connections.
.It
.Fn tls_configure
readies a TLS context for use by applying the configuration
options.
.It
.Fn tls_free
frees a TLS context after use.
.El
.Pp
The following functions initiate a connection and perform input and output
operations:
.Bl -bullet -offset four
.It
.Fn tls_connect
connects a client context to the server named by
.Fa host .
The
.Fa port
may be numeric or a service name.
If it is NULL then a host of the format "hostname:port" is permitted.
.It
.Fn tls_connect_fds
connects a client context to a pair of existing file descriptors.
.It
.Fn tls_connect_socket
connects a client context to an already established socket connection.
.It
.Fn tls_accept_fds
creates a new context suitable for reading and writing on an existing pair of
file descriptors and returns it in
.Fa *cctx .
A configured server context should be passed in
.Fa ctx .
.It
.Fn tls_accept_socket
creates a new context suitable for reading and writing on an already
established socket connection and returns it in
.Fa *cctx .
A configured server context should be passed in
.Fa ctx .
.It
.Fn tls_handshake
performs the TLS handshake.
It is only necessary to call this function if you need to guarantee that the
handshake has completed, as both
.Fn tls_read
and
.Fn tls_write
will perform the TLS handshake if necessary.
.It
.Fn tls_read
reads
.Fa buflen
bytes of data from the socket into
.Fa buf .
It returns the amount of data read.
.It
.Fn tls_write
writes
.Fa buflen
bytes of data from
.Fa buf
to the socket.
It returns the amount of data written.
.It
.Fn tls_close
closes a connection after use.
Only the TLS layer will be shut down and the caller is responsible for closing
the file descriptors, unless the connection was established using
.Fn tls_connect
or
.Fn tls_connect_servername .
.El
.Sh RETURN VALUES
The
.Fn tls_peer_cert_provided
and
.Fn tls_peer_cert_contains_name
functions return 1 if the check succeeds, and 0 if it does not.
.Pp
Functions that return a
.Vt time_t
will return a time in epoch-seconds on success, and -1 on error.
.Pp
Functions that return a
.Vt ssize_t
will return a size on success, and -1 on error.
.Pp
The
.Fn tls_peer_ocsp_response_status
function returns one of
.Ar TLS_OCSP_RESPONSE_SUCCESSFUL ,
.Ar TLS_OCSP_RESPONSE_MALFORMED ,
.Ar TLS_OCSP_RESPONSE_INTERNALERROR ,
.Ar TLS_OCSP_RESPONSE_TRYLATER ,
.Ar TLS_OCSP_RESPONSE_SIGREQUIRED ,
or
.Ar TLS_OCSP_RESPONSE_UNAUTHORIZED
on success, and -1 on error.
.Pp
The
.Fn tls_peer_ocsp_cert_status
function returns one of
.Ar TLS_OCSP_CERT_GOOD ,
.Ar TLS_OCSP_CERT_REVOKED ,
or
.Ar TLS_OCSP_CERT_UNKNOWN
on success, and -1 on error.
.Pp
The
.Fn tls_peer_ocsp_crl_reason
function returns one of
.Ar TLS_CRL_REASON_UNSPECIFIED ,
.Ar TLS_CRL_REASON_KEY_COMPROMISE ,
.Ar TLS_CRL_REASON_CA_COMPROMISE ,
.Ar TLS_CRL_REASON_AFFILIATION_CHANGED ,
.Ar TLS_CRL_REASON_SUPERSEDED ,
.Ar TLS_CRL_REASON_CESSATION_OF_OPERATION ,
.Ar TLS_CRL_REASON_CERTIFICATE_HOLD ,
.Ar TLS_CRL_REASON_REMOVE_FROM_CRL ,
.Ar TLS_CRL_REASON_PRIVILEGE_WITHDRAWN ,
or
.Ar  TLS_CRL_REASON_AA_COMPROMISE
on success, and -1 on error.
.Pp
All other functions that return
.Vt int
will return 0 on success and -1 on error.
.Pp
Functions that return a pointer will return NULL on error or an
out of memory condition.
.Pp
The
.Fn tls_handshake ,
.Fn tls_read ,
.Fn tls_write ,
and
.Fn tls_close
functions have two special return values:
.Pp
.Bl -tag -width "TLS_WANT_POLLOUT" -offset indent -compact
.It Dv TLS_WANT_POLLIN
The underlying read file descriptor needs to be readable in order to continue.
.It Dv TLS_WANT_POLLOUT
The underlying write file descriptor needs to be writeable in order to continue.
.El
.Pp
In the case of blocking file descriptors, the same function call should be
repeated immediately.
In the case of non-blocking file descriptors, the same function call should be
repeated when the required condition has been met.
.Pp
Callers of these functions cannot rely on the value of the global
.Ar errno .
To prevent mishandling of error conditions,
.Fn tls_handshake ,
.Fn tls_read ,
.Fn tls_write ,
and
.Fn tls_close
all explicitly clear
.Ar errno .
.Sh EXAMPLES
The following example demonstrates how to handle TLS writes on a blocking
file descriptor:
.Bd -literal -offset indent
\&...
while (len > 0) {
	ssize_t ret;

	ret = tls_write(ctx, buf, len);
	if (ret == TLS_WANT_POLLIN || ret == TLS_WANT_POLLOUT)
		continue;
	if (ret < 0)
		err(1, "tls_write: %s", tls_error(ctx));
	buf += ret;
	len -= ret;
}
\&...
.Ed
.Pp
The following example demonstrates how to handle TLS writes on a
non-blocking file descriptor using
.Xr poll 2 :
.Bd -literal -offset indent
\&...
pfd[0].fd = fd;
pfd[0].events = POLLIN|POLLOUT;
while (len > 0) {
	nready = poll(pfd, 1, 0);
	if (nready == -1)
		err(1, "poll");
	if ((pfd[0].revents & (POLLERR|POLLNVAL)))
		errx(1, "bad fd %d", pfd[0].fd);
	if ((pfd[0].revents & (pfd[0].events|POLLHUP))) {
		ssize_t ret;

		ret = tls_write(ctx, buf, len);
		if (ret == TLS_WANT_POLLIN)
			pfd[0].events = POLLIN;
		else if (ret == TLS_WANT_POLLOUT)
			pfd[0].events = POLLOUT;
		else if (ret < 0)
			err(1, "tls_write: %s", tls_error(ctx));
		else {
			buf += ret;
			len -= ret;
		}
	}
}
\&...
.Ed
.Sh ERRORS
The
.Fn tls_config_error
and
.Fn tls_error
functions may be used to retrieve a string containing more information
about the most recent error relating to a configuration or context.
.\" .Sh SEE ALSO
.Sh HISTORY
The
.Nm tls
API first appeared in
.Ox 5.6
as a response to the unnecessary challenges other APIs present in
order to use them safely.
@


1.85
log
@Introduce ticket support. To enable them it is enough to set a positive
lifetime with tls_config_set_session_lifetime(). This enables tickets
and uses an internal automatic rekeying mode for the ticket keys.

If multiple processes are involved the following functions can be used to make
tickets work accross all instances:
- tls_config_set_session_id() sets the session identifier
- tls_config_add_ticket_key() adds an encryption and authentication key

For now only the last 4 keys added will be used (unless they are too old).
If tls_config_add_ticket_key() is used the caller must ensure to add new keys
regularly. It is best to do this 4 times per session lifetime (which is also
the ticket key lifetime).

Since tickets break PFS it is best to minimize the session lifetime according
to needs.

With a lot of help, input and OK beck@@, jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.84 2017/01/24 01:16:26 claudio Exp $
d386 1
a386 1
This function should only be used to synchronise ticket encryption key accross
@


1.84
log
@Add missing documentation for tls_config_set_verify_depth
Done together with jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.83 2017/01/24 00:28:31 claudio Exp $
d29 1
d46 2
d117 2
d151 4
d383 8
d466 10
@


1.83
log
@Shuffle the deck chairs to bring them back in order.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.82 2017/01/24 00:00:12 claudio Exp $
d449 4
@


1.82
log
@tls_config_add_keypair_mem is the function to add additional keypairs and
ocsp_staple functions set the OCSP response they don't add them (which implies
you can call them multiple times).
Discussed with jsing@@ beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.81 2016/11/11 14:02:24 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: November 11 2016 $
a373 8
.Fn tls_config_set_ocsp_staple_mem
sets a DER-encoded OCSP response to be stapled during the TLS handshake from
memory.
.It
.Fn tls_config_set_ocsp_staple_file
sets a DER-encoded OCSP response to be stapled during the TLS handshake from
the specified file.
.It
d423 8
@


1.81
log
@Change the return value of tls_config_set_protocols() and
tls_config_set_verify_depth() from void to int. This makes them consistent
with all other tls_config_set_* functions and will allow for call time
validation to be implemented.

Rides libtls major bump.

ok beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.80 2016/11/05 18:30:02 bcook Exp $
d17 1
a17 1
.Dd $Mdocdate: November 5 2016 $
d370 1
a370 1
.Fn tls_config_set_keypair_mem
d375 1
a375 1
adds a DER-encoded OCSP response to be stapled during the TLS handshake from
d379 1
a379 1
adds a DER-encoded OCSP response to be stapled during the TLS handshake from
@


1.80
log
@fix misplaced quote by tls_peer_ocsp_this_update
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.79 2016/11/05 15:45:41 jmc Exp $
d143 1
a143 1
.Ft "void"
d145 1
a145 1
.Ft "void"
@


1.79
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.78 2016/11/05 15:13:26 beck Exp $
d196 1
a196 1
.Fn tls_peer_ocsp_this_update" struct tls *ctx"
@


1.78
log
@Add support for server side OCSP stapling to libtls.
Add support for server side OCSP stapling to netcat.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.77 2016/11/04 05:13:13 beck Exp $
d17 1
a17 1
.Dd $Mdocdate: November 4 2016 $
d142 1
a142 1
.Fn tls_config_set_ocsp_staple_file "struct tls_config *config" "const char *staple_file
d375 2
a376 2
adds a DER encoded OCSP response to be stapled during the TLS handshake from 
memory. 
d379 2
a380 2
adds a DER encoded OCSP response to be stapled during the TLS handshake from 
the specified file.  
@


1.77
log
@Add ocsp_require_stapling config option for tls - allows a connection
to indicate that it requires the peer to provide a stapled OCSP response
with the handshake.  Provide a "-T muststaple" for nc that uses it.
ok jsing@@, guenther@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.76 2016/11/03 12:54:16 beck Exp $
d17 1
a17 1
.Dd $Mdocdate: November 3 2016 $
d42 2
d139 4
d373 8
@


1.76
log
@Don't do OCSP validation when we have disabled certificate verification
or certificate validation.
ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.75 2016/11/02 18:26:14 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: November 2 2016 $
d50 1
d154 2
d461 3
@


1.75
log
@bit more cleanup;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.74 2016/11/02 17:32:42 jmc Exp $
d448 1
a448 1
disables certificate verification.
d456 1
a456 1
disables validity checking of certificates.
@


1.74
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.73 2016/11/02 15:18:42 beck Exp $
a52 1
.Nm tls_ocsp_process_response ,
d60 1
d563 1
a563 1
.Fn tls_ocsp_process_response
d567 1
a567 1
returns the OCSP certificate status code as per RFC 6960 section 2.2
d571 1
a571 1
section 5.3.1
d574 1
a574 1
returns the OCSP next update time
d577 1
a577 1
returns the OCSP response status as per RFC 6960 section 2.3
d580 1
a580 1
returns the OCSP revocation time
d583 1
a583 1
returns the OCSP this update time
@


1.73
log
@Add OCSP client side support to libtls.
   - Provide access to certificate OCSP URL
   - Provide ability to check a raw OCSP reply against an
     established TLS ctx
   - Check and validate OCSP stapling info in the TLS handshake
     if a stapled OCSP response is provided.`

Add example code to show OCSP URL and stapled info
into netcat.

ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.72 2016/09/13 13:40:58 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: September 13 2016 $
d53 1
a53 1
.Nm tls_ocsp_process_response,
d61 8
a68 8
.Nm tls_peer_ocsp_cert_status,
.Nm tls_peer_ocsp_crl_reason,
.Nm tls_peer_ocsp_next_update,
.Nm tls_peer_ocsp_response_status,
.Nm tls_peer_ocsp_result_msg,
.Nm tls_peer_ocsp_revocation_time,
.Nm tls_peer_ocsp_this_update,
.Nm tls_peer_ocsp_url,
a542 1
.Ed
d545 1
a545 1
processes a raw ocsp response in 
d551 2
a552 2
A successful return code of 0 indicates that the certificate has not been revoked. 
.Ed
d559 1
a559 1
The following functions return informaiton about the peer certificate from 
d561 3
a563 3
tha was obtained by validating a stapled OCSP response during the handshake, or
via a previous call to
.Xr tls_ocsp_process_response
d567 1
a567 2
returns the OCSP certificate status code as per RFC 6960 section 2.2 
.Ed
a571 1
.Ed
a574 1
.Ed
a577 1
.Ed
a580 1
.Ed
d696 1
a696 1
The 
d698 1
a698 1
function returns one of 
d705 1
a705 1
.AR TLS_OCSP_RESPONSE_UNAUTHORIZED
d708 1
a708 1
The 
d713 1
a713 1
or 
d717 1
a717 1
The 
d722 1
a722 1
.Ar TLS_CRL_REASON_CA_COMPROMISE , 
d729 1
a729 1
or 
@


1.72
log
@add a little more typing to the first callback argument.
it's always a tls context.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.71 2016/09/04 16:37:18 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 4 2016 $
d53 1
d61 8
d172 18
d543 47
d693 1
d697 1
d701 38
d742 2
a743 1
Functions that return a pointer will return NULL on error, which indicates an
@


1.71
log
@minor tweaks;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.70 2016/09/04 12:48:50 jsing Exp $
d192 1
a192 1
.Fn tls_connect_cbs "struct tls *ctx" "ssize_t (*tls_read_cb)(void *ctx, void *buf, size_t buflen, void *cb_arg)" "ssize_t (*tls_write_cb)(void *ctx, const void *buf, size_t buflen, void *cb_arg)" "void *cb_arg" "const char *servername"
d198 1
a198 1
.Fn tls_accept_cbs "struct tls *ctx" "struct tls **cctx" "ssize_t (*tls_read_cb)(void *ctx, void *buf, size_t buflen, void *cb_arg)" "ssize_t (*tls_write_cb)(void *ctx, const void *buf, size_t buflen, void *cb_arg)" "void *cb_arg"
@


1.70
log
@New sentence, new line. Also wrap at 80 chars.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.69 2016/09/04 12:26:43 bcook Exp $
d258 3
a260 3
allows specifying read and write callback functions to handle data transfer.
The specified cb_arg parameter is passed back to the functions, and can contain
a pointer to any caller-specified data.
d270 3
a272 3
allows specifying read and write callback functions to handle data transfer.
The specified cb_arg parameter is passed back to the functions, and can contain
a pointer to any caller-specified data.
@


1.69
log
@Add callback-based interface to libtls.

This allows working with buffers and callback functions instead of directly on
sockets or file descriptors.
Original patch from Tobias Pape <tobias_at_netshed.de>.
ok beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.68 2016/09/04 12:03:24 jsing Exp $
d258 3
a260 1
allows specifying read and write callback functions to handle data transfer. The specified cb_arg parameter is passed back to the functions, and can contain a pointer to any caller-specified data.
d270 3
a272 1
allows specifying read and write callback functions to handle data transfer. The specified cb_arg parameter is passed back to the functions, and can contain a pointer to any caller-specified data.
@


1.68
log
@State that libtls functions apply to both clients and servers, unless
noted otherwise. Remove all of the now redundant "client and server"
notations and change the client and server notations to "client only"
and "server only".

With input from jmc@@.

ok beck@@ jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.67 2016/08/22 14:55:59 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: August 22 2016 $
d74 1
d77 1
d192 2
d198 2
d256 3
d266 3
@


1.67
log
@Provide an API that enables server side SNI support - add the ability to
provide additional keypairs (via tls_config_add_keypair_{file,mem}()) and
allow the server to determine what servername the client requested (via
tls_conn_servername()).

ok beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.66 2016/08/18 15:43:12 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: August 18 2016 $
d310 2
a311 1
configuration options may only apply to clients, to servers or to both):
d316 1
a316 2
used as an alternative certificate for Server Name Indication.
.Em (Server)
d320 1
a320 2
used as an alternative certificate for Server Name Indication.
.Em (Server)
a324 1
.Em (Client and Server)
a328 1
.Em (Client and Server)
a332 1
.Em (Client and Server)
a335 1
.Em (Client and Server)
a338 1
.Em (Client and server)
a341 1
.Em (Client and server)
a358 2
.Pp
.Em (Client and server)
a361 1
.Em (Client and server)
a364 1
.Em (Client and server)
a367 1
.Em (Client and server)
a370 1
.Em (Client and server)
a388 1
.Em (Client and server)
d391 2
a392 1
prefers ciphers in the client's cipher list when selecting a cipher suite.
a393 1
.Em (Server)
d396 2
a397 1
prefers ciphers in the server's cipher list when selecting a cipher suite.
a399 1
.Em (Server)
a402 1
.Em (Server)
a406 1
.Em (Client and server)
d409 1
a409 1
disables server name verification.
a410 1
.Em (Client)
a414 1
.Em (Client and server)
a417 1
.Em (Client)
d421 1
a421 2
a certificate.
.Em (Server)
d425 1
a425 2
to send a certificate.
.Em (Server)
d429 2
a430 2
succeed after the handshake is complete (the connection information may only
apply to clients, to servers or to both):
a437 1
.Em (Server and Client)
a442 1
.Em (Server and client)
d447 1
a447 2
requested by sending a TLS Server Name Indication extension.
.Em (Server)
a457 1
.Em (Server and client)
a464 1
.Em (Server and client)
a469 1
.Em (Server and client)
a474 1
.Em (Server and client)
a494 1
.Em (Server and client)
a499 1
.Em (Server and client)
a513 1
.Em (Client and server)
@


1.66
log
@Rework parts of the libtls man page for clarity. Split out the connection
information related functions under their own heading and dedup the text
relating to when these functions can be called.

With input from and ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.65 2016/08/12 15:10:59 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: August 12 2016 $
d27 2
d62 1
d96 4
d166 2
d313 10
d466 6
@


1.65
log
@Add ALPN support to libtls.

ok beck@@ doug@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.64 2016/08/02 07:47:11 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: August 2 2016 $
d274 1
a274 1
The following functions create and free configuration objects.
d300 2
a301 2
The following functions modify a configuration by setting parameters.
Configuration options may apply to only clients or only servers or both.
d428 24
a456 2
.Fn tls_peer_cert_provided
can only succeed after the handshake is complete.
a464 2
.Fn tls_peer_cert_contains_name
can only succeed after the handshake is complete.
a470 2
.Fn tls_peer_cert_subject
will only succeed after the handshake is complete.
a476 2
.Fn tls_peer_cert_issuer
will only succeed after the handshake is complete.
a497 2
.Fn tls_peer_cert_notbefore
will only succeed after the handshake is complete.
a503 2
.Fn tls_peer_cert_notafter
will only succeed after the handshake is complete.
d505 4
a508 26
.It
.Fn tls_conn_alpn_selected
returns a string that specifies the ALPN protocol selected for use with the peer
connected to
.Ar ctx .
If no protocol was selected then NULL is returned.
.Fn tls_conn_alpn_selected
will only succeed after the handshake is complete.
.Em (Server and Client)
.It
.Fn tls_conn_cipher
returns a string
corresponding to the cipher suite negotiated with the peer
connected to
.Ar ctx .
.Fn tls_conn_cipher
will only succeed after the handshake is complete.
.Em (Server and client)
.It
.Fn tls_conn_version
returns a string
corresponding to a TLS version negotiated with the peer
connected to
.Ar ctx .
.Fn tls_conn_version
will only succeed after the handshake is complete.
d522 1
a522 1
The following functions create, prepare, and free a connection context.
d540 1
a540 1
operations.
@


1.64
log
@Revert previous since it adds new symbols.

Requested by deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.63 2016/08/01 17:32:19 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: August 1 2016 $
d27 1
d58 2
a60 1
.Nm tls_conn_cipher ,
d93 2
d155 1
a155 1
.Fn tls_conn_version "struct tls *ctx"
d158 2
d304 5
d494 2
a495 3
.Fn tls_conn_version
returns a string
corresponding to a TLS version negotiated with the peer
d498 2
a499 1
.Fn tls_conn_version
d501 1
d511 8
@


1.63
log
@Add ALPN support to libtls.

ok beck@@ doug@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.62 2016/07/13 16:30:48 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: July 13 2016 $
a26 1
.Nm tls_config_set_alpn ,
d57 1
a57 1
.Nm tls_conn_alpn_selected ,
a58 1
.Nm tls_conn_version ,
a90 2
.Fn tls_config_set_alpn "struct tls_config *config" "const char *alpn"
.Ft "int"
d151 1
a151 1
.Fn tls_conn_alpn_selected "struct tls *ctx"
a153 2
.Ft "const char *"
.Fn tls_conn_version "struct tls *ctx"
a297 5
.Fn tls_config_set_alpn
sets the ALPN protocols that are supported.
The alpn string is a comma separated list of protocols, in order of preference.
.Em (Client and Server)
.It
d483 3
a485 2
.Fn tls_conn_alpn_selected
returns a string that specifies the ALPN protocol selected for use with the peer
d488 1
a488 2
If no protocol was selected then NULL is returned.
.Fn tls_conn_alpn_selected
a489 1
.Em (Server and Client)
a498 8
.It
.Fn tls_conn_version
returns a string
corresponding to a TLS version negotiated with the peer
connected to
.Ar ctx .
.Fn tls_conn_version
will only succeed after the handshake is complete.
@


1.62
log
@Split the existing TLS cipher suite groups into four:

"secure" (TLSv1.2+AEAD+PFS)
"compat" (HIGH:!aNULL)
"legacy" (HIGH:MEDIUM:!aNULL)
"insecure" (ALL:!aNULL:!eNULL)

This allows for flexibility and finer grained control, rather than having
two extremes (an issue raised by Marko Kreen some time ago).

ok beck@@ tedu@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.61 2016/05/27 11:25:57 sthen Exp $
d17 1
a17 1
.Dd $Mdocdate: May 27 2016 $
d27 1
d58 2
a60 1
.Nm tls_conn_cipher ,
d93 2
d155 1
a155 1
.Fn tls_conn_version "struct tls *ctx"
d158 2
d304 5
d494 2
a495 3
.Fn tls_conn_version
returns a string
corresponding to a TLS version negotiated with the peer
d498 2
a499 1
.Fn tls_conn_version
d501 1
d511 8
@


1.61
log
@typo fixes; Anthony Coulter
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.60 2016/05/09 13:48:57 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: May 9 2016 $
d325 3
a327 3
.Bl -tag -width "default" -offset indent -compact
.It Dv "secure"
.It Dv "default" (an alias for secure)
d329 1
a329 1
.It Dv "compat" (an alias for legacy)
d331 5
@


1.60
log
@Fix mangled function signatures.

From Carlin Bingham <cb at viennan dot net>, thanks!
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.59 2016/04/28 18:27:51 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 28 2016 $
d424 1
a424 1
has povided a certificate that contains a
@


1.59
log
@spelling fix;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.58 2016/04/28 17:05:59 jsing Exp $
d81 3
a83 1
.Fn tls_config_error "struct tls *config"
a84 2
.Fn tls_error "struct tls *ctx"
.Ft "const char *"
@


1.58
log
@Factor our the keypair handling in libtls. This results in more readable
and self-contained code, while preparing for the ability to handle
multiple keypairs. Also provide two additional functions that allow
a public certificate and private key to be set with a single function
call.

ok beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.57 2016/04/28 16:48:44 jsing Exp $
d347 1
a347 1
directly sets the public certifcate and private key from memory.
@


1.57
log
@Rework the error handling in libtls so that we can associate errors with
both configuration and contexts. This allows us to propagate errors that
occur during configuration, rather than either just failing with no reason
or delaying the failure until it can be propagated via the tls context.

Also provide a tls_config_error() function for retrieving the last error
from a tls_config *.

ok bcook@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.56 2016/04/24 12:16:36 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 24 2016 $
d37 2
d110 4
d336 1
a336 1
.Em (Server)
d340 9
a348 1
.Em (Server)
@


1.56
log
@no more outlen; from remco
ok bcook deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.55 2016/04/24 07:02:07 jmc Exp $
d22 1
d79 2
d82 1
a82 1
.Ft "struct tls_config *"
d674 2
d677 2
a678 2
function may be used to retrieve a string containing more information
about the most recent error.
@


1.55
log
@typos;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.54 2015/11/09 17:52:07 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: November 9 2015 $
d553 1
a553 2
The amount of data read is returned in
.Fa outlen .
d561 1
a561 2
The amount of data written is returned in
.Fa outlen .
@


1.54
log
@update some client/server info; from jan klemkow
ok jsing
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.53 2015/10/16 13:49:53 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: October 16 2015 $
d471 1
a471 1
corresponding to a the cipher suite negotated with the peer
@


1.53
log
@Put tls_config_verify_client_optional() in the right place.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.52 2015/10/16 13:48:44 jsing Exp $
d292 1
a292 1
.Em (Client)
d297 1
a297 1
.Em (Client)
d301 1
a301 1
.Em (Client)
@


1.52
log
@Fix tpyo.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.51 2015/10/08 07:22:02 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 8 2015 $
d391 5
a476 5
.It
.Fn tls_config_verify_client_optional
enables client certificate verification, without requiring the client
to send a certificate.
.Em (Server)
@


1.51
log
@trailing whitespace;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.50 2015/10/07 23:33:38 beck Exp $
d17 1
a17 1
.Dd $Mdocdate: October 7 2015 $
d473 1
a473 1
.Fn tls_config_verify_client_opional
@


1.50
log
@Add tls_peer_cert_notbefore and tls_peer_cert_notafter to expose peer certificate
validity times for tls connections.
ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.49 2015/09/14 21:23:00 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 14 2015 $
d442 1
a442 1
the peer certificate from 
d450 1
a450 1
the peer certificate from 
d581 1
a581 1
will return a time in epoch-seconds on success, and -1 on error. 
d584 1
a584 1
will return a size on success, and -1 on error. 
@


1.49
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.48 2015/09/14 16:16:38 jsing Exp $
d52 2
d137 4
d440 16
d579 6
a586 2
or
.Vt ssize_t
@


1.48
log
@Provide tls_config_insecure_noverifytime() in order to be able to disable
certificate validity checking.

ok beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.47 2015/09/14 15:14:55 schwarze Exp $
d372 1
a372 1
disables validity checking of certificate.
@


1.47
log
@Remove useless quoting from .Fo and .Fn function names, to prevent
development of a cargo cult in case people look at existing files
for examples.  This achieves a consistent .Fo and .Fn quoting style
across the whole tree.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.46 2015/09/14 14:29:30 jmc Exp $
d43 1
d118 2
d370 5
@


1.46
log
@some conn_version and conn_cipher bits;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.45 2015/09/14 12:05:33 schwarze Exp $
d91 1
a91 1
.Fn tls_config_set_cert_mem  "struct tls_config *config" "const uint8_t *cert" "size_t len"
d598 1
a598 1
        if (ret < 0)
d633 1
a633 1
        }
@


1.45
log
@add missing function return types
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.44 2015/09/13 10:32:46 beck Exp $
d17 1
a17 1
.Dd $Mdocdate: September 13 2015 $
d51 2
a424 1
.Pp
d429 2
a430 3
connected to 
.Ar ctx
.It
d437 2
a438 3
connected to 
.Ar ctx
.It
@


1.44
log
@add visibility of ciper and connection version strings
ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.43 2015/09/12 21:00:38 beck Exp $
d17 1
a17 1
.Dd $Mdocdate: September 12 2015 $
d150 1
@


1.43
log
@Move connection info into it's own private structure allocated and filled in
at handshake time. change accessors to return const char * to remove need
for caller to free memory.
ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.42 2015/09/11 14:22:53 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 11 2015 $
d130 4
d423 17
a439 1
.Fn tls_peer_cert_subject
@


1.42
log
@more for NAME;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.41 2015/09/11 14:20:14 jmc Exp $
d124 6
a129 6
.Ft "int"
.Fn tls_peer_cert_issuer "struct tls *ctx" "char **issuer"
.Ft "int"
.Fn tls_peer_cert_subject "struct tls *ctx" "char **subject"
.Ft "int"
.Fn tls_peer_cert_hash "struct tls *ctx" "char **hash"
d389 1
a389 2
returns a string in
.Ar subject
a393 2
Callers must free the string returned in
.Ar subject .
d397 1
a397 2
returns a string in
.Ar subject
a401 2
Callers must free the string returned in
.Ar issuer .
a405 2
in
.Ar hash
a420 2
Callers must free the string returned in
.Ar hash .
@


1.41
log
@more cleanup;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.40 2015/09/11 14:15:19 jmc Exp $
d48 3
@


1.40
log
@update NAME; various cleanup
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.39 2015/09/11 13:59:20 beck Exp $
d121 1
a121 1
.Ft "int
d372 1
a372 1
can only succeed after the handshake is complete. 
d382 1
a382 1
can only succeed after the handshake is complete. 
d391 2
a392 2
will only succeed after the handshake is complete. 
Callers must free the string returned in 
d397 1
a397 1
returns a string in 
d402 2
a403 2
will only succeed after the handshake is complete. 
Callers must free the string returned in 
d413 4
a416 4
prefixed by a hash name followed by a colon. 
The hash currently used is SHA256, however this
can change in the future. The hash string for a certificate
in file
d425 2
a426 2
will only succeed after the handshake is complete. 
Callers must free the string returned in 
a591 1
.Bd -literal -offset indent
@


1.39
log
@document tls_get_peer_subject, tls_get_peer_issuer, and tls_get_peer_hash
ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.38 2015/09/11 12:56:55 beck Exp $
d46 2
d177 1
a177 3
A
.Em tls
connection is represented as a
d224 1
a224 1
After use, a tls
d295 1
a295 1
permitted names are: 
d300 1
a300 1
.It Dv "legacy" 
d368 2
a369 2
checks if the peer of 
.Ar ctx 
d375 2
a376 2
.Fn tls_peer_cert_constains_name
checks if the peer of a tls 
d378 1
a378 1
 has povided a certificate that contains a 
d380 1
a380 1
.Ar name
d451 1
a451 1
creates a new tls context for client connections.
d454 1
a454 1
creates a new tls context for server connections.
d457 1
a457 1
readies a tls context for use by applying the configuration
d461 1
a461 1
frees a tls context after use.
d531 1
a531 1
The 
d534 2
a535 2
.Fn tls_peer_cert_contain_name
functions return 1 if the check succeeds, and 0 if it does not. 
@


1.38
log
@add tls_peer functions for checking names and issuers of peer certificates.
ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.37 2015/09/11 09:02:10 beck Exp $
d119 6
d372 1
a372 1
will only succeed after the handshake is complete. 
d382 20
d403 25
d592 1
@


1.37
log
@specify what is permitted as an argument to tls_config_set_ciphers()
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.36 2015/09/11 07:09:05 jmc Exp $
d115 4
d361 18
d480 6
a485 1
Functions that return
@


1.36
log
@- add some missing NAME entries
- zap trailing whitespace
- avoid "can not"
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.35 2015/09/10 16:59:00 deraadt Exp $
d17 1
a17 1
.Dd $Mdocdate: September 10 2015 $
d284 10
@


1.35
log
@improve examples,
1. hoist pollfd fields which don't change upwards
2. show ret as ssize_t, it MUST BE, or there will be lots of crying
3. on first pass, must check for either POLLIN|POLLOUT
ok millert beck
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.34 2015/09/10 15:47:25 beck Exp $
d44 2
d331 1
a331 1
.Em (Client and server) 
d450 2
a451 2
or 
.Vt ssize_t 
d476 1
a476 1
Callers of these functions can not rely on the value of the global
@


1.34
log
@document client side certificate verification functionality.
ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.33 2015/09/10 14:57:29 beck Exp $
d490 2
d505 1
a505 1
.Xr poll 2
d508 2
a509 1
pevent = POLLOUT;
a510 2
	pfd[0].fd = fd;
	pfd[0].events = pevent;
d516 3
a518 1
	if ((pfd[0].revents & (pevent|POLLHUP))) {
d521 1
a521 1
			pevent = POLLIN;
d523 1
a523 1
			pevent = POLLOUT;
@


1.33
log
@document changed tls_read and tls_write semantics.
document functions that clear errno.
change examples to provide demonstration of both the blocking and
 non-blocking cases.
ok jsing@@, bluhm@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.32 2015/09/10 14:17:22 jmc Exp $
d109 4
d329 1
a329 1
.Em (Client)
d339 10
@


1.32
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.31 2015/09/10 13:29:53 jsing Exp $
d134 4
a137 4
.Ft "int"
.Fn tls_read "struct tls *ctx" "void *buf" "size_t buflen" "size_t *outlen"
.Ft "int"
.Fn tls_write "struct tls *ctx" "const void *buf" "size_t buflen" "size_t *outlen"
d434 2
d459 11
d471 19
a489 1
Example showing how to handle TLS writes.
d492 1
d494 20
a513 9
	ret = tls_write(ctx, buf, len, &num_written);
	if (ret == TLS_WANT_POLLIN || ret == TLS_WANT_POLLOUT) {
		/* Retry - use select to wait for non-blocking. */
	} else if (ret < 0) {
		return -1;
	} else {
		buf += num_written;
		len -= num_written;
	}
@


1.31
log
@Correctly document the behaviour of tls_close() - the caller is responsible
for closing the file descriptors unless libtls allocated them.

ok beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.30 2015/09/10 13:23:57 jsing Exp $
d399 1
a399 1
It is only neccessary to call this function if you need to guarantee that the
d425 1
a425 1
Only the TLS layer will be shutdown and the caller is responsible for closing
@


1.30
log
@Replace TLS_{READ,WRITE}_AGAIN with TLS_WANT_POLL{IN,OUT} and correctly
document the calling requirements.

ok beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.29 2015/09/10 11:21:08 jsing Exp $
d425 5
a429 4
If the connection was established using
.Fn tls_connect_fds ,
only the TLS layer will be closed and it is the caller's responsibility to close
the file descriptors.
@


1.29
log
@Update libtls man page to reflect tls_handshake() related changes.

ok beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.28 2015/09/10 11:00:54 beck Exp $
d445 5
a449 5
.Bl -tag -width "TLS_WRITE_AGAIN" -offset indent -compact
.It Dv TLS_READ_AGAIN
A read operation is necessary to continue.
.It Dv TLS_WRITE_AGAIN
A write operation is necessary to continue.
d452 4
a455 10
There are underlying TLS engine read or write operations which may
not correspond with the name of the function called.
For example, it is possible to receive a
.Dv TLS_READ_AGAIN
even when calling
.Fn tls_write .
.Pp
While there are cases where these functions will return one or the
other or both, the best practice is to always check for both.
In all cases the same function call should be repeated.
d457 1
a457 1
Example showing how to handle partial TLS writes.
d462 2
a463 3

	if (ret == TLS_READ_AGAIN || ret == TLS_WRITE_AGAIN) {
		/* retry.  May use select to wait for nonblocking */
@


1.28
log
@revert accidental commit
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.26 2015/09/10 09:10:42 jsing Exp $
a48 1
.Nm tls_close ,
d56 1
d58 2
a59 1
.Nm tls_write
a118 2
.Ft "int"
.Fn tls_close "struct tls *ctx"
d133 2
d138 2
d199 2
d205 2
a360 7
.Fn tls_close
closes a connection after use.
If the connection was established using
.Fn tls_connect_fds ,
only the TLS layer will be closed and it is the caller's responsibility to close
the file descriptors.
.It
d388 1
a388 4
.Fa ctx
and
.Fa *cctx
should be initialized to NULL.
d395 7
a401 1
.Fa ctx
d403 2
a404 2
.Fa *cctx
should be initialized to NULL.
d422 7
d434 2
a435 1
Functions that return a pointer will return NULL on error.
d438 3
a440 2
.Fn tls_close ,
.Fn tls_read
d442 2
a443 6
.Fn tls_write
functions, along with the
.Fn tls_accept
and
.Fn tls_connect
function families, have two special return values:
d461 1
a461 7
The caller should call the appropriate function or, in the case of the
.Fn tls_close
and the
.Fn tls_accept
and
.Fn tls_connect
function families, repeat the call.
@


1.27
log
@comment for errno clobbering, to indicate why we do this.
ok deraadt@@ jsing@@
@
text
@d438 1
a438 1
.It Dv TLS_WANT_POLLIN
d440 1
a440 1
.It Dv TLS_WANT_POLLOUT
d447 1
a447 1
.Dv TLS_WANT_POLLIN
@


1.26
log
@Add support for preferring the server's cipher list or the client's cipher
list. Prefer the server's cipher list by default.

Based on a diff from Kyle Thompson <jmp at giga dot moe>.

ok beck@@ bcook@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.25 2015/07/19 17:10:23 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 19 2015 $
d438 1
a438 1
.It Dv TLS_READ_AGAIN
d440 1
a440 1
.It Dv TLS_WRITE_AGAIN
d447 1
a447 1
.Dv TLS_READ_AGAIN
@


1.25
log
@tweak previous; ok doug
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.24 2015/07/19 05:49:27 doug Exp $
d38 2
d97 4
d299 11
@


1.24
log
@Add documentation on how to use TLS_{READ,WRITE}_AGAIN.

ok beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.23 2015/04/03 22:33:43 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 3 2015 $
d427 3
a429 3
These are underlying TLS engine read or write operations which may
not correspond with the name of the function you call.
For example, you may receive a
@


1.23
log
@comma fix;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.22 2015/04/02 13:19:15 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: April 2 2015 $
d427 9
d443 18
@


1.22
log
@Handle the case where multiple calls to SSL_shutdown() are required to
close the connection. Also correctly handle the error on failure.

Diff from cookieandscream via github.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.21 2015/04/02 05:54:22 jsing Exp $
d427 1
a427 1
The caller should call the appropriate function, or in the case of the
@


1.21
log
@Correct man page title.

Diff from Tim van der Molen.

ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.20 2015/04/02 05:53:08 jsing Exp $
d410 1
d428 2
d431 1
a431 1
or
@


1.20
log
@Document the fact that the tls_accept_*() functions can return
TLS_READ_AGAIN and TLS_WRITE_AGAIN.

Based on a diff from Tim van der Molen.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.19 2015/03/31 14:03:38 jsing Exp $
d17 2
a18 2
.Dd $Mdocdate: March 31 2015 $
.Dt TLS 3
@


1.19
log
@Provide a tls_accept_fds() function, which allows a TLS connection to be
accepted via an existing pair of file descriptors.

Based on a diff from Jan Klemkow.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.18 2015/02/22 15:09:54 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: February 22 2015 $
d413 3
a415 1
functions and the
d417 1
a417 1
family of functions have two special return values.
d426 5
a430 3
The caller should call the appropriate function, or in the case of
.Fn tls_connect ,
repeat the call.
@


1.18
log
@Rename tls_config_insecure_noverifyhost() to
tls_config_insecure_noverifyname(), so that it is more accurate and keeps
inline with the distinction between DNS hostname and server name.

Requested by tedu@@ during s2k15.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.17 2015/02/21 21:41:00 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: February 21 2015 $
d53 1
d124 2
d186 3
d365 10
@


1.17
log
@explain how tls_accept_socket works.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.16 2015/02/21 19:58:39 tedu Exp $
a38 1
.Nm tls_config_insecure_noverifyhost ,
d40 1
d96 1
a96 1
.Fn tls_config_insecure_noverifyhost "struct tls_config *config"
d98 1
a98 1
.Fn tls_config_insecure_noverifycert "struct tls_config *config"
a291 5
.Fn tls_config_insecure_noverifyhost
disables hostname verification.
Be careful when using this option.
.Em (Client)
.It
d297 5
d303 1
a303 1
reenables hostname and certificate verification.
@


1.16
log
@tls_config_set_protocols is really void. Greg Martin.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.15 2015/02/21 19:54:59 tedu Exp $
d361 8
a368 1
accepts a client context on an already established socket connection.
@


1.15
log
@fill out docs a bit more, notably the read/write again behaviors.
ok jsing
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.14 2015/02/15 13:36:06 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: February 15 2015 $
d89 1
a89 1
.Ft "int"
d91 1
a91 1
.Ft "int"
@


1.14
log
@s/tls_load_keys/tls_load_file/
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.13 2015/02/15 13:33:14 jsing Exp $
d138 1
d385 24
a408 1
.\" .Sh ERRORS
@


1.13
log
@Document tls_config_parse_protocols() and update documentation for
tls_config_set_protocols().
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.12 2015/02/11 07:01:10 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: February 11 2015 $
d305 1
a305 1
.Fn tls_load_keys
@


1.12
log
@Provide a tls_connect_servername() function that has the same behaviour
as tls_connect(), however allows the name to use for verification to be
explicitly provided, rather than being inferred from the host value.

Requested by reyk@@

ok reyk@@ tedu@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.11 2015/02/11 06:46:33 jsing Exp $
d25 1
d68 2
d214 16
d280 3
a282 1
(all TLS versions) and
d284 1
a284 1
(currently all TLS versions) may be used.
@


1.11
log
@Be consistent with naming - only use "host" and "hostname" when referring
to an actual host and use "servername" when referring to the name of the
TLS server that we expect to be indentified in the server certificate.

Likewise, rename verify_host to verify_name and use the term "name"
throughout the verification code (rather than host or hostname).

Requested by and ok tedu@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.10 2015/02/07 23:45:06 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: February 7 2015 $
d50 1
d116 1
d164 6
@


1.10
log
@Add manpage bits for tls_load_file() and tls_accept_socket().

The tls_accept_socket() has been previously removed because the API is
not fixed yet; but it is also already used by httpd(8) and spamd(8) so
it is time to add it again and eventually change it later.

OK tedu@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.9 2015/02/07 06:19:26 jsing Exp $
d114 1
a114 1
.Fn tls_connect_fds "struct tls *ctx" "int fd_read" "int fd_write" "const char *hostname"
d116 1
a116 1
.Fn tls_connect_socket "struct tls *ctx" "int s" "const char *hostname"
@


1.9
log
@Add tls_config_set_dheparams() to allow specification of the parameters to
use for DHE. This enables the use of DHE cipher suites.

Rename tls_config_set_ecdhcurve() to tls_config_set_ecdhecurve() since it
is only used to specify the curve for ephemeral ECDH.

Discussed with reyk@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.8 2015/01/22 11:08:54 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: January 22 2015 $
d41 1
d51 1
d97 2
d118 2
d168 4
d275 11
d329 3
@


1.8
log
@last entry in NAME should not have a trailing comma;
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.7 2015/01/22 09:16:24 reyk Exp $
d31 2
a32 1
.Nm tls_config_set_ecdhcurve ,
d76 3
a78 1
.Fn tls_config_set_ecdhcurve "struct tls_config *config" "const char *name"
@


1.7
log
@Allow to to load the CA chain directly from memory instead of
specifying a file.  This enables CA verification in privsep'ed
processes that are running chroot'ed without direct access to the
certificate files.

With feedback, tests, and OK from bluhm@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.6 2015/01/01 13:30:52 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: January 1 2015 $
d50 1
a50 1
.Nm tls_write ,
@


1.6
log
@Revert previous; tls_accept_socket() was intentionally undocumented
because the API design isn't fully settled.
Requested by jsing@@ and tedu@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.5 2015/01/01 08:42:08 schwarze Exp $
d27 1
d67 2
d202 4
@


1.5
log
@minimally document tls_accept_socket();
patch from Sunil at Nimmagadda dot net
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.4 2014/11/11 04:17:34 deraadt Exp $
d17 1
a17 1
.Dd $Mdocdate: November 11 2014 $
a47 1
.Nm tls_accept_socket ,
a107 2
.Fn tls_accept_socket "struct tls *ctx" "struct tls **ctx" "int s"
.Ft "int"
a297 3
.It
.Fn tls_accept_socket
accepts a client context on an already established socket connection.
@


1.4
log
@delete extra word in Nd
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.3 2014/11/07 13:57:43 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: November 7 2014 $
d48 1
d109 2
d301 3
@


1.3
log
@missing outlen in tls_write decl
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.2 2014/11/02 14:45:05 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: November 2 2014 $
d50 1
a50 1
.Nd tls TLS client and server API
@


1.2
log
@Add a tls_connect_fds() function that allows a secure connection to be
established using a pair of existing file descriptors.

Based on a diff/request from Jan Klemkow.

Rides previous libtls rename/library bump.

Discussed with tedu@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.1 2014/10/31 13:46:17 jsing Exp $
d17 1
a17 1
.Dd $Mdocdate: October 31 2014 $
d110 1
a110 1
.Fn tls_write "struct tls *ctx" "const void *buf" "size_t buflen"
@


1.1
log
@Rename libressl to libtls to avoid confusion and to make it easier to
distinguish between LibreSSL (the project) and libressl (the library).

Discussed with many.
@
text
@d1 1
a1 1
.\" $OpenBSD: tls_init.3,v 1.9 2014/10/16 12:46:35 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: October 16 2014 $
d46 1
d104 2
d152 3
d272 4
d292 3
@

