head	1.47;
access;
symbols
	OPENBSD_6_1_BASE:1.47
	OPENBSD_6_0:1.29.0.2
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11;
locks; strict;
comment	@ * @;


1.47
date	2017.01.31.16.18.57;	author beck;	state Exp;
branches;
next	1.46;
commitid	xEmNr0q3vZFvI7yp;

1.46
date	2017.01.26.12.53.17;	author jsing;	state Exp;
branches;
next	1.45;
commitid	MMVygXr6aYupscvE;

1.45
date	2017.01.24.01.48.05;	author claudio;	state Exp;
branches;
next	1.44;
commitid	k0nZBOjpyTl9Tz16;

1.44
date	2017.01.22.03.59.30;	author jsing;	state Exp;
branches;
next	1.43;
commitid	H0udvjbD8evKx0o8;

1.43
date	2016.11.11.14.03.33;	author jsing;	state Exp;
branches;
next	1.42;
commitid	HXeUGMzYqfhCHNxQ;

1.42
date	2016.11.11.14.02.24;	author jsing;	state Exp;
branches;
next	1.41;
commitid	Raxw7C0Peowb71As;

1.41
date	2016.11.05.15.13.26;	author beck;	state Exp;
branches;
next	1.40;
commitid	3VJnu6rXiOGWa3uh;

1.40
date	2016.11.04.05.13.13;	author beck;	state Exp;
branches;
next	1.39;
commitid	vHqLGL1n0DAh4s4y;

1.39
date	2016.11.02.15.18.42;	author beck;	state Exp;
branches;
next	1.38;
commitid	OsrmWrsuHXqdXb2Z;

1.38
date	2016.09.13.13.40.58;	author tedu;	state Exp;
branches;
next	1.37;
commitid	YJ1fhPtYqEdHrJOQ;

1.37
date	2016.09.04.14.15.44;	author jsing;	state Exp;
branches;
next	1.36;
commitid	4Jqd0TIa6o0gN4Ez;

1.36
date	2016.09.04.12.26.43;	author bcook;	state Exp;
branches;
next	1.35;
commitid	pRMpDkZhqg5jtYzf;

1.35
date	2016.08.22.14.58.26;	author jsing;	state Exp;
branches;
next	1.34;
commitid	mHVhZOHuMDvmqgVK;

1.34
date	2016.08.22.14.55.59;	author jsing;	state Exp;
branches;
next	1.33;
commitid	WuoLREAZSBiJsrrv;

1.33
date	2016.08.12.15.10.59;	author jsing;	state Exp;
branches;
next	1.32;
commitid	JoLVmCulWsGsIXUK;

1.32
date	2016.08.02.07.47.11;	author jsing;	state Exp;
branches;
next	1.31;
commitid	0rb7ZAopgz9STgBs;

1.31
date	2016.08.01.17.40.23;	author jsing;	state Exp;
branches;
next	1.30;
commitid	sp3wMKxnaiLXUBfX;

1.30
date	2016.08.01.17.32.19;	author jsing;	state Exp;
branches;
next	1.29;
commitid	s3UFLNfN0t7jV6pK;

1.29
date	2016.05.27.14.21.24;	author jsing;	state Exp;
branches;
next	1.28;
commitid	IUFHoGY2tOE247Cl;

1.28
date	2016.04.28.17.05.59;	author jsing;	state Exp;
branches;
next	1.27;
commitid	DKpbOonvEBeRoW5p;

1.27
date	2016.04.28.16.48.44;	author jsing;	state Exp;
branches;
next	1.26;
commitid	pJ2jMgrYqvai7CXS;

1.26
date	2015.10.07.23.33.38;	author beck;	state Exp;
branches;
next	1.25;
commitid	XcWxDTWtCyQY5Zhm;

1.25
date	2015.10.01.10.27.34;	author bcook;	state Exp;
branches;
next	1.24;
commitid	kiUzYJTikaOcv6Ca;

1.24
date	2015.09.14.16.16.38;	author jsing;	state Exp;
branches;
next	1.23;
commitid	Fd6WDkwQWggESQVJ;

1.23
date	2015.09.13.10.32.46;	author beck;	state Exp;
branches;
next	1.22;
commitid	keUBjLPDsemH4U8s;

1.22
date	2015.09.12.21.00.38;	author beck;	state Exp;
branches;
next	1.21;
commitid	iEhBM6X1bQFFdcQ1;

1.21
date	2015.09.12.16.46.43;	author jsing;	state Exp;
branches;
next	1.20;
commitid	Dok4FXQfpi11hlUU;

1.20
date	2015.09.11.12.56.55;	author beck;	state Exp;
branches;
next	1.19;
commitid	sb4du43rG1oa1RCm;

1.19
date	2015.09.11.11.28.01;	author jsing;	state Exp;
branches;
next	1.18;
commitid	9gnJ0qiKF3yMyFsb;

1.18
date	2015.09.10.10.26.49;	author beck;	state Exp;
branches;
next	1.17;
commitid	LulMRRGp3SkwbieR;

1.17
date	2015.09.10.10.22.28;	author beck;	state Exp;
branches;
next	1.16;
commitid	d4drHlNVn9rkwmBp;

1.16
date	2015.09.10.10.14.20;	author jsing;	state Exp;
branches;
next	1.15;
commitid	XGvr88Fsecamv3XQ;

1.15
date	2015.09.10.09.10.42;	author jsing;	state Exp;
branches;
next	1.14;
commitid	QGGZQQxHecOSmNyK;

1.14
date	2015.09.09.19.23.04;	author beck;	state Exp;
branches;
next	1.13;
commitid	nJxZtGxH6XzyXez3;

1.13
date	2015.06.19.06.20.11;	author bcook;	state Exp;
branches;
next	1.12;
commitid	hUa9MeYexbUj6fqZ;

1.12
date	2015.03.31.14.03.38;	author jsing;	state Exp;
branches;
next	1.11;
commitid	eUtypBLBDknWtFkM;

1.11
date	2015.02.26.10.36.30;	author jsing;	state Exp;
branches;
next	1.10;
commitid	2bXPnbmSkVAaPtSu;

1.10
date	2015.02.22.15.09.54;	author jsing;	state Exp;
branches;
next	1.9;
commitid	lRyL0pnPfoLbeA76;

1.9
date	2015.02.12.04.35.17;	author jsing;	state Exp;
branches;
next	1.8;
commitid	nClddflyeaKNhSCO;

1.8
date	2015.02.12.04.23.17;	author jsing;	state Exp;
branches;
next	1.7;
commitid	YIftjrdQsRMjeEvV;

1.7
date	2015.02.11.07.01.10;	author jsing;	state Exp;
branches;
next	1.6;
commitid	ZUCrxL1FSxDDlrBb;

1.6
date	2015.02.11.06.46.33;	author jsing;	state Exp;
branches;
next	1.5;
commitid	IjYTp2gC6lDO8mXr;

1.5
date	2015.02.07.23.25.37;	author reyk;	state Exp;
branches;
next	1.4;
commitid	UD3ba1TAdmMVSwwo;

1.4
date	2015.02.07.06.19.26;	author jsing;	state Exp;
branches;
next	1.3;
commitid	cwopaOfpwORA2vUX;

1.3
date	2015.01.22.09.16.24;	author reyk;	state Exp;
branches;
next	1.2;
commitid	MIkUgu4UHo6s43H0;

1.2
date	2014.11.02.14.45.05;	author jsing;	state Exp;
branches;
next	1.1;
commitid	GgBCARgHkY5F5TEV;

1.1
date	2014.10.31.13.46.17;	author jsing;	state Exp;
branches;
next	;
commitid	y63FmUITd26yVanM;


desc
@@


1.47
log
@Add tls_config_[add|set]keypair_ocsp functions so that ocsp staples may be
added associated to a keypair used for SNI, and are usable for more than
just the "main" certificate. Modify httpd to use this.
Bump libtls minor.

ok jsing@@
@
text
@/* $OpenBSD: tls.h,v 1.46 2017/01/26 12:53:17 jsing Exp $ */
/*
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef HEADER_TLS_H
#define HEADER_TLS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <sys/types.h>

#include <stddef.h>
#include <stdint.h>

#define TLS_API	20170126

#define TLS_PROTOCOL_TLSv1_0	(1 << 1)
#define TLS_PROTOCOL_TLSv1_1	(1 << 2)
#define TLS_PROTOCOL_TLSv1_2	(1 << 3)
#define TLS_PROTOCOL_TLSv1 \
	(TLS_PROTOCOL_TLSv1_0|TLS_PROTOCOL_TLSv1_1|TLS_PROTOCOL_TLSv1_2)

#define TLS_PROTOCOLS_ALL TLS_PROTOCOL_TLSv1
#define TLS_PROTOCOLS_DEFAULT TLS_PROTOCOL_TLSv1_2

#define TLS_WANT_POLLIN		-2
#define TLS_WANT_POLLOUT	-3

/* RFC 6960 Section 2.3 */
#define TLS_OCSP_RESPONSE_SUCCESSFUL		0
#define TLS_OCSP_RESPONSE_MALFORMED		1
#define TLS_OCSP_RESPONSE_INTERNALERROR		2
#define TLS_OCSP_RESPONSE_TRYLATER		3
#define TLS_OCSP_RESPONSE_SIGREQUIRED		4
#define TLS_OCSP_RESPONSE_UNAUTHORIZED		5

/* RFC 6960 Section 2.2 */
#define TLS_OCSP_CERT_GOOD			0
#define TLS_OCSP_CERT_REVOKED			1
#define TLS_OCSP_CERT_UNKNOWN			2

/* RFC 5280 Section 5.3.1 */
#define TLS_CRL_REASON_UNSPECIFIED		0
#define TLS_CRL_REASON_KEY_COMPROMISE		1
#define TLS_CRL_REASON_CA_COMPROMISE		2
#define TLS_CRL_REASON_AFFILIATION_CHANGED	3
#define TLS_CRL_REASON_SUPERSEDED		4
#define TLS_CRL_REASON_CESSATION_OF_OPERATION	5
#define TLS_CRL_REASON_CERTIFICATE_HOLD		6
#define TLS_CRL_REASON_REMOVE_FROM_CRL		8
#define TLS_CRL_REASON_PRIVILEGE_WITHDRAWN	9
#define TLS_CRL_REASON_AA_COMPROMISE		10

#define TLS_MAX_SESSION_ID_LENGTH		32
#define TLS_TICKET_KEY_SIZE			48

struct tls;
struct tls_config;

typedef ssize_t (*tls_read_cb)(struct tls *_ctx, void *_buf, size_t _buflen,
    void *_cb_arg);
typedef ssize_t (*tls_write_cb)(struct tls *_ctx, const void *_buf,
    size_t _buflen, void *_cb_arg);

int tls_init(void);

const char *tls_config_error(struct tls_config *_config);
const char *tls_error(struct tls *_ctx);

struct tls_config *tls_config_new(void);
void tls_config_free(struct tls_config *_config);

int tls_config_add_keypair_file(struct tls_config *_config,
    const char *_cert_file, const char *_key_file);
int tls_config_add_keypair_mem(struct tls_config *_config, const uint8_t *_cert,
    size_t _cert_len, const uint8_t *_key, size_t _key_len);
int tls_config_add_keypair_ocsp_file(struct tls_config *_config,
    const char *_cert_file, const char *_key_file,
    const char *_ocsp_staple_file);
int tls_config_add_keypair_ocsp_mem(struct tls_config *_config, const uint8_t *_cert,
    size_t _cert_len, const uint8_t *_key, size_t _key_len,
    const uint8_t *_staple, size_t _staple_len);
int tls_config_set_alpn(struct tls_config *_config, const char *_alpn);
int tls_config_set_ca_file(struct tls_config *_config, const char *_ca_file);
int tls_config_set_ca_path(struct tls_config *_config, const char *_ca_path);
int tls_config_set_ca_mem(struct tls_config *_config, const uint8_t *_ca,
    size_t _len);
int tls_config_set_cert_file(struct tls_config *_config,
    const char *_cert_file);
int tls_config_set_cert_mem(struct tls_config *_config, const uint8_t *_cert,
    size_t _len);
int tls_config_set_ciphers(struct tls_config *_config, const char *_ciphers);
int tls_config_set_dheparams(struct tls_config *_config, const char *_params);
int tls_config_set_ecdhecurve(struct tls_config *_config, const char *_name);
int tls_config_set_key_file(struct tls_config *_config, const char *_key_file);
int tls_config_set_key_mem(struct tls_config *_config, const uint8_t *_key,
    size_t _len);
int tls_config_set_keypair_file(struct tls_config *_config,
    const char *_cert_file, const char *_key_file);
int tls_config_set_keypair_mem(struct tls_config *_config, const uint8_t *_cert,
    size_t _cert_len, const uint8_t *_key, size_t _key_len);
int tls_config_set_keypair_ocsp_file(struct tls_config *_config,
    const char *_cert_file, const char *_key_file, const char *_staple_file);
int tls_config_set_keypair_ocsp_mem(struct tls_config *_config, const uint8_t *_cert,
    size_t _cert_len, const uint8_t *_key, size_t _key_len,
    const uint8_t *_staple, size_t staple_len);
int tls_config_set_ocsp_staple_mem(struct tls_config *_config,
    const uint8_t *_staple, size_t _len);
int tls_config_set_ocsp_staple_file(struct tls_config *_config,
    const char *_staple_file);
int tls_config_set_protocols(struct tls_config *_config, uint32_t _protocols);
int tls_config_set_verify_depth(struct tls_config *_config, int _verify_depth);

void tls_config_prefer_ciphers_client(struct tls_config *_config);
void tls_config_prefer_ciphers_server(struct tls_config *_config);

void tls_config_insecure_noverifycert(struct tls_config *_config);
void tls_config_insecure_noverifyname(struct tls_config *_config);
void tls_config_insecure_noverifytime(struct tls_config *_config);
void tls_config_verify(struct tls_config *_config);

void tls_config_ocsp_require_stapling(struct tls_config *_config);
void tls_config_verify_client(struct tls_config *_config);
void tls_config_verify_client_optional(struct tls_config *_config);

void tls_config_clear_keys(struct tls_config *_config);
int tls_config_parse_protocols(uint32_t *_protocols, const char *_protostr);

int tls_config_set_session_id(struct tls_config *_config,
    const unsigned char *_session_id, size_t _len);
int tls_config_set_session_lifetime(struct tls_config *_config, int _lifetime);
int tls_config_add_ticket_key(struct tls_config *_config, uint32_t _keyrev,
    unsigned char *_key, size_t _keylen);

struct tls *tls_client(void);
struct tls *tls_server(void);
int tls_configure(struct tls *_ctx, struct tls_config *_config);
void tls_reset(struct tls *_ctx);
void tls_free(struct tls *_ctx);

int tls_accept_fds(struct tls *_ctx, struct tls **_cctx, int _fd_read,
    int _fd_write);
int tls_accept_socket(struct tls *_ctx, struct tls **_cctx, int _socket);
int tls_accept_cbs(struct tls *_ctx, struct tls **_cctx,
    tls_read_cb _read_cb, tls_write_cb _write_cb, void *_cb_arg);
int tls_connect(struct tls *_ctx, const char *_host, const char *_port);
int tls_connect_fds(struct tls *_ctx, int _fd_read, int _fd_write,
    const char *_servername);
int tls_connect_servername(struct tls *_ctx, const char *_host,
    const char *_port, const char *_servername);
int tls_connect_socket(struct tls *_ctx, int _s, const char *_servername);
int tls_connect_cbs(struct tls *_ctx, tls_read_cb _read_cb,
    tls_write_cb _write_cb, void *_cb_arg, const char *_servername);
int tls_handshake(struct tls *_ctx);
ssize_t tls_read(struct tls *_ctx, void *_buf, size_t _buflen);
ssize_t tls_write(struct tls *_ctx, const void *_buf, size_t _buflen);
int tls_close(struct tls *_ctx);

int tls_peer_cert_provided(struct tls *_ctx);
int tls_peer_cert_contains_name(struct tls *_ctx, const char *_name);

const char *tls_peer_cert_hash(struct tls *_ctx);
const char *tls_peer_cert_issuer(struct tls *_ctx);
const char *tls_peer_cert_subject(struct tls *_ctx);
time_t	tls_peer_cert_notbefore(struct tls *_ctx);
time_t	tls_peer_cert_notafter(struct tls *_ctx);

const char *tls_conn_alpn_selected(struct tls *_ctx);
const char *tls_conn_cipher(struct tls *_ctx);
const char *tls_conn_servername(struct tls *_ctx);
const char *tls_conn_version(struct tls *_ctx);

uint8_t *tls_load_file(const char *_file, size_t *_len, char *_password);

int tls_ocsp_process_response(struct tls *_ctx, const unsigned char *_response,
    size_t _size);
int tls_peer_ocsp_cert_status(struct tls *_ctx);
int tls_peer_ocsp_crl_reason(struct tls *_ctx);
time_t tls_peer_ocsp_next_update(struct tls *_ctx);
int tls_peer_ocsp_response_status(struct tls *_ctx);
const char *tls_peer_ocsp_result(struct tls *_ctx);
time_t tls_peer_ocsp_revocation_time(struct tls *_ctx);
time_t tls_peer_ocsp_this_update(struct tls *_ctx);
const char *tls_peer_ocsp_url(struct tls *_ctx);

#ifdef __cplusplus
}
#endif

#endif /* HEADER_TLS_H */
@


1.46
log
@Bump TLS_API due to new features being added earlier this week.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.45 2017/01/24 01:48:05 claudio Exp $ */
d92 6
a97 1

d117 7
a123 2
int tls_config_set_ocsp_staple_mem(struct tls_config *_config, char *_staple,
    size_t _len);
@


1.45
log
@Introduce ticket support. To enable them it is enough to set a positive
lifetime with tls_config_set_session_lifetime(). This enables tickets
and uses an internal automatic rekeying mode for the ticket keys.

If multiple processes are involved the following functions can be used to make
tickets work accross all instances:
- tls_config_set_session_id() sets the session identifier
- tls_config_add_ticket_key() adds an encryption and authentication key

For now only the last 4 keys added will be used (unless they are too old).
If tls_config_add_ticket_key() is used the caller must ensure to add new keys
regularly. It is best to do this 4 times per session lifetime (which is also
the ticket key lifetime).

Since tickets break PFS it is best to minimize the session lifetime according
to needs.

With a lot of help, input and OK beck@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.44 2017/01/22 03:59:30 jsing Exp $ */
d30 1
a30 1
#define TLS_API	20161111
@


1.44
log
@Wrap long lines.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.43 2016/11/11 14:03:33 jsing Exp $ */
d69 3
d133 6
@


1.43
log
@Bump TLS_API due to recent feature additions and changes.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.42 2016/11/11 14:02:24 jsing Exp $ */
d109 4
a112 2
int tls_config_set_ocsp_staple_mem(struct tls_config *_config, char *_staple, size_t _len);
int tls_config_set_ocsp_staple_file(struct tls_config *_config, const char *_staple_file);
d171 2
a172 1
int tls_ocsp_process_response(struct tls *_ctx, const unsigned char *_response, size_t _size);
@


1.42
log
@Change the return value of tls_config_set_protocols() and
tls_config_set_verify_depth() from void to int. This makes them consistent
with all other tls_config_set_* functions and will allow for call time
validation to be implemented.

Rides libtls major bump.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.41 2016/11/05 15:13:26 beck Exp $ */
d30 1
a30 1
#define TLS_API	20160904
@


1.41
log
@Add support for server side OCSP stapling to libtls.
Add support for server side OCSP stapling to netcat.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.40 2016/11/04 05:13:13 beck Exp $ */
d111 2
a112 2
void tls_config_set_protocols(struct tls_config *_config, uint32_t _protocols);
void tls_config_set_verify_depth(struct tls_config *_config, int _verify_depth);
@


1.40
log
@Add ocsp_require_stapling config option for tls - allows a connection
to indicate that it requires the peer to provide a stapled OCSP response
with the handshake.  Provide a "-T muststaple" for nc that uses it.
ok jsing@@, guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.39 2016/11/02 15:18:42 beck Exp $ */
d109 2
@


1.39
log
@Add OCSP client side support to libtls.
   - Provide access to certificate OCSP URL
   - Provide ability to check a raw OCSP reply against an
     established TLS ctx
   - Check and validate OCSP stapling info in the TLS handshake
     if a stapled OCSP response is provided.`

Add example code to show OCSP URL and stapled info
into netcat.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.38 2016/09/13 13:40:58 tedu Exp $ */
d120 1
@


1.38
log
@add a little more typing to the first callback argument.
it's always a tls context.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.37 2016/09/04 14:15:44 jsing Exp $ */
d44 25
d165 10
@


1.37
log
@Bump TLS_API for addition of callbacks.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.36 2016/09/04 12:26:43 bcook Exp $ */
d47 1
a47 1
typedef ssize_t (*tls_read_cb)(void *_ctx, void *_buf, size_t _buflen,
d49 1
a49 1
typedef ssize_t (*tls_write_cb)(void *_ctx, const void *_buf,
@


1.36
log
@Add callback-based interface to libtls.

This allows working with buffers and callback functions instead of directly on
sockets or file descriptors.
Original patch from Tobias Pape <tobias_at_netshed.de>.
ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.35 2016/08/22 14:58:26 jsing Exp $ */
d30 1
a30 1
#define TLS_API	20160822
@


1.35
log
@Bump TLS_API due to the addition of server side SNI functions.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.34 2016/08/22 14:55:59 jsing Exp $ */
d47 5
d110 2
d118 2
@


1.34
log
@Provide an API that enables server side SNI support - add the ability to
provide additional keypairs (via tls_config_add_keypair_{file,mem}()) and
allow the server to determine what servername the client requested (via
tls_conn_servername()).

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.33 2016/08/12 15:10:59 jsing Exp $ */
d30 1
a30 1
#define TLS_API	20160812
@


1.33
log
@Add ALPN support to libtls.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.32 2016/08/02 07:47:11 jsing Exp $ */
d55 5
d127 1
@


1.32
log
@Revert previous since it adds new symbols.

Requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.31 2016/08/01 17:40:23 jsing Exp $ */
d30 1
a30 1
#define TLS_API	20160801
d55 1
d120 2
a122 1
const char *tls_conn_cipher(struct tls *_ctx);
@


1.31
log
@Bump TLS_API for addition of ALPN support.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.30 2016/08/01 17:32:19 jsing Exp $ */
a54 1
int tls_config_set_alpn(struct tls_config *_config, const char *_alpn);
d119 1
a119 1
const char *tls_conn_alpn_selected(struct tls *_ctx);
a120 1
const char *tls_conn_version(struct tls *_ctx);
@


1.30
log
@Add ALPN support to libtls.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.29 2016/05/27 14:21:24 jsing Exp $ */
d30 1
a30 1
#define TLS_API	20141031
@


1.29
log
@Fix function parameters that do not have an underscore prefix.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.28 2016/04/28 17:05:59 jsing Exp $ */
d55 1
d120 2
a122 1
const char *tls_conn_cipher(struct tls *_ctx);
@


1.28
log
@Factor our the keypair handling in libtls. This results in more readable
and self-contained code, while preparing for the ability to handle
multiple keypairs. Also provide two additional functions that allow
a public certificate and private key to be set with a single function
call.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.27 2016/04/28 16:48:44 jsing Exp $ */
d110 2
a111 2
int tls_peer_cert_provided(struct tls *ctx);
int tls_peer_cert_contains_name(struct tls *ctx, const char *name);
d113 5
a117 5
const char * tls_peer_cert_hash(struct tls *_ctx);
const char * tls_peer_cert_issuer(struct tls *ctx);
const char * tls_peer_cert_subject(struct tls *ctx);
time_t	tls_peer_cert_notbefore(struct tls *ctx);
time_t	tls_peer_cert_notafter(struct tls *ctx);
d119 2
a120 2
const char * tls_conn_version(struct tls *ctx);
const char * tls_conn_cipher(struct tls *ctx);
@


1.27
log
@Rework the error handling in libtls so that we can associate errors with
both configuration and contexts. This allows us to propagate errors that
occur during configuration, rather than either just failing with no reason
or delaying the failure until it can be propagated via the tls context.

Also provide a tls_config_error() function for retrieving the last error
from a tls_config *.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.26 2015/10/07 23:33:38 beck Exp $ */
d69 4
@


1.26
log
@Add tls_peer_cert_notbefore and tls_peer_cert_notafter to expose peer certificate
validity times for tls connections.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.25 2015/10/01 10:27:34 bcook Exp $ */
d49 1
@


1.25
log
@include <sys/types.h> for ssize_t

ok jsing@@, deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.24 2015/09/14 16:16:38 jsing Exp $ */
d111 3
@


1.24
log
@Provide tls_config_insecure_noverifytime() in order to be able to disable
certificate validity checking.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.23 2015/09/13 10:32:46 beck Exp $ */
d24 2
@


1.23
log
@add visibility of ciper and connection version strings
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.22 2015/09/12 21:00:38 beck Exp $ */
d74 1
@


1.22
log
@Move connection info into it's own private structure allocated and filled in
at handshake time. change accessors to return const char * to remove need
for caller to free memory.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.21 2015/09/12 16:46:43 jsing Exp $ */
d108 2
@


1.21
log
@Put tls_peer_cert* functions in the same place.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.20 2015/09/11 12:56:55 beck Exp $ */
d105 3
a107 3
int tls_peer_cert_hash(struct tls *_ctx, char **_hash);
int tls_peer_cert_issuer(struct tls *ctx, char **name);
int tls_peer_cert_subject(struct tls *ctx, char **subject);
@


1.20
log
@add tls_peer functions for checking names and issuers of peer certificates.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.19 2015/09/11 11:28:01 jsing Exp $ */
a78 5
int tls_peer_cert_provided(struct tls *ctx);
int tls_peer_cert_contains_name(struct tls *ctx, const char *name);
int tls_peer_cert_issuer(struct tls *ctx, char **name);
int tls_peer_cert_subject(struct tls *ctx, char **subject);

d102 3
d106 2
@


1.19
log
@Provide tls_peer_cert_hash() which returns a hash of the raw certificate
that was presented by the peer. The hash used is currently SHA256, however
since we prefix the result with the hash name, we can change this in the
future as the need arises.

The same output can be generated by using:

 h=$(openssl x509 -outform der -in mycert.crt | sha256)
 printf "SHA256:${h}\n"

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.18 2015/09/10 10:26:49 beck Exp $ */
d78 5
@


1.18
log
@change TLS_READ_AGAIN to TLS_WANT_POLLIN and TLS_WRITE_AGAIN to TLS_WANT_POLLOUT
to make it more clear to users of this api what needs to be done in these error
cases.
Discussed extensively with bluhm@@ and jsing@@ and others.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.17 2015/09/10 10:22:28 beck Exp $ */
d101 2
@


1.17
log
@Change tls_read and tls_write semantics to return an ssize_t to better
match read() and write() semantics to make porting existing code using
read/write easier.. requested by bluhm@@ who convinced jsing and I to break
the api

ok jsing@@ bluhm@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.16 2015/09/10 10:14:20 jsing Exp $ */
d39 2
a40 2
#define TLS_READ_AGAIN	-2
#define TLS_WRITE_AGAIN	-3
@


1.16
log
@Split tls_handshake() out from tls_accept/tls_connect. By doing this the
tls_accept/tls_connect functions can be guaranteed to succeed or fail and
will no longer return TLS_READ_AGAIN/TLS_WRITE_AGAIN. This also resolves
the semantics of tls_accept_*.

The tls_handshake() function now does I/O and can return
TLS_READ_AGAIN/TLS_WRITE_AGAIN. Calls to tls_read() and tls_write() will
trigger the handshake if it has not already completed, meaning that in many
cases existing code will continue to work.

Discussed over many coffees at l2k15.

ok beck@@ bluhm@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.15 2015/09/10 09:10:42 jsing Exp $ */
d98 2
a99 3
int tls_read(struct tls *_ctx, void *_buf, size_t _buflen, size_t *_outlen);
int tls_write(struct tls *_ctx, const void *_buf, size_t _buflen,
    size_t *_outlen);
@


1.15
log
@Add support for preferring the server's cipher list or the client's cipher
list. Prefer the server's cipher list by default.

Based on a diff from Kyle Thompson <jmp at giga dot moe>.

ok beck@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.14 2015/09/09 19:23:04 beck Exp $ */
d97 1
@


1.14
log
@Add client certificate support. Still needs a few tweaks but this will
ride upcoming minor bump
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.13 2015/06/19 06:20:11 bcook Exp $ */
d69 2
a70 2
void tls_config_clear_keys(struct tls_config *_config);
int tls_config_parse_protocols(uint32_t *_protocols, const char *_protostr);
d78 3
@


1.13
log
@Add standard headers, C++ support to tls.h.

This makes using libtls easier to include by including dependent headers,
making something like this work as expected:

#include <iostream>
#include <tls.h>

int main()
{
   std::cout << "tls_init: " << tls_init() << "\n";
}

This also makes building a standalone libtls-portable simpler.

ok doug@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.12 2015/03/31 14:03:38 jsing Exp $ */
d75 3
@


1.12
log
@Provide a tls_accept_fds() function, which allows a TLS connection to be
accepted via an existing pair of file descriptors.

Based on a diff from Jan Klemkow.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.11 2015/02/26 10:36:30 jsing Exp $ */
d21 7
d97 4
@


1.11
log
@Prefix function parameter names with underscores in tls.h, since this makes
them guaranteed to not conflict per POSIX.

ok espie@@ guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.10 2015/02/22 15:09:54 jsing Exp $ */
d75 2
@


1.10
log
@Rename tls_config_insecure_noverifyhost() to
tls_config_insecure_noverifyname(), so that it is more accurate and keeps
inline with the distinction between DNS hostname and server name.

Requested by tedu@@ during s2k15.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.9 2015/02/12 04:35:17 jsing Exp $ */
d40 1
a40 1
const char *tls_error(struct tls *ctx);
d43 1
a43 1
void tls_config_free(struct tls_config *config);
d45 23
a67 22
int tls_config_set_ca_file(struct tls_config *config, const char *ca_file);
int tls_config_set_ca_path(struct tls_config *config, const char *ca_path);
int tls_config_set_ca_mem(struct tls_config *config, const uint8_t *ca,
    size_t len);
int tls_config_set_cert_file(struct tls_config *config, const char *cert_file);
int tls_config_set_cert_mem(struct tls_config *config, const uint8_t *cert,
    size_t len);
int tls_config_set_ciphers(struct tls_config *config, const char *ciphers);
int tls_config_set_dheparams(struct tls_config *config, const char *params);
int tls_config_set_ecdhecurve(struct tls_config *config, const char *name);
int tls_config_set_key_file(struct tls_config *config, const char *key_file);
int tls_config_set_key_mem(struct tls_config *config, const uint8_t *key,
    size_t len);
void tls_config_set_protocols(struct tls_config *config, uint32_t protocols);
void tls_config_set_verify_depth(struct tls_config *config, int verify_depth);

void tls_config_clear_keys(struct tls_config *config);
int tls_config_parse_protocols(uint32_t *protocols, const char *protostr);

void tls_config_insecure_noverifycert(struct tls_config *config);
void tls_config_insecure_noverifyname(struct tls_config *config);
void tls_config_verify(struct tls_config *config);
d71 15
a85 14
int tls_configure(struct tls *ctx, struct tls_config *config);
void tls_reset(struct tls *ctx);
void tls_free(struct tls *ctx);

int tls_accept_socket(struct tls *ctx, struct tls **cctx, int socket);
int tls_connect(struct tls *ctx, const char *host, const char *port);
int tls_connect_fds(struct tls *ctx, int fd_read, int fd_write,
    const char *servername);
int tls_connect_servername(struct tls *ctx, const char *host, const char *port,
    const char *servername);
int tls_connect_socket(struct tls *ctx, int s, const char *servername);
int tls_read(struct tls *ctx, void *buf, size_t buflen, size_t *outlen);
int tls_write(struct tls *ctx, const void *buf, size_t buflen, size_t *outlen);
int tls_close(struct tls *ctx);
d87 1
a87 1
uint8_t *tls_load_file(const char *file, size_t *len, char *password);
@


1.9
log
@Add a tls_config_parse_protocols() function that allows a protocols string
to be converted into a libtls protocols value. This allows for things like:

	"tlsv1.0,tlsv1.1" (TLSv1.0 and TLSv1.1)
	"all,!tlsv1.0" (all protocols except TLSv1.0)

Discussed with tedu@@ and reyk@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.8 2015/02/12 04:23:17 jsing Exp $ */
a63 1
void tls_config_insecure_noverifyhost(struct tls_config *config);
d65 1
@


1.8
log
@Change TLS_PROTOCOLS_DEFAULT to be TLSv1.2 only. Add a TLS_PROTOCOLS_ALL
that includes all currently supported protocols (TLSv1.0, TLSv1.1 and
TLSv1.2). Change all users of libtls to use TLS_PROTOCOLS_ALL so that they
maintain existing behaviour.

Discussed with tedu@@ and reyk@@.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.7 2015/02/11 07:01:10 jsing Exp $ */
d62 2
@


1.7
log
@Provide a tls_connect_servername() function that has the same behaviour
as tls_connect(), however allows the name to use for verification to be
explicitly provided, rather than being inferred from the host value.

Requested by reyk@@

ok reyk@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.6 2015/02/11 06:46:33 jsing Exp $ */
d28 3
a30 1
#define TLS_PROTOCOLS_DEFAULT TLS_PROTOCOL_TLSv1
@


1.6
log
@Be consistent with naming - only use "host" and "hostname" when referring
to an actual host and use "servername" when referring to the name of the
TLS server that we expect to be indentified in the server certificate.

Likewise, rename verify_host to verify_name and use the term "name"
throughout the verification code (rather than host or hostname).

Requested by and ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.5 2015/02/07 23:25:37 reyk Exp $ */
d73 2
@


1.5
log
@Add tls_load_file() as a helper to load certificates or encrypted keys
into memory.  This can be used for tls_config_set_ca_mem(),
tls_config_set_cert_mem() or tls_config_set_key_mem().

With input from jsing@@, tedu@@ and henning@@

OK tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.4 2015/02/07 06:19:26 jsing Exp $ */
d73 2
a74 2
    const char *hostname);
int tls_connect_socket(struct tls *ctx, int s, const char *hostname);
@


1.4
log
@Add tls_config_set_dheparams() to allow specification of the parameters to
use for DHE. This enables the use of DHE cipher suites.

Rename tls_config_set_ecdhcurve() to tls_config_set_ecdhecurve() since it
is only used to specify the curve for ephemeral ECDH.

Discussed with reyk@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.3 2015/01/22 09:16:24 reyk Exp $ */
d78 2
@


1.3
log
@Allow to to load the CA chain directly from memory instead of
specifying a file.  This enables CA verification in privsep'ed
processes that are running chroot'ed without direct access to the
certificate files.

With feedback, tests, and OK from bluhm@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.2 2014/11/02 14:45:05 jsing Exp $ */
d51 2
a52 1
int tls_config_set_ecdhcurve(struct tls_config *config, const char *name);
@


1.2
log
@Add a tls_connect_fds() function that allows a secure connection to be
established using a pair of existing file descriptors.

Based on a diff/request from Jan Klemkow.

Rides previous libtls rename/library bump.

Discussed with tedu@@.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.1 2014/10/31 13:46:17 jsing Exp $ */
d45 2
@


1.1
log
@Rename libressl to libtls to avoid confusion and to make it easier to
distinguish between LibreSSL (the project) and libressl (the library).

Discussed with many.
@
text
@d1 1
a1 1
/* $OpenBSD: tls.h,v 1.21 2014/10/15 21:02:39 tedu Exp $ */
d69 2
@

