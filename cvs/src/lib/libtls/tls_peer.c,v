head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5;
locks; strict;
comment	@ * @;


1.6
date	2016.08.22.17.08.10;	author jsing;	state Exp;
branches;
next	1.5;
commitid	Y5QTdjStOhEWp8M0;

1.5
date	2015.10.07.23.33.38;	author beck;	state Exp;
branches;
next	1.4;
commitid	XcWxDTWtCyQY5Zhm;

1.4
date	2015.09.12.21.00.38;	author beck;	state Exp;
branches;
next	1.3;
commitid	iEhBM6X1bQFFdcQ1;

1.3
date	2015.09.11.13.22.39;	author beck;	state Exp;
branches;
next	1.2;
commitid	cUWiiozfFFn5MUne;

1.2
date	2015.09.11.12.56.55;	author beck;	state Exp;
branches;
next	1.1;
commitid	sb4du43rG1oa1RCm;

1.1
date	2015.09.11.11.28.01;	author jsing;	state Exp;
branches;
next	;
commitid	9gnJ0qiKF3yMyFsb;


desc
@@


1.6
log
@Stick with the usual 'if NULL return NULL' idiom.

ok beck@@
@
text
@/* $OpenBSD: tls_peer.c,v 1.5 2015/10/07 23:33:38 beck Exp $ */
/*
 * Copyright (c) 2015 Joel Sing <jsing@@openbsd.org>
 * Copyright (c) 2015 Bob Beck <beck@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdio.h>

#include <openssl/x509.h>

#include <tls.h>
#include "tls_internal.h"

const char *
tls_peer_cert_hash(struct tls *ctx)
{
	if (ctx->conninfo == NULL)
		return (NULL);
	return (ctx->conninfo->hash);
}
const char *
tls_peer_cert_issuer(struct tls *ctx)
{
	if (ctx->conninfo == NULL)
		return (NULL);
	return (ctx->conninfo->issuer);
}

const char *
tls_peer_cert_subject(struct tls *ctx)
{
	if (ctx->conninfo == NULL)
		return (NULL);
	return (ctx->conninfo->subject);
}

int
tls_peer_cert_provided(struct tls *ctx)
{
	return (ctx->ssl_peer_cert != NULL);
}

int
tls_peer_cert_contains_name(struct tls *ctx, const char *name)
{
	if (ctx->ssl_peer_cert == NULL)
		return (0);

	return (tls_check_name(ctx, ctx->ssl_peer_cert, name) == 0);
}

time_t
tls_peer_cert_notbefore(struct tls *ctx)
{
	if (ctx->ssl_peer_cert == NULL)
		return (-1);
	if (ctx->conninfo == NULL)
		return (-1);
	return (ctx->conninfo->notbefore);
}

time_t
tls_peer_cert_notafter(struct tls *ctx)
{
	if (ctx->ssl_peer_cert == NULL)
		return (-1);
	if (ctx->conninfo == NULL)
		return (-1);
	return (ctx->conninfo->notafter);
}

@


1.5
log
@Add tls_peer_cert_notbefore and tls_peer_cert_notafter to expose peer certificate
validity times for tls connections.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_peer.c,v 1.4 2015/09/12 21:00:38 beck Exp $ */
d29 3
a31 3
	if (ctx->conninfo)
		return (ctx->conninfo->hash);
	return NULL;
d36 3
a38 3
	if (ctx->conninfo)
		return (ctx->conninfo->issuer);
	return NULL;
d44 3
a46 3
	if (ctx->conninfo)
		return (ctx->conninfo->subject);
	return NULL;
@


1.4
log
@Move connection info into it's own private structure allocated and filled in
at handshake time. change accessors to return const char * to remove need
for caller to free memory.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_peer.c,v 1.3 2015/09/11 13:22:39 beck Exp $ */
d62 20
@


1.3
log
@!= -> == that I broke while bikeshedding
@
text
@d1 1
a1 1
/* $OpenBSD: tls_peer.c,v 1.2 2015/09/11 12:56:55 beck Exp $ */
d26 2
a27 3
static int
tls_hex_string(const unsigned char *in, size_t inlen, char **out,
    size_t *outlen)
d29 10
a38 24
	static const char hex[] = "0123456789abcdef";
	size_t i, len;
	char *p;

	if (outlen != NULL)
		*outlen = 0;

	if (inlen >= SIZE_MAX)
		return (-1);
	if ((*out = reallocarray(NULL, inlen + 1, 2)) == NULL)
		return (-1);

	p = *out;
	len = 0;
	for (i = 0; i < inlen; i++) {
		p[len++] = hex[(in[i] >> 4) & 0x0f];
		p[len++] = hex[in[i] & 0x0f];
	}
	p[len++] = 0;

	if (outlen != NULL)
		*outlen = len;

	return (0);
d41 2
a42 2
int
tls_peer_cert_hash(struct tls *ctx, char **hash)
d44 3
a46 29
	char d[EVP_MAX_MD_SIZE], *dhex = NULL;
	int dlen, rv = -1;

	*hash = NULL;
	if (ctx->ssl_peer_cert == NULL)
		return (0);

	if (X509_digest(ctx->ssl_peer_cert, EVP_sha256(), d, &dlen) != 1) {
		tls_set_errorx(ctx, "digest failed");
		goto err;
	}

	if (tls_hex_string(d, dlen, &dhex, NULL) != 0) {
		tls_set_errorx(ctx, "digest hex string failed");
		goto err;
	}

	if (asprintf(hash, "SHA256:%s", dhex) == -1) {
		tls_set_errorx(ctx, "out of memory");
		*hash = NULL;
		goto err;
	}

	rv = 0;

err:
	free(dhex);

	return (rv);
a63 31
int
tls_peer_cert_issuer(struct tls *ctx,  char **issuer)
{
	X509_NAME *name = NULL;

	*issuer = NULL;
	if (ctx->ssl_peer_cert == NULL)
		return (-1);
	if ((name = X509_get_issuer_name(ctx->ssl_peer_cert)) == NULL)
		return (-1);
	*issuer = X509_NAME_oneline(name, 0, 0);
	if (*issuer == NULL)
		return (-1);
	return (0);
}

int
tls_peer_cert_subject(struct tls *ctx, char **subject)
{
	X509_NAME *name = NULL;

	*subject = NULL;
	if (ctx->ssl_peer_cert == NULL)
		return (-1);
	if ((name = X509_get_subject_name(ctx->ssl_peer_cert)) == NULL)
		return (-1);
	*subject = X509_NAME_oneline(name, 0, 0);
	if (*subject == NULL)
		return (-1);
	return (0);
}
@


1.2
log
@add tls_peer functions for checking names and issuers of peer certificates.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_peer.c,v 1.1 2015/09/11 11:28:01 jsing Exp $ */
d111 1
a111 1
	if (ctx->ssl_peer_cert != NULL)
@


1.1
log
@Provide tls_peer_cert_hash() which returns a hash of the raw certificate
that was presented by the peer. The hash used is currently SHA256, however
since we prefix the result with the hash name, we can change this in the
future as the need arises.

The same output can be generated by using:

 h=$(openssl x509 -outform der -in mycert.crt | sha256)
 printf "SHA256:${h}\n"

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls.c,v 1.25 2015/09/11 09:24:54 jsing Exp $ */
d4 1
d88 47
@

