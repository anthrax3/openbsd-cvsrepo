head	1.53;
access;
symbols
	OPENBSD_6_1_BASE:1.53
	OPENBSD_6_0:1.32.0.2
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11;
locks; strict;
comment	@ * @;


1.53
date	2017.01.29.17.52.11;	author beck;	state Exp;
branches;
next	1.52;
commitid	DZ2gL9MkhCf6eTgX;

1.52
date	2017.01.26.12.56.37;	author jsing;	state Exp;
branches;
next	1.51;
commitid	fXjilM4ZG2ENdzA8;

1.51
date	2017.01.24.01.48.05;	author claudio;	state Exp;
branches;
next	1.50;
commitid	k0nZBOjpyTl9Tz16;

1.50
date	2016.11.05.15.13.26;	author beck;	state Exp;
branches;
next	1.49;
commitid	3VJnu6rXiOGWa3uh;

1.49
date	2016.11.05.14.50.05;	author beck;	state Exp;
branches;
next	1.48;
commitid	vIHPrOGMa5sQTHt5;

1.48
date	2016.11.04.18.23.32;	author guenther;	state Exp;
branches;
next	1.47;
commitid	6ETMBoXiwmbf06wQ;

1.47
date	2016.11.04.18.07.24;	author beck;	state Exp;
branches;
next	1.46;
commitid	pAy02smoQCuRvYaT;

1.46
date	2016.11.04.05.13.13;	author beck;	state Exp;
branches;
next	1.45;
commitid	vHqLGL1n0DAh4s4y;

1.45
date	2016.11.03.10.05.32;	author jsing;	state Exp;
branches;
next	1.44;
commitid	VAmEYsdUv3IyIABe;

1.44
date	2016.11.02.15.18.42;	author beck;	state Exp;
branches;
next	1.43;
commitid	OsrmWrsuHXqdXb2Z;

1.43
date	2016.09.04.12.26.43;	author bcook;	state Exp;
branches;
next	1.42;
commitid	pRMpDkZhqg5jtYzf;

1.42
date	2016.08.22.17.12.35;	author jsing;	state Exp;
branches;
next	1.41;
commitid	WaQ5KFxCfd7HOivZ;

1.41
date	2016.08.22.14.55.59;	author jsing;	state Exp;
branches;
next	1.40;
commitid	WuoLREAZSBiJsrrv;

1.40
date	2016.08.22.14.51.37;	author jsing;	state Exp;
branches;
next	1.39;
commitid	8BA0jRjLExCiDXSD;

1.39
date	2016.08.15.15.44.58;	author jsing;	state Exp;
branches;
next	1.38;
commitid	wSqBCaEFmSI2nSes;

1.38
date	2016.08.15.15.41.50;	author jsing;	state Exp;
branches;
next	1.37;
commitid	YIKQ79s0hcHsdEKT;

1.37
date	2016.08.15.14.04.23;	author jsing;	state Exp;
branches;
next	1.36;
commitid	skqiBPIfpiAFudga;

1.36
date	2016.08.13.13.05.51;	author jsing;	state Exp;
branches;
next	1.35;
commitid	dEFnw34DXI0aEQXO;

1.35
date	2016.08.12.15.10.59;	author jsing;	state Exp;
branches;
next	1.34;
commitid	JoLVmCulWsGsIXUK;

1.34
date	2016.08.02.07.47.11;	author jsing;	state Exp;
branches;
next	1.33;
commitid	0rb7ZAopgz9STgBs;

1.33
date	2016.08.01.17.32.19;	author jsing;	state Exp;
branches;
next	1.32;
commitid	s3UFLNfN0t7jV6pK;

1.32
date	2016.07.13.16.30.48;	author jsing;	state Exp;
branches;
next	1.31;
commitid	Mw54YoRDL3QkFJKB;

1.31
date	2016.07.07.14.09.03;	author jsing;	state Exp;
branches;
next	1.30;
commitid	0fGHFHTpGSNSAMDC;

1.30
date	2016.07.06.16.16.36;	author jsing;	state Exp;
branches;
next	1.29;
commitid	kH7xEZhqwkoUIN0m;

1.29
date	2016.05.27.14.38.40;	author jsing;	state Exp;
branches;
next	1.28;
commitid	VY5Ci9qTBsSOcCgx;

1.28
date	2016.04.28.17.05.59;	author jsing;	state Exp;
branches;
next	1.27;
commitid	DKpbOonvEBeRoW5p;

1.27
date	2016.04.28.16.48.44;	author jsing;	state Exp;
branches;
next	1.26;
commitid	pJ2jMgrYqvai7CXS;

1.26
date	2015.10.07.23.33.38;	author beck;	state Exp;
branches;
next	1.25;
commitid	XcWxDTWtCyQY5Zhm;

1.25
date	2015.09.29.13.10.53;	author jsing;	state Exp;
branches;
next	1.24;
commitid	oxmr750TVHvGS4sq;

1.24
date	2015.09.14.16.16.38;	author jsing;	state Exp;
branches;
next	1.23;
commitid	Fd6WDkwQWggESQVJ;

1.23
date	2015.09.14.12.29.16;	author jsing;	state Exp;
branches;
next	1.22;
commitid	G1hTgD0N6J7qusS7;

1.22
date	2015.09.13.10.32.46;	author beck;	state Exp;
branches;
next	1.21;
commitid	keUBjLPDsemH4U8s;

1.21
date	2015.09.12.21.00.38;	author beck;	state Exp;
branches;
next	1.20;
commitid	iEhBM6X1bQFFdcQ1;

1.20
date	2015.09.11.12.56.55;	author beck;	state Exp;
branches;
next	1.19;
commitid	sb4du43rG1oa1RCm;

1.19
date	2015.09.11.09.24.54;	author jsing;	state Exp;
branches;
next	1.18;
commitid	eNherZWGYH2vTTyu;

1.18
date	2015.09.10.10.14.20;	author jsing;	state Exp;
branches;
next	1.17;
commitid	XGvr88Fsecamv3XQ;

1.17
date	2015.09.10.09.10.42;	author jsing;	state Exp;
branches;
next	1.16;
commitid	QGGZQQxHecOSmNyK;

1.16
date	2015.09.09.19.23.04;	author beck;	state Exp;
branches;
next	1.15;
commitid	nJxZtGxH6XzyXez3;

1.15
date	2015.09.08.15.29.34;	author jsing;	state Exp;
branches;
next	1.14;
commitid	9K0WzhcufWMotXmA;

1.14
date	2015.08.27.15.26.50;	author jsing;	state Exp;
branches;
next	1.13;
commitid	5FIlAb8mLiRyTsjH;

1.13
date	2015.08.27.14.34.46;	author jsing;	state Exp;
branches;
next	1.12;
commitid	VxGExiBacrXbtka4;

1.12
date	2015.03.31.12.21.27;	author jsing;	state Exp;
branches;
next	1.11;
commitid	zTdtFn3A4fRovB4F;

1.11
date	2015.02.22.14.50.41;	author jsing;	state Exp;
branches;
next	1.10;
commitid	HqV3HmGpJHWot77o;

1.10
date	2015.02.11.06.46.33;	author jsing;	state Exp;
branches;
next	1.9;
commitid	IjYTp2gC6lDO8mXr;

1.9
date	2015.02.07.09.50.09;	author jsing;	state Exp;
branches;
next	1.8;
commitid	QsFM5heC1IRpgG38;

1.8
date	2015.02.07.06.19.26;	author jsing;	state Exp;
branches;
next	1.7;
commitid	cwopaOfpwORA2vUX;

1.7
date	2015.01.22.09.16.24;	author reyk;	state Exp;
branches;
next	1.6;
commitid	MIkUgu4UHo6s43H0;

1.6
date	2015.01.13.17.35.35;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	VMyOPyiROGkwXBxx;

1.5
date	2014.12.17.17.51.33;	author doug;	state Exp;
branches;
next	1.4;
commitid	FJcG0ONhp35NLtZH;

1.4
date	2014.12.07.16.56.17;	author bcook;	state Exp;
branches;
next	1.3;
commitid	ig91zabTuUs7Q4W8;

1.3
date	2014.12.07.15.48.02;	author bcook;	state Exp;
branches;
next	1.2;
commitid	fFnOSh51GKLvzA5B;

1.2
date	2014.12.07.15.00.32;	author bcook;	state Exp;
branches;
next	1.1;
commitid	KH9lDmo5JWgqgo2G;

1.1
date	2014.10.31.13.46.17;	author jsing;	state Exp;
branches;
next	;
commitid	y63FmUITd26yVanM;


desc
@@


1.53
log
@Move the ocsp staple to being part of the keypair structure internally,
so that it does not send back bogus staples when SNI is in use.
(Further change is required to be able to use staples on all keypairs
and not just the main one)
ok jsing@@
@
text
@/* $OpenBSD: tls_internal.h,v 1.52 2017/01/26 12:56:37 jsing Exp $ */
/*
 * Copyright (c) 2014 Jeremie Courreges-Anglas <jca@@openbsd.org>
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef HEADER_TLS_INTERNAL_H
#define HEADER_TLS_INTERNAL_H

#include <arpa/inet.h>
#include <netinet/in.h>

#include <openssl/ssl.h>

__BEGIN_HIDDEN_DECLS

#define _PATH_SSL_CA_FILE "/etc/ssl/cert.pem"

#define TLS_CIPHERS_DEFAULT	"TLSv1.2+AEAD+ECDHE:TLSv1.2+AEAD+DHE"
#define TLS_CIPHERS_COMPAT	"HIGH:!aNULL"
#define TLS_CIPHERS_LEGACY	"HIGH:MEDIUM:!aNULL"
#define TLS_CIPHERS_ALL		"ALL:!aNULL:!eNULL"

union tls_addr {
	struct in_addr ip4;
	struct in6_addr ip6;
};

struct tls_error {
	char *msg;
	int num;
	int tls;
};

struct tls_keypair {
	struct tls_keypair *next;

	char *cert_mem;
	size_t cert_len;
	char *key_mem;
	size_t key_len;
	char *ocsp_staple;
	size_t ocsp_staple_len;
};

#define TLS_MIN_SESSION_TIMEOUT (4)
#define TLS_MAX_SESSION_TIMEOUT (24 * 60 * 60)

#define TLS_NUM_TICKETS				4
#define TLS_TICKET_NAME_SIZE			16
#define TLS_TICKET_AES_SIZE			32
#define TLS_TICKET_HMAC_SIZE			16

struct tls_ticket_key {
	/* The key_name must be 16 bytes according to -lssl */
	unsigned char	key_name[TLS_TICKET_NAME_SIZE];
	unsigned char	aes_key[TLS_TICKET_AES_SIZE];
	unsigned char	hmac_key[TLS_TICKET_HMAC_SIZE];
	time_t		time;
};

struct tls_config {
	struct tls_error error;

	char *alpn;
	size_t alpn_len;
	const char *ca_path;
	char *ca_mem;
	size_t ca_len;
	const char *ciphers;
	int ciphers_server;
	int dheparams;
	int ecdhecurve;
	struct tls_keypair *keypair;
	int ocsp_require_stapling;
	uint32_t protocols;
	unsigned char session_id[TLS_MAX_SESSION_ID_LENGTH];
	int session_lifetime;
	struct tls_ticket_key ticket_keys[TLS_NUM_TICKETS];
	uint32_t ticket_keyrev;
	int ticket_autorekey;
	int verify_cert;
	int verify_client;
	int verify_depth;
	int verify_name;
	int verify_time;
};

struct tls_conninfo {
	char *alpn;
	char *cipher;
	char *servername;
	char *version;

	char *hash;
	char *issuer;
	char *subject;

	time_t notbefore;
	time_t notafter;
};

#define TLS_CLIENT		(1 << 0)
#define TLS_SERVER		(1 << 1)
#define TLS_SERVER_CONN		(1 << 2)

#define TLS_EOF_NO_CLOSE_NOTIFY	(1 << 0)
#define TLS_HANDSHAKE_COMPLETE	(1 << 1)
#define TLS_SSL_NEEDS_SHUTDOWN  (1 << 2)

struct tls_ocsp_result {
	const char *result_msg;
	int response_status;
	int cert_status;
	int crl_reason;
	time_t this_update;
	time_t next_update;
	time_t revocation_time;
};

struct tls_ocsp {
	/* responder location */
	char *ocsp_url;

	/* cert data, this struct does not own these */
	X509 *main_cert;
	STACK_OF(X509) *extra_certs;

	struct tls_ocsp_result *ocsp_result;
};

struct tls_sni_ctx {
	struct tls_sni_ctx *next;

	SSL_CTX *ssl_ctx;
	X509 *ssl_cert;
};

struct tls {
	struct tls_config *config;
	struct tls_error error;

	uint32_t flags;
	uint32_t state;

	char *servername;
	int socket;

	SSL *ssl_conn;
	SSL_CTX *ssl_ctx;

	struct tls_sni_ctx *sni_ctx;

	X509 *ssl_peer_cert;

	struct tls_conninfo *conninfo;

	struct tls_ocsp *ocsp;

	tls_read_cb read_cb;
	tls_write_cb write_cb;
	void *cb_arg;
};

struct tls_sni_ctx *tls_sni_ctx_new(void);
void tls_sni_ctx_free(struct tls_sni_ctx *sni_ctx);

struct tls *tls_new(void);
struct tls *tls_server_conn(struct tls *ctx);

int tls_check_name(struct tls *ctx, X509 *cert, const char *servername);
int tls_configure_server(struct tls *ctx);

int tls_configure_ssl(struct tls *ctx, SSL_CTX *ssl_ctx);
int tls_configure_ssl_keypair(struct tls *ctx, SSL_CTX *ssl_ctx,
    struct tls_keypair *keypair, int required);
int tls_configure_ssl_verify(struct tls *ctx, SSL_CTX *ssl_ctx, int verify);

int tls_handshake_client(struct tls *ctx);
int tls_handshake_server(struct tls *ctx);

int tls_config_load_file(struct tls_error *error, const char *filetype,
    const char *filename, char **buf, size_t *len);
int tls_config_ticket_autorekey(struct tls_config *config);
int tls_host_port(const char *hostport, char **host, char **port);

int tls_set_cbs(struct tls *ctx,
    tls_read_cb read_cb, tls_write_cb write_cb, void *cb_arg);

void tls_error_clear(struct tls_error *error);
int tls_error_set(struct tls_error *error, const char *fmt, ...)
    __attribute__((__format__ (printf, 2, 3)))
    __attribute__((__nonnull__ (2)));
int tls_error_setx(struct tls_error *error, const char *fmt, ...)
    __attribute__((__format__ (printf, 2, 3)))
    __attribute__((__nonnull__ (2)));
int tls_config_set_error(struct tls_config *cfg, const char *fmt, ...)
    __attribute__((__format__ (printf, 2, 3)))
    __attribute__((__nonnull__ (2)));
int tls_config_set_errorx(struct tls_config *cfg, const char *fmt, ...)
    __attribute__((__format__ (printf, 2, 3)))
    __attribute__((__nonnull__ (2)));
int tls_set_error(struct tls *ctx, const char *fmt, ...)
    __attribute__((__format__ (printf, 2, 3)))
    __attribute__((__nonnull__ (2)));
int tls_set_errorx(struct tls *ctx, const char *fmt, ...)
    __attribute__((__format__ (printf, 2, 3)))
    __attribute__((__nonnull__ (2)));
int tls_set_ssl_errorx(struct tls *ctx, const char *fmt, ...)
    __attribute__((__format__ (printf, 2, 3)))
    __attribute__((__nonnull__ (2)));

int tls_ssl_error(struct tls *ctx, SSL *ssl_conn, int ssl_ret,
    const char *prefix);

int tls_conninfo_populate(struct tls *ctx);
void tls_conninfo_free(struct tls_conninfo *conninfo);

int tls_ocsp_verify_cb(SSL *ssl, void *arg);
int tls_ocsp_stapling_cb(SSL *ssl, void *arg);
void tls_ocsp_free(struct tls_ocsp *ctx);
struct tls_ocsp *tls_ocsp_setup_from_peer(struct tls *ctx);

__END_HIDDEN_DECLS

#endif /* HEADER_TLS_INTERNAL_H */
@


1.52
log
@Use a flag to track when we need to call SSL_shutdown(). This avoids an
issue where by calling tls_close() on a TLS context that has not attempted
a handshake, results in an unexpected failure.

Reported by Vinay Sajip.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.51 2017/01/24 01:48:05 claudio Exp $ */
d54 2
a87 2
	char *ocsp_staple;
	size_t ocsp_staple_len;
@


1.51
log
@Introduce ticket support. To enable them it is enough to set a positive
lifetime with tls_config_set_session_lifetime(). This enables tickets
and uses an internal automatic rekeying mode for the ticket keys.

If multiple processes are involved the following functions can be used to make
tickets work accross all instances:
- tls_config_set_session_id() sets the session identifier
- tls_config_add_ticket_key() adds an encryption and authentication key

For now only the last 4 keys added will be used (unless they are too old).
If tls_config_add_ticket_key() is used the caller must ensure to add new keys
regularly. It is best to do this 4 times per session lifetime (which is also
the ticket key lifetime).

Since tickets break PFS it is best to minimize the session lifetime according
to needs.

With a lot of help, input and OK beck@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.50 2016/11/05 15:13:26 beck Exp $ */
d121 1
@


1.50
log
@Add support for server side OCSP stapling to libtls.
Add support for server side OCSP stapling to netcat.
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.49 2016/11/05 14:50:05 beck Exp $ */
d56 16
d89 5
d195 1
@


1.49
log
@rename ocsp_ctx to ocsp
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.48 2016/11/04 18:23:32 guenther Exp $ */
d70 2
a114 4
	/* request blob */
	uint8_t *request_data;
	size_t request_size;

d209 1
@


1.48
log
@Add an explict list of exported symbols with just the functions declared
in <tls.h>, and use __{BEGIN,END}_HIDDEN_DECLS in tls_internal.h to
optimize internal functions

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.47 2016/11/04 18:07:24 beck Exp $ */
d109 1
a109 1
struct tls_ocsp_ctx {
d150 1
a150 1
	struct tls_ocsp_ctx *ocsp_ctx;
d211 2
a212 2
void tls_ocsp_ctx_free(struct tls_ocsp_ctx *ctx);
struct tls_ocsp_ctx *tls_ocsp_setup_from_peer(struct tls *ctx);
@


1.47
log
@make public ASN1_time_parse and ASN1_time_tm_cmp to replace former hidden
functions.. document with a man page.
bump majors on libtls, libssl, libcrypto
ok jsing@@ guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.46 2016/11/04 05:13:13 beck Exp $ */
d27 2
d213 2
@


1.46
log
@Add ocsp_require_stapling config option for tls - allows a connection
to indicate that it requires the peer to provide a stapled OCSP response
with the handshake.  Provide a "-T muststaple" for nc that uses it.
ok jsing@@, guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.45 2016/11/03 10:05:32 jsing Exp $ */
a210 2

int asn1_time_parse(const char *, size_t, struct tm *, int);
@


1.45
log
@Only set an error from libssl related code, if an error has not already
been set by libtls code. This avoids the situation where a libtls callback
has set an error, only to have it replaced by a less useful libssl based
error.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.44 2016/11/02 15:18:42 beck Exp $ */
d67 1
@


1.44
log
@Add OCSP client side support to libtls.
   - Provide access to certificate OCSP URL
   - Provide ability to check a raw OCSP reply against an
     established TLS ctx
   - Check and validate OCSP stapling info in the TLS handshake
     if a stapled OCSP response is provided.`

Add example code to show OCSP URL and stapled info
into netcat.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.43 2016/09/04 12:26:43 bcook Exp $ */
d42 1
d178 1
d195 3
@


1.43
log
@Add callback-based interface to libtls.

This allows working with buffers and callback functions instead of directly on
sockets or file descriptors.
Original patch from Tobias Pape <tobias_at_netshed.de>.
ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.42 2016/08/22 17:12:35 jsing Exp $ */
d95 25
d146 2
d201 4
@


1.42
log
@Various clean up and reorganisation of the connection info handling code.
In particular, rename tls_free_conninfo() to tls_conninfo_free() and make
it a real free function. Rename tls_get_conninfo() to
tls_conninfo_populate() and have it allocate the struct tls_conninfo (after
freeing any existing one).

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.41 2016/08/22 14:55:59 jsing Exp $ */
d120 4
d146 3
@


1.41
log
@Provide an API that enables server side SNI support - add the ability to
provide additional keypairs (via tls_config_add_keypair_{file,mem}()) and
allow the server to determine what servername the client requested (via
tls_conn_servername()).

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.40 2016/08/22 14:51:37 jsing Exp $ */
d165 2
a166 2
int tls_get_conninfo(struct tls *ctx);
void tls_free_conninfo(struct tls_conninfo *conninfo);
@


1.40
log
@Create contexts for server side SNI - these include the additional SSL_CTX
that is required for certificate switching with libssl and the certificate
itself so that we can match against the subject and SANs. Hook up the
servername callback and switch to the appropriate SSL_CTX if we find a
matching certificate.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.39 2016/08/15 15:44:58 jsing Exp $ */
d77 1
@


1.39
log
@The tls_conninfo serial is also unused.
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.38 2016/08/15 15:41:50 jsing Exp $ */
d94 7
d113 3
d120 3
@


1.38
log
@Group conninfo fields by connection and peer cert based information,
sort and remove unused fingerprint.
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.37 2016/08/15 14:04:23 jsing Exp $ */
a81 1
	char *serial;
@


1.37
log
@Explicitly pass in an SSL_CTX * to the functions that operate on one,
instead of assuming that they should use the one associated with the TLS
context. This allows these functions to be used with the additional
SSL contexts that are needed to support server-side SNI.

Also rename tls_configure_keypair() to tls_configure_ssl_keypair(), so that
these functions have a common prefix.

ok reyk@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.36 2016/08/13 13:05:51 jsing Exp $ */
d76 4
a81 1
	char *hash;
d83 1
a83 3
	char *fingerprint;
	char *version;
	char *cipher;
@


1.36
log
@Load CA, certificate and key files into memory when the appropriate
tls_config_set_*_file() function is called. This allows us to immediately
propagate useful error messages, play more nicely with privsep/pledge and
have a single code path. Instead of always loading the default CA when
tls_config_new() is called, defer and only load the default CA when
tls_configure() is invoked, if a CA has not already been specified.

ok beck@@ bluhm@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.35 2016/08/12 15:10:59 jsing Exp $ */
d115 4
a118 1
int tls_configure_keypair(struct tls *ctx, SSL_CTX *ssl_ctx,
d120 1
a120 3
int tls_configure_server(struct tls *ctx);
int tls_configure_ssl(struct tls *ctx);
int tls_configure_ssl_verify(struct tls *ctx, int verify);
@


1.35
log
@Add ALPN support to libtls.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.34 2016/08/02 07:47:11 jsing Exp $ */
a46 1
	const char *cert_file;
a48 1
	const char *key_file;
a57 1
	const char *ca_file;
d120 1
d123 3
@


1.34
log
@Revert previous since it adds new symbols.

Requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.33 2016/08/01 17:32:19 jsing Exp $ */
d58 2
d78 1
d110 1
@


1.33
log
@Add ALPN support to libtls.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.32 2016/07/13 16:30:48 jsing Exp $ */
a57 2
	char *alpn;
	size_t alpn_len;
a75 1
	char *alpn;
a106 1

@


1.32
log
@Split the existing TLS cipher suite groups into four:

"secure" (TLSv1.2+AEAD+PFS)
"compat" (HIGH:!aNULL)
"legacy" (HIGH:MEDIUM:!aNULL)
"insecure" (ALL:!aNULL:!eNULL)

This allows for flexibility and finer grained control, rather than having
two extremes (an issue raised by Marko Kreen some time ago).

ok beck@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.31 2016/07/07 14:09:03 jsing Exp $ */
d58 2
d78 1
d110 1
@


1.31
log
@Revert previous - it introduces problems with a common privsep use case.
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.30 2016/07/06 16:16:36 jsing Exp $ */
a28 1
#define TLS_CIPHERS_COMPAT	"ALL:!aNULL:!eNULL"
d30 3
@


1.30
log
@Always load CA, key and certificate files at the time the configuration
function is called. This simplifies code and results in a single memory
based code path being used to provide data to libssl. Errors that occur
when accessing the specified file are now detected and propagated
immediately. Since the file access now occurs when the configuration
function is called, we now play nicely with privsep/pledge.

ok beck@@ bluhm@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.29 2016/05/27 14:38:40 jsing Exp $ */
d45 1
d48 1
d56 1
@


1.29
log
@Rename some of the internal error setting functions to more closely follow
existing naming standards. Also provide functions for setting a struct
tls_error * directly (rather than having to have a struct tls * or a
struct tls_config *).
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.28 2016/04/28 17:05:59 jsing Exp $ */
a44 1
	const char *cert_file;
a46 1
	const char *key_file;
a53 1
	const char *ca_file;
@


1.28
log
@Factor our the keypair handling in libtls. This results in more readable
and self-contained code, while preparing for the ability to handle
multiple keypairs. Also provide two additional functions that allow
a public certificate and private key to be set with a single function
call.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.27 2016/04/28 16:48:44 jsing Exp $ */
d121 1
a121 1
int tls_set_config_error(struct tls_config *cfg, const char *fmt, ...)
d124 7
a130 1
int tls_set_config_errorx(struct tls_config *cfg, const char *fmt, ...)
@


1.27
log
@Rework the error handling in libtls so that we can associate errors with
both configuration and contexts. This allows us to propagate errors that
occur during configuration, rather than either just failing with no reason
or delaying the failure until it can be propagated via the tls context.

Also provide a tls_config_error() function for retrieving the last error
from a tls_config *.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.26 2015/10/07 23:33:38 beck Exp $ */
d42 11
a59 3
	const char *cert_file;
	char *cert_mem;
	size_t cert_len;
d64 1
a64 3
	const char *key_file;
	char *key_mem;
	size_t key_len;
d112 2
a113 1
int tls_configure_keypair(struct tls *ctx, int);
@


1.26
log
@Add tls_peer_cert_notbefore and tls_peer_cert_notafter to expose peer certificate
validity times for tls connections.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.25 2015/09/29 13:10:53 jsing Exp $ */
d37 5
d43 2
d88 2
a92 3
	char *errmsg;
	int errnum;

d113 7
d126 1
d129 1
@


1.25
log
@Instead of declaring a union in multiple places, move it to tls_internal.h.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.24 2015/09/14 16:16:38 jsing Exp $ */
d68 2
d117 2
@


1.24
log
@Provide tls_config_insecure_noverifytime() in order to be able to disable
certificate validity checking.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.23 2015/09/14 12:29:16 jsing Exp $ */
d22 3
d31 5
@


1.23
log
@Expose EOF without close-notify via tls_close().

Make tls_read(3)/tls_write(3) follow read(2)/write(2) like semantics and
return 0 on EOF with and without close-notify. However, if we saw an EOF
from the underlying file descriptors without getting a close-notify, save
this and make it visible when tls_close(3) is called. This keeps the
semantics we want, but makes it possible to detect truncation at higher
layers, if necessary.

ok beck@@ guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.22 2015/09/13 10:32:46 beck Exp $ */
d49 1
@


1.22
log
@add visibility of ciper and connection version strings
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.21 2015/09/12 21:00:38 beck Exp $ */
d65 2
a66 1
#define TLS_HANDSHAKE_COMPLETE	(1 << 0)
@


1.21
log
@Move connection info into it's own private structure allocated and filled in
at handshake time. change accessors to return const char * to remove need
for caller to free memory.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.20 2015/09/11 12:56:55 beck Exp $ */
d57 2
@


1.20
log
@add tls_peer functions for checking names and issuers of peer certificates.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.19 2015/09/11 09:24:54 jsing Exp $ */
d51 8
d79 1
d101 2
@


1.19
log
@Store a reference to the peer certificate (if any) upon completion of the
handshake. Free the reference when we reset the TLS context.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.18 2015/09/10 10:14:20 jsing Exp $ */
d76 1
a76 1
int tls_check_servername(struct tls *ctx, X509 *cert, const char *servername);
@


1.18
log
@Split tls_handshake() out from tls_accept/tls_connect. By doing this the
tls_accept/tls_connect functions can be guaranteed to succeed or fail and
will no longer return TLS_READ_AGAIN/TLS_WRITE_AGAIN. This also resolves
the semantics of tls_accept_*.

The tls_handshake() function now does I/O and can return
TLS_READ_AGAIN/TLS_WRITE_AGAIN. Calls to tls_read() and tls_write() will
trigger the handshake if it has not already completed, meaning that in many
cases existing code will continue to work.

Discussed over many coffees at l2k15.

ok beck@@ bluhm@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.17 2015/09/10 09:10:42 jsing Exp $ */
d70 1
@


1.17
log
@Add support for preferring the server's cipher list or the client's cipher
list. Prefer the server's cipher list by default.

Based on a diff from Kyle Thompson <jmp at giga dot moe>.

ok beck@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.16 2015/09/09 19:23:04 beck Exp $ */
d55 1
a55 1
#define TLS_STATE_CONNECTING	(1 << 0)
d65 1
d80 2
@


1.16
log
@Add client certificate support. Still needs a few tweaks but this will
ride upcoming minor bump
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.15 2015/09/08 15:29:34 jsing Exp $ */
d38 1
@


1.15
log
@Remove the default HTTPS port from tls_connect() - this is a TLS library,
not a HTTPS library.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.14 2015/08/27 15:26:50 jsing Exp $ */
d45 1
d74 1
a74 1
int tls_configure_keypair(struct tls *ctx);
d77 1
@


1.14
log
@Improve libtls error messages.

The tls_set_error() function previously stored the errno but did nothing
with it. Change tls_set_error() to append the strerror(3) of the stored
errno so that we include useful information regarding failures.

Provide a tls_set_errorx() function that does not store the errno or
include strerror(3) in the error message. Call this function instead of
tls_set_error() for errors where the errno value has no useful meaning.

With feedback from and ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.13 2015/08/27 14:34:46 jsing Exp $ */
a22 2

#define HTTPS_PORT "443"
@


1.13
log
@Split the persistent/configuration flags from temporary state flags and
ensure that the temporary state flags get cleared in tls_reset(). Fixes a
bug spotted by Marko Kreen whereby TLS_CONNECTING could remain on reset.

While here, also move the TLS_STATE_CONNECTING check to after the
TLS_CLIENT check - if TLS_STATE_CONNECTING was ever set on any other
context type it would allow a bypass.

ok bluhm@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.12 2015/03/31 12:21:27 jsing Exp $ */
a61 1
	int err;
d63 1
d79 4
a82 1
int tls_set_error(struct tls *ctx, char *fmt, ...)
@


1.12
log
@Store errors that occur during a tls_accept_socket() call on the context
for the server, rather than on the context for the connection. This makes
more sense than the current behaviour does.

Issue reported by Tim van der Molen.
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.11 2015/02/22 14:50:41 jsing Exp $ */
d54 2
a55 1
#define TLS_CONNECTING		(1 << 3)
d59 2
a60 1
	uint64_t flags;
@


1.11
log
@In the interests of being secure by default, make the default TLS ciphers
be those that are TLSv1.2 with AEAD and PFS. Provide a "compat" mode that
allows the previous default ciphers to be selected.

Discussed with tedu@@ during s2k15.
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.10 2015/02/11 06:46:33 jsing Exp $ */
d80 2
a81 1
int tls_ssl_error(struct tls *ctx, int ssl_ret, const char *prefix);
@


1.10
log
@Be consistent with naming - only use "host" and "hostname" when referring
to an actual host and use "servername" when referring to the name of the
TLS server that we expect to be indentified in the server certificate.

Likewise, rename verify_host to verify_name and use the term "name"
throughout the verification code (rather than host or hostname).

Requested by and ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.9 2015/02/07 09:50:09 jsing Exp $ */
d27 3
@


1.9
log
@Convert tls_connect_fds() and tls_accept_socket() to the new OpenSSL error
dance handling code. This means that we get slightly useful messages when
a TLS connection or accept fails.

Requested by reyk@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.8 2015/02/07 06:19:26 jsing Exp $ */
a43 1
	int verify_host;
d45 1
d69 1
a69 1
int tls_check_hostname(struct tls *ctx, X509 *cert, const char *host);
@


1.8
log
@Add tls_config_set_dheparams() to allow specification of the parameters to
use for DHE. This enables the use of DHE cipher suites.

Rename tls_config_set_ecdhcurve() to tls_config_set_ecdhecurve() since it
is only used to specify the curve for ephemeral ECDH.

Discussed with reyk@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.7 2015/01/22 09:16:24 reyk Exp $ */
d77 1
@


1.7
log
@Allow to to load the CA chain directly from memory instead of
specifying a file.  This enables CA verification in privsep'ed
processes that are running chroot'ed without direct access to the
certificate files.

With feedback, tests, and OK from bluhm@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.6 2015/01/13 17:35:35 bluhm Exp $ */
d37 2
a38 1
	int ecdhcurve;
@


1.6
log
@For non-blocking sockets tls_connect_fds() could fail with EAGAIN.
Use the same logic from the read, write, accept functions to inform
the caller wether a readable or writable socket is needed.  After
that event, the connect function must be called again.  All the
checks before connecting are done only once.
OK tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.5 2014/12/17 17:51:33 doug Exp $ */
d31 2
@


1.5
log
@Add size_t to int checks for SSL functions.

libtls accepts size_t for lengths but libssl accepts int.  This verifies
that the input does not exceed INT_MAX.  It also avoids truncating size_t
when comparing with int and adds printf-style attributes for
tls_set_error().

with input from deraadt@@ and tedu@@
ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.4 2014/12/07 16:56:17 bcook Exp $ */
d47 2
a48 1
#define TLS_SERVER_CONN	(1 << 2)
@


1.4
log
@Allow specific libtls hostname validation errors to propagate.

Remove direct calls to printf from the tls_check_hostname() path. This allows
NUL byte error messages to bubble up to the caller, to be logged in a
program-appropriate way. It also removes non-portable calls to getprogname().

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.3 2014/12/07 15:48:02 bcook Exp $ */
d70 3
a72 1
int tls_set_error(struct tls *ctx, char *fmt, ...);
@


1.3
log
@revert previous change for now, adjusting based on comments from jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.2 2014/12/07 15:00:32 bcook Exp $ */
d65 1
a65 1
int tls_check_hostname(X509 *cert, const char *host);
@


1.2
log
@Allow specific libtls hostname validation errors to propagate.

Remove direct calls to printf from the tls_check_hostname() path. This allows
NUL byte error messages to bubble up to the caller, to be logged in a
program-appropriate way. It also removes non-portable calls to getprogname().

The semantics of tls_error() are changed slightly: the last error message is
not necessarily preserved between subsequent calls into the library.
When the previous call to libtls succeeds, client programs should treat the
return value of tls_error() as undefined.

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.1 2014/10/31 13:46:17 jsing Exp $ */
d65 1
a65 1
int tls_check_hostname(struct tls *ctx, X509 *cert, const char *host);
a69 1
void tls_clear_error(struct tls *ctx);
@


1.1
log
@Rename libressl to libtls to avoid confusion and to make it easier to
distinguish between LibreSSL (the project) and libressl (the library).

Discussed with many.
@
text
@d1 1
a1 1
/* $OpenBSD: tls_internal.h,v 1.12 2014/10/03 14:14:40 tedu Exp $ */
d65 1
a65 1
int tls_check_hostname(X509 *cert, const char *host);
d70 1
@

