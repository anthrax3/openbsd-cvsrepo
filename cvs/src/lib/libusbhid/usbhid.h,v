head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.10
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.01.09.04.14.42;	author jcs;	state Exp;
branches;
next	1.7;
commitid	KAeCDAijcgEnOtfF;

1.7
date	2016.01.08.16.57.26;	author jcs;	state Exp;
branches;
next	1.6;
commitid	kFNCIkL90ohuGVFM;

1.6
date	2014.05.12.17.03.28;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.16.19.57.17;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.11.13.43.54;	author yuo;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.04.00.47.32;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.10.00.09.17;	author nate;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.30.07.04.38;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.8
log
@revert manual additions of hid.h now that usbhid.h brings it in
@
text
@/*	$OpenBSD: usbhid.h,v 1.7 2016/01/08 16:57:26 jcs Exp $	*/
/*	$NetBSD: usbhid.h,v 1.1 2001/12/28 17:45:27 augustss Exp $	*/

/*
 * Copyright (c) 1999 Lennart Augustsson <augustss@@netbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

typedef struct report_desc *report_desc_t;

typedef struct hid_data *hid_data_t;

typedef enum hid_kind {
	hid_input, hid_output, hid_feature, hid_collection, hid_endcollection
} hid_kind_t;

typedef struct hid_item {
	/* Global */
	uint32_t _usage_page;
	int32_t logical_minimum;
	int32_t logical_maximum;
	int32_t physical_minimum;
	int32_t physical_maximum;
	int32_t unit_exponent;
	int32_t unit;
	int32_t report_size;
	int32_t report_ID;
#define NO_REPORT_ID 0
	int32_t report_count;
	/* Local */
	uint32_t usage;
	int32_t usage_minimum;
	int32_t usage_maximum;
	int32_t designator_index;
	int32_t designator_minimum;
	int32_t designator_maximum;
	int32_t string_index;
	int32_t string_minimum;
	int32_t string_maximum;
	int32_t set_delimiter;
	/* Misc */
	int32_t collection;
	int	collevel;
	enum hid_kind kind;
	uint32_t flags;
	/* Location */
	uint32_t pos;
	/* unused */
	struct hid_item *next;
} hid_item_t;

#define HID_PAGE(u) (((u) >> 16) & 0xffff)
#define HID_USAGE(u) ((u) & 0xffff)

/* Obtaining a report descriptor, descr.c: */
report_desc_t	hid_get_report_desc(int file);
report_desc_t	hid_use_report_desc(unsigned char *data, unsigned int size);
void		hid_dispose_report_desc(report_desc_t);

/* Parsing of a HID report descriptor, parse.c: */
hid_data_t	hid_start_parse(report_desc_t d, int kindset, int id);
void		hid_end_parse(hid_data_t s);
int		hid_get_item(hid_data_t s, hid_item_t *h);
int		hid_report_size(report_desc_t d, enum hid_kind k, int id);
int		hid_locate(report_desc_t d, unsigned int usage, enum hid_kind k,
		    hid_item_t *h, int id);

/* Conversion to/from usage names, usage.c: */
const char	*hid_usage_page(int i);
const char	*hid_usage_in_page(unsigned int u);
void		hid_init(const char *file);
int		hid_start(const char *file);
int		hid_parse_usage_in_page(const char *name);
int		hid_parse_usage_page(const char *name);

/* Extracting/insertion of data, data.c: */
int32_t		hid_get_data(const void *p, const hid_item_t *h);
void		hid_set_data(void *p, const hid_item_t *h, int32_t data);
@


1.7
log
@pull in dev/hid/hid.h for moved HIO_* vars
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.h,v 1.6 2014/05/12 17:03:28 mpi Exp $	*/
a28 2

#include <dev/hid/hid.h>
@


1.6
log
@Keep libusbhid's HID parser in sync with the kernel one.  This is mostly
a backport from FreeBSD's r205728, r224511 and 225839 without the new
functions to set/get a report ID nor the usbhidctl(1) & usbhidaction(1)
bits.

Committing now to open the "Monday's Bump Parade".
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.h,v 1.5 2012/07/16 19:57:17 jasper Exp $	*/
d29 2
@


1.5
log
@revert previous, it was hardly tested and is causing too many issues too close to release.

as discussed with and ok mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.h,v 1.3 2004/06/04 00:47:32 deraadt Exp $	*/
d35 1
a35 5
	hid_input = 0,
	hid_output = 1,
	hid_feature = 2,
	hid_collection,
	hid_endcollection
d40 9
a48 9
	int _usage_page;
	int logical_minimum;
	int logical_maximum;
	int physical_minimum;
	int physical_maximum;
	int unit_exponent;
	int unit;
	int report_size;
	int report_ID;
d50 1
a50 1
	int report_count;
d52 10
a61 10
	unsigned int usage;
	int usage_minimum;
	int usage_maximum;
	int designator_index;
	int designator_minimum;
	int designator_maximum;
	int string_index;
	int string_minimum;
	int string_maximum;
	int set_delimiter;
d63 2
a64 2
	int collection;
	int collevel;
d66 4
a69 4
	unsigned int flags;
	/* Absolute data position (bits) */
	unsigned int pos;
	/* */
d98 2
a99 2
int		hid_get_data(const void *p, const hid_item_t *h);
void		hid_set_data(void *p, const hid_item_t *h, int data);
@


1.4
log
@- port multiple report ID support for HID parser from FreeBSD code
 (rev. 205728, 224511 and 225839)

- add hid_get_report_id(3) to get id of a descriptor.

- crank the major in shlib_version 3.0 -> 4.0

ok deraadt@@, mpi@@
@
text
@a80 1
int		hid_get_report_id(int file);
@


1.3
log
@knf + new interface: hid_start() is non-exit non-stderr spewing version of hid_init(); ok matthieu millert
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.h,v 1.2 2002/05/10 00:09:17 nate Exp $	*/
d81 1
@


1.2
log
@Update usb userland stuff to reflect hid changes in the kernel.
This adds the new program usbhidaction which can be used to assign actions
to events that occur on a uhid device.  For example, you can now make the
volume buttons on some newer keyboards actually do something.
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.h,v 1.1 2001/12/30 07:04:38 pvalchev Exp $	*/
d81 3
a83 3
report_desc_t hid_get_report_desc(int file);
report_desc_t hid_use_report_desc(unsigned char *data, unsigned int size);
void hid_dispose_report_desc(report_desc_t);
d86 6
a91 5
hid_data_t hid_start_parse(report_desc_t d, int kindset, int id);
void hid_end_parse(hid_data_t s);
int hid_get_item(hid_data_t s, hid_item_t *h);
int hid_report_size(report_desc_t d, enum hid_kind k, int id);
int hid_locate(report_desc_t d, unsigned int usage, enum hid_kind k, hid_item_t *h, int id);
d94 6
a99 5
const char *hid_usage_page(int i);
const char *hid_usage_in_page(unsigned int u);
void hid_init(const char *file);
int hid_parse_usage_in_page(const char *name);
int hid_parse_usage_page(const char *name);
d102 2
a103 2
int hid_get_data(const void *p, const hid_item_t *h);
void hid_set_data(void *p, const hid_item_t *h, int data);
@


1.1
log
@Rename libusb to libusbhid, a better name, per NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: usb.h,v 1.1 2001/09/02 17:50:40 pvalchev Exp $	*/
d35 6
a40 2
	hid_input, hid_output, hid_feature, hid_collection, hid_endcollection
}hid_kind_t;
d86 1
a86 1
hid_data_t hid_start_parse(report_desc_t d, int kindset);
d89 2
a90 2
int hid_report_size(report_desc_t d, enum hid_kind k, int *idp);
int hid_locate(report_desc_t d, unsigned int usage, enum hid_kind k, hid_item_t *h);
@

