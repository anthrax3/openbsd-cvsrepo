head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.8
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.7.0.10
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.02.04.00.43.45;	author mpi;	state Exp;
branches;
next	1.10;
commitid	qR1reud3YH6RrcXn;

1.10
date	2015.01.18.17.16.06;	author mpi;	state Exp;
branches;
next	1.9;
commitid	Fnnmevgn9Ka12S2s;

1.9
date	2014.05.12.17.03.28;	author mpi;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.07.01.14.21;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.16.19.57.17;	author jasper;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.11.13.43.54;	author yuo;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.24.11.41.15;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.24.08.37.47;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.04.00.47.32;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.10.00.09.17;	author nate;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.30.07.04.38;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Return the correct report ID when hitting a "collection" item.

Collection are reported before their corresponding report ID, so bring
back the trick from old parser and do not return them until we find a
report ID or another start or end of collection.

Fix a regression introduced by last parser backport from FreeBSD
reported by Benjamin Baier, thanks!
@
text
@/*	$OpenBSD: parse.c,v 1.10 2015/01/18 17:16:06 mpi Exp $	*/
/*	$NetBSD: parse.c,v 1.2 2001/12/29 20:44:22 augustss Exp $	*/

/*
 * Copyright (c) 1999, 2001 Lennart Augustsson <augustss@@netbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdlib.h>
#include <string.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbhid.h>

#include "usbhid.h"
#include "usbvar.h"

#define	MAXUSAGE 100
#define	MAXPUSH 4
#define	MAXID 64
#define	ITEMTYPES 3

struct hid_pos_data {
	int32_t rid;
	uint32_t pos[ITEMTYPES];
};

struct hid_data {
	const uint8_t *start;
	const uint8_t *end;
	const uint8_t *p;
	struct hid_item cur[MAXPUSH];
	struct hid_pos_data last_pos[MAXID];
	uint32_t pos[ITEMTYPES];
	int32_t usages_min[MAXUSAGE];
	int32_t usages_max[MAXUSAGE];
	int32_t usage_last;	/* last seen usage */
	uint32_t loc_size;	/* last seen size */
	uint32_t loc_count;	/* last seen count */
	uint8_t	kindset;	/* we have 5 kinds so 8 bits are enough */
	uint8_t	pushlevel;	/* current pushlevel */
	uint8_t	ncount;		/* end usage item count */
	uint8_t icount;		/* current usage item count */
	uint8_t	nusage;		/* end "usages_min/max" index */
	uint8_t	iusage;		/* current "usages_min/max" index */
	uint8_t ousage;		/* current "usages_min/max" offset */
	uint8_t	susage;		/* usage set flags */
	int32_t	reportid;	/* requested report ID */
	struct hid_item savedcoll; /* save coll until we know the ID */
	uint8_t hassavedcoll;
};

static void
hid_clear_local(hid_item_t *c)
{

	c->usage = 0;
	c->usage_minimum = 0;
	c->usage_maximum = 0;
	c->designator_index = 0;
	c->designator_minimum = 0;
	c->designator_maximum = 0;
	c->string_index = 0;
	c->string_minimum = 0;
	c->string_maximum = 0;
	c->set_delimiter = 0;
}

static void
hid_switch_rid(struct hid_data *s, struct hid_item *c, int32_t next_rID)
{
	uint8_t i, j;

	/* check for same report ID - optimise */

	if (c->report_ID == next_rID)
		return;

	/* save current position for current rID */

	if (c->report_ID == 0) {
		i = 0;
	} else {
		for (i = 1; i != MAXID; i++) {
			if (s->last_pos[i].rid == c->report_ID)
				break;
			if (s->last_pos[i].rid == 0)
				break;
		}
	}
	if (i != MAXID) {
		s->last_pos[i].rid = c->report_ID;
		for (j = 0; j < ITEMTYPES; j++)
			s->last_pos[i].pos[j] = s->pos[j];
	}

	/* store next report ID */

	c->report_ID = next_rID;

	/* lookup last position for next rID */

	if (next_rID == 0) {
		i = 0;
	} else {
		for (i = 1; i != MAXID; i++) {
			if (s->last_pos[i].rid == next_rID)
				break;
			if (s->last_pos[i].rid == 0)
				break;
		}
	}
	if (i != MAXID) {
		s->last_pos[i].rid = next_rID;
		for (j = 0; j < ITEMTYPES; j++)
			s->pos[j] = s->last_pos[i].pos[j];
	} else {
		for (j = 0; j < ITEMTYPES; j++)
			s->pos[j] = 0;	/* Out of RID entries. */
	}
}

hid_data_t
hid_start_parse(report_desc_t d, int kindset, int id)
{
	struct hid_data *s;

	s = calloc(1, sizeof *s);
	if (s == NULL)
		return (NULL);
	s->start = s->p = d->data;
	s->end = d->data + d->size;
	s->kindset = kindset;
	s->reportid = id;
	s->hassavedcoll = 0;
	return (s);
}

void
hid_end_parse(hid_data_t s)
{

	if (s == NULL)
		return;

	free(s);
}

static uint8_t
hid_get_byte(struct hid_data *s, const uint16_t wSize)
{
	const uint8_t *ptr;
	uint8_t retval;

	ptr = s->p;

	/* check if end is reached */
	if (ptr == s->end)
		return (0);

	/* read out a byte */
	retval = *ptr;

	/* check if data pointer can be advanced by "wSize" bytes */
	if ((s->end - ptr) < wSize)
		ptr = s->end;
	else
		ptr += wSize;

	/* update pointer */
	s->p = ptr;

	return (retval);
}

#define REPORT_SAVED_COLL \
	do { \
		if (s->hassavedcoll) { \
			*h = s->savedcoll; \
			h->report_ID = c->report_ID; \
			s->hassavedcoll = 0; \
			return (1); \
		} \
	} while(0)

static int
hid_get_item_raw(hid_data_t s, hid_item_t *h)
{
	hid_item_t nc, *c;
	unsigned int bTag, bType, bSize;
	int32_t mask;
	int32_t dval;

	if (s == NULL)
		return (0);

	c = &s->cur[s->pushlevel];

 top:
	/* check if there is an array of items */
	if (s->icount < s->ncount) {
		REPORT_SAVED_COLL;
		/* get current usage */
		if (s->iusage < s->nusage) {
			dval = s->usages_min[s->iusage] + s->ousage;
			c->usage = dval;
			s->usage_last = dval;
			if (dval == s->usages_max[s->iusage]) {
				s->iusage ++;
				s->ousage = 0;
			} else {
				s->ousage ++;
			}
		} else {
			/* Using last usage */
			dval = s->usage_last;
		}
		s->icount ++;
		/* 
		 * Only copy HID item, increment position and return
		 * if correct kindset!
		 */
		if (s->kindset & (1 << c->kind)) {
			*h = *c;
			h->pos = s->pos[c->kind];
			s->pos[c->kind] += c->report_size * c->report_count;
			return (1);
		}
	}

	/* reset state variables */
	s->icount = 0;
	s->ncount = 0;
	s->iusage = 0;
	s->nusage = 0;
	s->susage = 0;
	s->ousage = 0;
	hid_clear_local(c);

	/* get next item */
	while (s->p != s->end) {

		bSize = hid_get_byte(s, 1);
		if (bSize == 0xfe) {
			/* long item */
			bSize = hid_get_byte(s, 1);
			bSize |= hid_get_byte(s, 1) << 8;
			bTag = hid_get_byte(s, 1);
			bType = 0xff;	/* XXX what should it be */
		} else {
			/* short item */
			bTag = bSize >> 4;
			bType = (bSize >> 2) & 3;
			bSize &= 3;
			if (bSize == 3)
				bSize = 4;
		}

		switch(bSize) {
		case 0:
			dval = 0;
			mask = 0;
			break;
		case 1:
			dval = (int8_t)hid_get_byte(s, 1);
			mask = 0xFF;
			break;
		case 2:
			dval = hid_get_byte(s, 1);
			dval |= hid_get_byte(s, 1) << 8;
			dval = (int16_t)dval;
			mask = 0xFFFF;
			break;
		case 4:
			dval = hid_get_byte(s, 1);
			dval |= hid_get_byte(s, 1) << 8;
			dval |= hid_get_byte(s, 1) << 16;
			dval |= hid_get_byte(s, 1) << 24;
			mask = 0xFFFFFFFF;
			break;
		default:
			dval = hid_get_byte(s, bSize);
			continue;
		}

		switch (bType) {
		case 0:		/* Main */
			switch (bTag) {
			case 8:	/* Input */
				c->kind = hid_input;
				c->flags = dval;
		ret:
				c->report_count = s->loc_count;
				c->report_size = s->loc_size;

				if (c->flags & HIO_VARIABLE) {
					/* range check usage count */
					if (c->report_count > 255) {
						s->ncount = 255;
					} else
						s->ncount = c->report_count;

					/*
					 * The "top" loop will return
					 * one and one item:
					 */
					c->report_count = 1;
					c->usage_minimum = 0;
					c->usage_maximum = 0;
				} else {
					s->ncount = 1;
				}
				goto top;

			case 9:	/* Output */
				c->kind = hid_output;
				c->flags = dval;
				goto ret;
			case 10:	/* Collection */
				c->kind = hid_collection;
				c->collection = dval;
				c->collevel++;
				c->usage = s->usage_last;
				nc = *c;
				if (s->hassavedcoll) {
					*h = s->savedcoll;
					h->report_ID = nc.report_ID;
					s->savedcoll = nc;
					return (1);
				} else {
					s->hassavedcoll = 1;
					s->savedcoll = nc;
				}
				goto top;
			case 11:	/* Feature */
				c->kind = hid_feature;
				c->flags = dval;
				goto ret;
			case 12:	/* End collection */
				REPORT_SAVED_COLL;
				c->kind = hid_endcollection;
				if (c->collevel == 0) {
					/* Invalid end collection. */
					return (0);
				}
				c->collevel--;
				*h = *c;
				return (1);
			default:
				break;
			}
			break;

		case 1:		/* Global */
			switch (bTag) {
			case 0:
				c->_usage_page = dval << 16;
				break;
			case 1:
				c->logical_minimum = dval;
				break;
			case 2:
				c->logical_maximum = dval;
				break;
			case 3:
				c->physical_minimum = dval;
				break;
			case 4:
				c->physical_maximum = dval;
				break;
			case 5:
				c->unit_exponent = dval;
				break;
			case 6:
				c->unit = dval;
				break;
			case 7:
				/* mask because value is unsigned */
				s->loc_size = dval & mask;
				break;
			case 8:
				hid_switch_rid(s, c, dval & mask);
				break;
			case 9:
				/* mask because value is unsigned */
				s->loc_count = dval & mask;
				break;
			case 10:	/* Push */
				s->pushlevel ++;
				if (s->pushlevel < MAXPUSH) {
					s->cur[s->pushlevel] = *c;
					/* store size and count */
					c->report_size = s->loc_size;
					c->report_count = s->loc_count;
					/* update current item pointer */
					c = &s->cur[s->pushlevel];
				}
				break;
			case 11:	/* Pop */
				s->pushlevel --;
				if (s->pushlevel < MAXPUSH) {
					c = &s->cur[s->pushlevel];
					/* restore size and count */
					s->loc_size = c->report_size;
					s->loc_count = c->report_count;
					c->report_size = 0;
					c->report_count = 0;
				}
				break;
			default:
				break;
			}
			break;
		case 2:		/* Local */
			switch (bTag) {
			case 0:
				if (bSize != 4)
					dval = (dval & mask) | c->_usage_page;

				/* set last usage, in case of a collection */
				s->usage_last = dval;

				if (s->nusage < MAXUSAGE) {
					s->usages_min[s->nusage] = dval;
					s->usages_max[s->nusage] = dval;
					s->nusage ++;
				}
				/* else XXX */

				/* clear any pending usage sets */
				s->susage = 0;
				break;
			case 1:
				s->susage |= 1;

				if (bSize != 4)
					dval = (dval & mask) | c->_usage_page;
				c->usage_minimum = dval;

				goto check_set;
			case 2:
				s->susage |= 2;

				if (bSize != 4)
					dval = (dval & mask) | c->_usage_page;
				c->usage_maximum = dval;

			check_set:
				if (s->susage != 3)
					break;

				/* sanity check */
				if ((s->nusage < MAXUSAGE) &&
				    (c->usage_minimum <= c->usage_maximum)) {
					/* add usage range */
					s->usages_min[s->nusage] =
					    c->usage_minimum;
					s->usages_max[s->nusage] =
					    c->usage_maximum;
					s->nusage ++;
				}
				/* else XXX */

				s->susage = 0;
				break;
			case 3:
				c->designator_index = dval;
				break;
			case 4:
				c->designator_minimum = dval;
				break;
			case 5:
				c->designator_maximum = dval;
				break;
			case 7:
				c->string_index = dval;
				break;
			case 8:
				c->string_minimum = dval;
				break;
			case 9:
				c->string_maximum = dval;
				break;
			case 10:
				c->set_delimiter = dval;
				break;
			default:
				break;
			}
			break;
		default:
			break;
		}
	}
	return (0);
}

int
hid_get_item(hid_data_t s, hid_item_t *h)
{
	int r;

	for (;;) {
		r = hid_get_item_raw(s, h);
		if (r <= 0 || s->reportid == -1 || h->report_ID == s->reportid)
			break;
	}
	return (r);
}

int
hid_report_size(report_desc_t r, enum hid_kind k, int id)
{
	struct hid_data *d;
	struct hid_item h;
	uint32_t temp;
	uint32_t hpos;
	uint32_t lpos;
	int report_id = 0;

	hpos = 0;
	lpos = 0xFFFFFFFF;

	memset(&h, 0, sizeof h);
	for (d = hid_start_parse(r, 1 << k, id); hid_get_item(d, &h); ) {
		if (h.kind == k) {
			/* compute minimum */
			if (lpos > h.pos)
				lpos = h.pos;
			/* compute end position */
			temp = h.pos + (h.report_size * h.report_count);
			/* compute maximum */
			if (hpos < temp)
				hpos = temp;
			if (h.report_ID != 0)
				report_id = 1;
		}
	}
	hid_end_parse(d);

	/* safety check - can happen in case of currupt descriptors */
	if (lpos > hpos)
		temp = 0;
	else
		temp = hpos - lpos;

	/* No extra byte for the reportID because the kernel skips it. */
	return ((temp + 7) / 8);
}

int
hid_locate(report_desc_t desc, unsigned int u, enum hid_kind k,
    hid_item_t *h, int id)
{
	struct hid_data *d;

	for (d = hid_start_parse(desc, 1 << k, id); hid_get_item(d, h); ) {
		if (h->kind == k && !(h->flags & HIO_CONST) && h->usage == u) {
			hid_end_parse(d);
			return (1);
		}
	}
	hid_end_parse(d);
	h->report_size = 0;
	return (0);
}
@


1.10
log
@Do not calculated the length of a report with an extra byte for the
reportID because the kernel skips it.

Problem reported and fix tested by Benjamin Baier.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.9 2014/05/12 17:03:28 mpi Exp $	*/
d70 2
d156 1
d197 10
d210 1
a210 1
	hid_item_t *c;
d223 1
d345 11
a355 2
				*h = *c;
				return (1);
d361 1
@


1.9
log
@Keep libusbhid's HID parser in sync with the kernel one.  This is mostly
a backport from FreeBSD's r205728, r224511 and 225839 without the new
functions to set/get a report ID nor the usbhidctl(1) & usbhidaction(1)
bits.

Committing now to open the "Monday's Bump Parade".
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.8 2014/05/07 01:14:21 tedu Exp $	*/
d544 2
a545 2
	/* return length in bytes rounded up */
	return ((temp + 7) / 8 + report_id);
@


1.8
log
@use calloc. from Peter Malone
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.7 2012/07/16 19:57:17 jasper Exp $	*/
a31 1
#include <sys/time.h>
d39 10
a48 1
#define MAXUSAGE 100
d50 20
a69 25
	u_char *start;
	u_char *end;
	u_char *p;
	hid_item_t cur;
	unsigned int usages[MAXUSAGE];
	int nusage;
	int minset;
	int logminsize;
	int multi;
	int multimax;
	int kindset;
	int reportid;

	/*
	 * The start of collection item has no report ID set, so save
	 * it until we know the ID.
	 */
	hid_item_t savedcoll;
	u_char hassavedcoll;
	/*
	 * Absolute data position (bits) for input/output/feature.
	 *  Assumes that hid_input, hid_output and hid_feature have
	 *  values 0, 1 and 2.
	 */
	unsigned int kindpos[3];
a71 4
static int min(int x, int y) { return x < y ? x : y; }

static int hid_get_item_raw(hid_data_t s, hid_item_t *h);

d88 54
a153 1
	s->hassavedcoll = 0;
d161 3
a163 5
	while (s->cur.next) {
		hid_item_t *hi = s->cur.next->next;
		free(s->cur.next);
		s->cur.next = hi;
	}
d167 2
a168 2
int
hid_get_item(hid_data_t s, hid_item_t *h)
d170 20
a189 1
	int r;
d191 1
a191 8
	for (;;) {
		r = hid_get_item_raw(s, h);
		if (r <= 0)
			break;
		if (h->report_ID == s->reportid || s->reportid == -1)
			break;
	}
	return (r);
a193 10
#define REPORT_SAVED_COLL \
	do { \
		if (s->hassavedcoll) { \
			*h = s->savedcoll; \
			h->report_ID = c->report_ID; \
			s->hassavedcoll = 0; \
			return (1); \
		} \
	} while(/*LINTED*/ 0)

d197 9
a205 6
	hid_item_t *c = &s->cur, *hi, nc;
	unsigned int bTag = 0, bType = 0, bSize;
	unsigned char *data;
	hid_kind_t retkind;
	unsigned char *p;
	int dval, i;
d208 16
a223 7
	if (s->multimax) {
		REPORT_SAVED_COLL;
		if (c->logical_minimum >= c->logical_maximum) {
			if (s->logminsize == 1)
				c->logical_minimum =(int8_t)c->logical_minimum;
			else if (s->logminsize == 2)
				c->logical_minimum =(int16_t)c->logical_minimum;
d225 6
a230 3
		if (s->multi < s->multimax) {
			c->usage = s->usages[min(s->multi, s->nusage-1)];
			s->multi++;
d232 2
a233 7
			/*
			 * 'multimax' is only non-zero if the current
			 *  item kind is input/output/feature
			 */
			h->pos = s->kindpos[c->kind];
			s->kindpos[c->kind] += c->report_size;
			h->next = 0;
a234 5
		} else {
			c->report_count = s->multimax;
			s->multimax = 0;
			s->nusage = 0;
			hid_clear_local(c);
a236 4
	for (;;) {
		p = s->p;
		if (p >= s->end)
			return (0);
d238 13
a250 1
		bSize = *p++;
d253 4
a256 5
			bSize = *p++;
			bSize |= *p++ << 8;
			bTag = *p++;
			data = p;
			p += bSize;
d262 2
a263 3
			if (bSize == 3) bSize = 4;
			data = p;
			p += bSize;
d265 1
a265 4
		s->p = p;
		/*
		 * The spec is unclear if the data is signed or unsigned.
		 */
d269 1
d272 2
a273 1
			dval = /*(int8_t)*/*data++;
d276 4
a279 3
			dval = *data++;
			dval |= *data++ << 8;
			dval = /*(int16_t)*/dval;
d282 5
a286 4
			dval = *data++;
			dval |= *data++ << 8;
			dval |= *data++ << 16;
			dval |= *data++ << 24;
d289 2
a290 1
			return (-1);
d294 1
a294 1
		case 0:			/* Main */
d296 2
a297 9
			case 8:		/* Input */
				retkind = hid_input;
			ret:
				if (!(s->kindset & (1 << retkind))) {
					/* Drop the items of this kind */
					s->nusage = 0;
					continue;
				}
				c->kind = retkind;
d299 4
d304 10
a313 2
					s->multimax = c->report_count;
					s->multi = 0;
d315 2
a316 12
					if (s->minset) {
						for (i = c->usage_minimum;
						    i <= c->usage_maximum; i++) {
							s->usages[s->nusage] = i;
							if (s->nusage < MAXUSAGE-1)
								s->nusage++;
						}
						c->usage_minimum = 0;
						c->usage_maximum = 0;
						s->minset = 0;
					}
					goto top;
d318 1
a318 10
					if (s->minset)
						c->usage = c->usage_minimum;
					*h = *c;
					h->next = 0;
					h->pos = s->kindpos[c->kind];
					s->kindpos[c->kind] +=
					    c->report_size * c->report_count;
					hid_clear_local(c);
					s->minset = 0;
					return (1);
d320 5
a324 2
			case 9:		/* Output */
				retkind = hid_output;
d330 3
a332 14
				nc = *c;
				hid_clear_local(c);
				/*c->report_ID = NO_REPORT_ID;*/
				s->nusage = 0;
				if (s->hassavedcoll) {
					*h = s->savedcoll;
					h->report_ID = nc.report_ID;
					s->savedcoll = nc;
					return (1);
				} else {
					s->hassavedcoll = 1;
					s->savedcoll = nc;
				}
				break;
d334 2
a335 1
				retkind = hid_feature;
a337 1
				REPORT_SAVED_COLL;
d339 4
a344 2
				/*hid_clear_local(c);*/
				s->nusage = 0;
d347 1
a347 1
				return (-2);
a357 1
				s->logminsize = bSize;
d375 2
a376 1
				c->report_size = dval;
d379 1
a379 4
				c->report_ID = dval;
				s->kindpos[hid_input] = 0;
				s->kindpos[hid_output] = 0;
				s->kindpos[hid_feature] = 0;
d382 2
a383 1
				c->report_count = dval;
d385 21
a405 10
			case 10: /* Push */
				hi = malloc(sizeof *hi);
				/* XXX unchecked malloc */
				*hi = s->cur;
				c->next = hi;
				break;
			case 11: /* Pop */
				hi = c->next;
				s->cur = *hi;
				free(hi);
d408 1
a408 1
				return (-3);
d414 11
a424 3
				c->usage = c->_usage_page | dval;
				if (s->nusage < MAXUSAGE)
					s->usages[s->nusage++] = c->usage;
d426 3
d431 7
a437 3
				s->minset = 1;
				c->usage_minimum = c->_usage_page | dval;
				break;
d439 23
a461 1
				c->usage_maximum = c->_usage_page | dval;
d496 13
d519 1
a519 1
	lpos = 0xffffffff;
d522 2
a523 2
	for (d = hid_start_parse(r, 1<<k, id); hid_get_item(d, &h); ) {
		if ((h.report_ID == id || id < 0) && h.kind == k) {
d545 1
a545 1
	return ((temp + 7) / 8);
@


1.7
log
@revert previous, it was hardly tested and is causing too many issues too close to release.

as discussed with and ok mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.5 2009/07/24 11:41:15 jsg Exp $	*/
d94 1
a94 1
	s = malloc(sizeof *s);
a96 1
	memset(s, 0, sizeof *s);
@


1.6
log
@- port multiple report ID support for HID parser from FreeBSD code
 (rev. 205728, 224511 and 225839)

- add hid_get_report_id(3) to get id of a descriptor.

- crank the major in shlib_version 3.0 -> 4.0

ok deraadt@@, mpi@@
@
text
@a40 8
#define MAXPUSH 4
#define MAXID 64
#define ITEMTYPES 3

struct hid_pos_data {
	int32_t rid;
	uint32_t pos[ITEMTYPES];
};
d42 25
a66 19
	const uint8_t *start;
	const uint8_t *end;
	const uint8_t *p;
	struct hid_item cur[MAXPUSH];
	struct hid_pos_data last_pos[MAXID];
	uint32_t pos[ITEMTYPES];
	int32_t usages_min[MAXUSAGE];
	int32_t usages_max[MAXUSAGE];
	int32_t usage_last; /* last seen usage */
	uint32_t loc_size;  /* last seen size */
	uint32_t loc_count; /* last seen count */
	uint8_t kindset;    /* we have 5 kinds so 8bits are enough */
	uint8_t pushlevel;  /* current push level */
	uint8_t ncount;	    /* end usage item count */
	uint8_t icount;	    /* current usage item count */
	uint8_t nusage;	    /* end "usages_min/max" index */
	uint8_t iusage;	    /* current "usages_min/max" index */
	uint8_t ousage;	    /* current "usages_min/max" offset */
	uint8_t susage;	    /* usage set flags */
d69 3
d76 1
a88 50
static void
hid_switch_rid(struct hid_data *s, struct hid_item *c, int32_t next_rID)
{
	uint8_t i, j;

	/* check for same report ID - optimise */
	if (c->report_ID == next_rID)
		return;

	/* save current position for current rID */
	if (c->report_ID == 0) {
		i = 0;
	} else {
		for (i = 1; i != MAXID; i++) {
			if (s->last_pos[i].rid == c->report_ID)
				break;
			if (s->last_pos[i].rid == 0)
				break;
		}
	}
	if (i != MAXID) {
		s->last_pos[i].rid = c->report_ID;
		for (j = 0; j < ITEMTYPES; j++)
			s->last_pos[i].pos[j] = s->pos[j];
	}

	/* store next report ID */
	c->report_ID = next_rID;

	/* lookup last position for next rID */
	if (next_rID == 0) {
		i = 0;
	} else {
		for (i = 1; i != MAXID; i++){
			if (s->last_pos[i].rid == next_rID)
				break;
			if (s->last_pos[i].rid == 0)
				break;
		}
	}
	if (i != MAXID) {
		s->last_pos[i].rid = next_rID;
		for (j = 0; j < ITEMTYPES; j++)
			s->pos[j] = s->last_pos[i].pos[j];
	} else {
		for (j = 0; j < ITEMTYPES; j++)
			s->pos[j] = 0; /* Out of RID entries */
	}
}

d90 1
a90 1
hid_start_parse(report_desc_t d, int kindset, int id __unused)
d101 2
d110 5
a114 3
	if (s == NULL)
		return;

d118 2
a119 2
static uint8_t
hid_get_byte(struct hid_data *s, const uint16_t wSize)
d121 1
a121 2
	const uint8_t *ptr;
	uint8_t retval;
d123 9
a131 14
	ptr = s->p;

	/* check if end is reached */
	if (ptr == s->end)
		return (0);

	/* read out a byte */
	retval = *ptr;

	/* check if data pointer can be advanced by "wSize" bytes */
	if ((s->end - ptr) < wSize)
		ptr = s->end;
	else
		ptr += wSize;
d133 9
a141 2
	/* update pointer */
	s->p = ptr;
d143 2
a144 5
	return (retval);
}

int
hid_get_item(hid_data_t s, hid_item_t *h)
d146 6
a151 9
	hid_item_t *c;
	unsigned int bTag, bType, bSize;
	int32_t mask;
	int32_t dval;

	if (s == NULL)
		return (0);

	c = &s->cur[s->pushlevel];
d154 7
a160 15
	/* check if there is an array of items */
	if (s->icount < s-> ncount) {
		/* get current usage */
		if (s->iusage < s->nusage) {
			dval = s->usages_min[s->iusage] + s->ousage;
			c->usage = dval;
			s->usage_last = dval;
			if (dval == s->usages_max[s->iusage]){
				s->iusage++;
				s->ousage = 0;
			} else
				s->ousage++;
		} else {
			/* Using last usage */
			dval = s->usage_last;
d162 3
a164 7
		s->icount++;

		/*
		 * Only copy HID item, increment position and return
		 * if correct kindset!
		 */
		if (s->kindset & (1 << c->kind)) {
d166 7
a172 2
			h->pos = s->pos[c->kind];
			s->pos[c->kind] += c->report_size * c->report_count;
d174 5
d181 4
d186 1
a186 12
	/* reset state variables */
	s->icount = 0;
	s->ncount = 0;
	s->iusage = 0;
	s->nusage = 0;
	s->susage = 0;
	s->ousage = 0;
	hid_clear_local(c);

	/* get next item */
	while (s->p != s->end) {
		bSize = hid_get_byte(s, 1);
d189 5
a193 4
			bSize = hid_get_byte(s, 1);
			bSize |= hid_get_byte(s, 1) << 8;
			bTag = hid_get_byte(s, 1);
			bType = 0xff; /* XXX what shoud it be */
d199 3
a201 2
			if (bSize == 3)
				bSize = 4;
d203 4
a206 1

a209 1
			mask = 0;
d212 1
a212 2
			dval = (int8_t)hid_get_byte(s, 1);
			mask = 0xff;
d215 3
a217 4
			dval = hid_get_byte(s, 1);
			dval |= hid_get_byte(s, 1) << 8;
			dval = (int16_t)dval;
			mask = 0xffff;
d220 4
a223 5
			dval = hid_get_byte(s, 1);
			dval |= hid_get_byte(s, 1) << 8;
			dval |= hid_get_byte(s, 1) << 16;
			dval |= hid_get_byte(s, 1) << 24;
			mask = 0xffffffff;
d226 1
a226 2
			dval = hid_get_byte(s, bSize);
			continue;
d233 1
a233 2
				c->kind = hid_input;
				c->flags =dval;
d235 7
a241 3
				c->report_count = s->loc_count;
				c->report_size = s->loc_size;

d243 2
a244 10
					/* range check usage count */
					if (c->report_count > 255) {
						s->ncount = 255;
					} else
						s->ncount = c->report_count;

					/*
					 * The "top" loop will return
					 * one and on item:
					 */
d246 12
a257 2
					c->usage_minimum = 0;
					c->usage_maximum = 0;
d259 10
a268 1
					s->ncount = 1;
a269 1
				goto top;
d271 1
a271 2
				c->kind = hid_output;
				c->flags = dval;
d277 14
a290 3
				c->usage = s->usage_last;
				*h = *c;
				return (1);
d292 1
a292 2
				c->kind = hid_feature;
				c->flags = dval;
d295 1
a296 4
				if (c->collevel == 0){
					/* invalid end collection */
					return (0);
				}
d299 2
d303 1
a303 1
				break;
d314 1
d326 1
a326 4
				if (dval > 7 && dval < 0x10)
					c->unit_exponent = -16 + dval;
				else
					c->unit_exponent = dval;
d332 1
a332 2
				/* mask because value is unsigned */
				s->loc_size = dval & mask;
d335 4
a338 1
				hid_switch_rid(s, c, dval);
d341 1
a341 2
				/* mask because value is unsigned */
				s->loc_count = dval & mask;
d344 4
a347 9
				s->pushlevel++;
				if (s->pushlevel < MAXPUSH) {
					s->cur[s->pushlevel] = *c;
					/* store size and count */
					c->report_size = s->loc_size;
					c->report_count = s->loc_count;
					/* update current item pointer */
					c = &s->cur[s->pushlevel];
				}
d350 3
a352 9
				s->pushlevel--;
				if (s->pushlevel < MAXPUSH) {
					c = &s->cur[s->pushlevel];
					/* restore size and count */
					s->loc_size = c->report_size;
					s->loc_count = c->report_count;
					c->report_size = 0;
					c->report_count = 0;
				}
d355 1
a355 1
				break;
d361 3
a363 11
				if (bSize != 4)
					dval = (dval & mask) | c->_usage_page;

				/* set last usage, in case of a collection */
				s->usage_last = dval;

				if (s->nusage < MAXUSAGE) {
					s->usages_min[s->nusage] = dval;
					s->usages_max[s->nusage] = dval;
					s->nusage++;
				}
a364 3

				/* clear any pending usage sets */
				s->susage = 0;
d367 3
a369 7
				s->susage |= 1;

				if (bSize != 4)
					dval = (dval & mask) | c->_usage_page;
				c->usage_minimum = dval;

				goto check_set;
d371 1
a371 23
				s->susage |= 2;

				if (bSize != 4)
					dval = (dval & mask) | c->_usage_page;
				c->usage_maximum = dval;

			check_set:
				if (s->susage != 3)
					break;

				/* sanity check */
				if ((s->nusage < MAXUSAGE) &&
				    (c->usage_minimum <= c->usage_maximum)){
				    /* add usage range */
				    s->usages_min[s->nusage] =
				      c->usage_minimum;
				    s->usages_max[s->nusage] =
				      c->usage_maximum;
				    s->nusage++;
				}
				/* else XXX */

				s->susage = 0;
d442 1
a442 1
	return ((temp + 7) / 8 + report_id);
@


1.5
log
@From NetBSD rev 1.5
The report size is not a local item, so don't clear it when clearing local items.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.4 2009/07/24 08:37:47 jsg Exp $	*/
d41 8
d50 19
a68 25
	u_char *start;
	u_char *end;
	u_char *p;
	hid_item_t cur;
	unsigned int usages[MAXUSAGE];
	int nusage;
	int minset;
	int logminsize;
	int multi;
	int multimax;
	int kindset;
	int reportid;

	/*
	 * The start of collection item has no report ID set, so save
	 * it until we know the ID.
	 */
	hid_item_t savedcoll;
	u_char hassavedcoll;
	/*
	 * Absolute data position (bits) for input/output/feature.
	 *  Assumes that hid_input, hid_output and hid_feature have
	 *  values 0, 1 and 2.
	 */
	unsigned int kindpos[3];
a70 3
static int min(int x, int y) { return x < y ? x : y; }

static int hid_get_item_raw(hid_data_t s, hid_item_t *h);
a74 1

d87 50
d138 1
a138 1
hid_start_parse(report_desc_t d, int kindset, int id)
a148 2
	s->reportid = id;
	s->hassavedcoll = 0;
d156 3
a158 5
	while (s->cur.next) {
		hid_item_t *hi = s->cur.next->next;
		free(s->cur.next);
		s->cur.next = hi;
	}
d162 27
d192 4
a195 1
	int r;
d197 2
a198 9
	for (;;) {
		r = hid_get_item_raw(s, h);
		if (r <= 0)
			break;
		if (h->report_ID == s->reportid || s->reportid == -1)
			break;
	}
	return (r);
}
d200 1
a200 19
#define REPORT_SAVED_COLL \
	do { \
		if (s->hassavedcoll) { \
			*h = s->savedcoll; \
			h->report_ID = c->report_ID; \
			s->hassavedcoll = 0; \
			return (1); \
		} \
	} while(/*LINTED*/ 0)

static int
hid_get_item_raw(hid_data_t s, hid_item_t *h)
{
	hid_item_t *c = &s->cur, *hi, nc;
	unsigned int bTag = 0, bType = 0, bSize;
	unsigned char *data;
	hid_kind_t retkind;
	unsigned char *p;
	int dval, i;
d203 15
a217 7
	if (s->multimax) {
		REPORT_SAVED_COLL;
		if (c->logical_minimum >= c->logical_maximum) {
			if (s->logminsize == 1)
				c->logical_minimum =(int8_t)c->logical_minimum;
			else if (s->logminsize == 2)
				c->logical_minimum =(int16_t)c->logical_minimum;
d219 7
a225 3
		if (s->multi < s->multimax) {
			c->usage = s->usages[min(s->multi, s->nusage-1)];
			s->multi++;
d227 2
a228 7
			/*
			 * 'multimax' is only non-zero if the current
			 *  item kind is input/output/feature
			 */
			h->pos = s->kindpos[c->kind];
			s->kindpos[c->kind] += c->report_size;
			h->next = 0;
a229 5
		} else {
			c->report_count = s->multimax;
			s->multimax = 0;
			s->nusage = 0;
			hid_clear_local(c);
a231 4
	for (;;) {
		p = s->p;
		if (p >= s->end)
			return (0);
d233 12
a244 1
		bSize = *p++;
d247 4
a250 5
			bSize = *p++;
			bSize |= *p++ << 8;
			bTag = *p++;
			data = p;
			p += bSize;
d256 2
a257 3
			if (bSize == 3) bSize = 4;
			data = p;
			p += bSize;
d259 1
a259 4
		s->p = p;
		/*
		 * The spec is unclear if the data is signed or unsigned.
		 */
d263 1
d266 2
a267 1
			dval = /*(int8_t)*/*data++;
d270 4
a273 3
			dval = *data++;
			dval |= *data++ << 8;
			dval = /*(int16_t)*/dval;
d276 5
a280 4
			dval = *data++;
			dval |= *data++ << 8;
			dval |= *data++ << 16;
			dval |= *data++ << 24;
d283 2
a284 1
			return (-1);
d291 2
a292 1
				retkind = hid_input;
d294 3
a296 7
				if (!(s->kindset & (1 << retkind))) {
					/* Drop the items of this kind */
					s->nusage = 0;
					continue;
				}
				c->kind = retkind;
				c->flags = dval;
d298 10
a307 2
					s->multimax = c->report_count;
					s->multi = 0;
d309 2
a310 12
					if (s->minset) {
						for (i = c->usage_minimum;
						    i <= c->usage_maximum; i++) {
							s->usages[s->nusage] = i;
							if (s->nusage < MAXUSAGE-1)
								s->nusage++;
						}
						c->usage_minimum = 0;
						c->usage_maximum = 0;
						s->minset = 0;
					}
					goto top;
d312 1
a312 10
					if (s->minset)
						c->usage = c->usage_minimum;
					*h = *c;
					h->next = 0;
					h->pos = s->kindpos[c->kind];
					s->kindpos[c->kind] +=
					    c->report_size * c->report_count;
					hid_clear_local(c);
					s->minset = 0;
					return (1);
d314 1
d316 2
a317 1
				retkind = hid_output;
d323 3
a325 14
				nc = *c;
				hid_clear_local(c);
				/*c->report_ID = NO_REPORT_ID;*/
				s->nusage = 0;
				if (s->hassavedcoll) {
					*h = s->savedcoll;
					h->report_ID = nc.report_ID;
					s->savedcoll = nc;
					return (1);
				} else {
					s->hassavedcoll = 1;
					s->savedcoll = nc;
				}
				break;
d327 2
a328 1
				retkind = hid_feature;
a330 1
				REPORT_SAVED_COLL;
d332 4
a337 2
				/*hid_clear_local(c);*/
				s->nusage = 0;
d340 1
a340 1
				return (-2);
a350 1
				s->logminsize = bSize;
d362 4
a365 1
				c->unit_exponent = dval;
d371 2
a372 1
				c->report_size = dval;
d375 1
a375 4
				c->report_ID = dval;
				s->kindpos[hid_input] = 0;
				s->kindpos[hid_output] = 0;
				s->kindpos[hid_feature] = 0;
d378 2
a379 1
				c->report_count = dval;
d382 9
a390 4
				hi = malloc(sizeof *hi);
				/* XXX unchecked malloc */
				*hi = s->cur;
				c->next = hi;
d393 9
a401 3
				hi = c->next;
				s->cur = *hi;
				free(hi);
d404 1
a404 1
				return (-3);
d410 11
a420 3
				c->usage = c->_usage_page | dval;
				if (s->nusage < MAXUSAGE)
					s->usages[s->nusage++] = c->usage;
d422 3
d427 7
a433 3
				s->minset = 1;
				c->usage_minimum = c->_usage_page | dval;
				break;
d435 23
a457 1
				c->usage_maximum = c->_usage_page | dval;
d481 1
a481 1
				return (-4);
d485 1
a485 1
			return (-5);
d488 1
d495 8
a502 2
	hid_item_t h;
	int size;
a504 1
	size = 0;
d506 11
a516 2
		if (h.report_ID == id && h.kind == k) {
			size = d->kindpos[k];
d520 9
a528 1
	return ((size + 7) / 8);
d535 1
a535 1
	hid_data_t d;
d537 1
a537 1
	for (d = hid_start_parse(desc, 1<<k, id); hid_get_item(d, h); ) {
@


1.4
log
@Global Item #3 should be Physical Minimum not Maximum according
to the HID spec.

From FreeBSD hid.c rev 1.31
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.3 2004/06/04 00:47:32 deraadt Exp $	*/
a86 1
	c->report_size = 0;
@


1.3
log
@knf + new interface: hid_start() is non-exit non-stderr spewing version of hid_init(); ok matthieu millert
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.2 2002/05/10 00:09:17 nate Exp $	*/
d321 1
a321 1
				c->physical_maximum = dval;
@


1.2
log
@Update usb userland stuff to reflect hid changes in the kernel.
This adds the new program usbhidaction which can be used to assign actions
to events that occur on a uhid device.  For example, you can now make the
volume buttons on some newer keyboards actually do something.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.1 2001/12/30 07:04:38 pvalchev Exp $	*/
d96 2
d147 1
a147 1
	hid_item_t *c;
d150 1
a150 1
	int dval;
d152 1
a152 6
	hid_item_t *hi;
	hid_item_t nc;
	int i;
	hid_kind_t retkind;

	c = &s->cur;
d169 1
a169 1
                         *  item kind is input/output/feature
d249 1
a249 2
						     i <= c->usage_maximum;
						     i++) {
d337 3
a339 3
				s->kindpos[hid_input] =
				    s->kindpos[hid_output] =
				    s->kindpos[hid_feature] = 0;
d346 1
d425 1
a425 1
	   hid_item_t *h, int id)
@


1.1
log
@Rename libusb to libusbhid, a better name, per NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD: parse.c,v 1.1 2001/09/02 17:50:40 pvalchev Exp $	*/
/*	$NetBSD: parse.c,v 1.11 2000/09/24 02:19:54 augustss Exp $	*/
d5 1
a5 1
 * Copyright (c) 1999 Lennart Augustsson <augustss@@netbsd.org>
d49 1
d53 1
d55 12
a66 4
	/* Absolute data position (bits) for input/output/feature.
           Assumes that hid_input, hid_output and hid_feature have
           values 0, 1 and 2. */
        unsigned int kindpos[3];
d71 2
d87 1
d91 1
a91 1
hid_start_parse(report_desc_t d, int kindset)
d93 1
a93 1
	struct hid_data *s = malloc(sizeof *s);
d95 1
d100 2
d120 25
d151 1
d159 7
d170 4
a173 3

			/* 'multimax' is only non-zero if the current
                           item kind is input/output/feature */
d216 1
a216 1
			dval = (int8_t)*data++;
d221 1
a221 1
			dval = (int16_t)dval;
d258 2
d269 2
a270 1
					s->kindpos[c->kind] += c->report_size * c->report_count;
d282 1
a282 1
				*h = *c;
d284 1
a284 1
				c->report_ID = NO_REPORT_ID;
d286 10
a295 1
				return (1);
d300 1
d310 1
d319 1
d341 3
d365 1
a365 5
				if (bSize == 1)
					dval = c->_usage_page | (dval&0xff);
				else if (bSize == 2)
					dval = c->_usage_page | (dval&0xffff);
				c->usage = dval;
d367 1
a367 1
					s->usages[s->nusage++] = dval;
d372 1
a372 5
				if (bSize == 1)
					dval = c->_usage_page | (dval&0xff);
				else if (bSize == 2)
					dval = c->_usage_page | (dval&0xffff);
				c->usage_minimum = dval;
d375 1
a375 5
				if (bSize == 1)
					dval = c->_usage_page | (dval&0xff);
				else if (bSize == 2)
					dval = c->_usage_page | (dval&0xffff);
				c->usage_maximum = dval;
d409 1
a409 1
hid_report_size(report_desc_t r, enum hid_kind k, int *idp)
d413 1
a413 1
	int size, id;
a414 3
	id = 0;
	if (idp)
		*idp = 0;
d416 4
a419 5
	for (d = hid_start_parse(r, 1<<k); hid_get_item(d, &h); ) {
		if (h.report_ID != NO_REPORT_ID) {
			if (idp)
				*idp = h.report_ID;
			id = 8;
a421 2

	size = d->kindpos[k] + id;
d427 2
a428 1
hid_locate(report_desc_t desc, unsigned int u, enum hid_kind k, hid_item_t *h)
d432 1
a432 1
	for (d = hid_start_parse(desc, 1<<k); hid_get_item(d, h); ) {
@

