head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.14
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.10
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.6
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.8
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.4
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.20
	OPENBSD_5_0:1.10.0.18
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.16
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.14
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.10
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.12
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@.\" @;


1.17
date	2014.05.13.14.05.02;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2014.05.12.17.03.28;	author mpi;	state Exp;
branches;
next	1.15;

1.15
date	2014.01.21.03.15.45;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2012.08.12.17.01.35;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2012.07.16.19.57.17;	author jasper;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.11.13.43.54;	author yuo;	state Exp;
branches;
next	1.11;

1.11
date	2012.02.19.15.48.48;	author stsp;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.31.19.19.38;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.12.16.17.40;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2004.06.04.08.36.09;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.04.00.47.32;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.24.18.30.32;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.06.09.09.00;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.10.00.09.17;	author nate;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.01.08.03.30;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.30.07.04.38;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.17
log
@various macro fixes;
@
text
@.\"	$OpenBSD: usbhid.3,v 1.16 2014/05/12 17:03:28 mpi Exp $
.\"	$NetBSD: usbhid.3,v 1.5 2002/02/07 07:00:52 ross Exp $
.\"
.\" Copyright (c) 1999, 2001 Lennart Augustsson <augustss@@netbsd.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: May 12 2014 $
.Dt USBHID 3
.Os
.Sh NAME
.Nm usbhid ,
.Nm hid_get_report_desc ,
.Nm hid_use_report_desc ,
.Nm hid_dispose_report_desc ,
.Nm hid_start_parse ,
.Nm hid_end_parse ,
.Nm hid_get_item ,
.Nm hid_report_size ,
.Nm hid_locate ,
.Nm hid_usage_page ,
.Nm hid_usage_in_page ,
.Nm hid_parse_usage_page ,
.Nm hid_parse_usage_in_page ,
.Nm hid_start ,
.Nm hid_init ,
.Nm hid_get_data ,
.Nm hid_set_data
.Nd USB HID access routines
.Sh SYNOPSIS
.In usbhid.h
.Ft report_desc_t
.Fn hid_get_report_desc "int file"
.Ft report_desc_t
.Fn hid_use_report_desc "unsigned char *data" "unsigned int size"
.Ft void
.Fn hid_dispose_report_desc "report_desc_t d"
.Ft hid_data_t
.Fn hid_start_parse "report_desc_t d" "int kindset" "int id"
.Ft void
.Fn hid_end_parse "hid_data_t s"
.Ft int
.Fn hid_get_item "hid_data_t s" "hid_item_t *h"
.Ft int
.Fn hid_report_size "report_desc_t d" "hid_kind_t k" "int id"
.Ft int
.Fn hid_locate "report_desc_t d" "u_int usage" "hid_kind_t k" "hid_item_t *h" "int id"
.Ft char *
.Fn hid_usage_page "int i"
.Ft char *
.Fn hid_usage_in_page "u_int u"
.Ft int
.Fn hid_parse_usage_page "const char *"
.Ft char *
.Fn hid_parse_usage_in_page "const char *"
.Ft void
.Fn hid_init "char *file"
.Ft int
.Fn hid_start "char *file"
.Ft int
.Fn hid_get_data "void *data" "hid_item_t *h"
.Ft void
.Fn hid_set_data "void *data" "hid_item_t *h" "u_int data"
.Sh DESCRIPTION
The
.Nm
library provides routines to extract data from USB Human Interface Devices.
.Ss INTRODUCTION
USB HID devices send and receive data laid out in a device dependent way.
The
.Nm
library contains routines to extract the
.Em report descriptor
which contains the data layout information and then use this information.
.Pp
The routines can be divided into four parts: extraction of the descriptor,
parsing of the descriptor, translating to/from symbolic names, and
data manipulation.
.Ss DESCRIPTOR FUNCTIONS
A report descriptor can be obtained by calling
.Fn hid_get_report_desc
with a file descriptor obtained by opening a
.Xr uhid 4
device.
Alternatively a data buffer containing the report descriptor can be passed into
.Fn hid_use_report_desc .
The data is copied into an internal structure.
When the report descriptor is no longer needed it should be freed by calling
.Fn hid_dispose_report_desc .
The type
.Fa report_desc_t
is opaque and should be used when calling the parsing functions.
.Fn hid_get_report_desc
and
.Fn hid_use_report_desc
return
.Fa NULL
on failure.
.Ss DESCRIPTOR PARSING FUNCTIONS
To parse the report descriptor the
.Fn hid_start_parse
function should be called with a report descriptor and a set that
describes which items that are interesting.
The set is obtained by or-ing together values
.Fa (1 << k)
where
.Fa k
is an item of type
.Fa hid_kind_t .
The desired report ID, or \-1
to obtain items of all report IDs,
is given by
.Fa id .
The function returns
.Fa NULL
if the initialization fails, otherwise an opaque value to be used
in subsequent calls.
After parsing the
.Fn hid_end_parse
function should be called to free internal data structures.
.Pp
To iterate through all the items in the report descriptor,
.Fn hid_get_item
should be called while it returns a value greater than 0.
When the report descriptor ends it will return 0; a syntax
error within the report descriptor will cause a return value less
than 0.
The struct pointed to by
.Fa h
will be filled with the relevant data for the item.
The definition of
.Fa hid_item_t
can be found in
.In usbhid.h
and the meaning of the components in the USB HID documentation.
.Pp
Data should be read/written to the device in the size of
the report.
The size of a report (of a certain kind) can be computed by the
.Fn hid_report_size
function.
If the report is prefixed by an ID byte it is given by
.Fa id .
.Pp
To locate a single item the
.Fn hid_locate
function can be used.
It should be given the usage code of
the item and its kind and it will fill the item and return
non-zero if the item was found.
.Ss NAME TRANSLATION FUNCTIONS
The function
.Fn hid_usage_page
will return the symbolic name of a usage page, and the function
.Fn hid_usage_in_page
will return the symbolic name of the usage within the page.
Both these functions may return a pointer to static data.
.Pp
The functions
.Fn hid_parse_usage_page
and
.Fn hid_parse_usage_in_page
are the inverses of
.Fn hid_usage_page
and
.Fn hid_usage_in_page .
They take a usage string and return the number of the usage, or \-1
if it cannot be found.
.Pp
Before any of these functions can be called the usage table
must be parsed, this is done by calling
.Fn hid_start
with the name of the table.
Passing
.Fa NULL
to this function will cause it to use the default table.
A return value of \-1 indicates that an error has occurred, and
.Va errno
is set.
.Ss DATA EXTRACTION FUNCTIONS
Given the data obtained from a HID device and an item in the
report descriptor the
.Fn hid_get_data
function extracts the value of the item.
Conversely
.Fn hid_set_data
can be used to put data into a report (which must be zeroed first).
.Sh FILES
.Pa /usr/share/misc/usb_hid_usages
The default HID usage table.
.\" .Sh EXAMPLES
.Sh SEE ALSO
The USB specifications can be found at:
.Lk http://www.usb.org/developers/docs/
.Pp
.Xr uhid 4 ,
.Xr usb 4
.Sh HISTORY
The
.Nm
library first appeared in
.Ox 3.0 .
.Sh BUGS
This man page is woefully incomplete.
@


1.16
log
@Keep libusbhid's HID parser in sync with the kernel one.  This is mostly
a backport from FreeBSD's r205728, r224511 and 225839 without the new
functions to set/get a report ID nor the usbhidctl(1) & usbhidaction(1)
bits.

Committing now to open the "Monday's Bump Parade".
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.15 2014/01/21 03:15:45 schwarze Exp $
d28 1
a28 1
.Dd $Mdocdate: January 21 2014 $
d51 1
a51 1
.Fd #include \*[Lt]usbhid.h\*[Gt]
d125 1
a125 1
.Fa "(1 \*[Lt]\*[Lt] k)"
d130 1
a130 2
The desired report ID, or
.Dv -1
d213 1
a213 3
The
.Tn USB
specifications can be found at:
@


1.15
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.14 2012/08/12 17:01:35 schwarze Exp $
d28 1
a28 1
.Dd $Mdocdate: August 12 2012 $
d130 4
a133 1
The report ID (if present) is given by
@


1.14
log
@Use .Lk for HTTP hyperlinks, not .Pa.
Most of the patch from Arto Jonsson <ajonsson at kapsi dot fi>.
jmc@@ agrees in principle that .Lk is the right macro to use.

While here, update a few broken links,
and add missing markup at a few places.
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.13 2012/07/16 19:57:17 jasper Exp $
d28 1
a28 1
.Dd $Mdocdate: July 16 2012 $
d152 1
a152 1
.Aq Pa usbhid.h
@


1.13
log
@revert previous, it was hardly tested and is causing too many issues too close to release.

as discussed with and ok mpi@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.11 2012/02/19 15:48:48 stsp Exp $
d28 1
a28 1
.Dd $Mdocdate: February 19 2012 $
d214 1
a214 1
.Pa http://www.usb.org/developers/docs/
@


1.12
log
@- port multiple report ID support for HID parser from FreeBSD code
 (rev. 205728, 224511 and 225839)

- add hid_get_report_id(3) to get id of a descriptor.

- crank the major in shlib_version 3.0 -> 4.0

ok deraadt@@, mpi@@
@
text
@a33 1
.Nm hid_get_report_id ,
a53 2
.Ft int
.Fn hid_get_report_id "int file"
a99 2
The report descripor ID can be obtained by calling
.Fn hid_get_report_id .
@


1.11
log
@Fix return value documentation errors in usbhid(3).
hid_dispose_report_desc() returns void, it can't return NULL on failure.
hid_get_report_desc() and hid_use_report_desc() return NULL on failure but
this was not documented.
ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.10 2007/05/31 19:19:38 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 31 2007 $
d34 1
d55 2
d103 2
@


1.10
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.9 2005/10/12 16:17:40 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate$
d113 6
a118 4
If
.Fn hid_dispose_report_desc
fails it will return
.Fa NULL .
@


1.9
log
@add hid_parse_usage_page and hid_parse_usage_in_page to .Nm list;
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.8 2004/06/04 08:36:09 jmc Exp $
d28 1
a28 1
.Dd December 29, 2001
@


1.8
log
@- escape minus sign
- occured -> occurred
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.7 2004/06/04 00:47:32 deraadt Exp $
d43 2
@


1.7
log
@knf + new interface: hid_start() is non-exit non-stderr spewing version of hid_init(); ok matthieu millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.6 2003/05/24 18:30:32 jmc Exp $
d181 1
a181 1
They take a usage string and return the number of the usage, or -1
d191 1
a191 1
A return value of -1 indicates that an error has occured, and
@


1.6
log
@- typos;
- new sentence, new line;
- whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.5 2003/05/06 09:09:00 jmc Exp $
d43 1
d77 2
d186 1
a186 1
.Fn hid_init
d191 3
@


1.5
log
@updated URL for USB specification from Leandro Costa
new sentence, new line
.Pa for URL is clearer
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.4 2002/05/10 00:09:17 nate Exp $
d84 1
a84 1
USB HID devices send and receive data layed out in a device dependent way.
d123 1
a123 1
The report id (if present) is given by
d133 1
a133 1
To iterate through all the items in the report descriptor
d136 1
a136 1
When the report descriptor ends it will returns 0; a syntax
d145 1
a145 1
.Pa \*[Lt]usbhid.h\*[Gt]
@


1.4
log
@Update usb userland stuff to reflect hid changes in the kernel.
This adds the new program usbhidaction which can be used to assign actions
to events that occur on a uhid device.  For example, you can now make the
volume buttons on some newer keyboards actually do something.
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.3 2002/05/01 08:03:30 mpech Exp $
d84 2
a85 2
USB HID devices send and receive data layed out in a device dependent
way.  The
d204 1
a204 1
.Dv http://www.usb.org/developers/docs.html .
@


1.3
log
@o) start new sentence on a new line;
o) always close .Bl tags;
o) fix usage of .Xr;

millert@@ ok
@
text
@d1 2
a2 2
.\"	$OpenBSD: usbhid.3,v 1.2 2002/04/30 16:31:42 mpech Exp $
.\"	$NetBSD: usb.3,v 1.14 2001/04/09 12:09:49 wiz Exp $
d4 1
a4 1
.\" Copyright (c) 1999 Lennart Augustsson <augustss@@netbsd.org>
d28 1
a28 1
.Dd May 11, 1999
d48 1
a48 1
.Fd #include <usbhid.h>
d56 1
a56 1
.Fn hid_start_parse "report_desc_t d" "int kindset"
d62 1
a62 1
.Fn hid_report_size "report_desc_t d" "hid_kind_t k" "int *idp"
d64 1
a64 1
.Fn hid_locate "report_desc_t d" "u_int usage" "hid_kind_t k" "hid_item_t *h"
d118 1
a118 1
.Fa "(1 << k)"
d123 2
d145 1
a145 1
.Pa <usbhid.h>
d153 2
a154 3
If the report is prefixed by an ID byte it is stored at
.Fa idp ,
otherwise it will contain 0.
a195 2
.Sh EXAMPLES
Not yet.
d199 1
a199 2
.Sh BUGS
This man page is woefully incomplete.
d204 1
a204 1
.Dv http://www.usb.org/developers/docs.html
d213 2
@


1.2
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: usbhid.3,v 1.1 2001/12/30 07:04:38 pvalchev Exp $
d99 2
a100 2
device. Alternatively a data buffer containing the report descriptor can be
passed into
d102 2
a103 2
The data is copied into an internal structure. When the report descriptor
is no longer needed it should be freed by calling
d116 2
a117 2
describes which items that are interesting.  The set is obtained
by or-ing together values
d147 2
a148 2
the report.  The size of a report (of a certain kind) can be
computed by the
d150 2
a151 2
function.  If the report is prefixed by an ID byte it is
stored at
d157 2
a158 1
function can be used.  It should be given the usage code of
d183 2
a184 1
with the name of the table.  Passing
@


1.1
log
@Rename libusb to libusbhid, a better name, per NetBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: usb.3,v 1.3 2001/09/25 03:31:59 pvalchev Exp $
a159 1
.Pp
@

