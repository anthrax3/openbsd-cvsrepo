head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.12
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.8
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.4
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.10
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.8
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.14
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.12
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.8
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.10
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2014.10.08.04.49.36;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	VTCQ7qD4R1wcI23Q;

1.15
date	2013.11.29.19.00.51;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2011.04.06.11.36.25;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.03.14.26.54;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2007.03.20.03.42.52;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.27.15.26.25;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.30.06.39.36;	author pat;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.21.21.38.55;	author jaredy;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.18.03.34.22;	author dhill;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.10.22.24.52;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.04.00.47.32;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.20.18.33.41;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.19.07.12.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.11.05.20.19;	author jsyn;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.10.00.09.17;	author nate;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.30.07.04.38;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.16
log
@use reallocarray(); ok doug
@
text
@/*	$OpenBSD: usage.c,v 1.15 2013/11/29 19:00:51 deraadt Exp $	*/
/*	$NetBSD: usage.c,v 1.1 2001/12/28 17:45:27 augustss Exp $	*/

/*
 * Copyright (c) 1999 Lennart Augustsson <augustss@@netbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#include "usbhid.h"

#define _PATH_HIDTABLE "/usr/share/misc/usb_hid_usages"

struct usage_in_page {
	const char *name;
	int usage;
};

static struct usage_page {
	const char *name;
	int usage;
	struct usage_in_page *page_contents;
	int pagesize, pagesizemax;
} *pages;
static int npages, npagesmax;

#ifdef DEBUG
void
dump_hid_table(void)
{
	int i, j;

	for (i = 0; i < npages; i++) {
		printf("%d\t%s\n", pages[i].usage, pages[i].name);
		for (j = 0; j < pages[i].pagesize; j++) {
			printf("\t%d\t%s\n", pages[i].page_contents[j].usage,
			    pages[i].page_contents[j].name);
		}
	}
}
#endif

void
hid_init(const char *hidname)
{
	if (hid_start(hidname) == -1)
		errx(1, "hid_init: failed");
}

int
hid_start(const char *hidname)
{
	char line[100], name[100], *p, *n;
	struct usage_page *curpage = NULL;
	int lineno, no;
	FILE *f;

	if (hidname == NULL)
		hidname = _PATH_HIDTABLE;

	f = fopen(hidname, "r");
	if (f == NULL)
		return -1;
	for (lineno = 1; ; lineno++) {
		if (fgets(line, sizeof line, f) == NULL)
			break;
		if (line[0] == '#')
			continue;
		for (p = line; isspace((unsigned char)*p); p++)
			;
		if (!*p)
			continue;
		if (sscanf(line, " * %99[^\n]", name) == 1)
			no = -1;
		else if (sscanf(line, " 0x%x %99[^\n]", &no, name) != 2 &&
		    sscanf(line, " %d %99[^\n]", &no, name) != 2) {
			warnx("file %s, line %d, syntax error",
			    hidname, lineno);
			errno = EINVAL;
			goto fail;
		}
		for (p = name; *p; p++)
			if (isspace((unsigned char)*p) || *p == '.')
				*p = '_';
		n = strdup(name);
		if (!n)
			goto fail;

		if (isspace((unsigned char)line[0])) {
			if (!curpage) {
				warnx("file %s, line %d, syntax error",
				    hidname, lineno);
				free(n);
				errno = EINVAL;
				goto fail;
			}
			if (curpage->pagesize >= curpage->pagesizemax) {
				void *new;
				int len;

				len = curpage->pagesizemax + 10;
				new = reallocarray(curpage->page_contents,
				    len, sizeof(struct usage_in_page));
				if (!new) {
					free(curpage->page_contents);
					curpage->page_contents = NULL;
					free(n);
					goto fail;
				}
				curpage->pagesizemax = len;
				curpage->page_contents = new;
			}
			curpage->page_contents[curpage->pagesize].name = n;
			curpage->page_contents[curpage->pagesize].usage = no;
			curpage->pagesize++;
		} else {
			if (npages >= npagesmax) {
				int len;
				void *new;

				if (pages == NULL) {
					len = 5;
					pages = calloc(len,
					    sizeof (struct usage_page));
				} else {
					len = npagesmax * 5;
					new = reallocarray(pages,
					    len, sizeof(struct usage_page));
					if (!new) {
						free(n);
						goto fail;
					}
					pages = new;
					bzero(pages + npagesmax,
					    (len - npagesmax) *
					    sizeof(struct usage_page));
				}
				if (!pages) {
					free(n);
					goto fail;
				}
				npagesmax = len;
			}
			curpage = &pages[npages++];
			curpage->name = n;
			curpage->usage = no;
			curpage->pagesize = 0;
			curpage->pagesizemax = 10;
			curpage->page_contents = calloc(curpage->pagesizemax,
			    sizeof (struct usage_in_page));
			if (!curpage->page_contents)
				goto fail;
		}
	}
	fclose(f);
#ifdef DEBUG
	dump_hid_table();
#endif
	return 0;

fail:
	if (f)
		fclose(f);
	if (pages) {
		for (no = 0; no < npages; no++) {
			if (pages[no].name)
				free((char *)pages[no].name);
			if (pages[no].page_contents)
				free((char *)pages[no].page_contents);
		}
		free(pages);
		pages = NULL;
	}
	npages = 0;
	npagesmax = 0;
	return -1;
}

const char *
hid_usage_page(int i)
{
	static char b[10];
	int k;

	if (!pages)
		return NULL;

	for (k = 0; k < npages; k++)
		if (pages[k].usage == i)
			return pages[k].name;
	snprintf(b, sizeof b, "0x%04x", i);
	return b;
}

const char *
hid_usage_in_page(unsigned int u)
{
	int i = HID_USAGE(u), j, k, us;
	int page = HID_PAGE(u);
	static char b[100];

	for (k = 0; k < npages; k++)
		if (pages[k].usage == page)
			break;
	if (k >= npages)
		goto bad;
	for (j = 0; j < pages[k].pagesize; j++) {
		us = pages[k].page_contents[j].usage;
		if (us == -1) {
			snprintf(b, sizeof b,
			    pages[k].page_contents[j].name, i);
			return b;
		}
		if (us == i)
			return pages[k].page_contents[j].name;
	}
 bad:
	snprintf(b, sizeof b, "0x%04x", i);
	return b;
}

int
hid_parse_usage_page(const char *name)
{
	int k;

	if (!pages)
		return 0;

	for (k = 0; k < npages; k++)
		if (strcmp(pages[k].name, name) == 0)
			return pages[k].usage;
	return -1;
}

/* XXX handle hex */
int
hid_parse_usage_in_page(const char *name)
{
	const char *sep;
	unsigned int l;
	int k, j;

	sep = strchr(name, ':');
	if (sep == NULL)
		return -1;
	l = sep - name;
	for (k = 0; k < npages; k++)
		if (strncmp(pages[k].name, name, l) == 0)
			goto found;
	return -1;
 found:
	sep++;
	for (j = 0; j < pages[k].pagesize; j++)
		if (strcmp(pages[k].page_contents[j].name, sep) == 0)
			return (pages[k].usage << 16) |
			    pages[k].page_contents[j].usage;
	return -1;
}
@


1.15
log
@fairly simple unsigned char casts for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.14 2011/04/06 11:36:25 miod Exp $	*/
d129 2
a130 2
				new = realloc(curpage->page_contents,
				    len * sizeof (struct usage_in_page));
d154 2
a155 2
					new = realloc(pages,
					    len * sizeof (struct usage_page));
@


1.14
log
@Avoid using NULL in non-pointer contexts: use 0 for integer values and '\0'
for chars.
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.13 2007/09/03 14:26:54 deraadt Exp $	*/
d96 1
a96 1
		for (p = line; isspace(*p); p++)
d110 1
a110 1
			if (isspace(*p) || *p == '.')
d116 1
a116 1
		if (isspace(line[0])) {
@


1.13
log
@malloc(n * m) -> calloc(n, m); ok espie
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.12 2007/03/20 03:42:52 tedu Exp $	*/
d255 1
a255 1
		return NULL;
@


1.12
log
@remove some bogus *p from charles longeau
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.11 2006/10/27 15:26:25 deraadt Exp $	*/
d176 1
a176 1
			curpage->page_contents = malloc(curpage->pagesizemax *
@


1.11
log
@actually the format strings do come from the usb_hid_usages file;
from janus@@errornet.de
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.10 2006/03/30 06:39:36 pat Exp $	*/
d96 1
a96 1
		for (p = line; *p && isspace(*p); p++)
@


1.10
log
@Fix a bzero() misuse; ok otto@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.9 2006/03/21 21:38:55 jaredy Exp $	*/
d237 1
a237 1
			snprintf(b, sizeof b, "%s %d",
@


1.9
log
@- plug memleak when handling reallocation failure in hid_start()
- avoid NULL dereference while reclaiming memory during error
  handling in hid_start()

ok ray dhill
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.8 2006/03/18 03:34:22 dhill Exp $	*/
d162 2
a163 1
					    npagesmax - npagesmax);
@


1.8
log
@Plug a memleak

ok ray@@ "Wow, no kidding." deraaadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.7 2005/02/10 22:24:52 matthieu Exp $	*/
d156 2
a157 1
					if (!new)
d159 1
d190 9
a198 5
	for (no = 0; no < npages; no++) {
		if (pages[no].name)
			free((char *)pages[no].name);
		if (pages[no].page_contents)
			free((char *)pages[no].page_contents);
a199 2
	free(pages);
	pages = NULL;
@


1.7
log
@Fix a realloc() failure bug introduced in previous version.
Found by Andey Matveev.
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.6 2004/06/04 00:47:32 deraadt Exp $	*/
d188 1
a188 1
	for (no = 0; no++; no < npages) {
@


1.6
log
@knf + new interface: hid_start() is non-exit non-stderr spewing version of hid_init(); ok matthieu millert
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.5 2003/12/20 18:33:41 matthieu Exp $	*/
d131 1
a131 1
				if (!curpage->page_contents) {
@


1.5
log
@Fix unbounded scanf()'s. From Jared Yanovich. Ok tedu@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.4 2002/06/19 07:12:42 deraadt Exp $	*/
d35 1
d64 1
a64 1
			       pages[i].page_contents[j].name);
d73 10
a83 4
	char line[100], name[100], *p, *n;
	int no;
	int lineno;
	struct usage_page *curpage = 0;
d85 1
a85 1
	if (hidname == 0)
d90 1
a90 1
		err(1, "%s", hidname);
d103 6
a108 3
			 sscanf(line, " %d %99[^\n]", &no, name) != 2)
			errx(1, "file %s, line %d, syntax error",
			     hidname, lineno);
d114 2
a115 1
			err(1, "strdup");
d117 7
a123 3
			if (!curpage)
				errx(1, "file %s, line %d, syntax error",
				     hidname, lineno);
d125 14
a138 7
				curpage->pagesizemax += 10;
				curpage->page_contents =
					realloc(curpage->page_contents,
						curpage->pagesizemax *
						sizeof (struct usage_in_page));
				if (!curpage->page_contents)
					err(1, "realloc");
d145 7
a151 4
				if (pages == 0) {
					npagesmax = 5;
					pages = malloc(npagesmax *
						  sizeof (struct usage_page));
d153 8
a160 4
					npagesmax += 5;
					pages = realloc(pages,
						   npagesmax *
						   sizeof (struct usage_page));
d162 5
a166 2
				if (!pages)
					err(1, "alloc");
d173 2
a174 3
			curpage->page_contents =
				malloc(curpage->pagesizemax *
				       sizeof (struct usage_in_page));
d176 1
a176 1
				err(1, "malloc");
d183 16
d208 1
a208 1
		errx(1, "no hid table");
d220 1
a221 1
	int i = HID_USAGE(u);
a222 1
	int j, k, us;
d232 1
a232 1
			snprintf(b, sizeof b, "%s %d", 
d250 1
a250 1
		errx(1, "no hid table");
d263 1
a264 1
	unsigned int l;
d278 3
a280 2
			return (pages[k].usage << 16) | pages[k].page_contents[j].usage;
	return (-1);
@


1.4
log
@use more snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.3 2002/06/11 05:20:19 jsyn Exp $	*/
d93 1
a93 1
		if (sscanf(line, " * %[^\n]", name) == 1)
d95 2
a96 2
		else if (sscanf(line, " 0x%x %[^\n]", &no, name) != 2 &&
			 sscanf(line, " %d %[^\n]", &no, name) != 2)
@


1.3
log
@strike newline from err(3) functions; ok nate@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.2 2002/05/10 00:09:17 nate Exp $	*/
d166 1
a166 1
	sprintf(b, "0x%04x", i);
d194 1
a194 1
	sprintf(b, "0x%04x", i);
@


1.2
log
@Update usb userland stuff to reflect hid changes in the kernel.
This adds the new program usbhidaction which can be used to assign actions
to events that occur on a uhid device.  For example, you can now make the
volume buttons on some newer keyboards actually do something.
@
text
@d1 1
a1 1
/*	$OpenBSD: usage.c,v 1.1 2001/12/30 07:04:38 pvalchev Exp $	*/
d97 1
a97 1
			errx(1, "file %s, line %d, syntax error\n",
d107 1
a107 1
				errx(1, "file %s, line %d, syntax error\n",
d161 1
a161 1
		errx(1, "no hid table\n");
d204 1
a204 1
		errx(1, "no hid table\n");
@


1.1
log
@Rename libusb to libusbhid, a better name, per NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD: usage.c,v 1.2 2001/09/03 11:19:05 deraadt Exp $	*/
/*	$NetBSD: usage.c,v 1.11 2001/01/09 15:59:47 augustss Exp $	*/
d166 1
a166 1
	snprintf(b, sizeof b, "0x%04x", i);
d186 1
a186 1
			snprintf(b, sizeof b, "%s %d",
d194 1
a194 1
	snprintf(b, sizeof b, "0x%04x", i);
d216 1
a216 1
	const char *sep = strchr(name, ':');
d220 1
@

