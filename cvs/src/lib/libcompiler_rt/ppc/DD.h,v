head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	LIBCOMPILER_RT_3_9_0:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.05.11.36.22;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	CrEv1mwcZ6hJ3tn8;

1.1.1.1
date	2016.09.05.11.36.22;	author pascal;	state Exp;
branches;
next	;
commitid	CrEv1mwcZ6hJ3tn8;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef COMPILERRT_DD_HEADER
#define COMPILERRT_DD_HEADER

#include "../int_lib.h"

typedef union {
	long double ld;
	struct {
		double hi;
		double lo;
	}s;
} DD;

typedef union { 
	double d;
	uint64_t x;
} doublebits;

#define LOWORDER(xy,xHi,xLo,yHi,yLo) \
	(((((xHi)*(yHi) - (xy)) + (xHi)*(yLo)) + (xLo)*(yHi)) + (xLo)*(yLo))

static __inline ALWAYS_INLINE double local_fabs(double x) {
  doublebits result = {.d = x};
  result.x &= UINT64_C(0x7fffffffffffffff);
  return result.d;
}

static __inline ALWAYS_INLINE double high26bits(double x) {
  doublebits result = {.d = x};
  result.x &= UINT64_C(0xfffffffff8000000);
  return result.d;
}

static __inline ALWAYS_INLINE int different_sign(double x, double y) {
  doublebits xsignbit = {.d = x}, ysignbit = {.d = y};
  int result = (int)(xsignbit.x >> 63) ^ (int)(ysignbit.x >> 63);
  return result;
}

long double __gcc_qadd(long double, long double);
long double __gcc_qsub(long double, long double);
long double __gcc_qmul(long double, long double);
long double __gcc_qdiv(long double, long double);

#endif /* COMPILERRT_DD_HEADER */
@


1.1.1.1
log
@Import libcompiler_rt 3.9.0, LLVM's replacement for libgcc.

This is the lib/builtin directory of the compiler-rt source tarball.

comments/ok patrick@@, ok kettenis@@
@
text
@@
