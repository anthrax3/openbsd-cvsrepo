head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.6
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	LIBCOMPILER_RT_3_9_0:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.05.11.36.22;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	CrEv1mwcZ6hJ3tn8;

1.1.1.1
date	2016.09.05.11.36.22;	author pascal;	state Exp;
branches;
next	;
commitid	CrEv1mwcZ6hJ3tn8;


desc
@@



1.1
log
@Initial revision
@
text
@/* This file is distributed under the University of Illinois Open Source
 * License. See LICENSE.TXT for details.
 */

/* long double __gcc_qmul(long double x, long double y);
 * This file implements the PowerPC 128-bit double-double multiply operation.
 * This implementation is shamelessly cribbed from Apple's DDRT, circa 1993(!)
 */

#include "DD.h"

long double __gcc_qmul(long double x, long double y)
{	
	static const uint32_t infinityHi = UINT32_C(0x7ff00000);
	DD dst = { .ld = x }, src = { .ld = y };
	
	register double A = dst.s.hi, a = dst.s.lo,
					B = src.s.hi, b = src.s.lo;
	
	double aHi, aLo, bHi, bLo;
    double ab, tmp, tau;
	
	ab = A * B;
	
	/* Detect special cases */
	if (ab == 0.0) {
		dst.s.hi = ab;
		dst.s.lo = 0.0;
		return dst.ld;
	}
	
	const doublebits abBits = { .d = ab };
	if (((uint32_t)(abBits.x >> 32) & infinityHi) == infinityHi) {
		dst.s.hi = ab;
		dst.s.lo = 0.0;
		return dst.ld;
	}
	
	/* Generic cases handled here. */
    aHi = high26bits(A);
    bHi = high26bits(B);
    aLo = A - aHi;
    bLo = B - bHi;
	
    tmp = LOWORDER(ab, aHi, aLo, bHi, bLo);
    tmp += (A * b + a * B);
    tau = ab + tmp;
	
    dst.s.lo = (ab - tau) + tmp;
    dst.s.hi = tau;
	
    return dst.ld;
}
@


1.1.1.1
log
@Import libcompiler_rt 3.9.0, LLVM's replacement for libgcc.

This is the lib/builtin directory of the compiler-rt source tarball.

comments/ok patrick@@, ok kettenis@@
@
text
@@
