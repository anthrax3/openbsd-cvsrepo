head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5;
locks; strict;
comment	@# @;


1.10
date	2017.09.08.19.04.00;	author naddy;	state Exp;
branches;
next	1.9;
commitid	03AMJS8cCZKNwyFg;

1.9
date	2017.08.04.12.00.59;	author kettenis;	state Exp;
branches;
next	1.8;
commitid	p2GRBU7YLTZKfzoR;

1.8
date	2017.05.09.21.09.27;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	b9lS4hSSdQ5ZXEGr;

1.7
date	2017.04.17.15.53.21;	author kettenis;	state Exp;
branches;
next	1.6;
commitid	CwS5CiKF5Bc2ksoZ;

1.6
date	2017.04.09.21.47.05;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	k27vkFzw4lp5ZQR0;

1.5
date	2017.01.20.07.55.20;	author patrick;	state Exp;
branches;
next	1.4;
commitid	ntx2PLMFKhflbsTe;

1.4
date	2017.01.11.14.18.17;	author patrick;	state Exp;
branches;
next	1.3;
commitid	LnX2FcN7Hke8YRJj;

1.3
date	2016.09.19.12.19.34;	author pascal;	state Exp;
branches;
next	1.2;
commitid	NSQgzrMPCOpB5hVR;

1.2
date	2016.09.19.11.26.43;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	aikPOsHxj5HMbSjC;

1.1
date	2016.09.05.11.38.16;	author pascal;	state Exp;
branches;
next	;
commitid	hHFjdo8Up8jZ1rDT;


desc
@@


1.10
log
@In compiler-rt, a few assembler implementations for i386 floating point
conversion functions use SSE2 instructions, but these are not guarded by
#ifdef __SSE2__, and there is no implementation using general purpose
registers.  For these functions, use the generic C variants instead,
otherwise they will cause SIGILL on older processors.

From FreeBSD; ok deraadt@@ mlarkin@@ patrick@@
@
text
@# $OpenBSD: Makefile,v 1.9 2017/08/04 12:00:59 kettenis Exp $

.include <bsd.own.mk>

.if ${COMPILER_VERSION:L} != "clang"
CC=		clang
CXX=		clang++
.endif

.if ${BUILD_CLANG:L} == "yes"

LIB=	compiler_rt
NOPIC=
NOPROFILE=

CFLAGS+=	-fPIC -std=gnu99 -fvisibility=hidden -fno-stack-protector
CPPFLAGS+=	-DVISIBILITY_HIDDEN

.if ${MACHINE_ARCH} == "amd64"
RTARCH=	x86_64
.elif ${MACHINE_ARCH} == "powerpc"
RTARCH=	ppc
.else
RTARCH=	${MACHINE_ARCH}
.endif

.PATH: ${.CURDIR}/${RTARCH}

GEN_SRCS=	absvdi2 \
		absvsi2 \
		absvti2 \
		adddf3 \
		addsf3 \
		addtf3 \
		addvdi3 \
		addvsi3 \
		addvti3 \
		apple_versioning \
		ashldi3 \
		ashlti3 \
		ashrdi3 \
		ashrti3 \
		atomic \
		clear_cache \
		clzdi2 \
		clzsi2 \
		clzti2 \
		cmpdi2 \
		cmpti2 \
		comparedf2 \
		comparesf2 \
		cpu_model \
		ctzdi2 \
		ctzsi2 \
		ctzti2 \
		divdc3 \
		divdf3 \
		divdi3 \
		divmoddi4 \
		divmodsi4 \
		divsc3 \
		divsf3 \
		divsi3 \
		divtc3 \
		divti3 \
		divtf3 \
		divxc3 \
		emutls \
		enable_execute_stack \
		eprintf \
		extendsfdf2 \
		extendhfsf2 \
		ffsdi2 \
		ffsti2 \
		fixdfdi \
		fixdfsi \
		fixdfti \
		fixsfdi \
		fixsfsi \
		fixsfti \
		fixunsdfdi \
		fixunsdfsi \
		fixunsdfti \
		fixunssfdi \
		fixunssfsi \
		fixunssfti \
		fixunsxfdi \
		fixunsxfsi \
		fixunsxfti \
		fixxfdi \
		fixxfti \
		floatsidf \
		floatsisf \
		floattidf \
		floattisf \
		floattixf \
		floatunsidf \
		floatunsisf \
		floatuntidf \
		floatuntisf \
		floatuntixf \
		gcc_personality_v0 \
		int_util \
		lshrdi3 \
		lshrti3 \
		moddi3 \
		modsi3 \
		modti3 \
		muldc3 \
		muldf3 \
		muldi3 \
		mulodi4 \
		mulosi4 \
		muloti4 \
		mulsc3 \
		mulsf3 \
		multi3 \
		multf3 \
		mulvdi3 \
		mulvsi3 \
		mulvti3 \
		mulxc3 \
		negdf2 \
		negdi2 \
		negsf2 \
		negti2 \
		negvdi2 \
		negvsi2 \
		negvti2 \
		paritydi2 \
		paritysi2 \
		parityti2 \
		popcountdi2 \
		popcountsi2 \
		popcountti2 \
		powidf2 \
		powisf2 \
		powitf2 \
		powixf2 \
		subdf3 \
		subsf3 \
		subvdi3 \
		subvsi3 \
		subvti3 \
		subtf3 \
		trampoline_setup \
		truncdfhf2 \
		truncdfsf2 \
		truncsfhf2 \
		ucmpdi2 \
		ucmpti2 \
		udivdi3 \
		udivmoddi4 \
		udivmodsi4 \
		udivmodti4 \
		udivsi3 \
		udivti3 \
		umoddi3 \
		umodsi3 \
		umodti3

.if ${RTARCH} == "i386"
SRCS+=	floatdidf.c \
	floatdisf.c \
	floatdixf.c \
	floatundidf.c \
	floatundisf.c \
	floatundixf.c
.else
GEN_SRCS+=	floatdidf \
		floatdisf \
		floatdixf \
		floatundidf \
		floatundisf \
		floatundixf
.endif

.for file in ${GEN_SRCS}
.	if exists(${.CURDIR}/${RTARCH}/${file}.S)
SRCS+=	${file}.S
.	else
SRCS+=	${file}.c
.	endif
.endfor

.if ${RTARCH} == "aarch64"
SRCS+=	comparetf2.c \
	extenddftf2.c \
	extendsftf2.c \
	fixtfdi.c \
	fixtfsi.c \
	fixtfti.c \
	fixunstfdi.c \
	fixunstfsi.c \
	fixunstfti.c \
	floatditf.c \
	floatsitf.c \
	floatunsitf.c \
	floatunditf.c \
	multc3.c \
	trunctfdf2.c \
	trunctfsf2.c
.endif

.if ${RTARCH} == "arm"
SRCS+=	aeabi_cdcmp.S \
	aeabi_cdcmpeq_check_nan.c \
	aeabi_cfcmp.S \
	aeabi_cfcmpeq_check_nan.c \
	aeabi_dcmp.S \
	aeabi_div0.c \
	aeabi_drsub.c \
	aeabi_fcmp.S \
	aeabi_frsub.c \
	aeabi_idivmod.S \
	aeabi_ldivmod.S \
	aeabi_memcmp.S \
	aeabi_memcpy.S \
	aeabi_memmove.S \
	aeabi_memset.S \
	aeabi_uidivmod.S \
	aeabi_uldivmod.S \
	bswapdi2.S \
	bswapsi2.S \
	switch16.S \
	switch32.S \
	switch8.S \
	switchu8.S \
	sync_fetch_and_add_4.S \
	sync_fetch_and_add_8.S \
	sync_fetch_and_and_4.S \
	sync_fetch_and_and_8.S \
	sync_fetch_and_max_4.S \
	sync_fetch_and_max_8.S \
	sync_fetch_and_min_4.S \
	sync_fetch_and_min_8.S \
	sync_fetch_and_nand_4.S \
	sync_fetch_and_nand_8.S \
	sync_fetch_and_or_4.S \
	sync_fetch_and_or_8.S \
	sync_fetch_and_sub_4.S \
	sync_fetch_and_sub_8.S \
	sync_fetch_and_umax_4.S \
	sync_fetch_and_umax_8.S \
	sync_fetch_and_umin_4.S \
	sync_fetch_and_umin_8.S \
	sync_fetch_and_xor_4.S \
	sync_fetch_and_xor_8.S \
	sync_synchronize.S
.endif

.if ${RTARCH} == "ppc"
SRCS+=	divtc3.c \
	fixtfdi.c \
	fixunstfdi.c \
	floatditf.c \
	floatunditf.c \
	gcc_qadd.c \
	gcc_qdiv.c \
	gcc_qmul.c \
	gcc_qsub.c \
	multc3.c
.endif

.include <bsd.lib.mk>

.else
NOPROG=
.include <bsd.prog.mk>
.endif
@


1.9
log
@Enable atomic support functions.

ok mlarkin@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2017/05/09 21:09:27 kettenis Exp $
a91 3
		floatdidf \
		floatdisf \
		floatdixf \
a96 3
		floatundidf \
		floatundisf \
		floatundixf \
d161 16
@


1.8
log
@Enable TLS support but default to the emulatated TLS model.  Enable the
runtime support code libcompiler_rt for this.  This code uses functions that
live in libpthread, so code that uses TLS support will need to be linked
with -lpthread.  This should allow more ports to build with base clang.

ok espie@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2017/04/17 15:53:21 kettenis Exp $
d43 1
@


1.7
log
@Change build infrastructure to allow building both gcc and clang.  This
doesn't actually flip the switch yet, so aarch64 continues to be the only
architecture for which we build clang.

ok jsg@@, deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2017/04/09 21:47:05 kettenis Exp $
d67 1
@


1.6
log
@Add a few missing quad-precision support functions on arm64 and reorder the
list to match what's in CMakeLists.txt.

ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2017/01/20 07:55:20 patrick Exp $
d5 6
a10 1
.if ${COMPILER_VERSION:L} == "clang"
@


1.5
log
@Depend compilation on the compiler version, so that we can always
enter the directory to create an objdir.

ok deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2017/01/11 14:18:17 patrick Exp $
a172 2
	trunctfdf2.c \
	trunctfsf2.c \
d175 4
d182 4
a185 1
	multc3.c
@


1.4
log
@Build a bunch more floating point helpers for AArch64.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2016/09/19 12:19:34 pascal Exp $
d5 2
d244 5
@


1.3
log
@Don't build saveFP/restFP for powerpc.  Not needed on OpenBSD.

ok kettenis@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2016/09/19 11:26:43 kettenis Exp $
d166 14
@


1.2
log
@Add non-VFP arm-specific code.

ok patrick@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1 2016/09/05 11:38:16 pascal Exp $
d224 1
a224 3
	multc3.c \
	restFP.S \
	saveFP.S
@


1.1
log
@Add libcompiler_rt Makefile.
@
text
@d1 1
a1 1
# $OpenBSD$
d166 47
@

