head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.8
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.48
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.40
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.44
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.42
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.38
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.36
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.34
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.32
	OPENBSD_5_0:1.15.0.30
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.28
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.26
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.22
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.24
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.20
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.18
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.16
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.14
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.12
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.10
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.8
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.6
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.8
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.6
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.4
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	KeyNote-v2:1.1.1.1
	Angelos:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2015.11.19.02.35.24;	author mmcc;	state Exp;
branches;
next	1.15;
commitid	bCQllQH6f0Sp4lOD;

1.15
date	2004.06.29.11.35.56;	author msf;	state Exp;
branches;
next	1.14;

1.14
date	2004.06.25.05.06.49;	author msf;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.05.17.01.49;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.03.20.14.51;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.08.21.50.12;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	99.11.05.00.27.18;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	99.11.03.19.52.22;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	99.10.26.22.31.38;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	99.10.09.19.47.32;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	99.10.09.06.59.37;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	99.10.06.20.27.46;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	99.10.01.01.08.30;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	99.05.31.20.09.59;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	99.05.24.01.29.22;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	99.05.23.22.11.06;	author angelos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.23.22.11.06;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Remove a ton of ugly, needless casts for NULL, calloc(), and strdup().
No binary change.
@
text
@/* $OpenBSD: keynote-sigver.c,v 1.15 2004/06/29 11:35:56 msf Exp $ */
/*
 * The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
 *
 * This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
 * in April-May 1998
 *
 * Copyright (C) 1998, 1999 by Angelos D. Keromytis.
 *	
 * Permission to use, copy, and modify this software with or without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software. 
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <ctype.h>
#include <fcntl.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "header.h"
#include "keynote.h"

void	sigverusage(void);

void
sigverusage(void)
{
    fprintf(stderr, "Arguments:\n");
    fprintf(stderr, "\t<AssertionFile>\n");
}

void
keynote_sigver(int argc, char *argv[])
{
    char *buf, **assertlist;
    int fd, i, n, j;
    struct stat sb;

    if (argc != 2)
    {
	sigverusage();
	exit(0);
    }

    /* Open and read assertion file */
    fd = open(argv[1], O_RDONLY, 0);
    if (fd < 0)
    {
	perror(argv[1]);
	exit(1);
    }

    if (fstat(fd, &sb) < 0)
    {
	perror("fstat()");
	exit(1);
    }

    if (sb.st_size == 0) /* Paranoid */
    {
	fprintf(stderr, "Illegal assertion-file size 0\n");
	exit(1);
    }

    buf = calloc(sb.st_size + 1, sizeof(char));
    if (buf == NULL)
    {
	perror("calloc()");
	exit(1);
    }

    if (read(fd, buf, sb.st_size) < 0)
    {
	perror("read()");
	exit(1);
    }

    close(fd);

    assertlist = kn_read_asserts(buf, sb.st_size, &n);
    if (assertlist == NULL)
    {
      	fprintf(stderr, "Out of memory while allocating memory for "
		"assertions.\n");
	exit(1);
    }

    if (n == 0)
    {
	fprintf(stderr, "No assertions found in %s.\n", argv[1]);
	free(assertlist);
	exit(1);
    }

    free(buf);

    for (j = 0; j < n; j++)
    {
	i = kn_verify_assertion(assertlist[j], strlen(assertlist[j]));
	if (i == -1)
	{
	    switch (keynote_errno)
	    {
		case ERROR_MEMORY:
		    fprintf(stderr,
			    "Out of memory while parsing assertion %d.\n", j);
		    break;

		case ERROR_SYNTAX:
		    fprintf(stderr,
			    "Syntax error while parsing assertion %d.\n", j);
		    break;

		default:
		    fprintf(stderr,
			    "Unknown error while parsing assertion %d.\n", j);
	    }
	}
	else
	{
	    if (i == SIGRESULT_TRUE)
	      fprintf(stdout, "Signature on assertion %d verified.\n", j);
	    else
	    {
		if (keynote_errno != 0)
		  fprintf(stdout,
			  "Signature on assertion %d could not be verified "
			  "(keynote_errno = %d).\n", j, keynote_errno);
		else
		  fprintf(stdout,
			  "Signature on assertion %d did not verify!\n", j);
	    }
	}

	free(assertlist[j]);
    }

    free(assertlist);

    exit(0);
}
@


1.15
log
@Header cleanup.
ok hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sigver.c,v 1.14 2004/06/25 05:06:49 msf Exp $ */
d78 2
a79 2
    buf = (char *) calloc(sb.st_size + 1, sizeof(char));
    if (buf == (char *) NULL)
@


1.14
log
@Make crufty configure stuff go away. Remove all unused code paths.
No change in binaries.

ok millert@@ deraadt@@ hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sigver.c,v 1.13 2003/07/05 17:01:49 deraadt Exp $ */
d27 1
@


1.13
log
@protos
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sigver.c,v 1.12 2001/09/03 20:14:51 deraadt Exp $ */
a21 4
#if HAVE_CONFIG_H
#include "config.h"
#endif /* HAVE_CONFIG_H */

d24 4
a28 4
#include <stdio.h>
#include <ctype.h>

#if STDC_HEADERS
a29 9
#endif /* STDC_HEADERS */

#if HAVE_FCNTL_H
#include <fcntl.h>
#endif /* HAVE_FCNTL_H */

#if HAVE_IO_H
#include <io.h>
#elif HAVE_UNISTD_H
a30 1
#endif /* HAVE_IO_H */
@


1.12
log
@with or without fee; received mail permitting this change from angelos
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sigver.c,v 1.11 2001/03/08 21:50:12 angelos Exp $ */
d48 2
@


1.11
log
@exit(-1) -> exit(1)
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sigver.c,v 1.10 1999/11/05 00:27:18 angelos Exp $ */
d10 1
a10 1
 * Permission to use, copy, and modify this software without fee
@


1.10
log
@Add a sample application as a usage guide, minor manpage correction.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sigver.c,v 1.9 1999/11/03 19:52:22 angelos Exp $ */
d74 1
a74 1
	exit(-1);
d80 1
a80 1
	exit(-1);
d86 1
a86 1
	exit(-1);
d93 1
a93 1
	exit(-1);
d99 1
a99 1
	exit(-1);
d109 1
a109 1
	exit(-1);
d116 1
a116 1
	exit(-1);
@


1.9
log
@Handle multiple assertions per file in signature verification, better
detection of malformed credentials, update manpages, sync with release.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sigver.c,v 1.8 1999/10/26 22:31:38 angelos Exp $ */
d105 1
a105 1
    if ((assertlist == NULL) || (n == 0))
d107 9
a115 5
	if (keynote_errno == ERROR_MEMORY)
	  fprintf(stderr, "Out of memory while allocating memory for "
		  "assertions.\n");
	else
	  fprintf(stderr, "No assertions found.\n");
@


1.8
log
@sync
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sigver.c,v 1.6 1999/10/09 06:59:37 angelos Exp $ */
d59 2
a61 2
    int fd, i;
    char *buf;
d104 2
a105 2
    i = kn_verify_assertion(buf, sb.st_size);
    if (i == -1)
d107 5
a111 17
	switch (keynote_errno)
	{
	    case ERROR_MEMORY:
		fprintf(stderr,
			"Out of memory while parsing the assertion.\n");
		break;

	    case ERROR_SYNTAX:
		fprintf(stderr,
			"Syntax error while parsing the assertion.\n");
		break;

	    default:
		fprintf(stderr,
			"Unknown error while parsing the assertion.\n");
	}

d117 22
a138 7
    if (i == SIGRESULT_TRUE)
      fprintf(stdout, "Signature verified.\n");
    else
    {
	if (keynote_errno != 0)
	  fprintf(stdout, "Signature could not be verified "
		  "(keynote_errno = %d).\n", keynote_errno);
d140 16
a155 1
	  fprintf(stdout, "Signature did not verify!\n");
d157 2
@


1.7
log
@Roll back yesterday's commit, will wait until after 2.6.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sigver.c,v 1.5 1999/10/06 20:27:46 angelos Exp $ */
d46 1
a47 1
#include "header.h"
@


1.6
log
@Move all ifdefs in header.h (instead of keynote.h), include header.h
in all files including keynote.h, update manpage.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d46 1
a47 1
#include "keynote.h"
@


1.5
log
@Make some of the perror() calls more informative, correct some
inconsistencies in the man page and the query tool, update the
testsuite accordingly.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sigver.c,v 1.4 1999/10/01 01:08:30 angelos Exp $ */
d46 1
a47 1
#include "header.h"
@


1.4
log
@Update for version 2.0
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d73 1
a73 1
	perror("open()");
@


1.3
log
@Sanitize prototypes and variable extern definitions, remove
unnecessary header file, add prototypes header file for utility building.
@
text
@d22 4
d29 4
d34 3
a36 1
#include <stdio.h>
d38 1
a38 1
#include <ctype.h>
d40 1
a40 2
#ifdef WIN32
#include <ctype.h>
d42 1
a42 1
#else /* WIN32 */
d44 1
a44 1
#endif /* WIN32 */
a55 1
#ifdef WIN32
a56 3
#else /* WIN32 */
int
#endif /* WIN32 */
@


1.2
log
@Unified tool for keynote utils.
@
text
@d1 1
a1 2
/* $OpenBSD: keynote-sigver.c,v 1.1.1.1 1999/05/23 22:11:06 angelos Exp $ */

d37 2
a38 2
#include "assertion.h"
#include "signature.h"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 1
a34 1
#else
d36 1
a36 1
#endif
d42 1
a42 1
usage(void)
d50 1
a50 1
#else
d52 2
a53 2
#endif
main(int argc, char *argv[])
d61 1
a61 1
	usage();
@


1.1.1.1
log
@KeyNote version 2 trust-management system (security policy handling).
Utilities to follow.

@
text
@@
