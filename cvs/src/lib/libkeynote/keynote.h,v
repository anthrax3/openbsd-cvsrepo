head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.52
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.54
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.50
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.46
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.48
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.40
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.44
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.42
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.38
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.36
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.34
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.32
	OPENBSD_5_0:1.16.0.30
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.28
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.26
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.22
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.24
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.20
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.18
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.16
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.14
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.12
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.10
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.8
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.15.0.12
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.10
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.15.0.8
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.6
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.4
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.14.0.4
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	KeyNote-v2:1.1.1.1
	Angelos:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2004.06.24.21.34.33;	author msf;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.03.20.14.51;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2000.05.18.08.31.02;	author angelos;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.17.05.40.03;	author angelos;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.17.05.38.19;	author angelos;	state Exp;
branches;
next	1.11;

1.11
date	99.10.26.22.31.38;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	99.10.09.19.47.32;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	99.10.09.06.59.37;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	99.10.01.01.43.13;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	99.10.01.01.08.30;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	99.08.16.02.33.37;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	99.08.13.22.34.26;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	99.05.31.20.09.59;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	99.05.31.18.29.18;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	99.05.25.21.42.23;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	99.05.23.22.11.04;	author angelos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.23.22.11.04;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.16
log
@make keynote.h C++ safe
ok todd@@
@
text
@/* $OpenBSD: keynote.h,v 1.15 2001/09/03 20:14:51 deraadt Exp $ */
/*
 * The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
 *
 * This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
 * in April-May 1998
 *
 * Copyright (C) 1998, 1999 by Angelos D. Keromytis.
 *	
 * Permission to use, copy, and modify this software with or without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software. 
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

#ifndef __KEYNOTE_H__
#define __KEYNOTE_H__

struct environment
{
    char               *env_name;
    char               *env_value;
    int                 env_flags;
    regex_t             env_regex;
    struct environment *env_next;
};

struct keynote_deckey
{
    int   dec_algorithm;
    void *dec_key;
};

struct keynote_binary
{
    int   bn_len;
    char *bn_key;
};

struct keynote_keylist
{
    int                     key_alg;
    void                   *key_key;
    char                   *key_stringkey;
    struct keynote_keylist *key_next;
};

#define SIG_DSA_SHA1_HEX              "sig-dsa-sha1-hex:"
#define SIG_DSA_SHA1_HEX_LEN          strlen(SIG_DSA_SHA1_HEX)
#define SIG_DSA_SHA1_BASE64           "sig-dsa-sha1-base64:"
#define SIG_DSA_SHA1_BASE64_LEN       strlen(SIG_DSA_SHA1_BASE64)
#define SIG_RSA_SHA1_PKCS1_HEX        "sig-rsa-sha1-hex:"
#define SIG_RSA_SHA1_PKCS1_HEX_LEN    strlen(SIG_RSA_SHA1_PKCS1_HEX)
#define SIG_RSA_SHA1_PKCS1_BASE64     "sig-rsa-sha1-base64:"
#define SIG_RSA_SHA1_PKCS1_BASE64_LEN strlen(SIG_RSA_SHA1_PKCS1_BASE64)
#define SIG_RSA_MD5_PKCS1_HEX         "sig-rsa-md5-hex:"
#define SIG_RSA_MD5_PKCS1_HEX_LEN     strlen(SIG_RSA_MD5_PKCS1_HEX)
#define SIG_RSA_MD5_PKCS1_BASE64      "sig-rsa-md5-base64:"
#define SIG_RSA_MD5_PKCS1_BASE64_LEN  strlen(SIG_RSA_MD5_PKCS1_BASE64)
#define SIG_ELGAMAL_SHA1_HEX          "sig-elgamal-sha1-hex:"
#define SIG_ELGAMAL_SHA1_HEX_LEN      strlen(SIG_ELGAMAL_SHA1_HEX)
#define SIG_ELGAMAL_SHA1_BASE64       "sig-elgamal-sha1-base64:"
#define SIG_ELGAMAL_SHA1_BASE64_LEN   strlen(SIG_ELGAMAL_SHA1_BASE64)
#define SIG_PGP_NATIVE                "sig-pgp:"
#define SIG_PGP_NATIVE_LEN            strlen(SIG_PGP_NATIVE)
#define SIG_X509_SHA1_BASE64          "sig-x509-sha1-base64:"
#define SIG_X509_SHA1_BASE64_LEN      strlen(SIG_X509_SHA1_BASE64)
#define SIG_X509_SHA1_HEX             "sig-x509-sha1-hex:"
#define SIG_X509_SHA1_HEX_LEN         strlen(SIG_X509_SHA1_HEX)

#define SIGRESULT_UNTOUCHED     0
#define SIGRESULT_FALSE         1
#define SIGRESULT_TRUE          2

#define ENVIRONMENT_FLAG_FUNC   0x0001 /* This is a callback function */
#define ENVIRONMENT_FLAG_REGEX  0x0002 /* Regular expression for name */

#define ASSERT_FLAG_LOCAL       0x0001 /* 
					* Trusted assertion -- means
					* signature is not verified, and
					* authorizer field can 
					* include symbolic names.
				        */
#define ASSERT_FLAG_SIGGEN      0x0002 /*
					* Be a bit more lax with the
					* contents of the Signature:
					* field; to be used in
					* assertion signing only.
					*/
#define ASSERT_FLAG_SIGVER	0x0004 /*
					* To be used in signature verification
					* only.
					*/
#define RESULT_FALSE            0
#define RESULT_TRUE             1

#define KEYNOTE_CALLBACK_INITIALIZE		"_KEYNOTE_CALLBACK_INITIALIZE"
#define KEYNOTE_CALLBACK_CLEANUP		"_KEYNOTE_CALLBACK_CLEANUP"

#define KEYNOTE_VERSION_STRING			"2"

#define ERROR_MEMORY	       -1
#define ERROR_SYNTAX	       -2
#define ERROR_NOTFOUND         -3
#define ERROR_SIGN_FAILURE     -4

#define KEYNOTE_ALGORITHM_UNSPEC       -1
#define KEYNOTE_ALGORITHM_NONE		0
#define KEYNOTE_ALGORITHM_DSA		1
#define KEYNOTE_ALGORITHM_ELGAMAL	2
#define KEYNOTE_ALGORITHM_PGP		3
#define KEYNOTE_ALGORITHM_BINARY        4
#define KEYNOTE_ALGORITHM_X509          5
#define KEYNOTE_ALGORITHM_RSA		6

#define KEYNOTE_ERROR_ANY        0
#define KEYNOTE_ERROR_SYNTAX     1
#define KEYNOTE_ERROR_MEMORY     2
#define KEYNOTE_ERROR_SIGNATURE  3

#define ENCODING_NONE		   0
#define ENCODING_HEX		   1
#define ENCODING_BASE64		   2
#define ENCODING_NATIVE		   3	/* For things like PGP */

#define INTERNAL_ENC_NONE	   0
#define INTERNAL_ENC_PKCS1	   1
#define INTERNAL_ENC_ASN1          2
#define INTERNAL_ENC_NATIVE	   3	/* For things like PGP */

#define KEYNOTE_PUBLIC_KEY         0
#define KEYNOTE_PRIVATE_KEY        1

extern int keynote_errno;

__BEGIN_DECLS
/* Session API */
int    kn_init(void);
int    kn_add_assertion(int, char *, int, int);
int    kn_remove_assertion(int, int);
int    kn_add_action(int, char *, char *, int);
int    kn_remove_action(int, char *);
int    kn_add_authorizer(int, char *);
int    kn_remove_authorizer(int, char *);
int    kn_do_query(int, char **, int);
int    kn_get_failed(int, int, int);
int    kn_cleanup_action_environment(int);
int    kn_close(int);
void   kn_free_key(struct keynote_deckey *);
char  *kn_get_string(char *);

/* Simple API */
int    kn_query(struct environment *, char **, int, char **, int *, int,
		char **, int *, int, char **, int);

/* Aux. routines */
char **kn_read_asserts(char *, int, int *);
int    kn_keycompare(void *, void *, int);
void  *kn_get_authorizer(int, int, int *);
struct keynote_keylist *kn_get_licensees(int, int);

/* ASCII-encoding API */
int    kn_encode_base64(unsigned char const *, unsigned int, char *,
			unsigned int);
int    kn_decode_base64(char const *, unsigned char *, unsigned int);
int    kn_encode_hex(unsigned char *, char **, int);
int    kn_decode_hex(char *, char **);

/* Key-encoding API */
int    kn_decode_key(struct keynote_deckey *, char *, int);
char  *kn_encode_key(struct keynote_deckey *, int, int, int);

/* Crypto API */
char  *kn_sign_assertion(char *, int, char *, char *, int);
int    kn_verify_assertion(char *, int);
__END_DECLS
#endif /* __KEYNOTE_H__ */
@


1.15
log
@with or without fee; received mail permitting this change from angelos
@
text
@d1 1
a1 1
/* $OpenBSD: keynote.h,v 1.14 2000/05/18 08:31:02 angelos Exp $ */
d142 1
d182 1
@


1.14
log
@Manpage links.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d10 1
a10 1
 * Permission to use, copy, and modify this software without fee
@


1.13
log
@Oops, typo.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote.h,v 1.12 2000/05/17 05:38:19 angelos Exp $ */
d155 1
@


1.12
log
@Add kn_free_key()
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d154 1
a154 1
void   kn_free_key(struct keynote_deckey);
@


1.11
log
@sync
@
text
@d1 1
a1 1
/* $OpenBSD: keynote.h,v 1.9 1999/10/09 06:59:37 angelos Exp $ */
d154 1
@


1.10
log
@Roll back yesterday's commit, will wait until after 2.6.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote.h,v 1.8 1999/10/01 01:43:13 angelos Exp $ */
a23 15

#include <sys/types.h>
#include <regex.h>

#include <ssl/crypto.h>
#include <ssl/dsa.h>
#include <ssl/rsa.h>
#include <ssl/sha.h>
#include <ssl/md5.h>
#include <ssl/err.h>
#include <ssl/rand.h>
#include <ssl/x509.h>
#include <ssl/pem.h>

#define KEYNOTERNDFILENAME "/dev/urandom"
@


1.9
log
@Move all ifdefs in header.h (instead of keynote.h), include header.h
in all files including keynote.h, update manpage.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d24 15
@


1.8
log
@Remove ifdefs.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote.h,v 1.7 1999/10/01 01:08:30 angelos Exp $ */
a23 15

#include <sys/types.h>
#include <regex.h>

#include <ssl/crypto.h>
#include <ssl/dsa.h>
#include <ssl/rsa.h>
#include <ssl/sha.h>
#include <ssl/md5.h>
#include <ssl/err.h>
#include <ssl/rand.h>
#include <ssl/x509.h>
#include <ssl/pem.h>

#define KEYNOTERNDFILENAME "/dev/urandom"
@


1.7
log
@Update for version 2.0
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a24 1
#if HAVE_REGEX_H
a26 1
#endif /* HAVE_REGEX_H */
a27 2
#if defined(CRYPTO)
#if HAVE_SSL_CRYPTO_H
a36 14
#elif HAVE_OPENSSL_CRYPTO_H
#include <openssl/crypto.h>
#include <openssl/dsa.h>
#include <openssl/rsa.h>
#include <openssl/sha.h>
#include <openssl/md5.h>
#include <openssl/err.h>
#include <openssl/rand.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
#else /* HAVE_SSL_CRYPTO_H */
#error "SSLeay or OpenSSL not detected!"
#endif /* HAVE_SSL_CRYPTO_H */
#endif /* CRYPTO */
a37 22
#if !defined(HAVE_STRCASECMP) && defined(HAVE_STRICMP)
#define strcasecmp stricmp
#endif /* !HAVE_STRCASECMP && HAVE_STRICMP */

#if !defined(HAVE_STRNCASECMP) && defined(HAVE_STRNICMP)
#define strncasecmp strnicmp
#endif /* !HAVE_STRNCASECMP && HAVE_STRNICMP */

#if !defined(HAVE_OPEN) && defined(HAVE__OPEN)
#define open _open
#endif /* !HAVE_OPEN && HAVE__OPEN */

#if !defined(HAVE_READ) && defined(HAVE__READ)
#define read _read
#endif /* !HAVE_READ && HAVE__OPEN */

#if !defined(HAVE_CLOSE) && defined(HAVE__CLOSE)
#define close _close
#endif /* !HAVE_CLOSE && HAVE__CLOSE */

#if defined(CRYPTO)
#if HAVE__DEV_URANDOM
a38 4
#else /* HAVE__DEV_URANDOM */
#error "You need a random device!"
#endif /* HAVE__DEV_URANDOM */
#endif /* CRYPTO */
@


1.6
log
@Indentation.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote.h,v 1.5 1999/08/13 22:34:26 angelos Exp $ */
d25 2
d28 1
d30 24
a53 10
#ifdef CRYPTO
#include "crypto.h"
#include "dsa.h"
#include "rsa.h"
#include "sha.h"
#include "md5.h"
#include "err.h"
#include "rand.h"
#include "x509.h"
#include "pem.h"
d56 1
a56 3
#ifdef WIN32
#define u_int unsigned int
#define u_char unsigned char
d58 3
d62 3
d66 3
d70 3
d74 1
a74 1
#endif
d76 2
a77 1
#if defined(__OpenBSD__) || defined(linux) || defined(__FreeBSD__) || defined(__NetBSD__)
d79 4
a82 1
#endif /* __OpenBSD__ || linux || __FreeBSD__ || __NetBSD__ */
d105 8
d211 1
d221 2
@


1.5
log
@Correct ssl include file(s) path.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote.h,v 1.4 1999/05/31 20:09:59 angelos Exp $ */
d140 1
a140 1
#define KEYNOTE_ALGORITHM_RSA          6
@


1.4
log
@Sanitize prototypes and variable extern definitions, remove
unnecessary header file, add prototypes header file for utility building.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d28 9
a36 9
#include "ssl/crypto.h"
#include "ssl/dsa.h"
#include "ssl/rsa.h"
#include "ssl/sha.h"
#include "ssl/md5.h"
#include "ssl/err.h"
#include "ssl/rand.h"
#include "ssl/x509.h"
#include "ssl/pem.h"
@


1.3
log
@Correct prototype and invocation, eliminate a warning or three.
@
text
@d1 1
a1 2
/* $OpenBSD: keynote.h,v 1.2 1999/05/25 21:42:23 angelos Exp $ */

d22 2
a23 2
#ifndef _KEYNOTE_H_
#define _KEYNOTE_H_
d196 1
a196 1
#endif /* _KEYNOTE_H_ */
@


1.2
log
@Export kn_keycompare() in the API, update the spec and man pages.

Note that the *.1 manpages will all be rolled into a single one soon.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote.h,v 1.1.1.1 1999/05/23 22:11:04 angelos Exp $ */
d37 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d180 1
@


1.1.1.1
log
@KeyNote version 2 trust-management system (security policy handling).
Utilities to follow.

@
text
@@
