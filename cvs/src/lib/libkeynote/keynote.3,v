head	1.54;
access;
symbols
	OPENBSD_6_2:1.54.0.2
	OPENBSD_6_2_BASE:1.54
	OPENBSD_6_1:1.52.0.8
	OPENBSD_6_1_BASE:1.52
	OPENBSD_6_0:1.52.0.4
	OPENBSD_6_0_BASE:1.52
	OPENBSD_5_9:1.52.0.2
	OPENBSD_5_9_BASE:1.52
	OPENBSD_5_8:1.48.0.6
	OPENBSD_5_8_BASE:1.48
	OPENBSD_5_7:1.48.0.2
	OPENBSD_5_7_BASE:1.48
	OPENBSD_5_6:1.46.0.8
	OPENBSD_5_6_BASE:1.46
	OPENBSD_5_5:1.46.0.6
	OPENBSD_5_5_BASE:1.46
	OPENBSD_5_4:1.46.0.2
	OPENBSD_5_4_BASE:1.46
	OPENBSD_5_3:1.45.0.2
	OPENBSD_5_3_BASE:1.45
	OPENBSD_5_2:1.43.0.4
	OPENBSD_5_2_BASE:1.43
	OPENBSD_5_1_BASE:1.43
	OPENBSD_5_1:1.43.0.2
	OPENBSD_5_0:1.42.0.4
	OPENBSD_5_0_BASE:1.42
	OPENBSD_4_9:1.42.0.2
	OPENBSD_4_9_BASE:1.42
	OPENBSD_4_8:1.40.0.14
	OPENBSD_4_8_BASE:1.40
	OPENBSD_4_7:1.40.0.10
	OPENBSD_4_7_BASE:1.40
	OPENBSD_4_6:1.40.0.12
	OPENBSD_4_6_BASE:1.40
	OPENBSD_4_5:1.40.0.8
	OPENBSD_4_5_BASE:1.40
	OPENBSD_4_4:1.40.0.6
	OPENBSD_4_4_BASE:1.40
	OPENBSD_4_3:1.40.0.4
	OPENBSD_4_3_BASE:1.40
	OPENBSD_4_2:1.40.0.2
	OPENBSD_4_2_BASE:1.40
	OPENBSD_4_1:1.38.0.12
	OPENBSD_4_1_BASE:1.38
	OPENBSD_4_0:1.38.0.10
	OPENBSD_4_0_BASE:1.38
	OPENBSD_3_9:1.38.0.8
	OPENBSD_3_9_BASE:1.38
	OPENBSD_3_8:1.38.0.6
	OPENBSD_3_8_BASE:1.38
	OPENBSD_3_7:1.38.0.4
	OPENBSD_3_7_BASE:1.38
	OPENBSD_3_6:1.38.0.2
	OPENBSD_3_6_BASE:1.38
	OPENBSD_3_5:1.36.0.4
	OPENBSD_3_5_BASE:1.36
	OPENBSD_3_4:1.36.0.2
	OPENBSD_3_4_BASE:1.36
	OPENBSD_3_3:1.34.0.4
	OPENBSD_3_3_BASE:1.34
	OPENBSD_3_2:1.34.0.2
	OPENBSD_3_2_BASE:1.34
	OPENBSD_3_1:1.31.0.4
	OPENBSD_3_1_BASE:1.31
	OPENBSD_3_0:1.31.0.2
	OPENBSD_3_0_BASE:1.31
	OPENBSD_2_9:1.27.0.2
	OPENBSD_2_9_BASE:1.27
	OPENBSD_2_8:1.26.0.2
	OPENBSD_2_8_BASE:1.26
	OPENBSD_2_7:1.22.0.2
	OPENBSD_2_7_BASE:1.22
	OPENBSD_2_6:1.16.0.2
	OPENBSD_2_6_BASE:1.16;
locks; strict;
comment	@.\" @;


1.54
date	2017.07.05.11.43.09;	author schwarze;	state Exp;
branches;
next	1.53;
commitid	fW5clqZ9xo1DCcFX;

1.53
date	2017.06.10.14.15.52;	author schwarze;	state Exp;
branches;
next	1.52;
commitid	BEkbjMXioAUdpLbp;

1.52
date	2015.11.20.16.31.05;	author mmcc;	state Exp;
branches;
next	1.51;
commitid	Y9FfFZPF0ws7sKmv;

1.51
date	2015.11.10.23.48.18;	author jmc;	state Exp;
branches;
next	1.50;
commitid	QU70QaxjyBAtj4Rv;

1.50
date	2015.09.23.16.23.32;	author sobrado;	state Exp;
branches;
next	1.49;
commitid	29WJPXyBgc1sbIJF;

1.49
date	2015.09.10.17.55.21;	author schwarze;	state Exp;
branches;
next	1.48;
commitid	PeV7Ql0T6htfMjhP;

1.48
date	2014.12.05.15.06.09;	author schwarze;	state Exp;
branches;
next	1.47;
commitid	1UUhUkIHsMQJLZFi;

1.47
date	2014.09.17.06.21.46;	author jmc;	state Exp;
branches;
next	1.46;
commitid	RzBbWoz8HtV81tBQ;

1.46
date	2013.07.16.15.21.11;	author schwarze;	state Exp;
branches;
next	1.45;

1.45
date	2012.09.27.11.31.58;	author jmc;	state Exp;
branches;
next	1.44;

1.44
date	2012.08.15.18.56.28;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2011.09.29.17.57.09;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2010.12.22.16.40.38;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2010.09.19.22.22.13;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2007.08.03.08.09.37;	author hshoexer;	state Exp;
branches;
next	1.39;

1.39
date	2007.05.31.19.19.35;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2004.06.26.12.11.41;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2004.06.24.22.02.41;	author hshoexer;	state Exp;
branches;
next	1.36;

1.36
date	2003.07.08.11.02.23;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2003.05.24.18.30.32;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2002.05.03.16.21.57;	author angelos;	state Exp;
branches;
next	1.33;

1.33
date	2002.05.01.08.03.30;	author mpech;	state Exp;
branches;
next	1.32;

1.32
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.31;

1.31
date	2001.09.03.20.14.51;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2001.09.03.16.47.51;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2001.08.16.17.58.06;	author mpech;	state Exp;
branches;
next	1.28;

1.28
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.27;

1.27
date	2001.03.22.21.34.05;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2000.09.17.02.11.12;	author aaron;	state Exp;
branches;
next	1.25;

1.25
date	2000.05.19.05.04.51;	author angelos;	state Exp;
branches;
next	1.24;

1.24
date	2000.05.18.08.31.02;	author angelos;	state Exp;
branches;
next	1.23;

1.23
date	2000.05.17.05.38.19;	author angelos;	state Exp;
branches;
next	1.22;

1.22
date	2000.04.15.02.15.27;	author aaron;	state Exp;
branches;
next	1.21;

1.21
date	2000.04.12.21.48.03;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	2000.03.06.21.47.27;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	99.12.02.01.27.16;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	99.11.05.00.27.18;	author angelos;	state Exp;
branches;
next	1.17;

1.17
date	99.11.03.19.52.22;	author angelos;	state Exp;
branches;
next	1.16;

1.16
date	99.10.11.04.39.00;	author angelos;	state Exp;
branches;
next	1.15;

1.15
date	99.10.11.00.08.28;	author angelos;	state Exp;
branches;
next	1.14;

1.14
date	99.10.09.19.47.32;	author angelos;	state Exp;
branches;
next	1.13;

1.13
date	99.10.09.06.59.37;	author angelos;	state Exp;
branches;
next	1.12;

1.12
date	99.10.09.06.34.14;	author angelos;	state Exp;
branches;
next	1.11;

1.11
date	99.10.06.19.26.14;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	99.10.01.01.08.30;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	99.07.09.13.35.29;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.07.07.14.22.25;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.07.07.10.50.06;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.07.02.21.13.08;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.05.27.01.09.44;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	99.05.26.20.09.30;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	99.05.25.21.42.22;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	99.05.24.01.50.04;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	99.05.23.22.32.08;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.54
log
@fix cross references to self; found with mandoc -Tlint
@
text
@.\" $OpenBSD: keynote.3,v 1.53 2017/06/10 14:15:52 schwarze Exp $
.\"
.\" The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
.\"
.\" This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
.\" in April-May 1998
.\"
.\" Copyright (C) 1998, 1999 by Angelos D. Keromytis.
.\"
.\" Permission to use, copy, and modify this software with or without fee
.\" is hereby granted, provided that this entire notice is included in
.\" all copies of any software which is or includes a copy or
.\" modification of this software.
.\" You may use this code under the GNU public license if you so wish. Please
.\" contribute changes back to the author.
.\"
.\" THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
.\" REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
.\" MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
.\" PURPOSE.
.\"
.Dd $Mdocdate: June 10 2017 $
.Dt KN_INIT 3
.\" .TH KeyNote 3 local
.Os
.Sh NAME
.Nm kn_init ,
.Nm kn_add_assertion ,
.Nm kn_remove_assertion ,
.Nm kn_add_action ,
.Nm kn_remove_action ,
.Nm kn_add_authorizer ,
.Nm kn_remove_authorizer ,
.Nm kn_do_query ,
.Nm kn_get_failed ,
.Nm kn_cleanup_action_environment ,
.Nm kn_close ,
.Nm kn_query ,
.Nm kn_read_asserts ,
.Nm kn_keycompare ,
.Nm kn_get_authorizer ,
.Nm kn_get_licensees ,
.Nm kn_encode_base64 ,
.Nm kn_decode_base64 ,
.Nm kn_encode_hex ,
.Nm kn_decode_hex ,
.Nm kn_encode_key ,
.Nm kn_decode_key ,
.Nm kn_sign_assertion ,
.Nm kn_verify_assertion ,
.Nm kn_free_key ,
.Nm kn_get_string
.Nd a trust-management system library
.Sh SYNOPSIS
.In sys/types.h
.In regex.h
.In keynote.h
.Bd -literal
struct environment {
	char               *env_name;
	char               *env_value;
	int                 env_flags;
	regex_t             env_regex;
	struct environment *env_next;
};

struct keynote_deckey {
	int   dec_algorithm;
	void *dec_key;
};

struct keynote_binary {
	int   bn_len;
	char *bn_key;
};

struct keynote_keylist {
	int                     key_alg;
	void                   *key_key;
	char                   *key_stringkey;
	struct keynote_keylist *key_next;
};
.Ed
.Vt extern int keynote_errno;
.Ft int
.Fn kn_init "void"
.Ft int
.Fn kn_add_assertion "int sessid" "char *assertion" "int len" "int flags"
.Ft int
.Fn kn_remove_assertion "int sessid" "int assertid"
.Ft int
.Fn kn_add_action "int sessid" "char *name" "char *value" "int flags"
.Ft int
.Fn kn_remove_action "int sessid" "char *name"
.Ft int
.Fn kn_add_authorizer "int sessid" "char *principal"
.Ft int
.Fn kn_remove_authorizer "int sessid" "char *principal"
.Ft int
.Fn kn_do_query "int sessid" "char **returnvalues" "int numvalues"
.Ft int
.Fn kn_get_failed "int sessid" "int type" "int seq"
.Ft int
.Fn kn_cleanup_action_environment "int sessid"
.Ft int
.Fn kn_close "int sessid"
.Ft int
.Fo kn_query
.Fa "struct environment *env"
.Fa "char **returnvalues"
.Fa "int numvalues"
.Fa "char **trusted"
.Fa "int *trustedlen"
.Fa "int numtrusted"
.Fa "char **untrusted"
.Fa "int *untrustedlen"
.Fa "int numuntrusted"
.Fa "char **authorizers"
.Fa "int numauthorizers"
.Fc
.Ft char **
.Fn kn_read_asserts "char *array" "int arraylen" "int *numassertions"
.Ft int
.Fn kn_keycompare "void *key1" "void *key2" "int algorithm"
.Ft void *
.Fn kn_get_authorizer "int sessid" "int assertid" "int *algorithm"
.Ft struct keynote_keylist *
.Fn kn_get_licensees "int sessid" "int assertid"
.Ft int
.Fn kn_encode_base64 "unsigned char const *src" "unsigned int srclen" "char *dst" "unsigned int dstlen"
.Ft int
.Fn kn_decode_base64 "char const *src" "unsigned char *dst" "unsigned int dstlen"
.Ft int
.Fn kn_encode_hex "unsigned char *src" "char **dst" "int srclen"
.Ft int
.Fn kn_decode_hex "char *src" "char **dst"
.Ft char *
.Fn kn_encode_key "struct keynote_deckey *dc" "int iencoding" "int encoding" "int keytype"
.Ft int
.Fn kn_decode_key "struct keynote_deckey *dc" "char *key" "int keytype"
.Ft char *
.Fn kn_sign_assertion "char *assertion" "int len" "char *key" "char *algorithm" "int vflag"
.Ft int
.Fn kn_verify_assertion "char *assertion" "int len"
.Ft void
.Fn kn_free_key "struct keynote_deckey *"
.Ft char *
.Fn kn_get_string "char *"
.Fd Link options: -lkeynote -lm -lcrypto
.Sh DESCRIPTION
For more details on
.Nm keynote ,
see RFC 2704.
.Pp
.Va keynote_errno
contains an error code if some library call failed.
Failed calls return \-1 (if their return value is integer), or
.Dv NULL
(if their return value is a pointer) and set
.Va keynote_errno .
The defined error codes are:
.Bl -tag -width "ERROR_NOTFOUND" -offset indent
.It Li ERROR_MEMORY
Some memory allocation or usage error was encountered.
.It Li ERROR_SYNTAX
Some syntactic or logical error was encountered.
.It Li ERROR_NOTFOUND
One of the arguments referred to a nonexistent structure or entry.
.El
.Pp
If no errors were encountered,
.Va keynote_errno
will be set to 0.
This variable should be reset to 0 if an error was encountered,
prior to calling other library routines.
.Pp
The main interface to
.Nm
is centered around the concept of a session.
A session describes a collection of policies, assertions, action
authorizers, return values, and action attributes that the
.Nm
system uses to evaluate a query.
Information is not shared between sessions.
Policies, credentials, action authorizers, and action
attributes can be added or deleted at any point during the lifetime of
a session.
Furthermore, an application can discover which assertions failed to be
evaluated, and in what way, during a query.
.Pp
For those applications that only need to do a simple query, there
exists a single call that takes as arguments all the necessary
information and performs all the necessary steps.
This is essentially a wrapper that calls the session API functions as
necessary.
.Pp
Finally, there exist functions for doing ASCII to hexadecimal and
Base64 encoding (and vice versa), for encoding/decoding keys between
ASCII and binary formats, and for signing and verifying assertions.
.Pp
The description of all
.Nm
library functions follows.
.Pp
.Fn kn_init
creates a new
.Nm
session, and performs any necessary initializations.
On success, this function returns the new session ID, which is used by
all subsequent calls with a
.Fa sessid
argument.
On failure, it returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_MEMORY .
.Pp
.Fn kn_add_assertion
adds the assertion pointed to by the array
.Fa assertion ,
of length
.Fa len
in the session identified by
.Fa sessid .
The first argument can be discarded after the call to this function.
The following flags are defined:
.Bl -tag -width ASSERT_FLAG_LOCAL -offset indent
.It ASSERT_FLAG_LOCAL
Mark this assertion as ultimately trusted.
Trusted assertions need not be signed, and the
.Fa Authorizer
and
.Fa Licensees
fields can have non-key entries.
.El
.Pp
At least one (trusted) assertion should have
.Dv POLICY
as the
.Fa Authorizer .
On success, this function will return an assertion ID which can be
used to remove the assertion from the session, by using
.Fn kn_remove_assertion .
On failure, \-1 is returned, and
.Va keynote_errno
is set to
.Er ERROR_NOTFOUND
if the session was not found,
.Er ERROR_SYNTAX
if the assertion was syntactically incorrect, or
.Er ERROR_MEMORY
if necessary memory could not be allocated.
.Pp
.Fn kn_remove_assertion
removes the assertion identified by
.Fa assertid
from the session identified by
.Fa sessid .
On success, this function returns 0.
On failure, it returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_NOTFOUND .
.Pp
.Fn kn_add_action
inserts the variable
.Fa name
in the action environment of session
.Fa sessid ,
with the value
.Fa value .
The same attribute may be added more than once, but only the last
instance will be used (memory resources are consumed however).
.Pp
The
.Fa flags
specified are formed by or'ing the following values:
.Bl -tag -width ENVIRONMENT_FLAG_REGEX -offset indent
.It ENVIRONMENT_FLAG_FUNC
In this case,
.Fa value
is a pointer to a function that takes as argument a string and returns
a string.
This is used to implement callbacks for getting action attribute values.
The argument passed to such a callback function is a string identifying
the action attribute whose value is requested, and should return a pointer
to string containing that value (this pointer will not be freed by the
library), the empty string if the value was not found, or a
.Dv NULL
to indicate an error (and may set
.Va keynote_errno
appropriately).
Prior to first use (currently, at the time the attribute is added to the
session environment), such functions are called with
.Dv KEYNOTE_CALLBACK_INITIALIZE
as the argument (defined in keynote.h) so that they can perform any special
initializations.
Furthermore, when the session is deleted, all such functions will be called
with
.Dv KEYNOTE_CALLBACK_CLEANUP
to perform any special cleanup (such as free any allocated memory).
A function may be called with either of these arguments more than once,
if it has been defined as the callback function for more than one attribute.
.It ENVIRONMENT_FLAG_REGEX
In this case,
.Fa name
is a regular expression that may match more than one attribute.
In case of conflict between a regular expression and a
.Dq simple
attribute, the latter will be given priority.
In case of conflict between two regular expression attributes, the one added
later will be given priority.
A callback function should never change the current
.Nm
session, start/invoke/operate on another session, or call one of the
session-API functions.
.El
.Pp
The combination of the two flags may be used to specify callback
functions that handle large sets of attributes (even to the extent of
having one callback function handling all attribute references).
This is particularly useful when the action attribute set is particularly
large.
.Pp
On success,
.Fn kn_add_action
returns 0.
On failure, it returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_NOTFOUND
if the session was not found,
.Er ERROR_SYNTAX
if the
.Fa name
was invalid (e.g., started with an underscore character) or was
.Dv NULL ,
or
.Er ERROR_MEMORY
if necessary memory could not be allocated.
.Pp
.Fn kn_remove_action
removes action attribute
.Fa name
from the environment of session
.Fa sessid .
Notice that if more than one instances of
.Fa name
exist, only the one added last will be deleted.
On success, this function returns 0.
On failure, it returns \-1 and
.Va keynote_errno
is set to
.Er ERROR_NOTFOUND
if the session or the attribute were not found, or
.Er ERROR_SYNTAX
if the name was invalid.
If the attribute value was a callback, that function will be called with
the define
.Dv KEYNOTE_CALLBACK_CLEANUP
as the argument.
.Pp
.Fn kn_add_authorizer
adds the principal pointed to by
.Fa principal
to the action authorizers list of session
.Fa sessid .
The principal is typically an ASCII-encoded key.
On success, this function will return 0.
On failure, it returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_NOTFOUND
if the session was not found,
.Er ERROR_SYNTAX
if the encoding was invalid, or
.Er ERROR_MEMORY
if necessary memory could not be allocated.
.Pp
.Fn kn_remove_authorizer
removes
.Fa principal
from the action authorizer list of session
.Fa sessid .
On success, this function returns 0.
On failure, it returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_NOTFOUND
if the session was not found.
.Pp
.Fn kn_do_query
evaluates the request based on the assertions, action attributes, and
action authorizers added to session
.Fa sessid .
.Fa returnvalues
is an ordered array of strings that contain the return values.
The lowest-ordered return value is contained in
.Fa returnvalues Ns Bq 0 ,
and the highest-ordered value is
.Fa returnvalues Ns Bq Fa numvalues No \- 1 .
If
.Fa returnvalues
is
.Dv NULL ,
the
.Fa returnvalues
from the previous call to
.Fn kn_do_query
will be used.
The programmer SHOULD NOT free
.Fa returnvalues
after the call to
.Fn kn_do_query
if this feature is used, as the array is not replicated internally.
On success, this function returns an index into the
.Fa returnvalues
array.
On failure, it returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_NOTFOUND
if the session was not found or the authorizers list was empty,
.Er ERROR_SYNTAX
if no
.Fa returnvalues
have been specified, or
.Er ERROR_MEMORY
if necessary memory could not be allocated.
.Pp
.Fn kn_get_failed
returns the assertion ID of the
.Fa num'th
assertion (starting from zero) in session
.Fa sessid
that was somehow invalid during evaluation.
This function is typically called after
.Fn kn_do_query
is used to evaluate a request.
.Fa type
specifies the type of failure the application is interested in.
It can be set to:
.Bl -tag -width KEYNOTE_ERROR_SIGNATURE -offset indent
.It KEYNOTE_ERROR_ANY
to indicate interest in any error.
.It KEYNOTE_ERROR_SYNTAX
for syntactic or semantic errors.
.It KEYNOTE_ERROR_MEMORY
for memory-related problems.
.It KEYNOTE_ERROR_SIGNATURE
if the assertion could not be cryptographically verified.
.El
.Pp
These values are defined in keynote.h.
An application can then delete the offending assertion using
.Fn kn_remove_assertion .
For example, to remove all assertion whose signature failed, an application
could do something like:
.Bd -literal
  while ((assertid = kn_get_failed(sessid, KEYNOTE_ERROR_SIGNATURE, 0)
         != -1)
    kn_remove_assertion(sessid, assertid);
.Ed
.Pp
On success,
.Fn kn_get_failed
returns an assertion ID.
On failure, or when no assertion matching the given criteria is found,
it returns \-1 and set
.Va keynote_errno
to
.Er ERROR_NOTFOUND .
.Pp
.Fn kn_cleanup_action_environment
removes all action attributes from the action environment of session
.Fa sessid .
It returns 0 on success.
.Pp
.Fn kn_close
closes session
.Fa sessid
and frees all related resources, deleting action attributes, action
authorizers, and assertions.
On success, this function returns 0.
On failure, it returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_NOTFOUND
if the session was not found.
.Pp
.Fn kn_read_asserts
parses the string
.Fa array
of length
.Fa arraylen
and returns an array of pointers to strings containing copies of
the assertions found in
.Fa array .
Both the array of pointers and the strings are allocated by
.Fn kn_read_asserts
dynamically, and thus should be freed by the programmer when they are
no longer needed.
.Fa numassertions
contains the number of assertions (and thus strings in the returned
array) found in
.Fa array .
On failure, this function returns
.Dv NULL
and sets
.Va keynote_errno
to
.Er ERROR_MEMORY
if necessary memory could not be allocated, or
.Er ERROR_SYNTAX
if
.Fa array
was
.Dv NULL .
Note that if there were no assertions found in
.Fa array ,
a valid pointer will be returned, but
.Fa numassertions
will contain the value zero on return.
The returned pointer should be freed by the programmer.
.Pp
.Fn kn_keycompare
compares
.Fa key1
and
.Fa key2
(which must be of the same
.Fa algorithm )
and returns 1 if equal and 0 otherwise.
.Pp
.Fn kn_get_authorizer
returns the authorizer key (in binary format) for assertion
.Fa assertid
in session
.Fa sessid .
It also sets the
.Fa algorithm
argument to the algorithm of the authorizer key.
On failure,
.Fn kn_get_authorizer
returns
.Dv NULL ,
and sets
.Va keynote_errno
to
.Er ERROR_NOTFOUND .
.Pp
.Fn kn_get_licensees
returns the licensee key(s) for assertion
.Fa assertid
in session
.Fa sessid .
The keys are returned in a linked list of
.Fa struct keynote_keylist
structures.
On failure,
.Fn kn_get_licensees
returns
.Dv NULL .
and sets
.Va keynote_errno
to
.Er ERROR_NOTFOUND .
.Pp
.Fn kn_query
takes as arguments a list of action attributes in
.Fa env ,
a list of return values in
.Fa returnvalues
(the number of returnvalues is indicated by
.Fa numvalues ) ,
a number
.Pf ( Fa numtrusted )
of locally-trusted assertions in
.Fa trusted
(the length of each assertion is given by the respective element of
.Fa trustedlen ) ,
a number
.Pf ( Fa numuntrusted )
of assertions that need to be cryptographically verified in
.Fa untrusted
(the length of each assertion is given by the respective element of
.Fa untrustedlen ) ,
and a number
.Pf ( Fa numauthorizers )
of action authorizers in
.Fa authorizers .
.Fa env
is a linked list of
.Fa struct environment
structures.
The
.Fa env_name ,
.Fa env_value ,
and
.Fa env_flags
fields correspond to the
.Fa name ,
.Fa value ,
and
.Fa flags
arguments to
.Fn kn_add_assertion
respectively.
.Fa env_regex
is not used.
On success, this function returns an index in
.Fa returnvalues
indicating the returned value to the query.
On failure, it returns \-1 and sets
.Va keynote_errno
to the same values as
.Fn kn_do_query ,
or to
.Er ERROR_MEMORY
if a trusted or untrusted assertion could not be added to the session due
to lack of memory resources.
Syntax errors in assertions will not be reported by
.Fn kn_query .
.Pp
.Fn kn_encode_base64
converts the data of length
.Fa srclen
contained in
.Fa src
in Base64 encoding and stores them in
.Fa dst
which is of length
.Fa dstlen .
The actual length of the encoding stored in
.Fa dst
is returned.
.Fa dst
should be long enough to also contain the trailing
string terminator.
If
.Fa dst
is not long enough to contain the encoded data, this function returns
\-1 and sets
.Va keynote_errno
to
.Er ERROR_SYNTAX .
.Pp
.Fn kn_decode_base64
decodes the Base64-encoded data stored in
.Fa src
and stores the result in
.Fa dst ,
which is of length
.Fa dstlen .
The actual length of the decoded data is returned on success.
On failure, this function returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_SYNTAX ,
denoting either an invalid Base64 encoding or insufficient space in
.Fa dst .
.Pp
.Fn kn_encode_hex
encodes in ASCII-hexadecimal format the data of length
.Fa srclen
contained in
.Fa src .
This function allocates a chunk of memory to store the result, which
is returned in
.Fa dst .
Thus, this function should be used as follows:
.Bd -literal
  char *dst;

  kn_encode_hex(src, &dst, srclen);
.Ed
.Pp
The length of the allocated buffer will be (2 * srclen + 1).
On success, this function returns 0.
On failure, it returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_MEMORY
if it failed to allocate enough memory,
.Er ERROR_SYNTAX
if
.Fa dst
was
.Dv NULL .
.Pp
.Fn kn_decode_hex
decodes the ASCII hex-encoded string in
.Fa src
and stores the result in a memory chunk allocated by the function.
A pointer to that memory is stored in
.Fa dst .
The length of the allocated memory will be (strlen(src) / 2).
On success, this function returns 0.
On failure, it returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_MEMORY
if it could not allocate enough memory, or
.Er ERROR_SYNTAX
if
.Fa dst
was
.Dv NULL ,
or the length of
.Fa src
is not even.
.Pp
.Fn kn_encode_key
ASCII-encodes a cryptographic key.
The binary representation of the key is contained in
.Fa dc .
The field
.Fa dec_key
in that structure is a pointer to some cryptographic algorithm
dependent information describing the key.
In this implementation, this pointer should be a
.Fa DSA *
or
.Fa RSA *
for DSA or RSA keys respectively, as used in the SSL library, or a
.Fa keynote_binary *
for cryptographic keys whose algorithm
.Nm
does not know about but the application wishes to include in the
action authorizers (and thus need to be canonicalized).
The field
.Fa dec_algorithm
describes the cryptographic algorithm, and may be one of
.Dv KEYNOTE_ALGORITHM_DSA ,
.Dv KEYNOTE_ALGORITHM_RSA ,
or
.Dv KEYNOTE_ALGORITHM_BINARY
in this implementation.
.Pp
.Fa iencoding
describes how the key should be binary-encoded.
This implementation supports
.Dv INTERNAL_ENC_PKCS1
for RSA keys,
.Dv INTERNAL_ENC_ASN1
for DSA keys, and
.Dv INTERNAL_ENC_NONE
for BINARY keys.
.Fa encoding
describes what ASCII encoding should be applied to the key.
Valid values are
.Dv ENCODING_HEX
and
.Dv ENCODING_BASE64 ,
for hexadecimal and Base64 encoding respectively.
.Fa keytype
is one of
.Dv KEYNOTE_PUBLIC_KEY
or
.Dv KEYNOTE_PRIVATE_KEY
to indicate whether the key is public or private.
Private keys have the string
.Dv KEYNOTE_PRIVATE_KEY_PREFIX
(defined in keynote.h) prefixed to the algorithm name.
On success, this function returns a string containing the encoded key.
On failure, it returns
.Dv NULL
and sets
.Va keynote_errno
to
.Er ERROR_NOTFOUND
if the
.Fa dc
argument was invalid,
.Er ERROR_MEMORY
if it failed to allocate the necessary memory, or
.Er ERROR_SYNTAX
if the key to be converted was invalid.
.Pp
.Fn kn_decode_key
decodes the ASCII-encoded string contained in
.Fa key .
The result is placed in
.Fa dc ,
with
.Fa dec_algorithm
describing the algorithm (see
.Fn kn_encode_key ) ,
and
.Fa dec_key
pointing to an algorithm-dependent structure.
In this implementation, this is an SSLeay/OpenSSL-defined
.Fa DSA *
for DSA keys,
.Fa RSA *
for RSA and X.509-based keys, and a
.Fa keynote_binary *
for BINARY keys.
.Fa keytype
takes the values
.Dv KEYNOTE_PUBLIC_KEY
or
.Dv KEYNOTE_PRIVATE_KEY
to specify a public or private key, where applicable.
On success, this function returns 0.
On failure, it returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_MEMORY
if necessary memory could not be allocated, or
.Er ERROR_SYNTAX
if the key or the ASCII encoding was malformed.
.Pp
.Fn kn_sign_assertion
produces the cryptographic signature for the assertion of length
.Fa len
stored in
.Fa assertion ,
using the ASCII-encoded cryptographic key contained in
.Fa key .
The type of signature to be produced is described by the string
.Fa algorithm .
Possible values for this string are
.Dv SIG_RSA_SHA1_PKCS1_HEX ,
.Dv SIG_RSA_SHA1_PKCS1_BASE64 ,
.Dv SIG_RSA_MD5_HEX
and
.Dv SIG_RSA_MD5_HEX
for RSA keys,
.Dv SIG_DSA_SHA1_HEX
and
.Dv SIG_DSA_SHA1_BASE64
for DSA keys,
.Dv SIG_X509_SHA1_HEX
and
.Dv SIG_X509_SHA1_BASE64
for X.509-based keys.
No other cryptographic signatures are currently
supported by this implementation.
If
.Fa vflag
is set to 1, then the generated signature will also be verified.
On success, this function returns a string containing the ASCII-encoded
signature, without modifying the
.Fa assertion .
On failure, it returns
.Dv NULL
and sets
.Va keynote_errno
to
.Er ERROR_NOTFOUND
if one of the arguments was
.Dv NULL ,
.Er ERROR_MEMORY
if necessary memory could not be allocated, or
.Er ERROR_SYNTAX
if the
.Fa algorithm ,
the
.Fa key ,
or the
.Fa assertion
(if signature verification was requested) was invalid.
.Pp
.Fn kn_verify_assertion
verifies the cryptographic signature on the assertion of length
.Fa len
contained in string
.Fa assertion .
On success, this function returns
.Dv SIGRESULT_TRUE
if the signature could be verified, or
.Dv SIGRESULT_FALSE
otherwise.
On failure, this function returns \-1 and sets
.Va keynote_errno
to
.Er ERROR_MEMORY
if necessary memory could not be allocated, or
.Er ERROR_SYNTAX
if the assertion contained a syntactic error, or the cryptographic
algorithm was not supported.
.Pp
.Fn kn_free_key
frees a cryptographic key.
.Pp
.Fn kn_get_string
parses the argument, treating it as a
.Xr keynote 4
(quoted) string.
This is useful for parsing key files.
On success, this function returns a pointer to the parsing result.
The result is dynamically allocated and should be freed after use.
On failure,
.Dv NULL
is returned.
.Sh FILES
.Bl -tag -width libkeynote.a -compact
.It Pa keynote.h
.It Pa libkeynote.a
.El
.Sh DIAGNOSTICS
The return values of all the functions have been given along with the
function description above.
.Sh SEE ALSO
.Xr keynote 1 ,
.Xr keynote 4 ,
.Xr keynote 5
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A J. Lacy
.%D 1996
.%J IEEE Symposium on Security and Privacy
.%T Decentralized Trust Management
.Re
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A M. Strauss
.%D 1998
.%J Financial Crypto Conference
.%T Compliance-Checking in the PolicyMaker Trust Management System
.Re
.Sh STANDARDS
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A J. Ioannidis
.%A A. Keromytis
.%D September 1999
.%R RFC 2704
.%T The KeyNote Trust-Management System Version 2
.Re
.Sh AUTHORS
.An Angelos D. Keromytis Aq Mt angelos@@cs.columbia.edu
.Sh WEB PAGE
.Lk http://www1.cs.columbia.edu/~angelos/keynote.html
@


1.53
log
@fix imprecise .Fa markup; found with mandoc -Tlint
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.52 2015/11/20 16:31:05 mmcc Exp $
d23 1
a23 1
.Dd $Mdocdate: November 20 2015 $
d244 1
a244 1
.Xr kn_remove_assertion 3 .
d327 1
a327 1
.Xr kn_add_action 3
d410 1
a410 1
.Xr kn_do_query 3
d415 1
a415 1
.Xr kn_do_query 3
d439 1
a439 1
.Xr kn_do_query 3
d457 1
a457 1
.Xr kn_remove_assertion 3 .
d467 1
a467 1
.Xr kn_get_failed 3
d608 1
a608 1
.Xr kn_add_assertion 3
d618 1
a618 1
.Xr kn_do_query 3 ,
d789 1
a789 1
.Xr kn_encode_key 3 ) ,
@


1.52
log
@No longer direct bug reports to keynote@@research.att.com - it bounces mail.

"fair enough" jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.51 2015/11/10 23:48:18 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: November 10 2015 $
d400 1
a400 1
.Fa returnvalues[0] ,
d402 1
a402 1
.Fa returnvalues[numvalues - 1] .
@


1.51
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.50 2015/09/23 16:23:32 sobrado Exp $
d23 1
a23 1
.Dd $Mdocdate: September 23 2015 $
a939 4
.Sh BUGS
None that we know of.
If you find any, please report them to
.Aq Mt keynote@@research.att.com .
@


1.50
log
@fix function argument.

ok jmc@@, schwarze@@
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.49 2015/09/10 17:55:21 schwarze Exp $
d23 2
a24 2
.Dd $Mdocdate: September 10 2015 $
.Dt KEYNOTE 3
d28 26
a53 1
.Nm keynote
@


1.49
log
@use .In rather than .Fd #include
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.48 2014/12/05 15:06:09 schwarze Exp $
d23 1
a23 1
.Dd $Mdocdate: December 5 2014 $
d95 1
a95 1
.Fa "int numauthauthorizers"
@


1.48
log
@macro cleanup: remove bogus .Nm and split joint .Fn arguments
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.47 2014/09/17 06:21:46 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: September 17 2014 $
d31 3
a33 3
.Fd #include <sys/types.h>
.Fd #include <regex.h>
.Fd #include <keynote.h>
@


1.47
log
@diff From: Theo Buehler who notes of kn_encode_base64():
"Since the function is a simple wrapper around b64_ntop(),
there is no restriction on the possible lengths of the raw data in
`src'."

ok millert
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.46 2013/07/16 15:21:11 schwarze Exp $
d23 1
a23 1
.Dd $Mdocdate: July 16 2013 $
d84 13
a96 1
.Fn kn_query "struct environment *env" "char **returnvalues, int numvalues" "char **trusted, int *trustedlen, int numtrusted" "char **untrusted, int *untrustedlen, int numuntrusted" "char **authorizers, int numauthauthorizers"
@


1.46
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.45 2012/09/27 11:31:58 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: September 27 2012 $
a604 2
.Fa srclen
is not a multiple of 4, or
@


1.45
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.44 2012/08/15 18:56:28 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: August 15 2012 $
d902 1
a902 1
.An Angelos D. Keromytis Aq angelos@@cs.columbia.edu
d908 1
a908 1
.Aq keynote@@research.att.com .
@


1.44
log
@use Lk for links;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.43 2011/09/29 17:57:09 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: September 29 2011 $
d291 2
a292 1
returns 0. On failure, it returns \-1 and sets
d878 4
a881 4
.%A A. D. Keromytis
.%T "The KeyNote Trust-Management System, Version 2"
.%N RFC 2704
.%D 1999
d886 4
a889 4
.%A J. Lacy
.%T Decentralized Trust Management
.%J IEEE Symposium on Security and Privacy
.%D 1996
d891 1
d895 5
a899 4
.%A M. Strauss
.%T Compliance-Checking in the PolicyMaker Trust Management System
.%J Financial Crypto Conference
.%D 1998
d908 1
a908 1
.Dl Aq keynote@@research.att.com
@


1.43
log
@ssl.8: Certifying Authority -> Certificate Authority
isakmpd.8: rsa:1024 -> rsa:2048 (ok markus)
all: X509 -> X.509

from Lawrence Teo
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.42 2010/12/22 16:40:38 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: December 22 2010 $
d901 1
a901 1
.Pa http://www1.cs.columbia.edu/~angelos/keynote.html
@


1.42
log
@seemingly the "Decentralized Trust Management" paper comes from the
IEEE Symposium on Security and Privacy, not the IEEE Conference on
Privacy and Security;

from Lawrence Teo
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.41 2010/09/19 22:22:13 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: September 19 2010 $
a33 1
.Pp
d761 1
a761 1
for RSA and X509-based keys, and a
d802 1
a802 1
for X509-based keys.
@


1.41
log
@more wacky macro fixing;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.40 2007/08/03 08:09:37 hshoexer Exp $
d23 1
a23 1
.Dd $Mdocdate: May 31 2007 $
d888 1
a888 1
.%J IEEE Conference on Privacy and Security
@


1.40
log
@Update URL of the keynote webpage.  While there, update angelos' email
address.

Noticed by qgiovanni@@gmail.co, thanks!

ok jmc@@ (URL snippet), angelos@@
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.39 2007/05/31 19:19:35 jmc Exp $
d868 3
a902 3
.Sh DIAGNOSTICS
The return values of all the functions have been given along with the
function description above.
@


1.39
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.38 2004/06/26 12:11:41 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate$
d897 1
a897 1
.An Angelos D. Keromytis Aq angelos@@dsl.cis.upenn.edu
d899 1
a899 1
.Pa http://www.cis.upenn.edu/~keynote
@


1.38
log
@kill whitespace at eol;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.37 2004/06/24 22:02:41 hshoexer Exp $
d23 1
a23 1
.Dd April 29, 1999
@


1.37
log
@Document kn_get_string() a bit better and describe the return value.

ok ho@@ msf@@
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.36 2003/07/08 11:02:23 jmc Exp $
d860 1
a860 1
On failure, 
@


1.36
log
@- fix some lists/displays
- .Dl for one-line displays
- simplify macros
- .An/.Aq for AUTHORS
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.35 2003/05/24 18:30:32 jmc Exp $
d858 5
@


1.35
log
@- typos;
- new sentence, new line;
- whitespace at EOL
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.34 2002/05/03 16:21:57 angelos Exp $
d892 1
a892 2
Angelos D. Keromytis
.Aq angelos@@dsl.cis.upenn.edu
d901 1
a901 3
.Bd -literal -offset indent -compact
keynote@@research.att.com
.Ed
@


1.34
log
@Fix typo.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.33 2002/05/01 08:03:30 mpech Exp $
d538 1
a538 1
(the number of returnvalues in indicated by
@


1.33
log
@o) start new sentence on a new line;
o) always close .Bl tags;
o) fix usage of .Xr;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.32 2002/04/30 16:31:42 mpech Exp $
d790 2
a791 2
.Dv SIG_RSA_SHA1_HEX ,
.Dv SIG_RSA_SHA1_BASE64 ,
@


1.32
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.31 2001/09/03 20:14:51 deraadt Exp $
d559 2
a560 1
structures. The
d840 2
a841 1
otherwise. On failure, this function returns \-1 and sets
@


1.31
log
@with or without fee; received mail permitting this change from angelos
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.30 2001/09/03 16:47:51 deraadt Exp $
d273 1
a273 1
In case of conflict between a regular expression and a 
d278 1
a278 1
A callback function should never change the current 
@


1.30
log
@indent fixes
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.29 2001/08/16 17:58:06 mpech Exp $
d10 1
a10 1
.\" Permission to use, copy, and modify this software without fee
@


1.29
log
@o) -mdoc syntax improvements;
o) typos;
o) "start new line" issues;
o) improve enclosure/quoting macros;

millert@@ help and ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.28 2001/08/06 10:42:26 mpech Exp $
d36 6
a41 7
struct environment
{
    char               *env_name;
    char               *env_value;
    int                 env_flags;
    regex_t             env_regex;
    struct environment *env_next;
d44 3
a46 4
struct keynote_deckey
{
    int   dec_algorithm;
    void *dec_key;
d49 3
a51 4
struct keynote_binary
{
    int   bn_len;
    char *bn_key;
d54 5
a58 6
struct keynote_keylist
{
    int                     key_alg;
    void                   *key_key;
    char                   *key_stringkey;
    struct keynote_keylist *key_next;
@


1.28
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.27 2001/03/22 21:34:05 millert Exp $
d34 1
a35 1

d65 1
a65 2
.Ft int
.Fd keynote_errno ;
d121 1
a121 1
.Nm KeyNote ,
d125 2
a126 2
contains an error code if some library call failed. Failed calls
return \-1 (if their return value is integer), or
d142 3
a144 2
will be set to 0. This variable should be reset to 0 if an error was
encountered, prior to calling other library routines.
d147 8
a154 7
.Nm KeyNote
is centered around the concept of a session. A session describes a
collection of policies, assertions, action authorizers, return values,
and action attributes that the
.Nm KeyNote
system uses to evaluate a query. Information is not shared between
sessions. Policies, credentials, action authorizers, and action
d156 3
a158 2
a session. Furthermore, an application can discover which assertions
failed to be evaluated, and in what way, during a query.
d162 3
a164 2
information and performs all the necessary steps. This is essentially
a wrapper that calls the session API functions as necessary.
d171 1
a171 1
.Nm KeyNote
d176 4
a179 4
.Nm KeyNote
session, and performs any necessary initializations. On success, this
function returns the new session ID, which is used by all subsequent
calls with a
d228 2
a229 2
On success, this function returns 0. On failure, it returns \-1 and
sets
d252 6
a257 6
a string. This is used to implement callbacks for getting action
attribute values. The argument passed to such a callback function is a
string identifying the action attribute whose value is requested, and
should return a pointer to string containing that value (this pointer
will not be freed by the library), the empty string if the value was
not found, or a
d261 3
a263 3
appropriately). Prior to first use (currently, at the time the
attribute is added to the session environment), such functions are
called with
d265 4
a268 3
as the argument (defined in keynote.h) so that they can
perform any special initializations. Furthermore, when the
session is deleted, all such functions will be called with
d270 3
a272 4
to perform any special cleanup (such as free any allocated memory). A
function may be called with either of these arguments more than once,
if it has been defined as the callback function for more than one
attribute.
d277 7
a283 5
In case of conflict between a regular expression and a ``simple''
attribute, the latter will be given priority. In case of conflict
between two regular expression attributes, the one added later will be
given priority. A callback function should never change the current
.Nm KeyNote
d290 2
a291 2
having one callback function handling all attribute references). This
is particularly useful when the action attribute set is particularly
d297 2
a298 1
.Va keynote_errno to
d318 2
a319 1
On success, this function returns 0. On failure, it returns \-1 and
d325 3
a327 2
if the name was invalid. If the attribute value was a callback, that
function will be called with the define
d336 3
a338 2
The principal is typically an ASCII-encoded key. On success, this
function will return 0. On failure, it returns \-1 and sets
d353 2
a354 1
On success, this function returns 0. On failure, it returns \-1 and sets
d365 2
a366 2
is an ordered array of strings that contain the return values. The
lowest-ordered return value is contained in
d378 2
a379 1
will be used. The programmer SHOULD NOT free
d386 2
a387 1
array. On failure, it returns \-1 and sets
d404 2
a405 2
that was somehow invalid during evaluation. This function is typically
called after
d409 2
a410 2
specifies the type of failure the application is interested in. It can
be set to:
d422 2
a423 2
These values are defined in keynote.h. An application can then delete
the offending assertion using
d425 2
a426 2
For example, to remove all assertion whose signature failed, an
application could do something like:
d435 3
a437 2
returns an assertion ID. On failure, or when no assertion matching the
given criteria is found, it returns \-1 and set
d451 3
a453 2
authorizers, and assertions. On success, this function returns 0. On
failure, it returns \-1 and sets
d491 2
a492 2
will contain the value zero on return. The returned pointer should be
freed by the programmer.
d577 2
a578 1
is not used. On success, this function returns an index in
d580 2
a581 2
indicating the returned value to the query. On failure, it returns \-1
and sets
d588 2
a589 2
to lack of memory resources. Syntax errors in assertions will not be reported
by
d604 4
a607 2
.Fa dst should be long enough to also contain the trailing
string terminator. If
d624 2
a625 2
The actual length of the decoded data is returned on success. On
failure, this function returns \-1 and sets
d647 3
a649 2
The length of the allocated buffer will be (2 * srclen + 1). On
success, this function returns 0. On failure, it returns \-1 and sets
d663 2
a664 2
and stores the result in a memory chunk allocated by the function. A
pointer to that memory is stored in
d666 3
a668 2
The length of the allocated memory will be (strlen(src) / 2). On
success, this function returns 0. On failure, it returns \-1 and sets
d683 2
a684 2
ASCII-encodes a cryptographic key. The binary representation of the
key is contained in
d689 2
a690 2
dependent information describing the key. In this implementation, this
pointer should be a
d697 1
a697 1
.Nm KeyNote
d699 2
a700 1
action authorizers (and thus need to be canonicalized). The field
d710 2
a711 2
describes how the key should be binary-encoded. This implementation
supports
d719 2
a720 2
describes what ASCII encoding should be applied to the key. Valid
values are
d730 2
a731 2
to indicate whether the key is public or private. Private keys have
the string
d733 3
a735 3
(defined in keynote.h) prefixed to the algorithm name. On success,
this function returns a string containing the encoded key. On failure,
it returns
d760 2
a761 2
pointing to an algorithm-dependent structure. In this implementation,
this is an SSLeay/OpenSSL-defined
d773 3
a775 2
to specify a public or private key, where applicable. On success, this
function returns 0. On failure, it returns \-1 and sets
d793 1
a793 1
.Dv SIG_RSA_SHA1_HEX
d795 1
a795 1
.Dv SIG_RSA_MD5_HEX ,
d803 1
a803 1
.Dv SIG_X509_SHA1_HEX ,
d806 4
a809 2
for X509-based keys.  No other cryptographic signatures are currently
supported by this implementation. If
d811 2
a812 2
is set to 1, then the generated signature will also be verified. On
success, this function returns a string containing the ASCII-encoded
d858 2
a859 1
(quoted) string. This is useful for parsing key files.
d869 24
a892 13
.Bl -tag -width "AAAAAAA"
.It ``The KeyNote Trust-Management System, Version 2''
M. Blaze, J. Feigenbaum, A. D. Keromytis,
Internet Drafts, RFC 2704.
.It ``Decentralized Trust Management''
M. Blaze, J. Feigenbaum, J. Lacy,
1996 IEEE Conference on Privacy and Security
.It ``Compliance-Checking in the PolicyMaker Trust Management System''
M. Blaze, J. Feigenbaum, M. Strauss,
1998 Financial Crypto Conference
.It Web Page
http://www.cis.upenn.edu/~keynote
.El
d894 4
a897 1
Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
@


1.27
log
@it is kn_add_action, not keynote_add_action
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.26 2000/09/17 02:11:12 aaron Exp $
a835 1
.Pp
d858 1
a858 1
.Sh AUTHOR
@


1.26
log
@Arguments to .Dt macros should be all-caps.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.25 2000/05/19 05:04:51 angelos Exp $
d290 1
a290 1
.Xr keynote_add_action 3
@


1.25
log
@Fix macro typo.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.24 2000/05/18 08:31:02 angelos Exp $
d24 1
a24 1
.Dt keynote 3
@


1.24
log
@Manpage links.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d692 1
a692 1
.DV INTERNAL_ENC_PKCS1
@


1.23
log
@Add kn_free_key()
@
text
@d117 2
d830 6
a835 1
frees the key.
@


1.22
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.21 2000/04/12 21:48:03 aaron Exp $
d115 2
d826 3
@


1.21
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.20 2000/03/06 21:47:27 aaron Exp $
d66 1
a66 1
.Fd keynote_errno;
d795 1
a795 1
.Dv NULL,
@


1.20
log
@Various mdoc fixups.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.19 1999/12/02 01:27:16 aaron Exp $
d9 1
a9 1
.\"      
d124 1
a124 1
.Dv NULL 
d174 1
a174 1
argument. 
d493 1
a493 1
On failure, 
d509 2
a510 2
structures. 
On failure, 
d835 1
a835 1
.It ``The KeyNote Trust-Management System, Version 2'' 
d838 1
a838 1
.It ``Decentralized Trust Management'' 
@


1.19
log
@Minor repairs.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.18 1999/11/05 00:27:18 angelos Exp $
d525 3
a527 3
.Fa numvalues ),
a number (
.Fa numtrusted )
d531 3
a533 3
.Fa trustedlen ),
a number (
.Fa numuntrusted )
d537 3
a539 3
.Fa untrustedlen ),
and a number (
.Fa numauthorizers )
d733 1
a733 1
.Xr kn_encode_key 3 ),
d826 4
a829 2
.Fd keynote.h
.Fd libkeynote.a
d844 2
a848 2
.Sh WEB PAGE
http://www.cis.upenn.edu/~keynote
d854 1
a854 1
If you find any, please report them at
@


1.18
log
@Add a sample application as a usage guide, minor manpage correction.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.17 1999/11/03 19:52:22 angelos Exp $
d496 1
a496 1
.Fv NULL ,
d513 1
a513 1
.Fv NULL .
@


1.17
log
@Handle multiple assertions per file in signature verification, better
detection of malformed credentials, update manpages, sync with release.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.16 1999/10/11 04:39:00 angelos Exp $
d457 3
a459 1
On failure, this function returns \-1 and sets
d469 6
@


1.16
log
@Lower-case the name.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.15 1999/10/11 00:08:28 angelos Exp $
d446 2
a447 1
and returns an array of strings containing the assertions found in
d449 4
@


1.15
log
@Greatly expand keynote.4 to include query semantics, cross references.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d24 1
a24 1
.Dt KeyNote 3
d28 1
a28 1
.Nm KeyNote
@


1.14
log
@Roll back yesterday's commit, will wait until after 2.6.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.11 1999/10/06 19:26:14 angelos Exp $
d31 2
d552 7
a558 1
.Xr kn_do_query 3 .
d817 2
a818 1
.Xr keynote 4
@


1.13
log
@Move all ifdefs in header.h (instead of keynote.h), include header.h
in all files including keynote.h, update manpage.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.12 1999/10/09 06:34:14 angelos Exp $
a30 2
.Fd #include <sys/types.h>
.Fd #include <regex.h>
d550 1
a550 7
.Xr kn_do_query 3 ,
or to
.Er ERROR_MEMORY
if a trusted or untrusted assertion could not be added to the session due
to lack of memory resources. Syntax errors in assertions will not be reported
by
.Fn kn_query .
@


1.12
log
@Better handling of errors in kn_query, update manpage accordingly.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d31 2
@


1.11
log
@Fix a typo in manpage, as well as bogus error reporting.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.10 1999/10/01 01:08:30 angelos Exp $
d550 7
a556 1
.Xr kn_do_query 3 .
@


1.10
log
@Update for version 2.0
@
text
@d1 1
a1 1
.\" $OpenBSD$
d401 1
a401 1
if the assertion could be be cryptographically verified.
@


1.9
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.8 1999/07/07 14:22:25 aaron Exp $
d9 1
a9 1
.\"
d54 8
d84 2
d93 4
d115 4
d122 1
a122 1
.Dv NULL
d172 1
a172 1
argument.
d423 5
d470 34
d720 1
a720 1
for RSA keys, and a
d756 5
a760 1
for DSA keys. No other cryptographic signatures are currently
d803 1
d811 1
a811 1
.It ``The KeyNote Trust-Management System''
d813 2
a814 2
Internet Drafts, draft-ietf-trustmgt-keynote-00.txt
.It ``Decentralized Trust Management''
@


1.8
log
@when using `-' as a negative sign, escape it with a backslash so troff knows
it's not supposed to be a hyphen/dash
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.7 1999/07/07 10:50:06 aaron Exp $
d9 1
a9 1
.\"      
d13 1
a13 1
.\" modification of this software. 
d104 1
a104 1
.Dv NULL 
d154 1
a154 1
argument. 
d250 1
a250 1
In case of conflict between a regular expression and a ``simple'' 
d338 1
a338 1
is 
d383 1
a383 1
if the assertion could be be cryptographically verified. 
d412 1
a412 1
to 
d611 1
a611 1
for RSA keys, 
d661 1
a661 1
for DSA keys, 
d749 1
a749 1
.It ``The KeyNote Trust-Management System'' 
d752 1
a752 1
.It ``Decentralized Trust Management'' 
@


1.7
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.6 1999/07/02 21:13:08 aaron Exp $
d103 1
a103 1
return -1 (if their return value is integer), or
d155 1
a155 1
On failure, it returns -1 and sets
d186 1
a186 1
On failure, -1 is returned, and
d201 1
a201 1
On success, this function returns 0. On failure, it returns -1 and
d267 1
a267 1
returns 0. On failure, it returns -1 and sets
d288 1
a288 1
On success, this function returns 0. On failure, it returns -1 and
d305 1
a305 1
function will return 0. On failure, it returns -1 and sets
d320 1
a320 1
On success, this function returns 0. On failure, it returns -1 and sets
d351 1
a351 1
array. On failure, it returns -1 and sets
d400 1
a400 1
given criteria is found, it returns -1 and set
d410 1
a410 1
failure, it returns -1 and sets
d427 1
a427 1
On failure, this function returns -1 and sets
d489 1
a489 1
indicating the returned value to the query. On failure, it returns -1
d513 1
a513 1
-1 and sets
d526 1
a526 1
failure, this function returns -1 and sets
d549 1
a549 1
success, this function returns 0. On failure, it returns -1 and sets
d567 1
a567 1
success, this function returns 0. On failure, it returns -1 and sets
d672 1
a672 1
function returns 0. On failure, it returns -1 and sets
d734 1
a734 1
otherwise. On failure, this function returns -1 and sets
@


1.6
log
@remove redundant .Pp macros
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.5 1999/05/27 01:09:44 angelos Exp $
d25 1
a26 1
.\" .TH KeyNote 3 local
@


1.5
log
@Single manpage for command-line tool.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.4 1999/05/26 20:09:30 angelos Exp $
a741 1
.Pp
@


1.4
log
@Typos and proper form (deraadt@@)
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.3 1999/05/25 21:42:22 angelos Exp $
d748 1
a748 5
.Xr keynote 4 ,
.Xr keynote-keygen 1 , 
.Xr keynote-sign 1 , 
.Xr keynote-sigver 1 ,
.Xr keynote-verify 1
@


1.3
log
@Export kn_keycompare() in the API, update the spec and man pages.

Note that the *.1 manpages will all be rolled into a single one soon.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.2 1999/05/24 01:50:04 angelos Exp $
d29 1
a29 1
.Nd A Trust-Management System Library
@


1.2
log
@Update man pages to reflect new usage method.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.1 1999/05/23 22:32:08 angelos Exp $
d82 2
a100 7
For details on
.Nm KeyNote ,
see the web page 
.Bd -literal -offset indent
 http://www.cis.upenn.edu/~keynote
.Ed
.Pp
d437 9
@


1.1
log
@Work with "make obj;make"
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.3,v 1.1.1.1 1999/05/23 22:11:07 angelos Exp $
d743 2
@

