head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.6
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.16.0.10
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.10
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.28
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.26
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.22
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.24
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.20
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.18
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.16
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.14
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.12
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.10
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.12.0.8
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.6
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.4
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	KeyNote-v2:1.1.1.1
	Angelos:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2015.12.23.23.55.30;	author mmcc;	state Exp;
branches;
next	1.18;
commitid	hKT70CmaAsyMvhxr;

1.18
date	2015.12.20.00.28.18;	author mmcc;	state Exp;
branches;
next	1.17;
commitid	RIZWJAapD6CQ8itL;

1.17
date	2015.11.19.19.48.27;	author tedu;	state Exp;
branches;
next	1.16;
commitid	yZnAp5ubIOGqXkTj;

1.16
date	2013.11.29.19.00.51;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.06.11.36.23;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2004.06.29.11.35.56;	author msf;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.25.05.06.49;	author msf;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.27.06.29.14;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.03.20.14.51;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.11.20.51.38;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.13.19.16.16;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.12.00.26.16;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	99.10.26.22.31.38;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	99.10.09.19.47.32;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	99.10.09.06.59.37;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	99.10.06.20.27.46;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	99.10.01.01.08.30;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	99.05.31.20.09.59;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	99.05.23.22.11.04;	author angelos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.23.22.11.04;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.19
log
@remove two NULL casts
@
text
@%{
/* $OpenBSD: keynote-ver.l,v 1.18 2015/12/20 00:28:18 mmcc Exp $ */
/*
 * The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
 *
 * This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
 * in April-May 1998
 *
 * Copyright (C) 1998, 1999 by Angelos D. Keromytis.
 *	
 * Permission to use, copy, and modify this software with or without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software. 
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

#include <sys/time.h>
#include <sys/types.h>

#include <ctype.h>
#include <regex.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "z.tab.h"
#include "header.h"
#include "keynote.h"

static void mystrncpy(char *, char *, int);
%}
vstring		[a-zA-Z0-9][a-zA-Z0-9_]*
litstring       \"(((\\\n)|(\\.)|(\\\\)|([^\\\n\"]))*)\"
comment         "#"[^\n]*
%s FIRSTPART MIDDLEPART SECONDPART KEYSTATE
%pointer
%option noyywrap yylineno never-interactive
%%

<MIDDLEPART>"="               {
				BEGIN(SECONDPART);
			        return EQ;
			      }
<FIRSTPART>{vstring}          {
				int len = strlen(kvtext) + 1;
				kvlval.s.string = calloc(len, sizeof(char));
                                if (kvlval.s.string == NULL) {
				    keynote_errno = ERROR_MEMORY;
				    return -1;
				}
				strlcpy(kvlval.s.string, kvtext, len);
				BEGIN(MIDDLEPART);
                                return VSTRING;
                              }
<KEYSTATE,SECONDPART>{litstring} { kvlval.s.string = calloc(strlen(kvtext) - 1,
				  		         sizeof(char));
                                   if (kvlval.s.string == NULL) {
				       keynote_errno = ERROR_MEMORY;
				       return -1;
				   }
				   mystrncpy(kvlval.s.string, kvtext + 1,
					     strlen(kvtext) - 2);
				   BEGIN(FIRSTPART);
				   return STRING;
                                 }
<FIRSTPART,KEYSTATE>{comment} ;
[ \t\n]		              ;
.                           { keynote_errno = ERROR_SYNTAX; return -1; REJECT; }

%%

/*
 * Return RESULT_TRUE if character is octal digit, RESULT_FALSE otherwise.
 */
static int
is_octal(char c)
{
    switch (c)
    {
	case '0': case '1': case '2': case '3':
	case '4': case '5': case '6': case '7':
	    return RESULT_TRUE;

	default:
	    return RESULT_FALSE;
    }
}

/*
 * Return octal value (non-zero) if argument starts with such a
 * representation, otherwise 0.
 */
static unsigned char
get_octal(char *s, int len, int *adv)
{
    unsigned char res = 0;

    if (*s == '0')
    {
	if (len > 0)
	{
	    if (is_octal(*(s + 1)))
	    {
		res = *(s + 1) - '0';
		*adv = 2;

		if (is_octal(*(s + 2)) && (len - 1 > 0))
		{
		    res = res * 8 + (*(s + 2) - '0');
		    *adv = 3;
		}
	    }
	}
    }
    else
      if (is_octal(*s) && (len - 1 > 0))  /* Non-zero leading */
      {
	  if (is_octal(*(s + 1)) &&
	      is_octal(*(s + 2)))
	  {
	      *adv = 3;
	      res = (((*s) - '0') * 64) +
		    (((*(s + 1)) - '0') * 8) +
		    ((*(s + 2)) - '0');
	  }
      }

    return res;
}

/*
 * Copy at most len characters to string s1 from string s2, taking
 * care of escaped characters in the process. String s1 is assumed
 * to have enough space, and be zero'ed.
 */
void
mystrncpy(char *s1, char *s2, int len)
{
    unsigned char c;
    int advance;

    if (len == 0)
      return;

    while (len-- > 0)
    {
        if (*s2 == '\\')
	{
	    s2++;

	    if (len-- <= 0)
	      break;

	    if (*s2 == '\n')
	    {
		while (isspace((unsigned char)*(++s2)) && (len-- > 0))
		  ;
	    }
	    else
	      if ((c = get_octal(s2, len, &advance)) != 0)
	      {
		  len -= advance - 1;
		  s2 += advance;
		  *s1++ = c;
	      }
	      else
		if (*s2 == 'n')  /* Newline */
		{
		    *s1++ = '\n';
		    s2++;
		}
		else
		  if (*s2 == 't')  /* Tab */
		  {
		      *s1++ = '\t';
		      s2++;
		  }
		  else
		    if (*s2 == 'r')  /* Linefeed */
		    {
			*s1++ = '\r';
			s2++;
		    }
		    else
		      if (*s2 == 'f')  /* Formfeed */
		      {
			  *s1++ = '\f';
			  s2++;
		      }
		      else
			if ((*s1++ = *s2++) == 0)
			  break;

	    continue;
	}

        if ((*s1++ = *s2++) == 0)
	  break;
     }
}

/*
 * Parse a file that contains environment variable/value pairs.
 * Return -1 on failure.
 */
int
read_environment(char *filename)
{
    YY_BUFFER_STATE kvfoo;
    FILE *fp;
    int i;

    if ((fp = fopen(filename, "r")) == NULL) {
	perror(filename);
	return -1;
    }
 
    kvfoo = kv_create_buffer(fp, YY_BUF_SIZE);
    kv_switch_to_buffer(kvfoo);
    BEGIN(FIRSTPART);
    i = kvparse();
    kv_delete_buffer(kvfoo);
    fclose(fp);
    switch (i)
    {
	case 0:
	    return 0;
	    
	default:
	    if (keynote_errno == ERROR_MEMORY)
	      fprintf(stderr,
		      "Memory error while processing environment file <%s>\n",
		      filename);
	    else
	      fprintf(stderr,
		     "Syntax error in environment file <%s>, line %d\n",
		     filename, kvlineno);
	    return -1;
    }

    /* Used to avoid compiler (-Wall) warnings. Never reached */
    if (0)
    {
	yyunput(0, NULL);
    }
}

/*
 * Parse a key.
 */
void
parse_key(char *buf)
{
    YY_BUFFER_STATE key_state;
    int err;

    key_state = kv_scan_string(buf);
    BEGIN(KEYSTATE);
    err = kvparse();
    kv_delete_buffer(key_state);

    if (err != 0)
      if (keynote_errno == 0)
	keynote_errno = ERROR_SYNTAX;
}
@


1.18
log
@Clean up a condition. No functional change. ok tb@@
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.17 2015/11/19 19:48:27 tedu Exp $ */
d53 1
a53 2
                                if (kvlval.s.string == (char *) NULL)
				{
d63 1
a63 2
                                   if (kvlval.s.string == (char *) NULL)
				   {
@


1.17
log
@lexer fixes to work with new flex. from Serguey Parkhomovsky
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.16 2013/11/29 19:00:51 deraadt Exp $ */
d221 1
a221 3
    fp = fopen(filename, "r");
    if (fp == (FILE *) NULL)
    {
@


1.16
log
@fairly simple unsigned char casts for ctype
ok krw
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.15 2011/04/06 11:36:23 miod Exp $ */
a254 1
	yy_flex_realloc(0, 0);
@


1.15
log
@Avoid using NULL in non-pointer contexts: use 0 for integer values and '\0'
for chars.
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.14 2004/06/29 11:35:56 msf Exp $ */
d164 1
a164 1
		while (isspace((int) *(++s2)) && (len-- > 0))
@


1.14
log
@Header cleanup.
ok hshoexer@@
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.13 2004/06/25 05:06:49 msf Exp $ */
d255 1
a255 1
	yy_flex_realloc(0, NULL);
@


1.13
log
@Make crufty configure stuff go away. Remove all unused code paths.
No change in binaries.

ok millert@@ deraadt@@ hshoexer@@
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.12 2002/05/27 06:29:14 deraadt Exp $ */
d27 1
@


1.12
log
@snprintf and strlcpy cleanup; angelos ok
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.11 2001/09/03 20:14:51 deraadt Exp $ */
d23 2
a24 3
#if HAVE_CONFIG_H
#include "config.h"
#endif /* HAVE_CONFIG_H */
a25 1
#include <sys/types.h>
a26 2

#if STDC_HEADERS
d28 1
a28 3
#endif /* STDC_HEADERS */

#if HAVE_UNISTD_H
a29 12
#endif /* HAVE_UNISTD_H */

#if TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#if HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif
@


1.11
log
@with or without fee; received mail permitting this change from angelos
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.10 2000/08/11 20:51:38 angelos Exp $ */
d67 3
a69 2
<FIRSTPART>{vstring}          { kvlval.s.string = calloc(strlen(kvtext) + 1,
							 sizeof(char));
d75 1
a75 1
				strcpy(kvlval.s.string, kvtext);
@


1.10
log
@Fix lexer bug (bad handling of escaped double-quote).
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.9 2000/06/13 19:16:16 angelos Exp $ */
d11 1
a11 1
 * Permission to use, copy, and modify this software without fee
@


1.9
log
@Fix some compile warnings.
@
text
@d2 1
a2 1
/* $OpenBSD$ */
d56 1
a56 1
litstring	\"(([^\"\n])|(\\[\"\n.]))*\"
@


1.8
log
@Simplify a couple of things in the lexer, make the compiler happy so
-Wall doesn't complain at the lexers.
@
text
@d180 1
a180 1
		while (isspace(*(++s2)) && (len-- > 0))
@


1.7
log
@sync
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.5 1999/10/09 06:59:37 angelos Exp $ */
d56 1
a56 1
litstring	\"(([^\"\n])|(\\[\"\n\f\r\t.]))*\"
d92 1
a92 1
.                             { keynote_errno = ERROR_SYNTAX; return -1; }
d265 7
@


1.6
log
@Roll back yesterday's commit, will wait until after 2.6.
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.4 1999/10/06 20:27:46 angelos Exp $ */
d50 1
d52 2
a53 1
#include "header.h"
@


1.5
log
@Move all ifdefs in header.h (instead of keynote.h), include header.h
in all files including keynote.h, update manpage.
@
text
@d2 1
a2 1
/* $OpenBSD$ */
d50 1
a51 3
#include "keynote.h"

static void mystrncpy(char *, char *, int);
@


1.4
log
@Make some of the perror() calls more informative, correct some
inconsistencies in the man page and the query tool, update the
testsuite accordingly.
@
text
@d2 1
a2 1
/* $OpenBSD: keynote-ver.l,v 1.3 1999/10/01 01:08:30 angelos Exp $ */
d50 1
d52 2
a53 1
#include "header.h"
@


1.3
log
@Update for version 2.0
@
text
@d2 1
a2 1
/* $OpenBSD$ */
a52 1
string          ([a-zA-Z])([a-zA-Z0-9_-])*
d68 4
a71 1
				  return ERROR_MEMORY;
a75 9
<KEYSTATE,SECONDPART>{string} { kvlval.s.string = calloc(strlen(kvtext) + 1,
							 sizeof(char));
                                if (kvlval.s.string == (char *) NULL)
				  return ERROR_MEMORY;
				strncpy(kvlval.s.string, kvtext,
					strlen(kvtext));
				BEGIN(FIRSTPART);
                                return STRING;
                              }
d79 4
a82 1
				     return ERROR_MEMORY;
d90 1
a90 1
.                             return ERROR_SYNTAX;
a252 9
	case ERROR_MEMORY:
	    fprintf(stderr,
		    "Memory error while processing environment file <%s>\n",
		    filename);
	    return -1;
	    break;
	    
	case 1:
	case ERROR_SYNTAX:
d254 8
a261 2
	    fprintf(stderr, "Syntax error in environment file <%s>, line %d\n",
		    filename, kvlineno);
@


1.2
log
@Sanitize prototypes and variable extern definitions, remove
unnecessary header file, add prototypes header file for utility building.
@
text
@d23 4
d28 7
d36 9
a44 1
#include <ctype.h>
d46 2
a47 1
#include <string.h>
@


1.1
log
@Initial revision
@
text
@a2 1

d28 1
d31 1
a31 4

static void mystrncpy(char *, char *, int);

extern int kvparse();
d142 1
a142 1
static void
@


1.1.1.1
log
@KeyNote version 2 trust-management system (security policy handling).
Utilities to follow.

@
text
@@
