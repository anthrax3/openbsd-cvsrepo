head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.8
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.48
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.40
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.44
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.42
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.38
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.36
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.34
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.32
	OPENBSD_5_0:1.21.0.30
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.28
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.26
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.22
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.24
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.20
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.18
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.16
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.14
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.12
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.10
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.8
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.6
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.21.0.4
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.2
	OPENBSD_3_6_BASE:1.21
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.18.0.4
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.18.0.2
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.17.0.4
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	KeyNote-v2:1.1.1.1
	Angelos:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2015.11.19.02.35.24;	author mmcc;	state Exp;
branches;
next	1.21;
commitid	bCQllQH6f0Sp4lOD;

1.21
date	2004.06.29.11.35.56;	author msf;	state Exp;
branches;
next	1.20;

1.20
date	2004.06.25.05.06.49;	author msf;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.05.17.01.49;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.27.06.29.14;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.13.17.55.10;	author angelos;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.03.20.14.51;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2001.07.10.20.26.19;	author angelos;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.10.16.44.53;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.07.00.23.54;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.08.21.50.11;	author angelos;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.27.00.09.54;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.26.23.28.46;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	99.11.03.03.17.58;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	99.10.26.22.31.38;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	99.10.09.19.47.32;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	99.10.09.06.59.37;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	99.10.06.20.27.46;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	99.10.01.01.08.30;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	99.05.31.20.09.59;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	99.05.24.01.29.22;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	99.05.23.22.11.06;	author angelos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.23.22.11.06;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Remove a ton of ugly, needless casts for NULL, calloc(), and strdup().
No binary change.
@
text
@/* $OpenBSD: keynote-keygen.c,v 1.21 2004/06/29 11:35:56 msf Exp $ */
/*
 * The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
 *
 * This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
 * in April-May 1998
 *
 * Copyright (C) 1998, 1999 by Angelos D. Keromytis.
 *	
 * Permission to use, copy, and modify this software with or without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software. 
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <ctype.h>
#include <fcntl.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <openssl/dsa.h>
#include <openssl/err.h>
#include <openssl/rand.h>
#include <openssl/rsa.h>

#include "header.h"
#include "keynote.h"
#include "assertion.h"
#include "signature.h"

void	keygenusage(void);

void
keygenusage(void)
{
    fprintf(stderr, "Arguments:\n");
    fprintf(stderr, "\t<AlgorithmName> <keysize> "
	    "<PublicKeyFile> <PrivateKeyFile> [<print-offset>] "
	    "[<print-length>]\n");
}

/*
 * Print the specified number of spaces.
 */
void
print_space(FILE *fp, int n)
{
    while (n--)
      fprintf(fp, " ");
}

/*
 * Output a key, properly formatted.
 */
void
print_key(FILE *fp, char *algname, char *key, int start, int length)
{
    int i, k;

    print_space(fp, start);
    fprintf(fp, "\"%s", algname);

    for (i = 0, k = strlen(algname) + 2; i < strlen(key); i++, k++)
    {
	if (k == length)
	{
	    if (i == strlen(key))
	    {
		fprintf(fp, "\"\n");
		return;
	    }

	    fprintf(fp, "\\\n");
	    print_space(fp, start);
	    i--;
	    k = 0;
	}
	else
	  fprintf(fp, "%c", key[i]);
    }

    fprintf(fp, "\"\n");
}

void
keynote_keygen(int argc, char *argv[])
{
    int begin = KEY_PRINT_OFFSET, prlen = KEY_PRINT_LENGTH;
    char *foo, *privalgname, seed[SEED_LEN];
    int alg, enc, ienc, len = 0, counter;
    struct keynote_deckey dc;
    unsigned long h;
    DSA *dsa;
    RSA *rsa;
    FILE *fp;
    char *algname;

    if ((argc != 5) && (argc != 6) && (argc != 7))
    {
	keygenusage();
	exit(0);
    }

    /* Fix algorithm name */
    if (argv[1][strlen(argv[1]) - 1] != ':')
    {
	int len = strlen(argv[1]) + 2;

        fprintf(stderr, "Algorithm name [%s] should be terminated with a "
		"colon, fixing.\n", argv[1]);
	algname = calloc(len, sizeof(char));
	if (algname == NULL)
	{
	    perror("calloc()");
	    exit(1);
	}

	strlcpy(algname, argv[1], len);
	algname[strlen(algname)] = ':';
    }
    else
	algname = argv[1];

    if (argc > 5)
    {
	begin = atoi(argv[5]);
	if (begin <= -1)
	{
	    fprintf(stderr, "Erroneous value for print-offset parameter.\n");
	    exit(1);
	}
    }

    if (argc > 6)
    {
	prlen = atoi(argv[6]);
	if (prlen <= 0)
	{
	    fprintf(stderr, "Erroneous value for print-length parameter.\n");
	    exit(1);
	}
    }

    if (strlen(algname) + 2 > prlen)
    {
	fprintf(stderr, "Parameter ``print-length'' should be larger "
		"than the length of AlgorithmName (%lu)\n",
		(unsigned long) strlen(algname));
	exit(1);
    }

    alg = keynote_get_key_algorithm(algname, &enc, &ienc);
    len = atoi(argv[2]);

    if (len <= 0)
    {
	fprintf(stderr, "Invalid specified keysize %d\n", len);
	exit(1);
    }

    if ((alg == KEYNOTE_ALGORITHM_DSA) &&
	(ienc == INTERNAL_ENC_ASN1) &&
	((enc == ENCODING_HEX) || (enc == ENCODING_BASE64)))
    {
        RAND_bytes(seed, SEED_LEN);

	dsa = DSA_generate_parameters(len, seed, SEED_LEN,
	    &counter, &h, NULL, NULL);

	if (dsa == NULL)
	{
	    ERR_print_errors_fp(stderr);
	    exit(1);
	}

	if (DSA_generate_key(dsa) != 1)
	{
	    ERR_print_errors_fp(stderr);
	    exit(1);
	}

	dc.dec_algorithm = KEYNOTE_ALGORITHM_DSA;
	dc.dec_key = (void *) dsa;

	foo = kn_encode_key(&dc, ienc, enc, KEYNOTE_PUBLIC_KEY);
	if (foo == NULL)
	{
	    fprintf(stderr, "Error encoding key (errno %d)\n", keynote_errno);
	    exit(1);
	}

	if (!strcmp(argv[3], "-"))
	  fp = stdout;
	else
	{
	    fp = fopen(argv[3], "w");
	    if (fp == NULL)
	    {
		perror(argv[3]);
		exit(1);
	    }
	}

	print_key(fp, algname, foo, begin, prlen);
	free(foo);

	if (strcmp(argv[3], "-"))
	  fclose(fp);

	foo = kn_encode_key(&dc, ienc, enc, KEYNOTE_PRIVATE_KEY);
	if (foo == NULL)
	{
	    fprintf(stderr, "Error encoding key (errno %d)\n", keynote_errno);
	    exit(1);
	}

	if (!strcmp(argv[4], "-"))
	{
	    fp = stdout;
	    if (!strcmp(argv[3], "-"))
	      printf("===========================\n");
	}
	else
	{
	    fp = fopen(argv[4], "w");
	    if (fp == NULL)
	    {
		perror(argv[4]);
		exit(1);
	    }
	}

	len = strlen(KEYNOTE_PRIVATE_KEY_PREFIX) + strlen(foo) + 1;
	privalgname = calloc(len, sizeof(char));
	if (privalgname == NULL)
	{
	    perror("calloc()");
	    exit(1);
	}
	snprintf(privalgname, len, "%s%s", KEYNOTE_PRIVATE_KEY_PREFIX, algname);
	print_key(fp, privalgname, foo, begin, prlen);
	free(privalgname);
	free(foo);

	if (strcmp(argv[4], "-"))
	  fclose(fp);

	exit(0);
    }

    if ((alg == KEYNOTE_ALGORITHM_RSA) &&
	(ienc == INTERNAL_ENC_PKCS1) &&
	((enc == ENCODING_HEX) || (enc == ENCODING_BASE64)))
    {
	rsa = RSA_generate_key(len, DEFAULT_PUBLIC, NULL, NULL);

	if (rsa == NULL)
	{
	    ERR_print_errors_fp(stderr);
	    exit(1);
	}

	dc.dec_algorithm = KEYNOTE_ALGORITHM_RSA;
	dc.dec_key = (void *) rsa;

	foo = kn_encode_key(&dc, ienc, enc, KEYNOTE_PUBLIC_KEY);
	if (foo == NULL)
	{
	    fprintf(stderr, "Error encoding key (errno %d)\n", keynote_errno);
	    exit(1);
	}

	if (!strcmp(argv[3], "-"))
	  fp = stdout;
	else
	{
	    fp = fopen(argv[3], "w");
	    if (fp == NULL)
	    {
		perror(argv[3]);
		exit(1);
	    }
	}

	print_key(fp, algname, foo, begin, prlen);
	free(foo);

	if (strcmp(argv[3], "-"))
	  fclose(fp);

	foo = kn_encode_key(&dc, ienc, enc, KEYNOTE_PRIVATE_KEY);
	if (foo == NULL)
	{
	    fprintf(stderr, "Error encoding key (errno %d)\n", keynote_errno);
	    exit(1);
	}

	if (!strcmp(argv[4], "-"))
	{
	    fp = stdout;
	    if (!strcmp(argv[3], "-"))
	      printf("===========================\n");
	}
	else
	{
	    fp = fopen(argv[4], "w");
	    if (fp == NULL)
	    {
		perror(argv[4]);
		exit(1);
	    }
	}

	len = strlen(KEYNOTE_PRIVATE_KEY_PREFIX) + strlen(foo) + 1;
	privalgname = calloc(len, sizeof(char));
	if (privalgname == NULL)
	{
	    perror("calloc()");
	    exit(1);
	}
	snprintf(privalgname, len, "%s%s", KEYNOTE_PRIVATE_KEY_PREFIX, algname);
	print_key(fp, privalgname, foo, begin, prlen);
	free(privalgname);
	free(foo);

	if (strcmp(argv[4], "-"))
	  fclose(fp);

	exit(0);
    }

    /* More algorithms here */

    fprintf(stderr, "Unknown/unsupported algorithm [%s]\n", algname);
    exit(1);
}
@


1.21
log
@Header cleanup.
ok hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.20 2004/06/25 05:06:49 msf Exp $ */
d123 2
a124 2
	algname = (char *) calloc(len, sizeof(char));
	if (algname == (char *) NULL)
d179 2
a180 2
	dsa = DSA_generate_parameters(len, seed, SEED_LEN, &counter, &h, NULL
				      , NULL);
d182 1
a182 1
	if (dsa == (DSA *) NULL)
d198 1
a198 1
	if (foo == (char *) NULL)
d209 1
a209 1
	    if (fp == (FILE *) NULL)
d223 1
a223 1
	if (foo == (char *) NULL)
d238 1
a238 1
	    if (fp == (FILE *) NULL)
d246 2
a247 2
	privalgname = (char *) calloc(len, sizeof(char));
	if (privalgname == (char *) NULL)
d269 1
a269 1
	if (rsa == (RSA *) NULL)
d279 1
a279 1
	if (foo == (char *) NULL)
d290 1
a290 1
	    if (fp == (FILE *) NULL)
d304 1
a304 1
	if (foo == (char *) NULL)
d319 1
a319 1
	    if (fp == (FILE *) NULL)
d327 2
a328 2
	privalgname = (char *) calloc(len, sizeof(char));
	if (privalgname == (char *) NULL)
@


1.20
log
@Make crufty configure stuff go away. Remove all unused code paths.
No change in binaries.

ok millert@@ deraadt@@ hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.19 2003/07/05 17:01:49 deraadt Exp $ */
d27 1
d32 5
@


1.19
log
@protos
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.18 2002/05/27 06:29:14 deraadt Exp $ */
a21 4
#if HAVE_CONFIG_H
#include "config.h"
#endif /* HAVE_CONFIG_H */

d24 4
a28 4
#include <stdio.h>
#include <ctype.h>

#if STDC_HEADERS
a29 9
#endif /* STDC_HEADERS */

#if HAVE_FCNTL_H
#include <fcntl.h>
#endif /* HAVE_FCNTL_H */

#if HAVE_IO_H
#include <io.h>
#elif HAVE_UNISTD_H
a30 1
#endif /* HAVE_IO_H */
a94 1
#if defined(CRYPTO) || defined(PGPLIB)
a101 1
#endif /* CRYPTO || PGPLIB */
a157 1
#if defined(CRYPTO) || defined(PGPLIB)
d174 1
a174 4
#if SSLEAY_VERSION_NUMBER >= 0x0900
				      , NULL
#endif /* SSLEAY_VERSION_NUMBER */
				     );
d261 1
a261 5
	rsa = RSA_generate_key(len, DEFAULT_PUBLIC, NULL
#if SSLEAY_VERSION_NUMBER >= 0x0900
			       , NULL
#endif /* SSLEAY_VERSION_NUMBER */
				     );
a338 1
#endif /* CRYPTO */
@


1.18
log
@snprintf and strlcpy cleanup; angelos ok
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.17 2001/09/13 17:55:10 angelos Exp $ */
d50 2
@


1.17
log
@Prototype changed.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.16 2001/09/03 20:14:51 deraadt Exp $ */
d127 2
d131 1
a131 1
	algname = (char *) calloc(strlen(argv[1]) + 2, sizeof(char));
d138 1
a138 1
	strcpy(algname, argv[1]);
d257 2
a258 2
	privalgname = (char *) calloc(strlen(KEYNOTE_PRIVATE_KEY_PREFIX) +
				      strlen(foo) + 1, sizeof(char));
d264 1
a264 1
	sprintf(privalgname, "%s%s", KEYNOTE_PRIVATE_KEY_PREFIX, algname);
d342 2
a343 2
	privalgname = (char *) calloc(strlen(KEYNOTE_PRIVATE_KEY_PREFIX) +
				      strlen(foo) + 1, sizeof(char));
d349 1
a349 1
	sprintf(privalgname, "%s%s", KEYNOTE_PRIVATE_KEY_PREFIX, algname);
@


1.16
log
@with or without fee; received mail permitting this change from angelos
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.15 2001/07/10 20:26:19 angelos Exp $ */
d184 1
a184 5
        if (RAND_bytes(seed, SEED_LEN) == 0)
        {
            fprintf(stderr, "Failed to acquire %d random bytes\n", SEED_LEN);
            exit(1);
        }
@


1.15
log
@Style.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.14 2001/07/10 16:44:53 deraadt Exp $ */
d10 1
a10 1
 * Permission to use, copy, and modify this software without fee
@


1.14
log
@-Wall
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.13 2001/07/07 00:23:54 millert Exp $ */
d165 2
a166 2
	    "than the length of AlgorithmName (%lu)\n",
	    (unsigned long)strlen(algname));
@


1.13
log
@another size_t printf format missmatch
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.12 2001/03/08 21:50:11 angelos Exp $ */
d165 2
a166 1
		"than the length of AlgorithmName (%lu)\n", strlen(algname));
@


1.12
log
@exit(-1) -> exit(1)
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.11 2000/09/27 00:09:54 angelos Exp $ */
d165 1
a165 1
		"than the length of AlgorithmName (%d)\n", strlen(algname));
@


1.11
log
@Sync again (remove unneeded RAND_set calls).
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.10 2000/09/26 23:28:46 angelos Exp $ */
d133 1
a133 1
	    exit(-1);
d148 1
a148 1
	    exit(-1);
d158 1
a158 1
	    exit(-1);
d166 1
a166 1
	exit(-1);
d176 1
a176 1
	exit(-1);
d186 1
a186 1
            exit(-1);
d198 1
a198 1
	    exit(-1);
d204 1
a204 1
	    exit(-1);
d214 1
a214 1
	    exit(-1);
d225 1
a225 1
		exit(-1);
d239 1
a239 1
	    exit(-1);
d254 1
a254 1
		exit(-1);
d263 1
a263 1
	    exit(-1);
d289 1
a289 1
	    exit(-1);
d299 1
a299 1
	    exit(-1);
d310 1
a310 1
		exit(-1);
d324 1
a324 1
	    exit(-1);
d339 1
a339 1
		exit(-1);
d348 1
a348 1
	    exit(-1);
d365 1
a365 1
    exit(-1);
@


1.10
log
@Sync.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a177 2

    RAND_set_rand_method(RAND_SSLeay());
@


1.9
log
@Flexibility in signature printing.
@
text
@a114 1
    int fd, cnt = RND_BYTES;
d179 1
a179 6
    fd = open(KEYNOTERNDFILENAME, O_RDONLY, 0);
    if (fd < 0)
    {
	perror(KEYNOTERNDFILENAME);
	exit(-1);
    }
d181 3
a183 12
    for (h = 0; h < 5; h++)
    {
	if (read(fd, seed, SEED_LEN) <= 0)
	{
	    perror("read()");
	    exit(-1);
	}

	RAND_seed(seed, SEED_LEN);
    }

    if (read(fd, seed, SEED_LEN) < SEED_LEN)
d185 1
a185 10
	perror("read()");
	exit(-1);
    }

    close(fd);

    /* Make sure we read RND_BYTES bytes */
    do
    {
        if ((fd = RAND_load_file(KEYNOTERNDFILENAME, cnt)) <= 0)
d187 2
a188 2
	    perror(KEYNOTERNDFILENAME);
	    exit(-1);
a190 8
	cnt -= fd;
    } while (cnt > 0);


    if ((alg == KEYNOTE_ALGORITHM_DSA) &&
	(ienc == INTERNAL_ENC_ASN1) &&
	((enc == ENCODING_HEX) || (enc == ENCODING_BASE64)))
    {
@


1.8
log
@sync
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.6 1999/10/09 06:59:37 angelos Exp $ */
d56 2
a57 2
	    "<PublicKeyFile> <PrivateKeyFile> [<printf-offset> "
	    "<print-length>]\n");
@


1.7
log
@Roll back yesterday's commit, will wait until after 2.6.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.5 1999/10/06 20:27:46 angelos Exp $ */
d46 1
a49 1
#include "header.h"
@


1.6
log
@Move all ifdefs in header.h (instead of keynote.h), include header.h
in all files including keynote.h, update manpage.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a45 1
#include "header.h"
d49 1
@


1.5
log
@Make some of the perror() calls more informative, correct some
inconsistencies in the man page and the query tool, update the
testsuite accordingly.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-keygen.c,v 1.4 1999/10/01 01:08:30 angelos Exp $ */
d46 1
a49 1
#include "header.h"
@


1.4
log
@Update for version 2.0
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d183 1
a183 1
	perror("open(\"/dev/urandom\")");
d211 1
a211 1
	    perror("RAND_load_file()");
d258 1
a258 1
		perror("fopen()");
d287 1
a287 1
		perror("fopen()");
d343 1
a343 1
		perror("fopen()");
d372 1
a372 1
		perror("fopen()");
@


1.3
log
@Sanitize prototypes and variable extern definitions, remove
unnecessary header file, add prototypes header file for utility building.
@
text
@d22 4
d29 4
d34 3
a36 1
#include <stdio.h>
d38 1
d40 1
a40 2
#ifdef WIN32
#include <ctype.h>
d42 1
a42 1
#else /* WIN32 */
d44 1
a44 1
#endif /* WIN32 */
a102 1
#ifdef WIN32
a103 3
#else /* WIN32 */
int
#endif /* WIN32 */
a114 1
#if defined(KEYNOTERNDFILENAME)
a115 1
#endif /* KEYNOTERNDFILENAME */
a178 1
#endif /* CRYPTO || PGPLIB */
a179 2
#if defined(CRYPTO)
#if defined(KEYNOTERNDFILENAME)
a217 3
#else /* KEYNOTERNDFILENAME */
#error "No RNG available!"
#endif /* KEYNOTERNDFILENAME */
@


1.2
log
@Unified tool for keynote utils.
@
text
@d1 1
a1 2
/* $OpenBSD: keynote-keygen.c,v 1.1.1.1 1999/05/23 22:11:06 angelos Exp $ */

d36 2
d39 1
a39 2

#define DEFAULT_PUBLIC    0x10001
a48 6

#define SEED_LEN	40
#define RND_BYTES	1024

#define KEY_PRINT_OFFSET      12
#define KEY_PRINT_LENGTH      50
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d33 1
a33 1
#else
d35 1
a35 1
#endif
d42 1
a42 1
usage(void)
d101 1
a101 1
#else
d103 2
a104 2
#endif
main(int argc, char *argv[])
d123 1
a123 1
	usage();
@


1.1.1.1
log
@KeyNote version 2 trust-management system (security policy handling).
Utilities to follow.

@
text
@@
