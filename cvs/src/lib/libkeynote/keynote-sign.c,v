head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.8
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.16.0.48
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.40
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.44
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.42
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.38
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.36
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.34
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.32
	OPENBSD_5_0:1.16.0.30
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.28
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.26
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.22
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.24
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.20
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.18
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.16
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.14
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.12
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.10
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.8
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.4
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	KeyNote-v2:1.1.1.1
	Angelos:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.11.19.07.00.58;	author guenther;	state Exp;
branches;
next	1.17;
commitid	iNO2MtELL2BW95IM;

1.17
date	2015.11.19.02.35.24;	author mmcc;	state Exp;
branches;
next	1.16;
commitid	bCQllQH6f0Sp4lOD;

1.16
date	2004.06.29.11.35.56;	author msf;	state Exp;
branches;
next	1.15;

1.15
date	2004.06.25.05.06.49;	author msf;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.05.17.01.49;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.27.06.29.14;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.03.20.14.51;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.08.21.50.12;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	99.11.03.03.17.58;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	99.10.26.22.31.38;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	99.10.09.19.47.32;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	99.10.09.06.59.37;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	99.10.01.01.08.30;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	99.05.31.20.09.59;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	99.05.31.18.29.18;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	99.05.24.01.29.22;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	99.05.24.00.51.25;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	99.05.23.22.11.04;	author angelos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.23.22.11.04;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Fix typo in previous commit
@
text
@/* $OpenBSD: keynote-sign.c,v 1.17 2015/11/19 02:35:24 mmcc Exp $ */
/*
 * The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
 *
 * This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
 * in April-May 1998
 *
 * Copyright (C) 1998, 1999 by Angelos D. Keromytis.
 *	
 * Permission to use, copy, and modify this software with or without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software. 
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <ctype.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

#include "header.h"
#include "keynote.h"

void	signusage(void);

void
signusage(void)
{
    fprintf(stderr, "Arguments:\n");
    fprintf(stderr, "\t[-v] <AlgorithmName> <AssertionFile> "
	    "<PrivateKeyFile> [<print-offset>] [<print-length>]\n");
}

void
keynote_sign(int argc, char *argv[])
{
    int begin = SIG_PRINT_OFFSET, prlen = SIG_PRINT_LENGTH;
    char *buf, *buf2, *sig, *algname;
    int fd, flg = 0, buflen;
    struct stat sb;

    if ((argc != 4) &&
	(argc != 5) &&
	(argc != 6) &&
	(argc != 7))
    {
	signusage();
	exit(1);
    }

    if (!strcmp("-v", argv[1]))
      flg = 1;

    if (argc > 4 + flg)
    {
        begin = atoi(argv[4 + flg]);
        if (begin <= -1)
        {
            fprintf(stderr, "Erroneous value for print-offset parameter.\n");
            exit(1);
        }
    }
        
    if (argc > 5 + flg)
    {
        prlen = atoi(argv[5 + flg]);
        if (prlen <= 0)
        {
            fprintf(stderr, "Erroneous value for print-length parameter.\n");
            exit(1);
        }
    }

    /* Fix algorithm name */
    if (argv[1 + flg][strlen(argv[1 + flg]) - 1] != ':')
    {
	int len = strlen(argv[1 + flg]) + 2;
        fprintf(stderr, "Algorithm name [%s] should be terminated with a "
		"colon, fixing.\n", argv[1 + flg]);
	algname = calloc(len, sizeof(char));
	if (algname == NULL)
	{
	    perror("calloc()");
	    exit(1);
	}

	strlcpy(algname, argv[1 + flg], len);
	algname[strlen(algname)] = ':';
    }
    else
	algname = argv[1 + flg];

    /* Read assertion */
    fd = open(argv[2 + flg], O_RDONLY, 0);
    if (fd < 0)
    {
	perror(argv[2 + flg]);
	exit(1);
    }

    if (fstat(fd, &sb) < 0)
    {
	perror("fstat()");
	exit(1);
    }

    if (sb.st_size == 0) /* Paranoid */
    {
	fprintf(stderr, "Error: zero-sized assertion-file.\n");
	exit(1);
    }

    buflen = sb.st_size + 1;
    buf = calloc(buflen, sizeof(char));
    if (buf == NULL)
    {
	perror("calloc()");
	exit(1);
    }

    if (read(fd, buf, buflen - 1) < 0)
    {
	perror("read()");
	exit(1);
    }

    close(fd);

    /* Read private key file */
    fd = open(argv[3 + flg], O_RDONLY, 0);
    if (fd < 0)
    {
	perror(argv[3 + flg]);
	exit(1);
    }

    if (fstat(fd, &sb) < 0)
    {
	perror("fstat()");
	exit(1);
    }

    if (sb.st_size == 0) /* Paranoid */
    {
	fprintf(stderr, "Illegal key-file size 0\n");
	exit(1);
    }

    buf2 = calloc(sb.st_size + 1, sizeof(char));
    if (buf2 == NULL)
    {
	perror("calloc()");
	exit(1);
    }

    if (read(fd, buf2, sb.st_size) < 0)
    {
	perror("read()");
	exit(1);
    }

    close(fd);

    sig = kn_sign_assertion(buf, buflen, buf2, algname, flg);

    /* Free buffers */
    free(buf);
    free(buf2);

    if (sig == NULL)
    {
	switch (keynote_errno)
	{
	    case ERROR_MEMORY:
		fprintf(stderr, "Out of memory while creating signature.\n");
		break;

	    case ERROR_SYNTAX:
		fprintf(stderr, "Bad assertion or algorithm format, or "
			"unsupported algorithm while creating signature.\n");
		break;

	    default:
		fprintf(stderr, "Unknown error while creating signature.\n");
	}

	exit(1);
    }

    /* Print signature string */
    print_key(stdout, "", sig, begin, prlen);

    free(sig);   /* Just a reminder that the result is malloc'ed */

    exit(0);
}
@


1.17
log
@Remove a ton of ugly, needless casts for NULL, calloc(), and strdup().
No binary change.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.16 2004/06/29 11:35:56 msf Exp $ */
d92 1
a92 1
	algname = alloc(len, sizeof(char));
@


1.16
log
@Header cleanup.
ok hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.15 2004/06/25 05:06:49 msf Exp $ */
d92 2
a93 2
	algname = (char *) calloc(len, sizeof(char));
	if (algname == (char *) NULL)
d126 2
a127 2
    buf = (char *) calloc(buflen, sizeof(char));
    if (buf == (char *) NULL)
d161 2
a162 2
    buf2 = (char *) calloc(sb.st_size + 1, sizeof(char));
    if (buf2 == (char *) NULL)
d182 1
a182 1
    if (sig == (char *) NULL)
@


1.15
log
@Make crufty configure stuff go away. Remove all unused code paths.
No change in binaries.

ok millert@@ deraadt@@ hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.14 2003/07/05 17:01:49 deraadt Exp $ */
d26 1
@


1.14
log
@protos
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.13 2002/05/27 06:29:14 deraadt Exp $ */
a21 4
#if HAVE_CONFIG_H
#include "config.h"
#endif /* HAVE_CONFIG_H */

d24 3
a27 4
#include <stdio.h>
#include <ctype.h>

#if STDC_HEADERS
a28 3
#endif /* STDC_HEADERS */

#if HAVE_FCNTL_H
a29 5
#endif /* HAVE_FCNTL_H */

#if HAVE_IO_H
#include <io.h>
#elif HAVE_UNISTD_H
a30 1
#endif /* HAVE_IO_H */
@


1.13
log
@snprintf and strlcpy cleanup; angelos ok
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.12 2001/09/03 20:14:51 deraadt Exp $ */
d48 2
@


1.12
log
@with or without fee; received mail permitting this change from angelos
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.11 2001/03/08 21:50:12 angelos Exp $ */
d100 1
d103 1
a103 1
	algname = (char *) calloc(strlen(argv[1 + flg]) + 2, sizeof(char));
d110 1
a110 1
	strcpy(algname, argv[1 + flg]);
@


1.11
log
@exit(-1) -> exit(1)
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.10 1999/11/03 03:17:58 angelos Exp $ */
d10 1
a10 1
 * Permission to use, copy, and modify this software without fee
@


1.10
log
@Flexibility in signature printing.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d71 1
a71 1
	exit(-1);
d83 1
a83 1
            exit(-1);
d93 1
a93 1
            exit(-1);
d106 1
a106 1
	    exit(-1);
d120 1
a120 1
	exit(-1);
d126 1
a126 1
	exit(-1);
d132 1
a132 1
	exit(-1);
d140 1
a140 1
	exit(-1);
d146 1
a146 1
	exit(-1);
d156 1
a156 1
	exit(-1);
d162 1
a162 1
	exit(-1);
d168 1
a168 1
	exit(-1);
d175 1
a175 1
	exit(-1);
d181 1
a181 1
	exit(-1);
d209 1
a209 1
	exit(-1);
@


1.9
log
@sync
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.7 1999/10/09 06:59:37 angelos Exp $ */
d54 1
a54 1
	    "<PrivateKeyFile>\n");
d66 3
a68 1
	(argc != 5))
d74 14
a87 1
    if (argc == 5)
d89 6
a94 9
	if (!strcmp("-v", argv[1]))
	  flg = 1;
	else
	{
	    fprintf(stderr,
		    "Invalid first argument [%s] or too many arguments\n",
		    argv[1]);
	    exit(-1);
	}
@


1.8
log
@Roll back yesterday's commit, will wait until after 2.6.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.6 1999/10/01 01:08:30 angelos Exp $ */
d46 1
a47 1
#include "header.h"
@


1.7
log
@Move all ifdefs in header.h (instead of keynote.h), include header.h
in all files including keynote.h, update manpage.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d46 1
a47 1
#include "keynote.h"
@


1.6
log
@Update for version 2.0
@
text
@d46 1
a47 1
#include "header.h"
@


1.5
log
@Sanitize prototypes and variable extern definitions, remove
unnecessary header file, add prototypes header file for utility building.
@
text
@d22 4
d29 4
d34 3
a36 1
#include <stdio.h>
d38 1
a38 1
#include <ctype.h>
d40 1
a40 2
#ifdef WIN32
#include <ctype.h>
d42 1
a42 1
#else /* WIN32 */
d44 1
a44 1
#endif /* WIN32 */
a56 1
#ifdef WIN32
a57 3
#else /* WIN32 */
int
#endif /* WIN32 */
@


1.4
log
@Correct prototype and invocation, eliminate a warning or three.
@
text
@d1 1
a1 2
/* $OpenBSD: keynote-sign.c,v 1.3 1999/05/24 01:29:22 angelos Exp $ */

d37 2
a38 8
#include "assertion.h"
#include "signature.h"

#define SIG_PRINT_OFFSET      12
#define SIG_PRINT_LENGTH      50

extern void print_key(FILE *, char *, char *, int, int);
extern void print_space(FILE *, int);
a46 1

@


1.3
log
@Unified tool for keynote utils.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.2 1999/05/24 00:51:25 angelos Exp $ */
d44 2
a45 1
extern void print_space(FILE *, int), print_key(FILE *, char *, int, int);
d204 1
a204 1
    print_key(stdout, sig, begin, prlen);
@


1.2
log
@Unneeded declaration.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-sign.c,v 1.1.1.1 1999/05/23 22:11:04 angelos Exp $ */
d34 1
a34 1
#else
d36 1
a36 1
#endif
d44 2
d47 1
a47 1
usage(void)
a53 42
/*
 * Print the specified number of spaces.
 */
void
print_space(FILE *fp, int n)
{
    while (n--)
      fprintf(fp, " ");
}

/*
 * Output a signature, properly formatted.
 */
void
print_sig(FILE *fp, char *sig, int start, int length)
{
    int i, k;

    print_space(fp, start);
    fprintf(fp, "\"");

    for (i = 0, k = 2; i < strlen(sig); i++, k++)
    {
	if (k == length)
	{
	    if (i == strlen(sig))
	    {
		fprintf(fp, "\"\n");
		return;
	    }

	    fprintf(fp, "\\\n");
	    print_space(fp, start);
	    i--;
	    k = 0;
	}
	else
	  fprintf(fp, "%c", sig[i]);
    }

    fprintf(fp, "\"\n");
}
d57 1
a57 1
#else
d59 2
a60 2
#endif
main(int argc, char *argv[])
d70 1
a70 1
	usage();
d203 1
a203 1
    print_sig(stdout, sig, begin, prlen);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a42 2

extern struct assertion *asp;
@


1.1.1.1
log
@KeyNote version 2 trust-management system (security policy handling).
Utilities to follow.

@
text
@@
