head	1.17;
access;
symbols
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.14.0.48
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.40
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.44
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.42
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.38
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.36
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.34
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.32
	OPENBSD_5_0:1.14.0.30
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.28
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.26
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.22
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.24
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.20
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.18
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.16
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.14
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.12
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.10
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.4
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	KeyNote-v2:1.1.1.1
	Angelos:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2015.11.19.05.20.19;	author mmcc;	state Exp;
branches;
next	1.16;
commitid	iqnSH9pLBD2ZgWrl;

1.16
date	2015.11.19.02.35.24;	author mmcc;	state Exp;
branches;
next	1.15;
commitid	bCQllQH6f0Sp4lOD;

1.15
date	2015.11.18.16.08.39;	author mmcc;	state Exp;
branches;
next	1.14;
commitid	tTDiHUWlGlmbqaDK;

1.14
date	2004.06.29.11.35.56;	author msf;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.25.05.06.49;	author msf;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.05.17.01.49;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.09.02.12.55;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.03.20.14.51;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.08.21.50.12;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	99.10.26.22.31.38;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	99.10.09.19.47.32;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	99.10.09.06.59.37;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	99.10.06.20.27.46;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	99.10.01.01.08.30;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	99.05.31.20.09.59;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	99.05.24.01.29.22;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	99.05.23.22.11.04;	author angelos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.23.22.11.04;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove a sixteen-year-old testing macro.

"yes." deraadt@@
@
text
@/* $OpenBSD: keynote-verify.c,v 1.16 2015/11/19 02:35:24 mmcc Exp $ */
/*
 * The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
 *
 * This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
 * in April-May 1998
 *
 * Copyright (C) 1998, 1999 by Angelos D. Keromytis.
 *	
 * Permission to use, copy, and modify this software with or without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software. 
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <ctype.h>
#include <fcntl.h>
#include <getopt.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "header.h"
#include "keynote.h"

void	verifyusage(void);

void
verifyusage(void)
{
    fprintf(stderr, "Arguments:\n");
    fprintf(stderr, "\t-h:             This message\n");
    fprintf(stderr,
	    "\t-r <valuelist>: Comma separated, ordered return-value list\n");
    fprintf(stderr, "\t-e <filename>:  Environment settings\n");
    fprintf(stderr, "\t-l <filename>:  Trusted (local) assertion\n");
    fprintf(stderr, "\t-k <filename>:  File containing key\n");
    fprintf(stderr, "Followed by a list of:\n");
    fprintf(stderr, "\t<filename>:     Non-local assertion\n");
}

void
keynote_verify(int argc, char *argv[])
{
    int fd, i, ch, se = 0, cl = 8192, sk = 0, sl = 0, p, ac = argc;
    char *buf, **av = argv, **retv, **foov, *ptr;
    int numretv = 16, numret = 0, sn;
    struct stat sb;

    if (argc == 1)
    {
	verifyusage();
	exit(1);
    }

    if ((buf = calloc(cl, sizeof(char))) == NULL)
    {
	perror("calloc()");
	exit(1);
    }

    if ((retv = calloc(numretv, sizeof(char *))) == NULL)
    {
	perror("calloc()");
	exit(1);
    }

    /* "ac" and "av" are used for stress-testing, ignore otherwise */
    argv = av;
    argc = ac;
    sn = 0;
    opterr = 0;

    sessid = kn_init();
    if (sessid == -1)
    {
	fprintf(stderr, "kn_init() failed (errno %d).\n", keynote_errno);
	exit(keynote_errno);
    }
    
    while ((ch = getopt(argc, argv, "hqistl:e:k:r:")) != -1)
    {
	switch (ch) 
	{
	    case 'e':
		if (read_environment(optarg) == -1)
	 	  exit(1);
		se = 1;
		break;

	    case 'k':
		sk = 1;

		if ((fd = open(optarg, O_RDONLY, 0)) < 0)
		{
		    perror(optarg);
		    exit(1);
		}

		if (fstat(fd, &sb) < 0)
		{
		    perror("fstat()");
		    exit(1);
		}

		if (sb.st_size > cl - 1)
		{
		    free(buf);
		    cl = sb.st_size + 1;
		    buf = calloc(cl, sizeof(char));
		    if (buf == NULL)
		    {
			perror("calloc()");
			exit(1);
		    }
		}

		i = read(fd, buf, sb.st_size);
		if (i < 0)
		{
		    perror("read()");
		    exit(1);
		}

		close(fd);

		parse_key(buf);
		switch (keynote_errno)
		{
		    case 0:    /* No errors */
			break;

		    case ERROR_SYNTAX:
			fprintf(stderr, "Syntax error adding authorizer "
				"%s\n", optarg);
			exit(1);

		    case ERROR_MEMORY:
			perror("Out of memory.\n");
			exit(1);

		    default:
			fprintf(stderr, "Unknown error (%d).\n",
				keynote_errno);
		}

		break;

	    case 'h':
		verifyusage();
		exit(0);

	    case 'r':
		if (sn != 0)
		{
		    fprintf(stderr,
			    "Do not define two sets of return values.\n");
		    exit(1);
		}

		sn = 1;

		for (numret = 0;
		     (ptr = strchr(optarg, ',')) != NULL;
		     numret++)
		{
		    /* Running out of memory */
		    if (numret > numretv - 3)
		    {
			numretv *= 2;
			foov = calloc(numretv, sizeof(char **));
			if (foov == NULL)
			{
			    /* 
			     * If this were a real program, we 'd be freeing
			     * retv here. Since we're exiting, we can be a
			     * little sloppy.
			     */
			    perror("calloc()");
			    exit(1);
			}

			memcpy(foov, retv, numretv * sizeof(char **));
			free(retv);
			retv = foov;
		    }

		    retv[numret] = calloc((ptr - optarg) + 1,
						       sizeof(char));
		    if (retv[numret] == NULL)
		    {
			/* Comment from above applies here as well */
			perror("calloc()");
			exit(1);
		    }

		    /* Copy */
		    memcpy(retv[numret], optarg, ptr - optarg);
		    optarg = ptr + 1;
		}

		/* Last component */
		retv[numret] = strdup(optarg);
		if (retv[numret] == NULL)
		{
		    perror("calloc()");
		    exit(1);
		}

		numret++;
		break;

	    case 'l':
		if ((fd = open(optarg, O_RDONLY, 0)) < 0)
		{
		    perror(optarg);
		    exit(1);
		}

		if (fstat(fd, &sb) < 0)
		{
		    perror("fstat()");
		    exit(1);
		}

		if (sb.st_size > cl - 1)
		{
		    free(buf);
		    cl = sb.st_size + 1;
		    buf = calloc(cl, sizeof(char));
		    if (buf == NULL)
		    {
			perror("calloc()");
			exit(1);
		    }
		}

		i = read(fd, buf, sb.st_size);
		if (i < 0)
		{
		    perror("read()");
		    exit(1);
		}

		close(fd);
		p = kn_add_assertion(sessid, buf, i, ASSERT_FLAG_LOCAL);
		if (p == -1)
		{
		    fprintf(stderr,
			    "Error for assertion in file <%s>, errno %d.\n",
			   optarg, keynote_errno);
		    keynote_errno = 0;
		}

		memset(buf, 0, sb.st_size);
		sl = 1;
		break;

	    case '?':
	    default:
		verifyusage();
		exit(1);
	}
    }

    argc -= optind;
    argv += optind;
    optind = 1;

    if (sn == 0)
    {
	fprintf(stderr,
		"Should set return values before evaluations begin.\n");
	exit(1);
    }

    if (se == 0)
    {
	fprintf(stderr, "Should set environment before evaluations begin.\n");
	exit(1);
    }

    if (sk == 0)
    {
	fprintf(stderr, "Should specify at least one action authorizer.\n");
	exit(1);
    }

    if (sl == 0)
    {
	fprintf(stderr,
		"Should specify at least one trusted assertion (POLICY).\n");
	exit(1);
    }

    while (argc--)
    {
	if ((fd = open(argv[argc], O_RDONLY, 0)) < 0)
	{
	    perror(argv[argc]);
	    exit(1);
	}

	if (fstat(fd, &sb) < 0)
	{
	    perror("fstat()");
	    exit(1);
	}

	if (sb.st_size > cl - 1)
	{
	    free(buf);
	    cl = sb.st_size + 1;
	    buf = calloc(cl, sizeof(char));
	    if (buf == NULL)
	    {
		perror("calloc()");
		exit(1);
	    }
	}

	i = read(fd, buf, sb.st_size);
	if (i < 0)
	{
	    perror("read()");
	    exit(1);
	}

	close(fd);
	p = kn_add_assertion(sessid, buf, i, 0);
	if (p == -1)
	{
	    fprintf(stderr, "Error for assertion in file <%s>, errno %d.\n",
		    argv[argc], keynote_errno);
	    keynote_errno = 0;
	}

	memset(buf, 0, sb.st_size);
    }

    p = kn_do_query(sessid, retv, numret); /* Evaluation time */

    printf("Query result = ");

    switch (keynote_errno)
    {
	case ERROR_MEMORY:
	    printf("<out of memory>\n");
	    exit(1);

	case ERROR_SYNTAX:
	    printf("<uninitialized authorizers or all POLICY "
		   "assertions are malformed!>\n");
	    exit(1);

	case ERROR_NOTFOUND:
	    printf("<session or other information not found!>\n");
	    exit(1);

	case 0:	/* No errors */
	    break;

	default:
	    printf("<should never happen (%d)!>\n", keynote_errno);
	    exit(1);
    }

    printf("%s\n", retv[p]);

    keynote_errno = 0;

    while ((i = kn_get_failed(sessid, KEYNOTE_ERROR_MEMORY, 0)) != -1)
    {
        printf("Failed assertion %d due to memory error.\n", i);
        kn_remove_assertion(sessid, i);
    }

    while ((i = kn_get_failed(sessid, KEYNOTE_ERROR_SYNTAX, 0)) != -1)
    {
        printf("Failed assertion %d due to syntax or semantic error.\n", i);
        kn_remove_assertion(sessid, i);
    }

    while ((i = kn_get_failed(sessid, KEYNOTE_ERROR_SIGNATURE, 0)) != -1)
    {
        printf("Failed assertion %d due to signature verification failure.\n",
	       i);
        kn_remove_assertion(sessid, i);
    }

    while ((i = kn_get_failed(sessid, KEYNOTE_ERROR_ANY, 0)) != -1)
    {
        printf("Failed assertion %d due to unspecified error.\n", i);
        kn_remove_assertion(sessid, i);
    }

    kn_close(sessid);

    /* This is a reminder that return values are not free'ed by KeyNote */
    for (sn = 0; sn < numret; sn++)
      free(retv[sn]);
    free(retv);
    retv = NULL;

    exit(0);
}
@


1.16
log
@Remove a ton of ugly, needless casts for NULL, calloc(), and strdup().
No binary change.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.15 2015/11/18 16:08:39 mmcc Exp $ */
a55 3
#ifdef LoopTesting
    int loopvar = 1000;
#endif /* LoopTesting */
a72 4
#ifdef LoopTesting
    while(loopvar--) {
#endif /* LoopTesting */

a280 4
#ifdef LoopTesting
    optreset = 1;
#endif /* LoopTesting */

a353 1
#ifndef LoopTesting
a379 1
#endif /* LoopTesting */
a408 4

#ifdef LoopTesting
    }
#endif /* LoopTesting */
@


1.15
log
@Remove memory.h includes.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.14 2004/06/29 11:35:56 msf Exp $ */
d70 1
a70 1
    if ((buf = (char *) calloc(cl, sizeof(char))) == (char *) NULL)
d80 1
a80 1
    if ((retv = (char **) calloc(numretv, sizeof(char *))) == (char **) NULL)
d128 2
a129 2
		    buf = (char *) calloc(cl, sizeof(char));
		    if (buf == (char *) NULL)
d182 1
a182 1
		     (ptr = strchr(optarg, ',')) != (char *) NULL;
d189 2
a190 2
			foov = (char **) calloc(numretv, sizeof(char **));
			if (foov == (char **) NULL)
d206 1
a206 1
		    retv[numret] = (char *) calloc((ptr - optarg) + 1,
d208 1
a208 1
		    if (retv[numret] == (char *) NULL)
d221 2
a222 2
		retv[numret] = (char *) strdup(optarg);
		if (retv[numret] == (char *) NULL)
d248 2
a249 2
		    buf = (char *) calloc(cl, sizeof(char));
		    if (buf == (char *) NULL)
d336 2
a337 2
	    buf = (char *) calloc(cl, sizeof(char));
	    if (buf == (char *) NULL)
d431 1
a431 1
    retv = (char **) NULL;
@


1.14
log
@Header cleanup.
ok hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.13 2004/06/25 05:06:49 msf Exp $ */
a27 1
#include <memory.h>
@


1.13
log
@Make crufty configure stuff go away. Remove all unused code paths.
No change in binaries.

ok millert@@ deraadt@@ hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.12 2003/07/05 17:01:49 deraadt Exp $ */
d29 1
@


1.12
log
@protos
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.11 2002/06/09 02:12:55 deraadt Exp $ */
a21 4
#if HAVE_CONFIG_H
#include "config.h"
#endif /* HAVE_CONFIG_H */

d24 1
a24 2
#include <stdlib.h>
#include <stdio.h>
a25 13

#if STDC_HEADERS
#include <string.h>
#if !defined(HAVE_MEMCPY)
#define memcpy(d, s, n) bcopy ((s), (d), (n))
#endif /* !HAVE_MEMCPY */
#endif /* STDC_HEADERS */

#if HAVE_MEMORY_H
#include <memory.h>
#endif /* HAVE_MEMORY_H */

#if HAVE_FCNTL_H
a26 3
#endif /* HAVE_FCNTL_H */

#if !defined(HAVE_GETOPT)
d28 4
a31 5
#endif /* HAVE_GETOPT */

#if HAVE_IO_H
#include <io.h>
#elif HAVE_UNISTD_H
a32 1
#endif /* HAVE_IO_H */
@


1.11
log
@use strchr() instead of index()
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.10 2001/09/03 20:14:51 deraadt Exp $ */
d59 2
@


1.10
log
@with or without fee; received mail permitting this change from angelos
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.9 2001/03/08 21:50:12 angelos Exp $ */
d203 1
a203 1
		     (ptr = index(optarg, ',')) != (char *) NULL;
@


1.9
log
@exit(-1) -> exit(1)
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.8 1999/10/26 22:31:38 angelos Exp $ */
d10 1
a10 1
 * Permission to use, copy, and modify this software without fee
@


1.8
log
@sync
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.6 1999/10/09 06:59:37 angelos Exp $ */
d88 1
a88 1
	exit(-1);
d94 1
a94 1
	exit(-1);
d104 1
a104 1
	exit(-1);
d126 1
a126 1
	 	  exit(-1);
d136 1
a136 1
		    exit(-1);
d142 1
a142 1
		    exit(-1);
d153 1
a153 1
			exit(-1);
d161 1
a161 1
		    exit(-1);
d175 1
a175 1
			exit(-1);
d179 1
a179 1
			exit(-1);
d197 1
a197 1
		    exit(-1);
d219 1
a219 1
			    exit(-1);
d233 1
a233 1
			exit(-1);
d246 1
a246 1
		    exit(-1);
d256 1
a256 1
		    exit(-1);
d262 1
a262 1
		    exit(-1);
d273 1
a273 1
			exit(-1);
d281 1
a281 1
		    exit(-1);
d301 1
a301 1
		exit(-1);
d317 1
a317 1
	exit(-1);
d323 1
a323 1
	exit(-1);
d329 1
a329 1
	exit(-1);
d336 1
a336 1
	exit(-1);
d344 1
a344 1
	    exit(-1);
d350 1
a350 1
	    exit(-1);
d361 1
a361 1
		exit(-1);
d369 1
a369 1
	    exit(-1);
d393 1
a393 1
	    exit(-1);
d398 1
a398 1
	    exit(-1);
d402 1
a402 1
	    exit(-1);
d409 1
a409 1
	    exit(-1);
@


1.7
log
@Roll back yesterday's commit, will wait until after 2.6.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.5 1999/10/06 20:27:46 angelos Exp $ */
d57 1
a58 1
#include "header.h"
@


1.6
log
@Move all ifdefs in header.h (instead of keynote.h), include header.h
in all files including keynote.h, update manpage.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d57 1
a58 1
#include "keynote.h"
@


1.5
log
@Make some of the perror() calls more informative, correct some
inconsistencies in the man page and the query tool, update the
testsuite accordingly.
@
text
@d1 1
a1 1
/* $OpenBSD: keynote-verify.c,v 1.4 1999/10/01 01:08:30 angelos Exp $ */
d57 1
a58 1
#include "header.h"
@


1.4
log
@Update for version 2.0
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d135 1
a135 1
		    perror("open()");
d255 1
a255 1
		    perror("open()");
d343 1
a343 1
	    perror("open()");
@


1.3
log
@Sanitize prototypes and variable extern definitions, remove
unnecessary header file, add prototypes header file for utility building.
@
text
@d22 4
d29 4
d34 10
a43 1
#include <stdio.h>
d45 5
a49 1
#include <ctype.h>
d51 1
a51 1
#ifdef WIN32
d53 1
a53 2
#include "getopt.h"
#else /* WIN32 */
d55 1
a55 4
#ifdef NEED_GETOPT
#include "getopt.h"
#endif /* NEED_GETOPT */
#endif /* WIN32 */
a73 1
#ifdef WIN32
a74 3
#else /* WIN32 */
int
#endif /* WIN32 */
d222 1
a222 1
			bcopy(retv, foov, numretv * sizeof(char **));
d237 1
a237 1
		    bcopy(optarg, retv[numret], ptr - optarg);
@


1.2
log
@Unified tool for keynote utils.
@
text
@d1 1
a1 2
/* $OpenBSD: keynote-verify.c,v 1.1.1.1 1999/05/23 22:11:04 angelos Exp $ */

d41 1
a41 5

extern int read_environment(char *);
extern void parse_key(char *);

int sessid;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 1
a34 1
#else
d38 2
a39 2
#endif
#endif
d49 1
a49 1
usage(void)
d64 1
a64 1
#else
d66 2
a67 2
#endif
main(int argc, char *argv[])
d79 1
a79 1
	usage();
d181 1
a181 1
		usage();
d292 1
a292 1
		usage();
@


1.1.1.1
log
@KeyNote version 2 trust-management system (security policy handling).
Utilities to follow.

@
text
@@
