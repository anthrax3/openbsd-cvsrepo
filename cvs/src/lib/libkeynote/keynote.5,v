head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.8
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.23.0.12
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.4
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.8
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.6
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.19.0.8
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.6
	OPENBSD_5_0:1.19.0.4
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.2
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.17.0.10
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.12
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.8
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.6
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.9.0.4
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@.\" @;


1.25
date	2015.11.20.16.31.05;	author mmcc;	state Exp;
branches;
next	1.24;
commitid	Y9FfFZPF0ws7sKmv;

1.24
date	2015.09.14.20.06.58;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	r87YNrjEWwl7OkJ0;

1.23
date	2013.07.16.15.21.11;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2013.07.16.10.44.51;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2012.09.27.11.31.58;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2012.08.15.18.56.28;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2010.12.22.16.40.38;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2010.03.26.19.30.40;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.03.08.09.37;	author hshoexer;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.31.19.19.35;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.09.16.02.59;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.09.16.00.43;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.08.11.02.23;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.19.21.02.14;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.01.08.03.30;	author mpech;	state Exp;
branches;
next	1.10;

1.10
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.03.20.14.51;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.16.17.58.06;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.17.02.11.13;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.13.19.16.16;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.02.15.27;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.12.21.48.04;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	99.10.11.04.39.01;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	99.10.11.00.08.47;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.25
log
@No longer direct bug reports to keynote@@research.att.com - it bounces mail.

"fair enough" jmc@@
@
text
@.\" $OpenBSD: keynote.5,v 1.24 2015/09/14 20:06:58 schwarze Exp $
.\"
.\" The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
.\"
.\" This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
.\" in April-May 1998
.\"
.\" Copyright (C) 1998, 1999 by Angelos D. Keromytis.
.\"
.\" Permission to use, copy, and modify this software with or without fee
.\" is hereby granted, provided that this entire notice is included in
.\" all copies of any software which is or includes a copy or
.\" modification of this software.
.\" You may use this code under the GNU public license if you so wish. Please
.\" contribute changes back to the author.
.\"
.\" THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
.\" REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
.\" MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
.\" PURPOSE.
.\"
.Dd $Mdocdate: September 14 2015 $
.Dt KEYNOTE 5
.\" .TH KeyNote 5 local
.Os
.Sh NAME
.Nm keynote
.Nd assertion format
.Sh SYNOPSIS
.Bd -literal
KeyNote-Version: 2
Local-Constants: <assignments>
Authorizer: <public key or tag>
Licensees: <public key or tag expression>
Comment: <comment text>
Conditions: <logic predicates>
Signature: <public key signature>
.Ed
.Sh DESCRIPTION
For more details on
.Nm keynote ,
see RFC 2704.
.Pp
KeyNote assertions are divided into sections, called
.Sq fields ,
that serve various semantic functions.
Each field starts with an
identifying label at the beginning of a line, followed by the
.Qq \&:
character and the field's contents.
There can be at most one field per line.
.Pp
A field may be continued over more than one line by indenting
subsequent lines with at least one ASCII SPACE or TAB character.
Whitespace (a SPACE, TAB, or NEWLINE character) separates tokens but
is otherwise ignored outside of quoted strings.
Comments with a leading octothorp character ('#') may begin in any column.
.Pp
One mandatory field is required in all assertions: Authorizer.
.Pp
Six optional fields may also appear: Comment, Conditions,
KeyNote-Version, Licensees, Local-Constants, Signature.
.Pp
All field names are case-insensitive.
The
.Qq KeyNote-Version
field, if present, appears first.
The
.Qq Signature
field, if present, appears last.
Otherwise, fields may appear in any order.
Each field may appear at most once in any assertion.
.Pp
Blank lines are not permitted in assertions.
Multiple assertions
stored in a file (e.g., in application policy configurations),
therefore, can be separated from one another unambiguously by the use
of blank lines between them.
.Sh COMMENTS
The octothorp character
.Pf ( Sq # ,
ASCII 35 decimal) can be used to
introduce comments.
Outside of quoted strings, all characters from the
.Qq #
character through the end of the current line are ignored.
However, commented text is included in the computation of assertion
signatures.
.Sh STRINGS
A
.Sq string
is a lexical object containing a sequence of characters.
Strings may contain any non-NUL characters, including newlines and
nonprintable characters.
Strings may be given as literals, computed from complex expressions,
or dereferenced from attribute names.
.Sh STRING LITERALS
A string literal directly represents the value of a string.
String literals must be quoted by preceding and following them with the
double-quote character (ASCII 34 decimal).
.Pp
A printable character may be
.Sq escaped
inside a quoted string literal by preceding it with the backslash
character (ASCII 92 decimal) e.g.,
.Qo like \&
.No \e Ns Qo this Ns \e
.Qc .
.\".Pf { Qo mike Ns Qc 12
.Qc .
This permits the inclusion of the double-quote and backslash characters
inside string literals.
.Pp
A similar escape mechanism is also used to represent non-printable
characters.
.Qq \en
represents the newline character (ASCII character 10
decimal),
.Qq \er
represents the carriage-return character (ASCII
character 13 decimal),
.Qq \et
represents the tab character (ASCII character 9 decimal), and
.Qq \ef
represents the form-feed character (ASCII character 12 decimal).
A backslash character followed by a newline suppresses all subsequent
whitespace (including the newline) up to the next non-whitespace character
(this allows the continuation of long string constants across lines).
Un-escaped newline and return characters are illegal inside string literals.
.Pp
The constructs
.Qq \e0o ,
.Qq \e0oo ,
and
.Qq \eooo
(where o represents any octal digit) may be used to represent any non-NUL
ASCII characters with their corresponding octal values (thus,
.Qq \e012
is the same as
.Qq \en ,
.Qq \e101
is
.Qq A ,
and
.Qq \e377
is the ASCII character 255 decimal).
However, the NUL character cannot be encoded in this manner;
.Qq \e0 ,
.Qq \e00 ,
and
.Qq \e000
are converted to the strings
.Qq 0 ,
.Qq 00 ,
and
.Qq 000
respectively.
Similarly, all other escaped characters have the
leading backslash removed (e.g.,
.Qq \ea
becomes
.Qq a ,
and
.Qq \e\e
becomes
.Qq \e ) .
The following four strings are equivalent:
.Bd -literal
        "this string contains a newline\en followed by one space."
        "this string contains a newline\en \e
        followed by one space."
        "this str\e
           ing contains a \e
             newline\en followed by one space."
        "this string contains a newline\e012\e040followed by one space."
.Ed
.Sh STRING EXPRESSIONS
In general, anywhere a quoted string literal is allowed, a
.Sq string expression
can be used.
A string expression constructs a string from string constants,
dereferenced attributes (described below), and a string concatenation
operator.
String expressions may be parenthesized.
.Bd -literal
       <StrEx>:: <StrEx> "." <StrEx>    /* String concatenation */
               | <StringLiteral>        /* Quoted string */
               | "(" <StrEx> ")"
               | <DerefAttribute>
               | "$" <StrEx> ;
.Ed
.Pp
The
.Qq $
operator has higher precedence than the
.Qq .\&
operator.
.Sh DEREFERENCED ATTRIBUTES
Action attributes provide the primary mechanism for applications to
pass information to assertions.
Attribute names are strings from a
limited character set (see below), and attribute values are
represented internally as strings.
An attribute is dereferenced simply by using its name.
In general, KeyNote allows the use of an attribute anywhere a string literal
is permitted.
.Pp
Attributes are dereferenced as strings by default.
When required,
dereferenced attributes can be converted to integers or floating point
numbers with the type conversion operators
.Qq @@
and
.Qq & .
Thus, an attribute named
.Qq foo
having the value
.Qq 1.2
may be interpreted as the string
.Qq 1.2
(foo), the integer value 1 (@@foo), or the floating point
value 1.2 (&foo).
.Pp
Attributes converted to integer and floating point numbers are
represented according to the ANSI C
.Sq long
and
.Sq float
types, respectively.
In particular, integers range from -2147483648 to 2147483647, whilst floats
range from 1.17549435E-38F to 3.40282347E+38F.
.Pp
Any uninitialized attribute has the empty-string value when
dereferenced as a string and the value zero when dereferenced as an
integer or float.
.Pp
Attribute names may be given literally or calculated from string
expressions and may be recursively dereferenced.
In the simplest case,
an attribute is dereferenced simply by using its name outside of
quotes; e.g., the string value of the attribute named
.Qq foo
is by reference to
.Sq foo
(outside of quotes).
The
.Qo $ Ns Ao StrEx
.Ac
.Qc
construct dereferences the attribute named in the string expression
.Aq StrEx .
For example, if the attribute named
.Qq foo
contains the string
.Qq bar ,
the attribute named
.Qq bar
contains the string
.Qq xyz ,
and the attribute
.Qq xyz
contains the string
.Qq qua ,
the following string comparisons are all true:
.Bd -literal
    foo == "bar"
    $("foo") == "bar"
    $foo == "xyz"
    $(foo) == "xyz"
    $$foo == "qua"
.Ed
.Pp
If
.Aq StrEx
evaluates to an invalid or uninitialized attribute name, its value is
considered to be the empty string (or zero if used as a numeric).
.Pp
The
.Aq DerefAttribute
token is defined as:
.Bd -literal
      <DerefAttribute>:: <AttributeID> ;
       <AttributeID>:: {Any string starting with a-z, A-Z, or the
                        underscore character, followed by any number of
                        a-z, A-Z, 0-9, or underscore characters} ;
.Ed
.Sh PRINCIPAL IDENTIFIERS
Principals are represented as ASCII strings called
.Sq Principal Identifiers .
Principal Identifiers may be arbitrary labels whose structure is not
interpreted by the KeyNote system or they may encode cryptographic keys
that are used by KeyNote for credential signature verification.
.Bd -literal
       <PrincipalIdentifier>:: <OpaqueID>
                             | <KeyID> ;
.Ed
.Sh OPAQUE PRINCIPAL IDENTIFIERS
Principal Identifiers that are used by KeyNote only as labels are
said to be
.Sq opaque .
Opaque identifiers are encoded in assertions as strings (as defined above):
.Pp
.Dl <OpaqueID>:: <StrEx>\ \&;
.Pp
Opaque identifier strings should not contain the
.Qq \&:
character.
.Sh CRYPTOGRAPHIC PRINCIPAL IDENTIFIERS
Principal Identifiers that are used by KeyNote as keys, e.g., to
verify credential signatures, are said to be
.Sq cryptographic .
Cryptographic identifiers are also lexically encoded as strings:
.Pp
.Dl <KeyID>:: <StrEx>\ \&;
.Pp
Unlike Opaque Identifiers, however, Cryptographic Identifier strings
have a special form.
To be interpreted by KeyNote (for signature
verification), an identifier string should be of the form:
.Pp
.Dl <IDString>:: <ALGORITHM>":"<ENCODEDBITS>\ \&;
.Pp
.Qq ALGORITHM
is an ASCII substring that describes the algorithms to be
used in interpreting the key's bits.
The ALGORITHM identifies the major cryptographic algorithm (e.g., RSA
.Bq RSA78 ,
DSA
.Bq DSA94 ,
etc.),
structured format (e.g., PKCS1
.Bq PKCS1 ) ,
and key bit encoding (e.g., HEX or BASE64).
By convention, the ALGORITHM
substring starts with an alphabetic character and can contain letters,
digits, underscores, or dashes i.e., it should match the regular expression
.Qq Bo a-zA-Z Bc Ns Bo a-zA-Z0-9_- Bc Ns * .
The IANA (or some other appropriate authority) will provide a registry of
reserved algorithm identifiers.
.Pp
.Qq ENCODEDBITS
is a substring of characters representing the key's bits, the encoding and
format of which depends on the ALGORITHM.
By convention, hexadecimal encoded keys use lower-case ASCII characters.
.Pp
Cryptographic Principal Identifiers are converted to a normalized
canonical form for the purposes of any internal comparisons between
them; see RFC 2704 for more details.
.Sh KEYNOTE-VERSION FIELD
The KeyNote-Version field identifies the version of the KeyNote
assertion language under which the assertion was written.
The KeyNote-Version field is of the form:
.Bd -literal
       <VersionField>:: "KeyNote-Version:" <VersionString> ;
       <VersionString>:: <StringLiteral>
                       | <IntegerLiteral> ;
.Ed
.Pp
.Aq VersionString
is an ASCII-encoded string.
Assertions in production versions of KeyNote use decimal digits in the version
representing the version number of the KeyNote language under which they are
to be interpreted.
Assertions written to conform with this document should be identified with the
version string
.Qq 2
(or the integer 2).
The KeyNote-Version field, if included, should appear first.
.Sh LOCAL-CONSTANTS FIELD
This field adds or overrides action attributes in the current
assertion only.
This mechanism allows the use of short names for (frequently lengthy)
cryptographic principal identifiers, especially to make the Licensees field
more readable.
The Local-Constants field is of the form:
.Bd -literal
       <LocalConstantsField>:: "Local-Constants:" <Assignments> ;
       <Assignments>:: /* can be empty */
                     | <AttributeID> "=" <StringLiteral> <Assignments> ;
.Ed
.Pp
.Aq AttributeID
is an attribute name from the action attribute namespace.
The name is available for use as an attribute in any subsequent field.
If the Local-Constants field defines more than one identifier, it can occupy
more than one line and be indented.
.Aq StringLiteral
is a string literal as described previously.
Attributes defined in the Local-Constants field override any attributes with
the same name passed in with the action attribute set.
.Pp
An attribute may be initialized at most once in the Local-Constants field.
If an attribute is initialized more than once in an assertion, the entire
assertion is considered invalid and is not considered by the KeyNote
compliance checker in evaluating queries.
.Sh AUTHORIZER FIELD
The Authorizer identifies the Principal issuing the assertion.
This field is of the form:
.Bd -literal
       <AuthField>:: "Authorizer:" <AuthID> ;
       <AuthID>:: <PrincipalIdentifier>
                | <DerefAttribute> ;
.Ed
.Pp
The Principal Identifier may be given directly or by reference to the
attribute namespace.
.Sh LICENSEES FIELD
The Licensees field identifies the principals authorized by the
assertion.
More than one principal can be authorized, and authorization can be
distributed across several principals through the use of
.Sq and
and threshold constructs.
This field is of the form:
.Bd -literal
       <LicenseesField>:: "Licensees:" <LicenseesExpr> ;

       <LicenseesExpr>::      /* can be empty */
                         | <PrincExpr> ;

       <PrincExpr>:: "(" <PrincExpr> ")"
                     | <PrincExpr> "&&" <PrincExpr>
                     | <PrincExpr> "||" <PrincExpr>
                     | <K>"-of(" <PrincList> ")"        /* Threshold */
                     | <PrincipalIdentifier>
                     | <DerefAttribute> ;

       <PrincList>:: <PrincipalIdentifier>
                   | <DerefAttribute>
                   | <PrincList> "," <PrincList> ;

       <K>:: {Decimal number starting with a digit from 1 to 9} ;
.Ed
.Pp
The
.Qq &&
operator has higher precedence than the
.Qq ||
operator.
.Aq K
is an ASCII-encoded positive decimal integer.
If a
.Aq PrincList
contains fewer than
.Aq K
principals, the entire assertion is omitted from processing.
.Sh CONDITIONS FIELD
This field gives the
.Sq conditions
under which the Authorizer trusts the Licensees to perform an action.
.Sq Conditions
are predicates that operate on the action attribute set.
The Conditions field is of the form:
.Bd -literal
    <ConditionsField>:: "Conditions:" <ConditionsProgram> ;

    <ConditionsProgram>:: /* Can be empty */
                          | <Clause> ";" <ConditionsProgram> ;

    <Clause>:: <Test> "->" "{" <ConditionsProgram> "}"
             | <Test> "->" <Value>
             | <Test> ;

    <Value>:: <StrEx> ;

    <Test>:: <RelExpr> ;

    <RelExpr>:: "(" <RelExpr> ")"        /* Parentheses */
              | <RelExpr> "&&" <RelExpr> /* Logical AND */
              | <RelExpr> "||" <RelExpr> /* Logical OR */
              | "!" <RelExpr>         /* Logical NOT */
              | <IntRelExpr>
              | <FloatRelExpr>
              | <StringRelExpr>
              | "true"        /* case insensitive */
              | "false" ;     /* case insensitive */

    <IntRelExpr>:: <IntEx> "==" <IntEx>
                 | <IntEx> "!=" <IntEx>
                 | <IntEx> "<" <IntEx>
                 | <IntEx> ">" <IntEx>
                 | <IntEx> "<=" <IntEx>
                 | <IntEx> ">=" <IntEx> ;

    <FloatRelExpr>:: <FloatEx> "<" <FloatEx>
                   | <FloatEx> ">" <FloatEx>
                   | <FloatEx> "<=" <FloatEx>
                   | <FloatEx> ">=" <FloatEx> ;

    <StringRelExpr>:: <StrEx> "==" <StrEx>  /* String equality */
                    | <StrEx> "!=" <StrEx>  /* String inequality */
                    | <StrEx> "<" <StrEx>   /* Alphanum. comparisons */
                    | <StrEx> ">" <StrEx>
                    | <StrEx> "<=" <StrEx>
                    | <StrEx> ">=" <StrEx>
                    | <StrEx> "~=" <RegExpr> ; /* Reg. expr. matching */

    <IntEx>:: <IntEx> "+" <IntEx>        /* Integer */
            | <IntEx> "-" <IntEx>
            | <IntEx> "*" <IntEx>
            | <IntEx> "/" <IntEx>
            | <IntEx> "%" <IntEx>
            | <IntEx> "^" <IntEx>        /* Exponentiation */
            | "-" <IntEx>
            | "(" <IntEx> ")"
            | <IntegerLiteral>
            | "@@" <StrEx> ;

    <FloatEx>:: <FloatEx> "+" <FloatEx>  /* Floating point */
              | <FloatEx> "-" <FloatEx>
              | <FloatEx> "*" <FloatEx>
              | <FloatEx> "/" <FloatEx>
              | <FloatEx> "^" <FloatEx> /* Exponentiation */
              | "-" <FloatEx>
              | "(" <FloatEx> ")"
              | <FloatLiteral>
              | "&" <StrEx> ;

    <IntegerLiteral>:: {Decimal number of at least one digit} ;
    <FloatLiteral>:: <IntegerLiteral>"."<IntegerLiteral> ;

    <StringLiteral> is a quoted string as defined in previously
    <AttributeID> is defined previously.
.Ed
.Pp
The operation precedence classes are (from highest to lowest):
.Bd -literal
        { (, ) }
        {unary -, @@, &, $}
        {^}
        {*, /, %}
        {+, -, .}
.Ed
.Pp
Operators in the same precedence class are evaluated left-to-right.
.Pp
Note the inability to test for floating point equality, as most
floating point implementations (hardware or otherwise) do not
guarantee accurate equality testing.
.Pp
Also note that integer and floating point expressions can only be used
within clauses of condition fields, but in no other KeyNote field.
.Pp
The keywords
.Qq true
and
.Qq false
are not reserved; they can be used as attribute or principal identifier
names (although this practice makes assertions difficult to understand
and is discouraged).
.Pp
.Aq RegExpr
is a standard regular expression, conforming to the
.St -p1003.2
regular expression syntax and semantics (see
.Xr regex 3 ) .
.Pp
Any string expression (or attribute) containing the ASCII
representation of a numeric value can be converted to an integer or
float with the use of the
.Qq @@
and
.Qq &
operators, respectively.
Any fractional component of an attribute value dereferenced as an integer
is rounded down.
If an attribute dereferenced as a number cannot be properly converted
(e.g., it contains invalid characters or is empty) its value is considered
to be zero.
.Sh COMMENT FIELD
The Comment field allows assertions to be annotated with information
describing their purpose.
It is of the form:
.Pp
.Dl <CommentField>:: \&"Comment:\&" <text>\ \&;
.Pp
No interpretation of the contents of this field is performed by
KeyNote.
Note that this is one of two mechanisms for including
comments in KeyNote assertions; comments can also be inserted anywhere
in an assertion's body by preceding them with the
.Qq #
character (except inside string literals).
.Sh SIGNATURE FIELD
The Signature field identifies a signed assertion and gives the
encoded digital signature of the principal identified in the
Authorizer field.
The Signature field is of the form:
.Bd -literal
       <SignatureField>:: "Signature:" <Signature> ;
       <Signature>:: <StrEx> ;
.Ed
.Pp
The <Signature> string should be of the form:
.Pp
.Dl <IDString>:: <ALGORITHM>":"<ENCODEDBITS>\ \&;
.Pp
The formats of the
.Qq ALGORITHM
and
.Qq ENCODEDBITS
substrings are as described for Cryptographic Principal Identifiers.
The algorithm name should be the same as that of the principal appearing
in the Authorizer field.
The IANA (or some other suitable authority) will provide a registry of
reserved names.
It is not necessary that the encodings of the signature and the authorizer
key be the same.
.Pp
If the signature field is included, the principal named in the
Authorizer field must be a Cryptographic Principal Identifier, the
algorithm must be known to the KeyNote implementation, and the
signature must be correct for the assertion body and authorizer key.
.Pp
The signature is computed over the assertion text, beginning with the
first field (including the field identifier string), up to (but not
including) the Signature field identifier.
The newline preceding the signature field identifier is the last character
included in signature calculation.
The signature is always the last field in a KeyNote assertion.
Text following this field is not considered part of the assertion.
.Sh EXAMPLES
Note that the keys and signatures in these examples are fictional, and
generally much shorter than would be required for real security, in
the interest of readability.
.Bd -literal
           Authorizer: "POLICY"
           Licensees: "RSA:abc123"

           KeyNote-Version: 2
           Local-Constants: Alice="DSA:4401ff92"  # Alice's key
                            Bob="RSA:d1234f"      # Bob's key
           Authorizer: "RSA:abc123"
           Licensees: Alice || Bob
           Conditions: (app_domain == "RFC822-EMAIL") &&
                       (address ~=   # only applies to one domain
                         "^.*@@keynote\e.research\e.att\e.com$") ->
			"true";
           Signature: "RSA-SHA1:213354f9"

           KeyNote-Version: 2
           Authorizer: "DSA:4401ff92"  # the Alice CA
           Licensees: "DSA:12340987"   # mab's key
           Conditions: ((app_domain == "RFC822-EMAIL") -> {
	                        (name == "M. Blaze" || name == "") &&
		                (address ==
                                    "mab@@keynote.research.att.com"));
				(name == "anonymous") -> "logandaccept";
			}

           Signature: "DSA-SHA1:ab23487"

           KeyNote-Version: "2"
           Authorizer: "DSA:4401ff92"   # the Alice CA
           Licensees: "DSA:abc991" ||   # jf's DSA key
                      "RSA:cde773" ||   # jf's RSA key
                      "BFIK:fd091a"     # jf's BFIK key
           Conditions: ((app_domain == "RFC822-EMAIL") &&
                        (name == "J. Feigenbaum" || name == "") &&
                        (address == "jf@@keynote.research.att.com"));
           Signature: "DSA-SHA1:8912aa"
.Ed
.Sh SEE ALSO
.Xr keynote 1 ,
.Xr keynote 3 ,
.Xr keynote 4
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A J. Lacy
.%D 1996
.%J IEEE Symposium on Security and Privacy
.%T Decentralized Trust Management
.Re
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A M. Strauss
.%D 1998
.%J Financial Crypto Conference
.%T Compliance-Checking in the PolicyMaker Trust Management System
.Re
.Sh STANDARDS
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A J. Ioannidis
.%A A. Keromytis
.%D September 1999
.%R RFC 2704
.%T The KeyNote Trust-Management System Version 2
.Re
.Sh AUTHORS
.An Angelos D. Keromytis Aq Mt angelos@@cs.columbia.edu
.Sh WEB PAGE
.Lk http://www1.cs.columbia.edu/~angelos/keynote.html
@


1.24
log
@Avoid .Ns right after .Pf, it's pointless.
In some cases, do additional cleanup in the immediate vicinity.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.23 2013/07/16 15:21:11 schwarze Exp $
d23 1
a23 1
.Dd $Mdocdate: July 16 2013 $
a697 4
.Sh BUGS
None that we know of.
If you find any, please report them at
.Aq Mt keynote@@research.att.com .
@


1.23
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.22 2013/07/16 10:44:51 jmc Exp $
d82 1
a82 1
.Pf ( Ns Qo # Qc ,
@


1.22
log
@more macro simplification; from Jan Stary
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.21 2012/09/27 11:31:58 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: September 27 2012 $
d695 1
a695 1
.An Angelos D. Keromytis Aq angelos@@cs.columbia.edu
d701 1
a701 1
.Aq keynote@@research.att.com .
@


1.21
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.20 2012/08/15 18:56:28 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: August 15 2012 $
d106 1
a106 1
character (ASCII 92 decimal) (e.g.,
d111 1
a111 1
.Qc Ns ).
d337 2
a338 5
digits, underscores, or dashes (i.e., it should match the regular expression
.Qo Ns Bo a-zA-Z
.Bc Ns Bo a-zA-Z0-9_-
.Bc Ns *
.Qc Ns ) .
@


1.20
log
@use Lk for links;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.19 2010/12/22 16:40:38 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: December 22 2010 $
d674 4
a677 4
.%A A. D. Keromytis
.%T "The KeyNote Trust-Management System, Version 2"
.%N RFC 2704
.%D 1999
d682 4
a685 4
.%A J. Lacy
.%T Decentralized Trust Management
.%J IEEE Symposium on Security and Privacy
.%D 1996
d687 1
d691 5
a695 4
.%A M. Strauss
.%T Compliance-Checking in the PolicyMaker Trust Management System
.%J Financial Crypto Conference
.%D 1998
d704 1
a704 1
.Dl Aq keynote@@research.att.com
@


1.19
log
@seemingly the "Decentralized Trust Management" paper comes from the
IEEE Symposium on Security and Privacy, not the IEEE Conference on
Privacy and Security;

from Lawrence Teo
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.18 2010/03/26 19:30:40 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: March 26 2010 $
d698 1
a698 1
.Pa http://www1.cs.columbia.edu/~angelos/keynote.html
@


1.18
log
@dispense with some wacky escape sequences;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.17 2007/08/03 08:09:37 hshoexer Exp $
d23 1
a23 1
.Dd $Mdocdate: May 31 2007 $
d684 1
a684 1
.%J IEEE Conference on Privacy and Security
@


1.17
log
@Update URL of the keynote webpage.  While there, update angelos' email
address.

Noticed by qgiovanni@@gmail.co, thanks!

ok jmc@@ (URL snippet), angelos@@
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.16 2007/05/31 19:19:35 jmc Exp $
d170 2
a171 2
        "this string contains a newline\\n followed by one space."
        "this string contains a newline\\n \\
d173 4
a176 4
        "this str\\
           ing contains a \\
             newline\\n followed by one space."
        "this string contains a newline\\012\\040followed by one space."
d641 1
a641 1
                         "^.*@@keynote\\.research\\.att\\.com$") ->
@


1.16
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.15 2006/04/09 16:02:59 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate$
d696 1
a696 1
.An Angelos D. Keromytis Aq angelos@@dsl.cis.upenn.edu
d698 1
a698 1
.Pa http://www.cis.upenn.edu/~keynote
@


1.15
log
@new sentence, new line;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.14 2006/04/09 16:00:43 jmc Exp $
d23 1
a23 1
.Dd October 10, 1999
@


1.14
log
@macro fix; from moritz grimm
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.13 2003/07/08 11:02:23 jmc Exp $
d68 2
a69 1
field, if present, appears first. The
d75 2
a76 1
Blank lines are not permitted in assertions. Multiple assertions
d99 2
a100 2
A string literal directly represents the value of a string. String
literals must be quoted by preceding and following them with the
d371 2
a372 2
(or the integer 2). The
KeyNote-Version field, if included, should appear first.
@


1.13
log
@- fix some lists/displays
- .Dl for one-line displays
- simplify macros
- .An/.Aq for AUTHORS
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.12 2003/01/19 21:02:14 deraadt Exp $
d195 1
a195 1
.Qq .
@


1.12
log
@typos; jmc@@prioris.mini.pw.edu.pl
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.11 2002/05/01 08:03:30 mpech Exp $
d50 1
a50 1
.Qq \:
d115 1
a115 1
.Qq \e Ns n
d118 1
a118 1
.Qq \e Ns r
d121 1
a121 1
.Qq \e Ns t
d123 1
a123 1
.Qq \e Ns f
d131 2
a132 2
.Qq \e Ns 0o ,
.Qq \e Ns 0oo ,
d134 1
a134 1
.Qq \e Ns ooo
d137 1
a137 1
.Qq \e Ns 012
d139 2
a140 2
.Qq \e Ns n ,
.Qq \e Ns 101
d144 1
a144 1
.Qq \e Ns 377
d147 2
a148 2
.Qq \e Ns 0 ,
.Qq \e Ns 00 ,
d150 1
a150 1
.Qq \e Ns 000
d159 1
a159 1
.Qq \e Ns a
d211 1
a211 1
.Qq \@@
d301 2
a302 3
.Bd -literal
       <OpaqueID>:: <StrEx> ;
.Ed
d305 1
a305 1
.Qq \:
d312 2
a313 3
.Bd -literal
       <KeyID>:: <StrEx> ;
.Ed
d319 2
a320 3
.Bd -literal
      <IDString>:: <ALGORITHM>":"<ENCODEDBITS> ;
.Ed
d563 1
a563 1
.Qq \@@
d576 2
a577 3
.Bd -literal
       <CommentField>:: "Comment:" <text> ;
.Ed
d597 2
a598 3
.Bd -literal
       <IDString>:: <ALGORITHM>":"<ENCODEDBITS> ;
.Ed
d694 1
a694 2
Angelos D. Keromytis
.Aq angelos@@dsl.cis.upenn.edu
d700 1
a700 3
.Bd -literal -offset indent -compact
keynote@@research.att.com
.Ed
@


1.11
log
@o) start new sentence on a new line;
o) always close .Bl tags;
o) fix usage of .Xr;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.10 2002/04/30 16:31:42 mpech Exp $
d60 1
a60 1
One mandatory field is required in all assertions: Authorizer
d110 1
a110 1
This permits the inclusion of the double- quote and backslash characters
d213 1
a213 1
.Qq \& .
d568 1
a568 1
.Qq \&
d588 1
a588 1
.Qq \#
@


1.10
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.9 2001/09/03 20:14:51 deraadt Exp $
d47 2
a48 1
that serve various semantic functions. Each field starts with an
d51 2
a52 2
character and the field's contents. There can be at most one field per
line.
d57 2
a58 2
is otherwise ignored outside of quoted strings. Comments with a
leading octothorp character ('#') may begin in any column.
d65 2
a66 1
All field names are case-insensitive. The
d199 2
a200 1
pass information to assertions. Attribute names are strings from a
d202 4
a205 3
represented internally as strings. An attribute is dereferenced simply
by using its name. In general, KeyNote allows the use of an attribute
anywhere a string literal is permitted.
d207 2
a208 1
Attributes are dereferenced as strings by default. When required,
d237 2
a238 1
expressions and may be recursively dereferenced. In the simplest case,
d318 2
a319 1
have a special form. To be interpreted by KeyNote (for signature
d327 2
a328 2
used in interpreting the key's bits. The ALGORITHM identifies the
major cryptographic algorithm (e.g., RSA
d335 2
a336 1
and key bit encoding (e.g., HEX or BASE64). By convention, the ALGORITHM
d356 2
a357 2
assertion language under which the assertion was written. The
KeyNote-Version field is of the form:
d577 2
a578 1
describing their purpose. It is of the form:
@


1.9
log
@with or without fee; received mail permitting this change from angelos
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.8 2001/08/16 17:58:06 mpech Exp $
d136 1
a136 1
is the same as 
d162 1
a162 1
becomes 
d236 1
a236 1
is by reference to 
d332 1
a332 1
.Bc Ns Bo a-zA-Z0-9_- 
d370 1
a370 1
cryptographic principal identifiers, especially to make the Licensees field 
d543 1
a543 1
and 
@


1.8
log
@o) -mdoc syntax improvements;
o) typos;
o) "start new line" issues;
o) improve enclosure/quoting macros;

millert@@ help and ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.7 2001/08/06 10:42:26 mpech Exp $
d10 1
a10 1
.\" Permission to use, copy, and modify this software without fee
@


1.7
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.6 2000/09/17 02:11:13 aaron Exp $
d42 1
a42 1
.Nm KeyNote ,
d45 5
a49 3
KeyNote assertions are divided into sections, called `fields', that
serve various semantic functions. Each field starts with an
identifying label at the beginning of a line, followed by the ":"
d64 7
a70 4
All field names are case-insensitive. The "KeyNote-Version" field, if
present, appears first. The "Signature" field, if present, appears
last. Otherwise, fields may appear in any order. Each field may appear
at most once in any assertion.
d77 7
a83 3
The octothorp character ("#", ASCII 35 decimal) can be used to
introduce comments. Outside of quoted strings, all characters from the
"#" character through the end of the current line are ignored.
d87 3
a89 1
A `string' is a lexical object containing a sequence of characters.
d91 3
a93 2
nonprintable characters. Strings may be given as literals, computed
from complex expressions, or dereferenced from attribute names.
d99 11
a109 4
A printable character may be `escaped' inside a quoted string literal
by preceding it with the backslash character (ASCII 92 decimal) (e.g.,
"like \\"this\\"."). This permits the inclusion of the double- quote and
backslash characters inside string literals.
d112 53
a164 19
characters. "\\n" represents the newline character (ASCII character 10
decimal), "\\r" represents the carriage-return character (ASCII
character 13 decimal), "\\t" represents the tab character (ASCII
character 9 decimal), and "\\f" represents the form-feed character
(ASCII character 12 decimal). A backslash character followed by a
newline suppresses all subsequent whitespace (including the newline)
up to the next non-whitespace character (this allows the continuation
of long string constants across lines). Un-escaped newline and return
characters are illegal inside string literals.
.Pp
The constructs "\\0o", "\\0oo", and "\\ooo" (where o represents any
octal digit) may be used to represent any non-NUL ASCII characters
with their corresponding octal values (thus, "\\012" is the same as
"\\n", "\\101" is "A", and "\\377" is the ASCII character 255 decimal).
However, the NUL character cannot be encoded in this manner; "\\0",
"\\00", and "\\000" are converted to the strings "0", "00", and "000"
respectively.  Similarly, all other escaped characters have the
leading backslash removed (e.g., "\\a" becomes "a", and "\\\\" becomes
"\\").  The following four strings are equivalent:
d175 7
a181 6
In general, anywhere a quoted string literal is allowed, a `string
expression' can be used. A string expression constructs a string from
string constants, dereferenced attributes (described below), and a
string concatenation operator. String expressions may be
parenthesized.

d189 6
a194 2

The "$" operator has higher precedence than the "." operator.
d205 11
a215 3
numbers with the type conversion operators "@@" and "&". Thus, an
attribute named "foo" having the value "1.2" may be interpreted as the
string "1.2" (foo), the integer value 1 (@@foo), or the floating point
d219 7
a225 4
represented according to the ANSI C `long' and `float' types,
respectively. In particular, integers range from -2147483648 to
2147483647, whilst floats range from 1.17549435E-38F to
3.40282347E+38F.
d234 24
a257 8
quotes; e.g., the string value of the attribute named "foo" is by
reference to `foo' (outside of quotes). The "$<StrEx>" construct
dereferences the attribute named in the string expression <StrEx>. For
example, if the attribute named "foo" contains the string "bar", the
attribute named "bar" contains the string "xyz", and the attribute
"xyz" contains the string "qua", the following string comparisons are
all true:

a264 4

If <StrEx> evaluates to an invalid or uninitialized attribute name,
its value is considered to be the empty string (or zero if used as a
numeric).
d266 8
a273 1
The <DerefAttribute> token is defined as:
d281 5
a285 6
Principals are represented as ASCII strings called `Principal
Identifiers'. Principal Identifiers may be arbitrary labels whose
structure is not interpreted by the KeyNote system or they may encode
cryptographic keys that are used by KeyNote for credential signature
verification.

d292 3
a294 3
said to be `opaque'.  Opaque identifiers are encoded in assertions as
strings (as defined above):

d298 4
a301 2

Opaque identifier strings should not contain the ":" character.
d304 2
a305 1
verify credential signatures, are said to be `cryptographic'.
a306 1

d310 1
a310 1

a313 1

d317 3
a319 2

"ALGORITHM" is an ASCII substring that describes the algorithms to be
d321 21
a341 11
major cryptographic algorithm (e.g., RSA [RSA78], DSA [DSA94], etc.),
structured format (e.g., PKCS1 [PKCS1]), and key bit encoding (e.g.,
HEX or BASE64). By convention, the ALGORITHM substring starts with an
alphabetic character and can contain letters, digits, underscores, or
dashes (i.e., it should match the regular expression "[a-zA-Z][a-
zA-Z0-9_-]*"). The IANA (or some other appropriate authority) will
provide a registry of reserved algorithm identifiers.
.Pp
"ENCODEDBITS" is a substring of characters representing the key's
bits, the encoding and format of which depends on the ALGORITHM. By
convention, hexadecimal encoded keys use lower-case ASCII characters.
a349 1

d355 10
a364 6

<VersionString> is an ASCII-encoded string. Assertions in production
versions of KeyNote use decimal digits in the version representing the
version number of the KeyNote language under which they are to be
interpreted. Assertions written to conform with this document should
be identified with the version string "2" (or the integer 2). The
d368 5
a372 5
assertion only.  This mechanism allows the use of short names for
(frequently lengthy) cryptographic principal identifiers, especially
to make the Licensees field more readable.  The Local-Constants field
is of the form:

d378 15
a392 13

<AttributeID> is an attribute name from the action attribute
namespace. The name is available for use as an attribute in any
subsequent field. If the Local-Constants field defines more than one
identifier, it can occupy more than one line and be indented.
<StringLiteral> is a string literal as described previously.
Attributes defined in the Local-Constants field override any
attributes with the same name passed in with the action attribute set.
.Pp
An attribute may be initialized at most once in the Local-Constants
field. If an attribute is initialized more than once in an assertion,
the entire assertion is considered invalid and is not considered by
the KeyNote compliance checker in evaluating queries.
d394 2
a395 3
The Authorizer identifies the Principal issuing the assertion. This
field is of the form:

d401 1
a401 1

d406 6
a411 4
assertion. More than one principal can be authorized, and
authorization can be distributed across several principals through the
use of `and' and threshold constructs. This field is of the form:

d431 13
a443 5

The "&&" operator has higher precedence than the "||" operator. <K> is
an ASCII-encoded positive decimal integer. If a <PrincList> contains
fewer than <K> principals, the entire assertion is omitted from
processing.
d445 6
a450 5
This field gives the `conditions' under which the Authorizer trusts
the Licensees to perform an action. `Conditions' are predicates that
operate on the action attribute set. The Conditions field is of the
form:

d522 1
a522 1

a523 1

d531 1
a531 1

d541 12
a552 6
The keywords "true" and "false" are not reserved; they can be used as
attribute or principal identifier names (although this practice makes
assertions difficult to understand and is discouraged).
.Pp
<RegExpr> is a standard regular expression, conforming to the POSIX
1003.2 regular expression syntax and semantics (see
d557 10
a566 5
float with the use of the "@@" and "&" operators, respectively. Any
fractional component of an attribute value dereferenced as an integer
is rounded down. If an attribute dereferenced as a number cannot be
properly converted (e.g., it contains invalid characters or is empty)
its value is considered to be zero.
a569 1

d573 1
a573 1

d575 2
a576 1
KeyNote. Note that this is one of two mechanisms for including
d578 3
a580 2
in an assertion's body by preceding them with the "#" character
(except inside string literals).
d584 2
a585 2
Authorizer field. The Signature field is of the form:

d590 1
a590 1

a591 1

d595 12
a606 7

The formats of the "ALGORITHM" and "ENCODEDBITS" substrings are as
described for Cryptographic Principal Identifiers. The algorithm name
should be the same as that of the principal appearing in the
Authorizer field. The IANA (or some other suitable authority) will
provide a registry of reserved names. It is not necessary that the
encodings of the signature and the authorizer key be the same.
d615 5
a619 5
including) the Signature field identifier. The newline preceding the
signature field identifier is the last character included in signature
calculation. The signature is always the last field in a KeyNote
assertion. Text following this field is not considered part of the
assertion.
d665 24
a688 11
.Bl -tag -width "AAAAAAA"
.It ``The KeyNote Trust-Management System, Version 2''
M. Blaze, J. Feigenbaum, A. D. Keromytis,
Internet Drafts, RFC 2704.
.It ``Decentralized Trust Management''
M. Blaze, J. Feigenbaum, J. Lacy,
1996 IEEE Conference on Privacy and Security
.It ``Compliance-Checking in the PolicyMaker Trust Management System''
M. Blaze, J. Feigenbaum, M. Strauss,
1998 Financial Crypto Conference
.El
d690 2
a691 1
Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
d693 1
a693 1
http://www.cis.upenn.edu/~keynote
@


1.6
log
@Arguments to .Dt macros should be all-caps.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.5 2000/06/13 19:16:16 angelos Exp $
a70 1
.Pp
a76 1
.Pp
a120 1
.Pp
a136 1
.Pp
a191 1
.Pp
a202 1
.Pp
a212 1
.Pp
a246 1
.Pp
a263 1
.Pp
a288 1
.Pp
a300 1
.Pp
a330 1
.Pp
a442 1
.Pp
a455 1
.Pp
a490 1
.Pp
a531 1
.Pp
d547 1
a547 1
.Sh AUTHOR
@


1.5
log
@Fix some compile warnings.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d24 1
a24 1
.Dt keynote 5
@


1.4
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.3 2000/04/12 21:48:04 aaron Exp $
@


1.3
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.2 1999/10/11 04:39:01 angelos Exp $
d446 1
a446 1
.Xr regex 3 ).
@


1.2
log
@Lower-case the name.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.5,v 1.1 1999/10/11 00:08:47 angelos Exp $
d9 1
a9 1
.\"      
d553 1
a553 1
.It ``The KeyNote Trust-Management System, Version 2'' 
d556 1
a556 1
.It ``Decentralized Trust Management'' 
@


1.1
log
@Assertion syntax manpage.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d24 1
a24 1
.Dt KeyNote 5
d28 1
a28 1
.Nm KeyNote
@

