head	1.11;
access;
symbols
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.9.0.48
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.40
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.44
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.42
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.38
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.36
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.34
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.32
	OPENBSD_5_0:1.9.0.30
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.28
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.26
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.22
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.24
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.20
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.18
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.16
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.7.0.12
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.10
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.8
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.11
date	2015.12.14.03.35.40;	author mmcc;	state Exp;
branches;
next	1.10;
commitid	4Dxq4yN4wrkEGKym;

1.10
date	2015.11.19.02.35.24;	author mmcc;	state Exp;
branches;
next	1.9;
commitid	bCQllQH6f0Sp4lOD;

1.9
date	2004.06.29.11.35.56;	author msf;	state Exp;
branches;
next	1.8;

1.8
date	2004.06.25.05.06.49;	author msf;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.03.20.14.51;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.13.20.30.40;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.03.01.33.55;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.17.05.38.18;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.01.03.17.36;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.30.06.32.02;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.25.09.08.11;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove NULL-checks before free().
@
text
@/* $OpenBSD: auxil.c,v 1.10 2015/11/19 02:35:24 mmcc Exp $ */
/*
 * The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
 *
 * This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
 * in April-May 1998
 *
 * Copyright (C) 1998, 1999 by Angelos D. Keromytis.
 *	
 * Permission to use, copy, and modify this software with or without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software. 
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

#include <sys/types.h>

#include <ctype.h>
#include <limits.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/dsa.h>
#include <openssl/rsa.h>

#include "keynote.h"
#include "assertion.h"
#include "signature.h"

/*
 * Get some sort of key-hash for hash table indexing purposes.
 */
static int
keynote_keyhash(void *key, int alg)
{
    struct keynote_binary *bn;
    unsigned int res = 0, i;
    DSA *dsa;
    RSA *rsa;

    if (key == NULL)
      return 0;

    switch (alg)
    {
	case KEYNOTE_ALGORITHM_DSA:
	    dsa = (DSA *) key;
	    res += BN_mod_word(dsa->p, HASHTABLESIZE);
	    res += BN_mod_word(dsa->q, HASHTABLESIZE);
	    res += BN_mod_word(dsa->g, HASHTABLESIZE);
	    res += BN_mod_word(dsa->pub_key, HASHTABLESIZE);
	    return res % HASHTABLESIZE;

        case KEYNOTE_ALGORITHM_RSA:
	    rsa = (RSA *) key;
            res += BN_mod_word(rsa->n, HASHTABLESIZE);
            res += BN_mod_word(rsa->e, HASHTABLESIZE);
	    return res % HASHTABLESIZE;

	case KEYNOTE_ALGORITHM_X509: /* RSA-specific */
	    rsa = (RSA *) key;
            res += BN_mod_word(rsa->n, HASHTABLESIZE);
            res += BN_mod_word(rsa->e, HASHTABLESIZE);
	    return res % HASHTABLESIZE;

	case KEYNOTE_ALGORITHM_BINARY:
	    bn = (struct keynote_binary *) key;
	    for (i = 0; i < bn->bn_len; i++)
	      res = (res + ((unsigned char) bn->bn_key[i])) % HASHTABLESIZE;

	    return res;

	case KEYNOTE_ALGORITHM_NONE:
	    return keynote_stringhash(key, HASHTABLESIZE);

	default:
	    return 0;
    }
}

/*
 * Return RESULT_TRUE if key appears in the action authorizers.
 */
int
keynote_in_action_authorizers(void *key, int algorithm)
{
    struct keylist *kl, *kl2;
    void *s;
    int alg;

    if (algorithm == KEYNOTE_ALGORITHM_UNSPEC)
    {
	kl2 = keynote_keylist_find(keynote_current_assertion->as_keylist, key);
	if (kl2 == NULL)
	  return RESULT_FALSE;   /* Shouldn't ever happen */

	s = kl2->key_key;
	alg = kl2->key_alg;
    }
    else
    {
	s = key;
	alg = algorithm;
    }

    for (kl = keynote_current_session->ks_action_authorizers;
	 kl != NULL;
	 kl = kl->key_next)
      if ((kl->key_alg == alg) ||
	  ((kl->key_alg == KEYNOTE_ALGORITHM_RSA) &&
	   (alg == KEYNOTE_ALGORITHM_X509)) ||
	  ((kl->key_alg == KEYNOTE_ALGORITHM_X509) &&
	   (alg == KEYNOTE_ALGORITHM_RSA)))
	if (kn_keycompare(kl->key_key, s, alg) == RESULT_TRUE)
	  return RESULT_TRUE;

    return RESULT_FALSE;
}

/*
 * Add a key to the keylist. Return RESULT_TRUE on success, -1 (and set
 * keynote_errno) otherwise. We are not supposed to make a copy of the 
 * argument.
 */
int
keynote_keylist_add(struct keylist **keylist, char *key)
{
    struct keynote_deckey dc;
    struct keylist *kl;
    
    if (keylist == NULL)
    {
	keynote_errno = ERROR_MEMORY;
	return -1;
    }
    
    kl = calloc(1, sizeof(struct keylist));
    if (kl == NULL)
    {
	keynote_errno = ERROR_MEMORY;
	return -1;
    }

    if (kn_decode_key(&dc, key, KEYNOTE_PUBLIC_KEY) != 0)
    {
	free(kl);
	return -1;
    }

    kl->key_key = dc.dec_key;
    kl->key_alg = dc.dec_algorithm;
    kl->key_stringkey = key;
    kl->key_next = *keylist;
    *keylist = kl;
    return RESULT_TRUE;
}

/*
 * Remove an action authorizer.
 */
int
kn_remove_authorizer(int sessid, char *key)
{
    struct keynote_session *ks;
    struct keylist *kl, *kl2;

    keynote_errno = 0;
    if ((keynote_current_session == NULL) ||
	(keynote_current_session->ks_id != sessid))
    {
	keynote_current_session = keynote_find_session(sessid);
	if (keynote_current_session == NULL)
	{
	    keynote_errno = ERROR_NOTFOUND;
	    return -1;
	}
    }

    ks = keynote_current_session;

    /* If no action authorizers present */
    if ((kl = ks->ks_action_authorizers) == NULL)
    {
	keynote_errno = ERROR_NOTFOUND;
	return -1;
    }

    /* First in list */
    if (!strcmp(kl->key_stringkey, key))
    {
	ks->ks_action_authorizers = kl->key_next;
	kl->key_next = NULL;
	keynote_keylist_free(kl);
	return 0;
    }

    for (; kl->key_next != NULL; kl = kl->key_next)
      if (!strcmp(kl->key_next->key_stringkey, key))
      {
	  kl2 = kl->key_next;
	  kl->key_next = kl2->key_next;
	  kl2->key_next = NULL;
	  keynote_keylist_free(kl2);
	  return 0;
      }
    
    keynote_errno = ERROR_NOTFOUND;
    return -1;
}

/*
 * Add an action authorizer.
 */
int
kn_add_authorizer(int sessid, char *key)
{
    char *stringkey;

    keynote_errno = 0;
    if ((keynote_current_session == NULL) ||
	(keynote_current_session->ks_id != sessid))
    {
	keynote_current_session = keynote_find_session(sessid);
	if (keynote_current_session == NULL)
	{
	    keynote_errno = ERROR_NOTFOUND;
	    return -1;
	}
    }

    stringkey = strdup(key);
    if (stringkey == NULL)
    {
	keynote_errno = ERROR_MEMORY;
	return -1;
    }

    if (keynote_keylist_add(&(keynote_current_session->ks_action_authorizers),
			    stringkey) == -1)
    {
	free(stringkey);
	return -1;
    }

    return 0;
}

/*
 * Find a keylist entry based on the key_stringkey entry.
 */
struct keylist *
keynote_keylist_find(struct keylist *kl, char *s)
{
    for (; kl != NULL; kl = kl->key_next)
      if (!strcmp(kl->key_stringkey, s))
	return kl;

    return kl;
}

/*
 * Free keylist list.
 */
void
keynote_keylist_free(struct keylist *kl)
{
    struct keylist *kl2;

    while (kl != NULL)
    {
	kl2 = kl->key_next;
	free(kl->key_stringkey);
	keynote_free_key(kl->key_key, kl->key_alg);
	free(kl);
	kl = kl2;
    }
}

/*
 * Free a key.
 */
void
kn_free_key(struct keynote_deckey *dc)
{
    if (dc)
      keynote_free_key(dc->dec_key, dc->dec_algorithm);
}

/*
 * Find the num-th assertion given the authorizer. Return NULL if not found.
 */
struct assertion *
keynote_find_assertion(void *authorizer, int num, int algorithm)
{
    struct assertion *as;
    unsigned int h;

    if (authorizer == NULL)
      return NULL;

    h = keynote_keyhash(authorizer, algorithm);
    for (as = keynote_current_session->ks_assertion_table[h];
	 as != NULL;
	 as = as->as_next)
      if ((as->as_authorizer != NULL) &&
	  ((as->as_signeralgorithm == algorithm) ||
	   ((as->as_signeralgorithm == KEYNOTE_ALGORITHM_RSA) &&
	    (algorithm == KEYNOTE_ALGORITHM_X509)) ||
	   ((as->as_signeralgorithm == KEYNOTE_ALGORITHM_X509) &&
	    (algorithm == KEYNOTE_ALGORITHM_RSA))))
	if (kn_keycompare(authorizer, as->as_authorizer, algorithm) ==
	    RESULT_TRUE)
	  if (num-- == 0)
	    return as;

    return NULL;
}

/*
 * Add an assertion to the hash table. Return RESULT_TRUE on success,
 * ERROR_MEMORY for memory failure, ERROR_SYNTAX if some problem with
 * the assertion is detected.
 */
int
keynote_add_htable(struct assertion *as, int which)
{
    char *hashname;
    unsigned int i;

    if (as == NULL)
    {
	keynote_errno = ERROR_MEMORY;
	return -1;
    }

    if (!which)
      hashname = as->as_authorizer_string_s;
    else
      hashname = as->as_authorizer;

    if (hashname == NULL)
    {
	keynote_errno = ERROR_SYNTAX;
	return -1;
    }

    i = keynote_keyhash(hashname, as->as_signeralgorithm);
    as->as_next = keynote_current_session->ks_assertion_table[i];
    keynote_current_session->ks_assertion_table[i] = as;
    return RESULT_TRUE;
}

/*
 * Parse and store an assertion in the internal hash table. 
 * Return the result of the evaluation, if doing early evaluation.
 * If an error was encountered, set keynote_errno.
 */
int
kn_add_assertion(int sessid, char *asrt, int len, int assertion_flags)
{
    struct assertion *as;

    keynote_errno = 0;
    if ((keynote_current_session == NULL) ||
	(keynote_current_session->ks_id != sessid))
    {
	keynote_current_session = keynote_find_session(sessid);
	if (keynote_current_session == NULL)
	{
	    keynote_errno = ERROR_NOTFOUND;
	    return -1;
	}
    }

    as = keynote_parse_assertion(asrt, len, assertion_flags);
    if ((as == NULL) || (keynote_errno != 0))
    {
	if (keynote_errno == 0)
	  keynote_errno = ERROR_SYNTAX;

	return -1;
    }

    as->as_id = keynote_current_session->ks_assertioncounter++;

    /* Check for wrap around...there has to be a better solution to this */
    if (keynote_current_session->ks_assertioncounter < 0)
    {
	keynote_free_assertion(as);
	keynote_errno = ERROR_SYNTAX;
	return -1;
    }
    
    if (keynote_add_htable(as, 0) != RESULT_TRUE)
    {
	keynote_free_assertion(as);
	return -1;
    }

    as->as_internalflags |= ASSERT_IFLAG_NEEDPROC;
    return as->as_id;
}

/*
 * Remove an assertion from the hash table.
 */
static int
keynote_remove_assertion(int sessid, int assertid, int deleteflag)
{
    struct assertion *ht, *ht2;
    int i;

    if ((keynote_current_session == NULL) ||
	(keynote_current_session->ks_id != sessid))
    {
	keynote_current_session = keynote_find_session(sessid);
	if (keynote_current_session == NULL)
	{
	    keynote_errno = ERROR_NOTFOUND;
	    return -1;
	}
    }

    for (i = 0; i < HASHTABLESIZE; i++)
    {
	ht = keynote_current_session->ks_assertion_table[i];
	if (ht == NULL)
	  continue;

	/* If first entry in bucket */
	if (ht->as_id == assertid)
	{
	    keynote_current_session->ks_assertion_table[i] = ht->as_next;
	    if (deleteflag)
	      keynote_free_assertion(ht);
	    return 0;
	}

	for (; ht->as_next != NULL; ht = ht->as_next)
	  if (ht->as_next->as_id == assertid)  /* Got it */
	  {
	      ht2 = ht->as_next;
	      ht->as_next = ht2->as_next;
	      if (deleteflag)
		keynote_free_assertion(ht2);
	      return 0;
	  }
    }

    keynote_errno = ERROR_NOTFOUND;
    return -1;
}

/*
 * API wrapper for deleting assertions.
 */
int
kn_remove_assertion(int sessid, int assertid)
{
    keynote_errno = 0;
    return keynote_remove_assertion(sessid, assertid, 1);
}

/*
 * Internally-used wrapper for removing but not deleting assertions.
 */
int
keynote_sremove_assertion(int sessid, int assertid)
{
    return keynote_remove_assertion(sessid, assertid, 0);
}

/* 
 * Free an assertion structure.
 */
void
keynote_free_assertion(struct assertion *as)
{
    if (as == NULL)
      return;

    free(as->as_buf);

    free(as->as_signature);

    if (as->as_env != NULL)
      keynote_env_cleanup(&(as->as_env), 1);

    if (as->as_keylist != NULL)
      keynote_keylist_free(as->as_keylist);

    if (as->as_authorizer != NULL)
      keynote_free_key(as->as_authorizer, as->as_signeralgorithm);

    free(as);
}

unsigned int 
keynote_stringhash(char *name, unsigned int size)
{
    unsigned int hash_val = 0;
    unsigned int i;

    if ((size == 0) || (size == 1))
      return 0;

    for (; *name; name++) 
    {
        hash_val = (hash_val << 2) + *name;
        if ((i = hash_val & 0x3fff) != 0)
	  hash_val = ((hash_val ^ (i >> 12)) & 0x3fff);
    }

    return hash_val % size;
}
@


1.10
log
@Remove a ton of ugly, needless casts for NULL, calloc(), and strdup().
No binary change.
@
text
@d1 1
a1 1
/* $OpenBSD: auxil.c,v 1.9 2004/06/29 11:35:56 msf Exp $ */
d490 1
a490 2
    if (as->as_buf != NULL)
      free(as->as_buf);
d492 1
a492 2
    if (as->as_signature != NULL)
      free(as->as_signature);
@


1.9
log
@Header cleanup.
ok hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: auxil.c,v 1.8 2004/06/25 05:06:49 msf Exp $ */
d49 1
a49 1
    if (key == (void *) NULL)
d102 1
a102 1
	if (kl2 == (struct keylist *) NULL)
d115 1
a115 1
	 kl != (struct keylist *) NULL;
d139 1
a139 1
    if (keylist == (struct keylist **) NULL)
d145 2
a146 2
    kl = (struct keylist *) calloc(1, sizeof(struct keylist));
    if (kl == (struct keylist *) NULL)
d176 1
a176 1
    if ((keynote_current_session == (struct keynote_session *) NULL) ||
d180 1
a180 1
	if (keynote_current_session == (struct keynote_session *) NULL)
d190 1
a190 1
    if ((kl = ks->ks_action_authorizers) == (struct keylist *) NULL)
d200 1
a200 1
	kl->key_next = (struct keylist *) NULL;
d205 1
a205 1
    for (; kl->key_next != (struct keylist *) NULL; kl = kl->key_next)
d210 1
a210 1
	  kl2->key_next = (struct keylist *) NULL;
d228 1
a228 1
    if ((keynote_current_session == (struct keynote_session *) NULL) ||
d232 1
a232 1
	if (keynote_current_session == (struct keynote_session *) NULL)
d239 2
a240 2
    stringkey = strdup((char *) key);
    if (stringkey == (char *) NULL)
d262 1
a262 1
    for (; kl != (struct keylist *) NULL; kl = kl->key_next)
d277 1
a277 1
    while (kl != (struct keylist *) NULL)
d306 2
a307 2
    if (authorizer == (char *) NULL)
      return (struct assertion *) NULL;
d311 1
a311 1
	 as != (struct assertion *) NULL;
d313 1
a313 1
      if ((as->as_authorizer != (void *) NULL) &&
d324 1
a324 1
    return (struct assertion *) NULL;
d338 1
a338 1
    if (as == (struct assertion *) NULL)
d349 1
a349 1
    if (hashname == (char *) NULL)
d372 1
a372 1
    if ((keynote_current_session == (struct keynote_session *) NULL) ||
d376 1
a376 1
	if (keynote_current_session == (struct keynote_session *) NULL)
d384 1
a384 1
    if ((as == (struct assertion *) NULL) || (keynote_errno != 0))
d421 1
a421 1
    if ((keynote_current_session == (struct keynote_session *) NULL) ||
d425 1
a425 1
	if (keynote_current_session == (struct keynote_session *) NULL)
d435 1
a435 1
	if (ht == (struct assertion *) NULL)
d447 1
a447 1
	for (; ht->as_next != (struct assertion *) NULL; ht = ht->as_next)
d487 1
a487 1
    if (as == (struct assertion *) NULL)
d490 1
a490 1
    if (as->as_buf != (char *) NULL)
d493 1
a493 1
    if (as->as_signature != (char *) NULL)
d496 1
a496 1
    if (as->as_env != (struct environment *) NULL)
d499 1
a499 1
    if (as->as_keylist != (struct keylist *) NULL)
d502 1
a502 1
    if (as->as_authorizer != (void *) NULL)
@


1.8
log
@Make crufty configure stuff go away. Remove all unused code paths.
No change in binaries.

ok millert@@ deraadt@@ hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: auxil.c,v 1.7 2001/09/03 20:14:51 deraadt Exp $ */
d26 1
d31 3
a33 1
#include "header.h"
@


1.7
log
@with or without fee; received mail permitting this change from angelos
@
text
@d1 1
a1 1
/* $OpenBSD: auxil.c,v 1.6 2001/02/13 20:30:40 angelos Exp $ */
d22 1
a22 3
#if HAVE_CONFIG_H
#include "config.h"
#endif /* HAVE_CONFIG_H */
d24 3
a26 1
#include <sys/types.h>
a27 4
#include <stdio.h>
#include <ctype.h>

#if STDC_HEADERS
a28 5
#endif /* STDC_HEADERS */

#if HAVE_LIMITS_H
#include <limits.h>
#endif /* HAVE_LIMITS_H */
a42 1
#ifdef CRYPTO
a44 1
#endif /* CRYPTO */
a50 1
#ifdef CRYPTO
a69 1
#endif /* CRYPTO */
@


1.6
log
@Fix authorizer removal problem.
@
text
@d1 1
a1 1
/* $OpenBSD: auxil.c,v 1.5 2000/10/03 01:33:55 angelos Exp $ */
d10 1
a10 1
 * Permission to use, copy, and modify this software without fee
@


1.5
log
@Sync.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d216 1
a216 1
      if (!strcmp(kl->key_stringkey, key))
@


1.4
log
@Add kn_free_key()
@
text
@d346 1
a346 1
    u_int i;
d518 2
a519 2
u_int 
keynote_stringhash(char *name, u_int size)
@


1.3
log
@Fix typo.
@
text
@d1 1
a1 1
/* $OpenBSD: auxil.c,v 1.2 2000/01/30 06:32:02 angelos Exp $ */
d295 10
@


1.2
log
@Remove bogus ~ from keynote_stringhash() which resulted in all
assertions being placed in the same hash bucket (--> potentially bad
performance when creating sessions with many assertions/credentials,
but no correctness errors).
@
text
@d1 1
a1 1
/* $OpenBSD: auxil.c,v 1.1 2000/01/25 09:08:11 angelos Exp $ */
d129 1
a129 1
	   (alg = KEYNOTE_ALGORITHM_X509)) ||
d131 1
a131 1
	   (alg = KEYNOTE_ALGORITHM_RSA)))
d520 1
a520 1
        if (i = hash_val & 0x3fff)
@


1.1
log
@Sync with current version (just the file renamed).
@
text
@d1 1
a1 1
/* $OpenBSD: aux.c,v 1.7 1999/10/26 22:31:37 angelos Exp $ */
a507 3
/*
 * Taken from "Compiler Design in C" by Aho.
 */
d520 2
a521 2
        if ((i = hash_val & 0x3fff))
	  hash_val = ((hash_val ^ (i >> 12)) & ~0x3fff);
@

