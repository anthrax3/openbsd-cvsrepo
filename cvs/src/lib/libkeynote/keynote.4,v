head	1.35;
access;
symbols
	OPENBSD_6_1:1.35.0.8
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.4
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.32.0.12
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.32.0.4
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.32.0.8
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.32.0.6
	OPENBSD_5_5_BASE:1.32
	OPENBSD_5_4:1.32.0.2
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.30.0.2
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.28.0.8
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.6
	OPENBSD_5_0:1.28.0.4
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.28.0.2
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.27.0.14
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.10
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.12
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.8
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.6
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.4
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.25.0.16
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.25.0.14
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.12
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.10
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.25.0.8
	OPENBSD_3_7_BASE:1.25
	OPENBSD_3_6:1.25.0.6
	OPENBSD_3_6_BASE:1.25
	OPENBSD_3_5:1.25.0.4
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	OPENBSD_3_3:1.23.0.2
	OPENBSD_3_3_BASE:1.23
	OPENBSD_3_2:1.22.0.2
	OPENBSD_3_2_BASE:1.22
	OPENBSD_3_1:1.20.0.4
	OPENBSD_3_1_BASE:1.20
	OPENBSD_3_0:1.20.0.2
	OPENBSD_3_0_BASE:1.20
	OPENBSD_2_9:1.17.0.4
	OPENBSD_2_9_BASE:1.17
	OPENBSD_2_8:1.17.0.2
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.15.0.2
	OPENBSD_2_7_BASE:1.15
	OPENBSD_2_6:1.13.0.2
	OPENBSD_2_6_BASE:1.13;
locks; strict;
comment	@.\" @;


1.35
date	2015.11.20.16.31.05;	author mmcc;	state Exp;
branches;
next	1.34;
commitid	Y9FfFZPF0ws7sKmv;

1.34
date	2015.09.14.20.06.58;	author schwarze;	state Exp;
branches;
next	1.33;
commitid	r87YNrjEWwl7OkJ0;

1.33
date	2015.09.10.17.55.21;	author schwarze;	state Exp;
branches;
next	1.32;
commitid	PeV7Ql0T6htfMjhP;

1.32
date	2013.07.16.15.21.11;	author schwarze;	state Exp;
branches;
next	1.31;

1.31
date	2013.07.16.10.44.51;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2012.09.27.11.31.58;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2012.08.15.18.56.28;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2010.12.22.16.40.38;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2007.08.03.08.09.37;	author hshoexer;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.31.19.19.35;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.07.08.11.02.23;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.02.09.47.15;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2003.03.20.07.26.33;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2002.05.01.08.03.30;	author mpech;	state Exp;
branches;
next	1.21;

1.21
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.20;

1.20
date	2001.09.03.20.14.51;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.16.17.58.06;	author mpech;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2000.09.17.02.11.12;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	2000.06.13.19.16.16;	author angelos;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.12.21.48.03;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2000.01.10.08.17.03;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	99.10.11.04.45.25;	author angelos;	state Exp;
branches;
next	1.12;

1.12
date	99.10.11.04.39.01;	author angelos;	state Exp;
branches;
next	1.11;

1.11
date	99.10.11.00.08.28;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	99.10.01.01.08.30;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	99.07.09.13.35.29;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.07.07.10.50.06;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.07.02.21.13.09;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.27.01.14.15;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	99.05.27.01.09.44;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	99.05.26.20.09.30;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	99.05.25.21.42.22;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	99.05.24.01.50.04;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	99.05.23.22.32.09;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.35
log
@No longer direct bug reports to keynote@@research.att.com - it bounces mail.

"fair enough" jmc@@
@
text
@.\" $OpenBSD: keynote.4,v 1.34 2015/09/14 20:06:58 schwarze Exp $
.\"
.\" The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
.\"
.\" This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
.\" in April-May 1998
.\"
.\" Copyright (C) 1998, 1999 by Angelos D. Keromytis.
.\"
.\" Permission to use, copy, and modify this software with or without fee
.\" is hereby granted, provided that this entire notice is included in
.\" all copies of any software which is or includes a copy or
.\" modification of this software.
.\" You may use this code under the GNU public license if you so wish. Please
.\" contribute changes back to the author.
.\"
.\" THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
.\" REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
.\" MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
.\" PURPOSE.
.\"
.Dd $Mdocdate: September 14 2015 $
.Dt KEYNOTE 4
.\" .TH KeyNote 4 local
.Os
.Sh NAME
.Nm keynote
.Nd a trust-management system
.Sh SYNOPSIS
.In sys/types.h
.In regex.h
.In keynote.h
.Fd Link options: -lkeynote -lm -lcrypto
.Sh DESCRIPTION
For more details on
.Nm keynote ,
see RFC 2704.
.Pp
Details on the API, assertion syntax, and command-line tool are given in
the man pages listed at the end of this manual.
.Pp
Trust management, introduced in the PolicyMaker system, is a unified
approach to specifying and interpreting security policies,
credentials, and relationships; it allows direct authorization of
security-critical actions.
A trust-management system provides standard, general-purpose mechanisms
for specifying application security policies and credentials.
Trust-management credentials describe a specific delegation of trust
and subsume the role of public key certificates; unlike traditional
certificates, which bind keys to names, credentials can bind keys directly
to the authorization to perform specific tasks.
.Pp
A trust-management system has five basic components:
.Bl -bullet -offset "xxx"
.It
A language for describing
.Sq actions ,
which are operations with security consequences that are
to be controlled by the system.
.It
A mechanism for identifying
.Sq principals ,
which are entities that can be authorized to perform actions.
.It
A language for specifying application
.Sq policies ,
which govern the actions that principals are authorized to perform.
.It
A language for specifying
.Sq credentials ,
which allow principals to delegate authorization to other principals.
.It
A
.Sq compliance checker ,
which provides a service to applications for determining how an action
requested by principals should be handled, given a policy and a set
of credentials.
.El
.Pp
The trust-management approach has a number of advantages over other
mechanisms for specifying and controlling authorization, especially
when security policy is distributed over a network or is otherwise
decentralized.
.Pp
Trust management unifies the notions of security policy, credentials,
access control, and authorization.
An application that uses a trust-management system can simply ask the
compliance checker whether a requested action should be allowed.
Furthermore, policies and credentials are written in standard languages
that are shared by all trust-managed applications; the security configuration
mechanism for one application carries exactly the same syntactic and semantic
structure as that of another, even when the semantics of the applications
themselves are quite different.
.Pp
Trust-management policies are easy to distribute across networks, helping
to avoid the need for application-specific distributed policy configuration
mechanisms, access control lists, and certificate parsers and interpreters.
.Pp
For a general discussion of the use of trust management in distributed
system security, see the papers listed at the end of this manual.
.Pp
KeyNote is a simple and flexible trust-management system designed to
work well for a variety of large- and small- scale Internet-based
applications.
It provides a single, unified language for both local policies and
credentials.
KeyNote policies and credentials, called
.Sq assertions ,
contain predicates that describe the trusted actions permitted by
the holders of specific public keys.
KeyNote assertions are essentially small, highly-structured programs.
A signed assertion, which can be sent over an untrusted network, is also
called a
.Sq credential assertion .
Credential assertions, which also serve the role of certificates, have
the same syntax as policy assertions but are also signed by the principal
delegating the trust.
.Pp
In KeyNote:
.Bl -bullet -offset "xxx"
.It
Actions are specified as a collection of name-value pairs.
.It
Principal names can be any convenient string and can directly represent
cryptographic public keys.
.It
The same language is used for both policies and credentials.
.It
The policy and credential language is concise, highly expressive, human
readable and writable, and compatible with a variety of storage and
transmission media, including electronic mail.
.It
The compliance checker returns an application-configured
.Sq policy compliance value
that describes how a request should be handled by the application.
Policy compliance values are always positively derived from policy and
credentials, facilitating analysis of KeyNote-based systems.
.It
Compliance checking is efficient enough for high-performance and real-time
applications.
.El
.Pp
In KeyNote, the authority to perform trusted actions is associated
with one or more
.Sq principals .
A principal may be a physical entity, a process in an operating system,
a public key, or any other convenient abstraction.
KeyNote principals are identified by a string called a
.Sq Principal Identifier .
In some cases, a Principal Identifier will contain a cryptographic key
interpreted by the KeyNote system (e.g., for credential signature
verification).
In other cases, Principal Identifiers may have a structure that is opaque
to KeyNote.
.Pp
Principals perform two functions of concern to KeyNote: They request
.Sq actions
and they issue
.Sq assertions .
Actions are any trusted operations that an application places under
KeyNote control.
Assertions delegate the authorization to perform actions to other principals.
.Pp
Actions are described to the KeyNote compliance checker in terms of a
collection of name-value pairs called an
.Sq action attribute set .
The action attribute set is created by the invoking application.
Its structure and format are described in detail elsewhere of this document.
.Pp
KeyNote provides advice to applications on the interpretation of
policy with regard to specific requested actions.
Applications invoke the KeyNote compliance checker by issuing a
.Sq query
containing a proposed action attribute set and identifying the principal(s)
requesting it.
The KeyNote system determines and returns an appropriate
.Sq policy compliance value
from an ordered set of possible responses.
.Pp
The policy compliance value returned from a KeyNote query advises the
application how to process the requested action.
In the simplest case, the compliance value is Boolean (e.g.,
.Qq reject
or
.Qq approve ) .
Assertions can also be written to select from a range of possible
compliance values, when appropriate for the application (e.g.,
.Qq no access ,
.Qq restricted access ,
.Qq full access ) .
Applications can configure the relative ordering (from
.Sq weakest
to
.Sq strongest )
of compliance values at query time.
.Pp
Assertions are the basic programming unit for specifying policy and
delegating authority.
Assertions describe the conditions under which a principal authorizes actions
requested by other principals.
An assertion identifies the principal that made it, which other principals
are being authorized, and the conditions under which the authorization
applies.
The syntax of assertions is given in
.Xr keynote 5 .
.Pp
A special principal, whose identifier is
.Qq POLICY ,
provides the root of trust in KeyNote.
.Qq POLICY
is therefore considered to be authorized to perform any action.
.Pp
Assertions issued by the
.Qq POLICY
principal are called
.Sq policy assertions
and are used to delegate authority to otherwise untrusted principals.
The KeyNote security policy of an application consists of a collection
of policy assertions.
.Pp
When a principal is identified by a public key, it can digitally sign
assertions and distribute them over untrusted networks for use by
other KeyNote compliance checkers.
These signed assertions are also called
.Sq credentials ,
and serve a role similar to that of traditional public key certificates.
Policies and credentials share the same syntax and are evaluated according
to the same semantics.
A principal can therefore convert its policy assertions into credentials
simply by digitally signing them.
.Pp
KeyNote is designed to encourage the creation of human-readable
policies and credentials that are amenable to transmission and storage
over a variety of media.
Its assertion syntax is inspired by the format of RFC822-style message
headers.
A KeyNote assertion contains a sequence of sections, called
.Sq fields ,
each of which specifying one aspect of the assertion's semantics.
Fields start with an identifier at the beginning of a line and continue
until the next field is encountered.
For example:
.Bd -literal
  KeyNote-Version: 2
  Comment: A simple, if contrived, email certificate for user mab
  Local-Constants:  ATT_CA_key = "RSA:acdfa1df1011bbac"
                    mab_key = "DSA:deadbeefcafe001a"
  Authorizer: ATT_CA_key
  Licensees: mab_key
  Conditions: ((app_domain == "email")  # valid for email only
            && (address == "mab@@research.att.com"));
  Signature: "RSA-SHA1:f00f2244"
.Ed
.Pp
For the exact meanings of all the fields, see the RFC reference at the
end of this manual, and/or
.Xr keynote 5 .
.Pp
KeyNote semantics resolve the relationship between an application's
policy and actions requested by other principals, as supported by
credentials.
The KeyNote compliance checker processes the assertions against the action
attribute set to determine the policy compliance value of a requested action.
These semantics are defined later in this document.
.Pp
An important principle in KeyNote's design is
.Sq assertion monotonicity ;
the policy compliance value of an action is always positively derived from
assertions made by trusted principals.
Removing an assertion never results in increasing the compliance value
returned by KeyNote for a given query.
The monotonicity property can simplify the design and analysis of complex
network-based security protocols; network failures that prevent the
transmission of credentials can never result in spurious authorization of
dangerous actions.
.Pp
Trusted actions to be evaluated by KeyNote are described by a collection of
name-value pairs called the
.Sq action attribute set .
Action attributes are the mechanism by which applications communicate
requests to KeyNote and are the primary objects on which KeyNote
assertions operate.
An action attribute set is passed to the KeyNote compliance checker with
each query.
.Pp
Each action attribute consists of a name and a value.
The semantics of the names and values are not interpreted by KeyNote itself;
they vary from application to application and must be agreed upon by the
writers of applications and the writers of the policies and credentials that
will be used by them.
.Pp
Action attribute names and values are represented by arbitrary-length
strings.
KeyNote guarantees support of attribute names and values up
to 2048 characters long.
Applications and assertions should therefore avoid depending on the use of
attributes with names or values longer than 2048 characters.
.Pp
Attribute values are inherently untyped and are represented as
character strings by default.
Attribute values may contain any non-NUL ASCII character.
Numeric attribute
values should first be converted to an ASCII text representation by the
invoking application, e.g., the value 1234.5 would be represented by
the string
.Qq 1234.5 .
.Pp
An
.Aq AttributeID
begins with an alphabetic or underscore character and can be followed
by any number of alphanumerics and underscores.
Attribute names are case sensitive.
.Pp
If an action attribute is not defined its value is considered to be
the empty string.
.Pp
Attribute names beginning with the
.Dq \_
character are reserved for use by the KeyNote runtime environment and
cannot be passed from applications as part of queries.
The following special attribute names are used:
.Bl -tag -width indent
.It _MIN_TRUST
Lowest-order (minimum) compliance value in query.
.It _MAX_TRUST
Highest-order (maximum) compliance value in query.
.It _VALUES
Linearly ordered set of compliance value in query.
.It _ACTION_AUTHORIZERS
Names of principals directly authorizing action in query.
Comma separated.
.El
.Pp
In addition, attributes with names of the form
.Qq \_ Ns Aq N ,
where
.Aq N
is an ASCII-encoded integer, are used by the regular expression matching
mechanism described in
.Xr keynote 5 .
.Pp
By convention, the name of the application domain over which action
attributes should be interpreted is given in the attribute named
.Qq app_domain .
The IANA (or some other suitable authority) will provide a registry
of reserved app_domain names.
The registry will list the names and meanings of each application's
attributes.
.Pp
The app_domain convention helps to ensure that credentials are
interpreted as they were intended.
An attribute with any given name may be used in many different application
domains but might have different meanings in each of them.
However, the use of a global registry is not always required for
small-scale, closed applications; the only requirement is that the
policies and credentials made available to the KeyNote compliance checker
interpret attributes according to the same semantics assumed by the
application that created them.
.Pp
For example, an email application might reserve the app_domain
.Qq RFC822-EMAIL
and might use the attributes named
.Qq address
(the mail address of a message's sender),
.Qq name
(the human name of the message sender), and any
.Qq organization
headers present (the organization name).
The values of these attributes would be derived in the obvious way from
the email message headers.
The public key of the message's signer would be given in the
.Qq _ACTION_AUTHORIZERS
attribute
.Sh QUERY SEMANTICS
The discussion in the following sections assume some familiarity with
assertion syntax.
Please refer to
.Xr keynote 5
for more details on the syntax.
.Sh QUERY PARAMETERS
A KeyNote query has four parameters:
.Bl -bullet -offset "xxx"
.It
The identifier of the principal(s) requesting the action.
.It
The action attribute set describing the action.
.It
The set of compliance values of interest to the application,
ordered from _MIN_TRUST to _MAX_TRUST.
.It
The policy and credential assertions that should be included in
the evaluation.
.El
.Pp
The mechanism for passing these parameters to the KeyNote evaluator is
application dependent.
In particular, an evaluator might provide for some parameters to be passed
explicitly, while others are looked up externally (e.g., credentials might
be looked up in a network- based distribution system), while still others
might be requested from the application as needed by the evaluator,
through a
.Sq callback
mechanism (e.g., for attribute values that represent values from among
a very large namespace).
.Sh ACTION REQUESTER
At least one Principal must be identified in each query as the
.Sq requester
of the action.
Actions may be requested by several principals, each
considered to have individually requested it.
This allows policies that require multiple authorizations, e.g.,
.Sq two person control .
The set of authorizing principals is made available in the special
attribute
.Qq _ACTION_AUTHORIZERS ;
if several principals are authorizers, their identifiers are separated
with commas.
.Sh ORDERED COMPLIANCE VALUE SET
The set of compliance values of interest to an application (and their
relative ranking to one another) is determined by the invoking
application and passed to the KeyNote evaluator as a parameter of the
query.
In many applications, this will be Boolean, e.g., the ordered
sets {FALSE, TRUE} or {REJECT, APPROVE}.
Other applications may require a range of possible values, e.g.,
{No_Access, Limited_Access, Full_Access}.
Note that applications should
include in this set only compliance value names that are actually returned
by the assertions.
.Pp
The lowest-order and highest-order compliance value strings given in
the query are available in the special attributes named
.Qq _MIN_TRUST
and
.Qq _MAX_TRUST ,
respectively.
The complete set of query compliance values is made
available in ascending order (from _MIN_TRUST to _MAX_TRUST) in
the special attribute named
.Qq _VALUES .
Values are separated with commas; applications that use assertions
that make use of the _VALUES attribute should therefore avoid the
use of compliance value strings that themselves contain commas.
.Sh PRINCIPAL IDENTIFIER NORMALIZATION
Principal identifier comparisons among Cryptographic Principal
Identifiers (that represent keys) in the Authorizer and Licensees
fields or in an action's direct authorizers are performed after
normalizing them by conversion to a canonical form.
.Pp
Every cryptographic algorithm used in KeyNote defines a method for
converting keys to their canonical form and that specifies how the
comparison for equality of two keys is performed.
If the algorithm named in the identifier is unknown to KeyNote,
the identifier is treated as opaque.
.Pp
Opaque identifiers are compared as case sensitive strings.
.Pp
Notice that use of opaque identifiers in the Authorizer field requires
that the assertion's integrity be locally trusted (since it cannot be
cryptographically verified by the compliance checker).
.Sh POLICY COMPLIANCE VALUE CALCULATION
The Policy Compliance Value of a query is the Principal Compliance
Value of the principal named
.Qq POLICY .
.Sh PRINCIPAL COMPLIANCE VALUE
The Compliance Value of a principal
.Aq X
is the highest order (maximum) of:
.Bl -bullet -offset "xxx"
.It
the Direct Authorization Value of principal
.Aq X ;
and
.It
the Assertion Compliance Values of all assertions identifying
.Aq X
in the Authorizer field.
.El
.Sh DIRECT AUTHORIZATION VALUE
The Direct Authorization Value of a principal
.Aq X
is _MAX_TRUST if
.Aq X
is listed in the query as an authorizer of the action.
Otherwise, the Direct Authorization Value of
.Aq X
is _MIN_TRUST.
.Sh ASSERTION COMPLIANCE VALUE
The Assertion Compliance Value of an assertion is the lowest order
(minimum) of the assertion's Conditions Compliance Value and its
Licensee Compliance Value.
.Sh CONDITIONS COMPLIANCE VALUE
The Conditions Compliance Value of an assertion is the highest-order
(maximum) value among all successful clauses listed in the conditions
section.
.Pp
If no clause's test succeeds or the Conditions field is empty, an
assertion's Conditions Compliance Value is considered to be the
_MIN_TRUST value, as described previously.
.Pp
If an assertion's Conditions field is missing entirely, its Conditions
Compliance Value is considered to be the _MAX_TRUST value, as defined
previously.
.Pp
The set of successful test clause values is calculated as follows:
.Pp
Recall from the grammar of the Conditions field (see
.Xr keynote 5
for more details) that each clause in the conditions section has two
logical parts: a `test' and an optional
.Sq value ,
which, if present, is separated from the test with the
.Qq \-\>
token.
The test subclause is a
predicate that either succeeds (evaluates to logical
.Sq true )
or fails (evaluates to logical
.Sq false ) .
The value subclause is a string
expression that evaluates to one value from the ordered set of
compliance values given with the query.
If the value subclause is missing, it is considered to be _MAX_TRUST.
That is, the clause
.Pp
.Dl foo==\&"bar\&";
.Pp
is equivalent to
.Pp
.Dl foo==\&"bar\&" -> _MAX_TRUST;
.Pp
If the value component of a clause is present, in the simplest case it
contains a string expression representing a possible compliance value.
For example, consider an assertion with the following Conditions
field:
.Bd -literal
       Conditions:
          @@user_id == 0 -> "full_access";             # clause (1)
          @@user_id < 1000 -> "user_access";           # clause (2)
          @@user_id < 10000 -> "guest_access";         # clause (3)
          user_name == "root" -> "full_access";       # clause (4)
.Ed
.Pp
Here, if the value of the
.Qq user_id
attribute is
.Qq 1073
and the
.Qq user_name
attribute is
.Qq root ,
the possible compliance value set would contain the values
.Qq guest_access
(by clause (3)) and
.Qq full_access
(by clause (4)).
If the ordered set of compliance values
given in the query (in ascending order) is
.Pf { Qo no_access Qc ,
.Qq guest_access ,
.Qq user_access ,
.Qo full_access Qc Ns } ,
the Conditions Compliance Value of the assertion would be
.Qq full_access
(because
.Qq full_access
has a higher-order value than
.Qq guest_access ) .
If the
.Qq user_id
attribute had the value
.Qq 19283
and the
.Qq user_name
attribute had the value
.Qq nobody ,
no clause would succeed and the Conditions Compliance Value would be
.Qq no_access ,
which is the lowest-order possible value (_MIN_TRUST).
.Pp
If a clause lists an explicit value, its value string must be named in
the query ordered compliance value set.
Values not named in the query
compliance value set are considered equivalent to _MIN_TRUST.
.Pp
The value component of a clause can also contain recursively-nested
clauses.
Recursively-nested clauses are evaluated only if their parent test is true.
That is,
.Bd -literal
       a=="b" ->  { b=="c" -> "value1";
                    d=="e"  -> "value2";
                    true -> "value3"; } ;
.Ed
.Pp
is equivalent to
.Bd -literal
       (a=="b") && (b=="c") -> "value1";
       (a=="b") && (d=="e") -> "value2";
       (a=="b") -> "value3";
.Ed
.Pp
Notice that string comparisons are case sensitive.
.Pp
A regular expression comparison
.Po
.Qq ~=
.Pc
is considered true if the left-hand-side string expression matches
the right-hand-side regular expression.
If the POSIX regular expression group matching scheme is
used, the number of groups matched is placed in the temporary meta-
attribute
.Qq _0
(dereferenced as _0), and each match is placed in
sequence in the temporary attributes (_1, _2, ..., _N).
These match-attributes' values are valid only within subsequent references
made within the same clause.
Regular expression evaluation is case sensitive.
.Pp
A runtime error occurring in the evaluation of a test, such as
division by zero or an invalid regular expression, causes the test to
be considered false.
For example:
.Bd -literal
      foo == "bar" -> {
                        @@a == 1/0 -> "oneval";    # subclause 1
                        @@a == 2 -> "anotherval";  # subclause 2
                      };
.Ed
.Pp
Here, subclause 1 triggers a runtime error.
Subclause 1 is therefore false (and has the value _MIN_TRUST).
Subclause 2, however, would be evaluated normally.
.Pp
An invalid
.Aq RegExpr
is considered a runtime error and causes the test
in which it occurs to be considered false.
.Sh LICENSEE COMPLIANCE VALUE
The Licensee Compliance Value of an assertion is calculated by
evaluating the expression in the Licensees field, based on the
Principal Compliance Value of the principals named there.
.Pp
If an assertion's Licensees field is empty, its Licensee Compliance
Value is considered to be _MIN_TRUST.
If an assertion's Licensees field is missing altogether, its Licensee
Compliance Value is considered to be _MAX_TRUST.
.Pp
For each principal named in the Licensees field, its Principal
Compliance Value is substituted for its name.
If no Principal Compliance Value can be found for some named principal,
its name is substituted with the _MIN_TRUST value.
.Pp
The licensees expression (see
.Xr keynote 5 )
is evaluated as follows:
.Bl -bullet -offset "xxx"
.It
A
.Qq (...)
expression has the value of the enclosed subexpression.
.It
A
.Qq \&\&
expression has the lower-order (minimum) of its two subexpression values.
.It
A
.Qq \|\|
expression has the higher-order (maximum) of its two subexpression values.
.It
A
.Qq Ao K Ac Ns -of Ns Pq Aq List
expression has the K-th highest order compliance value listed in
.Aq list .
Values that appear multiple times are counted with multiplicity.
For example, if K = 3 and the orders of the listed compliance values are
(0, 1, 2, 2, 3), the value of the expression is the compliance value of
order 2.
.El
.Pp
For example, consider the following Licensees field:
.Pp
.Dl Licensees: (\&"alice\&" && \&"bob\&") || \&"eve\&"
.Pp
If the Principal Compliance Value is
.Qq yes
for principal
.Qq alice ,
.Qq no
for principal
.Qq bob ,
and
.Qq no
for principal
.Qq eve ,
and
.Qq yes
is higher order than
.Qq no
in the query's Compliance Value Set, then the resulting Licensee Compliance
Value is
.Qq no .
.Pp
Observe that if there are exactly two possible compliance values
(e.g.,
.Qq false
and
.Qq true ) ,
the rules of Licensee Compliance Value resolution reduce exactly to standard
Boolean logic.
.Sh ASSERTION MANAGEMENT
Assertions may be either signed or unsigned.
Only signed assertions should be used as credentials or transmitted or
stored on untrusted media.
Unsigned assertions should be used only to specify policy and for assertions
whose integrity has already been verified as conforming
to local policy by some mechanism external to the KeyNote system
itself (e.g., X.509 certificates converted to KeyNote assertions by a
trusted conversion program).
.Pp
Implementations that permit signed credentials to be verified by the
KeyNote compliance checker generally provide two
.Sq channels
through which applications can make assertions available.
Unsigned, locally-trusted assertions are provided over a
.Sq trusted
interface, while signed credentials are provided over an
.Sq untrusted
interface.
The KeyNote compliance checker verifies correct signatures for all
assertions submitted over the untrusted interface.
The integrity of KeyNote evaluation requires that only assertions trusted
as reflecting local policy are submitted to KeyNote via the trusted interface.
.Pp
Note that applications that use KeyNote exclusively as a local policy
specification mechanism need use only trusted assertions.
Other applications might need only a small number of infrequently changed
trusted assertions to
.Sq bootstrap
a policy whose details are specified in signed credentials issued
by others and submitted over the untrusted interface.
.Sh FILES
.Bl -tag -width libkeynote.a -compact
.It Pa keynote.h
.It Pa libkeynote.a
.El
.Sh EXAMPLES
A policy that delegates authority for the
.Qq SPEND
application domain to RSA key dab212 when the amount given in the
.Qq dollars
attribute is less than 10000.
.Bd -literal
        Authorizer: "POLICY"
        Licensees: "RSA:dab212"  # the CFO's key
        Conditions: (app_domain=="SPEND") && (@@dollars < 10000);
.Ed
.Pp
RSA key dab212 delegates authorization to any two signers, from a
list, one of which must be DSA key feed1234 in the
.Qq SPEND
application when @@dollars < 7500.
If the amount in @@dollars is 2500 or greater, the request is approved
but logged.
.Bd -literal
        KeyNote-Version: 2
        Comment: This credential specifies a spending policy
        Authorizer: "RSA:dab212"        # the CFO
        Licensees: "DSA:feed1234" &&    # The vice president
                       ("RSA:abc123" || # middle manager #1
                        "DSA:bcd987" || # middle manager #2
                        "DSA:cde333" || # middle manager #3
                        "DSA:def975" || # middle manager #4
                        "DSA:978add")   # middle manager #5
        Conditions: (app_domain=="SPEND")  # note nested clauses
                      -> { (@@(dollars) < 2500)
                             -> _MAX_TRUST;
                           (@@(dollars) < 7500)
                             -> "ApproveAndLog";
                         };
        Signature: "RSA-SHA1:9867a1"
.Ed
.Pp
According to this policy, any two signers from the list of managers
will do if @@(dollars) < 1000:
.Bd -literal
        KeyNote-Version: 2
        Authorizer: "POLICY"
        Licensees: 2-of("DSA:feed1234", # The VP
                        "RSA:abc123",   # Middle management clones
                        "DSA:bcd987",
                        "DSA:cde333",
                        "DSA:def975",
                        "DSA:978add")
        Conditions: (app_domain=="SPEND") &&
                    (@@(dollars) < 1000);
.Ed
.Pp
A credential from dab212 with a similar policy, but only one signer is
required if @@(dollars) < 500.
A log entry is made if the amount is at least 100.
.Bd -literal
        KeyNote-Version: 2
        Comment: This one credential is equivalent to six separate
                 credentials, one for each VP and middle manager.
                 Individually, they can spend up to $500, but if
                 it's $100 or more, we log it.
        Authorizer: "RSA:dab212"      # From the CFO
        Licensees: "DSA:feed1234" ||  # The VP
                   "RSA:abc123" ||    # The middle management clones
                   "DSA:bcd987" ||
                   "DSA:cde333" ||
                   "DSA:def975" ||
                   "DSA:978add"
        Conditions: (app_domain="SPEND")  # nested clauses
                      -> { (@@(dollars) < 100) -> _MAX_TRUST;
                           (@@(dollars) < 500) -> "ApproveAndLog";
                         };
        Signature: "RSA-SHA1:186123"
.Ed
.Pp
Assume a query in which the ordered set of Compliance Values is
.Pf { Qo Reject Qc ,
.Qq ApproveAndLog ,
.Qo Approve Qc Ns } .
Under policies E and G, and
credentials F and H, the Policy Compliance Value is
.Qq Approve
(_MAX_TRUST) when:
.Bd -literal
        _ACTION_AUTHORIZERS = "DSA:978add"
        app_domain = "SPEND"
        dollars = "45"
        unmentioned_attribute = "whatever"
    and
        _ACTION_AUTHORIZERS = "RSA:abc123,DSA:cde333"
        app_domain = "SPEND"
        dollars = "550"
.Ed
.Pp
The following return "ApproveAndLog":
.Bd -literal
        _ACTION_AUTHORIZERS = "DSA:feed1234,DSA:cde333"
        app_domain = "SPEND"
        dollars = "5500"
    and
        _ACTION_AUTHORIZERS = "DSA:cde333"
        app_domain = "SPEND"
        dollars = "150"
.Ed
.Pp
However, the following return "Reject" (_MIN_TRUST):
.Bd -literal
        _ACTION_AUTHORIZERS = "DSA:def975"
        app_domain = "SPEND"
        dollars = "550"
    and
        _ACTION_AUTHORIZERS = "DSA:cde333,DSA:978add"
        app_domain = "SPEND"
        dollars = "5500"
.Ed
.Sh SEE ALSO
.Xr keynote 1 ,
.Xr keynote 3 ,
.Xr keynote 5
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A J. Lacy
.%D 1996
.%J IEEE Symposium on Security and Privacy
.%T Decentralized Trust Management
.Re
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A M. Strauss
.%D 1998
.%J Financial Crypto Conference
.%T Compliance-Checking in the PolicyMaker Trust Management System
.Re
.Sh STANDARDS
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A J. Ioannidis
.%A A. Keromytis
.%D September 1999
.%R RFC 2704
.%T The KeyNote Trust-Management System Version 2
.Re
.Sh AUTHORS
.An Angelos D. Keromytis Aq Mt angelos@@cs.columbia.edu
.Sh WEB PAGE
.Lk http://www1.cs.columbia.edu/~angelos/keynote.html
@


1.34
log
@Avoid .Ns right after .Pf, it's pointless.
In some cases, do additional cleanup in the immediate vicinity.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.33 2015/09/10 17:55:21 schwarze Exp $
d23 1
a23 1
.Dd $Mdocdate: September 10 2015 $
a897 4
.Sh BUGS
None that we know of.
If you find any, please report them at
.Aq Mt keynote@@research.att.com .
@


1.33
log
@use .In rather than .Fd #include
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.32 2013/07/16 15:21:11 schwarze Exp $
d23 1
a23 1
.Dd $Mdocdate: July 16 2013 $
d560 1
a560 1
.Pf { Ns Qo no_access Qc ,
d825 1
a825 1
.Pf { Ns Qo Reject Qc ,
@


1.32
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.31 2013/07/16 10:44:51 jmc Exp $
d31 3
a33 3
.Fd #include <sys/types.h>
.Fd #include <regex.h>
.Fd #include <keynote.h>
@


1.31
log
@more macro simplification; from Jan Stary
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.30 2012/09/27 11:31:58 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: September 27 2012 $
d895 1
a895 1
.An Angelos D. Keromytis Aq angelos@@cs.columbia.edu
d901 1
a901 1
.Aq keynote@@research.att.com .
@


1.30
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.29 2012/08/15 18:56:28 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: August 15 2012 $
d674 1
a674 5
.Qo
.Ao K
.Ac Ns -of Ns Po Aq List
.Pc
.Qc
@


1.29
log
@use Lk for links;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.28 2010/12/22 16:40:38 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate: December 22 2010 $
d624 2
a625 1
be considered false. For example:
d682 1
a682 1
 For example, if K = 3 and the orders of the listed compliance values are
d875 4
a878 4
.%A A. D. Keromytis
.%T "The KeyNote Trust-Management System, Version 2"
.%N RFC 2704
.%D 1999
d883 4
a886 4
.%A J. Lacy
.%T Decentralized Trust Management
.%J IEEE Symposium on Security and Privacy
.%D 1996
d888 1
d892 5
a896 4
.%A M. Strauss
.%T Compliance-Checking in the PolicyMaker Trust Management System
.%J Financial Crypto Conference
.%D 1998
d905 1
a905 1
.Dl Aq keynote@@research.att.com
@


1.28
log
@seemingly the "Decentralized Trust Management" paper comes from the
IEEE Symposium on Security and Privacy, not the IEEE Conference on
Privacy and Security;

from Lawrence Teo
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.27 2007/08/03 08:09:37 hshoexer Exp $
d23 1
a23 1
.Dd $Mdocdate: May 31 2007 $
d898 1
a898 1
.Pa http://www1.cs.columbia.edu/~angelos/keynote.html
@


1.27
log
@Update URL of the keynote webpage.  While there, update angelos' email
address.

Noticed by qgiovanni@@gmail.co, thanks!

ok jmc@@ (URL snippet), angelos@@
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.26 2007/05/31 19:19:35 jmc Exp $
d884 1
a884 1
.%J IEEE Conference on Privacy and Security
@


1.26
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.25 2003/07/08 11:02:23 jmc Exp $
d23 1
a23 1
.Dd $Mdocdate$
d896 1
a896 1
.An Angelos D. Keromytis Aq angelos@@dsl.cis.upenn.edu
d898 1
a898 1
.Pa http://www.cis.upenn.edu/~keynote
@


1.25
log
@- fix some lists/displays
- .Dl for one-line displays
- simplify macros
- .An/.Aq for AUTHORS
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.24 2003/06/02 09:47:15 jmc Exp $
d23 1
a23 1
.Dd May 22, 1999
@


1.24
log
@section reorder;
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.23 2003/03/20 07:26:33 jmc Exp $
d526 2
a527 3
.Bd -literal
       foo=="bar";
.Ed
d530 2
a531 3
.Bd -literal
       foo=="bar" -> _MAX_TRUST;
.Ed
d560 1
a560 2
.Pf { Ns Qo no_access
.Qc ,
d563 1
a563 2
.Qo full_access
.No Qc Ns },
d675 1
a675 1
.No Ac Ns -of Ns Po Aq List
d687 2
a688 3
.Bd -literal
        Licensees: ("alice" && "bob") || "eve"
.Ed
d828 1
a828 2
.Pf { Ns Qo Reject
.Qc ,
d830 1
a830 2
.Qo Approve
.No Qc Ns }.
d896 1
a896 2
Angelos D. Keromytis
.Aq angelos@@dsl.cis.upenn.edu
d902 1
a902 3
.Bd -literal -offset indent -compact
keynote@@research.att.com
.Ed
@


1.23
log
@typos;

ok millert@@
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.22 2002/05/01 08:03:30 mpech Exp $
d752 5
a873 5
.Sh FILES
.Bl -tag -width libkeynote.a -compact
.It Pa keynote.h
.It Pa libkeynote.a
.El
@


1.22
log
@o) start new sentence on a new line;
o) always close .Bl tags;
o) fix usage of .Xr;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.21 2002/04/30 16:31:42 mpech Exp $
d205 1
a205 1
The syntax of assertions is given
d390 1
a390 1
ordered from _MIN_TRUST to _MAX_TRUST
d489 1
a489 1
.Sh ASSERTION COMPLIANC VALUE
@


1.21
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.20 2001/09/03 20:14:51 deraadt Exp $
d242 2
a243 1
until the next field is encountered. For example:
d302 2
a303 1
Attribute values may contain any non-NUL ASCII character. Numeric attribute
d331 2
a332 2
Names of principals directly authorizing action in query. Comma
separated.
d377 2
a378 1
assertion syntax. Please refer to
d409 2
a410 1
of the action. Actions may be requested by several principals, each
d427 2
a428 1
{No_Access, Limited_Access, Full_Access}. Note that applications should
d437 2
a438 1
respectively. The complete set of query compliance values is made
d479 1
a479 1
.fi
d559 2
a560 1
(by clause (4)). If the ordered set of compliance values
@


1.20
log
@with or without fee; received mail permitting this change from angelos
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.19 2001/08/16 17:58:06 mpech Exp $
d57 1
a57 1
A language for describing 
d62 1
a62 1
A mechanism for identifying 
d66 1
a66 1
A language for specifying application 
d74 1
a74 1
A 
d114 1
a114 1
called a 
d127 1
a127 1
.It 
d136 1
a136 1
that describes how a request should be handled by the application. 
d145 1
a145 1
with one or more 
d155 1
a155 1
to KeyNote. 
d177 1
a177 1
The KeyNote system determines and returns an appropriate 
d192 1
a192 1
Applications can configure the relative ordering (from 
d404 1
a404 1
At least one Principal must be identified in each query as the 
d447 1
a447 1
comparison for equality of two keys is performed. 
d545 1
a545 1
and the 
@


1.19
log
@o) -mdoc syntax improvements;
o) typos;
o) "start new line" issues;
o) improve enclosure/quoting macros;

millert@@ help and ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.18 2001/08/06 10:42:26 mpech Exp $
d10 1
a10 1
.\" Permission to use, copy, and modify this software without fee
@


1.18
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.17 2000/09/17 02:11:12 aaron Exp $
d37 1
a37 1
.Nm KeyNote ,
d46 7
a52 7
security-critical actions. A trust-management system provides
standard, general-purpose mechanisms for specifying application
security policies and credentials. Trust-management credentials
describe a specific delegation of trust and subsume the role of public
key certificates; unlike traditional certificates, which bind keys to
names, credentials can bind keys directly to the authorization to
perform specific tasks.
d55 26
a80 19

.nf
* A language for describing `actions,' which are operations with
  security consequences that are to be controlled by the system.

* A mechanism for identifying `principals,' which are entities that
  can be authorized to perform actions.

* A language for specifying application `policies,' which govern the
  actions that principals are authorized to perform.

* A language for specifying `credentials,' which allow principals
  to delegate authorization to other principals.

* A `compliance checker,' which provides a service to applications
  for determining how an action requested by principals should be
  handled, given a policy and a set of credentials.
.fi

d87 12
a98 13
access control, and authorization. An application that uses a
trust-management system can simply ask the compliance checker whether
a requested action should be allowed. Furthermore, policies and
credentials are written in standard languages that are shared by all
trust-managed applications; the security configuration mechanism for
one application carries exactly the same syntactic and semantic
structure as that of another, even when the semantics of the
applications themselves are quite different.
.Pp
Trust-management policies are easy to distribute across networks,
helping to avoid the need for application-specific distributed policy
configuration mechanisms, access control lists, and certificate
parsers and interpreters.
d105 14
a118 9
applications. It provides a single, unified language for both local
policies and credentials. KeyNote policies and credentials, called
`assertions,' contain predicates that describe the trusted actions
permitted by the holders of specific public keys. KeyNote assertions
are essentially small, highly-structured programs. A signed assertion,
which can be sent over an untrusted network, is also called a
`credential assertion.' Credential assertions, which also serve the
role of certificates, have the same syntax as policy assertions but
are also signed by the principal delegating the trust.
d121 23
a143 23

.nf
* Actions are specified as a collection of name-value pairs.

* Principal names can be any convenient string and can directly
  represent cryptographic public keys.

* The same language is used for both policies and credentials.

* The policy and credential language is concise, highly expressive,
  human readable and writable, and compatible with a variety of
  storage and transmission media, including electronic mail.

* The compliance checker returns an application-configured `policy
  compliance value' that describes how a request should be handled
  by the application.  Policy compliance values are always
  positively derived from policy and credentials, facilitating
  analysis of KeyNote-based systems.

* Compliance checking is efficient enough for high-performance and
  real-time applications.
.fi

d145 11
a155 7
with one or more `principals.' A principal may be a physical entity, a
process in an operating system, a public key, or any other convenient
abstraction. KeyNote principals are identified by a string called a
`Principal Identifier.' In some cases, a Principal Identifier will
contain a cryptographic key interpreted by the KeyNote system (e.g.,
for credential signature verification). In other cases, Principal
Identifiers may have a structure that is opaque to KeyNote.
d158 6
a163 4
`actions' and they issue `assertions.' Actions are any trusted
operations that an application places under KeyNote control.
Assertions delegate the authorization to perform actions to other
principals.
d166 4
a169 4
collection of name-value pairs called an `action attribute set.' The
action attribute set is created by the invoking application. Its
structure and format are described in detail elsewhere of this
document.
d172 8
a179 6
policy with regard to specific requested actions. Applications invoke
the KeyNote compliance checker by issuing a `query' containing a
proposed action attribute set and identifying the principal(s)
requesting it. The KeyNote system determines and returns an
appropriate `policy compliance value' from an ordered set of possible
responses.
d182 5
a186 2
application how to process the requested action. In the simplest case,
the compliance value is Boolean (e.g., "reject" or "approve").
d188 9
a196 4
compliance values, when appropriate for the application (e.g., "no
access", "restricted access", "full access"). Applications can
configure the relative ordering (from `weakest' to `strongest') of
compliance values at query time.
d199 7
a205 5
delegating authority. Assertions describe the conditions under which a
principal authorizes actions requested by other principals. An
assertion identifies the principal that made it, which other
principals are being authorized, and the conditions under which the
authorization applies. The syntax of assertions is given
d208 13
a220 8
A special principal, whose identifier is "POLICY", provides the root
of trust in KeyNote. "POLICY" is therefore considered to be authorized
to perform any action.
.Pp
Assertions issued by the "POLICY" principal are called `policy
assertions' and are used to delegate authority to otherwise untrusted
principals. The KeyNote security policy of an application consists of
a collection of policy assertions.
d224 8
a231 6
other KeyNote compliance checkers. These signed assertions are also
called `credentials,' and serve a role similar to that of traditional
public key certificates. Policies and credentials share the same
syntax and are evaluated according to the same semantics. A principal
can therefore convert its policy assertions into credentials simply by
digitally signing them.
d235 9
a243 8
over a variety of media. Its assertion syntax is inspired by the
format of RFC822-style message headers. A KeyNote assertion contains a
sequence of sections, called `fields,' each of which specifying one
aspect of the assertion's semantics. Fields start with an identifier
at the beginning of a line and continue until the next field is
encountered. For example:

.nf
d253 2
a254 2
.fi

d261 9
a269 8
credentials. The KeyNote compliance checker processes the assertions
against the action attribute set to determine the policy compliance
value of a requested action. These semantics are defined later in this
document.
.Pp
An important principle in KeyNote's design is `assertion
monotonicity'; the policy compliance value of an action is always
positively derived from assertions made by trusted principals.
d271 9
a279 8
returned by KeyNote for a given query. The monotonicity property can
simplify the design and analysis of complex network-based security
protocols; network failures that prevent the transmission of
credentials can never result in spurious authorization of dangerous
actions.
.Pp
Trusted actions to be evaluated by KeyNote are described by a
collection of name-value pairs called the `action attribute set'.
d282 8
a289 7
assertions operate. An action attribute set is passed to the KeyNote
compliance checker with each query.
.Pp
Each action attribute consists of a name and a value. The semantics of
the names and values are not interpreted by KeyNote itself; they vary
from application to application and must be agreed upon by the writers
of applications and the writers of the policies and credentials that
d293 5
a297 4
strings. KeyNote guarantees support of attribute names and values up
to 2048 characters long. Applications and assertions should therefore
avoid depending on the use of attributes with names or values
longer than 2048 characters.
d300 12
a311 8
character strings by default. Attribute values may contain any non-
NUL ASCII character. Numeric attribute values should first be
converted to an ASCII text representation by the invoking application,
e.g., the value 1234.5 would be represented by the string "1234.5".
.Pp
An <AttributeID> begins with an alphabetic or underscore character and
can be followed by any number of alphanumerics and underscores.
Attribute names are case-sensitive.
d316 5
a320 5
Attribute names beginning with the "_" character are reserved for use
by the KeyNote runtime environment and cannot be passed from
applications as part of queries. The following special attribute names
are used:

d333 5
a337 2
In addition, attributes with names of the form "_<N>", where <N> is an
ASCII-encoded integer, are used by the regular expression matching
d343 5
a347 3
"app_domain". The IANA (or some other suitable authority) will provide
a registry of reserved app_domain names. The registry will list the
names and meanings of each application's attributes.
d350 8
a357 8
interpreted as they were intended. An attribute with any given name
may be used in many different application domains but might have
different meanings in each of them. However, the use of a global
registry is not always required for small-scale, closed applications;
the only requirement is that the policies and credentials made
available to the KeyNote compliance checker interpret attributes
according to the same semantics assumed by the application that
created them.
d360 13
a372 6
"RFC822-EMAIL" and might use the attributes named "address" (the mail
address of a message's sender), "name" (the human name of the message
sender), and any "organization" headers present (the organization
name). The values of these attributes would be derived in the obvious
way from the email message headers. The public key of the message's
signer would be given in the "_ACTION_AUTHORIZERS" attribute.
d380 13
a392 13

.nf
* The identifier of the principal(s) requesting the action.

* The action attribute set describing the action.

* The set of compliance values of interest to the application,
  ordered from _MIN_TRUST to _MAX_TRUST

* The policy and credential assertions that should be included in
  the evaluation.
.fi

d394 9
a402 7
application dependent. In particular, an evaluator might provide for
some parameters to be passed explicitly, while others are looked up
externally (e.g., credentials might be looked up in a network- based
distribution system), while still others might be requested from the
application as needed by the evaluator, through a `callback' mechanism
(e.g., for attribute values that represent values from among a very
large namespace).
d404 11
a414 7
At least one Principal must be identified in each query as the
`requester' of the action. Actions may be requested by several
principals, each considered to have individually requested it. This
allows policies that require multiple authorizations, e.g., `two
person control'. The set of authorizing principals is made available
in the special attribute "_ACTION_AUTHORIZERS"; if several principals
are authorizers, their identifiers are separated with commas.
d419 7
a425 5
query. In many applications, this will be Boolean, e.g., the ordered
sets {FALSE, TRUE} or {REJECT, APPROVE}. Other applications may
require a range of possible values, e.g., {No_Access, Limited_Access,
Full_Access}. Note that applications should include in this set only
compliance value names that are actually returned by the assertions.
d428 11
a438 7
the query are available in the special attributes named "_MIN_TRUST"
and "_MAX_TRUST", respectively. The complete set of query compliance
values is made available in ascending order (from _MIN_TRUST to
_MAX_TRUST) in the special attribute named "_VALUES". Values are
separated with commas; applications that use assertions that make use
of the _VALUES attribute should therefore avoid the use of compliance
value strings that themselves contain commas.
d447 3
a449 3
comparison for equality of two keys is performed. If the algorithm
named in the identifier is unknown to KeyNote, the identifier is
treated as opaque.
d451 1
a451 1
Opaque identifiers are compared as case-sensitive strings.
d458 2
a459 1
Value of the principal named "POLICY".
d461 12
a472 8
The Compliance Value of a principal <X> is the highest order (maximum)
of:

.nf
- the Direct Authorization Value of principal <X>; and

- the Assertion Compliance Values of all assertions identifying
  <X> in the Authorizer field.
d475 8
a482 3
The Direct Authorization Value of a principal <X> is _MAX_TRUST if <X>
is listed in the query as an authorizer of the action. Otherwise, the
Direct Authorization Value of <X> is _MIN_TRUST.
d505 11
a515 4
logical parts: a `test' and an optional `value', which, if present, is
separated from the test with the "->" token. The test subclause is a
predicate that either succeeds (evaluates to logical `true') or fails
(evaluates to logical `false'). The value subclause is a string
d517 3
a519 2
compliance values given with the query. If the value subclause is
missing, it is considered to be _MAX_TRUST. That is, the clause
d523 1
a523 1

d525 1
a525 1
.Bd literal
d528 1
a528 1

d540 38
a577 13

Here, if the value of the "user_id" attribute is "1073" and the
"user_name" attribute is "root", the possible compliance value set
would contain the values "guest_access" (by clause (3)) and
"full_access" (by clause (4)). If the ordered set of compliance values
given in the query (in ascending order) is {"no_access",
"guest_access", "user_access", "full_access"}, the Conditions
Compliance Value of the assertion would be "full_access" (because
"full_access" has a higher-order value than "guest_access"). If the
"user_id" attribute had the value "19283" and the "user_name"
attribute had the value "nobody", no clause would succeed and the
Conditions Compliance Value would be "no_access", which is the
lowest-order possible value (_MIN_TRUST).
d580 2
a581 1
the query ordered compliance value set. Values not named in the query
d585 3
a587 2
clauses. Recursively-nested clauses are evaluated only if their parent
test is true. That is,
d593 1
a593 1

a599 2

Notice that string comparisons are case-sensitive.
d601 9
a609 3
A regular expression comparison ("~=") is considered true if the
left-hand-side string expression matches the right-hand-side regular
expression. If the POSIX regular expression group matching scheme is
d611 7
a617 5
attribute "_0" (dereferenced as _0), and each match is placed in
sequence in the temporary attributes (_1, _2, ..., _N). These
match-attributes' values are valid only within subsequent references
made within the same clause. Regular expression evaluation is case-
sensitive.
a627 4

Here, subclause 1 triggers a runtime error. Subclause 1 is therefore
false (and has the value _MIN_TRUST). Subclause 2, however, would be
evaluated normally.
d629 7
a635 1
An invalid <RegExpr> is considered a runtime error and causes the test
d643 3
a645 3
Value is considered to be _MIN_TRUST. If an assertion's Licensees
field is missing altogether, its Licensee Compliance Value is
considered to be _MAX_TRUST.
d648 3
a650 3
Compliance Value is substituted for its name. If no Principal
Compliance Value can be found for some named principal, its name is
substituted with the _MIN_TRUST value.
d655 28
a682 17

.nf
* A "(...)" expression has the value of the enclosed subexpression.

* A "&&" expression has the lower-order (minimum) of its two
  subexpression values.

* A "||" expression has the higher-order (maximum) of its two
  subexpression values.

* A "<K>-of(<List>)" expression has the K-th highest order
  compliance value listed in <list>.  Values that appear multiple
  times are counted with multiplicity.  For example, if K = 3 and
  the orders of the listed compliance values are (0, 1, 2, 2, 3),
  the value of the expression is the compliance value of order 2.
.fi

d687 19
a705 5

If the Principal Compliance Value is "yes" for principal "alice", "no"
for principal "bob", and "no" for principal "eve", and "yes" is higher
order than "no" in the query's Compliance Value Set, then the
resulting Licensee Compliance Value is "no".
d708 6
a713 2
(e.g., "false" and "true"), the rules of Licensee Compliance Value
resolution reduce exactly to standard Boolean logic.
d715 5
a719 4
Assertions may be either signed or unsigned. Only signed assertions
should be used as credentials or transmitted or stored on untrusted
media. Unsigned assertions should be used only to specify policy and
for assertions whose integrity has already been verified as conforming
d725 8
a732 4
KeyNote compliance checker generally provide two `channels' through
which applications can make assertions available. Unsigned,
locally-trusted assertions are provided over a `trusted' interface,
while signed credentials are provided over an `untrusted' interface.
d734 3
a736 3
assertions submitted over the untrusted interface. The integrity of
KeyNote evaluation requires that only assertions trusted as reflecting
local policy are submitted to KeyNote via the trusted interface.
d739 6
a744 5
specification mechanism need use only trusted assertions. Other
applications might need only a small number of infrequently changed
trusted assertions to `bootstrap' a policy whose details are specified
in signed credentials issued by others and submitted over the
untrusted interface.
d746 5
a750 3
A policy that delegates authority for the "SPEND" application domain
to RSA key dab212 when the amount given in the "dollars" attribute is
less than 10000.
d756 1
a756 1

d758 5
a762 3
list, one of which must be DSA key feed1234 in the "SPEND" application
when @@dollars < 7500. If the amount in @@dollars is 2500 or greater,
the request is approved but logged.
d781 1
a781 1

d796 1
a796 1

d798 2
a799 2
required if @@(dollars) < 500. A log entry is made if the amount is at
least 100.
d819 1
a819 1

d821 8
a828 2
{"Reject", "ApproveAndLog", "Approve"}. Under policies E and G, and
credentials F and H, the Policy Compliance Value is "Approve"
d840 1
a840 1

d851 1
a851 1

d863 4
a866 2
.Fd keynote.h
.Fd libkeynote.a
d871 24
a894 11
.Bl -tag -width "AAAAAAA"
.It ``The KeyNote Trust-Management System, Version 2''
M. Blaze, J. Feigenbaum, A. D. Keromytis,
Internet Drafts, RFC 2704.
.It ``Decentralized Trust Management''
M. Blaze, J. Feigenbaum, J. Lacy,
1996 IEEE Conference on Privacy and Security
.It ``Compliance-Checking in the PolicyMaker Trust Management System''
M. Blaze, J. Feigenbaum, M. Strauss,
1998 Financial Crypto Conference
.El
d896 2
a897 1
Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
d899 1
a899 1
http://www.cis.upenn.edu/~keynote
@


1.17
log
@Arguments to .Dt macros should be all-caps.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.16 2000/06/13 19:16:16 angelos Exp $
a315 1
.Pp
a320 1
.Pp
a343 1
.Pp
a351 1
.Pp
a369 1
.Pp
a386 2
.Pp

a389 1
.Pp
a403 1
.Pp
a407 1
.Pp
a514 1
.Pp
a562 1
.Pp
a587 1
.Pp
a694 1
.Pp
d713 1
a713 1
.Sh AUTHOR
@


1.16
log
@Fix some compile warnings.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d24 1
a24 1
.Dt keynote 4
@


1.15
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.14 2000/01/10 08:17:03 deraadt Exp $
@


1.14
log
@the the
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.13 1999/10/11 04:45:25 angelos Exp $
d9 1
a9 1
.\"      
d717 1
a717 1
.It ``The KeyNote Trust-Management System, Version 2'' 
d720 1
a720 1
.It ``Decentralized Trust Management'' 
@


1.13
log
@Fix language to be closer to reality.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.12 1999/10/11 04:39:01 angelos Exp $
d255 1
a255 1
avoid depending on the the use of attributes with names or values
@


1.12
log
@Lower-case the name.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.11 1999/10/11 00:08:28 angelos Exp $
d254 3
a256 7
to 2048 characters long. The handling of longer attribute names or
values is not specified and is KeyNote-implementation-dependent.
Applications and assertions should therefore avoid depending on the
the use of attributes with names or values longer than 2048
characters. The length of an attribute value is represented by an
implementation-specific mechanism (e.g., NUL-terminated strings, an
explicit length field, etc.).
@


1.11
log
@Greatly expand keynote.4 to include query semantics, cross references.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d24 1
a24 1
.Dt KeyNote 4
d28 1
a28 1
.Nm KeyNote
@


1.10
log
@Update for version 2.0
@
text
@d31 2
d40 2
a41 2
Details on the API and command-line tool are given in the
man pages listed at the end of this manual.
d53 1
a53 1

d78 1
a78 1

d88 1
a88 1

d93 1
a93 1

d96 1
a96 1

d108 1
a108 1

d141 1
a141 1

d147 1
a147 1

d151 1
a151 1
structure and format are described in detail in Section 3 of this
d153 1
a153 1

d161 1
a161 1

d170 1
a170 1

d176 3
a178 2
authorization applies. The syntax of assertions is given in Section 4.

d182 1
a182 1

d187 1
a187 1

d196 1
a196 1

d219 3
a221 2
end of this manual.

d226 3
a228 2
value of a requested action. These semantics are defined in Section 5.

d239 474
d718 2
a719 1
.Xr keynote 3
@


1.9
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.8 1999/07/07 10:50:06 aaron Exp $
d9 1
a9 1
.\"
d34 4
d233 1
d241 1
a241 1
.It ``The KeyNote Trust-Management System''
d243 2
a244 2
Internet Drafts, draft-ietf-trustmgt-keynote-00.txt
.It ``Decentralized Trust Management''
@


1.8
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.7 1999/07/02 21:13:09 aaron Exp $
d9 1
a9 1
.\"      
d13 1
a13 1
.\" modification of this software. 
d236 1
a236 1
.It ``The KeyNote Trust-Management System'' 
d239 1
a239 1
.It ``Decentralized Trust Management'' 
@


1.7
log
@remove redundant .Pp macros
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.6 1999/05/27 01:14:15 angelos Exp $
d25 1
a26 1
.\" .TH KeyNote 4 local
@


1.6
log
@Fix some typos.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.5 1999/05/27 01:09:44 angelos Exp $
a228 1
.Pp
@


1.5
log
@Single manpage for command-line tool.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.4 1999/05/26 20:09:30 angelos Exp $
d34 1
a34 1
Details on the API and the various tools are given in the
@


1.4
log
@Typos and proper form (deraadt@@)
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.3 1999/05/25 21:42:22 angelos Exp $
d235 1
a235 5
.Xr keynote 3 ,
.Xr keynote-keygen 1 , 
.Xr keynote-sign 1 , 
.Xr keynote-sigver 1 ,
.Xr keynote-verify 1
@


1.3
log
@Export kn_keycompare() in the API, update the spec and man pages.

Note that the *.1 manpages will all be rolled into a single one soon.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.2 1999/05/24 01:50:04 angelos Exp $
d24 1
a24 1
.Dt KeyNote 3
d29 1
a29 1
.Nd A Trust-Management System
@


1.2
log
@Update man pages to reflect new usage method.
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.1 1999/05/23 22:32:09 angelos Exp $
d34 1
a34 8
For more details on
.Nm KeyNote ,
see the web page 
.Bd -literal -offset indent
 http://www.cis.upenn.edu/~keynote
.Ed
.Pp
Additional details on the API and the various tools are given in the
@


1.1
log
@Work with "make obj;make"
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.4,v 1.1.1.1 1999/05/23 22:11:08 angelos Exp $
d241 1
@

