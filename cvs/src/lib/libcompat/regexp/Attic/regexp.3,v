head	1.14;
access;
symbols
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.10.0.14
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.10
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.12
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.14
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.12
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.10
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.14
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.12
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.10
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.8
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.14
date	2013.12.04.22.58.24;	author deraadt;	state dead;
branches;
next	1.13;

1.13
date	2013.06.05.03.44.50;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.20.07.41.17;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2010.09.19.22.22.13;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.31.19.19.34;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.10.19.55.29;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.40;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.09.38.57;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.14.21.31.45;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.05.16.19.55.50;	author alex;	state Exp;
branches;
next	1.4;

1.4
date	99.05.12.13.26.48;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.03.11.01.35.03;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	97.07.17.07.39.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@express final disapproval of the interfaces in libcompat, such as
them ftime(), gtty(), stty(), re_comp(), cuserid() and others.
Discussion and ongoing work to fix the ports tree from many, especially
naddy.
ok naddy
[There is a bit more cleanup possible after that, but this is considered
the current safe step]
@
text
@.\"	$OpenBSD: regexp.3,v 1.13 2013/06/05 03:44:50 tedu Exp $
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)regexp.3	8.1 (Berkeley) 6/4/93
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt REGEXP 3
.Os
.Sh NAME
.Nm regexp
.Nd obsolete regular expression routines
.Sh SYNOPSIS
.In regexp.h
.Ft regexp *
.Fn regcomp "const char *exp"
.Ft int
.Fn regexec "const regexp *prog" "const char *string"
.Ft void
.Fn regsub "const regexp *prog" "const char *source" "char *dest"
.Sh DESCRIPTION
.Bf -symbolic
This interface is made obsolete by
.Xr regex 3 .
It is available from the compatibility library, libcompat.
.Ef
.Pp
The
.Fn regcomp ,
.Fn regexec ,
.Fn regsub ,
and
.Fn regerror
functions
implement
.Xr egrep 1 Ns -style
regular expressions and supporting facilities.
.Pp
The
.Fn regcomp
function
compiles a regular expression into a structure of type
.Xr regexp ,
and returns a pointer to it.
The space has been allocated using
.Xr malloc 3
and may be released by
.Xr free 3 .
.Pp
The
.Fn regexec
function
matches a
.Dv NUL Ns -terminated
.Fa string
against the compiled regular expression
in
.Fa prog .
It returns 1 for success and 0 for failure, and adjusts the contents of
.Fa prog Ns 's
.Em startp
and
.Em endp
(see below) accordingly.
.Pp
The members of a
.Xr regexp
structure include at least the following (not necessarily in order):
.Bd -literal -offset indent
char *startp[NSUBEXP];
char *endp[NSUBEXP];
.Ed
.Pp
where
.Dv NSUBEXP
is defined (as 10) in the header file.
Once a successful
.Fn regexec
has been done using the
.Fn regexp ,
each
.Em startp Ns - Em endp
pair describes one substring
within the
.Fa string ,
with the
.Em startp
pointing to the first character of the substring and
the
.Em endp
pointing to the first character following the substring.
The 0th substring is the substring of
.Fa string
that matched the whole
regular expression.
The others are those substrings that matched parenthesized expressions
within the regular expression, with parenthesized expressions numbered
in left-to-right order of their opening parentheses.
.Pp
The
.Fn regsub
function
copies
.Fa source
to
.Fa dest ,
making substitutions according to the
most recent
.Fn regexec
performed using
.Fa prog .
Each instance of `&' in
.Fa source
is replaced by the substring
indicated by
.Em startp Ns Bq
and
.Em endp Ns Bq .
Each instance of
.Sq \e Ns Em n ,
where
.Em n
is a digit, is replaced by
the substring indicated by
.Em startp Ns Bq Em n
and
.Em endp Ns Bq Em n .
To get a literal `&' or
.Sq \e Ns Em n
into
.Fa dest ,
prefix it with `\e';
to get a literal `\e' preceding `&' or
.Sq \e Ns Em n ,
prefix it with
another `\e'.
.Pp
The
.Fn regerror
function
is called whenever an error is detected in
.Fn regcomp ,
.Fn regexec ,
or
.Fn regsub .
The default
.Fn regerror
writes the string
.Fa msg ,
with a suitable indicator of origin,
on the standard
error output
and invokes
.Xr exit 3 .
The
.Fn regerror
function
can be replaced by the user if other actions are desirable.
.Sh REGULAR EXPRESSION SYNTAX
A regular expression is zero or more
.Em branches ,
separated by `|'.
It matches anything that matches one of the branches.
.Pp
A branch is zero or more
.Em pieces ,
concatenated.
It matches a match for the first, followed by a match for the second, etc.
.Pp
A piece is an
.Em atom
possibly followed by `*', `+', or `?'.
An atom followed by `*' matches a sequence of 0 or more matches of the atom.
An atom followed by `+' matches a sequence of 1 or more matches of the atom.
An atom followed by `?' matches a match of the atom, or the null string.
.Pp
An atom is a regular expression in parentheses (matching a match for the
regular expression), a
.Em range
(see below), `.'
(matching any single character), `^' (matching the null string at the
beginning of the input string), `$' (matching the null string at the
end of the input string), a `\e' followed by a single character (matching
that character), or a single character with no other significance
(matching that character).
.Pp
A
.Em range
is a sequence of characters enclosed in `[]'.
It normally matches any single character from the sequence.
If the sequence begins with `^',
it matches any single character
.Em not
from the rest of the sequence.
If two characters in the sequence are separated by `\-', this is shorthand
for the full list of
.Tn ASCII
characters between them
(e.g., `[0-9]' matches any decimal digit).
To include a literal `]' in the sequence, make it the first character
(following a possible `^').
To include a literal `\-', make it the first or last character.
.Sh AMBIGUITY
If a regular expression could match two different parts of the input string,
it will match the one which begins earliest.
If both begin in the same place but match different lengths, or match
the same length in different ways, life gets messier, as follows.
.Pp
In general, the possibilities in a list of branches are considered in
left-to-right order, the possibilities for `*', `+', and `?' are
considered longest-first, nested constructs are considered from the
outermost in, and concatenated constructs are considered leftmost-first.
The match that will be chosen is the one that uses the earliest
possibility in the first choice that has to be made.
If there is more than one choice, the next will be made in the same manner
(earliest possibility) subject to the decision on the first choice.
And so forth.
.Pp
For example,
.Sq Li (ab|a)b*c
could match
`abc' in one of two ways.
The first choice is between `ab' and `a'; since `ab' is earlier, and does
lead to a successful overall match, it is chosen.
Since the `b' is already spoken for,
the `b*' must match its last possibility\(emthe empty string\(emsince
it must respect the earlier choice.
.Pp
In the particular case where no `|'s are present and there is only one
`*', `+', or `?', the net effect is that the longest possible
match will be chosen.
So
.Sq Li ab* ,
presented with `xabbbby', will match `abbbb'.
Note that if
.Sq Li ab* ,
is tried against `xabyabbbz', it
will match `ab' just after `x', due to the begins-earliest rule.
(In effect, the decision on where to start the match is the first choice
to be made; hence subsequent choices must respect it even if this leads them
to less-preferred alternatives.)
.Sh RETURN VALUES
The
.Fn regcomp
function
returns
.Dv NULL
for a failure
.Pf ( Fn regerror
permitting),
where failures are syntax errors, exceeding implementation limits,
or applying `+' or `*' to a possibly NULL operand.
.Sh SEE ALSO
.Xr ed 1 ,
.Xr egrep 1 ,
.Xr ex 1 ,
.Xr expr 1 ,
.Xr fgrep 1 ,
.Xr grep 1 ,
.Xr regex 3
.Sh HISTORY
Both code and manual page for
.Fn regcomp ,
.Fn regexec ,
.Fn regsub ,
and
.Fn regerror
were written at the University of Toronto
and appeared in
.Bx 4.3 tahoe .
They are intended to be compatible with the Bell V8
.Fn regexp ,
but are not derived from Bell code.
.Sh BUGS
Empty branches and empty regular expressions are not portable to V8.
.Pp
The restriction against
applying `*' or `+' to a possibly NULL operand is an artifact of the
simplistic implementation.
.Pp
Does not support
.Eo
.Xr egrep 1
.Ec 's
newline-separated branches;
neither does the V8
.Fn regexp
though.
.Pp
Due to emphasis on
compactness and simplicity,
it's not strikingly fast.
It does give special attention to handling simple cases quickly.
@


1.13
log
@use fancy .In macro for includes. from Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: regexp.3,v 1.12 2010/09/20 07:41:17 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: September 20 2010 $
@


1.12
log
@according to ingo, it isn;t a problem to have empty [BDS]q macros, so
revert that part of yesterday's diffs;
@
text
@d1 1
a1 1
.\"	$OpenBSD: regexp.3,v 1.11 2010/09/19 22:22:13 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: September 19 2010 $
d38 1
a38 1
.Fd #include <regexp.h>
@


1.11
log
@more wacky macro fixing;
@
text
@d1 1
a1 1
.\"	$OpenBSD: regexp.3,v 1.10 2007/05/31 19:19:34 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
d140 1
a140 1
.Em startp Ns \(sq
d142 1
a142 1
.Em endp Ns \(sq .
@


1.10
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: regexp.3,v 1.9 2004/02/10 19:55:29 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate$
d140 1
a140 1
.Em startp Ns Bq
d142 1
a142 1
.Em endp Ns Bq .
@


1.9
log
@make Nm match Dt;
improve Nd as suggested by millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: regexp.3,v 1.8 2003/06/02 20:18:40 millert Exp $
d31 1
a31 1
.Dd June 4, 1993
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: regexp.3,v 1.7 2003/06/02 09:38:57 jmc Exp $
d35 2
a36 5
.Nm regcomp ,
.Nm regexec ,
.Nm regsub ,
.Nm regerror
.Nd regular expression handlers
@


1.7
log
@sort some macros, sort .Xr's
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d13 1
a13 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
d79 1
a79 1
.Xr free .
d303 1
a303 1
.Xr regexp 3 ,
d313 3
a315 1
.Xr egrep Ns 's
d318 1
a318 1
.Xr regexp 3 ,
@


1.5
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d229 1
a229 1
(e.g. `[0-9]' matches any decimal digit).
@


1.4
log
@grammar police: do not hyphenate compound words that act as adjectives if the
first word ends in -ly

i.e., fully-qualified, newly-created, globally-visible, etc. are wrong
@
text
@d285 1
a287 1
.Xr egrep 1 ,
@


1.3
log
@fix more comma splices that involve misuse of conjunctive adverbs
@
text
@d282 1
a282 1
or applying `+' or `*' to a possibly-null operand.
d308 1
a308 1
applying `*' or `+' to a possibly-null operand is an artifact of the
@


1.2
log
@fix Xr
@
text
@d270 1
a270 1
to be made, hence subsequent choices must respect it even if this leads them
@


1.1
log
@Initial revision
@
text
@d184 1
a184 1
.Xr exit 2 .
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
