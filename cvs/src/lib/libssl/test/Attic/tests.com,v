head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2014.04.13.15.25.35;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.03.02.34.33;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.54;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.21;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.43;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.13.43;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.37.35;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.45;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.52;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.14.08;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.17;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2011.11.03.02.32.22;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.50;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@$! TESTS.COM  --  Performs the necessary tests
$!
$! P1	tests to be performed.  Empty means all.
$! P2	Pointer size: "", "32", or "64".
$!
$! Announce/identify.
$!
$	proc = f$environment( "procedure")
$	write sys$output "@@@@@@ "+ -
	 f$parse( proc, , , "name")+ f$parse( proc, , , "type")
$!
$	__proc = f$element(0,";",f$environment("procedure"))
$	__here = f$parse(f$parse("A.;",__proc) - "A.;","[]A.;") - "A.;"
$	__save_default = f$environment("default")
$	__arch = "VAX"
$	if f$getsyi("cpu") .ge. 128 then -
	   __arch = f$edit( f$getsyi( "ARCH_NAME"), "UPCASE")
$	if __arch .eqs. "" then __arch = "UNK"
$!
$	__archd = __arch
$       pointer_size = ""
$	if (p2 .eq. "64")
$	then
$	  pointer_size = "64"
$	  __archd = __arch+ "_64"
$	endif
$!
$	texe_dir := sys$disk:[-.'__archd'.exe.test]
$	exe_dir := sys$disk:[-.'__archd'.exe.apps]
$
$	set default '__here'
$
$       ROOT = F$PARSE("sys$disk:[-]A.;0",,,,"SYNTAX_ONLY,NO_CONCEAL") - "A.;0"
$       ROOT_DEV = F$PARSE(ROOT,,,"DEVICE","SYNTAX_ONLY")
$       ROOT_DIR = F$PARSE(ROOT,,,"DIRECTORY","SYNTAX_ONLY") -
                   - ".][000000" - "[000000." - "][" - "[" - "]"
$       ROOT = ROOT_DEV + "[" + ROOT_DIR
$       DEFINE/NOLOG SSLROOT 'ROOT'.APPS.] /TRANS=CONC
$	openssl_conf := sslroot:[000000]openssl-vms.cnf
$
$	on control_y then goto exit
$	on error then goto exit
$
$	if p1 .nes. ""
$	then
$	    tests = p1
$	else
$! NOTE: This list reflects the list of dependencies following the
$! "alltests" target in Makefile.  This should make it easy to see
$! if there's a difference that needs to be taken care of.
$	    tests := -
	test_des,test_idea,test_sha,test_md4,test_md5,test_hmac,-
	test_md2,test_mdc2,test_wp,-
	test_rmd,test_rc2,test_rc4,test_rc5,test_bf,test_cast,test_aes,-
	test_rand,test_bn,test_ec,test_ecdsa,test_ecdh,-
	test_enc,test_x509,test_rsa,test_crl,test_sid,-
	test_gen,test_req,test_pkcs7,test_verify,test_dh,test_dsa,-
	test_ss,test_ca,test_engine,test_evp,test_ssl,test_tsa,test_ige,-
	test_jpake,test_srp,test_cms
$	endif
$	tests = f$edit(tests,"COLLAPSE")
$
$	BNTEST :=	bntest
$	ECTEST :=	ectest
$	ECDSATEST :=	ecdsatest
$	ECDHTEST :=	ecdhtest
$	EXPTEST :=	exptest
$	IDEATEST :=	ideatest
$	SHATEST :=	shatest
$	SHA1TEST :=	sha1test
$	SHA256TEST :=	sha256t
$	SHA512TEST :=	sha512t
$	MDC2TEST :=	mdc2test
$	RMDTEST :=	rmdtest
$	MD2TEST :=	md2test
$	MD4TEST :=	md4test
$	MD5TEST :=	md5test
$	HMACTEST :=	hmactest
$	WPTEST :=	wp_test
$	RC2TEST :=	rc2test
$	RC4TEST :=	rc4test
$	RC5TEST :=	rc5test
$	BFTEST :=	bftest
$	CASTTEST :=	casttest
$	DESTEST :=	destest
$	RANDTEST :=	randtest
$	DHTEST :=	dhtest
$	DSATEST :=	dsatest
$	METHTEST :=	methtest
$	SSLTEST :=	ssltest
$	RSATEST :=	rsa_test
$	ENGINETEST :=	enginetest
$	EVPTEST :=	evp_test
$	IGETEST :=	igetest
$	JPAKETEST :=	jpaketest
$	SRPTEST :=	srptest
$	ASN1TEST :=	asn1test
$!
$	tests_i = 0
$ loop_tests:
$	tests_e = f$element(tests_i,",",tests)
$	tests_i = tests_i + 1
$	if tests_e .eqs. "," then goto exit
$	write sys$output "---> ''tests_e'"
$	gosub 'tests_e'
$	goto loop_tests
$
$ test_evp:
$	mcr 'texe_dir''evptest' 'ROOT'.CRYPTO.EVP]evptests.txt
$	return
$ test_des:
$	mcr 'texe_dir''destest'
$	return
$ test_idea:
$	mcr 'texe_dir''ideatest'
$	return
$ test_sha:
$	mcr 'texe_dir''shatest'
$	mcr 'texe_dir''sha1test'
$	mcr 'texe_dir''sha256test'
$	mcr 'texe_dir''sha512test'
$	return
$ test_mdc2:
$	mcr 'texe_dir''mdc2test'
$	return
$ test_md5:
$	mcr 'texe_dir''md5test'
$	return
$ test_md4:
$	mcr 'texe_dir''md4test'
$	return
$ test_hmac:
$	mcr 'texe_dir''hmactest'
$	return
$ test_wp:
$	mcr 'texe_dir''wptest'
$	return
$ test_md2:
$	mcr 'texe_dir''md2test'
$	return
$ test_rmd:
$	mcr 'texe_dir''rmdtest'
$	return
$ test_bf:
$	mcr 'texe_dir''bftest'
$	return
$ test_cast:
$	mcr 'texe_dir''casttest'
$	return
$ test_rc2:
$	mcr 'texe_dir''rc2test'
$	return
$ test_rc4:
$	mcr 'texe_dir''rc4test'
$	return
$ test_rc5:
$	mcr 'texe_dir''rc5test'
$	return
$ test_rand:
$	mcr 'texe_dir''randtest'
$	return
$ test_enc:
$	@@testenc.com 'pointer_size'
$	return
$ test_x509:
$	set noon
$	define sys$error test_x509.err
$	write sys$output "test normal x509v1 certificate"
$	@@tx509.com "" 'pointer_size'
$	write sys$output "test first x509v3 certificate"
$	@@tx509.com v3-cert1.pem 'pointer_size'
$	write sys$output "test second x509v3 certificate"
$	@@tx509.com v3-cert2.pem 'pointer_size'
$	deassign sys$error
$	set on
$	return
$ test_rsa:
$	set noon
$	define sys$error test_rsa.err
$	@@trsa.com "" 'pointer_size'
$	deassign sys$error
$	mcr 'texe_dir''rsatest'
$	set on
$	return
$ test_crl:
$	set noon
$	define sys$error test_crl.err
$	@@tcrl.com "" 'pointer_size'
$	deassign sys$error
$	set on
$	return
$ test_sid:
$	set noon
$	define sys$error test_sid.err
$	@@tsid.com "" 'pointer_size'
$	deassign sys$error
$	set on
$	return
$ test_req:
$	set noon
$	define sys$error test_req.err
$	@@treq.com "" 'pointer_size'
$	@@treq.com testreq2.pem 'pointer_size'
$	deassign sys$error
$	set on
$	return
$ test_pkcs7:
$	set noon
$	define sys$error test_pkcs7.err
$	@@tpkcs7.com "" 'pointer_size'
$	@@tpkcs7d.com "" 'pointer_size'
$	deassign sys$error
$	set on
$	return
$ test_bn:
$	write sys$output -
	      "starting big number library test, could take a while..."
$	set noon
$	define sys$error test_bn.err
$	define sys$output test_bn.out
$	@@ bctest.com
$	status = $status
$	deassign sys$error
$	deassign sys$output
$	set on
$	if (status)
$	then
$	    create /fdl = sys$input bntest-vms.tmp
FILE
	ORGANIZATION	sequential
RECORD
	FORMAT		stream_lf
$	    define /user_mode sys$output bntest-vms.tmp
$	    mcr 'texe_dir''bntest'
$	    define /user_mode sys$input bntest-vms.tmp
$	    define /user_mode sys$output bntest-vms.out
$	    bc
$	    @@ bntest.com bntest-vms.out
$	    status = $status
$	    if (status)
$	    then
$		delete bntest-vms.out;*
$		delete bntest-vms.tmp;*
$	    endif
$	else
$	    create /fdl = sys$input bntest-vms.sh
FILE
	ORGANIZATION	sequential
RECORD
	FORMAT		stream_lf
$	    open /append bntest_file bntest-vms.sh
$	    type /output = bntest_file sys$input:
<< __FOO__ sh -c "`sh ./bctest`" | perl -e '$i=0; while (<STDIN>) {if (/^test (.*)/) {print STDERR "\nverify $1";} elsif (!/^0$/) {die "\nFailed! bc: $_";} else {print STDERR "."; $i++;}} print STDERR "\n$i tests passed\n"'
$	    define /user_mode sys$output bntest-vms.tmp
$	    mcr 'texe_dir''bntest'
$	    copy bntest-vms.tmp bntest_file
$	    delete bntest-vms.tmp;*
$	    type /output = bntest_file sys$input:
__FOO__
$	    close bntest_file
$	    write sys$output "-- copy the [.test]bntest-vms.sh and [.test]bctest files to a Unix system and"
$	    write sys$output "-- run bntest-vms.sh through sh or bash to verify that the bignum operations"
$	    write sys$output "-- went well."
$	    write sys$output ""
$	endif
$	write sys$output "test a^b%c implementations"
$	mcr 'texe_dir''exptest'
$	return
$ test_ec:
$	write sys$output "test elliptic curves"
$	mcr 'texe_dir''ectest'
$	return
$ test_ecdsa:
$	write sys$output "test ecdsa"
$	mcr 'texe_dir''ecdsatest'
$	return
$ test_ecdh:
$	write sys$output "test ecdh"
$	mcr 'texe_dir''ecdhtest'
$	return
$ test_verify:
$	write sys$output "The following command should have some OK's and some failures"
$	write sys$output "There are definitly a few expired certificates"
$	@@tverify.com 'pointer_size'
$	return
$ test_dh:
$	write sys$output "Generate a set of DH parameters"
$	mcr 'texe_dir''dhtest'
$	return
$ test_dsa:
$	write sys$output "Generate a set of DSA parameters"
$	mcr 'texe_dir''dsatest'
$	return
$ test_gen:
$	write sys$output "Generate and verify a certificate request"
$	@@testgen.com 'pointer_size'
$	return
$ maybe_test_ss:
$	testss_RDT = f$cvtime(f$file_attributes("testss.com","RDT"))
$	if f$cvtime(f$file_attributes("keyU.ss","RDT")) .les. testss_RDT then -
		goto test_ss
$	if f$cvtime(f$file_attributes("certU.ss","RDT")) .les. testss_RDT then -
		goto test_ss
$	if f$cvtime(f$file_attributes("certCA.ss","RDT")) .les. testss_RDT then -
		goto test_ss
$	return
$ test_ss:
$	write sys$output "Generate and certify a test certificate"
$	@@testss.com 'pointer_size'
$	return
$ test_engine: 
$	write sys$output "Manipulate the ENGINE structures"
$	mcr 'texe_dir''enginetest'
$	return
$ test_ssl:
$	write sys$output "test SSL protocol"
$	gosub maybe_test_ss
$	@@testssl.com keyU.ss certU.ss certCA.ss 'pointer_size'
$	return
$ test_ca:
$	set noon
$	define /user_mode sys$output test_ca.out
$	mcr 'exe_dir'openssl no-rsa
$	save_severity=$SEVERITY
$	set on
$	if save_severity
$	then
$	    write sys$output "skipping CA.com test -- requires RSA"
$	else
$	    write sys$output "Generate and certify a test certificate via the 'ca' program"
$	    @@testca.com 'pointer_size'
$	endif
$	return
$ test_aes: 
$!	write sys$output "test AES"
$!	!mcr 'texe_dir''aestest'
$	return
$ test_tsa:
$	set noon
$	define /user_mode sys$output nla0:
$	mcr 'exe_dir'openssl no-rsa
$	save_severity=$SEVERITY
$	set on
$	if save_severity
$	then
$	    write sys$output "skipping testtsa.com test -- requires RSA"
$	else
$	    @@testtsa.com "" "" "" 'pointer_size'
$	endif
$	return
$ test_ige: 
$	write sys$output "Test IGE mode"
$	mcr 'texe_dir''igetest'
$	return
$ test_jpake: 
$	write sys$output "Test JPAKE"
$	mcr 'texe_dir''jpaketest'
$	return
$ test_cms:
$	write sys$output "CMS consistency test"
$	! Define the logical name used to find openssl.exe in the perl script.
$	define /user_mode osslx 'exe_dir'
$	perl CMS-TEST.PL
$	return
$ test_srp: 
$	write sys$output "Test SRP"
$	mcr 'texe_dir''srptest'
$	return
$
$
$ exit:
$	mcr 'exe_dir'openssl version -a
$	set default '__save_default'
$	deassign sslroot
$	exit
@


1.9
log
@resolve conflicts
@
text
@@


1.8
log
@openssl-1.0.0e: resolve conflicts
@
text
@d59 1
a59 1
	test_jpake,test_cms
d71 2
d96 1
d120 2
d364 4
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d4 8
a11 1
$
d15 1
a15 1
$	__arch := VAX
d18 12
a29 3
$	if __arch .eqs. "" then __arch := UNK
$	texe_dir := sys$disk:[-.'__arch'.exe.test]
$	exe_dir := sys$disk:[-.'__arch'.exe.apps]
d31 1
a31 2
$	sslroot = f$parse("sys$disk:[-.apps];",,,,"syntax_only") - "].;"+ ".]"
$	define /translation_attributes = concealed sslroot 'sslroot'
d33 7
a39 1
$	set default '__here'
d94 2
a95 1
$
d101 1
d106 1
a106 1
$	mcr 'texe_dir''evptest' evptests.txt
d158 1
a158 1
$	@@testenc.com
d161 2
a162 1
$	define sys$error nla0:
d164 1
a164 1
$	@@tx509.com
d166 1
a166 1
$	@@tx509.com v3-cert1.pem
d168 1
a168 1
$	@@tx509.com v3-cert2.pem
d170 1
d173 3
a175 2
$	define sys$error nla0:
$	@@trsa.com
d178 1
d181 3
a183 2
$	define sys$error nla0:
$	@@tcrl.com
d185 1
d188 3
a190 2
$	define sys$error nla0:
$	@@tsid.com
d192 1
d195 4
a198 3
$	define sys$error nla0:
$	@@treq.com
$	@@treq.com testreq2.pem
d200 1
d203 4
a206 3
$	define sys$error nla0:
$	@@tpkcs7.com
$	@@tpkcs7d.com
d208 1
d211 13
a223 2
$	write sys$output "starting big number library test, could take a while..."
$	create bntest-vms.fdl
d228 20
a247 3
$	create/fdl=bntest-vms.fdl bntest-vms.sh
$	open/append foo bntest-vms.sh
$	type/output=foo: sys$input:
d249 5
a253 5
$	define/user sys$output bntest-vms.tmp
$	mcr 'texe_dir''bntest'
$	copy bntest-vms.tmp foo:
$	delete bntest-vms.tmp;*
$	type/output=foo: sys$input:
d255 6
a260 5
$	close foo
$	write sys$output "-- copy the [.test]bntest-vms.sh and [.test]bctest files to a Unix system and"
$	write sys$output "-- run bntest-vms.sh through sh or bash to verify that the bignum operations"
$	write sys$output "-- went well."
$	write sys$output ""
d279 1
a279 1
$	@@tverify.com
d291 1
a291 1
$	@@testgen.com
d304 1
a304 1
$	@@testss.com
d313 1
a313 1
$	@@testssl.com keyU.ss certU.ss certCA.ss
d317 1
a317 1
$	define/user sys$output nla0:
d326 1
a326 1
$	    @@testca.com
d335 1
a335 1
$	define/user sys$output nla0:
d343 1
a343 1
$	    @@testtsa.com
d356 2
d363 1
@


1.6
log
@resolve conflicts
@
text
@d9 3
a11 1
$	if f$getsyi("cpu") .ge. 128 then __arch := AXP
d15 3
d19 1
d27 3
d32 2
a33 2
	test_md2,test_mdc2,-
	test_rmd,test_rc2,test_rc4,test_rc5,test_bf,test_cast,test_rd,-
d37 2
a38 1
	test_ss,test_ca,test_engine,test_evp,test_ssl,test_ige,test_jpake
d56 1
d107 3
d265 16
a280 3
$ test_rd: 
$	write sys$output "test Rijndael"
$	!mcr 'texe_dir''rdtest'
d290 4
d298 1
@


1.5
log
@resolve conflicts
@
text
@d28 1
a28 1
	test_ss,test_ca,test_engine,test_evp,test_ssl
d60 2
d254 8
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d25 2
a26 1
	test_rand,test_bn,test_ec,test_enc,test_x509,test_rsa,test_crl,test_sid,-
d28 1
a28 1
	test_ss,test_ca,test_engine,test_ssl,test_evp
d34 2
d187 8
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d24 2
a25 2
	test_rmd,test_rc2,test_rc4,test_rc5,test_bf,test_cast,-
	test_rand,test_bn,test_enc,test_x509,test_rsa,test_crl,test_sid,-
d27 1
a27 1
	test_ss,test_ca,test_ssl
d32 1
d55 2
d66 3
d166 1
a166 1
<< __FOO__ bc | perl -e 'while (<STDIN>) {if (/^test (.*)/) {print STDERR "\nverify $1";} elsif (!/^0$/) {die "\nFailed! bc: $_";} print STDERR "."; $i++;} print STDERR "\n$i tests passed\n"'
d174 3
a176 2
$	write sys$output "-- copy the [.test]bntest-vms.sh file to a Unix system and run it"
$	write sys$output "-- through sh or bash to verify that the bignum operations went well."
d181 4
d215 4
d237 4
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d22 2
a23 1
	test_des,test_idea,test_sha,test_md5,test_hmac,test_md2,test_mdc2,-
d27 1
a27 1
	test_ss,test_ssl,test_ca
d39 1
d60 2
a61 1
$	goto 'tests_e'
d65 1
a65 1
$	goto loop_tests
d68 1
a68 1
$	goto loop_tests
d72 1
a72 1
$	goto loop_tests
d75 1
a75 1
$	goto loop_tests
d78 4
a81 1
$	goto loop_tests
d84 1
a84 1
$	goto loop_tests
d87 1
a87 1
$	goto loop_tests
d90 1
a90 1
$	goto loop_tests
d93 1
a93 1
$	goto loop_tests
d96 1
a96 1
$	goto loop_tests
d99 1
a99 1
$	goto loop_tests
d102 1
a102 1
$	goto loop_tests
d105 1
a105 1
$	goto loop_tests
d108 1
a108 1
$	goto loop_tests
d111 1
a111 1
$	goto loop_tests
d121 1
a121 1
$	goto loop_tests
d127 1
a127 1
$	goto loop_tests
d132 1
a132 1
$	goto loop_tests
d137 1
a137 1
$	goto loop_tests
d143 1
a143 1
$	goto loop_tests
d149 1
a149 1
$	goto loop_tests
d173 1
a173 1
$	goto loop_tests
d178 1
a178 1
$	goto loop_tests
d182 1
a182 1
$	goto loop_tests
d186 1
a186 1
$	goto loop_tests
d190 10
a199 1
$	goto loop_tests
d203 1
a203 1
$	goto loop_tests
d206 3
a208 2
$	@@testssl.com
$	goto loop_tests
d210 13
a222 3
$	write sys$output "Generate and certify a test certificate via the 'ca' program"
$	@@testca.com
$	goto loop_tests
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d23 1
a23 1
	test_rc2,test_rc4,test_rc5,test_bf,test_cast,-
d25 1
a25 1
	test_reqgen,test_req,test_pkcs7,test_verify,test_dh,test_dsa,-
d51 1
a51 1
$	RSATEST :=	rsa_oaep_test
d154 1
a154 3
<< __FOO__ bc | awk '{ \
if ($$0 != "0") {print "error"; exit(1); } \
if (((NR+1)%64) == 0) print NR+1," tests done"; }'
d174 1
a174 1
$	write sys$output "Generate as set of DH parameters"
d178 1
a178 1
$	write sys$output "Generate as set of DSA parameters"
d181 1
a181 1
$ test_reqgen:
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d22 5
a26 6
	test_des,test_idea,test_sha,test_md4,test_md5,test_hmac,-
	test_md2,test_mdc2,-
	test_rmd,test_rc2,test_rc4,test_rc5,test_bf,test_cast,test_rd,-
	test_rand,test_bn,test_ec,test_enc,test_x509,test_rsa,test_crl,test_sid,-
	test_gen,test_req,test_pkcs7,test_verify,test_dh,test_dsa,-
	test_ss,test_ca,test_engine,test_ssl,test_evp
a30 1
$	ECTEST :=	ectest
a37 1
$	MD4TEST :=	md4test
d51 1
a51 3
$	RSATEST :=	rsa_test
$	ENGINETEST :=	enginetest
$	EVPTEST :=	evp_test
d58 1
a58 2
$	gosub 'tests_e'
$	goto loop_tests
a59 3
$ test_evp:
$	mcr 'texe_dir''evptest' evptests.txt
$	return
d62 1
a62 1
$	return
d65 1
a65 1
$	return
d69 1
a69 1
$	return
d72 1
a72 1
$	return
d75 1
a75 4
$	return
$ test_md4:
$	mcr 'texe_dir''md4test'
$	return
d78 1
a78 1
$	return
d81 1
a81 1
$	return
d84 1
a84 1
$	return
d87 1
a87 1
$	return
d90 1
a90 1
$	return
d93 1
a93 1
$	return
d96 1
a96 1
$	return
d99 1
a99 1
$	return
d102 1
a102 1
$	return
d105 1
a105 1
$	return
d115 1
a115 1
$	return
d121 1
a121 1
$	return
d126 1
a126 1
$	return
d131 1
a131 1
$	return
d137 1
a137 1
$	return
d143 1
a143 1
$	return
d154 3
a156 1
<< __FOO__ sh -c "`sh ./bctest`" | perl -e '$i=0; while (<STDIN>) {if (/^test (.*)/) {print STDERR "\nverify $1";} elsif (!/^0$/) {die "\nFailed! bc: $_";} else {print STDERR "."; $i++;}} print STDERR "\n$i tests passed\n"'
d164 2
a165 3
$	write sys$output "-- copy the [.test]bntest-vms.sh and [.test]bctest files to a Unix system and"
$	write sys$output "-- run bntest-vms.sh through sh or bash to verify that the bignum operations"
$	write sys$output "-- went well."
d169 1
a169 5
$	return
$ test_ec:
$	write sys$output "test elliptic curves"
$	mcr 'texe_dir''ectest'
$	return
d174 1
a174 1
$	return
d176 1
a176 1
$	write sys$output "Generate a set of DH parameters"
d178 1
a178 1
$	return
d180 1
a180 1
$	write sys$output "Generate a set of DSA parameters"
d182 2
a183 2
$	return
$ test_gen:
d186 1
a186 10
$	return
$ maybe_test_ss:
$	testss_RDT = f$cvtime(f$file_attributes("testss.com","RDT"))
$	if f$cvtime(f$file_attributes("keyU.ss","RDT")) .les. testss_RDT then -
		goto test_ss
$	if f$cvtime(f$file_attributes("certU.ss","RDT")) .les. testss_RDT then -
		goto test_ss
$	if f$cvtime(f$file_attributes("certCA.ss","RDT")) .les. testss_RDT then -
		goto test_ss
$	return
d190 1
a190 5
$	return
$ test_engine: 
$	write sys$output "Manipulate the ENGINE structures"
$	mcr 'texe_dir''enginetest'
$	return
d193 2
a194 3
$	gosub maybe_test_ss
$	@@testssl.com keyU.ss certU.ss certCA.ss
$	return
d196 3
a198 17
$	set noon
$	define/user sys$output nla0:
$	mcr 'exe_dir'openssl no-rsa
$	save_severity=$SEVERITY
$	set on
$	if save_severity
$	then
$	    write sys$output "skipping CA.com test -- requires RSA"
$	else
$	    write sys$output "Generate and certify a test certificate via the 'ca' program"
$	    @@testca.com
$	endif
$	return
$ test_rd: 
$	write sys$output "test Rijndael"
$	!mcr 'texe_dir''rdtest'
$	return
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d25 1
a25 2
	test_rand,test_bn,test_ec,test_ecdsa,test_ecdh,-
	test_enc,test_x509,test_rsa,test_crl,test_sid,-
d27 1
a27 1
	test_ss,test_ca,test_engine,test_evp,test_ssl
a32 2
$	ECDSATEST :=	ecdsatest
$	ECDHTEST :=	ecdhtest
a183 8
$	return
$ test_ecdsa:
$	write sys$output "test ecdsa"
$	mcr 'texe_dir''ecdsatest'
$	return
$ test_ecdh:
$	write sys$output "test ecdh"
$	mcr 'texe_dir''ecdhtest'
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d28 1
a28 1
	test_ss,test_ca,test_engine,test_evp,test_ssl,test_ige,test_jpake
a59 2
$	IGETEST :=	igetest
$	JPAKETEST :=	jpaketest
a251 8
$	return
$ test_ige: 
$	write sys$output "Test IGE mode"
$	mcr 'texe_dir''igetest'
$	return
$ test_jpake: 
$	write sys$output "Test JPAKE"
$	mcr 'texe_dir''jpaketest'
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d9 1
a9 3
$	if f$getsyi("cpu") .ge. 128 then -
	   __arch = f$edit( f$getsyi( "ARCH_NAME"), "UPCASE")
$	if __arch .eqs. "" then __arch := UNK
a12 3
$	sslroot = f$parse("sys$disk:[-.apps];",,,,"syntax_only") - "].;"+ ".]"
$	define /translation_attributes = concealed sslroot 'sslroot'
$
a13 1
$
a20 3
$! NOTE: This list reflects the list of dependencies following the
$! "alltests" target in Makefile.  This should make it easy to see
$! if there's a difference that needs to be taken care of.
d23 2
a24 2
	test_md2,test_mdc2,test_wp,-
	test_rmd,test_rc2,test_rc4,test_rc5,test_bf,test_cast,test_aes,-
d28 1
a28 2
	test_ss,test_ca,test_engine,test_evp,test_ssl,test_tsa,test_ige,-
	test_jpake,test_cms
a45 1
$	WPTEST :=	wp_test
a95 3
$ test_wp:
$	mcr 'texe_dir''wptest'
$	return
d251 3
a253 16
$ test_aes: 
$!	write sys$output "test AES"
$!	!mcr 'texe_dir''aestest'
$	return
$ test_tsa:
$	set noon
$	define/user sys$output nla0:
$	mcr 'exe_dir'openssl no-rsa
$	save_severity=$SEVERITY
$	set on
$	if save_severity
$	then
$	    write sys$output "skipping testtsa.com test -- requires RSA"
$	else
$	    @@testtsa.com
$	endif
a262 4
$ test_cms:
$	write sys$output "CMS consistency test"
$	perl CMS-TEST.PL
$	return
a266 1
$	deassign sslroot
@


1.1.1.5
log
@import OpenSSL 1.0.0e
@
text
@d4 1
a4 8
$! P2	Pointer size: "", "32", or "64".
$!
$! Announce/identify.
$!
$	proc = f$environment( "procedure")
$	write sys$output "@@@@@@ "+ -
	 f$parse( proc, , , "name")+ f$parse( proc, , , "type")
$!
d8 1
a8 1
$	__arch = "VAX"
d11 6
a16 12
$	if __arch .eqs. "" then __arch = "UNK"
$!
$	__archd = __arch
$       pointer_size = ""
$	if (p2 .eq. "64")
$	then
$	  pointer_size = "64"
$	  __archd = __arch+ "_64"
$	endif
$!
$	texe_dir := sys$disk:[-.'__archd'.exe.test]
$	exe_dir := sys$disk:[-.'__archd'.exe.apps]
a19 8
$       ROOT = F$PARSE("sys$disk:[-]A.;0",,,,"SYNTAX_ONLY,NO_CONCEAL") - "A.;0"
$       ROOT_DEV = F$PARSE(ROOT,,,"DEVICE","SYNTAX_ONLY")
$       ROOT_DIR = F$PARSE(ROOT,,,"DIRECTORY","SYNTAX_ONLY") -
                   - ".][000000" - "[000000." - "][" - "[" - "]"
$       ROOT = ROOT_DEV + "[" + ROOT_DIR
$       DEFINE/NOLOG SSLROOT 'ROOT'.APPS.] /TRANS=CONC
$	openssl_conf := sslroot:[000000]openssl-vms.cnf
$
d73 1
a73 2
$	ASN1TEST :=	asn1test
$!
a78 1
$	write sys$output "---> ''tests_e'"
d83 1
a83 1
$	mcr 'texe_dir''evptest' 'ROOT'.CRYPTO.EVP]evptests.txt
d135 1
a135 1
$	@@testenc.com 'pointer_size'
d138 1
a138 2
$	set noon
$	define sys$error test_x509.err
d140 1
a140 1
$	@@tx509.com "" 'pointer_size'
d142 1
a142 1
$	@@tx509.com v3-cert1.pem 'pointer_size'
d144 1
a144 1
$	@@tx509.com v3-cert2.pem 'pointer_size'
a145 1
$	set on
d148 2
a149 3
$	set noon
$	define sys$error test_rsa.err
$	@@trsa.com "" 'pointer_size'
a151 1
$	set on
d154 2
a155 3
$	set noon
$	define sys$error test_crl.err
$	@@tcrl.com "" 'pointer_size'
a156 1
$	set on
d159 2
a160 3
$	set noon
$	define sys$error test_sid.err
$	@@tsid.com "" 'pointer_size'
a161 1
$	set on
d164 3
a166 4
$	set noon
$	define sys$error test_req.err
$	@@treq.com "" 'pointer_size'
$	@@treq.com testreq2.pem 'pointer_size'
a167 1
$	set on
d170 3
a172 4
$	set noon
$	define sys$error test_pkcs7.err
$	@@tpkcs7.com "" 'pointer_size'
$	@@tpkcs7d.com "" 'pointer_size'
a173 1
$	set on
d176 2
a177 13
$	write sys$output -
	      "starting big number library test, could take a while..."
$	set noon
$	define sys$error test_bn.err
$	define sys$output test_bn.out
$	@@ bctest.com
$	status = $status
$	deassign sys$error
$	deassign sys$output
$	set on
$	if (status)
$	then
$	    create /fdl = sys$input bntest-vms.tmp
d182 3
a184 20
$	    define /user_mode sys$output bntest-vms.tmp
$	    mcr 'texe_dir''bntest'
$	    define /user_mode sys$input bntest-vms.tmp
$	    define /user_mode sys$output bntest-vms.out
$	    bc
$	    @@ bntest.com bntest-vms.out
$	    status = $status
$	    if (status)
$	    then
$		delete bntest-vms.out;*
$		delete bntest-vms.tmp;*
$	    endif
$	else
$	    create /fdl = sys$input bntest-vms.sh
FILE
	ORGANIZATION	sequential
RECORD
	FORMAT		stream_lf
$	    open /append bntest_file bntest-vms.sh
$	    type /output = bntest_file sys$input:
d186 5
a190 5
$	    define /user_mode sys$output bntest-vms.tmp
$	    mcr 'texe_dir''bntest'
$	    copy bntest-vms.tmp bntest_file
$	    delete bntest-vms.tmp;*
$	    type /output = bntest_file sys$input:
d192 5
a196 6
$	    close bntest_file
$	    write sys$output "-- copy the [.test]bntest-vms.sh and [.test]bctest files to a Unix system and"
$	    write sys$output "-- run bntest-vms.sh through sh or bash to verify that the bignum operations"
$	    write sys$output "-- went well."
$	    write sys$output ""
$	endif
d215 1
a215 1
$	@@tverify.com 'pointer_size'
d227 1
a227 1
$	@@testgen.com 'pointer_size'
d240 1
a240 1
$	@@testss.com 'pointer_size'
d249 1
a249 1
$	@@testssl.com keyU.ss certU.ss certCA.ss 'pointer_size'
d253 1
a253 1
$	define /user_mode sys$output test_ca.out
d262 1
a262 1
$	    @@testca.com 'pointer_size'
d271 1
a271 1
$	define /user_mode sys$output nla0:
d279 1
a279 1
$	    @@testtsa.com "" "" "" 'pointer_size'
a291 2
$	! Define the logical name used to find openssl.exe in the perl script.
$	define /user_mode osslx 'exe_dir'
a296 1
$	mcr 'exe_dir'openssl version -a
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@d59 1
a59 1
	test_jpake,test_srp,test_cms
a70 2
$	SHA256TEST :=	sha256t
$	SHA512TEST :=	sha512t
a93 1
$	SRPTEST :=	srptest
a116 2
$	mcr 'texe_dir''sha256test'
$	mcr 'texe_dir''sha512test'
a358 4
$	return
$ test_srp: 
$	write sys$output "Test SRP"
$	mcr 'texe_dir''srptest'
@


