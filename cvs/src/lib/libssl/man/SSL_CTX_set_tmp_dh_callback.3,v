head	1.2;
access;
symbols;
locks; strict;
comment	@.\" @;


1.2
date	2016.12.01.21.53.42;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	vxhX7bEKRD1dqzv5;

1.1
date	2016.11.05.15.32.19;	author schwarze;	state Exp;
branches;
next	;
commitid	ZM7UFzG8SDjLS2hv;


desc
@@


1.2
log
@Add Copyright and license.
Merge various updates from OpenSSL, in particular stop talking about
what happens without SSL_OP_SINGLE_DH_USE, which is now always on.
@
text
@.\"	$OpenBSD: SSL_CTX_set_tmp_dh_callback.3,v 1.1 2016/11/05 15:32:19 schwarze Exp $
.\"	OpenSSL b97fdb57 Nov 11 09:33:09 2016 +0100
.\"
.\" This file was written by Lutz Jaenicke <jaenicke@@openssl.org>.
.\" Copyright (c) 2001, 2014, 2015 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: November 5 2016 $
.Dt SSL_CTX_SET_TMP_DH_CALLBACK 3
.Os
.Sh NAME
.Nm SSL_CTX_set_tmp_dh_callback ,
.Nm SSL_CTX_set_tmp_dh ,
.Nm SSL_set_tmp_dh_callback ,
.Nm SSL_set_tmp_dh
.Nd handle DH keys for ephemeral key exchange
.Sh SYNOPSIS
.In openssl/ssl.h
.Ft void
.Fo SSL_CTX_set_tmp_dh_callback
.Fa "SSL_CTX *ctx"
.Fa "DH *(*tmp_dh_callback)(SSL *ssl, int is_export, int keylength)"
.Fc
.Ft long
.Fn SSL_CTX_set_tmp_dh "SSL_CTX *ctx" "DH *dh"
.Ft void
.Fo SSL_set_tmp_dh_callback
.Fa "SSL *ssl"
.Fa "DH *(*tmp_dh_callback)(SSL *ssl, int is_export, int keylength"
.Fc
.Ft long
.Fn SSL_set_tmp_dh "SSL *ssl" "DH *dh"
.Sh DESCRIPTION
.Fn SSL_CTX_set_tmp_dh_callback
sets the callback function for
.Fa ctx
to be used when a DH parameters are required to
.Fa tmp_dh_callback .
The callback is inherited by all
.Vt ssl
objects created from
.Fa ctx .
.Pp
.Fn SSL_CTX_set_tmp_dh
sets DH parameters to be used to be
.Sy dh Ns  .
The key is inherited by all
.Fa ssl
objects created from
.Fa ctx .
.Pp
.Fn SSL_set_tmp_dh_callback
sets the callback only for
.Fa ssl .
.Pp
.Fn SSL_set_tmp_dh
sets the parameters only for
.Fa ssl .
.Pp
These functions apply to SSL/TLS servers only.
.Pp
When using a cipher with RSA authentication,
an ephemeral DH key exchange can take place.
Ciphers with DSA keys always use ephemeral DH keys as well.
In these cases, the session data are negotiated using the ephemeral/temporary
DH key and the key supplied and certified by the certificate chain is only used
for signing.
Anonymous ciphers (without a permanent server key) also use ephemeral DH keys.
.Pp
Using ephemeral DH key exchange yields forward secrecy,
as the connection can only be decrypted when the DH key is known.
By generating a temporary DH key inside the server application that is lost
when the application is left, it becomes impossible for an attacker to decrypt
past sessions, even if he gets hold of the normal (certified) key,
as this key was only used for signing.
.Pp
In order to perform a DH key exchange the server must use a DH group
(DH parameters) and generate a DH key.
The server will always generate a new DH key during the negotiation.
.Pp
As generating DH parameters is extremely time consuming, an application should
not generate the parameters on the fly but supply the parameters.
DH parameters can be reused,
as the actual key is newly generated during the negotiation.
The risk in reusing DH parameters is that an attacker may specialize on a very
often used DH group.
Applications should therefore generate their own DH parameters during the
installation process using the
.Xr openssl 1
.Cm dhparam
application.
This application guarantees that "strong" primes are used.
.Pp
Files
.Pa dh2048.pem
and
.Pa dh4096.pem
in the
.Pa apps
directory of the current version of the OpenSSL distribution contain the
.Sq SKIP
DH parameters,
which use safe primes and were generated verifiably pseudo-randomly.
These files can be converted into C code using the
.Fl C
option of the
.Xr openssl 1
.Cm dhparam
application.
Generation of custom DH parameters during installation should still
be preferred to stop an attacker from specializing on a commonly
used group.
The file
.Pa dh1024.pem
contains old parameters that must not be used by applications.
.Pp
An application may either directly specify the DH parameters or can supply the
DH parameters via a callback function.
.Pp
Previous versions of the callback used
.Fa is_export
and
.Fa keylength
parameters to control parameter generation for export and non-export
cipher suites.
Modern servers that do not support export ciphersuites are advised
to either use
.Fn SSL_CTX_set_tmp_dh
or alternatively, use the callback but ignore
.Fa keylength
and
.Fa is_export
and simply supply at least 2048-bit parameters in the callback.
.Sh RETURN VALUES
.Fn SSL_CTX_set_tmp_dh_callback
and
.Fn SSL_set_tmp_dh_callback
do not return diagnostic output.
.Pp
.Fn SSL_CTX_set_tmp_dh
and
.Fn SSL_set_tmp_dh
do return 1 on success and 0 on failure.
Check the error queue to find out the reason of failure.
.Sh EXAMPLES
Set up DH parameters with a key length of 2048 bits.
Error handling is partly left out.
.Pp
Command-line parameter generation:
.Pp
.Dl openssl dhparam -out dh_param_2048.pem 2048
.Pp
Code for setting up parameters during server initialization:
.Bd -literal
SSL_CTX ctx = SSL_CTX_new();
\&...

/* Set up ephemeral DH parameters. */
DH *dh_2048 = NULL;
FILE *paramfile;
paramfile = fopen("dh_param_2048.pem", "r");
if (paramfile) {
	dh_2048 = PEM_read_DHparams(paramfile, NULL, NULL, NULL);
	fclose(paramfile);
} else {
	/* Error. */
}
if (dh_2048 == NULL) {
	/* Error. */
}
if (SSL_CTX_set_tmp_dh(ctx, dh_2048) != 1) {
	/* Error. */
}
.Ed
.Sh SEE ALSO
.Xr openssl 1 ,
.Xr ssl 3 ,
.Xr SSL_CTX_set_cipher_list 3 ,
.Xr SSL_CTX_set_options 3
@


1.1
log
@move manual pages from doc/ to man/ for consistency with other
libraries, in particular considering that there are unrelated
files in doc/; requested by jsing@@ and beck@@
@
text
@d1 2
d4 2
a5 1
.\"	$OpenBSD: SSL_CTX_set_tmp_dh_callback.3,v 1.2 2014/12/02 14:11:01 jmc Exp $
d7 45
a51 1
.Dd $Mdocdate: December 2 2014 $
d104 1
a104 1
.Sh NOTES
d122 1
a122 29
The server will always generate a new DH key during the negotiation,
when the DH parameters are supplied via callback and/or when the
.Dv SSL_OP_SINGLE_DH_USE
option of
.Xr SSL_CTX_set_options 3
is set.
It will immediately create a DH key, when DH parameters are supplied via
.Fn SSL_CTX_set_tmp_dh
and
.Dv SSL_OP_SINGLE_DH_USE
is not set.
In this case, it may happen that a key is generated on initialization without
later being needed, while on the other hand the computer time during the
negotiation is being saved.
.Pp
If
.Dq strong
primes were used to generate the DH parameters, it is not strictly necessary to
generate a new key for each handshake but it does improve forward secrecy.
If it is not assured that
.Dq strong
primes were used (see especially the section about DSA parameters below),
.Dv SSL_OP_SINGLE_DH_USE
must be used in order to prevent small subgroup attacks.
Always using
.Dv SSL_OP_SINGLE_DH_USE
has an impact on the computer time needed during negotiation,
but it is not very large,
so application authors/users should consider always enabling this option.
d131 1
a131 1
installation process using the openssl
d133 1
d135 1
a135 6
In order to reduce the computer time needed for this generation,
it is possible to use DSA parameters instead (see
.Xr openssl 1 ) ,
but in this case
.Dv SSL_OP_SINGLE_DH_USE
is mandatory.
a136 1
Application authors may compile in DH parameters.
d138 1
a138 3
.Pa dh512.pem ,
.Pa dh1024.pem ,
.Pa dh2048.pem ,
d151 1
d153 6
a158 4
Authors may also generate their own set of parameters using
.Xr openssl 1 ,
but a user may not be sure how the parameters were generated.
The generation of DH parameters during installation is therefore recommended.
a161 2
The callback approach has the advantage that the callback may supply DH
parameters for different key lengths.
d163 10
a172 3
The
.Fa tmp_dh_callback
is called with the
d174 1
a174 1
needed and the
d176 1
a176 5
information.
The
.Fa is_export
flag is set when the ephemeral DH key exchange is performed with an export
cipher.
d189 8
a196 2
Handle DH parameters for key lengths of 512 and 1024 bits.
(Error handling partly left out.)
d198 1
d200 3
a202 3
/* Set up ephemeral DH stuff */
DH *dh_512 = NULL;
DH *dh_1024 = NULL;
d204 1
a204 5

\&...

/* "openssl dhparam -out dh_param_512.pem -2 512" */
paramfile = fopen("dh_param_512.pem", "r");
d206 1
a206 1
	dh_512 = PEM_read_DHparams(paramfile, NULL, NULL, NULL);
d208 2
d211 2
a212 5
/* "openssl dhparam -out dh_param_1024.pem -2 1024" */
paramfile = fopen("dh_param_1024.pem", "r");
if (paramfile) {
	dh_1024 = PEM_read_DHparams(paramfile, NULL, NULL, NULL);
	fclose(paramfile);
d214 2
a215 32

\&...

/* "openssl dhparam -C -2 512" etc... */
DH *get_dh512() { ... }
DH *get_dh1024() { ... }

DH *
tmp_dh_callback(SSL *s, int is_export, int keylength)
{
	DH *dh_tmp=NULL;

	switch (keylength) {
	case 512:
		if (!dh_512)
			dh_512 = get_dh512();
		dh_tmp = dh_512;
		break;
	case 1024:
		if (!dh_1024)
			dh_1024 = get_dh1024();
		dh_tmp = dh_1024;
		break;
	default:
		/*
		 * Generating a key on the fly is very costly,
		 * so use what is there
		 */
		setup_dh_parameters_like_above();
	}

	return(dh_tmp);
d222 1
a222 2
.Xr SSL_CTX_set_options 3 ,
.Xr SSL_CTX_set_tmp_rsa_callback 3
@

