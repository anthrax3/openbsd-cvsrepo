head	1.27;
access;
symbols
	OPENBSD_6_2:1.27.0.6
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27;
locks; strict;
comment	@ * @;


1.27
date	2017.02.07.02.08.38;	author beck;	state Exp;
branches;
next	1.26;
commitid	xH3OeartUDKSlAnB;

1.26
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.25;
commitid	kT0fLt3r4lroFJra;

1.25
date	2017.01.26.12.44.52;	author beck;	state Exp;
branches;
next	1.24;
commitid	nPqKtm5jopFxLX2d;

1.24
date	2017.01.23.13.36.12;	author jsing;	state Exp;
branches;
next	1.23;
commitid	xYJ523Ay020rUB5W;

1.23
date	2017.01.23.04.55.26;	author beck;	state Exp;
branches;
next	1.22;
commitid	AhwkqHI5lKK3NR31;

1.22
date	2015.09.29.18.08.57;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	qp8UD7Fea371vyUn;

1.21
date	2014.11.16.14.12.47;	author jsing;	state Exp;
branches;
next	1.20;
commitid	M3pvHgIFoWUHNqJn;

1.20
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	mJUVYpkFBZ0Zv2bG;

1.19
date	2014.06.08.14.43.57;	author jsing;	state Exp;
branches;
next	1.18;
commitid	IggZ5AcDfZY93Wy5;

1.18
date	2014.05.30.14.30.50;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.05.28.13.03.24;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.05.26.12.48.11;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.05.02.17.05.41;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.21.16.34.43;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.19.16.50.47;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.14.14.59.47;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.03.02.34.33;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.36;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.25;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.25;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.14;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.14;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.30;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.36.34;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.19;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.49;	author djm;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Change SSLerror() back to taking two args, with the first one being an SSL *.
Make a table of "function codes" which maps the internal state of the SSL *
to something like a useful name so in a typical error in the connection you
know in what sort of place in the handshake things happened. (instead of
by arcane function name).
Add SSLerrorx() for when we don't have an SSL *
ok jsing@@ after us both being prodded by bluhm@@ to make it not terrible
@
text
@/* $OpenBSD: bio_ssl.c,v 1.26 2017/01/29 17:49:23 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/bio.h>
#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/ssl.h>

#include "ssl_locl.h"

static int ssl_write(BIO *h, const char *buf, int num);
static int ssl_read(BIO *h, char *buf, int size);
static int ssl_puts(BIO *h, const char *str);
static long ssl_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int ssl_new(BIO *h);
static int ssl_free(BIO *data);
static long ssl_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);
typedef struct bio_ssl_st {
	SSL *ssl; /* The ssl handle :-) */
	/* re-negotiate every time the total number of bytes is this size */
	int num_renegotiates;
	unsigned long renegotiate_count;
	unsigned long byte_count;
	unsigned long renegotiate_timeout;
	time_t last_time;
} BIO_SSL;

static BIO_METHOD methods_sslp = {
	.type = BIO_TYPE_SSL,
	.name = "ssl",
	.bwrite = ssl_write,
	.bread = ssl_read,
	.bputs = ssl_puts,
	.ctrl = ssl_ctrl,
	.create = ssl_new,
	.destroy = ssl_free,
	.callback_ctrl = ssl_callback_ctrl,
};

BIO_METHOD *
BIO_f_ssl(void)
{
	return (&methods_sslp);
}

static int
ssl_new(BIO *bi)
{
	BIO_SSL *bs;

	bs = calloc(1, sizeof(BIO_SSL));
	if (bs == NULL) {
		SSLerrorx(ERR_R_MALLOC_FAILURE);
		return (0);
	}
	bi->init = 0;
	bi->ptr = (char *)bs;
	bi->flags = 0;
	return (1);
}

static int
ssl_free(BIO *a)
{
	BIO_SSL *bs;

	if (a == NULL)
		return (0);
	bs = (BIO_SSL *)a->ptr;
	if (bs->ssl != NULL)
		SSL_shutdown(bs->ssl);
	if (a->shutdown) {
		if (a->init && (bs->ssl != NULL))
			SSL_free(bs->ssl);
		a->init = 0;
		a->flags = 0;
	}
	free(a->ptr);
	return (1);
}

static int
ssl_read(BIO *b, char *out, int outl)
{
	int ret = 1;
	BIO_SSL *sb;
	SSL *ssl;
	int retry_reason = 0;
	int r = 0;

	if (out == NULL)
		return (0);
	sb = (BIO_SSL *)b->ptr;
	ssl = sb->ssl;

	BIO_clear_retry_flags(b);

	ret = SSL_read(ssl, out, outl);

	switch (SSL_get_error(ssl, ret)) {
	case SSL_ERROR_NONE:
		if (ret <= 0)
			break;
		if (sb->renegotiate_count > 0) {
			sb->byte_count += ret;
			if (sb->byte_count > sb->renegotiate_count) {
				sb->byte_count = 0;
				sb->num_renegotiates++;
				SSL_renegotiate(ssl);
				r = 1;
			}
		}
		if ((sb->renegotiate_timeout > 0) && (!r)) {
			time_t tm;

			tm = time(NULL);
			if (tm > sb->last_time + sb->renegotiate_timeout) {
				sb->last_time = tm;
				sb->num_renegotiates++;
				SSL_renegotiate(ssl);
			}
		}

		break;
	case SSL_ERROR_WANT_READ:
		BIO_set_retry_read(b);
		break;
	case SSL_ERROR_WANT_WRITE:
		BIO_set_retry_write(b);
		break;
	case SSL_ERROR_WANT_X509_LOOKUP:
		BIO_set_retry_special(b);
		retry_reason = BIO_RR_SSL_X509_LOOKUP;
		break;
	case SSL_ERROR_WANT_ACCEPT:
		BIO_set_retry_special(b);
		retry_reason = BIO_RR_ACCEPT;
		break;
	case SSL_ERROR_WANT_CONNECT:
		BIO_set_retry_special(b);
		retry_reason = BIO_RR_CONNECT;
		break;
	case SSL_ERROR_SYSCALL:
	case SSL_ERROR_SSL:
	case SSL_ERROR_ZERO_RETURN:
	default:
		break;
	}

	b->retry_reason = retry_reason;
	return (ret);
}

static int
ssl_write(BIO *b, const char *out, int outl)
{
	int ret, r = 0;
	int retry_reason = 0;
	SSL *ssl;
	BIO_SSL *bs;

	if (out == NULL)
		return (0);
	bs = (BIO_SSL *)b->ptr;
	ssl = bs->ssl;

	BIO_clear_retry_flags(b);

/*	ret=SSL_do_handshake(ssl);
	if (ret > 0) */
		ret = SSL_write(ssl, out, outl);

	switch (SSL_get_error(ssl, ret)) {
	case SSL_ERROR_NONE:
		if (ret <= 0)
			break;
		if (bs->renegotiate_count > 0) {
			bs->byte_count += ret;
			if (bs->byte_count > bs->renegotiate_count) {
				bs->byte_count = 0;
				bs->num_renegotiates++;
				SSL_renegotiate(ssl);
				r = 1;
			}
		}
		if ((bs->renegotiate_timeout > 0) && (!r)) {
			time_t tm;

			tm = time(NULL);
			if (tm > bs->last_time + bs->renegotiate_timeout) {
				bs->last_time = tm;
				bs->num_renegotiates++;
				SSL_renegotiate(ssl);
			}
		}
		break;
	case SSL_ERROR_WANT_WRITE:
		BIO_set_retry_write(b);
		break;
	case SSL_ERROR_WANT_READ:
		BIO_set_retry_read(b);
		break;
	case SSL_ERROR_WANT_X509_LOOKUP:
		BIO_set_retry_special(b);
		retry_reason = BIO_RR_SSL_X509_LOOKUP;
		break;
	case SSL_ERROR_WANT_CONNECT:
		BIO_set_retry_special(b);
		retry_reason = BIO_RR_CONNECT;
	case SSL_ERROR_SYSCALL:
	case SSL_ERROR_SSL:
	default:
		break;
	}

	b->retry_reason = retry_reason;
	return (ret);
}

static long
ssl_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	SSL **sslp, *ssl;
	BIO_SSL *bs;
	BIO *dbio, *bio;
	long ret = 1;

	bs = (BIO_SSL *)b->ptr;
	ssl = bs->ssl;
	if ((ssl == NULL)  && (cmd != BIO_C_SET_SSL))
		return (0);
	switch (cmd) {
	case BIO_CTRL_RESET:
		SSL_shutdown(ssl);

		if (ssl->internal->handshake_func ==
		    ssl->method->internal->ssl_connect)
			SSL_set_connect_state(ssl);
		else if (ssl->internal->handshake_func ==
		    ssl->method->internal->ssl_accept)
			SSL_set_accept_state(ssl);

		SSL_clear(ssl);

		if (b->next_bio != NULL)
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		else if (ssl->rbio != NULL)
			ret = BIO_ctrl(ssl->rbio, cmd, num, ptr);
		else
			ret = 1;
		break;
	case BIO_CTRL_INFO:
		ret = 0;
		break;
	case BIO_C_SSL_MODE:
		if (num) /* client mode */
			SSL_set_connect_state(ssl);
		else
			SSL_set_accept_state(ssl);
		break;
	case BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT:
		ret = bs->renegotiate_timeout;
		if (num < 60)
			num = 5;
		bs->renegotiate_timeout = (unsigned long)num;
		bs->last_time = time(NULL);
		break;
	case BIO_C_SET_SSL_RENEGOTIATE_BYTES:
		ret = bs->renegotiate_count;
		if ((long)num >=512)
			bs->renegotiate_count = (unsigned long)num;
		break;
	case BIO_C_GET_SSL_NUM_RENEGOTIATES:
		ret = bs->num_renegotiates;
		break;
	case BIO_C_SET_SSL:
		if (ssl != NULL) {
			ssl_free(b);
			if (!ssl_new(b))
				return 0;
		}
		b->shutdown = (int)num;
		ssl = (SSL *)ptr;
		((BIO_SSL *)b->ptr)->ssl = ssl;
		bio = SSL_get_rbio(ssl);
		if (bio != NULL) {
			if (b->next_bio != NULL)
				BIO_push(bio, b->next_bio);
			b->next_bio = bio;
			CRYPTO_add(&bio->references, 1, CRYPTO_LOCK_BIO);
		}
		b->init = 1;
		break;
	case BIO_C_GET_SSL:
		if (ptr != NULL) {
			sslp = (SSL **)ptr;
			*sslp = ssl;
		} else
			ret = 0;
		break;
	case BIO_CTRL_GET_CLOSE:
		ret = b->shutdown;
		break;
	case BIO_CTRL_SET_CLOSE:
		b->shutdown = (int)num;
		break;
	case BIO_CTRL_WPENDING:
		ret = BIO_ctrl(ssl->wbio, cmd, num, ptr);
		break;
	case BIO_CTRL_PENDING:
		ret = SSL_pending(ssl);
		if (ret == 0)
			ret = BIO_pending(ssl->rbio);
		break;
	case BIO_CTRL_FLUSH:
		BIO_clear_retry_flags(b);
		ret = BIO_ctrl(ssl->wbio, cmd, num, ptr);
		BIO_copy_next_retry(b);
		break;
	case BIO_CTRL_PUSH:
		if ((b->next_bio != NULL) && (b->next_bio != ssl->rbio)) {
			SSL_set_bio(ssl, b->next_bio, b->next_bio);
			CRYPTO_add(&b->next_bio->references, 1,
			    CRYPTO_LOCK_BIO);
		}
		break;
	case BIO_CTRL_POP:
		/* Only detach if we are the BIO explicitly being popped */
		if (b == ptr) {
			/* Shouldn't happen in practice because the
			 * rbio and wbio are the same when pushed.
			 */
			if (ssl->rbio != ssl->wbio)
				BIO_free_all(ssl->wbio);
			if (b->next_bio != NULL)
				CRYPTO_add(&b->next_bio->references, -1, CRYPTO_LOCK_BIO);
			ssl->wbio = NULL;
			ssl->rbio = NULL;
		}
		break;
	case BIO_C_DO_STATE_MACHINE:
		BIO_clear_retry_flags(b);

		b->retry_reason = 0;
		ret = (int)SSL_do_handshake(ssl);

		switch (SSL_get_error(ssl, (int)ret)) {
		case SSL_ERROR_WANT_READ:
			BIO_set_flags(b,
			    BIO_FLAGS_READ|BIO_FLAGS_SHOULD_RETRY);
			break;
		case SSL_ERROR_WANT_WRITE:
			BIO_set_flags(b,
			    BIO_FLAGS_WRITE|BIO_FLAGS_SHOULD_RETRY);
			break;
		case SSL_ERROR_WANT_CONNECT:
			BIO_set_flags(b,
			    BIO_FLAGS_IO_SPECIAL|BIO_FLAGS_SHOULD_RETRY);
			b->retry_reason = b->next_bio->retry_reason;
			break;
		default:
			break;
		}
		break;
	case BIO_CTRL_DUP:
		dbio = (BIO *)ptr;
		if (((BIO_SSL *)dbio->ptr)->ssl != NULL)
			SSL_free(((BIO_SSL *)dbio->ptr)->ssl);
		((BIO_SSL *)dbio->ptr)->ssl = SSL_dup(ssl);
		((BIO_SSL *)dbio->ptr)->renegotiate_count =
		    ((BIO_SSL *)b->ptr)->renegotiate_count;
		((BIO_SSL *)dbio->ptr)->byte_count =
		    ((BIO_SSL *)b->ptr)->byte_count;
		((BIO_SSL *)dbio->ptr)->renegotiate_timeout =
		    ((BIO_SSL *)b->ptr)->renegotiate_timeout;
		((BIO_SSL *)dbio->ptr)->last_time =
		    ((BIO_SSL *)b->ptr)->last_time;
		ret = (((BIO_SSL *)dbio->ptr)->ssl != NULL);
		break;
	case BIO_C_GET_FD:
		ret = BIO_ctrl(ssl->rbio, cmd, num, ptr);
		break;
	case BIO_CTRL_SET_CALLBACK:
		{
			ret = 0;
		}
		break;
	case BIO_CTRL_GET_CALLBACK:
		{
			void (**fptr)(const SSL *xssl, int type, int val);

			fptr = (void (**)(const SSL *xssl, int type, int val))
			    ptr;
			*fptr = SSL_get_info_callback(ssl);
		}
		break;
	default:
		ret = BIO_ctrl(ssl->rbio, cmd, num, ptr);
		break;
	}
	return (ret);
}

static long
ssl_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	SSL *ssl;
	BIO_SSL *bs;
	long ret = 1;

	bs = (BIO_SSL *)b->ptr;
	ssl = bs->ssl;
	switch (cmd) {
	case BIO_CTRL_SET_CALLBACK:
		{
		/* FIXME: setting this via a completely different prototype
		   seems like a crap idea */
			SSL_set_info_callback(ssl,
			    (void (*)(const SSL *, int, int))fp);
		}
		break;
	default:
		ret = BIO_callback_ctrl(ssl->rbio, cmd, fp);
		break;
	}
	return (ret);
}

static int
ssl_puts(BIO *bp, const char *str)
{
	int n, ret;

	n = strlen(str);
	ret = BIO_write(bp, str, n);
	return (ret);
}

BIO *
BIO_new_buffer_ssl_connect(SSL_CTX *ctx)
{
	BIO *ret = NULL, *buf = NULL, *ssl = NULL;

	if ((buf = BIO_new(BIO_f_buffer())) == NULL)
		goto err;
	if ((ssl = BIO_new_ssl_connect(ctx)) == NULL)
		goto err;
	if ((ret = BIO_push(buf, ssl)) == NULL)
		goto err;
	return (ret);

err:
	BIO_free(buf);
	BIO_free(ssl);
	return (NULL);
}

BIO *
BIO_new_ssl_connect(SSL_CTX *ctx)
{
	BIO *ret = NULL, *con = NULL, *ssl = NULL;

	if ((con = BIO_new(BIO_s_connect())) == NULL)
		goto err;
	if ((ssl = BIO_new_ssl(ctx, 1)) == NULL)
		goto err;
	if ((ret = BIO_push(ssl, con)) == NULL)
		goto err;
	return (ret);

err:
	BIO_free(con);
	BIO_free(ssl);
	return (NULL);
}

BIO *
BIO_new_ssl(SSL_CTX *ctx, int client)
{
	BIO *ret;
	SSL *ssl;

	if ((ret = BIO_new(BIO_f_ssl())) == NULL)
		goto err;
	if ((ssl = SSL_new(ctx)) == NULL)
		goto err;

	if (client)
		SSL_set_connect_state(ssl);
	else
		SSL_set_accept_state(ssl);

	BIO_set_ssl(ret, ssl, BIO_CLOSE);
	return (ret);

err:
	BIO_free(ret);
	return (NULL);
}

int
BIO_ssl_copy_session_id(BIO *t, BIO *f)
{
	t = BIO_find_type(t, BIO_TYPE_SSL);
	f = BIO_find_type(f, BIO_TYPE_SSL);
	if ((t == NULL) || (f == NULL))
		return (0);
	if ((((BIO_SSL *)t->ptr)->ssl == NULL) ||
	    (((BIO_SSL *)f->ptr)->ssl == NULL))
		return (0);
	SSL_copy_session_id(((BIO_SSL *)t->ptr)->ssl, ((BIO_SSL *)f->ptr)->ssl);
	return (1);
}

void
BIO_ssl_shutdown(BIO *b)
{
	SSL *s;

	while (b != NULL) {
		if (b->method->type == BIO_TYPE_SSL) {
			s = ((BIO_SSL *)b->ptr)->ssl;
			SSL_shutdown(s);
			break;
		}
		b = b->next_bio;
	}
}
@


1.26
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_ssl.c,v 1.25 2017/01/26 12:44:52 beck Exp $ */
d113 1
a113 1
		SSLerror(ERR_R_MALLOC_FAILURE);
@


1.25
log
@knf
@
text
@d1 1
a1 1
/* $OpenBSD: bio_ssl.c,v 1.24 2017/01/23 13:36:12 jsing Exp $ */
d113 1
a113 1
		BIOerr(BIO_F_SSL_NEW, ERR_R_MALLOC_FAILURE);
@


1.24
log
@Split most of SSL_METHOD out into an internal variant, which is opaque.

Discussed with beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_ssl.c,v 1.23 2017/01/23 04:55:26 beck Exp $ */
d296 2
a297 1
		if (ssl->internal->handshake_func == ssl->method->internal->ssl_connect)
d299 2
a300 1
		else if (ssl->internal->handshake_func == ssl->method->internal->ssl_accept)
d383 2
a384 1
			CRYPTO_add(&b->next_bio->references, 1, CRYPTO_LOCK_BIO);
d452 2
a453 1
			fptr = (void (**)(const SSL *xssl, int type, int val))ptr;
d478 2
a479 1
			SSL_set_info_callback(ssl, (void (*)(const SSL *, int, int))fp);
@


1.23
log
@move the callbacks from ssl_st to internal
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_ssl.c,v 1.22 2015/09/29 18:08:57 deraadt Exp $ */
d296 1
a296 1
		if (ssl->internal->handshake_func == ssl->method->ssl_connect)
d298 1
a298 1
		else if (ssl->internal->handshake_func == ssl->method->ssl_accept)
@


1.22
log
@convert "last_time" to a time_t, to handle beyond Y2038
ok guenther miod
@
text
@d1 1
a1 1
/* $OpenBSD: bio_ssl.c,v 1.21 2014/11/16 14:12:47 jsing Exp $ */
d69 2
d296 1
a296 1
		if (ssl->handshake_func == ssl->method->ssl_connect)
d298 1
a298 1
		else if (ssl->handshake_func == ssl->method->ssl_accept)
@


1.21
log
@Sort and group includes.
@
text
@d1 1
a1 1
/* $OpenBSD: bio_ssl.c,v 1.20 2014/06/12 15:49:31 deraadt Exp $ */
d83 1
a83 1
	unsigned long last_time;
d172 1
a172 1
			unsigned long tm;
d174 1
a174 1
			tm = (unsigned long)time(NULL);
d245 1
a245 1
			unsigned long tm;
d247 1
a247 1
			tm = (unsigned long)time(NULL);
d322 1
a322 1
		bs->last_time = (unsigned long)time(NULL);
@


1.20
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d63 2
a64 1
#include <errno.h>
a65 1
#include <openssl/bio.h>
@


1.19
log
@Clean up BIO_free() handling in bio_ssl.c - BIO_free() has its own NULL
check, so do not duplicate it here. Make the error handling consistent
by always using 'goto err' rather than returning in certain cases. Also
add a missing BIO_free(ssl) in BIO_new_ssl_connect().

ok deraadt@@
@
text
@d1 1
a1 1
/* ssl/bio_ssl.c */
@


1.18
log
@remove some #if 0 code. we don't need any more reminders that we're using
a not quite appropriate data structure. ok jsing
@
text
@d497 1
a497 1
		return (NULL);
d503 1
d505 2
a506 4
	if (buf != NULL)
		BIO_free(buf);
	if (ssl != NULL)
		BIO_free(ssl);
d516 1
a516 1
		return (NULL);
d522 1
d524 2
a525 2
	if (con != NULL)
		BIO_free(con);
d536 4
a539 5
		return (NULL);
	if ((ssl = SSL_new(ctx)) == NULL) {
		BIO_free(ret);
		return (NULL);
	}
d547 4
@


1.17
log
@There is no point in checking if a pointer is non-NULL before calling free,
since free already does this for us. Also remove some pointless NULL
assignments, where the result from malloc(3) is immediately assigned to the
same variable.

ok miod@@
@
text
@a154 12
#if 0
	if (!SSL_is_init_finished(ssl)) {
/*		ret=SSL_do_handshake(ssl); */
		if (ret > 0) {

			outflags = (BIO_FLAGS_READ|BIO_FLAGS_SHOULD_RETRY);
			ret = -1;
			goto end;
		}
	}
#endif
/*	if (ret > 0) */
a438 4
#if 0 /* FIXME: Should this be used?  -- Richard Levitte */
			SSLerr(SSL_F_SSL_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
			ret = -1;
#else
a439 1
#endif
@


1.16
log
@Use C99 initialisers for BIO_METHOD.
@
text
@d135 1
a135 2
	if (a->ptr != NULL)
		free(a->ptr);
@


1.15
log
@Nuke OPENSSL_NO_SOCK since any half sane operating system has sockets.

ok beck@@
@
text
@d86 9
a94 9
	BIO_TYPE_SSL, "ssl",
	ssl_write,
	ssl_read,
	ssl_puts,
	NULL, /* ssl_gets, */
	ssl_ctrl,
	ssl_new,
	ssl_free,
	ssl_callback_ctrl,
@


1.14
log
@more malloc/realloc/calloc cleanups; ok beck kettenis
@
text
@a511 1
#ifndef OPENSSL_NO_SOCK
a525 1
#endif
a531 1
#ifndef OPENSSL_NO_SOCK
a543 1
#endif
@


1.13
log
@More KNF.
@
text
@d108 1
a108 1
	bs = (BIO_SSL *)malloc(sizeof(BIO_SSL));
a112 1
	memset(bs, 0, sizeof(BIO_SSL));
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d97 2
a98 2
BIO_METHOD
*BIO_f_ssl(void)
d415 1
a415 1
		switch (SSL_get_error(ssl,(int)ret)) {
d418 1
a418 1
			BIO_FLAGS_READ|BIO_FLAGS_SHOULD_RETRY);
d422 1
a422 1
			BIO_FLAGS_WRITE|BIO_FLAGS_SHOULD_RETRY);
d426 1
a426 1
			BIO_FLAGS_IO_SPECIAL|BIO_FLAGS_SHOULD_RETRY);
d490 1
a490 1
			SSL_set_info_callback(ssl,(void (*)(const SSL *, int, int))fp);
d510 2
a511 2
BIO
*BIO_new_buffer_ssl_connect(SSL_CTX *ctx)
d532 2
a533 2
BIO
*BIO_new_ssl_connect(SSL_CTX *ctx)
d552 2
a553 2
BIO
*BIO_new_ssl(SSL_CTX *ctx, int client)
d583 1
a583 1
	SSL_copy_session_id(((BIO_SSL *)t->ptr)->ssl,((BIO_SSL *)f->ptr)->ssl);
@


1.11
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d108 1
a108 1
	bs = (BIO_SSL *)OPENSSL_malloc(sizeof(BIO_SSL));
d137 1
a137 1
		OPENSSL_free(a->ptr);
@


1.10
log
@resolve conflicts
@
text
@d75 1
a75 2
typedef struct bio_ssl_st
	{
d83 1
a83 1
	} BIO_SSL;
d85 2
a86 3
static BIO_METHOD methods_sslp=
	{
	BIO_TYPE_SSL,"ssl",
d95 1
a95 1
	};
d97 9
a105 7
BIO_METHOD *BIO_f_ssl(void)
	{
	return(&methods_sslp);
	}

static int ssl_new(BIO *bi)
	{
d108 15
a122 15
	bs=(BIO_SSL *)OPENSSL_malloc(sizeof(BIO_SSL));
	if (bs == NULL)
		{
		BIOerr(BIO_F_SSL_NEW,ERR_R_MALLOC_FAILURE);
		return(0);
		}
	memset(bs,0,sizeof(BIO_SSL));
	bi->init=0;
	bi->ptr=(char *)bs;
	bi->flags=0;
	return(1);
	}

static int ssl_free(BIO *a)
	{
d125 6
a130 5
	if (a == NULL) return(0);
	bs=(BIO_SSL *)a->ptr;
	if (bs->ssl != NULL) SSL_shutdown(bs->ssl);
	if (a->shutdown)
		{
d133 3
a135 3
		a->init=0;
		a->flags=0;
		}
d138 7
a144 6
	return(1);
	}
	
static int ssl_read(BIO *b, char *out, int outl)
	{
	int ret=1;
d147 2
a148 2
	int retry_reason=0;
	int r=0;
d150 4
a153 3
	if (out == NULL) return(0);
	sb=(BIO_SSL *)b->ptr;
	ssl=sb->ssl;
d158 1
a158 2
	if (!SSL_is_init_finished(ssl))
		{
d160 1
a160 2
		if (ret > 0)
			{
d162 2
a163 2
			outflags=(BIO_FLAGS_READ|BIO_FLAGS_SHOULD_RETRY);
			ret= -1;
a164 1
			}
d166 1
d169 1
a169 1
	ret=SSL_read(ssl,out,outl);
d171 1
a171 2
	switch (SSL_get_error(ssl,ret))
		{
d173 6
a178 7
		if (ret <= 0) break;
		if (sb->renegotiate_count > 0)
			{
			sb->byte_count+=ret;
			if (sb->byte_count > sb->renegotiate_count)
				{
				sb->byte_count=0;
d181 1
a181 2
				r=1;
				}
d183 2
a184 2
		if ((sb->renegotiate_timeout > 0) && (!r))
			{
d187 3
a189 4
			tm=(unsigned long)time(NULL);
			if (tm > sb->last_time+sb->renegotiate_timeout)
				{
				sb->last_time=tm;
a191 1
				}
d193 1
d204 1
a204 1
		retry_reason=BIO_RR_SSL_X509_LOOKUP;
d208 1
a208 1
		retry_reason=BIO_RR_ACCEPT;
d212 1
a212 1
		retry_reason=BIO_RR_CONNECT;
a218 4
		}

	b->retry_reason=retry_reason;
	return(ret);
d221 9
a229 4
static int ssl_write(BIO *b, const char *out, int outl)
	{
	int ret,r=0;
	int retry_reason=0;
d233 4
a236 3
	if (out == NULL) return(0);
	bs=(BIO_SSL *)b->ptr;
	ssl=bs->ssl;
d242 1
a242 1
	ret=SSL_write(ssl,out,outl);
d244 1
a244 2
	switch (SSL_get_error(ssl,ret))
		{
d246 6
a251 7
		if (ret <= 0) break;
		if (bs->renegotiate_count > 0)
			{
			bs->byte_count+=ret;
			if (bs->byte_count > bs->renegotiate_count)
				{
				bs->byte_count=0;
d254 1
a254 2
				r=1;
				}
d256 2
a257 2
		if ((bs->renegotiate_timeout > 0) && (!r))
			{
d260 3
a262 4
			tm=(unsigned long)time(NULL);
			if (tm > bs->last_time+bs->renegotiate_timeout)
				{
				bs->last_time=tm;
a264 1
				}
d266 1
d276 1
a276 1
		retry_reason=BIO_RR_SSL_X509_LOOKUP;
d280 1
a280 1
		retry_reason=BIO_RR_CONNECT;
a284 4
		}

	b->retry_reason=retry_reason;
	return(ret);
d287 8
a294 3
static long ssl_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
	SSL **sslp,*ssl;
d296 2
a297 2
	BIO *dbio,*bio;
	long ret=1;
d299 2
a300 2
	bs=(BIO_SSL *)b->ptr;
	ssl=bs->ssl;
d302 2
a303 3
		return(0);
	switch (cmd)
		{
d315 1
a315 1
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d317 1
a317 1
			ret=BIO_ctrl(ssl->rbio,cmd,num,ptr);
d319 1
a319 1
			ret=1;
d322 1
a322 1
		ret=0;
d331 5
a335 4
		ret=bs->renegotiate_timeout;
		if (num < 60) num=5;
		bs->renegotiate_timeout=(unsigned long)num;
		bs->last_time=(unsigned long)time(NULL);
d338 1
a338 1
		ret=bs->renegotiate_count;
d340 1
a340 1
			bs->renegotiate_count=(unsigned long)num;
d343 1
a343 1
		ret=bs->num_renegotiates;
d346 1
a346 2
		if (ssl != NULL)
			{
d350 6
a355 7
			}
		b->shutdown=(int)num;
		ssl=(SSL *)ptr;
		((BIO_SSL *)b->ptr)->ssl=ssl;
		bio=SSL_get_rbio(ssl);
		if (bio != NULL)
			{
d357 5
a361 5
				BIO_push(bio,b->next_bio);
			b->next_bio=bio;
			CRYPTO_add(&bio->references,1,CRYPTO_LOCK_BIO);
			}
		b->init=1;
d364 5
a368 7
		if (ptr != NULL)
			{
			sslp=(SSL **)ptr;
			*sslp=ssl;
			}
		else
			ret=0;
d371 1
a371 1
		ret=b->shutdown;
d374 1
a374 1
		b->shutdown=(int)num;
d377 1
a377 1
		ret=BIO_ctrl(ssl->wbio,cmd,num,ptr);
d380 1
a380 1
		ret=SSL_pending(ssl);
d382 1
a382 1
			ret=BIO_pending(ssl->rbio);
d386 1
a386 1
		ret=BIO_ctrl(ssl->wbio,cmd,num,ptr);
d390 4
a393 5
		if ((b->next_bio != NULL) && (b->next_bio != ssl->rbio))
			{
			SSL_set_bio(ssl,b->next_bio,b->next_bio);
			CRYPTO_add(&b->next_bio->references,1,CRYPTO_LOCK_BIO);
			}
d397 1
a397 2
		if (b == ptr)
			{
d404 4
a407 4
				CRYPTO_add(&b->next_bio->references,-1,CRYPTO_LOCK_BIO);
			ssl->wbio=NULL;
			ssl->rbio=NULL;
			}
d412 2
a413 2
		b->retry_reason=0;
		ret=(int)SSL_do_handshake(ssl);
d415 1
a415 2
		switch (SSL_get_error(ssl,(int)ret))
			{
d418 1
a418 1
				BIO_FLAGS_READ|BIO_FLAGS_SHOULD_RETRY);
d422 1
a422 1
				BIO_FLAGS_WRITE|BIO_FLAGS_SHOULD_RETRY);
d426 2
a427 2
				BIO_FLAGS_IO_SPECIAL|BIO_FLAGS_SHOULD_RETRY);
			b->retry_reason=b->next_bio->retry_reason;
d431 1
a431 1
			}
d434 1
a434 1
		dbio=(BIO *)ptr;
d437 10
a446 10
		((BIO_SSL *)dbio->ptr)->ssl=SSL_dup(ssl);
		((BIO_SSL *)dbio->ptr)->renegotiate_count=
			((BIO_SSL *)b->ptr)->renegotiate_count;
		((BIO_SSL *)dbio->ptr)->byte_count=
			((BIO_SSL *)b->ptr)->byte_count;
		((BIO_SSL *)dbio->ptr)->renegotiate_timeout=
			((BIO_SSL *)b->ptr)->renegotiate_timeout;
		((BIO_SSL *)dbio->ptr)->last_time=
			((BIO_SSL *)b->ptr)->last_time;
		ret=(((BIO_SSL *)dbio->ptr)->ssl != NULL);
d449 1
a449 1
		ret=BIO_ctrl(ssl->rbio,cmd,num,ptr);
d454 2
a455 2
		SSLerr(SSL_F_SSL_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		ret = -1;
d457 1
a457 1
		ret=0;
d463 1
a463 1
		void (**fptr)(const SSL *xssl,int type,int val);
d465 2
a466 2
		fptr=(void (**)(const SSL *xssl,int type,int val))ptr;
		*fptr=SSL_get_info_callback(ssl);
d470 1
a470 1
		ret=BIO_ctrl(ssl->rbio,cmd,num,ptr);
a471 2
		}
	return(ret);
d473 2
d476 3
a478 2
static long ssl_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
d481 1
a481 1
	long ret=1;
d483 3
a485 4
	bs=(BIO_SSL *)b->ptr;
	ssl=bs->ssl;
	switch (cmd)
		{
d490 1
a490 1
		SSL_set_info_callback(ssl,(void (*)(const SSL *,int,int))fp);
d494 1
a494 1
		ret=BIO_callback_ctrl(ssl->rbio,cmd,fp);
a495 2
		}
	return(ret);
d497 2
d500 9
a508 8
static int ssl_puts(BIO *bp, const char *str)
	{
	int n,ret;

	n=strlen(str);
	ret=BIO_write(bp,str,n);
	return(ret);
	}
d510 3
a512 2
BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx)
	{
d514 1
a514 1
	BIO *ret=NULL,*buf=NULL,*ssl=NULL;
d516 3
a518 3
	if ((buf=BIO_new(BIO_f_buffer())) == NULL)
		return(NULL);
	if ((ssl=BIO_new_ssl_connect(ctx)) == NULL)
d520 1
a520 1
	if ((ret=BIO_push(buf,ssl)) == NULL)
d522 1
a522 1
	return(ret);
d524 4
a527 2
	if (buf != NULL) BIO_free(buf);
	if (ssl != NULL) BIO_free(ssl);
d529 2
a530 2
	return(NULL);
	}
d532 3
a534 2
BIO *BIO_new_ssl_connect(SSL_CTX *ctx)
	{
d536 1
a536 1
	BIO *ret=NULL,*con=NULL,*ssl=NULL;
d538 3
a540 3
	if ((con=BIO_new(BIO_s_connect())) == NULL)
		return(NULL);
	if ((ssl=BIO_new_ssl(ctx,1)) == NULL)
d542 1
a542 1
	if ((ret=BIO_push(ssl,con)) == NULL)
d544 1
a544 1
	return(ret);
d546 2
a547 1
	if (con != NULL) BIO_free(con);
d549 2
a550 2
	return(NULL);
	}
d552 3
a554 2
BIO *BIO_new_ssl(SSL_CTX *ctx, int client)
	{
d558 3
a560 4
	if ((ret=BIO_new(BIO_f_ssl())) == NULL)
		return(NULL);
	if ((ssl=SSL_new(ctx)) == NULL)
		{
d562 2
a563 2
		return(NULL);
		}
a567 4
		
	BIO_set_ssl(ret,ssl,BIO_CLOSE);
	return(ret);
	}
d569 9
a577 4
int BIO_ssl_copy_session_id(BIO *t, BIO *f)
	{
	t=BIO_find_type(t,BIO_TYPE_SSL);
	f=BIO_find_type(f,BIO_TYPE_SSL);
d579 4
a582 4
		return(0);
	if (	(((BIO_SSL *)t->ptr)->ssl == NULL) || 
		(((BIO_SSL *)f->ptr)->ssl == NULL))
		return(0);
d584 2
a585 2
	return(1);
	}
d587 3
a589 2
void BIO_ssl_shutdown(BIO *b)
	{
d592 3
a594 5
	while (b != NULL)
		{
		if (b->method->type == BIO_TYPE_SSL)
			{
			s=((BIO_SSL *)b->ptr)->ssl;
a596 2
			}
		b=b->next_bio;
d598 1
d600 1
@


1.9
log
@openssl-1.0.0e: resolve conflicts
@
text
@d541 1
d553 1
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d351 1
d353 3
@


1.7
log
@resolve conflicts
@
text
@d401 2
a402 2
		/* ugly bit of a hack */
		if (ssl->rbio != ssl->wbio) /* we are in trouble :-( */
d404 9
a412 1
			BIO_free_all(ssl->wbio);
a413 6
		if (b->next_bio != NULL)
			{
			CRYPTO_add(&b->next_bio->references,1,CRYPTO_LOCK_BIO);
			}
		ssl->wbio=NULL;
		ssl->rbio=NULL;
a547 1
	if (ret != NULL) BIO_free(ret);
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d459 1
a459 1
		BIOerr(SSL_F_SSL_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d468 1
a468 1
		void (**fptr)();
d470 1
a470 1
		fptr=(void (**)())ptr;
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d406 4
d516 1
d529 1
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d209 4
d489 3
a491 1
		SSL_set_info_callback(ssl,fp);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 4
a71 4
static int ssl_write(BIO *h,char *buf,int num);
static int ssl_read(BIO *h,char *buf,int size);
static int ssl_puts(BIO *h,char *str);
static long ssl_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d74 1
a74 1
static long ssl_callback_ctrl(BIO *h,int cmd,void (*fp)());
d108 1
a108 1
	bs=(BIO_SSL *)Malloc(sizeof(BIO_SSL));
d136 1
a136 1
		Free(a->ptr);
d224 1
a224 1
static int ssl_write(BIO *b, char *out, int outl)
d292 1
a292 1
static long ssl_ctrl(BIO *b, int cmd, long num, char *ptr)
d473 1
a473 1
static long ssl_callback_ctrl(BIO *b, int cmd, void (*fp)())
d495 1
a495 1
static int ssl_puts(BIO *bp, char *str)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d74 1
d96 1
d449 8
a456 1
		SSL_set_info_callback(ssl,(void (*)())ptr);
d468 22
@


1.1
log
@Initial revision
@
text
@d63 4
a66 4
#include "crypto.h"
#include "bio.h"
#include "err.h"
#include "ssl.h"
a67 1
#ifndef NOPROTO
a73 9
#else
static int ssl_write();
static int ssl_read();
static int ssl_puts();
static long ssl_ctrl();
static int ssl_new();
static int ssl_free();
#endif

d97 1
a97 1
BIO_METHOD *BIO_f_ssl()
d102 1
a102 2
static int ssl_new(bi)
BIO *bi;
d119 1
a119 2
static int ssl_free(a)
BIO *a;
d138 1
a138 4
static int ssl_read(b,out,outl)
BIO *b;
char *out;
int outl;
d222 1
a222 4
static int ssl_write(b,out,outl)
BIO *b;
char *out;
int outl;
d290 1
a290 5
static long ssl_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
d464 1
a464 3
static int ssl_puts(bp,str)
BIO *bp;
char *str;
d473 1
a473 2
BIO *BIO_new_buffer_ssl_connect(ctx)
SSL_CTX *ctx;
d490 1
a490 2
BIO *BIO_new_ssl_connect(ctx)
SSL_CTX *ctx;
d507 1
a507 3
BIO *BIO_new_ssl(ctx,client)
SSL_CTX *ctx;
int client;
d528 1
a528 2
int BIO_ssl_copy_session_id(t,f)
BIO *t,*f;
d541 1
a541 2
void BIO_ssl_shutdown(b)
BIO *b;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d63 10
a72 9
#include <openssl/crypto.h>
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/ssl.h>

static int ssl_write(BIO *h, const char *buf, int num);
static int ssl_read(BIO *h, char *buf, int size);
static int ssl_puts(BIO *h, const char *str);
static long ssl_ctrl(BIO *h, int cmd, long arg1, void *arg2);
d75 9
a83 1
static long ssl_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);
a104 1
	ssl_callback_ctrl,
d107 1
a107 1
BIO_METHOD *BIO_f_ssl(void)
d112 2
a113 1
static int ssl_new(BIO *bi)
d117 1
a117 1
	bs=(BIO_SSL *)OPENSSL_malloc(sizeof(BIO_SSL));
d130 2
a131 1
static int ssl_free(BIO *a)
d146 1
a146 1
		OPENSSL_free(a->ptr);
d150 4
a153 1
static int ssl_read(BIO *b, char *out, int outl)
a221 4
	case SSL_ERROR_WANT_ACCEPT:
		BIO_set_retry_special(b);
		retry_reason=BIO_RR_ACCEPT;
		break;
d237 4
a240 1
static int ssl_write(BIO *b, const char *out, int outl)
d308 5
a312 1
static long ssl_ctrl(BIO *b, int cmd, long num, void *ptr)
d469 1
a469 8
		{
#if 0 /* FIXME: Should this be used?  -- Richard Levitte */
		BIOerr(SSL_F_SSL_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		ret = -1;
#else
		ret=0;
#endif
		}
d486 3
a488 25
static long ssl_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	SSL *ssl;
	BIO_SSL *bs;
	long ret=1;

	bs=(BIO_SSL *)b->ptr;
	ssl=bs->ssl;
	switch (cmd)
		{
	case BIO_CTRL_SET_CALLBACK:
		{
		/* FIXME: setting this via a completely different prototype
		   seems like a crap idea */
		SSL_set_info_callback(ssl,(void (*)(const SSL *,int,int))fp);
		}
		break;
	default:
		ret=BIO_callback_ctrl(ssl->rbio,cmd,fp);
		break;
		}
	return(ret);
	}

static int ssl_puts(BIO *bp, const char *str)
d497 2
a498 1
BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx)
d515 2
a516 1
BIO *BIO_new_ssl_connect(SSL_CTX *ctx)
d533 3
a535 1
BIO *BIO_new_ssl(SSL_CTX *ctx, int client)
d556 2
a557 1
int BIO_ssl_copy_session_id(BIO *t, BIO *f)
d570 2
a571 1
void BIO_ssl_shutdown(BIO *b)
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a405 4
		if (b->next_bio != NULL)
			{
			CRYPTO_add(&b->next_bio->references,1,CRYPTO_LOCK_BIO);
			}
a511 1
#ifndef OPENSSL_NO_SOCK
a523 1
#endif
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d459 1
a459 1
		SSLerr(SSL_F_SSL_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d468 1
a468 1
		void (**fptr)(const SSL *xssl,int type,int val);
d470 1
a470 1
		fptr=(void (**)(const SSL *xssl,int type,int val))ptr;
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d401 2
a402 2
		/* Only detach if we are the BIO explicitly being popped */
		if (b == ptr)
d404 1
a404 9
			/* Shouldn't happen in practice because the
			 * rbio and wbio are the same when pushed.
			 */
			if (ssl->rbio != ssl->wbio)
				BIO_free_all(ssl->wbio);
			if (b->next_bio != NULL)
				CRYPTO_add(&b->next_bio->references,-1,CRYPTO_LOCK_BIO);
			ssl->wbio=NULL;
			ssl->rbio=NULL;
d406 6
d546 1
@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@a350 1
			{
a351 3
			if (!ssl_new(b))
				return 0;
			}
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@a540 1
#ifndef OPENSSL_NO_SOCK
a551 1
#endif
@


