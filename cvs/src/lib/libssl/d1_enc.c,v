head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.2
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.14
date	2017.01.23.08.08.06;	author beck;	state Exp;
branches;
next	1.13;
commitid	INyvrQFO5zrO2vlL;

1.13
date	2017.01.23.06.45.30;	author beck;	state Exp;
branches;
next	1.12;
commitid	grTXB43OAHDwwKOU;

1.12
date	2017.01.22.09.02.07;	author jsing;	state Exp;
branches;
next	1.11;
commitid	570ElYZpaAvthwZh;

1.11
date	2016.03.06.14.52.15;	author beck;	state Exp;
branches;
next	1.10;
commitid	7dzq0qLU3rfFj8Ei;

1.10
date	2015.07.17.07.04.40;	author doug;	state Exp;
branches;
next	1.9;
commitid	UNQoAwJYBULH7Shk;

1.9
date	2014.12.14.15.30.50;	author jsing;	state Exp;
branches;
next	1.8;
commitid	XNZawfRSWvnVv1VS;

1.8
date	2014.11.16.14.12.47;	author jsing;	state Exp;
branches;
next	1.7;
commitid	M3pvHgIFoWUHNqJn;

1.7
date	2014.10.18.16.13.16;	author jsing;	state Exp;
branches;
next	1.6;
commitid	cGE1JG2i0h4NcVDi;

1.6
date	2014.07.10.08.51.14;	author tedu;	state Exp;
branches;
next	1.5;
commitid	lsH7iukeZYSZBx6F;

1.5
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.20.16.59.05;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.14.14.16.33;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2013.02.14.15.11.43;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.14.06;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.11.03.02.32.19;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.10.13.21.23.49;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.04.13.15.16.36;	author miod;	state Exp;
branches;
next	;


desc
@@


1.14
log
@move back read_hash and enc_read_ctx into ssl_st. wpa_supplicant and
other perversions touches them sickly and unnaturally.
@
text
@/* $OpenBSD: d1_enc.c,v 1.13 2017/01/23 06:45:30 beck Exp $ */
/*
 * DTLS implementation written by Nagendra Modadugu
 * (nagendra@@cs.stanford.edu) for the OpenSSL project 2005.
 */
/* ====================================================================
 * Copyright (c) 1998-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include "ssl_locl.h"

#include <openssl/evp.h>
#include <openssl/hmac.h>
#include <openssl/md5.h>

/* dtls1_enc encrypts/decrypts the record in |s->wrec| / |s->rrec|, respectively.
 *
 * Returns:
 *   0: (in non-constant time) if the record is publically invalid (i.e. too
 *       short etc).
 *   1: if the record's padding is valid / the encryption was successful.
 *   -1: if the record's padding/AEAD-authenticator is invalid or, if sending,
 *       an internal error occured. */
int
dtls1_enc(SSL *s, int send)
{
	SSL3_RECORD *rec;
	EVP_CIPHER_CTX *ds;
	unsigned long l;
	int bs, i, j, k, mac_size = 0;
	const EVP_CIPHER *enc;

	if (send) {
		if (EVP_MD_CTX_md(s->internal->write_hash)) {
			mac_size = EVP_MD_CTX_size(s->internal->write_hash);
			if (mac_size < 0)
				return -1;
		}
		ds = s->internal->enc_write_ctx;
		rec = &(S3I(s)->wrec);
		if (s->internal->enc_write_ctx == NULL)
			enc = NULL;
		else {
			enc = EVP_CIPHER_CTX_cipher(s->internal->enc_write_ctx);
			if (rec->data != rec->input) {
#ifdef DEBUG
				/* we can't write into the input stream */
				fprintf(stderr, "%s:%d: rec->data != rec->input\n",
				    __FILE__, __LINE__);
#endif
			} else if (EVP_CIPHER_block_size(ds->cipher) > 1) {
				arc4random_buf(rec->input,
				    EVP_CIPHER_block_size(ds->cipher));
			}
		}
	} else {
		if (EVP_MD_CTX_md(s->read_hash)) {
			mac_size = EVP_MD_CTX_size(s->read_hash);
			OPENSSL_assert(mac_size >= 0);
		}
		ds = s->enc_read_ctx;
		rec = &(S3I(s)->rrec);
		if (s->enc_read_ctx == NULL)
			enc = NULL;
		else
			enc = EVP_CIPHER_CTX_cipher(s->enc_read_ctx);
	}


	if ((s->session == NULL) || (ds == NULL) || (enc == NULL)) {
		memmove(rec->data, rec->input, rec->length);
		rec->input = rec->data;
	} else {
		l = rec->length;
		bs = EVP_CIPHER_block_size(ds->cipher);

		if ((bs != 1) && send) {
			i = bs - ((int)l % bs);

			/* Add weird padding of upto 256 bytes */

			/* we need to add 'i' padding bytes of value j */
			j = i - 1;
			for (k = (int)l; k < (int)(l + i); k++)
				rec->input[k] = j;
			l += i;
			rec->length += i;
		}


		if (!send) {
			if (l == 0 || l % bs != 0)
				return 0;
		}

		EVP_Cipher(ds, rec->data, rec->input, l);


		if ((bs != 1) && !send)
			return tls1_cbc_remove_padding(s, rec, bs, mac_size);
	}
	return (1);
}

@


1.13
log
@Move a large part of ssl_st into internal, so we can see what squeals.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_enc.c,v 1.12 2017/01/22 09:02:07 jsing Exp $ */
d165 2
a166 2
		if (EVP_MD_CTX_md(s->internal->read_hash)) {
			mac_size = EVP_MD_CTX_size(s->internal->read_hash);
d169 1
a169 1
		ds = s->internal->enc_read_ctx;
d171 1
a171 1
		if (s->internal->enc_read_ctx == NULL)
d174 1
a174 1
			enc = EVP_CIPHER_CTX_cipher(s->internal->enc_read_ctx);
@


1.12
log
@Move most of the SSL3_STATE fields to internal - the ones that remain are
known to be used by ports.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_enc.c,v 1.11 2016/03/06 14:52:15 beck Exp $ */
d142 2
a143 2
		if (EVP_MD_CTX_md(s->write_hash)) {
			mac_size = EVP_MD_CTX_size(s->write_hash);
d147 1
a147 1
		ds = s->enc_write_ctx;
d149 1
a149 1
		if (s->enc_write_ctx == NULL)
d152 1
a152 1
			enc = EVP_CIPHER_CTX_cipher(s->enc_write_ctx);
d165 2
a166 2
		if (EVP_MD_CTX_md(s->read_hash)) {
			mac_size = EVP_MD_CTX_size(s->read_hash);
d169 1
a169 1
		ds = s->enc_read_ctx;
d171 1
a171 1
		if (s->enc_read_ctx == NULL)
d174 1
a174 1
			enc = EVP_CIPHER_CTX_cipher(s->enc_read_ctx);
@


1.11
log
@Make sure stdio functions don't end up in the library, from miod@@
ok doug@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_enc.c,v 1.10 2015/07/17 07:04:40 doug Exp $ */
d148 1
a148 1
		rec = &(s->s3->wrec);
d170 1
a170 1
		rec = &(s->s3->rrec);
@


1.10
log
@Remove workaround for TLS padding bug from SSLeay days.

OpenSSL doesn't remember which clients were impacted and the
functionality has been broken in their stable releases for 2 years.

Based on OpenSSL commit a8e4ac6a2fe67c19672ecf0c6aeafa15801ce3a5.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_enc.c,v 1.9 2014/12/14 15:30:50 jsing Exp $ */
d153 2
a154 1
			if (rec->data != rec->input)
d158 2
a159 1
			else if (EVP_CIPHER_block_size(ds->cipher) > 1) {
@


1.9
log
@Remove trailing whitespace.
@
text
@d1 1
a1 1
/* $OpenBSD: d1_enc.c,v 1.8 2014/11/16 14:12:47 jsing Exp $ */
a189 4
			if (s->options & SSL_OP_TLS_BLOCK_PADDING_BUG) {
				if (s->s3->flags & TLS1_FLAGS_TLS_PADDING_BUG)
					j++;
			}
@


1.8
log
@Sort and group includes.
@
text
@d1 2
a2 2
/* $OpenBSD: d1_enc.c,v 1.7 2014/10/18 16:13:16 jsing Exp $ */
/* 
d4 1
a4 1
 * (nagendra@@cs.stanford.edu) for the OpenSSL project 2005.  
d14 1
a14 1
 *    notice, this list of conditions and the following disclaimer. 
d65 1
a65 1
 * 
d72 1
a72 1
 * 
d79 1
a79 1
 * 
d94 1
a94 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d97 1
a97 1
 * 
d109 1
a109 1
 * 
@


1.7
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random provides high quality pseudo-random numbers, hence there is no
need to differentiate between "strong" and "pseudo". Furthermore, the
arc4random_buf() function is guaranteed to succeed, which avoids the need
to check for and handle failure, simplifying the code.

It is worth noting that a number of the replaced RAND_bytes() and
RAND_pseudo_bytes() calls were missing return value checks and these
functions can fail for a number of reasons (at least in OpenSSL -
thankfully they were converted to wrappers around arc4random_buf() some
time ago in LibreSSL).

ok beck@@ deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_enc.c,v 1.6 2014/07/10 08:51:14 tedu Exp $ */
d117 1
d119 1
@


1.6
log
@decompress libssl. ok beck jsing
@
text
@d1 1
a1 1
/* $OpenBSD: d1_enc.c,v 1.5 2014/06/12 15:49:31 deraadt Exp $ */
a120 1
#include <openssl/rand.h>
d156 2
a157 2
				if (RAND_bytes(rec->input, EVP_CIPHER_block_size(ds->cipher)) <= 0)
					return -1;
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a117 3
#ifndef OPENSSL_NO_COMP
#include <openssl/comp.h>
#endif
@


1.4
log
@KSSL is dead... nuke KSSL_DEBUG from orbit.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* ssl/d1_enc.c */
@


1.3
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a124 3
#ifdef KSSL_DEBUG
#include <openssl/des.h>
#endif
a176 3
#ifdef KSSL_DEBUG
	printf("dtls1_enc(%d)\n", send);
#endif    /* KSSL_DEBUG */
a201 17
#ifdef KSSL_DEBUG
		{
			unsigned long ui;
			printf("EVP_Cipher(ds=%p, rec->data=%p, rec->input=%p, l=%ld) ==>\n",
			ds, rec->data, rec->input, l);
			printf("\tEVP_CIPHER_CTX: %d buf_len, %d key_len [%d %d], %d iv_len\n",
			ds->buf_len, ds->cipher->key_len,
			DES_KEY_SZ, DES_SCHEDULE_SZ,
			ds->cipher->iv_len);
			printf("\t\tIV: ");
			for (i = 0; i<ds->cipher->iv_len; i++) printf("%02X", ds->iv[i]);
				printf("\n");
			printf("\trec->input=");
			for (ui = 0; ui<l; ui++) printf(" %02x", rec->input[ui]);
				printf("\n");
		}
#endif	/* KSSL_DEBUG */
a209 8
#ifdef KSSL_DEBUG
		{
			unsigned long i;
			printf("\trec->data=");
			for (i = 0; i < l; i++)
				printf(" %02x", rec->data[i]);  printf("\n");
		}
#endif	/* KSSL_DEBUG */
@


1.2
log
@cherry pick bugfixes for http://www.openssl.org/news/secadv_20130205.txt
from the openssl git (changes between openssl 1.0.1c and 1.0.1d).
ok djm@@
@
text
@d137 3
a139 2
int dtls1_enc(SSL *s, int send)
	{
d143 1
a143 1
	int bs,i,j,k,mac_size=0;
d146 3
a148 5
	if (send)
		{
		if (EVP_MD_CTX_md(s->write_hash))
			{
			mac_size=EVP_MD_CTX_size(s->write_hash);
d151 3
a153 3
			}
		ds=s->enc_write_ctx;
		rec= &(s->s3->wrec);
d155 4
a158 5
			enc=NULL;
		else
			{
			enc=EVP_CIPHER_CTX_cipher(s->enc_write_ctx);
			if ( rec->data != rec->input)
d161 2
a162 3
					__FILE__, __LINE__);
			else if ( EVP_CIPHER_block_size(ds->cipher) > 1)
				{
a164 1
				}
d167 3
a169 5
	else
		{
		if (EVP_MD_CTX_md(s->read_hash))
			{
			mac_size=EVP_MD_CTX_size(s->read_hash);
d171 3
a173 3
			}
		ds=s->enc_read_ctx;
		rec= &(s->s3->rrec);
d175 1
a175 1
			enc=NULL;
d177 2
a178 2
			enc=EVP_CIPHER_CTX_cipher(s->enc_read_ctx);
		}
d184 6
a189 10
	if ((s->session == NULL) || (ds == NULL) ||
		(enc == NULL))
		{
		memmove(rec->data,rec->input,rec->length);
		rec->input=rec->data;
		}
	else
		{
		l=rec->length;
		bs=EVP_CIPHER_block_size(ds->cipher);
d191 2
a192 3
		if ((bs != 1) && send)
			{
			i=bs-((int)l%bs);
d197 2
a198 3
			j=i-1;
			if (s->options & SSL_OP_TLS_BLOCK_PADDING_BUG)
				{
a200 5
				}
			for (k=(int)l; k<(int)(l+i); k++)
				rec->input[k]=j;
			l+=i;
			rec->length+=i;
d202 5
d210 13
a222 13
                unsigned long ui;
		printf("EVP_Cipher(ds=%p,rec->data=%p,rec->input=%p,l=%ld) ==>\n",
                        ds,rec->data,rec->input,l);
		printf("\tEVP_CIPHER_CTX: %d buf_len, %d key_len [%d %d], %d iv_len\n",
                        ds->buf_len, ds->cipher->key_len,
                        DES_KEY_SZ, DES_SCHEDULE_SZ,
                        ds->cipher->iv_len);
		printf("\t\tIV: ");
		for (i=0; i<ds->cipher->iv_len; i++) printf("%02X", ds->iv[i]);
		printf("\n");
		printf("\trec->input=");
		for (ui=0; ui<l; ui++) printf(" %02x", rec->input[ui]);
		printf("\n");
d226 2
a227 3
		if (!send)
			{
			if (l == 0 || l%bs != 0)
d229 3
a231 3
			}
		
		EVP_Cipher(ds,rec->data,rec->input,l);
d235 5
a239 5
                unsigned long i;
                printf("\trec->data=");
		for (i=0; i<l; i++)
                        printf(" %02x", rec->data[i]);  printf("\n");
                }
a243 2
		}
	return(1);
d245 2
@


1.1
log
@Initial revision
@
text
@d118 1
d120 1
d125 3
d129 8
a136 1

d142 1
a142 1
	int bs,i,ii,j,k,n=0;
d147 6
a152 2
		if (s->write_hash != NULL)
			n=EVP_MD_size(s->write_hash);
d166 1
a166 1
				if (!RAND_bytes(rec->input, EVP_CIPHER_block_size(ds->cipher)))
d173 5
a177 2
		if (s->read_hash != NULL)
			n=EVP_MD_size(s->read_hash);
a240 3
				{
				SSLerr(SSL_F_DTLS1_ENC,SSL_R_BLOCK_CIPHER_PAD_IS_WRONG);
				ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_DECRYPTION_FAILED);
a241 1
				}
d256 1
a256 37
			{
			ii=i=rec->data[l-1]; /* padding_length */
			i++;
			if (s->options&SSL_OP_TLS_BLOCK_PADDING_BUG)
				{
				/* First packet is even in size, so check */
				if ((memcmp(s->s3->read_sequence,
					"\0\0\0\0\0\0\0\0",8) == 0) && !(ii & 1))
					s->s3->flags|=TLS1_FLAGS_TLS_PADDING_BUG;
				if (s->s3->flags & TLS1_FLAGS_TLS_PADDING_BUG)
					i--;
				}
			/* TLS 1.0 does not bound the number of padding bytes by the block size.
			 * All of them must have value 'padding_length'. */
			if (i > (int)rec->length)
				{
				/* Incorrect padding. SSLerr() and ssl3_alert are done
				 * by caller: we don't want to reveal whether this is
				 * a decryption error or a MAC verification failure
				 * (see http://www.openssl.org/~bodo/tls-cbc.txt) 
				 */
				return -1;
				}
			for (j=(int)(l-i); j<(int)l; j++)
				{
				if (rec->data[j] != ii)
					{
					/* Incorrect padding */
					return -1;
					}
				}
			rec->length-=i;

			rec->data += bs;    /* skip the implicit IV */
			rec->input += bs;
			rec->length -= bs;
			}
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@a117 1
#ifndef OPENSSL_NO_COMP
a118 1
#endif
d123 1
a123 3
#ifdef KSSL_DEBUG
#include <openssl/des.h>
#endif
d205 2
a206 2
                        (void *)ds,rec->data,rec->input,l);
		printf("\tEVP_CIPHER_CTX: %d buf_len, %d key_len [%ld %ld], %d iv_len\n",
d208 1
a208 2
                        (unsigned long)DES_KEY_SZ,
			(unsigned long)DES_SCHEDULE_SZ,
d233 1
a233 1
                unsigned long ki;
d235 2
a236 2
		for (ki=0; ki<l; ki++)
                        printf(" %02x", rec->data[ki]);  printf("\n");
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d139 2
a140 6
		if (EVP_MD_CTX_md(s->write_hash))
			{
			n=EVP_MD_CTX_size(s->write_hash);
			if (n < 0)
				return -1;
			}
d154 1
a154 1
				if (RAND_bytes(rec->input, EVP_CIPHER_block_size(ds->cipher)) <= 0)
d161 2
a162 6
		if (EVP_MD_CTX_md(s->read_hash))
			{
			n=EVP_MD_CTX_size(s->read_hash);
			if (n < 0)
				return -1;
			}
d209 2
a210 2
                        ds,rec->data,rec->input,l);
		printf("\tEVP_CIPHER_CTX: %d buf_len, %d key_len [%d %d], %d iv_len\n",
d212 2
a213 1
                        DES_KEY_SZ, DES_SCHEDULE_SZ,
d238 1
a238 1
                unsigned long i;
d240 2
a241 2
		for (i=0; i<l; i++)
                        printf(" %02x", rec->data[i]);  printf("\n");
@


1.1.1.4
log
@import OpenSSL 1.0.0e
@
text
@d234 5
a238 1
				return -1;
@


1.1.1.5
log
@import OpenSSL-1.0.1c
@
text
@d263 1
a263 1
			if (i + bs > (int)rec->length)
@


1.1.1.6
log
@Import OpenSSL 1.0.1g
@
text
@a128 8
/* dtls1_enc encrypts/decrypts the record in |s->wrec| / |s->rrec|, respectively.
 *
 * Returns:
 *   0: (in non-constant time) if the record is publically invalid (i.e. too
 *       short etc).
 *   1: if the record's padding is valid / the encryption was successful.
 *   -1: if the record's padding/AEAD-authenticator is invalid or, if sending,
 *       an internal error occured. */
d134 1
a134 1
	int bs,i,j,k,mac_size=0;
d141 2
a142 2
			mac_size=EVP_MD_CTX_size(s->write_hash);
			if (mac_size < 0)
d167 3
a169 2
			mac_size=EVP_MD_CTX_size(s->read_hash);
			OPENSSL_assert(mac_size >= 0);
d234 1
a234 1
				return 0;
d249 37
a285 1
			return tls1_cbc_remove_padding(s, rec, bs, mac_size);
@


