head	1.161;
access;
symbols
	OPENBSD_6_2_BASE:1.161
	OPENBSD_6_1:1.138.0.4
	OPENBSD_6_1_BASE:1.138;
locks; strict;
comment	@ * @;


1.161
date	2017.09.25.18.04.08;	author jsing;	state Exp;
branches;
next	1.160;
commitid	1HHmXcKjk7tOc0pZ;

1.160
date	2017.08.28.18.12.10;	author jsing;	state Exp;
branches;
next	1.159;
commitid	iVyLqcDZJ9sjPNn9;

1.159
date	2017.08.28.16.37.04;	author jsing;	state Exp;
branches;
next	1.158;
commitid	XdCmmKY9IJhT36S8;

1.158
date	2017.08.12.21.03.08;	author jsing;	state Exp;
branches;
next	1.157;
commitid	n6G9zNMtfIAJ9B9u;

1.157
date	2017.08.12.02.55.22;	author jsing;	state Exp;
branches;
next	1.156;
commitid	75ze73v4QudzrM8f;

1.156
date	2017.08.11.17.54.41;	author jsing;	state Exp;
branches;
next	1.155;
commitid	u7PTgn5cYjoEA6Yo;

1.155
date	2017.08.10.17.18.38;	author jsing;	state Exp;
branches;
next	1.154;
commitid	dKulPy2Ty6efAQYX;

1.154
date	2017.08.09.17.49.54;	author jsing;	state Exp;
branches;
next	1.153;
commitid	a1fbeZsiLKsb94g8;

1.153
date	2017.08.09.17.42.12;	author jsing;	state Exp;
branches;
next	1.152;
commitid	gVStBxOxwY9MR333;

1.152
date	2017.08.09.17.21.34;	author jsing;	state Exp;
branches;
next	1.151;
commitid	ZWbllaWIfNaldhn5;

1.151
date	2017.08.09.16.50.00;	author jsing;	state Exp;
branches;
next	1.150;
commitid	LZONDcI0rORuysCq;

1.150
date	2017.08.09.16.47.18;	author jsing;	state Exp;
branches;
next	1.149;
commitid	7ggCJEIRm9fTjQ89;

1.149
date	2017.08.09.15.52.27;	author jsing;	state Exp;
branches;
next	1.148;
commitid	8Fj6LmJyQ2dV50oU;

1.148
date	2017.08.09.15.25.27;	author jsing;	state Exp;
branches;
next	1.147;
commitid	izVKxxepj0jAcnvH;

1.147
date	2017.08.09.15.02.53;	author jsing;	state Exp;
branches;
next	1.146;
commitid	CS3rrXzQC4J0Hjby;

1.146
date	2017.08.09.14.58.11;	author jsing;	state Exp;
branches;
next	1.145;
commitid	alqmlW6CqdxBVmCD;

1.145
date	2017.07.15.17.40.53;	author jsing;	state Exp;
branches;
next	1.144;
commitid	mMMKqdvIN1jc9FaJ;

1.144
date	2017.05.07.21.05.05;	author jsing;	state Exp;
branches;
next	1.143;
commitid	NFmvluBW1llyZchm;

1.143
date	2017.05.07.04.22.24;	author beck;	state Exp;
branches;
next	1.142;
commitid	lvbt7GJEb5w5u0NS;

1.142
date	2017.05.06.22.24.57;	author beck;	state Exp;
branches;
next	1.141;
commitid	caPZfWYl80TRorLe;

1.141
date	2017.05.06.20.37.24;	author jsing;	state Exp;
branches;
next	1.140;
commitid	TYalkspbBA5xUOBz;

1.140
date	2017.04.10.17.27.33;	author jsing;	state Exp;
branches;
next	1.139;
commitid	AjWhTfFmoVqslBtP;

1.139
date	2017.04.10.17.25.22;	author jsing;	state Exp;
branches;
next	1.138;
commitid	9fC7qOWrN8BhKE2J;

1.138
date	2017.03.10.16.03.27;	author jsing;	state Exp;
branches;
next	1.137;
commitid	CCNwpUSZ1TvGpJJt;

1.137
date	2017.03.05.14.39.53;	author jsing;	state Exp;
branches;
next	1.136;
commitid	ws87QY8nHNtKAMYH;

1.136
date	2017.03.04.16.32.00;	author jsing;	state Exp;
branches;
next	1.135;
commitid	TrWoiZkfDXTvdQj8;

1.135
date	2017.02.07.02.08.38;	author beck;	state Exp;
branches;
next	1.134;
commitid	xH3OeartUDKSlAnB;

1.134
date	2017.02.05.15.06.05;	author jsing;	state Exp;
branches;
next	1.133;
commitid	cQmoHP6ZRA5LjFSi;

1.133
date	2017.01.26.12.16.13;	author beck;	state Exp;
branches;
next	1.132;
commitid	lb4UTPLS9Casn2PL;

1.132
date	2017.01.26.10.40.21;	author beck;	state Exp;
branches;
next	1.131;
commitid	Bi1VygMenL4YtCp7;

1.131
date	2017.01.24.14.57.31;	author jsing;	state Exp;
branches;
next	1.130;
commitid	nQzaI20w3vrSZN0L;

1.130
date	2017.01.24.09.03.21;	author jsing;	state Exp;
branches;
next	1.129;
commitid	NTZJ3rEptTLCIZDB;

1.129
date	2017.01.24.03.00.54;	author jsing;	state Exp;
branches;
next	1.128;
commitid	vnH4mHJiho1QV9iu;

1.128
date	2017.01.23.14.35.42;	author jsing;	state Exp;
branches;
next	1.127;
commitid	fvePj4ki9zOwq3SB;

1.127
date	2017.01.23.13.36.13;	author jsing;	state Exp;
branches;
next	1.126;
commitid	xYJ523Ay020rUB5W;

1.126
date	2017.01.23.08.48.44;	author beck;	state Exp;
branches;
next	1.125;
commitid	vAKES6VByBpegTl4;

1.125
date	2017.01.23.06.45.30;	author beck;	state Exp;
branches;
next	1.124;
commitid	grTXB43OAHDwwKOU;

1.124
date	2017.01.23.05.13.02;	author jsing;	state Exp;
branches;
next	1.123;
commitid	XWcFqNClp2MoKERU;

1.123
date	2017.01.23.04.55.26;	author beck;	state Exp;
branches;
next	1.122;
commitid	AhwkqHI5lKK3NR31;

1.122
date	2017.01.23.04.15.28;	author jsing;	state Exp;
branches;
next	1.121;
commitid	j20UnjrPw7WvzMvm;

1.121
date	2017.01.23.01.22.08;	author jsing;	state Exp;
branches;
next	1.120;
commitid	YymiVWgtX4KkSfL3;

1.120
date	2017.01.22.09.02.07;	author jsing;	state Exp;
branches;
next	1.119;
commitid	570ElYZpaAvthwZh;

1.119
date	2017.01.22.06.36.49;	author jsing;	state Exp;
branches;
next	1.118;
commitid	jkexAOoo4I6xT9SH;

1.118
date	2017.01.22.03.50.45;	author jsing;	state Exp;
branches;
next	1.117;
commitid	Q5mGTZ7ZJXh4fPDx;

1.117
date	2017.01.22.00.09.13;	author jsing;	state Exp;
branches;
next	1.116;
commitid	zRw4yqGT7xIwWSw0;

1.116
date	2017.01.22.00.03.18;	author jsing;	state Exp;
branches;
next	1.115;
commitid	8lhNSTL7WvNWTO0r;

1.115
date	2016.12.30.17.20.51;	author jsing;	state Exp;
branches;
next	1.114;
commitid	xp97QNZbrpDxRQqC;

1.114
date	2016.12.21.16.44.31;	author jsing;	state Exp;
branches;
next	1.113;
commitid	QsxdTGoZtELBjsxp;

1.113
date	2016.12.06.13.17.52;	author jsing;	state Exp;
branches;
next	1.112;
commitid	G67mpujAD0pCOeCU;

1.112
date	2016.11.06.13.11.40;	author jsing;	state Exp;
branches;
next	1.111;
commitid	sUszQAez9bPX2yD3;

1.111
date	2016.11.06.12.08.32;	author jsing;	state Exp;
branches;
next	1.110;
commitid	m3qRKmM5mhnylgEY;

1.110
date	2016.11.06.11.58.13;	author jsing;	state Exp;
branches;
next	1.109;
commitid	RiRQpXQMaBsAzBag;

1.109
date	2016.10.19.16.38.40;	author jsing;	state Exp;
branches;
next	1.108;
commitid	zBSqJxdzZYua3a3I;

1.108
date	2016.04.28.16.39.45;	author jsing;	state Exp;
branches;
next	1.107;
commitid	MlZ5jZHGKzYpF9uz;

1.107
date	2016.01.27.02.06.16;	author beck;	state Exp;
branches;
next	1.106;
commitid	VB2FDvGQ3jhs0Dye;

1.106
date	2015.09.12.16.10.07;	author doug;	state Exp;
branches;
next	1.105;
commitid	VR022UcxWVmcgSOF;

1.105
date	2015.09.12.15.03.39;	author jsing;	state Exp;
branches;
next	1.104;
commitid	86J9jDyJ44W6WCGe;

1.104
date	2015.09.11.18.08.21;	author jsing;	state Exp;
branches;
next	1.103;
commitid	pa8oXRlJthT375Ws;

1.103
date	2015.09.11.17.32.23;	author jsing;	state Exp;
branches;
next	1.102;
commitid	ruNQFMbr8IKXZhgD;

1.102
date	2015.09.11.16.50.46;	author jsing;	state Exp;
branches;
next	1.101;
commitid	GO6Y19AqZWCR8cKL;

1.101
date	2015.09.10.15.56.26;	author jsing;	state Exp;
branches;
next	1.100;
commitid	vHznCDK3idwNEFz4;

1.100
date	2015.08.27.06.21.15;	author doug;	state Exp;
branches;
next	1.99;
commitid	81GzeBdk0eOTcvRE;

1.99
date	2015.07.19.06.23.51;	author doug;	state Exp;
branches
	1.99.4.1;
next	1.98;
commitid	TG8emafQHjonfzva;

1.98
date	2015.07.17.15.50.37;	author doug;	state Exp;
branches;
next	1.97;
commitid	74rjqXo4BbFp9EDU;

1.97
date	2015.07.14.05.20.46;	author doug;	state Exp;
branches;
next	1.96;
commitid	oxQqXejkDwyDlRTf;

1.96
date	2015.05.25.21.35.35;	author guenther;	state Exp;
branches;
next	1.95;
commitid	8xM2cSVZtJZgkNAp;

1.95
date	2015.02.08.22.06.49;	author miod;	state Exp;
branches
	1.95.4.1;
next	1.94;
commitid	uepctwfTwPlL4110;

1.94
date	2015.02.07.05.46.01;	author jsing;	state Exp;
branches;
next	1.93;
commitid	kZmiX4Lm74epWPnx;

1.93
date	2015.02.07.04.17.11;	author jsing;	state Exp;
branches;
next	1.92;
commitid	kTcp4bxIaEX3QOn0;

1.92
date	2015.02.06.08.30.23;	author jsing;	state Exp;
branches;
next	1.91;
commitid	K5MXFl39zEkHakNY;

1.91
date	2014.12.16.05.47.28;	author miod;	state Exp;
branches;
next	1.90;
commitid	VhYqCTFRqqGmvxqR;

1.90
date	2014.12.14.16.07.26;	author jsing;	state Exp;
branches;
next	1.89;
commitid	nt2w88sbfSTGqxmB;

1.89
date	2014.12.14.15.30.50;	author jsing;	state Exp;
branches;
next	1.88;
commitid	XNZawfRSWvnVv1VS;

1.88
date	2014.12.14.14.34.43;	author jsing;	state Exp;
branches;
next	1.87;
commitid	JlmRntBjnvBE29Fz;

1.87
date	2014.12.10.15.36.47;	author jsing;	state Exp;
branches;
next	1.86;
commitid	x50cturILyXAfPoH;

1.86
date	2014.12.10.14.58.56;	author jsing;	state Exp;
branches;
next	1.85;
commitid	GHVxpbbDPbCM2xPo;

1.85
date	2014.11.18.05.33.43;	author miod;	state Exp;
branches;
next	1.84;
commitid	81uwsCsokEuKDUjo;

1.84
date	2014.10.31.15.25.55;	author jsing;	state Exp;
branches;
next	1.83;
commitid	NOaAgwTtK29a9Ncs;

1.83
date	2014.10.31.14.51.01;	author jsing;	state Exp;
branches;
next	1.82;
commitid	cMCIoWtrOiPFZWnD;

1.82
date	2014.10.03.13.58.17;	author jsing;	state Exp;
branches;
next	1.81;
commitid	TTuHOVoRSWSvd6HI;

1.81
date	2014.09.30.15.40.09;	author jsing;	state Exp;
branches;
next	1.80;
commitid	HYNEHWCCpGJW4ziw;

1.80
date	2014.09.07.12.16.23;	author jsing;	state Exp;
branches;
next	1.79;
commitid	oAt7EW2Y0Fwu0XNB;

1.79
date	2014.08.24.14.36.45;	author jsing;	state Exp;
branches;
next	1.78;
commitid	1vOBE9WdltEkCa6G;

1.78
date	2014.08.23.15.37.38;	author jsing;	state Exp;
branches;
next	1.77;
commitid	BL9DzAA5gv2dBxCt;

1.77
date	2014.08.23.14.52.41;	author jsing;	state Exp;
branches;
next	1.76;
commitid	hTkCFMErB7xMsqus;

1.76
date	2014.08.11.01.06.22;	author jsing;	state Exp;
branches;
next	1.75;
commitid	EjXY9DxJ6SGazL3V;

1.75
date	2014.08.10.15.06.15;	author jsing;	state Exp;
branches;
next	1.74;
commitid	gPOiVffyaVnEpcSW;

1.74
date	2014.08.10.14.57.04;	author jsing;	state Exp;
branches;
next	1.73;
commitid	bewgTyTOqh103PLt;

1.73
date	2014.08.07.20.02.23;	author miod;	state Exp;
branches;
next	1.72;
commitid	DMh9IXTC6aDWVuh5;

1.72
date	2014.08.07.19.46.31;	author miod;	state Exp;
branches;
next	1.71;
commitid	vayOLqnrIMw5dnz8;

1.71
date	2014.07.13.16.03.10;	author beck;	state Exp;
branches;
next	1.70;
commitid	6xdvCwSqBadTW6X3;

1.70
date	2014.07.12.22.33.39;	author jsing;	state Exp;
branches;
next	1.69;
commitid	JT7oO4AHgBkjVLfZ;

1.69
date	2014.07.11.09.24.44;	author beck;	state Exp;
branches;
next	1.68;
commitid	cCGiAdDteN08GytD;

1.68
date	2014.07.10.08.51.14;	author tedu;	state Exp;
branches;
next	1.67;
commitid	lsH7iukeZYSZBx6F;

1.67
date	2014.07.09.11.25.42;	author jsing;	state Exp;
branches;
next	1.66;
commitid	N5P2FUkVkAd7ODs9;

1.66
date	2014.07.09.11.10.51;	author bcook;	state Exp;
branches;
next	1.65;
commitid	lHJTcoC4c5BhEOGj;

1.65
date	2014.07.08.22.09.01;	author jsing;	state Exp;
branches;
next	1.64;
commitid	aifoj9I5sC5q0Wfd;

1.64
date	2014.07.08.21.50.40;	author jsing;	state Exp;
branches;
next	1.63;
commitid	kLhCDmTWLPmmRB38;

1.63
date	2014.07.08.21.31.54;	author jsing;	state Exp;
branches;
next	1.62;
commitid	u8sNaJWXrZLtsBK5;

1.62
date	2014.06.21.16.51.48;	author jsing;	state Exp;
branches;
next	1.61;
commitid	GxOIRh3Wz1LlMRUR;

1.61
date	2014.06.13.13.28.53;	author jsing;	state Exp;
branches;
next	1.60;
commitid	Ujg3vMZHX0kgoEuK;

1.60
date	2014.06.13.13.21.09;	author jsing;	state Exp;
branches;
next	1.59;
commitid	6DthZ0svkTEg1Uei;

1.59
date	2014.06.13.04.29.13;	author miod;	state Exp;
branches;
next	1.58;
commitid	8Qu6YceLSxhOi4yG;

1.58
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.57;
commitid	mJUVYpkFBZ0Zv2bG;

1.57
date	2014.06.07.14.40.55;	author jsing;	state Exp;
branches;
next	1.56;
commitid	IMZNq3CmhY60fEsV;

1.56
date	2014.06.07.14.37.35;	author jsing;	state Exp;
branches;
next	1.55;
commitid	JwXanfIzQdnBhF9D;

1.55
date	2014.06.07.14.35.31;	author jsing;	state Exp;
branches;
next	1.54;
commitid	moce2ayovF9fb7cV;

1.54
date	2014.06.07.14.14.13;	author jsing;	state Exp;
branches;
next	1.53;
commitid	jtdGRDDino5HYdZW;

1.53
date	2014.06.07.14.10.35;	author jsing;	state Exp;
branches;
next	1.52;
commitid	AgFmutmGDUehZZeH;

1.52
date	2014.05.31.13.55.45;	author jsing;	state Exp;
branches;
next	1.51;

1.51
date	2014.05.31.10.53.39;	author jsing;	state Exp;
branches;
next	1.50;

1.50
date	2014.05.31.10.49.28;	author jsing;	state Exp;
branches;
next	1.49;

1.49
date	2014.05.30.14.30.50;	author tedu;	state Exp;
branches;
next	1.48;

1.48
date	2014.05.30.14.01.11;	author jsing;	state Exp;
branches;
next	1.47;

1.47
date	2014.05.29.18.11.13;	author tedu;	state Exp;
branches;
next	1.46;

1.46
date	2014.05.29.16.00.16;	author jsing;	state Exp;
branches;
next	1.45;

1.45
date	2014.05.28.13.03.24;	author jsing;	state Exp;
branches;
next	1.44;

1.44
date	2014.05.26.20.54.06;	author miod;	state Exp;
branches;
next	1.43;

1.43
date	2014.05.25.16.23.10;	author jsing;	state Exp;
branches;
next	1.42;

1.42
date	2014.05.24.16.06.28;	author jsing;	state Exp;
branches;
next	1.41;

1.41
date	2014.05.23.16.33.34;	author jsing;	state Exp;
branches;
next	1.40;

1.40
date	2014.05.22.17.43.52;	author jsing;	state Exp;
branches;
next	1.39;

1.39
date	2014.05.22.17.33.17;	author jsing;	state Exp;
branches;
next	1.38;

1.38
date	2014.05.20.16.59.05;	author jsing;	state Exp;
branches;
next	1.37;

1.37
date	2014.05.17.15.44.28;	author tedu;	state Exp;
branches;
next	1.36;

1.36
date	2014.05.05.15.03.22;	author tedu;	state Exp;
branches;
next	1.35;

1.35
date	2014.04.24.13.06.52;	author mcbride;	state Exp;
branches;
next	1.34;

1.34
date	2014.04.24.12.21.26;	author mcbride;	state Exp;
branches;
next	1.33;

1.33
date	2014.04.21.16.34.43;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2014.04.19.08.52.32;	author guenther;	state Exp;
branches;
next	1.31;

1.31
date	2014.04.18.22.39.08;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2014.04.17.23.35.40;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2014.04.17.21.37.37;	author tedu;	state Exp;
branches;
next	1.28;

1.28
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.27;

1.27
date	2014.04.16.20.39.09;	author tedu;	state Exp;
branches;
next	1.26;

1.26
date	2014.04.16.17.59.16;	author tedu;	state Exp;
branches;
next	1.25;

1.25
date	2014.04.14.18.45.55;	author tedu;	state Exp;
branches;
next	1.24;

1.24
date	2014.04.14.16.07.22;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2014.04.13.21.11.19;	author mpi;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.13.20.37.12;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2014.02.27.21.04.57;	author jca;	state Exp;
branches;
next	1.19;

1.19
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2012.01.05.23.01.39;	author djm;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.03.02.34.33;	author djm;	state Exp;
branches;
next	1.16;

1.16
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.10.09.09.40;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.05.21.36.39;	author djm;	state Exp;
branches
	1.14.2.1
	1.14.6.1;
next	1.13;

1.13
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.27.05.07.03;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.29.05.39.31;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.12.02.18.40;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.10.16.31.57;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.07.19.55.34;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.22.00.03.40;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.58.37;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.49;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.29;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.27;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.12;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.12;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.35;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.44.10;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.21.36.39;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.04.07.20.42.06;	author markus;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.04.29.05.37.27;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.06.27.05.05.39;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.01.09.12.14.07;	author djm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2011.11.03.02.32.21;	author djm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2012.01.05.22.59.09;	author djm;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2012.10.13.21.23.49;	author djm;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.04.13.15.16.36;	author miod;	state Exp;
branches;
next	;

1.14.2.1
date	2009.11.17.14.34.37;	author sthen;	state Exp;
branches;
next	;

1.14.6.1
date	2009.11.17.14.34.52;	author sthen;	state Exp;
branches;
next	;

1.95.4.1
date	2016.01.27.02.11.34;	author beck;	state Exp;
branches;
next	;
commitid	W3frwqvOqFQSSXSA;

1.99.4.1
date	2016.01.27.02.09.51;	author beck;	state Exp;
branches;
next	;
commitid	z2xz1yYwPRWVfmVV;


desc
@@


1.161
log
@Annotate some API-side memory leaks for future resolution.
@
text
@/* $OpenBSD: s3_lib.c,v 1.160 2017/08/28 18:12:10 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2007 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 *
 * Portions of the attached software ("Contribution") are developed by
 * SUN MICROSYSTEMS, INC., and are contributed to the OpenSSL project.
 *
 * The Contribution is licensed pursuant to the OpenSSL open source
 * license provided above.
 *
 * ECC cipher suite support in OpenSSL originally written by
 * Vipul Gupta and Sumit Gupta of Sun Microsystems Laboratories.
 *
 */
/* ====================================================================
 * Copyright 2005 Nokia. All rights reserved.
 *
 * The portions of the attached software ("Contribution") is developed by
 * Nokia Corporation and is licensed pursuant to the OpenSSL open source
 * license.
 *
 * The Contribution, originally written by Mika Kousa and Pasi Eronen of
 * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
 * support (see RFC 4279) to OpenSSL.
 *
 * No patent licenses or other rights except those expressly stated in
 * the OpenSSL open source license shall be deemed granted or received
 * expressly, by implication, estoppel, or otherwise.
 *
 * No assurances are provided by Nokia that the Contribution does not
 * infringe the patent or other intellectual property rights of any third
 * party or that the license provides you with all the necessary rights
 * to make use of the Contribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
 * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
 * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
 * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
 * OTHERWISE.
 */

#include <limits.h>
#include <stdio.h>

#include <openssl/bn.h>
#include <openssl/curve25519.h>
#include <openssl/dh.h>
#include <openssl/md5.h>
#include <openssl/objects.h>

#include "ssl_locl.h"
#include "bytestring.h"

#define SSL3_NUM_CIPHERS	(sizeof(ssl3_ciphers) / sizeof(SSL_CIPHER))

/*
 * FIXED_NONCE_LEN is a macro that provides in the correct value to set the
 * fixed nonce length in algorithms2. It is the inverse of the
 * SSL_CIPHER_AEAD_FIXED_NONCE_LEN macro.
 */
#define FIXED_NONCE_LEN(x) (((x / 2) & 0xf) << 24)

/* list of available SSLv3 ciphers (sorted by id) */
SSL_CIPHER ssl3_ciphers[] = {

	/* The RSA ciphers */
	/* Cipher 01 */
	{
		.valid = 1,
		.name = SSL3_TXT_RSA_NULL_MD5,
		.id = SSL3_CK_RSA_NULL_MD5,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_MD5,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 0,
		.alg_bits = 0,
	},

	/* Cipher 02 */
	{
		.valid = 1,
		.name = SSL3_TXT_RSA_NULL_SHA,
		.id = SSL3_CK_RSA_NULL_SHA,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 0,
		.alg_bits = 0,
	},

	/* Cipher 04 */
	{
		.valid = 1,
		.name = SSL3_TXT_RSA_RC4_128_MD5,
		.id = SSL3_CK_RSA_RC4_128_MD5,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_MD5,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 05 */
	{
		.valid = 1,
		.name = SSL3_TXT_RSA_RC4_128_SHA,
		.id = SSL3_CK_RSA_RC4_128_SHA,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 09 */
	{
		.valid = 1,
		.name = SSL3_TXT_RSA_DES_64_CBC_SHA,
		.id = SSL3_CK_RSA_DES_64_CBC_SHA,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 56,
		.alg_bits = 56,
	},

	/* Cipher 0A */
	{
		.valid = 1,
		.name = SSL3_TXT_RSA_DES_192_CBC3_SHA,
		.id = SSL3_CK_RSA_DES_192_CBC3_SHA,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

	/*
	 * Ephemeral DH (DHE) ciphers.
	 */

	/* Cipher 15 */
	{
		.valid = 1,
		.name = SSL3_TXT_EDH_RSA_DES_64_CBC_SHA,
		.id = SSL3_CK_EDH_RSA_DES_64_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 56,
		.alg_bits = 56,
	},

	/* Cipher 16 */
	{
		.valid = 1,
		.name = SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA,
		.id = SSL3_CK_EDH_RSA_DES_192_CBC3_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

	/* Cipher 18 */
	{
		.valid = 1,
		.name = SSL3_TXT_ADH_RC4_128_MD5,
		.id = SSL3_CK_ADH_RC4_128_MD5,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_MD5,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 1A */
	{
		.valid = 1,
		.name = SSL3_TXT_ADH_DES_64_CBC_SHA,
		.id = SSL3_CK_ADH_DES_64_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 56,
		.alg_bits = 56,
	},

	/* Cipher 1B */
	{
		.valid = 1,
		.name = SSL3_TXT_ADH_DES_192_CBC_SHA,
		.id = SSL3_CK_ADH_DES_192_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

	/*
	 * AES ciphersuites.
	 */

	/* Cipher 2F */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_AES_128_SHA,
		.id = TLS1_CK_RSA_WITH_AES_128_SHA,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 33 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_AES_128_SHA,
		.id = TLS1_CK_DHE_RSA_WITH_AES_128_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 34 */
	{
		.valid = 1,
		.name = TLS1_TXT_ADH_WITH_AES_128_SHA,
		.id = TLS1_CK_ADH_WITH_AES_128_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 35 */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_AES_256_SHA,
		.id = TLS1_CK_RSA_WITH_AES_256_SHA,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher 39 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_AES_256_SHA,
		.id = TLS1_CK_DHE_RSA_WITH_AES_256_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher 3A */
	{
		.valid = 1,
		.name = TLS1_TXT_ADH_WITH_AES_256_SHA,
		.id = TLS1_CK_ADH_WITH_AES_256_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* TLS v1.2 ciphersuites */
	/* Cipher 3B */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_NULL_SHA256,
		.id = TLS1_CK_RSA_WITH_NULL_SHA256,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 0,
		.alg_bits = 0,
	},

	/* Cipher 3C */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_AES_128_SHA256,
		.id = TLS1_CK_RSA_WITH_AES_128_SHA256,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 3D */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_AES_256_SHA256,
		.id = TLS1_CK_RSA_WITH_AES_256_SHA256,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

#ifndef OPENSSL_NO_CAMELLIA
	/* Camellia ciphersuites from RFC4132 (128-bit portion) */

	/* Cipher 41 */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA,
		.id = TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CAMELLIA128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 45 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
		.id = TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CAMELLIA128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 46 */
	{
		.valid = 1,
		.name = TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA,
		.id = TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_CAMELLIA128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},
#endif /* OPENSSL_NO_CAMELLIA */

	/* TLS v1.2 ciphersuites */
	/* Cipher 67 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256,
		.id = TLS1_CK_DHE_RSA_WITH_AES_128_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 6B */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256,
		.id = TLS1_CK_DHE_RSA_WITH_AES_256_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher 6C */
	{
		.valid = 1,
		.name = TLS1_TXT_ADH_WITH_AES_128_SHA256,
		.id = TLS1_CK_ADH_WITH_AES_128_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 6D */
	{
		.valid = 1,
		.name = TLS1_TXT_ADH_WITH_AES_256_SHA256,
		.id = TLS1_CK_ADH_WITH_AES_256_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* GOST Ciphersuites */

	/* Cipher 81 */
	{
		.valid = 1,
		.name = "GOST2001-GOST89-GOST89",
		.id = 0x3000081,
		.algorithm_mkey = SSL_kGOST,
		.algorithm_auth = SSL_aGOST01,
		.algorithm_enc = SSL_eGOST2814789CNT,
		.algorithm_mac = SSL_GOST89MAC,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94|
		    TLS1_STREAM_MAC,
		.strength_bits = 256,
		.alg_bits = 256
	},

	/* Cipher 83 */
	{
		.valid = 1,
		.name = "GOST2001-NULL-GOST94",
		.id = 0x3000083,
		.algorithm_mkey = SSL_kGOST,
		.algorithm_auth = SSL_aGOST01,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_GOST94,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94,
		.strength_bits = 0,
		.alg_bits = 0
	},

#ifndef OPENSSL_NO_CAMELLIA
	/* Camellia ciphersuites from RFC4132 (256-bit portion) */

	/* Cipher 84 */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA,
		.id = TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CAMELLIA256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher 88 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
		.id = TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CAMELLIA256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher 89 */
	{
		.valid = 1,
		.name = TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA,
		.id = TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_CAMELLIA256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},
#endif /* OPENSSL_NO_CAMELLIA */

	/*
	 * GCM ciphersuites from RFC5288.
	 */

	/* Cipher 9C */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256,
		.id = TLS1_CK_RSA_WITH_AES_128_GCM_SHA256,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES128GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 9D */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384,
		.id = TLS1_CK_RSA_WITH_AES_256_GCM_SHA384,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES256GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher 9E */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256,
		.id = TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES128GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 9F */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384,
		.id = TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES256GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher A6 */
	{
		.valid = 1,
		.name = TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256,
		.id = TLS1_CK_ADH_WITH_AES_128_GCM_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_AES128GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher A7 */
	{
		.valid = 1,
		.name = TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384,
		.id = TLS1_CK_ADH_WITH_AES_256_GCM_SHA384,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_AES256GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 256,
		.alg_bits = 256,
	},

#ifndef OPENSSL_NO_CAMELLIA
	/* TLS 1.2 Camellia SHA-256 ciphersuites from RFC5932 */

	/* Cipher BA */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		.id = TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CAMELLIA128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher BE */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		.id = TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CAMELLIA128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher BF */
	{
		.valid = 1,
		.name = TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256,
		.id = TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_CAMELLIA128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C0 */
	{
		.valid = 1,
		.name = TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256,
		.id = TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CAMELLIA256,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher C4 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,
		.id = TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CAMELLIA256,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher C5 */
	{
		.valid = 1,
		.name = TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256,
		.id = TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_CAMELLIA256,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 256,
		.alg_bits = 256,
	},
#endif /* OPENSSL_NO_CAMELLIA */

	/* Cipher C006 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA,
		.id = TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 0,
		.alg_bits = 0,
	},

	/* Cipher C007 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA,
		.id = TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C008 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
		.id = TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

	/* Cipher C009 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		.id = TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C00A */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		.id = TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher C010 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA,
		.id = TLS1_CK_ECDHE_RSA_WITH_NULL_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 0,
		.alg_bits = 0,
	},

	/* Cipher C011 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA,
		.id = TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C012 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
		.id = TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

	/* Cipher C013 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		.id = TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C014 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		.id = TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher C015 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_anon_WITH_NULL_SHA,
		.id = TLS1_CK_ECDH_anon_WITH_NULL_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 0,
		.alg_bits = 0,
	},

	/* Cipher C016 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA,
		.id = TLS1_CK_ECDH_anon_WITH_RC4_128_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C017 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA,
		.id = TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

	/* Cipher C018 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA,
		.id = TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C019 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA,
		.id = TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},


	/* HMAC based TLS v1.2 ciphersuites from RFC5289 */

	/* Cipher C023 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256,
		.id = TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C024 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384,
		.id = TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA384,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher C027 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256,
		.id = TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C028 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384,
		.id = TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA384,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* GCM based TLS v1.2 ciphersuites from RFC5289 */

	/* Cipher C02B */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
		.id = TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_AES128GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C02C */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
		.id = TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_AES256GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher C02F */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
		.id = TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES128GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C030 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
		.id = TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_AES256GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher CCA8 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305,
		.id = TLS1_CK_ECDHE_RSA_CHACHA20_POLY1305,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CHACHA20POLY1305,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(12),
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher CCA9 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,
		.id = TLS1_CK_ECDHE_ECDSA_CHACHA20_POLY1305,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_CHACHA20POLY1305,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(12),
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher CCAA */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305,
		.id = TLS1_CK_DHE_RSA_CHACHA20_POLY1305,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CHACHA20POLY1305,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(12),
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher FF85 FIXME IANA */
	{
		.valid = 1,
		.name = "GOST2012256-GOST89-GOST89",
		.id = 0x300ff85, /* FIXME IANA */
		.algorithm_mkey = SSL_kGOST,
		.algorithm_auth = SSL_aGOST01,
		.algorithm_enc = SSL_eGOST2814789CNT,
		.algorithm_mac = SSL_GOST89MAC,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_STREEBOG256|TLS1_PRF_STREEBOG256|
		    TLS1_STREAM_MAC,
		.strength_bits = 256,
		.alg_bits = 256
	},

	/* Cipher FF87 FIXME IANA */
	{
		.valid = 1,
		.name = "GOST2012256-NULL-STREEBOG256",
		.id = 0x300ff87, /* FIXME IANA */
		.algorithm_mkey = SSL_kGOST,
		.algorithm_auth = SSL_aGOST01,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_STREEBOG256,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_STREEBOG256|TLS1_PRF_STREEBOG256,
		.strength_bits = 0,
		.alg_bits = 0
	},


	/* end of list */
};

int
ssl3_num_ciphers(void)
{
	return (SSL3_NUM_CIPHERS);
}

const SSL_CIPHER *
ssl3_get_cipher(unsigned int u)
{
	if (u < SSL3_NUM_CIPHERS)
		return (&(ssl3_ciphers[SSL3_NUM_CIPHERS - 1 - u]));
	else
		return (NULL);
}

const SSL_CIPHER *
ssl3_get_cipher_by_id(unsigned int id)
{
	const SSL_CIPHER *cp;
	SSL_CIPHER c;

	c.id = id;
	cp = OBJ_bsearch_ssl_cipher_id(&c, ssl3_ciphers, SSL3_NUM_CIPHERS);
	if (cp != NULL && cp->valid == 1)
		return (cp);

	return (NULL);
}

const SSL_CIPHER *
ssl3_get_cipher_by_value(uint16_t value)
{
	return ssl3_get_cipher_by_id(SSL3_CK_ID | value);
}

uint16_t
ssl3_cipher_get_value(const SSL_CIPHER *c)
{
	return (c->id & SSL3_CK_VALUE_MASK);
}

int
ssl3_pending(const SSL *s)
{
	if (s->internal->rstate == SSL_ST_READ_BODY)
		return 0;

	return (S3I(s)->rrec.type == SSL3_RT_APPLICATION_DATA) ?
	    S3I(s)->rrec.length : 0;
}

int
ssl3_handshake_msg_hdr_len(SSL *s)
{
	return (SSL_IS_DTLS(s) ? DTLS1_HM_HEADER_LENGTH :
            SSL3_HM_HEADER_LENGTH);
}

unsigned char *
ssl3_handshake_msg_start(SSL *s, uint8_t msg_type)
{
	unsigned char *d, *p;

	d = p = (unsigned char *)s->internal->init_buf->data;

	/* Handshake message type and length. */
	*(p++) = msg_type;
	l2n3(0, p);

	return (d + ssl3_handshake_msg_hdr_len(s));
}

void
ssl3_handshake_msg_finish(SSL *s, unsigned int len)
{
	unsigned char *p;
	uint8_t msg_type;

	p = (unsigned char *)s->internal->init_buf->data;

	/* Handshake message length. */
	msg_type = *(p++);
	l2n3(len, p);

	s->internal->init_num = ssl3_handshake_msg_hdr_len(s) + (int)len;
	s->internal->init_off = 0;

	if (SSL_IS_DTLS(s)) {
		dtls1_set_message_header(s, msg_type, len, 0, len);
		dtls1_buffer_message(s, 0);
	}
}

int
ssl3_handshake_msg_start_cbb(SSL *s, CBB *handshake, CBB *body,
    uint8_t msg_type)
{
	int ret = 0;

	if (!CBB_init(handshake, SSL3_RT_MAX_PLAIN_LENGTH))
		goto err;
	if (!CBB_add_u8(handshake, msg_type))
		goto err;
	if (SSL_IS_DTLS(s)) {
		unsigned char *data;

		if (!CBB_add_space(handshake, &data, DTLS1_HM_HEADER_LENGTH -
		    SSL3_HM_HEADER_LENGTH))
			goto err;
	}
	if (!CBB_add_u24_length_prefixed(handshake, body))
		goto err;

	ret = 1;

 err:
	return (ret);
}

int
ssl3_handshake_msg_finish_cbb(SSL *s, CBB *handshake)
{
	unsigned char *data = NULL;
	size_t outlen;
	int ret = 0;

	if (!CBB_finish(handshake, &data, &outlen))
		goto err;

	if (outlen > INT_MAX)
		goto err;

	if (!BUF_MEM_grow_clean(s->internal->init_buf, outlen))
		goto err;

	memcpy(s->internal->init_buf->data, data, outlen);

	s->internal->init_num = (int)outlen;
	s->internal->init_off = 0;

	if (SSL_IS_DTLS(s)) {
		unsigned long len;
		uint8_t msg_type;
		CBS cbs;

		CBS_init(&cbs, data, outlen);
		if (!CBS_get_u8(&cbs, &msg_type))
			goto err;

		len = outlen - ssl3_handshake_msg_hdr_len(s);

		dtls1_set_message_header(s, msg_type, len, 0, len);
		dtls1_buffer_message(s, 0);
	}

	ret = 1;

 err:
	free(data);

	return (ret);
}

int
ssl3_handshake_write(SSL *s)
{
	if (SSL_IS_DTLS(s))
		return dtls1_do_write(s, SSL3_RT_HANDSHAKE);

	return ssl3_do_write(s, SSL3_RT_HANDSHAKE);
}

int
ssl3_new(SSL *s)
{
	if ((s->s3 = calloc(1, sizeof(*s->s3))) == NULL)
		return (0);
	if ((S3I(s) = calloc(1, sizeof(*S3I(s)))) == NULL) {
		free(s->s3);
		return (0);
	}

	s->method->internal->ssl_clear(s);

	return (1);
}

void
ssl3_free(SSL *s)
{
	if (s == NULL)
		return;

	tls1_cleanup_key_block(s);
	ssl3_release_read_buffer(s);
	ssl3_release_write_buffer(s);

	DH_free(S3I(s)->tmp.dh);
	EC_KEY_free(S3I(s)->tmp.ecdh);

	freezero(S3I(s)->tmp.x25519, X25519_KEY_LENGTH);

	sk_X509_NAME_pop_free(S3I(s)->tmp.ca_names, X509_NAME_free);

	BIO_free(S3I(s)->handshake_buffer);

	tls1_handshake_hash_free(s);

	free(S3I(s)->alpn_selected);

	freezero(S3I(s), sizeof(*S3I(s)));
	freezero(s->s3, sizeof(*s->s3));

	s->s3 = NULL;
}

void
ssl3_clear(SSL *s)
{
	struct ssl3_state_internal_st *internal;
	unsigned char	*rp, *wp;
	size_t		 rlen, wlen;

	tls1_cleanup_key_block(s);
	sk_X509_NAME_pop_free(S3I(s)->tmp.ca_names, X509_NAME_free);

	DH_free(S3I(s)->tmp.dh);
	S3I(s)->tmp.dh = NULL;
	EC_KEY_free(S3I(s)->tmp.ecdh);
	S3I(s)->tmp.ecdh = NULL;

	freezero(S3I(s)->tmp.x25519, X25519_KEY_LENGTH);
	S3I(s)->tmp.x25519 = NULL;

	rp = s->s3->rbuf.buf;
	wp = s->s3->wbuf.buf;
	rlen = s->s3->rbuf.len;
	wlen = s->s3->wbuf.len;

	BIO_free(S3I(s)->handshake_buffer);
	S3I(s)->handshake_buffer = NULL;

	tls1_handshake_hash_free(s);

	free(S3I(s)->alpn_selected);
	S3I(s)->alpn_selected = NULL;

	memset(S3I(s), 0, sizeof(*S3I(s)));
	internal = S3I(s);
	memset(s->s3, 0, sizeof(*s->s3));
	S3I(s) = internal;

	s->s3->rbuf.buf = rp;
	s->s3->wbuf.buf = wp;
	s->s3->rbuf.len = rlen;
	s->s3->wbuf.len = wlen;

	ssl_free_wbio_buffer(s);

	/* Not needed... */
	S3I(s)->renegotiate = 0;
	S3I(s)->total_renegotiations = 0;
	S3I(s)->num_renegotiations = 0;
	S3I(s)->in_read_app_data = 0;

	s->internal->packet_length = 0;
	s->version = TLS1_VERSION;
}

static long
ssl_ctrl_get_server_tmp_key(SSL *s, EVP_PKEY **pkey_tmp)
{
	EVP_PKEY *pkey = NULL;
	EC_GROUP *group = NULL;
	EC_POINT *point = NULL;
	EC_KEY *ec_key = NULL;
	BIGNUM *order = NULL;
	SESS_CERT *sc;
	int ret = 0;

	*pkey_tmp = NULL;

	if (s->server != 0)
		return 0;
	if (s->session == NULL || SSI(s)->sess_cert == NULL)
		return 0;

	sc = SSI(s)->sess_cert;

	if ((pkey = EVP_PKEY_new()) == NULL)
		return 0;

	if (sc->peer_dh_tmp != NULL) {
		ret = EVP_PKEY_set1_DH(pkey, sc->peer_dh_tmp);
	} else if (sc->peer_ecdh_tmp) {
		ret = EVP_PKEY_set1_EC_KEY(pkey, sc->peer_ecdh_tmp);
	} else if (sc->peer_x25519_tmp != NULL) {
		/* Fudge up an EC_KEY that looks like X25519... */
		if ((group = EC_GROUP_new(EC_GFp_mont_method())) == NULL)
			goto err;
		if ((point = EC_POINT_new(group)) == NULL)
			goto err;
		if ((order = BN_new()) == NULL)
			goto err;
		if (!BN_set_bit(order, 252))
			goto err;
		if (!EC_GROUP_set_generator(group, point, order, NULL))
			goto err;
		EC_GROUP_set_curve_name(group, NID_X25519);
		if ((ec_key = EC_KEY_new()) == NULL)
			goto err;
		if (!EC_KEY_set_group(ec_key, group))
			goto err;
		ret = EVP_PKEY_set1_EC_KEY(pkey, ec_key);
	}

	if (ret == 1) {
		*pkey_tmp = pkey;
		pkey = NULL;
	}

  err:
	EVP_PKEY_free(pkey);
	EC_GROUP_free(group);
	EC_POINT_free(point);
	EC_KEY_free(ec_key);
	BN_free(order);

	return (ret);
}

static int
_SSL_session_reused(SSL *s)
{
	return s->internal->hit;
}

static int
_SSL_num_renegotiations(SSL *s)
{
	return S3I(s)->num_renegotiations;
}

static int
_SSL_clear_num_renegotiations(SSL *s)
{
	int renegs;

	renegs = S3I(s)->num_renegotiations;
	S3I(s)->num_renegotiations = 0;

	return renegs;
}

static int
_SSL_total_renegotiations(SSL *s)
{
	return S3I(s)->total_renegotiations;
}

static int
_SSL_set_tmp_dh(SSL *s, DH *dh)
{
	DH *dh_tmp;

	if (!ssl_cert_inst(&s->cert)) {
		SSLerror(s, ERR_R_MALLOC_FAILURE);
		return 0;
	}

	if (dh == NULL) {
		SSLerror(s, ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}

	if ((dh_tmp = DHparams_dup(dh)) == NULL) {
		SSLerror(s, ERR_R_DH_LIB);
		return 0;
	}

	DH_free(s->cert->dh_tmp);
	s->cert->dh_tmp = dh_tmp;

	return 1;
}

static int
_SSL_set_dh_auto(SSL *s, int state)
{
	s->cert->dh_tmp_auto = state;
	return 1;
}

static int
_SSL_set_tmp_ecdh(SSL *s, EC_KEY *ecdh)
{
	const EC_GROUP *group;
	int nid;

	if (!ssl_cert_inst(&s->cert)) {
		SSLerror(s, ERR_R_MALLOC_FAILURE);
		return 0;
	}

	if (ecdh == NULL)
		return 0;
	if ((group = EC_KEY_get0_group(ecdh)) == NULL)
		return 0;

	nid = EC_GROUP_get_curve_name(group);
	return SSL_set1_groups(s, &nid, 1);
}

static int
_SSL_set_ecdh_auto(SSL *s, int state)
{
	return 1;
}

static int
_SSL_set_tlsext_host_name(SSL *s, const char *name)
{
	free(s->tlsext_hostname);
	s->tlsext_hostname = NULL;

	if (name == NULL)
		return 1;

	if (strlen(name) > TLSEXT_MAXLEN_host_name) {
		SSLerror(s, SSL_R_SSL3_EXT_INVALID_SERVERNAME);
		return 0;
	}

	if ((s->tlsext_hostname = strdup(name)) == NULL) {
		SSLerror(s, ERR_R_INTERNAL_ERROR);
		return 0;
	}

	return 1;
}

static int
_SSL_set_tlsext_debug_arg(SSL *s, void *arg)
{
	s->internal->tlsext_debug_arg = arg;
	return 1;
}

static int
_SSL_set_tlsext_status_type(SSL *s, int type)
{
	s->tlsext_status_type = type;
	return 1;
}

static int
_SSL_get_tlsext_status_exts(SSL *s, STACK_OF(X509_EXTENSION) **exts)
{
	*exts = s->internal->tlsext_ocsp_exts;
	return 1;
}

static int
_SSL_set_tlsext_status_exts(SSL *s, STACK_OF(X509_EXTENSION) *exts)
{
	/* XXX - leak... */
	s->internal->tlsext_ocsp_exts = exts;
	return 1;
}

static int
_SSL_get_tlsext_status_ids(SSL *s, STACK_OF(OCSP_RESPID) **ids)
{
	*ids = s->internal->tlsext_ocsp_ids;
	return 1;
}

static int
_SSL_set_tlsext_status_ids(SSL *s, STACK_OF(OCSP_RESPID) *ids)
{
	/* XXX - leak... */
	s->internal->tlsext_ocsp_ids = ids;
	return 1;
}

static int
_SSL_get_tlsext_status_ocsp_resp(SSL *s, unsigned char **resp)
{
	*resp = s->internal->tlsext_ocsp_resp;
	return s->internal->tlsext_ocsp_resplen;
}

static int
_SSL_set_tlsext_status_ocsp_resp(SSL *s, unsigned char *resp, int resp_len)
{
	free(s->internal->tlsext_ocsp_resp);
	s->internal->tlsext_ocsp_resp = resp;
	s->internal->tlsext_ocsp_resplen = resp_len;
	return 1;
}

int
SSL_set1_groups(SSL *s, const int *groups, size_t groups_len)
{
	return tls1_set_groups(&s->internal->tlsext_supportedgroups,
	    &s->internal->tlsext_supportedgroups_length, groups, groups_len);
}

int
SSL_set1_groups_list(SSL *s, const char *groups)
{
	return tls1_set_groups_list(&s->internal->tlsext_supportedgroups,
	    &s->internal->tlsext_supportedgroups_length, groups);
}

long
ssl3_ctrl(SSL *s, int cmd, long larg, void *parg)
{
	switch (cmd) {
	case SSL_CTRL_GET_SESSION_REUSED:
		return _SSL_session_reused(s);

	case SSL_CTRL_GET_NUM_RENEGOTIATIONS:
		return _SSL_num_renegotiations(s);

	case SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS:
		return _SSL_clear_num_renegotiations(s);

	case SSL_CTRL_GET_TOTAL_RENEGOTIATIONS:
		return _SSL_total_renegotiations(s);

	case SSL_CTRL_SET_TMP_DH:
		return _SSL_set_tmp_dh(s, parg);

	case SSL_CTRL_SET_TMP_DH_CB:
		SSLerror(s, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;

	case SSL_CTRL_SET_DH_AUTO:
		return _SSL_set_dh_auto(s, larg);

	case SSL_CTRL_SET_TMP_ECDH:
		return _SSL_set_tmp_ecdh(s, parg);

	case SSL_CTRL_SET_TMP_ECDH_CB:
		SSLerror(s, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;

	case SSL_CTRL_SET_ECDH_AUTO:
		return _SSL_set_ecdh_auto(s, larg);

	case SSL_CTRL_SET_TLSEXT_HOSTNAME:
		if (larg != TLSEXT_NAMETYPE_host_name) {
			SSLerror(s, SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE);
			return 0;
		}
		return _SSL_set_tlsext_host_name(s, parg);

	case SSL_CTRL_SET_TLSEXT_DEBUG_ARG:
		return _SSL_set_tlsext_debug_arg(s, parg);

	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE:
		return _SSL_set_tlsext_status_type(s, larg);

	case SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS:
		return _SSL_get_tlsext_status_exts(s, parg);

	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS:
		return _SSL_set_tlsext_status_exts(s, parg);

	case SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS:
		return _SSL_get_tlsext_status_ids(s, parg);

	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS:
		return _SSL_set_tlsext_status_ids(s, parg);

	case SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP:
		return _SSL_get_tlsext_status_ocsp_resp(s, parg);

	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP:
		return _SSL_set_tlsext_status_ocsp_resp(s, parg, larg);

	case SSL_CTRL_SET_GROUPS:
		return SSL_set1_groups(s, parg, larg);

	case SSL_CTRL_SET_GROUPS_LIST:
		return SSL_set1_groups_list(s, parg);

	case SSL_CTRL_GET_SERVER_TMP_KEY:
		return ssl_ctrl_get_server_tmp_key(s, parg);

	case SSL_CTRL_SET_MIN_PROTO_VERSION:
		if (larg < 0 || larg > UINT16_MAX)
			return 0;
		return SSL_set_min_proto_version(s, larg);

	case SSL_CTRL_SET_MAX_PROTO_VERSION:
		if (larg < 0 || larg > UINT16_MAX)
			return 0;
		return SSL_set_max_proto_version(s, larg);

	/*
	 * Legacy controls that should eventually be removed.
	 */
	case SSL_CTRL_GET_CLIENT_CERT_REQUEST:
		return 0;

	case SSL_CTRL_GET_FLAGS:
		return (int)(s->s3->flags);

	case SSL_CTRL_NEED_TMP_RSA:
		return 0;

	case SSL_CTRL_SET_TMP_RSA:
	case SSL_CTRL_SET_TMP_RSA_CB:
		SSLerror(s, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;
	}

	return 0;
}

long
ssl3_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
{
	if (cmd == SSL_CTRL_SET_TMP_DH_CB || cmd == SSL_CTRL_SET_TMP_ECDH_CB) {
		if (!ssl_cert_inst(&s->cert)) {
			SSLerror(s, ERR_R_MALLOC_FAILURE);
			return 0;
		}
	}

	switch (cmd) {
	case SSL_CTRL_SET_TMP_RSA_CB:
		SSLerror(s, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;

	case SSL_CTRL_SET_TMP_DH_CB:
		s->cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))fp;
		return 1;

	case SSL_CTRL_SET_TMP_ECDH_CB:
		return 1;

	case SSL_CTRL_SET_TLSEXT_DEBUG_CB:
		s->internal->tlsext_debug_cb = (void (*)(SSL *, int , int,
		    unsigned char *, int, void *))fp;
		return 1;
	}

	return 0;
}

static int
_SSL_CTX_set_tmp_dh(SSL_CTX *ctx, DH *dh)
{
	DH *dh_tmp;

	if ((dh_tmp = DHparams_dup(dh)) == NULL) {
		SSLerrorx(ERR_R_DH_LIB);
		return 0;
	}

	DH_free(ctx->internal->cert->dh_tmp);
	ctx->internal->cert->dh_tmp = dh_tmp;

	return 1;
}

static int
_SSL_CTX_set_dh_auto(SSL_CTX *ctx, int state)
{
	ctx->internal->cert->dh_tmp_auto = state;
	return 1;
}

static int
_SSL_CTX_set_tmp_ecdh(SSL_CTX *ctx, EC_KEY *ecdh)
{
	const EC_GROUP *group;
	int nid;

	if (ecdh == NULL)
		return 0;
	if ((group = EC_KEY_get0_group(ecdh)) == NULL)
		return 0;

	nid = EC_GROUP_get_curve_name(group);
	return SSL_CTX_set1_groups(ctx, &nid, 1);
}

static int
_SSL_CTX_set_ecdh_auto(SSL_CTX *ctx, int state)
{
	return 1;
}

static int
_SSL_CTX_set_tlsext_servername_arg(SSL_CTX *ctx, void *arg)
{
	ctx->internal->tlsext_servername_arg = arg;
	return 1;
}

static int
_SSL_CTX_get_tlsext_ticket_keys(SSL_CTX *ctx, unsigned char *keys, int keys_len)
{
	if (keys == NULL)
		return 48;

	if (keys_len != 48) {
		SSLerrorx(SSL_R_INVALID_TICKET_KEYS_LENGTH);
		return 0;
	}

	memcpy(keys, ctx->internal->tlsext_tick_key_name, 16);
	memcpy(keys + 16, ctx->internal->tlsext_tick_hmac_key, 16);
	memcpy(keys + 32, ctx->internal->tlsext_tick_aes_key, 16);

	return 1;
}

static int
_SSL_CTX_set_tlsext_ticket_keys(SSL_CTX *ctx, unsigned char *keys, int keys_len)
{
	if (keys == NULL)
		return 48;

	if (keys_len != 48) {
		SSLerrorx(SSL_R_INVALID_TICKET_KEYS_LENGTH);
		return 0;
	}

	memcpy(ctx->internal->tlsext_tick_key_name, keys, 16);
	memcpy(ctx->internal->tlsext_tick_hmac_key, keys + 16, 16);
	memcpy(ctx->internal->tlsext_tick_aes_key, keys + 32, 16);

	return 1;
}

static int
_SSL_CTX_set_tlsext_status_arg(SSL_CTX *ctx, void *arg)
{
	ctx->internal->tlsext_status_arg = arg;
	return 1;
}

static int
_SSL_CTX_add_extra_chain_cert(SSL_CTX *ctx, X509 *cert)
{
	if (ctx->extra_certs == NULL) {
		if ((ctx->extra_certs = sk_X509_new_null()) == NULL)
			return 0;
	}
	if (sk_X509_push(ctx->extra_certs, cert) == 0)
		return 0;

	return 1;
}

int
_SSL_CTX_get_extra_chain_certs(SSL_CTX *ctx, STACK_OF(X509) **certs)
{
	*certs = ctx->extra_certs;
	return 1;
}

int
_SSL_CTX_clear_extra_chain_certs(SSL_CTX *ctx)
{
	sk_X509_pop_free(ctx->extra_certs, X509_free);
	ctx->extra_certs = NULL;
	return 1;
}

int
SSL_CTX_set1_groups(SSL_CTX *ctx, const int *groups, size_t groups_len)
{
	return tls1_set_groups(&ctx->internal->tlsext_supportedgroups,
	    &ctx->internal->tlsext_supportedgroups_length, groups, groups_len);
}

int
SSL_CTX_set1_groups_list(SSL_CTX *ctx, const char *groups)
{
	return tls1_set_groups_list(&ctx->internal->tlsext_supportedgroups,
	    &ctx->internal->tlsext_supportedgroups_length, groups);
}

long
ssl3_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
{
	switch (cmd) {
	case SSL_CTRL_SET_TMP_DH:
		return _SSL_CTX_set_tmp_dh(ctx, parg);

	case SSL_CTRL_SET_TMP_DH_CB:
		SSLerrorx(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;

	case SSL_CTRL_SET_DH_AUTO:
		return _SSL_CTX_set_dh_auto(ctx, larg);

	case SSL_CTRL_SET_TMP_ECDH:
		return _SSL_CTX_set_tmp_ecdh(ctx, parg);

	case SSL_CTRL_SET_TMP_ECDH_CB:
		SSLerrorx(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;

	case SSL_CTRL_SET_ECDH_AUTO:
		return _SSL_CTX_set_ecdh_auto(ctx, larg);

	case SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG:
		return _SSL_CTX_set_tlsext_servername_arg(ctx, parg);

	case SSL_CTRL_GET_TLSEXT_TICKET_KEYS:
		return _SSL_CTX_get_tlsext_ticket_keys(ctx, parg, larg);

	case SSL_CTRL_SET_TLSEXT_TICKET_KEYS:
		return _SSL_CTX_set_tlsext_ticket_keys(ctx, parg, larg);

	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG:
		return _SSL_CTX_set_tlsext_status_arg(ctx, parg);

	case SSL_CTRL_EXTRA_CHAIN_CERT:
		return _SSL_CTX_add_extra_chain_cert(ctx, parg);

	case SSL_CTRL_GET_EXTRA_CHAIN_CERTS:
		return _SSL_CTX_get_extra_chain_certs(ctx, parg);

	case SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS:
		return _SSL_CTX_clear_extra_chain_certs(ctx);

	case SSL_CTRL_SET_GROUPS:
		return SSL_CTX_set1_groups(ctx, parg, larg);

	case SSL_CTRL_SET_GROUPS_LIST:
		return SSL_CTX_set1_groups_list(ctx, parg);

	case SSL_CTRL_SET_MIN_PROTO_VERSION:
		if (larg < 0 || larg > UINT16_MAX)
			return 0;
		return SSL_CTX_set_min_proto_version(ctx, larg);

	case SSL_CTRL_SET_MAX_PROTO_VERSION:
		if (larg < 0 || larg > UINT16_MAX)
			return 0;
		return SSL_CTX_set_max_proto_version(ctx, larg);

	/*
	 * Legacy controls that should eventually be removed.
	 */
	case SSL_CTRL_NEED_TMP_RSA:
		return 0;

	case SSL_CTRL_SET_TMP_RSA:
	case SSL_CTRL_SET_TMP_RSA_CB:
		SSLerrorx(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;
	}

	return 0;
}

long
ssl3_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
{
	switch (cmd) {
	case SSL_CTRL_SET_TMP_RSA_CB:
		SSLerrorx(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;

	case SSL_CTRL_SET_TMP_DH_CB:
		ctx->internal->cert->dh_tmp_cb =
		    (DH *(*)(SSL *, int, int))fp;
		return 1;

	case SSL_CTRL_SET_TMP_ECDH_CB:
		return 1;

	case SSL_CTRL_SET_TLSEXT_SERVERNAME_CB:
		ctx->internal->tlsext_servername_callback =
		    (int (*)(SSL *, int *, void *))fp;
		return 1;

	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB:
		ctx->internal->tlsext_status_cb = (int (*)(SSL *, void *))fp;
		return 1;

	case SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB:
		ctx->internal->tlsext_ticket_key_cb = (int (*)(SSL *, unsigned char  *,
		    unsigned char *, EVP_CIPHER_CTX *, HMAC_CTX *, int))fp;
		return 1;
	}

	return 0;
}

/*
 * This function needs to check if the ciphers required are actually available.
 */
const SSL_CIPHER *
ssl3_get_cipher_by_char(const unsigned char *p)
{
	CBS cipher;
	uint16_t cipher_value;

	/* We have to assume it is at least 2 bytes due to existing API. */
	CBS_init(&cipher, p, 2);
	if (!CBS_get_u16(&cipher, &cipher_value))
		return NULL;

	return ssl3_get_cipher_by_value(cipher_value);
}

int
ssl3_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
{
	if (p != NULL) {
		if ((c->id & ~SSL3_CK_VALUE_MASK) != SSL3_CK_ID)
			return (0);
		s2n(ssl3_cipher_get_value(c), p); 
	}
	return (2);
}

SSL_CIPHER *
ssl3_choose_cipher(SSL *s, STACK_OF(SSL_CIPHER) *clnt,
    STACK_OF(SSL_CIPHER) *srvr)
{
	unsigned long alg_k, alg_a, mask_k, mask_a;
	STACK_OF(SSL_CIPHER) *prio, *allow;
	SSL_CIPHER *c, *ret = NULL;
	int i, ii, ok;
	CERT *cert;

	/* Let's see which ciphers we can support */
	cert = s->cert;

	/*
	 * Do not set the compare functions, because this may lead to a
	 * reordering by "id". We want to keep the original ordering.
	 * We may pay a price in performance during sk_SSL_CIPHER_find(),
	 * but would have to pay with the price of sk_SSL_CIPHER_dup().
	 */

	if (s->internal->options & SSL_OP_CIPHER_SERVER_PREFERENCE) {
		prio = srvr;
		allow = clnt;
	} else {
		prio = clnt;
		allow = srvr;
	}

	for (i = 0; i < sk_SSL_CIPHER_num(prio); i++) {
		c = sk_SSL_CIPHER_value(prio, i);

		/* Skip TLS v1.2 only ciphersuites if not supported. */
		if ((c->algorithm_ssl & SSL_TLSV1_2) &&
		    !SSL_USE_TLS1_2_CIPHERS(s))
			continue;

		ssl_set_cert_masks(cert, c);
		mask_k = cert->mask_k;
		mask_a = cert->mask_a;

		alg_k = c->algorithm_mkey;
		alg_a = c->algorithm_auth;


		ok = (alg_k & mask_k) && (alg_a & mask_a);

		/*
		 * If we are considering an ECC cipher suite that uses our
		 * certificate check it.
		 */
		if (alg_a & SSL_aECDSA)
			ok = ok && tls1_check_ec_server_key(s);
		/*
		 * If we are considering an ECC cipher suite that uses
		 * an ephemeral EC key check it.
		 */
		if (alg_k & SSL_kECDHE)
			ok = ok && tls1_check_ec_tmp_key(s);

		if (!ok)
			continue;
		ii = sk_SSL_CIPHER_find(allow, c);
		if (ii >= 0) {
			ret = sk_SSL_CIPHER_value(allow, ii);
			break;
		}
	}
	return (ret);
}

int
ssl3_get_req_cert_types(SSL *s, CBB *cbb)
{
	unsigned long alg_k;

	alg_k = S3I(s)->hs.new_cipher->algorithm_mkey;

#ifndef OPENSSL_NO_GOST
	if ((alg_k & SSL_kGOST) != 0) {
		if (!CBB_add_u8(cbb, TLS_CT_GOST94_SIGN))
			return 0;
		if (!CBB_add_u8(cbb, TLS_CT_GOST01_SIGN))
			return 0;
		if (!CBB_add_u8(cbb, TLS_CT_GOST12_256_SIGN))
			return 0;
		if (!CBB_add_u8(cbb, TLS_CT_GOST12_512_SIGN))
			return 0;
	}
#endif

	if ((alg_k & SSL_kDHE) != 0) {
		if (!CBB_add_u8(cbb, SSL3_CT_RSA_FIXED_DH))
			return 0;
	}

	if (!CBB_add_u8(cbb, SSL3_CT_RSA_SIGN))
		return 0;

	/*
	 * ECDSA certs can be used with RSA cipher suites as well
	 * so we don't need to check for SSL_kECDH or SSL_kECDHE.
	 */
	if (!CBB_add_u8(cbb, TLS_CT_ECDSA_SIGN))
		return 0;

	return 1;
}

int
ssl3_shutdown(SSL *s)
{
	int	ret;

	/*
	 * Don't do anything much if we have not done the handshake or
	 * we don't want to send messages :-)
	 */
	if ((s->internal->quiet_shutdown) || (S3I(s)->hs.state == SSL_ST_BEFORE)) {
		s->internal->shutdown = (SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
		return (1);
	}

	if (!(s->internal->shutdown & SSL_SENT_SHUTDOWN)) {
		s->internal->shutdown|=SSL_SENT_SHUTDOWN;
		ssl3_send_alert(s, SSL3_AL_WARNING, SSL_AD_CLOSE_NOTIFY);
		/*
		 * Our shutdown alert has been sent now, and if it still needs
	 	 * to be written, s->s3->alert_dispatch will be true
		 */
		if (s->s3->alert_dispatch)
			return(-1);	/* return WANT_WRITE */
	} else if (s->s3->alert_dispatch) {
		/* resend it if not sent */
		ret = s->method->ssl_dispatch_alert(s);
		if (ret == -1) {
			/*
			 * We only get to return -1 here the 2nd/Nth
			 * invocation, we must  have already signalled
			 * return 0 upon a previous invoation,
			 * return WANT_WRITE
			 */
			return (ret);
		}
	} else if (!(s->internal->shutdown & SSL_RECEIVED_SHUTDOWN)) {
		/* If we are waiting for a close from our peer, we are closed */
		s->method->internal->ssl_read_bytes(s, 0, NULL, 0, 0);
		if (!(s->internal->shutdown & SSL_RECEIVED_SHUTDOWN)) {
			return(-1);	/* return WANT_READ */
		}
	}

	if ((s->internal->shutdown == (SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN)) &&
	    !s->s3->alert_dispatch)
		return (1);
	else
		return (0);
}

int
ssl3_write(SSL *s, const void *buf, int len)
{
	int	ret, n;

#if 0
	if (s->internal->shutdown & SSL_SEND_SHUTDOWN) {
		s->internal->rwstate = SSL_NOTHING;
		return (0);
	}
#endif
	errno = 0;
	if (S3I(s)->renegotiate)
		ssl3_renegotiate_check(s);

	/*
	 * This is an experimental flag that sends the
	 * last handshake message in the same packet as the first
	 * use data - used to see if it helps the TCP protocol during
	 * session-id reuse
	 */
	/* The second test is because the buffer may have been removed */
	if ((s->s3->flags & SSL3_FLAGS_POP_BUFFER) && (s->wbio == s->bbio)) {
		/* First time through, we write into the buffer */
		if (S3I(s)->delay_buf_pop_ret == 0) {
			ret = ssl3_write_bytes(s, SSL3_RT_APPLICATION_DATA,
			    buf, len);
			if (ret <= 0)
				return (ret);

			S3I(s)->delay_buf_pop_ret = ret;
		}

		s->internal->rwstate = SSL_WRITING;
		n = BIO_flush(s->wbio);
		if (n <= 0)
			return (n);
		s->internal->rwstate = SSL_NOTHING;

		/* We have flushed the buffer, so remove it */
		ssl_free_wbio_buffer(s);
		s->s3->flags&= ~SSL3_FLAGS_POP_BUFFER;

		ret = S3I(s)->delay_buf_pop_ret;
		S3I(s)->delay_buf_pop_ret = 0;
	} else {
		ret = s->method->internal->ssl_write_bytes(s,
		    SSL3_RT_APPLICATION_DATA, buf, len);
		if (ret <= 0)
			return (ret);
	}

	return (ret);
}

static int
ssl3_read_internal(SSL *s, void *buf, int len, int peek)
{
	int	ret;

	errno = 0;
	if (S3I(s)->renegotiate)
		ssl3_renegotiate_check(s);
	S3I(s)->in_read_app_data = 1;
	ret = s->method->internal->ssl_read_bytes(s,
	    SSL3_RT_APPLICATION_DATA, buf, len, peek);
	if ((ret == -1) && (S3I(s)->in_read_app_data == 2)) {
		/*
		 * ssl3_read_bytes decided to call s->internal->handshake_func, which
		 * called ssl3_read_bytes to read handshake data.
		 * However, ssl3_read_bytes actually found application data
		 * and thinks that application data makes sense here; so disable
		 * handshake processing and try to read application data again.
		 */
		s->internal->in_handshake++;
		ret = s->method->internal->ssl_read_bytes(s,
		    SSL3_RT_APPLICATION_DATA, buf, len, peek);
		s->internal->in_handshake--;
	} else
		S3I(s)->in_read_app_data = 0;

	return (ret);
}

int
ssl3_read(SSL *s, void *buf, int len)
{
	return ssl3_read_internal(s, buf, len, 0);
}

int
ssl3_peek(SSL *s, void *buf, int len)
{
	return ssl3_read_internal(s, buf, len, 1);
}

int
ssl3_renegotiate(SSL *s)
{
	if (s->internal->handshake_func == NULL)
		return (1);

	if (s->s3->flags & SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS)
		return (0);

	S3I(s)->renegotiate = 1;
	return (1);
}

int
ssl3_renegotiate_check(SSL *s)
{
	int	ret = 0;

	if (S3I(s)->renegotiate) {
		if ((s->s3->rbuf.left == 0) && (s->s3->wbuf.left == 0) &&
		    !SSL_in_init(s)) {
			/*
			 * If we are the server, and we have sent
			 * a 'RENEGOTIATE' message, we need to go
			 * to SSL_ST_ACCEPT.
			 */
			/* SSL_ST_ACCEPT */
			S3I(s)->hs.state = SSL_ST_RENEGOTIATE;
			S3I(s)->renegotiate = 0;
			S3I(s)->num_renegotiations++;
			S3I(s)->total_renegotiations++;
			ret = 1;
		}
	}
	return (ret);
}
/*
 * If we are using default SHA1+MD5 algorithms switch to new SHA256 PRF
 * and handshake macs if required.
 */
long
ssl_get_algorithm2(SSL *s)
{
	long	alg2 = S3I(s)->hs.new_cipher->algorithm2;

	if (s->method->internal->ssl3_enc->enc_flags & SSL_ENC_FLAG_SHA256_PRF &&
	    alg2 == (SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF))
		return SSL_HANDSHAKE_MAC_SHA256 | TLS1_PRF_SHA256;
	return alg2;
}
@


1.160
log
@ECDHE-RSA-DES-CBC3-SHA should not be marked HIGH.

Spotted by Andreas Bartelt <obsd at bartula dot de>
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.159 2017/08/28 16:37:04 jsing Exp $ */
d1855 1
d1870 1
@


1.159
log
@Remove the original (pre-IETF) chacha20-poly1305 cipher suites.

Support for the IETF standardised chacha20-poly1305 cipher suites was
added 16 months ago, which means they exist in both of the currently
supported OpenBSD releases.

Also prompted by Andreas Bartelt <obsd at bartula dot de>.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.158 2017/08/12 21:03:08 jsing Exp $ */
d1043 1
a1043 1
		.algo_strength = SSL_HIGH,
@


1.158
log
@Remove NPN support.

NPN was never standardised and the last draft expired in October 2012.
ALPN was standardised in July 2014 and has been supported in LibreSSL
since December 2014. NPN has also been removed from Chromium in May 2016.

TLS clients and servers that try to use/enable NPN will fail gracefully and
fallback to the default protocol, since it will essentially appear that the
otherside does not support NPN. At some point in the future we will
actually remove the NPN related symbols entirely.

ok bcook@@ beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.157 2017/08/12 02:55:22 jsing Exp $ */
a1297 51
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher CC13 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305_OLD,
		.id = TLS1_CK_ECDHE_RSA_CHACHA20_POLY1305_OLD,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CHACHA20POLY1305_OLD,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(0),
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher CC14 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_OLD,
		.id = TLS1_CK_ECDHE_ECDSA_CHACHA20_POLY1305_OLD,
		.algorithm_mkey = SSL_kECDHE,
		.algorithm_auth = SSL_aECDSA,
		.algorithm_enc = SSL_CHACHA20POLY1305_OLD,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(0),
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher CC15 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305_OLD,
		.id = TLS1_CK_DHE_RSA_CHACHA20_POLY1305_OLD,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_CHACHA20POLY1305_OLD,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(0),
@


1.157
log
@Remove support for DSS/DSA, since we removed the cipher suites a while
back.

ok guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.156 2017/08/11 17:54:41 jsing Exp $ */
a1707 4

	free(s->internal->next_proto_negotiated);
	s->internal->next_proto_negotiated = NULL;
	s->internal->next_proto_negotiated_len = 0;
@


1.156
log
@Convert ssl3_send_certificate_request() to CBB.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.155 2017/08/10 17:18:38 jsing Exp $ */
a2462 2
		if (!CBB_add_u8(cbb, SSL3_CT_DSS_FIXED_DH))
			return 0;
a2465 2
		return 0;
	if (!CBB_add_u8(cbb, SSL3_CT_DSS_SIGN))
@


1.155
log
@Clean up the EC key/curve configuration handling.

Over the years OpenSSL grew multiple ways of being able to specify EC keys
(and/or curves) for use with ECDH and ECDHE key exchange. You could specify
a static EC key (SSL{_CTX,}_set_tmp_ecdh()), use that as a curve and
generate ephemeral keys (SSL_OP_SINGLE_ECDH_USE), provide the EC key via
a callback that was provided with insufficient information
(SSL{_CTX,}_set_tmp_ecdh_cb()) or enable automatic selection and generation
of EC keys via SSL{_CTX,}_set_ecdh_auto(). This complexity leads to
problems (like ECDHE not being enabled) and potential weird configuration
(like being able to do ECDHE without the ephemeral part...).

We no longer support ECDH and ECDHE can be disabled by removing ECDHE
ciphers from the cipher list. As such, permanently enable automatic EC
curve selection and generation, effectively disabling all of the
configuration knobs. The only exception is the
SSL{_CTX,}_set_tmp_ecdh() functions, which retain part of their previous
behaviour by configuring the curve of the given EC key as the only curve
being enabled. Everything else becomes a no-op.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.154 2017/08/09 17:49:54 jsing Exp $ */
d2441 1
a2441 1
ssl3_get_req_cert_type(SSL *s, unsigned char *p)
d2443 1
a2443 2
	int		ret = 0;
	unsigned long	alg_k;
d2448 9
a2456 5
	if ((alg_k & SSL_kGOST)) {
		p[ret++] = TLS_CT_GOST94_SIGN;
		p[ret++] = TLS_CT_GOST01_SIGN;
		p[ret++] = TLS_CT_GOST12_256_SIGN;
		p[ret++] = TLS_CT_GOST12_512_SIGN;
d2460 5
a2464 3
	if (alg_k & SSL_kDHE) {
		p[ret++] = SSL3_CT_RSA_FIXED_DH;
		p[ret++] = SSL3_CT_DSS_FIXED_DH;
d2466 5
a2470 2
	p[ret++] = SSL3_CT_RSA_SIGN;
	p[ret++] = SSL3_CT_DSS_SIGN;
d2476 2
a2477 1
	p[ret++] = TLS_CT_ECDSA_SIGN;
d2479 1
a2479 1
	return (ret);
@


1.154
log
@Consistently return from each SSL/SSL_CTX control case, rather than
breaking from some and returning from others.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.153 2017/08/09 17:42:12 jsing Exp $ */
d1841 3
d1849 1
a1849 2
	if (ecdh == NULL) {
		SSLerror(s, ERR_R_PASSED_NULL_PARAMETER);
d1851 1
a1851 4
	}

	if (!EC_KEY_up_ref(ecdh)) {
		SSLerror(s, ERR_R_ECDH_LIB);
a1852 12
	}

	if (!(s->internal->options & SSL_OP_SINGLE_ECDH_USE)) {
		if (!EC_KEY_generate_key(ecdh)) {
			EC_KEY_free(ecdh);
			SSLerror(s, ERR_R_ECDH_LIB);
			return 0;
		}
	}

	EC_KEY_free(s->cert->ecdh_tmp);
	s->cert->ecdh_tmp = ecdh;
d1854 2
a1855 1
	return 1;
a1860 1
	s->cert->ecdh_tmp_auto = state;
a2084 1
		s->cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;
d2122 2
a2123 1
	EC_KEY *ecdh_tmp;
d2125 1
a2125 2
	if (ecdh == NULL) {
		SSLerrorx(ERR_R_ECDH_LIB);
d2127 1
a2127 4
	}

	if ((ecdh_tmp = EC_KEY_dup(ecdh)) == NULL) {
		SSLerrorx(ERR_R_EC_LIB);
a2128 8
	}
	if (!(ctx->internal->options & SSL_OP_SINGLE_ECDH_USE)) {
		if (!EC_KEY_generate_key(ecdh_tmp)) {
			EC_KEY_free(ecdh_tmp);
			SSLerrorx(ERR_R_ECDH_LIB);
			return 0;
		}
	}
d2130 2
a2131 4
	EC_KEY_free(ctx->internal->cert->ecdh_tmp);
	ctx->internal->cert->ecdh_tmp = ecdh_tmp;

	return 1;
a2136 1
	ctx->internal->cert->ecdh_tmp_auto = state;
a2321 2
		ctx->internal->cert->ecdh_tmp_cb =
		    (EC_KEY *(*)(SSL *, int, int))fp;
@


1.153
log
@Split out the remaining SSL_CTX controls into individual functions.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.152 2017/08/09 17:21:34 jsing Exp $ */
a2080 2
	int	ret = 0;

d2084 1
a2084 1
			return (0);
d2091 2
a2092 1
		break;
d2095 2
a2096 1
		break;
d2099 2
a2100 1
		break;
d2104 1
a2104 3
		break;
	default:
		break;
d2106 2
a2107 1
	return (ret);
d2313 1
a2313 1
			return (0);
d2318 1
a2318 1
			return (0);
d2331 1
d2333 1
a2333 4
	default:
		return (0);
	}
	return (1);
a2338 4
	CERT	*cert;

	cert = ctx->internal->cert;

d2342 1
a2342 1
		return (0);
d2345 3
a2347 2
		cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))fp;
		break;
d2350 3
a2352 2
		cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;
		break;
d2357 1
a2357 1
		break;
d2361 1
a2361 1
		break;
d2366 2
a2367 1
		break;
d2369 1
a2369 4
	default:
		return (0);
	}
	return (1);
@


1.152
log
@Start splitting out SSL_CTX controls into individual functions, so that
they can eventually be exposed as direct functions/symbols.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.151 2017/08/09 16:50:00 jsing Exp $ */
d2168 78
d2285 4
a2288 2
		ctx->internal->tlsext_servername_arg = parg;
		break;
d2291 1
a2291 23
	case SSL_CTRL_GET_TLSEXT_TICKET_KEYS:
		{
			unsigned char *keys = parg;
			if (!keys)
				return 48;
			if (larg != 48) {
				SSLerrorx(SSL_R_INVALID_TICKET_KEYS_LENGTH);
				return 0;
			}
			if (cmd == SSL_CTRL_SET_TLSEXT_TICKET_KEYS) {
				memcpy(ctx->internal->tlsext_tick_key_name, keys, 16);
				memcpy(ctx->internal->tlsext_tick_hmac_key,
				    keys + 16, 16);
				memcpy(ctx->internal->tlsext_tick_aes_key, keys + 32, 16);
			} else {
				memcpy(keys, ctx->internal->tlsext_tick_key_name, 16);
				memcpy(keys + 16,
				    ctx->internal->tlsext_tick_hmac_key, 16);
				memcpy(keys + 32,
				    ctx->internal->tlsext_tick_aes_key, 16);
			}
			return 1;
		}
d2294 1
a2294 2
		ctx->internal->tlsext_status_arg = parg;
		return 1;
a2295 1
		/* A Thawte special :-) */
d2297 1
a2297 6
		if (ctx->extra_certs == NULL) {
			if ((ctx->extra_certs = sk_X509_new_null()) == NULL)
				return (0);
		}
		sk_X509_push(ctx->extra_certs,(X509 *)parg);
		break;
d2300 1
a2300 2
		*(STACK_OF(X509) **)parg = ctx->extra_certs;
		break;
d2303 1
a2303 3
		sk_X509_pop_free(ctx->extra_certs, X509_free);
		ctx->extra_certs = NULL;
		break;
@


1.151
log
@Be consistent and return from each SSL control case, rather than breaking
from some.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.150 2017/08/09 16:47:18 jsing Exp $ */
d2110 72
a2184 4
	CERT	*cert;

	cert = ctx->internal->cert;

a2185 6
	case SSL_CTRL_NEED_TMP_RSA:
		return (0);
	case SSL_CTRL_SET_TMP_RSA:
	case SSL_CTRL_SET_TMP_RSA_CB:
		SSLerrorx(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return (0);
d2187 1
a2187 13
		{
			DH *new = NULL, *dh;

			dh = (DH *)parg;
			if ((new = DHparams_dup(dh)) == NULL) {
				SSLerrorx(ERR_R_DH_LIB);
				return 0;
			}
			DH_free(cert->dh_tmp);
			cert->dh_tmp = new;
			return 1;
		}
		/*break; */
d2191 1
a2191 1
		return (0);
d2194 1
a2194 2
		ctx->internal->cert->dh_tmp_auto = larg;
		return (1);
d2197 1
a2197 25
		{
			EC_KEY *ecdh = NULL;

			if (parg == NULL) {
				SSLerrorx(ERR_R_ECDH_LIB);
				return 0;
			}
			ecdh = EC_KEY_dup((EC_KEY *)parg);
			if (ecdh == NULL) {
				SSLerrorx(ERR_R_EC_LIB);
				return 0;
			}
			if (!(ctx->internal->options & SSL_OP_SINGLE_ECDH_USE)) {
				if (!EC_KEY_generate_key(ecdh)) {
					EC_KEY_free(ecdh);
					SSLerrorx(ERR_R_ECDH_LIB);
					return 0;
				}
			}

			EC_KEY_free(cert->ecdh_tmp);
			cert->ecdh_tmp = ecdh;
			return 1;
		}
		/* break; */
d2201 4
a2204 1
		return (0);
a2238 4
	case SSL_CTRL_SET_ECDH_AUTO:
		ctx->internal->cert->ecdh_tmp_auto = larg;
		return 1;

d2273 11
a2287 14
}

int
SSL_CTX_set1_groups(SSL_CTX *ctx, const int *groups, size_t groups_len)
{
	return tls1_set_groups(&ctx->internal->tlsext_supportedgroups,
	    &ctx->internal->tlsext_supportedgroups_length, groups, groups_len);
}

int
SSL_CTX_set1_groups_list(SSL_CTX *ctx, const char *groups)
{
	return tls1_set_groups_list(&ctx->internal->tlsext_supportedgroups,
	    &ctx->internal->tlsext_supportedgroups_length, groups);
@


1.150
log
@Split out the remaining SSL controls into individual functions.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.149 2017/08/09 15:52:27 jsing Exp $ */
a1973 2
	int ret = 0;

d2002 1
a2002 1
		return (0);
d2045 1
a2045 2
		ret = ssl_ctrl_get_server_tmp_key(s, parg);
		break;
d2049 1
a2049 1
			return (0);
d2054 1
a2054 1
			return (0);
d2061 1
a2061 1
		break;
d2064 1
a2064 2
		ret = (int)(s->s3->flags);
		break;
d2067 1
a2067 2
		ret = 0;
		break;
d2072 1
a2072 4
		break;

	default:
		break;
d2075 1
a2075 1
	return (ret);
@


1.149
log
@Split more controls into individual functions.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.148 2017/08/09 15:25:27 jsing Exp $ */
d1877 80
d1990 1
a1990 1
		return _SSL_set_tmp_dh(s, (DH *)parg);
d2000 1
a2000 1
		return _SSL_set_tmp_ecdh(s, (EC_KEY *)parg);
d2010 1
a2010 17
		if (larg == TLSEXT_NAMETYPE_host_name) {
			free(s->tlsext_hostname);
			s->tlsext_hostname = NULL;

			ret = 1;
			if (parg == NULL)
				break;
			if (strlen((char *)parg) > TLSEXT_MAXLEN_host_name) {
				SSLerror(s, SSL_R_SSL3_EXT_INVALID_SERVERNAME);
				return 0;
			}
			if ((s->tlsext_hostname = strdup((char *)parg))
			    == NULL) {
				SSLerror(s, ERR_R_INTERNAL_ERROR);
				return 0;
			}
		} else {
d2014 1
a2014 1
		break;
d2017 1
a2017 3
		s->internal->tlsext_debug_arg = parg;
		ret = 1;
		break;
d2020 1
a2020 3
		s->tlsext_status_type = larg;
		ret = 1;
		break;
d2023 1
a2023 3
		*(STACK_OF(X509_EXTENSION) **)parg = s->internal->tlsext_ocsp_exts;
		ret = 1;
		break;
d2026 1
a2026 3
		s->internal->tlsext_ocsp_exts = parg;
		ret = 1;
		break;
d2029 1
a2029 3
		*(STACK_OF(OCSP_RESPID) **)parg = s->internal->tlsext_ocsp_ids;
		ret = 1;
		break;
d2032 1
a2032 3
		s->internal->tlsext_ocsp_ids = parg;
		ret = 1;
		break;
d2035 1
a2035 2
		*(unsigned char **)parg = s->internal->tlsext_ocsp_resp;
		return s->internal->tlsext_ocsp_resplen;
d2038 1
a2038 5
		free(s->internal->tlsext_ocsp_resp);
		s->internal->tlsext_ocsp_resp = parg;
		s->internal->tlsext_ocsp_resplen = larg;
		ret = 1;
		break;
@


1.148
log
@Start splitting out controls into individual functions, so that they can
eventually be exposed as direct functions/symbols.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.147 2017/08/09 15:02:53 jsing Exp $ */
d1805 72
a1895 7
	if (cmd == SSL_CTRL_SET_TMP_DH || cmd == SSL_CTRL_SET_TMP_ECDH) {
		if (!ssl_cert_inst(&s->cert)) {
			SSLerror(s, ERR_R_MALLOC_FAILURE);
			return (0);
		}
	}

a1908 8
	case SSL_CTRL_NEED_TMP_RSA:
		ret = 0;
		break;

	case SSL_CTRL_SET_TMP_RSA:
	case SSL_CTRL_SET_TMP_RSA_CB:
		SSLerror(s, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		break;
d1910 1
a1910 15
		{
			DH *dh = (DH *)parg;
			if (dh == NULL) {
				SSLerror(s, ERR_R_PASSED_NULL_PARAMETER);
				return (ret);
			}
			if ((dh = DHparams_dup(dh)) == NULL) {
				SSLerror(s, ERR_R_DH_LIB);
				return (ret);
			}
			DH_free(s->cert->dh_tmp);
			s->cert->dh_tmp = dh;
			ret = 1;
		}
		break;
d1914 1
a1914 1
		return (ret);
d1917 1
a1917 2
		s->cert->dh_tmp_auto = larg;
		return 1;
d1920 1
a1920 24
		{
			EC_KEY *ecdh = NULL;

			if (parg == NULL) {
				SSLerror(s, ERR_R_PASSED_NULL_PARAMETER);
				return (ret);
			}
			if (!EC_KEY_up_ref((EC_KEY *)parg)) {
				SSLerror(s, ERR_R_ECDH_LIB);
				return (ret);
			}
			ecdh = (EC_KEY *)parg;
			if (!(s->internal->options & SSL_OP_SINGLE_ECDH_USE)) {
				if (!EC_KEY_generate_key(ecdh)) {
					EC_KEY_free(ecdh);
					SSLerror(s, ERR_R_ECDH_LIB);
					return (ret);
				}
			}
			EC_KEY_free(s->cert->ecdh_tmp);
			s->cert->ecdh_tmp = ecdh;
			ret = 1;
		}
		break;
d1926 3
d1951 1
a1992 5
	case SSL_CTRL_SET_ECDH_AUTO:
		s->cert->ecdh_tmp_auto = larg;
		ret = 1;
		break;

d2014 1
a2014 1
	 * Legacy controls that should be removed.
d2021 9
@


1.147
log
@Remove unnecessary curly braces and unindent. Also add a few blank lines
for readability.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.146 2017/08/09 14:58:11 jsing Exp $ */
d1776 43
d1833 2
a1834 4
		ret = s->internal->hit;
		break;
	case SSL_CTRL_GET_CLIENT_CERT_REQUEST:
		break;
d1836 2
a1837 2
		ret = S3I(s)->num_renegotiations;
		break;
d1839 2
a1840 3
		ret = S3I(s)->num_renegotiations;
		S3I(s)->num_renegotiations = 0;
		break;
d1842 2
a1843 5
		ret = S3I(s)->total_renegotiations;
		break;
	case SSL_CTRL_GET_FLAGS:
		ret = (int)(s->s3->flags);
		break;
d1847 1
d1995 10
a2009 14
}

int
SSL_set1_groups(SSL *s, const int *groups, size_t groups_len)
{
	return tls1_set_groups(&s->internal->tlsext_supportedgroups,
	    &s->internal->tlsext_supportedgroups_length, groups, groups_len);
}

int
SSL_set1_groups_list(SSL *s, const char *groups)
{
	return tls1_set_groups_list(&s->internal->tlsext_supportedgroups,
	    &s->internal->tlsext_supportedgroups_length, groups);
@


1.146
log
@Fix conditionals for DH controls.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.145 2017/07/15 17:40:53 jsing Exp $ */
d1864 1
d1866 3
a1868 5
		{
			SSLerror(s, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
			return (ret);
		}
		break;
d2073 1
d2075 3
a2077 5
		{
			SSLerrorx(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
			return (0);
		}
		break;
d2081 1
d2180 1
d2184 1
d2188 1
@


1.145
log
@Remove unused variable.

Reported by <dravion at ht-foss dot net>
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.144 2017/05/07 21:05:05 jsing Exp $ */
d1781 1
a1781 1
	if (cmd == SSL_CTRL_SET_TMP_DH || cmd == SSL_CTRL_SET_TMP_DH_CB) {
d1984 1
a1984 1
	if (cmd == SSL_CTRL_SET_TMP_DH_CB) {
@


1.144
log
@Drop cipher suites with DSS authentication - there is no good reason to
keep these around.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.143 2017/05/07 04:22:24 beck Exp $ */
d1516 1
a1516 1
	unsigned char *d, *p;
d1519 1
a1519 1
	d = p = (unsigned char *)s->internal->init_buf->data;
@


1.143
log
@Move state from ssl->internal to the handshake structure.
while we are at it, convert SSLerror to use a function
internally, so that we may later allocate the handshake
structure and check for it
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.142 2017/05/06 22:24:57 beck Exp $ */
a275 32
	/* Cipher 12 */
	{
		.valid = 1,
		.name = SSL3_TXT_EDH_DSS_DES_64_CBC_SHA,
		.id = SSL3_CK_EDH_DSS_DES_64_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 56,
		.alg_bits = 56,
	},

	/* Cipher 13 */
	{
		.valid = 1,
		.name = SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA,
		.id = SSL3_CK_EDH_DSS_DES_192_CBC3_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

a375 16
	/* Cipher 32 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_DSS_WITH_AES_128_SHA,
		.id = TLS1_CK_DHE_DSS_WITH_AES_128_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

a423 16
	/* Cipher 38 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_DSS_WITH_AES_256_SHA,
		.id = TLS1_CK_DHE_DSS_WITH_AES_256_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a504 16
	/* Cipher 40 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256,
		.id = TLS1_CK_DHE_DSS_WITH_AES_128_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

a523 16
	/* Cipher 44 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
		.id = TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_CAMELLIA128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

a573 16
	/* Cipher 6A */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256,
		.id = TLS1_CK_DHE_DSS_WITH_AES_256_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a675 16
	/* Cipher 87 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
		.id = TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_CAMELLIA256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a784 36
	/* Cipher A2 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256,
		.id = TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_AES128GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher A3 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384,
		.id = TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_AES256GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a839 16
	/* Cipher BD */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256,
		.id = TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_CAMELLIA128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 128,
		.alg_bits = 128,
	},

a878 16
		.algorithm_enc = SSL_CAMELLIA256,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher C3 */
	{
		.valid = 1,
		.name = TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256,
		.id = TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
@


1.142
log
@Bring in an SSL_HANDSHAKE structure and commence the great shovelling
ok jsing@@, gcc@@, regress@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.141 2017/05/06 20:37:24 jsing Exp $ */
d2543 1
a2543 1
	if ((s->internal->quiet_shutdown) || (s->internal->state == SSL_ST_BEFORE)) {
d2707 1
a2707 1
			s->internal->state = SSL_ST_RENEGOTIATE;
@


1.141
log
@Provide SSL{,_CTX}_set_{min,max}_proto_version() functions.

Rides minor bump.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.140 2017/04/10 17:27:33 jsing Exp $ */
d2507 1
a2507 1
	alg_k = S3I(s)->tmp.new_cipher->algorithm_mkey;
d2723 1
a2723 1
	long	alg2 = S3I(s)->tmp.new_cipher->algorithm2;
@


1.140
log
@Use freezero() for the internal opaque structures, instead of the current
explicit_bzero()/free(). Less code and potentially less overhead.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.138 2017/03/10 16:03:27 jsing Exp $ */
d2144 10
d2335 10
@


1.139
log
@Use freezero() for X25519 keys - same result with more readable code.
@
text
@d1847 2
a1848 5
	explicit_bzero(S3I(s), sizeof(*S3I(s)));
	free(S3I(s));

	explicit_bzero(s->s3, sizeof(*s->s3));
	free(s->s3);
@


1.138
log
@Remove the handshake digests and related code, replacing remaining uses
with the handshake hash. For now tls1_digest_cached_records() is retained
to release the handshake buffer.

ok beck@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.137 2017/03/05 14:39:53 jsing Exp $ */
d1837 1
a1837 3
	if (S3I(s)->tmp.x25519 != NULL)
		explicit_bzero(S3I(s)->tmp.x25519, X25519_KEY_LENGTH);
	free(S3I(s)->tmp.x25519);
d1871 1
a1871 3
	if (S3I(s)->tmp.x25519 != NULL)
		explicit_bzero(S3I(s)->tmp.x25519, X25519_KEY_LENGTH);
	free(S3I(s)->tmp.x25519);
@


1.137
log
@Provide a rolling handshake hash that commences as soon as the cipher
suite has been selected, and convert the final finish MAC to use this
handshake hash.

This is a first step towards cleaning up the current handshake
buffer/digest code.

ok beck@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.136 2017/03/04 16:32:00 jsing Exp $ */
a1844 1
	tls1_free_digest_list(s);
a1885 1
	tls1_free_digest_list(s);
@


1.136
log
@Drop the second argument of dtls1_set_message_header() and make it a void
function. Nothing makes use of the return value and the second argument
was only used to produce the return value...
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.135 2017/02/07 02:08:38 beck Exp $ */
d1842 1
d1844 1
d1846 2
d1888 1
@


1.135
log
@Change SSLerror() back to taking two args, with the first one being an SSL *.
Make a table of "function codes" which maps the internal state of the SSL *
to something like a useful name so in a typical error in the connection you
know in what sort of place in the handshake things happened. (instead of
by arcane function name).
Add SSLerrorx() for when we don't have an SSL *
ok jsing@@ after us both being prodded by bluhm@@ to make it not terrible
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.134 2017/02/05 15:06:05 jsing Exp $ */
d1725 1
a1725 1
		dtls1_set_message_header(s, d, msg_type, len, 0, len);
d1788 1
a1788 1
		dtls1_set_message_header(s, data, msg_type, len, 0, len);
@


1.134
log
@Define values for SSL_CTRL_SET_GROUPS{,_LIST} and wire them up to the
SSL_{,CTX_}ctrl() functions. As crazy as it is, some software appears to
call the control functions directly rather than using the macros (or
functions) provided by the library.

Discussed with beck@@ and sthen@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.133 2017/01/26 12:16:13 beck Exp $ */
d1983 1
a1983 1
			SSLerror(ERR_R_MALLOC_FAILURE);
d2012 1
a2012 1
		SSLerror(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2018 1
a2018 1
				SSLerror(ERR_R_PASSED_NULL_PARAMETER);
d2022 1
a2022 1
				SSLerror(ERR_R_DH_LIB);
d2032 1
a2032 1
		SSLerror(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2044 1
a2044 1
				SSLerror(ERR_R_PASSED_NULL_PARAMETER);
d2048 1
a2048 1
				SSLerror(ERR_R_ECDH_LIB);
d2055 1
a2055 1
					SSLerror(ERR_R_ECDH_LIB);
d2066 1
a2066 1
			SSLerror(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2079 1
a2079 1
				SSLerror(SSL_R_SSL3_EXT_INVALID_SERVERNAME);
d2084 1
a2084 1
				SSLerror(ERR_R_INTERNAL_ERROR);
d2088 1
a2088 1
			SSLerror(SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE);
d2176 1
a2176 1
			SSLerror(ERR_R_MALLOC_FAILURE);
d2183 1
a2183 1
		SSLerror(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2213 1
a2213 1
		SSLerror(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2221 1
a2221 1
				SSLerror(ERR_R_DH_LIB);
d2231 1
a2231 1
		SSLerror(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2243 1
a2243 1
				SSLerror(ERR_R_ECDH_LIB);
d2248 1
a2248 1
				SSLerror(ERR_R_EC_LIB);
d2254 1
a2254 1
					SSLerror(ERR_R_ECDH_LIB);
d2266 1
a2266 1
			SSLerror(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2280 1
a2280 1
				SSLerror(SSL_R_INVALID_TICKET_KEYS_LENGTH);
d2359 1
a2359 1
		SSLerror(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
@


1.133
log
@Finish the fallout of the SSLerr->SSLerror cleanup to get rid of the ugly
line wraps that resulted
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.132 2017/01/26 10:40:21 beck Exp $ */
d2138 6
d2323 6
@


1.132
log
@Send the error function codes to rot in the depths of hell where they belong
We leave a single funciton code (0xFFF) to say "SSL_internal" so the public
API will not break, and we replace all internal use of the two argument
SSL_err() with the internal only SSL_error() that only takes a reason code.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.131 2017/01/24 14:57:31 jsing Exp $ */
d1983 1
a1983 2
			SSLerror(
			    ERR_R_MALLOC_FAILURE);
d2018 1
a2018 2
				SSLerror(
				    ERR_R_PASSED_NULL_PARAMETER);
d2022 1
a2022 2
				SSLerror(
				    ERR_R_DH_LIB);
d2044 1
a2044 2
				SSLerror(
				    ERR_R_PASSED_NULL_PARAMETER);
d2048 1
a2048 2
				SSLerror(
				    ERR_R_ECDH_LIB);
d2055 1
a2055 2
					SSLerror(
					    ERR_R_ECDH_LIB);
d2066 1
a2066 2
			SSLerror(
			    ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2079 1
a2079 2
				SSLerror(
				    SSL_R_SSL3_EXT_INVALID_SERVERNAME);
d2084 1
a2084 2
				SSLerror(
				    ERR_R_INTERNAL_ERROR);
d2088 1
a2088 2
			SSLerror(
			    SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE);
d2170 1
a2170 2
			SSLerror(
			    ERR_R_MALLOC_FAILURE);
d2215 1
a2215 2
				SSLerror(
				    ERR_R_DH_LIB);
d2237 1
a2237 2
				SSLerror(
				    ERR_R_ECDH_LIB);
d2242 1
a2242 2
				SSLerror(
				    ERR_R_EC_LIB);
d2248 1
a2248 2
					SSLerror(
					    ERR_R_ECDH_LIB);
d2260 1
a2260 2
			SSLerror(
			    ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2274 1
a2274 2
				SSLerror(
				    SSL_R_INVALID_TICKET_KEYS_LENGTH);
@


1.131
log
@sk_pop_free() checks for NULL so do not bother doing it from the callers.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.130 2017/01/24 09:03:21 jsing Exp $ */
d1983 1
a1983 1
			SSLerr(SSL_F_SSL3_CTRL,
d2013 1
a2013 1
		SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2019 1
a2019 1
				SSLerr(SSL_F_SSL3_CTRL,
d2024 1
a2024 1
				SSLerr(SSL_F_SSL3_CTRL,
d2035 1
a2035 1
		SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2047 1
a2047 1
				SSLerr(SSL_F_SSL3_CTRL,
d2052 1
a2052 1
				SSLerr(SSL_F_SSL3_CTRL,
d2060 1
a2060 1
					SSLerr(SSL_F_SSL3_CTRL,
d2072 1
a2072 1
			SSLerr(SSL_F_SSL3_CTRL,
d2086 1
a2086 1
				SSLerr(SSL_F_SSL3_CTRL,
d2092 1
a2092 1
				SSLerr(SSL_F_SSL3_CTRL,
d2097 1
a2097 1
			SSLerr(SSL_F_SSL3_CTRL,
d2180 1
a2180 1
			SSLerr(SSL_F_SSL3_CALLBACK_CTRL,
d2188 1
a2188 1
		SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2218 1
a2218 1
		SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2226 1
a2226 1
				SSLerr(SSL_F_SSL3_CTX_CTRL,
d2237 1
a2237 1
		SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d2249 1
a2249 1
				SSLerr(SSL_F_SSL3_CTX_CTRL,
d2255 1
a2255 1
				SSLerr(SSL_F_SSL3_CTX_CTRL,
d2262 1
a2262 1
					SSLerr(SSL_F_SSL3_CTX_CTRL,
d2275 1
a2275 1
			SSLerr(SSL_F_SSL3_CTX_CTRL,
d2290 1
a2290 1
				SSLerr(SSL_F_SSL3_CTX_CTRL,
d2364 1
a2364 1
		SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
@


1.130
log
@Add support for setting the supported EC curves via
SSL{_CTX}_set1_groups{_list}() - also provide defines for the previous
SSL{_CTX}_set1_curves{_list} names.

This also changes the default list of EC curves to be X25519, P-256 and
P-384. If you want others (such a brainpool) you need to configure this
yourself.

Inspired by parts of BoringSSL and OpenSSL.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.129 2017/01/24 03:00:54 jsing Exp $ */
d1841 1
a1841 2
	if (S3I(s)->tmp.ca_names != NULL)
		sk_X509_NAME_pop_free(S3I(s)->tmp.ca_names, X509_NAME_free);
d1863 1
a1863 2
	if (S3I(s)->tmp.ca_names != NULL)
		sk_X509_NAME_pop_free(S3I(s)->tmp.ca_names, X509_NAME_free);
d2331 2
a2332 4
		if (ctx->extra_certs) {
			sk_X509_pop_free(ctx->extra_certs, X509_free);
			ctx->extra_certs = NULL;
		}
@


1.129
log
@There is no point returning then breaking...
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.128 2017/01/23 14:35:42 jsing Exp $ */
d2157 1
d2161 14
d2343 14
@


1.128
log
@Move options and mode from SSL_CTX and SSL to internal, since these can be
set and cleared via existing functions.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.127 2017/01/23 13:36:13 jsing Exp $ */
a2298 1
		break;
@


1.127
log
@Split most of SSL_METHOD out into an internal variant, which is opaque.

Discussed with beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.126 2017/01/23 08:48:44 beck Exp $ */
d2059 1
a2059 1
			if (!(s->options & SSL_OP_SINGLE_ECDH_USE)) {
d2246 1
a2246 1
			if (!(ctx->options & SSL_OP_SINGLE_ECDH_USE)) {
d2416 1
a2416 1
	if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE) {
@


1.126
log
@send state and rstate from ssl_st into internal. There are accessors
so these should not be diddled with directly
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.125 2017/01/23 06:45:30 beck Exp $ */
d1819 1
a1819 1
	s->method->ssl_clear(s);
d2536 1
a2536 1
		s->method->ssl_read_bytes(s, 0, NULL, 0, 0);
d2595 2
a2596 2
		ret = s->method->ssl_write_bytes(s, SSL3_RT_APPLICATION_DATA,
		    buf, len);
d2613 1
a2613 1
	ret = s->method->ssl_read_bytes(s,
d2624 1
a2624 1
		ret = s->method->ssl_read_bytes(s,
d2690 1
a2690 1
	if (s->method->ssl3_enc->enc_flags & SSL_ENC_FLAG_SHA256_PRF &&
@


1.125
log
@Move a large part of ssl_st into internal, so we can see what squeals.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.124 2017/01/23 05:13:02 jsing Exp $ */
d1681 1
a1681 1
	if (s->rstate == SSL_ST_READ_BODY)
d2508 1
a2508 1
	if ((s->internal->quiet_shutdown) || (s->state == SSL_ST_BEFORE)) {
d2672 1
a2672 1
			s->state = SSL_ST_RENEGOTIATE;
@


1.124
log
@Move most of the fields in SSL_CTX to internal - the ones that remain are
known to be in use.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.123 2017/01/23 04:55:26 beck Exp $ */
d1700 1
a1700 1
	d = p = (unsigned char *)s->init_buf->data;
d1715 1
a1715 1
	d = p = (unsigned char *)s->init_buf->data;
d1721 2
a1722 2
	s->init_num = ssl3_handshake_msg_hdr_len(s) + (int)len;
	s->init_off = 0;
d1769 1
a1769 1
	if (!BUF_MEM_grow_clean(s->init_buf, outlen))
d1772 1
a1772 1
	memcpy(s->init_buf->data, data, outlen);
d1774 2
a1775 2
	s->init_num = (int)outlen;
	s->init_off = 0;
d1908 1
a1908 1
	s->packet_length = 0;
d1993 1
a1993 1
		ret = s->hit;
d2115 1
a2115 1
		*(STACK_OF(X509_EXTENSION) **)parg = s->tlsext_ocsp_exts;
d2120 1
a2120 1
		s->tlsext_ocsp_exts = parg;
d2125 1
a2125 1
		*(STACK_OF(OCSP_RESPID) **)parg = s->tlsext_ocsp_ids;
d2130 1
a2130 1
		s->tlsext_ocsp_ids = parg;
d2135 2
a2136 2
		*(unsigned char **)parg = s->tlsext_ocsp_resp;
		return s->tlsext_ocsp_resplen;
d2139 3
a2141 3
		free(s->tlsext_ocsp_resp);
		s->tlsext_ocsp_resp = parg;
		s->tlsext_ocsp_resplen = larg;
d2508 2
a2509 2
	if ((s->quiet_shutdown) || (s->state == SSL_ST_BEFORE)) {
		s->shutdown = (SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
d2513 2
a2514 2
	if (!(s->shutdown & SSL_SENT_SHUTDOWN)) {
		s->shutdown|=SSL_SENT_SHUTDOWN;
d2534 1
a2534 1
	} else if (!(s->shutdown & SSL_RECEIVED_SHUTDOWN)) {
d2537 1
a2537 1
		if (!(s->shutdown & SSL_RECEIVED_SHUTDOWN)) {
d2542 1
a2542 1
	if ((s->shutdown == (SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN)) &&
d2555 2
a2556 2
	if (s->shutdown & SSL_SEND_SHUTDOWN) {
		s->rwstate = SSL_NOTHING;
d2582 1
a2582 1
		s->rwstate = SSL_WRITING;
d2586 1
a2586 1
		s->rwstate = SSL_NOTHING;
@


1.123
log
@move the callbacks from ssl_st to internal
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.122 2017/01/23 04:15:28 jsing Exp $ */
d2198 1
a2198 1
	cert = ctx->cert;
d2228 1
a2228 1
		ctx->cert->dh_tmp_auto = larg;
d2282 2
a2283 2
				memcpy(ctx->tlsext_tick_key_name, keys, 16);
				memcpy(ctx->tlsext_tick_hmac_key,
d2285 1
a2285 1
				memcpy(ctx->tlsext_tick_aes_key, keys + 32, 16);
d2287 1
a2287 1
				memcpy(keys, ctx->tlsext_tick_key_name, 16);
d2289 1
a2289 1
				    ctx->tlsext_tick_hmac_key, 16);
d2291 1
a2291 1
				    ctx->tlsext_tick_aes_key, 16);
d2302 1
a2302 1
		ctx->cert->ecdh_tmp_auto = larg;
d2336 1
a2336 1
	cert = ctx->cert;
@


1.122
log
@Move callback function pointers and argument pointers from SSL_CTX to
internal.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.121 2017/01/23 01:22:08 jsing Exp $ */
d2105 1
a2105 1
		s->tlsext_debug_arg = parg;
d2184 1
a2184 1
		s->tlsext_debug_cb = (void (*)(SSL *, int , int,
d2617 1
a2617 1
		 * ssl3_read_bytes decided to call s->handshake_func, which
d2623 1
a2623 1
		s->in_handshake++;
d2626 1
a2626 1
		s->in_handshake--;
d2648 1
a2648 1
	if (s->handshake_func == NULL)
@


1.121
log
@Move not_resumable and sess_cert from SSL_SESSION to internal.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.120 2017/01/22 09:02:07 jsing Exp $ */
d2268 1
a2268 1
		ctx->tlsext_servername_arg = parg;
d2297 1
a2297 1
		ctx->tlsext_status_arg = parg;
d2349 1
a2349 1
		ctx->tlsext_servername_callback =
d2354 1
a2354 1
		ctx->tlsext_status_cb = (int (*)(SSL *, void *))fp;
d2358 1
a2358 1
		ctx->tlsext_ticket_key_cb = (int (*)(SSL *, unsigned char  *,
@


1.120
log
@Move most of the SSL3_STATE fields to internal - the ones that remain are
known to be used by ports.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.119 2017/01/22 06:36:49 jsing Exp $ */
d1931 1
a1931 1
	if (s->session == NULL || s->session->sess_cert == NULL)
d1934 1
a1934 1
	sc = s->session->sess_cert;
@


1.119
log
@Move ALPN and NPN fields from SSL/SSL_CTX to internal.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.118 2017/01/22 03:50:45 jsing Exp $ */
d1684 2
a1685 2
	return (s->s3->rrec.type == SSL3_RT_APPLICATION_DATA) ?
	    s->s3->rrec.length : 0;
d1814 1
a1814 1
	if ((s->s3->internal = calloc(1, sizeof(*s->s3->internal))) == NULL) {
d1834 2
a1835 2
	DH_free(s->s3->tmp.dh);
	EC_KEY_free(s->s3->tmp.ecdh);
d1837 7
a1843 7
	if (s->s3->tmp.x25519 != NULL)
		explicit_bzero(s->s3->tmp.x25519, X25519_KEY_LENGTH);
	free(s->s3->tmp.x25519);

	if (s->s3->tmp.ca_names != NULL)
		sk_X509_NAME_pop_free(s->s3->tmp.ca_names, X509_NAME_free);
	BIO_free(s->s3->handshake_buffer);
d1845 1
a1845 1
	free(s->s3->alpn_selected);
d1847 2
a1848 2
	explicit_bzero(s->s3->internal, sizeof(*s->s3->internal));
	free(s->s3->internal);
d1864 2
a1865 2
	if (s->s3->tmp.ca_names != NULL)
		sk_X509_NAME_pop_free(s->s3->tmp.ca_names, X509_NAME_free);
d1867 9
a1875 9
	DH_free(s->s3->tmp.dh);
	s->s3->tmp.dh = NULL;
	EC_KEY_free(s->s3->tmp.ecdh);
	s->s3->tmp.ecdh = NULL;

	if (s->s3->tmp.x25519 != NULL)
		explicit_bzero(s->s3->tmp.x25519, X25519_KEY_LENGTH);
	free(s->s3->tmp.x25519);
	s->s3->tmp.x25519 = NULL;
d1882 2
a1883 2
	BIO_free(s->s3->handshake_buffer);
	s->s3->handshake_buffer = NULL;
d1887 2
a1888 2
	free(s->s3->alpn_selected);
	s->s3->alpn_selected = NULL;
d1890 2
a1891 2
	memset(s->s3->internal, 0, sizeof(*s->s3->internal));
	internal = s->s3->internal;
d1893 1
a1893 1
	s->s3->internal = internal;
d1902 6
d1998 1
a1998 1
		ret = s->s3->num_renegotiations;
d2001 2
a2002 2
		ret = s->s3->num_renegotiations;
		s->s3->num_renegotiations = 0;
d2005 1
a2005 1
		ret = s->s3->total_renegotiations;
d2472 1
a2472 1
	alg_k = s->s3->tmp.new_cipher->algorithm_mkey;
d2561 1
a2561 1
	if (s->s3->renegotiate)
d2573 1
a2573 1
		if (s->s3->delay_buf_pop_ret == 0) {
d2579 1
a2579 1
			s->s3->delay_buf_pop_ret = ret;
d2592 2
a2593 2
		ret = s->s3->delay_buf_pop_ret;
		s->s3->delay_buf_pop_ret = 0;
d2610 1
a2610 1
	if (s->s3->renegotiate)
d2612 1
a2612 1
	s->s3->in_read_app_data = 1;
d2615 1
a2615 1
	if ((ret == -1) && (s->s3->in_read_app_data == 2)) {
d2628 1
a2628 1
		s->s3->in_read_app_data = 0;
d2654 1
a2654 1
	s->s3->renegotiate = 1;
d2663 1
a2663 1
	if (s->s3->renegotiate) {
d2673 3
a2675 3
			s->s3->renegotiate = 0;
			s->s3->num_renegotiations++;
			s->s3->total_renegotiations++;
d2688 1
a2688 1
	long	alg2 = s->s3->tmp.new_cipher->algorithm2;
@


1.118
log
@Convert publically visible structs to translucent structs.

This change adds an internal opaque struct for each of the significant
publically visible structs. The opaque struct is then allocated and
attached to the publically visible struct when the appropriate *_new()
function is called, then cleared and freed as necessary.

This will allow for changes to be made to the internals of libssl, without
requiring a major bump each time the publically visible structs are
modified.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.117 2017/01/22 00:09:13 jsing Exp $ */
d1905 3
a1907 3
	free(s->next_proto_negotiated);
	s->next_proto_negotiated = NULL;
	s->next_proto_negotiated_len = 0;
@


1.117
log
@Clean up ssl3_new() - in particular, we do not need to zero fields that
are within a struct that was just allocated via calloc.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.116 2017/01/22 00:03:18 jsing Exp $ */
d1814 4
d1847 4
a1850 1
	explicit_bzero(s->s3, sizeof *s->s3);
d1852 1
d1859 1
d1890 4
a1893 1
	memset(s->s3, 0, sizeof *s->s3);
@


1.116
log
@There is no point in setting struct fields to zero, when you've already
zeroed the entire struct via memset.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.115 2016/12/30 17:20:51 jsing Exp $ */
d1812 2
a1813 1
	SSL3_STATE	*s3;
d1815 1
a1815 4
	if ((s3 = calloc(1, sizeof *s3)) == NULL)
		goto err;
	memset(s3->rrec.seq_num, 0, sizeof(s3->rrec.seq_num));
	memset(s3->wrec.seq_num, 0, sizeof(s3->wrec.seq_num));
a1816 3
	s->s3 = s3;

	s->method->ssl_clear(s);
a1817 2
err:
	return (0);
@


1.115
log
@Add support for SSL_get_server_tmp_key().

ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.114 2016/12/21 16:44:31 jsing Exp $ */
d1889 1
a1897 4
	s->s3->renegotiate = 0;
	s->s3->total_renegotiations = 0;
	s->s3->num_renegotiations = 0;
	s->s3->in_read_app_data = 0;
@


1.114
log
@Add support for ECDHE with X25519.

Testing of an earlier revision by naddy@@.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.113 2016/12/06 13:17:52 jsing Exp $ */
d154 1
d1908 61
d2140 4
@


1.113
log
@Convert certificate handshake message generation to CBB, with some clean
up and restructure.

This also adds CBB based variants of the ssl3_handshake_msg_{start,finish}
functions - for the time being these use a CBB to build the messages, then
copy back into the init_buf.

ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.112 2016/11/06 13:11:40 jsing Exp $ */
d154 1
d1839 4
d1868 5
@


1.112
log
@Adjust cipher suite strengths - move MD5 to LOW, RC4 to LOW and 3DES to
MEDIUM.

ok beck@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.111 2016/11/06 12:08:32 jsing Exp $ */
d151 1
d1726 70
@


1.111
log
@Remove the single IDEA cipher suite. There is no good reason to support
this.

ok beck@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.110 2016/11/06 11:58:13 jsing Exp $ */
d215 1
a215 1
		.algo_strength = SSL_MEDIUM,
d231 1
a231 1
		.algo_strength = SSL_MEDIUM,
d263 1
a263 1
		.algo_strength = SSL_HIGH,
d299 1
a299 1
		.algo_strength = SSL_HIGH,
d331 1
a331 1
		.algo_strength = SSL_HIGH,
d347 1
a347 1
		.algo_strength = SSL_MEDIUM,
d379 1
a379 1
		.algo_strength = SSL_HIGH,
d1140 1
a1140 1
		.algo_strength = SSL_MEDIUM,
d1156 1
a1156 1
		.algo_strength = SSL_HIGH,
d1220 1
a1220 1
		.algo_strength = SSL_MEDIUM,
d1300 1
a1300 1
		.algo_strength = SSL_MEDIUM,
d1316 1
a1316 1
		.algo_strength = SSL_HIGH,
@


1.110
log
@unifdef -m -UOPENSSL_NO_CHACHA -UOPENSSL_NO_POLY1305

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.109 2016/10/19 16:38:40 jsing Exp $ */
a235 18

	/* Cipher 07 */
#ifndef OPENSSL_NO_IDEA
	{
		.valid = 1,
		.name = SSL3_TXT_RSA_IDEA_128_SHA,
		.id = SSL3_CK_RSA_IDEA_128_SHA,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_IDEA,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},
#endif
@


1.109
log
@Remove support for fixed ECDH cipher suites - these is not widely supported
and more importantly they do not provide PFS (if you want to use ECDH, use
ECDHE instead).

With input from guenther@@.

ok deraadt@@ guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.108 2016/04/28 16:39:45 jsing Exp $ */
a1512 1
#if !defined(OPENSSL_NO_CHACHA) && !defined(OPENSSL_NO_POLY1305)
a1613 1
#endif
@


1.108
log
@Implement the IETF ChaCha20-Poly1305 cipher suites.

Rename the existing ChaCha20-Poly1305 cipher suites with an "-OLD" suffix,
effectively replaces the original Google implementation. We continue to
support both the IETF and Google versions, however the existing names
now refer to the ciphers from draft-ietf-tls-chacha20-poly1305-04.

Feedback from doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.107 2016/01/27 02:06:16 beck Exp $ */
a1131 80
	/* Cipher C001 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA,
		.id = TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA,
		.algorithm_mkey = SSL_kECDHe,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 0,
		.alg_bits = 0,
	},

	/* Cipher C002 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA,
		.id = TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA,
		.algorithm_mkey = SSL_kECDHe,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C003 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
		.id = TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
		.algorithm_mkey = SSL_kECDHe,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

	/* Cipher C004 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
		.id = TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
		.algorithm_mkey = SSL_kECDHe,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C005 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
		.id = TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
		.algorithm_mkey = SSL_kECDHe,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a1211 80
	/* Cipher C00B */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_RSA_WITH_NULL_SHA,
		.id = TLS1_CK_ECDH_RSA_WITH_NULL_SHA,
		.algorithm_mkey = SSL_kECDHr,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 0,
		.alg_bits = 0,
	},

	/* Cipher C00C */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA,
		.id = TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA,
		.algorithm_mkey = SSL_kECDHr,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C00D */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA,
		.id = TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA,
		.algorithm_mkey = SSL_kECDHr,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

	/* Cipher C00E */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA,
		.id = TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA,
		.algorithm_mkey = SSL_kECDHr,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C00F */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA,
		.id = TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA,
		.algorithm_mkey = SSL_kECDHr,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a1406 32
	/* Cipher C025 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256,
		.id = TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256,
		.algorithm_mkey = SSL_kECDHe,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C026 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384,
		.id = TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384,
		.algorithm_mkey = SSL_kECDHe,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA384,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a1438 32
	/* Cipher C029 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256,
		.id = TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256,
		.algorithm_mkey = SSL_kECDHr,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C02A */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384,
		.id = TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384,
		.algorithm_mkey = SSL_kECDHr,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA384,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a1476 36
	/* Cipher C02D */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
		.id = TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
		.algorithm_mkey = SSL_kECDHe,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES128GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C02E */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
		.id = TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
		.algorithm_mkey = SSL_kECDHe,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES256GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a1512 36
	/* Cipher C031 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256,
		.id = TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256,
		.algorithm_mkey = SSL_kECDHr,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES128GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher C032 */
	{
		.valid = 1,
		.name = TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384,
		.id = TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384,
		.algorithm_mkey = SSL_kECDHr,
		.algorithm_auth = SSL_aECDH,
		.algorithm_enc = SSL_AES256GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 256,
		.alg_bits = 256,
	},

d2311 1
a2311 1
		if (alg_a & (SSL_aECDSA|SSL_aECDH))
a2353 4
	if ((alg_k & (SSL_kECDHr|SSL_kECDHe))) {
		p[ret++] = TLS_CT_RSA_FIXED_ECDH;
		p[ret++] = TLS_CT_ECDSA_FIXED_ECDH;
	}
d2357 1
a2357 1
	 * so we don't need to check for SSL_kECDH or SSL_kECDHE
@


1.107
log
@deprecate SSL_OP_SINGLE_DH_USE
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.106 2015/09/12 16:10:07 doug Exp $ */
d1813 51
d1873 1
a1873 1
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(0),
d1878 1
a1878 1
	/* Cipher CC14 */
d1890 1
a1890 1
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(0),
d1895 1
a1895 1
	/* Cipher CC15 */
d1907 1
a1907 1
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(0),
@


1.106
log
@Remove most of the SSLv3 version checks and a few TLS v1.0.

We can now assume >= TLS v1.0 since SSL2_VERSION, SSL3_VERSION and
DTLS1_BAD_VER support was removed.

"reads ok" miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.105 2015/09/12 15:03:39 jsing Exp $ */
a2143 8
			if (!(s->options & SSL_OP_SINGLE_DH_USE)) {
				if (!DH_generate_key(dh)) {
					DH_free(dh);
					SSLerr(SSL_F_SSL3_CTRL,
					    ERR_R_DH_LIB);
					return (ret);
				}
			}
a2325 8
			}
			if (!(ctx->options & SSL_OP_SINGLE_DH_USE)) {
				if (!DH_generate_key(new)) {
					SSLerr(SSL_F_SSL3_CTX_CTRL,
					    ERR_R_DH_LIB);
					DH_free(new);
					return 0;
				}
@


1.105
log
@Move handshake message header length determination into a separate
ssl3_handshake_msg_hdr_len() function. Use this to correct several places
that have magic numbers with header lengths hardcoded as '4'.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.104 2015/09/11 18:08:21 jsing Exp $ */
d2601 1
a2601 1
	if ((alg_k & SSL_kGOST) && (s->version >= TLS1_VERSION)) {
a2612 4
	if (s->version == SSL3_VERSION && (alg_k & SSL_kDHE)) {
		p[ret++] = SSL3_CT_RSA_EPHEMERAL_DH;
		p[ret++] = SSL3_CT_DSS_EPHEMERAL_DH;
	}
d2615 1
a2615 1
	if ((alg_k & (SSL_kECDHr|SSL_kECDHe)) && (s->version >= TLS1_VERSION)) {
d2624 2
a2625 3
	if (s->version >= TLS1_VERSION) {
		p[ret++] = TLS_CT_ECDSA_SIGN;
	}
@


1.104
log
@Rename functions that moved to t1_enc.c, with a tls1_ prefix instead of a
ssl3_ prefix.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.103 2015/09/11 17:32:23 jsing Exp $ */
d1950 7
a1960 1
	int hdr_len;
a1963 3
	hdr_len = SSL_IS_DTLS(s) ? DTLS1_HM_HEADER_LENGTH :
	    SSL3_HM_HEADER_LENGTH;

d1968 1
a1968 1
	return (d + hdr_len);
a1975 1
	int hdr_len;
a1978 3
	hdr_len = SSL_IS_DTLS(s) ? DTLS1_HM_HEADER_LENGTH :
	    SSL3_HM_HEADER_LENGTH;

d1983 1
a1983 1
	s->init_num = hdr_len + (int)len;
@


1.103
log
@Nuke ssl3_default_timeout().

ok "flensing knife"
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.102 2015/09/11 16:50:46 jsing Exp $ */
d2026 1
a2026 1
	ssl3_cleanup_key_block(s);
d2036 1
a2036 1
	ssl3_free_digest_list(s);
d2050 1
a2050 1
	ssl3_cleanup_key_block(s);
d2067 1
a2067 1
	ssl3_free_digest_list(s);
@


1.102
log
@Nuke SSLv3_enc_data.

ok "flensing knife"
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.101 2015/09/10 15:56:26 jsing Exp $ */
a1897 10

long
ssl3_default_timeout(void)
{
	/*
	 * 2 hours, the 24 hours mentioned in the SSLv3 spec
	 * is way too long for http, the cache would over fill
	 */
	return (60 * 60 * 2);
}
@


1.101
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.100 2015/08/27 06:21:15 doug Exp $ */
a1896 20
};

SSL3_ENC_METHOD SSLv3_enc_data = {
	.enc = ssl3_enc,
	.mac = n_ssl3_mac,
	.setup_key_block = ssl3_setup_key_block,
	.generate_master_secret = ssl3_generate_master_secret,
	.change_cipher_state = ssl3_change_cipher_state,
	.final_finish_mac = ssl3_final_finish_mac,
	.finish_mac_length = MD5_DIGEST_LENGTH + SHA_DIGEST_LENGTH,
	.cert_verify_mac = ssl3_cert_verify_mac,
	.client_finished_label = SSL3_MD_CLIENT_FINISHED_CONST,
	.client_finished_label_len = 4,
	.server_finished_label = SSL3_MD_SERVER_FINISHED_CONST,
	.server_finished_label_len = 4,
	.alert_value = ssl3_alert_code,
	.export_keying_material = (int (*)(SSL *, unsigned char *, size_t,
	    const char *, size_t, const unsigned char *, size_t,
	    int use_context))ssl_undefined_function,
	.enc_flags = 0,
@


1.100
log
@Remove SSLv3 support from LibreSSL.

This is the first wave of SSLv3 removal which removes the main SSLv3
functions.  Future commits will remove the rest of the SSLv3 support.

Discussed the plan at c2k15.  Input from jsing@@, beck@@, miod@@, bcook@@,
sthen@@, naddy@@, and deraadt@@.

ok jsing@@, beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.99 2015/07/19 06:23:51 doug Exp $ */
d2069 1
a2069 1
	OPENSSL_cleanse(s->s3, sizeof *s->s3);
@


1.99
log
@Crank major and remove legacy variables.

Libtls is riding this crank.

ok miod@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.98 2015/07/17 15:50:37 doug Exp $ */
d2115 1
a2115 1
	s->version = SSL3_VERSION;
@


1.99.4.1
log
@deprecate SSL_OP_SINGLE_DH_USE
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.99 2015/07/19 06:23:51 doug Exp $ */
d2175 8
d2365 8
@


1.98
log
@Remove compat hack that disabled ECDHE-ECDSA on OS X.

For a few old releases, ECDHE-ECDSA was broken on OS X.  This option
cannot differentiate between working and broken OS X so it disabled
ECDHE-ECDSA support on all OS X >= 10.6.  10.8-10.8.3 were the faulty
releases but these are no longer relevant.  Tested on OS X 10.10 by jsing.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.97 2015/07/14 05:20:46 doug Exp $ */
a2078 1
	int		 init_extra;
a2092 1
	init_extra = s->s3->init_extra;
a2106 1
	s->s3->init_extra = init_extra;
@


1.97
log
@Convert ssl3_get_cipher_by_char to CBS.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.96 2015/05/25 21:35:35 guenther Exp $ */
a2089 2
	s->s3->is_probably_safari = 0;

a2618 6
			if ((alg_k & SSL_kECDHE) &&
			    (alg_a & SSL_aECDSA) && s->s3->is_probably_safari) {
				if (!ret)
					ret = sk_SSL_CIPHER_value(allow, ii);
				continue;
			}
@


1.96
log
@Make SSL_CIPHER_get_bits() report ChaCha20-Poly1305 ciphers as using
256bit keys

problem noted by Tim Kuijsten (info (at) netsend.nl)
ok deraadt@@ miod@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.95 2015/02/08 22:06:49 miod Exp $ */
d158 1
d2536 1
d2539 5
a2543 1
	n2s(p, cipher_value);
@


1.95
log
@Rely upon enc_flags rather than the tls version, to upgrade SHA1+MD5 to
SHA256 in ssl_get_algorithm2().
From OpenSSL HEAD; ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.94 2015/02/07 05:46:01 jsing Exp $ */
d1823 1
a1823 1
		.alg_bits = 0,
d1840 1
a1840 1
		.alg_bits = 0,
d1857 1
a1857 1
		.alg_bits = 0,
@


1.95.4.1
log
@deprecate SSL_OP_SINGLE_DH_USE
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.95 2015/02/08 22:06:49 miod Exp $ */
d2179 8
d2369 8
@


1.94
log
@Clean up the {get,put}_cipher_by_char() implementations. Also use
ssl3_get_cipher_by_value() in other parts of the code where it simplifies
things.

ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.93 2015/02/07 04:17:11 jsing Exp $ */
d2853 2
a2854 2
 * If we are using TLS v1.2 or later and default SHA1+MD5 algorithms switch
 * to new SHA256 PRF and handshake macs
d2861 1
a2861 1
	if (s->method->version == TLS1_2_VERSION &&
@


1.93
log
@Provide a SSL_CIPHER_get_by_value() function that allows a cipher to be
retrieved via its cipher suite value. A corresponding SSL_CIPHER_by_value()
function returns the cipher suite value for a given SSL_CIPHER. These
functions should mean that software does not need to resort to
put_cipher_by_char()/get_cipher_by_char() in order to locate a cipher.

Begrudgingly also provide a SSL_CIPHER_get_by_id() function that locates a
cipher via the internal cipher identifier. Unfortunately these have already
been leaked outside the library via SSL_CIPHER_by_id() and the various
SSL3_CK_* and TLS1_CK_* defines in the ssl3.h/tls1.h headers.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.92 2015/02/06 08:30:23 jsing Exp $ */
d2535 1
a2535 3
	const SSL_CIPHER *cp;
	unsigned long id;
	SSL_CIPHER c;
d2537 2
a2538 7
	id = 0x03000000L | ((unsigned long)p[0] << 8L) | (unsigned long)p[1];
	c.id = id;
	cp = OBJ_bsearch_ssl_cipher_id(&c, ssl3_ciphers, SSL3_NUM_CIPHERS);
	if (cp == NULL || cp->valid == 0)
		return NULL;
	else
		return cp;
a2543 2
	long l;

d2545 1
a2545 2
		l = c->id;
		if ((l & 0xff000000) != 0x03000000)
d2547 1
a2547 2
		p[0] = ((unsigned char)(l >> 8L)) & 0xFF;
		p[1] = ((unsigned char)(l)) & 0xFF;
@


1.92
log
@Bring back the horrible API that is get_cipher_by_char/put_cipher_by_char.

This API was intended to be an internal only, however like many things in
OpenSSL, it is exposed externally and parts of the software ecosystem are
now using it since there is no real alternative within the public API.

ok doug@@, tedu@@ and reluctantly miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.91 2014/12/16 05:47:28 miod Exp $ */
d1953 1
d1955 6
@


1.91
log
@Now that we have Camellia support in libcrypto, bring in the SHA256 flavour of
the Camellia ciphersuites for TLS 1.2 introduced in RFC 5932. From OpenSSL HEAD.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.90 2014/12/14 16:07:26 jsing Exp $ */
d2522 36
a2557 1
SSL_CIPHER *ssl3_choose_cipher(SSL *s, STACK_OF(SSL_CIPHER) *clnt,
@


1.90
log
@Provide functions for starting, finishing and writing SSL handshake
messages. This will allow for removal of repeated/duplicated code.

Additionally, DTLS was written by wholesale copying of the SSL/TLS code,
with some DTLS specifics being added to the duplicated code. Since these
SSL handshake message functions know how to handle both SSL/TLS and DTLS,
upon conversion the duplicate versions will become identical (or close to),
at which point the DTLS versions can be removed and the SSL/TLS versions
used for both protocols.

Partially based on similar changes in OpenSSL.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.85 2014/11/18 05:33:43 miod Exp $ */
d998 132
@


1.89
log
@Remove trailing whitespace.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.88 2014/12/14 14:34:43 jsing Exp $ */
d1838 52
@


1.88
log
@unifdef OPENSSL_NO_NEXTPROTONEG, which is one of the last standing #ifndef
mazes in libssl. NPN is being replaced by ALPN, however it is still going
to be around for a while yet.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.87 2014/12/10 15:36:47 jsing Exp $ */
d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 1
a66 1
 *    notice, this list of conditions and the following disclaimer. 
d114 1
a114 1
 * Portions of the attached software ("Contribution") are developed by 
d2446 1
a2446 1
	 * ECDSA certs can be used with RSA cipher suites as well 
@


1.87
log
@Remove support for GOST R 34.10-94 signature authentication, along with
the two ciphersuites that use it. GOST94 public/private keys have been
long obsoleted and libcrypto does not have support for them anyway.

Discussed with Dmitry Eremin-Solenikov.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.86 2014/12/10 14:58:56 jsing Exp $ */
a1929 1
#ifndef OPENSSL_NO_NEXTPROTONEG
a1932 1
#endif
@


1.86
log
@Add support for ALPN.

Based on OpenSSL and BoringSSL.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.85 2014/11/18 05:33:43 miod Exp $ */
a749 17
	/* Cipher 80 */
	{
		.valid = 1,
		.name = "GOST94-GOST89-GOST89",
		.id = 0x3000080,
		.algorithm_mkey = SSL_kGOST,
		.algorithm_auth = SSL_aGOST94,
		.algorithm_enc = SSL_eGOST2814789CNT,
		.algorithm_mac = SSL_GOST89MAC,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94|
		    TLS1_STREAM_MAC,
		.strength_bits = 256,
		.alg_bits = 256
	},

a764 16
	},

	/* Cipher 82 */
	{
		.valid = 1,
		.name = "GOST94-NULL-GOST94",
		.id = 0x3000082,
		.algorithm_mkey = SSL_kGOST,
		.algorithm_auth = SSL_aGOST94,
		.algorithm_enc = SSL_eNULL,
		.algorithm_mac = SSL_GOST94,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_STRONG_NONE,
		.algorithm2 = SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94,
		.strength_bits = 0,
		.alg_bits = 0
@


1.85
log
@Update the GOST code in libssl, as contributed by Dmitry Eremin-Solenikov.

This causes a libssl major version bump as this affects the layout of some
internal-but-unfortunately-made-visible structs.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.84 2014/10/31 15:25:55 jsing Exp $ */
d1908 2
d1943 3
@


1.84
log
@Add support for automatic DH ephemeral keys.

This allows an SSL server to enable DHE ciphers with a single setting,
which results in an DH key being generated based on the server key length.

Partly based on OpenSSL.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.83 2014/10/31 14:51:01 jsing Exp $ */
d1762 34
d2452 5
a2456 6
	if (s->version >= TLS1_VERSION) {
		if (alg_k & SSL_kGOST) {
			p[ret++] = TLS_CT_GOST94_SIGN;
			p[ret++] = TLS_CT_GOST01_SIGN;
			return (ret);
		}
@


1.83
log
@Remove support for ephemeral/temporary RSA private keys.

The only use for these is via SSL_OP_EPHEMERAL_RSA (which is effectively
a standards violation) and for RSA sign-only, should only be possible if
you are using an export cipher and have an RSA private key that is more
than 512 bits in size (however we no longer support export ciphers).

ok bcook@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.82 2014/10/03 13:58:17 jsing Exp $ */
d1997 1
d1999 7
a2005 6
		{
			SSLerr(SSL_F_SSL3_CTRL,
			    ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
			return (ret);
		}
		break;
d2188 1
d2190 7
a2196 6
		{
			SSLerr(SSL_F_SSL3_CTX_CTRL,
			    ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
			return (0);
		}
		break;
@


1.82
log
@Add support for automatic ephemeral EC keys.

This allows an SSL server to enable ECDHE ciphers with a single setting,
which results in an EC key being generated using the first preference
shared curve.

Based on OpenSSL with inspiration from boringssl.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.80 2014/09/07 12:16:23 jsing Exp $ */
d1937 1
a1937 2
	if (cmd == SSL_CTRL_SET_TMP_RSA || cmd == SSL_CTRL_SET_TMP_RSA_CB ||
	    cmd == SSL_CTRL_SET_TMP_DH || cmd == SSL_CTRL_SET_TMP_DH_CB) {
d1965 1
a1965 5
		if ((s->cert != NULL) && (s->cert->rsa_tmp == NULL) &&
		    ((s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL) ||
		    (EVP_PKEY_size(s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey)
		    > (512 / 8))))
			ret = 1;
a1967 17
		{
			RSA *rsa = (RSA *)parg;
			if (rsa == NULL) {
				SSLerr(SSL_F_SSL3_CTRL,
				    ERR_R_PASSED_NULL_PARAMETER);
				return (ret);
			}
			if ((rsa = RSAPrivateKey_dup(rsa)) == NULL) {
				SSLerr(SSL_F_SSL3_CTRL,
				    ERR_R_RSA_LIB);
				return (ret);
			}
			RSA_free(s->cert->rsa_tmp);
			s->cert->rsa_tmp = rsa;
			ret = 1;
		}
		break;
d1969 1
a1969 5
		{
			SSLerr(SSL_F_SSL3_CTRL,
			    ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
			return (ret);
		}
d2121 1
a2121 1
	if (cmd == SSL_CTRL_SET_TMP_RSA_CB || cmd == SSL_CTRL_SET_TMP_DH_CB) {
d2131 1
a2131 3
		{
			s->cert->rsa_tmp_cb = (RSA *(*)(SSL *, int, int))fp;
		}
d2134 1
a2134 3
		{
			s->cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))fp;
		}
d2137 1
a2137 4
		{
			s->cert->ecdh_tmp_cb =
			    (EC_KEY *(*)(SSL *, int, int))fp;
		}
d2158 1
a2158 8
		if ((cert->rsa_tmp == NULL) &&
		    ((cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL) ||
		    (EVP_PKEY_size(cert->pkeys[SSL_PKEY_RSA_ENC].privatekey) >
		    (512 / 8))))
			return (1);
		else
			return (0);
		/* break; */
a2159 23
		{
			RSA *rsa;
			int i;

			rsa = (RSA *)parg;
			i = 1;
			if (rsa == NULL)
				i = 0;
			else {
				if ((rsa = RSAPrivateKey_dup(rsa)) == NULL)
					i = 0;
			}
			if (!i) {
				SSLerr(SSL_F_SSL3_CTX_CTRL,
				    ERR_R_RSA_LIB);
				return (0);
			} else {
				RSA_free(cert->rsa_tmp);
				cert->rsa_tmp = rsa;
				return (1);
			}
		}
		/* break; */
d2161 2
a2162 6
		{
			SSLerr(SSL_F_SSL3_CTX_CTRL,
			    ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
			return (0);
		}
		break;
d2302 2
a2303 4
		{
			cert->rsa_tmp_cb = (RSA *(*)(SSL *, int, int))fp;
		}
		break;
d2305 1
a2305 3
		{
			cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))fp;
		}
d2308 1
a2308 3
		{
			cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;
		}
@


1.81
log
@Clean up EC cipher handling in ssl3_choose_cipher().

The existing code reaches around into various internals of EC, which it
should not know anything about. Replace this with a set of functions that
that can correctly extract the necessary details and handle the
comparisions.

Based on a commit to OpenSSL, with some inspiration from boringssl.

ok miod@@
@
text
@d2131 5
d2330 3
@


1.80
log
@Remove SSL_kDHr, SSL_kDHd and SSL_aDH. No supported ciphersuites use them,
nor do we plan on supporting them.

ok guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.79 2014/08/24 14:36:45 jsing Exp $ */
d152 3
d156 1
a157 3
#include "../crypto/ec/ec_lcl.h"
#include <openssl/md5.h>
#include <openssl/dh.h>
d2398 4
a2401 6
	SSL_CIPHER		*c, *ret = NULL;
	STACK_OF(SSL_CIPHER)	*prio, *allow;
	int			 i, ii, ok;
	unsigned int j;
	int ec_ok, ec_nid;
	unsigned char ec_search1 = 0, ec_search2 = 0;
a2402 1
	unsigned long alg_k, alg_a, mask_k, mask_a;
a2439 55
		if (
		/*
		 * if we are considering an ECC cipher suite that uses our
		 * certificate
		 */
		(alg_a & SSL_aECDSA || alg_a & SSL_aECDH)
		/* and we have an ECC certificate */
		&& (s->cert->pkeys[SSL_PKEY_ECC].x509 != NULL)
		/*
		 * and the client specified a Supported Point Formats
		 * extension
		 */
		&& ((s->session->tlsext_ecpointformatlist_length > 0) &&
		(s->session->tlsext_ecpointformatlist != NULL))
		/* and our certificate's point is compressed */
		&& (
		(s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info != NULL)
		&& (s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key != NULL)
		&& (s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key != NULL)
		&& (s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key->data != NULL)
		&& (
		(*(s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key->data) == POINT_CONVERSION_COMPRESSED)
		|| (*(s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key->data) == POINT_CONVERSION_COMPRESSED + 1)
		)
		)
		) {
			ec_ok = 0;
			/*
			 * If our certificate's curve is over a field type
			 * that the client does not support then do not allow
			 * this cipher suite to be negotiated
			 */
			if (
			(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec != NULL)
			&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group != NULL)
			&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth != NULL)
			&& (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_prime_field)
			) {
				for (j = 0; j < s->session->tlsext_ecpointformatlist_length; j++) {
					if (s->session->tlsext_ecpointformatlist[j] == TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime) {
						ec_ok = 1;
						break;
					}
				}
			} else if (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_characteristic_two_field) {
				for (j = 0; j < s->session->tlsext_ecpointformatlist_length; j++) {
					if (s->session->tlsext_ecpointformatlist[j] == TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2) {
						ec_ok = 1;
						break;
					}
				}
			}
			ok = ok && ec_ok;
		}
		if (
d2442 1
a2442 1
		 * certificate
d2444 2
a2445 38
		(alg_a & SSL_aECDSA || alg_a & SSL_aECDH)
		/* and we have an ECC certificate */
		&& (s->cert->pkeys[SSL_PKEY_ECC].x509 != NULL)
		/* and the client specified an EllipticCurves extension */
		&& ((s->session->tlsext_ellipticcurvelist_length > 0) && (s->session->tlsext_ellipticcurvelist != NULL))
		) {
			ec_ok = 0;
			if (
			(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec != NULL)
			&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group != NULL)
			) {
				ec_nid = EC_GROUP_get_curve_name(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group);
				if ((ec_nid == 0)
				&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth != NULL)
				) {
					if (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_prime_field) {
						ec_search1 = 0xFF;
						ec_search2 = 0x01;
					} else if (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_characteristic_two_field) {
						ec_search1 = 0xFF;
						ec_search2 = 0x02;
					}
				} else {
					ec_search1 = 0x00;
					ec_search2 = tls1_ec_nid2curve_id(ec_nid);
				}
				if ((ec_search1 != 0) || (ec_search2 != 0)) {
					for (j = 0; j < s->session->tlsext_ellipticcurvelist_length / 2; j++) {
						if ((s->session->tlsext_ellipticcurvelist[2*j] == ec_search1) && (s->session->tlsext_ellipticcurvelist[2*j + 1] == ec_search2)) {
							ec_ok = 1;
							break;
						}
					}
				}
			}
			ok = ok && ec_ok;
		}
		if (
d2447 2
a2448 2
		 * if we are considering an ECC cipher suite that uses an
		 * ephemeral EC key
d2450 2
a2451 34
		(alg_k & SSL_kECDHE)
		/* and we have an ephemeral EC key */
		&& (s->cert->ecdh_tmp != NULL)
		/* and the client specified an EllipticCurves extension */
		&& ((s->session->tlsext_ellipticcurvelist_length > 0) && (s->session->tlsext_ellipticcurvelist != NULL))
		) {
			ec_ok = 0;
			if (s->cert->ecdh_tmp->group != NULL) {
				ec_nid = EC_GROUP_get_curve_name(s->cert->ecdh_tmp->group);
				if ((ec_nid == 0)
				&& (s->cert->ecdh_tmp->group->meth != NULL)
				) {
					if (EC_METHOD_get_field_type(s->cert->ecdh_tmp->group->meth) == NID_X9_62_prime_field) {
						ec_search1 = 0xFF;
						ec_search2 = 0x01;
					} else if (EC_METHOD_get_field_type(s->cert->ecdh_tmp->group->meth) == NID_X9_62_characteristic_two_field) {
						ec_search1 = 0xFF;
						ec_search2 = 0x02;
					}
				} else {
					ec_search1 = 0x00;
					ec_search2 = tls1_ec_nid2curve_id(ec_nid);
				}
				if ((ec_search1 != 0) || (ec_search2 != 0)) {
					for (j = 0; j < s->session->tlsext_ellipticcurvelist_length / 2; j++) {
						if ((s->session->tlsext_ellipticcurvelist[2*j] == ec_search1) && (s->session->tlsext_ellipticcurvelist[2*j + 1] == ec_search2)) {
							ec_ok = 1;
							break;
						}
					}
				}
			}
			ok = ok && ec_ok;
		}
@


1.79
log
@Replace the remaining uses of ssl3_put_cipher_by_char() with s2n and a
ssl3_cipher_get_value() helper function, which returns the cipher suite
value for the given cipher.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.78 2014/08/23 15:37:38 jsing Exp $ */
d2613 1
a2613 1
	if (alg_k & (SSL_kDHr|SSL_kDHE)) {
d2617 1
a2617 2
	if ((s->version == SSL3_VERSION) &&
		(alg_k & (SSL_kDHE|SSL_kDHd|SSL_kDHr))) {
@


1.78
log
@Remove non-standard GOST cipher suites (which are not compiled in
currently).

From Dmitry Eremin-Solenikov.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.77 2014/08/23 14:52:41 jsing Exp $ */
d1822 6
a2391 15
}

int
ssl3_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
{
	long	l;

	if (p != NULL) {
		l = c->id;
		if ((l & 0xff000000) != 0x03000000)
			return (0);
		p[0] = ((unsigned char)(l >> 8L)) & 0xFF;
		p[1] = ((unsigned char)(l)) & 0xFF;
	}
	return (2);
@


1.77
log
@Replace the remaining ssl3_get_cipher_by_char() calls with n2s() and
ssl3_get_cipher_by_id().

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.76 2014/08/11 01:06:22 jsing Exp $ */
a1706 67

#ifdef TEMP_GOST_TLS
	/* Cipher FF00 */
	{
		.valid = 1,
		.name = "GOST-MD5",
		.id = 0x0300ff00,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_eGOST2814789CNT,
		.algorithm_mac = SSL_MD5,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher FF01 */
	{
		.valid = 1,
		.name = "GOST-GOST94",
		.id = 0x0300ff01,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_eGOST2814789CNT,
		.algorithm_mac = SSL_GOST94,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256
	},

	/* Cipher FF02 */
	{
		.valid = 1,
		.name = "GOST-GOST89MAC",
		.id = 0x0300ff02,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_eGOST2814789CNT,
		.algorithm_mac = SSL_GOST89MAC,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256
	},

	/* Cipher FF03 */
	{
		.valid = 1,
		.name = "GOST-GOST89STREAM",
		.id = 0x0300ff03,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_eGOST2814789CNT,
		.algorithm_mac = SSL_GOST89MAC,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF|
		    TLS1_STREAM_MAC,
		.strength_bits = 256,
		.alg_bits = 256
	},
#endif
@


1.76
log
@Provide a ssl3_get_cipher_by_id() function that allows ciphers to be looked
up by their ID. For one, this avoids an ugly mess in ssl_sess.c, where the
cipher value is manually written into a buffer, just so the cipher can be
located using ssl3_get_cipher_by_char().

ok bcook@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.75 2014/08/10 15:06:15 jsing Exp $ */
a2452 22
}

/* This function needs to check if the ciphers required are actually
 * available */
const SSL_CIPHER *
ssl3_get_cipher_by_char(const unsigned char *p)
{
	SSL_CIPHER		 c;
	const SSL_CIPHER	*cp;
	unsigned long		 id;

	id = 0x03000000L | ((unsigned long)p[0] << 8L) | (unsigned long)p[1];
	c.id = id;
	cp = OBJ_bsearch_ssl_cipher_id(&c, ssl3_ciphers, SSL3_NUM_CIPHERS);
#ifdef DEBUG_PRINT_UNKNOWN_CIPHERSUITES
	if (cp == NULL)
		fprintf(stderr, "Unknown cipher ID %x\n", (p[0] << 8) | p[1]);
#endif
	if (cp == NULL || cp->valid == 0)
		return NULL;
	else
		return cp;
@


1.75
log
@Tweak cipher list comments and add missing cipher value comments.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.74 2014/08/10 14:57:04 jsing Exp $ */
d1874 13
@


1.74
log
@Remove disabled (weakened export and non-ephemeral DH) cipher suites from
the cipher list. This reduces code size, saves data segment space and
prevents them from being turned back on at runtime by flipping a bit in
memory.

ok guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.73 2014/08/07 20:02:23 miod Exp $ */
d285 3
a287 1
	/* The Ephemeral DH ciphers */
d401 3
a403 1
	/* New AES ciphersuites */
d749 1
d765 2
d782 2
d798 2
d883 3
a885 2

	/* GCM ciphersuites from RFC5288 */
d1724 2
d1740 2
d1756 2
d1776 1
d1793 1
d1810 1
@


1.73
log
@Oops, revert changes commited by mistake. The previous commit was supposed
to only apply to s23_srvr.c.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.71 2014/07/13 16:03:10 beck Exp $ */
a202 16
	/* Cipher 03 */
	{
		.valid = 0,	/* Weakened 40-bit export cipher. */
		.name = SSL3_TXT_RSA_RC4_40_MD5,
		.id = SSL3_CK_RSA_RC4_40_MD5,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_MD5,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = 0,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 40,
		.alg_bits = 128,
	},

a234 16
	/* Cipher 06 */
	{
		.valid = 0,	/* Weakened 40-bit export cipher. */
		.name = SSL3_TXT_RSA_RC2_40_MD5,
		.id = SSL3_CK_RSA_RC2_40_MD5,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_RC2,
		.algorithm_mac = SSL_MD5,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = 0,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 40,
		.alg_bits = 128,
	},

a252 16
	/* Cipher 08 */
	{
		.valid = 0,	/* Weakened 40-bit export cipher. */
		.name = SSL3_TXT_RSA_DES_40_CBC_SHA,
		.id = SSL3_CK_RSA_DES_40_CBC_SHA,
		.algorithm_mkey = SSL_kRSA,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = 0,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 40,
		.alg_bits = 56,
	},

a284 97
	/* The DH ciphers */
	/* Cipher 0B */
	{
		.valid = 0,	/* Weakened 40-bit export cipher. */
		.name = SSL3_TXT_DH_DSS_DES_40_CBC_SHA,
		.id = SSL3_CK_DH_DSS_DES_40_CBC_SHA,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = 0,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 40,
		.alg_bits = 56,
	},

	/* Cipher 0C */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = SSL3_TXT_DH_DSS_DES_64_CBC_SHA,
		.id = SSL3_CK_DH_DSS_DES_64_CBC_SHA,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 56,
		.alg_bits = 56,
	},

	/* Cipher 0D */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = SSL3_TXT_DH_DSS_DES_192_CBC3_SHA,
		.id = SSL3_CK_DH_DSS_DES_192_CBC3_SHA,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

	/* Cipher 0E */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = SSL3_TXT_DH_RSA_DES_40_CBC_SHA,
		.id = SSL3_CK_DH_RSA_DES_40_CBC_SHA,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = 0,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 40,
		.alg_bits = 56,
	},

	/* Cipher 0F */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = SSL3_TXT_DH_RSA_DES_64_CBC_SHA,
		.id = SSL3_CK_DH_RSA_DES_64_CBC_SHA,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_LOW,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 56,
		.alg_bits = 56,
	},

	/* Cipher 10 */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = SSL3_TXT_DH_RSA_DES_192_CBC3_SHA,
		.id = SSL3_CK_DH_RSA_DES_192_CBC3_SHA,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

a285 15
	/* Cipher 11 */
	{
		.valid = 0,	/* Weakened 40-bit export cipher. */
		.name = SSL3_TXT_EDH_DSS_DES_40_CBC_SHA,
		.id = SSL3_CK_EDH_DSS_DES_40_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aDSS,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = 0,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 40,
		.alg_bits = 56,
	},
a318 16
	/* Cipher 14 */
	{
		.valid = 0,	/* Weakened 40-bit export cipher. */
		.name = SSL3_TXT_EDH_RSA_DES_40_CBC_SHA,
		.id = SSL3_CK_EDH_RSA_DES_40_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aRSA,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = 0,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 40,
		.alg_bits = 56,
	},

a350 16
	/* Cipher 17 */
	{
		.valid = 0,	/* Weakened 40-bit export cipher. */
		.name = SSL3_TXT_ADH_RC4_40_MD5,
		.id = SSL3_CK_ADH_RC4_40_MD5,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_MD5,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = 0,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 40,
		.alg_bits = 128,
	},

a366 16
	/* Cipher 19 */
	{
		.valid = 0,	/* Weakened 40-bit export cipher. */
		.name = SSL3_TXT_ADH_DES_40_CBC_SHA,
		.id = SSL3_CK_ADH_DES_40_CBC_SHA,
		.algorithm_mkey = SSL_kDHE,
		.algorithm_auth = SSL_aNULL,
		.algorithm_enc = SSL_DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_SSLV3,
		.algo_strength = 0,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 40,
		.alg_bits = 128,
	},

d400 1
d416 1
a416 30
	/* Cipher 30 */
	{
		.valid = 0,
		.name = TLS1_TXT_DH_DSS_WITH_AES_128_SHA,
		.id = TLS1_CK_DH_DSS_WITH_AES_128_SHA,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},
	/* Cipher 31 */
	{
		.valid = 0,
		.name = TLS1_TXT_DH_RSA_WITH_AES_128_SHA,
		.id = TLS1_CK_DH_RSA_WITH_AES_128_SHA,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},
d432 1
d448 1
a479 31
	/* Cipher 36 */
	{
		.valid = 0,
		.name = TLS1_TXT_DH_DSS_WITH_AES_256_SHA,
		.id = TLS1_CK_DH_DSS_WITH_AES_256_SHA,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher 37 */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = TLS1_TXT_DH_RSA_WITH_AES_256_SHA,
		.id = TLS1_CK_DH_RSA_WITH_AES_256_SHA,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},
a577 32
	/* Cipher 3E */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = TLS1_TXT_DH_DSS_WITH_AES_128_SHA256,
		.id = TLS1_CK_DH_DSS_WITH_AES_128_SHA256,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 3F */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = TLS1_TXT_DH_RSA_WITH_AES_128_SHA256,
		.id = TLS1_CK_DH_RSA_WITH_AES_128_SHA256,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

a612 32
	/* Cipher 42 */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
		.id = TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_CAMELLIA128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 43 */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
		.id = TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_CAMELLIA128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

a678 32
	/* Cipher 68 */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = TLS1_TXT_DH_DSS_WITH_AES_256_SHA256,
		.id = TLS1_CK_DH_DSS_WITH_AES_256_SHA256,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher 69 */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = TLS1_TXT_DH_RSA_WITH_AES_256_SHA256,
		.id = TLS1_CK_DH_RSA_WITH_AES_256_SHA256,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA256,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a822 32
	/* Cipher 85 */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
		.id = TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_CAMELLIA256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher 86 */
	{
		.valid = 0, /* not implemented (non-ephemeral DH) */
		.name = TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
		.id = TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_CAMELLIA256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a946 36
	/* Cipher A0 */
	{
		.valid = 0,
		.name = TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256,
		.id = TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES128GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher A1 */
	{
		.valid = 0,
		.name = TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384,
		.id = TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384,
		.algorithm_mkey = SSL_kDHr,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES256GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 256,
		.alg_bits = 256,
	},

a971 36
		.algorithm_enc = SSL_AES256GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 256,
		.alg_bits = 256,
	},

	/* Cipher A4 */
	{
		.valid = 0,
		.name = TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256,
		.id = TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
		.algorithm_enc = SSL_AES128GCM,
		.algorithm_mac = SSL_AEAD,
		.algorithm_ssl = SSL_TLSV1_2,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256|
		    SSL_CIPHER_ALGORITHM2_AEAD|FIXED_NONCE_LEN(4)|
		    SSL_CIPHER_ALGORITHM2_VARIABLE_NONCE_IN_RECORD,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher A5 */
	{
		.valid = 0,
		.name = TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384,
		.id = TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384,
		.algorithm_mkey = SSL_kDHd,
		.algorithm_auth = SSL_aDH,
@


1.72
log
@When you expect a function to return a particular value, don't put a comment
saying that you expect it to return that value and compare it against zero
because it is supposedly faster, for this leads to bugs (especially given the
high rate of sloppy cut'n'paste within ssl3 and dtls1 routines in this
library).

Instead, compare for the exact value it ought to return upon success.

ok deraadt@@
@
text
@d2336 1
a2336 1
		return 0;
d2344 2
@


1.71
log
@The bell tolls for BUF_strdup - Start the migration to using
intrinsics. This is the easy ones, a few left to check one at
a time.
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.70 2014/07/12 22:33:39 jsing Exp $ */
d2336 1
a2336 1
		goto err;
a2343 2
err:
	return (0);
@


1.70
log
@The correct name for EDH is DHE, likewise EECDH should be ECDHE.

Based on changes to OpenSSL trunk.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.69 2014/07/11 09:24:44 beck Exp $ */
d2569 1
a2569 1
			if ((s->tlsext_hostname = BUF_strdup((char *)parg))
@


1.69
log
@Remove the PSK code. We don't need to drag around this
baggage.
ok miod@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.68 2014/07/10 08:51:14 tedu Exp $ */
d436 1
a436 1
		.algorithm_mkey = SSL_kEDH,
d452 1
a452 1
		.algorithm_mkey = SSL_kEDH,
d468 1
a468 1
		.algorithm_mkey = SSL_kEDH,
d484 1
a484 1
		.algorithm_mkey = SSL_kEDH,
d500 1
a500 1
		.algorithm_mkey = SSL_kEDH,
d516 1
a516 1
		.algorithm_mkey = SSL_kEDH,
d532 1
a532 1
		.algorithm_mkey = SSL_kEDH,
d548 1
a548 1
		.algorithm_mkey = SSL_kEDH,
d564 1
a564 1
		.algorithm_mkey = SSL_kEDH,
d580 1
a580 1
		.algorithm_mkey = SSL_kEDH,
d596 1
a596 1
		.algorithm_mkey = SSL_kEDH,
d658 1
a658 1
		.algorithm_mkey = SSL_kEDH,
d673 1
a673 1
		.algorithm_mkey = SSL_kEDH,
d688 1
a688 1
		.algorithm_mkey = SSL_kEDH,
d751 1
a751 1
		.algorithm_mkey = SSL_kEDH,
d767 1
a767 1
		.algorithm_mkey = SSL_kEDH,
d783 1
a783 1
		.algorithm_mkey = SSL_kEDH,
d880 1
a880 1
		.algorithm_mkey = SSL_kEDH,
d947 1
a947 1
		.algorithm_mkey = SSL_kEDH,
d963 1
a963 1
		.algorithm_mkey = SSL_kEDH,
d979 1
a979 1
		.algorithm_mkey = SSL_kEDH,
d997 1
a997 1
		.algorithm_mkey = SSL_kEDH,
d1045 1
a1045 1
		.algorithm_mkey = SSL_kEDH,
d1061 1
a1061 1
		.algorithm_mkey = SSL_kEDH,
d1077 1
a1077 1
		.algorithm_mkey = SSL_kEDH,
d1093 1
a1093 1
		.algorithm_mkey = SSL_kEDH,
d1221 1
a1221 1
		.algorithm_mkey = SSL_kEDH,
d1237 1
a1237 1
		.algorithm_mkey = SSL_kEDH,
d1253 1
a1253 1
		.algorithm_mkey = SSL_kEDH,
d1309 1
a1309 1
		.algorithm_mkey = SSL_kEDH,
d1327 1
a1327 1
		.algorithm_mkey = SSL_kEDH,
d1381 1
a1381 1
		.algorithm_mkey = SSL_kEDH,
d1399 1
a1399 1
		.algorithm_mkey = SSL_kEDH,
d1453 1
a1453 1
		.algorithm_mkey = SSL_kEDH,
d1471 1
a1471 1
		.algorithm_mkey = SSL_kEDH,
d1569 1
a1569 1
		.algorithm_mkey = SSL_kEECDH,
d1585 1
a1585 1
		.algorithm_mkey = SSL_kEECDH,
d1601 1
a1601 1
		.algorithm_mkey = SSL_kEECDH,
d1617 1
a1617 1
		.algorithm_mkey = SSL_kEECDH,
d1633 1
a1633 1
		.algorithm_mkey = SSL_kEECDH,
d1729 1
a1729 1
		.algorithm_mkey = SSL_kEECDH,
d1745 1
a1745 1
		.algorithm_mkey = SSL_kEECDH,
d1761 1
a1761 1
		.algorithm_mkey = SSL_kEECDH,
d1777 1
a1777 1
		.algorithm_mkey = SSL_kEECDH,
d1793 1
a1793 1
		.algorithm_mkey = SSL_kEECDH,
d1809 1
a1809 1
		.algorithm_mkey = SSL_kEECDH,
d1825 1
a1825 1
		.algorithm_mkey = SSL_kEECDH,
d1841 1
a1841 1
		.algorithm_mkey = SSL_kEECDH,
d1857 1
a1857 1
		.algorithm_mkey = SSL_kEECDH,
d1873 1
a1873 1
		.algorithm_mkey = SSL_kEECDH,
d1892 1
a1892 1
		.algorithm_mkey = SSL_kEECDH,
d1908 1
a1908 1
		.algorithm_mkey = SSL_kEECDH,
d1956 1
a1956 1
		.algorithm_mkey = SSL_kEECDH,
d1972 1
a1972 1
		.algorithm_mkey = SSL_kEECDH,
d2022 1
a2022 1
		.algorithm_mkey = SSL_kEECDH,
d2040 1
a2040 1
		.algorithm_mkey = SSL_kEECDH,
d2094 1
a2094 1
		.algorithm_mkey = SSL_kEECDH,
d2112 1
a2112 1
		.algorithm_mkey = SSL_kEECDH,
d2227 1
a2227 1
		.algorithm_mkey = SSL_kEECDH,
d2243 1
a2243 1
		.algorithm_mkey = SSL_kEECDH,
d2259 1
a2259 1
		.algorithm_mkey = SSL_kEDH,
d3072 1
a3072 1
		(alg_k & SSL_kEECDH)
d3111 1
a3111 1
			if ((alg_k & SSL_kEECDH) &&
d3142 1
a3142 1
	if (alg_k & (SSL_kDHr|SSL_kEDH)) {
d3147 1
a3147 1
		(alg_k & (SSL_kEDH|SSL_kDHd|SSL_kDHr))) {
d3160 1
a3160 1
	 * so we don't need to check for SSL_kECDH or SSL_kEECDH
@


1.68
log
@decompress libssl. ok beck jsing
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.67 2014/07/09 11:25:42 jsing Exp $ */
a1264 65
#ifndef OPENSSL_NO_PSK
	/* Cipher 8A */
	{
		.valid = 1,
		.name = TLS1_TXT_PSK_WITH_RC4_128_SHA,
		.id = TLS1_CK_PSK_WITH_RC4_128_SHA,
		.algorithm_mkey = SSL_kPSK,
		.algorithm_auth = SSL_aPSK,
		.algorithm_enc = SSL_RC4,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_MEDIUM,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 8B */
	{
		.valid = 1,
		.name = TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA,
		.id = TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA,
		.algorithm_mkey = SSL_kPSK,
		.algorithm_auth = SSL_aPSK,
		.algorithm_enc = SSL_3DES,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 112,
		.alg_bits = 168,
	},

	/* Cipher 8C */
	{
		.valid = 1,
		.name = TLS1_TXT_PSK_WITH_AES_128_CBC_SHA,
		.id = TLS1_CK_PSK_WITH_AES_128_CBC_SHA,
		.algorithm_mkey = SSL_kPSK,
		.algorithm_auth = SSL_aPSK,
		.algorithm_enc = SSL_AES128,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 128,
		.alg_bits = 128,
	},

	/* Cipher 8D */
	{
		.valid = 1,
		.name = TLS1_TXT_PSK_WITH_AES_256_CBC_SHA,
		.id = TLS1_CK_PSK_WITH_AES_256_CBC_SHA,
		.algorithm_mkey = SSL_kPSK,
		.algorithm_auth = SSL_aPSK,
		.algorithm_enc = SSL_AES256,
		.algorithm_mac = SSL_SHA1,
		.algorithm_ssl = SSL_TLSV1,
		.algo_strength = SSL_HIGH,
		.algorithm2 = SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		.strength_bits = 256,
		.alg_bits = 256,
	},
#endif  /* OPENSSL_NO_PSK */
a2967 5
#ifndef OPENSSL_NO_PSK
		/* with PSK there must be server callback set */
		if ((alg_k & SSL_kPSK) && s->psk_server_callback == NULL)
			continue;
#endif /* OPENSSL_NO_PSK */
@


1.67
log
@tedu the SSL export cipher handling - since we do not have enabled export
ciphers we no longer need the flags or code to support it.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.66 2014/07/09 11:10:51 bcook Exp $ */
a2422 1
	free(s->s3->rrec.comp);
a2444 3

	free(s->s3->rrec.comp);
	s->s3->rrec.comp = NULL;
@


1.66
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.65 2014/07/08 22:09:01 jsing Exp $ */
d213 1
a213 1
		.algo_strength = SSL_EXPORT|SSL_EXP40,
d261 1
a261 1
		.algo_strength = SSL_EXPORT|SSL_EXP40,
d295 1
a295 1
		.algo_strength = SSL_EXPORT|SSL_EXP40,
d344 1
a344 1
		.algo_strength = SSL_EXPORT|SSL_EXP40,
d392 1
a392 1
		.algo_strength = SSL_EXPORT|SSL_EXP40,
d441 1
a441 1
		.algo_strength = SSL_EXPORT|SSL_EXP40,
d489 1
a489 1
		.algo_strength = SSL_EXPORT|SSL_EXP40,
d537 1
a537 1
		.algo_strength = SSL_EXPORT|SSL_EXP40,
d569 1
a569 1
		.algo_strength = SSL_EXPORT|SSL_EXP40,
d3002 1
a3002 1
	unsigned long alg_k, alg_a, mask_k, mask_a, emask_k, emask_a;
a3032 2
		emask_k = cert->export_mask_k;
		emask_a = cert->export_mask_a;
d3043 1
a3043 5
		if (SSL_C_IS_EXPORT(c)) {
			ok = (alg_k & emask_k) && (alg_a & emask_a);
		} else {
			ok = (alg_k & mask_k) && (alg_a & mask_a);
		}
@


1.65
log
@Mark the weakened 40-bit export ciphers as invalid - no one in their right
mind should be using them.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.64 2014/07/08 21:50:40 jsing Exp $ */
a156 2

const char ssl3_version_str[]="SSLv3" OPENSSL_VERSION_PTEXT;
@


1.64
log
@Remove SSL_FIPS.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.63 2014/07/08 21:31:54 jsing Exp $ */
d207 1
a207 1
		.valid = 1,
d255 1
a255 1
		.valid = 1,
d289 1
a289 1
		.valid = 1,
d338 1
a338 1
		.valid = 0,
d435 1
a435 1
		.valid = 1,
d483 1
a483 1
		.valid = 1,
d531 1
a531 1
		.valid = 1,
d563 1
a563 1
		.valid = 1,
@


1.63
log
@Nuke SSL_NOT_EXP since it does nothing.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.62 2014/06/21 16:51:48 jsing Exp $ */
d199 1
a199 1
		.algo_strength = SSL_STRONG_NONE|SSL_FIPS,
d329 1
a329 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d378 1
a378 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d426 1
a426 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d475 1
a475 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d523 1
a523 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d603 1
a603 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d620 1
a620 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d635 1
a635 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d650 1
a650 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d665 1
a665 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d680 1
a680 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d695 1
a695 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d711 1
a711 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d726 1
a726 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d742 1
a742 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d758 1
a758 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d774 1
a774 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d790 1
a790 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d807 1
a807 1
		.algo_strength = SSL_STRONG_NONE|SSL_FIPS,
d823 1
a823 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d839 1
a839 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d855 1
a855 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d871 1
a871 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d887 1
a887 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1004 1
a1004 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1020 1
a1020 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1036 1
a1036 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1052 1
a1052 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1068 1
a1068 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1084 1
a1084 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1100 1
a1100 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1294 1
a1294 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1310 1
a1310 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1326 1
a1326 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1345 1
a1345 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1363 1
a1363 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1381 1
a1381 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1399 1
a1399 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1417 1
a1417 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1435 1
a1435 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1453 1
a1453 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1471 1
a1471 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1489 1
a1489 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1507 1
a1507 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1525 1
a1525 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1543 1
a1543 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1561 1
a1561 1
		.algo_strength = SSL_STRONG_NONE|SSL_FIPS,
d1593 1
a1593 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1609 1
a1609 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1625 1
a1625 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1641 1
a1641 1
		.algo_strength = SSL_STRONG_NONE|SSL_FIPS,
d1673 1
a1673 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1689 1
a1689 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1705 1
a1705 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1721 1
a1721 1
		.algo_strength = SSL_STRONG_NONE|SSL_FIPS,
d1753 1
a1753 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1769 1
a1769 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1785 1
a1785 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1801 1
a1801 1
		.algo_strength = SSL_STRONG_NONE|SSL_FIPS,
d1833 1
a1833 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1849 1
a1849 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1865 1
a1865 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1881 1
a1881 1
		.algo_strength = SSL_STRONG_NONE|SSL_FIPS,
d1913 1
a1913 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1929 1
a1929 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1945 1
a1945 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1964 1
a1964 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1980 1
a1980 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d1996 1
a1996 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2012 1
a2012 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2028 1
a2028 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2044 1
a2044 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2060 1
a2060 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2076 1
a2076 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2094 1
a2094 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2112 1
a2112 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2130 1
a2130 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2148 1
a2148 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2166 1
a2166 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2184 1
a2184 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2202 1
a2202 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
d2220 1
a2220 1
		.algo_strength = SSL_HIGH|SSL_FIPS,
@


1.62
log
@Specify the correct strength bits for 3DES cipher suites.

From OpenSSL.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.61 2014/06/13 13:28:53 jsing Exp $ */
d183 1
a183 1
		.algo_strength = SSL_NOT_EXP|SSL_STRONG_NONE,
d199 1
a199 1
		.algo_strength = SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d231 1
a231 1
		.algo_strength = SSL_NOT_EXP|SSL_MEDIUM,
d247 1
a247 1
		.algo_strength = SSL_NOT_EXP|SSL_MEDIUM,
d280 1
a280 1
		.algo_strength = SSL_NOT_EXP|SSL_MEDIUM,
d313 1
a313 1
		.algo_strength = SSL_NOT_EXP|SSL_LOW,
d329 1
a329 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d362 1
a362 1
		.algo_strength = SSL_NOT_EXP|SSL_LOW,
d378 1
a378 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d410 1
a410 1
		.algo_strength = SSL_NOT_EXP|SSL_LOW,
d426 1
a426 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d459 1
a459 1
		.algo_strength = SSL_NOT_EXP|SSL_LOW,
d475 1
a475 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d507 1
a507 1
		.algo_strength = SSL_NOT_EXP|SSL_LOW,
d523 1
a523 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d555 1
a555 1
		.algo_strength = SSL_NOT_EXP|SSL_MEDIUM,
d587 1
a587 1
		.algo_strength = SSL_NOT_EXP|SSL_LOW,
d603 1
a603 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d620 1
a620 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d635 1
a635 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d650 1
a650 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d665 1
a665 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d680 1
a680 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d695 1
a695 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d711 1
a711 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d726 1
a726 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d742 1
a742 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d758 1
a758 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d774 1
a774 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d790 1
a790 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d807 1
a807 1
		.algo_strength = SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d823 1
a823 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d839 1
a839 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d855 1
a855 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d871 1
a871 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d887 1
a887 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d906 1
a906 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d922 1
a922 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d938 1
a938 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d954 1
a954 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d970 1
a970 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d986 1
a986 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d1004 1
a1004 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1020 1
a1020 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1036 1
a1036 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1052 1
a1052 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1068 1
a1068 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1084 1
a1084 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1100 1
a1100 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1117 1
a1117 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d1132 1
a1132 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d1147 1
a1147 1
		.algo_strength = SSL_NOT_EXP|SSL_STRONG_NONE,
d1161 1
a1161 1
		.algo_strength = SSL_NOT_EXP|SSL_STRONG_NONE,
d1180 1
a1180 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d1196 1
a1196 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d1212 1
a1212 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d1228 1
a1228 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d1244 1
a1244 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d1260 1
a1260 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d1278 1
a1278 1
		.algo_strength = SSL_NOT_EXP|SSL_MEDIUM,
d1294 1
a1294 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1310 1
a1310 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1326 1
a1326 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1345 1
a1345 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1363 1
a1363 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1381 1
a1381 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1399 1
a1399 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1417 1
a1417 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1435 1
a1435 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1453 1
a1453 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1471 1
a1471 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1489 1
a1489 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1507 1
a1507 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1525 1
a1525 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1543 1
a1543 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1561 1
a1561 1
		.algo_strength = SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d1577 1
a1577 1
		.algo_strength = SSL_NOT_EXP|SSL_MEDIUM,
d1593 1
a1593 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1609 1
a1609 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1625 1
a1625 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1641 1
a1641 1
		.algo_strength = SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d1657 1
a1657 1
		.algo_strength = SSL_NOT_EXP|SSL_MEDIUM,
d1673 1
a1673 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1689 1
a1689 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1705 1
a1705 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1721 1
a1721 1
		.algo_strength = SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d1737 1
a1737 1
		.algo_strength = SSL_NOT_EXP|SSL_MEDIUM,
d1753 1
a1753 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1769 1
a1769 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1785 1
a1785 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1801 1
a1801 1
		.algo_strength = SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d1817 1
a1817 1
		.algo_strength = SSL_NOT_EXP|SSL_MEDIUM,
d1833 1
a1833 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1849 1
a1849 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1865 1
a1865 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1881 1
a1881 1
		.algo_strength = SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d1897 1
a1897 1
		.algo_strength = SSL_NOT_EXP|SSL_MEDIUM,
d1913 1
a1913 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1929 1
a1929 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1945 1
a1945 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1964 1
a1964 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1980 1
a1980 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1996 1
a1996 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2012 1
a2012 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2028 1
a2028 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2044 1
a2044 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2060 1
a2060 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2076 1
a2076 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2094 1
a2094 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2112 1
a2112 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2130 1
a2130 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2148 1
a2148 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2166 1
a2166 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2184 1
a2184 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2202 1
a2202 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2220 1
a2220 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d2239 1
a2239 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d2253 1
a2253 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d2267 1
a2267 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d2281 1
a2281 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d2299 1
a2299 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d2315 1
a2315 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
d2331 1
a2331 1
		.algo_strength = SSL_NOT_EXP|SSL_HIGH,
@


1.61
log
@Add ChaCha20-Poly1305 based ciphersuites.

Based on Adam Langley's chromium patches.

Tested by and ok sthen@@
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.60 2014/06/13 13:21:09 jsing Exp $ */
d331 1
a331 1
		.strength_bits = 168,
d380 1
a380 1
		.strength_bits = 168,
d428 1
a428 1
		.strength_bits = 168,
d477 1
a477 1
		.strength_bits = 168,
d525 1
a525 1
		.strength_bits = 168,
d605 1
a605 1
		.strength_bits = 168,
d1296 1
a1296 1
		.strength_bits = 168,
d1595 1
a1595 1
		.strength_bits = 168,
d1675 1
a1675 1
		.strength_bits = 168,
d1755 1
a1755 1
		.strength_bits = 168,
d1835 1
a1835 1
		.strength_bits = 168,
d1915 1
a1915 1
		.strength_bits = 168,
a2226 2


@


1.60
log
@Switch the AES-GCM cipher suites to SSL_CIPHER_ALGORITHM2_AEAD.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.59 2014/06/13 04:29:13 miod Exp $ */
d2290 51
@


1.59
log
@Remove support for the `opaque PRF input' extension, which draft has expired
7 years ago and never made it into an RFC. That code wasn't compiled in
anyway unless one would define the actual on-the-wire extension id bytes;
crank libssl major.

With help and enlightenment from Brendan MacDonell.
@
text
@d1 1
a1 1
/* $OpenBSD: s3_lib.c,v 1.58 2014/06/12 15:49:31 deraadt Exp $ */
d162 7
d1346 3
a1348 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1364 3
a1366 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d1382 3
a1384 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1400 3
a1402 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d1418 3
a1420 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1436 3
a1438 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d1454 3
a1456 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1472 3
a1474 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d1490 3
a1492 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1508 3
a1510 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d1526 3
a1528 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1544 3
a1546 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d2095 3
a2097 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d2113 3
a2115 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d2131 3
a2133 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d2149 3
a2151 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d2167 3
a2169 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d2185 3
a2187 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d2203 3
a2205 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d2221 3
a2223 1
		.algorithm2 = SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
@


1.58
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a2324 5
#ifdef TLSEXT_TYPE_opaque_prf_input
	free(s->s3->client_opaque_prf_input);
	free(s->s3->server_opaque_prf_input);
#endif

a2348 7
#ifdef TLSEXT_TYPE_opaque_prf_input
	free(s->s3->client_opaque_prf_input);
	s->s3->client_opaque_prf_input = NULL;
	free(s->s3->server_opaque_prf_input);
	s->s3->server_opaque_prf_input = NULL;
#endif

a2560 29
#ifdef TLSEXT_TYPE_opaque_prf_input
	case SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT:
		if (larg > 12288) {
			/*
			 * Actual internal limit is 2^16 for the complete
			 * hello message (including the cert chain and
			 * everything)
			 */
			SSLerr(SSL_F_SSL3_CTRL,
			    SSL_R_OPAQUE_PRF_INPUT_TOO_LONG);
			break;
		}
		free(s->tlsext_opaque_prf_input);
		if ((size_t)larg == 0) {
			s->tlsext_opaque_prf_input = NULL;
			s->tlsext_opaque_prf_input_len = 0;
			ret = 1;
		} else {
			s->tlsext_opaque_prf_input =
			    BUF_memdup(parg, (size_t)larg);
			if (s->tlsext_opaque_prf_input != NULL) {
				s->tlsext_opaque_prf_input_len = (size_t)larg;
				ret = 1;
			} else
				s->tlsext_opaque_prf_input_len = 0;
		}
		break;
#endif

a2785 6
#ifdef TLSEXT_TYPE_opaque_prf_input
	case SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG:
		ctx->tlsext_opaque_prf_input_callback_arg = parg;
		return 1;
#endif

a2844 7

#ifdef TLSEXT_TYPE_opaque_prf_input
	case SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB:
		ctx->tlsext_opaque_prf_input_callback =
		    (int (*)(SSL *, void *, size_t, void *))fp;
		break;
#endif
@


1.57
log
@Remove another NULL check before a BIO_free().
@
text
@d1 1
a1 1
/* ssl/s3_lib.c */
@


1.56
log
@ssl3_free_digest_list() has its own NULL check.
@
text
@d2380 4
a2383 4
	if (s->s3->handshake_buffer) {
		BIO_free(s->s3->handshake_buffer);
		s->s3->handshake_buffer = NULL;
	}
@


1.55
log
@BIO_free has an implicit NULL check, so do not bother checking for NULL
before calling it.
@
text
@d2341 1
a2341 2
	if (s->s3->handshake_dgst)
		ssl3_free_digest_list(s);
d2384 2
a2385 3
	if (s->s3->handshake_dgst) {
		ssl3_free_digest_list(s);
	}
@


1.54
log
@ssl3_release_{read,write}_buffer() handle being called with NULL buffers,
so do not bother checking before calling.
@
text
@d2340 1
a2340 2
	if (s->s3->handshake_buffer)
		BIO_free(s->s3->handshake_buffer);
@


1.53
log
@The DH_free, EC_KEY_free, EVP_PKEY_free and RSA_free functions all have
implicit NULL checks, so there is no point ensuring that the pointer is
non-NULL before calling them.
@
text
@d2331 3
a2333 4
	if (s->s3->rbuf.buf != NULL)
		ssl3_release_read_buffer(s);
	if (s->s3->wbuf.buf != NULL)
		ssl3_release_write_buffer(s);
@


1.52
log
@More manual OPENSSL_NO_EC and OPENSSL_NO_TLSEXT cleanup.
@
text
@d2336 2
a2337 4
	if (s->s3->tmp.dh != NULL)
		DH_free(s->s3->tmp.dh);
	if (s->s3->tmp.ecdh != NULL)
		EC_KEY_free(s->s3->tmp.ecdh);
d2341 1
a2341 1
	if (s->s3->handshake_buffer) {
a2342 1
	}
d2371 5
a2375 8
	if (s->s3->tmp.dh != NULL) {
		DH_free(s->s3->tmp.dh);
		s->s3->tmp.dh = NULL;
	}
	if (s->s3->tmp.ecdh != NULL) {
		EC_KEY_free(s->s3->tmp.ecdh);
		s->s3->tmp.ecdh = NULL;
	}
d2467 1
a2467 2
			if (s->cert->rsa_tmp != NULL)
				RSA_free(s->cert->rsa_tmp);
d2500 1
a2500 2
			if (s->cert->dh_tmp != NULL)
				DH_free(s->cert->dh_tmp);
d2535 1
a2535 2
			if (s->cert->ecdh_tmp != NULL)
				EC_KEY_free(s->cert->ecdh_tmp);
d2723 1
a2723 2
				if (cert->rsa_tmp != NULL)
					RSA_free(cert->rsa_tmp);
d2754 1
a2754 2
			if (cert->dh_tmp != NULL)
				DH_free(cert->dh_tmp);
d2790 1
a2790 3
			if (cert->ecdh_tmp != NULL) {
				EC_KEY_free(cert->ecdh_tmp);
			}
@


1.51
log
@ECDH and ECDSA will not work overly well if there is no EC, so unifdef
OPENSSL_NO_EC.

ok tedu@@
@
text
@d2412 1
a2412 1
#if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)
a2974 1
#if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_EC)
a2977 1
#endif
a3167 1
#if !defined(OPENSSL_NO_EC) && !defined(OPENSSL_NO_TLSEXT)
a3173 1
#endif
@


1.50
log
@TLS would not be entirely functional without extensions, so unifdef
OPENSSL_NO_TLSEXT.

ok tedu@@
@
text
@a153 1
#ifndef OPENSSL_NO_EC
a154 1
#endif /* OPENSSL_NO_EC */
a2381 1
#ifndef OPENSSL_NO_EC
a2382 1
#endif /* !OPENSSL_NO_EC */
a3029 1
#ifndef OPENSSL_NO_EC
a3164 1
#endif /* OPENSSL_NO_EC */
@


1.49
log
@remove some #if 0 code. we don't need any more reminders that we're using
a not quite appropriate data structure. ok jsing
@
text
@a153 1
#ifndef OPENSSL_NO_TLSEXT
a156 1
#endif /* OPENSSL_NO_TLSEXT */
a2383 1
#ifndef OPENSSL_NO_TLSEXT
a2386 1
#endif /* !OPENSSL_NO_TLSEXT */
a2559 1
#ifndef OPENSSL_NO_TLSEXT
a2654 1
#endif /* !OPENSSL_NO_TLSEXT */
a2690 1
#ifndef OPENSSL_NO_TLSEXT
a2694 1
#endif
a2818 1
#ifndef OPENSSL_NO_TLSEXT
a2858 1
#endif /* !OPENSSL_NO_TLSEXT */
a2908 1
#ifndef OPENSSL_NO_TLSEXT
a2929 1
#endif
a3033 1
#ifndef OPENSSL_NO_TLSEXT
a3170 1
#endif /* OPENSSL_NO_TLSEXT */
@


1.48
log
@Make use of SSL_IS_DTLS, SSL_USE_EXPLICIT_IV, SSL_USE_SIGALGS and
SSL_USE_TLS1_2_CIPHERS.

Largely based on OpenSSL head.
@
text
@a3001 1
#if 0
a3007 4
	sk_SSL_CIPHER_set_cmp_func(srvr, ssl_cipher_ptr_id_cmp);
	sk_SSL_CIPHER_set_cmp_func(clnt, ssl_cipher_ptr_id_cmp);
#endif

a3264 1
#if 1
a3265 1
#endif
a3273 1
#if 1
a3283 1
#endif
@


1.47
log
@unidef DH, ECDH, and ECDSA. there's no purpose to a libssl without them.
ok deraadt jsing
@
text
@d3025 1
a3025 1
		/* Skip TLS v1.2 only ciphersuites if lower than v1.2 */
d3027 1
a3027 1
		    (TLS1_get_version(s) < TLS1_2_VERSION))
@


1.46
log
@Make it substantially easier to identify protocol version requirements
by adding an enc_flags field to the ssl3_enc_method, specifying four flags
that are used with this field and providing macros for evaluating these
conditions. Currently the version requirements are identified by
continually checking the version number and other criteria.

This change also adds separate SSL3_ENC_METHOD data for TLS v1.1 and v1.2,
since they have different enc_flags from TLS v1.

Based on changes in OpenSSL head.

No objection from miod@@
@
text
@a159 1
#ifndef OPENSSL_NO_DH
a160 1
#endif
a1523 1
#ifndef OPENSSL_NO_ECDH
a1922 1
#endif	/* OPENSSL_NO_ECDH */
a1923 1
#ifndef OPENSSL_NO_ECDH
a2184 1
#endif /* OPENSSL_NO_ECDH */
a2339 1
#ifndef OPENSSL_NO_DH
a2341 2
#endif
#ifndef OPENSSL_NO_ECDH
a2343 1
#endif
a2377 1
#ifndef OPENSSL_NO_DH
a2381 2
#endif
#ifndef OPENSSL_NO_ECDH
a2385 1
#endif
a2493 1
#ifndef OPENSSL_NO_DH
a2527 2
#endif
#ifndef OPENSSL_NO_ECDH
a2563 1
#endif /* !OPENSSL_NO_ECDH */
a2685 1
#ifndef OPENSSL_NO_DH
a2690 2
#endif
#ifndef OPENSSL_NO_ECDH
a2696 1
#endif
a2757 1
#ifndef OPENSSL_NO_DH
a2788 2
#endif
#ifndef OPENSSL_NO_ECDH
a2826 1
#endif /* !OPENSSL_NO_ECDH */
a2908 1
#ifndef OPENSSL_NO_DH
a2913 2
#endif
#ifndef OPENSSL_NO_ECDH
a2918 1
#endif
a3227 1
#ifndef OPENSSL_NO_DH
a3236 1
#endif /* !OPENSSL_NO_DH */
a3238 1
#ifndef OPENSSL_NO_ECDH
a3242 1
#endif
a3243 1
#ifndef OPENSSL_NO_ECDSA
a3250 1
#endif	
@


1.45
log
@There is no point in checking if a pointer is non-NULL before calling free,
since free already does this for us. Also remove some pointless NULL
assignments, where the result from malloc(3) is immediately assigned to the
same variable.

ok miod@@
@
text
@d2273 1
a3064 1

@


1.44
log
@Replace the following logic:

        if (nothing to allocate)
                ptr = malloc(1)
        else {
                if ((ptr = malloc(size to allocate))
                        memcpy(ptr, data to copy, size to allocate)
        }

        if (ptr == NULL)
                OMG ERROR

with a saner logic where the NULL pointer check if moved to the actual
malloc branch, so that we do not need to malloc a single byte, just to avoid
having a NULL pointer.

Whoever thought allocating a single byte was a smart idea was obviously
not taking his meds.

ok beck@@ guenther@@
@
text
@d2335 2
a2336 4
	if (s->s3->client_opaque_prf_input != NULL)
		free(s->s3->client_opaque_prf_input);
	if (s->s3->server_opaque_prf_input != NULL)
		free(s->s3->server_opaque_prf_input);
d2344 1
a2344 2
	if (s->s3->rrec.comp != NULL)
		free(s->s3->rrec.comp);
d2374 1
a2374 2
	if (s->s3->client_opaque_prf_input != NULL)
		free(s->s3->client_opaque_prf_input);
d2376 1
a2376 2
	if (s->s3->server_opaque_prf_input != NULL)
		free(s->s3->server_opaque_prf_input);
d2384 3
a2386 4
	if (s->s3->rrec.comp != NULL) {
		free(s->s3->rrec.comp);
		s->s3->rrec.comp = NULL;
	}
d2434 3
a2436 5
	if (s->next_proto_negotiated) {
		free(s->next_proto_negotiated);
		s->next_proto_negotiated = NULL;
		s->next_proto_negotiated_len = 0;
	}
d2584 1
a2584 2
			if (s->tlsext_hostname != NULL)
				free(s->tlsext_hostname);
d2624 1
a2624 2
		if (s->tlsext_opaque_prf_input != NULL)
			free(s->tlsext_opaque_prf_input);
d2671 1
a2671 2
		if (s->tlsext_ocsp_resp)
			free(s->tlsext_ocsp_resp);
@


1.43
log
@Remove TLS_DEBUG, SSL_DEBUG, CIPHER_DEBUG and OPENSSL_RI_DEBUG. Much of
this is sporadic, hacked up and can easily be put back in an improved form
should we ever need it.

ok miod@@
@
text
@d2636 4
a2639 3
			/* dummy byte just to get non-NULL */
			s->tlsext_opaque_prf_input = malloc(1);
		} else
d2642 6
a2647 5
		if (s->tlsext_opaque_prf_input != NULL) {
			s->tlsext_opaque_prf_input_len = (size_t)larg;
			ret = 1;
		} else
			s->tlsext_opaque_prf_input_len = 0;
@


1.42
log
@Use C99 initialisers for SSL3_ENC_METHOD structs.

ok miod@@
@
text
@a3050 14
#ifdef CIPHER_DEBUG
	printf("Server has %d from %p:\n", sk_SSL_CIPHER_num(srvr),
	    (void *)srvr);
	for (i = 0; i < sk_SSL_CIPHER_num(srvr); ++i) {
		c = sk_SSL_CIPHER_value(srvr, i);
		printf("%p:%s\n",(void *)c, c->name);
	}
	printf("Client sent %d from %p:\n", sk_SSL_CIPHER_num(clnt),
	    (void *)clnt);
	for (i = 0; i < sk_SSL_CIPHER_num(clnt); ++i) {
		c = sk_SSL_CIPHER_value(clnt, i);
		printf("%p:%s\n",(void *)c, c->name);
	}
#endif
a3085 5
#ifdef CIPHER_DEBUG
			printf("%d:[%08lX:%08lX:%08lX:%08lX]%p:%s (export)\n",
			    ok, alg_k, alg_a, emask_k, emask_a, (void *)c,
			    c->name);
#endif
a3087 5
#ifdef CIPHER_DEBUG
			printf("%d:[%08lX:%08lX:%08lX:%08lX]%p:%s\n",
			    ok, alg_k, alg_a, mask_k, mask_a,(void *)c,
			    c->name);
#endif
@


1.41
log
@Clean up the SSL cipher initialisation and use C99 initialisers for
clarity, grepability and to protect from future field reordering/removal.

ok miod@@
@
text
@d2257 16
a2272 14
	ssl3_enc,
	n_ssl3_mac,
	ssl3_setup_key_block,
	ssl3_generate_master_secret,
	ssl3_change_cipher_state,
	ssl3_final_finish_mac,
	MD5_DIGEST_LENGTH + SHA_DIGEST_LENGTH,
	ssl3_cert_verify_mac,
	SSL3_MD_CLIENT_FINISHED_CONST, 4,
	SSL3_MD_SERVER_FINISHED_CONST, 4,
	ssl3_alert_code,
	(int (*)(SSL *, unsigned char *, size_t, const char *,
	size_t, const unsigned char *, size_t,
	int use_context))ssl_undefined_function,
@


1.40
log
@There are two actual uses of e_os2.h in libssl - an OPENSSL_GLOBAL (an
empty define) and an OPENSSL_EXTERN (which is defined as, well... extern).
The use of OPENSSL_EXTERN is already inconsistent since the lines above
and below just use plain old "extern". Expand the two uses of these macros
and stop including e_os2.h in libssl.

ok miod@@
@
text
@d171 2
a172 2
/* The RSA ciphers */
/* Cipher 01 */
d174 92
a265 92
		1,
		SSL3_TXT_RSA_NULL_MD5,
		SSL3_CK_RSA_NULL_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_eNULL,
		SSL_MD5,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_STRONG_NONE,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		0,
		0,
	},

/* Cipher 02 */
	{
		1,
		SSL3_TXT_RSA_NULL_SHA,
		SSL3_CK_RSA_NULL_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_eNULL,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		0,
		0,
	},

/* Cipher 03 */
	{
		1,
		SSL3_TXT_RSA_RC4_40_MD5,
		SSL3_CK_RSA_RC4_40_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC4,
		SSL_MD5,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		128,
	},

/* Cipher 04 */
	{
		1,
		SSL3_TXT_RSA_RC4_128_MD5,
		SSL3_CK_RSA_RC4_128_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC4,
		SSL_MD5,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

/* Cipher 05 */
	{
		1,
		SSL3_TXT_RSA_RC4_128_SHA,
		SSL3_CK_RSA_RC4_128_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC4,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

/* Cipher 06 */
	{
		1,
		SSL3_TXT_RSA_RC2_40_MD5,
		SSL3_CK_RSA_RC2_40_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC2,
		SSL_MD5,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		128,
d268 1
a268 1
/* Cipher 07 */
d271 12
a282 12
		1,
		SSL3_TXT_RSA_IDEA_128_SHA,
		SSL3_CK_RSA_IDEA_128_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_IDEA,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d286 1
a286 1
/* Cipher 08 */
d288 489
a776 489
		1,
		SSL3_TXT_RSA_DES_40_CBC_SHA,
		SSL3_CK_RSA_DES_40_CBC_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		56,
	},

/* Cipher 09 */
	{
		1,
		SSL3_TXT_RSA_DES_64_CBC_SHA,
		SSL3_CK_RSA_DES_64_CBC_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_LOW,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		56,
	},

/* Cipher 0A */
	{
		1,
		SSL3_TXT_RSA_DES_192_CBC3_SHA,
		SSL3_CK_RSA_DES_192_CBC3_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_3DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

/* The DH ciphers */
/* Cipher 0B */
	{
		0,
		SSL3_TXT_DH_DSS_DES_40_CBC_SHA,
		SSL3_CK_DH_DSS_DES_40_CBC_SHA,
		SSL_kDHd,
		SSL_aDH,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		56,
	},

/* Cipher 0C */
	{
		0, /* not implemented (non-ephemeral DH) */
		SSL3_TXT_DH_DSS_DES_64_CBC_SHA,
		SSL3_CK_DH_DSS_DES_64_CBC_SHA,
		SSL_kDHd,
		SSL_aDH,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_LOW,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		56,
	},

/* Cipher 0D */
	{
		0, /* not implemented (non-ephemeral DH) */
		SSL3_TXT_DH_DSS_DES_192_CBC3_SHA,
		SSL3_CK_DH_DSS_DES_192_CBC3_SHA,
		SSL_kDHd,
		SSL_aDH,
		SSL_3DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

/* Cipher 0E */
	{
		0, /* not implemented (non-ephemeral DH) */
		SSL3_TXT_DH_RSA_DES_40_CBC_SHA,
		SSL3_CK_DH_RSA_DES_40_CBC_SHA,
		SSL_kDHr,
		SSL_aDH,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		56,
	},

/* Cipher 0F */
	{
		0, /* not implemented (non-ephemeral DH) */
		SSL3_TXT_DH_RSA_DES_64_CBC_SHA,
		SSL3_CK_DH_RSA_DES_64_CBC_SHA,
		SSL_kDHr,
		SSL_aDH,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_LOW,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		56,
	},

/* Cipher 10 */
	{
		0, /* not implemented (non-ephemeral DH) */
		SSL3_TXT_DH_RSA_DES_192_CBC3_SHA,
		SSL3_CK_DH_RSA_DES_192_CBC3_SHA,
		SSL_kDHr,
		SSL_aDH,
		SSL_3DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

/* The Ephemeral DH ciphers */
/* Cipher 11 */
	{
		1,
		SSL3_TXT_EDH_DSS_DES_40_CBC_SHA,
		SSL3_CK_EDH_DSS_DES_40_CBC_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		56,
	},

/* Cipher 12 */
	{
		1,
		SSL3_TXT_EDH_DSS_DES_64_CBC_SHA,
		SSL3_CK_EDH_DSS_DES_64_CBC_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_LOW,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		56,
	},

/* Cipher 13 */
	{
		1,
		SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA,
		SSL3_CK_EDH_DSS_DES_192_CBC3_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_3DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

/* Cipher 14 */
	{
		1,
		SSL3_TXT_EDH_RSA_DES_40_CBC_SHA,
		SSL3_CK_EDH_RSA_DES_40_CBC_SHA,
		SSL_kEDH,
		SSL_aRSA,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		56,
	},

/* Cipher 15 */
	{
		1,
		SSL3_TXT_EDH_RSA_DES_64_CBC_SHA,
		SSL3_CK_EDH_RSA_DES_64_CBC_SHA,
		SSL_kEDH,
		SSL_aRSA,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_LOW,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		56,
	},

/* Cipher 16 */
	{
		1,
		SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA,
		SSL3_CK_EDH_RSA_DES_192_CBC3_SHA,
		SSL_kEDH,
		SSL_aRSA,
		SSL_3DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

/* Cipher 17 */
	{
		1,
		SSL3_TXT_ADH_RC4_40_MD5,
		SSL3_CK_ADH_RC4_40_MD5,
		SSL_kEDH,
		SSL_aNULL,
		SSL_RC4,
		SSL_MD5,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		128,
	},

/* Cipher 18 */
	{
		1,
		SSL3_TXT_ADH_RC4_128_MD5,
		SSL3_CK_ADH_RC4_128_MD5,
		SSL_kEDH,
		SSL_aNULL,
		SSL_RC4,
		SSL_MD5,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

/* Cipher 19 */
	{
		1,
		SSL3_TXT_ADH_DES_40_CBC_SHA,
		SSL3_CK_ADH_DES_40_CBC_SHA,
		SSL_kEDH,
		SSL_aNULL,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		128,
	},

/* Cipher 1A */
	{
		1,
		SSL3_TXT_ADH_DES_64_CBC_SHA,
		SSL3_CK_ADH_DES_64_CBC_SHA,
		SSL_kEDH,
		SSL_aNULL,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_LOW,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		56,
	},

/* Cipher 1B */
	{
		1,
		SSL3_TXT_ADH_DES_192_CBC_SHA,
		SSL3_CK_ADH_DES_192_CBC_SHA,
		SSL_kEDH,
		SSL_aNULL,
		SSL_3DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

/* New AES ciphersuites */
/* Cipher 2F */
	{
		1,
		TLS1_TXT_RSA_WITH_AES_128_SHA,
		TLS1_CK_RSA_WITH_AES_128_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},
/* Cipher 30 */
	{
		0,
		TLS1_TXT_DH_DSS_WITH_AES_128_SHA,
		TLS1_CK_DH_DSS_WITH_AES_128_SHA,
		SSL_kDHd,
		SSL_aDH,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},
/* Cipher 31 */
	{
		0,
		TLS1_TXT_DH_RSA_WITH_AES_128_SHA,
		TLS1_CK_DH_RSA_WITH_AES_128_SHA,
		SSL_kDHr,
		SSL_aDH,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},
/* Cipher 32 */
	{
		1,
		TLS1_TXT_DHE_DSS_WITH_AES_128_SHA,
		TLS1_CK_DHE_DSS_WITH_AES_128_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},
/* Cipher 33 */
	{
		1,
		TLS1_TXT_DHE_RSA_WITH_AES_128_SHA,
		TLS1_CK_DHE_RSA_WITH_AES_128_SHA,
		SSL_kEDH,
		SSL_aRSA,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},
/* Cipher 34 */
	{
		1,
		TLS1_TXT_ADH_WITH_AES_128_SHA,
		TLS1_CK_ADH_WITH_AES_128_SHA,
		SSL_kEDH,
		SSL_aNULL,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

/* Cipher 35 */
	{
		1,
		TLS1_TXT_RSA_WITH_AES_256_SHA,
		TLS1_CK_RSA_WITH_AES_256_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},
/* Cipher 36 */
	{
		0,
		TLS1_TXT_DH_DSS_WITH_AES_256_SHA,
		TLS1_CK_DH_DSS_WITH_AES_256_SHA,
		SSL_kDHd,
		SSL_aDH,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},

/* Cipher 37 */
	{
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_RSA_WITH_AES_256_SHA,
		TLS1_CK_DH_RSA_WITH_AES_256_SHA,
		SSL_kDHr,
		SSL_aDH,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},

/* Cipher 38 */
	{
		1,
		TLS1_TXT_DHE_DSS_WITH_AES_256_SHA,
		TLS1_CK_DHE_DSS_WITH_AES_256_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},

/* Cipher 39 */
	{
		1,
		TLS1_TXT_DHE_RSA_WITH_AES_256_SHA,
		TLS1_CK_DHE_RSA_WITH_AES_256_SHA,
		SSL_kEDH,
		SSL_aRSA,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d781 12
a792 12
		1,
		TLS1_TXT_ADH_WITH_AES_256_SHA,
		TLS1_CK_ADH_WITH_AES_256_SHA,
		SSL_kEDH,
		SSL_aNULL,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d798 12
a809 12
		1,
		TLS1_TXT_RSA_WITH_NULL_SHA256,
		TLS1_CK_RSA_WITH_NULL_SHA256,
		SSL_kRSA,
		SSL_aRSA,
		SSL_eNULL,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		0,
		0,
d814 12
a825 12
		1,
		TLS1_TXT_RSA_WITH_AES_128_SHA256,
		TLS1_CK_RSA_WITH_AES_128_SHA256,
		SSL_kRSA,
		SSL_aRSA,
		SSL_AES128,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d830 12
a841 12
		1,
		TLS1_TXT_RSA_WITH_AES_256_SHA256,
		TLS1_CK_RSA_WITH_AES_256_SHA256,
		SSL_kRSA,
		SSL_aRSA,
		SSL_AES256,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d846 12
a857 12
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_DSS_WITH_AES_128_SHA256,
		TLS1_CK_DH_DSS_WITH_AES_128_SHA256,
		SSL_kDHd,
		SSL_aDH,
		SSL_AES128,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d862 12
a873 12
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_RSA_WITH_AES_128_SHA256,
		TLS1_CK_DH_RSA_WITH_AES_128_SHA256,
		SSL_kDHr,
		SSL_aDH,
		SSL_AES128,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d878 12
a889 12
		1,
		TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256,
		TLS1_CK_DHE_DSS_WITH_AES_128_SHA256,
		SSL_kEDH,
		SSL_aDSS,
		SSL_AES128,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d897 12
a908 12
		1,
		TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA,
		TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_CAMELLIA128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d913 12
a924 12
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
		TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
		SSL_kDHd,
		SSL_aDH,
		SSL_CAMELLIA128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d929 12
a940 12
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
		TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
		SSL_kDHr,
		SSL_aDH,
		SSL_CAMELLIA128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d945 12
a956 12
		1,
		TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
		TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_CAMELLIA128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d961 12
a972 12
		1,
		TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
		TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
		SSL_kEDH,
		SSL_aRSA,
		SSL_CAMELLIA128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d977 12
a988 12
		1,
		TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA,
		TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA,
		SSL_kEDH,
		SSL_aNULL,
		SSL_CAMELLIA128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d995 12
a1006 12
		1,
		TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256,
		TLS1_CK_DHE_RSA_WITH_AES_128_SHA256,
		SSL_kEDH,
		SSL_aRSA,
		SSL_AES128,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1011 12
a1022 12
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_DSS_WITH_AES_256_SHA256,
		TLS1_CK_DH_DSS_WITH_AES_256_SHA256,
		SSL_kDHd,
		SSL_aDH,
		SSL_AES256,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1027 12
a1038 12
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_RSA_WITH_AES_256_SHA256,
		TLS1_CK_DH_RSA_WITH_AES_256_SHA256,
		SSL_kDHr,
		SSL_aDH,
		SSL_AES256,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1043 12
a1054 12
		1,
		TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256,
		TLS1_CK_DHE_DSS_WITH_AES_256_SHA256,
		SSL_kEDH,
		SSL_aDSS,
		SSL_AES256,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1059 12
a1070 12
		1,
		TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256,
		TLS1_CK_DHE_RSA_WITH_AES_256_SHA256,
		SSL_kEDH,
		SSL_aRSA,
		SSL_AES256,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1075 12
a1086 12
		1,
		TLS1_TXT_ADH_WITH_AES_128_SHA256,
		TLS1_CK_ADH_WITH_AES_128_SHA256,
		SSL_kEDH,
		SSL_aNULL,
		SSL_AES128,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1091 12
a1102 12
		1,
		TLS1_TXT_ADH_WITH_AES_256_SHA256,
		TLS1_CK_ADH_WITH_AES_256_SHA256,
		SSL_kEDH,
		SSL_aNULL,
		SSL_AES256,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1108 56
a1163 54
		1,
		"GOST94-GOST89-GOST89",
		0x3000080,
		SSL_kGOST,
		SSL_aGOST94,
		SSL_eGOST2814789CNT,
		SSL_GOST89MAC,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94|TLS1_STREAM_MAC,
		256,
		256
	},
	{
		1,
		"GOST2001-GOST89-GOST89",
		0x3000081,
		SSL_kGOST,
		SSL_aGOST01,
		SSL_eGOST2814789CNT,
		SSL_GOST89MAC,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94|TLS1_STREAM_MAC,
		256,
		256
	},
	{
		1,
		"GOST94-NULL-GOST94",
		0x3000082,
		SSL_kGOST,
		SSL_aGOST94,
		SSL_eNULL,
		SSL_GOST94,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_STRONG_NONE,
		SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94,
		0,
		0
	},
	{
		1,
		"GOST2001-NULL-GOST94",
		0x3000083,
		SSL_kGOST,
		SSL_aGOST01,
		SSL_eNULL,
		SSL_GOST94,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_STRONG_NONE,
		SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94,
		0,
		0
d1171 12
a1182 12
		1,
		TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA,
		TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_CAMELLIA256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1184 1
d1187 12
a1198 12
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
		TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
		SSL_kDHd,
		SSL_aDH,
		SSL_CAMELLIA256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1203 12
a1214 12
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
		TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
		SSL_kDHr,
		SSL_aDH,
		SSL_CAMELLIA256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1219 12
a1230 12
		1,
		TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
		TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_CAMELLIA256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1235 12
a1246 12
		1,
		TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
		TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
		SSL_kEDH,
		SSL_aRSA,
		SSL_CAMELLIA256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1251 12
a1262 12
		1,
		TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA,
		TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA,
		SSL_kEDH,
		SSL_aNULL,
		SSL_CAMELLIA256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1269 12
a1280 12
		1,
		TLS1_TXT_PSK_WITH_RC4_128_SHA,
		TLS1_CK_PSK_WITH_RC4_128_SHA,
		SSL_kPSK,
		SSL_aPSK,
		SSL_RC4,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1285 12
a1296 12
		1,
		TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA,
		TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA,
		SSL_kPSK,
		SSL_aPSK,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
d1301 12
a1312 12
		1,
		TLS1_TXT_PSK_WITH_AES_128_CBC_SHA,
		TLS1_CK_PSK_WITH_AES_128_CBC_SHA,
		SSL_kPSK,
		SSL_aPSK,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1317 12
a1328 12
		1,
		TLS1_TXT_PSK_WITH_AES_256_CBC_SHA,
		TLS1_CK_PSK_WITH_AES_256_CBC_SHA,
		SSL_kPSK,
		SSL_aPSK,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1336 12
a1347 12
		1,
		TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256,
		TLS1_CK_RSA_WITH_AES_128_GCM_SHA256,
		SSL_kRSA,
		SSL_aRSA,
		SSL_AES128GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d1352 12
a1363 12
		1,
		TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384,
		TLS1_CK_RSA_WITH_AES_256_GCM_SHA384,
		SSL_kRSA,
		SSL_aRSA,
		SSL_AES256GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d1368 12
a1379 12
		1,
		TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256,
		TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256,
		SSL_kEDH,
		SSL_aRSA,
		SSL_AES128GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d1384 12
a1395 12
		1,
		TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384,
		TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384,
		SSL_kEDH,
		SSL_aRSA,
		SSL_AES256GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d1400 12
a1411 12
		0,
		TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256,
		TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256,
		SSL_kDHr,
		SSL_aDH,
		SSL_AES128GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d1416 12
a1427 12
		0,
		TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384,
		TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384,
		SSL_kDHr,
		SSL_aDH,
		SSL_AES256GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d1432 12
a1443 12
		1,
		TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256,
		TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256,
		SSL_kEDH,
		SSL_aDSS,
		SSL_AES128GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d1448 12
a1459 12
		1,
		TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384,
		TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384,
		SSL_kEDH,
		SSL_aDSS,
		SSL_AES256GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d1464 12
a1475 12
		0,
		TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256,
		TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256,
		SSL_kDHd,
		SSL_aDH,
		SSL_AES128GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d1480 12
a1491 12
		0,
		TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384,
		TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384,
		SSL_kDHd,
		SSL_aDH,
		SSL_AES256GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d1496 12
a1507 12
		1,
		TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256,
		TLS1_CK_ADH_WITH_AES_128_GCM_SHA256,
		SSL_kEDH,
		SSL_aNULL,
		SSL_AES128GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d1512 12
a1523 12
		1,
		TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384,
		TLS1_CK_ADH_WITH_AES_256_GCM_SHA384,
		SSL_kEDH,
		SSL_aNULL,
		SSL_AES256GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d1529 12
a1540 12
		1,
		TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA,
		TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA,
		SSL_kECDHe,
		SSL_aECDH,
		SSL_eNULL,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		0,
		0,
d1545 12
a1556 12
		1,
		TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA,
		TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA,
		SSL_kECDHe,
		SSL_aECDH,
		SSL_RC4,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1561 12
a1572 12
		1,
		TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
		TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
		SSL_kECDHe,
		SSL_aECDH,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
d1577 12
a1588 12
		1,
		TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
		TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
		SSL_kECDHe,
		SSL_aECDH,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1593 12
a1604 12
		1,
		TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
		TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
		SSL_kECDHe,
		SSL_aECDH,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1609 12
a1620 12
		1,
		TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA,
		TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA,
		SSL_kEECDH,
		SSL_aECDSA,
		SSL_eNULL,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		0,
		0,
d1625 12
a1636 12
		1,
		TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA,
		TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA,
		SSL_kEECDH,
		SSL_aECDSA,
		SSL_RC4,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1641 12
a1652 12
		1,
		TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
		TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
		SSL_kEECDH,
		SSL_aECDSA,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
d1657 12
a1668 12
		1,
		TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		SSL_kEECDH,
		SSL_aECDSA,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1673 12
a1684 12
		1,
		TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		SSL_kEECDH,
		SSL_aECDSA,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1689 12
a1700 12
		1,
		TLS1_TXT_ECDH_RSA_WITH_NULL_SHA,
		TLS1_CK_ECDH_RSA_WITH_NULL_SHA,
		SSL_kECDHr,
		SSL_aECDH,
		SSL_eNULL,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		0,
		0,
d1705 12
a1716 12
		1,
		TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA,
		TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA,
		SSL_kECDHr,
		SSL_aECDH,
		SSL_RC4,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1721 12
a1732 12
		1,
		TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA,
		TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA,
		SSL_kECDHr,
		SSL_aECDH,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
d1737 12
a1748 12
		1,
		TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA,
		TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA,
		SSL_kECDHr,
		SSL_aECDH,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1753 12
a1764 12
		1,
		TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA,
		TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA,
		SSL_kECDHr,
		SSL_aECDH,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1769 12
a1780 12
		1,
		TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA,
		TLS1_CK_ECDHE_RSA_WITH_NULL_SHA,
		SSL_kEECDH,
		SSL_aRSA,
		SSL_eNULL,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		0,
		0,
d1785 12
a1796 12
		1,
		TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA,
		TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA,
		SSL_kEECDH,
		SSL_aRSA,
		SSL_RC4,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1801 12
a1812 12
		1,
		TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
		TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
		SSL_kEECDH,
		SSL_aRSA,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
d1817 12
a1828 12
		1,
		TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		SSL_kEECDH,
		SSL_aRSA,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1833 12
a1844 12
		1,
		TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		SSL_kEECDH,
		SSL_aRSA,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1849 12
a1860 12
		1,
		TLS1_TXT_ECDH_anon_WITH_NULL_SHA,
		TLS1_CK_ECDH_anon_WITH_NULL_SHA,
		SSL_kEECDH,
		SSL_aNULL,
		SSL_eNULL,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		0,
		0,
d1865 12
a1876 12
		1,
		TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA,
		TLS1_CK_ECDH_anon_WITH_RC4_128_SHA,
		SSL_kEECDH,
		SSL_aNULL,
		SSL_RC4,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1881 12
a1892 12
		1,
		TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA,
		TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA,
		SSL_kEECDH,
		SSL_aNULL,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
d1897 12
a1908 12
		1,
		TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA,
		TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA,
		SSL_kEECDH,
		SSL_aNULL,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
d1913 12
a1924 12
		1,
		TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA,
		TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA,
		SSL_kEECDH,
		SSL_aNULL,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
d1934 12
a1945 12
		1,
		TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256,
		TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256,
		SSL_kEECDH,
		SSL_aECDSA,
		SSL_AES128,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d1950 12
a1961 12
		1,
		TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384,
		TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384,
		SSL_kEECDH,
		SSL_aECDSA,
		SSL_AES256,
		SSL_SHA384,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d1966 12
a1977 12
		1,
		TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256,
		TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256,
		SSL_kECDHe,
		SSL_aECDH,
		SSL_AES128,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d1982 12
a1993 12
		1,
		TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384,
		TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384,
		SSL_kECDHe,
		SSL_aECDH,
		SSL_AES256,
		SSL_SHA384,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d1998 12
a2009 12
		1,
		TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256,
		TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256,
		SSL_kEECDH,
		SSL_aRSA,
		SSL_AES128,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d2014 12
a2025 12
		1,
		TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384,
		TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384,
		SSL_kEECDH,
		SSL_aRSA,
		SSL_AES256,
		SSL_SHA384,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d2030 12
a2041 12
		1,
		TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256,
		TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256,
		SSL_kECDHr,
		SSL_aECDH,
		SSL_AES128,
		SSL_SHA256,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d2046 12
a2057 12
		1,
		TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384,
		TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384,
		SSL_kECDHr,
		SSL_aECDH,
		SSL_AES256,
		SSL_SHA384,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d2064 12
a2075 12
		1,
		TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
		TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
		SSL_kEECDH,
		SSL_aECDSA,
		SSL_AES128GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d2080 12
a2091 12
		1,
		TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
		TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
		SSL_kEECDH,
		SSL_aECDSA,
		SSL_AES256GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d2096 12
a2107 12
		1,
		TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
		TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
		SSL_kECDHe,
		SSL_aECDH,
		SSL_AES128GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d2112 12
a2123 12
		1,
		TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
		TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
		SSL_kECDHe,
		SSL_aECDH,
		SSL_AES256GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d2128 12
a2139 12
		1,
		TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
		TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
		SSL_kEECDH,
		SSL_aRSA,
		SSL_AES128GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d2144 12
a2155 12
		1,
		TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
		TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
		SSL_kEECDH,
		SSL_aRSA,
		SSL_AES256GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d2160 12
a2171 12
		1,
		TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256,
		TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256,
		SSL_kECDHr,
		SSL_aECDH,
		SSL_AES128GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
		128,
		128,
d2176 12
a2187 12
		1,
		TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384,
		TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384,
		SSL_kECDHr,
		SSL_aECDH,
		SSL_AES256GCM,
		SSL_AEAD,
		SSL_TLSV1_2,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
		256,
		256,
d2194 1
a2194 1
/* Cipher FF00 */
d2196 55
a2250 54
		1,
		"GOST-MD5",
		0x0300ff00,
		SSL_kRSA,
		SSL_aRSA,
		SSL_eGOST2814789CNT,
		SSL_MD5,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},
	{
		1,
		"GOST-GOST94",
		0x0300ff01,
		SSL_kRSA,
		SSL_aRSA,
		SSL_eGOST2814789CNT,
		SSL_GOST94,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256
	},
	{
		1,
		"GOST-GOST89MAC",
		0x0300ff02,
		SSL_kRSA,
		SSL_aRSA,
		SSL_eGOST2814789CNT,
		SSL_GOST89MAC,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256
	},
	{
		1,
		"GOST-GOST89STREAM",
		0x0300ff03,
		SSL_kRSA,
		SSL_aRSA,
		SSL_eGOST2814789CNT,
		SSL_GOST89MAC,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF|TLS1_STREAM_MAC,
		256,
		256
d2253 1
a2253 2

/* end of list */
@


1.39
log
@Stop including kssl_lcl.h and nuke it from orbit - it is a no-op now.

ok beck@@ miod@@
@
text
@d169 1
a169 1
OPENSSL_GLOBAL SSL_CIPHER ssl3_ciphers[] = {
@


1.38
log
@KSSL is dead... nuke KSSL_DEBUG from orbit.

ok beck@@ miod@@
@
text
@a153 1
#include "kssl_lcl.h"
@


1.37
log
@deleted seed some time ago
@
text
@a3083 3
#ifdef KSSL_DEBUG
/*		printf("ssl3_choose_cipher %d alg= %lx\n", i,c->algorithms);*/
#endif    /* KSSL_DEBUG */
@


1.36
log
@Remove SRP and Kerberos support from libssl. These are complex protocols
all on their own and we can't effectively maintain them without using them,
which we don't. If the need arises, the code can be resurrected.
@
text
@a1329 101
#ifndef OPENSSL_NO_SEED
	/* SEED ciphersuites from RFC4162 */

	/* Cipher 96 */
	{
		1,
		TLS1_TXT_RSA_WITH_SEED_SHA,
		TLS1_CK_RSA_WITH_SEED_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_SEED,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher 97 */
	{
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_DSS_WITH_SEED_SHA,
		TLS1_CK_DH_DSS_WITH_SEED_SHA,
		SSL_kDHd,
		SSL_aDH,
		SSL_SEED,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher 98 */
	{
		0, /* not implemented (non-ephemeral DH) */
		TLS1_TXT_DH_RSA_WITH_SEED_SHA,
		TLS1_CK_DH_RSA_WITH_SEED_SHA,
		SSL_kDHr,
		SSL_aDH,
		SSL_SEED,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher 99 */
	{
		1,
		TLS1_TXT_DHE_DSS_WITH_SEED_SHA,
		TLS1_CK_DHE_DSS_WITH_SEED_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_SEED,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher 9A */
	{
		1,
		TLS1_TXT_DHE_RSA_WITH_SEED_SHA,
		TLS1_CK_DHE_RSA_WITH_SEED_SHA,
		SSL_kEDH,
		SSL_aRSA,
		SSL_SEED,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher 9B */
	{
		1,
		TLS1_TXT_ADH_WITH_SEED_SHA,
		TLS1_CK_ADH_WITH_SEED_SHA,
		SSL_kEDH,
		SSL_aNULL,
		SSL_SEED,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

#endif /* OPENSSL_NO_SEED */

@


1.35
log
@More KNF, things that couldn't be verified with md5(1), and some whitespace
I missed on the first go around.
@
text
@a607 226
#ifndef OPENSSL_NO_KRB5
/* The Kerberos ciphers*/
/* Cipher 1E */
	{
		1,
		SSL3_TXT_KRB5_DES_64_CBC_SHA,
		SSL3_CK_KRB5_DES_64_CBC_SHA,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_LOW,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		56,
	},

/* Cipher 1F */
	{
		1,
		SSL3_TXT_KRB5_DES_192_CBC3_SHA,
		SSL3_CK_KRB5_DES_192_CBC3_SHA,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_3DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

/* Cipher 20 */
	{
		1,
		SSL3_TXT_KRB5_RC4_128_SHA,
		SSL3_CK_KRB5_RC4_128_SHA,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_RC4,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

/* Cipher 21 */
	{
		1,
		SSL3_TXT_KRB5_IDEA_128_CBC_SHA,
		SSL3_CK_KRB5_IDEA_128_CBC_SHA,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_IDEA,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

/* Cipher 22 */
	{
		1,
		SSL3_TXT_KRB5_DES_64_CBC_MD5,
		SSL3_CK_KRB5_DES_64_CBC_MD5,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_DES,
		SSL_MD5,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_LOW,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		56,
	},

/* Cipher 23 */
	{
		1,
		SSL3_TXT_KRB5_DES_192_CBC3_MD5,
		SSL3_CK_KRB5_DES_192_CBC3_MD5,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_3DES,
		SSL_MD5,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

/* Cipher 24 */
	{
		1,
		SSL3_TXT_KRB5_RC4_128_MD5,
		SSL3_CK_KRB5_RC4_128_MD5,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_RC4,
		SSL_MD5,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

/* Cipher 25 */
	{
		1,
		SSL3_TXT_KRB5_IDEA_128_CBC_MD5,
		SSL3_CK_KRB5_IDEA_128_CBC_MD5,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_IDEA,
		SSL_MD5,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

/* Cipher 26 */
	{
		1,
		SSL3_TXT_KRB5_DES_40_CBC_SHA,
		SSL3_CK_KRB5_DES_40_CBC_SHA,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_DES,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		56,
	},

/* Cipher 27 */
	{
		1,
		SSL3_TXT_KRB5_RC2_40_CBC_SHA,
		SSL3_CK_KRB5_RC2_40_CBC_SHA,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_RC2,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		128,
	},

/* Cipher 28 */
	{
		1,
		SSL3_TXT_KRB5_RC4_40_SHA,
		SSL3_CK_KRB5_RC4_40_SHA,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_RC4,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		128,
	},

/* Cipher 29 */
	{
		1,
		SSL3_TXT_KRB5_DES_40_CBC_MD5,
		SSL3_CK_KRB5_DES_40_CBC_MD5,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_DES,
		SSL_MD5,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		56,
	},

/* Cipher 2A */
	{
		1,
		SSL3_TXT_KRB5_RC2_40_CBC_MD5,
		SSL3_CK_KRB5_RC2_40_CBC_MD5,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_RC2,
		SSL_MD5,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		128,
	},

/* Cipher 2B */
	{
		1,
		SSL3_TXT_KRB5_RC4_40_MD5,
		SSL3_CK_KRB5_RC4_40_MD5,
		SSL_kKRB5,
		SSL_aKRB5,
		SSL_RC4,
		SSL_MD5,
		SSL_SSLV3,
		SSL_EXPORT|SSL_EXP40,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		40,
		128,
	},
#endif	/* OPENSSL_NO_KRB5 */
a2026 145
#ifndef OPENSSL_NO_SRP
	/* Cipher C01A */
	{
		1,
		TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
		TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
		SSL_kSRP,
		SSL_aNULL,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

	/* Cipher C01B */
	{
		1,
		TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
		TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
		SSL_kSRP,
		SSL_aRSA,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

	/* Cipher C01C */
	{
		1,
		TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
		TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
		SSL_kSRP,
		SSL_aDSS,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

	/* Cipher C01D */
	{
		1,
		TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA,
		TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA,
		SSL_kSRP,
		SSL_aNULL,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher C01E */
	{
		1,
		TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
		TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
		SSL_kSRP,
		SSL_aRSA,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher C01F */
	{
		1,
		TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
		TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
		SSL_kSRP,
		SSL_aDSS,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher C020 */
	{
		1,
		TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA,
		TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA,
		SSL_kSRP,
		SSL_aNULL,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},

	/* Cipher C021 */
	{
		1,
		TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
		TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
		SSL_kSRP,
		SSL_aRSA,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},

	/* Cipher C022 */
	{
		1,
		TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
		TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
		SSL_kSRP,
		SSL_aDSS,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},
#endif  /* OPENSSL_NO_SRP */
a2418 3
#ifndef OPENSSL_NO_SRP
	SSL_SRP_CTX_init(s);
#endif
a2460 3
#ifndef OPENSSL_NO_SRP
	SSL_SRP_CTX_free(s);
#endif
a2544 7
#ifndef OPENSSL_NO_SRP
static char *
srp_password_from_info_cb(SSL *s, void *arg)
{
	return BUF_strdup(s->srp_ctx.info);
}
#endif
a2998 34
#ifndef OPENSSL_NO_SRP
	case SSL_CTRL_SET_TLS_EXT_SRP_USERNAME:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		if (ctx->srp_ctx.login != NULL)
			free(ctx->srp_ctx.login);
		ctx->srp_ctx.login = NULL;
		if (parg == NULL)
			break;
		if (strlen((const char *)parg) > 255 ||
		    strlen((const char *)parg) < 1) {
			SSLerr(SSL_F_SSL3_CTX_CTRL,
			    SSL_R_INVALID_SRP_USERNAME);
			return 0;
		}
		if ((ctx->srp_ctx.login = BUF_strdup((char *)parg)) == NULL) {
			SSLerr(SSL_F_SSL3_CTX_CTRL,
			    ERR_R_INTERNAL_ERROR);
			return 0;
		}
		break;
	case SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD:
		ctx->srp_ctx.SRP_give_srp_client_pwd_callback =
		    srp_password_from_info_cb;
		ctx->srp_ctx.info = parg;
		break;
	case SSL_CTRL_SET_SRP_ARG:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.SRP_cb_arg = parg;
		break;

	case SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH:
		ctx->srp_ctx.strength = larg;
		break;
#endif
a3075 17
#ifndef OPENSSL_NO_SRP
	case SSL_CTRL_SET_SRP_VERIFY_PARAM_CB:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.SRP_verify_param_callback =
		    (int (*)(SSL *, void *))fp;
		break;
	case SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.TLS_ext_srp_username_callback =
		    (int (*)(SSL *, int *, void *))fp;
		break;
	case SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.SRP_give_srp_client_pwd_callback =
		    (char *(*)(SSL *, void *))fp;
		break;
#endif
a3183 4
#ifndef OPENSSL_NO_SRP
		mask_k = cert->mask_k | s->srp_ctx.srp_Mask;
		emask_k = cert->export_mask_k | s->srp_ctx.srp_Mask;
#endif
a3191 6
#ifndef OPENSSL_NO_KRB5
		if (alg_k & SSL_kKRB5) {
			if (!kssl_keytab_is_available(s->kssl_ctx) )
				continue;
		}
#endif /* OPENSSL_NO_KRB5 */
@


1.34
log
@KNF
@
text
@d2965 3
a2967 3
		   ((s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL) ||
		   (EVP_PKEY_size(s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey)
		   > (512 / 8))))
d3116 6
a3121 4
		if ((size_t)larg == 0)
			s->tlsext_opaque_prf_input = malloc(1); /* dummy byte just to get non-NULL */
		else
			s->tlsext_opaque_prf_input = BUF_memdup(parg, (size_t)larg);
@


1.33
log
@more malloc/realloc/calloc cleanups; ok beck kettenis
@
text
@d2746 5
a2750 3
	/* 2 hours, the 24 hours mentioned in the SSLv3 spec
	 * is way too long for http, the cache would over fill */
	return (60*60*2);
d2774 2
a2775 1
	return (s->s3->rrec.type == SSL3_RT_APPLICATION_DATA) ? s->s3->rrec.length : 0;
d2781 1
a2781 1
	SSL3_STATE *s3;
d2846 3
a2848 3
	unsigned char *rp, *wp;
	size_t rlen, wlen;
	int init_extra;
d2938 2
a2939 1
			SSLerr(SSL_F_SSL3_CTRL, ERR_R_MALLOC_FAILURE);
d2966 2
a2967 1
		   (EVP_PKEY_size(s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey) > (512 / 8))))
d2974 2
a2975 1
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_PASSED_NULL_PARAMETER);
d2979 2
a2980 1
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_RSA_LIB);
d2991 2
a2992 1
			SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d3001 2
a3002 1
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_PASSED_NULL_PARAMETER);
d3006 2
a3007 1
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_DH_LIB);
d3013 2
a3014 1
					SSLerr(SSL_F_SSL3_CTRL, ERR_R_DH_LIB);
d3026 2
a3027 1
			SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d3038 2
a3039 1
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_PASSED_NULL_PARAMETER);
d3043 2
a3044 1
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_ECDH_LIB);
d3051 2
a3052 1
					SSLerr(SSL_F_SSL3_CTRL, ERR_R_ECDH_LIB);
d3064 2
a3065 1
			SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d3081 2
a3082 1
				SSLerr(SSL_F_SSL3_CTRL, SSL_R_SSL3_EXT_INVALID_SERVERNAME);
d3085 4
a3088 2
			if ((s->tlsext_hostname = BUF_strdup((char *)parg)) == NULL) {
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_INTERNAL_ERROR);
d3092 2
a3093 1
			SSLerr(SSL_F_SSL3_CTRL, SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE);
d3105 7
a3111 3
			/* actual internal limit is 2^16 for the complete hello message
		         * (including the cert chain and everything) */
			SSLerr(SSL_F_SSL3_CTRL, SSL_R_OPAQUE_PRF_INPUT_TOO_LONG);
d3175 1
a3175 1
	int ret = 0;
d3179 2
a3180 1
			SSLerr(SSL_F_SSL3_CALLBACK_CTRL, ERR_R_MALLOC_FAILURE);
d3201 2
a3202 1
			s->cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;
d3209 1
a3209 1
		unsigned char *, int, void *))fp;
d3221 1
a3221 1
	CERT *cert;
d3229 2
a3230 1
		    (EVP_PKEY_size(cert->pkeys[SSL_PKEY_RSA_ENC].privatekey) > (512 / 8))))
d3249 2
a3250 1
				SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_RSA_LIB);
d3262 2
a3263 1
			SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d3274 2
a3275 1
				SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_DH_LIB);
d3280 2
a3281 1
					SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_DH_LIB);
d3294 2
a3295 1
			SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d3306 2
a3307 1
				SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_ECDH_LIB);
d3312 2
a3313 1
				SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_EC_LIB);
d3319 2
a3320 1
					SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_ECDH_LIB);
d3334 2
a3335 1
			SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
d3351 2
a3352 1
				SSLerr(SSL_F_SSL3_CTX_CTRL, SSL_R_INVALID_TICKET_KEYS_LENGTH);
d3357 2
a3358 1
				memcpy(ctx->tlsext_tick_hmac_key, keys + 16, 16);
d3362 4
a3365 2
				memcpy(keys + 16, ctx->tlsext_tick_hmac_key, 16);
				memcpy(keys + 32, ctx->tlsext_tick_aes_key, 16);
d3389 4
a3392 2
		if (strlen((const char *)parg) > 255 || strlen((const char *)parg) < 1) {
			SSLerr(SSL_F_SSL3_CTX_CTRL, SSL_R_INVALID_SRP_USERNAME);
d3396 2
a3397 1
			SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_INTERNAL_ERROR);
d3402 2
a3403 1
		ctx->srp_ctx.SRP_give_srp_client_pwd_callback = srp_password_from_info_cb;
d3446 1
a3446 1
	CERT *cert;
d3472 2
a3473 1
		ctx->tlsext_servername_callback = (int (*)(SSL *, int *, void *))fp;
d3478 2
a3479 1
		ctx->tlsext_opaque_prf_input_callback = (int (*)(SSL *, void *, size_t, void *))fp;
d3521 3
a3523 3
	SSL_CIPHER c;
	const SSL_CIPHER *cp;
	unsigned long id;
d3541 1
a3541 1
	long l;
d3556 3
a3558 3
	SSL_CIPHER *c, *ret = NULL;
	STACK_OF(SSL_CIPHER) *prio, *allow;
	int i, ii, ok;
d3571 2
a3572 1
	/* Do not set the compare functions, because this may lead to a
d3582 2
a3583 1
	printf("Server has %d from %p:\n", sk_SSL_CIPHER_num(srvr), (void *)srvr);
d3588 2
a3589 1
	printf("Client sent %d from %p:\n", sk_SSL_CIPHER_num(clnt), (void *)clnt);
d3644 3
a3646 2
			printf("%d:[%08lX:%08lX:%08lX:%08lX]%p:%s (export)\n", ok, alg_k, alg_a, emask_k, emask_a,
			(void *)c, c->name);
d3651 3
a3653 2
			printf("%d:[%08lX:%08lX:%08lX:%08lX]%p:%s\n", ok, alg_k, alg_a, mask_k, mask_a,(void *)c,
			c->name);
d3660 4
a3663 1
		/* if we are considering an ECC cipher suite that uses our certificate */
d3667 6
a3672 2
		/* and the client specified a Supported Point Formats extension */
		&& ((s->session->tlsext_ecpointformatlist_length > 0) && (s->session->tlsext_ecpointformatlist != NULL))
d3686 5
a3690 2
			/* if our certificate's curve is over a field type that the client does not support
			 * then do not allow this cipher suite to be negotiated */
d3714 4
a3717 1
		/* if we are considering an ECC cipher suite that uses our certificate */
d3756 4
a3759 1
		/* if we are considering an ECC cipher suite that uses an ephemeral EC key */
d3802 2
a3803 1
			if ((alg_k & SSL_kEECDH) && (alg_a & SSL_aECDSA) && s->s3->is_probably_safari) {
d3819 2
a3820 2
	int ret = 0;
	unsigned long alg_k;
d3855 2
a3856 1
	/* ECDSA certs can be used with RSA cipher suites as well 
d3869 1
a3869 1
	int ret;
d3871 4
a3874 2
	/* Don't do anything much if we have not done the handshake or
	 * we don't want to send messages :-) */
d3885 4
a3888 2
		/* our shutdown alert has been sent now, and if it still needs
	 	 * to be written, s->s3->alert_dispatch will be true */
d3896 2
a3897 1
			/* we only get to return -1 here the 2nd/Nth
d3900 2
a3901 1
			 * return WANT_WRITE */
d3923 1
a3923 1
	int ret, n;
d3935 2
a3936 1
	/* This is an experimental flag that sends the
d3939 2
a3940 1
	 * session-id reuse */
d3946 1
a3946 1
			buf, len);
d3967 1
a3967 1
		buf, len);
d3978 1
a3978 1
	int ret;
d3984 2
a3985 1
	ret = s->method->ssl_read_bytes(s, SSL3_RT_APPLICATION_DATA, buf, len, peek);
d3987 2
a3988 1
		/* ssl3_read_bytes decided to call s->handshake_func, which
d3992 2
a3993 1
		 * handshake processing and try to read application data again. */
d3995 2
a3996 1
		ret = s->method->ssl_read_bytes(s, SSL3_RT_APPLICATION_DATA, buf, len, peek);
d4032 1
a4032 1
	int ret = 0;
d4052 2
a4053 1
/* If we are using TLS v1.2 or later and default SHA1+MD5 algorithms switch
d4059 1
a4059 1
	long alg2 = s->s3->tmp.new_cipher->algorithm2;
@


1.32
log
@More KNF and style consistency tweaks
@
text
@d2780 1
a2780 1
	if ((s3 = malloc(sizeof *s3)) == NULL)
a2781 1
	memset(s3, 0, sizeof *s3);
@


1.31
log
@spacing
@
text
@d2757 2
a2758 2
const SSL_CIPHER
*ssl3_get_cipher(unsigned int u)
d3473 2
a3474 2
const SSL_CIPHER
*ssl3_get_cipher_by_char(const unsigned char *p)
d3957 5
a3961 4
/*
if we are the server, and we have sent a 'RENEGOTIATE' message, we
need to go to SSL_ST_ACCEPT.
*/
@


1.30
log
@whack a bunch of disabled code. ok beck lteo
@
text
@d2780 3
a2782 2
	if ((s3 = malloc(sizeof *s3)) == NULL) goto err;
		memset(s3, 0, sizeof *s3);
d3085 3
a3087 3
		if (larg > 12288) /* actual internal limit is 2^16 for the complete hello message
		                   * (including the cert chain and everything) */
		{
d3204 2
a3205 3
		    (EVP_PKEY_size(cert->pkeys[SSL_PKEY_RSA_ENC].privatekey) > (512 / 8)))
		)
		return (1);
d3978 1
d3980 2
a3981 2
		alg2 == (SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF))
	return SSL_HANDSHAKE_MAC_SHA256 | TLS1_PRF_SHA256;
@


1.29
log
@always build in RSA and DSA. ok deraadt miod
@
text
@a607 52

/* Fortezza ciphersuite from SSL 3.0 spec */
#if 0
/* Cipher 1C */
	{
		0,
		SSL3_TXT_FZA_DMS_NULL_SHA,
		SSL3_CK_FZA_DMS_NULL_SHA,
		SSL_kFZA,
		SSL_aFZA,
		SSL_eNULL,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_STRONG_NONE,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		0,
		0,
	},

/* Cipher 1D */
	{
		0,
		SSL3_TXT_FZA_DMS_FZA_SHA,
		SSL3_CK_FZA_DMS_FZA_SHA,
		SSL_kFZA,
		SSL_aFZA,
		SSL_eFZA,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_STRONG_NONE,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		0,
		0,
	},

/* Cipher 1E */
	{
		0,
		SSL3_TXT_FZA_DMS_RC4_SHA,
		SSL3_CK_FZA_DMS_RC4_SHA,
		SSL_kFZA,
		SSL_aFZA,
		SSL_RC4,
		SSL_SHA1,
		SSL_SSLV3,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},
#endif

a1217 117

#if TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
	/* New TLS Export CipherSuites from expired ID */
#if 0
	/* Cipher 60 */
	{
		1,
		TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5,
		TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC4,
		SSL_MD5,
		SSL_TLSV1,
		SSL_EXPORT|SSL_EXP56,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		128,
	},

	/* Cipher 61 */
	{
		1,
		TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5,
		TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC2,
		SSL_MD5,
		SSL_TLSV1,
		SSL_EXPORT|SSL_EXP56,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		128,
	},
#endif

	/* Cipher 62 */
	{
		1,
		TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA,
		TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_EXPORT|SSL_EXP56,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		56,
	},

	/* Cipher 63 */
	{
		1,
		TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
		TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_EXPORT|SSL_EXP56,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		56,
	},

	/* Cipher 64 */
	{
		1,
		TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA,
		TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC4,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_EXPORT|SSL_EXP56,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		128,
	},

	/* Cipher 65 */
	{
		1,
		TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
		TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_RC4,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_EXPORT|SSL_EXP56,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		56,
		128,
	},

	/* Cipher 66 */
	{
		1,
		TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA,
		TLS1_CK_DHE_DSS_WITH_RC4_128_SHA,
		SSL_kEDH,
		SSL_aDSS,
		SSL_RC4,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_MEDIUM,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},
#endif
@


1.28
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d3101 2
a3102 11
#if !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_RSA)
	if (
#ifndef OPENSSL_NO_RSA
	cmd == SSL_CTRL_SET_TMP_RSA ||
	cmd == SSL_CTRL_SET_TMP_RSA_CB ||
#endif
#ifndef OPENSSL_NO_DSA
	cmd == SSL_CTRL_SET_TMP_DH ||
	cmd == SSL_CTRL_SET_TMP_DH_CB ||
#endif
	0) {
a3107 1
#endif
a3127 1
#ifndef OPENSSL_NO_RSA
a3156 1
#endif
d3322 1
a3322 9
#if !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_RSA)
	if (
#ifndef OPENSSL_NO_RSA
	cmd == SSL_CTRL_SET_TMP_RSA_CB ||
#endif
#ifndef OPENSSL_NO_DSA
	cmd == SSL_CTRL_SET_TMP_DH_CB ||
#endif
	0) {
a3327 1
#endif
a3329 1
#ifndef OPENSSL_NO_RSA
a3334 1
#endif
a3368 1
#ifndef OPENSSL_NO_RSA
a3407 1
#endif
a3576 1
#ifndef OPENSSL_NO_RSA
a3581 1
#endif
a3937 1
#  ifndef OPENSSL_NO_RSA
a3938 2
#  endif
#  ifndef OPENSSL_NO_DSA
a3939 1
#  endif
a3942 1
#  ifndef OPENSSL_NO_RSA
a3943 2
#  endif
#  ifndef OPENSSL_NO_DSA
a3944 1
#  endif
a3946 1
#ifndef OPENSSL_NO_RSA
a3947 2
#endif
#ifndef OPENSSL_NO_DSA
a3948 1
#endif
@


1.27
log
@add back SRP. i was being too greedy.
@
text
@d2949 1
a2949 1
	if ((s3 = OPENSSL_malloc(sizeof *s3)) == NULL) goto err;
d2973 1
a2973 1
		OPENSSL_free(s->s3->client_opaque_prf_input);
d2975 1
a2975 1
		OPENSSL_free(s->s3->server_opaque_prf_input);
d2984 1
a2984 1
		OPENSSL_free(s->s3->rrec.comp);
d3005 1
a3005 1
	OPENSSL_free(s->s3);
d3018 1
a3018 1
		OPENSSL_free(s->s3->client_opaque_prf_input);
d3021 1
a3021 1
		OPENSSL_free(s->s3->server_opaque_prf_input);
d3030 1
a3030 1
		OPENSSL_free(s->s3->rrec.comp);
d3081 1
a3081 1
		OPENSSL_free(s->next_proto_negotiated);
d3239 1
a3239 1
				OPENSSL_free(s->tlsext_hostname);
d3272 1
a3272 1
			OPENSSL_free(s->tlsext_opaque_prf_input);
d3274 1
a3274 1
			s->tlsext_opaque_prf_input = OPENSSL_malloc(1); /* dummy byte just to get non-NULL */
d3316 1
a3316 1
			OPENSSL_free(s->tlsext_ocsp_resp);
d3540 1
a3540 1
			OPENSSL_free(ctx->srp_ctx.login);
@


1.26
log
@disentangle SRP code from TLS
@
text
@d2422 145
d2956 3
d3001 3
d3088 7
d3536 30
d3643 17
d3765 4
@


1.25
log
@make OPENSSL_NO_HEARTBLEED the default and only option. ok deraadt miod
@
text
@a2421 145
#ifndef OPENSSL_NO_SRP
	/* Cipher C01A */
	{
		1,
		TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
		TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
		SSL_kSRP,
		SSL_aNULL,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

	/* Cipher C01B */
	{
		1,
		TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
		TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
		SSL_kSRP,
		SSL_aRSA,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

	/* Cipher C01C */
	{
		1,
		TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
		TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
		SSL_kSRP,
		SSL_aDSS,
		SSL_3DES,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		168,
		168,
	},

	/* Cipher C01D */
	{
		1,
		TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA,
		TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA,
		SSL_kSRP,
		SSL_aNULL,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher C01E */
	{
		1,
		TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
		TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
		SSL_kSRP,
		SSL_aRSA,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher C01F */
	{
		1,
		TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
		TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
		SSL_kSRP,
		SSL_aDSS,
		SSL_AES128,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		128,
		128,
	},

	/* Cipher C020 */
	{
		1,
		TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA,
		TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA,
		SSL_kSRP,
		SSL_aNULL,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},

	/* Cipher C021 */
	{
		1,
		TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
		TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
		SSL_kSRP,
		SSL_aRSA,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},

	/* Cipher C022 */
	{
		1,
		TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
		TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
		SSL_kSRP,
		SSL_aDSS,
		SSL_AES256,
		SSL_SHA1,
		SSL_TLSV1,
		SSL_NOT_EXP|SSL_HIGH,
		SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
		256,
		256,
	},
#endif  /* OPENSSL_NO_SRP */
a2810 3
#ifndef OPENSSL_NO_SRP
	SSL_SRP_CTX_init(s);
#endif
a2852 3
#ifndef OPENSSL_NO_SRP
	SSL_SRP_CTX_free(s);
#endif
a2936 7
#ifndef OPENSSL_NO_SRP
static char *
srp_password_from_info_cb(SSL *s, void *arg)
{
	return BUF_strdup(s->srp_ctx.info);
}
#endif
a3377 30
#ifndef OPENSSL_NO_SRP
	case SSL_CTRL_SET_TLS_EXT_SRP_USERNAME:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		if (ctx->srp_ctx.login != NULL)
			OPENSSL_free(ctx->srp_ctx.login);
		ctx->srp_ctx.login = NULL;
		if (parg == NULL)
			break;
		if (strlen((const char *)parg) > 255 || strlen((const char *)parg) < 1) {
			SSLerr(SSL_F_SSL3_CTX_CTRL, SSL_R_INVALID_SRP_USERNAME);
			return 0;
		}
		if ((ctx->srp_ctx.login = BUF_strdup((char *)parg)) == NULL) {
			SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_INTERNAL_ERROR);
			return 0;
		}
		break;
	case SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD:
		ctx->srp_ctx.SRP_give_srp_client_pwd_callback = srp_password_from_info_cb;
		ctx->srp_ctx.info = parg;
		break;
	case SSL_CTRL_SET_SRP_ARG:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.SRP_cb_arg = parg;
		break;

	case SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH:
		ctx->srp_ctx.strength = larg;
		break;
#endif
a3454 17
#ifndef OPENSSL_NO_SRP
	case SSL_CTRL_SET_SRP_VERIFY_PARAM_CB:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.SRP_verify_param_callback =
		    (int (*)(SSL *, void *))fp;
		break;
	case SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.TLS_ext_srp_username_callback =
		    (int (*)(SSL *, int *, void *))fp;
		break;
	case SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.SRP_give_srp_client_pwd_callback =
		    (char *(*)(SSL *, void *))fp;
		break;
#endif
a3559 4
#ifndef OPENSSL_NO_SRP
		mask_k = cert->mask_k | s->srp_ctx.srp_Mask;
		emask_k = cert->export_mask_k | s->srp_ctx.srp_Mask;
#endif
@


1.24
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a3321 21
#ifndef OPENSSL_NO_HEARTBEATS
	case SSL_CTRL_TLS_EXT_SEND_HEARTBEAT:
		if (SSL_version(s) == DTLS1_VERSION || SSL_version(s) == DTLS1_BAD_VER)
			ret = dtls1_heartbeat(s);
		else
			ret = tls1_heartbeat(s);
		break;

	case SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING:
		ret = s->tlsext_hb_pending;
		break;

	case SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS:
		if (larg)
			s->tlsext_heartbeat |= SSL_TLSEXT_HB_DONT_RECV_REQUESTS;
		else
			s->tlsext_heartbeat &= ~SSL_TLSEXT_HB_DONT_RECV_REQUESTS;
		ret = 1;
		break;
#endif

@


1.23
log
@Do not include "e_os.h" anymore.  Simply pull in the necessary headers.

ok miod@@, deraadt@@
@
text
@d167 1
a167 1
#define SSL3_NUM_CIPHERS	(sizeof(ssl3_ciphers)/sizeof(SSL_CIPHER))
d170 1
a170 1
OPENSSL_GLOBAL SSL_CIPHER ssl3_ciphers[]={
d175 12
a186 12
	1,
	SSL3_TXT_RSA_NULL_MD5,
	SSL3_CK_RSA_NULL_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eNULL,
	SSL_MD5,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d191 12
a202 12
	1,
	SSL3_TXT_RSA_NULL_SHA,
	SSL3_CK_RSA_NULL_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eNULL,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d207 12
a218 12
	1,
	SSL3_TXT_RSA_RC4_40_MD5,
	SSL3_CK_RSA_RC4_40_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	128,
d223 12
a234 12
	1,
	SSL3_TXT_RSA_RC4_128_MD5,
	SSL3_CK_RSA_RC4_128_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d239 12
a250 12
	1,
	SSL3_TXT_RSA_RC4_128_SHA,
	SSL3_CK_RSA_RC4_128_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d255 12
a266 12
	1,
	SSL3_TXT_RSA_RC2_40_MD5,
	SSL3_CK_RSA_RC2_40_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC2,
	SSL_MD5,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	128,
d272 12
a283 12
	1,
	SSL3_TXT_RSA_IDEA_128_SHA,
	SSL3_CK_RSA_IDEA_128_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_IDEA,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d289 12
a300 12
	1,
	SSL3_TXT_RSA_DES_40_CBC_SHA,
	SSL3_CK_RSA_DES_40_CBC_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	56,
d305 12
a316 12
	1,
	SSL3_TXT_RSA_DES_64_CBC_SHA,
	SSL3_CK_RSA_DES_64_CBC_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
d321 12
a332 12
	1,
	SSL3_TXT_RSA_DES_192_CBC3_SHA,
	SSL3_CK_RSA_DES_192_CBC3_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d338 12
a349 12
	0,
	SSL3_TXT_DH_DSS_DES_40_CBC_SHA,
	SSL3_CK_DH_DSS_DES_40_CBC_SHA,
	SSL_kDHd,
	SSL_aDH,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	56,
d354 12
a365 12
	0, /* not implemented (non-ephemeral DH) */
	SSL3_TXT_DH_DSS_DES_64_CBC_SHA,
	SSL3_CK_DH_DSS_DES_64_CBC_SHA,
	SSL_kDHd,
	SSL_aDH,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
d370 12
a381 12
	0, /* not implemented (non-ephemeral DH) */
	SSL3_TXT_DH_DSS_DES_192_CBC3_SHA,
	SSL3_CK_DH_DSS_DES_192_CBC3_SHA,
	SSL_kDHd,
	SSL_aDH,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d386 12
a397 12
	0, /* not implemented (non-ephemeral DH) */
	SSL3_TXT_DH_RSA_DES_40_CBC_SHA,
	SSL3_CK_DH_RSA_DES_40_CBC_SHA,
	SSL_kDHr,
	SSL_aDH,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	56,
d402 12
a413 12
	0, /* not implemented (non-ephemeral DH) */
	SSL3_TXT_DH_RSA_DES_64_CBC_SHA,
	SSL3_CK_DH_RSA_DES_64_CBC_SHA,
	SSL_kDHr,
	SSL_aDH,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
d418 12
a429 12
	0, /* not implemented (non-ephemeral DH) */
	SSL3_TXT_DH_RSA_DES_192_CBC3_SHA,
	SSL3_CK_DH_RSA_DES_192_CBC3_SHA,
	SSL_kDHr,
	SSL_aDH,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d435 12
a446 12
	1,
	SSL3_TXT_EDH_DSS_DES_40_CBC_SHA,
	SSL3_CK_EDH_DSS_DES_40_CBC_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	56,
d451 12
a462 12
	1,
	SSL3_TXT_EDH_DSS_DES_64_CBC_SHA,
	SSL3_CK_EDH_DSS_DES_64_CBC_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
d467 12
a478 12
	1,
	SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA,
	SSL3_CK_EDH_DSS_DES_192_CBC3_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d483 12
a494 12
	1,
	SSL3_TXT_EDH_RSA_DES_40_CBC_SHA,
	SSL3_CK_EDH_RSA_DES_40_CBC_SHA,
	SSL_kEDH,
	SSL_aRSA,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	56,
d499 12
a510 12
	1,
	SSL3_TXT_EDH_RSA_DES_64_CBC_SHA,
	SSL3_CK_EDH_RSA_DES_64_CBC_SHA,
	SSL_kEDH,
	SSL_aRSA,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
d515 12
a526 12
	1,
	SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA,
	SSL3_CK_EDH_RSA_DES_192_CBC3_SHA,
	SSL_kEDH,
	SSL_aRSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d531 12
a542 12
	1,
	SSL3_TXT_ADH_RC4_40_MD5,
	SSL3_CK_ADH_RC4_40_MD5,
	SSL_kEDH,
	SSL_aNULL,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	128,
d547 12
a558 12
	1,
	SSL3_TXT_ADH_RC4_128_MD5,
	SSL3_CK_ADH_RC4_128_MD5,
	SSL_kEDH,
	SSL_aNULL,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d563 12
a574 12
	1,
	SSL3_TXT_ADH_DES_40_CBC_SHA,
	SSL3_CK_ADH_DES_40_CBC_SHA,
	SSL_kEDH,
	SSL_aNULL,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	128,
d579 12
a590 12
	1,
	SSL3_TXT_ADH_DES_64_CBC_SHA,
	SSL3_CK_ADH_DES_64_CBC_SHA,
	SSL_kEDH,
	SSL_aNULL,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
d595 12
a606 12
	1,
	SSL3_TXT_ADH_DES_192_CBC_SHA,
	SSL3_CK_ADH_DES_192_CBC_SHA,
	SSL_kEDH,
	SSL_aNULL,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d613 12
a624 12
	0,
	SSL3_TXT_FZA_DMS_NULL_SHA,
	SSL3_CK_FZA_DMS_NULL_SHA,
	SSL_kFZA,
	SSL_aFZA,
	SSL_eNULL,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d629 12
a640 12
	0,
	SSL3_TXT_FZA_DMS_FZA_SHA,
	SSL3_CK_FZA_DMS_FZA_SHA,
	SSL_kFZA,
	SSL_aFZA,
	SSL_eFZA,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d645 12
a656 12
	0,
	SSL3_TXT_FZA_DMS_RC4_SHA,
	SSL3_CK_FZA_DMS_RC4_SHA,
	SSL_kFZA,
	SSL_aFZA,
	SSL_RC4,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d664 12
a675 12
	1,
	SSL3_TXT_KRB5_DES_64_CBC_SHA,
	SSL3_CK_KRB5_DES_64_CBC_SHA,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
d680 12
a691 12
	1,
	SSL3_TXT_KRB5_DES_192_CBC3_SHA,
	SSL3_CK_KRB5_DES_192_CBC3_SHA,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d696 12
a707 12
	1,
	SSL3_TXT_KRB5_RC4_128_SHA,
	SSL3_CK_KRB5_RC4_128_SHA,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC4,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d712 12
a723 12
	1,
	SSL3_TXT_KRB5_IDEA_128_CBC_SHA,
	SSL3_CK_KRB5_IDEA_128_CBC_SHA,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_IDEA,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d728 12
a739 12
	1,
	SSL3_TXT_KRB5_DES_64_CBC_MD5,
	SSL3_CK_KRB5_DES_64_CBC_MD5,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_DES,
	SSL_MD5,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
d744 12
a755 12
	1,
	SSL3_TXT_KRB5_DES_192_CBC3_MD5,
	SSL3_CK_KRB5_DES_192_CBC3_MD5,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_3DES,
	SSL_MD5,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d760 12
a771 12
	1,
	SSL3_TXT_KRB5_RC4_128_MD5,
	SSL3_CK_KRB5_RC4_128_MD5,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d776 12
a787 12
	1,
	SSL3_TXT_KRB5_IDEA_128_CBC_MD5,
	SSL3_CK_KRB5_IDEA_128_CBC_MD5,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_IDEA,
	SSL_MD5,
	SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d792 12
a803 12
	1,
	SSL3_TXT_KRB5_DES_40_CBC_SHA,
	SSL3_CK_KRB5_DES_40_CBC_SHA,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	56,
d808 12
a819 12
	1,
	SSL3_TXT_KRB5_RC2_40_CBC_SHA,
	SSL3_CK_KRB5_RC2_40_CBC_SHA,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC2,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	128,
d824 12
a835 12
	1,
	SSL3_TXT_KRB5_RC4_40_SHA,
	SSL3_CK_KRB5_RC4_40_SHA,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC4,
	SSL_SHA1,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	128,
d840 12
a851 12
	1,
	SSL3_TXT_KRB5_DES_40_CBC_MD5,
	SSL3_CK_KRB5_DES_40_CBC_MD5,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_DES,
	SSL_MD5,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	56,
d856 12
a867 12
	1,
	SSL3_TXT_KRB5_RC2_40_CBC_MD5,
	SSL3_CK_KRB5_RC2_40_CBC_MD5,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC2,
	SSL_MD5,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	128,
d872 12
a883 12
	1,
	SSL3_TXT_KRB5_RC4_40_MD5,
	SSL3_CK_KRB5_RC4_40_MD5,
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	40,
	128,
d890 12
a901 12
	1,
	TLS1_TXT_RSA_WITH_AES_128_SHA,
	TLS1_CK_RSA_WITH_AES_128_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d905 12
a916 12
	0,
	TLS1_TXT_DH_DSS_WITH_AES_128_SHA,
	TLS1_CK_DH_DSS_WITH_AES_128_SHA,
	SSL_kDHd,
	SSL_aDH,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d920 12
a931 12
	0,
	TLS1_TXT_DH_RSA_WITH_AES_128_SHA,
	TLS1_CK_DH_RSA_WITH_AES_128_SHA,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d935 12
a946 12
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_128_SHA,
	TLS1_CK_DHE_DSS_WITH_AES_128_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d950 12
a961 12
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_128_SHA,
	TLS1_CK_DHE_RSA_WITH_AES_128_SHA,
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d965 12
a976 12
	1,
	TLS1_TXT_ADH_WITH_AES_128_SHA,
	TLS1_CK_ADH_WITH_AES_128_SHA,
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d981 12
a992 12
	1,
	TLS1_TXT_RSA_WITH_AES_256_SHA,
	TLS1_CK_RSA_WITH_AES_256_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d996 12
a1007 12
	0,
	TLS1_TXT_DH_DSS_WITH_AES_256_SHA,
	TLS1_CK_DH_DSS_WITH_AES_256_SHA,
	SSL_kDHd,
	SSL_aDH,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1012 12
a1023 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_AES_256_SHA,
	TLS1_CK_DH_RSA_WITH_AES_256_SHA,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1028 12
a1039 12
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_256_SHA,
	TLS1_CK_DHE_DSS_WITH_AES_256_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1044 12
a1055 12
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_256_SHA,
	TLS1_CK_DHE_RSA_WITH_AES_256_SHA,
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1060 12
a1071 12
	1,
	TLS1_TXT_ADH_WITH_AES_256_SHA,
	TLS1_CK_ADH_WITH_AES_256_SHA,
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1077 12
a1088 12
	1,
	TLS1_TXT_RSA_WITH_NULL_SHA256,
	TLS1_CK_RSA_WITH_NULL_SHA256,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eNULL,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d1093 12
a1104 12
	1,
	TLS1_TXT_RSA_WITH_AES_128_SHA256,
	TLS1_CK_RSA_WITH_AES_128_SHA256,
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1109 12
a1120 12
	1,
	TLS1_TXT_RSA_WITH_AES_256_SHA256,
	TLS1_CK_RSA_WITH_AES_256_SHA256,
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1125 12
a1136 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_DSS_WITH_AES_128_SHA256,
	TLS1_CK_DH_DSS_WITH_AES_128_SHA256,
	SSL_kDHd,
	SSL_aDH,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1141 12
a1152 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_AES_128_SHA256,
	TLS1_CK_DH_RSA_WITH_AES_128_SHA256,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1157 12
a1168 12
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256,
	TLS1_CK_DHE_DSS_WITH_AES_128_SHA256,
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1176 12
a1187 12
	1,
	TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1192 12
a1203 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kDHd,
	SSL_aDH,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1208 12
a1219 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kDHr,
	SSL_aDH,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1224 12
a1235 12
	1,
	TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1240 12
a1251 12
	1,
	TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kEDH,
	SSL_aRSA,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1256 12
a1267 12
	1,
	TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kEDH,
	SSL_aNULL,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1276 12
a1287 12
	1,
	TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5,
	TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	128,
d1292 12
a1303 12
	1,
	TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5,
	TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC2,
	SSL_MD5,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	128,
d1309 12
a1320 12
	1,
	TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA,
	TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
d1325 12
a1336 12
	1,
	TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
	TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
d1341 12
a1352 12
	1,
	TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA,
	TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	128,
d1357 12
a1368 12
	1,
	TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	128,
d1373 12
a1384 12
	1,
	TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA,
	TLS1_CK_DHE_DSS_WITH_RC4_128_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1391 12
a1402 12
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256,
	TLS1_CK_DHE_RSA_WITH_AES_128_SHA256,
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1407 12
a1418 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_DSS_WITH_AES_256_SHA256,
	TLS1_CK_DH_DSS_WITH_AES_256_SHA256,
	SSL_kDHd,
	SSL_aDH,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1423 12
a1434 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_AES_256_SHA256,
	TLS1_CK_DH_RSA_WITH_AES_256_SHA256,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1439 12
a1450 12
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256,
	TLS1_CK_DHE_DSS_WITH_AES_256_SHA256,
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1455 12
a1466 12
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256,
	TLS1_CK_DHE_RSA_WITH_AES_256_SHA256,
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1471 12
a1482 12
	1,
	TLS1_TXT_ADH_WITH_AES_128_SHA256,
	TLS1_CK_ADH_WITH_AES_128_SHA256,
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1487 12
a1498 12
	1,
	TLS1_TXT_ADH_WITH_AES_256_SHA256,
	TLS1_CK_ADH_WITH_AES_256_SHA256,
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1504 54
a1557 54
	1,
	"GOST94-GOST89-GOST89",
	0x3000080,
	SSL_kGOST,
	SSL_aGOST94,
	SSL_eGOST2814789CNT,
	SSL_GOST89MAC,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94|TLS1_STREAM_MAC,
	256,
	256
	},
	{
	1,
	"GOST2001-GOST89-GOST89",
	0x3000081,
	SSL_kGOST,
	SSL_aGOST01,
	SSL_eGOST2814789CNT,
	SSL_GOST89MAC,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94|TLS1_STREAM_MAC,
	256,
	256
	},
	{
	1,
	"GOST94-NULL-GOST94",
	0x3000082,
	SSL_kGOST,
	SSL_aGOST94,
	SSL_eNULL,
	SSL_GOST94,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94,
	0,
	0
	},
	{
	1,
	"GOST2001-NULL-GOST94",
	0x3000083,
	SSL_kGOST,
	SSL_aGOST01,
	SSL_eNULL,
	SSL_GOST94,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94,
	0,
	0
d1565 12
a1576 12
	1,
	TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1580 12
a1591 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kDHd,
	SSL_aDH,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1596 12
a1607 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kDHr,
	SSL_aDH,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1612 12
a1623 12
	1,
	TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1628 12
a1639 12
	1,
	TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kEDH,
	SSL_aRSA,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1644 12
a1655 12
	1,
	TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kEDH,
	SSL_aNULL,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1662 12
a1673 12
	1,
	TLS1_TXT_PSK_WITH_RC4_128_SHA,
	TLS1_CK_PSK_WITH_RC4_128_SHA,
	SSL_kPSK,
	SSL_aPSK,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1678 12
a1689 12
	1,
	TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA,
	TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA,
	SSL_kPSK,
	SSL_aPSK,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d1694 12
a1705 12
	1,
	TLS1_TXT_PSK_WITH_AES_128_CBC_SHA,
	TLS1_CK_PSK_WITH_AES_128_CBC_SHA,
	SSL_kPSK,
	SSL_aPSK,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1710 12
a1721 12
	1,
	TLS1_TXT_PSK_WITH_AES_256_CBC_SHA,
	TLS1_CK_PSK_WITH_AES_256_CBC_SHA,
	SSL_kPSK,
	SSL_aPSK,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d1730 12
a1741 12
	1,
	TLS1_TXT_RSA_WITH_SEED_SHA,
	TLS1_CK_RSA_WITH_SEED_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1746 12
a1757 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_DSS_WITH_SEED_SHA,
	TLS1_CK_DH_DSS_WITH_SEED_SHA,
	SSL_kDHd,
	SSL_aDH,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1762 12
a1773 12
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_SEED_SHA,
	TLS1_CK_DH_RSA_WITH_SEED_SHA,
	SSL_kDHr,
	SSL_aDH,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1778 12
a1789 12
	1,
	TLS1_TXT_DHE_DSS_WITH_SEED_SHA,
	TLS1_CK_DHE_DSS_WITH_SEED_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1794 12
a1805 12
	1,
	TLS1_TXT_DHE_RSA_WITH_SEED_SHA,
	TLS1_CK_DHE_RSA_WITH_SEED_SHA,
	SSL_kEDH,
	SSL_aRSA,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1810 12
a1821 12
	1,
	TLS1_TXT_ADH_WITH_SEED_SHA,
	TLS1_CK_ADH_WITH_SEED_SHA,
	SSL_kEDH,
	SSL_aNULL,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d1830 12
a1841 12
	1,
	TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_RSA_WITH_AES_128_GCM_SHA256,
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d1846 12
a1857 12
	1,
	TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_RSA_WITH_AES_256_GCM_SHA384,
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d1862 12
a1873 12
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256,
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d1878 12
a1889 12
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384,
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d1894 12
a1905 12
	0,
	TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d1910 12
a1921 12
	0,
	TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d1926 12
a1937 12
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256,
	TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256,
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d1942 12
a1953 12
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384,
	TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384,
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d1958 12
a1969 12
	0,
	TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256,
	TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256,
	SSL_kDHd,
	SSL_aDH,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d1974 12
a1985 12
	0,
	TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384,
	TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384,
	SSL_kDHd,
	SSL_aDH,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d1990 12
a2001 12
	1,
	TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256,
	TLS1_CK_ADH_WITH_AES_128_GCM_SHA256,
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d2006 12
a2017 12
	1,
	TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384,
	TLS1_CK_ADH_WITH_AES_256_GCM_SHA384,
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d2023 12
a2034 12
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA,
	TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d2039 12
a2050 12
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2055 12
a2066 12
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2071 12
a2082 12
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2087 12
a2098 12
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d2103 12
a2114 12
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA,
	TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d2119 12
a2130 12
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2135 12
a2146 12
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2151 12
a2162 12
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2167 12
a2178 12
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d2183 12
a2194 12
	1,
	TLS1_TXT_ECDH_RSA_WITH_NULL_SHA,
	TLS1_CK_ECDH_RSA_WITH_NULL_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d2199 12
a2210 12
	1,
	TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2215 12
a2226 12
	1,
	TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2231 12
a2242 12
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2247 12
a2258 12
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d2263 12
a2274 12
	1,
	TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA,
	TLS1_CK_ECDHE_RSA_WITH_NULL_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d2279 12
a2290 12
	1,
	TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2295 12
a2306 12
	1,
	TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2311 12
a2322 12
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2327 12
a2338 12
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d2343 12
a2354 12
	1,
	TLS1_TXT_ECDH_anon_WITH_NULL_SHA,
	TLS1_CK_ECDH_anon_WITH_NULL_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d2359 12
a2370 12
	1,
	TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA,
	TLS1_CK_ECDH_anon_WITH_RC4_128_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2375 12
a2386 12
	1,
	TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2391 12
a2402 12
	1,
	TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2407 12
a2418 12
	1,
	TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d2425 12
a2436 12
	1,
	TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
	TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
	SSL_kSRP,
	SSL_aNULL,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2441 12
a2452 12
	1,
	TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
	TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
	SSL_kSRP,
	SSL_aRSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2457 12
a2468 12
	1,
	TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
	TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
	SSL_kSRP,
	SSL_aDSS,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2473 12
a2484 12
	1,
	TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA,
	TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA,
	SSL_kSRP,
	SSL_aNULL,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2489 12
a2500 12
	1,
	TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
	SSL_kSRP,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2505 12
a2516 12
	1,
	TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
	TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
	SSL_kSRP,
	SSL_aDSS,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
d2521 12
a2532 12
	1,
	TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA,
	TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA,
	SSL_kSRP,
	SSL_aNULL,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d2537 12
a2548 12
	1,
	TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
	SSL_kSRP,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d2553 12
a2564 12
	1,
	TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
	TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
	SSL_kSRP,
	SSL_aDSS,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
d2573 12
a2584 12
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d2589 12
a2600 12
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_AES256,
	SSL_SHA384,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d2605 12
a2616 12
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256,
	TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d2621 12
a2632 12
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384,
	TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES256,
	SSL_SHA384,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d2637 12
a2648 12
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256,
	TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d2653 12
a2664 12
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384,
	TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA384,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d2669 12
a2680 12
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256,
	TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d2685 12
a2696 12
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384,
	TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_AES256,
	SSL_SHA384,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d2703 12
a2714 12
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d2719 12
a2730 12
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d2735 12
a2746 12
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d2751 12
a2762 12
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d2767 12
a2778 12
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d2783 12
a2794 12
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d2799 12
a2810 12
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d2815 12
a2826 12
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d2835 54
a2888 54
	1,
	"GOST-MD5",
	0x0300ff00,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eGOST2814789CNT,
	SSL_MD5,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},
	{
	1,
	"GOST-GOST94",
	0x0300ff01,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eGOST2814789CNT,
	SSL_GOST94,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256
	},
	{
	1,
	"GOST-GOST89MAC",
	0x0300ff02,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eGOST2814789CNT,
	SSL_GOST89MAC,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256
	},
	{
	1,
	"GOST-GOST89STREAM",
	0x0300ff03,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eGOST2814789CNT,
	SSL_GOST89MAC,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF|TLS1_STREAM_MAC,
	256,
	256
d2893 1
a2893 1
	};
d2895 1
a2895 1
SSL3_ENC_METHOD SSLv3_enc_data={
d2902 1
a2902 1
	MD5_DIGEST_LENGTH+SHA_DIGEST_LENGTH,
d2904 2
a2905 2
	SSL3_MD_CLIENT_FINISHED_CONST,4,
	SSL3_MD_SERVER_FINISHED_CONST,4,
d2908 7
a2914 6
		 size_t, const unsigned char *, size_t,
		 int use_context))ssl_undefined_function,
	};

long ssl3_default_timeout(void)
	{
d2917 2
a2918 7
	return(60*60*2);
	}

int ssl3_num_ciphers(void)
	{
	return(SSL3_NUM_CIPHERS);
	}
d2920 9
a2928 2
const SSL_CIPHER *ssl3_get_cipher(unsigned int u)
	{
d2930 1
a2930 1
		return(&(ssl3_ciphers[SSL3_NUM_CIPHERS-1-u]));
d2932 2
a2933 2
		return(NULL);
	}
d2935 3
a2937 2
int ssl3_pending(const SSL *s)
	{
d2940 1
a2940 1
	
d2942 1
a2942 1
	}
d2944 3
a2946 2
int ssl3_new(SSL *s)
	{
d2949 4
a2952 4
	if ((s3=OPENSSL_malloc(sizeof *s3)) == NULL) goto err;
	memset(s3,0,sizeof *s3);
	memset(s3->rrec.seq_num,0,sizeof(s3->rrec.seq_num));
	memset(s3->wrec.seq_num,0,sizeof(s3->wrec.seq_num));
d2954 1
a2954 1
	s->s3=s3;
d2960 1
a2960 1
	return(1);
d2962 2
a2963 2
	return(0);
	}
d2965 5
a2969 4
void ssl3_free(SSL *s)
	{
	if(s == NULL)
	    return;
d2995 1
a2995 1
		sk_X509_NAME_pop_free(s->s3->tmp.ca_names,X509_NAME_free);
d2999 2
a3000 1
	if (s->s3->handshake_dgst) ssl3_free_digest_list(s);
d3004 1
a3004 1
	OPENSSL_cleanse(s->s3,sizeof *s->s3);
d3006 2
a3007 2
	s->s3=NULL;
	}
d3009 4
a3012 3
void ssl3_clear(SSL *s)
	{
	unsigned char *rp,*wp;
d3027 1
a3027 1
		sk_X509_NAME_pop_free(s->s3->tmp.ca_names,X509_NAME_free);
d3029 1
a3029 2
	if (s->s3->rrec.comp != NULL)
		{
d3031 2
a3032 2
		s->s3->rrec.comp=NULL;
		}
d3034 1
a3034 2
	if (s->s3->tmp.dh != NULL)
		{
d3037 1
a3037 1
		}
d3040 1
a3040 2
	if (s->s3->tmp.ecdh != NULL)
		{
d3043 1
a3043 1
		}
d3054 1
a3054 1
 	wlen = s->s3->wbuf.len;
d3062 2
a3063 2
	}	
	memset(s->s3,0,sizeof *s->s3);
d3067 1
a3067 1
 	s->s3->wbuf.len = wlen;
d3072 6
a3077 6
	s->packet_length=0;
	s->s3->renegotiate=0;
	s->s3->total_renegotiations=0;
	s->s3->num_renegotiations=0;
	s->s3->in_read_app_data=0;
	s->version=SSL3_VERSION;
d3080 1
a3080 2
	if (s->next_proto_negotiated)
		{
d3084 1
a3084 1
		}
d3086 1
a3086 1
	}
d3089 5
a3093 4
static char * srp_password_from_info_cb(SSL *s, void *arg)
	{
	return BUF_strdup(s->srp_ctx.info) ;
	}
d3096 4
a3099 3
long ssl3_ctrl(SSL *s, int cmd, long larg, void *parg)
	{
	int ret=0;
d3104 2
a3105 2
	    cmd == SSL_CTRL_SET_TMP_RSA ||
	    cmd == SSL_CTRL_SET_TMP_RSA_CB ||
d3108 2
a3109 2
	    cmd == SSL_CTRL_SET_TMP_DH ||
	    cmd == SSL_CTRL_SET_TMP_DH_CB ||
d3111 2
a3112 4
		0)
		{
		if (!ssl_cert_inst(&s->cert))
		    	{
d3114 1
a3114 2
			return(0);
			}
d3116 1
d3119 1
a3119 2
	switch (cmd)
		{
d3121 1
a3121 1
		ret=s->hit;
d3126 1
a3126 1
		ret=s->s3->num_renegotiations;
d3129 2
a3130 2
		ret=s->s3->num_renegotiations;
		s->s3->num_renegotiations=0;
d3133 1
a3133 1
		ret=s->s3->total_renegotiations;
d3136 1
a3136 1
		ret=(int)(s->s3->flags);
d3141 2
a3142 2
		    ((s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL) ||
		     (EVP_PKEY_size(s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey) > (512/8))))
d3148 1
a3148 2
			if (rsa == NULL)
				{
d3150 3
a3152 4
				return(ret);
				}
			if ((rsa = RSAPrivateKey_dup(rsa)) == NULL)
				{
d3154 2
a3155 2
				return(ret);
				}
d3164 2
a3165 2
		SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(ret);
d3173 1
a3173 2
			if (dh == NULL)
				{
d3175 3
a3177 4
				return(ret);
				}
			if ((dh = DHparams_dup(dh)) == NULL)
				{
d3179 4
a3182 6
				return(ret);
				}
			if (!(s->options & SSL_OP_SINGLE_DH_USE))
				{
				if (!DH_generate_key(dh))
					{
d3185 1
a3185 2
					return(ret);
					}
d3187 1
d3196 2
a3197 2
		SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(ret);
d3204 5
a3208 11
		EC_KEY *ecdh = NULL;
 			
		if (parg == NULL)
			{
			SSLerr(SSL_F_SSL3_CTRL, ERR_R_PASSED_NULL_PARAMETER);
			return(ret);
			}
		if (!EC_KEY_up_ref((EC_KEY *)parg))
			{
			SSLerr(SSL_F_SSL3_CTRL,ERR_R_ECDH_LIB);
			return(ret);
d3210 10
a3219 8
		ecdh = (EC_KEY *)parg;
		if (!(s->options & SSL_OP_SINGLE_ECDH_USE))
			{
			if (!EC_KEY_generate_key(ecdh))
				{
				EC_KEY_free(ecdh);
				SSLerr(SSL_F_SSL3_CTRL,ERR_R_ECDH_LIB);
				return(ret);
d3222 4
a3225 4
		if (s->cert->ecdh_tmp != NULL)
			EC_KEY_free(s->cert->ecdh_tmp);
		s->cert->ecdh_tmp = ecdh;
		ret = 1;
d3230 2
a3231 2
		SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(ret);
d3237 2
a3238 3
 		if (larg == TLSEXT_NAMETYPE_host_name)
			{
			if (s->tlsext_hostname != NULL) 
d3243 1
a3243 1
			if (parg == NULL) 
d3245 1
a3245 2
			if (strlen((char *)parg) > TLSEXT_MAXLEN_host_name)
				{
d3248 2
a3249 3
				}
			if ((s->tlsext_hostname = BUF_strdup((char *)parg)) == NULL)
				{
a3251 1
				}
d3253 1
a3253 2
		else
			{
d3256 2
a3257 2
			}
 		break;
d3259 1
a3259 1
		s->tlsext_debug_arg=parg;
d3267 1
a3267 1
			{
d3270 1
a3270 1
			}
d3277 1
a3277 2
		if (s->tlsext_opaque_prf_input != NULL)
			{
d3280 1
a3280 2
			}
		else
d3286 1
a3286 1
		s->tlsext_status_type=larg;
d3313 1
a3313 1
		
a3345 2
		}
	return(ret);
d3347 2
d3350 4
a3353 3
long ssl3_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
	{
	int ret=0;
d3358 1
a3358 1
	    cmd == SSL_CTRL_SET_TMP_RSA_CB ||
d3361 1
a3361 1
	    cmd == SSL_CTRL_SET_TMP_DH_CB ||
d3363 2
a3364 4
		0)
		{
		if (!ssl_cert_inst(&s->cert))
			{
d3366 1
a3366 2
			return(0);
			}
d3368 1
d3371 1
a3371 2
	switch (cmd)
		{
d3375 1
a3375 1
		s->cert->rsa_tmp_cb = (RSA *(*)(SSL *, int, int))fp;
d3382 1
a3382 1
		s->cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))fp;
d3389 1
a3389 1
		s->cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;
d3395 2
a3396 2
		s->tlsext_debug_cb=(void (*)(SSL *,int ,int,
					unsigned char *, int, void *))fp;
a3400 2
		}
	return(ret);
d3402 2
d3405 3
a3407 2
long ssl3_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
	{
d3410 1
a3410 1
	cert=ctx->cert;
d3412 1
a3412 2
	switch (cmd)
		{
d3415 5
a3419 5
		if (	(cert->rsa_tmp == NULL) &&
			((cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL) ||
			 (EVP_PKEY_size(cert->pkeys[SSL_PKEY_RSA_ENC].privatekey) > (512/8)))
			)
			return(1);
d3421 1
a3421 1
			return(0);
d3425 2
a3426 2
		RSA *rsa;
		int i;
d3428 16
a3443 20
		rsa=(RSA *)parg;
		i=1;
		if (rsa == NULL)
			i=0;
		else
			{
			if ((rsa=RSAPrivateKey_dup(rsa)) == NULL)
				i=0;
			}
		if (!i)
			{
			SSLerr(SSL_F_SSL3_CTX_CTRL,ERR_R_RSA_LIB);
			return(0);
			}
		else
			{
			if (cert->rsa_tmp != NULL)
				RSA_free(cert->rsa_tmp);
			cert->rsa_tmp=rsa;
			return(1);
d3449 2
a3450 2
		SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(0);
d3457 1
a3457 1
		DH *new=NULL,*dh;
d3459 4
a3462 5
		dh=(DH *)parg;
		if ((new=DHparams_dup(dh)) == NULL)
			{
			SSLerr(SSL_F_SSL3_CTX_CTRL,ERR_R_DH_LIB);
			return 0;
d3464 5
a3468 7
		if (!(ctx->options & SSL_OP_SINGLE_DH_USE))
			{
			if (!DH_generate_key(new))
				{
				SSLerr(SSL_F_SSL3_CTX_CTRL,ERR_R_DH_LIB);
				DH_free(new);
				return 0;
d3471 4
a3474 4
		if (cert->dh_tmp != NULL)
			DH_free(cert->dh_tmp);
		cert->dh_tmp=new;
		return 1;
d3479 2
a3480 2
		SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(0);
d3487 5
a3491 6
		EC_KEY *ecdh = NULL;
 			
		if (parg == NULL)
			{
			SSLerr(SSL_F_SSL3_CTX_CTRL,ERR_R_ECDH_LIB);
			return 0;
d3493 4
a3496 5
		ecdh = EC_KEY_dup((EC_KEY *)parg);
		if (ecdh == NULL)
			{
			SSLerr(SSL_F_SSL3_CTX_CTRL,ERR_R_EC_LIB);
			return 0;
d3498 5
a3502 7
		if (!(ctx->options & SSL_OP_SINGLE_ECDH_USE))
			{
			if (!EC_KEY_generate_key(ecdh))
				{
				EC_KEY_free(ecdh);
				SSLerr(SSL_F_SSL3_CTX_CTRL,ERR_R_ECDH_LIB);
				return 0;
d3506 2
a3507 3
		if (cert->ecdh_tmp != NULL)
			{
			EC_KEY_free(cert->ecdh_tmp);
d3509 2
a3510 2
		cert->ecdh_tmp = ecdh;
		return 1;
d3515 2
a3516 2
		SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(0);
d3522 1
a3522 1
		ctx->tlsext_servername_arg=parg;
d3527 6
a3532 7
		unsigned char *keys = parg;
		if (!keys)
			return 48;
		if (larg != 48)
			{
			SSLerr(SSL_F_SSL3_CTX_CTRL, SSL_R_INVALID_TICKET_KEYS_LENGTH);
			return 0;
d3534 8
a3541 5
		if (cmd == SSL_CTRL_SET_TLSEXT_TICKET_KEYS)
			{
			memcpy(ctx->tlsext_tick_key_name, keys, 16);
			memcpy(ctx->tlsext_tick_hmac_key, keys + 16, 16);
			memcpy(ctx->tlsext_tick_aes_key, keys + 32, 16);
d3543 1
a3543 7
		else
			{
			memcpy(keys, ctx->tlsext_tick_key_name, 16);
			memcpy(keys + 16, ctx->tlsext_tick_hmac_key, 16);
			memcpy(keys + 32, ctx->tlsext_tick_aes_key, 16);
			}
		return 1;
d3553 1
a3553 1
		ctx->tlsext_status_arg=parg;
d3565 1
a3565 2
		if (strlen((const char *)parg) > 255 || strlen((const char *)parg) < 1)
			{
d3568 2
a3569 3
			} 
		if ((ctx->srp_ctx.login = BUF_strdup((char *)parg)) == NULL)
			{
d3572 1
a3572 1
			}
d3575 2
a3576 2
		ctx->srp_ctx.SRP_give_srp_client_pwd_callback=srp_password_from_info_cb;
		ctx->srp_ctx.info=parg;
d3580 1
a3580 1
		ctx->srp_ctx.SRP_cb_arg=parg;
d3584 1
a3584 1
		ctx->srp_ctx.strength=larg;
d3589 1
a3589 1
	/* A Thawte special :-) */
d3591 4
a3594 5
		if (ctx->extra_certs == NULL)
			{
			if ((ctx->extra_certs=sk_X509_new_null()) == NULL)
				return(0);
			}
d3599 1
a3599 1
		*(STACK_OF(X509) **)parg =  ctx->extra_certs;
d3603 1
a3603 2
		if (ctx->extra_certs)
			{
d3606 1
a3606 1
			}
d3610 1
a3610 3
		return(0);
		}
	return(1);
d3612 2
d3615 3
a3617 2
long ssl3_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
	{
d3620 1
a3620 1
	cert=ctx->cert;
d3622 1
a3622 2
	switch (cmd)
		{
d3626 1
a3626 1
		cert->rsa_tmp_cb = (RSA *(*)(SSL *, int, int))fp;
d3633 1
a3633 1
		cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))fp;
d3640 1
a3640 1
		cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;
d3646 1
a3646 1
		ctx->tlsext_servername_callback=(int (*)(SSL *,int *,void *))fp;
d3651 1
a3651 1
		ctx->tlsext_opaque_prf_input_callback = (int (*)(SSL *,void *, size_t, void *))fp;
d3656 1
a3656 1
		ctx->tlsext_status_cb=(int (*)(SSL *,void *))fp;
d3660 2
a3661 4
		ctx->tlsext_ticket_key_cb=(int (*)(SSL *,unsigned char  *,
						unsigned char *,
						EVP_CIPHER_CTX *,
						HMAC_CTX *, int))fp;
d3667 2
a3668 1
		ctx->srp_ctx.SRP_verify_param_callback=(int (*)(SSL *,void *))fp;
d3672 2
a3673 1
		ctx->srp_ctx.TLS_ext_srp_username_callback=(int (*)(SSL *,int *,void *))fp;
d3677 2
a3678 1
		ctx->srp_ctx.SRP_give_srp_client_pwd_callback=(char *(*)(SSL *,void *))fp;
d3683 1
a3683 3
		return(0);
		}
	return(1);
d3685 2
d3690 3
a3692 2
const SSL_CIPHER *ssl3_get_cipher_by_char(const unsigned char *p)
	{
d3697 2
a3698 2
	id=0x03000000L|((unsigned long)p[0]<<8L)|(unsigned long)p[1];
	c.id=id;
d3701 2
a3702 1
if (cp == NULL) fprintf(stderr, "Unknown cipher ID %x\n", (p[0] << 8) | p[1]);
d3708 1
a3708 1
	}
d3710 3
a3712 2
int ssl3_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
	{
d3715 6
a3720 8
	if (p != NULL)
		{
		l=c->id;
		if ((l & 0xff000000) != 0x03000000) return(0);
		p[0]=((unsigned char)(l>> 8L))&0xFF;
		p[1]=((unsigned char)(l     ))&0xFF;
		}
	return(2);
d3722 2
d3726 3
a3728 3
	     STACK_OF(SSL_CIPHER) *srvr)
	{
	SSL_CIPHER *c,*ret=NULL;
d3730 1
a3730 1
	int i,ii,ok;
d3737 1
a3737 1
	unsigned long alg_k,alg_a,mask_k,mask_a,emask_k,emask_a;
d3740 1
a3740 1
	cert=s->cert;
d3754 4
a3757 5
	for(i=0 ; i < sk_SSL_CIPHER_num(srvr) ; ++i)
		{
		c=sk_SSL_CIPHER_value(srvr,i);
		printf("%p:%s\n",(void *)c,c->name);
		}
d3759 4
a3762 5
	for(i=0 ; i < sk_SSL_CIPHER_num(clnt) ; ++i)
	    {
	    c=sk_SSL_CIPHER_value(clnt,i);
	    printf("%p:%s\n",(void *)c,c->name);
	    }
d3765 1
a3765 2
	if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE)
		{
d3768 1
a3768 3
		}
	else
		{
d3771 1
a3771 1
		}
d3773 2
a3774 3
	for (i=0; i<sk_SSL_CIPHER_num(prio); i++)
		{
		c=sk_SSL_CIPHER_value(prio,i);
d3777 2
a3778 2
		if ((c->algorithm_ssl & SSL_TLSV1_2) && 
			(TLS1_get_version(s) < TLS1_2_VERSION))
d3781 1
a3781 1
		ssl_set_cert_masks(cert,c);
d3787 2
a3788 2
		mask_k=cert->mask_k | s->srp_ctx.srp_Mask;
		emask_k=cert->export_mask_k | s->srp_ctx.srp_Mask;
d3790 1
a3790 1
			
d3795 2
a3796 2
		alg_k=c->algorithm_mkey;
		alg_a=c->algorithm_auth;
d3799 4
a3802 5
		if (alg_k & SSL_kKRB5)
			{
			if ( !kssl_keytab_is_available(s->kssl_ctx) )
			    continue;
			}
d3810 1
a3810 2
		if (SSL_C_IS_EXPORT(c))
			{
d3813 2
a3814 2
			printf("%d:[%08lX:%08lX:%08lX:%08lX]%p:%s (export)\n",ok,alg_k,alg_a,emask_k,emask_a,
			       (void *)c,c->name);
d3816 1
a3816 3
			}
		else
			{
d3819 2
a3820 2
			printf("%d:[%08lX:%08lX:%08lX:%08lX]%p:%s\n",ok,alg_k,alg_a,mask_k,mask_a,(void *)c,
			       c->name);
d3822 1
a3822 1
			}
d3827 16
a3842 17
			/* if we are considering an ECC cipher suite that uses our certificate */
			(alg_a & SSL_aECDSA || alg_a & SSL_aECDH)
			/* and we have an ECC certificate */
			&& (s->cert->pkeys[SSL_PKEY_ECC].x509 != NULL)
			/* and the client specified a Supported Point Formats extension */
			&& ((s->session->tlsext_ecpointformatlist_length > 0) && (s->session->tlsext_ecpointformatlist != NULL))
			/* and our certificate's point is compressed */
			&& (
				(s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key->data != NULL)
				&& (
					(*(s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key->data) == POINT_CONVERSION_COMPRESSED)
					|| (*(s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key->data) == POINT_CONVERSION_COMPRESSED + 1)
					)
				)
d3844 1
a3844 1
			{
d3849 7
a3855 10
				(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth != NULL)
				&& (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_prime_field)
			)
				{
				for (j = 0; j < s->session->tlsext_ecpointformatlist_length; j++)
					{
					if (s->session->tlsext_ecpointformatlist[j] == TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime)
						{
a3857 1
						}
d3860 3
a3862 6
			else if (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_characteristic_two_field)
				{
				for (j = 0; j < s->session->tlsext_ecpointformatlist_length; j++)
					{
					if (s->session->tlsext_ecpointformatlist[j] == TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2)
						{
a3864 1
						}
d3867 1
d3869 1
a3869 1
			}
d3871 7
a3877 8
			/* if we are considering an ECC cipher suite that uses our certificate */
			(alg_a & SSL_aECDSA || alg_a & SSL_aECDH)
			/* and we have an ECC certificate */
			&& (s->cert->pkeys[SSL_PKEY_ECC].x509 != NULL)
			/* and the client specified an EllipticCurves extension */
			&& ((s->session->tlsext_ellipticcurvelist_length > 0) && (s->session->tlsext_ellipticcurvelist != NULL))
		)
			{
d3880 3
a3882 4
				(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group != NULL)
			)
				{
d3885 3
a3887 5
					&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth != NULL)
				)
					{
					if (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_prime_field)
						{
d3890 1
a3890 3
						}
					else if (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_characteristic_two_field)
						{
a3892 1
						}
d3894 1
a3894 2
				else
					{
d3897 4
a3900 7
					}
				if ((ec_search1 != 0) || (ec_search2 != 0))
					{
					for (j = 0; j < s->session->tlsext_ellipticcurvelist_length / 2; j++)
						{
						if ((s->session->tlsext_ellipticcurvelist[2*j] == ec_search1) && (s->session->tlsext_ellipticcurvelist[2*j+1] == ec_search2))
							{
a3902 1
							}
d3906 1
d3908 1
a3908 1
			}
d3910 7
a3916 8
			/* if we are considering an ECC cipher suite that uses an ephemeral EC key */
			(alg_k & SSL_kEECDH)
			/* and we have an ephemeral EC key */
			&& (s->cert->ecdh_tmp != NULL)
			/* and the client specified an EllipticCurves extension */
			&& ((s->session->tlsext_ellipticcurvelist_length > 0) && (s->session->tlsext_ellipticcurvelist != NULL))
		)
			{
d3918 1
a3918 2
			if (s->cert->ecdh_tmp->group != NULL)
				{
d3921 3
a3923 5
					&& (s->cert->ecdh_tmp->group->meth != NULL)
				)
					{
					if (EC_METHOD_get_field_type(s->cert->ecdh_tmp->group->meth) == NID_X9_62_prime_field)
						{
d3926 1
a3926 3
						}
					else if (EC_METHOD_get_field_type(s->cert->ecdh_tmp->group->meth) == NID_X9_62_characteristic_two_field)
						{
a3928 1
						}
d3930 1
a3930 2
				else
					{
d3933 4
a3936 7
					}
				if ((ec_search1 != 0) || (ec_search2 != 0))
					{
					for (j = 0; j < s->session->tlsext_ellipticcurvelist_length / 2; j++)
						{
						if ((s->session->tlsext_ellipticcurvelist[2*j] == ec_search1) && (s->session->tlsext_ellipticcurvelist[2*j+1] == ec_search2))
							{
a3938 1
							}
d3942 1
d3944 1
a3944 1
			}
d3948 4
a3951 4
		if (!ok) continue;
		ii=sk_SSL_CIPHER_find(allow,c);
		if (ii >= 0)
			{
d3953 3
a3955 3
			if ((alg_k & SSL_kEECDH) && (alg_a & SSL_aECDSA) && s->s3->is_probably_safari)
				{
				if (!ret) ret=sk_SSL_CIPHER_value(allow,ii);
d3957 1
a3957 1
				}
d3959 1
a3959 1
			ret=sk_SSL_CIPHER_value(allow,ii);
a3960 1
			}
a3961 1
	return(ret);
d3963 2
d3966 4
a3969 3
int ssl3_get_req_cert_type(SSL *s, unsigned char *p)
	{
	int ret=0;
d3975 5
a3979 8
	if (s->version >= TLS1_VERSION)
		{
		if (alg_k & SSL_kGOST)
			{
			p[ret++]=TLS_CT_GOST94_SIGN;
			p[ret++]=TLS_CT_GOST01_SIGN;
			return(ret);
			}
d3981 1
d3985 1
a3985 2
	if (alg_k & (SSL_kDHr|SSL_kEDH))
		{
d3987 1
a3987 1
		p[ret++]=SSL3_CT_RSA_FIXED_DH;
d3990 1
a3990 1
		p[ret++]=SSL3_CT_DSS_FIXED_DH;
d3992 1
a3992 1
		}
d3994 1
a3994 2
		(alg_k & (SSL_kEDH|SSL_kDHd|SSL_kDHr)))
		{
d3996 1
a3996 1
		p[ret++]=SSL3_CT_RSA_EPHEMERAL_DH;
d3999 1
a3999 1
		p[ret++]=SSL3_CT_DSS_EPHEMERAL_DH;
d4001 1
a4001 1
		}
d4004 1
a4004 1
	p[ret++]=SSL3_CT_RSA_SIGN;
d4007 1
a4007 1
	p[ret++]=SSL3_CT_DSS_SIGN;
d4010 4
a4013 5
	if ((alg_k & (SSL_kECDHr|SSL_kECDHe)) && (s->version >= TLS1_VERSION))
		{
		p[ret++]=TLS_CT_RSA_FIXED_ECDH;
		p[ret++]=TLS_CT_ECDSA_FIXED_ECDH;
		}
d4020 3
a4022 4
	if (s->version >= TLS1_VERSION)
		{
		p[ret++]=TLS_CT_ECDSA_SIGN;
		}
d4024 2
a4025 2
	return(ret);
	}
d4027 3
a4029 2
int ssl3_shutdown(SSL *s)
	{
d4034 4
a4037 5
	if ((s->quiet_shutdown) || (s->state == SSL_ST_BEFORE))
		{
		s->shutdown=(SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
		return(1);
		}
d4039 1
a4039 2
	if (!(s->shutdown & SSL_SENT_SHUTDOWN))
		{
d4042 1
a4042 1
		ssl3_send_alert(s,SSL3_AL_WARNING,SSL_AD_CLOSE_NOTIFY);
d4046 3
a4048 5
	 	if (s->s3->alert_dispatch)
	 		return(-1);	/* return WANT_WRITE */
		}
	else if (s->s3->alert_dispatch)
		{
d4051 2
a4052 3
		ret=s->method->ssl_dispatch_alert(s);
		if(ret == -1)
			{
d4057 2
a4058 2
			return(ret);
			}
d4060 1
a4060 3
		}
	else if (!(s->shutdown & SSL_RECEIVED_SHUTDOWN))
		{
d4062 2
a4063 3
		s->method->ssl_read_bytes(s,0,NULL,0,0);
		if(!(s->shutdown & SSL_RECEIVED_SHUTDOWN))
			{
a4064 1
			}
d4066 1
d4069 2
a4070 2
		!s->s3->alert_dispatch)
		return(1);
d4072 2
a4073 2
		return(0);
	}
d4075 4
a4078 3
int ssl3_write(SSL *s, const void *buf, int len)
	{
	int ret,n;
d4081 4
a4084 5
	if (s->shutdown & SSL_SEND_SHUTDOWN)
		{
		s->rwstate=SSL_NOTHING;
		return(0);
		}
d4087 2
a4088 1
	if (s->s3->renegotiate) ssl3_renegotiate_check(s);
d4095 1
a4095 2
	if ((s->s3->flags & SSL3_FLAGS_POP_BUFFER) && (s->wbio == s->bbio))
		{
d4097 8
a4104 5
		if (s->s3->delay_buf_pop_ret == 0)
			{
			ret=ssl3_write_bytes(s,SSL3_RT_APPLICATION_DATA,
					     buf,len);
			if (ret <= 0) return(ret);
d4106 5
a4110 7
			s->s3->delay_buf_pop_ret=ret;
			}

		s->rwstate=SSL_WRITING;
		n=BIO_flush(s->wbio);
		if (n <= 0) return(n);
		s->rwstate=SSL_NOTHING;
d4116 7
a4122 11
		ret=s->s3->delay_buf_pop_ret;
		s->s3->delay_buf_pop_ret=0;
		}
	else
		{
		ret=s->method->ssl_write_bytes(s,SSL3_RT_APPLICATION_DATA,
			buf,len);
		if (ret <= 0) return(ret);
		}

	return(ret);
d4125 6
a4130 2
static int ssl3_read_internal(SSL *s, void *buf, int len, int peek)
	{
d4132 1
a4132 1
	
d4134 5
a4138 5
	if (s->s3->renegotiate) ssl3_renegotiate_check(s);
	s->s3->in_read_app_data=1;
	ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
	if ((ret == -1) && (s->s3->in_read_app_data == 2))
		{
d4145 1
a4145 1
		ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
d4147 2
a4148 3
		}
	else
		s->s3->in_read_app_data=0;
d4150 2
a4151 2
	return(ret);
	}
d4153 3
a4155 2
int ssl3_read(SSL *s, void *buf, int len)
	{
d4157 1
a4157 1
	}
d4159 3
a4161 2
int ssl3_peek(SSL *s, void *buf, int len)
	{
d4163 1
a4163 1
	}
d4165 3
a4167 2
int ssl3_renegotiate(SSL *s)
	{
d4169 1
a4169 1
		return(1);
d4172 1
a4172 9
		return(0);

	s->s3->renegotiate=1;
	return(1);
	}

int ssl3_renegotiate_check(SSL *s)
	{
	int ret=0;
d4174 12
a4185 6
	if (s->s3->renegotiate)
		{
		if (	(s->s3->rbuf.left == 0) &&
			(s->s3->wbuf.left == 0) &&
			!SSL_in_init(s))
			{
d4191 2
a4192 2
			s->state=SSL_ST_RENEGOTIATE;
			s->s3->renegotiate=0;
d4195 1
a4195 2
			ret=1;
			}
a4196 1
	return(ret);
d4198 2
d4203 3
a4205 2
long ssl_get_algorithm2(SSL *s)
	{
d4208 2
a4209 2
	    alg2 == (SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF))
		return SSL_HANDSHAKE_MAC_SHA256 | TLS1_PRF_SHA256;
d4211 1
a4211 2
	}
		
@


1.22
log
@remove more cases of MS_STATIC, MS_CALLBACK, and MS_FAR.  Did you
know that MS_STATIC doesn't mean it is static?  How far can lies
and half-truths be layered?  I wonder if anyone got fooled, and
actually returned a pointer..
ok beck
@
text
@d4170 1
a4170 1
	clear_sys_error();
d4216 1
a4216 1
	clear_sys_error();
@


1.21
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d3085 1
a3085 1
static char * MS_CALLBACK srp_password_from_info_cb(SSL *s, void *arg)
@


1.20
log
@SECURITY fixes backported from openssl-1.0.1f.  ok mikeb@@

CVE-2013-4353 NULL pointer dereference with crafted Next Protocol
 Negotiation record in TLS handshake.
Upstream: 197e0ea

CVE-2013-6449 Fix crash with crafted traffic from a TLS 1.2 client.
Upstream: ca98926, 0294b2b

CVE-2013-6450 Fix DTLS retransmission from previous session.
Upstream: 3462896
@
text
@d1128 1
a1128 1
	SSL_kDHr,
d1410 1
a1410 1
	SSL_kDHr,
d1686 1
a1686 1
	SSL_NOT_EXP|SSL_HIGH,
d1702 1
a1702 1
	SSL_NOT_EXP|SSL_HIGH,
d1718 1
a1718 1
	SSL_NOT_EXP|SSL_HIGH,
d1961 1
a1961 1
	SSL_kDHr,
d1977 1
a1977 1
	SSL_kDHr,
d2672 1
a2672 1
	SSL_kECDHe,
d2688 1
a2688 1
	SSL_kECDHe,
d2802 1
a2802 1
	SSL_kECDHe,
d2818 1
a2818 1
	SSL_kECDHe,
d3040 5
d4024 7
@


1.19
log
@resolve conflicts
@
text
@d4277 1
a4277 1
	if (TLS1_get_version(s) >= TLS1_2_VERSION &&
@


1.18
log
@OpenSSL 1.0.0f: merge
@
text
@d1074 97
d1387 116
d1826 194
d2031 1
a2031 1
	SSL_NOT_EXP|SSL_STRONG_NONE,
d2063 1
a2063 1
	SSL_NOT_EXP|SSL_HIGH,
d2079 1
a2079 1
	SSL_NOT_EXP|SSL_HIGH,
d2095 1
a2095 1
	SSL_NOT_EXP|SSL_HIGH,
d2111 1
a2111 1
	SSL_NOT_EXP|SSL_STRONG_NONE,
d2143 1
a2143 1
	SSL_NOT_EXP|SSL_HIGH,
d2159 1
a2159 1
	SSL_NOT_EXP|SSL_HIGH,
d2175 370
d2551 1
a2551 1
	/* Cipher C00B */
d2554 5
a2558 5
	TLS1_TXT_ECDH_RSA_WITH_NULL_SHA,
	TLS1_CK_ECDH_RSA_WITH_NULL_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_eNULL,
d2561 1
a2561 1
	SSL_NOT_EXP|SSL_STRONG_NONE,
d2563 2
a2564 2
	0,
	0,
d2566 4
d2571 1
a2571 1
	/* Cipher C00C */
d2574 9
a2582 9
	TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d2587 1
a2587 1
	/* Cipher C00D */
d2590 11
a2600 11
	TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2603 1
a2603 1
	/* Cipher C00E */
d2606 3
a2608 3
	TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA,
	SSL_kECDHr,
d2611 4
a2614 4
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d2619 1
a2619 1
	/* Cipher C00F */
d2622 3
a2624 3
	TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA,
	SSL_kECDHr,
d2627 4
a2630 4
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d2635 1
a2635 1
	/* Cipher C010 */
d2638 2
a2639 2
	TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA,
	TLS1_CK_ECDHE_RSA_WITH_NULL_SHA,
d2642 7
a2648 7
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d2651 1
a2651 1
	/* Cipher C011 */
d2654 2
a2655 2
	TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA,
d2658 21
a2678 5
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d2683 1
a2683 1
	/* Cipher C012 */
d2686 11
a2696 11
	TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2699 3
a2701 1
	/* Cipher C013 */
d2704 2
a2705 2
	TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA,
d2707 6
a2712 6
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d2717 1
a2717 1
	/* Cipher C014 */
d2720 2
a2721 2
	TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA,
d2723 6
a2728 6
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d2733 17
a2749 1
	/* Cipher C015 */
d2752 11
a2762 11
	TLS1_TXT_ECDH_anon_WITH_NULL_SHA,
	TLS1_CK_ECDH_anon_WITH_NULL_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
d2765 1
a2765 1
	/* Cipher C016 */
d2768 2
a2769 2
	TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA,
	TLS1_CK_ECDH_anon_WITH_RC4_128_SHA,
d2771 6
a2776 6
	SSL_aNULL,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d2781 1
a2781 1
	/* Cipher C017 */
d2784 2
a2785 2
	TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA,
d2787 8
a2794 8
	SSL_aNULL,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
d2797 1
a2797 1
	/* Cipher C018 */
d2800 9
a2808 9
	TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d2813 1
a2813 1
	/* Cipher C019 */
d2816 9
a2824 9
	TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d2828 3
a2830 1
#endif	/* OPENSSL_NO_ECDH */
d2907 3
d2951 3
d2994 3
d3068 15
d3084 1
d3331 21
d3584 32
d3628 12
d3697 14
d3729 3
d3809 5
d3819 4
d4271 12
a4282 1

@


1.17
log
@openssl-1.0.0e: resolve conflicts
@
text
@d2180 1
d2219 1
d2232 1
@


1.16
log
@resolve conflicts, fix local changes
@
text
@d2201 1
d2203 2
d2208 1
d2210 2
@


1.15
log
@pull Ben Lauries blind prefix injection fix for CVE-2009-3555 from
openssl 0.9.8l; crank minor version; ok djm@@ deraadt@@; initially from jsg@@
@
text
@d59 1
a59 1
 * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
d124 26
d155 5
a163 1
#include <openssl/pq_compat.h>
d171 1
d178 5
a182 1
	SSL_kRSA|SSL_aRSA|SSL_eNULL |SSL_MD5|SSL_SSLV3,
d184 1
a186 3
	0,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d188 1
d194 5
a198 1
	SSL_kRSA|SSL_aRSA|SSL_eNULL |SSL_SHA1|SSL_SSLV3,
d200 1
a202 3
	0,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d204 1
d210 5
a214 1
	SSL_kRSA|SSL_aRSA|SSL_RC4  |SSL_MD5 |SSL_SSLV3,
d216 1
a216 1
	0,
a218 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d220 1
d226 5
a230 1
	SSL_kRSA|SSL_aRSA|SSL_RC4  |SSL_MD5|SSL_SSLV3,
d232 1
a232 1
	0,
a234 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d236 1
d242 5
a246 1
	SSL_kRSA|SSL_aRSA|SSL_RC4  |SSL_SHA1|SSL_SSLV3,
d248 1
a248 1
	0,
a250 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d252 1
d258 5
a262 1
	SSL_kRSA|SSL_aRSA|SSL_RC2  |SSL_MD5 |SSL_SSLV3,
d264 1
a264 1
	0,
a266 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d268 1
d275 5
a279 1
	SSL_kRSA|SSL_aRSA|SSL_IDEA |SSL_SHA1|SSL_SSLV3,
d281 1
a281 1
	0,
a283 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d286 1
d292 5
a296 1
	SSL_kRSA|SSL_aRSA|SSL_DES|SSL_SHA1|SSL_SSLV3,
d298 1
a298 1
	0,
a300 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d302 1
d308 5
a312 1
	SSL_kRSA|SSL_aRSA|SSL_DES  |SSL_SHA1|SSL_SSLV3,
d314 1
a314 1
	0,
a316 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d318 1
d324 5
a328 1
	SSL_kRSA|SSL_aRSA|SSL_3DES |SSL_SHA1|SSL_SSLV3,
d330 1
a330 1
	0,
a332 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d334 1
d341 5
a345 1
	SSL_kDHd |SSL_aDH|SSL_DES|SSL_SHA1|SSL_SSLV3,
d347 1
a347 1
	0,
a349 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d351 1
d354 1
a354 1
	0,
d357 5
a361 1
	SSL_kDHd |SSL_aDH|SSL_DES  |SSL_SHA1|SSL_SSLV3,
d363 1
a363 1
	0,
a365 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d367 1
d370 1
a370 1
	0,
d373 5
a377 1
	SSL_kDHd |SSL_aDH|SSL_3DES |SSL_SHA1|SSL_SSLV3,
d379 1
a379 1
	0,
a381 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d383 1
d386 1
a386 1
	0,
d389 5
a393 1
	SSL_kDHr |SSL_aDH|SSL_DES|SSL_SHA1|SSL_SSLV3,
d395 1
a395 1
	0,
a397 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d399 1
d402 1
a402 1
	0,
d405 5
a409 1
	SSL_kDHr |SSL_aDH|SSL_DES  |SSL_SHA1|SSL_SSLV3,
d411 1
a411 1
	0,
a413 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d415 1
d418 1
a418 1
	0,
d421 5
a425 1
	SSL_kDHr |SSL_aDH|SSL_3DES |SSL_SHA1|SSL_SSLV3,
d427 1
a427 1
	0,
a429 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d438 5
a442 1
	SSL_kEDH|SSL_aDSS|SSL_DES|SSL_SHA1|SSL_SSLV3,
d444 1
a444 1
	0,
a446 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d448 1
d454 5
a458 1
	SSL_kEDH|SSL_aDSS|SSL_DES  |SSL_SHA1|SSL_SSLV3,
d460 1
a460 1
	0,
a462 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d464 1
d470 5
a474 1
	SSL_kEDH|SSL_aDSS|SSL_3DES |SSL_SHA1|SSL_SSLV3,
d476 1
a476 1
	0,
a478 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d480 1
d486 5
a490 1
	SSL_kEDH|SSL_aRSA|SSL_DES|SSL_SHA1|SSL_SSLV3,
d492 1
a492 1
	0,
a494 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d496 1
d502 5
a506 1
	SSL_kEDH|SSL_aRSA|SSL_DES  |SSL_SHA1|SSL_SSLV3,
d508 1
a508 1
	0,
a510 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d512 1
d518 5
a522 1
	SSL_kEDH|SSL_aRSA|SSL_3DES |SSL_SHA1|SSL_SSLV3,
d524 1
a524 1
	0,
a526 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d528 1
d534 5
a538 1
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5 |SSL_SSLV3,
d540 1
a540 1
	0,
a542 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d544 1
d550 5
a554 1
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5 |SSL_SSLV3,
d556 1
a556 1
	0,
a558 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d560 1
d566 5
a570 1
	SSL_kEDH |SSL_aNULL|SSL_DES|SSL_SHA1|SSL_SSLV3,
d572 1
a572 1
	0,
a574 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d576 1
d582 5
a586 1
	SSL_kEDH |SSL_aNULL|SSL_DES  |SSL_SHA1|SSL_SSLV3,
d588 1
a588 1
	0,
a590 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d592 1
d598 5
a602 1
	SSL_kEDH |SSL_aNULL|SSL_3DES |SSL_SHA1|SSL_SSLV3,
d604 1
a604 1
	0,
a606 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d609 2
a610 1
/* Fortezza */
d616 5
a620 1
	SSL_kFZA|SSL_aFZA |SSL_eNULL |SSL_SHA1|SSL_SSLV3,
d622 1
a624 3
	0,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d632 5
a636 1
	SSL_kFZA|SSL_aFZA |SSL_eFZA |SSL_SHA1|SSL_SSLV3,
d638 1
a640 3
	0,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
a642 1
#if 0
d648 5
a652 1
	SSL_kFZA|SSL_aFZA |SSL_RC4  |SSL_SHA1|SSL_SSLV3,
d654 1
a654 1
	0,
a656 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d661 1
a661 1
/* The Kerberos ciphers */
d667 5
a671 1
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_SHA1   |SSL_SSLV3,
d673 1
a673 1
	0,
a675 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d683 5
a687 1
	SSL_kKRB5|SSL_aKRB5|  SSL_3DES|SSL_SHA1  |SSL_SSLV3,
d689 1
a689 1
	0,
a691 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d699 5
a703 1
	SSL_kKRB5|SSL_aKRB5|  SSL_RC4|SSL_SHA1  |SSL_SSLV3,
d705 1
a705 1
	0,
a707 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d715 5
a719 1
	SSL_kKRB5|SSL_aKRB5|  SSL_IDEA|SSL_SHA1  |SSL_SSLV3,
d721 1
a721 1
	0,
a723 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d731 5
a735 1
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_MD5    |SSL_SSLV3,
d737 1
a737 1
	0,
a739 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d747 5
a751 1
	SSL_kKRB5|SSL_aKRB5|  SSL_3DES|SSL_MD5   |SSL_SSLV3,
d753 1
a753 1
	0,
a755 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d763 5
a767 1
	SSL_kKRB5|SSL_aKRB5|  SSL_RC4|SSL_MD5  |SSL_SSLV3,
d769 1
a769 1
	0,
a771 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d779 5
a783 1
	SSL_kKRB5|SSL_aKRB5|  SSL_IDEA|SSL_MD5  |SSL_SSLV3,
d785 1
a785 1
	0,
a787 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d795 5
a799 1
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_SHA1   |SSL_SSLV3,
d801 1
a801 1
	0,
a803 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d811 5
a815 1
	SSL_kKRB5|SSL_aKRB5|  SSL_RC2|SSL_SHA1   |SSL_SSLV3,
d817 1
a817 1
	0,
a819 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d827 5
a831 1
	SSL_kKRB5|SSL_aKRB5|  SSL_RC4|SSL_SHA1   |SSL_SSLV3,
d833 1
a833 1
	0,
a835 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d843 5
a847 1
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_MD5    |SSL_SSLV3,
d849 1
a849 1
	0,
a851 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d859 5
a863 1
	SSL_kKRB5|SSL_aKRB5|  SSL_RC2|SSL_MD5    |SSL_SSLV3,
d865 1
a865 1
	0,
a867 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d875 5
a879 1
	SSL_kKRB5|SSL_aKRB5|  SSL_RC4|SSL_MD5    |SSL_SSLV3,
d881 1
a881 1
	0,
a883 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d893 5
a897 1
	SSL_kRSA|SSL_aRSA|SSL_AES|SSL_SHA |SSL_TLSV1,
d899 1
a899 1
	0,
a901 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d908 5
a912 1
	SSL_kDHd|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
d914 1
a914 1
	0,
a916 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d923 5
a927 1
	SSL_kDHr|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
d929 1
a929 1
	0,
a931 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d938 5
a942 1
	SSL_kEDH|SSL_aDSS|SSL_AES|SSL_SHA|SSL_TLSV1,
d944 1
a944 1
	0,
a946 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d953 5
a957 1
	SSL_kEDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
d959 1
a959 1
	0,
a961 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d968 5
a972 1
	SSL_kEDH|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
d974 1
a974 1
	0,
a976 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d984 5
a988 1
	SSL_kRSA|SSL_aRSA|SSL_AES|SSL_SHA |SSL_TLSV1,
d990 1
a990 1
	0,
a992 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d999 5
a1003 1
	SSL_kDHd|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
d1005 1
a1005 1
	0,
a1007 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1009 1
d1012 1
a1012 1
	0,
d1015 5
a1019 1
	SSL_kDHr|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
d1021 1
a1021 1
	0,
a1023 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1025 1
d1031 5
a1035 1
	SSL_kEDH|SSL_aDSS|SSL_AES|SSL_SHA|SSL_TLSV1,
d1037 1
a1037 1
	0,
a1039 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1041 1
d1047 5
a1051 1
	SSL_kEDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
d1053 1
a1053 1
	0,
a1055 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1057 1
d1063 5
a1067 1
	SSL_kEDH|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
d1069 1
a1069 1
	0,
a1071 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1082 5
a1086 1
	SSL_kRSA|SSL_aRSA|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1088 1
a1088 1
	0,
a1090 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1092 1
d1098 5
a1102 1
	SSL_kDHd|SSL_aDH|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1104 1
a1104 1
	0,
a1106 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1108 1
d1114 5
a1118 1
	SSL_kDHr|SSL_aDH|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1120 1
a1120 1
	0,
a1122 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1124 1
d1130 5
a1134 1
	SSL_kEDH|SSL_aDSS|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1136 1
a1136 1
	0,
a1138 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1140 1
d1146 5
a1150 1
	SSL_kEDH|SSL_aRSA|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1152 1
a1152 1
	0,
a1154 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1156 1
d1162 5
a1166 1
	SSL_kEDH|SSL_aNULL|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1168 1
a1168 1
	0,
a1170 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1178 15
a1192 12
	    {
	    1,
	    TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5,
	    TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5,
	    SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
d1194 14
a1207 12
	    {
	    1,
	    TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5,
	    TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5,
	    SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
d1209 1
d1211 15
a1225 12
	    {
	    1,
	    TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA,
	    TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA,
	    SSL_kRSA|SSL_aRSA|SSL_DES|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    56,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
d1227 15
a1241 12
	    {
	    1,
	    TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
	    TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_DES|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    56,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
d1243 15
a1257 12
	    {
	    1,
	    TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA,
	    TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA,
	    SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
d1259 15
a1273 12
	    {
	    1,
	    TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	    TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
d1275 14
a1288 12
	    {
	    1,
	    TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA,
	    TLS1_CK_DHE_DSS_WITH_RC4_128_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_MEDIUM,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS
	    },
d1290 56
d1355 5
a1359 1
	SSL_kRSA|SSL_aRSA|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1361 1
a1361 1
	0,
a1363 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1370 5
a1374 1
	SSL_kDHd|SSL_aDH|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1376 1
a1376 1
	0,
a1378 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1380 1
d1386 5
a1390 1
	SSL_kDHr|SSL_aDH|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1392 1
a1392 1
	0,
a1394 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1396 1
d1402 5
a1406 1
	SSL_kEDH|SSL_aDSS|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1408 1
a1408 1
	0,
a1410 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1412 1
d1418 5
a1422 1
	SSL_kEDH|SSL_aRSA|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1424 1
a1424 1
	0,
a1426 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1428 1
d1434 5
a1438 1
	SSL_kEDH|SSL_aNULL|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
d1440 1
a1440 1
	0,
a1442 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
d1446 66
d1520 5
a1524 1
	SSL_kRSA|SSL_aRSA|SSL_SEED|SSL_SHA1|SSL_TLSV1,
d1526 1
a1526 1
	0,
a1528 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1536 5
a1540 1
	SSL_kDHd|SSL_aDH|SSL_SEED|SSL_SHA1|SSL_TLSV1,
d1542 1
a1542 1
	0,
a1544 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1552 5
a1556 1
	SSL_kDHr|SSL_aDH|SSL_SEED|SSL_SHA1|SSL_TLSV1,
d1558 1
a1558 1
	0,
a1560 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1568 5
a1572 1
	SSL_kEDH|SSL_aDSS|SSL_SEED|SSL_SHA1|SSL_TLSV1,
d1574 1
a1574 1
	0,
a1576 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1584 5
a1588 1
	SSL_kEDH|SSL_aRSA|SSL_SEED|SSL_SHA1|SSL_TLSV1,
d1590 1
a1590 1
	0,
a1592 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1600 5
a1604 1
	SSL_kEDH|SSL_aNULL|SSL_SEED|SSL_SHA1|SSL_TLSV1,
d1606 1
a1606 1
	0,
a1608 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d1615 14
a1628 12
	    {
            1,
            TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA,
            TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA,
            SSL_kECDH|SSL_aECDSA|SSL_eNULL|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            0,
            0,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1631 14
a1644 12
	    {
            1,
            TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA,
            TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA,
            SSL_kECDH|SSL_aECDSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1647 14
a1660 12
	    {
            1,
            TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
            TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
            SSL_kECDH|SSL_aECDSA|SSL_3DES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            168,
            168,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1663 30
a1692 12
	    {
            1,
            TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
            TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
            SSL_kECDH|SSL_aECDSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1694 15
a1708 27
	/* Cipher C005 */
	    {
            1,
            TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
            TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
            SSL_kECDH|SSL_aECDSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            256,
            256,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C006 */
	    {
            1,
            TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA,
            TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA,
            SSL_kECDHE|SSL_aECDSA|SSL_eNULL|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            0,
            0,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1711 14
a1724 12
	    {
            1,
            TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA,
            TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA,
            SSL_kECDHE|SSL_aECDSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1727 14
a1740 12
	    {
            1,
            TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
            TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
            SSL_kECDHE|SSL_aECDSA|SSL_3DES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            168,
            168,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1743 14
a1756 12
	    {
            1,
            TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
            TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
            SSL_kECDHE|SSL_aECDSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1759 14
a1772 12
	    {
            1,
            TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
            TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
            SSL_kECDHE|SSL_aECDSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            256,
            256,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1775 14
a1788 12
	    {
            1,
            TLS1_TXT_ECDH_RSA_WITH_NULL_SHA,
            TLS1_CK_ECDH_RSA_WITH_NULL_SHA,
            SSL_kECDH|SSL_aRSA|SSL_eNULL|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            0,
            0,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1791 14
a1804 12
	    {
            1,
            TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA,
            TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA,
            SSL_kECDH|SSL_aRSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1807 14
a1820 12
	    {
            1,
            TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA,
            TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA,
            SSL_kECDH|SSL_aRSA|SSL_3DES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            168,
            168,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1823 14
a1836 12
	    {
            1,
            TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA,
            TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA,
            SSL_kECDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1839 14
a1852 12
	    {
            1,
            TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA,
            TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA,
            SSL_kECDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            256,
            256,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1855 14
a1868 12
	    {
            1,
            TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA,
            TLS1_CK_ECDHE_RSA_WITH_NULL_SHA,
            SSL_kECDHE|SSL_aRSA|SSL_eNULL|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            0,
            0,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1871 14
a1884 12
	    {
            1,
            TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA,
            TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA,
            SSL_kECDHE|SSL_aRSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1887 14
a1900 12
	    {
            1,
            TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
            TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
            SSL_kECDHE|SSL_aRSA|SSL_3DES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            168,
            168,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1903 14
a1916 12
	    {
            1,
            TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA,
            TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA,
            SSL_kECDHE|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1919 14
a1932 12
	    {
            1,
            TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA,
            TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA,
            SSL_kECDHE|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            256,
            256,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1935 14
a1948 12
            {
            1,
            TLS1_TXT_ECDH_anon_WITH_NULL_SHA,
            TLS1_CK_ECDH_anon_WITH_NULL_SHA,
            SSL_kECDHE|SSL_aNULL|SSL_eNULL|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            0,
            0,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
	    },
d1951 14
a1964 12
            {
            1,
            TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA,
            TLS1_CK_ECDH_anon_WITH_RC4_128_SHA,
            SSL_kECDHE|SSL_aNULL|SSL_RC4|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
	    },
d1967 14
a1980 12
	    {
            1,
            TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA,
            TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA,
            SSL_kECDHE|SSL_aNULL|SSL_3DES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            168,
            168,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1983 14
a1996 12
	    {
            1,
            TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA,
            TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA,
            SSL_kECDHE|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d1999 14
a2012 12
	    {
            1,
            TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA,
            TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA,
            SSL_kECDHE|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            256,
            256,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
d2015 59
d2080 1
a2080 1
	ssl3_mac,
a2098 5
IMPLEMENT_ssl3_meth_func(sslv3_base_method,
			ssl_undefined_function,
			ssl_undefined_function,
			ssl_bad_method)

d2104 1
a2104 1
SSL_CIPHER *ssl3_get_cipher(unsigned int u)
d2126 2
a2127 4
	EVP_MD_CTX_init(&s3->finish_dgst1);
	EVP_MD_CTX_init(&s3->finish_dgst2);
	pq_64bit_init(&(s3->rrec.seq_num));
	pq_64bit_init(&(s3->wrec.seq_num));
d2142 7
d2151 1
a2151 1
		OPENSSL_free(s->s3->rbuf.buf);
d2153 1
a2153 1
		OPENSSL_free(s->s3->wbuf.buf);
d2167 4
a2170 5
	EVP_MD_CTX_cleanup(&s->s3->finish_dgst1);
	EVP_MD_CTX_cleanup(&s->s3->finish_dgst2);
	pq_64bit_free(&(s->s3->rrec.seq_num));
	pq_64bit_free(&(s->s3->wrec.seq_num));

d2181 9
d2212 7
a2218 4

	EVP_MD_CTX_cleanup(&s->s3->finish_dgst1);
	EVP_MD_CTX_cleanup(&s->s3->finish_dgst2);

d2418 25
a2442 1
  
d2700 7
a2706 1
  
d2713 1
d2763 7
a2769 1
  
d2790 1
a2790 1
SSL_CIPHER *ssl3_get_cipher_by_char(const unsigned char *p)
d2792 2
a2793 1
	SSL_CIPHER c,*cp;
d2798 1
a2798 4
	cp = (SSL_CIPHER *)OBJ_bsearch((char *)&c,
		(char *)ssl3_ciphers,
		SSL3_NUM_CIPHERS,sizeof(SSL_CIPHER),
		FP_ICC ssl_cipher_id_cmp);
d2824 6
a2829 2
	int i,j,ok;

d2831 1
a2831 1
	unsigned long alg,mask,emask;
d2847 8
a2854 8
        printf("Server has %d from %p:\n", sk_SSL_CIPHER_num(srvr), srvr);
        for(i=0 ; i < sk_SSL_CIPHER_num(srvr) ; ++i)
	    {
	    c=sk_SSL_CIPHER_value(srvr,i);
	    printf("%p:%s\n",c,c->name);
	    }
        printf("Client sent %d from %p:\n", sk_SSL_CIPHER_num(clnt), clnt);
        for(i=0 ; i < sk_SSL_CIPHER_num(clnt) ; ++i)
d2857 1
a2857 1
	    printf("%p:%s\n",c,c->name);
d2862 4
a2865 4
	    {
	    prio = srvr;
	    allow = clnt;
	    }
d2867 4
a2870 4
	    {
	    prio = clnt;
	    allow = srvr;
	    }
d2877 4
a2880 2
		mask=cert->mask;
		emask=cert->export_mask;
d2883 1
a2883 1
		printf("ssl3_choose_cipher %d alg= %lx\n", i,c->algorithms);
d2886 3
a2888 1
		alg=c->algorithms&(SSL_MKEY_MASK|SSL_AUTH_MASK);
d2890 5
a2894 5
                if (alg & SSL_KRB5) 
                        {
                        if ( !kssl_keytab_is_available(s->kssl_ctx) )
                            continue;
                        }
d2896 6
d2904 1
a2904 1
			ok=((alg & emask) == alg)?1:0;
d2906 2
a2907 2
			printf("%d:[%08lX:%08lX]%p:%s (export)\n",ok,alg,emask,
			       c,c->name);
d2912 1
a2912 1
			ok=((alg & mask) == alg)?1:0;
d2914 1
a2914 1
			printf("%d:[%08lX:%08lX]%p:%s\n",ok,alg,mask,c,
d2919 154
d3074 2
a3075 2
		j=sk_SSL_CIPHER_find(allow,c);
		if (j >= 0)
d3077 1
a3077 1
			ret=sk_SSL_CIPHER_value(allow,j);
d3087 3
a3089 1
	unsigned long alg;
d3091 11
a3101 1
	alg=s->s3->tmp.new_cipher->algorithms;
d3104 1
a3104 1
	if (alg & (SSL_kDHr|SSL_kEDH))
d3114 1
a3114 1
		(alg & (SSL_kEDH|SSL_kDHd|SSL_kDHr)))
d3131 1
a3131 4
	/* We should ask for fixed ECDH certificates only
	 * for SSL_kECDH (and not SSL_kECDHE)
	 */
	if ((alg & SSL_kECDH) && (s->version >= TLS1_VERSION))
d3140 1
a3140 1
	 * so we don't need to check for SSL_kECDH or SSL_kECDHE
d3152 1
d3170 2
d3177 9
a3185 1
		s->method->ssl_dispatch_alert(s);
d3192 4
a3298 3
		return(0);

	if (!(s->s3->flags & SSL3_FLAGS_ALLOW_UNSAFE_LEGACY_RENEGOTIATION))
@


1.14
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@d2595 3
@


1.14.6.1
log
@Pull Ben Lauries blind prefix injection fix for CVE-2009-3555 from
openssl 0.9.8l.

As suggested by markus@@, for -stable the header change is being
restricted to a private file, so the minor version is not cranked here.

Discussed with markus, djm, deraadt.
@
text
@a2594 3
	if (!(s->s3->flags & SSL3_FLAGS_ALLOW_UNSAFE_LEGACY_RENEGOTIATION))
		return(0);

@


1.14.2.1
log
@Pull Ben Lauries blind prefix injection fix for CVE-2009-3555 from
openssl 0.9.8l.

As suggested by markus@@, for -stable the header change is being
restricted to a private file, so the minor version is not cranked here.

Discussed with markus, djm, deraadt.
@
text
@a2594 3
	if (!(s->s3->flags & SSL3_FLAGS_ALLOW_UNSAFE_LEGACY_RENEGOTIATION))
		return(0);

@


1.13
log
@resolve conflicts
@
text
@d161 1
a161 1
	SSL_NOT_EXP|SSL_STRONG_NONE,
d267 1
a267 1
	SSL_NOT_EXP|SSL_HIGH,
d307 1
a307 1
	SSL_NOT_EXP|SSL_HIGH,
d346 1
a346 1
	SSL_NOT_EXP|SSL_HIGH,
d387 1
a387 1
	SSL_NOT_EXP|SSL_HIGH,
d426 1
a426 1
	SSL_NOT_EXP|SSL_HIGH,
d491 1
a491 1
	SSL_NOT_EXP|SSL_HIGH,
d566 1
a566 1
	SSL_NOT_EXP|SSL_HIGH,
d750 1
a750 1
	SSL_NOT_EXP|SSL_HIGH,
d763 1
a763 1
	SSL_NOT_EXP|SSL_HIGH,
d776 1
a776 1
	SSL_NOT_EXP|SSL_HIGH,
d789 1
a789 1
	SSL_NOT_EXP|SSL_HIGH,
d802 1
a802 1
	SSL_NOT_EXP|SSL_HIGH,
d815 1
a815 1
	SSL_NOT_EXP|SSL_HIGH,
d829 1
a829 1
	SSL_NOT_EXP|SSL_HIGH,
d842 1
a842 1
	SSL_NOT_EXP|SSL_HIGH,
d855 1
a855 1
	SSL_NOT_EXP|SSL_HIGH,
d868 1
a868 1
	SSL_NOT_EXP|SSL_HIGH,
d881 1
a881 1
	SSL_NOT_EXP|SSL_HIGH,
d894 1
a894 1
	SSL_NOT_EXP|SSL_HIGH,
@


1.12
log
@resolve conflicts
@
text
@d59 1
a59 1
 * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
d111 13
d130 4
d135 1
a135 1
const char *ssl3_version_str="SSLv3" OPENSSL_VERSION_PTEXT;
d139 1
a139 2
static long ssl3_default_timeout(void );

d161 1
a161 1
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
a167 69

/* anon DH */
/* Cipher 17 */
	{
	1,
	SSL3_TXT_ADH_RC4_40_MD5,
	SSL3_CK_ADH_RC4_40_MD5,
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5 |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	0,
	40,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 18 */
	{
	1,
	SSL3_TXT_ADH_RC4_128_MD5,
	SSL3_CK_ADH_RC4_128_MD5,
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5 |SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 19 */
	{
	1,
	SSL3_TXT_ADH_DES_40_CBC_SHA,
	SSL3_CK_ADH_DES_40_CBC_SHA,
	SSL_kEDH |SSL_aNULL|SSL_DES|SSL_SHA1|SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
	0,
	40,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 1A */
	{
	1,
	SSL3_TXT_ADH_DES_64_CBC_SHA,
	SSL3_CK_ADH_DES_64_CBC_SHA,
	SSL_kEDH |SSL_aNULL|SSL_DES  |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
	0,
	56,
	56,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 1B */
	{
	1,
	SSL3_TXT_ADH_DES_192_CBC_SHA,
	SSL3_CK_ADH_DES_192_CBC_SHA,
	SSL_kEDH |SSL_aNULL|SSL_3DES |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	0,
	168,
	168,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* RSA again */
d241 1
a241 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d254 1
a254 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d267 1
a267 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d274 1
a274 2

/*  The DH ciphers */
d281 1
a281 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d294 1
a294 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d307 1
a307 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d320 1
a320 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d333 1
a333 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d346 1
a346 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d361 1
a361 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d374 1
a374 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d387 1
a387 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d400 1
a400 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d413 1
a413 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d426 66
a491 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d545 2
a546 5
/* The Kerberos ciphers
** 20000107 VRS: And the first shall be last,
** in hopes of avoiding the lynx ssl renegotiation problem.
*/
/* Cipher 1E VRS */
d552 1
a552 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d560 1
a560 1
/* Cipher 1F VRS */
d566 1
a566 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d568 1
a568 1
	112,
d574 1
a574 1
/* Cipher 20 VRS */
d588 1
a588 1
/* Cipher 21 VRS */
d602 1
a602 1
/* Cipher 22 VRS */
d616 1
a616 1
/* Cipher 23 VRS */
d624 1
a624 1
	112,
d630 1
a630 1
/* Cipher 24 VRS */
d644 1
a644 1
/* Cipher 25 VRS */
d658 1
a658 1
/* Cipher 26 VRS */
d664 1
a664 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d672 1
a672 1
/* Cipher 27 VRS */
d686 1
a686 1
/* Cipher 28 VRS */
d694 1
a694 1
	128,
d700 1
a700 1
/* Cipher 29 VRS */
d714 1
a714 1
/* Cipher 2A VRS */
d728 1
a728 1
/* Cipher 2B VRS */
d736 81
a821 1
#endif	/* OPENSSL_NO_KRB5 */
d823 161
d986 2
a987 1
	/* New TLS Export CipherSuites */
d1014 1
d1021 1
a1021 1
	    SSL_EXPORT|SSL_EXP56|SSL_FIPS,
a1033 13
	    SSL_EXPORT|SSL_EXP56|SSL_FIPS,
	    0,
	    56,
	    56,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 64 */
	    {
	    1,
	    TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA,
	    TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA,
	    SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
a1036 12
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 65 */
	    {
	    1,
	    TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	    TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
a1037 135
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 66 */
	    {
	    1,
	    TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA,
	    TLS1_CK_DHE_DSS_WITH_RC4_128_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_MEDIUM,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS
	    },
#endif
	/* New AES ciphersuites */

	/* Cipher 2F */
	    {
	    1,
	    TLS1_TXT_RSA_WITH_AES_128_SHA,
	    TLS1_CK_RSA_WITH_AES_128_SHA,
	    SSL_kRSA|SSL_aRSA|SSL_AES|SSL_SHA |SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 30 */
	    {
	    0,
	    TLS1_TXT_DH_DSS_WITH_AES_128_SHA,
	    TLS1_CK_DH_DSS_WITH_AES_128_SHA,
	    SSL_kDHd|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 31 */
	    {
	    0,
	    TLS1_TXT_DH_RSA_WITH_AES_128_SHA,
	    TLS1_CK_DH_RSA_WITH_AES_128_SHA,
	    SSL_kDHr|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 32 */
	    {
	    1,
	    TLS1_TXT_DHE_DSS_WITH_AES_128_SHA,
	    TLS1_CK_DHE_DSS_WITH_AES_128_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 33 */
	    {
	    1,
	    TLS1_TXT_DHE_RSA_WITH_AES_128_SHA,
	    TLS1_CK_DHE_RSA_WITH_AES_128_SHA,
	    SSL_kEDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 34 */
	    {
	    1,
	    TLS1_TXT_ADH_WITH_AES_128_SHA,
	    TLS1_CK_ADH_WITH_AES_128_SHA,
	    SSL_kEDH|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },

	/* Cipher 35 */
	    {
	    1,
	    TLS1_TXT_RSA_WITH_AES_256_SHA,
	    TLS1_CK_RSA_WITH_AES_256_SHA,
	    SSL_kRSA|SSL_aRSA|SSL_AES|SSL_SHA |SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	    0,
	    256,
	    256,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 36 */
	    {
	    0,
	    TLS1_TXT_DH_DSS_WITH_AES_256_SHA,
	    TLS1_CK_DH_DSS_WITH_AES_256_SHA,
	    SSL_kDHd|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	    0,
	    256,
	    256,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 37 */
	    {
	    0,
	    TLS1_TXT_DH_RSA_WITH_AES_256_SHA,
	    TLS1_CK_DH_RSA_WITH_AES_256_SHA,
	    SSL_kDHr|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	    0,
	    256,
	    256,
d1041 1
a1041 1
	/* Cipher 38 */
d1044 4
a1047 4
	    TLS1_TXT_DHE_DSS_WITH_AES_256_SHA,
	    TLS1_CK_DHE_DSS_WITH_AES_256_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1049 2
a1050 2
	    256,
	    256,
d1054 1
a1054 1
	/* Cipher 39 */
d1057 4
a1060 4
	    TLS1_TXT_DHE_RSA_WITH_AES_256_SHA,
	    TLS1_CK_DHE_RSA_WITH_AES_256_SHA,
	    SSL_kEDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1062 2
a1063 2
	    256,
	    256,
d1067 1
a1067 1
	/* Cipher 3A */
d1070 4
a1073 4
	    TLS1_TXT_ADH_WITH_AES_256_SHA,
	    TLS1_CK_ADH_WITH_AES_256_SHA,
	    SSL_kEDH|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1075 2
a1076 2
	    256,
	    256,
d1078 483
a1560 1
	    SSL_ALL_STRENGTHS,
d1563 44
d1610 1
a1610 1
static SSL3_ENC_METHOD SSLv3_enc_data={
d1624 1
a1624 29
static SSL_METHOD SSLv3_data= {
	SSL3_VERSION,
	ssl3_new,
	ssl3_clear,
	ssl3_free,
	ssl_undefined_function,
	ssl_undefined_function,
	ssl3_read,
	ssl3_peek,
	ssl3_write,
	ssl3_shutdown,
	ssl3_renegotiate,
	ssl3_renegotiate_check,
	ssl3_ctrl,
	ssl3_ctx_ctrl,
	ssl3_get_cipher_by_char,
	ssl3_put_cipher_by_char,
	ssl3_pending,
	ssl3_num_ciphers,
	ssl3_get_cipher,
	ssl_bad_method,
	ssl3_default_timeout,
	&SSLv3_enc_data,
	ssl_undefined_function,
	ssl3_callback_ctrl,
	ssl3_ctx_callback_ctrl,
	};

static long ssl3_default_timeout(void)
d1631 4
a1634 4
SSL_METHOD *sslv3_base_method(void)
	{
	return(&SSLv3_data);
	}
d1665 2
d1692 5
d1701 3
d1727 4
d1869 109
d1984 1
a1984 1
long ssl3_callback_ctrl(SSL *s, int cmd, void (*fp)())
d2022 13
d2127 77
d2220 1
a2220 1
long ssl3_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)())
d2242 24
d2276 1
a2276 3
	static int init=1;
	static SSL_CIPHER *sorted[SSL3_NUM_CIPHERS];
	SSL_CIPHER c,*cp= &c,**cpp;
a2277 20
	int i;

	if (init)
		{
		CRYPTO_w_lock(CRYPTO_LOCK_SSL);

		if (init)
			{
			for (i=0; i<SSL3_NUM_CIPHERS; i++)
				sorted[i]= &(ssl3_ciphers[i]);

			qsort(sorted,
				SSL3_NUM_CIPHERS,sizeof(SSL_CIPHER *),
				FP_ICC ssl_cipher_ptr_id_cmp);

			init=0;
			}
		
		CRYPTO_w_unlock(CRYPTO_LOCK_SSL);
		}
d2281 6
a2286 6
	cpp=(SSL_CIPHER **)OBJ_bsearch((char *)&cp,
		(char *)sorted,
		SSL3_NUM_CIPHERS,sizeof(SSL_CIPHER *),
		FP_ICC ssl_cipher_ptr_id_cmp);
	if ((cpp == NULL) || !(*cpp)->valid)
		return(NULL);
d2288 1
a2288 1
		return(*cpp);
d2311 1
a2391 1
	
d2436 20
d2483 1
a2483 1
		ssl3_dispatch_alert(s);
d2489 1
a2489 1
		ssl3_read_bytes(s,0,NULL,0,0);
d2544 2
a2545 2
		ret=ssl3_write_bytes(s,SSL3_RT_APPLICATION_DATA,
				     buf,len);
d2559 1
a2559 1
	ret=ssl3_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
d2568 1
a2568 1
		ret=ssl3_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
@


1.11
log
@resolve conflicts
@
text
@d838 1
a838 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d851 1
a851 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d864 1
a864 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d877 1
a877 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d890 1
a890 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d903 1
a903 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
@


1.10
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d145 1
a145 1
	SSL_NOT_EXP|SSL_STRONG_NONE,
d186 1
a186 1
	SSL_EXPORT|SSL_EXP40,
d199 1
a199 1
	SSL_NOT_EXP|SSL_LOW,
d212 1
a212 1
	SSL_NOT_EXP|SSL_HIGH,
d294 1
a294 1
	SSL_EXPORT|SSL_EXP40,
d307 1
a307 1
	SSL_NOT_EXP|SSL_LOW,
d320 1
a320 1
	SSL_NOT_EXP|SSL_HIGH,
d335 1
a335 1
	SSL_EXPORT|SSL_EXP40,
d348 1
a348 1
	SSL_NOT_EXP|SSL_LOW,
d361 1
a361 1
	SSL_NOT_EXP|SSL_HIGH,
d374 1
a374 1
	SSL_EXPORT|SSL_EXP40,
d387 1
a387 1
	SSL_NOT_EXP|SSL_LOW,
d400 1
a400 1
	SSL_NOT_EXP|SSL_HIGH,
d415 1
a415 1
	SSL_EXPORT|SSL_EXP40,
d428 1
a428 1
	SSL_NOT_EXP|SSL_LOW,
d441 1
a441 1
	SSL_NOT_EXP|SSL_HIGH,
d454 1
a454 1
	SSL_EXPORT|SSL_EXP40,
d467 1
a467 1
	SSL_NOT_EXP|SSL_LOW,
d480 1
a480 1
	SSL_NOT_EXP|SSL_HIGH,
d544 1
a544 1
	SSL_NOT_EXP|SSL_LOW,
d558 1
a558 1
	SSL_NOT_EXP|SSL_HIGH,
d656 1
a656 1
	SSL_EXPORT|SSL_EXP40,
d770 1
a770 1
	    SSL_EXPORT|SSL_EXP56,
d783 1
a783 1
	    SSL_EXPORT|SSL_EXP56,
d838 1
a838 1
	    SSL_NOT_EXP|SSL_MEDIUM,
d851 1
a851 1
	    SSL_NOT_EXP|SSL_MEDIUM,
d864 1
a864 1
	    SSL_NOT_EXP|SSL_MEDIUM,
d877 1
a877 1
	    SSL_NOT_EXP|SSL_MEDIUM,
d890 1
a890 1
	    SSL_NOT_EXP|SSL_MEDIUM,
d903 1
a903 1
	    SSL_NOT_EXP|SSL_MEDIUM,
d917 1
a917 1
	    SSL_NOT_EXP|SSL_HIGH,
d930 1
a930 1
	    SSL_NOT_EXP|SSL_HIGH,
d943 1
a943 1
	    SSL_NOT_EXP|SSL_HIGH,
d956 1
a956 1
	    SSL_NOT_EXP|SSL_HIGH,
d969 1
a969 1
	    SSL_NOT_EXP|SSL_HIGH,
d982 1
a982 1
	    SSL_NOT_EXP|SSL_HIGH,
d1060 1
a1060 1
int ssl3_pending(SSL *s)
@


1.9
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d517 1
d531 1
d538 1
a538 1
/* Cipher 21 VRS */
d541 2
a542 2
	SSL3_TXT_KRB5_DES_40_CBC_SHA,
	SSL3_CK_KRB5_DES_40_CBC_SHA,
d544 1
a544 1
	SSL_EXPORT|SSL_EXP40,
d546 1
a546 1
	40,
d552 15
a566 1
/* Cipher 22 VRS */
d569 4
a572 4
	SSL3_TXT_KRB5_DES_40_CBC_MD5,
	SSL3_CK_KRB5_DES_40_CBC_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_MD5    |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
d574 2
a575 2
	40,
	56,
d580 1
a580 1
/* Cipher 23 VRS */
d583 4
a586 4
	SSL3_TXT_KRB5_DES_64_CBC_SHA,
	SSL3_CK_KRB5_DES_64_CBC_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_SHA1   |SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
d588 2
a589 2
	56,
	56,
d594 1
a594 1
/* Cipher 24 VRS */
d608 1
a608 1
/* Cipher 25 VRS */
d611 3
a613 3
	SSL3_TXT_KRB5_DES_192_CBC3_SHA,
	SSL3_CK_KRB5_DES_192_CBC3_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_3DES|SSL_SHA1  |SSL_SSLV3,
d622 28
d653 74
a726 4
	SSL3_TXT_KRB5_DES_192_CBC3_MD5,
	SSL3_CK_KRB5_DES_192_CBC3_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_3DES|SSL_MD5   |SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
d728 2
a729 2
	112,
	168,
d1105 1
a1105 1
	memset(s->s3,0,sizeof *s->s3);
d1460 4
a1463 2
		for (i=0; i<SSL3_NUM_CIPHERS; i++)
			sorted[i]= &(ssl3_ciphers[i]);
d1465 3
a1467 3
		qsort(	(char *)sorted,
			SSL3_NUM_CIPHERS,sizeof(SSL_CIPHER *),
			FP_ICC ssl_cipher_ptr_id_cmp);
d1469 3
a1472 2

		init=0;
@


1.8
log
@do not propose IDEA cipher on SSL connection.  tested by beck
noticed by Sverre Froyen <sverre@@viewmark.com>
@
text
@d132 1
a132 1
	SSL_NOT_EXP,
d145 1
a145 1
	SSL_NOT_EXP,
d495 1
a495 1
	SSL_NOT_EXP,
d509 1
a509 1
	SSL_NOT_EXP,
@


1.7
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d274 1
d287 1
@


1.6
log
@openssl-engine-0.9.6a merge
@
text
@d59 1
a59 1
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
a112 2
#include <openssl/md5.h>
#include <openssl/sha.h>
d115 2
d173 1
a173 1
	SSL_NOT_EXP,
d199 1
a199 1
	SSL_NOT_EXP,
d212 1
a212 1
	SSL_NOT_EXP,
d521 1
a521 1
	SSL_NOT_EXP,
d529 91
d706 1
a706 1
	    SSL_NOT_EXP,
d714 159
d946 3
d958 2
d981 1
a981 1
#ifndef NO_DH
d987 2
d997 1
d1008 1
a1008 1
#ifndef NO_DH
d1013 7
a1019 2
	rp=s->s3->rbuf.buf;
	wp=s->s3->wbuf.buf;
d1022 4
a1025 2
	if (rp != NULL) s->s3->rbuf.buf=rp;
	if (wp != NULL) s->s3->wbuf.buf=wp;
d1037 1
a1037 1
long ssl3_ctrl(SSL *s, int cmd, long larg, char *parg)
d1041 1
a1041 1
#if !defined(NO_DSA) || !defined(NO_RSA)
d1043 1
a1043 1
#ifndef NO_RSA
d1047 1
a1047 1
#ifndef NO_DSA
d1081 1
a1081 1
#ifndef NO_RSA
d1114 1
a1114 1
#ifndef NO_DH
d1160 1
a1160 1
#if !defined(NO_DSA) || !defined(NO_RSA)
d1162 1
a1162 1
#ifndef NO_RSA
d1165 1
a1165 1
#ifndef NO_DSA
d1180 1
a1180 1
#ifndef NO_RSA
d1187 1
a1187 1
#ifndef NO_DH
d1200 1
a1200 1
long ssl3_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, char *parg)
d1208 1
a1208 1
#ifndef NO_RSA
d1253 1
a1253 1
#ifndef NO_DH
d1310 1
a1310 1
#ifndef NO_RSA
d1317 1
a1317 1
#ifndef NO_DH
d1382 2
a1383 2
SSL_CIPHER *ssl3_choose_cipher(SSL *s, STACK_OF(SSL_CIPHER) *have,
	     STACK_OF(SSL_CIPHER) *pref)
d1386 1
d1394 9
a1402 1
	sk_SSL_CIPHER_set_cmp_func(pref,ssl_cipher_ptr_id_cmp);
d1405 2
a1406 2
	printf("Have:\n");
	for(i=0 ; i < sk_num(pref) ; ++i)
d1408 7
a1414 1
	    c=(SSL_CIPHER *)sk_value(pref,i);
d1419 12
a1430 1
	for (i=0; i<sk_SSL_CIPHER_num(have); i++)
d1432 1
a1432 1
		c=sk_SSL_CIPHER_value(have,i);
d1438 4
d1443 7
d1469 1
a1469 1
		j=sk_SSL_CIPHER_find(pref,c);
d1472 1
a1472 1
			ret=sk_SSL_CIPHER_value(pref,j);
d1486 1
a1486 1
#ifndef NO_DH
d1489 1
a1489 1
#  ifndef NO_RSA
d1492 1
a1492 1
#  ifndef NO_DSA
d1499 1
a1499 1
#  ifndef NO_RSA
d1502 1
a1502 1
#  ifndef NO_DSA
d1506 2
a1507 2
#endif /* !NO_DH */
#ifndef NO_RSA
d1510 1
a1510 1
#ifndef NO_DSA
d1617 1
a1617 1
	if ((ret == -1) && (s->s3->in_read_app_data == 0))
d1622 1
a1622 2
		 * and thinks that application data makes sense here (signalled
		 * by resetting 'in_read_app_data', strangely); so disable
@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@d58 53
a693 1
/* The problem is that it may not be the correct record type */
d696 1
a696 1
	return(s->s3->rrec.length);
d1244 1
a1244 1
		ssl3_read_bytes(s,0,NULL,0);
d1307 1
a1307 1
int ssl3_read(SSL *s, void *buf, int len)
d1314 1
a1314 1
	ret=ssl3_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len);
d1324 1
a1324 1
		ret=ssl3_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len);
d1333 1
a1333 1
int ssl3_peek(SSL *s, char *buf, int len)
d1335 2
a1336 2
	SSL3_RECORD *rr;
	int n;
d1338 3
a1340 15
	rr= &(s->s3->rrec);
	if ((rr->length == 0) || (rr->type != SSL3_RT_APPLICATION_DATA))
		{
		n=ssl3_read(s,buf,1);
		if (n <= 0) return(n);
		rr->length++;
		rr->off--;
		}

	if ((unsigned int)len > rr->length)
		n=rr->length;
	else
		n=len;
	memcpy(buf,&(rr->data[rr->off]),(unsigned int)n);
	return(n);
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d651 1
a651 1
	if ((s3=Malloc(sizeof *s3)) == NULL) goto err;
d669 1
a669 1
		Free(s->s3->rbuf.buf);
d671 1
a671 1
		Free(s->s3->wbuf.buf);
d673 1
a673 1
		Free(s->s3->rrec.comp);
d681 1
a681 1
	Free(s->s3);
d695 1
a695 1
		Free(s->s3->rrec.comp);
d1044 1
a1044 1
		(int (*)())ssl_cipher_ptr_id_cmp);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d774 2
a775 1
			if (rsa == NULL) {
d778 3
a780 2
			}
			if ((rsa = RSAPrivateKey_dup(rsa)) == NULL) {
d783 1
a783 1
			}
d801 2
a802 1
			if (dh == NULL) {
d805 3
a807 7
			}
			if ((dh = DHparams_dup(dh)) == NULL) {
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_DH_LIB);
				return(ret);
			}
			if (!DH_generate_key(dh)) {
				DH_free(dh);
d810 10
a819 1
			}
d854 2
a855 2
		    	{
			SSLerr(SSL_F_SSL3_CTRL, ERR_R_MALLOC_FAILURE);
a939 1
		int rret=0;
d942 1
a942 2
		if (	((new=DHparams_dup(dh)) == NULL) ||
			(!DH_generate_key(new)))
d945 1
a945 1
			if (new != NULL) DH_free(new);
d947 1
a947 1
		else
d949 11
a959 6
			if (cert->dh_tmp != NULL)
				DH_free(cert->dh_tmp);
			cert->dh_tmp=new;
			rret=1;
			}
		return(rret);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d78 4
a81 1
	SSL_kRSA|SSL_aRSA|SSL_eNULL |SSL_MD5|SSL_NOT_EXP|SSL_SSLV3,
d84 1
d91 4
a94 1
	SSL_kRSA|SSL_aRSA|SSL_eNULL |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3,
d97 1
d106 2
a107 1
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5 |SSL_EXP40|SSL_SSLV3,
d109 2
d112 1
d119 2
a120 1
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5|SSL_NOT_EXP|SSL_SSLV3,
d122 2
d125 1
d132 2
a133 1
	SSL_kEDH |SSL_aNULL|SSL_DES|SSL_SHA1|SSL_EXP40|SSL_SSLV3,
d135 2
d138 1
d145 2
a146 1
	SSL_kEDH |SSL_aNULL|SSL_DES  |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3,
d148 2
d151 1
d158 2
a159 1
	SSL_kEDH |SSL_aNULL|SSL_3DES |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3,
d161 2
d164 1
d173 2
a174 1
	SSL_kRSA|SSL_aRSA|SSL_RC4  |SSL_MD5 |SSL_EXP40|SSL_SSLV3,
d176 2
d179 1
d186 2
a187 1
	SSL_kRSA|SSL_aRSA|SSL_RC4  |SSL_MD5|SSL_NOT_EXP|SSL_SSLV3|SSL_MEDIUM,
d189 2
d192 1
d199 2
a200 1
	SSL_kRSA|SSL_aRSA|SSL_RC4  |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_MEDIUM,
d202 2
d205 1
d212 2
a213 1
	SSL_kRSA|SSL_aRSA|SSL_RC2  |SSL_MD5 |SSL_EXP40|SSL_SSLV3,
d215 2
d218 1
d225 2
a226 1
	SSL_kRSA|SSL_aRSA|SSL_IDEA |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_MEDIUM,
d228 2
d231 1
d238 2
a239 1
	SSL_kRSA|SSL_aRSA|SSL_DES|SSL_SHA1|SSL_EXP40|SSL_SSLV3,
d241 2
d244 1
d251 2
a252 1
	SSL_kRSA|SSL_aRSA|SSL_DES  |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_LOW,
d254 2
d257 1
d264 2
a265 1
	SSL_kRSA|SSL_aRSA|SSL_3DES |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_HIGH,
d267 2
d270 1
d279 2
a280 1
	SSL_kDHd |SSL_aDH|SSL_DES|SSL_SHA1|SSL_EXP40|SSL_SSLV3,
d282 2
d285 1
d292 2
a293 1
	SSL_kDHd |SSL_aDH|SSL_DES  |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_LOW,
d295 2
d298 1
d305 2
a306 1
	SSL_kDHd |SSL_aDH|SSL_3DES |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_HIGH,
d308 2
d311 1
d318 2
a319 1
	SSL_kDHr |SSL_aDH|SSL_DES|SSL_SHA1|SSL_EXP40|SSL_SSLV3,
d321 2
d324 1
d331 2
a332 1
	SSL_kDHr |SSL_aDH|SSL_DES  |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_LOW,
d334 2
d337 1
d344 2
a345 1
	SSL_kDHr |SSL_aDH|SSL_3DES |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_HIGH,
d347 2
d350 1
d359 2
a360 1
	SSL_kEDH|SSL_aDSS|SSL_DES|SSL_SHA1|SSL_EXP40|SSL_SSLV3,
d362 2
d365 1
d372 2
a373 1
	SSL_kEDH|SSL_aDSS|SSL_DES  |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_LOW,
d375 2
d378 1
d385 2
a386 1
	SSL_kEDH|SSL_aDSS|SSL_3DES |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_HIGH,
d388 2
d391 1
d398 2
a399 1
	SSL_kEDH|SSL_aRSA|SSL_DES|SSL_SHA1|SSL_EXP40|SSL_SSLV3,
d401 2
d404 1
d411 2
a412 1
	SSL_kEDH|SSL_aRSA|SSL_DES  |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_LOW,
d414 2
d417 1
d424 2
a425 1
	SSL_kEDH|SSL_aRSA|SSL_3DES |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3|SSL_HIGH,
d427 2
d430 1
d439 4
a442 1
	SSL_kFZA|SSL_aFZA |SSL_eNULL |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3,
d445 1
d453 4
a456 1
	SSL_kFZA|SSL_aFZA |SSL_eFZA |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3,
d459 1
d467 2
a468 1
	SSL_kFZA|SSL_aFZA |SSL_RC4  |SSL_SHA1|SSL_NOT_EXP|SSL_SSLV3,
d470 2
d473 1
d483 2
a484 1
	    SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_EXP56|SSL_TLSV1,
d486 4
a489 1
	    SSL_ALL_CIPHERS
d496 2
a497 1
	    SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_EXP56|SSL_TLSV1,
d499 4
a502 1
	    SSL_ALL_CIPHERS
d509 2
a510 1
	    SSL_kRSA|SSL_aRSA|SSL_DES|SSL_SHA|SSL_EXP56|SSL_TLSV1,
d512 4
a515 1
	    SSL_ALL_CIPHERS
d522 2
a523 1
	    SSL_kEDH|SSL_aDSS|SSL_DES|SSL_SHA|SSL_EXP56|SSL_TLSV1,
d525 4
a528 1
	    SSL_ALL_CIPHERS
d535 2
a536 1
	    SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_SHA|SSL_EXP56|SSL_TLSV1,
d538 4
a541 1
	    SSL_ALL_CIPHERS
d548 2
a549 1
	    SSL_kEDH|SSL_aDSS|SSL_RC4|SSL_SHA|SSL_EXP56|SSL_TLSV1,
d551 4
a554 1
	    SSL_ALL_CIPHERS
d562 1
d564 4
a567 1
	    SSL_ALL_CIPHERS
d611 3
d649 1
a649 1
	SSL3_CTX *s3;
d651 2
a652 2
	if ((s3=(SSL3_CTX *)Malloc(sizeof(SSL3_CTX))) == NULL) goto err;
	memset(s3,0,sizeof(SSL3_CTX));
a654 7
	/*
	s->s3->tmp.ca_names=NULL;
	s->s3->tmp.key_block=NULL;
	s->s3->tmp.key_block_length=0;
	s->s3->rbuf.buf=NULL;
	s->s3->wbuf.buf=NULL;
	*/
d680 1
a680 1
	memset(s->s3,0,sizeof(SSL3_CTX));
d698 4
d706 1
a706 1
	memset(s->s3,0,sizeof(SSL3_CTX));
d789 4
a792 1
		s->cert->rsa_tmp_cb = (RSA *(*)(SSL *, int, int))parg;
d819 48
a866 1
		s->cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))parg;
d922 4
a925 1
		cert->rsa_tmp_cb=(RSA *(*)(SSL *, int, int))parg;
d952 4
a955 1
		cert->dh_tmp_cb=(DH *(*)(SSL *, int, int))parg;
d974 28
a1053 15
int ssl3_part_read(SSL *s, int i)
	{
	s->rwstate=SSL_READING;

	if (i < 0)
		{
		return(i);
		}
	else
		{
		s->init_num+=i;
		return(0);
		}
	}

d1085 1
a1085 1
		if (SSL_IS_EXPORT(c->algorithms))
d1254 6
a1259 2
		ERR_get_error(); /* clear the error */
		s->s3->in_read_app_data=0;
d1316 1
a1316 1
need to go to SSL_ST_ACCEPT.
@


1.1
log
@Initial revision
@
text
@d60 3
a62 1
#include "objects.h"
d65 1
a65 1
char *ssl3_version_str="SSLv3 part of SSLeay 0.9.0b 29-Jun-1998";
a68 1
#ifndef NOPROTO
a69 3
#else
static long ssl3_default_timeout();
#endif
d71 1
a71 1
SSL_CIPHER ssl3_ciphers[]={
d98 1
a98 1
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5 |SSL_EXP|SSL_SSLV3,
d116 1
a116 1
	SSL_kEDH |SSL_aNULL|SSL_DES|SSL_SHA1|SSL_EXP|SSL_SSLV3,
d145 1
a145 1
	SSL_kRSA|SSL_aRSA|SSL_RC4  |SSL_MD5 |SSL_EXP|SSL_SSLV3,
d172 1
a172 1
	SSL_kRSA|SSL_aRSA|SSL_RC2  |SSL_MD5 |SSL_EXP|SSL_SSLV3,
d190 1
a190 1
	SSL_kRSA|SSL_aRSA|SSL_DES|SSL_SHA1|SSL_EXP|SSL_SSLV3,
d219 1
a219 1
	SSL_kDHd |SSL_aDH|SSL_DES|SSL_SHA1|SSL_EXP|SSL_SSLV3,
d246 1
a246 1
	SSL_kDHr |SSL_aDH|SSL_DES|SSL_SHA1|SSL_EXP|SSL_SSLV3,
d275 1
a275 1
	SSL_kEDH|SSL_aDSS|SSL_DES|SSL_SHA1|SSL_EXP|SSL_SSLV3,
d302 1
a302 1
	SSL_kEDH|SSL_aRSA|SSL_DES|SSL_SHA1|SSL_EXP|SSL_SSLV3,
d356 67
d452 1
d465 1
a465 1
static long ssl3_default_timeout()
d472 1
a472 1
SSL_METHOD *sslv3_base_method()
d477 1
a477 1
int ssl3_num_ciphers()
d482 1
a482 2
SSL_CIPHER *ssl3_get_cipher(u)
unsigned int u;
d491 1
a491 2
int ssl3_pending(s)
SSL *s;
d496 1
a496 2
int ssl3_new(s)
SSL *s;
d518 1
a518 2
void ssl3_free(s)
SSL *s;
d520 3
d528 2
d535 1
a535 1
		sk_pop_free(s->s3->tmp.ca_names,X509_NAME_free);
d541 1
a541 2
void ssl3_clear(s)
SSL *s;
d547 7
a553 1
		sk_pop_free(s->s3->tmp.ca_names,X509_NAME_free);
d561 3
d572 1
a572 5
long ssl3_ctrl(s,cmd,larg,parg)
SSL *s;
int cmd;
long larg;
char *parg;
d576 20
d613 58
d677 1
a677 5
long ssl3_ctx_ctrl(ctx,cmd,larg,parg)
SSL_CTX *ctx;
int cmd;
long larg;
char *parg;
d681 1
a681 1
	cert=ctx->default_cert;
d694 1
a694 1
		break;
d722 1
a722 1
		break;
d724 1
a724 1
		cert->rsa_tmp_cb=(RSA *(*)())parg;
d731 1
a738 1
			return(0);
d745 1
a745 1
			return(1);
d747 1
d749 1
a749 1
		break;
d751 1
a751 1
		cert->dh_tmp_cb=(DH *(*)())parg;
d754 10
d772 1
a772 2
SSL_CIPHER *ssl3_get_cipher_by_char(p)
unsigned char *p;
d782 1
a782 1
		init=0;
d790 4
d808 1
a808 3
int ssl3_put_cipher_by_char(c,p)
SSL_CIPHER *c;
unsigned char *p;
d822 1
a822 3
int ssl3_part_read(s,i)
SSL *s;
int i;
d837 2
a838 3
SSL_CIPHER *ssl3_choose_cipher(s,have,pref)
SSL *s;
STACK *have,*pref;
d845 4
a848 5
	/* Lets see which ciphers we can supported */
	if (s->cert != NULL)
		cert=s->cert;
	else
		cert=s->ctx->default_cert;
d850 8
a857 5
	ssl_set_cert_masks(cert);
	mask=cert->mask;
	emask=cert->export_mask;
			
	sk_set_cmp_func(pref,ssl_cipher_ptr_id_cmp);
d859 1
a859 1
	for (i=0; i<sk_num(have); i++)
d861 6
a866 1
		c=(SSL_CIPHER *)sk_value(have,i);
d868 1
a868 1
		if (alg & SSL_EXPORT)
d872 2
a873 1
			printf("%d:[%08lX:%08lX]%s\n",ok,alg,mask,c->name);
d880 2
a881 1
			printf("%d:[%08lX:%08lX]%s\n",ok,alg,mask,c->name);
d887 1
a887 1
		j=sk_find(pref,(char *)c);
d890 1
a890 1
			ret=(SSL_CIPHER *)sk_value(pref,j);
d897 1
a897 3
int ssl3_get_req_cert_type(s,p)
SSL *s;
unsigned char *p;
d907 1
a907 1
#ifndef NO_RSA
d909 2
a910 2
#endif
#ifndef NO_DSA
d912 1
a912 1
#endif
d917 1
a917 1
#ifndef NO_RSA
d919 2
a920 2
#endif
#ifndef NO_DSA
d922 1
a922 1
#endif
d928 1
d930 1
d934 1
a934 2
int ssl3_shutdown(s)
SSL *s;
d974 1
a974 4
int ssl3_write(s,buf,len)
SSL *s;
char *buf;
int len;
a976 1
	BIO *under;
d999 1
a999 1
				(char *)buf,len);
d1010 4
a1013 5
		/* We have flushed the buffer */
		under=BIO_pop(s->wbio);
		s->wbio=under;
		BIO_free(s->bbio);
		s->bbio=NULL;
a1015 2

		s->s3->flags&= ~SSL3_FLAGS_POP_BUFFER;
d1020 1
a1020 1
			(char *)buf,len);
d1027 1
a1027 4
int ssl3_read(s,buf,len)
SSL *s;
char *buf;
int len;
d1049 1
a1049 4
int ssl3_peek(s,buf,len)
SSL *s;
char *buf;
int len;
d1071 1
a1071 2
int ssl3_renegotiate(s)
SSL *s;
d1083 1
a1083 2
int ssl3_renegotiate_check(s)
SSL *s;
a1106 1

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a57 53
/* ====================================================================
 * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
d60 1
a60 1
#include <openssl/objects.h>
a61 2
#include "kssl_lcl.h"
#include <openssl/md5.h>
d63 1
a63 1
const char *ssl3_version_str="SSLv3" OPENSSL_VERSION_PTEXT;
d67 1
d69 3
d73 1
a73 1
OPENSSL_GLOBAL SSL_CIPHER ssl3_ciphers[]={
d80 1
a80 4
	SSL_kRSA|SSL_aRSA|SSL_eNULL |SSL_MD5|SSL_SSLV3,
	SSL_NOT_EXP,
	0,
	0,
a82 1
	SSL_ALL_STRENGTHS,
d89 1
a89 4
	SSL_kRSA|SSL_aRSA|SSL_eNULL |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP,
	0,
	0,
a91 1
	SSL_ALL_STRENGTHS,
d100 1
a100 2
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5 |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
a101 2
	40,
	128,
a102 1
	SSL_ALL_STRENGTHS,
d109 1
a109 2
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5 |SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
a110 2
	128,
	128,
a111 1
	SSL_ALL_STRENGTHS,
d118 1
a118 2
	SSL_kEDH |SSL_aNULL|SSL_DES|SSL_SHA1|SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
a119 2
	40,
	128,
a120 1
	SSL_ALL_STRENGTHS,
d127 1
a127 2
	SSL_kEDH |SSL_aNULL|SSL_DES  |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
a128 2
	56,
	56,
a129 1
	SSL_ALL_STRENGTHS,
d136 1
a136 2
	SSL_kEDH |SSL_aNULL|SSL_3DES |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
a137 2
	168,
	168,
a138 1
	SSL_ALL_STRENGTHS,
d147 1
a147 2
	SSL_kRSA|SSL_aRSA|SSL_RC4  |SSL_MD5 |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
a148 2
	40,
	128,
a149 1
	SSL_ALL_STRENGTHS,
d156 1
a156 2
	SSL_kRSA|SSL_aRSA|SSL_RC4  |SSL_MD5|SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
a157 2
	128,
	128,
a158 1
	SSL_ALL_STRENGTHS,
d165 1
a165 2
	SSL_kRSA|SSL_aRSA|SSL_RC4  |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
a166 2
	128,
	128,
a167 1
	SSL_ALL_STRENGTHS,
d174 1
a174 2
	SSL_kRSA|SSL_aRSA|SSL_RC2  |SSL_MD5 |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
a175 2
	40,
	128,
a176 1
	SSL_ALL_STRENGTHS,
d183 1
a183 2
	SSL_kRSA|SSL_aRSA|SSL_IDEA |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
a184 2
	128,
	128,
a185 1
	SSL_ALL_STRENGTHS,
d192 1
a192 2
	SSL_kRSA|SSL_aRSA|SSL_DES|SSL_SHA1|SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
a193 2
	40,
	56,
a194 1
	SSL_ALL_STRENGTHS,
d201 1
a201 2
	SSL_kRSA|SSL_aRSA|SSL_DES  |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
a202 2
	56,
	56,
a203 1
	SSL_ALL_STRENGTHS,
d210 1
a210 2
	SSL_kRSA|SSL_aRSA|SSL_3DES |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
a211 2
	168,
	168,
a212 1
	SSL_ALL_STRENGTHS,
d221 1
a221 2
	SSL_kDHd |SSL_aDH|SSL_DES|SSL_SHA1|SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
a222 2
	40,
	56,
a223 1
	SSL_ALL_STRENGTHS,
d230 1
a230 2
	SSL_kDHd |SSL_aDH|SSL_DES  |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
a231 2
	56,
	56,
a232 1
	SSL_ALL_STRENGTHS,
d239 1
a239 2
	SSL_kDHd |SSL_aDH|SSL_3DES |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
a240 2
	168,
	168,
a241 1
	SSL_ALL_STRENGTHS,
d248 1
a248 2
	SSL_kDHr |SSL_aDH|SSL_DES|SSL_SHA1|SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
a249 2
	40,
	56,
a250 1
	SSL_ALL_STRENGTHS,
d257 1
a257 2
	SSL_kDHr |SSL_aDH|SSL_DES  |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
a258 2
	56,
	56,
a259 1
	SSL_ALL_STRENGTHS,
d266 1
a266 2
	SSL_kDHr |SSL_aDH|SSL_3DES |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
a267 2
	168,
	168,
a268 1
	SSL_ALL_STRENGTHS,
d277 1
a277 2
	SSL_kEDH|SSL_aDSS|SSL_DES|SSL_SHA1|SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
a278 2
	40,
	56,
a279 1
	SSL_ALL_STRENGTHS,
d286 1
a286 2
	SSL_kEDH|SSL_aDSS|SSL_DES  |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
a287 2
	56,
	56,
a288 1
	SSL_ALL_STRENGTHS,
d295 1
a295 2
	SSL_kEDH|SSL_aDSS|SSL_3DES |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
a296 2
	168,
	168,
a297 1
	SSL_ALL_STRENGTHS,
d304 1
a304 2
	SSL_kEDH|SSL_aRSA|SSL_DES|SSL_SHA1|SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
a305 2
	40,
	56,
a306 1
	SSL_ALL_STRENGTHS,
d313 1
a313 2
	SSL_kEDH|SSL_aRSA|SSL_DES  |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
a314 2
	56,
	56,
a315 1
	SSL_ALL_STRENGTHS,
d322 1
a322 2
	SSL_kEDH|SSL_aRSA|SSL_3DES |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
a323 2
	168,
	168,
a324 1
	SSL_ALL_STRENGTHS,
d333 1
a333 4
	SSL_kFZA|SSL_aFZA |SSL_eNULL |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP,
	0,
	0,
a335 1
	SSL_ALL_STRENGTHS,
d343 1
a343 4
	SSL_kFZA|SSL_aFZA |SSL_eFZA |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP,
	0,
	0,
a345 1
	SSL_ALL_STRENGTHS,
d353 1
a353 2
	SSL_kFZA|SSL_aFZA |SSL_RC4  |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
a354 2
	128,
	128,
a355 1
	SSL_ALL_STRENGTHS,
a357 345
#ifndef OPENSSL_NO_KRB5
/* The Kerberos ciphers
** 20000107 VRS: And the first shall be last,
** in hopes of avoiding the lynx ssl renegotiation problem.
*/
/* Cipher 21 VRS */
	{
	1,
	SSL3_TXT_KRB5_DES_40_CBC_SHA,
	SSL3_CK_KRB5_DES_40_CBC_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_SHA1   |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	0,
	40,
	56,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 22 VRS */
	{
	1,
	SSL3_TXT_KRB5_DES_40_CBC_MD5,
	SSL3_CK_KRB5_DES_40_CBC_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_MD5    |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	0,
	40,
	56,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 23 VRS */
	{
	1,
	SSL3_TXT_KRB5_DES_64_CBC_SHA,
	SSL3_CK_KRB5_DES_64_CBC_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_SHA1   |SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	0,
	56,
	56,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 24 VRS */
	{
	1,
	SSL3_TXT_KRB5_DES_64_CBC_MD5,
	SSL3_CK_KRB5_DES_64_CBC_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_MD5    |SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	0,
	56,
	56,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 25 VRS */
	{
	1,
	SSL3_TXT_KRB5_DES_192_CBC3_SHA,
	SSL3_CK_KRB5_DES_192_CBC3_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_3DES|SSL_SHA1  |SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	112,
	168,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 26 VRS */
	{
	1,
	SSL3_TXT_KRB5_DES_192_CBC3_MD5,
	SSL3_CK_KRB5_DES_192_CBC3_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_3DES|SSL_MD5   |SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	112,
	168,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
#endif	/* OPENSSL_NO_KRB5 */


#if TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
	/* New TLS Export CipherSuites */
	/* Cipher 60 */
	    {
	    1,
	    TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5,
	    TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5,
	    SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 61 */
	    {
	    1,
	    TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5,
	    TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5,
	    SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 62 */
	    {
	    1,
	    TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA,
	    TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA,
	    SSL_kRSA|SSL_aRSA|SSL_DES|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    56,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 63 */
	    {
	    1,
	    TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
	    TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_DES|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    56,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 64 */
	    {
	    1,
	    TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA,
	    TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA,
	    SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 65 */
	    {
	    1,
	    TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	    TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
	    0,
	    56,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 66 */
	    {
	    1,
	    TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA,
	    TLS1_CK_DHE_DSS_WITH_RC4_128_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_MEDIUM,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS
	    },
#endif
	/* New AES ciphersuites */

	/* Cipher 2F */
	    {
	    1,
	    TLS1_TXT_RSA_WITH_AES_128_SHA,
	    TLS1_CK_RSA_WITH_AES_128_SHA,
	    SSL_kRSA|SSL_aRSA|SSL_AES|SSL_SHA |SSL_TLSV1,
	    SSL_NOT_EXP|SSL_MEDIUM,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 30 */
	    {
	    0,
	    TLS1_TXT_DH_DSS_WITH_AES_128_SHA,
	    TLS1_CK_DH_DSS_WITH_AES_128_SHA,
	    SSL_kDHd|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_MEDIUM,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 31 */
	    {
	    0,
	    TLS1_TXT_DH_RSA_WITH_AES_128_SHA,
	    TLS1_CK_DH_RSA_WITH_AES_128_SHA,
	    SSL_kDHr|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_MEDIUM,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 32 */
	    {
	    1,
	    TLS1_TXT_DHE_DSS_WITH_AES_128_SHA,
	    TLS1_CK_DHE_DSS_WITH_AES_128_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_MEDIUM,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 33 */
	    {
	    1,
	    TLS1_TXT_DHE_RSA_WITH_AES_128_SHA,
	    TLS1_CK_DHE_RSA_WITH_AES_128_SHA,
	    SSL_kEDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_MEDIUM,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 34 */
	    {
	    1,
	    TLS1_TXT_ADH_WITH_AES_128_SHA,
	    TLS1_CK_ADH_WITH_AES_128_SHA,
	    SSL_kEDH|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_MEDIUM,
	    0,
	    128,
	    128,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },

	/* Cipher 35 */
	    {
	    1,
	    TLS1_TXT_RSA_WITH_AES_256_SHA,
	    TLS1_CK_RSA_WITH_AES_256_SHA,
	    SSL_kRSA|SSL_aRSA|SSL_AES|SSL_SHA |SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH,
	    0,
	    256,
	    256,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 36 */
	    {
	    0,
	    TLS1_TXT_DH_DSS_WITH_AES_256_SHA,
	    TLS1_CK_DH_DSS_WITH_AES_256_SHA,
	    SSL_kDHd|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH,
	    0,
	    256,
	    256,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 37 */
	    {
	    0,
	    TLS1_TXT_DH_RSA_WITH_AES_256_SHA,
	    TLS1_CK_DH_RSA_WITH_AES_256_SHA,
	    SSL_kDHr|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH,
	    0,
	    256,
	    256,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 38 */
	    {
	    1,
	    TLS1_TXT_DHE_DSS_WITH_AES_256_SHA,
	    TLS1_CK_DHE_DSS_WITH_AES_256_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH,
	    0,
	    256,
	    256,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 39 */
	    {
	    1,
	    TLS1_TXT_DHE_RSA_WITH_AES_256_SHA,
	    TLS1_CK_DHE_RSA_WITH_AES_256_SHA,
	    SSL_kEDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH,
	    0,
	    256,
	    256,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },
	/* Cipher 3A */
	    {
	    1,
	    TLS1_TXT_ADH_WITH_AES_256_SHA,
	    TLS1_CK_ADH_WITH_AES_256_SHA,
	    SSL_kEDH|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_HIGH,
	    0,
	    256,
	    256,
	    SSL_ALL_CIPHERS,
	    SSL_ALL_STRENGTHS,
	    },

a386 1
	ssl3_renegotiate_check,
a396 3
	ssl_undefined_function,
	ssl3_callback_ctrl,
	ssl3_ctx_callback_ctrl,
d399 1
a399 1
static long ssl3_default_timeout(void)
d406 1
a406 1
SSL_METHOD *sslv3_base_method(void)
d411 1
a411 1
int ssl3_num_ciphers(void)
d416 2
a417 1
SSL_CIPHER *ssl3_get_cipher(unsigned int u)
d425 3
a427 1
int ssl3_pending(SSL *s)
d429 1
a429 4
	if (s->rstate == SSL_ST_READ_BODY)
		return 0;
	
	return (s->s3->rrec.type == SSL3_RT_APPLICATION_DATA) ? s->s3->rrec.length : 0;
d432 2
a433 1
int ssl3_new(SSL *s)
d435 1
a435 1
	SSL3_STATE *s3;
d437 2
a438 4
	if ((s3=OPENSSL_malloc(sizeof *s3)) == NULL) goto err;
	memset(s3,0,sizeof *s3);
	EVP_MD_CTX_init(&s3->finish_dgst1);
	EVP_MD_CTX_init(&s3->finish_dgst2);
d441 7
d455 2
a456 1
void ssl3_free(SSL *s)
a457 3
	if(s == NULL)
	    return;

d460 1
a460 1
		OPENSSL_free(s->s3->rbuf.buf);
d462 2
a463 4
		OPENSSL_free(s->s3->wbuf.buf);
	if (s->s3->rrec.comp != NULL)
		OPENSSL_free(s->s3->rrec.comp);
#ifndef OPENSSL_NO_DH
d468 3
a470 5
		sk_X509_NAME_pop_free(s->s3->tmp.ca_names,X509_NAME_free);
	EVP_MD_CTX_cleanup(&s->s3->finish_dgst1);
	EVP_MD_CTX_cleanup(&s->s3->finish_dgst2);
	memset(s->s3,0,sizeof *s->s3);
	OPENSSL_free(s->s3);
d474 2
a475 1
void ssl3_clear(SSL *s)
a477 1
	size_t rlen, wlen;
d481 1
a481 1
		sk_X509_NAME_pop_free(s->s3->tmp.ca_names,X509_NAME_free);
d483 2
a484 25
	if (s->s3->rrec.comp != NULL)
		{
		OPENSSL_free(s->s3->rrec.comp);
		s->s3->rrec.comp=NULL;
		}
#ifndef OPENSSL_NO_DH
	if (s->s3->tmp.dh != NULL)
		DH_free(s->s3->tmp.dh);
#endif

	rp = s->s3->rbuf.buf;
	wp = s->s3->wbuf.buf;
	rlen = s->s3->rbuf.len;
 	wlen = s->s3->wbuf.len;

	EVP_MD_CTX_cleanup(&s->s3->finish_dgst1);
	EVP_MD_CTX_cleanup(&s->s3->finish_dgst2);

	memset(s->s3,0,sizeof *s->s3);
	s->s3->rbuf.buf = rp;
	s->s3->wbuf.buf = wp;
	s->s3->rbuf.len = rlen;
 	s->s3->wbuf.len = wlen;

	ssl_free_wbio_buffer(s);
d486 3
d497 5
a501 1
long ssl3_ctrl(SSL *s, int cmd, long larg, void *parg)
a504 20
#if !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_RSA)
	if (
#ifndef OPENSSL_NO_RSA
	    cmd == SSL_CTRL_SET_TMP_RSA ||
	    cmd == SSL_CTRL_SET_TMP_RSA_CB ||
#endif
#ifndef OPENSSL_NO_DSA
	    cmd == SSL_CTRL_SET_TMP_DH ||
	    cmd == SSL_CTRL_SET_TMP_DH_CB ||
#endif
		0)
		{
		if (!ssl_cert_inst(&s->cert))
		    	{
			SSLerr(SSL_F_SSL3_CTRL, ERR_R_MALLOC_FAILURE);
			return(0);
			}
		}
#endif

a521 72
	case SSL_CTRL_GET_FLAGS:
		ret=(int)(s->s3->flags);
		break;
#ifndef OPENSSL_NO_RSA
	case SSL_CTRL_NEED_TMP_RSA:
		if ((s->cert != NULL) && (s->cert->rsa_tmp == NULL) &&
		    ((s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL) ||
		     (EVP_PKEY_size(s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey) > (512/8))))
			ret = 1;
		break;
	case SSL_CTRL_SET_TMP_RSA:
		{
			RSA *rsa = (RSA *)parg;
			if (rsa == NULL)
				{
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_PASSED_NULL_PARAMETER);
				return(ret);
				}
			if ((rsa = RSAPrivateKey_dup(rsa)) == NULL)
				{
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_RSA_LIB);
				return(ret);
				}
			if (s->cert->rsa_tmp != NULL)
				RSA_free(s->cert->rsa_tmp);
			s->cert->rsa_tmp = rsa;
			ret = 1;
		}
		break;
	case SSL_CTRL_SET_TMP_RSA_CB:
		{
		SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(ret);
		}
		break;
#endif
#ifndef OPENSSL_NO_DH
	case SSL_CTRL_SET_TMP_DH:
		{
			DH *dh = (DH *)parg;
			if (dh == NULL)
				{
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_PASSED_NULL_PARAMETER);
				return(ret);
				}
			if ((dh = DHparams_dup(dh)) == NULL)
				{
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_DH_LIB);
				return(ret);
				}
			if (!(s->options & SSL_OP_SINGLE_DH_USE))
				{
				if (!DH_generate_key(dh))
					{
					DH_free(dh);
					SSLerr(SSL_F_SSL3_CTRL, ERR_R_DH_LIB);
					return(ret);
					}
				}
			if (s->cert->dh_tmp != NULL)
				DH_free(s->cert->dh_tmp);
			s->cert->dh_tmp = dh;
			ret = 1;
		}
		break;
	case SSL_CTRL_SET_TMP_DH_CB:
		{
		SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(ret);
		}
		break;
#endif
d528 5
a532 45
long ssl3_callback_ctrl(SSL *s, int cmd, void (*fp)())
	{
	int ret=0;

#if !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_RSA)
	if (
#ifndef OPENSSL_NO_RSA
	    cmd == SSL_CTRL_SET_TMP_RSA_CB ||
#endif
#ifndef OPENSSL_NO_DSA
	    cmd == SSL_CTRL_SET_TMP_DH_CB ||
#endif
		0)
		{
		if (!ssl_cert_inst(&s->cert))
			{
			SSLerr(SSL_F_SSL3_CALLBACK_CTRL, ERR_R_MALLOC_FAILURE);
			return(0);
			}
		}
#endif

	switch (cmd)
		{
#ifndef OPENSSL_NO_RSA
	case SSL_CTRL_SET_TMP_RSA_CB:
		{
		s->cert->rsa_tmp_cb = (RSA *(*)(SSL *, int, int))fp;
		}
		break;
#endif
#ifndef OPENSSL_NO_DH
	case SSL_CTRL_SET_TMP_DH_CB:
		{
		s->cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))fp;
		}
		break;
#endif
	default:
		break;
		}
	return(ret);
	}

long ssl3_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
d536 1
a536 1
	cert=ctx->cert;
d540 1
a540 1
#ifndef OPENSSL_NO_RSA
d549 1
a549 1
		/* break; */
d577 1
a577 1
		/* break; */
d579 1
a579 4
		{
		SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(0);
		}
d582 1
a582 1
#ifndef OPENSSL_NO_DH
d588 2
a589 1
		if ((new=DHparams_dup(dh)) == NULL)
d592 2
a593 1
			return 0;
d595 1
a595 1
		if (!(ctx->options & SSL_OP_SINGLE_DH_USE))
d597 4
a600 26
			if (!DH_generate_key(new))
				{
				SSLerr(SSL_F_SSL3_CTX_CTRL,ERR_R_DH_LIB);
				DH_free(new);
				return 0;
				}
			}
		if (cert->dh_tmp != NULL)
			DH_free(cert->dh_tmp);
		cert->dh_tmp=new;
		return 1;
		}
		/*break; */
	case SSL_CTRL_SET_TMP_DH_CB:
		{
		SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(0);
		}
		break;
#endif
	/* A Thawte special :-) */
	case SSL_CTRL_EXTRA_CHAIN_CERT:
		if (ctx->extra_certs == NULL)
			{
			if ((ctx->extra_certs=sk_X509_new_null()) == NULL)
				return(0);
a601 21
		sk_X509_push(ctx->extra_certs,(X509 *)parg);
		break;

	default:
		return(0);
		}
	return(1);
	}

long ssl3_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)())
	{
	CERT *cert;

	cert=ctx->cert;

	switch (cmd)
		{
#ifndef OPENSSL_NO_RSA
	case SSL_CTRL_SET_TMP_RSA_CB:
		{
		cert->rsa_tmp_cb = (RSA *(*)(SSL *, int, int))fp;
a603 2
#endif
#ifndef OPENSSL_NO_DH
d605 1
a605 3
		{
		cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))fp;
		}
d616 2
a617 1
SSL_CIPHER *ssl3_get_cipher_by_char(const unsigned char *p)
d627 1
a627 1
		CRYPTO_w_lock(CRYPTO_LOCK_SSL);
a634 4

		CRYPTO_w_unlock(CRYPTO_LOCK_SSL);

		init=0;
d642 1
a642 1
		FP_ICC ssl_cipher_ptr_id_cmp);
d649 3
a651 1
int ssl3_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
d665 20
a684 2
SSL_CIPHER *ssl3_choose_cipher(SSL *s, STACK_OF(SSL_CIPHER) *clnt,
	     STACK_OF(SSL_CIPHER) *srvr)
a686 1
	STACK_OF(SSL_CIPHER) *prio, *allow;
d691 5
a695 27
	/* Let's see which ciphers we can support */
	cert=s->cert;

#if 0
	/* Do not set the compare functions, because this may lead to a
	 * reordering by "id". We want to keep the original ordering.
	 * We may pay a price in performance during sk_SSL_CIPHER_find(),
	 * but would have to pay with the price of sk_SSL_CIPHER_dup().
	 */
	sk_SSL_CIPHER_set_cmp_func(srvr, ssl_cipher_ptr_id_cmp);
	sk_SSL_CIPHER_set_cmp_func(clnt, ssl_cipher_ptr_id_cmp);
#endif

#ifdef CIPHER_DEBUG
        printf("Server has %d from %p:\n", sk_SSL_CIPHER_num(srvr), srvr);
        for(i=0 ; i < sk_SSL_CIPHER_num(srvr) ; ++i)
	    {
	    c=sk_SSL_CIPHER_value(srvr,i);
	    printf("%p:%s\n",c,c->name);
	    }
        printf("Client sent %d from %p:\n", sk_SSL_CIPHER_num(clnt), clnt);
        for(i=0 ; i < sk_SSL_CIPHER_num(clnt) ; ++i)
	    {
	    c=sk_SSL_CIPHER_value(clnt,i);
	    printf("%p:%s\n",c,c->name);
	    }
#endif
d697 3
a699 18
	if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE)
	    {
	    prio = srvr;
	    allow = clnt;
	    }
	else
	    {
	    prio = clnt;
	    allow = srvr;
	    }

	for (i=0; i<sk_SSL_CIPHER_num(prio); i++)
		{
		c=sk_SSL_CIPHER_value(prio,i);

		ssl_set_cert_masks(cert,c);
		mask=cert->mask;
		emask=cert->export_mask;
d701 1
a701 3
#ifdef KSSL_DEBUG
		printf("ssl3_choose_cipher %d alg= %lx\n", i,c->algorithms);
#endif    /* KSSL_DEBUG */
d703 3
d707 1
a707 8
#ifndef OPENSSL_NO_KRB5
                if (alg & SSL_KRB5) 
                        {
                        if ( !kssl_keytab_is_available(s->kssl_ctx) )
                            continue;
                        }
#endif /* OPENSSL_NO_KRB5 */
		if (SSL_C_IS_EXPORT(c))
d711 1
a711 2
			printf("%d:[%08lX:%08lX]%p:%s (export)\n",ok,alg,emask,
			       c,c->name);
d718 1
a718 2
			printf("%d:[%08lX:%08lX]%p:%s\n",ok,alg,mask,c,
			       c->name);
d724 1
a724 1
		j=sk_SSL_CIPHER_find(allow,c);
d727 1
a727 1
			ret=sk_SSL_CIPHER_value(allow,j);
d734 3
a736 1
int ssl3_get_req_cert_type(SSL *s, unsigned char *p)
d743 1
a743 1
#ifndef OPENSSL_NO_DH
d746 1
a746 1
#  ifndef OPENSSL_NO_RSA
d748 2
a749 2
#  endif
#  ifndef OPENSSL_NO_DSA
d751 1
a751 1
#  endif
d756 1
a756 1
#  ifndef OPENSSL_NO_RSA
d758 2
a759 2
#  endif
#  ifndef OPENSSL_NO_DSA
d761 1
a761 1
#  endif
d763 2
a764 2
#endif /* !OPENSSL_NO_DH */
#ifndef OPENSSL_NO_RSA
a766 1
#ifndef OPENSSL_NO_DSA
a767 1
#endif
d771 2
a772 1
int ssl3_shutdown(SSL *s)
d802 1
a802 1
		ssl3_read_bytes(s,0,NULL,0,0);
d812 4
a815 1
int ssl3_write(SSL *s, const void *buf, int len)
d818 1
d841 1
a841 1
					     buf,len);
d852 5
a856 4
		/* We have flushed the buffer, so remove it */
		ssl_free_wbio_buffer(s);
		s->s3->flags&= ~SSL3_FLAGS_POP_BUFFER;

d859 2
d865 1
a865 1
				     buf,len);
d872 4
a875 1
static int ssl3_read_internal(SSL *s, void *buf, int len, int peek)
d882 2
a883 2
	ret=ssl3_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
	if ((ret == -1) && (s->s3->in_read_app_data == 2))
d885 2
a886 5
		/* ssl3_read_bytes decided to call s->handshake_func, which
		 * called ssl3_read_bytes to read handshake data.
		 * However, ssl3_read_bytes actually found application data
		 * and thinks that application data makes sense here; so disable
		 * handshake processing and try to read application data again. */
d888 1
a888 1
		ret=ssl3_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
d897 4
a900 1
int ssl3_read(SSL *s, void *buf, int len)
d902 11
a912 2
	return ssl3_read_internal(s, buf, len, 0);
	}
d914 6
a919 3
int ssl3_peek(SSL *s, void *buf, int len)
	{
	return ssl3_read_internal(s, buf, len, 1);
d922 2
a923 1
int ssl3_renegotiate(SSL *s)
d935 2
a936 1
int ssl3_renegotiate_check(SSL *s)
d948 1
a948 1
need to go to SSL_ST_ACCEPT.
d960 1
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@d132 1
a132 1
	SSL_NOT_EXP|SSL_STRONG_NONE,
d145 1
a145 1
	SSL_NOT_EXP|SSL_STRONG_NONE,
d493 1
a493 1
	SSL_NOT_EXP|SSL_STRONG_NONE,
d507 1
a507 1
	SSL_NOT_EXP|SSL_STRONG_NONE,
@


1.1.1.4
log
@import 0.9.7b (without idea and rc5)
@
text
@a514 1
#if 0
a527 1
#endif
d534 1
a534 1
/* Cipher 1E VRS */
d537 2
a538 2
	SSL3_TXT_KRB5_DES_64_CBC_SHA,
	SSL3_CK_KRB5_DES_64_CBC_SHA,
d540 1
a540 1
	SSL_NOT_EXP|SSL_LOW,
d542 1
a542 1
	56,
d548 1
a548 1
/* Cipher 1F VRS */
d551 4
a554 4
	SSL3_TXT_KRB5_DES_192_CBC3_SHA,
	SSL3_CK_KRB5_DES_192_CBC3_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_3DES|SSL_SHA1  |SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
d556 2
a557 2
	112,
	168,
d562 1
a562 1
/* Cipher 20 VRS */
d565 4
a568 4
	SSL3_TXT_KRB5_RC4_128_SHA,
	SSL3_CK_KRB5_RC4_128_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_RC4|SSL_SHA1  |SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
d570 2
a571 2
	128,
	128,
d576 1
a576 15
/* Cipher 21 VRS */
	{
	1,
	SSL3_TXT_KRB5_IDEA_128_CBC_SHA,
	SSL3_CK_KRB5_IDEA_128_CBC_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_IDEA|SSL_SHA1  |SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 22 VRS */
d590 1
a590 1
/* Cipher 23 VRS */
d593 3
a595 3
	SSL3_TXT_KRB5_DES_192_CBC3_MD5,
	SSL3_CK_KRB5_DES_192_CBC3_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_3DES|SSL_MD5   |SSL_SSLV3,
a603 28
/* Cipher 24 VRS */
	{
	1,
	SSL3_TXT_KRB5_RC4_128_MD5,
	SSL3_CK_KRB5_RC4_128_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_RC4|SSL_MD5  |SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 25 VRS */
	{
	1,
	SSL3_TXT_KRB5_IDEA_128_CBC_MD5,
	SSL3_CK_KRB5_IDEA_128_CBC_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_IDEA|SSL_MD5  |SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

d607 4
a610 4
	SSL3_TXT_KRB5_DES_40_CBC_SHA,
	SSL3_CK_KRB5_DES_40_CBC_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_SHA1   |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
d612 2
a613 72
	40,
	56,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 27 VRS */
	{
	1,
	SSL3_TXT_KRB5_RC2_40_CBC_SHA,
	SSL3_CK_KRB5_RC2_40_CBC_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_RC2|SSL_SHA1   |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	0,
	40,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 28 VRS */
	{
	1,
	SSL3_TXT_KRB5_RC4_40_SHA,
	SSL3_CK_KRB5_RC4_40_SHA,
	SSL_kKRB5|SSL_aKRB5|  SSL_RC4|SSL_SHA1   |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 29 VRS */
	{
	1,
	SSL3_TXT_KRB5_DES_40_CBC_MD5,
	SSL3_CK_KRB5_DES_40_CBC_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_DES|SSL_MD5    |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	0,
	40,
	56,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 2A VRS */
	{
	1,
	SSL3_TXT_KRB5_RC2_40_CBC_MD5,
	SSL3_CK_KRB5_RC2_40_CBC_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_RC2|SSL_MD5    |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	0,
	40,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 2B VRS */
	{
	1,
	SSL3_TXT_KRB5_RC4_40_MD5,
	SSL3_CK_KRB5_RC4_40_MD5,
	SSL_kKRB5|SSL_aKRB5|  SSL_RC4|SSL_MD5    |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	0,
	128,
	128,
d989 1
a989 1
	OPENSSL_cleanse(s->s3,sizeof *s->s3);
d1344 2
a1345 4
		if (init)
			{
			for (i=0; i<SSL3_NUM_CIPHERS; i++)
				sorted[i]= &(ssl3_ciphers[i]);
d1347 3
a1349 3
			qsort(sorted,
				SSL3_NUM_CIPHERS,sizeof(SSL_CIPHER *),
				FP_ICC ssl_cipher_ptr_id_cmp);
a1350 3
			init=0;
			}
		
d1352 2
@


1.1.1.5
log
@import openssl-0.9.7d
@
text
@a273 1
#ifndef OPENSSL_NO_IDEA
a285 1
#endif
@


1.1.1.6
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d145 1
a145 1
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d186 1
a186 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d199 1
a199 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d212 1
a212 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d294 1
a294 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d307 1
a307 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d320 1
a320 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d335 1
a335 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d348 1
a348 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d361 1
a361 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d374 1
a374 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d387 1
a387 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d400 1
a400 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d415 1
a415 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d428 1
a428 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d441 1
a441 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d454 1
a454 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d467 1
a467 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d480 1
a480 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d544 1
a544 1
	SSL_NOT_EXP|SSL_LOW|SSL_FIPS,
d558 1
a558 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d656 1
a656 1
	SSL_EXPORT|SSL_EXP40|SSL_FIPS,
d770 1
a770 1
	    SSL_EXPORT|SSL_EXP56|SSL_FIPS,
d783 1
a783 1
	    SSL_EXPORT|SSL_EXP56|SSL_FIPS,
d838 1
a838 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d851 1
a851 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d864 1
a864 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d877 1
a877 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d890 1
a890 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d903 1
a903 1
	    SSL_NOT_EXP|SSL_MEDIUM|SSL_FIPS,
d917 1
a917 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d930 1
a930 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d943 1
a943 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d956 1
a956 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d969 1
a969 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d982 1
a982 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1060 1
a1060 1
int ssl3_pending(const SSL *s)
@


1.1.1.7
log
@import of openssl-0.9.7j
@
text
@d838 1
a838 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d851 1
a851 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d864 1
a864 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d877 1
a877 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d890 1
a890 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d903 1
a903 1
	    SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
@


1.1.1.8
log
@import of OpenSSL 0.9.8h
@
text
@d59 1
a59 1
 * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
a110 13
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 *
 * Portions of the attached software ("Contribution") are developed by 
 * SUN MICROSYSTEMS, INC., and are contributed to the OpenSSL project.
 *
 * The Contribution is licensed pursuant to the OpenSSL open source
 * license provided above.
 *
 * ECC cipher suite support in OpenSSL originally written by
 * Vipul Gupta and Sumit Gupta of Sun Microsystems Laboratories.
 *
 */
a116 4
#ifndef OPENSSL_NO_DH
#include <openssl/dh.h>
#endif
#include <openssl/pq_compat.h>
d118 1
a118 1
const char ssl3_version_str[]="SSLv3" OPENSSL_VERSION_PTEXT;
d122 2
a123 1
/* list of available SSLv3 ciphers (sorted by id) */
d145 1
a145 1
	SSL_NOT_EXP|SSL_STRONG_NONE,
d152 69
d294 1
a294 1
	SSL_EXPORT|SSL_EXP40,
d307 1
a307 1
	SSL_NOT_EXP|SSL_LOW,
d320 1
a320 1
	SSL_NOT_EXP|SSL_HIGH,
d327 2
a328 1
/* The DH ciphers */
d335 1
a335 1
	SSL_EXPORT|SSL_EXP40,
d348 1
a348 1
	SSL_NOT_EXP|SSL_LOW,
d361 1
a361 1
	SSL_NOT_EXP|SSL_HIGH,
d374 1
a374 1
	SSL_EXPORT|SSL_EXP40,
d387 1
a387 1
	SSL_NOT_EXP|SSL_LOW,
d400 1
a400 1
	SSL_NOT_EXP|SSL_HIGH,
d415 1
a415 1
	SSL_EXPORT|SSL_EXP40,
d428 1
a428 1
	SSL_NOT_EXP|SSL_LOW,
d441 1
a441 1
	SSL_NOT_EXP|SSL_HIGH,
d454 1
a454 1
	SSL_EXPORT|SSL_EXP40,
d467 1
a467 1
	SSL_NOT_EXP|SSL_LOW,
d480 1
a480 66
	SSL_NOT_EXP|SSL_HIGH,
	0,
	168,
	168,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 17 */
	{
	1,
	SSL3_TXT_ADH_RC4_40_MD5,
	SSL3_CK_ADH_RC4_40_MD5,
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5 |SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	0,
	40,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 18 */
	{
	1,
	SSL3_TXT_ADH_RC4_128_MD5,
	SSL3_CK_ADH_RC4_128_MD5,
	SSL_kEDH |SSL_aNULL|SSL_RC4  |SSL_MD5 |SSL_SSLV3,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 19 */
	{
	1,
	SSL3_TXT_ADH_DES_40_CBC_SHA,
	SSL3_CK_ADH_DES_40_CBC_SHA,
	SSL_kEDH |SSL_aNULL|SSL_DES|SSL_SHA1|SSL_SSLV3,
	SSL_EXPORT|SSL_EXP40,
	0,
	40,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 1A */
	{
	1,
	SSL3_TXT_ADH_DES_64_CBC_SHA,
	SSL3_CK_ADH_DES_64_CBC_SHA,
	SSL_kEDH |SSL_aNULL|SSL_DES  |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_LOW,
	0,
	56,
	56,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 1B */
	{
	1,
	SSL3_TXT_ADH_DES_192_CBC_SHA,
	SSL3_CK_ADH_DES_192_CBC_SHA,
	SSL_kEDH |SSL_aNULL|SSL_3DES |SSL_SHA1|SSL_SSLV3,
	SSL_NOT_EXP|SSL_HIGH,
d534 5
a538 2
/* The Kerberos ciphers */
/* Cipher 1E */
d544 1
a544 1
	SSL_NOT_EXP|SSL_LOW,
d552 1
a552 1
/* Cipher 1F */
d558 1
a558 1
	SSL_NOT_EXP|SSL_HIGH,
d560 1
a560 1
	168,
d566 1
a566 1
/* Cipher 20 */
d580 1
a580 1
/* Cipher 21 */
d594 1
a594 1
/* Cipher 22 */
d608 1
a608 1
/* Cipher 23 */
d616 1
a616 1
	168,
d622 1
a622 1
/* Cipher 24 */
d636 1
a636 1
/* Cipher 25 */
d650 1
a650 1
/* Cipher 26 */
d656 1
a656 1
	SSL_EXPORT|SSL_EXP40,
d664 1
a664 1
/* Cipher 27 */
d678 1
a678 1
/* Cipher 28 */
d686 1
a686 1
	40,
d692 1
a692 1
/* Cipher 29 */
d706 1
a706 1
/* Cipher 2A */
d720 1
a720 1
/* Cipher 2B */
d728 1
a728 1
	40,
a734 241
/* New AES ciphersuites */
/* Cipher 2F */
	{
	1,
	TLS1_TXT_RSA_WITH_AES_128_SHA,
	TLS1_CK_RSA_WITH_AES_128_SHA,
	SSL_kRSA|SSL_aRSA|SSL_AES|SSL_SHA |SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 30 */
	{
	0,
	TLS1_TXT_DH_DSS_WITH_AES_128_SHA,
	TLS1_CK_DH_DSS_WITH_AES_128_SHA,
	SSL_kDHd|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 31 */
	{
	0,
	TLS1_TXT_DH_RSA_WITH_AES_128_SHA,
	TLS1_CK_DH_RSA_WITH_AES_128_SHA,
	SSL_kDHr|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 32 */
	{
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_128_SHA,
	TLS1_CK_DHE_DSS_WITH_AES_128_SHA,
	SSL_kEDH|SSL_aDSS|SSL_AES|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 33 */
	{
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_128_SHA,
	TLS1_CK_DHE_RSA_WITH_AES_128_SHA,
	SSL_kEDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 34 */
	{
	1,
	TLS1_TXT_ADH_WITH_AES_128_SHA,
	TLS1_CK_ADH_WITH_AES_128_SHA,
	SSL_kEDH|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

/* Cipher 35 */
	{
	1,
	TLS1_TXT_RSA_WITH_AES_256_SHA,
	TLS1_CK_RSA_WITH_AES_256_SHA,
	SSL_kRSA|SSL_aRSA|SSL_AES|SSL_SHA |SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 36 */
	{
	0,
	TLS1_TXT_DH_DSS_WITH_AES_256_SHA,
	TLS1_CK_DH_DSS_WITH_AES_256_SHA,
	SSL_kDHd|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 37 */
	{
	0,
	TLS1_TXT_DH_RSA_WITH_AES_256_SHA,
	TLS1_CK_DH_RSA_WITH_AES_256_SHA,
	SSL_kDHr|SSL_aDH|SSL_AES|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 38 */
	{
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_256_SHA,
	TLS1_CK_DHE_DSS_WITH_AES_256_SHA,
	SSL_kEDH|SSL_aDSS|SSL_AES|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
/* Cipher 39 */
	{
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_256_SHA,
	TLS1_CK_DHE_RSA_WITH_AES_256_SHA,
	SSL_kEDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
	/* Cipher 3A */
	{
	1,
	TLS1_TXT_ADH_WITH_AES_256_SHA,
	TLS1_CK_ADH_WITH_AES_256_SHA,
	SSL_kEDH|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

#ifndef OPENSSL_NO_CAMELLIA
	/* Camellia ciphersuites from RFC4132 (128-bit portion) */

	/* Cipher 41 */
	{
	1,
	TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kRSA|SSL_aRSA|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
	/* Cipher 42 */
	{
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kDHd|SSL_aDH|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
	/* Cipher 43 */
	{
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kDHr|SSL_aDH|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
	/* Cipher 44 */
	{
	1,
	TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kEDH|SSL_aDSS|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
	/* Cipher 45 */
	{
	1,
	TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kEDH|SSL_aRSA|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
	/* Cipher 46 */
	{
	1,
	TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA,
	TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA,
	SSL_kEDH|SSL_aNULL|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
#endif /* OPENSSL_NO_CAMELLIA */
d737 1
a737 2
	/* New TLS Export CipherSuites from expired ID */
#if 0
a763 1
#endif
d770 1
a770 1
	    SSL_EXPORT|SSL_EXP56,
d783 13
d799 12
d812 135
d950 1
a950 1
	/* Cipher 64 */
d953 4
a956 4
	    TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA,
	    TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA,
	    SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
d958 2
a959 2
	    56,
	    128,
d963 1
a963 1
	/* Cipher 65 */
d966 4
a969 4
	    TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	    TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_EXPORT|SSL_EXP56,
d971 2
a972 2
	    56,
	    128,
d976 1
a976 1
	/* Cipher 66 */
d979 4
a982 4
	    TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA,
	    TLS1_CK_DHE_DSS_WITH_RC4_128_SHA,
	    SSL_kEDH|SSL_aDSS|SSL_RC4|SSL_SHA|SSL_TLSV1,
	    SSL_NOT_EXP|SSL_MEDIUM,
d984 2
a985 2
	    128,
	    128,
d987 1
a987 469
	    SSL_ALL_STRENGTHS
	    },
#endif

#ifndef OPENSSL_NO_CAMELLIA
	/* Camellia ciphersuites from RFC4132 (256-bit portion) */

	/* Cipher 84 */
	{
	1,
	TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kRSA|SSL_aRSA|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
	/* Cipher 85 */
	{
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kDHd|SSL_aDH|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
	/* Cipher 86 */
	{
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kDHr|SSL_aDH|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
	/* Cipher 87 */
	{
	1,
	TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kEDH|SSL_aDSS|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
	/* Cipher 88 */
	{
	1,
	TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kEDH|SSL_aRSA|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
	/* Cipher 89 */
	{
	1,
	TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA,
	TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA,
	SSL_kEDH|SSL_aNULL|SSL_CAMELLIA|SSL_SHA|SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	256,
	256,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS
	},
#endif /* OPENSSL_NO_CAMELLIA */

#ifndef OPENSSL_NO_SEED
	/* SEED ciphersuites from RFC4162 */

	/* Cipher 96 */
	{
	1,
	TLS1_TXT_RSA_WITH_SEED_SHA,
	TLS1_CK_RSA_WITH_SEED_SHA,
	SSL_kRSA|SSL_aRSA|SSL_SEED|SSL_SHA1|SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

	/* Cipher 97 */
	{
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_DSS_WITH_SEED_SHA,
	TLS1_CK_DH_DSS_WITH_SEED_SHA,
	SSL_kDHd|SSL_aDH|SSL_SEED|SSL_SHA1|SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

	/* Cipher 98 */
	{
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_SEED_SHA,
	TLS1_CK_DH_RSA_WITH_SEED_SHA,
	SSL_kDHr|SSL_aDH|SSL_SEED|SSL_SHA1|SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

	/* Cipher 99 */
	{
	1,
	TLS1_TXT_DHE_DSS_WITH_SEED_SHA,
	TLS1_CK_DHE_DSS_WITH_SEED_SHA,
	SSL_kEDH|SSL_aDSS|SSL_SEED|SSL_SHA1|SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

	/* Cipher 9A */
	{
	1,
	TLS1_TXT_DHE_RSA_WITH_SEED_SHA,
	TLS1_CK_DHE_RSA_WITH_SEED_SHA,
	SSL_kEDH|SSL_aRSA|SSL_SEED|SSL_SHA1|SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

	/* Cipher 9B */
	{
	1,
	TLS1_TXT_ADH_WITH_SEED_SHA,
	TLS1_CK_ADH_WITH_SEED_SHA,
	SSL_kEDH|SSL_aNULL|SSL_SEED|SSL_SHA1|SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},

#endif /* OPENSSL_NO_SEED */

#ifndef OPENSSL_NO_ECDH
	/* Cipher C001 */
	    {
            1,
            TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA,
            TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA,
            SSL_kECDH|SSL_aECDSA|SSL_eNULL|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            0,
            0,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C002 */
	    {
            1,
            TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA,
            TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA,
            SSL_kECDH|SSL_aECDSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C003 */
	    {
            1,
            TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
            TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
            SSL_kECDH|SSL_aECDSA|SSL_3DES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            168,
            168,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C004 */
	    {
            1,
            TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
            TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
            SSL_kECDH|SSL_aECDSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C005 */
	    {
            1,
            TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
            TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
            SSL_kECDH|SSL_aECDSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            256,
            256,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C006 */
	    {
            1,
            TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA,
            TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA,
            SSL_kECDHE|SSL_aECDSA|SSL_eNULL|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            0,
            0,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C007 */
	    {
            1,
            TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA,
            TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA,
            SSL_kECDHE|SSL_aECDSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C008 */
	    {
            1,
            TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
            TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
            SSL_kECDHE|SSL_aECDSA|SSL_3DES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            168,
            168,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C009 */
	    {
            1,
            TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
            TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
            SSL_kECDHE|SSL_aECDSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C00A */
	    {
            1,
            TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
            TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
            SSL_kECDHE|SSL_aECDSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            256,
            256,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C00B */
	    {
            1,
            TLS1_TXT_ECDH_RSA_WITH_NULL_SHA,
            TLS1_CK_ECDH_RSA_WITH_NULL_SHA,
            SSL_kECDH|SSL_aRSA|SSL_eNULL|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            0,
            0,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C00C */
	    {
            1,
            TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA,
            TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA,
            SSL_kECDH|SSL_aRSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C00D */
	    {
            1,
            TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA,
            TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA,
            SSL_kECDH|SSL_aRSA|SSL_3DES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            168,
            168,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C00E */
	    {
            1,
            TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA,
            TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA,
            SSL_kECDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C00F */
	    {
            1,
            TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA,
            TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA,
            SSL_kECDH|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            256,
            256,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C010 */
	    {
            1,
            TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA,
            TLS1_CK_ECDHE_RSA_WITH_NULL_SHA,
            SSL_kECDHE|SSL_aRSA|SSL_eNULL|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            0,
            0,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C011 */
	    {
            1,
            TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA,
            TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA,
            SSL_kECDHE|SSL_aRSA|SSL_RC4|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C012 */
	    {
            1,
            TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
            TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
            SSL_kECDHE|SSL_aRSA|SSL_3DES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            168,
            168,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C013 */
	    {
            1,
            TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA,
            TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA,
            SSL_kECDHE|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C014 */
	    {
            1,
            TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA,
            TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA,
            SSL_kECDHE|SSL_aRSA|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            256,
            256,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C015 */
            {
            1,
            TLS1_TXT_ECDH_anon_WITH_NULL_SHA,
            TLS1_CK_ECDH_anon_WITH_NULL_SHA,
            SSL_kECDHE|SSL_aNULL|SSL_eNULL|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            0,
            0,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
a989 58
	/* Cipher C016 */
            {
            1,
            TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA,
            TLS1_CK_ECDH_anon_WITH_RC4_128_SHA,
            SSL_kECDHE|SSL_aNULL|SSL_RC4|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
	    },

	/* Cipher C017 */
	    {
            1,
            TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA,
            TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA,
            SSL_kECDHE|SSL_aNULL|SSL_3DES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            168,
            168,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C018 */
	    {
            1,
            TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA,
            TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA,
            SSL_kECDHE|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            128,
            128,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },

	/* Cipher C019 */
	    {
            1,
            TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA,
            TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA,
            SSL_kECDHE|SSL_aNULL|SSL_AES|SSL_SHA|SSL_TLSV1,
            SSL_NOT_EXP|SSL_HIGH,
            0,
            256,
            256,
            SSL_ALL_CIPHERS,
            SSL_ALL_STRENGTHS,
            },
#endif	/* OPENSSL_NO_ECDH */


d993 1
a993 1
SSL3_ENC_METHOD SSLv3_enc_data={
d1007 29
a1035 1
long ssl3_default_timeout(void)
d1042 4
a1045 4
IMPLEMENT_ssl3_meth_func(sslv3_base_method,
			ssl_undefined_function,
			ssl_undefined_function,
			ssl_bad_method)
a1075 2
	pq_64bit_init(&(s3->rrec.seq_num));
	pq_64bit_init(&(s3->wrec.seq_num));
a1100 5
#ifndef OPENSSL_NO_ECDH
	if (s->s3->tmp.ecdh != NULL)
		EC_KEY_free(s->s3->tmp.ecdh);
#endif

a1104 3
	pq_64bit_free(&(s->s3->rrec.seq_num));
	pq_64bit_free(&(s->s3->wrec.seq_num));

a1127 4
#ifndef OPENSSL_NO_ECDH
	if (s->s3->tmp.ecdh != NULL)
		EC_KEY_free(s->s3->tmp.ecdh);
#endif
a1265 109
#ifndef OPENSSL_NO_ECDH
	case SSL_CTRL_SET_TMP_ECDH:
		{
		EC_KEY *ecdh = NULL;
 			
		if (parg == NULL)
			{
			SSLerr(SSL_F_SSL3_CTRL, ERR_R_PASSED_NULL_PARAMETER);
			return(ret);
			}
		if (!EC_KEY_up_ref((EC_KEY *)parg))
			{
			SSLerr(SSL_F_SSL3_CTRL,ERR_R_ECDH_LIB);
			return(ret);
			}
		ecdh = (EC_KEY *)parg;
		if (!(s->options & SSL_OP_SINGLE_ECDH_USE))
			{
			if (!EC_KEY_generate_key(ecdh))
				{
				EC_KEY_free(ecdh);
				SSLerr(SSL_F_SSL3_CTRL,ERR_R_ECDH_LIB);
				return(ret);
				}
			}
		if (s->cert->ecdh_tmp != NULL)
			EC_KEY_free(s->cert->ecdh_tmp);
		s->cert->ecdh_tmp = ecdh;
		ret = 1;
		}
		break;
	case SSL_CTRL_SET_TMP_ECDH_CB:
		{
		SSLerr(SSL_F_SSL3_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(ret);
		}
		break;
#endif /* !OPENSSL_NO_ECDH */
#ifndef OPENSSL_NO_TLSEXT
	case SSL_CTRL_SET_TLSEXT_HOSTNAME:
 		if (larg == TLSEXT_NAMETYPE_host_name)
			{
			if (s->tlsext_hostname != NULL) 
				OPENSSL_free(s->tlsext_hostname);
			s->tlsext_hostname = NULL;

			ret = 1;
			if (parg == NULL) 
				break;
			if (strlen((char *)parg) > TLSEXT_MAXLEN_host_name)
				{
				SSLerr(SSL_F_SSL3_CTRL, SSL_R_SSL3_EXT_INVALID_SERVERNAME);
				return 0;
				}
			if ((s->tlsext_hostname = BUF_strdup((char *)parg)) == NULL)
				{
				SSLerr(SSL_F_SSL3_CTRL, ERR_R_INTERNAL_ERROR);
				return 0;
				}
			}
		else
			{
			SSLerr(SSL_F_SSL3_CTRL, SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE);
			return 0;
			}
 		break;
	case SSL_CTRL_SET_TLSEXT_DEBUG_ARG:
		s->tlsext_debug_arg=parg;
		ret = 1;
		break;
  
	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE:
		s->tlsext_status_type=larg;
		ret = 1;
		break;

	case SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS:
		*(STACK_OF(X509_EXTENSION) **)parg = s->tlsext_ocsp_exts;
		ret = 1;
		break;

	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS:
		s->tlsext_ocsp_exts = parg;
		ret = 1;
		break;

	case SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS:
		*(STACK_OF(OCSP_RESPID) **)parg = s->tlsext_ocsp_ids;
		ret = 1;
		break;

	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS:
		s->tlsext_ocsp_ids = parg;
		ret = 1;
		break;

	case SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP:
		*(unsigned char **)parg = s->tlsext_ocsp_resp;
		return s->tlsext_ocsp_resplen;
		
	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP:
		if (s->tlsext_ocsp_resp)
			OPENSSL_free(s->tlsext_ocsp_resp);
		s->tlsext_ocsp_resp = parg;
		s->tlsext_ocsp_resplen = larg;
		ret = 1;
		break;

#endif /* !OPENSSL_NO_TLSEXT */
d1272 1
a1272 1
long ssl3_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
a1309 13
#ifndef OPENSSL_NO_ECDH
	case SSL_CTRL_SET_TMP_ECDH_CB:
		{
		s->cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;
		}
		break;
#endif
#ifndef OPENSSL_NO_TLSEXT
	case SSL_CTRL_SET_TLSEXT_DEBUG_CB:
		s->tlsext_debug_cb=(void (*)(SSL *,int ,int,
					unsigned char *, int, void *))fp;
		break;
#endif
a1401 77
#ifndef OPENSSL_NO_ECDH
	case SSL_CTRL_SET_TMP_ECDH:
		{
		EC_KEY *ecdh = NULL;
 			
		if (parg == NULL)
			{
			SSLerr(SSL_F_SSL3_CTX_CTRL,ERR_R_ECDH_LIB);
			return 0;
			}
		ecdh = EC_KEY_dup((EC_KEY *)parg);
		if (ecdh == NULL)
			{
			SSLerr(SSL_F_SSL3_CTX_CTRL,ERR_R_EC_LIB);
			return 0;
			}
		if (!(ctx->options & SSL_OP_SINGLE_ECDH_USE))
			{
			if (!EC_KEY_generate_key(ecdh))
				{
				EC_KEY_free(ecdh);
				SSLerr(SSL_F_SSL3_CTX_CTRL,ERR_R_ECDH_LIB);
				return 0;
				}
			}

		if (cert->ecdh_tmp != NULL)
			{
			EC_KEY_free(cert->ecdh_tmp);
			}
		cert->ecdh_tmp = ecdh;
		return 1;
		}
		/* break; */
	case SSL_CTRL_SET_TMP_ECDH_CB:
		{
		SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return(0);
		}
		break;
#endif /* !OPENSSL_NO_ECDH */
#ifndef OPENSSL_NO_TLSEXT
	case SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG:
		ctx->tlsext_servername_arg=parg;
		break;
	case SSL_CTRL_SET_TLSEXT_TICKET_KEYS:
	case SSL_CTRL_GET_TLSEXT_TICKET_KEYS:
		{
		unsigned char *keys = parg;
		if (!keys)
			return 48;
		if (larg != 48)
			{
			SSLerr(SSL_F_SSL3_CTX_CTRL, SSL_R_INVALID_TICKET_KEYS_LENGTH);
			return 0;
			}
		if (cmd == SSL_CTRL_SET_TLSEXT_TICKET_KEYS)
			{
			memcpy(ctx->tlsext_tick_key_name, keys, 16);
			memcpy(ctx->tlsext_tick_hmac_key, keys + 16, 16);
			memcpy(ctx->tlsext_tick_aes_key, keys + 32, 16);
			}
		else
			{
			memcpy(keys, ctx->tlsext_tick_key_name, 16);
			memcpy(keys + 16, ctx->tlsext_tick_hmac_key, 16);
			memcpy(keys + 32, ctx->tlsext_tick_aes_key, 16);
			}
		return 1;
		}
  
	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG:
		ctx->tlsext_status_arg=parg;
		return 1;
		break;

#endif /* !OPENSSL_NO_TLSEXT */
d1418 1
a1418 1
long ssl3_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
a1439 24
#ifndef OPENSSL_NO_ECDH
	case SSL_CTRL_SET_TMP_ECDH_CB:
		{
		cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;
		}
		break;
#endif
#ifndef OPENSSL_NO_TLSEXT
	case SSL_CTRL_SET_TLSEXT_SERVERNAME_CB:
		ctx->tlsext_servername_callback=(int (*)(SSL *,int *,void *))fp;
		break;
  
	case SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB:
		ctx->tlsext_status_cb=(int (*)(SSL *,void *))fp;
		break;

	case SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB:
		ctx->tlsext_ticket_key_cb=(int (*)(SSL *,unsigned char  *,
						unsigned char *,
						EVP_CIPHER_CTX *,
						HMAC_CTX *, int))fp;
		break;

#endif
d1450 3
a1452 1
	SSL_CIPHER c,*cp;
d1454 20
d1477 6
a1482 6
	cp = (SSL_CIPHER *)OBJ_bsearch((char *)&c,
		(char *)ssl3_ciphers,
		SSL3_NUM_CIPHERS,sizeof(SSL_CIPHER),
		FP_ICC ssl_cipher_id_cmp);
	if (cp == NULL || cp->valid == 0)
		return NULL;
d1484 1
a1484 1
		return cp;
a1506 1

d1587 1
a1631 20
#ifndef OPENSSL_NO_ECDH
	/* We should ask for fixed ECDH certificates only
	 * for SSL_kECDH (and not SSL_kECDHE)
	 */
	if ((alg & SSL_kECDH) && (s->version >= TLS1_VERSION))
		{
		p[ret++]=TLS_CT_RSA_FIXED_ECDH;
		p[ret++]=TLS_CT_ECDSA_FIXED_ECDH;
		}
#endif

#ifndef OPENSSL_NO_ECDSA
	/* ECDSA certs can be used with RSA cipher suites as well 
	 * so we don't need to check for SSL_kECDH or SSL_kECDHE
	 */
	if (s->version >= TLS1_VERSION)
		{
		p[ret++]=TLS_CT_ECDSA_SIGN;
		}
#endif	
d1659 1
a1659 1
		s->method->ssl_dispatch_alert(s);
d1665 1
a1665 1
		s->method->ssl_read_bytes(s,0,NULL,0,0);
d1720 2
a1721 2
		ret=s->method->ssl_write_bytes(s,SSL3_RT_APPLICATION_DATA,
			buf,len);
d1735 1
a1735 1
	ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
d1744 1
a1744 1
		ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
@


1.1.1.9
log
@import openssl-0.9.8j
@
text
@d161 1
a161 1
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d267 1
a267 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d307 1
a307 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d346 1
a346 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d387 1
a387 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d426 1
a426 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d491 1
a491 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d566 1
a566 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d750 1
a750 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d763 1
a763 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d776 1
a776 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d789 1
a789 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d802 1
a802 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d815 1
a815 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d829 1
a829 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d842 1
a842 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d855 1
a855 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d868 1
a868 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d881 1
a881 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d894 1
a894 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
@


1.1.1.10
log
@import OpenSSL-1.0.0a
@
text
@d59 1
a59 1
 * Copyright (c) 1998-2007 The OpenSSL Project.  All rights reserved.
a123 26
/* ====================================================================
 * Copyright 2005 Nokia. All rights reserved.
 *
 * The portions of the attached software ("Contribution") is developed by
 * Nokia Corporation and is licensed pursuant to the OpenSSL open source
 * license.
 *
 * The Contribution, originally written by Mika Kousa and Pasi Eronen of
 * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
 * support (see RFC 4279) to OpenSSL.
 *
 * No patent licenses or other rights except those expressly stated in
 * the OpenSSL open source license shall be deemed granted or received
 * expressly, by implication, estoppel, or otherwise.
 *
 * No assurances are provided by Nokia that the Contribution does not
 * infringe the patent or other intellectual property rights of any third
 * party or that the license provides you with all the necessary rights
 * to make use of the Contribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
 * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
 * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
 * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
 * OTHERWISE.
 */
a128 5
#ifndef OPENSSL_NO_TLSEXT
#ifndef OPENSSL_NO_EC
#include "../crypto/ec/ec_lcl.h"
#endif /* OPENSSL_NO_EC */
#endif /* OPENSSL_NO_TLSEXT */
d133 1
a140 1

d147 1
a147 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_eNULL,
	SSL_MD5,
	SSL_SSLV3,
a148 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d151 3
a154 1

d160 1
a160 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_eNULL,
	SSL_SHA1,
	SSL_SSLV3,
a161 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d164 3
a167 1

d173 1
a173 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
d175 1
a175 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d178 2
a180 1

d186 1
a186 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
d188 1
a188 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d191 2
a193 1

d199 1
a199 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_SHA1,
	SSL_SSLV3,
d201 1
a201 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d204 2
a206 1

d212 1
a212 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC2,
	SSL_MD5,
	SSL_SSLV3,
d214 1
a214 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d217 2
a219 1

d226 1
a226 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_IDEA,
	SSL_SHA1,
	SSL_SSLV3,
d228 1
a228 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d231 2
a234 1

d240 1
a240 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d242 1
a242 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d245 2
a247 1

d253 1
a253 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d255 1
a255 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d258 2
a260 1

d266 1
a266 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
d268 1
a268 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d271 2
a273 1

d280 1
a280 5
	SSL_kDHd,
	SSL_aDH,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d282 1
a282 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d285 2
a287 1

d290 1
a290 1
	0, /* not implemented (non-ephemeral DH) */
d293 1
a293 5
	SSL_kDHd,
	SSL_aDH,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d295 1
a295 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d298 2
a300 1

d303 1
a303 1
	0, /* not implemented (non-ephemeral DH) */
d306 1
a306 5
	SSL_kDHd,
	SSL_aDH,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
d308 1
a308 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d311 2
a313 1

d316 1
a316 1
	0, /* not implemented (non-ephemeral DH) */
d319 1
a319 5
	SSL_kDHr,
	SSL_aDH,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d321 1
a321 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d324 2
a326 1

d329 1
a329 1
	0, /* not implemented (non-ephemeral DH) */
d332 1
a332 5
	SSL_kDHr,
	SSL_aDH,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d334 1
a334 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d337 2
a339 1

d342 1
a342 1
	0, /* not implemented (non-ephemeral DH) */
d345 1
a345 5
	SSL_kDHr,
	SSL_aDH,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
d347 1
a347 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d350 2
d360 1
a360 5
	SSL_kEDH,
	SSL_aDSS,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d362 1
a362 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d365 2
a367 1

d373 1
a373 5
	SSL_kEDH,
	SSL_aDSS,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d375 1
a375 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d378 2
a380 1

d386 1
a386 5
	SSL_kEDH,
	SSL_aDSS,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
d388 1
a388 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d391 2
a393 1

d399 1
a399 5
	SSL_kEDH,
	SSL_aRSA,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d401 1
a401 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d404 2
a406 1

d412 1
a412 5
	SSL_kEDH,
	SSL_aRSA,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d414 1
a414 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d417 2
a419 1

d425 1
a425 5
	SSL_kEDH,
	SSL_aRSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
d427 1
a427 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d430 2
a432 1

d438 1
a438 5
	SSL_kEDH,
	SSL_aNULL,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
d440 1
a440 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d443 2
a445 1

d451 1
a451 5
	SSL_kEDH,
	SSL_aNULL,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
d453 1
a453 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d456 2
a458 1

d464 1
a464 5
	SSL_kEDH,
	SSL_aNULL,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d466 1
a466 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d469 2
a471 1

d477 1
a477 5
	SSL_kEDH,
	SSL_aNULL,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d479 1
a479 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d482 2
a484 1

d490 1
a490 5
	SSL_kEDH,
	SSL_aNULL,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
d492 1
a492 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d495 2
d499 1
a499 2
/* Fortezza ciphersuite from SSL 3.0 spec */
#if 0
d505 1
a505 5
	SSL_kFZA,
	SSL_aFZA,
	SSL_eNULL,
	SSL_SHA1,
	SSL_SSLV3,
a506 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d509 3
d519 1
a519 5
	SSL_kFZA,
	SSL_aFZA,
	SSL_eFZA,
	SSL_SHA1,
	SSL_SSLV3,
a520 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d523 3
d528 1
d534 1
a534 5
	SSL_kFZA,
	SSL_aFZA,
	SSL_RC4,
	SSL_SHA1,
	SSL_SSLV3,
d536 1
a536 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d539 2
d545 1
a545 1
/* The Kerberos ciphers*/
d551 1
a551 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d553 1
a553 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d556 2
d565 1
a565 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_3DES,
	SSL_SHA1,
	SSL_SSLV3,
d567 1
a567 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d570 2
d579 1
a579 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC4,
	SSL_SHA1,
	SSL_SSLV3,
d581 1
a581 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d584 2
d593 1
a593 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_IDEA,
	SSL_SHA1,
	SSL_SSLV3,
d595 1
a595 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d598 2
d607 1
a607 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_DES,
	SSL_MD5,
	SSL_SSLV3,
d609 1
a609 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d612 2
d621 1
a621 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_3DES,
	SSL_MD5,
	SSL_SSLV3,
d623 1
a623 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d626 2
d635 1
a635 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
d637 1
a637 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d640 2
d649 1
a649 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_IDEA,
	SSL_MD5,
	SSL_SSLV3,
d651 1
a651 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d654 2
d663 1
a663 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_DES,
	SSL_SHA1,
	SSL_SSLV3,
d665 1
a665 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d668 2
d677 1
a677 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC2,
	SSL_SHA1,
	SSL_SSLV3,
d679 1
a679 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d682 2
d691 1
a691 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC4,
	SSL_SHA1,
	SSL_SSLV3,
d693 1
a693 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d696 2
d705 1
a705 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_DES,
	SSL_MD5,
	SSL_SSLV3,
d707 1
a707 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d710 2
d719 1
a719 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC2,
	SSL_MD5,
	SSL_SSLV3,
d721 1
a721 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d724 2
d733 1
a733 5
	SSL_kKRB5,
	SSL_aKRB5,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV3,
d735 1
a735 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d738 2
d749 1
a749 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
d751 1
a751 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d754 2
d762 1
a762 5
	SSL_kDHd,
	SSL_aDH,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
d764 1
a764 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d767 2
d775 1
a775 5
	SSL_kDHr,
	SSL_aDH,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
d777 1
a777 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d780 2
d788 1
a788 5
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
d790 1
a790 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d793 2
d801 1
a801 5
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
d803 1
a803 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d806 2
d814 1
a814 5
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
d816 1
a816 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d819 2
d828 1
a828 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
d830 1
a830 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d833 2
d841 1
a841 5
	SSL_kDHd,
	SSL_aDH,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
d843 1
a843 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d846 2
a848 1

d851 1
a851 1
	0, /* not implemented (non-ephemeral DH) */
d854 1
a854 5
	SSL_kDHr,
	SSL_aDH,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
d856 1
a856 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d859 2
a861 1

d867 1
a867 5
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
d869 1
a869 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d872 2
a874 1

d880 1
a880 5
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
d882 1
a882 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d885 2
a887 1

d893 1
a893 5
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
d895 1
a895 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d898 2
d910 1
a910 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
d912 1
a912 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d915 2
a917 1

d923 1
a923 5
	SSL_kDHd,
	SSL_aDH,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
d925 1
a925 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d928 2
a930 1

d936 1
a936 5
	SSL_kDHr,
	SSL_aDH,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
d938 1
a938 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d941 2
a943 1

d949 1
a949 5
	SSL_kEDH,
	SSL_aDSS,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
d951 1
a951 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d954 2
a956 1

d962 1
a962 5
	SSL_kEDH,
	SSL_aRSA,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
d964 1
a964 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d967 2
a969 1

d975 1
a975 5
	SSL_kEDH,
	SSL_aNULL,
	SSL_CAMELLIA128,
	SSL_SHA1,
	SSL_TLSV1,
d977 1
a977 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d980 2
d989 12
a1000 15
	{
	1,
	TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5,
	TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	128,
	},

d1002 12
a1013 14
	{
	1,
	TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5,
	TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC2,
	SSL_MD5,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	128,
	},
a1014 1

d1016 12
a1027 15
	{
	1,
	TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA,
	TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
	},

d1029 12
a1040 15
	{
	1,
	TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
	TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	56,
	},

d1042 12
a1053 15
	{
	1,
	TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA,
	TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	128,
	},

d1055 12
a1066 15
	{
	1,
	TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_EXPORT|SSL_EXP56,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	56,
	128,
	},

d1068 12
a1079 14
	{
	1,
	TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA,
	TLS1_CK_DHE_DSS_WITH_RC4_128_SHA,
	SSL_kEDH,
	SSL_aDSS,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
a1080 56
	{
	1,
	"GOST94-GOST89-GOST89",
	0x3000080,
	SSL_kGOST,
	SSL_aGOST94,
	SSL_eGOST2814789CNT,
	SSL_GOST89MAC,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94|TLS1_STREAM_MAC,
	256,
	256
	},
	{
	1,
	"GOST2001-GOST89-GOST89",
	0x3000081,
	SSL_kGOST,
	SSL_aGOST01,
	SSL_eGOST2814789CNT,
	SSL_GOST89MAC,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94|TLS1_STREAM_MAC,
	256,
	256
	},
	{
	1,
	"GOST94-NULL-GOST94",
	0x3000082,
	SSL_kGOST,
	SSL_aGOST94,
	SSL_eNULL,
	SSL_GOST94,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94,
	0,
	0
	},
	{
	1,
	"GOST2001-NULL-GOST94",
	0x3000083,
	SSL_kGOST,
	SSL_aGOST01,
	SSL_eNULL,
	SSL_GOST94,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_GOST94|TLS1_PRF_GOST94,
	0,
	0
	},
d1090 1
a1090 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
d1092 1
a1092 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1095 2
d1103 1
a1103 5
	SSL_kDHd,
	SSL_aDH,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
d1105 1
a1105 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1108 2
a1110 1

d1116 1
a1116 5
	SSL_kDHr,
	SSL_aDH,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
d1118 1
a1118 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1121 2
a1123 1

d1129 1
a1129 5
	SSL_kEDH,
	SSL_aDSS,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
d1131 1
a1131 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1134 2
a1136 1

d1142 1
a1142 5
	SSL_kEDH,
	SSL_aRSA,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
d1144 1
a1144 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1147 2
a1149 1

d1155 1
a1155 5
	SSL_kEDH,
	SSL_aNULL,
	SSL_CAMELLIA256,
	SSL_SHA1,
	SSL_TLSV1,
d1157 1
a1157 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1160 2
a1164 66
#ifndef OPENSSL_NO_PSK
	/* Cipher 8A */
	{
	1,
	TLS1_TXT_PSK_WITH_RC4_128_SHA,
	TLS1_CK_PSK_WITH_RC4_128_SHA,
	SSL_kPSK,
	SSL_aPSK,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher 8B */
	{
	1,
	TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA,
	TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA,
	SSL_kPSK,
	SSL_aPSK,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},

	/* Cipher 8C */
	{
	1,
	TLS1_TXT_PSK_WITH_AES_128_CBC_SHA,
	TLS1_CK_PSK_WITH_AES_128_CBC_SHA,
	SSL_kPSK,
	SSL_aPSK,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher 8D */
	{
	1,
	TLS1_TXT_PSK_WITH_AES_256_CBC_SHA,
	TLS1_CK_PSK_WITH_AES_256_CBC_SHA,
	SSL_kPSK,
	SSL_aPSK,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},
#endif  /* OPENSSL_NO_PSK */

d1173 1
a1173 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
d1175 1
a1175 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1178 2
d1187 1
a1187 5
	SSL_kDHd,
	SSL_aDH,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
d1189 1
a1189 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1192 2
d1201 1
a1201 5
	SSL_kDHr,
	SSL_aDH,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
d1203 1
a1203 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1206 2
d1215 1
a1215 5
	SSL_kEDH,
	SSL_aDSS,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
d1217 1
a1217 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1220 2
d1229 1
a1229 5
	SSL_kEDH,
	SSL_aRSA,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
d1231 1
a1231 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1234 2
d1243 1
a1243 5
	SSL_kEDH,
	SSL_aNULL,
	SSL_SEED,
	SSL_SHA1,
	SSL_TLSV1,
d1245 1
a1245 1
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
d1248 2
d1256 12
a1267 14
	{
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA,
	TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
	},
d1270 12
a1281 14
	{
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
d1284 12
a1295 14
	{
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},
d1298 12
a1309 14
	{
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
d1312 12
a1323 14
	{
	1,
	TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},
d1326 12
a1337 14
	{
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA,
	TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
	},
d1340 12
a1351 14
	{
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
d1354 12
a1365 14
	{
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},
d1368 12
a1379 14
	{
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
d1382 12
a1393 14
	{
	1,
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},
d1396 12
a1407 14
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_NULL_SHA,
	TLS1_CK_ECDH_RSA_WITH_NULL_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
	},
d1410 12
a1421 14
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
d1424 12
a1435 14
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},
d1438 12
a1449 14
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
d1452 12
a1463 14
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},
d1466 12
a1477 14
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA,
	TLS1_CK_ECDHE_RSA_WITH_NULL_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
	},
d1480 12
a1491 14
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
d1494 12
a1505 14
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},
d1508 12
a1519 14
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
d1522 12
a1533 14
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},
d1536 12
a1547 14
	{
	1,
	TLS1_TXT_ECDH_anon_WITH_NULL_SHA,
	TLS1_CK_ECDH_anon_WITH_NULL_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
	},
d1550 12
a1561 14
	{
	1,
	TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA,
	TLS1_CK_ECDH_anon_WITH_RC4_128_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
d1564 12
a1575 14
	{
	1,
	TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},
d1578 12
a1589 14
	{
	1,
	TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},
d1592 12
a1603 14
	{
	1,
	TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},
a1605 59
#ifdef TEMP_GOST_TLS
/* Cipher FF00 */
	{
	1,
	"GOST-MD5",
	0x0300ff00,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eGOST2814789CNT,
	SSL_MD5,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},
	{
	1,
	"GOST-GOST94",
	0x0300ff01,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eGOST2814789CNT,
	SSL_GOST94,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256
	},
	{
	1,
	"GOST-GOST89MAC",
	0x0300ff02,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eGOST2814789CNT,
	SSL_GOST89MAC,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256
	},
	{
	1,
	"GOST-GOST89STREAM",
	0x0300ff03,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eGOST2814789CNT,
	SSL_GOST89MAC,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF|TLS1_STREAM_MAC,
	256,
	256
	},
#endif
d1612 1
a1612 1
	n_ssl3_mac,
d1631 5
d1641 1
a1641 1
const SSL_CIPHER *ssl3_get_cipher(unsigned int u)
d1663 4
a1666 2
	memset(s3->rrec.seq_num,0,sizeof(s3->rrec.seq_num));
	memset(s3->wrec.seq_num,0,sizeof(s3->wrec.seq_num));
a1680 7
#ifdef TLSEXT_TYPE_opaque_prf_input
	if (s->s3->client_opaque_prf_input != NULL)
		OPENSSL_free(s->s3->client_opaque_prf_input);
	if (s->s3->server_opaque_prf_input != NULL)
		OPENSSL_free(s->s3->server_opaque_prf_input);
#endif

d1683 1
a1683 1
		ssl3_release_read_buffer(s);
d1685 1
a1685 1
		ssl3_release_write_buffer(s);
d1699 5
a1703 4
	if (s->s3->handshake_buffer) {
		BIO_free(s->s3->handshake_buffer);
	}
	if (s->s3->handshake_dgst) ssl3_free_digest_list(s);
a1713 9
#ifdef TLSEXT_TYPE_opaque_prf_input
	if (s->s3->client_opaque_prf_input != NULL)
		OPENSSL_free(s->s3->client_opaque_prf_input);
	s->s3->client_opaque_prf_input = NULL;
	if (s->s3->server_opaque_prf_input != NULL)
		OPENSSL_free(s->s3->server_opaque_prf_input);
	s->s3->server_opaque_prf_input = NULL;
#endif

d1736 4
a1739 7
	if (s->s3->handshake_buffer) {
		BIO_free(s->s3->handshake_buffer);
		s->s3->handshake_buffer = NULL;
	}
	if (s->s3->handshake_dgst) {
		ssl3_free_digest_list(s);
	}	
d1939 1
a1939 25

#ifdef TLSEXT_TYPE_opaque_prf_input
	case SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT:
		if (larg > 12288) /* actual internal limit is 2^16 for the complete hello message
		                   * (including the cert chain and everything) */
			{
			SSLerr(SSL_F_SSL3_CTRL, SSL_R_OPAQUE_PRF_INPUT_TOO_LONG);
			break;
			}
		if (s->tlsext_opaque_prf_input != NULL)
			OPENSSL_free(s->tlsext_opaque_prf_input);
		if ((size_t)larg == 0)
			s->tlsext_opaque_prf_input = OPENSSL_malloc(1); /* dummy byte just to get non-NULL */
		else
			s->tlsext_opaque_prf_input = BUF_memdup(parg, (size_t)larg);
		if (s->tlsext_opaque_prf_input != NULL)
			{
			s->tlsext_opaque_prf_input_len = (size_t)larg;
			ret = 1;
			}
		else
			s->tlsext_opaque_prf_input_len = 0;
		break;
#endif

d2197 1
a2197 7

#ifdef TLSEXT_TYPE_opaque_prf_input
	case SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG:
		ctx->tlsext_opaque_prf_input_callback_arg = parg;
		return 1;
#endif

a2203 1

d2253 1
a2253 7

#ifdef TLSEXT_TYPE_opaque_prf_input
	case SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB:
		ctx->tlsext_opaque_prf_input_callback = (int (*)(SSL *,void *, size_t, void *))fp;
		break;
#endif

d2274 1
a2274 1
const SSL_CIPHER *ssl3_get_cipher_by_char(const unsigned char *p)
d2276 1
a2276 2
	SSL_CIPHER c;
	const SSL_CIPHER *cp;
d2281 4
a2284 1
	cp = OBJ_bsearch_ssl_cipher_id(&c, ssl3_ciphers, SSL3_NUM_CIPHERS);
d2310 2
a2311 6
	int i,ii,ok;
#if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_EC)
	unsigned int j;
	int ec_ok, ec_nid;
	unsigned char ec_search1 = 0, ec_search2 = 0;
#endif
d2313 1
a2313 1
	unsigned long alg_k,alg_a,mask_k,mask_a,emask_k,emask_a;
d2329 8
a2336 8
	printf("Server has %d from %p:\n", sk_SSL_CIPHER_num(srvr), (void *)srvr);
	for(i=0 ; i < sk_SSL_CIPHER_num(srvr) ; ++i)
		{
		c=sk_SSL_CIPHER_value(srvr,i);
		printf("%p:%s\n",(void *)c,c->name);
		}
	printf("Client sent %d from %p:\n", sk_SSL_CIPHER_num(clnt), (void *)clnt);
	for(i=0 ; i < sk_SSL_CIPHER_num(clnt) ; ++i)
d2339 1
a2339 1
	    printf("%p:%s\n",(void *)c,c->name);
d2344 4
a2347 4
		{
		prio = srvr;
		allow = clnt;
		}
d2349 4
a2352 4
		{
		prio = clnt;
		allow = srvr;
		}
d2359 2
a2360 4
		mask_k = cert->mask_k;
		mask_a = cert->mask_a;
		emask_k = cert->export_mask_k;
		emask_a = cert->export_mask_a;
d2363 1
a2363 1
/*		printf("ssl3_choose_cipher %d alg= %lx\n", i,c->algorithms);*/
d2366 1
a2366 3
		alg_k=c->algorithm_mkey;
		alg_a=c->algorithm_auth;

d2368 5
a2372 5
		if (alg_k & SSL_kKRB5)
			{
			if ( !kssl_keytab_is_available(s->kssl_ctx) )
			    continue;
			}
a2373 6
#ifndef OPENSSL_NO_PSK
		/* with PSK there must be server callback set */
		if ((alg_k & SSL_kPSK) && s->psk_server_callback == NULL)
			continue;
#endif /* OPENSSL_NO_PSK */

d2376 1
a2376 1
			ok = (alg_k & emask_k) && (alg_a & emask_a);
d2378 2
a2379 2
			printf("%d:[%08lX:%08lX:%08lX:%08lX]%p:%s (export)\n",ok,alg_k,alg_a,emask_k,emask_a,
			       (void *)c,c->name);
d2384 1
a2384 1
			ok = (alg_k & mask_k) && (alg_a & mask_a);
d2386 1
a2386 1
			printf("%d:[%08lX:%08lX:%08lX:%08lX]%p:%s\n",ok,alg_k,alg_a,mask_k,mask_a,(void *)c,
a2390 154
#ifndef OPENSSL_NO_TLSEXT
#ifndef OPENSSL_NO_EC
		if (
			/* if we are considering an ECC cipher suite that uses our certificate */
			(alg_a & SSL_aECDSA || alg_a & SSL_aECDH)
			/* and we have an ECC certificate */
			&& (s->cert->pkeys[SSL_PKEY_ECC].x509 != NULL)
			/* and the client specified a Supported Point Formats extension */
			&& ((s->session->tlsext_ecpointformatlist_length > 0) && (s->session->tlsext_ecpointformatlist != NULL))
			/* and our certificate's point is compressed */
			&& (
				(s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key->data != NULL)
				&& (
					(*(s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key->data) == POINT_CONVERSION_COMPRESSED)
					|| (*(s->cert->pkeys[SSL_PKEY_ECC].x509->cert_info->key->public_key->data) == POINT_CONVERSION_COMPRESSED + 1)
					)
				)
		)
			{
			ec_ok = 0;
			/* if our certificate's curve is over a field type that the client does not support
			 * then do not allow this cipher suite to be negotiated */
			if (
				(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth != NULL)
				&& (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_prime_field)
			)
				{
				for (j = 0; j < s->session->tlsext_ecpointformatlist_length; j++)
					{
					if (s->session->tlsext_ecpointformatlist[j] == TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime)
						{
						ec_ok = 1;
						break;
						}
					}
				}
			else if (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_characteristic_two_field)
				{
				for (j = 0; j < s->session->tlsext_ecpointformatlist_length; j++)
					{
					if (s->session->tlsext_ecpointformatlist[j] == TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2)
						{
						ec_ok = 1;
						break;
						}
					}
				}
			ok = ok && ec_ok;
			}
		if (
			/* if we are considering an ECC cipher suite that uses our certificate */
			(alg_a & SSL_aECDSA || alg_a & SSL_aECDH)
			/* and we have an ECC certificate */
			&& (s->cert->pkeys[SSL_PKEY_ECC].x509 != NULL)
			/* and the client specified an EllipticCurves extension */
			&& ((s->session->tlsext_ellipticcurvelist_length > 0) && (s->session->tlsext_ellipticcurvelist != NULL))
		)
			{
			ec_ok = 0;
			if (
				(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec != NULL)
				&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group != NULL)
			)
				{
				ec_nid = EC_GROUP_get_curve_name(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group);
				if ((ec_nid == 0)
					&& (s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth != NULL)
				)
					{
					if (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_prime_field)
						{
						ec_search1 = 0xFF;
						ec_search2 = 0x01;
						}
					else if (EC_METHOD_get_field_type(s->cert->pkeys[SSL_PKEY_ECC].privatekey->pkey.ec->group->meth) == NID_X9_62_characteristic_two_field)
						{
						ec_search1 = 0xFF;
						ec_search2 = 0x02;
						}
					}
				else
					{
					ec_search1 = 0x00;
					ec_search2 = tls1_ec_nid2curve_id(ec_nid);
					}
				if ((ec_search1 != 0) || (ec_search2 != 0))
					{
					for (j = 0; j < s->session->tlsext_ellipticcurvelist_length / 2; j++)
						{
						if ((s->session->tlsext_ellipticcurvelist[2*j] == ec_search1) && (s->session->tlsext_ellipticcurvelist[2*j+1] == ec_search2))
							{
							ec_ok = 1;
							break;
							}
						}
					}
				}
			ok = ok && ec_ok;
			}
		if (
			/* if we are considering an ECC cipher suite that uses an ephemeral EC key */
			(alg_k & SSL_kEECDH)
			/* and we have an ephemeral EC key */
			&& (s->cert->ecdh_tmp != NULL)
			/* and the client specified an EllipticCurves extension */
			&& ((s->session->tlsext_ellipticcurvelist_length > 0) && (s->session->tlsext_ellipticcurvelist != NULL))
		)
			{
			ec_ok = 0;
			if (s->cert->ecdh_tmp->group != NULL)
				{
				ec_nid = EC_GROUP_get_curve_name(s->cert->ecdh_tmp->group);
				if ((ec_nid == 0)
					&& (s->cert->ecdh_tmp->group->meth != NULL)
				)
					{
					if (EC_METHOD_get_field_type(s->cert->ecdh_tmp->group->meth) == NID_X9_62_prime_field)
						{
						ec_search1 = 0xFF;
						ec_search2 = 0x01;
						}
					else if (EC_METHOD_get_field_type(s->cert->ecdh_tmp->group->meth) == NID_X9_62_characteristic_two_field)
						{
						ec_search1 = 0xFF;
						ec_search2 = 0x02;
						}
					}
				else
					{
					ec_search1 = 0x00;
					ec_search2 = tls1_ec_nid2curve_id(ec_nid);
					}
				if ((ec_search1 != 0) || (ec_search2 != 0))
					{
					for (j = 0; j < s->session->tlsext_ellipticcurvelist_length / 2; j++)
						{
						if ((s->session->tlsext_ellipticcurvelist[2*j] == ec_search1) && (s->session->tlsext_ellipticcurvelist[2*j+1] == ec_search2))
							{
							ec_ok = 1;
							break;
							}
						}
					}
				}
			ok = ok && ec_ok;
			}
#endif /* OPENSSL_NO_EC */
#endif /* OPENSSL_NO_TLSEXT */

d2392 2
a2393 2
		ii=sk_SSL_CIPHER_find(allow,c);
		if (ii >= 0)
d2395 1
a2395 1
			ret=sk_SSL_CIPHER_value(allow,ii);
d2405 1
a2405 1
	unsigned long alg_k;
d2407 1
a2407 13
	alg_k = s->s3->tmp.new_cipher->algorithm_mkey;

#ifndef OPENSSL_NO_GOST
	if (s->version >= TLS1_VERSION)
		{
		if (alg_k & SSL_kGOST)
			{
			p[ret++]=TLS_CT_GOST94_SIGN;
			p[ret++]=TLS_CT_GOST01_SIGN;
			return(ret);
			}
		}
#endif
d2410 1
a2410 1
	if (alg_k & (SSL_kDHr|SSL_kEDH))
d2420 1
a2420 1
		(alg_k & (SSL_kEDH|SSL_kDHd|SSL_kDHr)))
d2437 4
a2440 1
	if ((alg_k & (SSL_kECDHr|SSL_kECDHe)) && (s->version >= TLS1_VERSION))
d2449 1
a2449 1
	 * so we don't need to check for SSL_kECDH or SSL_kEECDH
a2460 1
	int ret;
a2477 2
	 	if (s->s3->alert_dispatch)
	 		return(-1);	/* return WANT_WRITE */
d2483 1
a2483 9
		ret=s->method->ssl_dispatch_alert(s);
		if(ret == -1)
			{
			/* we only get to return -1 here the 2nd/Nth
			 * invocation, we must  have already signalled
			 * return 0 upon a previous invoation,
			 * return WANT_WRITE */
			return(ret);
			}
a2489 4
		if(!(s->shutdown & SSL_RECEIVED_SHUTDOWN))
			{
			return(-1);	/* return WANT_READ */
			}
@


1.1.1.11
log
@import OpenSSL 1.0.0e
@
text
@a2200 1
		{
a2201 2
		s->s3->tmp.dh = NULL;
		}
a2204 1
		{
a2205 2
		s->s3->tmp.ecdh = NULL;
		}
@


1.1.1.12
log
@OpenSSL 1.0.0f: import upstream source
@
text
@a2179 1
	int init_extra;
a2217 1
	init_extra = s->s3->init_extra;
a2229 1
	s->s3->init_extra = init_extra;
@


1.1.1.13
log
@import OpenSSL-1.0.1c
@
text
@a1073 97
	/* TLS v1.2 ciphersuites */
	/* Cipher 3B */
	{
	1,
	TLS1_TXT_RSA_WITH_NULL_SHA256,
	TLS1_CK_RSA_WITH_NULL_SHA256,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eNULL,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
	},

	/* Cipher 3C */
	{
	1,
	TLS1_TXT_RSA_WITH_AES_128_SHA256,
	TLS1_CK_RSA_WITH_AES_128_SHA256,
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher 3D */
	{
	1,
	TLS1_TXT_RSA_WITH_AES_256_SHA256,
	TLS1_CK_RSA_WITH_AES_256_SHA256,
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},

	/* Cipher 3E */
	{
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_DSS_WITH_AES_128_SHA256,
	TLS1_CK_DH_DSS_WITH_AES_128_SHA256,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher 3F */
	{
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_AES_128_SHA256,
	TLS1_CK_DH_RSA_WITH_AES_128_SHA256,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher 40 */
	{
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256,
	TLS1_CK_DHE_DSS_WITH_AES_128_SHA256,
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

a1289 116

	/* TLS v1.2 ciphersuites */
	/* Cipher 67 */
	{
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256,
	TLS1_CK_DHE_RSA_WITH_AES_128_SHA256,
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher 68 */
	{
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_DSS_WITH_AES_256_SHA256,
	TLS1_CK_DH_DSS_WITH_AES_256_SHA256,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},

	/* Cipher 69 */
	{
	0, /* not implemented (non-ephemeral DH) */
	TLS1_TXT_DH_RSA_WITH_AES_256_SHA256,
	TLS1_CK_DH_RSA_WITH_AES_256_SHA256,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},

	/* Cipher 6A */
	{
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256,
	TLS1_CK_DHE_DSS_WITH_AES_256_SHA256,
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},

	/* Cipher 6B */
	{
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256,
	TLS1_CK_DHE_RSA_WITH_AES_256_SHA256,
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},

	/* Cipher 6C */
	{
	1,
	TLS1_TXT_ADH_WITH_AES_128_SHA256,
	TLS1_CK_ADH_WITH_AES_128_SHA256,
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher 6D */
	{
	1,
	TLS1_TXT_ADH_WITH_AES_256_SHA256,
	TLS1_CK_ADH_WITH_AES_256_SHA256,
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES256,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},

	/* GOST Ciphersuites */

a1612 194
	/* GCM ciphersuites from RFC5288 */

	/* Cipher 9C */
	{
	1,
	TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_RSA_WITH_AES_128_GCM_SHA256,
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
	},

	/* Cipher 9D */
	{
	1,
	TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_RSA_WITH_AES_256_GCM_SHA384,
	SSL_kRSA,
	SSL_aRSA,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
	},

	/* Cipher 9E */
	{
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256,
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
	},

	/* Cipher 9F */
	{
	1,
	TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384,
	SSL_kEDH,
	SSL_aRSA,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
	},

	/* Cipher A0 */
	{
	0,
	TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
	},

	/* Cipher A1 */
	{
	0,
	TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
	},

	/* Cipher A2 */
	{
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256,
	TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256,
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
	},

	/* Cipher A3 */
	{
	1,
	TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384,
	TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384,
	SSL_kEDH,
	SSL_aDSS,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
	},

	/* Cipher A4 */
	{
	0,
	TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256,
	TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
	},

	/* Cipher A5 */
	{
	0,
	TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384,
	TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384,
	SSL_kDHr,
	SSL_aDH,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
	},

	/* Cipher A6 */
	{
	1,
	TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256,
	TLS1_CK_ADH_WITH_AES_128_GCM_SHA256,
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
	},

	/* Cipher A7 */
	{
	1,
	TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384,
	TLS1_CK_ADH_WITH_AES_256_GCM_SHA384,
	SSL_kEDH,
	SSL_aNULL,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
	},

d1624 1
a1624 1
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d1656 1
a1656 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1672 1
a1672 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1688 1
a1688 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1704 1
a1704 1
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
d1736 1
a1736 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1752 1
a1752 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
a1767 370
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},

	/* Cipher C00B */
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_NULL_SHA,
	TLS1_CK_ECDH_RSA_WITH_NULL_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
	},

	/* Cipher C00C */
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher C00D */
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},

	/* Cipher C00E */
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher C00F */
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA,
	SSL_kECDHr,
	SSL_aECDH,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},

	/* Cipher C010 */
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA,
	TLS1_CK_ECDHE_RSA_WITH_NULL_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
	},

	/* Cipher C011 */
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA,
	TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher C012 */
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},

	/* Cipher C013 */
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher C014 */
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA,
	SSL_kEECDH,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},

	/* Cipher C015 */
	{
	1,
	TLS1_TXT_ECDH_anon_WITH_NULL_SHA,
	TLS1_CK_ECDH_anon_WITH_NULL_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_eNULL,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_STRONG_NONE|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	0,
	0,
	},

	/* Cipher C016 */
	{
	1,
	TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA,
	TLS1_CK_ECDH_anon_WITH_RC4_128_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_RC4,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_MEDIUM,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher C017 */
	{
	1,
	TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA,
	TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},

	/* Cipher C018 */
	{
	1,
	TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA,
	TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher C019 */
	{
	1,
	TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA,
	TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA,
	SSL_kEECDH,
	SSL_aNULL,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},
#endif	/* OPENSSL_NO_ECDH */

#ifndef OPENSSL_NO_SRP
	/* Cipher C01A */
	{
	1,
	TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
	TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
	SSL_kSRP,
	SSL_aNULL,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},

	/* Cipher C01B */
	{
	1,
	TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
	TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
	SSL_kSRP,
	SSL_aRSA,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},

	/* Cipher C01C */
	{
	1,
	TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
	TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
	SSL_kSRP,
	SSL_aDSS,
	SSL_3DES,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	168,
	168,
	},

	/* Cipher C01D */
	{
	1,
	TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA,
	TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA,
	SSL_kSRP,
	SSL_aNULL,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher C01E */
	{
	1,
	TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
	TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
	SSL_kSRP,
	SSL_aRSA,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher C01F */
	{
	1,
	TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
	TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
	SSL_kSRP,
	SSL_aDSS,
	SSL_AES128,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	128,
	128,
	},

	/* Cipher C020 */
	{
	1,
	TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA,
	TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA,
	SSL_kSRP,
	SSL_aNULL,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
	SSL_NOT_EXP|SSL_HIGH,
	SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF,
	256,
	256,
	},

	/* Cipher C021 */
	{
	1,
	TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
	TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
	SSL_kSRP,
	SSL_aRSA,
	SSL_AES256,
	SSL_SHA1,
	SSL_TLSV1,
d1774 1
a1774 1
	/* Cipher C022 */
d1777 5
a1781 5
	TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
	TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
	SSL_kSRP,
	SSL_aDSS,
	SSL_AES256,
d1784 1
a1784 1
	SSL_NOT_EXP|SSL_HIGH,
d1786 2
a1787 2
	256,
	256,
a1788 2
#endif  /* OPENSSL_NO_SRP */
#ifndef OPENSSL_NO_ECDH
d1790 1
a1790 3
	/* HMAC based TLS v1.2 ciphersuites from RFC5289 */

	/* Cipher C023 */
d1793 9
a1801 9
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1806 1
a1806 1
	/* Cipher C024 */
d1809 11
a1819 11
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384,
	SSL_kEECDH,
	SSL_aECDSA,
	SSL_AES256,
	SSL_SHA384,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d1822 1
a1822 1
	/* Cipher C025 */
d1825 3
a1827 3
	TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256,
	TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256,
	SSL_kECDHe,
d1830 4
a1833 4
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1838 1
a1838 1
	/* Cipher C026 */
d1841 3
a1843 3
	TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384,
	TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384,
	SSL_kECDHe,
d1846 4
a1849 4
	SSL_SHA384,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d1854 1
a1854 1
	/* Cipher C027 */
d1857 2
a1858 2
	TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256,
	TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256,
d1861 7
a1867 7
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d1870 1
a1870 1
	/* Cipher C028 */
d1873 2
a1874 2
	TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384,
	TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384,
d1877 5
a1881 21
	SSL_AES256,
	SSL_SHA384,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
	},

	/* Cipher C029 */
	{
	1,
	TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256,
	TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES128,
	SSL_SHA256,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1886 1
a1886 1
	/* Cipher C02A */
d1889 11
a1899 11
	TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384,
	TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES256,
	SSL_SHA384,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d1902 1
a1902 3
	/* GCM based TLS v1.2 ciphersuites from RFC5289 */

	/* Cipher C02B */
d1905 2
a1906 2
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
d1908 6
a1913 6
	SSL_aECDSA,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1918 1
a1918 1
	/* Cipher C02C */
d1921 2
a1922 2
	TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
d1924 6
a1929 6
	SSL_aECDSA,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d1934 1
a1934 1
	/* Cipher C02D */
d1937 11
a1947 11
	TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
	128,
	128,
d1950 1
a1950 1
	/* Cipher C02E */
d1953 2
a1954 18
	TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
	},

	/* Cipher C02F */
	{
	1,
	TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
d1956 6
a1961 6
	SSL_aRSA,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1966 1
a1966 1
	/* Cipher C030 */
d1969 2
a1970 2
	TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
d1972 8
a1979 8
	SSL_aRSA,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
	256,
	256,
d1982 1
a1982 1
	/* Cipher C031 */
d1985 9
a1993 9
	TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256,
	TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES128GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA256|TLS1_PRF_SHA256,
d1998 1
a1998 1
	/* Cipher C032 */
d2001 9
a2009 9
	TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384,
	TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384,
	SSL_kECDHe,
	SSL_aECDH,
	SSL_AES256GCM,
	SSL_AEAD,
	SSL_TLSV1_2,
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
	SSL_HANDSHAKE_MAC_SHA384|TLS1_PRF_SHA384,
d2013 1
a2013 3

#endif /* OPENSSL_NO_ECDH */

a2089 3
	(int (*)(SSL *, unsigned char *, size_t, const char *,
		 size_t, const unsigned char *, size_t,
		 int use_context))ssl_undefined_function,
a2130 3
#ifndef OPENSSL_NO_SRP
	SSL_SRP_CTX_init(s);
#endif
a2170 3
#ifndef OPENSSL_NO_SRP
	SSL_SRP_CTX_free(s);
#endif
a2241 15

#if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)
	if (s->next_proto_negotiated)
		{
		OPENSSL_free(s->next_proto_negotiated);
		s->next_proto_negotiated = NULL;
		s->next_proto_negotiated_len = 0;
		}
#endif
	}

#ifndef OPENSSL_NO_SRP
static char * MS_CALLBACK srp_password_from_info_cb(SSL *s, void *arg)
	{
	return BUF_strdup(s->srp_ctx.info) ;
a2242 1
#endif
a2488 21
#ifndef OPENSSL_NO_HEARTBEATS
	case SSL_CTRL_TLS_EXT_SEND_HEARTBEAT:
		if (SSL_version(s) == DTLS1_VERSION || SSL_version(s) == DTLS1_BAD_VER)
			ret = dtls1_heartbeat(s);
		else
			ret = tls1_heartbeat(s);
		break;

	case SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING:
		ret = s->tlsext_hb_pending;
		break;

	case SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS:
		if (larg)
			s->tlsext_heartbeat |= SSL_TLSEXT_HB_DONT_RECV_REQUESTS;
		else
			s->tlsext_heartbeat &= ~SSL_TLSEXT_HB_DONT_RECV_REQUESTS;
		ret = 1;
		break;
#endif

a2720 32
#ifndef OPENSSL_NO_SRP
	case SSL_CTRL_SET_TLS_EXT_SRP_USERNAME:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		if (ctx->srp_ctx.login != NULL)
			OPENSSL_free(ctx->srp_ctx.login);
		ctx->srp_ctx.login = NULL;
		if (parg == NULL)
			break;
		if (strlen((const char *)parg) > 255 || strlen((const char *)parg) < 1)
			{
			SSLerr(SSL_F_SSL3_CTX_CTRL, SSL_R_INVALID_SRP_USERNAME);
			return 0;
			} 
		if ((ctx->srp_ctx.login = BUF_strdup((char *)parg)) == NULL)
			{
			SSLerr(SSL_F_SSL3_CTX_CTRL, ERR_R_INTERNAL_ERROR);
			return 0;
			}
		break;
	case SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD:
		ctx->srp_ctx.SRP_give_srp_client_pwd_callback=srp_password_from_info_cb;
		ctx->srp_ctx.info=parg;
		break;
	case SSL_CTRL_SET_SRP_ARG:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.SRP_cb_arg=parg;
		break;

	case SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH:
		ctx->srp_ctx.strength=larg;
		break;
#endif
a2732 12
	case SSL_CTRL_GET_EXTRA_CHAIN_CERTS:
		*(STACK_OF(X509) **)parg =  ctx->extra_certs;
		break;

	case SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS:
		if (ctx->extra_certs)
			{
			sk_X509_pop_free(ctx->extra_certs, X509_free);
			ctx->extra_certs = NULL;
			}
		break;

a2789 14
#ifndef OPENSSL_NO_SRP
	case SSL_CTRL_SET_SRP_VERIFY_PARAM_CB:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.SRP_verify_param_callback=(int (*)(SSL *,void *))fp;
		break;
	case SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.TLS_ext_srp_username_callback=(int (*)(SSL *,int *,void *))fp;
		break;
	case SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB:
		ctx->srp_ctx.srp_Mask|=SSL_kSRP;
		ctx->srp_ctx.SRP_give_srp_client_pwd_callback=(char *(*)(SSL *,void *))fp;
		break;
#endif
a2807 3
#ifdef DEBUG_PRINT_UNKNOWN_CIPHERSUITES
if (cp == NULL) fprintf(stderr, "Unknown cipher ID %x\n", (p[0] << 8) | p[1]);
#endif
a2884 5
		/* Skip TLS v1.2 only ciphersuites if lower than v1.2 */
		if ((c->algorithm_ssl & SSL_TLSV1_2) && 
			(TLS1_get_version(s) < TLS1_2_VERSION))
			continue;

a2889 4
#ifndef OPENSSL_NO_SRP
		mask_k=cert->mask_k | s->srp_ctx.srp_Mask;
		emask_k=cert->export_mask_k | s->srp_ctx.srp_Mask;
#endif
d3338 1
a3338 12
/* If we are using TLS v1.2 or later and default SHA1+MD5 algorithms switch
 * to new SHA256 PRF and handshake macs
 */
long ssl_get_algorithm2(SSL *s)
	{
	long alg2 = s->s3->tmp.new_cipher->algorithm2;
	if (TLS1_get_version(s) >= TLS1_2_VERSION &&
	    alg2 == (SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF))
		return SSL_HANDSHAKE_MAC_SHA256 | TLS1_PRF_SHA256;
	return alg2;
	}
		
@


1.1.1.14
log
@Import OpenSSL 1.0.1g
@
text
@d1128 1
a1128 1
	SSL_kDHd,
d1410 1
a1410 1
	SSL_kDHd,
d1686 1
a1686 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1702 1
a1702 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1718 1
a1718 1
	SSL_NOT_EXP|SSL_HIGH|SSL_FIPS,
d1961 1
a1961 1
	SSL_kDHd,
d1977 1
a1977 1
	SSL_kDHd,
d2672 1
a2672 1
	SSL_kECDHr,
d2688 1
a2688 1
	SSL_kECDHr,
d2802 1
a2802 1
	SSL_kECDHr,
d2818 1
a2818 1
	SSL_kECDHr,
a3039 5
#ifndef OPENSSL_NO_TLSEXT
#ifndef OPENSSL_NO_EC
	s->s3->is_probably_safari = 0;
#endif /* !OPENSSL_NO_EC */
#endif /* !OPENSSL_NO_TLSEXT */
a4018 7
#if !defined(OPENSSL_NO_EC) && !defined(OPENSSL_NO_TLSEXT)
			if ((alg_k & SSL_kEECDH) && (alg_a & SSL_aECDSA) && s->s3->is_probably_safari)
				{
				if (!ret) ret=sk_SSL_CIPHER_value(allow,ii);
				continue;
				}
#endif
d4277 1
a4277 1
	if (s->method->version == TLS1_2_VERSION &&
@


