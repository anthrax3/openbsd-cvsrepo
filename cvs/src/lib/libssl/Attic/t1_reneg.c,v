head	1.16;
access;
symbols
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.16
date	2017.07.24.17.10.31;	author jsing;	state dead;
branches;
next	1.15;
commitid	R1xjgozDDdxwLxCa;

1.15
date	2017.02.07.02.08.38;	author beck;	state Exp;
branches;
next	1.14;
commitid	xH3OeartUDKSlAnB;

1.14
date	2017.01.26.12.16.13;	author beck;	state Exp;
branches;
next	1.13;
commitid	lb4UTPLS9Casn2PL;

1.13
date	2017.01.26.10.40.21;	author beck;	state Exp;
branches;
next	1.12;
commitid	Bi1VygMenL4YtCp7;

1.12
date	2017.01.22.09.02.07;	author jsing;	state Exp;
branches;
next	1.11;
commitid	570ElYZpaAvthwZh;

1.11
date	2015.06.20.16.42.48;	author doug;	state Exp;
branches;
next	1.10;
commitid	qOffpViBM0u0pbwX;

1.10
date	2015.06.20.04.04.36;	author doug;	state Exp;
branches;
next	1.9;
commitid	HgxIDjid62RpqPlz;

1.9
date	2014.11.16.14.12.47;	author jsing;	state Exp;
branches;
next	1.8;
commitid	M3pvHgIFoWUHNqJn;

1.8
date	2014.06.21.20.27.25;	author tedu;	state Exp;
branches;
next	1.7;
commitid	Kp8UIyI3HI6NHi39;

1.7
date	2014.06.19.21.29.51;	author tedu;	state Exp;
branches;
next	1.6;
commitid	CIpPjhmVWPbqgxVA;

1.6
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.06.04.14.10.23;	author tedu;	state Exp;
branches;
next	1.4;
commitid	GMbAFZ4Hukhh97U1;

1.4
date	2014.05.25.16.23.10;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.19.17.56.49;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.14.13.30.33;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Rewrite the TLS Renegotiation Indication extension handling using CBB/CBS
and the new extension framework.

Feedback from doug@@

ok inoguchi@@
@
text
@/* $OpenBSD: t1_reneg.c,v 1.15 2017/02/07 02:08:38 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2009 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/objects.h>

#include "ssl_locl.h"
#include "bytestring.h"

/* Add the client's renegotiation binding */
int
ssl_add_clienthello_renegotiate_ext(SSL *s, unsigned char *p, int *len,
    int maxlen)
{
	if (p) {
		if ((S3I(s)->previous_client_finished_len + 1) > maxlen) {
			SSLerror(s, SSL_R_RENEGOTIATE_EXT_TOO_LONG);
			return 0;
		}

		/* Length byte */
		*p = S3I(s)->previous_client_finished_len;
		p++;

		memcpy(p, S3I(s)->previous_client_finished,
		    S3I(s)->previous_client_finished_len);

	}

	*len = S3I(s)->previous_client_finished_len + 1;

	return 1;
}

/* Parse the client's renegotiation binding and abort if it's not
   right */
int
ssl_parse_clienthello_renegotiate_ext(SSL *s, const unsigned char *d, int len,
    int *al)
{
	CBS cbs, reneg;

	if (len < 0) {
		SSLerror(s, SSL_R_RENEGOTIATION_ENCODING_ERR);
		*al = SSL_AD_ILLEGAL_PARAMETER;
		return 0;
	}

	CBS_init(&cbs, d, len);
	if (!CBS_get_u8_length_prefixed(&cbs, &reneg) ||
	    /* Consistency check */
	    CBS_len(&cbs) != 0) {
		SSLerror(s, SSL_R_RENEGOTIATION_ENCODING_ERR);
		*al = SSL_AD_ILLEGAL_PARAMETER;
		return 0;
	}

	/* Check that the extension matches */
	if (CBS_len(&reneg) != S3I(s)->previous_client_finished_len) {
		SSLerror(s, SSL_R_RENEGOTIATION_MISMATCH);
		*al = SSL_AD_HANDSHAKE_FAILURE;
		return 0;
	}

	if (!CBS_mem_equal(&reneg, S3I(s)->previous_client_finished,
	    S3I(s)->previous_client_finished_len)) {
		SSLerror(s, SSL_R_RENEGOTIATION_MISMATCH);
		*al = SSL_AD_HANDSHAKE_FAILURE;
		return 0;
	}

	S3I(s)->send_connection_binding = 1;

	return 1;
}

/* Add the server's renegotiation binding */
int
ssl_add_serverhello_renegotiate_ext(SSL *s, unsigned char *p, int *len,
    int maxlen)
{
	if (p) {
		if ((S3I(s)->previous_client_finished_len +
		    S3I(s)->previous_server_finished_len + 1) > maxlen) {
			SSLerror(s, SSL_R_RENEGOTIATE_EXT_TOO_LONG);
			return 0;
		}

		/* Length byte */
		*p = S3I(s)->previous_client_finished_len +
		    S3I(s)->previous_server_finished_len;
		p++;

		memcpy(p, S3I(s)->previous_client_finished,
		    S3I(s)->previous_client_finished_len);
		p += S3I(s)->previous_client_finished_len;

		memcpy(p, S3I(s)->previous_server_finished,
		    S3I(s)->previous_server_finished_len);

	}

	*len = S3I(s)->previous_client_finished_len +
	    S3I(s)->previous_server_finished_len + 1;

	return 1;
}

/* Parse the server's renegotiation binding and abort if it's not
   right */
int
ssl_parse_serverhello_renegotiate_ext(SSL *s, const unsigned char *d, int len, int *al)
{
	CBS cbs, reneg, previous_client, previous_server;
	int expected_len = S3I(s)->previous_client_finished_len +
	    S3I(s)->previous_server_finished_len;

	/* Check for logic errors */
	OPENSSL_assert(!expected_len || S3I(s)->previous_client_finished_len);
	OPENSSL_assert(!expected_len || S3I(s)->previous_server_finished_len);

	if (len < 0) {
		SSLerror(s, SSL_R_RENEGOTIATION_ENCODING_ERR);
		*al = SSL_AD_ILLEGAL_PARAMETER;
		return 0;
	}

	CBS_init(&cbs, d, len);

	if (!CBS_get_u8_length_prefixed(&cbs, &reneg) ||
	    /* Consistency check */
	    CBS_len(&cbs) != 0) {
		SSLerror(s, SSL_R_RENEGOTIATION_ENCODING_ERR);
		*al = SSL_AD_ILLEGAL_PARAMETER;
		return 0;
	}

	/* Check that the extension matches */
	if (CBS_len(&reneg) != expected_len ||
	    !CBS_get_bytes(&reneg, &previous_client,
	    S3I(s)->previous_client_finished_len) ||
	    !CBS_get_bytes(&reneg, &previous_server,
	    S3I(s)->previous_server_finished_len) ||
	    CBS_len(&reneg) != 0) {
		SSLerror(s, SSL_R_RENEGOTIATION_MISMATCH);
		*al = SSL_AD_HANDSHAKE_FAILURE;
		return 0;
	}

	if (!CBS_mem_equal(&previous_client, S3I(s)->previous_client_finished,
	    CBS_len(&previous_client))) {
		SSLerror(s, SSL_R_RENEGOTIATION_MISMATCH);
		*al = SSL_AD_HANDSHAKE_FAILURE;
		return 0;
	}
	if (!CBS_mem_equal(&previous_server, S3I(s)->previous_server_finished,
	    CBS_len(&previous_server))) {
		SSLerror(s, SSL_R_RENEGOTIATION_MISMATCH);
		*al = SSL_AD_ILLEGAL_PARAMETER;
		return 0;
	}

	S3I(s)->send_connection_binding = 1;

	return 1;
}
@


1.15
log
@Change SSLerror() back to taking two args, with the first one being an SSL *.
Make a table of "function codes" which maps the internal state of the SSL *
to something like a useful name so in a typical error in the connection you
know in what sort of place in the handshake things happened. (instead of
by arcane function name).
Add SSLerrorx() for when we don't have an SSL *
ok jsing@@ after us both being prodded by bluhm@@ to make it not terrible
@
text
@d1 1
a1 1
/* $OpenBSD: t1_reneg.c,v 1.14 2017/01/26 12:16:13 beck Exp $ */
@


1.14
log
@Finish the fallout of the SSLerr->SSLerror cleanup to get rid of the ugly
line wraps that resulted
@
text
@d1 1
a1 1
/* $OpenBSD: t1_reneg.c,v 1.13 2017/01/26 10:40:21 beck Exp $ */
d126 1
a126 1
			SSLerror(SSL_R_RENEGOTIATE_EXT_TOO_LONG);
d153 1
a153 1
		SSLerror(SSL_R_RENEGOTIATION_ENCODING_ERR);
d162 1
a162 1
		SSLerror(SSL_R_RENEGOTIATION_ENCODING_ERR);
d169 1
a169 1
		SSLerror(SSL_R_RENEGOTIATION_MISMATCH);
d176 1
a176 1
		SSLerror(SSL_R_RENEGOTIATION_MISMATCH);
d194 1
a194 1
			SSLerror(SSL_R_RENEGOTIATE_EXT_TOO_LONG);
d232 1
a232 1
		SSLerror(SSL_R_RENEGOTIATION_ENCODING_ERR);
d242 1
a242 1
		SSLerror(SSL_R_RENEGOTIATION_ENCODING_ERR);
d254 1
a254 1
		SSLerror(SSL_R_RENEGOTIATION_MISMATCH);
d261 1
a261 1
		SSLerror(SSL_R_RENEGOTIATION_MISMATCH);
d267 1
a267 1
		SSLerror(SSL_R_RENEGOTIATION_MISMATCH);
@


1.13
log
@Send the error function codes to rot in the depths of hell where they belong
We leave a single funciton code (0xFFF) to say "SSL_internal" so the public
API will not break, and we replace all internal use of the two argument
SSL_err() with the internal only SSL_error() that only takes a reason code.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: t1_reneg.c,v 1.12 2017/01/22 09:02:07 jsing Exp $ */
d126 1
a126 2
			SSLerror(
			    SSL_R_RENEGOTIATE_EXT_TOO_LONG);
d153 1
a153 2
		SSLerror(
		    SSL_R_RENEGOTIATION_ENCODING_ERR);
d162 1
a162 2
		SSLerror(
		    SSL_R_RENEGOTIATION_ENCODING_ERR);
d169 1
a169 2
		SSLerror(
		    SSL_R_RENEGOTIATION_MISMATCH);
d176 1
a176 2
		SSLerror(
		    SSL_R_RENEGOTIATION_MISMATCH);
d194 1
a194 2
			SSLerror(
			    SSL_R_RENEGOTIATE_EXT_TOO_LONG);
d232 1
a232 2
		SSLerror(
		    SSL_R_RENEGOTIATION_ENCODING_ERR);
d242 1
a242 2
		SSLerror(
		    SSL_R_RENEGOTIATION_ENCODING_ERR);
d254 1
a254 2
		SSLerror(
		    SSL_R_RENEGOTIATION_MISMATCH);
d261 1
a261 2
		SSLerror(
		    SSL_R_RENEGOTIATION_MISMATCH);
d267 1
a267 2
		SSLerror(
		    SSL_R_RENEGOTIATION_MISMATCH);
@


1.12
log
@Move most of the SSL3_STATE fields to internal - the ones that remain are
known to be used by ports.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: t1_reneg.c,v 1.11 2015/06/20 16:42:48 doug Exp $ */
d126 1
a126 1
			SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT,
d154 1
a154 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,
d164 1
a164 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,
d172 1
a172 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,
d180 1
a180 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,
d199 1
a199 1
			SSLerr(SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT,
d238 1
a238 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,
d249 1
a249 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,
d262 1
a262 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,
d270 1
a270 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,
d277 1
a277 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,
@


1.11
log
@Convert ssl_parse_serverhello_renegotiate_ext to CBS.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: t1_reneg.c,v 1.10 2015/06/20 04:04:36 doug Exp $ */
d125 1
a125 1
		if ((s->s3->previous_client_finished_len + 1) > maxlen) {
d132 1
a132 1
		*p = s->s3->previous_client_finished_len;
d135 2
a136 2
		memcpy(p, s->s3->previous_client_finished,
		    s->s3->previous_client_finished_len);
d140 1
a140 1
	*len = s->s3->previous_client_finished_len + 1;
d171 1
a171 1
	if (CBS_len(&reneg) != s->s3->previous_client_finished_len) {
d178 2
a179 2
	if (!CBS_mem_equal(&reneg, s->s3->previous_client_finished,
	    s->s3->previous_client_finished_len)) {
d186 1
a186 1
	s->s3->send_connection_binding = 1;
d197 2
a198 2
		if ((s->s3->previous_client_finished_len +
		    s->s3->previous_server_finished_len + 1) > maxlen) {
d205 2
a206 2
		*p = s->s3->previous_client_finished_len +
		    s->s3->previous_server_finished_len;
d209 3
a211 3
		memcpy(p, s->s3->previous_client_finished,
		    s->s3->previous_client_finished_len);
		p += s->s3->previous_client_finished_len;
d213 2
a214 2
		memcpy(p, s->s3->previous_server_finished,
		    s->s3->previous_server_finished_len);
d218 2
a219 2
	*len = s->s3->previous_client_finished_len +
	    s->s3->previous_server_finished_len + 1;
d230 2
a231 2
	int expected_len = s->s3->previous_client_finished_len +
	    s->s3->previous_server_finished_len;
d234 2
a235 2
	OPENSSL_assert(!expected_len || s->s3->previous_client_finished_len);
	OPENSSL_assert(!expected_len || s->s3->previous_server_finished_len);
d258 1
a258 1
	    s->s3->previous_client_finished_len) ||
d260 1
a260 1
	    s->s3->previous_server_finished_len) ||
d268 1
a268 1
	if (!CBS_mem_equal(&previous_client, s->s3->previous_client_finished,
d275 1
a275 1
	if (!CBS_mem_equal(&previous_server, s->s3->previous_server_finished,
d283 1
a283 1
	s->s3->send_connection_binding = 1;
@


1.10
log
@Convert ssl_parse_clienthello_renegotiate_ext to CBS.

ok miod@@, tweak + ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: t1_reneg.c,v 1.9 2014/11/16 14:12:47 jsing Exp $ */
d227 1
a227 2
ssl_parse_serverhello_renegotiate_ext(SSL *s, unsigned char *d, int len,
    int *al)
d229 1
a231 1
	int ilen;
d237 1
a237 2
	/* Parse the length byte */
	if (len < 1) {
a242 2
	ilen = *d;
	d++;
d244 5
a248 2
	/* Consistency check */
	if (ilen + 1 != len) {
d256 6
a261 1
	if (ilen != expected_len) {
d268 2
a269 2
	if (timingsafe_memcmp(d, s->s3->previous_client_finished,
	    s->s3->previous_client_finished_len) != 0) {
d275 2
a276 4
	d += s->s3->previous_client_finished_len;

	if (timingsafe_memcmp(d, s->s3->previous_server_finished,
	    s->s3->previous_server_finished_len)) {
@


1.9
log
@Sort and group includes.
@
text
@d1 1
a1 1
/* $OpenBSD: t1_reneg.c,v 1.8 2014/06/21 20:27:25 tedu Exp $ */
d117 1
d148 1
a148 1
ssl_parse_clienthello_renegotiate_ext(SSL *s, unsigned char *d, int len,
d151 1
a151 1
	int ilen;
d153 1
a153 2
	/* Parse the length byte */
	if (len < 1) {
a158 2
	ilen = *d;
	d++;
d160 4
a163 2
	/* Consistency check */
	if ((ilen + 1) != len) {
d171 1
a171 1
	if (ilen != s->s3->previous_client_finished_len) {
d178 2
a179 2
	if (timingsafe_memcmp(d, s->s3->previous_client_finished,
	    s->s3->previous_client_finished_len) != 0) {
a184 1

@


1.8
log
@always compare memcmp against 0, for clarity.
@
text
@d1 1
a1 1
/* $OpenBSD: t1_reneg.c,v 1.7 2014/06/19 21:29:51 tedu Exp $ */
d111 1
d113 1
d115 1
@


1.7
log
@convert CRYPTO_memcmp to timingsafe_memcmp based on current policy favoring
libc interfaces over libcrypto interfaces. for now we also prefer
timingsafe_memcmp over timingsafe_bcmp, even when the latter is acceptable.
ok beck deraadt matthew miod
@
text
@d1 1
a1 1
/* $OpenBSD: t1_reneg.c,v 1.6 2014/06/12 15:49:31 deraadt Exp $ */
d176 1
a176 1
	    s->s3->previous_client_finished_len)) {
d263 1
a263 1
	    s->s3->previous_client_finished_len)) {
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d175 1
a175 1
	if (CRYPTO_memcmp(d, s->s3->previous_client_finished,
d262 1
a262 1
	if (CRYPTO_memcmp(d, s->s3->previous_client_finished,
d271 1
a271 1
	if (CRYPTO_memcmp(d, s->s3->previous_server_finished,
@


1.5
log
@without overthinking it, replace a few memcmp calls with CRYPTO_memcmp
where it is feasible to do so. better safe than sorry.
@
text
@d1 1
a1 1
/* ssl/t1_reneg.c */
@


1.4
log
@Remove TLS_DEBUG, SSL_DEBUG, CIPHER_DEBUG and OPENSSL_RI_DEBUG. Much of
this is sporadic, hacked up and can easily be put back in an improved form
should we ever need it.

ok miod@@
@
text
@d175 1
a175 1
	if (memcmp(d, s->s3->previous_client_finished,
d262 1
a262 1
	if (memcmp(d, s->s3->previous_client_finished,
d271 1
a271 1
	if (memcmp(d, s->s3->previous_server_finished,
@


1.3
log
@More KNF.
@
text
@a133 4
#ifdef OPENSSL_RI_DEBUG
		fprintf(stderr, "%s RI extension sent by client\n",
		    s->s3->previous_client_finished_len ? "Non-empty" : "Empty");
#endif
a182 4
#ifdef OPENSSL_RI_DEBUG
	fprintf(stderr, "%s RI extension received by server\n",
	    ilen ? "Non-empty" : "Empty");
#endif
a213 4
#ifdef OPENSSL_RI_DEBUG
		fprintf(stderr, "%s RI extension sent by server\n",
		    s->s3->previous_client_finished_len ? "Non-empty" : "Empty");
#endif
a278 4
#ifdef OPENSSL_RI_DEBUG
	fprintf(stderr, "%s RI extension received by client\n",
	    ilen ? "Non-empty" : "Empty");
#endif
@


1.2
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 1
a66 1
 *    notice, this list of conditions and the following disclaimer. 
d122 2
a123 1
			SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATE_EXT_TOO_LONG);
d132 2
a133 1
		s->s3->previous_client_finished_len);
d136 1
a136 1
		s->s3->previous_client_finished_len ? "Non-empty" : "Empty");
d155 2
a156 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATION_ENCODING_ERR);
d165 2
a166 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATION_ENCODING_ERR);
d173 2
a174 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATION_MISMATCH);
d180 3
a182 2
		s->s3->previous_client_finished_len)) {
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATION_MISMATCH);
d186 1
d189 1
a189 1
	ilen ? "Non-empty" : "Empty");
d204 3
a206 2
			s->s3->previous_server_finished_len + 1) > maxlen) {
			SSLerr(SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATE_EXT_TOO_LONG);
d211 2
a212 1
		*p = s->s3->previous_client_finished_len + s->s3->previous_server_finished_len;
d216 1
a216 1
		s->s3->previous_client_finished_len);
d220 2
a221 1
		s->s3->previous_server_finished_len);
d224 1
a224 1
		s->s3->previous_client_finished_len ? "Non-empty" : "Empty");
d228 2
a229 2
	*len = s->s3->previous_client_finished_len
	+ s->s3->previous_server_finished_len + 1;
d240 2
a241 2
	int expected_len = s->s3->previous_client_finished_len
	+ s->s3->previous_server_finished_len;
d250 2
a251 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATION_ENCODING_ERR);
d260 2
a261 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATION_ENCODING_ERR);
d268 2
a269 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATION_MISMATCH);
d275 3
a277 2
		s->s3->previous_client_finished_len)) {
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATION_MISMATCH);
d284 3
a286 2
		s->s3->previous_server_finished_len)) {
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT, SSL_R_RENEGOTIATION_MISMATCH);
d290 1
@


1.1
log
@Initial revision
@
text
@d116 13
a128 14
int ssl_add_clienthello_renegotiate_ext(SSL *s, unsigned char *p, int *len,
					int maxlen)
    {
    if(p)
        {
	if((s->s3->previous_client_finished_len+1) > maxlen)
            {
            SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATE_EXT_TOO_LONG);
            return 0;
            }
            
        /* Length byte */
	*p = s->s3->previous_client_finished_len;
        p++;
d130 2
a131 2
        memcpy(p, s->s3->previous_client_finished,
	       s->s3->previous_client_finished_len);
d133 1
a133 1
    fprintf(stderr, "%s RI extension sent by client\n",
d136 6
a141 7
        }
    
    *len=s->s3->previous_client_finished_len + 1;

 
    return 1;
    }
d145 35
a179 38
int ssl_parse_clienthello_renegotiate_ext(SSL *s, unsigned char *d, int len,
					  int *al)
    {
    int ilen;

    /* Parse the length byte */
    if(len < 1)
        {
        SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_ENCODING_ERR);
        *al=SSL_AD_ILLEGAL_PARAMETER;
        return 0;
        }
    ilen = *d;
    d++;

    /* Consistency check */
    if((ilen+1) != len)
        {
        SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_ENCODING_ERR);
        *al=SSL_AD_ILLEGAL_PARAMETER;
        return 0;
        }

    /* Check that the extension matches */
    if(ilen != s->s3->previous_client_finished_len)
        {
        SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_MISMATCH);
        *al=SSL_AD_HANDSHAKE_FAILURE;
        return 0;
        }
    
    if(memcmp(d, s->s3->previous_client_finished,
	      s->s3->previous_client_finished_len))
        {
        SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_MISMATCH);
        *al=SSL_AD_HANDSHAKE_FAILURE;
        return 0;
        }
d181 2
a182 2
    fprintf(stderr, "%s RI extension received by server\n",
				ilen ? "Non-empty" : "Empty");
d185 1
a185 1
    s->s3->send_connection_binding=1;
d187 2
a188 2
    return 1;
    }
d191 18
a208 19
int ssl_add_serverhello_renegotiate_ext(SSL *s, unsigned char *p, int *len,
					int maxlen)
    {
    if(p)
        {
        if((s->s3->previous_client_finished_len +
            s->s3->previous_server_finished_len + 1) > maxlen)
            {
            SSLerr(SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATE_EXT_TOO_LONG);
            return 0;
            }
        
        /* Length byte */
        *p = s->s3->previous_client_finished_len + s->s3->previous_server_finished_len;
        p++;

        memcpy(p, s->s3->previous_client_finished,
	       s->s3->previous_client_finished_len);
        p += s->s3->previous_client_finished_len;
d210 2
a211 2
        memcpy(p, s->s3->previous_server_finished,
	       s->s3->previous_server_finished_len);
d213 2
a214 2
    fprintf(stderr, "%s RI extension sent by server\n",
    		s->s3->previous_client_finished_len ? "Non-empty" : "Empty");
d216 3
a218 3
        }
    
    *len=s->s3->previous_client_finished_len
d220 3
a222 3
    
    return 1;
    }
d226 5
a230 4
int ssl_parse_serverhello_renegotiate_ext(SSL *s, unsigned char *d, int len,
					  int *al)
    {
    int expected_len=s->s3->previous_client_finished_len
d232 1
a232 1
    int ilen;
d234 41
a274 46
    /* Check for logic errors */
    OPENSSL_assert(!expected_len || s->s3->previous_client_finished_len);
    OPENSSL_assert(!expected_len || s->s3->previous_server_finished_len);
    
    /* Parse the length byte */
    if(len < 1)
        {
        SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_ENCODING_ERR);
        *al=SSL_AD_ILLEGAL_PARAMETER;
        return 0;
        }
    ilen = *d;
    d++;

    /* Consistency check */
    if(ilen+1 != len)
        {
        SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_ENCODING_ERR);
        *al=SSL_AD_ILLEGAL_PARAMETER;
        return 0;
        }
    
    /* Check that the extension matches */
    if(ilen != expected_len)
        {
        SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_MISMATCH);
        *al=SSL_AD_HANDSHAKE_FAILURE;
        return 0;
        }

    if(memcmp(d, s->s3->previous_client_finished,
	      s->s3->previous_client_finished_len))
        {
        SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_MISMATCH);
        *al=SSL_AD_HANDSHAKE_FAILURE;
        return 0;
        }
    d += s->s3->previous_client_finished_len;

    if(memcmp(d, s->s3->previous_server_finished,
	      s->s3->previous_server_finished_len))
        {
        SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_MISMATCH);
        *al=SSL_AD_ILLEGAL_PARAMETER;
        return 0;
        }
d276 2
a277 2
    fprintf(stderr, "%s RI extension received by client\n",
				ilen ? "Non-empty" : "Empty");
d279 1
a279 1
    s->s3->send_connection_binding=1;
d281 2
a282 2
    return 1;
    }
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@
