head	1.24;
access;
symbols;
locks; strict;
comment	@ * @;


1.24
date	2017.03.01.14.01.24;	author jsing;	state Exp;
branches;
next	1.23;
commitid	AAzopU8i3IBEVvpF;

1.23
date	2016.11.06.12.08.32;	author jsing;	state Exp;
branches;
next	1.22;
commitid	m3qRKmM5mhnylgEY;

1.22
date	2014.12.14.15.30.50;	author jsing;	state Exp;
branches;
next	1.21;
commitid	XNZawfRSWvnVv1VS;

1.21
date	2014.11.18.05.33.43;	author miod;	state Exp;
branches;
next	1.20;
commitid	81uwsCsokEuKDUjo;

1.20
date	2014.11.16.14.12.47;	author jsing;	state Exp;
branches;
next	1.19;
commitid	M3pvHgIFoWUHNqJn;

1.19
date	2014.07.10.08.51.15;	author tedu;	state Exp;
branches;
next	1.18;
commitid	lsH7iukeZYSZBx6F;

1.18
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.05.29.18.11.13;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.05.17.15.44.28;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.23.35.40;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.21.37.37;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.21.15.37;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.20.34.24;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.14.13.10.35;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.25.22.05.06;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.25.19.12.36;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.00.03.41;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.29;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.13;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.13;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.39;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.10.13.21.23.49;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.04.13.15.16.36;	author miod;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Convert ssl3_{get,send}_server_key_exchange() to EVP_md5_sha1().

ok inoguchi@@
@
text
@/* $OpenBSD: ssl_algs.c,v 1.23 2016/11/06 12:08:32 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/lhash.h>
#include <openssl/objects.h>

#include "ssl_locl.h"

int
SSL_library_init(void)
{

#ifndef OPENSSL_NO_DES
	EVP_add_cipher(EVP_des_cbc());
	EVP_add_cipher(EVP_des_ede3_cbc());
#endif
#ifndef OPENSSL_NO_RC4
	EVP_add_cipher(EVP_rc4());
#if !defined(OPENSSL_NO_MD5) && (defined(__x86_64) || defined(__x86_64__))
	EVP_add_cipher(EVP_rc4_hmac_md5());
#endif
#endif
#ifndef OPENSSL_NO_RC2
	EVP_add_cipher(EVP_rc2_cbc());
	/* Not actually used for SSL/TLS but this makes PKCS#12 work
	 * if an application only calls SSL_library_init().
	 */
	EVP_add_cipher(EVP_rc2_40_cbc());
#endif
	EVP_add_cipher(EVP_aes_128_cbc());
	EVP_add_cipher(EVP_aes_192_cbc());
	EVP_add_cipher(EVP_aes_256_cbc());
	EVP_add_cipher(EVP_aes_128_gcm());
	EVP_add_cipher(EVP_aes_256_gcm());
	EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
	EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
#ifndef OPENSSL_NO_CAMELLIA
	EVP_add_cipher(EVP_camellia_128_cbc());
	EVP_add_cipher(EVP_camellia_256_cbc());
#endif
#ifndef OPENSSL_NO_GOST
	EVP_add_cipher(EVP_gost2814789_cfb64());
	EVP_add_cipher(EVP_gost2814789_cnt());
#endif

	EVP_add_digest(EVP_md5());
	EVP_add_digest(EVP_md5_sha1());
	EVP_add_digest_alias(SN_md5, "ssl2-md5");
	EVP_add_digest_alias(SN_md5, "ssl3-md5");

	EVP_add_digest(EVP_sha1()); /* RSA with sha1 */
	EVP_add_digest_alias(SN_sha1, "ssl3-sha1");
	EVP_add_digest_alias(SN_sha1WithRSAEncryption, SN_sha1WithRSA);
	EVP_add_digest(EVP_sha224());
	EVP_add_digest(EVP_sha256());
	EVP_add_digest(EVP_sha384());
	EVP_add_digest(EVP_sha512());
	EVP_add_digest(EVP_dss1()); /* DSA with sha1 */
	EVP_add_digest_alias(SN_dsaWithSHA1, SN_dsaWithSHA1_2);
	EVP_add_digest_alias(SN_dsaWithSHA1, "DSS1");
	EVP_add_digest_alias(SN_dsaWithSHA1, "dss1");
	EVP_add_digest(EVP_ecdsa());
#ifndef OPENSSL_NO_GOST
	EVP_add_digest(EVP_gostr341194());
	EVP_add_digest(EVP_gost2814789imit());
	EVP_add_digest(EVP_streebog256());
	EVP_add_digest(EVP_streebog512());
#endif
	/* initialize cipher/digest methods table */
	ssl_load_ciphers();
	return (1);
}

@


1.23
log
@Remove the single IDEA cipher suite. There is no good reason to support
this.

ok beck@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_algs.c,v 1.22 2014/12/14 15:30:50 jsing Exp $ */
d104 1
d107 1
@


1.22
log
@Remove trailing whitespace.
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_algs.c,v 1.21 2014/11/18 05:33:43 miod Exp $ */
a72 3
#endif
#ifndef OPENSSL_NO_IDEA
	EVP_add_cipher(EVP_idea_cbc());
@


1.21
log
@Update the GOST code in libssl, as contributed by Dmitry Eremin-Solenikov.

This causes a libssl major version bump as this affects the layout of some
internal-but-unfortunately-made-visible structs.
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_algs.c,v 1.20 2014/11/16 14:12:47 jsing Exp $ */
d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d82 1
a82 1
#endif  
@


1.20
log
@Sort and group includes.
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_algs.c,v 1.19 2014/07/10 08:51:15 tedu Exp $ */
d101 4
d121 6
@


1.19
log
@decompress libssl. ok beck jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_algs.c,v 1.18 2014/06/12 15:49:31 deraadt Exp $ */
d60 2
d63 1
a63 1
#include <openssl/lhash.h>
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a114 6
#ifndef OPENSSL_NO_COMP
	/* This will initialise the built-in compression algorithms.
	   The value returned is a STACK_OF(SSL_COMP), but that can
	   be discarded safely */
	(void)SSL_COMP_get_compression_methods();
#endif
@


1.17
log
@unidef DH, ECDH, and ECDSA. there's no purpose to a libssl without them.
ok deraadt jsing
@
text
@d1 1
a1 1
/* ssl/ssl_algs.c */
@


1.16
log
@deleted seed some time ago
@
text
@a113 1
#ifndef OPENSSL_NO_ECDSA
a114 1
#endif
@


1.15
log
@whack a bunch of disabled code. ok beck lteo
@
text
@a99 4
#ifndef OPENSSL_NO_SEED
	EVP_add_cipher(EVP_seed_cbc());
#endif

@


1.14
log
@always build in RSA and DSA. ok deraadt miod
@
text
@a120 5
	/* If you want support for phased out ciphers, add the following */
#if 0
	EVP_add_digest(EVP_sha());
	EVP_add_digest(EVP_dss());
#endif
@


1.13
log
@SHA and AES (and sadly MD5) can't be considered optional. ok beck miod
@
text
@a113 1
#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_DSA)
a117 1
#endif
@


1.12
log
@quick pass at removing ability to disable sha256 and sha512. ok miod
@
text
@a87 1
#ifndef OPENSSL_NO_AES
a92 1
#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
a94 3
#endif

#endif
a103 1
#ifndef OPENSSL_NO_MD5
a106 2
#endif
#ifndef OPENSSL_NO_SHA
a109 1
#endif
@


1.11
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a118 1
#ifndef OPENSSL_NO_SHA256
a120 2
#endif
#ifndef OPENSSL_NO_SHA512
a122 1
#endif
@


1.10
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d64 3
a66 2
int SSL_library_init(void)
	{
d108 1
a108 1
  
d111 2
a112 2
	EVP_add_digest_alias(SN_md5,"ssl2-md5");
	EVP_add_digest_alias(SN_md5,"ssl3-md5");
d116 2
a117 2
	EVP_add_digest_alias(SN_sha1,"ssl3-sha1");
	EVP_add_digest_alias(SN_sha1WithRSAEncryption,SN_sha1WithRSA);
d129 3
a131 3
	EVP_add_digest_alias(SN_dsaWithSHA1,SN_dsaWithSHA1_2);
	EVP_add_digest_alias(SN_dsaWithSHA1,"DSS1");
	EVP_add_digest_alias(SN_dsaWithSHA1,"dss1");
d149 2
a150 2
	return(1);
	}
@


1.9
log
@resolve conflicts
@
text
@d97 1
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d76 3
d91 6
@


1.7
log
@resolve conflicts
@
text
@d79 4
a88 1

d97 1
a97 4

#ifndef OPENSSL_NO_MD2
	EVP_add_digest(EVP_md2());
#endif
d107 8
@


1.6
log
@You shall NOT BREAK THE TREE
@
text
@d85 10
d114 3
d122 8
@


1.5
log
@Setup /dev/crypto early (SSL_library_init) to make sure it's actually done
for all applications; ok markus and deraadt
@
text
@a108 3
#ifdef __OpenBSD__
	ENGINE_setup_openbsd();
#endif
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d109 3
@


1.3
log
@openssl-engine-0.9.6a merge
@
text
@d66 2
a67 1
#ifndef NO_DES
d71 1
a71 1
#ifndef NO_IDEA
d74 1
a74 1
#ifndef NO_RC4
d77 1
a77 1
#ifndef NO_RC2
d79 7
a85 3
#endif  

#ifndef NO_MD2
d88 1
a88 1
#ifndef NO_MD5
d93 1
a93 1
#ifndef NO_SHA
d98 1
a98 1
#if !defined(NO_SHA) && !defined(NO_DSA)
a103 1

@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d91 1
d95 3
@


1.1
log
@Initial revision
@
text
@d60 2
a61 2
#include "objects.h"
#include "lhash.h"
d64 1
a64 1
void SSLeay_add_ssl_algorithms()
d74 1
a74 1
        EVP_add_cipher(EVP_rc4());
d77 1
a77 1
        EVP_add_cipher(EVP_rc2_cbc());
d81 1
a81 1
        EVP_add_digest(EVP_md2());
d85 2
a86 2
	EVP_add_alias(SN_md5,"ssl2-md5");
	EVP_add_alias(SN_md5,"ssl3-md5");
d88 1
a88 1
#ifndef NO_SHA1
d90 1
a90 1
	EVP_add_alias(SN_sha1,"ssl3-sha1");
d92 1
a92 1
#if !defined(NO_SHA1) && !defined(NO_DSA)
d101 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d60 2
a61 2
#include <openssl/objects.h>
#include <openssl/lhash.h>
d64 1
a64 1
int SSL_library_init(void)
d66 1
a66 2

#ifndef OPENSSL_NO_DES
d70 1
a70 1
#ifndef OPENSSL_NO_IDEA
d73 5
a77 2
#ifndef OPENSSL_NO_RC4
	EVP_add_cipher(EVP_rc4());
d79 3
a81 2
#ifndef OPENSSL_NO_RC2
	EVP_add_cipher(EVP_rc2_cbc());
d83 1
a83 9
#ifndef OPENSSL_NO_AES
	EVP_add_cipher(EVP_aes_128_cbc());
	EVP_add_cipher(EVP_aes_192_cbc());
	EVP_add_cipher(EVP_aes_256_cbc());
#endif
#ifndef OPENSSL_NO_MD2
	EVP_add_digest(EVP_md2());
#endif
#ifndef OPENSSL_NO_MD5
d85 2
a86 2
	EVP_add_digest_alias(SN_md5,"ssl2-md5");
	EVP_add_digest_alias(SN_md5,"ssl3-md5");
d88 1
a88 1
#ifndef OPENSSL_NO_SHA
d90 1
a90 2
	EVP_add_digest_alias(SN_sha1,"ssl3-sha1");
	EVP_add_digest_alias(SN_sha1WithRSAEncryption,SN_sha1WithRSA);
d92 1
a92 1
#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_DSA)
a93 3
	EVP_add_digest_alias(SN_dsaWithSHA1,SN_dsaWithSHA1_2);
	EVP_add_digest_alias(SN_dsaWithSHA1,"DSS1");
	EVP_add_digest_alias(SN_dsaWithSHA1,"dss1");
d95 1
a100 1
	return(1);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a84 10

#ifndef OPENSSL_NO_CAMELLIA
	EVP_add_cipher(EVP_camellia_128_cbc());
	EVP_add_cipher(EVP_camellia_256_cbc());
#endif

#ifndef OPENSSL_NO_SEED
	EVP_add_cipher(EVP_seed_cbc());
#endif

a103 3
#ifndef OPENSSL_NO_ECDSA
	EVP_add_digest(EVP_ecdsa());
#endif
a108 8
#ifndef OPENSSL_NO_COMP
	/* This will initialise the built-in compression algorithms.
	   The value returned is a STACK_OF(SSL_COMP), but that can
	   be discarded safely */
	(void)SSL_COMP_get_compression_methods();
#endif
	/* initialize cipher/digest methods table */
	ssl_load_ciphers();
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a78 4
	/* Not actually used for SSL/TLS but this makes PKCS#12 work
	 * if an application only calls SSL_library_init().
	 */
	EVP_add_cipher(EVP_rc2_40_cbc());
d85 1
d94 4
a97 1
  
a106 8
#endif
#ifndef OPENSSL_NO_SHA256
	EVP_add_digest(EVP_sha224());
	EVP_add_digest(EVP_sha256());
#endif
#ifndef OPENSSL_NO_SHA512
	EVP_add_digest(EVP_sha384());
	EVP_add_digest(EVP_sha512());
@


1.1.1.5
log
@import OpenSSL-1.0.1c
@
text
@a75 3
#if !defined(OPENSSL_NO_MD5) && (defined(__x86_64) || defined(__x86_64__))
	EVP_add_cipher(EVP_rc4_hmac_md5());
#endif
a87 6
	EVP_add_cipher(EVP_aes_128_gcm());
	EVP_add_cipher(EVP_aes_256_gcm());
#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
	EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
	EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
#endif
@


1.1.1.6
log
@Import OpenSSL 1.0.1g
@
text
@a96 1

@


