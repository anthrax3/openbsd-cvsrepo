head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2017.01.23.13.36.13;	author jsing;	state Exp;
branches;
next	1.12;
commitid	xYJ523Ay020rUB5W;

1.12
date	2017.01.23.10.22.06;	author jsing;	state Exp;
branches;
next	1.11;
commitid	sfluQzS4C53eT1pq;

1.11
date	2017.01.21.06.50.02;	author jsing;	state Exp;
branches;
next	1.10;
commitid	SLShWZcEQp4rguvl;

1.10
date	2016.11.04.18.30.21;	author guenther;	state Exp;
branches;
next	1.9;
commitid	SNICeApXI9gSqHEv;

1.9
date	2015.02.06.08.30.23;	author jsing;	state Exp;
branches;
next	1.8;
commitid	K5MXFl39zEkHakNY;

1.8
date	2014.12.14.15.30.50;	author jsing;	state Exp;
branches;
next	1.7;
commitid	XNZawfRSWvnVv1VS;

1.7
date	2014.11.16.14.12.47;	author jsing;	state Exp;
branches;
next	1.6;
commitid	M3pvHgIFoWUHNqJn;

1.6
date	2014.08.10.14.42.56;	author jsing;	state Exp;
branches;
next	1.5;
commitid	wihJupNvfkdpKL9O;

1.5
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.24.12.44.48;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.19.08.52.32;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.14.14.16.33;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Split most of SSL_METHOD out into an internal variant, which is opaque.

Discussed with beck@@
@
text
@/* $OpenBSD: d1_meth.c,v 1.12 2017/01/23 10:22:06 jsing Exp $ */
/*
 * DTLS implementation written by Nagendra Modadugu
 * (nagendra@@cs.stanford.edu) for the OpenSSL project 2005.
 */
/* ====================================================================
 * Copyright (c) 1999-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/objects.h>

#include "ssl_locl.h"

static const SSL_METHOD *dtls1_get_method(int ver);

static const SSL_METHOD_INTERNAL DTLSv1_method_internal_data = {
	.version = DTLS1_VERSION,
	.min_version = DTLS1_VERSION,
	.max_version = DTLS1_VERSION,
	.ssl_new = dtls1_new,
	.ssl_clear = dtls1_clear,
	.ssl_free = dtls1_free,
	.ssl_accept = dtls1_accept,
	.ssl_connect = dtls1_connect,
	.ssl_read = ssl3_read,
	.ssl_peek = ssl3_peek,
	.ssl_write = ssl3_write,
	.ssl_shutdown = dtls1_shutdown,
	.ssl_pending = ssl3_pending,
	.get_ssl_method = dtls1_get_method,
	.get_timeout = dtls1_default_timeout,
	.ssl_version = ssl_undefined_void_function,
	.ssl_renegotiate = ssl3_renegotiate,
	.ssl_renegotiate_check = ssl3_renegotiate_check,
	.ssl_get_message = dtls1_get_message,
	.ssl_read_bytes = dtls1_read_bytes,
	.ssl_write_bytes = dtls1_write_app_data_bytes,
	.ssl3_enc = &DTLSv1_enc_data,
};

static const SSL_METHOD DTLSv1_method_data = {
	.ssl_dispatch_alert = dtls1_dispatch_alert,
	.num_ciphers = ssl3_num_ciphers,
	.get_cipher = dtls1_get_cipher,
	.get_cipher_by_char = ssl3_get_cipher_by_char,
	.put_cipher_by_char = ssl3_put_cipher_by_char,
	.internal = &DTLSv1_method_internal_data,
};

const SSL_METHOD *
DTLSv1_method(void)
{
	return &DTLSv1_method_data;
}

static const SSL_METHOD *
dtls1_get_method(int ver)
{
	if (ver == DTLS1_VERSION)
		return (DTLSv1_method());
	return (NULL);
}
@


1.12
log
@Remove ssl_ctrl, ssl_ctx_ctrl, ssl_callback_ctrl and ssl_ctx_callback_ctrl
from SSL_METHOD, replacing usage with direct calls to the appropriate
functions.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_meth.c,v 1.11 2017/01/21 06:50:02 jsing Exp $ */
d68 1
a68 1
static const SSL_METHOD DTLSv1_method_data = {
d81 4
d90 4
d95 2
d99 1
a99 7
	.ssl_pending = ssl3_pending,
	.num_ciphers = ssl3_num_ciphers,
	.get_cipher = dtls1_get_cipher,
	.get_ssl_method = dtls1_get_method,
	.get_timeout = dtls1_default_timeout,
	.ssl3_enc = &DTLSv1_enc_data,
	.ssl_version = ssl_undefined_void_function,
@


1.11
log
@Specify minimum and maximum protocol version for each method. This is
currently unused, but will be in the near future.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_meth.c,v 1.10 2016/11/04 18:30:21 guenther Exp $ */
a86 2
	.ssl_ctrl = dtls1_ctrl,
	.ssl_ctx_ctrl = ssl3_ctx_ctrl,
a95 2
	.ssl_callback_ctrl = ssl3_callback_ctrl,
	.ssl_ctx_callback_ctrl = ssl3_ctx_callback_ctrl,
@


1.10
log
@The *_method_data structures can be static

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_meth.c,v 1.9 2015/02/06 08:30:23 jsing Exp $ */
d70 2
@


1.9
log
@Bring back the horrible API that is get_cipher_by_char/put_cipher_by_char.

This API was intended to be an internal only, however like many things in
OpenSSL, it is exposed externally and parts of the software ecosystem are
now using it since there is no real alternative within the public API.

ok doug@@, tedu@@ and reluctantly miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_meth.c,v 1.8 2014/12/14 15:30:50 jsing Exp $ */
d68 1
a68 1
const SSL_METHOD DTLSv1_method_data = {
@


1.8
log
@Remove trailing whitespace.
@
text
@d1 1
a1 1
/* $OpenBSD: d1_meth.c,v 1.7 2014/11/16 14:12:47 jsing Exp $ */
d87 2
@


1.7
log
@Sort and group includes.
@
text
@d1 2
a2 2
/* $OpenBSD: d1_meth.c,v 1.6 2014/08/10 14:42:56 jsing Exp $ */
/* 
d4 1
a4 1
 * (nagendra@@cs.stanford.edu) for the OpenSSL project 2005.  
d14 1
a14 1
 *    notice, this list of conditions and the following disclaimer. 
@


1.6
log
@Since we no longer need to support SSLv2-style cipher lists, start
unravelling the maze of function pointers and callbacks by directly
calling ssl3_{get,put}_cipher_by_char() and removing the
ssl_{get,put}_cipher_by_char macros.

Prompted by similar changes in boringssl.

ok guenther.
@
text
@d1 1
a1 1
/* $OpenBSD: d1_meth.c,v 1.5 2014/06/12 15:49:31 deraadt Exp $ */
d61 1
d63 1
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a84 2
	.get_cipher_by_char = ssl3_get_cipher_by_char,
	.put_cipher_by_char = ssl3_put_cipher_by_char,
@


1.4
log
@DeIMPLEMENT libssl. Expand the IMPLEMENT_* macros since it is far more
readable and one less layer of abstraction. Use C99 initialisers for
clarity, grepability and to protect from future field reordering/removal.

ok miod@@ (tedu@@ also thought it was a wonderful idea, beck@@ also agreed,
but ran away squealing since it reminded him of the VOP layer...)
@
text
@d1 1
a1 1
/* ssl/d1_meth.h */
@


1.3
log
@More KNF and style consistency tweaks
@
text
@d65 39
a110 3

IMPLEMENT_dtls1_meth_func(DTLSv1_method,
    dtls1_accept, dtls1_connect, dtls1_get_method)
@


1.2
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d65 2
a66 2
static const SSL_METHOD
*dtls1_get_method(int ver)
d70 1
a70 2
	else
		return (NULL);
@


1.1
log
@Initial revision
@
text
@d64 4
a67 3
static SSL_METHOD *dtls1_get_method(int ver);
static SSL_METHOD *dtls1_get_method(int ver)
	{
d69 1
a69 1
		return(DTLSv1_method());
d71 2
a72 2
		return(NULL);
	}
d75 1
a75 4
			dtls1_accept,
			dtls1_connect,
			dtls1_get_method)

@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@d64 2
a65 2
static const SSL_METHOD *dtls1_get_method(int ver);
static const SSL_METHOD *dtls1_get_method(int ver)
@

