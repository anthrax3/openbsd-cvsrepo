head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	openssl_0_9_8_j:1.1.1.2
	openssl:1.1.1
	pre_openssl_0_9_8h:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.14
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.12
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.10
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.8
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.6
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.4
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	OPENSSL_0_9_7G:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2010.10.01.22.58.58;	author djm;	state dead;
branches;
next	1.1;

1.1
date	2005.04.29.05.37.25;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.04.29.05.37.25;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.14.05;	author djm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@resolve conflicts, fix local changes
@
text
@/* ====================================================================
 * Copyright (c) 2003 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * This is a FIPS approved PRNG, ANSI X9.31 A.2.4.
 */

#include "e_os.h"

/* If we don't define _XOPEN_SOURCE_EXTENDED, struct timeval won't
   be defined and gettimeofday() won't be declared with strict compilers
   like DEC C in ANSI C mode.  */
#ifndef _XOPEN_SOURCE_EXTENDED
#define _XOPEN_SOURCE_EXTENDED 1
#endif

#include <openssl/des.h>
#include <openssl/rand.h>
#include <openssl/err.h>
#include <openssl/fips_rand.h>
#ifndef OPENSSL_SYS_WIN32
#include <sys/time.h>
#endif
#include <assert.h>
#ifndef OPENSSL_SYS_WIN32
# ifdef OPENSSL_UNISTD
#  include OPENSSL_UNISTD
# else
#  include <unistd.h>
# endif
#endif
#include <string.h>

#ifdef OPENSSL_FIPS

#define SEED_SIZE	8

static unsigned char seed[SEED_SIZE];
static FIPS_RAND_SIZE_T n_seed;
static FIPS_RAND_SIZE_T o_seed;
static DES_cblock key1;
static DES_cblock key2;
static DES_key_schedule ks1,ks2;
static int key_set;
static int test_mode;
static unsigned char test_faketime[8];

#ifndef GETPID_IS_MEANINGLESS
static int seed_pid;
static int key_pid;
#endif

static void fips_rand_cleanup(void);
static void fips_rand_add(const void *buf, FIPS_RAND_SIZE_T num, double add_entropy);
static int fips_rand_bytes(unsigned char *buf, FIPS_RAND_SIZE_T num);
static int fips_rand_status(void);

static RAND_METHOD rand_fips_meth=
    {
    FIPS_rand_seed,
    fips_rand_bytes,
    fips_rand_cleanup,
    fips_rand_add,
    fips_rand_bytes,
    fips_rand_status
    };

static int second;

RAND_METHOD *FIPS_rand_method(void)
{
  return &rand_fips_meth;
}

void FIPS_set_prng_key(const unsigned char k1[8],const unsigned char k2[8])
    {
    memcpy(&key1,k1,sizeof key1);
    memcpy(&key2,k2,sizeof key2);
    key_set=1;
#ifndef GETPID_IS_MEANINGLESS
    key_pid=getpid();
#endif
    second=0;
    }

void FIPS_test_mode(int test,const unsigned char faketime[8])
    {
    test_mode=test;
    if(!test_mode)
	return;
    memcpy(test_faketime,faketime,sizeof test_faketime);
    }

/* NB: this returns true if _partially_ seeded */
int FIPS_rand_seeded()
    { return key_set || n_seed; }

static void fips_gettime(unsigned char buf[8])
    {
#ifdef OPENSSL_SYS_WIN32
    FILETIME ft;
#else
    struct timeval tv;
#endif

    if(test_mode)
	{
	fprintf(stderr,"WARNING!!! PRNG IN TEST MODE!!!\n");
	memcpy(buf,test_faketime,sizeof test_faketime);
	return;
	}
#ifdef OPENSSL_SYS_WIN32
    GetSystemTimeAsFileTime(&ft);
    buf[0] = (unsigned char) (ft.dwHighDateTime & 0xff);
    buf[1] = (unsigned char) ((ft.dwHighDateTime >> 8) & 0xff);
    buf[2] = (unsigned char) ((ft.dwHighDateTime >> 16) & 0xff);
    buf[3] = (unsigned char) ((ft.dwHighDateTime >> 24) & 0xff);
    buf[4] = (unsigned char) (ft.dwLowDateTime & 0xff);
    buf[5] = (unsigned char) ((ft.dwLowDateTime >> 8) & 0xff);
    buf[6] = (unsigned char) ((ft.dwLowDateTime >> 16) & 0xff);
    buf[7] = (unsigned char) ((ft.dwLowDateTime >> 24) & 0xff);
#else
    gettimeofday(&tv,NULL);
    buf[0] = (unsigned char) (tv.tv_sec & 0xff);
    buf[1] = (unsigned char) ((tv.tv_sec >> 8) & 0xff);
    buf[2] = (unsigned char) ((tv.tv_sec >> 16) & 0xff);
    buf[3] = (unsigned char) ((tv.tv_sec >> 24) & 0xff);
    buf[4] = (unsigned char) (tv.tv_usec & 0xff);
    buf[5] = (unsigned char) ((tv.tv_usec >> 8) & 0xff);
    buf[6] = (unsigned char) ((tv.tv_usec >> 16) & 0xff);
    buf[7] = (unsigned char) ((tv.tv_usec >> 24) & 0xff);
#endif

#if 0  /* This eminently sensible strategy is not acceptable to NIST. Sigh. */
#ifndef GETPID_IS_MEANINGLESS
    /* we mix in the PID to ensure that after a fork the children don't give
     * the same results as each other
     */
    pid=getpid();
    /* make sure we shift the pid to the MSB */
    if((pid&0xffff0000) == 0)
	pid<<=16;
    *(long *)&buf[0]^=pid;
#endif
#endif
    }

static void fips_rand_encrypt(unsigned char *out,const unsigned char *in)
    {
    DES_ecb2_encrypt(in,out,&ks1,&ks2,1);
    }

static void fips_rand_cleanup(void)
    {
    OPENSSL_cleanse(seed,sizeof seed);
    n_seed=0;
    }

void FIPS_rand_seed(const void *buf_, FIPS_RAND_SIZE_T num)
    {
    const char *buf=buf_;
    FIPS_RAND_SIZE_T n;
    static int init;

    /* If the key hasn't been set, we can't seed! */
    if(!key_set)
	return;

    CRYPTO_w_lock(CRYPTO_LOCK_RAND);
    if(!init)
	{
	init=1;
	DES_set_key(&key1,&ks1);
	DES_set_key(&key2,&ks2);
	}

    /*
     * This algorithm only uses 64 bits of seed, so ensure that we use
     * the most recent 64 bits.
     */
    for(n=0 ; n < num ; )
	{
	FIPS_RAND_SIZE_T t=num-n;

	if(o_seed+t > sizeof seed)
	    t=sizeof seed-o_seed;
	memcpy(seed+o_seed,buf+n,t);
	n+=t;
	o_seed+=t;
	if(o_seed == sizeof seed)
	    o_seed=0;
	if(n_seed < sizeof seed)
	    n_seed+=t;
	}

#ifndef GETPID_IS_MEANINGLESS
    seed_pid=getpid();
#endif

    CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
    }

static void fips_rand_add(const void *buf, FIPS_RAND_SIZE_T num, double add_entropy)
    {
    FIPS_rand_seed(buf,num);
    }

static int fips_rand_bytes(unsigned char *buf,FIPS_RAND_SIZE_T num)
    {
    FIPS_RAND_SIZE_T n;
    unsigned char timeseed[8];
    unsigned char intermediate[SEED_SIZE];
    unsigned char output[SEED_SIZE];
    static unsigned char previous[SEED_SIZE];
#ifndef GETPID_IS_MEANINGLESS
    int pid;
#endif

    if(n_seed < sizeof seed)
	{
	RANDerr(RAND_F_FIPS_RAND_BYTES,RAND_R_PRNG_NOT_SEEDED);
	return 0;
	}

#ifdef FIPS_RAND_MAX_SIZE_T
    if (num > FIPS_RAND_MAX_SIZE_T)
	{
#ifdef RAND_R_PRNG_ASKING_FOR_TOO_MUCH
	RANDerr(RAND_F_FIPS_RAND_BYTES,RAND_R_PRNG_ASKING_FOR_TOO_MUCH);
	return 0;
#else
	return -1; /* signal "not supported" condition */
#endif
	}
#endif

#ifndef GETPID_IS_MEANINGLESS
    pid=getpid();
    if(pid != seed_pid)
	{
	RANDerr(RAND_F_FIPS_RAND_BYTES,RAND_R_PRNG_NOT_RESEEDED);
	return 0;
	}
    if(pid != key_pid)
	{
	RANDerr(RAND_F_FIPS_RAND_BYTES,RAND_R_PRNG_NOT_REKEYED);
	return 0;
	}
#endif

    CRYPTO_w_lock(CRYPTO_LOCK_RAND);

    for(n=0 ; n < num ; )
	{
	unsigned char t[SEED_SIZE];
	FIPS_RAND_SIZE_T l;
	
	/* ANS X9.31 A.2.4:	I = ede*K(DT)
	       timeseed == DT
	       intermediate == I
	*/
	fips_gettime(timeseed);
	fips_rand_encrypt(intermediate,timeseed);

	/* ANS X9.31 A.2.4:     R = ede*K(I^V)
	       intermediate == I
	       seed == V
	       output == R
	*/
	for(l=0 ; l < sizeof t ; ++l)
	    t[l]=intermediate[l]^seed[l];
	fips_rand_encrypt(output,t);

	/* ANS X9.31 A.2.4:     V = ede*K(R^I)
	       output == R
	       intermediate == I
	       seed == V
	*/
	for(l=0 ; l < sizeof t ; ++l)
	    t[l]=output[l]^intermediate[l];
	fips_rand_encrypt(seed,t);

	if(second && !memcmp(output,previous,sizeof previous))
	    {
	    RANDerr(RAND_F_FIPS_RAND_BYTES,RAND_R_PRNG_STUCK);
	    CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
	    return 0;
	    }
	memcpy(previous,output,sizeof previous);
	second=1;

	/* Successive values of R may be concatenated to produce a
	   pseudo random number of the desired length */ 
	l=SEED_SIZE < num-n ? SEED_SIZE : num-n;
	memcpy(buf+n,output,l);
	n+=l;
	}

    CRYPTO_w_unlock(CRYPTO_LOCK_RAND);

    return 1;
    }

static int fips_rand_status(void)
    {
    return n_seed == sizeof seed;
    }

#endif /* OPENSSL_FIPS */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
 * Copyright (c) 2007 The OpenSSL Project.  All rights reserved.
d51 1
a51 1
 * This is a FIPS approved AES PRNG based on ANSI X9.31 A.2.4.
d63 1
a64 1
#include <openssl/aes.h>
a78 2
#include <openssl/fips.h>
#include "fips_locl.h"
d82 1
a82 1
void *OPENSSL_stderr(void);
d84 9
a92 1
#define AES_BLOCK_LENGTH	16
d94 4
d99 4
a102 1
/* AES FIPS PRNG implementation */
d104 9
a112 16
typedef struct 
	{
	int seeded;
	int keyed;
	int test_mode;
	int second;
	int error;
	unsigned long counter;
	AES_KEY ks;
	int vpos;
	/* Temporary storage for key if it equals seed length */
	unsigned char tmp_key[AES_BLOCK_LENGTH];
	unsigned char V[AES_BLOCK_LENGTH];
	unsigned char DT[AES_BLOCK_LENGTH];
	unsigned char last[AES_BLOCK_LENGTH];
	} FIPS_PRNG_CTX;
d114 1
a114 1
static FIPS_PRNG_CTX sctx;
d116 4
a119 1
static int fips_prng_fail = 0;
d121 10
a130 4
void FIPS_rng_stick(void)
	{
	fips_prng_fail = 1;
	}
d132 7
a138 13
void fips_rand_prng_reset(FIPS_PRNG_CTX *ctx)
	{
	ctx->seeded = 0;
	ctx->keyed = 0;
	ctx->test_mode = 0;
	ctx->counter = 0;
	ctx->second = 0;
	ctx->error = 0;
	ctx->vpos = 0;
	OPENSSL_cleanse(ctx->V, AES_BLOCK_LENGTH);
	OPENSSL_cleanse(&ctx->ks, sizeof(AES_KEY));
	}
	
d140 3
a142 21
static int fips_set_prng_key(FIPS_PRNG_CTX *ctx,
			const unsigned char *key, FIPS_RAND_SIZE_T keylen)
	{
	FIPS_selftest_check();
	if (keylen != 16 && keylen != 24 && keylen != 32)
		{
		/* error: invalid key size */
		return 0;
		}
	AES_set_encrypt_key(key, keylen << 3, &ctx->ks);
	if (keylen == 16)
		{
		memcpy(ctx->tmp_key, key, 16);
		ctx->keyed = 2;
		}
	else
		ctx->keyed = 1;
	ctx->seeded = 0;
	ctx->second = 0;
	return 1;
	}
d144 7
a150 57
static int fips_set_prng_seed(FIPS_PRNG_CTX *ctx,
			const unsigned char *seed, FIPS_RAND_SIZE_T seedlen)
	{
	int i;
	if (!ctx->keyed)
		return 0;
	/* In test mode seed is just supplied data */
	if (ctx->test_mode)
		{
		if (seedlen != AES_BLOCK_LENGTH)
			return 0;
		memcpy(ctx->V, seed, AES_BLOCK_LENGTH);
		ctx->seeded = 1;
		return 1;
		}
	/* Outside test mode XOR supplied data with existing seed */
	for (i = 0; i < seedlen; i++)
		{
		ctx->V[ctx->vpos++] ^= seed[i];
		if (ctx->vpos == AES_BLOCK_LENGTH)
			{
			ctx->vpos = 0;
			/* Special case if first seed and key length equals
 			 * block size check key and seed do not match.
 			 */ 
			if (ctx->keyed == 2)
				{
				if (!memcmp(ctx->tmp_key, ctx->V, 16))
					{
					RANDerr(RAND_F_FIPS_SET_PRNG_SEED,
						RAND_R_PRNG_SEED_MUST_NOT_MATCH_KEY);
					return 0;
					}
				OPENSSL_cleanse(ctx->tmp_key, 16);
				ctx->keyed = 1;
				}
			ctx->seeded = 1;
			}
		}
	return 1;
	}

int fips_set_test_mode(FIPS_PRNG_CTX *ctx)
	{
	if (ctx->keyed)
		{
		RANDerr(RAND_F_FIPS_SET_TEST_MODE,RAND_R_PRNG_KEYED);
		return 0;
		}
	ctx->test_mode = 1;
	return 1;
	}

int FIPS_rand_test_mode(void)
	{
	return fips_set_test_mode(&sctx);
	}
d152 1
a152 1
int FIPS_rand_set_dt(unsigned char *dt)
d154 3
a156 7
	if (!sctx.test_mode)
		{
		RANDerr(RAND_F_FIPS_RAND_SET_DT,RAND_R_NOT_IN_TEST_MODE);
		return 0;
		}
	memcpy(sctx.DT, dt, AES_BLOCK_LENGTH);
	return 1;
a157 3

static void fips_get_dt(FIPS_PRNG_CTX *ctx)
    {
d159 9
a167 1
	FILETIME ft;
d169 9
a177 1
	struct timeval tv;
a178 1
	unsigned char *buf = ctx->DT;
d180 1
d182 8
a189 1
	unsigned long pid;
d191 2
d194 4
a197 25
#ifdef OPENSSL_SYS_WIN32
	GetSystemTimeAsFileTime(&ft);
	buf[0] = (unsigned char) (ft.dwHighDateTime & 0xff);
	buf[1] = (unsigned char) ((ft.dwHighDateTime >> 8) & 0xff);
	buf[2] = (unsigned char) ((ft.dwHighDateTime >> 16) & 0xff);
	buf[3] = (unsigned char) ((ft.dwHighDateTime >> 24) & 0xff);
	buf[4] = (unsigned char) (ft.dwLowDateTime & 0xff);
	buf[5] = (unsigned char) ((ft.dwLowDateTime >> 8) & 0xff);
	buf[6] = (unsigned char) ((ft.dwLowDateTime >> 16) & 0xff);
	buf[7] = (unsigned char) ((ft.dwLowDateTime >> 24) & 0xff);
#else
	gettimeofday(&tv,NULL);
	buf[0] = (unsigned char) (tv.tv_sec & 0xff);
	buf[1] = (unsigned char) ((tv.tv_sec >> 8) & 0xff);
	buf[2] = (unsigned char) ((tv.tv_sec >> 16) & 0xff);
	buf[3] = (unsigned char) ((tv.tv_sec >> 24) & 0xff);
	buf[4] = (unsigned char) (tv.tv_usec & 0xff);
	buf[5] = (unsigned char) ((tv.tv_usec >> 8) & 0xff);
	buf[6] = (unsigned char) ((tv.tv_usec >> 16) & 0xff);
	buf[7] = (unsigned char) ((tv.tv_usec >> 24) & 0xff);
#endif
	buf[8] = (unsigned char) (ctx->counter & 0xff);
	buf[9] = (unsigned char) ((ctx->counter >> 8) & 0xff);
	buf[10] = (unsigned char) ((ctx->counter >> 16) & 0xff);
	buf[11] = (unsigned char) ((ctx->counter >> 24) & 0xff);
d199 5
a203 1
	ctx->counter++;
d205 36
d243 1
a243 5
	pid=(unsigned long)getpid();
	buf[12] = (unsigned char) (pid & 0xff);
	buf[13] = (unsigned char) ((pid >> 8) & 0xff);
	buf[14] = (unsigned char) ((pid >> 16) & 0xff);
	buf[15] = (unsigned char) ((pid >> 24) & 0xff);
d245 2
d249 4
a252 65
static int fips_rand(FIPS_PRNG_CTX *ctx,
			unsigned char *out, FIPS_RAND_SIZE_T outlen)
	{
	unsigned char R[AES_BLOCK_LENGTH], I[AES_BLOCK_LENGTH];
	unsigned char tmp[AES_BLOCK_LENGTH];
	int i;
	if (ctx->error)
		{
		RANDerr(RAND_F_FIPS_RAND,RAND_R_PRNG_ERROR);
		return 0;
		}
	if (!ctx->keyed)
		{
		RANDerr(RAND_F_FIPS_RAND,RAND_R_NO_KEY_SET);
		return 0;
		}
	if (!ctx->seeded)
		{
		RANDerr(RAND_F_FIPS_RAND,RAND_R_PRNG_NOT_SEEDED);
		return 0;
		}
	for (;;)
		{
		if (!ctx->test_mode)
			fips_get_dt(ctx);
		AES_encrypt(ctx->DT, I, &ctx->ks);
		for (i = 0; i < AES_BLOCK_LENGTH; i++)
			tmp[i] = I[i] ^ ctx->V[i];
		AES_encrypt(tmp, R, &ctx->ks);
		for (i = 0; i < AES_BLOCK_LENGTH; i++)
			tmp[i] = R[i] ^ I[i];
		AES_encrypt(tmp, ctx->V, &ctx->ks);
		/* Continuous PRNG test */
		if (ctx->second)
			{
			if (fips_prng_fail)
				memcpy(ctx->last, R, AES_BLOCK_LENGTH);
			if (!memcmp(R, ctx->last, AES_BLOCK_LENGTH))
				{
	    			RANDerr(RAND_F_FIPS_RAND,RAND_R_PRNG_STUCK);
				ctx->error = 1;
				fips_set_selftest_fail();
				return 0;
				}
			}
		memcpy(ctx->last, R, AES_BLOCK_LENGTH);
		if (!ctx->second)
			{
			ctx->second = 1;
			if (!ctx->test_mode)
				continue;
			}

		if (outlen <= AES_BLOCK_LENGTH)
			{
			memcpy(out, R, outlen);
			break;
			}

		memcpy(out, R, AES_BLOCK_LENGTH);
		out += AES_BLOCK_LENGTH;
		outlen -= AES_BLOCK_LENGTH;
		}
	return 1;
	}
d254 10
d265 1
a265 1
int FIPS_rand_set_key(const unsigned char *key, FIPS_RAND_SIZE_T keylen)
d267 2
a268 5
	int ret;
	CRYPTO_w_lock(CRYPTO_LOCK_RAND);
	ret = fips_set_prng_key(&sctx, key, keylen);
	CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
	return ret;
d271 2
a272 1
int FIPS_rand_seed(const void *seed, FIPS_RAND_SIZE_T seedlen)
d274 6
a279 5
	int ret;
	CRYPTO_w_lock(CRYPTO_LOCK_RAND);
	ret = fips_set_prng_seed(&sctx, seed, seedlen);
	CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
	return ret;
d281 1
d283 3
a285 2

int FIPS_rand_bytes(unsigned char *out, FIPS_RAND_SIZE_T count)
d287 2
a288 5
	int ret;
	CRYPTO_w_lock(CRYPTO_LOCK_RAND);
	ret = fips_rand(&sctx, out, count);
	CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
	return ret;
d290 1
a290 2

int FIPS_rand_status(void)
d292 2
a293 5
	int ret;
	CRYPTO_r_lock(CRYPTO_LOCK_RAND);
	ret = sctx.seeded;
	CRYPTO_r_unlock(CRYPTO_LOCK_RAND);
	return ret;
d295 3
d299 1
a299 1
void FIPS_rand_reset(void)
d301 42
a342 3
	CRYPTO_w_lock(CRYPTO_LOCK_RAND);
	fips_rand_prng_reset(&sctx);
	CRYPTO_w_unlock(CRYPTO_LOCK_RAND);
d345 1
a345 4
static void fips_do_rand_seed(const void *seed, FIPS_RAND_SIZE_T seedlen)
	{
	FIPS_rand_seed(seed, seedlen);
	}
d347 2
a348 5
static void fips_do_rand_add(const void *seed, FIPS_RAND_SIZE_T seedlen,
					double add_entropy)
	{
	FIPS_rand_seed(seed, seedlen);
	}
d350 1
a350 1
static const RAND_METHOD rand_fips_meth=
d352 2
a353 7
    fips_do_rand_seed,
    FIPS_rand_bytes,
    FIPS_rand_reset,
    fips_do_rand_add,
    FIPS_rand_bytes,
    FIPS_rand_status
    };
d355 1
a355 6
const RAND_METHOD *FIPS_rand_method(void)
{
  return &rand_fips_meth;
}

#endif
@

