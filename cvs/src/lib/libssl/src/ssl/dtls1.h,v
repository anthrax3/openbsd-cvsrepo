head	1.18;
access;
symbols
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.4
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	butholakala:1.5
	openssl_1_0_1_g:1.1.1.5
	OPENSSL:1.1.1
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.09.10.17.57.50;	author jsing;	state Exp;
branches;
next	1.17;
commitid	T35skZJCouRaXVVY;

1.17
date	2015.02.09.10.53.28;	author jsing;	state Exp;
branches;
next	1.16;
commitid	91DZ31h3Xbk1xWbU;

1.16
date	2014.12.14.15.30.50;	author jsing;	state Exp;
branches;
next	1.15;
commitid	XNZawfRSWvnVv1VS;

1.15
date	2014.11.16.14.12.47;	author jsing;	state Exp;
branches;
next	1.14;
commitid	M3pvHgIFoWUHNqJn;

1.14
date	2014.07.10.08.51.14;	author tedu;	state Exp;
branches;
next	1.13;
commitid	lsH7iukeZYSZBx6F;

1.13
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.06.02.05.17.45;	author guenther;	state Exp;
branches;
next	1.11;
commitid	gTSJu443k60ZfQCG;

1.11
date	2014.05.30.14.30.50;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.05.22.20.16.03;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2014.05.15.19.39.46;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.15.12.00.25;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.13.23.05.18;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.13.22.11.45;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.05.21.36.39;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.14.06;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2012.10.13.21.23.49;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.04.13.15.16.36;	author miod;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove support for DTLS_BAD_VER. We do not support non-standard and
incomplete implementations just so that we can interoperate with products
from vendors who have not bothered to fix things in the last ~10 years.

ok bcook@@ miod@@
@
text
@/* $OpenBSD: dtls1.h,v 1.17 2015/02/09 10:53:28 jsing Exp $ */
/*
 * DTLS implementation written by Nagendra Modadugu
 * (nagendra@@cs.stanford.edu) for the OpenSSL project 2005.
 */
/* ====================================================================
 * Copyright (c) 1999-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#ifndef HEADER_DTLS1_H
#define HEADER_DTLS1_H

#include <sys/time.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/buffer.h>

#ifdef  __cplusplus
extern "C" {
#endif

#define DTLS1_VERSION			0xFEFF

/* lengths of messages */
#define DTLS1_COOKIE_LENGTH                     256

#define DTLS1_RT_HEADER_LENGTH                  13

#define DTLS1_HM_HEADER_LENGTH                  12

#define DTLS1_HM_BAD_FRAGMENT                   -2
#define DTLS1_HM_FRAGMENT_RETRY                 -3

#define DTLS1_CCS_HEADER_LENGTH                  1

#ifdef DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
#define DTLS1_AL_HEADER_LENGTH                   7
#else
#define DTLS1_AL_HEADER_LENGTH                   2
#endif

#ifndef OPENSSL_NO_SSL_INTERN


typedef struct dtls1_bitmap_st {
	unsigned long map;		/* track 32 packets on 32-bit systems
					   and 64 - on 64-bit systems */
	unsigned char max_seq_num[8];	/* max record number seen so far,
					   64-bit value in big-endian
					   encoding */
} DTLS1_BITMAP;

struct dtls1_retransmit_state {
	EVP_CIPHER_CTX *enc_write_ctx;	/* cryptographic state */
	EVP_MD_CTX *write_hash;		/* used for mac generation */
	SSL_SESSION *session;
	unsigned short epoch;
};

struct hm_header_st {
	unsigned char type;
	unsigned long msg_len;
	unsigned short seq;
	unsigned long frag_off;
	unsigned long frag_len;
	unsigned int is_ccs;
	struct dtls1_retransmit_state saved_retransmit_state;
};

struct ccs_header_st {
	unsigned char type;
	unsigned short seq;
};

struct dtls1_timeout_st {
	/* Number of read timeouts so far */
	unsigned int read_timeouts;

	/* Number of write timeouts so far */
	unsigned int write_timeouts;

	/* Number of alerts received so far */
	unsigned int num_alerts;
};

struct _pqueue;

typedef struct record_pqueue_st {
	unsigned short epoch;
	struct _pqueue *q;
} record_pqueue;

typedef struct hm_fragment_st {
	struct hm_header_st msg_header;
	unsigned char *fragment;
	unsigned char *reassembly;
} hm_fragment;

typedef struct dtls1_state_st {
	unsigned int send_cookie;
	unsigned char cookie[DTLS1_COOKIE_LENGTH];
	unsigned char rcvd_cookie[DTLS1_COOKIE_LENGTH];
	unsigned int cookie_len;

	/*
	 * The current data and handshake epoch.  This is initially
	 * undefined, and starts at zero once the initial handshake is
	 * completed
	 */
	unsigned short r_epoch;
	unsigned short w_epoch;

	/* records being received in the current epoch */
	DTLS1_BITMAP bitmap;

	/* renegotiation starts a new set of sequence numbers */
	DTLS1_BITMAP next_bitmap;

	/* handshake message numbers */
	unsigned short handshake_write_seq;
	unsigned short next_handshake_write_seq;

	unsigned short handshake_read_seq;

	/* save last sequence number for retransmissions */
	unsigned char last_write_sequence[8];

	/* Received handshake records (processed and unprocessed) */
	record_pqueue unprocessed_rcds;
	record_pqueue processed_rcds;

	/* Buffered handshake messages */
	struct _pqueue *buffered_messages;

	/* Buffered (sent) handshake records */
	struct _pqueue *sent_messages;

	/* Buffered application records.
	 * Only for records between CCS and Finished
	 * to prevent either protocol violation or
	 * unnecessary message loss.
	 */
	record_pqueue buffered_app_data;

	/* Is set when listening for new connections with dtls1_listen() */
	unsigned int listen;

	unsigned int mtu; /* max DTLS packet size */

	struct hm_header_st w_msg_hdr;
	struct hm_header_st r_msg_hdr;

	struct dtls1_timeout_st timeout;

	/* Indicates when the last handshake msg or heartbeat sent will timeout */
	struct timeval next_timeout;

	/* Timeout duration */
	unsigned short timeout_duration;

	/* storage for Alert/Handshake protocol data received but not
	 * yet processed by ssl3_read_bytes: */
	unsigned char alert_fragment[DTLS1_AL_HEADER_LENGTH];
	unsigned int alert_fragment_len;
	unsigned char handshake_fragment[DTLS1_HM_HEADER_LENGTH];
	unsigned int handshake_fragment_len;

	unsigned int retransmitting;
	unsigned int change_cipher_spec_ok;


} DTLS1_STATE;

typedef struct dtls1_record_data_st {
	unsigned char *packet;
	unsigned int   packet_length;
	SSL3_BUFFER    rbuf;
	SSL3_RECORD    rrec;
} DTLS1_RECORD_DATA;

#endif

/* Timeout multipliers (timeout slice is defined in apps/timeouts.h */
#define DTLS1_TMO_READ_COUNT                      2
#define DTLS1_TMO_WRITE_COUNT                     2

#define DTLS1_TMO_ALERT_COUNT                     12

#ifdef  __cplusplus
}
#endif
#endif
@


1.17
log
@Jettison DTLS over SCTP.

OpenBSD does not have SCTP support and it sees little use in the wild.
OPENSSL_NO_SCTP is already specified via opensslfeatures.h, hence this
is a code removal only and symbols should remain unchanged.

ok beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: dtls1.h,v 1.16 2014/12/14 15:30:50 jsing Exp $ */
a75 1
#define DTLS1_BAD_VER			0x0100
@


1.16
log
@Remove trailing whitespace.
@
text
@d1 1
a1 1
/* $OpenBSD: dtls1.h,v 1.15 2014/11/16 14:12:47 jsing Exp $ */
a97 3
#ifndef OPENSSL_NO_SCTP
#define DTLS1_SCTP_AUTH_LABEL	"EXPORTER_DTLS_OVER_SCTP"
#endif
a224 6
#ifndef OPENSSL_NO_SCTP
	/* used when SSL_ST_XX_FLUSH is entered */
	int next_state;

	int shutdown_received;
#endif
a232 3
#ifndef OPENSSL_NO_SCTP
	struct bio_dgram_sctp_rcvinfo recordinfo;
#endif
@


1.15
log
@Sort and group includes.
@
text
@d1 2
a2 2
/* $OpenBSD: dtls1.h,v 1.14 2014/07/10 08:51:14 tedu Exp $ */
/* 
d4 1
a4 1
 * (nagendra@@cs.stanford.edu) for the OpenSSL project 2005.  
d14 1
a14 1
 *    notice, this list of conditions and the following disclaimer. 
d162 1
a162 1
	/* 
d165 1
a165 1
	 * completed 
@


1.14
log
@decompress libssl. ok beck jsing
@
text
@d1 1
a1 1
/* $OpenBSD: dtls1.h,v 1.13 2014/06/12 15:49:31 deraadt Exp $ */
d63 2
a64 1
#include <openssl/buffer.h>
d68 2
a69 1
#include <sys/time.h>
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a110 5
#ifndef OPENSSL_NO_COMP
	COMP_CTX *compress;		/* compression */
#else
	char *compress;
#endif
@


1.12
log
@Since pqueue is a private interface and the header defining the struct
isn't even exported, there's no (sane) way for someone else to use the
typedef.  Eliminate the typedef and just use "struct _pqueue *".

duplicate typedef pointed out by Brent Cook (busterb (at) gmail.com)
ok miod@@
@
text
@d1 1
a1 1
/* ssl/dtls1.h */
@


1.11
log
@remove some #if 0 code. we don't need any more reminders that we're using
a not quite appropriate data structure. ok jsing
@
text
@a146 1
typedef struct _pqueue *pqueue;
d150 1
a150 1
	pqueue q;
d193 1
a193 1
	pqueue buffered_messages;
d196 1
a196 1
	pqueue sent_messages;
@


1.10
log
@Add explicit #include lines for stdio.h, stdlib.h and string.h; these files
used to be pulled via <openssl/pqueue.h> which got removed, and it turns out
that there is code in the wild which currently relies upon these headers to
be brought in scope by including <openssl/dtls1.h>.

Although such code needs to be fixed to not rely upon any system header being
automagically included by including ssl headers, our goal is not to break
code for the sake of it (ok, maybe from time to time).

Hopefully, this commit can be reverted in a not-so-distant future.
@
text
@a75 5
#if 0
/* this alert description is not specified anywhere... */
#define DTLS1_AD_MISSING_HANDSHAKE_MESSAGE    110
#endif

@


1.9
log
@No longer make pqueue.h a public (and installed) header file. Replace its
inclusion in <ssl/dtls1.h> by the benign
`struct _pqueue; typedef struct _pqueue *pqueue;'.

Note that said dtls1.h should probably be considered a private header as well...

ok beck@@
@
text
@d64 3
@


1.8
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.

There is still a huge amount of inconsistency within these headers.
@
text
@a63 1
#include <openssl/pqueue.h>
d147 3
@


1.7
log
@Flense a variety of windows support stuff, and a strange gettimeofday function.
ok deraadt@@
@
text
@d103 1
a103 2
typedef struct dtls1_bitmap_st
	{
d109 1
a109 1
	} DTLS1_BITMAP;
d111 1
a111 2
struct dtls1_retransmit_state
	{
d113 1
a113 1
	EVP_MD_CTX *write_hash;			/* used for mac generation */
d115 1
a115 1
	COMP_CTX *compress;				/* compression */
d117 1
a117 1
	char *compress;	
d121 1
a121 1
	};
d123 1
a123 2
struct hm_header_st
	{
d131 1
a131 1
	};
d133 1
a133 2
struct ccs_header_st
	{
d136 1
a136 1
	};
d138 1
a138 2
struct dtls1_timeout_st
	{
d141 1
a141 1
	
d144 1
a144 1
	
d147 1
a147 1
	};
d149 1
a149 2
typedef struct record_pqueue_st
	{
d152 1
a152 1
	} record_pqueue;
d154 1
a154 2
typedef struct hm_fragment_st
	{
d158 1
a158 1
	} hm_fragment;
d160 1
a160 2
typedef struct dtls1_state_st
	{
d239 1
a239 1
	} DTLS1_STATE;
d241 1
a241 2
typedef struct dtls1_record_data_st
	{
d249 1
a249 1
	} DTLS1_RECORD_DATA;
a262 1

@


1.6
log
@Remove vms support stuff.
ok deraadt@@
@
text
@a64 9
#ifdef OPENSSL_SYS_WIN32
/* Needed for struct timeval */
#include <winsock.h>
#elif defined(OPENSSL_SYS_NETWARE) && !defined(_WINSOCK2API_)
#include <sys/timeval.h>
#else
#if defined(OPENSSL_SYS_VXWORKS)
#include <sys/times.h>
#else
a65 2
#endif
#endif
@


1.5
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@a64 4
#ifdef OPENSSL_SYS_VMS
#include <resource.h>
#include <sys/timeb.h>
#endif
@


1.4
log
@resolve conflicts
@
text
@d60 2
a61 2
#ifndef HEADER_DTLS1_H 
#define HEADER_DTLS1_H 
d75 3
d79 1
@


1.3
log
@resolve conflicts, fix local changes
@
text
@d108 5
d235 1
a235 1
	/* Indicates when the last handshake msg sent will timeout */
d251 7
d266 3
d271 1
@


1.2
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@d65 12
d91 1
a91 1
#define DTLS1_COOKIE_LENGTH                     32
d111 5
a115 3
	PQ_64BIT map;
	unsigned long length;     /* sizeof the bitmap in bits */
	PQ_64BIT max_seq_num;  /* max record number seen so far */
d118 13
d139 1
d170 1
d200 3
d213 11
a223 1
	unsigned int mtu; /* max wire packet size */
d229 7
a235 1
	
d244 1
@


1.1
log
@Initial revision
@
text
@d73 2
d76 1
d90 1
d92 3
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@a72 2
#if 0
/* this alert description is not specified anywhere... */
a73 1
#endif
a86 1
#ifdef DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
a87 3
#else
#define DTLS1_AL_HEADER_LENGTH                   2
#endif
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@a64 12
#ifdef OPENSSL_SYS_VMS
#include <resource.h>
#include <sys/timeb.h>
#endif
#ifdef OPENSSL_SYS_WIN32
/* Needed for struct timeval */
#include <winsock.h>
#elif defined(OPENSSL_SYS_NETWARE) && !defined(_WINSOCK2API_)
#include <sys/timeval.h>
#else
#include <sys/time.h>
#endif
d79 1
a79 1
#define DTLS1_COOKIE_LENGTH                     256
d99 3
a101 5
	unsigned long map;		/* track 32 packets on 32-bit systems
					   and 64 - on 64-bit systems */
	unsigned char max_seq_num[8];	/* max record number seen so far,
					   64-bit value in big-endian
					   encoding */
a103 13
struct dtls1_retransmit_state
	{
	EVP_CIPHER_CTX *enc_write_ctx;	/* cryptographic state */
	EVP_MD_CTX *write_hash;			/* used for mac generation */
#ifndef OPENSSL_NO_COMP
	COMP_CTX *compress;				/* compression */
#else
	char *compress;	
#endif
	SSL_SESSION *session;
	unsigned short epoch;
	};

a111 1
	struct dtls1_retransmit_state saved_retransmit_state;
a141 1
	unsigned char *reassembly;
a170 3
	/* save last sequence number for retransmissions */
	unsigned char last_write_sequence[8];

d181 1
a181 11
	/* Buffered application records.
	 * Only for records between CCS and Finished
	 * to prevent either protocol violation or
	 * unnecessary message loss.
	 */
	record_pqueue buffered_app_data;

	/* Is set when listening for new connections with dtls1_listen() */
	unsigned int listen;

	unsigned int mtu; /* max DTLS packet size */
d187 1
a187 7

	/* Indicates when the last handshake msg sent will timeout */
	struct timeval next_timeout;

	/* Timeout duration */
	unsigned short timeout_duration;

a195 1
	unsigned int change_cipher_spec_ok;
@


1.1.1.4
log
@import OpenSSL-1.0.1c
@
text
@a107 5
#ifndef OPENSSL_NO_SSL_INTERN

#ifndef OPENSSL_NO_SCTP
#define DTLS1_SCTP_AUTH_LABEL	"EXPORTER_DTLS_OVER_SCTP"
#endif
d230 1
a230 1
	/* Indicates when the last handshake msg or heartbeat sent will timeout */
a245 7
#ifndef OPENSSL_NO_SCTP
	/* used when SSL_ST_XX_FLUSH is entered */
	int next_state;

	int shutdown_received;
#endif

a253 3
#ifndef OPENSSL_NO_SCTP
	struct bio_dgram_sctp_rcvinfo recordinfo;
#endif
a255 1
#endif
@


1.1.1.5
log
@Import OpenSSL 1.0.1g
@
text
@d60 2
a61 2
#ifndef HEADER_DTLS1_H
#define HEADER_DTLS1_H
a74 3
#if defined(OPENSSL_SYS_VXWORKS)
#include <sys/times.h>
#else
a75 1
#endif
@


