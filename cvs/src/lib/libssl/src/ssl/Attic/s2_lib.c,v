head	1.17;
access;
symbols
	butholakala:1.14
	openssl_1_0_1_g:1.1.1.9
	OPENBSD_5_5:1.14.0.16
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.12
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.10
	OPENBSD_5_3_BASE:1.14
	openssl_1_0_1_c:1.1.1.9
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.8
	openssl_1_0_0_f:1.1.1.9
	openssl_1_0_0_e:1.1.1.9
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	openssh_1_0_0_a:1.1.1.9
	OPENBSD_4_8:1.13.0.8
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.4
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	openssl_0_9_8_k:1.1.1.8
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	openssl_0_9_8_j:1.1.1.8
	openssl_0_9_8_h:1.1.1.8
	pre_openssl_0_9_8h:1.12
	OPENBSD_4_4:1.12.0.14
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.12
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.10
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.8
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	openssl_0_9_7j:1.1.1.7
	openssl:1.1.1
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENSSL_0_9_7G:1.1.1.7
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENSSL_0_9_7D:1.1.1.6
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENSSL_0_9_7C:1.1.1.5
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENSSL_0_9_7B:1.1.1.5
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.4
	OPENSSL_0_9_7_BETA3:1.1.1.3
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2014.04.15.21.47.56;	author tedu;	state dead;
branches;
next	1.16;

1.16
date	2014.04.15.17.46.17;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.14.15.37.01;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.29.05.39.31;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.12.02.18.40;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.10.16.31.57;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.30.11.08.06;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.07.19.55.34;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.03.39;	author beck;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2000.12.15.02.58.36;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.27;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.26;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.11;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.11;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.33;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.43.59;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.09.12.20.52.28;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.05.11.21.36.37;	author markus;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.20.42.06;	author markus;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.04.29.05.37.27;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	;

1.5.2.1
date	2002.07.30.11.07.33;	author miod;	state Exp;
branches;
next	;

1.5.4.1
date	2002.07.30.15.47.52;	author jason;	state Exp;
branches;
next	;


desc
@@


1.17
log
@remove ssl2 support even more completely.
in the process, always include ssl3 and tls1, we don't need config options
for them. when the time comes to expire ssl3, it will be with an ax.
checked by miod
@
text
@/* ssl/s2_lib.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2007 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include "ssl_locl.h"
#ifndef OPENSSL_NO_SSL2
#include <stdio.h>
#include <openssl/objects.h>
#include <openssl/evp.h>
#include <openssl/md5.h>

const char ssl2_version_str[]="SSLv2" OPENSSL_VERSION_PTEXT;

#define SSL2_NUM_CIPHERS (sizeof(ssl2_ciphers)/sizeof(SSL_CIPHER))

/* list of available SSLv2 ciphers (sorted by id) */
OPENSSL_GLOBAL const SSL_CIPHER ssl2_ciphers[] = {
#if 0
/* NULL_WITH_MD5 v3 */
	{
		1,
		SSL2_TXT_NULL_WITH_MD5,
		SSL2_CK_NULL_WITH_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_eNULL,
		SSL_MD5,
		SSL_SSLV2,
		SSL_EXPORT|SSL_EXP40|SSL_STRONG_NONE,
		0,
		0,
		0,
	},
#endif

/* RC4_128_WITH_MD5 */
	{
		1,
		SSL2_TXT_RC4_128_WITH_MD5,
		SSL2_CK_RC4_128_WITH_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC4,
		SSL_MD5,
		SSL_SSLV2,
		SSL_NOT_EXP|SSL_MEDIUM,
		0,
		128,
		128,
	},

/* RC4_128_EXPORT40_WITH_MD5 */
	{
		1,
		SSL2_TXT_RC4_128_EXPORT40_WITH_MD5,
		SSL2_CK_RC4_128_EXPORT40_WITH_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC4,
		SSL_MD5,
		SSL_SSLV2,
		SSL_EXPORT|SSL_EXP40,
		SSL2_CF_5_BYTE_ENC,
		40,
		128,
	},

/* RC2_128_CBC_WITH_MD5 */
	{
		1,
		SSL2_TXT_RC2_128_CBC_WITH_MD5,
		SSL2_CK_RC2_128_CBC_WITH_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC2,
		SSL_MD5,
		SSL_SSLV2,
		SSL_NOT_EXP|SSL_MEDIUM,
		0,
		128,
		128,
	},

/* RC2_128_CBC_EXPORT40_WITH_MD5 */
	{
		1,
		SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5,
		SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC2,
		SSL_MD5,
		SSL_SSLV2,
		SSL_EXPORT|SSL_EXP40,
		SSL2_CF_5_BYTE_ENC,
		40,
		128,
	},

#ifndef OPENSSL_NO_IDEA
/* IDEA_128_CBC_WITH_MD5 */
	{
		1,
		SSL2_TXT_IDEA_128_CBC_WITH_MD5,
		SSL2_CK_IDEA_128_CBC_WITH_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_IDEA,
		SSL_MD5,
		SSL_SSLV2,
		SSL_NOT_EXP|SSL_MEDIUM,
		0,
		128,
		128,
	},
#endif

/* DES_64_CBC_WITH_MD5 */
	{
		1,
		SSL2_TXT_DES_64_CBC_WITH_MD5,
		SSL2_CK_DES_64_CBC_WITH_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_DES,
		SSL_MD5,
		SSL_SSLV2,
		SSL_NOT_EXP|SSL_LOW,
		0,
		56,
		56,
	},

/* DES_192_EDE3_CBC_WITH_MD5 */
	{
		1,
		SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5,
		SSL2_CK_DES_192_EDE3_CBC_WITH_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_3DES,
		SSL_MD5,
		SSL_SSLV2,
		SSL_NOT_EXP|SSL_HIGH,
		0,
		168,
		168,
	},

#if 0
/* RC4_64_WITH_MD5 */
	{
		1,
		SSL2_TXT_RC4_64_WITH_MD5,
		SSL2_CK_RC4_64_WITH_MD5,
		SSL_kRSA,
		SSL_aRSA,
		SSL_RC4,
		SSL_MD5,
		SSL_SSLV2,
		SSL_NOT_EXP|SSL_LOW,
		SSL2_CF_8_BYTE_ENC,
		64,
		64,
	},
#endif

#if 0
/* NULL SSLeay (testing) */
	{
		0,
		SSL2_TXT_NULL,
		SSL2_CK_NULL,
		0,
		0,
		0,
		0,
		SSL_SSLV2,
		SSL_STRONG_NONE,
		0,
		0,
		0,
	},
#endif

/* end of list :-) */
};

long
ssl2_default_timeout(void)
{
	return (300);
}

int
ssl2_num_ciphers(void)
{
	return (SSL2_NUM_CIPHERS);
}

const SSL_CIPHER
*ssl2_get_cipher(unsigned int u)
{
	if (u < SSL2_NUM_CIPHERS)
		return (&(ssl2_ciphers[SSL2_NUM_CIPHERS - 1 - u]));
	else
		return (NULL);
}

int
ssl2_pending(const SSL *s)
{
	return SSL_in_init(s) ? 0 : s->s2->ract_data_length;
}

int
ssl2_new(SSL *s)
{
	SSL2_STATE *s2;

	if ((s2 = OPENSSL_malloc(sizeof *s2)) == NULL)
		goto err;
	memset(s2, 0, sizeof *s2);

#if SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER + 3 > SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER + 2
#  error "assertion failed"
#endif

	if ((s2->rbuf = OPENSSL_malloc(
	    SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER + 2)) == NULL)
		goto err;
	/* wbuf needs one byte more because when using two-byte headers,
	 * we leave the first byte unused in do_ssl_write (s2_pkt.c) */
	if ((s2->wbuf = OPENSSL_malloc(
	    SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER + 3)) == NULL)
		goto err;
	s->s2 = s2;

	ssl2_clear(s);
	return (1);
err:
	if (s2 != NULL) {
		if (s2->wbuf != NULL)
			OPENSSL_free(s2->wbuf);
		if (s2->rbuf != NULL)
			OPENSSL_free(s2->rbuf);
		OPENSSL_free(s2);
	}
	return (0);
}

void
ssl2_free(SSL *s)
{
	SSL2_STATE *s2;

	if (s == NULL)
		return;

	s2 = s->s2;
	if (s2->rbuf != NULL)
		OPENSSL_free(s2->rbuf);
	if (s2->wbuf != NULL)
		OPENSSL_free(s2->wbuf);
	OPENSSL_cleanse(s2, sizeof *s2);
	OPENSSL_free(s2);
	s->s2 = NULL;
}

void
ssl2_clear(SSL *s)
{
	SSL2_STATE *s2;
	unsigned char *rbuf, *wbuf;

	s2 = s->s2;

	rbuf = s2->rbuf;
	wbuf = s2->wbuf;

	memset(s2, 0, sizeof *s2);

	s2->rbuf = rbuf;
	s2->wbuf = wbuf;
	s2->clear_text = 1;
	s->packet = s2->rbuf;
	s->version = SSL2_VERSION;
	s->packet_length = 0;
}

long
ssl2_ctrl(SSL *s, int cmd, long larg, void *parg)
{
	int ret = 0;

	switch (cmd) {
	case SSL_CTRL_GET_SESSION_REUSED:
		ret = s->hit;
		break;
	default:
		break;
	}
	return (ret);
}

long
ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
{
	return (0);
}

long
ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
{
	return (0);
}

long
ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
{
	return (0);
}

/* This function needs to check if the ciphers required are actually
 * available */
const SSL_CIPHER
*ssl2_get_cipher_by_char(const unsigned char *p)
{
	SSL_CIPHER c;
	const SSL_CIPHER *cp;
	unsigned long id;

	id = 0x02000000L|((unsigned long)p[0]<<16L)|
	    ((unsigned long)p[1]<<8L)|(unsigned long)p[2];
	c.id = id;
	cp = OBJ_bsearch_ssl_cipher_id(&c, ssl2_ciphers, SSL2_NUM_CIPHERS);
	if ((cp == NULL) || (cp->valid == 0))
		return NULL;
	else
		return cp;
}

int
ssl2_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
{
	long l;

	if (p != NULL) {
		l = c->id;
		if ((l & 0xff000000) != 0x02000000)
			return (0);
		p[0] = ((unsigned char)(l >> 16L))&0xFF;
		p[1] = ((unsigned char)(l >> 8L))&0xFF;
		p[2] = ((unsigned char)(l     ))&0xFF;
	}
	return (3);
}

int
ssl2_generate_key_material(SSL *s)
{
	unsigned int i;
	EVP_MD_CTX ctx;
	unsigned char *km;
	unsigned char c = '0';
	const EVP_MD *md5;
	int md_size;

	md5 = EVP_md5();

	EVP_MD_CTX_init(&ctx);
	km = s->s2->key_material;

	if (s->session->master_key_length < 0 ||
		s->session->master_key_length > (int)sizeof(s->session->master_key)) {
		SSLerr(SSL_F_SSL2_GENERATE_KEY_MATERIAL, ERR_R_INTERNAL_ERROR);
		return 0;
	}
	md_size = EVP_MD_size(md5);
	if (md_size < 0)
		return 0;
	for (i = 0; i < s->s2->key_material_length; i += md_size) {
		if (((km - s->s2->key_material) + md_size) >
			(int)sizeof(s->s2->key_material)) {
			/* EVP_DigestFinal_ex() below would write beyond buffer */
			SSLerr(SSL_F_SSL2_GENERATE_KEY_MATERIAL, ERR_R_INTERNAL_ERROR);
			return 0;
		}

		EVP_DigestInit_ex(&ctx, md5, NULL);

		OPENSSL_assert(s->session->master_key_length >= 0 &&
		    s->session->master_key_length <
		    (int)sizeof(s->session->master_key));
		EVP_DigestUpdate(&ctx, s->session->master_key, s->session->master_key_length);
		EVP_DigestUpdate(&ctx, &c, 1);
		c++;
		EVP_DigestUpdate(&ctx, s->s2->challenge, s->s2->challenge_length);
		EVP_DigestUpdate(&ctx, s->s2->conn_id, s->s2->conn_id_length);
		EVP_DigestFinal_ex(&ctx, km, NULL);
		km += md_size;
	}

	EVP_MD_CTX_cleanup(&ctx);
	return 1;
}

void
ssl2_return_error(SSL *s, int err)
{
	if (!s->error) {
		s->error = 3;
		s->error_code = err;

		ssl2_write_error(s);
	}
}


void
ssl2_write_error(SSL *s)
{
	unsigned char buf[3];
	int i, error;

	buf[0] = SSL2_MT_ERROR;
	buf[1] = (s->error_code >> 8)&0xff;
	buf[2] = (s->error_code)&0xff;

/*	state=s->rwstate;*/

	error=s->error; /* number of bytes left to write */
	s->error = 0;
	OPENSSL_assert(error >= 0 && error <= (int)sizeof(buf));
	i = ssl2_write(s, &(buf[3 - error]), error);

/*	if (i == error) s->rwstate=state; */

	if (i < 0)
		s->error = error;
	else {
		s->error = error - i;

		if (s->error == 0)
			if (s->msg_callback)
				s->msg_callback(1, s->version, 0, buf, 3, s, s->msg_callback_arg); /* ERROR */
	}
}

int
ssl2_shutdown(SSL *s)
{
	s->shutdown = (SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
	return (1);
}
#else /* !OPENSSL_NO_SSL2 */

# if PEDANTIC
static void *dummy = &dummy;
# endif

#endif
@


1.16
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@@


1.15
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a477 4
#ifdef CHARSET_EBCDIC
	c = os_toascii['0']; /* Must be an ASCII '0', not EBCDIC '0',
				see SSLv2 docu */
#endif
@


1.14
log
@resolve conflicts, fix local changes
@
text
@d124 1
a124 1
OPENSSL_GLOBAL const SSL_CIPHER ssl2_ciphers[]={
d128 12
a139 12
	1,
	SSL2_TXT_NULL_WITH_MD5,
	SSL2_CK_NULL_WITH_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_eNULL,
	SSL_MD5,
	SSL_SSLV2,
	SSL_EXPORT|SSL_EXP40|SSL_STRONG_NONE,
	0,
	0,
	0,
d145 12
a156 12
	1,
	SSL2_TXT_RC4_128_WITH_MD5,
	SSL2_CK_RC4_128_WITH_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV2,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
d161 12
a172 12
	1,
	SSL2_TXT_RC4_128_EXPORT40_WITH_MD5,
	SSL2_CK_RC4_128_EXPORT40_WITH_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV2,
	SSL_EXPORT|SSL_EXP40,
	SSL2_CF_5_BYTE_ENC,
	40,
	128,
d177 12
a188 12
	1,
	SSL2_TXT_RC2_128_CBC_WITH_MD5,
	SSL2_CK_RC2_128_CBC_WITH_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC2,
	SSL_MD5,
	SSL_SSLV2,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
d193 12
a204 12
	1,
	SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5,
	SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC2,
	SSL_MD5,
	SSL_SSLV2,
	SSL_EXPORT|SSL_EXP40,
	SSL2_CF_5_BYTE_ENC,
	40,
	128,
d210 12
a221 12
	1,
	SSL2_TXT_IDEA_128_CBC_WITH_MD5,
	SSL2_CK_IDEA_128_CBC_WITH_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_IDEA,
	SSL_MD5,
	SSL_SSLV2,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
d227 12
a238 12
	1,
	SSL2_TXT_DES_64_CBC_WITH_MD5,
	SSL2_CK_DES_64_CBC_WITH_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_DES,
	SSL_MD5,
	SSL_SSLV2,
	SSL_NOT_EXP|SSL_LOW,
	0,
	56,
	56,
d243 12
a254 12
	1,
	SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5,
	SSL2_CK_DES_192_EDE3_CBC_WITH_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_3DES,
	SSL_MD5,
	SSL_SSLV2,
	SSL_NOT_EXP|SSL_HIGH,
	0,
	168,
	168,
d260 12
a271 12
	1,
	SSL2_TXT_RC4_64_WITH_MD5,
	SSL2_CK_RC4_64_WITH_MD5,
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV2,
	SSL_NOT_EXP|SSL_LOW,
	SSL2_CF_8_BYTE_ENC,
	64,
	64,
d277 13
a289 13
	{	
	0,
	SSL2_TXT_NULL,
	SSL2_CK_NULL,
	0,
	0,
	0,
	0,
	SSL_SSLV2,
	SSL_STRONG_NONE,
	0,
	0,
	0,
d294 1
a294 11
	};

long ssl2_default_timeout(void)
	{
	return(300);
	}

int ssl2_num_ciphers(void)
	{
	return(SSL2_NUM_CIPHERS);
	}
d296 15
a310 2
const SSL_CIPHER *ssl2_get_cipher(unsigned int u)
	{
d312 1
a312 1
		return(&(ssl2_ciphers[SSL2_NUM_CIPHERS-1-u]));
d314 2
a315 2
		return(NULL);
	}
d317 3
a319 2
int ssl2_pending(const SSL *s)
	{
d321 1
a321 1
	}
d323 3
a325 2
int ssl2_new(SSL *s)
	{
d328 3
a330 2
	if ((s2=OPENSSL_malloc(sizeof *s2)) == NULL) goto err;
	memset(s2,0,sizeof *s2);
d336 3
a338 2
	if ((s2->rbuf=OPENSSL_malloc(
		SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER+2)) == NULL) goto err;
d341 4
a344 3
	if ((s2->wbuf=OPENSSL_malloc(
		SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER+3)) == NULL) goto err;
	s->s2=s2;
d347 1
a347 1
	return(1);
d349 5
a353 4
	if (s2 != NULL)
		{
		if (s2->wbuf != NULL) OPENSSL_free(s2->wbuf);
		if (s2->rbuf != NULL) OPENSSL_free(s2->rbuf);
a354 2
		}
	return(0);
d356 2
d359 3
a361 2
void ssl2_free(SSL *s)
	{
d364 2
a365 2
	if(s == NULL)
	    return;
d367 6
a372 4
	s2=s->s2;
	if (s2->rbuf != NULL) OPENSSL_free(s2->rbuf);
	if (s2->wbuf != NULL) OPENSSL_free(s2->wbuf);
	OPENSSL_cleanse(s2,sizeof *s2);
d374 2
a375 2
	s->s2=NULL;
	}
d377 3
a379 2
void ssl2_clear(SSL *s)
	{
d381 1
a381 1
	unsigned char *rbuf,*wbuf;
d383 1
a383 1
	s2=s->s2;
d385 2
a386 2
	rbuf=s2->rbuf;
	wbuf=s2->wbuf;
d388 1
a388 1
	memset(s2,0,sizeof *s2);
d390 7
a396 7
	s2->rbuf=rbuf;
	s2->wbuf=wbuf;
	s2->clear_text=1;
	s->packet=s2->rbuf;
	s->version=SSL2_VERSION;
	s->packet_length=0;
	}
d398 4
a401 3
long ssl2_ctrl(SSL *s, int cmd, long larg, void *parg)
	{
	int ret=0;
d403 1
a403 2
	switch(cmd)
		{
d405 1
a405 1
		ret=s->hit;
a408 12
		}
	return(ret);
	}

long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
	{
	return(0);
	}

long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
	{
	return(0);
d410 2
d413 17
a429 4
long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
	{
	return(0);
	}
d433 3
a435 2
const SSL_CIPHER *ssl2_get_cipher_by_char(const unsigned char *p)
	{
d440 3
a442 3
	id=0x02000000L|((unsigned long)p[0]<<16L)|
		((unsigned long)p[1]<<8L)|(unsigned long)p[2];
	c.id=id;
d448 1
a448 1
	}
d450 3
a452 2
int ssl2_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
	{
d455 14
a468 13
	if (p != NULL)
		{
		l=c->id;
		if ((l & 0xff000000) != 0x02000000) return(0);
		p[0]=((unsigned char)(l>>16L))&0xFF;
		p[1]=((unsigned char)(l>> 8L))&0xFF;
		p[2]=((unsigned char)(l     ))&0xFF;
		}
	return(3);
	}

int ssl2_generate_key_material(SSL *s)
	{
d472 1
a472 1
	unsigned char c='0';
d483 1
a483 1
	km=s->s2->key_material;
d485 5
a489 6
 	if (s->session->master_key_length < 0 ||
			s->session->master_key_length > (int)sizeof(s->session->master_key))
 		{
 		SSLerr(SSL_F_SSL2_GENERATE_KEY_MATERIAL, ERR_R_INTERNAL_ERROR);
 		return 0;
 		}
d492 2
a493 3
	    return 0;
	for (i=0; i<s->s2->key_material_length; i += md_size)
		{
d495 1
a495 2
				(int)sizeof(s->s2->key_material))
			{
d499 1
a499 1
			}
d503 5
a507 5
		OPENSSL_assert(s->session->master_key_length >= 0
		    && s->session->master_key_length
		    < (int)sizeof(s->session->master_key));
		EVP_DigestUpdate(&ctx,s->session->master_key,s->session->master_key_length);
		EVP_DigestUpdate(&ctx,&c,1);
d509 3
a511 3
		EVP_DigestUpdate(&ctx,s->s2->challenge,s->s2->challenge_length);
		EVP_DigestUpdate(&ctx,s->s2->conn_id,s->s2->conn_id_length);
		EVP_DigestFinal_ex(&ctx,km,NULL);
d513 1
a513 1
		}
d517 1
a517 1
	}
d519 6
a524 6
void ssl2_return_error(SSL *s, int err)
	{
	if (!s->error)
		{
		s->error=3;
		s->error_code=err;
a526 1
		}
d528 1
d531 3
a533 2
void ssl2_write_error(SSL *s)
	{
d535 1
a535 1
	int i,error;
d537 3
a539 3
	buf[0]=SSL2_MT_ERROR;
	buf[1]=(s->error_code>>8)&0xff;
	buf[2]=(s->error_code)&0xff;
d544 1
a544 1
	s->error=0;
d546 1
a546 1
	i=ssl2_write(s,&(buf[3-error]),error);
d551 3
a553 4
		s->error=error;
	else
		{
		s->error=error-i;
a557 1
		}
d559 1
d561 6
a566 5
int ssl2_shutdown(SSL *s)
	{
	s->shutdown=(SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
	return(1);
	}
d570 1
a570 1
static void *dummy=&dummy;
@


1.13
log
@resolve conflicts
@
text
@d58 53
d124 2
a125 1
OPENSSL_GLOBAL SSL_CIPHER ssl2_ciphers[]={
a126 1
#if 0
d131 5
a135 1
	SSL_kRSA|SSL_aRSA|SSL_eNULL|SSL_MD5|SSL_SSLV2,
a139 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d142 1
d148 5
a152 1
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_SSLV2,
a156 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d158 1
d164 5
a168 1
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_SSLV2,
a172 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d174 1
d180 5
a184 1
	SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_SSLV2,
a188 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d190 1
d196 5
a200 1
	SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_SSLV2,
a204 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d206 2
a208 1
#ifndef OPENSSL_NO_IDEA
d213 5
a217 1
	SSL_kRSA|SSL_aRSA|SSL_IDEA|SSL_MD5|SSL_SSLV2,
a221 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d224 1
d230 5
a234 1
	SSL_kRSA|SSL_aRSA|SSL_DES|SSL_MD5|SSL_SSLV2,
a238 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d240 1
d246 5
a250 1
	SSL_kRSA|SSL_aRSA|SSL_3DES|SSL_MD5|SSL_SSLV2,
a254 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d256 2
a258 1
#if 0
d263 5
a267 1
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_SSLV2,
a271 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
d274 2
a276 1
#if 0
d282 4
a289 2
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
a300 5
IMPLEMENT_ssl2_meth_func(sslv2_base_method,
			ssl_undefined_function,
			ssl_undefined_function,
			ssl_bad_method)

d306 1
a306 1
SSL_CIPHER *ssl2_get_cipher(unsigned int u)
d417 1
a417 1
SSL_CIPHER *ssl2_get_cipher_by_char(const unsigned char *p)
d419 2
a420 1
	SSL_CIPHER c,*cp;
d426 1
a426 4
	cp = (SSL_CIPHER *)OBJ_bsearch((char *)&c,
		(char *)ssl2_ciphers,
		SSL2_NUM_CIPHERS,sizeof(SSL_CIPHER),
		FP_ICC ssl_cipher_id_cmp);
d455 1
d472 4
a475 2

	for (i=0; i<s->s2->key_material_length; i += EVP_MD_size(md5))
d477 1
a477 1
		if (((km - s->s2->key_material) + EVP_MD_size(md5)) >
d496 1
a496 1
		km += EVP_MD_size(md5);
@


1.12
log
@resolve conflicts
@
text
@a61 1
#include <openssl/rsa.h>
d66 1
a66 2
static long ssl2_default_timeout(void );
const char *ssl2_version_str="SSLv2" OPENSSL_VERSION_PTEXT;
d70 1
d87 13
d113 1
a113 1
/* RC4_128_WITH_MD5 */
d116 3
a118 3
	SSL2_TXT_RC4_128_WITH_MD5,
	SSL2_CK_RC4_128_WITH_MD5,
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_SSLV2,
a138 13
/* RC2_128_CBC_WITH_MD5 */
	{
	1,
	SSL2_TXT_RC2_128_CBC_WITH_MD5,
	SSL2_CK_RC2_128_CBC_WITH_MD5,
	SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_SSLV2,
	SSL_NOT_EXP|SSL_MEDIUM,
	0,
	128,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
d181 1
a181 1
#if 1
d214 1
a214 29
static SSL_METHOD SSLv2_data= {
	SSL2_VERSION,
	ssl2_new,	/* local */
	ssl2_clear,	/* local */
	ssl2_free,	/* local */
	ssl_undefined_function,
	ssl_undefined_function,
	ssl2_read,
	ssl2_peek,
	ssl2_write,
	ssl2_shutdown,
	ssl_ok,	/* NULL - renegotiate */
	ssl_ok,	/* NULL - check renegotiate */
	ssl2_ctrl,	/* local */
	ssl2_ctx_ctrl,	/* local */
	ssl2_get_cipher_by_char,
	ssl2_put_cipher_by_char,
	ssl2_pending,
	ssl2_num_ciphers,
	ssl2_get_cipher,
	ssl_bad_method,
	ssl2_default_timeout,
	&ssl3_undef_enc_method,
	ssl_undefined_function,
	ssl2_callback_ctrl,	/* local */
	ssl2_ctx_callback_ctrl,	/* local */
	};

static long ssl2_default_timeout(void)
d219 4
a222 4
SSL_METHOD *sslv2_base_method(void)
	{
	return(&SSLv2_data);
	}
d323 1
a323 1
long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)())
d333 1
a333 1
long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)())
d342 1
a342 3
	static int init=1;
	static SSL_CIPHER *sorted[SSL2_NUM_CIPHERS];
	SSL_CIPHER c,*cp= &c,**cpp;
a343 20
	int i;

	if (init)
		{
		CRYPTO_w_lock(CRYPTO_LOCK_SSL);

		if (init)
			{
			for (i=0; i<SSL2_NUM_CIPHERS; i++)
				sorted[i]= &(ssl2_ciphers[i]);

			qsort((char *)sorted,
				SSL2_NUM_CIPHERS,sizeof(SSL_CIPHER *),
				FP_ICC ssl_cipher_ptr_id_cmp);

			init=0;
			}
			
		CRYPTO_w_unlock(CRYPTO_LOCK_SSL);
		}
d348 6
a353 6
	cpp=(SSL_CIPHER **)OBJ_bsearch((char *)&cp,
		(char *)sorted,
		SSL2_NUM_CIPHERS,sizeof(SSL_CIPHER *),
		FP_ICC ssl_cipher_ptr_id_cmp);
	if ((cpp == NULL) || !(*cpp)->valid)
		return(NULL);
d355 1
a355 1
		return(*cpp);
d390 2
a391 1
 	if (s->session->master_key_length < 0 || s->session->master_key_length > sizeof s->session->master_key)
d399 2
a400 1
		if (((km - s->s2->key_material) + EVP_MD_size(md5)) > sizeof s->s2->key_material)
d411 1
a411 1
		    < sizeof s->session->master_key);
d450 1
a450 1
	OPENSSL_assert(error >= 0 && error <= sizeof buf);
@


1.11
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d266 1
a266 1
int ssl2_pending(SSL *s)
@


1.10
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d312 1
a312 1
	memset(s2,0,sizeof *s2);
d381 4
a384 2
		for (i=0; i<SSL2_NUM_CIPHERS; i++)
			sorted[i]= &(ssl2_ciphers[i]);
d386 3
a388 3
		qsort(  (char *)sorted,
			SSL2_NUM_CIPHERS,sizeof(SSL_CIPHER *),
			FP_ICC ssl_cipher_ptr_id_cmp);
d390 3
a393 1
		init=0;
d458 3
d499 1
a499 3
	if (error < 0 || error > sizeof buf) /* can't happen */
 		return;
  
@


1.9
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@a65 1
#include "ssl_locl.h"
d420 1
a420 1
void ssl2_generate_key_material(SSL *s)
d426 3
d436 8
a443 2
	die(s->s2->key_material_length <= sizeof s->s2->key_material);
	for (i=0; i<s->s2->key_material_length; i+=MD5_DIGEST_LENGTH)
d445 8
a452 1
		EVP_DigestInit_ex(&ctx,EVP_md5(), NULL);
a453 3
		die(s->session->master_key_length >= 0
		    && s->session->master_key_length
		    < sizeof s->session->master_key);
d460 1
a460 1
		km+=MD5_DIGEST_LENGTH;
d462 1
d464 1
d489 2
a490 1
	error=s->error;
d492 3
a494 1
	die(error >= 0 && error <= 3);
d496 1
@


1.8
log
@apply patches from OpenSSL Security Advisory [30 July 2002],
http://marc.theaimsgroup.com/?l=openssl-dev&m=102802395104110&w=2
@
text
@d81 2
a82 1
	SSL_EXPORT|SSL_EXP40,
d204 1
@


1.7
log
@do not propose IDEA cipher on SSL connection.  tested by beck
noticed by Sverre Froyen <sverre@@viewmark.com>
@
text
@d66 1
d432 1
d437 3
d475 1
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d140 1
d153 1
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d60 1
a60 1
#ifndef NO_SSL2
d64 1
d333 1
a333 1
long ssl2_ctrl(SSL *s, int cmd, long larg, char *parg)
d353 1
a353 1
long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, char *parg)
d419 1
a419 1
	MD5_CTX ctx;
d427 1
a427 1

d431 1
a431 1
		MD5_Init(&ctx);
d433 2
a434 2
		MD5_Update(&ctx,s->session->master_key,s->session->master_key_length);
		MD5_Update(&ctx,&c,1);
d436 3
a438 3
		MD5_Update(&ctx,s->s2->challenge,s->s2->challenge_length);
		MD5_Update(&ctx,s->s2->conn_id,s->s2->conn_id_length);
		MD5_Final(km,&ctx);
d441 1
d473 2
a474 1
	else if (i != s->error)
d476 5
a480 2
	/* else
		s->error=0; */
d488 1
a488 1
#else /* !NO_SSL2 */
@


1.5.4.1
log
@Pull in patch from current:
Fix (markus), errata 013:
apply patches from OpenSSL Security Advisory [30 July 2002],
http://marc.theaimsgroup.com/?l=openssl-dev&m=102802395104110&w=2
@
text
@a64 1
#include "ssl_locl.h"
a427 1
 	die(s->s2->key_material_length <= sizeof s->s2->key_material);
a431 3
 		die(s->session->master_key_length >= 0
 		    && s->session->master_key_length
 		    < sizeof s->session->master_key);
a465 1
	die(error >= 0 && error <= 3);
@


1.5.2.1
log
@Errata #030 (markus):
Fixes for the "OpenSSL Security Advisory [30 July 2002]"
@
text
@a64 1
#include "ssl_locl.h"
a427 1
 	die(s->s2->key_material_length <= sizeof s->s2->key_material);
a431 3
 		die(s->session->master_key_length >= 0
 		    && s->session->master_key_length
 		    < sizeof s->session->master_key);
a465 1
	die(error >= 0 && error <= 3);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d263 1
a263 1
	return(s->s2->ract_data_length);
d273 4
d279 2
d282 1
a282 1
		SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER+2)) == NULL) goto err;
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d270 1
a270 1
	if ((s2=Malloc(sizeof *s2)) == NULL) goto err;
d273 1
a273 1
	if ((s2->rbuf=Malloc(
d275 1
a275 1
	if ((s2->wbuf=Malloc(
d284 3
a286 3
		if (s2->wbuf != NULL) Free(s2->wbuf);
		if (s2->rbuf != NULL) Free(s2->rbuf);
		Free(s2);
d299 2
a300 2
	if (s2->rbuf != NULL) Free(s2->rbuf);
	if (s2->wbuf != NULL) Free(s2->wbuf);
d302 1
a302 1
	Free(s2);
d387 1
a387 1
		(int (*)())ssl_cipher_ptr_id_cmp);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d59 2
a60 1
#ifndef NO_RSA
a64 1
#include "ssl_locl.h"
d78 3
a80 1
	SSL_kRSA|SSL_aRSA|SSL_eNULL|SSL_MD5|SSL_EXP40|SSL_SSLV2,
d83 1
d91 2
a92 1
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_EXP40|SSL_SSLV2,
d94 2
d97 1
d104 2
a105 1
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_NOT_EXP|SSL_SSLV2|SSL_MEDIUM,
d107 2
d110 1
d117 2
a118 1
	SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_EXP40|SSL_SSLV2,
d120 2
d123 1
d130 2
a131 1
	SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_NOT_EXP|SSL_SSLV2|SSL_MEDIUM,
d133 2
d136 1
d143 2
a144 1
	SSL_kRSA|SSL_aRSA|SSL_IDEA|SSL_MD5|SSL_NOT_EXP|SSL_SSLV2|SSL_MEDIUM,
d146 2
d149 1
d156 2
a157 1
	SSL_kRSA|SSL_aRSA|SSL_DES|SSL_MD5|SSL_NOT_EXP|SSL_SSLV2|SSL_LOW,
d159 2
d162 1
d169 2
a170 1
	SSL_kRSA|SSL_aRSA|SSL_3DES|SSL_MD5|SSL_NOT_EXP|SSL_SSLV2|SSL_HIGH,
d172 2
d175 1
d183 2
a184 1
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_SSLV2|SSL_LOW,
d186 2
d189 1
d199 3
d203 1
d233 3
d268 1
a268 1
	SSL2_CTX *s2;
d270 2
a271 2
	if ((s2=(SSL2_CTX *)Malloc(sizeof(SSL2_CTX))) == NULL) goto err;
	memset(s2,0,sizeof(SSL2_CTX));
d273 1
a273 1
	if ((s2->rbuf=(unsigned char *)Malloc(
d275 1
a275 1
	if ((s2->wbuf=(unsigned char *)Malloc(
d293 1
a293 1
	SSL2_CTX *s2;
d301 1
a301 1
	memset(s2,0,sizeof(SSL2_CTX));
d308 1
a308 1
	SSL2_CTX *s2;
d316 1
a316 1
	memset(s2,0,sizeof(SSL2_CTX));
d341 5
d351 5
d427 1
a427 1
		MD5_Update(&ctx,(unsigned char *)&c,1);
d476 6
@


1.1
log
@Initial revision
@
text
@d59 1
d61 3
a63 2
#include "rsa.h"
#include "objects.h"
a65 2
#ifndef NOPROTO
static int ssl2_ok(SSL *s);
d67 1
a67 6
#else
static int ssl2_ok();
static long ssl2_default_timeout();
#endif

char *ssl2_version_str="SSLv2 part of SSLeay 0.9.0b 29-Jun-1998";
d71 1
a71 1
SSL_CIPHER ssl2_ciphers[]={
d78 1
a78 1
	SSL_kRSA|SSL_aRSA|SSL_eNULL|SSL_MD5|SSL_EXP|SSL_SSLV2,
d88 1
a88 1
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_EXP|SSL_SSLV2,
d106 1
a106 1
	SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_EXP|SSL_SSLV2,
d182 2
a183 1
	ssl2_ok,
d196 1
a196 1
static long ssl2_default_timeout()
d201 1
a201 1
SSL_METHOD *sslv2_base_method()
d206 1
a206 1
int ssl2_num_ciphers()
d211 1
a211 2
SSL_CIPHER *ssl2_get_cipher(u)
unsigned int u;
d219 1
a219 2
int ssl2_pending(s)
SSL *s;
d224 1
a224 2
int ssl2_new(s)
SSL *s;
d249 1
a249 2
void ssl2_free(s)
SSL *s;
d253 3
d264 1
a264 2
void ssl2_clear(s)
SSL *s;
d284 1
a284 5
long ssl2_ctrl(s,cmd,larg,parg)
SSL *s;
int cmd;
long larg;
char *parg;
d299 1
a299 5
long ssl2_ctx_ctrl(ctx,cmd,larg,parg)
SSL_CTX *ctx;
int cmd;
long larg;
char *parg;
d306 1
a306 2
SSL_CIPHER *ssl2_get_cipher_by_char(p)
unsigned char *p;
d316 1
a316 1
		init=0;
d324 3
d342 1
a342 3
int ssl2_put_cipher_by_char(c,p)
SSL_CIPHER *c;
unsigned char *p;
d357 1
a357 2
void ssl2_generate_key_material(s)
SSL *s;
d364 5
d384 1
a384 3
void ssl2_return_error(s,err)
SSL *s;
int err;
d396 1
a396 2
void ssl2_write_error(s)
SSL *s;
d398 1
a398 1
	char buf[3];
d419 1
a419 8
static int ssl2_ok(s)
SSL *s;
	{
	return(1);
	}

int ssl2_shutdown(s)
SSL *s;
d424 1
a424 1

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d59 3
a62 6
#ifndef OPENSSL_NO_SSL2
#include <stdio.h>
#include <openssl/rsa.h>
#include <openssl/objects.h>
#include <openssl/evp.h>
#include <openssl/md5.h>
d64 2
d67 6
a72 1
const char *ssl2_version_str="SSLv2" OPENSSL_VERSION_PTEXT;
d76 1
a76 1
OPENSSL_GLOBAL SSL_CIPHER ssl2_ciphers[]={
d83 1
a83 3
	SSL_kRSA|SSL_aRSA|SSL_eNULL|SSL_MD5|SSL_SSLV2,
	SSL_EXPORT|SSL_EXP40,
	0,
a85 1
	SSL_ALL_STRENGTHS,
d93 1
a93 2
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_SSLV2,
	SSL_EXPORT|SSL_EXP40,
a94 2
	40,
	128,
a95 1
	SSL_ALL_STRENGTHS,
d102 1
a102 2
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_SSLV2,
	SSL_NOT_EXP|SSL_MEDIUM,
a103 2
	128,
	128,
a104 1
	SSL_ALL_STRENGTHS,
d111 1
a111 2
	SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_SSLV2,
	SSL_EXPORT|SSL_EXP40,
a112 2
	40,
	128,
a113 1
	SSL_ALL_STRENGTHS,
d120 1
a120 2
	SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_SSLV2,
	SSL_NOT_EXP|SSL_MEDIUM,
a121 2
	128,
	128,
a122 1
	SSL_ALL_STRENGTHS,
d129 1
a129 2
	SSL_kRSA|SSL_aRSA|SSL_IDEA|SSL_MD5|SSL_SSLV2,
	SSL_NOT_EXP|SSL_MEDIUM,
a130 2
	128,
	128,
a131 1
	SSL_ALL_STRENGTHS,
d138 1
a138 2
	SSL_kRSA|SSL_aRSA|SSL_DES|SSL_MD5|SSL_SSLV2,
	SSL_NOT_EXP|SSL_LOW,
a139 2
	56,
	56,
a140 1
	SSL_ALL_STRENGTHS,
d147 1
a147 2
	SSL_kRSA|SSL_aRSA|SSL_3DES|SSL_MD5|SSL_SSLV2,
	SSL_NOT_EXP|SSL_HIGH,
a148 2
	168,
	168,
a149 1
	SSL_ALL_STRENGTHS,
d157 1
a157 2
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_SSLV2,
	SSL_NOT_EXP|SSL_LOW,
a158 2
	64,
	64,
a159 1
	SSL_ALL_STRENGTHS,
a168 3
	0,
	0,
	0,
a169 1
	SSL_ALL_STRENGTHS,
d187 1
a187 2
	ssl_ok,	/* NULL - renegotiate */
	ssl_ok,	/* NULL - check renegotiate */
a197 3
	ssl_undefined_function,
	ssl2_callback_ctrl,	/* local */
	ssl2_ctx_callback_ctrl,	/* local */
d200 1
a200 1
static long ssl2_default_timeout(void)
d205 1
a205 1
SSL_METHOD *sslv2_base_method(void)
d210 1
a210 1
int ssl2_num_ciphers(void)
d215 2
a216 1
SSL_CIPHER *ssl2_get_cipher(unsigned int u)
d224 2
a225 1
int ssl2_pending(SSL *s)
d227 1
a227 1
	return SSL_in_init(s) ? 0 : s->s2->ract_data_length;
d230 2
a231 1
int ssl2_new(SSL *s)
d233 1
a233 1
	SSL2_STATE *s2;
d235 2
a236 2
	if ((s2=OPENSSL_malloc(sizeof *s2)) == NULL) goto err;
	memset(s2,0,sizeof *s2);
d238 3
a240 5
#if SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER + 3 > SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER + 2
#  error "assertion failed"
#endif

	if ((s2->rbuf=OPENSSL_malloc(
a241 4
	/* wbuf needs one byte more because when using two-byte headers,
	 * we leave the first byte unused in do_ssl_write (s2_pkt.c) */
	if ((s2->wbuf=OPENSSL_malloc(
		SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER+3)) == NULL) goto err;
d249 3
a251 3
		if (s2->wbuf != NULL) OPENSSL_free(s2->wbuf);
		if (s2->rbuf != NULL) OPENSSL_free(s2->rbuf);
		OPENSSL_free(s2);
d256 2
a257 1
void ssl2_free(SSL *s)
d259 1
a259 4
	SSL2_STATE *s2;

	if(s == NULL)
	    return;
d262 4
a265 4
	if (s2->rbuf != NULL) OPENSSL_free(s2->rbuf);
	if (s2->wbuf != NULL) OPENSSL_free(s2->wbuf);
	memset(s2,0,sizeof *s2);
	OPENSSL_free(s2);
d269 2
a270 1
void ssl2_clear(SSL *s)
d272 1
a272 1
	SSL2_STATE *s2;
d280 1
a280 1
	memset(s2,0,sizeof *s2);
d290 5
a294 1
long ssl2_ctrl(SSL *s, int cmd, long larg, void *parg)
d309 5
a313 11
long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)())
	{
	return(0);
	}

long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
	{
	return(0);
	}

long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)())
d320 2
a321 1
SSL_CIPHER *ssl2_get_cipher_by_char(const unsigned char *p)
d331 1
a331 1
		CRYPTO_w_lock(CRYPTO_LOCK_SSL);
a338 3

		CRYPTO_w_unlock(CRYPTO_LOCK_SSL);
		init=0;
d347 1
a347 1
		FP_ICC ssl_cipher_ptr_id_cmp);
d354 3
a356 1
int ssl2_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
d371 2
a372 1
void ssl2_generate_key_material(SSL *s)
d375 1
a375 1
	EVP_MD_CTX ctx;
a378 5
#ifdef CHARSET_EBCDIC
	c = os_toascii['0']; /* Must be an ASCII '0', not EBCDIC '0',
				see SSLv2 docu */
#endif
	EVP_MD_CTX_init(&ctx);
d382 1
a382 1
		EVP_DigestInit_ex(&ctx,EVP_md5(), NULL);
d384 2
a385 2
		EVP_DigestUpdate(&ctx,s->session->master_key,s->session->master_key_length);
		EVP_DigestUpdate(&ctx,&c,1);
d387 3
a389 3
		EVP_DigestUpdate(&ctx,s->s2->challenge,s->s2->challenge_length);
		EVP_DigestUpdate(&ctx,s->s2->conn_id,s->s2->conn_id_length);
		EVP_DigestFinal_ex(&ctx,km,NULL);
a391 1
	EVP_MD_CTX_cleanup(&ctx);
d394 3
a396 1
void ssl2_return_error(SSL *s, int err)
d408 2
a409 1
void ssl2_write_error(SSL *s)
d411 1
a411 1
	unsigned char buf[3];
d426 1
a426 2
	else
		{
d428 3
d432 4
a435 4
		if (s->error == 0)
			if (s->msg_callback)
				s->msg_callback(1, s->version, 0, buf, 3, s, s->msg_callback_arg); /* ERROR */
		}
d438 2
a439 1
int ssl2_shutdown(SSL *s)
a443 1
#else /* !OPENSSL_NO_SSL2 */
a444 5
# if PEDANTIC
static void *dummy=&dummy;
# endif

#endif
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@a65 1
#include "cryptlib.h"
d80 1
a80 2
	SSL_EXPORT|SSL_EXP40|SSL_STRONG_NONE,
	0,
a199 1
	SSL_STRONG_NONE,
a428 1
	die(s->s2->key_material_length <= sizeof s->s2->key_material);
a432 3
		die(s->session->master_key_length >= 0
		    && s->session->master_key_length
		    < sizeof s->session->master_key);
a467 1
	die(error >= 0 && error <= 3);
@


1.1.1.4
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d419 1
a419 1
int ssl2_generate_key_material(SSL *s)
a424 3
	const EVP_MD *md5;

	md5 = EVP_md5();
d432 2
a433 8

 	if (s->session->master_key_length < 0 || s->session->master_key_length > sizeof s->session->master_key)
 		{
 		SSLerr(SSL_F_SSL2_GENERATE_KEY_MATERIAL, ERR_R_INTERNAL_ERROR);
 		return 0;
 		}

	for (i=0; i<s->s2->key_material_length; i += EVP_MD_size(md5))
d435 1
a435 8
		if (((km - s->s2->key_material) + EVP_MD_size(md5)) > sizeof s->s2->key_material)
			{
			/* EVP_DigestFinal_ex() below would write beyond buffer */
			SSLerr(SSL_F_SSL2_GENERATE_KEY_MATERIAL, ERR_R_INTERNAL_ERROR);
			return 0;
			}

		EVP_DigestInit_ex(&ctx, md5, NULL);
d437 3
d446 1
a446 1
		km += EVP_MD_size(md5);
a447 1

a448 1
	return 1;
d473 1
a473 2

	error=s->error; /* number of bytes left to write */
d475 1
a475 3
	if (error < 0 || error > sizeof buf) /* can't happen */
 		return;
  
a476 1

@


1.1.1.5
log
@import 0.9.7b (without idea and rc5)
@
text
@d311 1
a311 1
	OPENSSL_cleanse(s2,sizeof *s2);
d380 2
a381 4
		if (init)
			{
			for (i=0; i<SSL2_NUM_CIPHERS; i++)
				sorted[i]= &(ssl2_ciphers[i]);
d383 3
a385 3
			qsort((char *)sorted,
				SSL2_NUM_CIPHERS,sizeof(SSL_CIPHER *),
				FP_ICC ssl_cipher_ptr_id_cmp);
a386 3
			init=0;
			}
			
d388 1
a452 3
		OPENSSL_assert(s->session->master_key_length >= 0
		    && s->session->master_key_length
		    < sizeof s->session->master_key);
d491 3
a493 1
	OPENSSL_assert(error >= 0 && error <= sizeof buf);
@


1.1.1.6
log
@import openssl-0.9.7d
@
text
@d66 1
a141 1
#ifndef OPENSSL_NO_IDEA
a153 1
#endif
@


1.1.1.7
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d266 1
a266 1
int ssl2_pending(const SSL *s)
@


1.1.1.8
log
@import of OpenSSL 0.9.8h
@
text
@d62 1
d67 2
a68 1
const char ssl2_version_str[]="SSLv2" OPENSSL_VERSION_PTEXT;
a71 1
/* list of available SSLv2 ciphers (sorted by id) */
d88 13
d114 1
a114 1
/* RC4_128_EXPORT40_WITH_MD5 */
d117 3
a119 3
	SSL2_TXT_RC4_128_EXPORT40_WITH_MD5,
	SSL2_CK_RC4_128_EXPORT40_WITH_MD5,
	SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5|SSL_SSLV2,
a139 13
/* RC2_128_CBC_EXPORT40_WITH_MD5 */
	{
	1,
	SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5,
	SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5,
	SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5|SSL_SSLV2,
	SSL_EXPORT|SSL_EXP40,
	SSL2_CF_5_BYTE_ENC,
	40,
	128,
	SSL_ALL_CIPHERS,
	SSL_ALL_STRENGTHS,
	},
d182 1
a182 1
#if 0
d215 29
a243 1
long ssl2_default_timeout(void)
d248 4
a251 4
IMPLEMENT_ssl2_meth_func(sslv2_base_method,
			ssl_undefined_function,
			ssl_undefined_function,
			ssl_bad_method)
d352 1
a352 1
long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
d362 1
a362 1
long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
d371 3
a373 1
	SSL_CIPHER c,*cp;
d375 20
d399 6
a404 6
	cp = (SSL_CIPHER *)OBJ_bsearch((char *)&c,
		(char *)ssl2_ciphers,
		SSL2_NUM_CIPHERS,sizeof(SSL_CIPHER),
		FP_ICC ssl_cipher_id_cmp);
	if ((cp == NULL) || (cp->valid == 0))
		return NULL;
d406 1
a406 1
		return cp;
d441 1
a441 2
 	if (s->session->master_key_length < 0 ||
			s->session->master_key_length > (int)sizeof(s->session->master_key))
d449 1
a449 2
		if (((km - s->s2->key_material) + EVP_MD_size(md5)) >
				(int)sizeof(s->s2->key_material))
d460 1
a460 1
		    < (int)sizeof(s->session->master_key));
d499 1
a499 1
	OPENSSL_assert(error >= 0 && error <= (int)sizeof(buf));
@


1.1.1.9
log
@import OpenSSL-1.0.0a
@
text
@a57 53
/* ====================================================================
 * Copyright (c) 1998-2007 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
d71 2
a72 1
OPENSSL_GLOBAL const SSL_CIPHER ssl2_ciphers[]={
a73 1
/* NULL_WITH_MD5 v3 */
d78 1
a78 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_eNULL,
	SSL_MD5,
	SSL_SSLV2,
d83 2
a86 1

d92 1
a92 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV2,
d97 2
a99 1

d105 1
a105 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV2,
d110 2
a112 1

d118 1
a118 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC2,
	SSL_MD5,
	SSL_SSLV2,
d123 2
a125 1

d131 1
a131 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC2,
	SSL_MD5,
	SSL_SSLV2,
d136 2
d139 1
a139 1

a140 1
/* IDEA_128_CBC_WITH_MD5 */
d145 1
a145 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_IDEA,
	SSL_MD5,
	SSL_SSLV2,
d150 2
a153 1

d159 1
a159 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_DES,
	SSL_MD5,
	SSL_SSLV2,
d164 2
a166 1

d172 1
a172 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_3DES,
	SSL_MD5,
	SSL_SSLV2,
d177 2
d180 1
a180 1

a181 1
/* RC4_64_WITH_MD5 */
d186 1
a186 5
	SSL_kRSA,
	SSL_aRSA,
	SSL_RC4,
	SSL_MD5,
	SSL_SSLV2,
d191 2
d195 1
a195 1

a196 1
/* NULL SSLeay (testing) */
a201 4
	0,
	0,
	0,
	SSL_SSLV2,
d206 2
d219 5
d229 1
a229 1
const SSL_CIPHER *ssl2_get_cipher(unsigned int u)
d340 1
a340 1
const SSL_CIPHER *ssl2_get_cipher_by_char(const unsigned char *p)
d342 1
a342 2
	SSL_CIPHER c;
	const SSL_CIPHER *cp;
d348 4
a351 1
	cp = OBJ_bsearch_ssl_cipher_id(&c, ssl2_ciphers, SSL2_NUM_CIPHERS);
a379 1
	int md_size;
d396 2
a397 4
	md_size = EVP_MD_size(md5);
	if (md_size < 0)
	    return 0;
	for (i=0; i<s->s2->key_material_length; i += md_size)
d399 1
a399 1
		if (((km - s->s2->key_material) + md_size) >
d418 1
a418 1
		km += md_size;
@


