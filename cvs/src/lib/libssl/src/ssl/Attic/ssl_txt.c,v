head	1.27;
access;
symbols
	OPENBSD_6_0:1.26.0.8
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.6
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.4
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.24.0.4
	OPENBSD_5_6_BASE:1.24
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.6.0.12
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.10
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2016.09.03.11.33.41;	author beck;	state dead;
branches;
next	1.26;
commitid	HnbXxsegngek41U2;

1.26
date	2014.12.14.15.30.50;	author jsing;	state Exp;
branches;
next	1.25;
commitid	XNZawfRSWvnVv1VS;

1.25
date	2014.11.16.14.12.47;	author jsing;	state Exp;
branches;
next	1.24;
commitid	M3pvHgIFoWUHNqJn;

1.24
date	2014.07.12.19.45.53;	author jsing;	state Exp;
branches;
next	1.23;
commitid	foFDfYAdqxlf9LD4;

1.23
date	2014.07.11.09.24.44;	author beck;	state Exp;
branches;
next	1.22;
commitid	cCGiAdDteN08GytD;

1.22
date	2014.07.10.08.51.15;	author tedu;	state Exp;
branches;
next	1.21;
commitid	lsH7iukeZYSZBx6F;

1.21
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	mJUVYpkFBZ0Zv2bG;

1.20
date	2014.05.31.10.49.28;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2014.05.29.20.21.23;	author beck;	state Exp;
branches;
next	1.18;

1.18
date	2014.05.25.13.27.38;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.05.05.15.03.22;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.25.03.38.59;	author lteo;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.20.12.48.19;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.16.20.39.09;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.16.17.59.17;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.16.15.10.07;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.14.13.10.35;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.54;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.32;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.58.41;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.50;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.34;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.31;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.13;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.13;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.44;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.29;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.50;	author djm;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: ssl_txt.c,v 1.26 2014/12/14 15:30:50 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright 2005 Nokia. All rights reserved.
 *
 * The portions of the attached software ("Contribution") is developed by
 * Nokia Corporation and is licensed pursuant to the OpenSSL open source
 * license.
 *
 * The Contribution, originally written by Mika Kousa and Pasi Eronen of
 * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
 * support (see RFC 4279) to OpenSSL.
 *
 * No patent licenses or other rights except those expressly stated in
 * the OpenSSL open source license shall be deemed granted or received
 * expressly, by implication, estoppel, or otherwise.
 *
 * No assurances are provided by Nokia that the Contribution does not
 * infringe the patent or other intellectual property rights of any third
 * party or that the license provides you with all the necessary rights
 * to make use of the Contribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
 * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
 * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
 * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
 * OTHERWISE.
 */

#include <stdio.h>

#include <openssl/buffer.h>

#include "ssl_locl.h"

int
SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *x)
{
	BIO *b;
	int ret;

	if ((b = BIO_new(BIO_s_file_internal())) == NULL) {
		SSLerr(SSL_F_SSL_SESSION_PRINT_FP, ERR_R_BUF_LIB);
		return (0);
	}
	BIO_set_fp(b, fp, BIO_NOCLOSE);
	ret = SSL_SESSION_print(b, x);
	BIO_free(b);
	return (ret);
}

int
SSL_SESSION_print(BIO *bp, const SSL_SESSION *x)
{
	unsigned int i;
	const char *s;

	if (x == NULL)
		goto err;
	if (BIO_puts(bp, "SSL-Session:\n") <= 0)
		goto err;

	s = ssl_version_string(x->ssl_version);
	if (BIO_printf(bp, "    Protocol  : %s\n", s) <= 0)
		goto err;

	if (x->cipher == NULL) {
		if (((x->cipher_id) & 0xff000000) == 0x02000000) {
			if (BIO_printf(bp, "    Cipher    : %06lX\n", x->cipher_id&0xffffff) <= 0)
				goto err;
		} else {
			if (BIO_printf(bp, "    Cipher    : %04lX\n", x->cipher_id&0xffff) <= 0)
				goto err;
		}
	} else {
		if (BIO_printf(bp, "    Cipher    : %s\n",((x->cipher == NULL)?"unknown":x->cipher->name)) <= 0)
			goto err;
	}
	if (BIO_puts(bp, "    Session-ID: ") <= 0)
		goto err;
	for (i = 0; i < x->session_id_length; i++) {
		if (BIO_printf(bp, "%02X", x->session_id[i]) <= 0)
			goto err;
	}
	if (BIO_puts(bp, "\n    Session-ID-ctx: ") <= 0)
		goto err;
	for (i = 0; i < x->sid_ctx_length; i++) {
		if (BIO_printf(bp, "%02X", x->sid_ctx[i]) <= 0)
			goto err;
	}
	if (BIO_puts(bp, "\n    Master-Key: ") <= 0)
		goto err;
	for (i = 0; i < (unsigned int)x->master_key_length; i++) {
		if (BIO_printf(bp, "%02X", x->master_key[i]) <= 0)
			goto err;
	}
	if (x->tlsext_tick_lifetime_hint) {
		if (BIO_printf(bp,
		    "\n    TLS session ticket lifetime hint: %ld (seconds)",
		    x->tlsext_tick_lifetime_hint) <= 0)
			goto err;
	}
	if (x->tlsext_tick) {
		if (BIO_puts(bp, "\n    TLS session ticket:\n") <= 0)
			goto err;
		if (BIO_dump_indent(bp, (char *)x->tlsext_tick, x->tlsext_ticklen, 4) <= 0)
			goto err;
	}

	if (x->time != 0) {
		if (BIO_printf(bp, "\n    Start Time: %lld", (long long)x->time) <= 0)
			goto err;
	}
	if (x->timeout != 0L) {
		if (BIO_printf(bp, "\n    Timeout   : %ld (sec)", x->timeout) <= 0)
			goto err;
	}
	if (BIO_puts(bp, "\n") <= 0)
		goto err;

	if (BIO_puts(bp, "    Verify return code: ") <= 0)
		goto err;

	if (BIO_printf(bp, "%ld (%s)\n", x->verify_result,
	    X509_verify_cert_error_string(x->verify_result)) <= 0)
		goto err;

	return (1);
err:
	return (0);
}

@


1.26
log
@Remove trailing whitespace.
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_txt.c,v 1.25 2014/11/16 14:12:47 jsing Exp $ */
@


1.25
log
@Sort and group includes.
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_txt.c,v 1.24 2014/07/12 19:45:53 jsing Exp $ */
d117 1
a117 1
	
@


1.24
log
@Provide ssl_version_string() function, which uses one of those modern C
constructs (a switch statement) and returns the appropriate string defined
by SSL_TXT_* for the given version, including support for DTLSv1 and
DTLSv1-bad. Use this function in SSL_get_version() and SSL_SESSION_print().

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_txt.c,v 1.23 2014/07/11 09:24:44 beck Exp $ */
d86 1
d88 1
@


1.23
log
@Remove the PSK code. We don't need to drag around this
baggage.
ok miod@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_txt.c,v 1.22 2014/07/10 08:51:15 tedu Exp $ */
d115 2
a116 14
	if (x->ssl_version == SSL3_VERSION)
		s = "SSLv3";
	else if (x->ssl_version == TLS1_2_VERSION)
		s = "TLSv1.2";
	else if (x->ssl_version == TLS1_1_VERSION)
		s = "TLSv1.1";
	else if (x->ssl_version == TLS1_VERSION)
		s = "TLSv1";
	else if (x->ssl_version == DTLS1_VERSION)
		s = "DTLSv1";
	else if (x->ssl_version == DTLS1_BAD_VER)
		s = "DTLSv1-bad";
	else
		s = "unknown";
@


1.22
log
@decompress libssl. ok beck jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_txt.c,v 1.21 2014/06/12 15:49:31 deraadt Exp $ */
a161 10
#ifndef OPENSSL_NO_PSK
	if (BIO_puts(bp, "\n    PSK identity: ") <= 0)
		goto err;
	if (BIO_printf(bp, "%s", x->psk_identity ? x->psk_identity : "None") <= 0)
		goto err;
	if (BIO_puts(bp, "\n    PSK identity hint: ") <= 0)
		goto err;
	if (BIO_printf(bp, "%s", x->psk_identity_hint ? x->psk_identity_hint : "None") <= 0)
		goto err;
#endif
@


1.21
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a184 16
#ifndef OPENSSL_NO_COMP
	if (x->compress_meth != 0) {
		SSL_COMP *comp = NULL;

		if (!ssl_cipher_get_comp(x, &comp))
			goto err;

		if (comp == NULL) {
			if (BIO_printf(bp, "\n    Compression: %d", x->compress_meth) <= 0)
				goto err;
		} else {
			if (BIO_printf(bp, "\n    Compression: %d (%s)", comp->id, comp->method->name) <= 0)
				goto err;
		}
	}
#endif
@


1.20
log
@TLS would not be entirely functional without extensions, so unifdef
OPENSSL_NO_TLSEXT.

ok tedu@@
@
text
@d1 1
a1 1
/* ssl/ssl_txt.c */
@


1.19
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@a171 1
#ifndef OPENSSL_NO_TLSEXT
a183 1
#endif
@


1.18
log
@The ssl_ciper_get_evp() function is currently overloaded to also return the
compression associated with the SSL session. Based on one of Adam Langley's
chromium diffs, factor out the compression handling code into a separate
ssl_cipher_get_comp() function.

Rewrite the compression handling code to avoid pointless duplication and so
that failures are actually returned to and detectable by the caller.

ok miod@@
@
text
@a88 1
#ifndef OPENSSL_NO_FP_API
a103 1
#endif
@


1.17
log
@Remove SRP and Kerberos support from libssl. These are complex protocols
all on their own and we can't effectively maintain them without using them,
which we don't. If the need arises, the code can be resurrected.
@
text
@d193 3
a195 1
		ssl_cipher_get_evp(x, NULL, NULL, NULL, NULL, &comp);
@


1.16
log
@KNF fixes
@
text
@a163 13
#ifndef OPENSSL_NO_KRB5
	if (BIO_puts(bp, "\n    Krb5 Principal: ") <= 0)
		goto err;
	if (x->krb5_client_princ_len == 0) {
		if (BIO_puts(bp, "None") <= 0)
			goto err;
	} else {
		for (i = 0; i < x->krb5_client_princ_len; i++) {
			if (BIO_printf(bp, "%02X", x->krb5_client_princ[i]) <= 0)
				goto err;
		}
	}
#endif /* OPENSSL_NO_KRB5 */
a171 6
		goto err;
#endif
#ifndef OPENSSL_NO_SRP
	if (BIO_puts(bp, "\n    SRP username: ") <= 0)
		goto err;
	if (BIO_printf(bp, "%s", x->srp_username ? x->srp_username : "None") <= 0)
@


1.15
log
@Chop off more SSLv2 tentacles and start fixing and noting y2038 issues.
APIs that pass times as longs will have to change at some point...
Bump major on both libcrypto and libssl.

ok tedu@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d115 2
a116 2
	if (BIO_puts(bp, "SSL-Session:\n")
		<= 0) goto err;
d118 1
a118 1
		s="SSLv3";
d120 1
a120 1
		s="TLSv1.2";
d122 1
a122 1
		s="TLSv1.1";
d124 1
a124 1
		s="TLSv1";
d126 1
a126 1
		s="DTLSv1";
d128 1
a128 1
		s="DTLSv1-bad";
d130 3
a132 3
		s="unknown";
	if (BIO_printf(bp, "    Protocol  : %s\n", s)
		<= 0) goto err;
d146 2
a147 2
	if (BIO_puts(bp, "    Session-ID: ")
		<= 0) goto err;
d149 2
a150 2
		if (BIO_printf(bp, "%02X", x->session_id[i])
			<= 0) goto err;
d152 2
a153 2
	if (BIO_puts(bp, "\n    Session-ID-ctx: ")
		<= 0) goto err;
d158 2
a159 2
	if (BIO_puts(bp, "\n    Master-Key: ")
		<= 0) goto err;
d161 2
a162 2
		if (BIO_printf(bp, "%02X", x->master_key[i])
			<= 0) goto err;
d165 2
a166 2
	if (BIO_puts(bp, "\n    Krb5 Principal: ")
		<= 0) goto err;
d168 3
a170 3
		if (BIO_puts(bp, "None")
			<= 0) goto err;
	} else
d172 3
a174 2
		if (BIO_printf(bp, "%02X", x->krb5_client_princ[i])
			<= 0) goto err;
d178 8
a185 8
	if (BIO_puts(bp, "\n    PSK identity: ")
		<= 0) goto err;
	if (BIO_printf(bp, "%s", x->psk_identity ? x->psk_identity : "None")
		<= 0) goto err;
	if (BIO_puts(bp, "\n    PSK identity hint: ")
		<= 0) goto err;
	if (BIO_printf(bp, "%s", x->psk_identity_hint ? x->psk_identity_hint : "None")
		<= 0) goto err;
d188 4
a191 4
	if (BIO_puts(bp, "\n    SRP username: ")
		<= 0) goto err;
	if (BIO_printf(bp, "%s", x->srp_username ? x->srp_username : "None")
		<= 0) goto err;
d196 3
a198 3
			"\n    TLS session ticket lifetime hint: %ld (seconds)",
		x->tlsext_tick_lifetime_hint) <=0)
		goto err;
d201 2
a202 2
		if (BIO_puts(bp, "\n    TLS session ticket:\n")
			<= 0) goto err;
d214 2
a215 2
			if (BIO_printf(bp, "\n    Compression: %d", x->compress_meth)
				<= 0) goto err;
d217 3
a219 2
			if (BIO_printf(bp, "\n    Compression: %d (%s)", comp->id, comp->method->name) <= 0) goto err;
			}
d223 2
a224 2
		if (BIO_printf(bp, "\n    Start Time: %lld", (long long)x->time)
			<= 0) goto err;
d227 8
a234 4
		if (BIO_printf(bp, "\n    Timeout   : %ld (sec)", x->timeout) <= 0) goto err;
		}
	if (BIO_puts(bp, "\n")
		<= 0) goto err;
a235 2
	if (BIO_puts(bp, "    Verify return code: ")
		<= 0) goto err;
d237 2
a238 1
		X509_verify_cert_error_string(x->verify_result)) <= 0) goto err;
@


1.14
log
@add back SRP. i was being too greedy.
@
text
@a163 10
	if (BIO_puts(bp, "\n    Key-Arg   : ")
		<= 0) goto err;
	if (x->key_arg_length == 0) {
		if (BIO_puts(bp, "None")
			<= 0) goto err;
	} else
		for (i = 0; i < x->key_arg_length; i++) {
		if (BIO_printf(bp, "%02X", x->key_arg[i])
			<= 0) goto err;
	}
d220 2
a221 2
	if (x->time != 0L) {
		if (BIO_printf(bp, "\n    Start Time: %ld", x->time)
@


1.13
log
@disentangle SRP code from TLS
@
text
@d196 6
@


1.12
log
@Kill the bogus "send an SSLv3/TLS hello in SSLv2 format" crap from
the SSLv23_* client code.  The server continues to accept it.  It
also kills the bits for SSL2 SESSIONs; even when the server gets
an SSLv2-style compat handshake, the session that it creates has
the correct version internally.

ok tedu@@ beck@@
@
text
@a195 6
#ifndef OPENSSL_NO_SRP
	if (BIO_puts(bp, "\n    SRP username: ")
		<= 0) goto err;
	if (BIO_printf(bp, "%s", x->srp_username ? x->srp_username : "None")
		<= 0) goto err;
#endif
@


1.11
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d117 1
a117 3
	if (x->ssl_version == SSL2_VERSION)
		s="SSLv2";
	else if (x->ssl_version == SSL3_VERSION)
@


1.10
log
@resolve conflicts
@
text
@d90 3
a92 2
int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *x)
	{
d96 6
a101 7
	if ((b=BIO_new(BIO_s_file_internal())) == NULL)
		{
		SSLerr(SSL_F_SSL_SESSION_PRINT_FP,ERR_R_BUF_LIB);
		return(0);
		}
	BIO_set_fp(b,fp,BIO_NOCLOSE);
	ret=SSL_SESSION_print(b,x);
d103 2
a104 2
	return(ret);
	}
d107 3
a109 2
int SSL_SESSION_print(BIO *bp, const SSL_SESSION *x)
	{
d113 4
a116 2
	if (x == NULL) goto err;
	if (BIO_puts(bp,"SSL-Session:\n") <= 0) goto err;
d133 2
a134 1
	if (BIO_printf(bp,"    Protocol  : %s\n",s) <= 0) goto err;
d136 3
a138 5
	if (x->cipher == NULL)
		{
		if (((x->cipher_id) & 0xff000000) == 0x02000000)
			{
			if (BIO_printf(bp,"    Cipher    : %06lX\n",x->cipher_id&0xffffff) <= 0)
d140 2
a141 4
			}
		else
			{
			if (BIO_printf(bp,"    Cipher    : %04lX\n",x->cipher_id&0xffff) <= 0)
a142 1
			}
d144 2
a145 3
	else
		{
		if (BIO_printf(bp,"    Cipher    : %s\n",((x->cipher == NULL)?"unknown":x->cipher->name)) <= 0)
d147 11
a157 10
		}
	if (BIO_puts(bp,"    Session-ID: ") <= 0) goto err;
	for (i=0; i<x->session_id_length; i++)
		{
		if (BIO_printf(bp,"%02X",x->session_id[i]) <= 0) goto err;
		}
	if (BIO_puts(bp,"\n    Session-ID-ctx: ") <= 0) goto err;
	for (i=0; i<x->sid_ctx_length; i++)
		{
		if (BIO_printf(bp,"%02X",x->sid_ctx[i]) <= 0)
d159 17
a175 16
		}
	if (BIO_puts(bp,"\n    Master-Key: ") <= 0) goto err;
	for (i=0; i<(unsigned int)x->master_key_length; i++)
		{
		if (BIO_printf(bp,"%02X",x->master_key[i]) <= 0) goto err;
		}
	if (BIO_puts(bp,"\n    Key-Arg   : ") <= 0) goto err;
	if (x->key_arg_length == 0)
		{
		if (BIO_puts(bp,"None") <= 0) goto err;
		}
	else
		for (i=0; i<x->key_arg_length; i++)
			{
			if (BIO_printf(bp,"%02X",x->key_arg[i]) <= 0) goto err;
			}
d177 10
a186 10
       if (BIO_puts(bp,"\n    Krb5 Principal: ") <= 0) goto err;
            if (x->krb5_client_princ_len == 0)
            {
		if (BIO_puts(bp,"None") <= 0) goto err;
		}
	else
		for (i=0; i<x->krb5_client_princ_len; i++)
			{
			if (BIO_printf(bp,"%02X",x->krb5_client_princ[i]) <= 0) goto err;
			}
d189 8
a196 4
	if (BIO_puts(bp,"\n    PSK identity: ") <= 0) goto err;
	if (BIO_printf(bp, "%s", x->psk_identity ? x->psk_identity : "None") <= 0) goto err;
	if (BIO_puts(bp,"\n    PSK identity hint: ") <= 0) goto err;
	if (BIO_printf(bp, "%s", x->psk_identity_hint ? x->psk_identity_hint : "None") <= 0) goto err;
d199 4
a202 2
	if (BIO_puts(bp,"\n    SRP username: ") <= 0) goto err;
	if (BIO_printf(bp, "%s", x->srp_username ? x->srp_username : "None") <= 0) goto err;
d205 1
a205 2
	if (x->tlsext_tick_lifetime_hint)
		{
d208 6
a213 6
			x->tlsext_tick_lifetime_hint) <=0)
			goto err;
		}
	if (x->tlsext_tick)
		{
		if (BIO_puts(bp, "\n    TLS session ticket:\n") <= 0) goto err;
d216 1
a216 1
		}
d220 1
a220 2
	if (x->compress_meth != 0)
		{
d223 6
a228 4
		ssl_cipher_get_evp(x,NULL,NULL,NULL,NULL,&comp);
		if (comp == NULL)
			{
			if (BIO_printf(bp,"\n    Compression: %d",x->compress_meth) <= 0) goto err;
d230 1
a230 5
		else
			{
			if (BIO_printf(bp,"\n    Compression: %d (%s)", comp->id,comp->method->name) <= 0) goto err;
			}
		}	
d232 6
a237 7
	if (x->time != 0L)
		{
		if (BIO_printf(bp, "\n    Start Time: %ld",x->time) <= 0) goto err;
		}
	if (x->timeout != 0L)
		{
		if (BIO_printf(bp, "\n    Timeout   : %ld (sec)",x->timeout) <= 0) goto err;
d239 2
a240 1
	if (BIO_puts(bp,"\n") <= 0) goto err;
d242 2
a243 1
	if (BIO_puts(bp, "    Verify return code: ") <= 0) goto err;
d246 2
a247 2
		
	return(1);
d249 2
a250 2
	return(0);
	}
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d118 4
d193 4
@


1.8
log
@resolve conflicts
@
text
@d58 26
d120 4
d184 6
d205 1
d211 1
a211 1
		ssl_cipher_get_evp(x,NULL,NULL,&comp);
d214 1
a214 1
			if (BIO_printf(bp,"\n   Compression: %d",x->compress_meth) <= 0) goto err;
d218 1
a218 1
			if (BIO_printf(bp,"\n   Compression: %d (%s)", comp->id,comp->method->name) <= 0) goto err;
@


1.7
log
@resolve conflicts
@
text
@d84 1
a84 1
	char *s;
d154 16
d172 1
a172 1
		SSL_COMP *comp;
d184 1
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d64 1
a64 1
int SSL_SESSION_print_fp(FILE *fp, SSL_SESSION *x)
d81 1
a81 1
int SSL_SESSION_print(BIO *bp, SSL_SESSION *x)
@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@d63 1
a63 1
#ifndef NO_FP_API
d142 12
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d84 1
a84 1
	char str[128],*s;
d96 1
a96 2
	sprintf(str,"    Protocol  : %s\n",s);
	if (BIO_puts(bp,str) <= 0) goto err;
d101 4
a104 1
			sprintf(str,"    Cipher    : %06lX\n",x->cipher_id&0xffffff);
d106 4
a109 1
			sprintf(str,"    Cipher    : %04lX\n",x->cipher_id&0xffff);
d112 4
a115 2
		sprintf(str,"    Cipher    : %s\n",(x->cipher == NULL)?"unknown":x->cipher->name);
	if (BIO_puts(bp,str) <= 0) goto err;
d119 1
a119 2
		sprintf(str,"%02X",x->session_id[i]);
		if (BIO_puts(bp,str) <= 0) goto err;
d124 2
a125 2
		sprintf(str,"%02X",x->sid_ctx[i]);
		if (BIO_puts(bp,str) <= 0) goto err;
d130 1
a130 2
		sprintf(str,"%02X",x->master_key[i]);
		if (BIO_puts(bp,str) <= 0) goto err;
d140 1
a140 2
			sprintf(str,"%02X",x->key_arg[i]);
			if (BIO_puts(bp,str) <= 0) goto err;
d149 1
a149 2
			sprintf(str,"\n   Compression: %d",x->compress_meth);
			if (BIO_puts(bp,str) <= 0) goto err;
d153 1
a153 3
			sprintf(str,"\n   Compression: %d (%s)",
				comp->id,comp->method->name);
			if (BIO_puts(bp,str) <= 0) goto err;
d158 1
a158 2
		sprintf(str,"\n    Start Time: %ld",x->time);
		if (BIO_puts(bp,str) <= 0) goto err;
d162 1
a162 2
		sprintf(str,"\n    Timeout   : %ld (sec)",x->timeout);
		if (BIO_puts(bp,str) <= 0) goto err;
d167 2
a168 3
	sprintf(str, "%ld (%s)\n", x->verify_result, 
			X509_verify_cert_error_string(x->verify_result));
	if (BIO_puts(bp,str) <= 0) goto err;
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d167 1
a167 1
	if (BIO_puts(bp, "    Verify return code ") <= 0) goto err;
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d115 1
a115 1
	if (BIO_puts(bp,"\nSession-ID-ctx: ") <= 0) goto err;
d166 5
@


1.1
log
@Initial revision
@
text
@d60 1
a60 1
#include "buffer.h"
d64 4
a67 6
int SSL_SESSION_print_fp(fp, x)
FILE *fp;
SSL_SESSION *x;
        {
        BIO *b;
        int ret;
d69 1
a69 1
        if ((b=BIO_new(BIO_s_file_internal())) == NULL)
d72 1
a72 1
                return(0);
d74 5
a78 5
        BIO_set_fp(b,fp,BIO_NOCLOSE);
        ret=SSL_SESSION_print(b,x);
        BIO_free(b);
        return(ret);
        }
d81 1
a81 3
int SSL_SESSION_print(bp,x)
BIO *bp;
SSL_SESSION *x;
d83 1
a83 1
	int i;
d110 1
a110 1
	for (i=0; i<(int)x->session_id_length; i++)
d115 6
d122 1
a122 1
	for (i=0; i<(int)x->master_key_length; i++)
d133 1
a133 1
		for (i=0; i<(int)x->key_arg_length; i++)
d138 17
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d60 1
a60 1
#include <openssl/buffer.h>
d63 7
a69 5
#ifndef OPENSSL_NO_FP_API
int SSL_SESSION_print_fp(FILE *fp, SSL_SESSION *x)
	{
	BIO *b;
	int ret;
d71 1
a71 1
	if ((b=BIO_new(BIO_s_file_internal())) == NULL)
d74 1
a74 1
		return(0);
d76 5
a80 5
	BIO_set_fp(b,fp,BIO_NOCLOSE);
	ret=SSL_SESSION_print(b,x);
	BIO_free(b);
	return(ret);
	}
d83 3
a85 1
int SSL_SESSION_print(BIO *bp, SSL_SESSION *x)
d87 2
a88 2
	unsigned int i;
	char *s;
d100 2
a101 1
	if (BIO_printf(bp,"    Protocol  : %s\n",s) <= 0) goto err;
d106 1
a106 4
			{
			if (BIO_printf(bp,"    Cipher    : %06lX\n",x->cipher_id&0xffffff) <= 0)
				goto err;
			}
d108 1
a108 4
			{
			if (BIO_printf(bp,"    Cipher    : %04lX\n",x->cipher_id&0xffff) <= 0)
				goto err;
			}
d111 2
a112 4
		{
		if (BIO_printf(bp,"    Cipher    : %s\n",((x->cipher == NULL)?"unknown":x->cipher->name)) <= 0)
			goto err;
		}
d114 1
a114 6
	for (i=0; i<x->session_id_length; i++)
		{
		if (BIO_printf(bp,"%02X",x->session_id[i]) <= 0) goto err;
		}
	if (BIO_puts(bp,"\n    Session-ID-ctx: ") <= 0) goto err;
	for (i=0; i<x->sid_ctx_length; i++)
d116 2
a117 2
		if (BIO_printf(bp,"%02X",x->sid_ctx[i]) <= 0)
			goto err;
d120 1
a120 1
	for (i=0; i<(unsigned int)x->master_key_length; i++)
d122 2
a123 1
		if (BIO_printf(bp,"%02X",x->master_key[i]) <= 0) goto err;
d131 1
a131 12
		for (i=0; i<x->key_arg_length; i++)
			{
			if (BIO_printf(bp,"%02X",x->key_arg[i]) <= 0) goto err;
			}
#ifndef OPENSSL_NO_KRB5
       if (BIO_puts(bp,"\n    Krb5 Principal: ") <= 0) goto err;
            if (x->krb5_client_princ_len == 0)
            {
		if (BIO_puts(bp,"None") <= 0) goto err;
		}
	else
		for (i=0; i<x->krb5_client_princ_len; i++)
d133 2
a134 1
			if (BIO_printf(bp,"%02X",x->krb5_client_princ[i]) <= 0) goto err;
a135 15
#endif /* OPENSSL_NO_KRB5 */
	if (x->compress_meth != 0)
		{
		SSL_COMP *comp;

		ssl_cipher_get_evp(x,NULL,NULL,&comp);
		if (comp == NULL)
			{
			if (BIO_printf(bp,"\n   Compression: %d",x->compress_meth) <= 0) goto err;
			}
		else
			{
			if (BIO_printf(bp,"\n   Compression: %d (%s)", comp->id,comp->method->name) <= 0) goto err;
			}
		}	
d138 2
a139 1
		if (BIO_printf(bp, "\n    Start Time: %ld",x->time) <= 0) goto err;
d143 2
a144 1
		if (BIO_printf(bp, "\n    Timeout   : %ld (sec)",x->timeout) <= 0) goto err;
a146 4

	if (BIO_puts(bp, "    Verify return code: ") <= 0) goto err;
	if (BIO_printf(bp, "%ld (%s)\n", x->verify_result,
		X509_verify_cert_error_string(x->verify_result)) <= 0) goto err;
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d64 1
a64 1
int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *x)
d81 1
a81 1
int SSL_SESSION_print(BIO *bp, const SSL_SESSION *x)
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d84 1
a84 1
	const char *s;
a153 16
#ifndef OPENSSL_NO_TLSEXT
	if (x->tlsext_tick_lifetime_hint)
		{
		if (BIO_printf(bp,
			"\n    TLS session ticket lifetime hint: %ld (seconds)",
			x->tlsext_tick_lifetime_hint) <=0)
			goto err;
		}
	if (x->tlsext_tick)
		{
		if (BIO_puts(bp, "\n    TLS session ticket:\n") <= 0) goto err;
		if (BIO_dump_indent(bp, (char *)x->tlsext_tick, x->tlsext_ticklen, 4) <= 0)
			goto err;
		}
#endif
#ifndef OPENSSL_NO_COMP
d156 1
a156 1
		SSL_COMP *comp = NULL;
a167 1
#endif
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a57 26
/* ====================================================================
 * Copyright 2005 Nokia. All rights reserved.
 *
 * The portions of the attached software ("Contribution") is developed by
 * Nokia Corporation and is licensed pursuant to the OpenSSL open source
 * license.
 *
 * The Contribution, originally written by Mika Kousa and Pasi Eronen of
 * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
 * support (see RFC 4279) to OpenSSL.
 *
 * No patent licenses or other rights except those expressly stated in
 * the OpenSSL open source license shall be deemed granted or received
 * expressly, by implication, estoppel, or otherwise.
 *
 * No assurances are provided by Nokia that the Contribution does not
 * infringe the patent or other intellectual property rights of any third
 * party or that the license provides you with all the necessary rights
 * to make use of the Contribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
 * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
 * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
 * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
 * OTHERWISE.
 */
a93 4
	else if (x->ssl_version == DTLS1_VERSION)
		s="DTLSv1";
	else if (x->ssl_version == DTLS1_BAD_VER)
		s="DTLSv1-bad";
a153 6
#ifndef OPENSSL_NO_PSK
	if (BIO_puts(bp,"\n    PSK identity: ") <= 0) goto err;
	if (BIO_printf(bp, "%s", x->psk_identity ? x->psk_identity : "None") <= 0) goto err;
	if (BIO_puts(bp,"\n    PSK identity hint: ") <= 0) goto err;
	if (BIO_printf(bp, "%s", x->psk_identity_hint ? x->psk_identity_hint : "None") <= 0) goto err;
#endif
a168 1

d174 1
a174 1
		ssl_cipher_get_evp(x,NULL,NULL,NULL,NULL,&comp);
d177 1
a177 1
			if (BIO_printf(bp,"\n    Compression: %d",x->compress_meth) <= 0) goto err;
d181 1
a181 1
			if (BIO_printf(bp,"\n    Compression: %d (%s)", comp->id,comp->method->name) <= 0) goto err;
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@a117 4
	else if (x->ssl_version == TLS1_2_VERSION)
		s="TLSv1.2";
	else if (x->ssl_version == TLS1_1_VERSION)
		s="TLSv1.1";
a188 4
#endif
#ifndef OPENSSL_NO_SRP
	if (BIO_puts(bp,"\n    SRP username: ") <= 0) goto err;
	if (BIO_printf(bp, "%s", x->srp_username ? x->srp_username : "None") <= 0) goto err;
@


