head	1.22;
access;
symbols
	butholakala:1.18
	openssl_1_0_1_g:1.1.1.12
	OPENBSD_5_5:1.17.0.8
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	openssl_1_0_1_c:1.1.1.11
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.8
	openssl_1_0_0_f:1.1.1.11
	openssl_1_0_0_e:1.1.1.11
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	openssh_1_0_0_a:1.1.1.11
	OPENBSD_4_8:1.15.0.8
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.4
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.6
	OPENBSD_4_6_BASE:1.15
	openssl_0_9_8_k:1.1.1.10
	OPENBSD_4_5:1.15.0.2
	OPENBSD_4_5_BASE:1.15
	openssl_0_9_8_j:1.1.1.10
	openssl_0_9_8_h:1.1.1.9
	pre_openssl_0_9_8h:1.13
	OPENBSD_4_4:1.13.0.8
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.6
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.4
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	openssl_0_9_7j:1.1.1.8
	openssl:1.1.1
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENSSL_0_9_7G:1.1.1.7
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENSSL_0_9_7D:1.1.1.6
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENSSL_0_9_7C:1.1.1.5
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENSSL_0_9_7B:1.1.1.5
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.4
	OPENSSL_0_9_7_BETA3:1.1.1.3
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2014.04.15.21.47.56;	author tedu;	state dead;
branches;
next	1.21;

1.21
date	2014.04.14.17.45.38;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.14.15.37.01;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.13.21.11.19;	author mpi;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2013.02.14.15.11.43;	author markus;	state Exp;
branches;
next	1.16;

1.16
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.04.07.10.32;	author pvalchev;	state Exp;
branches
	1.13.6.1
	1.13.8.1;
next	1.12;

1.12
date	2006.06.27.05.07.03;	author djm;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2005.04.29.05.39.31;	author djm;	state Exp;
branches
	1.11.2.1
	1.11.4.1;
next	1.10;

1.10
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.10.16.31.57;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.30.11.08.05;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.03.39;	author beck;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2000.12.15.02.58.36;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.27;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.26;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.11;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.11;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.32;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.43.58;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.09.12.20.52.27;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.05.11.21.36.37;	author markus;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.20.42.05;	author markus;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.04.29.05.37.27;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.06.27.05.05.39;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.01.09.12.14.06;	author djm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.04.13.15.16.36;	author miod;	state Exp;
branches;
next	;

1.5.2.1
date	2002.07.30.11.07.33;	author miod;	state Exp;
branches;
next	;

1.5.4.1
date	2002.07.30.15.47.52;	author jason;	state Exp;
branches;
next	;

1.11.2.1
date	2006.10.05.18.42.22;	author brad;	state Exp;
branches;
next	;

1.11.4.1
date	2006.10.05.17.36.24;	author brad;	state Exp;
branches;
next	;

1.12.2.1
date	2006.11.02.19.56.23;	author brad;	state Exp;
branches;
next	;

1.13.6.1
date	2009.01.09.11.40.50;	author djm;	state Exp;
branches;
next	;

1.13.8.1
date	2009.01.09.11.40.35;	author djm;	state Exp;
branches;
next	;


desc
@@


1.22
log
@remove ssl2 support even more completely.
in the process, always include ssl3 and tls1, we don't need config options
for them. when the time comes to expire ssl3, it will be with an ax.
checked by miod
@
text
@/* ssl/s2_clnt.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include "ssl_locl.h"
#ifndef OPENSSL_NO_SSL2
#include <stdio.h>
#include <openssl/rand.h>
#include <openssl/buffer.h>
#include <openssl/objects.h>
#include <openssl/evp.h>

static const SSL_METHOD *ssl2_get_client_method(int ver);
static int get_server_finished(SSL *s);
static int get_server_verify(SSL *s);
static int get_server_hello(SSL *s);
static int client_hello(SSL *s);

static int client_master_key(SSL *s);
static int client_finished(SSL *s);
static int client_certificate(SSL *s);
static int
ssl_rsa_public_encrypt(SESS_CERT *sc, int len, unsigned char *from,
unsigned char *to, int padding);
#define BREAK	break

static const SSL_METHOD
*ssl2_get_client_method(int ver)
{
	if (ver == SSL2_VERSION)
		return (SSLv2_client_method());
	else
		return (NULL);
}

IMPLEMENT_ssl2_meth_func(SSLv2_client_method,
    ssl_undefined_function, ssl2_connect, ssl2_get_client_method)

int
ssl2_connect(SSL *s)
{
	BUF_MEM *buf = NULL;
	int ret = -1;
	void (*cb)(const SSL *ssl, int type, int val) = NULL;
	int new_state, state;

	ERR_clear_error();
	errno = 0;

	if (s->info_callback != NULL)
		cb = s->info_callback;
	else if (s->ctx->info_callback != NULL)
		cb = s->ctx->info_callback;

	/* init things to blank */
	s->in_handshake++;
	if (!SSL_in_init(s) || SSL_in_before(s))
		SSL_clear(s);

	for (;;) {
		state = s->state;

		switch (s->state) {
		case SSL_ST_BEFORE:
		case SSL_ST_CONNECT:
		case SSL_ST_BEFORE|SSL_ST_CONNECT:
		case SSL_ST_OK|SSL_ST_CONNECT:

			s->server = 0;
			if (cb != NULL)
				cb(s, SSL_CB_HANDSHAKE_START, 1);

			s->version = SSL2_VERSION;
			s->type = SSL_ST_CONNECT;

			buf = s->init_buf;
			if ((buf == NULL) && ((buf = BUF_MEM_new()) == NULL)) {
				ret = -1;
				goto end;
			}
			if (!BUF_MEM_grow(buf,
				SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)) {
				if (buf == s->init_buf)
					buf = NULL;
				ret = -1;
				goto end;
			}
			s->init_buf = buf;
			buf = NULL;
			s->init_num = 0;
			s->state = SSL2_ST_SEND_CLIENT_HELLO_A;
			s->ctx->stats.sess_connect++;
			s->handshake_func = ssl2_connect;
			BREAK;

		case SSL2_ST_SEND_CLIENT_HELLO_A:
		case SSL2_ST_SEND_CLIENT_HELLO_B:
			s->shutdown = 0;
			ret = client_hello(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			s->state = SSL2_ST_GET_SERVER_HELLO_A;
			BREAK;

		case SSL2_ST_GET_SERVER_HELLO_A:
		case SSL2_ST_GET_SERVER_HELLO_B:
			ret = get_server_hello(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			if (!s->hit) /* new session */
			{
				s->state = SSL2_ST_SEND_CLIENT_MASTER_KEY_A;
				BREAK;

			} else {
				s->state = SSL2_ST_CLIENT_START_ENCRYPTION;
				break;
			}

		case SSL2_ST_SEND_CLIENT_MASTER_KEY_A:
		case SSL2_ST_SEND_CLIENT_MASTER_KEY_B:
			ret = client_master_key(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			s->state = SSL2_ST_CLIENT_START_ENCRYPTION;
			break;

		case SSL2_ST_CLIENT_START_ENCRYPTION:
			/* Ok, we now have all the stuff needed to
			 * start encrypting, so lets fire it up :-) */
			if (!ssl2_enc_init(s, 1)) {
				ret = -1;
				goto end;
			}
			s->s2->clear_text = 0;
			s->state = SSL2_ST_SEND_CLIENT_FINISHED_A;
			break;

		case SSL2_ST_SEND_CLIENT_FINISHED_A:
		case SSL2_ST_SEND_CLIENT_FINISHED_B:
			ret = client_finished(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			s->state = SSL2_ST_GET_SERVER_VERIFY_A;
			break;

		case SSL2_ST_GET_SERVER_VERIFY_A:
		case SSL2_ST_GET_SERVER_VERIFY_B:
			ret = get_server_verify(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			s->state = SSL2_ST_GET_SERVER_FINISHED_A;
			break;

		case SSL2_ST_GET_SERVER_FINISHED_A:
		case SSL2_ST_GET_SERVER_FINISHED_B:
			ret = get_server_finished(s);
			if (ret <= 0)
				goto end;
			break;

		case SSL2_ST_SEND_CLIENT_CERTIFICATE_A:
		case SSL2_ST_SEND_CLIENT_CERTIFICATE_B:
		case SSL2_ST_SEND_CLIENT_CERTIFICATE_C:
		case SSL2_ST_SEND_CLIENT_CERTIFICATE_D:
		case SSL2_ST_X509_GET_CLIENT_CERTIFICATE:
			ret = client_certificate(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			s->state = SSL2_ST_GET_SERVER_FINISHED_A;
			break;

		case SSL_ST_OK:
			if (s->init_buf != NULL) {
				BUF_MEM_free(s->init_buf);
				s->init_buf = NULL;
			}
			s->init_num = 0;
			/*	ERR_clear_error();*/

			/* If we want to cache session-ids in the client
			 * and we successfully add the session-id to the
			 * cache, and there is a callback, then pass it out.
			 * 26/11/96 - eay - only add if not a re-used session.
			 */

			ssl_update_cache(s, SSL_SESS_CACHE_CLIENT);
			if (s->hit)
				s->ctx->stats.sess_hit++;

			ret = 1;
			/* s->server=0; */
			s->ctx->stats.sess_connect_good++;

			if (cb != NULL)
				cb(s, SSL_CB_HANDSHAKE_DONE, 1);

			goto end;
			/* break; */
		default:
			SSLerr(SSL_F_SSL2_CONNECT, SSL_R_UNKNOWN_STATE);
			return (-1);
			/* break; */
		}

		if ((cb != NULL) && (s->state != state)) {
			new_state = s->state;
			s->state = state;
			cb(s, SSL_CB_CONNECT_LOOP, 1);
			s->state = new_state;
		}
	}
end:
	s->in_handshake--;
	if (buf != NULL)
		BUF_MEM_free(buf);
	if (cb != NULL)
		cb(s, SSL_CB_CONNECT_EXIT, ret);
	return (ret);
}

static int
get_server_hello(SSL *s)
{
	unsigned char *buf;
	unsigned char *p;
	int i, j;
	unsigned long len;
	STACK_OF(SSL_CIPHER) *sk = NULL, *cl, *prio, *allow;

	buf = (unsigned char *)s->init_buf->data;
	p = buf;
	if (s->state == SSL2_ST_GET_SERVER_HELLO_A) {
		i = ssl2_read(s,(char *)&(buf[s->init_num]), 11 - s->init_num);
		if (i < (11 - s->init_num))
			return (ssl2_part_read(s, SSL_F_GET_SERVER_HELLO, i));
		s->init_num = 11;

		if (*(p++) != SSL2_MT_SERVER_HELLO) {
			if (p[-1] != SSL2_MT_ERROR) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_SERVER_HELLO,
				SSL_R_READ_WRONG_PACKET_TYPE);
			} else
				SSLerr(SSL_F_GET_SERVER_HELLO,
			SSL_R_PEER_ERROR);
			return (-1);
		}
#if 0
		s->hit = (*(p++)) ? 1 : 0;
		/* Some [PPC?] compilers fail to increment p in above
		   statement, e.g. one provided with Rhapsody 5.5, but
		   most recent example XL C 11.1 for AIX, even without
		   optimization flag... */
#else
		s->hit = (*p) ? 1 : 0;
		p++;
#endif
		s->s2->tmp.cert_type= *(p++);
		n2s(p, i);
		if (i < s->version)
			s->version = i;
		n2s(p, i);
		s->s2->tmp.cert_length = i;
		n2s(p, i);
		s->s2->tmp.csl = i;
		n2s(p, i);
		s->s2->tmp.conn_id_length = i;
		s->state = SSL2_ST_GET_SERVER_HELLO_B;
	}

	/* SSL2_ST_GET_SERVER_HELLO_B */
	len = 11 + (unsigned long)s->s2->tmp.cert_length + (unsigned long)s->s2->tmp.csl + (unsigned long)s->s2->tmp.conn_id_length;
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER) {
		SSLerr(SSL_F_GET_SERVER_HELLO, SSL_R_MESSAGE_TOO_LONG);
		return -1;
	}
	j = (int)len - s->init_num;
	i = ssl2_read(s,(char *)&(buf[s->init_num]), j);
	if (i != j)
		return (ssl2_part_read(s, SSL_F_GET_SERVER_HELLO, i));
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, buf, (size_t)len, s, s->msg_callback_arg); /* SERVER-HELLO */

	/* things are looking good */

	p = buf + 11;
	if (s->hit) {
		if (s->s2->tmp.cert_length != 0) {
			SSLerr(SSL_F_GET_SERVER_HELLO, SSL_R_REUSE_CERT_LENGTH_NOT_ZERO);
			return (-1);
		}
		if (s->s2->tmp.cert_type != 0) {
			if (!(s->options &
				SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG)) {
				SSLerr(SSL_F_GET_SERVER_HELLO, SSL_R_REUSE_CERT_TYPE_NOT_ZERO);
				return (-1);
			}
		}
		if (s->s2->tmp.csl != 0) {
			SSLerr(SSL_F_GET_SERVER_HELLO, SSL_R_REUSE_CIPHER_LIST_NOT_ZERO);
			return (-1);
		}
	} else {
#ifdef undef
		/* very bad */
		memset(s->session->session_id, 0,
		SSL_MAX_SSL_SESSION_ID_LENGTH_IN_BYTES);
		s->session->session_id_length = 0;
		*/
#endif

		/* we need to do this in case we were trying to reuse a 
		 * client session but others are already reusing it.
		 * If this was a new 'blank' session ID, the session-id
		 * length will still be 0 */
		if (s->session->session_id_length > 0) {
			if (!ssl_get_new_session(s, 0)) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				return (-1);
			}
		}

		if (ssl2_set_certificate(s, s->s2->tmp.cert_type,
			s->s2->tmp.cert_length, p) <= 0) {
			ssl2_return_error(s, SSL2_PE_BAD_CERTIFICATE);
			return (-1);
		}
		p += s->s2->tmp.cert_length;

		if (s->s2->tmp.csl == 0) {
			ssl2_return_error(s, SSL2_PE_NO_CIPHER);
			SSLerr(SSL_F_GET_SERVER_HELLO, SSL_R_NO_CIPHER_LIST);
			return (-1);
		}

		/* We have just received a list of ciphers back from the
		 * server.  We need to get the ones that match, then select
		 * the one we want the most :-). */

		/* load the ciphers */
		sk = ssl_bytes_to_cipher_list(s, p, s->s2->tmp.csl,
		&s->session->ciphers);
		p += s->s2->tmp.csl;
		if (sk == NULL) {
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_GET_SERVER_HELLO, ERR_R_MALLOC_FAILURE);
			return (-1);
		}

		(void)sk_SSL_CIPHER_set_cmp_func(sk, ssl_cipher_ptr_id_cmp);

		/* get the array of ciphers we will accept */
		cl = SSL_get_ciphers(s);
		(void)sk_SSL_CIPHER_set_cmp_func(cl, ssl_cipher_ptr_id_cmp);

		/*
		 * If server preference flag set, choose the first
		 * (highest priority) cipher the server sends, otherwise
		 * client preference has priority.
		 */
		if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE) {
			prio = sk;
			allow = cl;
		} else {
			prio = cl;
			allow = sk;
		}
		/* In theory we could have ciphers sent back that we
		 * don't want to use but that does not matter since we
		 * will check against the list we originally sent and
		 * for performance reasons we should not bother to match
		 * the two lists up just to check. */
		for (i = 0; i < sk_SSL_CIPHER_num(prio); i++) {
			if (sk_SSL_CIPHER_find(allow,
			    sk_SSL_CIPHER_value(prio, i)) >= 0)
				break;
		}

		if (i >= sk_SSL_CIPHER_num(prio)) {
			ssl2_return_error(s, SSL2_PE_NO_CIPHER);
			SSLerr(SSL_F_GET_SERVER_HELLO, SSL_R_NO_CIPHER_MATCH);
			return (-1);
		}
		s->session->cipher = sk_SSL_CIPHER_value(prio, i);


		if (s->session->peer != NULL) /* can't happen*/
		{
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_GET_SERVER_HELLO, ERR_R_INTERNAL_ERROR);
			return (-1);
		}

		s->session->peer = s->session->sess_cert->peer_key->x509;
		/* peer_key->x509 has been set by ssl2_set_certificate. */
		CRYPTO_add(&s->session->peer->references, 1, CRYPTO_LOCK_X509);
	}

	if (s->session->sess_cert == NULL
	    || s->session->peer != s->session->sess_cert->peer_key->x509)
	/* can't happen */
	{
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_SERVER_HELLO, ERR_R_INTERNAL_ERROR);
		return (-1);
	}

	s->s2->conn_id_length = s->s2->tmp.conn_id_length;
	if (s->s2->conn_id_length > sizeof s->s2->conn_id) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_SERVER_HELLO, SSL_R_SSL2_CONNECTION_ID_TOO_LONG);
		return -1;
	}
	memcpy(s->s2->conn_id, p, s->s2->tmp.conn_id_length);
	return (1);
}

static int
client_hello(SSL *s)
{
	unsigned char *buf;
	unsigned char *p, *d;
/*	CIPHER **cipher;*/
	int i, n, j;

	buf = (unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_SEND_CLIENT_HELLO_A) {
		if ((s->session == NULL) ||
			(s->session->ssl_version != s->version)) {
			if (!ssl_get_new_session(s, 0)) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				return (-1);
			}
		}
		/* else use the pre-loaded session */

		p = buf;
		/* header */
		d = p + 9;
		/* data section */
		*(p++) = SSL2_MT_CLIENT_HELLO;
		/* type */
		s2n(SSL2_VERSION, p);
		/* version */
		n = j=0;

		n = ssl_cipher_list_to_bytes(s, SSL_get_ciphers(s), d, 0);
		d += n;

		if (n == 0) {
			SSLerr(SSL_F_CLIENT_HELLO, SSL_R_NO_CIPHERS_AVAILABLE);
			return (-1);
		}

		s2n(n, p);
		/* cipher spec num bytes */

		if ((s->session->session_id_length > 0) &&
		    (s->session->session_id_length <=
		    SSL2_MAX_SSL_SESSION_ID_LENGTH)) {
			i = s->session->session_id_length;
			s2n(i, p);
			/* session id length */
			memcpy(d, s->session->session_id,(unsigned int)i);
			d += i;
		} else {
			s2n(0, p);
		}

		s->s2->challenge_length = SSL2_CHALLENGE_LENGTH;
		s2n(SSL2_CHALLENGE_LENGTH, p);
		/* challenge length */
		/*challenge id data*/
		if (RAND_pseudo_bytes(s->s2->challenge, SSL2_CHALLENGE_LENGTH) <= 0)
			return -1;
		memcpy(d, s->s2->challenge, SSL2_CHALLENGE_LENGTH);
		d += SSL2_CHALLENGE_LENGTH;

		s->state = SSL2_ST_SEND_CLIENT_HELLO_B;
		s->init_num = d - buf;
		s->init_off = 0;
	}
	/* SSL2_ST_SEND_CLIENT_HELLO_B */
	return (ssl2_do_write(s));
}

static int
client_master_key(SSL *s)
{
	unsigned char *buf;
	unsigned char *p, *d;
	int clear, enc, karg, i;
	SSL_SESSION *sess;
	const EVP_CIPHER *c;
	const EVP_MD *md;

	buf = (unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_SEND_CLIENT_MASTER_KEY_A) {

		if (!ssl_cipher_get_evp(s->session, &c, &md, NULL, NULL, NULL)) {
			ssl2_return_error(s, SSL2_PE_NO_CIPHER);
			SSLerr(SSL_F_CLIENT_MASTER_KEY, SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS);
			return (-1);
		}
		sess = s->session;
		p = buf;
		d = p + 10;
		*(p++)=SSL2_MT_CLIENT_MASTER_KEY;/* type */

		i = ssl_put_cipher_by_char(s, sess->cipher, p);
		p += i;

		/* make key_arg data */
		i = EVP_CIPHER_iv_length(c);
		sess->key_arg_length = i;
		if (i > SSL_MAX_KEY_ARG_LENGTH) {
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_CLIENT_MASTER_KEY, ERR_R_INTERNAL_ERROR);
			return -1;
		}
		if (i > 0)
			if (RAND_pseudo_bytes(sess->key_arg, i) <= 0)
				return -1;

		/* make a master key */
		i = EVP_CIPHER_key_length(c);
		sess->master_key_length = i;
		if (i > 0) {
			if (i > (int)sizeof(sess->master_key)) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_CLIENT_MASTER_KEY, ERR_R_INTERNAL_ERROR);
				return -1;
			}
			if (RAND_bytes(sess->master_key, i) <= 0) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				return (-1);
			}
		}

		if (sess->cipher->algorithm2 & SSL2_CF_8_BYTE_ENC)
			enc = 8;
		else if (SSL_C_IS_EXPORT(sess->cipher))
			enc = 5;
		else
			enc = i;

		if ((int)i < enc) {
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_CLIENT_MASTER_KEY, SSL_R_CIPHER_TABLE_SRC_ERROR);
			return (-1);
		}
		clear = i - enc;
		s2n(clear, p);
		memcpy(d, sess->master_key,(unsigned int)clear);
		d += clear;

		enc = ssl_rsa_public_encrypt(sess->sess_cert, enc,
		    &(sess->master_key[clear]), d,
		    (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :
		    RSA_PKCS1_PADDING);
		if (enc <= 0) {
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_CLIENT_MASTER_KEY, SSL_R_PUBLIC_KEY_ENCRYPT_ERROR);
			return (-1);
		}
#ifdef PKCS1_CHECK
		if (s->options & SSL_OP_PKCS1_CHECK_1)
			d[1]++;
		if (s->options & SSL_OP_PKCS1_CHECK_2)
			sess->master_key[clear]++;
#endif
		s2n(enc, p);
		d += enc;
		karg = sess->key_arg_length;

		s2n(karg,p); /* key arg size */
		if (karg > (int)sizeof(sess->key_arg)) {
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_CLIENT_MASTER_KEY, ERR_R_INTERNAL_ERROR);
			return -1;
		}
		memcpy(d, sess->key_arg,(unsigned int)karg);
		d += karg;

		s->state = SSL2_ST_SEND_CLIENT_MASTER_KEY_B;
		s->init_num = d - buf;
		s->init_off = 0;
	}

	/* SSL2_ST_SEND_CLIENT_MASTER_KEY_B */
	return (ssl2_do_write(s));
}

static int
client_finished(SSL *s)
{
	unsigned char *p;

	if (s->state == SSL2_ST_SEND_CLIENT_FINISHED_A) {
		p = (unsigned char *)s->init_buf->data;
		*(p++) = SSL2_MT_CLIENT_FINISHED;
		if (s->s2->conn_id_length > sizeof s->s2->conn_id) {
			SSLerr(SSL_F_CLIENT_FINISHED, ERR_R_INTERNAL_ERROR);
			return -1;
		}
		memcpy(p, s->s2->conn_id,(unsigned int)s->s2->conn_id_length);

		s->state = SSL2_ST_SEND_CLIENT_FINISHED_B;
		s->init_num = s->s2->conn_id_length + 1;
		s->init_off = 0;
	}
	return (ssl2_do_write(s));
}

/* read the data and then respond */
static int
client_certificate(SSL *s)
{
	unsigned char *buf;
	unsigned char *p, *d;
	int i;
	unsigned int n;
	int cert_ch_len;
	unsigned char *cert_ch;

	buf = (unsigned char *)s->init_buf->data;

	/* We have a cert associated with the SSL, so attach it to
	 * the session if it does not have one */

	if (s->state == SSL2_ST_SEND_CLIENT_CERTIFICATE_A) {
		i = ssl2_read(s,(char *)&(buf[s->init_num]),
		SSL2_MAX_CERT_CHALLENGE_LENGTH + 2 - s->init_num);
		if (i < (SSL2_MIN_CERT_CHALLENGE_LENGTH + 2 - s->init_num))
			return (ssl2_part_read(s, SSL_F_CLIENT_CERTIFICATE, i));
		s->init_num += i;
		if (s->msg_callback)
			s->msg_callback(0, s->version, 0, buf, (size_t)s->init_num, s, s->msg_callback_arg); /* REQUEST-CERTIFICATE */

		/* type=buf[0]; */
		/* type eq x509 */
		if (buf[1] != SSL2_AT_MD5_WITH_RSA_ENCRYPTION) {
			ssl2_return_error(s, SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE);
			SSLerr(SSL_F_CLIENT_CERTIFICATE, SSL_R_BAD_AUTHENTICATION_TYPE);
			return (-1);
		}

		if ((s->cert == NULL) || (s->cert->key->x509 == NULL) ||
		    (s->cert->key->privatekey == NULL)) {
			s->state = SSL2_ST_X509_GET_CLIENT_CERTIFICATE;
		} else
			s->state = SSL2_ST_SEND_CLIENT_CERTIFICATE_C;
	}

	cert_ch = buf + 2;
	cert_ch_len = s->init_num - 2;

	if (s->state == SSL2_ST_X509_GET_CLIENT_CERTIFICATE) {
		X509 *x509 = NULL;
		EVP_PKEY *pkey = NULL;

		/* If we get an error we need to
		 * ssl->rwstate=SSL_X509_LOOKUP;
		 * return(error);
		 * We should then be retried when things are ok and we
		 * can get a cert or not */

		i = 0;
		if (s->ctx->client_cert_cb != NULL) {
			i = s->ctx->client_cert_cb(s, &(x509), &(pkey));
		}

		if (i < 0) {
			s->rwstate = SSL_X509_LOOKUP;
			return (-1);
		}
		s->rwstate = SSL_NOTHING;

		if ((i == 1) && (pkey != NULL) && (x509 != NULL)) {
			s->state = SSL2_ST_SEND_CLIENT_CERTIFICATE_C;
			if (!SSL_use_certificate(s, x509) ||
			    !SSL_use_PrivateKey(s, pkey)) {
				i = 0;
			}
			X509_free(x509);
			EVP_PKEY_free(pkey);
		} else if (i == 1) {
			if (x509 != NULL)
				X509_free(x509);
			if (pkey != NULL)
				EVP_PKEY_free(pkey);
			SSLerr(SSL_F_CLIENT_CERTIFICATE, SSL_R_BAD_DATA_RETURNED_BY_CALLBACK);
			i = 0;
		}

		if (i == 0) {
			/* We have no client certificate to respond with
			 * so send the correct error message back */
			s->state = SSL2_ST_SEND_CLIENT_CERTIFICATE_B;
			p = buf;
			*(p++) = SSL2_MT_ERROR;
			s2n(SSL2_PE_NO_CERTIFICATE, p);
			s->init_off = 0;
			s->init_num = 3;
			/* Write is done at the end */
		}
	}

	if (s->state == SSL2_ST_SEND_CLIENT_CERTIFICATE_B) {
		return (ssl2_do_write(s));
	}

	if (s->state == SSL2_ST_SEND_CLIENT_CERTIFICATE_C) {
		EVP_MD_CTX ctx;

		/* ok, now we calculate the checksum
		 * do it first so we can reuse buf :-) */
		p = buf;
		EVP_MD_CTX_init(&ctx);
		EVP_SignInit_ex(&ctx, s->ctx->rsa_md5, NULL);
		EVP_SignUpdate(&ctx, s->s2->key_material,
		s->s2->key_material_length);
		EVP_SignUpdate(&ctx, cert_ch,(unsigned int)cert_ch_len);
		i = i2d_X509(s->session->sess_cert->peer_key->x509, &p);
		/* Don't update the signature if it fails - FIXME: probably should handle this better */
		if (i > 0)
			EVP_SignUpdate(&ctx, buf,(unsigned int)i);

		p = buf;
		d = p + 6;
		*(p++) = SSL2_MT_CLIENT_CERTIFICATE;
		*(p++) = SSL2_CT_X509_CERTIFICATE;
		n = i2d_X509(s->cert->key->x509, &d);
		s2n(n, p);

		if (!EVP_SignFinal(&ctx, d, &n, s->cert->key->privatekey)) {
			/* this is not good.  If things have failed it
			 * means there so something wrong with the key.
			 * We will continue with a 0 length signature
			 */
		}
		EVP_MD_CTX_cleanup(&ctx);
		s2n(n, p);
		d += n;

		s->state = SSL2_ST_SEND_CLIENT_CERTIFICATE_D;
		s->init_num = d - buf;
		s->init_off = 0;
	}
	/* if (s->state == SSL2_ST_SEND_CLIENT_CERTIFICATE_D) */
	return (ssl2_do_write(s));
}

static int
get_server_verify(SSL *s)
{
	unsigned char *p;
	int i, n, len;

	p = (unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_GET_SERVER_VERIFY_A) {
		i = ssl2_read(s,(char *)&(p[s->init_num]), 1 - s->init_num);
		if (i < (1 - s->init_num))
			return (ssl2_part_read(s, SSL_F_GET_SERVER_VERIFY, i));
		s->init_num += i;

		s->state = SSL2_ST_GET_SERVER_VERIFY_B;
		if (*p != SSL2_MT_SERVER_VERIFY) {
			if (p[0] != SSL2_MT_ERROR) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_SERVER_VERIFY,
				SSL_R_READ_WRONG_PACKET_TYPE);
			} else {
				SSLerr(SSL_F_GET_SERVER_VERIFY, SSL_R_PEER_ERROR);
				/* try to read the error message */
				i = ssl2_read(s,(char *)&(p[s->init_num]), 3 - s->init_num);
				return ssl2_part_read(s, SSL_F_GET_SERVER_VERIFY, i);
			}
			return (-1);
		}
	}

	p = (unsigned char *)s->init_buf->data;
	len = 1 + s->s2->challenge_length;
	n = len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]), n);
	if (i < n)
		return (ssl2_part_read(s, SSL_F_GET_SERVER_VERIFY, i));
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, p, len, s, s->msg_callback_arg); /* SERVER-VERIFY */
	p += 1;

	if (CRYPTO_memcmp(p, s->s2->challenge, s->s2->challenge_length) != 0) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_SERVER_VERIFY, SSL_R_CHALLENGE_IS_DIFFERENT);
		return (-1);
	}
	return (1);
}

static int
get_server_finished(SSL *s)
{
	unsigned char *buf;
	unsigned char *p;
	int i, n, len;

	buf = (unsigned char *)s->init_buf->data;
	p = buf;
	if (s->state == SSL2_ST_GET_SERVER_FINISHED_A) {
		i = ssl2_read(s,(char *)&(buf[s->init_num]), 1 - s->init_num);
		if (i < (1 - s->init_num))
			return (ssl2_part_read(s, SSL_F_GET_SERVER_FINISHED, i));
		s->init_num += i;

		if (*p == SSL2_MT_REQUEST_CERTIFICATE) {
			s->state = SSL2_ST_SEND_CLIENT_CERTIFICATE_A;
			return (1);
		} else if (*p != SSL2_MT_SERVER_FINISHED) {
			if (p[0] != SSL2_MT_ERROR) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_SERVER_FINISHED, SSL_R_READ_WRONG_PACKET_TYPE);
			} else {
				SSLerr(SSL_F_GET_SERVER_FINISHED, SSL_R_PEER_ERROR);
				/* try to read the error message */
				i = ssl2_read(s,(char *)&(p[s->init_num]), 3 - s->init_num);
				return ssl2_part_read(s, SSL_F_GET_SERVER_VERIFY, i);
			}
			return (-1);
		}
		s->state = SSL2_ST_GET_SERVER_FINISHED_B;
	}

	len = 1 + SSL2_SSL_SESSION_ID_LENGTH;
	n = len - s->init_num;
	i = ssl2_read(s,(char *)&(buf[s->init_num]), n);
	if (i < n) /* XXX could be shorter than SSL2_SSL_SESSION_ID_LENGTH, that's the maximum */
		return (ssl2_part_read(s, SSL_F_GET_SERVER_FINISHED, i));
	s->init_num += i;
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, buf, (size_t)s->init_num, s, s->msg_callback_arg); /* SERVER-FINISHED */

	if (!s->hit) /* new session */
	{
		/* new session-id */
		/* Make sure we were not trying to re-use an old SSL_SESSION
		 * or bad things can happen */
		/* ZZZZZZZZZZZZZ */
		s->session->session_id_length = SSL2_SSL_SESSION_ID_LENGTH;
		memcpy(s->session->session_id, p + 1, SSL2_SSL_SESSION_ID_LENGTH);
	} else {
		if (!(s->options & SSL_OP_MICROSOFT_SESS_ID_BUG)) {
			if ((s->session->session_id_length > sizeof s->session->session_id)
			    || (0 != memcmp(buf + 1, s->session->session_id,
			    (unsigned int)s->session->session_id_length))) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_SERVER_FINISHED, SSL_R_SSL_SESSION_ID_IS_DIFFERENT);
				return (-1);
			}
		}
	}
	s->state = SSL_ST_OK;
	return (1);
}

/* loads in the certificate from the server */
int
ssl2_set_certificate(SSL *s, int type, int len, const unsigned char *data)
{
	STACK_OF(X509) *sk = NULL;
	EVP_PKEY *pkey = NULL;
	SESS_CERT *sc = NULL;
	int i;
	X509 *x509 = NULL;
	int ret = 0;

	x509 = d2i_X509(NULL, &data,(long)len);
	if (x509 == NULL) {
		SSLerr(SSL_F_SSL2_SET_CERTIFICATE, ERR_R_X509_LIB);
		goto err;
	}

	if ((sk = sk_X509_new_null()) == NULL || !sk_X509_push(sk, x509)) {
		SSLerr(SSL_F_SSL2_SET_CERTIFICATE, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	i = ssl_verify_cert_chain(s, sk);

	if ((s->verify_mode != SSL_VERIFY_NONE) && (i <= 0)) {
		SSLerr(SSL_F_SSL2_SET_CERTIFICATE, SSL_R_CERTIFICATE_VERIFY_FAILED);
		goto err;
	}
	ERR_clear_error(); /* but we keep s->verify_result */
	s->session->verify_result = s->verify_result;

	/* server's cert for this session */
	sc = ssl_sess_cert_new();
	if (sc == NULL) {
		ret = -1;
		goto err;
	}
	if (s->session->sess_cert)
		ssl_sess_cert_free(s->session->sess_cert);
	s->session->sess_cert = sc;

	sc->peer_pkeys[SSL_PKEY_RSA_ENC].x509 = x509;
	sc->peer_key = &(sc->peer_pkeys[SSL_PKEY_RSA_ENC]);

	pkey = X509_get_pubkey(x509);
	x509 = NULL;
	if (pkey == NULL) {
		SSLerr(SSL_F_SSL2_SET_CERTIFICATE, SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY);
		goto err;
	}
	if (pkey->type != EVP_PKEY_RSA) {
		SSLerr(SSL_F_SSL2_SET_CERTIFICATE, SSL_R_PUBLIC_KEY_NOT_RSA);
		goto err;
	}

	if (!ssl_set_peer_cert_type(sc, SSL2_CT_X509_CERTIFICATE))
		goto err;
	ret = 1;
err:
	sk_X509_free(sk);
	X509_free(x509);
	EVP_PKEY_free(pkey);
	return (ret);
}

static int
ssl_rsa_public_encrypt(SESS_CERT *sc, int len, unsigned char *from,
    unsigned char *to, int padding)
{
	EVP_PKEY *pkey = NULL;
	int i = -1;

	if ((sc == NULL) || (sc->peer_key->x509 == NULL) ||
	    ((pkey = X509_get_pubkey(sc->peer_key->x509)) == NULL)) {
		SSLerr(SSL_F_SSL_RSA_PUBLIC_ENCRYPT, SSL_R_NO_PUBLICKEY);
		return (-1);
	}
	if (pkey->type != EVP_PKEY_RSA) {
		SSLerr(SSL_F_SSL_RSA_PUBLIC_ENCRYPT, SSL_R_PUBLIC_KEY_IS_NOT_RSA);
		goto end;
	}

	/* we have the public key */
	i = RSA_public_encrypt(len, from, to, pkey->pkey.rsa, padding);
	if (i < 0)
		SSLerr(SSL_F_SSL_RSA_PUBLIC_ENCRYPT, ERR_R_RSA_LIB);
end:
	EVP_PKEY_free(pkey);
	return (i);
}
#else /* !OPENSSL_NO_SSL2 */

# if PEDANTIC
static void *dummy = &dummy;
# endif

#endif
@


1.21
log
@So the OpenSSL codebase does "get the time, add it as a random seed"
in a bunch of places inside the TLS engine, to try to keep entropy high.
I wonder if their moto is "If you can't solve a problem, at least try
to do it badly".
ok miod
@
text
@@


1.20
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a148 1
	unsigned long l = (unsigned long)time(NULL);
a153 1
	RAND_add(&l, sizeof(l), 0);
@


1.19
log
@Do not include "e_os.h" anymore.  Simply pull in the necessary headers.

ok miod@@, deraadt@@
@
text
@d124 2
a125 1
static int client_hello(SSL *s); 
d129 3
a131 2
static int ssl_rsa_public_encrypt(SESS_CERT *sc, int len, unsigned char *from,
	unsigned char *to,int padding);
d134 3
a136 2
static const SSL_METHOD *ssl2_get_client_method(int ver)
	{
d138 1
a138 1
		return(SSLv2_client_method());
d140 2
a141 2
		return(NULL);
	}
d144 1
a144 3
			ssl_undefined_function,
			ssl2_connect,
			ssl2_get_client_method)
d146 8
a153 7
int ssl2_connect(SSL *s)
	{
	unsigned long l=(unsigned long)time(NULL);
	BUF_MEM *buf=NULL;
	int ret= -1;
	void (*cb)(const SSL *ssl,int type,int val)=NULL;
	int new_state,state;
d155 1
a155 1
	RAND_add(&l,sizeof(l),0);
d160 1
a160 1
		cb=s->info_callback;
d162 1
a162 1
		cb=s->ctx->info_callback;
d166 2
a167 1
	if (!SSL_in_init(s) || SSL_in_before(s)) SSL_clear(s);
d169 2
a170 3
	for (;;)
		{
		state=s->state;
d172 1
a172 2
		switch (s->state)
			{
d178 10
a187 10
			s->server=0;
			if (cb != NULL) cb(s,SSL_CB_HANDSHAKE_START,1);

			s->version=SSL2_VERSION;
			s->type=SSL_ST_CONNECT;

			buf=s->init_buf;
			if ((buf == NULL) && ((buf=BUF_MEM_new()) == NULL))
				{
				ret= -1;
d189 1
a189 1
				}
d191 1
a191 2
				SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER))
				{
d193 2
a194 2
					buf=NULL;
				ret= -1;
d196 5
a200 5
				}
			s->init_buf=buf;
			buf=NULL;
			s->init_num=0;
			s->state=SSL2_ST_SEND_CLIENT_HELLO_A;
d202 1
a202 1
			s->handshake_func=ssl2_connect;
d207 6
a212 5
			s->shutdown=0;
			ret=client_hello(s);
			if (ret <= 0) goto end;
			s->init_num=0;
			s->state=SSL2_ST_GET_SERVER_HELLO_A;
d214 1
a214 1
		
d217 4
a220 3
			ret=get_server_hello(s);
			if (ret <= 0) goto end;
			s->init_num=0;
d222 6
a227 7
				{
				s->state=SSL2_ST_SEND_CLIENT_MASTER_KEY_A;
				BREAK; 
				}
			else
				{
				s->state=SSL2_ST_CLIENT_START_ENCRYPTION;
d229 2
a230 2
				}
	
d233 5
a237 4
			ret=client_master_key(s);
			if (ret <= 0) goto end;
			s->init_num=0;
			s->state=SSL2_ST_CLIENT_START_ENCRYPTION;
d243 2
a244 3
			if (!ssl2_enc_init(s,1))
				{
				ret= -1;
d246 3
a248 3
				}
			s->s2->clear_text=0;
			s->state=SSL2_ST_SEND_CLIENT_FINISHED_A;
d253 5
a257 4
			ret=client_finished(s);
			if (ret <= 0) goto end;
			s->init_num=0;
			s->state=SSL2_ST_GET_SERVER_VERIFY_A;
d262 5
a266 4
			ret=get_server_verify(s);
			if (ret <= 0) goto end;
			s->init_num=0;
			s->state=SSL2_ST_GET_SERVER_FINISHED_A;
d271 3
a273 2
			ret=get_server_finished(s);
			if (ret <= 0) goto end;
d281 5
a285 4
			ret=client_certificate(s);
			if (ret <= 0) goto end;
			s->init_num=0;
			s->state=SSL2_ST_GET_SERVER_FINISHED_A;
d289 1
a289 2
			if (s->init_buf != NULL)
				{
d291 4
a294 4
				s->init_buf=NULL;
				}
			s->init_num=0;
		/*	ERR_clear_error();*/
d302 3
a304 2
			ssl_update_cache(s,SSL_SESS_CACHE_CLIENT);
			if (s->hit) s->ctx->stats.sess_hit++;
d306 1
a306 1
			ret=1;
d310 2
a311 1
			if (cb != NULL) cb(s,SSL_CB_HANDSHAKE_DONE,1);
d316 2
a317 2
			SSLerr(SSL_F_SSL2_CONNECT,SSL_R_UNKNOWN_STATE);
			return(-1);
d319 1
a319 1
			}
d321 5
a325 7
		if ((cb != NULL) && (s->state != state))
			{
			new_state=s->state;
			s->state=state;
			cb(s,SSL_CB_CONNECT_LOOP,1);
			s->state=new_state;
			}
d327 1
d332 8
a339 7
	if (cb != NULL) 
		cb(s,SSL_CB_CONNECT_EXIT,ret);
	return(ret);
	}

static int get_server_hello(SSL *s)
	{
d342 1
a342 1
	int i,j;
d344 1
a344 1
	STACK_OF(SSL_CIPHER) *sk=NULL,*cl, *prio, *allow;
d346 6
a351 7
	buf=(unsigned char *)s->init_buf->data;
	p=buf;
	if (s->state == SSL2_ST_GET_SERVER_HELLO_A)
		{
		i=ssl2_read(s,(char *)&(buf[s->init_num]),11-s->init_num);
		if (i < (11-s->init_num)) 
			return(ssl2_part_read(s,SSL_F_GET_SERVER_HELLO,i));
d354 3
a356 5
		if (*(p++) != SSL2_MT_SERVER_HELLO)
			{
			if (p[-1] != SSL2_MT_ERROR)
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
d358 2
a359 3
					SSL_R_READ_WRONG_PACKET_TYPE);
				}
			else
d361 3
a363 3
					SSL_R_PEER_ERROR);
			return(-1);
			}
d365 1
a365 1
		s->hit=(*(p++))?1:0;
d371 2
a372 1
		s->hit=(*p)?1:0; p++;
d375 11
a385 7
		n2s(p,i);
		if (i < s->version) s->version=i;
		n2s(p,i); s->s2->tmp.cert_length=i;
		n2s(p,i); s->s2->tmp.csl=i;
		n2s(p,i); s->s2->tmp.conn_id_length=i;
		s->state=SSL2_ST_GET_SERVER_HELLO_B;
		}
d389 2
a390 3
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
		{
		SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_MESSAGE_TOO_LONG);
d392 1
a392 1
		}
d394 3
a396 2
	i = ssl2_read(s,(char *)&(buf[s->init_num]),j);
	if (i != j) return(ssl2_part_read(s,SSL_F_GET_SERVER_HELLO,i));
d403 6
a408 9
	if (s->hit)
		{
		if (s->s2->tmp.cert_length != 0) 
			{
			SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_REUSE_CERT_LENGTH_NOT_ZERO);
			return(-1);
			}
		if (s->s2->tmp.cert_type != 0)
			{
d410 3
a412 10
				SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG))
				{
				SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_REUSE_CERT_TYPE_NOT_ZERO);
				return(-1);
				}
			}
		if (s->s2->tmp.csl != 0)
			{
			SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_REUSE_CIPHER_LIST_NOT_ZERO);
			return(-1);
d415 5
a419 2
	else
		{
d422 3
a424 3
		memset(s->session->session_id,0,
			SSL_MAX_SSL_SESSION_ID_LENGTH_IN_BYTES);
		s->session->session_id_length=0;
d432 4
a435 7
		if (s->session->session_id_length > 0)
			{
			if (!ssl_get_new_session(s,0))
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
				return(-1);
				}
d437 1
d439 6
a444 7
		if (ssl2_set_certificate(s,s->s2->tmp.cert_type,
			s->s2->tmp.cert_length,p) <= 0)
			{
			ssl2_return_error(s,SSL2_PE_BAD_CERTIFICATE);
			return(-1);
			}
		p+=s->s2->tmp.cert_length;
d446 5
a450 6
		if (s->s2->tmp.csl == 0)
			{
			ssl2_return_error(s,SSL2_PE_NO_CIPHER);
			SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_NO_CIPHER_LIST);
			return(-1);
			}
d457 8
a464 9
		sk=ssl_bytes_to_cipher_list(s,p,s->s2->tmp.csl,
					    &s->session->ciphers);
		p+=s->s2->tmp.csl;
		if (sk == NULL)
			{
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_GET_SERVER_HELLO,ERR_R_MALLOC_FAILURE);
			return(-1);
			}
d466 1
a466 1
		(void)sk_SSL_CIPHER_set_cmp_func(sk,ssl_cipher_ptr_id_cmp);
d469 2
a470 2
		cl=SSL_get_ciphers(s);
		(void)sk_SSL_CIPHER_set_cmp_func(cl,ssl_cipher_ptr_id_cmp);
d477 7
a483 10
		if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE)
		    {
		    prio = sk;
		    allow = cl;
		    }
		else
		    {
		    prio = cl;
		    allow = sk;
		    }
d489 1
a489 2
		for (i=0; i<sk_SSL_CIPHER_num(prio); i++)
			{
d491 1
a491 1
					     sk_SSL_CIPHER_value(prio,i)) >= 0)
d493 1
a493 1
			}
d495 6
a500 7
		if (i >= sk_SSL_CIPHER_num(prio))
			{
			ssl2_return_error(s,SSL2_PE_NO_CIPHER);
			SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_NO_CIPHER_MATCH);
			return(-1);
			}
		s->session->cipher=sk_SSL_CIPHER_value(prio,i);
d504 1
a504 1
			{
d507 2
a508 2
			return(-1);
			}
d513 1
a513 1
		}
d515 4
a518 4
	if (s->session->sess_cert == NULL 
      || s->session->peer != s->session->sess_cert->peer_key->x509)
		/* can't happen */
		{
d521 5
a525 6
		return(-1);
		}
		
	s->s2->conn_id_length=s->s2->tmp.conn_id_length;
	if (s->s2->conn_id_length > sizeof s->s2->conn_id)
		{
a528 3
		}
	memcpy(s->s2->conn_id,p,s->s2->tmp.conn_id_length);
	return(1);
d530 7
a536 3

static int client_hello(SSL *s)
	{
d538 1
a538 1
	unsigned char *p,*d;
d540 1
a540 1
	int i,n,j;
d542 2
a543 3
	buf=(unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_SEND_CLIENT_HELLO_A)
		{
d545 4
a548 7
			(s->session->ssl_version != s->version))
			{
			if (!ssl_get_new_session(s,0))
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
				return(-1);
				}
d550 1
d553 17
a569 5
		p=buf;					/* header */
		d=p+9;					/* data section */
		*(p++)=SSL2_MT_CLIENT_HELLO;		/* type */
		s2n(SSL2_VERSION,p);			/* version */
		n=j=0;
d571 2
a572 10
		n=ssl_cipher_list_to_bytes(s,SSL_get_ciphers(s),d,0);
		d+=n;

		if (n == 0)
			{
			SSLerr(SSL_F_CLIENT_HELLO,SSL_R_NO_CIPHERS_AVAILABLE);
			return(-1);
			}

		s2n(n,p);			/* cipher spec num bytes */
d575 10
a584 12
			(s->session->session_id_length <=
			SSL2_MAX_SSL_SESSION_ID_LENGTH))
			{
			i=s->session->session_id_length;
			s2n(i,p);		/* session id length */
			memcpy(d,s->session->session_id,(unsigned int)i);
			d+=i;
			}
		else
			{
			s2n(0,p);
			}
d586 3
a588 2
		s->s2->challenge_length=SSL2_CHALLENGE_LENGTH;
		s2n(SSL2_CHALLENGE_LENGTH,p);		/* challenge length */
d590 1
a590 1
		if (RAND_pseudo_bytes(s->s2->challenge,SSL2_CHALLENGE_LENGTH) <= 0)
d592 2
a593 2
		memcpy(d,s->s2->challenge,SSL2_CHALLENGE_LENGTH);
		d+=SSL2_CHALLENGE_LENGTH;
d595 4
a598 4
		s->state=SSL2_ST_SEND_CLIENT_HELLO_B;
		s->init_num=d-buf;
		s->init_off=0;
		}
d600 2
a601 2
	return(ssl2_do_write(s));
	}
d603 3
a605 2
static int client_master_key(SSL *s)
	{
d607 2
a608 2
	unsigned char *p,*d;
	int clear,enc,karg,i;
d613 2
a614 3
	buf=(unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_SEND_CLIENT_MASTER_KEY_A)
		{
d616 8
a623 9
		if (!ssl_cipher_get_evp(s->session,&c,&md,NULL,NULL,NULL))
			{
			ssl2_return_error(s,SSL2_PE_NO_CIPHER);
			SSLerr(SSL_F_CLIENT_MASTER_KEY,SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS);
			return(-1);
			}
		sess=s->session;
		p=buf;
		d=p+10;
d626 2
a627 2
		i=ssl_put_cipher_by_char(s,sess->cipher,p);
		p+=i;
d630 3
a632 4
		i=EVP_CIPHER_iv_length(c);
		sess->key_arg_length=i;
		if (i > SSL_MAX_KEY_ARG_LENGTH)
			{
d636 1
a636 1
			}
d638 1
a638 1
			if (RAND_pseudo_bytes(sess->key_arg,i) <= 0)
d642 4
a645 6
		i=EVP_CIPHER_key_length(c);
		sess->master_key_length=i;
		if (i > 0)
			{
			if (i > (int)sizeof(sess->master_key))
				{
a648 6
				}
			if (RAND_bytes(sess->master_key,i) <= 0)
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
				return(-1);
				}
d650 5
d657 1
a657 1
			enc=8;
d659 1
a659 1
			enc=5;
d661 1
a661 1
			enc=i;
d663 19
a681 20
		if ((int)i < enc)
			{
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_CLIENT_MASTER_KEY,SSL_R_CIPHER_TABLE_SRC_ERROR);
			return(-1);
			}
		clear=i-enc;
		s2n(clear,p);
		memcpy(d,sess->master_key,(unsigned int)clear);
		d+=clear;

		enc=ssl_rsa_public_encrypt(sess->sess_cert,enc,
			&(sess->master_key[clear]),d,
			(s->s2->ssl2_rollback)?RSA_SSLV23_PADDING:RSA_PKCS1_PADDING);
		if (enc <= 0)
			{
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_CLIENT_MASTER_KEY,SSL_R_PUBLIC_KEY_ENCRYPT_ERROR);
			return(-1);
			}
d683 2
a684 1
		if (s->options & SSL_OP_PKCS1_CHECK_1) d[1]++;
d688 4
a691 3
		s2n(enc,p);
		d+=enc;
		karg=sess->key_arg_length;	
d693 2
a694 3
		if (karg > (int)sizeof(sess->key_arg))
			{
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
d697 3
a699 3
			}
		memcpy(d,sess->key_arg,(unsigned int)karg);
		d+=karg;
d701 4
a704 4
		s->state=SSL2_ST_SEND_CLIENT_MASTER_KEY_B;
		s->init_num=d-buf;
		s->init_off=0;
		}
d707 2
a708 2
	return(ssl2_do_write(s));
	}
d710 3
a712 2
static int client_finished(SSL *s)
	{
d715 4
a718 6
	if (s->state == SSL2_ST_SEND_CLIENT_FINISHED_A)
		{
		p=(unsigned char *)s->init_buf->data;
		*(p++)=SSL2_MT_CLIENT_FINISHED;
		if (s->s2->conn_id_length > sizeof s->s2->conn_id)
			{
d721 2
a722 2
			}
		memcpy(p,s->s2->conn_id,(unsigned int)s->s2->conn_id_length);
d724 3
a726 5
		s->state=SSL2_ST_SEND_CLIENT_FINISHED_B;
		s->init_num=s->s2->conn_id_length+1;
		s->init_off=0;
		}
	return(ssl2_do_write(s));
d728 2
d732 3
a734 2
static int client_certificate(SSL *s)
	{
d736 1
a736 1
	unsigned char *p,*d;
d742 1
a742 1
	buf=(unsigned char *)s->init_buf->data;
d747 5
a751 6
	if (s->state == SSL2_ST_SEND_CLIENT_CERTIFICATE_A)
		{
		i=ssl2_read(s,(char *)&(buf[s->init_num]),
			SSL2_MAX_CERT_CHALLENGE_LENGTH+2-s->init_num);
		if (i<(SSL2_MIN_CERT_CHALLENGE_LENGTH+2-s->init_num))
			return(ssl2_part_read(s,SSL_F_CLIENT_CERTIFICATE,i));
d758 5
a762 6
		if (buf[1] != SSL2_AT_MD5_WITH_RSA_ENCRYPTION)
			{
			ssl2_return_error(s,SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE);
			SSLerr(SSL_F_CLIENT_CERTIFICATE,SSL_R_BAD_AUTHENTICATION_TYPE);
			return(-1);
			}
d764 6
a769 9
		if ((s->cert == NULL) ||
			(s->cert->key->x509 == NULL) ||
			(s->cert->key->privatekey == NULL))
			{
			s->state=SSL2_ST_X509_GET_CLIENT_CERTIFICATE;
			}
		else
			s->state=SSL2_ST_SEND_CLIENT_CERTIFICATE_C;
		}
d774 3
a776 4
	if (s->state == SSL2_ST_X509_GET_CLIENT_CERTIFICATE)
		{
		X509 *x509=NULL;
		EVP_PKEY *pkey=NULL;
d784 16
a799 10
		i=0;
		if (s->ctx->client_cert_cb != NULL)
			{
			i=s->ctx->client_cert_cb(s,&(x509),&(pkey));
			}

		if (i < 0)
			{
			s->rwstate=SSL_X509_LOOKUP;
			return(-1);
a800 10
		s->rwstate=SSL_NOTHING;

		if ((i == 1) && (pkey != NULL) && (x509 != NULL))
			{
			s->state=SSL2_ST_SEND_CLIENT_CERTIFICATE_C;
			if (	!SSL_use_certificate(s,x509) || 
				!SSL_use_PrivateKey(s,pkey))
				{
				i=0;
				}
d803 8
a810 8
			}
		else if (i == 1)
			{
			if (x509 != NULL) X509_free(x509);
			if (pkey != NULL) EVP_PKEY_free(pkey);
			SSLerr(SSL_F_CLIENT_CERTIFICATE,SSL_R_BAD_DATA_RETURNED_BY_CALLBACK);
			i=0;
			}
d812 1
a812 2
		if (i == 0)
			{
d815 6
a820 6
			s->state=SSL2_ST_SEND_CLIENT_CERTIFICATE_B;
			p=buf;
			*(p++)=SSL2_MT_ERROR;
			s2n(SSL2_PE_NO_CERTIFICATE,p);
			s->init_off=0;
			s->init_num=3;
a821 1
			}
d823 1
d825 3
a827 4
	if (s->state == SSL2_ST_SEND_CLIENT_CERTIFICATE_B)
		{
		return(ssl2_do_write(s));
		}
d829 1
a829 2
	if (s->state == SSL2_ST_SEND_CLIENT_CERTIFICATE_C)
		{
d834 1
a834 1
		p=buf;
d836 5
a840 5
		EVP_SignInit_ex(&ctx,s->ctx->rsa_md5, NULL);
		EVP_SignUpdate(&ctx,s->s2->key_material,
			       s->s2->key_material_length);
		EVP_SignUpdate(&ctx,cert_ch,(unsigned int)cert_ch_len);
		i=i2d_X509(s->session->sess_cert->peer_key->x509,&p);
d842 2
a843 2
		if(i > 0)
			EVP_SignUpdate(&ctx,buf,(unsigned int)i);
d845 6
a850 6
		p=buf;
		d=p+6;
		*(p++)=SSL2_MT_CLIENT_CERTIFICATE;
		*(p++)=SSL2_CT_X509_CERTIFICATE;
		n=i2d_X509(s->cert->key->x509,&d);
		s2n(n,p);
d852 1
a852 2
		if (!EVP_SignFinal(&ctx,d,&n,s->cert->key->privatekey))
			{
d857 1
a857 1
			}
d859 2
a860 2
		s2n(n,p);
		d+=n;
d862 4
a865 4
		s->state=SSL2_ST_SEND_CLIENT_CERTIFICATE_D;
		s->init_num=d-buf;
		s->init_off=0;
		}
d867 2
a868 2
	return(ssl2_do_write(s));
	}
d870 3
a872 2
static int get_server_verify(SSL *s)
	{
d876 5
a880 6
	p=(unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_GET_SERVER_VERIFY_A)
		{
		i=ssl2_read(s,(char *)&(p[s->init_num]),1-s->init_num);
		if (i < (1-s->init_num)) 
			return(ssl2_part_read(s,SSL_F_GET_SERVER_VERIFY,i));
d883 4
a886 6
		s->state= SSL2_ST_GET_SERVER_VERIFY_B;
		if (*p != SSL2_MT_SERVER_VERIFY)
			{
			if (p[0] != SSL2_MT_ERROR)
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
d888 3
a890 5
					SSL_R_READ_WRONG_PACKET_TYPE);
				}
			else
				{
				SSLerr(SSL_F_GET_SERVER_VERIFY,SSL_R_PEER_ERROR);
d892 2
a893 4
				i=ssl2_read(s,(char *)&(p[s->init_num]),3-s->init_num);
				return ssl2_part_read(s,SSL_F_GET_SERVER_VERIFY,i);
				}
			return(-1);
d895 1
d897 3
a899 2
	
	p=(unsigned char *)s->init_buf->data;
d901 2
a902 2
	n =  len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]),n);
d904 1
a904 1
		return(ssl2_part_read(s,SSL_F_GET_SERVER_VERIFY,i));
d909 4
a912 7
	if (CRYPTO_memcmp(p,s->s2->challenge,s->s2->challenge_length) != 0)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_SERVER_VERIFY,SSL_R_CHALLENGE_IS_DIFFERENT);
		return(-1);
		}
	return(1);
d914 2
d917 3
a919 2
static int get_server_finished(SSL *s)
	{
d924 6
a929 7
	buf=(unsigned char *)s->init_buf->data;
	p=buf;
	if (s->state == SSL2_ST_GET_SERVER_FINISHED_A)
		{
		i=ssl2_read(s,(char *)&(buf[s->init_num]),1-s->init_num);
		if (i < (1-s->init_num))
			return(ssl2_part_read(s,SSL_F_GET_SERVER_FINISHED,i));
d932 9
a940 15
		if (*p == SSL2_MT_REQUEST_CERTIFICATE)
			{
			s->state=SSL2_ST_SEND_CLIENT_CERTIFICATE_A;
			return(1);
			}
		else if (*p != SSL2_MT_SERVER_FINISHED)
			{
			if (p[0] != SSL2_MT_ERROR)
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_SERVER_FINISHED,SSL_R_READ_WRONG_PACKET_TYPE);
				}
			else
				{
				SSLerr(SSL_F_GET_SERVER_FINISHED,SSL_R_PEER_ERROR);
d942 2
a943 4
				i=ssl2_read(s,(char *)&(p[s->init_num]),3-s->init_num);
				return ssl2_part_read(s,SSL_F_GET_SERVER_VERIFY,i);
				}
			return(-1);
d945 1
a945 1
		s->state=SSL2_ST_GET_SERVER_FINISHED_B;
d947 2
d954 1
a954 1
		return(ssl2_part_read(s,SSL_F_GET_SERVER_FINISHED,i));
d960 1
a960 1
		{
d965 4
a968 7
		s->session->session_id_length=SSL2_SSL_SESSION_ID_LENGTH;
		memcpy(s->session->session_id,p+1,SSL2_SSL_SESSION_ID_LENGTH);
		}
	else
		{
		if (!(s->options & SSL_OP_MICROSOFT_SESS_ID_BUG))
			{
d971 4
a974 6
			                    (unsigned int)s->session->session_id_length)))
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_SERVER_FINISHED,SSL_R_SSL_SESSION_ID_IS_DIFFERENT);
				return(-1);
				}
d977 1
d979 2
a980 2
	return(1);
	}
d983 6
a988 5
int ssl2_set_certificate(SSL *s, int type, int len, const unsigned char *data)
	{
	STACK_OF(X509) *sk=NULL;
	EVP_PKEY *pkey=NULL;
	SESS_CERT *sc=NULL;
d990 6
a995 7
	X509 *x509=NULL;
	int ret=0;
	
	x509=d2i_X509(NULL,&data,(long)len);
	if (x509 == NULL)
		{
		SSLerr(SSL_F_SSL2_SET_CERTIFICATE,ERR_R_X509_LIB);
d997 1
a997 1
		}
d999 2
a1000 3
	if ((sk=sk_X509_new_null()) == NULL || !sk_X509_push(sk,x509))
		{
		SSLerr(SSL_F_SSL2_SET_CERTIFICATE,ERR_R_MALLOC_FAILURE);
d1002 3
a1004 1
		}
d1006 2
a1007 5
	i=ssl_verify_cert_chain(s,sk);
		
	if ((s->verify_mode != SSL_VERIFY_NONE) && (i <= 0))
		{
		SSLerr(SSL_F_SSL2_SET_CERTIFICATE,SSL_R_CERTIFICATE_VERIFY_FAILED);
d1009 1
a1009 1
		}
d1014 3
a1016 4
	sc=ssl_sess_cert_new();
	if (sc == NULL)
		{
		ret= -1;
d1018 12
a1029 12
		}
	if (s->session->sess_cert) ssl_sess_cert_free(s->session->sess_cert);
	s->session->sess_cert=sc;

	sc->peer_pkeys[SSL_PKEY_RSA_ENC].x509=x509;
	sc->peer_key= &(sc->peer_pkeys[SSL_PKEY_RSA_ENC]);

	pkey=X509_get_pubkey(x509);
	x509=NULL;
	if (pkey == NULL)
		{
		SSLerr(SSL_F_SSL2_SET_CERTIFICATE,SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY);
d1031 3
a1033 4
		}
	if (pkey->type != EVP_PKEY_RSA)
		{
		SSLerr(SSL_F_SSL2_SET_CERTIFICATE,SSL_R_PUBLIC_KEY_NOT_RSA);
d1035 1
a1035 1
		}
d1037 1
a1037 1
	if (!ssl_set_peer_cert_type(sc,SSL2_CT_X509_CERTIFICATE))
d1039 1
a1039 1
	ret=1;
d1044 2
a1045 2
	return(ret);
	}
d1047 6
a1052 5
static int ssl_rsa_public_encrypt(SESS_CERT *sc, int len, unsigned char *from,
	     unsigned char *to, int padding)
	{
	EVP_PKEY *pkey=NULL;
	int i= -1;
d1055 6
a1060 8
		((pkey=X509_get_pubkey(sc->peer_key->x509)) == NULL))
		{
		SSLerr(SSL_F_SSL_RSA_PUBLIC_ENCRYPT,SSL_R_NO_PUBLICKEY);
		return(-1);
		}
	if (pkey->type != EVP_PKEY_RSA)
		{
		SSLerr(SSL_F_SSL_RSA_PUBLIC_ENCRYPT,SSL_R_PUBLIC_KEY_IS_NOT_RSA);
d1062 1
a1062 1
		}
d1065 1
a1065 1
	i=RSA_public_encrypt(len,from,to,pkey->pkey.rsa,padding);
d1067 1
a1067 1
		SSLerr(SSL_F_SSL_RSA_PUBLIC_ENCRYPT,ERR_R_RSA_LIB);
d1070 2
a1071 2
	return(i);
	}
d1075 1
a1075 1
static void *dummy=&dummy;
@


1.18
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d155 1
a155 1
	clear_sys_error();
@


1.17
log
@cherry pick bugfixes for http://www.openssl.org/news/secadv_20130205.txt
from the openssl git (changes between openssl 1.0.1c and 1.0.1d).
ok djm@@
@
text
@d362 6
a367 4
#ifdef __APPLE_CC__
		/* The Rhapsody 5.5 (a.k.a. MacOS X) compiler bug
		 * workaround. <appro@@fy.chalmers.se> */
		s->hit=(i=*(p++))?1:0;
d369 1
a369 1
		s->hit=(*(p++))?1:0;
d942 1
a942 1
	if (timingsafe_bcmp(p,s->s2->challenge,s->s2->challenge_length) != 0)
@


1.16
log
@resolve conflicts, fix local changes
@
text
@d940 1
a940 1
	if (memcmp(p,s->s2->challenge,s->s2->challenge_length) != 0)
@


1.15
log
@resolve conflicts
@
text
@d120 1
a120 1
static SSL_METHOD *ssl2_get_client_method(int ver);
d132 1
a132 1
static SSL_METHOD *ssl2_get_client_method(int ver)
d624 1
a624 1
		if (!ssl_cipher_get_evp(s->session,&c,&md,NULL))
d866 4
a869 2
		n=i2d_X509(s->session->sess_cert->peer_key->x509,&p);
		EVP_SignUpdate(&ctx,buf,(unsigned int)n);
@


1.14
log
@resolve conflicts
@
text
@d1047 1
a1047 1
	if ((s->verify_mode != SSL_VERIFY_NONE) && (!i))
@


1.13
log
@openssl security fixes, diff from markus@@, ok & "commit it" djm@@
http://www.openssl.org/news/secadv_20060928.txt for more
@
text
@d140 4
a143 22
SSL_METHOD *SSLv2_client_method(void)
	{
	static int init=1;
	static SSL_METHOD SSLv2_client_data;

	if (init)
		{
		CRYPTO_w_lock(CRYPTO_LOCK_SSL_METHOD);

		if (init)
			{
			memcpy((char *)&SSLv2_client_data,(char *)sslv2_base_method(),
				sizeof(SSL_METHOD));
			SSLv2_client_data.ssl_connect=ssl2_connect;
			SSLv2_client_data.get_ssl_method=ssl2_get_client_method;
			init=0;
			}

		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_METHOD);
		}
	return(&SSLv2_client_data);
	}
d469 1
a469 1
		sk_SSL_CIPHER_set_cmp_func(sk,ssl_cipher_ptr_id_cmp);
d473 1
a473 1
		sk_SSL_CIPHER_set_cmp_func(cl,ssl_cipher_ptr_id_cmp);
d523 2
a524 2
	if (s->session->sess_cert == NULL ||
	    s->session->peer != s->session->sess_cert->peer_key->x509)
d598 1
a598 1
		if(RAND_pseudo_bytes(s->s2->challenge,SSL2_CHALLENGE_LENGTH) <= 0)
d648 1
a648 1
			if(RAND_pseudo_bytes(sess->key_arg,i) <= 0)
d656 1
a656 1
			if (i > sizeof sess->master_key)
d676 1
a676 1
		if (i < enc)
d705 1
a705 1
		if (karg > sizeof sess->key_arg)
d1023 1
a1023 1
int ssl2_set_certificate(SSL *s, int type, int len, unsigned char *data)
@


1.13.6.1
log
@Fix CVE-2008-5077: Incorrect checks for malformed signatures
@
text
@d1065 1
a1065 1
	if ((s->verify_mode != SSL_VERIFY_NONE) && (i <= 0))
@


1.13.8.1
log
@Fix CVE-2008-5077: Incorrect checks for malformed signatures
@
text
@d1065 1
a1065 1
	if ((s->verify_mode != SSL_VERIFY_NONE) && (i <= 0))
@


1.12
log
@resolve conflicts
@
text
@d541 2
a542 1
	if (s->session->peer != s->session->sess_cert->peer_key->x509)
@


1.12.2.1
log
@MFC:
Fix by pvalchev@@

openssl security fixes, diff from markus@@, ok & "commit it" djm@@
http://www.openssl.org/news/secadv_20060928.txt for more
@
text
@d541 1
a541 2
	if (s->session->sess_cert == NULL ||
	    s->session->peer != s->session->sess_cert->peer_key->x509)
@


1.11
log
@resolve conflicts
@
text
@d165 1
a165 1
	unsigned long l=time(NULL);
d587 1
a587 1
		n=ssl_cipher_list_to_bytes(s,SSL_get_ciphers(s),d);
@


1.11.2.1
log
@MFC:
Fix by pvalchev@@

openssl security fixes, diff from markus@@, ok & "commit it" djm@@
http://www.openssl.org/news/secadv_20060928.txt for more
@
text
@d541 1
a541 2
	if (s->session->sess_cert == NULL ||
	    s->session->peer != s->session->sess_cert->peer_key->x509)
@


1.11.4.1
log
@MFC:
Fix by pvalchev@@

openssl security fixes, diff from markus@@, ok & "commit it" djm@@
http://www.openssl.org/news/secadv_20060928.txt for more
@
text
@d541 1
a541 2
	if (s->session->sess_cert == NULL ||
	    s->session->peer != s->session->sess_cert->peer_key->x509)
@


1.10
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d615 2
a616 1
		RAND_pseudo_bytes(s->s2->challenge,SSL2_CHALLENGE_LENGTH);
d664 3
a666 1
		if (i > 0) RAND_pseudo_bytes(sess->key_arg,i);
@


1.9
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d147 12
a158 5
		memcpy((char *)&SSLv2_client_data,(char *)sslv2_base_method(),
			sizeof(SSL_METHOD));
		SSLv2_client_data.ssl_connect=ssl2_connect;
		SSLv2_client_data.get_ssl_method=ssl2_get_client_method;
		init=0;
d210 2
d216 1
d343 2
d777 2
a778 2
			SSL2_MAX_CERT_CHALLENGE_LENGTH+1-s->init_num);
		if (i<(SSL2_MIN_CERT_CHALLENGE_LENGTH+1-s->init_num))
d878 1
a878 1
			(unsigned int)s->s2->key_material_length);
d952 1
a952 1
	if (memcmp(p,s->s2->challenge,(unsigned int)s->s2->challenge_length) != 0)
d1016 1
a1016 1
		memcpy(s->session->session_id,p,SSL2_SSL_SESSION_ID_LENGTH);
d1023 1
a1023 1
			    || (0 != memcmp(buf, s->session->session_id,
@


1.8
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d538 6
a543 1
	die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
d645 6
a650 1
		die(i <= SSL_MAX_KEY_ARG_LENGTH);
d658 6
a663 1
			die(i <= sizeof sess->master_key);
d707 6
a712 1
		die(karg <= sizeof sess->key_arg);
d733 5
a737 1
		die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
d1010 3
a1012 4
			die(s->session->session_id_length
			    <= sizeof s->session->session_id);
			if (memcmp(buf,s->session->session_id,
				(unsigned int)s->session->session_id_length) != 0)
@


1.7
log
@apply patches from OpenSSL Security Advisory [30 July 2002],
http://marc.theaimsgroup.com/?l=openssl-dev&m=102802395104110&w=2
@
text
@a118 1
#include "ssl_locl.h"
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d119 1
d539 1
d641 1
d649 1
d693 1
d714 1
d987 2
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d58 53
d113 1
a113 1
#ifndef NO_SSL2
d161 1
a161 1
	void (*cb)()=NULL;
d174 1
a175 1
	s->in_handshake++;
d343 2
a344 1
	STACK_OF(SSL_CIPHER) *sk=NULL,*cl;
d353 1
a381 1
		s->init_num=0;
d385 8
a392 3
	j=s->s2->tmp.cert_length+s->s2->tmp.csl+s->s2->tmp.conn_id_length
		- s->init_num;
	i=ssl2_read(s,(char *)&(buf[s->init_num]),j);
d394 2
d399 1
a399 1
	p=buf;
d478 2
a479 1
		cl=ssl_get_ciphers_by_id(s);
d481 15
d501 1
a501 1
		for (i=0; i<sk_SSL_CIPHER_num(cl); i++)
d503 2
a504 2
			if (sk_SSL_CIPHER_find(sk,
					       sk_SSL_CIPHER_value(cl,i)) >= 0)
d508 1
a508 1
		if (i >= sk_SSL_CIPHER_num(cl))
d514 1
a514 1
		s->session->cipher=sk_SSL_CIPHER_value(cl,i);
d520 1
a520 1
			SSLerr(SSL_F_GET_SERVER_HELLO, SSL_R_INTERNAL_ERROR);
d533 1
a533 1
		SSLerr(SSL_F_GET_SERVER_HELLO, SSL_R_INTERNAL_ERROR);
d725 1
a725 1
	int cert_ch_len=0;
a728 1
	cert_ch= &(buf[2]);
d739 3
a750 1
		cert_ch_len=i-1;
d762 3
d834 2
a835 1
		EVP_SignInit(&ctx,s->ctx->rsa_md5);
d856 1
a856 1
		memset(&ctx,0,sizeof(ctx));
d871 1
a871 1
	int i;
d879 1
a881 1
		s->init_num=0;
d891 6
a896 2
				SSLerr(SSL_F_GET_SERVER_VERIFY,
					SSL_R_PEER_ERROR);
d902 4
a905 3
	i=ssl2_read(s,(char *)&(p[s->init_num]),
		(unsigned int)s->s2->challenge_length-s->init_num);
	if (i < ((int)s->s2->challenge_length-s->init_num))
d907 4
d924 1
a924 1
	int i;
d933 2
a934 1
		s->init_num=i;
d948 1
d950 4
d956 1
a956 2
		s->state=SSL_ST_OK;
		s->init_num=0;
d959 4
a962 3
	i=ssl2_read(s,(char *)&(buf[s->init_num]),
		SSL2_SSL_SESSION_ID_LENGTH-s->init_num);
	if (i < (SSL2_SSL_SESSION_ID_LENGTH-s->init_num))
d964 3
d990 1
d1089 1
a1089 1
#else /* !NO_SSL2 */
@


1.5.4.1
log
@Pull in patch from current:
Fix (markus), errata 013:
apply patches from OpenSSL Security Advisory [30 July 2002],
http://marc.theaimsgroup.com/?l=openssl-dev&m=102802395104110&w=2
@
text
@a65 1
#include "ssl_locl.h"
a460 1
	die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
a561 1
		die(i <= SSL_MAX_KEY_ARG_LENGTH);
a568 1
			die(i <= sizeof sess->master_key);
a611 1
		die(karg <= sizeof sess->key_arg);
a631 1
		die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
a880 2
			die(s->session->session_id_length
			    <= sizeof s->session->session_id);
@


1.5.2.1
log
@Errata #030 (markus):
Fixes for the "OpenSSL Security Advisory [30 July 2002]"
@
text
@a65 1
#include "ssl_locl.h"
a460 1
	die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
a561 1
		die(i <= SSL_MAX_KEY_ARG_LENGTH);
a568 1
			die(i <= sizeof sess->master_key);
a611 1
		die(karg <= sizeof sess->key_arg);
a631 1
		die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
a880 2
			die(s->session->session_id_length
			    <= sizeof s->session->session_id);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d924 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d923 1
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d59 2
a60 1
#ifndef NO_RSA
a64 1
#include "ssl_locl.h"
d111 1
a111 1
	RAND_seed(&l,sizeof(l));
d248 1
a248 1
			 * and we sucessfully add the session-id to the
d313 5
d319 1
d371 1
a371 1
		/* we need to do this incase we were trying to reuse a 
d421 1
a421 1
		 * will check against the list we origionally sent and
a437 1
		}
a438 2
	if (s->session->peer != NULL)
		X509_free(s->session->peer);
d440 11
a450 14
#if 0 /* What is all this meant to accomplish?? */
	/* hmmm, can we have the problem of the other session with this
	 * cert, Free's it before we increment the reference count. */
	CRYPTO_w_lock(CRYPTO_LOCK_X509);
	s->session->peer=s->session->sess_cert->key->x509;
	/* Shouldn't do this: already locked */
	/*CRYPTO_add(&s->session->peer->references,1,CRYPTO_LOCK_X509);*/
	s->session->peer->references++;
	CRYPTO_w_unlock(CRYPTO_LOCK_X509);
#else
	s->session->peer = s->session->sess_cert->peer_key->x509;
    /* peer_key->x509 has been set by ssl2_set_certificate. */
	CRYPTO_add(&s->session->peer->references, 1, CRYPTO_LOCK_X509);
#endif
d452 8
d520 1
a520 1
		RAND_bytes(s->s2->challenge,SSL2_CHALLENGE_LENGTH);
d562 1
a562 1
		if (i > 0) RAND_bytes(sess->key_arg,i);
d567 8
a574 1
		if (i > 0) RAND_bytes(sess->master_key,i);
d771 1
a771 1
			 * We will contiune with a 0 length signature
d986 6
@


1.1
log
@Initial revision
@
text
@d59 1
d61 3
a63 3
#include "rand.h"
#include "buffer.h"
#include "objects.h"
d65 1
a65 1
#include "evp.h"
d67 1
a67 1
#ifndef NOPROTO
d75 1
a75 1
static int ssl_rsa_public_encrypt(CERT *c, int len, unsigned char *from,
a76 11
#else
static int get_server_finished();
static int get_server_verify();
static int get_server_hello();
static int client_hello(); 
static int client_master_key();
static int client_finished();
static int client_certificate();
static int ssl_rsa_public_encrypt();
#endif

d79 1
a79 2
static SSL_METHOD *ssl2_get_client_method(ver)
int ver;
d87 1
a87 1
SSL_METHOD *SSLv2_client_method()
a93 1
		init=0;
d98 1
d103 1
a103 2
int ssl2_connect(s)
SSL *s;
d111 1
a111 1
	RAND_seed((unsigned char *)&l,sizeof(l));
d135 1
d156 1
a156 1
			s->ctx->sess_connect++;
d239 5
a243 2
			BUF_MEM_free(s->init_buf);
			s->init_buf=NULL;
d254 1
a254 1
			if (s->hit) s->ctx->sess_hit++;
d258 1
a258 1
			s->ctx->sess_connect_good++;
d263 1
a263 1
			break;
d285 1
a285 2
static int get_server_hello(s)
SSL *s;
d290 1
a290 1
	STACK *sk=NULL,*cl;
d399 1
a399 1
			&s->session->ciphers);
d408 1
a408 1
		sk_set_cmp_func(sk,ssl_cipher_ptr_id_cmp);
d418 1
a418 1
		for (i=0; i<sk_num(cl); i++)
d420 2
a421 1
			if (sk_find(sk,sk_value(cl,i)) >= 0)
d425 1
a425 1
		if (i >= sk_num(cl))
d431 1
a431 1
		s->session->cipher=(SSL_CIPHER *)sk_value(cl,i);
d434 1
a434 1
	if ((s->session != NULL) && (s->session->peer != NULL))
d437 1
d441 4
a444 2
	s->session->peer=s->session->cert->key->x509;
	CRYPTO_add(&s->session->peer->references,1,CRYPTO_LOCK_X509);
d446 5
d457 1
a457 2
static int client_hello(s)
SSL *s;
d481 1
a481 1
		s2n(SSL2_CLIENT_VERSION,p);		/* version */
d524 1
a524 2
static int client_master_key(s)
SSL *s;
d530 2
a531 2
	EVP_CIPHER *c;
	EVP_MD *md;
d537 1
a537 1
		if (!ssl_cipher_get_evp(s->session->cipher,&c,&md))
d563 1
a563 1
		else if (sess->cipher->algorithms & SSL_EXP)
d579 1
a579 1
		enc=ssl_rsa_public_encrypt(sess->cert,enc,
d588 5
d609 1
a609 2
static int client_finished(s)
SSL *s;
d627 1
a627 2
static int client_certificate(s)
SSL *s;
d742 1
a742 1
		n=i2d_X509(s->session->cert->key->x509,&p);
d771 1
a771 2
static int get_server_verify(s)
SSL *s;
d814 1
a814 2
static int get_server_finished(s)
SSL *s;
d879 1
a879 5
int ssl2_set_certificate(s, type, len, data)
SSL *s;
int type;
int len;
unsigned char *data;
d881 1
a881 1
	STACK *sk=NULL;
d883 1
a883 1
	CERT *c=NULL;
d895 1
a895 2
	if (((sk=sk_new_null()) == NULL) ||
		(!sk_push(sk,(char *)x509)))
d909 3
a911 3
	/* cert for ssl */
	c=ssl_cert_new();
	if (c == NULL)
d916 2
d919 2
a920 8
	/* cert for session */
	if (s->session->cert) ssl_cert_free(s->session->cert);
	s->session->cert=c;

/*	c->cert_type=type; */

	c->pkeys[SSL_PKEY_RSA_ENC].x509=x509;
	c->key= &(c->pkeys[SSL_PKEY_RSA_ENC]);
d935 1
a935 1
	if (!ssl_set_cert_type(c,SSL2_CT_X509_CERTIFICATE))
d939 3
a941 2
	if (sk != NULL) sk_free(sk);
	if (x509 != NULL) X509_free(x509);
d945 2
a946 6
static int ssl_rsa_public_encrypt(c, len, from, to, padding)
CERT *c;
int len;
unsigned char *from;
unsigned char *to;
int padding;
d951 2
a952 2
	if ((c == NULL) || (c->key->x509 == NULL) ||
		((pkey=X509_get_pubkey(c->key->x509)) == NULL))
d968 1
d971 1
a971 1

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a57 53
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
d59 4
d64 1
a64 6
#ifndef OPENSSL_NO_SSL2
#include <stdio.h>
#include <openssl/rand.h>
#include <openssl/buffer.h>
#include <openssl/objects.h>
#include <openssl/evp.h>
d66 1
a66 1
static SSL_METHOD *ssl2_get_client_method(int ver);
d74 1
a74 1
static int ssl_rsa_public_encrypt(SESS_CERT *sc, int len, unsigned char *from,
d76 11
d89 2
a90 1
static SSL_METHOD *ssl2_get_client_method(int ver)
d98 1
a98 1
SSL_METHOD *SSLv2_client_method(void)
d105 1
a109 1
		init=0;
d114 2
a115 1
int ssl2_connect(SSL *s)
d120 1
a120 1
	void (*cb)(const SSL *ssl,int type,int val)=NULL;
d123 1
a123 1
	RAND_add(&l,sizeof(l),0);
d133 1
a134 1
	if (!SSL_in_init(s) || SSL_in_before(s)) SSL_clear(s);
a146 1
			s->server=0;
d167 1
a167 1
			s->ctx->stats.sess_connect++;
d250 2
a251 5
			if (s->init_buf != NULL)
				{
				BUF_MEM_free(s->init_buf);
				s->init_buf=NULL;
				}
d256 1
a256 1
			 * and we successfully add the session-id to the
d262 1
a262 1
			if (s->hit) s->ctx->stats.sess_hit++;
d266 1
a266 1
			s->ctx->stats.sess_connect_good++;
d271 1
a271 1
			/* break; */
d293 2
a294 1
static int get_server_hello(SSL *s)
d299 1
a299 2
	unsigned long len;
	STACK_OF(SSL_CIPHER) *sk=NULL,*cl, *prio, *allow;
a307 1
		s->init_num = 11;
a321 5
#ifdef __APPLE_CC__
		/* The Rhapsody 5.5 (a.k.a. MacOS X) compiler bug
		 * workaround. <appro@@fy.chalmers.se> */
		s->hit=(i=*(p++))?1:0;
#else
a322 1
#endif
d330 1
d334 3
a336 8
	len = 11 + (unsigned long)s->s2->tmp.cert_length + (unsigned long)s->s2->tmp.csl + (unsigned long)s->s2->tmp.conn_id_length;
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
		{
		SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_MESSAGE_TOO_LONG);
		return -1;
		}
	j = (int)len - s->init_num;
	i = ssl2_read(s,(char *)&(buf[s->init_num]),j);
a337 2
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, buf, (size_t)len, s, s->msg_callback_arg); /* SERVER-HELLO */
d341 1
a341 1
	p = buf + 11;
d374 1
a374 1
		/* we need to do this in case we were trying to reuse a 
d408 1
a408 1
					    &s->session->ciphers);
d417 1
a417 1
		sk_SSL_CIPHER_set_cmp_func(sk,ssl_cipher_ptr_id_cmp);
d420 1
a420 2
		cl=SSL_get_ciphers(s);
		sk_SSL_CIPHER_set_cmp_func(cl,ssl_cipher_ptr_id_cmp);
a421 15
		/*
		 * If server preference flag set, choose the first
		 * (highest priority) cipher the server sends, otherwise
		 * client preference has priority.
		 */
		if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE)
		    {
		    prio = sk;
		    allow = cl;
		    }
		else
		    {
		    prio = cl;
		    allow = sk;
		    }
d424 1
a424 1
		 * will check against the list we originally sent and
d427 1
a427 1
		for (i=0; i<sk_SSL_CIPHER_num(prio); i++)
d429 1
a429 2
			if (sk_SSL_CIPHER_find(allow,
					     sk_SSL_CIPHER_value(prio,i)) >= 0)
d433 1
a433 1
		if (i >= sk_SSL_CIPHER_num(prio))
d439 2
a440 1
		s->session->cipher=sk_SSL_CIPHER_value(prio,i);
d442 2
d445 6
a450 6
		if (s->session->peer != NULL) /* can't happen*/
			{
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_GET_SERVER_HELLO, ERR_R_INTERNAL_ERROR);
			return(-1);
			}
a451 13
		s->session->peer = s->session->sess_cert->peer_key->x509;
		/* peer_key->x509 has been set by ssl2_set_certificate. */
		CRYPTO_add(&s->session->peer->references, 1, CRYPTO_LOCK_X509);
		}

	if (s->session->peer != s->session->sess_cert->peer_key->x509)
		/* can't happen */
		{
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_SERVER_HELLO, ERR_R_INTERNAL_ERROR);
		return(-1);
		}
		
d457 2
a458 1
static int client_hello(SSL *s)
d482 1
a482 1
		s2n(SSL2_VERSION,p);			/* version */
d513 1
a513 1
		RAND_pseudo_bytes(s->s2->challenge,SSL2_CHALLENGE_LENGTH);
d525 2
a526 1
static int client_master_key(SSL *s)
d532 2
a533 2
	const EVP_CIPHER *c;
	const EVP_MD *md;
d539 1
a539 1
		if (!ssl_cipher_get_evp(s->session,&c,&md,NULL))
d556 1
a556 1
		if (i > 0) RAND_pseudo_bytes(sess->key_arg,i);
d561 1
a561 8
		if (i > 0)
			{
			if (RAND_bytes(sess->master_key,i) <= 0)
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
				return(-1);
				}
			}
d565 1
a565 1
		else if (SSL_C_IS_EXPORT(sess->cipher))
d581 1
a581 1
		enc=ssl_rsa_public_encrypt(sess->sess_cert,enc,
a589 5
#ifdef PKCS1_CHECK
		if (s->options & SSL_OP_PKCS1_CHECK_1) d[1]++;
		if (s->options & SSL_OP_PKCS1_CHECK_2)
			sess->master_key[clear]++;
#endif
d606 2
a607 1
static int client_finished(SSL *s)
d625 2
a626 1
static int client_certificate(SSL *s)
d632 1
a632 1
	int cert_ch_len;
d636 1
a646 3
		s->init_num += i;
		if (s->msg_callback)
			s->msg_callback(0, s->version, 0, buf, (size_t)s->init_num, s, s->msg_callback_arg); /* REQUEST-CERTIFICATE */
d656 1
a667 3
	cert_ch = buf + 2;
	cert_ch_len = s->init_num - 2;

d737 1
a737 2
		EVP_MD_CTX_init(&ctx);
		EVP_SignInit_ex(&ctx,s->ctx->rsa_md5, NULL);
d741 1
a741 1
		n=i2d_X509(s->session->sess_cert->peer_key->x509,&p);
d755 1
a755 1
			 * We will continue with a 0 length signature
d758 1
a758 1
		EVP_MD_CTX_cleanup(&ctx);
d770 2
a771 1
static int get_server_verify(SSL *s)
d774 1
a774 1
	int i, n, len;
a781 1
		s->init_num += i;
d784 1
d794 2
a795 6
				{
				SSLerr(SSL_F_GET_SERVER_VERIFY,SSL_R_PEER_ERROR);
				/* try to read the error message */
				i=ssl2_read(s,(char *)&(p[s->init_num]),3-s->init_num);
				return ssl2_part_read(s,SSL_F_GET_SERVER_VERIFY,i);
				}
d801 3
a803 4
	len = 1 + s->s2->challenge_length;
	n =  len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]),n);
	if (i < n)
a804 4
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, p, len, s, s->msg_callback_arg); /* SERVER-VERIFY */
	p += 1;

d814 2
a815 1
static int get_server_finished(SSL *s)
d819 1
a819 1
	int i, n, len;
d828 1
a828 2
		s->init_num += i;

a841 1
				{
a842 4
				/* try to read the error message */
				i=ssl2_read(s,(char *)&(p[s->init_num]),3-s->init_num);
				return ssl2_part_read(s,SSL_F_GET_SERVER_VERIFY,i);
				}
d845 2
a846 1
		s->state=SSL2_ST_GET_SERVER_FINISHED_B;
d849 3
a851 4
	len = 1 + SSL2_SSL_SESSION_ID_LENGTH;
	n = len - s->init_num;
	i = ssl2_read(s,(char *)&(buf[s->init_num]), n);
	if (i < n) /* XXX could be shorter than SSL2_SSL_SESSION_ID_LENGTH, that's the maximum */
a852 3
	s->init_num += i;
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, buf, (size_t)s->init_num, s, s->msg_callback_arg); /* SERVER-FINISHED */
a875 1
	s->state = SSL_ST_OK;
d880 5
a884 1
int ssl2_set_certificate(SSL *s, int type, int len, unsigned char *data)
d886 1
a886 1
	STACK_OF(X509) *sk=NULL;
d888 1
a888 1
	SESS_CERT *sc=NULL;
d900 2
a901 1
	if ((sk=sk_X509_new_null()) == NULL || !sk_X509_push(sk,x509))
a913 2
	ERR_clear_error(); /* but we keep s->verify_result */
	s->session->verify_result = s->verify_result;
d915 3
a917 3
	/* server's cert for this session */
	sc=ssl_sess_cert_new();
	if (sc == NULL)
a921 2
	if (s->session->sess_cert) ssl_sess_cert_free(s->session->sess_cert);
	s->session->sess_cert=sc;
d923 8
a930 2
	sc->peer_pkeys[SSL_PKEY_RSA_ENC].x509=x509;
	sc->peer_key= &(sc->peer_pkeys[SSL_PKEY_RSA_ENC]);
d945 1
a945 1
	if (!ssl_set_peer_cert_type(sc,SSL2_CT_X509_CERTIFICATE))
d949 2
a950 3
	sk_X509_free(sk);
	X509_free(x509);
	EVP_PKEY_free(pkey);
d954 6
a959 2
static int ssl_rsa_public_encrypt(SESS_CERT *sc, int len, unsigned char *from,
	     unsigned char *to, int padding)
d964 2
a965 2
	if ((sc == NULL) || (sc->peer_key->x509 == NULL) ||
		((pkey=X509_get_pubkey(sc->peer_key->x509)) == NULL))
a980 1
	EVP_PKEY_free(pkey);
a982 5
#else /* !OPENSSL_NO_SSL2 */

# if PEDANTIC
static void *dummy=&dummy;
# endif
a983 1
#endif
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@a118 1
#include "cryptlib.h"
a537 1
	die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
a638 1
		die(i <= SSL_MAX_KEY_ARG_LENGTH);
a645 1
			die(i <= sizeof sess->master_key);
a688 1
		die(karg <= sizeof sess->key_arg);
a708 1
		die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
a980 2
			die(s->session->session_id_length
			    <= sizeof s->session->session_id);
@


1.1.1.4
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d539 1
a539 6
	if (s->s2->conn_id_length > sizeof s->s2->conn_id)
		{
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_SERVER_HELLO, SSL_R_SSL2_CONNECTION_ID_TOO_LONG);
		return -1;
		}
d641 1
a641 6
		if (i > SSL_MAX_KEY_ARG_LENGTH)
			{
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_CLIENT_MASTER_KEY, ERR_R_INTERNAL_ERROR);
			return -1;
			}
d649 1
a649 6
			if (i > sizeof sess->master_key)
				{
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_CLIENT_MASTER_KEY, ERR_R_INTERNAL_ERROR);
				return -1;
				}
d693 1
a693 6
		if (karg > sizeof sess->key_arg)
			{
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_CLIENT_MASTER_KEY, ERR_R_INTERNAL_ERROR);
			return -1;
			}
d714 1
a714 5
		if (s->s2->conn_id_length > sizeof s->s2->conn_id)
			{
			SSLerr(SSL_F_CLIENT_FINISHED, ERR_R_INTERNAL_ERROR);
			return -1;
			}
d987 4
a990 3
			if ((s->session->session_id_length > sizeof s->session->session_id)
			    || (0 != memcmp(buf, s->session->session_id,
			                    (unsigned int)s->session->session_id_length)))
@


1.1.1.5
log
@import 0.9.7b (without idea and rc5)
@
text
@d148 5
a152 12
		CRYPTO_w_lock(CRYPTO_LOCK_SSL_METHOD);

		if (init)
			{
			memcpy((char *)&SSLv2_client_data,(char *)sslv2_base_method(),
				sizeof(SSL_METHOD));
			SSLv2_client_data.ssl_connect=ssl2_connect;
			SSLv2_client_data.get_ssl_method=ssl2_get_client_method;
			init=0;
			}

		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_METHOD);
a203 2
				if (buf == s->init_buf)
					buf=NULL;
a207 1
			buf=NULL;
a333 2
	if (buf != NULL)
		BUF_MEM_free(buf);
d766 2
a767 2
			SSL2_MAX_CERT_CHALLENGE_LENGTH+2-s->init_num);
		if (i<(SSL2_MIN_CERT_CHALLENGE_LENGTH+2-s->init_num))
d867 1
a867 1
			       s->s2->key_material_length);
d941 1
a941 1
	if (memcmp(p,s->s2->challenge,s->s2->challenge_length) != 0)
d1005 1
a1005 1
		memcpy(s->session->session_id,p+1,SSL2_SSL_SESSION_ID_LENGTH);
d1012 1
a1012 1
			    || (0 != memcmp(buf + 1, s->session->session_id,
@


1.1.1.6
log
@import openssl-0.9.7d
@
text
@d119 1
@


1.1.1.7
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d615 1
a615 2
		if(RAND_pseudo_bytes(s->s2->challenge,SSL2_CHALLENGE_LENGTH) <= 0)
			return -1;
d663 1
a663 3
		if (i > 0)
			if(RAND_pseudo_bytes(sess->key_arg,i) <= 0)
				return -1;
@


1.1.1.8
log
@import of openssl-0.9.7j
@
text
@d165 1
a165 1
	unsigned long l=(unsigned long)time(NULL);
d587 1
a587 1
		n=ssl_cipher_list_to_bytes(s,SSL_get_ciphers(s),d,0);
@


1.1.1.9
log
@import of OpenSSL 0.9.8h
@
text
@d140 22
a161 4
IMPLEMENT_ssl2_meth_func(SSLv2_client_method,
			ssl_undefined_function,
			ssl2_connect,
			ssl2_get_client_method)
d487 1
a487 1
		(void)sk_SSL_CIPHER_set_cmp_func(sk,ssl_cipher_ptr_id_cmp);
d491 1
a491 1
		(void)sk_SSL_CIPHER_set_cmp_func(cl,ssl_cipher_ptr_id_cmp);
d541 1
a541 2
	if (s->session->sess_cert == NULL 
      || s->session->peer != s->session->sess_cert->peer_key->x509)
d615 1
a615 1
		if (RAND_pseudo_bytes(s->s2->challenge,SSL2_CHALLENGE_LENGTH) <= 0)
d665 1
a665 1
			if (RAND_pseudo_bytes(sess->key_arg,i) <= 0)
d673 1
a673 1
			if (i > (int)sizeof(sess->master_key))
d693 1
a693 1
		if ((int)i < enc)
d722 1
a722 1
		if (karg > (int)sizeof(sess->key_arg))
d1040 1
a1040 1
int ssl2_set_certificate(SSL *s, int type, int len, const unsigned char *data)
@


1.1.1.10
log
@import openssl-0.9.8j
@
text
@d1047 1
a1047 1
	if ((s->verify_mode != SSL_VERIFY_NONE) && (i <= 0))
@


1.1.1.11
log
@import OpenSSL-1.0.0a
@
text
@d120 1
a120 1
static const SSL_METHOD *ssl2_get_client_method(int ver);
d132 1
a132 1
static const SSL_METHOD *ssl2_get_client_method(int ver)
d624 1
a624 1
		if (!ssl_cipher_get_evp(s->session,&c,&md,NULL,NULL,NULL))
d866 2
a867 4
		i=i2d_X509(s->session->sess_cert->peer_key->x509,&p);
		/* Don't update the signature if it fails - FIXME: probably should handle this better */
		if(i > 0)
			EVP_SignUpdate(&ctx,buf,(unsigned int)i);
@


1.1.1.12
log
@Import OpenSSL 1.0.1g
@
text
@d362 5
a366 1
#if 0
a367 6
		/* Some [PPC?] compilers fail to increment p in above
		   statement, e.g. one provided with Rhapsody 5.5, but
		   most recent example XL C 11.1 for AIX, even without
		   optimization flag... */
#else
		s->hit=(*p)?1:0; p++;
d940 1
a940 1
	if (CRYPTO_memcmp(p,s->s2->challenge,s->s2->challenge_length) != 0)
@


