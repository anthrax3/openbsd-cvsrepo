head	1.11;
access;
symbols
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.6
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.5
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.5
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.5
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.4
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.4
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.3
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.04.15.21.47.56;	author tedu;	state dead;
branches;
next	1.10;

1.10
date	2014.04.14.15.37.01;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.40;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.36;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.27;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.26;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.12;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.12;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.32;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.12.20.52.27;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.21.36.37;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.04.07.20.42.05;	author markus;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove ssl2 support even more completely.
in the process, always include ssl3 and tls1, we don't need config options
for them. when the time comes to expire ssl3, it will be with an ax.
checked by miod
@
text
@/* ssl/s2_enc.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include "ssl_locl.h"
#ifndef OPENSSL_NO_SSL2
#include <stdio.h>

int
ssl2_enc_init(SSL *s, int client)
{
	/* Max number of bytes needed */
	EVP_CIPHER_CTX *rs, *ws;
	const EVP_CIPHER *c;
	const EVP_MD *md;
	int num;

	if (!ssl_cipher_get_evp(s->session, &c, &md, NULL, NULL, NULL)) {
		ssl2_return_error(s, SSL2_PE_NO_CIPHER);
		SSLerr(SSL_F_SSL2_ENC_INIT, SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS);
		return (0);
	}
	ssl_replace_hash(&s->read_hash, md);
	ssl_replace_hash(&s->write_hash, md);

	if ((s->enc_read_ctx == NULL) && ((s->enc_read_ctx =
	    (EVP_CIPHER_CTX *)OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL))
		goto err;

	/* make sure it's intialized in case the malloc for enc_write_ctx fails
	 * and we exit with an error */
	rs = s->enc_read_ctx;
	EVP_CIPHER_CTX_init(rs);

	if ((s->enc_write_ctx == NULL) && ((s->enc_write_ctx =
	    (EVP_CIPHER_CTX *)OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL))
		goto err;

	ws = s->enc_write_ctx;
	EVP_CIPHER_CTX_init(ws);

	num = c->key_len;
	s->s2->key_material_length = num*2;
	OPENSSL_assert(s->s2->key_material_length <= sizeof s->s2->key_material);

	if (ssl2_generate_key_material(s) <= 0)
		return 0;

	OPENSSL_assert(c->iv_len <= (int)sizeof(s->session->key_arg));
	EVP_EncryptInit_ex(ws, c, NULL, &(s->s2->key_material[(client) ? num : 0]),
	s->session->key_arg);
	EVP_DecryptInit_ex(rs, c, NULL, &(s->s2->key_material[(client) ? 0 : num]),
	s->session->key_arg);
	s->s2->read_key = &(s->s2->key_material[(client) ? 0 : num]);
	s->s2->write_key = &(s->s2->key_material[(client) ? num : 0]);
	return (1);
err:
	SSLerr(SSL_F_SSL2_ENC_INIT, ERR_R_MALLOC_FAILURE);
	return (0);
}

/* read/writes from s->s2->mac_data using length for encrypt and 
 * decrypt.  It sets s->s2->padding and s->[rw]length
 * if we are encrypting */
void
ssl2_enc(SSL *s, int send)
{
	EVP_CIPHER_CTX *ds;
	unsigned long l;
	int bs;

	if (send) {
		ds = s->enc_write_ctx;
		l = s->s2->wlength;
	} else {
		ds = s->enc_read_ctx;
		l = s->s2->rlength;
	}

	/* check for NULL cipher */
	if (ds == NULL)
		return;


	bs = ds->cipher->block_size;
	/* This should be using (bs-1) and bs instead of 7 and 8, but
	 * what the hell. */
	if (bs == 8)
		l = (l + 7) / 8 * 8;

	EVP_Cipher(ds, s->s2->mac_data, s->s2->mac_data, l);
}

void
ssl2_mac(SSL *s, unsigned char *md, int send)
{
	EVP_MD_CTX c;
	unsigned char sequence[4], *p, *sec, *act;
	unsigned long seq;
	unsigned int len;

	if (send) {
		seq = s->s2->write_sequence;
		sec = s->s2->write_key;
		len = s->s2->wact_data_length;
		act = s->s2->wact_data;
	} else {
		seq = s->s2->read_sequence;
		sec = s->s2->read_key;
		len = s->s2->ract_data_length;
		act = s->s2->ract_data;
	}

	p = &(sequence[0]);
	l2n(seq, p);

	/* There has to be a MAC algorithm. */
	EVP_MD_CTX_init(&c);
	EVP_MD_CTX_copy(&c, s->read_hash);
	EVP_DigestUpdate(&c, sec,
	EVP_CIPHER_CTX_key_length(s->enc_read_ctx));
	EVP_DigestUpdate(&c, act, len);

	/* the above line also does the pad data */
	EVP_DigestUpdate(&c, sequence, 4);

	EVP_DigestFinal_ex(&c, md, NULL);
	EVP_MD_CTX_cleanup(&c);
}
#else /* !OPENSSL_NO_SSL2 */

# if PEDANTIC
static void *dummy = &dummy;
# endif

#endif
@


1.10
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@@


1.9
log
@resolve conflicts, fix local changes
@
text
@d63 3
a65 2
int ssl2_enc_init(SSL *s, int client)
	{
d67 1
a67 1
	EVP_CIPHER_CTX *rs,*ws;
d72 10
a81 12
	if (!ssl_cipher_get_evp(s->session,&c,&md,NULL,NULL,NULL))
		{
		ssl2_return_error(s,SSL2_PE_NO_CIPHER);
		SSLerr(SSL_F_SSL2_ENC_INIT,SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS);
		return(0);
		}
	ssl_replace_hash(&s->read_hash,md);
	ssl_replace_hash(&s->write_hash,md);

	if ((s->enc_read_ctx == NULL) &&
		((s->enc_read_ctx=(EVP_CIPHER_CTX *)
		OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL))
d86 1
a86 1
	rs= s->enc_read_ctx;
d89 2
a90 3
	if ((s->enc_write_ctx == NULL) &&
		((s->enc_write_ctx=(EVP_CIPHER_CTX *)
		OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL))
d93 1
a93 1
	ws= s->enc_write_ctx;
d96 2
a97 2
	num=c->key_len;
	s->s2->key_material_length=num*2;
d104 7
a110 7
	EVP_EncryptInit_ex(ws,c,NULL,&(s->s2->key_material[(client)?num:0]),
		s->session->key_arg);
	EVP_DecryptInit_ex(rs,c,NULL,&(s->s2->key_material[(client)?0:num]),
		s->session->key_arg);
	s->s2->read_key=  &(s->s2->key_material[(client)?0:num]);
	s->s2->write_key= &(s->s2->key_material[(client)?num:0]);
	return(1);
d112 3
a114 3
	SSLerr(SSL_F_SSL2_ENC_INIT,ERR_R_MALLOC_FAILURE);
	return(0);
	}
d119 3
a121 2
void ssl2_enc(SSL *s, int send)
	{
d126 7
a132 10
	if (send)
		{
		ds=s->enc_write_ctx;
		l=s->s2->wlength;
		}
	else
		{
		ds=s->enc_read_ctx;
		l=s->s2->rlength;
		}
d135 2
a136 1
	if (ds == NULL) return;
d139 1
a139 1
	bs=ds->cipher->block_size;
d143 1
a143 1
		l=(l+7)/8*8;
d145 2
a146 2
	EVP_Cipher(ds,s->s2->mac_data,s->s2->mac_data,l);
	}
d148 3
a150 2
void ssl2_mac(SSL *s, unsigned char *md, int send)
	{
d152 1
a152 1
	unsigned char sequence[4],*p,*sec,*act;
d156 11
a166 14
	if (send)
		{
		seq=s->s2->write_sequence;
		sec=s->s2->write_key;
		len=s->s2->wact_data_length;
		act=s->s2->wact_data;
		}
	else
		{
		seq=s->s2->read_sequence;
		sec=s->s2->read_key;
		len=s->s2->ract_data_length;
		act=s->s2->ract_data;
		}
d168 2
a169 2
	p= &(sequence[0]);
	l2n(seq,p);
d174 4
a177 3
	EVP_DigestUpdate(&c,sec,
		EVP_CIPHER_CTX_key_length(s->enc_read_ctx));
	EVP_DigestUpdate(&c,act,len); 
d179 3
a181 2
	EVP_DigestUpdate(&c,sequence,4); 
	EVP_DigestFinal_ex(&c,md,NULL);
d183 1
a183 1
	}
d187 1
a187 1
static void *dummy=&dummy;
@


1.8
log
@resolve conflicts
@
text
@d71 1
a71 1
	if (!ssl_cipher_get_evp(s->session,&c,&md,NULL))
d77 2
a78 3

	s->read_hash=md;
	s->write_hash=md;
d178 1
a178 1
	EVP_DigestInit_ex(&c, s->read_hash, NULL);
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d85 6
a95 1
	rs= s->enc_read_ctx;
a96 2

	EVP_CIPHER_CTX_init(rs);
d106 1
a106 1
	OPENSSL_assert(c->iv_len <= sizeof s->session->key_arg);
@


1.6
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d98 1
d103 1
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d99 2
a100 1
	ssl2_generate_key_material(s);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d60 1
a60 1
#ifndef NO_SSL2
d101 1
a101 1
	EVP_EncryptInit(ws,c,&(s->s2->key_material[(client)?num:0]),
d103 1
a103 1
	EVP_DecryptInit(rs,c,&(s->s2->key_material[(client)?0:num]),
d114 2
a115 2
 * decrypt.  It sets the s->s2->padding, s->[rw]length and
 * s->s2->pad_data ptr if we are encrypting */
d172 2
a173 1
	EVP_DigestInit(&c,s->read_hash);
d179 2
a180 2
	EVP_DigestFinal(&c,md,NULL);
	/* some would say I should zero the md context */
d182 1
a182 1
#else /* !NO_SSL2 */
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d83 1
a83 1
		Malloc(sizeof(EVP_CIPHER_CTX))) == NULL))
d87 1
a87 1
		Malloc(sizeof(EVP_CIPHER_CTX))) == NULL))
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d59 2
a61 1
#include "ssl_locl.h"
d181 5
d187 1
@


1.1
log
@Initial revision
@
text
@d62 1
a62 3
int ssl2_enc_init(s, client)
SSL *s;
int client;
d66 2
a67 2
	EVP_CIPHER *c;
	EVP_MD *md;
d70 1
a70 1
	if (!ssl_cipher_get_evp(s->session->cipher,&c,&md))
d115 1
a115 3
void ssl2_enc(s,send)
SSL *s;
int send;
d145 1
a145 4
void ssl2_mac(s, md,send)
SSL *s;
unsigned char *md;
int send;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a60 2
#ifndef OPENSSL_NO_SSL2
#include <stdio.h>
d62 3
a64 1
int ssl2_enc_init(SSL *s, int client)
d68 2
a69 2
	const EVP_CIPHER *c;
	const EVP_MD *md;
d72 1
a72 1
	if (!ssl_cipher_get_evp(s->session,&c,&md,NULL))
d84 1
a84 1
		OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL))
d88 1
a88 1
		OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL))
d102 1
a102 1
	EVP_EncryptInit_ex(ws,c,NULL,&(s->s2->key_material[(client)?num:0]),
d104 1
a104 1
	EVP_DecryptInit_ex(rs,c,NULL,&(s->s2->key_material[(client)?0:num]),
d115 5
a119 3
 * decrypt.  It sets s->s2->padding and s->[rw]length
 * if we are encrypting */
void ssl2_enc(SSL *s, int send)
d149 4
a152 1
void ssl2_mac(SSL *s, unsigned char *md, int send)
d178 1
a178 2
	EVP_MD_CTX_init(&c);
	EVP_DigestInit_ex(&c, s->read_hash, NULL);
d184 2
a185 2
	EVP_DigestFinal_ex(&c,md,NULL);
	EVP_MD_CTX_cleanup(&c);
a186 5
#else /* !OPENSSL_NO_SSL2 */

# if PEDANTIC
static void *dummy=&dummy;
# endif
a187 1
#endif
@


1.1.1.3
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d99 1
a99 2
	if (ssl2_generate_key_material(s) <= 0)
		return 0;
@


1.1.1.4
log
@import 0.9.7b (without idea and rc5)
@
text
@a61 1
#include "cryptlib.h"
a97 1
	OPENSSL_assert(s->s2->key_material_length <= sizeof s->s2->key_material);
a101 1
	OPENSSL_assert(c->iv_len <= sizeof s->session->key_arg);
@


1.1.1.5
log
@import openssl-0.9.7d
@
text
@d62 1
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@a84 6

	/* make sure it's intialized in case the malloc for enc_write_ctx fails
	 * and we exit with an error */
	rs= s->enc_read_ctx;
	EVP_CIPHER_CTX_init(rs);

d90 1
d92 2
d103 1
a103 1
	OPENSSL_assert(c->iv_len <= (int)sizeof(s->session->key_arg));
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d71 1
a71 1
	if (!ssl_cipher_get_evp(s->session,&c,&md,NULL,NULL,NULL))
d77 3
a79 2
	ssl_replace_hash(&s->read_hash,md);
	ssl_replace_hash(&s->write_hash,md);
d179 1
a179 1
	EVP_MD_CTX_copy(&c, s->read_hash);
@


