head	1.19;
access;
symbols
	OPENBSD_6_0:1.18.0.8
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.4
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.9.0.12
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.8
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.6
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.09.03.11.33.41;	author beck;	state dead;
branches;
next	1.18;
commitid	HnbXxsegngek41U2;

1.18
date	2014.11.16.14.12.47;	author jsing;	state Exp;
branches;
next	1.17;
commitid	M3pvHgIFoWUHNqJn;

1.17
date	2014.08.10.14.42.56;	author jsing;	state Exp;
branches;
next	1.16;
commitid	wihJupNvfkdpKL9O;

1.16
date	2014.07.11.08.17.36;	author miod;	state Exp;
branches;
next	1.15;
commitid	3cdQWc5wTDwlWJsQ;

1.15
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.04.19.17.07.35;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.19.08.52.32;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.15.21.47.56;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.14.15.15.33;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.13.21.11.19;	author mpi;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.03.02.34.33;	author djm;	state Exp;
branches
	1.9.8.1
	1.9.12.1;
next	1.8;

1.8
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.31;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.22.00.03.39;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.26;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.25;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.11;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.11;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.32;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.27;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.19;	author djm;	state Exp;
branches;
next	;

1.9.8.1
date	2014.08.09.16.55.55;	author tedu;	state Exp;
branches;
next	;
commitid	M9vFauFXshUDHG4j;

1.9.12.1
date	2014.08.09.16.54.58;	author tedu;	state Exp;
branches;
next	;
commitid	iDBdpZ9JdHGZqIAL;


desc
@@


1.19
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: s23_lib.c,v 1.18 2014/11/16 14:12:47 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/objects.h>

#include "ssl_locl.h"

long
ssl23_default_timeout(void)
{
	return (300);
}

int
ssl23_read(SSL *s, void *buf, int len)
{
	int n;

	errno = 0;
	if (SSL_in_init(s) && (!s->in_handshake)) {
		n = s->handshake_func(s);
		if (n < 0)
			return (n);
		if (n == 0) {
			SSLerr(SSL_F_SSL23_READ, SSL_R_SSL_HANDSHAKE_FAILURE);
			return (-1);
		}
		return (SSL_read(s, buf, len));
	} else {
		ssl_undefined_function(s);
		return (-1);
	}
}

int
ssl23_peek(SSL *s, void *buf, int len)
{
	int n;

	errno = 0;
	if (SSL_in_init(s) && (!s->in_handshake)) {
		n = s->handshake_func(s);
		if (n < 0)
			return (n);
		if (n == 0) {
			SSLerr(SSL_F_SSL23_PEEK, SSL_R_SSL_HANDSHAKE_FAILURE);
			return (-1);
		}
		return (SSL_peek(s, buf, len));
	} else {
		ssl_undefined_function(s);
		return (-1);
	}
}

int
ssl23_write(SSL *s, const void *buf, int len)
{
	int n;

	errno = 0;
	if (SSL_in_init(s) && (!s->in_handshake)) {
		n = s->handshake_func(s);
		if (n < 0)
			return (n);
		if (n == 0) {
			SSLerr(SSL_F_SSL23_WRITE, SSL_R_SSL_HANDSHAKE_FAILURE);
			return (-1);
		}
		return (SSL_write(s, buf, len));
	} else {
		ssl_undefined_function(s);
		return (-1);
	}
}
@


1.18
log
@Sort and group includes.
@
text
@d1 1
a1 1
/* $OpenBSD: s23_lib.c,v 1.17 2014/08/10 14:42:56 jsing Exp $ */
@


1.17
log
@Since we no longer need to support SSLv2-style cipher lists, start
unravelling the maze of function pointers and callbacks by directly
calling ssl3_{get,put}_cipher_by_char() and removing the
ssl_{get,put}_cipher_by_char macros.

Prompted by similar changes in boringssl.

ok guenther.
@
text
@d1 1
a1 1
/* $OpenBSD: s23_lib.c,v 1.16 2014/07/11 08:17:36 miod Exp $ */
d60 1
d62 1
@


1.16
log
@No need to keep ssl23_foo() flavours mapping to ssl3_foo().
ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: s23_lib.c,v 1.15 2014/06/12 15:49:31 deraadt Exp $ */
a66 15
}

int
ssl23_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
{
	long l;

	/* We can write SSLv2 and SSLv3 ciphers */
	if (p != NULL) {
		l = c->id;
		p[0] = ((unsigned char)(l >> 16L))&0xFF;
		p[1] = ((unsigned char)(l >> 8L))&0xFF;
		p[2] = ((unsigned char)(l     ))&0xFF;
	}
	return (3);
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a66 28
}

int
ssl23_num_ciphers(void)
{
	return (ssl3_num_ciphers());
}

const SSL_CIPHER *
ssl23_get_cipher(unsigned int u)
{
	unsigned int uu = ssl3_num_ciphers();

	if (u < uu)
		return (ssl3_get_cipher(u));
	else
		return (NULL);
}

/* This function needs to check if the ciphers required are actually
 * available */
const SSL_CIPHER *
ssl23_get_cipher_by_char(const unsigned char *p)
{
	const SSL_CIPHER *cp;

	cp = ssl3_get_cipher_by_char(p);
	return (cp);
@


1.14
log
@More KNF.
@
text
@d1 1
a1 1
/* ssl/s23_lib.c */
@


1.13
log
@More KNF and style consistency tweaks
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
@


1.12
log
@remove ssl2 support even more completely.
in the process, always include ssl3 and tls1, we don't need config options
for them. when the time comes to expire ssl3, it will be with an ax.
checked by miod
@
text
@d72 1
a72 1
	return(ssl3_num_ciphers());
d75 2
a76 2
const SSL_CIPHER
*ssl23_get_cipher(unsigned int u)
d88 2
a89 2
const SSL_CIPHER
*ssl23_get_cipher_by_char(const unsigned char *p)
@


1.11
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d72 1
a72 5
	return(ssl3_num_ciphers()
#ifndef OPENSSL_NO_SSL2
	+ ssl2_num_ciphers()
#endif
	);
d83 1
a83 5
#ifndef OPENSSL_NO_SSL2
	return (ssl2_get_cipher(u - uu));
#else
	return (NULL);
#endif
a93 4
#ifndef OPENSSL_NO_SSL2
	if (cp == NULL)
		cp = ssl2_get_cipher_by_char(p);
#endif
@


1.10
log
@Do not include "e_os.h" anymore.  Simply pull in the necessary headers.

ok miod@@, deraadt@@
@
text
@d63 9
a71 7
long ssl23_default_timeout(void)
	{
	return(300);
	}

int ssl23_num_ciphers(void)
	{
d74 1
a74 1
	       + ssl2_num_ciphers()
d76 2
a77 2
	    );
	}
d79 4
a82 3
const SSL_CIPHER *ssl23_get_cipher(unsigned int u)
	{
	unsigned int uu=ssl3_num_ciphers();
d85 1
a85 1
		return(ssl3_get_cipher(u));
d88 1
a88 1
		return(ssl2_get_cipher(u-uu));
d90 1
a90 1
		return(NULL);
d92 1
a92 1
	}
d96 3
a98 2
const SSL_CIPHER *ssl23_get_cipher_by_char(const unsigned char *p)
	{
d101 1
a101 1
	cp=ssl3_get_cipher_by_char(p);
d104 1
a104 1
		cp=ssl2_get_cipher_by_char(p);
d106 2
a107 2
	return(cp);
	}
d109 3
a111 2
int ssl23_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
	{
d115 12
a126 12
	if (p != NULL)
		{
		l=c->id;
		p[0]=((unsigned char)(l>>16L))&0xFF;
		p[1]=((unsigned char)(l>> 8L))&0xFF;
		p[2]=((unsigned char)(l     ))&0xFF;
		}
	return(3);
	}

int ssl23_read(SSL *s, void *buf, int len)
	{
d130 7
a136 10
	if (SSL_in_init(s) && (!s->in_handshake))
		{
		n=s->handshake_func(s);
		if (n < 0) return(n);
		if (n == 0)
			{
			SSLerr(SSL_F_SSL23_READ,SSL_R_SSL_HANDSHAKE_FAILURE);
			return(-1);
			}
		return(SSL_read(s,buf,len));
d138 2
a139 2
	else
		{
d141 1
a141 2
		return(-1);
		}
d143 1
d145 3
a147 2
int ssl23_peek(SSL *s, void *buf, int len)
	{
d151 7
a157 10
	if (SSL_in_init(s) && (!s->in_handshake))
		{
		n=s->handshake_func(s);
		if (n < 0) return(n);
		if (n == 0)
			{
			SSLerr(SSL_F_SSL23_PEEK,SSL_R_SSL_HANDSHAKE_FAILURE);
			return(-1);
			}
		return(SSL_peek(s,buf,len));
d159 2
a160 2
	else
		{
d162 1
a162 2
		return(-1);
		}
d164 1
d166 3
a168 2
int ssl23_write(SSL *s, const void *buf, int len)
	{
d172 7
a178 10
	if (SSL_in_init(s) && (!s->in_handshake))
		{
		n=s->handshake_func(s);
		if (n < 0) return(n);
		if (n == 0)
			{
			SSLerr(SSL_F_SSL23_WRITE,SSL_R_SSL_HANDSHAKE_FAILURE);
			return(-1);
			}
		return(SSL_write(s,buf,len));
d180 2
a181 2
	else
		{
d183 1
a183 2
		return(-1);
		}
d185 1
@


1.9
log
@openssl-1.0.0e: resolve conflicts
@
text
@d124 1
a124 1
	clear_sys_error();
d147 1
a147 1
	clear_sys_error();
d170 1
a170 1
	clear_sys_error();
@


1.9.8.1
log
@backport relevant security fixes from openssl 1.0.1i
tested by bcook jsg
@
text
@a109 7
	/* but no ECC ciphers */
	if (c->algorithm_mkey == SSL_kECDHr ||
		c->algorithm_mkey == SSL_kECDHe ||
		c->algorithm_mkey == SSL_kEECDH ||
		c->algorithm_auth == SSL_aECDH ||
		c->algorithm_auth == SSL_aECDSA)
		return 0;
@


1.9.12.1
log
@backport relevant security fixes from openssl 1.0.1i
tested by bcook jsg
@
text
@a109 7
	/* but no ECC ciphers */
	if (c->algorithm_mkey == SSL_kECDHr ||
		c->algorithm_mkey == SSL_kECDHe ||
		c->algorithm_mkey == SSL_kEECDH ||
		c->algorithm_auth == SSL_aECDH ||
		c->algorithm_auth == SSL_aECDSA)
		return 0;
@


1.8
log
@resolve conflicts, fix local changes
@
text
@a94 1
	SSL_CIPHER c;
a95 2
	unsigned long id;
	int n;
a96 4
	n=ssl3_num_ciphers();
	id=0x03000000|((unsigned long)p[0]<<16L)|
		((unsigned long)p[1]<<8L)|(unsigned long)p[2];
	c.id=id;
@


1.7
log
@resolve conflicts
@
text
@a67 5
IMPLEMENT_ssl23_meth_func(sslv23_base_method,
			ssl_undefined_function,
			ssl_undefined_function,
			ssl_bad_method)

d77 1
a77 1
SSL_CIPHER *ssl23_get_cipher(unsigned int u)
d93 1
a93 1
SSL_CIPHER *ssl23_get_cipher_by_char(const unsigned char *p)
d95 2
a96 1
	SSL_CIPHER c,*cp;
@


1.6
log
@resolve conflicts
@
text
@d63 1
a63 39
static int ssl23_num_ciphers(void );
static SSL_CIPHER *ssl23_get_cipher(unsigned int u);
static int ssl23_read(SSL *s, void *buf, int len);
static int ssl23_peek(SSL *s, void *buf, int len);
static int ssl23_write(SSL *s, const void *buf, int len);
static long ssl23_default_timeout(void );
static int ssl23_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p);
static SSL_CIPHER *ssl23_get_cipher_by_char(const unsigned char *p);
const char *SSL23_version_str="SSLv2/3 compatibility" OPENSSL_VERSION_PTEXT;

static SSL_METHOD SSLv23_data= {
	TLS1_VERSION,
	tls1_new,
	tls1_clear,
	tls1_free,
	ssl_undefined_function,
	ssl_undefined_function,
	ssl23_read,
	ssl23_peek,
	ssl23_write,
	ssl_undefined_function,
	ssl_undefined_function,
	ssl_ok,
	ssl3_ctrl,
	ssl3_ctx_ctrl,
	ssl23_get_cipher_by_char,
	ssl23_put_cipher_by_char,
	ssl_undefined_const_function,
	ssl23_num_ciphers,
	ssl23_get_cipher,
	ssl_bad_method,
	ssl23_default_timeout,
	&ssl3_undef_enc_method,
	ssl_undefined_function,
	ssl3_callback_ctrl,
	ssl3_ctx_callback_ctrl,
	};

static long ssl23_default_timeout(void)
d68 4
a71 4
SSL_METHOD *sslv23_base_method(void)
	{
	return(&SSLv23_data);
	}
d73 1
a73 1
static int ssl23_num_ciphers(void)
d82 1
a82 1
static SSL_CIPHER *ssl23_get_cipher(unsigned int u)
d98 1
a98 1
static SSL_CIPHER *ssl23_get_cipher_by_char(const unsigned char *p)
d116 1
a116 1
static int ssl23_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
d131 1
a131 1
static int ssl23_read(SSL *s, void *buf, int len)
d154 1
a154 1
static int ssl23_peek(SSL *s, void *buf, int len)
d177 1
a177 1
static int ssl23_write(SSL *s, const void *buf, int len)
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d90 1
a90 1
	ssl_undefined_function,
@


1.4
log
@openssl-engine-0.9.6a merge
@
text
@d114 1
a114 1
#ifndef NO_SSL2
d127 1
a127 1
#ifndef NO_SSL2
d147 1
a147 1
#ifndef NO_SSL2
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d66 1
d81 1
a81 1
	(int (*)(struct ssl_st *, char *, int))ssl_undefined_function,
a172 7
#if 0
	if (s->shutdown & SSL_RECEIVED_SHUTDOWN)
		{
		s->rwstate=SSL_NOTHING;
		return(0);
		}
#endif
d192 1
a192 1
static int ssl23_write(SSL *s, const void *buf, int len)
d196 13
a208 2
#if 0
	if (s->shutdown & SSL_SENT_SHUTDOWN)
d210 2
a211 2
		s->rwstate=SSL_NOTHING;
		return(0);
d213 6
a218 1
#endif
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d70 1
a70 1
char *SSL23_version_str="SSLv2/3 compatibility" OPENSSL_VERSION_PTEXT;
d95 3
d112 5
a116 1
	return(ssl3_num_ciphers()+ssl2_num_ciphers());
d126 1
d128 3
d146 1
d149 1
@


1.1
log
@Initial revision
@
text
@d60 1
a60 1
#include "objects.h"
a62 1
#ifndef NOPROTO
d65 2
a66 2
static int ssl23_read(SSL *s, char *buf, int len);
static int ssl23_write(SSL *s, char *buf, int len);
d68 3
a70 13
static int ssl23_put_cipher_by_char(SSL_CIPHER *c, unsigned char *p);
static SSL_CIPHER *ssl23_get_cipher_by_char(unsigned char *p);
#else
static int ssl23_num_ciphers();
static SSL_CIPHER *ssl23_get_cipher();
static int ssl23_read();
static int ssl23_write();
static long ssl23_default_timeout();
static int ssl23_put_cipher_by_char();
static SSL_CIPHER *ssl23_get_cipher_by_char();
#endif

char *SSL23_version_str="SSLv2/3 compatablity part of SSLeay 0.7.0 30-Jan-1997";
d80 1
a80 1
	ssl_undefined_function,
d84 1
d97 1
a97 1
static long ssl23_default_timeout()
d102 1
a102 1
SSL_METHOD *sslv23_base_method()
d107 1
a107 1
static int ssl23_num_ciphers()
d112 1
a112 2
static SSL_CIPHER *ssl23_get_cipher(u)
unsigned int u;
d124 1
a124 2
static SSL_CIPHER *ssl23_get_cipher_by_char(p)
unsigned char *p;
d140 1
a140 3
static int ssl23_put_cipher_by_char(c,p)
SSL_CIPHER *c;
unsigned char *p;
d155 1
a155 4
static int ssl23_read(s,buf,len)
SSL *s;
char *buf;
int len;
d185 1
a185 4
static int ssl23_write(s,buf,len)
SSL *s;
char *buf;
int len;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d60 1
a60 1
#include <openssl/objects.h>
d63 1
d66 2
a67 3
static int ssl23_read(SSL *s, void *buf, int len);
static int ssl23_peek(SSL *s, void *buf, int len);
static int ssl23_write(SSL *s, const void *buf, int len);
d69 13
a81 3
static int ssl23_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p);
static SSL_CIPHER *ssl23_get_cipher_by_char(const unsigned char *p);
const char *SSL23_version_str="SSLv2/3 compatibility" OPENSSL_VERSION_PTEXT;
d91 1
a91 1
	ssl23_peek,
a94 1
	ssl_ok,
a104 3
	ssl_undefined_function,
	ssl3_callback_ctrl,
	ssl3_ctx_callback_ctrl,
d107 1
a107 1
static long ssl23_default_timeout(void)
d112 1
a112 1
SSL_METHOD *sslv23_base_method(void)
d117 1
a117 1
static int ssl23_num_ciphers(void)
d119 1
a119 5
	return(ssl3_num_ciphers()
#ifndef OPENSSL_NO_SSL2
	       + ssl2_num_ciphers()
#endif
	    );
d122 2
a123 1
static SSL_CIPHER *ssl23_get_cipher(unsigned int u)
a129 1
#ifndef OPENSSL_NO_SSL2
a130 3
#else
		return(NULL);
#endif
d135 2
a136 1
static SSL_CIPHER *ssl23_get_cipher_by_char(const unsigned char *p)
a146 1
#ifndef OPENSSL_NO_SSL2
a148 1
#endif
d152 3
a154 1
static int ssl23_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
d169 4
a172 1
static int ssl23_read(SSL *s, void *buf, int len)
d176 7
d202 4
a205 1
static int ssl23_peek(SSL *s, void *buf, int len)
d209 2
a210 2
	clear_sys_error();
	if (SSL_in_init(s) && (!s->in_handshake))
d212 2
a213 8
		n=s->handshake_func(s);
		if (n < 0) return(n);
		if (n == 0)
			{
			SSLerr(SSL_F_SSL23_PEEK,SSL_R_SSL_HANDSHAKE_FAILURE);
			return(-1);
			}
		return(SSL_peek(s,buf,len));
d215 1
a215 11
	else
		{
		ssl_undefined_function(s);
		return(-1);
		}
	}

static int ssl23_write(SSL *s, const void *buf, int len)
	{
	int n;

@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d90 1
a90 1
	ssl_undefined_const_function,
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d63 39
a101 1
long ssl23_default_timeout(void)
d106 4
a109 4
IMPLEMENT_ssl23_meth_func(sslv23_base_method,
			ssl_undefined_function,
			ssl_undefined_function,
			ssl_bad_method)
d111 1
a111 1
int ssl23_num_ciphers(void)
d120 1
a120 1
SSL_CIPHER *ssl23_get_cipher(unsigned int u)
d136 1
a136 1
SSL_CIPHER *ssl23_get_cipher_by_char(const unsigned char *p)
d154 1
a154 1
int ssl23_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
d169 1
a169 1
int ssl23_read(SSL *s, void *buf, int len)
d192 1
a192 1
int ssl23_peek(SSL *s, void *buf, int len)
d215 1
a215 1
int ssl23_write(SSL *s, const void *buf, int len)
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d68 5
d82 1
a82 1
const SSL_CIPHER *ssl23_get_cipher(unsigned int u)
d98 1
a98 1
const SSL_CIPHER *ssl23_get_cipher_by_char(const unsigned char *p)
d100 1
a100 2
	SSL_CIPHER c;
	const SSL_CIPHER *cp;
@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@d95 1
d97 2
d100 4
@


