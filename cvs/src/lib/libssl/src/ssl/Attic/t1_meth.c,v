head	1.18;
access;
symbols
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	butholakala:1.6
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.2.0.16
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.14
	OPENBSD_3_2_BASE:1.2
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.12
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.10
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.09.03.11.33.41;	author beck;	state dead;
branches;
next	1.17;
commitid	HnbXxsegngek41U2;

1.17
date	2015.09.11.14.52.17;	author jsing;	state Exp;
branches;
next	1.16;
commitid	OyOoHFozRNCvi11H;

1.16
date	2015.02.06.08.30.23;	author jsing;	state Exp;
branches;
next	1.15;
commitid	K5MXFl39zEkHakNY;

1.15
date	2014.12.14.15.30.50;	author jsing;	state Exp;
branches;
next	1.14;
commitid	XNZawfRSWvnVv1VS;

1.14
date	2014.11.16.14.12.47;	author jsing;	state Exp;
branches;
next	1.13;
commitid	M3pvHgIFoWUHNqJn;

1.13
date	2014.08.10.14.42.56;	author jsing;	state Exp;
branches;
next	1.12;
commitid	wihJupNvfkdpKL9O;

1.12
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	mJUVYpkFBZ0Zv2bG;

1.11
date	2014.05.29.16.00.16;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.05.24.12.44.48;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.19.17.56.49;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.19.08.52.32;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.14.13.30.33;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.54;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.12.02.18.40;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.32;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.14;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.14;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.44;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.36.48;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.50;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: t1_meth.c,v 1.17 2015/09/11 14:52:17 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/objects.h>

#include "ssl_locl.h"

static const SSL_METHOD *tls1_get_method(int ver);

const SSL_METHOD TLS_method_data = {
	.version = TLS1_2_VERSION,
	.ssl_new = tls1_new,
	.ssl_clear = tls1_clear,
	.ssl_free = tls1_free,
	.ssl_accept = ssl23_accept,
	.ssl_connect = ssl23_connect,
	.ssl_read = ssl23_read,
	.ssl_peek = ssl23_peek,
	.ssl_write = ssl23_write,
	.ssl_shutdown = ssl_undefined_function,
	.ssl_renegotiate = ssl_undefined_function,
	.ssl_renegotiate_check = ssl_ok,
	.ssl_get_message = ssl3_get_message,
	.ssl_read_bytes = ssl3_read_bytes,
	.ssl_write_bytes = ssl3_write_bytes,
	.ssl_dispatch_alert = ssl3_dispatch_alert,
	.ssl_ctrl = ssl3_ctrl,
	.ssl_ctx_ctrl = ssl3_ctx_ctrl,
	.get_cipher_by_char = ssl3_get_cipher_by_char,
	.put_cipher_by_char = ssl3_put_cipher_by_char,
	.ssl_pending = ssl_undefined_const_function,
	.num_ciphers = ssl3_num_ciphers,
	.get_cipher = ssl3_get_cipher,
	.get_ssl_method = tls1_get_method,
	.get_timeout = ssl23_default_timeout,
	.ssl3_enc = &ssl3_undef_enc_method,
	.ssl_version = ssl_undefined_void_function,
	.ssl_callback_ctrl = ssl3_callback_ctrl,
	.ssl_ctx_callback_ctrl = ssl3_ctx_callback_ctrl,
};

const SSL_METHOD TLSv1_method_data = {
	.version = TLS1_VERSION,
	.ssl_new = tls1_new,
	.ssl_clear = tls1_clear,
	.ssl_free = tls1_free,
	.ssl_accept = ssl3_accept,
	.ssl_connect = ssl3_connect,
	.ssl_read = ssl3_read,
	.ssl_peek = ssl3_peek,
	.ssl_write = ssl3_write,
	.ssl_shutdown = ssl3_shutdown,
	.ssl_renegotiate = ssl3_renegotiate,
	.ssl_renegotiate_check = ssl3_renegotiate_check,
	.ssl_get_message = ssl3_get_message,
	.ssl_read_bytes = ssl3_read_bytes,
	.ssl_write_bytes = ssl3_write_bytes,
	.ssl_dispatch_alert = ssl3_dispatch_alert,
	.ssl_ctrl = ssl3_ctrl,
	.ssl_ctx_ctrl = ssl3_ctx_ctrl,
	.get_cipher_by_char = ssl3_get_cipher_by_char,
	.put_cipher_by_char = ssl3_put_cipher_by_char,
	.ssl_pending = ssl3_pending,
	.num_ciphers = ssl3_num_ciphers,
	.get_cipher = ssl3_get_cipher,
	.get_ssl_method = tls1_get_method,
	.get_timeout = tls1_default_timeout,
	.ssl3_enc = &TLSv1_enc_data,
	.ssl_version = ssl_undefined_void_function,
	.ssl_callback_ctrl = ssl3_callback_ctrl,
	.ssl_ctx_callback_ctrl = ssl3_ctx_callback_ctrl,
};

const SSL_METHOD TLSv1_1_method_data = {
	.version = TLS1_1_VERSION,
	.ssl_new = tls1_new,
	.ssl_clear = tls1_clear,
	.ssl_free = tls1_free,
	.ssl_accept = ssl3_accept,
	.ssl_connect = ssl3_connect,
	.ssl_read = ssl3_read,
	.ssl_peek = ssl3_peek,
	.ssl_write = ssl3_write,
	.ssl_shutdown = ssl3_shutdown,
	.ssl_renegotiate = ssl3_renegotiate,
	.ssl_renegotiate_check = ssl3_renegotiate_check,
	.ssl_get_message = ssl3_get_message,
	.ssl_read_bytes = ssl3_read_bytes,
	.ssl_write_bytes = ssl3_write_bytes,
	.ssl_dispatch_alert = ssl3_dispatch_alert,
	.ssl_ctrl = ssl3_ctrl,
	.ssl_ctx_ctrl = ssl3_ctx_ctrl,
	.get_cipher_by_char = ssl3_get_cipher_by_char,
	.put_cipher_by_char = ssl3_put_cipher_by_char,
	.ssl_pending = ssl3_pending,
	.num_ciphers = ssl3_num_ciphers,
	.get_cipher = ssl3_get_cipher,
	.get_ssl_method = tls1_get_method,
	.get_timeout = tls1_default_timeout,
	.ssl3_enc = &TLSv1_1_enc_data,
	.ssl_version = ssl_undefined_void_function,
	.ssl_callback_ctrl = ssl3_callback_ctrl,
	.ssl_ctx_callback_ctrl = ssl3_ctx_callback_ctrl,
};

const SSL_METHOD TLSv1_2_method_data = {
	.version = TLS1_2_VERSION,
	.ssl_new = tls1_new,
	.ssl_clear = tls1_clear,
	.ssl_free = tls1_free,
	.ssl_accept = ssl3_accept,
	.ssl_connect = ssl3_connect,
	.ssl_read = ssl3_read,
	.ssl_peek = ssl3_peek,
	.ssl_write = ssl3_write,
	.ssl_shutdown = ssl3_shutdown,
	.ssl_renegotiate = ssl3_renegotiate,
	.ssl_renegotiate_check = ssl3_renegotiate_check,
	.ssl_get_message = ssl3_get_message,
	.ssl_read_bytes = ssl3_read_bytes,
	.ssl_write_bytes = ssl3_write_bytes,
	.ssl_dispatch_alert = ssl3_dispatch_alert,
	.ssl_ctrl = ssl3_ctrl,
	.ssl_ctx_ctrl = ssl3_ctx_ctrl,
	.get_cipher_by_char = ssl3_get_cipher_by_char,
	.put_cipher_by_char = ssl3_put_cipher_by_char,
	.ssl_pending = ssl3_pending,
	.num_ciphers = ssl3_num_ciphers,
	.get_cipher = ssl3_get_cipher,
	.get_ssl_method = tls1_get_method,
	.get_timeout = tls1_default_timeout,
	.ssl3_enc = &TLSv1_2_enc_data,
	.ssl_version = ssl_undefined_void_function,
	.ssl_callback_ctrl = ssl3_callback_ctrl,
	.ssl_ctx_callback_ctrl = ssl3_ctx_callback_ctrl,
};

static const SSL_METHOD *
tls1_get_method(int ver)
{
	if (ver == TLS1_2_VERSION)
		return (TLSv1_2_method());
	if (ver == TLS1_1_VERSION)
		return (TLSv1_1_method());
	if (ver == TLS1_VERSION)
		return (TLSv1_method());
	return (NULL);
}

const SSL_METHOD *
SSLv23_method(void)
{
	return (TLS_method());
}

const SSL_METHOD *
TLS_method(void)
{
	return &TLS_method_data;
}

const SSL_METHOD *
TLSv1_method(void)
{
	return (&TLSv1_method_data);
}

const SSL_METHOD *
TLSv1_1_method(void)
{
	return (&TLSv1_1_method_data);
}

const SSL_METHOD *
TLSv1_2_method(void)
{
	return (&TLSv1_2_method_data);
}
@


1.17
log
@Put the *method* data structures and functions in the same place.
We can also now nuke ssl23_get_method() since it is the same as
tls1_get_method(). And the empty file can bite the dust.

ok bcook@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: t1_meth.c,v 1.16 2015/02/06 08:30:23 jsing Exp $ */
@


1.16
log
@Bring back the horrible API that is get_cipher_by_char/put_cipher_by_char.

This API was intended to be an internal only, however like many things in
OpenSSL, it is exposed externally and parts of the software ecosystem are
now using it since there is no real alternative within the public API.

ok doug@@, tedu@@ and reluctantly miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: t1_meth.c,v 1.15 2014/12/14 15:30:50 jsing Exp $ */
d67 32
d195 24
d222 1
a222 1
	return &TLSv1_method_data;
d228 1
a228 1
	return &TLSv1_1_method_data;
d234 1
a234 13
	return &TLSv1_2_method_data;
}

static const SSL_METHOD *
tls1_get_method(int ver)
{
	if (ver == TLS1_2_VERSION)
		return (TLSv1_2_method());
	if (ver == TLS1_1_VERSION)
		return (TLSv1_1_method());
	if (ver == TLS1_VERSION)
		return (TLSv1_method());
	return (NULL);
@


1.15
log
@Remove trailing whitespace.
@
text
@d1 1
a1 1
/* $OpenBSD: t1_meth.c,v 1.14 2014/11/16 14:12:47 jsing Exp $ */
d86 2
d118 2
d150 2
@


1.14
log
@Sort and group includes.
@
text
@d1 1
a1 1
/* $OpenBSD: t1_meth.c,v 1.13 2014/08/10 14:42:56 jsing Exp $ */
d158 1
a158 1
TLSv1_method(void) 
d160 1
a160 1
	return &TLSv1_method_data; 
d164 1
a164 1
TLSv1_1_method(void) 
d166 1
a166 1
	return &TLSv1_1_method_data; 
d170 1
a170 1
TLSv1_2_method(void) 
d172 1
a172 1
	return &TLSv1_2_method_data; 
@


1.13
log
@Since we no longer need to support SSLv2-style cipher lists, start
unravelling the maze of function pointers and callbacks by directly
calling ssl3_{get,put}_cipher_by_char() and removing the
ssl_{get,put}_cipher_by_char macros.

Prompted by similar changes in boringssl.

ok guenther.
@
text
@d1 1
a1 1
/* $OpenBSD: t1_meth.c,v 1.12 2014/06/12 15:49:31 deraadt Exp $ */
d60 1
d62 1
@


1.12
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a83 2
	.get_cipher_by_char = ssl3_get_cipher_by_char,
	.put_cipher_by_char = ssl3_put_cipher_by_char,
a113 2
	.get_cipher_by_char = ssl3_get_cipher_by_char,
	.put_cipher_by_char = ssl3_put_cipher_by_char,
a143 2
	.get_cipher_by_char = ssl3_get_cipher_by_char,
	.put_cipher_by_char = ssl3_put_cipher_by_char,
@


1.11
log
@Make it substantially easier to identify protocol version requirements
by adding an enc_flags field to the ssl3_enc_method, specifying four flags
that are used with this field and providing macros for evaluating these
conditions. Currently the version requirements are identified by
continually checking the version number and other criteria.

This change also adds separate SSL3_ENC_METHOD data for TLS v1.1 and v1.2,
since they have different enc_flags from TLS v1.

Based on changes in OpenSSL head.

No objection from miod@@
@
text
@d1 1
a1 1
/* ssl/t1_meth.c */
@


1.10
log
@DeIMPLEMENT libssl. Expand the IMPLEMENT_* macros since it is far more
readable and one less layer of abstraction. Use C99 initialisers for
clarity, grepability and to protect from future field reordering/removal.

ok miod@@ (tedu@@ also thought it was a wonderful idea, beck@@ also agreed,
but ran away squealing since it reminded him of the VOP layer...)
@
text
@d123 1
a123 1
	.ssl3_enc = &TLSv1_enc_data,
d155 1
a155 1
	.ssl3_enc = &TLSv1_enc_data,
@


1.9
log
@More KNF.
@
text
@d63 116
a189 9

IMPLEMENT_tls_meth_func(TLS1_2_VERSION, TLSv1_2_method,
    ssl3_accept, ssl3_connect, tls1_get_method)

IMPLEMENT_tls_meth_func(TLS1_1_VERSION, TLSv1_1_method,
    ssl3_accept, ssl3_connect, tls1_get_method)

IMPLEMENT_tls_meth_func(TLS1_VERSION, TLSv1_method,
    ssl3_accept, ssl3_connect, tls1_get_method)
@


1.8
log
@More KNF and style consistency tweaks
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
@


1.7
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d63 2
a64 2
static const SSL_METHOD
*tls1_get_method(int ver)
d67 1
a67 1
		return TLSv1_2_method();
d69 1
a69 1
		return TLSv1_1_method();
d71 2
a72 2
		return TLSv1_method();
	return NULL;
@


1.6
log
@resolve conflicts
@
text
@d63 3
a65 2
static const SSL_METHOD *tls1_get_method(int ver)
	{
d73 1
a73 1
	}
d76 1
a76 3
			ssl3_accept,
			ssl3_connect,
			tls1_get_method)
d79 1
a79 3
			ssl3_accept,
			ssl3_connect,
			tls1_get_method)
d82 1
a82 4
			ssl3_accept,
			ssl3_connect,
			tls1_get_method)

@


1.5
log
@resolve conflicts, fix local changes
@
text
@a62 1
static const SSL_METHOD *tls1_get_method(int ver);
d65 4
d70 2
a71 3
		return(TLSv1_method());
	else
		return(NULL);
d74 11
a84 1
IMPLEMENT_tls1_meth_func(TLSv1_method,
@


1.4
log
@resolve conflicts
@
text
@d63 2
a64 2
static SSL_METHOD *tls1_get_method(int ver);
static SSL_METHOD *tls1_get_method(int ver)
@


1.3
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d72 4
a75 24
SSL_METHOD *TLSv1_method(void)
	{
	static int init=1;
	static SSL_METHOD TLSv1_data;

	if (init)
		{
		CRYPTO_w_lock(CRYPTO_LOCK_SSL_METHOD);
		
		if (init)
			{
			memcpy((char *)&TLSv1_data,(char *)tlsv1_base_method(),
				sizeof(SSL_METHOD));
			TLSv1_data.ssl_connect=ssl3_connect;
			TLSv1_data.ssl_accept=ssl3_accept;
			TLSv1_data.get_ssl_method=tls1_get_method;
			init=0;
			}

		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_METHOD);
		}
	
	return(&TLSv1_data);
	}
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d79 13
a91 6
		memcpy((char *)&TLSv1_data,(char *)tlsv1_base_method(),
			sizeof(SSL_METHOD));
		TLSv1_data.ssl_connect=ssl3_connect;
		TLSv1_data.ssl_accept=ssl3_accept;
		TLSv1_data.get_ssl_method=tls1_get_method;
		init=0;
d93 1
@


1.1
log
@Initial revision
@
text
@d60 1
a60 1
#include "objects.h"
d63 2
a64 2
static SSL_METHOD *tls1_get_method(ver)
int ver;
d72 1
a72 1
SSL_METHOD *TLSv1_method()
a78 1
		init=0;
d84 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d60 1
a60 1
#include <openssl/objects.h>
d63 2
a64 2
static SSL_METHOD *tls1_get_method(int ver);
static SSL_METHOD *tls1_get_method(int ver)
d72 1
a72 1
SSL_METHOD *TLSv1_method(void)
d79 1
a84 1
		init=0;
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d79 6
a84 13
		CRYPTO_w_lock(CRYPTO_LOCK_SSL_METHOD);
		
		if (init)
			{
			memcpy((char *)&TLSv1_data,(char *)tlsv1_base_method(),
				sizeof(SSL_METHOD));
			TLSv1_data.ssl_connect=ssl3_connect;
			TLSv1_data.ssl_accept=ssl3_accept;
			TLSv1_data.get_ssl_method=tls1_get_method;
			init=0;
			}

		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_METHOD);
a85 1
	
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d72 24
a95 4
IMPLEMENT_tls1_meth_func(TLSv1_method,
			ssl3_accept,
			ssl3_connect,
			tls1_get_method)
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d63 2
a64 2
static const SSL_METHOD *tls1_get_method(int ver);
static const SSL_METHOD *tls1_get_method(int ver)
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@d63 1
a65 4
	if (ver == TLS1_2_VERSION)
		return TLSv1_2_method();
	if (ver == TLS1_1_VERSION)
		return TLSv1_1_method();
d67 3
a69 2
		return TLSv1_method();
	return NULL;
d72 1
a72 11
IMPLEMENT_tls_meth_func(TLS1_2_VERSION, TLSv1_2_method,
			ssl3_accept,
			ssl3_connect,
			tls1_get_method)

IMPLEMENT_tls_meth_func(TLS1_1_VERSION, TLSv1_1_method,
			ssl3_accept,
			ssl3_connect,
			tls1_get_method)

IMPLEMENT_tls_meth_func(TLS1_VERSION, TLSv1_method,
@


