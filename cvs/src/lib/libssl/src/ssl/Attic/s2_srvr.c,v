head	1.20;
access;
symbols
	butholakala:1.16
	openssl_1_0_1_g:1.1.1.13
	OPENBSD_5_5:1.15.0.12
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.8
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	openssl_1_0_1_c:1.1.1.12
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	openssl_1_0_0_f:1.1.1.12
	openssl_1_0_0_e:1.1.1.12
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	openssh_1_0_0_a:1.1.1.11
	OPENBSD_4_8:1.13.0.8
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.4
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	openssl_0_9_8_k:1.1.1.10
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	openssl_0_9_8_j:1.1.1.10
	openssl_0_9_8_h:1.1.1.9
	pre_openssl_0_9_8h:1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	openssl_0_9_7j:1.1.1.8
	openssl:1.1.1
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENSSL_0_9_7G:1.1.1.7
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENSSL_0_9_7D:1.1.1.6
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENSSL_0_9_7C:1.1.1.5
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENSSL_0_9_7B:1.1.1.5
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.4
	OPENSSL_0_9_7_BETA3:1.1.1.3
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2014.04.15.21.47.56;	author tedu;	state dead;
branches;
next	1.19;

1.19
date	2014.04.14.17.45.38;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.14.15.37.02;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.13.21.11.19;	author mpi;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.03.02.34.33;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.27.05.07.03;	author djm;	state Exp;
branches
	1.11.8.1
	1.11.10.1;
next	1.10;

1.10
date	2005.04.29.05.39.31;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.12.02.18.40;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.30.11.08.06;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.01.19.51.17;	author beck;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2000.12.15.02.58.37;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.28;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.27;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.12;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.12;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.33;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.44.03;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.09.12.20.52.32;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.05.11.21.36.38;	author markus;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.20.42.06;	author markus;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.04.29.05.37.27;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.06.27.05.05.39;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.06.12.15.51;	author djm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.01.09.12.14.06;	author djm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2011.11.03.02.32.19;	author djm;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.04.13.15.16.36;	author miod;	state Exp;
branches;
next	;

1.5.2.1
date	2002.07.30.11.07.33;	author miod;	state Exp;
branches;
next	;

1.5.4.1
date	2002.07.30.15.47.52;	author jason;	state Exp;
branches;
next	;

1.11.8.1
date	2009.01.09.11.40.50;	author djm;	state Exp;
branches;
next	;

1.11.10.1
date	2009.01.09.11.40.35;	author djm;	state Exp;
branches;
next	;


desc
@@


1.20
log
@remove ssl2 support even more completely.
in the process, always include ssl3 and tls1, we don't need config options
for them. when the time comes to expire ssl3, it will be with an ax.
checked by miod
@
text
@/* ssl/s2_srvr.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include "ssl_locl.h"
#ifndef OPENSSL_NO_SSL2
#include <stdio.h>
#include <openssl/bio.h>
#include <openssl/rand.h>
#include <openssl/objects.h>
#include <openssl/evp.h>

static const SSL_METHOD *ssl2_get_server_method(int ver);
static int get_client_master_key(SSL *s);
static int get_client_hello(SSL *s);
static int server_hello(SSL *s);

static int get_client_finished(SSL *s);
static int server_verify(SSL *s);
static int server_finish(SSL *s);
static int request_certificate(SSL *s);
static int
ssl_rsa_private_decrypt(CERT *c, int len, unsigned char *from,
unsigned char *to, int padding);
#define BREAK	break

static const SSL_METHOD
*ssl2_get_server_method(int ver)
{
	if (ver == SSL2_VERSION)
		return (SSLv2_server_method());
	else
		return (NULL);
}

IMPLEMENT_ssl2_meth_func(SSLv2_server_method,
    ssl2_accept, ssl_undefined_function, ssl2_get_server_method)

int
ssl2_accept(SSL *s)
{
	BUF_MEM *buf = NULL;
	int ret = -1;
	long num1;
	void (*cb)(const SSL *ssl, int type, int val) = NULL;
	int new_state, state;

	ERR_clear_error();
	errno = 0;

	if (s->info_callback != NULL)
		cb = s->info_callback;
	else if (s->ctx->info_callback != NULL)
		cb = s->ctx->info_callback;

	/* init things to blank */
	s->in_handshake++;
	if (!SSL_in_init(s) || SSL_in_before(s))
		SSL_clear(s);

	if (s->cert == NULL) {
		SSLerr(SSL_F_SSL2_ACCEPT, SSL_R_NO_CERTIFICATE_SET);
		return (-1);
	}

	errno = 0;
	for (;;) {
		state = s->state;

		switch (s->state) {
		case SSL_ST_BEFORE:
		case SSL_ST_ACCEPT:
		case SSL_ST_BEFORE|SSL_ST_ACCEPT:
		case SSL_ST_OK|SSL_ST_ACCEPT:

			s->server = 1;
			if (cb != NULL)
				cb(s, SSL_CB_HANDSHAKE_START, 1);

			s->version = SSL2_VERSION;
			s->type = SSL_ST_ACCEPT;

			buf = s->init_buf;
			if ((buf == NULL) && ((buf = BUF_MEM_new()) == NULL)) {
				ret = -1;
				goto end;
			}
			if (!BUF_MEM_grow(buf,
			    (int)SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)) {
				ret = -1;
				goto end;
			}
			s->init_buf = buf;
			s->init_num = 0;
			s->ctx->stats.sess_accept++;
			s->handshake_func = ssl2_accept;
			s->state = SSL2_ST_GET_CLIENT_HELLO_A;
			BREAK;

		case SSL2_ST_GET_CLIENT_HELLO_A:
		case SSL2_ST_GET_CLIENT_HELLO_B:
		case SSL2_ST_GET_CLIENT_HELLO_C:
			s->shutdown = 0;
			ret = get_client_hello(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			s->state = SSL2_ST_SEND_SERVER_HELLO_A;
			BREAK;

		case SSL2_ST_SEND_SERVER_HELLO_A:
		case SSL2_ST_SEND_SERVER_HELLO_B:
			ret = server_hello(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			if (!s->hit) {
				s->state = SSL2_ST_GET_CLIENT_MASTER_KEY_A;
				BREAK;
			} else {
				s->state = SSL2_ST_SERVER_START_ENCRYPTION;
				BREAK;
			}
		case SSL2_ST_GET_CLIENT_MASTER_KEY_A:
		case SSL2_ST_GET_CLIENT_MASTER_KEY_B:
			ret = get_client_master_key(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			s->state = SSL2_ST_SERVER_START_ENCRYPTION;
			BREAK;

		case SSL2_ST_SERVER_START_ENCRYPTION:
			/* Ok we how have sent all the stuff needed to
			 * start encrypting, the next packet back will
			 * be encrypted. */
			if (!ssl2_enc_init(s, 0)) {
				ret = -1;
				goto end;
			}
			s->s2->clear_text = 0;
			s->state = SSL2_ST_SEND_SERVER_VERIFY_A;
			BREAK;

		case SSL2_ST_SEND_SERVER_VERIFY_A:
		case SSL2_ST_SEND_SERVER_VERIFY_B:
			ret = server_verify(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			if (s->hit) {
				/* If we are in here, we have been
				 * buffering the output, so we need to
				 * flush it and remove buffering from
				 * future traffic */
				s->state = SSL2_ST_SEND_SERVER_VERIFY_C;
				BREAK;
			} else {
				s->state = SSL2_ST_GET_CLIENT_FINISHED_A;
				break;
			}

		case SSL2_ST_SEND_SERVER_VERIFY_C:
			/* get the number of bytes to write */
			num1 = BIO_ctrl(s->wbio, BIO_CTRL_INFO, 0, NULL);
			if (num1 > 0) {
				s->rwstate = SSL_WRITING;
				num1 = BIO_flush(s->wbio);
				if (num1 <= 0) {
					ret = -1;
					goto end;
				}
				s->rwstate = SSL_NOTHING;
			}

			/* flushed and now remove buffering */
			s->wbio = BIO_pop(s->wbio);

			s->state = SSL2_ST_GET_CLIENT_FINISHED_A;
			BREAK;

		case SSL2_ST_GET_CLIENT_FINISHED_A:
		case SSL2_ST_GET_CLIENT_FINISHED_B:
			ret = get_client_finished(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			s->state = SSL2_ST_SEND_REQUEST_CERTIFICATE_A;
			BREAK;

		case SSL2_ST_SEND_REQUEST_CERTIFICATE_A:
		case SSL2_ST_SEND_REQUEST_CERTIFICATE_B:
		case SSL2_ST_SEND_REQUEST_CERTIFICATE_C:
		case SSL2_ST_SEND_REQUEST_CERTIFICATE_D:
			/* don't do a 'request certificate' if we
			 * don't want to, or we already have one, and
			 * we only want to do it once. */
			if (!(s->verify_mode & SSL_VERIFY_PEER) ||
			    ((s->session->peer != NULL) &&
			    (s->verify_mode & SSL_VERIFY_CLIENT_ONCE))) {
				s->state = SSL2_ST_SEND_SERVER_FINISHED_A;
				break;
			} else {
				ret = request_certificate(s);
				if (ret <= 0)
					goto end;
				s->init_num = 0;
				s->state = SSL2_ST_SEND_SERVER_FINISHED_A;
			}
			BREAK;

		case SSL2_ST_SEND_SERVER_FINISHED_A:
		case SSL2_ST_SEND_SERVER_FINISHED_B:
			ret = server_finish(s);
			if (ret <= 0)
				goto end;
			s->init_num = 0;
			s->state = SSL_ST_OK;
			break;

		case SSL_ST_OK:
			BUF_MEM_free(s->init_buf);
			ssl_free_wbio_buffer(s);
			s->init_buf = NULL;
			s->init_num = 0;
			/*	ERR_clear_error();*/

			ssl_update_cache(s, SSL_SESS_CACHE_SERVER);

			s->ctx->stats.sess_accept_good++;
			/* s->server=1; */
			ret = 1;

			if (cb != NULL)
				cb(s, SSL_CB_HANDSHAKE_DONE, 1);

			goto end;
			/* BREAK; */

		default:
			SSLerr(SSL_F_SSL2_ACCEPT, SSL_R_UNKNOWN_STATE);
			ret = -1;
			goto end;
			/* BREAK; */
		}

		if ((cb != NULL) && (s->state != state)) {
			new_state = s->state;
			s->state = state;
			cb(s, SSL_CB_ACCEPT_LOOP, 1);
			s->state = new_state;
		}
	}
end:
	s->in_handshake--;
	if (cb != NULL)
		cb(s, SSL_CB_ACCEPT_EXIT, ret);
	return (ret);
}

static int
get_client_master_key(SSL *s)
{
	int is_export, i, n, keya, ek;
	unsigned long len;
	unsigned char *p;
	const SSL_CIPHER *cp;
	const EVP_CIPHER *c;
	const EVP_MD *md;

	p = (unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_GET_CLIENT_MASTER_KEY_A) {
		i = ssl2_read(s,(char *)&(p[s->init_num]), 10 - s->init_num);

		if (i < (10 - s->init_num))
			return (ssl2_part_read(s, SSL_F_GET_CLIENT_MASTER_KEY, i));
		s->init_num = 10;

		if (*(p++) != SSL2_MT_CLIENT_MASTER_KEY) {
			if (p[-1] != SSL2_MT_ERROR) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_READ_WRONG_PACKET_TYPE);
			} else
				SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_PEER_ERROR);
			return (-1);
		}

		cp = ssl2_get_cipher_by_char(p);
		if (cp == NULL) {
			ssl2_return_error(s, SSL2_PE_NO_CIPHER);
			SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_NO_CIPHER_MATCH);
			return (-1);
		}
		s->session->cipher = cp;

		p += 3;
		n2s(p, i);
		s->s2->tmp.clear = i;
		n2s(p, i);
		s->s2->tmp.enc = i;
		n2s(p, i);
		if (i > SSL_MAX_KEY_ARG_LENGTH) {
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_KEY_ARG_TOO_LONG);
			return -1;
		}
		s->session->key_arg_length = i;
		s->state = SSL2_ST_GET_CLIENT_MASTER_KEY_B;
	}

	/* SSL2_ST_GET_CLIENT_MASTER_KEY_B */
	p = (unsigned char *)s->init_buf->data;
	if (s->init_buf->length < SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, ERR_R_INTERNAL_ERROR);
		return -1;
	}
	keya = s->session->key_arg_length;
	len = 10 + (unsigned long)s->s2->tmp.clear + (unsigned long)s->s2->tmp.enc + (unsigned long)keya;
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_MESSAGE_TOO_LONG);
		return -1;
	}
	n = (int)len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]), n);
	if (i != n)
		return (ssl2_part_read(s, SSL_F_GET_CLIENT_MASTER_KEY, i));
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, p, (size_t)len, s, s->msg_callback_arg); /* CLIENT-MASTER-KEY */
	p += 10;

	memcpy(s->session->key_arg, &(p[s->s2->tmp.clear + s->s2->tmp.enc]),
	    (unsigned int)keya);

	if (s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_NO_PRIVATEKEY);
		return (-1);
	}
	i = ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,
	    &(p[s->s2->tmp.clear]), &(p[s->s2->tmp.clear]),
	    (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING : RSA_PKCS1_PADDING);

	is_export = SSL_C_IS_EXPORT(s->session->cipher);

	if (!ssl_cipher_get_evp(s->session, &c, &md, NULL, NULL, NULL)) {
		ssl2_return_error(s, SSL2_PE_NO_CIPHER);
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS);
		return (0);
	}

	if (s->session->cipher->algorithm2 & SSL2_CF_8_BYTE_ENC) {
		is_export = 1;
		ek = 8;
	} else
		ek = 5;

	/* bad decrypt */
#if 1
	/* If a bad decrypt, continue with protocol but with a
	 * random master secret (Bleichenbacher attack) */
	if ((i < 0) || ((!is_export && (i != EVP_CIPHER_key_length(c))) ||
	    (is_export && ((i != ek) || (s->s2->tmp.clear + (unsigned int)i !=
	    (unsigned int)EVP_CIPHER_key_length(c)))))) {
		ERR_clear_error();
		if (is_export)
			i = ek;
		else
			i = EVP_CIPHER_key_length(c);
		if (RAND_pseudo_bytes(p, i) <= 0)
			return 0;
	}
#else
	if (i < 0) {
		error = 1;
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_BAD_RSA_DECRYPT);
	}
	/* incorrect number of key bytes for non export cipher */
	else if ((!is_export && (i != EVP_CIPHER_key_length(c))) ||
	    (is_export && ((i != ek) || (s->s2->tmp.clear + i !=
	    EVP_CIPHER_key_length(c))))) {
		error = 1;
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_WRONG_NUMBER_OF_KEY_BITS);
	}
	if (error) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		return (-1);
	}
#endif

	if (is_export)
		i += s->s2->tmp.clear;

	if (i > SSL_MAX_MASTER_KEY_LENGTH) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, ERR_R_INTERNAL_ERROR);
		return -1;
	}
	s->session->master_key_length = i;
	memcpy(s->session->master_key, p,(unsigned int)i);
	return (1);
}

static int
get_client_hello(SSL *s)
{
	int i, n;
	unsigned long len;
	unsigned char *p;
	STACK_OF(SSL_CIPHER) *cs; /* a stack of SSL_CIPHERS */
	STACK_OF(SSL_CIPHER) *cl; /* the ones we want to use */
	STACK_OF(SSL_CIPHER) *prio, *allow;
	int z;

	/* This is a bit of a hack to check for the correct packet
	 * type the first time round. */
	if (s->state == SSL2_ST_GET_CLIENT_HELLO_A) {
		s->first_packet = 1;
		s->state = SSL2_ST_GET_CLIENT_HELLO_B;
	}

	p = (unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_GET_CLIENT_HELLO_B) {
		i = ssl2_read(s,(char *)&(p[s->init_num]), 9 - s->init_num);
		if (i < (9 - s->init_num))
			return (ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i));
		s->init_num = 9;

		if (*(p++) != SSL2_MT_CLIENT_HELLO) {
			if (p[-1] != SSL2_MT_ERROR) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_CLIENT_HELLO, SSL_R_READ_WRONG_PACKET_TYPE);
			} else
				SSLerr(SSL_F_GET_CLIENT_HELLO, SSL_R_PEER_ERROR);
			return (-1);
		}
		n2s(p, i);
		if (i < s->version)
			s->version = i;
		n2s(p, i);
		s->s2->tmp.cipher_spec_length = i;
		n2s(p, i);
		s->s2->tmp.session_id_length = i;
		n2s(p, i);
		s->s2->challenge_length = i;
		if ((i < SSL2_MIN_CHALLENGE_LENGTH) ||
		    (i > SSL2_MAX_CHALLENGE_LENGTH)) {
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_GET_CLIENT_HELLO, SSL_R_INVALID_CHALLENGE_LENGTH);
			return (-1);
		}
		s->state = SSL2_ST_GET_CLIENT_HELLO_C;
	}

	/* SSL2_ST_GET_CLIENT_HELLO_C */
	p = (unsigned char *)s->init_buf->data;
	len = 9 + (unsigned long)s->s2->tmp.cipher_spec_length + (unsigned long)s->s2->challenge_length + (unsigned long)s->s2->tmp.session_id_length;
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_HELLO, SSL_R_MESSAGE_TOO_LONG);
		return -1;
	}
	n = (int)len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]), n);
	if (i != n)
		return (ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i));
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, p, (size_t)len, s, s->msg_callback_arg); /* CLIENT-HELLO */
	p += 9;

	/* get session-id before cipher stuff so we can get out session
	 * structure if it is cached */
	/* session-id */
	if ((s->s2->tmp.session_id_length != 0) &&
		(s->s2->tmp.session_id_length != SSL2_SSL_SESSION_ID_LENGTH)) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_HELLO, SSL_R_BAD_SSL_SESSION_ID_LENGTH);
		return (-1);
	}

	if (s->s2->tmp.session_id_length == 0) {
		if (!ssl_get_new_session(s, 1)) {
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			return (-1);
		}
	} else {
		i = ssl_get_prev_session(s, &(p[s->s2->tmp.cipher_spec_length]),
		s->s2->tmp.session_id_length, NULL);
		if (i == 1)
				{ /* previous session */
			s->hit = 1;
		} else if (i == -1) {
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			return (-1);
		} else {
			if (s->cert == NULL) {
				ssl2_return_error(s, SSL2_PE_NO_CERTIFICATE);
				SSLerr(SSL_F_GET_CLIENT_HELLO, SSL_R_NO_CERTIFICATE_SET);
				return (-1);
			}

			if (!ssl_get_new_session(s, 1)) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				return (-1);
			}
		}
	}

	if (!s->hit) {
		cs = ssl_bytes_to_cipher_list(s, p,
		    s->s2->tmp.cipher_spec_length, &s->session->ciphers);
		if (cs == NULL)
			goto mem_err;

		cl = SSL_get_ciphers(s);

		if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE) {
			prio = sk_SSL_CIPHER_dup(cl);
			if (prio == NULL)
				goto mem_err;
			allow = cs;
		} else {
			prio = cs;
			allow = cl;
		}
		for (z = 0; z < sk_SSL_CIPHER_num(prio); z++) {
			if (sk_SSL_CIPHER_find(allow, sk_SSL_CIPHER_value(prio, z)) < 0) {
				(void)sk_SSL_CIPHER_delete(prio, z);
				z--;
			}
		}
		if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE) {
			sk_SSL_CIPHER_free(s->session->ciphers);
			s->session->ciphers = prio;
		}
		/* s->session->ciphers should now have a list of
		 * ciphers that are on both the client and server.
		 * This list is ordered by the order the client sent
		 * the ciphers or in the order of the server's preference
		 * if SSL_OP_CIPHER_SERVER_PREFERENCE was set.
		 */
	}
	p += s->s2->tmp.cipher_spec_length;
	/* done cipher selection */

	/* session id extracted already */
	p += s->s2->tmp.session_id_length;

	/* challenge */
	if (s->s2->challenge_length > sizeof s->s2->challenge) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);
		return -1;
	}
	memcpy(s->s2->challenge, p, (unsigned int)s->s2->challenge_length);
	return (1);
mem_err:
	SSLerr(SSL_F_GET_CLIENT_HELLO, ERR_R_MALLOC_FAILURE);
	return (0);
}

static int
server_hello(SSL *s)
{
	unsigned char *p, *d;
	int n, hit;

	p = (unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_SEND_SERVER_HELLO_A) {
		d = p + 11;
		*(p++) = SSL2_MT_SERVER_HELLO;
		/* type */
		hit = s->hit;
		*(p++) = (unsigned char)hit;
#if 1
		if (!hit) {
			if (s->session->sess_cert != NULL)
				/* This can't really happen because get_client_hello
				 * has called ssl_get_new_session, which does not set
				 * sess_cert. */
			ssl_sess_cert_free(s->session->sess_cert);
			s->session->sess_cert = ssl_sess_cert_new();
			if (s->session->sess_cert == NULL) {
				SSLerr(SSL_F_SERVER_HELLO, ERR_R_MALLOC_FAILURE);
				return (-1);
			}
		}
		/* If 'hit' is set, then s->sess_cert may be non-NULL or NULL,
		 * depending on whether it survived in the internal cache
		 * or was retrieved from an external cache.
		 * If it is NULL, we cannot put any useful data in it anyway,
		 * so we don't touch it.
		 */

#else /* That's what used to be done when cert_st and sess_cert_st were
	   * the same. */
		if (!hit) {			/* else add cert to session */
			CRYPTO_add(&s->cert->references, 1, CRYPTO_LOCK_SSL_CERT);
			if (s->session->sess_cert != NULL)
				ssl_cert_free(s->session->sess_cert);
			s->session->sess_cert = s->cert;

		} else	/* We have a session id - cache hit, if the
		* session - id has no certificate listed against
		* the 'cert' structure, grab the 'old' one
			 * listed against the SSL connection */
		{
			if (s->session->sess_cert == NULL) {
				CRYPTO_add(&s->cert->references, 1,
				CRYPTO_LOCK_SSL_CERT);
				s->session->sess_cert = s->cert;
			}
		}
#endif

		if (s->cert == NULL) {
			ssl2_return_error(s, SSL2_PE_NO_CERTIFICATE);
			SSLerr(SSL_F_SERVER_HELLO, SSL_R_NO_CERTIFICATE_SPECIFIED);
			return (-1);
		}

		if (hit) {
			*(p++) = 0;
			/* no certificate type */
			s2n(s->version,p);	/* version */
			s2n(0, p);
			/* cert len */
			s2n(0, p);
			/* ciphers len */
		} else {
			/* EAY EAY */
			/* put certificate type */
			*(p++) = SSL2_CT_X509_CERTIFICATE;
			s2n(s->version,p);	/* version */
			n = i2d_X509(s->cert->pkeys[SSL_PKEY_RSA_ENC].x509, NULL);
			s2n(n, p);
			/* certificate length */
			i2d_X509(s->cert->pkeys[SSL_PKEY_RSA_ENC].x509, &d);
			n = 0;

			/* lets send out the ciphers we like in the
			 * prefered order */
			n = ssl_cipher_list_to_bytes(s, s->session->ciphers, d, 0);
			d += n;
			s2n(n, p);
			/* add cipher length */
		}

		/* make and send conn_id */
		s2n(SSL2_CONNECTION_ID_LENGTH,p);	/* add conn_id length */
		s->s2->conn_id_length = SSL2_CONNECTION_ID_LENGTH;
		if (RAND_pseudo_bytes(s->s2->conn_id,(int)s->s2->conn_id_length) <= 0)
			return -1;
		memcpy(d, s->s2->conn_id, SSL2_CONNECTION_ID_LENGTH);
		d += SSL2_CONNECTION_ID_LENGTH;

		s->state = SSL2_ST_SEND_SERVER_HELLO_B;
		s->init_num = d - (unsigned char *)s->init_buf->data;
		s->init_off = 0;
	}
	/* SSL2_ST_SEND_SERVER_HELLO_B */
 	/* If we are using TCP/IP, the performance is bad if we do 2
 	 * writes without a read between them.  This occurs when
 	 * Session-id reuse is used, so I will put in a buffering module
 	 */
	if (s->hit) {
		if (!ssl_init_wbio_buffer(s, 1))
			return (-1);
	}

	return (ssl2_do_write(s));
}

static int
get_client_finished(SSL *s)
{
	unsigned char *p;
	int i, n;
	unsigned long len;

	p = (unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_GET_CLIENT_FINISHED_A) {
		i = ssl2_read(s,(char *)&(p[s->init_num]), 1 - s->init_num);
		if (i < 1 - s->init_num)
			return (ssl2_part_read(s, SSL_F_GET_CLIENT_FINISHED, i));
		s->init_num += i;

		if (*p != SSL2_MT_CLIENT_FINISHED) {
			if (*p != SSL2_MT_ERROR) {
				ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_CLIENT_FINISHED, SSL_R_READ_WRONG_PACKET_TYPE);
			} else {
				SSLerr(SSL_F_GET_CLIENT_FINISHED, SSL_R_PEER_ERROR);
				/* try to read the error message */
				i = ssl2_read(s,(char *)&(p[s->init_num]), 3 - s->init_num);
				return ssl2_part_read(s, SSL_F_GET_SERVER_VERIFY, i);
			}
			return (-1);
		}
		s->state = SSL2_ST_GET_CLIENT_FINISHED_B;
	}

	/* SSL2_ST_GET_CLIENT_FINISHED_B */
	if (s->s2->conn_id_length > sizeof s->s2->conn_id) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_FINISHED, ERR_R_INTERNAL_ERROR);
		return -1;
	}
	len = 1 + (unsigned long)s->s2->conn_id_length;
	n = (int)len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]), n);
	if (i < n) {
		return (ssl2_part_read(s, SSL_F_GET_CLIENT_FINISHED, i));
	}
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, p, len, s, s->msg_callback_arg); /* CLIENT-FINISHED */
	p += 1;
	if (memcmp(p, s->s2->conn_id, s->s2->conn_id_length) != 0) {
		ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_FINISHED, SSL_R_CONNECTION_ID_IS_DIFFERENT);
		return (-1);
	}
	return (1);
}

static int
server_verify(SSL *s)
{
	unsigned char *p;

	if (s->state == SSL2_ST_SEND_SERVER_VERIFY_A) {
		p = (unsigned char *)s->init_buf->data;
		*(p++) = SSL2_MT_SERVER_VERIFY;
		if (s->s2->challenge_length > sizeof s->s2->challenge) {
			SSLerr(SSL_F_SERVER_VERIFY, ERR_R_INTERNAL_ERROR);
			return -1;
		}
		memcpy(p, s->s2->challenge,(unsigned int)s->s2->challenge_length);
		/* p+=s->s2->challenge_length; */

		s->state = SSL2_ST_SEND_SERVER_VERIFY_B;
		s->init_num = s->s2->challenge_length + 1;
		s->init_off = 0;
	}
	return (ssl2_do_write(s));
}

static int
server_finish(SSL *s)
{
	unsigned char *p;

	if (s->state == SSL2_ST_SEND_SERVER_FINISHED_A) {
		p = (unsigned char *)s->init_buf->data;
		*(p++) = SSL2_MT_SERVER_FINISHED;

		if (s->session->session_id_length > sizeof s->session->session_id) {
			SSLerr(SSL_F_SERVER_FINISH, ERR_R_INTERNAL_ERROR);
			return -1;
		}
		memcpy(p, s->session->session_id, (unsigned int)s->session->session_id_length);
		/* p+=s->session->session_id_length; */

		s->state = SSL2_ST_SEND_SERVER_FINISHED_B;
		s->init_num = s->session->session_id_length + 1;
		s->init_off = 0;
	}

	/* SSL2_ST_SEND_SERVER_FINISHED_B */
	return (ssl2_do_write(s));
}

/* send the request and check the response */
static int
request_certificate(SSL *s)
{
	const unsigned char *cp;
	unsigned char *p, *p2, *buf2;
	unsigned char *ccd;
	int i, j, ctype, ret = -1;
	unsigned long len;
	X509 *x509 = NULL;
	STACK_OF(X509) *sk = NULL;

	ccd = s->s2->tmp.ccl;
	if (s->state == SSL2_ST_SEND_REQUEST_CERTIFICATE_A) {
		p = (unsigned char *)s->init_buf->data;
		*(p++) = SSL2_MT_REQUEST_CERTIFICATE;
		*(p++) = SSL2_AT_MD5_WITH_RSA_ENCRYPTION;
		if (RAND_pseudo_bytes(ccd, SSL2_MIN_CERT_CHALLENGE_LENGTH) <= 0)
			return -1;
		memcpy(p, ccd, SSL2_MIN_CERT_CHALLENGE_LENGTH);

		s->state = SSL2_ST_SEND_REQUEST_CERTIFICATE_B;
		s->init_num = SSL2_MIN_CERT_CHALLENGE_LENGTH + 2;
		s->init_off = 0;
	}

	if (s->state == SSL2_ST_SEND_REQUEST_CERTIFICATE_B) {
		i = ssl2_do_write(s);
		if (i <= 0) {
			ret = i;
			goto end;
		}

		s->init_num = 0;
		s->state = SSL2_ST_SEND_REQUEST_CERTIFICATE_C;
	}

	if (s->state == SSL2_ST_SEND_REQUEST_CERTIFICATE_C) {
		p = (unsigned char *)s->init_buf->data;
		i = ssl2_read(s, (char *)&(p[s->init_num]), 6 - s->init_num); /* try to read 6 octets ... */
		if (i < 3 - s->init_num) /* ... but don't call ssl2_part_read now if we got at least 3
		                        * (probably NO-CERTIFICATE-ERROR) */
		{
			ret = ssl2_part_read(s, SSL_F_REQUEST_CERTIFICATE, i);
			goto end;
		}
		s->init_num += i;

		if ((s->init_num >= 3) && (p[0] == SSL2_MT_ERROR)) {
			n2s(p, i);
			if (i != SSL2_PE_NO_CERTIFICATE) {
				/* not the error message we expected -- let ssl2_part_read handle it */
				s->init_num -= 3;
				ret = ssl2_part_read(s, SSL_F_REQUEST_CERTIFICATE, 3);
				goto end;
			}

			if (s->msg_callback)
				s->msg_callback(0, s->version, 0, p, 3, s, s->msg_callback_arg); /* ERROR */

			/* this is the one place where we can recover from an SSL 2.0 error */

			if (s->verify_mode & SSL_VERIFY_FAIL_IF_NO_PEER_CERT) {
				ssl2_return_error(s, SSL2_PE_BAD_CERTIFICATE);
				SSLerr(SSL_F_REQUEST_CERTIFICATE, SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE);
				goto end;
			}
			ret = 1;
			goto end;
		}
		if ((*(p++) != SSL2_MT_CLIENT_CERTIFICATE) || (s->init_num < 6)) {
			ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_REQUEST_CERTIFICATE, SSL_R_SHORT_READ);
			goto end;
		}
		if (s->init_num != 6) {
			SSLerr(SSL_F_REQUEST_CERTIFICATE, ERR_R_INTERNAL_ERROR);
			goto end;
		}

		/* ok we have a response */
		/* certificate type, there is only one right now. */
		ctype= *(p++);
		if (ctype != SSL2_AT_MD5_WITH_RSA_ENCRYPTION) {
			ssl2_return_error(s, SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE);
			SSLerr(SSL_F_REQUEST_CERTIFICATE, SSL_R_BAD_RESPONSE_ARGUMENT);
			goto end;
		}
		n2s(p, i);
		s->s2->tmp.clen = i;
		n2s(p, i);
		s->s2->tmp.rlen = i;
		s->state = SSL2_ST_SEND_REQUEST_CERTIFICATE_D;
	}

	/* SSL2_ST_SEND_REQUEST_CERTIFICATE_D */
	p = (unsigned char *)s->init_buf->data;
	len = 6 + (unsigned long)s->s2->tmp.clen + (unsigned long)s->s2->tmp.rlen;
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER) {
		SSLerr(SSL_F_REQUEST_CERTIFICATE, SSL_R_MESSAGE_TOO_LONG);
		goto end;
	}
	j = (int)len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]), j);
	if (i < j) {
		ret = ssl2_part_read(s, SSL_F_REQUEST_CERTIFICATE, i);
		goto end;
	}
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, p, len, s, s->msg_callback_arg); /* CLIENT-CERTIFICATE */
	p += 6;

	cp = p;
	x509 = (X509 *)d2i_X509(NULL, &cp,(long)s->s2->tmp.clen);
	if (x509 == NULL) {
		SSLerr(SSL_F_REQUEST_CERTIFICATE, ERR_R_X509_LIB);
		goto msg_end;
	}

	if (((sk = sk_X509_new_null()) == NULL) || (!sk_X509_push(sk, x509))) {
		SSLerr(SSL_F_REQUEST_CERTIFICATE, ERR_R_MALLOC_FAILURE);
		goto msg_end;
	}

	i = ssl_verify_cert_chain(s, sk);

	if (i > 0)	/* we like the packet, now check the chksum */
	{
		EVP_MD_CTX ctx;
		EVP_PKEY *pkey = NULL;

		EVP_MD_CTX_init(&ctx);
		if (!EVP_VerifyInit_ex(&ctx, s->ctx->rsa_md5, NULL) ||
		    !EVP_VerifyUpdate(&ctx, s->s2->key_material,
		        s->s2->key_material_length) ||
		    !EVP_VerifyUpdate(&ctx, ccd,
		        SSL2_MIN_CERT_CHALLENGE_LENGTH))
			goto msg_end;

		i = i2d_X509(s->cert->pkeys[SSL_PKEY_RSA_ENC].x509, NULL);
		buf2 = OPENSSL_malloc((unsigned int)i);
		if (buf2 == NULL) {
			SSLerr(SSL_F_REQUEST_CERTIFICATE, ERR_R_MALLOC_FAILURE);
			goto msg_end;
		}
		p2 = buf2;
		i = i2d_X509(s->cert->pkeys[SSL_PKEY_RSA_ENC].x509, &p2);
		if (!EVP_VerifyUpdate(&ctx, buf2,(unsigned int)i)) {
			OPENSSL_free(buf2);
			goto msg_end;
		}
		OPENSSL_free(buf2);

		pkey = X509_get_pubkey(x509);
		if (pkey == NULL)
			goto end;
		i = EVP_VerifyFinal(&ctx, cp, s->s2->tmp.rlen, pkey);
		EVP_PKEY_free(pkey);
		EVP_MD_CTX_cleanup(&ctx);

		if (i > 0) {
			if (s->session->peer != NULL)
				X509_free(s->session->peer);
			s->session->peer = x509;
			CRYPTO_add(&x509->references, 1, CRYPTO_LOCK_X509);
			s->session->verify_result = s->verify_result;
			ret = 1;
			goto end;
		} else {
			SSLerr(SSL_F_REQUEST_CERTIFICATE, SSL_R_BAD_CHECKSUM);
			goto msg_end;
		}
	} else {
msg_end:
		ssl2_return_error(s, SSL2_PE_BAD_CERTIFICATE);
	}
end:
	sk_X509_free(sk);
	X509_free(x509);
	return (ret);
}

static int
ssl_rsa_private_decrypt(CERT *c, int len, unsigned char *from,
    unsigned char *to, int padding)
{
	RSA *rsa;
	int i;

	if ((c == NULL) || (c->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL)) {
		SSLerr(SSL_F_SSL_RSA_PRIVATE_DECRYPT, SSL_R_NO_PRIVATEKEY);
		return (-1);
	}
	if (c->pkeys[SSL_PKEY_RSA_ENC].privatekey->type != EVP_PKEY_RSA) {
		SSLerr(SSL_F_SSL_RSA_PRIVATE_DECRYPT, SSL_R_PUBLIC_KEY_IS_NOT_RSA);
		return (-1);
	}
	rsa = c->pkeys[SSL_PKEY_RSA_ENC].privatekey->pkey.rsa;

	/* we have the public key */
	i = RSA_private_decrypt(len, from, to, rsa, padding);
	if (i < 0)
		SSLerr(SSL_F_SSL_RSA_PRIVATE_DECRYPT, ERR_R_RSA_LIB);
	return (i);
}
#else /* !OPENSSL_NO_SSL2 */

# if PEDANTIC
static void *dummy = &dummy;
# endif

#endif
@


1.19
log
@So the OpenSSL codebase does "get the time, add it as a random seed"
in a bunch of places inside the TLS engine, to try to keep entropy high.
I wonder if their moto is "If you can't solve a problem, at least try
to do it badly".
ok miod
@
text
@@


1.18
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a148 1
	unsigned long l = (unsigned long)time(NULL);
a154 1
	RAND_add(&l, sizeof(l), 0);
@


1.17
log
@Do not include "e_os.h" anymore.  Simply pull in the necessary headers.

ok miod@@, deraadt@@
@
text
@d123 2
a124 1
static int server_hello(SSL *s); 
d129 3
a131 2
static int ssl_rsa_private_decrypt(CERT *c, int len, unsigned char *from,
	unsigned char *to,int padding);
d134 3
a136 2
static const SSL_METHOD *ssl2_get_server_method(int ver)
	{
d138 1
a138 1
		return(SSLv2_server_method());
d140 2
a141 2
		return(NULL);
	}
d144 1
a144 3
			ssl2_accept,
			ssl_undefined_function,
			ssl2_get_server_method)
d146 6
a151 5
int ssl2_accept(SSL *s)
	{
	unsigned long l=(unsigned long)time(NULL);
	BUF_MEM *buf=NULL;
	int ret= -1;
d153 2
a154 2
	void (*cb)(const SSL *ssl,int type,int val)=NULL;
	int new_state,state;
d156 1
a156 1
	RAND_add(&l,sizeof(l),0);
d161 1
a161 1
		cb=s->info_callback;
d163 1
a163 1
		cb=s->ctx->info_callback;
d167 2
a168 1
	if (!SSL_in_init(s) || SSL_in_before(s)) SSL_clear(s);
d170 4
a173 5
	if (s->cert == NULL)
		{
		SSLerr(SSL_F_SSL2_ACCEPT,SSL_R_NO_CERTIFICATE_SET);
		return(-1);
		}
d176 2
a177 3
	for (;;)
		{
		state=s->state;
d179 1
a179 2
		switch (s->state)
			{
d185 19
a203 14
			s->server=1;
			if (cb != NULL) cb(s,SSL_CB_HANDSHAKE_START,1);

			s->version=SSL2_VERSION;
			s->type=SSL_ST_ACCEPT;

			buf=s->init_buf;
			if ((buf == NULL) && ((buf=BUF_MEM_new()) == NULL))
				{ ret= -1; goto end; }
			if (!BUF_MEM_grow(buf,(int)
				SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER))
				{ ret= -1; goto end; }
			s->init_buf=buf;
			s->init_num=0;
d205 2
a206 2
			s->handshake_func=ssl2_accept;
			s->state=SSL2_ST_GET_CLIENT_HELLO_A;
d212 6
a217 5
			s->shutdown=0;
			ret=get_client_hello(s);
			if (ret <= 0) goto end;
			s->init_num=0;
			s->state=SSL2_ST_SEND_SERVER_HELLO_A;
d222 6
a227 6
			ret=server_hello(s);
			if (ret <= 0) goto end;
			s->init_num=0;
			if (!s->hit)
				{
				s->state=SSL2_ST_GET_CLIENT_MASTER_KEY_A;
d229 2
a230 4
				}
			else
				{
				s->state=SSL2_ST_SERVER_START_ENCRYPTION;
d232 1
a232 1
				}
d235 5
a239 4
			ret=get_client_master_key(s);
			if (ret <= 0) goto end;
			s->init_num=0;
			s->state=SSL2_ST_SERVER_START_ENCRYPTION;
d246 6
a251 4
			if (!ssl2_enc_init(s,0))
				{ ret= -1; goto end; }
			s->s2->clear_text=0;
			s->state=SSL2_ST_SEND_SERVER_VERIFY_A;
d256 5
a260 5
			ret=server_verify(s);
			if (ret <= 0) goto end;
			s->init_num=0;
			if (s->hit)
				{
d265 1
a265 1
				s->state=SSL2_ST_SEND_SERVER_VERIFY_C;
d267 2
a268 4
				}
			else
				{
				s->state=SSL2_ST_GET_CLIENT_FINISHED_A;
d270 1
a270 1
				}
d272 9
a280 9
 		case SSL2_ST_SEND_SERVER_VERIFY_C:
 			/* get the number of bytes to write */
 			num1=BIO_ctrl(s->wbio,BIO_CTRL_INFO,0,NULL);
 			if (num1 > 0)
 				{
				s->rwstate=SSL_WRITING;
 				num1=BIO_flush(s->wbio);
 				if (num1 <= 0) { ret= -1; goto end; }
				s->rwstate=SSL_NOTHING;
d282 2
d285 2
a286 2
 			/* flushed and now remove buffering */
 			s->wbio=BIO_pop(s->wbio);
d288 2
a289 2
 			s->state=SSL2_ST_GET_CLIENT_FINISHED_A;
  			BREAK;
d293 1
a293 1
			ret=get_client_finished(s);
d296 2
a297 2
			s->init_num=0;
			s->state=SSL2_ST_SEND_REQUEST_CERTIFICATE_A;
d308 3
a310 4
				((s->session->peer != NULL) &&
				(s->verify_mode & SSL_VERIFY_CLIENT_ONCE)))
				{
				s->state=SSL2_ST_SEND_SERVER_FINISHED_A;
d312 7
a318 8
				}
			else
				{
				ret=request_certificate(s);
				if (ret <= 0) goto end;
				s->init_num=0;
				s->state=SSL2_ST_SEND_SERVER_FINISHED_A;
				}
d323 5
a327 4
			ret=server_finish(s);
			if (ret <= 0) goto end;
			s->init_num=0;
			s->state=SSL_ST_OK;
d333 3
a335 3
			s->init_buf=NULL;
			s->init_num=0;
		/*	ERR_clear_error();*/
d337 1
a337 1
			ssl_update_cache(s,SSL_SESS_CACHE_SERVER);
d341 1
a341 1
			ret=1;
d343 2
a344 1
			if (cb != NULL) cb(s,SSL_CB_HANDSHAKE_DONE,1);
d350 2
a351 2
			SSLerr(SSL_F_SSL2_ACCEPT,SSL_R_UNKNOWN_STATE);
			ret= -1;
a353 9
			}
		
		if ((cb != NULL) && (s->state != state))
			{
			new_state=s->state;
			s->state=state;
			cb(s,SSL_CB_ACCEPT_LOOP,1);
			s->state=new_state;
			}
d355 8
d366 8
a373 7
		cb(s,SSL_CB_ACCEPT_EXIT,ret);
	return(ret);
	}

static int get_client_master_key(SSL *s)
	{
	int is_export,i,n,keya,ek;
d380 3
a382 4
	p=(unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_GET_CLIENT_MASTER_KEY_A)
		{
		i=ssl2_read(s,(char *)&(p[s->init_num]),10-s->init_num);
d384 2
a385 2
		if (i < (10-s->init_num))
			return(ssl2_part_read(s,SSL_F_GET_CLIENT_MASTER_KEY,i));
d388 5
a392 8
		if (*(p++) != SSL2_MT_CLIENT_MASTER_KEY)
			{
			if (p[-1] != SSL2_MT_ERROR)
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,SSL_R_READ_WRONG_PACKET_TYPE);
				}
			else
d394 2
a395 2
			return(-1);
			}
d397 3
a399 4
		cp=ssl2_get_cipher_by_char(p);
		if (cp == NULL)
			{
			ssl2_return_error(s,SSL2_PE_NO_CIPHER);
d401 3
a403 3
			return(-1);
			}
		s->session->cipher= cp;
d405 8
a412 7
		p+=3;
		n2s(p,i); s->s2->tmp.clear=i;
		n2s(p,i); s->s2->tmp.enc=i;
		n2s(p,i);
		if(i > SSL_MAX_KEY_ARG_LENGTH)
			{
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
a414 3
			}
		s->session->key_arg_length=i;
		s->state=SSL2_ST_GET_CLIENT_MASTER_KEY_B;
d416 3
d421 3
a423 4
	p=(unsigned char *)s->init_buf->data;
	if (s->init_buf->length < SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
d426 2
a427 2
		}
	keya=s->session->key_arg_length;
d429 3
a431 4
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,SSL_R_MESSAGE_TOO_LONG);
d433 1
a433 1
		}
d435 3
a437 2
	i = ssl2_read(s,(char *)&(p[s->init_num]),n);
	if (i != n) return(ssl2_part_read(s,SSL_F_GET_CLIENT_MASTER_KEY,i));
d442 2
a443 2
	memcpy(s->session->key_arg,&(p[s->s2->tmp.clear+s->s2->tmp.enc]),
		(unsigned int)keya);
d445 16
a460 18
	if (s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,SSL_R_NO_PRIVATEKEY);
		return(-1);
		}
	i=ssl_rsa_private_decrypt(s->cert,s->s2->tmp.enc,
		&(p[s->s2->tmp.clear]),&(p[s->s2->tmp.clear]),
		(s->s2->ssl2_rollback)?RSA_SSLV23_PADDING:RSA_PKCS1_PADDING);

	is_export=SSL_C_IS_EXPORT(s->session->cipher);
	
	if (!ssl_cipher_get_evp(s->session,&c,&md,NULL,NULL,NULL))
		{
		ssl2_return_error(s,SSL2_PE_NO_CIPHER);
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS);
		return(0);
		}
d462 5
a466 7
	if (s->session->cipher->algorithm2 & SSL2_CF_8_BYTE_ENC)
		{
		is_export=1;
		ek=8;
		}
	else
		ek=5;
d472 3
a474 5
	if ((i < 0) ||
		((!is_export && (i != EVP_CIPHER_key_length(c)))
		|| (is_export && ((i != ek) || (s->s2->tmp.clear+(unsigned int)i !=
			(unsigned int)EVP_CIPHER_key_length(c))))))
		{
d477 1
a477 1
			i=ek;
d479 2
a480 2
			i=EVP_CIPHER_key_length(c);
		if (RAND_pseudo_bytes(p,i) <= 0)
d482 1
a482 1
		}
d484 4
a487 5
	if (i < 0)
		{
		error=1;
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,SSL_R_BAD_RSA_DECRYPT);
		}
d489 10
a498 12
	else if ((!is_export && (i != EVP_CIPHER_key_length(c)))
		|| (is_export && ((i != ek) || (s->s2->tmp.clear+i !=
			EVP_CIPHER_key_length(c)))))
		{
		error=1;
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,SSL_R_WRONG_NUMBER_OF_KEY_BITS);
		}
	if (error)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		return(-1);
		}
d501 2
a502 1
	if (is_export) i+=s->s2->tmp.clear;
d504 2
a505 3
	if (i > SSL_MAX_MASTER_KEY_LENGTH)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
a507 4
		}
	s->session->master_key_length=i;
	memcpy(s->session->master_key,p,(unsigned int)i);
	return(1);
d509 9
a517 4

static int get_client_hello(SSL *s)
	{
	int i,n;
d527 4
a530 5
	if (s->state == SSL2_ST_GET_CLIENT_HELLO_A)
		{
		s->first_packet=1;
		s->state=SSL2_ST_GET_CLIENT_HELLO_B;
		}
d532 5
a536 6
	p=(unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_GET_CLIENT_HELLO_B)
		{
		i=ssl2_read(s,(char *)&(p[s->init_num]),9-s->init_num);
		if (i < (9-s->init_num)) 
			return(ssl2_part_read(s,SSL_F_GET_CLIENT_HELLO,i));
d538 23
a560 25
	
		if (*(p++) != SSL2_MT_CLIENT_HELLO)
			{
			if (p[-1] != SSL2_MT_ERROR)
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_CLIENT_HELLO,SSL_R_READ_WRONG_PACKET_TYPE);
				}
			else
				SSLerr(SSL_F_GET_CLIENT_HELLO,SSL_R_PEER_ERROR);
			return(-1);
			}
		n2s(p,i);
		if (i < s->version) s->version=i;
		n2s(p,i); s->s2->tmp.cipher_spec_length=i;
		n2s(p,i); s->s2->tmp.session_id_length=i;
		n2s(p,i); s->s2->challenge_length=i;
		if (	(i < SSL2_MIN_CHALLENGE_LENGTH) ||
			(i > SSL2_MAX_CHALLENGE_LENGTH))
			{
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_GET_CLIENT_HELLO,SSL_R_INVALID_CHALLENGE_LENGTH);
			return(-1);
			}
		s->state=SSL2_ST_GET_CLIENT_HELLO_C;
d562 2
d566 1
a566 1
	p=(unsigned char *)s->init_buf->data;
d568 3
a570 4
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_HELLO,SSL_R_MESSAGE_TOO_LONG);
d572 1
a572 1
		}
d574 3
a576 2
	i = ssl2_read(s,(char *)&(p[s->init_num]),n);
	if (i != n) return(ssl2_part_read(s,SSL_F_GET_CLIENT_HELLO,i));
d584 6
a589 7
	if ((s->s2->tmp.session_id_length != 0) && 
		(s->s2->tmp.session_id_length != SSL2_SSL_SESSION_ID_LENGTH))
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_HELLO,SSL_R_BAD_SSL_SESSION_ID_LENGTH);
		return(-1);
		}
d591 8
a598 12
	if (s->s2->tmp.session_id_length == 0)
		{
		if (!ssl_get_new_session(s,1))
			{
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
			return(-1);
			}
		}
	else
		{
		i=ssl_get_prev_session(s,&(p[s->s2->tmp.cipher_spec_length]),
			s->s2->tmp.session_id_length, NULL);
d600 10
a609 2
			{ /* previous session */
			s->hit=1;
a610 13
		else if (i == -1)
			{
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
			return(-1);
			}
		else
			{
			if (s->cert == NULL)
				{
				ssl2_return_error(s,SSL2_PE_NO_CERTIFICATE);
				SSLerr(SSL_F_GET_CLIENT_HELLO,SSL_R_NO_CERTIFICATE_SET);
				return(-1);
				}
d612 3
a614 5
			if (!ssl_get_new_session(s,1))
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
				return(-1);
				}
d617 1
d619 20
a638 24
	if (!s->hit)
		{
		cs=ssl_bytes_to_cipher_list(s,p,s->s2->tmp.cipher_spec_length,
			&s->session->ciphers);
		if (cs == NULL) goto mem_err;

		cl=SSL_get_ciphers(s);

		if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE)
		    {
		    prio=sk_SSL_CIPHER_dup(cl);
		    if (prio == NULL) goto mem_err;
		    allow = cs;
		    }
		else
		    {
		    prio = cs;
		    allow = cl;
		    }
		for (z=0; z<sk_SSL_CIPHER_num(prio); z++)
			{
			if (sk_SSL_CIPHER_find(allow,sk_SSL_CIPHER_value(prio,z)) < 0)
				{
				(void)sk_SSL_CIPHER_delete(prio,z);
a639 1
				}
d641 5
a645 5
		if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE)
		    {
		    sk_SSL_CIPHER_free(s->session->ciphers);
		    s->session->ciphers = prio;
		    }
d652 2
a653 2
		}
	p+=s->s2->tmp.cipher_spec_length;
d657 1
a657 1
	p+=s->s2->tmp.session_id_length;
d660 2
a661 3
	if (s->s2->challenge_length > sizeof s->s2->challenge)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
d664 3
a666 3
		}
	memcpy(s->s2->challenge,p,(unsigned int)s->s2->challenge_length);
	return(1);
d668 17
a684 16
	SSLerr(SSL_F_GET_CLIENT_HELLO,ERR_R_MALLOC_FAILURE);
	return(0);
	}

static int server_hello(SSL *s)
	{
	unsigned char *p,*d;
	int n,hit;

	p=(unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_SEND_SERVER_HELLO_A)
		{
		d=p+11;
		*(p++)=SSL2_MT_SERVER_HELLO;		/* type */
		hit=s->hit;
		*(p++)=(unsigned char)hit;
d686 1
a686 2
		if (!hit)
			{
d691 1
a691 1
				ssl_sess_cert_free(s->session->sess_cert);
d693 1
a693 2
			if (s->session->sess_cert == NULL)
				{
d695 1
a695 2
				return(-1);
				}
d697 1
d707 2
a708 3
		if (!hit)
			{			/* else add cert to session */
			CRYPTO_add(&s->cert->references,1,CRYPTO_LOCK_SSL_CERT);
d711 5
a715 5
			s->session->sess_cert=s->cert;		
			}
		else	/* We have a session id-cache hit, if the
			 * session-id has no certificate listed against
			 * the 'cert' structure, grab the 'old' one
d717 5
a721 7
			{
			if (s->session->sess_cert == NULL)
				{
				CRYPTO_add(&s->cert->references,1,
					CRYPTO_LOCK_SSL_CERT);
				s->session->sess_cert=s->cert;
				}
d723 1
d726 5
a730 6
		if (s->cert == NULL)
			{
			ssl2_return_error(s,SSL2_PE_NO_CERTIFICATE);
			SSLerr(SSL_F_SERVER_HELLO,SSL_R_NO_CERTIFICATE_SPECIFIED);
			return(-1);
			}
d732 3
a734 3
		if (hit)
			{
			*(p++)=0;		/* no certificate type */
d736 5
a740 5
			s2n(0,p);		/* cert len */
			s2n(0,p);		/* ciphers len */
			}
		else
			{
d743 1
a743 1
			*(p++)=SSL2_CT_X509_CERTIFICATE;
d745 6
a750 5
			n=i2d_X509(s->cert->pkeys[SSL_PKEY_RSA_ENC].x509,NULL);
			s2n(n,p);		/* certificate length */
			i2d_X509(s->cert->pkeys[SSL_PKEY_RSA_ENC].x509,&d);
			n=0;
			
d753 5
a757 4
			n=ssl_cipher_list_to_bytes(s,s->session->ciphers,d,0);
			d+=n;
			s2n(n,p);		/* add cipher length */
			}
d761 1
a761 1
		s->s2->conn_id_length=SSL2_CONNECTION_ID_LENGTH;
d764 2
a765 2
		memcpy(d,s->s2->conn_id,SSL2_CONNECTION_ID_LENGTH);
		d+=SSL2_CONNECTION_ID_LENGTH;
d767 4
a770 4
		s->state=SSL2_ST_SEND_SERVER_HELLO_B;
		s->init_num=d-(unsigned char *)s->init_buf->data;
		s->init_off=0;
		}
d776 3
a778 6
 	if (s->hit)
 		{
		if (!ssl_init_wbio_buffer(s,1)) return(-1);
 		}
 
	return(ssl2_do_write(s));
d781 6
a786 2
static int get_client_finished(SSL *s)
	{
d791 5
a795 6
	p=(unsigned char *)s->init_buf->data;
	if (s->state == SSL2_ST_GET_CLIENT_FINISHED_A)
		{
		i=ssl2_read(s,(char *)&(p[s->init_num]),1-s->init_num);
		if (i < 1-s->init_num)
			return(ssl2_part_read(s,SSL_F_GET_CLIENT_FINISHED,i));
d798 6
a803 10
		if (*p != SSL2_MT_CLIENT_FINISHED)
			{
			if (*p != SSL2_MT_ERROR)
				{
				ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
				SSLerr(SSL_F_GET_CLIENT_FINISHED,SSL_R_READ_WRONG_PACKET_TYPE);
				}
			else
				{
				SSLerr(SSL_F_GET_CLIENT_FINISHED,SSL_R_PEER_ERROR);
d805 2
a806 4
				i=ssl2_read(s,(char *)&(p[s->init_num]),3-s->init_num);
				return ssl2_part_read(s,SSL_F_GET_SERVER_VERIFY,i);
				}
			return(-1);
d808 1
a808 1
		s->state=SSL2_ST_GET_CLIENT_FINISHED_B;
d810 2
d814 2
a815 3
	if (s->s2->conn_id_length > sizeof s->s2->conn_id)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
d818 1
a818 1
		}
d821 4
a824 5
	i = ssl2_read(s,(char *)&(p[s->init_num]),n);
	if (i < n)
		{
		return(ssl2_part_read(s,SSL_F_GET_CLIENT_FINISHED,i));
		}
d828 4
a831 7
	if (memcmp(p,s->s2->conn_id,s->s2->conn_id_length) != 0)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_FINISHED,SSL_R_CONNECTION_ID_IS_DIFFERENT);
		return(-1);
		}
	return(1);
d833 2
d836 3
a838 2
static int server_verify(SSL *s)
	{
d841 4
a844 6
	if (s->state == SSL2_ST_SEND_SERVER_VERIFY_A)
		{
		p=(unsigned char *)s->init_buf->data;
		*(p++)=SSL2_MT_SERVER_VERIFY;
		if (s->s2->challenge_length > sizeof s->s2->challenge)
			{
d847 2
a848 2
			}
		memcpy(p,s->s2->challenge,(unsigned int)s->s2->challenge_length);
d851 3
a853 5
		s->state=SSL2_ST_SEND_SERVER_VERIFY_B;
		s->init_num=s->s2->challenge_length+1;
		s->init_off=0;
		}
	return(ssl2_do_write(s));
d855 2
d858 3
a860 2
static int server_finish(SSL *s)
	{
d863 3
a865 4
	if (s->state == SSL2_ST_SEND_SERVER_FINISHED_A)
		{
		p=(unsigned char *)s->init_buf->data;
		*(p++)=SSL2_MT_SERVER_FINISHED;
d867 1
a867 2
		if (s->session->session_id_length > sizeof s->session->session_id)
			{
d870 2
a871 2
			}
		memcpy(p,s->session->session_id, (unsigned int)s->session->session_id_length);
d874 4
a877 4
		s->state=SSL2_ST_SEND_SERVER_FINISHED_B;
		s->init_num=s->session->session_id_length+1;
		s->init_off=0;
		}
d880 2
a881 2
	return(ssl2_do_write(s));
	}
d884 3
a886 2
static int request_certificate(SSL *s)
	{
d888 1
a888 1
	unsigned char *p,*p2,*buf2;
d890 1
a890 1
	int i,j,ctype,ret= -1;
d892 2
a893 2
	X509 *x509=NULL;
	STACK_OF(X509) *sk=NULL;
d895 6
a900 7
	ccd=s->s2->tmp.ccl;
	if (s->state == SSL2_ST_SEND_REQUEST_CERTIFICATE_A)
		{
		p=(unsigned char *)s->init_buf->data;
		*(p++)=SSL2_MT_REQUEST_CERTIFICATE;
		*(p++)=SSL2_AT_MD5_WITH_RSA_ENCRYPTION;
		if (RAND_pseudo_bytes(ccd,SSL2_MIN_CERT_CHALLENGE_LENGTH) <= 0)
d902 1
a902 1
		memcpy(p,ccd,SSL2_MIN_CERT_CHALLENGE_LENGTH);
d904 4
a907 4
		s->state=SSL2_ST_SEND_REQUEST_CERTIFICATE_B;
		s->init_num=SSL2_MIN_CERT_CHALLENGE_LENGTH+2;
		s->init_off=0;
		}
d909 4
a912 6
	if (s->state == SSL2_ST_SEND_REQUEST_CERTIFICATE_B)
		{
		i=ssl2_do_write(s);
		if (i <= 0)
			{
			ret=i;
d914 1
a914 1
			}
d916 3
a918 3
		s->init_num=0;
		s->state=SSL2_ST_SEND_REQUEST_CERTIFICATE_C;
		}
d920 5
a924 1
	if (s->state == SSL2_ST_SEND_REQUEST_CERTIFICATE_C)
d926 1
a926 6
		p=(unsigned char *)s->init_buf->data;
		i=ssl2_read(s,(char *)&(p[s->init_num]),6-s->init_num); /* try to read 6 octets ... */
		if (i < 3-s->init_num) /* ... but don't call ssl2_part_read now if we got at least 3
		                        * (probably NO-CERTIFICATE-ERROR) */
			{
			ret=ssl2_part_read(s,SSL_F_REQUEST_CERTIFICATE,i);
d928 1
a928 1
			}
d931 3
a933 5
		if ((s->init_num >= 3) && (p[0] == SSL2_MT_ERROR))
			{
			n2s(p,i);
			if (i != SSL2_PE_NO_CERTIFICATE)
				{
d936 1
a936 1
				ret = ssl2_part_read(s,SSL_F_REQUEST_CERTIFICATE, 3);
d938 1
a938 1
				}
d945 3
a947 4
			if (s->verify_mode & SSL_VERIFY_FAIL_IF_NO_PEER_CERT)
				{
				ssl2_return_error(s,SSL2_PE_BAD_CERTIFICATE);
				SSLerr(SSL_F_REQUEST_CERTIFICATE,SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE);
d949 2
a950 2
				}
			ret=1;
d952 4
a955 5
			}
		if ((*(p++) != SSL2_MT_CLIENT_CERTIFICATE) || (s->init_num < 6))
			{
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_REQUEST_CERTIFICATE,SSL_R_SHORT_READ);
d957 2
a958 3
			}
		if (s->init_num != 6)
			{
d961 2
a962 2
			}
		
d966 3
a968 4
		if (ctype != SSL2_AT_MD5_WITH_RSA_ENCRYPTION)
			{
			ssl2_return_error(s,SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE);
			SSLerr(SSL_F_REQUEST_CERTIFICATE,SSL_R_BAD_RESPONSE_ARGUMENT);
a969 4
			}
		n2s(p,i); s->s2->tmp.clen=i;
		n2s(p,i); s->s2->tmp.rlen=i;
		s->state=SSL2_ST_SEND_REQUEST_CERTIFICATE_D;
d971 6
d979 1
a979 1
	p=(unsigned char *)s->init_buf->data;
d981 2
a982 3
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
		{
		SSLerr(SSL_F_REQUEST_CERTIFICATE,SSL_R_MESSAGE_TOO_LONG);
d984 1
a984 1
		}
d986 3
a988 4
	i = ssl2_read(s,(char *)&(p[s->init_num]),j);
	if (i < j) 
		{
		ret=ssl2_part_read(s,SSL_F_REQUEST_CERTIFICATE,i);
d990 1
a990 1
		}
d996 3
a998 4
	x509=(X509 *)d2i_X509(NULL,&cp,(long)s->s2->tmp.clen);
	if (x509 == NULL)
		{
		SSLerr(SSL_F_REQUEST_CERTIFICATE,ERR_R_X509_LIB);
d1000 1
a1000 1
		}
d1002 2
a1003 3
	if (((sk=sk_X509_new_null()) == NULL) || (!sk_X509_push(sk,x509)))
		{
		SSLerr(SSL_F_REQUEST_CERTIFICATE,ERR_R_MALLOC_FAILURE);
d1005 1
a1005 1
		}
d1007 1
a1007 1
	i=ssl_verify_cert_chain(s,sk);
d1010 1
a1010 1
		{
d1012 1
a1012 1
		EVP_PKEY *pkey=NULL;
d1015 5
a1019 5
		if (!EVP_VerifyInit_ex(&ctx,s->ctx->rsa_md5, NULL)
		    || !EVP_VerifyUpdate(&ctx,s->s2->key_material,
					 s->s2->key_material_length)
		    || !EVP_VerifyUpdate(&ctx,ccd,
					 SSL2_MIN_CERT_CHALLENGE_LENGTH))
d1022 4
a1025 5
		i=i2d_X509(s->cert->pkeys[SSL_PKEY_RSA_ENC].x509,NULL);
		buf2=OPENSSL_malloc((unsigned int)i);
		if (buf2 == NULL)
			{
			SSLerr(SSL_F_REQUEST_CERTIFICATE,ERR_R_MALLOC_FAILURE);
d1027 4
a1030 5
			}
		p2=buf2;
		i=i2d_X509(s->cert->pkeys[SSL_PKEY_RSA_ENC].x509,&p2);
		if (!EVP_VerifyUpdate(&ctx,buf2,(unsigned int)i))
			{
d1033 1
a1033 1
			}
d1036 4
a1039 3
		pkey=X509_get_pubkey(x509);
		if (pkey == NULL) goto end;
		i=EVP_VerifyFinal(&ctx,cp,s->s2->tmp.rlen,pkey);
d1043 1
a1043 2
		if (i > 0)
			{
d1046 2
a1047 2
			s->session->peer=x509;
			CRYPTO_add(&x509->references,1,CRYPTO_LOCK_X509);
d1049 1
a1049 1
			ret=1;
d1051 2
a1052 4
			}
		else
			{
			SSLerr(SSL_F_REQUEST_CERTIFICATE,SSL_R_BAD_CHECKSUM);
a1053 1
			}
d1055 1
a1055 2
	else
		{
d1057 2
a1058 2
		ssl2_return_error(s,SSL2_PE_BAD_CERTIFICATE);
		}
d1062 2
a1063 2
	return(ret);
	}
d1065 4
a1068 3
static int ssl_rsa_private_decrypt(CERT *c, int len, unsigned char *from,
	     unsigned char *to, int padding)
	{
d1072 9
a1080 11
	if ((c == NULL) || (c->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL))
		{
		SSLerr(SSL_F_SSL_RSA_PRIVATE_DECRYPT,SSL_R_NO_PRIVATEKEY);
		return(-1);
		}
	if (c->pkeys[SSL_PKEY_RSA_ENC].privatekey->type != EVP_PKEY_RSA)
		{
		SSLerr(SSL_F_SSL_RSA_PRIVATE_DECRYPT,SSL_R_PUBLIC_KEY_IS_NOT_RSA);
		return(-1);
		}
	rsa=c->pkeys[SSL_PKEY_RSA_ENC].privatekey->pkey.rsa;
d1083 1
a1083 1
	i=RSA_private_decrypt(len,from,to,rsa,padding);
d1085 3
a1087 3
		SSLerr(SSL_F_SSL_RSA_PRIVATE_DECRYPT,ERR_R_RSA_LIB);
	return(i);
	}
d1091 1
a1091 1
static void *dummy=&dummy;
@


1.16
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d156 1
a156 1
	clear_sys_error();
d173 1
a173 1
	clear_sys_error();
@


1.15
log
@openssl-1.0.0e: resolve conflicts
@
text
@d1062 6
a1067 4
		EVP_VerifyInit_ex(&ctx,s->ctx->rsa_md5, NULL);
		EVP_VerifyUpdate(&ctx,s->s2->key_material,
				 s->s2->key_material_length);
		EVP_VerifyUpdate(&ctx,ccd,SSL2_MIN_CERT_CHALLENGE_LENGTH);
d1078 5
a1082 1
		EVP_VerifyUpdate(&ctx,buf2,(unsigned int)i);
@


1.14
log
@resolve conflicts, fix local changes
@
text
@d406 2
a407 2
		n2s(p,i); s->session->key_arg_length=i;
		if(s->session->key_arg_length > SSL_MAX_KEY_ARG_LENGTH)
d413 1
a700 1
	STACK_OF(SSL_CIPHER) *sk;
a780 1
			sk= s->session->ciphers;
@


1.13
log
@resolve conflicts
@
text
@d120 1
a120 1
static SSL_METHOD *ssl2_get_server_method(int ver);
d132 1
a132 1
static SSL_METHOD *ssl2_get_server_method(int ver)
d270 1
a270 1
 			if (num1 != 0)
d369 1
a369 1
	SSL_CIPHER *cp;
d454 1
a454 1
	if (!ssl_cipher_get_evp(s->session,&c,&md,NULL))
@


1.12
log
@resolve conflicts
@
text
@d1057 1
a1057 1
	if (i)	/* we like the packet, now check the chksum */
d1086 1
a1086 1
		if (i) 
@


1.11
log
@resolve conflicts
@
text
@d140 4
a143 22
SSL_METHOD *SSLv2_server_method(void)
	{
	static int init=1;
	static SSL_METHOD SSLv2_server_data;

	if (init)
		{
		CRYPTO_w_lock(CRYPTO_LOCK_SSL_METHOD);

		if (init)
			{
			memcpy((char *)&SSLv2_server_data,(char *)sslv2_base_method(),
				sizeof(SSL_METHOD));
			SSLv2_server_data.ssl_accept=ssl2_accept;
			SSLv2_server_data.get_ssl_method=ssl2_get_server_method;
			init=0;
			}

		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_METHOD);
		}
	return(&SSLv2_server_data);
	}
d483 2
a484 2
		if(RAND_pseudo_bytes(p,i) <= 0)
		    return 0;
d610 1
a610 1
			s->s2->tmp.session_id_length);
d660 1
a660 1
				sk_SSL_CIPHER_delete(prio,z);
d790 2
a791 2
		if(RAND_pseudo_bytes(s->s2->conn_id,(int)s->s2->conn_id_length) <= 0)
		    return -1;
d923 1
d937 1
a937 1
		if(RAND_pseudo_bytes(ccd,SSL2_MIN_CERT_CHALLENGE_LENGTH) <= 0)
d1041 2
a1042 1
	x509=(X509 *)d2i_X509(NULL,&p,(long)s->s2->tmp.clen);
d1082 1
a1082 1
		i=EVP_VerifyFinal(&ctx,p,s->s2->tmp.rlen,pkey);
@


1.11.8.1
log
@Fix CVE-2008-5077: Incorrect checks for malformed signatures
@
text
@d1073 1
a1073 1
	if (i > 0)	/* we like the packet, now check the chksum */
d1102 1
a1102 1
		if (i > 0)
@


1.11.10.1
log
@Fix CVE-2008-5077: Incorrect checks for malformed signatures
@
text
@d1073 1
a1073 1
	if (i > 0)	/* we like the packet, now check the chksum */
d1102 1
a1102 1
		if (i > 0)
@


1.10
log
@resolve conflicts
@
text
@d165 1
a165 1
	unsigned long l=time(NULL);
d800 1
a800 1
			n=ssl_cipher_list_to_bytes(s,s->session->ciphers,d);
@


1.9
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d501 2
a502 1
		RAND_pseudo_bytes(p,i);
d808 2
a809 1
		RAND_pseudo_bytes(s->s2->conn_id,(int)s->s2->conn_id_length);
d954 2
a955 1
		RAND_pseudo_bytes(ccd,SSL2_MIN_CERT_CHALLENGE_LENGTH);
@


1.8
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d147 12
a158 5
		memcpy((char *)&SSLv2_server_data,(char *)sslv2_base_method(),
			sizeof(SSL_METHOD));
		SSLv2_server_data.ssl_accept=ssl2_accept;
		SSLv2_server_data.get_ssl_method=ssl2_get_server_method;
		init=0;
d878 1
a878 1
	if (memcmp(p,s->s2->conn_id,(unsigned int)s->s2->conn_id_length) != 0)
d1078 1
a1078 1
			(unsigned int)s->s2->key_material_length);
@


1.7
log
@apply patches from OpenSSL Security Advisory [30 July 2002],
http://marc.theaimsgroup.com/?l=openssl-dev&m=102802395104110&w=2
@
text
@a118 1
#include "ssl_locl.h"
d401 1
a401 2
				SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,
					SSL_R_PEER_ERROR);
d409 1
a409 2
			SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,
				SSL_R_NO_CIPHER_MATCH);
d420 2
a421 2
			SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,
				   SSL_R_KEY_ARG_TOO_LONG);
d429 6
a434 1
	die(s->init_buf->length >= SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER);
d439 1
d518 7
a524 1
	die(i <= SSL_MAX_MASTER_KEY_LENGTH);
d575 1
d587 1
d693 6
a698 1
	die(s->s2->challenge_length <= sizeof s->s2->challenge);
d855 6
a860 1
	die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
d888 5
a892 1
		die(s->s2->challenge_length <= sizeof s->s2->challenge);
d912 6
a917 4
		die(s->session->session_id_length
		    <= sizeof s->session->session_id);
		memcpy(p,s->session->session_id,
			(unsigned int)s->session->session_id_length);
d1034 1
a1034 1
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,SSL_R_MESSAGE_TOO_LONG);
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d119 1
d421 6
d432 1
d515 1
d682 1
d839 1
d867 1
d887 2
@


1.5
log
@merge openssl 0.9.6b-engine

Note that this is a maintenence release, API's appear *not* to have changed.
As such, I have only increased the minor number on these libraries
@
text
@d58 53
d113 1
a113 1
#ifndef NO_SSL2
d162 1
a162 1
	void (*cb)()=NULL;
d175 1
a176 1
	s->in_handshake++;
d378 1
d391 2
a420 1
		s->init_num=0;
d426 8
a433 2
	n=s->s2->tmp.clear+s->s2->tmp.enc+keya - s->init_num;
	i=ssl2_read(s,(char *)&(p[s->init_num]),n);
d435 3
d475 2
a476 2
		|| (is_export && ((i != ek) || (s->s2->tmp.clear+i !=
			EVP_CIPHER_key_length(c))))))
d515 1
d519 1
d536 1
a560 1
		s->init_num=0;
d565 8
a572 3
	n=s->s2->tmp.cipher_spec_length+s->s2->challenge_length+
		s->s2->tmp.session_id_length-s->init_num;
	i=ssl2_read(s,(char *)&(p[s->init_num]),n);
d574 3
d633 1
a633 1
		cl=ssl_get_ciphers_by_id(s);
d635 12
a646 1
		for (z=0; z<sk_SSL_CIPHER_num(cs); z++)
d648 1
a648 1
			if (sk_SSL_CIPHER_find(cl,sk_SSL_CIPHER_value(cs,z)) < 0)
d650 1
a650 1
				sk_SSL_CIPHER_delete(cs,z);
d654 5
a658 1

d662 2
a663 1
		 * the ciphers.
d798 2
a799 1
	int i;
d807 1
d817 1
d819 4
a824 1
		s->init_num=0;
d829 4
a832 2
	i=ssl2_read(s,(char *)&(p[s->init_num]),s->s2->conn_id_length-s->init_num);
	if (i < (int)s->s2->conn_id_length-s->init_num)
d836 3
d894 1
d928 3
a930 2
		i=ssl2_read(s,(char *)&(p[s->init_num]),6-s->init_num);
		if (i < 3)
d935 1
d937 1
a937 1
		if ((*p == SSL2_MT_ERROR) && (i >= 3))
d940 13
d962 1
a962 1
		if ((*(p++) != SSL2_MT_CLIENT_CERTIFICATE) || (i < 6))
d968 6
a985 1
		s->init_num=0;
d990 8
a997 2
	j=s->s2->tmp.clen+s->s2->tmp.rlen-s->init_num;
	i=ssl2_read(s,(char *)&(p[s->init_num]),j);
d1003 3
d1027 2
a1028 1
		EVP_VerifyInit(&ctx,s->ctx->rsa_md5);
d1049 1
a1049 1
		memset(&ctx,0,sizeof(ctx));
d1102 1
a1102 1
#else /* !NO_SSL2 */
@


1.5.4.1
log
@Pull in patch from current:
Fix (markus), errata 013:
apply patches from OpenSSL Security Advisory [30 July 2002],
http://marc.theaimsgroup.com/?l=openssl-dev&m=102802395104110&w=2
@
text
@a65 1
#include "ssl_locl.h"
a363 6
 		if(s->session->key_arg_length > SSL_MAX_KEY_ARG_LENGTH)
 			{
 			SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,
 				   SSL_R_KEY_ARG_TOO_LONG);
 			return -1;
 			}
a369 1
 	die(s->init_buf->length >= SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER);
a442 1
	die(i <= SSL_MAX_MASTER_KEY_LENGTH);
a582 1
	die(s->s2->challenge_length <= sizeof s->s2->challenge);
a732 1
 	die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
a754 1
		die(s->s2->challenge_length <= sizeof s->s2->challenge);
a773 2
		die(s->session->session_id_length
		    <= sizeof s->session->session_id);
@


1.5.2.1
log
@Errata #030 (markus):
Fixes for the "OpenSSL Security Advisory [30 July 2002]"
@
text
@a65 1
#include "ssl_locl.h"
a363 6
 		if(s->session->key_arg_length > SSL_MAX_KEY_ARG_LENGTH)
 			{
 			SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,
 				   SSL_R_KEY_ARG_TOO_LONG);
 			return -1;
 			}
a369 1
 	die(s->init_buf->length >= SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER);
a442 1
	die(i <= SSL_MAX_MASTER_KEY_LENGTH);
a582 1
	die(s->s2->challenge_length <= sizeof s->s2->challenge);
a732 1
 	die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
a754 1
		die(s->s2->challenge_length <= sizeof s->s2->challenge);
a773 2
		die(s->session->session_id_length
		    <= sizeof s->session->session_id);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d408 1
a408 1
	 * dud master secret */
d414 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d901 1
a901 1
		buf2=Malloc((unsigned int)i);
d910 1
a910 1
		Free(buf2);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d59 2
a60 1
#ifndef NO_RSA
a64 1
#include "ssl_locl.h"
d112 1
a112 1
	RAND_seed(&l,sizeof(l));
d418 1
a418 1
		RAND_bytes(p,i);
d683 1
a683 1
		RAND_bytes(s->s2->conn_id,(int)s->s2->conn_id_length);
d692 1
a692 1
 	/* If we are using TCP/IP, the performace is bad if we do 2
d801 1
a801 1
		RAND_bytes(ccd,SSL2_MIN_CERT_CHALLENGE_LENGTH);
d901 1
a901 1
		buf2=(unsigned char *)Malloc((unsigned int)i);
d924 1
d969 6
@


1.1
log
@Initial revision
@
text
@d59 1
d61 3
a63 3
#include "bio.h"
#include "rand.h"
#include "objects.h"
d65 1
a65 1
#include "evp.h"
d67 1
a67 1
#ifndef NOPROTO
a76 11
#else
static int get_client_master_key();
static int get_client_hello();
static int server_hello(); 
static int get_client_finished();
static int server_verify();
static int server_finish();
static int request_certificate();
static int ssl_rsa_private_decrypt();
#endif

d79 1
a79 2
static SSL_METHOD *ssl2_get_server_method(ver)
int ver;
d87 1
a87 1
SSL_METHOD *SSLv2_server_method()
a93 1
		init=0;
d98 1
d103 1
a103 2
int ssl2_accept(s)
SSL *s;
d112 1
a112 1
	RAND_seed((unsigned char *)&l,sizeof(l));
d125 1
a125 2
	if (((s->session == NULL) || (s->session->cert == NULL)) &&
		(s->cert == NULL))
d143 1
d157 1
a157 1
			s->ctx->sess_accept++;
d284 1
d291 1
a291 1
			s->ctx->sess_accept_good++;
d322 1
a322 2
static int get_client_master_key(s)
SSL *s;
d324 1
a324 1
	int export,i,n,keya,error=0,ek;
d327 2
a328 2
	EVP_CIPHER *c;
	EVP_MD *md;
d378 1
a378 1
	if (s->session->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL)
d388 1
a388 1
	export=(s->session->cipher->algorithms & SSL_EXP)?1:0;
d390 1
a390 1
	if (!ssl_cipher_get_evp(s->session->cipher,&c,&md))
d399 1
a399 1
		export=1;
d410 2
a411 2
		((!export && (i != EVP_CIPHER_key_length(c)))
		|| ( export && ((i != ek) || (s->s2->tmp.clear+i !=
d414 1
a414 1
		if (export)
d427 2
a428 2
	else if ((!export && (i != EVP_CIPHER_key_length(c)))
		|| ( export && ((i != ek) || (s->s2->tmp.clear+i !=
d441 1
a441 1
	if (export) i+=s->s2->tmp.clear;
d447 1
a447 2
static int get_client_hello(s)
SSL *s;
d451 2
a452 2
	STACK *cs; /* a stack of SSL_CIPHERS */
	STACK *cl; /* the ones we want to use */
d560 1
a560 1
		for (z=0; z<sk_num(cs); z++)
d562 1
a562 1
			if (sk_find(cl,sk_value(cs,z)) < 0)
d564 1
a564 1
				sk_delete(cs,z);
d589 1
a589 2
static int server_hello(s)
SSL *s;
d593 1
a593 1
	STACK *sk;
d602 24
d629 3
a631 3
			if (s->session->cert != NULL)
				ssl_cert_free(s->session->cert);
			s->session->cert=s->cert;		
d638 1
a638 1
			if (s->session->cert == NULL)
d642 1
a642 1
				s->session->cert=s->cert;
d645 1
d647 1
a647 1
		if (s->session->cert == NULL)
d704 1
a704 2
static int get_client_finished(s)
SSL *s;
d746 1
a746 2
static int server_verify(s)
SSL *s;
d764 1
a764 2
static int server_finish(s)
SSL *s;
d787 1
a787 2
static int request_certificate(s)
SSL *s;
d793 1
a793 1
	STACK *sk=NULL;
d882 1
a882 1
	if (((sk=sk_new_null()) == NULL) || (!sk_push(sk,(char *)x509)))
d900 1
a900 1
		i=i2d_X509(s->session->cert->pkeys[SSL_PKEY_RSA_ENC].x509,NULL);
d908 1
a908 1
		i=i2d_X509(s->session->cert->pkeys[SSL_PKEY_RSA_ENC].x509,&p2);
d915 1
d939 2
a940 2
	if (sk != NULL) sk_free(sk);
	if (x509 != NULL) X509_free(x509);
d944 2
a945 6
static int ssl_rsa_private_decrypt(c, len, from, to,padding)
CERT *c;
int len;
unsigned char *from;
unsigned char *to;
int padding;
d968 1
a968 1

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a57 53
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
d59 4
d64 1
a64 6
#ifndef OPENSSL_NO_SSL2
#include <stdio.h>
#include <openssl/bio.h>
#include <openssl/rand.h>
#include <openssl/objects.h>
#include <openssl/evp.h>
d66 1
a66 1
static SSL_METHOD *ssl2_get_server_method(int ver);
d76 11
d89 2
a90 1
static SSL_METHOD *ssl2_get_server_method(int ver)
d98 1
a98 1
SSL_METHOD *SSLv2_server_method(void)
d105 1
a109 1
		init=0;
d114 2
a115 1
int ssl2_accept(SSL *s)
d121 1
a121 1
	void (*cb)(const SSL *ssl,int type,int val)=NULL;
d124 1
a124 1
	RAND_add(&l,sizeof(l),0);
d134 1
a135 1
	if (!SSL_in_init(s) || SSL_in_before(s)) SSL_clear(s);
d137 2
a138 1
	if (s->cert == NULL)
a155 1
			s->server=1;
d169 1
a169 1
			s->ctx->stats.sess_accept++;
a295 1
			ssl_free_wbio_buffer(s);
d302 1
a302 1
			s->ctx->stats.sess_accept_good++;
d333 2
a334 1
static int get_client_master_key(SSL *s)
d336 1
a336 2
	int is_export,i,n,keya,ek;
	unsigned long len;
d339 2
a340 2
	const EVP_CIPHER *c;
	const EVP_MD *md;
a348 2
		s->init_num = 10;

d377 1
d383 2
a384 8
	len = 10 + (unsigned long)s->s2->tmp.clear + (unsigned long)s->s2->tmp.enc + (unsigned long)keya;
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
		{
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,SSL_R_MESSAGE_TOO_LONG);
		return -1;
		}
	n = (int)len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]),n);
a385 3
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, p, (size_t)len, s, s->msg_callback_arg); /* CLIENT-MASTER-KEY */
	p += 10;
d390 1
a390 1
	if (s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL)
d400 1
a400 1
	is_export=SSL_C_IS_EXPORT(s->session->cipher);
d402 1
a402 1
	if (!ssl_cipher_get_evp(s->session,&c,&md,NULL))
d411 1
a411 1
		is_export=1;
d420 1
a420 1
	 * random master secret (Bleichenbacher attack) */
d422 3
a424 3
		((!is_export && (i != EVP_CIPHER_key_length(c)))
		|| (is_export && ((i != ek) || (s->s2->tmp.clear+(unsigned int)i !=
			(unsigned int)EVP_CIPHER_key_length(c))))))
d426 1
a426 2
		ERR_clear_error();
		if (is_export)
d430 1
a430 1
		RAND_pseudo_bytes(p,i);
d439 2
a440 2
	else if ((!is_export && (i != EVP_CIPHER_key_length(c)))
		|| (is_export && ((i != ek) || (s->s2->tmp.clear+i !=
d453 1
a453 1
	if (is_export) i+=s->s2->tmp.clear;
d459 2
a460 1
static int get_client_hello(SSL *s)
a462 1
	unsigned long len;
d464 2
a465 3
	STACK_OF(SSL_CIPHER) *cs; /* a stack of SSL_CIPHERS */
	STACK_OF(SSL_CIPHER) *cl; /* the ones we want to use */
	STACK_OF(SSL_CIPHER) *prio, *allow;
a481 1
		s->init_num = 9;
d506 1
d511 3
a513 8
	len = 9 + (unsigned long)s->s2->tmp.cipher_spec_length + (unsigned long)s->s2->challenge_length + (unsigned long)s->s2->tmp.session_id_length;
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
		{
		SSLerr(SSL_F_GET_CLIENT_HELLO,SSL_R_MESSAGE_TOO_LONG);
		return -1;
		}
	n = (int)len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]),n);
a514 3
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, p, (size_t)len, s, s->msg_callback_arg); /* CLIENT-HELLO */
	p += 9;
d571 1
a571 1
		cl=SSL_get_ciphers(s);
d573 1
a573 12
		if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE)
		    {
		    prio=sk_SSL_CIPHER_dup(cl);
		    if (prio == NULL) goto mem_err;
		    allow = cs;
		    }
		else
		    {
		    prio = cs;
		    allow = cl;
		    }
		for (z=0; z<sk_SSL_CIPHER_num(prio); z++)
d575 1
a575 1
			if (sk_SSL_CIPHER_find(allow,sk_SSL_CIPHER_value(prio,z)) < 0)
d577 1
a577 1
				sk_SSL_CIPHER_delete(prio,z);
d581 1
a581 5
		if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE)
		    {
		    sk_SSL_CIPHER_free(s->session->ciphers);
		    s->session->ciphers = prio;
		    }
d585 1
a585 2
		 * the ciphers or in the order of the server's preference
		 * if SSL_OP_CIPHER_SERVER_PREFERENCE was set.
d602 2
a603 1
static int server_hello(SSL *s)
d607 1
a607 1
	STACK_OF(SSL_CIPHER) *sk;
a615 24
#if 1
		if (!hit)
			{
			if (s->session->sess_cert != NULL)
				/* This can't really happen because get_client_hello
				 * has called ssl_get_new_session, which does not set
				 * sess_cert. */
				ssl_sess_cert_free(s->session->sess_cert);
			s->session->sess_cert = ssl_sess_cert_new();
			if (s->session->sess_cert == NULL)
				{
				SSLerr(SSL_F_SERVER_HELLO, ERR_R_MALLOC_FAILURE);
				return(-1);
				}
			}
		/* If 'hit' is set, then s->sess_cert may be non-NULL or NULL,
		 * depending on whether it survived in the internal cache
		 * or was retrieved from an external cache.
		 * If it is NULL, we cannot put any useful data in it anyway,
		 * so we don't touch it.
		 */

#else /* That's what used to be done when cert_st and sess_cert_st were
	   * the same. */
d619 3
a621 3
			if (s->session->sess_cert != NULL)
				ssl_cert_free(s->session->sess_cert);
			s->session->sess_cert=s->cert;		
d628 1
a628 1
			if (s->session->sess_cert == NULL)
d632 1
a632 1
				s->session->sess_cert=s->cert;
a634 1
#endif
d636 1
a636 1
		if (s->cert == NULL)
d672 1
a672 1
		RAND_pseudo_bytes(s->s2->conn_id,(int)s->s2->conn_id_length);
d681 1
a681 1
 	/* If we are using TCP/IP, the performance is bad if we do 2
d693 2
a694 1
static int get_client_finished(SSL *s)
d697 1
a697 2
	int i, n;
	unsigned long len;
a704 1
		s->init_num += i;
a713 1
				{
a714 4
				/* try to read the error message */
				i=ssl2_read(s,(char *)&(p[s->init_num]),3-s->init_num);
				return ssl2_part_read(s,SSL_F_GET_SERVER_VERIFY,i);
				}
d717 1
d722 2
a723 4
	len = 1 + (unsigned long)s->s2->conn_id_length;
	n = (int)len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]),n);
	if (i < n)
a726 3
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, p, len, s, s->msg_callback_arg); /* CLIENT-FINISHED */
	p += 1;
d736 2
a737 1
static int server_verify(SSL *s)
d755 2
a756 1
static int server_finish(SSL *s)
d779 2
a780 1
static int request_certificate(SSL *s)
a784 1
	unsigned long len;
d786 1
a786 1
	STACK_OF(X509) *sk=NULL;
d794 1
a794 1
		RAND_pseudo_bytes(ccd,SSL2_MIN_CERT_CHALLENGE_LENGTH);
d818 2
a819 3
		i=ssl2_read(s,(char *)&(p[s->init_num]),6-s->init_num); /* try to read 6 octets ... */
		if (i < 3-s->init_num) /* ... but don't call ssl2_part_read now if we got at least 3
		                        * (probably NO-CERTIFICATE-ERROR) */
a823 1
		s->init_num += i;
d825 1
a825 1
		if ((s->init_num >= 3) && (p[0] == SSL2_MT_ERROR))
a827 13
			if (i != SSL2_PE_NO_CERTIFICATE)
				{
				/* not the error message we expected -- let ssl2_part_read handle it */
				s->init_num -= 3;
				ret = ssl2_part_read(s,SSL_F_REQUEST_CERTIFICATE, 3);
				goto end;
				}

			if (s->msg_callback)
				s->msg_callback(0, s->version, 0, p, 3, s, s->msg_callback_arg); /* ERROR */

			/* this is the one place where we can recover from an SSL 2.0 error */

d837 1
a837 1
		if ((*(p++) != SSL2_MT_CLIENT_CERTIFICATE) || (s->init_num < 6))
a842 6
		if (s->init_num != 6)
			{
			SSLerr(SSL_F_REQUEST_CERTIFICATE, ERR_R_INTERNAL_ERROR);
			goto end;
			}
		
d855 1
d860 2
a861 8
	len = 6 + (unsigned long)s->s2->tmp.clen + (unsigned long)s->s2->tmp.rlen;
	if (len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
		{
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,SSL_R_MESSAGE_TOO_LONG);
		goto end;
		}
	j = (int)len - s->init_num;
	i = ssl2_read(s,(char *)&(p[s->init_num]),j);
a866 3
	if (s->msg_callback)
		s->msg_callback(0, s->version, 0, p, len, s, s->msg_callback_arg); /* CLIENT-CERTIFICATE */
	p += 6;
d875 1
a875 1
	if (((sk=sk_X509_new_null()) == NULL) || (!sk_X509_push(sk,x509)))
d888 1
a888 2
		EVP_MD_CTX_init(&ctx);
		EVP_VerifyInit_ex(&ctx,s->ctx->rsa_md5, NULL);
d893 2
a894 2
		i=i2d_X509(s->cert->pkeys[SSL_PKEY_RSA_ENC].x509,NULL);
		buf2=OPENSSL_malloc((unsigned int)i);
d901 1
a901 1
		i=i2d_X509(s->cert->pkeys[SSL_PKEY_RSA_ENC].x509,&p2);
d903 1
a903 1
		OPENSSL_free(buf2);
d908 1
a908 2
		EVP_PKEY_free(pkey);
		EVP_MD_CTX_cleanup(&ctx);
a915 1
			s->session->verify_result = s->verify_result;
d931 2
a932 2
	sk_X509_free(sk);
	X509_free(x509);
d936 6
a941 2
static int ssl_rsa_private_decrypt(CERT *c, int len, unsigned char *from,
	     unsigned char *to, int padding)
a963 5
#else /* !OPENSSL_NO_SSL2 */

# if PEDANTIC
static void *dummy=&dummy;
# endif
a964 1
#endif
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@a118 1
#include "cryptlib.h"
a419 6
		if(s->session->key_arg_length > SSL_MAX_KEY_ARG_LENGTH)
			{
			SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,
				   SSL_R_KEY_ARG_TOO_LONG);
			return -1;
			}
a424 1
	die(s->init_buf->length >= SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER);
a506 1
	die(i <= SSL_MAX_MASTER_KEY_LENGTH);
a672 1
	die(s->s2->challenge_length <= sizeof s->s2->challenge);
a828 1
	die(s->s2->conn_id_length <= sizeof s->s2->conn_id);
a855 1
		die(s->s2->challenge_length <= sizeof s->s2->challenge);
a874 2
		die(s->session->session_id_length
		    <= sizeof s->session->session_id);
@


1.1.1.4
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d402 2
a403 1
				SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_PEER_ERROR);
d411 2
a412 1
			SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_NO_CIPHER_MATCH);
d423 2
a424 2
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
			SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_KEY_ARG_TOO_LONG);
d432 1
a432 6
	if (s->init_buf->length < SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, ERR_R_INTERNAL_ERROR);
		return -1;
		}
a436 1
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
d515 1
a515 7

	if (i > SSL_MAX_MASTER_KEY_LENGTH)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, ERR_R_INTERNAL_ERROR);
		return -1;
		}
a565 1
			ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
a576 1
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
d682 1
a682 6
	if (s->s2->challenge_length > sizeof s->s2->challenge)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);
		return -1;
		}
d839 1
a839 6
	if (s->s2->conn_id_length > sizeof s->s2->conn_id)
		{
		ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR);
		SSLerr(SSL_F_GET_CLIENT_FINISHED, ERR_R_INTERNAL_ERROR);
		return -1;
		}
d867 1
a867 5
		if (s->s2->challenge_length > sizeof s->s2->challenge)
			{
			SSLerr(SSL_F_SERVER_VERIFY, ERR_R_INTERNAL_ERROR);
			return -1;
			}
d887 4
a890 6
		if (s->session->session_id_length > sizeof s->session->session_id)
			{
			SSLerr(SSL_F_SERVER_FINISH, ERR_R_INTERNAL_ERROR);
			return -1;
			}
		memcpy(p,s->session->session_id, (unsigned int)s->session->session_id_length);
d1007 1
a1007 1
		SSLerr(SSL_F_REQUEST_CERTIFICATE,SSL_R_MESSAGE_TOO_LONG);
@


1.1.1.5
log
@import 0.9.7b (without idea and rc5)
@
text
@d148 5
a152 12
		CRYPTO_w_lock(CRYPTO_LOCK_SSL_METHOD);

		if (init)
			{
			memcpy((char *)&SSLv2_server_data,(char *)sslv2_base_method(),
				sizeof(SSL_METHOD));
			SSLv2_server_data.ssl_accept=ssl2_accept;
			SSLv2_server_data.get_ssl_method=ssl2_get_server_method;
			init=0;
			}

		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_METHOD);
d872 1
a872 1
	if (memcmp(p,s->s2->conn_id,s->s2->conn_id_length) != 0)
d1072 1
a1072 1
				 s->s2->key_material_length);
@


1.1.1.6
log
@import openssl-0.9.7d
@
text
@d119 1
@


1.1.1.7
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d501 1
a501 2
		if(RAND_pseudo_bytes(p,i) <= 0)
		    return 0;
d807 1
a807 2
		if(RAND_pseudo_bytes(s->s2->conn_id,(int)s->s2->conn_id_length) <= 0)
		    return -1;
d952 1
a952 2
		if(RAND_pseudo_bytes(ccd,SSL2_MIN_CERT_CHALLENGE_LENGTH) <= 0)
			return -1;
@


1.1.1.8
log
@import of openssl-0.9.7j
@
text
@d165 1
a165 1
	unsigned long l=(unsigned long)time(NULL);
d800 1
a800 1
			n=ssl_cipher_list_to_bytes(s,s->session->ciphers,d,0);
@


1.1.1.9
log
@import of OpenSSL 0.9.8h
@
text
@d140 22
a161 4
IMPLEMENT_ssl2_meth_func(SSLv2_server_method,
			ssl2_accept,
			ssl_undefined_function,
			ssl2_get_server_method)
d501 2
a502 2
		if (RAND_pseudo_bytes(p,i) <= 0)
			return 0;
d628 1
a628 1
			s->s2->tmp.session_id_length, NULL);
d678 1
a678 1
				(void)sk_SSL_CIPHER_delete(prio,z);
d808 2
a809 2
		if (RAND_pseudo_bytes(s->s2->conn_id,(int)s->s2->conn_id_length) <= 0)
			return -1;
a940 1
	const unsigned char *cp;
d954 1
a954 1
		if (RAND_pseudo_bytes(ccd,SSL2_MIN_CERT_CHALLENGE_LENGTH) <= 0)
d1058 1
a1058 2
	cp = p;
	x509=(X509 *)d2i_X509(NULL,&cp,(long)s->s2->tmp.clen);
d1098 1
a1098 1
		i=EVP_VerifyFinal(&ctx,cp,s->s2->tmp.rlen,pkey);
@


1.1.1.10
log
@import openssl-0.9.8j
@
text
@d1057 1
a1057 1
	if (i > 0)	/* we like the packet, now check the chksum */
d1086 1
a1086 1
		if (i > 0)
@


1.1.1.11
log
@import OpenSSL-1.0.0a
@
text
@d120 1
a120 1
static const SSL_METHOD *ssl2_get_server_method(int ver);
d132 1
a132 1
static const SSL_METHOD *ssl2_get_server_method(int ver)
d270 1
a270 1
 			if (num1 > 0)
d369 1
a369 1
	const SSL_CIPHER *cp;
d454 1
a454 1
	if (!ssl_cipher_get_evp(s->session,&c,&md,NULL,NULL,NULL))
@


1.1.1.12
log
@import OpenSSL 1.0.0e
@
text
@d406 2
a407 2
		n2s(p,i);
		if(i > SSL_MAX_KEY_ARG_LENGTH)
a412 1
		s->session->key_arg_length=i;
d700 1
d781 1
@


1.1.1.13
log
@Import OpenSSL 1.0.1g
@
text
@d1062 4
a1065 6
		if (!EVP_VerifyInit_ex(&ctx,s->ctx->rsa_md5, NULL)
		    || !EVP_VerifyUpdate(&ctx,s->s2->key_material,
					 s->s2->key_material_length)
		    || !EVP_VerifyUpdate(&ctx,ccd,
					 SSL2_MIN_CERT_CHALLENGE_LENGTH))
			goto msg_end;
d1076 1
a1076 5
		if (!EVP_VerifyUpdate(&ctx,buf2,(unsigned int)i))
			{
			OPENSSL_free(buf2);
			goto msg_end;
			}
@


