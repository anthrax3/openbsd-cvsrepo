head	1.18;
access;
symbols
	OPENBSD_6_0:1.17.0.6
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.18
date	2016.09.03.11.33.41;	author beck;	state dead;
branches;
next	1.17;
commitid	HnbXxsegngek41U2;

1.17
date	2015.06.24.09.44.18;	author jsing;	state Exp;
branches;
next	1.16;
commitid	1tyDfKWO71bTqjbn;

1.16
date	2015.06.23.05.58.28;	author doug;	state Exp;
branches;
next	1.15;
commitid	MSIxeB3IPB9767R5;

1.15
date	2015.06.20.01.21.51;	author doug;	state Exp;
branches;
next	1.14;
commitid	pewLjxvQUGgD6ck7;

1.14
date	2015.06.19.00.23.36;	author doug;	state Exp;
branches;
next	1.13;
commitid	heMIbMqD4xbmFliW;

1.13
date	2015.06.17.07.25.56;	author doug;	state Exp;
branches;
next	1.12;
commitid	msX3P9Gy1gjN9sEP;

1.12
date	2015.06.17.07.06.22;	author doug;	state Exp;
branches;
next	1.11;
commitid	2qX1wLnbymkZlDxx;

1.11
date	2015.06.17.07.00.22;	author doug;	state Exp;
branches;
next	1.10;
commitid	dv5rWD5UDvtC0GAC;

1.10
date	2015.06.16.06.11.39;	author doug;	state Exp;
branches;
next	1.9;
commitid	03CUhw46TFpAbd6U;

1.9
date	2015.06.15.07.35.49;	author doug;	state Exp;
branches;
next	1.8;
commitid	68o5eAoKat9FWIFX;

1.8
date	2015.06.13.08.46.00;	author doug;	state Exp;
branches;
next	1.7;
commitid	i5b0FzEFW6x58mTt;

1.7
date	2015.04.29.02.11.09;	author doug;	state Exp;
branches;
next	1.6;
commitid	YxLXEnlmS97vPGJ1;

1.6
date	2015.04.29.01.27.34;	author doug;	state Exp;
branches;
next	1.5;
commitid	qv9VkLK1rwhSV69m;

1.5
date	2015.04.29.01.23.20;	author doug;	state Exp;
branches;
next	1.4;
commitid	ZA2Ccga6TQ4JHT57;

1.4
date	2015.04.29.01.16.06;	author doug;	state Exp;
branches;
next	1.3;
commitid	KGexnOfMJjewsaX4;

1.3
date	2015.04.25.15.28.47;	author doug;	state Exp;
branches;
next	1.2;
commitid	7doRAKue8v1m0MMw;

1.2
date	2015.02.06.22.22.33;	author doug;	state Exp;
branches;
next	1.1;
commitid	I6v8UUW6Pnk2wCv3;

1.1
date	2015.02.06.09.36.16;	author doug;	state Exp;
branches;
next	;
commitid	t6BPqtyhmeNgetxc;


desc
@@


1.18
log
@Remove the libssl/src directory
@
text
@/*	$OpenBSD: bs_cbs.c,v 1.17 2015/06/24 09:44:18 jsing Exp $	*/
/*
 * Copyright (c) 2014, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */

#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/opensslconf.h>
#include <openssl/buffer.h>
#include <openssl/crypto.h>

#include "bytestring.h"

void
CBS_init(CBS *cbs, const uint8_t *data, size_t len)
{
	cbs->data = data;
	cbs->initial_len = len;
	cbs->len = len;
}

void
CBS_dup(const CBS *cbs, CBS *out)
{
	CBS_init(out, CBS_data(cbs), CBS_len(cbs));
	out->initial_len = cbs->initial_len;
}

static int
cbs_get(CBS *cbs, const uint8_t **p, size_t n)
{
	if (cbs->len < n)
		return 0;

	*p = cbs->data;
	cbs->data += n;
	cbs->len -= n;
	return 1;
}

size_t
CBS_offset(const CBS *cbs)
{
	return cbs->initial_len - cbs->len;
}

int
CBS_skip(CBS *cbs, size_t len)
{
	const uint8_t *dummy;
	return cbs_get(cbs, &dummy, len);
}

const uint8_t *
CBS_data(const CBS *cbs)
{
	return cbs->data;
}

size_t
CBS_len(const CBS *cbs)
{
	return cbs->len;
}

int
CBS_stow(const CBS *cbs, uint8_t **out_ptr, size_t *out_len)
{
	free(*out_ptr);
	*out_ptr = NULL;
	*out_len = 0;

	if (cbs->len == 0)
		return 1;

	if ((*out_ptr = malloc(cbs->len)) == NULL)
		return 0;

	memcpy(*out_ptr, cbs->data, cbs->len);

	*out_len = cbs->len;
	return 1;
}

int
CBS_strdup(const CBS *cbs, char **out_ptr)
{
	free(*out_ptr);
	*out_ptr = strndup((const char *)cbs->data, cbs->len);
	return (*out_ptr != NULL);
}

int
CBS_write_bytes(const CBS *cbs, uint8_t *dst, size_t dst_len, size_t *copied)
{
	if (dst_len < cbs->len)
		return 0;

	memmove(dst, cbs->data, cbs->len);

	if (copied != NULL)
		*copied = cbs->len;

	return 1;
}

int
CBS_contains_zero_byte(const CBS *cbs)
{
	return memchr(cbs->data, 0, cbs->len) != NULL;
}

int
CBS_mem_equal(const CBS *cbs, const uint8_t *data, size_t len)
{
	if (len != cbs->len)
		return 0;

	return timingsafe_memcmp(cbs->data, data, len) == 0;
}

static int
cbs_get_u(CBS *cbs, uint32_t *out, size_t len)
{
	uint32_t result = 0;
	size_t i;
	const uint8_t *data;

	if (len < 1 || len > 4)
		return 0;

	if (!cbs_get(cbs, &data, len))
		return 0;

	for (i = 0; i < len; i++) {
		result <<= 8;
		result |= data[i];
	}
	*out = result;
	return 1;
}

int
CBS_get_u8(CBS *cbs, uint8_t *out)
{
	const uint8_t *v;

	if (!cbs_get(cbs, &v, 1))
		return 0;

	*out = *v;
	return 1;
}

int
CBS_get_u16(CBS *cbs, uint16_t *out)
{
	uint32_t v;

	if (!cbs_get_u(cbs, &v, 2))
		return 0;

	*out = v;
	return 1;
}

int
CBS_get_u24(CBS *cbs, uint32_t *out)
{
	return cbs_get_u(cbs, out, 3);
}

int
CBS_get_u32(CBS *cbs, uint32_t *out)
{
	return cbs_get_u(cbs, out, 4);
}

int
CBS_get_bytes(CBS *cbs, CBS *out, size_t len)
{
	const uint8_t *v;

	if (!cbs_get(cbs, &v, len))
		return 0;

	CBS_init(out, v, len);
	return 1;
}

static int
cbs_get_length_prefixed(CBS *cbs, CBS *out, size_t len_len)
{
	uint32_t len;

	if (!cbs_get_u(cbs, &len, len_len))
		return 0;

	return CBS_get_bytes(cbs, out, len);
}

int
CBS_get_u8_length_prefixed(CBS *cbs, CBS *out)
{
	return cbs_get_length_prefixed(cbs, out, 1);
}

int
CBS_get_u16_length_prefixed(CBS *cbs, CBS *out)
{
	return cbs_get_length_prefixed(cbs, out, 2);
}

int
CBS_get_u24_length_prefixed(CBS *cbs, CBS *out)
{
	return cbs_get_length_prefixed(cbs, out, 3);
}

int
CBS_get_any_asn1_element(CBS *cbs, CBS *out, unsigned int *out_tag,
    size_t *out_header_len)
{
	return cbs_get_any_asn1_element_internal(cbs, out, out_tag,
	    out_header_len, 1);
}

/*
 * Review X.690 for details on ASN.1 DER encoding.
 *
 * If non-strict mode is enabled, then DER rules are relaxed
 * for indefinite constructs (violates DER but a little closer to BER).
 * Non-strict mode should only be used by bs_ber.c
 *
 * Sections 8, 10 and 11 for DER encoding
 */
int
cbs_get_any_asn1_element_internal(CBS *cbs, CBS *out, unsigned int *out_tag,
    size_t *out_header_len, int strict)
{
	uint8_t tag, length_byte;
	CBS header = *cbs;
	CBS throwaway;
	size_t len;

	if (out == NULL)
		out = &throwaway;

	/*
	 * Get identifier octet and length octet.  Only 1 octet for each
	 * is a CBS limitation.
	 */
	if (!CBS_get_u8(&header, &tag) || !CBS_get_u8(&header, &length_byte))
		return 0;

	/* CBS limitation: long form tags are not supported. */
	if ((tag & 0x1f) == 0x1f)
		return 0;

	if (out_tag != NULL)
		*out_tag = tag;

	if ((length_byte & 0x80) == 0) {
		/* Short form length. */
		len = ((size_t) length_byte) + 2;
		if (out_header_len != NULL)
			*out_header_len = 2;

	} else {
		/* Long form length. */
		const size_t num_bytes = length_byte & 0x7f;
		uint32_t len32;

		/* ASN.1 reserved value for future extensions */
		if (num_bytes == 0x7f)
			return 0;

		/* Handle indefinite form length */
		if (num_bytes == 0) {
			/* DER encoding doesn't allow for indefinite form. */
			if (strict)
				return 0;

			/* Primitive cannot use indefinite in BER or DER. */
			if ((tag & CBS_ASN1_CONSTRUCTED) == 0)
				return 0;

			/* Constructed, indefinite length allowed in BER. */
			if (out_header_len != NULL)
				*out_header_len = 2;
			return CBS_get_bytes(cbs, out, 2);
		}

		/* CBS limitation. */
		if (num_bytes > 4)
			return 0;

		if (!cbs_get_u(&header, &len32, num_bytes))
			return 0;

		/* DER has a minimum length octet requirement. */
		if (len32 < 128)
			/* Should have used short form instead */
			return 0;

		if ((len32 >> ((num_bytes - 1) * 8)) == 0)
			/* Length should have been at least one byte shorter. */
			return 0;

		len = len32;
		if (len + 2 + num_bytes < len)
			/* Overflow. */
			return 0;

		len += 2 + num_bytes;
		if (out_header_len != NULL)
			*out_header_len = 2 + num_bytes;
	}

	return CBS_get_bytes(cbs, out, len);
}

static int
cbs_get_asn1(CBS *cbs, CBS *out, unsigned int tag_value, int skip_header)
{
	size_t header_len;
	unsigned int tag;
	CBS throwaway;

	if (out == NULL)
		out = &throwaway;

	if (!CBS_get_any_asn1_element(cbs, out, &tag, &header_len) ||
	    tag != tag_value)
		return 0;

	if (skip_header && !CBS_skip(out, header_len)) {
		assert(0);
		return 0;
	}

	return 1;
}

int
CBS_get_asn1(CBS *cbs, CBS *out, unsigned int tag_value)
{
	return cbs_get_asn1(cbs, out, tag_value, 1 /* skip header */);
}

int
CBS_get_asn1_element(CBS *cbs, CBS *out, unsigned int tag_value)
{
	return cbs_get_asn1(cbs, out, tag_value, 0 /* include header */);
}

int
CBS_peek_asn1_tag(const CBS *cbs, unsigned int tag_value)
{
	if (CBS_len(cbs) < 1)
		return 0;

	/*
	 * Tag number 31 indicates the start of a long form number.
	 * This is valid in ASN.1, but CBS only supports short form.
	 */
	if ((tag_value & 0x1f) == 0x1f)
		return 0;

	return CBS_data(cbs)[0] == tag_value;
}

/* Encoding details are in ASN.1: X.690 section 8.3 */
int
CBS_get_asn1_uint64(CBS *cbs, uint64_t *out)
{
	CBS bytes;
	const uint8_t *data;
	size_t i, len;

	if (!CBS_get_asn1(cbs, &bytes, CBS_ASN1_INTEGER))
		return 0;

	*out = 0;
	data = CBS_data(&bytes);
	len = CBS_len(&bytes);

	if (len == 0)
		/* An INTEGER is encoded with at least one content octet. */
		return 0;

	if ((data[0] & 0x80) != 0)
		/* Negative number. */
		return 0;

	if (data[0] == 0 && len > 1 && (data[1] & 0x80) == 0)
		/* Violates smallest encoding rule: excessive leading zeros. */
		return 0;

	for (i = 0; i < len; i++) {
		if ((*out >> 56) != 0)
			/* Too large to represent as a uint64_t. */
			return 0;

		*out <<= 8;
		*out |= data[i];
	}

	return 1;
}

int
CBS_get_optional_asn1(CBS *cbs, CBS *out, int *out_present, unsigned int tag)
{
	if (CBS_peek_asn1_tag(cbs, tag)) {
		if (!CBS_get_asn1(cbs, out, tag))
			return 0;

		*out_present = 1;
	} else {
		*out_present = 0;
	}
	return 1;
}

int
CBS_get_optional_asn1_octet_string(CBS *cbs, CBS *out, int *out_present,
    unsigned int tag)
{
	CBS child;
	int present;

	if (!CBS_get_optional_asn1(cbs, &child, &present, tag))
		return 0;

	if (present) {
		if (!CBS_get_asn1(&child, out, CBS_ASN1_OCTETSTRING) ||
		    CBS_len(&child) != 0)
			return 0;
	} else {
		CBS_init(out, NULL, 0);
	}
	if (out_present)
		*out_present = present;

	return 1;
}

int
CBS_get_optional_asn1_uint64(CBS *cbs, uint64_t *out, unsigned int tag,
    uint64_t default_value)
{
	CBS child;
	int present;

	if (!CBS_get_optional_asn1(cbs, &child, &present, tag))
		return 0;

	if (present) {
		if (!CBS_get_asn1_uint64(&child, out) ||
		    CBS_len(&child) != 0)
			return 0;
	} else {
		*out = default_value;
	}
	return 1;
}

int
CBS_get_optional_asn1_bool(CBS *cbs, int *out, unsigned int tag,
    int default_value)
{
	CBS child, child2;
	int present;

	if (!CBS_get_optional_asn1(cbs, &child, &present, tag))
		return 0;

	if (present) {
		uint8_t boolean;

		if (!CBS_get_asn1(&child, &child2, CBS_ASN1_BOOLEAN) ||
		    CBS_len(&child2) != 1 || CBS_len(&child) != 0)
			return 0;

		boolean = CBS_data(&child2)[0];
		if (boolean == 0)
			*out = 0;
		else if (boolean == 0xff)
			*out = 1;
		else
			return 0;

	} else {
		*out = default_value;
	}
	return 1;
}
@


1.17
log
@Stop using BUF_memdup() within the LibreSSL code base - it is correctly
spelt malloc+memcpy, which is what is used in all except two places.

ok deraadt@@ doug@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.16 2015/06/23 05:58:28 doug Exp $	*/
@


1.16
log
@Change CBS_dup() to also sync the offset.

Previously, CBS_dup() had its own offset.  However, it is more consistent
to copy everything.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.15 2015/06/20 01:21:51 doug Exp $	*/
d89 1
a89 2
	*out_ptr = BUF_memdup(cbs->data, cbs->len);
	if (*out_ptr == NULL)
d91 2
@


1.15
log
@Replace internal call to CRYPTO_memcmp with timingsafe_memcmp.

Suggested by jsing@@.

ok jsing@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.14 2015/06/19 00:23:36 doug Exp $	*/
d39 1
@


1.14
log
@Add CBS_dup() to initialize a new CBS with the same values.

This is useful for when you need to check the data ahead and then continue
on from the same spot.

input + ok jsing@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.13 2015/06/17 07:25:56 doug Exp $	*/
d130 1
a130 1
	return CRYPTO_memcmp(cbs->data, data, len) == 0;
@


1.13
log
@Use explicit int in bs_cbs.c.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.12 2015/06/17 07:06:22 doug Exp $	*/
d33 6
@


1.12
log
@Add CBS_write_bytes() to copy the remaining CBS bytes to the caller.

This is a common operation when dealing with CBS.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.11 2015/06/17 07:00:22 doug Exp $	*/
d226 1
a226 1
CBS_get_any_asn1_element(CBS *cbs, CBS *out, unsigned *out_tag,
d243 1
a243 1
cbs_get_any_asn1_element_internal(CBS *cbs, CBS *out, unsigned *out_tag,
d329 1
a329 1
cbs_get_asn1(CBS *cbs, CBS *out, unsigned tag_value, int skip_header)
d332 1
a332 1
	unsigned tag;
d351 1
a351 1
CBS_get_asn1(CBS *cbs, CBS *out, unsigned tag_value)
d357 1
a357 1
CBS_get_asn1_element(CBS *cbs, CBS *out, unsigned tag_value)
d363 1
a363 1
CBS_peek_asn1_tag(const CBS *cbs, unsigned tag_value)
d418 1
a418 1
CBS_get_optional_asn1(CBS *cbs, CBS *out, int *out_present, unsigned tag)
d433 1
a433 1
    unsigned tag)
d455 1
a455 1
CBS_get_optional_asn1_uint64(CBS *cbs, uint64_t *out, unsigned tag,
d475 2
a476 1
CBS_get_optional_asn1_bool(CBS *cbs, int *out, unsigned tag, int default_value)
@


1.11
log
@Add a new function CBS_offset() to report the current offset in the data.

"why not" miod@@, sure jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.10 2015/06/16 06:11:39 doug Exp $	*/
d96 14
@


1.10
log
@Simplify cbs_get_any_asn1_element_internal based on comments from jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.9 2015/06/15 07:35:49 doug Exp $	*/
d31 1
d45 6
@


1.9
log
@Make CBS_get_any_asn1_element() more compliant with DER encoding.

CBS_get_any_asn1_element violates DER encoding by allowing indefinite
form.  All callers except bs_ber.c expect DER encoding.  The callers
must check to see if it was indefinite or not.

Rather than exposing all callers to this behavior,
cbs_get_any_asn1_element_internal() allows specifying whether you want to
allow the normally forbidden indefinite form.  This is used by
CBS_get_any_asn1_element() for strict DER encoding and by a new static
function in bs_ber.c for the relaxed version.

While I was here, I added comments to differentiate between ASN.1
restrictions and CBS limitations.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.8 2015/06/13 08:46:00 doug Exp $	*/
d265 1
a265 1
			if (strict) {
d268 8
a275 12
			} else {
				if ((tag & CBS_ASN1_CONSTRUCTED) != 0 &&
				    num_bytes == 0) {
					/* indefinite length */
					if (out_header_len != NULL)
						*out_header_len = 2;
					return CBS_get_bytes(cbs, out, 2);
				} else {
					/* Primitive cannot use indefinite. */
					return 0;
				}
			}
d285 1
a285 1
		/* DER has a minimum length octet requirements. */
@


1.8
log
@Reject long-form tags in CBS_peek_asn1_tag.

Currently, CBS only handles short-form tags.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.7 2015/04/29 02:11:09 doug Exp $	*/
d208 17
d228 1
d233 4
d240 1
a241 1
		/* Long form tags are not supported. */
a246 1
	size_t len;
d258 22
a279 5
		if ((tag & CBS_ASN1_CONSTRUCTED) != 0 && num_bytes == 0) {
			/* indefinite length */
			if (out_header_len != NULL)
				*out_header_len = 2;
			return CBS_get_bytes(cbs, out, 2);
d282 2
a283 1
		if (num_bytes == 0 || num_bytes > 4)
d289 1
d291 1
a291 1
			/* Length should have used short-form encoding. */
d322 1
a322 7
	    tag != tag_value || (header_len > 0 &&
	    /*
	     * This ensures that the tag is either zero length or
	     * indefinite-length.
	     */
	    CBS_len(out) == header_len &&
	    CBS_data(out)[header_len - 1] == 0x80))
@


1.7
log
@Add whitespace and replace OPENSSL_free with free in documentation.

ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.6 2015/04/29 01:27:34 doug Exp $	*/
d315 7
@


1.6
log
@Avoid NULL deref in CBS_get_any_asn1_element().

This function is documented as allowing NULL for out_header_len.

ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.5 2015/04/29 01:23:20 doug Exp $	*/
d87 1
a87 1
	*out_ptr = strndup((const char*)cbs->data, cbs->len);
d254 1
a254 1
		if ((len32 >> ((num_bytes-1)*8)) == 0)
@


1.5
log
@Added error checking for len argument in cbs_get_u().

tweak + ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.4 2015/04/29 01:16:06 doug Exp $	*/
d239 2
a240 1
			*out_header_len = 2;
@


1.4
log
@free() can handle NULL.

ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.3 2015/04/25 15:28:47 doug Exp $	*/
d112 3
@


1.3
log
@Check for invalid leading zeros in CBS_get_asn1_uint64.

ASN.1 integers cannot have all zeros or all ones for the first 9 bits.
This rule ensures the numbers are encoded with the smallest number of
content octets (see ITU-T Rec X.690 section 8.3.2).

Based on BoringSSL commit 5933723b7b592e9914f703d630b596e140c93e16

ok deraadt@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.2 2015/02/06 22:22:33 doug Exp $	*/
d68 2
a69 4
	if (*out_ptr != NULL) {
		free(*out_ptr);
		*out_ptr = NULL;
	}
d86 1
a86 3
	if (*out_ptr != NULL)
		free(*out_ptr);

@


1.2
log
@KNF bytestring files.

I checked that this doesn't change anything.  Compiled with clang using
-Wno-pointer-sign -g0  to reduce the differences.  Only difference in the
asm is due to assert(0) line number changes in bs_cbs.c and bs_cbb.c.

miod is ok with the general process.
@
text
@d1 1
a1 1
/*	$OpenBSD: bs_cbs.c,v 1.1 2015/02/06 09:36:16 doug Exp $	*/
d320 1
d336 1
a336 1
		/* An INTEGER is encoded with at least one octet. */
d340 5
a344 1
		/* negative number */
@


1.1
log
@Import BoringSSL's crypto bytestring and crypto bytebuilder APIs.

This is imported with as few changes as possible for the initial commit.
I removed OPENSSL_EXPORT, replaced OPENSSL_malloc() etc with malloc()
and changed a few header includes.

BoringSSL has this as part of their public API.  We're leaving it internal
to libssl for now.

Based on BoringSSL's CBB/CBS API as of commit
c5cc15b4f5b1d6e9b9112cb8d30205a638aa2c54.

input + ok jsing@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 412
a438 363
void CBS_init(CBS *cbs, const uint8_t *data, size_t len) {
  cbs->data = data;
  cbs->len = len;
}

static int cbs_get(CBS *cbs, const uint8_t **p, size_t n) {
  if (cbs->len < n) {
    return 0;
  }

  *p = cbs->data;
  cbs->data += n;
  cbs->len -= n;
  return 1;
}

int CBS_skip(CBS *cbs, size_t len) {
  const uint8_t *dummy;
  return cbs_get(cbs, &dummy, len);
}

const uint8_t *CBS_data(const CBS *cbs) {
  return cbs->data;
}

size_t CBS_len(const CBS *cbs) {
  return cbs->len;
}

int CBS_stow(const CBS *cbs, uint8_t **out_ptr, size_t *out_len) {
  if (*out_ptr != NULL) {
    free(*out_ptr);
    *out_ptr = NULL;
  }
  *out_len = 0;

  if (cbs->len == 0) {
    return 1;
  }
  *out_ptr = BUF_memdup(cbs->data, cbs->len);
  if (*out_ptr == NULL) {
    return 0;
  }
  *out_len = cbs->len;
  return 1;
}

int CBS_strdup(const CBS *cbs, char **out_ptr) {
  if (*out_ptr != NULL) {
    free(*out_ptr);
  }
  *out_ptr = strndup((const char*)cbs->data, cbs->len);
  return (*out_ptr != NULL);
}

int CBS_contains_zero_byte(const CBS *cbs) {
  return memchr(cbs->data, 0, cbs->len) != NULL;
}

int CBS_mem_equal(const CBS *cbs, const uint8_t *data, size_t len) {
  if (len != cbs->len)
    return 0;
  return CRYPTO_memcmp(cbs->data, data, len) == 0;
}

static int cbs_get_u(CBS *cbs, uint32_t *out, size_t len) {
  uint32_t result = 0;
  size_t i;
  const uint8_t *data;

  if (!cbs_get(cbs, &data, len)) {
    return 0;
  }
  for (i = 0; i < len; i++) {
    result <<= 8;
    result |= data[i];
  }
  *out = result;
  return 1;
}

int CBS_get_u8(CBS *cbs, uint8_t *out) {
  const uint8_t *v;
  if (!cbs_get(cbs, &v, 1)) {
    return 0;
  }
  *out = *v;
  return 1;
}

int CBS_get_u16(CBS *cbs, uint16_t *out) {
  uint32_t v;
  if (!cbs_get_u(cbs, &v, 2)) {
    return 0;
  }
  *out = v;
  return 1;
}

int CBS_get_u24(CBS *cbs, uint32_t *out) {
  return cbs_get_u(cbs, out, 3);
}

int CBS_get_u32(CBS *cbs, uint32_t *out) {
  return cbs_get_u(cbs, out, 4);
}

int CBS_get_bytes(CBS *cbs, CBS *out, size_t len) {
  const uint8_t *v;
  if (!cbs_get(cbs, &v, len)) {
    return 0;
  }
  CBS_init(out, v, len);
  return 1;
}

static int cbs_get_length_prefixed(CBS *cbs, CBS *out, size_t len_len) {
  uint32_t len;
  if (!cbs_get_u(cbs, &len, len_len)) {
    return 0;
  }
  return CBS_get_bytes(cbs, out, len);
}

int CBS_get_u8_length_prefixed(CBS *cbs, CBS *out) {
  return cbs_get_length_prefixed(cbs, out, 1);
}

int CBS_get_u16_length_prefixed(CBS *cbs, CBS *out) {
  return cbs_get_length_prefixed(cbs, out, 2);
}

int CBS_get_u24_length_prefixed(CBS *cbs, CBS *out) {
  return cbs_get_length_prefixed(cbs, out, 3);
}

int CBS_get_any_asn1_element(CBS *cbs, CBS *out, unsigned *out_tag,
                             size_t *out_header_len) {
  uint8_t tag, length_byte;
  CBS header = *cbs;
  CBS throwaway;

  if (out == NULL) {
    out = &throwaway;
  }

  if (!CBS_get_u8(&header, &tag) ||
      !CBS_get_u8(&header, &length_byte)) {
    return 0;
  }

  if ((tag & 0x1f) == 0x1f) {
    /* Long form tags are not supported. */
    return 0;
  }

  if (out_tag != NULL) {
    *out_tag = tag;
  }

  size_t len;
  if ((length_byte & 0x80) == 0) {
    /* Short form length. */
    len = ((size_t) length_byte) + 2;
    if (out_header_len != NULL) {
      *out_header_len = 2;
    }
  } else {
    /* Long form length. */
    const size_t num_bytes = length_byte & 0x7f;
    uint32_t len32;

    if ((tag & CBS_ASN1_CONSTRUCTED) != 0 && num_bytes == 0) {
      /* indefinite length */
      *out_header_len = 2;
      return CBS_get_bytes(cbs, out, 2);
    }

    if (num_bytes == 0 || num_bytes > 4) {
      return 0;
    }
    if (!cbs_get_u(&header, &len32, num_bytes)) {
      return 0;
    }
    if (len32 < 128) {
      /* Length should have used short-form encoding. */
      return 0;
    }
    if ((len32 >> ((num_bytes-1)*8)) == 0) {
      /* Length should have been at least one byte shorter. */
      return 0;
    }
    len = len32;
    if (len + 2 + num_bytes < len) {
      /* Overflow. */
      return 0;
    }
    len += 2 + num_bytes;
    if (out_header_len != NULL) {
      *out_header_len = 2 + num_bytes;
    }
  }

  return CBS_get_bytes(cbs, out, len);
}

static int cbs_get_asn1(CBS *cbs, CBS *out, unsigned tag_value,
                        int skip_header) {
  size_t header_len;
  unsigned tag;
  CBS throwaway;

  if (out == NULL) {
    out = &throwaway;
  }

  if (!CBS_get_any_asn1_element(cbs, out, &tag, &header_len) ||
      tag != tag_value ||
      (header_len > 0 &&
       /* This ensures that the tag is either zero length or
        * indefinite-length. */
       CBS_len(out) == header_len &&
       CBS_data(out)[header_len - 1] == 0x80)) {
    return 0;
  }

  if (skip_header && !CBS_skip(out, header_len)) {
    assert(0);
    return 0;
  }

  return 1;
}

int CBS_get_asn1(CBS *cbs, CBS *out, unsigned tag_value) {
  return cbs_get_asn1(cbs, out, tag_value, 1 /* skip header */);
}

int CBS_get_asn1_element(CBS *cbs, CBS *out, unsigned tag_value) {
  return cbs_get_asn1(cbs, out, tag_value, 0 /* include header */);
}

int CBS_peek_asn1_tag(const CBS *cbs, unsigned tag_value) {
  if (CBS_len(cbs) < 1) {
    return 0;
  }
  return CBS_data(cbs)[0] == tag_value;
}

int CBS_get_asn1_uint64(CBS *cbs, uint64_t *out) {
  CBS bytes;
  const uint8_t *data;
  size_t i, len;

  if (!CBS_get_asn1(cbs, &bytes, CBS_ASN1_INTEGER)) {
    return 0;
  }

  *out = 0;
  data = CBS_data(&bytes);
  len = CBS_len(&bytes);

  if (len == 0) {
    /* An INTEGER is encoded with at least one octet. */
    return 0;
  }

  if ((data[0] & 0x80) != 0) {
    /* negative number */
    return 0;
  }

  for (i = 0; i < len; i++) {
    if ((*out >> 56) != 0) {
      /* Too large to represent as a uint64_t. */
      return 0;
    }
    *out <<= 8;
    *out |= data[i];
  }

  return 1;
}

int CBS_get_optional_asn1(CBS *cbs, CBS *out, int *out_present, unsigned tag) {
  if (CBS_peek_asn1_tag(cbs, tag)) {
    if (!CBS_get_asn1(cbs, out, tag)) {
      return 0;
    }
    *out_present = 1;
  } else {
    *out_present = 0;
  }
  return 1;
}

int CBS_get_optional_asn1_octet_string(CBS *cbs, CBS *out, int *out_present,
                                       unsigned tag) {
  CBS child;
  int present;
  if (!CBS_get_optional_asn1(cbs, &child, &present, tag)) {
    return 0;
  }
  if (present) {
    if (!CBS_get_asn1(&child, out, CBS_ASN1_OCTETSTRING) ||
        CBS_len(&child) != 0) {
      return 0;
    }
  } else {
    CBS_init(out, NULL, 0);
  }
  if (out_present) {
    *out_present = present;
  }
  return 1;
}

int CBS_get_optional_asn1_uint64(CBS *cbs, uint64_t *out, unsigned tag,
                                 uint64_t default_value) {
  CBS child;
  int present;
  if (!CBS_get_optional_asn1(cbs, &child, &present, tag)) {
    return 0;
  }
  if (present) {
    if (!CBS_get_asn1_uint64(&child, out) ||
        CBS_len(&child) != 0) {
      return 0;
    }
  } else {
    *out = default_value;
  }
  return 1;
}

int CBS_get_optional_asn1_bool(CBS *cbs, int *out, unsigned tag,
                               int default_value) {
  CBS child, child2;
  int present;
  if (!CBS_get_optional_asn1(cbs, &child, &present, tag)) {
    return 0;
  }
  if (present) {
    uint8_t boolean;

    if (!CBS_get_asn1(&child, &child2, CBS_ASN1_BOOLEAN) ||
        CBS_len(&child2) != 1 ||
        CBS_len(&child) != 0) {
      return 0;
    }

    boolean = CBS_data(&child2)[0];
    if (boolean == 0) {
      *out = 0;
    } else if (boolean == 0xff) {
      *out = 1;
    } else {
      return 0;
    }
  } else {
    *out = default_value;
  }
  return 1;
@

