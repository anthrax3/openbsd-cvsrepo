head	1.12;
access;
symbols
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.04.15.21.47.56;	author tedu;	state dead;
branches;
next	1.11;

1.11
date	2014.04.14.15.37.02;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.13.21.11.19;	author mpi;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2013.02.14.15.11.43;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.59.00;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.40;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.22.00.03.39;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.28;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.27;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.12;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.12;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.33;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.36.37;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.42.06;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.16;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.04.13.15.16.36;	author miod;	state Exp;
branches;
next	;


desc
@@


1.12
log
@remove ssl2 support even more completely.
in the process, always include ssl3 and tls1, we don't need config options
for them. when the time comes to expire ssl3, it will be with an ax.
checked by miod
@
text
@/* ssl/s2_pkt.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include "ssl_locl.h"
#ifndef OPENSSL_NO_SSL2
#include <stdio.h>
#include <errno.h>

static int read_n(SSL *s, unsigned int n, unsigned int max, unsigned int extend);
static int n_do_ssl_write(SSL *s, const unsigned char *buf, unsigned int len);
static int write_pending(SSL *s, const unsigned char *buf, unsigned int len);
static int ssl_mt_error(int n);


/* SSL 2.0 imlementation for SSL_read/SSL_peek -
 * This routine will return 0 to len bytes, decrypted etc if required.
 */
static int
ssl2_read_internal(SSL *s, void *buf, int len, int peek)
{
	int n;
	unsigned char mac[MAX_MAC_SIZE];
	unsigned char *p;
	int i;
	int mac_size;

	ssl2_read_again:
	if (SSL_in_init(s) && !s->in_handshake) {
		n = s->handshake_func(s);
		if (n < 0)
			return (n);
		if (n == 0) {
			SSLerr(SSL_F_SSL2_READ_INTERNAL, SSL_R_SSL_HANDSHAKE_FAILURE);
			return (-1);
		}
	}

	errno = 0;
	s->rwstate = SSL_NOTHING;
	if (len <= 0)
		return (len);

	if (s->s2->ract_data_length != 0) /* read from buffer */
	{
		if (len > s->s2->ract_data_length)
			n = s->s2->ract_data_length;
		else
			n = len;

		memcpy(buf, s->s2->ract_data,(unsigned int)n);
		if (!peek) {
			s->s2->ract_data_length -= n;
			s->s2->ract_data += n;
			if (s->s2->ract_data_length == 0)
				s->rstate = SSL_ST_READ_HEADER;
		}

		return (n);
	}

	/* s->s2->ract_data_length == 0
	 * 
	 * Fill the buffer, then goto ssl2_read_again.
	 */

	if (s->rstate == SSL_ST_READ_HEADER) {
		if (s->first_packet) {
			n = read_n(s, 5, SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER + 2, 0);
			if (n <= 0) return(n); /* error or non-blocking */
				s->first_packet = 0;
			p = s->packet;
			if (!((p[0] & 0x80) && (
			    (p[2] == SSL2_MT_CLIENT_HELLO) ||
			    (p[2] == SSL2_MT_SERVER_HELLO)))) {
				SSLerr(SSL_F_SSL2_READ_INTERNAL, SSL_R_NON_SSLV2_INITIAL_PACKET);
				return (-1);
			}
		} else {
			n = read_n(s, 2, SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER + 2, 0);
			if (n <= 0)
				return(n); /* error or non-blocking */
		}
		/* part read stuff */

		s->rstate = SSL_ST_READ_BODY;
		p = s->packet;
		/* Do header */
		/*s->s2->padding=0;*/
		s->s2->escape = 0;
		s->s2->rlength = (((unsigned int)p[0]) << 8)|((unsigned int)p[1]);
		if ((p[0] & TWO_BYTE_BIT))		/* Two byte header? */
		{
			s->s2->three_byte_header = 0;
			s->s2->rlength&=TWO_BYTE_MASK;

		} else {
			s->s2->three_byte_header = 1;
			s->s2->rlength&=THREE_BYTE_MASK;

			/* security >s2->escape */
			s->s2->escape = ((p[0] & SEC_ESC_BIT)) ? 1 : 0;
		}
	}

	if (s->rstate == SSL_ST_READ_BODY) {
		n = s->s2->rlength + 2 + s->s2->three_byte_header;
		if (n > (int)s->packet_length) {
			n -= s->packet_length;
			i = read_n(s, (unsigned int)n, (unsigned int)n, 1);
			if (i <= 0)
				return(i); /* ERROR */
		}

		p = &(s->packet[2]);
		s->rstate = SSL_ST_READ_HEADER;
		if (s->s2->three_byte_header)
			s->s2->padding= *(p++);
		else	s->s2->padding = 0;

		/* Data portion */
		if (s->s2->clear_text) {
			mac_size = 0;
			s->s2->mac_data = p;
			s->s2->ract_data = p;
			if (s->s2->padding) {
				SSLerr(SSL_F_SSL2_READ_INTERNAL, SSL_R_ILLEGAL_PADDING);
				return (-1);
			}
		} else {
			mac_size = EVP_MD_CTX_size(s->read_hash);
			if (mac_size < 0)
				return -1;
			OPENSSL_assert(mac_size <= MAX_MAC_SIZE);
			s->s2->mac_data = p;
			s->s2->ract_data = &p[mac_size];
			if (s->s2->padding + mac_size > s->s2->rlength) {
				SSLerr(SSL_F_SSL2_READ_INTERNAL, SSL_R_ILLEGAL_PADDING);
				return (-1);
			}
		}

		s->s2->ract_data_length = s->s2->rlength;
		/* added a check for length > max_size in case
		 * encryption was not turned on yet due to an error */
		if ((!s->s2->clear_text) &&
		    (s->s2->rlength >= (unsigned int)mac_size)) {
			ssl2_enc(s, 0);
			s->s2->ract_data_length -= mac_size;
			ssl2_mac(s, mac, 0);
			s->s2->ract_data_length -= s->s2->padding;
			if ((CRYPTO_memcmp(mac, s->s2->mac_data, mac_size) != 0) ||
			    (s->s2->rlength % EVP_CIPHER_CTX_block_size(s->enc_read_ctx) != 0)) {
				SSLerr(SSL_F_SSL2_READ_INTERNAL, SSL_R_BAD_MAC_DECODE);
				return (-1);
			}
		}
		INC32(s->s2->read_sequence); /* expect next number */
		/* s->s2->ract_data is now available for processing */

		/* Possibly the packet that we just read had 0 actual data bytes.
		 * (SSLeay/OpenSSL itself never sends such packets; see ssl2_write.)
		 * In this case, returning 0 would be interpreted by the caller
		 * as indicating EOF, so it's not a good idea.  Instead, we just
		 * continue reading; thus ssl2_read_internal may have to process
		 * multiple packets before it can return.
		 *
		 * [Note that using select() for blocking sockets *never* guarantees
		 * that the next SSL_read will not block -- the available
		 * data may contain incomplete packets, and except for SSL 2,
		 * renegotiation can confuse things even more.] */

		goto ssl2_read_again; /* This should really be
		* "return ssl2_read(s, buf, len)",
		* but that would allow for
		* denial - of - service attacks if a
		* C compiler is used that does not
		                       * recognize end-recursion. */
	} else {
		SSLerr(SSL_F_SSL2_READ_INTERNAL, SSL_R_BAD_STATE);
		return (-1);
	}
}

int
ssl2_read(SSL *s, void *buf, int len)
{
	return ssl2_read_internal(s, buf, len, 0);
}

int
ssl2_peek(SSL *s, void *buf, int len)
{
	return ssl2_read_internal(s, buf, len, 1);
}

static int
read_n(SSL *s, unsigned int n, unsigned int max, unsigned int extend)
{
	int i, off, newb;

	/* if there is stuff still in the buffer from a previous read,
	 * and there is more than we want, take some. */
	if (s->s2->rbuf_left >= (int)n) {
		if (extend)
			s->packet_length += n;
		else {
			s->packet = &(s->s2->rbuf[s->s2->rbuf_offs]);
			s->packet_length = n;
		}
		s->s2->rbuf_left -= n;
		s->s2->rbuf_offs += n;
		return (n);
	}

	if (!s->read_ahead)
		max = n;
	if (max > (unsigned int)(SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER + 2))
		max = SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER + 2;


	/* Else we want more than we have.
	 * First, if there is some left or we want to extend */
	off = 0;
	if ((s->s2->rbuf_left != 0) || ((s->packet_length != 0) && extend)) {
		newb = s->s2->rbuf_left;
		if (extend) {
			off = s->packet_length;
			if (s->packet != s->s2->rbuf)
				memcpy(s->s2->rbuf, s->packet,
			(unsigned int)newb + off);
		} else if (s->s2->rbuf_offs != 0) {
			memcpy(s->s2->rbuf, &(s->s2->rbuf[s->s2->rbuf_offs]),
			(unsigned int)newb);
			s->s2->rbuf_offs = 0;
		}
		s->s2->rbuf_left = 0;
	} else
		newb = 0;

	/* off is the offset to start writing too.
	 * r->s2->rbuf_offs is the 'unread data', now 0. 
	 * newb is the number of new bytes so far
	 */
	s->packet = s->s2->rbuf;
	while (newb < (int)n) {
		errno = 0;
		if (s->rbio != NULL) {
			s->rwstate = SSL_READING;
			i = BIO_read(s->rbio,(char *)&(s->s2->rbuf[off + newb]),
			max - newb);
		} else {
			SSLerr(SSL_F_READ_N, SSL_R_READ_BIO_NOT_SET);
			i = -1;
		}
#ifdef PKT_DEBUG
		if (s->debug & 0x01)
			sleep(1);
#endif
		if (i <= 0) {
			s->s2->rbuf_left += newb;
			return (i);
		}
		newb += i;
	}

	/* record unread data */
	if (newb > (int)n) {
		s->s2->rbuf_offs = n + off;
		s->s2->rbuf_left = newb - n;
	} else {
		s->s2->rbuf_offs = 0;
		s->s2->rbuf_left = 0;
	}
	if (extend)
		s->packet_length += n;
	else
		s->packet_length = n;
	s->rwstate = SSL_NOTHING;
	return (n);
}

int
ssl2_write(SSL *s, const void *_buf, int len)
{
	const unsigned char *buf = _buf;
	unsigned int n, tot;
	int i;

	if (SSL_in_init(s) && !s->in_handshake) {
		i = s->handshake_func(s);
		if (i < 0)
			return (i);
		if (i == 0) {
			SSLerr(SSL_F_SSL2_WRITE, SSL_R_SSL_HANDSHAKE_FAILURE);
			return (-1);
		}
	}

	if (s->error) {
		ssl2_write_error(s);
		if (s->error)
			return (-1);
	}

	errno = 0;
	s->rwstate = SSL_NOTHING;
	if (len <= 0)
		return (len);

	tot = s->s2->wnum;
	s->s2->wnum = 0;

	n = (len - tot);
	for (;;) {
		i = n_do_ssl_write(s, &(buf[tot]), n);
		if (i <= 0) {
			s->s2->wnum = tot;
			return (i);
		}
		if ((i == (int)n) ||
		    (s->mode & SSL_MODE_ENABLE_PARTIAL_WRITE)) {
			return (tot + i);
		}

		n -= i;
		tot += i;
	}
}

static int
write_pending(SSL *s, const unsigned char *buf, unsigned int len)
{
	int i;

	/* s->s2->wpend_len != 0 MUST be true. */

	/* check that they have given us the same buffer to
	 * write */
	if ((s->s2->wpend_tot > (int)len) ||
	    ((s->s2->wpend_buf != buf) &&
	    !(s->mode & SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER))) {
		SSLerr(SSL_F_WRITE_PENDING, SSL_R_BAD_WRITE_RETRY);
		return (-1);
	}

	for (;;) {
		errno = 0;
		if (s->wbio != NULL) {
			s->rwstate = SSL_WRITING;
			i = BIO_write(s->wbio,
			(char *)&(s->s2->write_ptr[s->s2->wpend_off]),
			(unsigned int)s->s2->wpend_len);
		} else {
			SSLerr(SSL_F_WRITE_PENDING, SSL_R_WRITE_BIO_NOT_SET);
			i = -1;
		}
#ifdef PKT_DEBUG
		if (s->debug & 0x01)
			sleep(1);
#endif
		if (i == s->s2->wpend_len) {
			s->s2->wpend_len = 0;
			s->rwstate = SSL_NOTHING;
			return (s->s2->wpend_ret);
		} else if (i <= 0)
		return (i);
		s->s2->wpend_off += i;
		s->s2->wpend_len -= i;
	}
}

static int
n_do_ssl_write(SSL *s, const unsigned char *buf, unsigned int len)
{
	unsigned int j, k, olen, p, bs;
	int mac_size;
	register unsigned char *pp;

	olen = len;

	/* first check if there is data from an encryption waiting to
	 * be sent - it must be sent because the other end is waiting.
	 * This will happen with non-blocking IO.  We print it and then
	 * return.
	 */
	if (s->s2->wpend_len != 0)
		return (write_pending(s, buf, len));

	/* set mac_size to mac size */
	if (s->s2->clear_text)
		mac_size = 0;
	else {
		mac_size = EVP_MD_CTX_size(s->write_hash);
		if (mac_size < 0)
			return -1;
	}

	/* lets set the pad p */
	if (s->s2->clear_text) {
		if (len > SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER)
			len = SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER;
		p = 0;
		s->s2->three_byte_header = 0;
		/* len=len; */
	} else {
		bs = EVP_CIPHER_CTX_block_size(s->enc_read_ctx);
		j = len + mac_size;
		/* Two-byte headers allow for a larger record length than
		 * three-byte headers, but we can't use them if we need
		 * padding or if we have to set the escape bit. */
		if ((j > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER) &&
		    (!s->s2->escape)) {
			if (j > SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER)
				j = SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER;
			/* set k to the max number of bytes with 2
			 * byte header */
			k = j - (j % bs);
			/* how many data bytes? */
			len = k - mac_size;

			s->s2->three_byte_header = 0;
			p = 0;
		} else if ((bs <= 1) && (!s->s2->escape)) {
			/* j <= SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER, thus
			 * j < SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER */
			s->s2->three_byte_header = 0;
			p = 0;
		}
		else /* we may have to use a 3 byte header */
		{
			/* If s->s2->escape is not set, then
			 * j <= SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER, and thus
			 * j < SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER. */
			p = (j % bs);
			p = (p == 0) ? 0 : (bs - p);
			if (s->s2->escape) {
				s->s2->three_byte_header = 1;
				if (j > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
					j = SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER;
			} else
				s->s2->three_byte_header = (p == 0) ? 0 : 1;
		}
	}

	/* Now
	 *      j <= SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
	 * holds, and if s->s2->three_byte_header is set, then even
	 *      j <= SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER.
	 */

	/* mac_size is the number of MAC bytes
	 * len is the number of data bytes we are going to send
	 * p is the number of padding bytes
	 * (if it is a two-byte header, then p == 0) */

	s->s2->wlength = len;
	s->s2->padding = p;
	s->s2->mac_data = &(s->s2->wbuf[3]);
	s->s2->wact_data = &(s->s2->wbuf[3 + mac_size]);
	/* we copy the data into s->s2->wbuf */
	memcpy(s->s2->wact_data, buf, len);
	if (p)
		memset(&(s->s2->wact_data[len]), 0, p); /* arbitrary padding */

	if (!s->s2->clear_text) {
		s->s2->wact_data_length = len + p;
		ssl2_mac(s, s->s2->mac_data, 1);
		s->s2->wlength += p + mac_size;
		ssl2_enc(s, 1);
	}

	/* package up the header */
	s->s2->wpend_len = s->s2->wlength;
	if (s->s2->three_byte_header) /* 3 byte header */
	{
		pp = s->s2->mac_data;
		pp -= 3;
		pp[0] = (s->s2->wlength >> 8) & (THREE_BYTE_MASK >> 8);
		if (s->s2->escape)
			pp[0]|=SEC_ESC_BIT;
		pp[1] = s->s2->wlength&0xff;
		pp[2] = s->s2->padding;
		s->s2->wpend_len += 3;
	} else {
		pp = s->s2->mac_data;
		pp -= 2;
		pp[0] = ((s->s2->wlength >> 8) & (TWO_BYTE_MASK >> 8)) | TWO_BYTE_BIT;
		pp[1] = s->s2->wlength&0xff;
		s->s2->wpend_len += 2;
	}
	s->s2->write_ptr = pp;

	INC32(s->s2->write_sequence); /* expect next number */

	/* lets try to actually write the data */
	s->s2->wpend_tot = olen;
	s->s2->wpend_buf = buf;

	s->s2->wpend_ret = len;

	s->s2->wpend_off = 0;
	return (write_pending(s, buf, olen));
}

int
ssl2_part_read(SSL *s, unsigned long f, int i)
{
	unsigned char *p;
	int j;

	if (i < 0) {
		/* ssl2_return_error(s); */
		/* for non-blocking io,
		 * this is not necessarily fatal */
		return (i);
	} else {
		s->init_num += i;

		/* Check for error.  While there are recoverable errors,
		 * this function is not called when those must be expected;
		 * any error detected here is fatal. */
		if (s->init_num >= 3) {
			p = (unsigned char *)s->init_buf->data;
			if (p[0] == SSL2_MT_ERROR) {
				j = (p[1]<<8)|p[2];
				SSLerr((int)f, ssl_mt_error(j));
				s->init_num -= 3;
				if (s->init_num > 0)
					memmove(p, p + 3, s->init_num);
			}
		}

		/* If it's not an error message, we have some error anyway --
		 * the message was shorter than expected.  This too is treated
		 * as fatal (at least if SSL_get_error is asked for its opinion). */
		return (0);
	}
}

int
ssl2_do_write(SSL *s)
{
	int ret;

	ret = ssl2_write(s, &s->init_buf->data[s->init_off], s->init_num);
	if (ret == s->init_num) {
		if (s->msg_callback)
			s->msg_callback(1, s->version, 0, s->init_buf->data, (size_t)(s->init_off + s->init_num), s, s->msg_callback_arg);
		return (1);
	}
	if (ret < 0)
		return (-1);
	s->init_off += ret;
	s->init_num -= ret;
	return (0);
}

static int
ssl_mt_error(int n)
{
	int ret;

	switch (n) {
	case SSL2_PE_NO_CIPHER:
		ret = SSL_R_PEER_ERROR_NO_CIPHER;
		break;
	case SSL2_PE_NO_CERTIFICATE:
		ret = SSL_R_PEER_ERROR_NO_CERTIFICATE;
		break;
	case SSL2_PE_BAD_CERTIFICATE:
		ret = SSL_R_PEER_ERROR_CERTIFICATE;
		break;
	case SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE:
		ret = SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE;
		break;
	default:
		ret = SSL_R_UNKNOWN_REMOTE_ERROR_TYPE;
		break;
	}
	return (ret);
}
#else /* !OPENSSL_NO_SSL2 */

# if PEDANTIC
static void *dummy = &dummy;
# endif

#endif
@


1.11
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@@


1.10
log
@Do not include "e_os.h" anymore.  Simply pull in the necessary headers.

ok miod@@, deraadt@@
@
text
@d117 1
a117 1
static int read_n(SSL *s,unsigned int n,unsigned int max,unsigned int extend);
d126 3
a128 2
static int ssl2_read_internal(SSL *s, void *buf, int len, int peek)
	{
d135 8
a142 10
 ssl2_read_again:
	if (SSL_in_init(s) && !s->in_handshake)
		{
		n=s->handshake_func(s);
		if (n < 0) return(n);
		if (n == 0)
			{
			SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_SSL_HANDSHAKE_FAILURE);
			return(-1);
			}
d144 1
d147 3
a149 2
	s->rwstate=SSL_NOTHING;
	if (len <= 0) return(len);
d152 1
a152 1
		{
d154 1
a154 1
			n=s->s2->ract_data_length;
d156 1
a156 1
			n=len;
d158 4
a161 5
		memcpy(buf,s->s2->ract_data,(unsigned int)n);
		if (!peek)
			{
			s->s2->ract_data_length-=n;
			s->s2->ract_data+=n;
d163 2
a164 2
				s->rstate=SSL_ST_READ_HEADER;
			}
d166 2
a167 2
		return(n);
		}
d174 3
a176 5
	if (s->rstate == SSL_ST_READ_HEADER)
		{
		if (s->first_packet)
			{
			n=read_n(s,5,SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER+2,0);
d178 2
a179 2
			s->first_packet=0;
			p=s->packet;
d181 10
a190 12
				(p[2] == SSL2_MT_CLIENT_HELLO) ||
				(p[2] == SSL2_MT_SERVER_HELLO))))
				{
				SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_NON_SSLV2_INITIAL_PACKET);
				return(-1);
				}
			}
		else
			{
			n=read_n(s,2,SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER+2,0);
			if (n <= 0) return(n); /* error or non-blocking */
			}
d193 2
a194 2
		s->rstate=SSL_ST_READ_BODY;
		p=s->packet;
d197 2
a198 2
		s->s2->escape=0;
		s->s2->rlength=(((unsigned int)p[0])<<8)|((unsigned int)p[1]);
d200 6
a205 7
			{
			s->s2->three_byte_header=0;
			s->s2->rlength&=TWO_BYTE_MASK;	
			}
		else
			{
			s->s2->three_byte_header=1;
d209 1
a209 2
			s->s2->escape=((p[0] & SEC_ESC_BIT))?1:0;
			}
d211 1
d213 8
a220 9
	if (s->rstate == SSL_ST_READ_BODY)
		{
		n=s->s2->rlength+2+s->s2->three_byte_header;
		if (n > (int)s->packet_length)
			{
			n-=s->packet_length;
			i=read_n(s,(unsigned int)n,(unsigned int)n,1);
			if (i <= 0) return(i); /* ERROR */
			}
d222 2
a223 2
		p= &(s->packet[2]);
		s->rstate=SSL_ST_READ_HEADER;
d226 1
a226 1
		else	s->s2->padding=0;
d229 1
a229 2
		if (s->s2->clear_text)
			{
d231 5
a235 7
			s->s2->mac_data=p;
			s->s2->ract_data=p;
			if (s->s2->padding)
				{
				SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_ILLEGAL_PADDING);
				return(-1);
				}
d237 2
a238 3
		else
			{
			mac_size=EVP_MD_CTX_size(s->read_hash);
d242 5
a246 7
			s->s2->mac_data=p;
			s->s2->ract_data= &p[mac_size];
			if (s->s2->padding + mac_size > s->s2->rlength)
				{
				SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_ILLEGAL_PADDING);
				return(-1);
				}
d248 1
d250 1
a250 1
		s->s2->ract_data_length=s->s2->rlength;
d254 9
a262 12
			(s->s2->rlength >= (unsigned int)mac_size))
			{
			ssl2_enc(s,0);
			s->s2->ract_data_length-=mac_size;
			ssl2_mac(s,mac,0);
			s->s2->ract_data_length-=s->s2->padding;
			if (	(CRYPTO_memcmp(mac,s->s2->mac_data,mac_size) != 0) ||
				(s->s2->rlength%EVP_CIPHER_CTX_block_size(s->enc_read_ctx) != 0))
				{
				SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_BAD_MAC_DECODE);
				return(-1);
				}
d264 1
d281 4
a284 4
		                       * "return ssl2_read(s,buf,len)",
		                       * but that would allow for
		                       * denial-of-service attacks if a
		                       * C compiler is used that does not
d286 3
a288 6
		}
	else
		{
		SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_BAD_STATE);
			return(-1);
		}
d290 1
d292 3
a294 2
int ssl2_read(SSL *s, void *buf, int len)
	{
d296 1
a296 1
	}
d298 3
a300 2
int ssl2_peek(SSL *s, void *buf, int len)
	{
d302 1
a302 1
	}
d304 4
a307 4
static int read_n(SSL *s, unsigned int n, unsigned int max,
	     unsigned int extend)
	{
	int i,off,newb;
d311 1
a311 2
	if (s->s2->rbuf_left >= (int)n)
		{
d313 14
a326 10
			s->packet_length+=n;
		else
			{
			s->packet= &(s->s2->rbuf[s->s2->rbuf_offs]);
			s->packet_length=n;
			}
		s->s2->rbuf_left-=n;
		s->s2->rbuf_offs+=n;
		return(n);
		}
a327 4
	if (!s->read_ahead) max=n;
	if (max > (unsigned int)(SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER+2))
		max=SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER+2;
	
d331 5
a335 7
	off=0;
	if ((s->s2->rbuf_left != 0) || ((s->packet_length != 0) && extend))
		{
		newb=s->s2->rbuf_left;
		if (extend)
			{
			off=s->packet_length;
d337 10
a346 13
				memcpy(s->s2->rbuf,s->packet,
					(unsigned int)newb+off);
			}
		else if (s->s2->rbuf_offs != 0)
			{
			memcpy(s->s2->rbuf,&(s->s2->rbuf[s->s2->rbuf_offs]),
				(unsigned int)newb);
			s->s2->rbuf_offs=0;
			}
		s->s2->rbuf_left=0;
		}
	else
		newb=0;
d352 2
a353 3
	s->packet=s->s2->rbuf;
	while (newb < (int)n)
		{
d355 8
a362 11
		if (s->rbio != NULL)
			{
			s->rwstate=SSL_READING;
			i=BIO_read(s->rbio,(char *)&(s->s2->rbuf[off+newb]),
				max-newb);
			}
		else
			{
			SSLerr(SSL_F_READ_N,SSL_R_READ_BIO_NOT_SET);
			i= -1;
			}
d364 2
a365 1
		if (s->debug & 0x01) sleep(1);
d367 3
a369 6
		if (i <= 0)
			{
			s->s2->rbuf_left+=newb;
			return(i);
			}
		newb+=i;
d371 2
d375 7
a381 10
	if (newb > (int)n)
		{
		s->s2->rbuf_offs=n+off;
		s->s2->rbuf_left=newb-n;
		}
	else
		{
		s->s2->rbuf_offs=0;
		s->s2->rbuf_left=0;
		}
d383 1
a383 1
		s->packet_length+=n;
d385 10
a394 9
		s->packet_length=n;
	s->rwstate=SSL_NOTHING;
	return(n);
	}

int ssl2_write(SSL *s, const void *_buf, int len)
	{
	const unsigned char *buf=_buf;
	unsigned int n,tot;
d397 7
a403 9
	if (SSL_in_init(s) && !s->in_handshake)
		{
		i=s->handshake_func(s);
		if (i < 0) return(i);
		if (i == 0)
			{
			SSLerr(SSL_F_SSL2_WRITE,SSL_R_SSL_HANDSHAKE_FAILURE);
			return(-1);
			}
d405 1
d407 1
a407 2
	if (s->error)
		{
d410 2
a411 2
			return(-1);
		}
d414 14
a427 15
	s->rwstate=SSL_NOTHING;
	if (len <= 0) return(len);

	tot=s->s2->wnum;
	s->s2->wnum=0;

	n=(len-tot);
	for (;;)
		{
		i=n_do_ssl_write(s,&(buf[tot]),n);
		if (i <= 0)
			{
			s->s2->wnum=tot;
			return(i);
			}
d429 2
a430 7
			(s->mode & SSL_MODE_ENABLE_PARTIAL_WRITE))
			{
			return(tot+i);
			}
		
		n-=i;
		tot+=i;
d432 3
d436 1
d438 3
a440 2
static int write_pending(SSL *s, const unsigned char *buf, unsigned int len)
	{
d448 5
a452 6
		((s->s2->wpend_buf != buf) &&
		 !(s->mode & SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER)))
		{
		SSLerr(SSL_F_WRITE_PENDING,SSL_R_BAD_WRITE_RETRY);
		return(-1);
		}
d454 1
a454 2
	for (;;)
		{
d456 9
a464 12
		if (s->wbio != NULL)
			{
			s->rwstate=SSL_WRITING;
			i=BIO_write(s->wbio,
				(char *)&(s->s2->write_ptr[s->s2->wpend_off]),
				(unsigned int)s->s2->wpend_len);
			}
		else
			{
			SSLerr(SSL_F_WRITE_PENDING,SSL_R_WRITE_BIO_NOT_SET);
			i= -1;
			}
d466 2
a467 1
		if (s->debug & 0x01) sleep(1);
d469 8
a476 11
		if (i == s->s2->wpend_len)
			{
			s->s2->wpend_len=0;
			s->rwstate=SSL_NOTHING;
			return(s->s2->wpend_ret);
			}
		else if (i <= 0)
			return(i);
		s->s2->wpend_off+=i;
		s->s2->wpend_len-=i;
		}
d478 1
d480 4
a483 3
static int n_do_ssl_write(SSL *s, const unsigned char *buf, unsigned int len)
	{
	unsigned int j,k,olen,p,bs;
d487 1
a487 1
	olen=len;
d494 2
a495 1
	if (s->s2->wpend_len != 0) return(write_pending(s,buf,len));
d499 3
a501 4
		mac_size=0;
	else
		{
		mac_size=EVP_MD_CTX_size(s->write_hash);
d504 1
a504 1
		}
d507 1
a507 2
	if (s->s2->clear_text)
		{
d509 3
a511 3
			len=SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER;
		p=0;
		s->s2->three_byte_header=0;
d513 3
a515 5
		}
	else
		{
		bs=EVP_CIPHER_CTX_block_size(s->enc_read_ctx);
		j=len+mac_size;
d520 1
a520 2
			(!s->s2->escape))
			{
d522 1
a522 1
				j=SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER;
d525 1
a525 1
			k=j-(j%bs);
d527 5
a531 6
			len=k-mac_size; 
			s->s2->three_byte_header=0;
			p=0;
			}
		else if ((bs <= 1) && (!s->s2->escape))
			{
d534 3
a536 3
			s->s2->three_byte_header=0;
			p=0;
			}
d538 1
a538 1
			{
d542 4
a545 5
			p=(j%bs);
			p=(p == 0)?0:(bs-p);
			if (s->s2->escape)
				{
				s->s2->three_byte_header=1;
d547 3
a549 5
					j=SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER;
				}
			else
				s->s2->three_byte_header=(p == 0)?0:1;
			}
d551 1
d564 4
a567 4
	s->s2->wlength=len;
	s->s2->padding=p;
	s->s2->mac_data= &(s->s2->wbuf[3]);
	s->s2->wact_data= &(s->s2->wbuf[3+mac_size]);
d569 1
a569 1
	memcpy(s->s2->wact_data,buf,len);
d571 1
a571 1
		memset(&(s->s2->wact_data[len]),0,p); /* arbitrary padding */
d573 6
a578 7
	if (!s->s2->clear_text)
		{
		s->s2->wact_data_length=len+p;
		ssl2_mac(s,s->s2->mac_data,1);
		s->s2->wlength+=p+mac_size;
		ssl2_enc(s,1);
		}
d581 1
a581 1
	s->s2->wpend_len=s->s2->wlength;
d583 18
a600 19
		{
		pp=s->s2->mac_data;
		pp-=3;
		pp[0]=(s->s2->wlength>>8)&(THREE_BYTE_MASK>>8);
		if (s->s2->escape) pp[0]|=SEC_ESC_BIT;
		pp[1]=s->s2->wlength&0xff;
		pp[2]=s->s2->padding;
		s->s2->wpend_len+=3;
		}
	else
		{
		pp=s->s2->mac_data;
		pp-=2;
		pp[0]=((s->s2->wlength>>8)&(TWO_BYTE_MASK>>8))|TWO_BYTE_BIT;
		pp[1]=s->s2->wlength&0xff;
		s->s2->wpend_len+=2;
		}
	s->s2->write_ptr=pp;
	
d604 2
a605 2
	s->s2->wpend_tot=olen;
	s->s2->wpend_buf=buf;
d607 1
a607 5
	s->s2->wpend_ret=len;

	s->s2->wpend_off=0;
	return(write_pending(s,buf,olen));
	}
d609 7
a615 2
int ssl2_part_read(SSL *s, unsigned long f, int i)
	{
d619 1
a619 2
	if (i < 0)
		{
d623 3
a625 5
		return(i);
		}
	else
		{
		s->init_num+=i;
d630 5
a634 7
		if (s->init_num >= 3)
			{
			p=(unsigned char *)s->init_buf->data;
			if (p[0] == SSL2_MT_ERROR)
				{
				j=(p[1]<<8)|p[2];
				SSLerr((int)f,ssl_mt_error(j));
d637 1
a637 2
					memmove(p, p+3, s->init_num);
				}
d639 1
d644 1
a644 2
		return(0);
		}
d646 1
d648 3
a650 2
int ssl2_do_write(SSL *s)
	{
d653 2
a654 3
	ret=ssl2_write(s,&s->init_buf->data[s->init_off],s->init_num);
	if (ret == s->init_num)
		{
d657 2
a658 2
		return(1);
		}
d660 9
a668 8
		return(-1);
	s->init_off+=ret;
	s->init_num-=ret;
	return(0);
	}

static int ssl_mt_error(int n)
	{
d671 1
a671 2
	switch (n)
		{
d673 1
a673 1
		ret=SSL_R_PEER_ERROR_NO_CIPHER;
d676 1
a676 1
		ret=SSL_R_PEER_ERROR_NO_CERTIFICATE;
d679 1
a679 1
		ret=SSL_R_PEER_ERROR_CERTIFICATE;
d682 1
a682 1
		ret=SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE;
d685 1
a685 1
		ret=SSL_R_UNKNOWN_REMOTE_ERROR_TYPE;
a686 2
		}
	return(ret);
d688 2
d693 1
a693 1
static void *dummy=&dummy;
@


1.9
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@a115 1
#define USE_SOCKETS
d146 1
a146 1
	clear_sys_error();
d374 1
a374 1
		clear_sys_error();
d440 1
a440 1
	clear_sys_error();
d485 1
a485 1
		clear_sys_error();
@


1.8
log
@cherry pick bugfixes for http://www.openssl.org/news/secadv_20130205.txt
from the openssl git (changes between openssl 1.0.1c and 1.0.1d).
ok djm@@
@
text
@d272 1
a272 1
			if (	(timingsafe_bcmp(mac,s->s2->mac_data,mac_size) != 0) ||
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d272 1
a272 2
			if (	(memcmp(mac,s->s2->mac_data,
				(unsigned int)mac_size) != 0) ||
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d119 1
a119 1
static int do_ssl_write(SSL *s, const unsigned char *buf, unsigned int len);
d133 1
a133 1
	unsigned int mac_size;
d249 3
a251 1
			mac_size=EVP_MD_size(s->read_hash);
d266 1
a266 1
			(s->s2->rlength >= mac_size))
d452 1
a452 1
		i=do_ssl_write(s,&(buf[tot]),n);
d516 1
a516 1
static int do_ssl_write(SSL *s, const unsigned char *buf, unsigned int len)
d518 2
a519 1
	unsigned int j,k,olen,p,mac_size,bs;
d535 5
a539 1
		mac_size=EVP_MD_size(s->write_hash);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d250 1
@


1.4
log
@openssl-engine-0.9.6a merge
@
text
@d59 1
a59 1
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
d113 1
a113 1
#ifndef NO_SSL2
d133 1
a133 1
	unsigned int mac_size=0;
d238 1
d241 5
a245 1
			s->s2->pad_data=NULL;
d252 5
a256 2
			s->s2->pad_data= &p[mac_size+
				s->s2->rlength-s->s2->padding];
a603 1
#ifdef PURIFY
d605 1
a605 2
		memset(&(s->s2->wact_data[len]),0,p);
#endif
a653 11
	/* check for error */
	if ((s->init_num == 0) && (i >= 3))
		{
		p=(unsigned char *)s->init_buf->data;
		if (p[0] == SSL2_MT_ERROR)
			{
			j=(p[1]<<8)|p[2];
			SSLerr((int)f,ssl_mt_error(j));
			}
		}

d658 1
a658 1
		 * this is not fatal */
d664 20
d694 3
d698 1
d730 1
a730 1
#else /* !NO_SSL2 */
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d58 53
a121 3
int ssl2_peek(SSL *s, char *buf, int len)
	{
	int ret;
a122 8
	ret=ssl2_read(s,buf,len);
	if (ret > 0)
	        {
		s->s2->ract_data_length+=ret;
		s->s2->ract_data-=ret;
		}
	return(ret);
	}
d124 1
a124 1
/* SSL_read -
d127 1
a127 1
int ssl2_read(SSL *s, void *buf, int len)
d135 1
a135 1
ssl2_read_again:
d142 1
a142 1
			SSLerr(SSL_F_SSL2_READ,SSL_R_SSL_HANDSHAKE_FAILURE);
d159 8
a166 4
		s->s2->ract_data_length-=n;
		s->s2->ract_data+=n;
		if (s->s2->ract_data_length == 0)
			s->rstate=SSL_ST_READ_HEADER;
d170 5
d187 1
a187 1
				SSLerr(SSL_F_SSL2_READ,SSL_R_NON_SSLV2_INITIAL_PACKET);
d265 1
a265 1
				SSLerr(SSL_F_SSL2_READ,SSL_R_BAD_MAC_DECODE);
d272 8
a279 8
#if 1
		/* How should we react when a packet containing 0
		 * bytes is received?  (Note that SSLeay/OpenSSL itself
		 * never sends such packets; see ssl2_write.)
		 * Returning 0 would be interpreted by the caller as
		 * indicating EOF, so it's not a good idea.
		 * Instead, we just continue reading.  Note that using
		 * select() for blocking sockets *never* guarantees
d281 2
a282 2
		 * data may contain incomplete packets, and except for SSL 2
		 * renegotiation can confuse things even more. */
d285 5
a289 14
				       * "return ssl2_read(s,buf,len)",
				       * but that would allow for
				       * denial-of-service attacks if a
				       * C compiler is used that does not
				       * recognize end-recursion. */
#else
		/* If a 0 byte packet was sent, return 0, otherwise
		 * we play havoc with people using select with
		 * blocking sockets.  Let them handle a packet at a time,
		 * they should really be using non-blocking sockets. */
		if (s->s2->ract_data_length == 0)
			return(0);
		return(ssl2_read(s,buf,len));
#endif
d293 1
a293 1
		SSLerr(SSL_F_SSL2_READ,SSL_R_BAD_STATE);
d298 10
d538 3
d556 2
a557 1
			/* len=len; */
d561 1
a561 1
		else /* 3 byte header */
d563 3
a565 1
			/*len=len; */
d569 1
d571 3
d578 7
d588 1
a588 1
	 * if p == 0, it is a 2 byte header */
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d59 2
a63 1
#include "ssl_locl.h"
d642 7
@


1.1
log
@Initial revision
@
text
@a63 8
/* SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_PEER_ERROR_NO_CIPHER);
 * SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_PEER_ERROR_NO_CERTIFICATE);
 * SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_PEER_ERROR_CERTIFICATE);
 * SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE);
 * SSLerr(SSL_F_GET_SERVER_HELLO,SSL_R_UNKNOWN_REMOTE_ERROR_TYPE);
 */

#ifndef NOPROTO
d65 2
a66 2
static int do_ssl_write(SSL *s, char *buf, unsigned int len);
static int write_pending(SSL *s, char *buf, unsigned int len);
d68 1
a68 11
#else
static int read_n();
static int do_ssl_write();
static int write_pending();
static int ssl_mt_error();
#endif

int ssl2_peek(s,buf,len)
SSL *s;
char *buf;
int len;
d84 1
a84 4
int ssl2_read(s, buf, len)
SSL *s;
char *buf;
int len;
d92 1
d220 19
d246 1
d255 2
a256 5
static int read_n(s, n, max, extend)
SSL *s;
unsigned int n;
unsigned int max;
unsigned int extend;
d354 1
a354 4
int ssl2_write(s, buf, len)
SSL *s;
char *buf;
int len;
d356 1
d394 6
a399 2
		if (i == (int)n) return(tot+i);

d405 1
a405 4
static int write_pending(s,buf,len)
SSL *s;
char *buf;
unsigned int len;
d413 3
a415 1
	if ((s->s2->wpend_tot > (int)len) || (s->s2->wpend_buf != buf))
d452 1
a452 4
static int do_ssl_write(s, buf, len)
SSL *s;
char *buf;
unsigned int len;
d565 1
a565 1
	s->s2->wpend_buf=(char *)buf;
d573 1
a573 4
int ssl2_part_read(s,f,i)
SSL *s;
unsigned long f;
int i;
d603 1
a603 2
int ssl2_do_write(s)
SSL *s;
d607 1
a607 2
	ret=ssl2_write(s,(char *)&(s->init_buf->data[s->init_off]),
		s->init_num);
d617 1
a617 2
static int ssl_mt_error(n)
int n;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a57 53
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
a58 2
#include "ssl_locl.h"
#ifndef OPENSSL_NO_SSL2
d62 1
d64 8
d73 2
a74 2
static int do_ssl_write(SSL *s, const unsigned char *buf, unsigned int len);
static int write_pending(SSL *s, const unsigned char *buf, unsigned int len);
d76 13
d90 8
d99 1
a99 1
/* SSL 2.0 imlementation for SSL_read/SSL_peek -
d102 4
a105 1
static int ssl2_read_internal(SSL *s, void *buf, int len, int peek)
d111 1
a111 1
	unsigned int mac_size;
a112 1
 ssl2_read_again:
d119 1
a119 1
			SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_SSL_HANDSHAKE_FAILURE);
d136 4
a139 8
		if (!peek)
			{
			s->s2->ract_data_length-=n;
			s->s2->ract_data+=n;
			if (s->s2->ract_data_length == 0)
				s->rstate=SSL_ST_READ_HEADER;
			}

a142 5
	/* s->s2->ract_data_length == 0
	 * 
	 * Fill the buffer, then goto ssl2_read_again.
	 */

d155 1
a155 1
				SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_NON_SSLV2_INITIAL_PACKET);
a205 1
			mac_size = 0;
d208 1
a208 5
			if (s->s2->padding)
				{
				SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_ILLEGAL_PADDING);
				return(-1);
				}
d215 2
a216 5
			if (s->s2->padding + mac_size > s->s2->rlength)
				{
				SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_ILLEGAL_PADDING);
				return(-1);
				}
d233 1
a233 1
				SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_BAD_MAC_DECODE);
d240 7
a246 18
		/* Possibly the packet that we just read had 0 actual data bytes.
		 * (SSLeay/OpenSSL itself never sends such packets; see ssl2_write.)
		 * In this case, returning 0 would be interpreted by the caller
		 * as indicating EOF, so it's not a good idea.  Instead, we just
		 * continue reading; thus ssl2_read_internal may have to process
		 * multiple packets before it can return.
		 *
		 * [Note that using select() for blocking sockets *never* guarantees
		 * that the next SSL_read will not block -- the available
		 * data may contain incomplete packets, and except for SSL 2,
		 * renegotiation can confuse things even more.] */

		goto ssl2_read_again; /* This should really be
		                       * "return ssl2_read(s,buf,len)",
		                       * but that would allow for
		                       * denial-of-service attacks if a
		                       * C compiler is used that does not
		                       * recognize end-recursion. */
d250 1
a250 1
		SSLerr(SSL_F_SSL2_READ_INTERNAL,SSL_R_BAD_STATE);
d255 5
a259 12
int ssl2_read(SSL *s, void *buf, int len)
	{
	return ssl2_read_internal(s, buf, len, 0);
	}

int ssl2_peek(SSL *s, void *buf, int len)
	{
	return ssl2_read_internal(s, buf, len, 1);
	}

static int read_n(SSL *s, unsigned int n, unsigned int max,
	     unsigned int extend)
d357 4
a360 1
int ssl2_write(SSL *s, const void *_buf, int len)
a361 1
	const unsigned char *buf=_buf;
d399 2
a400 6
		if ((i == (int)n) ||
			(s->mode & SSL_MODE_ENABLE_PARTIAL_WRITE))
			{
			return(tot+i);
			}
		
d406 4
a409 1
static int write_pending(SSL *s, const unsigned char *buf, unsigned int len)
d417 1
a417 3
	if ((s->s2->wpend_tot > (int)len) ||
		((s->s2->wpend_buf != buf) &&
		 !(s->mode & SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER)))
d454 4
a457 1
static int do_ssl_write(SSL *s, const unsigned char *buf, unsigned int len)
a489 3
		/* Two-byte headers allow for a larger record length than
		 * three-byte headers, but we can't use them if we need
		 * padding or if we have to set the escape bit. */
d505 1
a505 2
			/* j <= SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER, thus
			 * j < SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER */
d509 1
a509 1
		else /* we may have to use a 3 byte header */
d511 1
a511 3
			/* If s->s2->escape is not set, then
			 * j <= SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER, and thus
			 * j < SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER. */
a514 1
				{
a515 3
				if (j > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER)
					j=SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER;
				}
a519 7

	/* Now
	 *      j <= SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
	 * holds, and if s->s2->three_byte_header is set, then even
	 *      j <= SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER.
	 */

d523 1
a523 1
	 * (if it is a two-byte header, then p == 0) */
d531 1
d533 2
a534 1
		memset(&(s->s2->wact_data[len]),0,p); /* arbitrary padding */
d570 1
a570 1
	s->s2->wpend_buf=buf;
d578 4
a581 1
int ssl2_part_read(SSL *s, unsigned long f, int i)
d586 11
d601 1
a601 1
		 * this is not necessarily fatal */
a606 20

		/* Check for error.  While there are recoverable errors,
		 * this function is not called when those must be expected;
		 * any error detected here is fatal. */
		if (s->init_num >= 3)
			{
			p=(unsigned char *)s->init_buf->data;
			if (p[0] == SSL2_MT_ERROR)
				{
				j=(p[1]<<8)|p[2];
				SSLerr((int)f,ssl_mt_error(j));
				s->init_num -= 3;
				if (s->init_num > 0)
					memmove(p, p+3, s->init_num);
				}
			}

		/* If it's not an error message, we have some error anyway --
		 * the message was shorter than expected.  This too is treated
		 * as fatal (at least if SSL_get_error is asked for its opinion). */
d611 2
a612 1
int ssl2_do_write(SSL *s)
d616 2
a617 1
	ret=ssl2_write(s,&s->init_buf->data[s->init_off],s->init_num);
a618 3
		{
		if (s->msg_callback)
			s->msg_callback(1, s->version, 0, s->init_buf->data, (size_t)(s->init_off + s->init_num), s, s->msg_callback_arg);
a619 1
		}
d627 2
a628 1
static int ssl_mt_error(int n)
a651 7
#else /* !OPENSSL_NO_SSL2 */

# if PEDANTIC
static void *dummy=&dummy;
# endif

#endif
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a115 1
#include "cryptlib.h"
a249 1
			OPENSSL_assert(mac_size <= MAX_MAC_SIZE);
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@d116 1
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d119 1
a119 1
static int n_do_ssl_write(SSL *s, const unsigned char *buf, unsigned int len);
d133 1
a133 1
	int mac_size;
d249 1
a249 3
			mac_size=EVP_MD_CTX_size(s->read_hash);
			if (mac_size < 0)
				return -1;
d264 1
a264 1
			(s->s2->rlength >= (unsigned int)mac_size))
d450 1
a450 1
		i=n_do_ssl_write(s,&(buf[tot]),n);
d514 1
a514 1
static int n_do_ssl_write(SSL *s, const unsigned char *buf, unsigned int len)
d516 1
a516 2
	unsigned int j,k,olen,p,bs;
	int mac_size;
d532 1
a532 5
		{
		mac_size=EVP_MD_CTX_size(s->write_hash);
		if (mac_size < 0)
			return -1;
		}
@


1.1.1.6
log
@Import OpenSSL 1.0.1g
@
text
@d272 2
a273 1
			if (	(CRYPTO_memcmp(mac,s->s2->mac_data,mac_size) != 0) ||
@


