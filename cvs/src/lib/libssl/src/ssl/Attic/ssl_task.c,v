head	1.10;
access;
symbols
	butholakala:1.5
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.5.0.46
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.42
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.5.0.36
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.04.15.21.45.43;	author tedu;	state dead;
branches;
next	1.9;

1.9
date	2014.04.15.11.50.18;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.14.13.10.35;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.13.21.11.19;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.13.20.37.12;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.40;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.20;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.34;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.31;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.13;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.13;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.43;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.36.47;	author markus;	state Exp;
branches;
next	;


desc
@@


1.10
log
@the VMS code is legion
@
text
@/* ssl/ssl_task.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* VMS */
/*
 * DECnet object for servicing SSL.  We accept the inbound and speak a
 * simple protocol for multiplexing the 2 data streams (application and
 * ssl data) over this logical link.
 *
 * Logical names:
 *    SSL_CIPHER	Defines a list of cipher specifications the server
 *			will support in order of preference.
 *    SSL_SERVER_CERTIFICATE
 *			Points to PEM (privacy enhanced mail) file that
 *			contains the server certificate and private password.
 *    SYS$NET		Logical created by netserver.exe as hook for completing
 *			DECnet logical link.
 *
 * Each NSP message sent over the DECnet link has the following structure:
 *    struct rpc_msg { 
 *      char channel;
 *      char function;
 *      short length;
 *      char data[MAX_DATA];
 *    } msg;
 *
 * The channel field designates the virtual data stream this message applies
 * to and is one of:
 *   A - Application data (payload).
 *   R - Remote client connection that initiated the SSL connection.  Encrypted
 *       data is sent over this connection.
 *   G - General data, reserved for future use.
 *
 * The data streams are half-duplex read/write and have following functions:
 *   G - Get, requests that up to msg.length bytes of data be returned.  The
 *       data is returned in the next 'C' function response that matches the
 *       requesting channel.
 *   P - Put, requests that the first msg.length bytes of msg.data be appended
 *       to the designated stream.
 *   C - Confirms a get or put.  Every get and put will get a confirm response,
 *       you cannot initiate another function on a channel until the previous
 *       operation has been confirmed.
 *
 *  The 2 channels may interleave their operations, for example:
 *        Server msg           Client msg
 *         A, Get, 4092          ---->
 *                               <----  R, get, 4092
 *         R, Confirm, {hello}   ---->
 *                               <----  R, put, {srv hello}
 *         R, Confirm, 0         ---->
 *                               .		(SSL handshake completed)
 *                               .              (read first app data).
 *                               <----  A, confirm, {http data}
 *         A, Put, {http data}   ---->
 *                               <----  A, confirm, 0
 *
 *  The length field is not permitted to be larger that 4092 bytes.
 *
 * Author: Dave Jones
 * Date:   22-JUL-1996
 */
#include <sys/types.h>

#include <stdlib.h>
#include <stdio.h>
#include <iodef.h>		/* VMS IO$_ definitions */
#include <descrip.h>		/* VMS string descriptors */
extern int SYS$QIOW(), SYS$ASSIGN();
int LIB$INIT_TIMER(), LIB$SHOW_TIMER();

#include <string.h>		/* from ssltest.c */
#include <errno.h>
#include <unistd.h>

#include <openssl/opensslconf.h>
#include <openssl/e_os2.h>
#include <openssl/buffer.h>
#include <openssl/x509.h>
#include <openssl/ssl.h>
#include <openssl/err.h>

int
verify_callback(int ok, X509 *xs, X509 *xi, int depth,
int error);
BIO *bio_err = NULL;
BIO *bio_stdout = NULL;
BIO_METHOD *BIO_s_rtcp();

static char *cipher = NULL;
int verbose = 1;
#ifdef FIONBIO
static int s_nbio = 0;
#endif
#define TEST_SERVER_CERT "SSL_SERVER_CERTIFICATE"
/*************************************************************************/
	struct rpc_msg {		/* Should have member alignment inhibited */
	char channel;
	/* 'A'-app data. 'R'-remote client 'G'-global */
	char function;
	/* 'G'-get, 'P'-put, 'C'-confirm, 'X'-close */
	unsigned short int length;	/* Amount of data returned or max to return */
	char data[4092];
	/* variable data */
};
#define RPC_HDR_SIZE (sizeof(struct rpc_msg) - 4092)

static $DESCRIPTOR(sysnet, "SYS$NET");
typedef unsigned short io_channel;

struct io_status {
	unsigned short status;
	unsigned short count;
	unsigned long stsval;
};
int doit(io_channel chan, SSL_CTX *s_ctx );
/*****************************************************************************/
/* Decnet I/O routines.
 */
static int get ( io_channel chan, char *buffer, int maxlen, int *length )
{
	int status;
	struct io_status iosb;
	status = SYS$QIOW ( 0, chan, IO$_READVBLK, &iosb, 0, 0,
	buffer, maxlen, 0, 0, 0, 0 );
	if ((status&1)
		== 1 ) status = iosb.status;
	if ((status&1)
		== 1 ) *length = iosb.count;
	return status;
}

static int put ( io_channel chan, char *buffer, int length )
{
	int status;
	struct io_status iosb;
	status = SYS$QIOW ( 0, chan, IO$_WRITEVBLK, &iosb, 0, 0,
	buffer, length, 0, 0, 0, 0 );
	if ((status&1)
		== 1 ) status = iosb.status;
	return status;
}
/***************************************************************************/
/* Handle operations on the 'G' channel.
 */
static int general_request ( io_channel chan, struct rpc_msg *msg, int length ) {
	return 48;
}
/***************************************************************************/
int main ( int argc, char **argv )
{
	int status, length;
	io_channel chan;
	struct rpc_msg msg;

	char *CApath = NULL, *CAfile = NULL;
	int badop = 0;
	int ret = 1;
	int client_auth = 0;
	int server_auth = 0;
	SSL_CTX *s_ctx = NULL;
    /*
     * Confirm logical link with initiating client.
     */
	LIB$INIT_TIMER();
	status = SYS$ASSIGN ( &sysnet, &chan, 0, 0, 0 );
	printf("status of assign to SYS$NET: %d\n", status );
    /*
     * Initialize standard out and error files.
     */
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE);
	if (bio_stdout == NULL)
		if ((bio_stdout = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_stdout, stdout, BIO_NOCLOSE);
    /*
     * get the preferred cipher list and other initialization
     */
	if (cipher == NULL)
		cipher = getenv("SSL_CIPHER");
	printf("cipher list: %s\n", cipher ? cipher : "{undefined}" );

	SSL_load_error_strings();
	OpenSSL_add_all_algorithms();

/* DRM, this was the original, but there is no such thing as SSLv2()
	s_ctx=SSL_CTX_new(SSLv2());
*/
	s_ctx = SSL_CTX_new(SSLv2_server_method());

	if (s_ctx == NULL)
		goto end;

	SSL_CTX_use_certificate_file(s_ctx, TEST_SERVER_CERT, SSL_FILETYPE_PEM);
	SSL_CTX_use_RSAPrivateKey_file(s_ctx, TEST_SERVER_CERT, SSL_FILETYPE_PEM);
	printf("Loaded server certificate: '%s'\n", TEST_SERVER_CERT );

    /*
     * Take commands from client until bad status.
     */
	LIB$SHOW_TIMER();
	status = doit ( chan, s_ctx );
	LIB$SHOW_TIMER();
    /*
     * do final cleanup and exit.
     */
end:
	if (s_ctx != NULL)
		SSL_CTX_free(s_ctx);
	LIB$SHOW_TIMER();
	return 1;
}

int
doit(io_channel chan, SSL_CTX *s_ctx )
{
	int status, length, link_state;
	struct rpc_msg msg;

	SSL *s_ssl = NULL;
	BIO *c_to_s = NULL;
	BIO *s_to_c = NULL;
	BIO *c_bio = NULL;
	BIO *s_bio = NULL;
	int i;
	int done = 0;

	s_ssl = SSL_new(s_ctx);
	if (s_ssl == NULL)
		goto err;

	c_to_s = BIO_new(BIO_s_rtcp());
	s_to_c = BIO_new(BIO_s_rtcp());
	if ((s_to_c == NULL)
		|| (c_to_s == NULL)) goto err;
/* original, DRM 24-SEP-1997
	BIO_set_fd ( c_to_s, "", chan );
	BIO_set_fd ( s_to_c, "", chan );
*/
	BIO_set_fd ( c_to_s, 0, chan );
	BIO_set_fd ( s_to_c, 0, chan );

	c_bio = BIO_new(BIO_f_ssl());
	s_bio = BIO_new(BIO_f_ssl());
	if ((c_bio == NULL)
		|| (s_bio == NULL)) goto err;

	SSL_set_accept_state(s_ssl);
	SSL_set_bio(s_ssl, c_to_s, s_to_c);
	BIO_set_ssl(s_bio, s_ssl, BIO_CLOSE);

	/* We can always do writes */
	printf("Begin doit main loop\n");
	/*
	 * Link states: 0-idle, 1-read pending, 2-write pending, 3-closed.
	 */
	for (link_state = 0; link_state < 3; ) {
	    /*
	     * Wait for remote end to request data action on A channel.
	     */
		while (link_state == 0 ) {
			status = get ( chan, (char *) &msg, sizeof(msg), &length );
			if ((status&1) == 0 ) {
				printf("Error in main loop get: %d\n", status );
				link_state = 3;
				break;
			}
			if (length < RPC_HDR_SIZE ) {
				printf("Error in main loop get size: %d\n", length );
				link_state = 3;
				break;
			}
			if (msg.channel != 'A' ) {
				printf("Error in main loop, unexpected channel: %c\n",
				msg.channel );
				link_state = 3;
				break;
			}
			if (msg.function == 'G' ) {
				link_state = 1;
			} else if (msg.function == 'P' ) {
				link_state = 2;	/* write pending */
			} else if (msg.function == 'X' ) {
				link_state = 3;
			} else {
				link_state = 3;
			}
		}
		if (link_state == 1 ) {
			i = BIO_read ( s_bio, msg.data, msg.length );
			if (i < 0 )
				link_state = 3;
			else {
				msg.channel = 'A';
				msg.function = 'C';
				/* confirm */
				msg.length = i;
				status = put ( chan, (char *) &msg, i + RPC_HDR_SIZE );
				if ((status&1)
					== 0 ) break;
				link_state = 0;
			}
		} else if (link_state == 2 ) {
			i = BIO_write ( s_bio, msg.data, msg.length );
			if (i < 0 )
				link_state = 3;
			else {
				msg.channel = 'A';
				msg.function = 'C';
				/* confirm */
				msg.length = 0;
				status = put ( chan, (char *) &msg, RPC_HDR_SIZE );
				if ((status&1)
					== 0 ) break;
				link_state = 0;
			}
		}
	}
	fprintf(stdout, "DONE\n");
err:
	/* We have to set the BIO's to NULL otherwise they will be
	 * free()ed twice.  Once when th s_ssl is SSL_free()ed and
	 * again when c_ssl is SSL_free()ed.
	 * This is a hack required because s_ssl and c_ssl are sharing the same
	 * BIO structure and SSL_set_bio() and SSL_free() automatically
	 * BIO_free non NULL entries.
	 * You should not normally do this or be required to do this */
	s_ssl->rbio = NULL;
	s_ssl->wbio = NULL;

	if (c_to_s != NULL)
		BIO_free(c_to_s);
	if (s_to_c != NULL)
		BIO_free(s_to_c);
	if (c_bio != NULL)
		BIO_free(c_bio);
	if (s_bio != NULL)
		BIO_free(s_bio);
	return (0);
}
@


1.9
log
@correct cases of code occuring directly after goto/break/return
ok miod@@ guenther@@
@
text
@@


1.8
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d325 1
a326 1
				link_state = 3;
d331 1
a332 1
				link_state = 3;
@


1.7
log
@Do not include "e_os.h" anymore.  Simply pull in the necessary headers.

ok miod@@, deraadt@@
@
text
@d137 5
a141 4
int verify_callback(int ok, X509 *xs, X509 *xi, int depth,
	int error);
BIO *bio_err=NULL;
BIO *bio_stdout=NULL;
d144 2
a145 2
static char *cipher=NULL;
int verbose=1;
d147 1
a147 1
static int s_nbio=0;
d151 8
a158 5
struct rpc_msg {		/* Should have member alignment inhibited */
   char channel;		/* 'A'-app data. 'R'-remote client 'G'-global */
   char function;		/* 'G'-get, 'P'-put, 'C'-confirm, 'X'-close */
   unsigned short int length;	/* Amount of data returned or max to return */
   char data[4092];		/* variable data */
d166 3
a168 3
    unsigned short status;
    unsigned short count;
    unsigned long stsval;
d176 3
a178 3
    int status;
    struct io_status iosb;
    status = SYS$QIOW ( 0, chan, IO$_READVBLK, &iosb, 0, 0,
d180 5
a184 3
    if ( (status&1) == 1 ) status = iosb.status;
    if ( (status&1) == 1 ) *length = iosb.count;
    return status;
d189 3
a191 3
    int status;
    struct io_status iosb;
    status = SYS$QIOW ( 0, chan, IO$_WRITEVBLK, &iosb, 0, 0,
d193 3
a195 2
    if ( (status&1) == 1 ) status = iosb.status;
    return status;
d200 2
a201 3
static int general_request ( io_channel chan, struct rpc_msg *msg, int length )
{
    return 48;
d206 10
a215 10
    int status, length;
    io_channel chan;
    struct rpc_msg msg;

	char *CApath=NULL,*CAfile=NULL;
	int badop=0;
	int ret=1;
	int client_auth=0;
	int server_auth=0;
	SSL_CTX *s_ctx=NULL;
d219 3
a221 3
    LIB$INIT_TIMER();
    status = SYS$ASSIGN ( &sysnet, &chan, 0, 0, 0 );
    printf("status of assign to SYS$NET: %d\n", status );
d226 2
a227 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE);
d229 2
a230 2
		if ((bio_stdout=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_stdout,stdout,BIO_NOCLOSE);
d234 2
a235 1
	if (cipher == NULL) cipher=getenv("SSL_CIPHER");
d244 1
a244 1
	s_ctx=SSL_CTX_new(SSLv2_server_method());
d246 2
a247 1
	if (s_ctx == NULL) goto end;
d249 2
a250 2
	SSL_CTX_use_certificate_file(s_ctx,TEST_SERVER_CERT,SSL_FILETYPE_PEM);
	SSL_CTX_use_RSAPrivateKey_file(s_ctx,TEST_SERVER_CERT,SSL_FILETYPE_PEM);
d256 3
a258 3
    LIB$SHOW_TIMER();
    status = doit ( chan, s_ctx );
    LIB$SHOW_TIMER();
d263 4
a266 3
	if (s_ctx != NULL) SSL_CTX_free(s_ctx);
    LIB$SHOW_TIMER();
    return 1;
d269 2
a270 1
int doit(io_channel chan, SSL_CTX *s_ctx )
d272 2
a273 2
    int status, length, link_state;
     struct rpc_msg msg;
d275 5
a279 5
	SSL *s_ssl=NULL;
	BIO *c_to_s=NULL;
	BIO *s_to_c=NULL;
	BIO *c_bio=NULL;
	BIO *s_bio=NULL;
d281 1
a281 4
	int done=0;

	s_ssl=SSL_new(s_ctx);
	if (s_ssl == NULL) goto err;
d283 8
a290 3
	c_to_s=BIO_new(BIO_s_rtcp());
	s_to_c=BIO_new(BIO_s_rtcp());
	if ((s_to_c == NULL) || (c_to_s == NULL)) goto err;
d298 4
a301 3
	c_bio=BIO_new(BIO_f_ssl());
	s_bio=BIO_new(BIO_f_ssl());
	if ((c_bio == NULL) || (s_bio == NULL)) goto err;
d304 2
a305 2
	SSL_set_bio(s_ssl,c_to_s,s_to_c);
	BIO_set_ssl(s_bio,s_ssl,BIO_CLOSE);
d316 27
a342 38
	    while ( link_state == 0 ) {
		status = get ( chan, (char *) &msg, sizeof(msg), &length );
		if ( (status&1) == 0 ) {
		    printf("Error in main loop get: %d\n", status );
		    link_state = 3;
		    break;
		}
	   	if ( length < RPC_HDR_SIZE ) {
		    printf("Error in main loop get size: %d\n", length );
		    break;
		    link_state = 3;
		}
	   	if ( msg.channel != 'A' ) {
		    printf("Error in main loop, unexpected channel: %c\n", 
			msg.channel );
		    break;
		    link_state = 3;
		}
		if ( msg.function == 'G' ) {
		    link_state = 1;
		} else if ( msg.function == 'P' ) {
		    link_state = 2;	/* write pending */
		} else if ( msg.function == 'X' ) {
		    link_state = 3;
		} else {
		    link_state = 3;
		}
	    }
	    if ( link_state == 1 ) {
		i = BIO_read ( s_bio, msg.data, msg.length );
		if ( i < 0 ) link_state = 3;
		else {
		    msg.channel = 'A';
		    msg.function = 'C';		/* confirm */
		    msg.length = i;
		    status = put ( chan, (char *) &msg, i+RPC_HDR_SIZE );
		    if ( (status&1) == 0 ) break;
		    link_state = 0;
d344 28
a371 10
	    } else if ( link_state == 2 ) {
		i = BIO_write ( s_bio, msg.data, msg.length );
		if ( i < 0 ) link_state = 3;
		else {
		    msg.channel = 'A';
		    msg.function = 'C';		/* confirm */
		    msg.length = 0;
		    status = put ( chan, (char *) &msg, RPC_HDR_SIZE );
		    if ( (status&1) == 0 ) break;
		    link_state = 0;
a372 1
	    }
d374 1
a374 1
	fprintf(stdout,"DONE\n");
d383 2
a384 2
	s_ssl->rbio=NULL;
	s_ssl->wbio=NULL;
d386 9
a394 5
	if (c_to_s != NULL) BIO_free(c_to_s);
	if (s_to_c != NULL) BIO_free(s_to_c);
	if (c_bio != NULL) BIO_free(c_bio);
	if (s_bio != NULL) BIO_free(s_bio);
	return(0);
@


1.6
log
@remove more cases of MS_STATIC, MS_CALLBACK, and MS_FAR.  Did you
know that MS_STATIC doesn't mean it is static?  How far can lies
and half-truths be layered?  I wonder if anyone got fooled, and
actually returned a pointer..
ok beck
@
text
@d117 2
d128 1
d130 2
a131 2
#include "e_os.h"

@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d134 1
a134 1
int MS_CALLBACK verify_callback(int ok, X509 *xs, X509 *xi, int depth,
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d261 1
a261 1
	static char cbuf[200],sbuf[200];
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d127 1
a127 1
#include "openssl/e_os.h"
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d229 1
a229 1
	SSLeay_add_all_algorithms();
@


1.1
log
@Initial revision
@
text
@d126 7
a132 5
#include "buffer.h"
#include "../e_os.h"
#include "x509.h"
#include "ssl.h"
#include "err.h"
d229 1
d231 1
d233 2
d276 1
d279 3
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d126 5
a130 7

#include "e_os.h"

#include <openssl/buffer.h>
#include <openssl/x509.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
a226 1
	OpenSSL_add_all_algorithms();
a227 1
/* DRM, this was the original, but there is no such thing as SSLv2()
a228 2
*/
	s_ctx=SSL_CTX_new(SSLv2_server_method());
a269 1
/* original, DRM 24-SEP-1997
a271 3
*/
	BIO_set_fd ( c_to_s, 0, chan );
	BIO_set_fd ( s_to_c, 0, chan );
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d261 1
a261 1

@


