head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.46
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.42
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.40
	OPENBSD_5_3_BASE:1.2
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.2.0.36
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.38
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.2.0.34
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.32
	OPENBSD_4_9_BASE:1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.2.0.30
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.26
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.28
	OPENBSD_4_6_BASE:1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.2.0.24
	OPENBSD_4_5_BASE:1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.22
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.1.0.14
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.12
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.13.15.25.23;	author miod;	state dead;
branches;
next	1.2;

1.2
date	2003.05.12.02.18.34;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.07.56;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.29;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.36.33;	author markus;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@#pragma once


#ifdef __cplusplus
extern "C" {
#endif



enum
{
	kMacSocket_TimeoutErr = -2
};


//	Since MacSocket does busy waiting, I do a callback while waiting

typedef OSErr (*MacSocket_IdleWaitCallback)(void *);


//	Call this before anything else!

OSErr MacSocket_Startup(void);


//	Call this to cleanup before quitting

OSErr MacSocket_Shutdown(void);


//	Call this to allocate a "socket" (reference number is returned in outSocketNum)
//	Note that inDoThreadSwitching is pretty much irrelevant right now, since I ignore it
//	The inTimeoutTicks parameter is applied during reads/writes of data
//	The inIdleWaitCallback parameter specifies a callback which is called during busy-waiting periods
//	The inUserRefPtr parameter is passed back to the idle-wait callback

OSErr MacSocket_socket(int *outSocketNum,const Boolean inDoThreadSwitching,const long inTimeoutTicks,MacSocket_IdleWaitCallback inIdleWaitCallback,void *inUserRefPtr);


//	Call this to connect to an IP/DNS address
//	Note that inTargetAddressAndPort is in "IP:port" format-- e.g. 10.1.1.1:123

OSErr MacSocket_connect(const int inSocketNum,char *inTargetAddressAndPort);


//	Call this to listen on a port
//	Since this a low-performance implementation, I allow a maximum of 1 (one!) incoming request when I listen

OSErr MacSocket_listen(const int inSocketNum,const int inPortNum);


//	Call this to close a socket

OSErr MacSocket_close(const int inSocketNum);


//	Call this to receive data on a socket
//	Most parameters' purpose are obvious-- except maybe "inBlock" which controls whether I wait for data or return immediately

int MacSocket_recv(const int inSocketNum,void *outBuff,int outBuffLength,const Boolean inBlock);


//	Call this to send data on a socket

int MacSocket_send(const int inSocketNum,const void *inBuff,int inBuffLength);


//	If zero bytes were read in a call to MacSocket_recv(), it may be that the remote end has done a half-close
//	This function will let you check whether that's true or not

Boolean MacSocket_RemoteEndIsClosing(const int inSocketNum);


//	Call this to see if the listen has completed after a call to MacSocket_listen()

Boolean MacSocket_ListenCompleted(const int inSocketNum);


//	These really aren't very useful anymore

Boolean MacSocket_LocalEndIsOpen(const int inSocketNum);
Boolean MacSocket_RemoteEndIsOpen(const int inSocketNum);


//	You may wish to change the userRefPtr for a socket callback-- use this to do it

void MacSocket_SetUserRefPtr(const int inSocketNum,void *inNewRefPtr);


//	Call these to get the socket's IP:port descriptor

void MacSocket_GetLocalIPAndPort(const int inSocketNum,char *outIPAndPort,const int inIPAndPortLength);
void MacSocket_GetRemoteIPAndPort(const int inSocketNum,char *outIPAndPort,const int inIPAndPortLength);


//	Call this to get error info from a socket

void MacSocket_GetSocketErrorInfo(const int inSocketNum,int *outSocketErrCode,char *outSocketErrString,const int inSocketErrStringMaxLength);


#ifdef __cplusplus
}
#endif
@


1.2
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d65 1
a65 1
int MacSocket_send(const int inSocketNum,void *inBuff,int inBuffLength);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d65 1
a65 1
int MacSocket_send(const int inSocketNum,const void *inBuff,int inBuffLength);
@


