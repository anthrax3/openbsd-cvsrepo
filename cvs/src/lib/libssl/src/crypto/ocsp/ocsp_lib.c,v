head	1.18;
access;
symbols
	OPENBSD_6_0:1.18.0.8
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.4
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	butholakala:1.6
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.18
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.16
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.02.10.05.25.45;	author jsing;	state Exp;
branches;
next	1.17;
commitid	HQSAPkY0rIzvWYsC;

1.17
date	2015.02.10.04.21.50;	author jsing;	state Exp;
branches;
next	1.16;
commitid	lmzaeFtqKbLCKhxJ;

1.16
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.15;
commitid	8tb4v3IC8S2vzfHj;

1.15
date	2014.07.13.16.03.09;	author beck;	state Exp;
branches;
next	1.14;
commitid	6xdvCwSqBadTW6X3;

1.14
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.13;
commitid	yQEL1wOWIearrW15;

1.13
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.12;
commitid	nzndm3zqPmFurSaK;

1.12
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.11;
commitid	id8dTrTMtnTn4fqt;

1.11
date	2014.07.09.20.34.29;	author tedu;	state Exp;
branches;
next	1.10;
commitid	a7ebaL8BO9BHo7Jg;

1.10
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.05.18.11.28.41;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.17.19.56.35;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.08.08.03.14;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.41;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.04.07.20.41.46;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2011.11.03.02.32.12;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.41;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Manually expand ASN1_ITEM_rptr macros that should have been expanded with
the IMPLEMENT_ASN1_DUP_FUNCTION macro.
@
text
@/* $OpenBSD: ocsp_lib.c,v 1.17 2015/02/10 04:21:50 jsing Exp $ */
/* Written by Tom Titchener <Tom_Titchener@@groove.net> for the OpenSSL
 * project. */

/* History:
   This file was transfered to Richard Levitte from CertCo by Kathy
   Weinhold in mid-spring 2000 to be included in OpenSSL or released
   as a patch kit. */

/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1t.h>
#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/ocsp.h>
#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

/* Convert a certificate and its issuer to an OCSP_CERTID */

OCSP_CERTID *
OCSP_cert_to_id(const EVP_MD *dgst, X509 *subject, X509 *issuer)
{
	X509_NAME *iname;
	ASN1_INTEGER *serial;
	ASN1_BIT_STRING *ikey;

#ifndef OPENSSL_NO_SHA1
	if (!dgst)
		dgst = EVP_sha1();
#endif
	if (subject) {
		iname = X509_get_issuer_name(subject);
		serial = X509_get_serialNumber(subject);
	} else {
		iname = X509_get_subject_name(issuer);
		serial = NULL;
	}
	ikey = X509_get0_pubkey_bitstr(issuer);
	return OCSP_cert_id_new(dgst, iname, ikey, serial);
}

OCSP_CERTID *
OCSP_cert_id_new(const EVP_MD *dgst, X509_NAME *issuerName,
    ASN1_BIT_STRING* issuerKey, ASN1_INTEGER *serialNumber)
{
	int nid;
	unsigned int i;
	X509_ALGOR *alg;
	OCSP_CERTID *cid = NULL;
	unsigned char md[EVP_MAX_MD_SIZE];

	if (!(cid = OCSP_CERTID_new()))
		goto err;

	alg = cid->hashAlgorithm;
	if (alg->algorithm != NULL)
		ASN1_OBJECT_free(alg->algorithm);
	if ((nid = EVP_MD_type(dgst)) == NID_undef) {
		OCSPerr(OCSP_F_OCSP_CERT_ID_NEW, OCSP_R_UNKNOWN_NID);
		goto err;
	}
	if (!(alg->algorithm = OBJ_nid2obj(nid)))
		goto err;
	if ((alg->parameter = ASN1_TYPE_new()) == NULL)
		goto err;
	alg->parameter->type = V_ASN1_NULL;

	if (!X509_NAME_digest(issuerName, dgst, md, &i))
		goto digerr;
	if (!(ASN1_OCTET_STRING_set(cid->issuerNameHash, md, i)))
		goto err;

	/* Calculate the issuerKey hash, excluding tag and length */
	if (!EVP_Digest(issuerKey->data, issuerKey->length, md, &i, dgst, NULL))
		goto err;

	if (!(ASN1_OCTET_STRING_set(cid->issuerKeyHash, md, i)))
		goto err;

	if (serialNumber) {
		ASN1_INTEGER_free(cid->serialNumber);
		if (!(cid->serialNumber = ASN1_INTEGER_dup(serialNumber)))
			goto err;
	}
	return cid;

digerr:
	OCSPerr(OCSP_F_OCSP_CERT_ID_NEW, OCSP_R_DIGEST_ERR);
err:
	if (cid)
		OCSP_CERTID_free(cid);
	return NULL;
}

int
OCSP_id_issuer_cmp(OCSP_CERTID *a, OCSP_CERTID *b)
{
	int ret;

	ret = OBJ_cmp(a->hashAlgorithm->algorithm, b->hashAlgorithm->algorithm);
	if (ret)
		return ret;
	ret = ASN1_OCTET_STRING_cmp(a->issuerNameHash, b->issuerNameHash);
	if (ret)
		return ret;
	return ASN1_OCTET_STRING_cmp(a->issuerKeyHash, b->issuerKeyHash);
}

int
OCSP_id_cmp(OCSP_CERTID *a, OCSP_CERTID *b)
{
	int ret;

	ret = OCSP_id_issuer_cmp(a, b);
	if (ret)
		return ret;
	return ASN1_INTEGER_cmp(a->serialNumber, b->serialNumber);
}

/* Parse a URL and split it up into host, port and path components and whether
 * it is SSL.
 */
int
OCSP_parse_url(char *url, char **phost, char **pport, char **ppath, int *pssl)
{
	char *p, *buf;
	char *host, *port;

	*phost = NULL;
	*pport = NULL;
	*ppath = NULL;

	/* dup the buffer since we are going to mess with it */
	buf = url ? strdup(url) : NULL;
	if (!buf)
		goto mem_err;

	/* Check for initial colon */
	p = strchr(buf, ':');
	if (!p)
		goto parse_err;

	*(p++) = '\0';

	if (!strcmp(buf, "http")) {
		*pssl = 0;
		port = "80";
	} else if (!strcmp(buf, "https")) {
		*pssl = 1;
		port = "443";
	} else
		goto parse_err;

	/* Check for double slash */
	if ((p[0] != '/') || (p[1] != '/'))
		goto parse_err;

	p += 2;

	host = p;

	/* Check for trailing part of path */
	p = strchr(p, '/');
	if (!p)
		*ppath = strdup("/");
	else {
		*ppath = strdup(p);
		/* Set start of path to 0 so hostname is valid */
		*p = '\0';
	}

	if (!*ppath)
		goto mem_err;

	/* Look for optional ':' for port number */
	if ((p = strchr(host, ':'))) {
		*p = 0;
		port = p + 1;
	} else {
		/* Not found: set default port */
		if (*pssl)
			port = "443";
		else
			port = "80";
	}

	*pport = strdup(port);
	if (!*pport)
		goto mem_err;

	*phost = strdup(host);

	if (!*phost)
		goto mem_err;

	free(buf);

	return 1;

mem_err:
	OCSPerr(OCSP_F_OCSP_PARSE_URL, ERR_R_MALLOC_FAILURE);
	goto err;

parse_err:
	OCSPerr(OCSP_F_OCSP_PARSE_URL, OCSP_R_ERROR_PARSING_URL);

err:
	free(buf);
	free(*ppath);
	free(*pport);
	free(*phost);
	*phost = NULL;
	*pport = NULL;
	*ppath = NULL;
	return 0;
}


OCSP_CERTID *
OCSP_CERTID_dup(OCSP_CERTID *x)
{
	return ASN1_item_dup(&OCSP_CERTID_it, x);
}
@


1.17
log
@Expand the IMPLEMENT_ASN1_DUP_FUNCTION macro so that the code is visible
and functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_lib.c,v 1.16 2014/10/18 17:20:40 jsing Exp $ */
d281 1
a281 1
	return ASN1_item_dup(ASN1_ITEM_rptr(OCSP_CERTID), x);
@


1.16
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_lib.c,v 1.15 2014/07/13 16:03:09 beck Exp $ */
d277 6
a282 1
IMPLEMENT_ASN1_DUP_FUNCTION(OCSP_CERTID)
@


1.15
log
@The bell tolls for BUF_strdup - Start the migration to using
intrinsics. This is the easy ones, a few left to check one at
a time.
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_lib.c,v 1.14 2014/07/11 08:44:49 jsing Exp $ */
a73 1
#include <openssl/rand.h>
@


1.14
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_lib.c,v 1.13 2014/07/10 22:45:57 jsing Exp $ */
d194 1
a194 1
	buf = BUF_strdup(url);
d225 1
a225 1
		*ppath = BUF_strdup("/");
d227 1
a227 1
		*ppath = BUF_strdup(p);
d247 1
a247 1
	*pport = BUF_strdup(port);
d251 1
a251 1
	*phost = BUF_strdup(host);
@


1.13
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_lib.c,v 1.12 2014/07/10 13:58:23 jsing Exp $ */
a63 1
#include <cryptlib.h>
d69 2
d72 2
a75 1
#include <openssl/pem.h>
a76 2
#include <openssl/ocsp.h>
#include <openssl/asn1t.h>
@


1.12
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_lib.c,v 1.11 2014/07/09 20:34:29 tedu Exp $ */
d67 2
@


1.11
log
@reset host, port, path to null after freeing so the caller doesn't
accidentally free them again. actually a bug in the caller and (hey hey)
apps/ocsp.c has exactly that bug, but it's easier/safer to fix here.
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_lib.c,v 1.10 2014/06/12 15:49:30 deraadt Exp $ */
d64 1
d66 2
a67 1
#include <cryptlib.h>
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d268 3
@


1.9
log
@More KNF.
@
text
@d1 1
a1 1
/* ocsp_lib.c */
@


1.8
log
@KNF
@
text
@d18 1
a18 1
 *    notice, this list of conditions and the following disclaimer. 
d118 1
a118 1
	if (!(alg->algorithm=OBJ_nid2obj(nid)))
d120 1
a120 1
	if ((alg->parameter=ASN1_TYPE_new()) == NULL)
d122 1
a122 1
	alg->parameter->type=V_ASN1_NULL;
d142 1
d220 1
a220 1
	if (!p) 
@


1.7
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d76 2
a77 1
OCSP_CERTID *OCSP_cert_to_id(const EVP_MD *dgst, X509 *subject, X509 *issuer)
d82 1
d84 2
a85 1
	if(!dgst) dgst = EVP_sha1();
d87 1
a87 2
	if (subject)
		{
d90 1
a90 3
		}
	else
		{
d93 1
a93 1
		}
d98 4
a101 6

OCSP_CERTID *OCSP_cert_id_new(const EVP_MD *dgst, 
			      X509_NAME *issuerName, 
			      ASN1_BIT_STRING* issuerKey, 
			      ASN1_INTEGER *serialNumber)
        {
d103 1
a103 1
        unsigned int i;
d108 2
a109 1
	if (!(cid = OCSP_CERTID_new())) goto err;
d112 10
a121 8
	if (alg->algorithm != NULL) ASN1_OBJECT_free(alg->algorithm);
	if ((nid = EVP_MD_type(dgst)) == NID_undef)
	        {
		OCSPerr(OCSP_F_OCSP_CERT_ID_NEW,OCSP_R_UNKNOWN_NID);
		goto err;
		}
	if (!(alg->algorithm=OBJ_nid2obj(nid))) goto err;
	if ((alg->parameter=ASN1_TYPE_new()) == NULL) goto err;
d124 4
a127 2
	if (!X509_NAME_digest(issuerName, dgst, md, &i)) goto digerr;
	if (!(ASN1_OCTET_STRING_set(cid->issuerNameHash, md, i))) goto err;
d133 2
a134 1
	if (!(ASN1_OCTET_STRING_set(cid->issuerKeyHash, md, i))) goto err;
d136 1
a136 2
	if (serialNumber)
		{
d138 3
a140 2
		if (!(cid->serialNumber = ASN1_INTEGER_dup(serialNumber))) goto err;
		}
d143 1
a143 1
	OCSPerr(OCSP_F_OCSP_CERT_ID_NEW,OCSP_R_DIGEST_ERR);
d145 2
a146 1
	if (cid) OCSP_CERTID_free(cid);
d148 1
a148 1
	}
d150 3
a152 2
int OCSP_id_issuer_cmp(OCSP_CERTID *a, OCSP_CERTID *b)
	{
d154 1
d156 2
a157 1
	if (ret) return ret;
d159 2
a160 1
	if (ret) return ret;
d162 1
a162 1
	}
d164 3
a166 2
int OCSP_id_cmp(OCSP_CERTID *a, OCSP_CERTID *b)
	{
d168 1
d170 2
a171 1
	if (ret) return ret;
d173 1
a173 2
	}

d178 3
a180 3

int OCSP_parse_url(char *url, char **phost, char **pport, char **ppath, int *pssl)
	{
a181 1

d190 2
a191 1
	if (!buf) goto mem_err;
d195 2
a196 2

	if (!p) goto parse_err;
d200 1
a200 2
	if (!strcmp(buf, "http"))
		{
d203 1
a203 3
		}
	else if (!strcmp(buf, "https"))
		{
d206 1
a206 2
		}
	else
a217 1

a218 1

d221 1
a221 2
	else
		{
d225 1
a225 1
		}
d227 2
a228 1
	if (!*ppath) goto mem_err;
d231 1
a231 2
	if ((p = strchr(host, ':')))
		{
d234 1
a234 3
		}
	else
		{
d236 5
a240 3
		if (*pssl) port = "443";
		else port = "80";
		}
d243 2
a244 1
	if (!*pport) goto mem_err;
d248 2
a249 1
	if (!*phost) goto mem_err;
d255 1
a255 1
	mem_err:
d259 1
a259 1
	parse_err:
d262 5
a266 6

	err:
	if (buf) free(buf);
	if (*ppath) free(*ppath);
	if (*pport) free(*pport);
	if (*phost) free(*phost);
d268 1
a268 2

	}
@


1.6
log
@resolve conflicts
@
text
@d245 1
a245 1
	OPENSSL_free(buf);
d258 4
a261 4
	if (buf) OPENSSL_free(buf);
	if (*ppath) OPENSSL_free(*ppath);
	if (*pport) OPENSSL_free(*pport);
	if (*phost) OPENSSL_free(*phost);
@


1.5
log
@openssl-1.0.0e: resolve conflicts
@
text
@d127 2
a128 1
	EVP_Digest(issuerKey->data, issuerKey->length, md, &i, dgst, NULL);
@


1.4
log
@resolve conflicts, fix local changes
@
text
@d173 4
a179 4

	*phost = NULL;
	*pport = NULL;
	*ppath = NULL;
@


1.3
log
@resolve conflicts
@
text
@d72 1
d264 2
@


1.2
log
@merge 0.9.7d
@
text
@d115 1
a115 1
		OCSPerr(OCSP_F_CERT_ID_NEW,OCSP_R_UNKNOWN_NID);
d137 1
a137 1
	OCSPerr(OCSP_F_CERT_ID_NEW,OCSP_R_DIGEST_ERR);
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d256 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import openssl-0.9.7d
@
text
@a255 1
	if (buf) OPENSSL_free(buf);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d115 1
a115 1
		OCSPerr(OCSP_F_OCSP_CERT_ID_NEW,OCSP_R_UNKNOWN_NID);
d137 1
a137 1
	OCSPerr(OCSP_F_OCSP_CERT_ID_NEW,OCSP_R_DIGEST_ERR);
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a71 1
#include <openssl/asn1t.h>
a262 2

IMPLEMENT_ASN1_DUP_FUNCTION(OCSP_CERTID)
@


1.1.1.5
log
@import OpenSSL 1.0.0e
@
text
@d173 4
a179 4

	/* dup the buffer since we are going to mess with it */
	buf = BUF_strdup(url);
	if (!buf) goto mem_err;
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@d127 1
a127 2
	if (!EVP_Digest(issuerKey->data, issuerKey->length, md, &i, dgst, NULL))
		goto err;
@


