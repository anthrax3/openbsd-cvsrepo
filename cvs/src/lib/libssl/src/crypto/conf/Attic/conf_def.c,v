head	1.32;
access;
symbols
	OPENBSD_6_0:1.31.0.6
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.31.0.4
	OPENBSD_5_8_BASE:1.31
	OPENBSD_5_7:1.29.0.4
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.28.0.4
	OPENBSD_5_6_BASE:1.28
	butholakala:1.12
	openssl_1_0_1_g:1.1.1.9
	OPENBSD_5_5:1.12.0.12
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.8
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.6
	OPENBSD_5_3_BASE:1.12
	openssl_1_0_1_c:1.1.1.9
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	openssl_1_0_0_f:1.1.1.9
	openssl_1_0_0_e:1.1.1.9
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	openssh_1_0_0_a:1.1.1.8
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	openssl_0_9_8_k:1.1.1.7
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	openssl_0_9_8_j:1.1.1.7
	openssl_0_9_8_h:1.1.1.7
	pre_openssl_0_9_8h:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	openssl_0_9_7j:1.1.1.6
	openssl:1.1.1
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENSSL_0_9_7G:1.1.1.5
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.1.0.6
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.32
date	2016.09.03.11.33.36;	author beck;	state dead;
branches;
next	1.31;
commitid	HnbXxsegngek41U2;

1.31
date	2015.07.18.22.42.09;	author beck;	state Exp;
branches;
next	1.30;
commitid	5EJ1VvPBEHA2Uveh;

1.30
date	2015.04.30.15.28.03;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	TJ3aG1PRpmeETaBP;

1.29
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.28;
commitid	gtwLkRyWx0K1HbzX;

1.28
date	2014.07.11.15.38.03;	author miod;	state Exp;
branches;
next	1.27;
commitid	mY1DxrDvw7TgkB4p;

1.27
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.26;
commitid	yQEL1wOWIearrW15;

1.26
date	2014.07.09.11.10.50;	author bcook;	state Exp;
branches;
next	1.25;
commitid	lHJTcoC4c5BhEOGj;

1.25
date	2014.07.08.16.36.45;	author bcook;	state Exp;
branches;
next	1.24;
commitid	q4UVM4ORJKHR3FtE;

1.24
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	mJUVYpkFBZ0Zv2bG;

1.23
date	2014.06.07.14.41.56;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	2nvnQBrv22dLtvTt;

1.22
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.27.20.20.59;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.20.09.04.56;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.19.00.41.37;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.22.09.37;	author giovanni;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.29.05.39.20;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.05.11.05.07;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.16.12.18.21;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.30.11.08.05;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.27;	author beck;	state Exp;
branches
	1.1.1.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.1.1
date	2002.09.05.12.50.09;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.37.31;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.56;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.38;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.04.29.05.37.07;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.06.27.05.05.32;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2011.11.03.02.32.10;	author djm;	state Exp;
branches;
next	;

1.1.4.1
date	2002.07.30.11.07.33;	author miod;	state Exp;
branches;
next	;

1.1.6.1
date	2002.07.30.15.47.52;	author jason;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: conf_def.c,v 1.31 2015/07/18 22:42:09 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Part of the code in here was originally in conf.c, which is now removed */

#include <stdio.h>
#include <string.h>

#include <openssl/buffer.h>
#include <openssl/conf.h>
#include <openssl/conf_api.h>
#include <openssl/err.h>
#include <openssl/lhash.h>
#include <openssl/stack.h>

#include "conf_def.h"

static char *eat_ws(CONF *conf, char *p);
static char *eat_alpha_numeric(CONF *conf, char *p);
static void clear_comments(CONF *conf, char *p);
static int str_copy(CONF *conf, char *section, char **to, char *from);
static char *scan_quote(CONF *conf, char *p);
static char *scan_dquote(CONF *conf, char *p);
#define scan_esc(conf,p)	(((IS_EOF((conf),(p)[1]))?((p)+1):((p)+2)))

static CONF *def_create(CONF_METHOD *meth);
static int def_init_default(CONF *conf);
static int def_init_WIN32(CONF *conf);
static int def_destroy(CONF *conf);
static int def_destroy_data(CONF *conf);
static int def_load(CONF *conf, const char *name, long *eline);
static int def_load_bio(CONF *conf, BIO *bp, long *eline);
static int def_dump(const CONF *conf, BIO *bp);
static int def_is_number(const CONF *conf, char c);
static int def_to_int(const CONF *conf, char c);

static CONF_METHOD default_method = {
	.name = "OpenSSL default",
	.create = def_create,
	.init = def_init_default,
	.destroy = def_destroy,
	.destroy_data = def_destroy_data,
	.load_bio = def_load_bio,
	.dump = def_dump,
	.is_number = def_is_number,
	.to_int = def_to_int,
	.load = def_load
};

static CONF_METHOD WIN32_method = {
	"WIN32",
	def_create,
	def_init_WIN32,
	def_destroy,
	def_destroy_data,
	def_load_bio,
	def_dump,
	def_is_number,
	def_to_int,
	def_load
};

CONF_METHOD *
NCONF_default(void)
{
	return &default_method;
}

CONF_METHOD *
NCONF_WIN32(void)
{
	return &WIN32_method;
}

static CONF *
def_create(CONF_METHOD *meth)
{
	CONF *ret;

	ret = malloc(sizeof(CONF) + sizeof(unsigned short *));
	if (ret)
		if (meth->init(ret) == 0) {
			free(ret);
			ret = NULL;
		}
	return ret;
}

static int
def_init_default(CONF *conf)
{
	if (conf == NULL)
		return 0;

	conf->meth = &default_method;
	conf->meth_data = CONF_type_default;
	conf->data = NULL;

	return 1;
}

static int
def_init_WIN32(CONF *conf)
{
	if (conf == NULL)
		return 0;

	conf->meth = &WIN32_method;
	conf->meth_data = (void *)CONF_type_win32;
	conf->data = NULL;

	return 1;
}

static int
def_destroy(CONF *conf)
{
	if (def_destroy_data(conf)) {
		free(conf);
		return 1;
	}
	return 0;
}

static int
def_destroy_data(CONF *conf)
{
	if (conf == NULL)
		return 0;
	_CONF_free_data(conf);
	return 1;
}

static int
def_load(CONF *conf, const char *name, long *line)
{
	int ret;
	BIO *in = NULL;

	in = BIO_new_file(name, "rb");
	if (in == NULL) {
		if (ERR_GET_REASON(ERR_peek_last_error()) == BIO_R_NO_SUCH_FILE)
			CONFerr(CONF_F_DEF_LOAD, CONF_R_NO_SUCH_FILE);
		else
			CONFerr(CONF_F_DEF_LOAD, ERR_R_SYS_LIB);
		return 0;
	}

	ret = def_load_bio(conf, in, line);
	BIO_free(in);

	return ret;
}

static int
def_load_bio(CONF *conf, BIO *in, long *line)
{
/* The macro BUFSIZE conflicts with a system macro in VxWorks */
#define CONFBUFSIZE	512
	int bufnum = 0, i, ii;
	BUF_MEM *buff = NULL;
	char *s, *p, *end;
	int again;
	long eline = 0;
	CONF_VALUE *v = NULL, *tv;
	CONF_VALUE *sv = NULL;
	char *section = NULL, *buf;
	char *start, *psection, *pname;
	void *h = (void *)(conf->data);

	if ((buff = BUF_MEM_new()) == NULL) {
		CONFerr(CONF_F_DEF_LOAD_BIO, ERR_R_BUF_LIB);
		goto err;
	}

	section = strdup("default");
	if (section == NULL) {
		CONFerr(CONF_F_DEF_LOAD_BIO, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (_CONF_new_data(conf) == 0) {
		CONFerr(CONF_F_DEF_LOAD_BIO, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	sv = _CONF_new_section(conf, section);
	if (sv == NULL) {
		CONFerr(CONF_F_DEF_LOAD_BIO,
		    CONF_R_UNABLE_TO_CREATE_NEW_SECTION);
		goto err;
	}

	bufnum = 0;
	again = 0;
	for (;;) {
		if (!BUF_MEM_grow(buff, bufnum + CONFBUFSIZE)) {
			CONFerr(CONF_F_DEF_LOAD_BIO, ERR_R_BUF_LIB);
			goto err;
		}
		p = &(buff->data[bufnum]);
		*p = '\0';
		BIO_gets(in, p, CONFBUFSIZE - 1);
		p[CONFBUFSIZE - 1] = '\0';
		ii = i = strlen(p);
		if (i == 0 && !again)
			break;
		again = 0;
		while (i > 0) {
			if ((p[i - 1] != '\r') && (p[i - 1] != '\n'))
				break;
			else
				i--;
		}
		/* we removed some trailing stuff so there is a new
		 * line on the end. */
		if (ii && i == ii)
			again = 1; /* long line */
		else {
			p[i] = '\0';
			eline++; /* another input line */
		}

		/* we now have a line with trailing \r\n removed */

		/* i is the number of bytes */
		bufnum += i;

		v = NULL;
		/* check for line continuation */
		if (bufnum >= 1) {
			/* If we have bytes and the last char '\\' and
			 * second last char is not '\\' */
			p = &(buff->data[bufnum - 1]);
			if (IS_ESC(conf, p[0]) &&
			    ((bufnum <= 1) || !IS_ESC(conf, p[-1]))) {
				bufnum--;
				again = 1;
			}
		}
		if (again)
			continue;
		bufnum = 0;
		buf = buff->data;

		clear_comments(conf, buf);
		s = eat_ws(conf, buf);
		if (IS_EOF(conf, *s))
			continue; /* blank line */
		if (*s == '[') {
			char *ss;

			s++;
			start = eat_ws(conf, s);
			ss = start;
again:
			end = eat_alpha_numeric(conf, ss);
			p = eat_ws(conf, end);
			if (*p != ']') {
				if (*p != '\0' && ss != p) {
					ss = p;
					goto again;
				}
				CONFerr(CONF_F_DEF_LOAD_BIO,
				    CONF_R_MISSING_CLOSE_SQUARE_BRACKET);
				goto err;
			}
			*end = '\0';
			if (!str_copy(conf, NULL, &section, start))
				goto err;
			if ((sv = _CONF_get_section(conf, section)) == NULL)
				sv = _CONF_new_section(conf, section);
			if (sv == NULL) {
				CONFerr(CONF_F_DEF_LOAD_BIO,
				    CONF_R_UNABLE_TO_CREATE_NEW_SECTION);
				goto err;
			}
			continue;
		} else {
			pname = s;
			psection = NULL;
			end = eat_alpha_numeric(conf, s);
			if ((end[0] == ':') && (end[1] == ':')) {
				*end = '\0';
				end += 2;
				psection = pname;
				pname = end;
				end = eat_alpha_numeric(conf, end);
			}
			p = eat_ws(conf, end);
			if (*p != '=') {
				CONFerr(CONF_F_DEF_LOAD_BIO,
				    CONF_R_MISSING_EQUAL_SIGN);
				goto err;
			}
			*end = '\0';
			p++;
			start = eat_ws(conf, p);
			while (!IS_EOF(conf, *p))
				p++;
			p--;
			while ((p != start) && (IS_WS(conf, *p)))
				p--;
			p++;
			*p = '\0';

			if (!(v = malloc(sizeof(CONF_VALUE)))) {
				CONFerr(CONF_F_DEF_LOAD_BIO,
				    ERR_R_MALLOC_FAILURE);
				goto err;
			}
			if (psection == NULL)
				psection = section;
			v->name = strdup(pname);
			v->value = NULL;
			if (v->name == NULL) {
				CONFerr(CONF_F_DEF_LOAD_BIO,
				    ERR_R_MALLOC_FAILURE);
				goto err;
			}
			if (!str_copy(conf, psection, &(v->value), start))
				goto err;

			if (strcmp(psection, section) != 0) {
				if ((tv = _CONF_get_section(conf, psection))
					== NULL)
					tv = _CONF_new_section(conf, psection);
				if (tv == NULL) {
					CONFerr(CONF_F_DEF_LOAD_BIO,
					    CONF_R_UNABLE_TO_CREATE_NEW_SECTION);
					goto err;
				}
			} else
				tv = sv;

			if (_CONF_add_string(conf, tv, v) == 0) {
				CONFerr(CONF_F_DEF_LOAD_BIO,
				    ERR_R_MALLOC_FAILURE);
				goto err;
			}
			v = NULL;
		}
	}
	if (buff != NULL)
		BUF_MEM_free(buff);
	free(section);
	return (1);

err:
	if (buff != NULL)
		BUF_MEM_free(buff);
	free(section);
	if (line != NULL)
		*line = eline;
	ERR_asprintf_error_data("line %ld", eline);
	if ((h != conf->data) && (conf->data != NULL)) {
		CONF_free(conf->data);
		conf->data = NULL;
	}
	if (v != NULL) {
		free(v->name);
		free(v->value);
		free(v);
	}
	return (0);
}

static void
clear_comments(CONF *conf, char *p)
{
	for (;;) {
		if (IS_FCOMMENT(conf, *p)) {
			*p = '\0';
			return;
		}
		if (!IS_WS(conf, *p)) {
			break;
		}
		p++;
	}

	for (;;) {
		if (IS_COMMENT(conf, *p)) {
			*p = '\0';
			return;
		}
		if (IS_DQUOTE(conf, *p)) {
			p = scan_dquote(conf, p);
			continue;
		}
		if (IS_QUOTE(conf, *p)) {
			p = scan_quote(conf, p);
			continue;
		}
		if (IS_ESC(conf, *p)) {
			p = scan_esc(conf, p);
			continue;
		}
		if (IS_EOF(conf, *p))
			return;
		else
			p++;
	}
}

static int
str_copy(CONF *conf, char *section, char **pto, char *from)
{
	int q, r,rr = 0, to = 0, len = 0;
	char *s, *e, *rp, *p, *rrp, *np, *cp, v;
	BUF_MEM *buf;

	if ((buf = BUF_MEM_new()) == NULL)
		return (0);

	len = strlen(from) + 1;
	if (!BUF_MEM_grow(buf, len))
		goto err;

	for (;;) {
		if (IS_QUOTE(conf, *from)) {
			q = *from;
			from++;
			while (!IS_EOF(conf, *from) && (*from != q)) {
				if (IS_ESC(conf, *from)) {
					from++;
					if (IS_EOF(conf, *from))
						break;
				}
				buf->data[to++] = *(from++);
			}
			if (*from == q)
				from++;
		} else if (IS_DQUOTE(conf, *from)) {
			q = *from;
			from++;
			while (!IS_EOF(conf, *from)) {
				if (*from == q) {
					if (*(from + 1) == q) {
						from++;
					} else {
						break;
					}
				}
				buf->data[to++] = *(from++);
			}
			if (*from == q)
				from++;
		} else if (IS_ESC(conf, *from)) {
			from++;
			v = *(from++);
			if (IS_EOF(conf, v))
				break;
			else if (v == 'r')
				v = '\r';
			else if (v == 'n')
				v = '\n';
			else if (v == 'b')
				v = '\b';
			else if (v == 't')
				v = '\t';
			buf->data[to++] = v;
		} else if (IS_EOF(conf, *from))
			break;
		else if (*from == '$') {
			/* try to expand it */
			rrp = NULL;
			s = &(from[1]);
			if (*s == '{')
				q = '}';
			else if (*s == '(')
				q = ')';
			else
				q = 0;

			if (q)
				s++;
			cp = section;
			e = np = s;
			while (IS_ALPHA_NUMERIC(conf, *e))
				e++;
			if ((e[0] == ':') && (e[1] == ':')) {
				cp = np;
				rrp = e;
				rr = *e;
				*rrp = '\0';
				e += 2;
				np = e;
				while (IS_ALPHA_NUMERIC(conf, *e))
					e++;
			}
			r = *e;
			*e = '\0';
			rp = e;
			if (q) {
				if (r != q) {
					CONFerr(CONF_F_STR_COPY,
					    CONF_R_NO_CLOSE_BRACE);
					goto err;
				}
				e++;
			}
			/* So at this point we have
			 * np which is the start of the name string which is
			 *   '\0' terminated.
			 * cp which is the start of the section string which is
			 *   '\0' terminated.
			 * e is the 'next point after'.
			 * r and rr are the chars replaced by the '\0'
			 * rp and rrp is where 'r' and 'rr' came from.
			 */
			p = _CONF_get_string(conf, cp, np);
			if (rrp != NULL)
				*rrp = rr;
			*rp = r;
			if (p == NULL) {
				CONFerr(CONF_F_STR_COPY,
				    CONF_R_VARIABLE_HAS_NO_VALUE);
				goto err;
			}
			if (!BUF_MEM_grow_clean(buf,
				(strlen(p) + buf->length - (e - from)))) {
				CONFerr(CONF_F_STR_COPY,
				    CONF_R_MODULE_INITIALIZATION_ERROR);
				goto err;
			}
			while (*p)
				buf->data[to++] = *(p++);

			/* Since we change the pointer 'from', we also have
			   to change the perceived length of the string it
			   points at.  /RL */
			len -= e - from;
			from = e;

			/* In case there were no braces or parenthesis around
			   the variable reference, we have to put back the
			   character that was replaced with a '\0'.  /RL */
			*rp = r;
		} else
			buf->data[to++] = *(from++);
	}
	buf->data[to]='\0';
	free(*pto);
	*pto = buf->data;
	free(buf);
	return (1);

err:
	if (buf != NULL)
		BUF_MEM_free(buf);
	return (0);
}

static char *
eat_ws(CONF *conf, char *p)
{
	while (IS_WS(conf, *p) && (!IS_EOF(conf, *p)))
		p++;
	return (p);
}

static char *
eat_alpha_numeric(CONF *conf, char *p)
{
	for (;;) {
		if (IS_ESC(conf, *p)) {
			p = scan_esc(conf, p);
			continue;
		}
		if (!IS_ALPHA_NUMERIC_PUNCT(conf, *p))
			return (p);
		p++;
	}
}

static char *
scan_quote(CONF *conf, char *p)
{
	int q = *p;

	p++;
	while (!(IS_EOF(conf, *p)) && (*p != q)) {
		if (IS_ESC(conf, *p)) {
			p++;
			if (IS_EOF(conf, *p))
				return (p);
		}
		p++;
	}
	if (*p == q)
		p++;
	return (p);
}


static char *
scan_dquote(CONF *conf, char *p)
{
	int q = *p;

	p++;
	while (!(IS_EOF(conf, *p))) {
		if (*p == q) {
			if (*(p + 1) == q) {
				p++;
			} else {
				break;
			}
		}
		p++;
	}
	if (*p == q)
		p++;
	return (p);
}

static void
dump_value_doall_arg(CONF_VALUE *a, BIO *out)
{
	if (a->name)
		BIO_printf(out, "[%s] %s=%s\n", a->section, a->name, a->value);
	else
		BIO_printf(out, "[[%s]]\n", a->section);
}

static IMPLEMENT_LHASH_DOALL_ARG_FN(dump_value, CONF_VALUE, BIO)

static int
def_dump(const CONF *conf, BIO *out)
{
	lh_CONF_VALUE_doall_arg(conf->data, LHASH_DOALL_ARG_FN(dump_value),
	    BIO, out);
	return 1;
}

static int
def_is_number(const CONF *conf, char c)
{
	return IS_NUMBER(conf, c);
}

static int
def_to_int(const CONF *conf, char c)
{
	return c - '0';
}
@


1.31
log
@Coverity 21651
ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: conf_def.c,v 1.30 2015/04/30 15:28:03 deraadt Exp $ */
@


1.30
log
@use strdup() to init string
ok doug millert
@
text
@d1 1
a1 1
/* $OpenBSD: conf_def.c,v 1.29 2015/02/07 13:19:15 doug Exp $ */
d576 6
a581 2
			BUF_MEM_grow_clean(buf,
			    (strlen(p) + buf->length - (e - from)));
@


1.29
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: conf_def.c,v 1.28 2014/07/11 15:38:03 miod Exp $ */
d231 1
a231 1
	section = malloc(10);
a235 1
	strlcpy(section, "default",10);
@


1.28
log
@Prevent infinite loop during configuration file parsing; OpenSSL PR #2985
via OpenSSL trunk.
@
text
@d1 1
a1 1
/* $OpenBSD: conf_def.c,v 1.27 2014/07/11 08:44:48 jsing Exp $ */
d391 1
a391 1
#if 1
a396 15
#else
			v->section = tv->section;
			if (!sk_CONF_VALUE_push(ts, v)) {
				CONFerr(CONF_F_DEF_LOAD_BIO,
				    ERR_R_MALLOC_FAILURE);
				goto err;
			}
			vv = (CONF_VALUE *)lh_insert(conf->data, v);
			if (vv != NULL) {
				sk_CONF_VALUE_delete_ptr(ts, vv);
				free(vv->name);
				free(vv->value);
				free(vv);
			}
#endif
@


1.27
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: conf_def.c,v 1.26 2014/07/09 11:10:50 bcook Exp $ */
d316 1
a316 1
				if (*p != '\0') {
@


1.26
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: conf_def.c,v 1.25 2014/07/08 16:36:45 bcook Exp $ */
d63 2
a64 3
#include "cryptlib.h"
#include <openssl/stack.h>
#include <openssl/lhash.h>
d67 4
a71 2
#include <openssl/buffer.h>
#include <openssl/err.h>
@


1.25
log
@replace malloc(strlen())/strlcpy with strdup

ok beck@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: conf_def.c,v 1.24 2014/06/12 15:49:28 deraadt Exp $ */
a89 2

const char CONF_def_version[]="CONF_def" OPENSSL_VERSION_PTEXT;
@


1.24
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d371 1
a371 1
			v->name = malloc(strlen(pname) + 1);
a377 1
			strlcpy(v->name, pname, strlen(pname) + 1);
@


1.23
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/conf/conf.c */
@


1.22
log
@more: no need for null check before free
ok tedu guenther
@
text
@d232 1
a232 1
	section = (char *)malloc(10);
d364 1
a364 1
			if (!(v = (CONF_VALUE *)malloc(sizeof(CONF_VALUE)))) {
d371 1
a371 1
			v->name = (char *)malloc(strlen(pname) + 1);
@


1.21
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d419 1
a419 2
	if (section != NULL)
		free(section);
d425 1
a425 2
	if (section != NULL)
		free(section);
d434 3
a436 6
		if (v->name != NULL)
			free(v->name);
		if (v->value != NULL)
			free(v->value);
		if (v != NULL)
			free(v);
d613 1
a613 2
	if (*pto != NULL)
		free(*pto);
@


1.20
log
@Put explicit (void) in function declarations and shuffle keywords in some
declaration to pass -Wextra, should we want to add it to CFLAGS.
No binary change.
@
text
@d94 10
a103 10
	"OpenSSL default",
	def_create,
	def_init_default,
	def_destroy,
	def_destroy_data,
	def_load_bio,
	def_dump,
	def_is_number,
	def_to_int,
	def_load
@


1.19
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d120 1
a120 1
NCONF_default()
d126 1
a126 1
NCONF_WIN32()
@


1.18
log
@KNF.
@
text
@a220 1
	char btmp[DECIMAL_SIZE(eline) + 1];
d430 1
a430 2
	snprintf(btmp, sizeof btmp, "%ld", eline);
	ERR_add_error_data(2, "line ", btmp);
@


1.17
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d75 1
a75 1
static int str_copy(CONF *conf,char *section,char **to, char *from);
d104 1
a104 1
	};
d117 1
a117 1
	};
d119 3
a121 2
CONF_METHOD *NCONF_default()
	{
d123 5
a127 3
	}
CONF_METHOD *NCONF_WIN32()
	{
d129 1
a129 1
	}
d131 3
a133 2
static CONF *def_create(CONF_METHOD *meth)
	{
d138 1
a138 2
		if (meth->init(ret) == 0)
			{
d141 1
a141 1
			}
d143 5
a147 4
	}
	
static int def_init_default(CONF *conf)
	{
d156 1
a156 1
	}
d158 3
a160 2
static int def_init_WIN32(CONF *conf)
	{
d169 1
a169 1
	}
d171 4
a174 4
static int def_destroy(CONF *conf)
	{
	if (def_destroy_data(conf))
		{
d177 1
a177 1
		}
d179 1
a179 1
	}
d181 3
a183 2
static int def_destroy_data(CONF *conf)
	{
d188 1
a188 1
	}
d190 3
a192 2
static int def_load(CONF *conf, const char *name, long *line)
	{
d194 1
a194 1
	BIO *in=NULL;
d196 2
a197 3
	in=BIO_new_file(name, "rb");
	if (in == NULL)
		{
d199 1
a199 1
			CONFerr(CONF_F_DEF_LOAD,CONF_R_NO_SUCH_FILE);
d201 1
a201 1
			CONFerr(CONF_F_DEF_LOAD,ERR_R_SYS_LIB);
d203 1
a203 1
		}
d209 1
a209 1
	}
d211 3
a213 2
static int def_load_bio(CONF *conf, BIO *in, long *line)
	{
d216 3
a218 3
	int bufnum=0,i,ii;
	BUF_MEM *buff=NULL;
	char *s,*p,*end;
d220 6
a225 6
	long eline=0;
	char btmp[DECIMAL_SIZE(eline)+1];
	CONF_VALUE *v=NULL,*tv;
	CONF_VALUE *sv=NULL;
	char *section=NULL,*buf;
	char *start,*psection,*pname;
d228 2
a229 3
	if ((buff=BUF_MEM_new()) == NULL)
		{
		CONFerr(CONF_F_DEF_LOAD_BIO,ERR_R_BUF_LIB);
d231 1
a231 1
		}
d233 3
a235 4
	section=(char *)malloc(10);
	if (section == NULL)
		{
		CONFerr(CONF_F_DEF_LOAD_BIO,ERR_R_MALLOC_FAILURE);
d237 2
a238 2
		}
	strlcpy(section,"default",10);
d240 2
a241 3
	if (_CONF_new_data(conf) == 0)
		{
		CONFerr(CONF_F_DEF_LOAD_BIO,ERR_R_MALLOC_FAILURE);
d243 1
a243 1
		}
d245 2
a246 3
	sv=_CONF_new_section(conf,section);
	if (sv == NULL)
		{
d248 1
a248 1
					CONF_R_UNABLE_TO_CREATE_NEW_SECTION);
d250 1
a250 1
		}
d252 5
a256 7
	bufnum=0;
	again=0;
	for (;;)
		{
		if (!BUF_MEM_grow(buff,bufnum+CONFBUFSIZE))
			{
			CONFerr(CONF_F_DEF_LOAD_BIO,ERR_R_BUF_LIB);
d258 11
a268 11
			}
		p= &(buff->data[bufnum]);
		*p='\0';
		BIO_gets(in, p, CONFBUFSIZE-1);
		p[CONFBUFSIZE-1]='\0';
		ii=i=strlen(p);
		if (i == 0 && !again) break;
		again=0;
		while (i > 0)
			{
			if ((p[i-1] != '\r') && (p[i-1] != '\n'))
d272 1
a272 1
			}
d276 3
a278 4
			again=1; /* long line */
		else
			{
			p[i]='\0';
d280 1
a280 1
			}
d285 1
a285 1
		bufnum+=i;
d287 1
a287 1
		v=NULL;
d289 1
a289 2
		if (bufnum >= 1)
			{
d292 3
a294 4
			p= &(buff->data[bufnum-1]);
			if (IS_ESC(conf,p[0]) &&
				((bufnum <= 1) || !IS_ESC(conf,p[-1])))
				{
d296 1
a296 2
				again=1;
				}
d298 5
a302 3
		if (again) continue;
		bufnum=0;
		buf=buff->data;
d305 4
a308 4
		s=eat_ws(conf, buf);
		if (IS_EOF(conf,*s)) continue; /* blank line */
		if (*s == '[')
			{
d312 2
a313 2
			start=eat_ws(conf, s);
			ss=start;
d315 5
a319 7
			end=eat_alpha_numeric(conf, ss);
			p=eat_ws(conf, end);
			if (*p != ']')
				{
				if (*p != '\0')
					{
					ss=p;
d321 1
a321 1
					}
d323 5
a327 1
					CONF_R_MISSING_CLOSE_SQUARE_BRACKET);
d329 3
a331 7
				}
			*end='\0';
			if (!str_copy(conf,NULL,&section,start)) goto err;
			if ((sv=_CONF_get_section(conf,section)) == NULL)
				sv=_CONF_new_section(conf,section);
			if (sv == NULL)
				{
d333 1
a333 1
					CONF_R_UNABLE_TO_CREATE_NEW_SECTION);
d335 1
a335 1
				}
d337 10
d348 2
a349 16
		else
			{
			pname=s;
			psection=NULL;
			end=eat_alpha_numeric(conf, s);
			if ((end[0] == ':') && (end[1] == ':'))
				{
				*end='\0';
				end+=2;
				psection=pname;
				pname=end;
				end=eat_alpha_numeric(conf, end);
				}
			p=eat_ws(conf, end);
			if (*p != '=')
				{
d351 1
a351 1
						CONF_R_MISSING_EQUAL_SIGN);
d353 2
a354 2
				}
			*end='\0';
d356 2
a357 2
			start=eat_ws(conf, p);
			while (!IS_EOF(conf,*p))
d360 1
a360 1
			while ((p != start) && (IS_WS(conf,*p)))
d363 1
a363 1
			*p='\0';
d365 1
a365 2
			if (!(v=(CONF_VALUE *)malloc(sizeof(CONF_VALUE))))
				{
d367 1
a367 1
							ERR_R_MALLOC_FAILURE);
d369 6
a374 6
				}
			if (psection == NULL) psection=section;
			v->name=(char *)malloc(strlen(pname)+1);
			v->value=NULL;
			if (v->name == NULL)
				{
d376 5
a380 1
							ERR_R_MALLOC_FAILURE);
a381 3
				}
			strlcpy(v->name,pname,strlen(pname)+1);
			if (!str_copy(conf,psection,&(v->value),start)) goto err;
d383 2
a384 3
			if (strcmp(psection,section) != 0)
				{
				if ((tv=_CONF_get_section(conf,psection))
d386 2
a387 3
					tv=_CONF_new_section(conf,psection);
				if (tv == NULL)
					{
d389 1
a389 1
					   CONF_R_UNABLE_TO_CREATE_NEW_SECTION);
a390 1
					}
d392 2
a393 2
			else
				tv=sv;
d395 1
a395 2
			if (_CONF_add_string(conf, tv, v) == 0)
				{
d397 1
a397 1
							ERR_R_MALLOC_FAILURE);
d399 1
a399 1
				}
d401 2
a402 3
			v->section=tv->section;	
			if (!sk_CONF_VALUE_push(ts,v))
				{
d404 1
a404 1
							ERR_R_MALLOC_FAILURE);
d406 4
a409 5
				}
			vv=(CONF_VALUE *)lh_insert(conf->data,v);
			if (vv != NULL)
				{
				sk_CONF_VALUE_delete_ptr(ts,vv);
d413 1
a413 1
				}
d415 1
a415 2
			v=NULL;
			}
d417 7
a423 3
	if (buff != NULL) BUF_MEM_free(buff);
	if (section != NULL) free(section);
	return(1);
d425 9
a433 7
	if (buff != NULL) BUF_MEM_free(buff);
	if (section != NULL) free(section);
	if (line != NULL) *line=eline;
	snprintf(btmp,sizeof btmp,"%ld",eline);
	ERR_add_error_data(2,"line ",btmp);
	if ((h != conf->data) && (conf->data != NULL))
		{
d435 20
a454 1
		conf->data=NULL;
d456 1
a456 20
	if (v != NULL)
		{
		if (v->name != NULL) free(v->name);
		if (v->value != NULL) free(v->value);
		if (v != NULL) free(v);
		}
	return(0);
	}

static void clear_comments(CONF *conf, char *p)
	{
	for (;;)
		{
		if (IS_FCOMMENT(conf,*p))
			{
			*p='\0';
			return;
			}
		if (!IS_WS(conf,*p))
			{
d458 1
a458 1
			}
d460 1
a460 1
		}
d462 3
a464 5
	for (;;)
		{
		if (IS_COMMENT(conf,*p))
			{
			*p='\0';
d466 3
a468 4
			}
		if (IS_DQUOTE(conf,*p))
			{
			p=scan_dquote(conf, p);
d470 3
a472 4
			}
		if (IS_QUOTE(conf,*p))
			{
			p=scan_quote(conf, p);
d474 3
a476 4
			}
		if (IS_ESC(conf,*p))
			{
			p=scan_esc(conf,p);
d478 2
a479 2
			}
		if (IS_EOF(conf,*p))
a482 1
		}
d484 1
d486 5
a490 4
static int str_copy(CONF *conf, char *section, char **pto, char *from)
	{
	int q,r,rr=0,to=0,len=0;
	char *s,*e,*rp,*p,*rrp,*np,*cp,v;
d493 2
a494 1
	if ((buf=BUF_MEM_new()) == NULL) return(0);
d496 3
a498 2
	len=strlen(from)+1;
	if (!BUF_MEM_grow(buf,len)) goto err;
d500 3
a502 5
	for (;;)
		{
		if (IS_QUOTE(conf,*from))
			{
			q= *from;
d504 2
a505 4
			while (!IS_EOF(conf,*from) && (*from != q))
				{
				if (IS_ESC(conf,*from))
					{
d507 2
a508 3
					if (IS_EOF(conf,*from)) break;
					}
				buf->data[to++]= *(from++);
d510 1
a510 1
			if (*from == q) from++;
d512 4
a515 3
		else if (IS_DQUOTE(conf,*from))
			{
			q= *from;
d517 3
a519 6
			while (!IS_EOF(conf,*from))
				{
				if (*from == q)
					{
					if (*(from+1) == q)
						{
d521 1
a521 3
						}
					else
						{
a522 1
						}
a523 1
				buf->data[to++]= *(from++);
d525 1
a525 1
			if (*from == q) from++;
d527 3
a529 2
		else if (IS_ESC(conf,*from))
			{
d531 13
a543 9
			v= *(from++);
			if (IS_EOF(conf,v)) break;
			else if (v == 'r') v='\r';
			else if (v == 'n') v='\n';
			else if (v == 'b') v='\b';
			else if (v == 't') v='\t';
			buf->data[to++]= v;
			}
		else if (IS_EOF(conf,*from))
d545 1
a545 2
		else if (*from == '$')
			{
d547 2
a548 2
			rrp=NULL;
			s= &(from[1]);
d550 1
a550 1
				q='}';
d552 3
a554 2
				q=')';
			else q=0;
d556 5
a560 4
			if (q) s++;
			cp=section;
			e=np=s;
			while (IS_ALPHA_NUMERIC(conf,*e))
d562 8
a569 9
			if ((e[0] == ':') && (e[1] == ':'))
				{
				cp=np;
				rrp=e;
				rr= *e;
				*rrp='\0';
				e+=2;
				np=e;
				while (IS_ALPHA_NUMERIC(conf,*e))
d571 9
a580 10
			r= *e;
			*e='\0';
			rp=e;
			if (q)
				{
				if (r != q)
					{
					CONFerr(CONF_F_STR_COPY,CONF_R_NO_CLOSE_BRACE);
					goto err;
					}
d582 1
a582 1
				}
d585 1
a585 1
			 *   '\0' terminated. 
d592 7
a598 6
			p=_CONF_get_string(conf,cp,np);
			if (rrp != NULL) *rrp=rr;
			*rp=r;
			if (p == NULL)
				{
				CONFerr(CONF_F_STR_COPY,CONF_R_VARIABLE_HAS_NO_VALUE);
d600 3
a602 2
				}
			BUF_MEM_grow_clean(buf,(strlen(p)+buf->length-(e-from)));
d604 1
a604 1
				buf->data[to++]= *(p++);
d609 2
a610 2
			len -= e-from;
			from=e;
d616 3
a618 4
			}
		else
			buf->data[to++]= *(from++);
		}
d620 3
a622 2
	if (*pto != NULL) free(*pto);
	*pto=buf->data;
d624 2
a625 1
	return(1);
d627 9
a635 7
	if (buf != NULL) BUF_MEM_free(buf);
	return(0);
	}

static char *eat_ws(CONF *conf, char *p)
	{
	while (IS_WS(conf,*p) && (!IS_EOF(conf,*p)))
d637 2
a638 2
	return(p);
	}
d640 6
a645 7
static char *eat_alpha_numeric(CONF *conf, char *p)
	{
	for (;;)
		{
		if (IS_ESC(conf,*p))
			{
			p=scan_esc(conf,p);
d647 3
a649 3
			}
		if (!IS_ALPHA_NUMERIC_PUNCT(conf,*p))
			return(p);
a650 1
		}
d652 1
d654 4
a657 3
static char *scan_quote(CONF *conf, char *p)
	{
	int q= *p;
d660 2
a661 4
	while (!(IS_EOF(conf,*p)) && (*p != q))
		{
		if (IS_ESC(conf,*p))
			{
d663 3
a665 2
			if (IS_EOF(conf,*p)) return(p);
			}
a666 3
		}
	if (*p == q) p++;
	return(p);
d668 4
d674 4
a677 3
static char *scan_dquote(CONF *conf, char *p)
	{
	int q= *p;
d680 3
a682 6
	while (!(IS_EOF(conf,*p)))
		{
		if (*p == q)
			{
			if (*(p+1) == q)
				{
d684 1
a684 3
				}
			else
				{
a685 1
				}
d687 1
a688 3
		}
	if (*p == q) p++;
	return(p);
d690 4
d695 3
a697 2
static void dump_value_doall_arg(CONF_VALUE *a, BIO *out)
	{
d702 1
a702 1
	}
d706 3
a708 2
static int def_dump(const CONF *conf, BIO *out)
	{
d710 1
a710 1
				BIO, out);
d712 1
a712 1
	}
d714 9
a722 7
static int def_is_number(const CONF *conf, char c)
	{
	return IS_NUMBER(conf,c);
	}

static int def_to_int(const CONF *conf, char c)
	{
d724 1
a724 2
	}

@


1.16
log
@use intrinsic strlcpy and strlcat everywhere so we only have one set of
funcitons to check for incorrect use. keep BUF_strlcpy and BUF_strlcat
for API comptibility only.
ok tedu@@
@
text
@d438 1
a438 1
	(void) snprintf(btmp,sizeof btmp,"%ld",eline);
@


1.15
log
@
more spring VMS cleanup
ok miod@@ lteo@@
@
text
@d233 1
a233 1
	BUF_strlcpy(section,"default",10);
d387 1
a387 1
			BUF_strlcpy(v->name,pname,strlen(pname)+1);
@


1.14
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a188 3
#ifdef OPENSSL_SYS_VMS
	in=BIO_new_file(name, "r");
#else
a189 1
#endif
@


1.13
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d132 1
a132 1
	ret = OPENSSL_malloc(sizeof(CONF) + sizeof(unsigned short *));
d136 1
a136 1
			OPENSSL_free(ret);
d170 1
a170 1
		OPENSSL_free(conf);
d231 1
a231 1
	section=(char *)OPENSSL_malloc(10);
d376 1
a376 1
			if (!(v=(CONF_VALUE *)OPENSSL_malloc(sizeof(CONF_VALUE))))
d383 1
a383 1
			v->name=(char *)OPENSSL_malloc(strlen(pname)+1);
d427 3
a429 3
				OPENSSL_free(vv->name);
				OPENSSL_free(vv->value);
				OPENSSL_free(vv);
d436 1
a436 1
	if (section != NULL) OPENSSL_free(section);
d440 1
a440 1
	if (section != NULL) OPENSSL_free(section);
d451 3
a453 3
		if (v->name != NULL) OPENSSL_free(v->name);
		if (v->value != NULL) OPENSSL_free(v->value);
		if (v != NULL) OPENSSL_free(v);
d640 1
a640 1
	if (*pto != NULL) OPENSSL_free(*pto);
d642 1
a642 1
	OPENSSL_free(buf);
@


1.12
log
@openssl-1.0.0e: resolve conflicts
@
text
@d442 1
a442 1
	BIO_snprintf(btmp,sizeof btmp,"%ld",eline);
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d216 1
a216 1
	int again,n;
a221 1
	STACK_OF(CONF_VALUE) *section_sk=NULL,*ts;
a251 1
	section_sk=(STACK_OF(CONF_VALUE) *)sv->value;
a309 1
		n=strlen(buf);
a342 1
			section_sk=(STACK_OF(CONF_VALUE) *)sv->value;
a404 1
				ts=(STACK_OF(CONF_VALUE) *)tv->value;
a406 1
				{
a407 2
				ts=section_sk;
				}
a459 3
	char *to;

	to=p;
@


1.10
log
@resolve conflicts
@
text
@d132 1
a132 1
	ret = (CONF *)OPENSSL_malloc(sizeof(CONF) + sizeof(unsigned short *));
d148 1
a148 1
	conf->meth_data = (void *)CONF_type_default;
d725 1
a725 1
static void dump_value(CONF_VALUE *a, BIO *out)
d733 1
a733 1
static IMPLEMENT_LHASH_DOALL_ARG_FN(dump_value, CONF_VALUE *, BIO *)
d737 2
a738 1
	lh_doall_arg(conf->data, LHASH_DOALL_ARG_FN(dump_value), out);
@


1.9
log
@resolve conflicts
@
text
@d63 1
a70 1
#include "cryptlib.h"
d91 1
a91 1
const char *CONF_def_version="CONF_def" OPENSSL_VERSION_PTEXT;
d197 1
a197 1
			CONFerr(CONF_F_CONF_LOAD,CONF_R_NO_SUCH_FILE);
d199 1
a199 1
			CONFerr(CONF_F_CONF_LOAD,ERR_R_SYS_LIB);
d228 1
a228 1
		CONFerr(CONF_F_CONF_LOAD_BIO,ERR_R_BUF_LIB);
d235 1
a235 1
		CONFerr(CONF_F_CONF_LOAD_BIO,ERR_R_MALLOC_FAILURE);
d242 1
a242 1
		CONFerr(CONF_F_CONF_LOAD_BIO,ERR_R_MALLOC_FAILURE);
d249 1
a249 1
		CONFerr(CONF_F_CONF_LOAD_BIO,
d261 1
a261 1
			CONFerr(CONF_F_CONF_LOAD_BIO,ERR_R_BUF_LIB);
d332 1
a332 1
				CONFerr(CONF_F_CONF_LOAD_BIO,
d342 1
a342 1
				CONFerr(CONF_F_CONF_LOAD_BIO,
d365 1
a365 1
				CONFerr(CONF_F_CONF_LOAD_BIO,
d382 1
a382 1
				CONFerr(CONF_F_CONF_LOAD_BIO,
d391 1
a391 1
				CONFerr(CONF_F_CONF_LOAD_BIO,
d405 1
a405 1
					CONFerr(CONF_F_CONF_LOAD_BIO,
d419 1
a419 1
				CONFerr(CONF_F_CONF_LOAD_BIO,
d427 1
a427 1
				CONFerr(CONF_F_CONF_LOAD_BIO,
d632 1
a632 1
			BUF_MEM_grow_clean(buf,(strlen(p)+len-(e-from)));
@


1.8
log
@resolve conflicts
@
text
@d616 1
a616 1
			 * ns which is the start of the name string which is
d618 1
a618 1
			 * cs which is the start of the section string which is
d621 2
a622 2
			 * r and s are the chars replaced by the '\0'
			 * rp and sp is where 'r' and 's' came from.
d641 5
@


1.7
log
@merge 0.9.7d
@
text
@d635 5
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d238 1
a238 1
	strlcpy(section,"default",10);
d395 1
a395 1
			strlcpy(v->name,pname,strlen(pname)+1);
d450 1
a450 1
	snprintf(btmp,sizeof btmp,"%ld",eline);
@


1.5
log
@Trivial sprintf() -> snprintf() changes. ok deraadt@@
@
text
@d211 2
a212 1
#define BUFSIZE	512
d256 1
d259 1
a259 2
		again=0;
		if (!BUF_MEM_grow(buff,bufnum+BUFSIZE))
d266 2
a267 2
		BIO_gets(in, p, BUFSIZE-1);
		p[BUFSIZE-1]='\0';
d269 2
a270 1
		if (i == 0) break;
d280 1
a280 1
		if (i == ii)
d632 1
a632 1
			BUF_MEM_grow(buf,(strlen(p)+len-(e-from)));
@


1.4
log
@Less strcpy/strcat/sprintf. tdeval@@ ok.
@
text
@d448 1
a448 1
	sprintf(btmp,"%ld",eline);
@


1.3
log
@apply patches from OpenSSL Security Advisory [30 July 2002],
http://marc.theaimsgroup.com/?l=openssl-dev&m=102802395104110&w=2
@
text
@d237 1
a237 1
	strcpy(section,"default");
d393 1
a393 1
			strcpy(v->name,pname);
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d70 1
a211 1
	char btmp[16];
d217 1
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d84 5
a88 4
static int def_load(CONF *conf, BIO *bp, long *eline);
static int def_dump(CONF *conf, BIO *bp);
static int def_is_number(CONF *conf, char c);
static int def_to_int(CONF *conf, char c);
d98 1
a98 1
	def_load,
d101 2
a102 1
	def_to_int
d111 1
a111 1
	def_load,
d114 2
a115 1
	def_to_int
d183 26
a208 1
static int def_load(CONF *conf, BIO *in, long *line)
d449 5
a453 1
	if ((h != conf->data) && (conf->data != NULL)) CONF_free(conf->data);
d720 3
a722 1
static int def_dump(CONF *conf, BIO *out)
d724 1
a724 1
	lh_doall_arg(conf->data, (void (*)())dump_value, out);
d728 1
a728 1
static int def_is_number(CONF *conf, char c)
d733 1
a733 1
static int def_to_int(CONF *conf, char c)
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d84 4
a87 5
static int def_load(CONF *conf, const char *name, long *eline);
static int def_load_bio(CONF *conf, BIO *bp, long *eline);
static int def_dump(const CONF *conf, BIO *bp);
static int def_is_number(const CONF *conf, char c);
static int def_to_int(const CONF *conf, char c);
d97 1
a97 1
	def_load_bio,
d100 1
a100 2
	def_to_int,
	def_load
d109 1
a109 1
	def_load_bio,
d112 1
a112 2
	def_to_int,
	def_load
d180 1
a180 26
static int def_load(CONF *conf, const char *name, long *line)
	{
	int ret;
	BIO *in=NULL;

#ifdef OPENSSL_SYS_VMS
	in=BIO_new_file(name, "r");
#else
	in=BIO_new_file(name, "rb");
#endif
	if (in == NULL)
		{
		if (ERR_GET_REASON(ERR_peek_last_error()) == BIO_R_NO_SUCH_FILE)
			CONFerr(CONF_F_CONF_LOAD,CONF_R_NO_SUCH_FILE);
		else
			CONFerr(CONF_F_CONF_LOAD,ERR_R_SYS_LIB);
		return 0;
		}

	ret = def_load_bio(conf, in, line);
	BIO_free(in);

	return ret;
	}

static int def_load_bio(CONF *conf, BIO *in, long *line)
d421 1
a421 5
	if ((h != conf->data) && (conf->data != NULL))
		{
		CONF_free(conf->data);
		conf->data=NULL;
		}
d688 1
a688 3
static IMPLEMENT_LHASH_DOALL_ARG_FN(dump_value, CONF_VALUE *, BIO *)

static int def_dump(const CONF *conf, BIO *out)
d690 1
a690 1
	lh_doall_arg(conf->data, LHASH_DOALL_ARG_FN(dump_value), out);
d694 1
a694 1
static int def_is_number(const CONF *conf, char c)
d699 1
a699 1
static int def_to_int(const CONF *conf, char c)
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@a69 1
#include "cryptlib.h"
d211 1
a216 1
	char btmp[DECIMAL_SIZE(eline)+1];
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d211 1
a211 2
/* The macro BUFSIZE conflicts with a system macro in VxWorks */
#define CONFBUFSIZE	512
a254 1
	again=0;
d257 2
a258 1
		if (!BUF_MEM_grow(buff,bufnum+CONFBUFSIZE))
d265 2
a266 2
		BIO_gets(in, p, CONFBUFSIZE-1);
		p[CONFBUFSIZE-1]='\0';
d268 1
a268 2
		if (i == 0 && !again) break;
		again=0;
d278 1
a278 1
		if (ii && i == ii)
d630 1
a630 1
			BUF_MEM_grow_clean(buf,(strlen(p)+len-(e-from)));
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@d238 1
a238 1
	BUF_strlcpy(section,"default",10);
d395 1
a395 1
			BUF_strlcpy(v->name,pname,strlen(pname)+1);
d450 1
a450 1
	BIO_snprintf(btmp,sizeof btmp,"%ld",eline);
@


1.1.1.5
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a634 5

			/* Since we change the pointer 'from', we also have
			   to change the perceived length of the string it
			   points at.  /RL */
			len -= e-from;
@


1.1.1.6
log
@import of openssl-0.9.7j
@
text
@d616 1
a616 1
			 * np which is the start of the name string which is
d618 1
a618 1
			 * cp which is the start of the section string which is
d621 2
a622 2
			 * r and rr are the chars replaced by the '\0'
			 * rp and rrp is where 'r' and 'rr' came from.
a640 5

			/* In case there were no braces or parenthesis around
			   the variable reference, we have to put back the
			   character that was replaced with a '\0'.  /RL */
			*rp = r;
@


1.1.1.7
log
@import of OpenSSL 0.9.8h
@
text
@a62 1
#include "cryptlib.h"
d70 1
d91 1
a91 1
const char CONF_def_version[]="CONF_def" OPENSSL_VERSION_PTEXT;
d197 1
a197 1
			CONFerr(CONF_F_DEF_LOAD,CONF_R_NO_SUCH_FILE);
d199 1
a199 1
			CONFerr(CONF_F_DEF_LOAD,ERR_R_SYS_LIB);
d228 1
a228 1
		CONFerr(CONF_F_DEF_LOAD_BIO,ERR_R_BUF_LIB);
d235 1
a235 1
		CONFerr(CONF_F_DEF_LOAD_BIO,ERR_R_MALLOC_FAILURE);
d242 1
a242 1
		CONFerr(CONF_F_DEF_LOAD_BIO,ERR_R_MALLOC_FAILURE);
d249 1
a249 1
		CONFerr(CONF_F_DEF_LOAD_BIO,
d261 1
a261 1
			CONFerr(CONF_F_DEF_LOAD_BIO,ERR_R_BUF_LIB);
d332 1
a332 1
				CONFerr(CONF_F_DEF_LOAD_BIO,
d342 1
a342 1
				CONFerr(CONF_F_DEF_LOAD_BIO,
d365 1
a365 1
				CONFerr(CONF_F_DEF_LOAD_BIO,
d382 1
a382 1
				CONFerr(CONF_F_DEF_LOAD_BIO,
d391 1
a391 1
				CONFerr(CONF_F_DEF_LOAD_BIO,
d405 1
a405 1
					CONFerr(CONF_F_DEF_LOAD_BIO,
d419 1
a419 1
				CONFerr(CONF_F_DEF_LOAD_BIO,
d427 1
a427 1
				CONFerr(CONF_F_DEF_LOAD_BIO,
d632 1
a632 1
			BUF_MEM_grow_clean(buf,(strlen(p)+buf->length-(e-from)));
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@d132 1
a132 1
	ret = OPENSSL_malloc(sizeof(CONF) + sizeof(unsigned short *));
d148 1
a148 1
	conf->meth_data = CONF_type_default;
d725 1
a725 1
static void dump_value_doall_arg(CONF_VALUE *a, BIO *out)
d733 1
a733 1
static IMPLEMENT_LHASH_DOALL_ARG_FN(dump_value, CONF_VALUE, BIO)
d737 1
a737 2
	lh_CONF_VALUE_doall_arg(conf->data, LHASH_DOALL_ARG_FN(dump_value),
				BIO, out);
@


1.1.1.9
log
@import OpenSSL 1.0.0e
@
text
@d216 1
a216 1
	int again;
d222 1
d253 1
d312 1
d346 1
d409 1
d412 1
d414 2
d468 3
@


1.1.6.1
log
@Pull in patch from current:
Fix (markus), errata 013:
apply patches from OpenSSL Security Advisory [30 July 2002],
http://marc.theaimsgroup.com/?l=openssl-dev&m=102802395104110&w=2
@
text
@a69 1
#include "cryptlib.h"
d183 1
a188 1
	char btmp[DECIMAL_SIZE(eline)+1];
@


1.1.4.1
log
@Errata #030 (markus):
Fixes for the "OpenSSL Security Advisory [30 July 2002]"
@
text
@a69 1
#include "cryptlib.h"
d183 1
a188 1
	char btmp[DECIMAL_SIZE(eline)+1];
@


