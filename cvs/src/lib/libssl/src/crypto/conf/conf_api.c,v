head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.4
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	butholakala:1.5
	openssl_1_0_1_g:1.1.1.4
	OPENBSD_5_5:1.5.0.12
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.26
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.24
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.22
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.20
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.18
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.1.0.6
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.04.11.16.03.21;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	WnYuC1gPCzN02uAn;

1.14
date	2015.02.10.11.22.21;	author jsing;	state Exp;
branches;
next	1.13;
commitid	LaAI4ax0sm4T2bQg;

1.13
date	2015.02.10.09.50.12;	author miod;	state Exp;
branches;
next	1.12;
commitid	vXPcwCc8wnLZxSX4;

1.12
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.11;
commitid	gtwLkRyWx0K1HbzX;

1.11
date	2014.06.23.22.19.02;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	9JQzcWo59KD9HxBQ;

1.10
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.20.09.04.56;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.14.37.41;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.27;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.08;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.11.03.02.32.09;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove all getenv() calls, especially those wrapped by issetugid().
getenv()'s wrapped by issetugid() are safe, but issetugid() is correct
difficult to impliment on many operating systems.  By accident, a grand
experiment was run over the last year, where issetugid() returned 1 (the
safe value) on a few operating systems.  Noone noticed & complained that
certain environment variables were not working.......
ok doug beck jsing, discussion with others
@
text
@/* $OpenBSD: conf_api.c,v 1.14 2015/02/10 11:22:21 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Part of the code in here was originally in conf.c, which is now removed */

#ifndef CONF_DEBUG
# undef NDEBUG /* avoid conflicting definitions */
# define NDEBUG
#endif

#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <openssl/conf.h>
#include <openssl/conf_api.h>

static void value_free_hash_doall_arg(CONF_VALUE *a,
    LHASH_OF(CONF_VALUE) *conf);
static void value_free_stack_doall(CONF_VALUE *a);
static IMPLEMENT_LHASH_DOALL_ARG_FN(value_free_hash, CONF_VALUE,
    LHASH_OF(CONF_VALUE))
static IMPLEMENT_LHASH_DOALL_FN(value_free_stack, CONF_VALUE)

/* Up until OpenSSL 0.9.5a, this was get_section */
CONF_VALUE *
_CONF_get_section(const CONF *conf, const char *section)
{
	CONF_VALUE *v, vv;

	if ((conf == NULL) || (section == NULL))
		return (NULL);
	vv.name = NULL;
	vv.section = (char *)section;
	v = lh_CONF_VALUE_retrieve(conf->data, &vv);
	return (v);
}

/* Up until OpenSSL 0.9.5a, this was CONF_get_section */
STACK_OF(CONF_VALUE) *
_CONF_get_section_values(const CONF *conf, const char *section)
{
	CONF_VALUE *v;

	v = _CONF_get_section(conf, section);
	if (v != NULL)
		return ((STACK_OF(CONF_VALUE) *)v->value);
	else
		return (NULL);
}

int
_CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value)
{
	CONF_VALUE *v = NULL;
	STACK_OF(CONF_VALUE) *ts;

	ts = (STACK_OF(CONF_VALUE) *)section->value;

	value->section = section->section;
	if (!sk_CONF_VALUE_push(ts, value)) {
		return 0;
	}

	v = lh_CONF_VALUE_insert(conf->data, value);
	if (v != NULL) {
		(void)sk_CONF_VALUE_delete_ptr(ts, v);
		free(v->name);
		free(v->value);
		free(v);
	}
	return 1;
}

char *
_CONF_get_string(const CONF *conf, const char *section, const char *name)
{
	CONF_VALUE *v, vv;

	if (name == NULL)
		return (NULL);
	if (conf != NULL) {
		if (section != NULL) {
			vv.name = (char *)name;
			vv.section = (char *)section;
			v = lh_CONF_VALUE_retrieve(conf->data, &vv);
			if (v != NULL)
				return (v->value);
		}
		vv.section = "default";
		vv.name = (char *)name;
		v = lh_CONF_VALUE_retrieve(conf->data, &vv);
		if (v != NULL)
			return (v->value);
		else
			return (NULL);
	} else
		return (NULL);
}

static unsigned long
conf_value_hash(const CONF_VALUE *v)
{
	return (lh_strhash(v->section) << 2) ^ lh_strhash(v->name);
}

static IMPLEMENT_LHASH_HASH_FN(conf_value, CONF_VALUE)

static int
conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
{
	int i;

	if (a->section != b->section) {
		i = strcmp(a->section, b->section);
		if (i)
			return (i);
	}
	if ((a->name != NULL) && (b->name != NULL)) {
		i = strcmp(a->name, b->name);
		return (i);
	} else if (a->name == b->name)
		return (0);
	else
		return ((a->name == NULL)?-1 : 1);
}

static IMPLEMENT_LHASH_COMP_FN(conf_value, CONF_VALUE)

int
_CONF_new_data(CONF *conf)
{
	if (conf == NULL) {
		return 0;
	}
	if (conf->data == NULL)
		if ((conf->data = lh_CONF_VALUE_new()) == NULL) {
			return 0;
		}
	return 1;
}

void
_CONF_free_data(CONF *conf)
{
	if (conf == NULL || conf->data == NULL)
		return;

	lh_CONF_VALUE_down_load(conf->data) = 0; /* evil thing to make
						  * sure the 'free()' works as
						  * expected */
	lh_CONF_VALUE_doall_arg(conf->data,
	    LHASH_DOALL_ARG_FN(value_free_hash),
	    LHASH_OF(CONF_VALUE), conf->data);

	/* We now have only 'section' entries in the hash table.
	 * Due to problems with */

	lh_CONF_VALUE_doall(conf->data, LHASH_DOALL_FN(value_free_stack));
	lh_CONF_VALUE_free(conf->data);
}

static void
value_free_hash_doall_arg(CONF_VALUE *a, LHASH_OF(CONF_VALUE) *conf)
{
	if (a->name != NULL)
		(void)lh_CONF_VALUE_delete(conf, a);
}

static void
value_free_stack_doall(CONF_VALUE *a)
{
	CONF_VALUE *vv;
	STACK_OF(CONF_VALUE) *sk;
	int i;

	if (a->name != NULL)
		return;

	sk = (STACK_OF(CONF_VALUE) *)a->value;
	for (i = sk_CONF_VALUE_num(sk) - 1; i >= 0; i--) {
		vv = sk_CONF_VALUE_value(sk, i);
		free(vv->value);
		free(vv->name);
		free(vv);
	}
	if (sk != NULL)
		sk_CONF_VALUE_free(sk);
	free(a->section);
	free(a);
}

/* Up until OpenSSL 0.9.5a, this was new_section */
CONF_VALUE *
_CONF_new_section(CONF *conf, const char *section)
{
	STACK_OF(CONF_VALUE) *sk = NULL;
	int ok = 0, i;
	CONF_VALUE *v = NULL, *vv;

	if ((sk = sk_CONF_VALUE_new_null()) == NULL)
		goto err;
	if ((v = malloc(sizeof(CONF_VALUE))) == NULL)
		goto err;
	i = strlen(section) + 1;
	if ((v->section = malloc(i)) == NULL)
		goto err;

	memcpy(v->section, section, i);
	v->name = NULL;
	v->value = (char *)sk;

	vv = lh_CONF_VALUE_insert(conf->data, v);
	OPENSSL_assert(vv == NULL);
	ok = 1;

err:
	if (!ok) {
		if (sk != NULL)
			sk_CONF_VALUE_free(sk);
		free(v);
		v = NULL;
	}
	return (v);
}
@


1.14
log
@Remove more IMPLEMENT_STACK_OF noops that have been hiding for the last
15 years.
@
text
@d1 1
a1 1
/* $OpenBSD: conf_api.c,v 1.13 2015/02/10 09:50:12 miod Exp $ */
a132 1
	char *p;
a142 8
			if (strcmp(section, "ENV") == 0) {
				if (issetugid() == 0)
					p = getenv(name);
				else
					p = NULL;
				if (p != NULL)
					return (p);
			}
d151 2
a152 5
	} else {
		if (issetugid())
			return (NULL);
		return (getenv(name));
	}
@


1.13
log
@Remove unnecessary include of assert.h
@
text
@d1 1
a1 1
/* $OpenBSD: conf_api.c,v 1.12 2015/02/07 13:19:15 doug Exp $ */
a291 2

IMPLEMENT_STACK_OF(CONF_VALUE)
@


1.12
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: conf_api.c,v 1.11 2014/06/23 22:19:02 deraadt Exp $ */
a65 1
#include <assert.h>
@


1.11
log
@Since this is a library, place issetugid() before every getenv()
ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: conf_api.c,v 1.10 2014/06/12 15:49:28 deraadt Exp $ */
a166 22

#if 0 /* There's no way to provide error checking with this function, so
	 force implementors of the higher levels to get a string and read
	 the number themselves. */
long
_CONF_get_number(CONF *conf, char *section, char *name)
{
	char *str;
	long ret = 0;

	str = _CONF_get_string(conf, section, name);
	if (str == NULL)
		return (0);
	for (;;) {
		if (conf->meth->is_number(conf, *str))
			ret = ret * 10 + conf->meth->to_int(conf, *str);
		else
			return (ret);
		str++;
	}
}
#endif
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d69 1
d146 4
a149 1
				p = getenv(name);
d161 3
a163 1
	} else
d165 1
@


1.9
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* conf_api.c */
@


1.8
log
@KNF.
@
text
@d303 1
a303 2
		if (v != NULL)
			free(v);
@


1.7
log
@Put the final pieces from e_os.h in the required places, and remove it.
"dance on it's grave" says beck
ok guenther beck
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d73 1
a73 1
				      LHASH_OF(CONF_VALUE) *conf);
d76 1
a76 1
				    LHASH_OF(CONF_VALUE))
d80 12
a91 10
CONF_VALUE *_CONF_get_section(const CONF *conf, const char *section)
	{
	CONF_VALUE *v,vv;

	if ((conf == NULL) || (section == NULL)) return(NULL);
	vv.name=NULL;
	vv.section=(char *)section;
	v=lh_CONF_VALUE_retrieve(conf->data,&vv);
	return(v);
	}
d94 3
a96 3
STACK_OF(CONF_VALUE) *_CONF_get_section_values(const CONF *conf,
					       const char *section)
	{
d99 1
a99 1
	v=_CONF_get_section(conf,section);
d101 1
a101 1
		return((STACK_OF(CONF_VALUE) *)v->value);
d103 2
a104 2
		return(NULL);
	}
d106 3
a108 2
int _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value)
	{
d114 2
a115 3
	value->section=section->section;	
	if (!sk_CONF_VALUE_push(ts,value))
		{
d117 1
a117 1
		}
d120 2
a121 3
	if (v != NULL)
		{
		(void)sk_CONF_VALUE_delete_ptr(ts,v);
d125 1
a125 1
		}
d127 1
a127 1
	}
d129 4
a132 3
char *_CONF_get_string(const CONF *conf, const char *section, const char *name)
	{
	CONF_VALUE *v,vv;
d135 13
a147 14
	if (name == NULL) return(NULL);
	if (conf != NULL)
		{
		if (section != NULL)
			{
			vv.name=(char *)name;
			vv.section=(char *)section;
			v=lh_CONF_VALUE_retrieve(conf->data,&vv);
			if (v != NULL) return(v->value);
			if (strcmp(section,"ENV") == 0)
				{
				p=getenv(name);
				if (p != NULL) return(p);
				}
d149 4
a152 3
		vv.section="default";
		vv.name=(char *)name;
		v=lh_CONF_VALUE_retrieve(conf->data,&vv);
d154 1
a154 1
			return(v->value);
d156 4
a159 5
			return(NULL);
		}
	else
		return(getenv(name));
	}
d164 3
a166 2
long _CONF_get_number(CONF *conf, char *section, char *name)
	{
d168 1
a168 1
	long ret=0;
d170 4
a173 4
	str=_CONF_get_string(conf,section,name);
	if (str == NULL) return(0);
	for (;;)
		{
d175 1
a175 1
			ret=ret*10+conf->meth->to_int(conf, *str);
d177 1
a177 1
			return(ret);
a178 1
		}
d180 1
d183 6
a188 4
static unsigned long conf_value_hash(const CONF_VALUE *v)
	{
	return (lh_strhash(v->section)<<2)^lh_strhash(v->name);
	}
d191 3
a193 2
static int conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
	{
d196 13
a208 5
	if (a->section != b->section)
		{
		i=strcmp(a->section,b->section);
		if (i) return(i);
		}
a209 10
	if ((a->name != NULL) && (b->name != NULL))
		{
		i=strcmp(a->name,b->name);
		return(i);
		}
	else if (a->name == b->name)
		return(0);
	else
		return((a->name == NULL)?-1:1);
	}
d212 4
a215 4
int _CONF_new_data(CONF *conf)
	{
	if (conf == NULL)
		{
d217 1
a217 1
		}
d219 1
a219 2
		if ((conf->data = lh_CONF_VALUE_new()) == NULL)
			{
d221 1
a221 1
			}
d223 1
a223 1
	}
d225 9
a233 7
void _CONF_free_data(CONF *conf)
	{
	if (conf == NULL || conf->data == NULL) return;

	lh_CONF_VALUE_down_load(conf->data)=0; /* evil thing to make
				  * sure the 'free()' works as
				  * expected */
d235 2
a236 2
				LHASH_DOALL_ARG_FN(value_free_hash),
				LHASH_OF(CONF_VALUE), conf->data);
d243 1
a243 1
	}
d245 3
a247 2
static void value_free_hash_doall_arg(CONF_VALUE *a, LHASH_OF(CONF_VALUE) *conf)
	{
d249 2
a250 2
		(void)lh_CONF_VALUE_delete(conf,a);
	}
d252 3
a254 2
static void value_free_stack_doall(CONF_VALUE *a)
	{
d259 2
a260 1
	if (a->name != NULL) return;
d262 3
a264 4
	sk=(STACK_OF(CONF_VALUE) *)a->value;
	for (i=sk_CONF_VALUE_num(sk)-1; i>=0; i--)
		{
		vv=sk_CONF_VALUE_value(sk,i);
d268 3
a270 2
		}
	if (sk != NULL) sk_CONF_VALUE_free(sk);
d273 1
a273 1
	}
d276 6
a281 5
CONF_VALUE *_CONF_new_section(CONF *conf, const char *section)
	{
	STACK_OF(CONF_VALUE) *sk=NULL;
	int ok=0,i;
	CONF_VALUE *v=NULL,*vv;
d283 1
a283 1
	if ((sk=sk_CONF_VALUE_new_null()) == NULL)
d285 1
a285 1
	if ((v=malloc(sizeof(CONF_VALUE))) == NULL)
d287 2
a288 2
	i=strlen(section)+1;
	if ((v->section=malloc(i)) == NULL)
d291 5
a295 5
	memcpy(v->section,section,i);
	v->name=NULL;
	v->value=(char *)sk;
	
	vv=lh_CONF_VALUE_insert(conf->data,v);
d297 2
a298 1
	ok=1;
d300 6
a305 7
	if (!ok)
		{
		if (sk != NULL) sk_CONF_VALUE_free(sk);
		if (v != NULL) free(v);
		v=NULL;
		}
	return(v);
d307 2
@


1.6
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a70 1
#include "e_os.h"
@


1.5
log
@openssl-1.0.0e: resolve conflicts
@
text
@d122 3
a124 3
		OPENSSL_free(v->name);
		OPENSSL_free(v->value);
		OPENSSL_free(v);
d229 1
a229 1
				  * sure the 'OPENSSL_free()' works as
d260 3
a262 3
		OPENSSL_free(vv->value);
		OPENSSL_free(vv->name);
		OPENSSL_free(vv);
d265 2
a266 2
	OPENSSL_free(a->section);
	OPENSSL_free(a);
d278 1
a278 1
	if ((v=OPENSSL_malloc(sizeof(CONF_VALUE))) == NULL)
d281 1
a281 1
	if ((v->section=OPENSSL_malloc(i)) == NULL)
d295 1
a295 1
		if (v != NULL) OPENSSL_free(v);
@


1.4
log
@resolve conflicts, fix local changes
@
text
@d67 1
d289 1
a289 1
	assert(vv == NULL);
@


1.3
log
@resolve conflicts
@
text
@d72 6
a77 10
static void value_free_hash(CONF_VALUE *a, LHASH *conf);
static void value_free_stack(CONF_VALUE *a,LHASH *conf);
static IMPLEMENT_LHASH_DOALL_ARG_FN(value_free_hash, CONF_VALUE *, LHASH *)
static IMPLEMENT_LHASH_DOALL_ARG_FN(value_free_stack, CONF_VALUE *, LHASH *)
/* We don't use function pointer casting or wrapper functions - but cast each
 * callback parameter inside the callback functions. */
/* static unsigned long hash(CONF_VALUE *v); */
static unsigned long hash(const void *v_void);
/* static int cmp_conf(CONF_VALUE *a,CONF_VALUE *b); */
static int cmp_conf(const void *a_void,const void *b_void);
d87 1
a87 1
	v=(CONF_VALUE *)lh_retrieve(conf->data,&vv);
d117 1
a117 1
	v = (CONF_VALUE *)lh_insert(conf->data, value);
d140 1
a140 1
			v=(CONF_VALUE *)lh_retrieve(conf->data,&vv);
d144 1
a144 1
				p=Getenv(name);
d150 1
a150 1
		v=(CONF_VALUE *)lh_retrieve(conf->data,&vv);
d157 1
a157 1
		return(Getenv(name));
d181 28
d216 1
a216 1
		if ((conf->data = lh_new(hash, cmp_conf)) == NULL)
d227 6
a232 4
	conf->data->down_load=0; /* evil thing to make sure the 'OPENSSL_free()'
				  * works as expected */
	lh_doall_arg(conf->data, LHASH_DOALL_ARG_FN(value_free_hash),
			conf->data);
d237 2
a238 3
	lh_doall_arg(conf->data, LHASH_DOALL_ARG_FN(value_free_stack),
			conf->data);
	lh_free(conf->data);
d241 1
a241 1
static void value_free_hash(CONF_VALUE *a, LHASH *conf)
d244 1
a244 3
		{
		a=(CONF_VALUE *)lh_delete(conf,a);
		}
d247 1
a247 1
static void value_free_stack(CONF_VALUE *a, LHASH *conf)
d250 1
a250 1
	STACK *sk;
d255 2
a256 2
	sk=(STACK *)a->value;
	for (i=sk_num(sk)-1; i>=0; i--)
d258 1
a258 1
		vv=(CONF_VALUE *)sk_value(sk,i);
d263 1
a263 1
	if (sk != NULL) sk_free(sk);
a267 31
/* static unsigned long hash(CONF_VALUE *v) */
static unsigned long hash(const void *v_void)
	{
	CONF_VALUE *v = (CONF_VALUE *)v_void;
	return((lh_strhash(v->section)<<2)^lh_strhash(v->name));
	}

/* static int cmp_conf(CONF_VALUE *a, CONF_VALUE *b) */
static int cmp_conf(const void *a_void,const  void *b_void)
	{
	int i;
	CONF_VALUE *a = (CONF_VALUE *)a_void;
	CONF_VALUE *b = (CONF_VALUE *)b_void;

	if (a->section != b->section)
		{
		i=strcmp(a->section,b->section);
		if (i) return(i);
		}

	if ((a->name != NULL) && (b->name != NULL))
		{
		i=strcmp(a->name,b->name);
		return(i);
		}
	else if (a->name == b->name)
		return(0);
	else
		return((a->name == NULL)?-1:1);
	}

d271 1
a271 1
	STACK *sk=NULL;
d275 1
a275 1
	if ((sk=sk_new_null()) == NULL)
d277 1
a277 1
	if ((v=(CONF_VALUE *)OPENSSL_malloc(sizeof(CONF_VALUE))) == NULL)
d280 1
a280 1
	if ((v->section=(char *)OPENSSL_malloc(i)) == NULL)
d287 1
a287 1
	vv=(CONF_VALUE *)lh_insert(conf->data,v);
d293 1
a293 1
		if (sk != NULL) sk_free(sk);
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d124 1
a124 1
		sk_CONF_VALUE_delete_ptr(ts,v);
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d70 1
d74 8
a81 2
static unsigned long hash(CONF_VALUE *v);
static int cmp_conf(CONF_VALUE *a,CONF_VALUE *b);
d84 1
a84 1
CONF_VALUE *_CONF_get_section(CONF *conf, char *section)
d90 1
a90 1
	vv.section=section;
d96 2
a97 1
STACK_OF(CONF_VALUE) *_CONF_get_section_values(CONF *conf, char *section)
d132 1
a132 1
char *_CONF_get_string(CONF *conf, char *section, char *name)
d142 2
a143 2
			vv.name=name;
			vv.section=section;
d153 1
a153 1
		vv.name=name;
d164 3
d183 1
d192 1
a192 1
		if ((conf->data = lh_new(hash,cmp_conf)) == NULL)
d205 2
a206 1
	lh_doall_arg(conf->data,(void (*)())value_free_hash,conf->data);
d211 2
a212 1
	lh_doall_arg(conf->data,(void (*)())value_free_stack,conf->data);
d245 2
a246 1
static unsigned long hash(CONF_VALUE *v)
d248 1
d252 2
a253 1
static int cmp_conf(CONF_VALUE *a, CONF_VALUE *b)
d256 2
d277 1
a277 1
CONF_VALUE *_CONF_new_section(CONF *conf, char *section)
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a69 1
#include "e_os.h"
d73 2
a74 8
static IMPLEMENT_LHASH_DOALL_ARG_FN(value_free_hash, CONF_VALUE *, LHASH *)
static IMPLEMENT_LHASH_DOALL_ARG_FN(value_free_stack, CONF_VALUE *, LHASH *)
/* We don't use function pointer casting or wrapper functions - but cast each
 * callback parameter inside the callback functions. */
/* static unsigned long hash(CONF_VALUE *v); */
static unsigned long hash(const void *v_void);
/* static int cmp_conf(CONF_VALUE *a,CONF_VALUE *b); */
static int cmp_conf(const void *a_void,const void *b_void);
d77 1
a77 1
CONF_VALUE *_CONF_get_section(const CONF *conf, const char *section)
d83 1
a83 1
	vv.section=(char *)section;
d89 1
a89 2
STACK_OF(CONF_VALUE) *_CONF_get_section_values(const CONF *conf,
					       const char *section)
d124 1
a124 1
char *_CONF_get_string(const CONF *conf, const char *section, const char *name)
d134 2
a135 2
			vv.name=(char *)name;
			vv.section=(char *)section;
d145 1
a145 1
		vv.name=(char *)name;
a155 3
#if 0 /* There's no way to provide error checking with this function, so
	 force implementors of the higher levels to get a string and read
	 the number themselves. */
a171 1
#endif
d180 1
a180 1
		if ((conf->data = lh_new(hash, cmp_conf)) == NULL)
d193 1
a193 2
	lh_doall_arg(conf->data, LHASH_DOALL_ARG_FN(value_free_hash),
			conf->data);
d198 1
a198 2
	lh_doall_arg(conf->data, LHASH_DOALL_ARG_FN(value_free_stack),
			conf->data);
d231 1
a231 2
/* static unsigned long hash(CONF_VALUE *v) */
static unsigned long hash(const void *v_void)
a232 1
	CONF_VALUE *v = (CONF_VALUE *)v_void;
d236 1
a236 2
/* static int cmp_conf(CONF_VALUE *a, CONF_VALUE *b) */
static int cmp_conf(const void *a_void,const  void *b_void)
a238 2
	CONF_VALUE *a = (CONF_VALUE *)a_void;
	CONF_VALUE *b = (CONF_VALUE *)b_void;
d258 1
a258 1
CONF_VALUE *_CONF_new_section(CONF *conf, const char *section)
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d124 1
a124 1
		(void)sk_CONF_VALUE_delete_ptr(ts,v);
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d72 10
a81 6
static void value_free_hash_doall_arg(CONF_VALUE *a,
				      LHASH_OF(CONF_VALUE) *conf);
static void value_free_stack_doall(CONF_VALUE *a);
static IMPLEMENT_LHASH_DOALL_ARG_FN(value_free_hash, CONF_VALUE,
				    LHASH_OF(CONF_VALUE))
static IMPLEMENT_LHASH_DOALL_FN(value_free_stack, CONF_VALUE)
d91 1
a91 1
	v=lh_CONF_VALUE_retrieve(conf->data,&vv);
d121 1
a121 1
	v = lh_CONF_VALUE_insert(conf->data, value);
d144 1
a144 1
			v=lh_CONF_VALUE_retrieve(conf->data,&vv);
d148 1
a148 1
				p=getenv(name);
d154 1
a154 1
		v=lh_CONF_VALUE_retrieve(conf->data,&vv);
d161 1
a161 1
		return(getenv(name));
a184 28
static unsigned long conf_value_hash(const CONF_VALUE *v)
	{
	return (lh_strhash(v->section)<<2)^lh_strhash(v->name);
	}
static IMPLEMENT_LHASH_HASH_FN(conf_value, CONF_VALUE)

static int conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
	{
	int i;

	if (a->section != b->section)
		{
		i=strcmp(a->section,b->section);
		if (i) return(i);
		}

	if ((a->name != NULL) && (b->name != NULL))
		{
		i=strcmp(a->name,b->name);
		return(i);
		}
	else if (a->name == b->name)
		return(0);
	else
		return((a->name == NULL)?-1:1);
	}
static IMPLEMENT_LHASH_COMP_FN(conf_value, CONF_VALUE)

d192 1
a192 1
		if ((conf->data = lh_CONF_VALUE_new()) == NULL)
d203 4
a206 6
	lh_CONF_VALUE_down_load(conf->data)=0; /* evil thing to make
				  * sure the 'OPENSSL_free()' works as
				  * expected */
	lh_CONF_VALUE_doall_arg(conf->data,
				LHASH_DOALL_ARG_FN(value_free_hash),
				LHASH_OF(CONF_VALUE), conf->data);
d211 3
a213 2
	lh_CONF_VALUE_doall(conf->data, LHASH_DOALL_FN(value_free_stack));
	lh_CONF_VALUE_free(conf->data);
d216 1
a216 1
static void value_free_hash_doall_arg(CONF_VALUE *a, LHASH_OF(CONF_VALUE) *conf)
d219 3
a221 1
		(void)lh_CONF_VALUE_delete(conf,a);
d224 1
a224 1
static void value_free_stack_doall(CONF_VALUE *a)
d227 1
a227 1
	STACK_OF(CONF_VALUE) *sk;
d232 2
a233 2
	sk=(STACK_OF(CONF_VALUE) *)a->value;
	for (i=sk_CONF_VALUE_num(sk)-1; i>=0; i--)
d235 1
a235 1
		vv=sk_CONF_VALUE_value(sk,i);
d240 1
a240 1
	if (sk != NULL) sk_CONF_VALUE_free(sk);
d245 31
d279 1
a279 1
	STACK_OF(CONF_VALUE) *sk=NULL;
d283 1
a283 1
	if ((sk=sk_CONF_VALUE_new_null()) == NULL)
d285 1
a285 1
	if ((v=OPENSSL_malloc(sizeof(CONF_VALUE))) == NULL)
d288 1
a288 1
	if ((v->section=OPENSSL_malloc(i)) == NULL)
d295 1
a295 1
	vv=lh_CONF_VALUE_insert(conf->data,v);
d301 1
a301 1
		if (sk != NULL) sk_CONF_VALUE_free(sk);
@


1.1.1.4
log
@import OpenSSL 1.0.0e
@
text
@a66 1
#include <stdlib.h>
d288 1
a288 1
	OPENSSL_assert(vv == NULL);
@


