head	1.7;
access;
symbols
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2010.10.01.22.58.53;	author djm;	state dead;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.03;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.25;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.33;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.33;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.43;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.28;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@resolve conflicts, fix local changes
@
text
@/* crypto/tmdiff.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
#include <stdio.h>
#include <stdlib.h>
#include "cryptlib.h"
#include <openssl/tmdiff.h>
#if !defined(OPENSSL_SYS_MSDOS)
#include OPENSSL_UNISTD
#endif

#ifdef TIMEB
#undef OPENSSL_SYS_WIN32
#undef TIMES
#endif

#if !defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_WIN32) && !(defined(OPENSSL_SYS_VMS) || defined(__DECC)) && !defined(OPENSSL_SYS_MACOSX_RHAPSODY) && !defined(OPENSSL_SYS_VXWORKS)
# define TIMES
#endif

#ifdef OPENSSL_SYS_NETWARE
#undef TIMES
#endif

#if !defined(_IRIX) || defined (OPENSSL_SYS_NETWARE)
#  include <time.h>
#endif
#ifdef TIMES
#  include <sys/types.h>
#  include <sys/times.h>
#endif

/* Depending on the VMS version, the tms structure is perhaps defined.
   The __TMS macro will show if it was.  If it wasn't defined, we should
   undefine TIMES, since that tells the rest of the program how things
   should be handled.				-- Richard Levitte */
#if defined(OPENSSL_SYS_VMS_DECC) && !defined(__TMS)
#undef TIMES
#endif

#if defined(sun) || defined(__ultrix)
#define _POSIX_SOURCE
#include <limits.h>
#include <sys/param.h>
#endif

#if !defined(TIMES) && !defined(OPENSSL_SYS_VXWORKS) && !defined(OPENSSL_SYS_NETWARE)
#include <sys/timeb.h>
#endif

#ifdef OPENSSL_SYS_WIN32
#include <windows.h>
#endif

/* The following if from times(3) man page.  It may need to be changed */
#ifndef HZ
# if defined(_SC_CLK_TCK) \
     && (!defined(OPENSSL_SYS_VMS) || __CTRL_VER >= 70000000)
/* #  define HZ ((double)sysconf(_SC_CLK_TCK)) */
#  define HZ sysconf(_SC_CLK_TCK)
# else
#  ifndef CLK_TCK
#   ifndef _BSD_CLK_TCK_ /* FreeBSD hack */
#    define HZ  100.0
#   else /* _BSD_CLK_TCK_ */
#    define HZ ((double)_BSD_CLK_TCK_)
#   endif
#  else /* CLK_TCK */
#   define HZ ((double)CLK_TCK)
#  endif
# endif
#endif

struct ms_tm
	{
#ifdef TIMES
	struct tms ms_tms;
#else
#  ifdef OPENSSL_SYS_WIN32
	HANDLE thread_id;
	FILETIME ms_win32;
#  elif defined (OPENSSL_SYS_NETWARE)
   clock_t ms_clock;
#  else
#    ifdef OPENSSL_SYS_VXWORKS
          unsigned long ticks;
#    else
	struct timeb ms_timeb;
#    endif
#  endif
#endif
	};

MS_TM *ms_time_new(void)
	{
	MS_TM *ret;

	ret=(MS_TM *)OPENSSL_malloc(sizeof(MS_TM));
	if (ret == NULL)
		return(NULL);
	memset(ret,0,sizeof(MS_TM));
#ifdef OPENSSL_SYS_WIN32
	ret->thread_id=GetCurrentThread();
#endif
	return ret;
	}

void ms_time_free(MS_TM *a)
	{
	if (a != NULL)
		OPENSSL_free(a);
	}

void ms_time_get(MS_TM *tm)
	{
#ifdef OPENSSL_SYS_WIN32
	FILETIME tmpa,tmpb,tmpc;
#endif

#ifdef TIMES
	times(&tm->ms_tms);
#else
#  ifdef OPENSSL_SYS_WIN32
	GetThreadTimes(tm->thread_id,&tmpa,&tmpb,&tmpc,&(tm->ms_win32));
#  elif defined (OPENSSL_SYS_NETWARE)
   tm->ms_clock = clock();
#  else
#    ifdef OPENSSL_SYS_VXWORKS
        tm->ticks = tickGet();
#    else
	ftime(&tm->ms_timeb);
#    endif
#  endif
#endif
	}

double ms_time_diff(MS_TM *a, MS_TM *b)
	{
	double ret;

#ifdef TIMES
	ret = HZ;
	ret = (b->ms_tms.tms_utime-a->ms_tms.tms_utime) / ret;
#else
# ifdef OPENSSL_SYS_WIN32
	{
#ifdef __GNUC__
	signed long long la,lb;
#else
	signed _int64 la,lb;
#endif
	la=a->ms_win32.dwHighDateTime;
	lb=b->ms_win32.dwHighDateTime;
	la<<=32;
	lb<<=32;
	la+=a->ms_win32.dwLowDateTime;
	lb+=b->ms_win32.dwLowDateTime;
	ret=((double)(lb-la))/1e7;
	}
# elif defined (OPENSSL_SYS_NETWARE)
    ret= (double)(b->ms_clock - a->ms_clock);
# else
#  ifdef OPENSSL_SYS_VXWORKS
        ret = (double)(b->ticks - a->ticks) / (double)sysClkRateGet();
#  else
	ret=	 (double)(b->ms_timeb.time-a->ms_timeb.time)+
		(((double)b->ms_timeb.millitm)-
		((double)a->ms_timeb.millitm))/1000.0;
#  endif
# endif
#endif
	return((ret < 0.0000001)?0.0000001:ret);
	}

int ms_time_cmp(const MS_TM *a, const MS_TM *b)
	{
	double d;
	int ret;

#ifdef TIMES
	d = HZ;
	d = (b->ms_tms.tms_utime-a->ms_tms.tms_utime) / d;
#else
# ifdef OPENSSL_SYS_WIN32
	d =(b->ms_win32.dwHighDateTime&0x000fffff)*10+b->ms_win32.dwLowDateTime/1e7;
	d-=(a->ms_win32.dwHighDateTime&0x000fffff)*10+a->ms_win32.dwLowDateTime/1e7;
# elif defined (OPENSSL_SYS_NETWARE)
    d= (double)(b->ms_clock - a->ms_clock);
# else
#  ifdef OPENSSL_SYS_VXWORKS
        d = (b->ticks - a->ticks);
#  else
	d=	 (double)(b->ms_timeb.time-a->ms_timeb.time)+
		(((double)b->ms_timeb.millitm)-(double)a->ms_timeb.millitm)/1000.0;
#  endif
# endif
#endif
	if (d == 0.0)
		ret=0;
	else if (d < 0)
		ret= -1;
	else
		ret=1;
	return(ret);
	}

@


1.6
log
@resolve conflicts
@
text
@@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d75 5
a79 1
#ifndef _IRIX
d101 1
a101 1
#if !defined(TIMES) && !defined(OPENSSL_SYS_VXWORKS)
d113 2
a114 1
#  define HZ ((double)sysconf(_SC_CLK_TCK))
d128 1
a128 1
typedef struct ms_tm
d136 2
d146 1
a146 1
	} MS_TM;
d148 1
a148 1
char *ms_time_new(void)
d159 1
a159 1
	return((char *)ret);
d162 1
a162 1
void ms_time_free(char *a)
d168 1
a168 1
void ms_time_get(char *a)
a169 1
	MS_TM *tm=(MS_TM *)a;
d179 2
d191 1
a191 1
double ms_time_diff(char *ap, char *bp)
a192 2
	MS_TM *a=(MS_TM *)ap;
	MS_TM *b=(MS_TM *)bp;
d196 2
a197 1
	ret=(b->ms_tms.tms_utime-a->ms_tms.tms_utime)/HZ;
d214 2
d229 1
a229 1
int ms_time_cmp(char *ap, char *bp)
a230 1
	MS_TM *a=(MS_TM *)ap,*b=(MS_TM *)bp;
d235 2
a236 1
	d=(b->ms_tms.tms_utime-a->ms_tms.tms_utime)/HZ;
d241 2
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d62 3
d71 1
a71 1
#if !defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_WIN32) && !defined(OPENSSL_SYS_VMS) || defined(__DECC) && !defined(OPENSSL_SYS_MACOSX) && !defined(OPENSSL_SYS_VXWORKS)
d107 12
a118 5
# ifndef CLK_TCK
#  ifndef _BSD_CLK_TCK_ /* FreeBSD hack */
#   define HZ  100.0
#  else /* _BSD_CLK_TCK_ */
#   define HZ ((double)_BSD_CLK_TCK_)
a119 2
# else /* CLK_TCK */
#  define HZ ((double)CLK_TCK)
d132 1
a132 1
#    ifdef OPENSSL_SYS_VSWORKS
d174 1
a174 1
#    ifdef OPENSSL_SYS_VSWORKS
d208 1
a208 1
#  ifdef OPENSSL_SYS_VSWORKS
d233 1
a233 1
#  ifdef OPENSSL_SYS_VSWORKS
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d64 1
a64 1
#undef WIN32
d68 2
a69 6
#ifndef MSDOS
#  ifndef WIN32
#    if !defined(VMS) || defined(__DECC)
#      define TIMES
#    endif
#  endif
d84 1
a84 1
#if defined(VMS) && defined(__DECC) && !defined(__TMS)
d94 1
a94 1
#ifndef TIMES
d98 1
a98 1
#ifdef WIN32
d120 1
a120 1
#  ifdef WIN32
d124 3
d128 1
d141 1
a141 1
#ifdef WIN32
d156 1
a156 1
#ifdef WIN32
d163 1
a163 1
#  ifdef WIN32
d166 3
d170 1
d184 1
a184 1
# ifdef WIN32
d200 3
d207 1
d221 1
a221 1
# ifdef WIN32
d225 3
d231 1
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d137 1
a137 1
	ret=(MS_TM *)Malloc(sizeof(MS_TM));
d150 1
a150 1
		Free(a);
@


1.1
log
@Initial revision
@
text
@d60 7
d70 3
a72 1
#  define TIMES
d76 15
a90 17
#ifndef VMS
#  ifndef _IRIX
#   include <time.h>
#  endif
#  ifdef TIMES
#    include <sys/types.h>
#    include <sys/times.h>
#  endif
#else /* VMS */
#  include <types.h>
	struct tms {
		time_t tms_utime;
		time_t tms_stime;
		time_t tms_uchild;      /* I dunno...  */
		time_t tms_uchildsys;   /* so these names are a guess :-) */
		}
#endif /* VMS */
d92 2
a93 1
#ifdef sun
d110 1
a110 5
#   ifndef VMS
#    define HZ  100.0
#   else /* VMS */
#    define HZ  100.0
#   endif
d133 1
a133 1
char *ms_time_init()
d137 1
a137 1
	ret=malloc(sizeof(MS_TM));
d147 1
a147 2
void ms_time_final(a)
char *a;
d150 1
a150 1
		free(a);
d153 1
a153 2
void ms_time_get(a)
char *a;
d156 3
a158 1
    FILETIME tmpa,tmpb,tmpc;
a160 1
    printf("AAA\n");
d166 1
a166 2
    printf("CCC\n");
	ftime(tm->ms_timeb);
d171 1
a171 2
double ms_time_diff(ap,bp)
char *ap,*bp;
d181 14
a194 3
	ret =(double)(b->ms_win32.dwHighDateTime&0x000fffff)*10+
		b->ms_win32.dwLowDateTime/1e7;
	ret-=(double)(a->ms_win32.dwHighDateTime&0x000fffff)*10+a->ms_win32.dwLowDateTime/1e7;
d196 3
a198 2
	ret=	 (double)(b->time-a->time)+
		((double)((unsigned long)b->mullitm-(unsigned long)))/1000.0;
d204 1
a204 2
int ms_time_cmp(ap,bp)
char *ap,*bp;
d217 2
a218 2
	d=	 (double)(b->time-a->time)+
		((double)((unsigned long)b->mullitm-(unsigned long)))/1000.0;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a59 2
#include "cryptlib.h"
#include <openssl/tmdiff.h>
d61 4
a64 3
#ifdef TIMEB
#undef OPENSSL_SYS_WIN32
#undef TIMES
d67 17
a83 19
#if !defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_WIN32) && !defined(OPENSSL_SYS_VMS) || defined(__DECC) && !defined(OPENSSL_SYS_MACOSX) && !defined(OPENSSL_SYS_VXWORKS)
# define TIMES
#endif

#ifndef _IRIX
#  include <time.h>
#endif
#ifdef TIMES
#  include <sys/types.h>
#  include <sys/times.h>
#endif

/* Depending on the VMS version, the tms structure is perhaps defined.
   The __TMS macro will show if it was.  If it wasn't defined, we should
   undefine TIMES, since that tells the rest of the program how things
   should be handled.				-- Richard Levitte */
#if defined(OPENSSL_SYS_VMS_DECC) && !defined(__TMS)
#undef TIMES
#endif
d85 1
a85 2
#if defined(sun) || defined(__ultrix)
#define _POSIX_SOURCE
d90 1
a90 1
#if !defined(TIMES) && !defined(OPENSSL_SYS_VXWORKS)
d94 1
a94 1
#ifdef OPENSSL_SYS_WIN32
d102 5
a106 1
#   define HZ  100.0
d120 1
a120 1
#  ifdef OPENSSL_SYS_WIN32
a123 3
#    ifdef OPENSSL_SYS_VSWORKS
          unsigned long ticks;
#    else
a124 1
#    endif
d129 1
a129 1
char *ms_time_new(void)
d133 1
a133 1
	ret=(MS_TM *)OPENSSL_malloc(sizeof(MS_TM));
d137 1
a137 1
#ifdef OPENSSL_SYS_WIN32
d143 2
a144 1
void ms_time_free(char *a)
d147 1
a147 1
		OPENSSL_free(a);
d150 2
a151 1
void ms_time_get(char *a)
d154 1
a154 3
#ifdef OPENSSL_SYS_WIN32
	FILETIME tmpa,tmpb,tmpc;
#endif
d157 1
d160 1
a160 1
#  ifdef OPENSSL_SYS_WIN32
d163 2
a164 5
#    ifdef OPENSSL_SYS_VSWORKS
        tm->ticks = tickGet();
#    else
	ftime(&tm->ms_timeb);
#    endif
d169 2
a170 1
double ms_time_diff(char *ap, char *bp)
d179 4
a182 15
# ifdef OPENSSL_SYS_WIN32
	{
#ifdef __GNUC__
	signed long long la,lb;
#else
	signed _int64 la,lb;
#endif
	la=a->ms_win32.dwHighDateTime;
	lb=b->ms_win32.dwHighDateTime;
	la<<=32;
	lb<<=32;
	la+=a->ms_win32.dwLowDateTime;
	lb+=b->ms_win32.dwLowDateTime;
	ret=((double)(lb-la))/1e7;
	}
d184 2
a185 6
#  ifdef OPENSSL_SYS_VSWORKS
        ret = (double)(b->ticks - a->ticks) / (double)sysClkRateGet();
#  else
	ret=	 (double)(b->ms_timeb.time-a->ms_timeb.time)+
		(((double)b->ms_timeb.millitm)-
		((double)a->ms_timeb.millitm))/1000.0;
a186 1
# endif
d191 2
a192 1
int ms_time_cmp(char *ap, char *bp)
d201 1
a201 1
# ifdef OPENSSL_SYS_WIN32
d205 2
a206 5
#  ifdef OPENSSL_SYS_VSWORKS
        d = (b->ticks - a->ticks);
#  else
	d=	 (double)(b->ms_timeb.time-a->ms_timeb.time)+
		(((double)b->ms_timeb.millitm)-(double)a->ms_timeb.millitm)/1000.0;
a207 1
# endif
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a61 3
#if !defined(OPENSSL_SYS_MSDOS)
#include OPENSSL_UNISTD
#endif
d68 1
a68 1
#if !defined(OPENSSL_SYS_MSDOS) && !defined(OPENSSL_SYS_WIN32) && !(defined(OPENSSL_SYS_VMS) || defined(__DECC)) && !defined(OPENSSL_SYS_MACOSX_RHAPSODY) && !defined(OPENSSL_SYS_VXWORKS)
d104 5
a108 12
# if defined(_SC_CLK_TCK) \
     && (!defined(OPENSSL_SYS_VMS) || __CTRL_VER >= 70000000)
#  define HZ ((double)sysconf(_SC_CLK_TCK))
# else
#  ifndef CLK_TCK
#   ifndef _BSD_CLK_TCK_ /* FreeBSD hack */
#    define HZ  100.0
#   else /* _BSD_CLK_TCK_ */
#    define HZ ((double)_BSD_CLK_TCK_)
#   endif
#  else /* CLK_TCK */
#   define HZ ((double)CLK_TCK)
d110 2
d124 1
a124 1
#    ifdef OPENSSL_SYS_VXWORKS
d166 1
a166 1
#    ifdef OPENSSL_SYS_VXWORKS
d200 1
a200 1
#  ifdef OPENSSL_SYS_VXWORKS
d225 1
a225 1
#  ifdef OPENSSL_SYS_VXWORKS
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d75 1
a75 5
#ifdef OPENSSL_SYS_NETWARE
#undef TIMES
#endif

#if !defined(_IRIX) || defined (OPENSSL_SYS_NETWARE)
d97 1
a97 1
#if !defined(TIMES) && !defined(OPENSSL_SYS_VXWORKS) && !defined(OPENSSL_SYS_NETWARE)
d109 1
a109 2
/* #  define HZ ((double)sysconf(_SC_CLK_TCK)) */
#  define HZ sysconf(_SC_CLK_TCK)
d123 1
a123 1
struct ms_tm
a130 2
#  elif defined (OPENSSL_SYS_NETWARE)
   clock_t ms_clock;
d139 1
a139 1
	};
d141 1
a141 1
MS_TM *ms_time_new(void)
d152 1
a152 1
	return ret;
d155 1
a155 1
void ms_time_free(MS_TM *a)
d161 1
a161 1
void ms_time_get(MS_TM *tm)
d163 1
a172 2
#  elif defined (OPENSSL_SYS_NETWARE)
   tm->ms_clock = clock();
d183 1
a183 1
double ms_time_diff(MS_TM *a, MS_TM *b)
d185 2
d190 1
a190 2
	ret = HZ;
	ret = (b->ms_tms.tms_utime-a->ms_tms.tms_utime) / ret;
a206 2
# elif defined (OPENSSL_SYS_NETWARE)
    ret= (double)(b->ms_clock - a->ms_clock);
d220 1
a220 1
int ms_time_cmp(const MS_TM *a, const MS_TM *b)
d222 1
d227 1
a227 2
	d = HZ;
	d = (b->ms_tms.tms_utime-a->ms_tms.tms_utime) / d;
a231 2
# elif defined (OPENSSL_SYS_NETWARE)
    d= (double)(b->ms_clock - a->ms_clock);
@


