head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2014.04.13.15.25.29;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.22;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.02;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.08.29;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.24;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.41;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.50;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.02;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@$! INSTALL.COM -- Installs the files in a given directory tree
$!
$! Author: Richard Levitte <richard@@levitte.org>
$! Time of creation: 22-MAY-1998 10:13
$!
$! Changes by Zoltan Arpadffy <zoli@@polarhome.com>
$!
$! P1	root of the directory tree
$!
$	IF P1 .EQS. ""
$	THEN
$	    WRITE SYS$OUTPUT "First argument missing."
$	    WRITE SYS$OUTPUT -
		  "It should be the directory where you want things installed."
$	    EXIT
$	ENDIF
$
$	IF (F$GETSYI("CPU").LT.128)
$	THEN
$	    ARCH := VAX
$	ELSE
$	    ARCH = F$EDIT( F$GETSYI( "ARCH_NAME"), "UPCASE")
$	    IF (ARCH .EQS. "") THEN ARCH = "UNK"
$	ENDIF
$
$	ROOT = F$PARSE(P1,"[]A.;0",,,"SYNTAX_ONLY,NO_CONCEAL") - "A.;0"
$	ROOT_DEV = F$PARSE(ROOT,,,"DEVICE","SYNTAX_ONLY")
$	ROOT_DIR = F$PARSE(ROOT,,,"DIRECTORY","SYNTAX_ONLY") -
		   - "[000000." - "][" - "[" - "]"
$	ROOT = ROOT_DEV + "[" + ROOT_DIR
$
$	DEFINE/NOLOG WRK_SSLROOT 'ROOT'.] /TRANS=CONC
$	DEFINE/NOLOG WRK_SSLLIB WRK_SSLROOT:['ARCH'_LIB]
$	DEFINE/NOLOG WRK_SSLINCLUDE WRK_SSLROOT:[INCLUDE]
$
$	IF F$PARSE("WRK_SSLROOT:[000000]") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLROOT:[000000]
$	IF F$PARSE("WRK_SSLLIB:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLLIB:
$	IF F$PARSE("WRK_SSLINCLUDE:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLINCLUDE:
$
$	SDIRS := ,-
		 _'ARCH',-
		 OBJECTS,-
		 MD2,MD4,MD5,SHA,MDC2,HMAC,RIPEMD,WHRLPOOL,-
		 DES,AES,RC2,RC4,RC5,IDEA,BF,CAST,CAMELLIA,SEED,-
		 BN,EC,RSA,DSA,ECDSA,DH,ECDH,DSO,ENGINE,-
		 BUFFER,BIO,STACK,LHASH,RAND,ERR,-
		 EVP,ASN1,PEM,X509,X509V3,CONF,TXT_DB,PKCS7,PKCS12,COMP,OCSP,-
		 UI,KRB5,-
		 STORE,CMS,PQUEUE,TS,JPAKE
$	EXHEADER_ := crypto.h,opensslv.h,ebcdic.h,symhacks.h,ossl_typ.h
$	EXHEADER__'ARCH' := opensslconf.h
$	EXHEADER_OBJECTS := objects.h,obj_mac.h
$	EXHEADER_MD2 := md2.h
$	EXHEADER_MD4 := md4.h
$	EXHEADER_MD5 := md5.h
$	EXHEADER_SHA := sha.h
$	EXHEADER_MDC2 := mdc2.h
$	EXHEADER_HMAC := hmac.h
$	EXHEADER_RIPEMD := ripemd.h
$	EXHEADER_WHRLPOOL := whrlpool.h
$	EXHEADER_DES := des.h,des_old.h
$	EXHEADER_AES := aes.h
$	EXHEADER_RC2 := rc2.h
$	EXHEADER_RC4 := rc4.h
$	EXHEADER_RC5 := rc5.h
$	EXHEADER_IDEA := idea.h
$	EXHEADER_BF := blowfish.h
$	EXHEADER_CAST := cast.h
$	EXHEADER_CAMELLIA := camellia.h
$	EXHEADER_SEED := seed.h
$	EXHEADER_MODES := modes.h
$	EXHEADER_BN := bn.h
$	EXHEADER_EC := ec.h
$	EXHEADER_RSA := rsa.h
$	EXHEADER_DSA := dsa.h
$	EXHEADER_ECDSA := ecdsa.h
$	EXHEADER_DH := dh.h
$	EXHEADER_ECDH := ecdh.h
$	EXHEADER_DSO := dso.h
$	EXHEADER_ENGINE := engine.h
$	EXHEADER_BUFFER := buffer.h
$	EXHEADER_BIO := bio.h
$	EXHEADER_STACK := stack.h,safestack.h
$	EXHEADER_LHASH := lhash.h
$	EXHEADER_RAND := rand.h
$	EXHEADER_ERR := err.h
$	EXHEADER_EVP := evp.h
$	EXHEADER_ASN1 := asn1.h,asn1_mac.h,asn1t.h
$	EXHEADER_PEM := pem.h,pem2.h
$	EXHEADER_X509 := x509.h,x509_vfy.h
$	EXHEADER_X509V3 := x509v3.h
$	EXHEADER_CONF := conf.h,conf_api.h
$	EXHEADER_TXT_DB := txt_db.h
$	EXHEADER_PKCS7 := pkcs7.h
$	EXHEADER_PKCS12 := pkcs12.h
$	EXHEADER_COMP := comp.h
$	EXHEADER_OCSP := ocsp.h
$	EXHEADER_UI := ui.h,ui_compat.h
$	EXHEADER_KRB5 := krb5_asn.h
$!	EXHEADER_STORE := store.h,str_compat.h
$	EXHEADER_STORE := store.h
$	EXHEADER_CMS := cms.h
$	EXHEADER_PQUEUE := pqueue.h
$	EXHEADER_TS := ts.h
$	EXHEADER_JPAKE := jpake.h
$	LIBS := LIBCRYPTO
$
$	EXE_DIR := [-.'ARCH'.EXE.CRYPTO]
$
$	I = 0
$ LOOP_SDIRS: 
$	D = F$EDIT(F$ELEMENT(I, ",", SDIRS),"TRIM")
$	I = I + 1
$	IF D .EQS. "," THEN GOTO LOOP_SDIRS_END
$	tmp = EXHEADER_'D'
$	IF D .EQS. ""
$	THEN
$	  COPY 'tmp' WRK_SSLINCLUDE: /LOG
$	ELSE
$	  IF D .EQS. "_''ARCH'"
$	  THEN
$	    COPY [-.'ARCH'.CRYPTO]'tmp' WRK_SSLINCLUDE: /LOG
$	  ELSE
$	    COPY [.'D']'tmp' WRK_SSLINCLUDE: /LOG
$	  ENDIF
$	ENDIF
$	SET FILE/PROT=WORLD:RE WRK_SSLINCLUDE:'tmp'
$	GOTO LOOP_SDIRS
$ LOOP_SDIRS_END:
$
$	I = 0
$ LOOP_LIB: 
$	E = F$EDIT(F$ELEMENT(I, ",", LIBS),"TRIM")
$	I = I + 1
$	IF E .EQS. "," THEN GOTO LOOP_LIB_END
$	SET NOON
$	IF F$SEARCH(EXE_DIR+E+".OLB") .NES. ""
$	THEN
$	  COPY 'EXE_DIR''E'.OLB WRK_SSLLIB:'E'.OLB/log
$	  SET FILE/PROT=W:RE WRK_SSLLIB:'E'.OLB
$	ENDIF
$	! Preparing for the time when we have shareable images
$	IF F$SEARCH(EXE_DIR+E+".EXE") .NES. ""
$	THEN
$	  COPY 'EXE_DIR''E'.EXE WRK_SSLLIB:'E'.EXE/log
$	  SET FILE/PROT=W:RE WRK_SSLLIB:'E'.EXE
$	ENDIF
$	SET ON
$	GOTO LOOP_LIB
$ LOOP_LIB_END:
$
$	EXIT
@


1.7
log
@resolve conflicts, fix local changes
@
text
@@


1.6
log
@resolve conflicts
@
text
@d6 2
d13 2
a14 1
$	    WRITE SYS$OUTPUT "Should be the directory where you want things installed."
d18 8
d33 1
a33 2
$	DEFINE/NOLOG WRK_SSLVLIB WRK_SSLROOT:[VAX_LIB]
$	DEFINE/NOLOG WRK_SSLALIB WRK_SSLROOT:[ALPHA_LIB]
d38 2
a39 4
$	IF F$PARSE("WRK_SSLVLIB:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLVLIB:
$	IF F$PARSE("WRK_SSLALIB:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLALIB:
d44 1
d46 1
a46 1
		 MD2,MD4,MD5,SHA,MDC2,HMAC,RIPEMD,-
d52 3
a54 3
		 STORE,PQUEUE,JPAKE
$	EXHEADER_ := crypto.h,tmdiff.h,opensslv.h,opensslconf.h,ebcdic.h,-
		symhacks.h,ossl_typ.h
d63 1
d74 1
d105 3
a107 1
$	EXHEADER_PQUEUE := pqueue.h,pq_compat.h
d111 1
a111 2
$	VEXE_DIR := [-.VAX.EXE.CRYPTO]
$	AEXE_DIR := [-.AXP.EXE.CRYPTO]
d123 6
a128 1
$	  COPY [.'D']'tmp' WRK_SSLINCLUDE: /LOG
d140 1
a140 12
$	IF F$SEARCH(VEXE_DIR+E+".OLB") .NES. ""
$	THEN
$	  COPY 'VEXE_DIR''E'.OLB WRK_SSLVLIB:'E'.OLB/log
$	  SET FILE/PROT=W:RE WRK_SSLVLIB:'E'.OLB
$	ENDIF
$	! Preparing for the time when we have shareable images
$	IF F$SEARCH(VEXE_DIR+E+".EXE") .NES. ""
$	THEN
$	  COPY 'VEXE_DIR''E'.EXE WRK_SSLVLIB:'E'.EXE/log
$	  SET FILE/PROT=W:RE WRK_SSLVLIB:'E'.EXE
$	ENDIF
$	IF F$SEARCH(AEXE_DIR+E+".OLB") .NES. ""
d142 2
a143 2
$	  COPY 'AEXE_DIR''E'.OLB WRK_SSLALIB:'E'.OLB/log
$	  SET FILE/PROT=W:RE WRK_SSLALIB:'E'.OLB
d146 1
a146 1
$	IF F$SEARCH(AEXE_DIR+E+".EXE") .NES. ""
d148 2
a149 2
$	  COPY 'AEXE_DIR''E'.EXE WRK_SSLALIB:'E'.EXE/log
$	  SET FILE/PROT=W:RE WRK_SSLALIB:'E'.EXE
@


1.5
log
@resolve conflicts
@
text
@d38 2
a39 2
		 DES,RC2,RC4,RC5,IDEA,BF,CAST,CAMELLIA,SEED,-
		 BN,EC,RSA,DSA,ECDSA,DH,ECDH,DSO,ENGINE,AES,-
d43 1
a43 1
		 STORE,CMS,PQUEUE
d55 1
a72 1
$	EXHEADER_AES := aes.h
d95 1
a95 1
$	EXHEADER_CMS := cms.h
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d35 6
a40 4
$	SDIRS := ,MD2,MD4,MD5,SHA,MDC2,HMAC,RIPEMD,-
		 DES,RC2,RC4,RC5,IDEA,BF,CAST,-
		 BN,EC,RSA,DSA,DH,DSO,ENGINE,AES,-
		 BUFFER,BIO,STACK,LHASH,RAND,ERR,OBJECTS,-
d42 2
a43 1
		 UI,KRB5
d46 1
d61 2
d67 1
d69 1
a78 1
$	EXHEADER_OBJECTS := objects.h,obj_mac.h
d92 4
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d37 1
a37 1
		 BN,RSA,DSA,DH,DSO,ENGINE,-
d39 4
a42 2
		 EVP,ASN1,PEM,X509,X509V3,CONF,TXT_DB,PKCS7,PKCS12,COMP
$	EXHEADER_ := crypto.h,tmdiff.h,opensslv.h,opensslconf.h,ebcdic.h,symhacks.h
d50 1
a50 1
$	EXHEADER_DES := des.h
d58 1
d64 1
d73 1
a73 1
$	EXHEADER_ASN1 := asn1.h,asn1_mac.h
d82 3
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d35 1
a35 1
$	SDIRS := ,MD2,MD5,SHA,MDC2,HMAC,RIPEMD,-
d37 1
a37 1
		 BN,RSA,DSA,DH,-
d39 2
a40 3
		 EVP,ASN1,PEM,X509,X509V3,-
		 CONF,TXT_DB,PKCS7,PKCS12,COMP
$	EXHEADER_ := crypto.h,tmdiff.h,opensslv.h,opensslconf.h,ebcdic.h
d42 1
d59 2
d67 1
a67 1
$	EXHEADER_OBJECTS := objects.h
d73 1
a73 1
$	EXHEADER_CONF := conf.h
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d93 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d35 1
a35 1
$	SDIRS := ,MD2,MD4,MD5,SHA,MDC2,HMAC,RIPEMD,-
d37 1
a37 1
		 BN,EC,RSA,DSA,DH,DSO,ENGINE,AES,-
d39 3
a41 4
		 EVP,ASN1,PEM,X509,X509V3,CONF,TXT_DB,PKCS7,PKCS12,COMP,OCSP,-
		 UI,KRB5
$	EXHEADER_ := crypto.h,tmdiff.h,opensslv.h,opensslconf.h,ebcdic.h,-
		symhacks.h,ossl_typ.h
a42 1
$	EXHEADER_MD4 := md4.h
d48 1
a48 1
$	EXHEADER_DES := des.h,des_old.h
a55 1
$	EXHEADER_EC := ec.h
a58 3
$	EXHEADER_DSO := dso.h
$	EXHEADER_ENGINE := engine.h
$	EXHEADER_AES := aes.h
d65 1
a65 1
$	EXHEADER_OBJECTS := objects.h,obj_mac.h
d67 1
a67 1
$	EXHEADER_ASN1 := asn1.h,asn1_mac.h,asn1t.h
d71 1
a71 1
$	EXHEADER_CONF := conf.h,conf_api.h
a75 3
$	EXHEADER_OCSP := ocsp.h
$	EXHEADER_UI := ui.h,ui_compat.h
$	EXHEADER_KRB5 := krb5_asn.h
a92 1
$	SET FILE/PROT=WORLD:RE WRK_SSLINCLUDE:'tmp'
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d35 4
a38 6
$	SDIRS := ,-
		 OBJECTS,-
		 MD2,MD4,MD5,SHA,MDC2,HMAC,RIPEMD,-
		 DES,RC2,RC4,RC5,IDEA,BF,CAST,CAMELLIA,SEED,-
		 BN,EC,RSA,DSA,ECDSA,DH,ECDH,DSO,ENGINE,AES,-
		 BUFFER,BIO,STACK,LHASH,RAND,ERR,-
d40 1
a40 2
		 UI,KRB5,-
		 STORE,CMS,PQUEUE
a42 1
$	EXHEADER_OBJECTS := objects.h,obj_mac.h
a56 2
$	EXHEADER_CAMELLIA := camellia.h
$	EXHEADER_SEED := seed.h
a60 1
$	EXHEADER_ECDSA := ecdsa.h
a61 1
$	EXHEADER_ECDH := ecdh.h
d71 1
a84 4
$!	EXHEADER_STORE := store.h,str_compat.h
$	EXHEADER_STORE := store.h
$	EXHEADER_PQUEUE := pqueue.h,pq_compat.h
$	EXHEADER_CMS := cms.h
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d38 2
a39 2
		 DES,AES,RC2,RC4,RC5,IDEA,BF,CAST,CAMELLIA,SEED,-
		 BN,EC,RSA,DSA,ECDSA,DH,ECDH,DSO,ENGINE,-
d43 1
a43 1
		 STORE,PQUEUE,JPAKE
a54 1
$	EXHEADER_AES := aes.h
d72 1
d95 1
a95 1
$	EXHEADER_JPAKE := jpake.h
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a5 2
$! Changes by Zoltan Arpadffy <zoli@@polarhome.com>
$!
d11 1
a11 2
$	    WRITE SYS$OUTPUT -
		  "It should be the directory where you want things installed."
a14 8
$	IF (F$GETSYI("CPU").LT.128)
$	THEN
$	    ARCH := VAX
$	ELSE
$	    ARCH = F$EDIT( F$GETSYI( "ARCH_NAME"), "UPCASE")
$	    IF (ARCH .EQS. "") THEN ARCH = "UNK"
$	ENDIF
$
d22 2
a23 1
$	DEFINE/NOLOG WRK_SSLLIB WRK_SSLROOT:['ARCH'_LIB]
d28 4
a31 2
$	IF F$PARSE("WRK_SSLLIB:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLLIB:
a35 1
		 _'ARCH',-
d37 1
a37 1
		 MD2,MD4,MD5,SHA,MDC2,HMAC,RIPEMD,WHRLPOOL,-
d43 3
a45 3
		 STORE,CMS,PQUEUE,TS,JPAKE
$	EXHEADER_ := crypto.h,opensslv.h,ebcdic.h,symhacks.h,ossl_typ.h
$	EXHEADER__'ARCH' := opensslconf.h
a53 1
$	EXHEADER_WHRLPOOL := whrlpool.h
a63 1
$	EXHEADER_MODES := modes.h
d94 1
a94 3
$	EXHEADER_CMS := cms.h
$	EXHEADER_PQUEUE := pqueue.h
$	EXHEADER_TS := ts.h
d98 2
a99 1
$	EXE_DIR := [-.'ARCH'.EXE.CRYPTO]
d111 1
a111 6
$	  IF D .EQS. "_''ARCH'"
$	  THEN
$	    COPY [-.'ARCH'.CRYPTO]'tmp' WRK_SSLINCLUDE: /LOG
$	  ELSE
$	    COPY [.'D']'tmp' WRK_SSLINCLUDE: /LOG
$	  ENDIF
d123 12
a134 1
$	IF F$SEARCH(EXE_DIR+E+".OLB") .NES. ""
d136 2
a137 2
$	  COPY 'EXE_DIR''E'.OLB WRK_SSLLIB:'E'.OLB/log
$	  SET FILE/PROT=W:RE WRK_SSLLIB:'E'.OLB
d140 1
a140 1
$	IF F$SEARCH(EXE_DIR+E+".EXE") .NES. ""
d142 2
a143 2
$	  COPY 'EXE_DIR''E'.EXE WRK_SSLLIB:'E'.EXE/log
$	  SET FILE/PROT=W:RE WRK_SSLLIB:'E'.EXE
@


