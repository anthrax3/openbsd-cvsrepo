head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.8
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.4
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	butholakala:1.7
	openssl_1_0_1_g:1.1.1.4
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.26
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.24
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.22
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.20
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.18
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.16
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.02.12.03.54.07;	author jsing;	state Exp;
branches;
next	1.14;
commitid	8Uvg1V8TDfVq15dl;

1.14
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.13;
commitid	yQEL1wOWIearrW15;

1.13
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.12;
commitid	nzndm3zqPmFurSaK;

1.12
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	mJUVYpkFBZ0Zv2bG;

1.11
date	2014.05.24.16.03.10;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.05.24.13.11.01;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.28.21.14.50;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.40;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.29;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.55;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.58;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.43;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.43;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.12;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.54;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@If you do not support POSIX I/O then you're not tall enough to ride...

ok tedu@@
@
text
@/* $OpenBSD: enc_read.c,v 1.14 2014/07/11 08:44:48 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>

#include <openssl/opensslconf.h>

#include "des_locl.h"

/* This has some uglies in it but it works - even over sockets. */
/*extern int errno;*/
int DES_rw_mode = DES_PCBC_MODE;

/*
 * WARNINGS:
 *
 *  -  The data format used by DES_enc_write() and DES_enc_read()
 *     has a cryptographic weakness: When asked to write more
 *     than MAXWRITE bytes, DES_enc_write will split the data
 *     into several chunks that are all encrypted
 *     using the same IV.  So don't use these functions unless you
 *     are sure you know what you do (in which case you might
 *     not want to use them anyway).
 *
 *  -  This code cannot handle non-blocking sockets.
 *
 *  -  This function uses an internal state and thus cannot be
 *     used on multiple files.
 */


int DES_enc_read(int fd, void *buf, int len, DES_key_schedule *sched,
		 DES_cblock *iv)
	{
	/* data to be unencrypted */
	int net_num=0;
	static unsigned char *net=NULL;
	/* extra unencrypted data 
	 * for when a block of 100 comes in but is des_read one byte at
	 * a time. */
	static unsigned char *unnet=NULL;
	static int unnet_start=0;
	static int unnet_left=0;
	static unsigned char *tmpbuf=NULL;
	int i;
	long num=0,rnum;
	unsigned char *p;

	if (tmpbuf == NULL)
		{
		tmpbuf=malloc(BSIZE);
		if (tmpbuf == NULL) return(-1);
		}
	if (net == NULL)
		{
		net=malloc(BSIZE);
		if (net == NULL) return(-1);
		}
	if (unnet == NULL)
		{
		unnet=malloc(BSIZE);
		if (unnet == NULL) return(-1);
		}
	/* left over data from last decrypt */
	if (unnet_left != 0)
		{
		if (unnet_left < len)
			{
			/* we still still need more data but will return
			 * with the number of bytes we have - should always
			 * check the return value */
			memcpy(buf,&(unnet[unnet_start]),
			       unnet_left);
			/* eay 26/08/92 I had the next 2 lines
			 * reversed :-( */
			i=unnet_left;
			unnet_start=unnet_left=0;
			}
		else
			{
			memcpy(buf,&(unnet[unnet_start]),len);
			unnet_start+=len;
			unnet_left-=len;
			i=len;
			}
		return(i);
		}

	/* We need to get more data. */
	if (len > MAXWRITE) len=MAXWRITE;

	/* first - get the length */
	while (net_num < HDRSIZE) 
		{
		i=read(fd,(void *)&(net[net_num]),HDRSIZE-net_num);
#ifdef EINTR
		if ((i == -1) && (errno == EINTR)) continue;
#endif
		if (i <= 0) return(0);
		net_num+=i;
		}

	/* we now have at net_num bytes in net */
	p=net;
	/* num=0;  */
	n2l(p,num);
	/* num should be rounded up to the next group of eight
	 * we make sure that we have read a multiple of 8 bytes from the net.
	 */
	if ((num > MAXWRITE) || (num < 0)) /* error */
		return(-1);
	rnum=(num < 8)?8:((num+7)/8*8);

	net_num=0;
	while (net_num < rnum)
		{
		i=read(fd,(void *)&(net[net_num]),rnum-net_num);
#ifdef EINTR
		if ((i == -1) && (errno == EINTR)) continue;
#endif
		if (i <= 0) return(0);
		net_num+=i;
		}

	/* Check if there will be data left over. */
	if (len < num)
		{
		if (DES_rw_mode & DES_PCBC_MODE)
			DES_pcbc_encrypt(net,unnet,num,sched,iv,DES_DECRYPT);
		else
			DES_cbc_encrypt(net,unnet,num,sched,iv,DES_DECRYPT);
		memcpy(buf,unnet,len);
		unnet_start=len;
		unnet_left=num-len;

		/* The following line is done because we return num
		 * as the number of bytes read. */
		num=len;
		}
	else
		{
		/* >output is a multiple of 8 byes, if len < rnum
		 * >we must be careful.  The user must be aware that this
		 * >routine will write more bytes than he asked for.
		 * >The length of the buffer must be correct.
		 * FIXED - Should be ok now 18-9-90 - eay */
		if (len < rnum)
			{

			if (DES_rw_mode & DES_PCBC_MODE)
				DES_pcbc_encrypt(net,tmpbuf,num,sched,iv,
						 DES_DECRYPT);
			else
				DES_cbc_encrypt(net,tmpbuf,num,sched,iv,
						DES_DECRYPT);

			/* eay 26/08/92 fix a bug that returned more
			 * bytes than you asked for (returned len bytes :-( */
			memcpy(buf,tmpbuf,num);
			}
		else
			{
			if (DES_rw_mode & DES_PCBC_MODE)
				DES_pcbc_encrypt(net,buf,num,sched,iv,
						 DES_DECRYPT);
			else
				DES_cbc_encrypt(net,buf,num,sched,iv,
						DES_DECRYPT);
			}
		}
	return num;
	}

@


1.14
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc_read.c,v 1.13 2014/07/10 22:45:56 jsing Exp $ */
a90 3
#if defined(OPENSSL_NO_POSIX_IO)
	return(0);
#else
a227 1
#endif /* OPENSSL_NO_POSIX_IO */
@


1.13
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: enc_read.c,v 1.12 2014/06/12 15:49:28 deraadt Exp $ */
d59 1
a60 1
#include <errno.h>
a63 1
#include "cryptlib.h"
a68 1

@


1.12
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d61 3
@


1.11
log
@Remove the _shadow_ indirection, which is unnecessary in a world without
OPENSSL_EXPORT_VAR_AS_FUNCTION.

ok miod@@
@
text
@d1 1
a1 1
/* crypto/des/enc_read.c */
@


1.10
log
@Expand the OPENSSL_.*GLOBAL.* macros and stop including e_os2.h.

ok miod@@ beck@@
@
text
@d66 1
a66 1
int _shadow_DES_rw_mode = DES_PCBC_MODE;
@


1.9
log
@Remove WIN32, WIN64 and MINGW32 tentacles.
Also check for _LP64 rather than __arch64__ (the former being more reliable
than __LP64__ or __arch64__) to tell 64-bit int platforms apart from 32-bit
int platforms.

Loosely based upon a diff from Martijn van Duren on tech@@
@
text
@d66 1
a66 1
OPENSSL_IMPLEMENT_GLOBAL(int,DES_rw_mode,DES_PCBC_MODE)
@


1.8
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a152 1
#ifndef OPENSSL_SYS_WIN32
a153 3
#else
		i=_read(fd,(void *)&(net[net_num]),HDRSIZE-net_num);
#endif
a174 1
#ifndef OPENSSL_SYS_WIN32
a175 3
#else
		i=_read(fd,(void *)&(net[net_num]),rnum-net_num);
#endif
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d109 1
a109 1
		tmpbuf=OPENSSL_malloc(BSIZE);
d114 1
a114 1
		net=OPENSSL_malloc(BSIZE);
d119 1
a119 1
		unnet=OPENSSL_malloc(BSIZE);
@


1.6
log
@resolve conflicts
@
text
@d66 1
a66 1
OPENSSL_IMPLEMENT_GLOBAL(int,DES_rw_mode)=DES_PCBC_MODE;
d90 3
d153 1
a153 1
#ifndef _WIN32
d179 1
d181 3
d238 1
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d150 1
d152 3
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d66 1
a66 1
OPENSSL_GLOBAL int des_rw_mode=DES_PCBC_MODE;
d72 1
a72 1
 *  -  The data format used by des_enc_write() and des_enc_read()
d74 1
a74 1
 *     than MAXWRITE bytes, des_enc_write will split the data
d87 2
a88 2
int des_enc_read(int fd, void *buf, int len, des_key_schedule sched,
		 des_cblock *iv)
d183 2
a184 2
		if (des_rw_mode & DES_PCBC_MODE)
			des_pcbc_encrypt(net,unnet,num,sched,iv,DES_DECRYPT);
d186 1
a186 1
			des_cbc_encrypt(net,unnet,num,sched,iv,DES_DECRYPT);
d205 2
a206 2
			if (des_rw_mode & DES_PCBC_MODE)
				des_pcbc_encrypt(net,tmpbuf,num,sched,iv,
d209 1
a209 1
				des_cbc_encrypt(net,tmpbuf,num,sched,iv,
d218 2
a219 2
			if (des_rw_mode & DES_PCBC_MODE)
				des_pcbc_encrypt(net,buf,num,sched,iv,
d222 1
a222 1
				des_cbc_encrypt(net,buf,num,sched,iv,
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d106 1
a106 1
		tmpbuf=Malloc(BSIZE);
d111 1
a111 1
		net=Malloc(BSIZE);
d116 1
a116 1
		unnet=Malloc(BSIZE);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d150 1
a150 1
		i=read(fd,&(net[net_num]),HDRSIZE-net_num);
d172 1
a172 1
		i=read(fd,&(net[net_num]),rnum-net_num);
@


1.1
log
@Initial revision
@
text
@d61 1
d66 1
a66 1
int des_rw_mode=DES_PCBC_MODE;
d68 21
a88 6
int des_enc_read(fd, buf, len, sched, iv)
int fd;
char *buf;
int len;
des_key_schedule sched;
des_cblock (*iv);
d96 1
a96 1
	static char *unnet=NULL;
d99 1
a99 1
	static char *tmpbuf=NULL;
d106 1
a106 1
		tmpbuf=(char *)malloc(BSIZE);
d111 1
a111 1
		net=(unsigned char *)malloc(BSIZE);
d116 1
a116 1
		unnet=(char *)malloc(BSIZE);
d128 1
a128 1
				(unsigned int)unnet_left);
d136 1
a136 1
			memcpy(buf,&(unnet[unnet_start]),(unsigned int)len);
d150 1
a150 1
		i=read(fd,&(net[net_num]),(unsigned int)HDRSIZE-net_num);
d172 1
a172 1
		i=read(fd,&(net[net_num]),(unsigned int)rnum-net_num);
d184 1
a184 2
			des_pcbc_encrypt((des_cblock *)net,(des_cblock *)unnet,
				num,sched,iv,DES_DECRYPT);
d186 2
a187 3
			des_cbc_encrypt((des_cblock *)net,(des_cblock *)unnet,
				num,sched,iv,DES_DECRYPT);
		memcpy(buf,unnet,(unsigned int)len);
d189 1
a189 1
		unnet_left=(int)num-len;
d206 2
a207 3
				des_pcbc_encrypt((des_cblock *)net,
					(des_cblock *)tmpbuf,
					num,sched,iv,DES_DECRYPT);
d209 2
a210 3
				des_cbc_encrypt((des_cblock *)net,
					(des_cblock *)tmpbuf,
					num,sched,iv,DES_DECRYPT);
d214 1
a214 1
			memcpy(buf,tmpbuf,(unsigned int)num);
d219 2
a220 3
				des_pcbc_encrypt((des_cblock *)net,
					(des_cblock *)buf,num,sched,iv,
					DES_DECRYPT);
d222 2
a223 3
				des_cbc_encrypt((des_cblock *)net,
					(des_cblock *)buf,num,sched,iv,
					DES_DECRYPT);
d226 1
a226 1
	return((int)num);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a60 1
#include "cryptlib.h"
d65 1
a65 1
OPENSSL_IMPLEMENT_GLOBAL(int,DES_rw_mode)=DES_PCBC_MODE;
d67 6
a72 21

/*
 * WARNINGS:
 *
 *  -  The data format used by DES_enc_write() and DES_enc_read()
 *     has a cryptographic weakness: When asked to write more
 *     than MAXWRITE bytes, DES_enc_write will split the data
 *     into several chunks that are all encrypted
 *     using the same IV.  So don't use these functions unless you
 *     are sure you know what you do (in which case you might
 *     not want to use them anyway).
 *
 *  -  This code cannot handle non-blocking sockets.
 *
 *  -  This function uses an internal state and thus cannot be
 *     used on multiple files.
 */


int DES_enc_read(int fd, void *buf, int len, DES_key_schedule *sched,
		 DES_cblock *iv)
d80 1
a80 1
	static unsigned char *unnet=NULL;
d83 1
a83 1
	static unsigned char *tmpbuf=NULL;
d90 1
a90 1
		tmpbuf=OPENSSL_malloc(BSIZE);
d95 1
a95 1
		net=OPENSSL_malloc(BSIZE);
d100 1
a100 1
		unnet=OPENSSL_malloc(BSIZE);
d112 1
a112 1
			       unnet_left);
d120 1
a120 1
			memcpy(buf,&(unnet[unnet_start]),len);
d134 1
a134 1
		i=read(fd,(void *)&(net[net_num]),HDRSIZE-net_num);
d156 1
a156 1
		i=read(fd,(void *)&(net[net_num]),rnum-net_num);
d167 3
a169 2
		if (DES_rw_mode & DES_PCBC_MODE)
			DES_pcbc_encrypt(net,unnet,num,sched,iv,DES_DECRYPT);
d171 3
a173 2
			DES_cbc_encrypt(net,unnet,num,sched,iv,DES_DECRYPT);
		memcpy(buf,unnet,len);
d175 1
a175 1
		unnet_left=num-len;
d191 4
a194 3
			if (DES_rw_mode & DES_PCBC_MODE)
				DES_pcbc_encrypt(net,tmpbuf,num,sched,iv,
						 DES_DECRYPT);
d196 3
a198 2
				DES_cbc_encrypt(net,tmpbuf,num,sched,iv,
						DES_DECRYPT);
d202 1
a202 1
			memcpy(buf,tmpbuf,num);
d206 4
a209 3
			if (DES_rw_mode & DES_PCBC_MODE)
				DES_pcbc_encrypt(net,buf,num,sched,iv,
						 DES_DECRYPT);
d211 3
a213 2
				DES_cbc_encrypt(net,buf,num,sched,iv,
						DES_DECRYPT);
d216 1
a216 1
	return num;
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@a149 1
#ifndef _WIN32
a150 3
#else
		i=_read(fd,(void *)&(net[net_num]),HDRSIZE-net_num);
#endif
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d66 1
a66 1
OPENSSL_IMPLEMENT_GLOBAL(int,DES_rw_mode,DES_PCBC_MODE)
a89 3
#if defined(OPENSSL_NO_POSIX_IO)
	return(0);
#else
d150 1
a150 1
#ifndef OPENSSL_SYS_WIN32
a175 1
#ifndef OPENSSL_SYS_WIN32
a176 3
#else
		i=_read(fd,(void *)&(net[net_num]),rnum-net_num);
#endif
a230 1
#endif /* OPENSSL_NO_POSIX_IO */
@


