head	1.14;
access;
symbols
	OPENBSD_6_0:1.14.0.8
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.4
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	butholakala:1.5
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.5.0.46
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.42
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.5.0.36
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.10.22.13.02.04;	author jsing;	state Exp;
branches;
next	1.13;
commitid	PjnBgKe6Buhbf937;

1.13
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.12;
commitid	yQEL1wOWIearrW15;

1.12
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.11;
commitid	id8dTrTMtnTn4fqt;

1.11
date	2014.07.10.11.25.13;	author tedu;	state Exp;
branches;
next	1.10;
commitid	Pv7aSK7aYL3NQSpP;

1.10
date	2014.07.10.07.41.54;	author jsing;	state Exp;
branches;
next	1.9;
commitid	jUMlY9Sd4asS43dM;

1.9
date	2014.07.09.19.51.38;	author jsing;	state Exp;
branches;
next	1.8;
commitid	1XPBWlejiS4drgFK;

1.8
date	2014.07.09.08.20.08;	author miod;	state Exp;
branches;
next	1.7;
commitid	JPwi7kYvSgWTaIWo;

1.7
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.04.23.22.26.25;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.38;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.16;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.11.40;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.43;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.54;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.46;	author markus;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@/* $OpenBSD: rsa_pk1.c,v 1.13 2014/07/11 08:44:49 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/rsa.h>

int
RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen,
    const unsigned char *from, int flen)
{
	int j;
	unsigned char *p;

	if (flen > (tlen - RSA_PKCS1_PADDING_SIZE)) {
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1,
		    RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
		return 0;
	}

	p = (unsigned char *)to;

	*(p++) = 0;
	*(p++) = 1; /* Private Key BT (Block Type) */

	/* pad out with 0xff data */
	j = tlen - 3 - flen;
	memset(p, 0xff, j);
	p += j;
	*(p++) = '\0';
	memcpy(p, from, flen);

	return 1;
}

int
RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen,
    const unsigned char *from, int flen, int num)
{
	int i, j;
	const unsigned char *p;

	p = from;
	if (num != flen + 1 || *(p++) != 01) {
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,
		    RSA_R_BLOCK_TYPE_IS_NOT_01);
		return -1;
	}

	/* scan over padding data */
	j = flen - 1; /* one for type. */
	for (i = 0; i < j; i++) {
		if (*p != 0xff) {
			/* should decrypt to 0xff */
			if (*p == 0) {
				p++;
				break;
			} else {
				RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,
				    RSA_R_BAD_FIXED_HEADER_DECRYPT);
				return -1;
			}
		}
		p++;
	}

	if (i == j) {
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,
		    RSA_R_NULL_BEFORE_BLOCK_MISSING);
		return -1;
	}

	if (i < 8) {
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,
		    RSA_R_BAD_PAD_BYTE_COUNT);
		return -1;
	}
	i++; /* Skip over the '\0' */
	j -= i;
	if (j > tlen) {
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,
		    RSA_R_DATA_TOO_LARGE);
		return -1;
	}
	memcpy(to, p, j);

	return j;
}

int
RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen,
    const unsigned char *from, int flen)
{
	int i, j;
	unsigned char *p;

	if (flen > tlen - 11) {
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2,
		    RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
		return 0;
	}

	p = (unsigned char *)to;

	*(p++) = 0;
	*(p++) = 2; /* Public Key BT (Block Type) */

	/* pad out with non-zero random data */
	j = tlen - 3 - flen;

	arc4random_buf(p, j);
	for (i = 0; i < j; i++) {
		while (*p == '\0')
			arc4random_buf(p, 1);
		p++;
	}

	*(p++) = '\0';

	memcpy(p, from, flen);
	return 1;
}

int
RSA_padding_check_PKCS1_type_2(unsigned char *to, int tlen,
    const unsigned char *from, int flen, int num)
{
	int i, j;
	const unsigned char *p;

	p = from;
	if (num != flen + 1 || *(p++) != 02) {
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2,
		    RSA_R_BLOCK_TYPE_IS_NOT_02);
		return -1;
	}

	/* scan over padding data */
	j = flen - 1; /* one for type. */
	for (i = 0; i < j; i++)
		if (*(p++) == 0)
			break;

	if (i == j) {
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2,
		    RSA_R_NULL_BEFORE_BLOCK_MISSING);
		return -1;
	}

	if (i < 8) {
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2,
		    RSA_R_BAD_PAD_BYTE_COUNT);
		return -1;
	}
	i++; /* Skip over the '\0' */
	j -= i;
	if (j > tlen) {
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2,
		    RSA_R_DATA_TOO_LARGE);
		return -1;
	}
	memcpy(to, p, j);

	return j;
}
@


1.13
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pk1.c,v 1.12 2014/07/10 13:58:23 jsing Exp $ */
d60 1
a65 1
#include <openssl/rand.h>
d170 1
a170 2
	if (RAND_bytes(p, j) <= 0)
		return 0;
d172 2
a173 4
		while (*p == '\0') {
			if (RAND_bytes(p, 1) <= 0)
				return 0;
		}
@


1.12
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pk1.c,v 1.11 2014/07/10 11:25:13 tedu Exp $ */
a61 1
#include "cryptlib.h"
d63 1
@


1.11
log
@delete some casts. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pk1.c,v 1.10 2014/07/10 07:41:54 jsing Exp $ */
d60 2
@


1.10
log
@Use a while loop instead of an ifdowhile loop.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pk1.c,v 1.9 2014/07/09 19:51:38 jsing Exp $ */
d88 1
a88 1
	memcpy(p, from, (unsigned int)flen);
d142 1
a142 1
	memcpy(to, p, (unsigned int)j);
d180 1
a180 1
	memcpy(p, from, (unsigned int)flen);
d222 1
a222 1
	memcpy(to, p, (unsigned int)j);
@


1.9
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pk1.c,v 1.8 2014/07/09 08:20:08 miod Exp $ */
d171 4
a174 5
		if (*p == '\0')
			do {
				if (RAND_bytes(p, 1) <= 0)
					return 0;
			} while (*p == '\0');
@


1.8
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pk1.c,v 1.7 2014/06/12 15:49:30 deraadt Exp $ */
d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d72 1
a72 1
	if (flen > (tlen-RSA_PKCS1_PADDING_SIZE)) {
d77 1
a77 1
	
d89 1
d110 2
a111 1
		if (*p != 0xff) { /* should decrypt to 0xff */
d151 1
a151 1
	int i,j;
d153 1
a153 1
	
d159 1
a159 1
	
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d65 4
a68 3
int RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen,
	     const unsigned char *from, int flen)
	{
d72 5
a76 5
	if (flen > (tlen-RSA_PKCS1_PADDING_SIZE))
		{
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1,RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
		return(0);
		}
d78 1
a78 1
	p=(unsigned char *)to;
d80 2
a81 2
	*(p++)=0;
	*(p++)=1; /* Private Key BT (Block Type) */
d84 13
a96 12
	j=tlen-3-flen;
	memset(p,0xff,j);
	p+=j;
	*(p++)='\0';
	memcpy(p,from,(unsigned int)flen);
	return(1);
	}

int RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen,
	     const unsigned char *from, int flen, int num)
	{
	int i,j;
d99 6
a104 6
	p=from;
	if ((num != (flen+1)) || (*(p++) != 01))
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,RSA_R_BLOCK_TYPE_IS_NOT_01);
		return(-1);
		}
d107 10
a116 11
	j=flen-1; /* one for type. */
	for (i=0; i<j; i++)
		{
		if (*p != 0xff) /* should decrypt to 0xff */
			{
			if (*p == 0)
				{ p++; break; }
			else	{
				RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,RSA_R_BAD_FIXED_HEADER_DECRYPT);
				return(-1);
				}
d118 1
d120 1
a120 1
		}
d122 5
a126 5
	if (i == j)
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,RSA_R_NULL_BEFORE_BLOCK_MISSING);
		return(-1);
		}
d128 5
a132 5
	if (i < 8)
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,RSA_R_BAD_PAD_BYTE_COUNT);
		return(-1);
		}
d134 7
a140 7
	j-=i;
	if (j > tlen)
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,RSA_R_DATA_TOO_LARGE);
		return(-1);
		}
	memcpy(to,p,(unsigned int)j);
d142 2
a143 2
	return(j);
	}
d145 4
a148 3
int RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen,
	     const unsigned char *from, int flen)
	{
d152 5
a156 5
	if (flen > (tlen-11))
		{
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2,RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
		return(0);
		}
d158 1
a158 1
	p=(unsigned char *)to;
d160 2
a161 2
	*(p++)=0;
	*(p++)=2; /* Public Key BT (Block Type) */
d164 1
a164 1
	j=tlen-3-flen;
d166 3
a168 4
	if (RAND_bytes(p,j) <= 0)
		return(0);
	for (i=0; i<j; i++)
		{
d170 4
a173 4
			do	{
				if (RAND_bytes(p,1) <= 0)
					return(0);
				} while (*p == '\0');
d175 1
a175 3
		}

	*(p++)='\0';
d177 1
a177 3
	memcpy(p,from,(unsigned int)flen);
	return(1);
	}
d179 9
a187 4
int RSA_padding_check_PKCS1_type_2(unsigned char *to, int tlen,
	     const unsigned char *from, int flen, int num)
	{
	int i,j;
d190 6
a195 6
	p=from;
	if ((num != (flen+1)) || (*(p++) != 02))
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2,RSA_R_BLOCK_TYPE_IS_NOT_02);
		return(-1);
		}
d198 10
a207 9
	j=flen-1; /* one for type. */
	for (i=0; i<j; i++)
		if (*(p++) == 0) break;

	if (i == j)
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2,RSA_R_NULL_BEFORE_BLOCK_MISSING);
		return(-1);
		}
d209 5
a213 5
	if (i < 8)
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2,RSA_R_BAD_PAD_BYTE_COUNT);
		return(-1);
		}
d215 5
a219 9
	j-=i;
	if (j > tlen)
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2,RSA_R_DATA_TOO_LARGE);
		return(-1);
		}
	memcpy(to,p,(unsigned int)j);

	return(j);
d221 1
d223 2
@


1.6
log
@Unifdef -UPKCS1_CHECK and remove SSL_OP_PKCS1_CHECK_[12], this is leftover
``debug'' code from a 15+ years old bugfix and the SSL_OP_PKCS1_CHECK_*
constants have had a value of zero since ages. No production code should use
them.

ok beck@@
@
text
@d1 1
a1 1
/* crypto/rsa/rsa_pk1.c */
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@a192 3
#ifdef PKCS1_CHECK
	return(num-11);
#endif
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d71 1
a71 1
	if (flen > (tlen-11))
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d66 1
a66 1
	     unsigned char *from, int flen)
d92 1
a92 1
	     unsigned char *from, int flen, int num)
d95 1
a95 1
	unsigned char *p;
d144 1
a144 1
	     unsigned char *from, int flen)
d182 1
a182 1
	     unsigned char *from, int flen, int num)
d185 1
a185 1
	unsigned char *p;
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d82 1
a82 1
	/* padd out with 0xff data */
d133 5
d163 2
a164 1
	RAND_bytes(p,j);
d169 2
a170 1
				RAND_bytes(p,1);
d215 5
@


1.1
log
@Initial revision
@
text
@d61 3
a63 13
#include "bn.h"
#include "rsa.h"
#include "rand.h"

#ifndef NOPROTO
int RSA_padding_add_PKCS1_type_1();
int RSA_padding_check_PKCS1_type_1();
int RSA_padding_add_PKCS1_type_2();
int RSA_padding_check_PKCS1_type_2();
int RSA_padding_add_SSLv23();
int RSA_padding_check_SSLv23();
int RSA_padding_add_none();
int RSA_padding_check_none();
d65 2
a66 7
#endif

int RSA_padding_add_PKCS1_type_1(to,tlen,from,flen)
unsigned char *to;
int tlen;
unsigned char *from;
int flen;
d91 2
a92 5
int RSA_padding_check_PKCS1_type_1(to,tlen,from,flen)
unsigned char *to;
int tlen;
unsigned char *from;
int flen;
d98 1
a98 1
	if (*(p++) != 01)
d138 2
a139 5
int RSA_padding_add_PKCS1_type_2(to,tlen,from,flen)
unsigned char *to;
int tlen;
unsigned char *from;
int flen;
d174 2
a175 5
int RSA_padding_check_PKCS1_type_2(to,tlen,from,flen)
unsigned char *to;
int tlen;
unsigned char *from;
int flen;
d181 1
a181 1
	if (*(p++) != 02)
d186 3
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 13
a73 3
#include <openssl/bn.h>
#include <openssl/rsa.h>
#include <openssl/rand.h>
d75 7
a81 2
int RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen,
	     const unsigned char *from, int flen)
d97 1
a97 1
	/* pad out with 0xff data */
d106 5
a110 2
int RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen,
	     const unsigned char *from, int flen, int num)
d113 1
a113 1
	const unsigned char *p;
d116 1
a116 1
	if ((num != (flen+1)) || (*(p++) != 01))
a150 5
	if (j > tlen)
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1,RSA_R_DATA_TOO_LARGE);
		return(-1);
		}
d156 5
a160 2
int RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen,
	     const unsigned char *from, int flen)
d179 1
a179 2
	if (RAND_bytes(p,j) <= 0)
		return(0);
d184 1
a184 2
				if (RAND_bytes(p,1) <= 0)
					return(0);
d195 5
a199 2
int RSA_padding_check_PKCS1_type_2(unsigned char *to, int tlen,
	     const unsigned char *from, int flen, int num)
d202 1
a202 1
	const unsigned char *p;
d205 1
a205 1
	if ((num != (flen+1)) || (*(p++) != 02))
a209 3
#ifdef PKCS1_CHECK
	return(num-11);
#endif
a228 5
	if (j > tlen)
		{
		RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2,RSA_R_DATA_TOO_LARGE);
		return(-1);
		}
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d71 1
a71 1
	if (flen > (tlen-RSA_PKCS1_PADDING_SIZE))
@


