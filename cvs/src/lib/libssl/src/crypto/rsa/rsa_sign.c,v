head	1.25;
access;
symbols
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.24.0.4
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.22.0.6
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	butholakala:1.12
	openssl_1_0_1_g:1.1.1.8
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	openssl_1_0_1_c:1.1.1.8
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.24;
commitid	vHznCDK3idwNEFz4;

1.24
date	2015.07.19.18.29.31;	author miod;	state Exp;
branches;
next	1.23;
commitid	tXLDcP80XKVov5z5;

1.23
date	2015.06.20.01.07.25;	author doug;	state Exp;
branches;
next	1.22;
commitid	odUD1eZ4N02tuzg5;

1.22
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.21;
commitid	yQEL1wOWIearrW15;

1.21
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.20;
commitid	id8dTrTMtnTn4fqt;

1.20
date	2014.07.09.19.51.38;	author jsing;	state Exp;
branches;
next	1.19;
commitid	1XPBWlejiS4drgFK;

1.19
date	2014.07.09.09.04.14;	author miod;	state Exp;
branches;
next	1.18;
commitid	LTMibWYedzThIqBn;

1.18
date	2014.07.09.08.20.08;	author miod;	state Exp;
branches;
next	1.17;
commitid	JPwi7kYvSgWTaIWo;

1.17
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	mJUVYpkFBZ0Zv2bG;

1.16
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	2nvnQBrv22dLtvTt;

1.15
date	2014.05.23.17.54.52;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.15.20.06.10;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.09.00.11.03;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.26;	author djm;	state Exp;
branches
	1.7.2.1
	1.7.4.1;
next	1.6;

1.6
date	2003.05.12.02.18.38;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.16;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.09;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.11.40;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.43;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.54;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.46;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.16;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.59;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.10;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.43;	author djm;	state Exp;
branches;
next	;

1.7.2.1
date	2006.09.09.01.18.36;	author brad;	state Exp;
branches;
next	;

1.7.4.1
date	2006.09.09.01.23.16;	author brad;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@/* $OpenBSD: rsa_sign.c,v 1.24 2015/07/19 18:29:31 miod Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/rsa.h>
#include <openssl/x509.h>

#include "rsa_locl.h"

/* Size of an SSL signature: MD5+SHA1 */
#define SSL_SIG_LENGTH	36

int
RSA_sign(int type, const unsigned char *m, unsigned int m_len,
    unsigned char *sigret, unsigned int *siglen, RSA *rsa)
{
	X509_SIG sig;
	ASN1_TYPE parameter;
	int i, j, ret = 1;
	unsigned char *p, *tmps = NULL;
	const unsigned char *s = NULL;
	X509_ALGOR algor;
	ASN1_OCTET_STRING digest;

	if ((rsa->flags & RSA_FLAG_SIGN_VER) && rsa->meth->rsa_sign)
		return rsa->meth->rsa_sign(type, m, m_len, sigret, siglen, rsa);

	/* Special case: SSL signature, just check the length */
	if (type == NID_md5_sha1) {
		if (m_len != SSL_SIG_LENGTH) {
			RSAerr(RSA_F_RSA_SIGN, RSA_R_INVALID_MESSAGE_LENGTH);
			return 0;
		}
		i = SSL_SIG_LENGTH;
		s = m;
	} else {
		sig.algor = &algor;
		sig.algor->algorithm = OBJ_nid2obj(type);
		if (sig.algor->algorithm == NULL) {
			RSAerr(RSA_F_RSA_SIGN, RSA_R_UNKNOWN_ALGORITHM_TYPE);
			return 0;
		}
		if (sig.algor->algorithm->length == 0) {
			RSAerr(RSA_F_RSA_SIGN,
			    RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
			return 0;
		}
		parameter.type = V_ASN1_NULL;
		parameter.value.ptr = NULL;
		sig.algor->parameter = &parameter;

		sig.digest = &digest;
		sig.digest->data = (unsigned char *)m; /* TMP UGLY CAST */
		sig.digest->length = m_len;

		i = i2d_X509_SIG(&sig, NULL);
	}
	j = RSA_size(rsa);
	if (i > j - RSA_PKCS1_PADDING_SIZE) {
		RSAerr(RSA_F_RSA_SIGN, RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY);
		return 0;
	}
	if (type != NID_md5_sha1) {
		tmps = malloc(j + 1);
		if (tmps == NULL) {
			RSAerr(RSA_F_RSA_SIGN, ERR_R_MALLOC_FAILURE);
			return 0;
		}
		p = tmps;
		i2d_X509_SIG(&sig, &p);
		s = tmps;
	}
	i = RSA_private_encrypt(i, s, sigret, rsa, RSA_PKCS1_PADDING);
	if (i <= 0)
		ret = 0;
	else
		*siglen = i;

	if (type != NID_md5_sha1) {
		explicit_bzero(tmps, (unsigned int)j + 1);
		free(tmps);
	}
	return (ret);
}

int
int_rsa_verify(int dtype, const unsigned char *m, unsigned int m_len,
    unsigned char *rm, size_t *prm_len, const unsigned char *sigbuf,
    size_t siglen, RSA *rsa)
{
	int i, ret = 0, sigtype;
	unsigned char *s;
	X509_SIG *sig = NULL;

	if (siglen != (unsigned int)RSA_size(rsa)) {
		RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_WRONG_SIGNATURE_LENGTH);
		return 0;
	}

	if ((dtype == NID_md5_sha1) && rm) {
		i = RSA_public_decrypt((int)siglen, sigbuf, rm, rsa,
		    RSA_PKCS1_PADDING);
		if (i <= 0)
			return 0;
		*prm_len = i;
		return 1;
	}

	s = malloc(siglen);
	if (s == NULL) {
		RSAerr(RSA_F_INT_RSA_VERIFY, ERR_R_MALLOC_FAILURE);
		goto err;
	}
	if (dtype == NID_md5_sha1 && m_len != SSL_SIG_LENGTH) {
		RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_INVALID_MESSAGE_LENGTH);
		goto err;
	}
	i = RSA_public_decrypt((int)siglen, sigbuf, s, rsa, RSA_PKCS1_PADDING);

	if (i <= 0)
		goto err;

	/* Special case: SSL signature */
	if (dtype == NID_md5_sha1) {
		if (i != SSL_SIG_LENGTH || memcmp(s, m, SSL_SIG_LENGTH))
			RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_BAD_SIGNATURE);
		else
			ret = 1;
	} else {
		const unsigned char *p = s;

		sig = d2i_X509_SIG(NULL, &p, (long)i);

		if (sig == NULL)
			goto err;

		/* Excess data can be used to create forgeries */
		if (p != s + i) {
			RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_BAD_SIGNATURE);
			goto err;
		}

		/* Parameters to the signature algorithm can also be used to
		   create forgeries */
		if (sig->algor->parameter &&
		    ASN1_TYPE_get(sig->algor->parameter) != V_ASN1_NULL) {
			RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_BAD_SIGNATURE);
			goto err;
		}

		sigtype = OBJ_obj2nid(sig->algor->algorithm);

		if (sigtype != dtype) {
			RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_ALGORITHM_MISMATCH);
			goto err;
		}
		if (rm) {
			const EVP_MD *md;

			md = EVP_get_digestbynid(dtype);
			if (md && (EVP_MD_size(md) != sig->digest->length))
				RSAerr(RSA_F_INT_RSA_VERIFY,
				    RSA_R_INVALID_DIGEST_LENGTH);
			else {
				memcpy(rm, sig->digest->data,
				    sig->digest->length);
				*prm_len = sig->digest->length;
				ret = 1;
			}
		} else if ((unsigned int)sig->digest->length != m_len ||
		    memcmp(m, sig->digest->data, m_len) != 0) {
			RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_BAD_SIGNATURE);
		} else
			ret = 1;
	}
err:
	if (sig != NULL)
		X509_SIG_free(sig);
	if (s != NULL) {
		explicit_bzero(s, (unsigned int)siglen);
		free(s);
	}
	return ret;
}

int
RSA_verify(int dtype, const unsigned char *m, unsigned int m_len,
    const unsigned char *sigbuf, unsigned int siglen, RSA *rsa)
{
	if ((rsa->flags & RSA_FLAG_SIGN_VER) && rsa->meth->rsa_verify)
		return rsa->meth->rsa_verify(dtype, m, m_len, sigbuf, siglen,
		    rsa);

	return int_rsa_verify(dtype, m, m_len, NULL, NULL, sigbuf, siglen, rsa);
}
@


1.24
log
@Drop stupid (int) casts for the arguments of malloc() and friends. This is
not 16-bit MS-DOS anymore.
ok bcook@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_sign.c,v 1.23 2015/06/20 01:07:25 doug Exp $ */
d140 1
a140 1
		OPENSSL_cleanse(tmps, (unsigned int)j + 1);
d240 1
a240 1
		OPENSSL_cleanse(s, (unsigned int)siglen);
@


1.23
log
@Remove obsolete MDC-2DES from libcrypto.

ok deraadt@@ jsing@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_sign.c,v 1.22 2014/07/11 08:44:49 jsing Exp $ */
d124 1
a124 1
		tmps = malloc((unsigned int)j + 1);
d169 1
a169 1
	s = malloc((unsigned int)siglen);
@


1.22
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_sign.c,v 1.21 2014/07/10 13:58:23 jsing Exp $ */
a181 15

	/*
	 * Oddball MDC2 case: signature can be OCTET STRING.
	 * check for correct tag and length octets.
	 */
	if (dtype == NID_mdc2 && i == 18 && s[0] == 0x04 && s[1] == 0x10) {
		if (rm) {
			memcpy(rm, s + 2, 16);
			*prm_len = 16;
			ret = 1;
		} else if (memcmp(m, s + 2, 16))
			RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_BAD_SIGNATURE);
		else
			ret = 1;
	}
@


1.21
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_sign.c,v 1.20 2014/07/09 19:51:38 jsing Exp $ */
a61 1
#include "cryptlib.h"
d63 2
a65 1
#include <openssl/objects.h>
d67 1
@


1.20
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_sign.c,v 1.19 2014/07/09 09:04:14 miod Exp $ */
d60 2
@


1.19
log
@In the old days (not in this century), SSLeay 0.4.5 would create X.509 RSA
signatures using the wrong oid for the signature type. The signature
verification code has thus been modified to allow these signatures to be
accepted, with a printf to stderr to notify the user something was fishy.

Remove this chunk; these signatures will no longer get accepted.
ok deraadt@@ guenther@@ jsing@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_sign.c,v 1.18 2014/07/09 08:20:08 miod Exp $ */
d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d140 1
a140 1
	return(ret);
d202 1
a202 1
		const unsigned char *p=s;
d243 1
a243 1
		    memcmp(m,sig->digest->data,m_len) != 0) {
@


1.18
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_sign.c,v 1.17 2014/06/12 15:49:30 deraadt Exp $ */
d226 2
a227 13
			if ((dtype == NID_md5 &&
			     sigtype == NID_md5WithRSAEncryption) ||
			    (dtype == NID_md2 &&
			     sigtype == NID_md2WithRSAEncryption)) {
				/* ok, we will let it through */
				fprintf(stderr,
				    "signature has problems, "
				    "re-make with post SSLeay045\n");
			} else {
				RSAerr(RSA_F_INT_RSA_VERIFY,
				    RSA_R_ALGORITHM_MISMATCH);
				goto err;
			}
@


1.17
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d70 4
a73 3
int RSA_sign(int type, const unsigned char *m, unsigned int m_len,
	     unsigned char *sigret, unsigned int *siglen, RSA *rsa)
	{
d76 1
a76 1
	int i,j,ret=1;
d81 4
a84 5
	if((rsa->flags & RSA_FLAG_SIGN_VER) && rsa->meth->rsa_sign)
		{
		return rsa->meth->rsa_sign(type, m, m_len,
			sigret, siglen, rsa);
		}
d86 4
a89 4
	if(type == NID_md5_sha1) {
		if(m_len != SSL_SIG_LENGTH) {
			RSAerr(RSA_F_RSA_SIGN,RSA_R_INVALID_MESSAGE_LENGTH);
			return(0);
d94 31
a124 27
		sig.algor= &algor;
		sig.algor->algorithm=OBJ_nid2obj(type);
		if (sig.algor->algorithm == NULL)
			{
			RSAerr(RSA_F_RSA_SIGN,RSA_R_UNKNOWN_ALGORITHM_TYPE);
			return(0);
			}
		if (sig.algor->algorithm->length == 0)
			{
			RSAerr(RSA_F_RSA_SIGN,RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
			return(0);
			}
		parameter.type=V_ASN1_NULL;
		parameter.value.ptr=NULL;
		sig.algor->parameter= &parameter;

		sig.digest= &digest;
		sig.digest->data=(unsigned char *)m; /* TMP UGLY CAST */
		sig.digest->length=m_len;

		i=i2d_X509_SIG(&sig,NULL);
	}
	j=RSA_size(rsa);
	if (i > (j-RSA_PKCS1_PADDING_SIZE))
		{
		RSAerr(RSA_F_RSA_SIGN,RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY);
		return(0);
d126 3
a128 10
	if(type != NID_md5_sha1) {
		tmps = malloc((unsigned int)j+1);
		if (tmps == NULL)
			{
			RSAerr(RSA_F_RSA_SIGN,ERR_R_MALLOC_FAILURE);
			return(0);
			}
		p=tmps;
		i2d_X509_SIG(&sig,&p);
		s=tmps;
d130 1
a130 1
	i=RSA_private_encrypt(i,s,sigret,rsa,RSA_PKCS1_PADDING);
d132 1
a132 1
		ret=0;
d134 1
a134 1
		*siglen=i;
d136 2
a137 2
	if(type != NID_md5_sha1) {
		OPENSSL_cleanse(tmps,(unsigned int)j+1);
d141 1
a141 1
	}
d143 6
a148 7
int int_rsa_verify(int dtype, const unsigned char *m,
			  unsigned int m_len,
			  unsigned char *rm, size_t *prm_len,
			  const unsigned char *sigbuf, size_t siglen,
			  RSA *rsa)
	{
	int i,ret=0,sigtype;
d150 1
a150 1
	X509_SIG *sig=NULL;
d152 4
a155 5
	if (siglen != (unsigned int)RSA_size(rsa))
		{
		RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_WRONG_SIGNATURE_LENGTH);
		return(0);
		}
d157 3
a159 4
	if((dtype == NID_md5_sha1) && rm)
		{
		i = RSA_public_decrypt((int)siglen,
					sigbuf,rm,rsa,RSA_PKCS1_PADDING);
d164 1
a164 1
		}
d167 6
a172 3
	if (s == NULL)
		{
		RSAerr(RSA_F_INT_RSA_VERIFY,ERR_R_MALLOC_FAILURE);
a173 4
		}
	if((dtype == NID_md5_sha1) && (m_len != SSL_SIG_LENGTH) ) {
			RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_INVALID_MESSAGE_LENGTH);
			goto err;
d175 1
a175 1
	i=RSA_public_decrypt((int)siglen,sigbuf,s,rsa,RSA_PKCS1_PADDING);
d177 5
a181 2
	if (i <= 0) goto err;
	/* Oddball MDC2 case: signature can be OCTET STRING.
d184 2
a185 4
	if (dtype == NID_mdc2 && i == 18 && s[0] == 0x04 && s[1] == 0x10)
		{
		if (rm)
			{
d189 2
a190 3
			}
		else if(memcmp(m, s + 2, 16))
			RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d193 1
a193 1
		}
d196 5
a200 4
	if(dtype == NID_md5_sha1) {
		if((i != SSL_SIG_LENGTH) || memcmp(s, m, SSL_SIG_LENGTH))
				RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
		else ret = 1;
a202 1
		sig=d2i_X509_SIG(NULL,&p,(long)i);
d204 4
a207 1
		if (sig == NULL) goto err;
d210 2
a211 3
		if(p != s+i)
			{
			RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d213 1
a213 1
			}
d217 3
a219 4
		if(sig->algor->parameter
		   && ASN1_TYPE_get(sig->algor->parameter) != V_ASN1_NULL)
			{
			RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d221 1
a221 3
			}

		sigtype=OBJ_obj2nid(sig->algor->algorithm);
d223 1
d225 5
a229 12
	#ifdef RSA_DEBUG
		/* put a backward compatibility flag in EAY */
		fprintf(stderr,"in(%s) expect(%s)\n",OBJ_nid2ln(sigtype),
			OBJ_nid2ln(dtype));
	#endif
		if (sigtype != dtype)
			{
			if (((dtype == NID_md5) &&
				(sigtype == NID_md5WithRSAEncryption)) ||
				((dtype == NID_md2) &&
				(sigtype == NID_md2WithRSAEncryption)))
				{
d231 4
a234 4
				fprintf(stderr,"signature has problems, re-make with post SSLeay045\n");
				}
			else
				{
d236 1
a236 1
						RSA_R_ALGORITHM_MISMATCH);
a237 1
				}
d239 2
a240 2
		if (rm)
			{
d242 1
d246 2
a247 3
						RSA_R_INVALID_DIGEST_LENGTH);
			else
				{
d249 1
a249 1
							sig->digest->length);
a251 1
				}
d253 5
a257 7
		else if (((unsigned int)sig->digest->length != m_len) ||
			(memcmp(m,sig->digest->data,m_len) != 0))
			{
			RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
			}
		else
			ret=1;
d260 4
a263 4
	if (sig != NULL) X509_SIG_free(sig);
	if (s != NULL)
		{
		OPENSSL_cleanse(s,(unsigned int)siglen);
a264 2
		}
	return(ret);
d266 2
d269 7
a275 10
int RSA_verify(int dtype, const unsigned char *m, unsigned int m_len,
		const unsigned char *sigbuf, unsigned int siglen,
		RSA *rsa)
	{

	if((rsa->flags & RSA_FLAG_SIGN_VER) && rsa->meth->rsa_verify)
		{
		return rsa->meth->rsa_verify(dtype, m, m_len,
			sigbuf, siglen, rsa);
		}
d278 1
a278 1
	}
@


1.16
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/rsa/rsa_sign.c */
@


1.15
log
@We have stdio and are not WIN16.
@
text
@d123 1
a123 1
		tmps=(unsigned char *)malloc((unsigned int)j+1);
d172 1
a172 1
	s=(unsigned char *)malloc((unsigned int)siglen);
@


1.14
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a244 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)
a245 1
#endif
@


1.13
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d123 1
a123 1
		tmps=(unsigned char *)OPENSSL_malloc((unsigned int)j+1);
d141 1
a141 1
		OPENSSL_free(tmps);
d172 1
a172 1
	s=(unsigned char *)OPENSSL_malloc((unsigned int)siglen);
d284 1
a284 1
		OPENSSL_free(s);
@


1.12
log
@resolve conflicts
@
text
@a79 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(rsa->meth->flags & RSA_FLAG_FIPS_METHOD)
			&& !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_SIGN, RSA_R_NON_FIPS_RSA_METHOD);
		return 0;
		}
#endif
a154 9

#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(rsa->meth->flags & RSA_FLAG_FIPS_METHOD)
			&& !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_NON_FIPS_RSA_METHOD);
		return 0;
		}
#endif
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d80 8
d164 9
d202 16
@


1.10
log
@resolve conflicts
@
text
@d65 1
a93 8
	/* NB: in FIPS mode block anything that isn't a TLS signature */
#ifdef OPENSSL_FIPS
		if(FIPS_mode() && !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
			{
			RSAerr(RSA_F_RSA_SIGN, RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
			return 0;
			}
#endif
d146 5
a150 2
int RSA_verify(int dtype, const unsigned char *m, unsigned int m_len,
	     unsigned char *sigbuf, unsigned int siglen, RSA *rsa)
d158 1
a158 1
		RSAerr(RSA_F_RSA_VERIFY,RSA_R_WRONG_SIGNATURE_LENGTH);
d162 1
a162 1
	if((rsa->flags & RSA_FLAG_SIGN_VER) && rsa->meth->rsa_verify)
d164 6
a169 2
		return rsa->meth->rsa_verify(dtype, m, m_len,
			sigbuf, siglen, rsa);
d175 1
a175 1
		RSAerr(RSA_F_RSA_VERIFY,ERR_R_MALLOC_FAILURE);
d178 2
a179 5
	if(dtype == NID_md5_sha1)
		{
		if (m_len != SSL_SIG_LENGTH)
			{
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_INVALID_MESSAGE_LENGTH);
d181 1
a181 10
			}
		}
	/* NB: in FIPS mode block anything that isn't a TLS signature */
#ifdef OPENSSL_FIPS
	else if(FIPS_mode() && !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_VERIFY, RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return 0;
		}
#endif
d189 1
a189 1
				RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d200 1
a200 1
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d209 1
a209 1
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d235 1
a235 1
				RSAerr(RSA_F_RSA_VERIFY,
d240 16
a255 1
		if (	((unsigned int)sig->digest->length != m_len) ||
d258 1
a258 1
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d273 13
@


1.9
log
@resolve conflicts
@
text
@d93 8
d178 4
a181 1
	if((dtype == NID_md5_sha1) && (m_len != SSL_SIG_LENGTH) ) {
d184 10
a193 1
	}
@


1.8
log
@fix RSA signature padding vulnerability in OpenSSL libcrypto CVE-2006-4339;
ok beck@@ miod@@
@
text
@d149 1
a149 1
	unsigned char *p,*s;
d184 1
a184 1
		p=s;
@


1.7
log
@resolve conflicts
@
text
@d188 17
@


1.7.4.1
log
@MFC:
Fix by djm@@

fix RSA signature padding vulnerability in OpenSSL libcrypto CVE-2006-4339
@
text
@a187 17

		/* Excess data can be used to create forgeries */
		if(p != s+i)
			{
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
			goto err;
			}

		/* Parameters to the signature algorithm can also be used to
		   create forgeries */
		if(sig->algor->parameter
		   && ASN1_TYPE_get(sig->algor->parameter) != V_ASN1_NULL)
			{
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
			goto err;
			}

@


1.7.2.1
log
@MFC:
Fix by djm@@

fix RSA signature padding vulnerability in OpenSSL libcrypto CVE-2006-4339
@
text
@a187 17

		/* Excess data can be used to create forgeries */
		if(p != s+i)
			{
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
			goto err;
			}

		/* Parameters to the signature algorithm can also be used to
		   create forgeries */
		if(sig->algor->parameter
		   && ASN1_TYPE_get(sig->algor->parameter) != V_ASN1_NULL)
			{
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
			goto err;
			}

@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d172 1
a172 1
			return(0);
d225 5
a229 2
	OPENSSL_cleanse(s,(unsigned int)siglen);
	OPENSSL_free(s);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a64 1
#include <openssl/engine.h>
d79 5
a83 4
	if((rsa->flags & RSA_FLAG_SIGN_VER)
	      && ENGINE_get_RSA(rsa->engine)->rsa_sign)
	      return ENGINE_get_RSA(rsa->engine)->rsa_sign(type,
			m, m_len, sigret, siglen, rsa);
d116 1
a116 1
	if ((i-RSA_PKCS1_PADDING) > j)
d139 1
a139 1
		memset(tmps,0,(unsigned int)j+1);
d158 5
a162 4
	if((rsa->flags & RSA_FLAG_SIGN_VER)
	    && ENGINE_get_RSA(rsa->engine)->rsa_verify)
	    return ENGINE_get_RSA(rsa->engine)->rsa_verify(dtype,
			m, m_len, sigbuf, siglen, rsa);
d225 1
a225 1
	memset(s,0,(unsigned int)siglen);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d70 1
a70 1
int RSA_sign(int type, unsigned char *m, unsigned int m_len,
d76 2
a77 1
	unsigned char *p,*s = NULL;
d80 2
a81 1
	if(rsa->flags & RSA_FLAG_SIGN_VER)
d110 1
a110 1
		sig.digest->data=m;
d122 2
a123 2
		s=(unsigned char *)OPENSSL_malloc((unsigned int)j+1);
		if (s == NULL)
d128 1
a128 1
		p=s;
d130 1
d139 2
a140 2
		memset(s,0,(unsigned int)j+1);
		OPENSSL_free(s);
d145 1
a145 1
int RSA_verify(int dtype, unsigned char *m, unsigned int m_len,
d158 2
a159 1
	if(rsa->flags & RSA_FLAG_SIGN_VER)
d203 1
a203 1
	#if !defined(NO_STDIO) && !defined(WIN16)
d205 1
a205 1
	#endif
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d65 1
d80 2
a81 1
	      return rsa->meth->rsa_sign(type, m, m_len, sigret, siglen, rsa);
d120 1
a120 1
		s=(unsigned char *)Malloc((unsigned int)j+1);
d137 1
a137 1
		Free(s);
d156 2
a157 1
	    return rsa->meth->rsa_verify(dtype, m, m_len, sigbuf, siglen, rsa);
d159 1
a159 1
	s=(unsigned char *)Malloc((unsigned int)siglen);
d221 1
a221 1
	Free(s);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d66 3
d75 1
a75 1
	unsigned char *p,*s;
d78 30
d109 2
a110 21
	sig.algor= &algor;
	sig.algor->algorithm=OBJ_nid2obj(type);
	if (sig.algor->algorithm == NULL)
		{
		RSAerr(RSA_F_RSA_SIGN,RSA_R_UNKNOWN_ALGORITHM_TYPE);
		return(0);
		}
	if (sig.algor->algorithm->length == 0)
		{
		RSAerr(RSA_F_RSA_SIGN,RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
		return(0);
		}
	parameter.type=V_ASN1_NULL;
	parameter.value.ptr=NULL;
	sig.algor->parameter= &parameter;

	sig.digest= &digest;
	sig.digest->data=m;
	sig.digest->length=m_len;

	i=i2d_X509_SIG(&sig,NULL);
d117 10
a126 8
	s=(unsigned char *)Malloc((unsigned int)j+1);
	if (s == NULL)
		{
		RSAerr(RSA_F_RSA_SIGN,ERR_R_MALLOC_FAILURE);
		return(0);
		}
	p=s;
	i2d_X509_SIG(&sig,&p);
d133 4
a136 2
	memset(s,0,(unsigned int)j+1);
	Free(s);
d153 3
d162 4
d170 19
a188 18
	p=s;
	sig=d2i_X509_SIG(NULL,&p,(long)i);

	if (sig == NULL) goto err;
	sigtype=OBJ_obj2nid(sig->algor->algorithm);


#ifdef RSA_DEBUG
	/* put a backward compatability flag in EAY */
	fprintf(stderr,"in(%s) expect(%s)\n",OBJ_nid2ln(sigtype),
		OBJ_nid2ln(dtype));
#endif
	if (sigtype != dtype)
		{
		if (((dtype == NID_md5) &&
			(sigtype == NID_md5WithRSAEncryption)) ||
			((dtype == NID_md2) &&
			(sigtype == NID_md2WithRSAEncryption)))
d190 16
a205 4
			/* ok, we will let it through */
#if !defined(NO_STDIO) && !defined(WIN16)
			fprintf(stderr,"signature has problems, re-make with post SSLeay045\n");
#endif
d207 2
a208 1
		else
d210 1
a210 2
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_ALGORITHM_MISMATCH);
			goto err;
d212 3
a214 8
		}
	if (	((unsigned int)sig->digest->length != m_len) ||
		(memcmp(m,sig->digest->data,m_len) != 0))
		{
		RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
		}
	else
		ret=1;
@


1.1
log
@Initial revision
@
text
@d61 7
a67 12
#include "bn.h"
#include "rsa.h"
#include "objects.h"
#include "x509.h"

int RSA_sign(type,m,m_len,sigret,siglen,rsa)
int type;
unsigned char *m;
unsigned int m_len;
unsigned char *sigret;
unsigned int *siglen;
RSA *rsa;
d122 2
a123 7
int RSA_verify(dtype, m, m_len, sigbuf, siglen, rsa)
int dtype;
unsigned char *m;
unsigned int m_len;
unsigned char *sigbuf;
unsigned int siglen;
RSA *rsa;
d147 1
d150 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 12
a72 11
#include <openssl/bn.h>
#include <openssl/rsa.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/engine.h>

/* Size of an SSL signature: MD5+SHA1 */
#define SSL_SIG_LENGTH	36

int RSA_sign(int type, const unsigned char *m, unsigned int m_len,
	     unsigned char *sigret, unsigned int *siglen, RSA *rsa)
d77 1
a77 2
	unsigned char *p, *tmps = NULL;
	const unsigned char *s = NULL;
a79 32
	if((rsa->flags & RSA_FLAG_SIGN_VER)
	      && ENGINE_get_RSA(rsa->engine)->rsa_sign)
	      return ENGINE_get_RSA(rsa->engine)->rsa_sign(type,
			m, m_len, sigret, siglen, rsa);
	/* Special case: SSL signature, just check the length */
	if(type == NID_md5_sha1) {
		if(m_len != SSL_SIG_LENGTH) {
			RSAerr(RSA_F_RSA_SIGN,RSA_R_INVALID_MESSAGE_LENGTH);
			return(0);
		}
		i = SSL_SIG_LENGTH;
		s = m;
	} else {
		sig.algor= &algor;
		sig.algor->algorithm=OBJ_nid2obj(type);
		if (sig.algor->algorithm == NULL)
			{
			RSAerr(RSA_F_RSA_SIGN,RSA_R_UNKNOWN_ALGORITHM_TYPE);
			return(0);
			}
		if (sig.algor->algorithm->length == 0)
			{
			RSAerr(RSA_F_RSA_SIGN,RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
			return(0);
			}
		parameter.type=V_ASN1_NULL;
		parameter.value.ptr=NULL;
		sig.algor->parameter= &parameter;

		sig.digest= &digest;
		sig.digest->data=(unsigned char *)m; /* TMP UGLY CAST */
		sig.digest->length=m_len;
d81 21
a101 2
		i=i2d_X509_SIG(&sig,NULL);
	}
d108 8
a115 11
	if(type != NID_md5_sha1) {
		tmps=(unsigned char *)OPENSSL_malloc((unsigned int)j+1);
		if (tmps == NULL)
			{
			RSAerr(RSA_F_RSA_SIGN,ERR_R_MALLOC_FAILURE);
			return(0);
			}
		p=tmps;
		i2d_X509_SIG(&sig,&p);
		s=tmps;
	}
d122 2
a123 4
	if(type != NID_md5_sha1) {
		memset(tmps,0,(unsigned int)j+1);
		OPENSSL_free(tmps);
	}
d127 7
a133 2
int RSA_verify(int dtype, const unsigned char *m, unsigned int m_len,
	     unsigned char *sigbuf, unsigned int siglen, RSA *rsa)
d145 1
a145 6
	if((rsa->flags & RSA_FLAG_SIGN_VER)
	    && ENGINE_get_RSA(rsa->engine)->rsa_verify)
	    return ENGINE_get_RSA(rsa->engine)->rsa_verify(dtype,
			m, m_len, sigbuf, siglen, rsa);

	s=(unsigned char *)OPENSSL_malloc((unsigned int)siglen);
a150 4
	if((dtype == NID_md5_sha1) && (m_len != SSL_SIG_LENGTH) ) {
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_INVALID_MESSAGE_LENGTH);
			return(0);
	}
d155 16
a170 19
	/* Special case: SSL signature */
	if(dtype == NID_md5_sha1) {
		if((i != SSL_SIG_LENGTH) || memcmp(s, m, SSL_SIG_LENGTH))
				RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
		else ret = 1;
	} else {
		p=s;
		sig=d2i_X509_SIG(NULL,&p,(long)i);

		if (sig == NULL) goto err;
		sigtype=OBJ_obj2nid(sig->algor->algorithm);


	#ifdef RSA_DEBUG
		/* put a backward compatibility flag in EAY */
		fprintf(stderr,"in(%s) expect(%s)\n",OBJ_nid2ln(sigtype),
			OBJ_nid2ln(dtype));
	#endif
		if (sigtype != dtype)
d172 3
a174 8
			if (((dtype == NID_md5) &&
				(sigtype == NID_md5WithRSAEncryption)) ||
				((dtype == NID_md2) &&
				(sigtype == NID_md2WithRSAEncryption)))
				{
				/* ok, we will let it through */
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)
				fprintf(stderr,"signature has problems, re-make with post SSLeay045\n");
a175 7
				}
			else
				{
				RSAerr(RSA_F_RSA_VERIFY,
						RSA_R_ALGORITHM_MISMATCH);
				goto err;
				}
d177 1
a177 2
		if (	((unsigned int)sig->digest->length != m_len) ||
			(memcmp(m,sig->digest->data,m_len) != 0))
d179 2
a180 1
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d182 8
a189 3
		else
			ret=1;
	}
d193 1
a193 1
	OPENSSL_free(s);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d65 1
d80 4
a83 5
	if((rsa->flags & RSA_FLAG_SIGN_VER) && rsa->meth->rsa_sign)
		{
		return rsa->meth->rsa_sign(type, m, m_len,
			sigret, siglen, rsa);
		}
d116 1
a116 1
	if (i > (j-RSA_PKCS1_PADDING_SIZE))
d139 1
a139 1
		OPENSSL_cleanse(tmps,(unsigned int)j+1);
d158 4
a161 5
	if((rsa->flags & RSA_FLAG_SIGN_VER) && rsa->meth->rsa_verify)
		{
		return rsa->meth->rsa_verify(dtype, m, m_len,
			sigbuf, siglen, rsa);
		}
d224 1
a224 1
	OPENSSL_cleanse(s,(unsigned int)siglen);
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d172 1
a172 1
			goto err;
d225 2
a226 5
	if (s != NULL)
		{
		OPENSSL_cleanse(s,(unsigned int)siglen);
		OPENSSL_free(s);
		}
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d149 1
a149 1
	unsigned char *s;
d184 1
a184 1
		const unsigned char *p=s;
a187 17

		/* Excess data can be used to create forgeries */
		if(p != s+i)
			{
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
			goto err;
			}

		/* Parameters to the signature algorithm can also be used to
		   create forgeries */
		if(sig->algor->parameter
		   && ASN1_TYPE_get(sig->algor->parameter) != V_ASN1_NULL)
			{
			RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
			goto err;
			}

@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a92 8
	/* NB: in FIPS mode block anything that isn't a TLS signature */
#ifdef OPENSSL_FIPS
		if(FIPS_mode() && !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
			{
			RSAerr(RSA_F_RSA_SIGN, RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
			return 0;
			}
#endif
d170 1
a170 4
	if(dtype == NID_md5_sha1)
		{
		if (m_len != SSL_SIG_LENGTH)
			{
d173 1
a173 10
			}
		}
	/* NB: in FIPS mode block anything that isn't a TLS signature */
#ifdef OPENSSL_FIPS
	else if(FIPS_mode() && !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_VERIFY, RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return 0;
		}
#endif
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@a64 1
#include "rsa_locl.h"
d93 8
d153 2
a154 5
int int_rsa_verify(int dtype, const unsigned char *m,
			  unsigned int m_len,
			  unsigned char *rm, size_t *prm_len,
			  const unsigned char *sigbuf, size_t siglen,
			  RSA *rsa)
d162 1
a162 1
		RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_WRONG_SIGNATURE_LENGTH);
d166 1
a166 1
	if((dtype == NID_md5_sha1) && rm)
d168 2
a169 6
		i = RSA_public_decrypt((int)siglen,
					sigbuf,rm,rsa,RSA_PKCS1_PADDING);
		if (i <= 0)
			return 0;
		*prm_len = i;
		return 1;
d175 1
a175 1
		RSAerr(RSA_F_INT_RSA_VERIFY,ERR_R_MALLOC_FAILURE);
d178 5
a182 2
	if((dtype == NID_md5_sha1) && (m_len != SSL_SIG_LENGTH) ) {
			RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_INVALID_MESSAGE_LENGTH);
d184 10
a193 1
	}
d201 1
a201 1
				RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d212 1
a212 1
			RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d221 1
a221 1
			RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
d247 1
a247 1
				RSAerr(RSA_F_INT_RSA_VERIFY,
d252 1
a252 16
		if (rm)
			{
			const EVP_MD *md;
			md = EVP_get_digestbynid(dtype);
			if (md && (EVP_MD_size(md) != sig->digest->length))
				RSAerr(RSA_F_INT_RSA_VERIFY,
						RSA_R_INVALID_DIGEST_LENGTH);
			else
				{
				memcpy(rm, sig->digest->data,
							sig->digest->length);
				*prm_len = sig->digest->length;
				ret = 1;
				}
			}
		else if (((unsigned int)sig->digest->length != m_len) ||
d255 1
a255 1
			RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
a269 13
int RSA_verify(int dtype, const unsigned char *m, unsigned int m_len,
		const unsigned char *sigbuf, unsigned int siglen,
		RSA *rsa)
	{

	if((rsa->flags & RSA_FLAG_SIGN_VER) && rsa->meth->rsa_verify)
		{
		return rsa->meth->rsa_verify(dtype, m, m_len,
			sigbuf, siglen, rsa);
		}

	return int_rsa_verify(dtype, m, m_len, NULL, NULL, sigbuf, siglen, rsa);
	}
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a79 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(rsa->meth->flags & RSA_FLAG_FIPS_METHOD)
			&& !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_RSA_SIGN, RSA_R_NON_FIPS_RSA_METHOD);
		return 0;
		}
#endif
a155 9
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(rsa->meth->flags & RSA_FLAG_FIPS_METHOD)
			&& !(rsa->flags & RSA_FLAG_NON_FIPS_ALLOW))
		{
		RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_NON_FIPS_RSA_METHOD);
		return 0;
		}
#endif

a184 16
	/* Oddball MDC2 case: signature can be OCTET STRING.
	 * check for correct tag and length octets.
	 */
	if (dtype == NID_mdc2 && i == 18 && s[0] == 0x04 && s[1] == 0x10)
		{
		if (rm)
			{
			memcpy(rm, s + 2, 16);
			*prm_len = 16;
			ret = 1;
			}
		else if(memcmp(m, s + 2, 16))
			RSAerr(RSA_F_INT_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
		else
			ret = 1;
		}
@


