head	1.12;
access;
symbols
	OPENBSD_6_0:1.11.0.8
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	butholakala:1.1.1.5
	openssl_1_0_1_g:1.1.1.5
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.5.0.8
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.4
	OPENBSD_5_4_BASE:1.1.1.5
	OPENBSD_5_3:1.1.1.5.0.2
	OPENBSD_5_3_BASE:1.1.1.5
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.1.1.4.0.6
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.8
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.1.1.4.0.4
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.2
	OPENBSD_4_9_BASE:1.1.1.4
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.1.1.3.0.8
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.4
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.10
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.8
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.6
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.4
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.09.03.11.33.39;	author beck;	state dead;
branches;
next	1.11;
commitid	HnbXxsegngek41U2;

1.11
date	2014.10.22.13.02.04;	author jsing;	state Exp;
branches;
next	1.10;
commitid	PjnBgKe6Buhbf937;

1.10
date	2014.07.13.12.53.46;	author miod;	state Exp;
branches;
next	1.9;
commitid	JHiO0wkHh32yxqU5;

1.9
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.7;
commitid	id8dTrTMtnTn4fqt;

1.7
date	2014.07.09.19.51.38;	author jsing;	state Exp;
branches;
next	1.6;
commitid	1XPBWlejiS4drgFK;

1.6
date	2014.07.09.08.20.08;	author miod;	state Exp;
branches;
next	1.5;
commitid	JPwi7kYvSgWTaIWo;

1.5
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.22.21.12.16;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.17.21.17.12;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.27.05.05.35;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.06.27.05.05.35;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.59;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.10;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.10.13.21.23.43;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: rsa_pss.c,v 1.11 2014/10/22 13:02:04 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2005.
 */
/* ====================================================================
 * Copyright (c) 2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/rsa.h>
#include <openssl/sha.h>

static const unsigned char zeroes[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

int
RSA_verify_PKCS1_PSS(RSA *rsa, const unsigned char *mHash, const EVP_MD *Hash,
    const unsigned char *EM, int sLen)
{
	return RSA_verify_PKCS1_PSS_mgf1(rsa, mHash, Hash, NULL, EM, sLen);
}

int
RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, const unsigned char *mHash,
    const EVP_MD *Hash, const EVP_MD *mgf1Hash, const unsigned char *EM,
    int sLen)
{
	int i;
	int ret = 0;
	int hLen, maskedDBLen, MSBits, emLen;
	const unsigned char *H;
	unsigned char *DB = NULL;
	EVP_MD_CTX ctx;
	unsigned char H_[EVP_MAX_MD_SIZE];

	EVP_MD_CTX_init(&ctx);

	if (mgf1Hash == NULL)
		mgf1Hash = Hash;

	hLen = EVP_MD_size(Hash);
	if (hLen < 0)
		goto err;
	/*
	 * Negative sLen has special meanings:
	 *	-1	sLen == hLen
	 *	-2	salt length is autorecovered from signature
	 *	-N	reserved
	 */
	if (sLen == -1)
		sLen = hLen;
	else if (sLen == -2)
		sLen = -2;
	else if (sLen < -2) {
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1,
		    RSA_R_SLEN_CHECK_FAILED);
		goto err;
	}

	MSBits = (BN_num_bits(rsa->n) - 1) & 0x7;
	emLen = RSA_size(rsa);
	if (EM[0] & (0xFF << MSBits)) {
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1,
		    RSA_R_FIRST_OCTET_INVALID);
		goto err;
	}
	if (MSBits == 0) {
		EM++;
		emLen--;
	}
	if (emLen < (hLen + sLen + 2)) {
		/* sLen can be small negative */
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_DATA_TOO_LARGE);
		goto err;
	}
	if (EM[emLen - 1] != 0xbc) {
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1,
		    RSA_R_LAST_OCTET_INVALID);
		goto err;
	}
	maskedDBLen = emLen - hLen - 1;
	H = EM + maskedDBLen;
	DB = malloc(maskedDBLen);
	if (!DB) {
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, ERR_R_MALLOC_FAILURE);
		goto err;
	}
	if (PKCS1_MGF1(DB, maskedDBLen, H, hLen, mgf1Hash) < 0)
		goto err;
	for (i = 0; i < maskedDBLen; i++)
		DB[i] ^= EM[i];
	if (MSBits)
		DB[0] &= 0xFF >> (8 - MSBits);
	for (i = 0; DB[i] == 0 && i < (maskedDBLen - 1); i++)
		;
	if (DB[i++] != 0x1) {
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1,
		    RSA_R_SLEN_RECOVERY_FAILED);
		goto err;
	}
	if (sLen >= 0 && (maskedDBLen - i) != sLen) {
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1,
		    RSA_R_SLEN_CHECK_FAILED);
		goto err;
	}
	if (!EVP_DigestInit_ex(&ctx, Hash, NULL) ||
	    !EVP_DigestUpdate(&ctx, zeroes, sizeof zeroes) ||
	    !EVP_DigestUpdate(&ctx, mHash, hLen))
		goto err;
	if (maskedDBLen - i) {
		if (!EVP_DigestUpdate(&ctx, DB + i, maskedDBLen - i))
			goto err;
	}
	if (!EVP_DigestFinal_ex(&ctx, H_, NULL))
		goto err;
	if (memcmp(H_, H, hLen)) {
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_BAD_SIGNATURE);
		ret = 0;
	} else
		ret = 1;

err:
	free(DB);
	EVP_MD_CTX_cleanup(&ctx);

	return ret;
}

int
RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned char *EM,
    const unsigned char *mHash, const EVP_MD *Hash, int sLen)
{
	return RSA_padding_add_PKCS1_PSS_mgf1(rsa, EM, mHash, Hash, NULL, sLen);
}

int
RSA_padding_add_PKCS1_PSS_mgf1(RSA *rsa, unsigned char *EM,
    const unsigned char *mHash, const EVP_MD *Hash, const EVP_MD *mgf1Hash,
    int sLen)
{
	int i;
	int ret = 0;
	int hLen, maskedDBLen, MSBits, emLen;
	unsigned char *H, *salt = NULL, *p;
	EVP_MD_CTX ctx;

	EVP_MD_CTX_init(&ctx);

	if (mgf1Hash == NULL)
		mgf1Hash = Hash;

	hLen = EVP_MD_size(Hash);
	if (hLen < 0)
		goto err;
	/*
	 * Negative sLen has special meanings:
	 *	-1	sLen == hLen
	 *	-2	salt length is maximized
	 *	-N	reserved
	 */
	if (sLen == -1)
		sLen = hLen;
	else if (sLen == -2)
		sLen = -2;
	else if (sLen < -2) {
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1,
		    RSA_R_SLEN_CHECK_FAILED);
		goto err;
	}

	MSBits = (BN_num_bits(rsa->n) - 1) & 0x7;
	emLen = RSA_size(rsa);
	if (MSBits == 0) {
		*EM++ = 0;
		emLen--;
	}
	if (sLen == -2)
		sLen = emLen - hLen - 2;
	else if (emLen < (hLen + sLen + 2)) {
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1,
		    RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
		goto err;
	}
	if (sLen > 0) {
		salt = malloc(sLen);
		if (!salt) {
			RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1,
			    ERR_R_MALLOC_FAILURE);
			goto err;
		}
		arc4random_buf(salt, sLen);
	}
	maskedDBLen = emLen - hLen - 1;
	H = EM + maskedDBLen;
	if (!EVP_DigestInit_ex(&ctx, Hash, NULL) ||
	    !EVP_DigestUpdate(&ctx, zeroes, sizeof zeroes) ||
	    !EVP_DigestUpdate(&ctx, mHash, hLen))
		goto err;
	if (sLen && !EVP_DigestUpdate(&ctx, salt, sLen))
		goto err;
	if (!EVP_DigestFinal_ex(&ctx, H, NULL))
		goto err;

	/* Generate dbMask in place then perform XOR on it */
	if (PKCS1_MGF1(EM, maskedDBLen, H, hLen, mgf1Hash))
		goto err;

	p = EM;

	/*
	 * Initial PS XORs with all zeroes which is a NOP so just update
	 * pointer. Note from a test above this value is guaranteed to
	 * be non-negative.
	 */
	p += emLen - sLen - hLen - 2;
	*p++ ^= 0x1;
	if (sLen > 0) {
		for (i = 0; i < sLen; i++)
			*p++ ^= salt[i];
	}
	if (MSBits)
		EM[0] &= 0xFF >> (8 - MSBits);

	/* H is already in place so just set final 0xbc */
	EM[emLen - 1] = 0xbc;

	ret = 1;

err:
	free(salt);
	EVP_MD_CTX_cleanup(&ctx);

	return ret;
}
@


1.11
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pss.c,v 1.10 2014/07/13 12:53:46 miod Exp $ */
@


1.10
log
@Make sure all error conditions in RSA_padding_add_PKCS1_PSS_mgf1() cause
EVP_MD_CTX_cleanup() to be called.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pss.c,v 1.9 2014/07/11 08:44:49 jsing Exp $ */
d60 1
a65 1
#include <openssl/rand.h>
d246 1
a246 2
		if (RAND_bytes(salt, sLen) <= 0)
			goto err;
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pss.c,v 1.8 2014/07/10 13:58:23 jsing Exp $ */
d202 2
a250 1
	EVP_MD_CTX_init(&ctx);
a258 1
	EVP_MD_CTX_cleanup(&ctx);
d287 1
@


1.8
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pss.c,v 1.7 2014/07/09 19:51:38 jsing Exp $ */
a61 1
#include "cryptlib.h"
d63 1
a63 1
#include <openssl/rsa.h>
d66 1
@


1.7
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pss.c,v 1.6 2014/07/09 08:20:08 miod Exp $ */
d60 2
@


1.6
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: rsa_pss.c,v 1.5 2014/06/12 15:49:30 deraadt Exp $ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d124 2
a125 1
	if (emLen < (hLen + sLen + 2)) { /* sLen can be small negative */
d147 1
a147 1
	for (i = 0; DB[i] == 0 && i < (maskedDBLen-1); i++)
d172 1
a172 1
	} else 
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d67 1
a67 1
static const unsigned char zeroes[] = {0,0,0,0,0,0,0,0};
d69 4
a72 3
int RSA_verify_PKCS1_PSS(RSA *rsa, const unsigned char *mHash,
			const EVP_MD *Hash, const unsigned char *EM, int sLen)
	{
d74 1
a74 1
	}
d76 5
a80 4
int RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, const unsigned char *mHash,
			const EVP_MD *Hash, const EVP_MD *mgf1Hash,
			const unsigned char *EM, int sLen)
	{
d88 1
d103 7
a109 5
	if      (sLen == -1)	sLen = hLen;
	else if (sLen == -2)	sLen = -2;
	else if (sLen < -2)
		{
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_SLEN_CHECK_FAILED);
d111 1
a111 1
		}
d115 3
a117 3
	if (EM[0] & (0xFF << MSBits))
		{
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_FIRST_OCTET_INVALID);
d119 2
a120 3
		}
	if (MSBits == 0)
		{
d123 2
a124 3
		}
	if (emLen < (hLen + sLen + 2)) /* sLen can be small negative */
		{
d127 4
a130 4
		}
	if (EM[emLen - 1] != 0xbc)
		{
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_LAST_OCTET_INVALID);
d132 1
a132 1
		}
d136 1
a136 2
	if (!DB)
		{
d139 1
a139 1
		}
d146 5
a150 4
	for (i = 0; DB[i] == 0 && i < (maskedDBLen-1); i++) ;
	if (DB[i++] != 0x1)
		{
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_SLEN_RECOVERY_FAILED);
d152 4
a155 4
		}
	if (sLen >= 0 && (maskedDBLen - i) != sLen)
		{
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_SLEN_CHECK_FAILED);
d157 4
a160 4
		}
	if (!EVP_DigestInit_ex(&ctx, Hash, NULL)
		|| !EVP_DigestUpdate(&ctx, zeroes, sizeof zeroes)
		|| !EVP_DigestUpdate(&ctx, mHash, hLen))
d162 1
a162 2
	if (maskedDBLen - i)
		{
d165 1
a165 1
		}
d168 1
a168 2
	if (memcmp(H_, H, hLen))
		{
d171 1
a171 2
		}
	else 
d174 1
a174 1
	err:
d179 1
d181 4
a184 6
	}

int RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned char *EM,
			const unsigned char *mHash,
			const EVP_MD *Hash, int sLen)
	{
d186 1
a186 1
	}
d188 5
a192 4
int RSA_padding_add_PKCS1_PSS_mgf1(RSA *rsa, unsigned char *EM,
			const unsigned char *mHash,
			const EVP_MD *Hash, const EVP_MD *mgf1Hash, int sLen)
	{
d211 7
a217 5
	if      (sLen == -1)	sLen = hLen;
	else if (sLen == -2)	sLen = -2;
	else if (sLen < -2)
		{
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1, RSA_R_SLEN_CHECK_FAILED);
d219 1
a219 1
		}
d223 1
a223 2
	if (MSBits == 0)
		{
d226 1
a226 1
		}
a227 1
		{
d229 3
a231 4
		}
	else if (emLen < (hLen + sLen + 2))
		{
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1,RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
d233 2
a234 3
		}
	if (sLen > 0)
		{
d236 3
a238 3
		if (!salt)
			{
			RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1,ERR_R_MALLOC_FAILURE);
d240 1
a240 1
			}
d243 1
a243 1
		}
d247 3
a249 3
	if (!EVP_DigestInit_ex(&ctx, Hash, NULL)
		|| !EVP_DigestUpdate(&ctx, zeroes, sizeof zeroes)
		|| !EVP_DigestUpdate(&ctx, mHash, hLen))
d263 2
a264 1
	/* Initial PS XORs with all zeroes which is a NOP so just update
d270 1
a270 2
	if (sLen > 0)
		{
d273 1
a273 1
		}
a277 1

d282 1
a282 1
	err:
d286 1
a286 2

	}
@


1.4
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@d1 1
a1 1
/* rsa_pss.c */
@


1.3
log
@Get rid of MS Visual C compiler and Intel C compiler specific defines.
@
text
@d175 1
a175 2
	if (DB)
		free(DB);
d286 1
a286 2
	if (salt)
		free(salt);
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a68 4
#if defined(_MSC_VER) && defined(_ARM_)
#pragma optimize("g", off)
#endif

a292 4

#if defined(_MSC_VER)
#pragma optimize("",on)
#endif
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
d67 5
a71 1
const static unsigned char zeroes[] = {0,0,0,0,0,0,0,0};
d76 7
d90 4
d96 2
d108 1
a108 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS, RSA_R_SLEN_CHECK_FAILED);
d116 1
a116 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS, RSA_R_FIRST_OCTET_INVALID);
d126 1
a126 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS, RSA_R_DATA_TOO_LARGE);
d131 1
a131 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS, RSA_R_LAST_OCTET_INVALID);
d136 1
a136 1
	DB = OPENSSL_malloc(maskedDBLen);
d139 1
a139 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS, ERR_R_MALLOC_FAILURE);
d142 2
a143 1
	PKCS1_MGF1(DB, maskedDBLen, H, hLen, Hash);
d151 1
a151 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS, RSA_R_SLEN_RECOVERY_FAILED);
d156 1
a156 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS, RSA_R_SLEN_CHECK_FAILED);
d159 4
a162 4
	EVP_MD_CTX_init(&ctx);
	EVP_DigestInit_ex(&ctx, Hash, NULL);
	EVP_DigestUpdate(&ctx, zeroes, sizeof zeroes);
	EVP_DigestUpdate(&ctx, mHash, hLen);
d164 6
a169 3
		EVP_DigestUpdate(&ctx, DB + i, maskedDBLen - i);
	EVP_DigestFinal(&ctx, H_, NULL);
	EVP_MD_CTX_cleanup(&ctx);
d172 1
a172 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS, RSA_R_BAD_SIGNATURE);
d180 2
a181 1
		OPENSSL_free(DB);
d191 7
d204 3
d208 2
d220 1
a220 1
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS, RSA_R_SLEN_CHECK_FAILED);
d237 1
a237 2
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS,
		   RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
d242 1
a242 1
		salt = OPENSSL_malloc(sLen);
d245 1
a245 2
			RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS,
		   		ERR_R_MALLOC_FAILURE);
d248 1
a248 1
		if (!RAND_bytes(salt, sLen))
d254 8
a261 6
	EVP_DigestInit_ex(&ctx, Hash, NULL);
	EVP_DigestUpdate(&ctx, zeroes, sizeof zeroes);
	EVP_DigestUpdate(&ctx, mHash, hLen);
	if (sLen)
		EVP_DigestUpdate(&ctx, salt, sLen);
	EVP_DigestFinal(&ctx, H, NULL);
d265 2
a266 1
	PKCS1_MGF1(EM, maskedDBLen, H, hLen, Hash);
d292 1
a292 1
		OPENSSL_free(salt);
d297 4
@


1.1.1.1
log
@import of openssl-0.9.7j
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d67 1
a67 5
static const unsigned char zeroes[] = {0,0,0,0,0,0,0,0};

#if defined(_MSC_VER) && defined(_ARM_)
#pragma optimize("g", off)
#endif
a261 4

#if defined(_MSC_VER)
#pragma optimize("",on)
#endif
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
d84 1
a84 1
	hLen = M_EVP_MD_size(Hash);
d179 1
a179 1
	hLen = M_EVP_MD_size(Hash);
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d84 1
a84 3
	hLen = EVP_MD_size(Hash);
	if (hLen < 0)
		goto err;
d129 1
a129 2
	if (PKCS1_MGF1(DB, maskedDBLen, H, hLen, Hash) < 0)
		goto err;
d179 1
a179 3
	hLen = EVP_MD_size(Hash);
	if (hLen < 0)
		goto err;
d220 1
a220 1
		if (RAND_bytes(salt, sLen) <= 0)
d235 1
a235 2
	if (PKCS1_MGF1(EM, maskedDBLen, H, hLen, Hash))
		goto err;
@


1.1.1.5
log
@import OpenSSL-1.0.1c
@
text
@a75 7
	return RSA_verify_PKCS1_PSS_mgf1(rsa, mHash, Hash, NULL, EM, sLen);
	}

int RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, const unsigned char *mHash,
			const EVP_MD *Hash, const EVP_MD *mgf1Hash,
			const unsigned char *EM, int sLen)
	{
a82 4
	EVP_MD_CTX_init(&ctx);

	if (mgf1Hash == NULL)
		mgf1Hash = Hash;
d97 1
a97 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_SLEN_CHECK_FAILED);
d105 1
a105 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_FIRST_OCTET_INVALID);
d115 1
a115 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_DATA_TOO_LARGE);
d120 1
a120 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_LAST_OCTET_INVALID);
d128 1
a128 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, ERR_R_MALLOC_FAILURE);
d131 1
a131 1
	if (PKCS1_MGF1(DB, maskedDBLen, H, hLen, mgf1Hash) < 0)
d140 1
a140 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_SLEN_RECOVERY_FAILED);
d145 1
a145 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_SLEN_CHECK_FAILED);
d148 4
a151 4
	if (!EVP_DigestInit_ex(&ctx, Hash, NULL)
		|| !EVP_DigestUpdate(&ctx, zeroes, sizeof zeroes)
		|| !EVP_DigestUpdate(&ctx, mHash, hLen))
		goto err;
d153 3
a155 6
		{
		if (!EVP_DigestUpdate(&ctx, DB + i, maskedDBLen - i))
			goto err;
		}
	if (!EVP_DigestFinal_ex(&ctx, H_, NULL))
		goto err;
d158 1
a158 1
		RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_BAD_SIGNATURE);
a166 1
	EVP_MD_CTX_cleanup(&ctx);
a175 7
	return RSA_padding_add_PKCS1_PSS_mgf1(rsa, EM, mHash, Hash, NULL, sLen);
	}

int RSA_padding_add_PKCS1_PSS_mgf1(RSA *rsa, unsigned char *EM,
			const unsigned char *mHash,
			const EVP_MD *Hash, const EVP_MD *mgf1Hash, int sLen)
	{
a181 3
	if (mgf1Hash == NULL)
		mgf1Hash = Hash;

d195 1
a195 1
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1, RSA_R_SLEN_CHECK_FAILED);
d212 2
a213 1
		RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1,RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
d221 2
a222 1
			RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1,ERR_R_MALLOC_FAILURE);
d231 6
a236 8
	if (!EVP_DigestInit_ex(&ctx, Hash, NULL)
		|| !EVP_DigestUpdate(&ctx, zeroes, sizeof zeroes)
		|| !EVP_DigestUpdate(&ctx, mHash, hLen))
		goto err;
	if (sLen && !EVP_DigestUpdate(&ctx, salt, sLen))
		goto err;
	if (!EVP_DigestFinal_ex(&ctx, H, NULL))
		goto err;
d240 1
a240 1
	if (PKCS1_MGF1(EM, maskedDBLen, H, hLen, mgf1Hash))
@


