head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2016.09.03.11.33.37;	author beck;	state dead;
branches;
next	1.4;
commitid	HnbXxsegngek41U2;

1.4
date	2015.02.14.06.40.04;	author jsing;	state Exp;
branches;
next	1.3;
commitid	hEOPyu1Y58rJ928S;

1.3
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.2;
commitid	5KSZBoxiLebzObKt;

1.2
date	2014.11.13.20.29.55;	author miod;	state Exp;
branches;
next	1.1;
commitid	JkthWrrizfscXDAd;

1.1
date	2014.11.09.19.17.13;	author miod;	state Exp;
branches;
next	;
commitid	QrgOG8zcUIADOfFd;


desc
@@


1.5
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: gostr341001.c,v 1.4 2015/02/14 06:40:04 jsing Exp $ */
/*
 * Copyright (c) 2014 Dmitry Eremin-Solenikov <dbaryshkov@@gmail.com>
 * Copyright (c) 2005-2006 Cryptocom LTD
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <string.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_GOST
#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/gost.h>
#include "gost_locl.h"

/* Convert little-endian byte array into bignum */
BIGNUM *
GOST_le2bn(const unsigned char *buf, size_t len, BIGNUM *bn)
{
	unsigned char temp[64];
	int i;

	if (len > 64)
		return NULL;

	for (i = 0; i < len; i++) {
		temp[len - 1 - i] = buf[i];
	}

	return BN_bin2bn(temp, len, bn);
}

int
GOST_bn2le(BIGNUM *bn, unsigned char *buf, int len)
{
	unsigned char temp[64];
	int i, bytes;

	bytes = BN_num_bytes(bn);
	if (len > 64 || bytes > len)
		return 0;

	BN_bn2bin(bn, temp);

	for (i = 0; i < bytes; i++) {
		buf[bytes - 1 - i] = temp[i];
	}

	memset(buf + bytes, 0, len - bytes);

	return 1;
}

int
gost2001_compute_public(GOST_KEY *ec)
{
	const EC_GROUP *group = GOST_KEY_get0_group(ec);
	EC_POINT *pub_key = NULL;
	const BIGNUM *priv_key = NULL;
	BN_CTX *ctx = NULL;
	int ok = 0;

	if (group == NULL) {
		GOSTerr(GOST_F_GOST2001_COMPUTE_PUBLIC,
		    GOST_R_KEY_IS_NOT_INITIALIZED);
		return 0;
	}
	ctx = BN_CTX_new();
	if (ctx == NULL) {
		GOSTerr(GOST_F_GOST2001_COMPUTE_PUBLIC,
		    ERR_R_MALLOC_FAILURE);
		return 0;
	}
	BN_CTX_start(ctx);
	if ((priv_key = GOST_KEY_get0_private_key(ec)) == NULL)
		goto err;

	pub_key = EC_POINT_new(group);
	if (pub_key == NULL)
		goto err;
	if (EC_POINT_mul(group, pub_key, priv_key, NULL, NULL, ctx) == 0)
		goto err;
	if (GOST_KEY_set_public_key(ec, pub_key) == 0)
		goto err;
	ok = 1;

	if (ok == 0) {
err:
		GOSTerr(GOST_F_GOST2001_COMPUTE_PUBLIC, ERR_R_EC_LIB);
	}
	EC_POINT_free(pub_key);
	if (ctx != NULL) {
		BN_CTX_end(ctx);
		BN_CTX_free(ctx);
	}
	return ok;
}

ECDSA_SIG *
gost2001_do_sign(BIGNUM *md, GOST_KEY *eckey)
{
	ECDSA_SIG *newsig = NULL;
	BIGNUM *order = NULL;
	const EC_GROUP *group;
	const BIGNUM *priv_key;
	BIGNUM *r = NULL, *s = NULL, *X = NULL, *tmp = NULL, *tmp2 = NULL, *k =
	    NULL, *e = NULL;
	EC_POINT *C = NULL;
	BN_CTX *ctx = BN_CTX_new();
	int ok = 0;

	if (ctx == NULL) {
		GOSTerr(GOST_F_GOST2001_DO_SIGN, ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	BN_CTX_start(ctx);
	newsig = ECDSA_SIG_new();
	if (newsig == NULL) {
		GOSTerr(GOST_F_GOST2001_DO_SIGN, ERR_R_MALLOC_FAILURE);
		goto err;
	}
	s = newsig->s;
	r = newsig->r;
	group = GOST_KEY_get0_group(eckey);
	if ((order = BN_CTX_get(ctx)) == NULL)
		goto err;
	if (EC_GROUP_get_order(group, order, ctx) == 0)
		goto err;
	priv_key = GOST_KEY_get0_private_key(eckey);
	if ((e = BN_CTX_get(ctx)) == NULL)
		goto err;
	if (BN_mod(e, md, order, ctx) == 0)
		goto err;
	if (BN_is_zero(e))
		BN_one(e);
	if ((k = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((X = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((C = EC_POINT_new(group)) == NULL)
		goto err;
	do {
		do {
			if (!BN_rand_range(k, order)) {
				GOSTerr(GOST_F_GOST2001_DO_SIGN,
					GOST_R_RANDOM_NUMBER_GENERATOR_FAILED);
				goto err;
			}
			/*
			 * We do not want timing information to leak the length
			 * of k, so we compute G*k using an equivalent scalar
			 * of fixed bit-length.
			 */
			if (BN_add(k, k, order) == 0)
				goto err;
			if (BN_num_bits(k) <= BN_num_bits(order))
				if (BN_add(k, k, order) == 0)
					goto err;

			if (EC_POINT_mul(group, C, k, NULL, NULL, ctx) == 0) {
				GOSTerr(GOST_F_GOST2001_DO_SIGN, ERR_R_EC_LIB);
				goto err;
			}
			if (EC_POINT_get_affine_coordinates_GFp(group, C, X,
			    NULL, ctx) == 0) {
				GOSTerr(GOST_F_GOST2001_DO_SIGN, ERR_R_EC_LIB);
				goto err;
			}
			if (BN_nnmod(r, X, order, ctx) == 0)
				goto err;
		} while (BN_is_zero(r));
		/* s = (r*priv_key+k*e) mod order */
		if (tmp == NULL) {
			if ((tmp = BN_CTX_get(ctx)) == NULL)
				goto err;
		}
		if (BN_mod_mul(tmp, priv_key, r, order, ctx) == 0)
			goto err;
		if (tmp2 == NULL) {
			if ((tmp2 = BN_CTX_get(ctx)) == NULL)
				goto err;
		}
		if (BN_mod_mul(tmp2, k, e, order, ctx) == 0)
			goto err;
		if (BN_mod_add(s, tmp, tmp2, order, ctx) == 0)
			goto err;
	} while (BN_is_zero(s));
	ok = 1;

err:
	EC_POINT_free(C);
	if (ctx != NULL) {
		BN_CTX_end(ctx);
		BN_CTX_free(ctx);
	}
	if (ok == 0) {
		ECDSA_SIG_free(newsig);
		newsig = NULL;
	}
	return newsig;
}

int
gost2001_do_verify(BIGNUM *md, ECDSA_SIG *sig, GOST_KEY *ec)
{
	BN_CTX *ctx = BN_CTX_new();
	const EC_GROUP *group = GOST_KEY_get0_group(ec);
	BIGNUM *order;
	BIGNUM *e = NULL, *R = NULL, *v = NULL, *z1 = NULL, *z2 = NULL;
	BIGNUM *X = NULL, *tmp = NULL;
	EC_POINT *C = NULL;
	const EC_POINT *pub_key = NULL;
	int ok = 0;

	if (ctx == NULL)
		goto err;
	BN_CTX_start(ctx);
	if ((order = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((e = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((z1 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((z2 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((tmp = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((X = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((R = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((v = BN_CTX_get(ctx)) == NULL)
		goto err;

	if (EC_GROUP_get_order(group, order, ctx) == 0)
		goto err;
	pub_key = GOST_KEY_get0_public_key(ec);
	if (BN_is_zero(sig->s) || BN_is_zero(sig->r) ||
	    BN_cmp(sig->s, order) >= 1 || BN_cmp(sig->r, order) >= 1) {
		GOSTerr(GOST_F_GOST2001_DO_VERIFY,
		    GOST_R_SIGNATURE_PARTS_GREATER_THAN_Q);
		goto err;
	}

	if (BN_mod(e, md, order, ctx) == 0)
		goto err;
	if (BN_is_zero(e))
		BN_one(e);
	if ((v = BN_mod_inverse(v, e, order, ctx)) == NULL)
		goto err;
	if (BN_mod_mul(z1, sig->s, v, order, ctx) == 0)
		goto err;
	if (BN_sub(tmp, order, sig->r) == 0)
		goto err;
	if (BN_mod_mul(z2, tmp, v, order, ctx) == 0)
		goto err;
	if ((C = EC_POINT_new(group)) == NULL)
		goto err;
	if (EC_POINT_mul(group, C, z1, pub_key, z2, ctx) == 0) {
		GOSTerr(GOST_F_GOST2001_DO_VERIFY, ERR_R_EC_LIB);
		goto err;
	}
	if (EC_POINT_get_affine_coordinates_GFp(group, C, X, NULL, ctx) == 0) {
		GOSTerr(GOST_F_GOST2001_DO_VERIFY, ERR_R_EC_LIB);
		goto err;
	}
	if (BN_mod(R, X, order, ctx) == 0)
		goto err;
	if (BN_cmp(R, sig->r) != 0) {
		GOSTerr(GOST_F_GOST2001_DO_VERIFY, GOST_R_SIGNATURE_MISMATCH);
	} else {
		ok = 1;
	}
err:
	EC_POINT_free(C);
	if (ctx != NULL) {
		BN_CTX_end(ctx);
		BN_CTX_free(ctx);
	}
	return ok;
}

/* Implementation of CryptoPro VKO 34.10-2001 algorithm */
int
VKO_compute_key(BIGNUM *X, BIGNUM *Y, const GOST_KEY *pkey, GOST_KEY *priv_key,
    const BIGNUM *ukm)
{
	BIGNUM *p = NULL, *order = NULL;
	const BIGNUM *key = GOST_KEY_get0_private_key(priv_key);
	const EC_GROUP *group = GOST_KEY_get0_group(priv_key);
	const EC_POINT *pub_key = GOST_KEY_get0_public_key(pkey);
	EC_POINT *pnt;
	BN_CTX *ctx = NULL;
	int ok = 0;

	pnt = EC_POINT_new(group);
	if (pnt == NULL)
		goto err;
	ctx = BN_CTX_new();
	if (ctx == NULL)
		goto err;
	BN_CTX_start(ctx);
	if ((p = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((order = BN_CTX_get(ctx)) == NULL)
		goto err;
	if (EC_GROUP_get_order(group, order, ctx) == 0)
		goto err;
	if (BN_mod_mul(p, key, ukm, order, ctx) == 0)
		goto err;
	if (EC_POINT_mul(group, pnt, NULL, pub_key, p, ctx) == 0)
		goto err;
	if (EC_POINT_get_affine_coordinates_GFp(group, pnt, X, Y, ctx) == 0)
		goto err;
	ok = 1;

err:
	if (ctx != NULL) {
		BN_CTX_end(ctx);
		BN_CTX_free(ctx);
	}
	EC_POINT_free(pnt);
	return ok;
}

int
gost2001_keygen(GOST_KEY *ec)
{
	BIGNUM *order = BN_new(), *d = BN_new();
	const EC_GROUP *group = GOST_KEY_get0_group(ec);
	int rc = 0;

	if (order == NULL || d == NULL)
		goto err;
	if (EC_GROUP_get_order(group, order, NULL) == 0)
		goto err;

	do {
		if (BN_rand_range(d, order) == 0) {
			GOSTerr(GOST_F_GOST2001_KEYGEN,
				GOST_R_RANDOM_NUMBER_GENERATOR_FAILED);
			goto err;
		}
	} while (BN_is_zero(d));

	if (GOST_KEY_set_private_key(ec, d) == 0)
		goto err;
	rc = gost2001_compute_public(ec);

err:
	BN_free(d);
	BN_free(order);
	return rc;
}
#endif
@


1.4
log
@Consistently check the return value from BN_CTX_get() on assignment.

This is the same as the previous larger commit, however it would seem the
GOST part got missed.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: gostr341001.c,v 1.3 2015/02/11 03:19:37 doug Exp $ */
@


1.3
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: gostr341001.c,v 1.2 2014/11/13 20:29:55 miod Exp $ */
d171 1
a171 2
	order = BN_CTX_get(ctx);
	if (order == NULL)
d176 1
a176 2
	e = BN_CTX_get(ctx);
	if (e == NULL)
d182 5
a186 4
	k = BN_CTX_get(ctx);
	X = BN_CTX_get(ctx);
	C = EC_POINT_new(group);
	if (C == NULL)
d220 1
a220 2
			tmp = BN_CTX_get(ctx);
			if (tmp == NULL)
d226 1
a226 2
			tmp2 = BN_CTX_get(ctx);
			if (tmp2 == NULL)
d264 15
a278 9
	order = BN_CTX_get(ctx);
	e = BN_CTX_get(ctx);
	z1 = BN_CTX_get(ctx);
	z2 = BN_CTX_get(ctx);
	tmp = BN_CTX_get(ctx);
	X = BN_CTX_get(ctx);
	R = BN_CTX_get(ctx);
	v = BN_CTX_get(ctx);
	if (v == NULL)
d295 1
a295 2
	v = BN_mod_inverse(v, e, order, ctx);
	if (v == NULL)
d303 1
a303 2
	C = EC_POINT_new(group);
	if (C == NULL)
d349 3
a351 3
	p = BN_CTX_get(ctx);
	order = BN_CTX_get(ctx);
	if (order == NULL)
@


1.2
log
@Add many missing error checks (probably not exhaustive, but a good start):
- make VKO_compute_key() no longer void so that it can return failure.
- fix unchecked allocations in too many routines to mention /-:
- fix unchecked BN operations in gost2001_do_sign(), gost2001_do_verify(),
  VKO_compute_key().
- fix the gost2001_do_sign() interface violation by having its sole caller
  free the BIGNUM it passes to that function by itself, instead of having
  the callee do this.

Reviewed (except for the last item) by Dmitry Eremin-Solenikov.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d57 1
@


1.1
log
@GOST crypto algorithms (well, most of them), ported from the removed GOST
engine to regular EVP citizens, contributed by Dmitry Eremin-Solenikov;
libcrypto bits only for now.

This is a verbatim import of Dmitry's work, and does not compile in this
state; the forthcoming commits will address these issues.

None of the GOST code is enabled in libcrypto yet, for it still gets
compiled with OPENSSL_NO_GOST defined. However, the public header gost.h
will be installed.
@
text
@d62 2
a63 1
BIGNUM *GOST_le2bn(const unsigned char * buf, size_t len, BIGNUM * bn)
d67 1
d78 2
a79 1
int GOST_bn2le(BIGNUM * bn, unsigned char * buf, int len)
d99 2
a100 2

int gost2001_compute_public(GOST_KEY * ec)
d108 1
a108 1
	if (!group) {
d110 1
a110 1
			GOST_R_KEY_IS_NOT_INITIALIZED);
d114 5
d120 1
a120 2
	if (!(priv_key = GOST_KEY_get0_private_key(ec))) {
		GOSTerr(GOST_F_GOST2001_COMPUTE_PUBLIC, ERR_R_EC_LIB);
a121 1
	}
d124 5
a128 2
	if (!EC_POINT_mul(group, pub_key, priv_key, NULL, NULL, ctx)) {
		GOSTerr(GOST_F_GOST2001_COMPUTE_PUBLIC, ERR_R_EC_LIB);
d130 4
a133 2
	}
	if (!GOST_KEY_set_public_key(ec, pub_key)) {
a134 1
		goto err;
a135 3
	ok = 256;
err:
	BN_CTX_end(ctx);
d137 4
a140 1
	BN_CTX_free(ctx);
d144 2
a145 1
ECDSA_SIG *gost2001_do_sign(BIGNUM * md, GOST_KEY * eckey)
d155 6
d163 1
a163 1
	if (!newsig) {
d171 4
a174 1
	EC_GROUP_get_order(group, order, ctx);
d177 5
a181 2
	BN_mod(e, md, order, ctx);
	if (BN_is_zero(e)) {
a182 1
	}
d186 2
a192 2
				ECDSA_SIG_free(newsig);
				newsig = NULL;
d195 6
a200 4
			/* We do not want timing information to leak the length of k,
			 * so we compute G*k using an equivalent scalar of fixed
			 * bit-length. */
			if (!BN_add(k, k, order))
d203 1
a203 1
				if (!BN_add(k, k, order))
d206 1
a206 1
			if (!EC_POINT_mul(group, C, k, NULL, NULL, ctx)) {
a207 2
				ECDSA_SIG_free(newsig);
				newsig = NULL;
d210 2
a211 2
			if (!EC_POINT_get_affine_coordinates_GFp
			    (group, C, X, NULL, ctx)) {
a212 2
				ECDSA_SIG_free(newsig);
				newsig = NULL;
d215 8
a222 1
			BN_nnmod(r, X, order, ctx);
d224 3
a226 6
		while (BN_is_zero(r));
		/* s =  (r*priv_key+k*e) mod order */
		if (!tmp)
			tmp = BN_CTX_get(ctx);
		BN_mod_mul(tmp, priv_key, r, order, ctx);
		if (!tmp2)
d228 9
a236 4
		BN_mod_mul(tmp2, k, e, order, ctx);
		BN_mod_add(s, tmp, tmp2, order, ctx);
	}
	while (BN_is_zero(s));
a238 2
	BN_CTX_end(ctx);
	BN_CTX_free(ctx);
d240 8
a247 1
	BN_free(md);
d251 2
a252 1
int gost2001_do_verify(BIGNUM * md, ECDSA_SIG * sig, GOST_KEY * ec)
d263 2
d274 2
d277 2
a278 1
	EC_GROUP_get_order(group, order, ctx);
d281 3
a283 2
	    (BN_cmp(sig->s, order) >= 1) || (BN_cmp(sig->r, order) >= 1)) {
		GOSTerr(GOST_F_GOST2001_DO_VERIFY, GOST_R_SIGNATURE_PARTS_GREATER_THAN_Q);
a284 1

d287 2
a288 1
	BN_mod(e, md, order, ctx);
d292 8
a299 3
	BN_mod_mul(z1, sig->s, v, order, ctx);
	BN_sub(tmp, order, sig->r);
	BN_mod_mul(z2, tmp, v, order, ctx);
d301 3
a303 1
	if (!EC_POINT_mul(group, C, z1, pub_key, z2, ctx)) {
d307 1
a307 1
	if (!EC_POINT_get_affine_coordinates_GFp(group, C, X, NULL, ctx)) {
d311 2
a312 1
	BN_mod(R, X, order, ctx);
d318 1
a318 1
 err:
d320 4
a323 2
	BN_CTX_end(ctx);
	BN_CTX_free(ctx);
a326 1

d328 3
a330 3
void VKO_compute_key(BIGNUM * X, BIGNUM * Y,
		     const GOST_KEY * pkey, GOST_KEY * priv_key,
		     const BIGNUM * ukm)
d334 1
d336 3
a338 2
	EC_POINT *pnt = EC_POINT_new(GOST_KEY_get0_group(priv_key));
	BN_CTX *ctx = BN_CTX_new();
d340 6
d349 17
a365 7
	EC_GROUP_get_order(GOST_KEY_get0_group(priv_key), order, ctx);
	BN_mod_mul(p, key, ukm, order, ctx);
	EC_POINT_mul(GOST_KEY_get0_group(priv_key), pnt, NULL, pub_key, p, ctx);
	EC_POINT_get_affine_coordinates_GFp(GOST_KEY_get0_group(priv_key),
					    pnt, X, Y, ctx);
	BN_CTX_end(ctx);
	BN_CTX_free(ctx);
d367 1
d370 2
a371 1
int gost2001_keygen(GOST_KEY * ec)
d375 6
a380 1
	EC_GROUP_get_order(group, order, NULL);
d383 1
a383 1
		if (!BN_rand_range(d, order)) {
d386 1
a386 3
			BN_free(d);
			BN_free(order);
			return 0;
d389 6
a394 1
	GOST_KEY_set_private_key(ec, d);
d397 1
a397 1
	return gost2001_compute_public(ec);
@

