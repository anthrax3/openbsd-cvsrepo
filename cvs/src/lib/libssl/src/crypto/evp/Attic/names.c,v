head	1.13;
access;
symbols
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.6
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	openssl_0_9_8_k:1.1.1.5
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.09.03.11.33.37;	author beck;	state dead;
branches;
next	1.12;
commitid	HnbXxsegngek41U2;

1.12
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.05.03.15.50.24;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.22;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.15.06.18.39;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.16;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.30;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.11;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.44;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: names.c,v 1.12 2014/07/11 08:44:48 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

int
EVP_add_cipher(const EVP_CIPHER *c)
{
	int r;

	if (c == NULL)
		return 0;

	OPENSSL_init();

	r = OBJ_NAME_add(OBJ_nid2sn(c->nid), OBJ_NAME_TYPE_CIPHER_METH,
	    (const char *)c);
	if (r == 0)
		return (0);
	check_defer(c->nid);
	r = OBJ_NAME_add(OBJ_nid2ln(c->nid), OBJ_NAME_TYPE_CIPHER_METH,
	    (const char *)c);
	return (r);
}

int
EVP_add_digest(const EVP_MD *md)
{
	int r;
	const char *name;

	OPENSSL_init();

	name = OBJ_nid2sn(md->type);
	r = OBJ_NAME_add(name, OBJ_NAME_TYPE_MD_METH, (const char *)md);
	if (r == 0)
		return (0);
	check_defer(md->type);
	r = OBJ_NAME_add(OBJ_nid2ln(md->type), OBJ_NAME_TYPE_MD_METH,
	    (const char *)md);
	if (r == 0)
		return (0);

	if (md->pkey_type && md->type != md->pkey_type) {
		r = OBJ_NAME_add(OBJ_nid2sn(md->pkey_type),
		    OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS, name);
		if (r == 0)
			return (0);
		check_defer(md->pkey_type);
		r = OBJ_NAME_add(OBJ_nid2ln(md->pkey_type),
		    OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS, name);
	}
	return (r);
}

const EVP_CIPHER *
EVP_get_cipherbyname(const char *name)
{
	const EVP_CIPHER *cp;

	cp = (const EVP_CIPHER *)OBJ_NAME_get(name, OBJ_NAME_TYPE_CIPHER_METH);
	return (cp);
}

const EVP_MD *
EVP_get_digestbyname(const char *name)
{
	const EVP_MD *cp;

	cp = (const EVP_MD *)OBJ_NAME_get(name, OBJ_NAME_TYPE_MD_METH);
	return (cp);
}

void
EVP_cleanup(void)
{
	OBJ_NAME_cleanup(OBJ_NAME_TYPE_CIPHER_METH);
	OBJ_NAME_cleanup(OBJ_NAME_TYPE_MD_METH);
	/* The above calls will only clean out the contents of the name
	   hash table, but not the hash table itself.  The following line
	   does that part.  -- Richard Levitte */
	OBJ_NAME_cleanup(-1);

	EVP_PBE_cleanup();
	if (obj_cleanup_defer == 2) {
		obj_cleanup_defer = 0;
		OBJ_cleanup();
	}
	OBJ_sigid_free();
}

struct doall_cipher {
	void *arg;
	void (*fn)(const EVP_CIPHER *ciph, const char *from, const char *to,
	    void *arg);
};

static void
do_all_cipher_fn(const OBJ_NAME *nm, void *arg)
{
	struct doall_cipher *dc = arg;

	if (nm->alias)
		dc->fn(NULL, nm->name, nm->data, dc->arg);
	else
		dc->fn((const EVP_CIPHER *)nm->data, nm->name, NULL, dc->arg);
}

void
EVP_CIPHER_do_all(void (*fn)(const EVP_CIPHER *ciph, const char *from,
    const char *to, void *x), void *arg)
{
	struct doall_cipher dc;

	dc.fn = fn;
	dc.arg = arg;
	OBJ_NAME_do_all(OBJ_NAME_TYPE_CIPHER_METH, do_all_cipher_fn, &dc);
}

void
EVP_CIPHER_do_all_sorted(void (*fn)(const EVP_CIPHER *ciph, const char *from,
    const char *to, void *x), void *arg)
{
	struct doall_cipher dc;

	dc.fn = fn;
	dc.arg = arg;
	OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH,
	    do_all_cipher_fn, &dc);
}

struct doall_md {
	void *arg;
	void (*fn)(const EVP_MD *ciph, const char *from, const char *to,
	    void *arg);
};

static void
do_all_md_fn(const OBJ_NAME *nm, void *arg)
{
	struct doall_md *dc = arg;

	if (nm->alias)
		dc->fn(NULL, nm->name, nm->data, dc->arg);
	else
		dc->fn((const EVP_MD *)nm->data, nm->name, NULL, dc->arg);
}

void
EVP_MD_do_all(void (*fn)(const EVP_MD *md, const char *from, const char *to,
    void *x), void *arg)
{
	struct doall_md dc;

	dc.fn = fn;
	dc.arg = arg;
	OBJ_NAME_do_all(OBJ_NAME_TYPE_MD_METH, do_all_md_fn, &dc);
}

void
EVP_MD_do_all_sorted(void (*fn)(const EVP_MD *md,
    const char *from, const char *to, void *x), void *arg)
{
	struct doall_md dc;

	dc.fn = fn;
	dc.arg = arg;
	OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_MD_METH, do_all_md_fn, &dc);
}
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: names.c,v 1.11 2014/06/12 15:49:29 deraadt Exp $ */
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
@


1.10
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/evp/names.c */
@


1.9
log
@resolve conflicts
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d65 3
a67 2
int EVP_add_cipher(const EVP_CIPHER *c)
	{
d70 2
a71 1
	if (c == NULL) return 0;
d75 4
a78 2
	r=OBJ_NAME_add(OBJ_nid2sn(c->nid),OBJ_NAME_TYPE_CIPHER_METH,(const char *)c);
	if (r == 0) return(0);
d80 8
a87 7
	r=OBJ_NAME_add(OBJ_nid2ln(c->nid),OBJ_NAME_TYPE_CIPHER_METH,(const char *)c);
	return(r);
	}


int EVP_add_digest(const EVP_MD *md)
	{
d90 1
d93 4
a96 3
	name=OBJ_nid2sn(md->type);
	r=OBJ_NAME_add(name,OBJ_NAME_TYPE_MD_METH,(const char *)md);
	if (r == 0) return(0);
d98 10
a107 8
	r=OBJ_NAME_add(OBJ_nid2ln(md->type),OBJ_NAME_TYPE_MD_METH,(const char *)md);
	if (r == 0) return(0);

	if (md->pkey_type && md->type != md->pkey_type)
		{
		r=OBJ_NAME_add(OBJ_nid2sn(md->pkey_type),
			OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS,name);
		if (r == 0) return(0);
d109 2
a110 4
		r=OBJ_NAME_add(OBJ_nid2ln(md->pkey_type),
			OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS,name);
		}
	return(r);
d112 2
d115 3
a117 2
const EVP_CIPHER *EVP_get_cipherbyname(const char *name)
	{
d120 7
a126 6
	cp=(const EVP_CIPHER *)OBJ_NAME_get(name,OBJ_NAME_TYPE_CIPHER_METH);
	return(cp);
	}

const EVP_MD *EVP_get_digestbyname(const char *name)
	{
d129 7
a135 6
	cp=(const EVP_MD *)OBJ_NAME_get(name,OBJ_NAME_TYPE_MD_METH);
	return(cp);
	}

void EVP_cleanup(void)
	{
d144 1
a144 2
	if (obj_cleanup_defer == 2)
		{
d147 1
a147 1
		}
d149 1
a149 1
	}
d151 1
a151 2
struct doall_cipher
	{
d153 8
a160 3
	void (*fn)(const EVP_CIPHER *ciph,
			const char *from, const char *to, void *arg);
	};
a161 3
static void do_all_cipher_fn(const OBJ_NAME *nm, void *arg)
	{
	struct doall_cipher *dc = arg;
d166 1
a166 1
	}
d168 4
a171 3
void EVP_CIPHER_do_all(void (*fn)(const EVP_CIPHER *ciph,
		const char *from, const char *to, void *x), void *arg)
	{
d173 1
d177 1
a177 1
	}
d179 4
a182 3
void EVP_CIPHER_do_all_sorted(void (*fn)(const EVP_CIPHER *ciph,
		const char *from, const char *to, void *x), void *arg)
	{
d184 1
d187 3
a189 2
	OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH, do_all_cipher_fn,&dc);
	}
d191 1
a191 2
struct doall_md
	{
d193 8
a200 3
	void (*fn)(const EVP_MD *ciph,
			const char *from, const char *to, void *arg);
	};
a201 3
static void do_all_md_fn(const OBJ_NAME *nm, void *arg)
	{
	struct doall_md *dc = arg;
d206 1
a206 1
	}
d208 4
a211 3
void EVP_MD_do_all(void (*fn)(const EVP_MD *md,
		const char *from, const char *to, void *x), void *arg)
	{
d213 1
d217 1
a217 1
	}
d219 4
a222 3
void EVP_MD_do_all_sorted(void (*fn)(const EVP_MD *md,
		const char *from, const char *to, void *x), void *arg)
	{
d224 1
d228 1
a228 1
	}
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d69 4
d85 1
@


1.7
log
@resolve conflicts
@
text
@a68 4
#ifdef OPENSSL_FIPS
	OPENSSL_init();
#endif

d71 1
d76 1
a81 3
#ifdef OPENSSL_FIPS
	OPENSSL_init();
#endif
d85 1
d89 1
a89 1
	if (md->type != md->pkey_type)
d94 1
d127 74
@


1.6
log
@resolve conflicts
@
text
@d69 4
d84 3
@


1.5
log
@resolve conflicts
@
text
@a63 3
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif
d69 1
a69 1
	r=OBJ_NAME_add(OBJ_nid2sn(c->nid),OBJ_NAME_TYPE_CIPHER_METH,(char *)c);
d71 1
a71 1
	r=OBJ_NAME_add(OBJ_nid2ln(c->nid),OBJ_NAME_TYPE_CIPHER_METH,(char *)c);
d81 1
a81 1
	r=OBJ_NAME_add(name,OBJ_NAME_TYPE_MD_METH,(char *)md);
d83 1
a83 1
	r=OBJ_NAME_add(OBJ_nid2ln(md->type),OBJ_NAME_TYPE_MD_METH,(char *)md);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d64 3
@


1.3
log
@OpenSSL 0.9.5a merge
@
text
@d65 1
a65 1
int EVP_add_cipher(EVP_CIPHER *c)
d75 1
a75 1
int EVP_add_digest(EVP_MD *md)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d117 5
@


1.1
log
@Initial revision
@
text
@d61 3
a63 2
#include "evp.h"
#include "objects.h"
d65 1
a65 21
typedef struct aliases_st {
	char *alias;
	/* This must be the last field becaue I will allocate things
	 * so they go off the end of it */
	char name[4];
	} ALIASES;

static STACK /* ALIASES */ *aliases=NULL;
static STACK /* EVP_CIPHERS */ *ciphers=NULL;
static STACK /* EVP_MD */ *digests=NULL;

static int cipher_nid_cmp(a,b)
EVP_CIPHER **a,**b;
	{ return((*a)->nid - (*b)->nid); }

static int digest_type_cmp(a,b)
EVP_MD **a,**b;
	{ return((*a)->pkey_type - (*b)->pkey_type); }

int EVP_add_cipher(c)
EVP_CIPHER *c;
d67 1
a67 1
	int i;
d69 4
a72 12
	if (ciphers == NULL)
		{
		ciphers=sk_new(cipher_nid_cmp);
		if (ciphers == NULL) return(0);
		}
	if ((i=sk_find(ciphers,(char *)c)) >= 0)
		{
		if (sk_value(ciphers,i) == (char *)c)
			return(1);
		sk_delete(ciphers,i);
		}
	return(sk_push(ciphers,(char *)c));
d75 1
a75 2
int EVP_add_digest(md)
EVP_MD *md;
d77 8
a84 2
	int i;
	char *n;
a85 11
	if (digests == NULL)
		{
		digests=sk_new(digest_type_cmp);
		if (digests == NULL) return(0);
		}
	if ((i=sk_find(digests,(char *)md)) >= 0)
		{
		if (sk_value(digests,i) == (char *)md)
			return(1);
		sk_delete(digests,i);
		}
d88 5
a92 3
		n=OBJ_nid2sn(md->pkey_type);
		EVP_add_alias(n,OBJ_nid2sn(md->type));
		EVP_add_alias(n,OBJ_nid2ln(md->type));
d94 1
a94 2
	sk_push(digests,(char *)md);
	return(1);
d97 1
a97 2
static int alias_cmp(a,b)
ALIASES **a,**b;
d99 1
a99 2
	return(strcmp((*a)->alias,(*b)->alias));
	}
d101 2
a102 33
int EVP_add_alias(name,aname)
char *name;
char *aname;
	{
	int l1,l2,i;
	ALIASES *a;
	char *p;

	if ((name == NULL) || (aname == NULL)) return(0);
	l1=strlen(name)+1;
	l2=strlen(aname)+1;
	i=sizeof(ALIASES)+l1+l2;
	if ((a=(ALIASES *)Malloc(i)) == NULL)
		return(0);
	strcpy(a->name,name);
	p= &(a->name[l1]);
	strcpy(p,aname);
	a->alias=p;

	if (aliases == NULL)
		{
		aliases=sk_new(alias_cmp);
		if (aliases == NULL) goto err;
		}

	if ((i=sk_find(aliases,(char *)a)) >= 0)
		{
		Free(sk_delete(aliases,i));
		}
	if (!sk_push(aliases,(char *)a)) goto err;
	return(1);
err:
	return(0);
d105 1
a105 2
int EVP_delete_alias(name)
char *name;
d107 1
a107 2
	ALIASES a;
	int i;
d109 2
a110 10
	if (aliases != NULL)
		{
		a.alias=name;
		if ((i=sk_find(aliases,(char *)&a)) >= 0)
			{
			Free(sk_delete(aliases,i));
			return(1);
			}
		}
	return(0);
d113 1
a113 2
EVP_CIPHER *EVP_get_cipherbyname(name)
char *name;
d115 3
a117 94
	int nid,num=6,i;
	EVP_CIPHER c,*cp;
	ALIASES a,*ap;

	if (ciphers == NULL) return(NULL);
	for (;;)
		{
		if (num-- <= 0) return(NULL);
		if (aliases != NULL)
			{
			a.alias=name;
			i=sk_find(aliases,(char *)&a);
			if (i >= 0)
				{
				ap=(ALIASES *)sk_value(aliases,i);
				name=ap->name;
				continue;
				}
			}

		nid=OBJ_txt2nid(name);
		if (nid == NID_undef) return(NULL);
		c.nid=nid;
		i=sk_find(ciphers,(char *)&c);
		if (i >= 0)
			{
			cp=(EVP_CIPHER *)sk_value(ciphers,i);
			return(cp);
			}
		else
			return(NULL);
		}
	}

EVP_MD *EVP_get_digestbyname(name)
char *name;
	{
	int nid,num=6,i;
	EVP_MD c,*cp;
	ALIASES a,*ap;

	if (digests == NULL) return(NULL);

	for (;;)
		{
		if (num-- <= 0) return(NULL);

		if (aliases != NULL)
			{
			a.alias=name;
			i=sk_find(aliases,(char *)&a);
			if (i >= 0)
				{
				ap=(ALIASES *)sk_value(aliases,i);
				name=ap->name;
				continue;
				}
			}

		nid=OBJ_txt2nid(name);
		if (nid == NID_undef) return(NULL);
		c.pkey_type=nid;
		i=sk_find(digests,(char *)&c);
		if (i >= 0)
			{
			cp=(EVP_MD *)sk_value(digests,i);
			return(cp);
			}
		else
			return(NULL);
		}
	}

void EVP_cleanup()
	{
	int i;

	if (aliases != NULL)
		{
		for (i=0; i<sk_num(aliases); i++)
			Free(sk_value(aliases,i));
		sk_free(aliases);
		aliases=NULL;
		}
	if (ciphers != NULL)
		{
		sk_free(ciphers);
		ciphers=NULL;
		}
	if (digests != NULL)
		{
		sk_free(digests);
		digests=NULL;
		}
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 3
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
d64 40
a103 1
int EVP_add_cipher(const EVP_CIPHER *c)
d105 23
a127 1
	int r;
d129 4
a132 4
	r=OBJ_NAME_add(OBJ_nid2sn(c->nid),OBJ_NAME_TYPE_CIPHER_METH,(char *)c);
	if (r == 0) return(0);
	r=OBJ_NAME_add(OBJ_nid2ln(c->nid),OBJ_NAME_TYPE_CIPHER_METH,(char *)c);
	return(r);
d135 3
a137 1
int EVP_add_digest(const EVP_MD *md)
d139 30
a168 2
	int r;
	const char *name;
d170 5
a174 5
	name=OBJ_nid2sn(md->type);
	r=OBJ_NAME_add(name,OBJ_NAME_TYPE_MD_METH,(char *)md);
	if (r == 0) return(0);
	r=OBJ_NAME_add(OBJ_nid2ln(md->type),OBJ_NAME_TYPE_MD_METH,(char *)md);
	if (r == 0) return(0);
d176 1
a176 1
	if (md->type != md->pkey_type)
d178 6
a183 5
		r=OBJ_NAME_add(OBJ_nid2sn(md->pkey_type),
			OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS,name);
		if (r == 0) return(0);
		r=OBJ_NAME_add(OBJ_nid2ln(md->pkey_type),
			OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS,name);
d185 1
a185 1
	return(r);
d188 2
a189 1
const EVP_CIPHER *EVP_get_cipherbyname(const char *name)
d191 3
a193 1
	const EVP_CIPHER *cp;
d195 28
a222 2
	cp=(const EVP_CIPHER *)OBJ_NAME_get(name,OBJ_NAME_TYPE_CIPHER_METH);
	return(cp);
d225 2
a226 1
const EVP_MD *EVP_get_digestbyname(const char *name)
d228 3
a230 1
	const EVP_MD *cp;
d232 30
a261 2
	cp=(const EVP_MD *)OBJ_NAME_get(name,OBJ_NAME_TYPE_MD_METH);
	return(cp);
d264 1
a264 1
void EVP_cleanup(void)
d266 1
a266 6
	OBJ_NAME_cleanup(OBJ_NAME_TYPE_CIPHER_METH);
	OBJ_NAME_cleanup(OBJ_NAME_TYPE_MD_METH);
	/* The above calls will only clean out the contents of the name
	   hash table, but not the hash table itself.  The following line
	   does that part.  -- Richard Levitte */
	OBJ_NAME_cleanup(-1);
d268 17
a284 1
	EVP_PBE_cleanup();
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a63 3
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d64 3
d72 1
a72 1
	r=OBJ_NAME_add(OBJ_nid2sn(c->nid),OBJ_NAME_TYPE_CIPHER_METH,(const char *)c);
d74 1
a74 1
	r=OBJ_NAME_add(OBJ_nid2ln(c->nid),OBJ_NAME_TYPE_CIPHER_METH,(const char *)c);
d84 1
a84 1
	r=OBJ_NAME_add(name,OBJ_NAME_TYPE_MD_METH,(const char *)md);
d86 1
a86 1
	r=OBJ_NAME_add(OBJ_nid2ln(md->type),OBJ_NAME_TYPE_MD_METH,(const char *)md);
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@a68 4
#ifdef OPENSSL_FIPS
	OPENSSL_init();
#endif

a79 3
#ifdef OPENSSL_FIPS
	OPENSSL_init();
#endif
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d69 4
a74 1
	check_defer(c->nid);
a78 1

d84 3
a89 1
	check_defer(md->type);
d93 1
a93 1
	if (md->pkey_type && md->type != md->pkey_type)
a97 1
		check_defer(md->pkey_type);
a129 74
	if (obj_cleanup_defer == 2)
		{
		obj_cleanup_defer = 0;
		OBJ_cleanup();
		}
	OBJ_sigid_free();
	}

struct doall_cipher
	{
	void *arg;
	void (*fn)(const EVP_CIPHER *ciph,
			const char *from, const char *to, void *arg);
	};

static void do_all_cipher_fn(const OBJ_NAME *nm, void *arg)
	{
	struct doall_cipher *dc = arg;
	if (nm->alias)
		dc->fn(NULL, nm->name, nm->data, dc->arg);
	else
		dc->fn((const EVP_CIPHER *)nm->data, nm->name, NULL, dc->arg);
	}

void EVP_CIPHER_do_all(void (*fn)(const EVP_CIPHER *ciph,
		const char *from, const char *to, void *x), void *arg)
	{
	struct doall_cipher dc;
	dc.fn = fn;
	dc.arg = arg;
	OBJ_NAME_do_all(OBJ_NAME_TYPE_CIPHER_METH, do_all_cipher_fn, &dc);
	}

void EVP_CIPHER_do_all_sorted(void (*fn)(const EVP_CIPHER *ciph,
		const char *from, const char *to, void *x), void *arg)
	{
	struct doall_cipher dc;
	dc.fn = fn;
	dc.arg = arg;
	OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH, do_all_cipher_fn,&dc);
	}

struct doall_md
	{
	void *arg;
	void (*fn)(const EVP_MD *ciph,
			const char *from, const char *to, void *arg);
	};

static void do_all_md_fn(const OBJ_NAME *nm, void *arg)
	{
	struct doall_md *dc = arg;
	if (nm->alias)
		dc->fn(NULL, nm->name, nm->data, dc->arg);
	else
		dc->fn((const EVP_MD *)nm->data, nm->name, NULL, dc->arg);
	}

void EVP_MD_do_all(void (*fn)(const EVP_MD *md,
		const char *from, const char *to, void *x), void *arg)
	{
	struct doall_md dc;
	dc.fn = fn;
	dc.arg = arg;
	OBJ_NAME_do_all(OBJ_NAME_TYPE_MD_METH, do_all_md_fn, &dc);
	}

void EVP_MD_do_all_sorted(void (*fn)(const EVP_MD *md,
		const char *from, const char *to, void *x), void *arg)
	{
	struct doall_md dc;
	dc.fn = fn;
	dc.arg = arg;
	OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_MD_METH, do_all_md_fn, &dc);
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@a68 4
	if (c == NULL) return 0;

	OPENSSL_init();

a80 1
	OPENSSL_init();
@


