head	1.15;
access;
symbols
	butholakala:1.8
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.7.0.14
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.16
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.7.0.12
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2014.06.24.19.31.50;	author miod;	state dead;
branches;
next	1.14;
commitid	OUHEvv0Yogw78Iii;

1.14
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	2nvnQBrv22dLtvTt;

1.12
date	2014.05.03.16.22.28;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.23.18.40.39;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.04.22.36.10;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.39;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.10.15;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.09;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.26;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.18;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.41.43;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove BIO_f_reliable(), guilty of playing with EVP_MD_CTX internals it
should not know anything about. Verified not to be used in ports; riding upon
the recent libcrypto major bump.
@
text
@/* $OpenBSD: bio_ok.c,v 1.14 2014/06/12 15:49:29 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/*
	From: Arne Ansper <arne@@cyber.ee>

	Why BIO_f_reliable?

	I wrote function which took BIO* as argument, read data from it
	and processed it. Then I wanted to store the input file in
	encrypted form. OK I pushed BIO_f_cipher to the BIO stack
	and everything was OK. BUT if user types wrong password
	BIO_f_cipher outputs only garbage and my function crashes. Yes
	I can and I should fix my function, but BIO_f_cipher is
	easy way to add encryption support to many existing applications
	and it's hard to debug and fix them all.

	So I wanted another BIO which would catch the incorrect passwords and
	file damages which cause garbage on BIO_f_cipher's output.

	The easy way is to push the BIO_f_md and save the checksum at
	the end of the file. However there are several problems with this
	approach:

	1) you must somehow separate checksum from actual data.
	2) you need lot's of memory when reading the file, because you
	must read to the end of the file and verify the checksum before
	letting the application to read the data.

	BIO_f_reliable tries to solve both problems, so that you can
	read and write arbitrary long streams using only fixed amount
	of memory.

	BIO_f_reliable splits data stream into blocks. Each block is prefixed
	with it's length and suffixed with it's digest. So you need only
	several Kbytes of memory to buffer single block before verifying
	it's digest.

	BIO_f_reliable goes further and adds several important capabilities:

	1) the digest of the block is computed over the whole stream
	-- so nobody can rearrange the blocks or remove or replace them.

	2) to detect invalid passwords right at the start BIO_f_reliable
	adds special prefix to the stream. In order to avoid known plain-text
	attacks this prefix is generated as follows:

		*) digest is initialized with random seed instead of
		standardized one.
		*) same seed is written to output
		*) well-known text is then hashed and the output
		of the digest is also written to output.

	reader can now read the seed from stream, hash the same string
	and then compare the digest output.

	Bad things: BIO_f_reliable knows what's going on in EVP_Digest. I
	initially wrote and tested this code on x86 machine and wrote the
	digests out in machine-dependent order :( There are people using
	this code and I cannot change this easily without making existing
	data files unreadable.

*/

#include <stdio.h>
#include <errno.h>
#include <assert.h>
#include <machine/endian.h>
#include "cryptlib.h"
#include <openssl/buffer.h>
#include <openssl/bio.h>
#include <openssl/evp.h>
#include <openssl/rand.h>

static int ok_write(BIO *h, const char *buf, int num);
static int ok_read(BIO *h, char *buf, int size);
static long ok_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int ok_new(BIO *h);
static int ok_free(BIO *data);
static long ok_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);

static int sig_out(BIO* b);
static int sig_in(BIO* b);
static int block_out(BIO* b);
static int block_in(BIO* b);
#define OK_BLOCK_SIZE	(1024*4)
#define OK_BLOCK_BLOCK	4
#define IOBS		(OK_BLOCK_SIZE+ OK_BLOCK_BLOCK+ 3*EVP_MAX_MD_SIZE)
#define WELLKNOWN "The quick brown fox jumped over the lazy dog's back."

typedef struct ok_struct {
	size_t buf_len;
	size_t buf_off;
	size_t buf_len_save;
	size_t buf_off_save;
	int cont;		/* <= 0 when finished */
	int finished;
	EVP_MD_CTX md;
	int blockout;		/* output block is ready */
	int sigio;		/* must process signature */
	unsigned char buf[IOBS];
} BIO_OK_CTX;

static BIO_METHOD methods_ok = {
	.type = BIO_TYPE_CIPHER,
	.name = "reliable",
	.bwrite = ok_write,
	.bread = ok_read,
	.ctrl = ok_ctrl,
	.create = ok_new,
	.destroy = ok_free,
	.callback_ctrl = ok_callback_ctrl
};

BIO_METHOD *
BIO_f_reliable(void)
{
	return (&methods_ok);
}

static int
ok_new(BIO *bi)
{
	BIO_OK_CTX *ctx;

	ctx = malloc(sizeof(BIO_OK_CTX));
	if (ctx == NULL)
		return (0);

	ctx->buf_len = 0;
	ctx->buf_off = 0;
	ctx->buf_len_save = 0;
	ctx->buf_off_save = 0;
	ctx->cont = 1;
	ctx->finished = 0;
	ctx->blockout = 0;
	ctx->sigio = 1;

	EVP_MD_CTX_init(&ctx->md);

	bi->init = 0;
	bi->ptr = (char *)ctx;
	bi->flags = 0;
	return (1);
}

static int
ok_free(BIO *a)
{
	if (a == NULL)
		return (0);
	EVP_MD_CTX_cleanup(&((BIO_OK_CTX *)a->ptr)->md);
	OPENSSL_cleanse(a->ptr, sizeof(BIO_OK_CTX));
	free(a->ptr);
	a->ptr = NULL;
	a->init = 0;
	a->flags = 0;
	return (1);
}

static int
ok_read(BIO *b, char *out, int outl)
{
	int ret = 0, i, n;
	BIO_OK_CTX *ctx;

	if (out == NULL)
		return (0);
	ctx = (BIO_OK_CTX *)b->ptr;

	if ((ctx == NULL) || (b->next_bio == NULL) || (b->init == 0))
		return (0);

	while (outl > 0) {

		/* copy clean bytes to output buffer */
		if (ctx->blockout) {
			i = ctx->buf_len - ctx->buf_off;
			if (i > outl)
				i = outl;
			memcpy(out, &(ctx->buf[ctx->buf_off]), i);
			ret += i;
			out += i;
			outl -= i;
			ctx->buf_off += i;

			/* all clean bytes are out */
			if (ctx->buf_len == ctx->buf_off) {
				ctx->buf_off = 0;

				/* copy start of the next block into proper place */
				if (ctx->buf_len_save - ctx->buf_off_save > 0) {
					ctx->buf_len = ctx->buf_len_save - ctx->buf_off_save;
					memmove(ctx->buf, &(ctx->buf[ctx->buf_off_save]),
					    ctx->buf_len);
				} else {
					ctx->buf_len = 0;
				}
				ctx->blockout = 0;
			}
		}

		/* output buffer full -- cancel */
		if (outl == 0)
			break;

		/* no clean bytes in buffer -- fill it */
		n = IOBS - ctx->buf_len;
		i = BIO_read(b->next_bio, &(ctx->buf[ctx->buf_len]), n);

		if (i <= 0) break;	/* nothing new */

			ctx->buf_len += i;

		/* no signature yet -- check if we got one */
		if (ctx->sigio == 1) {
			if (!sig_in(b)) {
				BIO_clear_retry_flags(b);
				return 0;
			}
		}

		/* signature ok -- check if we got block */
		if (ctx->sigio == 0) {
			if (!block_in(b)) {
				BIO_clear_retry_flags(b);
				return 0;
			}
		}

		/* invalid block -- cancel */
		if (ctx->cont <= 0)
			break;

	}

	BIO_clear_retry_flags(b);
	BIO_copy_next_retry(b);
	return (ret);
}

static int
ok_write(BIO *b, const char *in, int inl)
{
	int ret = 0, n, i;
	BIO_OK_CTX *ctx;

	if (inl <= 0)
		return inl;

	ctx = (BIO_OK_CTX *)b->ptr;
	ret = inl;

	if ((ctx == NULL) || (b->next_bio == NULL) || (b->init == 0))
		return (0);

	if (ctx->sigio && !sig_out(b))
		return 0;

	do {
		BIO_clear_retry_flags(b);
		n = ctx->buf_len - ctx->buf_off;
		while (ctx->blockout && n > 0) {
			i = BIO_write(b->next_bio, &(ctx->buf[ctx->buf_off]), n);
			if (i <= 0) {
				BIO_copy_next_retry(b);
				if (!BIO_should_retry(b))
					ctx->cont = 0;
				return (i);
			}
			ctx->buf_off += i;
			n -= i;
		}

		/* at this point all pending data has been written */
		ctx->blockout = 0;
		if (ctx->buf_len == ctx->buf_off) {
			ctx->buf_len = OK_BLOCK_BLOCK;
			ctx->buf_off = 0;
		}

		if ((in == NULL) || (inl <= 0))
			return (0);

		n = (inl + ctx->buf_len > OK_BLOCK_SIZE + OK_BLOCK_BLOCK) ?
		    (int)(OK_BLOCK_SIZE + OK_BLOCK_BLOCK - ctx->buf_len) : inl;

		memcpy((unsigned char *)(&(ctx->buf[ctx->buf_len])),
		    (unsigned char *)in, n);
		ctx->buf_len += n;
		inl -= n;
		in += n;

		if (ctx->buf_len >= OK_BLOCK_SIZE + OK_BLOCK_BLOCK) {
			if (!block_out(b)) {
				BIO_clear_retry_flags(b);
				return 0;
			}
		}
	} while (inl > 0);

	BIO_clear_retry_flags(b);
	BIO_copy_next_retry(b);
	return (ret);
}

static long
ok_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	BIO_OK_CTX *ctx;
	EVP_MD *md;
	const EVP_MD **ppmd;
	long ret = 1;
	int i;

	ctx = b->ptr;

	switch (cmd) {
	case BIO_CTRL_RESET:
		ctx->buf_len = 0;
		ctx->buf_off = 0;
		ctx->buf_len_save = 0;
		ctx->buf_off_save = 0;
		ctx->cont = 1;
		ctx->finished = 0;
		ctx->blockout = 0;
		ctx->sigio = 1;
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_EOF:	/* More to read */
		if (ctx->cont <= 0)
			ret = 1;
		else
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_PENDING: /* More to read in buffer */
	case BIO_CTRL_WPENDING: /* More to read in buffer */
		ret = ctx->blockout ? ctx->buf_len - ctx->buf_off : 0;
		if (ret <= 0)
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_FLUSH:
		/* do a final write */
		if (ctx->blockout == 0)
			if (!block_out(b))
				return 0;

		while (ctx->blockout) {
			i = ok_write(b, NULL, 0);
			if (i < 0) {
				ret = i;
				break;
			}
		}

		ctx->finished = 1;
		ctx->buf_off = ctx->buf_len = 0;
		ctx->cont = (int)ret;

		/* Finally flush the underlying BIO */
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_C_DO_STATE_MACHINE:
		BIO_clear_retry_flags(b);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		BIO_copy_next_retry(b);
		break;
	case BIO_CTRL_INFO:
		ret = (long)ctx->cont;
		break;
	case BIO_C_SET_MD:
		md = ptr;
		if (!EVP_DigestInit_ex(&ctx->md, md, NULL))
			return 0;
		b->init = 1;
		break;
	case BIO_C_GET_MD:
		if (b->init) {
			ppmd = ptr;
			*ppmd = ctx->md.digest;
		} else
			ret = 0;
		break;
	default:
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	}
	return (ret);
}

static long
ok_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	long ret = 1;

	if (b->next_bio == NULL)
		return (0);
	switch (cmd) {
	default:
		ret = BIO_callback_ctrl(b->next_bio, cmd, fp);
		break;
	}
	return (ret);
}

static void
longswap(void *_ptr, size_t len)
{
	if (_BYTE_ORDER == _LITTLE_ENDIAN) {
		size_t i;
		unsigned char *p = _ptr, c;

		for (i = 0; i < len; i += 4) {
			c = p[0], p[0] = p[3], p[3] = c;
			c = p[1], p[1] = p[2], p[2] = c;
		}
	}
}

static int
sig_out(BIO* b)
{
	BIO_OK_CTX *ctx;
	EVP_MD_CTX *md;

	ctx = b->ptr;
	md = &ctx->md;

	if (ctx->buf_len + 2* md->digest->md_size > OK_BLOCK_SIZE)
		return 1;

	if (!EVP_DigestInit_ex(md, md->digest, NULL))
		goto berr;
	/* FIXME: there's absolutely no guarantee this makes any sense at all,
	 * particularly now EVP_MD_CTX has been restructured.
	 */
	RAND_pseudo_bytes(md->md_data, md->digest->md_size);
	memcpy(&(ctx->buf[ctx->buf_len]), md->md_data, md->digest->md_size);
	longswap(&(ctx->buf[ctx->buf_len]), md->digest->md_size);
	ctx->buf_len += md->digest->md_size;

	if (!EVP_DigestUpdate(md, WELLKNOWN, strlen(WELLKNOWN)))
		goto berr;
	if (!EVP_DigestFinal_ex(md, &(ctx->buf[ctx->buf_len]), NULL))
		goto berr;
	ctx->buf_len += md->digest->md_size;
	ctx->blockout = 1;
	ctx->sigio = 0;
	return 1;
berr:
	BIO_clear_retry_flags(b);
	return 0;
}

static int
sig_in(BIO* b)
{
	BIO_OK_CTX *ctx;
	EVP_MD_CTX *md;
	unsigned char tmp[EVP_MAX_MD_SIZE];
	int ret = 0;

	ctx = b->ptr;
	md = &ctx->md;

	if ((int)(ctx->buf_len - ctx->buf_off) < 2*md->digest->md_size)
		return 1;

	if (!EVP_DigestInit_ex(md, md->digest, NULL))
		goto berr;
	memcpy(md->md_data, &(ctx->buf[ctx->buf_off]), md->digest->md_size);
	longswap(md->md_data, md->digest->md_size);
	ctx->buf_off += md->digest->md_size;

	if (!EVP_DigestUpdate(md, WELLKNOWN, strlen(WELLKNOWN)))
		goto berr;
	if (!EVP_DigestFinal_ex(md, tmp, NULL))
		goto berr;
	ret = memcmp(&(ctx->buf[ctx->buf_off]), tmp, md->digest->md_size) == 0;
	ctx->buf_off += md->digest->md_size;
	if (ret == 1) {
		ctx->sigio = 0;
		if (ctx->buf_len != ctx->buf_off) {
			memmove(ctx->buf, &(ctx->buf[ctx->buf_off]),
			    ctx->buf_len - ctx->buf_off);
		}
		ctx->buf_len -= ctx->buf_off;
		ctx->buf_off = 0;
	} else {
		ctx->cont = 0;
	}
	return 1;
berr:
	BIO_clear_retry_flags(b);
	return 0;
}

static int
block_out(BIO* b)
{
	BIO_OK_CTX *ctx;
	EVP_MD_CTX *md;
	unsigned long tl;

	ctx = b->ptr;
	md = &ctx->md;

	tl = ctx->buf_len - OK_BLOCK_BLOCK;
	ctx->buf[0] = (unsigned char)(tl >> 24);
	ctx->buf[1] = (unsigned char)(tl >> 16);
	ctx->buf[2] = (unsigned char)(tl >> 8);
	ctx->buf[3] = (unsigned char)(tl);
	if (!EVP_DigestUpdate(md,
	    (unsigned char*) &(ctx->buf[OK_BLOCK_BLOCK]), tl))
		goto berr;
	if (!EVP_DigestFinal_ex(md, &(ctx->buf[ctx->buf_len]), NULL))
		goto berr;
	ctx->buf_len += md->digest->md_size;
	ctx->blockout = 1;
	return 1;
berr:
	BIO_clear_retry_flags(b);
	return 0;
}

static int
block_in(BIO* b)
{
	BIO_OK_CTX *ctx;
	EVP_MD_CTX *md;
	unsigned long tl = 0;
	unsigned char tmp[EVP_MAX_MD_SIZE];

	ctx = b->ptr;
	md = &ctx->md;

	assert(sizeof(tl) >= OK_BLOCK_BLOCK);	/* always true */
	tl = ctx->buf[0];
	tl <<= 8;
	tl |= ctx->buf[1];
	tl <<= 8;
	tl |= ctx->buf[2];
	tl <<= 8;
	tl |= ctx->buf[3];

	if (ctx->buf_len < tl + OK_BLOCK_BLOCK + md->digest->md_size)
		return 1;

	if (!EVP_DigestUpdate(md,
	    (unsigned char*) &(ctx->buf[OK_BLOCK_BLOCK]), tl))
		goto berr;
	if (!EVP_DigestFinal_ex(md, tmp, NULL))
		goto berr;
	if (memcmp(&(ctx->buf[tl + OK_BLOCK_BLOCK]), tmp,
	    md->digest->md_size) == 0) {
		/* there might be parts from next block lurking around ! */
		ctx->buf_off_save = tl + OK_BLOCK_BLOCK + md->digest->md_size;
		ctx->buf_len_save = ctx->buf_len;
		ctx->buf_off = OK_BLOCK_BLOCK;
		ctx->buf_len = tl + OK_BLOCK_BLOCK;
		ctx->blockout = 1;
	} else {
		ctx->cont = 0;
	}
	return 1;

berr:
	BIO_clear_retry_flags(b);
	return 0;
}
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.13
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/evp/bio_ok.c */
@


1.12
log
@KNF.
@
text
@d181 1
a181 1
	ctx = (BIO_OK_CTX *)malloc(sizeof(BIO_OK_CTX));
@


1.11
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d65 1
a65 1
	and processed it. Then I wanted to store the input file in 
d67 1
a67 1
	and everything was OK. BUT if user types wrong password 
d69 1
a69 1
	I can and I should fix my function, but BIO_f_cipher is 
d71 1
a71 1
	and it's hard to debug and fix them all. 
d74 1
a74 1
	file damages which cause garbage on BIO_f_cipher's output. 
d76 1
a76 1
	The easy way is to push the BIO_f_md and save the checksum at 
d80 2
a81 2
	1) you must somehow separate checksum from actual data. 
	2) you need lot's of memory when reading the file, because you 
d83 3
a85 3
	letting the application to read the data. 
	
	BIO_f_reliable tries to solve both problems, so that you can 
d90 3
a92 3
	with it's length and suffixed with it's digest. So you need only 
	several Kbytes of memory to buffer single block before verifying 
	it's digest. 
d96 1
a96 1
	1) the digest of the block is computed over the whole stream 
d99 1
a99 1
	2) to detect invalid passwords right at the start BIO_f_reliable 
d103 1
a103 1
		*) digest is initialized with random seed instead of 
d106 1
a106 1
		*) well-known text is then hashed and the output 
d112 1
a112 1
	Bad things: BIO_f_reliable knows what's going on in EVP_Digest. I 
d146 1
a146 2
typedef struct ok_struct
	{
d154 1
a154 1
	int blockout;		/* output block is ready */ 
d157 1
a157 1
	} BIO_OK_CTX;
d170 5
a174 4
BIO_METHOD *BIO_f_reliable(void)
	{
	return(&methods_ok);
	}
d176 3
a178 2
static int ok_new(BIO *bi)
	{
d181 12
a192 11
	ctx=(BIO_OK_CTX *)malloc(sizeof(BIO_OK_CTX));
	if (ctx == NULL) return(0);

	ctx->buf_len=0;
	ctx->buf_off=0;
	ctx->buf_len_save=0;
	ctx->buf_off_save=0;
	ctx->cont=1;
	ctx->finished=0;
	ctx->blockout= 0;
	ctx->sigio=1;
d196 5
a200 5
	bi->init=0;
	bi->ptr=(char *)ctx;
	bi->flags=0;
	return(1);
	}
d202 5
a206 3
static int ok_free(BIO *a)
	{
	if (a == NULL) return(0);
d208 1
a208 1
	OPENSSL_cleanse(a->ptr,sizeof(BIO_OK_CTX));
d210 10
a219 9
	a->ptr=NULL;
	a->init=0;
	a->flags=0;
	return(1);
	}
	
static int ok_read(BIO *b, char *out, int outl)
	{
	int ret=0,i,n;
d222 3
a224 2
	if (out == NULL) return(0);
	ctx=(BIO_OK_CTX *)b->ptr;
d226 2
a227 1
	if ((ctx == NULL) || (b->next_bio == NULL) || (b->init == 0)) return(0);
d229 1
a229 2
	while(outl > 0)
		{
d232 9
a240 9
		if (ctx->blockout)
			{
			i=ctx->buf_len-ctx->buf_off;
			if (i > outl) i=outl;
			memcpy(out,&(ctx->buf[ctx->buf_off]),i);
			ret+=i;
			out+=i;
			outl-=i;
			ctx->buf_off+=i;
d243 2
a244 3
			if (ctx->buf_len == ctx->buf_off)
				{
				ctx->buf_off=0;
d247 2
a248 3
				if(ctx->buf_len_save- ctx->buf_off_save > 0)
					{
					ctx->buf_len= ctx->buf_len_save- ctx->buf_off_save;
d250 3
a252 7
							ctx->buf_len);
					}
				else
					{
					ctx->buf_len=0;
					}
				ctx->blockout= 0;
d254 1
d256 2
a257 1
	
d259 2
a260 1
		if (outl == 0) break;
d263 2
a264 2
		n=IOBS- ctx->buf_len;
		i=BIO_read(b->next_bio,&(ctx->buf[ctx->buf_len]),n);
d268 1
a268 1
		ctx->buf_len+= i;
d271 2
a272 4
		if (ctx->sigio == 1)
			{
			if (!sig_in(b))
				{
a274 1
				}
d276 1
d279 2
a280 4
		if (ctx->sigio == 0)
			{
			if (!block_in(b))
				{
a282 1
				}
d284 1
d287 2
a288 1
		if (ctx->cont <= 0) break;
d290 1
a290 1
		}
d294 2
a295 2
	return(ret);
	}
d297 4
a300 3
static int ok_write(BIO *b, const char *in, int inl)
	{
	int ret=0,n,i;
d303 2
a304 1
	if (inl <= 0) return inl;
d306 2
a307 2
	ctx=(BIO_OK_CTX *)b->ptr;
	ret=inl;
d309 2
a310 1
	if ((ctx == NULL) || (b->next_bio == NULL) || (b->init == 0)) return(0);
d312 1
a312 1
	if(ctx->sigio && !sig_out(b))
d315 1
a315 1
	do{
d317 4
a320 6
		n=ctx->buf_len-ctx->buf_off;
		while (ctx->blockout && n > 0)
			{
			i=BIO_write(b->next_bio,&(ctx->buf[ctx->buf_off]),n);
			if (i <= 0)
				{
d322 3
a324 6
				if(!BIO_should_retry(b))
					ctx->cont= 0;
				return(i);
				}
			ctx->buf_off+=i;
			n-=i;
d326 3
d331 8
a338 8
		ctx->blockout= 0;
		if (ctx->buf_len == ctx->buf_off)
			{
			ctx->buf_len=OK_BLOCK_BLOCK;
			ctx->buf_off=0;
			}
	
		if ((in == NULL) || (inl <= 0)) return(0);
d340 2
a341 2
		n= (inl+ ctx->buf_len > OK_BLOCK_SIZE+ OK_BLOCK_BLOCK) ? 
			(int)(OK_BLOCK_SIZE+OK_BLOCK_BLOCK-ctx->buf_len) : inl;
d343 5
a347 4
		memcpy((unsigned char *)(&(ctx->buf[ctx->buf_len])),(unsigned char *)in,n);
		ctx->buf_len+= n;
		inl-=n;
		in+=n;
d349 2
a350 4
		if(ctx->buf_len >= OK_BLOCK_SIZE+ OK_BLOCK_BLOCK)
			{
			if (!block_out(b))
				{
a352 1
				}
d354 2
a355 1
	}while(inl > 0);
d359 2
a360 2
	return(ret);
	}
d362 3
a364 2
static long ok_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
d368 1
a368 1
	long ret=1;
d371 1
a371 1
	ctx=b->ptr;
d373 1
a373 2
	switch (cmd)
		{
d375 9
a383 9
		ctx->buf_len=0;
		ctx->buf_off=0;
		ctx->buf_len_save=0;
		ctx->buf_off_save=0;
		ctx->cont=1;
		ctx->finished=0;
		ctx->blockout= 0;
		ctx->sigio=1;
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d387 1
a387 1
			ret=1;
d389 1
a389 1
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d393 1
a393 1
		ret=ctx->blockout ? ctx->buf_len-ctx->buf_off : 0;
d395 1
a395 1
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d399 1
a399 1
		if(ctx->blockout == 0)
d403 4
a406 6
		while (ctx->blockout)
			{
			i=ok_write(b,NULL,0);
			if (i < 0)
				{
				ret=i;
a407 1
				}
d409 5
a414 4
		ctx->finished=1;
		ctx->buf_off=ctx->buf_len=0;
		ctx->cont=(int)ret;
		
d416 1
a416 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d420 1
a420 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d424 1
a424 1
		ret=(long)ctx->cont;
d427 1
a427 1
		md=ptr;
d430 1
a430 1
		b->init=1;
d433 5
a437 7
		if (b->init)
			{
			ppmd=ptr;
			*ppmd=ctx->md.digest;
			}
		else
			ret=0;
d440 1
a440 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
a441 2
		}
	return(ret);
d443 2
d446 8
a453 7
static long ok_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
d455 1
a455 1
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
a456 2
		}
	return(ret);
d458 2
d461 2
a462 1
static void longswap(void *_ptr, size_t len)
d466 1
a466 1
		unsigned char *p=_ptr,c;
d468 3
a470 3
		for(i= 0;i < len;i+= 4) {
			c=p[0],p[0]=p[3],p[3]=c;
			c=p[1],p[1]=p[2],p[2]=c;
d475 3
a477 2
static int sig_out(BIO* b)
	{
d481 2
a482 2
	ctx=b->ptr;
	md=&ctx->md;
d484 2
a485 1
	if(ctx->buf_len+ 2* md->digest->md_size > OK_BLOCK_SIZE) return 1;
d495 1
a495 1
	ctx->buf_len+= md->digest->md_size;
d501 3
a503 3
	ctx->buf_len+= md->digest->md_size;
	ctx->blockout= 1;
	ctx->sigio= 0;
d505 1
a505 1
	berr:
d508 1
a508 1
	}
d510 3
a512 2
static int sig_in(BIO* b)
	{
d516 1
a516 1
	int ret= 0;
d518 2
a519 2
	ctx=b->ptr;
	md=&ctx->md;
d521 2
a522 1
	if((int)(ctx->buf_len-ctx->buf_off) < 2*md->digest->md_size) return 1;
d528 1
a528 1
	ctx->buf_off+= md->digest->md_size;
d534 7
a540 15
	ret= memcmp(&(ctx->buf[ctx->buf_off]), tmp, md->digest->md_size) == 0;
	ctx->buf_off+= md->digest->md_size;
	if(ret == 1)
		{
		ctx->sigio= 0;
		if(ctx->buf_len != ctx->buf_off)
			{
			memmove(ctx->buf, &(ctx->buf[ctx->buf_off]), ctx->buf_len- ctx->buf_off);
			}
		ctx->buf_len-= ctx->buf_off;
		ctx->buf_off= 0;
		}
	else
		{
		ctx->cont= 0;
d542 5
d548 1
a548 1
	berr:
d551 1
a551 1
	}
d553 3
a555 2
static int block_out(BIO* b)
	{
d560 2
a561 2
	ctx=b->ptr;
	md=&ctx->md;
d563 5
a567 5
	tl= ctx->buf_len- OK_BLOCK_BLOCK;
	ctx->buf[0]=(unsigned char)(tl>>24);
	ctx->buf[1]=(unsigned char)(tl>>16);
	ctx->buf[2]=(unsigned char)(tl>>8);
	ctx->buf[3]=(unsigned char)(tl);
d569 1
a569 1
		(unsigned char*) &(ctx->buf[OK_BLOCK_BLOCK]), tl))
d573 2
a574 2
	ctx->buf_len+= md->digest->md_size;
	ctx->blockout= 1;
d576 1
a576 1
	berr:
d579 1
a579 1
	}
d581 3
a583 2
static int block_in(BIO* b)
	{
d586 1
a586 1
	unsigned long tl= 0;
d589 2
a590 2
	ctx=b->ptr;
	md=&ctx->md;
d592 11
a602 5
	assert(sizeof(tl)>=OK_BLOCK_BLOCK);	/* always true */
	tl =ctx->buf[0]; tl<<=8;
	tl|=ctx->buf[1]; tl<<=8;
	tl|=ctx->buf[2]; tl<<=8;
	tl|=ctx->buf[3];
a603 2
	if (ctx->buf_len < tl+ OK_BLOCK_BLOCK+ md->digest->md_size) return 1;
 
d605 1
a605 1
			(unsigned char*) &(ctx->buf[OK_BLOCK_BLOCK]), tl))
d609 2
a610 2
	if(memcmp(&(ctx->buf[tl+ OK_BLOCK_BLOCK]), tmp, md->digest->md_size) == 0)
		{
d612 8
a619 10
		ctx->buf_off_save= tl+ OK_BLOCK_BLOCK+ md->digest->md_size;
		ctx->buf_len_save= ctx->buf_len;
		ctx->buf_off= OK_BLOCK_BLOCK;
		ctx->buf_len= tl+ OK_BLOCK_BLOCK;
		ctx->blockout= 1;
		}
	else
		{
		ctx->cont= 0;
		}
d621 2
a622 1
	berr:
d625 1
a625 2
	}

@


1.10
log
@Figure out endianness at compile-time, using _BYTE_ORDER from
<machine/endian.h>, rather than writing 1 to a 32-bit variable and checking
whether the first byte is nonzero.

tweaks and ok matthew@@; ok beck@@ tedu@@
@
text
@d160 10
a169 12
static BIO_METHOD methods_ok=
	{
	BIO_TYPE_CIPHER,"reliable",
	ok_write,
	ok_read,
	NULL, /* ok_puts, */
	NULL, /* ok_gets, */
	ok_ctrl,
	ok_new,
	ok_free,
	ok_callback_ctrl,
	};
@


1.9
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d123 1
d467 2
a468 3
{	const union { long one; char little; } is_endian = {1};

	if (is_endian.little) {
@


1.8
log
@resolve conflicts
@
text
@d181 1
a181 1
	ctx=(BIO_OK_CTX *)OPENSSL_malloc(sizeof(BIO_OK_CTX));
d206 1
a206 1
	OPENSSL_free(a->ptr);
@


1.7
log
@resolve conflicts
@
text
@d136 4
a139 4
static void sig_out(BIO* b);
static void sig_in(BIO* b);
static void block_out(BIO* b);
static void block_in(BIO* b);
d269 8
a276 1
		if (ctx->sigio == 1) sig_in(b);
d279 8
a286 1
		if (ctx->sigio == 0) block_in(b);
d310 2
a311 1
	if(ctx->sigio) sig_out(b);
d350 5
a354 1
			block_out(b);
d401 2
a402 1
			block_out(b);
d431 2
a432 1
		EVP_DigestInit_ex(&ctx->md, md, NULL);
d479 1
a479 1
static void sig_out(BIO* b)
d487 1
a487 1
	if(ctx->buf_len+ 2* md->digest->md_size > OK_BLOCK_SIZE) return;
d489 2
a490 1
	EVP_DigestInit_ex(md, md->digest, NULL);
d499 4
a502 2
	EVP_DigestUpdate(md, WELLKNOWN, strlen(WELLKNOWN));
	EVP_DigestFinal_ex(md, &(ctx->buf[ctx->buf_len]), NULL);
d506 4
d512 1
a512 1
static void sig_in(BIO* b)
d522 1
a522 1
	if((int)(ctx->buf_len-ctx->buf_off) < 2*md->digest->md_size) return;
d524 2
a525 1
	EVP_DigestInit_ex(md, md->digest, NULL);
d530 4
a533 2
	EVP_DigestUpdate(md, WELLKNOWN, strlen(WELLKNOWN));
	EVP_DigestFinal_ex(md, tmp, NULL);
d550 4
d556 1
a556 1
static void block_out(BIO* b)
d570 5
a574 2
	EVP_DigestUpdate(md, (unsigned char*) &(ctx->buf[OK_BLOCK_BLOCK]), tl);
	EVP_DigestFinal_ex(md, &(ctx->buf[ctx->buf_len]), NULL);
d577 4
d583 1
a583 1
static void block_in(BIO* b)
d599 1
a599 1
	if (ctx->buf_len < tl+ OK_BLOCK_BLOCK+ md->digest->md_size) return;
d601 5
a605 2
	EVP_DigestUpdate(md, (unsigned char*) &(ctx->buf[OK_BLOCK_BLOCK]), tl);
	EVP_DigestFinal_ex(md, tmp, NULL);
d619 4
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d122 1
a144 10
#ifndef L_ENDIAN
#define swapem(x) \
	((unsigned long int)((((unsigned long int)(x) & 0x000000ffU) << 24) | \
			     (((unsigned long int)(x) & 0x0000ff00U) <<  8) | \
			     (((unsigned long int)(x) & 0x00ff0000U) >>  8) | \
			     (((unsigned long int)(x) & 0xff000000U) >> 24)))
#else
#define swapem(x) (x)
#endif

d147 4
a150 4
	int buf_len;
	int buf_off;
	int buf_len_save;
	int buf_off_save;
d289 2
d326 1
a326 1
				OK_BLOCK_SIZE+ OK_BLOCK_BLOCK- ctx->buf_len : inl;
d444 2
a445 5
static void longswap(void *_ptr, int len)
{
#ifndef L_ENDIAN
	int i;
	char *ptr=_ptr;
d447 8
a454 2
	for(i= 0;i < len;i+= 4){
		*((unsigned long *)&(ptr[i]))= swapem(*((unsigned long *)&(ptr[i])));
a455 1
#endif
d494 1
a494 1
	if(ctx->buf_len- ctx->buf_off < 2* md->digest->md_size) return;
d531 4
a534 3
	tl= swapem(tl);
	memcpy(ctx->buf, &tl, OK_BLOCK_BLOCK);
	tl= swapem(tl);
d545 1
a545 1
	long tl= 0;
d551 6
a556 2
	memcpy(&tl, ctx->buf, OK_BLOCK_BLOCK);
	tl= swapem(tl);
@


1.5
log
@spelling
@
text
@d214 1
a214 1
	memset(a->ptr,0,sizeof(BIO_OK_CTX));
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d105 1
a105 1
		*) same seed is written to ouput
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d165 1
a165 1
	char buf[IOBS];
d202 2
d213 1
d359 1
a359 1
	ctx=(BIO_OK_CTX *)b->ptr;
d417 2
a418 2
		md=(EVP_MD *)ptr;
		EVP_DigestInit(&(ctx->md),md);
d424 1
a424 1
			ppmd=(const EVP_MD **)ptr;
d468 2
a469 2
	ctx=(BIO_OK_CTX *)b->ptr;
	md= &(ctx->md);
d473 6
a478 3
	EVP_DigestInit(md, md->digest);
	RAND_pseudo_bytes(&(md->md.base[0]), md->digest->md_size);
	memcpy(&(ctx->buf[ctx->buf_len]), &(md->md.base[0]), md->digest->md_size);
d483 1
a483 1
	md->digest->final(&(ctx->buf[ctx->buf_len]), &(md->md.base[0]));
d496 2
a497 2
	ctx=(BIO_OK_CTX *)b->ptr;
	md= &(ctx->md);
d501 3
a503 3
	EVP_DigestInit(md, md->digest);
	memcpy(&(md->md.base[0]), &(ctx->buf[ctx->buf_off]), md->digest->md_size);
	longswap(&(md->md.base[0]), md->digest->md_size);
d507 1
a507 1
	md->digest->final(tmp, &(md->md.base[0]));
d532 2
a533 2
	ctx=(BIO_OK_CTX *)b->ptr;
	md= &(ctx->md);
d540 1
a540 1
	md->digest->final(&(ctx->buf[ctx->buf_len]), &(md->md.base[0]));
d552 2
a553 2
	ctx=(BIO_OK_CTX *)b->ptr;
	md= &(ctx->md);
d560 1
a560 1
	md->digest->final(tmp, &(md->md.base[0]));
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d128 3
a130 3
static int ok_write(BIO *h,char *buf,int num);
static int ok_read(BIO *h,char *buf,int size);
static long ok_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d133 1
a133 1
static long ok_callback_ctrl(BIO *h,int cmd,void (*fp)());
d190 1
a190 1
	ctx=(BIO_OK_CTX *)Malloc(sizeof(BIO_OK_CTX));
d212 1
a212 1
	Free(a->ptr);
d290 1
a290 1
static int ok_write(BIO *b, char *in, int inl)
d348 1
a348 1
static long ok_ctrl(BIO *b, int cmd, long num, char *ptr)
d434 1
a434 1
static long ok_callback_ctrl(BIO *b, int cmd, void (*fp)())
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d70 1
a70 1
	easy way to add encryption support to many exisiting applications
d83 1
a83 1
	leting the application to read the data. 
d86 1
a86 1
	read and write arbitraly long streams using only fixed amount
d94 1
a94 1
	BIO_f_reliable goes futher and adds several important capabilities:
d113 1
a113 1
	initialy wrote and tested this code on x86 machine and wrote the
d133 2
d178 1
d434 14
d471 1
a471 1
	RAND_bytes(&(md->md.base[0]), md->digest->md_size);
d476 1
a476 1
	EVP_DigestUpdate(md, (unsigned char*)WELLKNOWN, strlen(WELLKNOWN));
d500 1
a500 1
	EVP_DigestUpdate(md, (unsigned char*)WELLKNOWN, strlen(WELLKNOWN));
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d70 1
a70 1
	easy way to add encryption support to many existing applications
d83 1
a83 1
	letting the application to read the data. 
d86 1
a86 1
	read and write arbitrary long streams using only fixed amount
d94 1
a94 1
	BIO_f_reliable goes further and adds several important capabilities:
d113 1
a113 1
	initially wrote and tested this code on x86 machine and wrote the
d128 3
a130 3
static int ok_write(BIO *h, const char *buf, int num);
static int ok_read(BIO *h, char *buf, int size);
static long ok_ctrl(BIO *h, int cmd, long arg1, void *arg2);
a132 2
static long ok_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);

d163 1
a163 1
	unsigned char buf[IOBS];
a175 1
	ok_callback_ctrl,
d187 1
a187 1
	ctx=(BIO_OK_CTX *)OPENSSL_malloc(sizeof(BIO_OK_CTX));
a198 2
	EVP_MD_CTX_init(&ctx->md);

a207 1
	EVP_MD_CTX_cleanup(&((BIO_OK_CTX *)a->ptr)->md);
d209 1
a209 1
	OPENSSL_free(a->ptr);
d287 1
a287 1
static int ok_write(BIO *b, const char *in, int inl)
d345 1
a345 1
static long ok_ctrl(BIO *b, int cmd, long num, void *ptr)
d353 1
a353 1
	ctx=b->ptr;
d411 2
a412 2
		md=ptr;
		EVP_DigestInit_ex(&ctx->md, md, NULL);
d418 1
a418 1
			ppmd=ptr;
a430 14
static long ok_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
	default:
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
		break;
		}
	return(ret);
	}

d448 2
a449 2
	ctx=b->ptr;
	md=&ctx->md;
d453 3
a455 6
	EVP_DigestInit_ex(md, md->digest, NULL);
	/* FIXME: there's absolutely no guarantee this makes any sense at all,
	 * particularly now EVP_MD_CTX has been restructured.
	 */
	RAND_pseudo_bytes(md->md_data, md->digest->md_size);
	memcpy(&(ctx->buf[ctx->buf_len]), md->md_data, md->digest->md_size);
d459 2
a460 2
	EVP_DigestUpdate(md, WELLKNOWN, strlen(WELLKNOWN));
	EVP_DigestFinal_ex(md, &(ctx->buf[ctx->buf_len]), NULL);
d473 2
a474 2
	ctx=b->ptr;
	md=&ctx->md;
d478 3
a480 3
	EVP_DigestInit_ex(md, md->digest, NULL);
	memcpy(md->md_data, &(ctx->buf[ctx->buf_off]), md->digest->md_size);
	longswap(md->md_data, md->digest->md_size);
d483 2
a484 2
	EVP_DigestUpdate(md, WELLKNOWN, strlen(WELLKNOWN));
	EVP_DigestFinal_ex(md, tmp, NULL);
d509 2
a510 2
	ctx=b->ptr;
	md=&ctx->md;
d517 1
a517 1
	EVP_DigestFinal_ex(md, &(ctx->buf[ctx->buf_len]), NULL);
d529 2
a530 2
	ctx=b->ptr;
	md=&ctx->md;
d537 1
a537 1
	EVP_DigestFinal_ex(md, tmp, NULL);
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d214 1
a214 1
	OPENSSL_cleanse(a->ptr,sizeof(BIO_OK_CTX));
@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@d105 1
a105 1
		*) same seed is written to output
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a121 1
#include <assert.h>
d144 10
d156 4
a159 4
	size_t buf_len;
	size_t buf_off;
	size_t buf_len_save;
	size_t buf_off_save;
a297 2
	if (inl <= 0) return inl;

d333 1
a333 1
			(int)(OK_BLOCK_SIZE+OK_BLOCK_BLOCK-ctx->buf_len) : inl;
d451 5
a455 2
static void longswap(void *_ptr, size_t len)
{	const union { long one; char little; } is_endian = {1};
d457 2
a458 8
	if (is_endian.little) {
		size_t i;
		unsigned char *p=_ptr,c;

		for(i= 0;i < len;i+= 4) {
			c=p[0],p[0]=p[3],p[3]=c;
			c=p[1],p[1]=p[2],p[2]=c;
		}
d460 1
d499 1
a499 1
	if((int)(ctx->buf_len-ctx->buf_off) < 2*md->digest->md_size) return;
d536 3
a538 4
	ctx->buf[0]=(unsigned char)(tl>>24);
	ctx->buf[1]=(unsigned char)(tl>>16);
	ctx->buf[2]=(unsigned char)(tl>>8);
	ctx->buf[3]=(unsigned char)(tl);
d549 1
a549 1
	unsigned long tl= 0;
d555 2
a556 6
	assert(sizeof(tl)>=OK_BLOCK_BLOCK);	/* always true */
	tl =ctx->buf[0]; tl<<=8;
	tl|=ctx->buf[1]; tl<<=8;
	tl|=ctx->buf[2]; tl<<=8;
	tl|=ctx->buf[3];

@


1.1.1.5
log
@import OpenSSL-1.0.1c
@
text
@d136 4
a139 4
static int sig_out(BIO* b);
static int sig_in(BIO* b);
static int block_out(BIO* b);
static int block_in(BIO* b);
d269 1
a269 8
		if (ctx->sigio == 1)
			{
			if (!sig_in(b))
				{
				BIO_clear_retry_flags(b);
				return 0;
				}
			}
d272 1
a272 8
		if (ctx->sigio == 0)
			{
			if (!block_in(b))
				{
				BIO_clear_retry_flags(b);
				return 0;
				}
			}
d296 1
a296 2
	if(ctx->sigio && !sig_out(b))
		return 0;
d335 1
a335 5
			if (!block_out(b))
				{
				BIO_clear_retry_flags(b);
				return 0;
				}
d382 1
a382 2
			if (!block_out(b))
				return 0;
d411 1
a411 2
		if (!EVP_DigestInit_ex(&ctx->md, md, NULL))
			return 0;
d458 1
a458 1
static int sig_out(BIO* b)
d466 1
a466 1
	if(ctx->buf_len+ 2* md->digest->md_size > OK_BLOCK_SIZE) return 1;
d468 1
a468 2
	if (!EVP_DigestInit_ex(md, md->digest, NULL))
		goto berr;
d477 2
a478 4
	if (!EVP_DigestUpdate(md, WELLKNOWN, strlen(WELLKNOWN)))
		goto berr;
	if (!EVP_DigestFinal_ex(md, &(ctx->buf[ctx->buf_len]), NULL))
		goto berr;
a481 4
	return 1;
	berr:
	BIO_clear_retry_flags(b);
	return 0;
d484 1
a484 1
static int sig_in(BIO* b)
d494 1
a494 1
	if((int)(ctx->buf_len-ctx->buf_off) < 2*md->digest->md_size) return 1;
d496 1
a496 2
	if (!EVP_DigestInit_ex(md, md->digest, NULL))
		goto berr;
d501 2
a502 4
	if (!EVP_DigestUpdate(md, WELLKNOWN, strlen(WELLKNOWN)))
		goto berr;
	if (!EVP_DigestFinal_ex(md, tmp, NULL))
		goto berr;
a518 4
	return 1;
	berr:
	BIO_clear_retry_flags(b);
	return 0;
d521 1
a521 1
static int block_out(BIO* b)
d535 2
a536 5
	if (!EVP_DigestUpdate(md,
		(unsigned char*) &(ctx->buf[OK_BLOCK_BLOCK]), tl))
		goto berr;
	if (!EVP_DigestFinal_ex(md, &(ctx->buf[ctx->buf_len]), NULL))
		goto berr;
a538 4
	return 1;
	berr:
	BIO_clear_retry_flags(b);
	return 0;
d541 1
a541 1
static int block_in(BIO* b)
d557 1
a557 1
	if (ctx->buf_len < tl+ OK_BLOCK_BLOCK+ md->digest->md_size) return 1;
d559 2
a560 5
	if (!EVP_DigestUpdate(md,
			(unsigned char*) &(ctx->buf[OK_BLOCK_BLOCK]), tl))
		goto berr;
	if (!EVP_DigestFinal_ex(md, tmp, NULL))
		goto berr;
a573 4
	return 1;
	berr:
	BIO_clear_retry_flags(b);
	return 0;
@


