head	1.8;
access;
symbols
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	butholakala:1.3
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.3.0.24
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.20
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.18
	OPENBSD_5_3_BASE:1.3
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.3.0.14
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.3.0.12
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.10
	OPENBSD_4_9_BASE:1.3
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.26
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.24
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.22
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.20
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.18
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.1.0.6
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.02.10.11.37.58;	author jsing;	state dead;
branches;
next	1.7;
commitid	rCmxXH1sH9WpoCzh;

1.7
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.6;
commitid	yQEL1wOWIearrW15;

1.6
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.5;
commitid	nzndm3zqPmFurSaK;

1.5
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.08.15.13.06;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.44;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.27;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove RC5 code - this is not currently enabled and is not likely to ever
be enabled.

Removes one symbol from libcrypto, however there is no ABI change.

ok beck@@ miod@@ tedu@@
@
text
@/* $OpenBSD: e_rc5.c,v 1.7 2014/07/11 08:44:48 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_RC5

#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/rc5.h>

#include "evp_locl.h"

static int r_32_12_16_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc);
static int rc5_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);

typedef struct {
	int rounds;	/* number of rounds */
	RC5_32_KEY ks;	/* key schedule */
} EVP_RC5_KEY;

#define data(ctx)	EVP_C_DATA(EVP_RC5_KEY,ctx)

IMPLEMENT_BLOCK_CIPHER(rc5_32_12_16, ks, RC5_32, EVP_RC5_KEY, NID_rc5,
    8, RC5_32_KEY_LENGTH, 8, 64,
    EVP_CIPH_VARIABLE_LENGTH | EVP_CIPH_CTRL_INIT,
    r_32_12_16_init_key, NULL,
    NULL, NULL, rc5_ctrl)

static int
rc5_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
{
	switch (type) {
	case EVP_CTRL_INIT:
		data(c)->rounds = RC5_12_ROUNDS;
		return 1;

	case EVP_CTRL_GET_RC5_ROUNDS:
		*(int *)ptr = data(c)->rounds;
		return 1;

	case EVP_CTRL_SET_RC5_ROUNDS:
		switch (arg) {
		case RC5_8_ROUNDS:
		case RC5_12_ROUNDS:
		case RC5_16_ROUNDS:
			data(c)->rounds = arg;
			return 1;

		default:
			EVPerr(EVP_F_RC5_CTRL,
			    EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS);
			return 0;
		}

	default:
		return -1;
	}
}

static int
r_32_12_16_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc)
{
	RC5_32_set_key(&data(ctx)->ks, EVP_CIPHER_CTX_key_length(ctx), key,
	    data(ctx)->rounds);
	return 1;
}

#endif
@


1.7
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc5.c,v 1.6 2014/07/10 22:45:57 jsing Exp $ */
@


1.6
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc5.c,v 1.5 2014/06/12 15:49:29 deraadt Exp $ */
a62 2
#include "cryptlib.h"

d67 2
a69 1
#include <openssl/rc5.h>
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.4
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/evp/e_rc5.c */
@


1.3
log
@resolve conflicts
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d70 1
a70 1
			       const unsigned char *iv,int enc);
d73 1
a73 2
typedef struct
	{
d76 1
a76 1
	} EVP_RC5_KEY;
d81 9
a89 9
		       8, RC5_32_KEY_LENGTH, 8, 64,
		       EVP_CIPH_VARIABLE_LENGTH | EVP_CIPH_CTRL_INIT,
		       r_32_12_16_init_key, NULL,
		       NULL, NULL, rc5_ctrl)

static int rc5_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
	{
	switch(type)
		{
d97 1
a97 1
			
d99 1
a99 2
		switch(arg)
			{
d107 2
a108 1
			EVPerr(EVP_F_RC5_CTRL, EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS);
d110 1
a110 1
			}
a113 1
		}
d115 1
d117 6
a122 5
static int r_32_12_16_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
			       const unsigned char *iv, int enc)
	{
	RC5_32_set_key(&data(ctx)->ks,EVP_CIPHER_CTX_key_length(ctx),
		       key,data(ctx)->rounds);
d124 1
a124 1
	}
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d59 3
a63 2
#include <stdio.h>
#include "cryptlib.h"
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_RC5
d66 1
d72 13
a84 7
IMPLEMENT_BLOCK_CIPHER(rc5_32_12_16, rc5.ks, RC5_32, rc5, NID_rc5,
			8, EVP_RC5_32_12_16_KEY_SIZE, 8, 
			EVP_CIPH_VARIABLE_LENGTH | EVP_CIPH_CTRL_INIT,
			r_32_12_16_init_key, NULL,
			NULL, NULL, rc5_ctrl)


d88 17
a104 4
		switch(type) {

			case EVP_CTRL_INIT:
			c->c.rc5.rounds = RC5_12_ROUNDS;
d107 3
a109 16
			case EVP_CTRL_GET_RC5_ROUNDS:
			*(int *)ptr = c->c.rc5.rounds;
			return 1;
			
			
			case EVP_CTRL_SET_RC5_ROUNDS:
			switch(arg) {
				case RC5_8_ROUNDS:
				case RC5_12_ROUNDS:
				case RC5_16_ROUNDS:
				c->c.rc5.rounds = arg;
				return 1;

				default:
				EVPerr(EVP_F_RC5_CTRL, EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS);
				return 0;
d112 2
a113 2
			default:
			return -1;
d120 2
a121 2
	RC5_32_set_key(&(ctx->c.rc5.ks),EVP_CIPHER_CTX_key_length(ctx),
			key,ctx->c.rc5.rounds);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
#ifndef OPENSSL_NO_RC5
a65 1
#include <openssl/rc5.h>
d71 7
a77 13
typedef struct
	{
	int rounds;	/* number of rounds */
	RC5_32_KEY ks;	/* key schedule */
	} EVP_RC5_KEY;

#define data(ctx)	EVP_C_DATA(EVP_RC5_KEY,ctx)

IMPLEMENT_BLOCK_CIPHER(rc5_32_12_16, ks, RC5_32, EVP_RC5_KEY, NID_rc5,
		       8, RC5_32_KEY_LENGTH, 8, 64,
		       EVP_CIPH_VARIABLE_LENGTH | EVP_CIPH_CTRL_INIT,
		       r_32_12_16_init_key, NULL,
		       NULL, NULL, rc5_ctrl)
d81 4
a84 17
	switch(type)
		{
	case EVP_CTRL_INIT:
		data(c)->rounds = RC5_12_ROUNDS;
		return 1;

	case EVP_CTRL_GET_RC5_ROUNDS:
		*(int *)ptr = data(c)->rounds;
		return 1;
			
	case EVP_CTRL_SET_RC5_ROUNDS:
		switch(arg)
			{
		case RC5_8_ROUNDS:
		case RC5_12_ROUNDS:
		case RC5_16_ROUNDS:
			data(c)->rounds = arg;
d87 16
a102 3
		default:
			EVPerr(EVP_F_RC5_CTRL, EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS);
			return 0;
d105 2
a106 2
	default:
		return -1;
d113 2
a114 2
	RC5_32_set_key(&data(ctx)->ks,EVP_CIPHER_CTX_key_length(ctx),
		       key,data(ctx)->rounds);
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d59 2
a62 3

#ifndef OPENSSL_NO_RC5

@


