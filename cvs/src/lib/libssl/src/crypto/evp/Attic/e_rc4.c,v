head	1.15;
access;
symbols
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.6
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.8
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.8
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.09.03.11.33.37;	author beck;	state dead;
branches;
next	1.14;
commitid	HnbXxsegngek41U2;

1.14
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.13;
commitid	yQEL1wOWIearrW15;

1.13
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.12;
commitid	nzndm3zqPmFurSaK;

1.12
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	mJUVYpkFBZ0Zv2bG;

1.11
date	2014.05.08.15.13.06;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.21;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.43;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.13;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.27;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.20;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.10;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: e_rc4.c,v 1.14 2014/07/11 08:44:48 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_RC4

#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/rc4.h>

#include "evp_locl.h"

/* FIXME: surely this is available elsewhere? */
#define EVP_RC4_KEY_SIZE		16

typedef struct {
    RC4_KEY ks;	/* working key */
} EVP_RC4_KEY;

#define data(ctx) ((EVP_RC4_KEY *)(ctx)->cipher_data)

static int rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc);
static int rc4_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t inl);

static const EVP_CIPHER r4_cipher = {
	NID_rc4,
	1, EVP_RC4_KEY_SIZE, 0,
	EVP_CIPH_VARIABLE_LENGTH,
	rc4_init_key,
	rc4_cipher,
	NULL,
	sizeof(EVP_RC4_KEY),
	NULL,
	NULL,
	NULL,
	NULL
};

static const EVP_CIPHER r4_40_cipher = {
	NID_rc4_40,
	1, 5 /* 40 bit */, 0,
	EVP_CIPH_VARIABLE_LENGTH,
	rc4_init_key,
	rc4_cipher,
	NULL,
	sizeof(EVP_RC4_KEY),
	NULL,
	NULL,
	NULL,
	NULL
};

const EVP_CIPHER *
EVP_rc4(void)
{
	return (&r4_cipher);
}

const EVP_CIPHER *
EVP_rc4_40(void)
{
	return (&r4_40_cipher);
}

static int
rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc)
{
	RC4_set_key(&data(ctx)->ks, EVP_CIPHER_CTX_key_length(ctx), key);
	return 1;
}

static int
rc4_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t inl)
{
	RC4(&data(ctx)->ks, inl, in, out);
	return 1;
}
#endif
@


1.14
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc4.c,v 1.13 2014/07/10 22:45:57 jsing Exp $ */
@


1.13
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc4.c,v 1.12 2014/06/12 15:49:29 deraadt Exp $ */
a62 2
#include "cryptlib.h"

a65 1
#include "evp_locl.h"
d68 2
@


1.12
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.11
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/evp/e_rc4.c */
@


1.10
log
@resolve conflicts
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d72 1
a72 2
typedef struct
    {
d74 1
a74 1
    } EVP_RC4_KEY;
d79 1
a79 1
			const unsigned char *iv,int enc);
d81 3
a83 3
		      const unsigned char *in, size_t inl);
static const EVP_CIPHER r4_cipher=
	{
d85 1
a85 1
	1,EVP_RC4_KEY_SIZE,0,
d95 1
a95 1
	};
d97 1
a97 2
static const EVP_CIPHER r4_40_cipher=
	{
d99 1
a99 1
	1,5 /* 40 bit */,0,
d105 1
a105 1
	NULL, 
d109 1
a109 11
	};

const EVP_CIPHER *EVP_rc4(void)
	{
	return(&r4_cipher);
	}

const EVP_CIPHER *EVP_rc4_40(void)
	{
	return(&r4_40_cipher);
	}
d111 17
a127 5
static int rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
			const unsigned char *iv, int enc)
	{
	RC4_set_key(&data(ctx)->ks,EVP_CIPHER_CTX_key_length(ctx),
		    key);
d129 1
a129 1
	}
d131 5
a135 4
static int rc4_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
		      const unsigned char *in, size_t inl)
	{
	RC4(&data(ctx)->ks,inl,in,out);
d137 1
a137 1
	}
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d65 1
@


1.8
log
@resolve conflicts
@
text
@a66 1
#include "evp_locl.h"
d81 1
a81 1
		      const unsigned char *in, unsigned int inl);
d131 1
a131 1
		      const unsigned char *in, unsigned int inl)
@


1.7
log
@resolve conflicts
@
text
@d67 1
@


1.6
log
@resolve conflicts
@
text
@d59 3
a63 2
#include <stdio.h>
#include "cryptlib.h"
a65 1
#include "evp_locl.h"
d93 1
d107 1
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d65 1
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a71 2
    /* FIXME: what is the key for? */
    unsigned char key[EVP_RC4_KEY_SIZE];
a121 1
	memcpy(&data(ctx)->key[0],key,EVP_CIPHER_CTX_key_length(ctx));
d123 1
a123 1
		data(ctx)->key);
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_RC4
d65 13
d83 1
a83 1
static EVP_CIPHER r4_cipher=
d91 1
a91 2
	sizeof(EVP_CIPHER_CTX)-sizeof((((EVP_CIPHER_CTX *)NULL)->c))+
		sizeof((((EVP_CIPHER_CTX *)NULL)->c.rc4)),
d97 1
a97 1
static EVP_CIPHER r4_40_cipher=
d105 1
a105 2
	sizeof(EVP_CIPHER_CTX)-sizeof((((EVP_CIPHER_CTX *)NULL)->c))+
		sizeof((((EVP_CIPHER_CTX *)NULL)->c.rc4)),
d111 1
a111 1
EVP_CIPHER *EVP_rc4(void)
d116 1
a116 1
EVP_CIPHER *EVP_rc4_40(void)
d124 3
a126 3
	memcpy(&(ctx->c.rc4.key[0]),key,EVP_CIPHER_CTX_key_length(ctx));
	RC4_set_key(&(ctx->c.rc4.ks),EVP_CIPHER_CTX_key_length(ctx),
		ctx->c.rc4.key);
d133 1
a133 1
	RC4(&(ctx->c.rc4.ks),inl,in,out);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d66 4
a69 4
static void rc4_init_key(EVP_CIPHER_CTX *ctx, unsigned char *key,
	unsigned char *iv,int enc);
static void rc4_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
	unsigned char *in, unsigned int inl);
d74 1
d82 1
d89 1
d92 6
d110 2
a111 2
static void rc4_init_key(EVP_CIPHER_CTX *ctx, unsigned char *key,
	     unsigned char *iv, int enc)
d113 1
a113 2
	if (key != NULL)
		memcpy(&(ctx->c.rc4.key[0]),key,EVP_CIPHER_CTX_key_length(ctx));
d116 1
d119 2
a120 2
static void rc4_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
	     unsigned char *in, unsigned int inl)
d123 1
@


1.1
log
@Initial revision
@
text
@d63 2
a64 2
#include "evp.h"
#include "objects.h"
a65 1
#ifndef NOPROTO
a69 5
#else
static void rc4_init_key();
static void rc4_cipher();
#endif

d91 1
a91 1
EVP_CIPHER *EVP_rc4()
d96 1
a96 1
EVP_CIPHER *EVP_rc4_40()
d101 2
a102 5
static void rc4_init_key(ctx,key,iv,enc)
EVP_CIPHER_CTX *ctx;
unsigned char *key;
unsigned char *iv;
int enc;
d110 2
a111 5
static void rc4_cipher(ctx,out,in,inl)
EVP_CIPHER_CTX *ctx;
unsigned char *out;
unsigned char *in;
unsigned int inl;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
#ifndef OPENSSL_NO_RC4
d63 14
a76 21
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/rc4.h>

/* FIXME: surely this is available elsewhere? */
#define EVP_RC4_KEY_SIZE		16

typedef struct
    {
    /* FIXME: what is the key for? */
    unsigned char key[EVP_RC4_KEY_SIZE];
    RC4_KEY ks;	/* working key */
    } EVP_RC4_KEY;

#define data(ctx) ((EVP_RC4_KEY *)(ctx)->cipher_data)

static int rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
			const unsigned char *iv,int enc);
static int rc4_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
		      const unsigned char *in, unsigned int inl);
static const EVP_CIPHER r4_cipher=
a79 1
	EVP_CIPH_VARIABLE_LENGTH,
d83 2
a84 1
	sizeof(EVP_RC4_KEY),
a86 1
	NULL
d89 1
a89 1
static const EVP_CIPHER r4_40_cipher=
a92 1
	EVP_CIPH_VARIABLE_LENGTH,
a94 5
	NULL,
	sizeof(EVP_RC4_KEY),
	NULL, 
	NULL,
	NULL
d97 1
a97 1
const EVP_CIPHER *EVP_rc4(void)
d102 1
a102 1
const EVP_CIPHER *EVP_rc4_40(void)
d107 10
a116 7
static int rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
			const unsigned char *iv, int enc)
	{
	memcpy(&data(ctx)->key[0],key,EVP_CIPHER_CTX_key_length(ctx));
	RC4_set_key(&data(ctx)->ks,EVP_CIPHER_CTX_key_length(ctx),
		data(ctx)->key);
	return 1;
d119 5
a123 2
static int rc4_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
		      const unsigned char *in, unsigned int inl)
d125 1
a125 2
	RC4(&data(ctx)->ks,inl,in,out);
	return 1;
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d72 2
d124 1
d126 1
a126 1
		    key);
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a64 1
#include "evp_locl.h"
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d59 2
a62 3

#ifndef OPENSSL_NO_RC4

d65 1
a92 1
	NULL,
a105 1
	NULL,
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a66 1
#include "evp_locl.h"
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d67 1
d82 1
a82 1
		      const unsigned char *in, size_t inl);
d132 1
a132 1
		      const unsigned char *in, size_t inl)
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a64 1
#include "evp_locl.h"
@


