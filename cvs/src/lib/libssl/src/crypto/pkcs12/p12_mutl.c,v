head	1.21;
access;
symbols
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.4
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	butholakala:1.11
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.11.0.8
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.5
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2015.09.30.17.30.15;	author jsing;	state Exp;
branches;
next	1.20;
commitid	f3YLBhwPPENmVqqA;

1.20
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.19;
commitid	rYgS8cWcS59JYkBV;

1.19
date	2014.10.22.18.37.22;	author miod;	state Exp;
branches;
next	1.18;
commitid	F5O3zFs06Y1LARkd;

1.18
date	2014.10.22.13.02.04;	author jsing;	state Exp;
branches;
next	1.17;
commitid	PjnBgKe6Buhbf937;

1.17
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.15;
commitid	nzndm3zqPmFurSaK;

1.15
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.14;
commitid	id8dTrTMtnTn4fqt;

1.14
date	2014.07.08.09.24.53;	author jsing;	state Exp;
branches;
next	1.13;
commitid	XxMwLiDq7L4rxrmk;

1.13
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.27.05.07.02;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.24;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.59;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.15.06.18.41;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.11.03;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.05.53.37;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.44;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.14;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.06.27.05.05.34;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.58;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.42;	author djm;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Replace M_ASN1_INTEGER_(new|free) with ASN1_INTEGER_(new|free) - this is
different from the macro expansion, but the result is the same. Also
replace some ASN1_STRING_dup() with ASN1_INTEGER_dup().

ok beck@@ doug@@
@
text
@/* $OpenBSD: p12_mutl.c,v 1.20 2015/07/29 14:58:34 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_HMAC

#include <openssl/err.h>
#include <openssl/hmac.h>
#include <openssl/pkcs12.h>

/* Generate a MAC */
int
PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen,
    unsigned char *mac, unsigned int *maclen)
{
	const EVP_MD *md_type;
	HMAC_CTX hmac;
	unsigned char key[EVP_MAX_MD_SIZE], *salt;
	int saltlen, iter;
	int md_size;

	if (!PKCS7_type_is_data(p12->authsafes)) {
		PKCS12err(PKCS12_F_PKCS12_GEN_MAC,
		    PKCS12_R_CONTENT_TYPE_NOT_DATA);
		return 0;
	}

	salt = p12->mac->salt->data;
	saltlen = p12->mac->salt->length;
	if (!p12->mac->iter)
		iter = 1;
	else
		iter = ASN1_INTEGER_get(p12->mac->iter);
	if (!(md_type = EVP_get_digestbyobj(
	    p12->mac->dinfo->algor->algorithm))) {
		PKCS12err(PKCS12_F_PKCS12_GEN_MAC,
		    PKCS12_R_UNKNOWN_DIGEST_ALGORITHM);
		return 0;
	}
	md_size = EVP_MD_size(md_type);
	if (md_size < 0)
		return 0;
	if (!PKCS12_key_gen(pass, passlen, salt, saltlen, PKCS12_MAC_ID, iter,
	    md_size, key, md_type)) {
		PKCS12err(PKCS12_F_PKCS12_GEN_MAC, PKCS12_R_KEY_GEN_ERROR);
		return 0;
	}
	HMAC_CTX_init(&hmac);
	if (!HMAC_Init_ex(&hmac, key, md_size, md_type, NULL) ||
	    !HMAC_Update(&hmac, p12->authsafes->d.data->data,
	    p12->authsafes->d.data->length) ||
	    !HMAC_Final(&hmac, mac, maclen)) {
		HMAC_CTX_cleanup(&hmac);
		return 0;
	}
	HMAC_CTX_cleanup(&hmac);
	return 1;
}

/* Verify the mac */
int
PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen)
{
	unsigned char mac[EVP_MAX_MD_SIZE];
	unsigned int maclen;

	if (p12->mac == NULL) {
		PKCS12err(PKCS12_F_PKCS12_VERIFY_MAC, PKCS12_R_MAC_ABSENT);
		return 0;
	}
	if (!PKCS12_gen_mac(p12, pass, passlen, mac, &maclen)) {
		PKCS12err(PKCS12_F_PKCS12_VERIFY_MAC,
		    PKCS12_R_MAC_GENERATION_ERROR);
		return 0;
	}
	if ((maclen != (unsigned int)p12->mac->dinfo->digest->length) ||
	    memcmp(mac, p12->mac->dinfo->digest->data, maclen))
		return 0;
	return 1;
}

/* Set a mac */

int
PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen, unsigned char *salt,
    int saltlen, int iter, const EVP_MD *md_type)
{
	unsigned char mac[EVP_MAX_MD_SIZE];
	unsigned int maclen;

	if (!md_type)
		md_type = EVP_sha1();
	if (PKCS12_setup_mac(p12, iter, salt, saltlen, md_type) ==
	    PKCS12_ERROR) {
		PKCS12err(PKCS12_F_PKCS12_SET_MAC, PKCS12_R_MAC_SETUP_ERROR);
		return 0;
	}
	if (!PKCS12_gen_mac(p12, pass, passlen, mac, &maclen)) {
		PKCS12err(PKCS12_F_PKCS12_SET_MAC,
		    PKCS12_R_MAC_GENERATION_ERROR);
		return 0;
	}
	if (!(ASN1_STRING_set(p12->mac->dinfo->digest, mac, maclen))) {
		PKCS12err(PKCS12_F_PKCS12_SET_MAC,
		    PKCS12_R_MAC_STRING_SET_ERROR);
		return 0;
	}
	return 1;
}

/* Set up a mac structure */
int
PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned char *salt, int saltlen,
    const EVP_MD *md_type)
{
	if (!(p12->mac = PKCS12_MAC_DATA_new()))
		return PKCS12_ERROR;
	if (iter > 1) {
		if (!(p12->mac->iter = ASN1_INTEGER_new())) {
			PKCS12err(PKCS12_F_PKCS12_SETUP_MAC,
			    ERR_R_MALLOC_FAILURE);
			return 0;
		}
		if (!ASN1_INTEGER_set(p12->mac->iter, iter)) {
			PKCS12err(PKCS12_F_PKCS12_SETUP_MAC,
			    ERR_R_MALLOC_FAILURE);
			return 0;
		}
	}
	if (!saltlen)
		saltlen = PKCS12_SALT_LEN;
	if (!(p12->mac->salt->data = malloc(saltlen))) {
		PKCS12err(PKCS12_F_PKCS12_SETUP_MAC, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	p12->mac->salt->length = saltlen;
	if (!salt)
		arc4random_buf(p12->mac->salt->data, saltlen);
	else
		memcpy (p12->mac->salt->data, salt, saltlen);
	p12->mac->dinfo->algor->algorithm = OBJ_nid2obj(EVP_MD_type(md_type));
	if (!(p12->mac->dinfo->algor->parameter = ASN1_TYPE_new())) {
		PKCS12err(PKCS12_F_PKCS12_SETUP_MAC, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	p12->mac->dinfo->algor->parameter->type = V_ASN1_NULL;

	return 1;
}
#endif
@


1.20
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_mutl.c,v 1.19 2014/10/22 18:37:22 miod Exp $ */
d179 1
a179 1
		if (!(p12->mac->iter = M_ASN1_INTEGER_new())) {
@


1.19
log
@In PKCS12_setup_mac(), do not assign p12->mac->salt->length until the allocation
of p12->mac->salt->data has actually succeeded.
In one of my trees for a long time already...
@
text
@d1 1
a1 1
/* $OpenBSD: p12_mutl.c,v 1.18 2014/10/22 13:02:04 jsing Exp $ */
d163 1
a163 1
	if (!(M_ASN1_OCTET_STRING_set(p12->mac->dinfo->digest, mac, maclen))) {
@


1.18
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_mutl.c,v 1.17 2014/07/11 08:44:49 jsing Exp $ */
d103 1
a103 1
	if (!PKCS12_key_gen (pass, passlen, salt, saltlen, PKCS12_MAC_ID, iter,
d126 1
d131 1
a131 1
	if (!PKCS12_gen_mac (p12, pass, passlen, mac, &maclen)) {
d153 1
a153 1
	if (PKCS12_setup_mac (p12, iter, salt, saltlen, md_type) ==
d158 1
a158 1
	if (!PKCS12_gen_mac (p12, pass, passlen, mac, &maclen)) {
d163 1
a163 1
	if (!(M_ASN1_OCTET_STRING_set (p12->mac->dinfo->digest, mac, maclen))) {
d192 1
a192 2
	p12->mac->salt->length = saltlen;
	if (!(p12->mac->salt->data = malloc (saltlen))) {
d196 1
@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_mutl.c,v 1.16 2014/07/10 22:45:57 jsing Exp $ */
d60 1
a69 1
#include <openssl/rand.h>
d196 3
a198 4
	if (!salt) {
		if (RAND_pseudo_bytes (p12->mac->salt->data, saltlen) < 0)
			return 0;
	} else
@


1.16
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_mutl.c,v 1.15 2014/07/10 13:58:23 jsing Exp $ */
d65 2
a66 1
#include "cryptlib.h"
d68 1
a69 1
#include <openssl/pkcs12.h>
@


1.15
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_mutl.c,v 1.14 2014/07/08 09:24:53 jsing Exp $ */
d61 2
@


1.14
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_mutl.c,v 1.13 2014/06/12 15:49:30 deraadt Exp $ */
d59 3
a62 1
#include <stdio.h>
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d67 3
a69 2
int PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen,
		   unsigned char *mac, unsigned int *maclen)
d77 3
a79 3
	if (!PKCS7_type_is_data(p12->authsafes))
		{
		PKCS12err(PKCS12_F_PKCS12_GEN_MAC,PKCS12_R_CONTENT_TYPE_NOT_DATA);
d81 1
a81 1
		}
d85 8
a92 5
	if (!p12->mac->iter) iter = 1;
	else iter = ASN1_INTEGER_get (p12->mac->iter);
    	if(!(md_type =
		 EVP_get_digestbyobj (p12->mac->dinfo->algor->algorithm))) {
		PKCS12err(PKCS12_F_PKCS12_GEN_MAC,PKCS12_R_UNKNOWN_DIGEST_ALGORITHM);
d97 4
a100 4
	    return 0;
	if(!PKCS12_key_gen (pass, passlen, salt, saltlen, PKCS12_MAC_ID, iter,
				 md_size, key, md_type)) {
		PKCS12err(PKCS12_F_PKCS12_GEN_MAC,PKCS12_R_KEY_GEN_ERROR);
d104 5
a108 6
	if (!HMAC_Init_ex(&hmac, key, md_size, md_type, NULL)
    		|| !HMAC_Update(&hmac, p12->authsafes->d.data->data,
					 p12->authsafes->d.data->length)
    		|| !HMAC_Final(&hmac, mac, maclen))
		{
    		HMAC_CTX_cleanup(&hmac);
d110 2
a111 2
		}
    	HMAC_CTX_cleanup(&hmac);
d116 2
a117 1
int PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen)
d121 2
a122 2
	if(p12->mac == NULL) {
		PKCS12err(PKCS12_F_PKCS12_VERIFY_MAC,PKCS12_R_MAC_ABSENT);
d126 2
a127 1
		PKCS12err(PKCS12_F_PKCS12_VERIFY_MAC,PKCS12_R_MAC_GENERATION_ERROR);
d130 3
a132 2
	if ((maclen != (unsigned int)p12->mac->dinfo->digest->length)
	|| memcmp (mac, p12->mac->dinfo->digest->data, maclen)) return 0;
d138 3
a140 2
int PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen,
	     unsigned char *salt, int saltlen, int iter, const EVP_MD *md_type)
d145 2
a146 1
	if (!md_type) md_type = EVP_sha1();
d148 2
a149 2
				 	PKCS12_ERROR) {
		PKCS12err(PKCS12_F_PKCS12_SET_MAC,PKCS12_R_MAC_SETUP_ERROR);
d153 2
a154 1
		PKCS12err(PKCS12_F_PKCS12_SET_MAC,PKCS12_R_MAC_GENERATION_ERROR);
d158 3
a160 2
		PKCS12err(PKCS12_F_PKCS12_SET_MAC,PKCS12_R_MAC_STRING_SET_ERROR);
						return 0;
d166 3
a168 2
int PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned char *salt, int saltlen,
	     const EVP_MD *md_type)
d170 2
a171 1
	if (!(p12->mac = PKCS12_MAC_DATA_new())) return PKCS12_ERROR;
d173 3
a175 2
		if(!(p12->mac->iter = M_ASN1_INTEGER_new())) {
			PKCS12err(PKCS12_F_PKCS12_SETUP_MAC, ERR_R_MALLOC_FAILURE);
d179 2
a180 1
			PKCS12err(PKCS12_F_PKCS12_SETUP_MAC, ERR_R_MALLOC_FAILURE);
d184 2
a185 1
	if (!saltlen) saltlen = PKCS12_SALT_LEN;
d194 2
a195 2
	}
	else memcpy (p12->mac->salt->data, salt, saltlen);
d202 1
a202 1
	
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d1 1
a1 1
/* p12_mutl.c */
@


1.11
log
@resolve conflicts
@
text
@d172 1
a172 1
	if (!(p12->mac->salt->data = OPENSSL_malloc (saltlen))) {
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d100 8
a107 4
	HMAC_Init_ex(&hmac, key, md_size, md_type, NULL);
    	HMAC_Update(&hmac, p12->authsafes->d.data->data,
					 p12->authsafes->d.data->length);
    	HMAC_Final(&hmac, mac, maclen);
@


1.9
log
@resolve conflicts
@
text
@d74 1
d91 3
d95 1
a95 1
				 EVP_MD_size(md_type), key, md_type)) {
d100 1
a100 1
	HMAC_Init_ex(&hmac, key, EVP_MD_size(md_type), md_type, NULL);
@


1.8
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.7
log
@resolve conflicts
@
text
@d67 2
a68 2
int PKCS12_gen_mac (PKCS12 *p12, const char *pass, int passlen,
		    unsigned char *mac, unsigned int *maclen)
d72 1
a72 1
	unsigned char key[PKCS12_MAC_KEY_LENGTH], *salt;
d91 1
a91 1
				 PKCS12_MAC_KEY_LENGTH, key, md_type)) {
d96 1
a96 1
	HMAC_Init_ex(&hmac, key, PKCS12_MAC_KEY_LENGTH, md_type, NULL);
d105 1
a105 1
int PKCS12_verify_mac (PKCS12 *p12, const char *pass, int passlen)
d110 1
a110 1
		PKCS12err(PKCS12_F_VERIFY_MAC,PKCS12_R_MAC_ABSENT);
d114 1
a114 1
		PKCS12err(PKCS12_F_VERIFY_MAC,PKCS12_R_MAC_GENERATION_ERROR);
d124 1
a124 1
int PKCS12_set_mac (PKCS12 *p12, const char *pass, int passlen,
d148 1
a148 1
int PKCS12_setup_mac (PKCS12 *p12, int iter, unsigned char *salt, int saltlen,
@


1.6
log
@resolve conflicts
@
text
@d75 6
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d151 4
a154 1
		ASN1_INTEGER_set(p12->mac->iter, iter);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_HMAC
d74 1
d89 3
a91 2
	HMAC_Init (&hmac, key, PKCS12_MAC_KEY_LENGTH, md_type);
    	HMAC_Update (&hmac, p12->authsafes->d.data->data,
d93 2
a94 1
    	HMAC_Final (&hmac, mac, maclen);
d119 1
a119 1
	     unsigned char *salt, int saltlen, int iter, EVP_MD *md_type)
d143 1
a143 1
	     EVP_MD *md_type)
@


1.3
log
@OpenSSL 0.9.5a merge
@
text
@d109 1
a109 4
	|| memcmp (mac, p12->mac->dinfo->digest->data, maclen)) {
		PKCS12err(PKCS12_F_VERIFY_MAC,PKCS12_R_MAC_VERIFY_ERROR);
		return 0;
	}
d152 1
a152 1
	if (!(p12->mac->salt->data = Malloc (saltlen))) {
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d160 1
a160 1
		if (RAND_bytes (p12->mac->salt->data, saltlen) <= 0)
@


1.1
log
@new files for OpenSSL 0.9.4
@
text
@d134 1
a134 1
	if (!(ASN1_OCTET_STRING_set (p12->mac->dinfo->digest, mac, maclen))) {
d145 1
a145 1
	if (!(p12->mac = PKCS12_MAC_DATA_new ())) return PKCS12_ERROR;
d147 1
a147 1
		if(!(p12->mac->iter = ASN1_INTEGER_new())) {
d151 1
a151 1
		ASN1_INTEGER_set (p12->mac->iter, iter);
d159 4
a162 1
	if (!salt) RAND_bytes (p12->mac->salt->data, saltlen);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
#ifndef OPENSSL_NO_HMAC
a73 1

d88 2
a89 3
	HMAC_CTX_init(&hmac);
	HMAC_Init_ex(&hmac, key, PKCS12_MAC_KEY_LENGTH, md_type, NULL);
    	HMAC_Update(&hmac, p12->authsafes->d.data->data,
d91 1
a91 2
    	HMAC_Final(&hmac, mac, maclen);
    	HMAC_CTX_cleanup(&hmac);
d109 4
a112 1
	|| memcmp (mac, p12->mac->dinfo->digest->data, maclen)) return 0;
d119 1
a119 1
	     unsigned char *salt, int saltlen, int iter, const EVP_MD *md_type)
d134 1
a134 1
	if (!(M_ASN1_OCTET_STRING_set (p12->mac->dinfo->digest, mac, maclen))) {
d143 1
a143 1
	     const EVP_MD *md_type)
d145 1
a145 1
	if (!(p12->mac = PKCS12_MAC_DATA_new())) return PKCS12_ERROR;
d147 1
a147 1
		if(!(p12->mac->iter = M_ASN1_INTEGER_new())) {
d151 1
a151 1
		ASN1_INTEGER_set(p12->mac->iter, iter);
d155 1
a155 1
	if (!(p12->mac->salt->data = OPENSSL_malloc (saltlen))) {
d159 1
a159 4
	if (!salt) {
		if (RAND_pseudo_bytes (p12->mac->salt->data, saltlen) < 0)
			return 0;
	}
@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d151 1
a151 4
		if (!ASN1_INTEGER_set(p12->mac->iter, iter)) {
			PKCS12err(PKCS12_F_PKCS12_SETUP_MAC, ERR_R_MALLOC_FAILURE);
			return 0;
		}
@


1.1.1.3
log
@import of openssl-0.9.7j
@
text
@a74 6
	if (!PKCS7_type_is_data(p12->authsafes))
		{
		PKCS12err(PKCS12_F_PKCS12_GEN_MAC,PKCS12_R_CONTENT_TYPE_NOT_DATA);
		return 0;
		}

@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d67 2
a68 2
int PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen,
		   unsigned char *mac, unsigned int *maclen)
d72 1
a72 1
	unsigned char key[EVP_MAX_MD_SIZE], *salt;
d91 1
a91 1
				 EVP_MD_size(md_type), key, md_type)) {
d96 1
a96 1
	HMAC_Init_ex(&hmac, key, EVP_MD_size(md_type), md_type, NULL);
d105 1
a105 1
int PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen)
d110 1
a110 1
		PKCS12err(PKCS12_F_PKCS12_VERIFY_MAC,PKCS12_R_MAC_ABSENT);
d114 1
a114 1
		PKCS12err(PKCS12_F_PKCS12_VERIFY_MAC,PKCS12_R_MAC_GENERATION_ERROR);
d124 1
a124 1
int PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen,
d148 1
a148 1
int PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned char *salt, int saltlen,
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@a73 1
	int md_size;
a89 3
	md_size = EVP_MD_size(md_type);
	if (md_size < 0)
	    return 0;
d91 1
a91 1
				 md_size, key, md_type)) {
d96 1
a96 1
	HMAC_Init_ex(&hmac, key, md_size, md_type, NULL);
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d100 4
a103 8
	if (!HMAC_Init_ex(&hmac, key, md_size, md_type, NULL)
    		|| !HMAC_Update(&hmac, p12->authsafes->d.data->data,
					 p12->authsafes->d.data->length)
    		|| !HMAC_Final(&hmac, mac, maclen))
		{
    		HMAC_CTX_cleanup(&hmac);
		return 0;
		}
@


