head	1.13;
access;
symbols
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.6
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	butholakala:1.6
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.6.0.16
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.12
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.10
	OPENBSD_5_3_BASE:1.6
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.1
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.09.03.11.33.38;	author beck;	state dead;
branches;
next	1.12;
commitid	HnbXxsegngek41U2;

1.12
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.10;
commitid	id8dTrTMtnTn4fqt;

1.10
date	2014.07.08.09.24.53;	author jsing;	state Exp;
branches;
next	1.9;
commitid	XxMwLiDq7L4rxrmk;

1.9
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.00.03.14;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.58.00;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.05.53.38;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.44;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.13.58;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: p12_utl.c,v 1.12 2014/07/11 08:44:49 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/pkcs12.h>

/* Cheap and nasty Unicode stuff */

unsigned char *
OPENSSL_asc2uni(const char *asc, int asclen, unsigned char **uni, int *unilen)
{
	int ulen, i;
	unsigned char *unitmp;

	if (asclen == -1)
		asclen = strlen(asc);
	ulen = asclen * 2 + 2;
	if (!(unitmp = malloc(ulen)))
		return NULL;
	for (i = 0; i < ulen - 2; i += 2) {
		unitmp[i] = 0;
		unitmp[i + 1] = asc[i >> 1];
	}
	/* Make result double null terminated */
	unitmp[ulen - 2] = 0;
	unitmp[ulen - 1] = 0;
	if (unilen)
		*unilen = ulen;
	if (uni)
		*uni = unitmp;
	return unitmp;
}

char *
OPENSSL_uni2asc(unsigned char *uni, int unilen)
{
	int asclen, i;
	char *asctmp;

	asclen = unilen / 2;
	/* If no terminating zero allow for one */
	if (!unilen || uni[unilen - 1])
		asclen++;
	uni++;
	if (!(asctmp = malloc(asclen)))
		return NULL;
	for (i = 0; i < unilen; i += 2)
		asctmp[i >> 1] = uni[i];
	asctmp[asclen - 1] = 0;
	return asctmp;
}

int
i2d_PKCS12_bio(BIO *bp, PKCS12 *p12)
{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(PKCS12), bp, p12);
}

int
i2d_PKCS12_fp(FILE *fp, PKCS12 *p12)
{
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(PKCS12), fp, p12);
}

PKCS12 *
d2i_PKCS12_bio(BIO *bp, PKCS12 **p12)
{
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(PKCS12), bp, p12);
}

PKCS12 *
d2i_PKCS12_fp(FILE *fp, PKCS12 **p12)
{
	    return ASN1_item_d2i_fp(ASN1_ITEM_rptr(PKCS12), fp, p12);
}

PKCS12_SAFEBAG *
PKCS12_x5092certbag(X509 *x509)
{
	return PKCS12_item_pack_safebag(x509, ASN1_ITEM_rptr(X509),
	    NID_x509Certificate, NID_certBag);
}

PKCS12_SAFEBAG *
PKCS12_x509crl2certbag(X509_CRL *crl)
{
	return PKCS12_item_pack_safebag(crl, ASN1_ITEM_rptr(X509_CRL),
	    NID_x509Crl, NID_crlBag);
}

X509 *
PKCS12_certbag2x509(PKCS12_SAFEBAG *bag)
{
	if (M_PKCS12_bag_type(bag) != NID_certBag)
		return NULL;
	if (M_PKCS12_cert_bag_type(bag) != NID_x509Certificate)
		return NULL;
	return ASN1_item_unpack(bag->value.bag->value.octet,
	    ASN1_ITEM_rptr(X509));
}

X509_CRL *
PKCS12_certbag2x509crl(PKCS12_SAFEBAG *bag)
{
	if (M_PKCS12_bag_type(bag) != NID_crlBag)
		return NULL;
	if (M_PKCS12_cert_bag_type(bag) != NID_x509Crl)
		return NULL;
	return ASN1_item_unpack(bag->value.bag->value.octet,
	    ASN1_ITEM_rptr(X509_CRL));
}
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_utl.c,v 1.11 2014/07/10 13:58:23 jsing Exp $ */
@


1.11
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_utl.c,v 1.10 2014/07/08 09:24:53 jsing Exp $ */
a61 1
#include "cryptlib.h"
@


1.10
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_utl.c,v 1.9 2014/06/12 15:49:30 deraadt Exp $ */
d60 2
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d65 2
a66 1
unsigned char *OPENSSL_asc2uni(const char *asc, int asclen, unsigned char **uni, int *unilen)
d70 7
a76 4
	if (asclen == -1) asclen = strlen(asc);
	ulen = asclen*2  + 2;
	if (!(unitmp = malloc(ulen))) return NULL;
	for (i = 0; i < ulen - 2; i+=2) {
d78 1
a78 1
		unitmp[i + 1] = asc[i>>1];
d83 4
a86 2
	if (unilen) *unilen = ulen;
	if (uni) *uni = unitmp;
d90 2
a91 1
char *OPENSSL_uni2asc(unsigned char *uni, int unilen)
d95 1
d98 2
a99 1
	if (!unilen || uni[unilen - 1]) asclen++;
d101 4
a104 2
	if (!(asctmp = malloc(asclen))) return NULL;
	for (i = 0; i < unilen; i+=2) asctmp[i>>1] = uni[i];
d109 2
a110 1
int i2d_PKCS12_bio(BIO *bp, PKCS12 *p12)
d115 2
a116 1
int i2d_PKCS12_fp(FILE *fp, PKCS12 *p12)
d121 2
a122 1
PKCS12 *d2i_PKCS12_bio(BIO *bp, PKCS12 **p12)
d126 3
a128 1
PKCS12 *d2i_PKCS12_fp(FILE *fp, PKCS12 **p12)
d130 1
a130 1
        return ASN1_item_d2i_fp(ASN1_ITEM_rptr(PKCS12), fp, p12);
d133 2
a134 1
PKCS12_SAFEBAG *PKCS12_x5092certbag(X509 *x509)
d137 1
a137 1
			NID_x509Certificate, NID_certBag);
d140 2
a141 1
PKCS12_SAFEBAG *PKCS12_x509crl2certbag(X509_CRL *crl)
d144 1
a144 1
			NID_x509Crl, NID_crlBag);
d147 2
a148 1
X509 *PKCS12_certbag2x509(PKCS12_SAFEBAG *bag)
d150 6
a155 3
	if(M_PKCS12_bag_type(bag) != NID_certBag) return NULL;
	if(M_PKCS12_cert_bag_type(bag) != NID_x509Certificate) return NULL;
	return ASN1_item_unpack(bag->value.bag->value.octet, ASN1_ITEM_rptr(X509));
d158 2
a159 1
X509_CRL *PKCS12_certbag2x509crl(PKCS12_SAFEBAG *bag)
d161 4
a164 2
	if(M_PKCS12_bag_type(bag) != NID_crlBag) return NULL;
	if(M_PKCS12_cert_bag_type(bag) != NID_x509Crl) return NULL;
d166 1
a166 1
							ASN1_ITEM_rptr(X509_CRL));
@


1.8
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d1 1
a1 1
/* p12_utl.c */
@


1.7
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a102 1
#ifndef OPENSSL_NO_FP_API
a106 1
#endif
a111 1
#ifndef OPENSSL_NO_FP_API
a115 1
#endif
@


1.6
log
@resolve conflicts, fix local changes
@
text
@d71 1
a71 1
	if (!(unitmp = OPENSSL_malloc(ulen))) return NULL;
d92 1
a92 1
	if (!(asctmp = OPENSSL_malloc(asclen))) return NULL;
@


1.5
log
@resolve conflicts
@
text
@d65 1
a65 1
unsigned char *asc2uni(const char *asc, int asclen, unsigned char **uni, int *unilen)
d84 1
a84 1
char *uni2asc(unsigned char *uni, int unilen)
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.3
log
@openssl-engine-0.9.6a merge
@
text
@d100 1
a100 1
	return ASN1_i2d_bio((int(*)())i2d_PKCS12, bp, (unsigned char *)p12);
d103 1
a103 1
#ifndef NO_FP_API
d106 1
a106 1
	return ASN1_i2d_fp((int(*)())i2d_PKCS12, fp, (unsigned char *)p12);
d112 1
a112 2
	return (PKCS12 *)ASN1_d2i_bio((char *(*)())PKCS12_new,
         (char *(*)())d2i_PKCS12, bp, (unsigned char **)p12);
d114 1
a114 1
#ifndef NO_FP_API
d117 1
a117 2
        return (PKCS12 *)ASN1_d2i_fp((char *(*)())PKCS12_new, 
         (char *(*)())d2i_PKCS12, fp, (unsigned char **)(p12));
d121 26
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d65 1
a65 1
unsigned char *asc2uni (const char *asc, unsigned char **uni, int *unilen)
d69 4
a72 3
	ulen = strlen(asc)*2  + 2;
	if (!(unitmp = OPENSSL_malloc (ulen))) return NULL;
	for (i = 0; i < ulen; i+=2) {
d76 3
d84 1
a84 1
char *uni2asc (unsigned char *uni, int unilen)
d90 1
a90 1
	if (uni[unilen - 1]) asclen++;
d92 1
a92 1
	if (!(asctmp = OPENSSL_malloc (asclen))) return NULL;
@


1.1
log
@new files for OpenSSL 0.9.4
@
text
@d70 1
a70 1
	if (!(unitmp = Malloc (ulen))) return NULL;
d88 1
a88 1
	if (!(asctmp = Malloc (asclen))) return NULL;
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d65 1
a65 1
unsigned char *asc2uni(const char *asc, int asclen, unsigned char **uni, int *unilen)
d69 3
a71 4
	if (asclen == -1) asclen = strlen(asc);
	ulen = asclen*2  + 2;
	if (!(unitmp = OPENSSL_malloc(ulen))) return NULL;
	for (i = 0; i < ulen - 2; i+=2) {
a74 3
	/* Make result double null terminated */
	unitmp[ulen - 2] = 0;
	unitmp[ulen - 1] = 0;
d80 1
a80 1
char *uni2asc(unsigned char *uni, int unilen)
d86 1
a86 1
	if (!unilen || uni[unilen - 1]) asclen++;
d88 1
a88 1
	if (!(asctmp = OPENSSL_malloc(asclen))) return NULL;
d96 1
a96 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(PKCS12), bp, p12);
d99 1
a99 1
#ifndef OPENSSL_NO_FP_API
d102 1
a102 1
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(PKCS12), fp, p12);
d108 2
a109 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(PKCS12), bp, p12);
d111 1
a111 1
#ifndef OPENSSL_NO_FP_API
d114 2
a115 1
        return ASN1_item_d2i_fp(ASN1_ITEM_rptr(PKCS12), fp, p12);
a118 26
PKCS12_SAFEBAG *PKCS12_x5092certbag(X509 *x509)
{
	return PKCS12_item_pack_safebag(x509, ASN1_ITEM_rptr(X509),
			NID_x509Certificate, NID_certBag);
}

PKCS12_SAFEBAG *PKCS12_x509crl2certbag(X509_CRL *crl)
{
	return PKCS12_item_pack_safebag(crl, ASN1_ITEM_rptr(X509_CRL),
			NID_x509Crl, NID_crlBag);
}

X509 *PKCS12_certbag2x509(PKCS12_SAFEBAG *bag)
{
	if(M_PKCS12_bag_type(bag) != NID_certBag) return NULL;
	if(M_PKCS12_cert_bag_type(bag) != NID_x509Certificate) return NULL;
	return ASN1_item_unpack(bag->value.bag->value.octet, ASN1_ITEM_rptr(X509));
}

X509_CRL *PKCS12_certbag2x509crl(PKCS12_SAFEBAG *bag)
{
	if(M_PKCS12_bag_type(bag) != NID_crlBag) return NULL;
	if(M_PKCS12_cert_bag_type(bag) != NID_x509Crl) return NULL;
	return ASN1_item_unpack(bag->value.bag->value.octet,
							ASN1_ITEM_rptr(X509_CRL));
}
@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d65 1
a65 1
unsigned char *OPENSSL_asc2uni(const char *asc, int asclen, unsigned char **uni, int *unilen)
d84 1
a84 1
char *OPENSSL_uni2asc(unsigned char *uni, int unilen)
@


