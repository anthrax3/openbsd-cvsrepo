head	1.21;
access;
symbols
	OPENBSD_6_0:1.21.0.6
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	butholakala:1.7
	openssl_1_0_1_g:1.1.1.4
	OPENBSD_5_5:1.7.0.24
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.20
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.18
	OPENBSD_5_3_BASE:1.7
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.7.0.14
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.16
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.7.0.12
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2015.04.23.06.11.19;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	QOYpqZ8qBnrdWg2A;

1.20
date	2014.11.11.19.26.12;	author miod;	state Exp;
branches;
next	1.19;
commitid	4CKhmgtEPtZmYN5j;

1.19
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.18;
commitid	yQEL1wOWIearrW15;

1.18
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.17;
commitid	id8dTrTMtnTn4fqt;

1.17
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	mJUVYpkFBZ0Zv2bG;

1.16
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2014.05.05.16.19.23;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.19.00.41.37;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.16.19.54.20;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.15.00.28;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.15.17.46.16;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.15.16.37.21;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.16.12.18.20;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.16;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.07;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.39;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.54;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.41.34;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Do not need to buf[0] = 0 before strlcpy(buf, ...
@
text
@/* $OpenBSD: b_dump.c,v 1.20 2014/11/11 19:26:12 miod Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/*
 * Stolen from tjh's ssl/ssl_trc.c stuff.
 */

#include <stdio.h>
#include <string.h>

#include <openssl/bio.h>

#define TRUNCATE
#define DUMP_WIDTH	16
#define DUMP_WIDTH_LESS_INDENT(i) (DUMP_WIDTH - ((i - (i > 6 ? 6 : i) + 3) / 4))

int
BIO_dump_cb(int (*cb)(const void *data, size_t len, void *u),
    void *u, const char *s, int len)
{
	return BIO_dump_indent_cb(cb, u, s, len, 0);
}

int
BIO_dump_indent_cb(int (*cb)(const void *data, size_t len, void *u),
    void *u, const char *s, int len, int indent)
{
	int ret = 0;
	char buf[288 + 1], tmp[20], str[128 + 1];
	int i, j, rows, trc;
	unsigned char ch;
	int dump_width;

	trc = 0;

#ifdef TRUNCATE
	for (; (len > 0) && ((s[len - 1] == ' ') || (s[len - 1] == '\0')); len--)
		trc++;
#endif

	if (indent < 0)
		indent = 0;
	if (indent) {
		if (indent > 128)
			indent = 128;
		memset(str, ' ', indent);
	}
	str[indent] = '\0';

	dump_width = DUMP_WIDTH_LESS_INDENT(indent);
	rows = (len / dump_width);
	if ((rows * dump_width) < len)
		rows++;
	for (i = 0; i < rows; i++) {
		strlcpy(buf, str, sizeof buf);
		snprintf(tmp, sizeof tmp, "%04x - ", i*dump_width);
		strlcat(buf, tmp, sizeof buf);
		for (j = 0; j < dump_width; j++) {
			if (((i*dump_width) + j) >= len) {
				strlcat(buf, "   ", sizeof buf);
			} else {
				ch = ((unsigned char)*(s + i*dump_width + j)) & 0xff;
				snprintf(tmp, sizeof tmp, "%02x%c", ch,
				    j == 7 ? '-' : ' ');
				strlcat(buf, tmp, sizeof buf);
			}
		}
		strlcat(buf, "  ", sizeof buf);
		for (j = 0; j < dump_width; j++) {
			if (((i*dump_width) + j) >= len)
				break;
			ch = ((unsigned char)*(s + i * dump_width + j)) & 0xff;
			snprintf(tmp, sizeof tmp, "%c",
			    ((ch >= ' ') && (ch <= '~')) ? ch : '.');
			strlcat(buf, tmp, sizeof buf);
		}
		strlcat(buf, "\n", sizeof buf);
		/* if this is the last call then update the ddt_dump thing so
		 * that we will move the selection point in the debug window
		 */
		ret += cb((void *)buf, strlen(buf), u);
	}
#ifdef TRUNCATE
	if (trc > 0) {
		snprintf(buf, sizeof buf, "%s%04x - <SPACES/NULS>\n",
		    str, len + trc);
		ret += cb((void *)buf, strlen(buf), u);
	}
#endif
	return (ret);
}

static int
write_fp(const void *data, size_t len, void *fp)
{
	return fwrite(data, 1, len, fp);
}

int
BIO_dump_fp(FILE *fp, const char *s, int len)
{
	return BIO_dump_cb(write_fp, fp, s, len);
}

int
BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent)
{
	return BIO_dump_indent_cb(write_fp, fp, s, len, indent);
}

static int
write_bio(const void *data, size_t len, void *bp)
{
	return BIO_write((BIO *)bp, (const char *)data, len);
}

int
BIO_dump(BIO *bp, const char *s, int len)
{
	return BIO_dump_cb(write_bio, bp, s, len);
}

int
BIO_dump_indent(BIO *bp, const char *s, int len, int indent)
{
	return BIO_dump_indent_cb(write_bio, bp, s, len, indent);
}
@


1.20
log
@f{read,write} take a number of items and an item size as arguments, and
return the number of items read of written.

When you intend to return the number of bytes actually processed, it is
wise to pass 1 as the item size and the size as the number of items.

But in *some* places, the OpenSSL does the opposite, and has extra logic
to change a successful return of 1 (item processed) into the real size.

And, guess why it does that? Because of old VMS, for they (used to) have a
substandard stdio implementation.

Note that this change causes the return values of BIO_dump_fp() and
BIO_dump_indent_fp() to no longer be useless (actual number of callback calls),
but actual bytes output. Given the irrelevance of the return value before,
it is unlikely that anything depends upon it (and if something does, it
probably has other problems in need for a fix...)

ok tedu@@ beck@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: b_dump.c,v 1.19 2014/07/11 08:44:47 jsing Exp $ */
a109 1
		buf[0] = '\0';	/* start with empty string */
@


1.19
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: b_dump.c,v 1.18 2014/07/10 13:58:22 jsing Exp $ */
d152 1
a152 1
	return fwrite(data, len, 1, fp);
@


1.18
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: b_dump.c,v 1.17 2014/06/12 15:49:28 deraadt Exp $ */
a66 2

#include "cryptlib.h"
@


1.17
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 1
@


1.16
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d1 1
a1 1
/* crypto/bio/b_dump.c */
@


1.15
log
@Sort and group includes.
@
text
@a149 1
#ifndef OPENSSL_NO_FP_API
a166 1
#endif
@


1.14
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d64 3
a67 1
#include <openssl/bio.h>
@


1.13
log
@use intrinsic strlcpy and strlcat everywhere so we only have one set of
funcitons to check for incorrect use. keep BUF_strlcpy and BUF_strlcat
for API comptibility only.
ok tedu@@
@
text
@d111 1
a111 1
		(void) snprintf(tmp, sizeof tmp, "%04x - ", i*dump_width);
d118 1
a118 1
				(void) snprintf(tmp, sizeof tmp, "%02x%c", ch,
d128 1
a128 1
			(void) snprintf(tmp, sizeof tmp, "%c",
d140 1
a140 1
		(void) snprintf(buf, sizeof buf, "%s%04x - <SPACES/NULS>\n",
@


1.12
log
@- Why do we hide from the OpenSSL police, dad?
- Because they're not like us, son. They use macros to wrap stdio routines,
  for an undocumented (OPENSSL_USE_APPLINK) use case, which only serves to
  obfuscate the code.

ok tedu@@
@
text
@d110 1
a110 1
		BUF_strlcpy(buf, str, sizeof buf);
d112 1
a112 1
		BUF_strlcat(buf, tmp, sizeof buf);
d115 1
a115 1
				BUF_strlcat(buf, "   ", sizeof buf);
d120 1
a120 1
				BUF_strlcat(buf, tmp, sizeof buf);
d123 1
a123 1
		BUF_strlcat(buf, "  ", sizeof buf);
d130 1
a130 1
			BUF_strlcat(buf, tmp, sizeof buf);
d132 1
a132 1
		BUF_strlcat(buf, "\n", sizeof buf);
@


1.11
log
@More KNF.
@
text
@d65 1
a65 1
#include "bio_lcl.h"
d152 1
a152 1
	return UP_fwrite(data, len, 1, fp);
@


1.10
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d59 1
a59 1
/* 
@


1.9
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a127 1
#ifndef CHARSET_EBCDIC
a129 5
#else
			(void) snprintf(tmp, sizeof tmp, "%c",
			    ((ch >= os_toascii[' ']) && (ch <= os_toascii['~']))
			    ? os_toebcdic[ch] : '.');
#endif
@


1.8
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d69 1
a69 1
#define DUMP_WIDTH_LESS_INDENT(i) (DUMP_WIDTH-((i-(i>6?6:i)+3)/4))
d71 4
a74 3
int BIO_dump_cb(int (*cb)(const void *data, size_t len, void *u),
	void *u, const char *s, int len)
	{
d76 1
a76 1
	}
d78 7
a84 6
int BIO_dump_indent_cb(int (*cb)(const void *data, size_t len, void *u),
	void *u, const char *s, int len, int indent)
	{
	int ret=0;
	char buf[288+1],tmp[20],str[128+1];
	int i,j,rows,trc;
d88 1
a88 1
	trc=0;
d91 1
a91 1
	for(; (len > 0) && ((s[len-1] == ' ') || (s[len-1] == '\0')); len--)
d97 10
a106 10
	if (indent)
		{
		if (indent > 128) indent=128;
		memset(str,' ',indent);
		}
	str[indent]='\0';

	dump_width=DUMP_WIDTH_LESS_INDENT(indent);
	rows=(len/dump_width);
	if ((rows*dump_width)<len)
d108 13
a120 19
	for(i=0;i<rows;i++)
		{
		buf[0]='\0';	/* start with empty string */
		BUF_strlcpy(buf,str,sizeof buf);
		(void) snprintf(tmp,sizeof tmp,"%04x - ",i*dump_width);
		BUF_strlcat(buf,tmp,sizeof buf);
		for(j=0;j<dump_width;j++)
			{
			if (((i*dump_width)+j)>=len)
				{
				BUF_strlcat(buf,"   ",sizeof buf);
				}
			else
				{
				ch=((unsigned char)*(s+i*dump_width+j)) & 0xff;
				(void) snprintf(tmp,sizeof tmp,"%02x%c",ch,
					j==7?'-':' ');
				BUF_strlcat(buf,tmp,sizeof buf);
				}
d122 4
a125 4
		BUF_strlcat(buf,"  ",sizeof buf);
		for(j=0;j<dump_width;j++)
			{
			if (((i*dump_width)+j)>=len)
d127 1
a127 1
			ch=((unsigned char)*(s+i*dump_width+j)) & 0xff;
d129 2
a130 2
			(void) snprintf(tmp,sizeof tmp,"%c",
				((ch>=' ')&&(ch<='~'))?ch:'.');
d132 3
a134 4
			(void) snprintf(tmp,sizeof tmp,"%c",
				((ch>=os_toascii[' '])&&(ch<=os_toascii['~']))
				? os_toebcdic[ch]
				: '.');
d136 3
a138 3
			BUF_strlcat(buf,tmp,sizeof buf);
			}
		BUF_strlcat(buf,"\n",sizeof buf);
d142 2
a143 2
		ret+=cb((void *)buf,strlen(buf),u);
		}
d145 5
a149 6
	if (trc > 0)
		{
		(void) snprintf(buf,sizeof buf,"%s%04x - <SPACES/NULS>\n",str,
			len+trc);
		ret+=cb((void *)buf,strlen(buf),u);
		}
d151 2
a152 2
	return(ret);
	}
d155 3
a157 2
static int write_fp(const void *data, size_t len, void *fp)
	{
d159 5
a163 3
	}
int BIO_dump_fp(FILE *fp, const char *s, int len)
	{
d165 5
a169 3
	}
int BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent)
	{
d171 1
a171 1
	}
d174 3
a176 2
static int write_bio(const void *data, size_t len, void *bp)
	{
d178 5
a182 3
	}
int BIO_dump(BIO *bp, const char *s, int len)
	{
d184 5
a188 3
	}
int BIO_dump_indent(BIO *bp, const char *s, int len, int indent)
	{
d190 1
a190 2
	}

@


1.7
log
@resolve conflicts
@
text
@d110 1
a110 1
		BIO_snprintf(tmp,sizeof tmp,"%04x - ",i*dump_width);
d121 1
a121 1
				BIO_snprintf(tmp,sizeof tmp,"%02x%c",ch,
d133 1
a133 1
			BIO_snprintf(tmp,sizeof tmp,"%c",
d136 1
a136 1
			BIO_snprintf(tmp,sizeof tmp,"%c",
d152 1
a152 1
		BIO_snprintf(buf,sizeof buf,"%s%04x - <SPACES/NULS>\n",str,
@


1.6
log
@merge 0.9.7d
@
text
@d65 1
a65 1
#include <openssl/bio.h>
d71 2
a72 1
int BIO_dump(BIO *bio, const char *s, int len)
d74 1
a74 1
	return BIO_dump_indent(bio, s, len, 0);
d77 2
a78 1
int BIO_dump_indent(BIO *bio, const char *s, int len, int indent)
d82 1
a82 1
	int i,j,rows,trunc;
d85 3
a87 3
	
	trunc=0;
	
d89 2
a90 2
	for(; (len > 0) && ((s[len-1] == ' ') || (s[len-1] == '\0')); len--) 
		trunc++;
d101 1
a101 1
	
d122 1
a122 1
					 j==7?'-':' ');
d134 1
a134 1
				 ((ch>=' ')&&(ch<='~'))?ch:'.');
d137 3
a139 3
				 ((ch>=os_toascii[' '])&&(ch<=os_toascii['~']))
				 ? os_toebcdic[ch]
				 : '.');
d144 2
a145 2
		/* if this is the last call then update the ddt_dump thing so that
		 * we will move the selection point in the debug window 
d147 1
a147 1
		ret+=BIO_write(bio,(char *)buf,strlen(buf));
d150 1
a150 1
	if (trunc > 0)
d153 2
a154 2
			 len+trunc);
		ret+=BIO_write(bio,(char *)buf,strlen(buf));
d159 29
@


1.5
log
@Less strcpy/strcat/sprintf. tdeval@@ ok.
@
text
@d107 3
a109 3
		strlcpy(buf,str,sizeof buf);
		snprintf(tmp,sizeof tmp,"%04x - ",i*dump_width);
		strlcat(buf,tmp,sizeof buf);
d114 1
a114 1
				strlcat(buf,"   ",sizeof buf);
d119 1
a119 1
				snprintf(tmp,sizeof tmp,"%02x%c",ch,
d121 1
a121 1
				strlcat(buf,tmp,sizeof buf);
d124 1
a124 1
		strlcat(buf,"  ",sizeof buf);
d131 1
a131 1
			snprintf(tmp,sizeof tmp,"%c",
d134 1
a134 1
			snprintf(tmp,sizeof tmp,"%c",
d139 1
a139 1
			strlcat(buf,tmp,sizeof buf);
d141 1
a141 1
		strlcat(buf,"\n",sizeof buf);
d150 1
a150 1
		snprintf(buf,sizeof buf,"%s%04x - <SPACES/NULS>\n",str,
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d107 3
a109 3
		strcpy(buf,str);
		sprintf(tmp,"%04x - ",i*dump_width);
		strcat(buf,tmp);
d114 1
a114 1
				strcat(buf,"   ");
d119 3
a121 2
				sprintf(tmp,"%02x%c",ch,j==7?'-':' ');
				strcat(buf,tmp);
d124 1
a124 1
		strcat(buf,"  ");
d131 2
a132 1
			sprintf(tmp,"%c",((ch>=' ')&&(ch<='~'))?ch:'.');
d134 4
a137 3
			sprintf(tmp,"%c",((ch>=os_toascii[' '])&&(ch<=os_toascii['~']))
				? os_toebcdic[ch]
				: '.');
d139 1
a139 1
			strcat(buf,tmp);
d141 1
a141 1
		strcat(buf,"\n");
d150 2
a151 1
		sprintf(buf,"%s%04x - <SPACES/NULS>\n",str,len+trunc);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d69 1
d72 3
a74 7
{
  int ret=0;
  char buf[160+1],tmp[20];
  int i,j,rows,trunc;
  unsigned char ch;

  trunc=0;
d76 10
d87 2
a88 2
  for(; (len > 0) && ((s[len-1] == ' ') || (s[len-1] == '\0')); len--) 
    trunc++;
d91 38
a128 21
  rows=(len/DUMP_WIDTH);
  if ((rows*DUMP_WIDTH)<len)
    rows++;
  for(i=0;i<rows;i++) {
    buf[0]='\0';	/* start with empty string */
    sprintf(tmp,"%04x - ",i*DUMP_WIDTH);
    strcpy(buf,tmp);
    for(j=0;j<DUMP_WIDTH;j++) {
      if (((i*DUMP_WIDTH)+j)>=len) {
	strcat(buf,"   ");
      } else {
        ch=((unsigned char)*(s+i*DUMP_WIDTH+j)) & 0xff;
	sprintf(tmp,"%02x%c",ch,j==7?'-':' ');
        strcat(buf,tmp);
      }
    }
    strcat(buf,"  ");
    for(j=0;j<DUMP_WIDTH;j++) {
      if (((i*DUMP_WIDTH)+j)>=len)
	break;
      ch=((unsigned char)*(s+i*DUMP_WIDTH+j)) & 0xff;
d130 1
a130 1
      sprintf(tmp,"%c",((ch>=' ')&&(ch<='~'))?ch:'.');
d132 3
a134 3
      sprintf(tmp,"%c",((ch>=os_toascii[' '])&&(ch<=os_toascii['~']))
	      ? os_toebcdic[ch]
	      : '.');
d136 8
a143 8
      strcat(buf,tmp);
    }
    strcat(buf,"\n");
    /* if this is the last call then update the ddt_dump thing so that
     * we will move the selection point in the debug window 
     */
    ret+=BIO_write(bio,(char *)buf,strlen(buf));
  }
d145 5
a149 4
  if (trunc > 0) {
    sprintf(buf,"%04x - <SPACES/NULS>\n",len+trunc);
    ret+=BIO_write(bio,(char *)buf,strlen(buf));
  }
d151 2
a152 3
  return(ret);
}

@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d95 1
a95 1
        ch=((unsigned char)*((char *)(s)+i*DUMP_WIDTH+j)) & 0xff;
d104 1
a104 1
      ch=((unsigned char)*((char *)(s)+i*DUMP_WIDTH+j)) & 0xff;
@


1.1
log
@Initial revision
@
text
@d65 1
a65 1
#include "bio.h"
d70 1
a70 4
int BIO_dump(bio,s,len)
BIO *bio;
char *s;
int len;
d105 1
d107 5
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d65 1
a65 1
#include <openssl/bio.h>
a68 1
#define DUMP_WIDTH_LESS_INDENT(i) (DUMP_WIDTH-((i-(i>6?6:i)+3)/4))
d70 12
a81 15
int BIO_dump(BIO *bio, const char *s, int len)
	{
	return BIO_dump_indent(bio, s, len, 0);
	}

int BIO_dump_indent(BIO *bio, const char *s, int len, int indent)
	{
	int ret=0;
	char buf[288+1],tmp[20],str[128+1];
	int i,j,rows,trunc;
	unsigned char ch;
	int dump_width;
	
	trunc=0;
	
d83 2
a84 2
	for(; (len > 0) && ((s[len-1] == ' ') || (s[len-1] == '\0')); len--) 
		trunc++;
d87 30
a116 53
	if (indent < 0)
		indent = 0;
	if (indent)
		{
		if (indent > 128) indent=128;
		memset(str,' ',indent);
		}
	str[indent]='\0';
	
	dump_width=DUMP_WIDTH_LESS_INDENT(indent);
	rows=(len/dump_width);
	if ((rows*dump_width)<len)
		rows++;
	for(i=0;i<rows;i++)
		{
		buf[0]='\0';	/* start with empty string */
		strcpy(buf,str);
		sprintf(tmp,"%04x - ",i*dump_width);
		strcat(buf,tmp);
		for(j=0;j<dump_width;j++)
			{
			if (((i*dump_width)+j)>=len)
				{
				strcat(buf,"   ");
				}
			else
				{
				ch=((unsigned char)*(s+i*dump_width+j)) & 0xff;
				sprintf(tmp,"%02x%c",ch,j==7?'-':' ');
				strcat(buf,tmp);
				}
			}
		strcat(buf,"  ");
		for(j=0;j<dump_width;j++)
			{
			if (((i*dump_width)+j)>=len)
				break;
			ch=((unsigned char)*(s+i*dump_width+j)) & 0xff;
#ifndef CHARSET_EBCDIC
			sprintf(tmp,"%c",((ch>=' ')&&(ch<='~'))?ch:'.');
#else
			sprintf(tmp,"%c",((ch>=os_toascii[' '])&&(ch<=os_toascii['~']))
				? os_toebcdic[ch]
				: '.');
#endif
			strcat(buf,tmp);
			}
		strcat(buf,"\n");
		/* if this is the last call then update the ddt_dump thing so that
		 * we will move the selection point in the debug window 
		 */
		ret+=BIO_write(bio,(char *)buf,strlen(buf));
		}
d118 4
a121 5
	if (trunc > 0)
		{
		sprintf(buf,"%s%04x - <SPACES/NULS>\n",str,len+trunc);
		ret+=BIO_write(bio,(char *)buf,strlen(buf));
		}
d123 3
a125 2
	return(ret);
	}
@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@d107 3
a109 3
		BUF_strlcpy(buf,str,sizeof buf);
		BIO_snprintf(tmp,sizeof tmp,"%04x - ",i*dump_width);
		BUF_strlcat(buf,tmp,sizeof buf);
d114 1
a114 1
				BUF_strlcat(buf,"   ",sizeof buf);
d119 2
a120 3
				BIO_snprintf(tmp,sizeof tmp,"%02x%c",ch,
					 j==7?'-':' ');
				BUF_strlcat(buf,tmp,sizeof buf);
d123 1
a123 1
		BUF_strlcat(buf,"  ",sizeof buf);
d130 1
a130 2
			BIO_snprintf(tmp,sizeof tmp,"%c",
				 ((ch>=' ')&&(ch<='~'))?ch:'.');
d132 3
a134 4
			BIO_snprintf(tmp,sizeof tmp,"%c",
				 ((ch>=os_toascii[' '])&&(ch<=os_toascii['~']))
				 ? os_toebcdic[ch]
				 : '.');
d136 1
a136 1
			BUF_strlcat(buf,tmp,sizeof buf);
d138 1
a138 1
		BUF_strlcat(buf,"\n",sizeof buf);
d147 1
a147 2
		BIO_snprintf(buf,sizeof buf,"%s%04x - <SPACES/NULS>\n",str,
			 len+trunc);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d65 1
a65 1
#include "bio_lcl.h"
d71 1
a71 2
int BIO_dump_cb(int (*cb)(const void *data, size_t len, void *u),
	void *u, const char *s, int len)
d73 1
a73 1
	return BIO_dump_indent_cb(cb, u, s, len, 0);
d76 1
a76 2
int BIO_dump_indent_cb(int (*cb)(const void *data, size_t len, void *u),
	void *u, const char *s, int len, int indent)
d80 1
a80 1
	int i,j,rows,trc;
d83 3
a85 3

	trc=0;

d87 2
a88 2
	for(; (len > 0) && ((s[len-1] == ' ') || (s[len-1] == '\0')); len--)
		trc++;
d99 1
a99 1

d120 1
a120 1
					j==7?'-':' ');
d132 1
a132 1
				((ch>=' ')&&(ch<='~'))?ch:'.');
d135 3
a137 3
				((ch>=os_toascii[' '])&&(ch<=os_toascii['~']))
				? os_toebcdic[ch]
				: '.');
d142 2
a143 2
		/* if this is the last call then update the ddt_dump thing so
		 * that we will move the selection point in the debug window
d145 1
a145 1
		ret+=cb((void *)buf,strlen(buf),u);
d148 1
a148 1
	if (trc > 0)
d151 2
a152 2
			len+trc);
		ret+=cb((void *)buf,strlen(buf),u);
a156 29

#ifndef OPENSSL_NO_FP_API
static int write_fp(const void *data, size_t len, void *fp)
	{
	return UP_fwrite(data, len, 1, fp);
	}
int BIO_dump_fp(FILE *fp, const char *s, int len)
	{
	return BIO_dump_cb(write_fp, fp, s, len);
	}
int BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent)
	{
	return BIO_dump_indent_cb(write_fp, fp, s, len, indent);
	}
#endif

static int write_bio(const void *data, size_t len, void *bp)
	{
	return BIO_write((BIO *)bp, (const char *)data, len);
	}
int BIO_dump(BIO *bp, const char *s, int len)
	{
	return BIO_dump_cb(write_bio, bp, s, len);
	}
int BIO_dump_indent(BIO *bp, const char *s, int len, int indent)
	{
	return BIO_dump_indent_cb(write_bio, bp, s, len, indent);
	}

@


