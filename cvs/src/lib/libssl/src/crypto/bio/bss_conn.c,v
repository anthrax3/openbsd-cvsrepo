head	1.32;
access;
symbols
	OPENBSD_6_0:1.32.0.8
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.32.0.6
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.32.0.4
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.30.0.4
	OPENBSD_5_6_BASE:1.30
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.10.0.24
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.20
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.18
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.10.0.14
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.16
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.10.0.12
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.6
	pre_openssl_0_9_8h:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	openssl_0_9_7j:1.1.1.5
	openssl:1.1.1
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.32
date	2014.11.26.05.37.26;	author bcook;	state Exp;
branches;
next	1.31;
commitid	gSfIogusXsvZaqAh;

1.31
date	2014.11.21.18.15.40;	author deraadt;	state Exp;
branches;
next	1.30;
commitid	0k1n6JNMfJiUyWMy;

1.30
date	2014.07.13.16.03.09;	author beck;	state Exp;
branches;
next	1.29;
commitid	6xdvCwSqBadTW6X3;

1.29
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.28;
commitid	yQEL1wOWIearrW15;

1.28
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.27;
commitid	id8dTrTMtnTn4fqt;

1.27
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	mJUVYpkFBZ0Zv2bG;

1.26
date	2014.05.30.13.00.39;	author beck;	state Exp;
branches;
next	1.25;

1.25
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2014.04.26.18.56.37;	author beck;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.21.11.12.49;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.18.21.41.15;	author tedu;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.18.11.33.33;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.17.20.58.08;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.16.19.42.24;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.15.16.37.21;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.13.23.58.18;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.13.23.31.37;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.05.11.05.07;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.18;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.09;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.41;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.56;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.40;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.35;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.06.27.05.05.31;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	;


desc
@@


1.32
log
@normalize set/getsockopt usage.

Remove the remaining random casts on optval. Fixups for this can be handled by
the portability layer all in once place.

Remove remaining fake socklen_t unions, though beck@@ points out that this also
removes support for socklen_t changing its length at runtime. RIP.

ok tedu@@ beck@@ miod@@ deraadt@@
@
text
@/* $OpenBSD: bss_conn.c,v 1.31 2014/11/21 18:15:40 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <sys/socket.h>

#include <netinet/in.h>

#include <errno.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include <openssl/bio.h>
#include <openssl/buffer.h>
#include <openssl/err.h>

#define SOCKET_PROTOCOL IPPROTO_TCP

typedef struct bio_connect_st {
	int state;

	char *param_hostname;
	char *param_port;
	int nbio;

	unsigned char ip[4];
	unsigned short port;

	struct sockaddr_in them;

	/* int socket; this will be kept in bio->num so that it is
	 * compatible with the bss_sock bio */ 

	/* called when the connection is initially made
	 *  callback(BIO,state,ret);  The callback should return
	 * 'ret'.  state is for compatibility with the ssl info_callback */
	int (*info_callback)(const BIO *bio, int state, int ret);
} BIO_CONNECT;

static int conn_write(BIO *h, const char *buf, int num);
static int conn_read(BIO *h, char *buf, int size);
static int conn_puts(BIO *h, const char *str);
static long conn_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int conn_new(BIO *h);
static int conn_free(BIO *data);
static long conn_callback_ctrl(BIO *h, int cmd, bio_info_cb *);

static int conn_state(BIO *b, BIO_CONNECT *c);
static void conn_close_socket(BIO *data);
BIO_CONNECT *BIO_CONNECT_new(void);
void BIO_CONNECT_free(BIO_CONNECT *a);

static BIO_METHOD methods_connectp = {
	.type = BIO_TYPE_CONNECT,
	.name = "socket connect",
	.bwrite = conn_write,
	.bread = conn_read,
	.bputs = conn_puts,
	.ctrl = conn_ctrl,
	.create = conn_new,
	.destroy = conn_free,
	.callback_ctrl = conn_callback_ctrl
};

static int
conn_state(BIO *b, BIO_CONNECT *c)
{
	int ret = -1, i;
	unsigned long l;
	char *p, *q;
	int (*cb)(const BIO *, int, int) = NULL;

	if (c->info_callback != NULL)
		cb = c->info_callback;

	for (;;) {
		switch (c->state) {
		case BIO_CONN_S_BEFORE:
			p = c->param_hostname;
			if (p == NULL) {
				BIOerr(BIO_F_CONN_STATE, BIO_R_NO_HOSTNAME_SPECIFIED);
				goto exit_loop;
			}
			for (; *p != '\0'; p++) {
				if ((*p == ':') || (*p == '/'))
				break;
			}

			i= *p;
			if ((i == ':') || (i == '/')) {
				*(p++) = '\0';
				if (i == ':') {
					for (q = p; *q; q++)
						if (*q == '/') {
							*q = '\0';
							break;
						}
					free(c->param_port);
					c->param_port = strdup(p);
				}
			}

			if (c->param_port == NULL) {
				BIOerr(BIO_F_CONN_STATE, BIO_R_NO_PORT_SPECIFIED);
				ERR_asprintf_error_data("host=%s",
				    c->param_hostname);
				goto exit_loop;
			}
			c->state = BIO_CONN_S_GET_IP;
			break;

		case BIO_CONN_S_GET_IP:
			if (BIO_get_host_ip(c->param_hostname, &(c->ip[0])) <= 0)
				goto exit_loop;
			c->state = BIO_CONN_S_GET_PORT;
			break;

		case BIO_CONN_S_GET_PORT:
			if (c->param_port == NULL) {
				/* abort(); */
				goto exit_loop;
			} else if (BIO_get_port(c->param_port, &c->port) <= 0)
				goto exit_loop;
			c->state = BIO_CONN_S_CREATE_SOCKET;
			break;

		case BIO_CONN_S_CREATE_SOCKET:
			/* now setup address */
			memset((char *)&c->them, 0, sizeof(c->them));
			c->them.sin_family = AF_INET;
			c->them.sin_port = htons((unsigned short)c->port);
			l = (unsigned long)
			    ((unsigned long)c->ip[0] << 24L)|
			    ((unsigned long)c->ip[1] << 16L)|
			    ((unsigned long)c->ip[2] << 8L)|
			    ((unsigned long)c->ip[3]);
			c->them.sin_addr.s_addr = htonl(l);
			c->state = BIO_CONN_S_CREATE_SOCKET;

			ret = socket(AF_INET, SOCK_STREAM, SOCKET_PROTOCOL);
			if (ret == -1) {
				SYSerr(SYS_F_SOCKET, errno);
				ERR_asprintf_error_data("host=%s:%s",
				    c->param_hostname, c->param_port);
				BIOerr(BIO_F_CONN_STATE,
				    BIO_R_UNABLE_TO_CREATE_SOCKET);
				goto exit_loop;
			}
			b->num = ret;
			c->state = BIO_CONN_S_NBIO;
			break;

		case BIO_CONN_S_NBIO:
			if (c->nbio) {
				if (!BIO_socket_nbio(b->num, 1)) {
					BIOerr(BIO_F_CONN_STATE,
					    BIO_R_ERROR_SETTING_NBIO);
					ERR_asprintf_error_data("host=%s:%s",
					    c->param_hostname, c->param_port);
					goto exit_loop;
				}
			}
			c->state = BIO_CONN_S_CONNECT;

#if defined(SO_KEEPALIVE)
			i = 1;
			i = setsockopt(b->num, SOL_SOCKET, SO_KEEPALIVE, &i, sizeof(i));
			if (i < 0) {
				SYSerr(SYS_F_SOCKET, errno);
				ERR_asprintf_error_data("host=%s:%s",
				    c->param_hostname, c->param_port);
				BIOerr(BIO_F_CONN_STATE, BIO_R_KEEPALIVE);
				goto exit_loop;
			}
#endif
			break;

		case BIO_CONN_S_CONNECT:
			BIO_clear_retry_flags(b);
			ret = connect(b->num,
			(struct sockaddr *)&c->them,
			sizeof(c->them));
			b->retry_reason = 0;
			if (ret < 0) {
				if (BIO_sock_should_retry(ret)) {
					BIO_set_retry_special(b);
					c->state = BIO_CONN_S_BLOCKED_CONNECT;
					b->retry_reason = BIO_RR_CONNECT;
				} else {
					SYSerr(SYS_F_CONNECT, errno);
					ERR_asprintf_error_data("host=%s:%s",
					    c->param_hostname, c->param_port);
					BIOerr(BIO_F_CONN_STATE,
					    BIO_R_CONNECT_ERROR);
				}
				goto exit_loop;
			} else
				c->state = BIO_CONN_S_OK;
			break;

		case BIO_CONN_S_BLOCKED_CONNECT:
			i = BIO_sock_error(b->num);
			if (i) {
				BIO_clear_retry_flags(b);
				SYSerr(SYS_F_CONNECT, i);
				ERR_asprintf_error_data("host=%s:%s",
				    c->param_hostname, c->param_port);
				BIOerr(BIO_F_CONN_STATE,
				    BIO_R_NBIO_CONNECT_ERROR);
				ret = 0;
				goto exit_loop;
			} else
				c->state = BIO_CONN_S_OK;
			break;

		case BIO_CONN_S_OK:
			ret = 1;
			goto exit_loop;
		default:
			/* abort(); */
			goto exit_loop;
		}

		if (cb != NULL) {
			if (!(ret = cb((BIO *)b, c->state, ret)))
				goto end;
		}
	}

	/* Loop does not exit */
exit_loop:
	if (cb != NULL)
		ret = cb((BIO *)b, c->state, ret);
end:
	return (ret);
}

BIO_CONNECT *
BIO_CONNECT_new(void)
{
	BIO_CONNECT *ret;

	if ((ret = malloc(sizeof(BIO_CONNECT))) == NULL)
		return (NULL);
	ret->state = BIO_CONN_S_BEFORE;
	ret->param_hostname = NULL;
	ret->param_port = NULL;
	ret->info_callback = NULL;
	ret->nbio = 0;
	ret->ip[0] = 0;
	ret->ip[1] = 0;
	ret->ip[2] = 0;
	ret->ip[3] = 0;
	ret->port = 0;
	memset((char *)&ret->them, 0, sizeof(ret->them));
	return (ret);
}

void
BIO_CONNECT_free(BIO_CONNECT *a)
{
	if (a == NULL)
		return;

	free(a->param_hostname);
	free(a->param_port);
	free(a);
}

BIO_METHOD *
BIO_s_connect(void)
{
	return (&methods_connectp);
}

static int
conn_new(BIO *bi)
{
	bi->init = 0;
	bi->num = -1;
	bi->flags = 0;
	if ((bi->ptr = (char *)BIO_CONNECT_new()) == NULL)
		return (0);
	else
		return (1);
}

static void
conn_close_socket(BIO *bio)
{
	BIO_CONNECT *c;

	c = (BIO_CONNECT *)bio->ptr;
	if (bio->num != -1) {
		/* Only do a shutdown if things were established */
		if (c->state == BIO_CONN_S_OK)
			shutdown(bio->num, SHUT_RDWR);
		close(bio->num);
		bio->num = -1;
	}
}

static int
conn_free(BIO *a)
{
	BIO_CONNECT *data;

	if (a == NULL)
		return (0);
	data = (BIO_CONNECT *)a->ptr;

	if (a->shutdown) {
		conn_close_socket(a);
		BIO_CONNECT_free(data);
		a->ptr = NULL;
		a->flags = 0;
		a->init = 0;
	}
	return (1);
}

static int
conn_read(BIO *b, char *out, int outl)
{
	int ret = 0;
	BIO_CONNECT *data;

	data = (BIO_CONNECT *)b->ptr;
	if (data->state != BIO_CONN_S_OK) {
		ret = conn_state(b, data);
		if (ret <= 0)
			return (ret);
	}

	if (out != NULL) {
		errno = 0;
		ret = read(b->num, out, outl);
		BIO_clear_retry_flags(b);
		if (ret <= 0) {
			if (BIO_sock_should_retry(ret))
				BIO_set_retry_read(b);
		}
	}
	return (ret);
}

static int
conn_write(BIO *b, const char *in, int inl)
{
	int ret;
	BIO_CONNECT *data;

	data = (BIO_CONNECT *)b->ptr;
	if (data->state != BIO_CONN_S_OK) {
		ret = conn_state(b, data);
		if (ret <= 0)
			return (ret);
	}

	errno = 0;
	ret = write(b->num, in, inl);
	BIO_clear_retry_flags(b);
	if (ret <= 0) {
		if (BIO_sock_should_retry(ret))
			BIO_set_retry_write(b);
	}
	return (ret);
}

static long
conn_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	BIO *dbio;
	int *ip;
	const char **pptr;
	long ret = 1;
	BIO_CONNECT *data;

	data = (BIO_CONNECT *)b->ptr;

	switch (cmd) {
	case BIO_CTRL_RESET:
		ret = 0;
		data->state = BIO_CONN_S_BEFORE;
		conn_close_socket(b);
		b->flags = 0;
		break;
	case BIO_C_DO_STATE_MACHINE:
		/* use this one to start the connection */
		if (data->state != BIO_CONN_S_OK)
			ret = (long)conn_state(b, data);
		else
			ret = 1;
		break;
	case BIO_C_GET_CONNECT:
		if (ptr != NULL) {
			pptr = (const char **)ptr;
			if (num == 0) {
				*pptr = data->param_hostname;

			} else if (num == 1) {
				*pptr = data->param_port;
			} else if (num == 2) {
				*pptr = (char *)&(data->ip[0]);
			} else if (num == 3) {
				*((int *)ptr) = data->port;
			}
			if ((!b->init) || (ptr == NULL))
				*pptr = "not initialized";
			ret = 1;
		}
		break;
	case BIO_C_SET_CONNECT:
		if (ptr != NULL) {
			b->init = 1;
			if (num == 0) {
				free(data->param_hostname);
				data->param_hostname = strdup(ptr);
			} else if (num == 1) {
				free(data->param_port);
				data->param_port = strdup(ptr);
			} else if (num == 2) {
				unsigned char *p = ptr;
				free(data->param_hostname);
				if (asprintf(&data->param_hostname,
					"%u.%u.%u.%u", p[0], p[1],
					p[2], p[3]) == -1)
					data->param_hostname = NULL;
				memcpy(&(data->ip[0]), ptr, 4);
			} else if (num == 3) {
				free(data->param_port);
				data->port= *(int *)ptr;
				if (asprintf(&data->param_port, "%d",
					data->port) == -1)
					data->param_port = NULL;
			}
		}
		break;
	case BIO_C_SET_NBIO:
		data->nbio = (int)num;
		break;
	case BIO_C_GET_FD:
		if (b->init) {
			ip = (int *)ptr;
			if (ip != NULL)
				*ip = b->num;
			ret = b->num;
		} else
			ret = -1;
		break;
	case BIO_CTRL_GET_CLOSE:
		ret = b->shutdown;
		break;
	case BIO_CTRL_SET_CLOSE:
		b->shutdown = (int)num;
		break;
	case BIO_CTRL_PENDING:
	case BIO_CTRL_WPENDING:
		ret = 0;
		break;
	case BIO_CTRL_FLUSH:
		break;
	case BIO_CTRL_DUP:
		{
			dbio = (BIO *)ptr;
			if (data->param_port)
				BIO_set_conn_port(dbio, data->param_port);
			if (data->param_hostname)
				BIO_set_conn_hostname(dbio,
				    data->param_hostname);
			BIO_set_nbio(dbio, data->nbio);
			/* FIXME: the cast of the function seems unlikely to be a good idea */
			(void)BIO_set_info_callback(dbio,
			    (bio_info_cb *)data->info_callback);
		}
		break;
	case BIO_CTRL_SET_CALLBACK:
		{
#if 0 /* FIXME: Should this be used?  -- Richard Levitte */
			BIOerr(BIO_F_CONN_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
			ret = -1;
#else
			ret = 0;
#endif
		}
		break;
	case BIO_CTRL_GET_CALLBACK:
		{
			int (**fptr)(const BIO *bio, int state, int xret);

			fptr = (int (**)(const BIO *bio, int state, int xret))ptr;
			*fptr = data->info_callback;
		}
		break;
	default:
		ret = 0;
		break;
	}
	return (ret);
}

static long
conn_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	long ret = 1;
	BIO_CONNECT *data;

	data = (BIO_CONNECT *)b->ptr;

	switch (cmd) {
	case BIO_CTRL_SET_CALLBACK:
		{
			data->info_callback = (int (*)(const struct bio_st *, int, int))fp;
		}
		break;
	default:
		ret = 0;
		break;
	}
	return (ret);
}

static int
conn_puts(BIO *bp, const char *str)
{
	int n, ret;

	n = strlen(str);
	ret = conn_write(bp, str, n);
	return (ret);
}

BIO *
BIO_new_connect(char *str)
{
	BIO *ret;

	ret = BIO_new(BIO_s_connect());
	if (ret == NULL)
		return (NULL);
	if (BIO_set_conn_hostname(ret, str))
		return (ret);
	else {
		BIO_free(ret);
		return (NULL);
	}
}

@


1.31
log
@MPE support, begone.  ok tedu
@
text
@d1 1
a1 1
/* $OpenBSD: bss_conn.c,v 1.30 2014/07/13 16:03:09 beck Exp $ */
d223 1
a223 1
			i = setsockopt(b->num, SOL_SOCKET, SO_KEEPALIVE,(char *)&i, sizeof(i));
@


1.30
log
@The bell tolls for BUF_strdup - Start the migration to using
intrinsics. This is the easy ones, a few left to check one at
a time.
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_conn.c,v 1.29 2014/07/11 08:44:47 jsing Exp $ */
d221 1
a221 1
#if defined(SO_KEEPALIVE) && !defined(OPENSSL_SYS_MPE)
@


1.29
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_conn.c,v 1.28 2014/07/10 13:58:22 jsing Exp $ */
d155 1
a155 1
					c->param_port = BUF_strdup(p);
d474 1
a474 1
				data->param_hostname = BUF_strdup(ptr);
d477 1
a477 1
				data->param_port = BUF_strdup(ptr);
@


1.28
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_conn.c,v 1.27 2014/06/12 15:49:28 deraadt Exp $ */
a68 1
#include "cryptlib.h"
d70 2
@


1.27
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 6
d66 1
a66 1
#include <errno.h>
d68 1
a70 4
#include <netdb.h>
#include <sys/socket.h>
#include <netinet/in.h>

@


1.26
log
@Fix some more nasty stringyness in here by using asprintf instead of cruft.
gets rid of the second last use of the awful DECIMAL_SIZE.
@
text
@d1 1
a1 1
/* crypto/bio/bss_conn.c */
@


1.25
log
@more: no need for null check before free
ok tedu guenther
@
text
@a474 1
				char buf[16];
a475 3

				snprintf(buf, sizeof buf, "%d.%d.%d.%d",
				    p[0], p[1], p[2], p[3]);
d477 4
a480 1
				data->param_hostname = BUF_strdup(buf);
a482 4
				char buf[DECIMAL_SIZE(int) + 1];

				snprintf(buf, sizeof buf, "%d",
				    *(int *)ptr);
a483 1
				data->param_port = BUF_strdup(buf);
d485 3
@


1.24
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d150 1
a150 2
					if (c->param_port != NULL)
						free(c->param_port);
d317 2
a318 4
	if (a->param_hostname != NULL)
		free(a->param_hostname);
	if (a->param_port != NULL)
		free(a->param_port);
d469 1
a469 2
				if (data->param_hostname != NULL)
					free(data->param_hostname);
d472 1
a472 2
				if (data->param_port != NULL)
					free(data->param_port);
d480 1
a480 2
				if (data->param_hostname != NULL)
					free(data->param_hostname);
d488 1
a488 2
				if (data->param_port != NULL)
					free(data->param_port);
@


1.23
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d106 9
a114 10
	BIO_TYPE_CONNECT,
	"socket connect",
	conn_write,
	conn_read,
	conn_puts,
	NULL, /* connect_gets, */
	conn_ctrl,
	conn_new,
	conn_free,
	conn_callback_ctrl,
@


1.22
log
@Bring malloc/calloc/realloc sequences to modern standard
ok guenther
@
text
@d159 2
a160 1
				ERR_add_error_data(2, "host=", c->param_hostname);
d197 2
a198 2
				ERR_add_error_data(4, "host=",
				    c->param_hostname, ":", c->param_port);
d212 2
a213 3
					ERR_add_error_data(4, "host=",
					    c->param_hostname, ":",
					    c->param_port);
d224 2
a225 2
				ERR_add_error_data(4, "host=",
				    c->param_hostname, ":", c->param_port);
d245 2
a246 3
					ERR_add_error_data(4, "host=",
					    c->param_hostname, ":",
					    c->param_port);
d260 2
a261 2
				ERR_add_error_data(4, "host=",
				    c->param_hostname, ":", c->param_port);
@


1.21
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d298 1
a298 1
	if ((ret = (BIO_CONNECT *)malloc(sizeof(BIO_CONNECT))) == NULL)
@


1.20
log
@unifdef NO_SOCK
@
text
@d485 1
a485 1
				(void) snprintf(buf, sizeof buf, "%d.%d.%d.%d",
d494 1
a494 1
				(void) snprintf(buf, sizeof buf, "%d",
@


1.19
log
@unistd.h for protos where needed
@
text
@a67 1
#ifndef OPENSSL_NO_SOCK
a612 1
#endif
@


1.18
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d61 1
@


1.17
log
@some KNF cleanup following the script
@
text
@a60 1
#define USE_SOCKETS
d63 3
@


1.16
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d291 2
a292 2
BIO_CONNECT
*BIO_CONNECT_new(void)
d325 2
a326 2
BIO_METHOD
*BIO_s_connect(void)
d595 2
a596 2
BIO
*BIO_new_connect(char *str)
@


1.15
log
@> As I walk through the valley of the shadow of death
> I take a look at my life and realize there's nothin' left
> Cause I've been blasting and laughing so long,
> That even my mama thinks that my mind is gone
Remove even more unspeakable evil being perpetuated in the name of VMS.
(and lesser evils done in the name of others.)
ok miod
@
text
@d150 1
a150 1
						OPENSSL_free(c->param_port);
d296 1
a296 1
	if ((ret = (BIO_CONNECT *)OPENSSL_malloc(sizeof(BIO_CONNECT))) == NULL)
d319 1
a319 1
		OPENSSL_free(a->param_hostname);
d321 2
a322 2
		OPENSSL_free(a->param_port);
	OPENSSL_free(a);
d473 1
a473 1
					OPENSSL_free(data->param_hostname);
d477 1
a477 1
					OPENSSL_free(data->param_port);
d486 1
a486 1
					OPENSSL_free(data->param_hostname);
d495 1
a495 1
					OPENSSL_free(data->param_port);
@


1.14
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a66 3
#ifdef OPENSSL_SYS_WIN16
#define SOCKET_PROTOCOL 0 /* more microsoft stupidity */
#else
a67 7
#endif

#if (defined(OPENSSL_SYS_VMS) && __VMS_VER < 70000000)
/* FIONBIO used as a switch to enable ioctl, and that isn't in VMS < 7.0 */
#undef FIONBIO
#endif

@


1.13
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d79 1
a79 2
typedef struct bio_connect_st
	{
d97 2
a98 2
	int (*info_callback)(const BIO *bio,int state,int ret);
	} BIO_CONNECT;
d110 1
a110 1
BIO_CONNECT *BIO_CONNECT_new(void );
d113 1
a113 2
static BIO_METHOD methods_connectp=
	{
d124 1
a124 1
	};
d126 4
a129 3
static int conn_state(BIO *b, BIO_CONNECT *c)
	{
	int ret= -1,i;
d131 2
a132 2
	char *p,*q;
	int (*cb)(const BIO *,int,int)=NULL;
d135 1
a135 1
		cb=c->info_callback;
d137 2
a138 4
	for (;;)
		{
		switch (c->state)
			{
d140 3
a142 4
			p=c->param_hostname;
			if (p == NULL)
				{
				BIOerr(BIO_F_CONN_STATE,BIO_R_NO_HOSTNAME_SPECIFIED);
d144 5
a148 5
				}
			for ( ; *p != '\0'; p++)
				{
				if ((*p == ':') || (*p == '/')) break;
				}
d151 6
a156 10
			if ((i == ':') || (i == '/'))
				{

				*(p++)='\0';
				if (i == ':')
					{
					for (q=p; *q; q++)
						if (*q == '/')
							{
							*q='\0';
d158 1
a158 1
							}
d161 1
a161 2
					c->param_port=BUF_strdup(p);
					}
d163 1
d165 3
a167 4
			if (c->param_port == NULL)
				{
				BIOerr(BIO_F_CONN_STATE,BIO_R_NO_PORT_SPECIFIED);
				ERR_add_error_data(2,"host=",c->param_hostname);
d169 2
a170 2
				}
			c->state=BIO_CONN_S_GET_IP;
d174 1
a174 1
			if (BIO_get_host_ip(c->param_hostname,&(c->ip[0])) <= 0)
d176 1
a176 1
			c->state=BIO_CONN_S_GET_PORT;
d180 1
a180 2
			if (c->param_port == NULL)
				{
d183 1
a183 2
				}
			else if (BIO_get_port(c->param_port,&c->port) <= 0)
d185 1
a185 1
			c->state=BIO_CONN_S_CREATE_SOCKET;
d190 18
a207 18
			memset((char *)&c->them,0,sizeof(c->them));
			c->them.sin_family=AF_INET;
			c->them.sin_port=htons((unsigned short)c->port);
			l=(unsigned long)
				((unsigned long)c->ip[0]<<24L)|
				((unsigned long)c->ip[1]<<16L)|
				((unsigned long)c->ip[2]<< 8L)|
				((unsigned long)c->ip[3]);
			c->them.sin_addr.s_addr=htonl(l);
			c->state=BIO_CONN_S_CREATE_SOCKET;

			ret=socket(AF_INET,SOCK_STREAM,SOCKET_PROTOCOL);
			if (ret == -1)
				{
				SYSerr(SYS_F_SOCKET,errno);
				ERR_add_error_data(4,"host=",c->param_hostname,
					":",c->param_port);
				BIOerr(BIO_F_CONN_STATE,BIO_R_UNABLE_TO_CREATE_SOCKET);
d209 3
a211 3
				}
			b->num=ret;
			c->state=BIO_CONN_S_NBIO;
d215 7
a221 8
			if (c->nbio)
				{
				if (!BIO_socket_nbio(b->num,1))
					{
					BIOerr(BIO_F_CONN_STATE,BIO_R_ERROR_SETTING_NBIO);
					ERR_add_error_data(4,"host=",
						c->param_hostname,
						":",c->param_port);
a222 1
					}
d224 2
a225 1
			c->state=BIO_CONN_S_CONNECT;
d228 7
a234 8
			i=1;
			i=setsockopt(b->num,SOL_SOCKET,SO_KEEPALIVE,(char *)&i,sizeof(i));
			if (i < 0)
				{
				SYSerr(SYS_F_SOCKET,errno);
				ERR_add_error_data(4,"host=",c->param_hostname,
					":",c->param_port);
				BIOerr(BIO_F_CONN_STATE,BIO_R_KEEPALIVE);
d236 1
a236 1
				}
d242 6
a247 8
			ret=connect(b->num,
				(struct sockaddr *)&c->them,
				sizeof(c->them));
			b->retry_reason=0;
			if (ret < 0)
				{
				if (BIO_sock_should_retry(ret))
					{
d249 10
a258 11
					c->state=BIO_CONN_S_BLOCKED_CONNECT;
					b->retry_reason=BIO_RR_CONNECT;
					}
				else
					{
					SYSerr(SYS_F_CONNECT,errno);
					ERR_add_error_data(4,"host=",
						c->param_hostname,
						":",c->param_port);
					BIOerr(BIO_F_CONN_STATE,BIO_R_CONNECT_ERROR);
					}
d260 2
a261 3
				}
			else
				c->state=BIO_CONN_S_OK;
d265 2
a266 3
			i=BIO_sock_error(b->num);
			if (i)
				{
d268 6
a273 6
				SYSerr(SYS_F_CONNECT,i);
				ERR_add_error_data(4,"host=",
					c->param_hostname,
					":",c->param_port);
				BIOerr(BIO_F_CONN_STATE,BIO_R_NBIO_CONNECT_ERROR);
				ret=0;
d275 2
a276 3
				}
			else
				c->state=BIO_CONN_S_OK;
d280 1
a280 1
			ret=1;
d285 1
a285 1
			}
d287 2
a288 3
		if (cb != NULL)
			{
			if (!(ret=cb((BIO *)b,c->state,ret)))
a289 1
			}
d291 1
d296 1
a296 1
		ret=cb((BIO *)b,c->state,ret);
d298 2
a299 2
	return(ret);
	}
d301 3
a303 2
BIO_CONNECT *BIO_CONNECT_new(void)
	{
d306 21
a326 20
	if ((ret=(BIO_CONNECT *)OPENSSL_malloc(sizeof(BIO_CONNECT))) == NULL)
		return(NULL);
	ret->state=BIO_CONN_S_BEFORE;
	ret->param_hostname=NULL;
	ret->param_port=NULL;
	ret->info_callback=NULL;
	ret->nbio=0;
	ret->ip[0]=0;
	ret->ip[1]=0;
	ret->ip[2]=0;
	ret->ip[3]=0;
	ret->port=0;
	memset((char *)&ret->them,0,sizeof(ret->them));
	return(ret);
	}

void BIO_CONNECT_free(BIO_CONNECT *a)
	{
	if(a == NULL)
	    return;
d333 1
a333 6
	}

BIO_METHOD *BIO_s_connect(void)
	{
	return(&methods_connectp);
	}
d335 14
a348 7
static int conn_new(BIO *bi)
	{
	bi->init=0;
	bi->num=-1;
	bi->flags=0;
	if ((bi->ptr=(char *)BIO_CONNECT_new()) == NULL)
		return(0);
d350 2
a351 2
		return(1);
	}
d353 3
a355 2
static void conn_close_socket(BIO *bio)
	{
d358 2
a359 3
	c=(BIO_CONNECT *)bio->ptr;
	if (bio->num != -1)
		{
d364 1
a364 2
		bio->num=-1;
		}
d366 1
d368 3
a370 2
static int conn_free(BIO *a)
	{
d373 5
a377 5
	if (a == NULL) return(0);
	data=(BIO_CONNECT *)a->ptr;
	 
	if (a->shutdown)
		{
d380 11
a390 10
		a->ptr=NULL;
		a->flags=0;
		a->init=0;
		}
	return(1);
	}
	
static int conn_read(BIO *b, char *out, int outl)
	{
	int ret=0;
d393 3
a395 4
	data=(BIO_CONNECT *)b->ptr;
	if (data->state != BIO_CONN_S_OK)
		{
		ret=conn_state(b,data);
d397 2
a398 2
				return(ret);
		}
d400 1
a400 2
	if (out != NULL)
		{
d402 1
a402 1
		ret=read(b->num,out,outl);
d404 1
a404 2
		if (ret <= 0)
			{
a406 1
			}
a407 1
	return(ret);
d409 2
d412 3
a414 2
static int conn_write(BIO *b, const char *in, int inl)
	{
d418 6
a423 6
	data=(BIO_CONNECT *)b->ptr;
	if (data->state != BIO_CONN_S_OK)
		{
		ret=conn_state(b,data);
		if (ret <= 0) return(ret);
		}
d426 1
a426 1
	ret=write(b->num,in,inl);
d428 1
a428 2
	if (ret <= 0)
		{
a430 2
		}
	return(ret);
d432 2
d435 3
a437 2
static long conn_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
d441 1
a441 1
	long ret=1;
d444 1
a444 1
	data=(BIO_CONNECT *)b->ptr;
d446 1
a446 2
	switch (cmd)
		{
d448 2
a449 2
		ret=0;
		data->state=BIO_CONN_S_BEFORE;
d451 1
a451 1
		b->flags=0;
d456 1
a456 1
			ret=(long)conn_state(b,data);
d458 1
a458 1
			ret=1;
d461 12
a472 20
		if (ptr != NULL)
			{
			pptr=(const char **)ptr;
			if (num == 0)
				{
				*pptr=data->param_hostname;

				}
			else if (num == 1)
				{
				*pptr=data->param_port;
				}
			else if (num == 2)
				{
				*pptr= (char *)&(data->ip[0]);
				}
			else if (num == 3)
				{
				*((int *)ptr)=data->port;
				}
d474 3
a476 3
				*pptr="not initialized";
			ret=1;
			}
d479 3
a481 5
		if (ptr != NULL)
			{
			b->init=1;
			if (num == 0)
				{
d484 2
a485 4
				data->param_hostname=BUF_strdup(ptr);
				}
			else if (num == 1)
				{
d488 2
a489 4
				data->param_port=BUF_strdup(ptr);
				}
			else if (num == 2)
				{
d493 2
a494 2
				(void) snprintf(buf,sizeof buf,"%d.%d.%d.%d",
					     p[0],p[1],p[2],p[3]);
d497 4
a500 6
				data->param_hostname=BUF_strdup(buf);
				memcpy(&(data->ip[0]),ptr,4);
				}
			else if (num == 3)
				{
				char buf[DECIMAL_SIZE(int)+1];
d502 2
a503 1
				(void) snprintf(buf,sizeof buf,"%d",*(int *)ptr);
d506 1
a506 1
				data->param_port=BUF_strdup(buf);
a507 1
				}
d509 1
d512 1
a512 1
		data->nbio=(int)num;
d515 2
a516 3
		if (b->init)
			{
			ip=(int *)ptr;
d518 4
a521 5
				*ip=b->num;
			ret=b->num;
			}
		else
			ret= -1;
d524 1
a524 1
		ret=b->shutdown;
d527 1
a527 1
		b->shutdown=(int)num;
d531 1
a531 1
		ret=0;
d537 10
a546 8
		dbio=(BIO *)ptr;
		if (data->param_port)
			BIO_set_conn_port(dbio,data->param_port);
		if (data->param_hostname)
			BIO_set_conn_hostname(dbio,data->param_hostname);
		BIO_set_nbio(dbio,data->nbio);
		/* FIXME: the cast of the function seems unlikely to be a good idea */
                (void)BIO_set_info_callback(dbio,(bio_info_cb *)data->info_callback);
d552 2
a553 2
		BIOerr(BIO_F_CONN_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		ret = -1;
d555 1
a555 1
		ret=0;
d561 1
a561 1
		int (**fptr)(const BIO *bio,int state,int xret);
d563 2
a564 2
		fptr=(int (**)(const BIO *bio,int state,int xret))ptr;
		*fptr=data->info_callback;
d568 1
a568 1
		ret=0;
a569 2
		}
	return(ret);
d571 2
d574 4
a577 3
static long conn_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;
d580 1
a580 1
	data=(BIO_CONNECT *)b->ptr;
d582 1
a582 2
	switch (cmd)
		{
d585 1
a585 1
		data->info_callback=(int (*)(const struct bio_st *, int, int))fp;
d589 1
a589 1
		ret=0;
a590 2
		}
	return(ret);
d592 2
d595 9
a603 8
static int conn_puts(BIO *bp, const char *str)
	{
	int n,ret;

	n=strlen(str);
	ret=conn_write(bp,str,n);
	return(ret);
	}
d605 3
a607 2
BIO *BIO_new_connect(char *str)
	{
d610 6
a615 6
	ret=BIO_new(BIO_s_connect());
	if (ret == NULL) return(NULL);
	if (BIO_set_conn_hostname(ret,str))
		return(ret);
	else
		{
d617 1
a617 2
		return(NULL);
		}
d619 1
a621 1

@


1.12
log
@Use shutdown(s, SHUT_RDWR) instead of shutdown(s, 2).

ok beck deraadt
@
text
@d524 1
a524 1
				BIO_snprintf(buf,sizeof buf,"%d.%d.%d.%d",
d535 1
a535 1
				BIO_snprintf(buf,sizeof buf,"%d",*(int *)ptr);
@


1.11
log
@Remove various horrible socket syscall wrappers, especially SHUTDOWN*
which did shutdown + close, all nasty and surprising.  Use the raw
syscalls that everyone knows the behaviour of.
ok beck matthew
@
text
@d378 1
a378 1
			shutdown(bio->num,2);
@


1.10
log
@resolve conflicts
@
text
@d213 1
a213 1
			if (ret == INVALID_SOCKET)
d215 1
a215 1
				SYSerr(SYS_F_SOCKET,get_last_socket_error());
d244 1
a244 1
				SYSerr(SYS_F_SOCKET,get_last_socket_error());
d269 1
a269 1
					SYSerr(SYS_F_CONNECT,get_last_socket_error());
d361 1
a361 1
	bi->num=INVALID_SOCKET;
d374 1
a374 1
	if (bio->num != INVALID_SOCKET)
d379 2
a380 2
		closesocket(bio->num);
		bio->num=INVALID_SOCKET;
d417 2
a418 2
		clear_socket_error();
		ret=readsocket(b->num,out,outl);
d441 2
a442 2
	clear_socket_error();
	ret=writesocket(b->num,in,inl);
@


1.9
log
@resolve conflicts
@
text
@a58 2
#ifndef OPENSSL_NO_SOCK

d65 2
d133 1
a133 1
	int (*cb)()=NULL;
d593 1
a593 1
		int (**fptr)();
d595 1
a595 1
		fptr=(int (**)())ptr;
@


1.8
log
@merge 0.9.7d
@
text
@d472 1
a472 1
		if (!data->state != BIO_CONN_S_OK)
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d524 2
a525 2
				snprintf(buf,sizeof buf,"%d.%d.%d.%d",
					 p[0],p[1],p[2],p[3]);
d535 1
a535 1
				snprintf(buf,sizeof buf,"%d",*(int *)ptr);
@


1.6
log
@Trivial sprintf() -> snprintf() changes. ok deraadt@@
@
text
@d522 1
a522 1
				char *p = ptr;
d533 1
a533 1
				char buf[16];
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d524 2
a525 2
				sprintf(buf,"%d.%d.%d.%d",
					p[0],p[1],p[2],p[3]);
d535 1
a535 1
				sprintf(buf,"%d",*(int *)ptr);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_SOCK
d67 1
a67 1
#ifdef WIN16
d73 1
a73 1
#if (defined(VMS) && __VMS_VER < 70000000)
d98 1
a98 1
	int (*info_callback)();
d239 1
a239 1
#if defined(SO_KEEPALIVE) && !defined(MPE)
d577 2
a578 1
                (void)BIO_set_info_callback(dbio,data->info_callback);
d617 1
a617 1
		data->info_callback=(int (*)())fp;
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d101 4
a104 4
static int conn_write(BIO *h,char *buf,int num);
static int conn_read(BIO *h,char *buf,int size);
static int conn_puts(BIO *h,char *str);
static long conn_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d107 1
a107 1
static long conn_callback_ctrl(BIO *h,int cmd,void *(*fp)());
d168 1
a168 1
						Free(c->param_port);
d191 1
a191 1
				abort();
d239 1
a239 1
#ifdef SO_KEEPALIVE
d302 1
a302 1
			abort();
d325 1
a325 1
	if ((ret=(BIO_CONNECT *)Malloc(sizeof(BIO_CONNECT))) == NULL)
d347 1
a347 1
		Free(a->param_hostname);
d349 2
a350 2
		Free(a->param_port);
	Free(a);
d429 1
a429 1
static int conn_write(BIO *b, char *in, int inl)
d452 1
a452 1
static long conn_ctrl(BIO *b, int cmd, long num, char *ptr)
d510 1
a510 1
					Free(data->param_hostname);
d516 1
a516 1
					Free(data->param_port);
d522 1
d525 1
a525 1
					ptr[0],ptr[1],ptr[2],ptr[3]);
d527 1
a527 1
					Free(data->param_hostname);
d537 1
a537 1
					Free(data->param_port);
d577 1
a577 1
		(void)BIO_set_info_callback(dbio,(void *(*)())(data->info_callback));
d605 1
a605 1
static long conn_callback_ctrl(BIO *b, int cmd, void *(*fp)())
d626 1
a626 1
static int conn_puts(BIO *bp, char *str)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d93 1
a93 1
	 * compatable with the bss_sock bio */ 
d97 1
a97 1
	 * 'ret'.  state is for compatablity with the ssl info_callback */
d107 1
d125 1
d499 1
a499 1
				*pptr="not initalised";
d569 1
d576 2
a577 1
		(void)BIO_set_info_callback(dbio,data->info_callback);
d580 8
a587 1
		data->info_callback=(int (*)())ptr;
d595 21
@


1.1
log
@Initial revision
@
text
@d65 1
a65 3
#include "bio.h"

/*	BIOerr(BIO_F_WSASTARTUP,BIO_R_WSASTARTUP ); */
d73 6
d88 1
a88 1
	short port;
a93 1
	int error;
a100 1
#ifndef NOPROTO
a106 10
#else
static int conn_write();
static int conn_read();
static int conn_puts();
static long conn_ctrl();
static int conn_new();
static int conn_free();
#endif

#ifndef NOPROTO
a112 9
#else

static int conn_state();
static void conn_close_socket();
BIO_CONNECT *BIO_CONNECT_new();
void BIO_CONNECT_free();

#endif

d126 1
a126 3
static int conn_state(b,c)
BIO *b;
BIO_CONNECT *c;
d144 1
a144 1
				BIOerr(BIO_F_CONN_STATE,BIO_R_NO_HOSTHNAME_SPECIFIED);
d171 1
a171 1
			if (p == NULL)
d187 6
a192 1
			if (BIO_get_port(c->param_port,&c->port) <= 0)
a223 1
#ifdef FIONBIO
d226 1
a226 3
				l=1;
				ret=BIO_socket_ioctl(b->num,FIONBIO,&l);
				if (ret < 0)
a234 1
#endif
d311 1
a311 2
	if (1)
		{
d313 2
a314 3
		if (cb != NULL)
			ret=cb((BIO *)b,c->state,ret);
		}
d319 1
a319 1
BIO_CONNECT *BIO_CONNECT_new()
a335 1
	ret->error=0;
d339 1
a339 2
void BIO_CONNECT_free(a)
BIO_CONNECT *a;
d341 3
d351 1
a351 1
BIO_METHOD *BIO_s_connect()
d356 1
a356 2
static int conn_new(bi)
BIO *bi;
d367 1
a367 2
static void conn_close_socket(bio)
BIO *bio;
a376 1
# ifdef WINDOWS
a377 3
# else
		close(bio->num);
# endif
d382 1
a382 2
static int conn_free(a)
BIO *a;
d400 1
a400 4
static int conn_read(b,out,outl)
BIO *b;
char *out;
int outl;
d416 1
a416 5
#if defined(WINDOWS)
		ret=recv(b->num,out,outl,0);
#else
		ret=read(b->num,out,outl);
#endif
d427 1
a427 4
static int conn_write(b,in,inl)
BIO *b;
char *in;
int inl;
d440 1
a440 5
#if defined(WINDOWS)
	ret=send(b->num,in,inl,0);
#else
	ret=write(b->num,in,inl);
#endif
d450 1
a450 5
static long conn_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
d454 1
a454 1
	char **pptr;
d478 1
a478 1
			pptr=(char **)ptr;
d518 10
a527 1
				memcpy(data->ip,ptr,4);
d529 7
d537 1
d573 1
a573 1
		BIO_set_info_callback(dbio,data->info_callback);
d593 1
a593 3
static int conn_puts(bp,str)
BIO *bp;
char *str;
d602 1
a602 2
BIO *BIO_new_connect(str)
char *str;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
#ifndef OPENSSL_NO_SOCK
d65 1
a65 1
#include <openssl/bio.h>
d67 3
a69 1
#ifdef OPENSSL_SYS_WIN16
a74 6
#if (defined(OPENSSL_SYS_VMS) && __VMS_VER < 70000000)
/* FIONBIO used as a switch to enable ioctl, and that isn't in VMS < 7.0 */
#undef FIONBIO
#endif


d84 1
a84 1
	unsigned short port;
d89 2
a90 1
	 * compatible with the bss_sock bio */ 
d94 2
a95 2
	 * 'ret'.  state is for compatibility with the ssl info_callback */
	int (*info_callback)(const BIO *bio,int state,int ret);
d98 5
a102 4
static int conn_write(BIO *h, const char *buf, int num);
static int conn_read(BIO *h, char *buf, int size);
static int conn_puts(BIO *h, const char *str);
static long conn_ctrl(BIO *h, int cmd, long arg1, void *arg2);
d105 10
a114 1
static long conn_callback_ctrl(BIO *h, int cmd, bio_info_cb *);
d121 9
a140 1
	conn_callback_ctrl,
d143 3
a145 1
static int conn_state(BIO *b, BIO_CONNECT *c)
d163 1
a163 1
				BIOerr(BIO_F_CONN_STATE,BIO_R_NO_HOSTNAME_SPECIFIED);
d185 1
a185 1
						OPENSSL_free(c->param_port);
d190 1
a190 1
			if (c->param_port == NULL)
d206 1
a206 6
			if (c->param_port == NULL)
				{
				/* abort(); */
				goto exit_loop;
				}
			else if (BIO_get_port(c->param_port,&c->port) <= 0)
d238 1
d241 3
a243 1
				if (!BIO_socket_nbio(b->num,1))
d252 1
d255 1
a255 1
#if defined(SO_KEEPALIVE) && !defined(OPENSSL_SYS_MPE)
d318 1
a318 1
			/* abort(); */
d329 2
a330 1
	/* Loop does not exit */
d332 3
a334 2
	if (cb != NULL)
		ret=cb((BIO *)b,c->state,ret);
d339 1
a339 1
BIO_CONNECT *BIO_CONNECT_new(void)
d343 1
a343 1
	if ((ret=(BIO_CONNECT *)OPENSSL_malloc(sizeof(BIO_CONNECT))) == NULL)
d356 1
d360 2
a361 1
void BIO_CONNECT_free(BIO_CONNECT *a)
a362 3
	if(a == NULL)
	    return;

d364 1
a364 1
		OPENSSL_free(a->param_hostname);
d366 2
a367 2
		OPENSSL_free(a->param_port);
	OPENSSL_free(a);
d370 1
a370 1
BIO_METHOD *BIO_s_connect(void)
d375 2
a376 1
static int conn_new(BIO *bi)
d387 2
a388 1
static void conn_close_socket(BIO *bio)
d398 1
d400 3
d407 2
a408 1
static int conn_free(BIO *a)
d426 4
a429 1
static int conn_read(BIO *b, char *out, int outl)
d445 5
a449 1
		ret=readsocket(b->num,out,outl);
d460 4
a463 1
static int conn_write(BIO *b, const char *in, int inl)
d476 5
a480 1
	ret=writesocket(b->num,in,inl);
d490 5
a494 1
static long conn_ctrl(BIO *b, int cmd, long num, void *ptr)
d498 1
a498 1
	const char **pptr;
d522 1
a522 1
			pptr=(const char **)ptr;
d541 1
a541 1
				*pptr="not initialized";
d552 1
a552 1
					OPENSSL_free(data->param_hostname);
d558 1
a558 1
					OPENSSL_free(data->param_port);
d562 1
a562 11
				{
				char buf[16];
				char *p = ptr;

				sprintf(buf,"%d.%d.%d.%d",
					p[0],p[1],p[2],p[3]);
				if (data->param_hostname != NULL)
					OPENSSL_free(data->param_hostname);
				data->param_hostname=BUF_strdup(buf);
				memcpy(&(data->ip[0]),ptr,4);
				}
a563 7
				{
				char buf[16];

				sprintf(buf,"%d",*(int *)ptr);
				if (data->param_port != NULL)
					OPENSSL_free(data->param_port);
				data->param_port=BUF_strdup(buf);
a564 1
				}
a593 1
		{
d600 1
a600 3
		/* FIXME: the cast of the function seems unlikely to be a good idea */
                (void)BIO_set_info_callback(dbio,(bio_info_cb *)data->info_callback);
		}
d603 1
a603 8
		{
#if 0 /* FIXME: Should this be used?  -- Richard Levitte */
		BIOerr(BIO_F_CONN_CTRL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		ret = -1;
#else
		ret=0;
#endif
		}
d620 3
a622 22
static long conn_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;
	BIO_CONNECT *data;

	data=(BIO_CONNECT *)b->ptr;

	switch (cmd)
		{
	case BIO_CTRL_SET_CALLBACK:
		{
		data->info_callback=(int (*)(const struct bio_st *, int, int))fp;
		}
		break;
	default:
		ret=0;
		break;
		}
	return(ret);
	}

static int conn_puts(BIO *bp, const char *str)
d631 2
a632 1
BIO *BIO_new_connect(char *str)
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d522 1
a522 1
				unsigned char *p = ptr;
d533 1
a533 1
				char buf[DECIMAL_SIZE(int)+1];
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@d524 2
a525 2
				BIO_snprintf(buf,sizeof buf,"%d.%d.%d.%d",
					     p[0],p[1],p[2],p[3]);
d535 1
a535 1
				BIO_snprintf(buf,sizeof buf,"%d",*(int *)ptr);
@


1.1.1.5
log
@import of openssl-0.9.7j
@
text
@d472 1
a472 1
		if (data->state != BIO_CONN_S_OK)
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d59 2
a66 2
#ifndef OPENSSL_NO_SOCK

d133 1
a133 1
	int (*cb)(const BIO *,int,int)=NULL;
d593 1
a593 1
		int (**fptr)(const BIO *bio,int state,int xret);
d595 1
a595 1
		fptr=(int (**)(const BIO *bio,int state,int xret))ptr;
@


