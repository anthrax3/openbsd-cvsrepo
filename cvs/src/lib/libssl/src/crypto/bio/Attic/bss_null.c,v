head	1.11;
access;
symbols
	OPENBSD_6_0:1.10.0.10
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.6
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	butholakala:1.4
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.4.0.56
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.52
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.50
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.4.0.46
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.48
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.4.0.44
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.42
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.4.0.40
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.36
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.38
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.4.0.34
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.32
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.30
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.28
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.26
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.24
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.22
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.09.03.11.33.35;	author beck;	state dead;
branches;
next	1.10;
commitid	HnbXxsegngek41U2;

1.10
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yQEL1wOWIearrW15;

1.9
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.8;
commitid	id8dTrTMtnTn4fqt;

1.8
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.15.16.37.22;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.18;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.10;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.41;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.56;	author markus;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: bss_null.c,v 1.10 2014/07/11 08:44:47 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>
#include <string.h>

#include <openssl/bio.h>

static int null_write(BIO *h, const char *buf, int num);
static int null_read(BIO *h, char *buf, int size);
static int null_puts(BIO *h, const char *str);
static int null_gets(BIO *h, char *str, int size);
static long null_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int null_new(BIO *h);
static int null_free(BIO *data);

static BIO_METHOD null_method = {
	.type = BIO_TYPE_NULL,
	.name = "NULL",
	.bwrite = null_write,
	.bread = null_read,
	.bputs = null_puts,
	.bgets = null_gets,
	.ctrl = null_ctrl,
	.create = null_new,
	.destroy = null_free
};

BIO_METHOD *
BIO_s_null(void)
{
	return (&null_method);
}

static int
null_new(BIO *bi)
{
	bi->init = 1;
	bi->num = 0;
	bi->ptr = (NULL);
	return (1);
}

static int
null_free(BIO *a)
{
	if (a == NULL)
		return (0);
	return (1);
}

static int
null_read(BIO *b, char *out, int outl)
{
	return (0);
}

static int
null_write(BIO *b, const char *in, int inl)
{
	return (inl);
}

static long
null_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	long ret = 1;

	switch (cmd) {
	case BIO_CTRL_RESET:
	case BIO_CTRL_EOF:
	case BIO_CTRL_SET:
	case BIO_CTRL_SET_CLOSE:
	case BIO_CTRL_FLUSH:
	case BIO_CTRL_DUP:
		ret = 1;
		break;
	case BIO_CTRL_GET_CLOSE:
	case BIO_CTRL_INFO:
	case BIO_CTRL_GET:
	case BIO_CTRL_PENDING:
	case BIO_CTRL_WPENDING:
	default:
		ret = 0;
		break;
	}
	return (ret);
}

static int
null_gets(BIO *bp, char *buf, int size)
{
	return (0);
}

static int
null_puts(BIO *bp, const char *str)
{
	if (str == NULL)
		return (0);
	return (strlen(str));
}
@


1.10
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_null.c,v 1.9 2014/07/10 13:58:22 jsing Exp $ */
@


1.9
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_null.c,v 1.8 2014/06/12 15:49:28 deraadt Exp $ */
a62 1
#include "cryptlib.h"
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 2
a62 1
#include <errno.h>
@


1.7
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/* crypto/bio/bss_null.c */
@


1.6
log
@some KNF cleanup following the script
@
text
@d73 9
a81 10
	BIO_TYPE_NULL,
	"NULL",
	null_write,
	null_read,
	null_puts,
	null_gets,
	null_ctrl,
	null_new,
	null_free,
	NULL,
@


1.5
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d85 2
a86 2
BIO_METHOD
*BIO_s_null(void)
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d71 2
a72 2
static BIO_METHOD null_method=
	{
d83 1
a83 30
	};

BIO_METHOD *BIO_s_null(void)
	{
	return(&null_method);
	}

static int null_new(BIO *bi)
	{
	bi->init=1;
	bi->num=0;
	bi->ptr=(NULL);
	return(1);
	}

static int null_free(BIO *a)
	{
	if (a == NULL) return(0);
	return(1);
	}
	
static int null_read(BIO *b, char *out, int outl)
	{
	return(0);
	}

static int null_write(BIO *b, const char *in, int inl)
	{
	return(inl);
	}
d85 39
a123 3
static long null_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
	long ret=1;
d125 1
a125 2
	switch (cmd)
		{
d132 1
a132 1
		ret=1;
d140 1
a140 1
		ret=0;
a141 13
		}
	return(ret);
	}

static int null_gets(BIO *bp, char *buf, int size)
	{
	return(0);
	}

static int null_puts(BIO *bp, const char *str)
	{
	if (str == NULL) return(0);
	return(strlen(str));
d143 2
d146 13
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d64 5
a68 5
static int null_write(BIO *h,char *buf,int num);
static int null_read(BIO *h,char *buf,int size);
static int null_puts(BIO *h,char *str);
static int null_gets(BIO *h,char *str,int size);
static long null_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d109 1
a109 1
static int null_write(BIO *b, char *in, int inl)
d114 1
a114 1
static long null_ctrl(BIO *b, int cmd, long num, char *ptr)
d145 1
a145 1
static int null_puts(BIO *bp, char *str)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d82 1
@


1.1
log
@Initial revision
@
text
@d62 1
a62 1
#include "bio.h"
a63 1
#ifndef NOPROTO
a70 10
#else
static int null_write();
static int null_read();
static int null_puts();
static int null_gets();
static long null_ctrl();
static int null_new();
static int null_free();
#endif

d84 1
a84 1
BIO_METHOD *BIO_s_null()
d89 1
a89 2
static int null_new(bi)
BIO *bi;
d97 1
a97 2
static int null_free(a)
BIO *a;
d103 1
a103 4
static int null_read(b,out,outl)
BIO *b;
char *out;
int outl;
d108 1
a108 4
static int null_write(b,in,inl)
BIO *b;
char *in;
int inl;
d113 1
a113 5
static long null_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
d139 1
a139 4
static int null_gets(bp,buf,size)
BIO *bp;
char *buf;
int size;
d144 1
a144 3
static int null_puts(bp,str)
BIO *bp;
char *str;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 1
a62 1
#include <openssl/bio.h>
d64 6
a69 5
static int null_write(BIO *h, const char *buf, int num);
static int null_read(BIO *h, char *buf, int size);
static int null_puts(BIO *h, const char *str);
static int null_gets(BIO *h, char *str, int size);
static long null_ctrl(BIO *h, int cmd, long arg1, void *arg2);
d72 10
a92 1
	NULL,
d95 1
a95 1
BIO_METHOD *BIO_s_null(void)
d100 2
a101 1
static int null_new(BIO *bi)
d109 2
a110 1
static int null_free(BIO *a)
d116 4
a119 1
static int null_read(BIO *b, char *out, int outl)
d124 4
a127 1
static int null_write(BIO *b, const char *in, int inl)
d132 5
a136 1
static long null_ctrl(BIO *b, int cmd, long num, void *ptr)
d162 4
a165 1
static int null_gets(BIO *bp, char *buf, int size)
d170 3
a172 1
static int null_puts(BIO *bp, const char *str)
@

