head	1.6;
access;
symbols
	butholakala:1.4
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.4.0.56
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.52
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.50
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.4.0.46
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.48
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.4.0.44
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.42
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.4.0.40
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.36
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.38
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.4.0.34
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.32
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.30
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.28
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.26
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.24
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.22
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.04.15.17.10.21;	author jsing;	state dead;
branches;
next	1.5;

1.5
date	2014.04.15.16.37.22;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.18;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.10;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.41;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.56;	author markus;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove VMS code.

ok miod@@ beck@@
@
text
@/* crypto/bio/bss_rtcp.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Written by David L. Jones <jonesd@@kcgl1.eng.ohio-state.edu>
 * Date:   22-JUL-1996
 * Revised: 25-SEP-1997		Update for 0.8.1, BIO_CTRL_SET -> BIO_C_SET_FD
 */
/* VMS */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "cryptlib.h"
#include <openssl/bio.h>

#include <iodef.h>		/* VMS IO$_ definitions */
#include <starlet.h>

typedef unsigned short io_channel;
/*************************************************************************/
	struct io_status { short status, count;
	long flags;
};

	struct rpc_msg {		/* Should have member alignment inhibited */
	char channel;			/* 'A'-app data. 'R'-remote client 'G'-global */
	char function;			/* 'G'-get, 'P'-put, 'C'-confirm, 'X'-close */
	unsigned short int length;	/* Amount of data returned or max to return */
	char data[4092];		/* variable data */
};
#define RPC_HDR_SIZE (sizeof(struct rpc_msg) - 4092)

struct rpc_ctx {
	int filled, pos;
	struct rpc_msg msg;
};

static int rtcp_write(BIO *h, const char *buf, int num);
static int rtcp_read(BIO *h, char *buf, int size);
static int rtcp_puts(BIO *h, const char *str);
static int rtcp_gets(BIO *h, char *str, int size);
static long rtcp_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int rtcp_new(BIO *h);
static int rtcp_free(BIO *data);

static BIO_METHOD rtcp_method = {
	BIO_TYPE_FD,
	"RTCP",
	rtcp_write,
	rtcp_read,
	rtcp_puts,
	rtcp_gets,
	rtcp_ctrl,
	rtcp_new,
	rtcp_free,
	NULL,
};

BIO_METHOD
*BIO_s_rtcp(void)
{
	return (&rtcp_method);
}
/*****************************************************************************/
/* Decnet I/O routines.
 */

#ifdef __DECC
#pragma message save
#pragma message disable DOLLARID
#endif

static int get(io_channel chan, char *buffer, int maxlen, int *length)
{
	int status;
	struct io_status iosb;
	status = sys$qiow(0, chan, IO$_READVBLK, &iosb, 0, 0, buffer, maxlen,
	    0, 0, 0, 0 );
	if ((status & 1) == 1)
		status = iosb.status;
	if ((status & 1) == 1 )
		*length = iosb.count;
	return status;
}

static int put(io_channel chan, char *buffer, int length)
{
	int status;
	struct io_status iosb;
	status = sys$qiow ( 0, chan, IO$_WRITEVBLK, &iosb, 0, 0, buffer,
	    length, 0, 0, 0, 0 );
	if ((status & 1) == 1)
		status = iosb.status;
	return status;
}

#ifdef __DECC
#pragma message restore
#endif

/***************************************************************************/

static int
rtcp_new(BIO *bi)
{
	struct rpc_ctx *ctx;
	bi->init = 1;
	bi->num = 0;
	bi->flags = 0;
	bi->ptr = OPENSSL_malloc(sizeof(struct rpc_ctx));
	ctx = (struct rpc_ctx *)bi->ptr;
	ctx->filled = 0;
	ctx->pos = 0;
	return (1);
}

static int
rtcp_free(BIO *a)
{
	if (a == NULL)
		return (0);
	if (a->ptr)
		OPENSSL_free(a->ptr);
	a->ptr = NULL;
	return (1);
}

static int
rtcp_read(BIO *b, char *out, int outl)
{
	int status, length;
	struct rpc_ctx *ctx;
	/*
	 * read data, return existing.
	 */
	ctx = (struct rpc_ctx *)b->ptr;
	if (ctx->pos < ctx->filled) {
		length = ctx->filled - ctx->pos;
		if (length > outl)
			length = outl;
		memmove(out, &ctx->msg.data[ctx->pos], length);
		ctx->pos += length;
		return length;
	}
	/*
	 * Requst more data from R channel.
	 */
	ctx->msg.channel = 'R';
	ctx->msg.function = 'G';
	ctx->msg.length = sizeof(ctx->msg.data);
	status = put(b->num, (char *)&ctx->msg, RPC_HDR_SIZE);
	if ((status & 1) == 0 ) {
		return -1;
	}
	/*
	 * Read.
	 */
	ctx->pos = ctx->filled = 0;
	status = get(b->num, (char *)&ctx->msg, sizeof(ctx->msg), &length);
	if ((status & 1) == 0)
		length = -1;
	if (ctx->msg.channel != 'R' || ctx->msg.function != 'C') {
		length = -1;
	}
	ctx->filled = length - RPC_HDR_SIZE;

	if (ctx->pos < ctx->filled) {
		length = ctx->filled - ctx->pos;
		if (length > outl)
			length = outl;
		memmove(out, ctx->msg.data, length);
		ctx->pos += length;
		return length;
	}

	return length;
}

static int
rtcp_write(BIO *b, const char *in, int inl)
{
	int status, i, segment, length;
	struct rpc_ctx *ctx;
	/*
	 * Output data, send in chunks no larger that sizeof(ctx->msg.data).
	 */
	ctx = (struct rpc_ctx *)b->ptr;
	for (i = 0; i < inl; i += segment) {
		segment = inl - i;
		if (segment > sizeof(ctx->msg.data))
			segment = sizeof(ctx->msg.data);
		ctx->msg.channel = 'R';
		ctx->msg.function = 'P';
		ctx->msg.length = segment;
		memmove(ctx->msg.data, &in[i], segment);
		status = put(b->num, (char *) &ctx->msg,
		    segment + RPC_HDR_SIZE);
		if ((status & 1) == 0) {
			i = -1;
			break;
		}

		status = get(b->num, (char *)&ctx->msg, sizeof(ctx->msg),
		    &length );
		if (((status&1) == 0) || (length < RPC_HDR_SIZE)) {
			i = -1;
			break;
		}
		if ((ctx->msg.channel != 'R') || (ctx->msg.function != 'C')) {
			printf("unexpected response when confirming put %c %c\n",
			ctx->msg.channel, ctx->msg.function );

		}
	}
	return (i);
}

static long
rtcp_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	long ret = 1;

	switch (cmd) {
	case BIO_CTRL_RESET:
	case BIO_CTRL_EOF:
		ret = 1;
		break;
	case BIO_C_SET_FD:
		b->num = num;
		ret = 1;
		break;
	case BIO_CTRL_SET_CLOSE:
	case BIO_CTRL_FLUSH:
	case BIO_CTRL_DUP:
		ret = 1;
		break;
	case BIO_CTRL_GET_CLOSE:
	case BIO_CTRL_INFO:
	case BIO_CTRL_GET:
	case BIO_CTRL_PENDING:
	case BIO_CTRL_WPENDING:
	default:
		ret = 0;
		break;
	}
	return (ret);
}

static int
rtcp_gets(BIO *bp, char *buf, int size)
{
	return (0);
}

static int
rtcp_puts(BIO *bp, const char *str)
{
	int length;
	if (str == NULL)
		return (0);
	length = strlen(str);
	if (length == 0)
		return (0);
	return rtcp_write(bp, str, length);
}
@


1.5
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d76 3
a78 1
struct io_status { short status, count; long flags; };
d80 5
a84 5
struct rpc_msg {		/* Should have member alignment inhibited */
   char channel;		/* 'A'-app data. 'R'-remote client 'G'-global */
   char function;		/* 'G'-get, 'P'-put, 'C'-confirm, 'X'-close */
   unsigned short int length;	/* Amount of data returned or max to return */
   char data[4092];		/* variable data */
d89 2
a90 2
    int filled, pos;
    struct rpc_msg msg;
d93 5
a97 5
static int rtcp_write(BIO *h,const char *buf,int num);
static int rtcp_read(BIO *h,char *buf,int size);
static int rtcp_puts(BIO *h,const char *str);
static int rtcp_gets(BIO *h,char *str,int size);
static long rtcp_ctrl(BIO *h,int cmd,long arg1,void *arg2);
d101 1
a101 2
static BIO_METHOD rtcp_method=
	{
d112 1
a112 1
	};
d114 5
a118 4
BIO_METHOD *BIO_s_rtcp(void)
	{
	return(&rtcp_method);
	}
d128 1
a128 1
static int get ( io_channel chan, char *buffer, int maxlen, int *length )
d130 20
a149 17
    int status;
    struct io_status iosb;
    status = sys$qiow ( 0, chan, IO$_READVBLK, &iosb, 0, 0,
	buffer, maxlen, 0, 0, 0, 0 );
    if ( (status&1) == 1 ) status = iosb.status;
    if ( (status&1) == 1 ) *length = iosb.count;
    return status;
}

static int put ( io_channel chan, char *buffer, int length )
{
    int status;
    struct io_status iosb;
    status = sys$qiow ( 0, chan, IO$_WRITEVBLK, &iosb, 0, 0,
	buffer, length, 0, 0, 0, 0 );
    if ( (status&1) == 1 ) status = iosb.status;
    return status;
d158 2
a159 1
static int rtcp_new(BIO *bi)
d161 3
a163 3
    struct rpc_ctx *ctx;
	bi->init=1;
	bi->num=0;
d165 2
a166 2
	bi->ptr=OPENSSL_malloc(sizeof(struct rpc_ctx));
	ctx = (struct rpc_ctx *) bi->ptr;
d169 1
a169 1
	return(1);
d172 2
a173 1
static int rtcp_free(BIO *a)
d175 4
a178 2
	if (a == NULL) return(0);
	if ( a->ptr ) OPENSSL_free ( a->ptr );
d180 1
a180 1
	return(1);
d182 3
a184 2
	
static int rtcp_read(BIO *b, char *out, int outl)
d186 45
a230 39
    int status, length;
    struct rpc_ctx *ctx;
    /*
     * read data, return existing.
     */
    ctx = (struct rpc_ctx *) b->ptr;
    if ( ctx->pos < ctx->filled ) {
	length = ctx->filled - ctx->pos;
	if ( length > outl ) length = outl;
	memmove ( out, &ctx->msg.data[ctx->pos], length );
	ctx->pos += length;
	return length;
    }
    /*
     * Requst more data from R channel.
     */
    ctx->msg.channel = 'R';
    ctx->msg.function = 'G';
    ctx->msg.length = sizeof(ctx->msg.data);
    status = put ( b->num, (char *) &ctx->msg, RPC_HDR_SIZE );
    if ( (status&1) == 0 ) {
	return -1;
    }
    /*
     * Read.
     */
    ctx->pos = ctx->filled = 0;
    status = get ( b->num, (char *) &ctx->msg, sizeof(ctx->msg), &length );
    if ( (status&1) == 0 ) length = -1;
    if ( ctx->msg.channel != 'R' || ctx->msg.function != 'C' ) {
	length = -1;
    }
    ctx->filled = length - RPC_HDR_SIZE;
    
    if ( ctx->pos < ctx->filled ) {
	length = ctx->filled - ctx->pos;
	if ( length > outl ) length = outl;
	memmove ( out, ctx->msg.data, length );
	ctx->pos += length;
a231 3
    }

    return length;
d234 2
a235 1
static int rtcp_write(BIO *b, const char *in, int inl)
d237 20
a256 15
    int status, i, segment, length;
    struct rpc_ctx *ctx;
    /*
     * Output data, send in chunks no larger that sizeof(ctx->msg.data).
     */
    ctx = (struct rpc_ctx *) b->ptr;
    for ( i = 0; i < inl; i += segment ) {
	segment = inl - i;
	if ( segment > sizeof(ctx->msg.data) ) segment = sizeof(ctx->msg.data);
	ctx->msg.channel = 'R';
	ctx->msg.function = 'P';
	ctx->msg.length = segment;
	memmove ( ctx->msg.data, &in[i], segment );
	status = put ( b->num, (char *) &ctx->msg, segment + RPC_HDR_SIZE );
	if ((status&1) == 0 ) { i = -1; break; }
d258 9
a266 5
	status = get ( b->num, (char *) &ctx->msg, sizeof(ctx->msg), &length );
	if ( ((status&1) == 0) || (length < RPC_HDR_SIZE) ) { i = -1; break; }
	if ( (ctx->msg.channel != 'R') || (ctx->msg.function != 'C') ) {
	   printf("unexpected response when confirming put %c %c\n",
		ctx->msg.channel, ctx->msg.function );
d268 1
d270 1
a270 2
    }
    return(i);
d273 4
a276 3
static long rtcp_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
	long ret=1;
d278 1
a278 2
	switch (cmd)
		{
d286 1
a286 1
	 	break;
d290 1
a290 1
		ret=1;
d298 1
a298 1
		ret=0;
a299 2
		}
	return(ret);
d301 2
d304 5
a308 4
static int rtcp_gets(BIO *bp, char *buf, int size)
	{
	return(0);
	}
d310 2
a311 1
static int rtcp_puts(BIO *bp, const char *str)
d313 7
a319 5
    int length;
    if (str == NULL) return(0);
    length = strlen ( str );
    if ( length == 0 ) return (0);
    return rtcp_write ( bp,str, length );
a320 1

@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d91 1
a91 1
static int rtcp_write(BIO *h,char *buf,int num);
d93 1
a93 1
static int rtcp_puts(BIO *h,char *str);
d95 1
a95 1
static long rtcp_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d159 1
a159 1
	bi->ptr=Malloc(sizeof(struct rpc_ctx));
d169 1
a169 1
	if ( a->ptr ) Free ( a->ptr );
d221 1
a221 1
static int rtcp_write(BIO *b, char *in, int inl)
d250 1
a250 1
static long rtcp_ctrl(BIO *b, int cmd, long num, char *ptr)
d286 1
a286 1
static int rtcp_puts(BIO *bp, char *str)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d110 1
@


1.1
log
@Initial revision
@
text
@d61 1
d69 1
a69 1
#include "bio.h"
d72 2
a73 1
extern int SYS$QIOW();
d112 1
a112 1
BIO_METHOD *BIO_s_rtcp()
d119 6
d129 1
a129 1
    status = SYS$QIOW ( 0, chan, IO$_READVBLK, &iosb, 0, 0,
d140 1
a140 1
    status = SYS$QIOW ( 0, chan, IO$_WRITEVBLK, &iosb, 0, 0,
d145 5
d152 1
a152 2
static int rtcp_new(bi)
BIO *bi;
d165 1
a165 2
static int rtcp_free(a)
BIO *a;
d173 1
a173 4
static int rtcp_read(b,out,outl)
BIO *b;
char *out;
int outl;
d220 1
a220 4
static int rtcp_write(b,in,inl)
BIO *b;
char *in;
int inl;
d249 1
a249 5
static long rtcp_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
d259 1
a259 1
	case BIO_CTRL_SET:
d280 1
a280 4
static int rtcp_gets(bp,buf,size)
BIO *bp;
char *buf;
int size;
d285 1
a285 3
static int rtcp_puts(bp,str)
BIO *bp;
char *str;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a60 1
 * Revised: 25-SEP-1997		Update for 0.8.1, BIO_CTRL_SET -> BIO_C_SET_FD
d68 1
a68 1
#include <openssl/bio.h>
d71 1
a71 2
#include <starlet.h>

d89 1
a89 1
static int rtcp_write(BIO *h,const char *buf,int num);
d91 1
a91 1
static int rtcp_puts(BIO *h,const char *str);
d93 1
a93 1
static long rtcp_ctrl(BIO *h,int cmd,long arg1,void *arg2);
a107 1
	NULL,
d110 1
a110 1
BIO_METHOD *BIO_s_rtcp(void)
a116 6

#ifdef __DECC
#pragma message save
#pragma message disable DOLLARID
#endif

d121 1
a121 1
    status = sys$qiow ( 0, chan, IO$_READVBLK, &iosb, 0, 0,
d132 1
a132 1
    status = sys$qiow ( 0, chan, IO$_WRITEVBLK, &iosb, 0, 0,
a136 5

#ifdef __DECC
#pragma message restore
#endif

d139 2
a140 1
static int rtcp_new(BIO *bi)
d146 1
a146 1
	bi->ptr=OPENSSL_malloc(sizeof(struct rpc_ctx));
d153 2
a154 1
static int rtcp_free(BIO *a)
d157 1
a157 1
	if ( a->ptr ) OPENSSL_free ( a->ptr );
d162 4
a165 1
static int rtcp_read(BIO *b, char *out, int outl)
d212 4
a215 1
static int rtcp_write(BIO *b, const char *in, int inl)
d244 5
a248 1
static long rtcp_ctrl(BIO *b, int cmd, long num, void *ptr)
d258 1
a258 1
	case BIO_C_SET_FD:
d279 4
a282 1
static int rtcp_gets(BIO *bp, char *buf, int size)
d287 3
a289 1
static int rtcp_puts(BIO *bp, const char *str)
@

