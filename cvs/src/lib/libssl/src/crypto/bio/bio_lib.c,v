head	1.22;
access;
symbols
	OPENBSD_6_0:1.22.0.8
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.4
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	butholakala:1.11
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.11.0.8
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2015.02.10.11.22.21;	author jsing;	state Exp;
branches;
next	1.21;
commitid	LaAI4ax0sm4T2bQg;

1.21
date	2014.07.25.06.05.32;	author doug;	state Exp;
branches;
next	1.20;
commitid	DnBLYuKKjvrWeH3R;

1.20
date	2014.07.11.15.40.32;	author miod;	state Exp;
branches;
next	1.19;
commitid	BnGVC00JyzLKtOoq;

1.19
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.18;
commitid	yQEL1wOWIearrW15;

1.18
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.04.21.11.12.49;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.17.21.32.37;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.16.15.05.23;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.15.16.37.21;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.57.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.33;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.08;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.40;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.55;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.39;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.04;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.08;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.35;	author djm;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Remove more IMPLEMENT_STACK_OF noops that have been hiding for the last
15 years.
@
text
@/* $OpenBSD: bio_lib.c,v 1.21 2014/07/25 06:05:32 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>

#include <openssl/bio.h>
#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/stack.h>

BIO *
BIO_new(BIO_METHOD *method)
{
	BIO *ret = NULL;

	ret = malloc(sizeof(BIO));
	if (ret == NULL) {
		BIOerr(BIO_F_BIO_NEW, ERR_R_MALLOC_FAILURE);
		return (NULL);
	}
	if (!BIO_set(ret, method)) {
		free(ret);
		ret = NULL;
	}
	return (ret);
}

int
BIO_set(BIO *bio, BIO_METHOD *method)
{
	bio->method = method;
	bio->callback = NULL;
	bio->cb_arg = NULL;
	bio->init = 0;
	bio->shutdown = 1;
	bio->flags = 0;
	bio->retry_reason = 0;
	bio->num = 0;
	bio->ptr = NULL;
	bio->prev_bio = NULL;
	bio->next_bio = NULL;
	bio->references = 1;
	bio->num_read = 0L;
	bio->num_write = 0L;
	CRYPTO_new_ex_data(CRYPTO_EX_INDEX_BIO, bio, &bio->ex_data);
	if (method->create != NULL)
		if (!method->create(bio)) {
			CRYPTO_free_ex_data(CRYPTO_EX_INDEX_BIO, bio,
			    &bio->ex_data);
			return (0);
		}
	return (1);
}

int
BIO_free(BIO *a)
{
	int i;

	if (a == NULL)
		return (0);

	i = CRYPTO_add(&a->references, -1, CRYPTO_LOCK_BIO);
	if (i > 0)
		return (1);
	if ((a->callback != NULL) &&
	    ((i = (int)a->callback(a, BIO_CB_FREE, NULL, 0, 0L, 1L)) <= 0))
		return (i);

	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_BIO, a, &a->ex_data);

	if (a->method != NULL && a->method->destroy != NULL)
		a->method->destroy(a);
	free(a);
	return (1);
}

void
BIO_vfree(BIO *a)
{
	BIO_free(a);
}

void
BIO_clear_flags(BIO *b, int flags)
{
	b->flags &= ~flags;
}

int
BIO_test_flags(const BIO *b, int flags)
{
	return (b->flags & flags);
}

void
BIO_set_flags(BIO *b, int flags)
{
	b->flags |= flags;
}

long
(*BIO_get_callback(const BIO *b))(struct bio_st *, int, const char *, int,
    long, long)
{
	return b->callback;
}

void
BIO_set_callback(BIO *b, long (*cb)(struct bio_st *, int, const char *, int,
    long, long))
{
	b->callback = cb;
}

void
BIO_set_callback_arg(BIO *b, char *arg)
{
	b->cb_arg = arg;
}

char *
BIO_get_callback_arg(const BIO *b)
{
	return b->cb_arg;
}

const char *
BIO_method_name(const BIO *b)
{
	return b->method->name;
}

int
BIO_method_type(const BIO *b)
{
	return b->method->type;
}

int
BIO_read(BIO *b, void *out, int outl)
{
	int i;
	long (*cb)(BIO *, int, const char *, int, long, long);

	if ((b == NULL) || (b->method == NULL) || (b->method->bread == NULL)) {
		BIOerr(BIO_F_BIO_READ, BIO_R_UNSUPPORTED_METHOD);
		return (-2);
	}

	cb = b->callback;
	if ((cb != NULL) &&
	    ((i = (int)cb(b, BIO_CB_READ, out, outl, 0L, 1L)) <= 0))
		return (i);

	if (!b->init) {
		BIOerr(BIO_F_BIO_READ, BIO_R_UNINITIALIZED);
		return (-2);
	}

	i = b->method->bread(b, out, outl);

	if (i > 0)
		b->num_read += (unsigned long)i;

	if (cb != NULL)
		i = (int)cb(b, BIO_CB_READ|BIO_CB_RETURN, out, outl,
		    0L, (long)i);
	return (i);
}

int
BIO_write(BIO *b, const void *in, int inl)
{
	int i;
	long (*cb)(BIO *, int, const char *, int, long, long);

	if (b == NULL)
		return (0);

	cb = b->callback;
	if ((b->method == NULL) || (b->method->bwrite == NULL)) {
		BIOerr(BIO_F_BIO_WRITE, BIO_R_UNSUPPORTED_METHOD);
		return (-2);
	}

	if ((cb != NULL) &&
	    ((i = (int)cb(b, BIO_CB_WRITE, in, inl, 0L, 1L)) <= 0))
		return (i);

	if (!b->init) {
		BIOerr(BIO_F_BIO_WRITE, BIO_R_UNINITIALIZED);
		return (-2);
	}

	i = b->method->bwrite(b, in, inl);

	if (i > 0)
		b->num_write += (unsigned long)i;

	if (cb != NULL)
		i = (int)cb(b, BIO_CB_WRITE|BIO_CB_RETURN, in, inl,
		    0L, (long)i);
	return (i);
}

int
BIO_puts(BIO *b, const char *in)
{
	int i;
	long (*cb)(BIO *, int, const char *, int, long, long);

	if ((b == NULL) || (b->method == NULL) || (b->method->bputs == NULL)) {
		BIOerr(BIO_F_BIO_PUTS, BIO_R_UNSUPPORTED_METHOD);
		return (-2);
	}

	cb = b->callback;

	if ((cb != NULL) &&
	    ((i = (int)cb(b, BIO_CB_PUTS, in, 0, 0L, 1L)) <= 0))
		return (i);

	if (!b->init) {
		BIOerr(BIO_F_BIO_PUTS, BIO_R_UNINITIALIZED);
		return (-2);
	}

	i = b->method->bputs(b, in);

	if (i > 0)
		b->num_write += (unsigned long)i;

	if (cb != NULL)
		i = (int)cb(b, BIO_CB_PUTS|BIO_CB_RETURN, in, 0, 0L, (long)i);
	return (i);
}

int
BIO_gets(BIO *b, char *in, int inl)
{
	int i;
	long (*cb)(BIO *, int, const char *, int, long, long);

	if ((b == NULL) || (b->method == NULL) || (b->method->bgets == NULL)) {
		BIOerr(BIO_F_BIO_GETS, BIO_R_UNSUPPORTED_METHOD);
		return (-2);
	}

	cb = b->callback;

	if ((cb != NULL) &&
	    ((i = (int)cb(b, BIO_CB_GETS, in, inl, 0L, 1L)) <= 0))
		return (i);

	if (!b->init) {
		BIOerr(BIO_F_BIO_GETS, BIO_R_UNINITIALIZED);
		return (-2);
	}

	i = b->method->bgets(b, in, inl);

	if (cb != NULL)
		i = (int)cb(b, BIO_CB_GETS|BIO_CB_RETURN, in, inl, 0L, (long)i);
	return (i);
}

int
BIO_indent(BIO *b, int indent, int max)
{
	if (indent < 0)
		indent = 0;
	if (indent > max)
		indent = max;
	while (indent--)
		if (BIO_puts(b, " ") != 1)
			return 0;
	return 1;
}

long
BIO_int_ctrl(BIO *b, int cmd, long larg, int iarg)
{
	int i;

	i = iarg;
	return (BIO_ctrl(b, cmd, larg, (char *)&i));
}

char *
BIO_ptr_ctrl(BIO *b, int cmd, long larg)
{
	char *p = NULL;

	if (BIO_ctrl(b, cmd, larg, (char *)&p) <= 0)
		return (NULL);
	else
		return (p);
}

long
BIO_ctrl(BIO *b, int cmd, long larg, void *parg)
{
	long ret;
	long (*cb)(BIO *, int, const char *, int, long, long);

	if (b == NULL)
		return (0);

	if ((b->method == NULL) || (b->method->ctrl == NULL)) {
		BIOerr(BIO_F_BIO_CTRL, BIO_R_UNSUPPORTED_METHOD);
		return (-2);
	}

	cb = b->callback;

	if ((cb != NULL) &&
	    ((ret = cb(b, BIO_CB_CTRL, parg, cmd, larg, 1L)) <= 0))
		return (ret);

	ret = b->method->ctrl(b, cmd, larg, parg);

	if (cb != NULL)
		ret = cb(b, BIO_CB_CTRL|BIO_CB_RETURN, parg, cmd, larg, ret);
	return (ret);
}

long
BIO_callback_ctrl(BIO *b, int cmd,
    void (*fp)(struct bio_st *, int, const char *, int, long, long))
{
	long ret;
	long (*cb)(BIO *, int, const char *, int, long, long);

	if (b == NULL)
		return (0);

	if ((b->method == NULL) || (b->method->callback_ctrl == NULL)) {
		BIOerr(BIO_F_BIO_CALLBACK_CTRL, BIO_R_UNSUPPORTED_METHOD);
		return (-2);
	}

	cb = b->callback;

	if ((cb != NULL) &&
	    ((ret = cb(b, BIO_CB_CTRL, (void *)&fp, cmd, 0, 1L)) <= 0))
		return (ret);

	ret = b->method->callback_ctrl(b, cmd, fp);

	if (cb != NULL)
		ret = cb(b, BIO_CB_CTRL|BIO_CB_RETURN, (void *)&fp, cmd, 0, ret);
	return (ret);
}

/* It is unfortunate to duplicate in functions what the BIO_(w)pending macros
 * do; but those macros have inappropriate return type, and for interfacing
 * from other programming languages, C macros aren't much of a help anyway. */
size_t
BIO_ctrl_pending(BIO *bio)
{
	return BIO_ctrl(bio, BIO_CTRL_PENDING, 0, NULL);
}

size_t
BIO_ctrl_wpending(BIO *bio)
{
	return BIO_ctrl(bio, BIO_CTRL_WPENDING, 0, NULL);
}


/* put the 'bio' on the end of b's list of operators */
BIO *
BIO_push(BIO *b, BIO *bio)
{
	BIO *lb;

	if (b == NULL)
		return (bio);
	lb = b;
	while (lb->next_bio != NULL)
		lb = lb->next_bio;
	lb->next_bio = bio;
	if (bio != NULL)
		bio->prev_bio = lb;
	/* called to do internal processing */
	BIO_ctrl(b, BIO_CTRL_PUSH, 0, lb);
	return (b);
}

/* Remove the first and return the rest */
BIO *
BIO_pop(BIO *b)
{
	BIO *ret;

	if (b == NULL)
		return (NULL);
	ret = b->next_bio;

	BIO_ctrl(b, BIO_CTRL_POP, 0, b);

	if (b->prev_bio != NULL)
		b->prev_bio->next_bio = b->next_bio;
	if (b->next_bio != NULL)
		b->next_bio->prev_bio = b->prev_bio;

	b->next_bio = NULL;
	b->prev_bio = NULL;
	return (ret);
}

BIO *
BIO_get_retry_BIO(BIO *bio, int *reason)
{
	BIO *b, *last;

	b = last = bio;
	for (;;) {
		if (!BIO_should_retry(b))
			break;
		last = b;
		b = b->next_bio;
		if (b == NULL)
			break;
	}
	if (reason != NULL)
		*reason = last->retry_reason;
	return (last);
}

int
BIO_get_retry_reason(BIO *bio)
{
	return (bio->retry_reason);
}

BIO *
BIO_find_type(BIO *bio, int type)
{
	int mt, mask;

	if (!bio)
		return NULL;
	mask = type & 0xff;
	do {
		if (bio->method != NULL) {
			mt = bio->method->type;
			if (!mask) {
				if (mt & type)
					return (bio);
			} else if (mt == type)
				return (bio);
		}
		bio = bio->next_bio;
	} while (bio != NULL);
	return (NULL);
}

BIO *
BIO_next(BIO *b)
{
	if (!b)
		return NULL;
	return b->next_bio;
}

void
BIO_free_all(BIO *bio)
{
	BIO *b;
	int ref;

	while (bio != NULL) {
		b = bio;
		ref = b->references;
		bio = bio->next_bio;
		BIO_free(b);
		/* Since ref count > 1, don't free anyone else. */
		if (ref > 1)
			break;
	}
}

BIO *
BIO_dup_chain(BIO *in)
{
	BIO *ret = NULL, *eoc = NULL, *bio, *new_bio;

	for (bio = in; bio != NULL; bio = bio->next_bio) {
		if ((new_bio = BIO_new(bio->method)) == NULL)
			goto err;
		new_bio->callback = bio->callback;
		new_bio->cb_arg = bio->cb_arg;
		new_bio->init = bio->init;
		new_bio->shutdown = bio->shutdown;
		new_bio->flags = bio->flags;

		/* This will let SSL_s_sock() work with stdin/stdout */
		new_bio->num = bio->num;

		if (!BIO_dup_state(bio, (char *)new_bio)) {
			BIO_free(new_bio);
			goto err;
		}

		/* copy app data */
		if (!CRYPTO_dup_ex_data(CRYPTO_EX_INDEX_BIO,
		    &new_bio->ex_data, &bio->ex_data))
			goto err;

		if (ret == NULL) {
			eoc = new_bio;
			ret = eoc;
		} else {
			BIO_push(eoc, new_bio);
			eoc = new_bio;
		}
	}
	return (ret);
err:
	BIO_free(ret);
	return (NULL);

}

void
BIO_copy_next_retry(BIO *b)
{
	BIO_set_flags(b, BIO_get_retry_flags(b->next_bio));
	b->retry_reason = b->next_bio->retry_reason;
}

int
BIO_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
    CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
{
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_BIO, argl, argp,
	    new_func, dup_func, free_func);
}

int
BIO_set_ex_data(BIO *bio, int idx, void *data)
{
	return (CRYPTO_set_ex_data(&(bio->ex_data), idx, data));
}

void *
BIO_get_ex_data(BIO *bio, int idx)
{
	return (CRYPTO_get_ex_data(&(bio->ex_data), idx));
}

unsigned long
BIO_number_read(BIO *bio)
{
	if (bio)
		return bio->num_read;
	return 0;
}

unsigned long
BIO_number_written(BIO *bio)
{
	if (bio)
		return bio->num_write;
	return 0;
}
@


1.21
log
@BIO_free() returns immediately when the sole input is NULL.
Remove unnecessary NULL check.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_lib.c,v 1.20 2014/07/11 15:40:32 miod Exp $ */
a624 2

IMPLEMENT_STACK_OF(BIO)
@


1.20
log
@Fix a memory leak in BIO_free() which no current BIO can trigger; OpenSSL
PR #3439 via OpenSSL trunk
@
text
@d1 1
a1 1
/* $OpenBSD: bio_lib.c,v 1.19 2014/07/11 08:44:47 jsing Exp $ */
d578 1
a578 2
	if (ret != NULL)
		BIO_free(ret);
@


1.19
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_lib.c,v 1.18 2014/06/12 15:49:28 deraadt Exp $ */
d128 2
a129 3
	if ((a->method == NULL) || (a->method->destroy == NULL))
		return (1);
	a->method->destroy(a);
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 2
a62 1
#include <errno.h>
d64 1
a64 2
#include "cryptlib.h"
#include <openssl/bio.h>
@


1.17
log
@Bring malloc/calloc/realloc sequences to modern standard
ok guenther
@
text
@d1 1
a1 1
/* crypto/bio/bio_lib.c */
@


1.16
log
@kill REF_PRINT/REF_CHECK debugging framework noone would use
ok miod
@
text
@d71 1
a71 1
	ret = (BIO *)malloc(sizeof(BIO));
@


1.15
log
@some KNF cleanup following the script
@
text
@a118 3
#ifdef REF_PRINT
	REF_PRINT("BIO", a);
#endif
a120 6
#ifdef REF_CHECK
	if (i < 0) {
		fprintf(stderr, "BIO_free, bad reference count\n");
		abort();
	}
#endif
@


1.14
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d66 2
a67 2
BIO
*BIO_new(BIO_METHOD *method)
d355 2
a356 2
char
*BIO_ptr_ctrl(BIO *b, int cmd, long larg)
d438 2
a439 2
BIO
*BIO_push(BIO *b, BIO *bio)
d457 2
a458 2
BIO
*BIO_pop(BIO *b)
d478 2
a479 2
BIO
*BIO_get_retry_BIO(BIO *bio, int *reason)
d503 2
a504 2
BIO
*BIO_find_type(BIO *bio, int type)
d525 2
a526 2
BIO
*BIO_next(BIO *b)
d550 2
a551 2
BIO
*BIO_dup_chain(BIO *in)
d614 2
a615 2
void
*BIO_get_ex_data(BIO *bio, int idx)
@


1.13
log
@More KNF.
@
text
@d71 1
a71 1
	ret = (BIO *)OPENSSL_malloc(sizeof(BIO));
d77 1
a77 1
		OPENSSL_free(ret);
d139 1
a139 1
	OPENSSL_free(a);
@


1.12
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d341 2
a342 2
	if (BIO_puts(b, " ") != 1)
		return 0;
d352 1
a352 1
	return (BIO_ctrl(b, cmd, larg,(char *)&i));
d360 1
a360 1
	if (BIO_ctrl(b, cmd, larg,(char *)&p) <= 0)
d411 1
a411 1
	    ((ret = cb(b, BIO_CB_CTRL,(void *)&fp, cmd, 0, 1L)) <= 0))
d417 1
a417 1
		ret = cb(b, BIO_CB_CTRL|BIO_CB_RETURN,(void *)&fp, cmd, 0, ret);
d447 1
a447 1
	lb = lb->next_bio;
d485 3
a487 2
		if (!BIO_should_retry(b)) break;
			last = b;
d556 3
a558 2
		if ((new_bio = BIO_new(bio->method)) == NULL) goto err;
			new_bio->callback = bio->callback;
d567 1
a567 1
		if (!BIO_dup_state(bio,(char *)new_bio)) {
@


1.11
log
@resolve conflicts
@
text
@d66 11
a76 12
BIO *BIO_new(BIO_METHOD *method)
	{
	BIO *ret=NULL;

	ret=(BIO *)OPENSSL_malloc(sizeof(BIO));
	if (ret == NULL)
		{
		BIOerr(BIO_F_BIO_NEW,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
	if (!BIO_set(ret,method))
		{
d78 1
a78 3
		ret=NULL;
		}
	return(ret);
d80 2
d83 17
a99 16
int BIO_set(BIO *bio, BIO_METHOD *method)
	{
	bio->method=method;
	bio->callback=NULL;
	bio->cb_arg=NULL;
	bio->init=0;
	bio->shutdown=1;
	bio->flags=0;
	bio->retry_reason=0;
	bio->num=0;
	bio->ptr=NULL;
	bio->prev_bio=NULL;
	bio->next_bio=NULL;
	bio->references=1;
	bio->num_read=0L;
	bio->num_write=0L;
d102 1
a102 2
		if (!method->create(bio))
			{
d104 5
a108 5
					&bio->ex_data);
			return(0);
			}
	return(1);
	}
d110 3
a112 2
int BIO_free(BIO *a)
	{
d115 2
a116 1
	if (a == NULL) return(0);
d118 1
a118 1
	i=CRYPTO_add(&a->references,-1,CRYPTO_LOCK_BIO);
d120 1
a120 1
	REF_PRINT("BIO",a);
d122 2
a123 1
	if (i > 0) return(1);
d125 2
a126 3
	if (i < 0)
		{
		fprintf(stderr,"BIO_free, bad reference count\n");
d128 1
a128 1
		}
d131 2
a132 2
		((i=(int)a->callback(a,BIO_CB_FREE,NULL,0,0L,1L)) <= 0))
			return(i);
d136 2
a137 1
	if ((a->method == NULL) || (a->method->destroy == NULL)) return(1);
d140 2
a141 2
	return(1);
	}
d143 5
a147 2
void BIO_vfree(BIO *a)
    { BIO_free(a); }
d149 3
a151 2
void BIO_clear_flags(BIO *b, int flags)
	{
d153 1
a153 1
	}
d155 3
a157 2
int	BIO_test_flags(const BIO *b, int flags)
	{
d159 1
a159 1
	}
d161 3
a163 2
void	BIO_set_flags(BIO *b, int flags)
	{
d165 1
a165 1
	}
d167 4
a170 2
long (*BIO_get_callback(const BIO *b))(struct bio_st *,int,const char *,int, long,long)
	{
d172 1
a172 1
	}
d174 4
a177 2
void BIO_set_callback(BIO *b, long (*cb)(struct bio_st *,int,const char *,int, long,long))
	{
d179 1
a179 1
	}
d181 3
a183 2
void BIO_set_callback_arg(BIO *b, char *arg)
	{
d185 1
a185 1
	}
d187 3
a189 2
char * BIO_get_callback_arg(const BIO *b)
	{
d191 1
a191 1
	}
d193 3
a195 2
const char * BIO_method_name(const BIO *b)
	{
d197 1
a197 1
	}
d199 3
a201 2
int BIO_method_type(const BIO *b)
	{
d203 1
a203 1
	}
d205 3
a207 3

int BIO_read(BIO *b, void *out, int outl)
	{
d209 1
a209 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d211 4
a214 5
	if ((b == NULL) || (b->method == NULL) || (b->method->bread == NULL))
		{
		BIOerr(BIO_F_BIO_READ,BIO_R_UNSUPPORTED_METHOD);
		return(-2);
		}
d216 1
a216 1
	cb=b->callback;
d218 2
a219 2
		((i=(int)cb(b,BIO_CB_READ,out,outl,0L,1L)) <= 0))
			return(i);
d221 4
a224 5
	if (!b->init)
		{
		BIOerr(BIO_F_BIO_READ,BIO_R_UNINITIALIZED);
		return(-2);
		}
d226 1
a226 1
	i=b->method->bread(b,out,outl);
d228 2
a229 1
	if (i > 0) b->num_read+=(unsigned long)i;
d232 4
a235 4
		i=(int)cb(b,BIO_CB_READ|BIO_CB_RETURN,out,outl,
			0L,(long)i);
	return(i);
	}
d237 3
a239 2
int BIO_write(BIO *b, const void *in, int inl)
	{
d241 1
a241 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d244 1
a244 1
		return(0);
d246 5
a250 6
	cb=b->callback;
	if ((b->method == NULL) || (b->method->bwrite == NULL))
		{
		BIOerr(BIO_F_BIO_WRITE,BIO_R_UNSUPPORTED_METHOD);
		return(-2);
		}
d253 2
a254 2
		((i=(int)cb(b,BIO_CB_WRITE,in,inl,0L,1L)) <= 0))
			return(i);
d256 4
a259 5
	if (!b->init)
		{
		BIOerr(BIO_F_BIO_WRITE,BIO_R_UNINITIALIZED);
		return(-2);
		}
d261 1
a261 1
	i=b->method->bwrite(b,in,inl);
d263 2
a264 1
	if (i > 0) b->num_write+=(unsigned long)i;
d267 4
a270 4
		i=(int)cb(b,BIO_CB_WRITE|BIO_CB_RETURN,in,inl,
			0L,(long)i);
	return(i);
	}
d272 3
a274 2
int BIO_puts(BIO *b, const char *in)
	{
d276 1
a276 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d278 4
a281 5
	if ((b == NULL) || (b->method == NULL) || (b->method->bputs == NULL))
		{
		BIOerr(BIO_F_BIO_PUTS,BIO_R_UNSUPPORTED_METHOD);
		return(-2);
		}
d283 1
a283 1
	cb=b->callback;
d286 2
a287 2
		((i=(int)cb(b,BIO_CB_PUTS,in,0,0L,1L)) <= 0))
			return(i);
d289 4
a292 5
	if (!b->init)
		{
		BIOerr(BIO_F_BIO_PUTS,BIO_R_UNINITIALIZED);
		return(-2);
		}
d294 1
a294 1
	i=b->method->bputs(b,in);
d296 2
a297 1
	if (i > 0) b->num_write+=(unsigned long)i;
d300 3
a302 4
		i=(int)cb(b,BIO_CB_PUTS|BIO_CB_RETURN,in,0,
			0L,(long)i);
	return(i);
	}
d304 3
a306 2
int BIO_gets(BIO *b, char *in, int inl)
	{
d308 1
a308 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d310 4
a313 5
	if ((b == NULL) || (b->method == NULL) || (b->method->bgets == NULL))
		{
		BIOerr(BIO_F_BIO_GETS,BIO_R_UNSUPPORTED_METHOD);
		return(-2);
		}
d315 1
a315 1
	cb=b->callback;
d318 2
a319 2
		((i=(int)cb(b,BIO_CB_GETS,in,inl,0L,1L)) <= 0))
			return(i);
d321 4
a324 5
	if (!b->init)
		{
		BIOerr(BIO_F_BIO_GETS,BIO_R_UNINITIALIZED);
		return(-2);
		}
d326 1
a326 1
	i=b->method->bgets(b,in,inl);
d329 3
a331 4
		i=(int)cb(b,BIO_CB_GETS|BIO_CB_RETURN,in,inl,
			0L,(long)i);
	return(i);
	}
d333 10
a342 9
int BIO_indent(BIO *b,int indent,int max)
	{
	if(indent < 0)
		indent=0;
	if(indent > max)
		indent=max;
	while(indent--)
		if(BIO_puts(b," ") != 1)
			return 0;
d344 1
a344 1
	}
d346 3
a348 2
long BIO_int_ctrl(BIO *b, int cmd, long larg, int iarg)
	{
d351 3
a353 3
	i=iarg;
	return(BIO_ctrl(b,cmd,larg,(char *)&i));
	}
d355 4
a358 3
char *BIO_ptr_ctrl(BIO *b, int cmd, long larg)
	{
	char *p=NULL;
d360 2
a361 2
	if (BIO_ctrl(b,cmd,larg,(char *)&p) <= 0)
		return(NULL);
d363 2
a364 2
		return(p);
	}
d366 3
a368 2
long BIO_ctrl(BIO *b, int cmd, long larg, void *parg)
	{
d370 1
a370 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d372 2
a373 1
	if (b == NULL) return(0);
d375 4
a378 5
	if ((b->method == NULL) || (b->method->ctrl == NULL))
		{
		BIOerr(BIO_F_BIO_CTRL,BIO_R_UNSUPPORTED_METHOD);
		return(-2);
		}
d380 1
a380 1
	cb=b->callback;
d383 2
a384 2
		((ret=cb(b,BIO_CB_CTRL,parg,cmd,larg,1L)) <= 0))
		return(ret);
d386 1
a386 1
	ret=b->method->ctrl(b,cmd,larg,parg);
d389 3
a391 4
		ret=cb(b,BIO_CB_CTRL|BIO_CB_RETURN,parg,cmd,
			larg,ret);
	return(ret);
	}
d393 4
a396 2
long BIO_callback_ctrl(BIO *b, int cmd, void (*fp)(struct bio_st *, int, const char *, int, long, long))
	{
d398 1
a398 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d400 2
a401 1
	if (b == NULL) return(0);
d403 4
a406 5
	if ((b->method == NULL) || (b->method->callback_ctrl == NULL))
		{
		BIOerr(BIO_F_BIO_CALLBACK_CTRL,BIO_R_UNSUPPORTED_METHOD);
		return(-2);
		}
d408 1
a408 1
	cb=b->callback;
d411 2
a412 2
		((ret=cb(b,BIO_CB_CTRL,(void *)&fp,cmd,0,1L)) <= 0))
		return(ret);
d414 1
a414 1
	ret=b->method->callback_ctrl(b,cmd,fp);
d417 3
a419 4
		ret=cb(b,BIO_CB_CTRL|BIO_CB_RETURN,(void *)&fp,cmd,
			0,ret);
	return(ret);
	}
d424 3
a426 2
size_t BIO_ctrl_pending(BIO *bio)
	{
d428 1
a428 1
	}
d430 3
a432 2
size_t BIO_ctrl_wpending(BIO *bio)
	{
d434 1
a434 1
	}
d438 3
a440 2
BIO *BIO_push(BIO *b, BIO *bio)
	{
d443 3
a445 2
	if (b == NULL) return(bio);
	lb=b;
d447 2
a448 2
		lb=lb->next_bio;
	lb->next_bio=bio;
d450 1
a450 1
		bio->prev_bio=lb;
d452 3
a454 3
	BIO_ctrl(b,BIO_CTRL_PUSH,0,lb);
	return(b);
	}
d457 3
a459 2
BIO *BIO_pop(BIO *b)
	{
d462 3
a464 2
	if (b == NULL) return(NULL);
	ret=b->next_bio;
d466 1
a466 1
	BIO_ctrl(b,BIO_CTRL_POP,0,b);
d469 1
a469 1
		b->prev_bio->next_bio=b->next_bio;
d471 1
a471 1
		b->next_bio->prev_bio=b->prev_bio;
d473 4
a476 4
	b->next_bio=NULL;
	b->prev_bio=NULL;
	return(ret);
	}
d478 4
a481 3
BIO *BIO_get_retry_BIO(BIO *bio, int *reason)
	{
	BIO *b,*last;
d483 2
a484 3
	b=last=bio;
	for (;;)
		{
d486 37
a522 7
		last=b;
		b=b->next_bio;
		if (b == NULL) break;
		}
	if (reason != NULL) *reason=last->retry_reason;
	return(last);
	}
d524 5
a528 31
int BIO_get_retry_reason(BIO *bio)
	{
	return(bio->retry_reason);
	}

BIO *BIO_find_type(BIO *bio, int type)
	{
	int mt,mask;

	if(!bio) return NULL;
	mask=type&0xff;
	do	{
		if (bio->method != NULL)
			{
			mt=bio->method->type;

			if (!mask)
				{
				if (mt & type) return(bio);
				}
			else if (mt == type)
				return(bio);
			}
		bio=bio->next_bio;
		} while (bio != NULL);
	return(NULL);
	}

BIO *BIO_next(BIO *b)
	{
	if(!b) return NULL;
d530 1
a530 1
	}
d532 3
a534 2
void BIO_free_all(BIO *bio)
	{
d538 4
a541 5
	while (bio != NULL)
		{
		b=bio;
		ref=b->references;
		bio=bio->next_bio;
d544 2
a545 2
		if (ref > 1) break;
		}
d547 6
d554 7
a560 12
BIO *BIO_dup_chain(BIO *in)
	{
	BIO *ret=NULL,*eoc=NULL,*bio,*new_bio;

	for (bio=in; bio != NULL; bio=bio->next_bio)
		{
		if ((new_bio=BIO_new(bio->method)) == NULL) goto err;
		new_bio->callback=bio->callback;
		new_bio->cb_arg=bio->cb_arg;
		new_bio->init=bio->init;
		new_bio->shutdown=bio->shutdown;
		new_bio->flags=bio->flags;
d563 1
a563 1
		new_bio->num=bio->num;
d565 1
a565 2
		if (!BIO_dup_state(bio,(char *)new_bio))
			{
d568 1
a568 1
			}
d571 2
a572 2
		if (!CRYPTO_dup_ex_data(CRYPTO_EX_INDEX_BIO, &new_bio->ex_data,
					&bio->ex_data))
d575 6
a580 10
		if (ret == NULL)
			{
			eoc=new_bio;
			ret=eoc;
			}
		else
			{
			BIO_push(eoc,new_bio);
			eoc=new_bio;
			}
d582 2
a583 1
	return(ret);
d587 3
a589 2
	return(NULL);	
	}
d591 6
a596 5
void BIO_copy_next_retry(BIO *b)
	{
	BIO_set_flags(b,BIO_get_retry_flags(b->next_bio));
	b->retry_reason=b->next_bio->retry_reason;
	}
d598 4
a601 3
int BIO_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
	{
d603 2
a604 2
				new_func, dup_func, free_func);
	}
d606 5
a610 4
int BIO_set_ex_data(BIO *bio, int idx, void *data)
	{
	return(CRYPTO_set_ex_data(&(bio->ex_data),idx,data));
	}
d612 5
a616 4
void *BIO_get_ex_data(BIO *bio, int idx)
	{
	return(CRYPTO_get_ex_data(&(bio->ex_data),idx));
	}
d618 2
a619 1
unsigned long BIO_number_read(BIO *bio)
d621 2
a622 1
	if(bio) return bio->num_read;
d626 2
a627 1
unsigned long BIO_number_written(BIO *bio)
d629 2
a630 1
	if(bio) return bio->num_write;
@


1.10
log
@openssl-1.0.0e: resolve conflicts
@
text
@d524 1
a524 1
	BIO *ret=NULL,*eoc=NULL,*bio,*new;
d528 6
a533 6
		if ((new=BIO_new(bio->method)) == NULL) goto err;
		new->callback=bio->callback;
		new->cb_arg=bio->cb_arg;
		new->init=bio->init;
		new->shutdown=bio->shutdown;
		new->flags=bio->flags;
d536 1
a536 1
		new->num=bio->num;
d538 1
a538 1
		if (!BIO_dup_state(bio,(char *)new))
d540 1
a540 1
			BIO_free(new);
d545 1
a545 1
		if (!CRYPTO_dup_ex_data(CRYPTO_EX_INDEX_BIO, &new->ex_data,
d551 1
a551 1
			eoc=new;
d556 2
a557 2
			BIO_push(eoc,new);
			eoc=new;
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d113 1
a113 1
	int ret=0,i;
d136 1
a136 1
	ret=a->method->destroy(a);
@


1.8
log
@resolve conflicts
@
text
@d432 1
a432 1
	BIO_ctrl(b,BIO_CTRL_PUSH,0,NULL);
d444 1
a444 1
	BIO_ctrl(b,BIO_CTRL_POP,0,NULL);
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d144 46
d193 1
a193 1
	long (*cb)();
d225 1
a225 1
	long (*cb)();
d260 1
a260 1
	long (*cb)();
d293 1
a293 1
	long (*cb)();
d354 1
a354 1
	long (*cb)();
d381 1
a381 1
	long (*cb)();
d387 1
a387 1
		BIOerr(BIO_F_BIO_CTRL,BIO_R_UNSUPPORTED_METHOD);
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d275 12
d398 2
a406 1
	BIO_ctrl(b,BIO_CTRL_POP,0,NULL);
@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@a65 3
static STACK_OF(CRYPTO_EX_DATA_FUNCS) *bio_meth=NULL;
static int bio_meth_num=0;

d100 1
a100 1
	CRYPTO_new_ex_data(bio_meth,bio,&bio->ex_data);
d103 3
d107 1
d133 1
a133 1
	CRYPTO_free_ex_data(bio_meth,a,&a->ex_data);
d486 2
a487 1
		if (!CRYPTO_dup_ex_data(bio_meth,&new->ex_data,&bio->ex_data))
d517 2
a518 3
	bio_meth_num++;
	return(CRYPTO_get_ex_new_index(bio_meth_num-1,&bio_meth,
		argl,argp,new_func,dup_func,free_func));
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d73 1
a73 1
	ret=(BIO *)Malloc(sizeof(BIO));
d81 1
a81 1
		Free(ret);
d136 1
a136 1
	Free(a);
d140 3
d204 1
a204 7
	/* This is evil and not thread safe.  If the BIO has been freed,
	 * we must not call the callback.  The only way to be able to
	 * determine this is the reference count which is now invalid since
	 * the memory has been free()ed.
	 */
	if (b->references <= 0) abort();
	if (cb != NULL) /* && (b->references >= 1)) */
d235 2
d319 1
a319 1
long BIO_callback_ctrl(BIO *b, int cmd, void (*fp)())
d421 1
d440 6
d541 2
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d172 1
a172 1
int BIO_write(BIO *b, const char *in, int inl)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d66 1
a66 1
static STACK *bio_meth=NULL;
d103 1
a103 1
	CRYPTO_new_ex_data(bio_meth,(char *)bio,&bio->ex_data);
d132 1
a132 1
	CRYPTO_free_ex_data(bio_meth,(char *)a,&a->ex_data);
d320 27
d351 1
a351 1
    {
d356 1
a356 1
    {
d506 2
a507 2
int BIO_get_ex_new_index(long argl, char *argp, int (*new_func)(),
	     int (*dup_func)(), void (*free_func)())
d514 1
a514 1
int BIO_set_ex_data(BIO *bio, int idx, char *data)
d519 1
a519 1
char *BIO_get_ex_data(BIO *bio, int idx)
d524 11
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
#include "crypto.h"
d63 2
a64 2
#include "bio.h"
#include "stack.h"
d69 1
a69 2
BIO *BIO_new(method)
BIO_METHOD *method;
d87 1
a87 3
int BIO_set(bio,method)
BIO *bio;
BIO_METHOD *method;
d110 1
a110 2
int BIO_free(a)
BIO *a;
d120 1
a120 1
        if (i > 0) return(1);
d140 1
a140 4
int BIO_read(b,out,outl)
BIO *b;
char *out;
int outl;
d158 1
a158 1
		BIOerr(BIO_F_BIO_READ,BIO_R_UNINITALISED);
d163 1
d172 1
a172 4
int BIO_write(b,in,inl)
BIO *b;
char *in;
int inl;
d193 1
a193 1
		BIOerr(BIO_F_BIO_WRITE,BIO_R_UNINITALISED);
d198 1
d201 7
a207 1
	if (cb != NULL)
d213 1
a213 3
int BIO_puts(b,in)
BIO *b;
char *in;
d232 1
a232 1
		BIOerr(BIO_F_BIO_PUTS,BIO_R_UNINITALISED);
d244 1
a244 4
int BIO_gets(b,in,inl)
BIO *b;
char *in;
int inl;
d263 1
a263 1
		BIOerr(BIO_F_BIO_GETS,BIO_R_UNINITALISED);
d275 1
a275 5
long BIO_int_ctrl(b,cmd,larg,iarg)
BIO *b;
int cmd;
long larg;
int iarg;
d283 1
a283 4
char *BIO_ptr_ctrl(b,cmd,larg)
BIO *b;
int cmd;
long larg;
d293 1
a293 5
long BIO_ctrl(b,cmd,larg,parg)
BIO *b;
int cmd;
long larg;
char *parg;
d320 14
d335 1
a335 2
BIO *BIO_push(b,bio)
BIO *b,*bio;
d352 1
a352 2
BIO *BIO_pop(b)
BIO *b;
d370 1
a370 3
BIO *BIO_get_retry_BIO(bio,reason)
BIO *bio;
int *reason;
d386 1
a386 2
int BIO_get_retry_reason(bio)
BIO *bio;
d391 1
a391 3
BIO *BIO_find_type(bio,type)
BIO *bio;
int type;
d413 1
a413 2
void BIO_free_all(bio)
BIO *bio;
d429 1
a429 2
BIO *BIO_dup_chain(in)
BIO *in;
d451 3
a453 3
	        /* copy app data */
	        if (!CRYPTO_dup_ex_data(bio_meth,&new->ex_data,&bio->ex_data))
	                goto err;
d473 1
a473 2
void BIO_copy_next_retry(b)
BIO *b;
d479 9
a487 16
int BIO_get_ex_new_index(argl,argp,new_func,dup_func,free_func)
long argl;
char *argp;
int (*new_func)();
int (*dup_func)();
void (*free_func)();
        {
        bio_meth_num++;
        return(CRYPTO_get_ex_new_index(bio_meth_num-1,&bio_meth,
                argl,argp,new_func,dup_func,free_func));
        }

int BIO_set_ex_data(bio,idx,data)
BIO *bio;
int idx;
char *data;
d492 1
a492 3
char *BIO_get_ex_data(bio,idx)
BIO *bio;
int idx;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/crypto.h>
d63 2
a64 2
#include <openssl/bio.h>
#include <openssl/stack.h>
d66 5
a70 1
BIO *BIO_new(BIO_METHOD *method)
d74 1
a74 1
	ret=(BIO *)OPENSSL_malloc(sizeof(BIO));
d82 1
a82 1
		OPENSSL_free(ret);
d88 3
a90 1
int BIO_set(BIO *bio, BIO_METHOD *method)
d106 1
a106 1
	CRYPTO_new_ex_data(CRYPTO_EX_INDEX_BIO, bio, &bio->ex_data);
a108 3
			{
			CRYPTO_free_ex_data(CRYPTO_EX_INDEX_BIO, bio,
					&bio->ex_data);
a109 1
			}
d113 2
a114 1
int BIO_free(BIO *a)
d124 1
a124 1
	if (i > 0) return(1);
d136 1
a136 1
	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_BIO, a, &a->ex_data);
d140 1
a140 1
	OPENSSL_free(a);
d144 4
a147 4
void BIO_vfree(BIO *a)
    { BIO_free(a); }

int BIO_read(BIO *b, void *out, int outl)
d165 1
a165 1
		BIOerr(BIO_F_BIO_READ,BIO_R_UNINITIALIZED);
a169 1

d178 4
a181 1
int BIO_write(BIO *b, const void *in, int inl)
d202 1
a202 1
		BIOerr(BIO_F_BIO_WRITE,BIO_R_UNINITIALIZED);
a206 1

d215 3
a217 1
int BIO_puts(BIO *b, const char *in)
d236 1
a236 1
		BIOerr(BIO_F_BIO_PUTS,BIO_R_UNINITIALIZED);
a241 2
	if (i > 0) b->num_write+=(unsigned long)i;

d248 4
a251 1
int BIO_gets(BIO *b, char *in, int inl)
d270 1
a270 1
		BIOerr(BIO_F_BIO_GETS,BIO_R_UNINITIALIZED);
d282 5
a286 1
long BIO_int_ctrl(BIO *b, int cmd, long larg, int iarg)
d294 4
a297 1
char *BIO_ptr_ctrl(BIO *b, int cmd, long larg)
d307 5
a311 1
long BIO_ctrl(BIO *b, int cmd, long larg, void *parg)
a337 41
long BIO_callback_ctrl(BIO *b, int cmd, void (*fp)(struct bio_st *, int, const char *, int, long, long))
	{
	long ret;
	long (*cb)();

	if (b == NULL) return(0);

	if ((b->method == NULL) || (b->method->callback_ctrl == NULL))
		{
		BIOerr(BIO_F_BIO_CTRL,BIO_R_UNSUPPORTED_METHOD);
		return(-2);
		}

	cb=b->callback;

	if ((cb != NULL) &&
		((ret=cb(b,BIO_CB_CTRL,(void *)&fp,cmd,0,1L)) <= 0))
		return(ret);

	ret=b->method->callback_ctrl(b,cmd,fp);

	if (cb != NULL)
		ret=cb(b,BIO_CB_CTRL|BIO_CB_RETURN,(void *)&fp,cmd,
			0,ret);
	return(ret);
	}

/* It is unfortunate to duplicate in functions what the BIO_(w)pending macros
 * do; but those macros have inappropriate return type, and for interfacing
 * from other programming languages, C macros aren't much of a help anyway. */
size_t BIO_ctrl_pending(BIO *bio)
	{
	return BIO_ctrl(bio, BIO_CTRL_PENDING, 0, NULL);
	}

size_t BIO_ctrl_wpending(BIO *bio)
	{
	return BIO_ctrl(bio, BIO_CTRL_WPENDING, 0, NULL);
	}


d339 2
a340 1
BIO *BIO_push(BIO *b, BIO *bio)
d357 2
a358 1
BIO *BIO_pop(BIO *b)
d376 3
a378 1
BIO *BIO_get_retry_BIO(BIO *bio, int *reason)
d394 2
a395 1
int BIO_get_retry_reason(BIO *bio)
d400 3
a402 1
BIO *BIO_find_type(BIO *bio, int type)
a405 1
	if(!bio) return NULL;
d424 2
a425 7
BIO *BIO_next(BIO *b)
	{
	if(!b) return NULL;
	return b->next_bio;
	}

void BIO_free_all(BIO *bio)
d441 2
a442 1
BIO *BIO_dup_chain(BIO *in)
d464 3
a466 4
		/* copy app data */
		if (!CRYPTO_dup_ex_data(CRYPTO_EX_INDEX_BIO, &new->ex_data,
					&bio->ex_data))
			goto err;
d486 2
a487 1
void BIO_copy_next_retry(BIO *b)
d493 16
a508 8
int BIO_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
	{
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_BIO, argl, argp,
				new_func, dup_func, free_func);
	}

int BIO_set_ex_data(BIO *bio, int idx, void *data)
d513 3
a515 1
void *BIO_get_ex_data(BIO *bio, int idx)
a519 13
unsigned long BIO_number_read(BIO *bio)
{
	if(bio) return bio->num_read;
	return 0;
}

unsigned long BIO_number_written(BIO *bio)
{
	if(bio) return bio->num_write;
	return 0;
}

IMPLEMENT_STACK_OF(BIO)
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a274 12
int BIO_indent(BIO *b,int indent,int max)
	{
	if(indent < 0)
		indent=0;
	if(indent > max)
		indent=max;
	while(indent--)
		if(BIO_puts(b," ") != 1)
			return 0;
	return 1;
	}

a385 2
	BIO_ctrl(b,BIO_CTRL_POP,0,NULL);

d393 1
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a143 46
void BIO_clear_flags(BIO *b, int flags)
	{
	b->flags &= ~flags;
	}

int	BIO_test_flags(const BIO *b, int flags)
	{
	return (b->flags & flags);
	}

void	BIO_set_flags(BIO *b, int flags)
	{
	b->flags |= flags;
	}

long (*BIO_get_callback(const BIO *b))(struct bio_st *,int,const char *,int, long,long)
	{
	return b->callback;
	}

void BIO_set_callback(BIO *b, long (*cb)(struct bio_st *,int,const char *,int, long,long))
	{
	b->callback = cb;
	}

void BIO_set_callback_arg(BIO *b, char *arg)
	{
	b->cb_arg = arg;
	}

char * BIO_get_callback_arg(const BIO *b)
	{
	return b->cb_arg;
	}

const char * BIO_method_name(const BIO *b)
	{
	return b->method->name;
	}

int BIO_method_type(const BIO *b)
	{
	return b->method->type;
	}


d147 1
a147 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d179 1
a179 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d214 1
a214 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d247 1
a247 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d308 1
a308 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d335 1
a335 1
	long (*cb)(BIO *,int,const char *,int,long,long);
d341 1
a341 1
		BIOerr(BIO_F_BIO_CALLBACK_CTRL,BIO_R_UNSUPPORTED_METHOD);
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d432 1
a432 1
	BIO_ctrl(b,BIO_CTRL_PUSH,0,lb);
d444 1
a444 1
	BIO_ctrl(b,BIO_CTRL_POP,0,b);
@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@d113 1
a113 1
	int i;
d136 1
a136 1
	a->method->destroy(a);
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d524 1
a524 1
	BIO *ret=NULL,*eoc=NULL,*bio,*new_bio;
d528 6
a533 6
		if ((new_bio=BIO_new(bio->method)) == NULL) goto err;
		new_bio->callback=bio->callback;
		new_bio->cb_arg=bio->cb_arg;
		new_bio->init=bio->init;
		new_bio->shutdown=bio->shutdown;
		new_bio->flags=bio->flags;
d536 1
a536 1
		new_bio->num=bio->num;
d538 1
a538 1
		if (!BIO_dup_state(bio,(char *)new_bio))
d540 1
a540 1
			BIO_free(new_bio);
d545 1
a545 1
		if (!CRYPTO_dup_ex_data(CRYPTO_EX_INDEX_BIO, &new_bio->ex_data,
d551 1
a551 1
			eoc=new_bio;
d556 2
a557 2
			BIO_push(eoc,new_bio);
			eoc=new_bio;
@


