head	1.14;
access;
symbols
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.8
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.3.0.22
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.20
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.3.0.18
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.10.20.15.50.13;	author jsing;	state Exp;
branches;
next	1.13;
commitid	bzvO8Cm3JPpoTNEt;

1.13
date	2014.10.28.07.35.59;	author jsg;	state Exp;
branches;
next	1.12;
commitid	pi8qF4s0vNCGLEKv;

1.12
date	2014.07.12.20.11.45;	author miod;	state Exp;
branches;
next	1.11;
commitid	RVnt9Q0PYRvHzNbM;

1.11
date	2014.07.09.11.10.51;	author bcook;	state Exp;
branches;
next	1.10;
commitid	lHJTcoC4c5BhEOGj;

1.10
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.27.05.07.02;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.29.05.39.25;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.11.22;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.36;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.56;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.56;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.50;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.15;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.35;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.59;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.10;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.43;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Lob a style(9) grenade in here.
@
text
@/* $OpenBSD: rc4_skey.c,v 1.13 2014/10/28 07:35:59 jsg Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <openssl/rc4.h>
#include "rc4_locl.h"
#include <openssl/opensslv.h>

const char *
RC4_options(void)
{
#ifdef RC4_INDEX
	if (sizeof(RC4_INT) == 1)
		return("rc4(idx,char)");
	else
		return("rc4(idx,int)");
#else
	if (sizeof(RC4_INT) == 1)
		return("rc4(ptr,char)");
	else
		return("rc4(ptr,int)");
#endif
}

/* RC4 as implemented from a posting from
 * Newsgroups: sci.crypt
 * From: sterndark@@netcom.com (David Sterndark)
 * Subject: RC4 Algorithm revealed.
 * Message-ID: <sternCvKL4B.Hyy@@netcom.com>
 * Date: Wed, 14 Sep 1994 06:35:31 GMT
 */

void
RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
{
	RC4_INT tmp;
	int id1, id2;
	RC4_INT *d;
	unsigned int i;

	d = &(key->data[0]);
	key->x = 0;
	key->y = 0;
	id1 = id2 = 0;

#define SK_LOOP(d,n) { \
		tmp=d[(n)]; \
		id2 = (data[id1] + tmp + id2) & 0xff; \
		if (++id1 == len) id1=0; \
		d[(n)]=d[id2]; \
		d[id2]=tmp; }

	for (i = 0; i < 256; i++)
		d[i] = i;
	for (i = 0; i < 256; i += 4) {
		SK_LOOP(d, i + 0);
		SK_LOOP(d, i + 1);
		SK_LOOP(d, i + 2);
		SK_LOOP(d, i + 3);
	}
}
@


1.13
log
@deregister; no binary change
ok jsing@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rc4_skey.c,v 1.12 2014/07/12 20:11:45 miod Exp $ */
d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d63 3
a65 2
const char *RC4_options(void)
	{
d77 1
a77 1
	}
d87 12
a98 11
void RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
	{
        RC4_INT tmp;
        int id1,id2;
        RC4_INT *d;
        unsigned int i;
        
        d= &(key->data[0]);
        key->x = 0;     
        key->y = 0;     
        id1=id2=0;     
d107 7
a113 8
	for (i=0; i < 256; i++) d[i]=i;
	for (i=0; i < 256; i+=4)
		{
		SK_LOOP(d,i+0);
		SK_LOOP(d,i+1);
		SK_LOOP(d,i+2);
		SK_LOOP(d,i+3);
		}
d115 1
a115 1
    
@


1.12
log
@Remove private_{Camellia,RC4}_set_key FIPS indirection tentacles, as has been
done for other symmetric algorithms recently.
@
text
@d1 1
a1 1
/* $OpenBSD: rc4_skey.c,v 1.11 2014/07/09 11:10:51 bcook Exp $ */
d88 3
a90 3
        register RC4_INT tmp;
        register int id1,id2;
        register RC4_INT *d;
@


1.11
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: rc4_skey.c,v 1.10 2014/06/12 15:49:30 deraadt Exp $ */
d86 1
a86 1
void private_RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a61 2

const char RC4_version[]="RC4" OPENSSL_VERSION_PTEXT;
@


1.9
log
@resolve conflicts
@
text
@d1 1
a1 1
/* crypto/rc4/rc4_skey.c */
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d88 1
a88 1
void RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
a106 34
#if defined(OPENSSL_CPUID_OBJ) && !defined(OPENSSL_NO_ASM)
# if	defined(__i386)   || defined(__i386__)   || defined(_M_IX86) || \
	defined(__INTEL__) || \
	defined(__x86_64) || defined(__x86_64__) || defined(_M_AMD64)
	if (sizeof(RC4_INT) > 1) {
		/*
		 * Unlike all other x86 [and x86_64] implementations,
		 * Intel P4 core [including EM64T] was found to perform
		 * poorly with wider RC4_INT. Performance improvement
		 * for IA-32 hand-coded assembler turned out to be 2.8x
		 * if re-coded for RC4_CHAR! It's however inappropriate
		 * to just switch to RC4_CHAR for x86[_64], as non-P4
		 * implementations suffer from significant performance
		 * losses then, e.g. PIII exhibits >2x deterioration,
		 * and so does Opteron. In order to assure optimal
		 * all-round performance, let us [try to] detect P4 at
		 * run-time by checking upon HTT bit in CPU capability
		 * vector and set up compressed key schedule, which is
		 * recognized by correspondingly updated assembler
		 * module...
		 *				<appro@@fy.chalmers.se>
		 */
		if (OPENSSL_ia32cap_P & (1<<28)) {
			unsigned char *cp=(unsigned char *)d;

			for (i=0;i<256;i++) cp[i]=i;
			for (i=0;i<256;i++) SK_LOOP(cp,i);
			/* mark schedule as compressed! */
			d[256/sizeof(RC4_INT)]=-1;
			return;
		}
	}
# endif
#endif
@


1.7
log
@resolve conflicts
@
text
@a61 5
#include <openssl/crypto.h>
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a87 3
#ifdef OPENSSL_FIPS
void private_RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
#else
a88 1
#endif
d122 2
a123 2
		 * all-round performance, we detect P4 at run-time by
		 * checking upon reserved bit 20 in CPU capability
d126 1
a126 2
		 * module... Bit 20 is set up by OPENSSL_ia32_cpuid.
		 *
a128 4
#ifdef OPENSSL_FIPS
		unsigned long *ia32cap_ptr = OPENSSL_ia32cap_loc();
		if (ia32cap_ptr && (*ia32cap_ptr & (1<<28))) {
#else
a129 1
#endif
@


1.6
log
@resolve conflicts
@
text
@d62 5
d93 3
d97 1
d139 6
a144 1
		if (OPENSSL_ia32cap_P & (1<<20)) {
@


1.5
log
@resolve conflicts
@
text
@a59 2
#include <openssl/crypto.h>
#include <openssl/fips.h>
d63 1
a63 1
const char *RC4_version="RC4" OPENSSL_VERSION_PTEXT;
d88 1
a88 1
FIPS_NON_FIPS_VCIPHER_Init(RC4)
a95 3

	for (i=0; i<256; i++)
		d[i]=i;
d100 1
a100 1
#define SK_LOOP(n) { \
d107 36
d145 4
a148 4
		SK_LOOP(i+0);
		SK_LOOP(i+1);
		SK_LOOP(i+2);
		SK_LOOP(i+3);
@


1.4
log
@resolve conflicts
@
text
@d61 1
a97 4
#if defined(__ia64) || defined(__ia64__) || defined(_M_IA64)
	/* see crypto/rc4/asm/rc4-ia64.S for further details... */
	d=(RC4_INT *)(((size_t)(d+255))&~(sizeof(key->data)-1));
#endif
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d60 1
d89 1
a89 1
void RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
d97 5
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d88 1
a88 1
void RC4_set_key(RC4_KEY *key, int len, register unsigned char *data)
@


1.1
log
@Initial revision
@
text
@d59 1
a59 1
#include "rc4.h"
d61 1
d63 1
a63 1
char *RC4_version="RC4 part of SSLeay 0.9.0b 29-Jun-1998";
d65 1
a65 1
char *RC4_options()
d88 1
a88 4
void RC4_set_key(key, len, data)
RC4_KEY *key;
int len;
register unsigned char *data;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
#include <openssl/rc4.h>
a60 1
#include <openssl/opensslv.h>
d62 1
a62 1
const char *RC4_version="RC4" OPENSSL_VERSION_PTEXT;
d64 1
a64 1
const char *RC4_options(void)
d87 4
a90 1
void RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a59 1
#include <openssl/crypto.h>
d88 1
a88 1
FIPS_NON_FIPS_VCIPHER_Init(RC4)
a95 5
#if defined(__ia64) || defined(__ia64__) || defined(_M_IA64)
	/* see crypto/rc4/asm/rc4-ia64.S for further details... */
	d=(RC4_INT *)(((size_t)(d+255))&~(sizeof(key->data)-1));
#endif

@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@a60 1
#include <openssl/fips.h>
d97 4
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d60 2
d65 1
a65 1
const char RC4_version[]="RC4" OPENSSL_VERSION_PTEXT;
d90 1
a90 1
void RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
d98 3
d105 1
a105 1
#define SK_LOOP(d,n) { \
a111 36
#if defined(OPENSSL_CPUID_OBJ) && !defined(OPENSSL_NO_ASM)
# if	defined(__i386)   || defined(__i386__)   || defined(_M_IX86) || \
	defined(__INTEL__) || \
	defined(__x86_64) || defined(__x86_64__) || defined(_M_AMD64)
	if (sizeof(RC4_INT) > 1) {
		/*
		 * Unlike all other x86 [and x86_64] implementations,
		 * Intel P4 core [including EM64T] was found to perform
		 * poorly with wider RC4_INT. Performance improvement
		 * for IA-32 hand-coded assembler turned out to be 2.8x
		 * if re-coded for RC4_CHAR! It's however inappropriate
		 * to just switch to RC4_CHAR for x86[_64], as non-P4
		 * implementations suffer from significant performance
		 * losses then, e.g. PIII exhibits >2x deterioration,
		 * and so does Opteron. In order to assure optimal
		 * all-round performance, we detect P4 at run-time by
		 * checking upon reserved bit 20 in CPU capability
		 * vector and set up compressed key schedule, which is
		 * recognized by correspondingly updated assembler
		 * module... Bit 20 is set up by OPENSSL_ia32_cpuid.
		 *
		 *				<appro@@fy.chalmers.se>
		 */
		if (OPENSSL_ia32cap_P & (1<<20)) {
			unsigned char *cp=(unsigned char *)d;

			for (i=0;i<256;i++) cp[i]=i;
			for (i=0;i<256;i++) SK_LOOP(cp,i);
			/* mark schedule as compressed! */
			d[256/sizeof(RC4_INT)]=-1;
			return;
		}
	}
# endif
#endif
	for (i=0; i < 256; i++) d[i]=i;
d114 4
a117 4
		SK_LOOP(d,i+0);
		SK_LOOP(d,i+1);
		SK_LOOP(d,i+2);
		SK_LOOP(d,i+3);
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a61 5
#include <openssl/crypto.h>
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a87 3
#ifdef OPENSSL_FIPS
void private_RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
#else
a88 1
#endif
d130 1
a130 6
#ifdef OPENSSL_FIPS
		unsigned long *ia32cap_ptr = OPENSSL_ia32cap_loc();
		if (ia32cap_ptr && (*ia32cap_ptr & (1<<28))) {
#else
		if (OPENSSL_ia32cap_P & (1<<28)) {
#endif
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d62 5
d93 3
d97 1
d131 2
a132 2
		 * all-round performance, let us [try to] detect P4 at
		 * run-time by checking upon HTT bit in CPU capability
d135 2
a136 1
		 * module...
d139 4
d144 1
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@d88 1
a88 1
void private_RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
d107 34
@


