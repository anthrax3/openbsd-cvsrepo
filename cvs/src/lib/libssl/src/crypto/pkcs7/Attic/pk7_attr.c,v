head	1.11;
access;
symbols
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	butholakala:1.7
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.14
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.12
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.3.0.12
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.09.03.11.33.38;	author beck;	state dead;
branches;
next	1.10;
commitid	HnbXxsegngek41U2;

1.10
date	2014.10.28.05.46.56;	author miod;	state Exp;
branches;
next	1.9;
commitid	hDZmp09ZEY5wcTE1;

1.9
date	2014.06.29.17.05.36;	author jsing;	state Exp;
branches;
next	1.8;
commitid	t0SFeQtZd9bpT5Df;

1.8
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.29.05.39.24;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.16;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.58.01;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.11.08;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.45;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.14;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.58;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: pk7_attr.c,v 1.10 2014/10/28 05:46:56 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2001.
 */
/* ====================================================================
 * Copyright (c) 2001-2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <openssl/bio.h>
#include <openssl/asn1.h>
#include <openssl/asn1t.h>
#include <openssl/pem.h>
#include <openssl/pkcs7.h>
#include <openssl/x509.h>
#include <openssl/err.h>

int
PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si, STACK_OF(X509_ALGOR) *cap)
{
	ASN1_STRING *seq;
	if (!(seq = ASN1_STRING_new())) {
		PKCS7err(PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP,
		    ERR_R_MALLOC_FAILURE);
		return 0;
	}
	seq->length = ASN1_item_i2d((ASN1_VALUE *)cap, &seq->data,
	    ASN1_ITEM_rptr(X509_ALGORS));
	return PKCS7_add_signed_attribute(si, NID_SMIMECapabilities,
	    V_ASN1_SEQUENCE, seq);
}

STACK_OF(X509_ALGOR) *
PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si)
{
	ASN1_TYPE *cap;
	const unsigned char *p;

	cap = PKCS7_get_signed_attribute(si, NID_SMIMECapabilities);
	if (!cap || (cap->type != V_ASN1_SEQUENCE))
		return NULL;
	p = cap->value.sequence->data;
	return (STACK_OF(X509_ALGOR) *)
	ASN1_item_d2i(NULL, &p, cap->value.sequence->length,
	    ASN1_ITEM_rptr(X509_ALGORS));
}

/* Basic smime-capabilities OID and optional integer arg */
int
PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
{
	X509_ALGOR *alg;

	if (!(alg = X509_ALGOR_new())) {
		PKCS7err(PKCS7_F_PKCS7_SIMPLE_SMIMECAP, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	ASN1_OBJECT_free(alg->algorithm);
	alg->algorithm = OBJ_nid2obj(nid);
	if (arg > 0) {
		ASN1_INTEGER *nbit;

		if (!(alg->parameter = ASN1_TYPE_new()))
			goto err;
		if (!(nbit = ASN1_INTEGER_new()))
			goto err;
		if (!ASN1_INTEGER_set(nbit, arg)) {
			ASN1_INTEGER_free(nbit);
			goto err;
		}
		alg->parameter->value.integer = nbit;
		alg->parameter->type = V_ASN1_INTEGER;
	}
	if (sk_X509_ALGOR_push(sk, alg) == 0)
		goto err;
	return 1;

err:
	PKCS7err(PKCS7_F_PKCS7_SIMPLE_SMIMECAP, ERR_R_MALLOC_FAILURE);
	X509_ALGOR_free(alg);
	return 0;
}

int
PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid)
{
	if (PKCS7_get_signed_attribute(si, NID_pkcs9_contentType))
		return 0;
	if (!coid)
		coid = OBJ_nid2obj(NID_pkcs7_data);
	return PKCS7_add_signed_attribute(si, NID_pkcs9_contentType,
	    V_ASN1_OBJECT, coid);
}

int
PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t)
{
	if (!t && !(t = X509_gmtime_adj(NULL, 0))) {
		PKCS7err(PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME,
		    ERR_R_MALLOC_FAILURE);
		return 0;
	}
	return PKCS7_add_signed_attribute(si, NID_pkcs9_signingTime,
	    V_ASN1_UTCTIME, t);
}

int
PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si, const unsigned char *md,
    int mdlen)
{
	ASN1_OCTET_STRING *os;

	os = ASN1_OCTET_STRING_new();
	if (!os)
		return 0;
	if (!ASN1_STRING_set(os, md, mdlen) ||
	    !PKCS7_add_signed_attribute(si, NID_pkcs9_messageDigest,
	    V_ASN1_OCTET_STRING, os)) {
		ASN1_OCTET_STRING_free(os);
		return 0;
	}
	return 1;
}
@


1.10
log
@Check the result of sk_*_push() operations for failure.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: pk7_attr.c,v 1.9 2014/06/29 17:05:36 jsing Exp $ */
@


1.9
log
@KNF.

I just spent too long chasing a bug in here and really should have done
this first. Gem of the day... is it an if test or a for loop? No, it is a
super ifloop!

if (!(flags & PKCS7_NOVERIFY)) for (k = 0; k < sk_X509_num(signers); k++) {
@
text
@d1 1
a1 1
/* $OpenBSD: pk7_attr.c,v 1.8 2014/06/12 15:49:30 deraadt Exp $ */
d110 1
a110 1
	alg->algorithm = OBJ_nid2obj (nid);
d113 8
a120 14
		if (!(alg->parameter = ASN1_TYPE_new())) {
			PKCS7err(PKCS7_F_PKCS7_SIMPLE_SMIMECAP,
			    ERR_R_MALLOC_FAILURE);
			return 0;
		}
		if (!(nbit = ASN1_INTEGER_new())) {
			PKCS7err(PKCS7_F_PKCS7_SIMPLE_SMIMECAP,
			    ERR_R_MALLOC_FAILURE);
			return 0;
		}
		if (!ASN1_INTEGER_set (nbit, arg)) {
			PKCS7err(PKCS7_F_PKCS7_SIMPLE_SMIMECAP,
			    ERR_R_MALLOC_FAILURE);
			return 0;
d125 2
a126 1
	sk_X509_ALGOR_push (sk, alg);
d128 5
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d69 2
a70 1
int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si, STACK_OF(X509_ALGOR) *cap)
d73 3
a75 2
	if(!(seq = ASN1_STRING_new())) {
		PKCS7err(PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP,ERR_R_MALLOC_FAILURE);
d78 4
a81 4
	seq->length = ASN1_item_i2d((ASN1_VALUE *)cap,&seq->data,
				ASN1_ITEM_rptr(X509_ALGORS));
        return PKCS7_add_signed_attribute(si, NID_SMIMECapabilities,
							V_ASN1_SEQUENCE, seq);
d84 3
a86 2
STACK_OF(X509_ALGOR) *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si)
	{
d95 3
a97 3
		ASN1_item_d2i(NULL, &p, cap->value.sequence->length,
				ASN1_ITEM_rptr(X509_ALGORS));
	}
d100 2
a101 1
int PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
d105 2
a106 2
	if(!(alg = X509_ALGOR_new())) {
		PKCS7err(PKCS7_F_PKCS7_SIMPLE_SMIMECAP,ERR_R_MALLOC_FAILURE);
d113 3
a115 2
		if(!(alg->parameter = ASN1_TYPE_new())) {
			PKCS7err(PKCS7_F_PKCS7_SIMPLE_SMIMECAP,ERR_R_MALLOC_FAILURE);
d118 3
a120 2
		if(!(nbit = ASN1_INTEGER_new())) {
			PKCS7err(PKCS7_F_PKCS7_SIMPLE_SMIMECAP,ERR_R_MALLOC_FAILURE);
d123 3
a125 2
		if(!ASN1_INTEGER_set (nbit, arg)) {
			PKCS7err(PKCS7_F_PKCS7_SIMPLE_SMIMECAP,ERR_R_MALLOC_FAILURE);
d135 3
a137 2
int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid)
	{
d143 2
a144 2
				V_ASN1_OBJECT, coid);
	}
d146 4
a149 4
int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t)
	{
	if (!t && !(t=X509_gmtime_adj(NULL,0)))
		{
d151 1
a151 1
				ERR_R_MALLOC_FAILURE);
d153 1
a153 1
		}
d155 2
a156 2
						V_ASN1_UTCTIME, t);
	}
d158 4
a161 3
int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si,
				const unsigned char *md, int mdlen)
	{
d163 1
d167 3
a169 4
	if (!ASN1_STRING_set(os, md, mdlen)
		|| !PKCS7_add_signed_attribute(si, NID_pkcs9_messageDigest,
						V_ASN1_OCTET_STRING, os))
		{
d172 1
a172 1
		}
d174 1
a174 1
	}
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d1 1
a1 1
/* pk7_attr.c */
@


1.6
log
@resolve conflicts
@
text
@d63 1
a71 12
	unsigned char *p, *pp;
	int len;
	len=i2d_ASN1_SET_OF_X509_ALGOR(cap,NULL,i2d_X509_ALGOR,
				       V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL,
				       IS_SEQUENCE);
	if(!(pp=(unsigned char *)OPENSSL_malloc(len))) {
		PKCS7err(PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP,ERR_R_MALLOC_FAILURE);
		return 0;
	}
	p=pp;
	i2d_ASN1_SET_OF_X509_ALGOR(cap,&p,i2d_X509_ALGOR, V_ASN1_SEQUENCE,
				   V_ASN1_UNIVERSAL, IS_SEQUENCE);
d76 2
a77 5
	if(!ASN1_STRING_set (seq, pp, len)) {
		PKCS7err(PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP,ERR_R_MALLOC_FAILURE);
		return 0;
	}
	OPENSSL_free (pp);
d91 3
a93 4
	return d2i_ASN1_SET_OF_X509_ALGOR(NULL, &p,
					  cap->value.sequence->length,
					  d2i_X509_ALGOR, X509_ALGOR_free,
					  V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
d127 39
@


1.5
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.4
log
@resolve conflicts
@
text
@d99 2
a100 1
	unsigned char *p;
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d6 1
a6 1
 * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.
d97 1
a97 1
{
d101 2
a102 1
	if (!cap) return NULL;
d108 1
a108 1
}
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d2 55
a56 5
/* S/MIME code.
 * Copyright (C) 1997-8 Dr S N Henson (shenson@@bigfoot.com) 
 * All Rights Reserved. 
 * Redistribution of this code without the authors permission is expressly
 * prohibited.
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d15 1
d18 1
a18 1
int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si, STACK *cap)
d23 4
a26 3
	len=i2d_ASN1_SET(cap,NULL,i2d_X509_ALGOR, V_ASN1_SEQUENCE,
						V_ASN1_UNIVERSAL, IS_SEQUENCE);
	if(!(pp=(unsigned char *)Malloc(len))) {
d31 2
a32 2
	i2d_ASN1_SET(cap,&p,i2d_X509_ALGOR, V_ASN1_SEQUENCE,
						V_ASN1_UNIVERSAL, IS_SEQUENCE);
d41 1
a41 1
	Free (pp);
d46 1
a46 1
STACK *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si)
d53 4
a56 3
	return d2i_ASN1_SET (NULL, &p, cap->value.sequence->length, 
		(char *(*)())d2i_X509_ALGOR, X509_ALGOR_free, V_ASN1_SEQUENCE,
							 V_ASN1_UNIVERSAL);
d60 1
a60 1
int PKCS7_simple_smimecap(STACK *sk, int nid, int arg)
d63 1
d87 1
a87 1
	sk_push (sk, (char *)alg);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d2 5
a6 55
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
 * project 2001.
 */
/* ====================================================================
 * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
a14 1
#include <openssl/x509.h>
d17 1
a17 1
int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si, STACK_OF(X509_ALGOR) *cap)
d22 3
a24 4
	len=i2d_ASN1_SET_OF_X509_ALGOR(cap,NULL,i2d_X509_ALGOR,
				       V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL,
				       IS_SEQUENCE);
	if(!(pp=(unsigned char *)OPENSSL_malloc(len))) {
d29 2
a30 2
	i2d_ASN1_SET_OF_X509_ALGOR(cap,&p,i2d_X509_ALGOR, V_ASN1_SEQUENCE,
				   V_ASN1_UNIVERSAL, IS_SEQUENCE);
d39 1
a39 1
	OPENSSL_free (pp);
d44 1
a44 1
STACK_OF(X509_ALGOR) *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si)
d51 3
a53 4
	return d2i_ASN1_SET_OF_X509_ALGOR(NULL, &p,
					  cap->value.sequence->length,
					  d2i_X509_ALGOR, X509_ALGOR_free,
					  V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
d57 1
a57 1
int PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
a59 1

d83 1
a83 1
	sk_X509_ALGOR_push (sk, alg);
@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d6 1
a6 1
 * Copyright (c) 2001-2004 The OpenSSL Project.  All rights reserved.
d97 1
a97 1
	{
d101 1
a101 2
	if (!cap || (cap->type != V_ASN1_SEQUENCE))
		return NULL;
d107 1
a107 1
	}
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d99 1
a99 2
	const unsigned char *p;

@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a62 1
#include <openssl/asn1t.h>
d71 12
d87 5
a91 2
	seq->length = ASN1_item_i2d((ASN1_VALUE *)cap,&seq->data,
				ASN1_ITEM_rptr(X509_ALGORS));
d105 4
a108 3
	return (STACK_OF(X509_ALGOR) *)
		ASN1_item_d2i(NULL, &p, cap->value.sequence->length,
				ASN1_ITEM_rptr(X509_ALGORS));
a141 39

int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid)
	{
	if (PKCS7_get_signed_attribute(si, NID_pkcs9_contentType))
		return 0;
	if (!coid)
		coid = OBJ_nid2obj(NID_pkcs7_data);
	return PKCS7_add_signed_attribute(si, NID_pkcs9_contentType,
				V_ASN1_OBJECT, coid);
	}

int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t)
	{
	if (!t && !(t=X509_gmtime_adj(NULL,0)))
		{
		PKCS7err(PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME,
				ERR_R_MALLOC_FAILURE);
		return 0;
		}
	return PKCS7_add_signed_attribute(si, NID_pkcs9_signingTime,
						V_ASN1_UTCTIME, t);
	}

int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si,
				const unsigned char *md, int mdlen)
	{
	ASN1_OCTET_STRING *os;
	os = ASN1_OCTET_STRING_new();
	if (!os)
		return 0;
	if (!ASN1_STRING_set(os, md, mdlen)
		|| !PKCS7_add_signed_attribute(si, NID_pkcs9_messageDigest,
						V_ASN1_OCTET_STRING, os))
		{
		ASN1_OCTET_STRING_free(os);
		return 0;
		}
	return 1;
	}
@


