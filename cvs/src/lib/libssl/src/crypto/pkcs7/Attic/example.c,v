head	1.7;
access;
symbols
	butholakala:1.4
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.4.0.24
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.20
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.18
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.16
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.4.0.12
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.3
	OPENBSD_4_4:1.3.0.26
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.24
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.22
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.20
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.18
	OPENBSD_4_0_BASE:1.3
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.3.0.16
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.14
	OPENBSD_3_8_BASE:1.3
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.3.0.12
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.07.02.13.24.47;	author jsing;	state dead;
branches;
next	1.6;
commitid	C6ujSB9gWDuZF44h;

1.6
date	2014.06.29.17.05.36;	author jsing;	state Exp;
branches;
next	1.5;
commitid	t0SFeQtZd9bpT5Df;

1.5
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.11.08;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.30;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.45;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove more unused cruft.

No objection from the usual suspects.
@
text
@/* $OpenBSD: example.c,v 1.6 2014/06/29 17:05:36 jsing Exp $ */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/pkcs7.h>
#include <openssl/asn1_mac.h>
#include <openssl/x509.h>

int
add_signed_time(PKCS7_SIGNER_INFO *si)
{
	ASN1_UTCTIME *sign_time;

	/* The last parameter is the amount to add/subtract from the current
	 * time (in seconds) */
	sign_time = X509_gmtime_adj(NULL, 0);
	PKCS7_add_signed_attribute(si, NID_pkcs9_signingTime,
	    V_ASN1_UTCTIME, (char *)sign_time);
	return (1);
}

ASN1_UTCTIME *
get_signed_time(PKCS7_SIGNER_INFO *si)
{
	ASN1_TYPE *so;

	so = PKCS7_get_signed_attribute(si, NID_pkcs9_signingTime);
	if (so->type == V_ASN1_UTCTIME)
		return so->value.utctime;
	return NULL;
}

static int signed_string_nid = -1;

void
add_signed_string(PKCS7_SIGNER_INFO *si, char *str)
{
	ASN1_OCTET_STRING *os;

	/* To a an object of OID 1.2.3.4.5, which is an octet string */
	if (signed_string_nid == -1)
		signed_string_nid =
		    OBJ_create("1.2.3.4.5","OID_example","Our example OID");
	os = ASN1_OCTET_STRING_new();
	ASN1_OCTET_STRING_set(os, (unsigned char*)str, strlen(str));
	/* When we add, we do not free */
	PKCS7_add_signed_attribute(si, signed_string_nid,
	    V_ASN1_OCTET_STRING, (char *)os);
}

int
get_signed_string(PKCS7_SIGNER_INFO *si, char *buf, int len)
{
	ASN1_TYPE *so;
	ASN1_OCTET_STRING *os;
	int i;

	if (signed_string_nid == -1)
		signed_string_nid =
		    OBJ_create("1.2.3.4.5","OID_example","Our example OID");
	/* To retrieve */
	so = PKCS7_get_signed_attribute(si, signed_string_nid);
	if (so != NULL) {
		if (so->type == V_ASN1_OCTET_STRING) {
			os = so->value.octet_string;
			i = os->length;
			if ((i + 1) > len)
				i = len - 1;
			memcpy(buf, os->data, i);
			return (i);
		}
	}
	return (0);
}

static int signed_seq2string_nid = -1;
/* ########################################### */
int
add_signed_seq2string(PKCS7_SIGNER_INFO *si, char *str1, char *str2)
{
	/* To add an object of OID 1.9.999, which is a sequence containing
	 * 2 octet strings */
	unsigned char *p;
	ASN1_OCTET_STRING *os1, *os2;
	ASN1_STRING *seq;
	unsigned char *data;
	int i, total;

	if (signed_seq2string_nid == -1)
		signed_seq2string_nid =
		    OBJ_create("1.9.9999","OID_example","Our example OID");

	os1 = ASN1_OCTET_STRING_new();
	os2 = ASN1_OCTET_STRING_new();
	ASN1_OCTET_STRING_set(os1, (unsigned char*)str1, strlen(str1));
	ASN1_OCTET_STRING_set(os2, (unsigned char*)str1, strlen(str1));
	i = i2d_ASN1_OCTET_STRING(os1, NULL);
	i += i2d_ASN1_OCTET_STRING(os2, NULL);
	total = ASN1_object_size(1, i, V_ASN1_SEQUENCE);

	data = malloc(total);
	p = data;
	ASN1_put_object(&p, 1,i, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
	i2d_ASN1_OCTET_STRING(os1, &p);
	i2d_ASN1_OCTET_STRING(os2, &p);

	seq = ASN1_STRING_new();
	ASN1_STRING_set(seq, data, total);
	free(data);
	ASN1_OCTET_STRING_free(os1);
	ASN1_OCTET_STRING_free(os2);

	PKCS7_add_signed_attribute(si, signed_seq2string_nid,
	    V_ASN1_SEQUENCE, (char *)seq);
	return (1);
}

/* For this case, I will malloc the return strings */
int
get_signed_seq2string(PKCS7_SIGNER_INFO *si, char **str1, char **str2)
{
	ASN1_TYPE *so;

	if (signed_seq2string_nid == -1)
		signed_seq2string_nid =
		    OBJ_create("1.9.9999","OID_example","Our example OID");
	/* To retrieve */
	so = PKCS7_get_signed_attribute(si, signed_seq2string_nid);
	if (so && (so->type == V_ASN1_SEQUENCE)) {
		ASN1_const_CTX c;
		ASN1_STRING *s;
		long length;
		ASN1_OCTET_STRING *os1, *os2;

		s = so->value.sequence;
		c.p = ASN1_STRING_data(s);
		c.max = c.p + ASN1_STRING_length(s);
		if (!asn1_GetSequence(&c, &length))
			goto err;
		/* Length is the length of the seqence */

		c.q = c.p;
		if ((os1 = d2i_ASN1_OCTET_STRING(NULL, &c.p, c.slen)) == NULL)
			goto err;
		c.slen -= (c.p - c.q);

		c.q = c.p;
		if ((os2 = d2i_ASN1_OCTET_STRING(NULL, &c.p, c.slen)) == NULL)
			goto err;
		c.slen -= (c.p - c.q);

		if (!asn1_const_Finish(&c))
			goto err;
		*str1 = malloc(os1->length + 1);
		*str2 = malloc(os2->length + 1);
		memcpy(*str1, os1->data, os1->length);
		memcpy(*str2, os2->data, os2->length);
		(*str1)[os1->length]='\0';
		(*str2)[os2->length]='\0';
		ASN1_OCTET_STRING_free(os1);
		ASN1_OCTET_STRING_free(os2);
		return (1);
	}
err:
	return (0);
}


/* #######################################
 * THE OTHER WAY TO DO THINGS
 * #######################################
 */
X509_ATTRIBUTE *
create_time(void)
{
	ASN1_UTCTIME *sign_time;
	X509_ATTRIBUTE *ret;

	/* The last parameter is the amount to add/subtract from the current
	 * time (in seconds) */
	sign_time = X509_gmtime_adj(NULL, 0);
	ret = X509_ATTRIBUTE_create(NID_pkcs9_signingTime,
	    V_ASN1_UTCTIME, (char *)sign_time);
	return (ret);
}

ASN1_UTCTIME *
sk_get_time(STACK_OF(X509_ATTRIBUTE) *sk)
{
	ASN1_TYPE *so;
	PKCS7_SIGNER_INFO si;

	si.auth_attr = sk;
	so = PKCS7_get_signed_attribute(&si, NID_pkcs9_signingTime);
	if (so->type == V_ASN1_UTCTIME)
		return so->value.utctime;
	return NULL;
}

X509_ATTRIBUTE *
create_string(char *str)
{
	ASN1_OCTET_STRING *os;
	X509_ATTRIBUTE *ret;

	/* To a an object of OID 1.2.3.4.5, which is an octet string */
	if (signed_string_nid == -1)
		signed_string_nid =
		    OBJ_create("1.2.3.4.5","OID_example","Our example OID");
	os = ASN1_OCTET_STRING_new();
	ASN1_OCTET_STRING_set(os, (unsigned char*)str, strlen(str));
	/* When we add, we do not free */
	ret = X509_ATTRIBUTE_create(signed_string_nid,
	    V_ASN1_OCTET_STRING, (char *)os);
	return (ret);
}

int
sk_get_string(STACK_OF(X509_ATTRIBUTE) *sk, char *buf, int len)
{
	ASN1_TYPE *so;
	ASN1_OCTET_STRING *os;
	int i;
	PKCS7_SIGNER_INFO si;

	si.auth_attr = sk;

	if (signed_string_nid == -1)
		signed_string_nid =
		    OBJ_create("1.2.3.4.5","OID_example","Our example OID");
	/* To retrieve */
	so = PKCS7_get_signed_attribute(&si, signed_string_nid);
	if (so != NULL) {
		if (so->type == V_ASN1_OCTET_STRING) {
			os = so->value.octet_string;
			i = os->length;
			if ((i + 1) > len)
				i = len - 1;
			memcpy(buf, os->data, i);
			return (i);
		}
	}
	return (0);
}

X509_ATTRIBUTE *
add_seq2string(PKCS7_SIGNER_INFO *si, char *str1, char *str2)
{
	/* To add an object of OID 1.9.999, which is a sequence containing
	 * 2 octet strings */
	unsigned char *p;
	ASN1_OCTET_STRING *os1, *os2;
	ASN1_STRING *seq;
	X509_ATTRIBUTE *ret;
	unsigned char *data;
	int i, total;

	if (signed_seq2string_nid == -1)
		signed_seq2string_nid =
		    OBJ_create("1.9.9999","OID_example","Our example OID");

	os1 = ASN1_OCTET_STRING_new();
	os2 = ASN1_OCTET_STRING_new();
	ASN1_OCTET_STRING_set(os1, (unsigned char*)str1, strlen(str1));
	ASN1_OCTET_STRING_set(os2, (unsigned char*)str1, strlen(str1));
	i = i2d_ASN1_OCTET_STRING(os1, NULL);
	i += i2d_ASN1_OCTET_STRING(os2, NULL);
	total = ASN1_object_size(1, i, V_ASN1_SEQUENCE);

	data = malloc(total);
	p = data;
	ASN1_put_object(&p, 1,i, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
	i2d_ASN1_OCTET_STRING(os1, &p);
	i2d_ASN1_OCTET_STRING(os2, &p);

	seq = ASN1_STRING_new();
	ASN1_STRING_set(seq, data, total);
	free(data);
	ASN1_OCTET_STRING_free(os1);
	ASN1_OCTET_STRING_free(os2);

	ret = X509_ATTRIBUTE_create(signed_seq2string_nid,
	    V_ASN1_SEQUENCE, (char *)seq);
	return (ret);
}

/* For this case, I will malloc the return strings */
int
sk_get_seq2string(STACK_OF(X509_ATTRIBUTE) *sk, char **str1, char **str2)
{
	ASN1_TYPE *so;
	PKCS7_SIGNER_INFO si;

	if (signed_seq2string_nid == -1)
		signed_seq2string_nid =
		    OBJ_create("1.9.9999","OID_example","Our example OID");

	si.auth_attr = sk;
	/* To retrieve */
	so = PKCS7_get_signed_attribute(&si, signed_seq2string_nid);
	if (so->type == V_ASN1_SEQUENCE) {
		ASN1_const_CTX c;
		ASN1_STRING *s;
		long length;
		ASN1_OCTET_STRING *os1, *os2;

		s = so->value.sequence;
		c.p = ASN1_STRING_data(s);
		c.max = c.p + ASN1_STRING_length(s);
		if (!asn1_GetSequence(&c, &length))
			goto err;
		/* Length is the length of the seqence */

		c.q = c.p;
		if ((os1 = d2i_ASN1_OCTET_STRING(NULL, &c.p, c.slen)) == NULL)
			goto err;
		c.slen -= (c.p - c.q);

		c.q = c.p;
		if ((os2 = d2i_ASN1_OCTET_STRING(NULL, &c.p, c.slen)) == NULL)
			goto err;
		c.slen -= (c.p - c.q);

		if (!asn1_const_Finish(&c))
			goto err;
		*str1 = malloc(os1->length + 1);
		*str2 = malloc(os2->length + 1);
		memcpy(*str1, os1->data, os1->length);
		memcpy(*str2, os2->data, os2->length);
		(*str1)[os1->length]='\0';
		(*str2)[os2->length]='\0';
		ASN1_OCTET_STRING_free(os1);
		ASN1_OCTET_STRING_free(os2);
		return (1);
	}
err:
	return (0);
}


@


1.6
log
@KNF.

I just spent too long chasing a bug in here and really should have done
this first. Gem of the day... is it an if test or a for loop? No, it is a
super ifloop!

if (!(flags & PKCS7_NOVERIFY)) for (k = 0; k < sk_X509_num(signers); k++) {
@
text
@d1 1
a1 1
/* $OpenBSD: example.c,v 1.5 2014/06/12 15:49:30 deraadt Exp $ */
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d9 3
a11 2
int add_signed_time(PKCS7_SIGNER_INFO *si)
	{
d16 9
a24 8
	sign_time=X509_gmtime_adj(NULL,0);
	PKCS7_add_signed_attribute(si,NID_pkcs9_signingTime,
		V_ASN1_UTCTIME,(char *)sign_time);
	return(1);
	}

ASN1_UTCTIME *get_signed_time(PKCS7_SIGNER_INFO *si)
	{
d27 1
a27 1
	so=PKCS7_get_signed_attribute(si,NID_pkcs9_signingTime);
d29 1
a29 1
	    return so->value.utctime;
d31 3
a33 3
	}
	
static int signed_string_nid= -1;
d35 3
a37 2
void add_signed_string(PKCS7_SIGNER_INFO *si, char *str)
	{
d42 4
a45 4
		signed_string_nid=
			OBJ_create("1.2.3.4.5","OID_example","Our example OID");
	os=ASN1_OCTET_STRING_new();
	ASN1_OCTET_STRING_set(os,(unsigned char*)str,strlen(str));
d47 7
a53 6
	PKCS7_add_signed_attribute(si,signed_string_nid,
		V_ASN1_OCTET_STRING,(char *)os);
	}

int get_signed_string(PKCS7_SIGNER_INFO *si, char *buf, int len)
	{
d59 2
a60 2
		signed_string_nid=
			OBJ_create("1.2.3.4.5","OID_example","Our example OID");
d62 9
a70 12
	so=PKCS7_get_signed_attribute(si,signed_string_nid);
	if (so != NULL)
		{
		if (so->type == V_ASN1_OCTET_STRING)
			{
			os=so->value.octet_string;
			i=os->length;
			if ((i+1) > len)
				i=len-1;
			memcpy(buf,os->data,i);
			return(i);
			}
a71 1
	return(0);
d73 2
d76 1
a76 1
static int signed_seq2string_nid= -1;
d78 3
a80 2
int add_signed_seq2string(PKCS7_SIGNER_INFO *si, char *str1, char *str2)
	{
d84 1
a84 1
	ASN1_OCTET_STRING *os1,*os2;
d87 1
a87 1
	int i,total;
d90 2
a91 2
		signed_seq2string_nid=
			OBJ_create("1.9.9999","OID_example","Our example OID");
d93 13
a105 13
	os1=ASN1_OCTET_STRING_new();
	os2=ASN1_OCTET_STRING_new();
	ASN1_OCTET_STRING_set(os1,(unsigned char*)str1,strlen(str1));
	ASN1_OCTET_STRING_set(os2,(unsigned char*)str1,strlen(str1));
	i =i2d_ASN1_OCTET_STRING(os1,NULL);
	i+=i2d_ASN1_OCTET_STRING(os2,NULL);
	total=ASN1_object_size(1,i,V_ASN1_SEQUENCE);

	data=malloc(total);
	p=data;
	ASN1_put_object(&p,1,i,V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL);
	i2d_ASN1_OCTET_STRING(os1,&p);
	i2d_ASN1_OCTET_STRING(os2,&p);
d107 2
a108 2
	seq=ASN1_STRING_new();
	ASN1_STRING_set(seq,data,total);
d113 4
a116 4
	PKCS7_add_signed_attribute(si,signed_seq2string_nid,
		V_ASN1_SEQUENCE,(char *)seq);
	return(1);
	}
d119 3
a121 2
int get_signed_seq2string(PKCS7_SIGNER_INFO *si, char **str1, char **str2)
	{
d125 2
a126 2
		signed_seq2string_nid=
			OBJ_create("1.9.9999","OID_example","Our example OID");
d128 2
a129 3
	so=PKCS7_get_signed_attribute(si,signed_seq2string_nid);
	if (so && (so->type == V_ASN1_SEQUENCE))
		{
d133 1
a133 1
		ASN1_OCTET_STRING *os1,*os2;
d135 5
a139 4
		s=so->value.sequence;
		c.p=ASN1_STRING_data(s);
		c.max=c.p+ASN1_STRING_length(s);
		if (!asn1_GetSequence(&c,&length)) goto err;
d142 2
a143 2
		c.q=c.p;
		if ((os1=d2i_ASN1_OCTET_STRING(NULL,&c.p,c.slen)) == NULL) 
d145 1
a145 1
		c.slen-=(c.p-c.q);
d147 2
a148 2
		c.q=c.p;
		if ((os2=d2i_ASN1_OCTET_STRING(NULL,&c.p,c.slen)) == NULL) 
d150 1
a150 1
		c.slen-=(c.p-c.q);
d152 6
a157 5
		if (!asn1_const_Finish(&c)) goto err;
		*str1=malloc(os1->length+1);
		*str2=malloc(os2->length+1);
		memcpy(*str1,os1->data,os1->length);
		memcpy(*str2,os2->data,os2->length);
d162 2
a163 2
		return(1);
		}
d165 2
a166 2
	return(0);
	}
d173 3
a175 2
X509_ATTRIBUTE *create_time(void)
	{
d181 9
a189 8
	sign_time=X509_gmtime_adj(NULL,0);
	ret=X509_ATTRIBUTE_create(NID_pkcs9_signingTime,
		V_ASN1_UTCTIME,(char *)sign_time);
	return(ret);
	}

ASN1_UTCTIME *sk_get_time(STACK_OF(X509_ATTRIBUTE) *sk)
	{
d193 2
a194 2
	si.auth_attr=sk;
	so=PKCS7_get_signed_attribute(&si,NID_pkcs9_signingTime);
d196 1
a196 1
	    return so->value.utctime;
d198 5
a202 4
	}
	
X509_ATTRIBUTE *create_string(char *str)
	{
d208 4
a211 4
		signed_string_nid=
			OBJ_create("1.2.3.4.5","OID_example","Our example OID");
	os=ASN1_OCTET_STRING_new();
	ASN1_OCTET_STRING_set(os,(unsigned char*)str,strlen(str));
d213 8
a220 7
	ret=X509_ATTRIBUTE_create(signed_string_nid,
		V_ASN1_OCTET_STRING,(char *)os);
	return(ret);
	}

int sk_get_string(STACK_OF(X509_ATTRIBUTE) *sk, char *buf, int len)
	{
d226 1
a226 1
	si.auth_attr=sk;
d229 2
a230 2
		signed_string_nid=
			OBJ_create("1.2.3.4.5","OID_example","Our example OID");
d232 9
a240 12
	so=PKCS7_get_signed_attribute(&si,signed_string_nid);
	if (so != NULL)
		{
		if (so->type == V_ASN1_OCTET_STRING)
			{
			os=so->value.octet_string;
			i=os->length;
			if ((i+1) > len)
				i=len-1;
			memcpy(buf,os->data,i);
			return(i);
			}
a241 1
	return(0);
d243 2
d246 3
a248 2
X509_ATTRIBUTE *add_seq2string(PKCS7_SIGNER_INFO *si, char *str1, char *str2)
	{
d252 1
a252 1
	ASN1_OCTET_STRING *os1,*os2;
d256 1
a256 1
	int i,total;
d259 2
a260 2
		signed_seq2string_nid=
			OBJ_create("1.9.9999","OID_example","Our example OID");
d262 13
a274 13
	os1=ASN1_OCTET_STRING_new();
	os2=ASN1_OCTET_STRING_new();
	ASN1_OCTET_STRING_set(os1,(unsigned char*)str1,strlen(str1));
	ASN1_OCTET_STRING_set(os2,(unsigned char*)str1,strlen(str1));
	i =i2d_ASN1_OCTET_STRING(os1,NULL);
	i+=i2d_ASN1_OCTET_STRING(os2,NULL);
	total=ASN1_object_size(1,i,V_ASN1_SEQUENCE);

	data=malloc(total);
	p=data;
	ASN1_put_object(&p,1,i,V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL);
	i2d_ASN1_OCTET_STRING(os1,&p);
	i2d_ASN1_OCTET_STRING(os2,&p);
d276 2
a277 2
	seq=ASN1_STRING_new();
	ASN1_STRING_set(seq,data,total);
d282 4
a285 4
	ret=X509_ATTRIBUTE_create(signed_seq2string_nid,
		V_ASN1_SEQUENCE,(char *)seq);
	return(ret);
	}
d288 3
a290 2
int sk_get_seq2string(STACK_OF(X509_ATTRIBUTE) *sk, char **str1, char **str2)
	{
d295 2
a296 2
		signed_seq2string_nid=
			OBJ_create("1.9.9999","OID_example","Our example OID");
d298 1
a298 1
	si.auth_attr=sk;
d300 2
a301 3
	so=PKCS7_get_signed_attribute(&si,signed_seq2string_nid);
	if (so->type == V_ASN1_SEQUENCE)
		{
d305 1
a305 1
		ASN1_OCTET_STRING *os1,*os2;
d307 5
a311 4
		s=so->value.sequence;
		c.p=ASN1_STRING_data(s);
		c.max=c.p+ASN1_STRING_length(s);
		if (!asn1_GetSequence(&c,&length)) goto err;
d314 2
a315 2
		c.q=c.p;
		if ((os1=d2i_ASN1_OCTET_STRING(NULL,&c.p,c.slen)) == NULL) 
d317 1
a317 1
		c.slen-=(c.p-c.q);
d319 2
a320 2
		c.q=c.p;
		if ((os2=d2i_ASN1_OCTET_STRING(NULL,&c.p,c.slen)) == NULL) 
d322 1
a322 1
		c.slen-=(c.p-c.q);
d324 6
a329 5
		if (!asn1_const_Finish(&c)) goto err;
		*str1=malloc(os1->length+1);
		*str2=malloc(os2->length+1);
		memcpy(*str1,os1->data,os1->length);
		memcpy(*str2,os2->data,os2->length);
d334 2
a335 2
		return(1);
		}
d337 2
a338 2
	return(0);
	}
@


1.4
log
@resolve conflicts
@
text
@d1 1
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d126 1
a126 1
		ASN1_CTX c;
d147 1
a147 1
		if (!asn1_Finish(&c)) goto err;
d293 1
a293 1
		ASN1_CTX c;
d314 1
a314 1
		if (!asn1_Finish(&c)) goto err;
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d6 1
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d3 1
d40 1
a40 1
	ASN1_OCTET_STRING_set(os,str,strlen(str));
d72 1
a72 1
static signed_seq2string_nid= -1;
d90 2
a91 2
	ASN1_OCTET_STRING_set(os1,str1,strlen(str1));
	ASN1_OCTET_STRING_set(os2,str1,strlen(str1));
d201 1
a201 1
	ASN1_OCTET_STRING_set(os,str,strlen(str));
d254 2
a255 2
	ASN1_OCTET_STRING_set(os1,str1,strlen(str1));
	ASN1_OCTET_STRING_set(os2,str1,strlen(str1));
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a2 1
#include <string.h>
a4 1
#include <openssl/x509.h>
d39 1
a39 1
	ASN1_OCTET_STRING_set(os,(unsigned char*)str,strlen(str));
d71 1
a71 1
static int signed_seq2string_nid= -1;
d89 2
a90 2
	ASN1_OCTET_STRING_set(os1,(unsigned char*)str1,strlen(str1));
	ASN1_OCTET_STRING_set(os2,(unsigned char*)str1,strlen(str1));
d200 1
a200 1
	ASN1_OCTET_STRING_set(os,(unsigned char*)str,strlen(str));
d253 2
a254 2
	ASN1_OCTET_STRING_set(os1,(unsigned char*)str1,strlen(str1));
	ASN1_OCTET_STRING_set(os2,(unsigned char*)str1,strlen(str1));
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d126 1
a126 1
		ASN1_const_CTX c;
d147 1
a147 1
		if (!asn1_const_Finish(&c)) goto err;
d293 1
a293 1
		ASN1_const_CTX c;
d314 1
a314 1
		if (!asn1_const_Finish(&c)) goto err;
@


