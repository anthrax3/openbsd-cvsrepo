head	1.25;
access;
symbols
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.4
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.20.0.4
	OPENBSD_5_6_BASE:1.20
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.9.0.6
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2015.09.30.19.01.14;	author jsing;	state Exp;
branches;
next	1.24;
commitid	GbuNIA3YdNGrvrnZ;

1.24
date	2015.09.30.18.41.06;	author jsing;	state Exp;
branches;
next	1.23;
commitid	8UbnRNonXjerilzx;

1.23
date	2015.09.30.17.30.15;	author jsing;	state Exp;
branches;
next	1.22;
commitid	f3YLBhwPPENmVqqA;

1.22
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.21;
commitid	gtwLkRyWx0K1HbzX;

1.21
date	2014.10.03.06.02.38;	author doug;	state Exp;
branches;
next	1.20;
commitid	q372AJEo5SAUk3Hj;

1.20
date	2014.07.12.16.03.36;	author miod;	state Exp;
branches;
next	1.19;
commitid	G74O1dmRukKsW7IJ;

1.19
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.18;
commitid	yQEL1wOWIearrW15;

1.18
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.05.25.17.32.20;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.19.10.54.26;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.16.18.23.52;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.06.06.33.20;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.08.08.03.12;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.05.11.05.07;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.07;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.41;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.29;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.46;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.31;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.33;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.25
log
@s/M_ASN1_ENUMERATED_free/ASN1_ENUMERATED_free/
@
text
@/* $OpenBSD: asn1_par.c,v 1.24 2015/09/30 18:41:06 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1.h>
#include <openssl/buffer.h>
#include <openssl/objects.h>

static int asn1_print_info(BIO *bp, int tag, int xclass, int constructed,
    int indent);
static int asn1_parse2(BIO *bp, const unsigned char **pp, long length,
    int offset, int depth, int indent, int dump);

static int
asn1_print_info(BIO *bp, int tag, int xclass, int constructed,
    int indent)
{
	char str[128];
	const char *p;

	if (constructed & V_ASN1_CONSTRUCTED)
		p="cons: ";
	else
		p="prim: ";
	if (BIO_write(bp, p, 6) < 6)
		goto err;
	BIO_indent(bp, indent, 128);

	p = str;
	if ((xclass & V_ASN1_PRIVATE) == V_ASN1_PRIVATE)
		snprintf(str, sizeof str, "priv [ %d ] ", tag);
	else if ((xclass & V_ASN1_CONTEXT_SPECIFIC) == V_ASN1_CONTEXT_SPECIFIC)
		snprintf(str, sizeof str, "cont [ %d ]", tag);
	else if ((xclass & V_ASN1_APPLICATION) == V_ASN1_APPLICATION)
		snprintf(str, sizeof str, "appl [ %d ]", tag);
	else if (tag > 30)
		snprintf(str, sizeof str, "<ASN1 %d>", tag);
	else
		p = ASN1_tag2str(tag);

	if (BIO_printf(bp, "%-18s", p) <= 0)
		goto err;
	return (1);
err:
	return (0);
}

int
ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent)
{
	return (asn1_parse2(bp, &pp, len, 0, 0, indent, 0));
}

int
ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent, int dump)
{
	return (asn1_parse2(bp, &pp, len, 0, 0, indent, dump));
}

static int
asn1_parse2(BIO *bp, const unsigned char **pp, long length, int offset,
    int depth, int indent, int dump)
{
	const unsigned char *p, *ep, *tot, *op, *opp;
	long len;
	int tag, xclass, ret = 0;
	int nl, hl, j, r;
	ASN1_OBJECT *o = NULL;
	ASN1_OCTET_STRING *os = NULL;
	/* ASN1_BMPSTRING *bmp=NULL;*/
	int dump_indent;

	dump_indent = 6;	/* Because we know BIO_dump_indent() */
	p = *pp;
	tot = p + length;
	op = p - 1;
	while ((p < tot) && (op < p)) {
		op = p;
		j = ASN1_get_object(&p, &len, &tag, &xclass, length);

		if (j & 0x80) {
			if (BIO_write(bp, "Error in encoding\n", 18) <= 0)
				goto end;
			ret = 0;
			goto end;
		}
		hl = (p - op);
		length -= hl;
		/* if j == 0x21 it is a constructed indefinite length object */
		if (BIO_printf(bp, "%5ld:", (long)offset +
		    (long)(op - *pp)) <= 0)
		    goto end;

		if (j != (V_ASN1_CONSTRUCTED | 1)) {
			if (BIO_printf(bp, "d=%-2d hl=%ld l=%4ld ",
			    depth, (long)hl, len) <= 0)
				goto end;
		} else {
			if (BIO_printf(bp, "d=%-2d hl=%ld l=inf  ",
			    depth, (long)hl) <= 0)
				goto end;
		}
		if (!asn1_print_info(bp, tag, xclass, j, (indent) ? depth : 0))
			goto end;
		if (j & V_ASN1_CONSTRUCTED) {
			ep = p + len;
			if (BIO_write(bp, "\n", 1) <= 0)
				goto end;
			if (len > length) {
				BIO_printf(bp, "length is greater than %ld\n",
				    length);
				ret = 0;
				goto end;
			}
			if ((j == 0x21) && (len == 0)) {
				for (;;) {
					r = asn1_parse2(bp, &p, (long)(tot - p),
					    offset + (p - *pp), depth + 1,
					    indent, dump);
					if (r == 0) {
						ret = 0;
						goto end;
					}
					if ((r == 2) || (p >= tot))
						break;
				}
			} else
				while (p < ep) {
					r = asn1_parse2(bp, &p, (long)len,
					    offset + (p - *pp), depth + 1,
					    indent, dump);
					if (r == 0) {
						ret = 0;
						goto end;
					}
				}
		} else if (xclass != 0) {
			p += len;
			if (BIO_write(bp, "\n", 1) <= 0)
				goto end;
		} else {
			nl = 0;
			if ((tag == V_ASN1_PRINTABLESTRING) ||
			    (tag == V_ASN1_T61STRING) ||
			    (tag == V_ASN1_IA5STRING) ||
			    (tag == V_ASN1_VISIBLESTRING) ||
			    (tag == V_ASN1_NUMERICSTRING) ||
			    (tag == V_ASN1_UTF8STRING) ||
			    (tag == V_ASN1_UTCTIME) ||
			    (tag == V_ASN1_GENERALIZEDTIME)) {
				if (BIO_write(bp, ":", 1) <= 0)
					goto end;
				if ((len > 0) &&
				    BIO_write(bp, (const char *)p, (int)len) !=
				    (int)len)
					goto end;
			} else if (tag == V_ASN1_OBJECT) {
				opp = op;
				if (d2i_ASN1_OBJECT(&o, &opp, len + hl) !=
				    NULL) {
					if (BIO_write(bp, ":", 1) <= 0)
						goto end;
					i2a_ASN1_OBJECT(bp, o);
				} else {
					if (BIO_write(bp, ":BAD OBJECT",
					    11) <= 0)
						goto end;
				}
			} else if (tag == V_ASN1_BOOLEAN) {
				int ii;

				opp = op;
				ii = d2i_ASN1_BOOLEAN(NULL, &opp, len + hl);
				if (ii < 0) {
					if (BIO_write(bp, "Bad boolean\n",
					    12) <= 0)
						goto end;
				}
				BIO_printf(bp, ":%d", ii);
			} else if (tag == V_ASN1_BMPSTRING) {
				/* do the BMP thang */
			} else if (tag == V_ASN1_OCTET_STRING) {
				int i, printable = 1;

				opp = op;
				os = d2i_ASN1_OCTET_STRING(NULL, &opp, len + hl);
				if (os != NULL && os->length > 0) {
					opp = os->data;
					/* testing whether the octet string is
					 * printable */
					for (i = 0; i < os->length; i++) {
						if (((opp[i] < ' ') &&
						    (opp[i] != '\n') &&
						    (opp[i] != '\r') &&
						    (opp[i] != '\t')) ||
						    (opp[i] > '~')) {
							printable = 0;
							break;
						}
					}
					if (printable) {
						/* printable string */
						if (BIO_write(bp, ":", 1) <= 0)
							goto end;
						if (BIO_write(bp, (const char *)opp,
							    os->length) <= 0)
							goto end;
					} else if (!dump) {
						/* not printable => print octet string
						 * as hex dump */
						if (BIO_write(bp, "[HEX DUMP]:", 11) <= 0)
							goto end;
						for (i = 0; i < os->length; i++) {
							if (BIO_printf(bp,
							    "%02X", opp[i]) <= 0)
								goto end;
						}
					} else {
						/* print the normal dump */
						if (!nl) {
							if (BIO_write(bp, "\n", 1) <= 0)
								goto end;
						}
						if (BIO_dump_indent(bp,
						    (const char *)opp,
						    ((dump == -1 || dump >
						    os->length) ? os->length : dump),
						    dump_indent) <= 0)
							goto end;
						nl = 1;
					}
				}
				ASN1_OCTET_STRING_free(os);
				os = NULL;
			} else if (tag == V_ASN1_INTEGER) {
				ASN1_INTEGER *bs;
				int i;

				opp = op;
				bs = d2i_ASN1_INTEGER(NULL, &opp, len + hl);
				if (bs != NULL) {
					if (BIO_write(bp, ":", 1) <= 0)
						goto end;
					if (bs->type == V_ASN1_NEG_INTEGER)
						if (BIO_write(bp, "-", 1) <= 0)
							goto end;
					for (i = 0; i < bs->length; i++) {
						if (BIO_printf(bp, "%02X",
						    bs->data[i]) <= 0)
							goto end;
					}
					if (bs->length == 0) {
						if (BIO_write(bp, "00", 2) <= 0)
							goto end;
					}
				} else {
					if (BIO_write(bp, "BAD INTEGER", 11) <= 0)
						goto end;
				}
				ASN1_INTEGER_free(bs);
			} else if (tag == V_ASN1_ENUMERATED) {
				ASN1_ENUMERATED *bs;
				int i;

				opp = op;
				bs = d2i_ASN1_ENUMERATED(NULL, &opp, len + hl);
				if (bs != NULL) {
					if (BIO_write(bp, ":", 1) <= 0)
						goto end;
					if (bs->type == V_ASN1_NEG_ENUMERATED)
						if (BIO_write(bp, "-", 1) <= 0)
							goto end;
					for (i = 0; i < bs->length; i++) {
						if (BIO_printf(bp, "%02X",
						    bs->data[i]) <= 0)
							goto end;
					}
					if (bs->length == 0) {
						if (BIO_write(bp, "00", 2) <= 0)
							goto end;
					}
				} else {
					if (BIO_write(bp, "BAD ENUMERATED", 14) <= 0)
						goto end;
				}
				ASN1_ENUMERATED_free(bs);
			} else if (len > 0 && dump) {
				if (!nl) {
					if (BIO_write(bp, "\n", 1) <= 0)
						goto end;
				}
				if (BIO_dump_indent(bp, (const char *)p,
				    ((dump == -1 || dump > len) ? len : dump),
				    dump_indent) <= 0)
					goto end;
				nl = 1;
			}

			if (!nl) {
				if (BIO_write(bp, "\n", 1) <= 0)
					goto end;
			}
			p += len;
			if ((tag == V_ASN1_EOC) && (xclass == 0)) {
				ret = 2; /* End of sequence */
				goto end;
			}
		}
		length -= len;
	}
	ret = 1;

end:
	if (o != NULL)
		ASN1_OBJECT_free(o);
	ASN1_OCTET_STRING_free(os);
	*pp = p;
	return (ret);
}

const char *
ASN1_tag2str(int tag)
{
	static const char * const tag2str[] = {
		"EOC", "BOOLEAN", "INTEGER", "BIT STRING", "OCTET STRING", /* 0-4 */
		"NULL", "OBJECT", "OBJECT DESCRIPTOR", "EXTERNAL", "REAL", /* 5-9 */
		"ENUMERATED", "<ASN1 11>", "UTF8STRING", "<ASN1 13>", 	    /* 10-13 */
		"<ASN1 14>", "<ASN1 15>", "SEQUENCE", "SET", 		    /* 15-17 */
		"NUMERICSTRING", "PRINTABLESTRING", "T61STRING",	    /* 18-20 */
		"VIDEOTEXSTRING", "IA5STRING", "UTCTIME", "GENERALIZEDTIME", /* 21-24 */
		"GRAPHICSTRING", "VISIBLESTRING", "GENERALSTRING",	    /* 25-27 */
		"UNIVERSALSTRING", "<ASN1 29>", "BMPSTRING"		    /* 28-30 */
	};

	if ((tag == V_ASN1_NEG_INTEGER) || (tag == V_ASN1_NEG_ENUMERATED))
		tag &= ~0x100;

	if (tag < 0 || tag > 30)
		return "(unknown)";
	return tag2str[tag];
}
@


1.24
log
@Replace M_ASN1_OCTET_STRING_(free|new) with ASN1_OCTET_STRING_(free|new).
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_par.c,v 1.23 2015/09/30 17:30:15 jsing Exp $ */
d342 1
a342 1
				M_ASN1_ENUMERATED_free(bs);
@


1.23
log
@Replace M_ASN1_INTEGER_(new|free) with ASN1_INTEGER_(new|free) - this is
different from the macro expansion, but the result is the same. Also
replace some ASN1_STRING_dup() with ASN1_INTEGER_dup().

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_par.c,v 1.22 2015/02/07 13:19:15 doug Exp $ */
d289 1
a289 1
				M_ASN1_OCTET_STRING_free(os);
d372 1
a372 1
	M_ASN1_OCTET_STRING_free(os);
@


1.22
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_par.c,v 1.21 2014/10/03 06:02:38 doug Exp $ */
d316 1
a316 1
				M_ASN1_INTEGER_free(bs);
@


1.21
log
@Use string literals in printf style calls so gcc's -Wformat works.

ok tedu@@, miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_par.c,v 1.20 2014/07/12 16:03:36 miod Exp $ */
a128 3
#if 0
	dump_indent = indent;
#else
a129 1
#endif
@


1.20
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_par.c,v 1.19 2014/07/11 08:44:47 jsing Exp $ */
a73 1
	static const char fmt[] = "%-18s";
d97 1
a97 1
	if (BIO_printf(bp, fmt, p) <= 0)
@


1.19
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_par.c,v 1.18 2014/06/12 15:49:27 deraadt Exp $ */
d294 2
a295 4
				if (os != NULL) {
					M_ASN1_OCTET_STRING_free(os);
					os = NULL;
				}
d377 1
a377 2
	if (os != NULL)
		M_ASN1_OCTET_STRING_free(os);
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
a61 1
#include "cryptlib.h"
a63 1
#include <openssl/asn1.h>
@


1.17
log
@remove unused shit. from Alexander Schrijver
@
text
@d1 1
a1 1
/* crypto/asn1/asn1_par.c */
@


1.16
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d141 1
a141 3
#ifdef LINT
		j = j;
#endif
@


1.15
log
@More KNF.
@
text
@d88 1
a88 1
		(void) snprintf(str, sizeof str, "priv [ %d ] ", tag);
d90 1
a90 1
		(void) snprintf(str, sizeof str, "cont [ %d ]", tag);
d92 1
a92 1
		(void) snprintf(str, sizeof str, "appl [ %d ]", tag);
d94 1
a94 1
		(void) snprintf(str, sizeof str, "<ASN1 %d>", tag);
@


1.14
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d65 2
a66 2
static int asn1_print_info(BIO *bp, int tag, int xclass,int constructed,
	int indent);
d68 5
a72 3
	int offset, int depth, int indent, int dump);
static int asn1_print_info(BIO *bp, int tag, int xclass, int constructed,
	     int indent)
d74 1
a74 1
	static const char fmt[]="%-18s";
d82 3
a84 2
	if (BIO_write(bp,p,6) < 6) goto err;
	BIO_indent(bp,indent,128);
d86 1
a86 1
	p=str;
d88 1
a88 1
		(void) snprintf(str,sizeof str,"priv [ %d ] ",tag);
d90 1
a90 1
		(void) snprintf(str,sizeof str,"cont [ %d ]",tag);
d92 1
a92 1
		(void) snprintf(str,sizeof str,"appl [ %d ]",tag);
d94 1
a94 1
		(void) snprintf(str,sizeof str,"<ASN1 %d>",tag);
d98 1
a98 1
	if (BIO_printf(bp,fmt,p) <= 0)
d100 1
a100 1
	return(1);
d102 1
a102 1
	return(0);
d105 2
a106 1
int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent)
d108 1
a108 1
	return(asn1_parse2(bp,&pp,len,0,0,indent,0));
d111 2
a112 1
int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent, int dump)
d114 1
a114 1
	return(asn1_parse2(bp,&pp,len,0,0,indent,dump));
d117 3
a119 2
static int asn1_parse2(BIO *bp, const unsigned char **pp, long length, int offset,
	     int depth, int indent, int dump)
d121 1
a121 1
	const unsigned char *p,*ep,*tot,*op,*opp;
d123 4
a126 4
	int tag,xclass,ret=0;
	int nl,hl,j,r;
	ASN1_OBJECT *o=NULL;
	ASN1_OCTET_STRING *os=NULL;
d135 3
a137 3
	p= *pp;
	tot=p+length;
	op=p-1;
d139 2
a140 2
		op=p;
		j=ASN1_get_object(&p,&len,&tag,&xclass,length);
d142 1
a142 1
		j=j;
d145 1
a145 1
			if (BIO_write(bp,"Error in encoding\n",18) <= 0)
d147 1
a147 1
			ret=0;
d150 2
a151 2
		hl=(p-op);
		length-=hl;
d153 3
a155 2
		if (BIO_printf(bp,"%5ld:",(long)offset+(long)(op- *pp))
			<= 0) goto end;
d158 2
a159 2
			if (BIO_printf(bp,"d=%-2d hl=%ld l=%4ld ",
				depth,(long)hl,len) <= 0)
d162 2
a163 2
			if (BIO_printf(bp,"d=%-2d hl=%ld l=inf  ",
				depth,(long)hl) <= 0)
d166 1
a166 1
		if (!asn1_print_info(bp,tag,xclass,j,(indent)?depth:0))
d169 3
a171 2
			ep=p+len;
			if (BIO_write(bp,"\n",1) <= 0) goto end;
d173 3
a175 3
				BIO_printf(bp,
					"length is greater than %ld\n",length);
				ret=0;
d180 9
a188 5
					r=asn1_parse2(bp,&p,(long)(tot-p),
						offset+(p - *pp),depth+1,
						indent,dump);
					if (r == 0) { ret=0; goto end; }
					if ((r == 2) || (p >= tot)) break;
d190 1
a190 2
			}
			else
d192 7
a198 4
					r=asn1_parse2(bp,&p,(long)len,
						offset+(p - *pp),depth+1,
						indent,dump);
					if (r == 0) { ret=0; goto end; }
d201 3
a203 2
			p+=len;
			if (BIO_write(bp,"\n",1) <= 0) goto end;
d205 11
a215 10
			nl=0;
			if (	(tag == V_ASN1_PRINTABLESTRING) ||
				(tag == V_ASN1_T61STRING) ||
				(tag == V_ASN1_IA5STRING) ||
				(tag == V_ASN1_VISIBLESTRING) ||
				(tag == V_ASN1_NUMERICSTRING) ||
				(tag == V_ASN1_UTF8STRING) ||
				(tag == V_ASN1_UTCTIME) ||
				(tag == V_ASN1_GENERALIZEDTIME)) {
				if (BIO_write(bp,":",1) <= 0) goto end;
d217 2
a218 2
					BIO_write(bp,(const char *)p,(int)len)
					!= (int)len)
d221 6
a226 4
				opp=op;
				if (d2i_ASN1_OBJECT(&o,&opp,len+hl) != NULL) {
					if (BIO_write(bp,":",1) <= 0) goto end;
					i2a_ASN1_OBJECT(bp,o);
d228 2
a229 1
					if (BIO_write(bp,":BAD OBJECT",11) <= 0)
d235 2
a236 2
				opp=op;
				ii=d2i_ASN1_BOOLEAN(NULL,&opp,len+hl);
d238 2
a239 1
					if (BIO_write(bp,"Bad boolean\n",12) <= 0)
d242 1
a242 1
				BIO_printf(bp,":%d",ii);
d246 1
a246 1
				int i,printable=1;
d248 2
a249 2
				opp=op;
				os=d2i_ASN1_OCTET_STRING(NULL,&opp,len+hl);
d254 7
a260 7
					for (i=0; i<os->length; i++) {
						if ((	(opp[i] < ' ') &&
							(opp[i] != '\n') &&
							(opp[i] != '\r') &&
							(opp[i] != '\t')) ||
							(opp[i] > '~')) {
							printable=0;
d265 2
a266 2
					/* printable string */
						if (BIO_write(bp,":",1) <= 0)
d268 2
a269 2
						if (BIO_write(bp,(const char *)opp,
							os->length) <= 0)
d272 3
a274 3
					/* not printable => print octet string
					 * as hex dump */
						if (BIO_write(bp,"[HEX DUMP]:",11) <= 0)
d276 3
a278 3
						for (i=0; i<os->length; i++) {
							if (BIO_printf(bp,"%02X"
								, opp[i]) <= 0)
d282 1
a282 1
					/* print the normal dump */
d284 1
a284 1
							if (BIO_write(bp,"\n",1) <= 0)
d288 4
a291 4
							(const char *)opp,
							((dump == -1 || dump > 
							os->length)?os->length:dump),
							dump_indent) <= 0)
d293 1
a293 1
						nl=1;
d298 1
a298 1
					os=NULL;
d304 2
a305 2
				opp=op;
				bs=d2i_ASN1_INTEGER(NULL,&opp,len+hl);
d307 2
a308 1
					if (BIO_write(bp,":",1) <= 0) goto end;
d310 1
a310 1
						if (BIO_write(bp,"-",1) <= 0)
d312 3
a314 3
					for (i=0; i<bs->length; i++) {
						if (BIO_printf(bp,"%02X",
							bs->data[i]) <= 0)
d318 1
a318 1
						if (BIO_write(bp,"00",2) <= 0)
d322 1
a322 1
					if (BIO_write(bp,"BAD INTEGER",11) <= 0)
d330 2
a331 2
				opp=op;
				bs=d2i_ASN1_ENUMERATED(NULL,&opp,len+hl);
d333 2
a334 1
					if (BIO_write(bp,":",1) <= 0) goto end;
d336 1
a336 1
						if (BIO_write(bp,"-",1) <= 0)
d338 3
a340 3
					for (i=0; i<bs->length; i++) {
						if (BIO_printf(bp,"%02X",
							bs->data[i]) <= 0)
d344 1
a344 1
						if (BIO_write(bp,"00",2) <= 0)
d348 1
a348 1
					if (BIO_write(bp,"BAD ENUMERATED",14) <= 0)
d354 1
a354 1
					if (BIO_write(bp,"\n",1) <= 0)
d357 3
a359 3
				if (BIO_dump_indent(bp,(const char *)p,
					((dump == -1 || dump > len)?len:dump),
					dump_indent) <= 0)
d361 1
a361 1
				nl=1;
d365 2
a366 1
				if (BIO_write(bp,"\n",1) <= 0) goto end;
d368 1
a368 1
			p+=len;
d370 1
a370 1
				ret=2; /* End of sequence */
d374 1
a374 1
		length-=len;
d376 2
a377 1
	ret=1;
d379 6
a384 4
	if (o != NULL) ASN1_OBJECT_free(o);
	if (os != NULL) M_ASN1_OCTET_STRING_free(os);
	*pp=p;
	return(ret);
d387 2
a388 1
const char *ASN1_tag2str(int tag)
d391 9
a399 9
	 "EOC", "BOOLEAN", "INTEGER", "BIT STRING", "OCTET STRING", /* 0-4 */
	 "NULL", "OBJECT", "OBJECT DESCRIPTOR", "EXTERNAL", "REAL", /* 5-9 */
	 "ENUMERATED", "<ASN1 11>", "UTF8STRING", "<ASN1 13>", 	    /* 10-13 */
	"<ASN1 14>", "<ASN1 15>", "SEQUENCE", "SET", 		    /* 15-17 */
	"NUMERICSTRING", "PRINTABLESTRING", "T61STRING",	    /* 18-20 */
	"VIDEOTEXSTRING", "IA5STRING", "UTCTIME","GENERALIZEDTIME", /* 21-24 */
	"GRAPHICSTRING", "VISIBLESTRING", "GENERALSTRING",	    /* 25-27 */
	"UNIVERSALSTRING", "<ASN1 29>", "BMPSTRING"		    /* 28-30 */
};
d401 1
a401 1
	if((tag == V_ASN1_NEG_INTEGER) || (tag == V_ASN1_NEG_ENUMERATED))
d404 2
a405 1
	if(tag < 0 || tag > 30) return "(unknown)";
a407 1

@


1.13
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d132 1
a132 2
	while ((p < tot) && (op < p))
	{
d138 1
a138 2
		if (j & 0x80)
		{
d150 1
a150 2
		if (j != (V_ASN1_CONSTRUCTED | 1))
		{
d154 1
a154 3
		}
		else
		{
d161 1
a161 2
		if (j & V_ASN1_CONSTRUCTED)
		{
d164 1
a164 2
			if (len > length)
			{
d170 2
a171 4
			if ((j == 0x21) && (len == 0))
			{
				for (;;)
				{
d180 1
a180 2
				while (p < ep)
				{
d186 1
a186 3
		}
		else if (xclass != 0)
		{
d189 1
a189 3
		}
		else
		{
d198 1
a198 2
				(tag == V_ASN1_GENERALIZEDTIME))
			{
d204 1
a204 3
			}
			else if (tag == V_ASN1_OBJECT)
			{
d206 1
a206 2
				if (d2i_ASN1_OBJECT(&o,&opp,len+hl) != NULL)
				{
d209 1
a209 3
				}
				else
				{
d213 1
a213 3
			}
			else if (tag == V_ASN1_BOOLEAN)
			{
d218 1
a218 2
				if (ii < 0)
				{
d223 1
a223 3
			}
			else if (tag == V_ASN1_BMPSTRING)
			{
d225 1
a225 3
			}
			else if (tag == V_ASN1_OCTET_STRING)
			{
d230 1
a230 2
				if (os != NULL && os->length > 0)
				{
d234 1
a234 2
					for (i=0; i<os->length; i++)
					{
d239 1
a239 2
							(opp[i] > '~'))
						{
d244 1
a244 1
					if (printable)
a245 1
					{
d251 1
a251 2
					}
					else if (!dump)
a253 1
					{
d256 1
a256 2
						for (i=0; i<os->length; i++)
						{
d261 1
a261 2
					}
					else
d263 1
a263 3
					{
						if (!nl) 
						{
d276 1
a276 2
				if (os != NULL)
				{
d280 1
a280 3
			}
			else if (tag == V_ASN1_INTEGER)
			{
d286 1
a286 2
				if (bs != NULL)
				{
d291 1
a291 2
					for (i=0; i<bs->length; i++)
					{
d296 1
a296 2
					if (bs->length == 0)
					{
d300 1
a300 3
				}
				else
				{
d305 1
a305 3
			}
			else if (tag == V_ASN1_ENUMERATED)
			{
d311 1
a311 2
				if (bs != NULL)
				{
d316 1
a316 2
					for (i=0; i<bs->length; i++)
					{
d321 1
a321 2
					if (bs->length == 0)
					{
d325 1
a325 3
				}
				else
				{
d330 2
a331 5
			}
			else if (len > 0 && dump)
			{
				if (!nl) 
				{
d342 1
a342 2
			if (!nl) 
			{
d346 1
a346 2
			if ((tag == V_ASN1_EOC) && (xclass == 0))
			{
d375 1
a375 1
							tag &= ~0x100;
@


1.12
log
@fix a few bugs observed on http://www.viva64.com/en/b/0250/
ok krw miod
@
text
@d71 1
a71 1
	{
d100 1
a100 1
	}
d103 1
a103 1
	{
d105 1
a105 1
	}
d108 1
a108 1
	{
d110 1
a110 1
	}
d114 1
a114 1
	{
d133 1
a133 1
		{
d140 1
a140 1
			{
d145 1
a145 1
			}
d153 1
a153 1
			{
d157 1
a157 1
			}
d159 1
a159 1
			{
d163 1
a163 1
			}
d167 1
a167 1
			{
d171 1
a171 1
				{
d176 1
a176 1
				}
d178 2
a180 2
				for (;;)
					{
a185 1
					}
d187 1
d190 1
a190 1
					{
d195 2
a196 2
					}
			}
d198 1
a198 1
			{
d201 1
a201 1
			}
d203 1
a203 1
			{
d213 1
a213 1
				{
d219 1
a219 1
				}
d221 1
a221 1
				{
d224 1
a224 1
					{
d227 1
a227 1
					}
d229 1
a229 1
					{
a231 1
					}
d233 1
d235 1
a235 1
				{
d241 1
a241 1
					{
d244 1
a244 1
					}
d246 1
a246 1
				}
d248 1
a248 1
				{
d250 1
a250 1
				}
d252 1
a252 1
				{
d258 1
a258 1
					{
d263 1
a263 1
						{
d269 1
a269 1
							{
a271 1
							}
d273 1
d276 1
a276 1
						{
d282 1
a282 1
						}
d286 1
a286 1
						{
d290 1
a290 1
							{
a293 1
							}
d295 1
d298 2
a300 2
						if (!nl) 
							{
d303 1
a303 1
							}
a310 1
						}
d312 1
d314 1
a314 1
					{
a316 1
					}
d318 1
d320 1
a320 1
				{
d327 1
a327 1
					{
d333 1
a333 1
						{
d337 1
a337 1
						}
d339 1
a339 1
						{
a341 1
						}
d343 1
d345 1
a345 1
					{
d348 1
a348 1
					}
d350 1
a350 1
				}
d352 1
a352 1
				{
d359 1
a359 1
					{
d365 1
a365 1
						{
d369 1
a369 1
						}
d371 1
a371 1
						{
a373 1
						}
d375 1
d377 1
a377 1
					{
d380 1
a380 1
					}
d382 1
a382 1
				}
d384 2
a386 2
				if (!nl) 
					{
d389 1
a389 1
					}
d395 1
a395 1
				}
d398 1
a398 1
				{
d400 1
a400 1
				}
d403 1
a403 1
				{
a405 1
				}
d407 1
d409 1
a409 1
		}
d416 1
a416 1
	}
d429 1
a429 1
	};
@


1.11
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d378 1
a378 1
					if (BIO_write(bp,"BAD ENUMERATED",11) <= 0)
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d85 1
a85 1
		BIO_snprintf(str,sizeof str,"priv [ %d ] ",tag);
d87 1
a87 1
		BIO_snprintf(str,sizeof str,"cont [ %d ]",tag);
d89 1
a89 1
		BIO_snprintf(str,sizeof str,"appl [ %d ]",tag);
d91 1
a91 1
		BIO_snprintf(str,sizeof str,"<ASN1 %d>",tag);
@


1.9
log
@resolve conflicts
@
text
@a72 1
	static const char fmt2[]="%2d %-15s";
d74 1
a74 1
	const char *p,*p2=NULL;
d95 2
a96 8
	if (p2 != NULL)
		{
		if (BIO_printf(bp,fmt2,tag,p2) <= 0) goto err;
		}
	else
		{
		if (BIO_printf(bp,fmt,p) <= 0) goto err;
		}
d242 1
a242 1
					if (BIO_write(bp,"Bad boolean\n",12))
d420 1
a420 1
	static const char *tag2str[] = {
@


1.8
log
@resolve conflicts
@
text
@d216 2
@


1.7
log
@merge 0.9.7d
@
text
@d67 1
a67 1
static int asn1_parse2(BIO *bp, unsigned char **pp, long length,
d91 4
a94 1
	else p = ASN1_tag2str(tag);
d109 1
a109 1
int ASN1_parse(BIO *bp, unsigned char *pp, long len, int indent)
d114 1
a114 1
int ASN1_parse_dump(BIO *bp, unsigned char *pp, long len, int indent, int dump)
d119 1
a119 1
static int asn1_parse2(BIO *bp, unsigned char **pp, long length, int offset,
d122 1
a122 1
	unsigned char *p,*ep,*tot,*op,*opp;
d221 1
a221 1
					BIO_write(bp,(char *)p,(int)len)
d262 1
a262 1
				if (os != NULL)
d264 3
a266 1
					opp=os->data;
d279 2
a280 1
					if (printable && (os->length > 0))
d284 1
a284 1
						if (BIO_write(bp,(char *)opp,
d288 15
a302 2
					if (!printable && (os->length > 0)
						&& dump)
d309 4
a312 2
						if (BIO_dump_indent(bp,(char *)opp,
							((dump == -1 || dump > os->length)?os->length:dump),
d317 3
d395 1
a395 1
				if (BIO_dump_indent(bp,(char *)p,
d425 1
a425 1
	const static char *tag2str[] = {
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d86 1
a86 1
		snprintf(str,sizeof str,"priv [ %d ] ",tag);
d88 1
a88 1
		snprintf(str,sizeof str,"cont [ %d ]",tag);
d90 1
a90 1
		snprintf(str,sizeof str,"appl [ %d ]",tag);
@


1.5
log
@Trivial sprintf() -> snprintf() changes. ok deraadt@@
@
text
@d82 1
a82 6
	if (indent)
		{
		if (indent > 128) indent=128;
		memset(str,' ',indent);
		if (BIO_write(bp,str,indent) < indent) goto err;
		}
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d91 1
a91 1
		sprintf(str,"priv [ %d ] ",tag);
d93 1
a93 1
		sprintf(str,"cont [ %d ]",tag);
d95 1
a95 1
		sprintf(str,"appl [ %d ]",tag);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 1
a68 1
	int offset, int depth, int indent);
d113 6
a118 1
	return(asn1_parse2(bp,&pp,len,0,0,indent));
d122 1
a122 1
	     int depth, int indent)
d131 1
d133 5
d192 1
a192 1
						indent);
d202 1
a202 1
						indent);
d287 14
d368 13
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d96 2
a97 49
	else if ((tag == V_ASN1_EOC) /* && (xclass == V_ASN1_UNIVERSAL) */)
		p="EOC";
	else if (tag == V_ASN1_BOOLEAN)
		p="BOOLEAN";
	else if (tag == V_ASN1_INTEGER)
		p="INTEGER";
	else if (tag == V_ASN1_ENUMERATED)
		p="ENUMERATED";
	else if (tag == V_ASN1_BIT_STRING)
		p="BIT STRING";
	else if (tag == V_ASN1_OCTET_STRING)
		p="OCTET STRING";
	else if (tag == V_ASN1_NULL)
		p="NULL";
	else if (tag == V_ASN1_OBJECT)
		p="OBJECT";
	else if (tag == V_ASN1_SEQUENCE)
		p="SEQUENCE";
	else if (tag == V_ASN1_SET)
		p="SET";
	else if (tag == V_ASN1_PRINTABLESTRING)
		p="PRINTABLESTRING";
	else if (tag == V_ASN1_T61STRING)
		p="T61STRING";
	else if (tag == V_ASN1_IA5STRING)
		p="IA5STRING";
	else if (tag == V_ASN1_UTCTIME)
		p="UTCTIME";

	/* extras */
	else if (tag == V_ASN1_NUMERICSTRING)
		p="NUMERICSTRING";
	else if (tag == V_ASN1_VIDEOTEXSTRING)
		p="VIDEOTEXSTRING";
	else if (tag == V_ASN1_GENERALIZEDTIME)
		p="GENERALIZEDTIME";
	else if (tag == V_ASN1_GRAPHICSTRING)
		p="GRAPHICSTRING";
	else if (tag == V_ASN1_VISIBLESTRING)
		p="VISIBLESTRING";
	else if (tag == V_ASN1_GENERALSTRING)
		p="GENERALSTRING";
	else if (tag == V_ASN1_UNIVERSALSTRING)
		p="UNIVERSALSTRING";
	else if (tag == V_ASN1_BMPSTRING)
		p="BMPSTRING";
	else
		p2="(unknown)";
		
d276 1
a276 1
					ASN1_OCTET_STRING_free(os);
d310 1
a310 1
				ASN1_INTEGER_free(bs);
d342 1
a342 1
				ASN1_ENUMERATED_free(bs);
d361 1
a361 1
	if (os != NULL) ASN1_OCTET_STRING_free(os);
d365 21
@


1.1
log
@Initial revision
@
text
@d61 3
a63 3
#include "buffer.h"
#include "objects.h"
#include "x509.h"
a64 1
#ifndef NOPROTO
d69 2
a70 11
#else
static int asn1_print_info();
static int asn1_parse2();
#endif

static int asn1_print_info(bp, tag, xclass, constructed,indent)
BIO *bp;
int tag;
int xclass;
int constructed;
int indent;
d72 4
a75 3
	static char *fmt="%-18s";
	static char *fmt2="%2d %-15s";
	char *p,str[128],*p2=NULL;
d102 2
d134 2
a135 2
	else if (tag == V_ASN1_ISO64STRING)
		p="ISO64STRING";
d158 1
a158 5
int ASN1_parse(bp, pp, len, indent)
BIO *bp;
unsigned char *pp;
long len;
int indent;
d163 2
a164 7
static int asn1_parse2(bp, pp, length, offset, depth, indent)
BIO *bp;
unsigned char **pp;
long length;
int offset;
int depth;
int indent;
d253 3
a255 1
				(tag == V_ASN1_UTCTIME))
d358 32
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 3
a63 3
#include <openssl/buffer.h>
#include <openssl/objects.h>
#include <openssl/asn1.h>
d65 1
d69 12
a80 3
	int offset, int depth, int indent, int dump);
static int asn1_print_info(BIO *bp, int tag, int xclass, int constructed,
	     int indent)
d82 3
a84 4
	static const char fmt[]="%-18s";
	static const char fmt2[]="%2d %-15s";
	char str[128];
	const char *p,*p2=NULL;
d105 47
a151 2
	else p = ASN1_tag2str(tag);

d165 5
a169 1
int ASN1_parse(BIO *bp, unsigned char *pp, long len, int indent)
d171 1
a171 1
	return(asn1_parse2(bp,&pp,len,0,0,indent,0));
d174 7
a180 7
int ASN1_parse_dump(BIO *bp, unsigned char *pp, long len, int indent, int dump)
	{
	return(asn1_parse2(bp,&pp,len,0,0,indent,dump));
	}

static int asn1_parse2(BIO *bp, unsigned char **pp, long length, int offset,
	     int depth, int indent, int dump)
a188 1
	int dump_indent;
a189 5
#if 0
	dump_indent = indent;
#else
	dump_indent = 6;	/* Because we know BIO_dump_indent() */
#endif
d244 1
a244 1
						indent,dump);
d254 1
a254 1
						indent,dump);
d269 1
a269 3
				(tag == V_ASN1_VISIBLESTRING) ||
				(tag == V_ASN1_UTCTIME) ||
				(tag == V_ASN1_GENERALIZEDTIME))
d337 1
a337 15
					if (!printable && (os->length > 0)
						&& dump)
						{
						if (!nl) 
							{
							if (BIO_write(bp,"\n",1) <= 0)
								goto end;
							}
						if (BIO_dump_indent(bp,(char *)opp,
							((dump == -1 || dump > os->length)?os->length:dump),
							dump_indent) <= 0)
							goto end;
						nl=1;
						}
					M_ASN1_OCTET_STRING_free(os);
d371 1
a371 46
				M_ASN1_INTEGER_free(bs);
				}
			else if (tag == V_ASN1_ENUMERATED)
				{
				ASN1_ENUMERATED *bs;
				int i;

				opp=op;
				bs=d2i_ASN1_ENUMERATED(NULL,&opp,len+hl);
				if (bs != NULL)
					{
					if (BIO_write(bp,":",1) <= 0) goto end;
					if (bs->type == V_ASN1_NEG_ENUMERATED)
						if (BIO_write(bp,"-",1) <= 0)
							goto end;
					for (i=0; i<bs->length; i++)
						{
						if (BIO_printf(bp,"%02X",
							bs->data[i]) <= 0)
							goto end;
						}
					if (bs->length == 0)
						{
						if (BIO_write(bp,"00",2) <= 0)
							goto end;
						}
					}
				else
					{
					if (BIO_write(bp,"BAD ENUMERATED",11) <= 0)
						goto end;
					}
				M_ASN1_ENUMERATED_free(bs);
				}
			else if (len > 0 && dump)
				{
				if (!nl) 
					{
					if (BIO_write(bp,"\n",1) <= 0)
						goto end;
					}
				if (BIO_dump_indent(bp,(char *)p,
					((dump == -1 || dump > len)?len:dump),
					dump_indent) <= 0)
					goto end;
				nl=1;
d390 1
a390 1
	if (os != NULL) M_ASN1_OCTET_STRING_free(os);
a393 21

const char *ASN1_tag2str(int tag)
{
	const static char *tag2str[] = {
	 "EOC", "BOOLEAN", "INTEGER", "BIT STRING", "OCTET STRING", /* 0-4 */
	 "NULL", "OBJECT", "OBJECT DESCRIPTOR", "EXTERNAL", "REAL", /* 5-9 */
	 "ENUMERATED", "<ASN1 11>", "UTF8STRING", "<ASN1 13>", 	    /* 10-13 */
	"<ASN1 14>", "<ASN1 15>", "SEQUENCE", "SET", 		    /* 15-17 */
	"NUMERICSTRING", "PRINTABLESTRING", "T61STRING",	    /* 18-20 */
	"VIDEOTEXSTRING", "IA5STRING", "UTCTIME","GENERALIZEDTIME", /* 21-24 */
	"GRAPHICSTRING", "VISIBLESTRING", "GENERALSTRING",	    /* 25-27 */
	"UNIVERSALSTRING", "<ASN1 29>", "BMPSTRING"		    /* 28-30 */
	};

	if((tag == V_ASN1_NEG_INTEGER) || (tag == V_ASN1_NEG_ENUMERATED))
							tag &= ~0x100;

	if(tag < 0 || tag > 30) return "(unknown)";
	return tag2str[tag];
}

@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d82 6
a87 1
	BIO_indent(bp,indent,128);
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@d86 1
a86 1
		BIO_snprintf(str,sizeof str,"priv [ %d ] ",tag);
d88 1
a88 1
		BIO_snprintf(str,sizeof str,"cont [ %d ]",tag);
d90 1
a90 1
		BIO_snprintf(str,sizeof str,"appl [ %d ]",tag);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d67 1
a67 1
static int asn1_parse2(BIO *bp, const unsigned char **pp, long length,
d91 1
a91 4
	else if (tag > 30)
		BIO_snprintf(str,sizeof str,"<ASN1 %d>",tag);
	else
		p = ASN1_tag2str(tag);
d106 1
a106 1
int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent)
d111 1
a111 1
int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent, int dump)
d116 1
a116 1
static int asn1_parse2(BIO *bp, const unsigned char **pp, long length, int offset,
d119 1
a119 1
	const unsigned char *p,*ep,*tot,*op,*opp;
d218 1
a218 1
					BIO_write(bp,(const char *)p,(int)len)
d259 1
a259 1
				if (os != NULL && os->length > 0)
d261 1
a261 3
					opp = os->data;
					/* testing whether the octet string is
					 * printable */
d274 1
a274 2
					if (printable)
					/* printable string */
d278 1
a278 1
						if (BIO_write(bp,(const char *)opp,
d282 2
a283 15
					else if (!dump)
					/* not printable => print octet string
					 * as hex dump */
						{
						if (BIO_write(bp,"[HEX DUMP]:",11) <= 0)
							goto end;
						for (i=0; i<os->length; i++)
							{
							if (BIO_printf(bp,"%02X"
								, opp[i]) <= 0)
								goto end;
							}
						}
					else
					/* print the normal dump */
d290 2
a291 4
						if (BIO_dump_indent(bp,
							(const char *)opp,
							((dump == -1 || dump > 
							os->length)?os->length:dump),
a295 3
					}
				if (os != NULL)
					{
d371 1
a371 1
				if (BIO_dump_indent(bp,(const char *)p,
d401 1
a401 1
	static const char *tag2str[] = {
@


1.1.1.6
log
@import of OpenSSL 0.9.8k
@
text
@a215 2
				(tag == V_ASN1_NUMERICSTRING) ||
				(tag == V_ASN1_UTF8STRING) ||
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d73 1
d75 1
a75 1
	const char *p;
d96 8
a103 2
	if (BIO_printf(bp,fmt,p) <= 0)
		goto err;
d249 1
a249 1
					if (BIO_write(bp,"Bad boolean\n",12) <= 0)
d427 1
a427 1
	static const char * const tag2str[] = {
@


