head	1.19;
access;
symbols
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.15.0.6
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	butholakala:1.5
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.5.0.24
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.20
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.18
	OPENBSD_5_3_BASE:1.5
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.5.0.12
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.10
	OPENBSD_4_9_BASE:1.5
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.32
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.30
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.28
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.26
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.24
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.22
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2015.09.30.18.41.06;	author jsing;	state Exp;
branches;
next	1.18;
commitid	8UbnRNonXjerilzx;

1.18
date	2015.07.27.12.53.56;	author jsing;	state Exp;
branches;
next	1.17;
commitid	Faw5RUshJXkK2Q5m;

1.17
date	2015.07.20.15.27.00;	author miod;	state Exp;
branches;
next	1.16;
commitid	mMlrveOVmguan4Mh;

1.16
date	2015.04.12.15.15.51;	author doug;	state Exp;
branches;
next	1.15;
commitid	aDmxMI0BAKmwmqDj;

1.15
date	2014.07.12.16.03.36;	author miod;	state Exp;
branches;
next	1.14;
commitid	G74O1dmRukKsW7IJ;

1.14
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.13;
commitid	yQEL1wOWIearrW15;

1.13
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.12;
commitid	id8dTrTMtnTn4fqt;

1.12
date	2014.06.27.04.41.09;	author miod;	state Exp;
branches;
next	1.11;
commitid	LjhWmh3ZGL2WwCk0;

1.11
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.04.18.11.20.32;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.21.32.37;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.52;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.35;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.51;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Replace M_ASN1_OCTET_STRING_(free|new) with ASN1_OCTET_STRING_(free|new).
@
text
@/* $OpenBSD: x_pkey.c,v 1.18 2015/07/27 12:53:56 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

X509_PKEY *
X509_PKEY_new(void)
{
	X509_PKEY *ret = NULL;

	if ((ret = malloc(sizeof(X509_PKEY))) == NULL) {
		ASN1err(ASN1_F_X509_PKEY_NEW, ERR_R_MALLOC_FAILURE);
		goto err;
	}
	ret->version = 0;
	if ((ret->enc_algor = X509_ALGOR_new()) == NULL) {
		ASN1err(ASN1_F_X509_PKEY_NEW, ERR_R_MALLOC_FAILURE);
		goto err;
	}
	if ((ret->enc_pkey = ASN1_OCTET_STRING_new()) == NULL) {
		ASN1err(ASN1_F_X509_PKEY_NEW, ERR_R_MALLOC_FAILURE);
		goto err;
	}
	ret->dec_pkey = NULL;
	ret->key_length = 0;
	ret->key_data = NULL;
	ret->key_free = 0;
	ret->cipher.cipher = NULL;
	memset(ret->cipher.iv, 0, EVP_MAX_IV_LENGTH);
	ret->references = 1;
	return (ret);

err:
	if (ret) {
		X509_ALGOR_free(ret->enc_algor);
		free(ret);
	}
	return NULL;
}

void
X509_PKEY_free(X509_PKEY *x)
{
	int i;

	if (x == NULL)
		return;

	i = CRYPTO_add(&x->references, -1, CRYPTO_LOCK_X509_PKEY);
	if (i > 0)
		return;

	if (x->enc_algor != NULL)
		X509_ALGOR_free(x->enc_algor);
	ASN1_OCTET_STRING_free(x->enc_pkey);
	EVP_PKEY_free(x->dec_pkey);
	if ((x->key_data != NULL) && (x->key_free))
		free(x->key_data);
	free(x);
}
@


1.18
log
@Less asn1_mac.h - asn1_lib.c does not need it and x_pkey.c should be
using ASN1err() instead of ASN1_MAC_H_err().

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pkey.c,v 1.17 2015/07/20 15:27:00 miod Exp $ */
d81 1
a81 1
	if ((ret->enc_pkey = M_ASN1_OCTET_STRING_new()) == NULL) {
d116 1
a116 1
	M_ASN1_OCTET_STRING_free(x->enc_pkey);
@


1.17
log
@In X509_PKEY_new(), make sure all allocation failures push an error to the
error stack, not only the first one.
ok guenther@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pkey.c,v 1.16 2015/04/12 15:15:51 doug Exp $ */
a61 1
#include <openssl/asn1_mac.h>
d73 1
a73 2
		ASN1_MAC_H_err(ASN1_F_X509_PKEY_NEW, ERR_R_MALLOC_FAILURE,
		    __LINE__);
d78 1
a78 2
		ASN1_MAC_H_err(ASN1_F_X509_PKEY_NEW, ERR_R_MALLOC_FAILURE,
		    __LINE__);
d82 1
a82 2
		ASN1_MAC_H_err(ASN1_F_X509_PKEY_NEW, ERR_R_MALLOC_FAILURE,
		    __LINE__);
@


1.16
log
@Remove d2i_X509_PKEY and i2d_X509_PKEY from the SSLeay days.

i2d_X509_PKEY is a "needs to implement" and d2i_X509_PKEY is broken.

Removed upstream in commit b1f3442857c1fd76e91941141bf671d19e90a79d.

ok deraadt@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pkey.c,v 1.15 2014/07/12 16:03:36 miod Exp $ */
d76 1
a76 1
		return NULL;
d80 3
a82 2
		free(ret);
		return NULL;
d85 3
a87 3
		X509_ALGOR_free(ret->enc_algor);
		free(ret);
		return NULL;
d97 7
@


1.15
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pkey.c,v 1.14 2014/07/11 08:44:47 jsing Exp $ */
a66 40

/* need to implement */
int
i2d_X509_PKEY(X509_PKEY *a, unsigned char **pp)
{
	return (0);
}

X509_PKEY *
d2i_X509_PKEY(X509_PKEY **a, const unsigned char **pp, long length)
{
	int i;
	M_ASN1_D2I_vars(a, X509_PKEY *, X509_PKEY_new);

	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get_x(X509_ALGOR, ret->enc_algor, d2i_X509_ALGOR);
	M_ASN1_D2I_get_x(ASN1_OCTET_STRING, ret->enc_pkey,
	    d2i_ASN1_OCTET_STRING);

	ret->cipher.cipher = EVP_get_cipherbyname(
	    OBJ_nid2ln(OBJ_obj2nid(ret->enc_algor->algorithm)));
	if (ret->cipher.cipher == NULL) {
		c.error = ASN1_R_UNSUPPORTED_CIPHER;
		c.line = __LINE__;
		goto err;
	}
	if (ret->enc_algor->parameter->type == V_ASN1_OCTET_STRING) {
		i = ret->enc_algor->parameter->value.octet_string->length;
		if (i > EVP_MAX_IV_LENGTH) {
			c.error = ASN1_R_IV_TOO_LARGE;
			c.line = __LINE__;
			goto err;
		}
		memcpy(ret->cipher.iv,
		    ret->enc_algor->parameter->value.octet_string->data, i);
	} else
		memset(ret->cipher.iv, 0, EVP_MAX_IV_LENGTH);
	M_ASN1_D2I_Finish(a, X509_PKEY_free, ASN1_F_D2I_X509_PKEY);
}
@


1.14
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pkey.c,v 1.13 2014/07/10 13:58:22 jsing Exp $ */
d152 2
a153 4
	if (x->enc_pkey != NULL)
		M_ASN1_OCTET_STRING_free(x->enc_pkey);
	if (x->dec_pkey != NULL)
		EVP_PKEY_free(x->dec_pkey);
@


1.13
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pkey.c,v 1.12 2014/06/27 04:41:09 miod Exp $ */
d62 2
a63 1
#include "cryptlib.h"
a65 1
#include <openssl/asn1_mac.h>
@


1.12
log
@Remove M_ASN1_New* macros which are only used in X509_PKEY_new() are obfuscate
it to hide memory leaks in the error paths, and fix aforementioned memory
leaks.
ok jsing@@ logan@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pkey.c,v 1.11 2014/06/12 15:49:27 deraadt Exp $ */
d60 2
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a109 1
	ASN1_CTX c;
d111 5
a115 1
	M_ASN1_New_Malloc(ret, X509_PKEY);
d117 9
a125 2
	M_ASN1_New(ret->enc_algor, X509_ALGOR_new);
	M_ASN1_New(ret->enc_pkey, M_ASN1_OCTET_STRING_new);
a133 1
	M_ASN1_New_Error(ASN1_F_X509_PKEY_NEW);
@


1.10
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/asn1/x_pkey.c */
@


1.9
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d67 2
a68 1
int i2d_X509_PKEY(X509_PKEY *a, unsigned char **pp)
d70 1
a70 1
	return(0);
d73 2
a74 1
X509_PKEY *d2i_X509_PKEY(X509_PKEY **a, const unsigned char **pp, long length)
d77 1
a77 1
	M_ASN1_D2I_vars(a,X509_PKEY *,X509_PKEY_new);
d81 3
a83 2
	M_ASN1_D2I_get_x(X509_ALGOR,ret->enc_algor,d2i_X509_ALGOR);
	M_ASN1_D2I_get_x(ASN1_OCTET_STRING,ret->enc_pkey,d2i_ASN1_OCTET_STRING);
d85 2
a86 2
	ret->cipher.cipher=EVP_get_cipherbyname(
		OBJ_nid2ln(OBJ_obj2nid(ret->enc_algor->algorithm)));
d88 2
a89 2
		c.error=ASN1_R_UNSUPPORTED_CIPHER;
		c.line=__LINE__;
d93 1
a93 1
		i=ret->enc_algor->parameter->value.octet_string->length;
d95 2
a96 2
			c.error=ASN1_R_IV_TOO_LARGE;
			c.line=__LINE__;
d100 4
a103 5
			ret->enc_algor->parameter->value.octet_string->data,i);
	}
	else
		memset(ret->cipher.iv,0,EVP_MAX_IV_LENGTH);
	M_ASN1_D2I_Finish(a,X509_PKEY_free,ASN1_F_D2I_X509_PKEY);
d106 2
a107 1
X509_PKEY *X509_PKEY_new(void)
d109 1
a109 1
	X509_PKEY *ret=NULL;
d112 12
a123 12
	M_ASN1_New_Malloc(ret,X509_PKEY);
	ret->version=0;
	M_ASN1_New(ret->enc_algor,X509_ALGOR_new);
	M_ASN1_New(ret->enc_pkey,M_ASN1_OCTET_STRING_new);
	ret->dec_pkey=NULL;
	ret->key_length=0;
	ret->key_data=NULL;
	ret->key_free=0;
	ret->cipher.cipher=NULL;
	memset(ret->cipher.iv,0,EVP_MAX_IV_LENGTH);
	ret->references=1;
	return(ret);
d127 2
a128 1
void X509_PKEY_free(X509_PKEY *x)
d132 2
a133 4
	if (x == NULL) return;

	i=CRYPTO_add(&x->references,-1,CRYPTO_LOCK_X509_PKEY);
	if (i > 0) return;
d135 12
a146 4
	if (x->enc_algor != NULL) X509_ALGOR_free(x->enc_algor);
	if (x->enc_pkey != NULL) M_ASN1_OCTET_STRING_free(x->enc_pkey);
	if (x->dec_pkey != NULL)EVP_PKEY_free(x->dec_pkey);
	if ((x->key_data != NULL) && (x->key_free)) free(x->key_data);
@


1.8
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d84 1
a84 2
	if (ret->cipher.cipher == NULL)
	{
d89 1
a89 2
	if (ret->enc_algor->parameter->type == V_ASN1_OCTET_STRING) 
	{
d91 1
a91 2
		if (i > EVP_MAX_IV_LENGTH)
		{
@


1.7
log
@kill REF_PRINT/REF_CHECK debugging framework noone would use
ok miod
@
text
@d68 1
a68 1
	{
d70 1
a70 1
	}
d73 1
a73 1
	{
d85 1
a85 1
		{
d89 1
a89 1
		}
d91 1
a91 1
		{
d94 1
a94 1
			{
d98 1
a98 1
			}
d101 1
a101 1
		}
d105 1
a105 1
	}
d108 1
a108 1
	{
d125 1
a125 1
	}
d128 1
a128 1
	{
d141 1
a141 1
	}
@


1.6
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a133 3
#ifdef REF_PRINT
	REF_PRINT("X509_PKEY",x);
#endif
a134 7
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"X509_PKEY_free, bad reference count\n");
		abort();
		}
#endif
@


1.5
log
@resolve conflicts
@
text
@d149 2
a150 2
	if ((x->key_data != NULL) && (x->key_free)) OPENSSL_free(x->key_data);
	OPENSSL_free(x);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d72 1
a72 1
X509_PKEY *d2i_X509_PKEY(X509_PKEY **a, unsigned char **pp, long length)
d79 2
a80 2
	M_ASN1_D2I_get(ret->enc_algor,d2i_X509_ALGOR);
	M_ASN1_D2I_get(ret->enc_pkey,d2i_ASN1_OCTET_STRING);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d149 2
a150 2
	if ((x->key_data != NULL) && (x->key_free)) Free(x->key_data);
	Free(x);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d115 1
a115 1
	M_ASN1_New(ret->enc_pkey,ASN1_OCTET_STRING_new);
d147 1
a147 1
	if (x->enc_pkey != NULL) ASN1_OCTET_STRING_free(x->enc_pkey);
d149 2
a150 2
	if ((x->key_data != NULL) && (x->key_free)) Free((char *)x->key_data);
	Free((char *)(char *)x);
@


1.1
log
@Initial revision
@
text
@d61 4
a64 6
#include "evp.h"
#include "objects.h"
#include "asn1_mac.h"

/* ASN1err(ASN1_F_D2I_X509_PKEY,ASN1_R_UNSUPPORTED_CIPHER); */
/* ASN1err(ASN1_F_X509_PKEY_NEW,ASN1_R_IV_TOO_LARGE); */
d67 1
a67 3
int i2d_X509_PKEY(a,pp)
X509_PKEY *a;
unsigned char **pp;
d72 1
a72 4
X509_PKEY *d2i_X509_PKEY(a,pp,length)
X509_PKEY **a;
unsigned char **pp;
long length;
d87 1
d96 1
d107 1
a107 1
X509_PKEY *X509_PKEY_new()
d110 1
d127 1
a127 2
void X509_PKEY_free(x)
X509_PKEY *x;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 6
a66 4
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/asn1_mac.h>
#include <openssl/x509.h>
d69 3
a71 1
int i2d_X509_PKEY(X509_PKEY *a, unsigned char **pp)
d76 4
a79 1
X509_PKEY *d2i_X509_PKEY(X509_PKEY **a, unsigned char **pp, long length)
a93 1
		c.line=__LINE__;
a101 1
			c.line=__LINE__;
d112 1
a112 1
X509_PKEY *X509_PKEY_new(void)
a114 1
	ASN1_CTX c;
d119 1
a119 1
	M_ASN1_New(ret->enc_pkey,M_ASN1_OCTET_STRING_new);
d131 2
a132 1
void X509_PKEY_free(X509_PKEY *x)
d152 1
a152 1
	if (x->enc_pkey != NULL) M_ASN1_OCTET_STRING_free(x->enc_pkey);
d154 2
a155 2
	if ((x->key_data != NULL) && (x->key_free)) OPENSSL_free(x->key_data);
	OPENSSL_free(x);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d72 1
a72 1
X509_PKEY *d2i_X509_PKEY(X509_PKEY **a, const unsigned char **pp, long length)
d79 2
a80 2
	M_ASN1_D2I_get_x(X509_ALGOR,ret->enc_algor,d2i_X509_ALGOR);
	M_ASN1_D2I_get_x(ASN1_OCTET_STRING,ret->enc_pkey,d2i_ASN1_OCTET_STRING);
@


