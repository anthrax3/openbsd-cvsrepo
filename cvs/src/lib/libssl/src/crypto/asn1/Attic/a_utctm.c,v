head	1.33;
access;
symbols
	OPENBSD_5_8:1.27.0.8
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.6
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.27.0.4
	OPENBSD_5_6_BASE:1.27
	butholakala:1.13
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.13.0.16
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.12
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.10
	OPENBSD_5_3_BASE:1.13
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.12.0.8
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.4
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.6
	pre_openssl_0_9_8h:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	openssl_0_9_7j:1.1.1.5
	openssl:1.1.1
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENSSL_0_9_7G:1.1.1.5
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.3
	OPENSSL_0_9_7_BETA3:1.1.1.3
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.33
date	2015.10.19.16.32.37;	author beck;	state dead;
branches;
next	1.32;
commitid	gN6dUlgzg63Qhn8s;

1.32
date	2015.10.08.02.42.58;	author beck;	state Exp;
branches;
next	1.31;
commitid	gfaMeH7CRo7l6q8K;

1.31
date	2015.10.08.02.29.11;	author beck;	state Exp;
branches;
next	1.30;
commitid	MZnxt0rsKVoCH7ju;

1.30
date	2015.10.08.02.26.31;	author beck;	state Exp;
branches;
next	1.29;
commitid	bD3TqYf40hqwlaJr;

1.29
date	2015.10.02.15.04.45;	author beck;	state Exp;
branches;
next	1.28;
commitid	qCopm45l75mxQGLg;

1.28
date	2015.09.30.18.26.07;	author jsing;	state Exp;
branches;
next	1.27;
commitid	vvyObL1nUtOFqNqJ;

1.27
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.26;
commitid	yQEL1wOWIearrW15;

1.26
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.25;
commitid	id8dTrTMtnTn4fqt;

1.25
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	mJUVYpkFBZ0Zv2bG;

1.24
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2014.05.15.21.06.10;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.21.11.23.09;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.19.13.29.11;	author jsing;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.18.23.42.00;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.15.17.46.16;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.08.08.03.12;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.06.09.22.53;	author ho;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.10.16.31.54;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.05.22.12.11;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.06;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.40;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.28;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.47;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.35.38;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.33;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.04.29.05.37.02;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Stop supporing "legcay" time formats that OpenSSL supports. Rewrite the
utctime and gentime wrappers accordingly. Along with some other cleanup.
this also removes the need for timegm.
ok bcook@@ sthen@@ jsing@@
@
text
@/* $OpenBSD: a_utctm.c,v 1.32 2015/10/08 02:42:58 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>
#include <time.h>

#include <openssl/asn1.h>
#include <openssl/err.h>

#include "o_time.h"
#include "asn1_locl.h"

int
ASN1_UTCTIME_check(ASN1_UTCTIME *d)
{
	if (d->type != V_ASN1_UTCTIME)
		return (0);
	return(d->type == asn1_time_parse(d->data, d->length, NULL, d->type));
}

int
ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
{
	ASN1_UTCTIME t;

	t.type = V_ASN1_UTCTIME;
	t.length = strlen(str);
	t.data = (unsigned char *)str;
	if (ASN1_UTCTIME_check(&t)) {
		if (s != NULL) {
			if (!ASN1_STRING_set((ASN1_STRING *)s,
			    (unsigned char *)str, t.length))
				return 0;
			s->type = V_ASN1_UTCTIME;
		}
		return (1);
	} else
		return (0);
}

ASN1_UTCTIME *
ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
{
	return ASN1_UTCTIME_adj(s, t, 0, 0);
}

static ASN1_UTCTIME *
ASN1_UTCTIME_adj_internal(ASN1_UTCTIME *s, time_t t, int offset_day,
    long offset_sec)
{
	char *p;
	struct tm *ts;
	struct tm data;

	ts = gmtime_r(&t, &data);
	if (ts == NULL)
		return (NULL);

	if (offset_day || offset_sec) {
		if (!OPENSSL_gmtime_adj(ts, offset_day, offset_sec))
			return NULL;
	}

	if ((p = utctime_string_from_tm(ts)) == NULL) {
		ASN1err(ASN1_F_ASN1_UTCTIME_ADJ, ERR_R_MALLOC_FAILURE);
		return (NULL);
	}
	free(s->data);
	s->data = p;
	s->length = strlen(p);

	s->type = V_ASN1_UTCTIME;
	return (s);
}

ASN1_UTCTIME *
ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t, int offset_day, long offset_sec)
{
	ASN1_UTCTIME *tmp = NULL, *ret;

	if (s == NULL) {
		tmp = ASN1_UTCTIME_new();
		if (tmp == NULL)
			return NULL;
		s = tmp;
	}

	ret = ASN1_UTCTIME_adj_internal(s, t, offset_day, offset_sec);
	if (ret == NULL && tmp != NULL)
		ASN1_UTCTIME_free(tmp);

	return ret;
}

int
ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t2)
{
	struct tm tm1;
	time_t t1;

	/*
	 * This function has never handled failure conditions properly
	 * and should be deprecated. BoringSSL makes it return -2 on
	 * failures, the OpenSSL version follows NULL pointers instead.
	 */
	if (asn1_time_parse(s->data, s->length, &tm1, V_ASN1_UTCTIME) == -1)
		return (-2); /* XXX */

	if ((t1 = timegm(&tm1)) == -1)
		return (-2); /* XXX */

	if (t1 < t2)
		return (-1);
	if (t1 > t2)
		return (1);
	return (0);
}
@


1.32
log
@Rip the guts out of another gibbering horror of a time comparison function, and
mark it as #ifndef LIBRESSL_INTERNAL at least we don't use this.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_utctm.c,v 1.31 2015/10/08 02:29:11 beck Exp $ */
@


1.31
log
@revert previous accidental commit
@
text
@d1 1
a1 1
/* $OpenBSD: a_utctm.c,v 1.29 2015/10/02 15:04:45 beck Exp $ */
d152 1
a152 1
ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
d154 2
a155 4
	struct tm *tm;
	struct tm data;
	int offset;
	int year;
d157 16
a172 28
#define g2(p) (((p)[0]-'0')*10+(p)[1]-'0')

	if (s->data[12] == 'Z')
		offset = 0;
	else {
		offset = g2(s->data + 13)*60 + g2(s->data + 15);
		if (s->data[12] == '-')
			offset = -offset;
	}

	t -= offset * 60; /* FIXME: may overflow in extreme cases */

	tm = gmtime_r(&t, &data);

#define return_cmp(a,b) if ((a)<(b)) return -1; else if ((a)>(b)) return 1
	year = g2(s->data);
	if (year < 50)
		year += 100;
	return_cmp(year, tm->tm_year);
	return_cmp(g2(s->data + 2) - 1, tm->tm_mon);
	return_cmp(g2(s->data + 4), tm->tm_mday);
	return_cmp(g2(s->data + 6), tm->tm_hour);
	return_cmp(g2(s->data + 8), tm->tm_min);
	return_cmp(g2(s->data + 10), tm->tm_sec);
#undef g2
#undef return_cmp

	return 0;
@


1.30
log
@Spelling in comment
@
text
@d154 4
a157 2
	struct tm tm1;
	time_t time1;
d159 28
a186 16
	/*
	 * This funciton has never handled failure conditions properly
	 * and should be deprecated. BoringSSL makes it return -2 on
	 * failures, the OpenSSL version follows NULL pointers instead.
	 */
	if (asn1_time_parse(s->data, s->length, &tm1, V_ASN1_UTCTIME) == -1)
		return (-2); /* XXX */

	if ((time1 = timegm(&tm1)) == -1)
		return (-2); /* XXX */

	if (time1 < t)
		return (-1);
	if (time1 > t)
		return (1);
	return (0);
@


1.29
log
@Flense the greasy black guts of unreadble string parsing code out of three areas
in asn1 and x509 code, all dealing with an ASN1_TIME. This brings the parsing
together in one function that converts into a struct tm. While we are at it this
also brings us into conformance with RFC 5280 for times allowed in an X509 cert,
as OpenSSL is very liberal with what it allows.
input and fixes from deraadt@@ jsing@@ guethther@@ and others.
ok krw@@, guenther@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_utctm.c,v 1.28 2015/09/30 18:26:07 jsing Exp $ */
d154 2
a155 4
	struct tm *tm;
	struct tm data;
	int offset;
	int year;
d157 16
a172 28
#define g2(p) (((p)[0]-'0')*10+(p)[1]-'0')

	if (s->data[12] == 'Z')
		offset = 0;
	else {
		offset = g2(s->data + 13)*60 + g2(s->data + 15);
		if (s->data[12] == '-')
			offset = -offset;
	}

	t -= offset * 60; /* FIXME: may overflow in extreme cases */

	tm = gmtime_r(&t, &data);

#define return_cmp(a,b) if ((a)<(b)) return -1; else if ((a)>(b)) return 1
	year = g2(s->data);
	if (year < 50)
		year += 100;
	return_cmp(year, tm->tm_year);
	return_cmp(g2(s->data + 2) - 1, tm->tm_mon);
	return_cmp(g2(s->data + 4), tm->tm_mday);
	return_cmp(g2(s->data + 6), tm->tm_hour);
	return_cmp(g2(s->data + 8), tm->tm_min);
	return_cmp(g2(s->data + 10), tm->tm_sec);
#undef g2
#undef return_cmp

	return 0;
@


1.28
log
@Replace M_ASN1_UTCTIME_(new|free) with ASN1_UTCTIME_(new|free).
@
text
@d1 1
a1 1
/* $OpenBSD: a_utctm.c,v 1.27 2014/07/11 08:44:47 jsing Exp $ */
d67 1
a71 5
	static const int min[8] = {0, 1, 1, 0, 0, 0, 0, 0};
	static const int max[8] = {99, 12, 31, 23, 59, 59, 12, 59};
	char *a;
	int n, i, l, o;

d74 1
a74 49
	l = d->length;
	a = (char *)d->data;
	o = 0;

	if (l < 11)

		goto err;
	for (i = 0; i < 6; i++) {
		if ((i == 5) && ((a[o] == 'Z') ||
		    (a[o] == '+') || (a[o] == '-'))) {
			i++;
			break;
		}
		if ((a[o] < '0') || (a[o] > '9'))
			goto err;
		n = a[o]-'0';
		if (++o > l)
			goto err;
		if ((a[o] < '0') || (a[o] > '9'))
			goto err;
		n = (n * 10) + a[o] - '0';
		if (++o > l)
			goto err;
		if ((n < min[i]) || (n > max[i]))
			goto err;
	}
	if (a[o] == 'Z')
		o++;
	else if ((a[o] == '+') || (a[o] == '-')) {
		o++;
		if (o + 4 > l)
			goto err;
		for (i = 6; i < 8; i++) {
			if ((a[o] < '0') || (a[o] > '9'))
				goto err;
			n = a[o] -'0';
			o++;
			if ((a[o] < '0') || (a[o] > '9'))
				goto err;
			n = (n * 10) + a[o] - '0';
			if ((n < min[i]) || (n > max[i]))
				goto err;
			o++;
		}
	}
	return (o == l);

err:
	return (0);
a109 1
	size_t len = 20;
d120 3
a122 12
	if ((ts->tm_year < 50) || (ts->tm_year >= 150))
		return NULL;

	p = (char *)s->data;
	if ((p == NULL) || ((size_t)s->length < len)) {
		p = malloc(len);
		if (p == NULL) {
			ASN1err(ASN1_F_ASN1_UTCTIME_ADJ, ERR_R_MALLOC_FAILURE);
			return (NULL);
		}
		free(s->data);
		s->data = (unsigned char *)p;
d124 3
a127 3
	snprintf(p, len, "%02d%02d%02d%02d%02d%02dZ", ts->tm_year % 100,
	    ts->tm_mon + 1, ts->tm_mday, ts->tm_hour, ts->tm_min, ts->tm_sec);
	s->length = strlen(p);
@


1.27
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_utctm.c,v 1.26 2014/07/10 13:58:22 jsing Exp $ */
d200 1
a200 1
		tmp = M_ASN1_UTCTIME_new();
d208 1
a208 1
		M_ASN1_UTCTIME_free(tmp);
@


1.26
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_utctm.c,v 1.25 2014/06/12 15:49:27 deraadt Exp $ */
d63 3
a65 1
#include "cryptlib.h"
a66 1
#include <openssl/asn1.h>
@


1.25
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
d62 1
@


1.24
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/asn1/a_utctm.c */
@


1.23
log
@Replace ASN1_GENERALIZEDTIME_adj(), ASN1_UTCTIME_adj() and
ASN1_TIME_to_generalizedtime() with wrappers around their former
implementations, making sure memory allocated is freed in all failure cases.

help and ok from beck@@ and Brendan MacDonell.
@
text
@d180 1
a180 2
		if (s->data != NULL)
			free(s->data);
@


1.22
log
@Delete #if 0'd time related functions which are totally expired.
No point even seeing these when we do the 2038 audit later on...
@
text
@d152 3
a154 2
ASN1_UTCTIME *
ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t, int offset_day, long offset_sec)
a160 5
	if (s == NULL)
		s = M_ASN1_UTCTIME_new();
	if (s == NULL)
		return (NULL);

d190 19
@


1.21
log
@More KNF.
@
text
@a64 33
#if 0
int
i2d_ASN1_UTCTIME(ASN1_UTCTIME *a, unsigned char **pp)
{
	return(i2d_ASN1_bytes((ASN1_STRING *)a, pp,
	    V_ASN1_UTCTIME, V_ASN1_UNIVERSAL));
}

ASN1_UTCTIME *
d2i_ASN1_UTCTIME(ASN1_UTCTIME **a, unsigned char **pp, long length)
{
	ASN1_UTCTIME *ret = NULL;

	ret = (ASN1_UTCTIME *)d2i_ASN1_bytes((ASN1_STRING **)a, pp, length,
	    V_ASN1_UTCTIME, V_ASN1_UNIVERSAL);
	if (ret == NULL) {
		ASN1err(ASN1_F_D2I_ASN1_UTCTIME, ERR_R_NESTED_ASN1_ERROR);
		return (NULL);
	}
	if (!ASN1_UTCTIME_check(ret)) {
		ASN1err(ASN1_F_D2I_ASN1_UTCTIME, ASN1_R_INVALID_TIME_FORMAT);
		goto err;
	}
	return (ret);

err:
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
		M_ASN1_UTCTIME_free(ret);
	return (NULL);
}

#endif

a232 38

#if 0
time_t
ASN1_UTCTIME_get(const ASN1_UTCTIME *s)
{
	struct tm tm;
	int offset;

	memset(&tm, '\0', sizeof tm);

#define g2(p) (((p)[0]-'0')*10+(p)[1]-'0')
	tm.tm_year = g2(s->data);
	if (tm.tm_year < 50)
		tm.tm_year += 100;
	tm.tm_mon = g2(s->data + 2) - 1;
	tm.tm_mday = g2(s->data + 4);
	tm.tm_hour = g2(s->data + 6);
	tm.tm_min = g2(s->data + 8);
	tm.tm_sec = g2(s->data + 10);
	if (s->data[12] == 'Z')
		offset = 0;
	else {
		offset = g2(s->data + 13) * 60 + g2(s->data + 15);
		if (s->data[12] == '-')
			offset = -offset;
	}
#undef g2

	return mktime(&tm)-offset*60; /* FIXME: mktime assumes the current timezone
	                               * instead of UTC, and unless we rewrite OpenSSL
				       * in Lisp we cannot locally change the timezone
				       * without possibly interfering with other parts
	                               * of the program. timegm, which uses UTC, is
				       * non-standard.
	                               * Also time_t is inappropriate for general
	                               * UTC times because it may a 32 bit type. */
}
#endif
@


1.20
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 2
a67 1
int i2d_ASN1_UTCTIME(ASN1_UTCTIME *a, unsigned char **pp)
d69 2
a70 2
	return(i2d_ASN1_bytes((ASN1_STRING *)a,pp,
		V_ASN1_UTCTIME,V_ASN1_UNIVERSAL));
d73 2
a74 3

ASN1_UTCTIME *d2i_ASN1_UTCTIME(ASN1_UTCTIME **a, unsigned char **pp,
	     long length)
d76 1
a76 1
	ASN1_UTCTIME *ret=NULL;
d78 2
a79 2
	ret=(ASN1_UTCTIME *)d2i_ASN1_bytes((ASN1_STRING **)a,pp,length,
		V_ASN1_UTCTIME,V_ASN1_UNIVERSAL);
d81 2
a82 2
		ASN1err(ASN1_F_D2I_ASN1_UTCTIME,ERR_R_NESTED_ASN1_ERROR);
		return(NULL);
d85 1
a85 1
		ASN1err(ASN1_F_D2I_ASN1_UTCTIME,ASN1_R_INVALID_TIME_FORMAT);
d88 1
a89 1
	return(ret);
d93 1
a93 1
	return(NULL);
d98 2
a99 1
int ASN1_UTCTIME_check(ASN1_UTCTIME *d)
d101 2
a102 2
	static const int min[8]={ 0, 1, 1, 0, 0, 0, 0, 0};
	static const int max[8]={99,12,31,23,59,59,12,59};
d104 7
a110 1
	int n,i,l,o;
d112 1
a112 4
	if (d->type != V_ASN1_UTCTIME) return(0);
	l=d->length;
	a=(char *)d->data;
	o=0;
d114 2
a115 2
	if (l < 11) goto err;
	for (i=0; i<6; i++) {
d121 12
a132 9
		if ((a[o] < '0') || (a[o] > '9')) goto err;
		n= a[o]-'0';
		if (++o > l) goto err;

		if ((a[o] < '0') || (a[o] > '9')) goto err;
		n=(n*10)+ a[o]-'0';
		if (++o > l) goto err;

		if ((n < min[i]) || (n > max[i])) goto err;
d138 6
a143 4
		if (o+4 > l) goto err;
		for (i=6; i<8; i++) {
			if ((a[o] < '0') || (a[o] > '9')) goto err;
			n= a[o]-'0';
d145 5
a149 3
			if ((a[o] < '0') || (a[o] > '9')) goto err;
			n=(n*10)+ a[o]-'0';
			if ((n < min[i]) || (n > max[i])) goto err;
d153 2
a154 1
	return(o == l);
d156 1
a156 1
	return(0);
d159 2
a160 1
int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
d164 3
a166 3
	t.type=V_ASN1_UTCTIME;
	t.length=strlen(str);
	t.data=(unsigned char *)str;
d170 1
a170 1
				(unsigned char *)str,t.length))
d174 1
a174 1
		return(1);
d176 1
a176 1
		return(0);
d179 2
a180 1
ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
d185 2
a186 2
ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
				int offset_day, long offset_sec)
d194 1
a194 1
		s=M_ASN1_UTCTIME_new();
d196 1
a196 1
		return(NULL);
d198 1
a198 1
	ts=gmtime_r(&t, &data);
d200 1
a200 1
		return(NULL);
d202 1
a202 1
	if (offset_day || offset_sec) { 
d207 1
a207 1
	if((ts->tm_year < 50) || (ts->tm_year >= 150))
d210 1
a210 1
	p=(char *)s->data;
d212 1
a212 1
		p=malloc(len);
d214 2
a215 2
			ASN1err(ASN1_F_ASN1_UTCTIME_ADJ,ERR_R_MALLOC_FAILURE);
			return(NULL);
d219 1
a219 1
		s->data=(unsigned char *)p;
d222 5
a226 5
	snprintf(p,len,"%02d%02d%02d%02d%02d%02dZ",ts->tm_year%100,
		     ts->tm_mon+1,ts->tm_mday,ts->tm_hour,ts->tm_min,ts->tm_sec);
	s->length=strlen(p);
	s->type=V_ASN1_UTCTIME;
	return(s);
d229 2
a230 2

int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
d240 1
a240 1
		offset=0;
d242 1
a242 1
		offset = g2(s->data+13)*60+g2(s->data+15);
d247 1
a247 1
	t -= offset*60; /* FIXME: may overflow in extreme cases */
d250 1
a250 1
	
d255 6
a260 6
	return_cmp(year,              tm->tm_year);
	return_cmp(g2(s->data+2) - 1, tm->tm_mon);
	return_cmp(g2(s->data+4),     tm->tm_mday);
	return_cmp(g2(s->data+6),     tm->tm_hour);
	return_cmp(g2(s->data+8),     tm->tm_min);
	return_cmp(g2(s->data+10),    tm->tm_sec);
a266 1

d268 2
a269 1
time_t ASN1_UTCTIME_get(const ASN1_UTCTIME *s)
d274 1
a274 1
	memset(&tm,'\0',sizeof tm);
d277 10
a286 10
	tm.tm_year=g2(s->data);
	if(tm.tm_year < 50)
		tm.tm_year+=100;
	tm.tm_mon=g2(s->data+2)-1;
	tm.tm_mday=g2(s->data+4);
	tm.tm_hour=g2(s->data+6);
	tm.tm_min=g2(s->data+8);
	tm.tm_sec=g2(s->data+10);
	if(s->data[12] == 'Z')
		offset=0;
d288 3
a290 3
		offset=g2(s->data+13)*60+g2(s->data+15);
		if(s->data[12] == '-')
			offset= -offset;
@


1.19
log
@OPENSSL_gmtime() is really just gmtime_r(); ok guenther
@
text
@d208 1
a208 1
	(void) snprintf(p,len,"%02d%02d%02d%02d%02d%02dZ",ts->tm_year%100,
@


1.18
log
@lob a few more knf grenades in here to soften things up.
@
text
@d184 1
a184 1
	ts=OPENSSL_gmtime(&t, &data);
d235 1
a235 1
	tm = OPENSSL_gmtime(&t, &data);
@


1.17
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d80 1
a80 2
	if (ret == NULL)
	{
d84 1
a84 2
	if (!ASN1_UTCTIME_check(ret))
	{
d111 1
a111 2
	for (i=0; i<6; i++)
	{
d113 4
a116 2
			(a[o] == '+') || (a[o] == '-')))
		{ i++; break; }
d129 1
a129 2
	else if ((a[o] == '+') || (a[o] == '-'))
	{
d132 1
a132 2
		for (i=6; i<8; i++)
		{
d154 2
a155 4
	if (ASN1_UTCTIME_check(&t))
	{
		if (s != NULL)
		{
d162 1
a162 2
	}
	else
d188 1
a188 2
	if (offset_day || offset_sec)
	{ 
d197 1
a197 2
	if ((p == NULL) || ((size_t)s->length < len))
	{
d199 1
a199 2
		if (p == NULL)
		{
d227 1
a227 2
	else
	{
d273 1
a273 2
	else
	{
@


1.16
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d67 1
a67 1
	{
d70 1
a70 1
	}
d75 1
a75 1
	{
d81 1
a81 1
		{
d84 1
a84 1
		}
d86 1
a86 1
		{
d89 1
a89 1
		}
d96 1
a96 1
	}
d101 1
a101 1
	{
d114 1
a114 1
		{
d117 1
a117 1
			{ i++; break; }
d127 1
a127 1
		}
d131 1
a131 1
		{
d135 1
a135 1
			{
a142 1
			}
d144 1
d148 1
a148 1
	}
d151 1
a151 1
	{
d158 2
a160 2
		if (s != NULL)
			{
d165 1
a165 1
			}
d167 1
a167 1
		}
d170 1
a170 1
	}
d173 1
a173 1
	{
d175 1
a175 1
	}
d179 1
a179 1
	{
d195 1
a195 1
		{ 
d198 1
a198 1
		}
d205 1
a205 1
		{
d208 1
a208 1
			{
d211 1
a211 1
			}
d215 1
a215 1
		}
d222 1
a222 1
	}
d226 1
a226 1
	{
d237 1
a237 1
		{
d241 1
a241 1
		}
d261 1
a261 1
	}
d266 1
a266 1
	{
d284 1
a284 1
		{
d288 1
a288 1
		}
d299 1
a299 1
	}
@


1.15
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d206 1
a206 1
		p=OPENSSL_malloc(len);
d213 1
a213 1
			OPENSSL_free(s->data);
@


1.14
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@a67 1
#ifndef CHARSET_EBCDIC
a69 11
#else
	/* KLUDGE! We convert to ascii before writing DER */
	int len;
	char tmp[24];
	ASN1_STRING x = *(ASN1_STRING *)a;

	len = x.length;
	ebcdic2ascii(tmp, x.data, (len >= sizeof tmp) ? sizeof tmp : len);
	x.data = tmp;
	return i2d_ASN1_bytes(&x, pp, V_ASN1_UTCTIME,V_ASN1_UNIVERSAL);
#endif
a84 3
#ifdef CHARSET_EBCDIC
	ascii2ebcdic(ret->data, ret->data, ret->length);
#endif
a220 3
#ifdef CHARSET_EBCDIC_not
	ebcdic2ascii(s->data, s->data, s->length);
#endif
@


1.13
log
@resolve conflicts, fix local changes
@
text
@d232 1
a232 1
	BIO_snprintf(p,len,"%02d%02d%02d%02d%02d%02dZ",ts->tm_year%100,
@


1.12
log
@resolve conflicts
@
text
@d117 2
a118 2
	static int min[8]={ 0, 1, 1, 0, 0, 0, 0, 0};
	static int max[8]={99,12,31,23,59,59,12,59};
d189 6
d209 9
d224 1
a224 1
			ASN1err(ASN1_F_ASN1_UTCTIME_SET,ERR_R_MALLOC_FAILURE);
@


1.11
log
@resolve conflicts
@
text
@d165 1
a165 1
int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, char *str)
@


1.10
log
@merge 0.9.7d
@
text
@d176 3
a178 2
			ASN1_STRING_set((ASN1_STRING *)s,
				(unsigned char *)str,t.length);
d207 5
a211 1
		if (p == NULL) return(NULL);
@


1.9
log
@sprintf->snprintf. deraadt@@ suggestions and ok
@
text
@d203 1
a203 1
	if ((p == NULL) || (s->length < len))
d212 2
a213 2
	snprintf(p,len,"%02d%02d%02d%02d%02d%02dZ",ts->tm_year%100,
		 ts->tm_mon+1,ts->tm_mday,ts->tm_hour,ts->tm_min,ts->tm_sec);
@


1.8
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d191 1
d203 1
a203 1
	if ((p == NULL) || (s->length < 14))
d205 1
a205 1
		p=OPENSSL_malloc(20);
d212 2
a213 2
	sprintf(p,"%02d%02d%02d%02d%02d%02dZ",ts->tm_year%100,
		ts->tm_mon+1,ts->tm_mday,ts->tm_hour,ts->tm_min,ts->tm_sec);
@


1.7
log
@merge with 0.9.7-beta1
@
text
@d225 1
d242 1
a242 1
	{ struct tm data; tm = OPENSSL_gmtime(&t, &data); }
@


1.6
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@a224 1
	struct tm data;
d241 1
a241 1
	tm = OPENSSL_gmtime(&t, &data);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d225 1
d242 1
a242 1
	{ struct tm data; tm = OPENSSL_gmtime(&t, &data); }
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@a60 5
#ifdef VMS
#include <descrip.h>
#include <lnmdef.h>
#include <starlet.h>
#endif
d62 1
d65 1
a65 6
ASN1_UTCTIME *ASN1_UTCTIME_new(void)
{ return M_ASN1_UTCTIME_new(); }

void ASN1_UTCTIME_free(ASN1_UTCTIME *x)
{ M_ASN1_UTCTIME_free(x); }

d113 2
d178 1
a189 2
#if defined(THREADS) && !defined(WIN32) && !defined(__CYGWIN32__)

a190 1
#endif
d197 1
a197 7
#if defined(THREADS) && !defined(WIN32) && !defined(__CYGWIN32__)
	gmtime_r(&t,&data); /* should return &data, but doesn't on some systems, so we don't even look at the return value */
	ts=&data;
#else
	ts=gmtime(&t);
#endif
#ifdef VMS
d199 1
a199 30
		{
		static $DESCRIPTOR(tabnam,"LNM$DCL_LOGICAL");
		static $DESCRIPTOR(lognam,"SYS$TIMEZONE_DIFFERENTIAL");
		char result[256];
		unsigned int reslen = 0;
		struct {
			short buflen;
			short code;
			void *bufaddr;
			unsigned int *reslen;
		} itemlist[] = {
			{ 0, LNM$_STRING, 0, 0 },
			{ 0, 0, 0, 0 },
		};
		int status;

		/* Get the value for SYS$TIMEZONE_DIFFERENTIAL */
		itemlist[0].buflen = sizeof(result);
		itemlist[0].bufaddr = result;
		itemlist[0].reslen = &reslen;
		status = sys$trnlnm(0, &tabnam, &lognam, 0, itemlist);
		if (!(status & 1))
			return NULL;
		result[reslen] = '\0';

		/* Get the numerical value of the equivalence string */
		status = atoi(result);

		/* and use it to move time to GMT */
		t -= status;
a200 4
		/* then convert the result to the time structure */
		ts=(struct tm *)localtime(&t);
		}
#endif
d241 1
a241 5
#if defined(THREADS) && !defined(WIN32) && !defined(__CYGWIN32__)
	{ struct tm data; gmtime_r(&t, &data); tm = &data; }
#else
	tm = gmtime(&t);
#endif
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d196 2
a197 1
#if defined(THREADS) && !defined(WIN32)
d206 1
a206 1
#if defined(THREADS) && !defined(WIN32)
d252 1
a252 1
		p=Malloc(20);
d255 1
a255 1
			Free(s->data);
d268 81
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d69 6
d118 1
a118 1
		ASN1_UTCTIME_free(ret);
d201 1
a201 1
		s=ASN1_UTCTIME_new();
@


1.1
log
@Initial revision
@
text
@d61 5
d67 1
a67 1
#include "asn1.h"
d69 1
a69 7
/* ASN1err(ASN1_F_ASN1_UTCTIME_NEW,ASN1_R_UTCTIME_TOO_LONG);
 * ASN1err(ASN1_F_D2I_ASN1_UTCTIME,ASN1_R_EXPECTING_A_UTCTIME);
 */

int i2d_ASN1_UTCTIME(a,pp)
ASN1_UTCTIME *a;
unsigned char **pp;
d71 1
d74 11
d88 2
a89 4
ASN1_UTCTIME *d2i_ASN1_UTCTIME(a, pp, length)
ASN1_UTCTIME **a;
unsigned char **pp;
long length;
d97 1
a97 1
		ASN1err(ASN1_F_D2I_ASN1_UTCTIME,ASN1_R_ERROR_STACK);
d100 3
d116 1
a116 2
int ASN1_UTCTIME_check(d)
ASN1_UTCTIME *d;
d166 1
a166 3
int ASN1_UTCTIME_set_string(s,str)
ASN1_UTCTIME *s;
char *str;
d186 1
a186 3
ASN1_UTCTIME *ASN1_UTCTIME_set(s, t)
ASN1_UTCTIME *s;
time_t t;
d190 1
a190 1
#if defined(THREADS)
d199 3
a201 2
#if defined(THREADS)
	ts=(struct tm *)gmtime_r(&t,&data);
d203 38
a240 1
	ts=(struct tm *)gmtime(&t);
d256 3
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 1
a62 2
#include "o_time.h"
#include <openssl/asn1.h>
d64 7
a70 2
#if 0
int i2d_ASN1_UTCTIME(ASN1_UTCTIME *a, unsigned char **pp)
a71 1
#ifndef CHARSET_EBCDIC
a73 11
#else
	/* KLUDGE! We convert to ascii before writing DER */
	int len;
	char tmp[24];
	ASN1_STRING x = *(ASN1_STRING *)a;

	len = x.length;
	ebcdic2ascii(tmp, x.data, (len >= sizeof tmp) ? sizeof tmp : len);
	x.data = tmp;
	return i2d_ASN1_bytes(&x, pp, V_ASN1_UTCTIME,V_ASN1_UNIVERSAL);
#endif
d77 4
a80 2
ASN1_UTCTIME *d2i_ASN1_UTCTIME(ASN1_UTCTIME **a, unsigned char **pp,
	     long length)
d88 1
a88 1
		ASN1err(ASN1_F_D2I_ASN1_UTCTIME,ERR_R_NESTED_ASN1_ERROR);
a90 3
#ifdef CHARSET_EBCDIC
	ascii2ebcdic(ret->data, ret->data, ret->length);
#endif
d100 1
a100 1
		M_ASN1_UTCTIME_free(ret);
d104 2
a105 3
#endif

int ASN1_UTCTIME_check(ASN1_UTCTIME *d)
d155 3
a157 1
int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, char *str)
a169 1
			s->type = V_ASN1_UTCTIME;
d177 3
a179 1
ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
d183 1
d185 1
d188 1
a188 1
		s=M_ASN1_UTCTIME_new();
d192 5
a196 4
	ts=OPENSSL_gmtime(&t, &data);
	if (ts == NULL)
		return(NULL);

d200 1
a200 1
		p=OPENSSL_malloc(20);
d203 1
a203 1
			OPENSSL_free(s->data);
a210 3
#ifdef CHARSET_EBCDIC_not
	ebcdic2ascii(s->data, s->data, s->length);
#endif
a212 77


int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
	{
	struct tm *tm;
	int offset;
	int year;

#define g2(p) (((p)[0]-'0')*10+(p)[1]-'0')

	if (s->data[12] == 'Z')
		offset=0;
	else
		{
		offset = g2(s->data+13)*60+g2(s->data+15);
		if (s->data[12] == '-')
			offset = -offset;
		}

	t -= offset*60; /* FIXME: may overflow in extreme cases */

	{ struct tm data; tm = OPENSSL_gmtime(&t, &data); }
	
#define return_cmp(a,b) if ((a)<(b)) return -1; else if ((a)>(b)) return 1
	year = g2(s->data);
	if (year < 50)
		year += 100;
	return_cmp(year,              tm->tm_year);
	return_cmp(g2(s->data+2) - 1, tm->tm_mon);
	return_cmp(g2(s->data+4),     tm->tm_mday);
	return_cmp(g2(s->data+6),     tm->tm_hour);
	return_cmp(g2(s->data+8),     tm->tm_min);
	return_cmp(g2(s->data+10),    tm->tm_sec);
#undef g2
#undef return_cmp

	return 0;
	}


#if 0
time_t ASN1_UTCTIME_get(const ASN1_UTCTIME *s)
	{
	struct tm tm;
	int offset;

	memset(&tm,'\0',sizeof tm);

#define g2(p) (((p)[0]-'0')*10+(p)[1]-'0')
	tm.tm_year=g2(s->data);
	if(tm.tm_year < 50)
		tm.tm_year+=100;
	tm.tm_mon=g2(s->data+2)-1;
	tm.tm_mday=g2(s->data+4);
	tm.tm_hour=g2(s->data+6);
	tm.tm_min=g2(s->data+8);
	tm.tm_sec=g2(s->data+10);
	if(s->data[12] == 'Z')
		offset=0;
	else
		{
		offset=g2(s->data+13)*60+g2(s->data+15);
		if(s->data[12] == '-')
			offset= -offset;
		}
#undef g2

	return mktime(&tm)-offset*60; /* FIXME: mktime assumes the current timezone
	                               * instead of UTC, and unless we rewrite OpenSSL
				       * in Lisp we cannot locally change the timezone
				       * without possibly interfering with other parts
	                               * of the program. timegm, which uses UTC, is
				       * non-standard.
	                               * Also time_t is inappropriate for general
	                               * UTC times because it may a 32 bit type. */
	}
#endif
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@a224 1
	struct tm data;
d241 1
a241 1
	tm = OPENSSL_gmtime(&t, &data);
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@a190 1
	size_t len = 20;
d202 1
a202 1
	if ((p == NULL) || ((size_t)s->length < len))
d204 1
a204 1
		p=OPENSSL_malloc(len);
d211 2
a212 2
	BIO_snprintf(p,len,"%02d%02d%02d%02d%02d%02dZ",ts->tm_year%100,
		     ts->tm_mon+1,ts->tm_mday,ts->tm_hour,ts->tm_min,ts->tm_sec);
@


1.1.1.5
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d176 2
a177 3
			if (!ASN1_STRING_set((ASN1_STRING *)s,
				(unsigned char *)str,t.length))
				return 0;
d206 1
a206 5
		if (p == NULL)
			{
			ASN1err(ASN1_F_ASN1_UTCTIME_SET,ERR_R_MALLOC_FAILURE);
			return(NULL);
			}
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d165 1
a165 1
int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d117 2
a118 2
	static const int min[8]={ 0, 1, 1, 0, 0, 0, 0, 0};
	static const int max[8]={99,12,31,23,59,59,12,59};
a188 6
	return ASN1_UTCTIME_adj(s, t, 0, 0);
	}

ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
				int offset_day, long offset_sec)
	{
a202 9
	if (offset_day || offset_sec)
		{ 
		if (!OPENSSL_gmtime_adj(ts, offset_day, offset_sec))
			return NULL;
		}

	if((ts->tm_year < 50) || (ts->tm_year >= 150))
		return NULL;

d209 1
a209 1
			ASN1err(ASN1_F_ASN1_UTCTIME_ADJ,ERR_R_MALLOC_FAILURE);
@


