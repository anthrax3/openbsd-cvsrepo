head	1.26;
access;
symbols
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.4
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.26
date	2015.10.19.16.32.37;	author beck;	state dead;
branches;
next	1.25;
commitid	gN6dUlgzg63Qhn8s;

1.25
date	2015.10.02.15.04.45;	author beck;	state Exp;
branches;
next	1.24;
commitid	qCopm45l75mxQGLg;

1.24
date	2015.09.30.18.04.02;	author jsing;	state Exp;
branches;
next	1.23;
commitid	XW9OIeABPcn8Y4ca;

1.23
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.22;
commitid	gtwLkRyWx0K1HbzX;

1.22
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.21;
commitid	yQEL1wOWIearrW15;

1.21
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.20;
commitid	id8dTrTMtnTn4fqt;

1.20
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	mJUVYpkFBZ0Zv2bG;

1.19
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2014.05.15.21.06.10;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.23.42.00;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.07.09.23;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.15.17.46.16;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.08.08.03.12;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.06.09.22.53;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.05;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.08.36;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.26;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.44;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.04.07.20.41.32;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.01;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Stop supporing "legcay" time formats that OpenSSL supports. Rewrite the
utctime and gentime wrappers accordingly. Along with some other cleanup.
this also removes the need for timegm.
ok bcook@@ sthen@@ jsing@@
@
text
@/* $OpenBSD: a_gentm.c,v 1.25 2015/10/02 15:04:45 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 *	 SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* GENERALIZEDTIME implementation, written by Steve Henson. Based on UTCTIME */

#include <stdio.h>
#include <string.h>
#include <time.h>

#include <openssl/asn1.h>
#include <openssl/err.h>

#include "o_time.h"
#include "asn1_locl.h"

int
ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME *d)
{
	if (d->type != V_ASN1_GENERALIZEDTIME)
		return (0);
	return (d->type == asn1_time_parse(d->data, d->length, NULL, d->type));
}

int
ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
{
	ASN1_GENERALIZEDTIME t;

	t.type = V_ASN1_GENERALIZEDTIME;
	t.length = strlen(str);
	t.data = (unsigned char *)str;
	if (ASN1_GENERALIZEDTIME_check(&t)) {
		if (s != NULL) {
			if (!ASN1_STRING_set((ASN1_STRING *)s,
			    (unsigned char *)str, t.length))
				return 0;
			s->type = V_ASN1_GENERALIZEDTIME;
		}
		return (1);
	} else
		return (0);
}

ASN1_GENERALIZEDTIME *
ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s, time_t t)
{
	return ASN1_GENERALIZEDTIME_adj(s, t, 0, 0);
}

static ASN1_GENERALIZEDTIME *
ASN1_GENERALIZEDTIME_adj_internal(ASN1_GENERALIZEDTIME *s, time_t t,
    int offset_day, long offset_sec)
{
	char *p;
	struct tm *tm;
	struct tm data;

	tm = gmtime_r(&t, &data);
	if (tm == NULL)
		return (NULL);

	if (offset_day || offset_sec) {
		if (!OPENSSL_gmtime_adj(tm, offset_day, offset_sec))
			return NULL;
	}

	if ((p = gentime_string_from_tm(tm)) == NULL) {
		ASN1err(ASN1_F_ASN1_GENERALIZEDTIME_ADJ, ERR_R_MALLOC_FAILURE);
		return (NULL);
	}
	free(s->data);
	s->data = p;
	s->length = strlen(p);

	s->type = V_ASN1_GENERALIZEDTIME;
	return (s);
}

ASN1_GENERALIZEDTIME *
ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s, time_t t, int offset_day,
    long offset_sec)
{
	ASN1_GENERALIZEDTIME *tmp = NULL, *ret;

	if (s == NULL) {
		tmp = ASN1_GENERALIZEDTIME_new();
		if (tmp == NULL)
			return NULL;
		s = tmp;
	}

	ret = ASN1_GENERALIZEDTIME_adj_internal(s, t, offset_day, offset_sec);
	if (ret == NULL && tmp != NULL)
		ASN1_GENERALIZEDTIME_free(tmp);

	return ret;

}
@


1.25
log
@Flense the greasy black guts of unreadble string parsing code out of three areas
in asn1 and x509 code, all dealing with an ASN1_TIME. This brings the parsing
together in one function that converts into a struct tm. While we are at it this
also brings us into conformance with RFC 5280 for times allowed in an X509 cert,
as OpenSSL is very liberal with what it allows.
input and fixes from deraadt@@ jsing@@ guethther@@ and others.
ok krw@@, guenther@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_gentm.c,v 1.24 2015/09/30 18:04:02 jsing Exp $ */
@


1.24
log
@Replace M_ASN1_GENERALIZEDTIME_(new|free) with
ASN1_GENERALIZEDTIME_(new|free).
@
text
@d1 1
a1 1
/* $OpenBSD: a_gentm.c,v 1.23 2015/02/07 13:19:15 doug Exp $ */
d69 1
a73 5
	static const int min[9] = {0, 0, 1, 1, 0, 0, 0, 0, 0};
	static const int max[9] = {99, 99, 12, 31, 23, 59, 59, 12, 59};
	char *a;
	int n, i, l, o;

d76 1
a76 69
	l = d->length;
	a = (char *)d->data;
	o = 0;
	/* GENERALIZEDTIME is similar to UTCTIME except the year is
         * represented as YYYY. This stuff treats everything as a two digit
         * field so make first two fields 00 to 99
         */
	if (l < 13)
		goto err;
	for (i = 0; i < 7; i++) {
		if ((i == 6) && ((a[o] == 'Z') ||
		    (a[o] == '+') || (a[o] == '-'))) {
			i++;
			break;
		}
		if ((a[o] < '0') || (a[o] > '9'))
			goto err;
		n= a[o]-'0';
		if (++o > l)
			goto err;

		if ((a[o] < '0') || (a[o] > '9'))
			goto err;
		n = (n * 10)+ a[o] - '0';
		if (++o > l)
			goto err;

		if ((n < min[i]) || (n > max[i]))
			goto err;
	}
	/* Optional fractional seconds: decimal point followed by one
	 * or more digits.
	 */
	if (a[o] == '.') {
		if (++o > l)
			goto err;
		i = o;
		while ((a[o] >= '0') && (a[o] <= '9') && (o <= l))
			o++;
		/* Must have at least one digit after decimal point */
		if (i == o)
			goto err;
	}

	if (a[o] == 'Z')
		o++;
	else if ((a[o] == '+') || (a[o] == '-')) {
		o++;
		if (o + 4 > l)
			goto err;
		for (i = 7; i < 9; i++) {
			if ((a[o] < '0') || (a[o] > '9'))
				goto err;
			n = a[o] - '0';
			o++;
			if ((a[o] < '0') || (a[o] > '9'))
				goto err;
			n = (n * 10) + a[o] - '0';
			if ((n < min[i]) || (n > max[i]))
				goto err;
			o++;
		}
	} else {
		/* Missing time zone information. */
		goto err;
	}
	return (o == l);
err:
	return (0);
d110 1
a110 1
	struct tm *ts;
a111 1
	size_t len = 20;
d113 2
a114 2
	ts = gmtime_r(&t, &data);
	if (ts == NULL)
d118 1
a118 1
		if (!OPENSSL_gmtime_adj(ts, offset_day, offset_sec))
d122 3
a124 10
	p = (char *)s->data;
	if ((p == NULL) || ((size_t)s->length < len)) {
		p = malloc(len);
		if (p == NULL) {
			ASN1err(ASN1_F_ASN1_GENERALIZEDTIME_ADJ,
			    ERR_R_MALLOC_FAILURE);
			return (NULL);
		}
		free(s->data);
		s->data = (unsigned char *)p;
d126 3
a129 3
	snprintf(p, len, "%04d%02d%02d%02d%02d%02dZ", ts->tm_year + 1900,
	    ts->tm_mon + 1, ts->tm_mday, ts->tm_hour, ts->tm_min, ts->tm_sec);
	s->length = strlen(p);
@


1.23
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_gentm.c,v 1.22 2014/07/11 08:44:47 jsing Exp $ */
d221 1
a221 1
		tmp = M_ASN1_GENERALIZEDTIME_new();
d229 1
a229 1
		M_ASN1_GENERALIZEDTIME_free(tmp);
@


1.22
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_gentm.c,v 1.21 2014/07/10 13:58:22 jsing Exp $ */
a68 37

#if 0

int
i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME *a, unsigned char **pp)
{
	return(i2d_ASN1_bytes((ASN1_STRING *)a, pp,
	    V_ASN1_GENERALIZEDTIME, V_ASN1_UNIVERSAL));
}


ASN1_GENERALIZEDTIME *
d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME **a, unsigned char **pp,
    long length)
{
	ASN1_GENERALIZEDTIME *ret = NULL;

	ret = (ASN1_GENERALIZEDTIME *)d2i_ASN1_bytes((ASN1_STRING **)a, pp, length,
	    V_ASN1_GENERALIZEDTIME, V_ASN1_UNIVERSAL);
	if (ret == NULL) {
		ASN1err(ASN1_F_D2I_ASN1_GENERALIZEDTIME, ERR_R_NESTED_ASN1_ERROR);
		return (NULL);
	}
	if (!ASN1_GENERALIZEDTIME_check(ret)) {
		ASN1err(ASN1_F_D2I_ASN1_GENERALIZEDTIME, ASN1_R_INVALID_TIME_FORMAT);
		goto err;
	}

	return (ret);

err:
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
		M_ASN1_GENERALIZEDTIME_free(ret);
	return (NULL);
}

#endif
@


1.21
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_gentm.c,v 1.20 2014/06/12 15:49:27 deraadt Exp $ */
d65 3
a67 1
#include "cryptlib.h"
a68 1
#include <openssl/asn1.h>
@


1.20
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d62 1
d64 1
@


1.19
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/asn1/a_gentm.c */
@


1.18
log
@Replace ASN1_GENERALIZEDTIME_adj(), ASN1_UTCTIME_adj() and
ASN1_TIME_to_generalizedtime() with wrappers around their former
implementations, making sure memory allocated is freed in all failure cases.

help and ok from beck@@ and Brendan MacDonell.
@
text
@d237 1
a237 2
		if (s->data != NULL)
			free(s->data);
@


1.17
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d211 3
a213 3
ASN1_GENERALIZEDTIME *
ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s, time_t t, int offset_day,
    long offset_sec)
a219 5
	if (s == NULL)
		s = M_ASN1_GENERALIZEDTIME_new();
	if (s == NULL)
		return (NULL);

d247 21
@


1.16
log
@OPENSSL_gmtime() is really just gmtime_r(); ok guenther
@
text
@d247 1
a247 1
	(void) snprintf(p, len, "%04d%02d%02d%02d%02d%02dZ", ts->tm_year + 1900,
@


1.15
log
@More KNF.
@
text
@d225 1
a225 1
	ts = OPENSSL_gmtime(&t, &data);
@


1.14
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d51 2
a52 2
 * SUCH DAMAGE.
 * 
d69 2
a70 1
int i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME *a, unsigned char **pp)
d72 2
a73 2
	return(i2d_ASN1_bytes((ASN1_STRING *)a,pp,
		V_ASN1_GENERALIZEDTIME,V_ASN1_UNIVERSAL));
d77 14
a90 15
ASN1_GENERALIZEDTIME *d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME **a,
	     unsigned char **pp, long length)
{
	ASN1_GENERALIZEDTIME *ret=NULL;

	ret=(ASN1_GENERALIZEDTIME *)d2i_ASN1_bytes((ASN1_STRING **)a,pp,length,
		V_ASN1_GENERALIZEDTIME,V_ASN1_UNIVERSAL);
	if (ret == NULL)
	{
		ASN1err(ASN1_F_D2I_ASN1_GENERALIZEDTIME,ERR_R_NESTED_ASN1_ERROR);
		return(NULL);
	}
	if (!ASN1_GENERALIZEDTIME_check(ret))
	{
		ASN1err(ASN1_F_D2I_ASN1_GENERALIZEDTIME,ASN1_R_INVALID_TIME_FORMAT);
d94 2
a95 1
	return(ret);
d99 1
a99 1
	return(NULL);
d104 2
a105 1
int ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME *d)
d107 2
a108 2
	static const int min[9]={ 0, 0, 1, 1, 0, 0, 0, 0, 0};
	static const int max[9]={99, 99,12,31,23,59,59,12,59};
d110 1
a110 1
	int n,i,l,o;
d112 5
a116 4
	if (d->type != V_ASN1_GENERALIZEDTIME) return(0);
	l=d->length;
	a=(char *)d->data;
	o=0;
d121 3
a123 2
	if (l < 13) goto err;
	for (i=0; i<7; i++) {
d125 6
a130 3
			(a[o] == '+') || (a[o] == '-')))
		{ i++; break; }
		if ((a[o] < '0') || (a[o] > '9')) goto err;
d132 2
a133 1
		if (++o > l) goto err;
d135 5
a139 3
		if ((a[o] < '0') || (a[o] > '9')) goto err;
		n=(n*10)+ a[o]-'0';
		if (++o > l) goto err;
d141 2
a142 1
		if ((n < min[i]) || (n > max[i])) goto err;
d147 3
a149 3
	if (a[o] == '.')
	{
		if (++o > l) goto err;
d154 2
a155 1
		if (i == o) goto err;
d162 6
a167 4
		if (o+4 > l) goto err;
		for (i=7; i<9; i++) {
			if ((a[o] < '0') || (a[o] > '9')) goto err;
			n= a[o]-'0';
d169 5
a173 3
			if ((a[o] < '0') || (a[o] > '9')) goto err;
			n=(n*10)+ a[o]-'0';
			if ((n < min[i]) || (n > max[i])) goto err;
d180 1
a180 1
	return(o == l);
d182 1
a182 1
	return(0);
d185 2
a186 1
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
d190 3
a192 3
	t.type=V_ASN1_GENERALIZEDTIME;
	t.length=strlen(str);
	t.data=(unsigned char *)str;
d196 1
a196 1
				(unsigned char *)str,t.length))
d198 1
a198 1
			s->type=V_ASN1_GENERALIZEDTIME;
d200 3
a202 4
		return(1);
	}
	else
		return(0);
d205 2
a206 2
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
	     time_t t)
d208 1
a208 1
		return ASN1_GENERALIZEDTIME_adj(s, t, 0, 0);
d211 3
a213 2
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
	     time_t t, int offset_day, long offset_sec)
d218 1
a218 1
	size_t len = 20; 
d221 1
a221 1
		s=M_ASN1_GENERALIZEDTIME_new();
d223 1
a223 1
		return(NULL);
d225 1
a225 1
	ts=OPENSSL_gmtime(&t, &data);
d227 1
a227 1
		return(NULL);
d229 1
a229 1
	if (offset_day || offset_sec) { 
d234 1
a234 1
	p=(char *)s->data;
d236 1
a236 1
		p=malloc(len);
d239 2
a240 2
				ERR_R_MALLOC_FAILURE);
			return(NULL);
d244 1
a244 1
		s->data=(unsigned char *)p;
d247 5
a251 5
	(void) snprintf(p,len,"%04d%02d%02d%02d%02d%02dZ",ts->tm_year + 1900,
		     ts->tm_mon+1,ts->tm_mday,ts->tm_hour,ts->tm_min,ts->tm_sec);
	s->length=strlen(p);
	s->type=V_ASN1_GENERALIZEDTIME;
	return(s);
@


1.13
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d119 1
a119 2
	for (i=0; i<7; i++)
	{
d148 1
a148 2
	else if ((a[o] == '+') || (a[o] == '-'))
	{
d151 1
a151 2
		for (i=7; i<9; i++)
		{
d160 1
a160 3
	}
	else
	{
d176 2
a177 4
	if (ASN1_GENERALIZEDTIME_check(&t))
	{
		if (s != NULL)
		{
d212 1
a212 2
	if (offset_day || offset_sec)
	{ 
d218 1
a218 2
	if ((p == NULL) || ((size_t)s->length < len))
	{
d220 1
a220 2
		if (p == NULL)
		{
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d70 1
a70 1
	{
d73 1
a73 1
	}
d78 1
a78 1
	{
d84 1
a84 1
		{
d87 1
a87 1
		}
d89 1
a89 1
		{
d92 1
a92 1
		}
d99 1
a99 1
	}
d104 1
a104 1
	{
d120 1
a120 1
		{
d123 1
a123 1
			{ i++; break; }
d133 1
a133 1
		}
d138 1
a138 1
		{
d145 1
a145 1
		}
d150 1
a150 1
		{
d154 1
a154 1
			{
a161 1
			}
d163 1
d165 1
a165 1
		{
d168 1
a168 1
		}
d172 1
a172 1
	}
d175 1
a175 1
	{
d182 2
a184 2
		if (s != NULL)
			{
d189 1
a189 1
			}
d191 1
a191 1
		}
d194 1
a194 1
	}
d198 1
a198 1
	{
d200 1
a200 1
	}
d204 1
a204 1
	{
d220 1
a220 1
		{ 
d223 1
a223 1
		}
d227 1
a227 1
		{
d230 1
a230 1
			{
d234 1
a234 1
			}
d238 1
a238 1
		}
d245 1
a245 1
	}
@


1.11
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d228 1
a228 1
		p=OPENSSL_malloc(len);
d236 1
a236 1
			OPENSSL_free(s->data);
@


1.10
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@a70 12
#ifdef CHARSET_EBCDIC
	/* KLUDGE! We convert to ascii before writing DER */
	int len;
	char tmp[24];
	ASN1_STRING tmpstr = *(ASN1_STRING *)a;

	len = tmpstr.length;
	ebcdic2ascii(tmp, tmpstr.data, (len >= sizeof tmp) ? sizeof tmp : len);
	tmpstr.data = tmp;

	a = (ASN1_GENERALIZEDTIME *) &tmpstr;
#endif
a87 3
#ifdef CHARSET_EBCDIC
	ascii2ebcdic(ret->data, ret->data, ret->length);
#endif
a243 3
#ifdef CHARSET_EBCDIC_not
	ebcdic2ascii(s->data, s->data, s->length);
#endif
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d255 1
a255 1
	BIO_snprintf(p,len,"%04d%02d%02d%02d%02d%02dZ",ts->tm_year + 1900,
@


1.8
log
@resolve conflicts
@
text
@d120 2
a121 2
	static int min[9]={ 0, 0, 1, 1, 0, 0, 0, 0, 0};
	static int max[9]={99, 99,12,31,23,59,59,12,59};
d179 5
d214 6
d234 6
d246 1
a246 1
			ASN1err(ASN1_F_ASN1_GENERALIZEDTIME_SET,
@


1.7
log
@resolve conflicts
@
text
@d184 1
a184 1
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, char *str)
@


1.6
log
@merge 0.9.7d
@
text
@d195 3
a197 2
			ASN1_STRING_set((ASN1_STRING *)s,
				(unsigned char *)str,t.length);
d227 6
a232 1
		if (p == NULL) return(NULL);
@


1.5
log
@sprintf->snprintf. deraadt@@ suggestions and ok
@
text
@d223 1
a223 1
	if ((p == NULL) || (s->length < len))
d232 2
a233 2
	snprintf(p,len,"%04d%02d%02d%02d%02d%02dZ",ts->tm_year + 1900,
		 ts->tm_mon+1,ts->tm_mday,ts->tm_hour,ts->tm_min,ts->tm_sec);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d211 1
d223 1
a223 1
	if ((p == NULL) || (s->length < 16))
d225 1
a225 1
		p=OPENSSL_malloc(20);
d232 2
a233 2
	sprintf(p,"%04d%02d%02d%02d%02d%02dZ",ts->tm_year + 1900,
		ts->tm_mon+1,ts->tm_mday,ts->tm_hour,ts->tm_min,ts->tm_sec);
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d64 1
d67 1
a67 5
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_new(void)
{ return M_ASN1_GENERALIZEDTIME_new(); }

void ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME *x)
{ M_ASN1_GENERALIZEDTIME_free(x); }
d116 2
d149 13
d197 1
a209 1
#if defined(THREADS) && !defined(WIN32)
a210 1
#endif
d217 4
a220 6
#if defined(THREADS) && !defined(WIN32)
	gmtime_r(&t,&data); /* should return &data, but doesn't on some systems, so we don't even look at the return value */
	ts=&data;
#else
	ts=gmtime(&t);
#endif
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d215 1
a215 1
		p=Malloc(20);
d218 1
a218 1
			Free(s->data);
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d66 6
d115 1
a115 1
		ASN1_GENERALIZEDTIME_free(ret);
d202 1
a202 1
		s=ASN1_GENERALIZEDTIME_new();
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a63 1
#include "o_time.h"
a65 2
#if 0

d109 1
a109 1
		M_ASN1_GENERALIZEDTIME_free(ret);
a112 2
#endif

a143 13
	/* Optional fractional seconds: decimal point followed by one
	 * or more digits.
	 */
	if (a[o] == '.')
		{
		if (++o > l) goto err;
		i = o;
		while ((a[o] >= '0') && (a[o] <= '9') && (o <= l))
			o++;
		/* Must have at least one digit after decimal point */
		if (i == o) goto err;
		}

a178 1
			s->type=V_ASN1_GENERALIZEDTIME;
d191 1
d193 1
d196 1
a196 1
		s=M_ASN1_GENERALIZEDTIME_new();
d200 6
a205 4
	ts=OPENSSL_gmtime(&t, &data);
	if (ts == NULL)
		return(NULL);

d209 1
a209 1
		p=OPENSSL_malloc(20);
d212 1
a212 1
			OPENSSL_free(s->data);
@


1.1.1.2
log
@import openssl-0.9.7d
@
text
@a210 1
	size_t len = 20; 
d222 1
a222 1
	if ((p == NULL) || ((size_t)s->length < len))
d224 1
a224 1
		p=OPENSSL_malloc(len);
d231 2
a232 2
	BIO_snprintf(p,len,"%04d%02d%02d%02d%02d%02dZ",ts->tm_year + 1900,
		     ts->tm_mon+1,ts->tm_mday,ts->tm_hour,ts->tm_min,ts->tm_sec);
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d195 2
a196 3
			if (!ASN1_STRING_set((ASN1_STRING *)s,
				(unsigned char *)str,t.length))
				return 0;
d226 1
a226 6
		if (p == NULL)
			{
			ASN1err(ASN1_F_ASN1_GENERALIZEDTIME_SET,
				ERR_R_MALLOC_FAILURE);
			return(NULL);
			}
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d184 1
a184 1
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d120 2
a121 2
	static const int min[9]={ 0, 0, 1, 1, 0, 0, 0, 0, 0};
	static const int max[9]={99, 99,12,31,23,59,59,12,59};
a178 5
	else
		{
		/* Missing time zone information. */
		goto err;
		}
a208 6
		return ASN1_GENERALIZEDTIME_adj(s, t, 0, 0);
	}

ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
	     time_t t, int offset_day, long offset_sec)
	{
a222 6
	if (offset_day || offset_sec)
		{ 
		if (!OPENSSL_gmtime_adj(ts, offset_day, offset_sec))
			return NULL;
		}

d229 1
a229 1
			ASN1err(ASN1_F_ASN1_GENERALIZEDTIME_ADJ,
@


