head	1.11;
access;
symbols
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.6
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	butholakala:1.4
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.4.0.16
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.12
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.10
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.1
	OPENBSD_4_4:1.1.0.26
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.24
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.22
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.20
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.18
	OPENBSD_4_0_BASE:1.1
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.1.0.16
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.14
	OPENBSD_3_8_BASE:1.1
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.1.0.12
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.10
	OPENBSD_3_6_BASE:1.1
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.09.03.11.33.35;	author beck;	state dead;
branches;
next	1.10;
commitid	HnbXxsegngek41U2;

1.10
date	2015.07.25.17.07.17;	author jsing;	state Exp;
branches;
next	1.9;
commitid	KRFNs8F3Al0jO8lT;

1.9
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.7;
commitid	id8dTrTMtnTn4fqt;

1.7
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.04.18.11.20.32;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.51;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.04.07.20.41.34;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: x_long.c,v 1.10 2015/07/25 17:07:17 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1t.h>
#include <openssl/bn.h>
#include <openssl/err.h>

/* Custom primitive type for long handling. This converts between an ASN1_INTEGER
 * and a long directly.
 */


static int long_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
static void long_free(ASN1_VALUE **pval, const ASN1_ITEM *it);

static int long_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype, const ASN1_ITEM *it);
static int long_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it);
static int long_print(BIO *out, ASN1_VALUE **pval, const ASN1_ITEM *it, int indent, const ASN1_PCTX *pctx);

static ASN1_PRIMITIVE_FUNCS long_pf = {
	NULL, 0,
	long_new,
	long_free,
	long_free,	/* Clear should set to initial value */
	long_c2i,
	long_i2c,
	long_print
};

const ASN1_ITEM LONG_it = {
	.itype = ASN1_ITYPE_PRIMITIVE,
	.utype = V_ASN1_INTEGER,
	.templates = NULL,
	.tcount = 0,
	.funcs = &long_pf,
	.size = ASN1_LONG_UNDEF,
	.sname = "LONG",
};

const ASN1_ITEM ZLONG_it = {
	.itype = ASN1_ITYPE_PRIMITIVE,
	.utype = V_ASN1_INTEGER,
	.templates = NULL,
	.tcount = 0,
	.funcs = &long_pf,
	.size = 0,
	.sname = "ZLONG",
};

static int
long_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	*(long *)pval = it->size;
	return 1;
}

static void
long_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	*(long *)pval = it->size;
}

static int
long_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype,
    const ASN1_ITEM *it)
{
	long ltmp;
	unsigned long utmp;
	int clen, pad, i;
	/* this exists to bypass broken gcc optimization */
	char *cp = (char *)pval;

	/* use memcpy, because we may not be long aligned */
	memcpy(&ltmp, cp, sizeof(long));

	if (ltmp == it->size)
		return -1;
	/* Convert the long to positive: we subtract one if negative so
	 * we can cleanly handle the padding if only the MSB of the leading
	 * octet is set.
	 */
	if (ltmp < 0)
		utmp = -ltmp - 1;
	else
		utmp = ltmp;
	clen = BN_num_bits_word(utmp);
	/* If MSB of leading octet set we need to pad */
	if (!(clen & 0x7))
		pad = 1;
	else
		pad = 0;

	/* Convert number of bits to number of octets */
	clen = (clen + 7) >> 3;

	if (cont) {
		if (pad)
			*cont++ = (ltmp < 0) ? 0xff : 0;
		for (i = clen - 1; i >= 0; i--) {
			cont[i] = (unsigned char)(utmp & 0xff);
			if (ltmp < 0)
				cont[i] ^= 0xff;
			utmp >>= 8;
		}
	}
	return clen + pad;
}

static int
long_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len, int utype,
    char *free_cont, const ASN1_ITEM *it)
{
	int neg, i;
	long ltmp;
	unsigned long utmp = 0;
	char *cp = (char *)pval;
	if (len > (int)sizeof(long)) {
		ASN1err(ASN1_F_LONG_C2I, ASN1_R_INTEGER_TOO_LARGE_FOR_LONG);
		return 0;
	}
	/* Is it negative? */
	if (len && (cont[0] & 0x80))
		neg = 1;
	else
		neg = 0;
	utmp = 0;
	for (i = 0; i < len; i++) {
		utmp <<= 8;
		if (neg)
			utmp |= cont[i] ^ 0xff;
		else
			utmp |= cont[i];
	}
	ltmp = (long)utmp;
	if (neg) {
		ltmp++;
		ltmp = -ltmp;
	}
	if (ltmp == it->size) {
		ASN1err(ASN1_F_LONG_C2I, ASN1_R_INTEGER_TOO_LARGE_FOR_LONG);
		return 0;
	}
	memcpy(cp, &ltmp, sizeof(long));
	return 1;
}

static int
long_print(BIO *out, ASN1_VALUE **pval, const ASN1_ITEM *it, int indent,
    const ASN1_PCTX *pctx)
{
	return BIO_printf(out, "%ld\n", *(long *)pval);
}
@


1.10
log
@Manually expand ASN.1 template macros - only change in generated assembly
is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: x_long.c,v 1.9 2014/07/11 08:44:47 jsing Exp $ */
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_long.c,v 1.8 2014/07/10 13:58:22 jsing Exp $ */
d88 19
a106 7
ASN1_ITEM_start(LONG)
ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &long_pf, ASN1_LONG_UNDEF, "LONG"
ASN1_ITEM_end(LONG)

ASN1_ITEM_start(ZLONG)
ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &long_pf, 0, "ZLONG"
ASN1_ITEM_end(ZLONG)
@


1.8
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_long.c,v 1.7 2014/06/12 15:49:27 deraadt Exp $ */
a61 1
#include "cryptlib.h"
d64 1
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.6
log
@More KNF.
@
text
@d1 1
a1 1
/* x_long.c */
@


1.5
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d87 1
a87 1
	ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &long_pf, ASN1_LONG_UNDEF, "LONG"
d91 1
a91 1
	ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &long_pf, 0, "ZLONG"
d94 2
a95 1
static int long_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
d101 2
a102 1
static void long_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
d107 3
a109 1
static int long_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype, const ASN1_ITEM *it)
d120 2
a121 1
	if(ltmp == it->size) return -1;
d124 1
a124 1
	 * octet is set. 
d126 4
a129 2
	if(ltmp < 0) utmp = -ltmp - 1;
	else utmp = ltmp;
d132 4
a135 2
	if(!(clen & 0x7)) pad = 1;
	else pad = 0;
d140 4
a143 3
	if(cont) {
		if(pad) *cont++ = (ltmp < 0) ? 0xff : 0;
		for(i = clen - 1; i >= 0; i--) {
d145 2
a146 1
			if(ltmp < 0) cont[i] ^= 0xff;
d153 3
a155 2
static int long_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,
		    int utype, char *free_cont, const ASN1_ITEM *it)
d161 1
a161 1
	if(len > (int)sizeof(long)) {
d166 4
a169 2
	if(len && (cont[0] & 0x80)) neg = 1;
	else neg = 0;
d171 1
a171 1
	for(i = 0; i < len; i++) {
d173 4
a176 2
		if(neg) utmp |= cont[i] ^ 0xff;
		else utmp |= cont[i];
d179 1
a179 1
	if(neg) {
d183 1
a183 1
	if(ltmp == it->size) {
d191 3
a193 2
static int long_print(BIO *out, ASN1_VALUE **pval, const ASN1_ITEM *it,
			int indent, const ASN1_PCTX *pctx)
@


1.4
log
@resolve conflicts, fix local changes
@
text
@d177 1
a177 1
	{
d179 1
a179 1
	}
@


1.3
log
@resolve conflicts
@
text
@d74 1
d82 2
a83 1
	long_i2c
d174 6
@


1.2
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d62 1
d73 1
a73 1
static int long_c2i(ASN1_VALUE **pval, unsigned char *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it);
d140 2
a141 1
static int long_c2i(ASN1_VALUE **pval, unsigned char *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it)
d147 1
a147 1
	if(len > sizeof(long)) {
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d107 6
a112 1
	ltmp = *(long *)pval;
d144 1
d167 1
a167 1
	*(long *)pval = ltmp;
@


1.1.1.2
log
@import openssl-0.9.7d
@
text
@d107 1
a107 6
	/* this exists to bypass broken gcc optimization */
	char *cp = (char *)pval;

	/* use memcpy, because we may not be long aligned */
	memcpy(&ltmp, cp, sizeof(long));

a138 1
	char *cp = (char *)pval;
d161 1
a161 1
	memcpy(cp, &ltmp, sizeof(long));
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a61 1
#include <openssl/bn.h>
d72 1
a72 1
static int long_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it);
d139 1
a139 2
static int long_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,
		    int utype, char *free_cont, const ASN1_ITEM *it)
d145 1
a145 1
	if(len > (int)sizeof(long)) {
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a73 1
static int long_print(BIO *out, ASN1_VALUE **pval, const ASN1_ITEM *it, int indent, const ASN1_PCTX *pctx);
d81 1
a81 2
	long_i2c,
	long_print
a171 6

static int long_print(BIO *out, ASN1_VALUE **pval, const ASN1_ITEM *it,
			int indent, const ASN1_PCTX *pctx)
	{
	return BIO_printf(out, "%ld\n", *(long *)pval);
	}
@


