head	1.26;
access;
symbols
	OPENBSD_6_0:1.25.0.8
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.6
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.4
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	butholakala:1.13
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.8.0.12
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.10
	OPENBSD_3_6_BASE:1.8
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2016.09.03.11.33.35;	author beck;	state dead;
branches;
next	1.25;
commitid	HnbXxsegngek41U2;

1.25
date	2015.02.11.04.00.39;	author jsing;	state Exp;
branches;
next	1.24;
commitid	QCjRtjn2xv9owjIW;

1.24
date	2015.02.11.03.39.51;	author jsing;	state Exp;
branches;
next	1.23;
commitid	PWeA1V6nbEryguKH;

1.23
date	2015.02.09.15.05.59;	author jsing;	state Exp;
branches;
next	1.22;
commitid	X3hE8E9VwC2nOKbW;

1.22
date	2014.07.12.16.03.36;	author miod;	state Exp;
branches;
next	1.21;
commitid	G74O1dmRukKsW7IJ;

1.21
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.20;
commitid	yQEL1wOWIearrW15;

1.20
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.19;
commitid	nzndm3zqPmFurSaK;

1.19
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	mJUVYpkFBZ0Zv2bG;

1.18
date	2014.05.30.02.52.11;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.18.11.20.32;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.29.05.39.18;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.01.19.51.17;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.57.14;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.32;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.52;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.35;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.51;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.03;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.34;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.04.13.15.16.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: x_pubkey.c,v 1.25 2015/02/11 04:00:39 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1t.h>
#include <openssl/err.h>
#include <openssl/x509.h>

#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif

#include "asn1_locl.h"

/* Minor tweak to operation: free up EVP_PKEY */
static int
pubkey_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it, void *exarg)
{
	if (operation == ASN1_OP_FREE_POST) {
		X509_PUBKEY *pubkey = (X509_PUBKEY *)*pval;
		EVP_PKEY_free(pubkey->pkey);
	}
	return 1;
}

static const ASN1_AUX X509_PUBKEY_aux = {
	.asn1_cb = pubkey_cb,
};
static const ASN1_TEMPLATE X509_PUBKEY_seq_tt[] = {
	{
		.offset = offsetof(X509_PUBKEY, algor),
		.field_name = "algor",
		.item = &X509_ALGOR_it,
	},
	{
		.offset = offsetof(X509_PUBKEY, public_key),
		.field_name = "public_key",
		.item = &ASN1_BIT_STRING_it,
	},
};

const ASN1_ITEM X509_PUBKEY_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = X509_PUBKEY_seq_tt,
	.tcount = sizeof(X509_PUBKEY_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = &X509_PUBKEY_aux,
	.size = sizeof(X509_PUBKEY),
	.sname = "X509_PUBKEY",
};


X509_PUBKEY *
d2i_X509_PUBKEY(X509_PUBKEY **a, const unsigned char **in, long len)
{
	return (X509_PUBKEY *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &X509_PUBKEY_it);
}

int
i2d_X509_PUBKEY(X509_PUBKEY *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_PUBKEY_it);
}

X509_PUBKEY *
X509_PUBKEY_new(void)
{
	return (X509_PUBKEY *)ASN1_item_new(&X509_PUBKEY_it);
}

void
X509_PUBKEY_free(X509_PUBKEY *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &X509_PUBKEY_it);
}

int
X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey)
{
	X509_PUBKEY *pk = NULL;

	if (x == NULL)
		return (0);
	if ((pk = X509_PUBKEY_new()) == NULL)
		goto error;

	if (pkey->ameth) {
		if (pkey->ameth->pub_encode) {
			if (!pkey->ameth->pub_encode(pk, pkey)) {
				X509err(X509_F_X509_PUBKEY_SET,
				    X509_R_PUBLIC_KEY_ENCODE_ERROR);
				goto error;
			}
		} else {
			X509err(X509_F_X509_PUBKEY_SET,
			    X509_R_METHOD_NOT_SUPPORTED);
			goto error;
		}
	} else {
		X509err(X509_F_X509_PUBKEY_SET, X509_R_UNSUPPORTED_ALGORITHM);
		goto error;
	}

	if (*x != NULL)
		X509_PUBKEY_free(*x);

	*x = pk;

	return 1;

error:
	if (pk != NULL)
		X509_PUBKEY_free(pk);
	return 0;
}

EVP_PKEY *
X509_PUBKEY_get(X509_PUBKEY *key)
{
	EVP_PKEY *ret = NULL;

	if (key == NULL)
		goto error;

	if (key->pkey != NULL) {
		CRYPTO_add(&key->pkey->references, 1, CRYPTO_LOCK_EVP_PKEY);
		return key->pkey;
	}

	if (key->public_key == NULL)
		goto error;

	if ((ret = EVP_PKEY_new()) == NULL) {
		X509err(X509_F_X509_PUBKEY_GET, ERR_R_MALLOC_FAILURE);
		goto error;
	}

	if (!EVP_PKEY_set_type(ret, OBJ_obj2nid(key->algor->algorithm))) {
		X509err(X509_F_X509_PUBKEY_GET, X509_R_UNSUPPORTED_ALGORITHM);
		goto error;
	}

	if (ret->ameth->pub_decode) {
		if (!ret->ameth->pub_decode(ret, key)) {
			X509err(X509_F_X509_PUBKEY_GET,
			    X509_R_PUBLIC_KEY_DECODE_ERROR);
			goto error;
		}
	} else {
		X509err(X509_F_X509_PUBKEY_GET, X509_R_METHOD_NOT_SUPPORTED);
		goto error;
	}

	/* Check to see if another thread set key->pkey first */
	CRYPTO_w_lock(CRYPTO_LOCK_EVP_PKEY);
	if (key->pkey) {
		CRYPTO_w_unlock(CRYPTO_LOCK_EVP_PKEY);
		EVP_PKEY_free(ret);
		ret = key->pkey;
	} else {
		key->pkey = ret;
		CRYPTO_w_unlock(CRYPTO_LOCK_EVP_PKEY);
	}
	CRYPTO_add(&ret->references, 1, CRYPTO_LOCK_EVP_PKEY);

	return ret;

error:
	EVP_PKEY_free(ret);
	return (NULL);
}

/* Now two pseudo ASN1 routines that take an EVP_PKEY structure
 * and encode or decode as X509_PUBKEY
 */

EVP_PKEY *
d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length)
{
	X509_PUBKEY *xpk;
	EVP_PKEY *pktmp;
	xpk = d2i_X509_PUBKEY(NULL, pp, length);
	if (!xpk)
		return NULL;
	pktmp = X509_PUBKEY_get(xpk);
	X509_PUBKEY_free(xpk);
	if (!pktmp)
		return NULL;
	if (a) {
		EVP_PKEY_free(*a);
		*a = pktmp;
	}
	return pktmp;
}

int
i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
{
	X509_PUBKEY *xpk = NULL;
	int ret;
	if (!a)
		return 0;
	if (!X509_PUBKEY_set(&xpk, a))
		return 0;
	ret = i2d_X509_PUBKEY(xpk, pp);
	X509_PUBKEY_free(xpk);
	return ret;
}

/* The following are equivalents but which return RSA and DSA
 * keys
 */
#ifndef OPENSSL_NO_RSA
RSA *
d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)
{
	EVP_PKEY *pkey;
	RSA *key;
	const unsigned char *q;
	q = *pp;
	pkey = d2i_PUBKEY(NULL, &q, length);
	if (!pkey)
		return NULL;
	key = EVP_PKEY_get1_RSA(pkey);
	EVP_PKEY_free(pkey);
	if (!key)
		return NULL;
	*pp = q;
	if (a) {
		RSA_free(*a);
		*a = key;
	}
	return key;
}

int
i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
{
	EVP_PKEY *pktmp;
	int ret;
	if (!a)
		return 0;
	pktmp = EVP_PKEY_new();
	if (!pktmp) {
		ASN1err(ASN1_F_I2D_RSA_PUBKEY, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	EVP_PKEY_set1_RSA(pktmp, a);
	ret = i2d_PUBKEY(pktmp, pp);
	EVP_PKEY_free(pktmp);
	return ret;
}
#endif

#ifndef OPENSSL_NO_DSA
DSA *
d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length)
{
	EVP_PKEY *pkey;
	DSA *key;
	const unsigned char *q;
	q = *pp;
	pkey = d2i_PUBKEY(NULL, &q, length);
	if (!pkey)
		return NULL;
	key = EVP_PKEY_get1_DSA(pkey);
	EVP_PKEY_free(pkey);
	if (!key)
		return NULL;
	*pp = q;
	if (a) {
		DSA_free(*a);
		*a = key;
	}
	return key;
}

int
i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
{
	EVP_PKEY *pktmp;
	int ret;
	if (!a)
		return 0;
	pktmp = EVP_PKEY_new();
	if (!pktmp) {
		ASN1err(ASN1_F_I2D_DSA_PUBKEY, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	EVP_PKEY_set1_DSA(pktmp, a);
	ret = i2d_PUBKEY(pktmp, pp);
	EVP_PKEY_free(pktmp);
	return ret;
}
#endif

#ifndef OPENSSL_NO_EC
EC_KEY *
d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)
{
	EVP_PKEY *pkey;
	EC_KEY *key;
	const unsigned char *q;
	q = *pp;
	pkey = d2i_PUBKEY(NULL, &q, length);
	if (!pkey)
		return (NULL);
	key = EVP_PKEY_get1_EC_KEY(pkey);
	EVP_PKEY_free(pkey);
	if (!key)
		return (NULL);
	*pp = q;
	if (a) {
		EC_KEY_free(*a);
		*a = key;
	}
	return (key);
}

int
i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)
{
	EVP_PKEY *pktmp;
	int ret;
	if (!a)
		return (0);
	if ((pktmp = EVP_PKEY_new()) == NULL) {
		ASN1err(ASN1_F_I2D_EC_PUBKEY, ERR_R_MALLOC_FAILURE);
		return (0);
	}
	EVP_PKEY_set1_EC_KEY(pktmp, a);
	ret = i2d_PUBKEY(pktmp, pp);
	EVP_PKEY_free(pktmp);
	return (ret);
}
#endif

int
X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj, int ptype,
    void *pval, unsigned char *penc, int penclen)
{
	if (!X509_ALGOR_set0(pub->algor, aobj, ptype, pval))
		return 0;
	if (penc) {
		free(pub->public_key->data);
		pub->public_key->data = penc;
		pub->public_key->length = penclen;
		/* Set number of unused bits to zero */
		pub->public_key->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
		pub->public_key->flags |= ASN1_STRING_FLAG_BITS_LEFT;
	}
	return 1;
}

int
X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg, const unsigned char **pk,
    int *ppklen, X509_ALGOR **pa, X509_PUBKEY *pub)
{
	if (ppkalg)
		*ppkalg = pub->algor->algorithm;
	if (pk) {
		*pk = pub->public_key->data;
		*ppklen = pub->public_key->length;
	}
	if (pa)
		*pa = pub->algor;
	return 1;
}
@


1.25
log
@Remove initialisers with default values from the ASN1 data structures.

Minor changes in generated assembly due to the compiler swapping from
.quad 0/.long 0 to .zero, along with changes due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: x_pubkey.c,v 1.24 2015/02/11 03:39:51 jsing Exp $ */
@


1.24
log
@Expand most of the ASN1_SEQUENCE* and associated macros, making the data
structures visible and easier to review, without having to wade through
layers and layers of asn1t.h macros.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pubkey.c,v 1.23 2015/02/09 15:05:59 jsing Exp $ */
a87 4
	.app_data = NULL,
	.flags = 0,
	.ref_offset = 0,
	.ref_lock = 0,
a88 1
	.enc_offset = 0,
a91 2
		.flags = 0,
		.tag = 0,
a96 2
		.flags = 0,
		.tag = 0,
@


1.23
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pubkey.c,v 1.22 2014/07/12 16:03:36 miod Exp $ */
d87 34
a120 4
ASN1_SEQUENCE_cb(X509_PUBKEY, pubkey_cb) = {
	ASN1_SIMPLE(X509_PUBKEY, algor, X509_ALGOR),
	ASN1_SIMPLE(X509_PUBKEY, public_key, ASN1_BIT_STRING)
} ASN1_SEQUENCE_END_cb(X509_PUBKEY, X509_PUBKEY)
@


1.22
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pubkey.c,v 1.21 2014/07/11 08:44:47 jsing Exp $ */
d92 25
a116 1
IMPLEMENT_ASN1_FUNCTIONS(X509_PUBKEY)
@


1.21
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_pubkey.c,v 1.20 2014/07/10 22:45:56 jsing Exp $ */
d186 1
a186 2
	if (ret != NULL)
		EVP_PKEY_free(ret);
@


1.20
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: x_pubkey.c,v 1.19 2014/06/12 15:49:27 deraadt Exp $ */
a62 1
#include "cryptlib.h"
d64 1
d66 4
a69 1
#include "asn1_locl.h"
d73 2
a74 3
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
@


1.19
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.18
log
@no need for null check before free. from Brendan MacDonell
@
text
@d1 1
a1 1
/* crypto/asn1/x_pubkey.c */
@


1.17
log
@More KNF.
@
text
@d358 1
a358 2
		if (pub->public_key->data)
			free(pub->public_key->data);
@


1.16
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d72 2
a73 2
static int pubkey_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it,
			void *exarg)
d89 2
a90 1
int X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey)
d92 1
a92 1
	X509_PUBKEY *pk=NULL;
d94 4
a97 3
	if (x == NULL) return(0);

	if ((pk=X509_PUBKEY_new()) == NULL) goto error;
d103 1
a103 1
					X509_R_PUBLIC_KEY_ENCODE_ERROR);
d108 1
a108 1
				X509_R_METHOD_NOT_SUPPORTED);
d112 1
a112 1
		X509err(X509_F_X509_PUBKEY_SET,X509_R_UNSUPPORTED_ALGORITHM);
d119 1
a119 1
	*x=pk;
d122 1
d124 2
a125 1
	if (pk != NULL) X509_PUBKEY_free(pk);
d129 2
a130 1
EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key)
d132 1
a132 1
	EVP_PKEY *ret=NULL;
d134 2
a135 1
	if (key == NULL) goto error;
d142 2
a143 1
	if (key->public_key == NULL) goto error;
d151 1
a151 1
		X509err(X509_F_X509_PUBKEY_GET,X509_R_UNSUPPORTED_ALGORITHM);
d158 1
a158 1
						X509_R_PUBLIC_KEY_DECODE_ERROR);
d180 1
a180 1
	error:
d183 1
a183 1
	return(NULL);
d190 2
a191 2
EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp,
	     long length)
d196 2
a197 1
	if(!xpk) return NULL;
d200 3
a202 2
	if(!pktmp) return NULL;
	if(a) {
d209 2
a210 1
int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
d212 1
a212 1
	X509_PUBKEY *xpk=NULL;
d214 4
a217 2
	if(!a) return 0;
	if(!X509_PUBKEY_set(&xpk, a)) return 0;
d227 2
a228 2
RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp,
	     long length)
d235 2
a236 1
	if (!pkey) return NULL;
d239 2
a240 1
	if (!key) return NULL;
d249 2
a250 1
int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
d254 2
a255 1
	if (!a) return 0;
d269 2
a270 2
DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp,
	     long length)
d277 2
a278 1
	if (!pkey) return NULL;
d281 2
a282 1
	if (!key) return NULL;
d291 2
a292 1
int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
d296 2
a297 1
	if(!a) return 0;
d299 1
a299 1
	if(!pktmp) {
d311 2
a312 1
EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)
d319 2
a320 1
	if (!pkey) return(NULL);
d323 2
a324 1
	if (!key)  return(NULL);
d330 1
a330 1
	return(key);
d333 2
a334 1
int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)
d338 2
a339 1
	if (!a)	return(0);
d342 1
a342 1
		return(0);
d347 1
a347 1
	return(ret);
d351 3
a353 3
int X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj,
					int ptype, void *pval,
					unsigned char *penc, int penclen)
d362 1
a362 1
  		/* Set number of unused bits to zero */
d364 1
a364 1
		pub->public_key->flags|=ASN1_STRING_FLAG_BITS_LEFT;
d369 3
a371 4
int X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg,
		const unsigned char **pk, int *ppklen,
		X509_ALGOR **pa,
		X509_PUBKEY *pub)
@


1.15
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d75 1
a75 2
	if (operation == ASN1_OP_FREE_POST)
	{
d97 3
a99 6
	if (pkey->ameth)
	{
		if (pkey->ameth->pub_encode)
		{
			if (!pkey->ameth->pub_encode(pk, pkey))
			{
d104 1
a104 3
		}
		else
		{
d109 1
a109 3
	}
	else
	{
d131 1
a131 2
	if (key->pkey != NULL)
	{
d138 1
a138 2
	if ((ret = EVP_PKEY_new()) == NULL)
	{
d143 1
a143 2
	if (!EVP_PKEY_set_type(ret, OBJ_obj2nid(key->algor->algorithm)))
	{
d148 2
a149 4
	if (ret->ameth->pub_decode)
	{
		if (!ret->ameth->pub_decode(ret, key))
		{
d154 1
a154 3
	}
	else
	{
d161 1
a161 2
	if (key->pkey)
	{
d165 1
a165 3
	}
	else
	{
d193 1
a193 2
	if(a)
	{
d228 1
a228 2
	if (a)
	{
d241 1
a241 2
	if (!pktmp)
	{
d266 1
a266 2
	if (a)
	{
d279 1
a279 2
	if(!pktmp)
	{
d303 1
a303 2
	if (a)
	{
d315 1
a315 2
	if ((pktmp = EVP_PKEY_new()) == NULL)
	{
d332 1
a332 2
	if (penc)
	{
d351 1
a351 2
	if (pk)
	{
@


1.14
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d74 2
a76 2
	if (operation == ASN1_OP_FREE_POST)
		{
d79 1
a79 1
		}
d81 1
a81 1
	}
d91 1
a91 1
	{
d99 2
d102 1
a102 1
		if (pkey->ameth->pub_encode)
a103 2
			if (!pkey->ameth->pub_encode(pk, pkey))
				{
a106 1
				}
d108 1
d110 1
a110 1
			{
a113 1
			}
d115 1
d117 1
a117 1
		{
d120 1
a120 1
		}
d131 1
a131 1
	}
d134 1
a134 1
	{
d140 1
a140 1
		{
d143 1
a143 1
		}
d148 1
a148 1
		{
d151 1
a151 1
		}
d154 1
a154 1
		{
d157 1
a157 1
		}
d160 2
a162 2
		if (!ret->ameth->pub_decode(ret, key))
			{
a165 1
			}
d167 1
d169 1
a169 1
		{
d172 1
a172 1
		}
d177 1
a177 1
		{
d181 1
a181 1
		}
d183 1
a183 1
		{
d186 1
a186 1
		}
d195 1
a195 1
	}
d203 1
a203 1
	{
d212 1
a212 1
		{
d215 1
a215 1
		}
d217 1
a217 1
	}
d220 1
a220 1
	{
d228 1
a228 1
	}
d236 1
a236 1
	{
d248 1
a248 1
		{
d251 1
a251 1
		}
d253 1
a253 1
	}
d256 1
a256 1
	{
d262 1
a262 1
		{
d265 1
a265 1
		}
d270 1
a270 1
	}
d276 1
a276 1
	{
d288 1
a288 1
		{
d291 1
a291 1
		}
d293 1
a293 1
	}
d296 1
a296 1
	{
d302 1
a302 1
		{
d305 1
a305 1
		}
d310 1
a310 1
	}
d315 1
a315 1
	{
d327 1
a327 1
		{
d330 1
a330 1
		}
d332 1
a332 1
	}
d335 1
a335 1
	{
d340 1
a340 1
		{
d343 1
a343 1
		}
d348 1
a348 1
	}
d354 1
a354 1
	{
d358 1
a358 1
		{
d366 1
a366 1
		}
d368 1
a368 1
	}
d374 1
a374 1
	{
d378 1
a378 1
		{
d381 1
a381 1
		}
d385 1
a385 1
	}
@


1.13
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d360 1
a360 1
			OPENSSL_free(pub->public_key->data);
@


1.12
log
@resolve conflicts
@
text
@d178 1
d183 1
d185 2
a186 1
	CRYPTO_w_unlock(CRYPTO_LOCK_EVP_PKEY);
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d174 10
a183 1
	key->pkey = ret;
@


1.10
log
@resolve conflicts
@
text
@d63 1
d72 2
a73 1
static int pubkey_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it)
a92 4
	X509_ALGOR *a;
	ASN1_OBJECT *o;
	unsigned char *s,*p = NULL;
	int i;
d96 1
a96 2
	if ((pk=X509_PUBKEY_new()) == NULL) goto err;
	a=pk->algor;
d98 1
a98 7
	/* set the algorithm id */
	if ((o=OBJ_nid2obj(pkey->type)) == NULL) goto err;
	ASN1_OBJECT_free(a->algorithm);
	a->algorithm=o;

	/* Set the parameter list */
	if (!pkey->save_parameters || (pkey->type == EVP_PKEY_RSA))
d100 1
a100 2
		if ((a->parameter == NULL) ||
			(a->parameter->type != V_ASN1_NULL))
d102 1
a102 2
			ASN1_TYPE_free(a->parameter);
			if (!(a->parameter=ASN1_TYPE_new()))
d104 3
a106 2
				X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
				goto err;
a107 33
			a->parameter->type=V_ASN1_NULL;
			}
		}
#ifndef OPENSSL_NO_DSA
	else if (pkey->type == EVP_PKEY_DSA)
		{
		unsigned char *pp;
		DSA *dsa;
		
		dsa=pkey->pkey.dsa;
		dsa->write_params=0;
		ASN1_TYPE_free(a->parameter);
		if ((i=i2d_DSAparams(dsa,NULL)) <= 0)
			goto err;
		if (!(p=(unsigned char *)OPENSSL_malloc(i)))
			{
			X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
			goto err;
			}
		pp=p;
		i2d_DSAparams(dsa,&pp);
		if (!(a->parameter=ASN1_TYPE_new()))
			{
			OPENSSL_free(p);
			X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
			goto err;
			}
		a->parameter->type=V_ASN1_SEQUENCE;
		if (!(a->parameter->value.sequence=ASN1_STRING_new()))
			{
			OPENSSL_free(p);
			X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
			goto err;
d109 1
a109 1
		if (!ASN1_STRING_set(a->parameter->value.sequence,p,i))
d111 3
a113 3
			OPENSSL_free(p);
			X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
			goto err;
a114 1
		OPENSSL_free(p);
d116 1
a116 58
#endif
#ifndef OPENSSL_NO_EC
	else if (pkey->type == EVP_PKEY_EC)
		{
		int nid=0;
		unsigned char *pp;
		EC_KEY *ec_key;
		const EC_GROUP *group;
		
		ec_key = pkey->pkey.ec;
		ASN1_TYPE_free(a->parameter);

		if ((a->parameter = ASN1_TYPE_new()) == NULL)
			{
			X509err(X509_F_X509_PUBKEY_SET, ERR_R_ASN1_LIB);
			goto err;
			}

		group = EC_KEY_get0_group(ec_key);
		if (EC_GROUP_get_asn1_flag(group)
                     && (nid = EC_GROUP_get_curve_name(group)))
			{
			/* just set the OID */
			a->parameter->type = V_ASN1_OBJECT;
			a->parameter->value.object = OBJ_nid2obj(nid);
			}
		else /* explicit parameters */
			{
			if ((i = i2d_ECParameters(ec_key, NULL)) == 0)
				{
				X509err(X509_F_X509_PUBKEY_SET, ERR_R_EC_LIB);
				goto err;
				}
			if ((p = (unsigned char *) OPENSSL_malloc(i)) == NULL)
				{
				X509err(X509_F_X509_PUBKEY_SET, ERR_R_MALLOC_FAILURE);
				goto err;
				}	
			pp = p;
			if (!i2d_ECParameters(ec_key, &pp))
				{
				X509err(X509_F_X509_PUBKEY_SET, ERR_R_EC_LIB);
				OPENSSL_free(p);
				goto err;
				}
			a->parameter->type = V_ASN1_SEQUENCE;
			if ((a->parameter->value.sequence = ASN1_STRING_new()) == NULL)
				{
				X509err(X509_F_X509_PUBKEY_SET, ERR_R_ASN1_LIB);
				OPENSSL_free(p);
				goto err;
				}
			ASN1_STRING_set(a->parameter->value.sequence, p, i);
			OPENSSL_free(p);
			}
		}
#endif
	else if (1)
d119 1
a119 1
		goto err;
a121 24
	if ((i=i2d_PublicKey(pkey,NULL)) <= 0) goto err;
	if ((s=(unsigned char *)OPENSSL_malloc(i+1)) == NULL)
		{
		X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
		goto err;
		}
	p=s;
	i2d_PublicKey(pkey,&p);
	if (!M_ASN1_BIT_STRING_set(pk->public_key,s,i))
		{
		X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
		goto err;
		}
  	/* Set number of unused bits to zero */
	pk->public_key->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
	pk->public_key->flags|=ASN1_STRING_FLAG_BITS_LEFT;

	OPENSSL_free(s);

#if 0
	CRYPTO_add(&pkey->references,1,CRYPTO_LOCK_EVP_PKEY);
	pk->pkey=pkey;
#endif

d128 1
a128 1
err:
a135 7
	long j;
	int type;
	const unsigned char *p;
#if !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_ECDSA)
	const unsigned char *cp;
	X509_ALGOR *a;
#endif
d137 1
a137 1
	if (key == NULL) goto err;
d142 1
a142 1
		return(key->pkey);
d145 1
a145 1
	if (key->public_key == NULL) goto err;
a146 1
	type=OBJ_obj2nid(key->algor->algorithm);
d150 1
a150 1
		goto err;
a151 1
	ret->type = EVP_PKEY_type(type);
d153 1
a153 10
	/* the parameters must be extracted before the public key (ECDSA!) */
	
#if !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_ECDSA)
	a=key->algor;
#endif

	if (0)
		;
#ifndef OPENSSL_NO_DSA
	else if (ret->type == EVP_PKEY_DSA)
d155 2
a156 14
		if (a->parameter && (a->parameter->type == V_ASN1_SEQUENCE))
			{
			if ((ret->pkey.dsa = DSA_new()) == NULL)
				{
				X509err(X509_F_X509_PUBKEY_GET, ERR_R_MALLOC_FAILURE);
				goto err;
				}
			ret->pkey.dsa->write_params=0;
			cp=p=a->parameter->value.sequence->data;
			j=a->parameter->value.sequence->length;
			if (!d2i_DSAparams(&ret->pkey.dsa, &cp, (long)j))
				goto err;
			}
		ret->save_parameters=1;
d158 2
a159 3
#endif
#ifndef OPENSSL_NO_EC
	else if (ret->type == EVP_PKEY_EC)
d161 1
a161 20
		if (a->parameter && (a->parameter->type == V_ASN1_SEQUENCE))
			{
			/* type == V_ASN1_SEQUENCE => we have explicit parameters
                         * (e.g. parameters in the X9_62_EC_PARAMETERS-structure )
			 */
			if ((ret->pkey.ec= EC_KEY_new()) == NULL)
				{
				X509err(X509_F_X509_PUBKEY_GET, 
					ERR_R_MALLOC_FAILURE);
				goto err;
				}
			cp = p = a->parameter->value.sequence->data;
			j = a->parameter->value.sequence->length;
			if (!d2i_ECParameters(&ret->pkey.ec, &cp, (long)j))
				{
				X509err(X509_F_X509_PUBKEY_GET, ERR_R_EC_LIB);
				goto err;
				}
			}
		else if (a->parameter && (a->parameter->type == V_ASN1_OBJECT))
d163 3
a165 18
			/* type == V_ASN1_OBJECT => the parameters are given
			 * by an asn1 OID
			 */
			EC_KEY   *ec_key;
			EC_GROUP *group;

			if (ret->pkey.ec == NULL)
				ret->pkey.ec = EC_KEY_new();
			ec_key = ret->pkey.ec;
			if (ec_key == NULL)
				goto err;
			group = EC_GROUP_new_by_curve_name(OBJ_obj2nid(a->parameter->value.object));
			if (group == NULL)
				goto err;
			EC_GROUP_set_asn1_flag(group, OPENSSL_EC_NAMED_CURVE);
			if (EC_KEY_set_group(ec_key, group) == 0)
				goto err;
			EC_GROUP_free(group);
a166 2
			/* the case implicitlyCA is currently not implemented */
		ret->save_parameters = 1;
d168 1
a168 5
#endif

	p=key->public_key->data;
        j=key->public_key->length;
        if (!d2i_PublicKey(type, &ret, &p, (long)j))
d170 2
a171 2
		X509err(X509_F_X509_PUBKEY_GET, X509_R_ERR_ASN1_LIB);
		goto err;
d176 4
a179 2
	return(ret);
err:
d338 36
@


1.9
log
@resolve conflicts
@
text
@d63 6
d72 3
a74 2
{
	if(operation == ASN1_OP_FREE_POST) {
d77 2
a79 2
	return 1;
}
a120 1
	else
d122 1
a122 1
		if (pkey->type == EVP_PKEY_DSA)
d126 1
a126 1

a159 1
	else
d161 57
d236 1
a236 1
	/* Set number of unused bits to zero */
d263 2
a264 2
	unsigned char *p;
#ifndef OPENSSL_NO_DSA
d272 4
a275 4
	    {
	    CRYPTO_add(&key->pkey->references,1,CRYPTO_LOCK_EVP_PKEY);
	    return(key->pkey);
	    }
d280 1
a280 3
	p=key->public_key->data;
        j=key->public_key->length;
        if ((ret=d2i_PublicKey(type,NULL,&p,(long)j)) == NULL)
d282 1
a282 1
		X509err(X509_F_X509_PUBKEY_GET,X509_R_ERR_ASN1_LIB);
d285 1
a285 1
	ret->save_parameters=0;
d287 8
d296 1
a296 2
	a=key->algor;
	if (ret->type == EVP_PKEY_DSA)
d300 5
d308 1
a308 1
			if (!d2i_DSAparams(&ret->pkey.dsa,&cp,(long)j))
d314 58
a371 2
	key->pkey=ret;
	CRYPTO_add(&ret->references,1,CRYPTO_LOCK_EVP_PKEY);
d383 1
a383 1
EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, unsigned char **pp,
d385 1
a385 1
{
d393 2
a394 1
	if(a) {
d397 2
a399 2
	return pktmp;
}
d402 1
a402 1
{
d410 1
a410 1
}
d416 1
a416 1
RSA *d2i_RSA_PUBKEY(RSA **a, unsigned char **pp,
d418 1
a418 1
{
d421 1
a421 1
	unsigned char *q;
d424 1
a424 1
	if(!pkey) return NULL;
d427 1
a427 1
	if(!key) return NULL;
d429 2
a430 1
	if(a) {
d433 2
a435 2
	return key;
}
d438 1
a438 1
{
d441 1
a441 1
	if(!a) return 0;
d443 2
a444 1
	if(!pktmp) {
d447 1
a447 1
	}
d452 1
a452 1
}
d456 1
a456 1
DSA *d2i_DSA_PUBKEY(DSA **a, unsigned char **pp,
d458 1
a458 1
{
d461 1
a461 1
	unsigned char *q;
d464 1
a464 1
	if(!pkey) return NULL;
d467 1
a467 1
	if(!key) return NULL;
d469 2
a470 1
	if(a) {
d473 2
a475 2
	return key;
}
d478 1
a478 1
{
d483 2
a484 1
	if(!pktmp) {
d487 1
a487 1
	}
d492 39
a530 1
}
@


1.8
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d83 1
a83 2
	int ok=0;
	X509_PUBKEY *pk;
d106 5
a110 1
			a->parameter=ASN1_TYPE_new();
d124 7
a130 2
		i=i2d_DSAparams(dsa,NULL);
		if ((p=(unsigned char *)OPENSSL_malloc(i)) == NULL) goto err;
d133 6
a138 1
		a->parameter=ASN1_TYPE_new();
d140 12
a151 2
		a->parameter->value.sequence=ASN1_STRING_new();
		ASN1_STRING_set(a->parameter->value.sequence,p,i);
d169 5
a173 1
	if (!M_ASN1_BIT_STRING_set(pk->public_key,s,i)) goto err;
a188 1
	pk=NULL;
d190 1
a190 1
	ok=1;
d193 1
a193 1
	return(ok);
@


1.7
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d87 1
a87 1
	unsigned char *s,*p;
d122 1
a122 1
		p=(unsigned char *)OPENSSL_malloc(i);
d139 5
a143 1
	if ((s=(unsigned char *)OPENSSL_malloc(i+1)) == NULL) goto err;
@


1.6
log
@merge openssl 0.9.6b-engine

Note that this is a maintenence release, API's appear *not* to have changed.
As such, I have only increased the minor number on these libraries
@
text
@d61 1
a61 1
#include <openssl/asn1_mac.h>
d64 6
a69 13
int i2d_X509_PUBKEY(X509_PUBKEY *a, unsigned char **pp)
	{
	M_ASN1_I2D_vars(a);

	M_ASN1_I2D_len(a->algor,	i2d_X509_ALGOR);
	M_ASN1_I2D_len(a->public_key,	i2d_ASN1_BIT_STRING);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put(a->algor,	i2d_X509_ALGOR);
	M_ASN1_I2D_put(a->public_key,	i2d_ASN1_BIT_STRING);

	M_ASN1_I2D_finish();
d71 2
d74 4
a77 21
X509_PUBKEY *d2i_X509_PUBKEY(X509_PUBKEY **a, unsigned char **pp,
	     long length)
	{
	M_ASN1_D2I_vars(a,X509_PUBKEY *,X509_PUBKEY_new);

	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->algor,d2i_X509_ALGOR);
	M_ASN1_D2I_get(ret->public_key,d2i_ASN1_BIT_STRING);
	if (ret->pkey != NULL)
		{
		EVP_PKEY_free(ret->pkey);
		ret->pkey=NULL;
		}
	M_ASN1_D2I_Finish(a,X509_PUBKEY_free,ASN1_F_D2I_X509_PUBKEY);
	}

X509_PUBKEY *X509_PUBKEY_new(void)
	{
	X509_PUBKEY *ret=NULL;
	ASN1_CTX c;
d79 1
a79 16
	M_ASN1_New_Malloc(ret,X509_PUBKEY);
	M_ASN1_New(ret->algor,X509_ALGOR_new);
	M_ASN1_New(ret->public_key,M_ASN1_BIT_STRING_new);
	ret->pkey=NULL;
	return(ret);
	M_ASN1_New_Error(ASN1_F_X509_PUBKEY_NEW);
	}

void X509_PUBKEY_free(X509_PUBKEY *a)
	{
	if (a == NULL) return;
	X509_ALGOR_free(a->algor);
	M_ASN1_BIT_STRING_free(a->public_key);
	if (a->pkey != NULL) EVP_PKEY_free(a->pkey);
	OPENSSL_free(a);
	}
d112 1
a112 1
#ifndef NO_DSA
d172 2
a173 1
#ifndef NO_DSA
d197 1
a197 1
#ifndef NO_DSA
d204 1
a204 1
			p=a->parameter->value.sequence->data;
d206 1
a206 1
			if (!d2i_DSAparams(&ret->pkey.dsa,&p,(long)j))
d256 1
a256 1
#ifndef NO_RSA
d294 1
a294 1
#ifndef NO_DSA
@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@d237 1
a237 1
		if (a->parameter->type == V_ASN1_SEQUENCE)
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d115 1
a115 1
	Free(a);
d159 1
a159 1
		p=(unsigned char *)Malloc(i);
d166 1
a166 1
		Free(p);
d176 1
a176 1
	if ((s=(unsigned char *)Malloc(i+1)) == NULL) goto err;
d184 1
a184 1
	Free(s);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d186 1
d189 1
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d103 1
a103 1
	M_ASN1_New(ret->public_key,ASN1_BIT_STRING_new);
d113 1
a113 1
	ASN1_BIT_STRING_free(a->public_key);
d115 1
a115 1
	Free((char *)a);
d179 1
a179 1
	if (!ASN1_BIT_STRING_set(pk->public_key,s,i)) goto err;
d255 110
@


1.1
log
@Initial revision
@
text
@d61 2
a62 1
#include "asn1_mac.h"
d64 1
a64 8
/*
 * ASN1err(ASN1_F_D2I_X509_PUBKEY,ASN1_R_LENGTH_MISMATCH);
 * ASN1err(ASN1_F_X509_PUBKEY_NEW,ASN1_R_LENGTH_MISMATCH);
 */

int i2d_X509_PUBKEY(a,pp)
X509_PUBKEY *a;
unsigned char **pp;
d79 2
a80 4
X509_PUBKEY *d2i_X509_PUBKEY(a,pp,length)
X509_PUBKEY **a;
unsigned char **pp;
long length;
d96 1
a96 1
X509_PUBKEY *X509_PUBKEY_new()
d99 1
d109 1
a109 2
void X509_PUBKEY_free(a)
X509_PUBKEY *a;
d118 1
a118 3
int X509_PUBKEY_set(x,pkey)
X509_PUBKEY **x;
EVP_PKEY *pkey;
d175 1
a175 1
	i=i2d_PublicKey(pkey,NULL);
d180 4
d201 1
a201 2
EVP_PKEY *X509_PUBKEY_get(key)
X509_PUBKEY *key;
d213 5
a217 1
	if (key->pkey != NULL) return(key->pkey);
d247 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 2
#include <openssl/asn1t.h>
#include <openssl/x509.h>
d63 39
a101 6
/* Minor tweak to operation: free up EVP_PKEY */
static int pubkey_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	if(operation == ASN1_OP_FREE_POST) {
		X509_PUBKEY *pubkey = (X509_PUBKEY *)*pval;
		EVP_PKEY_free(pubkey->pkey);
a102 2
	return 1;
}
d104 11
a114 4
ASN1_SEQUENCE_cb(X509_PUBKEY, pubkey_cb) = {
	ASN1_SIMPLE(X509_PUBKEY, algor, X509_ALGOR),
	ASN1_SIMPLE(X509_PUBKEY, public_key, ASN1_BIT_STRING)
} ASN1_SEQUENCE_END_cb(X509_PUBKEY, X509_PUBKEY)
d116 9
a124 1
IMPLEMENT_ASN1_FUNCTIONS(X509_PUBKEY)
d126 3
a128 1
int X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey)
d134 1
a134 1
	unsigned char *s,*p = NULL;
d159 1
a159 1
#ifndef OPENSSL_NO_DSA
d169 1
a169 1
		if ((p=(unsigned char *)OPENSSL_malloc(i)) == NULL) goto err;
d176 1
a176 1
		OPENSSL_free(p);
d185 2
a186 6
	if ((i=i2d_PublicKey(pkey,NULL)) <= 0) goto err;
	if ((s=(unsigned char *)OPENSSL_malloc(i+1)) == NULL)
		{
		X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
		goto err;
		}
d189 2
a190 6
	if (!M_ASN1_BIT_STRING_set(pk->public_key,s,i)) goto err;
	/* Set number of unused bits to zero */
	pk->public_key->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
	pk->public_key->flags|=ASN1_STRING_FLAG_BITS_LEFT;

	OPENSSL_free(s);
a191 1
#if 0
a193 1
#endif
d207 2
a208 1
EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key)
d214 1
a214 2
#ifndef OPENSSL_NO_DSA
	const unsigned char *cp;
d220 1
a220 5
	if (key->pkey != NULL)
	    {
	    CRYPTO_add(&key->pkey->references,1,CRYPTO_LOCK_EVP_PKEY);
	    return(key->pkey);
	    }
d234 1
a234 1
#ifndef OPENSSL_NO_DSA
d238 1
a238 1
		if (a->parameter && (a->parameter->type == V_ASN1_SEQUENCE))
d241 1
a241 1
			cp=p=a->parameter->value.sequence->data;
d243 1
a243 1
			if (!d2i_DSAparams(&ret->pkey.dsa,&cp,(long)j))
a249 1
	CRYPTO_add(&ret->references,1,CRYPTO_LOCK_EVP_PKEY);
a256 110
/* Now two pseudo ASN1 routines that take an EVP_PKEY structure
 * and encode or decode as X509_PUBKEY
 */

EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, unsigned char **pp,
	     long length)
{
	X509_PUBKEY *xpk;
	EVP_PKEY *pktmp;
	xpk = d2i_X509_PUBKEY(NULL, pp, length);
	if(!xpk) return NULL;
	pktmp = X509_PUBKEY_get(xpk);
	X509_PUBKEY_free(xpk);
	if(!pktmp) return NULL;
	if(a) {
		EVP_PKEY_free(*a);
		*a = pktmp;
	}
	return pktmp;
}

int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
{
	X509_PUBKEY *xpk=NULL;
	int ret;
	if(!a) return 0;
	if(!X509_PUBKEY_set(&xpk, a)) return 0;
	ret = i2d_X509_PUBKEY(xpk, pp);
	X509_PUBKEY_free(xpk);
	return ret;
}

/* The following are equivalents but which return RSA and DSA
 * keys
 */
#ifndef OPENSSL_NO_RSA
RSA *d2i_RSA_PUBKEY(RSA **a, unsigned char **pp,
	     long length)
{
	EVP_PKEY *pkey;
	RSA *key;
	unsigned char *q;
	q = *pp;
	pkey = d2i_PUBKEY(NULL, &q, length);
	if(!pkey) return NULL;
	key = EVP_PKEY_get1_RSA(pkey);
	EVP_PKEY_free(pkey);
	if(!key) return NULL;
	*pp = q;
	if(a) {
		RSA_free(*a);
		*a = key;
	}
	return key;
}

int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
{
	EVP_PKEY *pktmp;
	int ret;
	if(!a) return 0;
	pktmp = EVP_PKEY_new();
	if(!pktmp) {
		ASN1err(ASN1_F_I2D_RSA_PUBKEY, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	EVP_PKEY_set1_RSA(pktmp, a);
	ret = i2d_PUBKEY(pktmp, pp);
	EVP_PKEY_free(pktmp);
	return ret;
}
#endif

#ifndef OPENSSL_NO_DSA
DSA *d2i_DSA_PUBKEY(DSA **a, unsigned char **pp,
	     long length)
{
	EVP_PKEY *pkey;
	DSA *key;
	unsigned char *q;
	q = *pp;
	pkey = d2i_PUBKEY(NULL, &q, length);
	if(!pkey) return NULL;
	key = EVP_PKEY_get1_DSA(pkey);
	EVP_PKEY_free(pkey);
	if(!key) return NULL;
	*pp = q;
	if(a) {
		DSA_free(*a);
		*a = key;
	}
	return key;
}

int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
{
	EVP_PKEY *pktmp;
	int ret;
	if(!a) return 0;
	pktmp = EVP_PKEY_new();
	if(!pktmp) {
		ASN1err(ASN1_F_I2D_DSA_PUBKEY, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	EVP_PKEY_set1_DSA(pktmp, a);
	ret = i2d_PUBKEY(pktmp, pp);
	EVP_PKEY_free(pktmp);
	return ret;
}
#endif
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d83 2
a84 1
	X509_PUBKEY *pk=NULL;
d107 1
a107 5
			if (!(a->parameter=ASN1_TYPE_new()))
				{
				X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
				goto err;
				}
d121 2
a122 7
		if ((i=i2d_DSAparams(dsa,NULL)) <= 0)
			goto err;
		if (!(p=(unsigned char *)OPENSSL_malloc(i)))
			{
			X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
			goto err;
			}
d125 1
a125 6
		if (!(a->parameter=ASN1_TYPE_new()))
			{
			OPENSSL_free(p);
			X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
			goto err;
			}
d127 2
a128 12
		if (!(a->parameter->value.sequence=ASN1_STRING_new()))
			{
			OPENSSL_free(p);
			X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
			goto err;
			}
		if (!ASN1_STRING_set(a->parameter->value.sequence,p,i))
			{
			OPENSSL_free(p);
			X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
			goto err;
			}
d146 1
a146 5
	if (!M_ASN1_BIT_STRING_set(pk->public_key,s,i))
		{
		X509err(X509_F_X509_PUBKEY_SET,ERR_R_MALLOC_FAILURE);
		goto err;
		}
d162 1
d164 1
a164 1
	return 1;
d167 1
a167 1
	return 0;
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a62 6
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
d66 2
a67 3
	{
	if (operation == ASN1_OP_FREE_POST)
		{
d70 1
a70 1
		}
d72 1
a72 1
	}
d114 1
d116 1
a116 1
	else if (pkey->type == EVP_PKEY_DSA)
d120 1
a120 1
		
d154 1
a155 57
#ifndef OPENSSL_NO_EC
	else if (pkey->type == EVP_PKEY_EC)
		{
		int nid=0;
		unsigned char *pp;
		EC_KEY *ec_key;
		const EC_GROUP *group;
		
		ec_key = pkey->pkey.ec;
		ASN1_TYPE_free(a->parameter);

		if ((a->parameter = ASN1_TYPE_new()) == NULL)
			{
			X509err(X509_F_X509_PUBKEY_SET, ERR_R_ASN1_LIB);
			goto err;
			}

		group = EC_KEY_get0_group(ec_key);
		if (EC_GROUP_get_asn1_flag(group)
                     && (nid = EC_GROUP_get_curve_name(group)))
			{
			/* just set the OID */
			a->parameter->type = V_ASN1_OBJECT;
			a->parameter->value.object = OBJ_nid2obj(nid);
			}
		else /* explicit parameters */
			{
			if ((i = i2d_ECParameters(ec_key, NULL)) == 0)
				{
				X509err(X509_F_X509_PUBKEY_SET, ERR_R_EC_LIB);
				goto err;
				}
			if ((p = (unsigned char *) OPENSSL_malloc(i)) == NULL)
				{
				X509err(X509_F_X509_PUBKEY_SET, ERR_R_MALLOC_FAILURE);
				goto err;
				}	
			pp = p;
			if (!i2d_ECParameters(ec_key, &pp))
				{
				X509err(X509_F_X509_PUBKEY_SET, ERR_R_EC_LIB);
				OPENSSL_free(p);
				goto err;
				}
			a->parameter->type = V_ASN1_SEQUENCE;
			if ((a->parameter->value.sequence = ASN1_STRING_new()) == NULL)
				{
				X509err(X509_F_X509_PUBKEY_SET, ERR_R_ASN1_LIB);
				OPENSSL_free(p);
				goto err;
				}
			ASN1_STRING_set(a->parameter->value.sequence, p, i);
			OPENSSL_free(p);
			}
		}
#endif
	else if (1)
d174 1
a174 1
  	/* Set number of unused bits to zero */
d201 2
a202 2
	const unsigned char *p;
#if !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_ECDSA)
d210 4
a213 4
		{
		CRYPTO_add(&key->pkey->references, 1, CRYPTO_LOCK_EVP_PKEY);
		return(key->pkey);
		}
d218 3
a220 1
	if ((ret = EVP_PKEY_new()) == NULL)
d222 1
a222 1
		X509err(X509_F_X509_PUBKEY_GET, ERR_R_MALLOC_FAILURE);
d225 1
a225 1
	ret->type = EVP_PKEY_type(type);
d227 1
a227 3
	/* the parameters must be extracted before the public key (ECDSA!) */
	
#if !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_ECDSA)
d229 1
a229 6
#endif

	if (0)
		;
#ifndef OPENSSL_NO_DSA
	else if (ret->type == EVP_PKEY_DSA)
a232 5
			if ((ret->pkey.dsa = DSA_new()) == NULL)
				{
				X509err(X509_F_X509_PUBKEY_GET, ERR_R_MALLOC_FAILURE);
				goto err;
				}
d236 1
a236 1
			if (!d2i_DSAparams(&ret->pkey.dsa, &cp, (long)j))
d242 2
a243 58
#ifndef OPENSSL_NO_EC
	else if (ret->type == EVP_PKEY_EC)
		{
		if (a->parameter && (a->parameter->type == V_ASN1_SEQUENCE))
			{
			/* type == V_ASN1_SEQUENCE => we have explicit parameters
                         * (e.g. parameters in the X9_62_EC_PARAMETERS-structure )
			 */
			if ((ret->pkey.ec= EC_KEY_new()) == NULL)
				{
				X509err(X509_F_X509_PUBKEY_GET, 
					ERR_R_MALLOC_FAILURE);
				goto err;
				}
			cp = p = a->parameter->value.sequence->data;
			j = a->parameter->value.sequence->length;
			if (!d2i_ECParameters(&ret->pkey.ec, &cp, (long)j))
				{
				X509err(X509_F_X509_PUBKEY_GET, ERR_R_EC_LIB);
				goto err;
				}
			}
		else if (a->parameter && (a->parameter->type == V_ASN1_OBJECT))
			{
			/* type == V_ASN1_OBJECT => the parameters are given
			 * by an asn1 OID
			 */
			EC_KEY   *ec_key;
			EC_GROUP *group;

			if (ret->pkey.ec == NULL)
				ret->pkey.ec = EC_KEY_new();
			ec_key = ret->pkey.ec;
			if (ec_key == NULL)
				goto err;
			group = EC_GROUP_new_by_curve_name(OBJ_obj2nid(a->parameter->value.object));
			if (group == NULL)
				goto err;
			EC_GROUP_set_asn1_flag(group, OPENSSL_EC_NAMED_CURVE);
			if (EC_KEY_set_group(ec_key, group) == 0)
				goto err;
			EC_GROUP_free(group);
			}
			/* the case implicitlyCA is currently not implemented */
		ret->save_parameters = 1;
		}
#endif

	p=key->public_key->data;
        j=key->public_key->length;
        if (!d2i_PublicKey(type, &ret, &p, (long)j))
		{
		X509err(X509_F_X509_PUBKEY_GET, X509_R_ERR_ASN1_LIB);
		goto err;
		}

	key->pkey = ret;
	CRYPTO_add(&ret->references, 1, CRYPTO_LOCK_EVP_PKEY);
d255 1
a255 1
EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp,
d257 1
a257 1
	{
d265 1
a265 2
	if(a)
		{
d268 1
a268 1
		}
d270 1
a270 1
	}
d273 1
a273 1
	{
d281 1
a281 1
	}
d287 1
a287 1
RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp,
d289 1
a289 1
	{
d292 1
a292 1
	const unsigned char *q;
d295 1
a295 1
	if (!pkey) return NULL;
d298 1
a298 1
	if (!key) return NULL;
d300 1
a300 2
	if (a)
		{
d303 1
a303 1
		}
d305 1
a305 1
	}
d308 1
a308 1
	{
d311 1
a311 1
	if (!a) return 0;
d313 1
a313 2
	if (!pktmp)
		{
d316 1
a316 1
		}
d321 1
a321 1
	}
d325 1
a325 1
DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp,
d327 1
a327 1
	{
d330 1
a330 1
	const unsigned char *q;
d333 1
a333 1
	if (!pkey) return NULL;
d336 1
a336 1
	if (!key) return NULL;
d338 1
a338 2
	if (a)
		{
d341 1
a341 1
		}
d343 1
a343 1
	}
d346 1
a346 1
	{
d351 1
a351 2
	if(!pktmp)
		{
d354 1
a354 1
		}
d359 1
a359 39
	}
#endif

#ifndef OPENSSL_NO_EC
EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)
	{
	EVP_PKEY *pkey;
	EC_KEY *key;
	const unsigned char *q;
	q = *pp;
	pkey = d2i_PUBKEY(NULL, &q, length);
	if (!pkey) return(NULL);
	key = EVP_PKEY_get1_EC_KEY(pkey);
	EVP_PKEY_free(pkey);
	if (!key)  return(NULL);
	*pp = q;
	if (a)
		{
		EC_KEY_free(*a);
		*a = key;
		}
	return(key);
	}

int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)
	{
	EVP_PKEY *pktmp;
	int ret;
	if (!a)	return(0);
	if ((pktmp = EVP_PKEY_new()) == NULL)
		{
		ASN1err(ASN1_F_I2D_EC_PUBKEY, ERR_R_MALLOC_FAILURE);
		return(0);
		}
	EVP_PKEY_set1_EC_KEY(pktmp, a);
	ret = i2d_PUBKEY(pktmp, pp);
	EVP_PKEY_free(pktmp);
	return(ret);
	}
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a62 1
#include "asn1_locl.h"
d71 1
a71 2
static int pubkey_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it,
			void *exarg)
d91 4
d98 2
a99 1
	if ((pk=X509_PUBKEY_new()) == NULL) goto error;
d101 7
a107 1
	if (pkey->ameth)
d109 2
a110 1
		if (pkey->ameth->pub_encode)
d112 2
a113 1
			if (!pkey->ameth->pub_encode(pk, pkey))
d115 2
a116 3
				X509err(X509_F_X509_PUBKEY_SET,
					X509_R_PUBLIC_KEY_ENCODE_ERROR);
				goto error;
d118 33
d152 1
a152 1
		else
d154 3
a156 3
			X509err(X509_F_X509_PUBKEY_SET,
				X509_R_METHOD_NOT_SUPPORTED);
			goto error;
d158 1
d160 58
a217 1
	else
d220 1
a220 1
		goto error;
d223 24
d253 1
a253 1
error:
d261 7
d269 1
a269 1
	if (key == NULL) goto error;
d274 1
a274 1
		return key->pkey;
d277 1
a277 1
	if (key->public_key == NULL) goto error;
d279 1
d283 1
a283 1
		goto error;
d285 1
d287 10
a296 1
	if (!EVP_PKEY_set_type(ret, OBJ_obj2nid(key->algor->algorithm)))
d298 14
a311 2
		X509err(X509_F_X509_PUBKEY_GET,X509_R_UNSUPPORTED_ALGORITHM);
		goto error;
d313 3
a315 2

	if (ret->ameth->pub_decode)
d317 20
a336 1
		if (!ret->ameth->pub_decode(ret, key))
d338 18
a355 3
			X509err(X509_F_X509_PUBKEY_GET,
						X509_R_PUBLIC_KEY_DECODE_ERROR);
			goto error;
d357 2
d360 5
a364 1
	else
d366 2
a367 2
		X509err(X509_F_X509_PUBKEY_GET, X509_R_METHOD_NOT_SUPPORTED);
		goto error;
d372 2
a373 4

	return ret;

	error:
a531 36

int X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj,
					int ptype, void *pval,
					unsigned char *penc, int penclen)
	{
	if (!X509_ALGOR_set0(pub->algor, aobj, ptype, pval))
		return 0;
	if (penc)
		{
		if (pub->public_key->data)
			OPENSSL_free(pub->public_key->data);
		pub->public_key->data = penc;
		pub->public_key->length = penclen;
  		/* Set number of unused bits to zero */
		pub->public_key->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
		pub->public_key->flags|=ASN1_STRING_FLAG_BITS_LEFT;
		}
	return 1;
	}

int X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg,
		const unsigned char **pk, int *ppklen,
		X509_ALGOR **pa,
		X509_PUBKEY *pub)
	{
	if (ppkalg)
		*ppkalg = pub->algor->algorithm;
	if (pk)
		{
		*pk = pub->public_key->data;
		*ppklen = pub->public_key->length;
		}
	if (pa)
		*pa = pub->algor;
	return 1;
	}
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@d174 1
a174 10
	/* Check to see if another thread set key->pkey first */
	CRYPTO_w_lock(CRYPTO_LOCK_EVP_PKEY);
	if (key->pkey)
		{
		EVP_PKEY_free(ret);
		ret = key->pkey;
		}
	else
		key->pkey = ret;
	CRYPTO_w_unlock(CRYPTO_LOCK_EVP_PKEY);
@


1.1.1.7
log
@Import OpenSSL 1.0.1g
@
text
@a177 1
		CRYPTO_w_unlock(CRYPTO_LOCK_EVP_PKEY);
a181 1
		{
d183 1
a183 2
		CRYPTO_w_unlock(CRYPTO_LOCK_EVP_PKEY);
		}
@


