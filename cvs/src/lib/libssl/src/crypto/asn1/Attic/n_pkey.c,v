head	1.31;
access;
symbols
	OPENBSD_6_0:1.30.0.4
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.30.0.2
	OPENBSD_5_9_BASE:1.30
	OPENBSD_5_8:1.26.0.4
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.25.0.4
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.5
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.4
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.4
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.3
	OPENSSL_0_9_7_BETA3:1.1.1.3
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.31
date	2016.09.03.11.33.35;	author beck;	state dead;
branches;
next	1.30;
commitid	HnbXxsegngek41U2;

1.30
date	2015.10.16.15.15.39;	author jsing;	state Exp;
branches;
next	1.29;
commitid	Ams8GGdTSb22QfcG;

1.29
date	2015.10.16.15.12.30;	author jsing;	state Exp;
branches;
next	1.28;
commitid	bDtKutzbNOo2abMZ;

1.28
date	2015.10.16.15.09.28;	author jsing;	state Exp;
branches;
next	1.27;
commitid	l1wH7rWzOpjSOAfY;

1.27
date	2015.09.10.15.56.24;	author jsing;	state Exp;
branches;
next	1.26;
commitid	vHznCDK3idwNEFz4;

1.26
date	2015.03.19.14.00.22;	author tedu;	state Exp;
branches;
next	1.25;
commitid	Ix1rLPv61p1TR5LF;

1.25
date	2015.02.11.04.00.39;	author jsing;	state Exp;
branches
	1.25.4.1;
next	1.24;
commitid	QCjRtjn2xv9owjIW;

1.24
date	2015.02.11.03.39.51;	author jsing;	state Exp;
branches;
next	1.23;
commitid	PWeA1V6nbEryguKH;

1.23
date	2015.02.10.04.01.26;	author jsing;	state Exp;
branches;
next	1.22;
commitid	fmu4kkA16bcgKkFQ;

1.22
date	2014.07.12.22.26.01;	author miod;	state Exp;
branches
	1.22.4.1;
next	1.21;
commitid	cEv0qp7GiO8rtzhW;

1.21
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.20;
commitid	yQEL1wOWIearrW15;

1.20
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.19;
commitid	nzndm3zqPmFurSaK;

1.19
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.18;
commitid	id8dTrTMtnTn4fqt;

1.18
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.04.23.19.09.48;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.23.04.24.39;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.19.06.15.56;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.10.16.31.54;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.09;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.45;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.31;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.49;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.35.50;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.21.34.33;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.08;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.34;	author djm;	state Exp;
branches;
next	;

1.22.4.1
date	2015.03.19.14.02.22;	author tedu;	state Exp;
branches;
next	;
commitid	bYTbbXa7PWk8y7To;

1.25.4.1
date	2015.03.19.14.01.15;	author tedu;	state Exp;
branches;
next	;
commitid	dQgHc1qjfDF6g1rY;


desc
@@


1.31
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: n_pkey.c,v 1.30 2015/10/16 15:15:39 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_RSA
#include <openssl/asn1t.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/rsa.h>
#include <openssl/x509.h>

#ifndef OPENSSL_NO_RC4

typedef struct netscape_pkey_st {
	long version;
	X509_ALGOR *algor;
	ASN1_OCTET_STRING *private_key;
} NETSCAPE_PKEY;

typedef struct netscape_encrypted_pkey_st {
	ASN1_OCTET_STRING *os;
	/* This is the same structure as DigestInfo so use it:
	 * although this isn't really anything to do with
	 * digests.
	 */
	X509_SIG *enckey;
} NETSCAPE_ENCRYPTED_PKEY;


static const ASN1_AUX NETSCAPE_ENCRYPTED_PKEY_aux = {
	.flags = ASN1_AFLG_BROKEN,
};
static const ASN1_TEMPLATE NETSCAPE_ENCRYPTED_PKEY_seq_tt[] = {
	{
		.offset = offsetof(NETSCAPE_ENCRYPTED_PKEY, os),
		.field_name = "os",
		.item = &ASN1_OCTET_STRING_it,
	},
	{
		.offset = offsetof(NETSCAPE_ENCRYPTED_PKEY, enckey),
		.field_name = "enckey",
		.item = &X509_SIG_it,
	},
};

const ASN1_ITEM NETSCAPE_ENCRYPTED_PKEY_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = NETSCAPE_ENCRYPTED_PKEY_seq_tt,
	.tcount = sizeof(NETSCAPE_ENCRYPTED_PKEY_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = &NETSCAPE_ENCRYPTED_PKEY_aux,
	.size = sizeof(NETSCAPE_ENCRYPTED_PKEY),
	.sname = "NETSCAPE_ENCRYPTED_PKEY",
};

NETSCAPE_ENCRYPTED_PKEY *NETSCAPE_ENCRYPTED_PKEY_new(void);
void NETSCAPE_ENCRYPTED_PKEY_free(NETSCAPE_ENCRYPTED_PKEY *a);
NETSCAPE_ENCRYPTED_PKEY *d2i_NETSCAPE_ENCRYPTED_PKEY(NETSCAPE_ENCRYPTED_PKEY **a, const unsigned char **in, long len);
int i2d_NETSCAPE_ENCRYPTED_PKEY(const NETSCAPE_ENCRYPTED_PKEY *a, unsigned char **out);

NETSCAPE_ENCRYPTED_PKEY *
d2i_NETSCAPE_ENCRYPTED_PKEY(NETSCAPE_ENCRYPTED_PKEY **a, const unsigned char **in, long len)
{
	return (NETSCAPE_ENCRYPTED_PKEY *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &NETSCAPE_ENCRYPTED_PKEY_it);
}

int
i2d_NETSCAPE_ENCRYPTED_PKEY(const NETSCAPE_ENCRYPTED_PKEY *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &NETSCAPE_ENCRYPTED_PKEY_it);
}

NETSCAPE_ENCRYPTED_PKEY *
NETSCAPE_ENCRYPTED_PKEY_new(void)
{
	return (NETSCAPE_ENCRYPTED_PKEY *)ASN1_item_new(&NETSCAPE_ENCRYPTED_PKEY_it);
}

void
NETSCAPE_ENCRYPTED_PKEY_free(NETSCAPE_ENCRYPTED_PKEY *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &NETSCAPE_ENCRYPTED_PKEY_it);
}

static const ASN1_TEMPLATE NETSCAPE_PKEY_seq_tt[] = {
	{
		.offset = offsetof(NETSCAPE_PKEY, version),
		.field_name = "version",
		.item = &LONG_it,
	},
	{
		.offset = offsetof(NETSCAPE_PKEY, algor),
		.field_name = "algor",
		.item = &X509_ALGOR_it,
	},
	{
		.offset = offsetof(NETSCAPE_PKEY, private_key),
		.field_name = "private_key",
		.item = &ASN1_OCTET_STRING_it,
	},
};

const ASN1_ITEM NETSCAPE_PKEY_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = NETSCAPE_PKEY_seq_tt,
	.tcount = sizeof(NETSCAPE_PKEY_seq_tt) / sizeof(ASN1_TEMPLATE),
	.size = sizeof(NETSCAPE_PKEY),
	.sname = "NETSCAPE_PKEY",
};

NETSCAPE_PKEY *NETSCAPE_PKEY_new(void);
void NETSCAPE_PKEY_free(NETSCAPE_PKEY *a);
NETSCAPE_PKEY *d2i_NETSCAPE_PKEY(NETSCAPE_PKEY **a, const unsigned char **in, long len);
int i2d_NETSCAPE_PKEY(const NETSCAPE_PKEY *a, unsigned char **out);

NETSCAPE_PKEY *
d2i_NETSCAPE_PKEY(NETSCAPE_PKEY **a, const unsigned char **in, long len)
{
	return (NETSCAPE_PKEY *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &NETSCAPE_PKEY_it);
}

int
i2d_NETSCAPE_PKEY(const NETSCAPE_PKEY *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &NETSCAPE_PKEY_it);
}

NETSCAPE_PKEY *
NETSCAPE_PKEY_new(void)
{
	return (NETSCAPE_PKEY *)ASN1_item_new(&NETSCAPE_PKEY_it);
}

void
NETSCAPE_PKEY_free(NETSCAPE_PKEY *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &NETSCAPE_PKEY_it);
}

static RSA *d2i_RSA_NET_2(RSA **a, ASN1_OCTET_STRING *os,
    int (*cb)(char *buf, int len, const char *prompt, int verify), int sgckey);

int
i2d_Netscape_RSA(const RSA *a, unsigned char **pp,
    int (*cb)(char *buf, int len, const char *prompt, int verify))
{
	return i2d_RSA_NET(a, pp, cb, 0);
}

int
i2d_RSA_NET(const RSA *a, unsigned char **pp,
    int (*cb)(char *buf, int len, const char *prompt, int verify), int sgckey)
{
	int i, j, ret = 0;
	int rsalen, pkeylen, olen;
	NETSCAPE_PKEY *pkey = NULL;
	NETSCAPE_ENCRYPTED_PKEY *enckey = NULL;
	unsigned char buf[256], *zz;
	unsigned char key[EVP_MAX_KEY_LENGTH];
	EVP_CIPHER_CTX ctx;
	EVP_CIPHER_CTX_init(&ctx);

	if (a == NULL)
		return (0);

	if ((pkey = NETSCAPE_PKEY_new()) == NULL)
		goto err;
	if ((enckey = NETSCAPE_ENCRYPTED_PKEY_new()) == NULL)
		goto err;
	pkey->version = 0;

	pkey->algor->algorithm = OBJ_nid2obj(NID_rsaEncryption);
	if ((pkey->algor->parameter = ASN1_TYPE_new()) == NULL)
		goto err;
	pkey->algor->parameter->type = V_ASN1_NULL;

	rsalen = i2d_RSAPrivateKey(a, NULL);

	/* Fake some octet strings just for the initial length
	 * calculation.
 	 */
	pkey->private_key->length = rsalen;
	pkeylen = i2d_NETSCAPE_PKEY(pkey, NULL);
	enckey->enckey->digest->length = pkeylen;
	enckey->os->length = 11;	/* "private-key" */
	enckey->enckey->algor->algorithm = OBJ_nid2obj(NID_rc4);
	if ((enckey->enckey->algor->parameter = ASN1_TYPE_new()) == NULL)
		goto err;
	enckey->enckey->algor->parameter->type = V_ASN1_NULL;

	if (pp == NULL) {
		olen = i2d_NETSCAPE_ENCRYPTED_PKEY(enckey, NULL);
		NETSCAPE_PKEY_free(pkey);
		NETSCAPE_ENCRYPTED_PKEY_free(enckey);
		return olen;
	}

	/* Since its RC4 encrypted length is actual length */
	if ((zz = malloc(rsalen)) == NULL) {
		ASN1err(ASN1_F_I2D_RSA_NET, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	pkey->private_key->data = zz;
	/* Write out private key encoding */
	i2d_RSAPrivateKey(a, &zz);

	if ((zz = malloc(pkeylen)) == NULL) {
		ASN1err(ASN1_F_I2D_RSA_NET, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (!ASN1_STRING_set(enckey->os, "private-key", -1)) {
		ASN1err(ASN1_F_I2D_RSA_NET, ERR_R_MALLOC_FAILURE);
		goto err;
	}
	enckey->enckey->digest->data = zz;
	i2d_NETSCAPE_PKEY(pkey, &zz);

	/* Wipe the private key encoding */
	explicit_bzero(pkey->private_key->data, rsalen);

	if (cb == NULL)
		cb = EVP_read_pw_string;
	i = cb((char *)buf, sizeof(buf), "Enter Private Key password:", 1);
	if (i != 0) {
		ASN1err(ASN1_F_I2D_RSA_NET, ASN1_R_BAD_PASSWORD_READ);
		goto err;
	}
	i = strlen((char *)buf);
	/* If the key is used for SGC the algorithm is modified a little. */
	if (sgckey) {
		if (!EVP_Digest(buf, i, buf, NULL, EVP_md5(), NULL))
			goto err;
		memcpy(buf + 16, "SGCKEYSALT", 10);
		i = 26;
	}

	if (!EVP_BytesToKey(EVP_rc4(), EVP_md5(), NULL, buf, i,1, key, NULL))
		goto err;
	explicit_bzero(buf, sizeof(buf));

	/* Encrypt private key in place */
	zz = enckey->enckey->digest->data;
	if (!EVP_EncryptInit_ex(&ctx, EVP_rc4(), NULL, key, NULL))
		goto err;
	if (!EVP_EncryptUpdate(&ctx, zz, &i, zz, pkeylen))
		goto err;
	if (!EVP_EncryptFinal_ex(&ctx, zz + i, &j))
		goto err;

	ret = i2d_NETSCAPE_ENCRYPTED_PKEY(enckey, pp);
err:
	EVP_CIPHER_CTX_cleanup(&ctx);
	NETSCAPE_ENCRYPTED_PKEY_free(enckey);
	NETSCAPE_PKEY_free(pkey);
	return (ret);
}


RSA *
d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length,
    int (*cb)(char *buf, int len, const char *prompt, int verify))
{
	return d2i_RSA_NET(a, pp, length, cb, 0);
}

RSA *
d2i_RSA_NET(RSA **a, const unsigned char **pp, long length,
    int (*cb)(char *buf, int len, const char *prompt, int verify), int sgckey)
{
	RSA *ret = NULL;
	const unsigned char *p;
	NETSCAPE_ENCRYPTED_PKEY *enckey = NULL;

	p = *pp;

	enckey = d2i_NETSCAPE_ENCRYPTED_PKEY(NULL, &p, length);
	if (!enckey) {
		ASN1err(ASN1_F_D2I_RSA_NET, ASN1_R_DECODING_ERROR);
		return NULL;
	}

	/* XXX 11 == strlen("private-key") */
	if (enckey->os->length != 11 ||
	    memcmp("private-key", enckey->os->data, 11) != 0) {
		ASN1err(ASN1_F_D2I_RSA_NET, ASN1_R_PRIVATE_KEY_HEADER_MISSING);
		goto err;
	}
	if (OBJ_obj2nid(enckey->enckey->algor->algorithm) != NID_rc4) {
		ASN1err(ASN1_F_D2I_RSA_NET,
		    ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM);
		goto err;
	}
	if (cb == NULL)
		cb = EVP_read_pw_string;
	if ((ret = d2i_RSA_NET_2(a, enckey->enckey->digest, cb,
	    sgckey)) == NULL)
		goto err;

	*pp = p;

err:
	NETSCAPE_ENCRYPTED_PKEY_free(enckey);
	return ret;

}

static RSA *
d2i_RSA_NET_2(RSA **a, ASN1_OCTET_STRING *os,
    int (*cb)(char *buf, int len, const char *prompt, int verify), int sgckey)
{
	NETSCAPE_PKEY *pkey = NULL;
	RSA *ret = NULL;
	int i, j;
	unsigned char buf[256];
	const unsigned char *zz;
	unsigned char key[EVP_MAX_KEY_LENGTH];
	EVP_CIPHER_CTX ctx;
	EVP_CIPHER_CTX_init(&ctx);

	i=cb((char *)buf, sizeof(buf), "Enter Private Key password:",0);
	if (i != 0) {
		ASN1err(ASN1_F_D2I_RSA_NET_2, ASN1_R_BAD_PASSWORD_READ);
		goto err;
	}

	i = strlen((char *)buf);
	if (sgckey){
		if (!EVP_Digest(buf, i, buf, NULL, EVP_md5(), NULL))
			goto err;
		memcpy(buf + 16, "SGCKEYSALT", 10);
		i = 26;
	}

	if (!EVP_BytesToKey(EVP_rc4(), EVP_md5(), NULL, buf, i,1, key, NULL))
		goto err;
	explicit_bzero(buf, sizeof(buf));

	if (!EVP_DecryptInit_ex(&ctx, EVP_rc4(), NULL, key, NULL))
		goto err;
	if (!EVP_DecryptUpdate(&ctx, os->data, &i, os->data, os->length))
		goto err;
	if (!EVP_DecryptFinal_ex(&ctx, &(os->data[i]), &j))
		goto err;
	os->length = i + j;

	zz = os->data;

	if ((pkey = d2i_NETSCAPE_PKEY(NULL, &zz, os->length)) == NULL) {
		ASN1err(ASN1_F_D2I_RSA_NET_2,
		    ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY);
		goto err;
	}

	zz = pkey->private_key->data;
	if ((ret = d2i_RSAPrivateKey(a, &zz,
	    pkey->private_key->length)) == NULL) {
		ASN1err(ASN1_F_D2I_RSA_NET_2, ASN1_R_UNABLE_TO_DECODE_RSA_KEY);
		goto err;
	}

err:
	EVP_CIPHER_CTX_cleanup(&ctx);
	NETSCAPE_PKEY_free(pkey);
	return (ret);
}

#endif /* OPENSSL_NO_RC4 */

#endif
@


1.30
log
@Remove pointless externs - the structs are declared in the same files a
few lines above.
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.29 2015/10/16 15:12:30 jsing Exp $ */
@


1.29
log
@Expand DECLARE_ASN1_ALLOC_FUNCTIONS and DECLARE_ASN1_FUNCTIONS_const
macros. The only change in the generated assembly is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.28 2015/10/16 15:09:28 jsing Exp $ */
a119 1
extern const ASN1_ITEM NETSCAPE_ENCRYPTED_PKEY_it;
a176 1
extern const ASN1_ITEM NETSCAPE_PKEY_it;
@


1.28
log
@Remove pointless uses of DECLARE_ASN1_ENCODE_FUNCTIONS_const.

DECLARE_ASN1_FUNCTIONS_const already includes this macro so using both
means we end up with duplicate function prototypes and externs.
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.27 2015/09/10 15:56:24 jsing Exp $ */
d116 5
a120 1
DECLARE_ASN1_FUNCTIONS_const(NETSCAPE_ENCRYPTED_PKEY)
d174 5
a178 1
DECLARE_ASN1_FUNCTIONS_const(NETSCAPE_PKEY)
@


1.27
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.26 2015/03/19 14:00:22 tedu Exp $ */
a116 1
DECLARE_ASN1_ENCODE_FUNCTIONS_const(NETSCAPE_ENCRYPTED_PKEY, NETSCAPE_ENCRYPTED_PKEY)
a170 1
DECLARE_ASN1_ENCODE_FUNCTIONS_const(NETSCAPE_PKEY, NETSCAPE_PKEY)
@


1.26
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.25 2015/02/11 04:00:39 jsing Exp $ */
d280 1
a280 1
	OPENSSL_cleanse(pkey->private_key->data, rsalen);
d300 1
a300 1
	OPENSSL_cleanse(buf, sizeof(buf));
d397 1
a397 1
	OPENSSL_cleanse(buf, sizeof(buf));
@


1.25
log
@Remove initialisers with default values from the ASN1 data structures.

Minor changes in generated assembly due to the compiler swapping from
.quad 0/.long 0 to .zero, along with changes due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.24 2015/02/11 03:39:51 jsing Exp $ */
d343 3
a345 2
	if ((enckey->os->length != 11) || (strncmp("private-key",
	(char *)enckey->os->data, 11) != 0)) {
d347 1
a347 2
		NETSCAPE_ENCRYPTED_PKEY_free(enckey);
		return NULL;
@


1.25.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.25 2015/02/11 04:00:39 jsing Exp $ */
d343 2
a344 3
	/* XXX 11 == strlen("private-key") */
	if (enckey->os->length != 11 ||
	    memcmp("private-key", enckey->os->data, 11) != 0) {
d346 2
a347 1
		goto err;
@


1.24
log
@Expand most of the ASN1_SEQUENCE* and associated macros, making the data
structures visible and easier to review, without having to wade through
layers and layers of asn1t.h macros.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.23 2015/02/10 04:01:26 jsing Exp $ */
a90 1
	.app_data = NULL,
a91 4
	.ref_offset = 0,
	.ref_lock = 0,
	.asn1_cb = NULL,
	.enc_offset = 0,
a94 2
		.flags = 0,
		.tag = 0,
a99 2
		.flags = 0,
		.tag = 0,
a145 2
		.flags = 0,
		.tag = 0,
a150 2
		.flags = 0,
		.tag = 0,
a155 2
		.flags = 0,
		.tag = 0,
a166 1
	.funcs = NULL,
@


1.23
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS_{const,fname,name} macros so that the
code is visible and functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.22 2014/07/12 22:26:01 miod Exp $ */
d90 34
a123 4
ASN1_BROKEN_SEQUENCE(NETSCAPE_ENCRYPTED_PKEY) = {
	ASN1_SIMPLE(NETSCAPE_ENCRYPTED_PKEY, os, ASN1_OCTET_STRING),
	ASN1_SIMPLE(NETSCAPE_ENCRYPTED_PKEY, enckey, X509_SIG)
} ASN1_BROKEN_SEQUENCE_END(NETSCAPE_ENCRYPTED_PKEY)
d153 33
a185 5
ASN1_SEQUENCE(NETSCAPE_PKEY) = {
	ASN1_SIMPLE(NETSCAPE_PKEY, version, LONG),
	ASN1_SIMPLE(NETSCAPE_PKEY, algor, X509_ALGOR),
	ASN1_SIMPLE(NETSCAPE_PKEY, private_key, ASN1_OCTET_STRING)
} ASN1_SEQUENCE_END(NETSCAPE_PKEY)
@


1.22
log
@No need to include asn1_mac.h here.
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.21 2014/07/11 08:44:47 jsing Exp $ */
d97 25
a121 1
IMPLEMENT_ASN1_FUNCTIONS_const(NETSCAPE_ENCRYPTED_PKEY)
d131 25
a155 1
IMPLEMENT_ASN1_FUNCTIONS_const(NETSCAPE_PKEY)
@


1.22.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.22 2014/07/12 22:26:01 miod Exp $ */
d253 2
a254 3
	/* XXX 11 == strlen("private-key") */
	if (enckey->os->length != 11 ||
	    memcmp("private-key", enckey->os->data, 11) != 0) {
d256 2
a257 1
		goto err;
@


1.21
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.20 2014/07/10 22:45:56 jsing Exp $ */
a65 1
#include <openssl/asn1_mac.h>
@


1.20
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.19 2014/07/10 13:58:22 jsing Exp $ */
a63 1
#include "cryptlib.h"
a64 2
#include <openssl/rsa.h>
#include <openssl/objects.h>
d67 1
d69 2
a71 1

@


1.19
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: n_pkey.c,v 1.18 2014/06/12 15:49:27 deraadt Exp $ */
d61 2
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.17
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d1 1
a1 1
/* crypto/asn1/n_pkey.c */
@


1.16
log
@Rather than sprinkling magical numbers everywhere, we can use sizeof()
for the size of a fixed size array.
From Dirk Engling <erdgeist@@erdgeist.org>
@
text
@a337 6
#else /* !OPENSSL_NO_RSA */

# if PEDANTIC
static void *dummy = &dummy;
# endif

@


1.15
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@d192 1
a192 1
	i = cb((char *)buf, 256, "Enter Private Key password:", 1);
d208 1
a208 1
	OPENSSL_cleanse(buf, 256);
d289 1
a289 1
	i=cb((char *)buf,256, "Enter Private Key password:",0);
d305 1
a305 1
	OPENSSL_cleanse(buf, 256);
@


1.14
log
@More KNF.
@
text
@d166 1
a166 1
	if ((zz = (unsigned char *)malloc(rsalen)) == NULL) {
@


1.13
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d72 1
a72 2
typedef struct netscape_pkey_st
{
d78 1
a78 2
typedef struct netscape_encrypted_pkey_st
{
d94 1
a94 1
DECLARE_ASN1_ENCODE_FUNCTIONS_const(NETSCAPE_ENCRYPTED_PKEY,NETSCAPE_ENCRYPTED_PKEY)
d104 1
a104 1
DECLARE_ASN1_ENCODE_FUNCTIONS_const(NETSCAPE_PKEY,NETSCAPE_PKEY)
d108 5
a112 7
			  int (*cb)(char *buf, int len, const char *prompt,
				    int verify),
			  int sgckey);

int i2d_Netscape_RSA(const RSA *a, unsigned char **pp,
		     int (*cb)(char *buf, int len, const char *prompt,
			       int verify))
d117 3
a119 3
int i2d_RSA_NET(const RSA *a, unsigned char **pp,
		int (*cb)(char *buf, int len, const char *prompt, int verify),
		int sgckey)
d125 1
a125 1
	unsigned char buf[256],*zz;
d130 2
a131 1
	if (a == NULL) return(0);
d133 4
a136 2
	if ((pkey=NETSCAPE_PKEY_new()) == NULL) goto err;
	if ((enckey=NETSCAPE_ENCRYPTED_PKEY_new()) == NULL) goto err;
d139 4
a142 3
	pkey->algor->algorithm=OBJ_nid2obj(NID_rsaEncryption);
	if ((pkey->algor->parameter=ASN1_TYPE_new()) == NULL) goto err;
	pkey->algor->parameter->type=V_ASN1_NULL;
d149 2
a150 5

	pkey->private_key->length=rsalen;

	pkeylen=i2d_NETSCAPE_PKEY(pkey,NULL);

a151 1

d153 4
a156 4

	enckey->enckey->algor->algorithm=OBJ_nid2obj(NID_rc4);
	if ((enckey->enckey->algor->parameter=ASN1_TYPE_new()) == NULL) goto err;
	enckey->enckey->algor->parameter->type=V_ASN1_NULL;
a164 1

d166 2
a167 2
	if ((zz=(unsigned char *)malloc(rsalen)) == NULL) {
		ASN1err(ASN1_F_I2D_RSA_NET,ERR_R_MALLOC_FAILURE);
d173 1
a173 1
	i2d_RSAPrivateKey(a,&zz);
d175 2
a176 2
	if ((zz=malloc(pkeylen)) == NULL) {
		ASN1err(ASN1_F_I2D_RSA_NET,ERR_R_MALLOC_FAILURE);
d181 1
a181 1
		ASN1err(ASN1_F_I2D_RSA_NET,ERR_R_MALLOC_FAILURE);
d185 1
a185 1
	i2d_NETSCAPE_PKEY(pkey,&zz);
d189 1
a189 1
		
d191 2
a192 2
		cb=EVP_read_pw_string;
	i=cb((char *)buf,256,"Enter Private Key password:",1);
d194 1
a194 1
		ASN1err(ASN1_F_I2D_RSA_NET,ASN1_R_BAD_PASSWORD_READ);
d199 1
a199 1
	if(sgckey) {
d204 1
a204 1
}
d206 1
a206 1
	if (!EVP_BytesToKey(EVP_rc4(),EVP_md5(),NULL,buf,i,1,key,NULL))
d208 1
a208 1
	OPENSSL_cleanse(buf,256);
d212 1
a212 1
	if (!EVP_EncryptInit_ex(&ctx,EVP_rc4(),NULL,key,NULL))
d214 1
a214 1
	if (!EVP_EncryptUpdate(&ctx,zz,&i,zz,pkeylen))
d216 1
a216 1
	if (!EVP_EncryptFinal_ex(&ctx,zz + i,&j))
d224 1
a224 1
	return(ret);
d228 3
a230 3
RSA *d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length,
		      int (*cb)(char *buf, int len, const char *prompt,
				int verify))
d235 3
a237 3
RSA *d2i_RSA_NET(RSA **a, const unsigned char **pp, long length,
		 int (*cb)(char *buf, int len, const char *prompt, int verify),
		 int sgckey)
d239 1
a239 1
	RSA *ret=NULL;
d246 2
a247 2
	if(!enckey) {
		ASN1err(ASN1_F_D2I_RSA_NET,ASN1_R_DECODING_ERROR);
d249 1
a249 1
}
d252 2
a253 2
		(char *)enckey->os->data,11) != 0)) {
		ASN1err(ASN1_F_D2I_RSA_NET,ASN1_R_PRIVATE_KEY_HEADER_MISSING);
d258 2
a259 1
		ASN1err(ASN1_F_D2I_RSA_NET,ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM);
d261 1
a261 1
}
d263 4
a266 2
		cb=EVP_read_pw_string;
	if ((ret=d2i_RSA_NET_2(a, enckey->enckey->digest,cb, sgckey)) == NULL) goto err;
d270 1
a270 1
	err:
d276 3
a278 3
static RSA *d2i_RSA_NET_2(RSA **a, ASN1_OCTET_STRING *os,
			  int (*cb)(char *buf, int len, const char *prompt,
				    int verify), int sgckey)
d280 3
a282 3
	NETSCAPE_PKEY *pkey=NULL;
	RSA *ret=NULL;
	int i,j;
d289 1
a289 1
	i=cb((char *)buf,256,"Enter Private Key password:",0);
d291 1
a291 1
		ASN1err(ASN1_F_D2I_RSA_NET_2,ASN1_R_BAD_PASSWORD_READ);
d296 1
a296 1
	if(sgckey){
d301 3
a303 3
}
		
	if (!EVP_BytesToKey(EVP_rc4(),EVP_md5(),NULL,buf,i,1,key,NULL))
d305 1
a305 1
	OPENSSL_cleanse(buf,256);
d307 1
a307 1
	if (!EVP_DecryptInit_ex(&ctx,EVP_rc4(),NULL, key,NULL))
d309 1
a309 1
	if (!EVP_DecryptUpdate(&ctx,os->data,&i,os->data,os->length))
d311 1
a311 1
	if (!EVP_DecryptFinal_ex(&ctx,&(os->data[i]),&j))
d313 1
a313 1
	os->length=i+j;
d315 1
a315 1
	zz=os->data;
d317 3
a319 2
	if ((pkey=d2i_NETSCAPE_PKEY(NULL,&zz,os->length)) == NULL) {
		ASN1err(ASN1_F_D2I_RSA_NET_2,ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY);
d322 5
a326 4
		
	zz=pkey->private_key->data;
	if ((ret=d2i_RSAPrivateKey(a,&zz,pkey->private_key->length)) == NULL) {
		ASN1err(ASN1_F_D2I_RSA_NET_2,ASN1_R_UNABLE_TO_DECODE_RSA_KEY);
d329 1
d333 1
a333 1
	return(ret);
d341 1
a341 1
static void *dummy=&dummy;
@


1.12
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d162 1
a162 2
	if (pp == NULL)
	{
d171 1
a171 2
	if ((zz=(unsigned char *)malloc(rsalen)) == NULL)
	{
d180 1
a180 2
	if ((zz=malloc(pkeylen)) == NULL)
	{
d185 1
a185 2
	if (!ASN1_STRING_set(enckey->os, "private-key", -1)) 
	{
d198 1
a198 2
	if (i != 0)
	{
d257 1
a257 2
		(char *)enckey->os->data,11) != 0))
	{
d262 1
a262 2
	if (OBJ_obj2nid(enckey->enckey->algor->algorithm) != NID_rc4)
	{
d292 1
a292 2
	if (i != 0)
	{
d319 1
a319 2
	if ((pkey=d2i_NETSCAPE_PKEY(NULL,&zz,os->length)) == NULL)
	{
d325 1
a325 2
	if ((ret=d2i_RSAPrivateKey(a,&zz,pkey->private_key->length)) == NULL)
	{
@


1.11
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d73 1
a73 1
	{
d77 1
a77 1
	} NETSCAPE_PKEY;
d80 1
a80 1
	{
d87 1
a87 1
	} NETSCAPE_ENCRYPTED_PKEY;
d124 1
a124 1
	{
d163 1
a163 1
		{
d168 1
a168 1
		}
d173 1
a173 1
		{
d176 1
a176 1
		}
d183 1
a183 1
		{
d186 1
a186 1
		}
d189 1
a189 1
		{
d192 1
a192 1
		}
d203 1
a203 1
		{
d206 1
a206 1
		}
d214 1
a214 1
	}
d235 1
a235 1
	}
d248 1
a248 1
	{
d259 1
a259 1
	}
d263 1
a263 1
		{
d267 1
a267 1
		}
d269 1
a269 1
		{
d272 1
a272 1
	}
d283 1
a283 1
	}
d288 1
a288 1
	{
d300 1
a300 1
		{
d303 1
a303 1
		}
d311 1
a311 1
	}
d328 1
a328 1
		{
d331 1
a331 1
		}
d335 1
a335 1
		{
d338 1
a338 1
		}
d343 1
a343 1
	}
@


1.10
log
@resolve conflicts
@
text
@d172 1
a172 1
	if ((zz=(unsigned char *)OPENSSL_malloc(rsalen)) == NULL)
d182 1
a182 1
	if ((zz=OPENSSL_malloc(pkeylen)) == NULL)
@


1.9
log
@openssl-1.0.0e: resolve conflicts
@
text
@d132 1
d210 2
a211 1
		EVP_Digest(buf, i, buf, NULL, EVP_md5(), NULL);
d216 2
a217 1
	EVP_BytesToKey(EVP_rc4(),EVP_md5(),NULL,buf,i,1,key,NULL);
d222 6
a227 5
	EVP_CIPHER_CTX_init(&ctx);
	EVP_EncryptInit_ex(&ctx,EVP_rc4(),NULL,key,NULL);
	EVP_EncryptUpdate(&ctx,zz,&i,zz,pkeylen);
	EVP_EncryptFinal_ex(&ctx,zz + i,&j);
	EVP_CIPHER_CTX_cleanup(&ctx);
d231 1
d296 1
d307 2
a308 1
		EVP_Digest(buf, i, buf, NULL, EVP_md5(), NULL);
d313 2
a314 1
	EVP_BytesToKey(EVP_rc4(),EVP_md5(),NULL,buf,i,1,key,NULL);
d317 6
a322 5
	EVP_CIPHER_CTX_init(&ctx);
	EVP_DecryptInit_ex(&ctx,EVP_rc4(),NULL, key,NULL);
	EVP_DecryptUpdate(&ctx,os->data,&i,os->data,os->length);
	EVP_DecryptFinal_ex(&ctx,&(os->data[i]),&j);
	EVP_CIPHER_CTX_cleanup(&ctx);
d340 1
@


1.8
log
@resolve conflicts
@
text
@d245 1
a245 1
	const unsigned char *p, *kp;
a267 1
	kp = enckey->enckey->digest->data;
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@a58 1
#ifndef OPENSSL_NO_RSA
d61 1
d110 7
a116 3
	     int (*cb)(), int sgckey);

int i2d_Netscape_RSA(const RSA *a, unsigned char **pp, int (*cb)())
d121 3
a123 1
int i2d_RSA_NET(const RSA *a, unsigned char **pp, int (*cb)(), int sgckey)
d173 1
a173 1
		ASN1err(ASN1_F_I2D_NETSCAPE_RSA,ERR_R_MALLOC_FAILURE);
d183 1
a183 1
		ASN1err(ASN1_F_I2D_NETSCAPE_RSA,ERR_R_MALLOC_FAILURE);
d189 1
a189 1
		ASN1err(ASN1_F_I2D_NETSCAPE_RSA,ERR_R_MALLOC_FAILURE);
d200 1
a200 1
	i=cb(buf,256,"Enter Private Key password:",1);
d203 1
a203 1
		ASN1err(ASN1_F_I2D_NETSCAPE_RSA,ASN1_R_BAD_PASSWORD_READ);
d233 3
a235 1
RSA *d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length, int (*cb)())
d240 3
a242 1
RSA *d2i_RSA_NET(RSA **a, const unsigned char **pp, long length, int (*cb)(), int sgckey)
d252 1
a252 1
		ASN1err(ASN1_F_D2I_NETSCAPE_RSA,ASN1_R_DECODING_ERROR);
d259 1
a259 1
		ASN1err(ASN1_F_D2I_NETSCAPE_RSA,ASN1_R_PRIVATE_KEY_HEADER_MISSING);
d265 1
a265 1
		ASN1err(ASN1_F_D2I_NETSCAPE_RSA_2,ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM);
d282 2
a283 1
	     int (*cb)(), int sgckey)
d293 1
a293 1
	i=cb(buf,256,"Enter Private Key password:",0);
d296 1
a296 1
		ASN1err(ASN1_F_D2I_NETSCAPE_RSA_2,ASN1_R_BAD_PASSWORD_READ);
d321 1
a321 1
		ASN1err(ASN1_F_D2I_NETSCAPE_RSA_2,ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY);
d328 1
a328 1
		ASN1err(ASN1_F_D2I_NETSCAPE_RSA_2,ASN1_R_UNABLE_TO_DECODE_RSA_KEY);
@


1.6
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d190 1
a190 1
	memset(pkey->private_key->data, 0, rsalen);
d209 1
a209 1
	memset(buf,0,256);
d297 1
a297 1
	memset(buf,0,256);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d95 2
d105 2
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_RSA
d64 1
d70 1
a70 1
#ifndef NO_RC4
d74 1
a74 1
	ASN1_INTEGER *version;
d79 17
a95 4
static int i2d_NETSCAPE_PKEY(NETSCAPE_PKEY *a, unsigned char **pp);
static NETSCAPE_PKEY *d2i_NETSCAPE_PKEY(NETSCAPE_PKEY **a,unsigned char **pp, long length);
static NETSCAPE_PKEY *NETSCAPE_PKEY_new(void);
static void NETSCAPE_PKEY_free(NETSCAPE_PKEY *);
d97 12
a108 1
int i2d_Netscape_RSA(RSA *a, unsigned char **pp, int (*cb)())
d113 1
a113 1
int i2d_RSA_NET(RSA *a, unsigned char **pp, int (*cb)(), int sgckey)
d115 4
a118 2
	int i,j,l[6];
	NETSCAPE_PKEY *pkey;
a121 3
	X509_ALGOR *alg=NULL;
	ASN1_OCTET_STRING os,os2;
	M_ASN1_I2D_vars(a);
a124 5
#ifdef WIN32
	r=r; /* shut the damn compiler up :-) */
#endif

	os.data=os2.data=NULL;
d126 2
a127 1
	if (!ASN1_INTEGER_set(pkey->version,0)) goto err;
a128 2
	if (pkey->algor->algorithm != NULL)
		ASN1_OBJECT_free(pkey->algor->algorithm);
d133 1
a133 2
	l[0]=i2d_RSAPrivateKey(a,NULL);
	pkey->private_key->length=l[0];
d135 3
a137 2
	os2.length=i2d_NETSCAPE_PKEY(pkey,NULL);
	l[1]=i2d_ASN1_OCTET_STRING(&os2,NULL);
d139 1
a139 15
	if ((alg=X509_ALGOR_new()) == NULL) goto err;
	if (alg->algorithm != NULL)
		ASN1_OBJECT_free(alg->algorithm);
	alg->algorithm=OBJ_nid2obj(NID_rc4);
	if ((alg->parameter=ASN1_TYPE_new()) == NULL) goto err;
	alg->parameter->type=V_ASN1_NULL;

	l[2]=i2d_X509_ALGOR(alg,NULL);
	l[3]=ASN1_object_size(1,l[2]+l[1],V_ASN1_SEQUENCE);

#ifndef CONST_STRICT
	os.data=(unsigned char *)"private-key";
#endif
	os.length=11;
	l[4]=i2d_ASN1_OCTET_STRING(&os,NULL);
d141 9
a149 1
	l[5]=ASN1_object_size(1,l[4]+l[3],V_ASN1_SEQUENCE);
d153 4
a156 3
		if (pkey != NULL) NETSCAPE_PKEY_free(pkey);
		if (alg != NULL) X509_ALGOR_free(alg);
		return(l[5]);
d159 3
a161 3
	if (pkey->private_key->data != NULL)
		OPENSSL_free(pkey->private_key->data);
	if ((pkey->private_key->data=(unsigned char *)OPENSSL_malloc(l[0])) == NULL)
d166 3
a168 1
	zz=pkey->private_key->data;
d171 7
a177 1
	if ((os2.data=(unsigned char *)OPENSSL_malloc(os2.length)) == NULL)
d182 1
a182 1
	zz=os2.data;
d184 3
d198 2
a199 5
	if(sgckey){
		EVP_MD_CTX mctx;
		EVP_DigestInit(&mctx, EVP_md5());
		EVP_DigestUpdate(&mctx, buf, i);
		EVP_DigestFinal(&mctx, buf, NULL);
d203 1
a203 1
		
d207 2
d210 3
a212 3
	EVP_EncryptInit(&ctx,EVP_rc4(),key,NULL);
	EVP_EncryptUpdate(&ctx,os2.data,&i,os2.data,os2.length);
	EVP_EncryptFinal(&ctx,&(os2.data[i]),&j);
d215 1
a215 7
	p= *pp;
	ASN1_put_object(&p,1,l[4]+l[3],V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL);
	i2d_ASN1_OCTET_STRING(&os,&p);
	ASN1_put_object(&p,1,l[2]+l[1],V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL);
	i2d_X509_ALGOR(alg,&p);
	i2d_ASN1_OCTET_STRING(&os2,&p);
	ret=l[5];
d217 2
a218 4
	if (os2.data != NULL) OPENSSL_free(os2.data);
	if (alg != NULL) X509_ALGOR_free(alg);
	if (pkey != NULL) NETSCAPE_PKEY_free(pkey);
	r=r;
d223 1
a223 1
RSA *d2i_Netscape_RSA(RSA **a, unsigned char **pp, long length, int (*cb)())
d228 1
a228 1
RSA *d2i_RSA_NET(RSA **a, unsigned char **pp, long length, int (*cb)(), int sgckey)
d231 2
a232 2
	ASN1_OCTET_STRING *os=NULL;
	ASN1_CTX c;
d234 7
a240 2
	c.pp=pp;
	c.error=ASN1_R_DECODING_ERROR;
d242 2
a243 5
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(os,d2i_ASN1_OCTET_STRING);
	if ((os->length != 11) || (strncmp("private-key",
		(char *)os->data,os->length) != 0))
d246 6
a251 1
		M_ASN1_BIT_STRING_free(os);
d253 11
a263 9
		}
	M_ASN1_BIT_STRING_free(os);
	c.q=c.p;
	if ((ret=d2i_RSA_NET_2(a,&c.p,c.slen,cb, sgckey)) == NULL) goto err;
	/* Note: some versions of IIS key files use length values that are
	 * too small for the surrounding SEQUENCEs. This following line
	 * effectively disable length checking.
	 */
	c.slen = 0;
a264 1
	M_ASN1_D2I_Finish(a,RSA_free,ASN1_F_D2I_NETSCAPE_RSA);
d267 1
a267 7
RSA *d2i_Netscape_RSA_2(RSA **a, unsigned char **pp, long length,
	     int (*cb)())
{
	return d2i_RSA_NET_2(a, pp, length, cb, 0);
}

RSA *d2i_RSA_NET_2(RSA **a, unsigned char **pp, long length,
d273 2
a274 1
	unsigned char buf[256],*zz;
d277 1
a277 18
	X509_ALGOR *alg=NULL;
	ASN1_OCTET_STRING *os=NULL;
	ASN1_CTX c;

	c.error=ERR_R_NESTED_ASN1_ERROR;
	c.pp=pp;

	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(alg,d2i_X509_ALGOR);
	if (OBJ_obj2nid(alg->algorithm) != NID_rc4)
		{
		ASN1err(ASN1_F_D2I_NETSCAPE_RSA_2,ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM);
		goto err;
		}
	M_ASN1_D2I_get(os,d2i_ASN1_OCTET_STRING);
	if (cb == NULL)
		cb=EVP_read_pw_string;
d287 1
a287 4
		EVP_MD_CTX mctx;
		EVP_DigestInit(&mctx, EVP_md5());
		EVP_DigestUpdate(&mctx, buf, i);
		EVP_DigestFinal(&mctx, buf, NULL);
d296 1
a296 1
	EVP_DecryptInit(&ctx,EVP_rc4(),key,NULL);
d298 1
a298 1
	EVP_DecryptFinal(&ctx,&(os->data[i]),&j);
a315 2
	if (!asn1_Finish(&c)) goto err;
	*pp=c.p;
d317 1
a317 3
	if (pkey != NULL) NETSCAPE_PKEY_free(pkey);
	if (os != NULL) M_ASN1_BIT_STRING_free(os);
	if (alg != NULL) X509_ALGOR_free(alg);
d321 1
a321 54
static int i2d_NETSCAPE_PKEY(NETSCAPE_PKEY *a, unsigned char **pp)
	{
	M_ASN1_I2D_vars(a);


	M_ASN1_I2D_len(a->version,	i2d_ASN1_INTEGER);
	M_ASN1_I2D_len(a->algor,	i2d_X509_ALGOR);
	M_ASN1_I2D_len(a->private_key,	i2d_ASN1_OCTET_STRING);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put(a->version,	i2d_ASN1_INTEGER);
	M_ASN1_I2D_put(a->algor,	i2d_X509_ALGOR);
	M_ASN1_I2D_put(a->private_key,	i2d_ASN1_OCTET_STRING);

	M_ASN1_I2D_finish();
	}

static NETSCAPE_PKEY *d2i_NETSCAPE_PKEY(NETSCAPE_PKEY **a, unsigned char **pp,
	     long length)
	{
	M_ASN1_D2I_vars(a,NETSCAPE_PKEY *,NETSCAPE_PKEY_new);

	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->version,d2i_ASN1_INTEGER);
	M_ASN1_D2I_get(ret->algor,d2i_X509_ALGOR);
	M_ASN1_D2I_get(ret->private_key,d2i_ASN1_OCTET_STRING);
	M_ASN1_D2I_Finish(a,NETSCAPE_PKEY_free,ASN1_F_D2I_NETSCAPE_PKEY);
	}

static NETSCAPE_PKEY *NETSCAPE_PKEY_new(void)
	{
	NETSCAPE_PKEY *ret=NULL;
	ASN1_CTX c;

	M_ASN1_New_Malloc(ret,NETSCAPE_PKEY);
	M_ASN1_New(ret->version,M_ASN1_INTEGER_new);
	M_ASN1_New(ret->algor,X509_ALGOR_new);
	M_ASN1_New(ret->private_key,M_ASN1_OCTET_STRING_new);
	return(ret);
	M_ASN1_New_Error(ASN1_F_NETSCAPE_PKEY_NEW);
	}

static void NETSCAPE_PKEY_free(NETSCAPE_PKEY *a)
	{
	if (a == NULL) return;
	M_ASN1_INTEGER_free(a->version);
	X509_ALGOR_free(a->algor);
	M_ASN1_OCTET_STRING_free(a->private_key);
	OPENSSL_free(a);
	}

#endif /* NO_RC4 */
d323 1
a323 1
#else /* !NO_RSA */
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d84 5
d147 2
a148 2
		Free(pkey->private_key->data);
	if ((pkey->private_key->data=(unsigned char *)Malloc(l[0])) == NULL)
d156 1
a156 1
	if ((os2.data=(unsigned char *)Malloc(os2.length)) == NULL)
d172 12
a183 2
	EVP_BytesToKey(EVP_rc4(),EVP_md5(),NULL,buf,
		strlen((char *)buf),1,key,NULL);
d200 1
a200 1
	if (os2.data != NULL) Free(os2.data);
d207 1
d209 5
d234 6
a239 2
	if ((ret=d2i_Netscape_RSA_2(a,&c.p,c.slen,cb)) == NULL) goto err;
	c.slen-=(c.p-c.q);
d246 6
d284 11
a294 2
	EVP_BytesToKey(EVP_rc4(),EVP_md5(),NULL,buf,
		strlen((char *)buf),1,key,NULL);
d377 1
a377 1
	Free(a);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d142 1
a142 1
		Free((char *)pkey->private_key->data);
d208 1
a208 1
		ASN1_BIT_STRING_free(os);
d211 1
a211 1
	ASN1_BIT_STRING_free(os);
d282 1
a282 1
	if (os != NULL) ASN1_BIT_STRING_free(os);
d324 1
a324 1
	M_ASN1_New(ret->version,ASN1_INTEGER_new);
d326 1
a326 1
	M_ASN1_New(ret->private_key,ASN1_OCTET_STRING_new);
d334 1
a334 1
	ASN1_INTEGER_free(a->version);
d336 2
a337 2
	ASN1_OCTET_STRING_free(a->private_key);
	Free((char *)a);
d341 7
@


1.1
log
@Initial revision
@
text
@d59 1
d62 5
a66 5
#include "rsa.h"
#include "objects.h"
#include "asn1_mac.h"
#include "evp.h"
#include "x509.h"
a77 7
/*
 * ASN1err(ASN1_F_D2I_NETSCAPE_RSA,ASN1_R_LENGTH_MISMATCH);
 * ASN1err(ASN1_F_D2I_NETSCAPE_RSA,ASN1_R_DECODING_ERROR);
 * ASN1err(ASN1_F_D2I_NETSCAPE_PKEY,ASN1_R_DECODING_ERROR);
 * ASN1err(ASN1_F_NETSCAPE_PKEY_NEW,ASN1_R_DECODING_ERROR);
 */
#ifndef NOPROTO
a81 6
#else
static int i2d_NETSCAPE_PKEY();
static NETSCAPE_PKEY *d2i_NETSCAPE_PKEY();
static NETSCAPE_PKEY *NETSCAPE_PKEY_new();
static void NETSCAPE_PKEY_free();
#endif
d83 1
a83 4
int i2d_Netscape_RSA(a,pp,cb)
RSA *a;
unsigned char **pp;
int (*cb)();
d126 1
d128 1
d185 1
a185 1
	if (os2.data != NULL) Free((char *)os2.data);
d192 1
a192 5
RSA *d2i_Netscape_RSA(a,pp,length,cb)
RSA **a;
unsigned char **pp;
long length;
int (*cb)();
d219 2
a220 5
RSA *d2i_Netscape_RSA_2(a,pp,length,cb)
RSA **a;
unsigned char **pp;
long length;
int (*cb)();
d232 1
a232 1
	c.error=ASN1_R_ERROR_STACK;
d287 1
a287 3
static int i2d_NETSCAPE_PKEY(a,pp)
NETSCAPE_PKEY *a;
unsigned char **pp;
d305 2
a306 4
static NETSCAPE_PKEY *d2i_NETSCAPE_PKEY(a,pp,length)
NETSCAPE_PKEY **a;
unsigned char **pp;
long length;
d318 1
a318 1
static NETSCAPE_PKEY *NETSCAPE_PKEY_new()
d321 1
d331 1
a331 2
static void NETSCAPE_PKEY_free(a)
NETSCAPE_PKEY *a;
d341 1
a341 1

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a58 1
#ifndef OPENSSL_NO_RSA
d61 5
a65 6
#include <openssl/rsa.h>
#include <openssl/objects.h>
#include <openssl/asn1t.h>
#include <openssl/asn1_mac.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
d68 1
a68 1
#ifndef OPENSSL_NO_RC4
d72 1
a72 1
	long version;
d77 17
a93 33
typedef struct netscape_encrypted_pkey_st
	{
	ASN1_OCTET_STRING *os;
	/* This is the same structure as DigestInfo so use it:
	 * although this isn't really anything to do with
	 * digests.
	 */
	X509_SIG *enckey;
	} NETSCAPE_ENCRYPTED_PKEY;


ASN1_BROKEN_SEQUENCE(NETSCAPE_ENCRYPTED_PKEY) = {
	ASN1_SIMPLE(NETSCAPE_ENCRYPTED_PKEY, os, ASN1_OCTET_STRING),
	ASN1_SIMPLE(NETSCAPE_ENCRYPTED_PKEY, enckey, X509_SIG)
} ASN1_BROKEN_SEQUENCE_END(NETSCAPE_ENCRYPTED_PKEY)

IMPLEMENT_ASN1_FUNCTIONS_const(NETSCAPE_ENCRYPTED_PKEY)

ASN1_SEQUENCE(NETSCAPE_PKEY) = {
	ASN1_SIMPLE(NETSCAPE_PKEY, version, LONG),
	ASN1_SIMPLE(NETSCAPE_PKEY, algor, X509_ALGOR),
	ASN1_SIMPLE(NETSCAPE_PKEY, private_key, ASN1_OCTET_STRING)
} ASN1_SEQUENCE_END(NETSCAPE_PKEY)

IMPLEMENT_ASN1_FUNCTIONS_const(NETSCAPE_PKEY)

static RSA *d2i_RSA_NET_2(RSA **a, ASN1_OCTET_STRING *os,
	     int (*cb)(), int sgckey);

int i2d_Netscape_RSA(const RSA *a, unsigned char **pp, int (*cb)())
{
	return i2d_RSA_NET(a, pp, cb, 0);
}
d95 4
a98 1
int i2d_RSA_NET(const RSA *a, unsigned char **pp, int (*cb)(), int sgckey)
d100 2
a101 4
	int i, j, ret = 0;
	int rsalen, pkeylen, olen;
	NETSCAPE_PKEY *pkey = NULL;
	NETSCAPE_ENCRYPTED_PKEY *enckey = NULL;
d105 3
d111 5
d117 1
a117 2
	if ((enckey=NETSCAPE_ENCRYPTED_PKEY_new()) == NULL) goto err;
	pkey->version = 0;
d119 2
d125 2
a126 1
	rsalen = i2d_RSAPrivateKey(a, NULL);
d128 2
a129 3
	/* Fake some octet strings just for the initial length
	 * calculation.
 	 */
d131 13
a143 1
	pkey->private_key->length=rsalen;
d145 1
a145 9
	pkeylen=i2d_NETSCAPE_PKEY(pkey,NULL);

	enckey->enckey->digest->length = pkeylen;

	enckey->os->length = 11;	/* "private-key" */

	enckey->enckey->algor->algorithm=OBJ_nid2obj(NID_rc4);
	if ((enckey->enckey->algor->parameter=ASN1_TYPE_new()) == NULL) goto err;
	enckey->enckey->algor->parameter->type=V_ASN1_NULL;
d149 3
a151 4
		olen = i2d_NETSCAPE_ENCRYPTED_PKEY(enckey, NULL);
		NETSCAPE_PKEY_free(pkey);
		NETSCAPE_ENCRYPTED_PKEY_free(enckey);
		return olen;
d154 3
a156 3

	/* Since its RC4 encrypted length is actual length */
	if ((zz=(unsigned char *)OPENSSL_malloc(rsalen)) == NULL)
d161 1
a161 3

	pkey->private_key->data = zz;
	/* Write out private key encoding */
d164 1
a164 7
	if ((zz=OPENSSL_malloc(pkeylen)) == NULL)
		{
		ASN1err(ASN1_F_I2D_NETSCAPE_RSA,ERR_R_MALLOC_FAILURE);
		goto err;
		}

	if (!ASN1_STRING_set(enckey->os, "private-key", -1)) 
d169 1
a169 1
	enckey->enckey->digest->data = zz;
a170 3

	/* Wipe the private key encoding */
	memset(pkey->private_key->data, 0, rsalen);
d180 2
a181 9
	i = strlen((char *)buf);
	/* If the key is used for SGC the algorithm is modified a little. */
	if(sgckey) {
		EVP_Digest(buf, i, buf, NULL, EVP_md5(), NULL);
		memcpy(buf + 16, "SGCKEYSALT", 10);
		i = 26;
	}

	EVP_BytesToKey(EVP_rc4(),EVP_md5(),NULL,buf,i,1,key,NULL);
a183 2
	/* Encrypt private key in place */
	zz = enckey->enckey->digest->data;
d185 3
a187 3
	EVP_EncryptInit_ex(&ctx,EVP_rc4(),NULL,key,NULL);
	EVP_EncryptUpdate(&ctx,zz,&i,zz,pkeylen);
	EVP_EncryptFinal_ex(&ctx,zz + i,&j);
d190 7
a196 1
	ret = i2d_NETSCAPE_ENCRYPTED_PKEY(enckey, pp);
d198 4
a201 2
	NETSCAPE_ENCRYPTED_PKEY_free(enckey);
	NETSCAPE_PKEY_free(pkey);
d205 5
a209 7

RSA *d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length, int (*cb)())
{
	return d2i_RSA_NET(a, pp, length, cb, 0);
}

RSA *d2i_RSA_NET(RSA **a, const unsigned char **pp, long length, int (*cb)(), int sgckey)
d212 2
a213 4
	const unsigned char *p, *kp;
	NETSCAPE_ENCRYPTED_PKEY *enckey = NULL;

	p = *pp;
d215 2
a216 5
	enckey = d2i_NETSCAPE_ENCRYPTED_PKEY(NULL, &p, length);
	if(!enckey) {
		ASN1err(ASN1_F_D2I_NETSCAPE_RSA,ASN1_R_DECODING_ERROR);
		return NULL;
	}
d218 5
a222 2
	if ((enckey->os->length != 11) || (strncmp("private-key",
		(char *)enckey->os->data,11) != 0))
d225 2
a226 2
		NETSCAPE_ENCRYPTED_PKEY_free(enckey);
		return NULL;
d228 4
a231 15
	if (OBJ_obj2nid(enckey->enckey->algor->algorithm) != NID_rc4)
		{
		ASN1err(ASN1_F_D2I_NETSCAPE_RSA_2,ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM);
		goto err;
	}
	kp = enckey->enckey->digest->data;
	if (cb == NULL)
		cb=EVP_read_pw_string;
	if ((ret=d2i_RSA_NET_2(a, enckey->enckey->digest,cb, sgckey)) == NULL) goto err;

	*pp = p;

	err:
	NETSCAPE_ENCRYPTED_PKEY_free(enckey);
	return ret;
d233 1
d236 5
a240 2
static RSA *d2i_RSA_NET_2(RSA **a, ASN1_OCTET_STRING *os,
	     int (*cb)(), int sgckey)
d245 1
a245 2
	unsigned char buf[256];
	const unsigned char *zz;
d248 18
a265 1

d273 2
a274 8
	i = strlen((char *)buf);
	if(sgckey){
		EVP_Digest(buf, i, buf, NULL, EVP_md5(), NULL);
		memcpy(buf + 16, "SGCKEYSALT", 10);
		i = 26;
	}
		
	EVP_BytesToKey(EVP_rc4(),EVP_md5(),NULL,buf,i,1,key,NULL);
d278 1
a278 1
	EVP_DecryptInit_ex(&ctx,EVP_rc4(),NULL, key,NULL);
d280 1
a280 1
	EVP_DecryptFinal_ex(&ctx,&(os->data[i]),&j);
d298 2
d301 3
a303 1
	NETSCAPE_PKEY_free(pkey);
d307 26
a332 1
#endif /* OPENSSL_NO_RC4 */
d334 7
a340 1
#else /* !OPENSSL_NO_RSA */
d342 23
a364 3
# if PEDANTIC
static void *dummy=&dummy;
# endif
a365 1
#endif
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@a94 2
DECLARE_ASN1_FUNCTIONS_const(NETSCAPE_ENCRYPTED_PKEY)
DECLARE_ASN1_ENCODE_FUNCTIONS_const(NETSCAPE_ENCRYPTED_PKEY,NETSCAPE_ENCRYPTED_PKEY)
a102 2
DECLARE_ASN1_FUNCTIONS_const(NETSCAPE_PKEY)
DECLARE_ASN1_ENCODE_FUNCTIONS_const(NETSCAPE_PKEY,NETSCAPE_PKEY)
@


1.1.1.4
log
@import 0.9.7b (without idea and rc5)
@
text
@d190 1
a190 1
	OPENSSL_cleanse(pkey->private_key->data, rsalen);
d209 1
a209 1
	OPENSSL_cleanse(buf,256);
d297 1
a297 1
	OPENSSL_cleanse(buf,256);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d59 1
a61 1
#ifndef OPENSSL_NO_RSA
d110 3
a112 7
			  int (*cb)(char *buf, int len, const char *prompt,
				    int verify),
			  int sgckey);

int i2d_Netscape_RSA(const RSA *a, unsigned char **pp,
		     int (*cb)(char *buf, int len, const char *prompt,
			       int verify))
d117 1
a117 3
int i2d_RSA_NET(const RSA *a, unsigned char **pp,
		int (*cb)(char *buf, int len, const char *prompt, int verify),
		int sgckey)
d167 1
a167 1
		ASN1err(ASN1_F_I2D_RSA_NET,ERR_R_MALLOC_FAILURE);
d177 1
a177 1
		ASN1err(ASN1_F_I2D_RSA_NET,ERR_R_MALLOC_FAILURE);
d183 1
a183 1
		ASN1err(ASN1_F_I2D_RSA_NET,ERR_R_MALLOC_FAILURE);
d194 1
a194 1
	i=cb((char *)buf,256,"Enter Private Key password:",1);
d197 1
a197 1
		ASN1err(ASN1_F_I2D_RSA_NET,ASN1_R_BAD_PASSWORD_READ);
d227 1
a227 3
RSA *d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length,
		      int (*cb)(char *buf, int len, const char *prompt,
				int verify))
d232 1
a232 3
RSA *d2i_RSA_NET(RSA **a, const unsigned char **pp, long length,
		 int (*cb)(char *buf, int len, const char *prompt, int verify),
		 int sgckey)
d242 1
a242 1
		ASN1err(ASN1_F_D2I_RSA_NET,ASN1_R_DECODING_ERROR);
d249 1
a249 1
		ASN1err(ASN1_F_D2I_RSA_NET,ASN1_R_PRIVATE_KEY_HEADER_MISSING);
d255 1
a255 1
		ASN1err(ASN1_F_D2I_RSA_NET,ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM);
d272 1
a272 2
			  int (*cb)(char *buf, int len, const char *prompt,
				    int verify), int sgckey)
d282 1
a282 1
	i=cb((char *)buf,256,"Enter Private Key password:",0);
d285 1
a285 1
		ASN1err(ASN1_F_D2I_RSA_NET_2,ASN1_R_BAD_PASSWORD_READ);
d310 1
a310 1
		ASN1err(ASN1_F_D2I_RSA_NET_2,ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY);
d317 1
a317 1
		ASN1err(ASN1_F_D2I_RSA_NET_2,ASN1_R_UNABLE_TO_DECODE_RSA_KEY);
@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@d245 1
a245 1
	const unsigned char *p;
d268 1
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@a131 1
	EVP_CIPHER_CTX_init(&ctx);
d209 1
a209 2
		if (!EVP_Digest(buf, i, buf, NULL, EVP_md5(), NULL))
			goto err;
d214 1
a214 2
	if (!EVP_BytesToKey(EVP_rc4(),EVP_md5(),NULL,buf,i,1,key,NULL))
		goto err;
d219 5
a223 6
	if (!EVP_EncryptInit_ex(&ctx,EVP_rc4(),NULL,key,NULL))
		goto err;
	if (!EVP_EncryptUpdate(&ctx,zz,&i,zz,pkeylen))
		goto err;
	if (!EVP_EncryptFinal_ex(&ctx,zz + i,&j))
		goto err;
a226 1
	EVP_CIPHER_CTX_cleanup(&ctx);
a290 1
	EVP_CIPHER_CTX_init(&ctx);
d301 1
a301 2
		if (!EVP_Digest(buf, i, buf, NULL, EVP_md5(), NULL))
			goto err;
d306 1
a306 2
	if (!EVP_BytesToKey(EVP_rc4(),EVP_md5(),NULL,buf,i,1,key,NULL))
		goto err;
d309 5
a313 6
	if (!EVP_DecryptInit_ex(&ctx,EVP_rc4(),NULL, key,NULL))
		goto err;
	if (!EVP_DecryptUpdate(&ctx,os->data,&i,os->data,os->length))
		goto err;
	if (!EVP_DecryptFinal_ex(&ctx,&(os->data[i]),&j))
		goto err;
a330 1
	EVP_CIPHER_CTX_cleanup(&ctx);
@


