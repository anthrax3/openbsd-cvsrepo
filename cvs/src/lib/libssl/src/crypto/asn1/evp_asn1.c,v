head	1.18;
access;
symbols
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.13.0.6
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	butholakala:1.5
	openssl_1_0_1_g:1.1.1.4
	OPENBSD_5_5:1.5.0.24
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.20
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.18
	OPENBSD_5_3_BASE:1.5
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.5.0.12
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.10
	OPENBSD_4_9_BASE:1.5
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.14
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.12
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.3.0.22
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.20
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.3.0.18
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.09.30.19.07.08;	author jsing;	state Exp;
branches;
next	1.17;
commitid	sTr3jLPbyRu3fpBU;

1.17
date	2015.09.30.18.41.06;	author jsing;	state Exp;
branches;
next	1.16;
commitid	8UbnRNonXjerilzx;

1.16
date	2015.09.30.17.30.15;	author jsing;	state Exp;
branches;
next	1.15;
commitid	f3YLBhwPPENmVqqA;

1.15
date	2015.09.10.14.29.22;	author jsing;	state Exp;
branches;
next	1.14;
commitid	cSgOurQTPleE0uzG;

1.14
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.13;
commitid	rYgS8cWcS59JYkBV;

1.13
date	2014.07.12.16.03.36;	author miod;	state Exp;
branches;
next	1.12;
commitid	G74O1dmRukKsW7IJ;

1.12
date	2014.07.11.13.41.59;	author miod;	state Exp;
branches;
next	1.11;
commitid	m0t9LXKcoE1LTsTy;

1.11
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.9;
commitid	id8dTrTMtnTn4fqt;

1.9
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.04.19.06.43.34;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.43;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.30;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.48;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.02;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Expand M_i2d_ASN1_OCTET_STRING macros - no change in generated assembly,
aside from line numbers.
@
text
@/* $OpenBSD: evp_asn1.c,v 1.17 2015/09/30 18:41:06 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/asn1_mac.h>
#include <openssl/err.h>

int
ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
{
	ASN1_STRING *os;

	if ((os = ASN1_OCTET_STRING_new()) == NULL)
		return (0);
	if (!ASN1_STRING_set(os, data, len)) {
		ASN1_OCTET_STRING_free(os);
		return (0);
	}
	ASN1_TYPE_set(a, V_ASN1_OCTET_STRING, os);
	return (1);
}

/* int max_len:  for returned value    */
int
ASN1_TYPE_get_octetstring(ASN1_TYPE *a, unsigned char *data, int max_len)
{
	int ret, num;
	unsigned char *p;

	if ((a->type != V_ASN1_OCTET_STRING) ||
	    (a->value.octet_string == NULL)) {
		ASN1err(ASN1_F_ASN1_TYPE_GET_OCTETSTRING, ASN1_R_DATA_IS_WRONG);
		return (-1);
	}
	p = ASN1_STRING_data(a->value.octet_string);
	ret = ASN1_STRING_length(a->value.octet_string);
	if (ret < max_len)
		num = ret;
	else
		num = max_len;
	memcpy(data, p, num);
	return (ret);
}

int
ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
    int len)
{
	int n, size;
	ASN1_OCTET_STRING os, *osp;
	ASN1_INTEGER in;
	unsigned char *p;
	unsigned char buf[32]; /* when they have 256bit longs,
				* I'll be in trouble */
	in.data = buf;
	in.length = 32;
	os.data = data;
	os.type = V_ASN1_OCTET_STRING;
	os.length = len;
	ASN1_INTEGER_set(&in, num);
	n = i2d_ASN1_INTEGER(&in, NULL);
	n += i2d_ASN1_bytes((ASN1_STRING *)&os, NULL, V_ASN1_OCTET_STRING,
	    V_ASN1_UNIVERSAL);

	size = ASN1_object_size(1, n, V_ASN1_SEQUENCE);

	if ((osp = ASN1_STRING_new()) == NULL)
		return (0);
	/* Grow the 'string' */
	if (!ASN1_STRING_set(osp, NULL, size)) {
		ASN1_STRING_free(osp);
		return (0);
	}

	ASN1_STRING_length_set(osp, size);
	p = ASN1_STRING_data(osp);

	ASN1_put_object(&p, 1,n, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
	i2d_ASN1_INTEGER(&in, &p);
	i2d_ASN1_bytes((ASN1_STRING *)&os, &p, V_ASN1_OCTET_STRING,
	    V_ASN1_UNIVERSAL);

	ASN1_TYPE_set(a, V_ASN1_SEQUENCE, osp);
	return (1);
}

/* we return the actual length..., num may be missing, in which
 * case, set it to zero */
/* int max_len:  for returned value    */
int
ASN1_TYPE_get_int_octetstring(ASN1_TYPE *a, long *num, unsigned char *data,
    int max_len)
{
	int ret = -1, n;
	ASN1_INTEGER *ai = NULL;
	ASN1_OCTET_STRING *os = NULL;
	const unsigned char *p;
	long length;
	ASN1_const_CTX c;

	if ((a->type != V_ASN1_SEQUENCE) || (a->value.sequence == NULL)) {
		goto err;
	}
	p = ASN1_STRING_data(a->value.sequence);
	length = ASN1_STRING_length(a->value.sequence);

	c.pp = &p;
	c.p = p;
	c.max = p + length;
	c.error = ASN1_R_DATA_IS_WRONG;

	M_ASN1_D2I_start_sequence();
	c.q = c.p;
	if ((ai = d2i_ASN1_INTEGER(NULL, &c.p, c.slen)) == NULL)
		goto err;
	c.slen -= (c.p - c.q);
	c.q = c.p;
	if ((os = d2i_ASN1_OCTET_STRING(NULL, &c.p, c.slen)) == NULL)
		goto err;
	c.slen -= (c.p - c.q);
	if (!M_ASN1_D2I_end_sequence())
		goto err;

	if (num != NULL)
		*num = ASN1_INTEGER_get(ai);

	ret = ASN1_STRING_length(os);
	if (max_len > ret)
		n = ret;
	else
		n = max_len;

	if (data != NULL)
		memcpy(data, ASN1_STRING_data(os), n);
	if (0) {
err:
		ASN1err(ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING,
		    ASN1_R_DATA_IS_WRONG);
	}
	ASN1_OCTET_STRING_free(os);
	ASN1_INTEGER_free(ai);
	return (ret);
}
@


1.17
log
@Replace M_ASN1_OCTET_STRING_(free|new) with ASN1_OCTET_STRING_(free|new).
@
text
@d1 1
a1 1
/* $OpenBSD: evp_asn1.c,v 1.16 2015/09/30 17:30:15 jsing Exp $ */
d120 2
a121 1
	n += M_i2d_ASN1_OCTET_STRING(&os, NULL);
d138 2
a139 1
	M_i2d_ASN1_OCTET_STRING(&os, &p);
@


1.16
log
@Replace M_ASN1_INTEGER_(new|free) with ASN1_INTEGER_(new|free) - this is
different from the macro expansion, but the result is the same. Also
replace some ASN1_STRING_dup() with ASN1_INTEGER_dup().

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_asn1.c,v 1.15 2015/09/10 14:29:22 jsing Exp $ */
d71 1
a71 1
	if ((os = M_ASN1_OCTET_STRING_new()) == NULL)
d74 1
a74 1
		M_ASN1_OCTET_STRING_free(os);
d196 1
a196 1
	M_ASN1_OCTET_STRING_free(os);
@


1.15
log
@Replace remaining M_ASN1_STRING_* macros with calls to ASN1_STRING_*.
This is not the same as the macro expansion, however the ASN1_STRING_*
functions do match the macro expansions.

ok doug@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_asn1.c,v 1.14 2015/07/29 14:58:34 jsing Exp $ */
d197 1
a197 1
	M_ASN1_INTEGER_free(ai);
@


1.14
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_asn1.c,v 1.13 2014/07/12 16:03:36 miod Exp $ */
d93 2
a94 2
	p = M_ASN1_STRING_data(a->value.octet_string);
	ret = M_ASN1_STRING_length(a->value.octet_string);
d132 2
a133 2
	M_ASN1_STRING_length_set(osp, size);
	p = M_ASN1_STRING_data(osp);
d160 2
a161 2
	p = M_ASN1_STRING_data(a->value.sequence);
	length = M_ASN1_STRING_length(a->value.sequence);
d183 1
a183 1
	ret = M_ASN1_STRING_length(os);
d190 1
a190 1
		memcpy(data, M_ASN1_STRING_data(os), n);
@


1.13
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_asn1.c,v 1.12 2014/07/11 13:41:59 miod Exp $ */
d73 1
a73 1
	if (!M_ASN1_OCTET_STRING_set(os, data, len)) {
@


1.12
log
@More memory leaks and unchecked allocations; OpenSSL PR #3403 via OpenSSL
trunk. (note we had already fixed some of the issues in that PR independently)
@
text
@d1 1
a1 1
/* $OpenBSD: evp_asn1.c,v 1.11 2014/07/11 08:44:47 jsing Exp $ */
d196 2
a197 4
	if (os != NULL)
		M_ASN1_OCTET_STRING_free(os);
	if (ai != NULL)
		M_ASN1_INTEGER_free(ai);
@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_asn1.c,v 1.10 2014/07/10 13:58:22 jsing Exp $ */
d73 2
a74 1
	if (!M_ASN1_OCTET_STRING_set(os, data, len))
d76 1
@


1.10
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_asn1.c,v 1.9 2014/06/12 15:49:27 deraadt Exp $ */
a61 1
#include "cryptlib.h"
d64 1
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.8
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/asn1/evp_asn1.c */
@


1.7
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d64 2
a65 1
int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
d69 6
a74 4
	if ((os=M_ASN1_OCTET_STRING_new()) == NULL) return(0);
	if (!M_ASN1_OCTET_STRING_set(os,data,len)) return(0);
	ASN1_TYPE_set(a,V_ASN1_OCTET_STRING,os);
	return(1);
d78 2
a79 2
int ASN1_TYPE_get_octetstring(ASN1_TYPE *a, unsigned char *data,
	     int max_len)
d81 1
a81 1
	int ret,num;
d84 4
a87 3
	if ((a->type != V_ASN1_OCTET_STRING) || (a->value.octet_string == NULL)) {
		ASN1err(ASN1_F_ASN1_TYPE_GET_OCTETSTRING,ASN1_R_DATA_IS_WRONG);
		return(-1);
d89 2
a90 2
	p=M_ASN1_STRING_data(a->value.octet_string);
	ret=M_ASN1_STRING_length(a->value.octet_string);
d92 1
a92 1
		num=ret;
d94 3
a96 3
		num=max_len;
	memcpy(data,p,num);
	return(ret);
d99 3
a101 2
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
	     int len)
d103 2
a104 2
	int n,size;
	ASN1_OCTET_STRING os,*osp;
d107 1
a107 1
	unsigned char buf[32]; /* when they have 256bit longs, 
d109 8
a116 8
	in.data=buf;
	in.length=32;
	os.data=data;
	os.type=V_ASN1_OCTET_STRING;
	os.length=len;
	ASN1_INTEGER_set(&in,num);
	n =  i2d_ASN1_INTEGER(&in,NULL);
	n+=M_i2d_ASN1_OCTET_STRING(&os,NULL);
d118 1
a118 1
	size=ASN1_object_size(1,n,V_ASN1_SEQUENCE);
d120 2
a121 1
	if ((osp=ASN1_STRING_new()) == NULL) return(0);
d123 1
a123 1
	if (!ASN1_STRING_set(osp,NULL,size)) {
d125 1
a125 1
		return(0);
d129 1
a129 1
	p=M_ASN1_STRING_data(osp);
d131 3
a133 3
	ASN1_put_object(&p,1,n,V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL);
	  i2d_ASN1_INTEGER(&in,&p);
	M_i2d_ASN1_OCTET_STRING(&os,&p);
d135 2
a136 2
	ASN1_TYPE_set(a,V_ASN1_SEQUENCE,osp);
	return(1);
d142 3
a144 2
int ASN1_TYPE_get_int_octetstring(ASN1_TYPE *a, long *num, unsigned char *data,
	     int max_len)
d146 3
a148 3
	int ret= -1,n;
	ASN1_INTEGER *ai=NULL;
	ASN1_OCTET_STRING *os=NULL;
d156 2
a157 2
	p=M_ASN1_STRING_data(a->value.sequence);
	length=M_ASN1_STRING_length(a->value.sequence);
d159 4
a162 4
	c.pp= &p;
	c.p=p;
	c.max=p+length;
	c.error=ASN1_R_DATA_IS_WRONG;
d165 10
a174 7
	c.q=c.p;
	if ((ai=d2i_ASN1_INTEGER(NULL,&c.p,c.slen)) == NULL) goto err;
        c.slen-=(c.p-c.q);
	c.q=c.p;
	if ((os=d2i_ASN1_OCTET_STRING(NULL,&c.p,c.slen)) == NULL) goto err;
        c.slen-=(c.p-c.q);
	if (!M_ASN1_D2I_end_sequence()) goto err;
d177 1
a177 1
		*num=ASN1_INTEGER_get(ai);
d179 1
a179 1
	ret=M_ASN1_STRING_length(os);
d181 1
a181 1
		n=ret;
d183 1
a183 1
		n=max_len;
d186 1
a186 1
		memcpy(data,M_ASN1_STRING_data(os),n);
d189 2
a190 1
		ASN1err(ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING,ASN1_R_DATA_IS_WRONG);
d192 5
a196 3
	if (os != NULL) M_ASN1_OCTET_STRING_free(os);
	if (ai != NULL) M_ASN1_INTEGER_free(ai);
	return(ret);
a197 1

@


1.6
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d81 1
a81 2
	if ((a->type != V_ASN1_OCTET_STRING) || (a->value.octet_string == NULL))
	{
d117 1
a117 2
	if (!ASN1_STRING_set(osp,NULL,size))
	{
d146 1
a146 2
	if ((a->type != V_ASN1_SEQUENCE) || (a->value.sequence == NULL))
	{
d177 1
a177 2
	if (0)
	{
@


1.5
log
@resolve conflicts
@
text
@d65 1
a65 1
	{
d72 1
a72 1
	}
d77 1
a77 1
	{
d82 1
a82 1
		{
d85 1
a85 1
		}
d94 1
a94 1
	}
d98 1
a98 1
	{
d119 1
a119 1
		{
d122 1
a122 1
		}
d133 1
a133 1
	}
d140 1
a140 1
	{
d149 1
a149 1
		{
d151 1
a151 1
		}
d181 1
a181 1
		{
d184 1
a184 1
		}
d188 1
a188 1
	}
@


1.4
log
@resolve conflicts
@
text
@d144 1
a144 1
	unsigned char *p;
d146 1
a146 1
	ASN1_CTX c;
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d118 5
a122 1
	ASN1_STRING_set(osp,NULL,size);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d68 2
a69 2
	if ((os=ASN1_OCTET_STRING_new()) == NULL) return(0);
	if (!ASN1_OCTET_STRING_set(os,data,len)) return(0);
d86 2
a87 2
	p=ASN1_STRING_data(a->value.octet_string);
	ret=ASN1_STRING_length(a->value.octet_string);
d120 2
a121 2
	ASN1_STRING_length(osp)=size;
	p=ASN1_STRING_data(osp);
d148 2
a149 2
	p=ASN1_STRING_data(a->value.sequence);
	length=ASN1_STRING_length(a->value.sequence);
d168 1
a168 1
	ret=ASN1_STRING_length(os);
d175 1
a175 1
		memcpy(data,ASN1_STRING_data(os),n);
d181 2
a182 2
	if (os != NULL) ASN1_OCTET_STRING_free(os);
	if (ai != NULL) ASN1_INTEGER_free(ai);
@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "asn1.h"
#include "asn1_mac.h"
d64 1
a64 4
int ASN1_TYPE_set_octetstring(a,data,len)
ASN1_TYPE *a;
unsigned char *data;
int len;
d70 1
a70 1
	ASN1_TYPE_set(a,V_ASN1_OCTET_STRING,(char *)os);
d74 3
a76 4
int ASN1_TYPE_get_octetstring(a,data,max_len)
ASN1_TYPE *a;
unsigned char *data;
int max_len; /* for returned value */
d96 2
a97 5
int ASN1_TYPE_set_int_octetstring(a,num,data,len)
ASN1_TYPE *a;
long num;
unsigned char *data;
int len;
d127 1
a127 1
	ASN1_TYPE_set(a,V_ASN1_SEQUENCE,(char *)osp);
d131 5
a135 6
/* we return the actual length... */
int ASN1_TYPE_get_int_octetstring(a,num,data,max_len)
ASN1_TYPE *a;
long *num;
unsigned char *data;
int max_len; /* for returned value */
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 2
#include <openssl/asn1.h>
#include <openssl/asn1_mac.h>
d64 4
a67 1
int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
d71 3
a73 3
	if ((os=M_ASN1_OCTET_STRING_new()) == NULL) return(0);
	if (!M_ASN1_OCTET_STRING_set(os,data,len)) return(0);
	ASN1_TYPE_set(a,V_ASN1_OCTET_STRING,os);
d77 4
a80 3
/* int max_len:  for returned value    */
int ASN1_TYPE_get_octetstring(ASN1_TYPE *a, unsigned char *data,
	     int max_len)
d90 2
a91 2
	p=M_ASN1_STRING_data(a->value.octet_string);
	ret=M_ASN1_STRING_length(a->value.octet_string);
d100 5
a104 2
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
	     int len)
d127 2
a128 2
	M_ASN1_STRING_length_set(osp, size);
	p=M_ASN1_STRING_data(osp);
d134 1
a134 1
	ASN1_TYPE_set(a,V_ASN1_SEQUENCE,osp);
d138 6
a143 5
/* we return the actual length..., num may be missing, in which
 * case, set it to zero */
/* int max_len:  for returned value    */
int ASN1_TYPE_get_int_octetstring(ASN1_TYPE *a, long *num, unsigned char *data,
	     int max_len)
d156 2
a157 2
	p=M_ASN1_STRING_data(a->value.sequence);
	length=M_ASN1_STRING_length(a->value.sequence);
d176 1
a176 1
	ret=M_ASN1_STRING_length(os);
d183 1
a183 1
		memcpy(data,M_ASN1_STRING_data(os),n);
d189 2
a190 2
	if (os != NULL) M_ASN1_OCTET_STRING_free(os);
	if (ai != NULL) M_ASN1_INTEGER_free(ai);
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d118 1
a118 5
	if (!ASN1_STRING_set(osp,NULL,size))
		{
		ASN1_STRING_free(osp);
		return(0);
		}
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d144 1
a144 1
	const unsigned char *p;
d146 1
a146 1
	ASN1_const_CTX c;
@


