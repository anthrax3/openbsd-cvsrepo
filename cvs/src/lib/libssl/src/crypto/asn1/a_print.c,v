head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	butholakala:1.5
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.5.0.38
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.34
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.32
	OPENBSD_5_3_BASE:1.5
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.5.0.28
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.30
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.5.0.26
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.24
	OPENBSD_4_9_BASE:1.5
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.5.0.22
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.18
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.20
	OPENBSD_4_6_BASE:1.5
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.5.0.16
	OPENBSD_4_5_BASE:1.5
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.04.18.07.09.23;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.15.17.46.16;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.39;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.27;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.45;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.02;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: a_print.c,v 1.10 2014/06/12 15:49:27 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1.h>

int
ASN1_PRINTABLE_type(const unsigned char *s, int len)
{
	int c;
	int ia5 = 0;
	int t61 = 0;

	if (len <= 0)
		len = -1;
	if (s == NULL)
		return (V_ASN1_PRINTABLESTRING);

	while ((*s) && (len-- != 0)) {
		c= *(s++);
		if (!(((c >= 'a') && (c <= 'z')) ||
		    ((c >= 'A') && (c <= 'Z')) ||
		    (c == ' ') ||
		    ((c >= '0') && (c <= '9')) ||
		    (c == ' ') || (c == '\'') ||
		    (c == '(') || (c == ')') ||
		    (c == '+') || (c == ',') ||
		    (c == '-') || (c == '.') ||
		    (c == '/') || (c == ':') ||
		    (c == '=') || (c == '?')))
			ia5 = 1;
		if (c & 0x80)
			t61 = 1;
	}
	if (t61)
		return (V_ASN1_T61STRING);
	if (ia5)
		return (V_ASN1_IA5STRING);
	return (V_ASN1_PRINTABLESTRING);
}

int
ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
{
	int i;
	unsigned char *p;

	if (s->type != V_ASN1_UNIVERSALSTRING)
		return (0);
	if ((s->length % 4) != 0)
		return (0);
	p = s->data;
	for (i = 0; i < s->length; i += 4) {
		if ((p[0] != '\0') || (p[1] != '\0') || (p[2] != '\0'))
			break;
		else
			p += 4;
	}
	if (i < s->length)
		return (0);
	p = s->data;
	for (i = 3; i < s->length; i += 4) {
		*(p++) = s->data[i];
	}
	*(p) = '\0';
	s->length /= 4;
	s->type = ASN1_PRINTABLE_type(s->data, s->length);
	return (1);
}
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
@


1.9
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/asn1/a_print.c */
@


1.8
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d63 2
a64 1
int ASN1_PRINTABLE_type(const unsigned char *s, int len)
d67 2
a68 2
	int ia5=0;
	int t61=0;
d70 4
a73 2
	if (len <= 0) len= -1;
	if (s == NULL) return(V_ASN1_PRINTABLESTRING);
d77 13
a89 13
		if (!(	((c >= 'a') && (c <= 'z')) ||
			((c >= 'A') && (c <= 'Z')) ||
			(c == ' ') ||
			((c >= '0') && (c <= '9')) ||
			(c == ' ') || (c == '\'') ||
			(c == '(') || (c == ')') ||
			(c == '+') || (c == ',') ||
			(c == '-') || (c == '.') ||
			(c == '/') || (c == ':') ||
			(c == '=') || (c == '?')))
			ia5=1;
		if (c&0x80)
			t61=1;
d91 5
a95 3
	if (t61) return(V_ASN1_T61STRING);
	if (ia5) return(V_ASN1_IA5STRING);
	return(V_ASN1_PRINTABLESTRING);
d98 2
a99 1
int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
d104 6
a109 4
	if (s->type != V_ASN1_UNIVERSALSTRING) return(0);
	if ((s->length%4) != 0) return(0);
	p=s->data;
	for (i=0; i<s->length; i+=4) {
d113 1
a113 1
			p+=4;
d115 5
a119 4
	if (i < s->length) return(0);
	p=s->data;
	for (i=3; i<s->length; i+=4) {
		*(p++)=s->data[i];
d121 4
a124 4
	*(p)='\0';
	s->length/=4;
	s->type=ASN1_PRINTABLE_type(s->data,s->length);
	return(1);
@


1.7
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d72 1
a72 2
	while ((*s) && (len-- != 0))
	{
d101 1
a101 2
	for (i=0; i<s->length; i+=4)
	{
d109 1
a109 2
	for (i=3; i<s->length; i+=4)
	{
@


1.6
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d64 1
a64 1
	{
d73 1
a73 1
		{
d88 1
a88 1
		}
d92 1
a92 1
	}
d95 1
a95 1
	{
d103 1
a103 1
		{
d108 1
a108 1
		}
d112 1
a112 1
		{
d114 1
a114 1
		}
d119 1
a119 1
	}
@


1.5
log
@resolve conflicts
@
text
@a74 1
#ifndef CHARSET_EBCDIC
a87 7
#else
		if (!isalnum(c) && (c != ' ') &&
		    strchr("'()+,-./:=?", c) == NULL)
			ia5=1;
		if (os_toascii[c] & 0x80)
			t61=1;
#endif
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d63 1
a63 1
int ASN1_PRINTABLE_type(unsigned char *s, int len)
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@a62 44
ASN1_IA5STRING *ASN1_IA5STRING_new(void)
{ return M_ASN1_IA5STRING_new();}

void ASN1_IA5STRING_free(ASN1_IA5STRING *x)
{ M_ASN1_IA5STRING_free(x);}

int i2d_ASN1_IA5STRING(ASN1_IA5STRING *a, unsigned char **pp)
	{ return(M_i2d_ASN1_IA5STRING(a,pp)); }

ASN1_IA5STRING *d2i_ASN1_IA5STRING(ASN1_IA5STRING **a, unsigned char **pp,
	     long l)
	{ return(M_d2i_ASN1_IA5STRING(a,pp,l)); }

ASN1_T61STRING *ASN1_T61STRING_new(void)
{ return M_ASN1_T61STRING_new();}

void ASN1_T61STRING_free(ASN1_T61STRING *x)
{ M_ASN1_T61STRING_free(x);}

ASN1_T61STRING *d2i_ASN1_T61STRING(ASN1_T61STRING **a, unsigned char **pp,
	     long l)
	{ return(M_d2i_ASN1_T61STRING(a,pp,l)); }

ASN1_PRINTABLESTRING *ASN1_PRINTABLESTRING_new(void)
{ return M_ASN1_PRINTABLESTRING_new();}

void ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING *x)
{ M_ASN1_PRINTABLESTRING_free(x);}

ASN1_PRINTABLESTRING *d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING **a,
	     unsigned char **pp, long l)
	{ return(M_d2i_ASN1_PRINTABLESTRING(a,pp,
	     l)); }

int i2d_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING *a, unsigned char **pp)
	{ return(M_i2d_ASN1_PRINTABLESTRING(a,pp)); }

int i2d_ASN1_PRINTABLE(ASN1_STRING *a, unsigned char **pp)
	{ return(M_i2d_ASN1_PRINTABLE(a,pp)); }

ASN1_STRING *d2i_ASN1_PRINTABLE(ASN1_STRING **a, unsigned char **pp,
	     long l)
	{ return(M_d2i_ASN1_PRINTABLE(a,pp,l)); }

a127 26

ASN1_STRING *DIRECTORYSTRING_new(void)
{ return M_DIRECTORYSTRING_new();}

void DIRECTORYSTRING_free(ASN1_STRING *x)
{ M_DIRECTORYSTRING_free(x);}

int i2d_DIRECTORYSTRING(ASN1_STRING *a, unsigned char **pp)
	{ return(M_i2d_DIRECTORYSTRING(a,pp)); }

ASN1_STRING *d2i_DIRECTORYSTRING(ASN1_STRING **a, unsigned char **pp,
	     long l)
	{ return(M_d2i_DIRECTORYSTRING(a,pp,l)); }

ASN1_STRING *DISPLAYTEXT_new(void)
{ return M_DISPLAYTEXT_new();}

void DISPLAYTEXT_free(ASN1_STRING *x)
{ M_DISPLAYTEXT_free(x);}

int i2d_DISPLAYTEXT(ASN1_STRING *a, unsigned char **pp)
	{ return(M_i2d_DISPLAYTEXT(a,pp)); }

ASN1_STRING *d2i_DISPLAYTEXT(ASN1_STRING **a, unsigned char **pp,
	     long l)
	{ return(M_d2i_DISPLAYTEXT(a,pp,l)); }
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d63 6
d76 6
d86 6
d97 3
d173 5
d185 6
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
#include "asn1.h"
d63 1
a63 7
/* ASN1err(ASN1_F_D2I_ASN1_PRINT_TYPE,ASN1_R_WRONG_PRINTABLE_TYPE);
 * ASN1err(ASN1_F_D2I_ASN1_PRINT_TYPE,ASN1_R_TAG_VALUE_TOO_HIGH);
 */

int i2d_ASN1_IA5STRING(a,pp)
ASN1_IA5STRING *a;
unsigned char **pp;
d66 2
a67 4
ASN1_IA5STRING *d2i_ASN1_IA5STRING(a,pp,l)
ASN1_IA5STRING **a;
unsigned char **pp;
long l;
d70 2
a71 4
ASN1_T61STRING *d2i_ASN1_T61STRING(a,pp,l)
ASN1_T61STRING **a;
unsigned char **pp;
long l;
d74 6
a79 9
ASN1_PRINTABLESTRING *d2i_ASN1_PRINTABLESTRING(a,pp,l)
ASN1_PRINTABLESTRING **a;
unsigned char **pp;
long l;
	{ return(M_d2i_ASN1_PRINTABLESTRING(a,pp,l)); }

int i2d_ASN1_PRINTABLE(a,pp)
ASN1_STRING *a;
unsigned char **pp;
d82 2
a83 4
ASN1_STRING *d2i_ASN1_PRINTABLE(a,pp,l)
ASN1_STRING **a;
unsigned char **pp;
long l;
d86 1
a86 3
int ASN1_PRINTABLE_type(s,len)
unsigned char *s;
int len;
d98 1
d112 7
d125 1
a125 2
int ASN1_UNIVERSALSTRING_to_string(s)
ASN1_UNIVERSALSTRING *s;
d152 14
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/asn1.h>
d63 41
a103 1
int ASN1_PRINTABLE_type(unsigned char *s, int len)
a114 1
#ifndef CHARSET_EBCDIC
a127 7
#else
		if (!isalnum(c) && (c != ' ') &&
		    strchr("'()+,-./:=?", c) == NULL)
			ia5=1;
		if (os_toascii[c] & 0x80)
			t61=1;
#endif
d134 2
a135 1
int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
d161 1
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d63 1
a63 1
int ASN1_PRINTABLE_type(const unsigned char *s, int len)
@


