head	1.27;
access;
symbols
	OPENBSD_6_0:1.27.0.4
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.24.0.4
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.23.0.4
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.4
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.8.0.26
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.22
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.24
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.8.0.20
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.8
	OPENBSD_4_4:1.8.0.18
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.16
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.14
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.12
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.10
	OPENBSD_4_0_BASE:1.8
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.27
date	2015.10.19.16.32.37;	author beck;	state Exp;
branches;
next	1.26;
commitid	gN6dUlgzg63Qhn8s;

1.26
date	2015.10.02.15.04.45;	author beck;	state Exp;
branches;
next	1.25;
commitid	qCopm45l75mxQGLg;

1.25
date	2015.09.30.18.04.02;	author jsing;	state Exp;
branches;
next	1.24;
commitid	XW9OIeABPcn8Y4ca;

1.24
date	2015.07.24.13.49.58;	author jsing;	state Exp;
branches;
next	1.23;
commitid	fmEiwcKzybCd1fUe;

1.23
date	2015.02.09.15.05.59;	author jsing;	state Exp;
branches;
next	1.22;
commitid	X3hE8E9VwC2nOKbW;

1.22
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.21;
commitid	gtwLkRyWx0K1HbzX;

1.21
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.20;
commitid	yQEL1wOWIearrW15;

1.20
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.19;
commitid	id8dTrTMtnTn4fqt;

1.19
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	mJUVYpkFBZ0Zv2bG;

1.18
date	2014.05.15.21.06.10;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.21.00.52.00;	author beck;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.20.22.32.58;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.19.13.29.11;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.19.00.41.37;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.23.42.00;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.15.17.46.16;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.08.08.03.12;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.03.17.56.27;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.03.15.12.44;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.06;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.08.39;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.28;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.47;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.34.31;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.41.33;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Stop supporing "legcay" time formats that OpenSSL supports. Rewrite the
utctime and gentime wrappers accordingly. Along with some other cleanup.
this also removes the need for timegm.
ok bcook@@ sthen@@ jsing@@
@
text
@/* $OpenBSD: a_time.c,v 1.26 2015/10/02 15:04:45 beck Exp $ */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

/* This is an implementation of the ASN1 Time structure which is:
 *    Time ::= CHOICE {
 *      utcTime        UTCTime,
 *      generalTime    GeneralizedTime }
 * written by Steve Henson.
 */

#include <stdio.h>
#include <string.h>
#include <time.h>

#include <openssl/asn1t.h>
#include <openssl/err.h>

#include "o_time.h"
#include "asn1_locl.h"

const ASN1_ITEM ASN1_TIME_it = {
	.itype = ASN1_ITYPE_MSTRING,
	.utype = B_ASN1_TIME,
	.templates = NULL,
	.tcount = 0,
	.funcs = NULL,
	.size = sizeof(ASN1_STRING),
	.sname = "ASN1_TIME",
};


ASN1_TIME *
d2i_ASN1_TIME(ASN1_TIME **a, const unsigned char **in, long len)
{
	return (ASN1_TIME *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &ASN1_TIME_it);
}

int
i2d_ASN1_TIME(ASN1_TIME *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &ASN1_TIME_it);
}

ASN1_TIME *
ASN1_TIME_new(void)
{
	return (ASN1_TIME *)ASN1_item_new(&ASN1_TIME_it);
}

void
ASN1_TIME_free(ASN1_TIME *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &ASN1_TIME_it);
}
@


1.26
log
@Flense the greasy black guts of unreadble string parsing code out of three areas
in asn1 and x509 code, all dealing with an ASN1_TIME. This brings the parsing
together in one function that converts into a struct tm. While we are at it this
also brings us into conformance with RFC 5280 for times allowed in an X509 cert,
as OpenSSL is very liberal with what it allows.
input and fixes from deraadt@@ jsing@@ guethther@@ and others.
ok krw@@, guenther@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time.c,v 1.25 2015/09/30 18:04:02 jsing Exp $ */
a106 115
}

ASN1_TIME *
ASN1_TIME_set(ASN1_TIME *s, time_t t)
{
	return ASN1_TIME_adj(s, t, 0, 0);
}

ASN1_TIME *
ASN1_TIME_adj(ASN1_TIME *s, time_t t, int offset_day, long offset_sec)
{
	struct tm *ts;
	struct tm data;

	ts = gmtime_r(&t, &data);
	if (ts == NULL) {
		ASN1err(ASN1_F_ASN1_TIME_ADJ, ASN1_R_ERROR_GETTING_TIME);
		return NULL;
	}
	if (offset_day || offset_sec) {
		if (!OPENSSL_gmtime_adj(ts, offset_day, offset_sec))
			return NULL;
	}
	if ((ts->tm_year >= 50) && (ts->tm_year < 150))
		return ASN1_UTCTIME_adj(s, t, offset_day, offset_sec);
	return ASN1_GENERALIZEDTIME_adj(s, t, offset_day, offset_sec);
}

int
ASN1_TIME_check(ASN1_TIME *t)
{
	if (t->type != V_ASN1_GENERALIZEDTIME && t->type != V_ASN1_UTCTIME)
		return 0;
	return (t->type == asn1_time_parse(t->data, t->length, NULL, t->type));
}

/* Convert an ASN1_TIME structure to GeneralizedTime */
static ASN1_GENERALIZEDTIME *
ASN1_TIME_to_generalizedtime_internal(ASN1_TIME *t, ASN1_GENERALIZEDTIME **out)
{
	ASN1_GENERALIZEDTIME *ret;
	char *str;
	int newlen;
	int i;

	if (!ASN1_TIME_check(t))
		return NULL;

	ret = *out;

	/* If already GeneralizedTime just copy across */
	if (t->type == V_ASN1_GENERALIZEDTIME) {
		if (!ASN1_STRING_set(ret, t->data, t->length))
			return NULL;
		return ret;
	}

	/* grow the string */
	if (!ASN1_STRING_set(ret, NULL, t->length + 2))
		return NULL;
	/* ASN1_STRING_set() allocated 'len + 1' bytes. */
	newlen = t->length + 2 + 1;
	str = (char *)ret->data;
	/* XXX ASN1_TIME is not Y2050 compatible */
	i = snprintf(str, newlen, "%s%s", (t->data[0] >= '5') ? "19" : "20",
	    (char *) t->data);
	if (i == -1 || i >= newlen) {
		ASN1_GENERALIZEDTIME_free(ret);
		*out = NULL;
		return NULL;
	}
	return ret;
}

ASN1_GENERALIZEDTIME *
ASN1_TIME_to_generalizedtime(ASN1_TIME *t, ASN1_GENERALIZEDTIME **out)
{
	ASN1_GENERALIZEDTIME *tmp = NULL, *ret;

	if (!out || !*out) {
		if (!(tmp = ASN1_GENERALIZEDTIME_new()))
			return NULL;
		if (out != NULL)
			*out = tmp;
		else
			out = &tmp;
	}

	ret = ASN1_TIME_to_generalizedtime_internal(t, out);
	if (ret == NULL && tmp != NULL)
		ASN1_GENERALIZEDTIME_free(tmp);

	return ret;
}

int
ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
{
	ASN1_TIME t;

	t.length = strlen(str);
	t.data = (unsigned char *)str;
	t.flags = 0;

	t.type = asn1_time_parse(t.data, t.length, NULL, V_ASN1_UTCTIME);
	if (t.type == -1)
		t.type = asn1_time_parse(t.data, t.length, NULL,
		    V_ASN1_GENERALIZEDTIME);
	if (t.type == -1)
		return 0;

	if (s && !ASN1_STRING_copy((ASN1_STRING *)s, (ASN1_STRING *)&t))
		return 0;

	return 1;
@


1.25
log
@Replace M_ASN1_GENERALIZEDTIME_(new|free) with
ASN1_GENERALIZEDTIME_(new|free).
@
text
@d1 1
a1 1
/* $OpenBSD: a_time.c,v 1.24 2015/07/24 13:49:58 jsing Exp $ */
d71 1
a71 1

d138 3
a140 5
	if (t->type == V_ASN1_GENERALIZEDTIME)
		return ASN1_GENERALIZEDTIME_check(t);
	else if (t->type == V_ASN1_UTCTIME)
		return ASN1_UTCTIME_check(t);
	return 0;
d211 6
a216 7
	t.type = V_ASN1_UTCTIME;

	if (!ASN1_TIME_check(&t)) {
		t.type = V_ASN1_GENERALIZEDTIME;
		if (!ASN1_TIME_check(&t))
			return 0;
	}
@


1.24
log
@Expand IMPLEMENT_ASN1_MSTRING macros - the generated assembly only differs
by changes to line numbers.
@
text
@d1 1
a1 1
/* $OpenBSD: a_time.c,v 1.23 2015/02/09 15:05:59 jsing Exp $ */
d176 1
a176 1
		M_ASN1_GENERALIZEDTIME_free(ret);
@


1.23
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time.c,v 1.22 2015/02/07 13:19:15 doug Exp $ */
d72 10
a81 1
IMPLEMENT_ASN1_MSTRING(ASN1_TIME, B_ASN1_TIME)
@


1.22
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time.c,v 1.21 2014/07/11 08:44:47 jsing Exp $ */
d74 25
a98 1
IMPLEMENT_ASN1_FUNCTIONS(ASN1_TIME)
@


1.21
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time.c,v 1.20 2014/07/10 13:58:22 jsing Exp $ */
a74 12

#if 0
int
i2d_ASN1_TIME(ASN1_TIME *a, unsigned char **pp)
{
	if (a->type == V_ASN1_UTCTIME || a->type == V_ASN1_GENERALIZEDTIME)
		return(i2d_ASN1_bytes((ASN1_STRING *)a, pp,
		    a->type, V_ASN1_UNIVERSAL));
	ASN1err(ASN1_F_I2D_ASN1_TIME, ASN1_R_EXPECTING_A_TIME);
	return -1;
}
#endif
@


1.20
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time.c,v 1.19 2014/06/12 15:49:27 deraadt Exp $ */
a55 1

d67 3
a69 1
#include "cryptlib.h"
a70 1
#include <openssl/asn1t.h>
@


1.19
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d65 1
d67 1
@


1.18
log
@Replace ASN1_GENERALIZEDTIME_adj(), ASN1_UTCTIME_adj() and
ASN1_TIME_to_generalizedtime() with wrappers around their former
implementations, making sure memory allocated is freed in all failure cases.

help and ok from beck@@ and Brendan MacDonell.
@
text
@d1 1
a1 1
/* crypto/asn1/a_time.c */
@


1.17
log
@
fix accidentally deleted deref.
@
text
@d123 2
a124 2
ASN1_GENERALIZEDTIME *
ASN1_TIME_to_generalizedtime(ASN1_TIME *t, ASN1_GENERALIZEDTIME **out)
d134 1
a134 7
	if (!out || !*out) {
		if (!(ret = ASN1_GENERALIZEDTIME_new ()))
			return NULL;
		if (out)
			*out = ret;
	} else
		ret = *out;
d149 1
d153 2
a154 1
		ASN1_STRING_free(ret);
d157 21
@


1.16
log
@replace a bunch of pointer-arithmatic-strcpy-converted-blindly-to-strlcpy
cruft with an snprintf.
"better than what was there"  ok guenther@@
@
text
@d155 1
a155 1
	i = snprintf(str, newlen, "%s%s", (t->data >= '5') ? "19" : "20",
@


1.15
log
@More KNF.
@
text
@d129 1
d155 6
a160 7
	/* Work out the century and prepend */
	if (t->data[0] >= '5')
		strlcpy(str, "19", newlen);
	else
		strlcpy(str, "20", newlen);
	strlcat(str, (char *)t->data, newlen);

@


1.14
log
@use intrinsic strlcpy and strlcat everywhere so we only have one set of
funcitons to check for incorrect use. keep BUF_strlcpy and BUF_strlcat
for API comptibility only.
ok tedu@@
@
text
@d10 1
a10 1
 *    notice, this list of conditions and the following disclaimer. 
d75 2
a76 1
int i2d_ASN1_TIME(ASN1_TIME *a, unsigned char **pp)
d78 4
a81 4
	if(a->type == V_ASN1_UTCTIME || a->type == V_ASN1_GENERALIZEDTIME)
				return(i2d_ASN1_bytes((ASN1_STRING *)a,pp,
				     a->type ,V_ASN1_UNIVERSAL));
	ASN1err(ASN1_F_I2D_ASN1_TIME,ASN1_R_EXPECTING_A_TIME);
d86 2
a87 2

ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t)
d92 2
a93 2
ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
				int offset_day, long offset_sec)
d98 1
a98 1
	ts=gmtime_r(&t,&data);
d103 1
a103 1
	if (offset_day || offset_sec) { 
d107 2
a108 2
	if((ts->tm_year >= 50) && (ts->tm_year < 150))
			return ASN1_UTCTIME_adj(s, t, offset_day, offset_sec);
d112 2
a113 1
int ASN1_TIME_check(ASN1_TIME *t)
d123 2
a124 1
ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(ASN1_TIME *t, ASN1_GENERALIZEDTIME **out)
d130 2
a131 1
	if (!ASN1_TIME_check(t)) return NULL;
d136 4
a139 3
		if (out) *out = ret;
	}
	else ret = *out;
d143 1
a143 1
		if(!ASN1_STRING_set(ret, t->data, t->length))
d155 4
a158 3
	if (t->data[0] >= '5') strlcpy(str, "19", newlen);
	else strlcpy(str, "20", newlen);

d164 2
a165 1
int ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
d172 1
a172 1
	
d180 1
a180 1
	
d182 1
a182 1
			return 0;
@


1.13
log
@OPENSSL_gmtime() is really just gmtime_r(); ok guenther
@
text
@d150 2
a151 2
	if (t->data[0] >= '5') BUF_strlcpy(str, "19", newlen);
	else BUF_strlcpy(str, "20", newlen);
d153 1
a153 1
	BUF_strlcat(str, (char *)t->data, newlen);
@


1.12
log
@lob a few more knf grenades in here to soften things up.
@
text
@d97 1
a97 1
	ts=OPENSSL_gmtime(&t,&data);
@


1.11
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d98 1
a98 2
	if (ts == NULL)
	{
d102 1
a102 2
	if (offset_day || offset_sec)
	{ 
d129 1
a129 2
	if (!out || !*out)
	{
d137 1
a137 2
	if (t->type == V_ASN1_GENERALIZEDTIME)
	{
d168 1
a168 2
	if (!ASN1_TIME_check(&t))
	{
@


1.10
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d76 1
a76 1
	{
d82 1
a82 1
	}
d87 1
a87 1
	{
d89 1
a89 1
	}
d93 1
a93 1
	{
d99 1
a99 1
		{
d102 1
a102 1
		}
d104 1
a104 1
		{ 
d107 1
a107 1
		}
d111 1
a111 1
	}
d114 1
a114 1
	{
d120 1
a120 1
	}
d124 1
a124 1
	{
d132 1
a132 1
		{
d136 1
a136 1
		}
d141 1
a141 1
		{
d145 1
a145 1
		}
d160 1
a160 1
	}
d163 1
a163 1
	{
d173 1
a173 1
		{
d177 1
a177 1
		}
d183 1
a183 1
	}
@


1.9
log
@resolve conflicts, fix local changes
@
text
@a76 15
#ifdef CHARSET_EBCDIC
	/* KLUDGE! We convert to ascii before writing DER */
	char tmp[24];
	ASN1_STRING tmpstr;

	if(a->type == V_ASN1_UTCTIME || a->type == V_ASN1_GENERALIZEDTIME) {
	    int len;

	    tmpstr = *(ASN1_STRING *)a;
	    len = tmpstr.length;
	    ebcdic2ascii(tmp, tmpstr.data, (len >= sizeof tmp) ? sizeof tmp : len);
	    tmpstr.data = tmp;
	    a = (ASN1_GENERALIZEDTIME *) &tmpstr;
	}
#endif
@


1.8
log
@merge 0.9.7d
@
text
@d103 6
d115 1
a115 1
		ASN1err(ASN1_F_ASN1_TIME_SET, ASN1_R_ERROR_GETTING_TIME);
d118 5
d124 2
a125 2
					return ASN1_UTCTIME_set(s, t);
	return ASN1_GENERALIZEDTIME_set(s,t);
d175 23
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d158 2
a159 2
	if (t->data[0] >= '5') strlcpy(str, "19", newlen);
	else strlcpy(str, "20", newlen);
d161 1
a161 1
	strlcat(str, (char *)t->data, newlen);
@


1.6
log
@Correct off-by-one error in previous commit. millert@@ ok.
@
text
@d108 2
d111 1
@


1.5
log
@str{cat,cpy}/sprintf cleanup. markus@@, deraadt@@ ok
@
text
@d149 1
a149 2
	newlen = t->length + 2;
	if (!ASN1_STRING_set(ret, NULL, newlen))
d151 2
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d128 1
d149 2
a150 1
	if (!ASN1_STRING_set(ret, NULL, t->length + 2))
d154 2
a155 2
	if (t->data[0] >= '5') strcpy(str, "19");
	else strcpy(str, "20");
d157 1
a157 1
	strcat(str, (char *)t->data);
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d67 2
a68 1
#include <openssl/asn1.h>
d70 1
a70 2
ASN1_TIME *ASN1_TIME_new(void)
{ return M_ASN1_TIME_new(); }
d72 1
a72 2
void ASN1_TIME_free(ASN1_TIME *x)
{ M_ASN1_TIME_free(x); }
d74 1
d98 1
a98 13


ASN1_TIME *d2i_ASN1_TIME(ASN1_TIME **a, unsigned char **pp, long length)
	{
	unsigned char tag;
	tag = **pp & ~V_ASN1_CONSTRUCTED;
	if(tag == (V_ASN1_UTCTIME|V_ASN1_UNIVERSAL))
					 return d2i_ASN1_UTCTIME(a, pp, length);
	if(tag == (V_ASN1_GENERALIZEDTIME|V_ASN1_UNIVERSAL))
				return d2i_ASN1_GENERALIZEDTIME(a, pp, length);
	ASN1err(ASN1_F_D2I_ASN1_TIME,ASN1_R_EXPECTING_A_TIME);
	return(NULL);
	}
a103 1
#if defined(THREADS) && !defined(WIN32) && !defined(__CYGWIN32__)
d106 3
a108 5
	gmtime_r(&t,&data);
	ts=&data; /* should return &data, but doesn't on some systems, so we don't even look at the return value */
#else
	ts=gmtime(&t);
#endif
d112 46
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d116 1
a116 1
#if defined(THREADS) && !defined(WIN32)
a117 1
#endif
a118 1
#if defined(THREADS) && !defined(WIN32)
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d69 6
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d67 1
a67 2
#include "o_time.h"
#include <openssl/asn1t.h>
a68 5
IMPLEMENT_ASN1_MSTRING(ASN1_TIME, B_ASN1_TIME)

IMPLEMENT_ASN1_FUNCTIONS(ASN1_TIME)

#if 0
d92 13
a104 1
#endif
d110 1
d112 1
d114 6
a119 3
	ts=OPENSSL_gmtime(&t,&data);
	if (ts == NULL)
		return NULL;
a122 46
	}

int ASN1_TIME_check(ASN1_TIME *t)
	{
	if (t->type == V_ASN1_GENERALIZEDTIME)
		return ASN1_GENERALIZEDTIME_check(t);
	else if (t->type == V_ASN1_UTCTIME)
		return ASN1_UTCTIME_check(t);
	return 0;
	}

/* Convert an ASN1_TIME structure to GeneralizedTime */
ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(ASN1_TIME *t, ASN1_GENERALIZEDTIME **out)
	{
	ASN1_GENERALIZEDTIME *ret;
	char *str;

	if (!ASN1_TIME_check(t)) return NULL;

	if (!out || !*out)
		{
		if (!(ret = ASN1_GENERALIZEDTIME_new ()))
			return NULL;
		if (out) *out = ret;
		}
	else ret = *out;

	/* If already GeneralizedTime just copy across */
	if (t->type == V_ASN1_GENERALIZEDTIME)
		{
		if(!ASN1_STRING_set(ret, t->data, t->length))
			return NULL;
		return ret;
		}

	/* grow the string */
	if (!ASN1_STRING_set(ret, NULL, t->length + 2))
		return NULL;
	str = (char *)ret->data;
	/* Work out the century and prepend */
	if (t->data[0] >= '5') strcpy(str, "19");
	else strcpy(str, "20");

	strcat(str, (char *)t->data);

	return ret;
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@a107 2
		{
		ASN1err(ASN1_F_ASN1_TIME_SET, ASN1_R_ERROR_GETTING_TIME);
a108 1
		}
d155 1
a155 1
	BUF_strlcat(str, (char *)t->data, t->length+3);	/* Include space for a '\0' */
@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@a130 1
	int newlen;
a152 2
	/* ASN1_STRING_set() allocated 'len + 1' bytes. */
	newlen = t->length + 2 + 1;
d155 2
a156 2
	if (t->data[0] >= '5') BUF_strlcpy(str, "19", newlen);
	else BUF_strlcpy(str, "20", newlen);
d158 1
a158 1
	BUF_strlcat(str, (char *)t->data, newlen);
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a102 6
	return ASN1_TIME_adj(s, t, 0, 0);
	}

ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
				int offset_day, long offset_sec)
	{
d109 1
a109 1
		ASN1err(ASN1_F_ASN1_TIME_ADJ, ASN1_R_ERROR_GETTING_TIME);
a111 5
	if (offset_day || offset_sec)
		{ 
		if (!OPENSSL_gmtime_adj(ts, offset_day, offset_sec))
			return NULL;
		}
d113 2
a114 2
			return ASN1_UTCTIME_adj(s, t, offset_day, offset_sec);
	return ASN1_GENERALIZEDTIME_adj(s, t, offset_day, offset_sec);
a163 23
	}

int ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
	{
	ASN1_TIME t;

	t.length = strlen(str);
	t.data = (unsigned char *)str;
	t.flags = 0;
	
	t.type = V_ASN1_UTCTIME;

	if (!ASN1_TIME_check(&t))
		{
		t.type = V_ASN1_GENERALIZEDTIME;
		if (!ASN1_TIME_check(&t))
			return 0;
		}
	
	if (s && !ASN1_STRING_copy((ASN1_STRING *)s, (ASN1_STRING *)&t))
			return 0;

	return 1;
@


