head	1.13;
access;
symbols
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.6
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	butholakala:1.7
	openssl_1_0_1_g:1.1.1.4
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.09.03.11.33.38;	author beck;	state dead;
branches;
next	1.12;
commitid	HnbXxsegngek41U2;

1.12
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.10;
commitid	nzndm3zqPmFurSaK;

1.10
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.20.13.42.57;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.05.11.05.07;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.49;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.19;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.48;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.48;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.32;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.25;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: lh_stats.c,v 1.12 2014/07/11 08:44:48 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_BIO
#include <openssl/bio.h>
#endif
#include <openssl/lhash.h>

#ifdef OPENSSL_NO_BIO

void
lh_stats(LHASH *lh, FILE *out)
{
	fprintf(out, "num_items             = %lu\n", lh->num_items);
	fprintf(out, "num_nodes             = %u\n", lh->num_nodes);
	fprintf(out, "num_alloc_nodes       = %u\n", lh->num_alloc_nodes);
	fprintf(out, "num_expands           = %lu\n", lh->num_expands);
	fprintf(out, "num_expand_reallocs   = %lu\n", lh->num_expand_reallocs);
	fprintf(out, "num_contracts         = %lu\n", lh->num_contracts);
	fprintf(out, "num_contract_reallocs = %lu\n",
	    lh->num_contract_reallocs);
	fprintf(out, "num_hash_calls        = %lu\n", lh->num_hash_calls);
	fprintf(out, "num_comp_calls        = %lu\n", lh->num_comp_calls);
	fprintf(out, "num_insert            = %lu\n", lh->num_insert);
	fprintf(out, "num_replace           = %lu\n", lh->num_replace);
	fprintf(out, "num_delete            = %lu\n", lh->num_delete);
	fprintf(out, "num_no_delete         = %lu\n", lh->num_no_delete);
	fprintf(out, "num_retrieve          = %lu\n", lh->num_retrieve);
	fprintf(out, "num_retrieve_miss     = %lu\n", lh->num_retrieve_miss);
	fprintf(out, "num_hash_comps        = %lu\n", lh->num_hash_comps);
#if 0
	fprintf(out, "p                     = %u\n", lh->p);
	fprintf(out, "pmax                  = %u\n", lh->pmax);
	fprintf(out, "up_load               = %lu\n", lh->up_load);
	fprintf(out, "down_load             = %lu\n", lh->down_load);
#endif
}

void
lh_node_stats(LHASH *lh, FILE *out)
{
	LHASH_NODE *n;
	unsigned int i, num;

	for (i = 0; i < lh->num_nodes; i++) {
		for (n = lh->b[i], num = 0; n != NULL; n = n->next)
			num++;
		fprintf(out, "node %6u -> %3u\n", i, num);
	}
}

void
lh_node_usage_stats(LHASH *lh, FILE *out)
{
	LHASH_NODE *n;
	unsigned long num;
	unsigned int i;
	unsigned long total = 0, n_used = 0;

	for (i = 0; i < lh->num_nodes; i++) {
		for (n = lh->b[i], num = 0; n != NULL; n = n->next)
			num++;
		if (num != 0) {
			n_used++;
			total += num;
		}
	}
	fprintf(out, "%lu nodes used out of %u\n", n_used, lh->num_nodes);
	fprintf(out, "%lu items\n", total);
	if (n_used == 0)
		return;
	fprintf(out, "load %d.%02d  actual load %d.%02d\n",
	    (int)(total / lh->num_nodes),
	    (int)((total % lh->num_nodes) * 100 / lh->num_nodes),
	    (int)(total / n_used),
	    (int)((total % n_used) * 100 / n_used));
}

#else

void
lh_stats(const _LHASH *lh, FILE *fp)
{
	BIO *bp;

	bp = BIO_new(BIO_s_file());
	if (bp == NULL)
		goto end;
	BIO_set_fp(bp, fp, BIO_NOCLOSE);
	lh_stats_bio(lh, bp);
	BIO_free(bp);
end:;
}

void
lh_node_stats(const _LHASH *lh, FILE *fp)
{
	BIO *bp;

	bp = BIO_new(BIO_s_file());
	if (bp == NULL)
		goto end;
	BIO_set_fp(bp, fp, BIO_NOCLOSE);
	lh_node_stats_bio(lh, bp);
	BIO_free(bp);
end:;
}

void
lh_node_usage_stats(const _LHASH *lh, FILE *fp)
{
	BIO *bp;

	bp = BIO_new(BIO_s_file());
	if (bp == NULL)
		goto end;
	BIO_set_fp(bp, fp, BIO_NOCLOSE);
	lh_node_usage_stats_bio(lh, bp);
	BIO_free(bp);
end:;
}


void
lh_stats_bio(const _LHASH *lh, BIO *out)
{
	BIO_printf(out, "num_items             = %lu\n", lh->num_items);
	BIO_printf(out, "num_nodes             = %u\n", lh->num_nodes);
	BIO_printf(out, "num_alloc_nodes       = %u\n", lh->num_alloc_nodes);
	BIO_printf(out, "num_expands           = %lu\n", lh->num_expands);
	BIO_printf(out, "num_expand_reallocs   = %lu\n",
	    lh->num_expand_reallocs);
	BIO_printf(out, "num_contracts         = %lu\n", lh->num_contracts);
	BIO_printf(out, "num_contract_reallocs = %lu\n",
	    lh->num_contract_reallocs);
	BIO_printf(out, "num_hash_calls        = %lu\n", lh->num_hash_calls);
	BIO_printf(out, "num_comp_calls        = %lu\n", lh->num_comp_calls);
	BIO_printf(out, "num_insert            = %lu\n", lh->num_insert);
	BIO_printf(out, "num_replace           = %lu\n", lh->num_replace);
	BIO_printf(out, "num_delete            = %lu\n", lh->num_delete);
	BIO_printf(out, "num_no_delete         = %lu\n", lh->num_no_delete);
	BIO_printf(out, "num_retrieve          = %lu\n", lh->num_retrieve);
	BIO_printf(out, "num_retrieve_miss     = %lu\n", lh->num_retrieve_miss);
	BIO_printf(out, "num_hash_comps        = %lu\n", lh->num_hash_comps);
#if 0
	BIO_printf(out, "p                     = %u\n", lh->p);
	BIO_printf(out, "pmax                  = %u\n", lh->pmax);
	BIO_printf(out, "up_load               = %lu\n", lh->up_load);
	BIO_printf(out, "down_load             = %lu\n", lh->down_load);
#endif
}

void
lh_node_stats_bio(const _LHASH *lh, BIO *out)
{
	LHASH_NODE *n;
	unsigned int i, num;

	for (i = 0; i < lh->num_nodes; i++) {
		for (n = lh->b[i], num = 0; n != NULL; n = n->next)
			num++;
		BIO_printf(out, "node %6u -> %3u\n", i, num);
	}
}

void
lh_node_usage_stats_bio(const _LHASH *lh, BIO *out)
{
	LHASH_NODE *n;
	unsigned long num;
	unsigned int i;
	unsigned long total = 0, n_used = 0;

	for (i = 0; i < lh->num_nodes; i++) {
		for (n = lh->b[i], num = 0; n != NULL; n = n->next)
			num++;
		if (num != 0) {
			n_used++;
			total += num;
		}
	}
	BIO_printf(out, "%lu nodes used out of %u\n", n_used, lh->num_nodes);
	BIO_printf(out, "%lu items\n", total);
	if (n_used == 0)
		return;
	BIO_printf(out, "load %d.%02d  actual load %d.%02d\n",
	    (int)(total / lh->num_nodes),
	    (int)((total % lh->num_nodes) * 100 / lh->num_nodes),
	    (int)(total / n_used),
	    (int)((total % n_used) * 100 / n_used));
}

#endif
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: lh_stats.c,v 1.11 2014/07/10 22:45:57 jsing Exp $ */
@


1.11
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: lh_stats.c,v 1.10 2014/06/12 15:49:29 deraadt Exp $ */
a63 4

/* If you wish to build this outside of SSLeay, remove the following lines
 * and things should work as expected */
#include "cryptlib.h"
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d62 3
@


1.9
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d1 1
a1 1
/* crypto/lhash/lh_stats.c */
@


1.8
log
@KNF.
@
text
@a142 1
#ifndef OPENSSL_NO_FP_API
a184 1
#endif
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d73 20
a92 18
void lh_stats(LHASH *lh, FILE *out)
	{
	fprintf(out,"num_items             = %lu\n",lh->num_items);
	fprintf(out,"num_nodes             = %u\n",lh->num_nodes);
	fprintf(out,"num_alloc_nodes       = %u\n",lh->num_alloc_nodes);
	fprintf(out,"num_expands           = %lu\n",lh->num_expands);
	fprintf(out,"num_expand_reallocs   = %lu\n",lh->num_expand_reallocs);
	fprintf(out,"num_contracts         = %lu\n",lh->num_contracts);
	fprintf(out,"num_contract_reallocs = %lu\n",lh->num_contract_reallocs);
	fprintf(out,"num_hash_calls        = %lu\n",lh->num_hash_calls);
	fprintf(out,"num_comp_calls        = %lu\n",lh->num_comp_calls);
	fprintf(out,"num_insert            = %lu\n",lh->num_insert);
	fprintf(out,"num_replace           = %lu\n",lh->num_replace);
	fprintf(out,"num_delete            = %lu\n",lh->num_delete);
	fprintf(out,"num_no_delete         = %lu\n",lh->num_no_delete);
	fprintf(out,"num_retrieve          = %lu\n",lh->num_retrieve);
	fprintf(out,"num_retrieve_miss     = %lu\n",lh->num_retrieve_miss);
	fprintf(out,"num_hash_comps        = %lu\n",lh->num_hash_comps);
d94 4
a97 4
	fprintf(out,"p                     = %u\n",lh->p);
	fprintf(out,"pmax                  = %u\n",lh->pmax);
	fprintf(out,"up_load               = %lu\n",lh->up_load);
	fprintf(out,"down_load             = %lu\n",lh->down_load);
d99 1
a99 1
	}
d101 3
a103 2
void lh_node_stats(LHASH *lh, FILE *out)
	{
d105 1
a105 1
	unsigned int i,num;
d107 2
a108 3
	for (i=0; i<lh->num_nodes; i++)
		{
		for (n=lh->b[i],num=0; n != NULL; n=n->next)
d110 1
a110 2
		fprintf(out,"node %6u -> %3u\n",i,num);
		}
d112 1
d114 3
a116 2
void lh_node_usage_stats(LHASH *lh, FILE *out)
	{
d120 1
a120 1
	unsigned long total=0,n_used=0;
d122 2
a123 3
	for (i=0; i<lh->num_nodes; i++)
		{
		for (n=lh->b[i],num=0; n != NULL; n=n->next)
d125 1
a125 2
		if (num != 0)
			{
d127 1
a127 2
			total+=num;
			}
a128 8
	fprintf(out,"%lu nodes used out of %u\n",n_used,lh->num_nodes);
	fprintf(out,"%lu items\n",total);
	if (n_used == 0) return;
	fprintf(out,"load %d.%02d  actual load %d.%02d\n",
		(int)(total/lh->num_nodes),
		(int)((total%lh->num_nodes)*100/lh->num_nodes),
		(int)(total/n_used),
		(int)((total%n_used)*100/n_used));
d130 10
d144 3
a146 2
void lh_stats(const _LHASH *lh, FILE *fp)
	{
d149 5
a153 4
	bp=BIO_new(BIO_s_file());
	if (bp == NULL) goto end;
	BIO_set_fp(bp,fp,BIO_NOCLOSE);
	lh_stats_bio(lh,bp);
d156 1
a156 1
	}
d158 3
a160 2
void lh_node_stats(const _LHASH *lh, FILE *fp)
	{
d163 5
a167 4
	bp=BIO_new(BIO_s_file());
	if (bp == NULL) goto end;
	BIO_set_fp(bp,fp,BIO_NOCLOSE);
	lh_node_stats_bio(lh,bp);
d170 1
a170 1
	}
d172 3
a174 2
void lh_node_usage_stats(const _LHASH *lh, FILE *fp)
	{
d177 5
a181 4
	bp=BIO_new(BIO_s_file());
	if (bp == NULL) goto end;
	BIO_set_fp(bp,fp,BIO_NOCLOSE);
	lh_node_usage_stats_bio(lh,bp);
d184 1
a184 1
	}
d188 21
a208 20
void lh_stats_bio(const _LHASH *lh, BIO *out)
	{
	BIO_printf(out,"num_items             = %lu\n",lh->num_items);
	BIO_printf(out,"num_nodes             = %u\n",lh->num_nodes);
	BIO_printf(out,"num_alloc_nodes       = %u\n",lh->num_alloc_nodes);
	BIO_printf(out,"num_expands           = %lu\n",lh->num_expands);
	BIO_printf(out,"num_expand_reallocs   = %lu\n",
		   lh->num_expand_reallocs);
	BIO_printf(out,"num_contracts         = %lu\n",lh->num_contracts);
	BIO_printf(out,"num_contract_reallocs = %lu\n",
		   lh->num_contract_reallocs);
	BIO_printf(out,"num_hash_calls        = %lu\n",lh->num_hash_calls);
	BIO_printf(out,"num_comp_calls        = %lu\n",lh->num_comp_calls);
	BIO_printf(out,"num_insert            = %lu\n",lh->num_insert);
	BIO_printf(out,"num_replace           = %lu\n",lh->num_replace);
	BIO_printf(out,"num_delete            = %lu\n",lh->num_delete);
	BIO_printf(out,"num_no_delete         = %lu\n",lh->num_no_delete);
	BIO_printf(out,"num_retrieve          = %lu\n",lh->num_retrieve);
	BIO_printf(out,"num_retrieve_miss     = %lu\n",lh->num_retrieve_miss);
	BIO_printf(out,"num_hash_comps        = %lu\n",lh->num_hash_comps);
d210 4
a213 4
	BIO_printf(out,"p                     = %u\n",lh->p);
	BIO_printf(out,"pmax                  = %u\n",lh->pmax);
	BIO_printf(out,"up_load               = %lu\n",lh->up_load);
	BIO_printf(out,"down_load             = %lu\n",lh->down_load);
d215 1
a215 1
	}
d217 3
a219 2
void lh_node_stats_bio(const _LHASH *lh, BIO *out)
	{
d221 1
a221 1
	unsigned int i,num;
d223 2
a224 3
	for (i=0; i<lh->num_nodes; i++)
		{
		for (n=lh->b[i],num=0; n != NULL; n=n->next)
d226 1
a226 2
		BIO_printf(out,"node %6u -> %3u\n",i,num);
		}
d228 1
d230 3
a232 2
void lh_node_usage_stats_bio(const _LHASH *lh, BIO *out)
	{
d236 1
a236 1
	unsigned long total=0,n_used=0;
d238 2
a239 3
	for (i=0; i<lh->num_nodes; i++)
		{
		for (n=lh->b[i],num=0; n != NULL; n=n->next)
d241 1
a241 2
		if (num != 0)
			{
d243 1
a243 2
			total+=num;
			}
a244 8
	BIO_printf(out,"%lu nodes used out of %u\n",n_used,lh->num_nodes);
	BIO_printf(out,"%lu items\n",total);
	if (n_used == 0) return;
	BIO_printf(out,"load %d.%02d  actual load %d.%02d\n",
		   (int)(total/lh->num_nodes),
		   (int)((total%lh->num_nodes)*100/lh->num_nodes),
		   (int)(total/n_used),
		   (int)((total%n_used)*100/n_used));
d246 10
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d142 1
a142 1
void lh_stats(const LHASH *lh, FILE *fp)
d154 1
a154 1
void lh_node_stats(const LHASH *lh, FILE *fp)
d166 1
a166 1
void lh_node_usage_stats(const LHASH *lh, FILE *fp)
d180 1
a180 1
void lh_stats_bio(const LHASH *lh, BIO *out)
d208 1
a208 1
void lh_node_stats_bio(const LHASH *lh, BIO *out)
d221 1
a221 1
void lh_node_usage_stats_bio(const LHASH *lh, BIO *out)
@


1.5
log
@Trivial sprintf() -> snprintf() changes. ok deraadt@@
@
text
@d182 18
a199 48
	char buf[128];

	snprintf(buf,sizeof buf,"num_items             = %lu\n",lh->num_items);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_nodes             = %u\n",lh->num_nodes);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_alloc_nodes       = %u\n",
		 lh->num_alloc_nodes);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_expands           = %lu\n",
		 lh->num_expands);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_expand_reallocs   = %lu\n",
		 lh->num_expand_reallocs);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_contracts         = %lu\n",
		 lh->num_contracts);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_contract_reallocs = %lu\n",
		 lh->num_contract_reallocs);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_hash_calls        = %lu\n",
		 lh->num_hash_calls);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_comp_calls        = %lu\n",
		 lh->num_comp_calls);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_insert            = %lu\n",
		 lh->num_insert);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_replace           = %lu\n",
		 lh->num_replace);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_delete            = %lu\n",
		 lh->num_delete);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_no_delete         = %lu\n",
		 lh->num_no_delete);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_retrieve          = %lu\n",
		 lh->num_retrieve);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_retrieve_miss     = %lu\n",
		 lh->num_retrieve_miss);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"num_hash_comps        = %lu\n",
		 lh->num_hash_comps);
	BIO_puts(out,buf);
d201 4
a204 8
	snprintf(buf,sizeof buf,"p                     = %u\n",lh->p);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"pmax                  = %u\n",lh->pmax);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"up_load               = %lu\n",lh->up_load);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"down_load             = %lu\n",lh->down_load);
	BIO_puts(out,buf);
a211 1
	char buf[128];
d217 1
a217 2
		snprintf(buf,sizeof buf,"node %6u -> %3u\n",i,num);
		BIO_puts(out,buf);
a226 1
	char buf[128];
d238 2
a239 5
	snprintf(buf,sizeof buf,"%lu nodes used out of %u\n",n_used,
		 lh->num_nodes);
	BIO_puts(out,buf);
	snprintf(buf,sizeof buf,"%lu items\n",total);
	BIO_puts(out,buf);
d241 5
a245 6
	snprintf(buf,sizeof buf,"load %d.%02d  actual load %d.%02d\n",
		(int)(total/lh->num_nodes),
		(int)((total%lh->num_nodes)*100/lh->num_nodes),
		(int)(total/n_used),
		(int)((total%n_used)*100/n_used));
	BIO_puts(out,buf);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d184 1
a184 1
	sprintf(buf,"num_items             = %lu\n",lh->num_items);
d186 1
a186 1
	sprintf(buf,"num_nodes             = %u\n",lh->num_nodes);
d188 2
a189 1
	sprintf(buf,"num_alloc_nodes       = %u\n",lh->num_alloc_nodes);
d191 2
a192 1
	sprintf(buf,"num_expands           = %lu\n",lh->num_expands);
d194 2
a195 1
	sprintf(buf,"num_expand_reallocs   = %lu\n",lh->num_expand_reallocs);
d197 2
a198 1
	sprintf(buf,"num_contracts         = %lu\n",lh->num_contracts);
d200 2
a201 1
	sprintf(buf,"num_contract_reallocs = %lu\n",lh->num_contract_reallocs);
d203 2
a204 1
	sprintf(buf,"num_hash_calls        = %lu\n",lh->num_hash_calls);
d206 2
a207 1
	sprintf(buf,"num_comp_calls        = %lu\n",lh->num_comp_calls);
d209 2
a210 1
	sprintf(buf,"num_insert            = %lu\n",lh->num_insert);
d212 2
a213 1
	sprintf(buf,"num_replace           = %lu\n",lh->num_replace);
d215 2
a216 1
	sprintf(buf,"num_delete            = %lu\n",lh->num_delete);
d218 2
a219 1
	sprintf(buf,"num_no_delete         = %lu\n",lh->num_no_delete);
d221 2
a222 1
	sprintf(buf,"num_retrieve          = %lu\n",lh->num_retrieve);
d224 2
a225 1
	sprintf(buf,"num_retrieve_miss     = %lu\n",lh->num_retrieve_miss);
d227 2
a228 1
	sprintf(buf,"num_hash_comps        = %lu\n",lh->num_hash_comps);
d231 1
a231 1
	sprintf(buf,"p                     = %u\n",lh->p);
d233 1
a233 1
	sprintf(buf,"pmax                  = %u\n",lh->pmax);
d235 1
a235 1
	sprintf(buf,"up_load               = %lu\n",lh->up_load);
d237 1
a237 1
	sprintf(buf,"down_load             = %lu\n",lh->down_load);
d252 1
a252 1
		sprintf(buf,"node %6u -> %3u\n",i,num);
d275 2
a276 1
	sprintf(buf,"%lu nodes used out of %u\n",n_used,lh->num_nodes);
d278 1
a278 1
	sprintf(buf,"%lu items\n",total);
d281 1
a281 1
	sprintf(buf,"load %d.%02d  actual load %d.%02d\n",
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d66 1
a66 1
#ifndef NO_BIO
d71 1
a71 1
#ifdef NO_BIO
d91 1
a91 1
#ifdef DEBUG
d141 2
a142 2
#ifndef NO_FP_API
void lh_stats(LHASH *lh, FILE *fp)
d154 1
a154 1
void lh_node_stats(LHASH *lh, FILE *fp)
d166 1
a166 1
void lh_node_usage_stats(LHASH *lh, FILE *fp)
d180 1
a180 1
void lh_stats_bio(LHASH *lh, BIO *out)
d216 1
a216 1
#ifdef DEBUG
d228 1
a228 1
void lh_node_stats_bio(LHASH *lh, BIO *out)
d243 1
a243 1
void lh_node_usage_stats_bio(LHASH *lh, BIO *out)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d66 3
d71 1
a71 1
#ifndef HEADER_BIO_H
@


1.1
log
@Initial revision
@
text
@d66 1
a66 1
#include "lhash.h"
d70 1
a70 3
void lh_stats(lh, out)
LHASH *lh;
FILE *out;
d96 1
a96 3
void lh_node_stats(lh, out)
LHASH *lh;
FILE *out;
d109 1
a109 3
void lh_node_usage_stats(lh, out)
LHASH *lh;
FILE *out;
d139 1
a139 3
void lh_stats(lh,fp)
LHASH *lh;
FILE *fp;
d151 1
a151 3
void lh_node_stats(lh,fp)
LHASH *lh;
FILE *fp;
d163 1
a163 3
void lh_node_usage_stats(lh,fp)
LHASH *lh;
FILE *fp;
d177 1
a177 3
void lh_stats_bio(lh, out)
LHASH *lh;
BIO *out;
d225 1
a225 3
void lh_node_stats_bio(lh, out)
LHASH *lh;
BIO *out;
d240 1
a240 3
void lh_node_usage_stats_bio(lh, out)
LHASH *lh;
BIO *out;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d66 1
a66 4
#ifndef OPENSSL_NO_BIO
#include <openssl/bio.h>
#endif
#include <openssl/lhash.h>
d68 1
a68 1
#ifdef OPENSSL_NO_BIO
d70 3
a72 1
void lh_stats(LHASH *lh, FILE *out)
d90 1
a90 1
#if 0
d98 3
a100 1
void lh_node_stats(LHASH *lh, FILE *out)
d113 3
a115 1
void lh_node_usage_stats(LHASH *lh, FILE *out)
d144 4
a147 2
#ifndef OPENSSL_NO_FP_API
void lh_stats(const LHASH *lh, FILE *fp)
d159 3
a161 1
void lh_node_stats(const LHASH *lh, FILE *fp)
d173 3
a175 1
void lh_node_usage_stats(const LHASH *lh, FILE *fp)
d189 3
a191 1
void lh_stats_bio(const LHASH *lh, BIO *out)
d227 1
a227 1
#if 0
d239 3
a241 1
void lh_node_stats_bio(const LHASH *lh, BIO *out)
d256 3
a258 1
void lh_node_usage_stats_bio(const LHASH *lh, BIO *out)
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d182 34
a215 18
	BIO_printf(out,"num_items             = %lu\n",lh->num_items);
	BIO_printf(out,"num_nodes             = %u\n",lh->num_nodes);
	BIO_printf(out,"num_alloc_nodes       = %u\n",lh->num_alloc_nodes);
	BIO_printf(out,"num_expands           = %lu\n",lh->num_expands);
	BIO_printf(out,"num_expand_reallocs   = %lu\n",
		   lh->num_expand_reallocs);
	BIO_printf(out,"num_contracts         = %lu\n",lh->num_contracts);
	BIO_printf(out,"num_contract_reallocs = %lu\n",
		   lh->num_contract_reallocs);
	BIO_printf(out,"num_hash_calls        = %lu\n",lh->num_hash_calls);
	BIO_printf(out,"num_comp_calls        = %lu\n",lh->num_comp_calls);
	BIO_printf(out,"num_insert            = %lu\n",lh->num_insert);
	BIO_printf(out,"num_replace           = %lu\n",lh->num_replace);
	BIO_printf(out,"num_delete            = %lu\n",lh->num_delete);
	BIO_printf(out,"num_no_delete         = %lu\n",lh->num_no_delete);
	BIO_printf(out,"num_retrieve          = %lu\n",lh->num_retrieve);
	BIO_printf(out,"num_retrieve_miss     = %lu\n",lh->num_retrieve_miss);
	BIO_printf(out,"num_hash_comps        = %lu\n",lh->num_hash_comps);
d217 8
a224 4
	BIO_printf(out,"p                     = %u\n",lh->p);
	BIO_printf(out,"pmax                  = %u\n",lh->pmax);
	BIO_printf(out,"up_load               = %lu\n",lh->up_load);
	BIO_printf(out,"down_load             = %lu\n",lh->down_load);
d232 1
d238 2
a239 1
		BIO_printf(out,"node %6u -> %3u\n",i,num);
d249 1
d261 4
a264 2
	BIO_printf(out,"%lu nodes used out of %u\n",n_used,lh->num_nodes);
	BIO_printf(out,"%lu items\n",total);
d266 6
a271 5
	BIO_printf(out,"load %d.%02d  actual load %d.%02d\n",
		   (int)(total/lh->num_nodes),
		   (int)((total%lh->num_nodes)*100/lh->num_nodes),
		   (int)(total/n_used),
		   (int)((total%n_used)*100/n_used));
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d142 1
a142 1
void lh_stats(const _LHASH *lh, FILE *fp)
d154 1
a154 1
void lh_node_stats(const _LHASH *lh, FILE *fp)
d166 1
a166 1
void lh_node_usage_stats(const _LHASH *lh, FILE *fp)
d180 1
a180 1
void lh_stats_bio(const _LHASH *lh, BIO *out)
d208 1
a208 1
void lh_node_stats_bio(const _LHASH *lh, BIO *out)
d221 1
a221 1
void lh_node_usage_stats_bio(const _LHASH *lh, BIO *out)
@


