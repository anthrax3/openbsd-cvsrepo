head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	butholakala:1.6
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.6.0.16
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.12
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.10
	OPENBSD_5_3_BASE:1.6
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.1
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.09.26.17.38.41;	author jsing;	state Exp;
branches;
next	1.11;
commitid	vcLCgCdkLp5BCjQb;

1.11
date	2015.07.25.16.00.14;	author jsing;	state Exp;
branches;
next	1.10;
commitid	IQmUl7Av61G6tr84;

1.10
date	2015.02.09.16.03.11;	author jsing;	state Exp;
branches;
next	1.9;
commitid	xIhBiKP17QbaVYG2;

1.9
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.04.21.16.49.02;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.16;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.12.19;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.54;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.02;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Use ASN1_item_dup() instead of ASN1_dup().

ok bcook@@
@
text
@/* $OpenBSD: v3_genn.c,v 1.11 2015/07/25 16:00:14 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999-2008 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */


#include <stdio.h>

#include <openssl/asn1t.h>
#include <openssl/conf.h>
#include <openssl/x509v3.h>

static const ASN1_TEMPLATE OTHERNAME_seq_tt[] = {
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(OTHERNAME, type_id),
		.field_name = "type_id",
		.item = &ASN1_OBJECT_it,
	},
	/* Maybe have a true ANY DEFINED BY later */
	{
		.flags = ASN1_TFLG_EXPLICIT,
		.tag = 0,
		.offset = offsetof(OTHERNAME, value),
		.field_name = "value",
		.item = &ASN1_ANY_it,
	},
};

const ASN1_ITEM OTHERNAME_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = OTHERNAME_seq_tt,
	.tcount = sizeof(OTHERNAME_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(OTHERNAME),
	.sname = "OTHERNAME",
};


OTHERNAME *
d2i_OTHERNAME(OTHERNAME **a, const unsigned char **in, long len)
{
	return (OTHERNAME *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &OTHERNAME_it);
}

int
i2d_OTHERNAME(OTHERNAME *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &OTHERNAME_it);
}

OTHERNAME *
OTHERNAME_new(void)
{
	return (OTHERNAME *)ASN1_item_new(&OTHERNAME_it);
}

void
OTHERNAME_free(OTHERNAME *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &OTHERNAME_it);
}

static const ASN1_TEMPLATE EDIPARTYNAME_seq_tt[] = {
	{
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_OPTIONAL,
		.tag = 0,
		.offset = offsetof(EDIPARTYNAME, nameAssigner),
		.field_name = "nameAssigner",
		.item = &DIRECTORYSTRING_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_OPTIONAL,
		.tag = 1,
		.offset = offsetof(EDIPARTYNAME, partyName),
		.field_name = "partyName",
		.item = &DIRECTORYSTRING_it,
	},
};

const ASN1_ITEM EDIPARTYNAME_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = EDIPARTYNAME_seq_tt,
	.tcount = sizeof(EDIPARTYNAME_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(EDIPARTYNAME),
	.sname = "EDIPARTYNAME",
};


EDIPARTYNAME *
d2i_EDIPARTYNAME(EDIPARTYNAME **a, const unsigned char **in, long len)
{
	return (EDIPARTYNAME *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &EDIPARTYNAME_it);
}

int
i2d_EDIPARTYNAME(EDIPARTYNAME *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &EDIPARTYNAME_it);
}

EDIPARTYNAME *
EDIPARTYNAME_new(void)
{
	return (EDIPARTYNAME *)ASN1_item_new(&EDIPARTYNAME_it);
}

void
EDIPARTYNAME_free(EDIPARTYNAME *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &EDIPARTYNAME_it);
}

static const ASN1_TEMPLATE GENERAL_NAME_ch_tt[] = {
	{
		.flags = ASN1_TFLG_IMPLICIT,
		.tag = GEN_OTHERNAME,
		.offset = offsetof(GENERAL_NAME, d.otherName),
		.field_name = "d.otherName",
		.item = &OTHERNAME_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT,
		.tag = GEN_EMAIL,
		.offset = offsetof(GENERAL_NAME, d.rfc822Name),
		.field_name = "d.rfc822Name",
		.item = &ASN1_IA5STRING_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT,
		.tag = GEN_DNS,
		.offset = offsetof(GENERAL_NAME, d.dNSName),
		.field_name = "d.dNSName",
		.item = &ASN1_IA5STRING_it,
	},
	/* Don't decode this */
	{
		.flags = ASN1_TFLG_IMPLICIT,
		.tag = GEN_X400,
		.offset = offsetof(GENERAL_NAME, d.x400Address),
		.field_name = "d.x400Address",
		.item = &ASN1_SEQUENCE_it,
	},
	/* X509_NAME is a CHOICE type so use EXPLICIT */
	{
		.flags = ASN1_TFLG_EXPLICIT,
		.tag = GEN_DIRNAME,
		.offset = offsetof(GENERAL_NAME, d.directoryName),
		.field_name = "d.directoryName",
		.item = &X509_NAME_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT,
		.tag = GEN_EDIPARTY,
		.offset = offsetof(GENERAL_NAME, d.ediPartyName),
		.field_name = "d.ediPartyName",
		.item = &EDIPARTYNAME_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT,
		.tag = GEN_URI,
		.offset = offsetof(GENERAL_NAME, d.uniformResourceIdentifier),
		.field_name = "d.uniformResourceIdentifier",
		.item = &ASN1_IA5STRING_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT,
		.tag = GEN_IPADD,
		.offset = offsetof(GENERAL_NAME, d.iPAddress),
		.field_name = "d.iPAddress",
		.item = &ASN1_OCTET_STRING_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT,
		.tag = GEN_RID,
		.offset = offsetof(GENERAL_NAME, d.registeredID),
		.field_name = "d.registeredID",
		.item = &ASN1_OBJECT_it,
	},
};

const ASN1_ITEM GENERAL_NAME_it = {
	.itype = ASN1_ITYPE_CHOICE,
	.utype = offsetof(GENERAL_NAME, type),
	.templates = GENERAL_NAME_ch_tt,
	.tcount = sizeof(GENERAL_NAME_ch_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(GENERAL_NAME),
	.sname = "GENERAL_NAME",
};


GENERAL_NAME *
d2i_GENERAL_NAME(GENERAL_NAME **a, const unsigned char **in, long len)
{
	return (GENERAL_NAME *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &GENERAL_NAME_it);
}

int
i2d_GENERAL_NAME(GENERAL_NAME *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &GENERAL_NAME_it);
}

GENERAL_NAME *
GENERAL_NAME_new(void)
{
	return (GENERAL_NAME *)ASN1_item_new(&GENERAL_NAME_it);
}

void
GENERAL_NAME_free(GENERAL_NAME *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &GENERAL_NAME_it);
}

static const ASN1_TEMPLATE GENERAL_NAMES_item_tt = {
	.flags = ASN1_TFLG_SEQUENCE_OF,
	.tag = 0,
	.offset = 0,
	.field_name = "GeneralNames",
	.item = &GENERAL_NAME_it,
};

const ASN1_ITEM GENERAL_NAMES_it = {
	.itype = ASN1_ITYPE_PRIMITIVE,
	.utype = -1,
	.templates = &GENERAL_NAMES_item_tt,
	.tcount = 0,
	.funcs = NULL,
	.size = 0,
	.sname = "GENERAL_NAMES",
};


GENERAL_NAMES *
d2i_GENERAL_NAMES(GENERAL_NAMES **a, const unsigned char **in, long len)
{
	return (GENERAL_NAMES *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &GENERAL_NAMES_it);
}

int
i2d_GENERAL_NAMES(GENERAL_NAMES *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &GENERAL_NAMES_it);
}

GENERAL_NAMES *
GENERAL_NAMES_new(void)
{
	return (GENERAL_NAMES *)ASN1_item_new(&GENERAL_NAMES_it);
}

void
GENERAL_NAMES_free(GENERAL_NAMES *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &GENERAL_NAMES_it);
}

GENERAL_NAME *
GENERAL_NAME_dup(GENERAL_NAME *a)
{
	return ASN1_item_dup(&GENERAL_NAME_it, a);
}

/* Returns 0 if they are equal, != 0 otherwise. */
int
GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)
{
	int result = -1;

	if (!a || !b || a->type != b->type)
		return -1;
	switch (a->type) {
	case GEN_X400:
	case GEN_EDIPARTY:
		result = ASN1_TYPE_cmp(a->d.other, b->d.other);
		break;

	case GEN_OTHERNAME:
		result = OTHERNAME_cmp(a->d.otherName, b->d.otherName);
		break;

	case GEN_EMAIL:
	case GEN_DNS:
	case GEN_URI:
		result = ASN1_STRING_cmp(a->d.ia5, b->d.ia5);
		break;

	case GEN_DIRNAME:
		result = X509_NAME_cmp(a->d.dirn, b->d.dirn);
		break;

	case GEN_IPADD:
		result = ASN1_OCTET_STRING_cmp(a->d.ip, b->d.ip);
		break;

	case GEN_RID:
		result = OBJ_cmp(a->d.rid, b->d.rid);
		break;
	}
	return result;
}

/* Returns 0 if they are equal, != 0 otherwise. */
int
OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b)
{
	int result = -1;

	if (!a || !b)
		return -1;
	/* Check their type first. */
	if ((result = OBJ_cmp(a->type_id, b->type_id)) != 0)
		return result;
	/* Check the value. */
	result = ASN1_TYPE_cmp(a->value, b->value);
	return result;
}

void
GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value)
{
	switch (type) {
	case GEN_X400:
	case GEN_EDIPARTY:
		a->d.other = value;
		break;

	case GEN_OTHERNAME:
		a->d.otherName = value;
		break;

	case GEN_EMAIL:
	case GEN_DNS:
	case GEN_URI:
		a->d.ia5 = value;
		break;

	case GEN_DIRNAME:
		a->d.dirn = value;
		break;

	case GEN_IPADD:
		a->d.ip = value;
		break;

	case GEN_RID:
		a->d.rid = value;
		break;
	}
	a->type = type;
}

void *
GENERAL_NAME_get0_value(GENERAL_NAME *a, int *ptype)
{
	if (ptype)
		*ptype = a->type;
	switch (a->type) {
	case GEN_X400:
	case GEN_EDIPARTY:
		return a->d.other;

	case GEN_OTHERNAME:
		return a->d.otherName;

	case GEN_EMAIL:
	case GEN_DNS:
	case GEN_URI:
		return a->d.ia5;

	case GEN_DIRNAME:
		return a->d.dirn;

	case GEN_IPADD:
		return a->d.ip;

	case GEN_RID:
		return a->d.rid;

	default:
		return NULL;
	}
}

int
GENERAL_NAME_set0_othername(GENERAL_NAME *gen, ASN1_OBJECT *oid,
    ASN1_TYPE *value)
{
	OTHERNAME *oth;

	oth = OTHERNAME_new();
	if (!oth)
		return 0;
	oth->type_id = oid;
	oth->value = value;
	GENERAL_NAME_set0_value(gen, GEN_OTHERNAME, oth);
	return 1;
}

int
GENERAL_NAME_get0_otherName(GENERAL_NAME *gen, ASN1_OBJECT **poid,
    ASN1_TYPE **pvalue)
{
	if (gen->type != GEN_OTHERNAME)
		return 0;
	if (poid)
		*poid = gen->d.otherName->type_id;
	if (pvalue)
		*pvalue = gen->d.otherName->value;
	return 1;
}
@


1.11
log
@Expand ASN.1 template macros - the generated assembly only differs by
changes to line numbers.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_genn.c,v 1.10 2015/02/09 16:03:11 jsing Exp $ */
d324 1
a324 2
	return (GENERAL_NAME *)ASN1_dup((i2d_of_void *)i2d_GENERAL_NAME,
	    (d2i_of_void *)d2i_GENERAL_NAME, (char *)a);
@


1.10
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_genn.c,v 1.9 2014/07/11 08:44:49 jsing Exp $ */
d66 8
a73 2
ASN1_SEQUENCE(OTHERNAME) = {
	ASN1_SIMPLE(OTHERNAME, type_id, ASN1_OBJECT),
d75 18
a92 2
	ASN1_EXP(OTHERNAME, value, ASN1_ANY, 0)
} ASN1_SEQUENCE_END(OTHERNAME)
d120 26
a145 4
ASN1_SEQUENCE(EDIPARTYNAME) = {
	ASN1_IMP_OPT(EDIPARTYNAME, nameAssigner, DIRECTORYSTRING, 0),
	ASN1_IMP_OPT(EDIPARTYNAME, partyName, DIRECTORYSTRING, 1)
} ASN1_SEQUENCE_END(EDIPARTYNAME)
d173 22
a194 4
ASN1_CHOICE(GENERAL_NAME) = {
	ASN1_IMP(GENERAL_NAME, d.otherName, OTHERNAME, GEN_OTHERNAME),
	ASN1_IMP(GENERAL_NAME, d.rfc822Name, ASN1_IA5STRING, GEN_EMAIL),
	ASN1_IMP(GENERAL_NAME, d.dNSName, ASN1_IA5STRING, GEN_DNS),
d196 7
a202 1
	ASN1_IMP(GENERAL_NAME, d.x400Address, ASN1_SEQUENCE, GEN_X400),
d204 46
a249 6
	ASN1_EXP(GENERAL_NAME, d.directoryName, X509_NAME, GEN_DIRNAME),
	ASN1_IMP(GENERAL_NAME, d.ediPartyName, EDIPARTYNAME, GEN_EDIPARTY),
	ASN1_IMP(GENERAL_NAME, d.uniformResourceIdentifier, ASN1_IA5STRING, GEN_URI),
	ASN1_IMP(GENERAL_NAME, d.iPAddress, ASN1_OCTET_STRING, GEN_IPADD),
	ASN1_IMP(GENERAL_NAME, d.registeredID, ASN1_OBJECT, GEN_RID)
} ASN1_CHOICE_END(GENERAL_NAME)
d277 17
a293 3
ASN1_ITEM_TEMPLATE(GENERAL_NAMES) =
    ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, GeneralNames, GENERAL_NAME)
ASN1_ITEM_TEMPLATE_END(GENERAL_NAMES)
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_genn.c,v 1.8 2014/06/12 15:49:31 deraadt Exp $ */
d72 25
a96 1
IMPLEMENT_ASN1_FUNCTIONS(OTHERNAME)
d103 25
a127 1
IMPLEMENT_ASN1_FUNCTIONS(EDIPARTYNAME)
d143 25
a167 1
IMPLEMENT_ASN1_FUNCTIONS(GENERAL_NAME)
d173 25
a197 1
IMPLEMENT_ASN1_FUNCTIONS(GENERAL_NAMES)
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d61 1
a61 1
#include "cryptlib.h"
@


1.7
log
@KNF.
@
text
@d1 1
a1 1
/* v3_genn.c */
@


1.6
log
@resolve conflicts, fix local changes
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d97 2
a98 2
ASN1_ITEM_TEMPLATE(GENERAL_NAMES) = 
	ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, GeneralNames, GENERAL_NAME)
d103 6
a108 6
GENERAL_NAME *GENERAL_NAME_dup(GENERAL_NAME *a)
	{
	return (GENERAL_NAME *) ASN1_dup((i2d_of_void *) i2d_GENERAL_NAME,
					 (d2i_of_void *) d2i_GENERAL_NAME,
					 (char *) a);
	}
d111 3
a113 2
int GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)
	{
d116 3
a118 3
	if (!a || !b || a->type != b->type) return -1;
	switch(a->type)
		{
d141 1
a141 1
	
d145 1
a145 1
		}
d147 1
a147 1
	}
d150 3
a152 2
int OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b)
	{
d155 2
a156 1
	if (!a || !b) return -1;
d163 1
a163 1
	}
d165 4
a168 4
void GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value)
	{
	switch(type)
		{
d191 1
a191 1
	
d195 1
a195 1
		}
d197 1
a197 1
	}
d199 3
a201 2
void *GENERAL_NAME_get0_value(GENERAL_NAME *a, int *ptype)
	{
d204 1
a204 2
	switch(a->type)
		{
d222 1
a222 1
	
a227 1
		}
d229 1
d231 4
a234 3
int GENERAL_NAME_set0_othername(GENERAL_NAME *gen,
				ASN1_OBJECT *oid, ASN1_TYPE *value)
	{
d236 1
d244 1
a244 1
	}
d246 4
a249 3
int GENERAL_NAME_get0_otherName(GENERAL_NAME *gen, 
				ASN1_OBJECT **poid, ASN1_TYPE **pvalue)
	{
d257 1
a257 2
	}

@


1.5
log
@resolve conflicts
@
text
@d6 1
a6 1
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
d102 151
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d62 1
a62 2
#include <openssl/asn1.h>
#include <openssl/asn1_mac.h>
d66 34
a99 224
int i2d_GENERAL_NAME(GENERAL_NAME *a, unsigned char **pp)
{
	unsigned char *p;
	int ret;

	ret = 0;

	/* Save the location of initial TAG */
	if(pp) p = *pp;
	else p = NULL;

	/* GEN_DNAME needs special treatment because of EXPLICIT tag */

	if(a->type == GEN_DIRNAME) {
		int v = 0;
		M_ASN1_I2D_len_EXP_opt(a->d.dirn, i2d_X509_NAME, 4, v);
		if(!p) return ret;
		M_ASN1_I2D_put_EXP_opt(a->d.dirn, i2d_X509_NAME, 4, v);
		*pp = p;
		return ret;
	}

	switch(a->type) {

		case GEN_X400:
		case GEN_EDIPARTY:
		ret = i2d_ASN1_TYPE(a->d.other, pp);
		break;

		case GEN_OTHERNAME:
		ret = i2d_OTHERNAME(a->d.otherName, pp);
		break;

		case GEN_EMAIL:
		case GEN_DNS:
		case GEN_URI:
		ret = i2d_ASN1_IA5STRING(a->d.ia5, pp);
		break;

		case GEN_IPADD:
		ret = i2d_ASN1_OCTET_STRING(a->d.ip, pp);
		break;
	
		case GEN_RID:
		ret = i2d_ASN1_OBJECT(a->d.rid, pp);
		break;
	}
	/* Replace TAG with IMPLICIT value */
	if(p) *p = (*p & V_ASN1_CONSTRUCTED) | a->type;
	return ret;
}

GENERAL_NAME *GENERAL_NAME_new()
{
	GENERAL_NAME *ret=NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, GENERAL_NAME);
	ret->type = -1;
	ret->d.ptr = NULL;
	return (ret);
	M_ASN1_New_Error(ASN1_F_GENERAL_NAME_NEW);
}

GENERAL_NAME *d2i_GENERAL_NAME(GENERAL_NAME **a, unsigned char **pp,
								 long length)
{
	unsigned char _tmp;
	M_ASN1_D2I_vars(a,GENERAL_NAME *,GENERAL_NAME_new);
	M_ASN1_D2I_Init();
	c.slen = length;

	_tmp = M_ASN1_next;
	ret->type = _tmp & ~V_ASN1_CONSTRUCTED;

	switch(ret->type) {
		/* Just put these in a "blob" for now */
		case GEN_X400:
		case GEN_EDIPARTY:
		M_ASN1_D2I_get_imp(ret->d.other, d2i_ASN1_TYPE,V_ASN1_SEQUENCE);
		break;

		case GEN_OTHERNAME:
		M_ASN1_D2I_get_imp(ret->d.otherName, d2i_OTHERNAME,V_ASN1_SEQUENCE);
		break;

		case GEN_EMAIL:
		case GEN_DNS:
		case GEN_URI:
		M_ASN1_D2I_get_imp(ret->d.ia5, d2i_ASN1_IA5STRING,
							V_ASN1_IA5STRING);
		break;

		case GEN_DIRNAME:
		M_ASN1_D2I_get_EXP_opt(ret->d.dirn, d2i_X509_NAME, 4);
		break;

		case GEN_IPADD:
		M_ASN1_D2I_get_imp(ret->d.ip, d2i_ASN1_OCTET_STRING,
							V_ASN1_OCTET_STRING);
		break;
	
		case GEN_RID:
		M_ASN1_D2I_get_imp(ret->d.rid, d2i_ASN1_OBJECT,V_ASN1_OBJECT);
		break;

		default:
		c.error = ASN1_R_BAD_TAG;
		goto err;
	}

	c.slen = 0;
	M_ASN1_D2I_Finish(a, GENERAL_NAME_free, ASN1_F_D2I_GENERAL_NAME);
}

void GENERAL_NAME_free(GENERAL_NAME *a)
{
	if (a == NULL) return;
	switch(a->type) {
		case GEN_X400:
		case GEN_EDIPARTY:
		ASN1_TYPE_free(a->d.other);
		break;

		case GEN_OTHERNAME:
		OTHERNAME_free(a->d.otherName);
		break;

		case GEN_EMAIL:
		case GEN_DNS:
		case GEN_URI:

		M_ASN1_IA5STRING_free(a->d.ia5);
		break;

		case GEN_DIRNAME:
		X509_NAME_free(a->d.dirn);
		break;

		case GEN_IPADD:
		M_ASN1_OCTET_STRING_free(a->d.ip);
		break;
	
		case GEN_RID:
		ASN1_OBJECT_free(a->d.rid);
		break;

	}
	OPENSSL_free (a);
}

/* Now the GeneralNames versions: a SEQUENCE OF GeneralName. These are needed as
 * explicit functions.
 */

STACK_OF(GENERAL_NAME) *GENERAL_NAMES_new()
{
	return sk_GENERAL_NAME_new_null();
}

void GENERAL_NAMES_free(STACK_OF(GENERAL_NAME) *a)
{
	sk_GENERAL_NAME_pop_free(a, GENERAL_NAME_free);
}

STACK_OF(GENERAL_NAME) *d2i_GENERAL_NAMES(STACK_OF(GENERAL_NAME) **a,
					 unsigned char **pp, long length)
{
return d2i_ASN1_SET_OF_GENERAL_NAME(a, pp, length, d2i_GENERAL_NAME,
			 GENERAL_NAME_free, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
}

int i2d_GENERAL_NAMES(STACK_OF(GENERAL_NAME) *a, unsigned char **pp)
{
return i2d_ASN1_SET_OF_GENERAL_NAME(a, pp, i2d_GENERAL_NAME, V_ASN1_SEQUENCE,
						 V_ASN1_UNIVERSAL, IS_SEQUENCE);
}

IMPLEMENT_STACK_OF(GENERAL_NAME)
IMPLEMENT_ASN1_SET_OF(GENERAL_NAME)

int i2d_OTHERNAME(OTHERNAME *a, unsigned char **pp)
{
	int v = 0;
	M_ASN1_I2D_vars(a);

	M_ASN1_I2D_len(a->type_id, i2d_ASN1_OBJECT);
	M_ASN1_I2D_len_EXP_opt(a->value, i2d_ASN1_TYPE, 0, v);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put(a->type_id, i2d_ASN1_OBJECT);
	M_ASN1_I2D_put_EXP_opt(a->value, i2d_ASN1_TYPE, 0, v);

	M_ASN1_I2D_finish();
}

OTHERNAME *OTHERNAME_new(void)
{
	OTHERNAME *ret=NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, OTHERNAME);
	ret->type_id = OBJ_nid2obj(NID_undef);
	M_ASN1_New(ret->value, ASN1_TYPE_new);
	return (ret);
	M_ASN1_New_Error(ASN1_F_OTHERNAME_NEW);
}

OTHERNAME *d2i_OTHERNAME(OTHERNAME **a, unsigned char **pp, long length)
{
	M_ASN1_D2I_vars(a,OTHERNAME *,OTHERNAME_new);
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->type_id, d2i_ASN1_OBJECT);
	M_ASN1_D2I_get_EXP_opt(ret->value, d2i_ASN1_TYPE, 0);
	M_ASN1_D2I_Finish(a, OTHERNAME_free, ASN1_F_D2I_OTHERNAME);
}

void OTHERNAME_free(OTHERNAME *a)
{
	if (a == NULL) return;
	ASN1_OBJECT_free(a->type_id);
	ASN1_TYPE_free(a->value);
	OPENSSL_free (a);
}
d101 1
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d214 1
a214 1
	Free (a);
d223 1
a223 1
	return sk_GENERAL_NAME_new(NULL);
d289 1
a289 1
	Free (a);
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@a90 1
		case GEN_OTHERNAME:
d96 4
a142 1
		case GEN_OTHERNAME:
d148 4
a184 1
		case GEN_OTHERNAME:
d190 4
d198 1
a198 1
		ASN1_IA5STRING_free(a->d.ia5);
d206 1
a206 1
		ASN1_OCTET_STRING_free(a->d.ip);
d214 1
a214 1
	Free ((char *)a);
d217 2
a218 2
/* Now the GeneralNames versions: a SEQUENCE OF GeneralName These are needed as
 * an explicit functions.
d246 45
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d62 2
a63 1
#include <openssl/asn1t.h>
d67 170
a236 34
ASN1_SEQUENCE(OTHERNAME) = {
	ASN1_SIMPLE(OTHERNAME, type_id, ASN1_OBJECT),
	/* Maybe have a true ANY DEFINED BY later */
	ASN1_EXP(OTHERNAME, value, ASN1_ANY, 0)
} ASN1_SEQUENCE_END(OTHERNAME)

IMPLEMENT_ASN1_FUNCTIONS(OTHERNAME)

ASN1_SEQUENCE(EDIPARTYNAME) = {
	ASN1_IMP_OPT(EDIPARTYNAME, nameAssigner, DIRECTORYSTRING, 0),
	ASN1_IMP_OPT(EDIPARTYNAME, partyName, DIRECTORYSTRING, 1)
} ASN1_SEQUENCE_END(EDIPARTYNAME)

IMPLEMENT_ASN1_FUNCTIONS(EDIPARTYNAME)

ASN1_CHOICE(GENERAL_NAME) = {
	ASN1_IMP(GENERAL_NAME, d.otherName, OTHERNAME, GEN_OTHERNAME),
	ASN1_IMP(GENERAL_NAME, d.rfc822Name, ASN1_IA5STRING, GEN_EMAIL),
	ASN1_IMP(GENERAL_NAME, d.dNSName, ASN1_IA5STRING, GEN_DNS),
	/* Don't decode this */
	ASN1_IMP(GENERAL_NAME, d.x400Address, ASN1_SEQUENCE, GEN_X400),
	/* X509_NAME is a CHOICE type so use EXPLICIT */
	ASN1_EXP(GENERAL_NAME, d.directoryName, X509_NAME, GEN_DIRNAME),
	ASN1_IMP(GENERAL_NAME, d.ediPartyName, EDIPARTYNAME, GEN_EDIPARTY),
	ASN1_IMP(GENERAL_NAME, d.uniformResourceIdentifier, ASN1_IA5STRING, GEN_URI),
	ASN1_IMP(GENERAL_NAME, d.iPAddress, ASN1_OCTET_STRING, GEN_IPADD),
	ASN1_IMP(GENERAL_NAME, d.registeredID, ASN1_OBJECT, GEN_RID)
} ASN1_CHOICE_END(GENERAL_NAME)

IMPLEMENT_ASN1_FUNCTIONS(GENERAL_NAME)

ASN1_ITEM_TEMPLATE(GENERAL_NAMES) = 
	ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, GeneralNames, GENERAL_NAME)
ASN1_ITEM_TEMPLATE_END(GENERAL_NAMES)
a237 1
IMPLEMENT_ASN1_FUNCTIONS(GENERAL_NAMES)
@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d6 1
a6 1
 * Copyright (c) 1999-2008 The OpenSSL Project.  All rights reserved.
a101 151

GENERAL_NAME *GENERAL_NAME_dup(GENERAL_NAME *a)
	{
	return (GENERAL_NAME *) ASN1_dup((i2d_of_void *) i2d_GENERAL_NAME,
					 (d2i_of_void *) d2i_GENERAL_NAME,
					 (char *) a);
	}

/* Returns 0 if they are equal, != 0 otherwise. */
int GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)
	{
	int result = -1;

	if (!a || !b || a->type != b->type) return -1;
	switch(a->type)
		{
	case GEN_X400:
	case GEN_EDIPARTY:
		result = ASN1_TYPE_cmp(a->d.other, b->d.other);
		break;

	case GEN_OTHERNAME:
		result = OTHERNAME_cmp(a->d.otherName, b->d.otherName);
		break;

	case GEN_EMAIL:
	case GEN_DNS:
	case GEN_URI:
		result = ASN1_STRING_cmp(a->d.ia5, b->d.ia5);
		break;

	case GEN_DIRNAME:
		result = X509_NAME_cmp(a->d.dirn, b->d.dirn);
		break;

	case GEN_IPADD:
		result = ASN1_OCTET_STRING_cmp(a->d.ip, b->d.ip);
		break;
	
	case GEN_RID:
		result = OBJ_cmp(a->d.rid, b->d.rid);
		break;
		}
	return result;
	}

/* Returns 0 if they are equal, != 0 otherwise. */
int OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b)
	{
	int result = -1;

	if (!a || !b) return -1;
	/* Check their type first. */
	if ((result = OBJ_cmp(a->type_id, b->type_id)) != 0)
		return result;
	/* Check the value. */
	result = ASN1_TYPE_cmp(a->value, b->value);
	return result;
	}

void GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value)
	{
	switch(type)
		{
	case GEN_X400:
	case GEN_EDIPARTY:
		a->d.other = value;
		break;

	case GEN_OTHERNAME:
		a->d.otherName = value;
		break;

	case GEN_EMAIL:
	case GEN_DNS:
	case GEN_URI:
		a->d.ia5 = value;
		break;

	case GEN_DIRNAME:
		a->d.dirn = value;
		break;

	case GEN_IPADD:
		a->d.ip = value;
		break;
	
	case GEN_RID:
		a->d.rid = value;
		break;
		}
	a->type = type;
	}

void *GENERAL_NAME_get0_value(GENERAL_NAME *a, int *ptype)
	{
	if (ptype)
		*ptype = a->type;
	switch(a->type)
		{
	case GEN_X400:
	case GEN_EDIPARTY:
		return a->d.other;

	case GEN_OTHERNAME:
		return a->d.otherName;

	case GEN_EMAIL:
	case GEN_DNS:
	case GEN_URI:
		return a->d.ia5;

	case GEN_DIRNAME:
		return a->d.dirn;

	case GEN_IPADD:
		return a->d.ip;
	
	case GEN_RID:
		return a->d.rid;

	default:
		return NULL;
		}
	}

int GENERAL_NAME_set0_othername(GENERAL_NAME *gen,
				ASN1_OBJECT *oid, ASN1_TYPE *value)
	{
	OTHERNAME *oth;
	oth = OTHERNAME_new();
	if (!oth)
		return 0;
	oth->type_id = oid;
	oth->value = value;
	GENERAL_NAME_set0_value(gen, GEN_OTHERNAME, oth);
	return 1;
	}

int GENERAL_NAME_get0_otherName(GENERAL_NAME *gen, 
				ASN1_OBJECT **poid, ASN1_TYPE **pvalue)
	{
	if (gen->type != GEN_OTHERNAME)
		return 0;
	if (poid)
		*poid = gen->d.otherName->type_id;
	if (pvalue)
		*pvalue = gen->d.otherName->value;
	return 1;
	}

@


