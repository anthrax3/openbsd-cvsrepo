head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	butholakala:1.1.1.3
	openssl_1_0_1_g:1.1.1.3
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.16
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.12
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.6
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.8
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.07.18.00.01.05;	author beck;	state Exp;
branches;
next	1.5;
commitid	Hg4lQHnvEjZmBzNl;

1.5
date	2014.07.23.20.49.52;	author miod;	state Exp;
branches;
next	1.4;
commitid	OtFV9utUQerqWUXA;

1.4
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2014.04.21.08.41.26;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.14.00;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fix leak found by coverity, issue 78897 - which also brough to
light that the child counting was broken in the original code.
this is still fugly, but this preserves all the existing goo.
ok doug@@
@
text
@/* $OpenBSD: pcy_node.c,v 1.5 2014/07/23 20:49:52 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2004.
 */
/* ====================================================================
 * Copyright (c) 2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/asn1.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

#include "pcy_int.h"

static int
node_cmp(const X509_POLICY_NODE * const *a, const X509_POLICY_NODE * const *b)
{
	return OBJ_cmp((*a)->data->valid_policy, (*b)->data->valid_policy);
}

STACK_OF(X509_POLICY_NODE) *policy_node_cmp_new(void)
{
	return sk_X509_POLICY_NODE_new(node_cmp);
}

X509_POLICY_NODE *
tree_find_sk(STACK_OF(X509_POLICY_NODE) *nodes, const ASN1_OBJECT *id)
{
	X509_POLICY_DATA n;
	X509_POLICY_NODE l;
	int idx;

	n.valid_policy = (ASN1_OBJECT *)id;
	l.data = &n;

	idx = sk_X509_POLICY_NODE_find(nodes, &l);
	if (idx == -1)
		return NULL;

	return sk_X509_POLICY_NODE_value(nodes, idx);
}

X509_POLICY_NODE *
level_find_node(const X509_POLICY_LEVEL *level, const X509_POLICY_NODE *parent,
    const ASN1_OBJECT *id)
{
	X509_POLICY_NODE *node;
	int i;

	for (i = 0; i < sk_X509_POLICY_NODE_num(level->nodes); i++) {
		node = sk_X509_POLICY_NODE_value(level->nodes, i);
		if (node->parent == parent) {
			if (!OBJ_cmp(node->data->valid_policy, id))
				return node;
		}
	}
	return NULL;
}


int
level_add_node(X509_POLICY_LEVEL *level, const X509_POLICY_DATA *data,
    X509_POLICY_NODE *parent, X509_POLICY_TREE *tree, X509_POLICY_NODE **nodep)
{
	X509_POLICY_NODE *node = NULL;

	if (level) {
		node = malloc(sizeof(X509_POLICY_NODE));
		if (!node)
			goto node_error;
		node->data = data;
		node->parent = parent;
		node->nchild = 0;
		if (OBJ_obj2nid(data->valid_policy) == NID_any_policy) {
			if (level->anyPolicy)
				goto node_error;
			level->anyPolicy = node;
			if (parent)
				parent->nchild++;
		} else {

			if (!level->nodes)
				level->nodes = policy_node_cmp_new();
			if (!level->nodes)
				goto node_error;
			if (!sk_X509_POLICY_NODE_push(level->nodes, node))
				goto node_error;
			if (parent)
				parent->nchild++;
		}
	}

	if (tree) {
		if (!tree->extra_data)
			tree->extra_data = sk_X509_POLICY_DATA_new_null();
		if (!tree->extra_data)
			goto node_error_cond;
		if (!sk_X509_POLICY_DATA_push(tree->extra_data, data))
			goto node_error_cond;
	}

	if (nodep)
		*nodep = node;

	return 1;

node_error_cond:
	if (level)
		node = NULL;
node_error:
	policy_node_free(node);
	node = NULL;
	if (nodep)
		*nodep = node;
	return 0;
}

void
policy_node_free(X509_POLICY_NODE *node)
{
	free(node);
}

/* See if a policy node matches a policy OID. If mapping enabled look through
 * expected policy set otherwise just valid policy.
 */

int
policy_node_match(const X509_POLICY_LEVEL *lvl, const X509_POLICY_NODE *node,
    const ASN1_OBJECT *oid)
{
	int i;
	ASN1_OBJECT *policy_oid;
	const X509_POLICY_DATA *x = node->data;

	if ((lvl->flags & X509_V_FLAG_INHIBIT_MAP) ||
	    !(x->flags & POLICY_DATA_FLAG_MAP_MASK)) {
		if (!OBJ_cmp(x->valid_policy, oid))
			return 1;
		return 0;
	}

	for (i = 0; i < sk_ASN1_OBJECT_num(x->expected_policy_set); i++) {
		policy_oid = sk_ASN1_OBJECT_value(x->expected_policy_set, i);
		if (!OBJ_cmp(policy_oid, oid))
			return 1;
	}
	return 0;
}
@


1.5
log
@level_add_node(): if a memory allocation failure causes us to attempt to clean
up and return failure, be sure the cleanup work does NOT free objects which
are still being referenced by other objects.

ok guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcy_node.c,v 1.4 2014/06/12 15:49:31 deraadt Exp $ */
d110 2
a111 1
X509_POLICY_NODE *
d113 1
a113 1
    X509_POLICY_NODE *parent, X509_POLICY_TREE *tree)
d115 1
a115 1
	X509_POLICY_NODE *node;
a116 6
	node = malloc(sizeof(X509_POLICY_NODE));
	if (!node)
		return NULL;
	node->data = data;
	node->parent = parent;
	node->nchild = 0;
d118 6
d128 2
d138 2
d152 2
a153 2
	if (parent)
		parent->nchild++;
d155 1
a155 1
	return node;
d162 4
a165 1
	return NULL;
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d142 1
a142 1
			goto node_error;
d144 1
a144 1
			goto node_error;
d152 3
d157 1
a157 1
	return 0;
@


1.3
log
@KNF.
@
text
@d1 1
a1 1
/* pcy_node.c */
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d65 3
a67 3
static int node_cmp(const X509_POLICY_NODE * const *a,
			const X509_POLICY_NODE * const *b)
	{
d69 1
a69 1
	}
d72 1
a72 1
	{
d74 1
a74 1
	}
d76 3
a78 3
X509_POLICY_NODE *tree_find_sk(STACK_OF(X509_POLICY_NODE) *nodes,
					const ASN1_OBJECT *id)
	{
d91 1
d93 4
a96 6
	}

X509_POLICY_NODE *level_find_node(const X509_POLICY_LEVEL *level,
					const X509_POLICY_NODE *parent,	
					const ASN1_OBJECT *id)
	{
d99 2
a100 2
	for (i = 0; i < sk_X509_POLICY_NODE_num(level->nodes); i++)
		{
d102 1
a102 2
		if (node->parent == parent)
			{
a104 1
			}
d106 1
d108 1
a108 1
	}
d110 4
a113 5
X509_POLICY_NODE *level_add_node(X509_POLICY_LEVEL *level,
			const X509_POLICY_DATA *data,
			X509_POLICY_NODE *parent,
			X509_POLICY_TREE *tree)
	{
d115 1
d122 2
a123 4
	if (level)
		{
		if (OBJ_obj2nid(data->valid_policy) == NID_any_policy)
			{
d127 1
a127 3
			}
		else
			{
a134 1
			}
d136 1
d138 1
a138 2
	if (tree)
		{
d140 1
a140 1
			 tree->extra_data = sk_X509_POLICY_DATA_new_null();
d145 1
a145 1
		}
d152 1
a152 1
	node_error:
d155 1
d157 3
a159 4
	}

void policy_node_free(X509_POLICY_NODE *node)
	{
d161 1
a161 1
	}
d167 4
a170 3
int policy_node_match(const X509_POLICY_LEVEL *lvl,
		      const X509_POLICY_NODE *node, const ASN1_OBJECT *oid)
	{
d175 2
a176 3
	if (	    (lvl->flags & X509_V_FLAG_INHIBIT_MAP)
		|| !(x->flags & POLICY_DATA_FLAG_MAP_MASK))
		{
d180 1
a180 1
		}
d182 1
a182 2
	for (i = 0; i < sk_ASN1_OBJECT_num(x->expected_policy_set); i++)
		{
d186 1
a186 1
		}
d188 1
a188 2

	}
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
d95 1
d98 12
a109 1
	return tree_find_sk(level->nodes, id);
d113 1
a113 1
			X509_POLICY_DATA *data,
d118 1
a118 1
	node = OPENSSL_malloc(sizeof(X509_POLICY_NODE));
d167 1
a167 1
	OPENSSL_free(node);
d170 26
d197 1
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@a94 1
					const X509_POLICY_NODE *parent,	
d97 1
a97 12
	X509_POLICY_NODE *node;
	int i;
	for (i = 0; i < sk_X509_POLICY_NODE_num(level->nodes); i++)
		{
		node = sk_X509_POLICY_NODE_value(level->nodes, i);
		if (node->parent == parent)
			{
			if (!OBJ_cmp(node->data->valid_policy, id))
				return node;
			}
		}
	return NULL;
d101 1
a101 1
			const X509_POLICY_DATA *data,
a157 10
/* See if a policy node matches a policy OID. If mapping enabled look through
 * expected policy set otherwise just valid policy.
 */

int policy_node_match(const X509_POLICY_LEVEL *lvl,
		      const X509_POLICY_NODE *node, const ASN1_OBJECT *oid)
	{
	int i;
	ASN1_OBJECT *policy_oid;
	const X509_POLICY_DATA *x = node->data;
a158 17
	if (	    (lvl->flags & X509_V_FLAG_INHIBIT_MAP)
		|| !(x->flags & POLICY_DATA_FLAG_MAP_MASK))
		{
		if (!OBJ_cmp(x->valid_policy, oid))
			return 1;
		return 0;
		}

	for (i = 0; i < sk_ASN1_OBJECT_num(x->expected_policy_set); i++)
		{
		policy_oid = sk_ASN1_OBJECT_value(x->expected_policy_set, i);
		if (!OBJ_cmp(policy_oid, oid))
			return 1;
		}
	return 0;

	}
@


