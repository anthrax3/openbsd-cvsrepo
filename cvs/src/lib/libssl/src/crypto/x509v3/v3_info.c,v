head	1.23;
access;
symbols
	OPENBSD_6_0:1.23.0.6
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.4
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.21.0.4
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.9.0.24
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.20
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.18
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.9.0.14
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.16
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.9.0.12
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.10
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.23
date	2015.07.29.16.13.48;	author jsing;	state Exp;
branches;
next	1.22;
commitid	p0YErzIitgRtixdM;

1.22
date	2015.07.25.16.00.14;	author jsing;	state Exp;
branches;
next	1.21;
commitid	IQmUl7Av61G6tr84;

1.21
date	2015.02.09.16.03.11;	author jsing;	state Exp;
branches;
next	1.20;
commitid	xIhBiKP17QbaVYG2;

1.20
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.19;
commitid	gtwLkRyWx0K1HbzX;

1.19
date	2014.10.05.18.28.56;	author miod;	state Exp;
branches;
next	1.18;
commitid	EJtefClCUinPM0nm;

1.18
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.16;
commitid	id8dTrTMtnTn4fqt;

1.16
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	mJUVYpkFBZ0Zv2bG;

1.15
date	2014.04.27.15.59.25;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.21.16.59.26;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.19.00.41.38;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.16.20.36.35;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.08.08.03.14;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.16.12.18.21;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.10.16.31.56;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.58.18;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.12.19;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.02;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.42.07;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.55;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.53;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Use named initialisers for X509V3_EXT_METHOD structs (for the usual
reasons) - only change in generated assembly is due to line numbering.
@
text
@/* $OpenBSD: v3_info.c,v 1.22 2015/07/25 16:00:14 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/asn1t.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/x509v3.h>

static STACK_OF(CONF_VALUE) *i2v_AUTHORITY_INFO_ACCESS(
    X509V3_EXT_METHOD *method, AUTHORITY_INFO_ACCESS *ainfo,
    STACK_OF(CONF_VALUE) *ret);
static AUTHORITY_INFO_ACCESS *v2i_AUTHORITY_INFO_ACCESS(
    X509V3_EXT_METHOD *method, X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval);

const X509V3_EXT_METHOD v3_info = {
	.ext_nid = NID_info_access,
	.ext_flags = X509V3_EXT_MULTILINE,
	.it = ASN1_ITEM_ref(AUTHORITY_INFO_ACCESS),
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = (X509V3_EXT_I2V)i2v_AUTHORITY_INFO_ACCESS,
	.v2i = (X509V3_EXT_V2I)v2i_AUTHORITY_INFO_ACCESS,
	.i2r = NULL,
	.r2i = NULL,
	.usr_data = NULL,
};

const X509V3_EXT_METHOD v3_sinfo = {
	.ext_nid = NID_sinfo_access,
	.ext_flags = X509V3_EXT_MULTILINE,
	.it = ASN1_ITEM_ref(AUTHORITY_INFO_ACCESS),
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = (X509V3_EXT_I2V)i2v_AUTHORITY_INFO_ACCESS,
	.v2i = (X509V3_EXT_V2I)v2i_AUTHORITY_INFO_ACCESS,
	.i2r = NULL,
	.r2i = NULL,
	.usr_data = NULL,
};

static const ASN1_TEMPLATE ACCESS_DESCRIPTION_seq_tt[] = {
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(ACCESS_DESCRIPTION, method),
		.field_name = "method",
		.item = &ASN1_OBJECT_it,
	},
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(ACCESS_DESCRIPTION, location),
		.field_name = "location",
		.item = &GENERAL_NAME_it,
	},
};

const ASN1_ITEM ACCESS_DESCRIPTION_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = ACCESS_DESCRIPTION_seq_tt,
	.tcount = sizeof(ACCESS_DESCRIPTION_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(ACCESS_DESCRIPTION),
	.sname = "ACCESS_DESCRIPTION",
};


ACCESS_DESCRIPTION *
d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION **a, const unsigned char **in, long len)
{
	return (ACCESS_DESCRIPTION *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &ACCESS_DESCRIPTION_it);
}

int
i2d_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &ACCESS_DESCRIPTION_it);
}

ACCESS_DESCRIPTION *
ACCESS_DESCRIPTION_new(void)
{
	return (ACCESS_DESCRIPTION *)ASN1_item_new(&ACCESS_DESCRIPTION_it);
}

void
ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &ACCESS_DESCRIPTION_it);
}

static const ASN1_TEMPLATE AUTHORITY_INFO_ACCESS_item_tt = {
	.flags = ASN1_TFLG_SEQUENCE_OF,
	.tag = 0,
	.offset = 0,
	.field_name = "GeneralNames",
	.item = &ACCESS_DESCRIPTION_it,
};

const ASN1_ITEM AUTHORITY_INFO_ACCESS_it = {
	.itype = ASN1_ITYPE_PRIMITIVE,
	.utype = -1,
	.templates = &AUTHORITY_INFO_ACCESS_item_tt,
	.tcount = 0,
	.funcs = NULL,
	.size = 0,
	.sname = "AUTHORITY_INFO_ACCESS",
};


AUTHORITY_INFO_ACCESS *
d2i_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS **a, const unsigned char **in, long len)
{
	return (AUTHORITY_INFO_ACCESS *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &AUTHORITY_INFO_ACCESS_it);
}

int
i2d_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &AUTHORITY_INFO_ACCESS_it);
}

AUTHORITY_INFO_ACCESS *
AUTHORITY_INFO_ACCESS_new(void)
{
	return (AUTHORITY_INFO_ACCESS *)ASN1_item_new(&AUTHORITY_INFO_ACCESS_it);
}

void
AUTHORITY_INFO_ACCESS_free(AUTHORITY_INFO_ACCESS *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &AUTHORITY_INFO_ACCESS_it);
}

static STACK_OF(CONF_VALUE) *
i2v_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
    AUTHORITY_INFO_ACCESS *ainfo, STACK_OF(CONF_VALUE) *ret)
{
	ACCESS_DESCRIPTION *desc;
	int i, nlen;
	char objtmp[80], *ntmp;
	CONF_VALUE *vtmp;

	for (i = 0; i < sk_ACCESS_DESCRIPTION_num(ainfo); i++) {
		desc = sk_ACCESS_DESCRIPTION_value(ainfo, i);
		ret = i2v_GENERAL_NAME(method, desc->location, ret);
		if (!ret)
			break;
		vtmp = sk_CONF_VALUE_value(ret, i);
		i2t_ASN1_OBJECT(objtmp, sizeof objtmp, desc->method);
		nlen = strlen(objtmp) + strlen(vtmp->name) + 5;
		ntmp = malloc(nlen);
		if (!ntmp) {
			X509V3err(X509V3_F_I2V_AUTHORITY_INFO_ACCESS,
			    ERR_R_MALLOC_FAILURE);
			return NULL;
		}
		strlcpy(ntmp, objtmp, nlen);
		strlcat(ntmp, " - ", nlen);
		strlcat(ntmp, vtmp->name, nlen);
		free(vtmp->name);
		vtmp->name = ntmp;

	}
	if (!ret)
		return sk_CONF_VALUE_new_null();
	return ret;
}

static AUTHORITY_INFO_ACCESS *
v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
    STACK_OF(CONF_VALUE) *nval)
{
	AUTHORITY_INFO_ACCESS *ainfo = NULL;
	CONF_VALUE *cnf, ctmp;
	ACCESS_DESCRIPTION *acc;
	int i, objlen;
	char *objtmp, *ptmp;

	if (!(ainfo = sk_ACCESS_DESCRIPTION_new_null())) {
		X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,
		    ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	for (i = 0; i < sk_CONF_VALUE_num(nval); i++) {
		cnf = sk_CONF_VALUE_value(nval, i);
		if ((acc = ACCESS_DESCRIPTION_new()) == NULL) {
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,
			    ERR_R_MALLOC_FAILURE);
			goto err;
		}
		if (sk_ACCESS_DESCRIPTION_push(ainfo, acc) == 0) {
			ACCESS_DESCRIPTION_free(acc);
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,
			    ERR_R_MALLOC_FAILURE);
			goto err;
		}
		ptmp = strchr(cnf->name, ';');
		if (!ptmp) {
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,
			    X509V3_R_INVALID_SYNTAX);
			goto err;
		}
		objlen = ptmp - cnf->name;
		ctmp.name = ptmp + 1;
		ctmp.value = cnf->value;
		if (!v2i_GENERAL_NAME_ex(acc->location, method, ctx, &ctmp, 0))
			goto err;
		if (!(objtmp = malloc(objlen + 1))) {
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,
			    ERR_R_MALLOC_FAILURE);
			goto err;
		}
		strlcpy(objtmp, cnf->name, objlen + 1);
		acc->method = OBJ_txt2obj(objtmp, 0);
		if (!acc->method) {
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,
			    X509V3_R_BAD_OBJECT);
			ERR_asprintf_error_data("value=%s", objtmp);
			free(objtmp);
			goto err;
		}
		free(objtmp);
	}
	return ainfo;

err:
	sk_ACCESS_DESCRIPTION_pop_free(ainfo, ACCESS_DESCRIPTION_free);
	return NULL;
}

int
i2a_ACCESS_DESCRIPTION(BIO *bp, ACCESS_DESCRIPTION* a)
{
	i2a_ASN1_OBJECT(bp, a->method);
	return 2;
}
@


1.22
log
@Expand ASN.1 template macros - the generated assembly only differs by
changes to line numbers.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_info.c,v 1.21 2015/02/09 16:03:11 jsing Exp $ */
d75 14
a88 8
	NID_info_access, X509V3_EXT_MULTILINE,
	ASN1_ITEM_ref(AUTHORITY_INFO_ACCESS),
	0, 0, 0, 0,
	0, 0,
	(X509V3_EXT_I2V)i2v_AUTHORITY_INFO_ACCESS,
	(X509V3_EXT_V2I)v2i_AUTHORITY_INFO_ACCESS,
	0, 0,
	NULL
d92 14
a105 8
	NID_sinfo_access, X509V3_EXT_MULTILINE,
	ASN1_ITEM_ref(AUTHORITY_INFO_ACCESS),
	0, 0, 0, 0,
	0, 0,
	(X509V3_EXT_I2V)i2v_AUTHORITY_INFO_ACCESS,
	(X509V3_EXT_V2I)v2i_AUTHORITY_INFO_ACCESS,
	0, 0,
	NULL
@


1.21
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_info.c,v 1.20 2015/02/07 13:19:15 doug Exp $ */
d96 26
a121 4
ASN1_SEQUENCE(ACCESS_DESCRIPTION) = {
	ASN1_SIMPLE(ACCESS_DESCRIPTION, method, ASN1_OBJECT),
	ASN1_SIMPLE(ACCESS_DESCRIPTION, location, GENERAL_NAME)
} ASN1_SEQUENCE_END(ACCESS_DESCRIPTION)
d149 17
a165 4
ASN1_ITEM_TEMPLATE(AUTHORITY_INFO_ACCESS) =
    ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, GeneralNames,
	ACCESS_DESCRIPTION)
ASN1_ITEM_TEMPLATE_END(AUTHORITY_INFO_ACCESS)
@


1.20
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_info.c,v 1.19 2014/10/05 18:28:56 miod Exp $ */
d101 25
a125 1
IMPLEMENT_ASN1_FUNCTIONS(ACCESS_DESCRIPTION)
d132 25
a156 1
IMPLEMENT_ASN1_FUNCTIONS(AUTHORITY_INFO_ACCESS)
@


1.19
log
@In v2i_AUTHORITY_INFO_ACCESS(), separate object allocation from object push
on a stack; if the latter fails, we need to free the object before returning
failure.
ok guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_info.c,v 1.18 2014/07/11 08:44:49 jsing Exp $ */
a210 3
#ifdef UNDEF
	i2a_GENERAL_NAME(bp, a->location);
#endif
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_info.c,v 1.17 2014/07/10 13:58:23 jsing Exp $ */
d162 7
a168 2
		if (!(acc = ACCESS_DESCRIPTION_new()) ||
		    !sk_ACCESS_DESCRIPTION_push(ainfo, acc)) {
@


1.17
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_info.c,v 1.16 2014/06/12 15:49:31 deraadt Exp $ */
a61 2
#include "cryptlib.h"
#include <openssl/conf.h>
d64 2
@


1.16
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.15
log
@Fix leak last commit introduced. Spotted by Sebastian Kapfer.
@
text
@d1 1
a1 1
/* v3_info.c */
@


1.14
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d188 1
@


1.13
log
@KNF.
@
text
@d187 1
a187 2
			ERR_add_error_data(2, "value=", objtmp);
			free(objtmp);
a190 1

@


1.12
log
@use intrinsic strlcpy and strlcat everywhere so we only have one set of
funcitons to check for incorrect use. keep BUF_strlcpy and BUF_strlcat
for API comptibility only.
ok tedu@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d66 27
a92 23
static STACK_OF(CONF_VALUE) *i2v_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
				AUTHORITY_INFO_ACCESS *ainfo,
						STACK_OF(CONF_VALUE) *ret);
static AUTHORITY_INFO_ACCESS *v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
				 X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval);

const X509V3_EXT_METHOD v3_info =
{ NID_info_access, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_INFO_ACCESS),
0,0,0,0,
0,0,
(X509V3_EXT_I2V)i2v_AUTHORITY_INFO_ACCESS,
(X509V3_EXT_V2I)v2i_AUTHORITY_INFO_ACCESS,
0,0,
NULL};

const X509V3_EXT_METHOD v3_sinfo =
{ NID_sinfo_access, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_INFO_ACCESS),
0,0,0,0,
0,0,
(X509V3_EXT_I2V)i2v_AUTHORITY_INFO_ACCESS,
(X509V3_EXT_V2I)v2i_AUTHORITY_INFO_ACCESS,
0,0,
NULL};
d101 3
a103 2
ASN1_ITEM_TEMPLATE(AUTHORITY_INFO_ACCESS) = 
	ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, GeneralNames, ACCESS_DESCRIPTION)
d108 3
a110 3
static STACK_OF(CONF_VALUE) *i2v_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
				AUTHORITY_INFO_ACCESS *ainfo,
						STACK_OF(CONF_VALUE) *ret)
d113 1
a113 1
	int i,nlen;
d116 2
a117 1
	for(i = 0; i < sk_ACCESS_DESCRIPTION_num(ainfo); i++) {
d120 2
a121 1
		if(!ret) break;
d126 1
a126 1
		if(!ntmp) {
d128 1
a128 1
					ERR_R_MALLOC_FAILURE);
d136 1
a136 1
		
d138 2
a139 1
	if(!ret) return sk_CONF_VALUE_new_null();
d143 3
a145 2
static AUTHORITY_INFO_ACCESS *v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
				 X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)
d152 4
a155 2
	if(!(ainfo = sk_ACCESS_DESCRIPTION_new_null())) {
		X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,ERR_R_MALLOC_FAILURE);
d158 1
a158 1
	for(i = 0; i < sk_CONF_VALUE_num(nval); i++) {
d160 4
a163 3
		if(!(acc = ACCESS_DESCRIPTION_new())
			|| !sk_ACCESS_DESCRIPTION_push(ainfo, acc)) {
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,ERR_R_MALLOC_FAILURE);
d167 3
a169 2
		if(!ptmp) {
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,X509V3_R_INVALID_SYNTAX);
d175 5
a179 4
		if(!v2i_GENERAL_NAME_ex(acc->location, method, ctx, &ctmp, 0))
								 goto err; 
		if(!(objtmp = malloc(objlen + 1))) {
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,ERR_R_MALLOC_FAILURE);
d184 3
a186 2
		if(!acc->method) {
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,X509V3_R_BAD_OBJECT);
d195 2
a196 1
	err:
d201 3
a203 2
int i2a_ACCESS_DESCRIPTION(BIO *bp, ACCESS_DESCRIPTION* a)
        {
d209 1
a209 1
	}
@


1.11
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d124 3
a126 3
		BUF_strlcpy(ntmp, objtmp, nlen);
		BUF_strlcat(ntmp, " - ", nlen);
		BUF_strlcat(ntmp, vtmp->name, nlen);
@


1.10
log
@Clean up dangerous strncpy use. This included a use where the resulting
string was potentially not nul terminated and a place where malloc return
was unchecked.
while we're at it remove dummytest.c
ok miod@@
@
text
@d118 1
a118 1
		ntmp = OPENSSL_malloc(nlen);
d127 1
a127 1
		OPENSSL_free(vtmp->name);
d164 1
a164 1
		if(!(objtmp = OPENSSL_malloc(objlen + 1))) {
d173 1
a173 1
			OPENSSL_free(objtmp);
d176 1
a176 1
		OPENSSL_free(objtmp);
@


1.9
log
@resolve conflicts
@
text
@d168 1
a168 2
		strncpy(objtmp, cnf->name, objlen);
		objtmp[objlen] = 0;
@


1.8
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.7
log
@merge 0.9.7d
@
text
@d72 1
a72 1
X509V3_EXT_METHOD v3_info =
d81 1
a81 1
X509V3_EXT_METHOD v3_sinfo =
d144 1
a144 1
		X509V3err(X509V3_F_V2I_ACCESS_DESCRIPTION,ERR_R_MALLOC_FAILURE);
d151 1
a151 1
			X509V3err(X509V3_F_V2I_ACCESS_DESCRIPTION,ERR_R_MALLOC_FAILURE);
d156 1
a156 1
			X509V3err(X509V3_F_V2I_ACCESS_DESCRIPTION,X509V3_R_INVALID_SYNTAX);
d162 1
a162 2
		GENERAL_NAME_free(acc->location);
		if(!(acc->location = v2i_GENERAL_NAME(method, ctx, &ctmp)))
d165 1
a165 1
			X509V3err(X509V3_F_V2I_ACCESS_DESCRIPTION,ERR_R_MALLOC_FAILURE);
d172 1
a172 1
			X509V3err(X509V3_F_V2I_ACCESS_DESCRIPTION,X509V3_R_BAD_OBJECT);
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d124 3
a126 3
		strlcpy(ntmp, objtmp, nlen);
		strlcat(ntmp, " - ", nlen);
		strlcat(ntmp, vtmp->name, nlen);
@


1.5
log
@Less strcpy/strcat/sprintf. tdeval@@ ok.
@
text
@d116 2
a117 2
		i2t_ASN1_OBJECT(objtmp, 80, desc->method);
		nlen = strlen(objtmp) + strlen(vtmp->name) + 4;
@


1.4
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d108 1
a108 1
	int i;
d117 2
a118 1
		ntmp = OPENSSL_malloc(strlen(objtmp) + strlen(vtmp->name) + 5);
d124 3
a126 3
		strcpy(ntmp, objtmp);
		strcat(ntmp, " - ");
		strcat(ntmp, vtmp->name);
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d161 1
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d63 1
a63 1
#include <openssl/asn1_mac.h>
d67 1
a67 1
				STACK_OF(ACCESS_DESCRIPTION) *ainfo,
d69 1
a69 1
static STACK_OF(ACCESS_DESCRIPTION) *v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
d73 3
a75 6
{ NID_info_access, X509V3_EXT_MULTILINE,
(X509V3_EXT_NEW)AUTHORITY_INFO_ACCESS_new,
(X509V3_EXT_FREE)AUTHORITY_INFO_ACCESS_free,
(X509V3_EXT_D2I)d2i_AUTHORITY_INFO_ACCESS,
(X509V3_EXT_I2D)i2d_AUTHORITY_INFO_ACCESS,
NULL, NULL,
d78 24
a101 1
NULL, NULL, NULL};
d104 1
a104 1
				STACK_OF(ACCESS_DESCRIPTION) *ainfo,
d134 1
a134 1
static STACK_OF(ACCESS_DESCRIPTION) *v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
d137 1
a137 1
	STACK_OF(ACCESS_DESCRIPTION) *ainfo = NULL;
d185 8
a192 72
int i2d_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION *a, unsigned char **pp)
{
	M_ASN1_I2D_vars(a);

	M_ASN1_I2D_len(a->method, i2d_ASN1_OBJECT);
	M_ASN1_I2D_len(a->location, i2d_GENERAL_NAME);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put(a->method, i2d_ASN1_OBJECT);
	M_ASN1_I2D_put(a->location, i2d_GENERAL_NAME);

	M_ASN1_I2D_finish();
}

ACCESS_DESCRIPTION *ACCESS_DESCRIPTION_new(void)
{
	ACCESS_DESCRIPTION *ret=NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, ACCESS_DESCRIPTION);
	ret->method = OBJ_nid2obj(NID_undef);
	ret->location = NULL;
	return (ret);
	M_ASN1_New_Error(ASN1_F_ACCESS_DESCRIPTION_NEW);
}

ACCESS_DESCRIPTION *d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION **a, unsigned char **pp,
	     long length)
{
	M_ASN1_D2I_vars(a,ACCESS_DESCRIPTION *,ACCESS_DESCRIPTION_new);
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->method, d2i_ASN1_OBJECT);
	M_ASN1_D2I_get(ret->location, d2i_GENERAL_NAME);
	M_ASN1_D2I_Finish(a, ACCESS_DESCRIPTION_free, ASN1_F_D2I_ACCESS_DESCRIPTION);
}

void ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION *a)
{
	if (a == NULL) return;
	ASN1_OBJECT_free(a->method);
	GENERAL_NAME_free(a->location);
	OPENSSL_free (a);
}

STACK_OF(ACCESS_DESCRIPTION) *AUTHORITY_INFO_ACCESS_new(void)
{
	return sk_ACCESS_DESCRIPTION_new_null();
}

void AUTHORITY_INFO_ACCESS_free(STACK_OF(ACCESS_DESCRIPTION) *a)
{
	sk_ACCESS_DESCRIPTION_pop_free(a, ACCESS_DESCRIPTION_free);
}

STACK_OF(ACCESS_DESCRIPTION) *d2i_AUTHORITY_INFO_ACCESS(STACK_OF(ACCESS_DESCRIPTION) **a,
					 unsigned char **pp, long length)
{
return d2i_ASN1_SET_OF_ACCESS_DESCRIPTION(a, pp, length, d2i_ACCESS_DESCRIPTION,
			 ACCESS_DESCRIPTION_free, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
}

int i2d_AUTHORITY_INFO_ACCESS(STACK_OF(ACCESS_DESCRIPTION) *a, unsigned char **pp)
{
return i2d_ASN1_SET_OF_ACCESS_DESCRIPTION(a, pp, i2d_ACCESS_DESCRIPTION, V_ASN1_SEQUENCE,
						 V_ASN1_UNIVERSAL, IS_SEQUENCE);
}

IMPLEMENT_STACK_OF(ACCESS_DESCRIPTION)
IMPLEMENT_ASN1_SET_OF(ACCESS_DESCRIPTION)


@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d97 1
a97 1
		ntmp = Malloc(strlen(objtmp) + strlen(vtmp->name) + 5);
d106 1
a106 1
		Free(vtmp->name);
d122 1
a122 1
	if(!(ainfo = sk_ACCESS_DESCRIPTION_new(NULL))) {
d143 1
a143 1
		if(!(objtmp = Malloc(objlen + 1))) {
d153 1
a153 1
			Free(objtmp);
d156 1
a156 1
		Free(objtmp);
d207 1
a207 1
	Free (a);
d212 1
a212 1
	return sk_ACCESS_DESCRIPTION_new(NULL);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d63 1
a63 1
#include <openssl/asn1t.h>
d67 1
a67 1
				AUTHORITY_INFO_ACCESS *ainfo,
d69 1
a69 1
static AUTHORITY_INFO_ACCESS *v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
d73 6
a78 3
{ NID_info_access, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_INFO_ACCESS),
0,0,0,0,
0,0,
d81 1
a81 24
0,0,
NULL};

X509V3_EXT_METHOD v3_sinfo =
{ NID_sinfo_access, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_INFO_ACCESS),
0,0,0,0,
0,0,
(X509V3_EXT_I2V)i2v_AUTHORITY_INFO_ACCESS,
(X509V3_EXT_V2I)v2i_AUTHORITY_INFO_ACCESS,
0,0,
NULL};

ASN1_SEQUENCE(ACCESS_DESCRIPTION) = {
	ASN1_SIMPLE(ACCESS_DESCRIPTION, method, ASN1_OBJECT),
	ASN1_SIMPLE(ACCESS_DESCRIPTION, location, GENERAL_NAME)
} ASN1_SEQUENCE_END(ACCESS_DESCRIPTION)

IMPLEMENT_ASN1_FUNCTIONS(ACCESS_DESCRIPTION)

ASN1_ITEM_TEMPLATE(AUTHORITY_INFO_ACCESS) = 
	ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, GeneralNames, ACCESS_DESCRIPTION)
ASN1_ITEM_TEMPLATE_END(AUTHORITY_INFO_ACCESS)

IMPLEMENT_ASN1_FUNCTIONS(AUTHORITY_INFO_ACCESS)
d84 1
a84 1
				AUTHORITY_INFO_ACCESS *ainfo,
d97 1
a97 1
		ntmp = OPENSSL_malloc(strlen(objtmp) + strlen(vtmp->name) + 5);
d106 1
a106 1
		OPENSSL_free(vtmp->name);
d114 1
a114 1
static AUTHORITY_INFO_ACCESS *v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
d117 1
a117 1
	AUTHORITY_INFO_ACCESS *ainfo = NULL;
d122 1
a122 1
	if(!(ainfo = sk_ACCESS_DESCRIPTION_new_null())) {
d143 1
a143 1
		if(!(objtmp = OPENSSL_malloc(objlen + 1))) {
d153 1
a153 1
			OPENSSL_free(objtmp);
d156 1
a156 1
		OPENSSL_free(objtmp);
d165 72
a236 8
int i2a_ACCESS_DESCRIPTION(BIO *bp, ACCESS_DESCRIPTION* a)
        {
	i2a_ASN1_OBJECT(bp, a->method);
#ifdef UNDEF
	i2a_GENERAL_NAME(bp, a->location);
#endif
	return 2;
	}
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@a160 1
		GENERAL_NAME_free(acc->location);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d116 1
a116 1
		i2t_ASN1_OBJECT(objtmp, sizeof objtmp, desc->method);
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@d108 1
a108 1
	int i,nlen;
d117 1
a117 2
		nlen = strlen(objtmp) + strlen(vtmp->name) + 5;
		ntmp = OPENSSL_malloc(nlen);
d123 3
a125 3
		BUF_strlcpy(ntmp, objtmp, nlen);
		BUF_strlcat(ntmp, " - ", nlen);
		BUF_strlcat(ntmp, vtmp->name, nlen);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d72 1
a72 1
const X509V3_EXT_METHOD v3_info =
d81 1
a81 1
const X509V3_EXT_METHOD v3_sinfo =
d144 1
a144 1
		X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,ERR_R_MALLOC_FAILURE);
d151 1
a151 1
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,ERR_R_MALLOC_FAILURE);
d156 1
a156 1
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,X509V3_R_INVALID_SYNTAX);
d162 2
a163 1
		if(!v2i_GENERAL_NAME_ex(acc->location, method, ctx, &ctmp, 0))
d166 1
a166 1
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,ERR_R_MALLOC_FAILURE);
d173 1
a173 1
			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,X509V3_R_BAD_OBJECT);
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


