head	1.18;
access;
symbols
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	butholakala:1.6
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.6.0.24
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.20
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.18
	OPENBSD_5_3_BASE:1.6
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.6.0.14
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.16
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.09.03.11.33.40;	author beck;	state dead;
branches;
next	1.17;
commitid	HnbXxsegngek41U2;

1.17
date	2015.09.30.18.41.06;	author jsing;	state Exp;
branches;
next	1.16;
commitid	8UbnRNonXjerilzx;

1.16
date	2015.09.30.17.30.16;	author jsing;	state Exp;
branches;
next	1.15;
commitid	f3YLBhwPPENmVqqA;

1.15
date	2015.07.29.16.13.48;	author jsing;	state Exp;
branches;
next	1.14;
commitid	p0YErzIitgRtixdM;

1.14
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.13;
commitid	rYgS8cWcS59JYkBV;

1.13
date	2014.10.05.18.26.22;	author miod;	state Exp;
branches;
next	1.12;
commitid	e0GAnseKni7suZeZ;

1.12
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.10;
commitid	id8dTrTMtnTn4fqt;

1.10
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.21.13.04.02;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.15;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.12.16;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.53;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.01;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: v3_akey.c,v 1.17 2015/09/30 18:41:06 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/asn1t.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/x509v3.h>

static STACK_OF(CONF_VALUE) *i2v_AUTHORITY_KEYID(X509V3_EXT_METHOD *method,
    AUTHORITY_KEYID *akeyid, STACK_OF(CONF_VALUE) *extlist);
static AUTHORITY_KEYID *v2i_AUTHORITY_KEYID(X509V3_EXT_METHOD *method,
    X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values);

const X509V3_EXT_METHOD v3_akey_id = {
	.ext_nid = NID_authority_key_identifier,
	.ext_flags = X509V3_EXT_MULTILINE,
	.it = ASN1_ITEM_ref(AUTHORITY_KEYID),
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = (X509V3_EXT_I2V)i2v_AUTHORITY_KEYID,
	.v2i = (X509V3_EXT_V2I)v2i_AUTHORITY_KEYID,
	.i2r = NULL,
	.r2i = NULL,
	.usr_data = NULL,
};

static
STACK_OF(CONF_VALUE) *i2v_AUTHORITY_KEYID(X509V3_EXT_METHOD *method,
    AUTHORITY_KEYID *akeyid, STACK_OF(CONF_VALUE) *extlist)
{
	char *tmp;

	if (akeyid->keyid) {
		tmp = hex_to_string(akeyid->keyid->data, akeyid->keyid->length);
		X509V3_add_value("keyid", tmp, &extlist);
		free(tmp);
	}
	if (akeyid->issuer)
		extlist = i2v_GENERAL_NAMES(NULL, akeyid->issuer, extlist);
	if (akeyid->serial) {
		tmp = hex_to_string(akeyid->serial->data,
		    akeyid->serial->length);
		X509V3_add_value("serial", tmp, &extlist);
		free(tmp);
	}
	return extlist;
}

/* Currently two options:
 * keyid: use the issuers subject keyid, the value 'always' means its is
 * an error if the issuer certificate doesn't have a key id.
 * issuer: use the issuers cert issuer and serial number. The default is
 * to only use this if keyid is not present. With the option 'always'
 * this is always included.
 */

static AUTHORITY_KEYID *
v2i_AUTHORITY_KEYID(X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
    STACK_OF(CONF_VALUE) *values)
{
	char keyid = 0, issuer = 0;
	int i;
	CONF_VALUE *cnf;
	ASN1_OCTET_STRING *ikeyid = NULL;
	X509_NAME *isname = NULL;
	STACK_OF(GENERAL_NAME) *gens = NULL;
	GENERAL_NAME *gen = NULL;
	ASN1_INTEGER *serial = NULL;
	X509_EXTENSION *ext;
	X509 *cert;
	AUTHORITY_KEYID *akeyid = NULL;

	for (i = 0; i < sk_CONF_VALUE_num(values); i++) {
		cnf = sk_CONF_VALUE_value(values, i);
		if (!strcmp(cnf->name, "keyid")) {
			keyid = 1;
			if (cnf->value && !strcmp(cnf->value, "always"))
				keyid = 2;
		}
		else if (!strcmp(cnf->name, "issuer")) {
			issuer = 1;
			if (cnf->value && !strcmp(cnf->value, "always"))
				issuer = 2;
		} else {
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,
			    X509V3_R_UNKNOWN_OPTION);
			ERR_asprintf_error_data("name=%s", cnf->name);
			return NULL;
		}
	}

	if (!ctx || !ctx->issuer_cert) {
		if (ctx && (ctx->flags == CTX_TEST))
			return AUTHORITY_KEYID_new();
		X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,
		    X509V3_R_NO_ISSUER_CERTIFICATE);
		return NULL;
	}

	cert = ctx->issuer_cert;

	if (keyid) {
		i = X509_get_ext_by_NID(cert, NID_subject_key_identifier, -1);
		if ((i >= 0)  && (ext = X509_get_ext(cert, i)))
			ikeyid = X509V3_EXT_d2i(ext);
		if (keyid == 2 && !ikeyid) {
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,
			    X509V3_R_UNABLE_TO_GET_ISSUER_KEYID);
			return NULL;
		}
	}

	if ((issuer && !ikeyid) || (issuer == 2)) {
		isname = X509_NAME_dup(X509_get_issuer_name(cert));
		serial = ASN1_INTEGER_dup(X509_get_serialNumber(cert));
		if (!isname || !serial) {
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,
			    X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS);
			goto err;
		}
	}

	if (!(akeyid = AUTHORITY_KEYID_new()))
		goto err;

	if (isname) {
		if (!(gens = sk_GENERAL_NAME_new_null()) ||
		    !(gen = GENERAL_NAME_new()) ||
		    !sk_GENERAL_NAME_push(gens, gen)) {
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,
			    ERR_R_MALLOC_FAILURE);
			goto err;
		}
		gen->type = GEN_DIRNAME;
		gen->d.dirn = isname;
	}

	akeyid->issuer = gens;
	akeyid->serial = serial;
	akeyid->keyid = ikeyid;

	return akeyid;

err:
	AUTHORITY_KEYID_free(akeyid);
	GENERAL_NAME_free(gen);
	sk_GENERAL_NAME_free(gens);
	X509_NAME_free(isname);
	ASN1_INTEGER_free(serial);
	ASN1_OCTET_STRING_free(ikeyid);
	return NULL;
}
@


1.17
log
@Replace M_ASN1_OCTET_STRING_(free|new) with ASN1_OCTET_STRING_(free|new).
@
text
@d1 1
a1 1
/* $OpenBSD: v3_akey.c,v 1.16 2015/09/30 17:30:16 jsing Exp $ */
@


1.16
log
@Replace M_ASN1_INTEGER_(new|free) with ASN1_INTEGER_(new|free) - this is
different from the macro expansion, but the result is the same. Also
replace some ASN1_STRING_dup() with ASN1_INTEGER_dup().

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_akey.c,v 1.15 2015/07/29 16:13:48 jsing Exp $ */
d213 1
a213 1
	M_ASN1_OCTET_STRING_free(ikeyid);
@


1.15
log
@Use named initialisers for X509V3_EXT_METHOD structs (for the usual
reasons) - only change in generated assembly is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_akey.c,v 1.14 2015/07/29 14:58:34 jsing Exp $ */
d178 1
a178 1
		serial = ASN1_STRING_dup(X509_get_serialNumber(cert));
d212 1
a212 1
	M_ASN1_INTEGER_free(serial);
@


1.14
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_akey.c,v 1.13 2014/10/05 18:26:22 miod Exp $ */
d74 14
a87 8
	NID_authority_key_identifier,
	X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_KEYID),
	0, 0,0, 0,
	0, 0,
	(X509V3_EXT_I2V)i2v_AUTHORITY_KEYID,
	(X509V3_EXT_V2I)v2i_AUTHORITY_KEYID,
	0, 0,
	NULL
@


1.13
log
@Fix memory leak in the error path of v2i_AUTHORITY_KEYID().
ok deraadt@@ guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_akey.c,v 1.12 2014/07/11 08:44:49 jsing Exp $ */
d172 1
a172 1
		serial = M_ASN1_INTEGER_dup(X509_get_serialNumber(cert));
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_akey.c,v 1.11 2014/07/10 13:58:23 jsing Exp $ */
d123 1
a123 1
	GENERAL_NAMES * gens = NULL;
d128 1
a128 1
	AUTHORITY_KEYID *akeyid;
d202 3
@


1.11
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_akey.c,v 1.10 2014/06/12 15:49:31 deraadt Exp $ */
a61 2
#include "cryptlib.h"
#include <openssl/conf.h>
d64 2
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.9
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d1 1
a1 1
/* v3_akey.c */
@


1.8
log
@KNF.
@
text
@d142 1
a142 1
			ERR_add_error_data(2, "name=", cnf->name);
@


1.7
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d67 1
a67 1
			AUTHORITY_KEYID *akeyid, STACK_OF(CONF_VALUE) *extlist);
d69 1
a69 1
			X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values);
d71 1
a71 2
const X509V3_EXT_METHOD v3_akey_id =
	{
d74 2
a75 2
	0,0,0,0,
	0,0,
d78 1
a78 1
	0,0,
d80 1
a80 1
	};
d82 3
a84 2
static STACK_OF(CONF_VALUE) *i2v_AUTHORITY_KEYID(X509V3_EXT_METHOD *method,
	     AUTHORITY_KEYID *akeyid, STACK_OF(CONF_VALUE) *extlist)
d87 2
a88 1
	if(akeyid->keyid) {
d93 1
a93 1
	if(akeyid->issuer) 
d95 1
a95 1
	if(akeyid->serial) {
d97 1
a97 1
						 akeyid->serial->length);
d112 5
a116 4
static AUTHORITY_KEYID *v2i_AUTHORITY_KEYID(X509V3_EXT_METHOD *method,
	     X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values)
	{
	char keyid=0, issuer=0;
d128 1
a128 2
	for(i = 0; i < sk_CONF_VALUE_num(values); i++)
		{
d130 1
a130 2
		if(!strcmp(cnf->name, "keyid"))
			{
d132 1
a132 1
			if(cnf->value && !strcmp(cnf->value, "always"))
d134 2
a135 3
			}
		else if(!strcmp(cnf->name, "issuer"))
			{
d137 1
a137 1
			if(cnf->value && !strcmp(cnf->value, "always"))
d139 3
a141 4
			}
		else
			{
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNKNOWN_OPTION);
a143 1
			}
d145 1
d147 2
a148 3
	if(!ctx || !ctx->issuer_cert)
		{
		if(ctx && (ctx->flags==CTX_TEST))
d150 2
a151 1
		X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_NO_ISSUER_CERTIFICATE);
d153 1
a153 1
		}
d157 1
a157 2
	if(keyid)
		{
d159 1
a159 1
		if((i >= 0)  && (ext = X509_get_ext(cert, i)))
d161 3
a163 3
		if(keyid==2 && !ikeyid)
			{
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNABLE_TO_GET_ISSUER_KEYID);
a164 1
			}
d166 1
d168 1
a168 2
	if((issuer && !ikeyid) || (issuer == 2))
		{
d171 3
a173 3
		if(!isname || !serial)
			{
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS);
a174 1
			}
d176 1
d178 2
a179 1
	if(!(akeyid = AUTHORITY_KEYID_new())) goto err;
d181 6
a186 7
	if(isname)
		{
		if(!(gens = sk_GENERAL_NAME_new_null())
			|| !(gen = GENERAL_NAME_new())
			|| !sk_GENERAL_NAME_push(gens, gen))
			{
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,ERR_R_MALLOC_FAILURE);
d188 1
a188 1
			}
d191 1
a191 1
		}
d199 1
a199 1
 err:
d204 1
a204 1
	}
@


1.6
log
@resolve conflicts
@
text
@d90 1
a90 1
		OPENSSL_free(tmp);
d98 1
a98 1
		OPENSSL_free(tmp);
@


1.5
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d71 11
a81 9
X509V3_EXT_METHOD v3_akey_id = {
NID_authority_key_identifier, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_KEYID),
0,0,0,0,
0,0,
(X509V3_EXT_I2V)i2v_AUTHORITY_KEYID,
(X509V3_EXT_V2I)v2i_AUTHORITY_KEYID,
0,0,
NULL
};
d113 41
a153 23
{
char keyid=0, issuer=0;
int i;
CONF_VALUE *cnf;
ASN1_OCTET_STRING *ikeyid = NULL;
X509_NAME *isname = NULL;
GENERAL_NAMES * gens = NULL;
GENERAL_NAME *gen = NULL;
ASN1_INTEGER *serial = NULL;
X509_EXTENSION *ext;
X509 *cert;
AUTHORITY_KEYID *akeyid;
for(i = 0; i < sk_CONF_VALUE_num(values); i++) {
	cnf = sk_CONF_VALUE_value(values, i);
	if(!strcmp(cnf->name, "keyid")) {
		keyid = 1;
		if(cnf->value && !strcmp(cnf->value, "always")) keyid = 2;
	} else if(!strcmp(cnf->name, "issuer")) {
		issuer = 1;
		if(cnf->value && !strcmp(cnf->value, "always")) issuer = 2;
	} else {
		X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNKNOWN_OPTION);
		ERR_add_error_data(2, "name=", cnf->name);
d155 3
a157 2
	}
}
d159 48
a206 3
if(!ctx || !ctx->issuer_cert) {
	if(ctx && (ctx->flags==CTX_TEST)) return AUTHORITY_KEYID_new();
	X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_NO_ISSUER_CERTIFICATE);
a207 30
}

cert = ctx->issuer_cert;

if(keyid) {
	i = X509_get_ext_by_NID(cert, NID_subject_key_identifier, -1);
	if((i >= 0)  && (ext = X509_get_ext(cert, i)))
						 ikeyid = X509V3_EXT_d2i(ext);
	if(keyid==2 && !ikeyid) {
		X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNABLE_TO_GET_ISSUER_KEYID);
		return NULL;
	}
}

if((issuer && !ikeyid) || (issuer == 2)) {
	isname = X509_NAME_dup(X509_get_issuer_name(cert));
	serial = M_ASN1_INTEGER_dup(X509_get_serialNumber(cert));
	if(!isname || !serial) {
		X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS);
		goto err;
	}
}

if(!(akeyid = AUTHORITY_KEYID_new())) goto err;

if(isname) {
	if(!(gens = sk_GENERAL_NAME_new_null()) || !(gen = GENERAL_NAME_new())
		|| !sk_GENERAL_NAME_push(gens, gen)) {
		X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,ERR_R_MALLOC_FAILURE);
		goto err;
a208 18
	gen->type = GEN_DIRNAME;
	gen->d.dirn = isname;
}

akeyid->issuer = gens;
akeyid->serial = serial;
akeyid->keyid = ikeyid;

return akeyid;

err:
X509_NAME_free(isname);
M_ASN1_INTEGER_free(serial);
M_ASN1_OCTET_STRING_free(ikeyid);
return NULL;

}

@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d63 1
a63 1
#include <openssl/asn1_mac.h>
d72 3
a74 6
NID_authority_key_identifier, X509V3_EXT_MULTILINE,
(X509V3_EXT_NEW)AUTHORITY_KEYID_new,
(X509V3_EXT_FREE)AUTHORITY_KEYID_free,
(X509V3_EXT_D2I)d2i_AUTHORITY_KEYID,
(X509V3_EXT_I2D)i2d_AUTHORITY_KEYID,
NULL, NULL,
d77 1
a77 1
NULL,NULL,
a80 54

int i2d_AUTHORITY_KEYID(AUTHORITY_KEYID *a, unsigned char **pp)
{
	M_ASN1_I2D_vars(a);

	M_ASN1_I2D_len_IMP_opt (a->keyid, i2d_ASN1_OCTET_STRING);
	M_ASN1_I2D_len_IMP_opt (a->issuer, i2d_GENERAL_NAMES);
	M_ASN1_I2D_len_IMP_opt (a->serial, i2d_ASN1_INTEGER);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put_IMP_opt (a->keyid, i2d_ASN1_OCTET_STRING, 0);
	M_ASN1_I2D_put_IMP_opt (a->issuer, i2d_GENERAL_NAMES, 1);
	M_ASN1_I2D_put_IMP_opt (a->serial, i2d_ASN1_INTEGER, 2);

	M_ASN1_I2D_finish();
}

AUTHORITY_KEYID *AUTHORITY_KEYID_new(void)
{
	AUTHORITY_KEYID *ret=NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, AUTHORITY_KEYID);
	ret->keyid = NULL;
	ret->issuer = NULL;
	ret->serial = NULL;
	return (ret);
	M_ASN1_New_Error(ASN1_F_AUTHORITY_KEYID_NEW);
}

AUTHORITY_KEYID *d2i_AUTHORITY_KEYID(AUTHORITY_KEYID **a, unsigned char **pp,
	     long length)
{
	M_ASN1_D2I_vars(a,AUTHORITY_KEYID *,AUTHORITY_KEYID_new);
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get_IMP_opt (ret->keyid, d2i_ASN1_OCTET_STRING, 0,
							V_ASN1_OCTET_STRING);
	M_ASN1_D2I_get_IMP_opt (ret->issuer, d2i_GENERAL_NAMES, 1,
							V_ASN1_SEQUENCE);
	M_ASN1_D2I_get_IMP_opt (ret->serial, d2i_ASN1_INTEGER, 2,
							V_ASN1_INTEGER);
	M_ASN1_D2I_Finish(a, AUTHORITY_KEYID_free, ASN1_F_D2I_AUTHORITY_KEYID);
}

void AUTHORITY_KEYID_free(AUTHORITY_KEYID *a)
{
	if (a == NULL) return;
	M_ASN1_OCTET_STRING_free(a->keyid);
	sk_GENERAL_NAME_pop_free(a->issuer, GENERAL_NAME_free);
	M_ASN1_INTEGER_free (a->serial);
	OPENSSL_free (a);
}

d117 1
a117 1
STACK_OF(GENERAL_NAME) * gens = NULL;
a136 2


@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d135 1
a135 1
	Free (a);
d145 1
a145 1
		Free(tmp);
d153 1
a153 1
		Free(tmp);
d227 1
a227 1
	if(!(gens = sk_GENERAL_NAME_new(NULL)) || !(gen = GENERAL_NAME_new())
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d132 1
a132 1
	ASN1_OCTET_STRING_free(a->keyid);
d134 2
a135 2
	ASN1_INTEGER_free (a->serial);
	Free ((char *)a);
d217 1
a217 1
	serial = ASN1_INTEGER_dup(X509_get_serialNumber(cert));
d244 2
a245 2
ASN1_INTEGER_free(serial);
ASN1_OCTET_STRING_free(ikeyid);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d63 1
a63 1
#include <openssl/asn1t.h>
d72 6
a77 3
NID_authority_key_identifier, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_KEYID),
0,0,0,0,
0,0,
d80 1
a80 1
0,0,
d84 54
d145 1
a145 1
		OPENSSL_free(tmp);
d153 1
a153 1
		OPENSSL_free(tmp);
d174 1
a174 1
GENERAL_NAMES * gens = NULL;
d195 2
d217 1
a217 1
	serial = M_ASN1_INTEGER_dup(X509_get_serialNumber(cert));
d227 1
a227 1
	if(!(gens = sk_GENERAL_NAME_new_null()) || !(gen = GENERAL_NAME_new())
d244 2
a245 2
M_ASN1_INTEGER_free(serial);
M_ASN1_OCTET_STRING_free(ikeyid);
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d71 9
a79 11
const X509V3_EXT_METHOD v3_akey_id =
	{
	NID_authority_key_identifier,
	X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_KEYID),
	0,0,0,0,
	0,0,
	(X509V3_EXT_I2V)i2v_AUTHORITY_KEYID,
	(X509V3_EXT_V2I)v2i_AUTHORITY_KEYID,
	0,0,
	NULL
	};
d111 41
a151 41
	{
	char keyid=0, issuer=0;
	int i;
	CONF_VALUE *cnf;
	ASN1_OCTET_STRING *ikeyid = NULL;
	X509_NAME *isname = NULL;
	GENERAL_NAMES * gens = NULL;
	GENERAL_NAME *gen = NULL;
	ASN1_INTEGER *serial = NULL;
	X509_EXTENSION *ext;
	X509 *cert;
	AUTHORITY_KEYID *akeyid;

	for(i = 0; i < sk_CONF_VALUE_num(values); i++)
		{
		cnf = sk_CONF_VALUE_value(values, i);
		if(!strcmp(cnf->name, "keyid"))
			{
			keyid = 1;
			if(cnf->value && !strcmp(cnf->value, "always"))
				keyid = 2;
			}
		else if(!strcmp(cnf->name, "issuer"))
			{
			issuer = 1;
			if(cnf->value && !strcmp(cnf->value, "always"))
				issuer = 2;
			}
		else
			{
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNKNOWN_OPTION);
			ERR_add_error_data(2, "name=", cnf->name);
			return NULL;
			}
		}

	if(!ctx || !ctx->issuer_cert)
		{
		if(ctx && (ctx->flags==CTX_TEST))
			return AUTHORITY_KEYID_new();
		X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_NO_ISSUER_CERTIFICATE);
d153 2
a154 1
		}
d156 8
a163 1
	cert = ctx->issuer_cert;
d165 7
a171 49
	if(keyid)
		{
		i = X509_get_ext_by_NID(cert, NID_subject_key_identifier, -1);
		if((i >= 0)  && (ext = X509_get_ext(cert, i)))
			ikeyid = X509V3_EXT_d2i(ext);
		if(keyid==2 && !ikeyid)
			{
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNABLE_TO_GET_ISSUER_KEYID);
			return NULL;
			}
		}

	if((issuer && !ikeyid) || (issuer == 2))
		{
		isname = X509_NAME_dup(X509_get_issuer_name(cert));
		serial = M_ASN1_INTEGER_dup(X509_get_serialNumber(cert));
		if(!isname || !serial)
			{
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS);
			goto err;
			}
		}

	if(!(akeyid = AUTHORITY_KEYID_new())) goto err;

	if(isname)
		{
		if(!(gens = sk_GENERAL_NAME_new_null())
			|| !(gen = GENERAL_NAME_new())
			|| !sk_GENERAL_NAME_push(gens, gen))
			{
			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,ERR_R_MALLOC_FAILURE);
			goto err;
			}
		gen->type = GEN_DIRNAME;
		gen->d.dirn = isname;
		}

	akeyid->issuer = gens;
	akeyid->serial = serial;
	akeyid->keyid = ikeyid;

	return akeyid;

 err:
	X509_NAME_free(isname);
	M_ASN1_INTEGER_free(serial);
	M_ASN1_OCTET_STRING_free(ikeyid);
	return NULL;
d173 18
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


