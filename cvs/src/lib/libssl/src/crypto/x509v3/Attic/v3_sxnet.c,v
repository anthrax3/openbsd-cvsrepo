head	1.18;
access;
symbols
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	butholakala:1.6
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.6.0.24
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.20
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.18
	OPENBSD_5_3_BASE:1.6
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.6.0.14
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.16
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.09.03.11.33.40;	author beck;	state dead;
branches;
next	1.17;
commitid	HnbXxsegngek41U2;

1.17
date	2015.09.30.17.30.16;	author jsing;	state Exp;
branches;
next	1.16;
commitid	f3YLBhwPPENmVqqA;

1.16
date	2015.07.29.16.13.49;	author jsing;	state Exp;
branches;
next	1.15;
commitid	p0YErzIitgRtixdM;

1.15
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.14;
commitid	rYgS8cWcS59JYkBV;

1.14
date	2015.07.25.16.00.14;	author jsing;	state Exp;
branches;
next	1.13;
commitid	IQmUl7Av61G6tr84;

1.13
date	2015.02.10.08.33.10;	author jsing;	state Exp;
branches;
next	1.12;
commitid	v5VD2cgZRaYX8ah1;

1.12
date	2015.02.09.16.03.11;	author jsing;	state Exp;
branches;
next	1.11;
commitid	xIhBiKP17QbaVYG2;

1.11
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.9;
commitid	id8dTrTMtnTn4fqt;

1.9
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.05.26.12.37.32;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.19;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.12.20;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.55;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.03;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: v3_sxnet.c,v 1.17 2015/09/30 17:30:16 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/asn1t.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/x509v3.h>

/* Support for Thawte strong extranet extension */

#define SXNET_TEST

static int sxnet_i2r(X509V3_EXT_METHOD *method, SXNET *sx, BIO *out,
    int indent);
#ifdef SXNET_TEST
static SXNET * sxnet_v2i(X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
    STACK_OF(CONF_VALUE) *nval);
#endif

const X509V3_EXT_METHOD v3_sxnet = {
	.ext_nid = NID_sxnet,
	.ext_flags = X509V3_EXT_MULTILINE,
	.it = ASN1_ITEM_ref(SXNET),
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = NULL,
#ifdef SXNET_TEST
	.v2i = (X509V3_EXT_V2I)sxnet_v2i,
#else
	.v2i = NULL,
#endif
	.i2r = (X509V3_EXT_I2R)sxnet_i2r,
	.r2i = NULL,
	.usr_data = NULL,
};

static const ASN1_TEMPLATE SXNETID_seq_tt[] = {
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(SXNETID, zone),
		.field_name = "zone",
		.item = &ASN1_INTEGER_it,
	},
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(SXNETID, user),
		.field_name = "user",
		.item = &ASN1_OCTET_STRING_it,
	},
};

const ASN1_ITEM SXNETID_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = SXNETID_seq_tt,
	.tcount = sizeof(SXNETID_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(SXNETID),
	.sname = "SXNETID",
};


SXNETID *
d2i_SXNETID(SXNETID **a, const unsigned char **in, long len)
{
	return (SXNETID *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &SXNETID_it);
}

int
i2d_SXNETID(SXNETID *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &SXNETID_it);
}

SXNETID *
SXNETID_new(void)
{
	return (SXNETID *)ASN1_item_new(&SXNETID_it);
}

void
SXNETID_free(SXNETID *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &SXNETID_it);
}

static const ASN1_TEMPLATE SXNET_seq_tt[] = {
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(SXNET, version),
		.field_name = "version",
		.item = &ASN1_INTEGER_it,
	},
	{
		.flags = ASN1_TFLG_SEQUENCE_OF,
		.tag = 0,
		.offset = offsetof(SXNET, ids),
		.field_name = "ids",
		.item = &SXNETID_it,
	},
};

const ASN1_ITEM SXNET_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = SXNET_seq_tt,
	.tcount = sizeof(SXNET_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(SXNET),
	.sname = "SXNET",
};


SXNET *
d2i_SXNET(SXNET **a, const unsigned char **in, long len)
{
	return (SXNET *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &SXNET_it);
}

int
i2d_SXNET(SXNET *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &SXNET_it);
}

SXNET *
SXNET_new(void)
{
	return (SXNET *)ASN1_item_new(&SXNET_it);
}

void
SXNET_free(SXNET *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &SXNET_it);
}

static int
sxnet_i2r(X509V3_EXT_METHOD *method, SXNET *sx, BIO *out, int indent)
{
	long v;
	char *tmp;
	SXNETID *id;
	int i;

	v = ASN1_INTEGER_get(sx->version);
	BIO_printf(out, "%*sVersion: %ld (0x%lX)", indent, "", v + 1, v);
	for (i = 0; i < sk_SXNETID_num(sx->ids); i++) {
		id = sk_SXNETID_value(sx->ids, i);
		tmp = i2s_ASN1_INTEGER(NULL, id->zone);
		BIO_printf(out, "\n%*sZone: %s, User: ", indent, "", tmp);
		free(tmp);
		ASN1_STRING_print(out, id->user);
	}
	return 1;
}

#ifdef SXNET_TEST

/* NBB: this is used for testing only. It should *not* be used for anything
 * else because it will just take static IDs from the configuration file and
 * they should really be separate values for each user.
 */

static SXNET *
sxnet_v2i(X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
    STACK_OF(CONF_VALUE) *nval)
{
	CONF_VALUE *cnf;
	SXNET *sx = NULL;
	int i;

	for (i = 0; i < sk_CONF_VALUE_num(nval); i++) {
		cnf = sk_CONF_VALUE_value(nval, i);
		if (!SXNET_add_id_asc(&sx, cnf->name, cnf->value, -1))
			return NULL;
	}
	return sx;
}

#endif

/* Strong Extranet utility functions */

/* Add an id given the zone as an ASCII number */

int
SXNET_add_id_asc(SXNET **psx, char *zone, char *user, int userlen)
{
	ASN1_INTEGER *izone = NULL;

	if (!(izone = s2i_ASN1_INTEGER(NULL, zone))) {
		X509V3err(X509V3_F_SXNET_ADD_ID_ASC,
		    X509V3_R_ERROR_CONVERTING_ZONE);
		return 0;
	}
	return SXNET_add_id_INTEGER(psx, izone, user, userlen);
}

/* Add an id given the zone as an unsigned long */

int
SXNET_add_id_ulong(SXNET **psx, unsigned long lzone, char *user, int userlen)
{
	ASN1_INTEGER *izone = NULL;

	if (!(izone = ASN1_INTEGER_new()) ||
	    !ASN1_INTEGER_set(izone, lzone)) {
		X509V3err(X509V3_F_SXNET_ADD_ID_ULONG, ERR_R_MALLOC_FAILURE);
		ASN1_INTEGER_free(izone);
		return 0;
	}
	return SXNET_add_id_INTEGER(psx, izone, user, userlen);
}

/* Add an id given the zone as an ASN1_INTEGER.
 * Note this version uses the passed integer and doesn't make a copy so don't
 * free it up afterwards.
 */

int
SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *zone, char *user, int userlen)
{
	SXNET *sx = NULL;
	SXNETID *id = NULL;

	if (!psx || !zone || !user) {
		X509V3err(X509V3_F_SXNET_ADD_ID_INTEGER,
		    X509V3_R_INVALID_NULL_ARGUMENT);
		return 0;
	}
	if (userlen == -1)
		userlen = strlen(user);
	if (userlen > 64) {
		X509V3err(X509V3_F_SXNET_ADD_ID_INTEGER,
		    X509V3_R_USER_TOO_LONG);
		return 0;
	}
	if (!*psx) {
		if (!(sx = SXNET_new()))
			goto err;
		if (!ASN1_INTEGER_set(sx->version, 0))
			goto err;
		*psx = sx;
	} else
		sx = *psx;
	if (SXNET_get_id_INTEGER(sx, zone)) {
		X509V3err(X509V3_F_SXNET_ADD_ID_INTEGER,
		    X509V3_R_DUPLICATE_ZONE_ID);
		return 0;
	}

	if (!(id = SXNETID_new()))
		goto err;
	if (userlen == -1)
		userlen = strlen(user);

	if (!ASN1_STRING_set(id->user, user, userlen))
		goto err;
	if (!sk_SXNETID_push(sx->ids, id))
		goto err;
	id->zone = zone;
	return 1;

err:
	X509V3err(X509V3_F_SXNET_ADD_ID_INTEGER, ERR_R_MALLOC_FAILURE);
	SXNETID_free(id);
	SXNET_free(sx);
	*psx = NULL;
	return 0;
}

ASN1_OCTET_STRING *
SXNET_get_id_asc(SXNET *sx, char *zone)
{
	ASN1_INTEGER *izone = NULL;
	ASN1_OCTET_STRING *oct;

	if (!(izone = s2i_ASN1_INTEGER(NULL, zone))) {
		X509V3err(X509V3_F_SXNET_GET_ID_ASC,
		    X509V3_R_ERROR_CONVERTING_ZONE);
		return NULL;
	}
	oct = SXNET_get_id_INTEGER(sx, izone);
	ASN1_INTEGER_free(izone);
	return oct;
}

ASN1_OCTET_STRING *
SXNET_get_id_ulong(SXNET *sx, unsigned long lzone)
{
	ASN1_INTEGER *izone = NULL;
	ASN1_OCTET_STRING *oct;

	if (!(izone = ASN1_INTEGER_new()) ||
	    !ASN1_INTEGER_set(izone, lzone)) {
		X509V3err(X509V3_F_SXNET_GET_ID_ULONG, ERR_R_MALLOC_FAILURE);
		ASN1_INTEGER_free(izone);
		return NULL;
	}
	oct = SXNET_get_id_INTEGER(sx, izone);
	ASN1_INTEGER_free(izone);
	return oct;
}

ASN1_OCTET_STRING *
SXNET_get_id_INTEGER(SXNET *sx, ASN1_INTEGER *zone)
{
	SXNETID *id;
	int i;

	for (i = 0; i < sk_SXNETID_num(sx->ids); i++) {
		id = sk_SXNETID_value(sx->ids, i);
		if (!ASN1_STRING_cmp(id->zone, zone))
			return id->user;
	}
	return NULL;
}
@


1.17
log
@Replace M_ASN1_INTEGER_(new|free) with ASN1_INTEGER_(new|free) - this is
different from the macro expansion, but the result is the same. Also
replace some ASN1_STRING_dup() with ASN1_INTEGER_dup().

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_sxnet.c,v 1.16 2015/07/29 16:13:49 jsing Exp $ */
@


1.16
log
@Use named initialisers for X509V3_EXT_METHOD structs (for the usual
reasons) - only change in generated assembly is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_sxnet.c,v 1.15 2015/07/29 14:58:34 jsing Exp $ */
d275 1
a275 1
	if (!(izone = M_ASN1_INTEGER_new()) ||
d278 1
a278 1
		M_ASN1_INTEGER_free(izone);
d353 1
a353 1
	M_ASN1_INTEGER_free(izone);
d363 1
a363 1
	if (!(izone = M_ASN1_INTEGER_new()) ||
d366 1
a366 1
		M_ASN1_INTEGER_free(izone);
d370 1
a370 1
	M_ASN1_INTEGER_free(izone);
@


1.15
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_sxnet.c,v 1.14 2015/07/25 16:00:14 jsing Exp $ */
d78 1
d80 10
a89 4
	NID_sxnet, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(SXNET),
	0, 0, 0, 0,
	0, 0,
	0,
d91 1
a91 1
	(X509V3_EXT_V2I)sxnet_v2i,
d93 1
a93 1
	0,
d95 3
a97 3
	(X509V3_EXT_I2R)sxnet_i2r,
	0,
	NULL
@


1.14
log
@Expand ASN.1 template macros - the generated assembly only differs by
changes to line numbers.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_sxnet.c,v 1.13 2015/02/10 08:33:10 jsing Exp $ */
d214 1
a214 1
		M_ASN1_OCTET_STRING_print(out, id->user);
d319 1
a319 1
	if (!M_ASN1_OCTET_STRING_set(id->user, user, userlen))
d375 1
a375 1
		if (!M_ASN1_INTEGER_cmp(id->zone, zone))
@


1.13
log
@The IMPLEMENT_STACK_OF and IMPLEMENT_ASN1_SET_OF macros were turned into
noops around 15 years ago. Remove multiple occurances of both that still
exist in the code today.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_sxnet.c,v 1.12 2015/02/09 16:03:11 jsing Exp $ */
d93 26
a118 4
ASN1_SEQUENCE(SXNETID) = {
	ASN1_SIMPLE(SXNETID, zone, ASN1_INTEGER),
	ASN1_SIMPLE(SXNETID, user, ASN1_OCTET_STRING)
} ASN1_SEQUENCE_END(SXNETID)
d146 26
a171 4
ASN1_SEQUENCE(SXNET) = {
	ASN1_SIMPLE(SXNET, version, ASN1_INTEGER),
	ASN1_SEQUENCE_OF(SXNET, ids, SXNETID)
} ASN1_SEQUENCE_END(SXNET)
@


1.12
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_sxnet.c,v 1.11 2014/07/11 08:44:49 jsing Exp $ */
a335 3

IMPLEMENT_STACK_OF(SXNETID)
IMPLEMENT_ASN1_SET_OF(SXNETID)
@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_sxnet.c,v 1.10 2014/07/10 13:58:23 jsing Exp $ */
d98 25
a122 1
IMPLEMENT_ASN1_FUNCTIONS(SXNETID)
d129 25
a153 1
IMPLEMENT_ASN1_FUNCTIONS(SXNET)
@


1.10
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_sxnet.c,v 1.9 2014/06/12 15:49:31 deraadt Exp $ */
a61 2
#include "cryptlib.h"
#include <openssl/conf.h>
d64 2
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.8
log
@KNF.
@
text
@d1 1
a1 1
/* v3_sxnet.c */
@


1.7
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d70 2
a71 1
static int sxnet_i2r(X509V3_EXT_METHOD *method, SXNET *sx, BIO *out, int indent);
d74 1
a74 1
						STACK_OF(CONF_VALUE) *nval);
d77 4
a80 4
NID_sxnet, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(SXNET),
0,0,0,0,
0,0,
0, 
d82 1
a82 1
(X509V3_EXT_V2I)sxnet_v2i,
d84 1
a84 1
0,
d86 3
a88 3
(X509V3_EXT_I2R)sxnet_i2r,
0,
NULL
d105 2
a106 2
static int sxnet_i2r(X509V3_EXT_METHOD *method, SXNET *sx, BIO *out,
	     int indent)
d112 1
d115 1
a115 1
	for(i = 0; i < sk_SXNETID_num(sx->ids); i++) {
d132 3
a134 3

static SXNET * sxnet_v2i(X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
	     STACK_OF(CONF_VALUE) *nval)
d139 2
a140 1
	for(i = 0; i < sk_CONF_VALUE_num(nval); i++) {
d142 2
a143 2
		if(!SXNET_add_id_asc(&sx, cnf->name, cnf->value, -1))
								 return NULL;
d147 1
a147 2
		
	
d154 2
a155 2
int SXNET_add_id_asc(SXNET **psx, char *zone, char *user,
	     int userlen)
d158 4
a161 2
	if(!(izone = s2i_ASN1_INTEGER(NULL, zone))) {
		X509V3err(X509V3_F_SXNET_ADD_ID_ASC,X509V3_R_ERROR_CONVERTING_ZONE);
d169 2
a170 2
int SXNET_add_id_ulong(SXNET **psx, unsigned long lzone, char *user,
	     int userlen)
d173 4
a176 2
	if(!(izone = M_ASN1_INTEGER_new()) || !ASN1_INTEGER_set(izone, lzone)) {
		X509V3err(X509V3_F_SXNET_ADD_ID_ULONG,ERR_R_MALLOC_FAILURE);
a180 1
	
d188 2
a189 2
int SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *zone, char *user,
	     int userlen)
d193 4
a196 2
	if(!psx || !zone || !user) {
		X509V3err(X509V3_F_SXNET_ADD_ID_INTEGER,X509V3_R_INVALID_NULL_ARGUMENT);
d199 5
a203 3
	if(userlen == -1) userlen = strlen(user);
	if(userlen > 64) {
		X509V3err(X509V3_F_SXNET_ADD_ID_INTEGER,X509V3_R_USER_TOO_LONG);
d206 5
a210 3
	if(!*psx) {
		if(!(sx = SXNET_new())) goto err;
		if(!ASN1_INTEGER_set(sx->version, 0)) goto err;
d212 5
a216 3
	} else sx = *psx;
	if(SXNET_get_id_INTEGER(sx, zone)) {
		X509V3err(X509V3_F_SXNET_ADD_ID_INTEGER,X509V3_R_DUPLICATE_ZONE_ID);
d220 9
a228 5
	if(!(id = SXNETID_new())) goto err;
	if(userlen == -1) userlen = strlen(user);
		
	if(!M_ASN1_OCTET_STRING_set(id->user, user, userlen)) goto err;
	if(!sk_SXNETID_push(sx->ids, id)) goto err;
d231 3
a233 3
	
	err:
	X509V3err(X509V3_F_SXNET_ADD_ID_INTEGER,ERR_R_MALLOC_FAILURE);
d240 2
a241 1
ASN1_OCTET_STRING *SXNET_get_id_asc(SXNET *sx, char *zone)
d245 4
a248 2
	if(!(izone = s2i_ASN1_INTEGER(NULL, zone))) {
		X509V3err(X509V3_F_SXNET_GET_ID_ASC,X509V3_R_ERROR_CONVERTING_ZONE);
d256 2
a257 1
ASN1_OCTET_STRING *SXNET_get_id_ulong(SXNET *sx, unsigned long lzone)
d261 4
a264 2
	if(!(izone = M_ASN1_INTEGER_new()) || !ASN1_INTEGER_set(izone, lzone)) {
		X509V3err(X509V3_F_SXNET_GET_ID_ULONG,ERR_R_MALLOC_FAILURE);
d273 2
a274 1
ASN1_OCTET_STRING *SXNET_get_id_INTEGER(SXNET *sx, ASN1_INTEGER *zone)
d278 2
a279 1
	for(i = 0; i < sk_SXNETID_num(sx->ids); i++) {
d281 2
a282 1
		if(!M_ASN1_INTEGER_cmp(id->zone, zone)) return id->user;
@


1.6
log
@resolve conflicts
@
text
@d117 1
a117 1
		OPENSSL_free(tmp);
@


1.5
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d75 1
a75 1
X509V3_EXT_METHOD v3_sxnet = {
d112 1
a112 1
	BIO_printf(out, "%*sVersion: %d (0x%X)", indent, "", v + 1, v);
d157 1
a157 1
		X509V3err(X509V3_F_SXNET_ADD_ASC,X509V3_R_ERROR_CONVERTING_ZONE);
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d63 1
a63 1
#include <openssl/asn1_mac.h>
d76 4
a79 7
NID_sxnet, X509V3_EXT_MULTILINE,
(X509V3_EXT_NEW)SXNET_new,
(X509V3_EXT_FREE)SXNET_free,
(X509V3_EXT_D2I)d2i_SXNET,
(X509V3_EXT_I2D)i2d_SXNET,
NULL, NULL,
NULL, 
d83 1
a83 1
NULL,
d86 1
a86 1
NULL,
d90 11
d102 1
a102 87
int i2d_SXNET(SXNET *a, unsigned char **pp)
{
	M_ASN1_I2D_vars(a);

	M_ASN1_I2D_len (a->version, i2d_ASN1_INTEGER);
	M_ASN1_I2D_len_SEQUENCE_type (SXNETID, a->ids, i2d_SXNETID);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put (a->version, i2d_ASN1_INTEGER);
	M_ASN1_I2D_put_SEQUENCE_type (SXNETID, a->ids, i2d_SXNETID);

	M_ASN1_I2D_finish();
}

SXNET *SXNET_new(void)
{
	SXNET *ret=NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, SXNET);
	M_ASN1_New(ret->version,M_ASN1_INTEGER_new);
	M_ASN1_New(ret->ids,sk_SXNETID_new_null);
	return (ret);
	M_ASN1_New_Error(ASN1_F_SXNET_NEW);
}

SXNET *d2i_SXNET(SXNET **a, unsigned char **pp, long length)
{
	M_ASN1_D2I_vars(a,SXNET *,SXNET_new);
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get (ret->version, d2i_ASN1_INTEGER);
	M_ASN1_D2I_get_seq_type (SXNETID, ret->ids, d2i_SXNETID, SXNETID_free);
	M_ASN1_D2I_Finish(a, SXNET_free, ASN1_F_D2I_SXNET);
}

void SXNET_free(SXNET *a)
{
	if (a == NULL) return;
	M_ASN1_INTEGER_free(a->version);
	sk_SXNETID_pop_free(a->ids, SXNETID_free);
	OPENSSL_free (a);
}

int i2d_SXNETID(SXNETID *a, unsigned char **pp)
{
	M_ASN1_I2D_vars(a);

	M_ASN1_I2D_len (a->zone, i2d_ASN1_INTEGER);
	M_ASN1_I2D_len (a->user, i2d_ASN1_OCTET_STRING);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put (a->zone, i2d_ASN1_INTEGER);
	M_ASN1_I2D_put (a->user, i2d_ASN1_OCTET_STRING);

	M_ASN1_I2D_finish();
}

SXNETID *SXNETID_new(void)
{
	SXNETID *ret=NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, SXNETID);
	ret->zone = NULL;
	M_ASN1_New(ret->user,M_ASN1_OCTET_STRING_new);
	return (ret);
	M_ASN1_New_Error(ASN1_F_SXNETID_NEW);
}

SXNETID *d2i_SXNETID(SXNETID **a, unsigned char **pp, long length)
{
	M_ASN1_D2I_vars(a,SXNETID *,SXNETID_new);
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->zone, d2i_ASN1_INTEGER);
	M_ASN1_D2I_get(ret->user, d2i_ASN1_OCTET_STRING);
	M_ASN1_D2I_Finish(a, SXNETID_free, ASN1_F_D2I_SXNETID);
}

void SXNETID_free(SXNETID *a)
{
	if (a == NULL) return;
	M_ASN1_INTEGER_free(a->zone);
	M_ASN1_OCTET_STRING_free(a->user);
	OPENSSL_free (a);
}
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d135 1
a135 1
	Free (a);
d179 1
a179 1
	Free (a);
d195 1
a195 1
		Free(tmp);
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d114 1
a114 1
	M_ASN1_New(ret->version,ASN1_INTEGER_new);
d133 1
a133 1
	ASN1_INTEGER_free(a->version);
d159 1
a159 1
	M_ASN1_New(ret->user,ASN1_OCTET_STRING_new);
d177 2
a178 2
	ASN1_INTEGER_free(a->zone);
	ASN1_OCTET_STRING_free(a->user);
d196 1
a196 1
		ASN1_OCTET_STRING_print(out, id->user);
d247 1
a247 1
	if(!(izone = ASN1_INTEGER_new()) || !ASN1_INTEGER_set(izone, lzone)) {
d249 1
a249 1
		ASN1_INTEGER_free(izone);
d288 1
a288 1
	if(!ASN1_OCTET_STRING_set(id->user, user, userlen)) goto err;
d310 1
a310 1
	ASN1_INTEGER_free(izone);
d318 1
a318 1
	if(!(izone = ASN1_INTEGER_new()) || !ASN1_INTEGER_set(izone, lzone)) {
d320 1
a320 1
		ASN1_INTEGER_free(izone);
d324 1
a324 1
	ASN1_INTEGER_free(izone);
d334 1
a334 1
		if(!ASN1_INTEGER_cmp(id->zone, zone)) return id->user;
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d63 1
a63 1
#include <openssl/asn1t.h>
d76 7
a82 4
NID_sxnet, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(SXNET),
0,0,0,0,
0,0,
0, 
d86 1
a86 1
0,
d89 1
a89 1
0,
a92 11
ASN1_SEQUENCE(SXNETID) = {
	ASN1_SIMPLE(SXNETID, zone, ASN1_INTEGER),
	ASN1_SIMPLE(SXNETID, user, ASN1_OCTET_STRING)
} ASN1_SEQUENCE_END(SXNETID)

IMPLEMENT_ASN1_FUNCTIONS(SXNETID)

ASN1_SEQUENCE(SXNET) = {
	ASN1_SIMPLE(SXNET, version, ASN1_INTEGER),
	ASN1_SEQUENCE_OF(SXNET, ids, SXNETID)
} ASN1_SEQUENCE_END(SXNET)
d94 87
a180 1
IMPLEMENT_ASN1_FUNCTIONS(SXNET)
d195 2
a196 2
		OPENSSL_free(tmp);
		M_ASN1_OCTET_STRING_print(out, id->user);
d247 1
a247 1
	if(!(izone = M_ASN1_INTEGER_new()) || !ASN1_INTEGER_set(izone, lzone)) {
d249 1
a249 1
		M_ASN1_INTEGER_free(izone);
d288 1
a288 1
	if(!M_ASN1_OCTET_STRING_set(id->user, user, userlen)) goto err;
d310 1
a310 1
	M_ASN1_INTEGER_free(izone);
d318 1
a318 1
	if(!(izone = M_ASN1_INTEGER_new()) || !ASN1_INTEGER_set(izone, lzone)) {
d320 1
a320 1
		M_ASN1_INTEGER_free(izone);
d324 1
a324 1
	M_ASN1_INTEGER_free(izone);
d334 1
a334 1
		if(!M_ASN1_INTEGER_cmp(id->zone, zone)) return id->user;
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d75 1
a75 1
const X509V3_EXT_METHOD v3_sxnet = {
d112 1
a112 1
	BIO_printf(out, "%*sVersion: %ld (0x%lX)", indent, "", v + 1, v);
d157 1
a157 1
		X509V3err(X509V3_F_SXNET_ADD_ID_ASC,X509V3_R_ERROR_CONVERTING_ZONE);
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


