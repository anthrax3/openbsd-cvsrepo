head	1.14;
access;
symbols
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	butholakala:1.5
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.5.0.16
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.12
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.22
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.09.03.11.33.40;	author beck;	state dead;
branches;
next	1.13;
commitid	HnbXxsegngek41U2;

1.13
date	2015.09.30.18.41.06;	author jsing;	state Exp;
branches;
next	1.12;
commitid	8UbnRNonXjerilzx;

1.12
date	2015.07.29.16.13.49;	author jsing;	state Exp;
branches;
next	1.11;
commitid	p0YErzIitgRtixdM;

1.11
date	2015.02.15.08.45.27;	author miod;	state Exp;
branches;
next	1.10;
commitid	fHUUxPsewiXu0d7q;

1.10
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yQEL1wOWIearrW15;

1.9
date	2014.07.10.22.45.58;	author jsing;	state Exp;
branches;
next	1.8;
commitid	nzndm3zqPmFurSaK;

1.8
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.7;
commitid	id8dTrTMtnTn4fqt;

1.7
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.04.21.17.15.24;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.03;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.55;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: v3_ocsp.c,v 1.13 2015/09/30 18:41:06 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_OCSP

#include <openssl/asn1.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/ocsp.h>
#include <openssl/x509v3.h>

/* OCSP extensions and a couple of CRL entry extensions
 */

static int i2r_ocsp_crlid(const X509V3_EXT_METHOD *method, void *nonce,
    BIO *out, int indent);
static int i2r_ocsp_acutoff(const X509V3_EXT_METHOD *method, void *nonce,
    BIO *out, int indent);
static int i2r_object(const X509V3_EXT_METHOD *method, void *obj, BIO *out,
    int indent);

static void *ocsp_nonce_new(void);
static int i2d_ocsp_nonce(void *a, unsigned char **pp);
static void *d2i_ocsp_nonce(void *a, const unsigned char **pp, long length);
static void ocsp_nonce_free(void *a);
static int i2r_ocsp_nonce(const X509V3_EXT_METHOD *method, void *nonce,
    BIO *out, int indent);

static int i2r_ocsp_nocheck(const X509V3_EXT_METHOD *method,
    void *nocheck, BIO *out, int indent);
static void *s2i_ocsp_nocheck(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
    const char *str);
static int i2r_ocsp_serviceloc(const X509V3_EXT_METHOD *method, void *in,
    BIO *bp, int ind);

const X509V3_EXT_METHOD v3_ocsp_crlid = {
	.ext_nid = NID_id_pkix_OCSP_CrlID,
	.ext_flags = 0,
	.it = ASN1_ITEM_ref(OCSP_CRLID),
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = NULL,
	.v2i = NULL,
	.i2r = i2r_ocsp_crlid,
	.r2i = NULL,
	.usr_data = NULL,
};

const X509V3_EXT_METHOD v3_ocsp_acutoff = {
	.ext_nid = NID_id_pkix_OCSP_archiveCutoff,
	.ext_flags = 0,
	.it = ASN1_ITEM_ref(ASN1_GENERALIZEDTIME),
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = NULL,
	.v2i = NULL,
	.i2r = i2r_ocsp_acutoff,
	.r2i = NULL,
	.usr_data = NULL,
};

const X509V3_EXT_METHOD v3_crl_invdate = {
	.ext_nid = NID_invalidity_date,
	.ext_flags = 0,
	.it = ASN1_ITEM_ref(ASN1_GENERALIZEDTIME),
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = NULL,
	.v2i = NULL,
	.i2r = i2r_ocsp_acutoff,
	.r2i = NULL,
	.usr_data = NULL,
};

const X509V3_EXT_METHOD v3_crl_hold = {
	.ext_nid = NID_hold_instruction_code,
	.ext_flags = 0,
	.it = ASN1_ITEM_ref(ASN1_OBJECT),
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = NULL,
	.v2i = NULL,
	.i2r = i2r_object,
	.r2i = NULL,
	.usr_data = NULL,
};

const X509V3_EXT_METHOD v3_ocsp_nonce = {
	.ext_nid = NID_id_pkix_OCSP_Nonce,
	.ext_flags = 0,
	.it = NULL,
	.ext_new = ocsp_nonce_new,
	.ext_free = ocsp_nonce_free,
	.d2i = d2i_ocsp_nonce,
	.i2d = i2d_ocsp_nonce,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = NULL,
	.v2i = NULL,
	.i2r = i2r_ocsp_nonce,
	.r2i = NULL,
	.usr_data = NULL,
};

const X509V3_EXT_METHOD v3_ocsp_nocheck = {
	.ext_nid = NID_id_pkix_OCSP_noCheck,
	.ext_flags = 0,
	.it = ASN1_ITEM_ref(ASN1_NULL),
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = s2i_ocsp_nocheck,
	.i2v = NULL,
	.v2i = NULL,
	.i2r = i2r_ocsp_nocheck,
	.r2i = NULL,
	.usr_data = NULL,
};

const X509V3_EXT_METHOD v3_ocsp_serviceloc = {
	.ext_nid = NID_id_pkix_OCSP_serviceLocator,
	.ext_flags = 0,
	.it = ASN1_ITEM_ref(OCSP_SERVICELOC),
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = NULL,
	.v2i = NULL,
	.i2r = i2r_ocsp_serviceloc,
	.r2i = NULL,
	.usr_data = NULL,
};

static int
i2r_ocsp_crlid(const X509V3_EXT_METHOD *method, void *in, BIO *bp, int ind)
{
	OCSP_CRLID *a = in;
	if (a->crlUrl) {
		if (BIO_printf(bp, "%*scrlUrl: ", ind, "") <= 0)
			goto err;
		if (!ASN1_STRING_print(bp, (ASN1_STRING*)a->crlUrl))
			goto err;
		if (BIO_write(bp, "\n", 1) <= 0)
			goto err;
	}
	if (a->crlNum) {
		if (BIO_printf(bp, "%*scrlNum: ", ind, "") <= 0)
			goto err;
		if (i2a_ASN1_INTEGER(bp, a->crlNum) <= 0)
			goto err;
		if (BIO_write(bp, "\n", 1) <= 0)
			goto err;
	}
	if (a->crlTime) {
		if (BIO_printf(bp, "%*scrlTime: ", ind, "") <= 0)
			goto err;
		if (!ASN1_GENERALIZEDTIME_print(bp, a->crlTime))
			goto err;
		if (BIO_write(bp, "\n", 1) <= 0)
			goto err;
	}
	return 1;

err:
	return 0;
}

static int
i2r_ocsp_acutoff(const X509V3_EXT_METHOD *method, void *cutoff, BIO *bp,
    int ind)
{
	if (BIO_printf(bp, "%*s", ind, "") <= 0)
		return 0;
	if (!ASN1_GENERALIZEDTIME_print(bp, cutoff))
		return 0;
	return 1;
}

static int
i2r_object(const X509V3_EXT_METHOD *method, void *oid, BIO *bp, int ind)
{
	if (BIO_printf(bp, "%*s", ind, "") <= 0)
		return 0;
	if (i2a_ASN1_OBJECT(bp, oid) <= 0)
		return 0;
	return 1;
}

/* OCSP nonce. This is needs special treatment because it doesn't have
 * an ASN1 encoding at all: it just contains arbitrary data.
 */

static void *
ocsp_nonce_new(void)
{
	return ASN1_OCTET_STRING_new();
}

static int
i2d_ocsp_nonce(void *a, unsigned char **pp)
{
	ASN1_OCTET_STRING *os = a;

	if (pp) {
		memcpy(*pp, os->data, os->length);
		*pp += os->length;
	}
	return os->length;
}

static void *
d2i_ocsp_nonce(void *a, const unsigned char **pp, long length)
{
	ASN1_OCTET_STRING *os, **pos;

	pos = a;
	if (pos == NULL || *pos == NULL) {
		os = ASN1_OCTET_STRING_new();
		if (os == NULL)
			goto err;
	} else
		os = *pos;
	if (ASN1_OCTET_STRING_set(os, *pp, length) == 0)
		goto err;

	*pp += length;

	if (pos != NULL)
		*pos = os;
	return os;

err:
	if (pos == NULL || *pos != os)
		ASN1_OCTET_STRING_free(os);
	OCSPerr(OCSP_F_D2I_OCSP_NONCE, ERR_R_MALLOC_FAILURE);
	return NULL;
}

static void
ocsp_nonce_free(void *a)
{
	ASN1_OCTET_STRING_free(a);
}

static int
i2r_ocsp_nonce(const X509V3_EXT_METHOD *method, void *nonce, BIO *out,
    int indent)
{
	if (BIO_printf(out, "%*s", indent, "") <= 0)
		return 0;
	if (i2a_ASN1_STRING(out, nonce, V_ASN1_OCTET_STRING) <= 0)
		return 0;
	return 1;
}

/* Nocheck is just a single NULL. Don't print anything and always set it */

static int
i2r_ocsp_nocheck(const X509V3_EXT_METHOD *method, void *nocheck, BIO *out,
    int indent)
{
	return 1;
}

static void *
s2i_ocsp_nocheck(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
    const char *str)
{
	return ASN1_NULL_new();
}

static int
i2r_ocsp_serviceloc(const X509V3_EXT_METHOD *method, void *in, BIO *bp, int ind)
{
	int i;
	OCSP_SERVICELOC *a = in;
	ACCESS_DESCRIPTION *ad;

	if (BIO_printf(bp, "%*sIssuer: ", ind, "") <= 0)
		goto err;
	if (X509_NAME_print_ex(bp, a->issuer, 0, XN_FLAG_ONELINE) <= 0)
		goto err;
	for (i = 0; i < sk_ACCESS_DESCRIPTION_num(a->locator); i++) {
		ad = sk_ACCESS_DESCRIPTION_value(a->locator, i);
		if (BIO_printf(bp, "\n%*s", (2 * ind), "") <= 0)
			goto err;
		if (i2a_ASN1_OBJECT(bp, ad->method) <= 0)
			goto err;
		if (BIO_puts(bp, " - ") <= 0)
			goto err;
		if (GENERAL_NAME_print(bp, ad->location) <= 0)
			goto err;
	}
	return 1;

err:
	return 0;
}
#endif
@


1.13
log
@Replace M_ASN1_OCTET_STRING_(free|new) with ASN1_OCTET_STRING_(free|new).
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ocsp.c,v 1.12 2015/07/29 16:13:49 jsing Exp $ */
@


1.12
log
@Use named initialisers for X509V3_EXT_METHOD structs (for the usual
reasons) - only change in generated assembly is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ocsp.c,v 1.11 2015/02/15 08:45:27 miod Exp $ */
d315 1
a315 1
		M_ASN1_OCTET_STRING_free(os);
d323 1
a323 1
	M_ASN1_OCTET_STRING_free(a);
@


1.11
log
@Check ASN1_OCTET_STRING_new() for failure. Coverity CID 78904
ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ocsp.c,v 1.10 2014/07/11 08:44:49 jsing Exp $ */
d97 14
a110 6
	NID_id_pkix_OCSP_CrlID, 0, ASN1_ITEM_ref(OCSP_CRLID),
	0, 0, 0, 0,
	0, 0,
	0, 0,
	i2r_ocsp_crlid, 0,
	NULL
d114 14
a127 6
	NID_id_pkix_OCSP_archiveCutoff, 0, ASN1_ITEM_ref(ASN1_GENERALIZEDTIME),
	0, 0, 0, 0,
	0, 0,
	0, 0,
	i2r_ocsp_acutoff, 0,
	NULL
d131 14
a144 6
	NID_invalidity_date, 0, ASN1_ITEM_ref(ASN1_GENERALIZEDTIME),
	0, 0, 0, 0,
	0, 0,
	0, 0,
	i2r_ocsp_acutoff, 0,
	NULL
d148 14
a161 6
	NID_hold_instruction_code, 0, ASN1_ITEM_ref(ASN1_OBJECT),
	0, 0, 0, 0,
	0, 0,
	0, 0,
	i2r_object, 0,
	NULL
d165 14
a178 9
	NID_id_pkix_OCSP_Nonce, 0, NULL,
	ocsp_nonce_new,
	ocsp_nonce_free,
	d2i_ocsp_nonce,
	i2d_ocsp_nonce,
	0, 0,
	0, 0,
	i2r_ocsp_nonce, 0,
	NULL
d182 14
a195 6
	NID_id_pkix_OCSP_noCheck, 0, ASN1_ITEM_ref(ASN1_NULL),
	0, 0, 0, 0,
	0, s2i_ocsp_nocheck,
	0, 0,
	i2r_ocsp_nocheck, 0,
	NULL
d199 14
a212 6
	NID_id_pkix_OCSP_serviceLocator, 0, ASN1_ITEM_ref(OCSP_SERVICELOC),
	0, 0, 0, 0,
	0, 0,
	0, 0,
	i2r_ocsp_serviceloc, 0,
	NULL
@


1.10
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ocsp.c,v 1.9 2014/07/10 22:45:58 jsing Exp $ */
d245 1
a245 1
	if (!pos || !*pos)
d247 3
a249 1
	else
d251 1
a251 1
	if (!ASN1_OCTET_STRING_set(os, *pp, length))
d256 1
a256 1
	if (pos)
d261 1
a261 1
	if (os && (!pos || (*pos != os)))
@


1.9
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ocsp.c,v 1.8 2014/07/10 13:58:23 jsing Exp $ */
d66 1
a66 1
#include "cryptlib.h"
d68 1
a68 1
#include <openssl/asn1.h>
@


1.8
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ocsp.c,v 1.7 2014/06/12 15:49:31 deraadt Exp $ */
d61 2
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 3
a63 1
#include <stdio.h>
@


1.6
log
@KNF.
@
text
@d1 1
a1 1
/* v3_ocsp.c */
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d72 1
a72 1
			  BIO *out, int indent);
d74 1
a74 1
			    BIO *out, int indent);
d76 1
a76 1
		      int indent);
d83 1
a83 1
			  BIO *out, int indent);
d86 1
a86 1
			    void *nocheck, BIO *out, int indent);
d88 1
a88 1
			      const char *str);
d90 1
a90 1
			       BIO *bp, int ind);
d94 4
a97 4
	0,0,0,0,
	0,0,
	0,0,
	i2r_ocsp_crlid,0,
d103 4
a106 4
	0,0,0,0,
	0,0,
	0,0,
	i2r_ocsp_acutoff,0,
d112 4
a115 4
	0,0,0,0,
	0,0,
	0,0,
	i2r_ocsp_acutoff,0,
d121 4
a124 4
	0,0,0,0,
	0,0,
	0,0,
	i2r_object,0,
d134 3
a136 3
	0,0,
	0,0,
	i2r_ocsp_nonce,0,
d142 4
a145 4
	0,0,0,0,
	0,s2i_ocsp_nocheck,
	0,0,
	i2r_ocsp_nocheck,0,
d151 4
a154 4
	0,0,0,0,
	0,0,
	0,0,
	i2r_ocsp_serviceloc,0,
d158 2
a159 2
static int i2r_ocsp_crlid(const X509V3_EXT_METHOD *method, void *in, BIO *bp,
			  int ind)
d162 24
a185 18
	if (a->crlUrl)
	        {
		if (BIO_printf(bp, "%*scrlUrl: ", ind, "") <= 0) goto err;
		if (!ASN1_STRING_print(bp, (ASN1_STRING*)a->crlUrl)) goto err;
		if (BIO_write(bp, "\n", 1) <= 0) goto err;
		}
	if (a->crlNum)
	        {
		if (BIO_printf(bp, "%*scrlNum: ", ind, "") <= 0) goto err;
		if (i2a_ASN1_INTEGER(bp, a->crlNum) <= 0) goto err;
		if (BIO_write(bp, "\n", 1) <= 0) goto err;
		}
	if (a->crlTime)
	        {
		if (BIO_printf(bp, "%*scrlTime: ", ind, "") <= 0) goto err;
		if (!ASN1_GENERALIZEDTIME_print(bp, a->crlTime)) goto err;
		if (BIO_write(bp, "\n", 1) <= 0) goto err;
		}
d187 2
a188 1
	err:
d192 3
a194 2
static int i2r_ocsp_acutoff(const X509V3_EXT_METHOD *method, void *cutoff,
			    BIO *bp, int ind)
d196 4
a199 2
	if (BIO_printf(bp, "%*s", ind, "") <= 0) return 0;
	if(!ASN1_GENERALIZEDTIME_print(bp, cutoff)) return 0;
d203 2
a204 3

static int i2r_object(const X509V3_EXT_METHOD *method, void *oid, BIO *bp,
		      int ind)
d206 4
a209 2
	if (BIO_printf(bp, "%*s", ind, "") <= 0) return 0;
	if(i2a_ASN1_OBJECT(bp, oid) <= 0) return 0;
d217 2
a218 1
static void *ocsp_nonce_new(void)
d223 2
a224 1
static int i2d_ocsp_nonce(void *a, unsigned char **pp)
d227 2
a228 1
	if(pp) {
d235 2
a236 1
static void *d2i_ocsp_nonce(void *a, const unsigned char **pp, long length)
d239 1
d241 6
a246 3
	if(!pos || !*pos) os = ASN1_OCTET_STRING_new();
	else os = *pos;
	if(!ASN1_OCTET_STRING_set(os, *pp, length)) goto err;
d250 2
a251 1
	if(pos) *pos = os;
d254 3
a256 2
	err:
	if(os && (!pos || (*pos != os))) M_ASN1_OCTET_STRING_free(os);
d261 2
a262 1
static void ocsp_nonce_free(void *a)
d267 3
a269 2
static int i2r_ocsp_nonce(const X509V3_EXT_METHOD *method, void *nonce,
			  BIO *out, int indent)
d271 4
a274 2
	if(BIO_printf(out, "%*s", indent, "") <= 0) return 0;
	if(i2a_ASN1_STRING(out, nonce, V_ASN1_OCTET_STRING) <= 0) return 0;
d280 3
a282 2
static int i2r_ocsp_nocheck(const X509V3_EXT_METHOD *method, void *nocheck,
			    BIO *out, int indent)
d287 3
a289 2
static void *s2i_ocsp_nocheck(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
			      const char *str)
d294 3
a296 3
static int i2r_ocsp_serviceloc(const X509V3_EXT_METHOD *method, void *in,
			       BIO *bp, int ind)
        {
d301 15
a315 11
        if (BIO_printf(bp, "%*sIssuer: ", ind, "") <= 0) goto err;
        if (X509_NAME_print_ex(bp, a->issuer, 0, XN_FLAG_ONELINE) <= 0) goto err;
	for (i = 0; i < sk_ACCESS_DESCRIPTION_num(a->locator); i++)
	        {
				ad = sk_ACCESS_DESCRIPTION_value(a->locator,i);
				if (BIO_printf(bp, "\n%*s", (2*ind), "") <= 0) 
					goto err;
				if(i2a_ASN1_OBJECT(bp, ad->method) <= 0) goto err;
				if(BIO_puts(bp, " - ") <= 0) goto err;
				if(GENERAL_NAME_print(bp, ad->location) <= 0) goto err;
		}
d317 1
d320 1
a320 1
	}
@


1.4
log
@resolve conflicts
@
text
@d71 6
a76 3
static int i2r_ocsp_crlid(X509V3_EXT_METHOD *method, void *nonce, BIO *out, int indent);
static int i2r_ocsp_acutoff(X509V3_EXT_METHOD *method, void *nonce, BIO *out, int indent);
static int i2r_object(X509V3_EXT_METHOD *method, void *obj, BIO *out, int indent);
d82 2
a83 1
static int i2r_ocsp_nonce(X509V3_EXT_METHOD *method, void *nonce, BIO *out, int indent);
d85 6
a90 3
static int i2r_ocsp_nocheck(X509V3_EXT_METHOD *method, void *nocheck, BIO *out, int indent);
static void *s2i_ocsp_nocheck(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, const char *str);
static int i2r_ocsp_serviceloc(X509V3_EXT_METHOD *method, void *in, BIO *bp, int ind);
d158 2
a159 1
static int i2r_ocsp_crlid(X509V3_EXT_METHOD *method, void *in, BIO *bp, int ind)
d164 1
a164 1
		if (!BIO_printf(bp, "%*scrlUrl: ", ind, "")) goto err;
d166 1
a166 1
		if (!BIO_write(bp, "\n", 1)) goto err;
d170 3
a172 3
		if (!BIO_printf(bp, "%*scrlNum: ", ind, "")) goto err;
		if (!i2a_ASN1_INTEGER(bp, a->crlNum)) goto err;
		if (!BIO_write(bp, "\n", 1)) goto err;
d176 1
a176 1
		if (!BIO_printf(bp, "%*scrlTime: ", ind, "")) goto err;
d178 1
a178 1
		if (!BIO_write(bp, "\n", 1)) goto err;
d185 2
a186 1
static int i2r_ocsp_acutoff(X509V3_EXT_METHOD *method, void *cutoff, BIO *bp, int ind)
d188 1
a188 1
	if (!BIO_printf(bp, "%*s", ind, "")) return 0;
d194 2
a195 1
static int i2r_object(X509V3_EXT_METHOD *method, void *oid, BIO *bp, int ind)
d197 2
a198 2
	if (!BIO_printf(bp, "%*s", ind, "")) return 0;
	if(!i2a_ASN1_OBJECT(bp, oid)) return 0;
d245 2
a246 1
static int i2r_ocsp_nonce(X509V3_EXT_METHOD *method, void *nonce, BIO *out, int indent)
d255 2
a256 1
static int i2r_ocsp_nocheck(X509V3_EXT_METHOD *method, void *nocheck, BIO *out, int indent)
d261 2
a262 1
static void *s2i_ocsp_nocheck(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, const char *str)
d267 2
a268 1
static int i2r_ocsp_serviceloc(X509V3_EXT_METHOD *method, void *in, BIO *bp, int ind)
@


1.3
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.2
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d77 1
a77 1
static void *d2i_ocsp_nonce(void *a, unsigned char **pp, long length);
d82 1
a82 1
static void *s2i_ocsp_nocheck(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, char *str);
d85 1
a85 1
X509V3_EXT_METHOD v3_ocsp_crlid = {
d94 1
a94 1
X509V3_EXT_METHOD v3_ocsp_acutoff = {
d103 1
a103 1
X509V3_EXT_METHOD v3_crl_invdate = {
d112 1
a112 1
X509V3_EXT_METHOD v3_crl_hold = {
d121 1
a121 1
X509V3_EXT_METHOD v3_ocsp_nonce = {
d133 1
a133 1
X509V3_EXT_METHOD v3_ocsp_nocheck = {
d142 1
a142 1
X509V3_EXT_METHOD v3_ocsp_serviceloc = {
d211 1
a211 1
static void *d2i_ocsp_nonce(void *a, unsigned char **pp, long length)
d249 1
a249 1
static void *s2i_ocsp_nocheck(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, char *str)
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d59 2
d275 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@a58 2
#ifndef OPENSSL_NO_OCSP

a272 1
#endif
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d77 1
a77 1
static void *d2i_ocsp_nonce(void *a, const unsigned char **pp, long length);
d82 1
a82 1
static void *s2i_ocsp_nocheck(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, const char *str);
d85 1
a85 1
const X509V3_EXT_METHOD v3_ocsp_crlid = {
d94 1
a94 1
const X509V3_EXT_METHOD v3_ocsp_acutoff = {
d103 1
a103 1
const X509V3_EXT_METHOD v3_crl_invdate = {
d112 1
a112 1
const X509V3_EXT_METHOD v3_crl_hold = {
d121 1
a121 1
const X509V3_EXT_METHOD v3_ocsp_nonce = {
d133 1
a133 1
const X509V3_EXT_METHOD v3_ocsp_nocheck = {
d142 1
a142 1
const X509V3_EXT_METHOD v3_ocsp_serviceloc = {
d211 1
a211 1
static void *d2i_ocsp_nonce(void *a, const unsigned char **pp, long length)
d249 1
a249 1
static void *s2i_ocsp_nocheck(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, const char *str)
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d71 3
a73 6
static int i2r_ocsp_crlid(const X509V3_EXT_METHOD *method, void *nonce,
			  BIO *out, int indent);
static int i2r_ocsp_acutoff(const X509V3_EXT_METHOD *method, void *nonce,
			    BIO *out, int indent);
static int i2r_object(const X509V3_EXT_METHOD *method, void *obj, BIO *out,
		      int indent);
d79 1
a79 2
static int i2r_ocsp_nonce(const X509V3_EXT_METHOD *method, void *nonce,
			  BIO *out, int indent);
d81 3
a83 6
static int i2r_ocsp_nocheck(const X509V3_EXT_METHOD *method,
			    void *nocheck, BIO *out, int indent);
static void *s2i_ocsp_nocheck(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
			      const char *str);
static int i2r_ocsp_serviceloc(const X509V3_EXT_METHOD *method, void *in,
			       BIO *bp, int ind);
d151 1
a151 2
static int i2r_ocsp_crlid(const X509V3_EXT_METHOD *method, void *in, BIO *bp,
			  int ind)
d156 1
a156 1
		if (BIO_printf(bp, "%*scrlUrl: ", ind, "") <= 0) goto err;
d158 1
a158 1
		if (BIO_write(bp, "\n", 1) <= 0) goto err;
d162 3
a164 3
		if (BIO_printf(bp, "%*scrlNum: ", ind, "") <= 0) goto err;
		if (i2a_ASN1_INTEGER(bp, a->crlNum) <= 0) goto err;
		if (BIO_write(bp, "\n", 1) <= 0) goto err;
d168 1
a168 1
		if (BIO_printf(bp, "%*scrlTime: ", ind, "") <= 0) goto err;
d170 1
a170 1
		if (BIO_write(bp, "\n", 1) <= 0) goto err;
d177 1
a177 2
static int i2r_ocsp_acutoff(const X509V3_EXT_METHOD *method, void *cutoff,
			    BIO *bp, int ind)
d179 1
a179 1
	if (BIO_printf(bp, "%*s", ind, "") <= 0) return 0;
d185 1
a185 2
static int i2r_object(const X509V3_EXT_METHOD *method, void *oid, BIO *bp,
		      int ind)
d187 2
a188 2
	if (BIO_printf(bp, "%*s", ind, "") <= 0) return 0;
	if(i2a_ASN1_OBJECT(bp, oid) <= 0) return 0;
d235 1
a235 2
static int i2r_ocsp_nonce(const X509V3_EXT_METHOD *method, void *nonce,
			  BIO *out, int indent)
d244 1
a244 2
static int i2r_ocsp_nocheck(const X509V3_EXT_METHOD *method, void *nocheck,
			    BIO *out, int indent)
d249 1
a249 2
static void *s2i_ocsp_nocheck(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
			      const char *str)
d254 1
a254 2
static int i2r_ocsp_serviceloc(const X509V3_EXT_METHOD *method, void *in,
			       BIO *bp, int ind)
@


