head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	butholakala:1.1.1.3
	openssl_1_0_1_g:1.1.1.3
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.16
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.12
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.6
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.8
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.03.11.33.40;	author beck;	state dead;
branches;
next	1.4;
commitid	HnbXxsegngek41U2;

1.4
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.3;
commitid	yQEL1wOWIearrW15;

1.3
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.04.21.08.41.26;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.14.00;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: pcy_map.c,v 1.4 2014/07/11 08:44:49 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2004.
 */
/* ====================================================================
 * Copyright (c) 2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/x509.h>
#include <openssl/x509v3.h>

#include "pcy_int.h"

/* Set policy mapping entries in cache.
 * Note: this modifies the passed POLICY_MAPPINGS structure
 */

int
policy_cache_set_mapping(X509 *x, POLICY_MAPPINGS *maps)
{
	POLICY_MAPPING *map;
	X509_POLICY_DATA *data;
	X509_POLICY_CACHE *cache = x->policy_cache;
	int i;
	int ret = 0;

	if (sk_POLICY_MAPPING_num(maps) == 0) {
		ret = -1;
		goto bad_mapping;
	}
	for (i = 0; i < sk_POLICY_MAPPING_num(maps); i++) {
		map = sk_POLICY_MAPPING_value(maps, i);
		/* Reject if map to or from anyPolicy */
		if ((OBJ_obj2nid(map->subjectDomainPolicy) == NID_any_policy) ||
		    (OBJ_obj2nid(map->issuerDomainPolicy) == NID_any_policy)) {
			ret = -1;
			goto bad_mapping;
		}

		/* Attempt to find matching policy data */
		data = policy_cache_find_data(cache, map->issuerDomainPolicy);
		/* If we don't have anyPolicy can't map */
		if (!data && !cache->anyPolicy)
			continue;

		/* Create a NODE from anyPolicy */
		if (!data) {
			data = policy_data_new(NULL, map->issuerDomainPolicy,
			    cache->anyPolicy->flags &
			    POLICY_DATA_FLAG_CRITICAL);
			if (!data)
				goto bad_mapping;
			data->qualifier_set = cache->anyPolicy->qualifier_set;
			/*map->issuerDomainPolicy = NULL;*/
			data->flags |= POLICY_DATA_FLAG_MAPPED_ANY;
			data->flags |= POLICY_DATA_FLAG_SHARED_QUALIFIERS;
			if (!sk_X509_POLICY_DATA_push(cache->data, data)) {
				policy_data_free(data);
				goto bad_mapping;
			}
		} else
			data->flags |= POLICY_DATA_FLAG_MAPPED;
		if (!sk_ASN1_OBJECT_push(data->expected_policy_set,
		    map->subjectDomainPolicy))
			goto bad_mapping;
		map->subjectDomainPolicy = NULL;
	}

	ret = 1;

bad_mapping:
	if (ret == -1)
		x->ex_flags |= EXFLAG_INVALID_POLICY;
	sk_POLICY_MAPPING_pop_free(maps, POLICY_MAPPING_free);
	return ret;
}
@


1.4
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcy_map.c,v 1.3 2014/06/12 15:49:31 deraadt Exp $ */
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a58 1
#include "cryptlib.h"
@


1.2
log
@KNF.
@
text
@d1 1
a1 1
/* pcy_map.c */
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
a64 25
static int ref_cmp(const X509_POLICY_REF * const *a,
			const X509_POLICY_REF * const *b)
	{
	return OBJ_cmp((*a)->subjectDomainPolicy, (*b)->subjectDomainPolicy);
	}

static void policy_map_free(X509_POLICY_REF *map)
	{
	if (map->subjectDomainPolicy)
		ASN1_OBJECT_free(map->subjectDomainPolicy);
	OPENSSL_free(map);
	}

static X509_POLICY_REF *policy_map_find(X509_POLICY_CACHE *cache, ASN1_OBJECT *id)
	{
	X509_POLICY_REF tmp;
	int idx;
	tmp.subjectDomainPolicy = id;

	idx = sk_X509_POLICY_REF_find(cache->maps, &tmp);
	if (idx == -1)
		return NULL;
	return sk_X509_POLICY_REF_value(cache->maps, idx);
	}

d69 3
a71 2
int policy_cache_set_mapping(X509 *x, POLICY_MAPPINGS *maps)
	{
a72 1
	X509_POLICY_REF *ref = NULL;
d77 2
a78 2
	if (sk_POLICY_MAPPING_num(maps) == 0)
		{
d81 2
a82 4
		}
	cache->maps = sk_X509_POLICY_REF_new(ref_cmp);
	for (i = 0; i < sk_POLICY_MAPPING_num(maps); i++)
		{
d85 2
a86 3
		if ((OBJ_obj2nid(map->subjectDomainPolicy) == NID_any_policy)
		   || (OBJ_obj2nid(map->issuerDomainPolicy) == NID_any_policy))
			{
d89 1
a89 8
			}

		/* If we've already mapped from this OID bad mapping */
		if (policy_map_find(cache, map->subjectDomainPolicy) != NULL)
			{
			ret = -1;
			goto bad_mapping;
			}
d98 1
a98 2
		if (!data)
			{
d100 2
a101 2
					cache->anyPolicy->flags
						& POLICY_DATA_FLAG_CRITICAL);
d105 1
a105 1
			map->issuerDomainPolicy = NULL;
d108 1
a108 2
			if (!sk_X509_POLICY_DATA_push(cache->data, data))
				{
a110 1
				}
d112 1
a112 1
		else
d114 2
a115 3

		if (!sk_ASN1_OBJECT_push(data->expected_policy_set, 
						map->subjectDomainPolicy))
a116 6
		
		ref = OPENSSL_malloc(sizeof(X509_POLICY_REF));
		if (!ref)
			goto bad_mapping;

		ref->subjectDomainPolicy = map->subjectDomainPolicy;
d118 1
a118 1
		ref->data = data;
d120 1
a120 2
		if (!sk_X509_POLICY_REF_push(cache->maps, ref))
			goto bad_mapping;
d122 1
a122 6
		ref = NULL;

		}

	ret = 1;
	bad_mapping:
a124 7
	if (ref)
		policy_map_free(ref);
	if (ret <= 0)
		{
		sk_X509_POLICY_REF_pop_free(cache->maps, policy_map_free);
		cache->maps = NULL;
		}
d127 1
a127 2

	}
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d65 25
d97 1
d107 1
d119 7
d141 1
a141 1
			/*map->issuerDomainPolicy = NULL;*/
d152 1
d156 6
d163 6
d176 7
@


