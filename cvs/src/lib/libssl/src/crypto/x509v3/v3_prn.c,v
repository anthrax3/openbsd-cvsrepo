head	1.18;
access;
symbols
	OPENBSD_6_0:1.18.0.6
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.17.0.6
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.5
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.20
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.18
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.17;
commitid	rYgS8cWcS59JYkBV;

1.17
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	mJUVYpkFBZ0Zv2bG;

1.15
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.05.29.20.21.23;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.05.26.12.10.11;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.15.17.46.17;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.11.22.15.19;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.22.00.03.22;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.18;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.12.20;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.55;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.03;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.55;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.11.21.18.14;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.12;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@/* $OpenBSD: v3_prn.c,v 1.17 2014/07/11 08:44:49 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* X509 v3 extension utilities */

#include <stdio.h>

#include <openssl/conf.h>
#include <openssl/x509v3.h>

/* Extension printing routines */

static int unknown_ext_print(BIO *out, X509_EXTENSION *ext, unsigned long flag,
    int indent, int supported);

/* Print out a name+value stack */

void
X509V3_EXT_val_prn(BIO *out, STACK_OF(CONF_VALUE) *val, int indent, int ml)
{
	int i;
	CONF_VALUE *nval;

	if (!val)
		return;
	if (!ml || !sk_CONF_VALUE_num(val)) {
		BIO_printf(out, "%*s", indent, "");
		if (!sk_CONF_VALUE_num(val))
			BIO_puts(out, "<EMPTY>\n");
	}
	for (i = 0; i < sk_CONF_VALUE_num(val); i++) {
		if (ml)
			BIO_printf(out, "%*s", indent, "");
		else if (i > 0) BIO_printf(out, ", ");
			nval = sk_CONF_VALUE_value(val, i);
		if (!nval->name)
			BIO_puts(out, nval->value);
		else if (!nval->value)
			BIO_puts(out, nval->name);
		else
			BIO_printf(out, "%s:%s", nval->name, nval->value);
		if (ml)
			BIO_puts(out, "\n");
	}
}

/* Main routine: print out a general extension */

int
X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent)
{
	void *ext_str = NULL;
	char *value = NULL;
	const unsigned char *p;
	const X509V3_EXT_METHOD *method;
	STACK_OF(CONF_VALUE) *nval = NULL;
	int ok = 1;

	if (!(method = X509V3_EXT_get(ext)))
		return unknown_ext_print(out, ext, flag, indent, 0);
	p = ext->value->data;
	if (method->it)
		ext_str = ASN1_item_d2i(NULL, &p, ext->value->length,
		    ASN1_ITEM_ptr(method->it));
	else
		ext_str = method->d2i(NULL, &p, ext->value->length);

	if (!ext_str)
		return unknown_ext_print(out, ext, flag, indent, 1);

	if (method->i2s) {
		if (!(value = method->i2s(method, ext_str))) {
			ok = 0;
			goto err;
		}
		BIO_printf(out, "%*s%s", indent, "", value);
	} else if (method->i2v) {
		if (!(nval = method->i2v(method, ext_str, NULL))) {
			ok = 0;
			goto err;
		}
		X509V3_EXT_val_prn(out, nval, indent,
		    method->ext_flags & X509V3_EXT_MULTILINE);
	} else if (method->i2r) {
		if (!method->i2r(method, ext_str, out, indent))
			ok = 0;
	} else
		ok = 0;

err:
	sk_CONF_VALUE_pop_free(nval, X509V3_conf_free);
	free(value);
	if (method->it)
		ASN1_item_free(ext_str, ASN1_ITEM_ptr(method->it));
	else
		method->ext_free(ext_str);
	return ok;
}

int
X509V3_extensions_print(BIO *bp, char *title, STACK_OF(X509_EXTENSION) *exts,
    unsigned long flag, int indent)
{
	int i, j;

	if (sk_X509_EXTENSION_num(exts) <= 0)
		return 1;

	if (title) {
		BIO_printf(bp, "%*s%s:\n",indent, "", title);
		indent += 4;
	}

	for (i = 0; i < sk_X509_EXTENSION_num(exts); i++) {
		ASN1_OBJECT *obj;
		X509_EXTENSION *ex;
		ex = sk_X509_EXTENSION_value(exts, i);
		if (indent && BIO_printf(bp, "%*s",indent, "") <= 0)
			return 0;
		obj = X509_EXTENSION_get_object(ex);
		i2a_ASN1_OBJECT(bp, obj);
		j = X509_EXTENSION_get_critical(ex);
		if (BIO_printf(bp, ": %s\n",j?"critical":"") <= 0)
			return 0;
		if (!X509V3_EXT_print(bp, ex, flag, indent + 4)) {
			BIO_printf(bp, "%*s", indent + 4, "");
			ASN1_STRING_print(bp, ex->value);
		}
		if (BIO_write(bp, "\n",1) <= 0)
			return 0;
	}
	return 1;
}

static int
unknown_ext_print(BIO *out, X509_EXTENSION *ext, unsigned long flag,
    int indent, int supported)
{
	switch (flag & X509V3_EXT_UNKNOWN_MASK) {
	case X509V3_EXT_DEFAULT:
		return 0;
	case X509V3_EXT_ERROR_UNKNOWN:
		if (supported)
			BIO_printf(out, "%*s<Parse Error>", indent, "");
		else
			BIO_printf(out, "%*s<Not Supported>", indent, "");
		return 1;
	case X509V3_EXT_PARSE_UNKNOWN:
		return ASN1_parse_dump(out,
		    ext->value->data, ext->value->length, indent, -1);
	case X509V3_EXT_DUMP_UNKNOWN:
		return BIO_dump_indent(out, (char *)ext->value->data,
		    ext->value->length, indent);
	default:
		return 1;
	}
}


int
X509V3_EXT_print_fp(FILE *fp, X509_EXTENSION *ext, int flag, int indent)
{
	BIO *bio_tmp;
	int ret;

	if (!(bio_tmp = BIO_new_fp(fp, BIO_NOCLOSE)))
		return 0;
	ret = X509V3_EXT_print(bio_tmp, ext, flag, indent);
	BIO_free(bio_tmp);
	return ret;
}
@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_prn.c,v 1.16 2014/06/12 15:49:31 deraadt Exp $ */
d181 1
a181 1
			M_ASN1_OCTET_STRING_print(bp, ex->value);
@


1.16
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d61 1
a61 1
#include "cryptlib.h"
@


1.15
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* v3_prn.c */
@


1.14
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d146 1
a146 2
	if (value)
		free(value);
@


1.13
log
@KNF.
@
text
@a214 1
#ifndef OPENSSL_NO_FP_API
a226 1
#endif
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d67 2
a68 1
static int unknown_ext_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent, int supported);
d72 2
a73 1
void X509V3_EXT_val_prn(BIO *out, STACK_OF(CONF_VALUE) *val, int indent, int ml)
d77 4
a80 2
	if(!val) return;
	if(!ml || !sk_CONF_VALUE_num(val)) {
d82 2
a83 1
		if(!sk_CONF_VALUE_num(val)) BIO_puts(out, "<EMPTY>\n");
d85 13
a97 8
	for(i = 0; i < sk_CONF_VALUE_num(val); i++) {
		if(ml) BIO_printf(out, "%*s", indent, "");
		else if(i > 0) BIO_printf(out, ", ");
		nval = sk_CONF_VALUE_value(val, i);
		if(!nval->name) BIO_puts(out, nval->value);
		else if(!nval->value) BIO_puts(out, nval->name);
		else BIO_printf(out, "%s:%s", nval->name, nval->value);
		if(ml) BIO_puts(out, "\n");
d103 2
a104 1
int X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent)
d109 1
a109 1
	const X509V3_EXT_METHOD *method;	
d113 1
a113 1
	if(!(method = X509V3_EXT_get(ext)))
d116 5
a120 2
	if(method->it) ext_str = ASN1_item_d2i(NULL, &p, ext->value->length, ASN1_ITEM_ptr(method->it));
	else ext_str = method->d2i(NULL, &p, ext->value->length);
d122 2
a123 1
	if(!ext_str) return unknown_ext_print(out, ext, flag, indent, 1);
d125 2
a126 2
	if(method->i2s) {
		if(!(value = method->i2s(method, ext_str))) {
d131 2
a132 2
	} else if(method->i2v) {
		if(!(nval = method->i2v(method, ext_str, NULL))) {
d137 16
a152 11
				 method->ext_flags & X509V3_EXT_MULTILINE);
	} else if(method->i2r) {
		if(!method->i2r(method, ext_str, out, indent)) ok = 0;
	} else ok = 0;

	err:
		sk_CONF_VALUE_pop_free(nval, X509V3_conf_free);
		if(value) free(value);
		if(method->it) ASN1_item_free(ext_str, ASN1_ITEM_ptr(method->it));
		else method->ext_free(ext_str);
		return ok;
d155 3
a157 1
int X509V3_extensions_print(BIO *bp, char *title, STACK_OF(X509_EXTENSION) *exts, unsigned long flag, int indent)
d161 2
a162 1
	if(sk_X509_EXTENSION_num(exts) <= 0) return 1;
d164 2
a165 3
	if(title) 
		{
		BIO_printf(bp,"%*s%s:\n",indent, "", title);
d167 1
a167 1
		}
d169 1
a169 2
	for (i=0; i<sk_X509_EXTENSION_num(exts); i++)
		{
d172 2
a173 6
		ex=sk_X509_EXTENSION_value(exts, i);
		if (indent && BIO_printf(bp,"%*s",indent, "") <= 0) return 0;
		obj=X509_EXTENSION_get_object(ex);
		i2a_ASN1_OBJECT(bp,obj);
		j=X509_EXTENSION_get_critical(ex);
		if (BIO_printf(bp,": %s\n",j?"critical":"") <= 0)
d175 6
a180 2
		if(!X509V3_EXT_print(bp, ex, flag, indent + 4))
			{
d182 1
a182 3
			M_ASN1_OCTET_STRING_print(bp,ex->value);
			}
		if (BIO_write(bp,"\n",1) <= 0) return 0;
d184 3
d190 3
a192 1
static int unknown_ext_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent, int supported)
d194 2
a195 3
	switch(flag & X509V3_EXT_UNKNOWN_MASK) {

		case X509V3_EXT_DEFAULT:
d197 2
a198 3

		case X509V3_EXT_ERROR_UNKNOWN:
		if(supported)
d203 7
a209 8

		case X509V3_EXT_PARSE_UNKNOWN:
			return ASN1_parse_dump(out,
				ext->value->data, ext->value->length, indent, -1);
		case X509V3_EXT_DUMP_UNKNOWN:
			return BIO_dump_indent(out, (char *)ext->value->data, ext->value->length, indent);

		default:
d213 1
a213 1
	
d216 2
a217 1
int X509V3_EXT_print_fp(FILE *fp, X509_EXTENSION *ext, int flag, int indent)
d221 3
a223 1
	if(!(bio_tmp = BIO_new_fp(fp, BIO_NOCLOSE))) return 0;
@


1.11
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d129 1
a129 1
		if(value) OPENSSL_free(value);
@


1.10
log
@resolve conflicts, fix local changes
@
text
@a85 1
#ifndef CHARSET_EBCDIC
a86 14
#else
		else {
			int len;
			char *tmp;
			len = strlen(nval->value)+1;
			tmp = OPENSSL_malloc(len);
			if (tmp)
			{
				ascii2ebcdic(tmp, nval->value, len);
				BIO_printf(out, "%s:%s", nval->name, tmp);
				OPENSSL_free(tmp);
			}
		}
#endif
a114 1
#ifndef CHARSET_EBCDIC
a115 14
#else
		{
			int len;
			char *tmp;
			len = strlen(value)+1;
			tmp = OPENSSL_malloc(len);
			if (tmp)
			{
				ascii2ebcdic(tmp, value, len);
				BIO_printf(out, "%*s%s", indent, "", tmp);
				OPENSSL_free(tmp);
			}
		}
#endif
@


1.9
log
@resolve conflicts
@
text
@d113 1
a113 1
	X509V3_EXT_METHOD *method;	
@


1.8
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.7
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d112 1
a112 1
	unsigned char *p;
d116 1
d186 1
a186 1
		if (BIO_printf(bp,": %s\n",j?"critical":"","") <= 0)
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d187 1
a187 1
		if(!X509V3_EXT_print(bp, ex, flag, 12))
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d181 1
a181 1
		if (BIO_printf(bp,"%*s",indent, "") <= 0) return 0;
@


1.4
log
@openssl-engine-0.9.6a merge
@
text
@d67 2
d108 1
a108 1
int X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, int flag, int indent)
d110 2
a111 1
	char *ext_str = NULL, *value = NULL;
d116 2
a117 1
	if(!(method = X509V3_EXT_get(ext))) return 0;
d119 5
a123 1
	if(!(ext_str = method->d2i(NULL, &p, ext->value->length))) return 0;
d159 2
a160 1
		method->ext_free(ext_str);
d164 60
a223 1
#ifndef NO_FP_API
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d88 10
a97 3
			char tmp[10240]; /* 10k is BIO_printf's limit anyway */
			ascii2ebcdic(tmp, nval->value, strlen(nval->value)+1);
			BIO_printf(out, "%s:%s", nval->name, tmp);
d125 10
a134 3
			char tmp[10240]; /* 10k is BIO_printf's limit anyway */
			ascii2ebcdic(tmp, value, strlen(value)+1);
			BIO_printf(out, "%*s%s", indent, "", tmp);
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d136 1
a136 1
		if(value) Free(value);
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d84 1
d86 7
d114 1
d116 7
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a66 2
static int unknown_ext_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent, int supported);

a83 1
#ifndef CHARSET_EBCDIC
a84 14
#else
		else {
			int len;
			char *tmp;
			len = strlen(nval->value)+1;
			tmp = OPENSSL_malloc(len);
			if (tmp)
			{
				ascii2ebcdic(tmp, nval->value, len);
				BIO_printf(out, "%s:%s", nval->name, tmp);
				OPENSSL_free(tmp);
			}
		}
#endif
d91 1
a91 1
int X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent)
d93 1
a93 2
	void *ext_str = NULL;
	char *value = NULL;
d98 1
a98 2
	if(!(method = X509V3_EXT_get(ext)))
		return unknown_ext_print(out, ext, flag, indent, 0);
d100 1
a100 5
	if(method->it) ext_str = ASN1_item_d2i(NULL, &p, ext->value->length, ASN1_ITEM_ptr(method->it));
	else ext_str = method->d2i(NULL, &p, ext->value->length);

	if(!ext_str) return unknown_ext_print(out, ext, flag, indent, 1);

a105 1
#ifndef CHARSET_EBCDIC
a106 14
#else
		{
			int len;
			char *tmp;
			len = strlen(value)+1;
			tmp = OPENSSL_malloc(len);
			if (tmp)
			{
				ascii2ebcdic(tmp, value, len);
				BIO_printf(out, "%*s%s", indent, "", tmp);
				OPENSSL_free(tmp);
			}
		}
#endif
d120 2
a121 3
		if(value) OPENSSL_free(value);
		if(method->it) ASN1_item_free(ext_str, ASN1_ITEM_ptr(method->it));
		else method->ext_free(ext_str);
d125 1
a125 60
int X509V3_extensions_print(BIO *bp, char *title, STACK_OF(X509_EXTENSION) *exts, unsigned long flag, int indent)
{
	int i, j;

	if(sk_X509_EXTENSION_num(exts) <= 0) return 1;

	if(title) 
		{
		BIO_printf(bp,"%*s%s:\n",indent, "", title);
		indent += 4;
		}

	for (i=0; i<sk_X509_EXTENSION_num(exts); i++)
		{
		ASN1_OBJECT *obj;
		X509_EXTENSION *ex;
		ex=sk_X509_EXTENSION_value(exts, i);
		if (BIO_printf(bp,"%*s",indent, "") <= 0) return 0;
		obj=X509_EXTENSION_get_object(ex);
		i2a_ASN1_OBJECT(bp,obj);
		j=X509_EXTENSION_get_critical(ex);
		if (BIO_printf(bp,": %s\n",j?"critical":"","") <= 0)
			return 0;
		if(!X509V3_EXT_print(bp, ex, flag, 12))
			{
			BIO_printf(bp, "%*s", indent + 4, "");
			M_ASN1_OCTET_STRING_print(bp,ex->value);
			}
		if (BIO_write(bp,"\n",1) <= 0) return 0;
		}
	return 1;
}

static int unknown_ext_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent, int supported)
{
	switch(flag & X509V3_EXT_UNKNOWN_MASK) {

		case X509V3_EXT_DEFAULT:
		return 0;

		case X509V3_EXT_ERROR_UNKNOWN:
		if(supported)
			BIO_printf(out, "%*s<Parse Error>", indent, "");
		else
			BIO_printf(out, "%*s<Not Supported>", indent, "");
		return 1;

		case X509V3_EXT_PARSE_UNKNOWN:
			return ASN1_parse_dump(out,
				ext->value->data, ext->value->length, indent, -1);
		case X509V3_EXT_DUMP_UNKNOWN:
			return BIO_dump_indent(out, (char *)ext->value->data, ext->value->length, indent);

		default:
		return 1;
	}
}
	

#ifndef OPENSSL_NO_FP_API
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d181 1
a181 1
		if (indent && BIO_printf(bp,"%*s",indent, "") <= 0) return 0;
@


1.1.1.3
log
@import 0.9.7c
@
text
@d187 1
a187 1
		if(!X509V3_EXT_print(bp, ex, flag, indent + 4))
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d112 1
a112 1
	const unsigned char *p;
a115 1

d185 1
a185 1
		if (BIO_printf(bp,": %s\n",j?"critical":"") <= 0)
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d113 1
a113 1
	const X509V3_EXT_METHOD *method;	
@


