head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	butholakala:1.3
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.3.0.24
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.20
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.18
	OPENBSD_5_3_BASE:1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.3.0.14
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.3.0.12
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.10
	OPENBSD_4_9_BASE:1.3
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.1
	OPENBSD_4_4:1.1.0.26
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.24
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.22
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.20
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.18
	OPENBSD_4_0_BASE:1.1
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.1.0.16
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.14
	OPENBSD_3_8_BASE:1.1
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.1.0.12
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.10
	OPENBSD_3_6_BASE:1.1
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.5;
commitid	5KSZBoxiLebzObKt;

1.5
date	2014.06.22.12.05.09;	author jsing;	state Exp;
branches;
next	1.4;
commitid	6PKo4InI2wtFRRxh;

1.4
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2009.01.05.21.36.38;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.20;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.55;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@/* $OpenBSD: eng_pkey.c,v 1.5 2014/06/22 12:05:09 jsing Exp $ */
/* ====================================================================
 * Copyright (c) 1999-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/err.h>

#include "eng_int.h"

/* Basic get/set stuff */

int
ENGINE_set_load_privkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpriv_f)
{
	e->load_privkey = loadpriv_f;
	return 1;
}

int
ENGINE_set_load_pubkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpub_f)
{
	e->load_pubkey = loadpub_f;
	return 1;
}

int
ENGINE_set_load_ssl_client_cert_function(ENGINE *e,
    ENGINE_SSL_CLIENT_CERT_PTR loadssl_f)
{
	e->load_ssl_client_cert = loadssl_f;
	return 1;
}

ENGINE_LOAD_KEY_PTR
ENGINE_get_load_privkey_function(const ENGINE *e)
{
	return e->load_privkey;
}

ENGINE_LOAD_KEY_PTR
ENGINE_get_load_pubkey_function(const ENGINE *e)
{
	return e->load_pubkey;
}

ENGINE_SSL_CLIENT_CERT_PTR
ENGINE_get_ssl_client_cert_function(const ENGINE *e)
{
	return e->load_ssl_client_cert;
}

/* API functions to load public/private keys */

EVP_PKEY *
ENGINE_load_private_key(ENGINE *e, const char *key_id, UI_METHOD *ui_method,
    void *callback_data)
{
	EVP_PKEY *pkey;

	if (e == NULL) {
		ENGINEerr(ENGINE_F_ENGINE_LOAD_PRIVATE_KEY,
		    ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	if (e->funct_ref == 0) {
		CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
		ENGINEerr(ENGINE_F_ENGINE_LOAD_PRIVATE_KEY,
		    ENGINE_R_NOT_INITIALISED);
		return 0;
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	if (!e->load_privkey) {
		ENGINEerr(ENGINE_F_ENGINE_LOAD_PRIVATE_KEY,
		    ENGINE_R_NO_LOAD_FUNCTION);
		return 0;
	}
	pkey = e->load_privkey(e, key_id, ui_method, callback_data);
	if (!pkey) {
		ENGINEerr(ENGINE_F_ENGINE_LOAD_PRIVATE_KEY,
		    ENGINE_R_FAILED_LOADING_PRIVATE_KEY);
		return 0;
	}
	return pkey;
}

EVP_PKEY *
ENGINE_load_public_key(ENGINE *e, const char *key_id, UI_METHOD *ui_method,
    void *callback_data)
{
	EVP_PKEY *pkey;

	if (e == NULL) {
		ENGINEerr(ENGINE_F_ENGINE_LOAD_PUBLIC_KEY,
		    ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	if (e->funct_ref == 0) {
		CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
		ENGINEerr(ENGINE_F_ENGINE_LOAD_PUBLIC_KEY,
		    ENGINE_R_NOT_INITIALISED);
		return 0;
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	if (!e->load_pubkey) {
		ENGINEerr(ENGINE_F_ENGINE_LOAD_PUBLIC_KEY,
		    ENGINE_R_NO_LOAD_FUNCTION);
		return 0;
	}
	pkey = e->load_pubkey(e, key_id, ui_method, callback_data);
	if (!pkey) {
		ENGINEerr(ENGINE_F_ENGINE_LOAD_PUBLIC_KEY,
		    ENGINE_R_FAILED_LOADING_PUBLIC_KEY);
		return 0;
	}
	return pkey;
}

int
ENGINE_load_ssl_client_cert(ENGINE *e, SSL *s, STACK_OF(X509_NAME) *ca_dn,
    X509 **pcert, EVP_PKEY **ppkey, STACK_OF(X509) **pother,
    UI_METHOD *ui_method, void *callback_data)
{
	if (e == NULL) {
		ENGINEerr(ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT,
		    ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	if (e->funct_ref == 0) {
		CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
		ENGINEerr(ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT,
		    ENGINE_R_NOT_INITIALISED);
		return 0;
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	if (!e->load_ssl_client_cert) {
		ENGINEerr(ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT,
		    ENGINE_R_NO_LOAD_FUNCTION);
		return 0;
	}
	return e->load_ssl_client_cert(e, s, ca_dn, pcert, ppkey, pother,
	    ui_method, callback_data);
}
@


1.5
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: eng_pkey.c,v 1.4 2014/06/12 15:49:29 deraadt Exp $ */
d55 2
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d10 1
a10 1
 *    notice, this list of conditions and the following disclaimer. 
d60 3
a62 2
int ENGINE_set_load_privkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpriv_f)
	{
d65 1
a65 1
	}
d67 3
a69 2
int ENGINE_set_load_pubkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpub_f)
	{
d72 1
a72 1
	}
d74 4
a77 3
int ENGINE_set_load_ssl_client_cert_function(ENGINE *e,
				ENGINE_SSL_CLIENT_CERT_PTR loadssl_f)
	{
d80 1
a80 1
	}
d82 3
a84 2
ENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE *e)
	{
d86 1
a86 1
	}
d88 3
a90 2
ENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE *e)
	{
d92 1
a92 1
	}
d94 3
a96 2
ENGINE_SSL_CLIENT_CERT_PTR ENGINE_get_ssl_client_cert_function(const ENGINE *e)
	{
d98 1
a98 1
	}
d102 4
a105 3
EVP_PKEY *ENGINE_load_private_key(ENGINE *e, const char *key_id,
	UI_METHOD *ui_method, void *callback_data)
	{
d108 1
a108 2
	if(e == NULL)
		{
d110 1
a110 1
			ERR_R_PASSED_NULL_PARAMETER);
d112 1
a112 1
		}
d114 1
a114 2
	if(e->funct_ref == 0)
		{
d117 1
a117 1
			ENGINE_R_NOT_INITIALISED);
d119 1
a119 1
		}
d121 1
a121 2
	if (!e->load_privkey)
		{
d123 1
a123 1
			ENGINE_R_NO_LOAD_FUNCTION);
d125 1
a125 1
		}
d127 1
a127 2
	if (!pkey)
		{
d129 1
a129 1
			ENGINE_R_FAILED_LOADING_PRIVATE_KEY);
d131 1
a131 1
		}
d133 1
a133 1
	}
d135 4
a138 3
EVP_PKEY *ENGINE_load_public_key(ENGINE *e, const char *key_id,
	UI_METHOD *ui_method, void *callback_data)
	{
d141 1
a141 2
	if(e == NULL)
		{
d143 1
a143 1
			ERR_R_PASSED_NULL_PARAMETER);
d145 1
a145 1
		}
d147 1
a147 2
	if(e->funct_ref == 0)
		{
d150 1
a150 1
			ENGINE_R_NOT_INITIALISED);
d152 1
a152 1
		}
d154 1
a154 2
	if (!e->load_pubkey)
		{
d156 1
a156 1
			ENGINE_R_NO_LOAD_FUNCTION);
d158 1
a158 1
		}
d160 1
a160 2
	if (!pkey)
		{
d162 1
a162 1
			ENGINE_R_FAILED_LOADING_PUBLIC_KEY);
d164 1
a164 1
		}
d166 1
a166 1
	}
d168 6
a173 7
int ENGINE_load_ssl_client_cert(ENGINE *e, SSL *s,
	STACK_OF(X509_NAME) *ca_dn, X509 **pcert, EVP_PKEY **ppkey,
	STACK_OF(X509) **pother, UI_METHOD *ui_method, void *callback_data)
	{

	if(e == NULL)
		{
d175 1
a175 1
			ERR_R_PASSED_NULL_PARAMETER);
d177 1
a177 1
		}
d179 1
a179 2
	if(e->funct_ref == 0)
		{
d182 1
a182 1
			ENGINE_R_NOT_INITIALISED);
d184 1
a184 1
		}
d186 1
a186 2
	if (!e->load_ssl_client_cert)
		{
d188 1
a188 1
			ENGINE_R_NO_LOAD_FUNCTION);
d190 1
a190 1
		}
d192 2
a193 2
					ui_method, callback_data);
	}
@


1.3
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@d1 1
a1 1
/* crypto/engine/eng_pkey.c */
@


1.2
log
@resolve conflicts
@
text
@d72 7
d89 5
d166 30
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a55 2
#include <openssl/crypto.h>
#include "cryptlib.h"
a56 1
#include <openssl/engine.h>
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d56 2
d59 1
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@a71 7
int ENGINE_set_load_ssl_client_cert_function(ENGINE *e,
				ENGINE_SSL_CLIENT_CERT_PTR loadssl_f)
	{
	e->load_ssl_client_cert = loadssl_f;
	return 1;
	}

a81 5
ENGINE_SSL_CLIENT_CERT_PTR ENGINE_get_ssl_client_cert_function(const ENGINE *e)
	{
	return e->load_ssl_client_cert;
	}

a153 30
	}

int ENGINE_load_ssl_client_cert(ENGINE *e, SSL *s,
	STACK_OF(X509_NAME) *ca_dn, X509 **pcert, EVP_PKEY **ppkey,
	STACK_OF(X509) **pother, UI_METHOD *ui_method, void *callback_data)
	{

	if(e == NULL)
		{
		ENGINEerr(ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT,
			ERR_R_PASSED_NULL_PARAMETER);
		return 0;
		}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	if(e->funct_ref == 0)
		{
		CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
		ENGINEerr(ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT,
			ENGINE_R_NOT_INITIALISED);
		return 0;
		}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	if (!e->load_ssl_client_cert)
		{
		ENGINEerr(ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT,
			ENGINE_R_NO_LOAD_FUNCTION);
		return 0;
		}
	return e->load_ssl_client_cert(e, s, ca_dn, pcert, ppkey, pother,
					ui_method, callback_data);
@


