head	1.22;
access;
symbols
	OPENBSD_6_0:1.22.0.8
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.4
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	butholakala:1.15
	openssl_1_0_1_g:1.1.1.10
	OPENBSD_5_5:1.14.0.8
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.4
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	openssl_1_0_1_c:1.1.1.9
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.8
	openssl_1_0_0_f:1.1.1.8
	openssl_1_0_0_e:1.1.1.8
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	openssh_1_0_0_a:1.1.1.8
	OPENBSD_4_8:1.12.0.8
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.4
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	openssl_0_9_8_k:1.1.1.7
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	openssl_0_9_8_j:1.1.1.7
	openssl_0_9_8_h:1.1.1.6
	pre_openssl_0_9_8h:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	openssl_0_9_7j:1.1.1.5
	openssl:1.1.1
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENSSL_0_9_7G:1.1.1.5
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENSSL_0_9_7C:1.1.1.4
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENSSL_0_9_7B:1.1.1.4
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.3
	OPENSSL_0_9_7_BETA3:1.1.1.3
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2014.10.22.14.02.52;	author jsing;	state Exp;
branches;
next	1.21;
commitid	wlWtun7gIogSyc54;

1.21
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.20;
commitid	nzndm3zqPmFurSaK;

1.20
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	mJUVYpkFBZ0Zv2bG;

1.19
date	2014.05.24.15.25.23;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2014.05.24.10.12.33;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.18.13.13.50;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.15.16.52.50;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.29.05.39.25;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.12.02.18.38;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.10.16.31.55;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.15.02.29.16;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.22.00.03.17;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.58.02;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.42;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.11.14;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.33;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.56;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.56;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.48;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.40.51;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.21.35.43;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.04.29.05.37.14;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.01.09.12.13.59;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2012.10.13.21.23.42;	author djm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.04.13.15.16.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Place most of the RAND_* functions under #ifndef LIBRESSL_INTERNAL (some
are still needed for the engine). Our code should use arc4random instead.
@
text
@/* $OpenBSD: rand.h,v 1.21 2014/07/10 22:45:57 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdlib.h>

#ifndef HEADER_RAND_H
#define HEADER_RAND_H

#include <openssl/opensslconf.h>

#include <openssl/ossl_typ.h>

#ifdef  __cplusplus
extern "C" {
#endif

/* Already defined in ossl_typ.h */
/* typedef struct rand_meth_st RAND_METHOD; */

struct rand_meth_st {
	void (*seed)(const void *buf, int num);
	int (*bytes)(unsigned char *buf, int num);
	void (*cleanup)(void);
	void (*add)(const void *buf, int num, double entropy);
	int (*pseudorand)(unsigned char *buf, int num);
	int (*status)(void);
};

int RAND_set_rand_method(const RAND_METHOD *meth);
const RAND_METHOD *RAND_get_rand_method(void);
#ifndef OPENSSL_NO_ENGINE
int RAND_set_rand_engine(ENGINE *engine);
#endif
RAND_METHOD *RAND_SSLeay(void);

#ifndef LIBRESSL_INTERNAL
void RAND_cleanup(void );
int  RAND_bytes(unsigned char *buf, int num);
int  RAND_pseudo_bytes(unsigned char *buf, int num);
void RAND_seed(const void *buf, int num);
void RAND_add(const void *buf, int num, double entropy);
int  RAND_load_file(const char *file, long max_bytes);
int  RAND_write_file(const char *file);
const char *RAND_file_name(char *file, size_t num);
int RAND_status(void);
int RAND_poll(void);
#endif

/* BEGIN ERROR CODES */
/* The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
void ERR_load_RAND_strings(void);

/* Error codes for the RAND functions. (no longer used) */

/* Function codes. */
#define RAND_F_RAND_GET_RAND_METHOD			 101
#define RAND_F_RAND_INIT_FIPS				 102
#define RAND_F_SSLEAY_RAND_BYTES			 100

/* Reason codes. */
#define RAND_R_DUAL_EC_DRBG_DISABLED			 104
#define RAND_R_ERROR_INITIALISING_DRBG			 102
#define RAND_R_ERROR_INSTANTIATING_DRBG			 103
#define RAND_R_NO_FIPS_RANDOM_METHOD_SET		 101
#define RAND_R_PRNG_NOT_SEEDED				 100

#ifdef  __cplusplus
}
#endif
#endif
@


1.21
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: rand.h,v 1.20 2014/06/12 15:49:30 deraadt Exp $ */
d90 2
d102 1
@


1.20
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 2
a62 2

#include <stdlib.h>
@


1.19
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/rand/rand.h */
@


1.18
log
@Another e_os2.h -> opensslconf.h.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d75 1
a75 2
struct rand_meth_st
	{
d82 1
a82 1
	};
d91 5
a95 5
int  RAND_bytes(unsigned char *buf,int num);
int  RAND_pseudo_bytes(unsigned char *buf,int num);
void RAND_seed(const void *buf,int num);
void RAND_add(const void *buf,int num,double entropy);
int  RAND_load_file(const char *file,long max_bytes);
d97 1
a97 1
const char *RAND_file_name(char *file,size_t num);
@


1.17
log
@egd support is too dangerous to leave where somebody might find it.
ok deraadt.
@
text
@d63 3
a66 1
#include <openssl/e_os2.h>
@


1.16
log
@Replace the old OpenSSL PRNG by direct use of arc4random_buf(), keeping the
existing RAND interfaces unchanged.

All interfaces allowing external feed or seed of the RNG (either from a file
or a local entropy gathering daemon) are kept for ABI compatibility, but are
no longer do anything.

While the OpenSSL PRNG was required 15+ years ago when many systems lacked
proper entropy collection, things have evolved and one can reasonably assume
it is better to use the kernel (system global) entropy pool rather than trying
to build one's own and having to compensate for thread scheduling...

<RANT>
Whoever thought that RAND_screen(), feeding the PRNG with the contents of the
local workstation's display, under Win32, was a smart idea, ought to be banned
from security programming.
</RANT>

ok beck@@ deraadt@@ tedu@@
@
text
@a97 3
int RAND_query_egd_bytes(const char *path, unsigned char *buf, int bytes);
int RAND_egd(const char *path);
int RAND_egd_bytes(const char *path,int bytes);
@


1.15
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@a65 4
#if defined(OPENSSL_SYS_WINDOWS)
#include <windows.h>
#endif

a69 4
#if defined(OPENSSL_FIPS)
#define FIPS_RAND_SIZE_T size_t
#endif

a82 4
#ifdef BN_DEBUG
extern int rand_predictable;
#endif

a102 12
#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32)

void RAND_screen(void);
int RAND_event(UINT, WPARAM, LPARAM);

#endif

#ifdef OPENSSL_FIPS
void RAND_set_fips_drbg_type(int type, int flags);
int RAND_init_fips(void);
#endif

d109 1
a109 1
/* Error codes for the RAND functions. */
@


1.14
log
@resolve conflicts
@
text
@d141 1
@


1.13
log
@resolve conflicts, fix local changes
@
text
@d122 5
d137 1
d141 3
@


1.12
log
@resolve conflicts
@
text
@d75 1
a75 1
#define FIPS_RAND_SIZE_T int
a113 9
#ifndef OPENSSL_NO_ENGINE
#ifdef OPENSSL_FIPS
void int_RAND_init_engine_callbacks(void);
void int_RAND_set_callbacks(
	int (*set_rand_func)(const RAND_METHOD *meth,
						const RAND_METHOD **pmeth),
	const RAND_METHOD *(*get_rand_func)(const RAND_METHOD **pmeth));
#endif
#endif
a130 8
#define RAND_F_ENG_RAND_GET_RAND_METHOD			 108
#define RAND_F_FIPS_RAND				 103
#define RAND_F_FIPS_RAND_BYTES				 102
#define RAND_F_FIPS_RAND_GET_RAND_METHOD		 109
#define RAND_F_FIPS_RAND_SET_DT				 106
#define RAND_F_FIPS_SET_DT				 104
#define RAND_F_FIPS_SET_PRNG_SEED			 107
#define RAND_F_FIPS_SET_TEST_MODE			 105
a134 8
#define RAND_R_NON_FIPS_METHOD				 105
#define RAND_R_NOT_IN_TEST_MODE				 106
#define RAND_R_NO_KEY_SET				 107
#define RAND_R_PRNG_ASKING_FOR_TOO_MUCH			 101
#define RAND_R_PRNG_ERROR				 108
#define RAND_R_PRNG_KEYED				 109
#define RAND_R_PRNG_NOT_REKEYED				 102
#define RAND_R_PRNG_NOT_RESEEDED			 103
a135 2
#define RAND_R_PRNG_SEED_MUST_NOT_MATCH_KEY		 110
#define RAND_R_PRNG_STUCK				 104
@


1.11
log
@resolve conflicts
@
text
@d75 1
a75 1
#define FIPS_RAND_SIZE_T size_t
d114 9
d140 8
d152 8
d161 2
@


1.10
log
@resolve conflicts
@
text
@d75 1
a75 1
#define FIPS_RAND_SIZE_T int
d78 4
a81 1
typedef struct rand_meth_st
d89 1
a89 1
	} RAND_METHOD;
a130 1
#define RAND_F_FIPS_RAND_BYTES				 102
a134 4
#define RAND_R_NON_FIPS_METHOD				 101
#define RAND_R_PRNG_ASKING_FOR_TOO_MUCH			 105
#define RAND_R_PRNG_NOT_REKEYED				 103
#define RAND_R_PRNG_NOT_RESEEDED			 104
a135 1
#define RAND_R_PRNG_STUCK				 102
@


1.9
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d74 4
d128 1
d133 4
d138 1
@


1.8
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d90 1
d92 1
@


1.7
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d64 5
@


1.6
log
@openssl-engine-0.9.6a merge
@
text
@d63 1
d83 3
a85 4
struct engine_st;

int RAND_set_rand_method(struct engine_st *meth);
RAND_METHOD *RAND_get_rand_method(void );
d96 1
a98 1
void ERR_load_RAND_strings(void);
d101 1
a101 10
#ifdef  __cplusplus
}
#endif

#if defined(WINDOWS) || defined(WIN32)
#include <windows.h>

#ifdef  __cplusplus
extern "C" {
#endif
a105 3
#ifdef  __cplusplus
}
#endif
d112 1
d117 1
d123 3
a126 1

@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@d62 2
d94 1
a94 1
const char *RAND_file_name(char *file,int num);
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d80 3
a82 1
void RAND_set_rand_method(RAND_METHOD *meth);
d95 8
d105 5
d112 4
a116 1
void	ERR_load_RAND_strings(void);
a130 3
#ifdef  __cplusplus
}
#endif
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d73 1
d76 4
d93 2
a94 1
#ifdef WINDOWS
d96 1
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d69 1
a69 1
	void (*bytes)(unsigned char *buf, int num);
d71 2
d79 2
a80 1
void RAND_bytes(unsigned char *buf,int num);
d82 1
d85 3
a87 1
char *RAND_file_name(char *file,int num);
d91 15
d109 1
a110 1
#endif
@


1.1
log
@Initial revision
@
text
@d66 10
a75 1
#ifndef NOPROTO
d77 4
a80 4
void RAND_bytes( unsigned char *buf,int num);
void RAND_seed( unsigned char *buf,int num);
int  RAND_load_file(char *file,long max_bytes);
int  RAND_write_file(char *file);
a84 12
#else
void RAND_cleanup();
void RAND_bytes();
void RAND_seed();
int  RAND_load_file();
int  RAND_write_file();
char *RAND_file_name();
#ifdef WINDOWS
void RAND_screen();
#endif
#endif

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a61 3
#include <stdlib.h>
#include <openssl/ossl_typ.h>

d66 1
a66 18
typedef struct rand_meth_st
	{
	void (*seed)(const void *buf, int num);
	int (*bytes)(unsigned char *buf, int num);
	void (*cleanup)(void);
	void (*add)(const void *buf, int num, double entropy);
	int (*pseudorand)(unsigned char *buf, int num);
	int (*status)(void);
	} RAND_METHOD;

#ifdef BN_DEBUG
extern int rand_predictable;
#endif

int RAND_set_rand_method(const RAND_METHOD *meth);
const RAND_METHOD *RAND_get_rand_method(void);
int RAND_set_rand_engine(ENGINE *engine);
RAND_METHOD *RAND_SSLeay(void);
d68 6
a73 15
int  RAND_bytes(unsigned char *buf,int num);
int  RAND_pseudo_bytes(unsigned char *buf,int num);
void RAND_seed(const void *buf,int num);
void RAND_add(const void *buf,int num,double entropy);
int  RAND_load_file(const char *file,long max_bytes);
int  RAND_write_file(const char *file);
const char *RAND_file_name(char *file,size_t num);
int RAND_status(void);
int RAND_query_egd_bytes(const char *path, unsigned char *buf, int bytes);
int RAND_egd(const char *path);
int RAND_egd_bytes(const char *path,int bytes);
int RAND_poll(void);

#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32)

a74 2
int RAND_event(UINT, WPARAM, LPARAM);

d76 11
a86 15

/* BEGIN ERROR CODES */
/* The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
void ERR_load_RAND_strings(void);

/* Error codes for the RAND functions. */

/* Function codes. */
#define RAND_F_RAND_GET_RAND_METHOD			 101
#define RAND_F_SSLEAY_RAND_BYTES			 100

/* Reason codes. */
#define RAND_R_PRNG_NOT_SEEDED				 100
d91 1
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@a63 5
#include <openssl/e_os2.h>

#if defined(OPENSSL_SYS_WINDOWS)
#include <windows.h>
#endif
@


1.1.1.4
log
@import 0.9.7b (without idea and rc5)
@
text
@a89 1
#ifndef OPENSSL_NO_ENGINE
a90 1
#endif
@


1.1.1.5
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a73 4
#if defined(OPENSSL_FIPS)
#define FIPS_RAND_SIZE_T int
#endif

a123 1
#define RAND_F_FIPS_RAND_BYTES				 102
a127 4
#define RAND_R_NON_FIPS_METHOD				 101
#define RAND_R_PRNG_ASKING_FOR_TOO_MUCH			 105
#define RAND_R_PRNG_NOT_REKEYED				 103
#define RAND_R_PRNG_NOT_RESEEDED			 104
a128 1
#define RAND_R_PRNG_STUCK				 102
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d75 1
a75 1
#define FIPS_RAND_SIZE_T size_t
d78 1
a78 4
/* Already defined in ossl_typ.h */
/* typedef struct rand_meth_st RAND_METHOD; */

struct rand_meth_st
d86 1
a86 1
	};
d128 1
d133 4
d138 1
@


1.1.1.7
log
@import openssl-0.9.8j
@
text
@d75 1
a75 1
#define FIPS_RAND_SIZE_T int
a113 9
#ifndef OPENSSL_NO_ENGINE
#ifdef OPENSSL_FIPS
void int_RAND_init_engine_callbacks(void);
void int_RAND_set_callbacks(
	int (*set_rand_func)(const RAND_METHOD *meth,
						const RAND_METHOD **pmeth),
	const RAND_METHOD *(*get_rand_func)(const RAND_METHOD **pmeth));
#endif
#endif
a130 8
#define RAND_F_ENG_RAND_GET_RAND_METHOD			 108
#define RAND_F_FIPS_RAND				 103
#define RAND_F_FIPS_RAND_BYTES				 102
#define RAND_F_FIPS_RAND_GET_RAND_METHOD		 109
#define RAND_F_FIPS_RAND_SET_DT				 106
#define RAND_F_FIPS_SET_DT				 104
#define RAND_F_FIPS_SET_PRNG_SEED			 107
#define RAND_F_FIPS_SET_TEST_MODE			 105
a134 8
#define RAND_R_NON_FIPS_METHOD				 105
#define RAND_R_NOT_IN_TEST_MODE				 106
#define RAND_R_NO_KEY_SET				 107
#define RAND_R_PRNG_ASKING_FOR_TOO_MUCH			 101
#define RAND_R_PRNG_ERROR				 108
#define RAND_R_PRNG_KEYED				 109
#define RAND_R_PRNG_NOT_REKEYED				 102
#define RAND_R_PRNG_NOT_RESEEDED			 103
a135 2
#define RAND_R_PRNG_SEED_MUST_NOT_MATCH_KEY		 110
#define RAND_R_PRNG_STUCK				 104
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@d75 1
a75 1
#define FIPS_RAND_SIZE_T size_t
d114 9
d140 8
d152 8
d161 2
@


1.1.1.9
log
@import OpenSSL-1.0.1c
@
text
@a121 5
#ifdef OPENSSL_FIPS
void RAND_set_fips_drbg_type(int type, int flags);
int RAND_init_fips(void);
#endif

a131 1
#define RAND_F_RAND_INIT_FIPS				 102
a134 3
#define RAND_R_ERROR_INITIALISING_DRBG			 102
#define RAND_R_ERROR_INSTANTIATING_DRBG			 103
#define RAND_R_NO_FIPS_RANDOM_METHOD_SET		 101
@


1.1.1.10
log
@Import OpenSSL 1.0.1g
@
text
@a140 1
#define RAND_R_DUAL_EC_DRBG_DISABLED			 104
@


