head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	butholakala:1.1.1.4
	openssl_1_0_1_g:1.1.1.4
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.8
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.4
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.2
	OPENBSD_5_3_BASE:1.1.1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.1.1.2.0.2
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.4
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	openssh_1_0_0_a:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.09.13.12.03.07;	author jsing;	state Exp;
branches;
next	1.10;
commitid	21OCC5XsRL1dzEHY;

1.10
date	2015.09.13.10.46.20;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yPWY8JsWwm7B0kR7;

1.9
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.8;
commitid	vHznCDK3idwNEFz4;

1.8
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.7;
commitid	gtwLkRyWx0K1HbzX;

1.7
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.6;
commitid	nzndm3zqPmFurSaK;

1.6
date	2014.07.09.11.10.50;	author bcook;	state Exp;
branches;
next	1.5;
commitid	lHJTcoC4c5BhEOGj;

1.5
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	2nvnQBrv22dLtvTt;

1.3
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.11.03.02.32.11;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.04.13.15.16.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Provide ECDH_size().

"jajaja" miod@@
@
text
@/* $OpenBSD: ech_lib.c,v 1.10 2015/09/13 10:46:20 jsing Exp $ */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 *
 * The Elliptic Curve Public-Key Crypto Library (ECC Code) included
 * herein is developed by SUN MICROSYSTEMS, INC., and is contributed
 * to the OpenSSL project.
 *
 * The ECC Code is licensed pursuant to the OpenSSL open source
 * license provided below.
 *
 * The ECDH software is originally written by Douglas Stebila of
 * Sun Microsystems Laboratories.
 *
 */
/* ====================================================================
 * Copyright (c) 1998-2003 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <string.h>

#include <openssl/opensslconf.h>

#include "ech_locl.h"
#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif
#include <openssl/err.h>

static const ECDH_METHOD *default_ECDH_method = NULL;

static void *ecdh_data_new(void);
static void *ecdh_data_dup(void *);
static void  ecdh_data_free(void *);

void
ECDH_set_default_method(const ECDH_METHOD *meth)
{
	default_ECDH_method = meth;
}

const ECDH_METHOD *
ECDH_get_default_method(void)
{
	if (!default_ECDH_method) {
		default_ECDH_method = ECDH_OpenSSL();
	}
	return default_ECDH_method;
}

int
ECDH_set_method(EC_KEY *eckey, const ECDH_METHOD *meth)
{
	ECDH_DATA *ecdh;

	ecdh = ecdh_check(eckey);

	if (ecdh == NULL)
		return 0;

#ifndef OPENSSL_NO_ENGINE
	if (ecdh->engine) {
		ENGINE_finish(ecdh->engine);
		ecdh->engine = NULL;
	}
#endif
	ecdh->meth = meth;
	return 1;
}

static ECDH_DATA *
ECDH_DATA_new_method(ENGINE *engine)
{
	ECDH_DATA *ret;

	ret = malloc(sizeof(ECDH_DATA));
	if (ret == NULL) {
		ECDHerr(ECDH_F_ECDH_DATA_NEW_METHOD, ERR_R_MALLOC_FAILURE);
		return (NULL);
	}

	ret->init = NULL;

	ret->meth = ECDH_get_default_method();
	ret->engine = engine;
#ifndef OPENSSL_NO_ENGINE
	if (!ret->engine)
		ret->engine = ENGINE_get_default_ECDH();
	if (ret->engine) {
		ret->meth = ENGINE_get_ECDH(ret->engine);
		if (!ret->meth) {
			ECDHerr(ECDH_F_ECDH_DATA_NEW_METHOD, ERR_R_ENGINE_LIB);
			ENGINE_finish(ret->engine);
			free(ret);
			return NULL;
		}
	}
#endif

	ret->flags = ret->meth->flags;
	CRYPTO_new_ex_data(CRYPTO_EX_INDEX_ECDH, ret, &ret->ex_data);
	return (ret);
}

static void *
ecdh_data_new(void)
{
	return (void *)ECDH_DATA_new_method(NULL);
}

static void *
ecdh_data_dup(void *data)
{
	ECDH_DATA *r = (ECDH_DATA *)data;

	/* XXX: dummy operation */
	if (r == NULL)
		return NULL;

	return (void *)ecdh_data_new();
}

void
ecdh_data_free(void *data)
{
	ECDH_DATA *r = (ECDH_DATA *)data;

#ifndef OPENSSL_NO_ENGINE
	if (r->engine)
		ENGINE_finish(r->engine);
#endif

	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_ECDH, r, &r->ex_data);

	explicit_bzero((void *)r, sizeof(ECDH_DATA));

	free(r);
}

ECDH_DATA *
ecdh_check(EC_KEY *key)
{
	ECDH_DATA *ecdh_data;

	void *data = EC_KEY_get_key_method_data(key, ecdh_data_dup,
	    ecdh_data_free, ecdh_data_free);
	if (data == NULL) {
		ecdh_data = (ECDH_DATA *)ecdh_data_new();
		if (ecdh_data == NULL)
			return NULL;
		data = EC_KEY_insert_key_method_data(key, (void *)ecdh_data,
		    ecdh_data_dup, ecdh_data_free, ecdh_data_free);
		if (data != NULL) {
			/* Another thread raced us to install the key_method
			 * data and won. */
			ecdh_data_free(ecdh_data);
			ecdh_data = (ECDH_DATA *)data;
		}
	} else
		ecdh_data = (ECDH_DATA *)data;

	return ecdh_data;
}

int
ECDH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
    CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
{
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_ECDH, argl, argp,
	    new_func, dup_func, free_func);
}

int
ECDH_set_ex_data(EC_KEY *d, int idx, void *arg)
{
	ECDH_DATA *ecdh;
	ecdh = ecdh_check(d);
	if (ecdh == NULL)
		return 0;
	return (CRYPTO_set_ex_data(&ecdh->ex_data, idx, arg));
}

void *
ECDH_get_ex_data(EC_KEY *d, int idx)
{
	ECDH_DATA *ecdh;
	ecdh = ecdh_check(d);
	if (ecdh == NULL)
		return NULL;
	return (CRYPTO_get_ex_data(&ecdh->ex_data, idx));
}

int
ECDH_size(const EC_KEY *d)
{
	return ((EC_GROUP_get_degree(EC_KEY_get0_group(d)) + 7) / 8);
}
@


1.10
log
@Lob a style(9) grenade in here.
@
text
@d1 1
a1 1
/* $OpenBSD: ech_lib.c,v 1.9 2015/09/10 15:56:25 jsing Exp $ */
d241 6
@


1.9
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ech_lib.c,v 1.8 2015/02/07 13:19:15 doug Exp $ */
d24 1
a24 1
 *    notice, this list of conditions and the following disclaimer. 
d86 3
a88 2
void ECDH_set_default_method(const ECDH_METHOD *meth)
	{
d90 1
a90 1
	}
d92 4
a95 4
const ECDH_METHOD *ECDH_get_default_method(void)
	{
	if(!default_ECDH_method) 
		{
d97 1
a97 1
		}
d99 1
a99 1
	}
d101 3
a103 2
int ECDH_set_method(EC_KEY *eckey, const ECDH_METHOD *meth)
	{
d112 1
a112 2
	if (ecdh->engine)
		{
d115 1
a115 1
		}
d117 3
a119 3
        ecdh->meth = meth;
        return 1;
	}
d121 3
a123 2
static ECDH_DATA *ECDH_DATA_new_method(ENGINE *engine)
	{
d127 1
a127 2
	if (ret == NULL)
		{
d129 2
a130 2
		return(NULL);
		}
d139 1
a139 2
	if (ret->engine)
		{
d141 1
a141 2
		if (!ret->meth)
			{
a145 1
			}
d147 1
d152 2
a153 2
	return(ret);
	}
d155 3
a157 2
static void *ecdh_data_new(void)
	{
d159 1
a159 1
	}
d161 2
a162 1
static void *ecdh_data_dup(void *data)
d173 3
a175 2
void ecdh_data_free(void *data)
	{
d188 1
a188 1
	}
d190 3
a192 2
ECDH_DATA *ecdh_check(EC_KEY *key)
	{
d194 1
a194 1
 
d196 2
a197 3
					ecdh_data_free, ecdh_data_free);
	if (data == NULL)
	{
d202 2
a203 3
			   ecdh_data_dup, ecdh_data_free, ecdh_data_free);
		if (data != NULL)
			{
d208 2
a209 3
			}
	}
	else
d213 1
a213 1
	}
d215 4
a218 3
int ECDH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
	{
d220 2
a221 2
				new_func, dup_func, free_func);
	}
d223 3
a225 2
int ECDH_set_ex_data(EC_KEY *d, int idx, void *arg)
	{
d230 2
a231 2
	return(CRYPTO_set_ex_data(&ecdh->ex_data,idx,arg));
	}
d233 3
a235 2
void *ECDH_get_ex_data(EC_KEY *d, int idx)
	{
d240 2
a241 2
	return(CRYPTO_get_ex_data(&ecdh->ex_data,idx));
	}
@


1.8
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: ech_lib.c,v 1.7 2014/07/10 22:45:57 jsing Exp $ */
d183 1
a183 1
	OPENSSL_cleanse((void *)r, sizeof(ECDH_DATA));
@


1.7
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: ech_lib.c,v 1.6 2014/07/09 11:10:50 bcook Exp $ */
a108 5
#if 0
        mtmp = ecdh->meth;
        if (mtmp->finish)
		mtmp->finish(eckey);
#endif
a116 4
#if 0
        if (meth->init) 
		meth->init(eckey);
#endif
a152 8
#if 0
	if ((ret->meth->init != NULL) && !ret->meth->init(ret))
		{
		CRYPTO_free_ex_data(CRYPTO_EX_INDEX_ECDH, ret, &ret->ex_data);
		free(ret);
		ret=NULL;
		}
#endif	
@


1.6
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: ech_lib.c,v 1.5 2014/06/12 15:49:29 deraadt Exp $ */
d70 4
a74 1
#include <string.h>
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a75 2

const char ECDH_version[]="ECDH" OPENSSL_VERSION_PTEXT;
@


1.4
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/ecdh/ech_lib.c */
@


1.3
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d132 1
a132 1
	ret=(ECDH_DATA *)malloc(sizeof(ECDH_DATA));
@


1.2
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d132 1
a132 1
	ret=(ECDH_DATA *)OPENSSL_malloc(sizeof(ECDH_DATA));
d153 1
a153 1
			OPENSSL_free(ret);
d165 1
a165 1
		OPENSSL_free(ret);
d201 1
a201 1
	OPENSSL_free(r);
@


1.1
log
@Initial revision
@
text
@d93 1
d95 1
a100 1
	const ECDH_METHOD *mtmp;
d108 1
a109 1
#if 0
d215 9
a223 2
		EC_KEY_insert_key_method_data(key, (void *)ecdh_data,
			ecdh_data_dup, ecdh_data_free, ecdh_data_free);
a226 1
	
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import OpenSSL 1.0.0e
@
text
@d99 1
d107 1
a108 1
        mtmp = ecdh->meth;
@


1.1.1.3
log
@import OpenSSL-1.0.1c
@
text
@a75 3
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif
a92 7
		{
#ifdef OPENSSL_FIPS
		if (FIPS_mode())
			return FIPS_ecdh_openssl();
		else
			return ECDH_OpenSSL();
#else
a93 2
#endif
		}
a217 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(ecdh_data->flags & ECDH_FLAG_FIPS_METHOD)
			&& !(EC_KEY_get_flags(key) & EC_FLAG_NON_FIPS_ALLOW))
		{
		ECDHerr(ECDH_F_ECDH_CHECK, ECDH_R_NON_FIPS_METHOD);
		return NULL;
		}
#endif
@


1.1.1.4
log
@Import OpenSSL 1.0.1g
@
text
@d225 2
a226 9
		data = EC_KEY_insert_key_method_data(key, (void *)ecdh_data,
			   ecdh_data_dup, ecdh_data_free, ecdh_data_free);
		if (data != NULL)
			{
			/* Another thread raced us to install the key_method
			 * data and won. */
			ecdh_data_free(ecdh_data);
			ecdh_data = (ECDH_DATA *)data;
			}
@


