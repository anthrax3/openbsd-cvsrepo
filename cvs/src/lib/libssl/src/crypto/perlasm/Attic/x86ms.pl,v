head	1.9;
access;
symbols
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.6
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.5
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.5
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.4
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.4.0.14
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2010.10.01.22.58.56;	author djm;	state dead;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.24;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.11.22.15.19;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.38;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.41;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.57;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.29;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.54;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.54;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.43;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.37;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.11.11.21.16.35;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.04.29.05.37.13;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@resolve conflicts, fix local changes
@
text
@#!/usr/local/bin/perl

package x86ms;

$label="L000";

%lb=(	'eax',	'al',
	'ebx',	'bl',
	'ecx',	'cl',
	'edx',	'dl',
	'ax',	'al',
	'bx',	'bl',
	'cx',	'cl',
	'dx',	'dl',
	);

%hb=(	'eax',	'ah',
	'ebx',	'bh',
	'ecx',	'ch',
	'edx',	'dh',
	'ax',	'ah',
	'bx',	'bh',
	'cx',	'ch',
	'dx',	'dh',
	);

sub main'asm_init_output { @@out=(); }
sub main'asm_get_output { return(@@out); }
sub main'get_labels { return(@@labels); }
sub main'external_label
{
	push(@@labels,@@_);
	foreach (@@_) {
		push(@@out, "EXTRN\t_$_:DWORD\n");
	}
}

sub main'LB
	{
	(defined($lb{$_[0]})) || die "$_[0] does not have a 'low byte'\n";
	return($lb{$_[0]});
	}

sub main'HB
	{
	(defined($hb{$_[0]})) || die "$_[0] does not have a 'high byte'\n";
	return($hb{$_[0]});
	}

sub main'BP
	{
	&get_mem("BYTE",@@_);
	}

sub main'DWP
	{
	&get_mem("DWORD",@@_);
	}

sub main'QWP
	{
	&get_mem("QWORD",@@_);
	}

sub main'BC
	{
	return @@_;
	}

sub main'DWC
	{
	return @@_;
	}

sub main'stack_push
	{
	local($num)=@@_;
	$stack+=$num*4;
	&main'sub("esp",$num*4);
	}

sub main'stack_pop
	{
	local($num)=@@_;
	$stack-=$num*4;
	&main'add("esp",$num*4);
	}

sub get_mem
	{
	local($size,$addr,$reg1,$reg2,$idx)=@@_;
	local($t,$post);
	local($ret)="$size PTR ";

	$addr =~ s/^\s+//;
	if ($addr =~ /^(.+)\+(.+)$/)
		{
		$reg2=&conv($1);
		$addr="_$2";
		}
	elsif ($addr =~ /^[_a-z][_a-z0-9]*$/i)
		{
		$addr="_$addr";
		}

	if ($addr =~ /^.+\-.+$/) { $addr="($addr)"; }

	$reg1="$regs{$reg1}" if defined($regs{$reg1});
	$reg2="$regs{$reg2}" if defined($regs{$reg2});
	if (($addr ne "") && ($addr ne 0))
		{
		if ($addr !~ /^-/)
			{ $ret.=$addr; }
		else	{ $post=$addr; }
		}
	if ($reg2 ne "")
		{
		$t="";
		$t="*$idx" if ($idx != 0);
		$reg1="+".$reg1 if ("$reg1$post" ne "");
		$ret.="[$reg2$t$reg1$post]";
		}
	else
		{
		$ret.="[$reg1$post]"
		}
	$ret =~ s/\[\]//;	# in case $addr was the only argument
	return($ret);
	}

sub main'mov	{ &out2("mov",@@_); }
sub main'movb	{ &out2("mov",@@_); }
sub main'and	{ &out2("and",@@_); }
sub main'or	{ &out2("or",@@_); }
sub main'shl	{ &out2("shl",@@_); }
sub main'shr	{ &out2("shr",@@_); }
sub main'xor	{ &out2("xor",@@_); }
sub main'xorb	{ &out2("xor",@@_); }
sub main'add	{ &out2("add",@@_); }
sub main'adc	{ &out2("adc",@@_); }
sub main'sub	{ &out2("sub",@@_); }
sub main'sbb	{ &out2("sbb",@@_); }
sub main'rotl	{ &out2("rol",@@_); }
sub main'rotr	{ &out2("ror",@@_); }
sub main'exch	{ &out2("xchg",@@_); }
sub main'cmp	{ &out2("cmp",@@_); }
sub main'lea	{ &out2("lea",@@_); }
sub main'mul	{ &out1("mul",@@_); }
sub main'imul	{ &out2("imul",@@_); }
sub main'div	{ &out1("div",@@_); }
sub main'dec	{ &out1("dec",@@_); }
sub main'inc	{ &out1("inc",@@_); }
sub main'jmp	{ &out1("jmp",@@_); }
sub main'jmp_ptr { &out1p("jmp",@@_); }
sub main'je	{ &out1("je",@@_); }
sub main'jle	{ &out1("jle",@@_); }
sub main'jz	{ &out1("jz",@@_); }
sub main'jge	{ &out1("jge",@@_); }
sub main'jl	{ &out1("jl",@@_); }
sub main'ja	{ &out1("ja",@@_); }
sub main'jae	{ &out1("jae",@@_); }
sub main'jb	{ &out1("jb",@@_); }
sub main'jbe	{ &out1("jbe",@@_); }
sub main'jc	{ &out1("jc",@@_); }
sub main'jnc	{ &out1("jnc",@@_); }
sub main'jnz	{ &out1("jnz",@@_); }
sub main'jne	{ &out1("jne",@@_); }
sub main'jno	{ &out1("jno",@@_); }
sub main'push	{ &out1("push",@@_); $stack+=4; }
sub main'pop	{ &out1("pop",@@_); $stack-=4; }
sub main'pushf	{ &out0("pushfd"); $stack+=4; }
sub main'popf	{ &out0("popfd"); $stack-=4; }
sub main'bswap	{ &out1("bswap",@@_); &using486(); }
sub main'not	{ &out1("not",@@_); }
sub main'call	{ &out1("call",($_[0]=~/^\$L/?'':'_').$_[0]); }
sub main'call_ptr { &out1p("call",@@_); }
sub main'ret	{ &out0("ret"); }
sub main'nop	{ &out0("nop"); }
sub main'test	{ &out2("test",@@_); }
sub main'bt	{ &out2("bt",@@_); }
sub main'leave	{ &out0("leave"); }
sub main'cpuid  { &out0("DW\t0A20Fh"); }
sub main'rdtsc  { &out0("DW\t0310Fh"); }
sub main'halt	{ &out0("hlt"); }
sub main'movz	{ &out2("movzx",@@_); }
sub main'neg	{ &out1("neg",@@_); }
sub main'cld	{ &out0("cld"); }

# SSE2
sub main'emms	{ &out0("emms"); }
sub main'movd	{ &out2("movd",@@_); }
sub main'movq	{ &out2("movq",@@_); }
sub main'movdqu	{ &out2("movdqu",@@_); }
sub main'movdqa	{ &out2("movdqa",@@_); }
sub main'movdq2q{ &out2("movdq2q",@@_); }
sub main'movq2dq{ &out2("movq2dq",@@_); }
sub main'paddq	{ &out2("paddq",@@_); }
sub main'pmuludq{ &out2("pmuludq",@@_); }
sub main'psrlq	{ &out2("psrlq",@@_); }
sub main'psllq	{ &out2("psllq",@@_); }
sub main'pxor	{ &out2("pxor",@@_); }
sub main'por	{ &out2("por",@@_); }
sub main'pand	{ &out2("pand",@@_); }

sub out2
	{
	local($name,$p1,$p2)=@@_;
	local($l,$t,$line);

	$line="\t$name\t";
	$t=&conv($p1).",";
	$l=length($t);
	$line.="$t";
	$l=4-($l+9)/8;
	$line.="\t" x $l;
	$line.=&conv($p2);
	if ($line=~/\bxmm[0-7]\b/i) { $line=~s/\b[A-Z]+WORD\s+PTR/XMMWORD PTR/i; }
	push(@@out,$line."\n");
	}

sub out0
	{
	local($name)=@@_;

	push(@@out,"\t$name\n");
	}

sub out1
	{
	local($name,$p1)=@@_;
	local($l,$t);

	push(@@out,"\t$name\t".&conv($p1)."\n");
	}

sub conv
	{
	local($p)=@@_;

	$p =~ s/0x([0-9A-Fa-f]+)/0$1h/;
	return $p;
	}

sub using486
	{
	return if $using486;
	$using486++;
	grep(s/\.386/\.486/,@@out);
	}

sub main'file
	{
	local($file)=@@_;

	local($tmp)=<<"EOF";
	TITLE	$file.asm
        .386
.model	FLAT
_TEXT\$	SEGMENT PAGE 'CODE'

EOF
	push(@@out,$tmp);
	}

sub main'function_begin
	{
	local($func,$extra)=@@_;

	push(@@labels,$func);

	local($tmp)=<<"EOF";
PUBLIC	_$func
$extra
_$func PROC NEAR
	push	ebp
	push	ebx
	push	esi
	push	edi
EOF
	push(@@out,$tmp);
	$stack=20;
	}

sub main'function_begin_B
	{
	local($func,$extra)=@@_;

	local($tmp)=<<"EOF";
PUBLIC	_$func
$extra
_$func PROC NEAR
EOF
	push(@@out,$tmp);
	$stack=4;
	}

sub main'function_end
	{
	local($func)=@@_;

	local($tmp)=<<"EOF";
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
_$func ENDP
EOF
	push(@@out,$tmp);
	$stack=0;
	%label=();
	}

sub main'function_end_B
	{
	local($func)=@@_;

	local($tmp)=<<"EOF";
_$func ENDP
EOF
	push(@@out,$tmp);
	$stack=0;
	%label=();
	}

sub main'function_end_A
	{
	local($func)=@@_;

	local($tmp)=<<"EOF";
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
EOF
	push(@@out,$tmp);
	}

sub main'file_end
	{
	# try to detect if SSE2 or MMX extensions were used...
	my $xmmheader=<<___;
.686
.XMM
IF \@@Version LT 800
XMMWORD STRUCT 16
	DQ  2 dup (?)
XMMWORD ENDS
ENDIF
___
	if (grep {/\b[x]?mm[0-7]\b/i} @@out) {
		grep {s/\.[3-7]86/$xmmheader/} @@out;
		}
	push(@@out,"_TEXT\$	ENDS\n");
	push(@@out,"END\n");
	}

sub main'wparam
	{
	local($num)=@@_;

	return(&main'DWP($stack+$num*4,"esp","",0));
	}

sub main'swtmp
	{
	return(&main'DWP($_[0]*4,"esp","",0));
	}

# Should use swtmp, which is above esp.  Linix can trash the stack above esp
#sub main'wtmp
#	{
#	local($num)=@@_;
#
#	return(&main'DWP(-(($num+1)*4),"esp","",0));
#	}

sub main'comment
	{
	foreach (@@_)
		{
		push(@@out,"\t; $_\n");
		}
	}

sub main'public_label
	{
	$label{$_[0]}="_$_[0]"	if (!defined($label{$_[0]}));
	push(@@out,"PUBLIC\t$label{$_[0]}\n");
	}

sub main'label
	{
	if (!defined($label{$_[0]}))
		{
		$label{$_[0]}="\$${label}${_[0]}";
		$label++;
		}
	return($label{$_[0]});
	}

sub main'set_label
	{
	if (!defined($label{$_[0]}))
		{
		$label{$_[0]}="\$${label}${_[0]}";
		$label++;
		}
	if ($_[1]!=0 && $_[1]>1)
		{
		main'align($_[1]);
		}
	if((defined $_[2]) && ($_[2] == 1))
		{
		push(@@out,"$label{$_[0]}::\n");
		}
	elsif ($label{$_[0]} !~ /^\$/)
		{
		push(@@out,"$label{$_[0]}\tLABEL PTR\n");
		}
	else
		{
		push(@@out,"$label{$_[0]}:\n");
		}
	}

sub main'data_byte
	{
	push(@@out,"\tDB\t".join(',',@@_)."\n");
	}

sub main'data_word
	{
	push(@@out,"\tDD\t".join(',',@@_)."\n");
	}

sub main'align
	{
	push(@@out,"\tALIGN\t$_[0]\n");
	}

sub out1p
	{
	local($name,$p1)=@@_;
	local($l,$t);

	push(@@out,"\t$name\t".&conv($p1)."\n");
	}

sub main'picmeup
	{
	local($dst,$sym)=@@_;
	&main'lea($dst,&main'DWP($sym));
	}

sub main'blindpop { &out1("pop",@@_); }

sub main'initseg 
	{
	local($f)=@@_;
	local($tmp)=<<___;
OPTION	DOTNAME
.CRT\$XCU	SEGMENT DWORD PUBLIC 'DATA'
EXTRN	_$f:NEAR
DD	_$f
.CRT\$XCU	ENDS
___
	push(@@out,$tmp);
	}

1;
@


1.8
log
@resolve conflicts
@
text
@@


1.7
log
@resolve conflicts
@
text
@d30 7
a36 1
sub main'external_label { push(@@labels,@@_); }
d60 5
d101 1
a101 1
	elsif ($addr =~ /^[_a-zA-Z]/)
d142 1
d149 1
d171 2
d176 1
d179 6
d186 18
d208 1
a208 1
	local($l,$t);
d210 1
a210 1
	push(@@out,"\t$name\t");
d213 1
a213 1
	push(@@out,$t);
d215 4
a218 3
	push(@@out,"\t" x $l);
	push(@@out,&conv($p2));
	push(@@out,"\n");
d258 3
a260 1
.model FLAT
a271 1
_TEXT	SEGMENT
a288 1
_TEXT	SEGMENT
a307 1
_TEXT	ENDS
a319 1
_TEXT	ENDS
d342 14
d387 6
d410 4
d418 4
d428 5
d435 6
a440 1
	push(@@out,"\tDD\t$_[0]\n");
d448 1
a448 1
	push(@@out,"\t$name\t ".&conv($p1)."\n");
d458 15
@


1.6
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d163 1
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d147 2
d150 1
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d95 2
d116 1
d157 1
a157 1
sub main'call	{ &out1("call",'_'.$_[0]); }
d344 1
a344 1
		$label{$_[0]}="${label}${_[0]}";
d369 8
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d344 1
a344 1
	if((defined $_[1]) && ($_[1] == 1))
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d344 8
a351 1
	push(@@out,"$label{$_[0]}:\n");
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#!/usr/bin/perl
d52 10
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d1 1
a1 1
#!/usr/local/bin/perl
a53 10
sub main'BC
	{
	return @@_;
	}

sub main'DWC
	{
	return @@_;
	}

d334 1
a334 8
	if((defined $_[2]) && ($_[2] == 1))
		{
		push(@@out,"$label{$_[0]}::\n");
		}
	else
		{
		push(@@out,"$label{$_[0]}:\n");
		}
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a94 2
	if ($addr =~ /^.+\-.+$/) { $addr="($addr)"; }

a113 1
	$ret =~ s/\[\]//;	# in case $addr was the only argument
d154 1
a154 1
sub main'call	{ &out1("call",($_[0]=~/^\$L/?'':'_').$_[0]); }
d341 1
a341 1
		$label{$_[0]}="\$${label}${_[0]}";
a365 8

sub main'picmeup
	{
	local($dst,$sym)=@@_;
	&main'lea($dst,&main'DWP($sym));
	}

sub main'blindpop { &out1("pop",@@_); }
@


1.1.1.4
log
@import 0.9.7c
@
text
@a146 2
sub main'ja	{ &out1("ja",@@_); }
sub main'jae	{ &out1("jae",@@_); }
a147 1
sub main'jbe	{ &out1("jbe",@@_); }
@


1.1.1.5
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a162 1
sub main'movz	{ &out2("movzx",@@_); }
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d30 1
a30 7
sub main'external_label
{
	push(@@labels,@@_);
	foreach (@@_) {
		push(@@out, "EXTRN\t_$_:DWORD\n");
	}
}
a53 5
sub main'QWP
	{
	&get_mem("QWORD",@@_);
	}

d90 1
a90 1
	elsif ($addr =~ /^[_a-z][_a-z0-9]*$/i)
a130 1
sub main'sbb	{ &out2("sbb",@@_); }
a136 1
sub main'imul	{ &out2("imul",@@_); }
a157 2
sub main'pushf	{ &out0("pushfd"); $stack+=4; }
sub main'popf	{ &out0("popfd"); $stack-=4; }
a160 1
sub main'call_ptr { &out1p("call",@@_); }
a162 6
sub main'test	{ &out2("test",@@_); }
sub main'bt	{ &out2("bt",@@_); }
sub main'leave	{ &out0("leave"); }
sub main'cpuid  { &out0("DW\t0A20Fh"); }
sub main'rdtsc  { &out0("DW\t0310Fh"); }
sub main'halt	{ &out0("hlt"); }
a163 18
sub main'neg	{ &out1("neg",@@_); }
sub main'cld	{ &out0("cld"); }

# SSE2
sub main'emms	{ &out0("emms"); }
sub main'movd	{ &out2("movd",@@_); }
sub main'movq	{ &out2("movq",@@_); }
sub main'movdqu	{ &out2("movdqu",@@_); }
sub main'movdqa	{ &out2("movdqa",@@_); }
sub main'movdq2q{ &out2("movdq2q",@@_); }
sub main'movq2dq{ &out2("movq2dq",@@_); }
sub main'paddq	{ &out2("paddq",@@_); }
sub main'pmuludq{ &out2("pmuludq",@@_); }
sub main'psrlq	{ &out2("psrlq",@@_); }
sub main'psllq	{ &out2("psllq",@@_); }
sub main'pxor	{ &out2("pxor",@@_); }
sub main'por	{ &out2("por",@@_); }
sub main'pand	{ &out2("pand",@@_); }
d168 1
a168 1
	local($l,$t,$line);
d170 1
a170 1
	$line="\t$name\t";
d173 1
a173 1
	$line.="$t";
d175 3
a177 4
	$line.="\t" x $l;
	$line.=&conv($p2);
	if ($line=~/\bxmm[0-7]\b/i) { $line=~s/\b[A-Z]+WORD\s+PTR/XMMWORD PTR/i; }
	push(@@out,$line."\n");
d217 1
a217 3
.model	FLAT
_TEXT\$	SEGMENT PAGE 'CODE'

d229 1
d247 1
d267 1
d280 1
a302 14
	# try to detect if SSE2 or MMX extensions were used...
	my $xmmheader=<<___;
.686
.XMM
IF \@@Version LT 800
XMMWORD STRUCT 16
	DQ  2 dup (?)
XMMWORD ENDS
ENDIF
___
	if (grep {/\b[x]?mm[0-7]\b/i} @@out) {
		grep {s/\.[3-7]86/$xmmheader/} @@out;
		}
	push(@@out,"_TEXT\$	ENDS\n");
a333 6
sub main'public_label
	{
	$label{$_[0]}="_$_[0]"	if (!defined($label{$_[0]}));
	push(@@out,"PUBLIC\t$label{$_[0]}\n");
	}

a350 4
	if ($_[1]!=0 && $_[1]>1)
		{
		main'align($_[1]);
		}
a354 4
	elsif ($label{$_[0]} !~ /^\$/)
		{
		push(@@out,"$label{$_[0]}\tLABEL PTR\n");
		}
a360 5
sub main'data_byte
	{
	push(@@out,"\tDB\t".join(',',@@_)."\n");
	}

d363 1
a363 6
	push(@@out,"\tDD\t".join(',',@@_)."\n");
	}

sub main'align
	{
	push(@@out,"\tALIGN\t$_[0]\n");
d371 1
a371 1
	push(@@out,"\t$name\t".&conv($p1)."\n");
a380 15

sub main'initseg 
	{
	local($f)=@@_;
	local($tmp)=<<___;
OPTION	DOTNAME
.CRT\$XCU	SEGMENT DWORD PUBLIC 'DATA'
EXTRN	_$f:NEAR
DD	_$f
.CRT\$XCU	ENDS
___
	push(@@out,$tmp);
	}

1;
@


