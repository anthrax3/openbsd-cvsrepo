head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	butholakala:1.1.1.4
	openssl_1_0_1_g:1.1.1.4
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.8
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.4
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.2
	OPENBSD_5_3_BASE:1.1.1.4
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.1.1.3.0.6
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.8
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.09.03.11.33.36;	author beck;	state dead;
branches;
next	1.6;
commitid	HnbXxsegngek41U2;

1.6
date	2014.11.13.20.01.58;	author miod;	state Exp;
branches;
next	1.5;
commitid	Z4BWQnoqwqpU2WN1;

1.5
date	2014.07.12.20.11.45;	author miod;	state Exp;
branches;
next	1.4;
commitid	RVnt9Q0PYRvHzNbM;

1.4
date	2014.07.09.11.10.50;	author bcook;	state Exp;
branches;
next	1.3;
commitid	lHJTcoC4c5BhEOGj;

1.3
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.06.11.01.53.02;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	4evB2EbwDYaBfe0g;

1.1
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.13.53;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2012.10.13.21.23.37;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: cmll_misc.c,v 1.6 2014/11/13 20:01:58 miod Exp $ */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 */

#include <openssl/opensslv.h>
#include <openssl/crypto.h>
#include <openssl/camellia.h>
#include "cmll_locl.h"

int
Camellia_set_key(const unsigned char *userKey, const int bits,
    CAMELLIA_KEY *key)
{
	if (userKey == NULL || key == NULL)
		return -1;
	if (bits != 128 && bits != 192 && bits != 256)
		return -2;
	key->grand_rounds = Camellia_Ekeygen(bits, userKey, key->u.rd_key);
	return 0;
}

void
Camellia_encrypt(const unsigned char *in, unsigned char *out,
    const CAMELLIA_KEY *key)
{
	Camellia_EncryptBlock_Rounds(key->grand_rounds, in, key->u.rd_key, out);
}

void
Camellia_decrypt(const unsigned char *in, unsigned char *out,
    const CAMELLIA_KEY *key)
{
	Camellia_DecryptBlock_Rounds(key->grand_rounds, in, key->u.rd_key, out);
}
@


1.6
log
@Sacrifice this code to the KNF deities.
@
text
@d1 1
a1 1
/* $OpenBSD: cmll_misc.c,v 1.5 2014/07/12 20:11:45 miod Exp $ */
@


1.5
log
@Remove private_{Camellia,RC4}_set_key FIPS indirection tentacles, as has been
done for other symmetric algorithms recently.
@
text
@d1 1
a1 1
/* $OpenBSD: cmll_misc.c,v 1.4 2014/07/09 11:10:50 bcook Exp $ */
d51 1
a51 1
 
@


1.4
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: cmll_misc.c,v 1.3 2014/06/12 15:49:28 deraadt Exp $ */
d57 5
a61 4
int private_Camellia_set_key(const unsigned char *userKey, const int bits,
	CAMELLIA_KEY *key)
	{
	if(!userKey || !key)
d63 1
a63 1
	if(bits != 128 && bits != 192 && bits != 256)
d65 1
a65 1
	key->grand_rounds = Camellia_Ekeygen(bits , userKey, key->u.rd_key);
d67 1
a67 1
	}
d69 6
a74 5
void Camellia_encrypt(const unsigned char *in, unsigned char *out,
	const CAMELLIA_KEY *key)
	{
	Camellia_EncryptBlock_Rounds(key->grand_rounds, in , key->u.rd_key , out);
	}
d76 6
a81 5
void Camellia_decrypt(const unsigned char *in, unsigned char *out,
	const CAMELLIA_KEY *key)
	{
	Camellia_DecryptBlock_Rounds(key->grand_rounds, in , key->u.rd_key , out);
	}
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a55 2

const char CAMELLIA_version[]="CAMELLIA" OPENSSL_VERSION_PTEXT;
@


1.2
log
@c-file-style hints, begone; ok beck
@
text
@d1 1
a1 1
/* crypto/camellia/camellia_misc.c */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* crypto/camellia/camellia_misc.c -*- mode:C; c-file-style: "eay" -*- */
d53 1
d59 1
a59 1
int Camellia_set_key(const unsigned char *userKey, const int bits,
d62 1
a62 2
	if (!userKey || !key)
		{
d64 1
a64 20
		}
	
	switch(bits)
		{
	case 128:
		camellia_setup128(userKey, (unsigned int *)key->rd_key);
		key->enc = camellia_encrypt128;
		key->dec = camellia_decrypt128;
		break;
	case 192:
		camellia_setup192(userKey, (unsigned int *)key->rd_key);
		key->enc = camellia_encrypt256;
		key->dec = camellia_decrypt256;
		break;
	case 256:
		camellia_setup256(userKey, (unsigned int *)key->rd_key);
		key->enc = camellia_encrypt256;
		key->dec = camellia_decrypt256;
		break;
	default:
d66 1
a66 3
		}
	
	key->bitLength = bits;
d73 1
a73 8
	u32 tmp[CAMELLIA_BLOCK_SIZE/sizeof(u32)];
	const union { long one; char little; } camellia_endian = {1};

	memcpy(tmp, in, CAMELLIA_BLOCK_SIZE);
	if (camellia_endian.little) SWAP4WORD(tmp);
	key->enc(key->rd_key, tmp);
	if (camellia_endian.little) SWAP4WORD(tmp);
	memcpy(out, tmp, CAMELLIA_BLOCK_SIZE);
d79 1
a79 8
	u32 tmp[CAMELLIA_BLOCK_SIZE/sizeof(u32)];
	const union { long one; char little; } camellia_endian = {1};

	memcpy(tmp, in, CAMELLIA_BLOCK_SIZE);
	if (camellia_endian.little) SWAP4WORD(tmp);
	key->dec(key->rd_key, tmp);
	if (camellia_endian.little) SWAP4WORD(tmp);
	memcpy(out, tmp, CAMELLIA_BLOCK_SIZE);
a80 1

@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@a54 4
#include <openssl/crypto.h>
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif
a59 9
#ifdef OPENSSL_FIPS
	{
	if (FIPS_mode())
		FIPS_BAD_ABORT(CAMELLIA)
	return private_Camellia_set_key(userKey, bits, key);
	}
int private_Camellia_set_key(const unsigned char *userKey, const int bits,
	CAMELLIA_KEY *key)
#endif
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d55 4
d64 1
d66 10
a75 1
	if(!userKey || !key)
d77 20
a96 1
	if(bits != 128 && bits != 192 && bits != 256)
d98 3
a100 1
	key->grand_rounds = Camellia_Ekeygen(bits , userKey, key->u.rd_key);
d107 8
a114 1
	Camellia_EncryptBlock_Rounds(key->grand_rounds, in , key->u.rd_key , out);
d120 8
a127 1
	Camellia_DecryptBlock_Rounds(key->grand_rounds, in , key->u.rd_key , out);
d129 1
@


1.1.1.4
log
@import OpenSSL-1.0.1c
@
text
@a52 1
#include <openssl/crypto.h>
d58 1
a58 1
int private_Camellia_set_key(const unsigned char *userKey, const int bits,
@


