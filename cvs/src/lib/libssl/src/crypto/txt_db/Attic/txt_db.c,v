head	1.19;
access;
symbols
	OPENBSD_6_0:1.18.0.10
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.8
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.6
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.09.03.11.33.39;	author beck;	state dead;
branches;
next	1.18;
commitid	HnbXxsegngek41U2;

1.18
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.09.11.10.51;	author bcook;	state Exp;
branches;
next	1.16;
commitid	lHJTcoC4c5BhEOGj;

1.16
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	mJUVYpkFBZ0Zv2bG;

1.15
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.05.29.21.19.30;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.05.29.21.07.43;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.26.11.08.10;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.25.14.53.22;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.07.03.45.34;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.12;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.12.06;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.48;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.48;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.57;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.49;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: txt_db.c,v 1.18 2014/07/11 08:44:49 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/buffer.h>
#include <openssl/txt_db.h>

#undef BUFSIZE
#define BUFSIZE	512

TXT_DB *
TXT_DB_read(BIO *in, int num)
{
	TXT_DB *ret = NULL;
	int er = 1;
	int esc = 0;
	long ln = 0;
	int i, add, n;
	int size = BUFSIZE;
	int offset = 0;
	char *p, *f;
	OPENSSL_STRING *pp;
	BUF_MEM *buf = NULL;

	if ((buf = BUF_MEM_new()) == NULL)
		goto err;
	if (!BUF_MEM_grow(buf, size))
		goto err;

	if ((ret = malloc(sizeof(TXT_DB))) == NULL)
		goto err;
	ret->num_fields = num;
	ret->index = NULL;
	ret->qual = NULL;
	if ((ret->data = sk_OPENSSL_PSTRING_new_null()) == NULL)
		goto err;
	if ((ret->index = reallocarray(NULL, num, sizeof(*ret->index))) == NULL)
		goto err;
	if ((ret->qual = reallocarray(NULL, num, sizeof(*(ret->qual)))) == NULL)
		goto err;
	for (i = 0; i < num; i++) {
		ret->index[i] = NULL;
		ret->qual[i] = NULL;
	}

	add = (num + 1)*sizeof(char *);
	buf->data[size-1] = '\0';
	offset = 0;
	for (;;) {
		if (offset != 0) {
			size += BUFSIZE;
			if (!BUF_MEM_grow_clean(buf, size))
				goto err;
		}
		buf->data[offset] = '\0';
		BIO_gets(in, &(buf->data[offset]), size - offset);
		ln++;
		if (buf->data[offset] == '\0')
			break;
		if ((offset == 0) && (buf->data[0] == '#'))
			continue;
		i = strlen(&(buf->data[offset]));
		offset += i;
		if (buf->data[offset-1] != '\n')
			continue;
		else {
			buf->data[offset-1] = '\0'; /* blat the '\n' */
			if (!(p = malloc(add + offset)))
				goto err;
			offset = 0;
		}
		pp = (char **)p;
		p += add;
		n = 0;
		pp[n++] = p;
		i = 0;
		f = buf->data;

		esc = 0;
		for (;;) {
			if (*f == '\0')
				break;
			if (*f == '\t') {
				if (esc)
					p--;
				else {
					*(p++)='\0';
					f++;
					if (n >= num)
						break;
					pp[n++] = p;
					continue;
				}
			}
			esc=(*f == '\\');
			*(p++)= *(f++);
		}
		*(p++)='\0';
		if ((n != num) || (*f != '\0')) {
			fprintf(stderr, "wrong number of fields on line %ld (looking for field %d, got %d, '%s' left)\n",ln,num,n,f);
			er = 2;
			goto err;
		}
		pp[n] = p;
		if (!sk_OPENSSL_PSTRING_push(ret->data, pp)) {
			fprintf(stderr, "failure in sk_push\n");
			er = 2;
			goto err;
		}
	}
	er = 0;

err:
	BUF_MEM_free(buf);
	if (er) {
		if (er == 1)
			fprintf(stderr, "malloc failure\n");
		if (ret != NULL) {
			if (ret->data != NULL)
				sk_OPENSSL_PSTRING_free(ret->data);
			free(ret->index);
			free(ret->qual);
			free(ret);
		}
		return (NULL);
	} else
		return (ret);
}

OPENSSL_STRING *
TXT_DB_get_by_index(TXT_DB *db, int idx, OPENSSL_STRING *value)
{
	OPENSSL_STRING *ret;
	LHASH_OF(OPENSSL_STRING) *lh;

	if (idx >= db->num_fields) {
		db->error = DB_ERROR_INDEX_OUT_OF_RANGE;
		return (NULL);
	}
	lh = db->index[idx];
	if (lh == NULL) {
		db->error = DB_ERROR_NO_INDEX;
		return (NULL);
	}
	ret = lh_OPENSSL_STRING_retrieve(lh, value);
	db->error = DB_ERROR_OK;
	return (ret);
}

int
TXT_DB_create_index(TXT_DB *db, int field, int (*qual)(OPENSSL_STRING *),
    LHASH_HASH_FN_TYPE hash, LHASH_COMP_FN_TYPE cmp)
{
	LHASH_OF(OPENSSL_STRING) *idx;
	OPENSSL_STRING *r;
	int i, n;

	if (field >= db->num_fields) {
		db->error = DB_ERROR_INDEX_OUT_OF_RANGE;
		return (0);
	}
	/* FIXME: we lose type checking at this point */
	if ((idx = (LHASH_OF(OPENSSL_STRING) *)lh_new(hash, cmp)) == NULL) {
		db->error = DB_ERROR_MALLOC;
		return (0);
	}
	n = sk_OPENSSL_PSTRING_num(db->data);
	for (i = 0; i < n; i++) {
		r = sk_OPENSSL_PSTRING_value(db->data, i);
		if ((qual != NULL) && (qual(r) == 0))
			continue;
		if ((r = lh_OPENSSL_STRING_insert(idx, r)) != NULL) {
			db->error = DB_ERROR_INDEX_CLASH;
			db->arg1 = sk_OPENSSL_PSTRING_find(db->data, r);
			db->arg2 = i;
			lh_OPENSSL_STRING_free(idx);
			return (0);
		}
	}
	if (db->index[field] != NULL)
		lh_OPENSSL_STRING_free(db->index[field]);
	db->index[field] = idx;
	db->qual[field] = qual;
	return (1);
}

long
TXT_DB_write(BIO *out, TXT_DB *db)
{
	long i, j,n, nn, l, tot = 0;
	char *p, **pp, *f;
	BUF_MEM *buf = NULL;
	long ret = -1;

	if ((buf = BUF_MEM_new()) == NULL)
		goto err;
	n = sk_OPENSSL_PSTRING_num(db->data);
	nn = db->num_fields;
	for (i = 0; i < n; i++) {
		pp = sk_OPENSSL_PSTRING_value(db->data, i);

		l = 0;
		for (j = 0; j < nn; j++) {
			if (pp[j] != NULL)
				l += strlen(pp[j]);
		}
		if (!BUF_MEM_grow_clean(buf, (int)(l*2 + nn)))
			goto err;

		p = buf->data;
		for (j = 0; j < nn; j++) {
			f = pp[j];
			if (f != NULL)
				for (;;) {
					if (*f == '\0')
						break;
					if (*f == '\t')
						*(p++) = '\\';
					*(p++) = *(f++);
				}
			*(p++) = '\t';
		}
		p[-1] = '\n';
		j = p - buf->data;
		if (BIO_write(out, buf->data, (int)j) != j)
			goto err;
		tot += j;
	}
	ret = tot;

err:
	if (buf != NULL)
		BUF_MEM_free(buf);
	return (ret);
}

int
TXT_DB_insert(TXT_DB *db, OPENSSL_STRING *row)
{
	int i;
	OPENSSL_STRING *r;

	for (i = 0; i < db->num_fields; i++) {
		if (db->index[i] != NULL) {
			if ((db->qual[i] != NULL) && (db->qual[i](row) == 0))
				continue;
			r = lh_OPENSSL_STRING_retrieve(db->index[i], row);
			if (r != NULL) {
				db->error = DB_ERROR_INDEX_CLASH;
				db->arg1 = i;
				db->arg_row = r;
				goto err;
			}
		}
	}
	/* We have passed the index checks, now just append and insert */
	if (!sk_OPENSSL_PSTRING_push(db->data, row)) {
		db->error = DB_ERROR_MALLOC;
		goto err;
	}

	for (i = 0; i < db->num_fields; i++) {
		if (db->index[i] != NULL) {
			if ((db->qual[i] != NULL) && (db->qual[i](row) == 0))
				continue;
			(void)lh_OPENSSL_STRING_insert(db->index[i], row);
		}
	}
	return (1);

err:
	return (0);
}

void
TXT_DB_free(TXT_DB *db)
{
	int i, n;
	char **p, *max;

	if (db == NULL)
		return;

	if (db->index != NULL) {
		for (i = db->num_fields - 1; i >= 0; i--)
			if (db->index[i] != NULL)
				lh_OPENSSL_STRING_free(db->index[i]);
		free(db->index);
	}
	free(db->qual);
	if (db->data != NULL) {
		for (i = sk_OPENSSL_PSTRING_num(db->data) - 1; i >= 0; i--) {
			/* check if any 'fields' have been allocated
			 * from outside of the initial block */
			p = sk_OPENSSL_PSTRING_value(db->data, i);
			max = p[db->num_fields]; /* last address */
			if (max == NULL) /* new row */
			{
				for (n = 0; n < db->num_fields; n++)
					free(p[n]);
			} else {
				for (n = 0; n < db->num_fields; n++) {
					if (((p[n] < (char *)p) ||
					    (p[n] > max)) &&
					    (p[n] != NULL))
						free(p[n]);
				}
			}
			free(sk_OPENSSL_PSTRING_value(db->data, i));
		}
		sk_OPENSSL_PSTRING_free(db->data);
	}
	free(db);
}
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: txt_db.c,v 1.17 2014/07/09 11:10:51 bcook Exp $ */
@


1.17
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: txt_db.c,v 1.16 2014/06/12 15:49:31 deraadt Exp $ */
d62 1
a62 1
#include "cryptlib.h"
@


1.16
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a67 2

const char TXT_DB_version[] = "TXT_DB" OPENSSL_VERSION_PTEXT;
@


1.15
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/txt_db/txt_db.c */
@


1.14
log
@ok, next pass after review:  when possible, put the reallocarray arguments
in the "size_t nmemb, size_t size"
@
text
@d181 3
a183 6
			if (ret->index != NULL)
				free(ret->index);
			if (ret->qual != NULL)
				free(ret->qual);
			if (ret != NULL)
				free(ret);
d350 1
a350 2
	if (db->qual != NULL)
		free(db->qual);
d360 1
a360 2
					if (p[n] != NULL)
						free(p[n]);
@


1.13
log
@convert 53 malloc(a*b) to reallocarray(NULL, a, b).  that is 53
potential integer overflows easily changed into an allocation return
of NULL, with errno nicely set if need be.  checks for an allocations
returning NULL are commonplace, or if the object is dereferenced
(quite normal) will result in a nice fault which can be detected &
repaired properly.
ok tedu
@
text
@d97 1
a97 1
	if ((ret->index = reallocarray(NULL, sizeof(*ret->index), num)) == NULL)
d99 1
a99 1
	if ((ret->qual = reallocarray(NULL, sizeof(*(ret->qual)), num)) == NULL)
@


1.12
log
@Do you really want to build OpenSSL for 16-bit Windows? Well, we don't.

ok miod@@
@
text
@d97 1
a97 1
	if ((ret->index = malloc(sizeof(*ret->index)*num)) == NULL)
d99 1
a99 1
	if ((ret->qual = malloc(sizeof(*(ret->qual))*num)) == NULL)
@


1.11
log
@KNF.
@
text
@a159 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)	/* temporary fix :-( */
a160 1
#endif
a165 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)	/* temporary fix :-( */
a166 1
#endif
a175 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)
a177 1
#endif
@


1.10
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d69 1
a69 1
const char TXT_DB_version[]="TXT_DB" OPENSSL_VERSION_PTEXT;
d71 11
a81 10
TXT_DB *TXT_DB_read(BIO *in, int num)
	{
	TXT_DB *ret=NULL;
	int er=1;
	int esc=0;
	long ln=0;
	int i,add,n;
	int size=BUFSIZE;
	int offset=0;
	char *p,*f;
d83 1
a83 1
	BUF_MEM *buf=NULL;
d85 4
a88 2
	if ((buf=BUF_MEM_new()) == NULL) goto err;
	if (!BUF_MEM_grow(buf,size)) goto err;
d90 1
a90 1
	if ((ret=malloc(sizeof(TXT_DB))) == NULL)
d92 4
a95 4
	ret->num_fields=num;
	ret->index=NULL;
	ret->qual=NULL;
	if ((ret->data=sk_OPENSSL_PSTRING_new_null()) == NULL)
d97 1
a97 1
	if ((ret->index=malloc(sizeof(*ret->index)*num)) == NULL)
d99 1
a99 1
	if ((ret->qual=malloc(sizeof(*(ret->qual))*num)) == NULL)
d101 13
a113 4
	for (i=0; i<num; i++)
		{
		ret->index[i]=NULL;
		ret->qual[i]=NULL;
d115 2
a116 13

	add=(num+1)*sizeof(char *);
	buf->data[size-1]='\0';
	offset=0;
	for (;;)
		{
		if (offset != 0)
			{
			size+=BUFSIZE;
			if (!BUF_MEM_grow_clean(buf,size)) goto err;
			}
		buf->data[offset]='\0';
		BIO_gets(in,&(buf->data[offset]),size-offset);
d118 6
a123 4
		if (buf->data[offset] == '\0') break;
		if ((offset == 0) && (buf->data[0] == '#')) continue;
		i=strlen(&(buf->data[offset]));
		offset+=i;
d126 18
a143 19
		else
			{
			buf->data[offset-1]='\0'; /* blat the '\n' */
			if (!(p=malloc(add+offset))) goto err;
			offset=0;
			}
		pp=(char **)p;
		p+=add;
		n=0;
		pp[n++]=p;
		i=0;
		f=buf->data;

		esc=0;
		for (;;)
			{
			if (*f == '\0') break;
			if (*f == '\t')
				{
d146 1
a146 2
				else
					{	
d149 3
a151 2
					if (n >=  num) break;
					pp[n++]=p;
a152 1
					}
d154 1
d157 1
a157 1
			}
d159 1
a159 2
		if ((n != num) || (*f != '\0'))
			{
d161 1
a161 1
			fprintf(stderr,"wrong number of fields on line %ld (looking for field %d, got %d, '%s' left)\n",ln,num,n,f);
d163 1
a163 1
			er=2;
d165 3
a167 4
			}
		pp[n]=p;
		if (!sk_OPENSSL_PSTRING_push(ret->data,pp))
			{
d169 1
a169 1
			fprintf(stderr,"failure in sk_push\n");
d171 1
a171 1
			er=2;
a172 1
			}
d174 3
a176 1
	er=0;
d179 1
a179 2
	if (er)
		{
d181 2
a182 1
		if (er == 1) fprintf(stderr,"malloc failure\n");
d184 18
a201 15
		if (ret != NULL)
			{
			if (ret->data != NULL) sk_OPENSSL_PSTRING_free(ret->data);
			if (ret->index != NULL) free(ret->index);
			if (ret->qual != NULL) free(ret->qual);
			if (ret != NULL) free(ret);
			}
		return(NULL);
		}
	else
		return(ret);
	}

OPENSSL_STRING *TXT_DB_get_by_index(TXT_DB *db, int idx, OPENSSL_STRING *value)
	{
d205 18
a222 19
	if (idx >= db->num_fields)
		{
		db->error=DB_ERROR_INDEX_OUT_OF_RANGE;
		return(NULL);
		}
	lh=db->index[idx];
	if (lh == NULL)
		{
		db->error=DB_ERROR_NO_INDEX;
		return(NULL);
		}
	ret=lh_OPENSSL_STRING_retrieve(lh,value);
	db->error=DB_ERROR_OK;
	return(ret);
	}

int TXT_DB_create_index(TXT_DB *db, int field, int (*qual)(OPENSSL_STRING *),
			LHASH_HASH_FN_TYPE hash, LHASH_COMP_FN_TYPE cmp)
	{
d225 1
a225 1
	int i,n;
d227 4
a230 5
	if (field >= db->num_fields)
		{
		db->error=DB_ERROR_INDEX_OUT_OF_RANGE;
		return(0);
		}
d232 13
a244 15
	if ((idx=(LHASH_OF(OPENSSL_STRING) *)lh_new(hash,cmp)) == NULL)
		{
		db->error=DB_ERROR_MALLOC;
		return(0);
		}
	n=sk_OPENSSL_PSTRING_num(db->data);
	for (i=0; i<n; i++)
		{
		r=sk_OPENSSL_PSTRING_value(db->data,i);
		if ((qual != NULL) && (qual(r) == 0)) continue;
		if ((r=lh_OPENSSL_STRING_insert(idx,r)) != NULL)
			{
			db->error=DB_ERROR_INDEX_CLASH;
			db->arg1=sk_OPENSSL_PSTRING_find(db->data,r);
			db->arg2=i;
d246 1
a246 2
			return(0);
			}
a247 4
	if (db->index[field] != NULL) lh_OPENSSL_STRING_free(db->index[field]);
	db->index[field]=idx;
	db->qual[field]=qual;
	return(1);
d249 14
d264 1
a264 8
long TXT_DB_write(BIO *out, TXT_DB *db)
	{
	long i,j,n,nn,l,tot=0;
	char *p,**pp,*f;
	BUF_MEM *buf=NULL;
	long ret= -1;

	if ((buf=BUF_MEM_new()) == NULL)
d266 4
a269 5
	n=sk_OPENSSL_PSTRING_num(db->data);
	nn=db->num_fields;
	for (i=0; i<n; i++)
		{
		pp=sk_OPENSSL_PSTRING_value(db->data,i);
d271 2
a272 3
		l=0;
		for (j=0; j<nn; j++)
			{
d274 4
a277 3
				l+=strlen(pp[j]);
			}
		if (!BUF_MEM_grow_clean(buf,(int)(l*2+nn))) goto err;
d279 3
a281 4
		p=buf->data;
		for (j=0; j<nn; j++)
			{
			f=pp[j];
d283 12
a294 11
				for (;;) 
					{
					if (*f == '\0') break;
					if (*f == '\t') *(p++)='\\';
					*(p++)= *(f++);
					}
			*(p++)='\t';
			}
		p[-1]='\n';
		j=p-buf->data;
		if (BIO_write(out,buf->data,(int)j) != j)
d296 1
a296 6
		tot+=j;
		}
	ret=tot;
err:
	if (buf != NULL) BUF_MEM_free(buf);
	return(ret);
d298 1
d300 9
a308 2
int TXT_DB_insert(TXT_DB *db, OPENSSL_STRING *row)
	{
d312 9
a320 12
	for (i=0; i<db->num_fields; i++)
		{
		if (db->index[i] != NULL)
			{
			if ((db->qual[i] != NULL) &&
				(db->qual[i](row) == 0)) continue;
			r=lh_OPENSSL_STRING_retrieve(db->index[i],row);
			if (r != NULL)
				{
				db->error=DB_ERROR_INDEX_CLASH;
				db->arg1=i;
				db->arg_row=r;
a321 1
				}
d324 1
d326 2
a327 3
	if (!sk_OPENSSL_PSTRING_push(db->data,row))
		{
		db->error=DB_ERROR_MALLOC;
d329 1
a329 1
		}
d331 5
a335 8
	for (i=0; i<db->num_fields; i++)
		{
		if (db->index[i] != NULL)
			{
			if ((db->qual[i] != NULL) &&
				(db->qual[i](row) == 0)) continue;
			(void)lh_OPENSSL_STRING_insert(db->index[i],row);
			}
a336 3
	return(1);
err:
	return(0);
d338 1
d340 3
a342 7
void TXT_DB_free(TXT_DB *db)
	{
	int i,n;
	char **p,*max;

	if(db == NULL)
	    return;
d344 13
a356 4
	if (db->index != NULL)
		{
		for (i=db->num_fields-1; i>=0; i--)
			if (db->index[i] != NULL) lh_OPENSSL_STRING_free(db->index[i]);
d358 1
a358 1
		}
d361 2
a362 4
	if (db->data != NULL)
		{
		for (i=sk_OPENSSL_PSTRING_num(db->data)-1; i>=0; i--)
			{
d365 2
a366 2
			p=sk_OPENSSL_PSTRING_value(db->data,i);
			max=p[db->num_fields]; /* last address */
d368 9
a376 10
				{
				for (n=0; n<db->num_fields; n++)
					if (p[n] != NULL) free(p[n]);
				}
			else
				{
				for (n=0; n<db->num_fields; n++)
					{
					if (((p[n] < (char *)p) || (p[n] > max))
						&& (p[n] != NULL))
a377 1
					}
a378 1
			free(sk_OPENSSL_PSTRING_value(db->data,i));
d380 2
d383 1
a383 1
		}
d385 1
a385 1
	}
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d87 1
a87 1
	if ((ret=OPENSSL_malloc(sizeof(TXT_DB))) == NULL)
d94 1
a94 1
	if ((ret->index=OPENSSL_malloc(sizeof(*ret->index)*num)) == NULL)
d96 1
a96 1
	if ((ret->qual=OPENSSL_malloc(sizeof(*(ret->qual))*num)) == NULL)
d126 1
a126 1
			if (!(p=OPENSSL_malloc(add+offset))) goto err;
d181 1
a181 1
		if (er == 1) fprintf(stderr,"OPENSSL_malloc failure\n");
d186 3
a188 3
			if (ret->index != NULL) OPENSSL_free(ret->index);
			if (ret->qual != NULL) OPENSSL_free(ret->qual);
			if (ret != NULL) OPENSSL_free(ret);
d357 1
a357 1
		OPENSSL_free(db->index);
d360 1
a360 1
		OPENSSL_free(db->qual);
d372 1
a372 1
					if (p[n] != NULL) OPENSSL_free(p[n]);
d380 1
a380 1
						OPENSSL_free(p[n]);
d383 1
a383 1
			OPENSSL_free(sk_OPENSSL_PSTRING_value(db->data,i));
d387 1
a387 1
	OPENSSL_free(db);
@


1.8
log
@resolve conflicts
@
text
@d80 2
a81 1
	char *p,**pp,*f;
d87 1
a87 1
	if ((ret=(TXT_DB *)OPENSSL_malloc(sizeof(TXT_DB))) == NULL)
d92 1
a92 1
	if ((ret->data=sk_new_null()) == NULL)
d94 1
a94 1
	if ((ret->index=(LHASH **)OPENSSL_malloc(sizeof(LHASH *)*num)) == NULL)
d96 1
a96 1
	if ((ret->qual=(int (**)(char **))OPENSSL_malloc(sizeof(int (**)(char **))*num)) == NULL)
d126 1
a126 1
			if (!(p=(char *)OPENSSL_malloc(add+offset))) goto err;
d159 1
a159 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)	/* temporaty fix :-( */
d166 1
a166 1
		if (!sk_push(ret->data,(char *)pp))
d168 1
a168 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)	/* temporaty fix :-( */
d185 1
a185 1
			if (ret->data != NULL) sk_free(ret->data);
d196 1
a196 1
char **TXT_DB_get_by_index(TXT_DB *db, int idx, char **value)
d198 2
a199 2
	char **ret;
	LHASH *lh;
d212 1
a212 1
	ret=(char **)lh_retrieve(lh,value);
d217 2
a218 2
int TXT_DB_create_index(TXT_DB *db, int field, int (*qual)(char **),
		LHASH_HASH_FN_TYPE hash, LHASH_COMP_FN_TYPE cmp)
d220 2
a221 2
	LHASH *idx;
	char **r;
d229 2
a230 1
	if ((idx=lh_new(hash,cmp)) == NULL)
d235 1
a235 1
	n=sk_num(db->data);
d238 1
a238 1
		r=(char **)sk_value(db->data,i);
d240 1
a240 1
		if ((r=lh_insert(idx,r)) != NULL)
d243 1
a243 1
			db->arg1=sk_find(db->data,(char *)r);
d245 1
a245 1
			lh_free(idx);
d249 1
a249 1
	if (db->index[field] != NULL) lh_free(db->index[field]);
d264 1
a264 1
	n=sk_num(db->data);
d268 1
a268 1
		pp=(char **)sk_value(db->data,i);
d303 1
a303 1
int TXT_DB_insert(TXT_DB *db, char **row)
d306 1
a306 1
	char **r;
d314 1
a314 1
			r=(char **)lh_retrieve(db->index[i],row);
d325 1
a325 1
	if (!sk_push(db->data,(char *)row))
d337 1
a337 1
			lh_insert(db->index[i],row);
d356 1
a356 1
			if (db->index[i] != NULL) lh_free(db->index[i]);
d363 1
a363 1
		for (i=sk_num(db->data)-1; i>=0; i--)
d367 1
a367 1
			p=(char **)sk_value(db->data,i);
d383 1
a383 1
			OPENSSL_free(sk_value(db->data,i));
d385 1
a385 1
		sk_free(db->data);
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d69 1
a69 1
const char *TXT_DB_version="TXT_DB" OPENSSL_VERSION_PTEXT;
d95 1
a95 1
	if ((ret->qual=(int (**)())OPENSSL_malloc(sizeof(int (**)())*num)) == NULL)
d182 7
a188 4
		if (ret->data != NULL) sk_free(ret->data);
		if (ret->index != NULL) OPENSSL_free(ret->index);
		if (ret->qual != NULL) OPENSSL_free(ret->qual);
		if (ret != NULL) OPENSSL_free(ret);
d216 1
a216 1
int TXT_DB_create_index(TXT_DB *db, int field, int (*qual)(),
d220 1
a220 1
	char *r;
d236 1
a236 1
		r=(char *)sk_value(db->data,i);
d241 1
a241 1
			db->arg1=sk_find(db->data,r);
@


1.6
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d111 1
a111 1
			if (!BUF_MEM_grow(buf,size)) goto err;
d271 1
a271 1
		if (!BUF_MEM_grow(buf,(int)(l*2+nn))) goto err;
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d125 1
a125 1
			p=(char *)OPENSSL_malloc(add+offset);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d158 1
a158 1
#if !defined(NO_STDIO) && !defined(WIN16)	/* temporaty fix :-( */
d167 1
a167 1
#if !defined(NO_STDIO) && !defined(WIN16)	/* temporaty fix :-( */
d179 1
a179 1
#if !defined(NO_STDIO) && !defined(WIN16)
d214 1
a214 1
	     unsigned long (*hash)(), int (*cmp)())
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d86 1
a86 1
	if ((ret=(TXT_DB *)Malloc(sizeof(TXT_DB))) == NULL)
d93 1
a93 1
	if ((ret->index=(LHASH **)Malloc(sizeof(LHASH *)*num)) == NULL)
d95 1
a95 1
	if ((ret->qual=(int (**)())Malloc(sizeof(int (**)())*num)) == NULL)
d125 1
a125 1
			p=(char *)Malloc(add+offset);
d180 1
a180 1
		if (er == 1) fprintf(stderr,"Malloc failure\n");
d183 3
a185 3
		if (ret->index != NULL) Free(ret->index);
		if (ret->qual != NULL) Free(ret->qual);
		if (ret != NULL) Free(ret);
d352 1
a352 1
		Free(db->index);
d355 1
a355 1
		Free(db->qual);
d367 1
a367 1
					if (p[n] != NULL) Free(p[n]);
d375 1
a375 1
						Free(p[n]);
d378 1
a378 1
			Free(sk_value(db->data,i));
d382 1
a382 1
	Free(db);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d184 1
a184 1
		if (ret->qual != NULL) Free((char *)ret->qual);
d208 1
a208 1
	ret=(char **)lh_retrieve(lh,(char *)value);
d309 1
a309 1
			r=(char **)lh_retrieve(db->index[i],(char *)row);
d332 1
a332 1
			lh_insert(db->index[i],(char *)row);
@


1.1
log
@Initial revision
@
text
@d63 2
a64 2
#include "buffer.h"
#include "txt_db.h"
d69 1
a69 1
char *TXT_DB_version="TXT_DB part of SSLeay 0.9.0b 29-Jun-1998";
d71 1
a71 3
TXT_DB *TXT_DB_read(in,num)
BIO *in;
int num;
d159 1
a159 1
			fprintf(stderr,"wrong number of fields on line %ld\n",ln);
d192 1
a192 4
char **TXT_DB_get_by_index(db,idx,value)
TXT_DB *db;
int idx;
char **value;
d213 2
a214 6
int TXT_DB_create_index(db,field,qual,hash,cmp)
TXT_DB *db;
int field;
int (*qual)();
unsigned long (*hash)();
int (*cmp)();
d250 1
a250 3
long TXT_DB_write(out,db)
BIO *out;
TXT_DB *db;
d298 1
a298 3
int TXT_DB_insert(db,row)
TXT_DB *db;
char **row;
d340 1
a340 2
void TXT_DB_free(db)
TXT_DB *db;
d344 3
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d63 2
a64 2
#include <openssl/buffer.h>
#include <openssl/txt_db.h>
d69 1
a69 1
const char *TXT_DB_version="TXT_DB" OPENSSL_VERSION_PTEXT;
d71 3
a73 1
TXT_DB *TXT_DB_read(BIO *in, int num)
d88 1
a88 1
	if ((ret=(TXT_DB *)OPENSSL_malloc(sizeof(TXT_DB))) == NULL)
d95 1
a95 1
	if ((ret->index=(LHASH **)OPENSSL_malloc(sizeof(LHASH *)*num)) == NULL)
d97 1
a97 1
	if ((ret->qual=(int (**)())OPENSSL_malloc(sizeof(int (**)())*num)) == NULL)
d127 1
a127 1
			if (!(p=(char *)OPENSSL_malloc(add+offset))) goto err;
d160 2
a161 2
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)	/* temporaty fix :-( */
			fprintf(stderr,"wrong number of fields on line %ld (looking for field %d, got %d, '%s' left)\n",ln,num,n,f);
d169 1
a169 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)	/* temporaty fix :-( */
d181 2
a182 2
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)
		if (er == 1) fprintf(stderr,"OPENSSL_malloc failure\n");
d185 3
a187 3
		if (ret->index != NULL) OPENSSL_free(ret->index);
		if (ret->qual != NULL) OPENSSL_free(ret->qual);
		if (ret != NULL) OPENSSL_free(ret);
d194 4
a197 1
char **TXT_DB_get_by_index(TXT_DB *db, int idx, char **value)
d213 1
a213 1
	ret=(char **)lh_retrieve(lh,value);
d218 6
a223 2
int TXT_DB_create_index(TXT_DB *db, int field, int (*qual)(),
		LHASH_HASH_FN_TYPE hash, LHASH_COMP_FN_TYPE cmp)
d259 3
a261 1
long TXT_DB_write(BIO *out, TXT_DB *db)
d309 3
a311 1
int TXT_DB_insert(TXT_DB *db, char **row)
d322 1
a322 1
			r=(char **)lh_retrieve(db->index[i],row);
d345 1
a345 1
			lh_insert(db->index[i],row);
d353 2
a354 1
void TXT_DB_free(TXT_DB *db)
a358 3
	if(db == NULL)
	    return;

d363 1
a363 1
		OPENSSL_free(db->index);
d366 1
a366 1
		OPENSSL_free(db->qual);
d378 1
a378 1
					if (p[n] != NULL) OPENSSL_free(p[n]);
d386 1
a386 1
						OPENSSL_free(p[n]);
d389 1
a389 1
			OPENSSL_free(sk_value(db->data,i));
d393 1
a393 1
	OPENSSL_free(db);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d111 1
a111 1
			if (!BUF_MEM_grow_clean(buf,size)) goto err;
d271 1
a271 1
		if (!BUF_MEM_grow_clean(buf,(int)(l*2+nn))) goto err;
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d69 1
a69 1
const char TXT_DB_version[]="TXT_DB" OPENSSL_VERSION_PTEXT;
d95 1
a95 1
	if ((ret->qual=(int (**)(char **))OPENSSL_malloc(sizeof(int (**)(char **))*num)) == NULL)
d182 4
a185 7
		if (ret != NULL)
			{
			if (ret->data != NULL) sk_free(ret->data);
			if (ret->index != NULL) OPENSSL_free(ret->index);
			if (ret->qual != NULL) OPENSSL_free(ret->qual);
			if (ret != NULL) OPENSSL_free(ret);
			}
d213 1
a213 1
int TXT_DB_create_index(TXT_DB *db, int field, int (*qual)(char **),
d217 1
a217 1
	char **r;
d233 1
a233 1
		r=(char **)sk_value(db->data,i);
d238 1
a238 1
			db->arg1=sk_find(db->data,(char *)r);
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d80 1
a80 2
	char *p,*f;
	OPENSSL_STRING *pp;
d86 1
a86 1
	if ((ret=OPENSSL_malloc(sizeof(TXT_DB))) == NULL)
d91 1
a91 1
	if ((ret->data=sk_OPENSSL_PSTRING_new_null()) == NULL)
d93 1
a93 1
	if ((ret->index=OPENSSL_malloc(sizeof(*ret->index)*num)) == NULL)
d95 1
a95 1
	if ((ret->qual=OPENSSL_malloc(sizeof(*(ret->qual))*num)) == NULL)
d125 1
a125 1
			if (!(p=OPENSSL_malloc(add+offset))) goto err;
d158 1
a158 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)	/* temporary fix :-( */
d165 1
a165 1
		if (!sk_OPENSSL_PSTRING_push(ret->data,pp))
d167 1
a167 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)	/* temporary fix :-( */
d184 1
a184 1
			if (ret->data != NULL) sk_OPENSSL_PSTRING_free(ret->data);
d195 1
a195 1
OPENSSL_STRING *TXT_DB_get_by_index(TXT_DB *db, int idx, OPENSSL_STRING *value)
d197 2
a198 2
	OPENSSL_STRING *ret;
	LHASH_OF(OPENSSL_STRING) *lh;
d211 1
a211 1
	ret=lh_OPENSSL_STRING_retrieve(lh,value);
d216 2
a217 2
int TXT_DB_create_index(TXT_DB *db, int field, int (*qual)(OPENSSL_STRING *),
			LHASH_HASH_FN_TYPE hash, LHASH_COMP_FN_TYPE cmp)
d219 2
a220 2
	LHASH_OF(OPENSSL_STRING) *idx;
	OPENSSL_STRING *r;
d228 1
a228 2
	/* FIXME: we lose type checking at this point */
	if ((idx=(LHASH_OF(OPENSSL_STRING) *)lh_new(hash,cmp)) == NULL)
d233 1
a233 1
	n=sk_OPENSSL_PSTRING_num(db->data);
d236 1
a236 1
		r=sk_OPENSSL_PSTRING_value(db->data,i);
d238 1
a238 1
		if ((r=lh_OPENSSL_STRING_insert(idx,r)) != NULL)
d241 1
a241 1
			db->arg1=sk_OPENSSL_PSTRING_find(db->data,r);
d243 1
a243 1
			lh_OPENSSL_STRING_free(idx);
d247 1
a247 1
	if (db->index[field] != NULL) lh_OPENSSL_STRING_free(db->index[field]);
d262 1
a262 1
	n=sk_OPENSSL_PSTRING_num(db->data);
d266 1
a266 1
		pp=sk_OPENSSL_PSTRING_value(db->data,i);
d301 1
a301 1
int TXT_DB_insert(TXT_DB *db, OPENSSL_STRING *row)
d304 1
a304 1
	OPENSSL_STRING *r;
d312 1
a312 1
			r=lh_OPENSSL_STRING_retrieve(db->index[i],row);
d323 1
a323 1
	if (!sk_OPENSSL_PSTRING_push(db->data,row))
d335 1
a335 1
			(void)lh_OPENSSL_STRING_insert(db->index[i],row);
d354 1
a354 1
			if (db->index[i] != NULL) lh_OPENSSL_STRING_free(db->index[i]);
d361 1
a361 1
		for (i=sk_OPENSSL_PSTRING_num(db->data)-1; i>=0; i--)
d365 1
a365 1
			p=sk_OPENSSL_PSTRING_value(db->data,i);
d381 1
a381 1
			OPENSSL_free(sk_OPENSSL_PSTRING_value(db->data,i));
d383 1
a383 1
		sk_OPENSSL_PSTRING_free(db->data);
@


