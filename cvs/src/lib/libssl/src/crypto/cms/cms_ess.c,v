head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	butholakala:1.1.1.2
	openssl_1_0_1_g:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.16
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.12
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.6
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.8
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.10.22.13.02.04;	author jsing;	state Exp;
branches;
next	1.6;
commitid	PjnBgKe6Buhbf937;

1.6
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.5;
commitid	yQEL1wOWIearrW15;

1.5
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.24.15.55.21;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.22.21.12.15;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@/* $OpenBSD: cms_ess.c,v 1.6 2014/07/11 08:44:48 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 2008 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <stdlib.h>

#include <openssl/asn1t.h>
#include <openssl/cms.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/x509v3.h>

#include "cms_lcl.h"

DECLARE_ASN1_ITEM(CMS_ReceiptRequest)
DECLARE_ASN1_ITEM(CMS_Receipt)

IMPLEMENT_ASN1_FUNCTIONS(CMS_ReceiptRequest)

/* ESS services: for now just Signed Receipt related */

int
CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr)
{
	ASN1_STRING *str;
	CMS_ReceiptRequest *rr = NULL;

	if (prr)
		*prr = NULL;
	str = CMS_signed_get0_data_by_OBJ(si,
	    OBJ_nid2obj(NID_id_smime_aa_receiptRequest),
	    -3, V_ASN1_SEQUENCE);
	if (!str)
		return 0;

	rr = ASN1_item_unpack(str, ASN1_ITEM_rptr(CMS_ReceiptRequest));
	if (!rr)
		return -1;
	if (prr)
		*prr = rr;
	else
		CMS_ReceiptRequest_free(rr);
	return 1;
}

CMS_ReceiptRequest *
CMS_ReceiptRequest_create0(unsigned char *id, int idlen, int allorfirst,
    STACK_OF(GENERAL_NAMES) *receiptList, STACK_OF(GENERAL_NAMES) *receiptsTo)
{
	CMS_ReceiptRequest *rr = NULL;

	rr = CMS_ReceiptRequest_new();
	if (!rr)
		goto merr;
	if (id)
		ASN1_STRING_set0(rr->signedContentIdentifier, id, idlen);
	else {
		if (!ASN1_STRING_set(rr->signedContentIdentifier, NULL, 32))
			goto merr;
		arc4random_buf(rr->signedContentIdentifier->data, 32);
	}

	sk_GENERAL_NAMES_pop_free(rr->receiptsTo, GENERAL_NAMES_free);
	rr->receiptsTo = receiptsTo;

	if (receiptList) {
		rr->receiptsFrom->type = 1;
		rr->receiptsFrom->d.receiptList = receiptList;
	} else {
		rr->receiptsFrom->type = 0;
		rr->receiptsFrom->d.allOrFirstTier = allorfirst;
	}

	return rr;

merr:
	CMSerr(CMS_F_CMS_RECEIPTREQUEST_CREATE0, ERR_R_MALLOC_FAILURE);
err:
	if (rr)
		CMS_ReceiptRequest_free(rr);
	return NULL;
}

int
CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr)
{
	unsigned char *rrder = NULL;
	int rrderlen, r = 0;

	rrderlen = i2d_CMS_ReceiptRequest(rr, &rrder);
	if (rrderlen < 0)
		goto merr;

	if (!CMS_signed_add1_attr_by_NID(si, NID_id_smime_aa_receiptRequest,
	    V_ASN1_SEQUENCE, rrder, rrderlen))
		goto merr;

	r = 1;

merr:
	if (!r)
		CMSerr(CMS_F_CMS_ADD1_RECEIPTREQUEST, ERR_R_MALLOC_FAILURE);
	free(rrder);
	return r;
}

void
CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr, ASN1_STRING **pcid,
    int *pallorfirst, STACK_OF(GENERAL_NAMES) **plist,
    STACK_OF(GENERAL_NAMES) **prto)
{
	if (pcid)
		*pcid = rr->signedContentIdentifier;
	if (rr->receiptsFrom->type == 0) {
		if (pallorfirst)
			*pallorfirst = (int)rr->receiptsFrom->d.allOrFirstTier;
		if (plist)
			*plist = NULL;
	} else {
		if (pallorfirst)
			*pallorfirst = -1;
		if (plist)
			*plist = rr->receiptsFrom->d.receiptList;
	}
	if (prto)
		*prto = rr->receiptsTo;
}

/* Digest a SignerInfo structure for msgSigDigest attribute processing */

static int
cms_msgSigDigest(CMS_SignerInfo *si, unsigned char *dig, unsigned int *diglen)
{
	const EVP_MD *md;

	md = EVP_get_digestbyobj(si->digestAlgorithm->algorithm);
	if (md == NULL)
		return 0;
	if (!ASN1_item_digest(ASN1_ITEM_rptr(CMS_Attributes_Verify), md,
	    si->signedAttrs, dig, diglen))
		return 0;
	return 1;
}

/* Add a msgSigDigest attribute to a SignerInfo */

int
cms_msgSigDigest_add1(CMS_SignerInfo *dest, CMS_SignerInfo *src)
{
	unsigned char dig[EVP_MAX_MD_SIZE];
	unsigned int diglen;

	if (!cms_msgSigDigest(src, dig, &diglen)) {
		CMSerr(CMS_F_CMS_MSGSIGDIGEST_ADD1, CMS_R_MSGSIGDIGEST_ERROR);
		return 0;
	}
	if (!CMS_signed_add1_attr_by_NID(dest, NID_id_smime_aa_msgSigDigest,
	    V_ASN1_OCTET_STRING, dig, diglen)) {
		CMSerr(CMS_F_CMS_MSGSIGDIGEST_ADD1, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	return 1;
}

/* Verify signed receipt after it has already passed normal CMS verify */

int
cms_Receipt_verify(CMS_ContentInfo *cms, CMS_ContentInfo *req_cms)
{
	int r = 0, i;
	CMS_ReceiptRequest *rr = NULL;
	CMS_Receipt *rct = NULL;
	STACK_OF(CMS_SignerInfo) *sis, *osis;
	CMS_SignerInfo *si, *osi = NULL;
	ASN1_OCTET_STRING *msig, **pcont;
	ASN1_OBJECT *octype;
	unsigned char dig[EVP_MAX_MD_SIZE];
	unsigned int diglen;

	/* Get SignerInfos, also checks SignedData content type */
	osis = CMS_get0_SignerInfos(req_cms);
	sis = CMS_get0_SignerInfos(cms);
	if (!osis || !sis)
		goto err;

	if (sk_CMS_SignerInfo_num(sis) != 1) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY, CMS_R_NEED_ONE_SIGNER);
		goto err;
	}

	/* Check receipt content type */
	if (OBJ_obj2nid(CMS_get0_eContentType(cms)) != NID_id_smime_ct_receipt) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY, CMS_R_NOT_A_SIGNED_RECEIPT);
		goto err;
	}

	/* Extract and decode receipt content */
	pcont = CMS_get0_content(cms);
	if (!pcont || !*pcont) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY, CMS_R_NO_CONTENT);
		goto err;
	}

	rct = ASN1_item_unpack(*pcont, ASN1_ITEM_rptr(CMS_Receipt));

	if (!rct) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY, CMS_R_RECEIPT_DECODE_ERROR);
		goto err;
	}

	/* Locate original request */

	for (i = 0; i < sk_CMS_SignerInfo_num(osis); i++) {
		osi = sk_CMS_SignerInfo_value(osis, i);
		if (!ASN1_STRING_cmp(osi->signature,
		    rct->originatorSignatureValue))
			break;
	}

	if (i == sk_CMS_SignerInfo_num(osis)) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY, CMS_R_NO_MATCHING_SIGNATURE);
		goto err;
	}

	si = sk_CMS_SignerInfo_value(sis, 0);

	/* Get msgSigDigest value and compare */

	msig = CMS_signed_get0_data_by_OBJ(si,
	    OBJ_nid2obj(NID_id_smime_aa_msgSigDigest), -3, V_ASN1_OCTET_STRING);

	if (!msig) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY, CMS_R_NO_MSGSIGDIGEST);
		goto err;
	}

	if (!cms_msgSigDigest(osi, dig, &diglen)) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY, CMS_R_MSGSIGDIGEST_ERROR);
		goto err;
	}

	if (diglen != (unsigned int)msig->length) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY,
		    CMS_R_MSGSIGDIGEST_WRONG_LENGTH);
		goto err;
	}

	if (memcmp(dig, msig->data, diglen)) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY,
		    CMS_R_MSGSIGDIGEST_VERIFICATION_FAILURE);
		goto err;
	}

	/* Compare content types */

	octype = CMS_signed_get0_data_by_OBJ(osi,
	    OBJ_nid2obj(NID_pkcs9_contentType), -3, V_ASN1_OBJECT);
	if (!octype) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY, CMS_R_NO_CONTENT_TYPE);
		goto err;
	}

	/* Compare details in receipt request */

	if (OBJ_cmp(octype, rct->contentType)) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY, CMS_R_CONTENT_TYPE_MISMATCH);
		goto err;
	}

	/* Get original receipt request details */

	if (CMS_get1_ReceiptRequest(osi, &rr) <= 0) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY, CMS_R_NO_RECEIPT_REQUEST);
		goto err;
	}

	if (ASN1_STRING_cmp(rr->signedContentIdentifier,
	    rct->signedContentIdentifier)) {
		CMSerr(CMS_F_CMS_RECEIPT_VERIFY,
		    CMS_R_CONTENTIDENTIFIER_MISMATCH);
		goto err;
	}

	r = 1;

err:
	if (rr)
		CMS_ReceiptRequest_free(rr);
	if (rct)
		M_ASN1_free_of(rct, CMS_Receipt);

	return r;
}

/* Encode a Receipt into an OCTET STRING read for including into content of
 * a SignedData ContentInfo.
 */

ASN1_OCTET_STRING *
cms_encode_Receipt(CMS_SignerInfo *si)
{
	CMS_Receipt rct;
	CMS_ReceiptRequest *rr = NULL;
	ASN1_OBJECT *ctype;
	ASN1_OCTET_STRING *os = NULL;

	/* Get original receipt request */

	/* Get original receipt request details */

	if (CMS_get1_ReceiptRequest(si, &rr) <= 0) {
		CMSerr(CMS_F_CMS_ENCODE_RECEIPT, CMS_R_NO_RECEIPT_REQUEST);
		goto err;
	}

	/* Get original content type */

	ctype = CMS_signed_get0_data_by_OBJ(si,
	    OBJ_nid2obj(NID_pkcs9_contentType), -3, V_ASN1_OBJECT);
	if (!ctype) {
		CMSerr(CMS_F_CMS_ENCODE_RECEIPT, CMS_R_NO_CONTENT_TYPE);
		goto err;
	}

	rct.version = 1;
	rct.contentType = ctype;
	rct.signedContentIdentifier = rr->signedContentIdentifier;
	rct.originatorSignatureValue = si->signature;

	os = ASN1_item_pack(&rct, ASN1_ITEM_rptr(CMS_Receipt), NULL);

err:
	if (rr)
		CMS_ReceiptRequest_free(rr);
	return os;
}
@


1.6
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_ess.c,v 1.5 2014/06/12 15:49:28 deraadt Exp $ */
d54 2
a59 1
#include <openssl/rand.h>
d109 1
a109 3
		if (RAND_pseudo_bytes(rr->signedContentIdentifier->data, 32)
			<= 0)
			goto err;
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a53 1
#include "cryptlib.h"
d55 2
d60 1
a60 2
#include <openssl/err.h>
#include <openssl/cms.h>
@


1.4
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/cms/cms_ess.c */
@


1.3
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d70 3
a72 2
int CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr)
	{
d75 1
d79 2
a80 2
				OBJ_nid2obj(NID_id_smime_aa_receiptRequest),
					-3, V_ASN1_SEQUENCE);
d92 1
a92 1
	}
d94 4
a97 5
CMS_ReceiptRequest *CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
				int allorfirst,
				STACK_OF(GENERAL_NAMES) *receiptList,
				STACK_OF(GENERAL_NAMES) *receiptsTo)
	{
d105 1
a105 2
	else
		{
d108 2
a109 2
		if (RAND_pseudo_bytes(rr->signedContentIdentifier->data, 32) 
					<= 0)
d111 1
a111 1
		}
d116 1
a116 2
	if (receiptList)
		{
d119 1
a119 3
		}
	else
		{
d122 1
a122 1
		}
d126 1
a126 1
	merr:
d128 1
a128 2

	err:
a130 1

d132 1
a132 2
	
	}
d134 3
a136 2
int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr)
	{
d145 1
a145 1
					V_ASN1_SEQUENCE, rrder, rrderlen))
d150 1
a150 1
	merr:
a152 1

a153 1

d155 1
a155 2
	
	}
d157 5
a161 6
void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
					ASN1_STRING **pcid,
					int *pallorfirst,
					STACK_OF(GENERAL_NAMES) **plist,
					STACK_OF(GENERAL_NAMES) **prto)
	{
d164 1
a164 2
	if (rr->receiptsFrom->type == 0)
		{
d169 1
a169 3
		}
	else
		{
d174 1
a174 1
		}
d177 1
a177 1
	}
d181 3
a183 3
static int cms_msgSigDigest(CMS_SignerInfo *si,
				unsigned char *dig, unsigned int *diglen)
	{
d185 1
d190 1
a190 1
						si->signedAttrs, dig, diglen))
d193 1
a193 1
	}
d197 3
a199 2
int cms_msgSigDigest_add1(CMS_SignerInfo *dest, CMS_SignerInfo *src)
	{
d202 2
a203 2
	if (!cms_msgSigDigest(src, dig, &diglen))
		{
d206 1
a206 1
		}
d208 1
a208 2
					V_ASN1_OCTET_STRING, dig, diglen))
		{
d211 1
a211 1
		}
d213 1
a213 1
	}
d217 3
a219 2
int cms_Receipt_verify(CMS_ContentInfo *cms, CMS_ContentInfo *req_cms)
	{
d236 1
a236 2
	if (sk_CMS_SignerInfo_num(sis) != 1)
		{
d239 1
a239 1
		}
d242 1
a242 2
	if (OBJ_obj2nid(CMS_get0_eContentType(cms)) != NID_id_smime_ct_receipt)
		{
d245 1
a245 1
		}
d249 1
a249 2
	if (!pcont || !*pcont)
		{
d252 1
a252 1
		}
d256 1
a256 2
	if (!rct)	
		{
d259 1
a259 1
		}
d263 1
a263 2
	for (i = 0; i < sk_CMS_SignerInfo_num(osis); i++)
		{
d266 1
a266 1
					rct->originatorSignatureValue))
d268 1
a268 1
		}
d270 1
a270 2
	if (i == sk_CMS_SignerInfo_num(osis))
		{
d273 1
a273 1
		}
d280 1
a280 2
				OBJ_nid2obj(NID_id_smime_aa_msgSigDigest),
					-3, V_ASN1_OCTET_STRING);
d282 1
a282 2
	if (!msig)
		{
d285 1
a285 1
		}
d287 1
a287 2
	if (!cms_msgSigDigest(osi, dig, &diglen))
		{
d290 1
a290 1
		}
d292 5
a296 6
	if (diglen != (unsigned int)msig->length)
			{
			CMSerr(CMS_F_CMS_RECEIPT_VERIFY,
				CMS_R_MSGSIGDIGEST_WRONG_LENGTH);
			goto err;
			}
d298 5
a302 6
	if (memcmp(dig, msig->data, diglen))
			{
			CMSerr(CMS_F_CMS_RECEIPT_VERIFY,
				CMS_R_MSGSIGDIGEST_VERIFICATION_FAILURE);
			goto err;
			}
d307 2
a308 4
				OBJ_nid2obj(NID_pkcs9_contentType),
					-3, V_ASN1_OBJECT);
	if (!octype)
		{
d311 1
a311 1
		}
d315 1
a315 2
	if (OBJ_cmp(octype, rct->contentType))
		{
d318 1
a318 1
		}
d322 1
a322 2
	if (CMS_get1_ReceiptRequest(osi, &rr) <= 0)
		{
d325 1
a325 1
		}
d328 1
a328 2
					rct->signedContentIdentifier))
		{
d330 1
a330 1
					CMS_R_CONTENTIDENTIFIER_MISMATCH);
d332 1
a332 1
		}
d336 1
a336 1
	err:
d343 1
a343 2

	}
d349 3
a351 2
ASN1_OCTET_STRING *cms_encode_Receipt(CMS_SignerInfo *si)
	{
d361 1
a361 2
	if (CMS_get1_ReceiptRequest(si, &rr) <= 0)
		{
d364 1
a364 1
		}
d369 2
a370 4
				OBJ_nid2obj(NID_pkcs9_contentType),
					-3, V_ASN1_OBJECT);
	if (!ctype)
		{
d373 1
a373 1
		}
d382 1
a382 1
	err:
a384 1

d386 1
a386 4

	}


@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d159 1
a159 2
	if (rrder)
		free(rrder);
@


1.1
log
@Initial revision
@
text
@d66 1
a66 1
IMPLEMENT_ASN1_FUNCTIONS_const(CMS_ReceiptRequest)
d160 1
a160 1
		OPENSSL_free(rrder);
d347 1
a347 1
	if (!CMS_get1_ReceiptRequest(osi, &rr))
d388 1
a388 1
	if (!CMS_get1_ReceiptRequest(si, &rr))
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@d66 1
a66 1
IMPLEMENT_ASN1_FUNCTIONS(CMS_ReceiptRequest)
d347 1
a347 1
	if (CMS_get1_ReceiptRequest(osi, &rr) <= 0)
d388 1
a388 1
	if (CMS_get1_ReceiptRequest(si, &rr) <= 0)
@

