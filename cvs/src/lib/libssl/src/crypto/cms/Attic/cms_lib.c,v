head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	butholakala:1.1.1.4
	openssl_1_0_1_g:1.1.1.4
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.8
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.4
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.2
	OPENBSD_5_3_BASE:1.1.1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.1.1.2.0.6
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.8
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.03.11.33.36;	author beck;	state dead;
branches;
next	1.4;
commitid	HnbXxsegngek41U2;

1.4
date	2014.07.25.06.05.32;	author doug;	state Exp;
branches;
next	1.3;
commitid	DnBLYuKKjvrWeH3R;

1.3
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.05.24.15.55.21;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.10.13.21.23.38;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.04.13.15.16.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: cms_lib.c,v 1.4 2014/07/25 06:05:32 doug Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 2008 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <openssl/asn1t.h>
#include <openssl/x509.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/bio.h>
#include <openssl/asn1.h>
#include "cms.h"
#include "cms_lcl.h"

IMPLEMENT_ASN1_FUNCTIONS(CMS_ContentInfo)
IMPLEMENT_ASN1_PRINT_FUNCTION(CMS_ContentInfo)

DECLARE_ASN1_ITEM(CMS_CertificateChoices)
DECLARE_ASN1_ITEM(CMS_RevocationInfoChoice)
DECLARE_STACK_OF(CMS_CertificateChoices)
DECLARE_STACK_OF(CMS_RevocationInfoChoice)

const ASN1_OBJECT *
CMS_get0_type(CMS_ContentInfo *cms)
{
	return cms->contentType;
}

CMS_ContentInfo *
cms_Data_create(void)
{
	CMS_ContentInfo *cms;

	cms = CMS_ContentInfo_new();
	if (cms) {
		cms->contentType = OBJ_nid2obj(NID_pkcs7_data);
		/* Never detached */
		CMS_set_detached(cms, 0);
	}
	return cms;
}

BIO *
cms_content_bio(CMS_ContentInfo *cms)
{
	ASN1_OCTET_STRING **pos = CMS_get0_content(cms);

	if (!pos)
		return NULL;
	/* If content detached data goes nowhere: create NULL BIO */
	if (!*pos)
		return BIO_new(BIO_s_null());
	/* If content not detached and created return memory BIO
	 */
	if (!*pos || ((*pos)->flags == ASN1_STRING_FLAG_CONT))
		return BIO_new(BIO_s_mem());
	/* Else content was read in: return read only BIO for it */
	return BIO_new_mem_buf((*pos)->data, (*pos)->length);
}

BIO *
CMS_dataInit(CMS_ContentInfo *cms, BIO *icont)
{
	BIO *cmsbio, *cont;

	if (icont)
		cont = icont;
	else
		cont = cms_content_bio(cms);
	if (!cont) {
		CMSerr(CMS_F_CMS_DATAINIT, CMS_R_NO_CONTENT);
		return NULL;
	}
	switch (OBJ_obj2nid(cms->contentType)) {
	case NID_pkcs7_data:
		return cont;
	case NID_pkcs7_signed:
		cmsbio = cms_SignedData_init_bio(cms);
		break;
	case NID_pkcs7_digest:
		cmsbio = cms_DigestedData_init_bio(cms);
		break;
#ifdef ZLIB
	case NID_id_smime_ct_compressedData:
		cmsbio = cms_CompressedData_init_bio(cms);
		break;
#endif
	case NID_pkcs7_encrypted:
		cmsbio = cms_EncryptedData_init_bio(cms);
		break;
	case NID_pkcs7_enveloped:
		cmsbio = cms_EnvelopedData_init_bio(cms);
		break;
	default:
		CMSerr(CMS_F_CMS_DATAINIT, CMS_R_UNSUPPORTED_TYPE);
		return NULL;
	}

	if (cmsbio)
		return BIO_push(cmsbio, cont);

	if (!icont)
		BIO_free(cont);
	return NULL;
}

int
CMS_dataFinal(CMS_ContentInfo *cms, BIO *cmsbio)
{
	ASN1_OCTET_STRING **pos = CMS_get0_content(cms);

	if (!pos)
		return 0;
	/* If ebmedded content find memory BIO and set content */
	if (*pos && ((*pos)->flags & ASN1_STRING_FLAG_CONT)) {
		BIO *mbio;
		unsigned char *cont;
		long contlen;
		mbio = BIO_find_type(cmsbio, BIO_TYPE_MEM);
		if (!mbio) {
			CMSerr(CMS_F_CMS_DATAFINAL, CMS_R_CONTENT_NOT_FOUND);
			return 0;
		}
		contlen = BIO_get_mem_data(mbio, &cont);
		/* Set bio as read only so its content can't be clobbered */
		BIO_set_flags(mbio, BIO_FLAGS_MEM_RDONLY);
		BIO_set_mem_eof_return(mbio, 0);
		ASN1_STRING_set0(*pos, cont, contlen);
		(*pos)->flags &= ~ASN1_STRING_FLAG_CONT;
	}

	switch (OBJ_obj2nid(cms->contentType)) {
	case NID_pkcs7_data:
	case NID_pkcs7_enveloped:
	case NID_pkcs7_encrypted:
	case NID_id_smime_ct_compressedData:
		/* Nothing to do */
		return 1;
	case NID_pkcs7_signed:
		return cms_SignedData_final(cms, cmsbio);
	case NID_pkcs7_digest:
		return cms_DigestedData_do_final(cms, cmsbio, 0);
	default:
		CMSerr(CMS_F_CMS_DATAFINAL, CMS_R_UNSUPPORTED_TYPE);
		return 0;
	}
}

/* Return an OCTET STRING pointer to content. This allows it to
 * be accessed or set later.
 */

ASN1_OCTET_STRING **CMS_get0_content(CMS_ContentInfo *cms)
{
	switch (OBJ_obj2nid(cms->contentType)) {
	case NID_pkcs7_data:
		return &cms->d.data;
	case NID_pkcs7_signed:
		return &cms->d.signedData->encapContentInfo->eContent;
	case NID_pkcs7_enveloped:
		return &cms->d.envelopedData->encryptedContentInfo->encryptedContent;
	case NID_pkcs7_digest:
		return &cms->d.digestedData->encapContentInfo->eContent;
	case NID_pkcs7_encrypted:
		return &cms->d.encryptedData->encryptedContentInfo->encryptedContent;
	case NID_id_smime_ct_authData:
		return &cms->d.authenticatedData->encapContentInfo->eContent;
	case NID_id_smime_ct_compressedData:
		return &cms->d.compressedData->encapContentInfo->eContent;
	default:
		if (cms->d.other->type == V_ASN1_OCTET_STRING)
			return &cms->d.other->value.octet_string;
		CMSerr(CMS_F_CMS_GET0_CONTENT, CMS_R_UNSUPPORTED_CONTENT_TYPE);
		return NULL;
	}
}

/* Return an ASN1_OBJECT pointer to content type. This allows it to
 * be accessed or set later.
 */

static ASN1_OBJECT **cms_get0_econtent_type(CMS_ContentInfo *cms)
{
	switch (OBJ_obj2nid(cms->contentType)) {
	case NID_pkcs7_signed:
		return &cms->d.signedData->encapContentInfo->eContentType;
	case NID_pkcs7_enveloped:
		return &cms->d.envelopedData->encryptedContentInfo->contentType;
	case NID_pkcs7_digest:
		return &cms->d.digestedData->encapContentInfo->eContentType;
	case NID_pkcs7_encrypted:
		return &cms->d.encryptedData->encryptedContentInfo->contentType;
	case NID_id_smime_ct_authData:
		return &cms->d.authenticatedData->encapContentInfo->eContentType;
	case NID_id_smime_ct_compressedData:
		return &cms->d.compressedData->encapContentInfo->eContentType;
	default:
		CMSerr(CMS_F_CMS_GET0_ECONTENT_TYPE,
		    CMS_R_UNSUPPORTED_CONTENT_TYPE);
		return NULL;
	}
}

const ASN1_OBJECT *
CMS_get0_eContentType(CMS_ContentInfo *cms)
{
	ASN1_OBJECT **petype;

	petype = cms_get0_econtent_type(cms);
	if (petype)
		return *petype;
	return NULL;
}

int
CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid)
{
	ASN1_OBJECT **petype, *etype;

	petype = cms_get0_econtent_type(cms);
	if (!petype)
		return 0;
	if (!oid)
		return 1;
	etype = OBJ_dup(oid);
	if (!etype)
		return 0;
	ASN1_OBJECT_free(*petype);
	*petype = etype;
	return 1;
}

int
CMS_is_detached(CMS_ContentInfo *cms)
{
	ASN1_OCTET_STRING **pos;

	pos = CMS_get0_content(cms);
	if (!pos)
		return -1;
	if (*pos)
		return 0;
	return 1;
}

int
CMS_set_detached(CMS_ContentInfo *cms, int detached)
{
	ASN1_OCTET_STRING **pos;

	pos = CMS_get0_content(cms);
	if (!pos)
		return 0;
	if (detached) {
		if (*pos) {
			ASN1_OCTET_STRING_free(*pos);
			*pos = NULL;
		}
		return 1;
	}
	if (!*pos)
		*pos = ASN1_OCTET_STRING_new();
	if (*pos) {
		/* NB: special flag to show content is created and not
		 * read in.
		 */
		(*pos)->flags |= ASN1_STRING_FLAG_CONT;
		return 1;
	}
	CMSerr(CMS_F_CMS_SET_DETACHED, ERR_R_MALLOC_FAILURE);
	return 0;
}

/* Set up an X509_ALGOR DigestAlgorithmIdentifier from an EVP_MD */

void
cms_DigestAlgorithm_set(X509_ALGOR *alg, const EVP_MD *md)
{
	int param_type;

	if (md->flags & EVP_MD_FLAG_DIGALGID_ABSENT)
		param_type = V_ASN1_UNDEF;
	else
		param_type = V_ASN1_NULL;

	X509_ALGOR_set0(alg, OBJ_nid2obj(EVP_MD_type(md)), param_type, NULL);

}

/* Create a digest BIO from an X509_ALGOR structure */

BIO *
cms_DigestAlgorithm_init_bio(X509_ALGOR *digestAlgorithm)
{
	BIO *mdbio = NULL;
	ASN1_OBJECT *digestoid;
	const EVP_MD *digest;

	X509_ALGOR_get0(&digestoid, NULL, NULL, digestAlgorithm);
	digest = EVP_get_digestbyobj(digestoid);
	if (!digest) {
		CMSerr(CMS_F_CMS_DIGESTALGORITHM_INIT_BIO,
		    CMS_R_UNKNOWN_DIGEST_ALGORIHM);
		goto err;
	}
	mdbio = BIO_new(BIO_f_md());
	if (!mdbio || !BIO_set_md(mdbio, digest)) {
		CMSerr(CMS_F_CMS_DIGESTALGORITHM_INIT_BIO,
		    CMS_R_MD_BIO_INIT_ERROR);
		goto err;
	}
	return mdbio;

err:
	BIO_free(mdbio);
	return NULL;
}

/* Locate a message digest content from a BIO chain based on SignerInfo */

int
cms_DigestAlgorithm_find_ctx(EVP_MD_CTX *mctx, BIO *chain, X509_ALGOR *mdalg)
{
	int nid;
	ASN1_OBJECT *mdoid;

	X509_ALGOR_get0(&mdoid, NULL, NULL, mdalg);
	nid = OBJ_obj2nid(mdoid);

	/* Look for digest type to match signature */
	for (;;) {
		EVP_MD_CTX *mtmp;
		chain = BIO_find_type(chain, BIO_TYPE_MD);
		if (chain == NULL) {
			CMSerr(CMS_F_CMS_DIGESTALGORITHM_FIND_CTX,
			    CMS_R_NO_MATCHING_DIGEST);
			return 0;
		}
		BIO_get_md_ctx(chain, &mtmp);
		if (EVP_MD_CTX_type(mtmp) == nid
		/* Workaround for broken implementations that use signature
		 * algorithm  OID instead of digest.
		 */ ||
		    EVP_MD_pkey_type(EVP_MD_CTX_md(mtmp)) == nid)
			return EVP_MD_CTX_copy_ex(mctx, mtmp);
		chain = BIO_next(chain);
	}
}

static STACK_OF(CMS_CertificateChoices) **
cms_get0_certificate_choices(CMS_ContentInfo *cms)
{
	switch (OBJ_obj2nid(cms->contentType)) {
	case NID_pkcs7_signed:
		return &cms->d.signedData->certificates;
	case NID_pkcs7_enveloped:
		return &cms->d.envelopedData->originatorInfo->certificates;
	default:
		CMSerr(CMS_F_CMS_GET0_CERTIFICATE_CHOICES,
		    CMS_R_UNSUPPORTED_CONTENT_TYPE);
		return NULL;
	}
}

CMS_CertificateChoices *
CMS_add0_CertificateChoices(CMS_ContentInfo *cms)
{
	STACK_OF(CMS_CertificateChoices) **pcerts;
	CMS_CertificateChoices *cch;

	pcerts = cms_get0_certificate_choices(cms);
	if (!pcerts)
		return NULL;
	if (!*pcerts)
		*pcerts = sk_CMS_CertificateChoices_new_null();
	if (!*pcerts)
		return NULL;
	cch = M_ASN1_new_of(CMS_CertificateChoices);
	if (!cch)
		return NULL;
	if (!sk_CMS_CertificateChoices_push(*pcerts, cch)) {
		M_ASN1_free_of(cch, CMS_CertificateChoices);
		return NULL;
	}
	return cch;
}

int
CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert)
{
	CMS_CertificateChoices *cch;
	STACK_OF(CMS_CertificateChoices) **pcerts;
	int i;

	pcerts = cms_get0_certificate_choices(cms);
	if (!pcerts)
		return 0;
	for (i = 0; i < sk_CMS_CertificateChoices_num(*pcerts); i++) {
		cch = sk_CMS_CertificateChoices_value(*pcerts, i);
		if (cch->type == CMS_CERTCHOICE_CERT) {
			if (!X509_cmp(cch->d.certificate, cert)) {
				CMSerr(CMS_F_CMS_ADD0_CERT,
				    CMS_R_CERTIFICATE_ALREADY_PRESENT);
				return 0;
			}
		}
	}
	cch = CMS_add0_CertificateChoices(cms);
	if (!cch)
		return 0;
	cch->type = CMS_CERTCHOICE_CERT;
	cch->d.certificate = cert;
	return 1;
}

int
CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert)
{
	int r;

	r = CMS_add0_cert(cms, cert);
	if (r > 0)
		CRYPTO_add(&cert->references, 1, CRYPTO_LOCK_X509);
	return r;
}

static STACK_OF(CMS_RevocationInfoChoice) **
cms_get0_revocation_choices(CMS_ContentInfo *cms)
{
	switch (OBJ_obj2nid(cms->contentType)) {
	case NID_pkcs7_signed:
		return &cms->d.signedData->crls;
	case NID_pkcs7_enveloped:
		return &cms->d.envelopedData->originatorInfo->crls;
	default:
		CMSerr(CMS_F_CMS_GET0_REVOCATION_CHOICES,
		    CMS_R_UNSUPPORTED_CONTENT_TYPE);
		return NULL;
	}
}

CMS_RevocationInfoChoice *
CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms)
{
	STACK_OF(CMS_RevocationInfoChoice) **pcrls;
	CMS_RevocationInfoChoice *rch;

	pcrls = cms_get0_revocation_choices(cms);
	if (!pcrls)
		return NULL;
	if (!*pcrls)
		*pcrls = sk_CMS_RevocationInfoChoice_new_null();
	if (!*pcrls)
		return NULL;
	rch = M_ASN1_new_of(CMS_RevocationInfoChoice);
	if (!rch)
		return NULL;
	if (!sk_CMS_RevocationInfoChoice_push(*pcrls, rch)) {
		M_ASN1_free_of(rch, CMS_RevocationInfoChoice);
		return NULL;
	}
	return rch;
}

int
CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl)
{
	CMS_RevocationInfoChoice *rch;

	rch = CMS_add0_RevocationInfoChoice(cms);
	if (!rch)
		return 0;
	rch->type = CMS_REVCHOICE_CRL;
	rch->d.crl = crl;
	return 1;
}

int
CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl)
{
	int r;

	r = CMS_add0_crl(cms, crl);
	if (r > 0)
		CRYPTO_add(&crl->references, 1, CRYPTO_LOCK_X509_CRL);
	return r;
}

STACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms)
{
	STACK_OF(X509) *certs = NULL;
	CMS_CertificateChoices *cch;
	STACK_OF(CMS_CertificateChoices) **pcerts;
	int i;

	pcerts = cms_get0_certificate_choices(cms);
	if (!pcerts)
		return NULL;
	for (i = 0; i < sk_CMS_CertificateChoices_num(*pcerts); i++) {
		cch = sk_CMS_CertificateChoices_value(*pcerts, i);
		if (cch->type == 0) {
			if (!certs) {
				certs = sk_X509_new_null();
				if (!certs)
					return NULL;
			}
			if (!sk_X509_push(certs, cch->d.certificate)) {
				sk_X509_pop_free(certs, X509_free);
				return NULL;
			}
			CRYPTO_add(&cch->d.certificate->references,
			    1, CRYPTO_LOCK_X509);
		}
	}
	return certs;

}

STACK_OF(X509_CRL) *CMS_get1_crls(CMS_ContentInfo *cms)
{
	STACK_OF(X509_CRL) *crls = NULL;
	STACK_OF(CMS_RevocationInfoChoice) **pcrls;
	CMS_RevocationInfoChoice *rch;
	int i;

	pcrls = cms_get0_revocation_choices(cms);
	if (!pcrls)
		return NULL;
	for (i = 0; i < sk_CMS_RevocationInfoChoice_num(*pcrls); i++) {
		rch = sk_CMS_RevocationInfoChoice_value(*pcrls, i);
		if (rch->type == 0) {
			if (!crls) {
				crls = sk_X509_CRL_new_null();
				if (!crls)
					return NULL;
			}
			if (!sk_X509_CRL_push(crls, rch->d.crl)) {
				sk_X509_CRL_pop_free(crls, X509_CRL_free);
				return NULL;
			}
			CRYPTO_add(&rch->d.crl->references,
			    1, CRYPTO_LOCK_X509_CRL);
		}
	}
	return crls;
}
@


1.4
log
@BIO_free() returns immediately when the sole input is NULL.
Remove unnecessary NULL check.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_lib.c,v 1.3 2014/06/12 15:49:28 deraadt Exp $ */
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d363 1
a363 2
	if (mdbio)
		BIO_free(mdbio);
@


1.2
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/cms/cms_lib.c */
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d63 2
a64 1
IMPLEMENT_ASN1_FUNCTIONS_const(CMS_ContentInfo)
d71 3
a73 2
const ASN1_OBJECT *CMS_get0_type(CMS_ContentInfo *cms)
	{
d75 1
a75 1
	}
d77 3
a79 2
CMS_ContentInfo *cms_Data_create(void)
	{
d81 1
d83 1
a83 2
	if (cms)
		{
d87 1
a87 1
		}
d89 1
a89 1
	}
d91 3
a93 2
BIO *cms_content_bio(CMS_ContentInfo *cms)
	{
d95 1
d107 1
a107 1
	}
d109 3
a111 2
BIO *CMS_dataInit(CMS_ContentInfo *cms, BIO *icont)
	{
d113 1
d118 1
a118 2
	if (!cont)
		{
d121 3
a123 5
		}
	switch (OBJ_obj2nid(cms->contentType))
		{

		case NID_pkcs7_data:
d125 1
a125 2

		case NID_pkcs7_signed:
d128 1
a128 2

		case NID_pkcs7_digest:
d132 1
a132 1
		case NID_id_smime_ct_compressedData:
d136 1
a136 2

		case NID_pkcs7_encrypted:
d139 1
a139 2

		case NID_pkcs7_enveloped:
d142 1
a142 2

		default:
d145 1
a145 1
		}
d153 1
d155 4
a158 1
	}
a159 3
int CMS_dataFinal(CMS_ContentInfo *cms, BIO *cmsbio)
	{
	ASN1_OCTET_STRING **pos = CMS_get0_content(cms);
d163 1
a163 2
	if (*pos && ((*pos)->flags & ASN1_STRING_FLAG_CONT))
		{
d168 1
a168 2
		if (!mbio)
			{
d171 1
a171 1
			}
d178 1
a178 4
		}

	switch (OBJ_obj2nid(cms->contentType))
		{
d180 5
a184 4
		case NID_pkcs7_data:
		case NID_pkcs7_enveloped:
		case NID_pkcs7_encrypted:
		case NID_id_smime_ct_compressedData:
d187 1
a187 2

		case NID_pkcs7_signed:
d189 1
a189 2

		case NID_pkcs7_digest:
d191 1
a191 2

		default:
a193 1
		}
d195 1
d202 3
a204 5
	{
	switch (OBJ_obj2nid(cms->contentType))
		{

		case NID_pkcs7_data:
d206 1
a206 2

		case NID_pkcs7_signed:
d208 1
a208 2

		case NID_pkcs7_enveloped:
d210 1
a210 2

		case NID_pkcs7_digest:
d212 1
a212 2

		case NID_pkcs7_encrypted:
d214 1
a214 2

		case NID_id_smime_ct_authData:
d216 1
a216 2

		case NID_id_smime_ct_compressedData:
d218 1
a218 2

		default:
a222 2

		}
d224 1
d231 3
a233 5
	{
	switch (OBJ_obj2nid(cms->contentType))
		{

		case NID_pkcs7_signed:
d235 1
a235 2

		case NID_pkcs7_enveloped:
d237 1
a237 2

		case NID_pkcs7_digest:
d239 1
a239 2

		case NID_pkcs7_encrypted:
d241 1
a241 2

		case NID_id_smime_ct_authData:
d243 1
a243 2

		case NID_id_smime_ct_compressedData:
d245 1
a245 2

		default:
d247 1
a247 1
					CMS_R_UNSUPPORTED_CONTENT_TYPE);
a248 2

		}
d250 1
d252 3
a254 2
const ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms)
	{
d256 1
d261 1
a261 1
	}
d263 3
a265 2
int CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid)
	{
d267 1
d279 1
a279 1
	}
d281 3
a283 2
int CMS_is_detached(CMS_ContentInfo *cms)
	{
d285 1
d292 1
a292 1
	}
d294 3
a296 2
int CMS_set_detached(CMS_ContentInfo *cms, int detached)
	{
d298 1
d302 2
a303 4
	if (detached)
		{
		if (*pos)
			{
d306 1
a306 1
			}
d308 1
a308 1
		}
d311 1
a311 2
	if (*pos)
		{
d317 1
a317 1
		}
d320 1
a320 1
	}
d324 3
a326 2
void cms_DigestAlgorithm_set(X509_ALGOR *alg, const EVP_MD *md)
	{
d329 1
a329 7
	switch (EVP_MD_type(md))
		{
		case NID_sha1:
		case NID_sha224:
		case NID_sha256:
		case NID_sha384:
		case NID_sha512:
d331 1
a331 3
		break;
	
		default:
a332 2
		break;
		}
d336 1
a336 1
	}
d340 3
a342 2
BIO *cms_DigestAlgorithm_init_bio(X509_ALGOR *digestAlgorithm)
	{
d346 1
d349 1
a349 2
	if (!digest)
		{
d351 3
a353 3
				CMS_R_UNKNOWN_DIGEST_ALGORIHM);
		goto err;	
		}
d355 1
a355 2
	if (!mdbio || !BIO_set_md(mdbio, digest))
		{
d357 3
a359 3
				CMS_R_MD_BIO_INIT_ERROR);
		goto err;	
		}
d361 2
a362 1
	err:
d366 1
a366 1
	}
d370 3
a372 3
int cms_DigestAlgorithm_find_ctx(EVP_MD_CTX *mctx, BIO *chain,
					X509_ALGOR *mdalg)
	{
d375 1
d378 1
d380 1
a380 2
	for (;;)
		{
d383 1
a383 2
		if (chain == NULL)
			{
d385 1
a385 1
						CMS_R_NO_MATCHING_DIGEST);
d387 1
a387 1
			}
d389 6
a394 5
		if (EVP_MD_CTX_type(mtmp) == nid)
			{
			EVP_MD_CTX_copy_ex(mctx, mtmp);
			return 1;
			}
a395 1
		}
d397 1
d399 5
a403 6
static STACK_OF(CMS_CertificateChoices) **cms_get0_certificate_choices(CMS_ContentInfo *cms)
	{
	switch (OBJ_obj2nid(cms->contentType))
		{

		case NID_pkcs7_signed:
d405 1
a405 2

		case NID_pkcs7_enveloped:
d407 1
a407 2

		default:
d409 1
a409 1
					CMS_R_UNSUPPORTED_CONTENT_TYPE);
a410 2

		}
d412 1
d414 3
a416 2
CMS_CertificateChoices *CMS_add0_CertificateChoices(CMS_ContentInfo *cms)
	{
d419 1
d430 1
a430 2
	if (!sk_CMS_CertificateChoices_push(*pcerts, cch))
		{
d433 1
a433 1
		}
d435 1
a435 1
	}
d437 3
a439 2
int CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert)
	{
d443 1
d447 1
a447 4
	if (!pcerts)
		return 0;
	for (i = 0; i < sk_CMS_CertificateChoices_num(*pcerts); i++)
		{
d449 4
a452 6
		if (cch->type == CMS_CERTCHOICE_CERT)
			{
			if (!X509_cmp(cch->d.certificate, cert))
				{
				CMSerr(CMS_F_CMS_ADD0_CERT, 
					CMS_R_CERTIFICATE_ALREADY_PRESENT);
a453 1
				}
d456 1
d463 1
a463 1
	}
d465 3
a467 2
int CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert)
	{
d469 1
d474 1
a474 6
	}

static STACK_OF(CMS_RevocationInfoChoice) **cms_get0_revocation_choices(CMS_ContentInfo *cms)
	{
	switch (OBJ_obj2nid(cms->contentType))
		{
d476 5
a480 1
		case NID_pkcs7_signed:
d482 1
a482 2

		case NID_pkcs7_enveloped:
d484 1
a484 2

		default:
d486 1
a486 1
					CMS_R_UNSUPPORTED_CONTENT_TYPE);
a487 2

		}
d489 1
d491 3
a493 2
CMS_RevocationInfoChoice *CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms)
	{
d496 1
d507 1
a507 2
	if (!sk_CMS_RevocationInfoChoice_push(*pcrls, rch))
		{
d510 1
a510 1
		}
d512 1
a512 1
	}
d514 3
a516 2
int CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl)
	{
d518 1
d525 12
a536 1
	}
d539 1
a539 1
	{
d544 1
d548 1
a548 2
	for (i = 0; i < sk_CMS_CertificateChoices_num(*pcerts); i++)
		{
d550 2
a551 4
		if (cch->type == 0)
			{
			if (!certs)
				{
d555 2
a556 3
				}
			if (!sk_X509_push(certs, cch->d.certificate))
				{
d559 1
a559 1
				}
d561 1
a561 2
						1, CRYPTO_LOCK_X509);
			}
d563 1
d566 1
a566 1
	}
d569 1
a569 1
	{
d574 1
d578 1
a578 2
	for (i = 0; i < sk_CMS_RevocationInfoChoice_num(*pcrls); i++)
		{
d580 2
a581 4
		if (rch->type == 0)
			{
			if (!crls)
				{
d585 2
a586 3
				}
			if (!sk_X509_CRL_push(crls, rch->d.crl))
				{
d589 1
a589 1
				}
d591 1
a591 2
						1, CRYPTO_LOCK_X509_CRL);
			}
d593 1
d595 1
a595 1
	}
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@d63 1
a63 2
IMPLEMENT_ASN1_FUNCTIONS(CMS_ContentInfo)
IMPLEMENT_ASN1_PRINT_FUNCTION(CMS_ContentInfo)
d349 7
a355 1
	if (md->flags & EVP_MD_FLAG_DIGALGID_ABSENT)
d357 3
a359 1
	else
d361 2
d418 1
a418 5
		if (EVP_MD_CTX_type(mtmp) == nid
		/* Workaround for broken implementations that use signature
		 * algorithm  OID instead of digest.
		 */
			|| EVP_MD_pkey_type(EVP_MD_CTX_md(mtmp)) == nid)
a557 9
	}

int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl)
	{
	int r;
	r = CMS_add0_crl(cms, crl);
	if (r > 0)
		CRYPTO_add(&crl->references, 1, CRYPTO_LOCK_X509_CRL);
	return r;
@


1.1.1.3
log
@import OpenSSL-1.0.1c
@
text
@d415 2
a416 1
			return EVP_MD_CTX_copy_ex(mctx, mtmp);
@


1.1.1.4
log
@Import OpenSSL 1.0.1g
@
text
@d414 1
d416 1
d468 2
@


