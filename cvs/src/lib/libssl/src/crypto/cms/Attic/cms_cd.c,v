head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	butholakala:1.1.1.2
	openssl_1_0_1_g:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.24
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.20
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.18
	OPENBSD_5_3_BASE:1.1.1.1
	openssl_1_0_1_c:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.16
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	openssh_1_0_0_a:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.09.03.11.33.36;	author beck;	state dead;
branches;
next	1.6;
commitid	HnbXxsegngek41U2;

1.6
date	2015.02.11.03.55.00;	author beck;	state Exp;
branches;
next	1.5;
commitid	HsOaJkRp8GJ6kln4;

1.5
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.4;
commitid	yQEL1wOWIearrW15;

1.4
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.3;
commitid	nzndm3zqPmFurSaK;

1.3
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.05.24.15.55.21;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.04.13.15.16.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: cms_cd.c,v 1.6 2015/02/11 03:55:00 beck Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 2008 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <openssl/opensslconf.h>

#include <openssl/asn1t.h>
#include <openssl/bio.h>
#include <openssl/cms.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/x509v3.h>


#include "cms_lcl.h"

DECLARE_ASN1_ITEM(CMS_CompressedData)

#ifdef ZLIB

/* CMS CompressedData Utilities */

CMS_ContentInfo *
cms_CompressedData_create(int comp_nid)
{
	CMS_ContentInfo *cms;
	CMS_CompressedData *cd;

	/* Will need something cleverer if there is ever more than one
	 * compression algorithm or parameters have some meaning...
	 */
	if (comp_nid != NID_zlib_compression) {
		CMSerr(CMS_F_CMS_COMPRESSEDDATA_CREATE,
		    CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
		return NULL;
	}
	cms = CMS_ContentInfo_new();
	if (!cms)
		return NULL;

	cd = M_ASN1_new_of(CMS_CompressedData);

	if (!cd)
		goto err;

	cms->contentType = OBJ_nid2obj(NID_id_smime_ct_compressedData);
	cms->d.compressedData = cd;

	cd->version = 0;

	X509_ALGOR_set0(cd->compressionAlgorithm,
	    OBJ_nid2obj(NID_zlib_compression),
	    V_ASN1_UNDEF, NULL);

	cd->encapContentInfo->eContentType = OBJ_nid2obj(NID_pkcs7_data);

	return cms;

err:
	if (cms)
		CMS_ContentInfo_free(cms);
	return NULL;
}

BIO *
cms_CompressedData_init_bio(CMS_ContentInfo *cms)
{
	CMS_CompressedData *cd;
	ASN1_OBJECT *compoid;

	if (OBJ_obj2nid(cms->contentType) != NID_id_smime_ct_compressedData) {
		CMSerr(CMS_F_CMS_COMPRESSEDDATA_INIT_BIO,
		    CMS_R_CONTENT_TYPE_NOT_COMPRESSED_DATA);
		return NULL;
	}
	cd = cms->d.compressedData;
	X509_ALGOR_get0(&compoid, NULL, NULL, cd->compressionAlgorithm);
	if (OBJ_obj2nid(compoid) != NID_zlib_compression) {
		CMSerr(CMS_F_CMS_COMPRESSEDDATA_INIT_BIO,
		    CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
		return NULL;
	}
	return BIO_new(BIO_f_zlib());
}

#endif
@


1.6
log
@get rid of OPENSSL_NO_COMP code we don't use.
jajaja miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_cd.c,v 1.5 2014/07/11 08:44:48 jsing Exp $ */
@


1.5
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cms_cd.c,v 1.4 2014/07/10 22:45:56 jsing Exp $ */
a62 3
#ifndef OPENSSL_NO_COMP
#include <openssl/comp.h>
#endif
@


1.4
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: cms_cd.c,v 1.3 2014/06/12 15:49:28 deraadt Exp $ */
a55 1
#include "cryptlib.h"
d57 3
d62 1
a62 3
#include <openssl/err.h>
#include <openssl/cms.h>
#include <openssl/bio.h>
d66 1
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d53 2
@


1.2
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/cms/cms_cd.c */
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d61 1
d63 1
d72 3
a74 2
CMS_ContentInfo *cms_CompressedData_create(int comp_nid)
	{
d77 1
d81 1
a81 2
	if (comp_nid != NID_zlib_compression)
		{
d83 1
a83 1
				CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
d85 1
a85 1
		}
d101 2
a102 2
			OBJ_nid2obj(NID_zlib_compression),
			V_ASN1_UNDEF, NULL);
d108 1
a108 2
	err:

a110 1

d112 1
a112 1
	}
d114 3
a116 2
BIO *cms_CompressedData_init_bio(CMS_ContentInfo *cms)
	{
d119 2
a120 2
	if (OBJ_obj2nid(cms->contentType) != NID_id_smime_ct_compressedData)
		{
d122 1
a122 1
				CMS_R_CONTENT_TYPE_NOT_COMPRESSED_DATA);
d124 1
a124 1
		}
d127 1
a127 2
	if (OBJ_obj2nid(compoid) != NID_zlib_compression)
		{
d129 1
a129 1
				CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
d131 1
a131 1
		}
d133 1
a133 1
	}
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@Import OpenSSL 1.0.1g
@
text
@a60 1
#ifndef OPENSSL_NO_COMP
a61 1
#endif
@

