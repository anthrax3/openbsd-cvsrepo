head	1.6;
access;
symbols
	butholakala:1.1.1.3
	openssl_1_0_1_g:1.1.1.3
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.12
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.8
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.6
	OPENBSD_5_3_BASE:1.1.1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.2
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.4
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.05.12.19.14.14;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2014.05.06.20.32.11;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.27.20.20.59;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.21.16.00.04;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.11.03.02.32.13;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Move the `pqueue' part of libcrypto, which is a glorified sorted linked list
of 64-bit data, and only used by DTLS, to libssl where it belongs.

Remove pqueue_print() which is a debugging interface and serves no useful
purpose, except for the regress test, which grows its own pqueue_print()
routine.

Bump libcrypto major and libssl minor.

WARNING: do not update your tree right now, more changes are coming, which
will ride the libcrypto major bump.
@
text
@/* crypto/pqueue/pqueue.c */
/*
 * DTLS implementation written by Nagendra Modadugu
 * (nagendra@@cs.stanford.edu) for the OpenSSL project 2005.
 */
/* ====================================================================
 * Copyright (c) 1999-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include "cryptlib.h"
#include <openssl/bn.h>
#include "pqueue.h"

typedef struct _pqueue {
	pitem *items;
	int count;
} pqueue_s;

pitem *
pitem_new(unsigned char *prio64be, void *data)
{
	pitem *item = (pitem *)malloc(sizeof(pitem));

	if (item == NULL)
		return NULL;

	memcpy(item->priority, prio64be, sizeof(item->priority));

	item->data = data;
	item->next = NULL;

	return item;
}

void
pitem_free(pitem *item)
{
	if (item == NULL)
		return;

	free(item);
}

pqueue_s *
pqueue_new(void)
{
	pqueue_s *pq = (pqueue_s *)malloc(sizeof(pqueue_s));

	if (pq == NULL)
		return NULL;

	memset(pq, 0x00, sizeof(pqueue_s));
	return pq;
}

void
pqueue_free(pqueue_s *pq)
{
	if (pq == NULL)
		return;

	free(pq);
}

pitem *
pqueue_insert(pqueue_s *pq, pitem *item)
{
	pitem *curr, *next;

	if (pq->items == NULL) {
		pq->items = item;
		return item;
	}

	for (curr = NULL, next = pq->items; next != NULL;
	    curr = next, next = next->next) {
		/* we can compare 64-bit value in big-endian encoding
		 * with memcmp:-) */
		int cmp = memcmp(next->priority, item->priority,
				 sizeof(item->priority));
		if (cmp > 0)		/* next > item */
		{
			item->next = next;

			if (curr == NULL)
				pq->items = item;
			else
				curr->next = item;

			return item;
		} else if (cmp == 0)	/* duplicates not allowed */
			return NULL;
	}

	item->next = NULL;
	curr->next = item;

	return item;
}

pitem *
pqueue_peek(pqueue_s *pq)
{
	return pq->items;
}

pitem *
pqueue_pop(pqueue_s *pq)
{
	pitem *item = pq->items;

	if (pq->items != NULL)
		pq->items = pq->items->next;

	return item;
}

pitem *
pqueue_find(pqueue_s *pq, unsigned char *prio64be)
{
	pitem *next;
	pitem *found = NULL;

	if (pq->items == NULL)
		return NULL;

	for (next = pq->items; next != NULL; next = next->next) {
		if (memcmp(next->priority, prio64be, 8) == 0) {
			found = next;
			break;
		}
	}

	if (!found)
		return NULL;

	return found;
}

void
pqueue_print(pqueue_s *pq)
{
	pitem *item = pq->items;

	while (item != NULL) {
		printf("item\t%02x%02x%02x%02x%02x%02x%02x%02x\n",
		    item->priority[0], item->priority[1],
		    item->priority[2], item->priority[3],
		    item->priority[4], item->priority[5],
		    item->priority[6], item->priority[7]);
		item = item->next;
	}
}

pitem *
pqueue_iterator(pqueue_s *pq)
{
	return pqueue_peek(pq);
}

pitem *
pqueue_next(pitem **item)
{
	pitem *ret;

	if (item == NULL || *item == NULL)
		return NULL;

	/* *item != NULL */
	ret = *item;
	*item = (*item)->next;

	return ret;
}

int
pqueue_size(pqueue_s *pq)
{
	pitem *item = pq->items;
	int count = 0;

	while (item != NULL) {
		count++;
		item = item->next;
	}
	return count;
}
@


1.5
log
@Assorted cleanups:
- replace hardcoded sizes with sizeof()
- pqueue_find() apparently used to need to keep track of the previous node
  when iterating, which causes its logic to be complicated. However, nowadays
  it only needs to iterate, so replace with a straightforward, much
  readable logic.
- remove #if 0'ed code

From ``sin'' from 2f30 dot org on tech@@, thanks!
@
text
@@


1.4
log
@Put explicit (void) in function declarations and shuffle keywords in some
declaration to pass -Wextra, should we want to add it to CFLAGS.
No binary change.
@
text
@d129 2
a130 1
		int cmp = memcmp(next->priority, item->priority, 8);
d177 1
a177 1
	for (next = pq->items; next->next != NULL; next = next->next) {
d184 1
a184 5
	/* check the one last node */
	if (memcmp(next->priority, prio64be, 8) ==0)
		found = next;

	if (! found)
a185 7

#if 0 /* find works in peek mode */
	if (prev == NULL)
		pq->items = next->next;
	else
		prev->next = next->next;
#endif
@


1.3
log
@KNF.
@
text
@d95 1
a95 1
pqueue_new()
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d2 1
a2 1
/* 
d4 1
a4 1
 * (nagendra@@cs.stanford.edu) for the OpenSSL project 2005.  
d14 1
a14 1
 *    notice, this list of conditions and the following disclaimer. 
d64 1
a64 2
typedef struct _pqueue
	{
d67 1
a67 1
	} pqueue_s;
d71 5
a75 3
	{
	pitem *item = (pitem *) malloc(sizeof(pitem));
	if (item == NULL) return NULL;
d77 1
a77 1
	memcpy(item->priority,prio64be,sizeof(item->priority));
d83 1
a83 1
	}
d87 3
a89 2
	{
	if (item == NULL) return;
d92 1
a92 1
	}
d96 5
a100 3
	{
	pqueue_s *pq = (pqueue_s *) malloc(sizeof(pqueue_s));
	if (pq == NULL) return NULL;
d104 1
a104 1
	}
d108 3
a110 2
	{
	if (pq == NULL) return;
d113 1
a113 1
	}
d117 1
a117 1
	{
d120 1
a120 2
	if (pq->items == NULL)
		{
d123 1
a123 1
		}
d125 2
a126 4
	for(curr = NULL, next = pq->items; 
		next != NULL;
		curr = next, next = next->next)
		{
d129 1
a129 1
		int cmp = memcmp(next->priority, item->priority,8);
d131 1
a131 1
			{
d134 1
a134 1
			if (curr == NULL) 
d136 1
a136 1
			else  
d140 1
a140 3
			}
		
		else if (cmp == 0)	/* duplicates not allowed */
d142 1
a142 1
		}
d148 1
a148 1
	}
d152 1
a152 1
	{
d154 1
a154 1
	}
d158 1
a158 1
	{
d165 1
a165 1
	}
d169 1
a169 1
	{
d173 1
a173 1
	if ( pq->items == NULL)
d176 2
a177 4
	for ( next = pq->items; next->next != NULL; next = next->next)
		{
		if ( memcmp(next->priority, prio64be,8) == 0)
			{
a179 1
			}
d181 2
a182 1
	
d184 1
a184 1
	if ( memcmp(next->priority, prio64be,8) ==0)
d187 1
a187 1
	if ( ! found)
d191 1
a191 1
	if ( prev == NULL)
d198 1
a198 1
	}
d202 1
a202 1
	{
d205 1
a205 2
	while(item != NULL)
		{
d207 4
a210 4
			item->priority[0],item->priority[1],
			item->priority[2],item->priority[3],
			item->priority[4],item->priority[5],
			item->priority[6],item->priority[7]);
a211 1
		}
d213 1
d217 1
a217 1
	{
d219 1
a219 1
	}
d223 1
a223 1
	{
d226 1
a226 1
	if ( item == NULL || *item == NULL)
a228 1

d234 1
a234 1
	}
d241 2
a242 3
	
	while(item != NULL)
	{
@


1.1
log
@Initial revision
@
text
@d71 1
a71 1
pitem_new(PQ_64BIT priority, void *data)
d73 1
a73 1
	pitem *item = (pitem *) OPENSSL_malloc(sizeof(pitem));
d76 1
a76 2
	pq_64bit_init(&(item->priority));
	pq_64bit_assign(&item->priority, &priority);
d89 1
a89 2
	pq_64bit_free(&(item->priority));
	OPENSSL_free(item);
d95 1
a95 1
	pqueue_s *pq = (pqueue_s *) OPENSSL_malloc(sizeof(pqueue_s));
d107 1
a107 1
	OPENSSL_free(pq);
d125 4
a128 1
		if (pq_64bit_gt(&(next->priority), &(item->priority)))
d139 2
a140 2
		/* duplicates not allowed */
		if (pq_64bit_eq(&(item->priority), &(next->priority)))
d168 1
a168 1
pqueue_find(pqueue_s *pq, PQ_64BIT priority)
d170 1
a170 1
	pitem *next, *prev = NULL;
d176 1
a176 2
	for ( next = pq->items; next->next != NULL; 
		  prev = next, next = next->next)
d178 1
a178 1
		if ( pq_64bit_eq(&(next->priority), &priority))
d186 1
a186 1
	if ( pq_64bit_eq(&(next->priority), &priority))
a201 1
#if PQ_64BIT_IS_INTEGER
d209 5
a213 1
		printf("item\t" PQ_64BIT_PRINT "\n", item->priority);
a216 1
#endif
d239 14
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@d71 1
a71 1
pitem_new(unsigned char *prio64be, void *data)
d76 2
a77 1
	memcpy(item->priority,prio64be,sizeof(item->priority));
d90 1
d127 1
a127 4
		/* we can compare 64-bit value in big-endian encoding
		 * with memcmp:-) */
		int cmp = memcmp(next->priority, item->priority,8);
		if (cmp > 0)		/* next > item */
d138 2
a139 2
		
		else if (cmp == 0)	/* duplicates not allowed */
d167 1
a167 1
pqueue_find(pqueue_s *pq, unsigned char *prio64be)
d178 1
a178 1
		if ( memcmp(next->priority, prio64be,8) == 0)
d186 1
a186 1
	if ( memcmp(next->priority, prio64be,8) ==0)
d202 1
d210 1
a210 5
		printf("item\t%02x%02x%02x%02x%02x%02x%02x%02x\n",
			item->priority[0],item->priority[1],
			item->priority[2],item->priority[3],
			item->priority[4],item->priority[5],
			item->priority[6],item->priority[7]);
d214 1
a236 14

int
pqueue_size(pqueue_s *pq)
{
	pitem *item = pq->items;
	int count = 0;
	
	while(item != NULL)
	{
		count++;
		item = item->next;
	}
	return count;
}
@


1.1.1.3
log
@import OpenSSL 1.0.0e
@
text
@d170 1
a170 1
	pitem *next;
d176 2
a177 1
	for ( next = pq->items; next->next != NULL; next = next->next)
@


