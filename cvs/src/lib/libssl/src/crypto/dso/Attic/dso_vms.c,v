head	1.7;
access;
symbols
	butholakala:1.6
	openssl_1_0_1_g:1.1.1.4
	OPENBSD_5_5:1.6.0.12
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.3
	OPENBSD_4_4:1.3.0.26
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.24
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.22
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.20
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.18
	OPENBSD_4_0_BASE:1.3
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.3.0.16
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.14
	OPENBSD_3_8_BASE:1.3
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.3.0.12
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.04.15.20.13.09;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.22.00.03.08;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.34;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.17;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.11.03.02.32.10;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Just like every web browser expands until it can read mail, every modular
library expands until it has its own dlfcn wrapper, and libcrypto is no
exception.

Remove the non-dlfcn DSO methods.

This causes public DSO_METHOD_{beos,dl,vms,win32} to disappear (major bump
coming soon). Note that portable software ought to use DSO_METHOD_openssl
instead of picking the backend directly (which makes one wonder why the
backends are exposed, as it is unlikely that more than one can work on
your system).

ok beck@@ deraadt@@
@
text
@/* dso_vms.c -*- mode:C; c-file-style: "eay" -*- */
/* Written by Richard Levitte (richard@@levitte.org) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>
#include <errno.h>
#include "cryptlib.h"
#include <openssl/dso.h>
#ifdef OPENSSL_SYS_VMS
#pragma message disable DOLLARID
#include <rms.h>
#include <lib$routines.h>
#include <stsdef.h>
#include <descrip.h>
#include <starlet.h>
#include "vms_rms.h"
#endif

/* Some compiler options may mask the declaration of "_malloc32". */
#if __INITIAL_POINTER_SIZE && defined _ANSI_C_SOURCE
# if __INITIAL_POINTER_SIZE == 64
#  pragma pointer_size save
#  pragma pointer_size 32
    void * _malloc32  (__size_t);
#  pragma pointer_size restore
# endif /* __INITIAL_POINTER_SIZE == 64 */
#endif /* __INITIAL_POINTER_SIZE && defined _ANSI_C_SOURCE */


#ifndef OPENSSL_SYS_VMS
DSO_METHOD *DSO_METHOD_vms(void)
	{
	return NULL;
	}
#else
#pragma message disable DOLLARID

static int vms_load(DSO *dso);
static int vms_unload(DSO *dso);
static void *vms_bind_var(DSO *dso, const char *symname);
static DSO_FUNC_TYPE vms_bind_func(DSO *dso, const char *symname);
#if 0
static int vms_unbind_var(DSO *dso, char *symname, void *symptr);
static int vms_unbind_func(DSO *dso, char *symname, DSO_FUNC_TYPE symptr);
static int vms_init(DSO *dso);
static int vms_finish(DSO *dso);
static long vms_ctrl(DSO *dso, int cmd, long larg, void *parg);
#endif
static char *vms_name_converter(DSO *dso, const char *filename);
static char *vms_merger(DSO *dso, const char *filespec1,
	const char *filespec2);

static DSO_METHOD dso_meth_vms = {
	"OpenSSL 'VMS' shared library method",
	vms_load,
	NULL, /* unload */
	vms_bind_var,
	vms_bind_func,
/* For now, "unbind" doesn't exist */
#if 0
	NULL, /* unbind_var */
	NULL, /* unbind_func */
#endif
	NULL, /* ctrl */
	vms_name_converter,
	vms_merger,
	NULL, /* init */
	NULL  /* finish */
	};

/* On VMS, the only "handle" is the file name.  LIB$FIND_IMAGE_SYMBOL depends
 * on the reference to the file name being the same for all calls regarding
 * one shared image, so we'll just store it in an instance of the following
 * structure and put a pointer to that instance in the meth_data stack.
 */
typedef struct dso_internal_st
	{
	/* This should contain the name only, no directory,
	 * no extension, nothing but a name. */
	struct dsc$descriptor_s filename_dsc;
	char filename[ NAMX_MAXRSS+ 1];
	/* This contains whatever is not in filename, if needed.
	 * Normally not defined. */
	struct dsc$descriptor_s imagename_dsc;
	char imagename[ NAMX_MAXRSS+ 1];
	} DSO_VMS_INTERNAL;

DSO_METHOD *DSO_METHOD_vms(void)
	{
	return(&dso_meth_vms);
	}

static int vms_load(DSO *dso)
	{
	void *ptr = NULL;
	/* See applicable comments in dso_dl.c */
	char *filename = DSO_convert_filename(dso, NULL);

/* Ensure 32-bit pointer for "p", and appropriate malloc() function. */
#if __INITIAL_POINTER_SIZE == 64
# define DSO_MALLOC _malloc32
# pragma pointer_size save
# pragma pointer_size 32
#else /* __INITIAL_POINTER_SIZE == 64 */
# define DSO_MALLOC OPENSSL_malloc
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

	DSO_VMS_INTERNAL *p = NULL;

#if __INITIAL_POINTER_SIZE == 64
# pragma pointer_size restore
#endif /* __INITIAL_POINTER_SIZE == 64 */

	const char *sp1, *sp2;	/* Search result */

	if(filename == NULL)
		{
		DSOerr(DSO_F_VMS_LOAD,DSO_R_NO_FILENAME);
		goto err;
		}

	/* A file specification may look like this:
	 *
	 *	node::dev:[dir-spec]name.type;ver
	 *
	 * or (for compatibility with TOPS-20):
	 *
	 *	node::dev:<dir-spec>name.type;ver
	 *
	 * and the dir-spec uses '.' as separator.  Also, a dir-spec
	 * may consist of several parts, with mixed use of [] and <>:
	 *
	 *	[dir1.]<dir2>
	 *
	 * We need to split the file specification into the name and
	 * the rest (both before and after the name itself).
	 */
	/* Start with trying to find the end of a dir-spec, and save the
	   position of the byte after in sp1 */
	sp1 = strrchr(filename, ']');
	sp2 = strrchr(filename, '>');
	if (sp1 == NULL) sp1 = sp2;
	if (sp2 != NULL && sp2 > sp1) sp1 = sp2;
	if (sp1 == NULL) sp1 = strrchr(filename, ':');
	if (sp1 == NULL)
		sp1 = filename;
	else
		sp1++;		/* The byte after the found character */
	/* Now, let's see if there's a type, and save the position in sp2 */
	sp2 = strchr(sp1, '.');
	/* If we found it, that's where we'll cut.  Otherwise, look for a
	   version number and save the position in sp2 */
	if (sp2 == NULL) sp2 = strchr(sp1, ';');
	/* If there was still nothing to find, set sp2 to point at the end of
	   the string */
	if (sp2 == NULL) sp2 = sp1 + strlen(sp1);

	/* Check that we won't get buffer overflows */
	if (sp2 - sp1 > FILENAME_MAX
		|| (sp1 - filename) + strlen(sp2) > FILENAME_MAX)
		{
		DSOerr(DSO_F_VMS_LOAD,DSO_R_FILENAME_TOO_BIG);
		goto err;
		}

	p = DSO_MALLOC(sizeof(DSO_VMS_INTERNAL));
	if(p == NULL)
		{
		DSOerr(DSO_F_VMS_LOAD,ERR_R_MALLOC_FAILURE);
		goto err;
		}

	strncpy(p->filename, sp1, sp2-sp1);
	p->filename[sp2-sp1] = '\0';

	strncpy(p->imagename, filename, sp1-filename);
	p->imagename[sp1-filename] = '\0';
	strcat(p->imagename, sp2);

	p->filename_dsc.dsc$w_length = strlen(p->filename);
	p->filename_dsc.dsc$b_dtype = DSC$K_DTYPE_T;
	p->filename_dsc.dsc$b_class = DSC$K_CLASS_S;
	p->filename_dsc.dsc$a_pointer = p->filename;
	p->imagename_dsc.dsc$w_length = strlen(p->imagename);
	p->imagename_dsc.dsc$b_dtype = DSC$K_DTYPE_T;
	p->imagename_dsc.dsc$b_class = DSC$K_CLASS_S;
	p->imagename_dsc.dsc$a_pointer = p->imagename;

	if(!sk_void_push(dso->meth_data, (char *)p))
		{
		DSOerr(DSO_F_VMS_LOAD,DSO_R_STACK_ERROR);
		goto err;
		}

	/* Success (for now, we lie.  We actually do not know...) */
	dso->loaded_filename = filename;
	return(1);
err:
	/* Cleanup! */
	if(p != NULL)
		OPENSSL_free(p);
	if(filename != NULL)
		OPENSSL_free(filename);
	return(0);
	}

/* Note that this doesn't actually unload the shared image, as there is no
 * such thing in VMS.  Next time it get loaded again, a new copy will
 * actually be loaded.
 */
static int vms_unload(DSO *dso)
	{
	DSO_VMS_INTERNAL *p;
	if(dso == NULL)
		{
		DSOerr(DSO_F_VMS_UNLOAD,ERR_R_PASSED_NULL_PARAMETER);
		return(0);
		}
	if(sk_void_num(dso->meth_data) < 1)
		return(1);
	p = (DSO_VMS_INTERNAL *)sk_void_pop(dso->meth_data);
	if(p == NULL)
		{
		DSOerr(DSO_F_VMS_UNLOAD,DSO_R_NULL_HANDLE);
		return(0);
		}
	/* Cleanup */
	OPENSSL_free(p);
	return(1);
	}

/* We must do this in a separate function because of the way the exception
   handler works (it makes this function return */
static int do_find_symbol(DSO_VMS_INTERNAL *ptr,
	struct dsc$descriptor_s *symname_dsc, void **sym,
	unsigned long flags)
	{
	/* Make sure that signals are caught and returned instead of
	   aborting the program.  The exception handler gets unestablished
	   automatically on return from this function.  */
	lib$establish(lib$sig_to_ret);

	if(ptr->imagename_dsc.dsc$w_length)
		return lib$find_image_symbol(&ptr->filename_dsc,
			symname_dsc, sym,
			&ptr->imagename_dsc, flags);
	else
		return lib$find_image_symbol(&ptr->filename_dsc,
			symname_dsc, sym,
			0, flags);
	}

void vms_bind_sym(DSO *dso, const char *symname, void **sym)
	{
	DSO_VMS_INTERNAL *ptr;
	int status;
#if 0
	int flags = (1<<4); /* LIB$M_FIS_MIXEDCASE, but this symbol isn't
                               defined in VMS older than 7.0 or so */
#else
	int flags = 0;
#endif
	struct dsc$descriptor_s symname_dsc;

/* Arrange 32-bit pointer to (copied) string storage, if needed. */
#if __INITIAL_POINTER_SIZE == 64
# define SYMNAME symname_32p
# pragma pointer_size save
# pragma pointer_size 32
	char *symname_32p;
# pragma pointer_size restore
	char symname_32[ NAMX_MAXRSS+ 1];
#else /* __INITIAL_POINTER_SIZE == 64 */
# define SYMNAME ((char *) symname)
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

	*sym = NULL;

	if((dso == NULL) || (symname == NULL))
		{
		DSOerr(DSO_F_VMS_BIND_SYM,ERR_R_PASSED_NULL_PARAMETER);
		return;
		}

#if __INITIAL_POINTER_SIZE == 64
	/* Copy the symbol name to storage with a 32-bit pointer. */
	symname_32p = symname_32;
	strcpy( symname_32p, symname);
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

	symname_dsc.dsc$w_length = strlen(SYMNAME);
	symname_dsc.dsc$b_dtype = DSC$K_DTYPE_T;
	symname_dsc.dsc$b_class = DSC$K_CLASS_S;
	symname_dsc.dsc$a_pointer = SYMNAME;

	if(sk_void_num(dso->meth_data) < 1)
		{
		DSOerr(DSO_F_VMS_BIND_SYM,DSO_R_STACK_ERROR);
		return;
		}
	ptr = (DSO_VMS_INTERNAL *)sk_void_value(dso->meth_data,
		sk_void_num(dso->meth_data) - 1);
	if(ptr == NULL)
		{
		DSOerr(DSO_F_VMS_BIND_SYM,DSO_R_NULL_HANDLE);
		return;
		}

	if(dso->flags & DSO_FLAG_UPCASE_SYMBOL) flags = 0;

	status = do_find_symbol(ptr, &symname_dsc, sym, flags);

	if(!$VMS_STATUS_SUCCESS(status))
		{
		unsigned short length;
		char errstring[257];
		struct dsc$descriptor_s errstring_dsc;

		errstring_dsc.dsc$w_length = sizeof(errstring);
		errstring_dsc.dsc$b_dtype = DSC$K_DTYPE_T;
		errstring_dsc.dsc$b_class = DSC$K_CLASS_S;
		errstring_dsc.dsc$a_pointer = errstring;

		*sym = NULL;

		status = sys$getmsg(status, &length, &errstring_dsc, 1, 0);

		if (!$VMS_STATUS_SUCCESS(status))
			lib$signal(status); /* This is really bad.  Abort!  */
		else
			{
			errstring[length] = '\0';

			DSOerr(DSO_F_VMS_BIND_SYM,DSO_R_SYM_FAILURE);
			if (ptr->imagename_dsc.dsc$w_length)
				ERR_add_error_data(9,
					"Symbol ", symname,
					" in ", ptr->filename,
					" (", ptr->imagename, ")",
					": ", errstring);
			else
				ERR_add_error_data(6,
					"Symbol ", symname,
					" in ", ptr->filename,
					": ", errstring);
			}
		return;
		}
	return;
	}

static void *vms_bind_var(DSO *dso, const char *symname)
	{
	void *sym = 0;
	vms_bind_sym(dso, symname, &sym);
	return sym;
	}

static DSO_FUNC_TYPE vms_bind_func(DSO *dso, const char *symname)
	{
	DSO_FUNC_TYPE sym = 0;
	vms_bind_sym(dso, symname, (void **)&sym);
	return sym;
	}


static char *vms_merger(DSO *dso, const char *filespec1, const char *filespec2)
	{
	int status;
	int filespec1len, filespec2len;
	struct FAB fab;
	struct NAMX_STRUCT nam;
	char esa[ NAMX_MAXRSS+ 1];
	char *merged;

/* Arrange 32-bit pointer to (copied) string storage, if needed. */
#if __INITIAL_POINTER_SIZE == 64
# define FILESPEC1 filespec1_32p;
# define FILESPEC2 filespec2_32p;
# pragma pointer_size save
# pragma pointer_size 32
	char *filespec1_32p;
	char *filespec2_32p;
# pragma pointer_size restore
	char filespec1_32[ NAMX_MAXRSS+ 1];
	char filespec2_32[ NAMX_MAXRSS+ 1];
#else /* __INITIAL_POINTER_SIZE == 64 */
# define FILESPEC1 ((char *) filespec1)
# define FILESPEC2 ((char *) filespec2)
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

	if (!filespec1) filespec1 = "";
	if (!filespec2) filespec2 = "";
	filespec1len = strlen(filespec1);
	filespec2len = strlen(filespec2);

#if __INITIAL_POINTER_SIZE == 64
	/* Copy the file names to storage with a 32-bit pointer. */
	filespec1_32p = filespec1_32;
	filespec2_32p = filespec2_32;
	strcpy( filespec1_32p, filespec1);
	strcpy( filespec2_32p, filespec2);
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

	fab = cc$rms_fab;
	nam = CC_RMS_NAMX;

	FAB_OR_NAML( fab, nam).FAB_OR_NAML_FNA = FILESPEC1;
	FAB_OR_NAML( fab, nam).FAB_OR_NAML_FNS = filespec1len;
	FAB_OR_NAML( fab, nam).FAB_OR_NAML_DNA = FILESPEC2;
	FAB_OR_NAML( fab, nam).FAB_OR_NAML_DNS = filespec2len;
	NAMX_DNA_FNA_SET( fab)

	nam.NAMX_ESA = esa;
	nam.NAMX_ESS = NAMX_MAXRSS;
	nam.NAMX_NOP = NAM$M_SYNCHK | NAM$M_PWD;
	SET_NAMX_NO_SHORT_UPCASE( nam);

	fab.FAB_NAMX = &nam;

	status = sys$parse(&fab, 0, 0);

	if(!$VMS_STATUS_SUCCESS(status))
		{
		unsigned short length;
		char errstring[257];
		struct dsc$descriptor_s errstring_dsc;

		errstring_dsc.dsc$w_length = sizeof(errstring);
		errstring_dsc.dsc$b_dtype = DSC$K_DTYPE_T;
		errstring_dsc.dsc$b_class = DSC$K_CLASS_S;
		errstring_dsc.dsc$a_pointer = errstring;

		status = sys$getmsg(status, &length, &errstring_dsc, 1, 0);

		if (!$VMS_STATUS_SUCCESS(status))
			lib$signal(status); /* This is really bad.  Abort!  */
		else
			{
			errstring[length] = '\0';

			DSOerr(DSO_F_VMS_MERGER,DSO_R_FAILURE);
			ERR_add_error_data(7,
					   "filespec \"", filespec1, "\", ",
					   "defaults \"", filespec2, "\": ",
					   errstring);
			}
		return(NULL);
		}

	merged = OPENSSL_malloc( nam.NAMX_ESL+ 1);
	if(!merged)
		goto malloc_err;
	strncpy( merged, nam.NAMX_ESA, nam.NAMX_ESL);
	merged[ nam.NAMX_ESL] = '\0';
	return(merged);
 malloc_err:
	DSOerr(DSO_F_VMS_MERGER,
		ERR_R_MALLOC_FAILURE);
	}

static char *vms_name_converter(DSO *dso, const char *filename)
	{
        int len = strlen(filename);
        char *not_translated = OPENSSL_malloc(len+1);
        strcpy(not_translated,filename);
	return(not_translated);
	}

#endif /* OPENSSL_SYS_VMS */
@


1.6
log
@openssl-1.0.0e: resolve conflicts
@
text
@@


1.5
log
@resolve conflicts, fix local changes
@
text
@d71 1
d74 11
d136 1
a136 1
	char filename[FILENAME_MAX+1];
d140 1
a140 1
	char imagename[FILENAME_MAX+1];
a142 1

d153 16
a168 1
	DSO_VMS_INTERNAL *p;
d221 1
a221 1
	p = (DSO_VMS_INTERNAL *)OPENSSL_malloc(sizeof(DSO_VMS_INTERNAL));
d319 13
a333 5
	symname_dsc.dsc$w_length = strlen(symname);
	symname_dsc.dsc$b_dtype = DSC$K_DTYPE_T;
	symname_dsc.dsc$b_class = DSC$K_CLASS_S;
	symname_dsc.dsc$a_pointer = (char *)symname; /* The cast is needed */

d339 12
d421 1
d427 2
a428 7
#ifdef NAML$C_MAXRSS
	struct NAML nam;
	char esa[NAML$C_MAXRSS];
#else
	struct NAM nam;
	char esa[NAM$C_MAXRSS];
#endif
d431 16
d452 8
d461 12
a472 5
#ifdef NAML$C_MAXRSS
	nam = cc$rms_naml;
#else
	nam = cc$rms_nam;
#endif
d474 1
a474 32
	fab.fab$l_fna = (char *)filespec1;
	fab.fab$b_fns = filespec1len;
	fab.fab$l_dna = (char *)filespec2;
	fab.fab$b_dns = filespec2len;
#ifdef NAML$C_MAXRSS
	if (filespec1len > NAM$C_MAXRSS)
		{
		fab.fab$l_fna = 0;
		fab.fab$b_fns = 0;
		nam.naml$l_long_filename = (char *)filespec1;
		nam.naml$l_long_filename_size = filespec1len;
		}
	if (filespec2len > NAM$C_MAXRSS)
		{
		fab.fab$l_dna = 0;
		fab.fab$b_dns = 0;
		nam.naml$l_long_defname = (char *)filespec2;
		nam.naml$l_long_defname_size = filespec2len;
		}
	nam.naml$l_esa = esa;
	nam.naml$b_ess = NAM$C_MAXRSS;
	nam.naml$l_long_expand = esa;
	nam.naml$l_long_expand_alloc = sizeof(esa);
	nam.naml$b_nop = NAM$M_SYNCHK | NAM$M_PWD;
	nam.naml$v_no_short_upcase = 1;
	fab.fab$l_naml = &nam;
#else
	nam.nam$l_esa = esa;
	nam.nam$b_ess = NAM$C_MAXRSS;
	nam.nam$b_nop = NAM$M_SYNCHK | NAM$M_PWD;
	fab.fab$l_nam = &nam;
#endif
d505 2
a506 21
#ifdef NAML$C_MAXRSS
	if (nam.naml$l_long_expand_size)
		{
		merged = OPENSSL_malloc(nam.naml$l_long_expand_size + 1);
		if(!merged)
			goto malloc_err;
		strncpy(merged, nam.naml$l_long_expand,
			nam.naml$l_long_expand_size);
		merged[nam.naml$l_long_expand_size] = '\0';
		}
	else
		{
		merged = OPENSSL_malloc(nam.naml$b_esl + 1);
		if(!merged)
			goto malloc_err;
		strncpy(merged, nam.naml$l_esa,
			nam.naml$b_esl);
		merged[nam.naml$b_esl] = '\0';
		}
#else
	merged = OPENSSL_malloc(nam.nam$b_esl + 1);
d509 2
a510 4
	strncpy(merged, nam.nam$l_esa,
		nam.nam$b_esl);
	merged[nam.nam$b_esl] = '\0';
#endif
@


1.4
log
@resolve conflicts
@
text
@d218 1
a218 1
	if(!sk_push(dso->meth_data, (char *)p))
d248 1
a248 1
	if(sk_num(dso->meth_data) < 1)
d250 1
a250 1
	p = (DSO_VMS_INTERNAL *)sk_pop(dso->meth_data);
d305 1
a305 1
	if(sk_num(dso->meth_data) < 1)
d310 2
a311 2
	ptr = (DSO_VMS_INTERNAL *)sk_value(dso->meth_data,
		sk_num(dso->meth_data) - 1);
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d1 1
a1 1
/* dso_vms.c */
d66 1
d93 2
d109 1
d147 1
a147 1
		DSOerr(DSO_F_DLFCN_LOAD,DSO_R_NO_FILENAME);
d302 1
a302 1
		DSOerr(DSO_F_VMS_BIND_VAR,ERR_R_PASSED_NULL_PARAMETER);
d307 1
a307 1
		DSOerr(DSO_F_VMS_BIND_VAR,DSO_R_STACK_ERROR);
d314 1
a314 1
		DSOerr(DSO_F_VMS_BIND_VAR,DSO_R_NULL_HANDLE);
d343 1
a343 1
			DSOerr(DSO_F_VMS_BIND_VAR,DSO_R_SYM_FAILURE);
d373 121
@


1.2
log
@openssl-engine-0.9.6a merge
@
text
@d62 3
a64 1
#ifdef VMS
a70 2
#include "cryptlib.h"
#include <openssl/dso.h>
d72 1
a72 1
#ifndef VMS
d80 1
a80 1
static int vms_load(DSO *dso, const char *filename);
d89 1
d91 1
a91 1
static long vms_ctrl(DSO *dso, int cmd, long larg, void *parg);
d104 2
a105 1
	vms_ctrl,
d133 1
a133 1
static int vms_load(DSO *dso, const char *filename)
d135 3
d141 6
d188 1
a188 1
		return(0);
d195 1
a195 1
		return(0);
d217 1
a217 2
		OPENSSL_free(p);
		return(0);
d219 3
d223 7
d282 1
d285 3
d371 7
a377 23
static long vms_ctrl(DSO *dso, int cmd, long larg, void *parg)
        {
        if(dso == NULL)
                {
                DSOerr(DSO_F_VMS_CTRL,ERR_R_PASSED_NULL_PARAMETER);
                return(-1);
                }
        switch(cmd)
                {
        case DSO_CTRL_GET_FLAGS:
                return dso->flags;
        case DSO_CTRL_SET_FLAGS:
                dso->flags = (int)larg;
                return(0);
        case DSO_CTRL_OR_FLAGS:
                dso->flags |= (int)larg;
                return(0);
        default:
                break;
                }
        DSOerr(DSO_F_VMS_CTRL,DSO_R_UNKNOWN_COMMAND);
        return(-1);
        }
d379 1
a379 1
#endif /* VMS */
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@a64 1
#include <libfisdef.h>
d262 2
a263 1
	int flags = LIB$M_FIS_MIXEDCASE;
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d62 1
a62 3
#include "cryptlib.h"
#include <openssl/dso.h>
#ifdef OPENSSL_SYS_VMS
d65 1
d70 2
d73 1
a73 1
#ifndef OPENSSL_SYS_VMS
d81 1
a81 1
static int vms_load(DSO *dso);
d90 1
a91 2
#endif
static char *vms_name_converter(DSO *dso, const char *filename);
d104 1
a104 2
	NULL, /* ctrl */
	vms_name_converter,
d132 1
a132 1
static int vms_load(DSO *dso)
a133 3
	void *ptr = NULL;
	/* See applicable comments in dso_dl.c */
	char *filename = DSO_convert_filename(dso, NULL);
a136 6
	if(filename == NULL)
		{
		DSOerr(DSO_F_DLFCN_LOAD,DSO_R_NO_FILENAME);
		goto err;
		}

d178 1
a178 1
		goto err;
d185 1
a185 1
		goto err;
d207 2
a208 1
		goto err;
a209 3

	/* Success (for now, we lie.  We actually do not know...) */
	dso->loaded_filename = filename;
a210 7
err:
	/* Cleanup! */
	if(p != NULL)
		OPENSSL_free(p);
	if(filename != NULL)
		OPENSSL_free(filename);
	return(0);
d263 1
a263 6
#if 0
	int flags = (1<<4); /* LIB$M_FIS_MIXEDCASE, but this symbol isn't
                               defined in VMS older than 7.0 or so */
#else
	int flags = 0;
#endif
d347 23
a369 7
static char *vms_name_converter(DSO *dso, const char *filename)
	{
        int len = strlen(filename);
        char *not_translated = OPENSSL_malloc(len+1);
        strcpy(not_translated,filename);
	return(not_translated);
	}
d371 1
a371 1
#endif /* OPENSSL_SYS_VMS */
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d1 1
a1 1
/* dso_vms.c -*- mode:C; c-file-style: "eay" -*- */
a65 1
#include <rms.h>
a91 2
static char *vms_merger(DSO *dso, const char *filespec1,
	const char *filespec2);
a105 1
	vms_merger,
d143 1
a143 1
		DSOerr(DSO_F_VMS_LOAD,DSO_R_NO_FILENAME);
d298 1
a298 1
		DSOerr(DSO_F_VMS_BIND_SYM,ERR_R_PASSED_NULL_PARAMETER);
d303 1
a303 1
		DSOerr(DSO_F_VMS_BIND_SYM,DSO_R_STACK_ERROR);
d310 1
a310 1
		DSOerr(DSO_F_VMS_BIND_SYM,DSO_R_NULL_HANDLE);
d339 1
a339 1
			DSOerr(DSO_F_VMS_BIND_SYM,DSO_R_SYM_FAILURE);
a368 121
	}

static char *vms_merger(DSO *dso, const char *filespec1, const char *filespec2)
	{
	int status;
	int filespec1len, filespec2len;
	struct FAB fab;
#ifdef NAML$C_MAXRSS
	struct NAML nam;
	char esa[NAML$C_MAXRSS];
#else
	struct NAM nam;
	char esa[NAM$C_MAXRSS];
#endif
	char *merged;

	if (!filespec1) filespec1 = "";
	if (!filespec2) filespec2 = "";
	filespec1len = strlen(filespec1);
	filespec2len = strlen(filespec2);

	fab = cc$rms_fab;
#ifdef NAML$C_MAXRSS
	nam = cc$rms_naml;
#else
	nam = cc$rms_nam;
#endif

	fab.fab$l_fna = (char *)filespec1;
	fab.fab$b_fns = filespec1len;
	fab.fab$l_dna = (char *)filespec2;
	fab.fab$b_dns = filespec2len;
#ifdef NAML$C_MAXRSS
	if (filespec1len > NAM$C_MAXRSS)
		{
		fab.fab$l_fna = 0;
		fab.fab$b_fns = 0;
		nam.naml$l_long_filename = (char *)filespec1;
		nam.naml$l_long_filename_size = filespec1len;
		}
	if (filespec2len > NAM$C_MAXRSS)
		{
		fab.fab$l_dna = 0;
		fab.fab$b_dns = 0;
		nam.naml$l_long_defname = (char *)filespec2;
		nam.naml$l_long_defname_size = filespec2len;
		}
	nam.naml$l_esa = esa;
	nam.naml$b_ess = NAM$C_MAXRSS;
	nam.naml$l_long_expand = esa;
	nam.naml$l_long_expand_alloc = sizeof(esa);
	nam.naml$b_nop = NAM$M_SYNCHK | NAM$M_PWD;
	nam.naml$v_no_short_upcase = 1;
	fab.fab$l_naml = &nam;
#else
	nam.nam$l_esa = esa;
	nam.nam$b_ess = NAM$C_MAXRSS;
	nam.nam$b_nop = NAM$M_SYNCHK | NAM$M_PWD;
	fab.fab$l_nam = &nam;
#endif

	status = sys$parse(&fab, 0, 0);

	if(!$VMS_STATUS_SUCCESS(status))
		{
		unsigned short length;
		char errstring[257];
		struct dsc$descriptor_s errstring_dsc;

		errstring_dsc.dsc$w_length = sizeof(errstring);
		errstring_dsc.dsc$b_dtype = DSC$K_DTYPE_T;
		errstring_dsc.dsc$b_class = DSC$K_CLASS_S;
		errstring_dsc.dsc$a_pointer = errstring;

		status = sys$getmsg(status, &length, &errstring_dsc, 1, 0);

		if (!$VMS_STATUS_SUCCESS(status))
			lib$signal(status); /* This is really bad.  Abort!  */
		else
			{
			errstring[length] = '\0';

			DSOerr(DSO_F_VMS_MERGER,DSO_R_FAILURE);
			ERR_add_error_data(7,
					   "filespec \"", filespec1, "\", ",
					   "defaults \"", filespec2, "\": ",
					   errstring);
			}
		return(NULL);
		}
#ifdef NAML$C_MAXRSS
	if (nam.naml$l_long_expand_size)
		{
		merged = OPENSSL_malloc(nam.naml$l_long_expand_size + 1);
		if(!merged)
			goto malloc_err;
		strncpy(merged, nam.naml$l_long_expand,
			nam.naml$l_long_expand_size);
		merged[nam.naml$l_long_expand_size] = '\0';
		}
	else
		{
		merged = OPENSSL_malloc(nam.naml$b_esl + 1);
		if(!merged)
			goto malloc_err;
		strncpy(merged, nam.naml$l_esa,
			nam.naml$b_esl);
		merged[nam.naml$b_esl] = '\0';
		}
#else
	merged = OPENSSL_malloc(nam.nam$b_esl + 1);
	if(!merged)
		goto malloc_err;
	strncpy(merged, nam.nam$l_esa,
		nam.nam$b_esl);
	merged[nam.nam$b_esl] = '\0';
#endif
	return(merged);
 malloc_err:
	DSOerr(DSO_F_VMS_MERGER,
		ERR_R_MALLOC_FAILURE);
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d218 1
a218 1
	if(!sk_void_push(dso->meth_data, (char *)p))
d248 1
a248 1
	if(sk_void_num(dso->meth_data) < 1)
d250 1
a250 1
	p = (DSO_VMS_INTERNAL *)sk_void_pop(dso->meth_data);
d305 1
a305 1
	if(sk_void_num(dso->meth_data) < 1)
d310 2
a311 2
	ptr = (DSO_VMS_INTERNAL *)sk_void_value(dso->meth_data,
		sk_void_num(dso->meth_data) - 1);
@


1.1.1.4
log
@import OpenSSL 1.0.0e
@
text
@a70 1
#include "vms_rms.h"
a72 11
/* Some compiler options may mask the declaration of "_malloc32". */
#if __INITIAL_POINTER_SIZE && defined _ANSI_C_SOURCE
# if __INITIAL_POINTER_SIZE == 64
#  pragma pointer_size save
#  pragma pointer_size 32
    void * _malloc32  (__size_t);
#  pragma pointer_size restore
# endif /* __INITIAL_POINTER_SIZE == 64 */
#endif /* __INITIAL_POINTER_SIZE && defined _ANSI_C_SOURCE */


d124 1
a124 1
	char filename[ NAMX_MAXRSS+ 1];
d128 1
a128 1
	char imagename[ NAMX_MAXRSS+ 1];
d131 1
d142 1
a142 16

/* Ensure 32-bit pointer for "p", and appropriate malloc() function. */
#if __INITIAL_POINTER_SIZE == 64
# define DSO_MALLOC _malloc32
# pragma pointer_size save
# pragma pointer_size 32
#else /* __INITIAL_POINTER_SIZE == 64 */
# define DSO_MALLOC OPENSSL_malloc
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

	DSO_VMS_INTERNAL *p = NULL;

#if __INITIAL_POINTER_SIZE == 64
# pragma pointer_size restore
#endif /* __INITIAL_POINTER_SIZE == 64 */

d195 1
a195 1
	p = DSO_MALLOC(sizeof(DSO_VMS_INTERNAL));
d293 1
d295 4
a298 13
/* Arrange 32-bit pointer to (copied) string storage, if needed. */
#if __INITIAL_POINTER_SIZE == 64
# define SYMNAME symname_32p
# pragma pointer_size save
# pragma pointer_size 32
	char *symname_32p;
# pragma pointer_size restore
	char symname_32[ NAMX_MAXRSS+ 1];
#else /* __INITIAL_POINTER_SIZE == 64 */
# define SYMNAME ((char *) symname)
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

	*sym = NULL;
a304 12

#if __INITIAL_POINTER_SIZE == 64
	/* Copy the symbol name to storage with a 32-bit pointer. */
	symname_32p = symname_32;
	strcpy( symname_32p, symname);
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

	symname_dsc.dsc$w_length = strlen(SYMNAME);
	symname_dsc.dsc$b_dtype = DSC$K_DTYPE_T;
	symname_dsc.dsc$b_class = DSC$K_CLASS_S;
	symname_dsc.dsc$a_pointer = SYMNAME;

a374 1

d380 7
a386 2
	struct NAMX_STRUCT nam;
	char esa[ NAMX_MAXRSS+ 1];
a388 16
/* Arrange 32-bit pointer to (copied) string storage, if needed. */
#if __INITIAL_POINTER_SIZE == 64
# define FILESPEC1 filespec1_32p;
# define FILESPEC2 filespec2_32p;
# pragma pointer_size save
# pragma pointer_size 32
	char *filespec1_32p;
	char *filespec2_32p;
# pragma pointer_size restore
	char filespec1_32[ NAMX_MAXRSS+ 1];
	char filespec2_32[ NAMX_MAXRSS+ 1];
#else /* __INITIAL_POINTER_SIZE == 64 */
# define FILESPEC1 ((char *) filespec1)
# define FILESPEC2 ((char *) filespec2)
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

a393 8
#if __INITIAL_POINTER_SIZE == 64
	/* Copy the file names to storage with a 32-bit pointer. */
	filespec1_32p = filespec1_32;
	filespec2_32p = filespec2_32;
	strcpy( filespec1_32p, filespec1);
	strcpy( filespec2_32p, filespec2);
#endif /* __INITIAL_POINTER_SIZE == 64 [else] */

d395 5
a399 1
	nam = CC_RMS_NAMX;
d401 32
a432 12
	FAB_OR_NAML( fab, nam).FAB_OR_NAML_FNA = FILESPEC1;
	FAB_OR_NAML( fab, nam).FAB_OR_NAML_FNS = filespec1len;
	FAB_OR_NAML( fab, nam).FAB_OR_NAML_DNA = FILESPEC2;
	FAB_OR_NAML( fab, nam).FAB_OR_NAML_DNS = filespec2len;
	NAMX_DNA_FNA_SET( fab)

	nam.NAMX_ESA = esa;
	nam.NAMX_ESS = NAMX_MAXRSS;
	nam.NAMX_NOP = NAM$M_SYNCHK | NAM$M_PWD;
	SET_NAMX_NO_SHORT_UPCASE( nam);

	fab.FAB_NAMX = &nam;
d463 21
a483 2

	merged = OPENSSL_malloc( nam.NAMX_ESL+ 1);
d486 4
a489 2
	strncpy( merged, nam.NAMX_ESA, nam.NAMX_ESL);
	merged[ nam.NAMX_ESL] = '\0';
@


