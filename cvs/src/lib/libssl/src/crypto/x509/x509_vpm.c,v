head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.8
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	butholakala:1.1.1.4
	openssl_1_0_1_g:1.1.1.4
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.16
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.12
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.10
	OPENBSD_5_3_BASE:1.1.1.4
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.6
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.8
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.1.1.4.0.4
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.2
	OPENBSD_4_9_BASE:1.1.1.4
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.1.1.3.0.6
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.2
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.4
	OPENBSD_4_6_BASE:1.1.1.3
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.09.29.04.16.49;	author miod;	state Exp;
branches;
next	1.10;
commitid	jkDniSzFWUemUrIl;

1.10
date	2014.07.22.02.21.20;	author beck;	state Exp;
branches;
next	1.9;
commitid	iBnKYMaAFvJMFyL2;

1.9
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.7;
commitid	id8dTrTMtnTn4fqt;

1.7
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.05.30.02.52.11;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2014.05.25.20.28.50;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.20.16.10.10;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.18.01.59.00;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.14.00;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.04.06.06.30.04;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@X509_VERIFY_PARAM_set1_name(): if invoked with NULL as the second
parameter, correctly set param->name to NULL after having freed it.
ok bcook@@
@
text
@/* $OpenBSD: x509_vpm.c,v 1.10 2014/07/22 02:21:20 beck Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2004.
 */
/* ====================================================================
 * Copyright (c) 2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/buffer.h>
#include <openssl/crypto.h>
#include <openssl/lhash.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

/* X509_VERIFY_PARAM functions */

static void
x509_verify_param_zero(X509_VERIFY_PARAM *param)
{
	if (!param)
		return;
	param->name = NULL;
	param->purpose = 0;
	param->trust = 0;
	/*param->inh_flags = X509_VP_FLAG_DEFAULT;*/
	param->inh_flags = 0;
	param->flags = 0;
	param->depth = -1;
	if (param->policies) {
		sk_ASN1_OBJECT_pop_free(param->policies, ASN1_OBJECT_free);
		param->policies = NULL;
	}
}

X509_VERIFY_PARAM *
X509_VERIFY_PARAM_new(void)
{
	X509_VERIFY_PARAM *param;

	param = calloc(1, sizeof(X509_VERIFY_PARAM));
	x509_verify_param_zero(param);
	return param;
}

void
X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)
{
	x509_verify_param_zero(param);
	free(param);
}

/* This function determines how parameters are "inherited" from one structure
 * to another. There are several different ways this can happen.
 *
 * 1. If a child structure needs to have its values initialized from a parent
 *    they are simply copied across. For example SSL_CTX copied to SSL.
 * 2. If the structure should take on values only if they are currently unset.
 *    For example the values in an SSL structure will take appropriate value
 *    for SSL servers or clients but only if the application has not set new
 *    ones.
 *
 * The "inh_flags" field determines how this function behaves.
 *
 * Normally any values which are set in the default are not copied from the
 * destination and verify flags are ORed together.
 *
 * If X509_VP_FLAG_DEFAULT is set then anything set in the source is copied
 * to the destination. Effectively the values in "to" become default values
 * which will be used only if nothing new is set in "from".
 *
 * If X509_VP_FLAG_OVERWRITE is set then all value are copied across whether
 * they are set or not. Flags is still Ored though.
 *
 * If X509_VP_FLAG_RESET_FLAGS is set then the flags value is copied instead
 * of ORed.
 *
 * If X509_VP_FLAG_LOCKED is set then no values are copied.
 *
 * If X509_VP_FLAG_ONCE is set then the current inh_flags setting is zeroed
 * after the next call.
 */

/* Macro to test if a field should be copied from src to dest */

#define test_x509_verify_param_copy(field, def) \
	(to_overwrite || \
		((src->field != def) && (to_default || (dest->field == def))))

/* Macro to test and copy a field if necessary */

#define x509_verify_param_copy(field, def) \
	if (test_x509_verify_param_copy(field, def)) \
		dest->field = src->field


int
X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *dest, const X509_VERIFY_PARAM *src)
{
	unsigned long inh_flags;
	int to_default, to_overwrite;

	if (!src)
		return 1;
	inh_flags = dest->inh_flags | src->inh_flags;

	if (inh_flags & X509_VP_FLAG_ONCE)
		dest->inh_flags = 0;

	if (inh_flags & X509_VP_FLAG_LOCKED)
		return 1;

	if (inh_flags & X509_VP_FLAG_DEFAULT)
		to_default = 1;
	else
		to_default = 0;

	if (inh_flags & X509_VP_FLAG_OVERWRITE)
		to_overwrite = 1;
	else
		to_overwrite = 0;

	x509_verify_param_copy(purpose, 0);
	x509_verify_param_copy(trust, 0);
	x509_verify_param_copy(depth, -1);

	/* If overwrite or check time not set, copy across */

	if (to_overwrite || !(dest->flags & X509_V_FLAG_USE_CHECK_TIME)) {
		dest->check_time = src->check_time;
		dest->flags &= ~X509_V_FLAG_USE_CHECK_TIME;
		/* Don't need to copy flag: that is done below */
	}

	if (inh_flags & X509_VP_FLAG_RESET_FLAGS)
		dest->flags = 0;

	dest->flags |= src->flags;

	if (test_x509_verify_param_copy(policies, NULL)) {
		if (!X509_VERIFY_PARAM_set1_policies(dest, src->policies))
			return 0;
	}

	return 1;
}

int
X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to, const X509_VERIFY_PARAM *from)
{
	unsigned long save_flags = to->inh_flags;
	int ret;

	to->inh_flags |= X509_VP_FLAG_DEFAULT;
	ret = X509_VERIFY_PARAM_inherit(to, from);
	to->inh_flags = save_flags;
	return ret;
}

int
X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name)
{
	free(param->name);
	param->name = NULL;
	if (name == NULL)
		return 1;
	param->name = strdup(name);
	if (param->name)
		return 1;
	return 0;
}

int
X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param, unsigned long flags)
{
	param->flags |= flags;
	if (flags & X509_V_FLAG_POLICY_MASK)
		param->flags |= X509_V_FLAG_POLICY_CHECK;
	return 1;
}

int
X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param, unsigned long flags)
{
	param->flags &= ~flags;
	return 1;
}

unsigned long
X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param)
{
	return param->flags;
}

int
X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose)
{
	return X509_PURPOSE_set(&param->purpose, purpose);
}

int
X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust)
{
	return X509_TRUST_set(&param->trust, trust);
}

void
X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth)
{
	param->depth = depth;
}

void
X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t)
{
	param->check_time = t;
	param->flags |= X509_V_FLAG_USE_CHECK_TIME;
}

int
X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param, ASN1_OBJECT *policy)
{
	if (!param->policies) {
		param->policies = sk_ASN1_OBJECT_new_null();
		if (!param->policies)
			return 0;
	}
	if (!sk_ASN1_OBJECT_push(param->policies, policy))
		return 0;
	return 1;
}

int
X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,
    STACK_OF(ASN1_OBJECT) *policies)
{
	int i;
	ASN1_OBJECT *oid, *doid;

	if (!param)
		return 0;
	if (param->policies)
		sk_ASN1_OBJECT_pop_free(param->policies, ASN1_OBJECT_free);

	if (!policies) {
		param->policies = NULL;
		return 1;
	}

	param->policies = sk_ASN1_OBJECT_new_null();
	if (!param->policies)
		return 0;

	for (i = 0; i < sk_ASN1_OBJECT_num(policies); i++) {
		oid = sk_ASN1_OBJECT_value(policies, i);
		doid = OBJ_dup(oid);
		if (!doid)
			return 0;
		if (!sk_ASN1_OBJECT_push(param->policies, doid)) {
			ASN1_OBJECT_free(doid);
			return 0;
		}
	}
	param->flags |= X509_V_FLAG_POLICY_CHECK;
	return 1;
}

int
X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param)
{
	return param->depth;
}

/* Default verify parameters: these are used for various
 * applications and can be overridden by the user specified table.
 * NB: the 'name' field *must* be in alphabetical order because it
 * will be searched using OBJ_search.
 */

static const X509_VERIFY_PARAM default_table[] = {
	{
		"default",			/* X509 default parameters */
		0,				/* Check time */
		0,				/* internal flags */
		0,				/* flags */
		0,				/* purpose */
		0,				/* trust */
		100,				/* depth */
		NULL				/* policies */
	},
	{
		"pkcs7",			/* S/MIME sign parameters */
		0,				/* Check time */
		0,				/* internal flags */
		0,				/* flags */
		X509_PURPOSE_SMIME_SIGN,	/* purpose */
		X509_TRUST_EMAIL,		/* trust */
		-1,				/* depth */
		NULL				/* policies */
	},
	{
		"smime_sign",			/* S/MIME sign parameters */
		0,				/* Check time */
		0,				/* internal flags */
		0,				/* flags */
		X509_PURPOSE_SMIME_SIGN,	/* purpose */
		X509_TRUST_EMAIL,		/* trust */
		-1,				/* depth */
		NULL				/* policies */
	},
	{
		"ssl_client",			/* SSL/TLS client parameters */
		0,				/* Check time */
		0,				/* internal flags */
		0,				/* flags */
		X509_PURPOSE_SSL_CLIENT,	/* purpose */
		X509_TRUST_SSL_CLIENT,		/* trust */
		-1,				/* depth */
		NULL				/* policies */
	},
	{
		"ssl_server",			/* SSL/TLS server parameters */
		0,				/* Check time */
		0,				/* internal flags */
		0,				/* flags */
		X509_PURPOSE_SSL_SERVER,	/* purpose */
		X509_TRUST_SSL_SERVER,		/* trust */
		-1,				/* depth */
		NULL				/* policies */
	}
};

static STACK_OF(X509_VERIFY_PARAM) *param_table = NULL;

static int
table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)
{
	return strcmp(a->name, b->name);
}

DECLARE_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM, table);
IMPLEMENT_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM, table);

static int
param_cmp(const X509_VERIFY_PARAM * const *a,
    const X509_VERIFY_PARAM * const *b)
{
	return strcmp((*a)->name, (*b)->name);
}

int
X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param)
{
	int idx;
	X509_VERIFY_PARAM *ptmp;

	if (!param_table) {
		param_table = sk_X509_VERIFY_PARAM_new(param_cmp);
		if (!param_table)
			return 0;
	} else {
		idx = sk_X509_VERIFY_PARAM_find(param_table, param);
		if (idx != -1) {
			ptmp = sk_X509_VERIFY_PARAM_value(param_table, idx);
			X509_VERIFY_PARAM_free(ptmp);
			(void)sk_X509_VERIFY_PARAM_delete(param_table, idx);
		}
	}
	if (!sk_X509_VERIFY_PARAM_push(param_table, param))
		return 0;
	return 1;
}

const X509_VERIFY_PARAM *
X509_VERIFY_PARAM_lookup(const char *name)
{
	int idx;
	X509_VERIFY_PARAM pm;

	pm.name = (char *)name;
	if (param_table) {
		idx = sk_X509_VERIFY_PARAM_find(param_table, &pm);
		if (idx != -1)
			return sk_X509_VERIFY_PARAM_value(param_table, idx);
	}
	return OBJ_bsearch_table(&pm, default_table,
	    sizeof(default_table)/sizeof(X509_VERIFY_PARAM));
}

void
X509_VERIFY_PARAM_table_cleanup(void)
{
	if (param_table)
		sk_X509_VERIFY_PARAM_pop_free(param_table,
		    X509_VERIFY_PARAM_free);
	param_table = NULL;
}
@


1.10
log
@Kill a bunch more BUF_strdup's - these are converted to have a check for
NULL before an intrinsic strdup.
ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_vpm.c,v 1.9 2014/07/11 08:44:49 jsing Exp $ */
d216 1
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_vpm.c,v 1.8 2014/07/10 13:58:23 jsing Exp $ */
d216 3
a218 1
	param->name = BUF_strdup(name);
@


1.8
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_vpm.c,v 1.7 2014/06/12 15:49:31 deraadt Exp $ */
d62 1
a62 1
#include "cryptlib.h"
a64 1
#include <openssl/buffer.h>
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
@


1.6
log
@no need for null check before free. from Brendan MacDonell
@
text
@d1 1
a1 1
/* x509_vpm.c */
@


1.5
log
@calloc instead of malloc/memset. from Benjamin Baier
@
text
@d215 1
a215 2
	if (param->name)
		free(param->name);
@


1.4
log
@KNF.
@
text
@d93 1
a93 2
	param = malloc(sizeof(X509_VERIFY_PARAM));
	memset(param, 0, sizeof(X509_VERIFY_PARAM));
@


1.3
log
@blunt force knf
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d70 2
a71 1
static void x509_verify_param_zero(X509_VERIFY_PARAM *param)
d88 2
a89 1
X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void)
d92 1
d99 2
a100 1
void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)
d116 1
a116 1
 * The "inh_flags" field determines how this function behaves. 
a147 1
		
d149 3
a151 2
int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *dest,
						const X509_VERIFY_PARAM *src)
d155 1
d201 2
a202 2
int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,
						const X509_VERIFY_PARAM *from)
d206 1
d213 2
a214 1
int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name)
d224 2
a225 1
int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param, unsigned long flags)
d233 2
a234 1
int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param, unsigned long flags)
d240 2
a241 1
unsigned long X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param)
d246 2
a247 1
int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose)
d252 2
a253 1
int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust)
d258 2
a259 1
void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth)
d264 2
a265 1
void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t)
d271 2
a272 1
int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param, ASN1_OBJECT *policy)
d284 3
a286 2
int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param, 
					STACK_OF(ASN1_OBJECT) *policies)
d290 1
d319 2
a320 1
int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param)
d333 8
a340 8
	"default",	/* X509 default parameters */
	0,		/* Check time */
	0,		/* internal flags */
	0,		/* flags */
	0,		/* purpose */
	0,		/* trust */
	100,		/* depth */
	NULL		/* policies */
d343 8
a350 8
	"pkcs7",			/* S/MIME sign parameters */
	0,				/* Check time */
	0,				/* internal flags */
	0,				/* flags */
	X509_PURPOSE_SMIME_SIGN,	/* purpose */
	X509_TRUST_EMAIL,		/* trust */
	-1,				/* depth */
	NULL				/* policies */
d353 8
a360 8
	"smime_sign",			/* S/MIME sign parameters */
	0,				/* Check time */
	0,				/* internal flags */
	0,				/* flags */
	X509_PURPOSE_SMIME_SIGN,	/* purpose */
	X509_TRUST_EMAIL,		/* trust */
	-1,				/* depth */
	NULL				/* policies */
d363 8
a370 8
	"ssl_client",			/* SSL/TLS client parameters */
	0,				/* Check time */
	0,				/* internal flags */
	0,				/* flags */
	X509_PURPOSE_SSL_CLIENT,	/* purpose */
	X509_TRUST_SSL_CLIENT,		/* trust */
	-1,				/* depth */
	NULL				/* policies */
d373 8
a380 8
	"ssl_server",			/* SSL/TLS server parameters */
	0,				/* Check time */
	0,				/* internal flags */
	0,				/* flags */
	X509_PURPOSE_SSL_SERVER,	/* purpose */
	X509_TRUST_SSL_SERVER,		/* trust */
	-1,				/* depth */
	NULL				/* policies */
d386 2
a387 2
static int table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)

d392 2
a393 4
DECLARE_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM,
			   table);
IMPLEMENT_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM,
			     table);
d395 3
a397 2
static int param_cmp(const X509_VERIFY_PARAM * const *a,
			const X509_VERIFY_PARAM * const *b)
d402 2
a403 1
int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param)
d407 1
d425 2
a426 1
const X509_VERIFY_PARAM *X509_VERIFY_PARAM_lookup(const char *name)
d438 1
a438 1
			   sizeof(default_table)/sizeof(X509_VERIFY_PARAM));
d441 2
a442 1
void X509_VERIFY_PARAM_table_cleanup(void)
d446 1
a446 1
						X509_VERIFY_PARAM_free);
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d71 1
a71 1
	{
d81 1
a81 2
	if (param->policies)
		{
a83 1
		}
d85 1
d88 1
a88 1
	{
d94 1
a94 1
	}
d97 1
a97 1
	{
d100 1
a100 1
	}
d148 1
a148 1
	{
d177 1
a177 2
	if (to_overwrite || !(dest->flags & X509_V_FLAG_USE_CHECK_TIME))
		{
d181 1
a181 1
		}
d188 1
a188 2
	if (test_x509_verify_param_copy(policies, NULL))
		{
d191 1
a191 1
		}
d194 1
a194 1
	}
d198 1
a198 1
	{
d205 1
a205 1
	}
d208 1
a208 1
	{
d215 1
a215 1
	}
d218 1
a218 1
	{
d223 1
a223 1
	}
d226 1
a226 1
	{
d229 1
a229 1
	}
d232 1
a232 1
	{
d234 1
a234 1
	}
d237 1
a237 1
	{
d239 1
a239 1
	}
d242 1
a242 1
	{
d244 1
a244 1
	}
d247 1
a247 1
	{
d249 1
a249 1
	}
d252 1
a252 1
	{
d255 1
a255 1
	}
d258 2
a259 3
	{
	if (!param->policies)
		{
d263 1
a263 1
		}
d267 1
a267 1
	}
d271 1
a271 1
	{
d279 1
a279 2
	if (!policies)
		{
d282 1
a282 1
		}
d288 1
a288 2
	for (i = 0; i < sk_ASN1_OBJECT_num(policies); i++)
		{
d293 1
a293 2
		if (!sk_ASN1_OBJECT_push(param->policies, doid))
			{
a295 1
			}
d297 1
d300 1
a300 1
	}
d303 1
a303 1
	{
d305 1
a305 1
	}
d363 2
a364 1
	}};
d370 1
a370 1
	{
d372 1
a372 1
	}
d381 1
a381 1
	{
d383 1
a383 1
	}
d386 1
a386 1
	{
d389 1
a389 2
	if (!param_table)
		{
d393 1
a393 3
		}
	else
		{
d395 1
a395 2
		if (idx != -1)
			{
a398 1
			}
d400 1
d404 1
a404 1
	}
d407 1
a407 1
	{
d412 1
a412 2
	if (param_table)
		{
d416 1
a416 1
		}
d419 1
a419 1
	}
d422 1
a422 1
	{
d427 1
a427 1
	}
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
d77 2
a78 1
	param->inh_flags = X509_VP_FLAG_DEFAULT;
d91 1
a91 1
	param = OPENSSL_malloc(sizeof(X509_VERIFY_PARAM));
d100 1
a100 1
	OPENSSL_free(param);
d202 2
d205 3
a207 1
	return X509_VERIFY_PARAM_inherit(to, from);
d213 1
a213 1
		OPENSSL_free(param->name);
d328 1
a328 1
	9,		/* depth */
d332 11
a342 1
	"pkcs7",			/* SSL/TLS client parameters */
d374 2
a375 1
static int table_cmp(const void *pa, const void *pb)
a376 1
	const X509_VERIFY_PARAM *a = pa, *b = pb;
d380 5
d420 1
d428 2
a429 5
	return (const X509_VERIFY_PARAM *) OBJ_bsearch((char *)&pm,
				(char *)&default_table,
				sizeof(default_table)/sizeof(X509_VERIFY_PARAM),
				sizeof(X509_VERIFY_PARAM),
				table_cmp);
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.3
log
@import of OpenSSL 0.9.8k
@
text
@d77 1
a77 1
	param->inh_flags = 0;
d323 1
a323 1
	100,		/* depth */
d327 1
a327 11
	"pkcs7",			/* S/MIME signing parameters */
	0,				/* Check time */
	0,				/* internal flags */
	0,				/* flags */
	X509_PURPOSE_SMIME_SIGN,	/* purpose */
	X509_TRUST_EMAIL,		/* trust */
	-1,				/* depth */
	NULL				/* policies */
	},
	{
	"smime_sign",			/* S/MIME signing parameters */
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a76 1
	/*param->inh_flags = X509_VP_FLAG_DEFAULT;*/
a200 2
	unsigned long save_flags = to->inh_flags;
	int ret;
d202 1
a202 3
	ret = X509_VERIFY_PARAM_inherit(to, from);
	to->inh_flags = save_flags;
	return ret;
d327 1
a327 1
	"pkcs7",			/* S/MIME sign parameters */
d337 1
a337 1
	"smime_sign",			/* S/MIME sign parameters */
d369 1
a369 2
static int table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)

d371 1
a374 5
DECLARE_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM,
			   table);
IMPLEMENT_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM,
			     table);

a409 1

d417 5
a421 2
	return OBJ_bsearch_table(&pm, default_table,
			   sizeof(default_table)/sizeof(X509_VERIFY_PARAM));
@


