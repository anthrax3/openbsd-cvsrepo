head	1.14;
access;
symbols
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	butholakala:1.4
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.4.0.24
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.20
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.18
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.16
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.4.0.12
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.26
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.24
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.22
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.20
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.18
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.03.21.04.05.33;	author mmcc;	state Exp;
branches;
next	1.13;
commitid	DaWOF4hNVPK48AoU;

1.13
date	2014.09.29.16.20.40;	author miod;	state Exp;
branches;
next	1.12;
commitid	CHvitCJHvvNHWXrS;

1.12
date	2014.09.26.19.30.38;	author miod;	state Exp;
branches;
next	1.11;
commitid	bLepXR3LEHV52XYf;

1.11
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.07.03.21.21.11;	author miod;	state Exp;
branches;
next	1.9;
commitid	M1cW61XC98v4ICck;

1.9
date	2014.06.28.18.25.24;	author logan;	state Exp;
branches;
next	1.8;
commitid	oHqYmTq1GMGV3Zj7;

1.8
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.20.15.06.11;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.18.01.59.00;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.05.21.36.38;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.12.10;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.58;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.14.00;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Return zero from two functions on allocation failure instead of always
returning one (indicating success). Each function has only a single
usage, and both usages check the return value.

Merged from BoringSSL 0ce78a757d815c0dde9ed5884229f3a5b2cb3e9c:

https://boringssl.googlesource.com/boringssl/+/0ce78a757d815c0dde9ed5884229f3a5b2cb3e9c%5E!/#F0

ok beck@@
@
text
@/* $OpenBSD: x509_att.c,v 1.13 2014/09/29 16:20:40 miod Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/stack.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

int
X509at_get_attr_count(const STACK_OF(X509_ATTRIBUTE) *x)
{
	return sk_X509_ATTRIBUTE_num(x);
}

int
X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) *x, int nid, int lastpos)
{
	ASN1_OBJECT *obj;

	obj = OBJ_nid2obj(nid);
	if (obj == NULL)
		return (-2);
	return (X509at_get_attr_by_OBJ(x, obj, lastpos));
}

int
X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *sk, ASN1_OBJECT *obj,
    int lastpos)
{
	int n;
	X509_ATTRIBUTE *ex;

	if (sk == NULL)
		return (-1);
	lastpos++;
	if (lastpos < 0)
		lastpos = 0;
	n = sk_X509_ATTRIBUTE_num(sk);
	for (; lastpos < n; lastpos++) {
		ex = sk_X509_ATTRIBUTE_value(sk, lastpos);
		if (OBJ_cmp(ex->object, obj) == 0)
			return (lastpos);
	}
	return (-1);
}

X509_ATTRIBUTE *
X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) *x, int loc)
{
	if (x == NULL || sk_X509_ATTRIBUTE_num(x) <= loc || loc < 0)
		return NULL;
	else
		return sk_X509_ATTRIBUTE_value(x, loc);
}

X509_ATTRIBUTE *
X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) *x, int loc)
{
	X509_ATTRIBUTE *ret;

	if (x == NULL || sk_X509_ATTRIBUTE_num(x) <= loc || loc < 0)
		return (NULL);
	ret = sk_X509_ATTRIBUTE_delete(x, loc);
	return (ret);
}

STACK_OF(X509_ATTRIBUTE) *
X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) **x, X509_ATTRIBUTE *attr)
{
	X509_ATTRIBUTE *new_attr = NULL;
	STACK_OF(X509_ATTRIBUTE) *sk = NULL;

	if (x == NULL) {
		X509err(X509_F_X509AT_ADD1_ATTR, ERR_R_PASSED_NULL_PARAMETER);
		return (NULL);
	}

	if (*x == NULL) {
		if ((sk = sk_X509_ATTRIBUTE_new_null()) == NULL)
			goto err;
	} else
		sk = *x;

	if ((new_attr = X509_ATTRIBUTE_dup(attr)) == NULL)
		goto err2;
	if (!sk_X509_ATTRIBUTE_push(sk, new_attr))
		goto err;
	if (*x == NULL)
		*x = sk;
	return (sk);

err:
	X509err(X509_F_X509AT_ADD1_ATTR, ERR_R_MALLOC_FAILURE);
err2:
	if (new_attr != NULL)
		X509_ATTRIBUTE_free(new_attr);
	if (sk != NULL && sk != *x)
		sk_X509_ATTRIBUTE_free(sk);
	return (NULL);
}

STACK_OF(X509_ATTRIBUTE) *
X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE) **x, const ASN1_OBJECT *obj,
    int type, const unsigned char *bytes, int len)
{
	X509_ATTRIBUTE *attr;
	STACK_OF(X509_ATTRIBUTE) *ret;

	attr = X509_ATTRIBUTE_create_by_OBJ(NULL, obj, type, bytes, len);
	if (!attr)
		return 0;
	ret = X509at_add1_attr(x, attr);
	X509_ATTRIBUTE_free(attr);
	return ret;
}

STACK_OF(X509_ATTRIBUTE) *
X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE) **x, int nid, int type,
    const unsigned char *bytes, int len)
{
	X509_ATTRIBUTE *attr;
	STACK_OF(X509_ATTRIBUTE) *ret;

	attr = X509_ATTRIBUTE_create_by_NID(NULL, nid, type, bytes, len);
	if (!attr)
		return 0;
	ret = X509at_add1_attr(x, attr);
	X509_ATTRIBUTE_free(attr);
	return ret;
}

STACK_OF(X509_ATTRIBUTE) *
X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE) **x, const char *attrname,
    int type, const unsigned char *bytes, int len)
{
	X509_ATTRIBUTE *attr;
	STACK_OF(X509_ATTRIBUTE) *ret;

	attr = X509_ATTRIBUTE_create_by_txt(NULL, attrname, type, bytes, len);
	if (!attr)
		return 0;
	ret = X509at_add1_attr(x, attr);
	X509_ATTRIBUTE_free(attr);
	return ret;
}

void *
X509at_get0_data_by_OBJ(STACK_OF(X509_ATTRIBUTE) *x, ASN1_OBJECT *obj,
    int lastpos, int type)
{
	int i;
	X509_ATTRIBUTE *at;

	i = X509at_get_attr_by_OBJ(x, obj, lastpos);
	if (i == -1)
		return NULL;
	if ((lastpos <= -2) && (X509at_get_attr_by_OBJ(x, obj, i) != -1))
		return NULL;
	at = X509at_get_attr(x, i);
	if (lastpos <= -3 && (X509_ATTRIBUTE_count(at) != 1))
		return NULL;
	return X509_ATTRIBUTE_get0_data(at, 0, type, NULL);
}

X509_ATTRIBUTE *
X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid, int atrtype,
    const void *data, int len)
{
	ASN1_OBJECT *obj;
	X509_ATTRIBUTE *ret;

	obj = OBJ_nid2obj(nid);
	if (obj == NULL) {
		X509err(X509_F_X509_ATTRIBUTE_CREATE_BY_NID,
		    X509_R_UNKNOWN_NID);
		return (NULL);
	}
	ret = X509_ATTRIBUTE_create_by_OBJ(attr, obj, atrtype, data, len);
	if (ret == NULL)
		ASN1_OBJECT_free(obj);
	return (ret);
}

X509_ATTRIBUTE *
X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr, const ASN1_OBJECT *obj,
    int atrtype, const void *data, int len)
{
	X509_ATTRIBUTE *ret;

	if ((attr == NULL) || (*attr == NULL)) {
		if ((ret = X509_ATTRIBUTE_new()) == NULL) {
			X509err(X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ,
			    ERR_R_MALLOC_FAILURE);
			return (NULL);
		}
	} else
		ret= *attr;

	if (!X509_ATTRIBUTE_set1_object(ret, obj))
		goto err;
	if (!X509_ATTRIBUTE_set1_data(ret, atrtype, data, len))
		goto err;

	if ((attr != NULL) && (*attr == NULL))
		*attr = ret;
	return (ret);

err:
	if ((attr == NULL) || (ret != *attr))
		X509_ATTRIBUTE_free(ret);
	return (NULL);
}

X509_ATTRIBUTE *
X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr, const char *atrname,
    int type, const unsigned char *bytes, int len)
{
	ASN1_OBJECT *obj;
	X509_ATTRIBUTE *nattr;

	obj = OBJ_txt2obj(atrname, 0);
	if (obj == NULL) {
		X509err(X509_F_X509_ATTRIBUTE_CREATE_BY_TXT,
		    X509_R_INVALID_FIELD_NAME);
		ERR_asprintf_error_data("name=%s", atrname);
		return (NULL);
	}
	nattr = X509_ATTRIBUTE_create_by_OBJ(attr, obj, type, bytes, len);
	ASN1_OBJECT_free(obj);
	return nattr;
}

int
X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj)
{
	if ((attr == NULL) || (obj == NULL))
		return (0);
	ASN1_OBJECT_free(attr->object);
	attr->object = OBJ_dup(obj);
	return attr->object != NULL;
}

int
X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype, const void *data,
    int len)
{
	ASN1_TYPE *ttmp = NULL;
	ASN1_STRING *stmp = NULL;
	int atype = 0;

	if (!attr)
		return 0;
	if (attrtype & MBSTRING_FLAG) {
		stmp = ASN1_STRING_set_by_NID(NULL, data, len, attrtype,
		    OBJ_obj2nid(attr->object));
		if (!stmp) {
			X509err(X509_F_X509_ATTRIBUTE_SET1_DATA,
			    ERR_R_ASN1_LIB);
			return 0;
		}
		atype = stmp->type;
	} else if (len != -1){
		if (!(stmp = ASN1_STRING_type_new(attrtype)))
			goto err;
		if (!ASN1_STRING_set(stmp, data, len))
			goto err;
		atype = attrtype;
	}
	if (!(attr->value.set = sk_ASN1_TYPE_new_null()))
		goto err;
	attr->single = 0;
	/* This is a bit naughty because the attribute should really have
	 * at least one value but some types use and zero length SET and
	 * require this.
	 */
	if (attrtype == 0) {
		ASN1_STRING_free(stmp);
		return 1;
	}

	if (!(ttmp = ASN1_TYPE_new()))
		goto err;
	if ((len == -1) && !(attrtype & MBSTRING_FLAG)) {
		if (!ASN1_TYPE_set1(ttmp, attrtype, data))
			goto err;
	} else
		ASN1_TYPE_set(ttmp, atype, stmp);
	if (!sk_ASN1_TYPE_push(attr->value.set, ttmp))
		goto err;
	return 1;

err:
	ASN1_TYPE_free(ttmp);
	ASN1_STRING_free(stmp);
	X509err(X509_F_X509_ATTRIBUTE_SET1_DATA, ERR_R_MALLOC_FAILURE);
	return 0;
}

int
X509_ATTRIBUTE_count(X509_ATTRIBUTE *attr)
{
	if (!attr->single)
		return sk_ASN1_TYPE_num(attr->value.set);
	if (attr->value.single)
		return 1;
	return 0;
}

ASN1_OBJECT *
X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr)
{
	if (attr == NULL)
		return (NULL);
	return (attr->object);
}

void *
X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx, int atrtype, void *data)
{
	ASN1_TYPE *ttmp;

	ttmp = X509_ATTRIBUTE_get0_type(attr, idx);
	if (!ttmp)
		return NULL;
	if (atrtype != ASN1_TYPE_get(ttmp)){
		X509err(X509_F_X509_ATTRIBUTE_GET0_DATA, X509_R_WRONG_TYPE);
		return NULL;
	}
	return ttmp->value.ptr;
}

ASN1_TYPE *
X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx)
{
	if (attr == NULL)
		return (NULL);
	if (idx >= X509_ATTRIBUTE_count(attr))
		return NULL;
	if (!attr->single)
		return sk_ASN1_TYPE_value(attr->value.set, idx);
	else
		return attr->value.single;
}
@


1.13
log
@Previous fix (1.12) would cause a NULL pointer dereference in the error path
if a NULL stack was passed as argument. Fix this by returning NULL early in
that case.
@
text
@d1 1
a1 1
/* $OpenBSD: x509_att.c,v 1.12 2014/09/26 19:30:38 miod Exp $ */
d300 1
a300 1
	return (1);
@


1.12
log
@X509at_add1_attr(): do not free stuff we did not allocate in the error path.
ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_att.c,v 1.11 2014/07/11 08:44:49 jsing Exp $ */
d76 1
a76 2
X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) *x, int nid,
    int lastpos)
d135 1
a135 1
		goto err2;
@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_att.c,v 1.10 2014/07/03 21:21:11 miod Exp $ */
d143 1
a143 1
		sk= *x;
d158 1
a158 1
	if (sk != NULL)
@


1.10
log
@Memory-leak-in-error-path of the day in X509_ATTRIBUTE_set1_data().
ok logan@@ beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_att.c,v 1.9 2014/06/28 18:25:24 logan Exp $ */
d60 1
a60 2
#include <openssl/stack.h>
#include "cryptlib.h"
d62 2
d65 1
a65 1
#include <openssl/evp.h>
@


1.9
log
@Fix a memory leak and another one that occurs in the error paths.

(Thanks to Brent Cook)


OK from tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_att.c,v 1.8 2014/06/12 15:49:31 deraadt Exp $ */
d307 1
a307 1
	ASN1_TYPE *ttmp;
d353 1
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d336 2
a337 1
	if (attrtype == 0)
d339 2
d353 1
@


1.7
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d1 1
a1 1
/* crypto/x509/x509_att.c */
@


1.6
log
@KNF.
@
text
@d285 1
a285 1
		ERR_add_error_data(2, "name=", atrname);
@


1.5
log
@blunt force knf
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d68 2
a69 1
int X509at_get_attr_count(const STACK_OF(X509_ATTRIBUTE) *x)
d74 3
a76 2
int X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) *x, int nid,
			  int lastpos)
d80 4
a83 3
	obj=OBJ_nid2obj(nid);
	if (obj == NULL) return(-2);
	return(X509at_get_attr_by_OBJ(x,obj,lastpos));
d86 3
a88 2
int X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *sk, ASN1_OBJECT *obj,
			  int lastpos)
d93 2
a94 1
	if (sk == NULL) return(-1);
d97 8
a104 8
		lastpos=0;
	n=sk_X509_ATTRIBUTE_num(sk);
	for ( ; lastpos < n; lastpos++) {
		ex=sk_X509_ATTRIBUTE_value(sk,lastpos);
		if (OBJ_cmp(ex->object,obj) == 0)
			return(lastpos);
		}
	return(-1);
d107 2
a108 1
X509_ATTRIBUTE *X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) *x, int loc)
d113 1
a113 1
		return sk_X509_ATTRIBUTE_value(x,loc);
d116 2
a117 1
X509_ATTRIBUTE *X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) *x, int loc)
d122 3
a124 3
		return(NULL);
	ret=sk_X509_ATTRIBUTE_delete(x,loc);
	return(ret);
d127 2
a128 2
STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) **x,
					 X509_ATTRIBUTE *attr)
d130 2
a131 2
	X509_ATTRIBUTE *new_attr=NULL;
	STACK_OF(X509_ATTRIBUTE) *sk=NULL;
d136 1
a136 1
	} 
d139 1
a139 1
		if ((sk=sk_X509_ATTRIBUTE_new_null()) == NULL)
d144 1
a144 1
	if ((new_attr=X509_ATTRIBUTE_dup(attr)) == NULL)
d146 1
a146 1
	if (!sk_X509_ATTRIBUTE_push(sk,new_attr))
d149 3
a151 2
		*x=sk;
	return(sk);
d153 1
a153 1
	X509err(X509_F_X509AT_ADD1_ATTR,ERR_R_MALLOC_FAILURE);
d155 5
a159 3
	if (new_attr != NULL) X509_ATTRIBUTE_free(new_attr);
	if (sk != NULL) sk_X509_ATTRIBUTE_free(sk);
	return(NULL);
d162 3
a164 3
STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE) **x,
			const ASN1_OBJECT *obj, int type,
			const unsigned char *bytes, int len)
d168 1
d170 2
a171 1
	if(!attr) return 0;
d177 3
a179 3
STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE) **x,
			int nid, int type,
			const unsigned char *bytes, int len)
d183 1
d185 2
a186 1
	if(!attr) return 0;
d192 3
a194 3
STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE) **x,
			const char *attrname, int type,
			const unsigned char *bytes, int len)
d198 1
d200 2
a201 1
	if(!attr) return 0;
d207 3
a209 2
void *X509at_get0_data_by_OBJ(STACK_OF(X509_ATTRIBUTE) *x,
				ASN1_OBJECT *obj, int lastpos, int type)
d213 1
d225 3
a227 2
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid,
	     int atrtype, const void *data, int len)
d232 1
a232 1
	obj=OBJ_nid2obj(nid);
d234 3
a236 2
		X509err(X509_F_X509_ATTRIBUTE_CREATE_BY_NID,X509_R_UNKNOWN_NID);
		return(NULL);
d238 4
a241 3
	ret=X509_ATTRIBUTE_create_by_OBJ(attr,obj,atrtype,data,len);
	if (ret == NULL) ASN1_OBJECT_free(obj);
	return(ret);
d244 3
a246 2
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr,
	     const ASN1_OBJECT *obj, int atrtype, const void *data, int len)
d251 4
a254 3
		if ((ret=X509_ATTRIBUTE_new()) == NULL) {
			X509err(X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ,ERR_R_MALLOC_FAILURE);
			return(NULL);
d256 1
a256 2
	}
	else
d259 1
a259 1
	if (!X509_ATTRIBUTE_set1_object(ret,obj))
d261 1
a261 1
	if (!X509_ATTRIBUTE_set1_data(ret,atrtype,data,len))
d264 4
a267 2
	if ((attr != NULL) && (*attr == NULL)) *attr=ret;
	return(ret);
d271 1
a271 1
	return(NULL);
d274 3
a276 2
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr,
		const char *atrname, int type, const unsigned char *bytes, int len)
d281 1
a281 1
	obj=OBJ_txt2obj(atrname, 0);
d284 1
a284 1
						X509_R_INVALID_FIELD_NAME);
d286 1
a286 1
		return(NULL);
d288 1
a288 1
	nattr = X509_ATTRIBUTE_create_by_OBJ(attr,obj,type,bytes,len);
d293 2
a294 1
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj)
d297 1
a297 1
		return(0);
d299 2
a300 2
	attr->object=OBJ_dup(obj);
	return(1);
d303 3
a305 1
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype, const void *data, int len)
d310 4
a313 2
	if (!attr) return 0;
	if(attrtype & MBSTRING_FLAG) {
d315 4
a318 3
						OBJ_obj2nid(attr->object));
		if(!stmp) {
			X509err(X509_F_X509_ATTRIBUTE_SET1_DATA, ERR_R_ASN1_LIB);
d323 4
a326 2
		if(!(stmp = ASN1_STRING_type_new(attrtype))) goto err;
		if(!ASN1_STRING_set(stmp, data, len)) goto err;
d329 2
a330 1
	if(!(attr->value.set = sk_ASN1_TYPE_new_null())) goto err;
d338 2
a339 1
	if(!(ttmp = ASN1_TYPE_new())) goto err;
d345 2
a346 1
	if(!sk_ASN1_TYPE_push(attr->value.set, ttmp)) goto err;
d348 2
a349 1
	err:
d354 2
a355 1
int X509_ATTRIBUTE_count(X509_ATTRIBUTE *attr)
d357 4
a360 2
	if(!attr->single) return sk_ASN1_TYPE_num(attr->value.set);
	if(attr->value.single) return 1;
d364 2
a365 1
ASN1_OBJECT *X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr)
d367 3
a369 2
	if (attr == NULL) return(NULL);
	return(attr->object);
d372 2
a373 2
void *X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx,
					int atrtype, void *data)
d376 1
d378 3
a380 2
	if(!ttmp) return NULL;
	if(atrtype != ASN1_TYPE_get(ttmp)){
d387 2
a388 1
ASN1_TYPE *X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx)
d390 8
a397 4
	if (attr == NULL) return(NULL);
	if(idx >= X509_ATTRIBUTE_count(attr)) return NULL;
	if(!attr->single) return sk_ASN1_TYPE_value(attr->value.set, idx);
	else return attr->value.single;
@


1.4
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@d94 1
a94 2
	for ( ; lastpos < n; lastpos++)
		{
d126 1
a126 2
	if (x == NULL)
		{
d129 1
a129 1
		} 
d131 1
a131 2
	if (*x == NULL)
		{
d134 1
a134 2
		}
	else
d214 1
a214 2
	if (obj == NULL)
		{
d217 1
a217 1
		}
d228 2
a229 4
	if ((attr == NULL) || (*attr == NULL))
		{
		if ((ret=X509_ATTRIBUTE_new()) == NULL)
			{
a231 1
			}
d233 1
d252 1
a252 1
	{
d257 1
a257 2
	if (obj == NULL)
		{
d262 1
a262 1
		}
d266 1
a266 1
	}
d305 1
a305 2
	if ((len == -1) && !(attrtype & MBSTRING_FLAG))
		{
d308 1
a308 2
		}
	else
@


1.3
log
@resolve conflicts
@
text
@d248 1
a248 1
	
d305 7
d313 1
a313 1
	if (len == -1)
a320 1
	attr->single = 0;
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d70 1
a70 2
	if (!x) return 0;
	return(sk_X509_ATTRIBUTE_num(x));
d127 7
a133 1
	if ((x != NULL) && (*x == NULL))
d145 1
a145 1
	if ((x != NULL) && (*x == NULL))
d149 1
a149 1
	X509err(X509_F_X509_ADD_ATTR,ERR_R_MALLOC_FAILURE);
d195 16
d288 2
a289 2
	ASN1_STRING *stmp;
	int atype;
d299 1
a299 1
	} else {
d306 7
a314 1
	ASN1_TYPE_set(ttmp, atype, stmp);
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d152 2
a153 2
			ASN1_OBJECT *obj, int type,
			unsigned char *bytes, int len)
d166 1
a166 1
			unsigned char *bytes, int len)
d178 2
a179 2
			char *attrname, int type,
			unsigned char *bytes, int len)
d191 1
a191 1
	     int atrtype, void *data, int len)
d208 1
a208 1
	     ASN1_OBJECT *obj, int atrtype, void *data, int len)
d237 1
a237 1
		char *atrname, int type, unsigned char *bytes, int len)
d255 1
a255 1
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, ASN1_OBJECT *obj)
d264 1
a264 1
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype, void *data, int len)
d286 1
a286 1
	attr->set = 1;
d296 1
a296 1
	if(attr->set) return sk_ASN1_TYPE_num(attr->value.set);
d324 1
a324 1
	if(attr->set) return sk_ASN1_TYPE_value(attr->value.set, idx);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d152 2
a153 2
			const ASN1_OBJECT *obj, int type,
			const unsigned char *bytes, int len)
d166 1
a166 1
			const unsigned char *bytes, int len)
d178 2
a179 2
			const char *attrname, int type,
			const unsigned char *bytes, int len)
d191 1
a191 1
	     int atrtype, const void *data, int len)
d208 1
a208 1
	     const ASN1_OBJECT *obj, int atrtype, const void *data, int len)
d237 1
a237 1
		const char *atrname, int type, const unsigned char *bytes, int len)
d255 1
a255 1
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj)
d264 1
a264 1
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype, const void *data, int len)
d286 1
a286 1
	attr->single = 0;
d296 1
a296 1
	if(!attr->single) return sk_ASN1_TYPE_num(attr->value.set);
d324 1
a324 1
	if(!attr->single) return sk_ASN1_TYPE_value(attr->value.set, idx);
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d70 2
a71 1
	return sk_X509_ATTRIBUTE_num(x);
d128 1
a128 7
	if (x == NULL)
		{
		X509err(X509_F_X509AT_ADD1_ATTR, ERR_R_PASSED_NULL_PARAMETER);
		goto err2;
		} 

	if (*x == NULL)
d140 1
a140 1
	if (*x == NULL)
d144 1
a144 1
	X509err(X509_F_X509AT_ADD1_ATTR,ERR_R_MALLOC_FAILURE);
a189 16
void *X509at_get0_data_by_OBJ(STACK_OF(X509_ATTRIBUTE) *x,
				ASN1_OBJECT *obj, int lastpos, int type)
{
	int i;
	X509_ATTRIBUTE *at;
	i = X509at_get_attr_by_OBJ(x, obj, lastpos);
	if (i == -1)
		return NULL;
	if ((lastpos <= -2) && (X509at_get_attr_by_OBJ(x, obj, i) != -1))
		return NULL;
	at = X509at_get_attr(x, i);
	if (lastpos <= -3 && (X509_ATTRIBUTE_count(at) != 1))
		return NULL;
	return X509_ATTRIBUTE_get0_data(at, 0, type, NULL);
}

d267 2
a268 2
	ASN1_STRING *stmp = NULL;
	int atype = 0;
d278 1
a278 1
	} else if (len != -1){
a284 7
	if (len == -1)
		{
		if (!ASN1_TYPE_set1(ttmp, attrtype, data))
			goto err;
		}
	else
		ASN1_TYPE_set(ttmp, atype, stmp);
d287 1
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d248 1
a248 1

a304 7
	attr->single = 0;
	/* This is a bit naughty because the attribute should really have
	 * at least one value but some types use and zero length SET and
	 * require this.
	 */
	if (attrtype == 0)
		return 1;
d306 1
a306 1
	if ((len == -1) && !(attrtype & MBSTRING_FLAG))
d314 1
@


