head	1.22;
access;
symbols
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.4
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	butholakala:1.11
	openssl_1_0_1_g:1.1.1.8
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2016.09.03.11.33.40;	author beck;	state dead;
branches;
next	1.21;
commitid	HnbXxsegngek41U2;

1.21
date	2015.10.13.14.03.26;	author jsing;	state Exp;
branches;
next	1.20;
commitid	CYnMbxNUschOqouu;

1.20
date	2015.09.13.15.59.30;	author jsing;	state Exp;
branches;
next	1.19;
commitid	swrR3h36y0NktQsb;

1.19
date	2015.01.28.04.14.31;	author beck;	state Exp;
branches;
next	1.18;
commitid	WM4kCdNQZ5icdTod;

1.18
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.22.45.58;	author jsing;	state Exp;
branches;
next	1.16;
commitid	nzndm3zqPmFurSaK;

1.16
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	mJUVYpkFBZ0Zv2bG;

1.15
date	2014.05.29.20.21.23;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.19.14.36.35;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.15.17.24.25;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.03.02.34.33;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.27;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.12.13;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.52;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.01;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.18;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.15;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.44;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.04.13.15.16.35;	author miod;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: x_all.c,v 1.21 2015/10/13 14:03:26 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1.h>
#include <openssl/buffer.h>
#include <openssl/evp.h>
#include <openssl/stack.h>
#include <openssl/x509.h>

#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif

X509 *
d2i_X509_bio(BIO *bp, X509 **x509)
{
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509), bp, x509);
}

int
i2d_X509_bio(BIO *bp, X509 *x509)
{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509), bp, x509);
}

X509 *
d2i_X509_fp(FILE *fp, X509 **x509)
{
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(X509), fp, x509);
}

int
i2d_X509_fp(FILE *fp, X509 *x509)
{
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(X509), fp, x509);
}

X509_CRL *
d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl)
{
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509_CRL), bp, crl);
}

int
i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl)
{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509_CRL), bp, crl);
}

X509_CRL *
d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl)
{
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(X509_CRL), fp, crl);
}

int
i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl)
{
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(X509_CRL), fp, crl);
}

PKCS7 *
d2i_PKCS7_bio(BIO *bp, PKCS7 **p7)
{
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(PKCS7), bp, p7);
}

int
i2d_PKCS7_bio(BIO *bp, PKCS7 *p7)
{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(PKCS7), bp, p7);
}

PKCS7 *
d2i_PKCS7_fp(FILE *fp, PKCS7 **p7)
{
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(PKCS7), fp, p7);
}

int
i2d_PKCS7_fp(FILE *fp, PKCS7 *p7)
{
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(PKCS7), fp, p7);
}

X509_REQ *
d2i_X509_REQ_bio(BIO *bp, X509_REQ **req)
{
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509_REQ), bp, req);
}

int
i2d_X509_REQ_bio(BIO *bp, X509_REQ *req)
{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509_REQ), bp, req);
}

X509_REQ *
d2i_X509_REQ_fp(FILE *fp, X509_REQ **req)
{
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(X509_REQ), fp, req);
}

int
i2d_X509_REQ_fp(FILE *fp, X509_REQ *req)
{
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(X509_REQ), fp, req);
}

#ifndef OPENSSL_NO_RSA
RSA *
d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa)
{
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(RSAPrivateKey), bp, rsa);
}

int
i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa)
{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(RSAPrivateKey), bp, rsa);
}

RSA *
d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa)
{
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(RSAPrivateKey), fp, rsa);
}

int
i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa)
{
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(RSAPrivateKey), fp, rsa);
}

RSA *
d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa)
{
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(RSAPublicKey), bp, rsa);
}

int
i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa)
{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(RSAPublicKey), bp, rsa);
}

RSA *
d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa)
{
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(RSAPublicKey), fp, rsa);
}

int
i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa)
{
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(RSAPublicKey), fp, rsa);
}

RSA *
d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)
{
	return ASN1_d2i_bio_of(RSA, RSA_new, d2i_RSA_PUBKEY, bp, rsa);
}

int
i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa)
{
	return ASN1_i2d_bio_of(RSA, i2d_RSA_PUBKEY, bp, rsa);
}

int
i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa)
{
	return ASN1_i2d_fp((I2D_OF(void))i2d_RSA_PUBKEY, fp, rsa);
}

RSA *
d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)
{
	return ASN1_d2i_fp((void *(*)(void))RSA_new,
	    (D2I_OF(void))d2i_RSA_PUBKEY, fp, (void **)rsa);
}
#endif

#ifndef OPENSSL_NO_DSA
DSA *
d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)
{
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(DSAPrivateKey), bp, dsa);
}

int
i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa)
{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(DSAPrivateKey), bp, dsa);
}

DSA *
d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa)
{
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(DSAPrivateKey), fp, dsa);
}

int
i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa)
{
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(DSAPrivateKey), fp, dsa);
}

DSA *
d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)
{
	return ASN1_d2i_bio_of(DSA, DSA_new, d2i_DSA_PUBKEY, bp, dsa);
}

int
i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa)
{
	return ASN1_i2d_bio_of(DSA, i2d_DSA_PUBKEY, bp, dsa);
}

DSA *
d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)
{
	return ASN1_d2i_fp_of(DSA, DSA_new, d2i_DSA_PUBKEY, fp, dsa);
}

int
i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa)
{
	return ASN1_i2d_fp_of(DSA, i2d_DSA_PUBKEY, fp, dsa);
}
#endif

#ifndef OPENSSL_NO_EC
EC_KEY *
d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)
{
	return ASN1_d2i_bio_of(EC_KEY, EC_KEY_new, d2i_ECPrivateKey, bp, eckey);
}

int
i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey)
{
	return ASN1_i2d_bio_of(EC_KEY, i2d_ECPrivateKey, bp, eckey);
}

EC_KEY *
d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey)
{
	return ASN1_d2i_fp_of(EC_KEY, EC_KEY_new, d2i_ECPrivateKey, fp, eckey);
}

int
i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey)
{
	return ASN1_i2d_fp_of(EC_KEY, i2d_ECPrivateKey, fp, eckey);
}

EC_KEY *
d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey)
{
	return ASN1_d2i_bio_of(EC_KEY, EC_KEY_new, d2i_EC_PUBKEY, bp, eckey);
}

int
i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *ecdsa)
{
	return ASN1_i2d_bio_of(EC_KEY, i2d_EC_PUBKEY, bp, ecdsa);
}
EC_KEY *
d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)
{
	return ASN1_d2i_fp_of(EC_KEY, EC_KEY_new, d2i_EC_PUBKEY, fp, eckey);
}

int
i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey)
{
	return ASN1_i2d_fp_of(EC_KEY, i2d_EC_PUBKEY, fp, eckey);
}
#endif

X509_SIG *
d2i_PKCS8_bio(BIO *bp, X509_SIG **p8)
{
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509_SIG), bp, p8);
}

int
i2d_PKCS8_bio(BIO *bp, X509_SIG *p8)
{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509_SIG), bp, p8);
}

X509_SIG *
d2i_PKCS8_fp(FILE *fp, X509_SIG **p8)
{
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(X509_SIG), fp, p8);
}

int
i2d_PKCS8_fp(FILE *fp, X509_SIG *p8)
{
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(X509_SIG), fp, p8);
}

PKCS8_PRIV_KEY_INFO *
d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO **p8inf)
{
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(PKCS8_PRIV_KEY_INFO), bp,
	    p8inf);
}

int
i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf)
{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(PKCS8_PRIV_KEY_INFO), bp,
	    p8inf);
}

PKCS8_PRIV_KEY_INFO *
d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO **p8inf)
{
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(PKCS8_PRIV_KEY_INFO), fp,
	    p8inf);
}

int
i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf)
{
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(PKCS8_PRIV_KEY_INFO), fp,
	    p8inf);
}

EVP_PKEY *
d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)
{
	return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_AutoPrivateKey,
	    bp, a);
}

int
i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey)
{
	return ASN1_i2d_bio_of(EVP_PKEY, i2d_PrivateKey, bp, pkey);
}

EVP_PKEY *
d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)
{
	return ASN1_d2i_fp_of(EVP_PKEY, EVP_PKEY_new, d2i_AutoPrivateKey,
	    fp, a);
}

int
i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey)
{
	return ASN1_i2d_fp_of(EVP_PKEY, i2d_PrivateKey, fp, pkey);
}

EVP_PKEY *
d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)
{
	return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, bp, a);
}

int
i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey)
{
	return ASN1_i2d_bio_of(EVP_PKEY, i2d_PUBKEY, bp, pkey);
}

int
i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey)
{
	return ASN1_i2d_fp_of(EVP_PKEY, i2d_PUBKEY, fp, pkey);
}

EVP_PKEY *
d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)
{
	return ASN1_d2i_fp_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, fp, a);
}

int
i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key)
{
	PKCS8_PRIV_KEY_INFO *p8inf;
	int ret;

	p8inf = EVP_PKEY2PKCS8(key);
	if (!p8inf)
		return 0;
	ret = i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf);
	PKCS8_PRIV_KEY_INFO_free(p8inf);
	return ret;
}

int
i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key)
{
	PKCS8_PRIV_KEY_INFO *p8inf;
	int ret;
	p8inf = EVP_PKEY2PKCS8(key);
	if (!p8inf)
		return 0;
	ret = i2d_PKCS8_PRIV_KEY_INFO_fp(fp, p8inf);
	PKCS8_PRIV_KEY_INFO_free(p8inf);
	return ret;
}

int
X509_verify(X509 *a, EVP_PKEY *r)
{
	if (X509_ALGOR_cmp(a->sig_alg, a->cert_info->signature))
		return 0;
	return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF), a->sig_alg,
	    a->signature, a->cert_info, r));
}

int
X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)
{
	return (ASN1_item_verify(ASN1_ITEM_rptr(X509_REQ_INFO),
	    a->sig_alg, a->signature, a->req_info, r));
}

int
NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r)
{
	return (ASN1_item_verify(ASN1_ITEM_rptr(NETSCAPE_SPKAC),
	    a->sig_algor, a->signature, a->spkac, r));
}

int
X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
{
	x->cert_info->enc.modified = 1;
	return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CINF),
	    x->cert_info->signature, x->sig_alg, x->signature,
	    x->cert_info, pkey, md));
}

int
X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)
{
	x->cert_info->enc.modified = 1;
	return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CINF),
	    x->cert_info->signature, x->sig_alg, x->signature,
	    x->cert_info, ctx);
}

int
X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)
{
	return (ASN1_item_sign(ASN1_ITEM_rptr(X509_REQ_INFO),
	    x->sig_alg, NULL, x->signature, x->req_info, pkey, md));
}

int
X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx)
{
	return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_REQ_INFO),
	    x->sig_alg, NULL, x->signature, x->req_info, ctx);
}

int
X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md)
{
	x->crl->enc.modified = 1;
	return(ASN1_item_sign(ASN1_ITEM_rptr(X509_CRL_INFO), x->crl->sig_alg,
	    x->sig_alg, x->signature, x->crl, pkey, md));
}

int
X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx)
{
	x->crl->enc.modified = 1;
	return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CRL_INFO),
	    x->crl->sig_alg, x->sig_alg, x->signature, x->crl, ctx);
}

int
NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md)
{
	return (ASN1_item_sign(ASN1_ITEM_rptr(NETSCAPE_SPKAC),
	    x->sig_algor, NULL, x->signature, x->spkac, pkey, md));
}

int
X509_pubkey_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
    unsigned int *len)
{
	ASN1_BIT_STRING *key;
	key = X509_get0_pubkey_bitstr(data);
	if (!key)
		return 0;
	return EVP_Digest(key->data, key->length, md, len, type, NULL);
}

int
X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
    unsigned int *len)
{
	return (ASN1_item_digest(ASN1_ITEM_rptr(X509), type, (char *)data,
	    md, len));
}

int
X509_CRL_digest(const X509_CRL *data, const EVP_MD *type, unsigned char *md,
    unsigned int *len)
{
	return (ASN1_item_digest(ASN1_ITEM_rptr(X509_CRL), type, (char *)data,
	    md, len));
}

int
X509_REQ_digest(const X509_REQ *data, const EVP_MD *type, unsigned char *md,
    unsigned int *len)
{
	return (ASN1_item_digest(ASN1_ITEM_rptr(X509_REQ), type, (char *)data,
	    md, len));
}

int
X509_NAME_digest(const X509_NAME *data, const EVP_MD *type, unsigned char *md,
    unsigned int *len)
{
	return (ASN1_item_digest(ASN1_ITEM_rptr(X509_NAME), type, (char *)data,
	    md, len));
}

int
PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,
    const EVP_MD *type, unsigned char *md, unsigned int *len)
{
	return(ASN1_item_digest(ASN1_ITEM_rptr(PKCS7_ISSUER_AND_SERIAL), type,
	    (char *)data, md, len));
}
@


1.21
log
@Convert a number of the old ASN1_{d2i,i2d}_{bio,fp}_of() macros to
ASN1_item_{d2i,i2d}_{bio,fp}() function calls.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_all.c,v 1.20 2015/09/13 15:59:30 jsing Exp $ */
@


1.20
log
@Reorder functions for readability/consistency.
@
text
@d1 1
a1 1
/* $OpenBSD: x_all.c,v 1.19 2015/01/28 04:14:31 beck Exp $ */
d251 1
a251 1
	return ASN1_d2i_bio_of(DSA, DSA_new, d2i_DSAPrivateKey, bp, dsa);
d257 1
a257 1
	return ASN1_i2d_bio_of_const(DSA, i2d_DSAPrivateKey, bp, dsa);
d263 1
a263 1
	return ASN1_d2i_fp_of(DSA, DSA_new, d2i_DSAPrivateKey, fp, dsa);
d269 1
a269 1
	return ASN1_i2d_fp_of_const(DSA, i2d_DSAPrivateKey, fp, dsa);
d349 1
a349 1
	return ASN1_d2i_bio_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, bp, p8);
d355 1
a355 1
	return ASN1_i2d_bio_of(X509_SIG, i2d_X509_SIG, bp, p8);
d361 1
a361 1
	return ASN1_d2i_fp_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, fp, p8);
d367 1
a367 1
	return ASN1_i2d_fp_of(X509_SIG, i2d_X509_SIG, fp, p8);
d373 2
a374 2
	return ASN1_d2i_bio_of(PKCS8_PRIV_KEY_INFO, PKCS8_PRIV_KEY_INFO_new,
	    d2i_PKCS8_PRIV_KEY_INFO, bp, p8inf);
d380 2
a381 2
	return ASN1_i2d_bio_of(PKCS8_PRIV_KEY_INFO, i2d_PKCS8_PRIV_KEY_INFO,
	    bp, p8inf);
d387 2
a388 2
	return ASN1_d2i_fp_of(PKCS8_PRIV_KEY_INFO, PKCS8_PRIV_KEY_INFO_new,
	    d2i_PKCS8_PRIV_KEY_INFO, fp, p8inf);
d394 2
a395 2
	return ASN1_i2d_fp_of(PKCS8_PRIV_KEY_INFO, i2d_PKCS8_PRIV_KEY_INFO,
	    fp, p8inf);
d487 1
a487 1
	return( ASN1_item_verify(ASN1_ITEM_rptr(X509_REQ_INFO),
d494 1
a494 1
	return(ASN1_item_verify(ASN1_ITEM_rptr(NETSCAPE_SPKAC),
@


1.19
log
@Fix a number of issues relating to algorithms in signatures, Mostly
from OpenSSL with a hint of boring and some things done here. Addresses
CVE-2014-8275 for OpenSSL fully
ok miod@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_all.c,v 1.18 2014/07/11 08:44:49 jsing Exp $ */
d76 2
a77 2
int
X509_verify(X509 *a, EVP_PKEY *r)
d79 1
a79 4
	if (X509_ALGOR_cmp(a->sig_alg, a->cert_info->signature))
		return 0;
	return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF), a->sig_alg,
	    a->signature, a->cert_info, r));
d83 1
a83 1
X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)
d85 1
a85 64
	return( ASN1_item_verify(ASN1_ITEM_rptr(X509_REQ_INFO),
	    a->sig_alg, a->signature, a->req_info, r));
}

int
NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r)
{
	return(ASN1_item_verify(ASN1_ITEM_rptr(NETSCAPE_SPKAC),
	    a->sig_algor, a->signature, a->spkac, r));
}

int
X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
{
	x->cert_info->enc.modified = 1;
	return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CINF),
	    x->cert_info->signature, x->sig_alg, x->signature,
	    x->cert_info, pkey, md));
}

int
X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)
{
	x->cert_info->enc.modified = 1;
	return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CINF),
	    x->cert_info->signature, x->sig_alg, x->signature,
	    x->cert_info, ctx);
}

int
X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)
{
	return (ASN1_item_sign(ASN1_ITEM_rptr(X509_REQ_INFO),
	    x->sig_alg, NULL, x->signature, x->req_info, pkey, md));
}

int
X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx)
{
	return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_REQ_INFO),
	    x->sig_alg, NULL, x->signature, x->req_info, ctx);
}

int
X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md)
{
	x->crl->enc.modified = 1;
	return(ASN1_item_sign(ASN1_ITEM_rptr(X509_CRL_INFO), x->crl->sig_alg,
	    x->sig_alg, x->signature, x->crl, pkey, md));
}

int
X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx)
{
	x->crl->enc.modified = 1;
	return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CRL_INFO),
	    x->crl->sig_alg, x->sig_alg, x->signature, x->crl, ctx);
}

int
NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md)
{
	return (ASN1_item_sign(ASN1_ITEM_rptr(NETSCAPE_SPKAC),
	    x->sig_algor, NULL, x->signature, x->spkac, pkey, md));
d100 2
a101 2
X509 *
d2i_X509_bio(BIO *bp, X509 **x509)
d103 1
a103 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509), bp, x509);
d107 1
a107 1
i2d_X509_bio(BIO *bp, X509 *x509)
d109 1
a109 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509), bp, x509);
d124 2
a125 2
X509_CRL *
d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl)
d127 1
a127 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509_CRL), bp, crl);
d131 1
a131 1
i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl)
d133 1
a133 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509_CRL), bp, crl);
d148 2
a149 2
PKCS7 *
d2i_PKCS7_bio(BIO *bp, PKCS7 **p7)
d151 1
a151 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(PKCS7), bp, p7);
d155 1
a155 1
i2d_PKCS7_bio(BIO *bp, PKCS7 *p7)
d157 1
a157 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(PKCS7), bp, p7);
d172 3
a174 2
X509_REQ *
d2i_X509_REQ_bio(BIO *bp, X509_REQ **req)
d176 1
a176 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509_REQ), bp, req);
d180 1
a180 1
i2d_X509_REQ_bio(BIO *bp, X509_REQ *req)
d182 1
a182 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509_REQ), bp, req);
a184 2
#ifndef OPENSSL_NO_RSA

d198 1
a198 1
d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa)
d200 1
a200 1
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(RSAPublicKey), fp, rsa);
d203 5
d210 1
a210 1
d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)
d212 1
a212 2
	return ASN1_d2i_fp((void *(*)(void))RSA_new,
	    (D2I_OF(void))d2i_RSA_PUBKEY, fp, (void **)rsa);
a220 6
int
i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa)
{
	return ASN1_i2d_fp((I2D_OF(void))i2d_RSA_PUBKEY, fp, rsa);
}

d222 1
a222 1
d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa)
d224 1
a224 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(RSAPrivateKey), bp, rsa);
d228 1
a228 1
i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa)
d230 1
a230 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(RSAPrivateKey), bp, rsa);
d233 2
a234 2
RSA *
d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa)
d236 1
a236 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(RSAPublicKey), bp, rsa);
a238 1

d240 1
a240 1
d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)
d242 2
a243 1
	return ASN1_d2i_bio_of(RSA, RSA_new, d2i_RSA_PUBKEY, bp, rsa);
d245 1
d247 3
a249 2
int
i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa)
d251 1
a251 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(RSAPublicKey), bp, rsa);
d255 1
a255 1
i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa)
d257 1
a257 1
	return ASN1_i2d_bio_of(RSA, i2d_RSA_PUBKEY, bp, rsa);
a258 1
#endif
a259 1
#ifndef OPENSSL_NO_DSA
d273 1
a273 1
d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)
d275 1
a275 1
	return ASN1_d2i_fp_of(DSA, DSA_new, d2i_DSA_PUBKEY, fp, dsa);
d279 1
a279 1
i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa)
d281 1
a281 1
	return ASN1_i2d_fp_of(DSA, i2d_DSA_PUBKEY, fp, dsa);
d285 1
a285 1
d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)
d287 1
a287 1
	return ASN1_d2i_bio_of(DSA, DSA_new, d2i_DSAPrivateKey, bp, dsa);
d291 1
a291 1
i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa)
d293 1
a293 1
	return ASN1_i2d_bio_of_const(DSA, i2d_DSAPrivateKey, bp, dsa);
a294 13

DSA *
d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)
{
	return ASN1_d2i_bio_of(DSA, DSA_new, d2i_DSA_PUBKEY, bp, dsa);
}

int
i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa)
{
	return ASN1_i2d_bio_of(DSA, i2d_DSA_PUBKEY, bp, dsa);
}

d299 1
a299 1
d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)
d301 1
a301 1
	return ASN1_d2i_fp_of(EC_KEY, EC_KEY_new, d2i_EC_PUBKEY, fp, eckey);
d305 1
a305 1
i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey)
d307 1
a307 1
	return ASN1_i2d_fp_of(EC_KEY, i2d_EC_PUBKEY, fp, eckey);
d321 1
a332 1

d334 1
a334 1
d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)
d336 1
a336 1
	return ASN1_d2i_bio_of(EC_KEY, EC_KEY_new, d2i_ECPrivateKey, bp, eckey);
d340 1
a340 1
i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey)
d342 1
a342 1
	return ASN1_i2d_bio_of(EC_KEY, i2d_ECPrivateKey, bp, eckey);
d346 5
d353 7
a359 2
X509_pubkey_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
    unsigned int *len)
d361 1
a361 5
	ASN1_BIT_STRING *key;
	key = X509_get0_pubkey_bitstr(data);
	if (!key)
		return 0;
	return EVP_Digest(key->data, key->length, md, len, type, NULL);
d365 7
a371 2
X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
    unsigned int *len)
d373 2
a374 2
	return (ASN1_item_digest(ASN1_ITEM_rptr(X509), type, (char *)data,
	    md, len));
d378 8
a385 2
X509_CRL_digest(const X509_CRL *data, const EVP_MD *type, unsigned char *md,
    unsigned int *len)
d387 2
a388 2
	return (ASN1_item_digest(ASN1_ITEM_rptr(X509_CRL), type, (char *)data,
	    md, len));
d392 1
a392 2
X509_REQ_digest(const X509_REQ *data, const EVP_MD *type, unsigned char *md,
    unsigned int *len)
d394 2
a395 2
	return (ASN1_item_digest(ASN1_ITEM_rptr(X509_REQ), type, (char *)data,
	    md, len));
d398 2
a399 3
int
X509_NAME_digest(const X509_NAME *data, const EVP_MD *type, unsigned char *md,
    unsigned int *len)
d401 2
a402 2
	return (ASN1_item_digest(ASN1_ITEM_rptr(X509_NAME), type, (char *)data,
	    md, len));
d406 1
a406 2
PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,
    const EVP_MD *type, unsigned char *md, unsigned int *len)
d408 1
a408 2
	return(ASN1_item_digest(ASN1_ITEM_rptr(PKCS7_ISSUER_AND_SERIAL), type,
	    (char *)data, md, len));
d411 6
d418 2
a419 2
X509_SIG *
d2i_PKCS8_fp(FILE *fp, X509_SIG **p8)
d421 1
a421 1
	return ASN1_d2i_fp_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, fp, p8);
d424 2
a425 2
int
i2d_PKCS8_fp(FILE *fp, X509_SIG *p8)
d427 1
a427 1
	return ASN1_i2d_fp_of(X509_SIG, i2d_X509_SIG, fp, p8);
d430 2
a431 2
X509_SIG *
d2i_PKCS8_bio(BIO *bp, X509_SIG **p8)
d433 1
a433 1
	return ASN1_d2i_bio_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, bp, p8);
d437 1
a437 1
i2d_PKCS8_bio(BIO *bp, X509_SIG *p8)
d439 1
a439 1
	return ASN1_i2d_bio_of(X509_SIG, i2d_X509_SIG, bp, p8);
d442 2
a443 2
PKCS8_PRIV_KEY_INFO *
d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO **p8inf)
d445 1
a445 2
	return ASN1_d2i_fp_of(PKCS8_PRIV_KEY_INFO, PKCS8_PRIV_KEY_INFO_new,
	    d2i_PKCS8_PRIV_KEY_INFO, fp, p8inf);
d449 1
a449 1
i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf)
d451 9
a459 2
	return ASN1_i2d_fp_of(PKCS8_PRIV_KEY_INFO, i2d_PKCS8_PRIV_KEY_INFO,
	    fp, p8inf);
d476 17
a492 1
i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey)
d494 2
a495 1
	return ASN1_i2d_fp_of(EVP_PKEY, i2d_PrivateKey, fp, pkey);
d498 2
a499 2
EVP_PKEY *
d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)
d501 4
a504 2
	return ASN1_d2i_fp_of(EVP_PKEY, EVP_PKEY_new, d2i_AutoPrivateKey,
	    fp, a);
d508 1
a508 1
i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey)
d510 4
a513 1
	return ASN1_i2d_fp_of(EVP_PKEY, i2d_PUBKEY, fp, pkey);
d516 2
a517 2
EVP_PKEY *
d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)
d519 2
a520 1
	return ASN1_d2i_fp_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, fp, a);
d523 6
d530 2
a531 2
PKCS8_PRIV_KEY_INFO *
d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO **p8inf)
d533 3
a535 2
	return ASN1_d2i_bio_of(PKCS8_PRIV_KEY_INFO, PKCS8_PRIV_KEY_INFO_new,
	    d2i_PKCS8_PRIV_KEY_INFO, bp, p8inf);
d539 1
a539 1
i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf)
d541 3
a543 2
	return ASN1_i2d_bio_of(PKCS8_PRIV_KEY_INFO, i2d_PKCS8_PRIV_KEY_INFO,
	    bp, p8inf);
d547 1
a547 1
i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key)
d549 3
a551 2
	PKCS8_PRIV_KEY_INFO *p8inf;
	int ret;
d553 7
a559 2
	p8inf = EVP_PKEY2PKCS8(key);
	if (!p8inf)
d561 9
a569 3
	ret = i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf);
	PKCS8_PRIV_KEY_INFO_free(p8inf);
	return ret;
d573 2
a574 1
i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey)
d576 2
a577 1
	return ASN1_i2d_bio_of(EVP_PKEY, i2d_PrivateKey, bp, pkey);
d580 3
a582 2
EVP_PKEY *
d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)
d584 2
a585 2
	return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_AutoPrivateKey,
	    bp, a);
d589 2
a590 1
i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey)
d592 2
a593 1
	return ASN1_i2d_bio_of(EVP_PKEY, i2d_PUBKEY, bp, pkey);
d596 3
a598 2
EVP_PKEY *
d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)
d600 2
a601 1
	return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, bp, a);
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_all.c,v 1.17 2014/07/10 22:45:58 jsing Exp $ */
d79 2
@


1.17
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: x_all.c,v 1.16 2014/06/12 15:49:31 deraadt Exp $ */
d63 1
a63 2
#include <openssl/stack.h>
#include "cryptlib.h"
a64 1
#include <openssl/asn1.h>
d66 1
d68 4
a73 3
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
@


1.16
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.15
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d1 1
a1 1
/* crypto/x509/x_all.c */
@


1.14
log
@More KNF.
@
text
@a148 1
#ifndef OPENSSL_NO_FP_API
a159 1
#endif
a172 1
#ifndef OPENSSL_NO_FP_API
a183 1
#endif
a196 1
#ifndef OPENSSL_NO_FP_API
a207 1
#endif
a220 1
#ifndef OPENSSL_NO_FP_API
a231 1
#endif
a246 1
#ifndef OPENSSL_NO_FP_API
a283 1
#endif
a323 1
#ifndef OPENSSL_NO_FP_API
a346 1
#endif
a374 1
#ifndef OPENSSL_NO_FP_API
a397 1
#endif
a475 1
#ifndef OPENSSL_NO_FP_API
a486 1
#endif
a499 1
#ifndef OPENSSL_NO_FP_API
a551 1
#endif
@


1.13
log
@some KNF cleanup following the script
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d469 1
a469 1
	return (ASN1_item_digest(ASN1_ITEM_rptr(X509_REQ), type,(char *)data,
d477 1
a477 1
	return (ASN1_item_digest(ASN1_ITEM_rptr(X509_NAME), type,(char *)data,
d518 1
a518 2
d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
PKCS8_PRIV_KEY_INFO **p8inf)
d572 1
a572 2
d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
PKCS8_PRIV_KEY_INFO **p8inf)
d590 1
d608 2
a609 1
	return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_AutoPrivateKey, bp, a);
@


1.12
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d150 2
a151 2
X509
*d2i_X509_fp(FILE *fp, X509 **x509)
d163 2
a164 2
X509
*d2i_X509_bio(BIO *bp, X509 **x509)
d176 2
a177 2
X509_CRL
*d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl)
d189 2
a190 2
X509_CRL
*d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl)
d202 2
a203 2
PKCS7
*d2i_PKCS7_fp(FILE *fp, PKCS7 **p7)
d215 2
a216 2
PKCS7
*d2i_PKCS7_bio(BIO *bp, PKCS7 **p7)
d228 2
a229 2
X509_REQ
*d2i_X509_REQ_fp(FILE *fp, X509_REQ **req)
d241 2
a242 2
X509_REQ
*d2i_X509_REQ_bio(BIO *bp, X509_REQ **req)
d256 2
a257 2
RSA
*d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa)
d268 2
a269 2
RSA
*d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa)
d275 2
a276 2
RSA
*d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)
d295 2
a296 2
RSA
*d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa)
d307 2
a308 2
RSA
*d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa)
d314 2
a315 2
RSA
*d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)
d335 2
a336 2
DSA
*d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa)
d347 2
a348 2
DSA
*d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)
d360 2
a361 2
DSA
*d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)
d372 2
a373 2
DSA
*d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)
d388 2
a389 2
EC_KEY
*d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)
d400 2
a401 2
EC_KEY
*d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey)
d412 2
a413 2
EC_KEY
*d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey)
d424 2
a425 2
EC_KEY
*d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)
d491 2
a492 2
X509_SIG
*d2i_PKCS8_fp(FILE *fp, X509_SIG **p8)
d504 2
a505 2
X509_SIG
*d2i_PKCS8_bio(BIO *bp, X509_SIG **p8)
d517 2
a518 2
PKCS8_PRIV_KEY_INFO
*d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
d551 2
a552 2
EVP_PKEY
*d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)
d564 2
a565 2
EVP_PKEY
*d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)
d572 2
a573 2
PKCS8_PRIV_KEY_INFO
*d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
d606 2
a607 2
EVP_PKEY
*d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)
d618 2
a619 2
EVP_PKEY
*d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)
@


1.11
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d73 6
a78 5
int X509_verify(X509 *a, EVP_PKEY *r)
	{
	return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF),a->sig_alg,
		a->signature,a->cert_info,r));
	}
d80 3
a82 2
int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)
	{
d84 2
a85 2
		a->sig_alg,a->signature,a->req_info,r));
	}
d87 3
a89 2
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r)
	{
d91 2
a92 2
		a->sig_algor,a->signature,a->spkac,r));
	}
d94 3
a96 2
int X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
	{
d98 4
a101 3
	return(ASN1_item_sign(ASN1_ITEM_rptr(X509_CINF), x->cert_info->signature,
		x->sig_alg, x->signature, x->cert_info,pkey,md));
	}
d103 3
a105 2
int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)
	{
d108 3
a110 9
		x->cert_info->signature,
		x->sig_alg, x->signature, x->cert_info, ctx);
	}

int X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)
	{
	return(ASN1_item_sign(ASN1_ITEM_rptr(X509_REQ_INFO),x->sig_alg, NULL,
		x->signature, x->req_info,pkey,md));
	}
d112 10
a121 2
int X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx)
	{
d123 2
a124 2
		x->sig_alg, NULL, x->signature, x->req_info, ctx);
	}
d126 3
a128 2
int X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md)
	{
d130 3
a132 3
	return(ASN1_item_sign(ASN1_ITEM_rptr(X509_CRL_INFO),x->crl->sig_alg,
		x->sig_alg, x->signature, x->crl,pkey,md));
	}
d134 3
a136 2
int X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx)
	{
d139 2
a140 2
		x->crl->sig_alg, x->sig_alg, x->signature, x->crl, ctx);
	}
d142 6
a147 5
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md)
	{
	return(ASN1_item_sign(ASN1_ITEM_rptr(NETSCAPE_SPKAC), x->sig_algor,NULL,
		x->signature, x->spkac,pkey,md));
	}
d150 3
a152 2
X509 *d2i_X509_fp(FILE *fp, X509 **x509)
	{
d154 1
a154 1
	}
d156 3
a158 2
int i2d_X509_fp(FILE *fp, X509 *x509)
	{
d160 1
a160 1
	}
d163 3
a165 2
X509 *d2i_X509_bio(BIO *bp, X509 **x509)
	{
d167 1
a167 1
	}
d169 3
a171 2
int i2d_X509_bio(BIO *bp, X509 *x509)
	{
d173 1
a173 1
	}
d176 3
a178 2
X509_CRL *d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl)
	{
d180 1
a180 1
	}
d182 3
a184 2
int i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl)
	{
d186 1
a186 1
	}
d189 3
a191 2
X509_CRL *d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl)
	{
d193 1
a193 1
	}
d195 3
a197 2
int i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl)
	{
d199 1
a199 1
	}
d202 3
a204 2
PKCS7 *d2i_PKCS7_fp(FILE *fp, PKCS7 **p7)
	{
d206 1
a206 1
	}
d208 3
a210 2
int i2d_PKCS7_fp(FILE *fp, PKCS7 *p7)
	{
d212 1
a212 1
	}
d215 3
a217 2
PKCS7 *d2i_PKCS7_bio(BIO *bp, PKCS7 **p7)
	{
d219 1
a219 1
	}
d221 3
a223 2
int i2d_PKCS7_bio(BIO *bp, PKCS7 *p7)
	{
d225 1
a225 1
	}
d228 3
a230 2
X509_REQ *d2i_X509_REQ_fp(FILE *fp, X509_REQ **req)
	{
d232 1
a232 1
	}
d234 3
a236 2
int i2d_X509_REQ_fp(FILE *fp, X509_REQ *req)
	{
d238 1
a238 1
	}
d241 3
a243 2
X509_REQ *d2i_X509_REQ_bio(BIO *bp, X509_REQ **req)
	{
d245 1
a245 1
	}
d247 3
a249 2
int i2d_X509_REQ_bio(BIO *bp, X509_REQ *req)
	{
d251 1
a251 1
	}
d256 3
a258 2
RSA *d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa)
	{
d260 1
a260 1
	}
d262 3
a264 2
int i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa)
	{
d266 1
a266 1
	}
d268 3
a270 2
RSA *d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa)
	{
d272 1
a272 1
	}
d275 6
a280 6
RSA *d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)
	{
	return ASN1_d2i_fp((void *(*)(void))
			   RSA_new,(D2I_OF(void))d2i_RSA_PUBKEY, fp,
			   (void **)rsa);
	}
d282 3
a284 2
int i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa)
	{
d286 1
a286 1
	}
d288 5
a292 4
int i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa)
	{
	return ASN1_i2d_fp((I2D_OF(void))i2d_RSA_PUBKEY,fp,rsa);
	}
d295 3
a297 2
RSA *d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa)
	{
d299 1
a299 1
	}
d301 3
a303 2
int i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa)
	{
d305 1
a305 1
	}
d307 3
a309 2
RSA *d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa)
	{
d311 1
a311 1
	}
d314 5
a318 4
RSA *d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)
	{
	return ASN1_d2i_bio_of(RSA,RSA_new,d2i_RSA_PUBKEY,bp,rsa);
	}
d320 3
a322 2
int i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa)
	{
d324 1
a324 1
	}
d326 5
a330 4
int i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa)
	{
	return ASN1_i2d_bio_of(RSA,i2d_RSA_PUBKEY,bp,rsa);
	}
d335 48
a382 41
DSA *d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa)
	{
	return ASN1_d2i_fp_of(DSA,DSA_new,d2i_DSAPrivateKey,fp,dsa);
	}

int i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa)
	{
	return ASN1_i2d_fp_of_const(DSA,i2d_DSAPrivateKey,fp,dsa);
	}

DSA *d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)
	{
	return ASN1_d2i_fp_of(DSA,DSA_new,d2i_DSA_PUBKEY,fp,dsa);
	}

int i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa)
	{
	return ASN1_i2d_fp_of(DSA,i2d_DSA_PUBKEY,fp,dsa);
	}
#endif

DSA *d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)
	{
	return ASN1_d2i_bio_of(DSA,DSA_new,d2i_DSAPrivateKey,bp,dsa
);
	}

int i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa)
	{
	return ASN1_i2d_bio_of_const(DSA,i2d_DSAPrivateKey,bp,dsa);
	}

DSA *d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)
	{
	return ASN1_d2i_bio_of(DSA,DSA_new,d2i_DSA_PUBKEY,bp,dsa);
	}

int i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa)
	{
	return ASN1_i2d_bio_of(DSA,i2d_DSA_PUBKEY,bp,dsa);
	}
d388 47
a434 39
EC_KEY *d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)
	{
	return ASN1_d2i_fp_of(EC_KEY,EC_KEY_new,d2i_EC_PUBKEY,fp,eckey);
	}
  
int i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey)
	{
	return ASN1_i2d_fp_of(EC_KEY,i2d_EC_PUBKEY,fp,eckey);
	}

EC_KEY *d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey)
	{
	return ASN1_d2i_fp_of(EC_KEY,EC_KEY_new,d2i_ECPrivateKey,fp,eckey);
	}
  
int i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey)
	{
	return ASN1_i2d_fp_of(EC_KEY,i2d_ECPrivateKey,fp,eckey);
	}
#endif
EC_KEY *d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey)
	{
	return ASN1_d2i_bio_of(EC_KEY,EC_KEY_new,d2i_EC_PUBKEY,bp,eckey);
	}
  
int i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *ecdsa)
	{
	return ASN1_i2d_bio_of(EC_KEY,i2d_EC_PUBKEY,bp,ecdsa);
	}

EC_KEY *d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)
	{
	return ASN1_d2i_bio_of(EC_KEY,EC_KEY_new,d2i_ECPrivateKey,bp,eckey);
	}
  
int i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey)
	{
	return ASN1_i2d_bio_of(EC_KEY,i2d_ECPrivateKey,bp,eckey);
	}
d438 4
a441 3
int X509_pubkey_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
	     unsigned int *len)
	{
d444 2
a445 1
	if(!key) return 0;
d447 25
a471 1
	}
d473 15
a487 30
int X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
	     unsigned int *len)
	{
	return(ASN1_item_digest(ASN1_ITEM_rptr(X509),type,(char *)data,md,len));
	}

int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type, unsigned char *md,
	     unsigned int *len)
	{
	return(ASN1_item_digest(ASN1_ITEM_rptr(X509_CRL),type,(char *)data,md,len));
	}

int X509_REQ_digest(const X509_REQ *data, const EVP_MD *type, unsigned char *md,
	     unsigned int *len)
	{
	return(ASN1_item_digest(ASN1_ITEM_rptr(X509_REQ),type,(char *)data,md,len));
	}

int X509_NAME_digest(const X509_NAME *data, const EVP_MD *type, unsigned char *md,
	     unsigned int *len)
	{
	return(ASN1_item_digest(ASN1_ITEM_rptr(X509_NAME),type,(char *)data,md,len));
	}

int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data, const EVP_MD *type,
	     unsigned char *md, unsigned int *len)
	{
	return(ASN1_item_digest(ASN1_ITEM_rptr(PKCS7_ISSUER_AND_SERIAL),type,
		(char *)data,md,len));
	}
d491 24
a514 20
X509_SIG *d2i_PKCS8_fp(FILE *fp, X509_SIG **p8)
	{
	return ASN1_d2i_fp_of(X509_SIG,X509_SIG_new,d2i_X509_SIG,fp,p8);
	}

int i2d_PKCS8_fp(FILE *fp, X509_SIG *p8)
	{
	return ASN1_i2d_fp_of(X509_SIG,i2d_X509_SIG,fp,p8);
	}
#endif

X509_SIG *d2i_PKCS8_bio(BIO *bp, X509_SIG **p8)
	{
	return ASN1_d2i_bio_of(X509_SIG,X509_SIG_new,d2i_X509_SIG,bp,p8);
	}

int i2d_PKCS8_bio(BIO *bp, X509_SIG *p8)
	{
	return ASN1_i2d_bio_of(X509_SIG,i2d_X509_SIG,bp,p8);
	}
d517 7
a523 12
PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
						 PKCS8_PRIV_KEY_INFO **p8inf)
	{
	return ASN1_d2i_fp_of(PKCS8_PRIV_KEY_INFO,PKCS8_PRIV_KEY_INFO_new,
			      d2i_PKCS8_PRIV_KEY_INFO,fp,p8inf);
	}

int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf)
	{
	return ASN1_i2d_fp_of(PKCS8_PRIV_KEY_INFO,i2d_PKCS8_PRIV_KEY_INFO,fp,
			      p8inf);
	}
d525 10
a534 2
int i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key)
	{
d538 2
a539 1
	if(!p8inf) return 0;
d543 1
a543 1
	}
d545 5
a549 4
int i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey)
	{
	return ASN1_i2d_fp_of(EVP_PKEY,i2d_PrivateKey,fp,pkey);
	}
d551 2
a552 1
EVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)
d554 2
a555 1
	return ASN1_d2i_fp_of(EVP_PKEY,EVP_PKEY_new,d2i_AutoPrivateKey,fp,a);
d558 5
a562 4
int i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey)
	{
	return ASN1_i2d_fp_of(EVP_PKEY,i2d_PUBKEY,fp,pkey);
	}
d564 2
a565 1
EVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)
d567 1
a567 1
	return ASN1_d2i_fp_of(EVP_PKEY,EVP_PKEY_new,d2i_PUBKEY,fp,a);
d572 7
a578 6
PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
						 PKCS8_PRIV_KEY_INFO **p8inf)
	{
	return ASN1_d2i_bio_of(PKCS8_PRIV_KEY_INFO,PKCS8_PRIV_KEY_INFO_new,
			    d2i_PKCS8_PRIV_KEY_INFO,bp,p8inf);
	}
d580 6
a585 5
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf)
	{
	return ASN1_i2d_bio_of(PKCS8_PRIV_KEY_INFO,i2d_PKCS8_PRIV_KEY_INFO,bp,
			       p8inf);
	}
d587 3
a589 2
int i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key)
	{
d593 2
a594 1
	if(!p8inf) return 0;
d598 1
a598 1
	}
d600 23
a622 19
int i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey)
	{
	return ASN1_i2d_bio_of(EVP_PKEY,i2d_PrivateKey,bp,pkey);
	}

EVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)
	{
	return ASN1_d2i_bio_of(EVP_PKEY,EVP_PKEY_new,d2i_AutoPrivateKey,bp,a);
	}

int i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey)
	{
	return ASN1_i2d_bio_of(EVP_PKEY,i2d_PUBKEY,bp,pkey);
	}

EVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)
	{
	return ASN1_d2i_bio_of(EVP_PKEY,EVP_PKEY_new,d2i_PUBKEY,bp,a);
	}
@


1.10
log
@resolve conflicts
@
text
@d100 1
d127 1
@


1.9
log
@openssl-1.0.0e: resolve conflicts
@
text
@d98 7
d111 6
d122 6
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d93 1
@


1.7
log
@resolve conflicts
@
text
@a59 1
#undef SSLEAY_MACROS
a82 6
	}

int X509_CRL_verify(X509_CRL *a, EVP_PKEY *r)
	{
	return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CRL_INFO),
		a->sig_alg, a->signature,a->crl,r));
@


1.6
log
@resolve conflicts
@
text
@d67 6
d232 3
a234 3
	return((RSA *)ASN1_d2i_fp((char *(*)())
		RSA_new,(char *(*)())d2i_RSA_PUBKEY, (fp),
		(unsigned char **)(rsa)));
d244 1
a244 1
	return(ASN1_i2d_fp(i2d_RSA_PUBKEY,fp,(unsigned char *)rsa));
d266 1
a266 3
	return((RSA *)ASN1_d2i_bio((char *(*)())
		RSA_new,(char *(*)())d2i_RSA_PUBKEY, (bp),
		(unsigned char **)(rsa)));
d276 1
a276 1
	return(ASN1_i2d_bio(i2d_RSA_PUBKEY,bp,(unsigned char *)rsa));
d284 1
a284 3
	return((DSA *)ASN1_d2i_fp((char *(*)())
		DSA_new,(char *(*)())d2i_DSAPrivateKey, (fp),
		(unsigned char **)(dsa)));
d289 1
a289 1
	return(ASN1_i2d_fp(i2d_DSAPrivateKey,fp,(unsigned char *)dsa));
d294 1
a294 3
	return((DSA *)ASN1_d2i_fp((char *(*)())
		DSA_new,(char *(*)())d2i_DSA_PUBKEY, (fp),
		(unsigned char **)(dsa)));
d299 1
a299 1
	return(ASN1_i2d_fp(i2d_DSA_PUBKEY,fp,(unsigned char *)dsa));
d305 2
a306 3
	return((DSA *)ASN1_d2i_bio((char *(*)())
		DSA_new,(char *(*)())d2i_DSAPrivateKey, (bp),
		(unsigned char **)(dsa)));
d311 1
a311 1
	return(ASN1_i2d_bio(i2d_DSAPrivateKey,bp,(unsigned char *)dsa));
d316 1
a316 3
	return((DSA *)ASN1_d2i_bio((char *(*)())
		DSA_new,(char *(*)())d2i_DSA_PUBKEY, (bp),
		(unsigned char **)(dsa)));
d321 1
a321 1
	return(ASN1_i2d_bio(i2d_DSA_PUBKEY,bp,(unsigned char *)dsa));
d326 44
d414 1
a414 2
	return((X509_SIG *)ASN1_d2i_fp((char *(*)())X509_SIG_new,
		(char *(*)())d2i_X509_SIG, (fp),(unsigned char **)(p8)));
d419 1
a419 1
	return(ASN1_i2d_fp(i2d_X509_SIG,fp,(unsigned char *)p8));
d425 1
a425 2
	return((X509_SIG *)ASN1_d2i_bio((char *(*)())X509_SIG_new,
		(char *(*)())d2i_X509_SIG, (bp),(unsigned char **)(p8)));
d430 1
a430 1
	return(ASN1_i2d_bio(i2d_X509_SIG,bp,(unsigned char *)p8));
d437 2
a438 4
	return((PKCS8_PRIV_KEY_INFO *)ASN1_d2i_fp(
		(char *(*)())PKCS8_PRIV_KEY_INFO_new,
		(char *(*)())d2i_PKCS8_PRIV_KEY_INFO, (fp),
				(unsigned char **)(p8inf)));
d443 2
a444 1
	return(ASN1_i2d_fp(i2d_PKCS8_PRIV_KEY_INFO,fp,(unsigned char *)p8inf));
d460 1
a460 1
	return(ASN1_i2d_fp(i2d_PrivateKey,fp,(unsigned char *)pkey));
d465 1
a465 2
	return((EVP_PKEY *)ASN1_d2i_fp((char *(*)())EVP_PKEY_new,
		(char *(*)())d2i_AutoPrivateKey, (fp),(unsigned char **)(a)));
d470 1
a470 1
	return(ASN1_i2d_fp(i2d_PUBKEY,fp,(unsigned char *)pkey));
d475 1
a475 2
	return((EVP_PKEY *)ASN1_d2i_fp((char *(*)())EVP_PKEY_new,
		(char *(*)())d2i_PUBKEY, (fp),(unsigned char **)(a)));
d483 2
a484 4
	return((PKCS8_PRIV_KEY_INFO *)ASN1_d2i_bio(
		(char *(*)())PKCS8_PRIV_KEY_INFO_new,
		(char *(*)())d2i_PKCS8_PRIV_KEY_INFO, (bp),
				(unsigned char **)(p8inf)));
d489 2
a490 1
	return(ASN1_i2d_bio(i2d_PKCS8_PRIV_KEY_INFO,bp,(unsigned char *)p8inf));
d506 1
a506 1
	return(ASN1_i2d_bio(i2d_PrivateKey,bp,(unsigned char *)pkey));
d511 1
a511 2
	return((EVP_PKEY *)ASN1_d2i_bio((char *(*)())EVP_PKEY_new,
		(char *(*)())d2i_AutoPrivateKey, (bp),(unsigned char **)(a)));
d516 1
a516 1
	return(ASN1_i2d_bio(i2d_PUBKEY,bp,(unsigned char *)pkey));
d521 1
a521 2
	return((EVP_PKEY *)ASN1_d2i_bio((char *(*)())EVP_PKEY_new,
		(char *(*)())d2i_PUBKEY, (bp),(unsigned char **)(a)));
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d106 1
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d70 2
a71 2
	return(ASN1_verify((int (*)())i2d_X509_CINF,a->sig_alg,
		a->signature,(char *)a->cert_info,r));
d76 2
a77 2
	return( ASN1_verify((int (*)())i2d_X509_REQ_INFO,
		a->sig_alg,a->signature,(char *)a->req_info,r));
d82 2
a83 2
	return(ASN1_verify((int (*)())i2d_X509_CRL_INFO,
		a->sig_alg, a->signature,(char *)a->crl,r));
d88 2
a89 2
	return(ASN1_verify((int (*)())i2d_NETSCAPE_SPKAC,
		a->sig_algor,a->signature, (char *)a->spkac,r));
d94 2
a95 2
	return(ASN1_sign((int (*)())i2d_X509_CINF, x->cert_info->signature,
		x->sig_alg, x->signature, (char *)x->cert_info,pkey,md));
d100 2
a101 2
	return(ASN1_sign((int (*)())i2d_X509_REQ_INFO,x->sig_alg, NULL,
		x->signature, (char *)x->req_info,pkey,md));
d106 2
a107 2
	return(ASN1_sign((int (*)())i2d_X509_CRL_INFO,x->crl->sig_alg,
		x->sig_alg, x->signature, (char *)x->crl,pkey,md));
d112 2
a113 2
	return(ASN1_sign((int (*)())i2d_NETSCAPE_SPKAC, x->sig_algor,NULL,
		x->signature, (char *)x->spkac,pkey,md));
d116 1
a116 20
X509_ATTRIBUTE *X509_ATTRIBUTE_dup(X509_ATTRIBUTE *xa)
	{
	return((X509_ATTRIBUTE *)ASN1_dup((int (*)())i2d_X509_ATTRIBUTE,
		(char *(*)())d2i_X509_ATTRIBUTE,(char *)xa));
	}

X509 *X509_dup(X509 *x509)
	{
	return((X509 *)ASN1_dup((int (*)())i2d_X509,
		(char *(*)())d2i_X509,(char *)x509));
	}

X509_EXTENSION *X509_EXTENSION_dup(X509_EXTENSION *ex)
	{
	return((X509_EXTENSION *)ASN1_dup(
		(int (*)())i2d_X509_EXTENSION,
		(char *(*)())d2i_X509_EXTENSION,(char *)ex));
	}

#ifndef NO_FP_API
d119 1
a119 2
	return((X509 *)ASN1_d2i_fp((char *(*)())X509_new,
		(char *(*)())d2i_X509, (fp),(unsigned char **)(x509)));
d124 1
a124 1
	return(ASN1_i2d_fp(i2d_X509,fp,(unsigned char *)x509));
d130 1
a130 2
	return((X509 *)ASN1_d2i_bio((char *(*)())X509_new,
		(char *(*)())d2i_X509, (bp),(unsigned char **)(x509)));
d135 1
a135 7
	return(ASN1_i2d_bio(i2d_X509,bp,(unsigned char *)x509));
	}

X509_CRL *X509_CRL_dup(X509_CRL *crl)
	{
	return((X509_CRL *)ASN1_dup((int (*)())i2d_X509_CRL,
		(char *(*)())d2i_X509_CRL,(char *)crl));
d138 1
a138 1
#ifndef NO_FP_API
d141 1
a141 3
	return((X509_CRL *)ASN1_d2i_fp((char *(*)())
		X509_CRL_new,(char *(*)())d2i_X509_CRL, (fp),
		(unsigned char **)(crl)));
d146 1
a146 1
	return(ASN1_i2d_fp(i2d_X509_CRL,fp,(unsigned char *)crl));
d152 1
a152 3
	return((X509_CRL *)ASN1_d2i_bio((char *(*)())
		X509_CRL_new,(char *(*)())d2i_X509_CRL, (bp),
		(unsigned char **)(crl)));
d157 1
a157 7
	return(ASN1_i2d_bio(i2d_X509_CRL,bp,(unsigned char *)crl));
	}

PKCS7 *PKCS7_dup(PKCS7 *p7)
	{
	return((PKCS7 *)ASN1_dup((int (*)())i2d_PKCS7,
		(char *(*)())d2i_PKCS7,(char *)p7));
d160 1
a160 1
#ifndef NO_FP_API
d163 1
a163 3
	return((PKCS7 *)ASN1_d2i_fp((char *(*)())
		PKCS7_new,(char *(*)())d2i_PKCS7, (fp),
		(unsigned char **)(p7)));
d168 1
a168 1
	return(ASN1_i2d_fp(i2d_PKCS7,fp,(unsigned char *)p7));
d174 1
a174 3
	return((PKCS7 *)ASN1_d2i_bio((char *(*)())
		PKCS7_new,(char *(*)())d2i_PKCS7, (bp),
		(unsigned char **)(p7)));
d179 1
a179 1
	return(ASN1_i2d_bio(i2d_PKCS7,bp,(unsigned char *)p7));
d182 1
a182 7
X509_REQ *X509_REQ_dup(X509_REQ *req)
	{
	return((X509_REQ *)ASN1_dup((int (*)())i2d_X509_REQ,
		(char *(*)())d2i_X509_REQ,(char *)req));
	}

#ifndef NO_FP_API
d185 1
a185 3
	return((X509_REQ *)ASN1_d2i_fp((char *(*)())
		X509_REQ_new, (char *(*)())d2i_X509_REQ, (fp),
		(unsigned char **)(req)));
d190 1
a190 1
	return(ASN1_i2d_fp(i2d_X509_REQ,fp,(unsigned char *)req));
d196 1
a196 3
	return((X509_REQ *)ASN1_d2i_bio((char *(*)())
		X509_REQ_new, (char *(*)())d2i_X509_REQ, (bp),
		(unsigned char **)(req)));
d201 1
a201 8
	return(ASN1_i2d_bio(i2d_X509_REQ,bp,(unsigned char *)req));
	}

#ifndef NO_RSA
RSA *RSAPublicKey_dup(RSA *rsa)
	{
	return((RSA *)ASN1_dup((int (*)())i2d_RSAPublicKey,
		(char *(*)())d2i_RSAPublicKey,(char *)rsa));
d204 1
a204 5
RSA *RSAPrivateKey_dup(RSA *rsa)
	{
	return((RSA *)ASN1_dup((int (*)())i2d_RSAPrivateKey,
		(char *(*)())d2i_RSAPrivateKey,(char *)rsa));
	}
d206 1
a206 1
#ifndef NO_FP_API
d209 1
a209 3
	return((RSA *)ASN1_d2i_fp((char *(*)())
		RSA_new,(char *(*)())d2i_RSAPrivateKey, (fp),
		(unsigned char **)(rsa)));
d214 1
a214 1
	return(ASN1_i2d_fp(i2d_RSAPrivateKey,fp,(unsigned char *)rsa));
d219 1
a219 3
	return((RSA *)ASN1_d2i_fp((char *(*)())
		RSA_new,(char *(*)())d2i_RSAPublicKey, (fp),
		(unsigned char **)(rsa)));
d222 1
d232 1
a232 1
	return(ASN1_i2d_fp(i2d_RSAPublicKey,fp,(unsigned char *)rsa));
d243 1
a243 3
	return((RSA *)ASN1_d2i_bio((char *(*)())
		RSA_new,(char *(*)())d2i_RSAPrivateKey, (bp),
		(unsigned char **)(rsa)));
d248 1
a248 1
	return(ASN1_i2d_bio(i2d_RSAPrivateKey,bp,(unsigned char *)rsa));
d253 1
a253 3
	return((RSA *)ASN1_d2i_bio((char *(*)())
		RSA_new,(char *(*)())d2i_RSAPublicKey, (bp),
		(unsigned char **)(rsa)));
d256 1
d266 1
a266 1
	return(ASN1_i2d_bio(i2d_RSAPublicKey,bp,(unsigned char *)rsa));
d275 2
a276 2
#ifndef NO_DSA
#ifndef NO_FP_API
d328 2
a329 13
X509_ALGOR *X509_ALGOR_dup(X509_ALGOR *xn)
	{
	return((X509_ALGOR *)ASN1_dup((int (*)())i2d_X509_ALGOR,
	(char *(*)())d2i_X509_ALGOR,(char *)xn));
	}

X509_NAME *X509_NAME_dup(X509_NAME *xn)
	{
	return((X509_NAME *)ASN1_dup((int (*)())i2d_X509_NAME,
		(char *(*)())d2i_X509_NAME,(char *)xn));
	}

X509_NAME_ENTRY *X509_NAME_ENTRY_dup(X509_NAME_ENTRY *ne)
d331 4
a334 2
	return((X509_NAME_ENTRY *)ASN1_dup((int (*)())i2d_X509_NAME_ENTRY,
		(char *(*)())d2i_X509_NAME_ENTRY,(char *)ne));
d340 1
a340 1
	return(ASN1_digest((int (*)())i2d_X509,type,(char *)data,md,len));
d346 1
a346 1
	return(ASN1_digest((int (*)())i2d_X509_CRL,type,(char *)data,md,len));
d352 1
a352 1
	return(ASN1_digest((int (*)())i2d_X509_REQ,type,(char *)data,md,len));
d358 1
a358 1
	return(ASN1_digest((int (*)())i2d_X509_NAME,type,(char *)data,md,len));
d364 1
a364 1
	return(ASN1_digest((int (*)())i2d_PKCS7_ISSUER_AND_SERIAL,type,
d369 1
a369 1
#ifndef NO_FP_API
d393 1
a393 1
#ifndef NO_FP_API
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d414 1
a414 1
int X509_digest(X509 *data, const EVP_MD *type, unsigned char *md,
d420 13
a432 1
int X509_NAME_digest(X509_NAME *data, const EVP_MD *type, unsigned char *md,
d507 11
d554 11
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d288 7
d299 5
d325 7
d336 5
d356 12
d381 13
d414 1
a414 1
int X509_digest(X509 *data, EVP_MD *type, unsigned char *md,
d420 1
a420 1
int X509_NAME_digest(X509_NAME *data, EVP_MD *type, unsigned char *md,
d426 1
a426 1
int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data, EVP_MD *type,
d472 23
d509 22
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
#include "stack.h"
d63 6
a68 8
#include "buffer.h"
#include "asn1.h"
#include "evp.h"
#include "x509.h"

int X509_verify(a,r)
X509 *a;
EVP_PKEY *r;
d74 1
a74 3
int X509_REQ_verify(a,r)
X509_REQ *a;
EVP_PKEY *r;
d80 1
a80 3
int X509_CRL_verify(a,r)
X509_CRL *a;
EVP_PKEY *r;
d86 1
a86 3
int NETSCAPE_SPKI_verify(a,r)
NETSCAPE_SPKI *a;
EVP_PKEY *r;
d92 1
a92 4
int X509_sign(x,pkey,md)
X509 *x;
EVP_PKEY *pkey;
EVP_MD *md;
d98 1
a98 4
int X509_REQ_sign(x,pkey,md)
X509_REQ *x;
EVP_PKEY *pkey;
EVP_MD *md;
d104 1
a104 4
int X509_CRL_sign(x,pkey,md)
X509_CRL *x;
EVP_PKEY *pkey;
EVP_MD *md;
d110 1
a110 4
int NETSCAPE_SPKI_sign(x,pkey,md)
NETSCAPE_SPKI *x;
EVP_PKEY *pkey;
EVP_MD *md;
d116 7
a122 2
X509 *X509_dup(x509)
X509 *x509;
d128 1
a128 2
X509_EXTENSION *X509_EXTENSION_dup(ex)
X509_EXTENSION *ex;
d136 1
a136 3
X509 *d2i_X509_fp(fp,x509)
FILE *fp;
X509 *x509;
d142 1
a142 3
int i2d_X509_fp(fp,x509)
FILE *fp;
X509 *x509;
d148 1
a148 3
X509 *d2i_X509_bio(bp,x509)
BIO *bp;
X509 *x509;
d154 1
a154 3
int i2d_X509_bio(bp,x509)
BIO *bp;
X509 *x509;
d159 1
a159 2
X509_CRL *X509_CRL_dup(crl)
X509_CRL *crl;
d166 1
a166 3
X509_CRL *d2i_X509_CRL_fp(fp,crl)
FILE *fp;
X509_CRL *crl;
d173 1
a173 3
int i2d_X509_CRL_fp(fp,crl)
FILE *fp;
X509_CRL *crl;
d179 1
a179 3
X509_CRL *d2i_X509_CRL_bio(bp,crl)
BIO *bp;
X509_CRL *crl;
d186 1
a186 3
int i2d_X509_CRL_bio(bp,crl)
BIO *bp;
X509_CRL *crl;
d191 1
a191 2
PKCS7 *PKCS7_dup(p7)
PKCS7 *p7;
d198 1
a198 3
PKCS7 *d2i_PKCS7_fp(fp,p7)
FILE *fp;
PKCS7 *p7;
d205 1
a205 3
int i2d_PKCS7_fp(fp,p7)
FILE *fp;
PKCS7 *p7;
d211 1
a211 3
PKCS7 *d2i_PKCS7_bio(bp,p7)
BIO *bp;
PKCS7 *p7;
d218 1
a218 3
int i2d_PKCS7_bio(bp,p7)
BIO *bp;
PKCS7 *p7;
d223 1
a223 2
X509_REQ *X509_REQ_dup(req)
X509_REQ *req;
d230 1
a230 3
X509_REQ *d2i_X509_REQ_fp(fp,req)
FILE *fp;
X509_REQ *req;
d237 1
a237 3
int i2d_X509_REQ_fp(fp,req)
FILE *fp;
X509_REQ *req;
d243 1
a243 3
X509_REQ *d2i_X509_REQ_bio(bp,req)
BIO *bp;
X509_REQ *req;
d250 1
a250 3
int i2d_X509_REQ_bio(bp,req)
BIO *bp;
X509_REQ *req;
d256 1
a256 2
RSA *RSAPublicKey_dup(rsa)
RSA *rsa;
d262 1
a262 2
RSA *RSAPrivateKey_dup(rsa)
RSA *rsa;
d269 1
a269 3
RSA *d2i_RSAPrivateKey_fp(fp,rsa)
FILE *fp;
RSA *rsa;
d276 1
a276 3
int i2d_RSAPrivateKey_fp(fp,rsa)
FILE *fp;
RSA *rsa;
d281 1
a281 3
RSA *d2i_RSAPublicKey_fp(fp,rsa)
FILE *fp;
RSA *rsa;
d288 1
a288 3
int i2d_RSAPublicKey_fp(fp,rsa)
FILE *fp;
RSA *rsa;
d294 1
a294 3
RSA *d2i_RSAPrivateKey_bio(bp,rsa)
BIO *bp;
RSA *rsa;
d301 1
a301 3
int i2d_RSAPrivateKey_bio(bp,rsa)
BIO *bp;
RSA *rsa;
d306 1
a306 3
RSA *d2i_RSAPublicKey_bio(bp,rsa)
BIO *bp;
RSA *rsa;
d313 1
a313 3
int i2d_RSAPublicKey_bio(bp,rsa)
BIO *bp;
RSA *rsa;
d321 1
a321 3
DSA *d2i_DSAPrivateKey_fp(fp,dsa)
FILE *fp;
DSA *dsa;
d328 1
a328 3
int i2d_DSAPrivateKey_fp(fp,dsa)
FILE *fp;
DSA *dsa;
d334 1
a334 3
DSA *d2i_DSAPrivateKey_bio(bp,dsa)
BIO *bp;
DSA *dsa;
d341 1
a341 3
int i2d_DSAPrivateKey_bio(bp,dsa)
BIO *bp;
DSA *dsa;
d347 7
a353 2
X509_NAME *X509_NAME_dup(xn)
X509_NAME *xn;
d359 1
a359 2
X509_NAME_ENTRY *X509_NAME_ENTRY_dup(ne)
X509_NAME_ENTRY *ne;
d365 2
a366 5
int X509_digest(data,type,md,len)
X509 *data;
EVP_MD *type;
unsigned char *md;
unsigned int *len;
d371 2
a372 5
int X509_NAME_digest(data,type,md,len)
X509_NAME *data;
EVP_MD *type;
unsigned char *md;
unsigned int *len;
d377 2
a378 5
int PKCS7_ISSUER_AND_SERIAL_digest(data,type,md,len)
PKCS7_ISSUER_AND_SERIAL *data;
EVP_MD *type;
unsigned char *md;
unsigned int *len;
d384 54
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/stack.h>
d63 4
a66 4
#include <openssl/buffer.h>
#include <openssl/asn1.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
d68 3
a70 1
int X509_verify(X509 *a, EVP_PKEY *r)
d72 2
a73 2
	return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF),a->sig_alg,
		a->signature,a->cert_info,r));
d76 3
a78 1
int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)
d80 2
a81 2
	return( ASN1_item_verify(ASN1_ITEM_rptr(X509_REQ_INFO),
		a->sig_alg,a->signature,a->req_info,r));
d84 3
a86 1
int X509_CRL_verify(X509_CRL *a, EVP_PKEY *r)
d88 2
a89 2
	return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CRL_INFO),
		a->sig_alg, a->signature,a->crl,r));
d92 3
a94 1
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r)
d96 2
a97 2
	return(ASN1_item_verify(ASN1_ITEM_rptr(NETSCAPE_SPKAC),
		a->sig_algor,a->signature,a->spkac,r));
d100 4
a103 1
int X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
d105 2
a106 2
	return(ASN1_item_sign(ASN1_ITEM_rptr(X509_CINF), x->cert_info->signature,
		x->sig_alg, x->signature, x->cert_info,pkey,md));
d109 4
a112 1
int X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)
d114 2
a115 2
	return(ASN1_item_sign(ASN1_ITEM_rptr(X509_REQ_INFO),x->sig_alg, NULL,
		x->signature, x->req_info,pkey,md));
d118 4
a121 1
int X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md)
d123 2
a124 2
	return(ASN1_item_sign(ASN1_ITEM_rptr(X509_CRL_INFO),x->crl->sig_alg,
		x->sig_alg, x->signature, x->crl,pkey,md));
d127 4
a130 1
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md)
d132 2
a133 2
	return(ASN1_item_sign(ASN1_ITEM_rptr(NETSCAPE_SPKAC), x->sig_algor,NULL,
		x->signature, x->spkac,pkey,md));
d136 2
a137 2
#ifndef OPENSSL_NO_FP_API
X509 *d2i_X509_fp(FILE *fp, X509 **x509)
d139 2
a140 1
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(X509), fp, x509);
d143 2
a144 1
int i2d_X509_fp(FILE *fp, X509 *x509)
d146 3
a148 1
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(X509), fp, x509);
a149 1
#endif
d151 4
a154 1
X509 *d2i_X509_bio(BIO *bp, X509 **x509)
d156 2
a157 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509), bp, x509);
d160 3
a162 1
int i2d_X509_bio(BIO *bp, X509 *x509)
d164 1
a164 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509), bp, x509);
d166 1
d168 3
a170 2
#ifndef OPENSSL_NO_FP_API
X509_CRL *d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl)
d172 2
a173 1
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(X509_CRL), fp, crl);
d176 3
a178 1
int i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl)
d180 1
a180 1
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(X509_CRL), fp, crl);
a181 1
#endif
d183 2
a184 1
X509_CRL *d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl)
d186 2
a187 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509_CRL), bp, crl);
d190 4
a193 1
int i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl)
d195 3
a197 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509_CRL), bp, crl);
d200 3
a202 2
#ifndef OPENSSL_NO_FP_API
PKCS7 *d2i_PKCS7_fp(FILE *fp, PKCS7 **p7)
d204 1
a204 1
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(PKCS7), fp, p7);
d206 1
d208 3
a210 1
int i2d_PKCS7_fp(FILE *fp, PKCS7 *p7)
d212 3
a214 1
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(PKCS7), fp, p7);
a215 1
#endif
d217 3
a219 1
PKCS7 *d2i_PKCS7_bio(BIO *bp, PKCS7 **p7)
d221 1
a221 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(PKCS7), bp, p7);
d224 2
a225 1
int i2d_PKCS7_bio(BIO *bp, PKCS7 *p7)
d227 2
a228 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(PKCS7), bp, p7);
d231 4
a234 2
#ifndef OPENSSL_NO_FP_API
X509_REQ *d2i_X509_REQ_fp(FILE *fp, X509_REQ **req)
d236 3
a238 1
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(X509_REQ), fp, req);
d241 3
a243 1
int i2d_X509_REQ_fp(FILE *fp, X509_REQ *req)
d245 1
a245 1
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(X509_REQ), fp, req);
d249 3
a251 1
X509_REQ *d2i_X509_REQ_bio(BIO *bp, X509_REQ **req)
d253 3
a255 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509_REQ), bp, req);
d258 3
a260 1
int i2d_X509_REQ_bio(BIO *bp, X509_REQ *req)
d262 1
a262 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509_REQ), bp, req);
d265 2
a266 4
#ifndef OPENSSL_NO_RSA

#ifndef OPENSSL_NO_FP_API
RSA *d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa)
d268 2
a269 1
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(RSAPrivateKey), fp, rsa);
d272 4
a275 1
int i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa)
d277 3
a279 1
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(RSAPrivateKey), fp, rsa);
d282 3
a284 1
RSA *d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa)
d286 1
a286 1
	return ASN1_item_d2i_fp(ASN1_ITEM_rptr(RSAPublicKey), fp, rsa);
d288 1
d290 3
a292 2

RSA *d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)
d294 3
a296 3
	return((RSA *)ASN1_d2i_fp((char *(*)())
		RSA_new,(char *(*)())d2i_RSA_PUBKEY, (fp),
		(unsigned char **)(rsa)));
d299 3
a301 1
int i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa)
d303 1
a303 1
	return ASN1_item_i2d_fp(ASN1_ITEM_rptr(RSAPublicKey), fp, rsa);
d306 3
a308 1
int i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa)
d310 2
a311 1
	return(ASN1_i2d_fp(i2d_RSA_PUBKEY,fp,(unsigned char *)rsa));
a312 1
#endif
d314 2
a315 1
RSA *d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa)
d317 2
a318 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(RSAPrivateKey), bp, rsa);
d321 4
a324 1
int i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa)
d326 3
a328 1
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(RSAPrivateKey), bp, rsa);
d331 3
a333 1
RSA *d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa)
d335 1
a335 1
	return ASN1_item_d2i_bio(ASN1_ITEM_rptr(RSAPublicKey), bp, rsa);
d338 3
a340 2

RSA *d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)
d342 2
a343 2
	return((RSA *)ASN1_d2i_bio((char *(*)())
		RSA_new,(char *(*)())d2i_RSA_PUBKEY, (bp),
d347 3
a349 6
int i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa)
	{
	return ASN1_item_i2d_bio(ASN1_ITEM_rptr(RSAPublicKey), bp, rsa);
	}

int i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa)
d351 1
a351 1
	return(ASN1_i2d_bio(i2d_RSA_PUBKEY,bp,(unsigned char *)rsa));
d355 3
a357 3
#ifndef OPENSSL_NO_DSA
#ifndef OPENSSL_NO_FP_API
DSA *d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa)
d359 3
a361 3
	return((DSA *)ASN1_d2i_fp((char *(*)())
		DSA_new,(char *(*)())d2i_DSAPrivateKey, (fp),
		(unsigned char **)(dsa)));
d364 3
a366 1
int i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa)
d368 1
a368 1
	return(ASN1_i2d_fp(i2d_DSAPrivateKey,fp,(unsigned char *)dsa));
d371 3
a373 1
DSA *d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)
d375 3
a377 3
	return((DSA *)ASN1_d2i_fp((char *(*)())
		DSA_new,(char *(*)())d2i_DSA_PUBKEY, (fp),
		(unsigned char **)(dsa)));
d380 3
a382 1
int i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa)
d384 1
a384 1
	return(ASN1_i2d_fp(i2d_DSA_PUBKEY,fp,(unsigned char *)dsa));
d388 5
a392 1
DSA *d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)
d394 2
a395 2
	return((DSA *)ASN1_d2i_bio((char *(*)())
		DSA_new,(char *(*)())d2i_DSAPrivateKey, (bp),
d399 3
a401 1
int i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa)
d403 1
a403 1
	return(ASN1_i2d_bio(i2d_DSAPrivateKey,bp,(unsigned char *)dsa));
d405 1
d407 3
a409 1
DSA *d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)
d412 1
a412 1
		DSA_new,(char *(*)())d2i_DSA_PUBKEY, (bp),
d416 3
a418 1
int i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa)
d420 1
a420 1
	return(ASN1_i2d_bio(i2d_DSA_PUBKEY,bp,(unsigned char *)dsa));
a421 1

d424 2
a425 11
int X509_pubkey_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
	     unsigned int *len)
	{
	ASN1_BIT_STRING *key;
	key = X509_get0_pubkey_bitstr(data);
	if(!key) return 0;
	return EVP_Digest(key->data, key->length, md, len, type, NULL);
	}

int X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
	     unsigned int *len)
d427 2
a428 1
	return(ASN1_item_digest(ASN1_ITEM_rptr(X509),type,(char *)data,md,len));
d431 2
a432 2
int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type, unsigned char *md,
	     unsigned int *len)
d434 2
a435 1
	return(ASN1_item_digest(ASN1_ITEM_rptr(X509_CRL),type,(char *)data,md,len));
d438 5
a442 2
int X509_REQ_digest(const X509_REQ *data, const EVP_MD *type, unsigned char *md,
	     unsigned int *len)
d444 1
a444 1
	return(ASN1_item_digest(ASN1_ITEM_rptr(X509_REQ),type,(char *)data,md,len));
d447 5
a451 2
int X509_NAME_digest(const X509_NAME *data, const EVP_MD *type, unsigned char *md,
	     unsigned int *len)
d453 1
a453 1
	return(ASN1_item_digest(ASN1_ITEM_rptr(X509_NAME),type,(char *)data,md,len));
d456 5
a460 2
int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data, const EVP_MD *type,
	     unsigned char *md, unsigned int *len)
d462 1
a462 1
	return(ASN1_item_digest(ASN1_ITEM_rptr(PKCS7_ISSUER_AND_SERIAL),type,
a465 121

#ifndef OPENSSL_NO_FP_API
X509_SIG *d2i_PKCS8_fp(FILE *fp, X509_SIG **p8)
	{
	return((X509_SIG *)ASN1_d2i_fp((char *(*)())X509_SIG_new,
		(char *(*)())d2i_X509_SIG, (fp),(unsigned char **)(p8)));
	}

int i2d_PKCS8_fp(FILE *fp, X509_SIG *p8)
	{
	return(ASN1_i2d_fp(i2d_X509_SIG,fp,(unsigned char *)p8));
	}
#endif

X509_SIG *d2i_PKCS8_bio(BIO *bp, X509_SIG **p8)
	{
	return((X509_SIG *)ASN1_d2i_bio((char *(*)())X509_SIG_new,
		(char *(*)())d2i_X509_SIG, (bp),(unsigned char **)(p8)));
	}

int i2d_PKCS8_bio(BIO *bp, X509_SIG *p8)
	{
	return(ASN1_i2d_bio(i2d_X509_SIG,bp,(unsigned char *)p8));
	}

#ifndef OPENSSL_NO_FP_API
PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
						 PKCS8_PRIV_KEY_INFO **p8inf)
	{
	return((PKCS8_PRIV_KEY_INFO *)ASN1_d2i_fp(
		(char *(*)())PKCS8_PRIV_KEY_INFO_new,
		(char *(*)())d2i_PKCS8_PRIV_KEY_INFO, (fp),
				(unsigned char **)(p8inf)));
	}

int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf)
	{
	return(ASN1_i2d_fp(i2d_PKCS8_PRIV_KEY_INFO,fp,(unsigned char *)p8inf));
	}

int i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key)
	{
	PKCS8_PRIV_KEY_INFO *p8inf;
	int ret;
	p8inf = EVP_PKEY2PKCS8(key);
	if(!p8inf) return 0;
	ret = i2d_PKCS8_PRIV_KEY_INFO_fp(fp, p8inf);
	PKCS8_PRIV_KEY_INFO_free(p8inf);
	return ret;
	}

int i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey)
	{
	return(ASN1_i2d_fp(i2d_PrivateKey,fp,(unsigned char *)pkey));
	}

EVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)
{
	return((EVP_PKEY *)ASN1_d2i_fp((char *(*)())EVP_PKEY_new,
		(char *(*)())d2i_AutoPrivateKey, (fp),(unsigned char **)(a)));
}

int i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey)
	{
	return(ASN1_i2d_fp(i2d_PUBKEY,fp,(unsigned char *)pkey));
	}

EVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)
{
	return((EVP_PKEY *)ASN1_d2i_fp((char *(*)())EVP_PKEY_new,
		(char *(*)())d2i_PUBKEY, (fp),(unsigned char **)(a)));
}

#endif

PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
						 PKCS8_PRIV_KEY_INFO **p8inf)
	{
	return((PKCS8_PRIV_KEY_INFO *)ASN1_d2i_bio(
		(char *(*)())PKCS8_PRIV_KEY_INFO_new,
		(char *(*)())d2i_PKCS8_PRIV_KEY_INFO, (bp),
				(unsigned char **)(p8inf)));
	}

int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf)
	{
	return(ASN1_i2d_bio(i2d_PKCS8_PRIV_KEY_INFO,bp,(unsigned char *)p8inf));
	}

int i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key)
	{
	PKCS8_PRIV_KEY_INFO *p8inf;
	int ret;
	p8inf = EVP_PKEY2PKCS8(key);
	if(!p8inf) return 0;
	ret = i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf);
	PKCS8_PRIV_KEY_INFO_free(p8inf);
	return ret;
	}

int i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey)
	{
	return(ASN1_i2d_bio(i2d_PrivateKey,bp,(unsigned char *)pkey));
	}

EVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)
	{
	return((EVP_PKEY *)ASN1_d2i_bio((char *(*)())EVP_PKEY_new,
		(char *(*)())d2i_AutoPrivateKey, (bp),(unsigned char **)(a)));
	}

int i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey)
	{
	return(ASN1_i2d_bio(i2d_PUBKEY,bp,(unsigned char *)pkey));
	}

EVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)
	{
	return((EVP_PKEY *)ASN1_d2i_bio((char *(*)())EVP_PKEY_new,
		(char *(*)())d2i_PUBKEY, (bp),(unsigned char **)(a)));
	}
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a105 1
	x->crl->enc.modified = 1;
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a66 6
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
d226 3
a228 3
	return ASN1_d2i_fp((void *(*)(void))
			   RSA_new,(D2I_OF(void))d2i_RSA_PUBKEY, fp,
			   (void **)rsa);
d238 1
a238 1
	return ASN1_i2d_fp((I2D_OF(void))i2d_RSA_PUBKEY,fp,rsa);
d260 3
a262 1
	return ASN1_d2i_bio_of(RSA,RSA_new,d2i_RSA_PUBKEY,bp,rsa);
d272 1
a272 1
	return ASN1_i2d_bio_of(RSA,i2d_RSA_PUBKEY,bp,rsa);
d280 3
a282 1
	return ASN1_d2i_fp_of(DSA,DSA_new,d2i_DSAPrivateKey,fp,dsa);
d287 1
a287 1
	return ASN1_i2d_fp_of_const(DSA,i2d_DSAPrivateKey,fp,dsa);
d292 3
a294 1
	return ASN1_d2i_fp_of(DSA,DSA_new,d2i_DSA_PUBKEY,fp,dsa);
d299 1
a299 1
	return ASN1_i2d_fp_of(DSA,i2d_DSA_PUBKEY,fp,dsa);
d305 3
a307 2
	return ASN1_d2i_bio_of(DSA,DSA_new,d2i_DSAPrivateKey,bp,dsa
);
d312 1
a312 1
	return ASN1_i2d_bio_of_const(DSA,i2d_DSAPrivateKey,bp,dsa);
d317 3
a319 1
	return ASN1_d2i_bio_of(DSA,DSA_new,d2i_DSA_PUBKEY,bp,dsa);
d324 1
a324 1
	return ASN1_i2d_bio_of(DSA,i2d_DSA_PUBKEY,bp,dsa);
a328 44
#ifndef OPENSSL_NO_EC
#ifndef OPENSSL_NO_FP_API
EC_KEY *d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)
	{
	return ASN1_d2i_fp_of(EC_KEY,EC_KEY_new,d2i_EC_PUBKEY,fp,eckey);
	}
  
int i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey)
	{
	return ASN1_i2d_fp_of(EC_KEY,i2d_EC_PUBKEY,fp,eckey);
	}

EC_KEY *d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey)
	{
	return ASN1_d2i_fp_of(EC_KEY,EC_KEY_new,d2i_ECPrivateKey,fp,eckey);
	}
  
int i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey)
	{
	return ASN1_i2d_fp_of(EC_KEY,i2d_ECPrivateKey,fp,eckey);
	}
#endif
EC_KEY *d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey)
	{
	return ASN1_d2i_bio_of(EC_KEY,EC_KEY_new,d2i_EC_PUBKEY,bp,eckey);
	}
  
int i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *ecdsa)
	{
	return ASN1_i2d_bio_of(EC_KEY,i2d_EC_PUBKEY,bp,ecdsa);
	}

EC_KEY *d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)
	{
	return ASN1_d2i_bio_of(EC_KEY,EC_KEY_new,d2i_ECPrivateKey,bp,eckey);
	}
  
int i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey)
	{
	return ASN1_i2d_bio_of(EC_KEY,i2d_ECPrivateKey,bp,eckey);
	}
#endif


d373 2
a374 1
	return ASN1_d2i_fp_of(X509_SIG,X509_SIG_new,d2i_X509_SIG,fp,p8);
d379 1
a379 1
	return ASN1_i2d_fp_of(X509_SIG,i2d_X509_SIG,fp,p8);
d385 2
a386 1
	return ASN1_d2i_bio_of(X509_SIG,X509_SIG_new,d2i_X509_SIG,bp,p8);
d391 1
a391 1
	return ASN1_i2d_bio_of(X509_SIG,i2d_X509_SIG,bp,p8);
d398 4
a401 2
	return ASN1_d2i_fp_of(PKCS8_PRIV_KEY_INFO,PKCS8_PRIV_KEY_INFO_new,
			      d2i_PKCS8_PRIV_KEY_INFO,fp,p8inf);
d406 1
a406 2
	return ASN1_i2d_fp_of(PKCS8_PRIV_KEY_INFO,i2d_PKCS8_PRIV_KEY_INFO,fp,
			      p8inf);
d422 1
a422 1
	return ASN1_i2d_fp_of(EVP_PKEY,i2d_PrivateKey,fp,pkey);
d427 2
a428 1
	return ASN1_d2i_fp_of(EVP_PKEY,EVP_PKEY_new,d2i_AutoPrivateKey,fp,a);
d433 1
a433 1
	return ASN1_i2d_fp_of(EVP_PKEY,i2d_PUBKEY,fp,pkey);
d438 2
a439 1
	return ASN1_d2i_fp_of(EVP_PKEY,EVP_PKEY_new,d2i_PUBKEY,fp,a);
d447 4
a450 2
	return ASN1_d2i_bio_of(PKCS8_PRIV_KEY_INFO,PKCS8_PRIV_KEY_INFO_new,
			    d2i_PKCS8_PRIV_KEY_INFO,bp,p8inf);
d455 1
a455 2
	return ASN1_i2d_bio_of(PKCS8_PRIV_KEY_INFO,i2d_PKCS8_PRIV_KEY_INFO,bp,
			       p8inf);
d471 1
a471 1
	return ASN1_i2d_bio_of(EVP_PKEY,i2d_PrivateKey,bp,pkey);
d476 2
a477 1
	return ASN1_d2i_bio_of(EVP_PKEY,EVP_PKEY_new,d2i_AutoPrivateKey,bp,a);
d482 1
a482 1
	return ASN1_i2d_bio_of(EVP_PKEY,i2d_PUBKEY,bp,pkey);
d487 2
a488 1
	return ASN1_d2i_bio_of(EVP_PKEY,EVP_PKEY_new,d2i_PUBKEY,bp,a);
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d60 1
d84 6
@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@a92 1
	x->cert_info->enc.modified = 1;
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@a97 7
int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)
	{
	return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CINF),
		x->cert_info->signature,
		x->sig_alg, x->signature, x->cert_info, ctx);
	}

a103 6
int X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx)
	{
	return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_REQ_INFO),
		x->sig_alg, NULL, x->signature, x->req_info, ctx);
	}

a108 6
	}

int X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx)
	{
	return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CRL_INFO),
		x->crl->sig_alg, x->sig_alg, x->signature, x->crl, ctx);
@


1.1.1.8
log
@Import OpenSSL 1.0.1g
@
text
@a99 1
	x->cert_info->enc.modified = 1;
a125 1
	x->crl->enc.modified = 1;
@


