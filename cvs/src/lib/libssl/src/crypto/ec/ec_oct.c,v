head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	butholakala:1.1.1.1
	openssl_1_0_1_g:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.8
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	openssl_1_0_1_c:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.3;
commitid	nzndm3zqPmFurSaK;

1.3
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.05.06.03.56.27;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@/* $OpenBSD: ec_oct.c,v 1.3 2014/06/12 15:49:29 deraadt Exp $ */
/*
 * Originally written by Bodo Moeller for the OpenSSL project.
 */
/* ====================================================================
 * Copyright (c) 1998-2003 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * Binary polynomial ECC support in OpenSSL originally developed by
 * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
 */

#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/err.h>
#include <openssl/opensslv.h>

#include "ec_lcl.h"

int 
EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP * group, EC_POINT * point,
    const BIGNUM * x, int y_bit, BN_CTX * ctx)
{
	if (group->meth->point_set_compressed_coordinates == 0
	    && !(group->meth->flags & EC_FLAGS_DEFAULT_OCT)) {
		ECerr(EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;
	}
	if (group->meth != point->meth) {
		ECerr(EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP, EC_R_INCOMPATIBLE_OBJECTS);
		return 0;
	}
	if (group->meth->flags & EC_FLAGS_DEFAULT_OCT) {
		if (group->meth->field_type == NID_X9_62_prime_field)
			return ec_GFp_simple_set_compressed_coordinates(
			    group, point, x, y_bit, ctx);
		else
#ifdef OPENSSL_NO_EC2M
		{
			ECerr(EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP, EC_R_GF2M_NOT_SUPPORTED);
			return 0;
		}
#else
			return ec_GF2m_simple_set_compressed_coordinates(
			    group, point, x, y_bit, ctx);
#endif
	}
	return group->meth->point_set_compressed_coordinates(group, point, x, y_bit, ctx);
}

#ifndef OPENSSL_NO_EC2M
int 
EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP * group, EC_POINT * point,
    const BIGNUM * x, int y_bit, BN_CTX * ctx)
{
	if (group->meth->point_set_compressed_coordinates == 0
	    && !(group->meth->flags & EC_FLAGS_DEFAULT_OCT)) {
		ECerr(EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;
	}
	if (group->meth != point->meth) {
		ECerr(EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M, EC_R_INCOMPATIBLE_OBJECTS);
		return 0;
	}
	if (group->meth->flags & EC_FLAGS_DEFAULT_OCT) {
		if (group->meth->field_type == NID_X9_62_prime_field)
			return ec_GFp_simple_set_compressed_coordinates(
			    group, point, x, y_bit, ctx);
		else
			return ec_GF2m_simple_set_compressed_coordinates(
			    group, point, x, y_bit, ctx);
	}
	return group->meth->point_set_compressed_coordinates(group, point, x, y_bit, ctx);
}
#endif

size_t 
EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *point,
    point_conversion_form_t form,
    unsigned char *buf, size_t len, BN_CTX *ctx)
{
	if (group->meth->point2oct == 0
	    && !(group->meth->flags & EC_FLAGS_DEFAULT_OCT)) {
		ECerr(EC_F_EC_POINT_POINT2OCT, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;
	}
	if (group->meth != point->meth) {
		ECerr(EC_F_EC_POINT_POINT2OCT, EC_R_INCOMPATIBLE_OBJECTS);
		return 0;
	}
	if (group->meth->flags & EC_FLAGS_DEFAULT_OCT) {
		if (group->meth->field_type == NID_X9_62_prime_field)
			return ec_GFp_simple_point2oct(group, point,
			    form, buf, len, ctx);
		else
#ifdef OPENSSL_NO_EC2M
		{
			ECerr(EC_F_EC_POINT_POINT2OCT, EC_R_GF2M_NOT_SUPPORTED);
			return 0;
		}
#else
			return ec_GF2m_simple_point2oct(group, point,
			    form, buf, len, ctx);
#endif
	}
	return group->meth->point2oct(group, point, form, buf, len, ctx);
}


int 
EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *point,
    const unsigned char *buf, size_t len, BN_CTX *ctx)
{
	if (group->meth->oct2point == 0 &&
	    !(group->meth->flags & EC_FLAGS_DEFAULT_OCT)) {
		ECerr(EC_F_EC_POINT_OCT2POINT, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
		return 0;
	}
	if (group->meth != point->meth) {
		ECerr(EC_F_EC_POINT_OCT2POINT, EC_R_INCOMPATIBLE_OBJECTS);
		return 0;
	}
	if (group->meth->flags & EC_FLAGS_DEFAULT_OCT) {
		if (group->meth->field_type == NID_X9_62_prime_field)
			return ec_GFp_simple_oct2point(group, point,
			    buf, len, ctx);
		else
#ifdef OPENSSL_NO_EC2M
		{
			ECerr(EC_F_EC_POINT_OCT2POINT, EC_R_GF2M_NOT_SUPPORTED);
			return 0;
		}
#else
			return ec_GF2m_simple_oct2point(group, point,
			    buf, len, ctx);
#endif
	}
	return group->meth->oct2point(group, point, buf, len, ctx);
}
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d65 2
@


1.2
log
@knf approximation
@
text
@d1 1
a1 1
/* crypto/ec/ec_lib.c */
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d60 1
a60 1
 * Binary polynomial ECC support in OpenSSL originally developed by 
d71 4
a74 3
int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group, EC_POINT *point,
	const BIGNUM *x, int y_bit, BN_CTX *ctx)
	{
d76 1
a76 2
		&& !(group->meth->flags & EC_FLAGS_DEFAULT_OCT))
		{
d79 2
a80 3
		}
	if (group->meth != point->meth)
		{
d83 2
a84 3
		}
	if(group->meth->flags & EC_FLAGS_DEFAULT_OCT)
		{
d87 1
a87 1
					group, point, x, y_bit, ctx);
d90 1
a90 1
			{
d93 1
a93 1
			}
d96 1
a96 1
					group, point, x, y_bit, ctx);
d98 1
a98 1
		}
d100 1
a100 1
	}
d103 4
a106 3
int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group, EC_POINT *point,
	const BIGNUM *x, int y_bit, BN_CTX *ctx)
	{
d108 1
a108 2
		&& !(group->meth->flags & EC_FLAGS_DEFAULT_OCT))
		{
d111 2
a112 3
		}
	if (group->meth != point->meth)
		{
d115 2
a116 3
		}
	if(group->meth->flags & EC_FLAGS_DEFAULT_OCT)
		{
d119 1
a119 1
					group, point, x, y_bit, ctx);
d122 2
a123 2
					group, point, x, y_bit, ctx);
		}
d125 1
a125 1
	}
d128 5
a132 3
size_t EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *point, point_conversion_form_t form,
        unsigned char *buf, size_t len, BN_CTX *ctx)
	{
d134 1
a134 2
		&& !(group->meth->flags & EC_FLAGS_DEFAULT_OCT))
		{
d137 2
a138 3
		}
	if (group->meth != point->meth)
		{
d141 2
a142 3
		}
	if(group->meth->flags & EC_FLAGS_DEFAULT_OCT)
		{
d145 1
a145 1
							form, buf, len, ctx);
d148 1
a148 1
			{
d151 1
a151 1
			}
d154 1
a154 1
							form, buf, len, ctx);
d156 1
a156 2
		}
			
d158 1
a158 1
	}
d161 6
a166 6
int EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *point,
        const unsigned char *buf, size_t len, BN_CTX *ctx)
	{
	if (group->meth->oct2point == 0
		&& !(group->meth->flags & EC_FLAGS_DEFAULT_OCT))
		{
d169 2
a170 3
		}
	if (group->meth != point->meth)
		{
d173 2
a174 3
		}
	if(group->meth->flags & EC_FLAGS_DEFAULT_OCT)
		{
d177 1
a177 1
							buf, len, ctx);
d180 1
a180 1
			{
d183 1
a183 1
			}
d186 1
a186 1
							buf, len, ctx);
d188 1
a188 1
		}
d190 1
a190 2
	}

@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@
