head	1.17;
access;
symbols
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.4
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.5
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2016.09.03.11.33.36;	author beck;	state dead;
branches;
next	1.16;
commitid	HnbXxsegngek41U2;

1.16
date	2016.07.05.02.54.35;	author bcook;	state Exp;
branches;
next	1.15;
commitid	NHesUMO050EuY7RN;

1.15
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.14;
commitid	gtwLkRyWx0K1HbzX;

1.14
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.13;
commitid	G74O1dmRukKsW7IJ;

1.13
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.12;
commitid	yQEL1wOWIearrW15;

1.12
date	2014.07.09.13.30.00;	author miod;	state Exp;
branches;
next	1.11;
commitid	23nxFyhOKACsmsTV;

1.11
date	2014.07.09.13.26.47;	author miod;	state Exp;
branches;
next	1.10;
commitid	g5VUmsrdRHmu7cCJ;

1.10
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.09.12.15.41;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.04.14.19.08;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.20;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.01;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.03;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.14;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.08;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.54;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: dh_check.c,v 1.16 2016/07/05 02:54:35 bcook Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/bn.h>
#include <openssl/dh.h>

/*
 * Check that p is a safe prime and
 * if g is 2, 3 or 5, check that it is a suitable generator
 * where
 * for 2, p mod 24 == 11
 * for 3, p mod 12 == 5
 * for 5, p mod 10 == 3 or 7
 * should hold.
 */

int
DH_check(const DH *dh, int *ret)
{
	int ok = 0;
	BN_CTX *ctx = NULL;
	BN_ULONG l;
	BIGNUM *q = NULL;

	*ret = 0;
	ctx = BN_CTX_new();
	if (ctx == NULL)
		goto err;
	q = BN_new();
	if (q == NULL)
		goto err;

	if (BN_is_word(dh->g, DH_GENERATOR_2)) {
		l = BN_mod_word(dh->p, 24);
		if (l == (BN_ULONG)-1)
			goto err;
		if (l != 11)
			*ret |= DH_NOT_SUITABLE_GENERATOR;
	} else if (BN_is_word(dh->g, DH_GENERATOR_5)) {
		l = BN_mod_word(dh->p, 10);
		if (l == (BN_ULONG)-1)
			goto err;
		if (l != 3 && l != 7)
			*ret |= DH_NOT_SUITABLE_GENERATOR;
	} else
		*ret |= DH_UNABLE_TO_CHECK_GENERATOR;

	if (!BN_is_prime_ex(dh->p, BN_prime_checks, ctx, NULL))
		*ret |= DH_CHECK_P_NOT_PRIME;
	else {
		if (!BN_rshift1(q, dh->p))
			goto err;
		if (!BN_is_prime_ex(q, BN_prime_checks, ctx, NULL))
			*ret |= DH_CHECK_P_NOT_SAFE_PRIME;
	}
	ok = 1;
err:
	BN_CTX_free(ctx);
	BN_free(q);
	return ok;
}

int
DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *ret)
{
	BIGNUM *q = NULL;

	*ret = 0;
	q = BN_new();
	if (q == NULL)
		return 0;
	BN_set_word(q, 1);
	if (BN_cmp(pub_key, q) <= 0)
		*ret |= DH_CHECK_PUBKEY_TOO_SMALL;
	BN_copy(q, dh->p);
	BN_sub_word(q, 1);
	if (BN_cmp(pub_key, q) >= 0)
		*ret |= DH_CHECK_PUBKEY_TOO_LARGE;

	BN_free(q);
	return 1;
}
@


1.16
log
@On systems where we do not have BN_ULLONG defined (most 64-bit systems),
BN_mod_word() can return incorrect results if the supplied modulus is
too big, so we need to fall back to BN_div_word.

Now that BN_mod_word may fail, handle errors properly update the man page.

Thanks to Brian Smith for pointing out these fixes from BoringSSL:

https://boringssl.googlesource.com/boringssl/+/67cb49d045f04973ddba0f92fe8a8ad483c7da89
https://boringssl.googlesource.com/boringssl/+/44bedc348d9491e63c7ed1438db100a4b8a830be

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_check.c,v 1.15 2015/02/07 13:19:15 doug Exp $ */
@


1.15
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_check.c,v 1.14 2014/07/12 16:03:37 miod Exp $ */
d92 2
d98 2
@


1.14
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_check.c,v 1.13 2014/07/11 08:44:48 jsing Exp $ */
a93 6
#if 0
	} else if (BN_is_word(dh->g, DH_GENERATOR_3)) {
		l = BN_mod_word(dh->p, 12);
		if (l != 5)
			*ret |= DH_NOT_SUITABLE_GENERATOR;
#endif
@


1.13
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_check.c,v 1.12 2014/07/09 13:30:00 miod Exp $ */
d117 2
a118 4
	if (ctx != NULL)
		BN_CTX_free(ctx);
	if (q != NULL)
		BN_free(q);
@


1.12
log
@Simplify error path of DH_check_pub_key()
@
text
@d1 1
a1 1
/* $OpenBSD: dh_check.c,v 1.11 2014/07/09 13:26:47 miod Exp $ */
d60 1
a60 1
#include "cryptlib.h"
@


1.11
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dh_check.c,v 1.10 2014/06/12 15:49:28 deraadt Exp $ */
a126 1
	int ok = 0;
d132 1
a132 1
		goto err;
d141 2
a142 5
	ok = 1;
err:
	if (q != NULL)
		BN_free(q);
	return ok;
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 2
a65 1
/* Check that p is a safe prime and
d74 5
a78 4
int DH_check(const DH *dh, int *ret)
	{
	int ok=0;
	BN_CTX *ctx=NULL;
d80 1
a80 1
	BIGNUM *q=NULL;
d82 12
a93 11
	*ret=0;
	ctx=BN_CTX_new();
	if (ctx == NULL) goto err;
	q=BN_new();
	if (q == NULL) goto err;

	if (BN_is_word(dh->g,DH_GENERATOR_2))
		{
		l=BN_mod_word(dh->p,24);
		if (l != 11) *ret|=DH_NOT_SUITABLE_GENERATOR;
		}
d95 4
a98 5
	else if (BN_is_word(dh->g,DH_GENERATOR_3))
		{
		l=BN_mod_word(dh->p,12);
		if (l != 5) *ret|=DH_NOT_SUITABLE_GENERATOR;
		}
d100 16
a115 18
	else if (BN_is_word(dh->g,DH_GENERATOR_5))
		{
		l=BN_mod_word(dh->p,10);
		if ((l != 3) && (l != 7))
			*ret|=DH_NOT_SUITABLE_GENERATOR;
		}
	else
		*ret|=DH_UNABLE_TO_CHECK_GENERATOR;

	if (!BN_is_prime_ex(dh->p,BN_prime_checks,ctx,NULL))
		*ret|=DH_CHECK_P_NOT_PRIME;
	else
		{
		if (!BN_rshift1(q,dh->p)) goto err;
		if (!BN_is_prime_ex(q,BN_prime_checks,ctx,NULL))
			*ret|=DH_CHECK_P_NOT_SAFE_PRIME;
		}
	ok=1;
d117 24
a140 20
	if (ctx != NULL) BN_CTX_free(ctx);
	if (q != NULL) BN_free(q);
	return(ok);
	}

int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *ret)
	{
	int ok=0;
	BIGNUM *q=NULL;

	*ret=0;
	q=BN_new();
	if (q == NULL) goto err;
	BN_set_word(q,1);
	if (BN_cmp(pub_key,q)<=0)
		*ret|=DH_CHECK_PUBKEY_TOO_SMALL;
	BN_copy(q,dh->p);
	BN_sub_word(q,1);
	if (BN_cmp(pub_key,q)>=0)
		*ret|=DH_CHECK_PUBKEY_TOO_LARGE;
d144 4
a147 3
	if (q != NULL) BN_free(q);
	return(ok);
	}
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d1 1
a1 1
/* crypto/dh/dh_check.c */
@


1.8
log
@resolve conflicts
@
text
@a72 2
#ifndef OPENSSL_FIPS

d131 1
a131 1
	if (BN_cmp(pub_key,q) <= 0)
d135 1
a135 1
	if (BN_cmp(pub_key,q) >= 0)
a142 2

#endif
@


1.7
log
@resolve conflicts
@
text
@d73 2
d145 2
@


1.6
log
@backport checks for degenerate Diffie-Hellman public exponents from
OpenSSL-0.9.8a, where they were added without a corresponding patch to
0.9.7 or an advisory!  ok theo@@ markus@@
@
text
@d65 1
a65 1
 * if g is 2, 3 or 5, check that is is a suitable generator
a72 2
#ifndef OPENSSL_FIPS

d107 1
a107 1
	if (!BN_is_prime(dh->p,BN_prime_checks,NULL,ctx,NULL))
d112 1
a112 1
		if (!BN_is_prime(q,BN_prime_checks,NULL,ctx,NULL))
a142 2

#endif
@


1.5
log
@resolve conflicts
@
text
@d124 22
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d73 2
d123 2
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d73 1
a73 1
int DH_check(DH *dh, int *ret)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d64 1
a64 1
/* Check that p is a strong prime and
d91 2
a92 1
/*	else if (BN_is_word(dh->g,DH_GENERATOR_3))
d96 2
a97 1
		}*/
d113 1
a113 1
			*ret|=DH_CHECK_P_NOT_STRONG_PRIME;
@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "bn.h"
#include "dh.h"
d73 1
a73 3
int DH_check(dh,ret)
DH *dh;
int *ret;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 2
#include <openssl/bn.h>
#include <openssl/dh.h>
d64 1
a64 1
/* Check that p is a safe prime and
d73 3
a75 1
int DH_check(const DH *dh, int *ret)
d93 1
a93 2
#if 0
	else if (BN_is_word(dh->g,DH_GENERATOR_3))
d97 1
a97 2
		}
#endif
d113 1
a113 1
			*ret|=DH_CHECK_P_NOT_SAFE_PRIME;
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a72 2
#ifndef OPENSSL_FIPS

a120 2

#endif
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d65 1
a65 1
 * if g is 2, 3 or 5, check that it is a suitable generator
d73 2
d109 1
a109 1
	if (!BN_is_prime_ex(dh->p,BN_prime_checks,ctx,NULL))
d114 1
a114 1
		if (!BN_is_prime_ex(q,BN_prime_checks,ctx,NULL))
d124 1
a124 21
int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *ret)
	{
	int ok=0;
	BIGNUM *q=NULL;

	*ret=0;
	q=BN_new();
	if (q == NULL) goto err;
	BN_set_word(q,1);
	if (BN_cmp(pub_key,q) <= 0)
		*ret|=DH_CHECK_PUBKEY_TOO_SMALL;
	BN_copy(q,dh->p);
	BN_sub_word(q,1);
	if (BN_cmp(pub_key,q) >= 0)
		*ret|=DH_CHECK_PUBKEY_TOO_LARGE;

	ok = 1;
err:
	if (q != NULL) BN_free(q);
	return(ok);
	}
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@a72 2
#ifndef OPENSSL_FIPS

a142 2

#endif
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d73 2
d133 1
a133 1
	if (BN_cmp(pub_key,q)<=0)
d137 1
a137 1
	if (BN_cmp(pub_key,q)>=0)
d145 2
@


