head	1.10;
access;
symbols
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.6
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	butholakala:1.1.1.1
	openssl_1_0_1_g:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	openssl_1_0_1_c:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.6
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.8
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	openssh_1_0_0_a:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.09.03.11.33.36;	author beck;	state dead;
branches;
next	1.9;
commitid	HnbXxsegngek41U2;

1.9
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.7;
commitid	id8dTrTMtnTn4fqt;

1.7
date	2014.07.09.13.26.47;	author miod;	state Exp;
branches;
next	1.6;
commitid	g5VUmsrdRHmu7cCJ;

1.6
date	2014.06.12.20.40.57;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	UmuMloBn2KTi29qq;

1.5
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.22.21.12.16;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: dh_pmeth.c,v 1.9 2014/07/11 08:44:48 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2006.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <limits.h>
#include <stdio.h>
#include <string.h>

#include <openssl/asn1t.h>
#include <openssl/bn.h>
#include <openssl/dh.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/x509.h>

#include "evp_locl.h"

/* DH pkey context structure */

typedef struct {
	/* Parameter gen parameters */
	int prime_len;
	int generator;
	int use_dsa;
	/* Keygen callback info */
	int gentmp[2];
	/* message digest */
} DH_PKEY_CTX;

static int
pkey_dh_init(EVP_PKEY_CTX *ctx)
{
	DH_PKEY_CTX *dctx;

	dctx = malloc(sizeof(DH_PKEY_CTX));
	if (!dctx)
		return 0;
	dctx->prime_len = 1024;
	dctx->generator = 2;
	dctx->use_dsa = 0;

	ctx->data = dctx;
	ctx->keygen_info = dctx->gentmp;
	ctx->keygen_info_count = 2;
	
	return 1;
}

static int
pkey_dh_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
{
	DH_PKEY_CTX *dctx, *sctx;

	if (!pkey_dh_init(dst))
		return 0;
       	sctx = src->data;
	dctx = dst->data;
	dctx->prime_len = sctx->prime_len;
	dctx->generator = sctx->generator;
	dctx->use_dsa = sctx->use_dsa;
	return 1;
}

static void
pkey_dh_cleanup(EVP_PKEY_CTX *ctx)
{
	DH_PKEY_CTX *dctx = ctx->data;

	free(dctx);
}

static int
pkey_dh_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
{
	DH_PKEY_CTX *dctx = ctx->data;

	switch (type) {
	case EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN:
		if (p1 < 256)
			return -2;
		dctx->prime_len = p1;
		return 1;

	case EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR:
		dctx->generator = p1;
		return 1;

	case EVP_PKEY_CTRL_PEER_KEY:
		/* Default behaviour is OK */
		return 1;

	default:
		return -2;
	}
}
			
static int
pkey_dh_ctrl_str(EVP_PKEY_CTX *ctx, const char *type, const char *value)
{
 	long lval;
	char *ep;
	int len;

	if (!strcmp(type, "dh_paramgen_prime_len")) {
		errno = 0;
		lval = strtol(value, &ep, 10);
		if (value[0] == '\0' || *ep != '\0')
			goto not_a_number;
		if ((errno == ERANGE &&
		    (lval == LONG_MAX || lval == LONG_MIN)) ||
		    (lval > INT_MAX || lval < INT_MIN))
			goto out_of_range;
		len = lval;
		return EVP_PKEY_CTX_set_dh_paramgen_prime_len(ctx, len);
	} else if (!strcmp(type, "dh_paramgen_generator")) {
		errno = 0;
		lval = strtol(value, &ep, 10);
		if (value[0] == '\0' || *ep != '\0')
			goto not_a_number;
		if ((errno == ERANGE &&
		    (lval == LONG_MAX || lval == LONG_MIN)) ||
		    (lval > INT_MAX || lval < INT_MIN))
			goto out_of_range;
		len = lval;
		return EVP_PKEY_CTX_set_dh_paramgen_generator(ctx, len);
	}

not_a_number:
out_of_range:
	return -2;
}

static int
pkey_dh_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
{
	DH *dh = NULL;
	DH_PKEY_CTX *dctx = ctx->data;
	BN_GENCB *pcb, cb;
	int ret;

	if (ctx->pkey_gencb) {
		pcb = &cb;
		evp_pkey_set_cb_translate(pcb, ctx);
	} else
		pcb = NULL;
	dh = DH_new();
	if (!dh)
		return 0;
	ret = DH_generate_parameters_ex(dh, dctx->prime_len, dctx->generator,
	    pcb);
	if (ret)
		EVP_PKEY_assign_DH(pkey, dh);
	else
		DH_free(dh);
	return ret;
}

static int
pkey_dh_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
{
	DH *dh = NULL;

	if (ctx->pkey == NULL) {
		DHerr(DH_F_PKEY_DH_KEYGEN, DH_R_NO_PARAMETERS_SET);
		return 0;
	}
	dh = DH_new();
	if (!dh)
		return 0;
	EVP_PKEY_assign_DH(pkey, dh);
	/* Note: if error return, pkey is freed by parent routine */
	if (!EVP_PKEY_copy_parameters(pkey, ctx->pkey))
		return 0;
	return DH_generate_key(pkey->pkey.dh);
}

static int
pkey_dh_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)
{
	int ret;

	if (!ctx->pkey || !ctx->peerkey) {
		DHerr(DH_F_PKEY_DH_DERIVE, DH_R_KEYS_NOT_SET);
		return 0;
	}
	ret = DH_compute_key(key, ctx->peerkey->pkey.dh->pub_key,
	    ctx->pkey->pkey.dh);
	if (ret < 0)
		return ret;
	*keylen = ret;
	return 1;
}

const EVP_PKEY_METHOD dh_pkey_meth = {
	.pkey_id = EVP_PKEY_DH,
	.flags = EVP_PKEY_FLAG_AUTOARGLEN,

	.init = pkey_dh_init,
	.copy = pkey_dh_copy,
	.cleanup = pkey_dh_cleanup,

	.paramgen = pkey_dh_paramgen,

	.keygen = pkey_dh_keygen,

	.derive = pkey_dh_derive,

	.ctrl = pkey_dh_ctrl,
	.ctrl_str = pkey_dh_ctrl_str
};
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_pmeth.c,v 1.8 2014/07/10 13:58:22 jsing Exp $ */
@


1.8
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_pmeth.c,v 1.7 2014/07/09 13:26:47 miod Exp $ */
a62 1
#include "cryptlib.h"
d64 4
d69 1
a69 3
#include <openssl/evp.h>
#include <openssl/dh.h>
#include <openssl/bn.h>
@


1.7
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dh_pmeth.c,v 1.6 2014/06/12 20:40:57 deraadt Exp $ */
d59 1
d61 2
a62 1
#include <limits.h>
@


1.6
log
@replace atoi() calls with strtol().  Follow the idiomatic pattern in our
manual page strictly.  Return -2 if the strings are not strict numbers.

The numbers remain in the range of "int".  Range checking for these parameters
is done later in the pkey_*_ctl() functions, or sometimes in functions much
further downstream... but not always!!!
ok millert miod mikeb
@
text
@d1 1
a1 1
/* $OpenBSD: dh_pmeth.c,v 1.5 2014/06/12 15:49:28 deraadt Exp $ */
d71 1
a71 2
typedef struct
	{
d79 1
a79 1
	} DH_PKEY_CTX;
d81 3
a83 2
static int pkey_dh_init(EVP_PKEY_CTX *ctx)
	{
d85 1
d98 1
a98 1
	}
d100 3
a102 2
static int pkey_dh_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
	{
d104 1
d113 1
a113 1
	}
d115 3
a117 2
static void pkey_dh_cleanup(EVP_PKEY_CTX *ctx)
	{
d119 1
d121 1
a121 1
	}
d123 3
a125 2
static int pkey_dh_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
	{
d127 3
a129 3
	switch (type)
		{
		case EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN:
d135 1
a135 1
		case EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR:
d139 1
a139 1
		case EVP_PKEY_CTRL_PEER_KEY:
d143 1
a143 1
		default:
a144 2

		}
d146 1
a146 1

d148 3
a150 3
static int pkey_dh_ctrl_str(EVP_PKEY_CTX *ctx,
			const char *type, const char *value)
	{
d160 2
a161 1
		if ((errno == ERANGE && (lval == LONG_MAX || lval == LONG_MIN)) ||
d166 1
a166 2
	}
	if (!strcmp(type, "dh_paramgen_generator")) {
d171 2
a172 1
		if ((errno == ERANGE && (lval == LONG_MAX || lval == LONG_MIN)) ||
d184 3
a186 2
static int pkey_dh_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
	{
d191 2
a192 2
	if (ctx->pkey_gencb)
		{
d195 1
a195 2
		}
	else
d200 2
a201 2
	ret = DH_generate_parameters_ex(dh,
					dctx->prime_len, dctx->generator, pcb);
d207 1
a207 1
	}
d209 3
a211 2
static int pkey_dh_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
	{
d213 2
a214 2
	if (ctx->pkey == NULL)
		{
d217 1
a217 1
		}
d226 1
a226 1
	}
d228 3
a230 2
static int pkey_dh_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)
	{
d232 2
a233 2
	if (!ctx->pkey || !ctx->peerkey)
		{
d236 1
a236 1
		}
d238 1
a238 1
							ctx->pkey->pkey.dh);
d243 1
a243 1
	}
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
d147 13
a159 4
	if (!strcmp(type, "dh_paramgen_prime_len"))
		{
		int len;
		len = atoi(value);
d161 10
a170 5
		}
	if (!strcmp(type, "dh_paramgen_generator"))
		{
		int len;
		len = atoi(value);
d172 4
a175 1
		}
d177 1
a177 1
	}
@


1.4
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@d1 1
@


1.3
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d113 1
a113 2
	if (dctx)
		free(dctx);
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d220 3
a222 7
const EVP_PKEY_METHOD dh_pkey_meth = 
	{
	EVP_PKEY_DH,
	EVP_PKEY_FLAG_AUTOARGLEN,
	pkey_dh_init,
	pkey_dh_copy,
	pkey_dh_cleanup,
d224 3
a226 2
	0,
	pkey_dh_paramgen,
d228 1
a228 2
	0,
	pkey_dh_keygen,
d230 1
a230 2
	0,
	0,
d232 1
a232 2
	0,
	0,
d234 3
a236 15
	0,0,

	0,0,0,0,

	0,0,

	0,0,

	0,
	pkey_dh_derive,

	pkey_dh_ctrl,
	pkey_dh_ctrl_str

	};
@


1.1
log
@Initial revision
@
text
@d83 1
a83 1
	dctx = OPENSSL_malloc(sizeof(DH_PKEY_CTX));
d114 1
a114 1
		OPENSSL_free(dctx);
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@
