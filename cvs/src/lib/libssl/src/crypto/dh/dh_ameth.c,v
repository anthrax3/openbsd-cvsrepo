head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	butholakala:1.1.1.2
	openssl_1_0_1_g:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.8
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.4
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.2
	OPENBSD_5_3_BASE:1.1.1.2
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.1.1.1.0.6
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.8
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	openssh_1_0_0_a:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.01.08.01.44.29;	author doug;	state Exp;
branches;
next	1.12;
commitid	Df6aGSQt5P1s3JXf;

1.12
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.11;
commitid	G74O1dmRukKsW7IJ;

1.11
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.07.09.22.55.17;	author tedu;	state Exp;
branches;
next	1.9;
commitid	5JdGfnLK1lLuGWd1;

1.9
date	2014.07.09.13.26.47;	author miod;	state Exp;
branches;
next	1.8;
commitid	g5VUmsrdRHmu7cCJ;

1.8
date	2014.06.30.14.15.34;	author tedu;	state Exp;
branches;
next	1.7;
commitid	V0smKYP9a8rIIe5o;

1.7
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.05.30.06.24.16;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.22.21.12.16;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.38;	author djm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Avoid a double-free in an error path.

ok jsing@@ beck@@
@
text
@/* $OpenBSD: dh_ameth.c,v 1.12 2014/07/12 16:03:37 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2006.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/asn1.h>
#include <openssl/bn.h>
#include <openssl/dh.h>
#include <openssl/err.h>
#include <openssl/x509.h>

#include "asn1_locl.h"

static void
int_dh_free(EVP_PKEY *pkey)
{
	DH_free(pkey->pkey.dh);
}

static int
dh_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
{
	const unsigned char *p, *pm;
	int pklen, pmlen;
	int ptype;
	void *pval;
	ASN1_STRING *pstr;
	X509_ALGOR *palg;
	ASN1_INTEGER *public_key = NULL;
	DH *dh = NULL;

	if (!X509_PUBKEY_get0_param(NULL, &p, &pklen, &palg, pubkey))
		return 0;
	X509_ALGOR_get0(NULL, &ptype, &pval, palg);

	if (ptype != V_ASN1_SEQUENCE) {
		DHerr(DH_F_DH_PUB_DECODE, DH_R_PARAMETER_ENCODING_ERROR);
		goto err;
	}

	pstr = pval;	
	pm = pstr->data;
	pmlen = pstr->length;

	if (!(dh = d2i_DHparams(NULL, &pm, pmlen))) {
		DHerr(DH_F_DH_PUB_DECODE, DH_R_DECODE_ERROR);
		goto err;
	}

	if (!(public_key=d2i_ASN1_INTEGER(NULL, &p, pklen))) {
		DHerr(DH_F_DH_PUB_DECODE, DH_R_DECODE_ERROR);
		goto err;
	}

	/* We have parameters now set public key */
	if (!(dh->pub_key = ASN1_INTEGER_to_BN(public_key, NULL))) {
		DHerr(DH_F_DH_PUB_DECODE, DH_R_BN_DECODE_ERROR);
		goto err;
	}

	ASN1_INTEGER_free(public_key);
	EVP_PKEY_assign_DH(pkey, dh);
	return 1;

err:
	if (public_key)
		ASN1_INTEGER_free(public_key);
	DH_free(dh);
	return 0;
}

static int
dh_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
{
	DH *dh;
	int ptype;
	unsigned char *penc = NULL;
	int penclen;
	ASN1_STRING *str;
	ASN1_INTEGER *pub_key = NULL;

	dh=pkey->pkey.dh;

	str = ASN1_STRING_new();
	if (str == NULL) {
		DHerr(DH_F_DH_PUB_ENCODE, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	str->length = i2d_DHparams(dh, &str->data);
	if (str->length <= 0) {
		DHerr(DH_F_DH_PUB_ENCODE, ERR_R_MALLOC_FAILURE);
		goto err;
	}
	ptype = V_ASN1_SEQUENCE;

	pub_key = BN_to_ASN1_INTEGER(dh->pub_key, NULL);
	if (!pub_key)
		goto err;

	penclen = i2d_ASN1_INTEGER(pub_key, &penc);

	ASN1_INTEGER_free(pub_key);

	if (penclen <= 0) {
		DHerr(DH_F_DH_PUB_ENCODE, ERR_R_MALLOC_FAILURE);
		goto err;
		}

	if (X509_PUBKEY_set0_param(pk, OBJ_nid2obj(EVP_PKEY_DH), ptype,
	    (void *)str, penc, penclen))
		return 1;

err:
	free(penc);
	ASN1_STRING_free(str);

	return 0;
}

/*
 * PKCS#8 DH is defined in PKCS#11 of all places. It is similar to DH in
 * that the AlgorithmIdentifier contains the paramaters, the private key
 * is explcitly included and the pubkey must be recalculated.
 */
	
static int
dh_priv_decode(EVP_PKEY *pkey, PKCS8_PRIV_KEY_INFO *p8)
{
	const unsigned char *p, *pm;
	int pklen, pmlen;
	int ptype;
	void *pval;
	ASN1_STRING *pstr;
	X509_ALGOR *palg;
	ASN1_INTEGER *privkey = NULL;
	DH *dh = NULL;

	if (!PKCS8_pkey_get0(NULL, &p, &pklen, &palg, p8))
		return 0;

	X509_ALGOR_get0(NULL, &ptype, &pval, palg);

	if (ptype != V_ASN1_SEQUENCE)
		goto decerr;

	if (!(privkey=d2i_ASN1_INTEGER(NULL, &p, pklen)))
		goto decerr;

	pstr = pval;	
	pm = pstr->data;
	pmlen = pstr->length;
	if (!(dh = d2i_DHparams(NULL, &pm, pmlen)))
		goto decerr;
	/* We have parameters now set private key */
	if (!(dh->priv_key = ASN1_INTEGER_to_BN(privkey, NULL))) {
		DHerr(DH_F_DH_PRIV_DECODE, DH_R_BN_ERROR);
		goto dherr;
	}
	/* Calculate public key */
	if (!DH_generate_key(dh))
		goto dherr;

	EVP_PKEY_assign_DH(pkey, dh);

	ASN1_INTEGER_free(privkey);

	return 1;

decerr:
	DHerr(DH_F_DH_PRIV_DECODE, EVP_R_DECODE_ERROR);
dherr:
	DH_free(dh);
	return 0;
}

static int
dh_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
{
	ASN1_STRING *params = NULL;
	ASN1_INTEGER *prkey = NULL;
	unsigned char *dp = NULL;
	int dplen;

	params = ASN1_STRING_new();

	if (!params) {
		DHerr(DH_F_DH_PRIV_ENCODE, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	params->length = i2d_DHparams(pkey->pkey.dh, &params->data);
	if (params->length <= 0) {
		DHerr(DH_F_DH_PRIV_ENCODE,ERR_R_MALLOC_FAILURE);
		goto err;
	}
	params->type = V_ASN1_SEQUENCE;

	/* Get private key into integer */
	prkey = BN_to_ASN1_INTEGER(pkey->pkey.dh->priv_key, NULL);

	if (!prkey) {
		DHerr(DH_F_DH_PRIV_ENCODE, DH_R_BN_ERROR);
		goto err;
	}

	dplen = i2d_ASN1_INTEGER(prkey, &dp);

	ASN1_INTEGER_free(prkey);
	prkey = NULL;

	if (!PKCS8_pkey_set0(p8, OBJ_nid2obj(NID_dhKeyAgreement), 0,
	    V_ASN1_SEQUENCE, params, dp, dplen))
		goto err;

	return 1;

err:
	free(dp);
	ASN1_STRING_free(params);
	ASN1_INTEGER_free(prkey);
	return 0;
}

static void
update_buflen(const BIGNUM *b, size_t *pbuflen)
{
	size_t i;

	if (!b)
		return;
	if (*pbuflen < (i = (size_t)BN_num_bytes(b)))
		*pbuflen = i;
}

static int
dh_param_decode(EVP_PKEY *pkey, const unsigned char **pder, int derlen)
{
	DH *dh;

	if (!(dh = d2i_DHparams(NULL, pder, derlen))) {
		DHerr(DH_F_DH_PARAM_DECODE, ERR_R_DH_LIB);
		return 0;
	}
	EVP_PKEY_assign_DH(pkey, dh);
	return 1;
}

static int
dh_param_encode(const EVP_PKEY *pkey, unsigned char **pder)
{
	return i2d_DHparams(pkey->pkey.dh, pder);
}

static int
do_dh_print(BIO *bp, const DH *x, int indent, ASN1_PCTX *ctx, int ptype)
{
	unsigned char *m = NULL;
	int reason = ERR_R_BUF_LIB, ret = 0;
	size_t buf_len = 0;
	const char *ktype = NULL;
	BIGNUM *priv_key, *pub_key;

	if (ptype == 2)
		priv_key = x->priv_key;
	else
		priv_key = NULL;

	if (ptype > 0)
		pub_key = x->pub_key;
	else
		pub_key = NULL;

	update_buflen(x->p, &buf_len);

	if (buf_len == 0) {
		reason = ERR_R_PASSED_NULL_PARAMETER;
		goto err;
	}

	update_buflen(x->g, &buf_len);
	update_buflen(pub_key, &buf_len);
	update_buflen(priv_key, &buf_len);

	if (ptype == 2)
		ktype = "PKCS#3 DH Private-Key";
	else if (ptype == 1)
		ktype = "PKCS#3 DH Public-Key";
	else
		ktype = "PKCS#3 DH Parameters";

	m= malloc(buf_len + 10);
	if (m == NULL) {
		reason = ERR_R_MALLOC_FAILURE;
		goto err;
	}

	BIO_indent(bp, indent, 128);
	if (BIO_printf(bp, "%s: (%d bit)\n", ktype, BN_num_bits(x->p)) <= 0)
		goto err;
	indent += 4;

	if (!ASN1_bn_print(bp, "private-key:", priv_key, m, indent))
		goto err;
	if (!ASN1_bn_print(bp, "public-key:", pub_key, m, indent))
		goto err;

	if (!ASN1_bn_print(bp, "prime:", x->p, m, indent))
		goto err;
	if (!ASN1_bn_print(bp, "generator:", x->g, m, indent))
		goto err;
	if (x->length != 0) {
		BIO_indent(bp, indent, 128);
		if (BIO_printf(bp, "recommended-private-length: %d bits\n",
		    (int)x->length) <= 0)
			goto err;
	}

	ret = 1;
	if (0) {
err:
		DHerr(DH_F_DO_DH_PRINT,reason);
	}
	free(m);
	return(ret);
}

static int
int_dh_size(const EVP_PKEY *pkey)
{
	return DH_size(pkey->pkey.dh);
}

static int
dh_bits(const EVP_PKEY *pkey)
{
	return BN_num_bits(pkey->pkey.dh->p);
}

static int
dh_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
{
	if (BN_cmp(a->pkey.dh->p, b->pkey.dh->p) ||
	    BN_cmp(a->pkey.dh->g, b->pkey.dh->g))
		return 0;
	else
		return 1;
}

static int
dh_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
{
	BIGNUM *a;

	if ((a = BN_dup(from->pkey.dh->p)) == NULL)
		return 0;
	BN_free(to->pkey.dh->p);
	to->pkey.dh->p = a;

	if ((a = BN_dup(from->pkey.dh->g)) == NULL)
		return 0;
	BN_free(to->pkey.dh->g);
	to->pkey.dh->g = a;

	return 1;
}

static int
dh_missing_parameters(const EVP_PKEY *a)
{
	if (!a->pkey.dh->p || !a->pkey.dh->g)
		return 1;
	return 0;
}

static int
dh_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
{
	if (dh_cmp_parameters(a, b) == 0)
		return 0;
	if (BN_cmp(b->pkey.dh->pub_key, a->pkey.dh->pub_key) != 0)
		return 0;
	else
		return 1;
}

static int
dh_param_print(BIO *bp, const EVP_PKEY *pkey, int indent, ASN1_PCTX *ctx)
{
	return do_dh_print(bp, pkey->pkey.dh, indent, ctx, 0);
}

static int
dh_public_print(BIO *bp, const EVP_PKEY *pkey, int indent, ASN1_PCTX *ctx)
{
	return do_dh_print(bp, pkey->pkey.dh, indent, ctx, 1);
}

static int
dh_private_print(BIO *bp, const EVP_PKEY *pkey, int indent, ASN1_PCTX *ctx)
{
	return do_dh_print(bp, pkey->pkey.dh, indent, ctx, 2);
}

int
DHparams_print(BIO *bp, const DH *x)
{
	return do_dh_print(bp, x, 4, NULL, 0);
}

const EVP_PKEY_ASN1_METHOD dh_asn1_meth = {
	.pkey_id = EVP_PKEY_DH,
	.pkey_base_id = EVP_PKEY_DH,

	.pem_str = "DH",
	.info = "OpenSSL PKCS#3 DH method",

	.pub_decode = dh_pub_decode,
	.pub_encode = dh_pub_encode,
	.pub_cmp = dh_pub_cmp,
	.pub_print = dh_public_print,

	.priv_decode = dh_priv_decode,
	.priv_encode = dh_priv_encode,
	.priv_print = dh_private_print,

	.pkey_size = int_dh_size,
	.pkey_bits = dh_bits,

	.param_decode = dh_param_decode,
	.param_encode = dh_param_encode,
	.param_missing = dh_missing_parameters,
	.param_copy = dh_copy_parameters,
	.param_cmp = dh_cmp_parameters,
	.param_print = dh_param_print,

	.pkey_free = int_dh_free,
};
@


1.12
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_ameth.c,v 1.11 2014/07/11 08:44:48 jsing Exp $ */
d265 1
@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_ameth.c,v 1.10 2014/07/09 22:55:17 tedu Exp $ */
d123 1
a123 2
	if (dh)
		DH_free(dh);
d411 1
a411 2
	if (to->pkey.dh->p != NULL)
		BN_free(to->pkey.dh->p);
d416 1
a416 2
	if (to->pkey.dh->g != NULL)
		BN_free(to->pkey.dh->g);
@


1.10
log
@ASN1_STRING_free can handle NULL, so callers don't need to check. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: dh_ameth.c,v 1.9 2014/07/09 13:26:47 miod Exp $ */
d60 1
a60 2
#include "cryptlib.h"
#include <openssl/x509.h>
d62 1
d64 3
a66 1
#include <openssl/bn.h>
@


1.9
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dh_ameth.c,v 1.8 2014/06/30 14:15:34 tedu Exp $ */
d170 1
a170 2
	if (str)
		ASN1_STRING_free(str);
d273 2
a274 4
	if (params != NULL)
		ASN1_STRING_free(params);
	if (prkey != NULL)
		ASN1_INTEGER_free(prkey);
@


1.8
log
@simplify and unobfuscate a variable to fix a mem leak.
original diff by logan
@
text
@d1 1
a1 1
/* $OpenBSD: dh_ameth.c,v 1.7 2014/06/12 15:49:28 deraadt Exp $ */
d67 3
a69 2
static void int_dh_free(EVP_PKEY *pkey)
	{
d71 1
a71 1
	}
d73 3
a75 2
static int dh_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
	{
a82 1

d89 1
a89 2
	if (ptype != V_ASN1_SEQUENCE)
		{
d92 1
a92 1
		}
d98 1
a98 2
	if (!(dh = d2i_DHparams(NULL, &pm, pmlen)))
		{
d101 1
a101 1
		}
d103 1
a103 2
	if (!(public_key=d2i_ASN1_INTEGER(NULL, &p, pklen)))
		{
d106 1
a106 1
		}
d109 1
a109 2
	if (!(dh->pub_key = ASN1_INTEGER_to_BN(public_key, NULL)))
		{
d112 1
a112 1
		}
d118 1
a118 1
	err:
d124 1
d126 3
a128 4
	}

static int dh_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
	{
d145 1
a145 2
	if (str->length <= 0)
		{
d148 1
a148 1
		}
d159 1
a159 2
	if (penclen <= 0)
		{
d164 2
a165 2
	if (X509_PUBKEY_set0_param(pk, OBJ_nid2obj(EVP_PKEY_DH),
				ptype, (void *)str, penc, penclen))
d168 1
a168 1
	err:
d174 1
a174 2
	}

d176 2
a177 1
/* PKCS#8 DH is defined in PKCS#11 of all places. It is similar to DH in
d182 3
a184 2
static int dh_priv_decode(EVP_PKEY *pkey, PKCS8_PRIV_KEY_INFO *p8)
	{
a191 1

d200 1
a200 1
			goto decerr;
a204 1

d211 2
a212 3
	if (!(dh->priv_key = ASN1_INTEGER_to_BN(privkey, NULL)))
		{
		DHerr(DH_F_DH_PRIV_DECODE,DH_R_BN_ERROR);
d214 1
a214 1
		}
d225 1
a225 1
	decerr:
d227 1
a227 1
	dherr:
d230 1
a230 1
	}
d232 2
a233 1
static int dh_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
d242 2
a243 3
	if (!params)
		{
		DHerr(DH_F_DH_PRIV_ENCODE,ERR_R_MALLOC_FAILURE);
d245 1
a245 1
		}
d248 1
a248 2
	if (params->length <= 0)
		{
d251 1
a251 1
		}
d257 2
a258 3
	if (!prkey)
		{
		DHerr(DH_F_DH_PRIV_ENCODE,DH_R_BN_ERROR);
d260 1
a260 1
		}
d267 1
a267 1
				V_ASN1_SEQUENCE, params, dp, dplen))
d281 4
a285 3
static void update_buflen(const BIGNUM *b, size_t *pbuflen)
	{
	size_t i;
d289 2
a290 2
			*pbuflen = i;
	}
d292 3
a294 3
static int dh_param_decode(EVP_PKEY *pkey,
					const unsigned char **pder, int derlen)
	{
d296 2
a297 2
	if (!(dh = d2i_DHparams(NULL, pder, derlen)))
		{
d300 1
a300 1
		}
d303 1
a303 1
	}
d305 3
a307 2
static int dh_param_encode(const EVP_PKEY *pkey, unsigned char **pder)
	{
d309 1
a309 8
	}

static int do_dh_print(BIO *bp, const DH *x, int indent,
						ASN1_PCTX *ctx, int ptype)
	{
	unsigned char *m=NULL;
	int reason=ERR_R_BUF_LIB,ret=0;
	size_t buf_len=0;
d311 6
a317 1

d332 1
a332 2
	if (buf_len == 0)
		{
d335 1
a335 1
		}
d348 3
a350 4
	m= malloc(buf_len+10);
	if (m == NULL)
		{
		reason=ERR_R_MALLOC_FAILURE;
d352 1
a352 1
		}
d355 1
a355 1
	if (BIO_printf(bp,"%s: (%d bit)\n", ktype, BN_num_bits(x->p)) <= 0)
d359 4
a362 2
	if (!ASN1_bn_print(bp,"private-key:",priv_key,m,indent)) goto err;
	if (!ASN1_bn_print(bp,"public-key:",pub_key,m,indent)) goto err;
d364 5
a368 4
	if (!ASN1_bn_print(bp,"prime:",x->p,m,indent)) goto err;
	if (!ASN1_bn_print(bp,"generator:",x->g,m,indent)) goto err;
	if (x->length != 0)
		{
d370 4
a373 4
		if (BIO_printf(bp,"recommended-private-length: %d bits\n",
			(int)x->length) <= 0) goto err;
		}

d375 2
a376 3
	ret=1;
	if (0)
		{
d379 1
a379 1
		}
d382 1
a382 1
	}
d384 5
a388 4
static int int_dh_size(const EVP_PKEY *pkey)
	{
	return(DH_size(pkey->pkey.dh));
	}
d390 3
a392 2
static int dh_bits(const EVP_PKEY *pkey)
	{
d394 1
a394 1
	}
d396 5
a400 4
static int dh_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
	{
	if (	BN_cmp(a->pkey.dh->p,b->pkey.dh->p) ||
		BN_cmp(a->pkey.dh->g,b->pkey.dh->g))
d404 1
a404 1
	}
d406 3
a408 2
static int dh_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
	{
d411 1
a411 1
	if ((a=BN_dup(from->pkey.dh->p)) == NULL)
d415 1
a415 1
	to->pkey.dh->p=a;
d417 1
a417 1
	if ((a=BN_dup(from->pkey.dh->g)) == NULL)
d421 1
a421 1
	to->pkey.dh->g=a;
d424 1
a424 1
	}
d426 3
a428 2
static int dh_missing_parameters(const EVP_PKEY *a)
	{
d432 1
a432 1
	}
d434 3
a436 2
static int dh_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
	{
d439 1
a439 1
	if (BN_cmp(b->pkey.dh->pub_key,a->pkey.dh->pub_key) != 0)
d443 1
a443 1
	}
d445 3
a447 3
static int dh_param_print(BIO *bp, const EVP_PKEY *pkey, int indent,
							ASN1_PCTX *ctx)
	{
d449 1
a449 1
	}
d451 3
a453 3
static int dh_public_print(BIO *bp, const EVP_PKEY *pkey, int indent,
							ASN1_PCTX *ctx)
	{
d455 1
a455 1
	}
d457 3
a459 3
static int dh_private_print(BIO *bp, const EVP_PKEY *pkey, int indent,
							ASN1_PCTX *ctx)
	{
d461 1
a461 1
	}
d463 3
a465 2
int DHparams_print(BIO *bp, const DH *x)
	{
d467 1
a467 1
	}
a496 1

@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a132 1
	void *pval = NULL;
d142 5
a152 1
	pval = str;
d170 1
a170 1
				ptype, pval, penc, penclen))
d175 2
a176 2
	if (pval)
		ASN1_STRING_free(pval);
@


1.6
log
@more: no need to null check before free; ok guenther
@
text
@d1 1
@


1.5
log
@more: no need for null check before free
ok tedu guenther
@
text
@d385 1
a385 1
	if (m != NULL) free(m);
@


1.4
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@d278 1
a278 2
	if (dp != NULL)
		free(dp);
@


1.3
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d170 1
a170 2
	if (penc)
		free(penc);
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d469 28
a496 32
const EVP_PKEY_ASN1_METHOD dh_asn1_meth = 
	{
	EVP_PKEY_DH,
	EVP_PKEY_DH,
	0,

	"DH",
	"OpenSSL PKCS#3 DH method",

	dh_pub_decode,
	dh_pub_encode,
	dh_pub_cmp,
	dh_public_print,

	dh_priv_decode,
	dh_priv_encode,
	dh_private_print,

	int_dh_size,
	dh_bits,

	dh_param_decode,
	dh_param_encode,
	dh_missing_parameters,
	dh_copy_parameters,
	dh_cmp_parameters,
	dh_param_print,
	0,

	int_dh_free,
	0
	};
@


1.1
log
@Initial revision
@
text
@d171 1
a171 1
		OPENSSL_free(penc);
d280 1
a280 1
		OPENSSL_free(dp);
d356 1
a356 1
	m= OPENSSL_malloc(buf_len+10);
d387 1
a387 1
	if (m != NULL) OPENSSL_free(m);
d496 1
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@a495 1
	0,
@

