head	1.15;
access;
symbols
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.6
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	butholakala:1.6
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.6.0.12
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.3
	OPENBSD_4_4:1.3.0.32
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.30
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.28
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.26
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.24
	OPENBSD_4_0_BASE:1.3
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.3.0.22
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.20
	OPENBSD_3_8_BASE:1.3
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.3.0.18
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.16
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.3.0.14
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.09.03.11.33.35;	author beck;	state dead;
branches;
next	1.14;
commitid	HnbXxsegngek41U2;

1.14
date	2014.07.12.16.03.36;	author miod;	state Exp;
branches;
next	1.13;
commitid	G74O1dmRukKsW7IJ;

1.13
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.12;
commitid	yQEL1wOWIearrW15;

1.12
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.11;
commitid	nzndm3zqPmFurSaK;

1.11
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.05.25.20.28.50;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2014.05.08.13.20.49;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.19.13.31.24;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.05.23.01.38;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.20;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.43;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.57;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.04;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.01.05.22.58.55;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: bn_blind.c,v 1.14 2014/07/12 16:03:36 miod Exp $ */
/* ====================================================================
 * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/err.h>

#include "bn_lcl.h"

#define BN_BLINDING_COUNTER	32

struct bn_blinding_st {
	BIGNUM *A;
	BIGNUM *Ai;
	BIGNUM *e;
	BIGNUM *mod; /* just a reference */
#ifndef OPENSSL_NO_DEPRECATED
	unsigned long thread_id; /* added in OpenSSL 0.9.6j and 0.9.7b;
				  * used only by crypto/rsa/rsa_eay.c, rsa_lib.c */
#endif
	CRYPTO_THREADID tid;
	int counter;
	unsigned long flags;
	BN_MONT_CTX *m_ctx;
	int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
	    const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
};

BN_BLINDING *
BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)
{
	BN_BLINDING *ret = NULL;

	bn_check_top(mod);

	if ((ret = calloc(1, sizeof(BN_BLINDING))) == NULL) {
		BNerr(BN_F_BN_BLINDING_NEW, ERR_R_MALLOC_FAILURE);
		return (NULL);
	}
	if (A != NULL) {
		if ((ret->A = BN_dup(A))  == NULL)
			goto err;
	}
	if (Ai != NULL) {
		if ((ret->Ai = BN_dup(Ai)) == NULL)
			goto err;
	}

	/* save a copy of mod in the BN_BLINDING structure */
	if ((ret->mod = BN_dup(mod)) == NULL)
		goto err;
	if (BN_get_flags(mod, BN_FLG_CONSTTIME) != 0)
		BN_set_flags(ret->mod, BN_FLG_CONSTTIME);

	/* Set the counter to the special value -1
	 * to indicate that this is never-used fresh blinding
	 * that does not need updating before first use. */
	ret->counter = -1;
	CRYPTO_THREADID_current(&ret->tid);
	return (ret);

err:
	if (ret != NULL)
		BN_BLINDING_free(ret);
	return (NULL);
}

void
BN_BLINDING_free(BN_BLINDING *r)
{
	if (r == NULL)
		return;

	BN_clear_free(r->A);
	BN_clear_free(r->Ai);
	BN_clear_free(r->e);
	BN_clear_free(r->mod);
	free(r);
}

int
BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)
{
	int ret = 0;

	if ((b->A == NULL) || (b->Ai == NULL)) {
		BNerr(BN_F_BN_BLINDING_UPDATE, BN_R_NOT_INITIALIZED);
		goto err;
	}

	if (b->counter == -1)
		b->counter = 0;

	if (++b->counter == BN_BLINDING_COUNTER && b->e != NULL &&
	    !(b->flags & BN_BLINDING_NO_RECREATE)) {
		/* re-create blinding parameters */
		if (!BN_BLINDING_create_param(b, NULL, NULL, ctx, NULL, NULL))
			goto err;
	} else if (!(b->flags & BN_BLINDING_NO_UPDATE)) {
		if (!BN_mod_mul(b->A, b->A, b->A, b->mod, ctx))
			goto err;
		if (!BN_mod_mul(b->Ai, b->Ai, b->Ai, b->mod, ctx))
			goto err;
	}

	ret = 1;

err:
	if (b->counter == BN_BLINDING_COUNTER)
		b->counter = 0;
	return (ret);
}

int
BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
{
	return BN_BLINDING_convert_ex(n, NULL, b, ctx);
}

int
BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
{
	int ret = 1;

	bn_check_top(n);

	if ((b->A == NULL) || (b->Ai == NULL)) {
		BNerr(BN_F_BN_BLINDING_CONVERT_EX, BN_R_NOT_INITIALIZED);
		return (0);
	}

	if (b->counter == -1)
		/* Fresh blinding, doesn't need updating. */
		b->counter = 0;
	else if (!BN_BLINDING_update(b, ctx))
		return (0);

	if (r != NULL) {
		if (!BN_copy(r, b->Ai))
			ret = 0;
	}

	if (!BN_mod_mul(n, n,b->A, b->mod, ctx))
		ret = 0;

	return ret;
}

int
BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
{
	return BN_BLINDING_invert_ex(n, NULL, b, ctx);
}

int
BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
{
	int ret;

	bn_check_top(n);

	if (r != NULL)
		ret = BN_mod_mul(n, n, r, b->mod, ctx);
	else {
		if (b->Ai == NULL) {
			BNerr(BN_F_BN_BLINDING_INVERT_EX, BN_R_NOT_INITIALIZED);
			return (0);
		}
		ret = BN_mod_mul(n, n, b->Ai, b->mod, ctx);
	}

	bn_check_top(n);
	return (ret);
}

#ifndef OPENSSL_NO_DEPRECATED
unsigned long
BN_BLINDING_get_thread_id(const BN_BLINDING *b)
{
	return b->thread_id;
}

void
BN_BLINDING_set_thread_id(BN_BLINDING *b, unsigned long n)
{
	b->thread_id = n;
}
#endif

CRYPTO_THREADID *
BN_BLINDING_thread_id(BN_BLINDING *b)
{
	return &b->tid;
}

unsigned long
BN_BLINDING_get_flags(const BN_BLINDING *b)
{
	return b->flags;
}

void
BN_BLINDING_set_flags(BN_BLINDING *b, unsigned long flags)
{
	b->flags = flags;
}

BN_BLINDING *
BN_BLINDING_create_param(BN_BLINDING *b, const BIGNUM *e, BIGNUM *m,
    BN_CTX *ctx, int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
    const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx), BN_MONT_CTX *m_ctx)
{
	int    retry_counter = 32;
	BN_BLINDING *ret = NULL;

	if (b == NULL)
		ret = BN_BLINDING_new(NULL, NULL, m);
	else
		ret = b;

	if (ret == NULL)
		goto err;

	if (ret->A  == NULL && (ret->A = BN_new()) == NULL)
		goto err;
	if (ret->Ai == NULL && (ret->Ai = BN_new()) == NULL)
		goto err;

	if (e != NULL) {
		BN_free(ret->e);
		ret->e = BN_dup(e);
	}
	if (ret->e == NULL)
		goto err;

	if (bn_mod_exp != NULL)
		ret->bn_mod_exp = bn_mod_exp;
	if (m_ctx != NULL)
		ret->m_ctx = m_ctx;

	do {
		if (!BN_rand_range(ret->A, ret->mod))
			goto err;
		if (BN_mod_inverse(ret->Ai, ret->A, ret->mod, ctx) == NULL) {
			/* this should almost never happen for good RSA keys */
			unsigned long error = ERR_peek_last_error();
			if (ERR_GET_REASON(error) == BN_R_NO_INVERSE) {
				if (retry_counter-- == 0) {
					BNerr(BN_F_BN_BLINDING_CREATE_PARAM,
					    BN_R_TOO_MANY_ITERATIONS);
					goto err;
				}
				ERR_clear_error();
			} else
				goto err;
		} else
			break;
	} while (1);

	if (ret->bn_mod_exp != NULL && ret->m_ctx != NULL) {
		if (!ret->bn_mod_exp(ret->A, ret->A, ret->e, ret->mod,
		    ctx, ret->m_ctx))
			goto err;
	} else {
		if (!BN_mod_exp(ret->A, ret->A, ret->e, ret->mod, ctx))
			goto err;
	}

	return ret;

err:
	if (b == NULL && ret != NULL) {
		BN_BLINDING_free(ret);
		ret = NULL;
	}

	return ret;
}
@


1.14
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_blind.c,v 1.13 2014/07/11 08:44:47 jsing Exp $ */
@


1.13
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_blind.c,v 1.12 2014/07/10 22:45:56 jsing Exp $ */
d184 4
a187 8
	if (r->A  != NULL)
		BN_clear_free(r->A );
	if (r->Ai != NULL)
		BN_clear_free(r->Ai);
	if (r->e  != NULL)
		BN_clear_free(r->e );
	if (r->mod != NULL)
		BN_clear_free(r->mod);
d340 1
a340 2
		if (ret->e != NULL)
			BN_free(ret->e);
@


1.12
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: bn_blind.c,v 1.11 2014/06/12 15:49:28 deraadt Exp $ */
d116 2
a117 1
#include "cryptlib.h"
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d113 3
@


1.10
log
@calloc instead of malloc/memset. from Benjamin Baier
@
text
@d1 1
a1 1
/* crypto/bn/bn_blind.c */
@


1.9
log
@Emergency knfectomie requested by tedu@@.
@
text
@d142 1
a142 1
	if ((ret = (BN_BLINDING *)malloc(sizeof(BN_BLINDING))) == NULL) {
a145 1
	memset(ret, 0, sizeof(BN_BLINDING));
@


1.8
log
@Lacking a proof that--for this implementation--exposure of Montgomery
multiplication or RSA blinding parameters doesn't permit retroactive
timing analysis of the secrets, we'll do the stupidly cheap thing and
cleanse them before freeing them.

ok deraadt@@
@
text
@d10 1
a10 1
 *    notice, this list of conditions and the following disclaimer. 
d61 1
a61 1
 * 
d68 1
a68 1
 * 
d75 1
a75 1
 * 
d90 1
a90 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d93 1
a93 1
 * 
d105 1
a105 1
 * 
d118 1
a118 2
struct bn_blinding_st
	{
d132 7
a138 7
			  const BIGNUM *m, BN_CTX *ctx,
			  BN_MONT_CTX *m_ctx);
	};

BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)
	{
	BN_BLINDING *ret=NULL;
d142 13
a154 14
	if ((ret=(BN_BLINDING *)malloc(sizeof(BN_BLINDING))) == NULL)
		{
		BNerr(BN_F_BN_BLINDING_NEW,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
	memset(ret,0,sizeof(BN_BLINDING));
	if (A != NULL)
		{
		if ((ret->A  = BN_dup(A))  == NULL) goto err;
		}
	if (Ai != NULL)
		{
		if ((ret->Ai = BN_dup(Ai)) == NULL) goto err;
		}
d157 2
a158 1
	if ((ret->mod = BN_dup(mod)) == NULL) goto err;
d167 2
a168 1
	return(ret);
d170 10
a179 3
	if (ret != NULL) BN_BLINDING_free(ret);
	return(NULL);
	}
d181 8
a188 9
void BN_BLINDING_free(BN_BLINDING *r)
	{
	if(r == NULL)
	    return;

	if (r->A  != NULL) BN_clear_free(r->A );
	if (r->Ai != NULL) BN_clear_free(r->Ai);
	if (r->e  != NULL) BN_clear_free(r->e );
	if (r->mod != NULL) BN_clear_free(r->mod); 
d190 6
a195 1
	}
d197 2
a198 7
int BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)
	{
	int ret=0;

	if ((b->A == NULL) || (b->Ai == NULL))
		{
		BNerr(BN_F_BN_BLINDING_UPDATE,BN_R_NOT_INITIALIZED);
d200 1
a200 1
		}
d206 1
a206 2
		!(b->flags & BN_BLINDING_NO_RECREATE))
		{
d210 8
a217 6
		}
	else if (!(b->flags & BN_BLINDING_NO_UPDATE))
		{
		if (!BN_mod_mul(b->A,b->A,b->A,b->mod,ctx)) goto err;
		if (!BN_mod_mul(b->Ai,b->Ai,b->Ai,b->mod,ctx)) goto err;
		}
a218 1
	ret=1;
d222 2
a223 2
	return(ret);
	}
d225 3
a227 2
int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
	{
d229 1
a229 1
	}
d231 3
a233 2
int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
	{
d238 4
a241 5
	if ((b->A == NULL) || (b->Ai == NULL))
		{
		BNerr(BN_F_BN_BLINDING_CONVERT_EX,BN_R_NOT_INITIALIZED);
		return(0);
		}
d246 2
a247 2
	else if (!BN_BLINDING_update(b,ctx))
		return(0);
d249 7
a255 4
	if (r != NULL)
		{
		if (!BN_copy(r, b->Ai)) ret=0;
		}
a256 2
	if (!BN_mod_mul(n,n,b->A,b->mod,ctx)) ret=0;
	
d258 1
a258 1
	}
d260 3
a262 2
int BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
	{
d264 1
a264 1
	}
d266 3
a268 2
int BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
	{
d275 5
a279 7
	else
		{
		if (b->Ai == NULL)
			{
			BNerr(BN_F_BN_BLINDING_INVERT_EX,BN_R_NOT_INITIALIZED);
			return(0);
			}
d281 1
a281 1
		}
d284 2
a285 2
	return(ret);
	}
d288 3
a290 2
unsigned long BN_BLINDING_get_thread_id(const BN_BLINDING *b)
	{
d292 1
a292 1
	}
d294 3
a296 2
void BN_BLINDING_set_thread_id(BN_BLINDING *b, unsigned long n)
	{
d298 1
a298 1
	}
d301 3
a303 2
CRYPTO_THREADID *BN_BLINDING_thread_id(BN_BLINDING *b)
	{
d305 1
a305 1
	}
d307 3
a309 2
unsigned long BN_BLINDING_get_flags(const BN_BLINDING *b)
	{
d311 1
a311 1
	}
d313 3
a315 2
void BN_BLINDING_set_flags(BN_BLINDING *b, unsigned long flags)
	{
d317 1
a317 1
	}
d319 4
a322 5
BN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b,
	const BIGNUM *e, BIGNUM *m, BN_CTX *ctx,
	int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
			  const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx),
	BN_MONT_CTX *m_ctx)
d335 1
a335 1
	if (ret->A  == NULL && (ret->A  = BN_new()) == NULL)
d337 1
a337 1
	if (ret->Ai == NULL && (ret->Ai	= BN_new()) == NULL)
d340 1
a340 2
	if (e != NULL)
		{
d344 1
a344 1
		}
d354 3
a356 3
		if (!BN_rand_range(ret->A, ret->mod)) goto err;
		if (BN_mod_inverse(ret->Ai, ret->A, ret->mod, ctx) == NULL)
			{
d359 2
a360 4
			if (ERR_GET_REASON(error) == BN_R_NO_INVERSE)
				{
				if (retry_counter-- == 0)
				{
d362 1
a362 1
						BN_R_TOO_MANY_ITERATIONS);
d366 1
a366 2
				}
			else
d368 1
a368 2
			}
		else
d372 3
a374 3
	if (ret->bn_mod_exp != NULL && ret->m_ctx != NULL)
		{
		if (!ret->bn_mod_exp(ret->A, ret->A, ret->e, ret->mod, ctx, ret->m_ctx))
d376 1
a376 3
		}
	else
		{
d379 1
a379 1
		}
d382 1
d384 1
a384 2
	if (b == NULL && ret != NULL)
		{
d387 1
a387 1
		}
@


1.7
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d179 4
a182 4
	if (r->A  != NULL) BN_free(r->A );
	if (r->Ai != NULL) BN_free(r->Ai);
	if (r->e  != NULL) BN_free(r->e );
	if (r->mod != NULL) BN_free(r->mod); 
@


1.6
log
@OpenSSL 1.0.0f: merge
@
text
@d143 1
a143 1
	if ((ret=(BN_BLINDING *)OPENSSL_malloc(sizeof(BN_BLINDING))) == NULL)
d183 1
a183 1
	OPENSSL_free(r);
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d129 1
a129 1
	unsigned int  counter;
d163 4
a166 1
	ret->counter = BN_BLINDING_COUNTER;
d196 4
a199 1
	if (--(b->counter) == 0 && b->e != NULL &&
d214 2
a215 2
	if (b->counter == 0)
		b->counter = BN_BLINDING_COUNTER;
d236 6
a261 5
	if ((b->A == NULL) || (b->Ai == NULL))
		{
		BNerr(BN_F_BN_BLINDING_INVERT_EX,BN_R_NOT_INITIALIZED);
		return(0);
		}
a265 3
		ret = BN_mod_mul(n, n, b->Ai, b->mod, ctx);

	if (ret >= 0)
d267 3
a269 1
		if (!BN_BLINDING_update(b,ctx))
d271 2
d274 1
@


1.4
log
@resolve conflicts
@
text
@d3 1
a3 1
 * Copyright (c) 1998-2005 The OpenSSL Project.  All rights reserved.
d124 1
d127 2
d137 1
a137 1
BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, /* const */ BIGNUM *mod)
d164 1
d270 1
d280 6
d298 1
a298 1
	const BIGNUM *e, /* const */ BIGNUM *m, BN_CTX *ctx,
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d2 53
d116 19
a134 1
BN_BLINDING *BN_BLINDING_new(BIGNUM *A, BIGNUM *Ai, BIGNUM *mod)
a137 1
	bn_check_top(Ai);
d146 15
a160 5
	if ((ret->A=BN_new()) == NULL) goto err;
	if ((ret->Ai=BN_new()) == NULL) goto err;
	if (!BN_copy(ret->A,A)) goto err;
	if (!BN_copy(ret->Ai,Ai)) goto err;
	ret->mod=mod;
d174 2
d188 13
a200 3
		
	if (!BN_mod_mul(b->A,b->A,b->A,b->mod,ctx)) goto err;
	if (!BN_mod_mul(b->Ai,b->Ai,b->Ai,b->mod,ctx)) goto err;
d204 2
d211 7
d222 1
a222 1
		BNerr(BN_F_BN_BLINDING_CONVERT,BN_R_NOT_INITIALIZED);
d225 9
a233 1
	return(BN_mod_mul(n,n,b->A,b->mod,ctx));
d238 5
d248 1
a248 1
		BNerr(BN_F_BN_BLINDING_INVERT,BN_R_NOT_INITIALIZED);
d251 7
a257 1
	if ((ret=BN_mod_mul(n,n,b->Ai,b->mod,ctx)) >= 0)
d262 1
d266 100
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d70 1
a70 1
	if ((ret=(BN_BLINDING *)Malloc(sizeof(BN_BLINDING))) == NULL)
d94 1
a94 1
	Free(r);
@


1.1
log
@Initial revision
@
text
@d63 1
a63 4
BN_BLINDING *BN_BLINDING_new(A,Ai,mod)
BIGNUM *A;
BIGNUM *Ai;
BIGNUM *mod;
d67 3
d71 1
d73 2
d84 1
a84 1
	return(ret);
d87 1
a87 2
void BN_BLINDING_free(r)
BN_BLINDING *r;
d89 3
d97 1
a97 3
int BN_BLINDING_update(b,ctx)
BN_BLINDING *b;
BN_CTX *ctx;
d103 1
a103 1
		BNerr(BN_F_BN_BLINDING_UPDATE,BN_R_NOT_INITALISED);
d115 1
a115 4
int BN_BLINDING_convert(n,b,ctx)
BIGNUM *n;
BN_BLINDING *b;
BN_CTX *ctx;
d117 2
d121 1
a121 1
		BNerr(BN_F_BN_BLINDING_CONVERT,BN_R_NOT_INITALISED);
d127 1
a127 4
int BN_BLINDING_invert(n,b,ctx)
BIGNUM *n;
BN_BLINDING *b;
BN_CTX *ctx;
d130 2
d134 1
a134 1
		BNerr(BN_F_BN_BLINDING_INVERT,BN_R_NOT_INITALISED);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d63 4
a66 1
BN_BLINDING *BN_BLINDING_new(BIGNUM *A, BIGNUM *Ai, BIGNUM *mod)
d70 1
a70 5
	bn_check_top(Ai);
	bn_check_top(mod);

	if ((ret=(BN_BLINDING *)OPENSSL_malloc(sizeof(BN_BLINDING))) == NULL)
		{
a71 2
		return(NULL);
		}
d81 1
a81 1
	return(NULL);
d84 2
a85 1
void BN_BLINDING_free(BN_BLINDING *r)
a86 3
	if(r == NULL)
	    return;

d89 1
a89 1
	OPENSSL_free(r);
d92 3
a94 1
int BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)
d100 1
a100 1
		BNerr(BN_F_BN_BLINDING_UPDATE,BN_R_NOT_INITIALIZED);
d112 4
a115 1
int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
a116 2
	bn_check_top(n);

d119 1
a119 1
		BNerr(BN_F_BN_BLINDING_CONVERT,BN_R_NOT_INITIALIZED);
d125 4
a128 1
int BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
a130 2

	bn_check_top(n);
d133 1
a133 1
		BNerr(BN_F_BN_BLINDING_INVERT,BN_R_NOT_INITIALIZED);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a1 53
/* ====================================================================
 * Copyright (c) 1998-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
d63 1
a63 19
#define BN_BLINDING_COUNTER	32

struct bn_blinding_st
	{
	BIGNUM *A;
	BIGNUM *Ai;
	BIGNUM *e;
	BIGNUM *mod; /* just a reference */
	unsigned long thread_id; /* added in OpenSSL 0.9.6j and 0.9.7b;
				  * used only by crypto/rsa/rsa_eay.c, rsa_lib.c */
	unsigned int  counter;
	unsigned long flags;
	BN_MONT_CTX *m_ctx;
	int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
			  const BIGNUM *m, BN_CTX *ctx,
			  BN_MONT_CTX *m_ctx);
	};

BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, /* const */ BIGNUM *mod)
d67 1
d76 5
a80 15
	if (A != NULL)
		{
		if ((ret->A  = BN_dup(A))  == NULL) goto err;
		}
	if (Ai != NULL)
		{
		if ((ret->Ai = BN_dup(Ai)) == NULL) goto err;
		}

	/* save a copy of mod in the BN_BLINDING structure */
	if ((ret->mod = BN_dup(mod)) == NULL) goto err;
	if (BN_get_flags(mod, BN_FLG_CONSTTIME) != 0)
		BN_set_flags(ret->mod, BN_FLG_CONSTTIME);

	ret->counter = BN_BLINDING_COUNTER;
a93 2
	if (r->e  != NULL) BN_free(r->e );
	if (r->mod != NULL) BN_free(r->mod); 
d106 3
a108 13

	if (--(b->counter) == 0 && b->e != NULL &&
		!(b->flags & BN_BLINDING_NO_RECREATE))
		{
		/* re-create blinding parameters */
		if (!BN_BLINDING_create_param(b, NULL, NULL, ctx, NULL, NULL))
			goto err;
		}
	else if (!(b->flags & BN_BLINDING_NO_UPDATE))
		{
		if (!BN_mod_mul(b->A,b->A,b->A,b->mod,ctx)) goto err;
		if (!BN_mod_mul(b->Ai,b->Ai,b->Ai,b->mod,ctx)) goto err;
		}
a111 2
	if (b->counter == 0)
		b->counter = BN_BLINDING_COUNTER;
a116 7
	return BN_BLINDING_convert_ex(n, NULL, b, ctx);
	}

int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
	{
	int ret = 1;

d121 1
a121 1
		BNerr(BN_F_BN_BLINDING_CONVERT_EX,BN_R_NOT_INITIALIZED);
d124 1
a124 9

	if (r != NULL)
		{
		if (!BN_copy(r, b->Ai)) ret=0;
		}

	if (!BN_mod_mul(n,n,b->A,b->mod,ctx)) ret=0;
	
	return ret;
a128 5
	return BN_BLINDING_invert_ex(n, NULL, b, ctx);
	}

int BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
	{
d134 1
a134 1
		BNerr(BN_F_BN_BLINDING_INVERT_EX,BN_R_NOT_INITIALIZED);
d137 1
a137 7

	if (r != NULL)
		ret = BN_mod_mul(n, n, r, b->mod, ctx);
	else
		ret = BN_mod_mul(n, n, b->Ai, b->mod, ctx);

	if (ret >= 0)
a141 1
	bn_check_top(n);
a144 100
unsigned long BN_BLINDING_get_thread_id(const BN_BLINDING *b)
	{
	return b->thread_id;
	}

void BN_BLINDING_set_thread_id(BN_BLINDING *b, unsigned long n)
	{
	b->thread_id = n;
	}

unsigned long BN_BLINDING_get_flags(const BN_BLINDING *b)
	{
	return b->flags;
	}

void BN_BLINDING_set_flags(BN_BLINDING *b, unsigned long flags)
	{
	b->flags = flags;
	}

BN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b,
	const BIGNUM *e, /* const */ BIGNUM *m, BN_CTX *ctx,
	int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
			  const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx),
	BN_MONT_CTX *m_ctx)
{
	int    retry_counter = 32;
	BN_BLINDING *ret = NULL;

	if (b == NULL)
		ret = BN_BLINDING_new(NULL, NULL, m);
	else
		ret = b;

	if (ret == NULL)
		goto err;

	if (ret->A  == NULL && (ret->A  = BN_new()) == NULL)
		goto err;
	if (ret->Ai == NULL && (ret->Ai	= BN_new()) == NULL)
		goto err;

	if (e != NULL)
		{
		if (ret->e != NULL)
			BN_free(ret->e);
		ret->e = BN_dup(e);
		}
	if (ret->e == NULL)
		goto err;

	if (bn_mod_exp != NULL)
		ret->bn_mod_exp = bn_mod_exp;
	if (m_ctx != NULL)
		ret->m_ctx = m_ctx;

	do {
		if (!BN_rand_range(ret->A, ret->mod)) goto err;
		if (BN_mod_inverse(ret->Ai, ret->A, ret->mod, ctx) == NULL)
			{
			/* this should almost never happen for good RSA keys */
			unsigned long error = ERR_peek_last_error();
			if (ERR_GET_REASON(error) == BN_R_NO_INVERSE)
				{
				if (retry_counter-- == 0)
				{
					BNerr(BN_F_BN_BLINDING_CREATE_PARAM,
						BN_R_TOO_MANY_ITERATIONS);
					goto err;
				}
				ERR_clear_error();
				}
			else
				goto err;
			}
		else
			break;
	} while (1);

	if (ret->bn_mod_exp != NULL && ret->m_ctx != NULL)
		{
		if (!ret->bn_mod_exp(ret->A, ret->A, ret->e, ret->mod, ctx, ret->m_ctx))
			goto err;
		}
	else
		{
		if (!BN_mod_exp(ret->A, ret->A, ret->e, ret->mod, ctx))
			goto err;
		}

	return ret;
err:
	if (b == NULL && ret != NULL)
		{
		BN_BLINDING_free(ret);
		ret = NULL;
		}

	return ret;
}
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d3 1
a3 1
 * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
a123 1
#ifndef OPENSSL_NO_DEPRECATED
a125 2
#endif
	CRYPTO_THREADID tid;
d134 1
a134 1
BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)
a160 1
	CRYPTO_THREADID_current(&ret->tid);
a265 1
#ifndef OPENSSL_NO_DEPRECATED
a274 6
#endif

CRYPTO_THREADID *BN_BLINDING_thread_id(BN_BLINDING *b)
	{
	return &b->tid;
	}
d287 1
a287 1
	const BIGNUM *e, BIGNUM *m, BN_CTX *ctx,
@


1.1.1.5
log
@OpenSSL 1.0.0f: import upstream source
@
text
@d129 1
a129 1
	int counter;
d163 1
a163 4
	/* Set the counter to the special value -1
	 * to indicate that this is never-used fresh blinding
	 * that does not need updating before first use. */
	ret->counter = -1;
d193 1
a193 4
	if (b->counter == -1)
		b->counter = 0;

	if (++b->counter == BN_BLINDING_COUNTER && b->e != NULL &&
d208 2
a209 2
	if (b->counter == BN_BLINDING_COUNTER)
		b->counter = 0;
a229 6
	if (b->counter == -1)
		/* Fresh blinding, doesn't need updating. */
		b->counter = 0;
	else if (!BN_BLINDING_update(b,ctx))
		return(0);

d250 5
d259 3
d263 1
a263 3
		if (b->Ai == NULL)
			{
			BNerr(BN_F_BN_BLINDING_INVERT_EX,BN_R_NOT_INITIALIZED);
a264 2
			}
		ret = BN_mod_mul(n, n, b->Ai, b->mod, ctx);
a265 1

@


