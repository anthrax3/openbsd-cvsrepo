head	1.14;
access;
symbols
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	butholakala:1.8
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.7.0.14
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.16
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.7.0.12
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.26
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.24
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.22
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.20
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.18
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.16
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.09.03.11.33.35;	author beck;	state dead;
branches;
next	1.13;
commitid	HnbXxsegngek41U2;

1.13
date	2014.10.28.07.35.58;	author jsg;	state Exp;
branches;
next	1.12;
commitid	pi8qF4s0vNCGLEKv;

1.12
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.10;
commitid	id8dTrTMtnTn4fqt;

1.10
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.05.08.13.20.49;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.31;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.22.00.02.59;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.23;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.45;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.38;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.38;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.59;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.52;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.10.13.21.23.37;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: bn_shift.c,v 1.13 2014/10/28 07:35:58 jsg Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include "bn_lcl.h"

int
BN_lshift1(BIGNUM *r, const BIGNUM *a)
{
	BN_ULONG *ap, *rp, t, c;
	int i;

	bn_check_top(r);
	bn_check_top(a);

	if (r != a) {
		r->neg = a->neg;
		if (bn_wexpand(r, a->top + 1) == NULL)
			return (0);
		r->top = a->top;
	} else {
		if (bn_wexpand(r, a->top + 1) == NULL)
			return (0);
	}
	ap = a->d;
	rp = r->d;
	c = 0;
	for (i = 0; i < a->top; i++) {
		t= *(ap++);
		*(rp++) = ((t << 1) | c) & BN_MASK2;
		c = (t & BN_TBIT) ? 1 : 0;
	}
	if (c) {
		*rp = 1;
		r->top++;
	}
	bn_check_top(r);
	return (1);
}

int
BN_rshift1(BIGNUM *r, const BIGNUM *a)
{
	BN_ULONG *ap, *rp, t, c;
	int i, j;

	bn_check_top(r);
	bn_check_top(a);

	if (BN_is_zero(a)) {
		BN_zero(r);
		return (1);
	}
	i = a->top;
	ap = a->d;
	j = i - (ap[i - 1]==1);
	if (a != r) {
		if (bn_wexpand(r, j) == NULL)
			return (0);
		r->neg = a->neg;
	}
	rp = r->d;
	t = ap[--i];
	c = (t & 1) ? BN_TBIT : 0;
	if (t >>= 1)
		rp[i] = t;
	while (i > 0) {
		t = ap[--i];
		rp[i] = ((t >> 1) & BN_MASK2) | c;
		c = (t & 1) ? BN_TBIT : 0;
	}
	r->top = j;
	bn_check_top(r);
	return (1);
}

int
BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
{
	int i, nw, lb, rb;
	BN_ULONG *t, *f;
	BN_ULONG l;

	bn_check_top(r);
	bn_check_top(a);

	r->neg = a->neg;
	nw = n / BN_BITS2;
	if (bn_wexpand(r, a->top + nw + 1) == NULL)
		return (0);
	lb = n % BN_BITS2;
	rb = BN_BITS2 - lb;
	f = a->d;
	t = r->d;
	t[a->top + nw] = 0;
	if (lb == 0)
		for (i = a->top - 1; i >= 0; i--)
			t[nw + i] = f[i];
	else
		for (i = a->top - 1; i >= 0; i--) {
			l = f[i];
			t[nw + i + 1] |= (l >> rb) & BN_MASK2;
			t[nw + i] = (l << lb) & BN_MASK2;
		}
	memset(t, 0, nw * sizeof(t[0]));
/*	for (i=0; i<nw; i++)
		t[i]=0;*/
	r->top = a->top + nw + 1;
	bn_correct_top(r);
	bn_check_top(r);
	return (1);
}

int
BN_rshift(BIGNUM *r, const BIGNUM *a, int n)
{
	int i, j, nw, lb, rb;
	BN_ULONG *t, *f;
	BN_ULONG l, tmp;

	bn_check_top(r);
	bn_check_top(a);

	nw = n / BN_BITS2;
	rb = n % BN_BITS2;
	lb = BN_BITS2 - rb;
	if (nw >= a->top || a->top == 0) {
		BN_zero(r);
		return (1);
	}
	i = (BN_num_bits(a) - n + (BN_BITS2 - 1)) / BN_BITS2;
	if (r != a) {
		r->neg = a->neg;
		if (bn_wexpand(r, i) == NULL)
			return (0);
	} else {
		if (n == 0)
			return 1; /* or the copying loop will go berserk */
	}

	f = &(a->d[nw]);
	t = r->d;
	j = a->top - nw;
	r->top = i;

	if (rb == 0) {
		for (i = j; i != 0; i--)
			*(t++) = *(f++);
	} else {
		l = *(f++);
		for (i = j - 1; i != 0; i--) {
			tmp = (l >> rb) & BN_MASK2;
			l = *(f++);
			*(t++) = (tmp|(l << lb)) & BN_MASK2;
		}
		if ((l = (l >> rb) & BN_MASK2))
			*(t) = l;
	}
	bn_check_top(r);
	return (1);
}
@


1.13
log
@deregister; no binary change
ok jsing@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_shift.c,v 1.12 2014/07/11 08:44:48 jsing Exp $ */
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_shift.c,v 1.11 2014/07/10 13:58:22 jsing Exp $ */
d67 1
a67 1
	register BN_ULONG *ap, *rp, t, c;
@


1.11
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_shift.c,v 1.10 2014/06/12 15:49:28 deraadt Exp $ */
a61 1
#include "cryptlib.h"
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.9
log
@Emergency knfectomie requested by tedu@@.
@
text
@d1 1
a1 1
/* crypto/bn/bn_shift.c */
@


1.8
log
@resolve conflicts
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d63 4
a66 3
int BN_lshift1(BIGNUM *r, const BIGNUM *a)
	{
	register BN_ULONG *ap,*rp,t,c;
d72 13
a84 15
	if (r != a)
		{
		r->neg=a->neg;
		if (bn_wexpand(r,a->top+1) == NULL) return(0);
		r->top=a->top;
		}
	else
		{
		if (bn_wexpand(r,a->top+1) == NULL) return(0);
		}
	ap=a->d;
	rp=r->d;
	c=0;
	for (i=0; i<a->top; i++)
		{
d86 5
a90 6
		*(rp++)=((t<<1)|c)&BN_MASK2;
		c=(t & BN_TBIT)?1:0;
		}
	if (c)
		{
		*rp=1;
d92 1
a92 1
		}
d94 2
a95 2
	return(1);
	}
d97 5
a101 4
int BN_rshift1(BIGNUM *r, const BIGNUM *a)
	{
	BN_ULONG *ap,*rp,t,c;
	int i,j;
d106 1
a106 2
	if (BN_is_zero(a))
		{
d108 2
a109 2
		return(1);
		}
d111 18
a128 18
	ap= a->d;
	j = i-(ap[i-1]==1);
	if (a != r)
		{
		if (bn_wexpand(r,j) == NULL) return(0);
		r->neg=a->neg;
		}
	rp=r->d;
	t=ap[--i];
	c=(t&1)?BN_TBIT:0;
	if (t>>=1) rp[i]=t;
	while (i>0)
		{
		t=ap[--i];
		rp[i]=((t>>1)&BN_MASK2)|c;
		c=(t&1)?BN_TBIT:0;
		}
	r->top=j;
d130 2
a131 2
	return(1);
	}
d133 5
a137 4
int BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
	{
	int i,nw,lb,rb;
	BN_ULONG *t,*f;
d143 9
a151 8
	r->neg=a->neg;
	nw=n/BN_BITS2;
	if (bn_wexpand(r,a->top+nw+1) == NULL) return(0);
	lb=n%BN_BITS2;
	rb=BN_BITS2-lb;
	f=a->d;
	t=r->d;
	t[a->top+nw]=0;
d153 2
a154 2
		for (i=a->top-1; i>=0; i--)
			t[nw+i]=f[i];
d156 6
a161 7
		for (i=a->top-1; i>=0; i--)
			{
			l=f[i];
			t[nw+i+1]|=(l>>rb)&BN_MASK2;
			t[nw+i]=(l<<lb)&BN_MASK2;
			}
	memset(t,0,nw*sizeof(t[0]));
d164 1
a164 1
	r->top=a->top+nw+1;
d167 2
a168 2
	return(1);
	}
d170 6
a175 5
int BN_rshift(BIGNUM *r, const BIGNUM *a, int n)
	{
	int i,j,nw,lb,rb;
	BN_ULONG *t,*f;
	BN_ULONG l,tmp;
d180 4
a183 5
	nw=n/BN_BITS2;
	rb=n%BN_BITS2;
	lb=BN_BITS2-rb;
	if (nw >= a->top || a->top == 0)
		{
d185 8
a192 10
		return(1);
		}
	i = (BN_num_bits(a)-n+(BN_BITS2-1))/BN_BITS2;
	if (r != a)
		{
		r->neg=a->neg;
		if (bn_wexpand(r,i) == NULL) return(0);
		}
	else
		{
d195 1
a195 1
		}
d197 14
a210 20
	f= &(a->d[nw]);
	t=r->d;
	j=a->top-nw;
	r->top=i;

	if (rb == 0)
		{
		for (i=j; i != 0; i--)
			*(t++)= *(f++);
		}
	else
		{
		l= *(f++);
		for (i=j-1; i != 0; i--)
			{
			tmp =(l>>rb)&BN_MASK2;
			l= *(f++);
			*(t++) =(tmp|(l<<lb))&BN_MASK2;
			}
		if ((l = (l>>rb)&BN_MASK2)) *(t) = l;
d212 3
d216 2
a217 2
	return(1);
	}
@


1.7
log
@resolve conflicts
@
text
@d102 1
a102 1
	int i;
d112 3
d117 1
a117 2
		if (bn_wexpand(r,a->top) == NULL) return(0);
		r->top=a->top;
a119 1
	ap=a->d;
d121 4
a124 2
	c=0;
	for (i=a->top-1; i>=0; i--)
d126 1
a126 1
		t=ap[i];
d130 1
a130 1
	bn_correct_top(r);
d188 1
d192 1
a192 1
		if (bn_wexpand(r,a->top-nw+1) == NULL) return(0);
d203 1
a203 1
	r->top=j;
d219 1
a219 1
		*(t++) =(l>>rb)&BN_MASK2;
a220 1
	bn_correct_top(r);
@


1.6
log
@resolve conflicts
@
text
@d180 1
a180 1
	if (nw > a->top || a->top == 0)
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d68 3
d95 1
d104 3
d127 2
a128 1
	bn_fix_top(r);
d138 3
d163 2
a164 1
	bn_fix_top(r);
d174 3
d203 1
a203 1
		for (i=j+1; i > 0; i--)
d209 1
a209 1
		for (i=1; i<j; i++)
d217 2
a218 2
	*t=0;
	bn_fix_top(r);
@


1.4
log
@openssl-engine-0.9.6a merge
@
text
@d63 1
a63 1
int BN_lshift1(BIGNUM *r, BIGNUM *a)
d95 1
a95 1
int BN_rshift1(BIGNUM *r, BIGNUM *a)
a130 1
	if (bn_wexpand(r,a->top+(n/BN_BITS2)+1) == NULL) return(0);
d132 1
d156 1
a156 1
int BN_rshift(BIGNUM *r, BIGNUM *a, int n)
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d175 5
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d165 1
a165 1
	if (nw > a->top)
@


1.1
log
@Initial revision
@
text
@d63 1
a63 3
int BN_lshift1(r, a)
BIGNUM *r;
BIGNUM *a;
d95 1
a95 3
int BN_rshift1(r, a)
BIGNUM *r;
BIGNUM *a;
d124 1
a124 4
int BN_lshift(r, a, n)
BIGNUM *r;
BIGNUM *a;
int n;
d156 1
a156 4
int BN_rshift(r, a, n)
BIGNUM *r;
BIGNUM *a;
int n;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d63 3
a65 1
int BN_lshift1(BIGNUM *r, const BIGNUM *a)
d97 3
a99 1
int BN_rshift1(BIGNUM *r, const BIGNUM *a)
d128 4
a131 1
int BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
d138 1
a139 1
	if (bn_wexpand(r,a->top+nw+1) == NULL) return(0);
d163 4
a166 1
int BN_rshift(BIGNUM *r, const BIGNUM *a, int n)
d175 1
a175 1
	if (nw > a->top || a->top == 0)
a183 5
		}
	else
		{
		if (n == 0)
			return 1; /* or the copying loop will go berserk */
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a67 3
	bn_check_top(r);
	bn_check_top(a);

a91 1
	bn_check_top(r);
a99 3
	bn_check_top(r);
	bn_check_top(a);

d120 1
a120 2
	bn_correct_top(r);
	bn_check_top(r);
a129 3
	bn_check_top(r);
	bn_check_top(a);

d152 1
a152 2
	bn_correct_top(r);
	bn_check_top(r);
a161 3
	bn_check_top(r);
	bn_check_top(a);

d188 1
a188 1
		for (i=j; i != 0; i--)
d194 1
a194 1
		for (i=j-1; i != 0; i--)
d202 2
a203 2
	bn_correct_top(r);
	bn_check_top(r);
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d180 1
a180 1
	if (nw >= a->top || a->top == 0)
@


1.1.1.5
log
@import OpenSSL-1.0.1c
@
text
@d102 1
a102 1
	int i,j;
a111 3
	i = a->top;
	ap= a->d;
	j = i-(ap[i-1]==1);
d114 2
a115 1
		if (bn_wexpand(r,j) == NULL) return(0);
d118 1
d120 2
a121 4
	t=ap[--i];
	c=(t&1)?BN_TBIT:0;
	if (t>>=1) rp[i]=t;
	while (i>0)
d123 1
a123 1
		t=ap[--i];
d127 1
a127 1
	r->top=j;
a184 1
	i = (BN_num_bits(a)-n+(BN_BITS2-1))/BN_BITS2;
d188 1
a188 1
		if (bn_wexpand(r,i) == NULL) return(0);
d199 1
a199 1
	r->top=i;
d215 1
a215 1
		if ((l = (l>>rb)&BN_MASK2)) *(t) = l;
d217 1
@


