head	1.22;
access;
symbols
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	butholakala:1.13
	openssl_1_0_1_g:1.1.1.8
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	openssl_1_0_1_c:1.1.1.8
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.11.0.8
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.7.0.12
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.10
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.7.0.8
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.7.0.6
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2016.06.30.02.02.06;	author bcook;	state Exp;
branches;
next	1.21;
commitid	NoRqiDVUjRmOOT9v;

1.21
date	2016.06.21.04.16.53;	author bcook;	state Exp;
branches;
next	1.20;
commitid	46oO02MQm5wkkTK0;

1.20
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.19;
commitid	8tb4v3IC8S2vzfHj;

1.19
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.18;
commitid	G74O1dmRukKsW7IJ;

1.18
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.16;
commitid	nzndm3zqPmFurSaK;

1.16
date	2014.07.09.10.16.24;	author miod;	state Exp;
branches;
next	1.15;
commitid	7IVFdVxu6X3GaaT8;

1.15
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2009.01.09.12.15.43;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.29.05.39.20;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.05.22.12.11;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.23.07.46.00;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.31;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.15.06.18.38;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.05;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.16;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.08;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.32;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.55;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Remove flags for disabling constant-time operations.

This removes support for DSA_FLAG_NO_EXP_CONSTTIME, DH_FLAG_NO_EXP_CONSTTIME,
and RSA_FLAG_NO_CONSTTIME flags, making all of these operations unconditionally
constant-time.

Based on the original patch by CÃ©sar Pereid.  ok beck@@
@
text
@/* $OpenBSD: dsa_key.c,v 1.21 2016/06/21 04:16:53 bcook Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <time.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_SHA

#include <openssl/bn.h>
#include <openssl/dsa.h>

static int dsa_builtin_keygen(DSA *dsa);

int
DSA_generate_key(DSA *dsa)
{
	if (dsa->meth->dsa_keygen)
		return dsa->meth->dsa_keygen(dsa);
	return dsa_builtin_keygen(dsa);
}

static int
dsa_builtin_keygen(DSA *dsa)
{
	int ok = 0;
	BN_CTX *ctx = NULL;
	BIGNUM *pub_key = NULL, *priv_key = NULL;

	if ((ctx = BN_CTX_new()) == NULL)
		goto err;

	if (dsa->priv_key == NULL) {
		if ((priv_key = BN_new()) == NULL)
			goto err;
	} else
		priv_key=dsa->priv_key;

	do {
		if (!BN_rand_range(priv_key, dsa->q))
			goto err;
	} while (BN_is_zero(priv_key));

	if (dsa->pub_key == NULL) {
		if ((pub_key = BN_new()) == NULL)
			goto err;
	} else
		pub_key=dsa->pub_key;
	
	{
		BIGNUM prk;

		BN_with_flags(&prk, priv_key, BN_FLG_CONSTTIME);

		if (!BN_mod_exp(pub_key, dsa->g, &prk, dsa->p, ctx))
			goto err;
	}

	dsa->priv_key = priv_key;
	dsa->pub_key = pub_key;
	ok = 1;

err:
	if (pub_key != NULL && dsa->pub_key == NULL)
		BN_free(pub_key);
	if (priv_key != NULL && dsa->priv_key == NULL)
		BN_free(priv_key);
	BN_CTX_free(ctx);
	return ok;
}
#endif
@


1.21
log
@Disable DSA_FLAG_NO_EXP_CONSTTIME, always enable constant-time behavior.

Improved patch from Cesar Pereida. See
https://github.com/libressl-portable/openbsd/pull/61 for more details.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_key.c,v 1.20 2014/10/18 17:20:40 jsing Exp $ */
d107 1
a107 1
		BIGNUM *prk = BN_new();
d109 1
a109 4
		if (prk == NULL)
			goto err;

		BN_with_flags(prk, priv_key, BN_FLG_CONSTTIME);
d111 1
a111 2
		if (!BN_mod_exp(pub_key, dsa->g, prk, dsa->p, ctx)) {
			BN_free(prk);
a112 2
		}
		BN_free(prk);
@


1.20
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_key.c,v 1.19 2014/07/12 16:03:37 miod Exp $ */
d107 1
a107 2
		BIGNUM local_prk;
		BIGNUM *prk;
d109 4
a112 6
		if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {
			BN_init(&local_prk);
			prk = &local_prk;
			BN_with_flags(prk, priv_key, BN_FLG_CONSTTIME);
		} else
			prk = priv_key;
d114 2
a115 1
		if (!BN_mod_exp(pub_key, dsa->g, prk, dsa->p, ctx))
d117 2
@


1.19
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_key.c,v 1.18 2014/07/11 08:44:48 jsing Exp $ */
a67 1
#include <openssl/rand.h>
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_key.c,v 1.17 2014/07/10 22:45:56 jsing Exp $ */
d131 1
a131 2
	if (ctx != NULL)
		BN_CTX_free(ctx);
@


1.17
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_key.c,v 1.16 2014/07/09 10:16:24 miod Exp $ */
a63 1
#include "cryptlib.h"
d65 1
@


1.16
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_key.c,v 1.15 2014/06/12 15:49:28 deraadt Exp $ */
d61 3
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d69 4
a72 3
int DSA_generate_key(DSA *dsa)
	{
	if(dsa->meth->dsa_keygen)
d75 1
a75 1
	}
d77 14
a90 13
static int dsa_builtin_keygen(DSA *dsa)
	{
	int ok=0;
	BN_CTX *ctx=NULL;
	BIGNUM *pub_key=NULL,*priv_key=NULL;

	if ((ctx=BN_CTX_new()) == NULL) goto err;

	if (dsa->priv_key == NULL)
		{
		if ((priv_key=BN_new()) == NULL) goto err;
		}
	else
d93 9
a101 9
	do
		if (!BN_rand_range(priv_key,dsa->q)) goto err;
	while (BN_is_zero(priv_key));

	if (dsa->pub_key == NULL)
		{
		if ((pub_key=BN_new()) == NULL) goto err;
		}
	else
d108 1
a108 2
		if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0)
			{
d112 1
a112 2
			}
		else
d115 2
a116 1
		if (!BN_mod_exp(pub_key,dsa->g,prk,dsa->p,ctx)) goto err;
d119 3
a121 3
	dsa->priv_key=priv_key;
	dsa->pub_key=pub_key;
	ok=1;
d124 8
a131 5
	if ((pub_key != NULL) && (dsa->pub_key == NULL)) BN_free(pub_key);
	if ((priv_key != NULL) && (dsa->priv_key == NULL)) BN_free(priv_key);
	if (ctx != NULL) BN_CTX_free(ctx);
	return(ok);
	}
@


1.14
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d1 1
a1 1
/* crypto/dsa/dsa_key.c */
@


1.13
log
@resolve conflicts
@
text
@a66 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a70 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dsa->meth->flags & DSA_FLAG_FIPS_METHOD)
			&& !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_GENERATE_KEY, DSA_R_NON_FIPS_DSA_METHOD);
		return 0;
		}
#endif
a72 4
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		return FIPS_dsa_generate_key(dsa);
#endif
@


1.12
log
@resolve conflicts, fix local changes
@
text
@d67 4
d75 8
d85 4
@


1.11
log
@resolve conflicts
@
text
@a66 2
#ifndef OPENSSL_FIPS

a127 2
#endif

@


1.10
log
@resolve conflicts
@
text
@d67 2
d130 2
@


1.9
log
@resolve conflicts
@
text
@a58 1
#ifndef OPENSSL_NO_SHA
d62 1
d67 2
a68 1
#ifndef OPENSSL_FIPS
d71 7
d110 1
a110 1
			BN_with_flags(prk, priv_key, BN_FLG_EXP_CONSTTIME);
a127 1
#endif
@


1.8
log
@resolve conflicts
@
text
@d93 4
d98 11
a108 1
	if (!BN_mod_exp(pub_key,dsa->g,priv_key,dsa->p,ctx)) goto err;
@


1.7
log
@merge with 0.9.7-beta1
@
text
@d67 1
d106 1
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a66 2
extern int	__BN_rand_range(BIGNUM *r, BIGNUM *range);

d83 1
a83 1
		if (!__BN_rand_range(priv_key,dsa->q)) goto err;
@


1.5
log
@import DSA changes from 0.9.6a (Bleichenbacher attack), ok provos@@/deraadt@@
@
text
@d59 1
a59 1
#ifndef NO_SHA
a62 1
#include <openssl/sha.h>
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d68 2
a72 1
	unsigned int i;
d85 3
a87 9
	i=BN_num_bits(dsa->q);
	for (;;)
		{
		if (!BN_rand(priv_key,i,0,0))
			goto err;
		if (BN_cmp(priv_key,dsa->q) >= 0)
			BN_sub(priv_key,priv_key,dsa->q);
		if (!BN_is_zero(priv_key)) break;
		}
@


1.3
log
@OpenSSL 0.9.5a merge
@
text
@d87 1
a87 1
		if (!BN_rand(priv_key,i,1,0))
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d87 2
a88 1
		BN_rand(priv_key,i,1,0);
@


1.1
log
@Initial revision
@
text
@d59 1
d63 4
a66 4
#include "sha.h"
#include "bn.h"
#include "dsa.h"
#include "rand.h"
d68 1
a68 2
int DSA_generate_key(dsa)
DSA *dsa;
d112 1
a112 1

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a58 1
#ifndef OPENSSL_NO_SHA
d62 4
a65 3
#include <openssl/bn.h>
#include <openssl/dsa.h>
#include <openssl/rand.h>
d67 2
a68 1
int DSA_generate_key(DSA *dsa)
d71 1
d84 8
a91 3
	do
		if (!BN_rand_range(priv_key,dsa->q)) goto err;
	while (BN_is_zero(priv_key));
d112 1
a112 1
#endif
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a66 1
#ifndef OPENSSL_FIPS
a104 1
#endif
@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@a92 4
	
	{
		BIGNUM local_prk;
		BIGNUM *prk;
d94 1
a94 11
		if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0)
			{
			BN_init(&local_prk);
			prk = &local_prk;
			BN_with_flags(prk, priv_key, BN_FLG_EXP_CONSTTIME);
			}
		else
			prk = priv_key;

		if (!BN_mod_exp(pub_key,dsa->g,prk,dsa->p,ctx)) goto err;
	}
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d59 1
a62 1
#ifndef OPENSSL_NO_SHA
d67 1
a67 2
static int dsa_builtin_keygen(DSA *dsa);

a69 7
	if(dsa->meth->dsa_keygen)
		return dsa->meth->dsa_keygen(dsa);
	return dsa_builtin_keygen(dsa);
	}

static int dsa_builtin_keygen(DSA *dsa)
	{
d102 1
a102 1
			BN_with_flags(prk, priv_key, BN_FLG_CONSTTIME);
d120 1
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a66 2
#ifndef OPENSSL_FIPS

a127 2
#endif

@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d67 2
d130 2
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a66 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a70 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dsa->meth->flags & DSA_FLAG_FIPS_METHOD)
			&& !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_GENERATE_KEY, DSA_R_NON_FIPS_DSA_METHOD);
		return 0;
		}
#endif
a72 4
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		return FIPS_dsa_generate_key(dsa);
#endif
@


