head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.10
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.6
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	butholakala:1.1.1.3
	openssl_1_0_1_g:1.1.1.3
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.8
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.4
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.2
	OPENBSD_5_3_BASE:1.1.1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.1.1.2.0.2
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.4
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	openssh_1_0_0_a:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yQEL1wOWIearrW15;

1.9
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.8;
commitid	id8dTrTMtnTn4fqt;

1.8
date	2014.07.09.11.08.31;	author miod;	state Exp;
branches;
next	1.7;
commitid	4o6pFk8W0ADUmpEM;

1.7
date	2014.07.09.10.16.24;	author miod;	state Exp;
branches;
next	1.6;
commitid	7IVFdVxu6X3GaaT8;

1.6
date	2014.06.12.20.40.57;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	UmuMloBn2KTi29qq;

1.5
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.22.21.12.16;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.11.03.02.32.10;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: dsa_pmeth.c,v 1.9 2014/07/10 13:58:22 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2006.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <limits.h>
#include <stdio.h>
#include <string.h>

#include <openssl/asn1t.h>
#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/x509.h>

#include "dsa_locl.h"
#include "evp_locl.h"

/* DSA pkey context structure */

typedef struct {
	/* Parameter gen parameters */
	int nbits;		/* size of p in bits (default: 1024) */
	int qbits;		/* size of q in bits (default: 160)  */
	const EVP_MD *pmd;	/* MD for parameter generation */
	/* Keygen callback info */
	int gentmp[2];
	/* message digest */
	const EVP_MD *md;	/* MD for the signature */
} DSA_PKEY_CTX;

static int
pkey_dsa_init(EVP_PKEY_CTX *ctx)
{
	DSA_PKEY_CTX *dctx;

	dctx = malloc(sizeof(DSA_PKEY_CTX));
	if (!dctx)
		return 0;
	dctx->nbits = 1024;
	dctx->qbits = 160;
	dctx->pmd = NULL;
	dctx->md = NULL;

	ctx->data = dctx;
	ctx->keygen_info = dctx->gentmp;
	ctx->keygen_info_count = 2;
	
	return 1;
}

static int
pkey_dsa_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
{
	DSA_PKEY_CTX *dctx, *sctx;

	if (!pkey_dsa_init(dst))
		return 0;
       	sctx = src->data;
	dctx = dst->data;
	dctx->nbits = sctx->nbits;
	dctx->qbits = sctx->qbits;
	dctx->pmd = sctx->pmd;
	dctx->md  = sctx->md;
	return 1;
}

static void
pkey_dsa_cleanup(EVP_PKEY_CTX *ctx)
{
	DSA_PKEY_CTX *dctx = ctx->data;

	free(dctx);
}

static int
pkey_dsa_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
    const unsigned char *tbs, size_t tbslen)
{
	int ret, type;
	unsigned int sltmp;
	DSA_PKEY_CTX *dctx = ctx->data;
	DSA *dsa = ctx->pkey->pkey.dsa;

	if (dctx->md)
		type = EVP_MD_type(dctx->md);
	else
		type = NID_sha1;

	ret = DSA_sign(type, tbs, tbslen, sig, &sltmp, dsa);

	if (ret <= 0)
		return ret;
	*siglen = sltmp;
	return 1;
}

static int
pkey_dsa_verify(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen,
    const unsigned char *tbs, size_t tbslen)
{
	int ret, type;
	DSA_PKEY_CTX *dctx = ctx->data;
	DSA *dsa = ctx->pkey->pkey.dsa;

	if (dctx->md)
		type = EVP_MD_type(dctx->md);
	else
		type = NID_sha1;

	ret = DSA_verify(type, tbs, tbslen, sig, siglen, dsa);

	return ret;
}

static int
pkey_dsa_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
{
	DSA_PKEY_CTX *dctx = ctx->data;

	switch (type) {
	case EVP_PKEY_CTRL_DSA_PARAMGEN_BITS:
		if (p1 < 256)
			return -2;
		dctx->nbits = p1;
		return 1;

	case EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS:
		if (p1 != 160 && p1 != 224 && p1 && p1 != 256)
			return -2;
		dctx->qbits = p1;
		return 1;

	case EVP_PKEY_CTRL_DSA_PARAMGEN_MD:
		switch (EVP_MD_type((const EVP_MD *)p2)) {
		case NID_sha1:
		case NID_sha224:
		case NID_sha256:
			break;
		default:
			DSAerr(DSA_F_PKEY_DSA_CTRL, DSA_R_INVALID_DIGEST_TYPE);
			return 0;
		}
		dctx->md = p2;
		return 1;

	case EVP_PKEY_CTRL_MD:
		switch (EVP_MD_type((const EVP_MD *)p2)) {
		case NID_sha1:
		case NID_dsa:
		case NID_dsaWithSHA:
		case NID_sha224:
		case NID_sha256:
		case NID_sha384:
		case NID_sha512:
			break;
		default:
			DSAerr(DSA_F_PKEY_DSA_CTRL, DSA_R_INVALID_DIGEST_TYPE);
			return 0;
		}
		dctx->md = p2;
		return 1;

	case EVP_PKEY_CTRL_DIGESTINIT:
	case EVP_PKEY_CTRL_PKCS7_SIGN:
	case EVP_PKEY_CTRL_CMS_SIGN:
		return 1;
		
	case EVP_PKEY_CTRL_PEER_KEY:
		DSAerr(DSA_F_PKEY_DSA_CTRL,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;	
	default:
		return -2;
	}
}
			
static int
pkey_dsa_ctrl_str(EVP_PKEY_CTX *ctx, const char *type, const char *value)
{
 	long lval;
	char *ep;

	if (!strcmp(type, "dsa_paramgen_bits")) {
		int nbits;

		errno = 0;
		lval = strtol(value, &ep, 10);
		if (value[0] == '\0' || *ep != '\0')
			goto not_a_number;
		if ((errno == ERANGE &&
		    (lval == LONG_MAX || lval == LONG_MIN)) ||
		    (lval > INT_MAX || lval < INT_MIN))
			goto out_of_range;
		nbits = lval;
		return EVP_PKEY_CTX_set_dsa_paramgen_bits(ctx, nbits);
	} else if (!strcmp(type, "dsa_paramgen_q_bits")) {
		int qbits;

		errno = 0;
		lval = strtol(value, &ep, 10);
		if (value[0] == '\0' || *ep != '\0')
			goto not_a_number;
		if ((errno == ERANGE &&
		    (lval == LONG_MAX || lval == LONG_MIN)) ||
		    (lval > INT_MAX || lval < INT_MIN))
			goto out_of_range;
		qbits = lval;
		return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA,
		    EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS,
		    qbits, NULL);
	} else if (!strcmp(type, "dsa_paramgen_md")) {
		return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA,
		    EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DSA_PARAMGEN_MD, 0, 
		    (void *)EVP_get_digestbyname(value));
	}
not_a_number:
out_of_range:
	return -2;
}

static int
pkey_dsa_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
{
	DSA *dsa = NULL;
	DSA_PKEY_CTX *dctx = ctx->data;
	BN_GENCB *pcb, cb;
	int ret;

	if (ctx->pkey_gencb) {
		pcb = &cb;
		evp_pkey_set_cb_translate(pcb, ctx);
	} else
		pcb = NULL;
	dsa = DSA_new();
	if (!dsa)
		return 0;
	ret = dsa_builtin_paramgen(dsa, dctx->nbits, dctx->qbits, dctx->pmd,
	    NULL, 0, NULL, NULL, NULL, pcb);
	if (ret)
		EVP_PKEY_assign_DSA(pkey, dsa);
	else
		DSA_free(dsa);
	return ret;
}

static int
pkey_dsa_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
{
	DSA *dsa = NULL;

	if (ctx->pkey == NULL) {
		DSAerr(DSA_F_PKEY_DSA_KEYGEN, DSA_R_NO_PARAMETERS_SET);
		return 0;
	}
	dsa = DSA_new();
	if (!dsa)
		return 0;
	EVP_PKEY_assign_DSA(pkey, dsa);
	/* Note: if error return, pkey is freed by parent routine */
	if (!EVP_PKEY_copy_parameters(pkey, ctx->pkey))
		return 0;
	return DSA_generate_key(pkey->pkey.dsa);
}

const EVP_PKEY_METHOD dsa_pkey_meth = {
	.pkey_id = EVP_PKEY_DSA,
	.flags = EVP_PKEY_FLAG_AUTOARGLEN,

	.init = pkey_dsa_init,
	.copy = pkey_dsa_copy,
	.cleanup = pkey_dsa_cleanup,

	.paramgen = pkey_dsa_paramgen,

	.keygen = pkey_dsa_keygen,

	.sign = pkey_dsa_sign,

	.verify = pkey_dsa_verify,

	.ctrl = pkey_dsa_ctrl,
	.ctrl_str = pkey_dsa_ctrl_str
};
@


1.9
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_pmeth.c,v 1.8 2014/07/09 11:08:31 miod Exp $ */
a62 1
#include "cryptlib.h"
d64 3
d68 2
a69 2
#include <openssl/evp.h>
#include <openssl/bn.h>
a70 1
#include "dsa_locl.h"
@


1.8
log
@Make use of this wonderful modern C construct known as a `switch', instead of
8-line if() tests.
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_pmeth.c,v 1.7 2014/07/09 10:16:24 miod Exp $ */
d59 1
d61 2
a62 1
#include <limits.h>
@


1.7
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_pmeth.c,v 1.6 2014/06/12 20:40:57 deraadt Exp $ */
d185 6
a190 3
		if (EVP_MD_type((const EVP_MD *)p2) != NID_sha1 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha224 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha256) {
d198 10
a207 7
		if (EVP_MD_type((const EVP_MD *)p2) != NID_sha1 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_dsa &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_dsaWithSHA &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha224 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha256 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha384 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha512) {
@


1.6
log
@replace atoi() calls with strtol().  Follow the idiomatic pattern in our
manual page strictly.  Return -2 if the strings are not strict numbers.

The numbers remain in the range of "int".  Range checking for these parameters
is done later in the pkey_*_ctl() functions, or sometimes in functions much
further downstream... but not always!!!
ok millert miod mikeb
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_pmeth.c,v 1.5 2014/06/12 15:49:28 deraadt Exp $ */
d71 1
a71 2
typedef struct
	{
d80 1
a80 1
	} DSA_PKEY_CTX;
d82 3
a84 2
static int pkey_dsa_init(EVP_PKEY_CTX *ctx)
	{
d86 1
d100 1
a100 1
	}
d102 3
a104 2
static int pkey_dsa_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
	{
d106 1
d116 1
a116 1
	}
d118 3
a120 2
static void pkey_dsa_cleanup(EVP_PKEY_CTX *ctx)
	{
d122 1
d124 1
a124 1
	}
d126 4
a129 3
static int pkey_dsa_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
					const unsigned char *tbs, size_t tbslen)
	{
d146 1
a146 1
	}
d148 4
a151 4
static int pkey_dsa_verify(EVP_PKEY_CTX *ctx,
					const unsigned char *sig, size_t siglen,
					const unsigned char *tbs, size_t tbslen)
	{
d164 1
a164 1
	}
d166 3
a168 2
static int pkey_dsa_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
	{
d170 3
a172 3
	switch (type)
		{
		case EVP_PKEY_CTRL_DSA_PARAMGEN_BITS:
d178 1
a178 1
		case EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS:
d184 2
a185 2
		case EVP_PKEY_CTRL_DSA_PARAMGEN_MD:
		if (EVP_MD_type((const EVP_MD *)p2) != NID_sha1   &&
d187 1
a187 2
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha256)
			{
d190 1
a190 1
			}
d194 4
a197 4
		case EVP_PKEY_CTRL_MD:
		if (EVP_MD_type((const EVP_MD *)p2) != NID_sha1   &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_dsa    &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_dsaWithSHA    &&
d201 1
a201 2
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha512)
			{
d204 1
a204 1
			}
d208 3
a210 3
		case EVP_PKEY_CTRL_DIGESTINIT:
		case EVP_PKEY_CTRL_PKCS7_SIGN:
		case EVP_PKEY_CTRL_CMS_SIGN:
d213 5
a217 5
		case EVP_PKEY_CTRL_PEER_KEY:
			DSAerr(DSA_F_PKEY_DSA_CTRL,
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
			return -2;	
		default:
a218 2

		}
d220 1
d222 3
a224 3
static int pkey_dsa_ctrl_str(EVP_PKEY_CTX *ctx,
			const char *type, const char *value)
	{
d235 2
a236 1
		if ((errno == ERANGE && (lval == LONG_MAX || lval == LONG_MIN)) ||
d241 1
a241 2
	}
	if (!strcmp(type, "dsa_paramgen_q_bits")) {
d248 2
a249 1
		if ((errno == ERANGE && (lval == LONG_MAX || lval == LONG_MIN)) ||
d253 6
a258 6
		return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA, EVP_PKEY_OP_PARAMGEN,
		    EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS, qbits, NULL);
	}
	if (!strcmp(type, "dsa_paramgen_md")){
		return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA, EVP_PKEY_OP_PARAMGEN,
		    EVP_PKEY_CTRL_DSA_PARAMGEN_MD, 0, 
d264 1
a264 1
	}
d266 3
a268 2
static int pkey_dsa_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
	{
d273 2
a274 2
	if (ctx->pkey_gencb)
		{
d277 1
a277 2
		}
	else
d283 1
a283 1
	                           NULL, 0, NULL, NULL, NULL, pcb);
d289 1
a289 1
	}
d291 3
a293 2
static int pkey_dsa_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
	{
d295 2
a296 2
	if (ctx->pkey == NULL)
		{
d299 1
a299 1
		}
d308 1
a308 1
	}
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
d221 4
a224 2
	if (!strcmp(type, "dsa_paramgen_bits"))
		{
d226 9
a234 1
		nbits = atoi(value);
d236 12
a247 4
		}
	if (!strcmp(type, "dsa_paramgen_q_bits"))
		{
		int qbits = atoi(value);
d249 3
a251 4
		                         EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS, qbits, NULL);
		}
	if (!strcmp(type, "dsa_paramgen_md"))
		{
d253 5
a257 3
		                         EVP_PKEY_CTRL_DSA_PARAMGEN_MD, 0, 
		                         (void *)EVP_get_digestbyname(value));
		}
@


1.4
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@d1 1
@


1.3
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d116 1
a116 2
	if (dctx)
		free(dctx);
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d284 3
a286 7
const EVP_PKEY_METHOD dsa_pkey_meth = 
	{
	EVP_PKEY_DSA,
	EVP_PKEY_FLAG_AUTOARGLEN,
	pkey_dsa_init,
	pkey_dsa_copy,
	pkey_dsa_cleanup,
d288 3
a290 2
	0,
	pkey_dsa_paramgen,
d292 1
a292 2
	0,
	pkey_dsa_keygen,
d294 1
a294 2
	0,
	pkey_dsa_sign,
d296 1
a296 2
	0,
	pkey_dsa_verify,
d298 1
a298 1
	0,0,
d300 3
a302 13
	0,0,0,0,

	0,0,

	0,0,

	0,0,

	pkey_dsa_ctrl,
	pkey_dsa_ctrl_str


	};
@


1.1
log
@Initial revision
@
text
@d84 1
a84 1
	dctx = OPENSSL_malloc(sizeof(DSA_PKEY_CTX));
d117 1
a117 1
		OPENSSL_free(dctx);
d190 1
d192 3
a194 1
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha256)
d258 1
a258 1
	                           NULL, 0, NULL, NULL, pcb);
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL 1.0.0e
@
text
@a189 1
		    EVP_MD_type((const EVP_MD *)p2) != NID_dsaWithSHA    &&
@


1.1.1.3
log
@import OpenSSL-1.0.1c
@
text
@d192 1
a192 3
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha256 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha384 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha512)
d256 1
a256 1
	                           NULL, 0, NULL, NULL, NULL, pcb);
@


