head	1.17;
access;
symbols
	OPENBSD_6_0:1.16.0.10
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.8
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.6
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	butholakala:1.12
	openssl_1_0_1_g:1.1.1.9
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	openssl_1_0_1_c:1.1.1.9
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	openssl_1_0_0_f:1.1.1.8
	openssl_1_0_0_e:1.1.1.8
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	openssh_1_0_0_a:1.1.1.8
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	openssl_0_9_8_k:1.1.1.7
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	openssl_0_9_8_j:1.1.1.7
	openssl_0_9_8_h:1.1.1.6
	pre_openssl_0_9_8h:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	openssl_0_9_7j:1.1.1.5
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2016.09.03.11.33.36;	author beck;	state dead;
branches;
next	1.16;
commitid	HnbXxsegngek41U2;

1.16
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.15;
commitid	yQEL1wOWIearrW15;

1.15
date	2014.07.09.10.16.24;	author miod;	state Exp;
branches;
next	1.14;
commitid	7IVFdVxu6X3GaaT8;

1.14
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.09.12.15.43;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.20;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.32;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.08;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.06;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.16;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.05;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.08;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.06.27.05.05.32;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.01.09.12.13.55;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: dsa_vrf.c,v 1.16 2014/07/11 08:44:48 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Original version from Steven Schoch <schoch@@sheba.arc.nasa.gov> */

#include <openssl/dsa.h>

int
DSA_do_verify(const unsigned char *dgst, int dgst_len, DSA_SIG *sig, DSA *dsa)
{
	return dsa->meth->dsa_do_verify(dgst, dgst_len, sig, dsa);
}
@


1.16
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_vrf.c,v 1.15 2014/07/09 10:16:24 miod Exp $ */
@


1.15
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_vrf.c,v 1.14 2014/06/12 15:49:28 deraadt Exp $ */
a60 1
#include "cryptlib.h"
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 3
a66 3
int DSA_do_verify(const unsigned char *dgst, int dgst_len, DSA_SIG *sig,
		  DSA *dsa)
	{
d68 1
a68 1
	}
@


1.13
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d1 1
a1 1
/* crypto/dsa/dsa_vrf.c */
@


1.12
log
@resolve conflicts
@
text
@a66 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dsa->meth->flags & DSA_FLAG_FIPS_METHOD)
			&& !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_DO_VERIFY, DSA_R_NON_FIPS_DSA_METHOD);
		return -1;
		}
#endif
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d67 8
a75 21
	}

/* data has already been hashed (probably with SHA or SHA-1). */
/* returns
 *      1: correct signature
 *      0: incorrect signature
 *     -1: error
 */
int DSA_verify(int type, const unsigned char *dgst, int dgst_len,
	     const unsigned char *sigbuf, int siglen, DSA *dsa)
	{
	DSA_SIG *s;
	int ret=-1;

	s = DSA_SIG_new();
	if (s == NULL) return(ret);
	if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;
	ret=DSA_do_verify(dgst,dgst_len,s,dsa);
err:
	DSA_SIG_free(s);
	return(ret);
@


1.10
log
@resolve conflicts
@
text
@a60 1
#include <stdio.h>
a61 1
#include <openssl/bn.h>
a62 7
#include <openssl/rand.h>
#include <openssl/asn1.h>
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

#include <openssl/asn1_mac.h>
a66 7
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_DO_VERIFY, DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return 0;
		}
#endif
d68 21
@


1.9
log
@resolve conflicts
@
text
@d67 4
d76 7
a83 21
	}

/* data has already been hashed (probably with SHA or SHA-1). */
/* returns
 *      1: correct signature
 *      0: incorrect signature
 *     -1: error
 */
int DSA_verify(int type, const unsigned char *dgst, int dgst_len,
	     const unsigned char *sigbuf, int siglen, DSA *dsa)
	{
	DSA_SIG *s;
	int ret=-1;

	s = DSA_SIG_new();
	if (s == NULL) return(ret);
	if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;
	ret=DSA_do_verify(dgst,dgst_len,s,dsa);
err:
	DSA_SIG_free(s);
	return(ret);
@


1.8
log
@resolve conflicts
@
text
@a67 4
#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif
#include <openssl/fips.h>
a71 5
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_FIPS_EXTERNAL_METHOD_ALLOW)
		&& !FIPS_dsa_check(dsa))
		return -1;
#endif
@


1.7
log
@resolve conflicts
@
text
@d77 2
a78 1
	if(FIPS_mode() && !FIPS_dsa_check(dsa))
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d68 4
d76 4
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a67 1
#include <openssl/engine.h>
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d73 1
a73 1
	return ENGINE_get_DSA(dsa->engine)->dsa_do_verify(dgst, dgst_len, sig, dsa);
d83 1
a83 1
	     unsigned char *sigbuf, int siglen, DSA *dsa)
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 1
d73 1
a73 1
	return dsa->meth->dsa_do_verify(dgst, dgst_len, sig, dsa);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d72 1
a72 67
	BN_CTX *ctx;
	BIGNUM u1,u2,t1;
	BN_MONT_CTX *mont=NULL;
	int ret = -1;

	if ((ctx=BN_CTX_new()) == NULL) goto err;
	BN_init(&u1);
	BN_init(&u2);
	BN_init(&t1);

	/* Calculate W = inv(S) mod Q
	 * save W in u2 */
	if ((BN_mod_inverse(&u2,sig->s,dsa->q,ctx)) == NULL) goto err;

	/* save M in u1 */
	if (BN_bin2bn(dgst,dgst_len,&u1) == NULL) goto err;

	/* u1 = M * w mod q */
	if (!BN_mod_mul(&u1,&u1,&u2,dsa->q,ctx)) goto err;

	/* u2 = r * w mod q */
	if (!BN_mod_mul(&u2,sig->r,&u2,dsa->q,ctx)) goto err;

	if ((dsa->method_mont_p == NULL) && (dsa->flags & DSA_FLAG_CACHE_MONT_P))
		{
		if ((dsa->method_mont_p=(char *)BN_MONT_CTX_new()) != NULL)
			if (!BN_MONT_CTX_set((BN_MONT_CTX *)dsa->method_mont_p,
				dsa->p,ctx)) goto err;
		}
	mont=(BN_MONT_CTX *)dsa->method_mont_p;

#if 0
	{
	BIGNUM t2;

	BN_init(&t2);
	/* v = ( g^u1 * y^u2 mod p ) mod q */
	/* let t1 = g ^ u1 mod p */
	if (!BN_mod_exp_mont(&t1,dsa->g,&u1,dsa->p,ctx,mont)) goto err;
	/* let t2 = y ^ u2 mod p */
	if (!BN_mod_exp_mont(&t2,dsa->pub_key,&u2,dsa->p,ctx,mont)) goto err;
	/* let u1 = t1 * t2 mod p */
	if (!BN_mod_mul(&u1,&t1,&t2,dsa->p,ctx)) goto err_bn;
	BN_free(&t2);
	}
	/* let u1 = u1 mod q */
	if (!BN_mod(&u1,&u1,dsa->q,ctx)) goto err;
#else
	{
	if (!BN_mod_exp2_mont(&t1,dsa->g,&u1,dsa->pub_key,&u2,dsa->p,ctx,mont))
		goto err;
	/* BN_copy(&u1,&t1); */
	/* let u1 = u1 mod q */
	if (!BN_mod(&u1,&t1,dsa->q,ctx)) goto err;
	}
#endif
	/* V is now in u1.  If the signature is correct, it will be
	 * equal to R. */
	ret=(BN_ucmp(&u1, sig->r) == 0);

	err:
	if (ret != 1) DSAerr(DSA_F_DSA_DO_VERIFY,ERR_R_BN_LIB);
	if (ctx != NULL) BN_CTX_free(ctx);
	BN_free(&u1);
	BN_free(&u2);
	BN_free(&t1);
	return(ret);
@


1.1
log
@Initial revision
@
text
@d59 1
a59 1
/* Origional version from Steven Schoch <schoch@@sheba.arc.nasa.gov> */
d63 5
a67 5
#include "bn.h"
#include "dsa.h"
#include "rand.h"
#include "asn1.h"
#include "asn1_mac.h"
d69 2
a70 13
/* data has already been hashed (probably with SHA or SHA-1). */
/* returns
 *	 1: correct signature
 *	 0: incorrect signature
 *	-1: error
 */
int DSA_verify(type,dgst,dgst_len,sigbuf,siglen, dsa)
int type;
unsigned char *dgst;
int dgst_len;
unsigned char *sigbuf;
int siglen;
DSA *dsa;
a71 4
	/* The next 3 are used by the M_ASN1 macros */
	long length=siglen;
	ASN1_CTX c;
	unsigned char **pp= &sigbuf;
d73 2
a74 4
	BIGNUM *r=NULL;
	BIGNUM *t1=NULL,*t2=NULL;
	BIGNUM *u1=NULL,*u2=NULL;
	ASN1_INTEGER *bs=NULL;
d77 4
a80 14
	ctx=BN_CTX_new();
	if (ctx == NULL) goto err;

	t1=BN_new();
	t2=BN_new();
	if (t1 == NULL || t2 == NULL) goto err;

	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
        M_ASN1_D2I_get(bs,d2i_ASN1_INTEGER);
        if ((r=BN_bin2bn(bs->data,bs->length,NULL)) == NULL) goto err_bn;
        M_ASN1_D2I_get(bs,d2i_ASN1_INTEGER);
        if ((u1=BN_bin2bn(bs->data,bs->length,NULL)) == NULL) goto err_bn;
	if (!asn1_Finish(&c)) goto err;
d84 1
a84 1
	if ((u2=BN_mod_inverse(u1,dsa->q,ctx)) == NULL) goto err_bn;
d87 1
a87 1
	if (BN_bin2bn(dgst,dgst_len,u1) == NULL) goto err_bn;
d90 1
a90 1
	if (!BN_mod_mul(u1,u1,u2,dsa->q,ctx)) goto err_bn;
d93 1
a93 1
	if (!BN_mod_mul(u2,r,u2,dsa->q,ctx)) goto err_bn;
d95 13
d110 1
a110 1
	if (!BN_mod_exp(t1,dsa->g,u1,dsa->p,ctx)) goto err_bn;
d112 1
a112 1
	if (!BN_mod_exp(t2,dsa->pub_key,u2,dsa->p,ctx)) goto err_bn;
d114 10
a123 1
	if (!BN_mod_mul(u1,t1,t2,dsa->p,ctx)) goto err_bn;
d125 3
a127 1
	if (!BN_mod(u1,u1,dsa->q,ctx)) goto err_bn;
d130 4
a133 11
	ret=(BN_ucmp(u1, r) == 0);
	if (0)
		{
err: /* ASN1 error */
		DSAerr(DSA_F_DSA_VERIFY,c.error);
		}
	if (0)
		{
err_bn: /* BN error */
		DSAerr(DSA_F_DSA_VERIFY,ERR_R_BN_LIB);
		}
d135 24
a158 6
	if (r != NULL) BN_free(r);
	if (t1 != NULL) BN_free(t1);
	if (t2 != NULL) BN_free(t2);
	if (u1 != NULL) BN_free(u1);
	if (u2 != NULL) BN_free(u2);
	if (bs != NULL) ASN1_BIT_STRING_free(bs);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
/* Original version from Steven Schoch <schoch@@sheba.arc.nasa.gov> */
d63 5
a67 12
#include <openssl/bn.h>
#include <openssl/dsa.h>
#include <openssl/rand.h>
#include <openssl/asn1.h>
#include <openssl/asn1_mac.h>
#include <openssl/engine.h>

int DSA_do_verify(const unsigned char *dgst, int dgst_len, DSA_SIG *sig,
		  DSA *dsa)
	{
	return dsa->meth->dsa_do_verify(dgst, dgst_len, sig, dsa);
	}
d71 3
a73 3
 *      1: correct signature
 *      0: incorrect signature
 *     -1: error
d75 7
a81 2
int DSA_verify(int type, const unsigned char *dgst, int dgst_len,
	     const unsigned char *sigbuf, int siglen, DSA *dsa)
d83 38
a120 2
	DSA_SIG *s;
	int ret=-1;
d122 29
a150 6
	s = DSA_SIG_new();
	if (s == NULL) return(ret);
	if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;
	ret=DSA_do_verify(dgst,dgst_len,s,dsa);
err:
	DSA_SIG_free(s);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d68 1
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a67 4
#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif
#include <openssl/fips.h>
a71 4
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !FIPS_dsa_check(dsa))
		return -1;
#endif
@


1.1.1.5
log
@import of openssl-0.9.7j
@
text
@d77 1
a77 2
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_FIPS_EXTERNAL_METHOD_ALLOW)
		&& !FIPS_dsa_check(dsa))
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d68 4
d76 5
@


1.1.1.7
log
@import openssl-0.9.8j
@
text
@a66 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a71 7
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_DO_VERIFY, DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return 0;
		}
#endif
d73 21
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@d61 1
d63 1
d65 7
d76 7
a83 21
	}

/* data has already been hashed (probably with SHA or SHA-1). */
/* returns
 *      1: correct signature
 *      0: incorrect signature
 *     -1: error
 */
int DSA_verify(int type, const unsigned char *dgst, int dgst_len,
	     const unsigned char *sigbuf, int siglen, DSA *dsa)
	{
	DSA_SIG *s;
	int ret=-1;

	s = DSA_SIG_new();
	if (s == NULL) return(ret);
	if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;
	ret=DSA_do_verify(dgst,dgst_len,s,dsa);
err:
	DSA_SIG_free(s);
	return(ret);
@


1.1.1.9
log
@import OpenSSL-1.0.1c
@
text
@a66 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dsa->meth->flags & DSA_FLAG_FIPS_METHOD)
			&& !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_DO_VERIFY, DSA_R_NON_FIPS_DSA_METHOD);
		return -1;
		}
#endif
d68 21
@


