head	1.20;
access;
symbols
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.4
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	butholakala:1.1.1.2
	openssl_1_0_1_g:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.8
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.4
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.2
	OPENBSD_5_3_BASE:1.1.1.2
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.1.1.1.0.6
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.8
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	openssh_1_0_0_a:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.09.03.11.33.36;	author beck;	state dead;
branches;
next	1.19;
commitid	HnbXxsegngek41U2;

1.19
date	2016.03.01.07.04.41;	author doug;	state Exp;
branches;
next	1.18;
commitid	1Gr4KOIwxZscSTRO;

1.18
date	2015.09.10.18.12.55;	author miod;	state Exp;
branches;
next	1.17;
commitid	uptFJWKEN5v0b8Fm;

1.17
date	2015.02.14.15.11.22;	author miod;	state Exp;
branches;
next	1.16;
commitid	6I2Z5AHZghOAhHnj;

1.16
date	2015.02.11.04.05.14;	author beck;	state Exp;
branches;
next	1.15;
commitid	BiQ5VBK0FHpjQNna;

1.15
date	2015.02.11.03.55.42;	author beck;	state Exp;
branches;
next	1.14;
commitid	1omCojArcEf3nCrU;

1.14
date	2014.07.13.12.45.01;	author miod;	state Exp;
branches;
next	1.13;
commitid	EKLQkEonEhg6POVp;

1.13
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.12;
commitid	G74O1dmRukKsW7IJ;

1.12
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.10;
commitid	nzndm3zqPmFurSaK;

1.10
date	2014.07.09.22.55.17;	author tedu;	state Exp;
branches;
next	1.9;
commitid	5JdGfnLK1lLuGWd1;

1.9
date	2014.07.09.10.16.24;	author miod;	state Exp;
branches;
next	1.8;
commitid	7IVFdVxu6X3GaaT8;

1.8
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.06.07.14.41.56;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	2nvnQBrv22dLtvTt;

1.6
date	2014.05.30.06.24.17;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.22.21.12.16;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: dsa_ameth.c,v 1.19 2016/03/01 07:04:41 doug Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2006.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1.h>
#include <openssl/bn.h>
#include <openssl/dsa.h>
#include <openssl/err.h>
#include <openssl/x509.h>

#ifndef OPENSSL_NO_CMS
#include <openssl/cms.h>
#endif

#include "asn1_locl.h"

static int
dsa_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
{
	const unsigned char *p, *pm;
	int pklen, pmlen;
	int ptype;
	void *pval;
	ASN1_STRING *pstr;
	X509_ALGOR *palg;
	ASN1_INTEGER *public_key = NULL;

	DSA *dsa = NULL;

	if (!X509_PUBKEY_get0_param(NULL, &p, &pklen, &palg, pubkey))
		return 0;
	X509_ALGOR_get0(NULL, &ptype, &pval, palg);

	if (ptype == V_ASN1_SEQUENCE) {
		pstr = pval;	
		pm = pstr->data;
		pmlen = pstr->length;

		if (!(dsa = d2i_DSAparams(NULL, &pm, pmlen))) {
			DSAerr(DSA_F_DSA_PUB_DECODE, DSA_R_DECODE_ERROR);
			goto err;
		}
	} else if (ptype == V_ASN1_NULL || ptype == V_ASN1_UNDEF) {
		if (!(dsa = DSA_new())) {
			DSAerr(DSA_F_DSA_PUB_DECODE, ERR_R_MALLOC_FAILURE);
			goto err;
			}
	} else {
		DSAerr(DSA_F_DSA_PUB_DECODE, DSA_R_PARAMETER_ENCODING_ERROR);
		goto err;
	}

	if (!(public_key=d2i_ASN1_INTEGER(NULL, &p, pklen))) {
		DSAerr(DSA_F_DSA_PUB_DECODE, DSA_R_DECODE_ERROR);
		goto err;
	}

	if (!(dsa->pub_key = ASN1_INTEGER_to_BN(public_key, NULL))) {
		DSAerr(DSA_F_DSA_PUB_DECODE, DSA_R_BN_DECODE_ERROR);
		goto err;
	}

	ASN1_INTEGER_free(public_key);
	EVP_PKEY_assign_DSA(pkey, dsa);
	return 1;

err:
	if (public_key)
		ASN1_INTEGER_free(public_key);
	DSA_free(dsa);
	return 0;
}

static int
dsa_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
{
	DSA *dsa;
	void *pval = NULL;
	int ptype;
	unsigned char *penc = NULL;
	int penclen;

	dsa = pkey->pkey.dsa;
	if (pkey->save_parameters && dsa->p && dsa->q && dsa->g) {
		ASN1_STRING *str;

		str = ASN1_STRING_new();
		if (str == NULL) {
			DSAerr(DSA_F_DSA_PUB_ENCODE, ERR_R_MALLOC_FAILURE);
			goto err;
		}
		str->length = i2d_DSAparams(dsa, &str->data);
		if (str->length <= 0) {
			DSAerr(DSA_F_DSA_PUB_ENCODE, ERR_R_MALLOC_FAILURE);
			ASN1_STRING_free(str);
			goto err;
		}
		pval = str;
		ptype = V_ASN1_SEQUENCE;
	} else
		ptype = V_ASN1_UNDEF;

	dsa->write_params = 0;

	penclen = i2d_DSAPublicKey(dsa, &penc);

	if (penclen <= 0) {
		DSAerr(DSA_F_DSA_PUB_ENCODE, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (X509_PUBKEY_set0_param(pk, OBJ_nid2obj(EVP_PKEY_DSA), ptype, pval,
	    penc, penclen))
		return 1;

err:
	free(penc);
	ASN1_STRING_free(pval);

	return 0;
}

/* In PKCS#8 DSA: you just get a private key integer and parameters in the
 * AlgorithmIdentifier the pubkey must be recalculated.
 */
static int
dsa_priv_decode(EVP_PKEY *pkey, PKCS8_PRIV_KEY_INFO *p8)
{
	const unsigned char *p, *pm;
	int pklen, pmlen;
	int ptype;
	void *pval;
	ASN1_STRING *pstr;
	X509_ALGOR *palg;
	ASN1_INTEGER *privkey = NULL;
	BN_CTX *ctx = NULL;
	DSA *dsa = NULL;

	int ret = 0;

	if (!PKCS8_pkey_get0(NULL, &p, &pklen, &palg, p8))
		return 0;
	X509_ALGOR_get0(NULL, &ptype, &pval, palg);
	if (ptype != V_ASN1_SEQUENCE)
		goto decerr;

	if ((privkey = d2i_ASN1_INTEGER(NULL, &p, pklen)) == NULL)
		goto decerr;
	if (privkey->type == V_ASN1_NEG_INTEGER)
		goto decerr;

	pstr = pval;
	pm = pstr->data;
	pmlen = pstr->length;
	if (!(dsa = d2i_DSAparams(NULL, &pm, pmlen)))
		goto decerr;
	/* We have parameters now set private key */
	if (!(dsa->priv_key = ASN1_INTEGER_to_BN(privkey, NULL))) {
		DSAerr(DSA_F_DSA_PRIV_DECODE,DSA_R_BN_ERROR);
		goto dsaerr;
	}
	/* Calculate public key */
	if (!(dsa->pub_key = BN_new())) {
		DSAerr(DSA_F_DSA_PRIV_DECODE, ERR_R_MALLOC_FAILURE);
		goto dsaerr;
	}
	if (!(ctx = BN_CTX_new())) {
		DSAerr(DSA_F_DSA_PRIV_DECODE, ERR_R_MALLOC_FAILURE);
		goto dsaerr;
	}

	if (!BN_mod_exp(dsa->pub_key, dsa->g, dsa->priv_key, dsa->p, ctx)) {
		DSAerr(DSA_F_DSA_PRIV_DECODE,DSA_R_BN_ERROR);
		goto dsaerr;
	}

	if (!EVP_PKEY_assign_DSA(pkey, dsa))
		goto decerr;

	ret = 1;
	goto done;

decerr:
	DSAerr(DSA_F_DSA_PRIV_DECODE, DSA_R_DECODE_ERROR);
dsaerr:
	DSA_free(dsa);
done:
	BN_CTX_free(ctx);
	ASN1_INTEGER_free(privkey);
	return ret;
}

static int
dsa_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
{
	ASN1_STRING *params = NULL;
	ASN1_INTEGER *prkey = NULL;
	unsigned char *dp = NULL;
	int dplen;

	params = ASN1_STRING_new();
	if (!params) {
		DSAerr(DSA_F_DSA_PRIV_ENCODE, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	params->length = i2d_DSAparams(pkey->pkey.dsa, &params->data);
	if (params->length <= 0) {
		DSAerr(DSA_F_DSA_PRIV_ENCODE, ERR_R_MALLOC_FAILURE);
		goto err;
	}
	params->type = V_ASN1_SEQUENCE;

	/* Get private key into integer */
	prkey = BN_to_ASN1_INTEGER(pkey->pkey.dsa->priv_key, NULL);
	if (!prkey) {
		DSAerr(DSA_F_DSA_PRIV_ENCODE, DSA_R_BN_ERROR);
		goto err;
	}

	dplen = i2d_ASN1_INTEGER(prkey, &dp);

	ASN1_INTEGER_free(prkey);
	prkey = NULL;

	if (!PKCS8_pkey_set0(p8, OBJ_nid2obj(NID_dsa), 0, V_ASN1_SEQUENCE,
	    params, dp, dplen))
		goto err;

	return 1;

err:
	free(dp);
	ASN1_STRING_free(params);
	ASN1_INTEGER_free(prkey);
	return 0;
}

static int
int_dsa_size(const EVP_PKEY *pkey)
{
	return DSA_size(pkey->pkey.dsa);
}

static int
dsa_bits(const EVP_PKEY *pkey)
{
	return BN_num_bits(pkey->pkey.dsa->p);
}

static int
dsa_missing_parameters(const EVP_PKEY *pkey)
{
	DSA *dsa;

	dsa = pkey->pkey.dsa;
	if (dsa->p == NULL || dsa->q == NULL || dsa->g == NULL)
		return 1;
	return 0;
}

static int
dsa_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
{
	BIGNUM *a;

	if ((a = BN_dup(from->pkey.dsa->p)) == NULL)
		return 0;
	BN_free(to->pkey.dsa->p);
	to->pkey.dsa->p = a;

	if ((a = BN_dup(from->pkey.dsa->q)) == NULL)
		return 0;
	BN_free(to->pkey.dsa->q);
	to->pkey.dsa->q = a;

	if ((a = BN_dup(from->pkey.dsa->g)) == NULL)
		return 0;
	BN_free(to->pkey.dsa->g);
	to->pkey.dsa->g = a;
	return 1;
}

static int
dsa_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
{
	if (BN_cmp(a->pkey.dsa->p, b->pkey.dsa->p) ||
	    BN_cmp(a->pkey.dsa->q, b->pkey.dsa->q) ||
	    BN_cmp(a->pkey.dsa->g, b->pkey.dsa->g))
		return 0;
	else
		return 1;
}

static int
dsa_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
{
	if (BN_cmp(b->pkey.dsa->pub_key, a->pkey.dsa->pub_key) != 0)
		return 0;
	else
		return 1;
}

static void
int_dsa_free(EVP_PKEY *pkey)
{
	DSA_free(pkey->pkey.dsa);
}

static void
update_buflen(const BIGNUM *b, size_t *pbuflen)
{
	size_t i;

	if (!b)
		return;
	if (*pbuflen < (i = (size_t)BN_num_bytes(b)))
		*pbuflen = i;
}

static int
do_dsa_print(BIO *bp, const DSA *x, int off, int ptype)
{
	unsigned char *m = NULL;
	int ret = 0;
	size_t buf_len = 0;
	const char *ktype = NULL;
	const BIGNUM *priv_key, *pub_key;

	if (ptype == 2)
		priv_key = x->priv_key;
	else
		priv_key = NULL;

	if (ptype > 0)
		pub_key = x->pub_key;
	else
		pub_key = NULL;

	if (ptype == 2)
		ktype = "Private-Key";
	else if (ptype == 1)
		ktype = "Public-Key";
	else
		ktype = "DSA-Parameters";

	update_buflen(x->p, &buf_len);
	update_buflen(x->q, &buf_len);
	update_buflen(x->g, &buf_len);
	update_buflen(priv_key, &buf_len);
	update_buflen(pub_key, &buf_len);

	m = malloc(buf_len + 10);
	if (m == NULL) {
		DSAerr(DSA_F_DO_DSA_PRINT, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (priv_key) {
		if (!BIO_indent(bp, off, 128))
			goto err;
		if (BIO_printf(bp, "%s: (%d bit)\n", ktype,
		    BN_num_bits(x->p)) <= 0)
			goto err;
	}

	if (!ASN1_bn_print(bp, "priv:", priv_key, m, off))
		goto err;
	if (!ASN1_bn_print(bp, "pub: ", pub_key, m, off))
		goto err;
	if (!ASN1_bn_print(bp, "P:   ", x->p, m, off))
		goto err;
	if (!ASN1_bn_print(bp, "Q:   ", x->q, m, off))
		goto err;
	if (!ASN1_bn_print(bp, "G:   ", x->g, m, off))
		goto err;
	ret = 1;
err:
	free(m);
	return(ret);
}

static int
dsa_param_decode(EVP_PKEY *pkey, const unsigned char **pder, int derlen)
{
	DSA *dsa;

	if (!(dsa = d2i_DSAparams(NULL, pder, derlen))) {
		DSAerr(DSA_F_DSA_PARAM_DECODE, ERR_R_DSA_LIB);
		return 0;
	}
	EVP_PKEY_assign_DSA(pkey, dsa);
	return 1;
}

static int
dsa_param_encode(const EVP_PKEY *pkey, unsigned char **pder)
{
	return i2d_DSAparams(pkey->pkey.dsa, pder);
}

static int
dsa_param_print(BIO *bp, const EVP_PKEY *pkey, int indent, ASN1_PCTX *ctx)
{
	return do_dsa_print(bp, pkey->pkey.dsa, indent, 0);
}

static int
dsa_pub_print(BIO *bp, const EVP_PKEY *pkey, int indent, ASN1_PCTX *ctx)
{
	return do_dsa_print(bp, pkey->pkey.dsa, indent, 1);
}

static int
dsa_priv_print(BIO *bp, const EVP_PKEY *pkey, int indent, ASN1_PCTX *ctx)
{
	return do_dsa_print(bp, pkey->pkey.dsa, indent, 2);
}

static int
old_dsa_priv_decode(EVP_PKEY *pkey, const unsigned char **pder, int derlen)
{
	DSA *dsa;
	BN_CTX *ctx = NULL;
	BIGNUM *j, *p1, *newp1;

	if (!(dsa = d2i_DSAPrivateKey(NULL, pder, derlen))) {
		DSAerr(DSA_F_OLD_DSA_PRIV_DECODE, ERR_R_DSA_LIB);
		return 0;
	}

	ctx = BN_CTX_new();
	if (ctx == NULL)
		goto err;

	/*
	 * Check that p and q are consistent with each other.
	 */

	j = BN_CTX_get(ctx);
	p1 = BN_CTX_get(ctx);
	newp1 = BN_CTX_get(ctx);
	if (j == NULL || p1 == NULL || newp1 == NULL)
		goto err;
	/* p1 = p - 1 */
	if (BN_sub(p1, dsa->p, BN_value_one()) == 0)
		goto err;
	/* j = (p - 1) / q */
	if (BN_div(j, NULL, p1, dsa->q, ctx) == 0)
		goto err;
	/* q * j should == p - 1 */
	if (BN_mul(newp1, dsa->q, j, ctx) == 0)
		goto err;
	if (BN_cmp(newp1, p1) != 0) {
		DSAerr(DSA_F_DSA_PARAM_DECODE, DSA_R_BAD_Q_VALUE);
		goto err;
	}

	/*
	 * Check that q is not a composite number.
	 */

	if (BN_is_prime_ex(dsa->q, BN_prime_checks, ctx, NULL) == 0) {
		DSAerr(DSA_F_DSA_PARAM_DECODE, DSA_R_BAD_Q_VALUE);
		goto err;
	}

	BN_CTX_free(ctx);

	EVP_PKEY_assign_DSA(pkey, dsa);
	return 1;

err:
	BN_CTX_free(ctx);
	DSA_free(dsa);
	return 0;
}

static int
old_dsa_priv_encode(const EVP_PKEY *pkey, unsigned char **pder)
{
	return i2d_DSAPrivateKey(pkey->pkey.dsa, pder);
}

static int
dsa_sig_print(BIO *bp, const X509_ALGOR *sigalg, const ASN1_STRING *sig,
    int indent, ASN1_PCTX *pctx)
{
	DSA_SIG *dsa_sig;
	const unsigned char *p;

	if (!sig) {
		if (BIO_puts(bp, "\n") <= 0)
			return 0;
		else
			return 1;
	}
	p = sig->data;
	dsa_sig = d2i_DSA_SIG(NULL, &p, sig->length);
	if (dsa_sig) {
		int rv = 0;
		size_t buf_len = 0;
		unsigned char *m = NULL;

		update_buflen(dsa_sig->r, &buf_len);
		update_buflen(dsa_sig->s, &buf_len);
		m = malloc(buf_len + 10);
		if (m == NULL) {
			DSAerr(DSA_F_DSA_SIG_PRINT, ERR_R_MALLOC_FAILURE);
			goto err;
		}

		if (BIO_write(bp, "\n", 1) != 1)
			goto err;

		if (!ASN1_bn_print(bp, "r:   ", dsa_sig->r, m, indent))
			goto err;
		if (!ASN1_bn_print(bp, "s:   ", dsa_sig->s, m, indent))
			goto err;
		rv = 1;
err:
		free(m);
		DSA_SIG_free(dsa_sig);
		return rv;
	}
	return X509_signature_dump(bp, sig, indent);
}

static int
dsa_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
{
	switch (op) {
	case ASN1_PKEY_CTRL_PKCS7_SIGN:
		if (arg1 == 0) {
			int snid, hnid;
			X509_ALGOR *alg1, *alg2;

			PKCS7_SIGNER_INFO_get0_algs(arg2, NULL, &alg1, &alg2);
			if (alg1 == NULL || alg1->algorithm == NULL)
				return -1;
			hnid = OBJ_obj2nid(alg1->algorithm);
			if (hnid == NID_undef)
				return -1;
			if (!OBJ_find_sigid_by_algs(&snid, hnid,
			    EVP_PKEY_id(pkey)))
				return -1; 
			X509_ALGOR_set0(alg2, OBJ_nid2obj(snid), V_ASN1_UNDEF,
			    0);
		}
		return 1;
#ifndef OPENSSL_NO_CMS
	case ASN1_PKEY_CTRL_CMS_SIGN:
		if (arg1 == 0) {
			int snid, hnid;
			X509_ALGOR *alg1, *alg2;

			CMS_SignerInfo_get0_algs(arg2, NULL, NULL, &alg1, &alg2);
			if (alg1 == NULL || alg1->algorithm == NULL)
				return -1;
			hnid = OBJ_obj2nid(alg1->algorithm);
			if (hnid == NID_undef)
				return -1;
			if (!OBJ_find_sigid_by_algs(&snid, hnid,
			    EVP_PKEY_id(pkey)))
				return -1; 
			X509_ALGOR_set0(alg2, OBJ_nid2obj(snid), V_ASN1_UNDEF,
			    0);
		}
		return 1;
#endif

	case ASN1_PKEY_CTRL_DEFAULT_MD_NID:
		*(int *)arg2 = NID_sha1;
		return 2;

	default:
		return -2;
	}
}

/* NB these are sorted in pkey_id order, lowest first */

const EVP_PKEY_ASN1_METHOD dsa_asn1_meths[] = {
	{
		.pkey_id = EVP_PKEY_DSA2,
		.pkey_base_id = EVP_PKEY_DSA,
		.pkey_flags = ASN1_PKEY_ALIAS
	},

	{
		.pkey_id = EVP_PKEY_DSA1,
		.pkey_base_id = EVP_PKEY_DSA,
		.pkey_flags = ASN1_PKEY_ALIAS
	},

	{
		.pkey_id = EVP_PKEY_DSA4,
		.pkey_base_id = EVP_PKEY_DSA,
		.pkey_flags = ASN1_PKEY_ALIAS
	},

	{
		.pkey_id = EVP_PKEY_DSA3,
		.pkey_base_id = EVP_PKEY_DSA,
		.pkey_flags = ASN1_PKEY_ALIAS
	},

	{
		.pkey_id = EVP_PKEY_DSA,
		.pkey_base_id = EVP_PKEY_DSA,

		.pem_str = "DSA",
		.info = "OpenSSL DSA method",

		.pub_decode = dsa_pub_decode,
		.pub_encode = dsa_pub_encode,
		.pub_cmp = dsa_pub_cmp,
		.pub_print = dsa_pub_print,

		.priv_decode = dsa_priv_decode,
		.priv_encode = dsa_priv_encode,
		.priv_print = dsa_priv_print,

		.pkey_size = int_dsa_size,
		.pkey_bits = dsa_bits,

		.param_decode = dsa_param_decode,
		.param_encode = dsa_param_encode,
		.param_missing = dsa_missing_parameters,
		.param_copy = dsa_copy_parameters,
		.param_cmp = dsa_cmp_parameters,
		.param_print = dsa_param_print,
		.sig_print = dsa_sig_print,

		.pkey_free = int_dsa_free,
		.pkey_ctrl = dsa_pkey_ctrl,
		.old_priv_decode = old_dsa_priv_decode,
		.old_priv_encode = old_dsa_priv_encode
	}
};
@


1.19
log
@Remove support for ancient, broken DSA implementations.

Based on a few OpenSSL commits:

Remove ancient DSA workarounds
commit ab4a81f69ec88d06c9d8de15326b9296d7f498ed

Remove workaround for broken DSA implementations using negative integers
commit dfb10af92e9663ce4eefaa1d6b678817fa85344d

Typo in error name (EVP_R_DECODE_ERROR -> DSA_R_DECODE_ERROR)
commit f6fb7f1856d443185c23f1a5968c08b4269dd37d

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.18 2015/09/10 18:12:55 miod Exp $ */
@


1.18
log
@When loading a DSA key from an raw (without DH parameters) ASN.1 serialization,
perform some consistency checks on its `p' and `q' values, and return an
error if the checks failed.

Thanks for Georgi Guninski (guninski at guninski dot com) for mentioning
the possibility of a weak (non prime) q value and providing a test case.

See https://cpunks.org/pipermail/cypherpunks/2015-September/009007.html
for a longer discussion.

ok bcook@@ beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.17 2015/02/14 15:11:22 miod Exp $ */
a183 1
	
a194 1
	STACK_OF(ASN1_TYPE) *ndsa = NULL;
d197 2
d202 2
d205 4
a208 41
	/* Check for broken DSA PKCS#8, UGH! */
	if (*p == (V_ASN1_SEQUENCE|V_ASN1_CONSTRUCTED)) {
		ASN1_TYPE *t1, *t2;
	    	if (!(ndsa = d2i_ASN1_SEQUENCE_ANY(NULL, &p, pklen)))
			goto decerr;
		if (sk_ASN1_TYPE_num(ndsa) != 2)
			goto decerr;
		/*
		 * Handle Two broken types:
	    	 * SEQUENCE {parameters, priv_key}
		 * SEQUENCE {pub_key, priv_key}
		 */

		t1 = sk_ASN1_TYPE_value(ndsa, 0);
		t2 = sk_ASN1_TYPE_value(ndsa, 1);
		if (t1->type == V_ASN1_SEQUENCE) {
			p8->broken = PKCS8_EMBEDDED_PARAM;
			pval = t1->value.ptr;
		} else if (ptype == V_ASN1_SEQUENCE)
			p8->broken = PKCS8_NS_DB;
		else
			goto decerr;

		if (t2->type != V_ASN1_INTEGER)
			goto decerr;

		privkey = t2->value.integer;
	} else {
		const unsigned char *q = p;

		if (!(privkey=d2i_ASN1_INTEGER(NULL, &p, pklen)))
			goto decerr;
		if (privkey->type == V_ASN1_NEG_INTEGER) {
			p8->broken = PKCS8_NEG_PRIVKEY;
			ASN1_INTEGER_free(privkey);
			if (!(privkey = d2i_ASN1_UINTEGER(NULL, &q, pklen)))
				goto decerr;
		}
		if (ptype != V_ASN1_SEQUENCE)
			goto decerr;
	}
d210 1
a210 1
	pstr = pval;	
d229 1
a229 1
			
d235 2
a236 6
	EVP_PKEY_assign_DSA(pkey, dsa);
	BN_CTX_free(ctx);
	if (ndsa)
		sk_ASN1_TYPE_pop_free(ndsa, ASN1_TYPE_free);
	else
		ASN1_INTEGER_free(privkey);
d238 2
a239 1
	return 1;
d242 1
a242 1
	DSAerr(DSA_F_DSA_PRIV_DECODE, EVP_R_DECODE_ERROR);
d244 2
d247 2
a248 6
	if (ndsa)
		sk_ASN1_TYPE_pop_free(ndsa, ASN1_TYPE_free);
	else
		ASN1_INTEGER_free(privkey);
	DSA_free(dsa);
	return 0;
@


1.17
log
@Coverity CID 21733 (unchecked allocation), 78823 (leak on error).
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.16 2015/02/11 04:05:14 beck Exp $ */
d522 2
d525 1
a525 1
	if (!(dsa = d2i_DSAPrivateKey (NULL, pder, derlen))) {
d529 39
d570 5
@


1.16
log
@Guenther has plans for OPENSSL_NO_CMS, so revert this for the moment.
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.15 2015/02/11 03:55:42 beck Exp $ */
d146 4
d153 1
@


1.15
log
@get rid of OPENSSL_NO_CMS code we do not use.
ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.14 2014/07/13 12:45:01 miod Exp $ */
d69 3
d598 20
@


1.14
log
@dsa_priv_decode(): only destroy the object we've created, and with the
  appropriate function. Checking for privkey != NULL is not enough since
  privkey points to a member of ndsa if ndsa != NULL.
dsa_priv_encode(): possible double free in error path.
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.13 2014/07/12 16:03:37 miod Exp $ */
a68 3
#ifndef OPENSSL_NO_CMS
#include <openssl/cms.h>
#endif
a594 20
#ifndef OPENSSL_NO_CMS
	case ASN1_PKEY_CTRL_CMS_SIGN:
		if (arg1 == 0) {
			int snid, hnid;
			X509_ALGOR *alg1, *alg2;

			CMS_SignerInfo_get0_algs(arg2, NULL, NULL, &alg1, &alg2);
			if (alg1 == NULL || alg1->algorithm == NULL)
				return -1;
			hnid = OBJ_obj2nid(alg1->algorithm);
			if (hnid == NID_undef)
				return -1;
			if (!OBJ_find_sigid_by_algs(&snid, hnid,
			    EVP_PKEY_id(pkey)))
				return -1; 
			X509_ALGOR_set0(alg2, OBJ_nid2obj(snid), V_ASN1_UNDEF,
			    0);
		}
		return 1;
#endif
@


1.13
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.12 2014/07/11 08:44:48 jsing Exp $ */
d278 3
a280 1
	if (privkey)
a281 1
	sk_ASN1_TYPE_pop_free(ndsa, ASN1_TYPE_free);
d317 1
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.11 2014/07/10 22:45:56 jsing Exp $ */
d128 1
a128 2
	if (dsa)
		DSA_free(dsa);
d266 1
a266 1
	BN_CTX_free (ctx);
d277 1
a277 1
	BN_CTX_free (ctx);
d360 1
a360 2
	if (to->pkey.dsa->p != NULL)
		BN_free(to->pkey.dsa->p);
d365 1
a365 2
	if (to->pkey.dsa->q != NULL)
		BN_free(to->pkey.dsa->q);
d370 1
a370 2
	if (to->pkey.dsa->g != NULL)
		BN_free(to->pkey.dsa->g);
@


1.11
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.10 2014/07/09 22:55:17 tedu Exp $ */
a62 2
#include "cryptlib.h"
#include <openssl/x509.h>
d64 1
d66 3
a68 1
#include <openssl/bn.h>
d72 1
@


1.10
log
@ASN1_STRING_free can handle NULL, so callers don't need to check. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.9 2014/07/09 10:16:24 miod Exp $ */
d60 3
@


1.9
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_ameth.c,v 1.8 2014/06/12 15:49:28 deraadt Exp $ */
d167 1
a167 2
	if (pval)
		ASN1_STRING_free(pval);
d321 2
a322 4
	if (params != NULL)
		ASN1_STRING_free(params);
	if (prkey != NULL)
		ASN1_INTEGER_free(prkey);
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d70 3
a72 2
static int dsa_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
	{
d87 1
a87 3

	if (ptype == V_ASN1_SEQUENCE)
		{
d92 1
a92 2
		if (!(dsa = d2i_DSAparams(NULL, &pm, pmlen)))
			{
a94 2
			}

d96 2
a97 4
	else if ((ptype == V_ASN1_NULL) || (ptype == V_ASN1_UNDEF))
		{
		if (!(dsa = DSA_new()))
			{
d101 1
a101 3
		}
	else
		{
d104 1
a104 1
		}
d106 1
a106 2
	if (!(public_key=d2i_ASN1_INTEGER(NULL, &p, pklen)))
		{
d109 1
a109 1
		}
d111 1
a111 2
	if (!(dsa->pub_key = ASN1_INTEGER_to_BN(public_key, NULL)))
		{
d114 1
a114 1
		}
d120 1
a120 1
	err:
d126 1
d128 3
a130 4
	}

static int dsa_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
	{
d137 2
a138 3
	dsa=pkey->pkey.dsa;
	if (pkey->save_parameters && dsa->p && dsa->q && dsa->g)
		{
d140 1
d143 1
a143 2
		if (str->length <= 0)
			{
d146 1
a146 1
			}
d149 1
a149 2
		}
	else
d152 1
a152 1
	dsa->write_params=0;
d156 1
a156 2
	if (penclen <= 0)
		{
d159 1
a159 1
		}
d161 2
a162 2
	if (X509_PUBKEY_set0_param(pk, OBJ_nid2obj(EVP_PKEY_DSA),
				ptype, pval, penc, penclen))
d165 1
a165 1
	err:
d171 1
a171 1
	}
d177 3
a179 2
static int dsa_priv_decode(EVP_PKEY *pkey, PKCS8_PRIV_KEY_INFO *p8)
	{
a187 1

d196 1
a196 2
	if (*p == (V_ASN1_SEQUENCE|V_ASN1_CONSTRUCTED))
		{
d198 1
a198 1
	    	if(!(ndsa = d2i_ASN1_SEQUENCE_ANY(NULL, &p, pklen)))
d202 2
a203 1
		/* Handle Two broken types:
d210 1
a210 2
		if (t1->type == V_ASN1_SEQUENCE)
			{
d213 1
a213 2
			}
		else if (ptype == V_ASN1_SEQUENCE)
d222 1
a222 3
		}
	else
		{
d224 1
d227 1
a227 2
		if (privkey->type == V_ASN1_NEG_INTEGER)
			{
d230 1
a230 1
			if (!(privkey=d2i_ASN1_UINTEGER(NULL, &q, pklen)))
d232 1
a232 1
			}
d235 1
a235 1
		}
d243 1
a243 2
	if (!(dsa->priv_key = ASN1_INTEGER_to_BN(privkey, NULL)))
		{
d246 1
a246 1
		}
d248 1
a248 2
	if (!(dsa->pub_key = BN_new()))
		{
d251 2
a252 3
		}
	if (!(ctx = BN_CTX_new()))
		{
d255 1
a255 1
		}
d257 1
a257 2
	if (!BN_mod_exp(dsa->pub_key, dsa->g, dsa->priv_key, dsa->p, ctx))
		{
d260 1
a260 1
		}
d264 1
a264 1
	if(ndsa)
d271 1
a271 1
	decerr:
d273 1
a273 1
	dsaerr:
d280 1
a280 1
	}
d282 2
a283 1
static int dsa_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
d291 2
a292 4

	if (!params)
		{
		DSAerr(DSA_F_DSA_PRIV_ENCODE,ERR_R_MALLOC_FAILURE);
d294 1
a294 1
		}
d297 2
a298 3
	if (params->length <= 0)
		{
		DSAerr(DSA_F_DSA_PRIV_ENCODE,ERR_R_MALLOC_FAILURE);
d300 1
a300 1
		}
d305 2
a306 4

	if (!prkey)
		{
		DSAerr(DSA_F_DSA_PRIV_ENCODE,DSA_R_BN_ERROR);
d308 1
a308 1
		}
d314 2
a315 2
	if (!PKCS8_pkey_set0(p8, OBJ_nid2obj(NID_dsa), 0,
				V_ASN1_SEQUENCE, params, dp, dplen))
d329 5
a333 4
static int int_dsa_size(const EVP_PKEY *pkey)
	{
	return(DSA_size(pkey->pkey.dsa));
	}
d335 3
a337 2
static int dsa_bits(const EVP_PKEY *pkey)
	{
d339 1
a339 1
	}
d341 3
a343 2
static int dsa_missing_parameters(const EVP_PKEY *pkey)
	{
d345 4
a348 3
	dsa=pkey->pkey.dsa;
	if ((dsa->p == NULL) || (dsa->q == NULL) || (dsa->g == NULL))
			return 1;
d350 1
a350 1
	}
d352 3
a354 2
static int dsa_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
	{
d357 1
a357 1
	if ((a=BN_dup(from->pkey.dsa->p)) == NULL)
d361 1
a361 1
	to->pkey.dsa->p=a;
d363 1
a363 1
	if ((a=BN_dup(from->pkey.dsa->q)) == NULL)
d367 1
a367 1
	to->pkey.dsa->q=a;
d369 1
a369 1
	if ((a=BN_dup(from->pkey.dsa->g)) == NULL)
d373 1
a373 1
	to->pkey.dsa->g=a;
d375 1
a375 1
	}
d377 6
a382 5
static int dsa_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
	{
	if (	BN_cmp(a->pkey.dsa->p,b->pkey.dsa->p) ||
		BN_cmp(a->pkey.dsa->q,b->pkey.dsa->q) ||
		BN_cmp(a->pkey.dsa->g,b->pkey.dsa->g))
d386 1
a386 1
	}
d388 4
a391 3
static int dsa_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
	{
	if (BN_cmp(b->pkey.dsa->pub_key,a->pkey.dsa->pub_key) != 0)
d395 1
a395 1
	}
d397 3
a399 2
static void int_dsa_free(EVP_PKEY *pkey)
	{
d401 1
a401 1
	}
d403 3
a405 2
static void update_buflen(const BIGNUM *b, size_t *pbuflen)
	{
d407 1
d411 2
a412 2
			*pbuflen = i;
	}
d414 6
a419 5
static int do_dsa_print(BIO *bp, const DSA *x, int off, int ptype)
	{
	unsigned char *m=NULL;
	int ret=0;
	size_t buf_len=0;
a420 1

d446 3
a448 4
	m = malloc(buf_len+10);
	if (m == NULL)
		{
		DSAerr(DSA_F_DO_DSA_PRINT,ERR_R_MALLOC_FAILURE);
d450 1
a450 1
		}
d452 7
a458 7
	if (priv_key)
		{
		if(!BIO_indent(bp,off,128))
		   goto err;
		if (BIO_printf(bp,"%s: (%d bit)\n",ktype, BN_num_bits(x->p))
			<= 0) goto err;
		}
d460 5
a464 1
	if (!ASN1_bn_print(bp,"priv:",priv_key,m,off))
d466 1
a466 1
	if (!ASN1_bn_print(bp,"pub: ",pub_key,m,off))
d468 3
a470 4
	if (!ASN1_bn_print(bp,"P:   ",x->p,m,off)) goto err;
	if (!ASN1_bn_print(bp,"Q:   ",x->q,m,off)) goto err;
	if (!ASN1_bn_print(bp,"G:   ",x->g,m,off)) goto err;
	ret=1;
d474 1
a474 1
	}
d476 3
a478 3
static int dsa_param_decode(EVP_PKEY *pkey,
					const unsigned char **pder, int derlen)
	{
d480 2
a481 2
	if (!(dsa = d2i_DSAparams(NULL, pder, derlen)))
		{
d484 1
a484 1
		}
d487 1
a487 1
	}
d489 3
a491 2
static int dsa_param_encode(const EVP_PKEY *pkey, unsigned char **pder)
	{
d493 1
a493 1
	}
d495 3
a497 3
static int dsa_param_print(BIO *bp, const EVP_PKEY *pkey, int indent,
							ASN1_PCTX *ctx)
	{
d499 1
a499 1
	}
d501 3
a503 3
static int dsa_pub_print(BIO *bp, const EVP_PKEY *pkey, int indent,
							ASN1_PCTX *ctx)
	{
d505 1
a505 1
	}
d507 3
a509 4

static int dsa_priv_print(BIO *bp, const EVP_PKEY *pkey, int indent,
							ASN1_PCTX *ctx)
	{
d511 1
a511 1
	}
d513 3
a515 3
static int old_dsa_priv_decode(EVP_PKEY *pkey,
					const unsigned char **pder, int derlen)
	{
d517 2
a518 2
	if (!(dsa = d2i_DSAPrivateKey (NULL, pder, derlen)))
		{
d521 1
a521 1
		}
d524 1
a524 1
	}
d526 3
a528 2
static int old_dsa_priv_encode(const EVP_PKEY *pkey, unsigned char **pder)
	{
d530 1
a530 1
	}
d532 4
a535 4
static int dsa_sig_print(BIO *bp, const X509_ALGOR *sigalg,
					const ASN1_STRING *sig,
					int indent, ASN1_PCTX *pctx)
	{
d538 2
a539 2
	if (!sig)
		{
d544 1
a544 1
		}
d547 1
a547 2
	if (dsa_sig)
		{
d550 2
a551 1
		unsigned char *m=NULL;
d554 3
a556 4
		m = malloc(buf_len+10);
		if (m == NULL)
			{
			DSAerr(DSA_F_DSA_SIG_PRINT,ERR_R_MALLOC_FAILURE);
d558 1
a558 1
			}
d563 1
a563 1
		if (!ASN1_bn_print(bp,"r:   ",dsa_sig->r,m,indent))
d565 1
a565 1
		if (!ASN1_bn_print(bp,"s:   ",dsa_sig->s,m,indent))
d568 1
a568 1
		err:
d572 1
a572 1
		}
d574 1
a574 1
	}
d576 6
a581 7
static int dsa_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
	{
	switch (op)
		{
		case ASN1_PKEY_CTRL_PKCS7_SIGN:
		if (arg1 == 0)
			{
d584 1
d591 2
a592 1
			if (!OBJ_find_sigid_by_algs(&snid, hnid, EVP_PKEY_id(pkey)))
d594 3
a596 2
			X509_ALGOR_set0(alg2, OBJ_nid2obj(snid), V_ASN1_UNDEF, 0);
			}
d599 2
a600 3
		case ASN1_PKEY_CTRL_CMS_SIGN:
		if (arg1 == 0)
			{
d603 1
d610 2
a611 1
			if (!OBJ_find_sigid_by_algs(&snid, hnid, EVP_PKEY_id(pkey)))
d613 3
a615 2
			X509_ALGOR_set0(alg2, OBJ_nid2obj(snid), V_ASN1_UNDEF, 0);
			}
d619 1
a619 1
		case ASN1_PKEY_CTRL_DEFAULT_MD_NID:
d623 1
a623 1
		default:
a624 3

		}

d626 1
@


1.7
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
@


1.6
log
@more: no need to null check before free; ok guenther
@
text
@d460 1
a460 1
	m=(unsigned char *)malloc(buf_len+10);
@


1.5
log
@more: no need for null check before free
ok tedu guenther
@
text
@d484 1
a484 1
	if (m != NULL) free(m);
@


1.4
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@d345 1
a345 2
	if (dp != NULL)
		free(dp);
@


1.3
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d178 1
a178 2
	if (penc)
		free(penc);
d582 1
a582 2
		if (m)
			free(m);
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d643 1
a643 1
const EVP_PKEY_ASN1_METHOD dsa_asn1_meths[] = 
d645 4
d650 24
a673 58
		{
		EVP_PKEY_DSA2,
		EVP_PKEY_DSA,
		ASN1_PKEY_ALIAS
		},

		{
		EVP_PKEY_DSA1,
		EVP_PKEY_DSA,
		ASN1_PKEY_ALIAS
		},

		{
		EVP_PKEY_DSA4,
		EVP_PKEY_DSA,
		ASN1_PKEY_ALIAS
		},

		{
		EVP_PKEY_DSA3,
		EVP_PKEY_DSA,
		ASN1_PKEY_ALIAS
		},

		{
		EVP_PKEY_DSA,
		EVP_PKEY_DSA,
		0,

		"DSA",
		"OpenSSL DSA method",

		dsa_pub_decode,
		dsa_pub_encode,
		dsa_pub_cmp,
		dsa_pub_print,

		dsa_priv_decode,
		dsa_priv_encode,
		dsa_priv_print,

		int_dsa_size,
		dsa_bits,

		dsa_param_decode,
		dsa_param_encode,
		dsa_missing_parameters,
		dsa_copy_parameters,
		dsa_cmp_parameters,
		dsa_param_print,
		dsa_sig_print,

		int_dsa_free,
		dsa_pkey_ctrl,
		old_dsa_priv_decode,
		old_dsa_priv_encode
		}
	};
d675 26
@


1.1
log
@Initial revision
@
text
@d179 1
a179 1
		OPENSSL_free(penc);
d347 1
a347 1
		OPENSSL_free(dp);
d462 1
a462 1
	m=(unsigned char *)OPENSSL_malloc(buf_len+10);
d486 1
a486 1
	if (m != NULL) OPENSSL_free(m);
d545 46
d696 1
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@a544 46
static int dsa_sig_print(BIO *bp, const X509_ALGOR *sigalg,
					const ASN1_STRING *sig,
					int indent, ASN1_PCTX *pctx)
	{
	DSA_SIG *dsa_sig;
	const unsigned char *p;
	if (!sig)
		{
		if (BIO_puts(bp, "\n") <= 0)
			return 0;
		else
			return 1;
		}
	p = sig->data;
	dsa_sig = d2i_DSA_SIG(NULL, &p, sig->length);
	if (dsa_sig)
		{
		int rv = 0;
		size_t buf_len = 0;
		unsigned char *m=NULL;
		update_buflen(dsa_sig->r, &buf_len);
		update_buflen(dsa_sig->s, &buf_len);
		m = OPENSSL_malloc(buf_len+10);
		if (m == NULL)
			{
			DSAerr(DSA_F_DSA_SIG_PRINT,ERR_R_MALLOC_FAILURE);
			goto err;
			}

		if (BIO_write(bp, "\n", 1) != 1)
			goto err;

		if (!ASN1_bn_print(bp,"r:   ",dsa_sig->r,m,indent))
			goto err;
		if (!ASN1_bn_print(bp,"s:   ",dsa_sig->s,m,indent))
			goto err;
		rv = 1;
		err:
		if (m)
			OPENSSL_free(m);
		DSA_SIG_free(dsa_sig);
		return rv;
		}
	return X509_signature_dump(bp, sig, indent);
	}

a649 1
		dsa_sig_print,
@

