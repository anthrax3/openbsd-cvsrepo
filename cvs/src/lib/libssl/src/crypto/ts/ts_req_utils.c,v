head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	butholakala:1.1.1.1
	openssl_1_0_1_g:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	openssl_1_0_1_c:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.6
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.8
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	openssh_1_0_0_a:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.3;
commitid	yQEL1wOWIearrW15;

1.3
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.04.21.16.32.06;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: ts_req_utils.c,v 1.3 2014/06/12 15:49:31 deraadt Exp $ */
/* Written by Zoltan Glozik (zglozik@@stones.com) for the OpenSSL
 * project 2002.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/ts.h>
#include <openssl/x509v3.h>

int
TS_REQ_set_version(TS_REQ *a, long version)
{
	return ASN1_INTEGER_set(a->version, version);
}

long
TS_REQ_get_version(const TS_REQ *a)
{
	return ASN1_INTEGER_get(a->version);
}

int
TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)
{
	TS_MSG_IMPRINT *new_msg_imprint;

	if (a->msg_imprint == msg_imprint)
		return 1;
	new_msg_imprint = TS_MSG_IMPRINT_dup(msg_imprint);
	if (new_msg_imprint == NULL) {
		TSerr(TS_F_TS_REQ_SET_MSG_IMPRINT, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	TS_MSG_IMPRINT_free(a->msg_imprint);
	a->msg_imprint = new_msg_imprint;
	return 1;
}

TS_MSG_IMPRINT *
TS_REQ_get_msg_imprint(TS_REQ *a)
{
	return a->msg_imprint;
}

int
TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg)
{
	X509_ALGOR *new_alg;

	if (a->hash_algo == alg)
		return 1;
	new_alg = X509_ALGOR_dup(alg);
	if (new_alg == NULL) {
		TSerr(TS_F_TS_MSG_IMPRINT_SET_ALGO, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	X509_ALGOR_free(a->hash_algo);
	a->hash_algo = new_alg;
	return 1;
}

X509_ALGOR *
TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a)
{
	return a->hash_algo;
}

int
TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len)
{
	return ASN1_OCTET_STRING_set(a->hashed_msg, d, len);
}

ASN1_OCTET_STRING *
TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a)
{
	return a->hashed_msg;
}

int
TS_REQ_set_policy_id(TS_REQ *a, ASN1_OBJECT *policy)
{
	ASN1_OBJECT *new_policy;

	if (a->policy_id == policy)
		return 1;
	new_policy = OBJ_dup(policy);
	if (new_policy == NULL) {
		TSerr(TS_F_TS_REQ_SET_POLICY_ID, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	ASN1_OBJECT_free(a->policy_id);
	a->policy_id = new_policy;
	return 1;
}

ASN1_OBJECT *
TS_REQ_get_policy_id(TS_REQ *a)
{
	return a->policy_id;
}

int
TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce)
{
	ASN1_INTEGER *new_nonce;

	if (a->nonce == nonce)
		return 1;
	new_nonce = ASN1_INTEGER_dup(nonce);
	if (new_nonce == NULL) {
		TSerr(TS_F_TS_REQ_SET_NONCE, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	ASN1_INTEGER_free(a->nonce);
	a->nonce = new_nonce;
	return 1;
}

const ASN1_INTEGER *
TS_REQ_get_nonce(const TS_REQ *a)
{
	return a->nonce;
}

int
TS_REQ_set_cert_req(TS_REQ *a, int cert_req)
{
	a->cert_req = cert_req ? 0xFF : 0x00;
	return 1;
}

int
TS_REQ_get_cert_req(const TS_REQ *a)
{
	return a->cert_req ? 1 : 0;
}

STACK_OF(X509_EXTENSION) *TS_REQ_get_exts(TS_REQ *a)
{
	return a->extensions;
}

void
TS_REQ_ext_free(TS_REQ *a)
{
	if (!a)
		return;
	sk_X509_EXTENSION_pop_free(a->extensions, X509_EXTENSION_free);
	a->extensions = NULL;
}

int
TS_REQ_get_ext_count(TS_REQ *a)
{
	return X509v3_get_ext_count(a->extensions);
}

int
TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos)
{
	return X509v3_get_ext_by_NID(a->extensions, nid, lastpos);
}

int
TS_REQ_get_ext_by_OBJ(TS_REQ *a, ASN1_OBJECT *obj, int lastpos)
{
	return X509v3_get_ext_by_OBJ(a->extensions, obj, lastpos);
}

int
TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos)
{
	return X509v3_get_ext_by_critical(a->extensions, crit, lastpos);
}

X509_EXTENSION *
TS_REQ_get_ext(TS_REQ *a, int loc)
{
	return X509v3_get_ext(a->extensions, loc);
}

X509_EXTENSION *
TS_REQ_delete_ext(TS_REQ *a, int loc)
{
	return X509v3_delete_ext(a->extensions, loc);
}

int
TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc)
{
	return X509v3_add_ext(&a->extensions, ex, loc) != NULL;
}

void *
TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx)
{
	return X509V3_get_d2i(a->extensions, nid, crit, idx);
}
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
a61 1
#include "cryptlib.h"
d63 1
a64 1
#include <openssl/ts.h>
@


1.2
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/ts/ts_req_utils.c */
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d65 3
a67 2
int TS_REQ_set_version(TS_REQ *a, long version)
	{
d69 1
a69 1
	}
d71 3
a73 2
long TS_REQ_get_version(const TS_REQ *a)
	{
d75 1
a75 1
	}
d77 3
a79 2
int TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)
	{
d85 1
a85 2
	if (new_msg_imprint == NULL)
		{
d88 1
a88 1
		}
d92 1
a92 1
	}
d94 3
a96 2
TS_MSG_IMPRINT *TS_REQ_get_msg_imprint(TS_REQ *a)
	{
d98 1
a98 1
	}
d100 3
a102 2
int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg)
	{
d108 1
a108 2
	if (new_alg == NULL)
		{
d111 1
a111 1
		}
d115 1
a115 1
	}
d117 3
a119 2
X509_ALGOR *TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a)
	{
d121 1
a121 1
	}
d123 3
a125 2
int TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len)
	{
d127 1
a127 1
	}
d129 3
a131 2
ASN1_OCTET_STRING *TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a)
	{
d133 1
a133 1
	}
d135 3
a137 2
int TS_REQ_set_policy_id(TS_REQ *a, ASN1_OBJECT *policy)
	{
d143 1
a143 2
	if (new_policy == NULL)
		{
d146 1
a146 1
		}
d150 1
a150 1
	}
d152 3
a154 2
ASN1_OBJECT *TS_REQ_get_policy_id(TS_REQ *a)
	{
d156 1
a156 1
	}
d158 3
a160 2
int TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce)
	{
d166 1
a166 2
	if (new_nonce == NULL)
		{
d169 1
a169 1
		}
d173 1
a173 1
	}
d175 3
a177 2
const ASN1_INTEGER *TS_REQ_get_nonce(const TS_REQ *a)
	{
d179 1
a179 1
	}
d181 3
a183 2
int TS_REQ_set_cert_req(TS_REQ *a, int cert_req)
	{
d186 1
a186 1
	}
d188 3
a190 2
int TS_REQ_get_cert_req(const TS_REQ *a)
	{
d192 1
a192 1
	}
d195 1
a195 1
	{
d197 1
a197 1
	}
d199 5
a203 3
void TS_REQ_ext_free(TS_REQ *a)
	{
	if (!a) return;
d206 1
a206 1
	}
d208 3
a210 2
int TS_REQ_get_ext_count(TS_REQ *a)
	{
d212 1
a212 1
	}
d214 3
a216 2
int TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos)
	{
d218 1
a218 1
	}
d220 3
a222 2
int TS_REQ_get_ext_by_OBJ(TS_REQ *a, ASN1_OBJECT *obj, int lastpos)
	{
d224 1
a224 1
	}
d226 3
a228 2
int TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos)
	{
d230 1
a230 1
	}
d232 21
a252 17
X509_EXTENSION *TS_REQ_get_ext(TS_REQ *a, int loc)
	{
	return X509v3_get_ext(a->extensions,loc);
	}

X509_EXTENSION *TS_REQ_delete_ext(TS_REQ *a, int loc)
	{
	return X509v3_delete_ext(a->extensions,loc);
	}

int TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc)
	{
	return X509v3_add_ext(&a->extensions,ex,loc) != NULL;
	}

void *TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx)
	{
d254 1
a254 1
	}
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@
