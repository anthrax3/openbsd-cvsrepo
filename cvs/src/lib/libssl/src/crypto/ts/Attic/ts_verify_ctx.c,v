head	1.9;
access;
symbols
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	butholakala:1.1.1.2
	openssl_1_0_1_g:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.12
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.8
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.6
	OPENBSD_5_3_BASE:1.1.1.2
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.2
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.4
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	openssh_1_0_0_a:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.09.03.11.33.39;	author beck;	state dead;
branches;
next	1.8;
commitid	HnbXxsegngek41U2;

1.8
date	2015.02.10.09.46.30;	author miod;	state Exp;
branches;
next	1.7;
commitid	XPddOr5uXbWZR9wr;

1.7
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.6;
commitid	yQEL1wOWIearrW15;

1.6
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.5;
commitid	id8dTrTMtnTn4fqt;

1.5
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.25.20.28.50;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.21.16.32.06;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.11.03.02.32.14;	author djm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove the libssl/src directory
@
text
@/* $OpenBSD: ts_verify_ctx.c,v 1.8 2015/02/10 09:46:30 miod Exp $ */
/* Written by Zoltan Glozik (zglozik@@stones.com) for the OpenSSL
 * project 2003.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <string.h>

#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/ts.h>

TS_VERIFY_CTX *
TS_VERIFY_CTX_new(void)
{
	TS_VERIFY_CTX *ctx = calloc(1, sizeof(TS_VERIFY_CTX));

	if (!ctx)
		TSerr(TS_F_TS_VERIFY_CTX_NEW, ERR_R_MALLOC_FAILURE);

	return ctx;
}

void
TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx)
{
	memset(ctx, 0, sizeof(TS_VERIFY_CTX));
}

void
TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx)
{
	if (!ctx)
		return;

	TS_VERIFY_CTX_cleanup(ctx);
	free(ctx);
}

void
TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx)
{
	if (!ctx)
		return;

	X509_STORE_free(ctx->store);
	sk_X509_pop_free(ctx->certs, X509_free);

	ASN1_OBJECT_free(ctx->policy);

	X509_ALGOR_free(ctx->md_alg);
	free(ctx->imprint);

	BIO_free_all(ctx->data);

	ASN1_INTEGER_free(ctx->nonce);

	GENERAL_NAME_free(ctx->tsa_name);

	TS_VERIFY_CTX_init(ctx);
}

TS_VERIFY_CTX *
TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx)
{
	TS_VERIFY_CTX *ret = ctx;
	ASN1_OBJECT *policy;
	TS_MSG_IMPRINT *imprint;
	X509_ALGOR *md_alg;
	ASN1_OCTET_STRING *msg;
	const ASN1_INTEGER *nonce;

	if (ret)
		TS_VERIFY_CTX_cleanup(ret);
	else if (!(ret = TS_VERIFY_CTX_new()))
		return NULL;

	/* Setting flags. */
	ret->flags = TS_VFY_ALL_IMPRINT & ~(TS_VFY_TSA_NAME | TS_VFY_SIGNATURE);

	/* Setting policy. */
	if ((policy = TS_REQ_get_policy_id(req)) != NULL) {
		if (!(ret->policy = OBJ_dup(policy)))
			goto err;
	} else
		ret->flags &= ~TS_VFY_POLICY;

	/* Setting md_alg, imprint and imprint_len. */
	imprint = TS_REQ_get_msg_imprint(req);
	md_alg = TS_MSG_IMPRINT_get_algo(imprint);
	if (!(ret->md_alg = X509_ALGOR_dup(md_alg)))
		goto err;
	msg = TS_MSG_IMPRINT_get_msg(imprint);
	ret->imprint_len = ASN1_STRING_length(msg);
	if (!(ret->imprint = malloc(ret->imprint_len)))
		goto err;
	memcpy(ret->imprint, ASN1_STRING_data(msg), ret->imprint_len);

	/* Setting nonce. */
	if ((nonce = TS_REQ_get_nonce(req)) != NULL) {
		if (!(ret->nonce = ASN1_INTEGER_dup(nonce)))
			goto err;
	} else
		ret->flags &= ~TS_VFY_NONCE;

	return ret;

err:
	if (ctx)
		TS_VERIFY_CTX_cleanup(ctx);
	else
		TS_VERIFY_CTX_free(ret);
	return NULL;
}
@


1.8
log
@Remove assert() or OPENSSL_assert() of pointers being non-NULL. The policy
for libraries in OpenBSD is to deliberately let NULL pointers cause a SIGSEGV.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_verify_ctx.c,v 1.7 2014/07/11 08:44:49 jsing Exp $ */
@


1.7
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_verify_ctx.c,v 1.6 2014/07/10 13:58:23 jsing Exp $ */
a78 1
	OPENSSL_assert(ctx != NULL);
a124 1
	OPENSSL_assert(req != NULL);
@


1.6
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ts_verify_ctx.c,v 1.5 2014/06/12 15:49:31 deraadt Exp $ */
d61 1
a61 1
#include "cryptlib.h"
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d58 2
@


1.4
log
@calloc instead of malloc/memset. from Benjamin Baier
@
text
@d1 1
a1 1
/* crypto/ts/ts_verify_ctx.c */
@


1.3
log
@KNF.
@
text
@d66 1
a66 1
	TS_VERIFY_CTX *ctx = (TS_VERIFY_CTX *) malloc(sizeof(TS_VERIFY_CTX));
d68 1
a68 3
	if (ctx)
		memset(ctx, 0, sizeof(TS_VERIFY_CTX));
	else
d70 1
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d63 5
a67 4
TS_VERIFY_CTX *TS_VERIFY_CTX_new(void)
	{
	TS_VERIFY_CTX *ctx = 
		(TS_VERIFY_CTX *) malloc(sizeof(TS_VERIFY_CTX));
d73 1
a73 1
	}
d75 3
a77 2
void TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx)
	{
d80 1
a80 1
	}
d82 5
a86 3
void TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx)
	{
	if (!ctx) return;
d90 1
a90 1
	}
d92 5
a96 3
void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx)
	{
	if (!ctx) return;
d105 1
a105 1
	
d113 1
a113 1
	}
d115 3
a117 2
TS_VERIFY_CTX *TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx)
	{
d128 2
a129 2
	else
		if (!(ret = TS_VERIFY_CTX_new())) return NULL;
d135 4
a138 5
	if ((policy = TS_REQ_get_policy_id(req)) != NULL)
		{
		if (!(ret->policy = OBJ_dup(policy))) goto err;
		}
	else
d144 2
a145 1
	if (!(ret->md_alg = X509_ALGOR_dup(md_alg))) goto err;
d148 2
a149 1
	if (!(ret->imprint = malloc(ret->imprint_len))) goto err;
d153 4
a156 5
	if ((nonce = TS_REQ_get_nonce(req)) != NULL)
		{
		if (!(ret->nonce = ASN1_INTEGER_dup(nonce))) goto err;
		}
	else
d160 2
a161 1
 err:
d167 1
a167 1
	}
@


1.1
log
@Initial revision
@
text
@a58 1
#include <assert.h>
d66 1
a66 1
		(TS_VERIFY_CTX *) OPENSSL_malloc(sizeof(TS_VERIFY_CTX));
d76 1
a76 1
	assert(ctx != NULL);
d85 1
a85 1
	OPENSSL_free(ctx);
d98 1
a98 1
	OPENSSL_free(ctx->imprint);
d118 1
a118 1
	assert(req != NULL);
d141 1
a141 1
	if (!(ret->imprint = OPENSSL_malloc(ret->imprint_len))) goto err;
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL 1.0.0e
@
text
@d59 1
d77 1
a77 1
	OPENSSL_assert(ctx != NULL);
d119 1
a119 1
	OPENSSL_assert(req != NULL);
@

