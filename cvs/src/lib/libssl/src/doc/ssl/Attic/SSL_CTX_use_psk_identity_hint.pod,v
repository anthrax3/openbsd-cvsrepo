head	1.3;
access;
symbols
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	butholakala:1.2
	openssl_1_0_1_g:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	openssl_1_0_1_c:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.6
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.8
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	openssh_1_0_0_a:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.10.12.09.33.03;	author bentley;	state dead;
branches;
next	1.2;
commitid	d4OKqHtOZ8kX9T2O;

1.2
date	2014.03.18.17.46.04;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.14;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.14;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.04.13.15.16.36;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Convert libssl manpages from pod to mdoc(7).

libcrypto has not been started yet.

ok schwarze@@ miod@@
@
text
@=pod

=begin comment

Copyright 2005 Nokia. All rights reserved.

The portions of the attached software ("Contribution") is developed by
Nokia Corporation and is licensed pursuant to the OpenSSL open source
license.

The Contribution, originally written by Mika Kousa and Pasi Eronen of
Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
support (see RFC 4279) to OpenSSL.

No patent licenses or other rights except those expressly stated in
the OpenSSL open source license shall be deemed granted or received
expressly, by implication, estoppel, or otherwise.

No assurances are provided by Nokia that the Contribution does not
infringe the patent or other intellectual property rights of any third
party or that the license provides you with all the necessary rights
to make use of the Contribution.

THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
OTHERWISE.

=end comment

=head1 NAME

SSL_CTX_use_psk_identity_hint, SSL_use_psk_identity_hint,
SSL_CTX_set_psk_server_callback, SSL_set_psk_server_callback - set PSK
identity hint to use


=head1 SYNOPSIS

 #include <openssl/ssl.h>

 int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *hint);
 int SSL_use_psk_identity_hint(SSL *ssl, const char *hint);

 void SSL_CTX_set_psk_server_callback(SSL_CTX *ctx,
	unsigned int (*callback)(SSL *ssl, const char *identity,
	unsigned char *psk, int max_psk_len));
 void SSL_set_psk_server_callback(SSL *ssl,
	unsigned int (*callback)(SSL *ssl, const char *identity,
	unsigned char *psk, int max_psk_len));


=head1 DESCRIPTION

SSL_CTX_use_psk_identity_hint() sets the given B<NULL>-terminated PSK
identity hint B<hint> to SSL context object
B<ctx>. SSL_use_psk_identity_hint() sets the given B<NULL>-terminated
PSK identity hint B<hint> to SSL connection object B<ssl>. If B<hint>
is B<NULL> the current hint from B<ctx> or B<ssl> is deleted.

In the case where PSK identity hint is B<NULL>, the server
does not send the ServerKeyExchange message to the client.

A server application must provide a callback function which is called
when the server receives the ClientKeyExchange message from the
client. The purpose of the callback function is to validate the
received PSK identity and to fetch the pre-shared key used during the
connection setup phase. The callback is set using functions
SSL_CTX_set_psk_server_callback() or
SSL_set_psk_server_callback(). The callback function is given the
connection in parameter B<ssl>, B<NULL>-terminated PSK identity sent
by the client in parameter B<identity>, and a buffer B<psk> of length
B<max_psk_len> bytes where the pre-shared key is to be stored.


=head1 RETURN VALUES

SSL_CTX_use_psk_identity_hint() and SSL_use_psk_identity_hint() return
1 on success, 0 otherwise.

Return values from the server callback are interpreted as follows:

=over 4

=item C<E<gt> 0>

PSK identity was found and the server callback has provided the PSK
successfully in parameter B<psk>. Return value is the length of
B<psk> in bytes. It is an error to return a value greater than
B<max_psk_len>.

If the PSK identity was not found but the callback instructs the
protocol to continue anyway, the callback must provide some random
data to B<psk> and return the length of the random data, so the
connection will fail with decryption_error before it will be finished
completely.

=item C<0>

PSK identity was not found. An "unknown_psk_identity" alert message
will be sent and the connection setup fails.

=back

=cut
@


1.2
log
@prepare manpages for new perl.
Note that I missed two of these in the diff shown initially, thx
to the atrocious Makefile rule...

okay millert@@, sthen@@, basically
@
text
@@


1.1
log
@Initial revision
@
text
@d84 3
a86 1
=item > 0
d99 1
a99 1
=item 0
d103 2
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@Import OpenSSL 1.0.1g
@
text
@a83 2
=over 4

a100 2

=back
@

