head	1.5;
access;
symbols
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	butholakala:1.2
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.1.0.40
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.42
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.1.0.38
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.36
	OPENBSD_4_9_BASE:1.1
	openssh_1_0_0_a:1.1.1.1
	OPENBSD_4_8:1.1.0.34
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.30
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.32
	OPENBSD_4_6_BASE:1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.0.28
	OPENBSD_4_5_BASE:1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	pre_openssl_0_9_8h:1.1
	OPENBSD_4_4:1.1.0.26
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.24
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.22
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.20
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.18
	OPENBSD_4_0_BASE:1.1
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.1.0.16
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.14
	OPENBSD_3_8_BASE:1.1
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.1.0.12
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.10
	OPENBSD_3_6_BASE:1.1
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2014.10.12.09.33.04;	author bentley;	state dead;
branches;
next	1.4;
commitid	d4OKqHtOZ8kX9T2O;

1.4
date	2014.05.04.21.13.41;	author jim;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.04.21.08.16;	author jim;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.19;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.20;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.47;	author djm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Convert libssl manpages from pod to mdoc(7).

libcrypto has not been started yet.

ok schwarze@@ miod@@
@
text
@=pod

=head1 NAME

SSL_alert_type_string, SSL_alert_type_string_long, SSL_alert_desc_string,
SSL_alert_desc_string_long - get textual description of alert information

=head1 SYNOPSIS

 #include <openssl/ssl.h>

 const char *SSL_alert_type_string(int value);
 const char *SSL_alert_type_string_long(int value);

 const char *SSL_alert_desc_string(int value);
 const char *SSL_alert_desc_string_long(int value);

=head1 DESCRIPTION

SSL_alert_type_string() returns a one letter string indicating the
type of the alert specified by B<value>.

SSL_alert_type_string_long() returns a string indicating the type of the alert
specified by B<value>.

SSL_alert_desc_string() returns a two letter string as a short form
describing the reason of the alert specified by B<value>.

SSL_alert_desc_string_long() returns a string describing the reason
of the alert specified by B<value>.

=head1 NOTES

When one side of an SSL/TLS communication wants to inform the peer about
a special situation, it sends an alert. The alert is sent as a special message
and does not influence the normal data stream (unless its contents results
in the communication being canceled).

A warning alert is sent, when a non-fatal error condition occurs. The
"close notify" alert is sent as a warning alert. Other examples for
non-fatal errors are certificate errors ("certificate expired",
"unsupported certificate"), for which a warning alert may be sent.
(The sending party may however decide to send a fatal error.) The
receiving side may cancel the connection on reception of a warning
alert on it discretion.

Several alert messages must be sent as fatal alert messages as specified
by the TLS RFC. A fatal alert always leads to a connection abort.

=head1 RETURN VALUES

The following strings can occur for SSL_alert_type_string() or
SSL_alert_type_string_long():

=over 4

=item "W"/"warning"

=item "F"/"fatal"

=item "U"/"unknown"

This indicates that no support is available for this alert type.
Probably B<value> does not contain a correct alert message.

=back

The following strings can occur for SSL_alert_desc_string() or
SSL_alert_desc_string_long():

=over 4

=item "CN"/"close notify"

The connection shall be closed. This is a warning alert.

=item "UM"/"unexpected message"

An inappropriate message was received. This alert is always fatal
and should never be observed in communication between proper
implementations.

=item "BM"/"bad record mac"

This alert is returned if a record is received with an incorrect
MAC. This message is always fatal.

=item "DF"/"decompression failure"

The decompression function received improper input (e.g. data
that would expand to excessive length). This message is always
fatal.

=item "HF"/"handshake failure"

Reception of a handshake_failure alert message indicates that the
sender was unable to negotiate an acceptable set of security
parameters given the options available. This is a fatal error.

=item "NC"/"no certificate"

A client, that was asked to send a certificate, does not send a certificate
(SSLv3 only).

=item "BC"/"bad certificate"

A certificate was corrupt, contained signatures that did not
verify correctly, etc

=item "UC"/"unsupported certificate"

A certificate was of an unsupported type.

=item "CR"/"certificate revoked"

A certificate was revoked by its signer.

=item "CE"/"certificate expired"

A certificate has expired or is not currently valid.

=item "CU"/"certificate unknown"

Some other (unspecified) issue arose in processing the
certificate, rendering it unacceptable.

=item "IP"/"illegal parameter"

A field in the handshake was out of range or inconsistent with
other fields. This is always fatal.

=item "DC"/"decryption failed"

A TLSCiphertext decrypted in an invalid way: either it wasn't an
even multiple of the block length or its padding values, when
checked, weren't correct. This message is always fatal.

=item "RO"/"record overflow"

A TLSCiphertext record was received which had a length more than
2^14+2048 bytes, or a record decrypted to a TLSCompressed record
with more than 2^14+1024 bytes. This message is always fatal.

=item "CA"/"unknown CA"

A valid certificate chain or partial chain was received, but the
certificate was not accepted because the CA certificate could not
be located or couldn't be matched with a known, trusted CA.  This
message is always fatal.

=item "AD"/"access denied"

A valid certificate was received, but when access control was
applied, the sender decided not to proceed with negotiation.
This message is always fatal.

=item "DE"/"decode error"

A message could not be decoded because some field was out of the
specified range or the length of the message was incorrect. This
message is always fatal.

=item "CY"/"decrypt error"

A handshake cryptographic operation failed, including being
unable to correctly verify a signature, decrypt a key exchange,
or validate a finished message.

=item "ER"/"export restriction"

A negotiation not in compliance with export restrictions was
detected; for example, attempting to transfer a 1024 bit
ephemeral RSA key for the RSA_EXPORT handshake method. This
message is always fatal.

=item "PV"/"protocol version"

The protocol version the client has attempted to negotiate is
recognized, but not supported. (For example, old protocol
versions might be avoided for security reasons). This message is
always fatal.

=item "IS"/"insufficient security"

Returned instead of handshake_failure when a negotiation has
failed specifically because the server requires ciphers more
secure than those supported by the client. This message is always
fatal.

=item "IE"/"internal error"

An internal error unrelated to the peer or the correctness of the
protocol makes it impossible to continue (such as a memory
allocation failure). This message is always fatal.

=item "US"/"user canceled"

This handshake is being canceled for some reason unrelated to a
protocol failure. If the user cancels an operation after the
handshake is complete, just closing the connection by sending a
close_notify is more appropriate. This alert should be followed
by a close_notify. This message is generally a warning.

=item "NR"/"no renegotiation"

Sent by the client in response to a hello request or by the
server in response to a client hello after initial handshaking.
Either of these would normally lead to renegotiation; when that
is not appropriate, the recipient should respond with this alert;
at that point, the original requester can decide whether to
proceed with the connection. One case where this would be
appropriate would be where a server has spawned a process to
satisfy a request; the process might receive security parameters
(key length, authentication, etc.) at startup and it might be
difficult to communicate changes to these parameters after that
point. This message is always a warning.

=item "UP"/"unknown PSK identity"

Sent by the server to indicate that it does not recognize a PSK
identity or an SRP identity.

=item "UK"/"unknown"

This indicates that no description is available for this alert type.
Probably B<value> does not contain a correct alert message.

=back

=head1 SEE ALSO

L<ssl(3)|ssl(3)>, L<SSL_CTX_set_info_callback(3)|SSL_CTX_set_info_callback(3)>

=cut
@


1.4
log
@Improve line wrapping for lines exceeding 80 chars.

ok jmc@@
@
text
@@


1.3
log
@Remove trailing whitespace.

ok jmc@@
@
text
@d5 2
a6 1
SSL_alert_type_string, SSL_alert_type_string_long, SSL_alert_desc_string, SSL_alert_desc_string_long - get textual description of alert information
@


1.2
log
@resolve conflicts
@
text
@d220 1
a220 1
identity or an SRP identity. 
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d217 5
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@a216 5
=item "UP"/"unknown PSK identity"

Sent by the server to indicate that it does not recognize a PSK
identity or an SRP identity. 

@


