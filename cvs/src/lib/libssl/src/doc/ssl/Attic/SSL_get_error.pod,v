head	1.9;
access;
symbols
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	butholakala:1.7
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.7.0.38
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.34
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.32
	OPENBSD_5_3_BASE:1.7
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.7.0.28
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.30
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.7.0.26
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.24
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.7.0.22
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.6.0.12
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.10
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@# @;


1.9
date	2014.10.12.09.33.04;	author bentley;	state dead;
branches;
next	1.8;
commitid	d4OKqHtOZ8kX9T2O;

1.8
date	2014.05.04.21.13.41;	author jim;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.29;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.10.16.31.56;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.19;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.01.19.51.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.00.03.33;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.58.33;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.13.07;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.22;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.43.38;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.24;	author djm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Convert libssl manpages from pod to mdoc(7).

libcrypto has not been started yet.

ok schwarze@@ miod@@
@
text
@=pod

=head1 NAME

SSL_get_error - obtain result code for TLS/SSL I/O operation

=head1 SYNOPSIS

 #include <openssl/ssl.h>

 int SSL_get_error(const SSL *ssl, int ret);

=head1 DESCRIPTION

SSL_get_error() returns a result code (suitable for the C "switch" statement)
for a preceding call to SSL_connect(), SSL_accept(), SSL_do_handshake(),
SSL_read(), SSL_peek(), or SSL_write() on B<ssl>.  The value returned by that
TLS/SSL I/O function must be passed to SSL_get_error() in parameter B<ret>.

In addition to B<ssl> and B<ret>, SSL_get_error() inspects the
current thread's OpenSSL error queue.  Thus, SSL_get_error() must be
used in the same thread that performed the TLS/SSL I/O operation, and no
other OpenSSL function calls should appear in between.  The current
thread's error queue must be empty before the TLS/SSL I/O operation is
attempted, or SSL_get_error() will not work reliably.

=head1 RETURN VALUES

The following return values can currently occur:

=over 4

=item SSL_ERROR_NONE

The TLS/SSL I/O operation completed.  This result code is returned
if and only if B<ret E<gt> 0>.

=item SSL_ERROR_ZERO_RETURN

The TLS/SSL connection has been closed.  If the protocol version is SSL 3.0
or TLS 1.0, this result code is returned only if a closure
alert has occurred in the protocol, i.e. if the connection has been
closed cleanly. Note that in this case B<SSL_ERROR_ZERO_RETURN>
does not necessarily indicate that the underlying transport
has been closed.

=item SSL_ERROR_WANT_READ, SSL_ERROR_WANT_WRITE

The operation did not complete; the same TLS/SSL I/O function should be
called again later.  If, by then, the underlying B<BIO> has data
available for reading (if the result code is B<SSL_ERROR_WANT_READ>)
or allows writing data (B<SSL_ERROR_WANT_WRITE>), then some TLS/SSL
protocol progress will take place, i.e. at least part of an TLS/SSL
record will be read or written.  Note that the retry may again lead to
a B<SSL_ERROR_WANT_READ> or B<SSL_ERROR_WANT_WRITE> condition.
There is no fixed upper limit for the number of iterations that
may be necessary until progress becomes visible at application
protocol level.

For socket B<BIO>s (e.g. when SSL_set_fd() was used), select() or
poll() on the underlying socket can be used to find out when the
TLS/SSL I/O function should be retried.

Caveat: Any TLS/SSL I/O function can lead to either of
B<SSL_ERROR_WANT_READ> and B<SSL_ERROR_WANT_WRITE>.  In particular,
SSL_read() or SSL_peek() may want to write data and SSL_write() may want
to read data.  This is mainly because TLS/SSL handshakes may occur at any
time during the protocol (initiated by either the client or the server);
SSL_read(), SSL_peek(), and SSL_write() will handle any pending handshakes.

=item SSL_ERROR_WANT_CONNECT, SSL_ERROR_WANT_ACCEPT

The operation did not complete; the same TLS/SSL I/O function should be
called again later. The underlying BIO was not connected yet to the peer
and the call would block in connect()/accept(). The SSL function should be
called again when the connection is established. These messages can only
appear with a BIO_s_connect() or BIO_s_accept() BIO, respectively.
In order to find out, when the connection has been successfully established,
on many platforms select() or poll() for writing on the socket file descriptor
can be used.

=item SSL_ERROR_WANT_X509_LOOKUP

The operation did not complete because an application callback set by
SSL_CTX_set_client_cert_cb() has asked to be called again.
The TLS/SSL I/O function should be called again later.
Details depend on the application.

=item SSL_ERROR_SYSCALL

Some I/O error occurred.  The OpenSSL error queue may contain more
information on the error.  If the error queue is empty
(i.e. ERR_get_error() returns 0), B<ret> can be used to find out more
about the error: If B<ret == 0>, an EOF was observed that violates
the protocol.  If B<ret == -1>, the underlying B<BIO> reported an
I/O error (for socket I/O on Unix systems, consult B<errno> for details).

=item SSL_ERROR_SSL

A failure in the SSL library occurred, usually a protocol error.  The
OpenSSL error queue contains more information on the error.

=back

=head1 SEE ALSO

L<ssl(3)|ssl(3)>, L<err(3)|err(3)>

=head1 HISTORY

SSL_get_error() was added in SSLeay 0.8.

=cut
@


1.8
log
@Improve line wrapping for lines exceeding 80 chars.

ok jmc@@
@
text
@@


1.7
log
@resolve conflicts
@
text
@d15 4
a18 5
SSL_get_error() returns a result code (suitable for the C "switch"
statement) for a preceding call to SSL_connect(), SSL_accept(), SSL_do_handshake(),
SSL_read(), SSL_peek(), or SSL_write() on B<ssl>.  The value returned by
that TLS/SSL I/O function must be passed to SSL_get_error() in parameter
B<ret>.
@


1.6
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d11 1
a11 1
 int SSL_get_error(SSL *ssl, int ret);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d16 1
a16 1
statement) for a preceding call to SSL_connect(), SSL_accept(),
@


1.4
log
@merge openssl 0.9.6b-engine

Note that this is a maintenence release, API's appear *not* to have changed.
As such, I have only increased the minor number on these libraries
@
text
@d72 1
a72 1
=item SSL_ERROR_WANT_CONNECT
d76 3
a78 3
and the call would block in connect(). The SSL function should be
called again when the connection is established. This messages can only
appear with a BIO_s_connect() BIO.
@


1.3
log
@openssl-engine-0.9.6a merge
@
text
@d72 11
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d17 2
a18 2
SSL_read(), or SSL_write() on B<ssl>.  The value returned by that
TLS/SSL I/O function must be passed to SSL_get_error() in parameter
d51 13
a63 6
called again later.  There will be protocol progress if, by then, the
underlying B<BIO> has data available for reading (if the result code is
B<SSL_ERROR_WANT_READ>) or allows writing data (B<SSL_ERROR_WANT_WRITE>). 
For socket B<BIO>s (e.g. when SSL_set_fd() was used) this means that
select() or poll() on the underlying socket can be used to find out
when the TLS/SSL I/O function should be retried.
d66 5
a70 2
B<SSL_ERROR_WANT_READ> and B<SSL_ERROR_WANT_WRITE>, i.e. SSL_read()
may want to write data and SSL_write() may want to read data.
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d5 1
a5 1
SSL_get_error - obtain result code for SSL I/O operation
d18 1
a18 1
SSL I/O function must be passed to SSL_get_error() in parameter
d23 1
a23 1
used in the same thread that performed the SSL I/O operation, and no
d25 1
a25 1
thread's error queue must be empty before the SSL I/O operation is
d36 1
a36 1
The SSL I/O operation completed.  This result code is returned
d41 1
a41 1
The SSL connection has been closed.  If the protocol version is SSL 3.0
d43 4
a46 2
alerts has occurred in the protocol, i.e. if the connection has been
closed cleanly.
d50 1
a50 1
The operation did not complete; the same SSL I/O function should be
d56 1
a56 1
when the SSL I/O function should be retried.
d58 1
a58 1
Caveat: Any SSL I/O function can lead to either of
d66 1
a66 1
The SSL I/O function should be called again later.
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d5 1
a5 1
SSL_get_error - obtain result code for TLS/SSL I/O operation
d17 2
a18 2
SSL_read(), SSL_peek(), or SSL_write() on B<ssl>.  The value returned by
that TLS/SSL I/O function must be passed to SSL_get_error() in parameter
d23 1
a23 1
used in the same thread that performed the TLS/SSL I/O operation, and no
d25 1
a25 1
thread's error queue must be empty before the TLS/SSL I/O operation is
d36 1
a36 1
The TLS/SSL I/O operation completed.  This result code is returned
d41 1
a41 1
The TLS/SSL connection has been closed.  If the protocol version is SSL 3.0
d43 2
a44 4
alert has occurred in the protocol, i.e. if the connection has been
closed cleanly. Note that in this case B<SSL_ERROR_ZERO_RETURN>
does not necessarily indicate that the underlying transport
has been closed.
d48 11
a58 32
The operation did not complete; the same TLS/SSL I/O function should be
called again later.  If, by then, the underlying B<BIO> has data
available for reading (if the result code is B<SSL_ERROR_WANT_READ>)
or allows writing data (B<SSL_ERROR_WANT_WRITE>), then some TLS/SSL
protocol progress will take place, i.e. at least part of an TLS/SSL
record will be read or written.  Note that the retry may again lead to
a B<SSL_ERROR_WANT_READ> or B<SSL_ERROR_WANT_WRITE> condition.
There is no fixed upper limit for the number of iterations that
may be necessary until progress becomes visible at application
protocol level.

For socket B<BIO>s (e.g. when SSL_set_fd() was used), select() or
poll() on the underlying socket can be used to find out when the
TLS/SSL I/O function should be retried.

Caveat: Any TLS/SSL I/O function can lead to either of
B<SSL_ERROR_WANT_READ> and B<SSL_ERROR_WANT_WRITE>.  In particular,
SSL_read() or SSL_peek() may want to write data and SSL_write() may want
to read data.  This is mainly because TLS/SSL handshakes may occur at any
time during the protocol (initiated by either the client or the server);
SSL_read(), SSL_peek(), and SSL_write() will handle any pending handshakes.

=item SSL_ERROR_WANT_CONNECT, SSL_ERROR_WANT_ACCEPT

The operation did not complete; the same TLS/SSL I/O function should be
called again later. The underlying BIO was not connected yet to the peer
and the call would block in connect()/accept(). The SSL function should be
called again when the connection is established. These messages can only
appear with a BIO_s_connect() or BIO_s_accept() BIO, respectively.
In order to find out, when the connection has been successfully established,
on many platforms select() or poll() for writing on the socket file descriptor
can be used.
d64 1
a64 1
The TLS/SSL I/O function should be called again later.
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d16 1
a16 1
statement) for a preceding call to SSL_connect(), SSL_accept(), SSL_do_handshake(),
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d11 1
a11 1
 int SSL_get_error(const SSL *ssl, int ret);
@


